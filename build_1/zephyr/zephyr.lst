
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_start>:
    1000:	20006700 	.word	0x20006700
    1004:	00012b91 	.word	0x00012b91
    1008:	0002089d 	.word	0x0002089d
    100c:	00012b65 	.word	0x00012b65
    1010:	00012b65 	.word	0x00012b65
    1014:	00012b65 	.word	0x00012b65
    1018:	00012b65 	.word	0x00012b65
	...
    102c:	000127b5 	.word	0x000127b5
    1030:	00012b65 	.word	0x00012b65
    1034:	00000000 	.word	0x00000000
    1038:	00012761 	.word	0x00012761
    103c:	00018451 	.word	0x00018451

00001040 <_irq_vector_table>:
    1040:	0001286d 000228fb 0001286d 0001286d     m(...(..m(..m(..
    1050:	0001286d 0001286d 0001286d 0001286d     m(..m(..m(..m(..
    1060:	000228c3 0001286d 0001286d 000228e1     .(..m(..m(...(..
    1070:	0001286d 0001286d 0001286d 0001286d     m(..m(..m(..m(..
    1080:	0001286d 0001286d 0001286d 0001286d     m(..m(..m(..m(..
    1090:	0001286d 0001286d 0001286d 0001286d     m(..m(..m(..m(..
    10a0:	0001286d 0001286d 0001286d 0001286d     m(..m(..m(..m(..
    10b0:	0001286d 0001286d 0001286d 0001286d     m(..m(..m(..m(..
    10c0:	0001286d 0001286d 0001286d 0001286d     m(..m(..m(..m(..
    10d0:	0001286d 0001286d 0001286d 0001286d     m(..m(..m(..m(..
    10e0:	0001286d 0001286d 0001286d 0001286d     m(..m(..m(..m(..
    10f0:	0001286d 0001286d 0001286d 0001286d     m(..m(..m(..m(..

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295
    1110:	f04f 30ff 	movne.w	r0, #4294967295
    1114:	f000 b96c 	b.w	13f0 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f000 f806 	bl	1130 <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__udivmoddi4>:
    1130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1134:	9e08      	ldr	r6, [sp, #32]
    1136:	460d      	mov	r5, r1
    1138:	4604      	mov	r4, r0
    113a:	468e      	mov	lr, r1
    113c:	2b00      	cmp	r3, #0
    113e:	f040 8082 	bne.w	1246 <__udivmoddi4+0x116>
    1142:	428a      	cmp	r2, r1
    1144:	4617      	mov	r7, r2
    1146:	d946      	bls.n	11d6 <__udivmoddi4+0xa6>
    1148:	fab2 f282 	clz	r2, r2
    114c:	b14a      	cbz	r2, 1162 <__udivmoddi4+0x32>
    114e:	f1c2 0120 	rsb	r1, r2, #32
    1152:	fa05 f302 	lsl.w	r3, r5, r2
    1156:	fa20 f101 	lsr.w	r1, r0, r1
    115a:	4097      	lsls	r7, r2
    115c:	ea41 0e03 	orr.w	lr, r1, r3
    1160:	4094      	lsls	r4, r2
    1162:	ea4f 4817 	mov.w	r8, r7, lsr #16
    1166:	0c23      	lsrs	r3, r4, #16
    1168:	fbbe fcf8 	udiv	ip, lr, r8
    116c:	b2b9      	uxth	r1, r7
    116e:	fb08 ee1c 	mls	lr, r8, ip, lr
    1172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    1176:	fb0c f001 	mul.w	r0, ip, r1
    117a:	4298      	cmp	r0, r3
    117c:	d90a      	bls.n	1194 <__udivmoddi4+0x64>
    117e:	18fb      	adds	r3, r7, r3
    1180:	f10c 35ff 	add.w	r5, ip, #4294967295
    1184:	f080 8116 	bcs.w	13b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c>
    1188:	4298      	cmp	r0, r3
    118a:	f240 8113 	bls.w	13b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c>
    118e:	f1ac 0c02 	sub.w	ip, ip, #2
    1192:	443b      	add	r3, r7
    1194:	1a1b      	subs	r3, r3, r0
    1196:	b2a4      	uxth	r4, r4
    1198:	fbb3 f0f8 	udiv	r0, r3, r8
    119c:	fb08 3310 	mls	r3, r8, r0, r3
    11a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    11a4:	fb00 f101 	mul.w	r1, r0, r1
    11a8:	42a1      	cmp	r1, r4
    11aa:	d909      	bls.n	11c0 <__udivmoddi4+0x90>
    11ac:	193c      	adds	r4, r7, r4
    11ae:	f100 33ff 	add.w	r3, r0, #4294967295
    11b2:	f080 8101 	bcs.w	13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
    11b6:	42a1      	cmp	r1, r4
    11b8:	f240 80fe 	bls.w	13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
    11bc:	3802      	subs	r0, #2
    11be:	443c      	add	r4, r7
    11c0:	1a64      	subs	r4, r4, r1
    11c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    11c6:	2100      	movs	r1, #0
    11c8:	b11e      	cbz	r6, 11d2 <__udivmoddi4+0xa2>
    11ca:	40d4      	lsrs	r4, r2
    11cc:	2300      	movs	r3, #0
    11ce:	e9c6 4300 	strd	r4, r3, [r6]
    11d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11d6:	b902      	cbnz	r2, 11da <__udivmoddi4+0xaa>
    11d8:	deff      	udf	#255	; 0xff
    11da:	fab2 f282 	clz	r2, r2
    11de:	2a00      	cmp	r2, #0
    11e0:	d14f      	bne.n	1282 <__udivmoddi4+0x152>
    11e2:	1bcb      	subs	r3, r1, r7
    11e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    11e8:	fa1f f887 	uxth.w	r8, r7
    11ec:	2101      	movs	r1, #1
    11ee:	fbb3 fcfe 	udiv	ip, r3, lr
    11f2:	0c25      	lsrs	r5, r4, #16
    11f4:	fb0e 331c 	mls	r3, lr, ip, r3
    11f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    11fc:	fb08 f30c 	mul.w	r3, r8, ip
    1200:	42ab      	cmp	r3, r5
    1202:	d907      	bls.n	1214 <__udivmoddi4+0xe4>
    1204:	197d      	adds	r5, r7, r5
    1206:	f10c 30ff 	add.w	r0, ip, #4294967295
    120a:	d202      	bcs.n	1212 <__udivmoddi4+0xe2>
    120c:	42ab      	cmp	r3, r5
    120e:	f200 80e7 	bhi.w	13e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58>
    1212:	4684      	mov	ip, r0
    1214:	1aed      	subs	r5, r5, r3
    1216:	b2a3      	uxth	r3, r4
    1218:	fbb5 f0fe 	udiv	r0, r5, lr
    121c:	fb0e 5510 	mls	r5, lr, r0, r5
    1220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1224:	fb08 f800 	mul.w	r8, r8, r0
    1228:	45a0      	cmp	r8, r4
    122a:	d907      	bls.n	123c <__udivmoddi4+0x10c>
    122c:	193c      	adds	r4, r7, r4
    122e:	f100 33ff 	add.w	r3, r0, #4294967295
    1232:	d202      	bcs.n	123a <__udivmoddi4+0x10a>
    1234:	45a0      	cmp	r8, r4
    1236:	f200 80d7 	bhi.w	13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>
    123a:	4618      	mov	r0, r3
    123c:	eba4 0408 	sub.w	r4, r4, r8
    1240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1244:	e7c0      	b.n	11c8 <__udivmoddi4+0x98>
    1246:	428b      	cmp	r3, r1
    1248:	d908      	bls.n	125c <__udivmoddi4+0x12c>
    124a:	2e00      	cmp	r6, #0
    124c:	f000 80af 	beq.w	13ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26>
    1250:	2100      	movs	r1, #0
    1252:	e9c6 0500 	strd	r0, r5, [r6]
    1256:	4608      	mov	r0, r1
    1258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    125c:	fab3 f183 	clz	r1, r3
    1260:	2900      	cmp	r1, #0
    1262:	d14b      	bne.n	12fc <__udivmoddi4+0x1cc>
    1264:	42ab      	cmp	r3, r5
    1266:	d302      	bcc.n	126e <__udivmoddi4+0x13e>
    1268:	4282      	cmp	r2, r0
    126a:	f200 80b7 	bhi.w	13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>
    126e:	1a84      	subs	r4, r0, r2
    1270:	eb65 0303 	sbc.w	r3, r5, r3
    1274:	2001      	movs	r0, #1
    1276:	469e      	mov	lr, r3
    1278:	2e00      	cmp	r6, #0
    127a:	d0aa      	beq.n	11d2 <__udivmoddi4+0xa2>
    127c:	e9c6 4e00 	strd	r4, lr, [r6]
    1280:	e7a7      	b.n	11d2 <__udivmoddi4+0xa2>
    1282:	f1c2 0c20 	rsb	ip, r2, #32
    1286:	fa01 f302 	lsl.w	r3, r1, r2
    128a:	4097      	lsls	r7, r2
    128c:	fa20 f00c 	lsr.w	r0, r0, ip
    1290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1294:	fa21 fc0c 	lsr.w	ip, r1, ip
    1298:	4318      	orrs	r0, r3
    129a:	fbbc f1fe 	udiv	r1, ip, lr
    129e:	0c05      	lsrs	r5, r0, #16
    12a0:	fb0e cc11 	mls	ip, lr, r1, ip
    12a4:	fa1f f887 	uxth.w	r8, r7
    12a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    12ac:	fb01 f308 	mul.w	r3, r1, r8
    12b0:	42ab      	cmp	r3, r5
    12b2:	fa04 f402 	lsl.w	r4, r4, r2
    12b6:	d909      	bls.n	12cc <__udivmoddi4+0x19c>
    12b8:	197d      	adds	r5, r7, r5
    12ba:	f101 3cff 	add.w	ip, r1, #4294967295
    12be:	f080 808b 	bcs.w	13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
    12c2:	42ab      	cmp	r3, r5
    12c4:	f240 8088 	bls.w	13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
    12c8:	3902      	subs	r1, #2
    12ca:	443d      	add	r5, r7
    12cc:	1aeb      	subs	r3, r5, r3
    12ce:	b285      	uxth	r5, r0
    12d0:	fbb3 f0fe 	udiv	r0, r3, lr
    12d4:	fb0e 3310 	mls	r3, lr, r0, r3
    12d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    12dc:	fb00 f308 	mul.w	r3, r0, r8
    12e0:	42ab      	cmp	r3, r5
    12e2:	d907      	bls.n	12f4 <__udivmoddi4+0x1c4>
    12e4:	197d      	adds	r5, r7, r5
    12e6:	f100 3cff 	add.w	ip, r0, #4294967295
    12ea:	d271      	bcs.n	13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>
    12ec:	42ab      	cmp	r3, r5
    12ee:	d96f      	bls.n	13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>
    12f0:	3802      	subs	r0, #2
    12f2:	443d      	add	r5, r7
    12f4:	1aeb      	subs	r3, r5, r3
    12f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    12fa:	e778      	b.n	11ee <__udivmoddi4+0xbe>
    12fc:	f1c1 0c20 	rsb	ip, r1, #32
    1300:	408b      	lsls	r3, r1
    1302:	fa22 f70c 	lsr.w	r7, r2, ip
    1306:	431f      	orrs	r7, r3
    1308:	fa20 f40c 	lsr.w	r4, r0, ip
    130c:	fa05 f301 	lsl.w	r3, r5, r1
    1310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1314:	fa25 f50c 	lsr.w	r5, r5, ip
    1318:	431c      	orrs	r4, r3
    131a:	0c23      	lsrs	r3, r4, #16
    131c:	fbb5 f9fe 	udiv	r9, r5, lr
    1320:	fa1f f887 	uxth.w	r8, r7
    1324:	fb0e 5519 	mls	r5, lr, r9, r5
    1328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    132c:	fb09 fa08 	mul.w	sl, r9, r8
    1330:	45aa      	cmp	sl, r5
    1332:	fa02 f201 	lsl.w	r2, r2, r1
    1336:	fa00 f301 	lsl.w	r3, r0, r1
    133a:	d908      	bls.n	134e <__udivmoddi4+0x21e>
    133c:	197d      	adds	r5, r7, r5
    133e:	f109 30ff 	add.w	r0, r9, #4294967295
    1342:	d247      	bcs.n	13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
    1344:	45aa      	cmp	sl, r5
    1346:	d945      	bls.n	13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
    1348:	f1a9 0902 	sub.w	r9, r9, #2
    134c:	443d      	add	r5, r7
    134e:	eba5 050a 	sub.w	r5, r5, sl
    1352:	b2a4      	uxth	r4, r4
    1354:	fbb5 f0fe 	udiv	r0, r5, lr
    1358:	fb0e 5510 	mls	r5, lr, r0, r5
    135c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1360:	fb00 f808 	mul.w	r8, r0, r8
    1364:	45a0      	cmp	r8, r4
    1366:	d907      	bls.n	1378 <__udivmoddi4+0x248>
    1368:	193c      	adds	r4, r7, r4
    136a:	f100 35ff 	add.w	r5, r0, #4294967295
    136e:	d22d      	bcs.n	13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>
    1370:	45a0      	cmp	r8, r4
    1372:	d92b      	bls.n	13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>
    1374:	3802      	subs	r0, #2
    1376:	443c      	add	r4, r7
    1378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    137c:	eba4 0408 	sub.w	r4, r4, r8
    1380:	fba0 8902 	umull	r8, r9, r0, r2
    1384:	454c      	cmp	r4, r9
    1386:	46c6      	mov	lr, r8
    1388:	464d      	mov	r5, r9
    138a:	d319      	bcc.n	13c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38>
    138c:	d016      	beq.n	13bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34>
    138e:	b15e      	cbz	r6, 13a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20>
    1390:	ebb3 020e 	subs.w	r2, r3, lr
    1394:	eb64 0405 	sbc.w	r4, r4, r5
    1398:	fa04 fc0c 	lsl.w	ip, r4, ip
    139c:	40ca      	lsrs	r2, r1
    139e:	ea4c 0202 	orr.w	r2, ip, r2
    13a2:	40cc      	lsrs	r4, r1
    13a4:	e9c6 2400 	strd	r2, r4, [r6]
    13a8:	2100      	movs	r1, #0
    13aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13ae:	4631      	mov	r1, r6
    13b0:	4630      	mov	r0, r6
    13b2:	e70e      	b.n	11d2 <__udivmoddi4+0xa2>
    13b4:	46ac      	mov	ip, r5
    13b6:	e6ed      	b.n	1194 <__udivmoddi4+0x64>
    13b8:	4618      	mov	r0, r3
    13ba:	e701      	b.n	11c0 <__udivmoddi4+0x90>
    13bc:	4543      	cmp	r3, r8
    13be:	d2e6      	bcs.n	138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
    13c0:	ebb8 0e02 	subs.w	lr, r8, r2
    13c4:	eb69 0507 	sbc.w	r5, r9, r7
    13c8:	3801      	subs	r0, #1
    13ca:	e7e0      	b.n	138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
    13cc:	4628      	mov	r0, r5
    13ce:	e7d3      	b.n	1378 <__udivmoddi4+0x248>
    13d0:	4660      	mov	r0, ip
    13d2:	e78f      	b.n	12f4 <__udivmoddi4+0x1c4>
    13d4:	4681      	mov	r9, r0
    13d6:	e7ba      	b.n	134e <__udivmoddi4+0x21e>
    13d8:	4661      	mov	r1, ip
    13da:	e777      	b.n	12cc <__udivmoddi4+0x19c>
    13dc:	4608      	mov	r0, r1
    13de:	e74b      	b.n	1278 <__udivmoddi4+0x148>
    13e0:	f1ac 0c02 	sub.w	ip, ip, #2
    13e4:	443d      	add	r5, r7
    13e6:	e715      	b.n	1214 <__udivmoddi4+0xe4>
    13e8:	3802      	subs	r0, #2
    13ea:	443c      	add	r4, r7
    13ec:	e726      	b.n	123c <__udivmoddi4+0x10c>
    13ee:	bf00      	nop

000013f0 <__aeabi_idiv0>:
    13f0:	4770      	bx	lr
    13f2:	bf00      	nop

000013f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    13f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13f6:	4615      	mov	r5, r2
    13f8:	4a0a      	ldr	r2, [pc, #40]	; (1424 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    13fa:	461c      	mov	r4, r3
    13fc:	6856      	ldr	r6, [r2, #4]
    13fe:	b12e      	cbz	r6, 140c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    1400:	b001      	add	sp, #4
    1402:	462a      	mov	r2, r5
    1404:	46b4      	mov	ip, r6
    1406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    140a:	4760      	bx	ip
    140c:	2000      	movs	r0, #0
    140e:	f88d 0000 	strb.w	r0, [sp]
    1412:	4668      	mov	r0, sp
    1414:	f00b fefa 	bl	d20c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    1418:	f89d 0000 	ldrb.w	r0, [sp]
    141c:	1a28      	subs	r0, r5, r0
    141e:	7020      	strb	r0, [r4, #0]
    1420:	2000      	movs	r0, #0
    1422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1424:	20000000 	.word	0x20000000

00001428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    1428:	4801      	ldr	r0, [pc, #4]	; (1430 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    142a:	7800      	ldrb	r0, [r0, #0]
    142c:	4770      	bx	lr
    142e:	0000      	.short	0x0000
    1430:	20000008 	.word	0x20000008

00001434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    1434:	4905      	ldr	r1, [pc, #20]	; (144c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    1436:	780a      	ldrb	r2, [r1, #0]
    1438:	4290      	cmp	r0, r2
    143a:	d301      	bcc.n	1440 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    143c:	2000      	movs	r0, #0
    143e:	4770      	bx	lr
    1440:	6849      	ldr	r1, [r1, #4]
    1442:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    1446:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    144a:	4770      	bx	lr
    144c:	20000008 	.word	0x20000008
    1450:	b570      	push	{r4, r5, r6, lr}
    1452:	4605      	mov	r5, r0
    1454:	2a20      	cmp	r2, #32
    1456:	d027      	beq.n	14a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    1458:	4819      	ldr	r0, [pc, #100]	; (14c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    145a:	4c1a      	ldr	r4, [pc, #104]	; (14c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    145c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    1460:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    1464:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1468:	2920      	cmp	r1, #32
    146a:	d022      	beq.n	14b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    146c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    1470:	7840      	ldrb	r0, [r0, #1]
    1472:	784c      	ldrb	r4, [r1, #1]
    1474:	7048      	strb	r0, [r1, #1]
    1476:	4620      	mov	r0, r4
    1478:	4601      	mov	r1, r0
    147a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    147e:	4291      	cmp	r1, r2
    1480:	7005      	strb	r5, [r0, #0]
    1482:	7840      	ldrb	r0, [r0, #1]
    1484:	d1f8      	bne.n	1478 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    1486:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    148a:	2a20      	cmp	r2, #32
    148c:	bf1a      	itte	ne
    148e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    1492:	7054      	strbne	r4, [r2, #1]
    1494:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    1498:	2220      	movs	r2, #32
    149a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    149e:	f88c 2001 	strb.w	r2, [ip, #1]
    14a2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    14a6:	bd70      	pop	{r4, r5, r6, pc}
    14a8:	f240 217e 	movw	r1, #638	; 0x27e
    14ac:	2070      	movs	r0, #112	; 0x70
    14ae:	f003 f957 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14b2:	f893 4020 	ldrb.w	r4, [r3, #32]
    14b6:	7840      	ldrb	r0, [r0, #1]
    14b8:	f883 0020 	strb.w	r0, [r3, #32]
    14bc:	e7db      	b.n	1476 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    14be:	0000      	.short	0x0000
    14c0:	20000ca4 	.word	0x20000ca4
    14c4:	20000d24 	.word	0x20000d24
    14c8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14cc:	b085      	sub	sp, #20
    14ce:	4615      	mov	r5, r2
    14d0:	460c      	mov	r4, r1
    14d2:	f002 f91b 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    14d6:	4428      	add	r0, r5
    14d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14dc:	9002      	str	r0, [sp, #8]
    14de:	6821      	ldr	r1, [r4, #0]
    14e0:	1a08      	subs	r0, r1, r0
    14e2:	0200      	lsls	r0, r0, #8
    14e4:	17c1      	asrs	r1, r0, #31
    14e6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    14ea:	1200      	asrs	r0, r0, #8
    14ec:	2800      	cmp	r0, #0
    14ee:	f300 80d5 	bgt.w	169c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
    14f2:	48ac      	ldr	r0, [pc, #688]	; (17a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
    14f4:	9f08      	ldr	r7, [sp, #32]
    14f6:	4eac      	ldr	r6, [pc, #688]	; (17a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
    14f8:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    14fc:	9003      	str	r0, [sp, #12]
    14fe:	f890 5020 	ldrb.w	r5, [r0, #32]
    1502:	2020      	movs	r0, #32
    1504:	46e9      	mov	r9, sp
    1506:	f10d 0804 	add.w	r8, sp, #4
    150a:	f88d 0000 	strb.w	r0, [sp]
    150e:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    1512:	2d20      	cmp	r5, #32
    1514:	bf18      	it	ne
    1516:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    151a:	d025      	beq.n	1568 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    151c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1520:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1524:	6822      	ldr	r2, [r4, #0]
    1526:	68c1      	ldr	r1, [r0, #12]
    1528:	1a51      	subs	r1, r2, r1
    152a:	0209      	lsls	r1, r1, #8
    152c:	17ca      	asrs	r2, r1, #31
    152e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1532:	3008      	adds	r0, #8
    1534:	1209      	asrs	r1, r1, #8
    1536:	d417      	bmi.n	1568 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    1538:	8961      	ldrh	r1, [r4, #10]
    153a:	b171      	cbz	r1, 155a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    153c:	8941      	ldrh	r1, [r0, #10]
    153e:	b961      	cbnz	r1, 155a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    1540:	f000 fdba 	bl	20b8 <CONFIG_MAIN_STACK_SIZE+0xb8>
    1544:	f002 f8e2 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1548:	6821      	ldr	r1, [r4, #0]
    154a:	1a08      	subs	r0, r1, r0
    154c:	0200      	lsls	r0, r0, #8
    154e:	17c1      	asrs	r1, r0, #31
    1550:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1554:	1200      	asrs	r0, r0, #8
    1556:	2833      	cmp	r0, #51	; 0x33
    1558:	db06      	blt.n	1568 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    155a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    155e:	f889 5000 	strb.w	r5, [r9]
    1562:	7845      	ldrb	r5, [r0, #1]
    1564:	2d20      	cmp	r5, #32
    1566:	d1d9      	bne.n	151c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    1568:	f899 0000 	ldrb.w	r0, [r9]
    156c:	f888 0000 	strb.w	r0, [r8]
    1570:	46a1      	mov	r9, r4
    1572:	2d20      	cmp	r5, #32
    1574:	bf1c      	itt	ne
    1576:	488d      	ldrne	r0, [pc, #564]	; (17ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1578:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    157c:	f000 810e 	beq.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1580:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1584:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    1588:	f8d9 2004 	ldr.w	r2, [r9, #4]
    158c:	f8da 1008 	ldr.w	r1, [sl, #8]
    1590:	4648      	mov	r0, r9
    1592:	1a89      	subs	r1, r1, r2
    1594:	0209      	lsls	r1, r1, #8
    1596:	17ca      	asrs	r2, r1, #31
    1598:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    159c:	f10a 0708 	add.w	r7, sl, #8
    15a0:	1209      	asrs	r1, r1, #8
    15a2:	d415      	bmi.n	15d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
    15a4:	8979      	ldrh	r1, [r7, #10]
    15a6:	2900      	cmp	r1, #0
    15a8:	f000 80f8 	beq.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    15ac:	8941      	ldrh	r1, [r0, #10]
    15ae:	2900      	cmp	r1, #0
    15b0:	f040 80f4 	bne.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    15b4:	f000 fd80 	bl	20b8 <CONFIG_MAIN_STACK_SIZE+0xb8>
    15b8:	f002 f8a8 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    15bc:	6839      	ldr	r1, [r7, #0]
    15be:	1a08      	subs	r0, r1, r0
    15c0:	0200      	lsls	r0, r0, #8
    15c2:	17c1      	asrs	r1, r0, #31
    15c4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    15c8:	1200      	asrs	r0, r0, #8
    15ca:	2833      	cmp	r0, #51	; 0x33
    15cc:	f280 80e6 	bge.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    15d0:	f888 5000 	strb.w	r5, [r8]
    15d4:	f89a 1014 	ldrb.w	r1, [sl, #20]
    15d8:	f899 000c 	ldrb.w	r0, [r9, #12]
    15dc:	4281      	cmp	r1, r0
    15de:	d906      	bls.n	15ee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    15e0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    15e4:	7845      	ldrb	r5, [r0, #1]
    15e6:	2d20      	cmp	r5, #32
    15e8:	d1ca      	bne.n	1580 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    15ea:	f000 b8d7 	b.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    15ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
    15f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    15f6:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    15fa:	8a68      	ldrh	r0, [r5, #18]
    15fc:	68ef      	ldr	r7, [r5, #12]
    15fe:	2800      	cmp	r0, #0
    1600:	d143      	bne.n	168a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    1602:	8960      	ldrh	r0, [r4, #10]
    1604:	b3e8      	cbz	r0, 1682 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
    1606:	68a8      	ldr	r0, [r5, #8]
    1608:	f00b fe20 	bl	d24c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    160c:	8a69      	ldrh	r1, [r5, #18]
    160e:	7c2a      	ldrb	r2, [r5, #16]
    1610:	4b67      	ldr	r3, [pc, #412]	; (17b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
    1612:	4411      	add	r1, r2
    1614:	1c49      	adds	r1, r1, #1
    1616:	1842      	adds	r2, r0, r1
    1618:	4298      	cmp	r0, r3
    161a:	d904      	bls.n	1626 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
    161c:	f240 6109 	movw	r1, #1545	; 0x609
    1620:	2070      	movs	r0, #112	; 0x70
    1622:	f003 f89d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1626:	4863      	ldr	r0, [pc, #396]	; (17b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
    1628:	4281      	cmp	r1, r0
    162a:	dd04      	ble.n	1636 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
    162c:	f240 610a 	movw	r1, #1546	; 0x60a
    1630:	2070      	movs	r0, #112	; 0x70
    1632:	f003 f895 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1636:	4860      	ldr	r0, [pc, #384]	; (17b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
    1638:	4281      	cmp	r1, r0
    163a:	da04      	bge.n	1646 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
    163c:	f240 610b 	movw	r1, #1547	; 0x60b
    1640:	2070      	movs	r0, #112	; 0x70
    1642:	f003 f88d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1646:	485d      	ldr	r0, [pc, #372]	; (17bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
    1648:	4290      	cmp	r0, r2
    164a:	bfdc      	itt	le
    164c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1650:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1654:	dd05      	ble.n	1662 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
    1656:	2a00      	cmp	r2, #0
    1658:	bfbc      	itt	lt
    165a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    165e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1662:	4610      	mov	r0, r2
    1664:	f002 f852 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1668:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    166c:	1a78      	subs	r0, r7, r1
    166e:	0200      	lsls	r0, r0, #8
    1670:	17c2      	asrs	r2, r0, #31
    1672:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1676:	1200      	asrs	r0, r0, #8
    1678:	2833      	cmp	r0, #51	; 0x33
    167a:	bfb8      	it	lt
    167c:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
    1680:	e000      	b.n	1684 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
    1682:	e002      	b.n	168a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    1684:	bfb8      	it	lt
    1686:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    168a:	9802      	ldr	r0, [sp, #8]
    168c:	1a38      	subs	r0, r7, r0
    168e:	0200      	lsls	r0, r0, #8
    1690:	17c1      	asrs	r1, r0, #31
    1692:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1696:	1200      	asrs	r0, r0, #8
    1698:	2800      	cmp	r0, #0
    169a:	dd03      	ble.n	16a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
    169c:	b009      	add	sp, #36	; 0x24
    169e:	2000      	movs	r0, #0
    16a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16a4:	e9d4 1000 	ldrd	r1, r0, [r4]
    16a8:	1a40      	subs	r0, r0, r1
    16aa:	4438      	add	r0, r7
    16ac:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    16b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16b4:	e9c4 1000 	strd	r1, r0, [r4]
    16b8:	9803      	ldr	r0, [sp, #12]
    16ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
    16be:	466f      	mov	r7, sp
    16c0:	f890 5020 	ldrb.w	r5, [r0, #32]
    16c4:	2020      	movs	r0, #32
    16c6:	f10d 0a04 	add.w	sl, sp, #4
    16ca:	f88d 0000 	strb.w	r0, [sp]
    16ce:	2d20      	cmp	r5, #32
    16d0:	bf1c      	itt	ne
    16d2:	4836      	ldrne	r0, [pc, #216]	; (17ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    16d4:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    16d8:	d025      	beq.n	1726 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    16da:	bf00      	nop
    16dc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    16e0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    16e4:	6822      	ldr	r2, [r4, #0]
    16e6:	68c1      	ldr	r1, [r0, #12]
    16e8:	1a51      	subs	r1, r2, r1
    16ea:	0209      	lsls	r1, r1, #8
    16ec:	17ca      	asrs	r2, r1, #31
    16ee:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    16f2:	3008      	adds	r0, #8
    16f4:	1209      	asrs	r1, r1, #8
    16f6:	d416      	bmi.n	1726 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    16f8:	8961      	ldrh	r1, [r4, #10]
    16fa:	b171      	cbz	r1, 171a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    16fc:	8941      	ldrh	r1, [r0, #10]
    16fe:	b961      	cbnz	r1, 171a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    1700:	f000 fcda 	bl	20b8 <CONFIG_MAIN_STACK_SIZE+0xb8>
    1704:	f002 f802 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1708:	6821      	ldr	r1, [r4, #0]
    170a:	1a08      	subs	r0, r1, r0
    170c:	0200      	lsls	r0, r0, #8
    170e:	17c1      	asrs	r1, r0, #31
    1710:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1714:	1200      	asrs	r0, r0, #8
    1716:	2833      	cmp	r0, #51	; 0x33
    1718:	db05      	blt.n	1726 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    171a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    171e:	703d      	strb	r5, [r7, #0]
    1720:	7845      	ldrb	r5, [r0, #1]
    1722:	2d20      	cmp	r5, #32
    1724:	d1da      	bne.n	16dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
    1726:	7838      	ldrb	r0, [r7, #0]
    1728:	f88a 0000 	strb.w	r0, [sl]
    172c:	4627      	mov	r7, r4
    172e:	2d20      	cmp	r5, #32
    1730:	bf1c      	itt	ne
    1732:	481e      	ldrne	r0, [pc, #120]	; (17ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1734:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1738:	d030      	beq.n	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    173a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    173e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    1742:	6879      	ldr	r1, [r7, #4]
    1744:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1748:	4638      	mov	r0, r7
    174a:	1a51      	subs	r1, r2, r1
    174c:	0209      	lsls	r1, r1, #8
    174e:	17ca      	asrs	r2, r1, #31
    1750:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1754:	f109 0808 	add.w	r8, r9, #8
    1758:	1209      	asrs	r1, r1, #8
    175a:	d412      	bmi.n	1782 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
    175c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    1760:	b1e1      	cbz	r1, 179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1762:	8941      	ldrh	r1, [r0, #10]
    1764:	b9d1      	cbnz	r1, 179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1766:	f000 fca7 	bl	20b8 <CONFIG_MAIN_STACK_SIZE+0xb8>
    176a:	f001 ffcf 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    176e:	f8d8 1000 	ldr.w	r1, [r8]
    1772:	1a08      	subs	r0, r1, r0
    1774:	0200      	lsls	r0, r0, #8
    1776:	17c1      	asrs	r1, r0, #31
    1778:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    177c:	1200      	asrs	r0, r0, #8
    177e:	2833      	cmp	r0, #51	; 0x33
    1780:	da0c      	bge.n	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1782:	f88a 5000 	strb.w	r5, [sl]
    1786:	f899 0014 	ldrb.w	r0, [r9, #20]
    178a:	7b39      	ldrb	r1, [r7, #12]
    178c:	4288      	cmp	r0, r1
    178e:	f67f af2e 	bls.w	15ee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    1792:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1796:	7845      	ldrb	r5, [r0, #1]
    1798:	2d20      	cmp	r5, #32
    179a:	d1ce      	bne.n	173a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
    179c:	b009      	add	sp, #36	; 0x24
    179e:	2001      	movs	r0, #1
    17a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17a4:	20000d24 	.word	0x20000d24
    17a8:	200009a4 	.word	0x200009a4
    17ac:	20000ca4 	.word	0x20000ca4
    17b0:	1e847fff 	.word	0x1e847fff
    17b4:	07a12000 	.word	0x07a12000
    17b8:	f85ee000 	.word	0xf85ee000
    17bc:	1e848000 	.word	0x1e848000
    17c0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    17c4:	4604      	mov	r4, r0
    17c6:	483c      	ldr	r0, [pc, #240]	; (18b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x484>)
    17c8:	460e      	mov	r6, r1
    17ca:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    17ce:	4f3b      	ldr	r7, [pc, #236]	; (18bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>)
    17d0:	f890 5020 	ldrb.w	r5, [r0, #32]
    17d4:	2020      	movs	r0, #32
    17d6:	4698      	mov	r8, r3
    17d8:	4692      	mov	sl, r2
    17da:	7010      	strb	r0, [r2, #0]
    17dc:	f507 7940 	add.w	r9, r7, #768	; 0x300
    17e0:	2d20      	cmp	r5, #32
    17e2:	bf18      	it	ne
    17e4:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    17e8:	d028      	beq.n	183c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    17ea:	bf00      	nop
    17ec:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    17f0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    17f4:	f100 0108 	add.w	r1, r0, #8
    17f8:	68c0      	ldr	r0, [r0, #12]
    17fa:	6822      	ldr	r2, [r4, #0]
    17fc:	1a10      	subs	r0, r2, r0
    17fe:	0200      	lsls	r0, r0, #8
    1800:	17c2      	asrs	r2, r0, #31
    1802:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1806:	1200      	asrs	r0, r0, #8
    1808:	d418      	bmi.n	183c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    180a:	8960      	ldrh	r0, [r4, #10]
    180c:	b178      	cbz	r0, 182e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    180e:	8948      	ldrh	r0, [r1, #10]
    1810:	b968      	cbnz	r0, 182e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    1812:	4608      	mov	r0, r1
    1814:	f000 fc50 	bl	20b8 <CONFIG_MAIN_STACK_SIZE+0xb8>
    1818:	f001 ff78 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    181c:	6821      	ldr	r1, [r4, #0]
    181e:	1a08      	subs	r0, r1, r0
    1820:	0200      	lsls	r0, r0, #8
    1822:	17c1      	asrs	r1, r0, #31
    1824:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1828:	1200      	asrs	r0, r0, #8
    182a:	2833      	cmp	r0, #51	; 0x33
    182c:	db06      	blt.n	183c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    182e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1832:	f88a 5000 	strb.w	r5, [sl]
    1836:	7845      	ldrb	r5, [r0, #1]
    1838:	2d20      	cmp	r5, #32
    183a:	d1d7      	bne.n	17ec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    183c:	f89a 0000 	ldrb.w	r0, [sl]
    1840:	f888 0000 	strb.w	r0, [r8]
    1844:	2d20      	cmp	r5, #32
    1846:	bf18      	it	ne
    1848:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    184c:	d030      	beq.n	18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    184e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1852:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    1856:	6861      	ldr	r1, [r4, #4]
    1858:	f8d9 2008 	ldr.w	r2, [r9, #8]
    185c:	4620      	mov	r0, r4
    185e:	1a51      	subs	r1, r2, r1
    1860:	0209      	lsls	r1, r1, #8
    1862:	17ca      	asrs	r2, r1, #31
    1864:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1868:	f109 0608 	add.w	r6, r9, #8
    186c:	1209      	asrs	r1, r1, #8
    186e:	d410      	bmi.n	1892 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x45e>
    1870:	8971      	ldrh	r1, [r6, #10]
    1872:	b1e9      	cbz	r1, 18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1874:	8941      	ldrh	r1, [r0, #10]
    1876:	b9d9      	cbnz	r1, 18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1878:	f000 fc1e 	bl	20b8 <CONFIG_MAIN_STACK_SIZE+0xb8>
    187c:	f001 ff46 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1880:	6831      	ldr	r1, [r6, #0]
    1882:	1a08      	subs	r0, r1, r0
    1884:	0200      	lsls	r0, r0, #8
    1886:	17c1      	asrs	r1, r0, #31
    1888:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    188c:	1200      	asrs	r0, r0, #8
    188e:	2833      	cmp	r0, #51	; 0x33
    1890:	da0e      	bge.n	18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1892:	f888 5000 	strb.w	r5, [r8]
    1896:	f899 0014 	ldrb.w	r0, [r9, #20]
    189a:	7b21      	ldrb	r1, [r4, #12]
    189c:	4288      	cmp	r0, r1
    189e:	d802      	bhi.n	18a6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x472>
    18a0:	2000      	movs	r0, #0
    18a2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    18a6:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    18aa:	7845      	ldrb	r5, [r0, #1]
    18ac:	2d20      	cmp	r5, #32
    18ae:	d1ce      	bne.n	184e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x41a>
    18b0:	2001      	movs	r0, #1
    18b2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    18b6:	0000      	.short	0x0000
    18b8:	20000d24 	.word	0x20000d24
    18bc:	200009a4 	.word	0x200009a4
    18c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18c4:	f04f 0800 	mov.w	r8, #0
    18c8:	b098      	sub	sp, #96	; 0x60
    18ca:	4616      	mov	r6, r2
    18cc:	460d      	mov	r5, r1
    18ce:	46c3      	mov	fp, r8
    18d0:	f002 f994 	bl	3bfc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    18d4:	4604      	mov	r4, r0
    18d6:	2d01      	cmp	r5, #1
    18d8:	bf18      	it	ne
    18da:	2d02      	cmpne	r5, #2
    18dc:	d005      	beq.n	18ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4b6>
    18de:	f640 1194 	movw	r1, #2452	; 0x994
    18e2:	f04f 0070 	mov.w	r0, #112	; 0x70
    18e6:	f002 ff3b 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ea:	49fd      	ldr	r1, [pc, #1012]	; (1ce0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    18ec:	2001      	movs	r0, #1
    18ee:	6008      	str	r0, [r1, #0]
    18f0:	49fc      	ldr	r1, [pc, #1008]	; (1ce4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    18f2:	6889      	ldr	r1, [r1, #8]
    18f4:	6008      	str	r0, [r1, #0]
    18f6:	2000      	movs	r0, #0
    18f8:	900c      	str	r0, [sp, #48]	; 0x30
    18fa:	1e40      	subs	r0, r0, #1
    18fc:	900e      	str	r0, [sp, #56]	; 0x38
    18fe:	49fa      	ldr	r1, [pc, #1000]	; (1ce8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>)
    1900:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1904:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    1908:	3308      	adds	r3, #8
    190a:	af0f      	add	r7, sp, #60	; 0x3c
    190c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    190e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    1912:	a80f      	add	r0, sp, #60	; 0x3c
    1914:	f000 fbd0 	bl	20b8 <CONFIG_MAIN_STACK_SIZE+0xb8>
    1918:	900d      	str	r0, [sp, #52]	; 0x34
    191a:	48f3      	ldr	r0, [pc, #972]	; (1ce8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>)
    191c:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    1920:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    1924:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    1928:	f1b9 0f00 	cmp.w	r9, #0
    192c:	bf14      	ite	ne
    192e:	f04f 0a01 	movne.w	sl, #1
    1932:	f04f 0a00 	moveq.w	sl, #0
    1936:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1938:	9014      	str	r0, [sp, #80]	; 0x50
    193a:	f1ba 0f00 	cmp.w	sl, #0
    193e:	d009      	beq.n	1954 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x520>
    1940:	48ea      	ldr	r0, [pc, #936]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1942:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1946:	b928      	cbnz	r0, 1954 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x520>
    1948:	f002 fea6 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    194c:	2800      	cmp	r0, #0
    194e:	bf08      	it	eq
    1950:	2701      	moveq	r7, #1
    1952:	d000      	beq.n	1956 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x522>
    1954:	2700      	movs	r7, #0
    1956:	48e6      	ldr	r0, [pc, #920]	; (1cf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    1958:	2200      	movs	r2, #0
    195a:	9215      	str	r2, [sp, #84]	; 0x54
    195c:	7800      	ldrb	r0, [r0, #0]
    195e:	4616      	mov	r6, r2
    1960:	2801      	cmp	r0, #1
    1962:	bf18      	it	ne
    1964:	2803      	cmpne	r0, #3
    1966:	d140      	bne.n	19ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5b6>
    1968:	48e1      	ldr	r0, [pc, #900]	; (1cf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    196a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    196e:	eba8 0009 	sub.w	r0, r8, r9
    1972:	9015      	str	r0, [sp, #84]	; 0x54
    1974:	45c8      	cmp	r8, r9
    1976:	d938      	bls.n	19ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5b6>
    1978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    197a:	ea6f 0108 	mvn.w	r1, r8
    197e:	f8df e374 	ldr.w	lr, [pc, #884]	; 1cf4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c0>
    1982:	1858      	adds	r0, r3, r1
    1984:	f10d 0c0c 	add.w	ip, sp, #12
    1988:	aa17      	add	r2, sp, #92	; 0x5c
    198a:	4573      	cmp	r3, lr
    198c:	d904      	bls.n	1998 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x564>
    198e:	f240 6109 	movw	r1, #1545	; 0x609
    1992:	2070      	movs	r0, #112	; 0x70
    1994:	f002 fee4 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1998:	4bd7      	ldr	r3, [pc, #860]	; (1cf8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c4>)
    199a:	4299      	cmp	r1, r3
    199c:	dd04      	ble.n	19a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x574>
    199e:	f240 610a 	movw	r1, #1546	; 0x60a
    19a2:	2070      	movs	r0, #112	; 0x70
    19a4:	f002 fedc 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19a8:	4bd4      	ldr	r3, [pc, #848]	; (1cfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c8>)
    19aa:	4299      	cmp	r1, r3
    19ac:	da04      	bge.n	19b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x584>
    19ae:	f240 610b 	movw	r1, #1547	; 0x60b
    19b2:	2070      	movs	r0, #112	; 0x70
    19b4:	f002 fed4 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19b8:	49d1      	ldr	r1, [pc, #836]	; (1d00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8cc>)
    19ba:	4281      	cmp	r1, r0
    19bc:	bfdc      	itt	le
    19be:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    19c2:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    19c6:	dd05      	ble.n	19d4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5a0>
    19c8:	2800      	cmp	r0, #0
    19ca:	bfbc      	itt	lt
    19cc:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    19d0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    19d4:	4661      	mov	r1, ip
    19d6:	f001 feb5 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    19da:	9803      	ldr	r0, [sp, #12]
    19dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    19de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    19e2:	9003      	str	r0, [sp, #12]
    19e4:	1a08      	subs	r0, r1, r0
    19e6:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    19ea:	2f00      	cmp	r7, #0
    19ec:	bf18      	it	ne
    19ee:	2632      	movne	r6, #50	; 0x32
    19f0:	d104      	bne.n	19fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5c8>
    19f2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    19f6:	2800      	cmp	r0, #0
    19f8:	bf18      	it	ne
    19fa:	2602      	movne	r6, #2
    19fc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1a00:	d008      	beq.n	1a14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5e0>
    1a02:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1a04:	1b00      	subs	r0, r0, r4
    1a06:	0200      	lsls	r0, r0, #8
    1a08:	17c1      	asrs	r1, r0, #31
    1a0a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1a0e:	1200      	asrs	r0, r0, #8
    1a10:	2801      	cmp	r0, #1
    1a12:	da02      	bge.n	1a1a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5e6>
    1a14:	2104      	movs	r1, #4
    1a16:	9818      	ldr	r0, [sp, #96]	; 0x60
    1a18:	e00b      	b.n	1a32 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5fe>
    1a1a:	b147      	cbz	r7, 1a2e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5fa>
    1a1c:	48b3      	ldr	r0, [pc, #716]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1a1e:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1a22:	b120      	cbz	r0, 1a2e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5fa>
    1a24:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1a28:	1c06      	adds	r6, r0, #0
    1a2a:	bf18      	it	ne
    1a2c:	2602      	movne	r6, #2
    1a2e:	4620      	mov	r0, r4
    1a30:	2101      	movs	r1, #1
    1a32:	f1b9 0f00 	cmp.w	r9, #0
    1a36:	d002      	beq.n	1a3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x60a>
    1a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1a3a:	2b1e      	cmp	r3, #30
    1a3c:	da02      	bge.n	1a44 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x610>
    1a3e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    1a42:	b113      	cbz	r3, 1a4a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x616>
    1a44:	f04f 0b01 	mov.w	fp, #1
    1a48:	1e49      	subs	r1, r1, #1
    1a4a:	198b      	adds	r3, r1, r6
    1a4c:	49a8      	ldr	r1, [pc, #672]	; (1cf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    1a4e:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    1a52:	7809      	ldrb	r1, [r1, #0]
    1a54:	9115      	str	r1, [sp, #84]	; 0x54
    1a56:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1a58:	1a89      	subs	r1, r1, r2
    1a5a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
    1a5e:	ebac 0100 	sub.w	r1, ip, r0
    1a62:	0209      	lsls	r1, r1, #8
    1a64:	17ce      	asrs	r6, r1, #31
    1a66:	eb01 6116 	add.w	r1, r1, r6, lsr #24
    1a6a:	1209      	asrs	r1, r1, #8
    1a6c:	4299      	cmp	r1, r3
    1a6e:	db18      	blt.n	1aa2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x66e>
    1a70:	2a00      	cmp	r2, #0
    1a72:	bf18      	it	ne
    1a74:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    1a78:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    1a7a:	9705      	str	r7, [sp, #20]
    1a7c:	2700      	movs	r7, #0
    1a7e:	f001 ffb7 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1a82:	1a30      	subs	r0, r6, r0
    1a84:	0200      	lsls	r0, r0, #8
    1a86:	17c1      	asrs	r1, r0, #31
    1a88:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1a8c:	1200      	asrs	r0, r0, #8
    1a8e:	283e      	cmp	r0, #62	; 0x3e
    1a90:	da3f      	bge.n	1b12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6de>
    1a92:	2d01      	cmp	r5, #1
    1a94:	d020      	beq.n	1ad8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6a4>
    1a96:	1e70      	subs	r0, r6, #1
    1a98:	9905      	ldr	r1, [sp, #20]
    1a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1a9e:	b319      	cbz	r1, 1ae8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6b4>
    1aa0:	e02d      	b.n	1afe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ca>
    1aa2:	b182      	cbz	r2, 1ac6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x692>
    1aa4:	f1be 0f00 	cmp.w	lr, #0
    1aa8:	bf04      	itt	eq
    1aaa:	9915      	ldreq	r1, [sp, #84]	; 0x54
    1aac:	2903      	cmpeq	r1, #3
    1aae:	d00a      	beq.n	1ac6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x692>
    1ab0:	b927      	cbnz	r7, 1abc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x688>
    1ab2:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1ab6:	2900      	cmp	r1, #0
    1ab8:	bf18      	it	ne
    1aba:	1e9b      	subne	r3, r3, #2
    1abc:	2200      	movs	r2, #0
    1abe:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    1ac2:	4690      	mov	r8, r2
    1ac4:	e7c7      	b.n	1a56 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x622>
    1ac6:	bb07      	cbnz	r7, 1b0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d6>
    1ac8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1acc:	b1e9      	cbz	r1, 1b0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d6>
    1ace:	2100      	movs	r1, #0
    1ad0:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    1ad4:	1e9b      	subs	r3, r3, #2
    1ad6:	e7be      	b.n	1a56 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x622>
    1ad8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1adc:	d120      	bne.n	1b20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ec>
    1ade:	f640 110d 	movw	r1, #2317	; 0x90d
    1ae2:	2070      	movs	r0, #112	; 0x70
    1ae4:	f002 fe3c 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ae8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1aec:	d007      	beq.n	1afe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ca>
    1aee:	1a21      	subs	r1, r4, r0
    1af0:	0209      	lsls	r1, r1, #8
    1af2:	17ca      	asrs	r2, r1, #31
    1af4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1af8:	1209      	asrs	r1, r1, #8
    1afa:	2904      	cmp	r1, #4
    1afc:	dd03      	ble.n	1b06 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d2>
    1afe:	4604      	mov	r4, r0
    1b00:	f001 ff7c 	bl	39fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1b04:	e00c      	b.n	1b20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ec>
    1b06:	2900      	cmp	r1, #0
    1b08:	dd0a      	ble.n	1b20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ec>
    1b0a:	b01b      	add	sp, #108	; 0x6c
    1b0c:	2000      	movs	r0, #0
    1b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b12:	1e70      	subs	r0, r6, #1
    1b14:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1b18:	4620      	mov	r0, r4
    1b1a:	f001 ff6f 	bl	39fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1b1e:	4657      	mov	r7, sl
    1b20:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1b24:	d028      	beq.n	1b78 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x744>
    1b26:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1b28:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    1b2c:	1b00      	subs	r0, r0, r4
    1b2e:	f08b 0301 	eor.w	r3, fp, #1
    1b32:	4a74      	ldr	r2, [pc, #464]	; (1d04 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d0>)
    1b34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b38:	ebac 0c04 	sub.w	ip, ip, r4
    1b3c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    1b40:	4283      	cmp	r3, r0
    1b42:	bf98      	it	ls
    1b44:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    1b48:	d2df      	bcs.n	1b0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d6>
    1b4a:	4562      	cmp	r2, ip
    1b4c:	d3dd      	bcc.n	1b0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d6>
    1b4e:	4620      	mov	r0, r4
    1b50:	f00b fb7c 	bl	d24c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1b54:	4967      	ldr	r1, [pc, #412]	; (1cf4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c0>)
    1b56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1b58:	1c4b      	adds	r3, r1, #1
    1b5a:	1a16      	subs	r6, r2, r0
    1b5c:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    1b60:	bf24      	itt	cs
    1b62:	eba0 0c02 	subcs.w	ip, r0, r2
    1b66:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    1b6a:	d310      	bcc.n	1b8e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x75a>
    1b6c:	42b1      	cmp	r1, r6
    1b6e:	d208      	bcs.n	1b82 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74e>
    1b70:	1a08      	subs	r0, r1, r0
    1b72:	4410      	add	r0, r2
    1b74:	1c46      	adds	r6, r0, #1
    1b76:	e00a      	b.n	1b8e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x75a>
    1b78:	f640 212c 	movw	r1, #2604	; 0xa2c
    1b7c:	2070      	movs	r0, #112	; 0x70
    1b7e:	f002 fdef 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b82:	4561      	cmp	r1, ip
    1b84:	d22c      	bcs.n	1be0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7ac>
    1b86:	1a89      	subs	r1, r1, r2
    1b88:	4408      	add	r0, r1
    1b8a:	1c40      	adds	r0, r0, #1
    1b8c:	4246      	negs	r6, r0
    1b8e:	4857      	ldr	r0, [pc, #348]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1b90:	7f80      	ldrb	r0, [r0, #30]
    1b92:	b350      	cbz	r0, 1bea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7b6>
    1b94:	4628      	mov	r0, r5
    1b96:	4645      	mov	r5, r8
    1b98:	f04f 0b00 	mov.w	fp, #0
    1b9c:	46d8      	mov	r8, fp
    1b9e:	2801      	cmp	r0, #1
    1ba0:	d005      	beq.n	1bae <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x77a>
    1ba2:	2002      	movs	r0, #2
    1ba4:	f002 f972 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1ba8:	2001      	movs	r0, #1
    1baa:	f002 f96f 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1bae:	45a9      	cmp	r9, r5
    1bb0:	d22c      	bcs.n	1c0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7d8>
    1bb2:	eba6 0105 	sub.w	r1, r6, r5
    1bb6:	f04f 0301 	mov.w	r3, #1
    1bba:	f04f 0203 	mov.w	r2, #3
    1bbe:	f04f 0002 	mov.w	r0, #2
    1bc2:	f002 f89b 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1bc6:	2800      	cmp	r0, #0
    1bc8:	bf08      	it	eq
    1bca:	f04f 0801 	moveq.w	r8, #1
    1bce:	f1b9 0f00 	cmp.w	r9, #0
    1bd2:	d035      	beq.n	1c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80c>
    1bd4:	2301      	movs	r3, #1
    1bd6:	eba6 0109 	sub.w	r1, r6, r9
    1bda:	2203      	movs	r2, #3
    1bdc:	4618      	mov	r0, r3
    1bde:	e023      	b.n	1c28 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7f4>
    1be0:	f640 310c 	movw	r1, #2828	; 0xb0c
    1be4:	2070      	movs	r0, #112	; 0x70
    1be6:	f002 fdbb 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bea:	45c1      	cmp	r9, r8
    1bec:	bf34      	ite	cc
    1bee:	4640      	movcc	r0, r8
    1bf0:	4648      	movcs	r0, r9
    1bf2:	f1bb 0f00 	cmp.w	fp, #0
    1bf6:	bf14      	ite	ne
    1bf8:	2100      	movne	r1, #0
    1bfa:	211e      	moveq	r1, #30
    1bfc:	4408      	add	r0, r1
    1bfe:	42b0      	cmp	r0, r6
    1c00:	dbc8      	blt.n	1b94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x760>
    1c02:	f640 213f 	movw	r1, #2623	; 0xa3f
    1c06:	2070      	movs	r0, #112	; 0x70
    1c08:	f002 fdaa 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c0c:	d910      	bls.n	1c30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7fc>
    1c0e:	2301      	movs	r3, #1
    1c10:	eba6 0109 	sub.w	r1, r6, r9
    1c14:	2203      	movs	r2, #3
    1c16:	4618      	mov	r0, r3
    1c18:	f002 f870 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1c1c:	b328      	cbz	r0, 1c6a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x836>
    1c1e:	b17d      	cbz	r5, 1c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80c>
    1c20:	1b71      	subs	r1, r6, r5
    1c22:	2301      	movs	r3, #1
    1c24:	2203      	movs	r2, #3
    1c26:	2002      	movs	r0, #2
    1c28:	f002 f868 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1c2c:	b1e8      	cbz	r0, 1c6a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x836>
    1c2e:	e007      	b.n	1c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80c>
    1c30:	ea55 0009 	orrs.w	r0, r5, r9
    1c34:	d004      	beq.n	1c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80c>
    1c36:	f640 1177 	movw	r1, #2423	; 0x977
    1c3a:	2070      	movs	r0, #112	; 0x70
    1c3c:	f002 fd90 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c40:	2301      	movs	r3, #1
    1c42:	2203      	movs	r2, #3
    1c44:	4631      	mov	r1, r6
    1c46:	2000      	movs	r0, #0
    1c48:	f002 f858 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1c4c:	b168      	cbz	r0, 1c6a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x836>
    1c4e:	2501      	movs	r5, #1
    1c50:	f1b8 0f00 	cmp.w	r8, #0
    1c54:	d003      	beq.n	1c5e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    1c56:	9814      	ldr	r0, [sp, #80]	; 0x50
    1c58:	900f      	str	r0, [sp, #60]	; 0x3c
    1c5a:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    1c5e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1d08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d4>
    1c62:	f1ba 0f00 	cmp.w	sl, #0
    1c66:	d10e      	bne.n	1c86 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x852>
    1c68:	e009      	b.n	1c7e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x84a>
    1c6a:	2002      	movs	r0, #2
    1c6c:	f002 f90e 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c70:	2001      	movs	r0, #1
    1c72:	f002 f90b 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c76:	b01b      	add	sp, #108	; 0x6c
    1c78:	2000      	movs	r0, #0
    1c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c7e:	481b      	ldr	r0, [pc, #108]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1c80:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1c84:	b100      	cbz	r0, 1c88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x854>
    1c86:	b34f      	cbz	r7, 1cdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a8>
    1c88:	f8df a060 	ldr.w	sl, [pc, #96]	; 1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>
    1c8c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1c90:	b118      	cbz	r0, 1c9a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x866>
    1c92:	f002 fbc9 	bl	4428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1c96:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    1c9a:	b307      	cbz	r7, 1cde <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8aa>
    1c9c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    1ca0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ca4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1ca8:	f8c8 0000 	str.w	r0, [r8]
    1cac:	2300      	movs	r3, #0
    1cae:	2203      	movs	r2, #3
    1cb0:	2005      	movs	r0, #5
    1cb2:	f002 f823 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1cb6:	b368      	cbz	r0, 1d14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8e0>
    1cb8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1cbc:	2005      	movs	r0, #5
    1cbe:	f002 f9ab 	bl	4018 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    1cc2:	4912      	ldr	r1, [pc, #72]	; (1d0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d8>)
    1cc4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    1cc8:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    1ccc:	4910      	ldr	r1, [pc, #64]	; (1d10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8dc>)
    1cce:	12e0      	asrs	r0, r4, #11
    1cd0:	6008      	str	r0, [r1, #0]
    1cd2:	4c06      	ldr	r4, [pc, #24]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1cd4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1cd8:	b3f0      	cbz	r0, 1d58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>
    1cda:	e05b      	b.n	1d94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>
    1cdc:	e01b      	b.n	1d16 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8e2>
    1cde:	e01f      	b.n	1d20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ec>
    1ce0:	40000508 	.word	0x40000508
    1ce4:	20000010 	.word	0x20000010
    1ce8:	200009a4 	.word	0x200009a4
    1cec:	20000d24 	.word	0x20000d24
    1cf0:	20000012 	.word	0x20000012
    1cf4:	1e847fff 	.word	0x1e847fff
    1cf8:	07a12000 	.word	0x07a12000
    1cfc:	f85ee000 	.word	0xf85ee000
    1d00:	1e848000 	.word	0x1e848000
    1d04:	003fffff 	.word	0x003fffff
    1d08:	4001f508 	.word	0x4001f508
    1d0c:	4001f098 	.word	0x4001f098
    1d10:	4001f504 	.word	0x4001f504
    1d14:	e035      	b.n	1d82 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36>
    1d16:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1dd0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>
    1d1a:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1d1e:	b358      	cbz	r0, 1d78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1d20:	4c2b      	ldr	r4, [pc, #172]	; (1dd0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>)
    1d22:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1d26:	b150      	cbz	r0, 1d3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90a>
    1d28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1d2c:	f8c8 0000 	str.w	r0, [r8]
    1d30:	2005      	movs	r0, #5
    1d32:	f002 f8ab 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1d36:	f002 fbdf 	bl	44f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1d3a:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    1d3e:	ac0c      	add	r4, sp, #48	; 0x30
    1d40:	4824      	ldr	r0, [pc, #144]	; (1dd4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x88>)
    1d42:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1d46:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    1d4a:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    1d4e:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    1d52:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    1d56:	e000      	b.n	1d5a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe>
    1d58:	e018      	b.n	1d8c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40>
    1d5a:	ac10      	add	r4, sp, #64	; 0x40
    1d5c:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1d60:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    1d64:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    1d68:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    1d6c:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    1d70:	b01b      	add	sp, #108	; 0x6c
    1d72:	2001      	movs	r0, #1
    1d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d78:	f002 fb72 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1d7c:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    1d80:	e78b      	b.n	1c9a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x866>
    1d82:	f240 313e 	movw	r1, #830	; 0x33e
    1d86:	2070      	movs	r0, #112	; 0x70
    1d88:	f002 fcea 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d8c:	f002 fba6 	bl	44dc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    1d90:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    1d94:	eba6 0009 	sub.w	r0, r6, r9
    1d98:	f1a0 0119 	sub.w	r1, r0, #25
    1d9c:	2900      	cmp	r1, #0
    1d9e:	dc04      	bgt.n	1daa <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e>
    1da0:	f640 2169 	movw	r1, #2665	; 0xa69
    1da4:	2070      	movs	r0, #112	; 0x70
    1da6:	f002 fcdb 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1daa:	2203      	movs	r2, #3
    1dac:	2301      	movs	r3, #1
    1dae:	4610      	mov	r0, r2
    1db0:	f001 ffa4 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1db4:	b138      	cbz	r0, 1dc6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7a>
    1db6:	4808      	ldr	r0, [pc, #32]	; (1dd8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>)
    1db8:	6880      	ldr	r0, [r0, #8]
    1dba:	f8c0 b000 	str.w	fp, [r0]
    1dbe:	4807      	ldr	r0, [pc, #28]	; (1ddc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>)
    1dc0:	f8c0 b000 	str.w	fp, [r0]
    1dc4:	e7bb      	b.n	1d3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90a>
    1dc6:	f640 2174 	movw	r1, #2676	; 0xa74
    1dca:	2070      	movs	r0, #112	; 0x70
    1dcc:	f002 fcc8 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1dd0:	20000d24 	.word	0x20000d24
    1dd4:	200009a4 	.word	0x200009a4
    1dd8:	20000010 	.word	0x20000010
    1ddc:	40000508 	.word	0x40000508
    1de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1de4:	4606      	mov	r6, r0
    1de6:	b083      	sub	sp, #12
    1de8:	7808      	ldrb	r0, [r1, #0]
    1dea:	7390      	strb	r0, [r2, #14]
    1dec:	7acf      	ldrb	r7, [r1, #11]
    1dee:	7357      	strb	r7, [r2, #13]
    1df0:	7a88      	ldrb	r0, [r1, #10]
    1df2:	7310      	strb	r0, [r2, #12]
    1df4:	8908      	ldrh	r0, [r1, #8]
    1df6:	4614      	mov	r4, r2
    1df8:	8150      	strh	r0, [r2, #10]
    1dfa:	460d      	mov	r5, r1
    1dfc:	780a      	ldrb	r2, [r1, #0]
    1dfe:	495f      	ldr	r1, [pc, #380]	; (1f7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x230>)
    1e00:	4699      	mov	r9, r3
    1e02:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    1e06:	424b      	negs	r3, r1
    1e08:	f1ac 0801 	sub.w	r8, ip, #1
    1e0c:	b15a      	cbz	r2, 1e26 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xda>
    1e0e:	43c0      	mvns	r0, r0
    1e10:	f8d5 8004 	ldr.w	r8, [r5, #4]
    1e14:	f104 0208 	add.w	r2, r4, #8
    1e18:	4288      	cmp	r0, r1
    1e1a:	dd3d      	ble.n	1e98 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14c>
    1e1c:	f240 610a 	movw	r1, #1546	; 0x60a
    1e20:	2070      	movs	r0, #112	; 0x70
    1e22:	f002 fc9d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e26:	68ee      	ldr	r6, [r5, #12]
    1e28:	686d      	ldr	r5, [r5, #4]
    1e2a:	ea6f 0900 	mvn.w	r9, r0
    1e2e:	f104 0208 	add.w	r2, r4, #8
    1e32:	eb06 0009 	add.w	r0, r6, r9
    1e36:	4546      	cmp	r6, r8
    1e38:	d904      	bls.n	1e44 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>
    1e3a:	f240 6109 	movw	r1, #1545	; 0x609
    1e3e:	2070      	movs	r0, #112	; 0x70
    1e40:	f002 fc8e 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e44:	4589      	cmp	r9, r1
    1e46:	dce9      	bgt.n	1e1c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>
    1e48:	4599      	cmp	r9, r3
    1e4a:	db28      	blt.n	1e9e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x152>
    1e4c:	4584      	cmp	ip, r0
    1e4e:	bfdc      	itt	le
    1e50:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1e54:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1e58:	dd05      	ble.n	1e66 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11a>
    1e5a:	2800      	cmp	r0, #0
    1e5c:	bfbc      	itt	lt
    1e5e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1e62:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1e66:	4621      	mov	r1, r4
    1e68:	f001 fc6c 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1e6c:	6820      	ldr	r0, [r4, #0]
    1e6e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1e72:	1970      	adds	r0, r6, r5
    1e74:	1c40      	adds	r0, r0, #1
    1e76:	6021      	str	r1, [r4, #0]
    1e78:	2f00      	cmp	r7, #0
    1e7a:	bf08      	it	eq
    1e7c:	307a      	addeq	r0, #122	; 0x7a
    1e7e:	d003      	beq.n	1e88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>
    1e80:	2f01      	cmp	r7, #1
    1e82:	bf08      	it	eq
    1e84:	3044      	addeq	r0, #68	; 0x44
    1e86:	d12d      	bne.n	1ee4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>
    1e88:	f001 fc40 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1e8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e90:	6060      	str	r0, [r4, #4]
    1e92:	b003      	add	sp, #12
    1e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1e98:	4601      	mov	r1, r0
    1e9a:	4298      	cmp	r0, r3
    1e9c:	da04      	bge.n	1ea8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>
    1e9e:	f240 610b 	movw	r1, #1547	; 0x60b
    1ea2:	2070      	movs	r0, #112	; 0x70
    1ea4:	f002 fc5c 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ea8:	4584      	cmp	ip, r0
    1eaa:	bfdc      	itt	le
    1eac:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1eb0:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1eb4:	dd05      	ble.n	1ec2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x176>
    1eb6:	2800      	cmp	r0, #0
    1eb8:	bfbc      	itt	lt
    1eba:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1ebe:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1ec2:	4621      	mov	r1, r4
    1ec4:	f001 fc3e 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1ec8:	6820      	ldr	r0, [r4, #0]
    1eca:	2f00      	cmp	r7, #0
    1ecc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ed0:	f108 0001 	add.w	r0, r8, #1
    1ed4:	6021      	str	r1, [r4, #0]
    1ed6:	bf08      	it	eq
    1ed8:	307a      	addeq	r0, #122	; 0x7a
    1eda:	d008      	beq.n	1eee <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a2>
    1edc:	2f01      	cmp	r7, #1
    1ede:	bf08      	it	eq
    1ee0:	3044      	addeq	r0, #68	; 0x44
    1ee2:	d004      	beq.n	1eee <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a2>
    1ee4:	f240 61b1 	movw	r1, #1713	; 0x6b1
    1ee8:	2070      	movs	r0, #112	; 0x70
    1eea:	f002 fc39 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eee:	f001 fc0d 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1ef2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ef6:	6061      	str	r1, [r4, #4]
    1ef8:	8960      	ldrh	r0, [r4, #10]
    1efa:	aa01      	add	r2, sp, #4
    1efc:	4669      	mov	r1, sp
    1efe:	f001 fc21 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1f02:	481f      	ldr	r0, [pc, #124]	; (1f80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>)
    1f04:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1f08:	2920      	cmp	r1, #32
    1f0a:	d023      	beq.n	1f54 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x208>
    1f0c:	6900      	ldr	r0, [r0, #16]
    1f0e:	1d40      	adds	r0, r0, #5
    1f10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f14:	e9d4 2100 	ldrd	r2, r1, [r4]
    1f18:	1a89      	subs	r1, r1, r2
    1f1a:	6020      	str	r0, [r4, #0]
    1f1c:	4408      	add	r0, r1
    1f1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f22:	6060      	str	r0, [r4, #4]
    1f24:	464b      	mov	r3, r9
    1f26:	4632      	mov	r2, r6
    1f28:	4621      	mov	r1, r4
    1f2a:	68e8      	ldr	r0, [r5, #12]
    1f2c:	f7ff facc 	bl	14c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1f30:	2800      	cmp	r0, #0
    1f32:	bf1c      	itt	ne
    1f34:	b003      	addne	sp, #12
    1f36:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1f3a:	e9d4 1000 	ldrd	r1, r0, [r4]
    1f3e:	1a40      	subs	r0, r0, r1
    1f40:	4430      	add	r0, r6
    1f42:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1f46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f4a:	e9c4 1000 	strd	r1, r0, [r4]
    1f4e:	b003      	add	sp, #12
    1f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1f54:	8960      	ldrh	r0, [r4, #10]
    1f56:	f106 0709 	add.w	r7, r6, #9
    1f5a:	b120      	cbz	r0, 1f66 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21a>
    1f5c:	f002 fb9c 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1f60:	2800      	cmp	r0, #0
    1f62:	bf08      	it	eq
    1f64:	3732      	addeq	r7, #50	; 0x32
    1f66:	4807      	ldr	r0, [pc, #28]	; (1f84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>)
    1f68:	7841      	ldrb	r1, [r0, #1]
    1f6a:	9800      	ldr	r0, [sp, #0]
    1f6c:	4281      	cmp	r1, r0
    1f6e:	bf84      	itt	hi
    1f70:	1a08      	subhi	r0, r1, r0
    1f72:	4407      	addhi	r7, r0
    1f74:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1f78:	e7cc      	b.n	1f14 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c8>
    1f7a:	0000      	.short	0x0000
    1f7c:	07a12000 	.word	0x07a12000
    1f80:	20000d24 	.word	0x20000d24
    1f84:	20000012 	.word	0x20000012
    1f88:	b510      	push	{r4, lr}
    1f8a:	4c15      	ldr	r4, [pc, #84]	; (1fe0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>)
    1f8c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1f90:	2820      	cmp	r0, #32
    1f92:	bf18      	it	ne
    1f94:	bd10      	popne	{r4, pc}
    1f96:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1f9a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    1f9e:	f890 1020 	ldrb.w	r1, [r0, #32]
    1fa2:	2920      	cmp	r1, #32
    1fa4:	d017      	beq.n	1fd6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28a>
    1fa6:	f8df c03c 	ldr.w	ip, [pc, #60]	; 1fe4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>
    1faa:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    1fae:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    1fb2:	785b      	ldrb	r3, [r3, #1]
    1fb4:	f880 3020 	strb.w	r3, [r0, #32]
    1fb8:	2301      	movs	r3, #1
    1fba:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    1fbe:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    1fc2:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    1fc6:	2002      	movs	r0, #2
    1fc8:	f000 f8b0 	bl	212c <CONFIG_MAIN_STACK_SIZE+0x12c>
    1fcc:	2000      	movs	r0, #0
    1fce:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    1fd2:	77a0      	strb	r0, [r4, #30]
    1fd4:	bd10      	pop	{r4, pc}
    1fd6:	f240 318b 	movw	r1, #907	; 0x38b
    1fda:	2070      	movs	r0, #112	; 0x70
    1fdc:	f002 fbc0 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fe0:	20000d24 	.word	0x20000d24
    1fe4:	20000ca4 	.word	0x20000ca4
    1fe8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1fec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 20a8 <CONFIG_MAIN_STACK_SIZE+0xa8>
    1ff0:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1ff4:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1ff8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1ffc:	2c20      	cmp	r4, #32
    1ffe:	bf08      	it	eq
    2000:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2004:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 20ac <CONFIG_MAIN_STACK_SIZE+0xac>
    2008:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 20b0 <CONFIG_MAIN_STACK_SIZE+0xb0>
    200c:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    2010:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    2014:	2607      	movs	r6, #7
    2016:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    201a:	2801      	cmp	r0, #1
    201c:	d00e      	beq.n	203c <CONFIG_MAIN_STACK_SIZE+0x3c>
    201e:	2804      	cmp	r0, #4
    2020:	bf08      	it	eq
    2022:	2602      	moveq	r6, #2
    2024:	d00a      	beq.n	203c <CONFIG_MAIN_STACK_SIZE+0x3c>
    2026:	2805      	cmp	r0, #5
    2028:	bf0c      	ite	eq
    202a:	2603      	moveq	r6, #3
    202c:	2806      	cmpne	r0, #6
    202e:	d005      	beq.n	203c <CONFIG_MAIN_STACK_SIZE+0x3c>
    2030:	f640 01d9 	movw	r1, #2265	; 0x8d9
    2034:	f04f 0070 	mov.w	r0, #112	; 0x70
    2038:	f002 fb92 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    203c:	f1bb 0f00 	cmp.w	fp, #0
    2040:	bf18      	it	ne
    2042:	f3af 8000 	nopne.w
    2046:	f3ef 8010 	mrs	r0, PRIMASK
    204a:	b672      	cpsid	i
    204c:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    2050:	784a      	ldrb	r2, [r1, #1]
    2052:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    2056:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    205a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    205e:	42a2      	cmp	r2, r4
    2060:	bf04      	itt	eq
    2062:	2220      	moveq	r2, #32
    2064:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    2068:	b1b8      	cbz	r0, 209a <CONFIG_MAIN_STACK_SIZE+0x9a>
    206a:	462a      	mov	r2, r5
    206c:	4621      	mov	r1, r4
    206e:	2001      	movs	r0, #1
    2070:	f000 f85c 	bl	212c <CONFIG_MAIN_STACK_SIZE+0x12c>
    2074:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2078:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    207c:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    2080:	6840      	ldr	r0, [r0, #4]
    2082:	4631      	mov	r1, r6
    2084:	4790      	blx	r2
    2086:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    208a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    208e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    2092:	2c20      	cmp	r4, #32
    2094:	d1bc      	bne.n	2010 <CONFIG_MAIN_STACK_SIZE+0x10>
    2096:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    209a:	4806      	ldr	r0, [pc, #24]	; (20b4 <CONFIG_MAIN_STACK_SIZE+0xb4>)
    209c:	2800      	cmp	r0, #0
    209e:	bf18      	it	ne
    20a0:	f3af 8000 	nopne.w
    20a4:	b662      	cpsie	i
    20a6:	e7e0      	b.n	206a <CONFIG_MAIN_STACK_SIZE+0x6a>
    20a8:	20000d24 	.word	0x20000d24
    20ac:	00000000 	.word	0x00000000
    20b0:	20000ca4 	.word	0x20000ca4
    20b4:	00000000 	.word	0x00000000
    20b8:	b510      	push	{r4, lr}
    20ba:	4604      	mov	r4, r0
    20bc:	6800      	ldr	r0, [r0, #0]
    20be:	f00b f8c5 	bl	d24c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    20c2:	4602      	mov	r2, r0
    20c4:	8960      	ldrh	r0, [r4, #10]
    20c6:	7a21      	ldrb	r1, [r4, #8]
    20c8:	4b14      	ldr	r3, [pc, #80]	; (211c <CONFIG_MAIN_STACK_SIZE+0x11c>)
    20ca:	4408      	add	r0, r1
    20cc:	1c41      	adds	r1, r0, #1
    20ce:	1850      	adds	r0, r2, r1
    20d0:	429a      	cmp	r2, r3
    20d2:	d904      	bls.n	20de <CONFIG_MAIN_STACK_SIZE+0xde>
    20d4:	f240 6109 	movw	r1, #1545	; 0x609
    20d8:	2070      	movs	r0, #112	; 0x70
    20da:	f002 fb41 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20de:	4a10      	ldr	r2, [pc, #64]	; (2120 <CONFIG_MAIN_STACK_SIZE+0x120>)
    20e0:	4291      	cmp	r1, r2
    20e2:	dd04      	ble.n	20ee <CONFIG_MAIN_STACK_SIZE+0xee>
    20e4:	f240 610a 	movw	r1, #1546	; 0x60a
    20e8:	2070      	movs	r0, #112	; 0x70
    20ea:	f002 fb39 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20ee:	4a0d      	ldr	r2, [pc, #52]	; (2124 <CONFIG_MAIN_STACK_SIZE+0x124>)
    20f0:	4291      	cmp	r1, r2
    20f2:	da04      	bge.n	20fe <CONFIG_MAIN_STACK_SIZE+0xfe>
    20f4:	f240 610b 	movw	r1, #1547	; 0x60b
    20f8:	2070      	movs	r0, #112	; 0x70
    20fa:	f002 fb31 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20fe:	490a      	ldr	r1, [pc, #40]	; (2128 <CONFIG_MAIN_STACK_SIZE+0x128>)
    2100:	4281      	cmp	r1, r0
    2102:	bfde      	ittt	le
    2104:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2108:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    210c:	bd10      	pople	{r4, pc}
    210e:	2800      	cmp	r0, #0
    2110:	bfbc      	itt	lt
    2112:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2116:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    211a:	bd10      	pop	{r4, pc}
    211c:	1e847fff 	.word	0x1e847fff
    2120:	07a12000 	.word	0x07a12000
    2124:	f85ee000 	.word	0xf85ee000
    2128:	1e848000 	.word	0x1e848000
    212c:	f8df c054 	ldr.w	ip, [pc, #84]	; 2184 <CONFIG_MAIN_STACK_SIZE+0x184>
    2130:	b510      	push	{r4, lr}
    2132:	2300      	movs	r3, #0
    2134:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    2138:	2807      	cmp	r0, #7
    213a:	d21e      	bcs.n	217a <CONFIG_MAIN_STACK_SIZE+0x17a>
    213c:	e8df f000 	tbb	[pc, r0]
    2140:	05050505 	.word	0x05050505
    2144:	00040404 	.word	0x00040404
    2148:	2301      	movs	r3, #1
    214a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    214e:	2b00      	cmp	r3, #0
    2150:	bf08      	it	eq
    2152:	bd10      	popeq	{r4, pc}
    2154:	480c      	ldr	r0, [pc, #48]	; (2188 <CONFIG_MAIN_STACK_SIZE+0x188>)
    2156:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    215a:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    215e:	2820      	cmp	r0, #32
    2160:	bf0e      	itee	eq
    2162:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    2166:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    216a:	7041      	strbne	r1, [r0, #1]
    216c:	2020      	movs	r0, #32
    216e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    2172:	7058      	strb	r0, [r3, #1]
    2174:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    2178:	bd10      	pop	{r4, pc}
    217a:	f44f 7115 	mov.w	r1, #596	; 0x254
    217e:	2070      	movs	r0, #112	; 0x70
    2180:	f002 faee 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2184:	20000ca4 	.word	0x20000ca4
    2188:	20000d24 	.word	0x20000d24
    218c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2190:	b083      	sub	sp, #12
    2192:	485c      	ldr	r0, [pc, #368]	; (2304 <CONFIG_MAIN_STACK_SIZE+0x304>)
    2194:	9904      	ldr	r1, [sp, #16]
    2196:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    219a:	9001      	str	r0, [sp, #4]
    219c:	f890 4020 	ldrb.w	r4, [r0, #32]
    21a0:	9803      	ldr	r0, [sp, #12]
    21a2:	4625      	mov	r5, r4
    21a4:	2801      	cmp	r0, #1
    21a6:	bf18      	it	ne
    21a8:	2802      	cmpne	r0, #2
    21aa:	d005      	beq.n	21b8 <CONFIG_MAIN_STACK_SIZE+0x1b8>
    21ac:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    21b0:	f04f 0070 	mov.w	r0, #112	; 0x70
    21b4:	f002 fad4 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21b8:	2700      	movs	r7, #0
    21ba:	2d20      	cmp	r5, #32
    21bc:	d04a      	beq.n	2254 <CONFIG_MAIN_STACK_SIZE+0x254>
    21be:	4851      	ldr	r0, [pc, #324]	; (2304 <CONFIG_MAIN_STACK_SIZE+0x304>)
    21c0:	9100      	str	r1, [sp, #0]
    21c2:	2600      	movs	r6, #0
    21c4:	7f80      	ldrb	r0, [r0, #30]
    21c6:	2800      	cmp	r0, #0
    21c8:	bf08      	it	eq
    21ca:	2602      	moveq	r6, #2
    21cc:	f001 fc10 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    21d0:	f8df a138 	ldr.w	sl, [pc, #312]	; 230c <CONFIG_MAIN_STACK_SIZE+0x30c>
    21d4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    21d8:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    21dc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 2308 <CONFIG_MAIN_STACK_SIZE+0x308>
    21e0:	688a      	ldr	r2, [r1, #8]
    21e2:	68c9      	ldr	r1, [r1, #12]
    21e4:	1a12      	subs	r2, r2, r0
    21e6:	1a09      	subs	r1, r1, r0
    21e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    21ec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    21f0:	4296      	cmp	r6, r2
    21f2:	bf98      	it	ls
    21f4:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    21f8:	d201      	bcs.n	21fe <CONFIG_MAIN_STACK_SIZE+0x1fe>
    21fa:	4589      	cmp	r9, r1
    21fc:	d228      	bcs.n	2250 <CONFIG_MAIN_STACK_SIZE+0x250>
    21fe:	4a44      	ldr	r2, [pc, #272]	; (2310 <CONFIG_MAIN_STACK_SIZE+0x310>)
    2200:	9900      	ldr	r1, [sp, #0]
    2202:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    2206:	4622      	mov	r2, r4
    2208:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    220c:	784c      	ldrb	r4, [r1, #1]
    220e:	2c20      	cmp	r4, #32
    2210:	d016      	beq.n	2240 <CONFIG_MAIN_STACK_SIZE+0x240>
    2212:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2216:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    221a:	f8dc 8008 	ldr.w	r8, [ip, #8]
    221e:	f8dc c00c 	ldr.w	ip, [ip, #12]
    2222:	eba8 0800 	sub.w	r8, r8, r0
    2226:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    222a:	ebac 0100 	sub.w	r1, ip, r0
    222e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2232:	4546      	cmp	r6, r8
    2234:	bf98      	it	ls
    2236:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    223a:	d2e4      	bcs.n	2206 <CONFIG_MAIN_STACK_SIZE+0x206>
    223c:	4589      	cmp	r9, r1
    223e:	d3e2      	bcc.n	2206 <CONFIG_MAIN_STACK_SIZE+0x206>
    2240:	2a20      	cmp	r2, #32
    2242:	d005      	beq.n	2250 <CONFIG_MAIN_STACK_SIZE+0x250>
    2244:	2120      	movs	r1, #32
    2246:	2004      	movs	r0, #4
    2248:	9b00      	ldr	r3, [sp, #0]
    224a:	f7ff f901 	bl	1450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    224e:	4604      	mov	r4, r0
    2250:	42ac      	cmp	r4, r5
    2252:	d115      	bne.n	2280 <CONFIG_MAIN_STACK_SIZE+0x280>
    2254:	482f      	ldr	r0, [pc, #188]	; (2314 <CONFIG_MAIN_STACK_SIZE+0x314>)
    2256:	2800      	cmp	r0, #0
    2258:	bf18      	it	ne
    225a:	f3af 8000 	nopne.w
    225e:	f001 fbc7 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2262:	4c28      	ldr	r4, [pc, #160]	; (2304 <CONFIG_MAIN_STACK_SIZE+0x304>)
    2264:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    2268:	2920      	cmp	r1, #32
    226a:	d00d      	beq.n	2288 <CONFIG_MAIN_STACK_SIZE+0x288>
    226c:	68e1      	ldr	r1, [r4, #12]
    226e:	1c82      	adds	r2, r0, #2
    2270:	1a51      	subs	r1, r2, r1
    2272:	0209      	lsls	r1, r1, #8
    2274:	17ca      	asrs	r2, r1, #31
    2276:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    227a:	1209      	asrs	r1, r1, #8
    227c:	2900      	cmp	r1, #0
    227e:	dd03      	ble.n	2288 <CONFIG_MAIN_STACK_SIZE+0x288>
    2280:	b005      	add	sp, #20
    2282:	2000      	movs	r0, #0
    2284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2288:	2d20      	cmp	r5, #32
    228a:	d00d      	beq.n	22a8 <CONFIG_MAIN_STACK_SIZE+0x2a8>
    228c:	462a      	mov	r2, r5
    228e:	9903      	ldr	r1, [sp, #12]
    2290:	f7ff fb16 	bl	18c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x48c>
    2294:	b358      	cbz	r0, 22ee <CONFIG_MAIN_STACK_SIZE+0x2ee>
    2296:	9801      	ldr	r0, [sp, #4]
    2298:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    229c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    22a0:	b005      	add	sp, #20
    22a2:	2001      	movs	r0, #1
    22a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22a8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    22ac:	b118      	cbz	r0, 22b6 <CONFIG_MAIN_STACK_SIZE+0x2b6>
    22ae:	f002 f8bb 	bl	4428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    22b2:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    22b6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    22ba:	b150      	cbz	r0, 22d2 <CONFIG_MAIN_STACK_SIZE+0x2d2>
    22bc:	4916      	ldr	r1, [pc, #88]	; (2318 <CONFIG_MAIN_STACK_SIZE+0x318>)
    22be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    22c2:	6008      	str	r0, [r1, #0]
    22c4:	2005      	movs	r0, #5
    22c6:	f001 fde1 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    22ca:	f002 f915 	bl	44f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    22ce:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    22d2:	2004      	movs	r0, #4
    22d4:	f001 fdda 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    22d8:	f001 fe40 	bl	3f5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    22dc:	2020      	movs	r0, #32
    22de:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    22e2:	480e      	ldr	r0, [pc, #56]	; (231c <CONFIG_MAIN_STACK_SIZE+0x31c>)
    22e4:	6880      	ldr	r0, [r0, #8]
    22e6:	6007      	str	r7, [r0, #0]
    22e8:	480d      	ldr	r0, [pc, #52]	; (2320 <CONFIG_MAIN_STACK_SIZE+0x320>)
    22ea:	6007      	str	r7, [r0, #0]
    22ec:	e7d8      	b.n	22a0 <CONFIG_MAIN_STACK_SIZE+0x2a0>
    22ee:	462a      	mov	r2, r5
    22f0:	2120      	movs	r1, #32
    22f2:	2004      	movs	r0, #4
    22f4:	9b04      	ldr	r3, [sp, #16]
    22f6:	f7ff f8ab 	bl	1450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    22fa:	b005      	add	sp, #20
    22fc:	2000      	movs	r0, #0
    22fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2302:	0000      	.short	0x0000
    2304:	20000d24 	.word	0x20000d24
    2308:	003fffff 	.word	0x003fffff
    230c:	200009a4 	.word	0x200009a4
    2310:	20000ca4 	.word	0x20000ca4
    2314:	00000000 	.word	0x00000000
    2318:	4001f508 	.word	0x4001f508
    231c:	20000010 	.word	0x20000010
    2320:	40000508 	.word	0x40000508

00002324 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    2324:	4906      	ldr	r1, [pc, #24]	; (2340 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    2326:	b510      	push	{r4, lr}
    2328:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    232c:	2a20      	cmp	r2, #32
    232e:	bf1c      	itt	ne
    2330:	7788      	strbne	r0, [r1, #30]
    2332:	bd10      	popne	{r4, pc}
    2334:	f240 31ea 	movw	r1, #1002	; 0x3ea
    2338:	2070      	movs	r0, #112	; 0x70
    233a:	f002 fa11 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    233e:	0000      	.short	0x0000
    2340:	20000d24 	.word	0x20000d24

00002344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    2344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2348:	4e5b      	ldr	r6, [pc, #364]	; (24b8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    234a:	4681      	mov	r9, r0
    234c:	b085      	sub	sp, #20
    234e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2352:	468a      	mov	sl, r1
    2354:	2820      	cmp	r0, #32
    2356:	d04d      	beq.n	23f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    2358:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    235c:	f106 040c 	add.w	r4, r6, #12
    2360:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2364:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    2368:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    236c:	2020      	movs	r0, #32
    236e:	f88d 0000 	strb.w	r0, [sp]
    2372:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2376:	aa03      	add	r2, sp, #12
    2378:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    237c:	a901      	add	r1, sp, #4
    237e:	f890 5020 	ldrb.w	r5, [r0, #32]
    2382:	6930      	ldr	r0, [r6, #16]
    2384:	9002      	str	r0, [sp, #8]
    2386:	6830      	ldr	r0, [r6, #0]
    2388:	4448      	add	r0, r9
    238a:	f001 f9db 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    238e:	68f8      	ldr	r0, [r7, #12]
    2390:	9901      	ldr	r1, [sp, #4]
    2392:	4a4a      	ldr	r2, [pc, #296]	; (24bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    2394:	4408      	add	r0, r1
    2396:	f1a9 0164 	sub.w	r1, r9, #100	; 0x64
    239a:	4291      	cmp	r1, r2
    239c:	d82f      	bhi.n	23fe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    239e:	68b9      	ldr	r1, [r7, #8]
    23a0:	1a41      	subs	r1, r0, r1
    23a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    23a6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    23aa:	d228      	bcs.n	23fe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    23ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23b0:	6060      	str	r0, [r4, #4]
    23b2:	4630      	mov	r0, r6
    23b4:	f884 a00c 	strb.w	sl, [r4, #12]
    23b8:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    23bc:	46ea      	mov	sl, sp
    23be:	2d20      	cmp	r5, #32
    23c0:	bf1c      	itt	ne
    23c2:	493f      	ldrne	r1, [pc, #252]	; (24c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    23c4:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    23c8:	d03c      	beq.n	2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    23ca:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    23ce:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    23d2:	6860      	ldr	r0, [r4, #4]
    23d4:	68ba      	ldr	r2, [r7, #8]
    23d6:	4621      	mov	r1, r4
    23d8:	1a10      	subs	r0, r2, r0
    23da:	0200      	lsls	r0, r0, #8
    23dc:	17c2      	asrs	r2, r0, #31
    23de:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    23e2:	f107 0608 	add.w	r6, r7, #8
    23e6:	1200      	asrs	r0, r0, #8
    23e8:	d41b      	bmi.n	2422 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    23ea:	8970      	ldrh	r0, [r6, #10]
    23ec:	b350      	cbz	r0, 2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    23ee:	8948      	ldrh	r0, [r1, #10]
    23f0:	b148      	cbz	r0, 2406 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    23f2:	e027      	b.n	2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    23f4:	f640 317b 	movw	r1, #2939	; 0xb7b
    23f8:	2070      	movs	r0, #112	; 0x70
    23fa:	f002 f9b1 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23fe:	b005      	add	sp, #20
    2400:	2001      	movs	r0, #1
    2402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2406:	4620      	mov	r0, r4
    2408:	f7ff fe56 	bl	20b8 <CONFIG_MAIN_STACK_SIZE+0xb8>
    240c:	f001 f97e 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2410:	6831      	ldr	r1, [r6, #0]
    2412:	1a08      	subs	r0, r1, r0
    2414:	0200      	lsls	r0, r0, #8
    2416:	17c1      	asrs	r1, r0, #31
    2418:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    241c:	1200      	asrs	r0, r0, #8
    241e:	2833      	cmp	r0, #51	; 0x33
    2420:	da10      	bge.n	2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2422:	f88a 5000 	strb.w	r5, [sl]
    2426:	7d39      	ldrb	r1, [r7, #20]
    2428:	7b20      	ldrb	r0, [r4, #12]
    242a:	4281      	cmp	r1, r0
    242c:	d805      	bhi.n	243a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    242e:	9802      	ldr	r0, [sp, #8]
    2430:	6060      	str	r0, [r4, #4]
    2432:	b005      	add	sp, #20
    2434:	2002      	movs	r0, #2
    2436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    243a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    243e:	7845      	ldrb	r5, [r0, #1]
    2440:	2d20      	cmp	r5, #32
    2442:	d1c2      	bne.n	23ca <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    2444:	2005      	movs	r0, #5
    2446:	f001 fd21 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    244a:	4c1b      	ldr	r4, [pc, #108]	; (24b8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    244c:	f04f 30ff 	mov.w	r0, #4294967295
    2450:	60a0      	str	r0, [r4, #8]
    2452:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    2456:	f89d 2000 	ldrb.w	r2, [sp]
    245a:	2120      	movs	r1, #32
    245c:	2a20      	cmp	r2, #32
    245e:	bf13      	iteet	ne
    2460:	2005      	movne	r0, #5
    2462:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    2466:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    246a:	f7fe fff1 	blne	1450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    246e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    2472:	4913      	ldr	r1, [pc, #76]	; (24c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    2474:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    2478:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    247c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    2480:	7048      	strb	r0, [r1, #1]
    2482:	6820      	ldr	r0, [r4, #0]
    2484:	4448      	add	r0, r9
    2486:	6020      	str	r0, [r4, #0]
    2488:	2001      	movs	r0, #1
    248a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    248e:	7e60      	ldrb	r0, [r4, #25]
    2490:	2801      	cmp	r0, #1
    2492:	d105      	bne.n	24a0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    2494:	6920      	ldr	r0, [r4, #16]
    2496:	1e40      	subs	r0, r0, #1
    2498:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    249c:	f001 fb48 	bl	3b30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    24a0:	f89d 0000 	ldrb.w	r0, [sp]
    24a4:	2820      	cmp	r0, #32
    24a6:	d003      	beq.n	24b0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    24a8:	4806      	ldr	r0, [pc, #24]	; (24c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    24aa:	7840      	ldrb	r0, [r0, #1]
    24ac:	f002 fa28 	bl	4900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    24b0:	b005      	add	sp, #20
    24b2:	2000      	movs	r0, #0
    24b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24b8:	20000d24 	.word	0x20000d24
    24bc:	07a11f9c 	.word	0x07a11f9c
    24c0:	20000ca4 	.word	0x20000ca4
    24c4:	20000010 	.word	0x20000010

000024c8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    24c8:	b570      	push	{r4, r5, r6, lr}
    24ca:	4a23      	ldr	r2, [pc, #140]	; (2558 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    24cc:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    24d0:	2920      	cmp	r1, #32
    24d2:	d039      	beq.n	2548 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    24d4:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    24d8:	f5a2 7360 	sub.w	r3, r2, #896	; 0x380
    24dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    24e0:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    24e4:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    24e8:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
    24ec:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    24f0:	f891 1020 	ldrb.w	r1, [r1, #32]
    24f4:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    24f8:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    24fc:	2920      	cmp	r1, #32
    24fe:	d028      	beq.n	2552 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    2500:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    2504:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    2508:	7d2d      	ldrb	r5, [r5, #20]
    250a:	4285      	cmp	r5, r0
    250c:	bf84      	itt	hi
    250e:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    2512:	7849      	ldrbhi	r1, [r1, #1]
    2514:	d8f2      	bhi.n	24fc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x34>
    2516:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    251a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    251e:	f8dc 000c 	ldr.w	r0, [ip, #12]
    2522:	6889      	ldr	r1, [r1, #8]
    2524:	6814      	ldr	r4, [r2, #0]
    2526:	1a08      	subs	r0, r1, r0
    2528:	0200      	lsls	r0, r0, #8
    252a:	17c1      	asrs	r1, r0, #31
    252c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2530:	1200      	asrs	r0, r0, #8
    2532:	d407      	bmi.n	2544 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    2534:	f00a fe8a 	bl	d24c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2538:	f104 0164 	add.w	r1, r4, #100	; 0x64
    253c:	4288      	cmp	r0, r1
    253e:	bf24      	itt	cs
    2540:	1b00      	subcs	r0, r0, r4
    2542:	bd70      	popcs	{r4, r5, r6, pc}
    2544:	2000      	movs	r0, #0
    2546:	bd70      	pop	{r4, r5, r6, pc}
    2548:	f640 314d 	movw	r1, #2893	; 0xb4d
    254c:	2070      	movs	r0, #112	; 0x70
    254e:	f002 f907 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2552:	f04f 30ff 	mov.w	r0, #4294967295
    2556:	bd70      	pop	{r4, r5, r6, pc}
    2558:	20000d24 	.word	0x20000d24

0000255c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    255c:	4806      	ldr	r0, [pc, #24]	; (2578 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    255e:	b510      	push	{r4, lr}
    2560:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    2564:	2920      	cmp	r1, #32
    2566:	bf1c      	itt	ne
    2568:	7e00      	ldrbne	r0, [r0, #24]
    256a:	bd10      	popne	{r4, pc}
    256c:	f640 3174 	movw	r1, #2932	; 0xb74
    2570:	2070      	movs	r0, #112	; 0x70
    2572:	f002 f8f5 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2576:	0000      	.short	0x0000
    2578:	20000d24 	.word	0x20000d24

0000257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    257c:	4602      	mov	r2, r0
    257e:	4b14      	ldr	r3, [pc, #80]	; (25d0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    2580:	b510      	push	{r4, lr}
    2582:	4408      	add	r0, r1
    2584:	429a      	cmp	r2, r3
    2586:	d904      	bls.n	2592 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    2588:	f240 6109 	movw	r1, #1545	; 0x609
    258c:	2070      	movs	r0, #112	; 0x70
    258e:	f002 f8e7 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2592:	4a10      	ldr	r2, [pc, #64]	; (25d4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    2594:	4291      	cmp	r1, r2
    2596:	dd04      	ble.n	25a2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    2598:	f240 610a 	movw	r1, #1546	; 0x60a
    259c:	2070      	movs	r0, #112	; 0x70
    259e:	f002 f8df 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25a2:	4a0d      	ldr	r2, [pc, #52]	; (25d8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    25a4:	4291      	cmp	r1, r2
    25a6:	da04      	bge.n	25b2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    25a8:	f240 610b 	movw	r1, #1547	; 0x60b
    25ac:	2070      	movs	r0, #112	; 0x70
    25ae:	f002 f8d7 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25b2:	490a      	ldr	r1, [pc, #40]	; (25dc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    25b4:	4281      	cmp	r1, r0
    25b6:	bfde      	ittt	le
    25b8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    25bc:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    25c0:	bd10      	pople	{r4, pc}
    25c2:	2800      	cmp	r0, #0
    25c4:	bfbc      	itt	lt
    25c6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    25ca:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    25ce:	bd10      	pop	{r4, pc}
    25d0:	1e847fff 	.word	0x1e847fff
    25d4:	07a12000 	.word	0x07a12000
    25d8:	f85ee000 	.word	0xf85ee000
    25dc:	1e848000 	.word	0x1e848000

000025e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    25e0:	4a10      	ldr	r2, [pc, #64]	; (2624 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    25e2:	1a0b      	subs	r3, r1, r0
    25e4:	f102 0c01 	add.w	ip, r2, #1
    25e8:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    25ec:	bf3c      	itt	cc
    25ee:	4618      	movcc	r0, r3
    25f0:	4770      	bxcc	lr
    25f2:	b510      	push	{r4, lr}
    25f4:	1a44      	subs	r4, r0, r1
    25f6:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    25fa:	bf3c      	itt	cc
    25fc:	4618      	movcc	r0, r3
    25fe:	bd10      	popcc	{r4, pc}
    2600:	429a      	cmp	r2, r3
    2602:	d203      	bcs.n	260c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    2604:	1a10      	subs	r0, r2, r0
    2606:	4408      	add	r0, r1
    2608:	1c40      	adds	r0, r0, #1
    260a:	bd10      	pop	{r4, pc}
    260c:	42a2      	cmp	r2, r4
    260e:	d204      	bcs.n	261a <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    2610:	1a51      	subs	r1, r2, r1
    2612:	4408      	add	r0, r1
    2614:	1c40      	adds	r0, r0, #1
    2616:	4240      	negs	r0, r0
    2618:	bd10      	pop	{r4, pc}
    261a:	f640 310c 	movw	r1, #2828	; 0xb0c
    261e:	2070      	movs	r0, #112	; 0x70
    2620:	f002 f89e 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2624:	1e847fff 	.word	0x1e847fff

00002628 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    2628:	4907      	ldr	r1, [pc, #28]	; (2648 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    262a:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    262e:	4282      	cmp	r2, r0
    2630:	bf04      	itt	eq
    2632:	6848      	ldreq	r0, [r1, #4]
    2634:	4770      	bxeq	lr
    2636:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    263a:	4904      	ldr	r1, [pc, #16]	; (264c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    263c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2640:	3008      	adds	r0, #8
    2642:	f7ff bd39 	b.w	20b8 <CONFIG_MAIN_STACK_SIZE+0xb8>
    2646:	0000      	.short	0x0000
    2648:	20000d24 	.word	0x20000d24
    264c:	200009a4 	.word	0x200009a4

00002650 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    2650:	490e      	ldr	r1, [pc, #56]	; (268c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    2652:	b510      	push	{r4, lr}
    2654:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2658:	2820      	cmp	r0, #32
    265a:	d012      	beq.n	2682 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    265c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2660:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    2664:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2668:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    266c:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    2670:	6840      	ldr	r0, [r0, #4]
    2672:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2676:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    267a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    267e:	2104      	movs	r1, #4
    2680:	4710      	bx	r2
    2682:	f640 01bc 	movw	r1, #2236	; 0x8bc
    2686:	2070      	movs	r0, #112	; 0x70
    2688:	f002 f86a 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    268c:	20000d24 	.word	0x20000d24

00002690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2692:	4d6d      	ldr	r5, [pc, #436]	; (2848 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    2694:	496d      	ldr	r1, [pc, #436]	; (284c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    2696:	2601      	movs	r6, #1
    2698:	f505 7460 	add.w	r4, r5, #896	; 0x380
    269c:	2808      	cmp	r0, #8
    269e:	d273      	bcs.n	2788 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    26a0:	e8df f000 	tbb	[pc, r0]
    26a4:	af9d6704 	.word	0xaf9d6704
    26a8:	b9b444cd 	.word	0xb9b444cd
    26ac:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    26b0:	b918      	cbnz	r0, 26ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    26b2:	f001 fed5 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    26b6:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    26ba:	8ae0      	ldrh	r0, [r4, #22]
    26bc:	b110      	cbz	r0, 26c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    26be:	f001 ffeb 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    26c2:	b188      	cbz	r0, 26e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    26c4:	f7ff fc60 	bl	1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    26c8:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    26cc:	68a1      	ldr	r1, [r4, #8]
    26ce:	f1b1 3fff 	cmp.w	r1, #4294967295
    26d2:	d005      	beq.n	26e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    26d4:	2301      	movs	r3, #1
    26d6:	2203      	movs	r2, #3
    26d8:	2005      	movs	r0, #5
    26da:	f001 fb0f 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    26de:	b140      	cbz	r0, 26f2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    26e0:	7e60      	ldrb	r0, [r4, #25]
    26e2:	2801      	cmp	r0, #1
    26e4:	d110      	bne.n	2708 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    26e6:	e009      	b.n	26fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    26e8:	f44f 6107 	mov.w	r1, #2160	; 0x870
    26ec:	2070      	movs	r0, #112	; 0x70
    26ee:	f002 f837 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26f2:	f640 0175 	movw	r1, #2165	; 0x875
    26f6:	2070      	movs	r0, #112	; 0x70
    26f8:	f002 f832 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26fc:	6920      	ldr	r0, [r4, #16]
    26fe:	1e40      	subs	r0, r0, #1
    2700:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2704:	f001 fa14 	bl	3b30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2708:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    270c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2710:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2714:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2718:	6840      	ldr	r0, [r0, #4]
    271a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    271e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2722:	b001      	add	sp, #4
    2724:	2101      	movs	r1, #1
    2726:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    272a:	4710      	bx	r2
    272c:	f7ff fc2c 	bl	1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    2730:	f04f 30ff 	mov.w	r0, #4294967295
    2734:	60a0      	str	r0, [r4, #8]
    2736:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    273a:	f88d 0000 	strb.w	r0, [sp]
    273e:	f89d 0000 	ldrb.w	r0, [sp]
    2742:	b188      	cbz	r0, 2768 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    2744:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2748:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    274c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2750:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2754:	6840      	ldr	r0, [r0, #4]
    2756:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    275a:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    275e:	b001      	add	sp, #4
    2760:	2106      	movs	r1, #6
    2762:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2766:	4710      	bx	r2
    2768:	f640 0186 	movw	r1, #2182	; 0x886
    276c:	2070      	movs	r0, #112	; 0x70
    276e:	f001 fff7 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2772:	f7ff fc09 	bl	1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    2776:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    277a:	f001 ff8d 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    277e:	b120      	cbz	r0, 278a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    2780:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2784:	b130      	cbz	r0, 2794 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    2786:	e009      	b.n	279c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    2788:	e059      	b.n	283e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    278a:	f640 0196 	movw	r1, #2198	; 0x896
    278e:	2070      	movs	r0, #112	; 0x70
    2790:	f001 ffe6 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2794:	f001 fe64 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2798:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    279c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    27a0:	b158      	cbz	r0, 27ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    27a2:	492b      	ldr	r1, [pc, #172]	; (2850 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    27a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    27a8:	6008      	str	r0, [r1, #0]
    27aa:	2005      	movs	r0, #5
    27ac:	f001 fb6e 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27b0:	f001 fea2 	bl	44f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    27b4:	2000      	movs	r0, #0
    27b6:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    27ba:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    27be:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    27c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    27c6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    27ca:	6840      	ldr	r0, [r0, #4]
    27cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    27d0:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    27d4:	b001      	add	sp, #4
    27d6:	2100      	movs	r1, #0
    27d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    27dc:	4710      	bx	r2
    27de:	f001 fc07 	bl	3ff0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    27e2:	8ae0      	ldrh	r0, [r4, #22]
    27e4:	b110      	cbz	r0, 27ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    27e6:	f001 ff57 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    27ea:	b128      	cbz	r0, 27f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    27ec:	4819      	ldr	r0, [pc, #100]	; (2854 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    27ee:	7800      	ldrb	r0, [r0, #0]
    27f0:	2803      	cmp	r0, #3
    27f2:	bf08      	it	eq
    27f4:	7766      	strbeq	r6, [r4, #29]
    27f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27f8:	f640 01a1 	movw	r1, #2209	; 0x8a1
    27fc:	2070      	movs	r0, #112	; 0x70
    27fe:	f001 ffaf 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2802:	4815      	ldr	r0, [pc, #84]	; (2858 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    2804:	6006      	str	r6, [r0, #0]
    2806:	6888      	ldr	r0, [r1, #8]
    2808:	6006      	str	r6, [r0, #0]
    280a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    280c:	7808      	ldrb	r0, [r1, #0]
    280e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2812:	f002 b875 	b.w	4900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2816:	f7ff fbb7 	bl	1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    281a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    281e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2822:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2826:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    282a:	6840      	ldr	r0, [r0, #4]
    282c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2830:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2834:	b001      	add	sp, #4
    2836:	2105      	movs	r1, #5
    2838:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    283c:	4710      	bx	r2
    283e:	f640 01b4 	movw	r1, #2228	; 0x8b4
    2842:	2070      	movs	r0, #112	; 0x70
    2844:	f001 ff8c 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2848:	200009a4 	.word	0x200009a4
    284c:	20000010 	.word	0x20000010
    2850:	4001f508 	.word	0x4001f508
    2854:	20000012 	.word	0x20000012
    2858:	40000508 	.word	0x40000508

0000285c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    285c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2860:	4682      	mov	sl, r0
    2862:	48dc      	ldr	r0, [pc, #880]	; (2bd4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    2864:	b08b      	sub	sp, #44	; 0x2c
    2866:	6800      	ldr	r0, [r0, #0]
    2868:	4ddb      	ldr	r5, [pc, #876]	; (2bd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    286a:	05c0      	lsls	r0, r0, #23
    286c:	0dc0      	lsrs	r0, r0, #23
    286e:	d00e      	beq.n	288e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2870:	3810      	subs	r0, #16
    2872:	b240      	sxtb	r0, r0
    2874:	2800      	cmp	r0, #0
    2876:	bfb8      	it	lt
    2878:	f000 000f 	andlt.w	r0, r0, #15
    287c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2880:	bfac      	ite	ge
    2882:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2886:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    288a:	0940      	lsrs	r0, r0, #5
    288c:	d00d      	beq.n	28aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    288e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2890:	f04f 0b00 	mov.w	fp, #0
    2894:	7800      	ldrb	r0, [r0, #0]
    2896:	2800      	cmp	r0, #0
    2898:	bf18      	it	ne
    289a:	2801      	cmpne	r0, #1
    289c:	d018      	beq.n	28d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    289e:	f240 714f 	movw	r1, #1871	; 0x74f
    28a2:	f04f 0070 	mov.w	r0, #112	; 0x70
    28a6:	f001 ff5b 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28aa:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    28ae:	f04f 0b01 	mov.w	fp, #1
    28b2:	2820      	cmp	r0, #32
    28b4:	d007      	beq.n	28c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    28b6:	980c      	ldr	r0, [sp, #48]	; 0x30
    28b8:	7800      	ldrb	r0, [r0, #0]
    28ba:	b148      	cbz	r0, 28d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    28bc:	f240 714b 	movw	r1, #1867	; 0x74b
    28c0:	2070      	movs	r0, #112	; 0x70
    28c2:	f001 ff4d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28c6:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    28ca:	2070      	movs	r0, #112	; 0x70
    28cc:	f001 ff48 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28d0:	4cc2      	ldr	r4, [pc, #776]	; (2bdc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    28d2:	b124      	cbz	r4, 28de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    28d4:	2100      	movs	r1, #0
    28d6:	f240 7052 	movw	r0, #1874	; 0x752
    28da:	f3af 8000 	nop.w
    28de:	49c0      	ldr	r1, [pc, #768]	; (2be0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    28e0:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    28e4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    28e8:	f04f 0801 	mov.w	r8, #1
    28ec:	9000      	str	r0, [sp, #0]
    28ee:	b124      	cbz	r4, 28fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    28f0:	2100      	movs	r1, #0
    28f2:	f240 705a 	movw	r0, #1882	; 0x75a
    28f6:	f3af 8000 	nop.w
    28fa:	f1b8 0f00 	cmp.w	r8, #0
    28fe:	d009      	beq.n	2914 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    2900:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    2904:	f04f 0900 	mov.w	r9, #0
    2908:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    290c:	f1bb 0f00 	cmp.w	fp, #0
    2910:	d007      	beq.n	2922 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    2912:	e032      	b.n	297a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    2914:	48b3      	ldr	r0, [pc, #716]	; (2be4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    2916:	2800      	cmp	r0, #0
    2918:	bf18      	it	ne
    291a:	f3af 8000 	nopne.w
    291e:	b662      	cpsie	i
    2920:	e7ee      	b.n	2900 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    2922:	4637      	mov	r7, r6
    2924:	2001      	movs	r0, #1
    2926:	ea20 0607 	bic.w	r6, r0, r7
    292a:	48af      	ldr	r0, [pc, #700]	; (2be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    292c:	2240      	movs	r2, #64	; 0x40
    292e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2932:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2936:	f00a fdf7 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    293a:	b124      	cbz	r4, 2946 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    293c:	2100      	movs	r1, #0
    293e:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2942:	f3af 8000 	nop.w
    2946:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    294a:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    294e:	6a09      	ldr	r1, [r1, #32]
    2950:	6201      	str	r1, [r0, #32]
    2952:	b124      	cbz	r4, 295e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    2954:	2100      	movs	r1, #0
    2956:	f240 50d1 	movw	r0, #1489	; 0x5d1
    295a:	f3af 8000 	nop.w
    295e:	b124      	cbz	r4, 296a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    2960:	2100      	movs	r1, #0
    2962:	f240 7064 	movw	r0, #1892	; 0x764
    2966:	f3af 8000 	nop.w
    296a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    296e:	f88d 0004 	strb.w	r0, [sp, #4]
    2972:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2976:	2800      	cmp	r0, #0
    2978:	d1b9      	bne.n	28ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    297a:	b124      	cbz	r4, 2986 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    297c:	2100      	movs	r1, #0
    297e:	f240 706e 	movw	r0, #1902	; 0x76e
    2982:	f3af 8000 	nop.w
    2986:	f001 f833 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    298a:	4680      	mov	r8, r0
    298c:	4633      	mov	r3, r6
    298e:	aa06      	add	r2, sp, #24
    2990:	990c      	ldr	r1, [sp, #48]	; 0x30
    2992:	f7ff fa25 	bl	1de0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    2996:	b124      	cbz	r4, 29a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    2998:	2100      	movs	r1, #0
    299a:	f240 7075 	movw	r0, #1909	; 0x775
    299e:	f3af 8000 	nop.w
    29a2:	4991      	ldr	r1, [pc, #580]	; (2be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    29a4:	a806      	add	r0, sp, #24
    29a6:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    29aa:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    29ae:	2901      	cmp	r1, #1
    29b0:	bf18      	it	ne
    29b2:	2902      	cmpne	r1, #2
    29b4:	d13c      	bne.n	2a30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    29b6:	9906      	ldr	r1, [sp, #24]
    29b8:	9b07      	ldr	r3, [sp, #28]
    29ba:	eba1 0108 	sub.w	r1, r1, r8
    29be:	4a8b      	ldr	r2, [pc, #556]	; (2bec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    29c0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    29c4:	eba3 0308 	sub.w	r3, r3, r8
    29c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    29cc:	2902      	cmp	r1, #2
    29ce:	d371      	bcc.n	2ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    29d0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    29d4:	d26e      	bcs.n	2ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    29d6:	429a      	cmp	r2, r3
    29d8:	d36c      	bcc.n	2ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    29da:	f04f 0901 	mov.w	r9, #1
    29de:	ab01      	add	r3, sp, #4
    29e0:	aa05      	add	r2, sp, #20
    29e2:	4631      	mov	r1, r6
    29e4:	f7fe feec 	bl	17c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    29e8:	2800      	cmp	r0, #0
    29ea:	d06b      	beq.n	2ac4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    29ec:	f89d 1014 	ldrb.w	r1, [sp, #20]
    29f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    29f4:	4633      	mov	r3, r6
    29f6:	428a      	cmp	r2, r1
    29f8:	d068      	beq.n	2acc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    29fa:	2005      	movs	r0, #5
    29fc:	f7fe fd28 	bl	1450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2a00:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    2a04:	7048      	strb	r0, [r1, #1]
    2a06:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2a0a:	2820      	cmp	r0, #32
    2a0c:	bf03      	ittte	eq
    2a0e:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2a12:	f880 a020 	strbeq.w	sl, [r0, #32]
    2a16:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    2a1a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    2a1e:	bf18      	it	ne
    2a20:	f880 a001 	strbne.w	sl, [r0, #1]
    2a24:	4632      	mov	r2, r6
    2a26:	4651      	mov	r1, sl
    2a28:	f05f 0003 	movs.w	r0, #3
    2a2c:	f7ff fb7e 	bl	212c <CONFIG_MAIN_STACK_SIZE+0x12c>
    2a30:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2a34:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2a38:	f88d 0004 	strb.w	r0, [sp, #4]
    2a3c:	f89d 7004 	ldrb.w	r7, [sp, #4]
    2a40:	b124      	cbz	r4, 2a4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    2a42:	2100      	movs	r1, #0
    2a44:	f240 707c 	movw	r0, #1916	; 0x77c
    2a48:	f3af 8000 	nop.w
    2a4c:	4868      	ldr	r0, [pc, #416]	; (2bf0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    2a4e:	2800      	cmp	r0, #0
    2a50:	bf18      	it	ne
    2a52:	f3af 8000 	nopne.w
    2a56:	f3ef 8810 	mrs	r8, PRIMASK
    2a5a:	b672      	cpsid	i
    2a5c:	b124      	cbz	r4, 2a68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    2a5e:	2100      	movs	r1, #0
    2a60:	f240 7082 	movw	r0, #1922	; 0x782
    2a64:	f3af 8000 	nop.w
    2a68:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2a6c:	f88d 0004 	strb.w	r0, [sp, #4]
    2a70:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2a74:	2800      	cmp	r0, #0
    2a76:	f47f af3a 	bne.w	28ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2a7a:	b124      	cbz	r4, 2a86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    2a7c:	2100      	movs	r1, #0
    2a7e:	f240 708a 	movw	r0, #1930	; 0x78a
    2a82:	f3af 8000 	nop.w
    2a86:	f10d 0e18 	add.w	lr, sp, #24
    2a8a:	9800      	ldr	r0, [sp, #0]
    2a8c:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    2a90:	f100 0008 	add.w	r0, r0, #8
    2a94:	f1b9 0f00 	cmp.w	r9, #0
    2a98:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    2a9c:	d044      	beq.n	2b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    2a9e:	b124      	cbz	r4, 2aaa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    2aa0:	2100      	movs	r1, #0
    2aa2:	f240 7097 	movw	r0, #1943	; 0x797
    2aa6:	f3af 8000 	nop.w
    2aaa:	f1bb 0f00 	cmp.w	fp, #0
    2aae:	d12c      	bne.n	2b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2ab0:	e016      	b.n	2ae0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    2ab2:	e7ff      	b.n	2ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2ab4:	4632      	mov	r2, r6
    2ab6:	4651      	mov	r1, sl
    2ab8:	2004      	movs	r0, #4
    2aba:	f7ff fb37 	bl	212c <CONFIG_MAIN_STACK_SIZE+0x12c>
    2abe:	f04f 0901 	mov.w	r9, #1
    2ac2:	e7b5      	b.n	2a30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    2ac4:	4632      	mov	r2, r6
    2ac6:	4651      	mov	r1, sl
    2ac8:	2004      	movs	r0, #4
    2aca:	e7af      	b.n	2a2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    2acc:	2920      	cmp	r1, #32
    2ace:	bf19      	ittee	ne
    2ad0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2ad4:	7840      	ldrbne	r0, [r0, #1]
    2ad6:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2ada:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2ade:	e78f      	b.n	2a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    2ae0:	b19f      	cbz	r7, 2b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2ae2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2ae6:	2820      	cmp	r0, #32
    2ae8:	d10f      	bne.n	2b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2aea:	b124      	cbz	r4, 2af6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    2aec:	2100      	movs	r1, #0
    2aee:	f240 709c 	movw	r0, #1948	; 0x79c
    2af2:	f3af 8000 	nop.w
    2af6:	4631      	mov	r1, r6
    2af8:	2002      	movs	r0, #2
    2afa:	f7ff fb47 	bl	218c <CONFIG_MAIN_STACK_SIZE+0x18c>
    2afe:	b920      	cbnz	r0, 2b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2b00:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b02:	7800      	ldrb	r0, [r0, #0]
    2b04:	b3f0      	cbz	r0, 2b84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    2b06:	2801      	cmp	r0, #1
    2b08:	d04c      	beq.n	2ba4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    2b0a:	b124      	cbz	r4, 2b16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2b0c:	2100      	movs	r1, #0
    2b0e:	f240 70b9 	movw	r0, #1977	; 0x7b9
    2b12:	f3af 8000 	nop.w
    2b16:	f1bb 0f00 	cmp.w	fp, #0
    2b1a:	bf18      	it	ne
    2b1c:	2001      	movne	r0, #1
    2b1e:	d04a      	beq.n	2bb6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    2b20:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    2b24:	f04f 0901 	mov.w	r9, #1
    2b28:	b124      	cbz	r4, 2b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    2b2a:	2100      	movs	r1, #0
    2b2c:	f240 70ca 	movw	r0, #1994	; 0x7ca
    2b30:	f3af 8000 	nop.w
    2b34:	f1b8 0f00 	cmp.w	r8, #0
    2b38:	d045      	beq.n	2bc6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    2b3a:	b124      	cbz	r4, 2b46 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    2b3c:	2100      	movs	r1, #0
    2b3e:	f240 70ce 	movw	r0, #1998	; 0x7ce
    2b42:	f3af 8000 	nop.w
    2b46:	f1b9 0f00 	cmp.w	r9, #0
    2b4a:	d011      	beq.n	2b70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2b4c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2b50:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2b54:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2b58:	2820      	cmp	r0, #32
    2b5a:	d009      	beq.n	2b70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2b5c:	b124      	cbz	r4, 2b68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    2b5e:	2100      	movs	r1, #0
    2b60:	f240 70d5 	movw	r0, #2005	; 0x7d5
    2b64:	f3af 8000 	nop.w
    2b68:	4822      	ldr	r0, [pc, #136]	; (2bf4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    2b6a:	7840      	ldrb	r0, [r0, #1]
    2b6c:	f001 fec8 	bl	4900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2b70:	b124      	cbz	r4, 2b7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2b72:	2100      	movs	r1, #0
    2b74:	f240 70da 	movw	r0, #2010	; 0x7da
    2b78:	f3af 8000 	nop.w
    2b7c:	b00d      	add	sp, #52	; 0x34
    2b7e:	4648      	mov	r0, r9
    2b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b84:	e7ff      	b.n	2b86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    2b86:	b124      	cbz	r4, 2b92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    2b88:	2100      	movs	r1, #0
    2b8a:	f240 70a4 	movw	r0, #1956	; 0x7a4
    2b8e:	f3af 8000 	nop.w
    2b92:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    2b96:	4651      	mov	r1, sl
    2b98:	2004      	movs	r0, #4
    2b9a:	f7ff fac7 	bl	212c <CONFIG_MAIN_STACK_SIZE+0x12c>
    2b9e:	f04f 0901 	mov.w	r9, #1
    2ba2:	e7c1      	b.n	2b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    2ba4:	2c00      	cmp	r4, #0
    2ba6:	f43f aea2 	beq.w	28ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2baa:	2100      	movs	r1, #0
    2bac:	f240 70af 	movw	r0, #1967	; 0x7af
    2bb0:	f3af 8000 	nop.w
    2bb4:	e69b      	b.n	28ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2bb6:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    2bba:	2001      	movs	r0, #1
    2bbc:	ea20 0101 	bic.w	r1, r0, r1
    2bc0:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    2bc4:	e7ac      	b.n	2b20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    2bc6:	4807      	ldr	r0, [pc, #28]	; (2be4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    2bc8:	2800      	cmp	r0, #0
    2bca:	bf18      	it	ne
    2bcc:	f3af 8000 	nopne.w
    2bd0:	b662      	cpsie	i
    2bd2:	e7b2      	b.n	2b3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    2bd4:	e000ed04 	.word	0xe000ed04
    2bd8:	20000d24 	.word	0x20000d24
    2bdc:	00000000 	.word	0x00000000
    2be0:	200009a4 	.word	0x200009a4
    2be4:	00000000 	.word	0x00000000
    2be8:	20000ca4 	.word	0x20000ca4
    2bec:	003fffff 	.word	0x003fffff
    2bf0:	00000000 	.word	0x00000000
    2bf4:	20000010 	.word	0x20000010

00002bf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2bf8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bfc:	48a5      	ldr	r0, [pc, #660]	; (2e94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    2bfe:	b08c      	sub	sp, #48	; 0x30
    2c00:	6800      	ldr	r0, [r0, #0]
    2c02:	05c0      	lsls	r0, r0, #23
    2c04:	0dc0      	lsrs	r0, r0, #23
    2c06:	d011      	beq.n	2c2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    2c08:	3810      	subs	r0, #16
    2c0a:	b240      	sxtb	r0, r0
    2c0c:	2800      	cmp	r0, #0
    2c0e:	bfb8      	it	lt
    2c10:	f000 000f 	andlt.w	r0, r0, #15
    2c14:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2c18:	bfac      	ite	ge
    2c1a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2c1e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2c22:	0940      	lsrs	r0, r0, #5
    2c24:	bf08      	it	eq
    2c26:	f04f 0901 	moveq.w	r9, #1
    2c2a:	d001      	beq.n	2c30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    2c2c:	f04f 0900 	mov.w	r9, #0
    2c30:	980c      	ldr	r0, [sp, #48]	; 0x30
    2c32:	7800      	ldrb	r0, [r0, #0]
    2c34:	2800      	cmp	r0, #0
    2c36:	f04f 0000 	mov.w	r0, #0
    2c3a:	bf1c      	itt	ne
    2c3c:	b00d      	addne	sp, #52	; 0x34
    2c3e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c42:	f8df a254 	ldr.w	sl, [pc, #596]	; 2e98 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>
    2c46:	4d95      	ldr	r5, [pc, #596]	; (2e9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    2c48:	4c95      	ldr	r4, [pc, #596]	; (2ea0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2c4a:	f04f 0b00 	mov.w	fp, #0
    2c4e:	900b      	str	r0, [sp, #44]	; 0x2c
    2c50:	b125      	cbz	r5, 2c5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    2c52:	2100      	movs	r1, #0
    2c54:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    2c58:	f3af 8000 	nop.w
    2c5c:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    2c60:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    2c64:	f04f 0800 	mov.w	r8, #0
    2c68:	b125      	cbz	r5, 2c74 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    2c6a:	2100      	movs	r1, #0
    2c6c:	f240 605d 	movw	r0, #1629	; 0x65d
    2c70:	f3af 8000 	nop.w
    2c74:	f1b9 0f00 	cmp.w	r9, #0
    2c78:	d11d      	bne.n	2cb6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2c7a:	4637      	mov	r7, r6
    2c7c:	2001      	movs	r0, #1
    2c7e:	ea20 0607 	bic.w	r6, r0, r7
    2c82:	4888      	ldr	r0, [pc, #544]	; (2ea4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2c84:	2240      	movs	r2, #64	; 0x40
    2c86:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2c8a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2c8e:	f00a fc4b 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2c92:	b125      	cbz	r5, 2c9e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    2c94:	2100      	movs	r1, #0
    2c96:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2c9a:	f3af 8000 	nop.w
    2c9e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    2ca2:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    2ca6:	6a09      	ldr	r1, [r1, #32]
    2ca8:	6201      	str	r1, [r0, #32]
    2caa:	b125      	cbz	r5, 2cb6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2cac:	2100      	movs	r1, #0
    2cae:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2cb2:	f3af 8000 	nop.w
    2cb6:	b125      	cbz	r5, 2cc2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    2cb8:	2100      	movs	r1, #0
    2cba:	f240 6065 	movw	r0, #1637	; 0x665
    2cbe:	f3af 8000 	nop.w
    2cc2:	f000 fe95 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2cc6:	4607      	mov	r7, r0
    2cc8:	4633      	mov	r3, r6
    2cca:	466a      	mov	r2, sp
    2ccc:	990c      	ldr	r1, [sp, #48]	; 0x30
    2cce:	f7ff f887 	bl	1de0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    2cd2:	b125      	cbz	r5, 2cde <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    2cd4:	2100      	movs	r1, #0
    2cd6:	f240 606b 	movw	r0, #1643	; 0x66b
    2cda:	f3af 8000 	nop.w
    2cde:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2ce2:	2820      	cmp	r0, #32
    2ce4:	d014      	beq.n	2d10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    2ce6:	6920      	ldr	r0, [r4, #16]
    2ce8:	9900      	ldr	r1, [sp, #0]
    2cea:	1a09      	subs	r1, r1, r0
    2cec:	0209      	lsls	r1, r1, #8
    2cee:	17ca      	asrs	r2, r1, #31
    2cf0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2cf4:	1209      	asrs	r1, r1, #8
    2cf6:	d50b      	bpl.n	2d10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    2cf8:	e9dd 2100 	ldrd	r2, r1, [sp]
    2cfc:	1a89      	subs	r1, r1, r2
    2cfe:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2d02:	4408      	add	r0, r1
    2d04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d08:	e9cd 2000 	strd	r2, r0, [sp]
    2d0c:	f04f 0801 	mov.w	r8, #1
    2d10:	b14d      	cbz	r5, 2d26 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    2d12:	2100      	movs	r1, #0
    2d14:	f240 6075 	movw	r0, #1653	; 0x675
    2d18:	f3af 8000 	nop.w
    2d1c:	2100      	movs	r1, #0
    2d1e:	f240 607b 	movw	r0, #1659	; 0x67b
    2d22:	f3af 8000 	nop.w
    2d26:	9800      	ldr	r0, [sp, #0]
    2d28:	9901      	ldr	r1, [sp, #4]
    2d2a:	1bc0      	subs	r0, r0, r7
    2d2c:	1bc9      	subs	r1, r1, r7
    2d2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2d36:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2d3a:	d205      	bcs.n	2d48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2d3c:	458a      	cmp	sl, r1
    2d3e:	d303      	bcc.n	2d48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2d40:	f1b9 0f00 	cmp.w	r9, #0
    2d44:	d10c      	bne.n	2d60 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    2d46:	e003      	b.n	2d50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    2d48:	f1b9 0f00 	cmp.w	r9, #0
    2d4c:	d038      	beq.n	2dc0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    2d4e:	e094      	b.n	2e7a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2d50:	4633      	mov	r3, r6
    2d52:	463a      	mov	r2, r7
    2d54:	4669      	mov	r1, sp
    2d56:	4854      	ldr	r0, [pc, #336]	; (2ea8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2d58:	f7fe fbb6 	bl	14c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    2d5c:	ea48 0800 	orr.w	r8, r8, r0
    2d60:	f1b8 0f00 	cmp.w	r8, #0
    2d64:	d022      	beq.n	2dac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    2d66:	9800      	ldr	r0, [sp, #0]
    2d68:	f00a fa70 	bl	d24c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2d6c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2d70:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2d74:	4b4d      	ldr	r3, [pc, #308]	; (2eac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2d76:	4411      	add	r1, r2
    2d78:	1c49      	adds	r1, r1, #1
    2d7a:	1842      	adds	r2, r0, r1
    2d7c:	4298      	cmp	r0, r3
    2d7e:	d841      	bhi.n	2e04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    2d80:	4849      	ldr	r0, [pc, #292]	; (2ea8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2d82:	4281      	cmp	r1, r0
    2d84:	dc5a      	bgt.n	2e3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    2d86:	4240      	negs	r0, r0
    2d88:	4281      	cmp	r1, r0
    2d8a:	db5f      	blt.n	2e4c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    2d8c:	1c58      	adds	r0, r3, #1
    2d8e:	4290      	cmp	r0, r2
    2d90:	bfdc      	itt	le
    2d92:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2d96:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2d9a:	dd05      	ble.n	2da8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    2d9c:	2a00      	cmp	r2, #0
    2d9e:	bfbc      	itt	lt
    2da0:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2da4:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2da8:	980c      	ldr	r0, [sp, #48]	; 0x30
    2daa:	60c2      	str	r2, [r0, #12]
    2dac:	2001      	movs	r0, #1
    2dae:	900b      	str	r0, [sp, #44]	; 0x2c
    2db0:	2d00      	cmp	r5, #0
    2db2:	d062      	beq.n	2e7a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2db4:	2100      	movs	r1, #0
    2db6:	f240 608e 	movw	r0, #1678	; 0x68e
    2dba:	f3af 8000 	nop.w
    2dbe:	e05c      	b.n	2e7a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2dc0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2dc4:	aa08      	add	r2, sp, #32
    2dc6:	a907      	add	r1, sp, #28
    2dc8:	f000 fcbc 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2dcc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2dd0:	2820      	cmp	r0, #32
    2dd2:	d01c      	beq.n	2e0e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    2dd4:	6920      	ldr	r0, [r4, #16]
    2dd6:	1d40      	adds	r0, r0, #5
    2dd8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ddc:	e9dd 2100 	ldrd	r2, r1, [sp]
    2de0:	1a89      	subs	r1, r1, r2
    2de2:	4401      	add	r1, r0
    2de4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2de8:	e9cd 0100 	strd	r0, r1, [sp]
    2dec:	f00a fa2e 	bl	d24c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2df0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2df4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2df8:	4b2c      	ldr	r3, [pc, #176]	; (2eac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2dfa:	4411      	add	r1, r2
    2dfc:	1c4a      	adds	r2, r1, #1
    2dfe:	1881      	adds	r1, r0, r2
    2e00:	4298      	cmp	r0, r3
    2e02:	d918      	bls.n	2e36 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    2e04:	f240 6109 	movw	r1, #1545	; 0x609
    2e08:	2070      	movs	r0, #112	; 0x70
    2e0a:	f001 fca9 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e0e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2e12:	f107 0609 	add.w	r6, r7, #9
    2e16:	b120      	cbz	r0, 2e22 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    2e18:	f001 fc3e 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2e1c:	2800      	cmp	r0, #0
    2e1e:	bf08      	it	eq
    2e20:	3632      	addeq	r6, #50	; 0x32
    2e22:	4823      	ldr	r0, [pc, #140]	; (2eb0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    2e24:	7841      	ldrb	r1, [r0, #1]
    2e26:	9807      	ldr	r0, [sp, #28]
    2e28:	4281      	cmp	r1, r0
    2e2a:	bf84      	itt	hi
    2e2c:	1a08      	subhi	r0, r1, r0
    2e2e:	4406      	addhi	r6, r0
    2e30:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2e34:	e7d2      	b.n	2ddc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    2e36:	481c      	ldr	r0, [pc, #112]	; (2ea8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2e38:	4282      	cmp	r2, r0
    2e3a:	dd04      	ble.n	2e46 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    2e3c:	f240 610a 	movw	r1, #1546	; 0x60a
    2e40:	2070      	movs	r0, #112	; 0x70
    2e42:	f001 fc8d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e46:	481b      	ldr	r0, [pc, #108]	; (2eb4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2bc>)
    2e48:	4282      	cmp	r2, r0
    2e4a:	da04      	bge.n	2e56 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    2e4c:	f240 610b 	movw	r1, #1547	; 0x60b
    2e50:	2070      	movs	r0, #112	; 0x70
    2e52:	f001 fc85 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e56:	4818      	ldr	r0, [pc, #96]	; (2eb8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>)
    2e58:	4288      	cmp	r0, r1
    2e5a:	bfdc      	itt	le
    2e5c:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2e60:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2e64:	dd05      	ble.n	2e72 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    2e66:	2900      	cmp	r1, #0
    2e68:	bfbc      	itt	lt
    2e6a:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2e6e:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2e72:	980c      	ldr	r0, [sp, #48]	; 0x30
    2e74:	60c1      	str	r1, [r0, #12]
    2e76:	2001      	movs	r0, #1
    2e78:	900b      	str	r0, [sp, #44]	; 0x2c
    2e7a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2e7e:	f88d 0010 	strb.w	r0, [sp, #16]
    2e82:	f89d 0010 	ldrb.w	r0, [sp, #16]
    2e86:	2800      	cmp	r0, #0
    2e88:	f47f aee2 	bne.w	2c50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    2e8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2e8e:	b00d      	add	sp, #52	; 0x34
    2e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e94:	e000ed04 	.word	0xe000ed04
    2e98:	003fffff 	.word	0x003fffff
    2e9c:	00000000 	.word	0x00000000
    2ea0:	20000d24 	.word	0x20000d24
    2ea4:	20000ca4 	.word	0x20000ca4
    2ea8:	07a12000 	.word	0x07a12000
    2eac:	1e847fff 	.word	0x1e847fff
    2eb0:	20000012 	.word	0x20000012
    2eb4:	f85ee000 	.word	0xf85ee000
    2eb8:	1e848000 	.word	0x1e848000

00002ebc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2ebc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ec0:	4d88      	ldr	r5, [pc, #544]	; (30e4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    2ec2:	b08c      	sub	sp, #48	; 0x30
    2ec4:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2ec8:	2000      	movs	r0, #0
    2eca:	9009      	str	r0, [sp, #36]	; 0x24
    2ecc:	2001      	movs	r0, #1
    2ece:	4c86      	ldr	r4, [pc, #536]	; (30e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    2ed0:	f04f 0900 	mov.w	r9, #0
    2ed4:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    2ed8:	4680      	mov	r8, r0
    2eda:	9008      	str	r0, [sp, #32]
    2edc:	b124      	cbz	r4, 2ee8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    2ede:	2100      	movs	r1, #0
    2ee0:	f240 70e9 	movw	r0, #2025	; 0x7e9
    2ee4:	f3af 8000 	nop.w
    2ee8:	9808      	ldr	r0, [sp, #32]
    2eea:	2800      	cmp	r0, #0
    2eec:	d037      	beq.n	2f5e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    2eee:	bf00      	nop
    2ef0:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2ef4:	b124      	cbz	r4, 2f00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    2ef6:	2100      	movs	r1, #0
    2ef8:	f240 70ee 	movw	r0, #2030	; 0x7ee
    2efc:	f3af 8000 	nop.w
    2f00:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    2f04:	2240      	movs	r2, #64	; 0x40
    2f06:	ea28 060a 	bic.w	r6, r8, sl
    2f0a:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    2f0e:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    2f12:	4683      	mov	fp, r0
    2f14:	f00a fb08 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2f18:	b124      	cbz	r4, 2f24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    2f1a:	2100      	movs	r1, #0
    2f1c:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2f20:	f3af 8000 	nop.w
    2f24:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2f28:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    2f2c:	9000      	str	r0, [sp, #0]
    2f2e:	6a09      	ldr	r1, [r1, #32]
    2f30:	6201      	str	r1, [r0, #32]
    2f32:	b124      	cbz	r4, 2f3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    2f34:	2100      	movs	r1, #0
    2f36:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2f3a:	f3af 8000 	nop.w
    2f3e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2f42:	f88d 0008 	strb.w	r0, [sp, #8]
    2f46:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2f4a:	b178      	cbz	r0, 2f6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    2f4c:	2c00      	cmp	r4, #0
    2f4e:	bf1c      	itt	ne
    2f50:	2100      	movne	r1, #0
    2f52:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    2f56:	d0c1      	beq.n	2edc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2f58:	f3af 8000 	nop.w
    2f5c:	e7be      	b.n	2edc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2f5e:	4863      	ldr	r0, [pc, #396]	; (30ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2f60:	2800      	cmp	r0, #0
    2f62:	bf18      	it	ne
    2f64:	f3af 8000 	nopne.w
    2f68:	b662      	cpsie	i
    2f6a:	e7c1      	b.n	2ef0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    2f6c:	b124      	cbz	r4, 2f78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    2f6e:	2100      	movs	r1, #0
    2f70:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    2f74:	f3af 8000 	nop.w
    2f78:	980c      	ldr	r0, [sp, #48]	; 0x30
    2f7a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2f7e:	2803      	cmp	r0, #3
    2f80:	d172      	bne.n	3068 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    2f82:	f8dd a000 	ldr.w	sl, [sp]
    2f86:	f8cd a018 	str.w	sl, [sp, #24]
    2f8a:	990c      	ldr	r1, [sp, #48]	; 0x30
    2f8c:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2f90:	4288      	cmp	r0, r1
    2f92:	bf14      	ite	ne
    2f94:	f04f 0b00 	movne.w	fp, #0
    2f98:	f04f 0b01 	moveq.w	fp, #1
    2f9c:	f10a 0c20 	add.w	ip, sl, #32
    2fa0:	4686      	mov	lr, r0
    2fa2:	2220      	movs	r2, #32
    2fa4:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    2fa8:	e003      	b.n	2fb2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    2faa:	4602      	mov	r2, r0
    2fac:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2fb0:	7840      	ldrb	r0, [r0, #1]
    2fb2:	4288      	cmp	r0, r1
    2fb4:	d002      	beq.n	2fbc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    2fb6:	2820      	cmp	r0, #32
    2fb8:	d00a      	beq.n	2fd0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    2fba:	e7f6      	b.n	2faa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    2fbc:	2820      	cmp	r0, #32
    2fbe:	d007      	beq.n	2fd0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    2fc0:	4586      	cmp	lr, r0
    2fc2:	d107      	bne.n	2fd4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    2fc4:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    2fc8:	7840      	ldrb	r0, [r0, #1]
    2fca:	f88c 0000 	strb.w	r0, [ip]
    2fce:	e007      	b.n	2fe0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    2fd0:	4648      	mov	r0, r9
    2fd2:	e00c      	b.n	2fee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    2fd4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2fd8:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2fdc:	7840      	ldrb	r0, [r0, #1]
    2fde:	7048      	strb	r0, [r1, #1]
    2fe0:	b124      	cbz	r4, 2fec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    2fe2:	2100      	movs	r1, #0
    2fe4:	f240 5037 	movw	r0, #1335	; 0x537
    2fe8:	f3af 8000 	nop.w
    2fec:	4640      	mov	r0, r8
    2fee:	ea10 0f0b 	tst.w	r0, fp
    2ff2:	bf18      	it	ne
    2ff4:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    2ff8:	2800      	cmp	r0, #0
    2ffa:	d052      	beq.n	30a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2ffc:	b124      	cbz	r4, 3008 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    2ffe:	2100      	movs	r1, #0
    3000:	f240 70fd 	movw	r0, #2045	; 0x7fd
    3004:	f3af 8000 	nop.w
    3008:	4632      	mov	r2, r6
    300a:	2001      	movs	r0, #1
    300c:	990c      	ldr	r1, [sp, #48]	; 0x30
    300e:	f7ff f88d 	bl	212c <CONFIG_MAIN_STACK_SIZE+0x12c>
    3012:	9806      	ldr	r0, [sp, #24]
    3014:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    3018:	f88d 0008 	strb.w	r0, [sp, #8]
    301c:	f89d a008 	ldrb.w	sl, [sp, #8]
    3020:	b124      	cbz	r4, 302c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    3022:	2100      	movs	r1, #0
    3024:	f640 0008 	movw	r0, #2056	; 0x808
    3028:	f3af 8000 	nop.w
    302c:	4830      	ldr	r0, [pc, #192]	; (30f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    302e:	2800      	cmp	r0, #0
    3030:	bf18      	it	ne
    3032:	f3af 8000 	nopne.w
    3036:	f3ef 8010 	mrs	r0, PRIMASK
    303a:	b672      	cpsid	i
    303c:	9008      	str	r0, [sp, #32]
    303e:	b124      	cbz	r4, 304a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    3040:	2100      	movs	r1, #0
    3042:	f640 000d 	movw	r0, #2061	; 0x80d
    3046:	f3af 8000 	nop.w
    304a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    304e:	f88d 0008 	strb.w	r0, [sp, #8]
    3052:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3056:	b140      	cbz	r0, 306a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    3058:	2c00      	cmp	r4, #0
    305a:	bf1c      	itt	ne
    305c:	2100      	movne	r1, #0
    305e:	f640 0011 	movwne	r0, #2065	; 0x811
    3062:	f43f af3b 	beq.w	2edc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    3066:	e777      	b.n	2f58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    3068:	e01b      	b.n	30a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    306a:	f1ba 0f00 	cmp.w	sl, #0
    306e:	d008      	beq.n	3082 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    3070:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    3074:	2820      	cmp	r0, #32
    3076:	d104      	bne.n	3082 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    3078:	4631      	mov	r1, r6
    307a:	2002      	movs	r0, #2
    307c:	f7ff f886 	bl	218c <CONFIG_MAIN_STACK_SIZE+0x18c>
    3080:	b308      	cbz	r0, 30c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    3082:	b124      	cbz	r4, 308e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    3084:	2100      	movs	r1, #0
    3086:	f640 0025 	movw	r0, #2085	; 0x825
    308a:	f3af 8000 	nop.w
    308e:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    3092:	ea28 0000 	bic.w	r0, r8, r0
    3096:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    309a:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    309e:	2001      	movs	r0, #1
    30a0:	9009      	str	r0, [sp, #36]	; 0x24
    30a2:	b124      	cbz	r4, 30ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    30a4:	2100      	movs	r1, #0
    30a6:	f640 002e 	movw	r0, #2094	; 0x82e
    30aa:	f3af 8000 	nop.w
    30ae:	9808      	ldr	r0, [sp, #32]
    30b0:	b188      	cbz	r0, 30d6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    30b2:	b124      	cbz	r4, 30be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    30b4:	2100      	movs	r1, #0
    30b6:	f640 0032 	movw	r0, #2098	; 0x832
    30ba:	f3af 8000 	nop.w
    30be:	9809      	ldr	r0, [sp, #36]	; 0x24
    30c0:	b00d      	add	sp, #52	; 0x34
    30c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30c6:	2c00      	cmp	r4, #0
    30c8:	d0f1      	beq.n	30ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    30ca:	2100      	movs	r1, #0
    30cc:	f44f 6002 	mov.w	r0, #2080	; 0x820
    30d0:	f3af 8000 	nop.w
    30d4:	e7e6      	b.n	30a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    30d6:	4805      	ldr	r0, [pc, #20]	; (30ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    30d8:	2800      	cmp	r0, #0
    30da:	bf18      	it	ne
    30dc:	f3af 8000 	nopne.w
    30e0:	b662      	cpsie	i
    30e2:	e7e6      	b.n	30b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    30e4:	20000d24 	.word	0x20000d24
	...

000030f4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    30f4:	b510      	push	{r4, lr}
    30f6:	2820      	cmp	r0, #32
    30f8:	d211      	bcs.n	311e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    30fa:	490e      	ldr	r1, [pc, #56]	; (3134 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    30fc:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    3100:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    3104:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    3108:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    310c:	b13b      	cbz	r3, 311e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    310e:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    3112:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    3116:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    311a:	2a01      	cmp	r2, #1
    311c:	d001      	beq.n	3122 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    311e:	2000      	movs	r0, #0
    3120:	bd10      	pop	{r4, pc}
    3122:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    3126:	4601      	mov	r1, r0
    3128:	2000      	movs	r0, #0
    312a:	f7fe ffff 	bl	212c <CONFIG_MAIN_STACK_SIZE+0x12c>
    312e:	2001      	movs	r0, #1
    3130:	bd10      	pop	{r4, pc}
    3132:	0000      	.short	0x0000
    3134:	20000d24 	.word	0x20000d24

00003138 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    3138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    313c:	4e80      	ldr	r6, [pc, #512]	; (3340 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    313e:	4680      	mov	r8, r0
    3140:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    3144:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    3148:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    314c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3150:	2800      	cmp	r0, #0
    3152:	d068      	beq.n	3226 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    3154:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    3158:	4d7a      	ldr	r5, [pc, #488]	; (3344 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    315a:	b125      	cbz	r5, 3166 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    315c:	2100      	movs	r1, #0
    315e:	f640 30c1 	movw	r0, #3009	; 0xbc1
    3162:	f3af 8000 	nop.w
    3166:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    316a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    316e:	2801      	cmp	r0, #1
    3170:	d018      	beq.n	31a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    3172:	b2c0      	uxtb	r0, r0
    3174:	2804      	cmp	r0, #4
    3176:	bf1c      	itt	ne
    3178:	2805      	cmpne	r0, #5
    317a:	2806      	cmpne	r0, #6
    317c:	d058      	beq.n	3230 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    317e:	b12d      	cbz	r5, 318c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    3180:	f04f 0100 	mov.w	r1, #0
    3184:	f640 30cd 	movw	r0, #3021	; 0xbcd
    3188:	f3af 8000 	nop.w
    318c:	f001 fc0e 	bl	49ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3190:	b125      	cbz	r5, 319c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    3192:	2100      	movs	r1, #0
    3194:	f640 30d1 	movw	r0, #3025	; 0xbd1
    3198:	f3af 8000 	nop.w
    319c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    31a0:	2801      	cmp	r0, #1
    31a2:	d1e6      	bne.n	3172 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    31a4:	2401      	movs	r4, #1
    31a6:	b125      	cbz	r5, 31b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    31a8:	2100      	movs	r1, #0
    31aa:	f640 30d8 	movw	r0, #3032	; 0xbd8
    31ae:	f3af 8000 	nop.w
    31b2:	2c00      	cmp	r4, #0
    31b4:	d042      	beq.n	323c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    31b6:	2000      	movs	r0, #0
    31b8:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    31bc:	b125      	cbz	r5, 31c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    31be:	2100      	movs	r1, #0
    31c0:	f640 30dd 	movw	r0, #3037	; 0xbdd
    31c4:	f3af 8000 	nop.w
    31c8:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    31cc:	2001      	movs	r0, #1
    31ce:	ea20 090b 	bic.w	r9, r0, fp
    31d2:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    31d6:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    31da:	2240      	movs	r2, #64	; 0x40
    31dc:	f00a f9a4 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    31e0:	b125      	cbz	r5, 31ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    31e2:	2100      	movs	r1, #0
    31e4:	f240 50cd 	movw	r0, #1485	; 0x5cd
    31e8:	f3af 8000 	nop.w
    31ec:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    31f0:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    31f4:	6a00      	ldr	r0, [r0, #32]
    31f6:	f8ca 0020 	str.w	r0, [sl, #32]
    31fa:	b125      	cbz	r5, 3206 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    31fc:	2100      	movs	r1, #0
    31fe:	f240 50d1 	movw	r0, #1489	; 0x5d1
    3202:	f3af 8000 	nop.w
    3206:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    320a:	f88d 0000 	strb.w	r0, [sp]
    320e:	f89d 0000 	ldrb.w	r0, [sp]
    3212:	b1d0      	cbz	r0, 324a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    3214:	2d00      	cmp	r5, #0
    3216:	bf1c      	itt	ne
    3218:	2100      	movne	r1, #0
    321a:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    321e:	d0c2      	beq.n	31a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3220:	f3af 8000 	nop.w
    3224:	e7bf      	b.n	31a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3226:	f640 31b8 	movw	r1, #3000	; 0xbb8
    322a:	2070      	movs	r0, #112	; 0x70
    322c:	f001 fa98 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3230:	464a      	mov	r2, r9
    3232:	4641      	mov	r1, r8
    3234:	2001      	movs	r0, #1
    3236:	f7fe ff79 	bl	212c <CONFIG_MAIN_STACK_SIZE+0x12c>
    323a:	e7a9      	b.n	3190 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    323c:	4842      	ldr	r0, [pc, #264]	; (3348 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    323e:	2800      	cmp	r0, #0
    3240:	bf18      	it	ne
    3242:	f3af 8000 	nopne.w
    3246:	b662      	cpsie	i
    3248:	e7b5      	b.n	31b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    324a:	b125      	cbz	r5, 3256 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    324c:	2100      	movs	r1, #0
    324e:	f640 30e7 	movw	r0, #3047	; 0xbe7
    3252:	f3af 8000 	nop.w
    3256:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    325a:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    325e:	4614      	mov	r4, r2
    3260:	f04f 0b20 	mov.w	fp, #32
    3264:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    3268:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    326c:	e003      	b.n	3276 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    326e:	46a3      	mov	fp, r4
    3270:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    3274:	785c      	ldrb	r4, [r3, #1]
    3276:	4544      	cmp	r4, r8
    3278:	d002      	beq.n	3280 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    327a:	2c20      	cmp	r4, #32
    327c:	d02b      	beq.n	32d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    327e:	e7f6      	b.n	326e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    3280:	2c20      	cmp	r4, #32
    3282:	d028      	beq.n	32d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    3284:	42a2      	cmp	r2, r4
    3286:	d104      	bne.n	3292 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    3288:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    328c:	7840      	ldrb	r0, [r0, #1]
    328e:	7008      	strb	r0, [r1, #0]
    3290:	e005      	b.n	329e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    3292:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    3296:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    329a:	7849      	ldrb	r1, [r1, #1]
    329c:	7041      	strb	r1, [r0, #1]
    329e:	f1ba 0f00 	cmp.w	sl, #0
    32a2:	d011      	beq.n	32c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    32a4:	b125      	cbz	r5, 32b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    32a6:	2100      	movs	r1, #0
    32a8:	f240 502f 	movw	r0, #1327	; 0x52f
    32ac:	f3af 8000 	nop.w
    32b0:	f89a 0000 	ldrb.w	r0, [sl]
    32b4:	42a0      	cmp	r0, r4
    32b6:	d107      	bne.n	32c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    32b8:	b125      	cbz	r5, 32c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    32ba:	2100      	movs	r1, #0
    32bc:	f240 5032 	movw	r0, #1330	; 0x532
    32c0:	f3af 8000 	nop.w
    32c4:	f88a b000 	strb.w	fp, [sl]
    32c8:	b15d      	cbz	r5, 32e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    32ca:	2100      	movs	r1, #0
    32cc:	f240 5037 	movw	r0, #1335	; 0x537
    32d0:	f3af 8000 	nop.w
    32d4:	e000      	b.n	32d8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    32d6:	b125      	cbz	r5, 32e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    32d8:	2100      	movs	r1, #0
    32da:	f640 30eb 	movw	r0, #3051	; 0xbeb
    32de:	f3af 8000 	nop.w
    32e2:	481a      	ldr	r0, [pc, #104]	; (334c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    32e4:	2800      	cmp	r0, #0
    32e6:	bf18      	it	ne
    32e8:	f3af 8000 	nopne.w
    32ec:	f3ef 8410 	mrs	r4, PRIMASK
    32f0:	b672      	cpsid	i
    32f2:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    32f6:	f88d 0000 	strb.w	r0, [sp]
    32fa:	f89d 0000 	ldrb.w	r0, [sp]
    32fe:	b138      	cbz	r0, 3310 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    3300:	2d00      	cmp	r5, #0
    3302:	bf1c      	itt	ne
    3304:	2100      	movne	r1, #0
    3306:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    330a:	f43f af4c 	beq.w	31a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    330e:	e787      	b.n	3220 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    3310:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    3314:	2001      	movs	r0, #1
    3316:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    331a:	b154      	cbz	r4, 3332 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    331c:	2d00      	cmp	r5, #0
    331e:	bf08      	it	eq
    3320:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3324:	2100      	movs	r1, #0
    3326:	f640 30fe 	movw	r0, #3070	; 0xbfe
    332a:	f3af 8000 	nop.w
    332e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3332:	4805      	ldr	r0, [pc, #20]	; (3348 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    3334:	2800      	cmp	r0, #0
    3336:	bf18      	it	ne
    3338:	f3af 8000 	nopne.w
    333c:	b662      	cpsie	i
    333e:	e7ed      	b.n	331c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    3340:	20000d24 	.word	0x20000d24
	...

00003350 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    3350:	b570      	push	{r4, r5, r6, lr}
    3352:	460d      	mov	r5, r1
    3354:	4606      	mov	r6, r0
    3356:	f001 f98d 	bl	4674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    335a:	480f      	ldr	r0, [pc, #60]	; (3398 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    335c:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    3360:	2400      	movs	r4, #0
    3362:	3880      	subs	r0, #128	; 0x80
    3364:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    3368:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    336c:	b129      	cbz	r1, 337a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    336e:	1c61      	adds	r1, r4, #1
    3370:	b2cc      	uxtb	r4, r1
    3372:	2c20      	cmp	r4, #32
    3374:	d3f8      	bcc.n	3368 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    3376:	2020      	movs	r0, #32
    3378:	bd70      	pop	{r4, r5, r6, pc}
    337a:	4808      	ldr	r0, [pc, #32]	; (339c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    337c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    3380:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    3384:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    3388:	4621      	mov	r1, r4
    338a:	6045      	str	r5, [r0, #4]
    338c:	2001      	movs	r0, #1
    338e:	f7fe fecd 	bl	212c <CONFIG_MAIN_STACK_SIZE+0x12c>
    3392:	4620      	mov	r0, r4
    3394:	bd70      	pop	{r4, r5, r6, pc}
    3396:	0000      	.short	0x0000
    3398:	20000d24 	.word	0x20000d24
    339c:	200009a4 	.word	0x200009a4

000033a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    33a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33a4:	b083      	sub	sp, #12
    33a6:	f000 fb23 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    33aa:	4605      	mov	r5, r0
    33ac:	f000 fdd6 	bl	3f5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    33b0:	4c67      	ldr	r4, [pc, #412]	; (3550 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    33b2:	68a0      	ldr	r0, [r4, #8]
    33b4:	f1b0 3fff 	cmp.w	r0, #4294967295
    33b8:	bf1c      	itt	ne
    33ba:	f04f 30ff 	movne.w	r0, #4294967295
    33be:	60a0      	strne	r0, [r4, #8]
    33c0:	7fa0      	ldrb	r0, [r4, #30]
    33c2:	f8df b190 	ldr.w	fp, [pc, #400]	; 3554 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    33c6:	b9a8      	cbnz	r0, 33f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    33c8:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    33cc:	1a08      	subs	r0, r1, r0
    33ce:	0200      	lsls	r0, r0, #8
    33d0:	17c1      	asrs	r1, r0, #31
    33d2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    33d6:	1200      	asrs	r0, r0, #8
    33d8:	f44f 710c 	mov.w	r1, #560	; 0x230
    33dc:	f009 ff63 	bl	d2a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    33e0:	6921      	ldr	r1, [r4, #16]
    33e2:	4408      	add	r0, r1
    33e4:	1a28      	subs	r0, r5, r0
    33e6:	0200      	lsls	r0, r0, #8
    33e8:	17c1      	asrs	r1, r0, #31
    33ea:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    33ee:	1200      	asrs	r0, r0, #8
    33f0:	0fc0      	lsrs	r0, r0, #31
    33f2:	d013      	beq.n	341c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    33f4:	7e60      	ldrb	r0, [r4, #25]
    33f6:	b328      	cbz	r0, 3444 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    33f8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    33fc:	f88d 0000 	strb.w	r0, [sp]
    3400:	f89d 0000 	ldrb.w	r0, [sp]
    3404:	b1f0      	cbz	r0, 3444 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    3406:	f000 fbff 	bl	3c08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    340a:	bf00      	nop
    340c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    3410:	b1f0      	cbz	r0, 3450 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    3412:	f240 4147 	movw	r1, #1095	; 0x447
    3416:	2070      	movs	r0, #112	; 0x70
    3418:	f001 f9a2 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    341c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3420:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    3424:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3428:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    342c:	6840      	ldr	r0, [r0, #4]
    342e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3432:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    3436:	2108      	movs	r1, #8
    3438:	4790      	blx	r2
    343a:	f44f 6186 	mov.w	r1, #1072	; 0x430
    343e:	2070      	movs	r0, #112	; 0x70
    3440:	f001 f98e 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3444:	1ce8      	adds	r0, r5, #3
    3446:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    344a:	f000 fad7 	bl	39fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    344e:	e7dd      	b.n	340c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    3450:	f04f 0a01 	mov.w	sl, #1
    3454:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    3458:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    345c:	2820      	cmp	r0, #32
    345e:	d024      	beq.n	34aa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    3460:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    3464:	2020      	movs	r0, #32
    3466:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    346a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    346e:	2600      	movs	r6, #0
    3470:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    3474:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    3478:	4837      	ldr	r0, [pc, #220]	; (3558 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    347a:	6026      	str	r6, [r4, #0]
    347c:	7800      	ldrb	r0, [r0, #0]
    347e:	2802      	cmp	r0, #2
    3480:	bf16      	itet	ne
    3482:	2803      	cmpne	r0, #3
    3484:	2001      	moveq	r0, #1
    3486:	2000      	movne	r0, #0
    3488:	7720      	strb	r0, [r4, #28]
    348a:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    348e:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    3492:	f899 0020 	ldrb.w	r0, [r9, #32]
    3496:	2820      	cmp	r0, #32
    3498:	d031      	beq.n	34fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    349a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    349e:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    34a2:	7d81      	ldrb	r1, [r0, #22]
    34a4:	2901      	cmp	r1, #1
    34a6:	d005      	beq.n	34b4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    34a8:	e029      	b.n	34fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    34aa:	f240 414a 	movw	r1, #1098	; 0x44a
    34ae:	2070      	movs	r0, #112	; 0x70
    34b0:	f001 f956 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34b4:	46ab      	mov	fp, r5
    34b6:	f100 0508 	add.w	r5, r0, #8
    34ba:	8a40      	ldrh	r0, [r0, #18]
    34bc:	aa01      	add	r2, sp, #4
    34be:	4669      	mov	r1, sp
    34c0:	f000 f940 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    34c4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    34c8:	2820      	cmp	r0, #32
    34ca:	d004      	beq.n	34d6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    34cc:	6920      	ldr	r0, [r4, #16]
    34ce:	1d40      	adds	r0, r0, #5
    34d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    34d4:	e00b      	b.n	34ee <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    34d6:	8968      	ldrh	r0, [r5, #10]
    34d8:	f10b 0b09 	add.w	fp, fp, #9
    34dc:	b128      	cbz	r0, 34ea <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    34de:	f001 f8db 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    34e2:	2800      	cmp	r0, #0
    34e4:	bf08      	it	eq
    34e6:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    34ea:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    34ee:	e9d5 2100 	ldrd	r2, r1, [r5]
    34f2:	1a89      	subs	r1, r1, r2
    34f4:	6028      	str	r0, [r5, #0]
    34f6:	4408      	add	r0, r1
    34f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    34fc:	6068      	str	r0, [r5, #4]
    34fe:	4639      	mov	r1, r7
    3500:	2001      	movs	r0, #1
    3502:	f7fe fe43 	bl	218c <CONFIG_MAIN_STACK_SIZE+0x18c>
    3506:	2800      	cmp	r0, #0
    3508:	d0f9      	beq.n	34fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    350a:	4814      	ldr	r0, [pc, #80]	; (355c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    350c:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    3510:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3514:	2802      	cmp	r0, #2
    3516:	d104      	bne.n	3522 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    3518:	463a      	mov	r2, r7
    351a:	4641      	mov	r1, r8
    351c:	2006      	movs	r0, #6
    351e:	f7fe fe05 	bl	212c <CONFIG_MAIN_STACK_SIZE+0x12c>
    3522:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    3526:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    352a:	2820      	cmp	r0, #32
    352c:	d003      	beq.n	3536 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    352e:	480c      	ldr	r0, [pc, #48]	; (3560 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    3530:	7840      	ldrb	r0, [r0, #1]
    3532:	f001 f9e5 	bl	4900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3536:	7f20      	ldrb	r0, [r4, #28]
    3538:	2800      	cmp	r0, #0
    353a:	bf04      	itt	eq
    353c:	b003      	addeq	sp, #12
    353e:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3542:	f000 fd55 	bl	3ff0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    3546:	7726      	strb	r6, [r4, #28]
    3548:	7766      	strb	r6, [r4, #29]
    354a:	b003      	add	sp, #12
    354c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3550:	20000d24 	.word	0x20000d24
    3554:	200009a4 	.word	0x200009a4
    3558:	20000012 	.word	0x20000012
    355c:	20000ca4 	.word	0x20000ca4
    3560:	20000010 	.word	0x20000010

00003564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3564:	b510      	push	{r4, lr}
    3566:	4c32      	ldr	r4, [pc, #200]	; (3630 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    3568:	b082      	sub	sp, #8
    356a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    356e:	2920      	cmp	r1, #32
    3570:	d008      	beq.n	3584 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    3572:	68a1      	ldr	r1, [r4, #8]
    3574:	f1b1 3fff 	cmp.w	r1, #4294967295
    3578:	d009      	beq.n	358e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    357a:	f640 21e9 	movw	r1, #2793	; 0xae9
    357e:	2070      	movs	r0, #112	; 0x70
    3580:	f001 f8ee 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3584:	f640 21e8 	movw	r1, #2792	; 0xae8
    3588:	2070      	movs	r0, #112	; 0x70
    358a:	f001 f8e9 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    358e:	6862      	ldr	r2, [r4, #4]
    3590:	4601      	mov	r1, r0
    3592:	4b28      	ldr	r3, [pc, #160]	; (3634 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    3594:	1850      	adds	r0, r2, r1
    3596:	429a      	cmp	r2, r3
    3598:	d904      	bls.n	35a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    359a:	f240 6109 	movw	r1, #1545	; 0x609
    359e:	2070      	movs	r0, #112	; 0x70
    35a0:	f001 f8de 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35a4:	4a24      	ldr	r2, [pc, #144]	; (3638 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    35a6:	4291      	cmp	r1, r2
    35a8:	dd04      	ble.n	35b4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    35aa:	f240 610a 	movw	r1, #1546	; 0x60a
    35ae:	2070      	movs	r0, #112	; 0x70
    35b0:	f001 f8d6 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35b4:	4a21      	ldr	r2, [pc, #132]	; (363c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    35b6:	4291      	cmp	r1, r2
    35b8:	da04      	bge.n	35c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    35ba:	f240 610b 	movw	r1, #1547	; 0x60b
    35be:	2070      	movs	r0, #112	; 0x70
    35c0:	f001 f8ce 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35c4:	491e      	ldr	r1, [pc, #120]	; (3640 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    35c6:	4281      	cmp	r1, r0
    35c8:	bfdc      	itt	le
    35ca:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    35ce:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    35d2:	dd05      	ble.n	35e0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    35d4:	2800      	cmp	r0, #0
    35d6:	bfbc      	itt	lt
    35d8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    35dc:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    35e0:	aa01      	add	r2, sp, #4
    35e2:	4669      	mov	r1, sp
    35e4:	f000 f8ae 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    35e8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    35ec:	280f      	cmp	r0, #15
    35ee:	bf8c      	ite	hi
    35f0:	2001      	movhi	r0, #1
    35f2:	2000      	movls	r0, #0
    35f4:	9900      	ldr	r1, [sp, #0]
    35f6:	4408      	add	r0, r1
    35f8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    35fc:	60a1      	str	r1, [r4, #8]
    35fe:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    3602:	f88d 0000 	strb.w	r0, [sp]
    3606:	f89d 0000 	ldrb.w	r0, [sp]
    360a:	2800      	cmp	r0, #0
    360c:	bf04      	itt	eq
    360e:	b002      	addeq	sp, #8
    3610:	bd10      	popeq	{r4, pc}
    3612:	2301      	movs	r3, #1
    3614:	2203      	movs	r2, #3
    3616:	2005      	movs	r0, #5
    3618:	f000 fb70 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    361c:	2800      	cmp	r0, #0
    361e:	bf1c      	itt	ne
    3620:	b002      	addne	sp, #8
    3622:	bd10      	popne	{r4, pc}
    3624:	f640 21f1 	movw	r1, #2801	; 0xaf1
    3628:	2070      	movs	r0, #112	; 0x70
    362a:	f001 f899 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    362e:	0000      	.short	0x0000
    3630:	20000d24 	.word	0x20000d24
    3634:	1e847fff 	.word	0x1e847fff
    3638:	07a12000 	.word	0x07a12000
    363c:	f85ee000 	.word	0xf85ee000
    3640:	1e848000 	.word	0x1e848000

00003644 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3644:	b570      	push	{r4, r5, r6, lr}
    3646:	4c1e      	ldr	r4, [pc, #120]	; (36c0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    3648:	2120      	movs	r1, #32
    364a:	f884 1020 	strb.w	r1, [r4, #32]
    364e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3652:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    3656:	2000      	movs	r0, #0
    3658:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    365c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3660:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    3664:	1e42      	subs	r2, r0, #1
    3666:	60a2      	str	r2, [r4, #8]
    3668:	6020      	str	r0, [r4, #0]
    366a:	77a0      	strb	r0, [r4, #30]
    366c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3670:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    3674:	7720      	strb	r0, [r4, #28]
    3676:	7760      	strb	r0, [r4, #29]
    3678:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    367c:	4911      	ldr	r1, [pc, #68]	; (36c4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    367e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    3682:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    3686:	7008      	strb	r0, [r1, #0]
    3688:	7048      	strb	r0, [r1, #1]
    368a:	8048      	strh	r0, [r1, #2]
    368c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3690:	2210      	movs	r2, #16
    3692:	7088      	strb	r0, [r1, #2]
    3694:	f801 0f04 	strb.w	r0, [r1, #4]!
    3698:	1e52      	subs	r2, r2, #1
    369a:	d1fa      	bne.n	3692 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    369c:	4d0a      	ldr	r5, [pc, #40]	; (36c8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    369e:	2601      	movs	r6, #1
    36a0:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    36a4:	20ff      	movs	r0, #255	; 0xff
    36a6:	7028      	strb	r0, [r5, #0]
    36a8:	4808      	ldr	r0, [pc, #32]	; (36cc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    36aa:	f001 f90b 	bl	48c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    36ae:	7068      	strb	r0, [r5, #1]
    36b0:	f001 f966 	bl	4980 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    36b4:	60a8      	str	r0, [r5, #8]
    36b6:	f000 fcc9 	bl	404c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    36ba:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    36be:	bd70      	pop	{r4, r5, r6, pc}
    36c0:	20000d24 	.word	0x20000d24
    36c4:	20000012 	.word	0x20000012
    36c8:	20000010 	.word	0x20000010
    36cc:	00001fe9 	.word	0x00001fe9

000036d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    36d0:	b570      	push	{r4, r5, r6, lr}
    36d2:	4605      	mov	r5, r0
    36d4:	2001      	movs	r0, #1
    36d6:	fa00 f405 	lsl.w	r4, r0, r5
    36da:	460e      	mov	r6, r1
    36dc:	2a00      	cmp	r2, #0
    36de:	bf08      	it	eq
    36e0:	4808      	ldreq	r0, [pc, #32]	; (3704 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    36e2:	d00c      	beq.n	36fe <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    36e4:	2000      	movs	r0, #0
    36e6:	f000 fc97 	bl	4018 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    36ea:	00e9      	lsls	r1, r5, #3
    36ec:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    36f0:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    36f4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    36f8:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    36fc:	4802      	ldr	r0, [pc, #8]	; (3708 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    36fe:	6004      	str	r4, [r0, #0]
    3700:	bd70      	pop	{r4, r5, r6, pc}
    3702:	0000      	.short	0x0000
    3704:	4001f508 	.word	0x4001f508
    3708:	4001f504 	.word	0x4001f504

0000370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    370c:	0b41      	lsrs	r1, r0, #13
    370e:	f248 6237 	movw	r2, #34359	; 0x8637
    3712:	4351      	muls	r1, r2
    3714:	0c0a      	lsrs	r2, r1, #16
    3716:	4b09      	ldr	r3, [pc, #36]	; (373c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3718:	0251      	lsls	r1, r2, #9
    371a:	fb02 0203 	mla	r2, r2, r3, r0
    371e:	4808      	ldr	r0, [pc, #32]	; (3740 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3720:	4350      	muls	r0, r2
    3722:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    3726:	306e      	adds	r0, #110	; 0x6e
    3728:	0d40      	lsrs	r0, r0, #21
    372a:	425b      	negs	r3, r3
    372c:	fb10 f303 	smulbb	r3, r0, r3
    3730:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    3734:	bf88      	it	hi
    3736:	1c49      	addhi	r1, r1, #1
    3738:	4408      	add	r0, r1
    373a:	4770      	bx	lr
    373c:	ffffc2f7 	.word	0xffffc2f7
    3740:	00010c6f 	.word	0x00010c6f

00003744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    3744:	0b43      	lsrs	r3, r0, #13
    3746:	f248 6c37 	movw	ip, #34359	; 0x8637
    374a:	fb03 f30c 	mul.w	r3, r3, ip
    374e:	b430      	push	{r4, r5}
    3750:	0c1b      	lsrs	r3, r3, #16
    3752:	f8df c044 	ldr.w	ip, [pc, #68]	; 3798 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    3756:	025c      	lsls	r4, r3, #9
    3758:	fb03 030c 	mla	r3, r3, ip, r0
    375c:	480f      	ldr	r0, [pc, #60]	; (379c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    375e:	4358      	muls	r0, r3
    3760:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    3764:	eb04 000c 	add.w	r0, r4, ip
    3768:	f643 5409 	movw	r4, #15625	; 0x3d09
    376c:	fb1c f404 	smulbb	r4, ip, r4
    3770:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    3774:	f643 5508 	movw	r5, #15624	; 0x3d08
    3778:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    377c:	442c      	add	r4, r5
    377e:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    3782:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    3786:	bf84      	itt	hi
    3788:	f04f 0c00 	movhi.w	ip, #0
    378c:	1c40      	addhi	r0, r0, #1
    378e:	6008      	str	r0, [r1, #0]
    3790:	f882 c000 	strb.w	ip, [r2]
    3794:	bc30      	pop	{r4, r5}
    3796:	4770      	bx	lr
    3798:	ffffc2f7 	.word	0xffffc2f7
    379c:	00010c6f 	.word	0x00010c6f

000037a0 <MPSL_IRQ_RTC0_Handler>:
    37a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37a4:	4c38      	ldr	r4, [pc, #224]	; (3888 <MPSL_IRQ_RTC0_Handler+0xe8>)
    37a6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    37aa:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 388c <MPSL_IRQ_RTC0_Handler+0xec>
    37ae:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    37b2:	f44f 6600 	mov.w	r6, #2048	; 0x800
    37b6:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    37ba:	f04f 0500 	mov.w	r5, #0
    37be:	bf1c      	itt	ne
    37c0:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    37c4:	2800      	cmpne	r0, #0
    37c6:	d017      	beq.n	37f8 <MPSL_IRQ_RTC0_Handler+0x58>
    37c8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    37cc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    37d0:	482f      	ldr	r0, [pc, #188]	; (3890 <MPSL_IRQ_RTC0_Handler+0xf0>)
    37d2:	6800      	ldr	r0, [r0, #0]
    37d4:	f8d8 1000 	ldr.w	r1, [r8]
    37d8:	eba0 0001 	sub.w	r0, r0, r1
    37dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    37e0:	2802      	cmp	r0, #2
    37e2:	d302      	bcc.n	37ea <MPSL_IRQ_RTC0_Handler+0x4a>
    37e4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    37e8:	d306      	bcc.n	37f8 <MPSL_IRQ_RTC0_Handler+0x58>
    37ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    37ee:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    37f2:	2004      	movs	r0, #4
    37f4:	f7fe ff4c 	bl	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    37f8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    37fc:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3800:	bf1c      	itt	ne
    3802:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    3806:	2800      	cmpne	r0, #0
    3808:	d017      	beq.n	383a <MPSL_IRQ_RTC0_Handler+0x9a>
    380a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    380e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3812:	4820      	ldr	r0, [pc, #128]	; (3894 <MPSL_IRQ_RTC0_Handler+0xf4>)
    3814:	6800      	ldr	r0, [r0, #0]
    3816:	f8d8 1000 	ldr.w	r1, [r8]
    381a:	eba0 0001 	sub.w	r0, r0, r1
    381e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3822:	2802      	cmp	r0, #2
    3824:	d302      	bcc.n	382c <MPSL_IRQ_RTC0_Handler+0x8c>
    3826:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    382a:	d306      	bcc.n	383a <MPSL_IRQ_RTC0_Handler+0x9a>
    382c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3830:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3834:	2005      	movs	r0, #5
    3836:	f7fe ff2b 	bl	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    383a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    383e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3842:	bf1a      	itte	ne
    3844:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    3848:	2800      	cmpne	r0, #0
    384a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    384e:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    3852:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3856:	4810      	ldr	r0, [pc, #64]	; (3898 <MPSL_IRQ_RTC0_Handler+0xf8>)
    3858:	6800      	ldr	r0, [r0, #0]
    385a:	f8d8 1000 	ldr.w	r1, [r8]
    385e:	eba0 0001 	sub.w	r0, r0, r1
    3862:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3866:	2802      	cmp	r0, #2
    3868:	d304      	bcc.n	3874 <MPSL_IRQ_RTC0_Handler+0xd4>
    386a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    386e:	bf38      	it	cc
    3870:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    3874:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3878:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    387c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3880:	2006      	movs	r0, #6
    3882:	f7fe bf05 	b.w	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3886:	0000      	.short	0x0000
    3888:	4000b000 	.word	0x4000b000
    388c:	4000b504 	.word	0x4000b504
    3890:	4000b540 	.word	0x4000b540
    3894:	4000b544 	.word	0x4000b544
    3898:	4000b548 	.word	0x4000b548

0000389c <MPSL_IRQ_TIMER0_Handler>:
    389c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38a0:	4d3a      	ldr	r5, [pc, #232]	; (398c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    38a2:	7828      	ldrb	r0, [r5, #0]
    38a4:	2804      	cmp	r0, #4
    38a6:	d06c      	beq.n	3982 <MPSL_IRQ_TIMER0_Handler+0xe6>
    38a8:	1ce8      	adds	r0, r5, #3
    38aa:	2201      	movs	r2, #1
    38ac:	7801      	ldrb	r1, [r0, #0]
    38ae:	b159      	cbz	r1, 38c8 <MPSL_IRQ_TIMER0_Handler+0x2c>
    38b0:	2901      	cmp	r1, #1
    38b2:	bf08      	it	eq
    38b4:	706a      	strbeq	r2, [r5, #1]
    38b6:	d002      	beq.n	38be <MPSL_IRQ_TIMER0_Handler+0x22>
    38b8:	7869      	ldrb	r1, [r5, #1]
    38ba:	2900      	cmp	r1, #0
    38bc:	d05c      	beq.n	3978 <MPSL_IRQ_TIMER0_Handler+0xdc>
    38be:	2102      	movs	r1, #2
    38c0:	7001      	strb	r1, [r0, #0]
    38c2:	7840      	ldrb	r0, [r0, #1]
    38c4:	f000 fae2 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    38c8:	4c31      	ldr	r4, [pc, #196]	; (3990 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    38ca:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    38ce:	f04f 0800 	mov.w	r8, #0
    38d2:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    38d6:	f44f 7680 	mov.w	r6, #256	; 0x100
    38da:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    38de:	bf1c      	itt	ne
    38e0:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    38e4:	2800      	cmpne	r0, #0
    38e6:	d008      	beq.n	38fa <MPSL_IRQ_TIMER0_Handler+0x5e>
    38e8:	f04f 0003 	mov.w	r0, #3
    38ec:	f000 face 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    38f0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    38f4:	2003      	movs	r0, #3
    38f6:	f7fe fecb 	bl	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    38fa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    38fe:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3902:	bf1c      	itt	ne
    3904:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    3908:	2800      	cmpne	r0, #0
    390a:	d008      	beq.n	391e <MPSL_IRQ_TIMER0_Handler+0x82>
    390c:	f04f 0002 	mov.w	r0, #2
    3910:	f000 fabc 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3914:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3918:	2002      	movs	r0, #2
    391a:	f7fe feb9 	bl	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    391e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3922:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3926:	bf1c      	itt	ne
    3928:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    392c:	2800      	cmpne	r0, #0
    392e:	d008      	beq.n	3942 <MPSL_IRQ_TIMER0_Handler+0xa6>
    3930:	f04f 0001 	mov.w	r0, #1
    3934:	f000 faaa 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3938:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    393c:	2001      	movs	r0, #1
    393e:	f7fe fea7 	bl	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3942:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3946:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    394a:	bf1a      	itte	ne
    394c:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    3950:	2800      	cmpne	r0, #0
    3952:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3956:	f04f 0000 	mov.w	r0, #0
    395a:	f000 fa97 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    395e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3962:	2004      	movs	r0, #4
    3964:	7028      	strb	r0, [r5, #0]
    3966:	f8c5 8008 	str.w	r8, [r5, #8]
    396a:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    396e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3972:	2000      	movs	r0, #0
    3974:	f7fe be8c 	b.w	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3978:	f44f 715a 	mov.w	r1, #872	; 0x368
    397c:	206c      	movs	r0, #108	; 0x6c
    397e:	f000 feef 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3986:	2007      	movs	r0, #7
    3988:	f7fe be82 	b.w	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    398c:	2000001c 	.word	0x2000001c
    3990:	40008000 	.word	0x40008000
    3994:	2201      	movs	r2, #1
    3996:	0213      	lsls	r3, r2, #8
    3998:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    399c:	2000      	movs	r0, #0
    399e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    39a2:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    39a6:	f3bf 8f4f 	dsb	sy
    39aa:	f3bf 8f6f 	isb	sy
    39ae:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    39b2:	490c      	ldr	r1, [pc, #48]	; (39e4 <MPSL_IRQ_TIMER0_Handler+0x148>)
    39b4:	604a      	str	r2, [r1, #4]
    39b6:	1e43      	subs	r3, r0, #1
    39b8:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    39bc:	4b0a      	ldr	r3, [pc, #40]	; (39e8 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    39be:	6018      	str	r0, [r3, #0]
    39c0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    39c4:	1d1b      	adds	r3, r3, #4
    39c6:	6018      	str	r0, [r3, #0]
    39c8:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    39cc:	1d1b      	adds	r3, r3, #4
    39ce:	6018      	str	r0, [r3, #0]
    39d0:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    39d4:	1d1b      	adds	r3, r3, #4
    39d6:	6018      	str	r0, [r3, #0]
    39d8:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    39dc:	610a      	str	r2, [r1, #16]
    39de:	4903      	ldr	r1, [pc, #12]	; (39ec <MPSL_IRQ_TIMER0_Handler+0x150>)
    39e0:	7048      	strb	r0, [r1, #1]
    39e2:	4770      	bx	lr
    39e4:	40008000 	.word	0x40008000
    39e8:	40008540 	.word	0x40008540
    39ec:	2000001c 	.word	0x2000001c

000039f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    39f0:	4801      	ldr	r0, [pc, #4]	; (39f8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    39f2:	6800      	ldr	r0, [r0, #0]
    39f4:	4770      	bx	lr
    39f6:	0000      	.short	0x0000
    39f8:	4000b504 	.word	0x4000b504

000039fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    39fc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3a00:	4e41      	ldr	r6, [pc, #260]	; (3b08 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    3a02:	4604      	mov	r4, r0
    3a04:	1ef7      	subs	r7, r6, #3
    3a06:	f896 c000 	ldrb.w	ip, [r6]
    3a0a:	68f8      	ldr	r0, [r7, #12]
    3a0c:	f1bc 0f01 	cmp.w	ip, #1
    3a10:	bf04      	itt	eq
    3a12:	42a0      	cmpeq	r0, r4
    3a14:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3a18:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3a1c:	4a3b      	ldr	r2, [pc, #236]	; (3b0c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    3a1e:	6011      	str	r1, [r2, #0]
    3a20:	493b      	ldr	r1, [pc, #236]	; (3b10 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    3a22:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3a26:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3a2a:	4a3a      	ldr	r2, [pc, #232]	; (3b14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    3a2c:	f04f 0500 	mov.w	r5, #0
    3a30:	f1bc 0f00 	cmp.w	ip, #0
    3a34:	d057      	beq.n	3ae6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    3a36:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3a3a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3a3e:	6015      	str	r5, [r2, #0]
    3a40:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    3a44:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    3a48:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    3a4c:	f04f 0801 	mov.w	r8, #1
    3a50:	2a00      	cmp	r2, #0
    3a52:	bf04      	itt	eq
    3a54:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    3a58:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    3a5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3a60:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3a64:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3a68:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    3a6c:	4a2a      	ldr	r2, [pc, #168]	; (3b18 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    3a6e:	f8d2 a000 	ldr.w	sl, [r2]
    3a72:	eba4 0a0a 	sub.w	sl, r4, sl
    3a76:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    3a7a:	f1bb 0f02 	cmp.w	fp, #2
    3a7e:	d33c      	bcc.n	3afa <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    3a80:	f04f 0a02 	mov.w	sl, #2
    3a84:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    3a88:	d237      	bcs.n	3afa <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    3a8a:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3a8e:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    3a92:	f1bc 0f00 	cmp.w	ip, #0
    3a96:	d005      	beq.n	3aa4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    3a98:	6811      	ldr	r1, [r2, #0]
    3a9a:	1a41      	subs	r1, r0, r1
    3a9c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3aa0:	2902      	cmp	r1, #2
    3aa2:	d3f9      	bcc.n	3a98 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    3aa4:	f8c7 8008 	str.w	r8, [r7, #8]
    3aa8:	703d      	strb	r5, [r7, #0]
    3aaa:	f7ff ff73 	bl	3994 <MPSL_IRQ_TIMER0_Handler+0xf8>
    3aae:	481b      	ldr	r0, [pc, #108]	; (3b1c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    3ab0:	6005      	str	r5, [r0, #0]
    3ab2:	1d00      	adds	r0, r0, #4
    3ab4:	f8c0 a000 	str.w	sl, [r0]
    3ab8:	4919      	ldr	r1, [pc, #100]	; (3b20 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    3aba:	2004      	movs	r0, #4
    3abc:	6008      	str	r0, [r1, #0]
    3abe:	4919      	ldr	r1, [pc, #100]	; (3b24 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    3ac0:	f8c1 800c 	str.w	r8, [r1, #12]
    3ac4:	68ba      	ldr	r2, [r7, #8]
    3ac6:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    3aca:	0181      	lsls	r1, r0, #6
    3acc:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    3ad0:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    3ad4:	4a14      	ldr	r2, [pc, #80]	; (3b28 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    3ad6:	0741      	lsls	r1, r0, #29
    3ad8:	6011      	str	r1, [r2, #0]
    3ada:	60fc      	str	r4, [r7, #12]
    3adc:	7070      	strb	r0, [r6, #1]
    3ade:	f886 8000 	strb.w	r8, [r6]
    3ae2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3ae6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3aea:	4b10      	ldr	r3, [pc, #64]	; (3b2c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3aec:	601d      	str	r5, [r3, #0]
    3aee:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    3af2:	6015      	str	r5, [r2, #0]
    3af4:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    3af8:	e7a4      	b.n	3a44 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    3afa:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    3afe:	f240 11f1 	movw	r1, #497	; 0x1f1
    3b02:	206c      	movs	r0, #108	; 0x6c
    3b04:	f000 fe2c 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b08:	2000001f 	.word	0x2000001f
    3b0c:	4001f508 	.word	0x4001f508
    3b10:	4000b000 	.word	0x4000b000
    3b14:	4000b544 	.word	0x4000b544
    3b18:	4000b504 	.word	0x4000b504
    3b1c:	40008504 	.word	0x40008504
    3b20:	40008510 	.word	0x40008510
    3b24:	40008000 	.word	0x40008000
    3b28:	4001f504 	.word	0x4001f504
    3b2c:	4000b540 	.word	0x4000b540

00003b30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b34:	4c2b      	ldr	r4, [pc, #172]	; (3be4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    3b36:	68e1      	ldr	r1, [r4, #12]
    3b38:	4281      	cmp	r1, r0
    3b3a:	bf14      	ite	ne
    3b3c:	2201      	movne	r2, #1
    3b3e:	2200      	moveq	r2, #0
    3b40:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 3be8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    3b44:	f89c 7000 	ldrb.w	r7, [ip]
    3b48:	2f02      	cmp	r7, #2
    3b4a:	d002      	beq.n	3b52 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    3b4c:	2a00      	cmp	r2, #0
    3b4e:	d038      	beq.n	3bc2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    3b50:	e003      	b.n	3b5a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    3b52:	2a00      	cmp	r2, #0
    3b54:	bf08      	it	eq
    3b56:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b5a:	7862      	ldrb	r2, [r4, #1]
    3b5c:	b382      	cbz	r2, 3bc0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    3b5e:	4b23      	ldr	r3, [pc, #140]	; (3bec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3b64:	601a      	str	r2, [r3, #0]
    3b66:	4b22      	ldr	r3, [pc, #136]	; (3bf0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3b68:	1395      	asrs	r5, r2, #14
    3b6a:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    3b6e:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    3b72:	2600      	movs	r6, #0
    3b74:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    3b78:	4a1e      	ldr	r2, [pc, #120]	; (3bf4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    3b7a:	f8d2 8000 	ldr.w	r8, [r2]
    3b7e:	eba0 0808 	sub.w	r8, r0, r8
    3b82:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    3b86:	f1b8 0f02 	cmp.w	r8, #2
    3b8a:	d324      	bcc.n	3bd6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    3b8c:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    3b90:	d221      	bcs.n	3bd6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    3b92:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3b96:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    3b9a:	b12f      	cbz	r7, 3ba8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    3b9c:	6813      	ldr	r3, [r2, #0]
    3b9e:	1acb      	subs	r3, r1, r3
    3ba0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3ba4:	2b02      	cmp	r3, #2
    3ba6:	d3f9      	bcc.n	3b9c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    3ba8:	4b13      	ldr	r3, [pc, #76]	; (3bf8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    3baa:	2102      	movs	r1, #2
    3bac:	074a      	lsls	r2, r1, #29
    3bae:	601a      	str	r2, [r3, #0]
    3bb0:	60e0      	str	r0, [r4, #12]
    3bb2:	2004      	movs	r0, #4
    3bb4:	f88c 0001 	strb.w	r0, [ip, #1]
    3bb8:	f88c 1000 	strb.w	r1, [ip]
    3bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bc0:	e004      	b.n	3bcc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3bc2:	f240 11ff 	movw	r1, #511	; 0x1ff
    3bc6:	206c      	movs	r0, #108	; 0x6c
    3bc8:	f000 fdca 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bcc:	f240 2103 	movw	r1, #515	; 0x203
    3bd0:	206c      	movs	r0, #108	; 0x6c
    3bd2:	f000 fdc5 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bd6:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    3bda:	f240 210f 	movw	r1, #527	; 0x20f
    3bde:	206c      	movs	r0, #108	; 0x6c
    3be0:	f000 fdbe 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3be4:	2000001c 	.word	0x2000001c
    3be8:	2000001f 	.word	0x2000001f
    3bec:	4001f508 	.word	0x4001f508
    3bf0:	4000b000 	.word	0x4000b000
    3bf4:	4000b504 	.word	0x4000b504
    3bf8:	4001f504 	.word	0x4001f504

00003bfc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3bfc:	4801      	ldr	r0, [pc, #4]	; (3c04 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    3bfe:	68c0      	ldr	r0, [r0, #12]
    3c00:	4770      	bx	lr
    3c02:	0000      	.short	0x0000
    3c04:	2000001c 	.word	0x2000001c

00003c08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c0c:	4833      	ldr	r0, [pc, #204]	; (3cdc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    3c0e:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    3c12:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    3c16:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 3ce0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    3c1a:	4a32      	ldr	r2, [pc, #200]	; (3ce4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    3c1c:	2100      	movs	r1, #0
    3c1e:	f89c 3000 	ldrb.w	r3, [ip]
    3c22:	b163      	cbz	r3, 3c3e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    3c24:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    3c28:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3c2c:	6011      	str	r1, [r2, #0]
    3c2e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3c32:	bf00      	nop
    3c34:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    3c38:	2201      	movs	r2, #1
    3c3a:	b980      	cbnz	r0, 3c5e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    3c3c:	e009      	b.n	3c52 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    3c3e:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3c42:	4c29      	ldr	r4, [pc, #164]	; (3ce8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    3c44:	6021      	str	r1, [r4, #0]
    3c46:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3c4a:	6011      	str	r1, [r2, #0]
    3c4c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3c50:	e7f0      	b.n	3c34 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    3c52:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    3c56:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3c5a:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    3c5e:	2b02      	cmp	r3, #2
    3c60:	d004      	beq.n	3c6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    3c62:	f240 211b 	movw	r1, #539	; 0x21b
    3c66:	206c      	movs	r0, #108	; 0x6c
    3c68:	f000 fd7a 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c6c:	4e1f      	ldr	r6, [pc, #124]	; (3cec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    3c6e:	6830      	ldr	r0, [r6, #0]
    3c70:	4c1f      	ldr	r4, [pc, #124]	; (3cf0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    3c72:	1cc0      	adds	r0, r0, #3
    3c74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3c78:	68e3      	ldr	r3, [r4, #12]
    3c7a:	4d1e      	ldr	r5, [pc, #120]	; (3cf4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3c7c:	4298      	cmp	r0, r3
    3c7e:	d00b      	beq.n	3c98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3c80:	6837      	ldr	r7, [r6, #0]
    3c82:	1bdf      	subs	r7, r3, r7
    3c84:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3c88:	2f04      	cmp	r7, #4
    3c8a:	d305      	bcc.n	3c98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3c8c:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    3c90:	d202      	bcs.n	3c98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3c92:	f7ff feb3 	bl	39fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3c96:	e01b      	b.n	3cd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    3c98:	6830      	ldr	r0, [r6, #0]
    3c9a:	1a18      	subs	r0, r3, r0
    3c9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3ca0:	2802      	cmp	r0, #2
    3ca2:	d313      	bcc.n	3ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    3ca4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3ca8:	d210      	bcs.n	3ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    3caa:	4b13      	ldr	r3, [pc, #76]	; (3cf8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3cac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3cb0:	6018      	str	r0, [r3, #0]
    3cb2:	60a2      	str	r2, [r4, #8]
    3cb4:	7021      	strb	r1, [r4, #0]
    3cb6:	606a      	str	r2, [r5, #4]
    3cb8:	60ea      	str	r2, [r5, #12]
    3cba:	0040      	lsls	r0, r0, #1
    3cbc:	1f19      	subs	r1, r3, #4
    3cbe:	6008      	str	r0, [r1, #0]
    3cc0:	2004      	movs	r0, #4
    3cc2:	f88c 0001 	strb.w	r0, [ip, #1]
    3cc6:	f88c 2000 	strb.w	r2, [ip]
    3cca:	e001      	b.n	3cd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    3ccc:	60a2      	str	r2, [r4, #8]
    3cce:	7021      	strb	r1, [r4, #0]
    3cd0:	68a0      	ldr	r0, [r4, #8]
    3cd2:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cda:	0000      	.short	0x0000
    3cdc:	4000b000 	.word	0x4000b000
    3ce0:	2000001f 	.word	0x2000001f
    3ce4:	4000b544 	.word	0x4000b544
    3ce8:	4000b540 	.word	0x4000b540
    3cec:	4000b504 	.word	0x4000b504
    3cf0:	2000001c 	.word	0x2000001c
    3cf4:	40008000 	.word	0x40008000
    3cf8:	4001f508 	.word	0x4001f508

00003cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d00:	f8df c174 	ldr.w	ip, [pc, #372]	; 3e78 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    3d04:	2701      	movs	r7, #1
    3d06:	f04f 0800 	mov.w	r8, #0
    3d0a:	f89c 5000 	ldrb.w	r5, [ip]
    3d0e:	f89c c001 	ldrb.w	ip, [ip, #1]
    3d12:	2807      	cmp	r0, #7
    3d14:	d27e      	bcs.n	3e14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    3d16:	e8df f000 	tbb	[pc, r0]
    3d1a:	0404      	.short	0x0404
    3d1c:	6a6a0404 	.word	0x6a6a0404
    3d20:	006a      	.short	0x006a
    3d22:	4c56      	ldr	r4, [pc, #344]	; (3e7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    3d24:	68e6      	ldr	r6, [r4, #12]
    3d26:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    3d2a:	bf04      	itt	eq
    3d2c:	7864      	ldrbeq	r4, [r4, #1]
    3d2e:	2c00      	cmpeq	r4, #0
    3d30:	d002      	beq.n	3d38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    3d32:	2d02      	cmp	r5, #2
    3d34:	d005      	beq.n	3d42 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3d36:	e03c      	b.n	3db2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    3d38:	f240 214e 	movw	r1, #590	; 0x24e
    3d3c:	206c      	movs	r0, #108	; 0x6c
    3d3e:	f000 fd0f 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d42:	ea4f 048c 	mov.w	r4, ip, lsl #2
    3d46:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    3d4a:	f1ac 0404 	sub.w	r4, ip, #4
    3d4e:	0624      	lsls	r4, r4, #24
    3d50:	0da4      	lsrs	r4, r4, #22
    3d52:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    3d56:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    3d5a:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    3d5e:	2400      	movs	r4, #0
    3d60:	2d01      	cmp	r5, #1
    3d62:	d002      	beq.n	3d6a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    3d64:	2d02      	cmp	r5, #2
    3d66:	d011      	beq.n	3d8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    3d68:	e020      	b.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d6a:	f1bc 0f04 	cmp.w	ip, #4
    3d6e:	d205      	bcs.n	3d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    3d70:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    3d74:	f1ba 0f00 	cmp.w	sl, #0
    3d78:	d118      	bne.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d7a:	e004      	b.n	3d86 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    3d7c:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    3d80:	f1ba 0f00 	cmp.w	sl, #0
    3d84:	d112      	bne.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d86:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    3d8a:	e00f      	b.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d8c:	f1bc 0f04 	cmp.w	ip, #4
    3d90:	d205      	bcs.n	3d9e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    3d92:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    3d96:	f1ba 0f00 	cmp.w	sl, #0
    3d9a:	d107      	bne.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d9c:	e004      	b.n	3da8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    3d9e:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    3da2:	f1ba 0f00 	cmp.w	sl, #0
    3da6:	d101      	bne.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3da8:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    3dac:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    3db0:	d1d5      	bne.n	3d5e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    3db2:	4c33      	ldr	r4, [pc, #204]	; (3e80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    3db4:	f100 0c10 	add.w	ip, r0, #16
    3db8:	fa07 fc0c 	lsl.w	ip, r7, ip
    3dbc:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    3dc0:	0080      	lsls	r0, r0, #2
    3dc2:	4420      	add	r0, r4
    3dc4:	b152      	cbz	r2, 3ddc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3dc6:	6407      	str	r7, [r0, #64]	; 0x40
    3dc8:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    3dcc:	1b8d      	subs	r5, r1, r6
    3dce:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    3dd2:	42aa      	cmp	r2, r5
    3dd4:	bf98      	it	ls
    3dd6:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3dda:	d243      	bcs.n	3e64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    3ddc:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3de0:	2b01      	cmp	r3, #1
    3de2:	bf08      	it	eq
    3de4:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    3de8:	2001      	movs	r0, #1
    3dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3dee:	b135      	cbz	r5, 3dfe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3df0:	4584      	cmp	ip, r0
    3df2:	d104      	bne.n	3dfe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3df4:	f240 2171 	movw	r1, #625	; 0x271
    3df8:	206c      	movs	r0, #108	; 0x6c
    3dfa:	f000 fcb1 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3dfe:	1f00      	subs	r0, r0, #4
    3e00:	b2c0      	uxtb	r0, r0
    3e02:	2b01      	cmp	r3, #1
    3e04:	bf0c      	ite	eq
    3e06:	2401      	moveq	r4, #1
    3e08:	2400      	movne	r4, #0
    3e0a:	2803      	cmp	r0, #3
    3e0c:	d306      	bcc.n	3e1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    3e0e:	f240 114b 	movw	r1, #331	; 0x14b
    3e12:	e000      	b.n	3e16 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    3e14:	e02b      	b.n	3e6e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    3e16:	206c      	movs	r0, #108	; 0x6c
    3e18:	f000 fca2 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e1c:	f8df c064 	ldr.w	ip, [pc, #100]	; 3e84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3e20:	f100 0310 	add.w	r3, r0, #16
    3e24:	fa07 f303 	lsl.w	r3, r7, r3
    3e28:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    3e2c:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    3e30:	0080      	lsls	r0, r0, #2
    3e32:	4460      	add	r0, ip
    3e34:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    3e38:	b14a      	cbz	r2, 3e4e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    3e3a:	4d13      	ldr	r5, [pc, #76]	; (3e88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    3e3c:	682e      	ldr	r6, [r5, #0]
    3e3e:	1b8d      	subs	r5, r1, r6
    3e40:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    3e44:	42aa      	cmp	r2, r5
    3e46:	bf98      	it	ls
    3e48:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3e4c:	d20a      	bcs.n	3e64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    3e4e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3e52:	2c00      	cmp	r4, #0
    3e54:	bf18      	it	ne
    3e56:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    3e5a:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    3e5e:	2001      	movs	r0, #1
    3e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e64:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    3e68:	2000      	movs	r0, #0
    3e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e6e:	f240 2176 	movw	r1, #630	; 0x276
    3e72:	206c      	movs	r0, #108	; 0x6c
    3e74:	f000 fc74 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e78:	2000001f 	.word	0x2000001f
    3e7c:	2000001c 	.word	0x2000001c
    3e80:	40008000 	.word	0x40008000
    3e84:	4000b000 	.word	0x4000b000
    3e88:	4000b504 	.word	0x4000b504

00003e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e8e:	2701      	movs	r7, #1
    3e90:	2400      	movs	r4, #0
    3e92:	2807      	cmp	r0, #7
    3e94:	d24c      	bcs.n	3f30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    3e96:	e8df f000 	tbb	[pc, r0]
    3e9a:	0404      	.short	0x0404
    3e9c:	16160404 	.word	0x16160404
    3ea0:	0016      	.short	0x0016
    3ea2:	4a26      	ldr	r2, [pc, #152]	; (3f3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    3ea4:	f100 0110 	add.w	r1, r0, #16
    3ea8:	fa07 f101 	lsl.w	r1, r7, r1
    3eac:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    3eb0:	0081      	lsls	r1, r0, #2
    3eb2:	4411      	add	r1, r2
    3eb4:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3eb8:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    3ebc:	4920      	ldr	r1, [pc, #128]	; (3f40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    3ebe:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3ec2:	9000      	str	r0, [sp, #0]
    3ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ec6:	4d1f      	ldr	r5, [pc, #124]	; (3f44 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    3ec8:	1f01      	subs	r1, r0, #4
    3eca:	b2ce      	uxtb	r6, r1
    3ecc:	7829      	ldrb	r1, [r5, #0]
    3ece:	b179      	cbz	r1, 3ef0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    3ed0:	786a      	ldrb	r2, [r5, #1]
    3ed2:	4282      	cmp	r2, r0
    3ed4:	d10c      	bne.n	3ef0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    3ed6:	4a1c      	ldr	r2, [pc, #112]	; (3f48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    3ed8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3edc:	6010      	str	r0, [r2, #0]
    3ede:	2901      	cmp	r1, #1
    3ee0:	bf08      	it	eq
    3ee2:	f7ff fd57 	bleq	3994 <MPSL_IRQ_TIMER0_Handler+0xf8>
    3ee6:	702c      	strb	r4, [r5, #0]
    3ee8:	4918      	ldr	r1, [pc, #96]	; (3f4c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3eea:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3eee:	60c8      	str	r0, [r1, #12]
    3ef0:	f106 0010 	add.w	r0, r6, #16
    3ef4:	fa07 f100 	lsl.w	r1, r7, r0
    3ef8:	4815      	ldr	r0, [pc, #84]	; (3f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3efa:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3efe:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3f02:	00b0      	lsls	r0, r6, #2
    3f04:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    3f08:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    3f0c:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    3f10:	4a10      	ldr	r2, [pc, #64]	; (3f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3f12:	6812      	ldr	r2, [r2, #0]
    3f14:	1a89      	subs	r1, r1, r2
    3f16:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3f1a:	2902      	cmp	r1, #2
    3f1c:	bf24      	itt	cs
    3f1e:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    3f22:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    3f26:	480c      	ldr	r0, [pc, #48]	; (3f58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3f28:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    3f2c:	9000      	str	r0, [sp, #0]
    3f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f30:	f240 21ef 	movw	r1, #751	; 0x2ef
    3f34:	206c      	movs	r0, #108	; 0x6c
    3f36:	f000 fc13 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f3a:	0000      	.short	0x0000
    3f3c:	40008000 	.word	0x40008000
    3f40:	40008140 	.word	0x40008140
    3f44:	2000001f 	.word	0x2000001f
    3f48:	4001f508 	.word	0x4001f508
    3f4c:	2000001c 	.word	0x2000001c
    3f50:	4000b000 	.word	0x4000b000
    3f54:	4000b504 	.word	0x4000b504
    3f58:	4000b140 	.word	0x4000b140

00003f5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3f5c:	491e      	ldr	r1, [pc, #120]	; (3fd8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    3f5e:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3f62:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3f66:	481d      	ldr	r0, [pc, #116]	; (3fdc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    3f68:	4a1d      	ldr	r2, [pc, #116]	; (3fe0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    3f6a:	f890 c000 	ldrb.w	ip, [r0]
    3f6e:	2000      	movs	r0, #0
    3f70:	f1bc 0f00 	cmp.w	ip, #0
    3f74:	d00a      	beq.n	3f8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    3f76:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3f7a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3f7e:	6010      	str	r0, [r2, #0]
    3f80:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3f84:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    3f88:	b981      	cbnz	r1, 3fac <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3f8a:	e009      	b.n	3fa0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    3f8c:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3f90:	4b14      	ldr	r3, [pc, #80]	; (3fe4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    3f92:	6018      	str	r0, [r3, #0]
    3f94:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3f98:	6010      	str	r0, [r2, #0]
    3f9a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3f9e:	e7f1      	b.n	3f84 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3fa0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3fa8:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    3fac:	490e      	ldr	r1, [pc, #56]	; (3fe8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    3fae:	f04f 32ff 	mov.w	r2, #4294967295
    3fb2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3fb6:	4a0d      	ldr	r2, [pc, #52]	; (3fec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    3fb8:	6010      	str	r0, [r2, #0]
    3fba:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3fbe:	1d12      	adds	r2, r2, #4
    3fc0:	6010      	str	r0, [r2, #0]
    3fc2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3fc6:	1d12      	adds	r2, r2, #4
    3fc8:	6010      	str	r0, [r2, #0]
    3fca:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3fce:	1d12      	adds	r2, r2, #4
    3fd0:	6010      	str	r0, [r2, #0]
    3fd2:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    3fd6:	4770      	bx	lr
    3fd8:	4000b000 	.word	0x4000b000
    3fdc:	2000001f 	.word	0x2000001f
    3fe0:	4000b544 	.word	0x4000b544
    3fe4:	4000b540 	.word	0x4000b540
    3fe8:	40008000 	.word	0x40008000
    3fec:	40008540 	.word	0x40008540

00003ff0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3ff0:	4808      	ldr	r0, [pc, #32]	; (4014 <CONFIG_HEAP_MEM_POOL_SIZE+0x14>)
    3ff2:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3ff6:	2800      	cmp	r0, #0
    3ff8:	bfb8      	it	lt
    3ffa:	4770      	bxlt	lr
    3ffc:	f000 011f 	and.w	r1, r0, #31
    4000:	2201      	movs	r2, #1
    4002:	fa02 f101 	lsl.w	r1, r2, r1
    4006:	0940      	lsrs	r0, r0, #5
    4008:	0080      	lsls	r0, r0, #2
    400a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    400e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4012:	4770      	bx	lr
    4014:	2000001c 	.word	0x2000001c

00004018 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    4018:	b510      	push	{r4, lr}
    401a:	2807      	cmp	r0, #7
    401c:	d20d      	bcs.n	403a <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    401e:	e8df f000 	tbb	[pc, r0]
    4022:	0404      	.short	0x0404
    4024:	06060404 	.word	0x06060404
    4028:	0006      	.short	0x0006
    402a:	4906      	ldr	r1, [pc, #24]	; (4044 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    402c:	e002      	b.n	4034 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    402e:	1f00      	subs	r0, r0, #4
    4030:	4905      	ldr	r1, [pc, #20]	; (4048 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    4032:	b2c0      	uxtb	r0, r0
    4034:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    4038:	bd10      	pop	{r4, pc}
    403a:	f240 219a 	movw	r1, #666	; 0x29a
    403e:	206c      	movs	r0, #108	; 0x6c
    4040:	f000 fb8e 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4044:	40008140 	.word	0x40008140
    4048:	4000b140 	.word	0x4000b140

0000404c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    404c:	b570      	push	{r4, r5, r6, lr}
    404e:	4819      	ldr	r0, [pc, #100]	; (40b4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    4050:	2400      	movs	r4, #0
    4052:	2104      	movs	r1, #4
    4054:	7004      	strb	r4, [r0, #0]
    4056:	1ec0      	subs	r0, r0, #3
    4058:	7001      	strb	r1, [r0, #0]
    405a:	0589      	lsls	r1, r1, #22
    405c:	60c1      	str	r1, [r0, #12]
    405e:	f7ff fc99 	bl	3994 <MPSL_IRQ_TIMER0_Handler+0xf8>
    4062:	2501      	movs	r5, #1
    4064:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    4068:	02eb      	lsls	r3, r5, #11
    406a:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    406e:	f3bf 8f4f 	dsb	sy
    4072:	f3bf 8f6f 	isb	sy
    4076:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    407a:	4a0f      	ldr	r2, [pc, #60]	; (40b8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    407c:	6055      	str	r5, [r2, #4]
    407e:	6095      	str	r5, [r2, #8]
    4080:	480e      	ldr	r0, [pc, #56]	; (40bc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    4082:	6801      	ldr	r1, [r0, #0]
    4084:	2900      	cmp	r1, #0
    4086:	d1fc      	bne.n	4082 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    4088:	1e48      	subs	r0, r1, #1
    408a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    408e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    4092:	480b      	ldr	r0, [pc, #44]	; (40c0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    4094:	6004      	str	r4, [r0, #0]
    4096:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    409a:	1d00      	adds	r0, r0, #4
    409c:	6004      	str	r4, [r0, #0]
    409e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    40a2:	1d00      	adds	r0, r0, #4
    40a4:	6004      	str	r4, [r0, #0]
    40a6:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    40aa:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    40ae:	6015      	str	r5, [r2, #0]
    40b0:	bd70      	pop	{r4, r5, r6, pc}
    40b2:	0000      	.short	0x0000
    40b4:	2000001f 	.word	0x2000001f
    40b8:	4000b000 	.word	0x4000b000
    40bc:	4000b504 	.word	0x4000b504
    40c0:	4000b540 	.word	0x4000b540

000040c4 <MPSL_IRQ_CLOCK_Handler>:
    40c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40c8:	4c16      	ldr	r4, [pc, #88]	; (4124 <MPSL_IRQ_CLOCK_Handler+0x60>)
    40ca:	7a60      	ldrb	r0, [r4, #9]
    40cc:	2800      	cmp	r0, #0
    40ce:	d027      	beq.n	4120 <MPSL_IRQ_CLOCK_Handler+0x5c>
    40d0:	f44f 7180 	mov.w	r1, #256	; 0x100
    40d4:	058d      	lsls	r5, r1, #22
    40d6:	4628      	mov	r0, r5
    40d8:	f009 f909 	bl	d2ee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    40dc:	4680      	mov	r8, r0
    40de:	f44f 7182 	mov.w	r1, #260	; 0x104
    40e2:	4628      	mov	r0, r5
    40e4:	f009 f903 	bl	d2ee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    40e8:	2600      	movs	r6, #0
    40ea:	4607      	mov	r7, r0
    40ec:	f1b8 0f00 	cmp.w	r8, #0
    40f0:	d009      	beq.n	4106 <MPSL_IRQ_CLOCK_Handler+0x42>
    40f2:	2001      	movs	r0, #1
    40f4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    40f8:	7920      	ldrb	r0, [r4, #4]
    40fa:	b120      	cbz	r0, 4106 <MPSL_IRQ_CLOCK_Handler+0x42>
    40fc:	7126      	strb	r6, [r4, #4]
    40fe:	69e0      	ldr	r0, [r4, #28]
    4100:	b108      	cbz	r0, 4106 <MPSL_IRQ_CLOCK_Handler+0x42>
    4102:	4780      	blx	r0
    4104:	61e6      	str	r6, [r4, #28]
    4106:	b137      	cbz	r7, 4116 <MPSL_IRQ_CLOCK_Handler+0x52>
    4108:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    410c:	2002      	movs	r0, #2
    410e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4112:	f000 fa6d 	bl	45f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4116:	4640      	mov	r0, r8
    4118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    411c:	f000 b85a 	b.w	41d4 <MPSL_IRQ_CLOCK_Handler+0x110>
    4120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4124:	2000002c 	.word	0x2000002c
    4128:	b510      	push	{r4, lr}
    412a:	f009 f98a 	bl	d442 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    412e:	b930      	cbnz	r0, 413e <MPSL_IRQ_CLOCK_Handler+0x7a>
    4130:	f009 f9a8 	bl	d484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4134:	b918      	cbnz	r0, 413e <MPSL_IRQ_CLOCK_Handler+0x7a>
    4136:	f009 f9db 	bl	d4f0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    413a:	2800      	cmp	r0, #0
    413c:	d002      	beq.n	4144 <MPSL_IRQ_CLOCK_Handler+0x80>
    413e:	4902      	ldr	r1, [pc, #8]	; (4148 <MPSL_IRQ_CLOCK_Handler+0x84>)
    4140:	2002      	movs	r0, #2
    4142:	6008      	str	r0, [r1, #0]
    4144:	bd10      	pop	{r4, pc}
    4146:	0000      	.short	0x0000
    4148:	40000c34 	.word	0x40000c34
    414c:	b570      	push	{r4, r5, r6, lr}
    414e:	f000 f987 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4152:	f000 faa1 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4156:	4c09      	ldr	r4, [pc, #36]	; (417c <MPSL_IRQ_CLOCK_Handler+0xb8>)
    4158:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    415c:	b130      	cbz	r0, 416c <MPSL_IRQ_CLOCK_Handler+0xa8>
    415e:	f7ff ffe3 	bl	4128 <MPSL_IRQ_CLOCK_Handler+0x64>
    4162:	2001      	movs	r0, #1
    4164:	6128      	str	r0, [r5, #16]
    4166:	2004      	movs	r0, #4
    4168:	72a0      	strb	r0, [r4, #10]
    416a:	e004      	b.n	4176 <MPSL_IRQ_CLOCK_Handler+0xb2>
    416c:	2003      	movs	r0, #3
    416e:	72a0      	strb	r0, [r4, #10]
    4170:	2001      	movs	r0, #1
    4172:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4176:	2000      	movs	r0, #0
    4178:	71e0      	strb	r0, [r4, #7]
    417a:	bd70      	pop	{r4, r5, r6, pc}
    417c:	2000002c 	.word	0x2000002c
    4180:	b570      	push	{r4, r5, r6, lr}
    4182:	4c13      	ldr	r4, [pc, #76]	; (41d0 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    4184:	79a0      	ldrb	r0, [r4, #6]
    4186:	b1f0      	cbz	r0, 41c6 <MPSL_IRQ_CLOCK_Handler+0x102>
    4188:	2801      	cmp	r0, #1
    418a:	d003      	beq.n	4194 <MPSL_IRQ_CLOCK_Handler+0xd0>
    418c:	79e1      	ldrb	r1, [r4, #7]
    418e:	1e40      	subs	r0, r0, #1
    4190:	4281      	cmp	r1, r0
    4192:	da18      	bge.n	41c6 <MPSL_IRQ_CLOCK_Handler+0x102>
    4194:	f000 fa80 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4198:	4605      	mov	r5, r0
    419a:	f000 fb51 	bl	4840 <mpsl_temperature_get>
    419e:	79a1      	ldrb	r1, [r4, #6]
    41a0:	2901      	cmp	r1, #1
    41a2:	d902      	bls.n	41aa <MPSL_IRQ_CLOCK_Handler+0xe6>
    41a4:	79e1      	ldrb	r1, [r4, #7]
    41a6:	1c49      	adds	r1, r1, #1
    41a8:	71e1      	strb	r1, [r4, #7]
    41aa:	b10d      	cbz	r5, 41b0 <MPSL_IRQ_CLOCK_Handler+0xec>
    41ac:	6961      	ldr	r1, [r4, #20]
    41ae:	e000      	b.n	41b2 <MPSL_IRQ_CLOCK_Handler+0xee>
    41b0:	6921      	ldr	r1, [r4, #16]
    41b2:	1a41      	subs	r1, r0, r1
    41b4:	2902      	cmp	r1, #2
    41b6:	da02      	bge.n	41be <MPSL_IRQ_CLOCK_Handler+0xfa>
    41b8:	f111 0f02 	cmn.w	r1, #2
    41bc:	dc07      	bgt.n	41ce <MPSL_IRQ_CLOCK_Handler+0x10a>
    41be:	b10d      	cbz	r5, 41c4 <MPSL_IRQ_CLOCK_Handler+0x100>
    41c0:	6160      	str	r0, [r4, #20]
    41c2:	e000      	b.n	41c6 <MPSL_IRQ_CLOCK_Handler+0x102>
    41c4:	6120      	str	r0, [r4, #16]
    41c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41ca:	f7ff bfbf 	b.w	414c <MPSL_IRQ_CLOCK_Handler+0x88>
    41ce:	bd70      	pop	{r4, r5, r6, pc}
    41d0:	2000002c 	.word	0x2000002c
    41d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    41d8:	4606      	mov	r6, r0
    41da:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    41de:	f44f 7186 	mov.w	r1, #268	; 0x10c
    41e2:	4628      	mov	r0, r5
    41e4:	f009 f883 	bl	d2ee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    41e8:	4680      	mov	r8, r0
    41ea:	f44f 7188 	mov.w	r1, #272	; 0x110
    41ee:	4628      	mov	r0, r5
    41f0:	f009 f87d 	bl	d2ee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    41f4:	4c27      	ldr	r4, [pc, #156]	; (4294 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    41f6:	4682      	mov	sl, r0
    41f8:	7827      	ldrb	r7, [r4, #0]
    41fa:	f104 0008 	add.w	r0, r4, #8
    41fe:	f009 f8ea 	bl	d3d6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4202:	b110      	cbz	r0, 420a <MPSL_IRQ_CLOCK_Handler+0x146>
    4204:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    4208:	e016      	b.n	4238 <MPSL_IRQ_CLOCK_Handler+0x174>
    420a:	f04f 0901 	mov.w	r9, #1
    420e:	b146      	cbz	r6, 4222 <MPSL_IRQ_CLOCK_Handler+0x15e>
    4210:	7aa0      	ldrb	r0, [r4, #10]
    4212:	2803      	cmp	r0, #3
    4214:	d105      	bne.n	4222 <MPSL_IRQ_CLOCK_Handler+0x15e>
    4216:	2004      	movs	r0, #4
    4218:	72a0      	strb	r0, [r4, #10]
    421a:	f7ff ff85 	bl	4128 <MPSL_IRQ_CLOCK_Handler+0x64>
    421e:	f8c5 9010 	str.w	r9, [r5, #16]
    4222:	2600      	movs	r6, #0
    4224:	f1b8 0f00 	cmp.w	r8, #0
    4228:	d018      	beq.n	425c <MPSL_IRQ_CLOCK_Handler+0x198>
    422a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    422e:	7aa0      	ldrb	r0, [r4, #10]
    4230:	2804      	cmp	r0, #4
    4232:	d004      	beq.n	423e <MPSL_IRQ_CLOCK_Handler+0x17a>
    4234:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    4238:	206d      	movs	r0, #109	; 0x6d
    423a:	f000 fa91 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    423e:	f009 f900 	bl	d442 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    4242:	b928      	cbnz	r0, 4250 <MPSL_IRQ_CLOCK_Handler+0x18c>
    4244:	f009 f91e 	bl	d484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4248:	b910      	cbnz	r0, 4250 <MPSL_IRQ_CLOCK_Handler+0x18c>
    424a:	f009 f951 	bl	d4f0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    424e:	b108      	cbz	r0, 4254 <MPSL_IRQ_CLOCK_Handler+0x190>
    4250:	4811      	ldr	r0, [pc, #68]	; (4298 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    4252:	6006      	str	r6, [r0, #0]
    4254:	2002      	movs	r0, #2
    4256:	72a0      	strb	r0, [r4, #10]
    4258:	f000 f8e6 	bl	4428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    425c:	f1ba 0f00 	cmp.w	sl, #0
    4260:	d008      	beq.n	4274 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    4262:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    4266:	7aa0      	ldrb	r0, [r4, #10]
    4268:	2802      	cmp	r0, #2
    426a:	d101      	bne.n	4270 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    426c:	f7ff ff88 	bl	4180 <MPSL_IRQ_CLOCK_Handler+0xbc>
    4270:	f8c5 9014 	str.w	r9, [r5, #20]
    4274:	b13f      	cbz	r7, 4286 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    4276:	7026      	strb	r6, [r4, #0]
    4278:	7aa0      	ldrb	r0, [r4, #10]
    427a:	2802      	cmp	r0, #2
    427c:	d101      	bne.n	4282 <MPSL_IRQ_CLOCK_Handler+0x1be>
    427e:	f7ff ff65 	bl	414c <MPSL_IRQ_CLOCK_Handler+0x88>
    4282:	f000 f8d1 	bl	4428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4286:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    428a:	4802      	ldr	r0, [pc, #8]	; (4294 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    428c:	3008      	adds	r0, #8
    428e:	f009 b8b9 	b.w	d404 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4292:	0000      	.short	0x0000
    4294:	2000002c 	.word	0x2000002c
    4298:	40000c34 	.word	0x40000c34
    429c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    42a0:	4c5c      	ldr	r4, [pc, #368]	; (4414 <MPSL_IRQ_CLOCK_Handler+0x350>)
    42a2:	f04f 0800 	mov.w	r8, #0
    42a6:	4606      	mov	r6, r0
    42a8:	f8c4 8018 	str.w	r8, [r4, #24]
    42ac:	7843      	ldrb	r3, [r0, #1]
    42ae:	7882      	ldrb	r2, [r0, #2]
    42b0:	7800      	ldrb	r0, [r0, #0]
    42b2:	72e0      	strb	r0, [r4, #11]
    42b4:	7163      	strb	r3, [r4, #5]
    42b6:	2701      	movs	r7, #1
    42b8:	71a2      	strb	r2, [r4, #6]
    42ba:	07bd      	lsls	r5, r7, #30
    42bc:	f884 8007 	strb.w	r8, [r4, #7]
    42c0:	2805      	cmp	r0, #5
    42c2:	d224      	bcs.n	430e <MPSL_IRQ_CLOCK_Handler+0x24a>
    42c4:	e8df f000 	tbb	[pc, r0]
    42c8:	1f05030f 	.word	0x1f05030f
    42cc:	0021      	.short	0x0021
    42ce:	61a7      	str	r7, [r4, #24]
    42d0:	e009      	b.n	42e6 <MPSL_IRQ_CLOCK_Handler+0x222>
    42d2:	f000 f8c5 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    42d6:	2101      	movs	r1, #1
    42d8:	4628      	mov	r0, r5
    42da:	f009 f80d 	bl	d2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    42de:	2800      	cmp	r0, #0
    42e0:	d0f9      	beq.n	42d6 <MPSL_IRQ_CLOCK_Handler+0x212>
    42e2:	2002      	movs	r0, #2
    42e4:	61a0      	str	r0, [r4, #24]
    42e6:	f009 f833 	bl	d350 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    42ea:	b1b0      	cbz	r0, 431a <MPSL_IRQ_CLOCK_Handler+0x256>
    42ec:	f000 f9ee 	bl	46cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    42f0:	7e21      	ldrb	r1, [r4, #24]
    42f2:	f001 0103 	and.w	r1, r1, #3
    42f6:	4288      	cmp	r0, r1
    42f8:	d10f      	bne.n	431a <MPSL_IRQ_CLOCK_Handler+0x256>
    42fa:	79b0      	ldrb	r0, [r6, #6]
    42fc:	b150      	cbz	r0, 4314 <MPSL_IRQ_CLOCK_Handler+0x250>
    42fe:	2002      	movs	r0, #2
    4300:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4304:	e06a      	b.n	43dc <MPSL_IRQ_CLOCK_Handler+0x318>
    4306:	4844      	ldr	r0, [pc, #272]	; (4418 <MPSL_IRQ_CLOCK_Handler+0x354>)
    4308:	e7ec      	b.n	42e4 <MPSL_IRQ_CLOCK_Handler+0x220>
    430a:	4844      	ldr	r0, [pc, #272]	; (441c <MPSL_IRQ_CLOCK_Handler+0x358>)
    430c:	e7ea      	b.n	42e4 <MPSL_IRQ_CLOCK_Handler+0x220>
    430e:	f44f 714c 	mov.w	r1, #816	; 0x330
    4312:	e049      	b.n	43a8 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    4314:	f000 f9ae 	bl	4674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4318:	e060      	b.n	43dc <MPSL_IRQ_CLOCK_Handler+0x318>
    431a:	60ef      	str	r7, [r5, #12]
    431c:	f44f 7a82 	mov.w	sl, #260	; 0x104
    4320:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    4324:	69a0      	ldr	r0, [r4, #24]
    4326:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    432a:	f009 f876 	bl	d41a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    432e:	b940      	cbnz	r0, 4342 <MPSL_IRQ_CLOCK_Handler+0x27e>
    4330:	f009 f87d 	bl	d42e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4334:	b928      	cbnz	r0, 4342 <MPSL_IRQ_CLOCK_Handler+0x27e>
    4336:	f009 f891 	bl	d45c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    433a:	b910      	cbnz	r0, 4342 <MPSL_IRQ_CLOCK_Handler+0x27e>
    433c:	f009 f8a2 	bl	d484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4340:	b138      	cbz	r0, 4352 <MPSL_IRQ_CLOCK_Handler+0x28e>
    4342:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    4346:	4836      	ldr	r0, [pc, #216]	; (4420 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    4348:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    434c:	f3c1 3142 	ubfx	r1, r1, #13, #3
    4350:	6001      	str	r1, [r0, #0]
    4352:	f009 f862 	bl	d41a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4356:	b940      	cbnz	r0, 436a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    4358:	f009 f869 	bl	d42e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    435c:	b928      	cbnz	r0, 436a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    435e:	f009 f87d 	bl	d45c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4362:	b910      	cbnz	r0, 436a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    4364:	f009 f88e 	bl	d484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4368:	b110      	cbz	r0, 4370 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    436a:	482d      	ldr	r0, [pc, #180]	; (4420 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    436c:	3010      	adds	r0, #16
    436e:	6007      	str	r7, [r0, #0]
    4370:	60af      	str	r7, [r5, #8]
    4372:	2002      	movs	r0, #2
    4374:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4378:	79b0      	ldrb	r0, [r6, #6]
    437a:	bb78      	cbnz	r0, 43dc <MPSL_IRQ_CLOCK_Handler+0x318>
    437c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    4380:	f010 0f02 	tst.w	r0, #2
    4384:	d00e      	beq.n	43a4 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    4386:	f8df 909c 	ldr.w	r9, [pc, #156]	; 4424 <MPSL_IRQ_CLOCK_Handler+0x360>
    438a:	f8d9 1000 	ldr.w	r1, [r9]
    438e:	43c9      	mvns	r1, r1
    4390:	f341 1700 	sbfx	r7, r1, #4, #1
    4394:	f8d9 1000 	ldr.w	r1, [r9]
    4398:	f041 0110 	orr.w	r1, r1, #16
    439c:	f8c9 1000 	str.w	r1, [r9]
    43a0:	1c7f      	adds	r7, r7, #1
    43a2:	e007      	b.n	43b4 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    43a4:	f240 21f1 	movw	r1, #753	; 0x2f1
    43a8:	206d      	movs	r0, #109	; 0x6d
    43aa:	f000 f9d9 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    43ae:	bf00      	nop
    43b0:	f000 fafc 	bl	49ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    43b4:	4651      	mov	r1, sl
    43b6:	4628      	mov	r0, r5
    43b8:	f008 ff99 	bl	d2ee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    43bc:	2800      	cmp	r0, #0
    43be:	d0f7      	beq.n	43b0 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    43c0:	f000 f958 	bl	4674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    43c4:	b92f      	cbnz	r7, 43d2 <MPSL_IRQ_CLOCK_Handler+0x30e>
    43c6:	f8d9 1000 	ldr.w	r1, [r9]
    43ca:	f021 0110 	bic.w	r1, r1, #16
    43ce:	f8c9 1000 	str.w	r1, [r9]
    43d2:	2002      	movs	r0, #2
    43d4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    43d8:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    43dc:	79a0      	ldrb	r0, [r4, #6]
    43de:	b170      	cbz	r0, 43fe <MPSL_IRQ_CLOCK_Handler+0x33a>
    43e0:	7830      	ldrb	r0, [r6, #0]
    43e2:	b960      	cbnz	r0, 43fe <MPSL_IRQ_CLOCK_Handler+0x33a>
    43e4:	f000 f958 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    43e8:	4606      	mov	r6, r0
    43ea:	f000 fa29 	bl	4840 <mpsl_temperature_get>
    43ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    43f2:	b116      	cbz	r6, 43fa <MPSL_IRQ_CLOCK_Handler+0x336>
    43f4:	e9c4 2004 	strd	r2, r0, [r4, #16]
    43f8:	e001      	b.n	43fe <MPSL_IRQ_CLOCK_Handler+0x33a>
    43fa:	e9c4 0204 	strd	r0, r2, [r4, #16]
    43fe:	2101      	movs	r1, #1
    4400:	4628      	mov	r0, r5
    4402:	f008 ff79 	bl	d2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4406:	b108      	cbz	r0, 440c <MPSL_IRQ_CLOCK_Handler+0x348>
    4408:	f000 f940 	bl	468c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    440c:	f884 800a 	strb.w	r8, [r4, #10]
    4410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4414:	2000002c 	.word	0x2000002c
    4418:	00020001 	.word	0x00020001
    441c:	00030001 	.word	0x00030001
    4420:	4000053c 	.word	0x4000053c
    4424:	e000ed10 	.word	0xe000ed10

00004428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4428:	b510      	push	{r4, lr}
    442a:	f3ef 8410 	mrs	r4, PRIMASK
    442e:	b672      	cpsid	i
    4430:	480a      	ldr	r0, [pc, #40]	; (445c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    4432:	7841      	ldrb	r1, [r0, #1]
    4434:	b129      	cbz	r1, 4442 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    4436:	7841      	ldrb	r1, [r0, #1]
    4438:	1e49      	subs	r1, r1, #1
    443a:	7041      	strb	r1, [r0, #1]
    443c:	7841      	ldrb	r1, [r0, #1]
    443e:	b129      	cbz	r1, 444c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    4440:	e008      	b.n	4454 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4442:	f240 110d 	movw	r1, #269	; 0x10d
    4446:	206d      	movs	r0, #109	; 0x6d
    4448:	f000 f98a 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    444c:	7880      	ldrb	r0, [r0, #2]
    444e:	b908      	cbnz	r0, 4454 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4450:	f000 f930 	bl	46b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4454:	2c00      	cmp	r4, #0
    4456:	d100      	bne.n	445a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    4458:	b662      	cpsie	i
    445a:	bd10      	pop	{r4, pc}
    445c:	2000002c 	.word	0x2000002c

00004460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    4460:	b510      	push	{r4, lr}
    4462:	f3ef 8410 	mrs	r4, PRIMASK
    4466:	b672      	cpsid	i
    4468:	4806      	ldr	r0, [pc, #24]	; (4484 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    446a:	7841      	ldrb	r1, [r0, #1]
    446c:	1c49      	adds	r1, r1, #1
    446e:	7041      	strb	r1, [r0, #1]
    4470:	7840      	ldrb	r0, [r0, #1]
    4472:	2801      	cmp	r0, #1
    4474:	d101      	bne.n	447a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    4476:	f008 ff56 	bl	d326 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    447a:	2c00      	cmp	r4, #0
    447c:	d100      	bne.n	4480 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    447e:	b662      	cpsie	i
    4480:	bd10      	pop	{r4, pc}
    4482:	0000      	.short	0x0000
    4484:	2000002c 	.word	0x2000002c

00004488 <mpsl_clock_hfclk_release>:
    4488:	4805      	ldr	r0, [pc, #20]	; (44a0 <mpsl_clock_hfclk_release+0x18>)
    448a:	b510      	push	{r4, lr}
    448c:	78c1      	ldrb	r1, [r0, #3]
    448e:	b121      	cbz	r1, 449a <mpsl_clock_hfclk_release+0x12>
    4490:	2100      	movs	r1, #0
    4492:	7101      	strb	r1, [r0, #4]
    4494:	70c1      	strb	r1, [r0, #3]
    4496:	f7ff ffc7 	bl	4428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    449a:	2000      	movs	r0, #0
    449c:	bd10      	pop	{r4, pc}
    449e:	0000      	.short	0x0000
    44a0:	2000002c 	.word	0x2000002c

000044a4 <mpsl_clock_hfclk_request>:
    44a4:	b570      	push	{r4, r5, r6, lr}
    44a6:	4c0c      	ldr	r4, [pc, #48]	; (44d8 <mpsl_clock_hfclk_request+0x34>)
    44a8:	78e1      	ldrb	r1, [r4, #3]
    44aa:	b961      	cbnz	r1, 44c6 <mpsl_clock_hfclk_request+0x22>
    44ac:	2501      	movs	r5, #1
    44ae:	70e5      	strb	r5, [r4, #3]
    44b0:	61e0      	str	r0, [r4, #28]
    44b2:	f7ff ffd5 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    44b6:	f000 f8ef 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    44ba:	b130      	cbz	r0, 44ca <mpsl_clock_hfclk_request+0x26>
    44bc:	69e0      	ldr	r0, [r4, #28]
    44be:	b110      	cbz	r0, 44c6 <mpsl_clock_hfclk_request+0x22>
    44c0:	4780      	blx	r0
    44c2:	2000      	movs	r0, #0
    44c4:	61e0      	str	r0, [r4, #28]
    44c6:	2000      	movs	r0, #0
    44c8:	bd70      	pop	{r4, r5, r6, pc}
    44ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    44ce:	7125      	strb	r5, [r4, #4]
    44d0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    44d4:	e7f7      	b.n	44c6 <mpsl_clock_hfclk_request+0x22>
    44d6:	0000      	.short	0x0000
    44d8:	2000002c 	.word	0x2000002c

000044dc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    44dc:	f3ef 8010 	mrs	r0, PRIMASK
    44e0:	b672      	cpsid	i
    44e2:	4904      	ldr	r1, [pc, #16]	; (44f4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    44e4:	788a      	ldrb	r2, [r1, #2]
    44e6:	1c52      	adds	r2, r2, #1
    44e8:	708a      	strb	r2, [r1, #2]
    44ea:	2800      	cmp	r0, #0
    44ec:	d100      	bne.n	44f0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    44ee:	b662      	cpsie	i
    44f0:	4770      	bx	lr
    44f2:	0000      	.short	0x0000
    44f4:	2000002c 	.word	0x2000002c

000044f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    44f8:	b510      	push	{r4, lr}
    44fa:	f3ef 8410 	mrs	r4, PRIMASK
    44fe:	b672      	cpsid	i
    4500:	480a      	ldr	r0, [pc, #40]	; (452c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    4502:	7881      	ldrb	r1, [r0, #2]
    4504:	b129      	cbz	r1, 4512 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    4506:	7881      	ldrb	r1, [r0, #2]
    4508:	1e49      	subs	r1, r1, #1
    450a:	7081      	strb	r1, [r0, #2]
    450c:	7841      	ldrb	r1, [r0, #1]
    450e:	b129      	cbz	r1, 451c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    4510:	e008      	b.n	4524 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    4512:	f240 1125 	movw	r1, #293	; 0x125
    4516:	206d      	movs	r0, #109	; 0x6d
    4518:	f000 f922 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    451c:	7880      	ldrb	r0, [r0, #2]
    451e:	b908      	cbnz	r0, 4524 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    4520:	f000 f8c8 	bl	46b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4524:	2c00      	cmp	r4, #0
    4526:	d100      	bne.n	452a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    4528:	b662      	cpsie	i
    452a:	bd10      	pop	{r4, pc}
    452c:	2000002c 	.word	0x2000002c

00004530 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4534:	0004      	movs	r4, r0
    4536:	f06f 0015 	mvn.w	r0, #21
    453a:	d03c      	beq.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    453c:	7821      	ldrb	r1, [r4, #0]
    453e:	2904      	cmp	r1, #4
    4540:	d839      	bhi.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4542:	2900      	cmp	r1, #0
    4544:	7861      	ldrb	r1, [r4, #1]
    4546:	d038      	beq.n	45ba <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    4548:	2900      	cmp	r1, #0
    454a:	d134      	bne.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    454c:	78a1      	ldrb	r1, [r4, #2]
    454e:	2900      	cmp	r1, #0
    4550:	d131      	bne.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4552:	2000      	movs	r0, #0
    4554:	f008 fe96 	bl	d284 <MPSL_IRQ_RADIO_Handler+0x1e>
    4558:	2000      	movs	r0, #0
    455a:	f008 fe86 	bl	d26a <MPSL_IRQ_RADIO_Handler+0x4>
    455e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    4562:	f04f 31ff 	mov.w	r1, #4294967295
    4566:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    456a:	2600      	movs	r6, #0
    456c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    4570:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    4574:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    4578:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    457c:	4f14      	ldr	r7, [pc, #80]	; (45d0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    457e:	707e      	strb	r6, [r7, #1]
    4580:	88a0      	ldrh	r0, [r4, #4]
    4582:	81b8      	strh	r0, [r7, #12]
    4584:	f008 fec6 	bl	d314 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    4588:	2501      	movs	r5, #1
    458a:	b108      	cbz	r0, 4590 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    458c:	70fd      	strb	r5, [r7, #3]
    458e:	707d      	strb	r5, [r7, #1]
    4590:	2101      	movs	r1, #1
    4592:	4640      	mov	r0, r8
    4594:	f008 feb0 	bl	d2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4598:	b108      	cbz	r0, 459e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    459a:	f000 f877 	bl	468c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    459e:	4620      	mov	r0, r4
    45a0:	f7ff fe7c 	bl	429c <MPSL_IRQ_CLOCK_Handler+0x1d8>
    45a4:	727d      	strb	r5, [r7, #9]
    45a6:	2000      	movs	r0, #0
    45a8:	f008 fe5f 	bl	d26a <MPSL_IRQ_RADIO_Handler+0x4>
    45ac:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    45b0:	4630      	mov	r0, r6
    45b2:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    45b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45ba:	2900      	cmp	r1, #0
    45bc:	d0fb      	beq.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45be:	2920      	cmp	r1, #32
    45c0:	d8f9      	bhi.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45c2:	78a1      	ldrb	r1, [r4, #2]
    45c4:	2921      	cmp	r1, #33	; 0x21
    45c6:	d8f6      	bhi.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45c8:	2901      	cmp	r1, #1
    45ca:	d1c2      	bne.n	4552 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    45cc:	e7f3      	b.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45ce:	0000      	.short	0x0000
    45d0:	2000002c 	.word	0x2000002c

000045d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    45d4:	4801      	ldr	r0, [pc, #4]	; (45dc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    45d6:	8980      	ldrh	r0, [r0, #12]
    45d8:	4770      	bx	lr
    45da:	0000      	.short	0x0000
    45dc:	2000002c 	.word	0x2000002c

000045e0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    45e0:	4802      	ldr	r0, [pc, #8]	; (45ec <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    45e2:	7a80      	ldrb	r0, [r0, #10]
    45e4:	2800      	cmp	r0, #0
    45e6:	d000      	beq.n	45ea <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    45e8:	2001      	movs	r0, #1
    45ea:	4770      	bx	lr
    45ec:	2000002c 	.word	0x2000002c

000045f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    45f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45f2:	4d1f      	ldr	r5, [pc, #124]	; (4670 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    45f4:	7ae8      	ldrb	r0, [r5, #11]
    45f6:	2800      	cmp	r0, #0
    45f8:	d10f      	bne.n	461a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    45fa:	7e28      	ldrb	r0, [r5, #24]
    45fc:	f000 0003 	and.w	r0, r0, #3
    4600:	f008 fe96 	bl	d330 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4604:	2800      	cmp	r0, #0
    4606:	d008      	beq.n	461a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4608:	f3ef 8110 	mrs	r1, PRIMASK
    460c:	b672      	cpsid	i
    460e:	f7ff ffe7 	bl	45e0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4612:	b118      	cbz	r0, 461c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    4614:	2900      	cmp	r1, #0
    4616:	d100      	bne.n	461a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4618:	b662      	cpsie	i
    461a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    461c:	2601      	movs	r6, #1
    461e:	72ae      	strb	r6, [r5, #10]
    4620:	b901      	cbnz	r1, 4624 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    4622:	b662      	cpsie	i
    4624:	2018      	movs	r0, #24
    4626:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    462a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    462e:	61a6      	str	r6, [r4, #24]
    4630:	f44f 7020 	mov.w	r0, #640	; 0x280
    4634:	f8ad 0000 	strh.w	r0, [sp]
    4638:	f8bd 0000 	ldrh.w	r0, [sp]
    463c:	1e41      	subs	r1, r0, #1
    463e:	f8ad 1000 	strh.w	r1, [sp]
    4642:	d2f9      	bcs.n	4638 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    4644:	2700      	movs	r7, #0
    4646:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    464a:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    464e:	4808      	ldr	r0, [pc, #32]	; (4670 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4650:	3008      	adds	r0, #8
    4652:	f008 fed3 	bl	d3fc <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4656:	702f      	strb	r7, [r5, #0]
    4658:	f7ff fd78 	bl	414c <MPSL_IRQ_CLOCK_Handler+0x88>
    465c:	6166      	str	r6, [r4, #20]
    465e:	7968      	ldrb	r0, [r5, #5]
    4660:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4664:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    4668:	2018      	movs	r0, #24
    466a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    466e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4670:	2000002c 	.word	0x2000002c

00004674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    4674:	b510      	push	{r4, lr}
    4676:	4c04      	ldr	r4, [pc, #16]	; (4688 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    4678:	7e20      	ldrb	r0, [r4, #24]
    467a:	f000 0003 	and.w	r0, r0, #3
    467e:	f008 fe57 	bl	d330 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4682:	2800      	cmp	r0, #0
    4684:	d0f8      	beq.n	4678 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    4686:	bd10      	pop	{r4, pc}
    4688:	2000002c 	.word	0x2000002c

0000468c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    468c:	4901      	ldr	r1, [pc, #4]	; (4694 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    468e:	2001      	movs	r0, #1
    4690:	7008      	strb	r0, [r1, #0]
    4692:	4770      	bx	lr
    4694:	2000027c 	.word	0x2000027c

00004698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4698:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    469c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    46a0:	b918      	cbnz	r0, 46aa <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    46a2:	4803      	ldr	r0, [pc, #12]	; (46b0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    46a4:	7800      	ldrb	r0, [r0, #0]
    46a6:	2800      	cmp	r0, #0
    46a8:	d000      	beq.n	46ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    46aa:	2001      	movs	r0, #1
    46ac:	4770      	bx	lr
    46ae:	0000      	.short	0x0000
    46b0:	2000027c 	.word	0x2000027c

000046b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    46b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    46b8:	2101      	movs	r1, #1
    46ba:	6041      	str	r1, [r0, #4]
    46bc:	2100      	movs	r1, #0
    46be:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    46c2:	4801      	ldr	r0, [pc, #4]	; (46c8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    46c4:	7001      	strb	r1, [r0, #0]
    46c6:	4770      	bx	lr
    46c8:	2000027c 	.word	0x2000027c

000046cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    46cc:	4802      	ldr	r0, [pc, #8]	; (46d8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    46ce:	6800      	ldr	r0, [r0, #0]
    46d0:	f000 0003 	and.w	r0, r0, #3
    46d4:	4770      	bx	lr
    46d6:	0000      	.short	0x0000
    46d8:	4000041c 	.word	0x4000041c
    46dc:	b510      	push	{r4, lr}
    46de:	b131      	cbz	r1, 46ee <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    46e0:	2901      	cmp	r1, #1
    46e2:	d007      	beq.n	46f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    46e4:	f240 3102 	movw	r1, #770	; 0x302
    46e8:	a005      	add	r0, pc, #20	; (adr r0, 4700 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    46ea:	f000 f80f 	bl	470c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    46ee:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    46f2:	e001      	b.n	46f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    46f4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    46f8:	f000 0001 	and.w	r0, r0, #1
    46fc:	bd10      	pop	{r4, pc}
    46fe:	0000      	.short	0x0000
    4700:	5f66726e 	.word	0x5f66726e
    4704:	636f6c63 	.word	0x636f6c63
    4708:	00682e6b 	.word	0x00682e6b

0000470c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    470c:	4a02      	ldr	r2, [pc, #8]	; (4718 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    470e:	6852      	ldr	r2, [r2, #4]
    4710:	b102      	cbz	r2, 4714 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    4712:	4710      	bx	r2
    4714:	e7fe      	b.n	4714 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    4716:	0000      	.short	0x0000
    4718:	2000004c 	.word	0x2000004c
    471c:	4806      	ldr	r0, [pc, #24]	; (4738 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    471e:	b510      	push	{r4, lr}
    4720:	2100      	movs	r1, #0
    4722:	6001      	str	r1, [r0, #0]
    4724:	2101      	movs	r1, #1
    4726:	6001      	str	r1, [r0, #0]
    4728:	4608      	mov	r0, r1
    472a:	f008 fe28 	bl	d37e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    472e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4732:	2001      	movs	r0, #1
    4734:	f008 be16 	b.w	d364 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4738:	40001ffc 	.word	0x40001ffc
    473c:	4807      	ldr	r0, [pc, #28]	; (475c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    473e:	b510      	push	{r4, lr}
    4740:	2101      	movs	r1, #1
    4742:	6041      	str	r1, [r0, #4]
    4744:	1e89      	subs	r1, r1, #2
    4746:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    474a:	200c      	movs	r0, #12
    474c:	f008 fe17 	bl	d37e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4754:	200c      	movs	r0, #12
    4756:	f008 be05 	b.w	d364 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    475a:	0000      	.short	0x0000
    475c:	4000c000 	.word	0x4000c000

00004760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    4760:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    4762:	4a10      	ldr	r2, [pc, #64]	; (47a4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    4764:	6855      	ldr	r5, [r2, #4]
    4766:	b1e5      	cbz	r5, 47a2 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    4768:	2200      	movs	r2, #0
    476a:	4603      	mov	r3, r0
    476c:	466e      	mov	r6, sp
    476e:	240a      	movs	r4, #10
    4770:	e003      	b.n	477a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    4772:	fbb0 f0f4 	udiv	r0, r0, r4
    4776:	1c52      	adds	r2, r2, #1
    4778:	b2d2      	uxtb	r2, r2
    477a:	2800      	cmp	r0, #0
    477c:	d1f9      	bne.n	4772 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    477e:	54b0      	strb	r0, [r6, r2]
    4780:	e00a      	b.n	4798 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    4782:	bf00      	nop
    4784:	fbb3 f0f4 	udiv	r0, r3, r4
    4788:	fb04 3010 	mls	r0, r4, r0, r3
    478c:	fbb3 f3f4 	udiv	r3, r3, r4
    4790:	1e52      	subs	r2, r2, #1
    4792:	b2d2      	uxtb	r2, r2
    4794:	3030      	adds	r0, #48	; 0x30
    4796:	54b0      	strb	r0, [r6, r2]
    4798:	2a00      	cmp	r2, #0
    479a:	d1f3      	bne.n	4784 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    479c:	4630      	mov	r0, r6
    479e:	47a8      	blx	r5
    47a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    47a2:	e7fe      	b.n	47a2 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    47a4:	2000004c 	.word	0x2000004c

000047a8 <mpsl_init>:
    47a8:	b570      	push	{r4, r5, r6, lr}
    47aa:	4c17      	ldr	r4, [pc, #92]	; (4808 <mpsl_init+0x60>)
    47ac:	4606      	mov	r6, r0
    47ae:	460d      	mov	r5, r1
    47b0:	7860      	ldrb	r0, [r4, #1]
    47b2:	b110      	cbz	r0, 47ba <mpsl_init+0x12>
    47b4:	f04f 30ff 	mov.w	r0, #4294967295
    47b8:	bd70      	pop	{r4, r5, r6, pc}
    47ba:	b906      	cbnz	r6, 47be <mpsl_init+0x16>
    47bc:	4e13      	ldr	r6, [pc, #76]	; (480c <mpsl_init+0x64>)
    47be:	6062      	str	r2, [r4, #4]
    47c0:	7025      	strb	r5, [r4, #0]
    47c2:	f7ff ffab 	bl	471c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    47c6:	f7ff ffb9 	bl	473c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    47ca:	4630      	mov	r0, r6
    47cc:	f7ff feb0 	bl	4530 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    47d0:	0006      	movs	r6, r0
    47d2:	d1f1      	bne.n	47b8 <mpsl_init+0x10>
    47d4:	f7fe ff36 	bl	3644 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    47d8:	f7ff ff0a 	bl	45f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    47dc:	f008 fd1c 	bl	d218 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    47e0:	4628      	mov	r0, r5
    47e2:	f008 fdbf 	bl	d364 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    47e6:	2001      	movs	r0, #1
    47e8:	2d00      	cmp	r5, #0
    47ea:	db09      	blt.n	4800 <mpsl_init+0x58>
    47ec:	f005 011f 	and.w	r1, r5, #31
    47f0:	fa00 f101 	lsl.w	r1, r0, r1
    47f4:	096a      	lsrs	r2, r5, #5
    47f6:	0092      	lsls	r2, r2, #2
    47f8:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    47fc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    4800:	7060      	strb	r0, [r4, #1]
    4802:	4630      	mov	r0, r6
    4804:	bd70      	pop	{r4, r5, r6, pc}
    4806:	0000      	.short	0x0000
    4808:	2000004c 	.word	0x2000004c
    480c:	0000d3a0 	.word	0x0000d3a0

00004810 <mpsl_is_initialized>:
    4810:	4801      	ldr	r0, [pc, #4]	; (4818 <mpsl_is_initialized+0x8>)
    4812:	7840      	ldrb	r0, [r0, #1]
    4814:	4770      	bx	lr
    4816:	0000      	.short	0x0000
    4818:	2000004c 	.word	0x2000004c

0000481c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    481c:	4807      	ldr	r0, [pc, #28]	; (483c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    481e:	f990 0000 	ldrsb.w	r0, [r0]
    4822:	2800      	cmp	r0, #0
    4824:	db09      	blt.n	483a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    4826:	f000 021f 	and.w	r2, r0, #31
    482a:	2101      	movs	r1, #1
    482c:	4091      	lsls	r1, r2
    482e:	0940      	lsrs	r0, r0, #5
    4830:	0080      	lsls	r0, r0, #2
    4832:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    4836:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    483a:	4770      	bx	lr
    483c:	2000004c 	.word	0x2000004c

00004840 <mpsl_temperature_get>:
    4840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4844:	2601      	movs	r6, #1
    4846:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    484a:	0331      	lsls	r1, r6, #12
    484c:	f04f 0800 	mov.w	r8, #0
    4850:	4640      	mov	r0, r8
    4852:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    4856:	f3bf 8f4f 	dsb	sy
    485a:	f3bf 8f6f 	isb	sy
    485e:	4c16      	ldr	r4, [pc, #88]	; (48b8 <mpsl_temperature_get+0x78>)
    4860:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    4864:	200c      	movs	r0, #12
    4866:	f008 fda9 	bl	d3bc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    486a:	4d14      	ldr	r5, [pc, #80]	; (48bc <mpsl_temperature_get+0x7c>)
    486c:	6828      	ldr	r0, [r5, #0]
    486e:	43c0      	mvns	r0, r0
    4870:	f340 1700 	sbfx	r7, r0, #4, #1
    4874:	6828      	ldr	r0, [r5, #0]
    4876:	f040 0010 	orr.w	r0, r0, #16
    487a:	6028      	str	r0, [r5, #0]
    487c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    4880:	6026      	str	r6, [r4, #0]
    4882:	1c7f      	adds	r7, r7, #1
    4884:	e002      	b.n	488c <mpsl_temperature_get+0x4c>
    4886:	bf00      	nop
    4888:	f000 f890 	bl	49ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    488c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4890:	2800      	cmp	r0, #0
    4892:	d0f9      	beq.n	4888 <mpsl_temperature_get+0x48>
    4894:	b91f      	cbnz	r7, 489e <mpsl_temperature_get+0x5e>
    4896:	6828      	ldr	r0, [r5, #0]
    4898:	f020 0010 	bic.w	r0, r0, #16
    489c:	6028      	str	r0, [r5, #0]
    489e:	4808      	ldr	r0, [pc, #32]	; (48c0 <mpsl_temperature_get+0x80>)
    48a0:	6805      	ldr	r5, [r0, #0]
    48a2:	6066      	str	r6, [r4, #4]
    48a4:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    48a8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    48ac:	200c      	movs	r0, #12
    48ae:	f008 fd85 	bl	d3bc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    48b2:	4628      	mov	r0, r5
    48b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    48b8:	4000c000 	.word	0x4000c000
    48bc:	e000ed10 	.word	0xe000ed10
    48c0:	4000c508 	.word	0x4000c508

000048c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    48c4:	b510      	push	{r4, lr}
    48c6:	4602      	mov	r2, r0
    48c8:	2005      	movs	r0, #5
    48ca:	490c      	ldr	r1, [pc, #48]	; (48fc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    48cc:	e004      	b.n	48d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    48ce:	bf00      	nop
    48d0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    48d4:	791b      	ldrb	r3, [r3, #4]
    48d6:	b133      	cbz	r3, 48e6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    48d8:	1e40      	subs	r0, r0, #1
    48da:	b2c0      	uxtb	r0, r0
    48dc:	d2f8      	bcs.n	48d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    48de:	214b      	movs	r1, #75	; 0x4b
    48e0:	2069      	movs	r0, #105	; 0x69
    48e2:	f7ff ff3d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    48e6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    48ea:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    48ee:	2200      	movs	r2, #0
    48f0:	714a      	strb	r2, [r1, #5]
    48f2:	718a      	strb	r2, [r1, #6]
    48f4:	2201      	movs	r2, #1
    48f6:	710a      	strb	r2, [r1, #4]
    48f8:	bd10      	pop	{r4, pc}
    48fa:	0000      	.short	0x0000
    48fc:	20000d58 	.word	0x20000d58

00004900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4900:	b510      	push	{r4, lr}
    4902:	2805      	cmp	r0, #5
    4904:	d301      	bcc.n	490a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    4906:	215a      	movs	r1, #90	; 0x5a
    4908:	e006      	b.n	4918 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    490a:	490a      	ldr	r1, [pc, #40]	; (4934 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    490c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4910:	7901      	ldrb	r1, [r0, #4]
    4912:	2901      	cmp	r1, #1
    4914:	d003      	beq.n	491e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    4916:	215b      	movs	r1, #91	; 0x5b
    4918:	2069      	movs	r0, #105	; 0x69
    491a:	f7ff ff21 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    491e:	7941      	ldrb	r1, [r0, #5]
    4920:	7982      	ldrb	r2, [r0, #6]
    4922:	1c49      	adds	r1, r1, #1
    4924:	b2c9      	uxtb	r1, r1
    4926:	428a      	cmp	r2, r1
    4928:	d000      	beq.n	492c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    492a:	7141      	strb	r1, [r0, #5]
    492c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4930:	f7ff bf74 	b.w	481c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4934:	20000d58 	.word	0x20000d58

00004938 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4938:	b570      	push	{r4, r5, r6, lr}
    493a:	2505      	movs	r5, #5
    493c:	4e0e      	ldr	r6, [pc, #56]	; (4978 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    493e:	4c0f      	ldr	r4, [pc, #60]	; (497c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4940:	e016      	b.n	4970 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4942:	7821      	ldrb	r1, [r4, #0]
    4944:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4948:	7902      	ldrb	r2, [r0, #4]
    494a:	2a01      	cmp	r2, #1
    494c:	d108      	bne.n	4960 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    494e:	7942      	ldrb	r2, [r0, #5]
    4950:	7983      	ldrb	r3, [r0, #6]
    4952:	429a      	cmp	r2, r3
    4954:	d004      	beq.n	4960 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4956:	7942      	ldrb	r2, [r0, #5]
    4958:	7182      	strb	r2, [r0, #6]
    495a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    495e:	4780      	blx	r0
    4960:	7820      	ldrb	r0, [r4, #0]
    4962:	1c40      	adds	r0, r0, #1
    4964:	b2c0      	uxtb	r0, r0
    4966:	7020      	strb	r0, [r4, #0]
    4968:	2805      	cmp	r0, #5
    496a:	d301      	bcc.n	4970 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    496c:	2000      	movs	r0, #0
    496e:	7020      	strb	r0, [r4, #0]
    4970:	1e6d      	subs	r5, r5, #1
    4972:	b2ed      	uxtb	r5, r5
    4974:	d2e5      	bcs.n	4942 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    4976:	bd70      	pop	{r4, r5, r6, pc}
    4978:	20000d58 	.word	0x20000d58
    497c:	2000027d 	.word	0x2000027d

00004980 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    4980:	b500      	push	{lr}
    4982:	f008 fd4a 	bl	d41a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4986:	b940      	cbnz	r0, 499a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4988:	f008 fd51 	bl	d42e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    498c:	b928      	cbnz	r0, 499a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    498e:	f008 fd65 	bl	d45c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4992:	b910      	cbnz	r0, 499a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4994:	f008 fd76 	bl	d484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4998:	b108      	cbz	r0, 499e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    499a:	4802      	ldr	r0, [pc, #8]	; (49a4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    499c:	bd00      	pop	{pc}
    499e:	4802      	ldr	r0, [pc, #8]	; (49a8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    49a0:	bd00      	pop	{pc}
    49a2:	0000      	.short	0x0000
    49a4:	4000050c 	.word	0x4000050c
    49a8:	4001e700 	.word	0x4001e700

000049ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    49ac:	b510      	push	{r4, lr}
    49ae:	f008 fd69 	bl	d484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    49b2:	b330      	cbz	r0, 4a02 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    49b4:	f3ef 8010 	mrs	r0, PRIMASK
    49b8:	b1c8      	cbz	r0, 49ee <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    49ba:	2100      	movs	r1, #0
    49bc:	b672      	cpsid	i
    49be:	4812      	ldr	r0, [pc, #72]	; (4a08 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    49c0:	6802      	ldr	r2, [r0, #0]
    49c2:	6803      	ldr	r3, [r0, #0]
    49c4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    49c8:	f043 0310 	orr.w	r3, r3, #16
    49cc:	6003      	str	r3, [r0, #0]
    49ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    49d2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    49d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    49da:	431c      	orrs	r4, r3
    49dc:	d000      	beq.n	49e0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    49de:	bf40      	sev
    49e0:	bf20      	wfe
    49e2:	bf00      	nop
    49e4:	bf00      	nop
    49e6:	bf00      	nop
    49e8:	bf00      	nop
    49ea:	b112      	cbz	r2, 49f2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    49ec:	e005      	b.n	49fa <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    49ee:	2101      	movs	r1, #1
    49f0:	e7e4      	b.n	49bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    49f2:	6802      	ldr	r2, [r0, #0]
    49f4:	f022 0210 	bic.w	r2, r2, #16
    49f8:	6002      	str	r2, [r0, #0]
    49fa:	2900      	cmp	r1, #0
    49fc:	d000      	beq.n	4a00 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    49fe:	b662      	cpsie	i
    4a00:	bd10      	pop	{r4, pc}
    4a02:	bf20      	wfe
    4a04:	bd10      	pop	{r4, pc}
    4a06:	0000      	.short	0x0000
    4a08:	e000ed10 	.word	0xe000ed10

00004a0c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4a0c:	0000d6f5 0000d711 0000d6ff 0000d70b     ................
    4a1c:	0000d6f9 0000d6f3 0000d6f1 0000d717     ................
    4a2c:	0000d705 0000d6eb 0000d6e3 0000d6e7     ................
    4a3c:	0000d6dd                                ....

00004a40 <mpsl_fem_disable>:
    4a40:	4801      	ldr	r0, [pc, #4]	; (4a48 <mpsl_fem_disable+0x8>)
    4a42:	6800      	ldr	r0, [r0, #0]
    4a44:	6800      	ldr	r0, [r0, #0]
    4a46:	4700      	bx	r0
    4a48:	20000054 	.word	0x20000054

00004a4c <mpsl_fem_lna_configuration_clear>:
    4a4c:	4801      	ldr	r0, [pc, #4]	; (4a54 <mpsl_fem_lna_configuration_clear+0x8>)
    4a4e:	6800      	ldr	r0, [r0, #0]
    4a50:	6900      	ldr	r0, [r0, #16]
    4a52:	4700      	bx	r0
    4a54:	20000054 	.word	0x20000054

00004a58 <mpsl_fem_lna_configuration_set>:
    4a58:	4a01      	ldr	r2, [pc, #4]	; (4a60 <mpsl_fem_lna_configuration_set+0x8>)
    4a5a:	6812      	ldr	r2, [r2, #0]
    4a5c:	6892      	ldr	r2, [r2, #8]
    4a5e:	4710      	bx	r2
    4a60:	20000054 	.word	0x20000054

00004a64 <mpsl_fem_pa_configuration_clear>:
    4a64:	4801      	ldr	r0, [pc, #4]	; (4a6c <mpsl_fem_pa_configuration_clear+0x8>)
    4a66:	6800      	ldr	r0, [r0, #0]
    4a68:	68c0      	ldr	r0, [r0, #12]
    4a6a:	4700      	bx	r0
    4a6c:	20000054 	.word	0x20000054

00004a70 <mpsl_fem_pa_configuration_set>:
    4a70:	4a01      	ldr	r2, [pc, #4]	; (4a78 <mpsl_fem_pa_configuration_set+0x8>)
    4a72:	6812      	ldr	r2, [r2, #0]
    4a74:	6852      	ldr	r2, [r2, #4]
    4a76:	4710      	bx	r2
    4a78:	20000054 	.word	0x20000054

00004a7c <mpsl_fem_pa_is_configured>:
    4a7c:	4901      	ldr	r1, [pc, #4]	; (4a84 <mpsl_fem_pa_is_configured+0x8>)
    4a7e:	6809      	ldr	r1, [r1, #0]
    4a80:	6a09      	ldr	r1, [r1, #32]
    4a82:	4708      	bx	r1
    4a84:	20000054 	.word	0x20000054

00004a88 <mpsl_fem_device_config_254_apply_get>:
    4a88:	4801      	ldr	r0, [pc, #4]	; (4a90 <mpsl_fem_device_config_254_apply_get+0x8>)
    4a8a:	7800      	ldrb	r0, [r0, #0]
    4a8c:	4770      	bx	lr
    4a8e:	0000      	.short	0x0000
    4a90:	2000027e 	.word	0x2000027e
    4a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4a96:	4c17      	ldr	r4, [pc, #92]	; (4af4 <mpsl_fem_device_config_254_apply_get+0x6c>)
    4a98:	7a20      	ldrb	r0, [r4, #8]
    4a9a:	2802      	cmp	r0, #2
    4a9c:	d200      	bcs.n	4aa0 <mpsl_fem_device_config_254_apply_get+0x18>
    4a9e:	2002      	movs	r0, #2
    4aa0:	f88d 0001 	strb.w	r0, [sp, #1]
    4aa4:	79e0      	ldrb	r0, [r4, #7]
    4aa6:	2803      	cmp	r0, #3
    4aa8:	d200      	bcs.n	4aac <mpsl_fem_device_config_254_apply_get+0x24>
    4aaa:	2003      	movs	r0, #3
    4aac:	f88d 0000 	strb.w	r0, [sp]
    4ab0:	79a0      	ldrb	r0, [r4, #6]
    4ab2:	f8ad 0004 	strh.w	r0, [sp, #4]
    4ab6:	7960      	ldrb	r0, [r4, #5]
    4ab8:	f8ad 0002 	strh.w	r0, [sp, #2]
    4abc:	4668      	mov	r0, sp
    4abe:	f006 ffd5 	bl	ba6c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4ac2:	b108      	cbz	r0, 4ac8 <mpsl_fem_device_config_254_apply_get+0x40>
    4ac4:	2180      	movs	r1, #128	; 0x80
    4ac6:	e010      	b.n	4aea <mpsl_fem_device_config_254_apply_get+0x62>
    4ac8:	68e0      	ldr	r0, [r4, #12]
    4aca:	9002      	str	r0, [sp, #8]
    4acc:	a802      	add	r0, sp, #8
    4ace:	f006 ffe3 	bl	ba98 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4ad2:	b108      	cbz	r0, 4ad8 <mpsl_fem_device_config_254_apply_get+0x50>
    4ad4:	2184      	movs	r1, #132	; 0x84
    4ad6:	e008      	b.n	4aea <mpsl_fem_device_config_254_apply_get+0x62>
    4ad8:	4807      	ldr	r0, [pc, #28]	; (4af8 <mpsl_fem_device_config_254_apply_get+0x70>)
    4ada:	6800      	ldr	r0, [r0, #0]
    4adc:	9003      	str	r0, [sp, #12]
    4ade:	a803      	add	r0, sp, #12
    4ae0:	f00b f9fc 	bl	fedc <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4ae4:	2800      	cmp	r0, #0
    4ae6:	d003      	beq.n	4af0 <mpsl_fem_device_config_254_apply_get+0x68>
    4ae8:	2188      	movs	r1, #136	; 0x88
    4aea:	2003      	movs	r0, #3
    4aec:	f000 f914 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4af0:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4af2:	0000      	.short	0x0000
    4af4:	20000d80 	.word	0x20000d80
    4af8:	00004e04 	.word	0x00004e04
    4afc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4afe:	4604      	mov	r4, r0
    4b00:	460e      	mov	r6, r1
    4b02:	f100 0003 	add.w	r0, r0, #3
    4b06:	f020 0003 	bic.w	r0, r0, #3
    4b0a:	f04f 0100 	mov.w	r1, #0
    4b0e:	e9cd 0100 	strd	r0, r1, [sp]
    4b12:	7831      	ldrb	r1, [r6, #0]
    4b14:	0015      	movs	r5, r2
    4b16:	f88d 1005 	strb.w	r1, [sp, #5]
    4b1a:	d000      	beq.n	4b1e <mpsl_fem_device_config_254_apply_get+0x96>
    4b1c:	2000      	movs	r0, #0
    4b1e:	a901      	add	r1, sp, #4
    4b20:	f000 faea 	bl	50f8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    4b24:	9900      	ldr	r1, [sp, #0]
    4b26:	4408      	add	r0, r1
    4b28:	490c      	ldr	r1, [pc, #48]	; (4b5c <mpsl_fem_device_config_254_apply_get+0xd4>)
    4b2a:	9000      	str	r0, [sp, #0]
    4b2c:	78c9      	ldrb	r1, [r1, #3]
    4b2e:	b149      	cbz	r1, 4b44 <mpsl_fem_device_config_254_apply_get+0xbc>
    4b30:	7c31      	ldrb	r1, [r6, #16]
    4b32:	b139      	cbz	r1, 4b44 <mpsl_fem_device_config_254_apply_get+0xbc>
    4b34:	2225      	movs	r2, #37	; 0x25
    4b36:	b105      	cbz	r5, 4b3a <mpsl_fem_device_config_254_apply_get+0xb2>
    4b38:	2000      	movs	r0, #0
    4b3a:	f000 fd25 	bl	5588 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4b3e:	9900      	ldr	r1, [sp, #0]
    4b40:	4408      	add	r0, r1
    4b42:	9000      	str	r0, [sp, #0]
    4b44:	462a      	mov	r2, r5
    4b46:	4631      	mov	r1, r6
    4b48:	4668      	mov	r0, sp
    4b4a:	f008 fde6 	bl	d71a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    4b4e:	9800      	ldr	r0, [sp, #0]
    4b50:	1dc0      	adds	r0, r0, #7
    4b52:	f020 0007 	bic.w	r0, r0, #7
    4b56:	9000      	str	r0, [sp, #0]
    4b58:	1b00      	subs	r0, r0, r4
    4b5a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4b5c:	20000058 	.word	0x20000058

00004b60 <sdc_build_revision_get>:
    4b60:	b510      	push	{r4, lr}
    4b62:	b128      	cbz	r0, 4b70 <sdc_build_revision_get+0x10>
    4b64:	2214      	movs	r2, #20
    4b66:	4904      	ldr	r1, [pc, #16]	; (4b78 <sdc_build_revision_get+0x18>)
    4b68:	f008 fcde 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4b6c:	2000      	movs	r0, #0
    4b6e:	bd10      	pop	{r4, pc}
    4b70:	f06f 0015 	mvn.w	r0, #21
    4b74:	bd10      	pop	{r4, pc}
    4b76:	0000      	.short	0x0000
    4b78:	00004e20 	.word	0x00004e20

00004b7c <sdc_cfg_set>:
    4b7c:	b570      	push	{r4, r5, r6, lr}
    4b7e:	0003      	movs	r3, r0
    4b80:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    4b84:	d103      	bne.n	4b8e <sdc_cfg_set+0x12>
    4b86:	4c28      	ldr	r4, [pc, #160]	; (4c28 <sdc_cfg_set+0xac>)
    4b88:	7863      	ldrb	r3, [r4, #1]
    4b8a:	b10b      	cbz	r3, 4b90 <sdc_cfg_set+0x14>
    4b8c:	1180      	asrs	r0, r0, #6
    4b8e:	bd70      	pop	{r4, r5, r6, pc}
    4b90:	b319      	cbz	r1, 4bda <sdc_cfg_set+0x5e>
    4b92:	f06f 0515 	mvn.w	r5, #21
    4b96:	b38a      	cbz	r2, 4bfc <sdc_cfg_set+0x80>
    4b98:	4b24      	ldr	r3, [pc, #144]	; (4c2c <sdc_cfg_set+0xb0>)
    4b9a:	290b      	cmp	r1, #11
    4b9c:	d23e      	bcs.n	4c1c <sdc_cfg_set+0xa0>
    4b9e:	e8df f001 	tbb	[pc, r1]
    4ba2:	063d      	.short	0x063d
    4ba4:	13100c09 	.word	0x13100c09
    4ba8:	2818251d 	.word	0x2818251d
    4bac:	002e      	.short	0x002e
    4bae:	7810      	ldrb	r0, [r2, #0]
    4bb0:	7018      	strb	r0, [r3, #0]
    4bb2:	e028      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bb4:	7810      	ldrb	r0, [r2, #0]
    4bb6:	7058      	strb	r0, [r3, #1]
    4bb8:	e025      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bba:	6810      	ldr	r0, [r2, #0]
    4bbc:	f8c3 0005 	str.w	r0, [r3, #5]
    4bc0:	e021      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bc2:	6810      	ldr	r0, [r2, #0]
    4bc4:	60d8      	str	r0, [r3, #12]
    4bc6:	e01e      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bc8:	7811      	ldrb	r1, [r2, #0]
    4bca:	2900      	cmp	r1, #0
    4bcc:	d1df      	bne.n	4b8e <sdc_cfg_set+0x12>
    4bce:	7099      	strb	r1, [r3, #2]
    4bd0:	e019      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bd2:	7811      	ldrb	r1, [r2, #0]
    4bd4:	2900      	cmp	r1, #0
    4bd6:	d1da      	bne.n	4b8e <sdc_cfg_set+0x12>
    4bd8:	70d9      	strb	r1, [r3, #3]
    4bda:	e014      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bdc:	78e0      	ldrb	r0, [r4, #3]
    4bde:	b110      	cbz	r0, 4be6 <sdc_cfg_set+0x6a>
    4be0:	7810      	ldrb	r0, [r2, #0]
    4be2:	2802      	cmp	r0, #2
    4be4:	d31a      	bcc.n	4c1c <sdc_cfg_set+0xa0>
    4be6:	7810      	ldrb	r0, [r2, #0]
    4be8:	7418      	strb	r0, [r3, #16]
    4bea:	e00c      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bec:	8810      	ldrh	r0, [r2, #0]
    4bee:	8258      	strh	r0, [r3, #18]
    4bf0:	e009      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bf2:	7811      	ldrb	r1, [r2, #0]
    4bf4:	2900      	cmp	r1, #0
    4bf6:	d1ca      	bne.n	4b8e <sdc_cfg_set+0x12>
    4bf8:	7119      	strb	r1, [r3, #4]
    4bfa:	e004      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bfc:	e00e      	b.n	4c1c <sdc_cfg_set+0xa0>
    4bfe:	7810      	ldrb	r0, [r2, #0]
    4c00:	2802      	cmp	r0, #2
    4c02:	d30b      	bcc.n	4c1c <sdc_cfg_set+0xa0>
    4c04:	7518      	strb	r0, [r3, #20]
    4c06:	2201      	movs	r2, #1
    4c08:	4908      	ldr	r1, [pc, #32]	; (4c2c <sdc_cfg_set+0xb0>)
    4c0a:	2000      	movs	r0, #0
    4c0c:	f7ff ff76 	bl	4afc <mpsl_fem_device_config_254_apply_get+0x74>
    4c10:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4c14:	db04      	blt.n	4c20 <sdc_cfg_set+0xa4>
    4c16:	f06f 000b 	mvn.w	r0, #11
    4c1a:	bd70      	pop	{r4, r5, r6, pc}
    4c1c:	4628      	mov	r0, r5
    4c1e:	bd70      	pop	{r4, r5, r6, pc}
    4c20:	2101      	movs	r1, #1
    4c22:	70a1      	strb	r1, [r4, #2]
    4c24:	bd70      	pop	{r4, r5, r6, pc}
    4c26:	0000      	.short	0x0000
    4c28:	20000058 	.word	0x20000058
    4c2c:	20000d80 	.word	0x20000d80

00004c30 <sdc_enable>:
    4c30:	b570      	push	{r4, r5, r6, lr}
    4c32:	460c      	mov	r4, r1
    4c34:	0005      	movs	r5, r0
    4c36:	d019      	beq.n	4c6c <sdc_enable+0x3c>
    4c38:	b1c4      	cbz	r4, 4c6c <sdc_enable+0x3c>
    4c3a:	f000 f925 	bl	4e88 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4c3e:	b1c0      	cbz	r0, 4c72 <sdc_enable+0x42>
    4c40:	4628      	mov	r0, r5
    4c42:	f7ff fe3f 	bl	48c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4c46:	4d0c      	ldr	r5, [pc, #48]	; (4c78 <sdc_enable+0x48>)
    4c48:	2200      	movs	r2, #0
    4c4a:	490c      	ldr	r1, [pc, #48]	; (4c7c <sdc_enable+0x4c>)
    4c4c:	7028      	strb	r0, [r5, #0]
    4c4e:	4620      	mov	r0, r4
    4c50:	f7ff ff54 	bl	4afc <mpsl_fem_device_config_254_apply_get+0x74>
    4c54:	f00b fd43 	bl	106de <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4c58:	2100      	movs	r1, #0
    4c5a:	7828      	ldrb	r0, [r5, #0]
    4c5c:	f007 f91a 	bl	be94 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4c60:	f7ff ff18 	bl	4a94 <mpsl_fem_device_config_254_apply_get+0xc>
    4c64:	2001      	movs	r0, #1
    4c66:	7068      	strb	r0, [r5, #1]
    4c68:	2000      	movs	r0, #0
    4c6a:	bd70      	pop	{r4, r5, r6, pc}
    4c6c:	f06f 0015 	mvn.w	r0, #21
    4c70:	bd70      	pop	{r4, r5, r6, pc}
    4c72:	f04f 30ff 	mov.w	r0, #4294967295
    4c76:	bd70      	pop	{r4, r5, r6, pc}
    4c78:	20000058 	.word	0x20000058
    4c7c:	20000d80 	.word	0x20000d80

00004c80 <sdc_init>:
    4c80:	b530      	push	{r4, r5, lr}
    4c82:	b087      	sub	sp, #28
    4c84:	0005      	movs	r5, r0
    4c86:	d00c      	beq.n	4ca2 <sdc_init+0x22>
    4c88:	f7ff fdc2 	bl	4810 <mpsl_is_initialized>
    4c8c:	f04f 34ff 	mov.w	r4, #4294967295
    4c90:	b120      	cbz	r0, 4c9c <sdc_init+0x1c>
    4c92:	f7ff fc9f 	bl	45d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4c96:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4c9a:	d905      	bls.n	4ca8 <sdc_init+0x28>
    4c9c:	4620      	mov	r0, r4
    4c9e:	b007      	add	sp, #28
    4ca0:	bd30      	pop	{r4, r5, pc}
    4ca2:	f06f 0015 	mvn.w	r0, #21
    4ca6:	e7fa      	b.n	4c9e <sdc_init+0x1e>
    4ca8:	4c15      	ldr	r4, [pc, #84]	; (4d00 <sdc_init+0x80>)
    4caa:	4816      	ldr	r0, [pc, #88]	; (4d04 <sdc_init+0x84>)
    4cac:	6065      	str	r5, [r4, #4]
    4cae:	f000 f9e5 	bl	507c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4cb2:	2000      	movs	r0, #0
    4cb4:	7060      	strb	r0, [r4, #1]
    4cb6:	70a0      	strb	r0, [r4, #2]
    4cb8:	70e0      	strb	r0, [r4, #3]
    4cba:	4601      	mov	r1, r0
    4cbc:	2218      	movs	r2, #24
    4cbe:	4668      	mov	r0, sp
    4cc0:	f008 fcac 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4cc4:	2218      	movs	r2, #24
    4cc6:	4910      	ldr	r1, [pc, #64]	; (4d08 <sdc_init+0x88>)
    4cc8:	4668      	mov	r0, sp
    4cca:	f008 fc2d 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4cce:	2218      	movs	r2, #24
    4cd0:	4669      	mov	r1, sp
    4cd2:	480e      	ldr	r0, [pc, #56]	; (4d0c <sdc_init+0x8c>)
    4cd4:	f008 fc28 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4cd8:	f3ef 8410 	mrs	r4, PRIMASK
    4cdc:	b672      	cpsid	i
    4cde:	480c      	ldr	r0, [pc, #48]	; (4d10 <sdc_init+0x90>)
    4ce0:	f06f 010c 	mvn.w	r1, #12
    4ce4:	f000 fcf2 	bl	56cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4ce8:	480a      	ldr	r0, [pc, #40]	; (4d14 <sdc_init+0x94>)
    4cea:	f000 fdb3 	bl	5854 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4cee:	b118      	cbz	r0, 4cf8 <sdc_init+0x78>
    4cf0:	2196      	movs	r1, #150	; 0x96
    4cf2:	2003      	movs	r0, #3
    4cf4:	f000 f810 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cf8:	b904      	cbnz	r4, 4cfc <sdc_init+0x7c>
    4cfa:	b662      	cpsie	i
    4cfc:	2000      	movs	r0, #0
    4cfe:	e7ce      	b.n	4c9e <sdc_init+0x1e>
    4d00:	20000058 	.word	0x20000058
    4d04:	00004a95 	.word	0x00004a95
    4d08:	00004e08 	.word	0x00004e08
    4d0c:	20000d80 	.word	0x20000d80
    4d10:	4000c000 	.word	0x4000c000
    4d14:	00004eb5 	.word	0x00004eb5

00004d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    4d18:	b50e      	push	{r1, r2, r3, lr}
    4d1a:	b672      	cpsid	i
    4d1c:	4a15      	ldr	r2, [pc, #84]	; (4d74 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4d1e:	6855      	ldr	r5, [r2, #4]
    4d20:	b1d5      	cbz	r5, 4d58 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    4d22:	2200      	movs	r2, #0
    4d24:	4603      	mov	r3, r0
    4d26:	466e      	mov	r6, sp
    4d28:	240a      	movs	r4, #10
    4d2a:	e003      	b.n	4d34 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4d2c:	fbb0 f0f4 	udiv	r0, r0, r4
    4d30:	1c52      	adds	r2, r2, #1
    4d32:	b2d2      	uxtb	r2, r2
    4d34:	2800      	cmp	r0, #0
    4d36:	d1f9      	bne.n	4d2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4d38:	54b0      	strb	r0, [r6, r2]
    4d3a:	e009      	b.n	4d50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    4d3c:	fbb3 f0f4 	udiv	r0, r3, r4
    4d40:	fb04 3010 	mls	r0, r4, r0, r3
    4d44:	fbb3 f3f4 	udiv	r3, r3, r4
    4d48:	1e52      	subs	r2, r2, #1
    4d4a:	b2d2      	uxtb	r2, r2
    4d4c:	3030      	adds	r0, #48	; 0x30
    4d4e:	54b0      	strb	r0, [r6, r2]
    4d50:	2a00      	cmp	r2, #0
    4d52:	d1f3      	bne.n	4d3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4d54:	4630      	mov	r0, r6
    4d56:	47a8      	blx	r5
    4d58:	f3bf 8f4f 	dsb	sy
    4d5c:	4806      	ldr	r0, [pc, #24]	; (4d78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4d5e:	6801      	ldr	r1, [r0, #0]
    4d60:	4a06      	ldr	r2, [pc, #24]	; (4d7c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4d62:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4d66:	4311      	orrs	r1, r2
    4d68:	6001      	str	r1, [r0, #0]
    4d6a:	f3bf 8f4f 	dsb	sy
    4d6e:	bf00      	nop
    4d70:	e7fd      	b.n	4d6e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    4d72:	0000      	.short	0x0000
    4d74:	20000058 	.word	0x20000058
    4d78:	e000ed0c 	.word	0xe000ed0c
    4d7c:	05fa0004 	.word	0x05fa0004

00004d80 <sdc_support_dle>:
    4d80:	4806      	ldr	r0, [pc, #24]	; (4d9c <sdc_support_dle+0x1c>)
    4d82:	b510      	push	{r4, lr}
    4d84:	7881      	ldrb	r1, [r0, #2]
    4d86:	7840      	ldrb	r0, [r0, #1]
    4d88:	4301      	orrs	r1, r0
    4d8a:	d002      	beq.n	4d92 <sdc_support_dle+0x12>
    4d8c:	f04f 30ff 	mov.w	r0, #4294967295
    4d90:	bd10      	pop	{r4, pc}
    4d92:	f006 fed7 	bl	bb44 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    4d96:	2000      	movs	r0, #0
    4d98:	bd10      	pop	{r4, pc}
    4d9a:	0000      	.short	0x0000
    4d9c:	20000058 	.word	0x20000058

00004da0 <sdc_support_le_2m_phy>:
    4da0:	4806      	ldr	r0, [pc, #24]	; (4dbc <sdc_support_le_2m_phy+0x1c>)
    4da2:	b510      	push	{r4, lr}
    4da4:	7881      	ldrb	r1, [r0, #2]
    4da6:	7840      	ldrb	r0, [r0, #1]
    4da8:	4301      	orrs	r1, r0
    4daa:	d002      	beq.n	4db2 <sdc_support_le_2m_phy+0x12>
    4dac:	f04f 30ff 	mov.w	r0, #4294967295
    4db0:	bd10      	pop	{r4, pc}
    4db2:	f00b f940 	bl	10036 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    4db6:	2000      	movs	r0, #0
    4db8:	bd10      	pop	{r4, pc}
    4dba:	0000      	.short	0x0000
    4dbc:	20000058 	.word	0x20000058

00004dc0 <sdc_support_master>:
    4dc0:	4806      	ldr	r0, [pc, #24]	; (4ddc <sdc_support_master+0x1c>)
    4dc2:	b510      	push	{r4, lr}
    4dc4:	7881      	ldrb	r1, [r0, #2]
    4dc6:	7840      	ldrb	r0, [r0, #1]
    4dc8:	4301      	orrs	r1, r0
    4dca:	d002      	beq.n	4dd2 <sdc_support_master+0x12>
    4dcc:	f04f 30ff 	mov.w	r0, #4294967295
    4dd0:	bd10      	pop	{r4, pc}
    4dd2:	f007 f893 	bl	befc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
    4dd6:	2000      	movs	r0, #0
    4dd8:	bd10      	pop	{r4, pc}
    4dda:	0000      	.short	0x0000
    4ddc:	20000058 	.word	0x20000058

00004de0 <sdc_support_scan>:
    4de0:	4807      	ldr	r0, [pc, #28]	; (4e00 <sdc_support_scan+0x20>)
    4de2:	b510      	push	{r4, lr}
    4de4:	7881      	ldrb	r1, [r0, #2]
    4de6:	7842      	ldrb	r2, [r0, #1]
    4de8:	4311      	orrs	r1, r2
    4dea:	d002      	beq.n	4df2 <sdc_support_scan+0x12>
    4dec:	f04f 30ff 	mov.w	r0, #4294967295
    4df0:	bd10      	pop	{r4, pc}
    4df2:	2101      	movs	r1, #1
    4df4:	70c1      	strb	r1, [r0, #3]
    4df6:	f007 f86f 	bl	bed8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
    4dfa:	2000      	movs	r0, #0
    4dfc:	bd10      	pop	{r4, pc}
    4dfe:	0000      	.short	0x0000
    4e00:	20000058 	.word	0x20000058
    4e04:	00000001 	.word	0x00000001
    4e08:	00010101 	.word	0x00010101
    4e0c:	031b1b00 	.word	0x031b1b00
    4e10:	00000002 	.word	0x00000002
    4e14:	00001d4c 	.word	0x00001d4c
    4e18:	001f0003 	.word	0x001f0003
    4e1c:	00000000 	.word	0x00000000
    4e20:	d64ec0df 	.word	0xd64ec0df
    4e24:	09667c1f 	.word	0x09667c1f
    4e28:	a02bf50a 	.word	0xa02bf50a
    4e2c:	6443f298 	.word	0x6443f298
    4e30:	2aa6c562 	.word	0x2aa6c562

00004e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4e34:	4a05      	ldr	r2, [pc, #20]	; (4e4c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4e36:	b510      	push	{r4, lr}
    4e38:	6852      	ldr	r2, [r2, #4]
    4e3a:	b112      	cbz	r2, 4e42 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e40:	4710      	bx	r2
    4e42:	2183      	movs	r1, #131	; 0x83
    4e44:	2004      	movs	r0, #4
    4e46:	f7ff ff67 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e4a:	0000      	.short	0x0000
    4e4c:	20000d98 	.word	0x20000d98

00004e50 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    4e50:	4a05      	ldr	r2, [pc, #20]	; (4e68 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    4e52:	b510      	push	{r4, lr}
    4e54:	6812      	ldr	r2, [r2, #0]
    4e56:	b112      	cbz	r2, 4e5e <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    4e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e5c:	4710      	bx	r2
    4e5e:	217d      	movs	r1, #125	; 0x7d
    4e60:	2004      	movs	r0, #4
    4e62:	f7ff ff59 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e66:	0000      	.short	0x0000
    4e68:	20000d98 	.word	0x20000d98

00004e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4e6c:	4a05      	ldr	r2, [pc, #20]	; (4e84 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4e6e:	b510      	push	{r4, lr}
    4e70:	6892      	ldr	r2, [r2, #8]
    4e72:	b112      	cbz	r2, 4e7a <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e78:	4710      	bx	r2
    4e7a:	2189      	movs	r1, #137	; 0x89
    4e7c:	2004      	movs	r0, #4
    4e7e:	f7ff ff4b 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e82:	0000      	.short	0x0000
    4e84:	20000d98 	.word	0x20000d98

00004e88 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4e88:	4805      	ldr	r0, [pc, #20]	; (4ea0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4e8a:	6801      	ldr	r1, [r0, #0]
    4e8c:	b129      	cbz	r1, 4e9a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4e8e:	6841      	ldr	r1, [r0, #4]
    4e90:	b119      	cbz	r1, 4e9a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4e92:	6880      	ldr	r0, [r0, #8]
    4e94:	b108      	cbz	r0, 4e9a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4e96:	2001      	movs	r0, #1
    4e98:	4770      	bx	lr
    4e9a:	2000      	movs	r0, #0
    4e9c:	4770      	bx	lr
    4e9e:	0000      	.short	0x0000
    4ea0:	20000d98 	.word	0x20000d98

00004ea4 <sdc_rand_source_register>:
    4ea4:	4902      	ldr	r1, [pc, #8]	; (4eb0 <sdc_rand_source_register+0xc>)
    4ea6:	c80d      	ldmia	r0, {r0, r2, r3}
    4ea8:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4eac:	2000      	movs	r0, #0
    4eae:	4770      	bx	lr
    4eb0:	20000d98 	.word	0x20000d98

00004eb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4eb6:	4c12      	ldr	r4, [pc, #72]	; (4f00 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4eb8:	2600      	movs	r6, #0
    4eba:	6825      	ldr	r5, [r4, #0]
    4ebc:	e011      	b.n	4ee2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4ebe:	9800      	ldr	r0, [sp, #0]
    4ec0:	2802      	cmp	r0, #2
    4ec2:	d002      	beq.n	4eca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4ec4:	2803      	cmp	r0, #3
    4ec6:	d10c      	bne.n	4ee2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4ec8:	e006      	b.n	4ed8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4eca:	6820      	ldr	r0, [r4, #0]
    4ecc:	b110      	cbz	r0, 4ed4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4ece:	2000      	movs	r0, #0
    4ed0:	6026      	str	r6, [r4, #0]
    4ed2:	e005      	b.n	4ee0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4ed4:	2128      	movs	r1, #40	; 0x28
    4ed6:	e00c      	b.n	4ef2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4ed8:	6820      	ldr	r0, [r4, #0]
    4eda:	b168      	cbz	r0, 4ef8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4edc:	2001      	movs	r0, #1
    4ede:	6026      	str	r6, [r4, #0]
    4ee0:	47a8      	blx	r5
    4ee2:	4668      	mov	r0, sp
    4ee4:	f000 fc88 	bl	57f8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4ee8:	2800      	cmp	r0, #0
    4eea:	d0e8      	beq.n	4ebe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4eec:	2805      	cmp	r0, #5
    4eee:	d005      	beq.n	4efc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4ef0:	2135      	movs	r1, #53	; 0x35
    4ef2:	2004      	movs	r0, #4
    4ef4:	f7ff ff10 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ef8:	212d      	movs	r1, #45	; 0x2d
    4efa:	e7fa      	b.n	4ef2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4efe:	0000      	.short	0x0000
    4f00:	20000060 	.word	0x20000060
    4f04:	b570      	push	{r4, r5, r6, lr}
    4f06:	4c14      	ldr	r4, [pc, #80]	; (4f58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>)
    4f08:	4605      	mov	r5, r0
    4f0a:	7820      	ldrb	r0, [r4, #0]
    4f0c:	b140      	cbz	r0, 4f20 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4f0e:	78a2      	ldrb	r2, [r4, #2]
    4f10:	1c61      	adds	r1, r4, #1
    4f12:	4628      	mov	r0, r5
    4f14:	1c92      	adds	r2, r2, #2
    4f16:	f008 fb07 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4f1a:	2000      	movs	r0, #0
    4f1c:	7020      	strb	r0, [r4, #0]
    4f1e:	e013      	b.n	4f48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    4f20:	480e      	ldr	r0, [pc, #56]	; (4f5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4f22:	f006 feb1 	bl	bc88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4f26:	2800      	cmp	r0, #0
    4f28:	d00f      	beq.n	4f4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    4f2a:	480c      	ldr	r0, [pc, #48]	; (4f5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4f2c:	7800      	ldrb	r0, [r0, #0]
    4f2e:	2814      	cmp	r0, #20
    4f30:	d104      	bne.n	4f3c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    4f32:	210a      	movs	r1, #10
    4f34:	203e      	movs	r0, #62	; 0x3e
    4f36:	f008 fc48 	bl	d7ca <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4f3a:	b138      	cbz	r0, 4f4c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x98>
    4f3c:	4907      	ldr	r1, [pc, #28]	; (4f5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4f3e:	4628      	mov	r0, r5
    4f40:	f008 fca1 	bl	d886 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4f44:	2800      	cmp	r0, #0
    4f46:	d000      	beq.n	4f4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    4f48:	2001      	movs	r0, #1
    4f4a:	bd70      	pop	{r4, r5, r6, pc}
    4f4c:	4903      	ldr	r1, [pc, #12]	; (4f5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4f4e:	4628      	mov	r0, r5
    4f50:	f008 fed6 	bl	dd00 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4f54:	e7f8      	b.n	4f48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    4f56:	0000      	.short	0x0000
    4f58:	20000eac 	.word	0x20000eac
    4f5c:	20000da4 	.word	0x20000da4
    4f60:	b570      	push	{r4, r5, r6, lr}
    4f62:	780a      	ldrb	r2, [r1, #0]
    4f64:	7082      	strb	r2, [r0, #2]
    4f66:	b33a      	cbz	r2, 4fb8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    4f68:	2a01      	cmp	r2, #1
    4f6a:	d825      	bhi.n	4fb8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    4f6c:	2313      	movs	r3, #19
    4f6e:	7003      	strb	r3, [r0, #0]
    4f70:	2300      	movs	r3, #0
    4f72:	e00a      	b.n	4f8a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd6>
    4f74:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4f78:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4f7c:	78a6      	ldrb	r6, [r4, #2]
    4f7e:	70ee      	strb	r6, [r5, #3]
    4f80:	8864      	ldrh	r4, [r4, #2]
    4f82:	0a24      	lsrs	r4, r4, #8
    4f84:	1c5b      	adds	r3, r3, #1
    4f86:	712c      	strb	r4, [r5, #4]
    4f88:	b2db      	uxtb	r3, r3
    4f8a:	4293      	cmp	r3, r2
    4f8c:	d3f2      	bcc.n	4f74 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xc0>
    4f8e:	2300      	movs	r3, #0
    4f90:	e00b      	b.n	4faa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf6>
    4f92:	bf00      	nop
    4f94:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4f98:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4f9c:	792e      	ldrb	r6, [r5, #4]
    4f9e:	7166      	strb	r6, [r4, #5]
    4fa0:	88ad      	ldrh	r5, [r5, #4]
    4fa2:	0a2d      	lsrs	r5, r5, #8
    4fa4:	1c5b      	adds	r3, r3, #1
    4fa6:	71a5      	strb	r5, [r4, #6]
    4fa8:	b2db      	uxtb	r3, r3
    4faa:	4293      	cmp	r3, r2
    4fac:	d3f2      	bcc.n	4f94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xe0>
    4fae:	2101      	movs	r1, #1
    4fb0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4fb4:	b2c0      	uxtb	r0, r0
    4fb6:	bd70      	pop	{r4, r5, r6, pc}
    4fb8:	2000      	movs	r0, #0
    4fba:	bd70      	pop	{r4, r5, r6, pc}

00004fbc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4fbc:	2101      	movs	r1, #1
    4fbe:	4a0c      	ldr	r2, [pc, #48]	; (4ff0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4fc0:	2840      	cmp	r0, #64	; 0x40
    4fc2:	d20c      	bcs.n	4fde <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4fc4:	2820      	cmp	r0, #32
    4fc6:	d803      	bhi.n	4fd0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4fc8:	1e40      	subs	r0, r0, #1
    4fca:	4081      	lsls	r1, r0
    4fcc:	6810      	ldr	r0, [r2, #0]
    4fce:	e002      	b.n	4fd6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4fd0:	3821      	subs	r0, #33	; 0x21
    4fd2:	4081      	lsls	r1, r0
    4fd4:	6850      	ldr	r0, [r2, #4]
    4fd6:	4201      	tst	r1, r0
    4fd8:	d107      	bne.n	4fea <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4fda:	2000      	movs	r0, #0
    4fdc:	4770      	bx	lr
    4fde:	28ff      	cmp	r0, #255	; 0xff
    4fe0:	d003      	beq.n	4fea <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4fe2:	3840      	subs	r0, #64	; 0x40
    4fe4:	4081      	lsls	r1, r0
    4fe6:	6890      	ldr	r0, [r2, #8]
    4fe8:	e7f5      	b.n	4fd6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4fea:	2001      	movs	r0, #1
    4fec:	4770      	bx	lr
    4fee:	0000      	.short	0x0000
    4ff0:	20000064 	.word	0x20000064

00004ff4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4ff4:	2101      	movs	r1, #1
    4ff6:	1e40      	subs	r0, r0, #1
    4ff8:	4081      	lsls	r1, r0
    4ffa:	4804      	ldr	r0, [pc, #16]	; (500c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4ffc:	68c0      	ldr	r0, [r0, #12]
    4ffe:	4201      	tst	r1, r0
    5000:	d001      	beq.n	5006 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    5002:	2001      	movs	r0, #1
    5004:	4770      	bx	lr
    5006:	2000      	movs	r0, #0
    5008:	4770      	bx	lr
    500a:	0000      	.short	0x0000
    500c:	20000064 	.word	0x20000064

00005010 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    5010:	4901      	ldr	r1, [pc, #4]	; (5018 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    5012:	6800      	ldr	r0, [r0, #0]
    5014:	60c8      	str	r0, [r1, #12]
    5016:	4770      	bx	lr
    5018:	20000064 	.word	0x20000064

0000501c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    501c:	4904      	ldr	r1, [pc, #16]	; (5030 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    501e:	6802      	ldr	r2, [r0, #0]
    5020:	6840      	ldr	r0, [r0, #4]
    5022:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    5026:	600a      	str	r2, [r1, #0]
    5028:	4a02      	ldr	r2, [pc, #8]	; (5034 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    502a:	4310      	orrs	r0, r2
    502c:	6048      	str	r0, [r1, #4]
    502e:	4770      	bx	lr
    5030:	20000064 	.word	0x20000064
    5034:	024007f8 	.word	0x024007f8

00005038 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    5038:	4901      	ldr	r1, [pc, #4]	; (5040 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    503a:	6800      	ldr	r0, [r0, #0]
    503c:	6088      	str	r0, [r1, #8]
    503e:	4770      	bx	lr
    5040:	20000064 	.word	0x20000064

00005044 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    5044:	4805      	ldr	r0, [pc, #20]	; (505c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    5046:	f04f 31ff 	mov.w	r1, #4294967295
    504a:	6001      	str	r1, [r0, #0]
    504c:	0cc9      	lsrs	r1, r1, #19
    504e:	6041      	str	r1, [r0, #4]
    5050:	2100      	movs	r1, #0
    5052:	6081      	str	r1, [r0, #8]
    5054:	211f      	movs	r1, #31
    5056:	60c1      	str	r1, [r0, #12]
    5058:	4770      	bx	lr
    505a:	0000      	.short	0x0000
    505c:	20000064 	.word	0x20000064

00005060 <sdc_hci_cmd_cb_reset>:
    5060:	b510      	push	{r4, lr}
    5062:	f7ff ffef 	bl	5044 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    5066:	f00a ffbf 	bl	ffe8 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    506a:	4604      	mov	r4, r0
    506c:	4802      	ldr	r0, [pc, #8]	; (5078 <sdc_hci_cmd_cb_reset+0x18>)
    506e:	6800      	ldr	r0, [r0, #0]
    5070:	b100      	cbz	r0, 5074 <sdc_hci_cmd_cb_reset+0x14>
    5072:	4780      	blx	r0
    5074:	4620      	mov	r0, r4
    5076:	bd10      	pop	{r4, pc}
    5078:	20000074 	.word	0x20000074

0000507c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    507c:	4901      	ldr	r1, [pc, #4]	; (5084 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    507e:	6008      	str	r0, [r1, #0]
    5080:	4770      	bx	lr
    5082:	0000      	.short	0x0000
    5084:	20000074 	.word	0x20000074

00005088 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    5088:	2102      	movs	r1, #2
    508a:	8001      	strh	r1, [r0, #0]
    508c:	8041      	strh	r1, [r0, #2]
    508e:	2100      	movs	r1, #0
    5090:	7101      	strb	r1, [r0, #4]
    5092:	21df      	movs	r1, #223	; 0xdf
    5094:	7141      	strb	r1, [r0, #5]
    5096:	f644 61c0 	movw	r1, #20160	; 0x4ec0
    509a:	80c1      	strh	r1, [r0, #6]
    509c:	4901      	ldr	r1, [pc, #4]	; (50a4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    509e:	6081      	str	r1, [r0, #8]
    50a0:	2000      	movs	r0, #0
    50a2:	4770      	bx	lr
    50a4:	667c1fd6 	.word	0x667c1fd6

000050a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    50a8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    50aa:	4604      	mov	r4, r0
    50ac:	4669      	mov	r1, sp
    50ae:	f009 fae1 	bl	e674 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    50b2:	b170      	cbz	r0, 50d2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    50b4:	f240 215a 	movw	r1, #602	; 0x25a
    50b8:	e008      	b.n	50cc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    50ba:	bf00      	nop
    50bc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    50c0:	4621      	mov	r1, r4
    50c2:	f000 f8a7 	bl	5214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    50c6:	b120      	cbz	r0, 50d2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    50c8:	f240 215f 	movw	r1, #607	; 0x25f
    50cc:	2017      	movs	r0, #23
    50ce:	f7ff fe23 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50d2:	4668      	mov	r0, sp
    50d4:	f000 f850 	bl	5178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    50d8:	2800      	cmp	r0, #0
    50da:	d0ef      	beq.n	50bc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    50dc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000050e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    50e0:	b510      	push	{r4, lr}
    50e2:	b120      	cbz	r0, 50ee <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0xe>
    50e4:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    50e8:	2017      	movs	r0, #23
    50ea:	f7ff fe15 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50ee:	4801      	ldr	r0, [pc, #4]	; (50f4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x14>)
    50f0:	7800      	ldrb	r0, [r0, #0]
    50f2:	bd10      	pop	{r4, pc}
    50f4:	20000fb0 	.word	0x20000fb0

000050f8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    50f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50fa:	4605      	mov	r5, r0
    50fc:	7808      	ldrb	r0, [r1, #0]
    50fe:	784a      	ldrb	r2, [r1, #1]
    5100:	4290      	cmp	r0, r2
    5102:	d902      	bls.n	510a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
    5104:	f240 1163 	movw	r1, #355	; 0x163
    5108:	e00a      	b.n	5120 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    510a:	9500      	str	r5, [sp, #0]
    510c:	b15d      	cbz	r5, 5126 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    510e:	2600      	movs	r6, #0
    5110:	1ce8      	adds	r0, r5, #3
    5112:	784c      	ldrb	r4, [r1, #1]
    5114:	f020 0003 	bic.w	r0, r0, #3
    5118:	42a8      	cmp	r0, r5
    511a:	d006      	beq.n	512a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x32>
    511c:	f240 1179 	movw	r1, #377	; 0x179
    5120:	2017      	movs	r0, #23
    5122:	f7ff fdf9 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5126:	2601      	movs	r6, #1
    5128:	e7f2      	b.n	5110 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
    512a:	4f12      	ldr	r7, [pc, #72]	; (5174 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    512c:	4631      	mov	r1, r6
    512e:	4668      	mov	r0, sp
    5130:	703c      	strb	r4, [r7, #0]
    5132:	f000 f8e1 	bl	52f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe4>
    5136:	2000      	movs	r0, #0
    5138:	4603      	mov	r3, r0
    513a:	9900      	ldr	r1, [sp, #0]
    513c:	1cc9      	adds	r1, r1, #3
    513e:	f021 0103 	bic.w	r1, r1, #3
    5142:	9100      	str	r1, [sp, #0]
    5144:	b966      	cbnz	r6, 5160 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    5146:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    514a:	6091      	str	r1, [r2, #8]
    514c:	2100      	movs	r1, #0
    514e:	e005      	b.n	515c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    5150:	f8d2 c008 	ldr.w	ip, [r2, #8]
    5154:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    5158:	1c49      	adds	r1, r1, #1
    515a:	b2c9      	uxtb	r1, r1
    515c:	42a1      	cmp	r1, r4
    515e:	d3f7      	bcc.n	5150 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    5160:	9900      	ldr	r1, [sp, #0]
    5162:	1c40      	adds	r0, r0, #1
    5164:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    5168:	9100      	str	r1, [sp, #0]
    516a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    516e:	d0e4      	beq.n	513a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    5170:	1b48      	subs	r0, r1, r5
    5172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5174:	20000fb0 	.word	0x20000fb0

00005178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    5178:	b570      	push	{r4, r5, r6, lr}
    517a:	4604      	mov	r4, r0
    517c:	f009 facf 	bl	e71e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    5180:	b108      	cbz	r0, 5186 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    5182:	2010      	movs	r0, #16
    5184:	bd70      	pop	{r4, r5, r6, pc}
    5186:	7825      	ldrb	r5, [r4, #0]
    5188:	f000 f8f2 	bl	5370 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    518c:	4602      	mov	r2, r0
    518e:	480c      	ldr	r0, [pc, #48]	; (51c0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    5190:	8861      	ldrh	r1, [r4, #2]
    5192:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5196:	e00e      	b.n	51b6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    5198:	6883      	ldr	r3, [r0, #8]
    519a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    519e:	b143      	cbz	r3, 51b2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    51a0:	1c4a      	adds	r2, r1, #1
    51a2:	8062      	strh	r2, [r4, #2]
    51a4:	80a1      	strh	r1, [r4, #4]
    51a6:	6880      	ldr	r0, [r0, #8]
    51a8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    51ac:	60a0      	str	r0, [r4, #8]
    51ae:	2000      	movs	r0, #0
    51b0:	bd70      	pop	{r4, r5, r6, pc}
    51b2:	1c49      	adds	r1, r1, #1
    51b4:	b289      	uxth	r1, r1
    51b6:	4291      	cmp	r1, r2
    51b8:	d3ee      	bcc.n	5198 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    51ba:	8061      	strh	r1, [r4, #2]
    51bc:	2005      	movs	r0, #5
    51be:	bd70      	pop	{r4, r5, r6, pc}
    51c0:	20000fb0 	.word	0x20000fb0

000051c4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    51c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51c8:	b949      	cbnz	r1, 51de <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    51ca:	4c11      	ldr	r4, [pc, #68]	; (5210 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    51cc:	2700      	movs	r7, #0
    51ce:	463b      	mov	r3, r7
    51d0:	f64f 76ff 	movw	r6, #65535	; 0xffff
    51d4:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    51d8:	f814 c001 	ldrb.w	ip, [r4, r1]
    51dc:	e00d      	b.n	51fa <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    51de:	2000      	movs	r0, #0
    51e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    51e4:	19dc      	adds	r4, r3, r7
    51e6:	f8d5 e008 	ldr.w	lr, [r5, #8]
    51ea:	b2a4      	uxth	r4, r4
    51ec:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    51f0:	f1be 0f00 	cmp.w	lr, #0
    51f4:	d004      	beq.n	5200 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    51f6:	1c5b      	adds	r3, r3, #1
    51f8:	b29b      	uxth	r3, r3
    51fa:	459c      	cmp	ip, r3
    51fc:	d8f2      	bhi.n	51e4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    51fe:	4634      	mov	r4, r6
    5200:	8004      	strh	r4, [r0, #0]
    5202:	4620      	mov	r0, r4
    5204:	42b4      	cmp	r4, r6
    5206:	d0ea      	beq.n	51de <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    5208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    520c:	f000 b82c 	b.w	5268 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
    5210:	20000fb0 	.word	0x20000fb0

00005214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    5214:	b570      	push	{r4, r5, r6, lr}
    5216:	4606      	mov	r6, r0
    5218:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    521c:	f243 0502 	movw	r5, #12290	; 0x3002
    5220:	38ff      	subs	r0, #255	; 0xff
    5222:	d01a      	beq.n	525a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    5224:	b109      	cbz	r1, 522a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
    5226:	2007      	movs	r0, #7
    5228:	bd70      	pop	{r4, r5, r6, pc}
    522a:	4630      	mov	r0, r6
    522c:	f000 f854 	bl	52d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    5230:	0004      	movs	r4, r0
    5232:	d012      	beq.n	525a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    5234:	480a      	ldr	r0, [pc, #40]	; (5260 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
    5236:	4621      	mov	r1, r4
    5238:	6802      	ldr	r2, [r0, #0]
    523a:	4630      	mov	r0, r6
    523c:	4790      	blx	r2
    523e:	4d09      	ldr	r5, [pc, #36]	; (5264 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
    5240:	2000      	movs	r0, #0
    5242:	68a9      	ldr	r1, [r5, #8]
    5244:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
    5248:	f000 f888 	bl	535c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    524c:	4602      	mov	r2, r0
    524e:	4621      	mov	r1, r4
    5250:	6868      	ldr	r0, [r5, #4]
    5252:	f009 f9f9 	bl	e648 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5256:	2000      	movs	r0, #0
    5258:	bd70      	pop	{r4, r5, r6, pc}
    525a:	4628      	mov	r0, r5
    525c:	bd70      	pop	{r4, r5, r6, pc}
    525e:	0000      	.short	0x0000
    5260:	00005384 	.word	0x00005384
    5264:	20000fb0 	.word	0x20000fb0
    5268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    526c:	4690      	mov	r8, r2
    526e:	460e      	mov	r6, r1
    5270:	4607      	mov	r7, r0
    5272:	f009 fa0f 	bl	e694 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    5276:	b148      	cbz	r0, 528c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
    5278:	4815      	ldr	r0, [pc, #84]	; (52d0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbc>)
    527a:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    527e:	68a8      	ldr	r0, [r5, #8]
    5280:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    5284:	b128      	cbz	r0, 5292 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
    5286:	f44f 719d 	mov.w	r1, #314	; 0x13a
    528a:	e014      	b.n	52b6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    528c:	f240 1139 	movw	r1, #313	; 0x139
    5290:	e011      	b.n	52b6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    5292:	6868      	ldr	r0, [r5, #4]
    5294:	2800      	cmp	r0, #0
    5296:	d018      	beq.n	52ca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb6>
    5298:	4630      	mov	r0, r6
    529a:	f000 f85f 	bl	535c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    529e:	4601      	mov	r1, r0
    52a0:	6868      	ldr	r0, [r5, #4]
    52a2:	f009 f983 	bl	e5ac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    52a6:	0004      	movs	r4, r0
    52a8:	d00e      	beq.n	52c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    52aa:	68a8      	ldr	r0, [r5, #8]
    52ac:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    52b0:	b126      	cbz	r6, 52bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa8>
    52b2:	f240 1145 	movw	r1, #325	; 0x145
    52b6:	2017      	movs	r0, #23
    52b8:	f7ff fd2e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52bc:	4805      	ldr	r0, [pc, #20]	; (52d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
    52be:	4642      	mov	r2, r8
    52c0:	4621      	mov	r1, r4
    52c2:	6803      	ldr	r3, [r0, #0]
    52c4:	4638      	mov	r0, r7
    52c6:	4798      	blx	r3
    52c8:	4620      	mov	r0, r4
    52ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52ce:	0000      	.short	0x0000
    52d0:	20000fb0 	.word	0x20000fb0
    52d4:	00005380 	.word	0x00005380
    52d8:	b570      	push	{r4, r5, r6, lr}
    52da:	460c      	mov	r4, r1
    52dc:	4605      	mov	r5, r0
    52de:	f009 f9d9 	bl	e694 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    52e2:	2800      	cmp	r0, #0
    52e4:	d005      	beq.n	52f2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xde>
    52e6:	4803      	ldr	r0, [pc, #12]	; (52f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>)
    52e8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    52ec:	6880      	ldr	r0, [r0, #8]
    52ee:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    52f2:	bd70      	pop	{r4, r5, r6, pc}
    52f4:	20000fb0 	.word	0x20000fb0
    52f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    52fc:	4e16      	ldr	r6, [pc, #88]	; (5358 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>)
    52fe:	4688      	mov	r8, r1
    5300:	4605      	mov	r5, r0
    5302:	2400      	movs	r4, #0
    5304:	6828      	ldr	r0, [r5, #0]
    5306:	1cc0      	adds	r0, r0, #3
    5308:	f020 0003 	bic.w	r0, r0, #3
    530c:	6028      	str	r0, [r5, #0]
    530e:	4620      	mov	r0, r4
    5310:	f000 f824 	bl	535c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    5314:	5d31      	ldrb	r1, [r6, r4]
    5316:	4348      	muls	r0, r1
    5318:	f1b8 0f00 	cmp.w	r8, #0
    531c:	d001      	beq.n	5322 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10e>
    531e:	2200      	movs	r2, #0
    5320:	e000      	b.n	5324 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
    5322:	682a      	ldr	r2, [r5, #0]
    5324:	4601      	mov	r1, r0
    5326:	9200      	str	r2, [sp, #0]
    5328:	b132      	cbz	r2, 5338 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    532a:	2700      	movs	r7, #0
    532c:	ea4f 000d 	mov.w	r0, sp
    5330:	f009 f969 	bl	e606 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5334:	b11f      	cbz	r7, 533e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    5336:	e006      	b.n	5346 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    5338:	2701      	movs	r7, #1
    533a:	2000      	movs	r0, #0
    533c:	e7f8      	b.n	5330 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11c>
    533e:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    5342:	9a00      	ldr	r2, [sp, #0]
    5344:	604a      	str	r2, [r1, #4]
    5346:	6829      	ldr	r1, [r5, #0]
    5348:	1c64      	adds	r4, r4, #1
    534a:	4408      	add	r0, r1
    534c:	6028      	str	r0, [r5, #0]
    534e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    5352:	d0d7      	beq.n	5304 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf0>
    5354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5358:	20000fb0 	.word	0x20000fb0
    535c:	4903      	ldr	r1, [pc, #12]	; (536c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    535e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5362:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    5366:	1cc0      	adds	r0, r0, #3
    5368:	4008      	ands	r0, r1
    536a:	4770      	bx	lr
    536c:	0000537c 	.word	0x0000537c
    5370:	4801      	ldr	r0, [pc, #4]	; (5378 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>)
    5372:	7800      	ldrb	r0, [r0, #0]
    5374:	4770      	bx	lr
    5376:	0000      	.short	0x0000
    5378:	20000fb0 	.word	0x20000fb0
    537c:	000001e0 	.word	0x000001e0
    5380:	0000e6a9 	.word	0x0000e6a9
    5384:	0000f713 	.word	0x0000f713

00005388 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    5388:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    538c:	4c26      	ldr	r4, [pc, #152]	; (5428 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    538e:	4680      	mov	r8, r0
    5390:	b081      	sub	sp, #4
    5392:	6820      	ldr	r0, [r4, #0]
    5394:	469a      	mov	sl, r3
    5396:	4693      	mov	fp, r2
    5398:	b158      	cbz	r0, 53b2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    539a:	7a02      	ldrb	r2, [r0, #8]
    539c:	4542      	cmp	r2, r8
    539e:	d903      	bls.n	53a8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    53a0:	6841      	ldr	r1, [r0, #4]
    53a2:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    53a6:	b140      	cbz	r0, 53ba <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    53a8:	f243 0002 	movw	r0, #12290	; 0x3002
    53ac:	b005      	add	sp, #20
    53ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53b2:	21a5      	movs	r1, #165	; 0xa5
    53b4:	2018      	movs	r0, #24
    53b6:	f7ff fcaf 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53ba:	4619      	mov	r1, r3
    53bc:	9802      	ldr	r0, [sp, #8]
    53be:	f009 f98b 	bl	e6d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    53c2:	b286      	uxth	r6, r0
    53c4:	4658      	mov	r0, fp
    53c6:	990e      	ldr	r1, [sp, #56]	; 0x38
    53c8:	f009 f97d 	bl	e6c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    53cc:	b285      	uxth	r5, r0
    53ce:	1970      	adds	r0, r6, r5
    53d0:	1d00      	adds	r0, r0, #4
    53d2:	b287      	uxth	r7, r0
    53d4:	6820      	ldr	r0, [r4, #0]
    53d6:	46a1      	mov	r9, r4
    53d8:	4639      	mov	r1, r7
    53da:	6800      	ldr	r0, [r0, #0]
    53dc:	f009 f8e6 	bl	e5ac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    53e0:	0004      	movs	r4, r0
    53e2:	d01f      	beq.n	5424 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    53e4:	8067      	strh	r7, [r4, #2]
    53e6:	8025      	strh	r5, [r4, #0]
    53e8:	4629      	mov	r1, r5
    53ea:	1d20      	adds	r0, r4, #4
    53ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    53ee:	4607      	mov	r7, r0
    53f0:	465a      	mov	r2, fp
    53f2:	2301      	movs	r3, #1
    53f4:	9500      	str	r5, [sp, #0]
    53f6:	f009 f839 	bl	e46c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    53fa:	8820      	ldrh	r0, [r4, #0]
    53fc:	4631      	mov	r1, r6
    53fe:	4438      	add	r0, r7
    5400:	2301      	movs	r3, #1
    5402:	9a02      	ldr	r2, [sp, #8]
    5404:	f8cd a000 	str.w	sl, [sp]
    5408:	f009 f830 	bl	e46c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    540c:	8820      	ldrh	r0, [r4, #0]
    540e:	19c1      	adds	r1, r0, r7
    5410:	4638      	mov	r0, r7
    5412:	f009 f85c 	bl	e4ce <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    5416:	f8d9 0000 	ldr.w	r0, [r9]
    541a:	6841      	ldr	r1, [r0, #4]
    541c:	2000      	movs	r0, #0
    541e:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    5422:	e7c3      	b.n	53ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5424:	2004      	movs	r0, #4
    5426:	e7c1      	b.n	53ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5428:	20000078 	.word	0x20000078

0000542c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    542c:	b570      	push	{r4, r5, r6, lr}
    542e:	4c14      	ldr	r4, [pc, #80]	; (5480 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    5430:	6823      	ldr	r3, [r4, #0]
    5432:	b18b      	cbz	r3, 5458 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    5434:	7a19      	ldrb	r1, [r3, #8]
    5436:	4281      	cmp	r1, r0
    5438:	d912      	bls.n	5460 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    543a:	685a      	ldr	r2, [r3, #4]
    543c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    5440:	b171      	cbz	r1, 5460 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5442:	2500      	movs	r5, #0
    5444:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    5448:	884a      	ldrh	r2, [r1, #2]
    544a:	6818      	ldr	r0, [r3, #0]
    544c:	f009 f8fc 	bl	e648 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5450:	6821      	ldr	r1, [r4, #0]
    5452:	2000      	movs	r0, #0
    5454:	7a0a      	ldrb	r2, [r1, #8]
    5456:	e00c      	b.n	5472 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    5458:	21c8      	movs	r1, #200	; 0xc8
    545a:	2018      	movs	r0, #24
    545c:	f7ff fc5c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5460:	f243 0002 	movw	r0, #12290	; 0x3002
    5464:	bd70      	pop	{r4, r5, r6, pc}
    5466:	684b      	ldr	r3, [r1, #4]
    5468:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    546c:	b933      	cbnz	r3, 547c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    546e:	1c40      	adds	r0, r0, #1
    5470:	b2c0      	uxtb	r0, r0
    5472:	4282      	cmp	r2, r0
    5474:	d8f7      	bhi.n	5466 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    5476:	6808      	ldr	r0, [r1, #0]
    5478:	f009 f8db 	bl	e632 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    547c:	2000      	movs	r0, #0
    547e:	bd70      	pop	{r4, r5, r6, pc}
    5480:	20000078 	.word	0x20000078

00005484 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    5484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5488:	460d      	mov	r5, r1
    548a:	0004      	movs	r4, r0
    548c:	4690      	mov	r8, r2
    548e:	f04f 0600 	mov.w	r6, #0
    5492:	d009      	beq.n	54a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    5494:	2700      	movs	r7, #0
    5496:	1ce0      	adds	r0, r4, #3
    5498:	f020 0003 	bic.w	r0, r0, #3
    549c:	42a0      	cmp	r0, r4
    549e:	d005      	beq.n	54ac <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    54a0:	2186      	movs	r1, #134	; 0x86
    54a2:	2018      	movs	r0, #24
    54a4:	f7ff fc38 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54a8:	2701      	movs	r7, #1
    54aa:	e7f4      	b.n	5496 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    54ac:	b1cd      	cbz	r5, 54e2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    54ae:	4611      	mov	r1, r2
    54b0:	2000      	movs	r0, #0
    54b2:	f009 f8a8 	bl	e606 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    54b6:	300c      	adds	r0, #12
    54b8:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    54bc:	b98f      	cbnz	r7, 54e2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    54be:	4f0a      	ldr	r7, [pc, #40]	; (54e8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    54c0:	f104 000c 	add.w	r0, r4, #12
    54c4:	00aa      	lsls	r2, r5, #2
    54c6:	603c      	str	r4, [r7, #0]
    54c8:	7225      	strb	r5, [r4, #8]
    54ca:	6060      	str	r0, [r4, #4]
    54cc:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    54d0:	6020      	str	r0, [r4, #0]
    54d2:	2100      	movs	r1, #0
    54d4:	6860      	ldr	r0, [r4, #4]
    54d6:	f008 f8a1 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    54da:	4641      	mov	r1, r8
    54dc:	6838      	ldr	r0, [r7, #0]
    54de:	f009 f892 	bl	e606 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    54e2:	4630      	mov	r0, r6
    54e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54e8:	20000078 	.word	0x20000078

000054ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    54ec:	b570      	push	{r4, r5, r6, lr}
    54ee:	4d08      	ldr	r5, [pc, #32]	; (5510 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    54f0:	6828      	ldr	r0, [r5, #0]
    54f2:	2800      	cmp	r0, #0
    54f4:	d00a      	beq.n	550c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    54f6:	2400      	movs	r4, #0
    54f8:	e004      	b.n	5504 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    54fa:	4620      	mov	r0, r4
    54fc:	f7ff ff96 	bl	542c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    5500:	1c64      	adds	r4, r4, #1
    5502:	b2e4      	uxtb	r4, r4
    5504:	6828      	ldr	r0, [r5, #0]
    5506:	7a00      	ldrb	r0, [r0, #8]
    5508:	42a0      	cmp	r0, r4
    550a:	d8f6      	bhi.n	54fa <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    550c:	bd70      	pop	{r4, r5, r6, pc}
    550e:	0000      	.short	0x0000
    5510:	20000078 	.word	0x20000078

00005514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    5514:	4909      	ldr	r1, [pc, #36]	; (553c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    5516:	b510      	push	{r4, lr}
    5518:	4602      	mov	r2, r0
    551a:	6809      	ldr	r1, [r1, #0]
    551c:	2000      	movs	r0, #0
    551e:	b149      	cbz	r1, 5534 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    5520:	7a0b      	ldrb	r3, [r1, #8]
    5522:	4293      	cmp	r3, r2
    5524:	d905      	bls.n	5532 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5526:	6849      	ldr	r1, [r1, #4]
    5528:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    552c:	2900      	cmp	r1, #0
    552e:	d000      	beq.n	5532 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5530:	1d08      	adds	r0, r1, #4
    5532:	bd10      	pop	{r4, pc}
    5534:	21ee      	movs	r1, #238	; 0xee
    5536:	2018      	movs	r0, #24
    5538:	f7ff fbee 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    553c:	20000078 	.word	0x20000078

00005540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    5540:	490a      	ldr	r1, [pc, #40]	; (556c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    5542:	b510      	push	{r4, lr}
    5544:	4602      	mov	r2, r0
    5546:	6809      	ldr	r1, [r1, #0]
    5548:	2000      	movs	r0, #0
    554a:	b159      	cbz	r1, 5564 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    554c:	7a0b      	ldrb	r3, [r1, #8]
    554e:	4293      	cmp	r3, r2
    5550:	d907      	bls.n	5562 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5552:	6849      	ldr	r1, [r1, #4]
    5554:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5558:	2900      	cmp	r1, #0
    555a:	d002      	beq.n	5562 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    555c:	f831 0b04 	ldrh.w	r0, [r1], #4
    5560:	4408      	add	r0, r1
    5562:	bd10      	pop	{r4, pc}
    5564:	21fc      	movs	r1, #252	; 0xfc
    5566:	2018      	movs	r0, #24
    5568:	f7ff fbd6 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    556c:	20000078 	.word	0x20000078

00005570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    5570:	4801      	ldr	r0, [pc, #4]	; (5578 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    5572:	7840      	ldrb	r0, [r0, #1]
    5574:	4770      	bx	lr
    5576:	0000      	.short	0x0000
    5578:	2000007c 	.word	0x2000007c

0000557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    557c:	4801      	ldr	r0, [pc, #4]	; (5584 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    557e:	6840      	ldr	r0, [r0, #4]
    5580:	4770      	bx	lr
    5582:	0000      	.short	0x0000
    5584:	2000007c 	.word	0x2000007c

00005588 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    5588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    558c:	460c      	mov	r4, r1
    558e:	4607      	mov	r7, r0
    5590:	4616      	mov	r6, r2
    5592:	211c      	movs	r1, #28
    5594:	4610      	mov	r0, r2
    5596:	460d      	mov	r5, r1
    5598:	4622      	mov	r2, r4
    559a:	f008 ffc2 	bl	e522 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    559e:	4680      	mov	r8, r0
    55a0:	b157      	cbz	r7, 55b8 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    55a2:	4638      	mov	r0, r7
    55a4:	4641      	mov	r1, r8
    55a6:	4632      	mov	r2, r6
    55a8:	462b      	mov	r3, r5
    55aa:	9400      	str	r4, [sp, #0]
    55ac:	f008 ff5e 	bl	e46c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    55b0:	4803      	ldr	r0, [pc, #12]	; (55c0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    55b2:	6047      	str	r7, [r0, #4]
    55b4:	7004      	strb	r4, [r0, #0]
    55b6:	7046      	strb	r6, [r0, #1]
    55b8:	4640      	mov	r0, r8
    55ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    55be:	0000      	.short	0x0000
    55c0:	2000007c 	.word	0x2000007c

000055c4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    55c4:	4802      	ldr	r0, [pc, #8]	; (55d0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    55c6:	7842      	ldrb	r2, [r0, #1]
    55c8:	7801      	ldrb	r1, [r0, #0]
    55ca:	6840      	ldr	r0, [r0, #4]
    55cc:	f7ff bfdc 	b.w	5588 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    55d0:	2000007c 	.word	0x2000007c
    55d4:	4909      	ldr	r1, [pc, #36]	; (55fc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x38>)
    55d6:	b510      	push	{r4, lr}
    55d8:	4807      	ldr	r0, [pc, #28]	; (55f8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x34>)
    55da:	6008      	str	r0, [r1, #0]
    55dc:	4b08      	ldr	r3, [pc, #32]	; (5600 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x3c>)
    55de:	2011      	movs	r0, #17
    55e0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    55e4:	2200      	movs	r2, #0
    55e6:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    55ea:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    55ee:	1c40      	adds	r0, r0, #1
    55f0:	b2c0      	uxtb	r0, r0
    55f2:	2814      	cmp	r0, #20
    55f4:	d3f4      	bcc.n	55e0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x1c>
    55f6:	bd10      	pop	{r4, pc}
    55f8:	fffe0000 	.word	0xfffe0000
    55fc:	4001f508 	.word	0x4001f508
    5600:	4001f000 	.word	0x4001f000
    5604:	b570      	push	{r4, r5, r6, lr}
    5606:	2420      	movs	r4, #32
    5608:	2100      	movs	r1, #0
    560a:	2301      	movs	r3, #1
    560c:	fa20 f201 	lsr.w	r2, r0, r1
    5610:	07d2      	lsls	r2, r2, #31
    5612:	d020      	beq.n	5656 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    5614:	b24a      	sxtb	r2, r1
    5616:	2a00      	cmp	r2, #0
    5618:	db10      	blt.n	563c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x78>
    561a:	bf00      	nop
    561c:	ea4f 1652 	mov.w	r6, r2, lsr #5
    5620:	ea4f 0686 	mov.w	r6, r6, lsl #2
    5624:	f002 051f 	and.w	r5, r2, #31
    5628:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    562c:	fa03 f505 	lsl.w	r5, r3, r5
    5630:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    5634:	f3bf 8f4f 	dsb	sy
    5638:	f3bf 8f6f 	isb	sy
    563c:	db0b      	blt.n	5656 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    563e:	f002 051f 	and.w	r5, r2, #31
    5642:	ea4f 1252 	mov.w	r2, r2, lsr #5
    5646:	ea4f 0282 	mov.w	r2, r2, lsl #2
    564a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    564e:	fa03 f505 	lsl.w	r5, r3, r5
    5652:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    5656:	f101 0101 	add.w	r1, r1, #1
    565a:	42a1      	cmp	r1, r4
    565c:	d3d6      	bcc.n	560c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>
    565e:	bd70      	pop	{r4, r5, r6, pc}
    5660:	b570      	push	{r4, r5, r6, lr}
    5662:	0042      	lsls	r2, r0, #1
    5664:	f04f 0100 	mov.w	r1, #0
    5668:	d501      	bpl.n	566e <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xaa>
    566a:	4a14      	ldr	r2, [pc, #80]	; (56bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xf8>)
    566c:	6011      	str	r1, [r2, #0]
    566e:	f3c0 3280 	ubfx	r2, r0, #14, #1
    5672:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    5676:	429a      	cmp	r2, r3
    5678:	d003      	beq.n	5682 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xbe>
    567a:	2166      	movs	r1, #102	; 0x66
    567c:	201b      	movs	r0, #27
    567e:	f7ff fb4b 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5682:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    5686:	d014      	beq.n	56b2 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xee>
    5688:	4a0d      	ldr	r2, [pc, #52]	; (56c0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xfc>)
    568a:	2001      	movs	r0, #1
    568c:	6050      	str	r0, [r2, #4]
    568e:	1e83      	subs	r3, r0, #2
    5690:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5694:	4a0b      	ldr	r2, [pc, #44]	; (56c4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x100>)
    5696:	6090      	str	r0, [r2, #8]
    5698:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    569c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    56a0:	4c09      	ldr	r4, [pc, #36]	; (56c8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x104>)
    56a2:	6021      	str	r1, [r4, #0]
    56a4:	1d25      	adds	r5, r4, #4
    56a6:	6028      	str	r0, [r5, #0]
    56a8:	6090      	str	r0, [r2, #8]
    56aa:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    56ae:	6021      	str	r1, [r4, #0]
    56b0:	6028      	str	r0, [r5, #0]
    56b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    56b6:	f7ff bf8d 	b.w	55d4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    56ba:	0000      	.short	0x0000
    56bc:	4001e504 	.word	0x4001e504
    56c0:	4000e000 	.word	0x4000e000
    56c4:	4000f000 	.word	0x4000f000
    56c8:	4000f500 	.word	0x4000f500

000056cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    56cc:	b570      	push	{r4, r5, r6, lr}
    56ce:	4c0a      	ldr	r4, [pc, #40]	; (56f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    56d0:	460d      	mov	r5, r1
    56d2:	6020      	str	r0, [r4, #0]
    56d4:	f7ff ffc4 	bl	5660 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x9c>
    56d8:	6820      	ldr	r0, [r4, #0]
    56da:	f7ff ff93 	bl	5604 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x40>
    56de:	f000 f877 	bl	57d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    56e2:	f7ff ff77 	bl	55d4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    56e6:	f009 f80f 	bl	e708 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    56ea:	4628      	mov	r0, r5
    56ec:	f000 f8aa 	bl	5844 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    56f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    56f4:	f000 b8c2 	b.w	587c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    56f8:	20000084 	.word	0x20000084

000056fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    56fc:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5700:	4e2f      	ldr	r6, [pc, #188]	; (57c0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    5702:	4683      	mov	fp, r0
    5704:	6830      	ldr	r0, [r6, #0]
    5706:	9001      	str	r0, [sp, #4]
    5708:	2701      	movs	r7, #1
    570a:	482e      	ldr	r0, [pc, #184]	; (57c4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    570c:	f007 fe63 	bl	d3d6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5710:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 57c4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    5714:	b920      	cbnz	r0, 5720 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    5716:	2700      	movs	r7, #0
    5718:	f108 0001 	add.w	r0, r8, #1
    571c:	f007 fe72 	bl	d404 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    5720:	4c29      	ldr	r4, [pc, #164]	; (57c8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    5722:	2500      	movs	r5, #0
    5724:	f04f 0903 	mov.w	r9, #3
    5728:	2001      	movs	r0, #1
    572a:	6060      	str	r0, [r4, #4]
    572c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    5730:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    5734:	f8c6 b000 	str.w	fp, [r6]
    5738:	6020      	str	r0, [r4, #0]
    573a:	f8df a090 	ldr.w	sl, [pc, #144]	; 57cc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    573e:	e017      	b.n	5770 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    5740:	f8da 0000 	ldr.w	r0, [sl]
    5744:	06c0      	lsls	r0, r0, #27
    5746:	d513      	bpl.n	5770 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    5748:	200e      	movs	r0, #14
    574a:	f008 ffce 	bl	e6ea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    574e:	f3ef 8010 	mrs	r0, PRIMASK
    5752:	9000      	str	r0, [sp, #0]
    5754:	b672      	cpsid	i
    5756:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    575a:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    575e:	b920      	cbnz	r0, 576a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    5760:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    5764:	b908      	cbnz	r0, 576a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    5766:	f7ff f921 	bl	49ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    576a:	9800      	ldr	r0, [sp, #0]
    576c:	b900      	cbnz	r0, 5770 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    576e:	b662      	cpsie	i
    5770:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    5774:	b918      	cbnz	r0, 577e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    5776:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    577a:	2800      	cmp	r0, #0
    577c:	d0e0      	beq.n	5740 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    577e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    5782:	2800      	cmp	r0, #0
    5784:	d1d0      	bne.n	5728 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    5786:	b137      	cbz	r7, 5796 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    5788:	9801      	ldr	r0, [sp, #4]
    578a:	6030      	str	r0, [r6, #0]
    578c:	f108 0001 	add.w	r0, r8, #1
    5790:	f007 fe21 	bl	d3d6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5794:	e011      	b.n	57ba <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    5796:	f108 0001 	add.w	r0, r8, #1
    579a:	f007 fe1c 	bl	d3d6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    579e:	2800      	cmp	r0, #0
    57a0:	d1ba      	bne.n	5718 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    57a2:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    57a6:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    57aa:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    57ae:	200e      	movs	r0, #14
    57b0:	f008 ff9b 	bl	e6ea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    57b4:	4803      	ldr	r0, [pc, #12]	; (57c4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    57b6:	f007 fe25 	bl	d404 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    57ba:	2000      	movs	r0, #0
    57bc:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    57c0:	4000e504 	.word	0x4000e504
    57c4:	2000027f 	.word	0x2000027f
    57c8:	4000e000 	.word	0x4000e000
    57cc:	e000ed10 	.word	0xe000ed10

000057d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    57d0:	b510      	push	{r4, lr}
    57d2:	4808      	ldr	r0, [pc, #32]	; (57f4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    57d4:	f007 fe12 	bl	d3fc <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    57d8:	b108      	cbz	r0, 57de <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    57da:	2124      	movs	r1, #36	; 0x24
    57dc:	e006      	b.n	57ec <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    57de:	4805      	ldr	r0, [pc, #20]	; (57f4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    57e0:	1c40      	adds	r0, r0, #1
    57e2:	f007 fe0b 	bl	d3fc <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    57e6:	2800      	cmp	r0, #0
    57e8:	d003      	beq.n	57f2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    57ea:	2128      	movs	r1, #40	; 0x28
    57ec:	201d      	movs	r0, #29
    57ee:	f7ff fa93 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57f2:	bd10      	pop	{r4, pc}
    57f4:	2000027f 	.word	0x2000027f

000057f8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    57f8:	b570      	push	{r4, r5, r6, lr}
    57fa:	4911      	ldr	r1, [pc, #68]	; (5840 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    57fc:	680a      	ldr	r2, [r1, #0]
    57fe:	b1ea      	cbz	r2, 583c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    5800:	2300      	movs	r3, #0
    5802:	461d      	mov	r5, r3
    5804:	2401      	movs	r4, #1
    5806:	684a      	ldr	r2, [r1, #4]
    5808:	1c52      	adds	r2, r2, #1
    580a:	604a      	str	r2, [r1, #4]
    580c:	2a0c      	cmp	r2, #12
    580e:	d300      	bcc.n	5812 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    5810:	604d      	str	r5, [r1, #4]
    5812:	790e      	ldrb	r6, [r1, #4]
    5814:	fa04 f206 	lsl.w	r2, r4, r6
    5818:	680e      	ldr	r6, [r1, #0]
    581a:	4216      	tst	r6, r2
    581c:	d00b      	beq.n	5836 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    581e:	f3ef 8310 	mrs	r3, PRIMASK
    5822:	b672      	cpsid	i
    5824:	680c      	ldr	r4, [r1, #0]
    5826:	4394      	bics	r4, r2
    5828:	600c      	str	r4, [r1, #0]
    582a:	b903      	cbnz	r3, 582e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    582c:	b662      	cpsie	i
    582e:	6849      	ldr	r1, [r1, #4]
    5830:	6001      	str	r1, [r0, #0]
    5832:	2000      	movs	r0, #0
    5834:	bd70      	pop	{r4, r5, r6, pc}
    5836:	1c5b      	adds	r3, r3, #1
    5838:	2b0c      	cmp	r3, #12
    583a:	d3e4      	bcc.n	5806 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    583c:	2005      	movs	r0, #5
    583e:	bd70      	pop	{r4, r5, r6, pc}
    5840:	20000088 	.word	0x20000088

00005844 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    5844:	4802      	ldr	r0, [pc, #8]	; (5850 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    5846:	2100      	movs	r1, #0
    5848:	6001      	str	r1, [r0, #0]
    584a:	6041      	str	r1, [r0, #4]
    584c:	4770      	bx	lr
    584e:	0000      	.short	0x0000
    5850:	20000088 	.word	0x20000088

00005854 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5854:	b510      	push	{r4, lr}
    5856:	4c08      	ldr	r4, [pc, #32]	; (5878 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5858:	7861      	ldrb	r1, [r4, #1]
    585a:	b109      	cbz	r1, 5860 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    585c:	200f      	movs	r0, #15
    585e:	bd10      	pop	{r4, pc}
    5860:	f7ff f830 	bl	48c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5864:	7020      	strb	r0, [r4, #0]
    5866:	28ff      	cmp	r0, #255	; 0xff
    5868:	d001      	beq.n	586e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    586a:	2000      	movs	r0, #0
    586c:	bd10      	pop	{r4, pc}
    586e:	2176      	movs	r1, #118	; 0x76
    5870:	201f      	movs	r0, #31
    5872:	f7ff fa51 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5876:	0000      	.short	0x0000
    5878:	20000090 	.word	0x20000090

0000587c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    587c:	4901      	ldr	r1, [pc, #4]	; (5884 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    587e:	2000      	movs	r0, #0
    5880:	7048      	strb	r0, [r1, #1]
    5882:	4770      	bx	lr
    5884:	20000090 	.word	0x20000090

00005888 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    5888:	4806      	ldr	r0, [pc, #24]	; (58a4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    588a:	4a07      	ldr	r2, [pc, #28]	; (58a8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    588c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    588e:	8852      	ldrh	r2, [r2, #2]
    5890:	4291      	cmp	r1, r2
    5892:	d104      	bne.n	589e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5894:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5898:	b108      	cbz	r0, 589e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    589a:	2000      	movs	r0, #0
    589c:	4770      	bx	lr
    589e:	2001      	movs	r0, #1
    58a0:	4770      	bx	lr
    58a2:	0000      	.short	0x0000
    58a4:	20001134 	.word	0x20001134
    58a8:	2000026c 	.word	0x2000026c

000058ac <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    58ac:	4901      	ldr	r1, [pc, #4]	; (58b4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    58ae:	8048      	strh	r0, [r1, #2]
    58b0:	4770      	bx	lr
    58b2:	0000      	.short	0x0000
    58b4:	2000026c 	.word	0x2000026c

000058b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    58b8:	4808      	ldr	r0, [pc, #32]	; (58dc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    58ba:	4a09      	ldr	r2, [pc, #36]	; (58e0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    58bc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    58be:	8852      	ldrh	r2, [r2, #2]
    58c0:	4291      	cmp	r1, r2
    58c2:	d109      	bne.n	58d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    58c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    58c8:	8481      	strh	r1, [r0, #36]	; 0x24
    58ca:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    58ce:	b119      	cbz	r1, 58d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    58d0:	2100      	movs	r1, #0
    58d2:	7001      	strb	r1, [r0, #0]
    58d4:	2001      	movs	r0, #1
    58d6:	4770      	bx	lr
    58d8:	2000      	movs	r0, #0
    58da:	4770      	bx	lr
    58dc:	20001134 	.word	0x20001134
    58e0:	2000026c 	.word	0x2000026c

000058e4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    58e4:	4807      	ldr	r0, [pc, #28]	; (5904 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    58e6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    58ea:	2901      	cmp	r1, #1
    58ec:	d007      	beq.n	58fe <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    58ee:	2101      	movs	r1, #1
    58f0:	7001      	strb	r1, [r0, #0]
    58f2:	4805      	ldr	r0, [pc, #20]	; (5908 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    58f4:	4903      	ldr	r1, [pc, #12]	; (5904 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    58f6:	8800      	ldrh	r0, [r0, #0]
    58f8:	8488      	strh	r0, [r1, #36]	; 0x24
    58fa:	2001      	movs	r0, #1
    58fc:	4770      	bx	lr
    58fe:	2000      	movs	r0, #0
    5900:	4770      	bx	lr
    5902:	0000      	.short	0x0000
    5904:	20001134 	.word	0x20001134
    5908:	2000026c 	.word	0x2000026c

0000590c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    590c:	4906      	ldr	r1, [pc, #24]	; (5928 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    590e:	4b07      	ldr	r3, [pc, #28]	; (592c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5910:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5912:	885b      	ldrh	r3, [r3, #2]
    5914:	429a      	cmp	r2, r3
    5916:	d105      	bne.n	5924 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5918:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    591c:	b112      	cbz	r2, 5924 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    591e:	6001      	str	r1, [r0, #0]
    5920:	2001      	movs	r0, #1
    5922:	4770      	bx	lr
    5924:	2000      	movs	r0, #0
    5926:	4770      	bx	lr
    5928:	20001134 	.word	0x20001134
    592c:	2000026c 	.word	0x2000026c

00005930 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5930:	4909      	ldr	r1, [pc, #36]	; (5958 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5932:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5934:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5938:	3bff      	subs	r3, #255	; 0xff
    593a:	d002      	beq.n	5942 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    593c:	2100      	movs	r1, #0
    593e:	6001      	str	r1, [r0, #0]
    5940:	e007      	b.n	5952 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5942:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5946:	4904      	ldr	r1, [pc, #16]	; (5958 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5948:	2a01      	cmp	r2, #1
    594a:	d002      	beq.n	5952 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    594c:	6001      	str	r1, [r0, #0]
    594e:	2001      	movs	r0, #1
    5950:	4770      	bx	lr
    5952:	2000      	movs	r0, #0
    5954:	4770      	bx	lr
    5956:	0000      	.short	0x0000
    5958:	20001134 	.word	0x20001134

0000595c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    595c:	4901      	ldr	r1, [pc, #4]	; (5964 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    595e:	8008      	strh	r0, [r1, #0]
    5960:	4770      	bx	lr
    5962:	0000      	.short	0x0000
    5964:	2000026c 	.word	0x2000026c

00005968 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5968:	4905      	ldr	r1, [pc, #20]	; (5980 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    596a:	2000      	movs	r0, #0
    596c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5970:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5974:	8488      	strh	r0, [r1, #36]	; 0x24
    5976:	4903      	ldr	r1, [pc, #12]	; (5984 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5978:	8008      	strh	r0, [r1, #0]
    597a:	8048      	strh	r0, [r1, #2]
    597c:	4770      	bx	lr
    597e:	0000      	.short	0x0000
    5980:	20001134 	.word	0x20001134
    5984:	2000026c 	.word	0x2000026c
    5988:	4905      	ldr	r1, [pc, #20]	; (59a0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    598a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    598c:	4282      	cmp	r2, r0
    598e:	d105      	bne.n	599c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5990:	2000      	movs	r0, #0
    5992:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5996:	f64f 70ff 	movw	r0, #65535	; 0xffff
    599a:	8488      	strh	r0, [r1, #36]	; 0x24
    599c:	4770      	bx	lr
    599e:	0000      	.short	0x0000
    59a0:	20001134 	.word	0x20001134

000059a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    59a4:	4a0a      	ldr	r2, [pc, #40]	; (59d0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    59a6:	b110      	cbz	r0, 59ae <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    59a8:	2801      	cmp	r0, #1
    59aa:	d007      	beq.n	59bc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    59ac:	e00e      	b.n	59cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    59ae:	7850      	ldrb	r0, [r2, #1]
    59b0:	b160      	cbz	r0, 59cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    59b2:	f8d2 0002 	ldr.w	r0, [r2, #2]
    59b6:	6008      	str	r0, [r1, #0]
    59b8:	88d0      	ldrh	r0, [r2, #6]
    59ba:	e004      	b.n	59c6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    59bc:	7810      	ldrb	r0, [r2, #0]
    59be:	b128      	cbz	r0, 59cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    59c0:	6890      	ldr	r0, [r2, #8]
    59c2:	6008      	str	r0, [r1, #0]
    59c4:	8990      	ldrh	r0, [r2, #12]
    59c6:	8088      	strh	r0, [r1, #4]
    59c8:	2001      	movs	r0, #1
    59ca:	4770      	bx	lr
    59cc:	2000      	movs	r0, #0
    59ce:	4770      	bx	lr
    59d0:	20000281 	.word	0x20000281

000059d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    59d4:	4a08      	ldr	r2, [pc, #32]	; (59f8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    59d6:	2301      	movs	r3, #1
    59d8:	b138      	cbz	r0, 59ea <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    59da:	2801      	cmp	r0, #1
    59dc:	d104      	bne.n	59e8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    59de:	7013      	strb	r3, [r2, #0]
    59e0:	6808      	ldr	r0, [r1, #0]
    59e2:	6090      	str	r0, [r2, #8]
    59e4:	8888      	ldrh	r0, [r1, #4]
    59e6:	8190      	strh	r0, [r2, #12]
    59e8:	4770      	bx	lr
    59ea:	7053      	strb	r3, [r2, #1]
    59ec:	6808      	ldr	r0, [r1, #0]
    59ee:	f8c2 0002 	str.w	r0, [r2, #2]
    59f2:	8888      	ldrh	r0, [r1, #4]
    59f4:	80d0      	strh	r0, [r2, #6]
    59f6:	4770      	bx	lr
    59f8:	20000281 	.word	0x20000281

000059fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    59fc:	4906      	ldr	r1, [pc, #24]	; (5a18 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    59fe:	b110      	cbz	r0, 5a06 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5a00:	2801      	cmp	r0, #1
    5a02:	d002      	beq.n	5a0a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5a04:	e005      	b.n	5a12 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5a06:	7848      	ldrb	r0, [r1, #1]
    5a08:	e000      	b.n	5a0c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    5a0a:	7808      	ldrb	r0, [r1, #0]
    5a0c:	b108      	cbz	r0, 5a12 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5a0e:	2001      	movs	r0, #1
    5a10:	4770      	bx	lr
    5a12:	2000      	movs	r0, #0
    5a14:	4770      	bx	lr
    5a16:	0000      	.short	0x0000
    5a18:	20000281 	.word	0x20000281

00005a1c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    5a1c:	4901      	ldr	r1, [pc, #4]	; (5a24 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    5a1e:	7448      	strb	r0, [r1, #17]
    5a20:	4770      	bx	lr
    5a22:	0000      	.short	0x0000
    5a24:	20000992 	.word	0x20000992

00005a28 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    5a28:	b578      	push	{r3, r4, r5, r6, lr}
    5a2a:	4913      	ldr	r1, [pc, #76]	; (5a78 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    5a2c:	7c4a      	ldrb	r2, [r1, #17]
    5a2e:	b30a      	cbz	r2, 5a74 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    5a30:	7c0a      	ldrb	r2, [r1, #16]
    5a32:	f88d 2000 	strb.w	r2, [sp]
    5a36:	9a00      	ldr	r2, [sp, #0]
    5a38:	9200      	str	r2, [sp, #0]
    5a3a:	f89d 2000 	ldrb.w	r2, [sp]
    5a3e:	b1ca      	cbz	r2, 5a74 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    5a40:	2300      	movs	r3, #0
    5a42:	f101 0210 	add.w	r2, r1, #16
    5a46:	241f      	movs	r4, #31
    5a48:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    5a4c:	7c0e      	ldrb	r6, [r1, #16]
    5a4e:	f88d 6000 	strb.w	r6, [sp]
    5a52:	9e00      	ldr	r6, [sp, #0]
    5a54:	9600      	str	r6, [sp, #0]
    5a56:	f89d 6000 	ldrb.w	r6, [sp]
    5a5a:	b14e      	cbz	r6, 5a70 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    5a5c:	7013      	strb	r3, [r2, #0]
    5a5e:	7043      	strb	r3, [r0, #1]
    5a60:	7004      	strb	r4, [r0, #0]
    5a62:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    5a66:	6046      	str	r6, [r0, #4]
    5a68:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    5a6c:	6086      	str	r6, [r0, #8]
    5a6e:	e7ed      	b.n	5a4c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    5a70:	2001      	movs	r0, #1
    5a72:	bd78      	pop	{r3, r4, r5, r6, pc}
    5a74:	2000      	movs	r0, #0
    5a76:	bd78      	pop	{r3, r4, r5, r6, pc}
    5a78:	20000992 	.word	0x20000992

00005a7c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5a7c:	b510      	push	{r4, lr}
    5a7e:	4604      	mov	r4, r0
    5a80:	f000 f966 	bl	5d50 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5a84:	b118      	cbz	r0, 5a8e <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    5a86:	21bd      	movs	r1, #189	; 0xbd
    5a88:	2027      	movs	r0, #39	; 0x27
    5a8a:	f7ff f945 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a8e:	4803      	ldr	r0, [pc, #12]	; (5a9c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5a90:	2101      	movs	r1, #1
    5a92:	f009 fa13 	bl	eebc <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5a96:	4802      	ldr	r0, [pc, #8]	; (5aa0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5a98:	62c4      	str	r4, [r0, #44]	; 0x2c
    5a9a:	bd10      	pop	{r4, pc}
    5a9c:	20000970 	.word	0x20000970
    5aa0:	200000ac 	.word	0x200000ac

00005aa4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5aa4:	4901      	ldr	r1, [pc, #4]	; (5aac <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5aa6:	2001      	movs	r0, #1
    5aa8:	7188      	strb	r0, [r1, #6]
    5aaa:	4770      	bx	lr
    5aac:	200000ac 	.word	0x200000ac

00005ab0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ab4:	4d6b      	ldr	r5, [pc, #428]	; (5c64 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b4>)
    5ab6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    5ab8:	782e      	ldrb	r6, [r5, #0]
    5aba:	bbee      	cbnz	r6, 5b38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5abc:	b3e2      	cbz	r2, 5b38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5abe:	b3db      	cbz	r3, 5b38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5ac0:	b3d4      	cbz	r4, 5b38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5ac2:	f105 0614 	add.w	r6, r5, #20
    5ac6:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    5aca:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    5ace:	2700      	movs	r7, #0
    5ad0:	71af      	strb	r7, [r5, #6]
    5ad2:	716f      	strb	r7, [r5, #5]
    5ad4:	70ef      	strb	r7, [r5, #3]
    5ad6:	70af      	strb	r7, [r5, #2]
    5ad8:	712f      	strb	r7, [r5, #4]
    5ada:	81af      	strh	r7, [r5, #12]
    5adc:	81ef      	strh	r7, [r5, #14]
    5ade:	f000 f97b 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5ae2:	4606      	mov	r6, r0
    5ae4:	f000 f972 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5ae8:	4604      	mov	r4, r0
    5aea:	f006 feb5 	bl	c858 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5aee:	f006 fba5 	bl	c23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5af2:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    5af6:	f006 ff39 	bl	c96c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5afa:	f104 0018 	add.w	r0, r4, #24
    5afe:	f007 f80f 	bl	cb20 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5b02:	6920      	ldr	r0, [r4, #16]
    5b04:	f007 f802 	bl	cb0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5b08:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    5b0c:	f007 f822 	bl	cb54 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5b10:	f04f 0b01 	mov.w	fp, #1
    5b14:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    5b18:	2000      	movs	r0, #0
    5b1a:	f006 fd69 	bl	c5f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5b1e:	2800      	cmp	r0, #0
    5b20:	d07e      	beq.n	5c20 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>
    5b22:	4851      	ldr	r0, [pc, #324]	; (5c68 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b8>)
    5b24:	f006 fdd8 	bl	c6d8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5b28:	8820      	ldrh	r0, [r4, #0]
    5b2a:	f7ff fd09 	bl	5540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5b2e:	6328      	str	r0, [r5, #48]	; 0x30
    5b30:	8820      	ldrh	r0, [r4, #0]
    5b32:	f7ff fcef 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5b36:	e000      	b.n	5b3a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    5b38:	e00a      	b.n	5b50 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa0>
    5b3a:	6368      	str	r0, [r5, #52]	; 0x34
    5b3c:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    5b40:	f88d 0000 	strb.w	r0, [sp]
    5b44:	9800      	ldr	r0, [sp, #0]
    5b46:	9000      	str	r0, [sp, #0]
    5b48:	f89d 0000 	ldrb.w	r0, [sp]
    5b4c:	b118      	cbz	r0, 5b56 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa6>
    5b4e:	e012      	b.n	5b76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    5b50:	f44f 718a 	mov.w	r1, #276	; 0x114
    5b54:	e082      	b.n	5c5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>
    5b56:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5b58:	b168      	cbz	r0, 5b76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    5b5a:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    5b5c:	88b1      	ldrh	r1, [r6, #4]
    5b5e:	4288      	cmp	r0, r1
    5b60:	d109      	bne.n	5b76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    5b62:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    5b66:	2201      	movs	r2, #1
    5b68:	4408      	add	r0, r1
    5b6a:	8670      	strh	r0, [r6, #50]	; 0x32
    5b6c:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    5b70:	6f21      	ldr	r1, [r4, #112]	; 0x70
    5b72:	f7fd fdad 	bl	36d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    5b76:	f106 0168 	add.w	r1, r6, #104	; 0x68
    5b7a:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 5c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>
    5b7e:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    5b82:	f109 0808 	add.w	r8, r9, #8
    5b86:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    5b8a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    5b8c:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    5b90:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    5b92:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    5b96:	f000 f98d 	bl	5eb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>
    5b9a:	4601      	mov	r1, r0
    5b9c:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    5b9e:	46ba      	mov	sl, r7
    5ba0:	f008 ff77 	bl	ea92 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5ba4:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    5ba6:	4281      	cmp	r1, r0
    5ba8:	d200      	bcs.n	5bac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    5baa:	4608      	mov	r0, r1
    5bac:	7228      	strb	r0, [r5, #8]
    5bae:	46a8      	mov	r8, r5
    5bb0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    5bb4:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    5bb6:	7cf7      	ldrb	r7, [r6, #19]
    5bb8:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    5bba:	2908      	cmp	r1, #8
    5bbc:	d100      	bne.n	5bc0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    5bbe:	2104      	movs	r1, #4
    5bc0:	f008 ff67 	bl	ea92 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5bc4:	b90f      	cbnz	r7, 5bca <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11a>
    5bc6:	1d00      	adds	r0, r0, #4
    5bc8:	b280      	uxth	r0, r0
    5bca:	4285      	cmp	r5, r0
    5bcc:	d200      	bcs.n	5bd0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    5bce:	4628      	mov	r0, r5
    5bd0:	b2c0      	uxtb	r0, r0
    5bd2:	f888 0009 	strb.w	r0, [r8, #9]
    5bd6:	7cf2      	ldrb	r2, [r6, #19]
    5bd8:	b102      	cbz	r2, 5bdc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12c>
    5bda:	2204      	movs	r2, #4
    5bdc:	4410      	add	r0, r2
    5bde:	b2c0      	uxtb	r0, r0
    5be0:	f888 0007 	strb.w	r0, [r8, #7]
    5be4:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    5be8:	1d09      	adds	r1, r1, #4
    5bea:	4281      	cmp	r1, r0
    5bec:	d202      	bcs.n	5bf4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x144>
    5bee:	f240 119f 	movw	r1, #415	; 0x19f
    5bf2:	e033      	b.n	5c5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>
    5bf4:	7cb0      	ldrb	r0, [r6, #18]
    5bf6:	b1b0      	cbz	r0, 5c26 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    5bf8:	481c      	ldr	r0, [pc, #112]	; (5c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    5bfa:	3008      	adds	r0, #8
    5bfc:	f880 b018 	strb.w	fp, [r0, #24]
    5c00:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    5c04:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5c08:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5c0c:	f008 fe06 	bl	e81c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5c10:	4916      	ldr	r1, [pc, #88]	; (5c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    5c12:	4603      	mov	r3, r0
    5c14:	22fb      	movs	r2, #251	; 0xfb
    5c16:	3108      	adds	r1, #8
    5c18:	2000      	movs	r0, #0
    5c1a:	f006 fb59 	bl	c2d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5c1e:	e000      	b.n	5c22 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5c20:	e018      	b.n	5c54 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>
    5c22:	f006 fb8b 	bl	c33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5c26:	2001      	movs	r0, #1
    5c28:	f000 fb94 	bl	6354 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    5c2c:	4810      	ldr	r0, [pc, #64]	; (5c70 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1c0>)
    5c2e:	6800      	ldr	r0, [r0, #0]
    5c30:	2803      	cmp	r0, #3
    5c32:	d011      	beq.n	5c58 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    5c34:	280b      	cmp	r0, #11
    5c36:	d00f      	beq.n	5c58 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    5c38:	4648      	mov	r0, r9
    5c3a:	f840 af52 	str.w	sl, [r0, #82]!
    5c3e:	f8c0 a004 	str.w	sl, [r0, #4]
    5c42:	480a      	ldr	r0, [pc, #40]	; (5c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    5c44:	88b1      	ldrh	r1, [r6, #4]
    5c46:	3052      	adds	r0, #82	; 0x52
    5c48:	8041      	strh	r1, [r0, #2]
    5c4a:	8821      	ldrh	r1, [r4, #0]
    5c4c:	8001      	strh	r1, [r0, #0]
    5c4e:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    5c52:	7101      	strb	r1, [r0, #4]
    5c54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c58:	f240 11c7 	movw	r1, #455	; 0x1c7
    5c5c:	2027      	movs	r0, #39	; 0x27
    5c5e:	f7ff f85b 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c62:	0000      	.short	0x0000
    5c64:	200000ac 	.word	0x200000ac
    5c68:	000064d8 	.word	0x000064d8
    5c6c:	20000940 	.word	0x20000940
    5c70:	40001550 	.word	0x40001550

00005c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c78:	4605      	mov	r5, r0
    5c7a:	f000 f8ad 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5c7e:	4e33      	ldr	r6, [pc, #204]	; (5d4c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    5c80:	4604      	mov	r4, r0
    5c82:	6a70      	ldr	r0, [r6, #36]	; 0x24
    5c84:	7847      	ldrb	r7, [r0, #1]
    5c86:	b10d      	cbz	r5, 5c8c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    5c88:	2d01      	cmp	r5, #1
    5c8a:	d103      	bne.n	5c94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    5c8c:	6b71      	ldr	r1, [r6, #52]	; 0x34
    5c8e:	f007 fd74 	bl	d77a <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    5c92:	7070      	strb	r0, [r6, #1]
    5c94:	7870      	ldrb	r0, [r6, #1]
    5c96:	f04f 0800 	mov.w	r8, #0
    5c9a:	f04f 0901 	mov.w	r9, #1
    5c9e:	b150      	cbz	r0, 5cb6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    5ca0:	2801      	cmp	r0, #1
    5ca2:	d01a      	beq.n	5cda <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    5ca4:	2802      	cmp	r0, #2
    5ca6:	d034      	beq.n	5d12 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    5ca8:	2803      	cmp	r0, #3
    5caa:	d048      	beq.n	5d3e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    5cac:	f240 4114 	movw	r1, #1044	; 0x414
    5cb0:	2027      	movs	r0, #39	; 0x27
    5cb2:	f7ff f831 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cb6:	2d01      	cmp	r5, #1
    5cb8:	d032      	beq.n	5d20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5cba:	f000 f8e7 	bl	5e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    5cbe:	4639      	mov	r1, r7
    5cc0:	2201      	movs	r2, #1
    5cc2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5cc4:	f008 fa33 	bl	e12e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5cc8:	e028      	b.n	5d1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5cca:	bf00      	nop
    5ccc:	f884 8008 	strb.w	r8, [r4, #8]
    5cd0:	e031      	b.n	5d36 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5cd2:	bf00      	nop
    5cd4:	f884 9008 	strb.w	r9, [r4, #8]
    5cd8:	e02d      	b.n	5d36 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5cda:	2d01      	cmp	r5, #1
    5cdc:	d008      	beq.n	5cf0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    5cde:	f000 f8d5 	bl	5e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    5ce2:	4639      	mov	r1, r7
    5ce4:	2200      	movs	r2, #0
    5ce6:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5ce8:	f008 fa21 	bl	e12e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5cec:	2d02      	cmp	r5, #2
    5cee:	d00b      	beq.n	5d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5cf0:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    5cf4:	1c40      	adds	r0, r0, #1
    5cf6:	f141 0100 	adc.w	r1, r1, #0
    5cfa:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    5cfe:	7a20      	ldrb	r0, [r4, #8]
    5d00:	2801      	cmp	r0, #1
    5d02:	d003      	beq.n	5d0c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    5d04:	f884 9008 	strb.w	r9, [r4, #8]
    5d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d0c:	f884 8008 	strb.w	r8, [r4, #8]
    5d10:	e7fa      	b.n	5d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5d12:	2d01      	cmp	r5, #1
    5d14:	d004      	beq.n	5d20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5d16:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5d18:	f008 fc43 	bl	e5a2 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5d1c:	2d02      	cmp	r5, #2
    5d1e:	d0f3      	beq.n	5d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5d20:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    5d24:	1c40      	adds	r0, r0, #1
    5d26:	f141 0100 	adc.w	r1, r1, #0
    5d2a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    5d2e:	7a20      	ldrb	r0, [r4, #8]
    5d30:	2801      	cmp	r0, #1
    5d32:	d1cf      	bne.n	5cd4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    5d34:	e7ca      	b.n	5ccc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    5d36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d3a:	f005 bc21 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5d3e:	2d01      	cmp	r5, #1
    5d40:	d0e2      	beq.n	5d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5d42:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5d44:	f008 fc2d 	bl	e5a2 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5d48:	e7f5      	b.n	5d36 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5d4a:	0000      	.short	0x0000
    5d4c:	200000ac 	.word	0x200000ac

00005d50 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5d50:	4804      	ldr	r0, [pc, #16]	; (5d64 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5d52:	7800      	ldrb	r0, [r0, #0]
    5d54:	b108      	cbz	r0, 5d5a <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    5d56:	200c      	movs	r0, #12
    5d58:	4770      	bx	lr
    5d5a:	4903      	ldr	r1, [pc, #12]	; (5d68 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5d5c:	2000      	movs	r0, #0
    5d5e:	7448      	strb	r0, [r1, #17]
    5d60:	4770      	bx	lr
    5d62:	0000      	.short	0x0000
    5d64:	200000ac 	.word	0x200000ac
    5d68:	20000992 	.word	0x20000992

00005d6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5d6c:	4812      	ldr	r0, [pc, #72]	; (5db8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    5d6e:	b508      	push	{r3, lr}
    5d70:	7801      	ldrb	r1, [r0, #0]
    5d72:	b139      	cbz	r1, 5d84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    5d74:	7800      	ldrb	r0, [r0, #0]
    5d76:	2801      	cmp	r0, #1
    5d78:	d006      	beq.n	5d88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5d7a:	f240 11df 	movw	r1, #479	; 0x1df
    5d7e:	2027      	movs	r0, #39	; 0x27
    5d80:	f7fe ffca 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d84:	f000 f9ce 	bl	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5d88:	f000 f820 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5d8c:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    5d90:	f88d 1000 	strb.w	r1, [sp]
    5d94:	9900      	ldr	r1, [sp, #0]
    5d96:	9100      	str	r1, [sp, #0]
    5d98:	f89d 1000 	ldrb.w	r1, [sp]
    5d9c:	2900      	cmp	r1, #0
    5d9e:	d10a      	bne.n	5db6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    5da0:	6f01      	ldr	r1, [r0, #112]	; 0x70
    5da2:	2900      	cmp	r1, #0
    5da4:	d007      	beq.n	5db6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    5da6:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    5daa:	2200      	movs	r2, #0
    5dac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5db0:	4611      	mov	r1, r2
    5db2:	f7fd bc8d 	b.w	36d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    5db6:	bd08      	pop	{r3, pc}
    5db8:	200000ac 	.word	0x200000ac
    5dbc:	4a02      	ldr	r2, [pc, #8]	; (5dc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5dbe:	8993      	ldrh	r3, [r2, #12]
    5dc0:	4303      	orrs	r3, r0
    5dc2:	8193      	strh	r3, [r2, #12]
    5dc4:	6952      	ldr	r2, [r2, #20]
    5dc6:	4710      	bx	r2
    5dc8:	200000ac 	.word	0x200000ac
    5dcc:	4801      	ldr	r0, [pc, #4]	; (5dd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5dce:	6840      	ldr	r0, [r0, #4]
    5dd0:	4770      	bx	lr
    5dd2:	0000      	.short	0x0000
    5dd4:	200000e4 	.word	0x200000e4
    5dd8:	4801      	ldr	r0, [pc, #4]	; (5de0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    5dda:	6840      	ldr	r0, [r0, #4]
    5ddc:	3078      	adds	r0, #120	; 0x78
    5dde:	4770      	bx	lr
    5de0:	200000e4 	.word	0x200000e4
    5de4:	4a01      	ldr	r2, [pc, #4]	; (5dec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    5de6:	2100      	movs	r1, #0
    5de8:	6952      	ldr	r2, [r2, #20]
    5dea:	4710      	bx	r2
    5dec:	200000ac 	.word	0x200000ac
    5df0:	b570      	push	{r4, r5, r6, lr}
    5df2:	f7ff fff1 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5df6:	4604      	mov	r4, r0
    5df8:	f7ff ffe8 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5dfc:	4605      	mov	r5, r0
    5dfe:	4621      	mov	r1, r4
    5e00:	f008 ff0f 	bl	ec22 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5e04:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    5e08:	2901      	cmp	r1, #1
    5e0a:	d114      	bne.n	5e36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    5e0c:	2800      	cmp	r0, #0
    5e0e:	d012      	beq.n	5e36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    5e10:	4909      	ldr	r1, [pc, #36]	; (5e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>)
    5e12:	2001      	movs	r0, #1
    5e14:	684a      	ldr	r2, [r1, #4]
    5e16:	8829      	ldrh	r1, [r5, #0]
    5e18:	f8a2 118a 	strh.w	r1, [r2, #394]	; 0x18a
    5e1c:	7a61      	ldrb	r1, [r4, #9]
    5e1e:	f882 118c 	strb.w	r1, [r2, #396]	; 0x18c
    5e22:	7aa1      	ldrb	r1, [r4, #10]
    5e24:	f882 118d 	strb.w	r1, [r2, #397]	; 0x18d
    5e28:	f502 72c4 	add.w	r2, r2, #392	; 0x188
    5e2c:	7010      	strb	r0, [r2, #0]
    5e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e32:	f005 bba5 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5e36:	bd70      	pop	{r4, r5, r6, pc}
    5e38:	200000e4 	.word	0x200000e4
    5e3c:	b570      	push	{r4, r5, r6, lr}
    5e3e:	4605      	mov	r5, r0
    5e40:	2901      	cmp	r1, #1
    5e42:	d81c      	bhi.n	5e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5e44:	4c10      	ldr	r4, [pc, #64]	; (5e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>)
    5e46:	69a1      	ldr	r1, [r4, #24]
    5e48:	4788      	blx	r1
    5e4a:	b1c0      	cbz	r0, 5e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5e4c:	7960      	ldrb	r0, [r4, #5]
    5e4e:	b9b0      	cbnz	r0, 5e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5e50:	2d01      	cmp	r5, #1
    5e52:	d116      	bne.n	5e82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    5e54:	f104 0010 	add.w	r0, r4, #16
    5e58:	7800      	ldrb	r0, [r0, #0]
    5e5a:	06c1      	lsls	r1, r0, #27
    5e5c:	d405      	bmi.n	5e6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    5e5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    5e60:	7809      	ldrb	r1, [r1, #0]
    5e62:	06c9      	lsls	r1, r1, #27
    5e64:	d401      	bmi.n	5e6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    5e66:	2101      	movs	r1, #1
    5e68:	e000      	b.n	5e6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    5e6a:	2100      	movs	r1, #0
    5e6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5e6e:	b91a      	cbnz	r2, 5e78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    5e70:	8962      	ldrh	r2, [r4, #10]
    5e72:	b10a      	cbz	r2, 5e78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    5e74:	06c0      	lsls	r0, r0, #27
    5e76:	d502      	bpl.n	5e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5e78:	89a0      	ldrh	r0, [r4, #12]
    5e7a:	4301      	orrs	r1, r0
    5e7c:	d001      	beq.n	5e82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    5e7e:	2001      	movs	r0, #1
    5e80:	bd70      	pop	{r4, r5, r6, pc}
    5e82:	2000      	movs	r0, #0
    5e84:	bd70      	pop	{r4, r5, r6, pc}
    5e86:	0000      	.short	0x0000
    5e88:	200000ac 	.word	0x200000ac
    5e8c:	b510      	push	{r4, lr}
    5e8e:	4c08      	ldr	r4, [pc, #32]	; (5eb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>)
    5e90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5e92:	b138      	cbz	r0, 5ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    5e94:	8962      	ldrh	r2, [r4, #10]
    5e96:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5e98:	1cd2      	adds	r2, r2, #3
    5e9a:	f007 fb45 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5e9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5ea0:	6260      	str	r0, [r4, #36]	; 0x24
    5ea2:	bd10      	pop	{r4, pc}
    5ea4:	f240 415a 	movw	r1, #1114	; 0x45a
    5ea8:	2027      	movs	r0, #39	; 0x27
    5eaa:	f7fe ff35 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5eae:	0000      	.short	0x0000
    5eb0:	200000ac 	.word	0x200000ac
    5eb4:	b510      	push	{r4, lr}
    5eb6:	f7ff ff89 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5eba:	4604      	mov	r4, r0
    5ebc:	f7ff ff8c 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5ec0:	7b41      	ldrb	r1, [r0, #13]
    5ec2:	4a0a      	ldr	r2, [pc, #40]	; (5eec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>)
    5ec4:	2924      	cmp	r1, #36	; 0x24
    5ec6:	d008      	beq.n	5eda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    5ec8:	7b80      	ldrb	r0, [r0, #14]
    5eca:	2824      	cmp	r0, #36	; 0x24
    5ecc:	d005      	beq.n	5eda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    5ece:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5ed2:	2804      	cmp	r0, #4
    5ed4:	d100      	bne.n	5ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5ed6:	2008      	movs	r0, #8
    5ed8:	bd10      	pop	{r4, pc}
    5eda:	6850      	ldr	r0, [r2, #4]
    5edc:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    5ee0:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5ee8:	f008 bca6 	b.w	e838 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    5eec:	200000e4 	.word	0x200000e4
    5ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ef4:	4689      	mov	r9, r1
    5ef6:	4606      	mov	r6, r0
    5ef8:	f7ff ff6e 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5efc:	4c58      	ldr	r4, [pc, #352]	; (6060 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>)
    5efe:	2700      	movs	r7, #0
    5f00:	4605      	mov	r5, r0
    5f02:	f88d 7000 	strb.w	r7, [sp]
    5f06:	7820      	ldrb	r0, [r4, #0]
    5f08:	2802      	cmp	r0, #2
    5f0a:	d004      	beq.n	5f16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    5f0c:	f240 41b9 	movw	r1, #1209	; 0x4b9
    5f10:	2027      	movs	r0, #39	; 0x27
    5f12:	f7fe ff01 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f16:	7ba0      	ldrb	r0, [r4, #14]
    5f18:	0640      	lsls	r0, r0, #25
    5f1a:	d406      	bmi.n	5f2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    5f1c:	2040      	movs	r0, #64	; 0x40
    5f1e:	f7ff ff61 	bl	5de4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5f22:	89e0      	ldrh	r0, [r4, #14]
    5f24:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5f28:	81e0      	strh	r0, [r4, #14]
    5f2a:	7ce8      	ldrb	r0, [r5, #19]
    5f2c:	f04f 0801 	mov.w	r8, #1
    5f30:	b3c6      	cbz	r6, 5fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x238>
    5f32:	f006 fa33 	bl	c39c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5f36:	f006 fa17 	bl	c368 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5f3a:	b968      	cbnz	r0, 5f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5f3c:	7ce8      	ldrb	r0, [r5, #19]
    5f3e:	b158      	cbz	r0, 5f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5f40:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f42:	7841      	ldrb	r1, [r0, #1]
    5f44:	b141      	cbz	r1, 5f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5f46:	7800      	ldrb	r0, [r0, #0]
    5f48:	7a29      	ldrb	r1, [r5, #8]
    5f4a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5f4e:	4288      	cmp	r0, r1
    5f50:	d102      	bne.n	5f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5f52:	f884 8002 	strb.w	r8, [r4, #2]
    5f56:	e064      	b.n	6022 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    5f58:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f5a:	7841      	ldrb	r1, [r0, #1]
    5f5c:	8161      	strh	r1, [r4, #10]
    5f5e:	b121      	cbz	r1, 5f6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fe>
    5f60:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5f62:	f008 faeb 	bl	e53c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5f66:	62a0      	str	r0, [r4, #40]	; 0x28
    5f68:	e000      	b.n	5f6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x200>
    5f6a:	62a7      	str	r7, [r4, #40]	; 0x28
    5f6c:	89e0      	ldrh	r0, [r4, #14]
    5f6e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5f72:	81e0      	strh	r0, [r4, #14]
    5f74:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f76:	79e9      	ldrb	r1, [r5, #7]
    5f78:	7800      	ldrb	r0, [r0, #0]
    5f7a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5f7e:	4288      	cmp	r0, r1
    5f80:	d005      	beq.n	5f8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x222>
    5f82:	f000 f963 	bl	624c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    5f86:	89e0      	ldrh	r0, [r4, #14]
    5f88:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5f8c:	81e0      	strh	r0, [r4, #14]
    5f8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f90:	7a29      	ldrb	r1, [r5, #8]
    5f92:	7800      	ldrb	r0, [r0, #0]
    5f94:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5f98:	4288      	cmp	r0, r1
    5f9a:	d10e      	bne.n	5fba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    5f9c:	4668      	mov	r0, sp
    5f9e:	f000 f917 	bl	61d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    5fa2:	e00a      	b.n	5fba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    5fa4:	e7ff      	b.n	5fa6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    5fa6:	b108      	cbz	r0, 5fac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x240>
    5fa8:	f006 f9f2 	bl	c390 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5fac:	78e0      	ldrb	r0, [r4, #3]
    5fae:	1c40      	adds	r0, r0, #1
    5fb0:	70e0      	strb	r0, [r4, #3]
    5fb2:	89e0      	ldrh	r0, [r4, #14]
    5fb4:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5fb8:	81e0      	strh	r0, [r4, #14]
    5fba:	7ca8      	ldrb	r0, [r5, #18]
    5fbc:	b1a0      	cbz	r0, 5fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    5fbe:	f7ff ff05 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5fc2:	4928      	ldr	r1, [pc, #160]	; (6064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5fc4:	f881 8018 	strb.w	r8, [r1, #24]
    5fc8:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    5fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5fd0:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5fd4:	f008 fc22 	bl	e81c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5fd8:	4603      	mov	r3, r0
    5fda:	22fb      	movs	r2, #251	; 0xfb
    5fdc:	4921      	ldr	r1, [pc, #132]	; (6064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5fde:	2000      	movs	r0, #0
    5fe0:	f006 f976 	bl	c2d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5fe4:	f006 f9aa 	bl	c33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5fe8:	4d1e      	ldr	r5, [pc, #120]	; (6064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5fea:	354a      	adds	r5, #74	; 0x4a
    5fec:	f1b9 0f00 	cmp.w	r9, #0
    5ff0:	d104      	bne.n	5ffc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x290>
    5ff2:	78e1      	ldrb	r1, [r4, #3]
    5ff4:	2001      	movs	r0, #1
    5ff6:	f7ff ff21 	bl	5e3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    5ffa:	b1b0      	cbz	r0, 602a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    5ffc:	f006 fd64 	bl	cac8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    6000:	f89d 0000 	ldrb.w	r0, [sp]
    6004:	b110      	cbz	r0, 600c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a0>
    6006:	2000      	movs	r0, #0
    6008:	f7ff fe34 	bl	5c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    600c:	b136      	cbz	r6, 601c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    600e:	70e7      	strb	r7, [r4, #3]
    6010:	7968      	ldrb	r0, [r5, #5]
    6012:	1c40      	adds	r0, r0, #1
    6014:	7168      	strb	r0, [r5, #5]
    6016:	f7ff feeb 	bl	5df0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    601a:	e002      	b.n	6022 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    601c:	79a8      	ldrb	r0, [r5, #6]
    601e:	1c40      	adds	r0, r0, #1
    6020:	71a8      	strb	r0, [r5, #6]
    6022:	f000 f87f 	bl	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    6026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    602a:	f89d 0000 	ldrb.w	r0, [sp]
    602e:	b110      	cbz	r0, 6036 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    6030:	2001      	movs	r0, #1
    6032:	f7ff fe1f 	bl	5c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6036:	2000      	movs	r0, #0
    6038:	f000 f98c 	bl	6354 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    603c:	f89d 0000 	ldrb.w	r0, [sp]
    6040:	b110      	cbz	r0, 6048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>
    6042:	2002      	movs	r0, #2
    6044:	f7ff fe16 	bl	5c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6048:	b136      	cbz	r6, 6058 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    604a:	70e7      	strb	r7, [r4, #3]
    604c:	7968      	ldrb	r0, [r5, #5]
    604e:	1c40      	adds	r0, r0, #1
    6050:	7168      	strb	r0, [r5, #5]
    6052:	f7ff fecd 	bl	5df0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    6056:	e7e6      	b.n	6026 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    6058:	79a8      	ldrb	r0, [r5, #6]
    605a:	1c40      	adds	r0, r0, #1
    605c:	71a8      	strb	r0, [r5, #6]
    605e:	e7e2      	b.n	6026 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    6060:	200000ac 	.word	0x200000ac
    6064:	20000948 	.word	0x20000948
    6068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    606c:	4688      	mov	r8, r1
    606e:	4681      	mov	r9, r0
    6070:	f7ff feb2 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6074:	4d29      	ldr	r5, [pc, #164]	; (611c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    6076:	4604      	mov	r4, r0
    6078:	7828      	ldrb	r0, [r5, #0]
    607a:	2801      	cmp	r0, #1
    607c:	d004      	beq.n	6088 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    607e:	f240 4169 	movw	r1, #1129	; 0x469
    6082:	2027      	movs	r0, #39	; 0x27
    6084:	f7fe fe48 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6088:	7860      	ldrb	r0, [r4, #1]
    608a:	2600      	movs	r6, #0
    608c:	2701      	movs	r7, #1
    608e:	b120      	cbz	r0, 609a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x32e>
    6090:	7066      	strb	r6, [r4, #1]
    6092:	2100      	movs	r1, #0
    6094:	2004      	movs	r0, #4
    6096:	f7ff fe91 	bl	5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    609a:	6a29      	ldr	r1, [r5, #32]
    609c:	7808      	ldrb	r0, [r1, #0]
    609e:	43c0      	mvns	r0, r0
    60a0:	0780      	lsls	r0, r0, #30
    60a2:	d109      	bne.n	60b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    60a4:	79a0      	ldrb	r0, [r4, #6]
    60a6:	bb88      	cbnz	r0, 610c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    60a8:	2002      	movs	r0, #2
    60aa:	f7ff fe87 	bl	5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    60ae:	6a28      	ldr	r0, [r5, #32]
    60b0:	7800      	ldrb	r0, [r0, #0]
    60b2:	43c0      	mvns	r0, r0
    60b4:	0780      	lsls	r0, r0, #30
    60b6:	d029      	beq.n	610c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    60b8:	6a28      	ldr	r0, [r5, #32]
    60ba:	7840      	ldrb	r0, [r0, #1]
    60bc:	b110      	cbz	r0, 60c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    60be:	2002      	movs	r0, #2
    60c0:	71a0      	strb	r0, [r4, #6]
    60c2:	e000      	b.n	60c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    60c4:	71a7      	strb	r7, [r4, #6]
    60c6:	7ce0      	ldrb	r0, [r4, #19]
    60c8:	b1a0      	cbz	r0, 60f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    60ca:	f7ff fe7f 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    60ce:	4914      	ldr	r1, [pc, #80]	; (6120 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    60d0:	7a6d      	ldrb	r5, [r5, #9]
    60d2:	760e      	strb	r6, [r1, #24]
    60d4:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    60d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    60dc:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    60e0:	f008 fb9c 	bl	e81c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    60e4:	4603      	mov	r3, r0
    60e6:	462a      	mov	r2, r5
    60e8:	490d      	ldr	r1, [pc, #52]	; (6120 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    60ea:	2001      	movs	r0, #1
    60ec:	f006 f8f0 	bl	c2d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    60f0:	f006 f924 	bl	c33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    60f4:	ea38 0009 	bics.w	r0, r8, r9
    60f8:	d004      	beq.n	6104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    60fa:	2100      	movs	r1, #0
    60fc:	4608      	mov	r0, r1
    60fe:	f7ff fe9d 	bl	5e3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    6102:	b128      	cbz	r0, 6110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
    6104:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6108:	f000 b80c 	b.w	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    610c:	2003      	movs	r0, #3
    610e:	e7d7      	b.n	60c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    6110:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6114:	2000      	movs	r0, #0
    6116:	f000 b8df 	b.w	62d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56c>
    611a:	0000      	.short	0x0000
    611c:	200000ac 	.word	0x200000ac
    6120:	20000948 	.word	0x20000948
    6124:	b510      	push	{r4, lr}
    6126:	f006 f9cf 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    612a:	f006 f887 	bl	c23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    612e:	4c0d      	ldr	r4, [pc, #52]	; (6164 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    6130:	89e0      	ldrh	r0, [r4, #14]
    6132:	f7ff fe57 	bl	5de4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    6136:	69e2      	ldr	r2, [r4, #28]
    6138:	7961      	ldrb	r1, [r4, #5]
    613a:	78a0      	ldrb	r0, [r4, #2]
    613c:	4790      	blx	r2
    613e:	480a      	ldr	r0, [pc, #40]	; (6168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    6140:	7c40      	ldrb	r0, [r0, #17]
    6142:	b158      	cbz	r0, 615c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    6144:	4808      	ldr	r0, [pc, #32]	; (6168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    6146:	3852      	subs	r0, #82	; 0x52
    6148:	f850 1f52 	ldr.w	r1, [r0, #82]!
    614c:	6081      	str	r1, [r0, #8]
    614e:	6841      	ldr	r1, [r0, #4]
    6150:	60c1      	str	r1, [r0, #12]
    6152:	4805      	ldr	r0, [pc, #20]	; (6168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    6154:	2101      	movs	r1, #1
    6156:	7401      	strb	r1, [r0, #16]
    6158:	f005 fa12 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    615c:	2000      	movs	r0, #0
    615e:	7020      	strb	r0, [r4, #0]
    6160:	bd10      	pop	{r4, pc}
    6162:	0000      	.short	0x0000
    6164:	200000ac 	.word	0x200000ac
    6168:	20000992 	.word	0x20000992
    616c:	4808      	ldr	r0, [pc, #32]	; (6190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    616e:	b510      	push	{r4, lr}
    6170:	7800      	ldrb	r0, [r0, #0]
    6172:	2802      	cmp	r0, #2
    6174:	d004      	beq.n	6180 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    6176:	f240 2117 	movw	r1, #535	; 0x217
    617a:	2027      	movs	r0, #39	; 0x27
    617c:	f7fe fdcc 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6180:	4904      	ldr	r1, [pc, #16]	; (6194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x428>)
    6182:	2001      	movs	r0, #1
    6184:	71c8      	strb	r0, [r1, #7]
    6186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    618a:	f7ff bfcb 	b.w	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    618e:	0000      	.short	0x0000
    6190:	200000ac 	.word	0x200000ac
    6194:	20000992 	.word	0x20000992
    6198:	b430      	push	{r4, r5}
    619a:	4b0c      	ldr	r3, [pc, #48]	; (61cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>)
    619c:	b942      	cbnz	r2, 61b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    619e:	79da      	ldrb	r2, [r3, #7]
    61a0:	2aff      	cmp	r2, #255	; 0xff
    61a2:	d105      	bne.n	61b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    61a4:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    61a8:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    61ac:	42a2      	cmp	r2, r4
    61ae:	d00b      	beq.n	61c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    61b0:	b131      	cbz	r1, 61c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>
    61b2:	79da      	ldrb	r2, [r3, #7]
    61b4:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    61b8:	bc30      	pop	{r4, r5}
    61ba:	4610      	mov	r0, r2
    61bc:	f006 bcb8 	b.w	cb30 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    61c0:	22ff      	movs	r2, #255	; 0xff
    61c2:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    61c6:	e7f7      	b.n	61b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    61c8:	bc30      	pop	{r4, r5}
    61ca:	4770      	bx	lr
    61cc:	200000ac 	.word	0x200000ac
    61d0:	b570      	push	{r4, r5, r6, lr}
    61d2:	4606      	mov	r6, r0
    61d4:	f7ff fe00 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    61d8:	4a1b      	ldr	r2, [pc, #108]	; (6248 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>)
    61da:	4604      	mov	r4, r0
    61dc:	2501      	movs	r5, #1
    61de:	6a51      	ldr	r1, [r2, #36]	; 0x24
    61e0:	7808      	ldrb	r0, [r1, #0]
    61e2:	f000 0003 	and.w	r0, r0, #3
    61e6:	2801      	cmp	r0, #1
    61e8:	d00c      	beq.n	6204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    61ea:	2802      	cmp	r0, #2
    61ec:	d00a      	beq.n	6204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    61ee:	2803      	cmp	r0, #3
    61f0:	d121      	bne.n	6236 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    61f2:	7065      	strb	r5, [r4, #1]
    61f4:	89d0      	ldrh	r0, [r2, #14]
    61f6:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    61fa:	81d0      	strh	r0, [r2, #14]
    61fc:	2001      	movs	r0, #1
    61fe:	f7ff fddd 	bl	5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    6202:	e018      	b.n	6236 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    6204:	7848      	ldrb	r0, [r1, #1]
    6206:	b1b0      	cbz	r0, 6236 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    6208:	89d1      	ldrh	r1, [r2, #14]
    620a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    620e:	81d1      	strh	r1, [r2, #14]
    6210:	6a91      	ldr	r1, [r2, #40]	; 0x28
    6212:	2900      	cmp	r1, #0
    6214:	d009      	beq.n	622a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    6216:	28fb      	cmp	r0, #251	; 0xfb
    6218:	d808      	bhi.n	622c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>
    621a:	7990      	ldrb	r0, [r2, #6]
    621c:	b120      	cbz	r0, 6228 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>
    621e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6222:	2020      	movs	r0, #32
    6224:	f7ff bdde 	b.w	5de4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    6228:	7035      	strb	r5, [r6, #0]
    622a:	bd70      	pop	{r4, r5, r6, pc}
    622c:	7950      	ldrb	r0, [r2, #5]
    622e:	f040 0010 	orr.w	r0, r0, #16
    6232:	7150      	strb	r0, [r2, #5]
    6234:	bd70      	pop	{r4, r5, r6, pc}
    6236:	7a20      	ldrb	r0, [r4, #8]
    6238:	2801      	cmp	r0, #1
    623a:	d001      	beq.n	6240 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
    623c:	7225      	strb	r5, [r4, #8]
    623e:	bd70      	pop	{r4, r5, r6, pc}
    6240:	2000      	movs	r0, #0
    6242:	7220      	strb	r0, [r4, #8]
    6244:	bd70      	pop	{r4, r5, r6, pc}
    6246:	0000      	.short	0x0000
    6248:	200000ac 	.word	0x200000ac
    624c:	b570      	push	{r4, r5, r6, lr}
    624e:	f7ff fdc3 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6252:	4604      	mov	r4, r0
    6254:	7980      	ldrb	r0, [r0, #6]
    6256:	2800      	cmp	r0, #0
    6258:	d027      	beq.n	62aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53e>
    625a:	2802      	cmp	r0, #2
    625c:	d10d      	bne.n	627a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50e>
    625e:	4818      	ldr	r0, [pc, #96]	; (62c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x554>)
    6260:	6b00      	ldr	r0, [r0, #48]	; 0x30
    6262:	f007 ff3d 	bl	e0e0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    6266:	b308      	cbz	r0, 62ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    6268:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    626c:	1c40      	adds	r0, r0, #1
    626e:	f141 0100 	adc.w	r1, r1, #0
    6272:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    6276:	f005 f983 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    627a:	2500      	movs	r5, #0
    627c:	71a5      	strb	r5, [r4, #6]
    627e:	78a0      	ldrb	r0, [r4, #2]
    6280:	2601      	movs	r6, #1
    6282:	b170      	cbz	r0, 62a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6284:	70a5      	strb	r5, [r4, #2]
    6286:	f7ff fb17 	bl	58b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    628a:	b190      	cbz	r0, 62b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x546>
    628c:	2100      	movs	r1, #0
    628e:	2008      	movs	r0, #8
    6290:	f7ff fd94 	bl	5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    6294:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    6298:	1c40      	adds	r0, r0, #1
    629a:	f141 0100 	adc.w	r1, r1, #0
    629e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    62a2:	79e0      	ldrb	r0, [r4, #7]
    62a4:	2801      	cmp	r0, #1
    62a6:	d009      	beq.n	62bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x550>
    62a8:	71e6      	strb	r6, [r4, #7]
    62aa:	bd70      	pop	{r4, r5, r6, pc}
    62ac:	f240 31af 	movw	r1, #943	; 0x3af
    62b0:	e001      	b.n	62b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    62b2:	f240 31c7 	movw	r1, #967	; 0x3c7
    62b6:	2027      	movs	r0, #39	; 0x27
    62b8:	f7fe fd2e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62bc:	71e5      	strb	r5, [r4, #7]
    62be:	bd70      	pop	{r4, r5, r6, pc}
    62c0:	200000ac 	.word	0x200000ac
    62c4:	4803      	ldr	r0, [pc, #12]	; (62d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>)
    62c6:	7800      	ldrb	r0, [r0, #0]
    62c8:	2800      	cmp	r0, #0
    62ca:	d001      	beq.n	62d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    62cc:	f7ff bf2a 	b.w	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    62d0:	4770      	bx	lr
    62d2:	0000      	.short	0x0000
    62d4:	200000ac 	.word	0x200000ac
    62d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62dc:	4607      	mov	r7, r0
    62de:	f7ff fd75 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    62e2:	4680      	mov	r8, r0
    62e4:	f7ff fd78 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    62e8:	4c17      	ldr	r4, [pc, #92]	; (6348 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>)
    62ea:	4605      	mov	r5, r0
    62ec:	463a      	mov	r2, r7
    62ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    62f0:	6260      	str	r0, [r4, #36]	; 0x24
    62f2:	2101      	movs	r1, #1
    62f4:	4640      	mov	r0, r8
    62f6:	f7ff ff4f 	bl	6198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    62fa:	7ce8      	ldrb	r0, [r5, #19]
    62fc:	2600      	movs	r6, #0
    62fe:	b178      	cbz	r0, 6320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    6300:	4812      	ldr	r0, [pc, #72]	; (634c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    6302:	f006 fb39 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6306:	4812      	ldr	r0, [pc, #72]	; (6350 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    6308:	7606      	strb	r6, [r0, #24]
    630a:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    630e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6312:	490e      	ldr	r1, [pc, #56]	; (634c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    6314:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6316:	f005 ff63 	bl	c1e0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    631a:	f005 ff75 	bl	c208 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    631e:	e004      	b.n	632a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    6320:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6322:	f006 fb29 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6326:	f005 ff89 	bl	c23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    632a:	b917      	cbnz	r7, 6332 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c6>
    632c:	4630      	mov	r0, r6
    632e:	f006 f9db 	bl	c6e8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6332:	2100      	movs	r1, #0
    6334:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    6338:	4608      	mov	r0, r1
    633a:	f006 fba7 	bl	ca8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    633e:	2002      	movs	r0, #2
    6340:	7020      	strb	r0, [r4, #0]
    6342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6346:	0000      	.short	0x0000
    6348:	200000ac 	.word	0x200000ac
    634c:	20000840 	.word	0x20000840
    6350:	20000948 	.word	0x20000948
    6354:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6358:	4604      	mov	r4, r0
    635a:	f7ff fd3d 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    635e:	4605      	mov	r5, r0
    6360:	f7ff fd34 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6364:	4606      	mov	r6, r0
    6366:	f8df 9164 	ldr.w	r9, [pc, #356]	; 64cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    636a:	4622      	mov	r2, r4
    636c:	2100      	movs	r1, #0
    636e:	f7ff ff13 	bl	6198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    6372:	79a8      	ldrb	r0, [r5, #6]
    6374:	f04f 0800 	mov.w	r8, #0
    6378:	2701      	movs	r7, #1
    637a:	f1a9 0420 	sub.w	r4, r9, #32
    637e:	b140      	cbz	r0, 6392 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x626>
    6380:	2801      	cmp	r0, #1
    6382:	d01f      	beq.n	63c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    6384:	2802      	cmp	r0, #2
    6386:	d030      	beq.n	63ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67e>
    6388:	2803      	cmp	r0, #3
    638a:	d03c      	beq.n	6406 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    638c:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    6390:	e058      	b.n	6444 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    6392:	7a20      	ldrb	r0, [r4, #8]
    6394:	2150      	movs	r1, #80	; 0x50
    6396:	f8ad 0004 	strh.w	r0, [sp, #4]
    639a:	5388      	strh	r0, [r1, r6]
    639c:	4648      	mov	r0, r9
    639e:	f7ff fab5 	bl	590c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    63a2:	b128      	cbz	r0, 63b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    63a4:	2080      	movs	r0, #128	; 0x80
    63a6:	6a21      	ldr	r1, [r4, #32]
    63a8:	f7ff fd08 	bl	5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    63ac:	70af      	strb	r7, [r5, #2]
    63ae:	e02e      	b.n	640e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    63b0:	466a      	mov	r2, sp
    63b2:	a901      	add	r1, sp, #4
    63b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    63b6:	f008 fa49 	bl	e84c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    63ba:	6220      	str	r0, [r4, #32]
    63bc:	b110      	cbz	r0, 63c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    63be:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
    63c2:	b111      	cbz	r1, 63ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    63c4:	4842      	ldr	r0, [pc, #264]	; (64d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    63c6:	6220      	str	r0, [r4, #32]
    63c8:	e021      	b.n	640e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    63ca:	f89d 1000 	ldrb.w	r1, [sp]
    63ce:	b931      	cbnz	r1, 63de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x672>
    63d0:	f8a0 8000 	strh.w	r8, [r0]
    63d4:	f880 8002 	strb.w	r8, [r0, #2]
    63d8:	2101      	movs	r1, #1
    63da:	f008 fd6f 	bl	eebc <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    63de:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    63e2:	6a20      	ldr	r0, [r4, #32]
    63e4:	f008 fd24 	bl	ee30 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    63e8:	e011      	b.n	640e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    63ea:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    63ee:	f8ad 0004 	strh.w	r0, [sp, #4]
    63f2:	466a      	mov	r2, sp
    63f4:	a901      	add	r1, sp, #4
    63f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    63f8:	f008 fa28 	bl	e84c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    63fc:	6220      	str	r0, [r4, #32]
    63fe:	b930      	cbnz	r0, 640e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    6400:	f240 21a5 	movw	r1, #677	; 0x2a5
    6404:	e01e      	b.n	6444 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    6406:	4648      	mov	r0, r9
    6408:	f7ff fa80 	bl	590c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    640c:	b1c0      	cbz	r0, 6440 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    640e:	6a20      	ldr	r0, [r4, #32]
    6410:	2308      	movs	r3, #8
    6412:	7801      	ldrb	r1, [r0, #0]
    6414:	f021 0108 	bic.w	r1, r1, #8
    6418:	7001      	strb	r1, [r0, #0]
    641a:	79ea      	ldrb	r2, [r5, #7]
    641c:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    6420:	4311      	orrs	r1, r2
    6422:	f021 0104 	bic.w	r1, r1, #4
    6426:	7001      	strb	r1, [r0, #0]
    6428:	7a2a      	ldrb	r2, [r5, #8]
    642a:	2304      	movs	r3, #4
    642c:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    6430:	4311      	orrs	r1, r2
    6432:	f021 0110 	bic.w	r1, r1, #16
    6436:	7001      	strb	r1, [r0, #0]
    6438:	43c9      	mvns	r1, r1
    643a:	0789      	lsls	r1, r1, #30
    643c:	d005      	beq.n	644a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6de>
    643e:	e007      	b.n	6450 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    6440:	f240 21ae 	movw	r1, #686	; 0x2ae
    6444:	2027      	movs	r0, #39	; 0x27
    6446:	f7fe fc67 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    644a:	78c0      	ldrb	r0, [r0, #3]
    644c:	2802      	cmp	r0, #2
    644e:	d00f      	beq.n	6470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    6450:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6452:	f007 ff96 	bl	e382 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    6456:	b108      	cbz	r0, 645c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    6458:	2101      	movs	r1, #1
    645a:	e00a      	b.n	6472 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    645c:	6a20      	ldr	r0, [r4, #32]
    645e:	7800      	ldrb	r0, [r0, #0]
    6460:	43c0      	mvns	r0, r0
    6462:	0780      	lsls	r0, r0, #30
    6464:	d004      	beq.n	6470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    6466:	f7ff fa0f 	bl	5888 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    646a:	f080 0101 	eor.w	r1, r0, #1
    646e:	e000      	b.n	6472 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    6470:	2100      	movs	r1, #0
    6472:	6a20      	ldr	r0, [r4, #32]
    6474:	7802      	ldrb	r2, [r0, #0]
    6476:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    647a:	7001      	strb	r1, [r0, #0]
    647c:	7ca9      	ldrb	r1, [r5, #18]
    647e:	b191      	cbz	r1, 64a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    6480:	7841      	ldrb	r1, [r0, #1]
    6482:	b181      	cbz	r1, 64a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    6484:	4813      	ldr	r0, [pc, #76]	; (64d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    6486:	f006 fa77 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    648a:	4811      	ldr	r0, [pc, #68]	; (64d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    648c:	3828      	subs	r0, #40	; 0x28
    648e:	7607      	strb	r7, [r0, #24]
    6490:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    6494:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6498:	480e      	ldr	r0, [pc, #56]	; (64d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    649a:	6a21      	ldr	r1, [r4, #32]
    649c:	f005 fea0 	bl	c1e0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    64a0:	f005 feea 	bl	c278 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    64a4:	e003      	b.n	64ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    64a6:	f006 fa67 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    64aa:	f005 fec7 	bl	c23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    64ae:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    64b2:	2101      	movs	r1, #1
    64b4:	2000      	movs	r0, #0
    64b6:	f006 fae9 	bl	ca8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    64ba:	7127      	strb	r7, [r4, #4]
    64bc:	6a20      	ldr	r0, [r4, #32]
    64be:	8801      	ldrh	r1, [r0, #0]
    64c0:	8221      	strh	r1, [r4, #16]
    64c2:	7880      	ldrb	r0, [r0, #2]
    64c4:	74a0      	strb	r0, [r4, #18]
    64c6:	7027      	strb	r7, [r4, #0]
    64c8:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    64cc:	200000cc 	.word	0x200000cc
    64d0:	20000970 	.word	0x20000970
    64d4:	20000840 	.word	0x20000840
    64d8:	0000616d 	.word	0x0000616d
    64dc:	00005ef1 	.word	0x00005ef1
    64e0:	00006069 	.word	0x00006069
    64e4:	000062c5 	.word	0x000062c5

000064e8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    64e8:	4800      	ldr	r0, [pc, #0]	; (64ec <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    64ea:	4770      	bx	lr
    64ec:	2000132d 	.word	0x2000132d

000064f0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    64f0:	b570      	push	{r4, r5, r6, lr}
    64f2:	2600      	movs	r6, #0
    64f4:	4635      	mov	r5, r6
    64f6:	4c0f      	ldr	r4, [pc, #60]	; (6534 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    64f8:	e018      	b.n	652c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    64fa:	1960      	adds	r0, r4, r5
    64fc:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    6500:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6504:	2a01      	cmp	r2, #1
    6506:	d002      	beq.n	650e <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    6508:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    650c:	b160      	cbz	r0, 6528 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    650e:	480a      	ldr	r0, [pc, #40]	; (6538 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    6510:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    6514:	1c73      	adds	r3, r6, #1
    6516:	5585      	strb	r5, [r0, r6]
    6518:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    651c:	4630      	mov	r0, r6
    651e:	b2de      	uxtb	r6, r3
    6520:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    6524:	f006 fbd2 	bl	cccc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6528:	1c6d      	adds	r5, r5, #1
    652a:	b2ed      	uxtb	r5, r5
    652c:	78a0      	ldrb	r0, [r4, #2]
    652e:	42a8      	cmp	r0, r5
    6530:	d8e3      	bhi.n	64fa <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    6532:	bd70      	pop	{r4, r5, r6, pc}
    6534:	2000115a 	.word	0x2000115a
    6538:	20000274 	.word	0x20000274

0000653c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    653c:	4904      	ldr	r1, [pc, #16]	; (6550 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    653e:	788a      	ldrb	r2, [r1, #2]
    6540:	4282      	cmp	r2, r0
    6542:	d903      	bls.n	654c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    6544:	4408      	add	r0, r1
    6546:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    654a:	4770      	bx	lr
    654c:	2000      	movs	r0, #0
    654e:	4770      	bx	lr
    6550:	2000115a 	.word	0x2000115a

00006554 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6554:	4904      	ldr	r1, [pc, #16]	; (6568 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    6556:	788a      	ldrb	r2, [r1, #2]
    6558:	4282      	cmp	r2, r0
    655a:	d903      	bls.n	6564 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    655c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6560:	3083      	adds	r0, #131	; 0x83
    6562:	4770      	bx	lr
    6564:	2000      	movs	r0, #0
    6566:	4770      	bx	lr
    6568:	2000115a 	.word	0x2000115a

0000656c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    656c:	4a05      	ldr	r2, [pc, #20]	; (6584 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    656e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6572:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6576:	6802      	ldr	r2, [r0, #0]
    6578:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    657c:	8880      	ldrh	r0, [r0, #4]
    657e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    6582:	4770      	bx	lr
    6584:	2000115a 	.word	0x2000115a

00006588 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    6588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    658c:	4607      	mov	r7, r0
    658e:	2400      	movs	r4, #0
    6590:	4d10      	ldr	r5, [pc, #64]	; (65d4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    6592:	e019      	b.n	65c8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    6594:	4620      	mov	r0, r4
    6596:	f7ff ffdd 	bl	6554 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    659a:	0003      	movs	r3, r0
    659c:	d012      	beq.n	65c4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    659e:	1928      	adds	r0, r5, r4
    65a0:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    65a4:	b970      	cbnz	r0, 65c4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    65a6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    65aa:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    65ae:	f206 160b 	addw	r6, r6, #267	; 0x10b
    65b2:	463a      	mov	r2, r7
    65b4:	4631      	mov	r1, r6
    65b6:	4618      	mov	r0, r3
    65b8:	f008 f8cb 	bl	e752 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    65bc:	4630      	mov	r0, r6
    65be:	4621      	mov	r1, r4
    65c0:	f7ff ffd4 	bl	656c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    65c4:	1c64      	adds	r4, r4, #1
    65c6:	b2e4      	uxtb	r4, r4
    65c8:	78a8      	ldrb	r0, [r5, #2]
    65ca:	42a0      	cmp	r0, r4
    65cc:	d8e2      	bhi.n	6594 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    65ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65d2:	0000      	.short	0x0000
    65d4:	2000115a 	.word	0x2000115a

000065d8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    65d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65dc:	460e      	mov	r6, r1
    65de:	4607      	mov	r7, r0
    65e0:	4615      	mov	r5, r2
    65e2:	2106      	movs	r1, #6
    65e4:	4630      	mov	r0, r6
    65e6:	f008 fb6c 	bl	ecc2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    65ea:	4c0d      	ldr	r4, [pc, #52]	; (6620 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    65ec:	b160      	cbz	r0, 6608 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    65ee:	2000      	movs	r0, #0
    65f0:	e004      	b.n	65fc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    65f2:	1821      	adds	r1, r4, r0
    65f4:	1c40      	adds	r0, r0, #1
    65f6:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    65fa:	b2c0      	uxtb	r0, r0
    65fc:	78a1      	ldrb	r1, [r4, #2]
    65fe:	4281      	cmp	r1, r0
    6600:	d8f7      	bhi.n	65f2 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    6602:	2001      	movs	r0, #1
    6604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6608:	4631      	mov	r1, r6
    660a:	4638      	mov	r0, r7
    660c:	f008 f92d 	bl	e86a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6610:	2808      	cmp	r0, #8
    6612:	d003      	beq.n	661c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    6614:	4420      	add	r0, r4
    6616:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    661a:	e7f2      	b.n	6602 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    661c:	2000      	movs	r0, #0
    661e:	e7f1      	b.n	6604 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    6620:	2000115a 	.word	0x2000115a

00006624 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6624:	4904      	ldr	r1, [pc, #16]	; (6638 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    6626:	788a      	ldrb	r2, [r1, #2]
    6628:	4282      	cmp	r2, r0
    662a:	d903      	bls.n	6634 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    662c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6630:	1cc0      	adds	r0, r0, #3
    6632:	4770      	bx	lr
    6634:	2000      	movs	r0, #0
    6636:	4770      	bx	lr
    6638:	2000115a 	.word	0x2000115a

0000663c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    663c:	4908      	ldr	r1, [pc, #32]	; (6660 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    663e:	788a      	ldrb	r2, [r1, #2]
    6640:	4282      	cmp	r2, r0
    6642:	d903      	bls.n	664c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    6644:	180a      	adds	r2, r1, r0
    6646:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    664a:	b10a      	cbz	r2, 6650 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    664c:	2000      	movs	r0, #0
    664e:	4770      	bx	lr
    6650:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6654:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6658:	f200 100b 	addw	r0, r0, #267	; 0x10b
    665c:	4770      	bx	lr
    665e:	0000      	.short	0x0000
    6660:	2000115a 	.word	0x2000115a

00006664 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6664:	b510      	push	{r4, lr}
    6666:	f240 12d3 	movw	r2, #467	; 0x1d3
    666a:	2100      	movs	r1, #0
    666c:	4808      	ldr	r0, [pc, #32]	; (6690 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    666e:	f006 ffd5 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6672:	2208      	movs	r2, #8
    6674:	21ff      	movs	r1, #255	; 0xff
    6676:	4807      	ldr	r0, [pc, #28]	; (6694 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6678:	f006 ffd0 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    667c:	4805      	ldr	r0, [pc, #20]	; (6694 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    667e:	2100      	movs	r1, #0
    6680:	1f00      	subs	r0, r0, #4
    6682:	7001      	strb	r1, [r0, #0]
    6684:	7041      	strb	r1, [r0, #1]
    6686:	f44f 7161 	mov.w	r1, #900	; 0x384
    668a:	8041      	strh	r1, [r0, #2]
    668c:	bd10      	pop	{r4, pc}
    668e:	0000      	.short	0x0000
    6690:	2000115a 	.word	0x2000115a
    6694:	20000274 	.word	0x20000274

00006698 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    6698:	4901      	ldr	r1, [pc, #4]	; (66a0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    669a:	7008      	strb	r0, [r1, #0]
    669c:	4770      	bx	lr
    669e:	0000      	.short	0x0000
    66a0:	20000270 	.word	0x20000270

000066a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    66a4:	4801      	ldr	r0, [pc, #4]	; (66ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    66a6:	7800      	ldrb	r0, [r0, #0]
    66a8:	4770      	bx	lr
    66aa:	0000      	.short	0x0000
    66ac:	20000270 	.word	0x20000270

000066b0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    66b0:	4b0b      	ldr	r3, [pc, #44]	; (66e0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    66b2:	b510      	push	{r4, lr}
    66b4:	789c      	ldrb	r4, [r3, #2]
    66b6:	4284      	cmp	r4, r0
    66b8:	d90f      	bls.n	66da <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    66ba:	4418      	add	r0, r3
    66bc:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    66c0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    66c4:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    66c8:	700b      	strb	r3, [r1, #0]
    66ca:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    66ce:	6011      	str	r1, [r2, #0]
    66d0:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    66d4:	8090      	strh	r0, [r2, #4]
    66d6:	2001      	movs	r0, #1
    66d8:	bd10      	pop	{r4, pc}
    66da:	2000      	movs	r0, #0
    66dc:	bd10      	pop	{r4, pc}
    66de:	0000      	.short	0x0000
    66e0:	2000115a 	.word	0x2000115a

000066e4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    66e4:	4907      	ldr	r1, [pc, #28]	; (6704 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    66e6:	788a      	ldrb	r2, [r1, #2]
    66e8:	4282      	cmp	r2, r0
    66ea:	d909      	bls.n	6700 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    66ec:	4408      	add	r0, r1
    66ee:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    66f2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    66f6:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    66fa:	f000 0001 	and.w	r0, r0, #1
    66fe:	4770      	bx	lr
    6700:	2000      	movs	r0, #0
    6702:	4770      	bx	lr
    6704:	2000115a 	.word	0x2000115a

00006708 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    6708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    670c:	4698      	mov	r8, r3
    670e:	4691      	mov	r9, r2
    6710:	460c      	mov	r4, r1
    6712:	4605      	mov	r5, r0
    6714:	f000 f962 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6718:	4606      	mov	r6, r0
    671a:	2810      	cmp	r0, #16
    671c:	d006      	beq.n	672c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    671e:	f000 f92d 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6722:	2810      	cmp	r0, #16
    6724:	d002      	beq.n	672c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    6726:	2012      	movs	r0, #18
    6728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    672c:	4f18      	ldr	r7, [pc, #96]	; (6790 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    672e:	78b8      	ldrb	r0, [r7, #2]
    6730:	2808      	cmp	r0, #8
    6732:	d22a      	bcs.n	678a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    6734:	2e10      	cmp	r6, #16
    6736:	d105      	bne.n	6744 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    6738:	2200      	movs	r2, #0
    673a:	4621      	mov	r1, r4
    673c:	4628      	mov	r0, r5
    673e:	f000 f931 	bl	69a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6742:	4606      	mov	r6, r0
    6744:	78bc      	ldrb	r4, [r7, #2]
    6746:	2210      	movs	r2, #16
    6748:	1c60      	adds	r0, r4, #1
    674a:	70b8      	strb	r0, [r7, #2]
    674c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    6750:	1ce8      	adds	r0, r5, #3
    6752:	4649      	mov	r1, r9
    6754:	f008 fa58 	bl	ec08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6758:	f105 0083 	add.w	r0, r5, #131	; 0x83
    675c:	2210      	movs	r2, #16
    675e:	4641      	mov	r1, r8
    6760:	f008 fa52 	bl	ec08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6764:	2110      	movs	r1, #16
    6766:	4640      	mov	r0, r8
    6768:	f008 faab 	bl	ecc2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    676c:	443c      	add	r4, r7
    676e:	2110      	movs	r1, #16
    6770:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    6774:	4648      	mov	r0, r9
    6776:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    677a:	f008 faa2 	bl	ecc2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    677e:	77e0      	strb	r0, [r4, #31]
    6780:	f804 6c29 	strb.w	r6, [r4, #-41]
    6784:	2000      	movs	r0, #0
    6786:	73e0      	strb	r0, [r4, #15]
    6788:	e7ce      	b.n	6728 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    678a:	2007      	movs	r0, #7
    678c:	e7cc      	b.n	6728 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    678e:	0000      	.short	0x0000
    6790:	2000115a 	.word	0x2000115a

00006794 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    6794:	4806      	ldr	r0, [pc, #24]	; (67b0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    6796:	b510      	push	{r4, lr}
    6798:	7880      	ldrb	r0, [r0, #2]
    679a:	1e40      	subs	r0, r0, #1
    679c:	b244      	sxtb	r4, r0
    679e:	e004      	b.n	67aa <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    67a0:	b2e0      	uxtb	r0, r4
    67a2:	f000 f963 	bl	6a6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    67a6:	1e64      	subs	r4, r4, #1
    67a8:	b264      	sxtb	r4, r4
    67aa:	2c00      	cmp	r4, #0
    67ac:	daf8      	bge.n	67a0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    67ae:	bd10      	pop	{r4, pc}
    67b0:	2000115a 	.word	0x2000115a

000067b4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    67b4:	4801      	ldr	r0, [pc, #4]	; (67bc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    67b6:	8840      	ldrh	r0, [r0, #2]
    67b8:	4770      	bx	lr
    67ba:	0000      	.short	0x0000
    67bc:	20000270 	.word	0x20000270

000067c0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    67c0:	b138      	cbz	r0, 67d2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    67c2:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    67c6:	4288      	cmp	r0, r1
    67c8:	d803      	bhi.n	67d2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    67ca:	4903      	ldr	r1, [pc, #12]	; (67d8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    67cc:	8048      	strh	r0, [r1, #2]
    67ce:	2001      	movs	r0, #1
    67d0:	4770      	bx	lr
    67d2:	2000      	movs	r0, #0
    67d4:	4770      	bx	lr
    67d6:	0000      	.short	0x0000
    67d8:	20000270 	.word	0x20000270

000067dc <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY>:
    67dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67e0:	2501      	movs	r5, #1
    67e2:	461f      	mov	r7, r3
    67e4:	4691      	mov	r9, r2
    67e6:	462c      	mov	r4, r5
    67e8:	2600      	movs	r6, #0
    67ea:	f000 f8f7 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    67ee:	2810      	cmp	r0, #16
    67f0:	d023      	beq.n	683a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    67f2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 684c <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x70>
    67f6:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    67fa:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    67fe:	f001 0601 	and.w	r6, r1, #1
    6802:	f000 f8bb 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6806:	4603      	mov	r3, r0
    6808:	2810      	cmp	r0, #16
    680a:	d016      	beq.n	683a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    680c:	b107      	cbz	r7, 6810 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x34>
    680e:	703b      	strb	r3, [r7, #0]
    6810:	4618      	mov	r0, r3
    6812:	f7ff ff07 	bl	6624 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6816:	b180      	cbz	r0, 683a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    6818:	f898 1002 	ldrb.w	r1, [r8, #2]
    681c:	4640      	mov	r0, r8
    681e:	4299      	cmp	r1, r3
    6820:	d903      	bls.n	682a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x4e>
    6822:	18c1      	adds	r1, r0, r3
    6824:	f891 414b 	ldrb.w	r4, [r1, #331]	; 0x14b
    6828:	e000      	b.n	682c <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x50>
    682a:	2400      	movs	r4, #0
    682c:	eb08 0003 	add.w	r0, r8, r3
    6830:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6834:	2801      	cmp	r0, #1
    6836:	d006      	beq.n	6846 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x6a>
    6838:	2500      	movs	r5, #0
    683a:	ea49 0006 	orr.w	r0, r9, r6
    683e:	4325      	orrs	r5, r4
    6840:	4028      	ands	r0, r5
    6842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6846:	2501      	movs	r5, #1
    6848:	e7f7      	b.n	683a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    684a:	0000      	.short	0x0000
    684c:	2000115a 	.word	0x2000115a

00006850 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6850:	b570      	push	{r4, r5, r6, lr}
    6852:	460d      	mov	r5, r1
    6854:	4606      	mov	r6, r0
    6856:	f000 f8c1 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    685a:	4c10      	ldr	r4, [pc, #64]	; (689c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    685c:	2810      	cmp	r0, #16
    685e:	d007      	beq.n	6870 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6860:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    6864:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6868:	07c9      	lsls	r1, r1, #31
    686a:	d001      	beq.n	6870 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    686c:	2001      	movs	r0, #1
    686e:	bd70      	pop	{r4, r5, r6, pc}
    6870:	7861      	ldrb	r1, [r4, #1]
    6872:	2908      	cmp	r1, #8
    6874:	d210      	bcs.n	6898 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    6876:	2810      	cmp	r0, #16
    6878:	d008      	beq.n	688c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    687a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    687e:	2101      	movs	r1, #1
    6880:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6884:	7860      	ldrb	r0, [r4, #1]
    6886:	1c40      	adds	r0, r0, #1
    6888:	7060      	strb	r0, [r4, #1]
    688a:	e7ef      	b.n	686c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    688c:	2201      	movs	r2, #1
    688e:	4629      	mov	r1, r5
    6890:	4630      	mov	r0, r6
    6892:	f000 f887 	bl	69a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6896:	e7f5      	b.n	6884 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6898:	2000      	movs	r0, #0
    689a:	bd70      	pop	{r4, r5, r6, pc}
    689c:	2000115a 	.word	0x2000115a

000068a0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    68a0:	b570      	push	{r4, r5, r6, lr}
    68a2:	4d0b      	ldr	r5, [pc, #44]	; (68d0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    68a4:	7828      	ldrb	r0, [r5, #0]
    68a6:	1e40      	subs	r0, r0, #1
    68a8:	b244      	sxtb	r4, r0
    68aa:	e00a      	b.n	68c2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    68ac:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    68b0:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    68b4:	07c0      	lsls	r0, r0, #31
    68b6:	d002      	beq.n	68be <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    68b8:	b2e0      	uxtb	r0, r4
    68ba:	f000 f91f 	bl	6afc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    68be:	1e64      	subs	r4, r4, #1
    68c0:	b264      	sxtb	r4, r4
    68c2:	2c00      	cmp	r4, #0
    68c4:	daf2      	bge.n	68ac <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    68c6:	4903      	ldr	r1, [pc, #12]	; (68d4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    68c8:	2000      	movs	r0, #0
    68ca:	7048      	strb	r0, [r1, #1]
    68cc:	bd70      	pop	{r4, r5, r6, pc}
    68ce:	0000      	.short	0x0000
    68d0:	2000115a 	.word	0x2000115a
    68d4:	20000270 	.word	0x20000270

000068d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    68d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68dc:	2400      	movs	r4, #0
    68de:	4625      	mov	r5, r4
    68e0:	4e18      	ldr	r6, [pc, #96]	; (6944 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    68e2:	e029      	b.n	6938 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    68e4:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    68e8:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    68ec:	07c0      	lsls	r0, r0, #31
    68ee:	d021      	beq.n	6934 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    68f0:	4628      	mov	r0, r5
    68f2:	f000 f843 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    68f6:	4603      	mov	r3, r0
    68f8:	f7ff fe94 	bl	6624 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    68fc:	4601      	mov	r1, r0
    68fe:	2000      	movs	r0, #0
    6900:	2b10      	cmp	r3, #16
    6902:	d009      	beq.n	6918 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6904:	18f2      	adds	r2, r6, r3
    6906:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    690a:	f1bc 0f01 	cmp.w	ip, #1
    690e:	d002      	beq.n	6916 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    6910:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    6914:	b102      	cbz	r2, 6918 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6916:	2001      	movs	r0, #1
    6918:	1e40      	subs	r0, r0, #1
    691a:	4201      	tst	r1, r0
    691c:	d10a      	bne.n	6934 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    691e:	480a      	ldr	r0, [pc, #40]	; (6948 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    6920:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    6924:	5503      	strb	r3, [r0, r4]
    6926:	4620      	mov	r0, r4
    6928:	1c64      	adds	r4, r4, #1
    692a:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    692e:	b2e4      	uxtb	r4, r4
    6930:	f006 f9cc 	bl	cccc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6934:	1c6d      	adds	r5, r5, #1
    6936:	b2ed      	uxtb	r5, r5
    6938:	7830      	ldrb	r0, [r6, #0]
    693a:	42a8      	cmp	r0, r5
    693c:	d8d2      	bhi.n	68e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    693e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6942:	0000      	.short	0x0000
    6944:	2000115a 	.word	0x2000115a
    6948:	20000274 	.word	0x20000274
    694c:	4602      	mov	r2, r0
    694e:	4809      	ldr	r0, [pc, #36]	; (6974 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    6950:	b510      	push	{r4, lr}
    6952:	7800      	ldrb	r0, [r0, #0]
    6954:	460b      	mov	r3, r1
    6956:	b158      	cbz	r0, 6970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6958:	4807      	ldr	r0, [pc, #28]	; (6978 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    695a:	7881      	ldrb	r1, [r0, #2]
    695c:	b141      	cbz	r1, 6970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    695e:	b10b      	cbz	r3, 6964 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6960:	1cc0      	adds	r0, r0, #3
    6962:	e001      	b.n	6968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    6964:	4804      	ldr	r0, [pc, #16]	; (6978 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6966:	3083      	adds	r0, #131	; 0x83
    6968:	f005 fb5c 	bl	c024 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    696c:	2001      	movs	r0, #1
    696e:	bd10      	pop	{r4, pc}
    6970:	2000      	movs	r0, #0
    6972:	bd10      	pop	{r4, pc}
    6974:	20000270 	.word	0x20000270
    6978:	2000115a 	.word	0x2000115a
    697c:	4908      	ldr	r1, [pc, #32]	; (69a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    697e:	b510      	push	{r4, lr}
    6980:	4603      	mov	r3, r0
    6982:	2000      	movs	r0, #0
    6984:	788a      	ldrb	r2, [r1, #2]
    6986:	e006      	b.n	6996 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    6988:	180c      	adds	r4, r1, r0
    698a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    698e:	429c      	cmp	r4, r3
    6990:	d004      	beq.n	699c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    6992:	1c40      	adds	r0, r0, #1
    6994:	b2c0      	uxtb	r0, r0
    6996:	4282      	cmp	r2, r0
    6998:	d8f6      	bhi.n	6988 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    699a:	2010      	movs	r0, #16
    699c:	bd10      	pop	{r4, pc}
    699e:	0000      	.short	0x0000
    69a0:	2000115a 	.word	0x2000115a
    69a4:	b570      	push	{r4, r5, r6, lr}
    69a6:	4b0c      	ldr	r3, [pc, #48]	; (69d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    69a8:	4604      	mov	r4, r0
    69aa:	7818      	ldrb	r0, [r3, #0]
    69ac:	1c45      	adds	r5, r0, #1
    69ae:	701d      	strb	r5, [r3, #0]
    69b0:	2810      	cmp	r0, #16
    69b2:	d303      	bcc.n	69bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    69b4:	2146      	movs	r1, #70	; 0x46
    69b6:	2028      	movs	r0, #40	; 0x28
    69b8:	f7fe f9ae 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69bc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    69c0:	680d      	ldr	r5, [r1, #0]
    69c2:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    69c6:	8889      	ldrh	r1, [r1, #4]
    69c8:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    69cc:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    69d0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    69d4:	bd70      	pop	{r4, r5, r6, pc}
    69d6:	0000      	.short	0x0000
    69d8:	2000115a 	.word	0x2000115a
    69dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69e0:	460f      	mov	r7, r1
    69e2:	4606      	mov	r6, r0
    69e4:	2400      	movs	r4, #0
    69e6:	4d0d      	ldr	r5, [pc, #52]	; (6a1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    69e8:	e00f      	b.n	6a0a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    69ea:	bf00      	nop
    69ec:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    69f0:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    69f4:	42b1      	cmp	r1, r6
    69f6:	d106      	bne.n	6a06 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    69f8:	2206      	movs	r2, #6
    69fa:	4639      	mov	r1, r7
    69fc:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    6a00:	f006 fd80 	bl	d504 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6a04:	b138      	cbz	r0, 6a16 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    6a06:	1c64      	adds	r4, r4, #1
    6a08:	b2e4      	uxtb	r4, r4
    6a0a:	7828      	ldrb	r0, [r5, #0]
    6a0c:	42a0      	cmp	r0, r4
    6a0e:	d8ed      	bhi.n	69ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    6a10:	2010      	movs	r0, #16
    6a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a16:	4620      	mov	r0, r4
    6a18:	e7fb      	b.n	6a12 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    6a1a:	0000      	.short	0x0000
    6a1c:	2000115a 	.word	0x2000115a
    6a20:	b570      	push	{r4, r5, r6, lr}
    6a22:	4605      	mov	r5, r0
    6a24:	f7ff ffaa 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6a28:	2810      	cmp	r0, #16
    6a2a:	d11c      	bne.n	6a66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6a2c:	4c0e      	ldr	r4, [pc, #56]	; (6a68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    6a2e:	7820      	ldrb	r0, [r4, #0]
    6a30:	1e40      	subs	r0, r0, #1
    6a32:	b2c0      	uxtb	r0, r0
    6a34:	7020      	strb	r0, [r4, #0]
    6a36:	42a8      	cmp	r0, r5
    6a38:	d015      	beq.n	6a66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6a3a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6a3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    6a42:	f502 7080 	add.w	r0, r2, #256	; 0x100
    6a46:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    6a4a:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    6a4e:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6a52:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    6a56:	7820      	ldrb	r0, [r4, #0]
    6a58:	f7ff ff90 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6a5c:	2810      	cmp	r0, #16
    6a5e:	d002      	beq.n	6a66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6a60:	4420      	add	r0, r4
    6a62:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    6a66:	bd70      	pop	{r4, r5, r6, pc}
    6a68:	2000115a 	.word	0x2000115a
    6a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a70:	4c21      	ldr	r4, [pc, #132]	; (6af8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    6a72:	4606      	mov	r6, r0
    6a74:	19a7      	adds	r7, r4, r6
    6a76:	78a0      	ldrb	r0, [r4, #2]
    6a78:	1e40      	subs	r0, r0, #1
    6a7a:	b2c5      	uxtb	r5, r0
    6a7c:	70a5      	strb	r5, [r4, #2]
    6a7e:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    6a82:	42ae      	cmp	r6, r5
    6a84:	d02a      	beq.n	6adc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    6a86:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    6a8a:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    6a8e:	f10a 0103 	add.w	r1, sl, #3
    6a92:	f109 0003 	add.w	r0, r9, #3
    6a96:	2210      	movs	r2, #16
    6a98:	f006 fd46 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6a9c:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    6aa0:	f109 0083 	add.w	r0, r9, #131	; 0x83
    6aa4:	2210      	movs	r2, #16
    6aa6:	f006 fd3f 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6aaa:	1960      	adds	r0, r4, r5
    6aac:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6ab0:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6ab4:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    6ab8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    6abc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6ac0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6ac4:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6ac8:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    6acc:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6ad0:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6ad4:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6ad8:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    6adc:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6ae0:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6ae4:	07c0      	lsls	r0, r0, #31
    6ae6:	d104      	bne.n	6af2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    6ae8:	4640      	mov	r0, r8
    6aea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6aee:	f7ff bf97 	b.w	6a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    6af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6af6:	0000      	.short	0x0000
    6af8:	2000115a 	.word	0x2000115a
    6afc:	4905      	ldr	r1, [pc, #20]	; (6b14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    6afe:	784a      	ldrb	r2, [r1, #1]
    6b00:	1e52      	subs	r2, r2, #1
    6b02:	704a      	strb	r2, [r1, #1]
    6b04:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6b08:	2200      	movs	r2, #0
    6b0a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6b0e:	f7ff bf87 	b.w	6a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    6b12:	0000      	.short	0x0000
    6b14:	2000115a 	.word	0x2000115a

00006b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    6b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b1c:	4604      	mov	r4, r0
    6b1e:	f100 0778 	add.w	r7, r0, #120	; 0x78
    6b22:	b171      	cbz	r1, 6b42 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    6b24:	f104 068e 	add.w	r6, r4, #142	; 0x8e
    6b28:	1e75      	subs	r5, r6, #1
    6b2a:	2901      	cmp	r1, #1
    6b2c:	d016      	beq.n	6b5c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    6b2e:	2902      	cmp	r1, #2
    6b30:	d025      	beq.n	6b7e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    6b32:	2903      	cmp	r1, #3
    6b34:	d110      	bne.n	6b58 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    6b36:	4631      	mov	r1, r6
    6b38:	4628      	mov	r0, r5
    6b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6b3e:	f008 b912 	b.w	ed66 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6b42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    6b46:	2100      	movs	r1, #0
    6b48:	f006 fd68 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6b4c:	4638      	mov	r0, r7
    6b4e:	f008 f8c7 	bl	ece0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    6b52:	2020      	movs	r0, #32
    6b54:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    6b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b5c:	68e1      	ldr	r1, [r4, #12]
    6b5e:	480d      	ldr	r0, [pc, #52]	; (6b94 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    6b60:	460a      	mov	r2, r1
    6b62:	4408      	add	r0, r1
    6b64:	fbb0 f0f1 	udiv	r0, r0, r1
    6b68:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    6b6c:	f640 30b8 	movw	r0, #3000	; 0xbb8
    6b70:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    6b74:	8ae3      	ldrh	r3, [r4, #22]
    6b76:	4638      	mov	r0, r7
    6b78:	f000 f80e 	bl	6b98 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    6b7c:	e7db      	b.n	6b36 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    6b7e:	68c1      	ldr	r1, [r0, #12]
    6b80:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
    6b84:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    6b88:	4638      	mov	r0, r7
    6b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6b8e:	f000 b803 	b.w	6b98 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    6b92:	0000      	.short	0x0000
    6b94:	01c9c37f 	.word	0x01c9c37f
    6b98:	b530      	push	{r4, r5, lr}
    6b9a:	2400      	movs	r4, #0
    6b9c:	86c4      	strh	r4, [r0, #54]	; 0x36
    6b9e:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
    6ba0:	4d13      	ldr	r5, [pc, #76]	; (6bf0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd8>)
    6ba2:	434c      	muls	r4, r1
    6ba4:	fbb4 f4f2 	udiv	r4, r4, r2
    6ba8:	8744      	strh	r4, [r0, #58]	; 0x3a
    6baa:	f242 7410 	movw	r4, #10000	; 0x2710
    6bae:	4363      	muls	r3, r4
    6bb0:	fbb3 f3f2 	udiv	r3, r3, r2
    6bb4:	1c5b      	adds	r3, r3, #1
    6bb6:	b29b      	uxth	r3, r3
    6bb8:	fb03 f402 	mul.w	r4, r3, r2
    6bbc:	8703      	strh	r3, [r0, #56]	; 0x38
    6bbe:	42ac      	cmp	r4, r5
    6bc0:	d901      	bls.n	6bc6 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xae>
    6bc2:	1e5b      	subs	r3, r3, #1
    6bc4:	8703      	strh	r3, [r0, #56]	; 0x38
    6bc6:	4b0b      	ldr	r3, [pc, #44]	; (6bf4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xdc>)
    6bc8:	f240 2471 	movw	r4, #625	; 0x271
    6bcc:	fbb3 f3f2 	udiv	r3, r3, r2
    6bd0:	1c5b      	adds	r3, r3, #1
    6bd2:	87c3      	strh	r3, [r0, #62]	; 0x3e
    6bd4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    6bd6:	4363      	muls	r3, r4
    6bd8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6bdc:	1e5b      	subs	r3, r3, #1
    6bde:	fbb3 f3f2 	udiv	r3, r3, r2
    6be2:	62c3      	str	r3, [r0, #44]	; 0x2c
    6be4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6be6:	434b      	muls	r3, r1
    6be8:	fbb3 f1f2 	udiv	r1, r3, r2
    6bec:	6281      	str	r1, [r0, #40]	; 0x28
    6bee:	bd30      	pop	{r4, r5, pc}
    6bf0:	01e84800 	.word	0x01e84800
    6bf4:	02625a00 	.word	0x02625a00

00006bf8 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    6bf8:	4909      	ldr	r1, [pc, #36]	; (6c20 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    6bfa:	b508      	push	{r3, lr}
    6bfc:	7809      	ldrb	r1, [r1, #0]
    6bfe:	f88d 1000 	strb.w	r1, [sp]
    6c02:	9900      	ldr	r1, [sp, #0]
    6c04:	9100      	str	r1, [sp, #0]
    6c06:	f89d 1000 	ldrb.w	r1, [sp]
    6c0a:	b109      	cbz	r1, 6c10 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    6c0c:	2000      	movs	r0, #0
    6c0e:	bd08      	pop	{r3, pc}
    6c10:	4903      	ldr	r1, [pc, #12]	; (6c20 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    6c12:	f8d1 2001 	ldr.w	r2, [r1, #1]
    6c16:	6002      	str	r2, [r0, #0]
    6c18:	7949      	ldrb	r1, [r1, #5]
    6c1a:	7101      	strb	r1, [r0, #4]
    6c1c:	2001      	movs	r0, #1
    6c1e:	bd08      	pop	{r3, pc}
    6c20:	2000028f 	.word	0x2000028f

00006c24 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    6c24:	4905      	ldr	r1, [pc, #20]	; (6c3c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    6c26:	2201      	movs	r2, #1
    6c28:	700a      	strb	r2, [r1, #0]
    6c2a:	460a      	mov	r2, r1
    6c2c:	6803      	ldr	r3, [r0, #0]
    6c2e:	f8c2 3001 	str.w	r3, [r2, #1]
    6c32:	7900      	ldrb	r0, [r0, #4]
    6c34:	7150      	strb	r0, [r2, #5]
    6c36:	2000      	movs	r0, #0
    6c38:	7008      	strb	r0, [r1, #0]
    6c3a:	4770      	bx	lr
    6c3c:	2000028f 	.word	0x2000028f

00006c40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6c40:	b570      	push	{r4, r5, r6, lr}
    6c42:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    6c46:	b28b      	uxth	r3, r1
    6c48:	7ac5      	ldrb	r5, [r0, #11]
    6c4a:	ea83 0102 	eor.w	r1, r3, r2
    6c4e:	2200      	movs	r2, #0
    6c50:	b2cc      	uxtb	r4, r1
    6c52:	0a09      	lsrs	r1, r1, #8
    6c54:	fa94 f4a4 	rbit	r4, r4
    6c58:	fa91 f1a1 	rbit	r1, r1
    6c5c:	0e24      	lsrs	r4, r4, #24
    6c5e:	0e09      	lsrs	r1, r1, #24
    6c60:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    6c64:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6c68:	1c52      	adds	r2, r2, #1
    6c6a:	4419      	add	r1, r3
    6c6c:	b2d2      	uxtb	r2, r2
    6c6e:	b289      	uxth	r1, r1
    6c70:	2a03      	cmp	r2, #3
    6c72:	d3ed      	bcc.n	6c50 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    6c74:	4059      	eors	r1, r3
    6c76:	2225      	movs	r2, #37	; 0x25
    6c78:	fbb1 f3f2 	udiv	r3, r1, r2
    6c7c:	fb02 1213 	mls	r2, r2, r3, r1
    6c80:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    6c84:	f002 0607 	and.w	r6, r2, #7
    6c88:	785b      	ldrb	r3, [r3, #1]
    6c8a:	2401      	movs	r4, #1
    6c8c:	fa04 f606 	lsl.w	r6, r4, r6
    6c90:	4233      	tst	r3, r6
    6c92:	d001      	beq.n	6c98 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    6c94:	4610      	mov	r0, r2
    6c96:	bd70      	pop	{r4, r5, r6, pc}
    6c98:	434d      	muls	r5, r1
    6c9a:	0c29      	lsrs	r1, r5, #16
    6c9c:	1c49      	adds	r1, r1, #1
    6c9e:	b2c9      	uxtb	r1, r1
    6ca0:	2200      	movs	r2, #0
    6ca2:	1885      	adds	r5, r0, r2
    6ca4:	79ab      	ldrb	r3, [r5, #6]
    6ca6:	428b      	cmp	r3, r1
    6ca8:	d312      	bcc.n	6cd0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6caa:	f895 5001 	ldrb.w	r5, [r5, #1]
    6cae:	2300      	movs	r3, #0
    6cb0:	fa04 f603 	lsl.w	r6, r4, r3
    6cb4:	4235      	tst	r5, r6
    6cb6:	d001      	beq.n	6cbc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    6cb8:	1e49      	subs	r1, r1, #1
    6cba:	b2c9      	uxtb	r1, r1
    6cbc:	b121      	cbz	r1, 6cc8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6cbe:	1c5b      	adds	r3, r3, #1
    6cc0:	b2db      	uxtb	r3, r3
    6cc2:	2b08      	cmp	r3, #8
    6cc4:	d3f4      	bcc.n	6cb0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    6cc6:	e005      	b.n	6cd4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6cc8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6ccc:	b2c0      	uxtb	r0, r0
    6cce:	bd70      	pop	{r4, r5, r6, pc}
    6cd0:	1ac9      	subs	r1, r1, r3
    6cd2:	b2c9      	uxtb	r1, r1
    6cd4:	1c52      	adds	r2, r2, #1
    6cd6:	b2d2      	uxtb	r2, r2
    6cd8:	2a05      	cmp	r2, #5
    6cda:	d3e2      	bcc.n	6ca2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6cdc:	f240 110d 	movw	r1, #269	; 0x10d
    6ce0:	2046      	movs	r0, #70	; 0x46
    6ce2:	f7fe f819 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ce6:	0000      	movs	r0, r0
    6ce8:	b570      	push	{r4, r5, r6, lr}
    6cea:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    6cee:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    6cf2:	2401      	movs	r4, #1
    6cf4:	fb03 2101 	mla	r1, r3, r1, r2
    6cf8:	2225      	movs	r2, #37	; 0x25
    6cfa:	fbb1 f3f2 	udiv	r3, r1, r2
    6cfe:	fb02 1113 	mls	r1, r2, r3, r1
    6d02:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    6d06:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    6d0a:	f001 0307 	and.w	r3, r1, #7
    6d0e:	7d92      	ldrb	r2, [r2, #22]
    6d10:	fa04 f303 	lsl.w	r3, r4, r3
    6d14:	421a      	tst	r2, r3
    6d16:	d003      	beq.n	6d20 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    6d18:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6d1c:	2000      	movs	r0, #0
    6d1e:	bd70      	pop	{r4, r5, r6, pc}
    6d20:	f890 2020 	ldrb.w	r2, [r0, #32]
    6d24:	fbb1 f3f2 	udiv	r3, r1, r2
    6d28:	fb02 1113 	mls	r1, r2, r3, r1
    6d2c:	1c49      	adds	r1, r1, #1
    6d2e:	b2c9      	uxtb	r1, r1
    6d30:	2300      	movs	r3, #0
    6d32:	18c5      	adds	r5, r0, r3
    6d34:	7eea      	ldrb	r2, [r5, #27]
    6d36:	428a      	cmp	r2, r1
    6d38:	d311      	bcc.n	6d5e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    6d3a:	f895 5016 	ldrb.w	r5, [r5, #22]
    6d3e:	2200      	movs	r2, #0
    6d40:	fa04 f602 	lsl.w	r6, r4, r2
    6d44:	4235      	tst	r5, r6
    6d46:	d001      	beq.n	6d4c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    6d48:	1e49      	subs	r1, r1, #1
    6d4a:	b2c9      	uxtb	r1, r1
    6d4c:	b121      	cbz	r1, 6d58 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    6d4e:	1c52      	adds	r2, r2, #1
    6d50:	b2d2      	uxtb	r2, r2
    6d52:	2a08      	cmp	r2, #8
    6d54:	d3f4      	bcc.n	6d40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    6d56:	e004      	b.n	6d62 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    6d58:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6d5c:	e7dc      	b.n	6d18 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    6d5e:	1a89      	subs	r1, r1, r2
    6d60:	b2c9      	uxtb	r1, r1
    6d62:	1c5b      	adds	r3, r3, #1
    6d64:	b2db      	uxtb	r3, r3
    6d66:	2b05      	cmp	r3, #5
    6d68:	d3e3      	bcc.n	6d32 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    6d6a:	201f      	movs	r0, #31
    6d6c:	bd70      	pop	{r4, r5, r6, pc}
	...

00006d70 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6d70:	7841      	ldrb	r1, [r0, #1]
    6d72:	b141      	cbz	r1, 6d86 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6d74:	78c0      	ldrb	r0, [r0, #3]
    6d76:	2819      	cmp	r0, #25
    6d78:	d203      	bcs.n	6d82 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6d7a:	4a04      	ldr	r2, [pc, #16]	; (6d8c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6d7c:	5c10      	ldrb	r0, [r2, r0]
    6d7e:	4288      	cmp	r0, r1
    6d80:	d101      	bne.n	6d86 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6d82:	2001      	movs	r0, #1
    6d84:	4770      	bx	lr
    6d86:	2000      	movs	r0, #0
    6d88:	4770      	bx	lr
    6d8a:	0000      	.short	0x0000
    6d8c:	00010938 	.word	0x00010938

00006d90 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6d90:	b510      	push	{r4, lr}
    6d92:	2201      	movs	r2, #1
    6d94:	70c1      	strb	r1, [r0, #3]
    6d96:	2919      	cmp	r1, #25
    6d98:	d202      	bcs.n	6da0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    6d9a:	4a06      	ldr	r2, [pc, #24]	; (6db4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6d9c:	5c52      	ldrb	r2, [r2, r1]
    6d9e:	e006      	b.n	6dae <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6da0:	29ff      	cmp	r1, #255	; 0xff
    6da2:	d004      	beq.n	6dae <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6da4:	f240 31d5 	movw	r1, #981	; 0x3d5
    6da8:	202a      	movs	r0, #42	; 0x2a
    6daa:	f7fd ffb5 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dae:	7042      	strb	r2, [r0, #1]
    6db0:	bd10      	pop	{r4, pc}
    6db2:	0000      	.short	0x0000
    6db4:	00010938 	.word	0x00010938

00006db8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    6db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6dbc:	ea5f 0900 	movs.w	r9, r0
    6dc0:	d006      	beq.n	6dd0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    6dc2:	4c21      	ldr	r4, [pc, #132]	; (6e48 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    6dc4:	f104 0010 	add.w	r0, r4, #16
    6dc8:	7b61      	ldrb	r1, [r4, #13]
    6dca:	4682      	mov	sl, r0
    6dcc:	b119      	cbz	r1, 6dd6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    6dce:	e00b      	b.n	6de8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    6dd0:	f240 3193 	movw	r1, #915	; 0x393
    6dd4:	e005      	b.n	6de2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    6dd6:	2100      	movs	r1, #0
    6dd8:	f008 f940 	bl	f05c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    6ddc:	b120      	cbz	r0, 6de8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    6dde:	f240 3196 	movw	r1, #918	; 0x396
    6de2:	202b      	movs	r0, #43	; 0x2b
    6de4:	f7fd ff98 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6de8:	8a26      	ldrh	r6, [r4, #16]
    6dea:	2000      	movs	r0, #0
    6dec:	f7fe f978 	bl	50e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6df0:	4f16      	ldr	r7, [pc, #88]	; (6e4c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    6df2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 6e50 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    6df6:	4605      	mov	r5, r0
    6df8:	6839      	ldr	r1, [r7, #0]
    6dfa:	b129      	cbz	r1, 6e08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x50>
    6dfc:	8a20      	ldrh	r0, [r4, #16]
    6dfe:	42a8      	cmp	r0, r5
    6e00:	d102      	bne.n	6e08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x50>
    6e02:	4648      	mov	r0, r9
    6e04:	4788      	blx	r1
    6e06:	e005      	b.n	6e14 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    6e08:	f8d8 2000 	ldr.w	r2, [r8]
    6e0c:	b11a      	cbz	r2, 6e16 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5e>
    6e0e:	8a20      	ldrh	r0, [r4, #16]
    6e10:	4649      	mov	r1, r9
    6e12:	4790      	blx	r2
    6e14:	b998      	cbnz	r0, 6e3e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    6e16:	2100      	movs	r1, #0
    6e18:	4650      	mov	r0, sl
    6e1a:	f008 f91f 	bl	f05c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    6e1e:	b910      	cbnz	r0, 6e26 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6e>
    6e20:	8a20      	ldrh	r0, [r4, #16]
    6e22:	42b0      	cmp	r0, r6
    6e24:	d1e8      	bne.n	6df8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    6e26:	480b      	ldr	r0, [pc, #44]	; (6e54 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    6e28:	6801      	ldr	r1, [r0, #0]
    6e2a:	b111      	cbz	r1, 6e32 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    6e2c:	4648      	mov	r0, r9
    6e2e:	4788      	blx	r1
    6e30:	b928      	cbnz	r0, 6e3e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    6e32:	4809      	ldr	r0, [pc, #36]	; (6e58 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xa0>)
    6e34:	6801      	ldr	r1, [r0, #0]
    6e36:	b129      	cbz	r1, 6e44 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    6e38:	4648      	mov	r0, r9
    6e3a:	4788      	blx	r1
    6e3c:	b110      	cbz	r0, 6e44 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    6e3e:	2001      	movs	r0, #1
    6e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e44:	2000      	movs	r0, #0
    6e46:	e7fb      	b.n	6e40 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    6e48:	20000ff8 	.word	0x20000ff8
    6e4c:	20000218 	.word	0x20000218
    6e50:	2000020c 	.word	0x2000020c
    6e54:	2000021c 	.word	0x2000021c
    6e58:	20000208 	.word	0x20000208

00006e5c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    6e5c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e60:	b087      	sub	sp, #28
    6e62:	460c      	mov	r4, r1
    6e64:	a902      	add	r1, sp, #8
    6e66:	9807      	ldr	r0, [sp, #28]
    6e68:	f007 fd79 	bl	e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6e6c:	2800      	cmp	r0, #0
    6e6e:	d17d      	bne.n	6f6c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6e70:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6f94 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x138>
    6e74:	f04f 0801 	mov.w	r8, #1
    6e78:	4682      	mov	sl, r0
    6e7a:	9803      	ldr	r0, [sp, #12]
    6e7c:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    6e80:	2800      	cmp	r0, #0
    6e82:	d00c      	beq.n	6e9e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6e84:	f8d9 2000 	ldr.w	r2, [r9]
    6e88:	b162      	cbz	r2, 6ea4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6e8a:	4621      	mov	r1, r4
    6e8c:	9807      	ldr	r0, [sp, #28]
    6e8e:	4790      	blx	r2
    6e90:	b140      	cbz	r0, 6ea4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6e92:	4620      	mov	r0, r4
    6e94:	f000 f9c0 	bl	7218 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1b0>
    6e98:	2800      	cmp	r0, #0
    6e9a:	d1ee      	bne.n	6e7a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    6e9c:	2001      	movs	r0, #1
    6e9e:	b009      	add	sp, #36	; 0x24
    6ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ea4:	9d03      	ldr	r5, [sp, #12]
    6ea6:	f895 0120 	ldrb.w	r0, [r5, #288]	; 0x120
    6eaa:	3578      	adds	r5, #120	; 0x78
    6eac:	b950      	cbnz	r0, 6ec4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    6eae:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    6eb2:	f88d 0004 	strb.w	r0, [sp, #4]
    6eb6:	9801      	ldr	r0, [sp, #4]
    6eb8:	9001      	str	r0, [sp, #4]
    6eba:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6ebe:	b108      	cbz	r0, 6ec4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    6ec0:	2001      	movs	r0, #1
    6ec2:	e000      	b.n	6ec6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    6ec4:	2000      	movs	r0, #0
    6ec6:	4683      	mov	fp, r0
    6ec8:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
    6ecc:	b1c0      	cbz	r0, 6f00 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    6ece:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
    6ed2:	0780      	lsls	r0, r0, #30
    6ed4:	d514      	bpl.n	6f00 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    6ed6:	f884 a001 	strb.w	sl, [r4, #1]
    6eda:	f884 8000 	strb.w	r8, [r4]
    6ede:	f884 a004 	strb.w	sl, [r4, #4]
    6ee2:	9907      	ldr	r1, [sp, #28]
    6ee4:	f8a4 1005 	strh.w	r1, [r4, #5]
    6ee8:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
    6eec:	71e1      	strb	r1, [r4, #7]
    6eee:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    6ef2:	8121      	strh	r1, [r4, #8]
    6ef4:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    6ef8:	8161      	strh	r1, [r4, #10]
    6efa:	f885 a047 	strb.w	sl, [r5, #71]	; 0x47
    6efe:	e7c8      	b.n	6e92 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6f00:	9807      	ldr	r0, [sp, #28]
    6f02:	f7fe fb1d 	bl	5540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6f06:	0007      	movs	r7, r0
    6f08:	d00d      	beq.n	6f26 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xca>
    6f0a:	f007 f9bf 	bl	e28c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6f0e:	0006      	movs	r6, r0
    6f10:	d015      	beq.n	6f3e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe2>
    6f12:	f884 a001 	strb.w	sl, [r4, #1]
    6f16:	200f      	movs	r0, #15
    6f18:	7020      	strb	r0, [r4, #0]
    6f1a:	9807      	ldr	r0, [sp, #28]
    6f1c:	80e0      	strh	r0, [r4, #6]
    6f1e:	8126      	strh	r6, [r4, #8]
    6f20:	f884 8004 	strb.w	r8, [r4, #4]
    6f24:	e007      	b.n	6f36 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xda>
    6f26:	f240 213a 	movw	r1, #570	; 0x23a
    6f2a:	e02d      	b.n	6f88 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    6f2c:	2100      	movs	r1, #0
    6f2e:	4638      	mov	r0, r7
    6f30:	460a      	mov	r2, r1
    6f32:	f007 facf 	bl	e4d4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6f36:	1e76      	subs	r6, r6, #1
    6f38:	b2b6      	uxth	r6, r6
    6f3a:	d2f7      	bcs.n	6f2c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd0>
    6f3c:	e7a9      	b.n	6e92 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6f3e:	9807      	ldr	r0, [sp, #28]
    6f40:	f7fe fae8 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6f44:	b1f0      	cbz	r0, 6f84 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x128>
    6f46:	f1bb 0f00 	cmp.w	fp, #0
    6f4a:	d020      	beq.n	6f8e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    6f4c:	f007 f8b8 	bl	e0c0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6f50:	b160      	cbz	r0, 6f6c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6f52:	9807      	ldr	r0, [sp, #28]
    6f54:	f007 fbe8 	bl	e728 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6f58:	2100      	movs	r1, #0
    6f5a:	9807      	ldr	r0, [sp, #28]
    6f5c:	f7fe f95a 	bl	5214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6f60:	f884 a001 	strb.w	sl, [r4, #1]
    6f64:	210c      	movs	r1, #12
    6f66:	4650      	mov	r0, sl
    6f68:	7021      	strb	r1, [r4, #0]
    6f6a:	e000      	b.n	6f6e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    6f6c:	e00f      	b.n	6f8e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    6f6e:	f884 a004 	strb.w	sl, [r4, #4]
    6f72:	9907      	ldr	r1, [sp, #28]
    6f74:	f8a4 1005 	strh.w	r1, [r4, #5]
    6f78:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    6f7c:	71e1      	strb	r1, [r4, #7]
    6f7e:	3524      	adds	r5, #36	; 0x24
    6f80:	7028      	strb	r0, [r5, #0]
    6f82:	e786      	b.n	6e92 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6f84:	f44f 7116 	mov.w	r1, #600	; 0x258
    6f88:	202b      	movs	r0, #43	; 0x2b
    6f8a:	f7fd fec5 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f8e:	2000      	movs	r0, #0
    6f90:	e785      	b.n	6e9e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6f92:	0000      	.short	0x0000
    6f94:	20000210 	.word	0x20000210

00006f98 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI>:
    6f98:	b570      	push	{r4, r5, r6, lr}
    6f9a:	4604      	mov	r4, r0
    6f9c:	481b      	ldr	r0, [pc, #108]	; (700c <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x74>)
    6f9e:	6801      	ldr	r1, [r0, #0]
    6fa0:	b319      	cbz	r1, 6fea <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x52>
    6fa2:	4620      	mov	r0, r4
    6fa4:	4788      	blx	r1
    6fa6:	b300      	cbz	r0, 6fea <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x52>
    6fa8:	7820      	ldrb	r0, [r4, #0]
    6faa:	2818      	cmp	r0, #24
    6fac:	d002      	beq.n	6fb4 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x1c>
    6fae:	2805      	cmp	r0, #5
    6fb0:	d016      	beq.n	6fe0 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x48>
    6fb2:	e018      	b.n	6fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    6fb4:	7920      	ldrb	r0, [r4, #4]
    6fb6:	2801      	cmp	r0, #1
    6fb8:	d115      	bne.n	6fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    6fba:	88e0      	ldrh	r0, [r4, #6]
    6fbc:	2100      	movs	r1, #0
    6fbe:	f007 fb50 	bl	e662 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6fc2:	0004      	movs	r4, r0
    6fc4:	d00f      	beq.n	6fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    6fc6:	8820      	ldrh	r0, [r4, #0]
    6fc8:	f007 fbae 	bl	e728 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6fcc:	8820      	ldrh	r0, [r4, #0]
    6fce:	2100      	movs	r1, #0
    6fd0:	f7fe f920 	bl	5214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6fd4:	b138      	cbz	r0, 6fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    6fd6:	f240 2192 	movw	r1, #658	; 0x292
    6fda:	202b      	movs	r0, #43	; 0x2b
    6fdc:	f7fd fe9c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fe0:	4620      	mov	r0, r4
    6fe2:	f000 f85b 	bl	709c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    6fe6:	2001      	movs	r0, #1
    6fe8:	bd70      	pop	{r4, r5, r6, pc}
    6fea:	4d09      	ldr	r5, [pc, #36]	; (7010 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x78>)
    6fec:	7868      	ldrb	r0, [r5, #1]
    6fee:	2800      	cmp	r0, #0
    6ff0:	d0fa      	beq.n	6fe8 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x50>
    6ff2:	2600      	movs	r6, #0
    6ff4:	7066      	strb	r6, [r4, #1]
    6ff6:	2014      	movs	r0, #20
    6ff8:	7020      	strb	r0, [r4, #0]
    6ffa:	2220      	movs	r2, #32
    6ffc:	4631      	mov	r1, r6
    6ffe:	1d20      	adds	r0, r4, #4
    7000:	f006 fb0c 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7004:	2002      	movs	r0, #2
    7006:	7120      	strb	r0, [r4, #4]
    7008:	706e      	strb	r6, [r5, #1]
    700a:	e7ec      	b.n	6fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    700c:	20000214 	.word	0x20000214
    7010:	20000ff8 	.word	0x20000ff8

00007014 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    7014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7018:	4c12      	ldr	r4, [pc, #72]	; (7064 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    701a:	4607      	mov	r7, r0
    701c:	460e      	mov	r6, r1
    701e:	7de0      	ldrb	r0, [r4, #23]
    7020:	b110      	cbz	r0, 7028 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    7022:	8b20      	ldrh	r0, [r4, #24]
    7024:	2800      	cmp	r0, #0
    7026:	d012      	beq.n	704e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    7028:	480e      	ldr	r0, [pc, #56]	; (7064 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    702a:	300e      	adds	r0, #14
    702c:	4680      	mov	r8, r0
    702e:	f007 ffcb 	bl	efc8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7032:	b9a8      	cbnz	r0, 7060 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    7034:	89e5      	ldrh	r5, [r4, #14]
    7036:	89e0      	ldrh	r0, [r4, #14]
    7038:	4632      	mov	r2, r6
    703a:	4639      	mov	r1, r7
    703c:	f007 ffc7 	bl	efce <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x6>
    7040:	b138      	cbz	r0, 7052 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    7042:	7de0      	ldrb	r0, [r4, #23]
    7044:	b110      	cbz	r0, 704c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    7046:	8b20      	ldrh	r0, [r4, #24]
    7048:	1e40      	subs	r0, r0, #1
    704a:	8320      	strh	r0, [r4, #24]
    704c:	2001      	movs	r0, #1
    704e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7052:	4640      	mov	r0, r8
    7054:	f007 ffb8 	bl	efc8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7058:	b910      	cbnz	r0, 7060 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    705a:	89e0      	ldrh	r0, [r4, #14]
    705c:	42a8      	cmp	r0, r5
    705e:	d1ea      	bne.n	7036 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    7060:	2000      	movs	r0, #0
    7062:	e7f4      	b.n	704e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    7064:	20000ff8 	.word	0x20000ff8

00007068 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    7068:	b510      	push	{r4, lr}
    706a:	7901      	ldrb	r1, [r0, #4]
    706c:	b119      	cbz	r1, 7076 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    706e:	2901      	cmp	r1, #1
    7070:	d006      	beq.n	7080 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    7072:	2000      	movs	r0, #0
    7074:	bd10      	pop	{r4, pc}
    7076:	8842      	ldrh	r2, [r0, #2]
    7078:	6883      	ldr	r3, [r0, #8]
    707a:	8800      	ldrh	r0, [r0, #0]
    707c:	2102      	movs	r1, #2
    707e:	e003      	b.n	7088 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    7080:	8842      	ldrh	r2, [r0, #2]
    7082:	6883      	ldr	r3, [r0, #8]
    7084:	8800      	ldrh	r0, [r0, #0]
    7086:	2101      	movs	r1, #1
    7088:	f000 f878 	bl	717c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x114>
    708c:	b910      	cbnz	r0, 7094 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    708e:	4902      	ldr	r1, [pc, #8]	; (7098 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    7090:	2001      	movs	r0, #1
    7092:	7008      	strb	r0, [r1, #0]
    7094:	2001      	movs	r0, #1
    7096:	bd10      	pop	{r4, pc}
    7098:	20000ff8 	.word	0x20000ff8
    709c:	b570      	push	{r4, r5, r6, lr}
    709e:	4604      	mov	r4, r0
    70a0:	7800      	ldrb	r0, [r0, #0]
    70a2:	2805      	cmp	r0, #5
    70a4:	d002      	beq.n	70ac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x44>
    70a6:	f240 1187 	movw	r1, #391	; 0x187
    70aa:	e059      	b.n	7160 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    70ac:	7ba0      	ldrb	r0, [r4, #14]
    70ae:	06c0      	lsls	r0, r0, #27
    70b0:	d402      	bmi.n	70b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x50>
    70b2:	f44f 71c4 	mov.w	r1, #392	; 0x188
    70b6:	e053      	b.n	7160 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    70b8:	221c      	movs	r2, #28
    70ba:	1d21      	adds	r1, r4, #4
    70bc:	482e      	ldr	r0, [pc, #184]	; (7178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    70be:	f006 fa33 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    70c2:	482d      	ldr	r0, [pc, #180]	; (7178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    70c4:	7b22      	ldrb	r2, [r4, #12]
    70c6:	f104 0120 	add.w	r1, r4, #32
    70ca:	301c      	adds	r0, #28
    70cc:	f006 fa2c 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    70d0:	4829      	ldr	r0, [pc, #164]	; (7178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    70d2:	f04f 0201 	mov.w	r2, #1
    70d6:	7a81      	ldrb	r1, [r0, #10]
    70d8:	0749      	lsls	r1, r1, #29
    70da:	d502      	bpl.n	70e2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7a>
    70dc:	7cc1      	ldrb	r1, [r0, #19]
    70de:	29fe      	cmp	r1, #254	; 0xfe
    70e0:	d00c      	beq.n	70fc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x94>
    70e2:	2304      	movs	r3, #4
    70e4:	7023      	strb	r3, [r4, #0]
    70e6:	6801      	ldr	r1, [r0, #0]
    70e8:	6061      	str	r1, [r4, #4]
    70ea:	6841      	ldr	r1, [r0, #4]
    70ec:	60a1      	str	r1, [r4, #8]
    70ee:	8901      	ldrh	r1, [r0, #8]
    70f0:	81a1      	strh	r1, [r4, #12]
    70f2:	7a81      	ldrb	r1, [r0, #10]
    70f4:	070d      	lsls	r5, r1, #28
    70f6:	d519      	bpl.n	712c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    70f8:	73a3      	strb	r3, [r4, #14]
    70fa:	e02c      	b.n	7156 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    70fc:	2113      	movs	r1, #19
    70fe:	7021      	strb	r1, [r4, #0]
    7100:	7801      	ldrb	r1, [r0, #0]
    7102:	7121      	strb	r1, [r4, #4]
    7104:	7162      	strb	r2, [r4, #5]
    7106:	7841      	ldrb	r1, [r0, #1]
    7108:	71a1      	strb	r1, [r4, #6]
    710a:	f8d0 1002 	ldr.w	r1, [r0, #2]
    710e:	f8c4 1007 	str.w	r1, [r4, #7]
    7112:	88c1      	ldrh	r1, [r0, #6]
    7114:	f8a4 100b 	strh.w	r1, [r4, #11]
    7118:	21fe      	movs	r1, #254	; 0xfe
    711a:	7361      	strb	r1, [r4, #13]
    711c:	6941      	ldr	r1, [r0, #20]
    711e:	f8c4 100e 	str.w	r1, [r4, #14]
    7122:	8b01      	ldrh	r1, [r0, #24]
    7124:	8261      	strh	r1, [r4, #18]
    7126:	7a40      	ldrb	r0, [r0, #9]
    7128:	7520      	strb	r0, [r4, #20]
    712a:	bd70      	pop	{r4, r5, r6, pc}
    712c:	07cb      	lsls	r3, r1, #31
    712e:	d003      	beq.n	7138 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    7130:	078b      	lsls	r3, r1, #30
    7132:	d501      	bpl.n	7138 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    7134:	2100      	movs	r1, #0
    7136:	e00d      	b.n	7154 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    7138:	074b      	lsls	r3, r1, #29
    713a:	d501      	bpl.n	7140 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd8>
    713c:	73a2      	strb	r2, [r4, #14]
    713e:	e00a      	b.n	7156 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    7140:	07ca      	lsls	r2, r1, #31
    7142:	d002      	beq.n	714a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe2>
    7144:	f240 11cf 	movw	r1, #463	; 0x1cf
    7148:	e00a      	b.n	7160 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    714a:	0789      	lsls	r1, r1, #30
    714c:	d501      	bpl.n	7152 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xea>
    714e:	2102      	movs	r1, #2
    7150:	e000      	b.n	7154 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    7152:	2103      	movs	r1, #3
    7154:	73a1      	strb	r1, [r4, #14]
    7156:	7a02      	ldrb	r2, [r0, #8]
    7158:	2a1f      	cmp	r2, #31
    715a:	d904      	bls.n	7166 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfe>
    715c:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    7160:	202b      	movs	r0, #43	; 0x2b
    7162:	f7fd fdd9 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7166:	f104 000f 	add.w	r0, r4, #15
    716a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    716e:	4902      	ldr	r1, [pc, #8]	; (7178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    7170:	311c      	adds	r1, #28
    7172:	f006 b9d9 	b.w	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7176:	0000      	.short	0x0000
    7178:	20000fbc 	.word	0x20000fbc
    717c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    7180:	468a      	mov	sl, r1
    7182:	4699      	mov	r9, r3
    7184:	4615      	mov	r5, r2
    7186:	4604      	mov	r4, r0
    7188:	a901      	add	r1, sp, #4
    718a:	f007 fbe8 	bl	e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    718e:	bbd8      	cbnz	r0, 7208 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a0>
    7190:	9f02      	ldr	r7, [sp, #8]
    7192:	2001      	movs	r0, #1
    7194:	3778      	adds	r7, #120	; 0x78
    7196:	b18d      	cbz	r5, 71bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x154>
    7198:	4620      	mov	r0, r4
    719a:	f7fe f9d1 	bl	5540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    719e:	0004      	movs	r4, r0
    71a0:	d00e      	beq.n	71c0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x158>
    71a2:	4629      	mov	r1, r5
    71a4:	f007 f8bf 	bl	e326 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    71a8:	0006      	movs	r6, r0
    71aa:	d003      	beq.n	71b4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14c>
    71ac:	4819      	ldr	r0, [pc, #100]	; (7214 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1ac>)
    71ae:	8880      	ldrh	r0, [r0, #4]
    71b0:	42a8      	cmp	r0, r5
    71b2:	d207      	bcs.n	71c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x15c>
    71b4:	2000      	movs	r0, #0
    71b6:	b004      	add	sp, #16
    71b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    71bc:	7538      	strb	r0, [r7, #20]
    71be:	e023      	b.n	7208 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a0>
    71c0:	2189      	movs	r1, #137	; 0x89
    71c2:	e024      	b.n	720e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a6>
    71c4:	4620      	mov	r0, r4
    71c6:	4631      	mov	r1, r6
    71c8:	aa03      	add	r2, sp, #12
    71ca:	f007 f8a5 	bl	e318 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    71ce:	9803      	ldr	r0, [sp, #12]
    71d0:	f04f 0800 	mov.w	r8, #0
    71d4:	f8a0 8000 	strh.w	r8, [r0]
    71d8:	f880 8002 	strb.w	r8, [r0, #2]
    71dc:	7d39      	ldrb	r1, [r7, #20]
    71de:	b109      	cbz	r1, 71e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17c>
    71e0:	f04f 0a02 	mov.w	sl, #2
    71e4:	4651      	mov	r1, sl
    71e6:	f007 fe69 	bl	eebc <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    71ea:	4631      	mov	r1, r6
    71ec:	2603      	movs	r6, #3
    71ee:	4620      	mov	r0, r4
    71f0:	464a      	mov	r2, r9
    71f2:	462b      	mov	r3, r5
    71f4:	9600      	str	r6, [sp, #0]
    71f6:	f006 ff4c 	bl	e092 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    71fa:	4620      	mov	r0, r4
    71fc:	4629      	mov	r1, r5
    71fe:	f007 f821 	bl	e244 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    7202:	b118      	cbz	r0, 720c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a4>
    7204:	f887 8014 	strb.w	r8, [r7, #20]
    7208:	2001      	movs	r0, #1
    720a:	e7d4      	b.n	71b6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14e>
    720c:	219f      	movs	r1, #159	; 0x9f
    720e:	202b      	movs	r0, #43	; 0x2b
    7210:	f7fd fd82 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7214:	20000ff8 	.word	0x20000ff8
    7218:	b510      	push	{r4, lr}
    721a:	492c      	ldr	r1, [pc, #176]	; (72cc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>)
    721c:	b086      	sub	sp, #24
    721e:	7d8a      	ldrb	r2, [r1, #22]
    7220:	7801      	ldrb	r1, [r0, #0]
    7222:	07d3      	lsls	r3, r2, #31
    7224:	d101      	bne.n	722a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1c2>
    7226:	291d      	cmp	r1, #29
    7228:	d004      	beq.n	7234 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1cc>
    722a:	291c      	cmp	r1, #28
    722c:	d01e      	beq.n	726c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x204>
    722e:	2915      	cmp	r1, #21
    7230:	d045      	beq.n	72be <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x256>
    7232:	e049      	b.n	72c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    7234:	8880      	ldrh	r0, [r0, #4]
    7236:	f8ad 0000 	strh.w	r0, [sp]
    723a:	a902      	add	r1, sp, #8
    723c:	f007 fb8f 	bl	e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7240:	b108      	cbz	r0, 7246 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1de>
    7242:	2158      	movs	r1, #88	; 0x58
    7244:	e035      	b.n	72b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    7246:	9803      	ldr	r0, [sp, #12]
    7248:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    724c:	f88d 1002 	strb.w	r1, [sp, #2]
    7250:	7841      	ldrb	r1, [r0, #1]
    7252:	f88d 1003 	strb.w	r1, [sp, #3]
    7256:	8840      	ldrh	r0, [r0, #2]
    7258:	f8ad 0004 	strh.w	r0, [sp, #4]
    725c:	2102      	movs	r1, #2
    725e:	4668      	mov	r0, sp
    7260:	f004 fc7e 	bl	bb60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7264:	b340      	cbz	r0, 72b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    7266:	f240 114d 	movw	r1, #333	; 0x14d
    726a:	e022      	b.n	72b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    726c:	0791      	lsls	r1, r2, #30
    726e:	d42b      	bmi.n	72c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    7270:	8884      	ldrh	r4, [r0, #4]
    7272:	a903      	add	r1, sp, #12
    7274:	4620      	mov	r0, r4
    7276:	f008 fe0e 	bl	fe96 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    727a:	b110      	cbz	r0, 7282 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x21a>
    727c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    7280:	e017      	b.n	72b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    7282:	f8ad 4000 	strh.w	r4, [sp]
    7286:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    728a:	f8ad 0002 	strh.w	r0, [sp, #2]
    728e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7292:	f8ad 0004 	strh.w	r0, [sp, #4]
    7296:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    729a:	f8ad 0006 	strh.w	r0, [sp, #6]
    729e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    72a2:	f8ad 0008 	strh.w	r0, [sp, #8]
    72a6:	4668      	mov	r0, sp
    72a8:	f008 fe20 	bl	feec <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    72ac:	b120      	cbz	r0, 72b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    72ae:	f240 115d 	movw	r1, #349	; 0x15d
    72b2:	202b      	movs	r0, #43	; 0x2b
    72b4:	f7fd fd30 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72b8:	2001      	movs	r0, #1
    72ba:	b006      	add	sp, #24
    72bc:	bd10      	pop	{r4, pc}
    72be:	0751      	lsls	r1, r2, #29
    72c0:	d402      	bmi.n	72c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    72c2:	7b80      	ldrb	r0, [r0, #14]
    72c4:	07c0      	lsls	r0, r0, #31
    72c6:	d0f7      	beq.n	72b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    72c8:	2000      	movs	r0, #0
    72ca:	e7f6      	b.n	72ba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x252>
    72cc:	20000ff8 	.word	0x20000ff8

000072d0 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q>:
    72d0:	b510      	push	{r4, lr}
    72d2:	4603      	mov	r3, r0
    72d4:	4907      	ldr	r1, [pc, #28]	; (72f4 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0x24>)
    72d6:	4c08      	ldr	r4, [pc, #32]	; (72f8 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0x28>)
    72d8:	2001      	movs	r0, #1
    72da:	780a      	ldrb	r2, [r1, #0]
    72dc:	1c52      	adds	r2, r2, #1
    72de:	f002 021f 	and.w	r2, r2, #31
    72e2:	700a      	strb	r2, [r1, #0]
    72e4:	fa00 f202 	lsl.w	r2, r0, r2
    72e8:	4222      	tst	r2, r4
    72ea:	d0f6      	beq.n	72da <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0xa>
    72ec:	7809      	ldrb	r1, [r1, #0]
    72ee:	4088      	lsls	r0, r1
    72f0:	4058      	eors	r0, r3
    72f2:	bd10      	pop	{r4, pc}
    72f4:	20000295 	.word	0x20000295
    72f8:	abd7aeaa 	.word	0xabd7aeaa

000072fc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    72fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    72fe:	f06f 021f 	mvn.w	r2, #31
    7302:	0c01      	lsrs	r1, r0, #16
    7304:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    7308:	251f      	movs	r5, #31
    730a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    730e:	3854      	subs	r0, #84	; 0x54
    7310:	d00d      	beq.n	732e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7312:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7316:	3855      	subs	r0, #85	; 0x55
    7318:	d009      	beq.n	732e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    731a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    731e:	38aa      	subs	r0, #170	; 0xaa
    7320:	d005      	beq.n	732e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7322:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    7326:	38aa      	subs	r0, #170	; 0xaa
    7328:	d001      	beq.n	732e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    732a:	2001      	movs	r0, #1
    732c:	e000      	b.n	7330 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    732e:	2000      	movs	r0, #0
    7330:	2200      	movs	r2, #0
    7332:	4613      	mov	r3, r2
    7334:	ea4f 0402 	mov.w	r4, r2
    7338:	ea82 0701 	eor.w	r7, r2, r1
    733c:	43ff      	mvns	r7, r7
    733e:	431f      	orrs	r7, r3
    7340:	1c7f      	adds	r7, r7, #1
    7342:	d00f      	beq.n	7364 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    7344:	f006 0701 	and.w	r7, r6, #1
    7348:	0852      	lsrs	r2, r2, #1
    734a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    734e:	f005 0701 	and.w	r7, r5, #1
    7352:	085b      	lsrs	r3, r3, #1
    7354:	0876      	lsrs	r6, r6, #1
    7356:	086d      	lsrs	r5, r5, #1
    7358:	1c64      	adds	r4, r4, #1
    735a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    735e:	2c16      	cmp	r4, #22
    7360:	d3ea      	bcc.n	7338 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    7362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7364:	2000      	movs	r0, #0
    7366:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007368 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    7368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    736c:	2500      	movs	r5, #0
    736e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 73fc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x94>
    7372:	f8df 908c 	ldr.w	r9, [pc, #140]	; 7400 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x98>
    7376:	4607      	mov	r7, r0
    7378:	260a      	movs	r6, #10
    737a:	2104      	movs	r1, #4
    737c:	4668      	mov	r0, sp
    737e:	f7fd fd75 	bl	4e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    7382:	9800      	ldr	r0, [sp, #0]
    7384:	ea00 0008 	and.w	r0, r0, r8
    7388:	ea40 0009 	orr.w	r0, r0, r9
    738c:	9000      	str	r0, [sp, #0]
    738e:	2000      	movs	r0, #0
    7390:	f7fd fea6 	bl	50e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7394:	4604      	mov	r4, r0
    7396:	e019      	b.n	73cc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x64>
    7398:	a901      	add	r1, sp, #4
    739a:	2000      	movs	r0, #0
    739c:	f007 f96a 	bl	e674 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    73a0:	e00e      	b.n	73c0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    73a2:	bf00      	nop
    73a4:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    73a8:	42b8      	cmp	r0, r7
    73aa:	d009      	beq.n	73c0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    73ac:	9803      	ldr	r0, [sp, #12]
    73ae:	9900      	ldr	r1, [sp, #0]
    73b0:	6900      	ldr	r0, [r0, #16]
    73b2:	4288      	cmp	r0, r1
    73b4:	d104      	bne.n	73c0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    73b6:	4608      	mov	r0, r1
    73b8:	f7ff ff8a 	bl	72d0 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q>
    73bc:	9000      	str	r0, [sp, #0]
    73be:	e004      	b.n	73ca <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x62>
    73c0:	a801      	add	r0, sp, #4
    73c2:	f7fd fed9 	bl	5178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    73c6:	0005      	movs	r5, r0
    73c8:	d0ec      	beq.n	73a4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3c>
    73ca:	1e64      	subs	r4, r4, #1
    73cc:	2c00      	cmp	r4, #0
    73ce:	dd01      	ble.n	73d4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x6c>
    73d0:	2d00      	cmp	r5, #0
    73d2:	d0e1      	beq.n	7398 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x30>
    73d4:	2000      	movs	r0, #0
    73d6:	f7fd fe83 	bl	50e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    73da:	b100      	cbz	r0, 73de <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x76>
    73dc:	b155      	cbz	r5, 73f4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x8c>
    73de:	9800      	ldr	r0, [sp, #0]
    73e0:	f7ff ff8c 	bl	72fc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    73e4:	1e76      	subs	r6, r6, #1
    73e6:	d001      	beq.n	73ec <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x84>
    73e8:	2800      	cmp	r0, #0
    73ea:	d0c6      	beq.n	737a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x12>
    73ec:	9800      	ldr	r0, [sp, #0]
    73ee:	b004      	add	sp, #16
    73f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    73f4:	2152      	movs	r1, #82	; 0x52
    73f6:	200f      	movs	r0, #15
    73f8:	f7fd fc8e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73fc:	abd7aeaa 	.word	0xabd7aeaa
    7400:	10204115 	.word	0x10204115

00007404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    7404:	4801      	ldr	r0, [pc, #4]	; (740c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    7406:	6840      	ldr	r0, [r0, #4]
    7408:	3080      	adds	r0, #128	; 0x80
    740a:	4770      	bx	lr
    740c:	200000ec 	.word	0x200000ec

00007410 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    7410:	b510      	push	{r4, lr}
    7412:	4c1f      	ldr	r4, [pc, #124]	; (7490 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x80>)
    7414:	6860      	ldr	r0, [r4, #4]
    7416:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    741a:	f007 ff89 	bl	f330 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    741e:	6861      	ldr	r1, [r4, #4]
    7420:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    7424:	3132      	adds	r1, #50	; 0x32
    7426:	f7fe fabd 	bl	59a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    742a:	6860      	ldr	r0, [r4, #4]
    742c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    7430:	f007 ff85 	bl	f33e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    7434:	6861      	ldr	r1, [r4, #4]
    7436:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
    743a:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    743e:	3132      	adds	r1, #50	; 0x32
    7440:	f007 ff62 	bl	f308 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    7444:	b930      	cbnz	r0, 7454 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    7446:	6861      	ldr	r1, [r4, #4]
    7448:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    744c:	3132      	adds	r1, #50	; 0x32
    744e:	f007 ff64 	bl	f31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    7452:	b108      	cbz	r0, 7458 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    7454:	2101      	movs	r1, #1
    7456:	e000      	b.n	745a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    7458:	2100      	movs	r1, #0
    745a:	6860      	ldr	r0, [r4, #4]
    745c:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
    7460:	b919      	cbnz	r1, 746a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    7462:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
    7466:	2900      	cmp	r1, #0
    7468:	d010      	beq.n	748c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7c>
    746a:	2100      	movs	r1, #0
    746c:	6781      	str	r1, [r0, #120]	; 0x78
    746e:	f005 fee6 	bl	d23e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7472:	6861      	ldr	r1, [r4, #4]
    7474:	6448      	str	r0, [r1, #68]	; 0x44
    7476:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    747a:	b110      	cbz	r0, 7482 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x72>
    747c:	2000      	movs	r0, #0
    747e:	f7ff f883 	bl	6588 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    7482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7486:	2000      	movs	r0, #0
    7488:	f000 bddc 	b.w	8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    748c:	bd10      	pop	{r4, pc}
    748e:	0000      	.short	0x0000
    7490:	200000ec 	.word	0x200000ec

00007494 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    7494:	b510      	push	{r4, lr}
    7496:	4c09      	ldr	r4, [pc, #36]	; (74bc <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x28>)
    7498:	2803      	cmp	r0, #3
    749a:	6864      	ldr	r4, [r4, #4]
    749c:	d109      	bne.n	74b2 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    749e:	63e1      	str	r1, [r4, #60]	; 0x3c
    74a0:	b13b      	cbz	r3, 74b2 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    74a2:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    74a6:	6819      	ldr	r1, [r3, #0]
    74a8:	f8c4 104d 	str.w	r1, [r4, #77]	; 0x4d
    74ac:	8899      	ldrh	r1, [r3, #4]
    74ae:	f8a4 1051 	strh.w	r1, [r4, #81]	; 0x51
    74b2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    74b6:	2000      	movs	r0, #0
    74b8:	bd10      	pop	{r4, pc}
    74ba:	0000      	.short	0x0000
    74bc:	200000ec 	.word	0x200000ec

000074c0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    74c0:	4807      	ldr	r0, [pc, #28]	; (74e0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x20>)
    74c2:	b508      	push	{r3, lr}
    74c4:	6840      	ldr	r0, [r0, #4]
    74c6:	7801      	ldrb	r1, [r0, #0]
    74c8:	f88d 1000 	strb.w	r1, [sp]
    74cc:	9900      	ldr	r1, [sp, #0]
    74ce:	9100      	str	r1, [sp, #0]
    74d0:	f89d 1000 	ldrb.w	r1, [sp]
    74d4:	b109      	cbz	r1, 74da <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x1a>
    74d6:	8880      	ldrh	r0, [r0, #4]
    74d8:	bd08      	pop	{r3, pc}
    74da:	f64f 70ff 	movw	r0, #65535	; 0xffff
    74de:	bd08      	pop	{r3, pc}
    74e0:	200000ec 	.word	0x200000ec

000074e4 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q>:
    74e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74e6:	4604      	mov	r4, r0
    74e8:	f007 ff72 	bl	f3d0 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>
    74ec:	bb48      	cbnz	r0, 7542 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    74ee:	4e17      	ldr	r6, [pc, #92]	; (754c <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x68>)
    74f0:	6870      	ldr	r0, [r6, #4]
    74f2:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    74f6:	f88d 1000 	strb.w	r1, [sp]
    74fa:	9900      	ldr	r1, [sp, #0]
    74fc:	9100      	str	r1, [sp, #0]
    74fe:	f89d 1000 	ldrb.w	r1, [sp]
    7502:	2500      	movs	r5, #0
    7504:	b139      	cbz	r1, 7516 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x32>
    7506:	7065      	strb	r5, [r4, #1]
    7508:	2107      	movs	r1, #7
    750a:	7021      	strb	r1, [r4, #0]
    750c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    750e:	6061      	str	r1, [r4, #4]
    7510:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
    7514:	e015      	b.n	7542 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    7516:	4620      	mov	r0, r4
    7518:	f000 f9d0 	bl	78bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    751c:	b988      	cbnz	r0, 7542 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    751e:	6870      	ldr	r0, [r6, #4]
    7520:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
    7524:	f88d 1000 	strb.w	r1, [sp]
    7528:	9900      	ldr	r1, [sp, #0]
    752a:	9100      	str	r1, [sp, #0]
    752c:	f89d 1000 	ldrb.w	r1, [sp]
    7530:	b149      	cbz	r1, 7546 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x62>
    7532:	7065      	strb	r5, [r4, #1]
    7534:	2118      	movs	r1, #24
    7536:	7021      	strb	r1, [r4, #0]
    7538:	f8d0 102a 	ldr.w	r1, [r0, #42]	; 0x2a
    753c:	6061      	str	r1, [r4, #4]
    753e:	300a      	adds	r0, #10
    7540:	7785      	strb	r5, [r0, #30]
    7542:	2001      	movs	r0, #1
    7544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7546:	2000      	movs	r0, #0
    7548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    754a:	0000      	.short	0x0000
    754c:	200000ec 	.word	0x200000ec

00007550 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    7550:	4902      	ldr	r1, [pc, #8]	; (755c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    7552:	6849      	ldr	r1, [r1, #4]
    7554:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
    7558:	2000      	movs	r0, #0
    755a:	4770      	bx	lr
    755c:	200000ec 	.word	0x200000ec

00007560 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    7560:	4809      	ldr	r0, [pc, #36]	; (7588 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x28>)
    7562:	6841      	ldr	r1, [r0, #4]
    7564:	6d48      	ldr	r0, [r1, #84]	; 0x54
    7566:	b168      	cbz	r0, 7584 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x24>
    7568:	f101 0059 	add.w	r0, r1, #89	; 0x59
    756c:	2201      	movs	r2, #1
    756e:	7002      	strb	r2, [r0, #0]
    7570:	2300      	movs	r3, #0
    7572:	654b      	str	r3, [r1, #84]	; 0x54
    7574:	7003      	strb	r3, [r0, #0]
    7576:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    757a:	4082      	lsls	r2, r0
    757c:	4803      	ldr	r0, [pc, #12]	; (758c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    757e:	6002      	str	r2, [r0, #0]
    7580:	2000      	movs	r0, #0
    7582:	4770      	bx	lr
    7584:	200c      	movs	r0, #12
    7586:	4770      	bx	lr
    7588:	200000ec 	.word	0x200000ec
    758c:	4001f508 	.word	0x4001f508

00007590 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    7590:	4909      	ldr	r1, [pc, #36]	; (75b8 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x28>)
    7592:	b510      	push	{r4, lr}
    7594:	6088      	str	r0, [r1, #8]
    7596:	68c8      	ldr	r0, [r1, #12]
    7598:	b150      	cbz	r0, 75b0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x20>
    759a:	f000 ff55 	bl	8448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    759e:	f000 f885 	bl	76ac <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    75a2:	2800      	cmp	r0, #0
    75a4:	d007      	beq.n	75b6 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x26>
    75a6:	f640 0169 	movw	r1, #2153	; 0x869
    75aa:	2032      	movs	r0, #50	; 0x32
    75ac:	f7fd fbb4 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75b0:	f640 0165 	movw	r1, #2149	; 0x865
    75b4:	e7f9      	b.n	75aa <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x1a>
    75b6:	bd10      	pop	{r4, pc}
    75b8:	200000ec 	.word	0x200000ec

000075bc <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    75bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75c0:	4c0f      	ldr	r4, [pc, #60]	; (7600 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    75c2:	4605      	mov	r5, r0
    75c4:	4616      	mov	r6, r2
    75c6:	6860      	ldr	r0, [r4, #4]
    75c8:	460f      	mov	r7, r1
    75ca:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    75ce:	f007 feb6 	bl	f33e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    75d2:	b158      	cbz	r0, 75ec <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    75d4:	b955      	cbnz	r5, 75ec <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    75d6:	4638      	mov	r0, r7
    75d8:	f007 feaa 	bl	f330 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    75dc:	4631      	mov	r1, r6
    75de:	f007 f944 	bl	e86a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    75e2:	2808      	cmp	r0, #8
    75e4:	d002      	beq.n	75ec <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    75e6:	2001      	movs	r0, #1
    75e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75ec:	6860      	ldr	r0, [r4, #4]
    75ee:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    75f2:	f007 fe9d 	bl	f330 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    75f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    75fa:	f7fe b9ff 	b.w	59fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    75fe:	0000      	.short	0x0000
    7600:	200000ec 	.word	0x200000ec

00007604 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    7604:	b570      	push	{r4, r5, r6, lr}
    7606:	4c13      	ldr	r4, [pc, #76]	; (7654 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    7608:	4615      	mov	r5, r2
    760a:	460e      	mov	r6, r1
    760c:	2800      	cmp	r0, #0
    760e:	d016      	beq.n	763e <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    7610:	f04f 0200 	mov.w	r2, #0
    7614:	6861      	ldr	r1, [r4, #4]
    7616:	f801 2f39 	strb.w	r2, [r1, #57]!
    761a:	7248      	strb	r0, [r1, #9]
    761c:	f04f 0008 	mov.w	r0, #8
    7620:	f881 002e 	strb.w	r0, [r1, #46]	; 0x2e
    7624:	d114      	bne.n	7650 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    7626:	4630      	mov	r0, r6
    7628:	f007 fe82 	bl	f330 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    762c:	4629      	mov	r1, r5
    762e:	f007 f91c 	bl	e86a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7632:	6861      	ldr	r1, [r4, #4]
    7634:	2808      	cmp	r0, #8
    7636:	f881 0067 	strb.w	r0, [r1, #103]	; 0x67
    763a:	d003      	beq.n	7644 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    763c:	e008      	b.n	7650 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    763e:	f04f 0201 	mov.w	r2, #1
    7642:	e7e7      	b.n	7614 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    7644:	4630      	mov	r0, r6
    7646:	f007 fe7a 	bl	f33e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    764a:	b108      	cbz	r0, 7650 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    764c:	2012      	movs	r0, #18
    764e:	bd70      	pop	{r4, r5, r6, pc}
    7650:	2000      	movs	r0, #0
    7652:	bd70      	pop	{r4, r5, r6, pc}
    7654:	200000ec 	.word	0x200000ec

00007658 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    7658:	4902      	ldr	r1, [pc, #8]	; (7664 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    765a:	4801      	ldr	r0, [pc, #4]	; (7660 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    765c:	60c8      	str	r0, [r1, #12]
    765e:	4770      	bx	lr
    7660:	0000868c 	.word	0x0000868c
    7664:	200000ec 	.word	0x200000ec

00007668 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    7668:	4902      	ldr	r1, [pc, #8]	; (7674 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    766a:	6849      	ldr	r1, [r1, #4]
    766c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    7670:	4770      	bx	lr
    7672:	0000      	.short	0x0000
    7674:	200000ec 	.word	0x200000ec

00007678 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    7678:	b570      	push	{r4, r5, r6, lr}
    767a:	4605      	mov	r5, r0
    767c:	f7fd ff78 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7680:	4604      	mov	r4, r0
    7682:	f7fd ff7b 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7686:	4621      	mov	r1, r4
    7688:	f007 fea0 	bl	f3cc <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    768c:	0001      	movs	r1, r0
    768e:	d006      	beq.n	769e <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    7690:	4805      	ldr	r0, [pc, #20]	; (76a8 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    7692:	68c0      	ldr	r0, [r0, #12]
    7694:	6802      	ldr	r2, [r0, #0]
    7696:	4628      	mov	r0, r5
    7698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    769c:	4710      	bx	r2
    769e:	f640 1161 	movw	r1, #2401	; 0x961
    76a2:	2032      	movs	r0, #50	; 0x32
    76a4:	f7fd fb38 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76a8:	200000ec 	.word	0x200000ec

000076ac <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    76ac:	b570      	push	{r4, r5, r6, lr}
    76ae:	4d19      	ldr	r5, [pc, #100]	; (7714 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    76b0:	6868      	ldr	r0, [r5, #4]
    76b2:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    76b6:	2901      	cmp	r1, #1
    76b8:	d004      	beq.n	76c4 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    76ba:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    76be:	b108      	cbz	r0, 76c4 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    76c0:	200c      	movs	r0, #12
    76c2:	bd70      	pop	{r4, r5, r6, pc}
    76c4:	f7fd ff7e 	bl	55c4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    76c8:	f007 fee6 	bl	f498 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>
    76cc:	6868      	ldr	r0, [r5, #4]
    76ce:	2400      	movs	r4, #0
    76d0:	7004      	strb	r4, [r0, #0]
    76d2:	f100 0122 	add.w	r1, r0, #34	; 0x22
    76d6:	700c      	strb	r4, [r1, #0]
    76d8:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    76dc:	f000 f8b4 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    76e0:	6868      	ldr	r0, [r5, #4]
    76e2:	2201      	movs	r2, #1
    76e4:	2107      	movs	r1, #7
    76e6:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
    76ea:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    76ee:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    76f2:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
    76f6:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
    76fa:	f880 407d 	strb.w	r4, [r0, #125]	; 0x7d
    76fe:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    7702:	f100 0159 	add.w	r1, r0, #89	; 0x59
    7706:	700a      	strb	r2, [r1, #0]
    7708:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    770c:	6544      	str	r4, [r0, #84]	; 0x54
    770e:	700c      	strb	r4, [r1, #0]
    7710:	2000      	movs	r0, #0
    7712:	bd70      	pop	{r4, r5, r6, pc}
    7714:	200000ec 	.word	0x200000ec

00007718 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    7718:	4805      	ldr	r0, [pc, #20]	; (7730 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    771a:	b510      	push	{r4, lr}
    771c:	6840      	ldr	r0, [r0, #4]
    771e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    7722:	f007 fe05 	bl	f330 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    7726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    772a:	f7fe b967 	b.w	59fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    772e:	0000      	.short	0x0000
    7730:	200000ec 	.word	0x200000ec

00007734 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    7734:	b140      	cbz	r0, 7748 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    7736:	2802      	cmp	r0, #2
    7738:	d006      	beq.n	7748 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    773a:	2200      	movs	r2, #0
    773c:	4903      	ldr	r1, [pc, #12]	; (774c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    773e:	6849      	ldr	r1, [r1, #4]
    7740:	f801 2f39 	strb.w	r2, [r1, #57]!
    7744:	7208      	strb	r0, [r1, #8]
    7746:	4770      	bx	lr
    7748:	2201      	movs	r2, #1
    774a:	e7f7      	b.n	773c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    774c:	200000ec 	.word	0x200000ec

00007750 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    7750:	4902      	ldr	r1, [pc, #8]	; (775c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    7752:	6849      	ldr	r1, [r1, #4]
    7754:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    7758:	4770      	bx	lr
    775a:	0000      	.short	0x0000
    775c:	200000ec 	.word	0x200000ec

00007760 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    7760:	b510      	push	{r4, lr}
    7762:	4604      	mov	r4, r0
    7764:	7800      	ldrb	r0, [r0, #0]
    7766:	07c0      	lsls	r0, r0, #31
    7768:	d007      	beq.n	777a <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x1a>
    776a:	2300      	movs	r3, #0
    776c:	7860      	ldrb	r0, [r4, #1]
    776e:	461a      	mov	r2, r3
    7770:	4619      	mov	r1, r3
    7772:	f7ff fe8f 	bl	7494 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    7776:	2800      	cmp	r0, #0
    7778:	d10c      	bne.n	7794 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>
    777a:	4b07      	ldr	r3, [pc, #28]	; (7798 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x38>)
    777c:	78a0      	ldrb	r0, [r4, #2]
    777e:	6859      	ldr	r1, [r3, #4]
    7780:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    7784:	78e0      	ldrb	r0, [r4, #3]
    7786:	f7ff ffd5 	bl	7734 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    778a:	6859      	ldr	r1, [r3, #4]
    778c:	7920      	ldrb	r0, [r4, #4]
    778e:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    7792:	2000      	movs	r0, #0
    7794:	bd10      	pop	{r4, pc}
    7796:	0000      	.short	0x0000
    7798:	200000ec 	.word	0x200000ec

0000779c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    779c:	4801      	ldr	r0, [pc, #4]	; (77a4 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    779e:	68c0      	ldr	r0, [r0, #12]
    77a0:	6840      	ldr	r0, [r0, #4]
    77a2:	4700      	bx	r0
    77a4:	200000ec 	.word	0x200000ec

000077a8 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    77a8:	b510      	push	{r4, lr}
    77aa:	2000      	movs	r0, #0
    77ac:	f000 fc70 	bl	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    77b0:	f000 f84a 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    77b4:	f000 fe48 	bl	8448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    77b8:	4803      	ldr	r0, [pc, #12]	; (77c8 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x20>)
    77ba:	6840      	ldr	r0, [r0, #4]
    77bc:	2100      	movs	r1, #0
    77be:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    77c2:	4608      	mov	r0, r1
    77c4:	bd10      	pop	{r4, pc}
    77c6:	0000      	.short	0x0000
    77c8:	200000ec 	.word	0x200000ec

000077cc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    77cc:	b510      	push	{r4, lr}
    77ce:	f000 f951 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    77d2:	4909      	ldr	r1, [pc, #36]	; (77f8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x2c>)
    77d4:	2201      	movs	r2, #1
    77d6:	b130      	cbz	r0, 77e6 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1a>
    77d8:	6848      	ldr	r0, [r1, #4]
    77da:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
    77de:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    77e0:	881b      	ldrh	r3, [r3, #0]
    77e2:	8583      	strh	r3, [r0, #44]	; 0x2c
    77e4:	e004      	b.n	77f0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x24>
    77e6:	684b      	ldr	r3, [r1, #4]
    77e8:	2000      	movs	r0, #0
    77ea:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
    77ee:	8598      	strh	r0, [r3, #44]	; 0x2c
    77f0:	6848      	ldr	r0, [r1, #4]
    77f2:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    77f6:	bd10      	pop	{r4, pc}
    77f8:	200000ec 	.word	0x200000ec

000077fc <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    77fc:	4802      	ldr	r0, [pc, #8]	; (7808 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    77fe:	6840      	ldr	r0, [r0, #4]
    7800:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7804:	4770      	bx	lr
    7806:	0000      	.short	0x0000
    7808:	200000ec 	.word	0x200000ec

0000780c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    780c:	b510      	push	{r4, lr}
    780e:	f000 f931 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    7812:	490c      	ldr	r1, [pc, #48]	; (7844 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    7814:	b128      	cbz	r0, 7822 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    7816:	6848      	ldr	r0, [r1, #4]
    7818:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
    781c:	2801      	cmp	r0, #1
    781e:	d00e      	beq.n	783e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    7820:	e00c      	b.n	783c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    7822:	6849      	ldr	r1, [r1, #4]
    7824:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    7828:	2801      	cmp	r0, #1
    782a:	d001      	beq.n	7830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    782c:	2802      	cmp	r0, #2
    782e:	d105      	bne.n	783c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    7830:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    7834:	2801      	cmp	r0, #1
    7836:	d003      	beq.n	7840 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    7838:	2803      	cmp	r0, #3
    783a:	d001      	beq.n	7840 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    783c:	2000      	movs	r0, #0
    783e:	bd10      	pop	{r4, pc}
    7840:	2001      	movs	r0, #1
    7842:	bd10      	pop	{r4, pc}
    7844:	200000ec 	.word	0x200000ec
    7848:	b510      	push	{r4, lr}
    784a:	4c07      	ldr	r4, [pc, #28]	; (7868 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    784c:	6860      	ldr	r0, [r4, #4]
    784e:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    7852:	2800      	cmp	r0, #0
    7854:	d007      	beq.n	7866 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    7856:	f004 fe19 	bl	c48c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    785a:	f004 fbfb 	bl	c054 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    785e:	6861      	ldr	r1, [r4, #4]
    7860:	2000      	movs	r0, #0
    7862:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    7866:	bd10      	pop	{r4, pc}
    7868:	200000ec 	.word	0x200000ec
    786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7870:	4d10      	ldr	r5, [pc, #64]	; (78b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    7872:	4606      	mov	r6, r0
    7874:	460f      	mov	r7, r1
    7876:	6868      	ldr	r0, [r5, #4]
    7878:	490f      	ldr	r1, [pc, #60]	; (78b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    787a:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    787e:	5c0c      	ldrb	r4, [r1, r0]
    7880:	4620      	mov	r0, r4
    7882:	f005 f967 	bl	cb54 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    7886:	6868      	ldr	r0, [r5, #4]
    7888:	2101      	movs	r1, #1
    788a:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74
    788e:	2025      	movs	r0, #37	; 0x25
    7890:	f008 ffc2 	bl	10818 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    7894:	4638      	mov	r0, r7
    7896:	f005 f86f 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    789a:	f04f 0101 	mov.w	r1, #1
    789e:	4608      	mov	r0, r1
    78a0:	b126      	cbz	r6, 78ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    78a2:	f004 fea5 	bl	c5f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    78a6:	b918      	cbnz	r0, 78b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    78a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78ac:	f004 fe54 	bl	c558 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    78b0:	2001      	movs	r0, #1
    78b2:	e7f9      	b.n	78a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    78b4:	200000ec 	.word	0x200000ec
    78b8:	00010954 	.word	0x00010954
    78bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78be:	4e20      	ldr	r6, [pc, #128]	; (7940 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
    78c0:	4604      	mov	r4, r0
    78c2:	6870      	ldr	r0, [r6, #4]
    78c4:	7801      	ldrb	r1, [r0, #0]
    78c6:	f88d 1000 	strb.w	r1, [sp]
    78ca:	9900      	ldr	r1, [sp, #0]
    78cc:	9100      	str	r1, [sp, #0]
    78ce:	f89d 1000 	ldrb.w	r1, [sp]
    78d2:	b389      	cbz	r1, 7938 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
    78d4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    78d6:	6882      	ldr	r2, [r0, #8]
    78d8:	f841 2f03 	str.w	r2, [r1, #3]!
    78dc:	8982      	ldrh	r2, [r0, #12]
    78de:	808a      	strh	r2, [r1, #4]
    78e0:	79c0      	ldrb	r0, [r0, #7]
    78e2:	f007 fd25 	bl	f330 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    78e6:	6871      	ldr	r1, [r6, #4]
    78e8:	2500      	movs	r5, #0
    78ea:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    78ec:	1c89      	adds	r1, r1, #2
    78ee:	7090      	strb	r0, [r2, #2]
    78f0:	7065      	strb	r5, [r4, #1]
    78f2:	2014      	movs	r0, #20
    78f4:	7020      	strb	r0, [r4, #0]
    78f6:	2220      	movs	r2, #32
    78f8:	1d20      	adds	r0, r4, #4
    78fa:	f005 fe15 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    78fe:	4a11      	ldr	r2, [pc, #68]	; (7944 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>)
    7900:	7225      	strb	r5, [r4, #8]
    7902:	2301      	movs	r3, #1
    7904:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7906:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    790a:	6871      	ldr	r1, [r6, #4]
    790c:	700d      	strb	r5, [r1, #0]
    790e:	f101 0028 	add.w	r0, r1, #40	; 0x28
    7912:	7005      	strb	r5, [r0, #0]
    7914:	88e0      	ldrh	r0, [r4, #6]
    7916:	8490      	strh	r0, [r2, #36]	; 0x24
    7918:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    791a:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    791e:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
    7922:	4610      	mov	r0, r2
    7924:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    7928:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    792a:	8800      	ldrh	r0, [r0, #0]
    792c:	f7fd fdf2 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7930:	f006 fd82 	bl	e438 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7934:	2001      	movs	r0, #1
    7936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7938:	e7ff      	b.n	793a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e>
    793a:	2000      	movs	r0, #0
    793c:	e7fb      	b.n	7936 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12a>
    793e:	0000      	.short	0x0000
    7940:	200000ec 	.word	0x200000ec
    7944:	20001014 	.word	0x20001014
    7948:	b570      	push	{r4, r5, r6, lr}
    794a:	4c1d      	ldr	r4, [pc, #116]	; (79c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b4>)
    794c:	4605      	mov	r5, r0
    794e:	2907      	cmp	r1, #7
    7950:	6860      	ldr	r0, [r4, #4]
    7952:	f890 6039 	ldrb.w	r6, [r0, #57]	; 0x39
    7956:	d301      	bcc.n	795c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x150>
    7958:	2000      	movs	r0, #0
    795a:	bd70      	pop	{r4, r5, r6, pc}
    795c:	7c68      	ldrb	r0, [r5, #17]
    795e:	6869      	ldr	r1, [r5, #4]
    7960:	f007 fcdb 	bl	f31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    7964:	6861      	ldr	r1, [r4, #4]
    7966:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    796a:	b141      	cbz	r1, 797e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x172>
    796c:	b138      	cbz	r0, 797e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x172>
    796e:	f006 ff72 	bl	e856 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7972:	4601      	mov	r1, r0
    7974:	6860      	ldr	r0, [r4, #4]
    7976:	f800 1f64 	strb.w	r1, [r0, #100]!
    797a:	2101      	movs	r1, #1
    797c:	71c1      	strb	r1, [r0, #7]
    797e:	6863      	ldr	r3, [r4, #4]
    7980:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    7984:	28ff      	cmp	r0, #255	; 0xff
    7986:	d012      	beq.n	79ae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a2>
    7988:	f883 0065 	strb.w	r0, [r3, #101]	; 0x65
    798c:	f7fe feaa 	bl	66e4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7990:	4330      	orrs	r0, r6
    7992:	6869      	ldr	r1, [r5, #4]
    7994:	2900      	cmp	r1, #0
    7996:	d0e0      	beq.n	795a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x14e>
    7998:	6861      	ldr	r1, [r4, #4]
    799a:	7c6a      	ldrb	r2, [r5, #17]
    799c:	f881 2075 	strb.w	r2, [r1, #117]	; 0x75
    79a0:	686a      	ldr	r2, [r5, #4]
    79a2:	6813      	ldr	r3, [r2, #0]
    79a4:	f841 3f6e 	str.w	r3, [r1, #110]!
    79a8:	8892      	ldrh	r2, [r2, #4]
    79aa:	808a      	strh	r2, [r1, #4]
    79ac:	bd70      	pop	{r4, r5, r6, pc}
    79ae:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
    79b2:	7c68      	ldrb	r0, [r5, #17]
    79b4:	3364      	adds	r3, #100	; 0x64
    79b6:	6869      	ldr	r1, [r5, #4]
    79b8:	f7fe ff10 	bl	67dc <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY>
    79bc:	e7e9      	b.n	7992 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x186>
    79be:	0000      	.short	0x0000
    79c0:	200000ec 	.word	0x200000ec
    79c4:	b510      	push	{r4, lr}
    79c6:	4915      	ldr	r1, [pc, #84]	; (7a1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x210>)
    79c8:	6842      	ldr	r2, [r0, #4]
    79ca:	6849      	ldr	r1, [r1, #4]
    79cc:	7813      	ldrb	r3, [r2, #0]
    79ce:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
    79d2:	42a3      	cmp	r3, r4
    79d4:	d11f      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    79d6:	7853      	ldrb	r3, [r2, #1]
    79d8:	f891 406f 	ldrb.w	r4, [r1, #111]	; 0x6f
    79dc:	42a3      	cmp	r3, r4
    79de:	d11a      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    79e0:	7893      	ldrb	r3, [r2, #2]
    79e2:	f891 4070 	ldrb.w	r4, [r1, #112]	; 0x70
    79e6:	42a3      	cmp	r3, r4
    79e8:	d115      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    79ea:	78d3      	ldrb	r3, [r2, #3]
    79ec:	f891 4071 	ldrb.w	r4, [r1, #113]	; 0x71
    79f0:	42a3      	cmp	r3, r4
    79f2:	d110      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    79f4:	7913      	ldrb	r3, [r2, #4]
    79f6:	f891 4072 	ldrb.w	r4, [r1, #114]	; 0x72
    79fa:	42a3      	cmp	r3, r4
    79fc:	d10b      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    79fe:	7952      	ldrb	r2, [r2, #5]
    7a00:	f891 3073 	ldrb.w	r3, [r1, #115]	; 0x73
    7a04:	429a      	cmp	r2, r3
    7a06:	d106      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    7a08:	7c40      	ldrb	r0, [r0, #17]
    7a0a:	f891 1075 	ldrb.w	r1, [r1, #117]	; 0x75
    7a0e:	4288      	cmp	r0, r1
    7a10:	d101      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    7a12:	2001      	movs	r0, #1
    7a14:	bd10      	pop	{r4, pc}
    7a16:	2000      	movs	r0, #0
    7a18:	bd10      	pop	{r4, pc}
    7a1a:	0000      	.short	0x0000
    7a1c:	200000ec 	.word	0x200000ec
    7a20:	b530      	push	{r4, r5, lr}
    7a22:	7801      	ldrb	r1, [r0, #0]
    7a24:	b08b      	sub	sp, #44	; 0x2c
    7a26:	f001 040f 	and.w	r4, r1, #15
    7a2a:	4622      	mov	r2, r4
    7a2c:	a901      	add	r1, sp, #4
    7a2e:	f000 feb9 	bl	87a4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    7a32:	a801      	add	r0, sp, #4
    7a34:	f7ff ffc6 	bl	79c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b8>
    7a38:	4605      	mov	r5, r0
    7a3a:	f004 fd45 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7a3e:	f000 fb41 	bl	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    7a42:	2c04      	cmp	r4, #4
    7a44:	d111      	bne.n	7a6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25e>
    7a46:	b185      	cbz	r5, 7a6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25e>
    7a48:	a80a      	add	r0, sp, #40	; 0x28
    7a4a:	f000 fb47 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7a4e:	f99d 0028 	ldrsb.w	r0, [sp, #40]	; 0x28
    7a52:	9000      	str	r0, [sp, #0]
    7a54:	4806      	ldr	r0, [pc, #24]	; (7a70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x264>)
    7a56:	6840      	ldr	r0, [r0, #4]
    7a58:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    7a5c:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    7a60:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
    7a64:	a801      	add	r0, sp, #4
    7a66:	f007 fd19 	bl	f49c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    7a6a:	b00b      	add	sp, #44	; 0x2c
    7a6c:	2005      	movs	r0, #5
    7a6e:	bd30      	pop	{r4, r5, pc}
    7a70:	200000ec 	.word	0x200000ec
    7a74:	4804      	ldr	r0, [pc, #16]	; (7a88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x27c>)
    7a76:	6840      	ldr	r0, [r0, #4]
    7a78:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7a7c:	2803      	cmp	r0, #3
    7a7e:	d001      	beq.n	7a84 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x278>
    7a80:	2000      	movs	r0, #0
    7a82:	4770      	bx	lr
    7a84:	2001      	movs	r0, #1
    7a86:	4770      	bx	lr
    7a88:	200000ec 	.word	0x200000ec
    7a8c:	4908      	ldr	r1, [pc, #32]	; (7ab0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a4>)
    7a8e:	b510      	push	{r4, lr}
    7a90:	6849      	ldr	r1, [r1, #4]
    7a92:	7c83      	ldrb	r3, [r0, #18]
    7a94:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    7a98:	429a      	cmp	r2, r3
    7a9a:	d105      	bne.n	7aa8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x29c>
    7a9c:	6880      	ldr	r0, [r0, #8]
    7a9e:	2206      	movs	r2, #6
    7aa0:	3132      	adds	r1, #50	; 0x32
    7aa2:	f005 fd2f 	bl	d504 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7aa6:	b108      	cbz	r0, 7aac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a0>
    7aa8:	2000      	movs	r0, #0
    7aaa:	bd10      	pop	{r4, pc}
    7aac:	2001      	movs	r0, #1
    7aae:	bd10      	pop	{r4, pc}
    7ab0:	200000ec 	.word	0x200000ec
    7ab4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7ab6:	4c3d      	ldr	r4, [pc, #244]	; (7bac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a0>)
    7ab8:	466f      	mov	r7, sp
    7aba:	6860      	ldr	r0, [r4, #4]
    7abc:	7801      	ldrb	r1, [r0, #0]
    7abe:	f88d 1008 	strb.w	r1, [sp, #8]
    7ac2:	9902      	ldr	r1, [sp, #8]
    7ac4:	9102      	str	r1, [sp, #8]
    7ac6:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7aca:	b111      	cbz	r1, 7ad2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c6>
    7acc:	f241 313a 	movw	r1, #4922	; 0x133a
    7ad0:	e04f      	b.n	7b72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x366>
    7ad2:	2500      	movs	r5, #0
    7ad4:	7085      	strb	r5, [r0, #2]
    7ad6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7ad8:	880a      	ldrh	r2, [r1, #0]
    7ada:	8082      	strh	r2, [r0, #4]
    7adc:	68c8      	ldr	r0, [r1, #12]
    7ade:	f006 ff4e 	bl	e97e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7ae2:	6861      	ldr	r1, [r4, #4]
    7ae4:	8348      	strh	r0, [r1, #26]
    7ae6:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    7ae8:	8a82      	ldrh	r2, [r0, #20]
    7aea:	838a      	strh	r2, [r1, #28]
    7aec:	8ac0      	ldrh	r0, [r0, #22]
    7aee:	83c8      	strh	r0, [r1, #30]
    7af0:	f881 5020 	strb.w	r5, [r1, #32]
    7af4:	4669      	mov	r1, sp
    7af6:	68a0      	ldr	r0, [r4, #8]
    7af8:	f007 fa18 	bl	ef2c <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
    7afc:	68a0      	ldr	r0, [r4, #8]
    7afe:	7800      	ldrb	r0, [r0, #0]
    7b00:	f3c0 1680 	ubfx	r6, r0, #6, #1
    7b04:	6860      	ldr	r0, [r4, #4]
    7b06:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    7b0a:	b120      	cbz	r0, 7b16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30a>
    7b0c:	4639      	mov	r1, r7
    7b0e:	4630      	mov	r0, r6
    7b10:	f007 fc03 	bl	f31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    7b14:	b940      	cbnz	r0, 7b28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x31c>
    7b16:	6860      	ldr	r0, [r4, #4]
    7b18:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    7b1c:	b160      	cbz	r0, 7b38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32c>
    7b1e:	4639      	mov	r1, r7
    7b20:	4630      	mov	r0, r6
    7b22:	f007 fbf1 	bl	f308 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    7b26:	b138      	cbz	r0, 7b38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32c>
    7b28:	6860      	ldr	r0, [r4, #4]
    7b2a:	9900      	ldr	r1, [sp, #0]
    7b2c:	f8c0 100e 	str.w	r1, [r0, #14]
    7b30:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7b34:	8241      	strh	r1, [r0, #18]
    7b36:	e003      	b.n	7b40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x334>
    7b38:	6860      	ldr	r0, [r4, #4]
    7b3a:	f8c0 500e 	str.w	r5, [r0, #14]
    7b3e:	8245      	strh	r5, [r0, #18]
    7b40:	6861      	ldr	r1, [r4, #4]
    7b42:	f891 0065 	ldrb.w	r0, [r1, #101]	; 0x65
    7b46:	28ff      	cmp	r0, #255	; 0xff
    7b48:	d016      	beq.n	7b78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36c>
    7b4a:	f101 0208 	add.w	r2, r1, #8
    7b4e:	1dc9      	adds	r1, r1, #7
    7b50:	f7fe fdae 	bl	66b0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7b54:	b158      	cbz	r0, 7b6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x362>
    7b56:	6860      	ldr	r0, [r4, #4]
    7b58:	79c1      	ldrb	r1, [r0, #7]
    7b5a:	f041 0102 	orr.w	r1, r1, #2
    7b5e:	71c1      	strb	r1, [r0, #7]
    7b60:	f8d0 106e 	ldr.w	r1, [r0, #110]	; 0x6e
    7b64:	6141      	str	r1, [r0, #20]
    7b66:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
    7b6a:	8301      	strh	r1, [r0, #24]
    7b6c:	e00f      	b.n	7b8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x382>
    7b6e:	f241 3165 	movw	r1, #4965	; 0x1365
    7b72:	2032      	movs	r0, #50	; 0x32
    7b74:	f7fd f8d0 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b78:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    7b7c:	71c8      	strb	r0, [r1, #7]
    7b7e:	f8d1 006e 	ldr.w	r0, [r1, #110]	; 0x6e
    7b82:	6088      	str	r0, [r1, #8]
    7b84:	f8b1 0072 	ldrh.w	r0, [r1, #114]	; 0x72
    7b88:	8188      	strh	r0, [r1, #12]
    7b8a:	614d      	str	r5, [r1, #20]
    7b8c:	830d      	strh	r5, [r1, #24]
    7b8e:	6860      	ldr	r0, [r4, #4]
    7b90:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    7b92:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
    7b96:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    7b9a:	2101      	movs	r1, #1
    7b9c:	7001      	strb	r1, [r0, #0]
    7b9e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7ba0:	8800      	ldrh	r0, [r0, #0]
    7ba2:	f7fd fcb7 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7ba6:	f006 fc4d 	bl	e444 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7baa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7bac:	200000ec 	.word	0x200000ec
    7bb0:	b570      	push	{r4, r5, r6, lr}
    7bb2:	4d39      	ldr	r5, [pc, #228]	; (7c98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48c>)
    7bb4:	4601      	mov	r1, r0
    7bb6:	2200      	movs	r2, #0
    7bb8:	e9d5 6001 	ldrd	r6, r0, [r5, #4]
    7bbc:	365c      	adds	r6, #92	; 0x5c
    7bbe:	8002      	strh	r2, [r0, #0]
    7bc0:	2903      	cmp	r1, #3
    7bc2:	d002      	beq.n	7bca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3be>
    7bc4:	2905      	cmp	r1, #5
    7bc6:	d004      	beq.n	7bd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c6>
    7bc8:	e056      	b.n	7c78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46c>
    7bca:	2103      	movs	r1, #3
    7bcc:	f007 f9c5 	bl	ef5a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7bd0:	e052      	b.n	7c78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46c>
    7bd2:	2105      	movs	r1, #5
    7bd4:	f007 f9c1 	bl	ef5a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7bd8:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    7bdc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7bde:	6909      	ldr	r1, [r1, #16]
    7be0:	f844 1f0f 	str.w	r1, [r4, #15]!
    7be4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7be6:	8b0a      	ldrh	r2, [r1, #24]
    7be8:	80a2      	strh	r2, [r4, #4]
    7bea:	7e89      	ldrb	r1, [r1, #26]
    7bec:	71a1      	strb	r1, [r4, #6]
    7bee:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7bf0:	68c1      	ldr	r1, [r0, #12]
    7bf2:	8b80      	ldrh	r0, [r0, #28]
    7bf4:	f007 f85f 	bl	ecb6 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    7bf8:	71e0      	strb	r0, [r4, #7]
    7bfa:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    7bfe:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7c00:	68c1      	ldr	r1, [r0, #12]
    7c02:	6a00      	ldr	r0, [r0, #32]
    7c04:	f007 f84c 	bl	eca0 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    7c08:	75e0      	strb	r0, [r4, #23]
    7c0a:	0a00      	lsrs	r0, r0, #8
    7c0c:	7620      	strb	r0, [r4, #24]
    7c0e:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    7c12:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7c14:	68c0      	ldr	r0, [r0, #12]
    7c16:	f006 feb2 	bl	e97e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7c1a:	7660      	strb	r0, [r4, #25]
    7c1c:	0a00      	lsrs	r0, r0, #8
    7c1e:	76a0      	strb	r0, [r4, #26]
    7c20:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    7c24:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7c26:	8a89      	ldrh	r1, [r1, #20]
    7c28:	76e1      	strb	r1, [r4, #27]
    7c2a:	0a09      	lsrs	r1, r1, #8
    7c2c:	7721      	strb	r1, [r4, #28]
    7c2e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7c30:	8ac9      	ldrh	r1, [r1, #22]
    7c32:	7761      	strb	r1, [r4, #29]
    7c34:	0a09      	lsrs	r1, r1, #8
    7c36:	77a1      	strb	r1, [r4, #30]
    7c38:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7c3a:	f851 2f8e 	ldr.w	r2, [r1, #142]!
    7c3e:	f8c4 201f 	str.w	r2, [r4, #31]
    7c42:	7909      	ldrb	r1, [r1, #4]
    7c44:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
    7c48:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7c4a:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    7c4e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    7c52:	f001 011f 	and.w	r1, r1, #31
    7c56:	f020 001f 	bic.w	r0, r0, #31
    7c5a:	4308      	orrs	r0, r1
    7c5c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    7c60:	f004 f9da 	bl	c018 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    7c64:	2807      	cmp	r0, #7
    7c66:	d900      	bls.n	7c6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x45e>
    7c68:	2007      	movs	r0, #7
    7c6a:	f814 1f24 	ldrb.w	r1, [r4, #36]!
    7c6e:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
    7c72:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    7c76:	7021      	strb	r1, [r4, #0]
    7c78:	f106 0112 	add.w	r1, r6, #18
    7c7c:	68a8      	ldr	r0, [r5, #8]
    7c7e:	f007 f987 	bl	ef90 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7c82:	7e71      	ldrb	r1, [r6, #25]
    7c84:	68a8      	ldr	r0, [r5, #8]
    7c86:	f007 f989 	bl	ef9c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7c8a:	f000 fba5 	bl	83d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d8>
    7c8e:	68a8      	ldr	r0, [r5, #8]
    7c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c94:	f004 be70 	b.w	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7c98:	200000ec 	.word	0x200000ec
    7c9c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    7ca0:	4f65      	ldr	r7, [pc, #404]	; (7e38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62c>)
    7ca2:	4604      	mov	r4, r0
    7ca4:	468a      	mov	sl, r1
    7ca6:	6878      	ldr	r0, [r7, #4]
    7ca8:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    7cac:	b180      	cbz	r0, 7cd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>
    7cae:	2600      	movs	r6, #0
    7cb0:	2500      	movs	r5, #0
    7cb2:	7ca0      	ldrb	r0, [r4, #18]
    7cb4:	68a1      	ldr	r1, [r4, #8]
    7cb6:	f007 fb30 	bl	f31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    7cba:	4681      	mov	r9, r0
    7cbc:	f7ff feda 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    7cc0:	b140      	cbz	r0, 7cd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    7cc2:	6878      	ldr	r0, [r7, #4]
    7cc4:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    7cc8:	b121      	cbz	r1, 7cd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    7cca:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    7cce:	e004      	b.n	7cda <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ce>
    7cd0:	2601      	movs	r6, #1
    7cd2:	e7ed      	b.n	7cb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    7cd4:	6878      	ldr	r0, [r7, #4]
    7cd6:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    7cda:	4683      	mov	fp, r0
    7cdc:	f7fe fc3a 	bl	6554 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    7ce0:	ea5f 0800 	movs.w	r8, r0
    7ce4:	d00c      	beq.n	7d00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>
    7ce6:	4658      	mov	r0, fp
    7ce8:	f7fe fc28 	bl	653c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    7cec:	b100      	cbz	r0, 7cf0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4e4>
    7cee:	2601      	movs	r6, #1
    7cf0:	f1b9 0f00 	cmp.w	r9, #0
    7cf4:	d004      	beq.n	7d00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>
    7cf6:	4640      	mov	r0, r8
    7cf8:	68a1      	ldr	r1, [r4, #8]
    7cfa:	f006 fd5f 	bl	e7bc <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    7cfe:	4605      	mov	r5, r0
    7d00:	6878      	ldr	r0, [r7, #4]
    7d02:	46b8      	mov	r8, r7
    7d04:	f890 7031 	ldrb.w	r7, [r0, #49]	; 0x31
    7d08:	b10d      	cbz	r5, 7d0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    7d0a:	f047 0702 	orr.w	r7, r7, #2
    7d0e:	f7ff feb1 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    7d12:	b3a0      	cbz	r0, 7d7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x572>
    7d14:	6860      	ldr	r0, [r4, #4]
    7d16:	f8d8 1004 	ldr.w	r1, [r8, #4]
    7d1a:	7802      	ldrb	r2, [r0, #0]
    7d1c:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    7d20:	429a      	cmp	r2, r3
    7d22:	d11f      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d24:	7842      	ldrb	r2, [r0, #1]
    7d26:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    7d2a:	429a      	cmp	r2, r3
    7d2c:	d11a      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d2e:	7882      	ldrb	r2, [r0, #2]
    7d30:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    7d34:	429a      	cmp	r2, r3
    7d36:	d115      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d38:	78c2      	ldrb	r2, [r0, #3]
    7d3a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    7d3e:	429a      	cmp	r2, r3
    7d40:	d110      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d42:	7902      	ldrb	r2, [r0, #4]
    7d44:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    7d48:	429a      	cmp	r2, r3
    7d4a:	d10b      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d4c:	7940      	ldrb	r0, [r0, #5]
    7d4e:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    7d52:	4290      	cmp	r0, r2
    7d54:	d106      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d56:	7c60      	ldrb	r0, [r4, #17]
    7d58:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
    7d5c:	4288      	cmp	r0, r1
    7d5e:	d101      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d60:	2001      	movs	r0, #1
    7d62:	e000      	b.n	7d66 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x55a>
    7d64:	2000      	movs	r0, #0
    7d66:	4f35      	ldr	r7, [pc, #212]	; (7e3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x630>)
    7d68:	4681      	mov	r9, r0
    7d6a:	f897 0064 	ldrb.w	r0, [r7, #100]	; 0x64
    7d6e:	2808      	cmp	r0, #8
    7d70:	d006      	beq.n	7d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x574>
    7d72:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
    7d76:	4288      	cmp	r0, r1
    7d78:	d102      	bne.n	7d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x574>
    7d7a:	2001      	movs	r0, #1
    7d7c:	e001      	b.n	7d82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x576>
    7d7e:	e021      	b.n	7dc4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b8>
    7d80:	2000      	movs	r0, #0
    7d82:	4680      	mov	r8, r0
    7d84:	b925      	cbnz	r5, 7d90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x584>
    7d86:	b12e      	cbz	r6, 7d94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x588>
    7d88:	4620      	mov	r0, r4
    7d8a:	f7ff fe7f 	bl	7a8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    7d8e:	b108      	cbz	r0, 7d94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x588>
    7d90:	2001      	movs	r0, #1
    7d92:	e000      	b.n	7d96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x58a>
    7d94:	2000      	movs	r0, #0
    7d96:	f1ba 0f00 	cmp.w	sl, #0
    7d9a:	d009      	beq.n	7db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    7d9c:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
    7da0:	2901      	cmp	r1, #1
    7da2:	d003      	beq.n	7dac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a0>
    7da4:	b921      	cbnz	r1, 7db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    7da6:	ea59 0108 	orrs.w	r1, r9, r8
    7daa:	d001      	beq.n	7db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    7dac:	2101      	movs	r1, #1
    7dae:	e000      	b.n	7db2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a6>
    7db0:	2100      	movs	r1, #0
    7db2:	4208      	tst	r0, r1
    7db4:	d003      	beq.n	7dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b2>
    7db6:	200c      	movs	r0, #12
    7db8:	b004      	add	sp, #16
    7dba:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    7dbe:	f004 fb83 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7dc2:	e036      	b.n	7e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    7dc4:	f004 fb80 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7dc8:	f1ba 0f00 	cmp.w	sl, #0
    7dcc:	d031      	beq.n	7e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    7dce:	4620      	mov	r0, r4
    7dd0:	f7ff fe5c 	bl	7a8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    7dd4:	b900      	cbnz	r0, 7dd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5cc>
    7dd6:	b175      	cbz	r5, 7df6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ea>
    7dd8:	a803      	add	r0, sp, #12
    7dda:	f000 f97f 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7dde:	f8d8 2004 	ldr.w	r2, [r8, #4]
    7de2:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7de6:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7dea:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7dee:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7df2:	463b      	mov	r3, r7
    7df4:	e018      	b.n	7e28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61c>
    7df6:	f8d8 0004 	ldr.w	r0, [r8, #4]
    7dfa:	4645      	mov	r5, r8
    7dfc:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    7e00:	2803      	cmp	r0, #3
    7e02:	d001      	beq.n	7e08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fc>
    7e04:	2802      	cmp	r0, #2
    7e06:	d114      	bne.n	7e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    7e08:	f1b9 0f00 	cmp.w	r9, #0
    7e0c:	d011      	beq.n	7e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    7e0e:	a803      	add	r0, sp, #12
    7e10:	f000 f964 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7e14:	686a      	ldr	r2, [r5, #4]
    7e16:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7e1a:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7e1e:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7e22:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7e26:	23fe      	movs	r3, #254	; 0xfe
    7e28:	2101      	movs	r1, #1
    7e2a:	4620      	mov	r0, r4
    7e2c:	3232      	adds	r2, #50	; 0x32
    7e2e:	f000 fc43 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7e32:	2005      	movs	r0, #5
    7e34:	e7c0      	b.n	7db8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ac>
    7e36:	0000      	.short	0x0000
    7e38:	200000ec 	.word	0x200000ec
    7e3c:	20001014 	.word	0x20001014
    7e40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7e42:	4605      	mov	r5, r0
    7e44:	2900      	cmp	r1, #0
    7e46:	d06e      	beq.n	7f26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x71a>
    7e48:	4c3c      	ldr	r4, [pc, #240]	; (7f3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x730>)
    7e4a:	6860      	ldr	r0, [r4, #4]
    7e4c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7e50:	2802      	cmp	r0, #2
    7e52:	d02c      	beq.n	7eae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6a2>
    7e54:	2801      	cmp	r0, #1
    7e56:	d043      	beq.n	7ee0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d4>
    7e58:	f7ff fe0c 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    7e5c:	2800      	cmp	r0, #0
    7e5e:	d067      	beq.n	7f30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x724>
    7e60:	686a      	ldr	r2, [r5, #4]
    7e62:	6861      	ldr	r1, [r4, #4]
    7e64:	7810      	ldrb	r0, [r2, #0]
    7e66:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    7e6a:	4298      	cmp	r0, r3
    7e6c:	d14c      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7e6e:	7850      	ldrb	r0, [r2, #1]
    7e70:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    7e74:	4298      	cmp	r0, r3
    7e76:	d147      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7e78:	7890      	ldrb	r0, [r2, #2]
    7e7a:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    7e7e:	4298      	cmp	r0, r3
    7e80:	d142      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7e82:	78d0      	ldrb	r0, [r2, #3]
    7e84:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    7e88:	4298      	cmp	r0, r3
    7e8a:	d13d      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7e8c:	7910      	ldrb	r0, [r2, #4]
    7e8e:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    7e92:	4298      	cmp	r0, r3
    7e94:	d138      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7e96:	7950      	ldrb	r0, [r2, #5]
    7e98:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    7e9c:	4290      	cmp	r0, r2
    7e9e:	d133      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7ea0:	7c68      	ldrb	r0, [r5, #17]
    7ea2:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
    7ea6:	4290      	cmp	r0, r2
    7ea8:	d12e      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7eaa:	2001      	movs	r0, #1
    7eac:	e02d      	b.n	7f0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fe>
    7eae:	a803      	add	r0, sp, #12
    7eb0:	f000 f914 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7eb4:	6862      	ldr	r2, [r4, #4]
    7eb6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7eba:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7ebe:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7ec2:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7ec6:	23ff      	movs	r3, #255	; 0xff
    7ec8:	2100      	movs	r1, #0
    7eca:	4628      	mov	r0, r5
    7ecc:	3232      	adds	r2, #50	; 0x32
    7ece:	f000 fbf3 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7ed2:	6861      	ldr	r1, [r4, #4]
    7ed4:	2001      	movs	r0, #1
    7ed6:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    7eda:	200b      	movs	r0, #11
    7edc:	b004      	add	sp, #16
    7ede:	bd70      	pop	{r4, r5, r6, pc}
    7ee0:	a803      	add	r0, sp, #12
    7ee2:	f000 f8fb 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7ee6:	6862      	ldr	r2, [r4, #4]
    7ee8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7eec:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7ef0:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7ef4:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7ef8:	23ff      	movs	r3, #255	; 0xff
    7efa:	2100      	movs	r1, #0
    7efc:	4628      	mov	r0, r5
    7efe:	3232      	adds	r2, #50	; 0x32
    7f00:	f000 fbda 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7f04:	2005      	movs	r0, #5
    7f06:	e7e9      	b.n	7edc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>
    7f08:	2000      	movs	r0, #0
    7f0a:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    7f0e:	2901      	cmp	r1, #1
    7f10:	d00c      	beq.n	7f2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    7f12:	b958      	cbnz	r0, 7f2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    7f14:	490a      	ldr	r1, [pc, #40]	; (7f40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x734>)
    7f16:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    7f1a:	2808      	cmp	r0, #8
    7f1c:	d003      	beq.n	7f26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x71a>
    7f1e:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
    7f22:	4281      	cmp	r1, r0
    7f24:	d002      	beq.n	7f2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    7f26:	f004 facf 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f2a:	e7eb      	b.n	7f04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6f8>
    7f2c:	200c      	movs	r0, #12
    7f2e:	e7d5      	b.n	7edc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>
    7f30:	f640 515b 	movw	r1, #3419	; 0xd5b
    7f34:	2032      	movs	r0, #50	; 0x32
    7f36:	f7fc feef 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f3a:	0000      	.short	0x0000
    7f3c:	200000ec 	.word	0x200000ec
    7f40:	20001014 	.word	0x20001014
    7f44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7f46:	4605      	mov	r5, r0
    7f48:	b139      	cbz	r1, 7f5a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x74e>
    7f4a:	4c1c      	ldr	r4, [pc, #112]	; (7fbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7b0>)
    7f4c:	6860      	ldr	r0, [r4, #4]
    7f4e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7f52:	2802      	cmp	r0, #2
    7f54:	d004      	beq.n	7f60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x754>
    7f56:	2801      	cmp	r0, #1
    7f58:	d01b      	beq.n	7f92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x786>
    7f5a:	f004 fab5 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f5e:	e02a      	b.n	7fb6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7aa>
    7f60:	a803      	add	r0, sp, #12
    7f62:	f000 f8bb 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7f66:	6862      	ldr	r2, [r4, #4]
    7f68:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7f6c:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7f70:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7f74:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7f78:	23ff      	movs	r3, #255	; 0xff
    7f7a:	2106      	movs	r1, #6
    7f7c:	4628      	mov	r0, r5
    7f7e:	3232      	adds	r2, #50	; 0x32
    7f80:	f000 fb9a 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7f84:	6862      	ldr	r2, [r4, #4]
    7f86:	200b      	movs	r0, #11
    7f88:	2100      	movs	r1, #0
    7f8a:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    7f8e:	b004      	add	sp, #16
    7f90:	bd70      	pop	{r4, r5, r6, pc}
    7f92:	a803      	add	r0, sp, #12
    7f94:	f000 f8a2 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7f98:	6862      	ldr	r2, [r4, #4]
    7f9a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7f9e:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7fa2:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7fa6:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7faa:	23ff      	movs	r3, #255	; 0xff
    7fac:	2106      	movs	r1, #6
    7fae:	4628      	mov	r0, r5
    7fb0:	3232      	adds	r2, #50	; 0x32
    7fb2:	f000 fb81 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7fb6:	2005      	movs	r0, #5
    7fb8:	e7e9      	b.n	7f8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x782>
    7fba:	0000      	.short	0x0000
    7fbc:	200000ec 	.word	0x200000ec
    7fc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7fc2:	b389      	cbz	r1, 8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    7fc4:	2901      	cmp	r1, #1
    7fc6:	d035      	beq.n	8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>
    7fc8:	2405      	movs	r4, #5
    7fca:	2902      	cmp	r1, #2
    7fcc:	d004      	beq.n	7fd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7cc>
    7fce:	2906      	cmp	r1, #6
    7fd0:	d024      	beq.n	801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
    7fd2:	f004 fa79 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7fd6:	e01e      	b.n	8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7fd8:	4605      	mov	r5, r0
    7fda:	4616      	mov	r6, r2
    7fdc:	f004 fa74 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7fe0:	b1ce      	cbz	r6, 8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7fe2:	4e17      	ldr	r6, [pc, #92]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    7fe4:	6870      	ldr	r0, [r6, #4]
    7fe6:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7fea:	2801      	cmp	r0, #1
    7fec:	d001      	beq.n	7ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e6>
    7fee:	2802      	cmp	r0, #2
    7ff0:	d111      	bne.n	8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7ff2:	a803      	add	r0, sp, #12
    7ff4:	f000 f872 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7ff8:	6872      	ldr	r2, [r6, #4]
    7ffa:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7ffe:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    8002:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    8006:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    800a:	23ff      	movs	r3, #255	; 0xff
    800c:	2102      	movs	r1, #2
    800e:	4628      	mov	r0, r5
    8010:	3232      	adds	r2, #50	; 0x32
    8012:	f000 fb51 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    8016:	b004      	add	sp, #16
    8018:	4620      	mov	r0, r4
    801a:	bd70      	pop	{r4, r5, r6, pc}
    801c:	b004      	add	sp, #16
    801e:	4611      	mov	r1, r2
    8020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8024:	f7ff bf8e 	b.w	7f44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    8028:	b004      	add	sp, #16
    802a:	4611      	mov	r1, r2
    802c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8030:	f7ff bf06 	b.w	7e40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x634>
    8034:	b004      	add	sp, #16
    8036:	4611      	mov	r1, r2
    8038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    803c:	f7ff be2e 	b.w	7c9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x490>
    8040:	200000ec 	.word	0x200000ec
    8044:	b570      	push	{r4, r5, r6, lr}
    8046:	4c11      	ldr	r4, [pc, #68]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    8048:	4605      	mov	r5, r0
    804a:	6861      	ldr	r1, [r4, #4]
    804c:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
    8050:	2800      	cmp	r0, #0
    8052:	d019      	beq.n	8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
    8054:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    8058:	2800      	cmp	r0, #0
    805a:	d015      	beq.n	8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
    805c:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    8060:	3132      	adds	r1, #50	; 0x32
    8062:	f007 f95a 	bl	f31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    8066:	b140      	cbz	r0, 807a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7a>
    8068:	f7fe fa3e 	bl	64e8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    806c:	6861      	ldr	r1, [r4, #4]
    806e:	462a      	mov	r2, r5
    8070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8074:	3132      	adds	r1, #50	; 0x32
    8076:	f006 bb6c 	b.w	e752 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    807a:	6860      	ldr	r0, [r4, #4]
    807c:	4629      	mov	r1, r5
    807e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8082:	3032      	adds	r0, #50	; 0x32
    8084:	f006 bb54 	b.w	e730 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    8088:	bd70      	pop	{r4, r5, r6, pc}
    808a:	0000      	.short	0x0000
    808c:	200000ec 	.word	0x200000ec
    8090:	4602      	mov	r2, r0
    8092:	480b      	ldr	r0, [pc, #44]	; (80c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>)
    8094:	b082      	sub	sp, #8
    8096:	6840      	ldr	r0, [r0, #4]
    8098:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    809c:	f88d 1000 	strb.w	r1, [sp]
    80a0:	9900      	ldr	r1, [sp, #0]
    80a2:	9100      	str	r1, [sp, #0]
    80a4:	f89d 1000 	ldrb.w	r1, [sp]
    80a8:	2900      	cmp	r1, #0
    80aa:	d107      	bne.n	80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
    80ac:	6d41      	ldr	r1, [r0, #84]	; 0x54
    80ae:	2900      	cmp	r1, #0
    80b0:	d004      	beq.n	80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
    80b2:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    80b6:	b002      	add	sp, #8
    80b8:	f7fb bb0a 	b.w	36d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    80bc:	b002      	add	sp, #8
    80be:	4770      	bx	lr
    80c0:	200000ec 	.word	0x200000ec
    80c4:	b510      	push	{r4, lr}
    80c6:	4804      	ldr	r0, [pc, #16]	; (80d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>)
    80c8:	f004 fd04 	bl	cad4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    80cc:	2800      	cmp	r0, #0
    80ce:	d102      	bne.n	80d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd6>
    80d0:	4901      	ldr	r1, [pc, #4]	; (80d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>)
    80d2:	207f      	movs	r0, #127	; 0x7f
    80d4:	7008      	strb	r0, [r1, #0]
    80d6:	bd10      	pop	{r4, pc}
    80d8:	200000ec 	.word	0x200000ec
    80dc:	4a07      	ldr	r2, [pc, #28]	; (80fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>)
    80de:	b510      	push	{r4, lr}
    80e0:	f992 1000 	ldrsb.w	r1, [r2]
    80e4:	297f      	cmp	r1, #127	; 0x7f
    80e6:	d003      	beq.n	80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    80e8:	7001      	strb	r1, [r0, #0]
    80ea:	207f      	movs	r0, #127	; 0x7f
    80ec:	7010      	strb	r0, [r2, #0]
    80ee:	bd10      	pop	{r4, pc}
    80f0:	f240 3172 	movw	r1, #882	; 0x372
    80f4:	2032      	movs	r0, #50	; 0x32
    80f6:	f7fc fe0f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80fa:	0000      	.short	0x0000
    80fc:	200000ec 	.word	0x200000ec
    8100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8104:	4607      	mov	r7, r0
    8106:	f7fd fa33 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    810a:	4604      	mov	r4, r0
    810c:	f7fd fa36 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8110:	4621      	mov	r1, r4
    8112:	f007 f95b 	bl	f3cc <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    8116:	0005      	movs	r5, r0
    8118:	d012      	beq.n	8140 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x140>
    811a:	4c2d      	ldr	r4, [pc, #180]	; (81d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d0>)
    811c:	6860      	ldr	r0, [r4, #4]
    811e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    8122:	2801      	cmp	r0, #1
    8124:	d004      	beq.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    8126:	2802      	cmp	r0, #2
    8128:	d002      	beq.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    812a:	f7ff fca3 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    812e:	b150      	cbz	r0, 8146 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x146>
    8130:	f06f 0613 	mvn.w	r6, #19
    8134:	b33f      	cbz	r7, 8186 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x186>
    8136:	4628      	mov	r0, r5
    8138:	f006 fee0 	bl	eefc <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    813c:	b950      	cbnz	r0, 8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    813e:	e005      	b.n	814c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c>
    8140:	f241 310a 	movw	r1, #4874	; 0x130a
    8144:	e03a      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    8146:	f241 3110 	movw	r1, #4880	; 0x1310
    814a:	e037      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    814c:	4628      	mov	r0, r5
    814e:	f006 fef7 	bl	ef40 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    8152:	b1c0      	cbz	r0, 8186 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x186>
    8154:	6861      	ldr	r1, [r4, #4]
    8156:	4628      	mov	r0, r5
    8158:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    815c:	2a05      	cmp	r2, #5
    815e:	d202      	bcs.n	8166 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x166>
    8160:	f241 2194 	movw	r1, #4756	; 0x1294
    8164:	e02a      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    8166:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    816a:	2a0b      	cmp	r2, #11
    816c:	d302      	bcc.n	8174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>
    816e:	f241 2195 	movw	r1, #4757	; 0x1295
    8172:	e023      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    8174:	68e2      	ldr	r2, [r4, #12]
    8176:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    817a:	6952      	ldr	r2, [r2, #20]
    817c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8180:	5851      	ldr	r1, [r2, r1]
    8182:	4788      	blx	r1
    8184:	e016      	b.n	81b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b4>
    8186:	6860      	ldr	r0, [r4, #4]
    8188:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    818c:	2905      	cmp	r1, #5
    818e:	d202      	bcs.n	8196 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x196>
    8190:	f44f 5198 	mov.w	r1, #4864	; 0x1300
    8194:	e012      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    8196:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    819a:	290b      	cmp	r1, #11
    819c:	d302      	bcc.n	81a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a4>
    819e:	f241 3101 	movw	r1, #4865	; 0x1301
    81a2:	e00b      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    81a4:	68e1      	ldr	r1, [r4, #12]
    81a6:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    81aa:	6989      	ldr	r1, [r1, #24]
    81ac:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    81b0:	5808      	ldr	r0, [r1, r0]
    81b2:	4780      	blx	r0
    81b4:	280f      	cmp	r0, #15
    81b6:	d304      	bcc.n	81c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c2>
    81b8:	f241 3125 	movw	r1, #4901	; 0x1325
    81bc:	2032      	movs	r0, #50	; 0x32
    81be:	f7fc fdab 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81c2:	68e1      	ldr	r1, [r4, #12]
    81c4:	6909      	ldr	r1, [r1, #16]
    81c6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    81ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    81ce:	4700      	bx	r0
    81d0:	200000ec 	.word	0x200000ec
    81d4:	b510      	push	{r4, lr}
    81d6:	b118      	cbz	r0, 81e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e0>
    81d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    81dc:	f000 b924 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    81e0:	2900      	cmp	r1, #0
    81e2:	d01d      	beq.n	8220 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x220>
    81e4:	480f      	ldr	r0, [pc, #60]	; (8224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x224>)
    81e6:	6841      	ldr	r1, [r0, #4]
    81e8:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    81ec:	2a0b      	cmp	r2, #11
    81ee:	d202      	bcs.n	81f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f6>
    81f0:	f241 31cc 	movw	r1, #5068	; 0x13cc
    81f4:	e005      	b.n	8202 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x202>
    81f6:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    81fa:	2a0f      	cmp	r2, #15
    81fc:	d304      	bcc.n	8208 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x208>
    81fe:	f241 31cd 	movw	r1, #5069	; 0x13cd
    8202:	2032      	movs	r0, #50	; 0x32
    8204:	f7fc fd88 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8208:	68c0      	ldr	r0, [r0, #12]
    820a:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    820e:	6880      	ldr	r0, [r0, #8]
    8210:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    8214:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    8218:	5840      	ldr	r0, [r0, r1]
    821a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    821e:	4700      	bx	r0
    8220:	bd10      	pop	{r4, pc}
    8222:	0000      	.short	0x0000
    8224:	200000ec 	.word	0x200000ec
    8228:	b510      	push	{r4, lr}
    822a:	f7ff fb0d 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    822e:	f000 f90b 	bl	8448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    8232:	4805      	ldr	r0, [pc, #20]	; (8248 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x248>)
    8234:	6881      	ldr	r1, [r0, #8]
    8236:	2000      	movs	r0, #0
    8238:	f7ff fc3c 	bl	7ab4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a8>
    823c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8240:	2003      	movs	r0, #3
    8242:	f000 bc97 	b.w	8b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    8246:	0000      	.short	0x0000
    8248:	200000ec 	.word	0x200000ec
    824c:	b510      	push	{r4, lr}
    824e:	f7fd f98f 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    8252:	4604      	mov	r4, r0
    8254:	f7fd f992 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8258:	4621      	mov	r1, r4
    825a:	f007 f8b7 	bl	f3cc <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    825e:	b150      	cbz	r0, 8276 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x276>
    8260:	f004 fb8a 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8264:	2000      	movs	r0, #0
    8266:	f004 fa3f 	bl	c6e8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    826a:	4905      	ldr	r1, [pc, #20]	; (8280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>)
    826c:	2006      	movs	r0, #6
    826e:	6849      	ldr	r1, [r1, #4]
    8270:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8274:	bd10      	pop	{r4, pc}
    8276:	f240 41e7 	movw	r1, #1255	; 0x4e7
    827a:	2032      	movs	r0, #50	; 0x32
    827c:	f7fc fd4c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8280:	200000ec 	.word	0x200000ec
    8284:	490f      	ldr	r1, [pc, #60]	; (82c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c4>)
    8286:	b510      	push	{r4, lr}
    8288:	6848      	ldr	r0, [r1, #4]
    828a:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    828e:	2a06      	cmp	r2, #6
    8290:	d202      	bcs.n	8298 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x298>
    8292:	f241 31fa 	movw	r1, #5114	; 0x13fa
    8296:	e005      	b.n	82a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a4>
    8298:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    829c:	2a0b      	cmp	r2, #11
    829e:	d304      	bcc.n	82aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2aa>
    82a0:	f241 31fb 	movw	r1, #5115	; 0x13fb
    82a4:	2032      	movs	r0, #50	; 0x32
    82a6:	f7fc fd37 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82aa:	68c9      	ldr	r1, [r1, #12]
    82ac:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    82b0:	68c9      	ldr	r1, [r1, #12]
    82b2:	f06f 0213 	mvn.w	r2, #19
    82b6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    82ba:	5808      	ldr	r0, [r1, r0]
    82bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    82c0:	4700      	bx	r0
    82c2:	0000      	.short	0x0000
    82c4:	200000ec 	.word	0x200000ec
    82c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82cc:	4c31      	ldr	r4, [pc, #196]	; (8394 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x394>)
    82ce:	4605      	mov	r5, r0
    82d0:	460e      	mov	r6, r1
    82d2:	6860      	ldr	r0, [r4, #4]
    82d4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    82d8:	b120      	cbz	r0, 82e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>
    82da:	2801      	cmp	r0, #1
    82dc:	d002      	beq.n	82e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>
    82de:	200c      	movs	r0, #12
    82e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    82e4:	f004 fab8 	bl	c858 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    82e8:	f004 f8d0 	bl	c48c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    82ec:	f003 feb2 	bl	c054 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    82f0:	f004 fd14 	bl	cd1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    82f4:	4828      	ldr	r0, [pc, #160]	; (8398 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x398>)
    82f6:	f004 f9ef 	bl	c6d8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    82fa:	4828      	ldr	r0, [pc, #160]	; (839c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>)
    82fc:	f004 fc10 	bl	cb20 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    8300:	4827      	ldr	r0, [pc, #156]	; (83a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a0>)
    8302:	f004 fc03 	bl	cb0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    8306:	4630      	mov	r0, r6
    8308:	f004 fb36 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    830c:	7968      	ldrb	r0, [r5, #5]
    830e:	b110      	cbz	r0, 8316 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x316>
    8310:	2001      	movs	r0, #1
    8312:	f7ff febd 	bl	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    8316:	7928      	ldrb	r0, [r5, #4]
    8318:	2803      	cmp	r0, #3
    831a:	d001      	beq.n	8320 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x320>
    831c:	b118      	cbz	r0, 8326 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x326>
    831e:	e018      	b.n	8352 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x352>
    8320:	f640 01f7 	movw	r1, #2295	; 0x8f7
    8324:	e033      	b.n	838e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38e>
    8326:	6861      	ldr	r1, [r4, #4]
    8328:	2000      	movs	r0, #0
    832a:	2503      	movs	r5, #3
    832c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    8330:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    8334:	1c52      	adds	r2, r2, #1
    8336:	fbb2 f7f5 	udiv	r7, r2, r5
    833a:	fb05 2217 	mls	r2, r5, r7, r2
    833e:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    8342:	fa23 f202 	lsr.w	r2, r3, r2
    8346:	07d2      	lsls	r2, r2, #31
    8348:	d103      	bne.n	8352 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x352>
    834a:	1c40      	adds	r0, r0, #1
    834c:	b2c0      	uxtb	r0, r0
    834e:	2803      	cmp	r0, #3
    8350:	d3ee      	bcc.n	8330 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x330>
    8352:	6860      	ldr	r0, [r4, #4]
    8354:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
    8358:	f004 fb08 	bl	c96c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    835c:	4631      	mov	r1, r6
    835e:	2001      	movs	r0, #1
    8360:	f7ff fa84 	bl	786c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    8364:	2800      	cmp	r0, #0
    8366:	d0bb      	beq.n	82e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e0>
    8368:	f000 f920 	bl	85ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ac>
    836c:	6860      	ldr	r0, [r4, #4]
    836e:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
    8372:	b138      	cbz	r0, 8384 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x384>
    8374:	f7fe f8bc 	bl	64f0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    8378:	480a      	ldr	r0, [pc, #40]	; (83a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a4>)
    837a:	6800      	ldr	r0, [r0, #0]
    837c:	2803      	cmp	r0, #3
    837e:	d004      	beq.n	838a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38a>
    8380:	2000      	movs	r0, #0
    8382:	e7ad      	b.n	82e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e0>
    8384:	f7fe faa8 	bl	68d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    8388:	e7f6      	b.n	8378 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x378>
    838a:	f640 1109 	movw	r1, #2313	; 0x909
    838e:	2032      	movs	r0, #50	; 0x32
    8390:	f7fc fcc2 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8394:	200000ec 	.word	0x200000ec
    8398:	000086a8 	.word	0x000086a8
    839c:	00010951 	.word	0x00010951
    83a0:	8e89bed6 	.word	0x8e89bed6
    83a4:	40001550 	.word	0x40001550
    83a8:	b510      	push	{r4, lr}
    83aa:	2000      	movs	r0, #0
    83ac:	f7ff fe70 	bl	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    83b0:	4808      	ldr	r0, [pc, #32]	; (83d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d4>)
    83b2:	6840      	ldr	r0, [r0, #4]
    83b4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    83b8:	b128      	cbz	r0, 83c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c6>
    83ba:	2801      	cmp	r0, #1
    83bc:	d003      	beq.n	83c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c6>
    83be:	2802      	cmp	r0, #2
    83c0:	d004      	beq.n	83cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3cc>
    83c2:	200c      	movs	r0, #12
    83c4:	bd10      	pop	{r4, pc}
    83c6:	f000 f82f 	bl	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    83ca:	e001      	b.n	83d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d0>
    83cc:	f000 f844 	bl	8458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>
    83d0:	2000      	movs	r0, #0
    83d2:	bd10      	pop	{r4, pc}
    83d4:	200000ec 	.word	0x200000ec
    83d8:	b570      	push	{r4, r5, r6, lr}
    83da:	4c12      	ldr	r4, [pc, #72]	; (8424 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x424>)
    83dc:	6860      	ldr	r0, [r4, #4]
    83de:	f100 0532 	add.w	r5, r0, #50	; 0x32
    83e2:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
    83e6:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    83ea:	b188      	cbz	r0, 8410 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x410>
    83ec:	f7ff fb42 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    83f0:	b130      	cbz	r0, 8400 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x400>
    83f2:	6860      	ldr	r0, [r4, #4]
    83f4:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    83f8:	b111      	cbz	r1, 8400 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x400>
    83fa:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    83fe:	e002      	b.n	8406 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x406>
    8400:	6860      	ldr	r0, [r4, #4]
    8402:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    8406:	f7fe f919 	bl	663c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    840a:	b108      	cbz	r0, 8410 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x410>
    840c:	2601      	movs	r6, #1
    840e:	4605      	mov	r5, r0
    8410:	4629      	mov	r1, r5
    8412:	68a0      	ldr	r0, [r4, #8]
    8414:	f006 fdc9 	bl	efaa <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    8418:	4631      	mov	r1, r6
    841a:	68a0      	ldr	r0, [r4, #8]
    841c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8420:	f006 bdc9 	b.w	efb6 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    8424:	200000ec 	.word	0x200000ec
    8428:	b510      	push	{r4, lr}
    842a:	f7ff fa0d 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    842e:	4905      	ldr	r1, [pc, #20]	; (8444 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x444>)
    8430:	2001      	movs	r0, #1
    8432:	6849      	ldr	r1, [r1, #4]
    8434:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    843c:	2000      	movs	r0, #0
    843e:	f000 bb99 	b.w	8b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    8442:	0000      	.short	0x0000
    8444:	200000ec 	.word	0x200000ec
    8448:	4902      	ldr	r1, [pc, #8]	; (8454 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x454>)
    844a:	2000      	movs	r0, #0
    844c:	6849      	ldr	r1, [r1, #4]
    844e:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8452:	4770      	bx	lr
    8454:	200000ec 	.word	0x200000ec
    8458:	b570      	push	{r4, r5, r6, lr}
    845a:	f7fd f889 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    845e:	4604      	mov	r4, r0
    8460:	f7fd f88c 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8464:	4621      	mov	r1, r4
    8466:	f006 ffb1 	bl	f3cc <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    846a:	0005      	movs	r5, r0
    846c:	d020      	beq.n	84b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b0>
    846e:	f006 fffd 	bl	f46c <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    8472:	2000      	movs	r0, #0
    8474:	f000 fb4c 	bl	8b10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    8478:	b1f8      	cbz	r0, 84ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ba>
    847a:	4c1d      	ldr	r4, [pc, #116]	; (84f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4f0>)
    847c:	6860      	ldr	r0, [r4, #4]
    847e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    8482:	2802      	cmp	r0, #2
    8484:	d003      	beq.n	848e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48e>
    8486:	4629      	mov	r1, r5
    8488:	2000      	movs	r0, #0
    848a:	f7ff f9ef 	bl	786c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    848e:	1ce8      	adds	r0, r5, #3
    8490:	f006 f9de 	bl	e850 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    8494:	6861      	ldr	r1, [r4, #4]
    8496:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    849a:	b128      	cbz	r0, 84a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    849c:	2540      	movs	r5, #64	; 0x40
    849e:	f003 fdf9 	bl	c094 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    84a2:	4628      	mov	r0, r5
    84a4:	f004 f802 	bl	c4ac <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    84a8:	f7ff fae4 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    84ac:	b970      	cbnz	r0, 84cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4cc>
    84ae:	e008      	b.n	84c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c2>
    84b0:	f240 414a 	movw	r1, #1098	; 0x44a
    84b4:	2032      	movs	r0, #50	; 0x32
    84b6:	f7fc fc2f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    84be:	f7ff bfb3 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    84c2:	6860      	ldr	r0, [r4, #4]
    84c4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    84c8:	2802      	cmp	r0, #2
    84ca:	d104      	bne.n	84d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d6>
    84cc:	2100      	movs	r1, #0
    84ce:	2201      	movs	r2, #1
    84d0:	4608      	mov	r0, r1
    84d2:	f004 fadb 	bl	ca8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    84d6:	6860      	ldr	r0, [r4, #4]
    84d8:	21ff      	movs	r1, #255	; 0xff
    84da:	f800 1f64 	strb.w	r1, [r0, #100]!
    84de:	7041      	strb	r1, [r0, #1]
    84e0:	2100      	movs	r1, #0
    84e2:	7201      	strb	r1, [r0, #8]
    84e4:	71c1      	strb	r1, [r0, #7]
    84e6:	7641      	strb	r1, [r0, #25]
    84e8:	2105      	movs	r1, #5
    84ea:	f800 1c08 	strb.w	r1, [r0, #-8]
    84ee:	bd70      	pop	{r4, r5, r6, pc}
    84f0:	200000ec 	.word	0x200000ec
    84f4:	b570      	push	{r4, r5, r6, lr}
    84f6:	f7fd f83b 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    84fa:	4604      	mov	r4, r0
    84fc:	f7fd f83e 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8500:	4621      	mov	r1, r4
    8502:	f006 ff63 	bl	f3cc <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    8506:	0005      	movs	r5, r0
    8508:	d028      	beq.n	855c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x55c>
    850a:	4e19      	ldr	r6, [pc, #100]	; (8570 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x570>)
    850c:	2004      	movs	r0, #4
    850e:	6874      	ldr	r4, [r6, #4]
    8510:	345c      	adds	r4, #92	; 0x5c
    8512:	f000 fafd 	bl	8b10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    8516:	b330      	cbz	r0, 8566 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x566>
    8518:	200c      	movs	r0, #12
    851a:	7020      	strb	r0, [r4, #0]
    851c:	2001      	movs	r0, #1
    851e:	f000 fb29 	bl	8b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    8522:	7828      	ldrb	r0, [r5, #0]
    8524:	6871      	ldr	r1, [r6, #4]
    8526:	f3c0 1040 	ubfx	r0, r0, #5, #1
    852a:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    852e:	2005      	movs	r0, #5
    8530:	f7ff fb3e 	bl	7bb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    8534:	4a0f      	ldr	r2, [pc, #60]	; (8574 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x574>)
    8536:	68b1      	ldr	r1, [r6, #8]
    8538:	2520      	movs	r5, #32
    853a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    853c:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
    8540:	7808      	ldrb	r0, [r1, #0]
    8542:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    8546:	f020 0020 	bic.w	r0, r0, #32
    854a:	4318      	orrs	r0, r3
    854c:	7008      	strb	r0, [r1, #0]
    854e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    8550:	7ea2      	ldrb	r2, [r4, #26]
    8552:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    8556:	4011      	ands	r1, r2
    8558:	7001      	strb	r1, [r0, #0]
    855a:	bd70      	pop	{r4, r5, r6, pc}
    855c:	f240 5152 	movw	r1, #1362	; 0x552
    8560:	2032      	movs	r0, #50	; 0x32
    8562:	f7fc fbd9 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    856a:	f7ff bf5d 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    856e:	0000      	.short	0x0000
    8570:	200000ec 	.word	0x200000ec
    8574:	20001014 	.word	0x20001014
    8578:	b510      	push	{r4, lr}
    857a:	2003      	movs	r0, #3
    857c:	f000 fac8 	bl	8b10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    8580:	b168      	cbz	r0, 859e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59e>
    8582:	2003      	movs	r0, #3
    8584:	f7ff fb14 	bl	7bb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    8588:	2201      	movs	r2, #1
    858a:	4611      	mov	r1, r2
    858c:	2000      	movs	r0, #0
    858e:	f004 fa7d 	bl	ca8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    8592:	4905      	ldr	r1, [pc, #20]	; (85a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a8>)
    8594:	200b      	movs	r0, #11
    8596:	6849      	ldr	r1, [r1, #4]
    8598:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    859c:	bd10      	pop	{r4, pc}
    859e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    85a2:	f7ff bf41 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    85a6:	0000      	.short	0x0000
    85a8:	200000ec 	.word	0x200000ec
    85ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85b0:	4c1d      	ldr	r4, [pc, #116]	; (8628 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x628>)
    85b2:	2600      	movs	r6, #0
    85b4:	6860      	ldr	r0, [r4, #4]
    85b6:	f880 607d 	strb.w	r6, [r0, #125]	; 0x7d
    85ba:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    85be:	b911      	cbnz	r1, 85c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c6>
    85c0:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    85c4:	b350      	cbz	r0, 861c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61c>
    85c6:	f004 fe3a 	bl	d23e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    85ca:	4680      	mov	r8, r0
    85cc:	6860      	ldr	r0, [r4, #4]
    85ce:	4641      	mov	r1, r8
    85d0:	6c40      	ldr	r0, [r0, #68]	; 0x44
    85d2:	f7fa f805 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    85d6:	4f15      	ldr	r7, [pc, #84]	; (862c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x62c>)
    85d8:	4605      	mov	r5, r0
    85da:	fb90 f0f7 	sdiv	r0, r0, r7
    85de:	fb07 5010 	mls	r0, r7, r0, r5
    85e2:	4241      	negs	r1, r0
    85e4:	4640      	mov	r0, r8
    85e6:	f7f9 ffc9 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    85ea:	6861      	ldr	r1, [r4, #4]
    85ec:	6448      	str	r0, [r1, #68]	; 0x44
    85ee:	fb95 f0f7 	sdiv	r0, r5, r7
    85f2:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    85f4:	4410      	add	r0, r2
    85f6:	6788      	str	r0, [r1, #120]	; 0x78
    85f8:	f7fe f8dc 	bl	67b4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    85fc:	6861      	ldr	r1, [r4, #4]
    85fe:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    8600:	4290      	cmp	r0, r2
    8602:	d80b      	bhi.n	861c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61c>
    8604:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
    8608:	678e      	str	r6, [r1, #120]	; 0x78
    860a:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    860e:	b110      	cbz	r0, 8616 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x616>
    8610:	2001      	movs	r0, #1
    8612:	f7fd ffb9 	bl	6588 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    8616:	2001      	movs	r0, #1
    8618:	f7ff fd14 	bl	8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    861c:	6861      	ldr	r1, [r4, #4]
    861e:	2002      	movs	r0, #2
    8620:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8628:	200000ec 	.word	0x200000ec
    862c:	000f4240 	.word	0x000f4240
    8630:	00008449 	.word	0x00008449
    8634:	00008429 	.word	0x00008429
    8638:	0000f3ad 	.word	0x0000f3ad
    863c:	0000f3ad 	.word	0x0000f3ad
    8640:	0000f3ad 	.word	0x0000f3ad
    8644:	00008459 	.word	0x00008459
    8648:	0000f3ad 	.word	0x0000f3ad
    864c:	0000f3ad 	.word	0x0000f3ad
    8650:	0000f3ad 	.word	0x0000f3ad
    8654:	0000f3ad 	.word	0x0000f3ad
    8658:	0000f3ad 	.word	0x0000f3ad
    865c:	00008579 	.word	0x00008579
    8660:	000084f5 	.word	0x000084f5
    8664:	0000f3ad 	.word	0x0000f3ad
    8668:	0000f3ad 	.word	0x0000f3ad
    866c:	0000824d 	.word	0x0000824d
    8670:	00008229 	.word	0x00008229
    8674:	00000000 	.word	0x00000000
    8678:	0000f3b7 	.word	0x0000f3b7
    867c:	0000f353 	.word	0x0000f353
    8680:	0000f365 	.word	0x0000f365
    8684:	0000f373 	.word	0x0000f373
    8688:	00007a21 	.word	0x00007a21
    868c:	000082c9 	.word	0x000082c9
    8690:	000083a9 	.word	0x000083a9
    8694:	0000866c 	.word	0x0000866c
    8698:	00008674 	.word	0x00008674
    869c:	00008630 	.word	0x00008630
    86a0:	00008684 	.word	0x00008684
    86a4:	0000867c 	.word	0x0000867c
    86a8:	00008285 	.word	0x00008285
    86ac:	00008101 	.word	0x00008101
    86b0:	000081d5 	.word	0x000081d5
    86b4:	0000f3c9 	.word	0x0000f3c9

000086b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    86b8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    86bc:	461d      	mov	r5, r3
    86be:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    86c2:	4616      	mov	r6, r2
    86c4:	4688      	mov	r8, r1
    86c6:	4681      	mov	r9, r0
    86c8:	f7fc ff58 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    86cc:	4604      	mov	r4, r0
    86ce:	f005 fd88 	bl	e1e2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    86d2:	2801      	cmp	r0, #1
    86d4:	d063      	beq.n	879e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    86d6:	4620      	mov	r0, r4
    86d8:	f006 ff41 	bl	f55e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    86dc:	4604      	mov	r4, r0
    86de:	221c      	movs	r2, #28
    86e0:	2100      	movs	r1, #0
    86e2:	f004 ff9b 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    86e6:	2701      	movs	r7, #1
    86e8:	7027      	strb	r7, [r4, #0]
    86ea:	ea5f 0008 	movs.w	r0, r8
    86ee:	d009      	beq.n	8704 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4c>
    86f0:	2801      	cmp	r0, #1
    86f2:	d00b      	beq.n	870c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x54>
    86f4:	2802      	cmp	r0, #2
    86f6:	d02d      	beq.n	8754 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9c>
    86f8:	f1b8 0f06 	cmp.w	r8, #6
    86fc:	d02c      	beq.n	8758 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa0>
    86fe:	f240 217b 	movw	r1, #635	; 0x27b
    8702:	e049      	b.n	8798 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe0>
    8704:	7aa0      	ldrb	r0, [r4, #10]
    8706:	f040 0001 	orr.w	r0, r0, #1
    870a:	e026      	b.n	875a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    870c:	7aa0      	ldrb	r0, [r4, #10]
    870e:	f040 0005 	orr.w	r0, r0, #5
    8712:	bf00      	nop
    8714:	f040 0010 	orr.w	r0, r0, #16
    8718:	72a0      	strb	r0, [r4, #10]
    871a:	1c63      	adds	r3, r4, #1
    871c:	1ca2      	adds	r2, r4, #2
    871e:	4648      	mov	r0, r9
    8720:	990a      	ldr	r1, [sp, #40]	; 0x28
    8722:	f006 ff01 	bl	f528 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    8726:	f884 a009 	strb.w	sl, [r4, #9]
    872a:	7327      	strb	r7, [r4, #12]
    872c:	2000      	movs	r0, #0
    872e:	7360      	strb	r0, [r4, #13]
    8730:	20ff      	movs	r0, #255	; 0xff
    8732:	73a0      	strb	r0, [r4, #14]
    8734:	7aa1      	ldrb	r1, [r4, #10]
    8736:	0749      	lsls	r1, r1, #29
    8738:	d518      	bpl.n	876c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb4>
    873a:	f104 0014 	add.w	r0, r4, #20
    873e:	1e41      	subs	r1, r0, #1
    8740:	2d02      	cmp	r5, #2
    8742:	d00d      	beq.n	8760 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    8744:	2d03      	cmp	r5, #3
    8746:	d00b      	beq.n	8760 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    8748:	f8d9 2008 	ldr.w	r2, [r9, #8]
    874c:	6813      	ldr	r3, [r2, #0]
    874e:	6003      	str	r3, [r0, #0]
    8750:	8892      	ldrh	r2, [r2, #4]
    8752:	e008      	b.n	8766 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xae>
    8754:	7aa0      	ldrb	r0, [r4, #10]
    8756:	e7dd      	b.n	8714 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    8758:	7aa0      	ldrb	r0, [r4, #10]
    875a:	f040 0002 	orr.w	r0, r0, #2
    875e:	e7d9      	b.n	8714 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    8760:	6832      	ldr	r2, [r6, #0]
    8762:	6002      	str	r2, [r0, #0]
    8764:	88b2      	ldrh	r2, [r6, #4]
    8766:	8082      	strh	r2, [r0, #4]
    8768:	700d      	strb	r5, [r1, #0]
    876a:	e000      	b.n	876e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    876c:	74e0      	strb	r0, [r4, #19]
    876e:	207f      	movs	r0, #127	; 0x7f
    8770:	76a0      	strb	r0, [r4, #26]
    8772:	f884 b01b 	strb.w	fp, [r4, #27]
    8776:	f7fc fefb 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    877a:	4604      	mov	r4, r0
    877c:	f7fc fefe 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8780:	2201      	movs	r2, #1
    8782:	4621      	mov	r1, r4
    8784:	f006 fef4 	bl	f570 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    8788:	b120      	cbz	r0, 8794 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xdc>
    878a:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    878e:	2005      	movs	r0, #5
    8790:	f000 b9f0 	b.w	8b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    8794:	f240 219b 	movw	r1, #667	; 0x29b
    8798:	2033      	movs	r0, #51	; 0x33
    879a:	f7fc fabd 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    879e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
	...

000087a4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    87a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87a8:	4616      	mov	r6, r2
    87aa:	460c      	mov	r4, r1
    87ac:	4605      	mov	r5, r0
    87ae:	f006 fbc3 	bl	ef38 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    87b2:	7460      	strb	r0, [r4, #17]
    87b4:	4628      	mov	r0, r5
    87b6:	f006 fbb6 	bl	ef26 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    87ba:	74a0      	strb	r0, [r4, #18]
    87bc:	1cea      	adds	r2, r5, #3
    87be:	4b14      	ldr	r3, [pc, #80]	; (8810 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    87c0:	1d90      	adds	r0, r2, #6
    87c2:	2100      	movs	r1, #0
    87c4:	2e07      	cmp	r6, #7
    87c6:	d21f      	bcs.n	8808 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    87c8:	e8df f006 	tbb	[pc, r6]
    87cc:	1e110b04 	.word	0x1e110b04
    87d0:	00041e13 	.word	0x00041e13
    87d4:	781b      	ldrb	r3, [r3, #0]
    87d6:	e00d      	b.n	87f4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    87d8:	60e0      	str	r0, [r4, #12]
    87da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    87de:	60e1      	str	r1, [r4, #12]
    87e0:	e7fb      	b.n	87da <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    87e2:	785b      	ldrb	r3, [r3, #1]
    87e4:	7063      	strb	r3, [r4, #1]
    87e6:	e9c4 2001 	strd	r2, r0, [r4, #4]
    87ea:	7421      	strb	r1, [r4, #16]
    87ec:	e7f7      	b.n	87de <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    87ee:	789b      	ldrb	r3, [r3, #2]
    87f0:	e000      	b.n	87f4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    87f2:	78db      	ldrb	r3, [r3, #3]
    87f4:	7063      	strb	r3, [r4, #1]
    87f6:	e9c4 2101 	strd	r2, r1, [r4, #4]
    87fa:	786a      	ldrb	r2, [r5, #1]
    87fc:	1f92      	subs	r2, r2, #6
    87fe:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    8802:	7422      	strb	r2, [r4, #16]
    8804:	d0eb      	beq.n	87de <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    8806:	e7e7      	b.n	87d8 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    8808:	7061      	strb	r1, [r4, #1]
    880a:	6061      	str	r1, [r4, #4]
    880c:	60a1      	str	r1, [r4, #8]
    880e:	e7ec      	b.n	87ea <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    8810:	00010957 	.word	0x00010957

00008814 <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ>:
    8814:	b508      	push	{r3, lr}
    8816:	2244      	movs	r2, #68	; 0x44
    8818:	2100      	movs	r1, #0
    881a:	480c      	ldr	r0, [pc, #48]	; (884c <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ+0x38>)
    881c:	f004 fefe 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8820:	f7fe fdf0 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8824:	2120      	movs	r1, #32
    8826:	7001      	strb	r1, [r0, #0]
    8828:	4808      	ldr	r0, [pc, #32]	; (884c <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ+0x38>)
    882a:	3810      	subs	r0, #16
    882c:	2100      	movs	r1, #0
    882e:	6001      	str	r1, [r0, #0]
    8830:	6041      	str	r1, [r0, #4]
    8832:	6081      	str	r1, [r0, #8]
    8834:	60c1      	str	r1, [r0, #12]
    8836:	f000 f871 	bl	891c <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>
    883a:	f242 7010 	movw	r0, #10000	; 0x2710
    883e:	9000      	str	r0, [sp, #0]
    8840:	2201      	movs	r2, #1
    8842:	4669      	mov	r1, sp
    8844:	1080      	asrs	r0, r0, #2
    8846:	f000 fbb1 	bl	8fac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x438>
    884a:	bd08      	pop	{r3, pc}
    884c:	200010a8 	.word	0x200010a8

00008850 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ>:
    8850:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8854:	4c1e      	ldr	r4, [pc, #120]	; (88d0 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x80>)
    8856:	4607      	mov	r7, r0
    8858:	460e      	mov	r6, r1
    885a:	7820      	ldrb	r0, [r4, #0]
    885c:	b118      	cbz	r0, 8866 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x16>
    885e:	200c      	movs	r0, #12
    8860:	b004      	add	sp, #16
    8862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8866:	f7fe fdcd 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    886a:	4605      	mov	r5, r0
    886c:	61a7      	str	r7, [r4, #24]
    886e:	f897 0120 	ldrb.w	r0, [r7, #288]	; 0x120
    8872:	b110      	cbz	r0, 887a <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x2a>
    8874:	f240 4129 	movw	r1, #1065	; 0x429
    8878:	e026      	b.n	88c8 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    887a:	2005      	movs	r0, #5
    887c:	7020      	strb	r0, [r4, #0]
    887e:	2000      	movs	r0, #0
    8880:	7060      	strb	r0, [r4, #1]
    8882:	7720      	strb	r0, [r4, #28]
    8884:	4630      	mov	r0, r6
    8886:	f000 f9f7 	bl	8c78 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x104>
    888a:	f000 fd27 	bl	92dc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x768>
    888e:	6320      	str	r0, [r4, #48]	; 0x30
    8890:	2100      	movs	r1, #0
    8892:	4810      	ldr	r0, [pc, #64]	; (88d4 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x84>)
    8894:	f7fa fd5c 	bl	3350 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8898:	7028      	strb	r0, [r5, #0]
    889a:	2820      	cmp	r0, #32
    889c:	d00c      	beq.n	88b8 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x68>
    889e:	2200      	movs	r2, #0
    88a0:	2101      	movs	r1, #1
    88a2:	4668      	mov	r0, sp
    88a4:	f000 fdb4 	bl	9410 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x89c>
    88a8:	b148      	cbz	r0, 88be <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x6e>
    88aa:	7828      	ldrb	r0, [r5, #0]
    88ac:	4669      	mov	r1, sp
    88ae:	f006 feab 	bl	f608 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    88b2:	b138      	cbz	r0, 88c4 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x74>
    88b4:	2000      	movs	r0, #0
    88b6:	e7d3      	b.n	8860 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x10>
    88b8:	f44f 6187 	mov.w	r1, #1080	; 0x438
    88bc:	e004      	b.n	88c8 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    88be:	f240 413b 	movw	r1, #1083	; 0x43b
    88c2:	e001      	b.n	88c8 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    88c4:	f240 413c 	movw	r1, #1084	; 0x43c
    88c8:	2035      	movs	r0, #53	; 0x35
    88ca:	f7fc fa25 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88ce:	0000      	.short	0x0000
    88d0:	200010a8 	.word	0x200010a8
    88d4:	00008d15 	.word	0x00008d15

000088d8 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q>:
    88d8:	4902      	ldr	r1, [pc, #8]	; (88e4 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q+0xc>)
    88da:	6989      	ldr	r1, [r1, #24]
    88dc:	6001      	str	r1, [r0, #0]
    88de:	f000 b865 	b.w	89ac <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
    88e2:	0000      	.short	0x0000
    88e4:	200010a8 	.word	0x200010a8

000088e8 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>:
    88e8:	4901      	ldr	r1, [pc, #4]	; (88f0 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA+0x8>)
    88ea:	7048      	strb	r0, [r1, #1]
    88ec:	4770      	bx	lr
    88ee:	0000      	.short	0x0000
    88f0:	20001098 	.word	0x20001098

000088f4 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>:
    88f4:	b570      	push	{r4, r5, r6, lr}
    88f6:	4605      	mov	r5, r0
    88f8:	4907      	ldr	r1, [pc, #28]	; (8918 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY+0x24>)
    88fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    88fe:	fbb1 f4f0 	udiv	r4, r1, r0
    8902:	f006 fed1 	bl	f6a8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    8906:	1901      	adds	r1, r0, r4
    8908:	4628      	mov	r0, r5
    890a:	f501 719b 	add.w	r1, r1, #310	; 0x136
    890e:	f006 fc95 	bl	f23c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    8912:	b280      	uxth	r0, r0
    8914:	bd70      	pop	{r4, r5, r6, pc}
    8916:	0000      	.short	0x0000
    8918:	00012105 	.word	0x00012105

0000891c <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>:
    891c:	4804      	ldr	r0, [pc, #16]	; (8930 <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ+0x14>)
    891e:	b510      	push	{r4, lr}
    8920:	7800      	ldrb	r0, [r0, #0]
    8922:	b108      	cbz	r0, 8928 <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ+0xc>
    8924:	f000 f842 	bl	89ac <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
    8928:	f000 f972 	bl	8c10 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9c>
    892c:	2000      	movs	r0, #0
    892e:	bd10      	pop	{r4, pc}
    8930:	200010a8 	.word	0x200010a8

00008934 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA>:
    8934:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8936:	4606      	mov	r6, r0
    8938:	b111      	cbz	r1, 8940 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0xc>
    893a:	2011      	movs	r0, #17
    893c:	b004      	add	sp, #16
    893e:	bd70      	pop	{r4, r5, r6, pc}
    8940:	4c18      	ldr	r4, [pc, #96]	; (89a4 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x70>)
    8942:	7820      	ldrb	r0, [r4, #0]
    8944:	b108      	cbz	r0, 894a <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x16>
    8946:	200c      	movs	r0, #12
    8948:	e7f8      	b.n	893c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x8>
    894a:	f7fe fd5b 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    894e:	4605      	mov	r5, r0
    8950:	2000      	movs	r0, #0
    8952:	7060      	strb	r0, [r4, #1]
    8954:	2004      	movs	r0, #4
    8956:	7020      	strb	r0, [r4, #0]
    8958:	4630      	mov	r0, r6
    895a:	f000 f98d 	bl	8c78 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x104>
    895e:	f000 fcbd 	bl	92dc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x768>
    8962:	6320      	str	r0, [r4, #48]	; 0x30
    8964:	2100      	movs	r1, #0
    8966:	4810      	ldr	r0, [pc, #64]	; (89a8 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x74>)
    8968:	f7fa fcf2 	bl	3350 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    896c:	7028      	strb	r0, [r5, #0]
    896e:	2820      	cmp	r0, #32
    8970:	d00c      	beq.n	898c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x58>
    8972:	2200      	movs	r2, #0
    8974:	2101      	movs	r1, #1
    8976:	4668      	mov	r0, sp
    8978:	f000 fd4a 	bl	9410 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x89c>
    897c:	b148      	cbz	r0, 8992 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x5e>
    897e:	7828      	ldrb	r0, [r5, #0]
    8980:	4669      	mov	r1, sp
    8982:	f006 fe41 	bl	f608 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    8986:	b138      	cbz	r0, 8998 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x64>
    8988:	2000      	movs	r0, #0
    898a:	e7d7      	b.n	893c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x8>
    898c:	f240 419f 	movw	r1, #1183	; 0x49f
    8990:	e004      	b.n	899c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x68>
    8992:	f240 41a1 	movw	r1, #1185	; 0x4a1
    8996:	e001      	b.n	899c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x68>
    8998:	f240 41a2 	movw	r1, #1186	; 0x4a2
    899c:	2035      	movs	r0, #53	; 0x35
    899e:	f7fc f9bb 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89a2:	0000      	.short	0x0000
    89a4:	200010a8 	.word	0x200010a8
    89a8:	00008d15 	.word	0x00008d15

000089ac <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>:
    89ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89b0:	2700      	movs	r7, #0
    89b2:	f7fe fd27 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    89b6:	4c17      	ldr	r4, [pc, #92]	; (8a14 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x68>)
    89b8:	4605      	mov	r5, r0
    89ba:	7820      	ldrb	r0, [r4, #0]
    89bc:	2804      	cmp	r0, #4
    89be:	d005      	beq.n	89cc <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x20>
    89c0:	7820      	ldrb	r0, [r4, #0]
    89c2:	2805      	cmp	r0, #5
    89c4:	d002      	beq.n	89cc <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x20>
    89c6:	200c      	movs	r0, #12
    89c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    89cc:	2001      	movs	r0, #1
    89ce:	7060      	strb	r0, [r4, #1]
    89d0:	7b20      	ldrb	r0, [r4, #12]
    89d2:	b160      	cbz	r0, 89ee <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x42>
    89d4:	f3ef 8610 	mrs	r6, PRIMASK
    89d8:	b672      	cpsid	i
    89da:	7b20      	ldrb	r0, [r4, #12]
    89dc:	b128      	cbz	r0, 89ea <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x3e>
    89de:	7b60      	ldrb	r0, [r4, #13]
    89e0:	b118      	cbz	r0, 89ea <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x3e>
    89e2:	f7fe fee1 	bl	77a8 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    89e6:	f000 fad1 	bl	8f8c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x418>
    89ea:	b126      	cbz	r6, 89f6 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4a>
    89ec:	e004      	b.n	89f8 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4c>
    89ee:	7828      	ldrb	r0, [r5, #0]
    89f0:	f7fa fa64 	bl	2ebc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    89f4:	e000      	b.n	89f8 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4c>
    89f6:	b662      	cpsie	i
    89f8:	7828      	ldrb	r0, [r5, #0]
    89fa:	f7fa fb9d 	bl	3138 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    89fe:	f000 fe37 	bl	9670 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xafc>
    8a02:	2000      	movs	r0, #0
    8a04:	7060      	strb	r0, [r4, #1]
    8a06:	7f20      	ldrb	r0, [r4, #28]
    8a08:	b100      	cbz	r0, 8a0c <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x60>
    8a0a:	270c      	movs	r7, #12
    8a0c:	f000 fe5a 	bl	96c4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb50>
    8a10:	4638      	mov	r0, r7
    8a12:	e7d9      	b.n	89c8 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x1c>
    8a14:	200010a8 	.word	0x200010a8

00008a18 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>:
    8a18:	4801      	ldr	r0, [pc, #4]	; (8a20 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ+0x8>)
    8a1a:	7800      	ldrb	r0, [r0, #0]
    8a1c:	4770      	bx	lr
    8a1e:	0000      	.short	0x0000
    8a20:	200010a8 	.word	0x200010a8

00008a24 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>:
    8a24:	490c      	ldr	r1, [pc, #48]	; (8a58 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x34>)
    8a26:	b508      	push	{r3, lr}
    8a28:	7809      	ldrb	r1, [r1, #0]
    8a2a:	b121      	cbz	r1, 8a36 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x12>
    8a2c:	f44f 618b 	mov.w	r1, #1112	; 0x458
    8a30:	2035      	movs	r0, #53	; 0x35
    8a32:	f7fc f971 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a36:	2300      	movs	r3, #0
    8a38:	9300      	str	r3, [sp, #0]
    8a3a:	7801      	ldrb	r1, [r0, #0]
    8a3c:	461a      	mov	r2, r3
    8a3e:	07c9      	lsls	r1, r1, #31
    8a40:	d003      	beq.n	8a4a <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x26>
    8a42:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    8a46:	2201      	movs	r2, #1
    8a48:	9000      	str	r0, [sp, #0]
    8a4a:	4669      	mov	r1, sp
    8a4c:	4618      	mov	r0, r3
    8a4e:	f000 faad 	bl	8fac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x438>
    8a52:	2000      	movs	r0, #0
    8a54:	bd08      	pop	{r3, pc}
    8a56:	0000      	.short	0x0000
    8a58:	200010a8 	.word	0x200010a8

00008a5c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    8a5c:	b570      	push	{r4, r5, r6, lr}
    8a5e:	f003 fe9b 	bl	c798 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8a62:	4c0e      	ldr	r4, [pc, #56]	; (8a9c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
    8a64:	4606      	mov	r6, r0
    8a66:	7860      	ldrb	r0, [r4, #1]
    8a68:	b170      	cbz	r0, 8a88 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    8a6a:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    8a6e:	4632      	mov	r2, r6
    8a70:	4628      	mov	r0, r5
    8a72:	f005 ff8a 	bl	e98a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    8a76:	6060      	str	r0, [r4, #4]
    8a78:	42a8      	cmp	r0, r5
    8a7a:	d005      	beq.n	8a88 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    8a7c:	68e1      	ldr	r1, [r4, #12]
    8a7e:	1b40      	subs	r0, r0, r5
    8a80:	4408      	add	r0, r1
    8a82:	60e0      	str	r0, [r4, #12]
    8a84:	f7fa fd6e 	bl	3564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8a88:	6860      	ldr	r0, [r4, #4]
    8a8a:	42b0      	cmp	r0, r6
    8a8c:	d301      	bcc.n	8a92 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    8a8e:	7820      	ldrb	r0, [r4, #0]
    8a90:	b108      	cbz	r0, 8a96 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3a>
    8a92:	2000      	movs	r0, #0
    8a94:	bd70      	pop	{r4, r5, r6, pc}
    8a96:	2001      	movs	r0, #1
    8a98:	bd70      	pop	{r4, r5, r6, pc}
    8a9a:	0000      	.short	0x0000
    8a9c:	20001098 	.word	0x20001098

00008aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    8aa0:	b510      	push	{r4, lr}
    8aa2:	2905      	cmp	r1, #5
    8aa4:	d22d      	bcs.n	8b02 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    8aa6:	e8df f001 	tbb	[pc, r1]
    8aaa:	0a05      	.short	0x0a05
    8aac:	00280e03 	.word	0x00280e03
    8ab0:	2100      	movs	r1, #0
    8ab2:	e000      	b.n	8ab6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    8ab4:	2101      	movs	r1, #1
    8ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8aba:	f000 b9d1 	b.w	8e60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ec>
    8abe:	2103      	movs	r1, #3
    8ac0:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    8ac4:	bd10      	pop	{r4, pc}
    8ac6:	4911      	ldr	r1, [pc, #68]	; (8b0c <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x6c>)
    8ac8:	4604      	mov	r4, r0
    8aca:	68c0      	ldr	r0, [r0, #12]
    8acc:	6008      	str	r0, [r1, #0]
    8ace:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    8ad2:	6220      	str	r0, [r4, #32]
    8ad4:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    8ad8:	83a0      	strh	r0, [r4, #28]
    8ada:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    8ade:	60e0      	str	r0, [r4, #12]
    8ae0:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    8ae4:	82a0      	strh	r0, [r4, #20]
    8ae6:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    8aea:	82e0      	strh	r0, [r4, #22]
    8aec:	4620      	mov	r0, r4
    8aee:	f006 fd79 	bl	f5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    8af2:	2002      	movs	r0, #2
    8af4:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    8af8:	bd10      	pop	{r4, pc}
    8afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8afe:	f006 bd71 	b.w	f5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    8b02:	f640 3158 	movw	r1, #2904	; 0xb58
    8b06:	2035      	movs	r0, #53	; 0x35
    8b08:	f7fc f906 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b0c:	200000fc 	.word	0x200000fc

00008b10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    8b10:	b570      	push	{r4, r5, r6, lr}
    8b12:	4605      	mov	r5, r0
    8b14:	f003 fe40 	bl	c798 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8b18:	4604      	mov	r4, r0
    8b1a:	b155      	cbz	r5, 8b32 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x22>
    8b1c:	2d03      	cmp	r5, #3
    8b1e:	d00d      	beq.n	8b3c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x2c>
    8b20:	2d04      	cmp	r5, #4
    8b22:	d00e      	beq.n	8b42 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x32>
    8b24:	2d06      	cmp	r5, #6
    8b26:	d01e      	beq.n	8b66 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x56>
    8b28:	f240 5194 	movw	r1, #1428	; 0x594
    8b2c:	2035      	movs	r0, #53	; 0x35
    8b2e:	f7fc f8f3 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b32:	2001      	movs	r0, #1
    8b34:	f006 fd3a 	bl	f5ac <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    8b38:	3098      	adds	r0, #152	; 0x98
    8b3a:	e004      	b.n	8b46 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    8b3c:	f44f 7057 	mov.w	r0, #860	; 0x35c
    8b40:	e001      	b.n	8b46 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    8b42:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    8b46:	4e0a      	ldr	r6, [pc, #40]	; (8b70 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x60>)
    8b48:	1825      	adds	r5, r4, r0
    8b4a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8b4c:	38f0      	subs	r0, #240	; 0xf0
    8b4e:	4285      	cmp	r5, r0
    8b50:	d307      	bcc.n	8b62 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x52>
    8b52:	2400      	movs	r4, #0
    8b54:	f000 fc12 	bl	937c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x808>
    8b58:	b140      	cbz	r0, 8b6c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    8b5a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8b5c:	38f0      	subs	r0, #240	; 0xf0
    8b5e:	4285      	cmp	r5, r0
    8b60:	d203      	bcs.n	8b6a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    8b62:	2401      	movs	r4, #1
    8b64:	e002      	b.n	8b6c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    8b66:	2001      	movs	r0, #1
    8b68:	bd70      	pop	{r4, r5, r6, pc}
    8b6a:	2400      	movs	r4, #0
    8b6c:	4620      	mov	r0, r4
    8b6e:	bd70      	pop	{r4, r5, r6, pc}
    8b70:	200010a8 	.word	0x200010a8

00008b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>:
    8b74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8b76:	2501      	movs	r5, #1
    8b78:	4c24      	ldr	r4, [pc, #144]	; (8c0c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x98>)
    8b7a:	2806      	cmp	r0, #6
    8b7c:	d243      	bcs.n	8c06 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x92>
    8b7e:	e8df f000 	tbb	[pc, r0]
    8b82:	1903      	.short	0x1903
    8b84:	3e232319 	.word	0x3e232319
    8b88:	f002 fcfa 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8b8c:	7860      	ldrb	r0, [r4, #1]
    8b8e:	bb88      	cbnz	r0, 8bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    8b90:	2200      	movs	r2, #0
    8b92:	4611      	mov	r1, r2
    8b94:	4668      	mov	r0, sp
    8b96:	f000 fc3b 	bl	9410 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x89c>
    8b9a:	b148      	cbz	r0, 8bb0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3c>
    8b9c:	f7fe fc32 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8ba0:	7800      	ldrb	r0, [r0, #0]
    8ba2:	4669      	mov	r1, sp
    8ba4:	f006 fd30 	bl	f608 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    8ba8:	bb20      	cbnz	r0, 8bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    8baa:	f640 2163 	movw	r1, #2659	; 0xa63
    8bae:	e01c      	b.n	8bea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    8bb0:	70e5      	strb	r5, [r4, #3]
    8bb2:	e020      	b.n	8bf6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    8bb4:	2802      	cmp	r0, #2
    8bb6:	d005      	beq.n	8bc4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x50>
    8bb8:	2000      	movs	r0, #0
    8bba:	b004      	add	sp, #16
    8bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8bc0:	f000 b96a 	b.w	8e98 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x324>
    8bc4:	2001      	movs	r0, #1
    8bc6:	e7f8      	b.n	8bba <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x46>
    8bc8:	2804      	cmp	r0, #4
    8bca:	d011      	beq.n	8bf0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7c>
    8bcc:	f05f 0600 	movs.w	r6, #0
    8bd0:	f002 fcd6 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8bd4:	7725      	strb	r5, [r4, #28]
    8bd6:	7766      	strb	r6, [r4, #29]
    8bd8:	69a1      	ldr	r1, [r4, #24]
    8bda:	2000      	movs	r0, #0
    8bdc:	f881 0120 	strb.w	r0, [r1, #288]	; 0x120
    8be0:	f000 f85a 	bl	8c98 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x124>
    8be4:	b130      	cbz	r0, 8bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    8be6:	f640 3118 	movw	r1, #2840	; 0xb18
    8bea:	2035      	movs	r0, #53	; 0x35
    8bec:	f7fc f894 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8bf0:	2601      	movs	r6, #1
    8bf2:	e7ed      	b.n	8bd0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c>
    8bf4:	e7ff      	b.n	8bf6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    8bf6:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8bfa:	f000 b9c7 	b.w	8f8c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x418>
    8bfe:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8c02:	f002 bcbd 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8c06:	f640 31b2 	movw	r1, #2994	; 0xbb2
    8c0a:	e7ee      	b.n	8bea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    8c0c:	200010a8 	.word	0x200010a8
    8c10:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    8c12:	4c18      	ldr	r4, [pc, #96]	; (8c74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x100>)
    8c14:	2001      	movs	r0, #1
    8c16:	7020      	strb	r0, [r4, #0]
    8c18:	f64f 75ff 	movw	r5, #65535	; 0xffff
    8c1c:	e00b      	b.n	8c36 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xc2>
    8c1e:	2100      	movs	r1, #0
    8c20:	f005 fd1f 	bl	e662 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8c24:	0006      	movs	r6, r0
    8c26:	d010      	beq.n	8c4a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xd6>
    8c28:	f896 0121 	ldrb.w	r0, [r6, #289]	; 0x121
    8c2c:	f7fa fa84 	bl	3138 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8c30:	4630      	mov	r0, r6
    8c32:	f006 fd01 	bl	f638 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x9c>
    8c36:	4669      	mov	r1, sp
    8c38:	2000      	movs	r0, #0
    8c3a:	f005 fd1b 	bl	e674 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8c3e:	b180      	cbz	r0, 8c62 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    8c40:	f240 2145 	movw	r1, #581	; 0x245
    8c44:	2035      	movs	r0, #53	; 0x35
    8c46:	f7fc f867 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c4a:	f240 514a 	movw	r1, #1354	; 0x54a
    8c4e:	e7f9      	b.n	8c44 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xd0>
    8c50:	9802      	ldr	r0, [sp, #8]
    8c52:	b130      	cbz	r0, 8c62 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    8c54:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    8c58:	b119      	cbz	r1, 8c62 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    8c5a:	8800      	ldrh	r0, [r0, #0]
    8c5c:	42a8      	cmp	r0, r5
    8c5e:	d1de      	bne.n	8c1e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaa>
    8c60:	e004      	b.n	8c6c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xf8>
    8c62:	4668      	mov	r0, sp
    8c64:	f7fc fa88 	bl	5178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8c68:	2800      	cmp	r0, #0
    8c6a:	d0f1      	beq.n	8c50 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xdc>
    8c6c:	2000      	movs	r0, #0
    8c6e:	7020      	strb	r0, [r4, #0]
    8c70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8c72:	0000      	.short	0x0000
    8c74:	20001098 	.word	0x20001098
    8c78:	4906      	ldr	r1, [pc, #24]	; (8c94 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x120>)
    8c7a:	b140      	cbz	r0, 8c8e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x11a>
    8c7c:	2201      	movs	r2, #1
    8c7e:	708a      	strb	r2, [r1, #2]
    8c80:	f242 7210 	movw	r2, #10000	; 0x2710
    8c84:	4350      	muls	r0, r2
    8c86:	684a      	ldr	r2, [r1, #4]
    8c88:	4410      	add	r0, r2
    8c8a:	6208      	str	r0, [r1, #32]
    8c8c:	4770      	bx	lr
    8c8e:	2000      	movs	r0, #0
    8c90:	7088      	strb	r0, [r1, #2]
    8c92:	4770      	bx	lr
    8c94:	200010a8 	.word	0x200010a8
    8c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8c9a:	4c1c      	ldr	r4, [pc, #112]	; (8d0c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x198>)
    8c9c:	7820      	ldrb	r0, [r4, #0]
    8c9e:	2805      	cmp	r0, #5
    8ca0:	d002      	beq.n	8ca8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x134>
    8ca2:	200c      	movs	r0, #12
    8ca4:	b004      	add	sp, #16
    8ca6:	bd10      	pop	{r4, pc}
    8ca8:	69a1      	ldr	r1, [r4, #24]
    8caa:	b129      	cbz	r1, 8cb8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x144>
    8cac:	f891 0120 	ldrb.w	r0, [r1, #288]	; 0x120
    8cb0:	b128      	cbz	r0, 8cbe <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x14a>
    8cb2:	f240 5103 	movw	r1, #1283	; 0x503
    8cb6:	e025      	b.n	8d04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    8cb8:	f240 5102 	movw	r1, #1282	; 0x502
    8cbc:	e022      	b.n	8d04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    8cbe:	f891 0121 	ldrb.w	r0, [r1, #289]	; 0x121
    8cc2:	2820      	cmp	r0, #32
    8cc4:	d002      	beq.n	8ccc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x158>
    8cc6:	f240 5105 	movw	r1, #1285	; 0x505
    8cca:	e01b      	b.n	8d04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    8ccc:	4810      	ldr	r0, [pc, #64]	; (8d10 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x19c>)
    8cce:	f7fa fb3f 	bl	3350 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8cd2:	69a1      	ldr	r1, [r4, #24]
    8cd4:	2820      	cmp	r0, #32
    8cd6:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    8cda:	d00e      	beq.n	8cfa <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x186>
    8cdc:	2300      	movs	r3, #0
    8cde:	2201      	movs	r2, #1
    8ce0:	4668      	mov	r0, sp
    8ce2:	f000 fa09 	bl	90f8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x584>
    8ce6:	69a0      	ldr	r0, [r4, #24]
    8ce8:	4669      	mov	r1, sp
    8cea:	f890 0121 	ldrb.w	r0, [r0, #289]	; 0x121
    8cee:	f006 fc8b 	bl	f608 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    8cf2:	b128      	cbz	r0, 8d00 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x18c>
    8cf4:	2000      	movs	r0, #0
    8cf6:	61a0      	str	r0, [r4, #24]
    8cf8:	e7d4      	b.n	8ca4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x130>
    8cfa:	f240 5109 	movw	r1, #1289	; 0x509
    8cfe:	e001      	b.n	8d04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    8d00:	f240 510c 	movw	r1, #1292	; 0x50c
    8d04:	2035      	movs	r0, #53	; 0x35
    8d06:	f7fc f807 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d0a:	0000      	.short	0x0000
    8d0c:	200010a8 	.word	0x200010a8
    8d10:	00009001 	.word	0x00009001
    8d14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8d16:	460d      	mov	r5, r1
    8d18:	2001      	movs	r0, #1
    8d1a:	f006 fc30 	bl	f57e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8d1e:	b2c4      	uxtb	r4, r0
    8d20:	200b      	movs	r0, #11
    8d22:	f006 fc2c 	bl	f57e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8d26:	b2c0      	uxtb	r0, r0
    8d28:	4284      	cmp	r4, r0
    8d2a:	d002      	beq.n	8d32 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1be>
    8d2c:	f240 21ce 	movw	r1, #718	; 0x2ce
    8d30:	e073      	b.n	8e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    8d32:	f7fe fb67 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8d36:	2601      	movs	r6, #1
    8d38:	4c3b      	ldr	r4, [pc, #236]	; (8e28 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b4>)
    8d3a:	2d09      	cmp	r5, #9
    8d3c:	d270      	bcs.n	8e20 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ac>
    8d3e:	e8df f005 	tbb	[pc, r5]
    8d42:	3605      	.short	0x3605
    8d44:	6f464a4a 	.word	0x6f464a4a
    8d48:	006a665e 	.word	0x006a665e
    8d4c:	7326      	strb	r6, [r4, #12]
    8d4e:	7861      	ldrb	r1, [r4, #1]
    8d50:	2900      	cmp	r1, #0
    8d52:	d12b      	bne.n	8dac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    8d54:	7800      	ldrb	r0, [r0, #0]
    8d56:	f7f9 fc67 	bl	2628 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    8d5a:	4605      	mov	r5, r0
    8d5c:	6120      	str	r0, [r4, #16]
    8d5e:	f000 fccb 	bl	96f8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb84>
    8d62:	b118      	cbz	r0, 8d6c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1f8>
    8d64:	2000      	movs	r0, #0
    8d66:	f88d 0004 	strb.w	r0, [sp, #4]
    8d6a:	e001      	b.n	8d70 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1fc>
    8d6c:	f88d 6004 	strb.w	r6, [sp, #4]
    8d70:	4629      	mov	r1, r5
    8d72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8d74:	f7f9 fc34 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8d78:	6861      	ldr	r1, [r4, #4]
    8d7a:	fbb0 f2f1 	udiv	r2, r0, r1
    8d7e:	fb01 0012 	mls	r0, r1, r2, r0
    8d82:	b150      	cbz	r0, 8d9a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x226>
    8d84:	f05f 0000 	movs.w	r0, #0
    8d88:	f88d 0005 	strb.w	r0, [sp, #5]
    8d8c:	4668      	mov	r0, sp
    8d8e:	f7fe fc73 	bl	7678 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    8d92:	b120      	cbz	r0, 8d9e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x22a>
    8d94:	f44f 7142 	mov.w	r1, #776	; 0x308
    8d98:	e03f      	b.n	8e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    8d9a:	2001      	movs	r0, #1
    8d9c:	e7f4      	b.n	8d88 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x214>
    8d9e:	4922      	ldr	r1, [pc, #136]	; (8e28 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b4>)
    8da0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8da2:	3910      	subs	r1, #16
    8da4:	38df      	subs	r0, #223	; 0xdf
    8da6:	60c8      	str	r0, [r1, #12]
    8da8:	f7fa fbdc 	bl	3564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8dac:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    8dae:	7860      	ldrb	r0, [r4, #1]
    8db0:	b128      	cbz	r0, 8dbe <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x24a>
    8db2:	f7fe fcf9 	bl	77a8 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    8db6:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8dba:	f000 b8e7 	b.w	8f8c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x418>
    8dbe:	7366      	strb	r6, [r4, #13]
    8dc0:	f7fe fcec 	bl	779c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    8dc4:	2800      	cmp	r0, #0
    8dc6:	d0f1      	beq.n	8dac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    8dc8:	f240 311b 	movw	r1, #795	; 0x31b
    8dcc:	e025      	b.n	8e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    8dce:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8dd2:	f003 bec5 	b.w	cb60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    8dd6:	7805      	ldrb	r5, [r0, #0]
    8dd8:	2201      	movs	r2, #1
    8dda:	2100      	movs	r1, #0
    8ddc:	4668      	mov	r0, sp
    8dde:	f000 fb17 	bl	9410 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x89c>
    8de2:	b140      	cbz	r0, 8df6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x282>
    8de4:	4669      	mov	r1, sp
    8de6:	4628      	mov	r0, r5
    8de8:	f006 fc0e 	bl	f608 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    8dec:	2800      	cmp	r0, #0
    8dee:	d1dd      	bne.n	8dac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    8df0:	f640 217f 	movw	r1, #2687	; 0xa7f
    8df4:	e011      	b.n	8e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    8df6:	70e6      	strb	r6, [r4, #3]
    8df8:	f000 f818 	bl	8e2c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b8>
    8dfc:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    8dfe:	f000 fabd 	bl	937c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x808>
    8e02:	2800      	cmp	r0, #0
    8e04:	d1fa      	bne.n	8dfc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x288>
    8e06:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8e0a:	f006 baa0 	b.w	f34e <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    8e0e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8e12:	f000 b80b 	b.w	8e2c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b8>
    8e16:	f240 313f 	movw	r1, #831	; 0x33f
    8e1a:	2035      	movs	r0, #53	; 0x35
    8e1c:	f7fb ff7c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e20:	f240 3143 	movw	r1, #835	; 0x343
    8e24:	e7f9      	b.n	8e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    8e26:	0000      	.short	0x0000
    8e28:	200010a8 	.word	0x200010a8
    8e2c:	b510      	push	{r4, lr}
    8e2e:	4c0b      	ldr	r4, [pc, #44]	; (8e5c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e8>)
    8e30:	7820      	ldrb	r0, [r4, #0]
    8e32:	b130      	cbz	r0, 8e42 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ce>
    8e34:	f000 fc1c 	bl	9670 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xafc>
    8e38:	78e0      	ldrb	r0, [r4, #3]
    8e3a:	b158      	cbz	r0, 8e54 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e0>
    8e3c:	7f20      	ldrb	r0, [r4, #28]
    8e3e:	b128      	cbz	r0, 8e4c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2d8>
    8e40:	e008      	b.n	8e54 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e0>
    8e42:	f240 21ba 	movw	r1, #698	; 0x2ba
    8e46:	2035      	movs	r0, #53	; 0x35
    8e48:	f7fb ff66 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e4c:	f7fe fcbe 	bl	77cc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    8e50:	f002 fb96 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e58:	f000 bc34 	b.w	96c4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb50>
    8e5c:	200010a8 	.word	0x200010a8
    8e60:	b510      	push	{r4, lr}
    8e62:	4604      	mov	r4, r0
    8e64:	2901      	cmp	r1, #1
    8e66:	d102      	bne.n	8e6e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2fa>
    8e68:	480a      	ldr	r0, [pc, #40]	; (8e94 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x320>)
    8e6a:	7800      	ldrb	r0, [r0, #0]
    8e6c:	b140      	cbz	r0, 8e80 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x30c>
    8e6e:	2004      	movs	r0, #4
    8e70:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    8e74:	f003 fcc4 	bl	c800 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e7c:	f7fa ba90 	b.w	33a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8e80:	2200      	movs	r2, #0
    8e82:	2101      	movs	r1, #1
    8e84:	4620      	mov	r0, r4
    8e86:	f006 fbef 	bl	f668 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xcc>
    8e8a:	f834 0f7c 	ldrh.w	r0, [r4, #124]!
    8e8e:	1c40      	adds	r0, r0, #1
    8e90:	8020      	strh	r0, [r4, #0]
    8e92:	e7ef      	b.n	8e74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x300>
    8e94:	20001098 	.word	0x20001098
    8e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e9c:	4c39      	ldr	r4, [pc, #228]	; (8f84 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x410>)
    8e9e:	4682      	mov	sl, r0
    8ea0:	6926      	ldr	r6, [r4, #16]
    8ea2:	f003 fc79 	bl	c798 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8ea6:	4605      	mov	r5, r0
    8ea8:	69a0      	ldr	r0, [r4, #24]
    8eaa:	2201      	movs	r2, #1
    8eac:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    8eb0:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
    8eb4:	3062      	adds	r0, #98	; 0x62
    8eb6:	2101      	movs	r1, #1
    8eb8:	7281      	strb	r1, [r0, #10]
    8eba:	69a0      	ldr	r0, [r4, #24]
    8ebc:	2100      	movs	r1, #0
    8ebe:	302c      	adds	r0, #44	; 0x2c
    8ec0:	f006 f9a3 	bl	f20a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    8ec4:	2101      	movs	r1, #1
    8ec6:	2000      	movs	r0, #0
    8ec8:	f006 fbfa 	bl	f6c0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x124>
    8ecc:	69a7      	ldr	r7, [r4, #24]
    8ece:	1971      	adds	r1, r6, r5
    8ed0:	4408      	add	r0, r1
    8ed2:	f200 49af 	addw	r9, r0, #1199	; 0x4af
    8ed6:	f8d7 800c 	ldr.w	r8, [r7, #12]
    8eda:	f002 fb29 	bl	b530 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    8ede:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    8ee2:	4288      	cmp	r0, r1
    8ee4:	d00a      	beq.n	8efc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x388>
    8ee6:	464a      	mov	r2, r9
    8ee8:	4641      	mov	r1, r8
    8eea:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    8eee:	f006 fd15 	bl	f91c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    8ef2:	4540      	cmp	r0, r8
    8ef4:	d903      	bls.n	8efe <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x38a>
    8ef6:	f44f 61bf 	mov.w	r1, #1528	; 0x5f8
    8efa:	e022      	b.n	8f42 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3ce>
    8efc:	2000      	movs	r0, #0
    8efe:	4922      	ldr	r1, [pc, #136]	; (8f88 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x414>)
    8f00:	4607      	mov	r7, r0
    8f02:	6849      	ldr	r1, [r1, #4]
    8f04:	4288      	cmp	r0, r1
    8f06:	69a0      	ldr	r0, [r4, #24]
    8f08:	68c1      	ldr	r1, [r0, #12]
    8f0a:	d202      	bcs.n	8f12 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x39e>
    8f0c:	440f      	add	r7, r1
    8f0e:	6201      	str	r1, [r0, #32]
    8f10:	e008      	b.n	8f24 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3b0>
    8f12:	4638      	mov	r0, r7
    8f14:	f005 fec4 	bl	eca0 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    8f18:	69a1      	ldr	r1, [r4, #24]
    8f1a:	68c9      	ldr	r1, [r1, #12]
    8f1c:	f005 febc 	bl	ec98 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8f20:	69a1      	ldr	r1, [r4, #24]
    8f22:	6208      	str	r0, [r1, #32]
    8f24:	69a0      	ldr	r0, [r4, #24]
    8f26:	68c1      	ldr	r1, [r0, #12]
    8f28:	2005      	movs	r0, #5
    8f2a:	f005 febf 	bl	ecac <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8f2e:	69a1      	ldr	r1, [r4, #24]
    8f30:	b280      	uxth	r0, r0
    8f32:	8388      	strh	r0, [r1, #28]
    8f34:	69a1      	ldr	r1, [r4, #24]
    8f36:	6a09      	ldr	r1, [r1, #32]
    8f38:	1a79      	subs	r1, r7, r1
    8f3a:	4288      	cmp	r0, r1
    8f3c:	d804      	bhi.n	8f48 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3d4>
    8f3e:	f640 21ee 	movw	r1, #2798	; 0xaee
    8f42:	2035      	movs	r0, #53	; 0x35
    8f44:	f7fb fee8 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f48:	2101      	movs	r1, #1
    8f4a:	4650      	mov	r0, sl
    8f4c:	f006 fbb8 	bl	f6c0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x124>
    8f50:	4428      	add	r0, r5
    8f52:	19c5      	adds	r5, r0, r7
    8f54:	2101      	movs	r1, #1
    8f56:	4650      	mov	r0, sl
    8f58:	f005 fdd4 	bl	eb04 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8f5c:	4405      	add	r5, r0
    8f5e:	2001      	movs	r0, #1
    8f60:	f007 fc4a 	bl	107f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8f64:	f64a 2113 	movw	r1, #43539	; 0xaa13
    8f68:	4408      	add	r0, r1
    8f6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8f6e:	fbb0 f0f1 	udiv	r0, r0, r1
    8f72:	1a29      	subs	r1, r5, r0
    8f74:	4630      	mov	r0, r6
    8f76:	f7f9 fb01 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8f7a:	69a1      	ldr	r1, [r4, #24]
    8f7c:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    8f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8f84:	200010a8 	.word	0x200010a8
    8f88:	200000fc 	.word	0x200000fc
    8f8c:	b510      	push	{r4, lr}
    8f8e:	4c06      	ldr	r4, [pc, #24]	; (8fa8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x434>)
    8f90:	7b20      	ldrb	r0, [r4, #12]
    8f92:	2800      	cmp	r0, #0
    8f94:	d006      	beq.n	8fa4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x430>
    8f96:	f003 fc33 	bl	c800 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8f9a:	f7fa fa01 	bl	33a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8f9e:	2000      	movs	r0, #0
    8fa0:	7320      	strb	r0, [r4, #12]
    8fa2:	7360      	strb	r0, [r4, #13]
    8fa4:	bd10      	pop	{r4, pc}
    8fa6:	0000      	.short	0x0000
    8fa8:	200010a8 	.word	0x200010a8
    8fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8fb0:	4d11      	ldr	r5, [pc, #68]	; (8ff8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x484>)
    8fb2:	4616      	mov	r6, r2
    8fb4:	460f      	mov	r7, r1
    8fb6:	2400      	movs	r4, #0
    8fb8:	6068      	str	r0, [r5, #4]
    8fba:	f006 fb75 	bl	f6a8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    8fbe:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8ffc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x488>
    8fc2:	2100      	movs	r1, #0
    8fc4:	f81c 2001 	ldrb.w	r2, [ip, r1]
    8fc8:	4232      	tst	r2, r6
    8fca:	d007      	beq.n	8fdc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x468>
    8fcc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    8fd0:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    8fd4:	1a1b      	subs	r3, r3, r0
    8fd6:	1c64      	adds	r4, r4, #1
    8fd8:	b2e4      	uxtb	r4, r4
    8fda:	6093      	str	r3, [r2, #8]
    8fdc:	1c49      	adds	r1, r1, #1
    8fde:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    8fe2:	d0ef      	beq.n	8fc4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x450>
    8fe4:	f016 0f0e 	tst.w	r6, #14
    8fe8:	d004      	beq.n	8ff4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x480>
    8fea:	f640 11b8 	movw	r1, #2488	; 0x9b8
    8fee:	2035      	movs	r0, #53	; 0x35
    8ff0:	f7fb fe92 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ff8:	200010a8 	.word	0x200010a8
    8ffc:	0001095b 	.word	0x0001095b
    9000:	b570      	push	{r4, r5, r6, lr}
    9002:	460d      	mov	r5, r1
    9004:	0004      	movs	r4, r0
    9006:	d00c      	beq.n	9022 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x4ae>
    9008:	2001      	movs	r0, #1
    900a:	f006 fab8 	bl	f57e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    900e:	b2c6      	uxtb	r6, r0
    9010:	200b      	movs	r0, #11
    9012:	f006 fab4 	bl	f57e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    9016:	b2c0      	uxtb	r0, r0
    9018:	4286      	cmp	r6, r0
    901a:	d005      	beq.n	9028 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x4b4>
    901c:	f44f 711a 	mov.w	r1, #616	; 0x268
    9020:	e061      	b.n	90e6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x572>
    9022:	f240 2165 	movw	r1, #613	; 0x265
    9026:	e05e      	b.n	90e6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x572>
    9028:	2d09      	cmp	r5, #9
    902a:	d25f      	bcs.n	90ec <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x578>
    902c:	e8df f005 	tbb	[pc, r5]
    9030:	3d3d3505 	.word	0x3d3d3505
    9034:	4b445e39 	.word	0x4b445e39
    9038:	0059      	.short	0x0059
    903a:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    903e:	b348      	cbz	r0, 9094 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x520>
    9040:	4620      	mov	r0, r4
    9042:	f000 fd69 	bl	9b18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    9046:	f006 fb2f 	bl	f6a8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    904a:	f200 1037 	addw	r0, r0, #311	; 0x137
    904e:	b285      	uxth	r5, r0
    9050:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    9054:	2128      	movs	r1, #40	; 0x28
    9056:	f006 fac3 	bl	f5e0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x44>
    905a:	182e      	adds	r6, r5, r0
    905c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    905e:	68e0      	ldr	r0, [r4, #12]
    9060:	4288      	cmp	r0, r1
    9062:	d200      	bcs.n	9066 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x4f2>
    9064:	4601      	mov	r1, r0
    9066:	4632      	mov	r2, r6
    9068:	4620      	mov	r0, r4
    906a:	f006 f857 	bl	f11c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    906e:	4d21      	ldr	r5, [pc, #132]	; (90f4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x580>)
    9070:	4632      	mov	r2, r6
    9072:	6068      	str	r0, [r5, #4]
    9074:	4620      	mov	r0, r4
    9076:	68e1      	ldr	r1, [r4, #12]
    9078:	f006 f850 	bl	f11c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    907c:	60a8      	str	r0, [r5, #8]
    907e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9082:	f006 f8ac 	bl	f1de <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9086:	f5a0 7093 	sub.w	r0, r0, #294	; 0x126
    908a:	60e8      	str	r0, [r5, #12]
    908c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9090:	f7fa ba68 	b.w	3564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9094:	f240 216e 	movw	r1, #622	; 0x26e
    9098:	e025      	b.n	90e6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x572>
    909a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    909e:	f006 bb95 	b.w	f7cc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    90a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90a6:	f003 bd5b 	b.w	cb60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    90aa:	4620      	mov	r0, r4
    90ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90b0:	2201      	movs	r2, #1
    90b2:	2100      	movs	r1, #0
    90b4:	f006 bad8 	b.w	f668 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xcc>
    90b8:	2001      	movs	r0, #1
    90ba:	f7f9 f933 	bl	2324 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    90be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90c2:	f005 bba9 	b.w	e818 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    90c6:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    90ca:	2804      	cmp	r0, #4
    90cc:	d002      	beq.n	90d4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x560>
    90ce:	f240 21a2 	movw	r1, #674	; 0x2a2
    90d2:	e008      	b.n	90e6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x572>
    90d4:	4620      	mov	r0, r4
    90d6:	f006 faaf 	bl	f638 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x9c>
    90da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90de:	f002 ba4f 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    90e2:	f240 21ad 	movw	r1, #685	; 0x2ad
    90e6:	2035      	movs	r0, #53	; 0x35
    90e8:	f7fb fe16 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90ec:	f240 21b1 	movw	r1, #689	; 0x2b1
    90f0:	e7f9      	b.n	90e6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x572>
    90f2:	0000      	.short	0x0000
    90f4:	20001098 	.word	0x20001098
    90f8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    90fc:	4605      	mov	r5, r0
    90fe:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    9102:	2600      	movs	r6, #0
    9104:	f8d1 b020 	ldr.w	fp, [r1, #32]
    9108:	469a      	mov	sl, r3
    910a:	460c      	mov	r4, r1
    910c:	280d      	cmp	r0, #13
    910e:	d020      	beq.n	9152 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5de>
    9110:	280c      	cmp	r0, #12
    9112:	d01e      	beq.n	9152 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5de>
    9114:	2824      	cmp	r0, #36	; 0x24
    9116:	d01c      	beq.n	9152 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5de>
    9118:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    911c:	2824      	cmp	r0, #36	; 0x24
    911e:	d018      	beq.n	9152 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5de>
    9120:	2000      	movs	r0, #0
    9122:	4680      	mov	r8, r0
    9124:	f006 fab5 	bl	f692 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    9128:	4681      	mov	r9, r0
    912a:	f1ba 0f00 	cmp.w	sl, #0
    912e:	d003      	beq.n	9138 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c4>
    9130:	2101      	movs	r1, #1
    9132:	4620      	mov	r0, r4
    9134:	f006 faf1 	bl	f71a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    9138:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    913c:	2701      	movs	r7, #1
    913e:	b150      	cbz	r0, 9156 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5e2>
    9140:	2801      	cmp	r0, #1
    9142:	d01b      	beq.n	917c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x608>
    9144:	2802      	cmp	r0, #2
    9146:	d011      	beq.n	916c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5f8>
    9148:	2803      	cmp	r0, #3
    914a:	d017      	beq.n	917c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x608>
    914c:	f640 113b 	movw	r1, #2363	; 0x93b
    9150:	e07b      	b.n	924a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6d6>
    9152:	2001      	movs	r0, #1
    9154:	e7e5      	b.n	9122 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5ae>
    9156:	9802      	ldr	r0, [sp, #8]
    9158:	b128      	cbz	r0, 9166 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5f2>
    915a:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
    915e:	4620      	mov	r0, r4
    9160:	f006 fa40 	bl	f5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    9164:	e00b      	b.n	917e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x60a>
    9166:	f640 1101 	movw	r1, #2305	; 0x901
    916a:	e06e      	b.n	924a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6d6>
    916c:	4838      	ldr	r0, [pc, #224]	; (9250 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6dc>)
    916e:	6801      	ldr	r1, [r0, #0]
    9170:	2003      	movs	r0, #3
    9172:	eb01 060b 	add.w	r6, r1, fp
    9176:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    917a:	e000      	b.n	917e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x60a>
    917c:	68e6      	ldr	r6, [r4, #12]
    917e:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    9182:	4631      	mov	r1, r6
    9184:	f7f9 f9fa 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9188:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    918c:	60e8      	str	r0, [r5, #12]
    918e:	2000      	movs	r0, #0
    9190:	7028      	strb	r0, [r5, #0]
    9192:	f8a5 9008 	strh.w	r9, [r5, #8]
    9196:	4620      	mov	r0, r4
    9198:	f000 fc0c 	bl	99b4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    919c:	f1a8 0101 	sub.w	r1, r8, #1
    91a0:	4208      	tst	r0, r1
    91a2:	d101      	bne.n	91a8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x634>
    91a4:	72af      	strb	r7, [r5, #10]
    91a6:	e005      	b.n	91b4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x640>
    91a8:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    91ac:	2801      	cmp	r0, #1
    91ae:	d017      	beq.n	91e0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x66c>
    91b0:	2003      	movs	r0, #3
    91b2:	72a8      	strb	r0, [r5, #10]
    91b4:	46b9      	mov	r9, r7
    91b6:	72ef      	strb	r7, [r5, #11]
    91b8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    91bc:	f006 f80f 	bl	f1de <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    91c0:	6068      	str	r0, [r5, #4]
    91c2:	f1ba 0f00 	cmp.w	sl, #0
    91c6:	d03c      	beq.n	9242 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6ce>
    91c8:	4631      	mov	r1, r6
    91ca:	4628      	mov	r0, r5
    91cc:	f005 fcf9 	bl	ebc2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    91d0:	b287      	uxth	r7, r0
    91d2:	4620      	mov	r0, r4
    91d4:	f000 fbee 	bl	99b4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    91d8:	f1b8 0f00 	cmp.w	r8, #0
    91dc:	d002      	beq.n	91e4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x670>
    91de:	e014      	b.n	920a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x696>
    91e0:	2002      	movs	r0, #2
    91e2:	e7e6      	b.n	91b2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x63e>
    91e4:	42b8      	cmp	r0, r7
    91e6:	d810      	bhi.n	920a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x696>
    91e8:	4607      	mov	r7, r0
    91ea:	f885 900a 	strb.w	r9, [r5, #10]
    91ee:	fb06 f107 	mul.w	r1, r6, r7
    91f2:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    91f6:	f7f9 f9c1 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    91fa:	60e8      	str	r0, [r5, #12]
    91fc:	b31e      	cbz	r6, 9246 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6d2>
    91fe:	4631      	mov	r1, r6
    9200:	4628      	mov	r0, r5
    9202:	f005 fcde 	bl	ebc2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9206:	4438      	add	r0, r7
    9208:	b287      	uxth	r7, r0
    920a:	4639      	mov	r1, r7
    920c:	4620      	mov	r0, r4
    920e:	f006 fa84 	bl	f71a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    9212:	68e8      	ldr	r0, [r5, #12]
    9214:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    9218:	6f20      	ldr	r0, [r4, #112]	; 0x70
    921a:	2800      	cmp	r0, #0
    921c:	d011      	beq.n	9242 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6ce>
    921e:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    9222:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
    9226:	1a40      	subs	r0, r0, r1
    9228:	b202      	sxth	r2, r0
    922a:	2a00      	cmp	r2, #0
    922c:	dd09      	ble.n	9242 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6ce>
    922e:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    9232:	4402      	add	r2, r0
    9234:	1e52      	subs	r2, r2, #1
    9236:	fb92 f2f0 	sdiv	r2, r2, r0
    923a:	b292      	uxth	r2, r2
    923c:	fb02 1000 	mla	r0, r2, r0, r1
    9240:	86e0      	strh	r0, [r4, #54]	; 0x36
    9242:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9246:	f640 1176 	movw	r1, #2422	; 0x976
    924a:	2035      	movs	r0, #53	; 0x35
    924c:	f7fb fd64 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9250:	200000fc 	.word	0x200000fc
    9254:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    9258:	460d      	mov	r5, r1
    925a:	4607      	mov	r7, r0
    925c:	f000 fa58 	bl	9710 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb9c>
    9260:	4c1d      	ldr	r4, [pc, #116]	; (92d8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x764>)
    9262:	6861      	ldr	r1, [r4, #4]
    9264:	f7f9 f98a 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9268:	4606      	mov	r6, r0
    926a:	4601      	mov	r1, r0
    926c:	4638      	mov	r0, r7
    926e:	f7f9 f9b7 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9272:	4607      	mov	r7, r0
    9274:	f006 fa1e 	bl	f6b4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x118>
    9278:	4287      	cmp	r7, r0
    927a:	da10      	bge.n	929e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x72a>
    927c:	6960      	ldr	r0, [r4, #20]
    927e:	f000 fa47 	bl	9710 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb9c>
    9282:	4631      	mov	r1, r6
    9284:	f7f9 f9ac 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9288:	6861      	ldr	r1, [r4, #4]
    928a:	fbb0 f0f1 	udiv	r0, r0, r1
    928e:	6028      	str	r0, [r5, #0]
    9290:	6861      	ldr	r1, [r4, #4]
    9292:	b004      	add	sp, #16
    9294:	4630      	mov	r0, r6
    9296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    929a:	f7f9 b96f 	b.w	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    929e:	2000      	movs	r0, #0
    92a0:	f88d 0000 	strb.w	r0, [sp]
    92a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    92a6:	9001      	str	r0, [sp, #4]
    92a8:	f006 f9f3 	bl	f692 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    92ac:	f8ad 0008 	strh.w	r0, [sp, #8]
    92b0:	2001      	movs	r0, #1
    92b2:	f88d 000b 	strb.w	r0, [sp, #11]
    92b6:	6960      	ldr	r0, [r4, #20]
    92b8:	f000 fa2a 	bl	9710 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb9c>
    92bc:	9003      	str	r0, [sp, #12]
    92be:	f000 f9c1 	bl	9644 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xad0>
    92c2:	f88d 000a 	strb.w	r0, [sp, #10]
    92c6:	4668      	mov	r0, sp
    92c8:	6861      	ldr	r1, [r4, #4]
    92ca:	f005 fc7a 	bl	ebc2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    92ce:	6028      	str	r0, [r5, #0]
    92d0:	9803      	ldr	r0, [sp, #12]
    92d2:	b004      	add	sp, #16
    92d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92d8:	200010a8 	.word	0x200010a8
    92dc:	b510      	push	{r4, lr}
    92de:	2400      	movs	r4, #0
    92e0:	f006 f9e2 	bl	f6a8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    92e4:	4a06      	ldr	r2, [pc, #24]	; (9300 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x78c>)
    92e6:	2100      	movs	r1, #0
    92e8:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    92ec:	4404      	add	r4, r0
    92ee:	689b      	ldr	r3, [r3, #8]
    92f0:	1c49      	adds	r1, r1, #1
    92f2:	441c      	add	r4, r3
    92f4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    92f8:	d0f6      	beq.n	92e8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x774>
    92fa:	4620      	mov	r0, r4
    92fc:	bd10      	pop	{r4, pc}
    92fe:	0000      	.short	0x0000
    9300:	200010a8 	.word	0x200010a8
    9304:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9306:	4c1b      	ldr	r4, [pc, #108]	; (9374 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x800>)
    9308:	4606      	mov	r6, r0
    930a:	460d      	mov	r5, r1
    930c:	78a0      	ldrb	r0, [r4, #2]
    930e:	b360      	cbz	r0, 936a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7f6>
    9310:	4919      	ldr	r1, [pc, #100]	; (9378 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x804>)
    9312:	6a20      	ldr	r0, [r4, #32]
    9314:	4288      	cmp	r0, r1
    9316:	d828      	bhi.n	936a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7f6>
    9318:	2000      	movs	r0, #0
    931a:	f88d 0000 	strb.w	r0, [sp]
    931e:	9501      	str	r5, [sp, #4]
    9320:	f006 f9b7 	bl	f692 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    9324:	f8ad 0008 	strh.w	r0, [sp, #8]
    9328:	2001      	movs	r0, #1
    932a:	f88d 000b 	strb.w	r0, [sp, #11]
    932e:	f006 f9c1 	bl	f6b4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x118>
    9332:	4601      	mov	r1, r0
    9334:	4630      	mov	r0, r6
    9336:	f7f9 f921 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    933a:	9003      	str	r0, [sp, #12]
    933c:	2003      	movs	r0, #3
    933e:	f88d 000a 	strb.w	r0, [sp, #10]
    9342:	4668      	mov	r0, sp
    9344:	f7f9 fc58 	bl	2bf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    9348:	4606      	mov	r6, r0
    934a:	4629      	mov	r1, r5
    934c:	9803      	ldr	r0, [sp, #12]
    934e:	f7f9 f915 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9352:	4605      	mov	r5, r0
    9354:	6a21      	ldr	r1, [r4, #32]
    9356:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9358:	f7f9 f910 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    935c:	4601      	mov	r1, r0
    935e:	b13e      	cbz	r6, 9370 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7fc>
    9360:	4628      	mov	r0, r5
    9362:	f7f9 f93d 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9366:	2800      	cmp	r0, #0
    9368:	db02      	blt.n	9370 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7fc>
    936a:	2001      	movs	r0, #1
    936c:	b004      	add	sp, #16
    936e:	bd70      	pop	{r4, r5, r6, pc}
    9370:	2000      	movs	r0, #0
    9372:	e7fb      	b.n	936c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7f8>
    9374:	200010a8 	.word	0x200010a8
    9378:	07a12000 	.word	0x07a12000
    937c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9380:	f003 ff5d 	bl	d23e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    9384:	4c21      	ldr	r4, [pc, #132]	; (940c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x898>)
    9386:	4607      	mov	r7, r0
    9388:	6920      	ldr	r0, [r4, #16]
    938a:	f000 f95b 	bl	9644 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xad0>
    938e:	4606      	mov	r6, r0
    9390:	f7f9 f89a 	bl	24c8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    9394:	4605      	mov	r5, r0
    9396:	2864      	cmp	r0, #100	; 0x64
    9398:	d326      	bcc.n	93e8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x874>
    939a:	1c68      	adds	r0, r5, #1
    939c:	d027      	beq.n	93ee <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x87a>
    939e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    93a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    93a2:	1948      	adds	r0, r1, r5
    93a4:	4282      	cmp	r2, r0
    93a6:	d800      	bhi.n	93aa <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x836>
    93a8:	1a55      	subs	r5, r2, r1
    93aa:	f06f 0138 	mvn.w	r1, #56	; 0x38
    93ae:	4638      	mov	r0, r7
    93b0:	f7f9 f8e4 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    93b4:	4629      	mov	r1, r5
    93b6:	f000 f9bd 	bl	9734 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbc0>
    93ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
    93bc:	4408      	add	r0, r1
    93be:	6a61      	ldr	r1, [r4, #36]	; 0x24
    93c0:	1a45      	subs	r5, r0, r1
    93c2:	f241 3088 	movw	r0, #5000	; 0x1388
    93c6:	4285      	cmp	r5, r0
    93c8:	d900      	bls.n	93cc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x858>
    93ca:	4605      	mov	r5, r0
    93cc:	f003 ff37 	bl	d23e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    93d0:	4601      	mov	r1, r0
    93d2:	4638      	mov	r0, r7
    93d4:	f7f9 f904 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    93d8:	309b      	adds	r0, #155	; 0x9b
    93da:	4285      	cmp	r5, r0
    93dc:	d304      	bcc.n	93e8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x874>
    93de:	4631      	mov	r1, r6
    93e0:	4628      	mov	r0, r5
    93e2:	f7f8 ffaf 	bl	2344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    93e6:	b120      	cbz	r0, 93f2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x87e>
    93e8:	2000      	movs	r0, #0
    93ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    93ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    93f0:	e7e5      	b.n	93be <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x84a>
    93f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    93f4:	4905      	ldr	r1, [pc, #20]	; (940c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x898>)
    93f6:	4428      	add	r0, r5
    93f8:	3910      	subs	r1, #16
    93fa:	6260      	str	r0, [r4, #36]	; 0x24
    93fc:	68c8      	ldr	r0, [r1, #12]
    93fe:	4428      	add	r0, r5
    9400:	60c8      	str	r0, [r1, #12]
    9402:	f7fa f8af 	bl	3564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9406:	2001      	movs	r0, #1
    9408:	e7ef      	b.n	93ea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x876>
    940a:	0000      	.short	0x0000
    940c:	200010a8 	.word	0x200010a8
    9410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9414:	b08c      	sub	sp, #48	; 0x30
    9416:	4616      	mov	r6, r2
    9418:	4607      	mov	r7, r0
    941a:	f003 ff10 	bl	d23e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    941e:	4c87      	ldr	r4, [pc, #540]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    9420:	9002      	str	r0, [sp, #8]
    9422:	2500      	movs	r5, #0
    9424:	f8d4 a008 	ldr.w	sl, [r4, #8]
    9428:	f006 f93e 	bl	f6a8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    942c:	68a1      	ldr	r1, [r4, #8]
    942e:	4408      	add	r0, r1
    9430:	6861      	ldr	r1, [r4, #4]
    9432:	4288      	cmp	r0, r1
    9434:	d101      	bne.n	943a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x8c6>
    9436:	2001      	movs	r0, #1
    9438:	e000      	b.n	943c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x8c8>
    943a:	2000      	movs	r0, #0
    943c:	4683      	mov	fp, r0
    943e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9440:	ea06 090b 	and.w	r9, r6, fp
    9444:	2800      	cmp	r0, #0
    9446:	d065      	beq.n	9514 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9a0>
    9448:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    944c:	9802      	ldr	r0, [sp, #8]
    944e:	f7f9 f895 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9452:	9000      	str	r0, [sp, #0]
    9454:	f002 f872 	bl	b53c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    9458:	4680      	mov	r8, r0
    945a:	4878      	ldr	r0, [pc, #480]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    945c:	7800      	ldrb	r0, [r0, #0]
    945e:	4e77      	ldr	r6, [pc, #476]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    9460:	362c      	adds	r6, #44	; 0x2c
    9462:	2805      	cmp	r0, #5
    9464:	d12e      	bne.n	94c4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x950>
    9466:	4875      	ldr	r0, [pc, #468]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    9468:	6980      	ldr	r0, [r0, #24]
    946a:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    946e:	f002 f845 	bl	b4fc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    9472:	4604      	mov	r4, r0
    9474:	4540      	cmp	r0, r8
    9476:	d009      	beq.n	948c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x918>
    9478:	4870      	ldr	r0, [pc, #448]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    947a:	4621      	mov	r1, r4
    947c:	6980      	ldr	r0, [r0, #24]
    947e:	f500 7084 	add.w	r0, r0, #264	; 0x108
    9482:	f001 ffff 	bl	b484 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    9486:	2000      	movs	r0, #0
    9488:	6170      	str	r0, [r6, #20]
    948a:	e00c      	b.n	94a6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x932>
    948c:	496b      	ldr	r1, [pc, #428]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    948e:	6988      	ldr	r0, [r1, #24]
    9490:	f500 7084 	add.w	r0, r0, #264	; 0x108
    9494:	6170      	str	r0, [r6, #20]
    9496:	698a      	ldr	r2, [r1, #24]
    9498:	6b08      	ldr	r0, [r1, #48]	; 0x30
    949a:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
    949e:	4290      	cmp	r0, r2
    94a0:	d200      	bcs.n	94a4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x930>
    94a2:	4610      	mov	r0, r2
    94a4:	6308      	str	r0, [r1, #48]	; 0x30
    94a6:	4865      	ldr	r0, [pc, #404]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    94a8:	6980      	ldr	r0, [r0, #24]
    94aa:	b130      	cbz	r0, 94ba <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x946>
    94ac:	b144      	cbz	r4, 94c0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x94c>
    94ae:	e9d4 1200 	ldrd	r1, r2, [r4]
    94b2:	4411      	add	r1, r2
    94b4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    94b8:	e004      	b.n	94c4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x950>
    94ba:	f240 51c7 	movw	r1, #1479	; 0x5c7
    94be:	e017      	b.n	94f0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x97c>
    94c0:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    94c4:	4641      	mov	r1, r8
    94c6:	4630      	mov	r0, r6
    94c8:	f001 ffdc 	bl	b484 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    94cc:	ea5f 0008 	movs.w	r0, r8
    94d0:	f8df 8168 	ldr.w	r8, [pc, #360]	; 963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>
    94d4:	9a00      	ldr	r2, [sp, #0]
    94d6:	f8d8 4004 	ldr.w	r4, [r8, #4]
    94da:	d00c      	beq.n	94f6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x982>
    94dc:	e9d0 1000 	ldrd	r1, r0, [r0]
    94e0:	4408      	add	r0, r1
    94e2:	4621      	mov	r1, r4
    94e4:	f006 fa1a 	bl	f91c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    94e8:	42a0      	cmp	r0, r4
    94ea:	d904      	bls.n	94f6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x982>
    94ec:	f240 51e5 	movw	r1, #1509	; 0x5e5
    94f0:	2035      	movs	r0, #53	; 0x35
    94f2:	f7fb fc11 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94f6:	4601      	mov	r1, r0
    94f8:	9800      	ldr	r0, [sp, #0]
    94fa:	f7f9 f83f 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    94fe:	4606      	mov	r6, r0
    9500:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9504:	4644      	mov	r4, r8
    9506:	4241      	negs	r1, r0
    9508:	4630      	mov	r0, r6
    950a:	f7f9 f837 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    950e:	62e0      	str	r0, [r4, #44]	; 0x2c
    9510:	2001      	movs	r0, #1
    9512:	e042      	b.n	959a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa26>
    9514:	f1b9 0f00 	cmp.w	r9, #0
    9518:	d018      	beq.n	954c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9d8>
    951a:	2001      	movs	r0, #1
    951c:	f006 f846 	bl	f5ac <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    9520:	4604      	mov	r4, r0
    9522:	2001      	movs	r0, #1
    9524:	f007 f968 	bl	107f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9528:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    952c:	4401      	add	r1, r0
    952e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9532:	fbb1 f0f0 	udiv	r0, r1, r0
    9536:	1821      	adds	r1, r4, r0
    9538:	31f0      	adds	r1, #240	; 0xf0
    953a:	9802      	ldr	r0, [sp, #8]
    953c:	f7ff fee2 	bl	9304 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x790>
    9540:	b908      	cbnz	r0, 9546 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9d2>
    9542:	f04f 0a00 	mov.w	sl, #0
    9546:	9e02      	ldr	r6, [sp, #8]
    9548:	9508      	str	r5, [sp, #32]
    954a:	e027      	b.n	959c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa28>
    954c:	b12e      	cbz	r6, 955a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9e6>
    954e:	a908      	add	r1, sp, #32
    9550:	9802      	ldr	r0, [sp, #8]
    9552:	f7ff fe7f 	bl	9254 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6e0>
    9556:	4606      	mov	r6, r0
    9558:	e020      	b.n	959c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa28>
    955a:	9802      	ldr	r0, [sp, #8]
    955c:	f000 f8d8 	bl	9710 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb9c>
    9560:	4c36      	ldr	r4, [pc, #216]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    9562:	e9d4 1a01 	ldrd	r1, sl, [r4, #4]
    9566:	f7f9 f809 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    956a:	4606      	mov	r6, r0
    956c:	6920      	ldr	r0, [r4, #16]
    956e:	f000 f8c3 	bl	96f8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb84>
    9572:	6861      	ldr	r1, [r4, #4]
    9574:	4348      	muls	r0, r1
    9576:	78a1      	ldrb	r1, [r4, #2]
    9578:	b131      	cbz	r1, 9588 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa14>
    957a:	6a21      	ldr	r1, [r4, #32]
    957c:	4281      	cmp	r1, r0
    957e:	d302      	bcc.n	9586 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa12>
    9580:	1a09      	subs	r1, r1, r0
    9582:	6221      	str	r1, [r4, #32]
    9584:	e000      	b.n	9588 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa14>
    9586:	6225      	str	r5, [r4, #32]
    9588:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    958a:	4601      	mov	r1, r0
    958c:	4610      	mov	r0, r2
    958e:	f7f8 fff5 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9592:	62e0      	str	r0, [r4, #44]	; 0x2c
    9594:	4630      	mov	r0, r6
    9596:	f000 f8af 	bl	96f8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb84>
    959a:	9008      	str	r0, [sp, #32]
    959c:	2001      	movs	r0, #1
    959e:	f006 f805 	bl	f5ac <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    95a2:	4604      	mov	r4, r0
    95a4:	2001      	movs	r0, #1
    95a6:	f007 f927 	bl	107f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    95aa:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    95ae:	4401      	add	r1, r0
    95b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    95b4:	fbb1 f0f0 	udiv	r0, r1, r0
    95b8:	4404      	add	r4, r0
    95ba:	4651      	mov	r1, sl
    95bc:	4630      	mov	r0, r6
    95be:	34f0      	adds	r4, #240	; 0xf0
    95c0:	f000 f8b8 	bl	9734 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbc0>
    95c4:	491d      	ldr	r1, [pc, #116]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    95c6:	eb01 0285 	add.w	r2, r1, r5, lsl #2
    95ca:	6892      	ldr	r2, [r2, #8]
    95cc:	4282      	cmp	r2, r0
    95ce:	d800      	bhi.n	95d2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa5e>
    95d0:	4610      	mov	r0, r2
    95d2:	6288      	str	r0, [r1, #40]	; 0x28
    95d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    95d6:	b102      	cbz	r2, 95da <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa66>
    95d8:	610e      	str	r6, [r1, #16]
    95da:	4688      	mov	r8, r1
    95dc:	614e      	str	r6, [r1, #20]
    95de:	f1bb 0f00 	cmp.w	fp, #0
    95e2:	d002      	beq.n	95ea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa76>
    95e4:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    95e8:	e001      	b.n	95ee <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa7a>
    95ea:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    95ee:	f04f 0a01 	mov.w	sl, #1
    95f2:	f887 a00b 	strb.w	sl, [r7, #11]
    95f6:	f006 f84c 	bl	f692 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    95fa:	8138      	strh	r0, [r7, #8]
    95fc:	4630      	mov	r0, r6
    95fe:	f000 f821 	bl	9644 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xad0>
    9602:	72b8      	strb	r0, [r7, #10]
    9604:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    9608:	6078      	str	r0, [r7, #4]
    960a:	f1b9 0f00 	cmp.w	r9, #0
    960e:	d008      	beq.n	9622 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaae>
    9610:	f887 a000 	strb.w	sl, [r7]
    9614:	490a      	ldr	r1, [pc, #40]	; (9640 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xacc>)
    9616:	9802      	ldr	r0, [sp, #8]
    9618:	f000 f88c 	bl	9734 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbc0>
    961c:	1b00      	subs	r0, r0, r4
    961e:	60f8      	str	r0, [r7, #12]
    9620:	e001      	b.n	9626 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xab2>
    9622:	703d      	strb	r5, [r7, #0]
    9624:	60fe      	str	r6, [r7, #12]
    9626:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    962a:	42a0      	cmp	r0, r4
    962c:	d303      	bcc.n	9636 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac2>
    962e:	2001      	movs	r0, #1
    9630:	b00f      	add	sp, #60	; 0x3c
    9632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9636:	2000      	movs	r0, #0
    9638:	e7fa      	b.n	9630 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xabc>
    963a:	0000      	.short	0x0000
    963c:	200010a8 	.word	0x200010a8
    9640:	07a12000 	.word	0x07a12000
    9644:	4a09      	ldr	r2, [pc, #36]	; (966c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaf8>)
    9646:	b510      	push	{r4, lr}
    9648:	7811      	ldrb	r1, [r2, #0]
    964a:	2904      	cmp	r1, #4
    964c:	d10c      	bne.n	9668 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaf4>
    964e:	6851      	ldr	r1, [r2, #4]
    9650:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    9652:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    9656:	004c      	lsls	r4, r1, #1
    9658:	4601      	mov	r1, r0
    965a:	4610      	mov	r0, r2
    965c:	f7f8 ffc0 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9660:	42a0      	cmp	r0, r4
    9662:	d201      	bcs.n	9668 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaf4>
    9664:	2003      	movs	r0, #3
    9666:	bd10      	pop	{r4, pc}
    9668:	2002      	movs	r0, #2
    966a:	bd10      	pop	{r4, pc}
    966c:	200010a8 	.word	0x200010a8
    9670:	b570      	push	{r4, r5, r6, lr}
    9672:	4d13      	ldr	r5, [pc, #76]	; (96c0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb4c>)
    9674:	7f28      	ldrb	r0, [r5, #28]
    9676:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    967a:	2800      	cmp	r0, #0
    967c:	7828      	ldrb	r0, [r5, #0]
    967e:	d00f      	beq.n	96a0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb2c>
    9680:	2805      	cmp	r0, #5
    9682:	d004      	beq.n	968e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb1a>
    9684:	f44f 7166 	mov.w	r1, #920	; 0x398
    9688:	2035      	movs	r0, #53	; 0x35
    968a:	f7fb fb45 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    968e:	4620      	mov	r0, r4
    9690:	f005 ff87 	bl	f5a2 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6>
    9694:	b178      	cbz	r0, 96b6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb42>
    9696:	4620      	mov	r0, r4
    9698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    969c:	f001 bed0 	b.w	b440 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    96a0:	2805      	cmp	r0, #5
    96a2:	d108      	bne.n	96b6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb42>
    96a4:	4620      	mov	r0, r4
    96a6:	f005 ff7c 	bl	f5a2 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6>
    96aa:	b920      	cbnz	r0, 96b6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb42>
    96ac:	69a8      	ldr	r0, [r5, #24]
    96ae:	f500 7084 	add.w	r0, r0, #264	; 0x108
    96b2:	f001 ff07 	bl	b4c4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    96b6:	4620      	mov	r0, r4
    96b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    96bc:	f001 bf02 	b.w	b4c4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    96c0:	200010a8 	.word	0x200010a8
    96c4:	b510      	push	{r4, lr}
    96c6:	f7fd ff4b 	bl	7560 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    96ca:	490a      	ldr	r1, [pc, #40]	; (96f4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb80>)
    96cc:	2000      	movs	r0, #0
    96ce:	70c8      	strb	r0, [r1, #3]
    96d0:	7708      	strb	r0, [r1, #28]
    96d2:	6188      	str	r0, [r1, #24]
    96d4:	7008      	strb	r0, [r1, #0]
    96d6:	f7fd fe95 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    96da:	4604      	mov	r4, r0
    96dc:	7800      	ldrb	r0, [r0, #0]
    96de:	f7f9 fd09 	bl	30f4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    96e2:	b110      	cbz	r0, 96ea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb76>
    96e4:	2020      	movs	r0, #32
    96e6:	7020      	strb	r0, [r4, #0]
    96e8:	bd10      	pop	{r4, pc}
    96ea:	f240 5131 	movw	r1, #1329	; 0x531
    96ee:	2035      	movs	r0, #53	; 0x35
    96f0:	f7fb fb12 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96f4:	200010a8 	.word	0x200010a8
    96f8:	b510      	push	{r4, lr}
    96fa:	4c04      	ldr	r4, [pc, #16]	; (970c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb98>)
    96fc:	4601      	mov	r1, r0
    96fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9700:	f7f8 ff6e 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9704:	6861      	ldr	r1, [r4, #4]
    9706:	fbb0 f0f1 	udiv	r0, r0, r1
    970a:	bd10      	pop	{r4, pc}
    970c:	200010a8 	.word	0x200010a8
    9710:	b510      	push	{r4, lr}
    9712:	4c07      	ldr	r4, [pc, #28]	; (9730 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbbc>)
    9714:	4601      	mov	r1, r0
    9716:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9718:	f7f8 ff62 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    971c:	6861      	ldr	r1, [r4, #4]
    971e:	fbb0 f2f1 	udiv	r2, r0, r1
    9722:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9728:	4351      	muls	r1, r2
    972a:	f7f8 bf27 	b.w	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    972e:	0000      	.short	0x0000
    9730:	200010a8 	.word	0x200010a8
    9734:	b570      	push	{r4, r5, r6, lr}
    9736:	4605      	mov	r5, r0
    9738:	480d      	ldr	r0, [pc, #52]	; (9770 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbfc>)
    973a:	460c      	mov	r4, r1
    973c:	7881      	ldrb	r1, [r0, #2]
    973e:	b1a9      	cbz	r1, 976c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbf8>
    9740:	4a0c      	ldr	r2, [pc, #48]	; (9774 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xc00>)
    9742:	6a01      	ldr	r1, [r0, #32]
    9744:	4291      	cmp	r1, r2
    9746:	d211      	bcs.n	976c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbf8>
    9748:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    974a:	f7f8 ff17 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    974e:	4606      	mov	r6, r0
    9750:	4621      	mov	r1, r4
    9752:	4628      	mov	r0, r5
    9754:	f7f8 ff12 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9758:	4601      	mov	r1, r0
    975a:	4630      	mov	r0, r6
    975c:	f7f8 ff40 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9760:	2800      	cmp	r0, #0
    9762:	dd03      	ble.n	976c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbf8>
    9764:	1a20      	subs	r0, r4, r0
    9766:	d500      	bpl.n	976a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbf6>
    9768:	2000      	movs	r0, #0
    976a:	bd70      	pop	{r4, r5, r6, pc}
    976c:	4620      	mov	r0, r4
    976e:	bd70      	pop	{r4, r5, r6, pc}
    9770:	200010a8 	.word	0x200010a8
    9774:	07a12000 	.word	0x07a12000

00009778 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    9778:	4806      	ldr	r0, [pc, #24]	; (9794 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    977a:	4905      	ldr	r1, [pc, #20]	; (9790 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    977c:	6501      	str	r1, [r0, #80]	; 0x50
    977e:	4906      	ldr	r1, [pc, #24]	; (9798 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    9780:	6541      	str	r1, [r0, #84]	; 0x54
    9782:	4807      	ldr	r0, [pc, #28]	; (97a0 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    9784:	4905      	ldr	r1, [pc, #20]	; (979c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    9786:	6501      	str	r1, [r0, #80]	; 0x50
    9788:	4906      	ldr	r1, [pc, #24]	; (97a4 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    978a:	6541      	str	r1, [r0, #84]	; 0x54
    978c:	4770      	bx	lr
    978e:	0000      	.short	0x0000
    9790:	0000a8d5 	.word	0x0000a8d5
    9794:	20000114 	.word	0x20000114
    9798:	0000a9a1 	.word	0x0000a9a1
    979c:	0000afd1 	.word	0x0000afd1
    97a0:	20000178 	.word	0x20000178
    97a4:	0000b001 	.word	0x0000b001

000097a8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI>:
    97a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    97aa:	460d      	mov	r5, r1
    97ac:	4607      	mov	r7, r0
    97ae:	2100      	movs	r1, #0
    97b0:	f004 ff57 	bl	e662 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    97b4:	1e04      	subs	r4, r0, #0
    97b6:	d051      	beq.n	985c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    97b8:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
    97bc:	2800      	cmp	r0, #0
    97be:	d04d      	beq.n	985c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    97c0:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    97c4:	f88d 0000 	strb.w	r0, [sp]
    97c8:	9800      	ldr	r0, [sp, #0]
    97ca:	9000      	str	r0, [sp, #0]
    97cc:	f89d 0000 	ldrb.w	r0, [sp]
    97d0:	2600      	movs	r6, #0
    97d2:	b158      	cbz	r0, 97ec <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x44>
    97d4:	706e      	strb	r6, [r5, #1]
    97d6:	2009      	movs	r0, #9
    97d8:	7028      	strb	r0, [r5, #0]
    97da:	220a      	movs	r2, #10
    97dc:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    97e0:	1d28      	adds	r0, r5, #4
    97e2:	f003 fea1 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    97e6:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    97ea:	e0e1      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    97ec:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    97f0:	280e      	cmp	r0, #14
    97f2:	d01d      	beq.n	9830 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x88>
    97f4:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    97f8:	280d      	cmp	r0, #13
    97fa:	d027      	beq.n	984c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xa4>
    97fc:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    9800:	f88d 0000 	strb.w	r0, [sp]
    9804:	9800      	ldr	r0, [sp, #0]
    9806:	9000      	str	r0, [sp, #0]
    9808:	f89d 0000 	ldrb.w	r0, [sp]
    980c:	b3b0      	cbz	r0, 987c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd4>
    980e:	706e      	strb	r6, [r5, #1]
    9810:	2008      	movs	r0, #8
    9812:	7028      	strb	r0, [r5, #0]
    9814:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    9818:	6068      	str	r0, [r5, #4]
    981a:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    981e:	60a8      	str	r0, [r5, #8]
    9820:	f8d4 01c2 	ldr.w	r0, [r4, #450]	; 0x1c2
    9824:	60e8      	str	r0, [r5, #12]
    9826:	f504 74dd 	add.w	r4, r4, #442	; 0x1ba
    982a:	f804 6c02 	strb.w	r6, [r4, #-2]
    982e:	e0bf      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    9830:	8820      	ldrh	r0, [r4, #0]
    9832:	f7fb fe6f 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9836:	4607      	mov	r7, r0
    9838:	f004 fde3 	bl	e402 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    983c:	b968      	cbnz	r0, 985a <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb2>
    983e:	706e      	strb	r6, [r5, #1]
    9840:	200e      	movs	r0, #14
    9842:	7028      	strb	r0, [r5, #0]
    9844:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    9848:	6068      	str	r0, [r5, #4]
    984a:	e011      	b.n	9870 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xc8>
    984c:	8820      	ldrh	r0, [r4, #0]
    984e:	f7fb fe61 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9852:	4607      	mov	r7, r0
    9854:	f004 fdd5 	bl	e402 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    9858:	b108      	cbz	r0, 985e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb6>
    985a:	2000      	movs	r0, #0
    985c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    985e:	706e      	strb	r6, [r5, #1]
    9860:	200d      	movs	r0, #13
    9862:	7028      	strb	r0, [r5, #0]
    9864:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    9868:	6068      	str	r0, [r5, #4]
    986a:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    986e:	8128      	strh	r0, [r5, #8]
    9870:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    9874:	4638      	mov	r0, r7
    9876:	f004 fddf 	bl	e438 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    987a:	e099      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    987c:	e7ff      	b.n	987e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd6>
    987e:	f894 018e 	ldrb.w	r0, [r4, #398]	; 0x18e
    9882:	f88d 0000 	strb.w	r0, [sp]
    9886:	9800      	ldr	r0, [sp, #0]
    9888:	9000      	str	r0, [sp, #0]
    988a:	f89d 0000 	ldrb.w	r0, [sp]
    988e:	b130      	cbz	r0, 989e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xf6>
    9890:	706e      	strb	r6, [r5, #1]
    9892:	2010      	movs	r0, #16
    9894:	7028      	strb	r0, [r5, #0]
    9896:	80af      	strh	r7, [r5, #4]
    9898:	f884 618e 	strb.w	r6, [r4, #398]	; 0x18e
    989c:	e088      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    989e:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    98a2:	f88d 0000 	strb.w	r0, [sp]
    98a6:	9800      	ldr	r0, [sp, #0]
    98a8:	9000      	str	r0, [sp, #0]
    98aa:	f89d 0000 	ldrb.w	r0, [sp]
    98ae:	b1c8      	cbz	r0, 98e4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x13c>
    98b0:	706e      	strb	r6, [r5, #1]
    98b2:	2015      	movs	r0, #21
    98b4:	7028      	strb	r0, [r5, #0]
    98b6:	e00a      	b.n	98ce <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x126>
    98b8:	f884 6190 	strb.w	r6, [r4, #400]	; 0x190
    98bc:	f8d4 0192 	ldr.w	r0, [r4, #402]	; 0x192
    98c0:	6068      	str	r0, [r5, #4]
    98c2:	f8d4 0196 	ldr.w	r0, [r4, #406]	; 0x196
    98c6:	60a8      	str	r0, [r5, #8]
    98c8:	f8d4 019a 	ldr.w	r0, [r4, #410]	; 0x19a
    98cc:	60e8      	str	r0, [r5, #12]
    98ce:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    98d2:	f88d 0000 	strb.w	r0, [sp]
    98d6:	9800      	ldr	r0, [sp, #0]
    98d8:	9000      	str	r0, [sp, #0]
    98da:	f89d 0000 	ldrb.w	r0, [sp]
    98de:	2800      	cmp	r0, #0
    98e0:	d1ea      	bne.n	98b8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x110>
    98e2:	e065      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    98e4:	f894 019e 	ldrb.w	r0, [r4, #414]	; 0x19e
    98e8:	f88d 0000 	strb.w	r0, [sp]
    98ec:	9800      	ldr	r0, [sp, #0]
    98ee:	9000      	str	r0, [sp, #0]
    98f0:	f89d 0000 	ldrb.w	r0, [sp]
    98f4:	b158      	cbz	r0, 990e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x166>
    98f6:	706e      	strb	r6, [r5, #1]
    98f8:	201c      	movs	r0, #28
    98fa:	7028      	strb	r0, [r5, #0]
    98fc:	220a      	movs	r2, #10
    98fe:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
    9902:	1d28      	adds	r0, r5, #4
    9904:	f003 fe10 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9908:	f884 619e 	strb.w	r6, [r4, #414]	; 0x19e
    990c:	e050      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    990e:	f894 01aa 	ldrb.w	r0, [r4, #426]	; 0x1aa
    9912:	f88d 0000 	strb.w	r0, [sp]
    9916:	9800      	ldr	r0, [sp, #0]
    9918:	9000      	str	r0, [sp, #0]
    991a:	f89d 0000 	ldrb.w	r0, [sp]
    991e:	b140      	cbz	r0, 9932 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x18a>
    9920:	706e      	strb	r6, [r5, #1]
    9922:	201d      	movs	r0, #29
    9924:	7028      	strb	r0, [r5, #0]
    9926:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    992a:	6068      	str	r0, [r5, #4]
    992c:	f884 61aa 	strb.w	r6, [r4, #426]	; 0x1aa
    9930:	e03e      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    9932:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    9936:	f88d 0000 	strb.w	r0, [sp]
    993a:	9800      	ldr	r0, [sp, #0]
    993c:	9000      	str	r0, [sp, #0]
    993e:	f89d 0000 	ldrb.w	r0, [sp]
    9942:	b198      	cbz	r0, 996c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1c4>
    9944:	706e      	strb	r6, [r5, #1]
    9946:	201a      	movs	r0, #26
    9948:	7028      	strb	r0, [r5, #0]
    994a:	e004      	b.n	9956 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1ae>
    994c:	f884 6188 	strb.w	r6, [r4, #392]	; 0x188
    9950:	f8d4 018a 	ldr.w	r0, [r4, #394]	; 0x18a
    9954:	6068      	str	r0, [r5, #4]
    9956:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    995a:	f88d 0000 	strb.w	r0, [sp]
    995e:	9800      	ldr	r0, [sp, #0]
    9960:	9000      	str	r0, [sp, #0]
    9962:	f89d 0000 	ldrb.w	r0, [sp]
    9966:	2800      	cmp	r0, #0
    9968:	d1f0      	bne.n	994c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1a4>
    996a:	e021      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    996c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    9970:	f88d 0000 	strb.w	r0, [sp]
    9974:	9800      	ldr	r0, [sp, #0]
    9976:	9000      	str	r0, [sp, #0]
    9978:	f89d 0000 	ldrb.w	r0, [sp]
    997c:	2800      	cmp	r0, #0
    997e:	f43f af6d 	beq.w	985c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    9982:	706e      	strb	r6, [r5, #1]
    9984:	2016      	movs	r0, #22
    9986:	7028      	strb	r0, [r5, #0]
    9988:	e008      	b.n	999c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1f4>
    998a:	bf00      	nop
    998c:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    9990:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    9994:	6068      	str	r0, [r5, #4]
    9996:	f8b4 01b6 	ldrh.w	r0, [r4, #438]	; 0x1b6
    999a:	8128      	strh	r0, [r5, #8]
    999c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    99a0:	f88d 0000 	strb.w	r0, [sp]
    99a4:	9800      	ldr	r0, [sp, #0]
    99a6:	9000      	str	r0, [sp, #0]
    99a8:	f89d 0000 	ldrb.w	r0, [sp]
    99ac:	2800      	cmp	r0, #0
    99ae:	d1ed      	bne.n	998c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1e4>
    99b0:	2001      	movs	r0, #1
    99b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000099b4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    99b4:	b570      	push	{r4, r5, r6, lr}
    99b6:	4605      	mov	r5, r0
    99b8:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    99bc:	f895 1089 	ldrb.w	r1, [r5, #137]	; 0x89
    99c0:	b1c9      	cbz	r1, 99f6 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    99c2:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
    99c6:	1a0c      	subs	r4, r1, r0
    99c8:	f1b4 0404 	subs.w	r4, r4, #4
    99cc:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
    99d0:	b140      	cbz	r0, 99e4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    99d2:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    99d6:	2300      	movs	r3, #0
    99d8:	2109      	movs	r1, #9
    99da:	f105 0078 	add.w	r0, r5, #120	; 0x78
    99de:	f004 ffe7 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99e2:	b160      	cbz	r0, 99fe <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    99e4:	4628      	mov	r0, r5
    99e6:	f005 ff8a 	bl	f8fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    99ea:	b138      	cbz	r0, 99fc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    99ec:	e9d5 1028 	ldrd	r1, r0, [r5, #160]	; 0xa0
    99f0:	1a40      	subs	r0, r0, r1
    99f2:	1f00      	subs	r0, r0, #4
    99f4:	e003      	b.n	99fe <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    99f6:	f1c0 0402 	rsb	r4, r0, #2
    99fa:	e7e7      	b.n	99cc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    99fc:	4620      	mov	r0, r4
    99fe:	42a0      	cmp	r0, r4
    9a00:	da00      	bge.n	9a04 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    9a02:	4604      	mov	r4, r0
    9a04:	2c00      	cmp	r4, #0
    9a06:	dc01      	bgt.n	9a0c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    9a08:	2000      	movs	r0, #0
    9a0a:	bd70      	pop	{r4, r5, r6, pc}
    9a0c:	b2a0      	uxth	r0, r4
    9a0e:	bd70      	pop	{r4, r5, r6, pc}

00009a10 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    9a10:	481b      	ldr	r0, [pc, #108]	; (9a80 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x70>)
    9a12:	491a      	ldr	r1, [pc, #104]	; (9a7c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x6c>)
    9a14:	6081      	str	r1, [r0, #8]
    9a16:	491b      	ldr	r1, [pc, #108]	; (9a84 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    9a18:	61c1      	str	r1, [r0, #28]
    9a1a:	491b      	ldr	r1, [pc, #108]	; (9a88 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    9a1c:	62c1      	str	r1, [r0, #44]	; 0x2c
    9a1e:	491b      	ldr	r1, [pc, #108]	; (9a8c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    9a20:	6101      	str	r1, [r0, #16]
    9a22:	491b      	ldr	r1, [pc, #108]	; (9a90 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    9a24:	6141      	str	r1, [r0, #20]
    9a26:	491b      	ldr	r1, [pc, #108]	; (9a94 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    9a28:	6441      	str	r1, [r0, #68]	; 0x44
    9a2a:	491b      	ldr	r1, [pc, #108]	; (9a98 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    9a2c:	6181      	str	r1, [r0, #24]
    9a2e:	491b      	ldr	r1, [pc, #108]	; (9a9c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    9a30:	6301      	str	r1, [r0, #48]	; 0x30
    9a32:	491b      	ldr	r1, [pc, #108]	; (9aa0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    9a34:	6241      	str	r1, [r0, #36]	; 0x24
    9a36:	491b      	ldr	r1, [pc, #108]	; (9aa4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    9a38:	64c1      	str	r1, [r0, #76]	; 0x4c
    9a3a:	491b      	ldr	r1, [pc, #108]	; (9aa8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    9a3c:	6481      	str	r1, [r0, #72]	; 0x48
    9a3e:	491b      	ldr	r1, [pc, #108]	; (9aac <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    9a40:	6341      	str	r1, [r0, #52]	; 0x34
    9a42:	481c      	ldr	r0, [pc, #112]	; (9ab4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    9a44:	491a      	ldr	r1, [pc, #104]	; (9ab0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    9a46:	6081      	str	r1, [r0, #8]
    9a48:	491b      	ldr	r1, [pc, #108]	; (9ab8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    9a4a:	61c1      	str	r1, [r0, #28]
    9a4c:	491b      	ldr	r1, [pc, #108]	; (9abc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    9a4e:	6201      	str	r1, [r0, #32]
    9a50:	491b      	ldr	r1, [pc, #108]	; (9ac0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    9a52:	6041      	str	r1, [r0, #4]
    9a54:	491b      	ldr	r1, [pc, #108]	; (9ac4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    9a56:	6001      	str	r1, [r0, #0]
    9a58:	491b      	ldr	r1, [pc, #108]	; (9ac8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    9a5a:	6281      	str	r1, [r0, #40]	; 0x28
    9a5c:	491b      	ldr	r1, [pc, #108]	; (9acc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    9a5e:	62c1      	str	r1, [r0, #44]	; 0x2c
    9a60:	491b      	ldr	r1, [pc, #108]	; (9ad0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    9a62:	60c1      	str	r1, [r0, #12]
    9a64:	491b      	ldr	r1, [pc, #108]	; (9ad4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    9a66:	6181      	str	r1, [r0, #24]
    9a68:	491b      	ldr	r1, [pc, #108]	; (9ad8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    9a6a:	6301      	str	r1, [r0, #48]	; 0x30
    9a6c:	491b      	ldr	r1, [pc, #108]	; (9adc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    9a6e:	6481      	str	r1, [r0, #72]	; 0x48
    9a70:	491b      	ldr	r1, [pc, #108]	; (9ae0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    9a72:	64c1      	str	r1, [r0, #76]	; 0x4c
    9a74:	491b      	ldr	r1, [pc, #108]	; (9ae4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    9a76:	6441      	str	r1, [r0, #68]	; 0x44
    9a78:	4770      	bx	lr
    9a7a:	0000      	.short	0x0000
    9a7c:	0000ad5d 	.word	0x0000ad5d
    9a80:	20000114 	.word	0x20000114
    9a84:	0000ad99 	.word	0x0000ad99
    9a88:	0000aa71 	.word	0x0000aa71
    9a8c:	0000a7b1 	.word	0x0000a7b1
    9a90:	0000aca9 	.word	0x0000aca9
    9a94:	0000ac0d 	.word	0x0000ac0d
    9a98:	0000ace9 	.word	0x0000ace9
    9a9c:	0000ae35 	.word	0x0000ae35
    9aa0:	0000a7e9 	.word	0x0000a7e9
    9aa4:	0000aa45 	.word	0x0000aa45
    9aa8:	0000aa11 	.word	0x0000aa11
    9aac:	0000ac99 	.word	0x0000ac99
    9ab0:	0000b1b5 	.word	0x0000b1b5
    9ab4:	20000178 	.word	0x20000178
    9ab8:	0000b1e5 	.word	0x0000b1e5
    9abc:	0000afa1 	.word	0x0000afa1
    9ac0:	0000af05 	.word	0x0000af05
    9ac4:	0000af35 	.word	0x0000af35
    9ac8:	0000b071 	.word	0x0000b071
    9acc:	0000b0a5 	.word	0x0000b0a5
    9ad0:	0000af65 	.word	0x0000af65
    9ad4:	0000b191 	.word	0x0000b191
    9ad8:	0000b225 	.word	0x0000b225
    9adc:	0000b031 	.word	0x0000b031
    9ae0:	0000b061 	.word	0x0000b061
    9ae4:	0000b17d 	.word	0x0000b17d

00009ae8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    9ae8:	4806      	ldr	r0, [pc, #24]	; (9b04 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    9aea:	4905      	ldr	r1, [pc, #20]	; (9b00 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    9aec:	6581      	str	r1, [r0, #88]	; 0x58
    9aee:	4906      	ldr	r1, [pc, #24]	; (9b08 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    9af0:	65c1      	str	r1, [r0, #92]	; 0x5c
    9af2:	4807      	ldr	r0, [pc, #28]	; (9b10 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    9af4:	4905      	ldr	r1, [pc, #20]	; (9b0c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    9af6:	6581      	str	r1, [r0, #88]	; 0x58
    9af8:	4906      	ldr	r1, [pc, #24]	; (9b14 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    9afa:	6601      	str	r1, [r0, #96]	; 0x60
    9afc:	4770      	bx	lr
    9afe:	0000      	.short	0x0000
    9b00:	0000aa95 	.word	0x0000aa95
    9b04:	20000114 	.word	0x20000114
    9b08:	0000aba5 	.word	0x0000aba5
    9b0c:	0000b0d1 	.word	0x0000b0d1
    9b10:	20000178 	.word	0x20000178
    9b14:	0000b101 	.word	0x0000b101

00009b18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    9b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b1a:	4d36      	ldr	r5, [pc, #216]	; (9bf4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc>)
    9b1c:	2600      	movs	r6, #0
    9b1e:	4604      	mov	r4, r0
    9b20:	6068      	str	r0, [r5, #4]
    9b22:	806e      	strh	r6, [r5, #2]
    9b24:	706e      	strb	r6, [r5, #1]
    9b26:	702e      	strb	r6, [r5, #0]
    9b28:	8800      	ldrh	r0, [r0, #0]
    9b2a:	f7fb ff17 	bl	595c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    9b2e:	6868      	ldr	r0, [r5, #4]
    9b30:	8800      	ldrh	r0, [r0, #0]
    9b32:	f7fb febb 	bl	58ac <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    9b36:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    9b3a:	6869      	ldr	r1, [r5, #4]
    9b3c:	1c40      	adds	r0, r0, #1
    9b3e:	b282      	uxth	r2, r0
    9b40:	f101 0078 	add.w	r0, r1, #120	; 0x78
    9b44:	f005 f8ee 	bl	ed24 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    9b48:	b120      	cbz	r0, 9b54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c>
    9b4a:	f44f 71ac 	mov.w	r1, #344	; 0x158
    9b4e:	2036      	movs	r0, #54	; 0x36
    9b50:	f7fb f8e2 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b54:	f8a4 6122 	strh.w	r6, [r4, #290]	; 0x122
    9b58:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    9b5c:	4630      	mov	r0, r6
    9b5e:	2924      	cmp	r1, #36	; 0x24
    9b60:	d10a      	bne.n	9b78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    9b62:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    9b66:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    9b6a:	1a51      	subs	r1, r2, r1
    9b6c:	b209      	sxth	r1, r1
    9b6e:	2900      	cmp	r1, #0
    9b70:	db02      	blt.n	9b78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    9b72:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
    9b76:	e00f      	b.n	9b98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x80>
    9b78:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    9b7c:	2924      	cmp	r1, #36	; 0x24
    9b7e:	d001      	beq.n	9b84 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6c>
    9b80:	2925      	cmp	r1, #37	; 0x25
    9b82:	d10c      	bne.n	9b9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    9b84:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    9b88:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    9b8c:	1a51      	subs	r1, r2, r1
    9b8e:	b209      	sxth	r1, r1
    9b90:	2900      	cmp	r1, #0
    9b92:	db04      	blt.n	9b9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    9b94:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    9b98:	f000 fd5a 	bl	a650 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb38>
    9b9c:	b318      	cbz	r0, 9be6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xce>
    9b9e:	f000 fbfd 	bl	a39c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    9ba2:	2800      	cmp	r0, #0
    9ba4:	d125      	bne.n	9bf2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    9ba6:	6868      	ldr	r0, [r5, #4]
    9ba8:	3078      	adds	r0, #120	; 0x78
    9baa:	f005 fe1d 	bl	f7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9bae:	b120      	cbz	r0, 9bba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2>
    9bb0:	6868      	ldr	r0, [r5, #4]
    9bb2:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    9bb6:	f000 faad 	bl	a114 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5fc>
    9bba:	480f      	ldr	r0, [pc, #60]	; (9bf8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>)
    9bbc:	9000      	str	r0, [sp, #0]
    9bbe:	4b0f      	ldr	r3, [pc, #60]	; (9bfc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    9bc0:	4a0f      	ldr	r2, [pc, #60]	; (9c00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    9bc2:	4621      	mov	r1, r4
    9bc4:	4630      	mov	r0, r6
    9bc6:	f7fb ff73 	bl	5ab0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    9bca:	6868      	ldr	r0, [r5, #4]
    9bcc:	2300      	movs	r3, #0
    9bce:	2105      	movs	r1, #5
    9bd0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9bd4:	3078      	adds	r0, #120	; 0x78
    9bd6:	f004 feeb 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9bda:	2800      	cmp	r0, #0
    9bdc:	d009      	beq.n	9bf2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    9bde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9be2:	f7fb bf5f 	b.w	5aa4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    9be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9bea:	2100      	movs	r1, #0
    9bec:	4608      	mov	r0, r1
    9bee:	f000 bb81 	b.w	a2f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    9bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9bf4:	20000104 	.word	0x20000104
    9bf8:	0000a2f5 	.word	0x0000a2f5
    9bfc:	00009d25 	.word	0x00009d25
    9c00:	0000a5c9 	.word	0x0000a5c9
    9c04:	4411      	add	r1, r2
    9c06:	78c2      	ldrb	r2, [r0, #3]
    9c08:	480c      	ldr	r0, [pc, #48]	; (9c3c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x124>)
    9c0a:	1d89      	adds	r1, r1, #6
    9c0c:	b289      	uxth	r1, r1
    9c0e:	6840      	ldr	r0, [r0, #4]
    9c10:	2a01      	cmp	r2, #1
    9c12:	d006      	beq.n	9c22 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10a>
    9c14:	b142      	cbz	r2, 9c28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x110>
    9c16:	2a18      	cmp	r2, #24
    9c18:	d105      	bne.n	9c26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10e>
    9c1a:	f890 2126 	ldrb.w	r2, [r0, #294]	; 0x126
    9c1e:	b132      	cbz	r2, 9c2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x116>
    9c20:	e009      	b.n	9c36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    9c22:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    9c26:	4770      	bx	lr
    9c28:	f8a0 1146 	strh.w	r1, [r0, #326]	; 0x146
    9c2c:	4770      	bx	lr
    9c2e:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
    9c32:	b902      	cbnz	r2, 9c36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    9c34:	2100      	movs	r1, #0
    9c36:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
    9c3a:	4770      	bx	lr
    9c3c:	20000104 	.word	0x20000104
    9c40:	490b      	ldr	r1, [pc, #44]	; (9c70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x158>)
    9c42:	78c2      	ldrb	r2, [r0, #3]
    9c44:	6849      	ldr	r1, [r1, #4]
    9c46:	2a01      	cmp	r2, #1
    9c48:	d006      	beq.n	9c58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140>
    9c4a:	b15a      	cbz	r2, 9c64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14c>
    9c4c:	2a18      	cmp	r2, #24
    9c4e:	d108      	bne.n	9c62 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a>
    9c50:	f8b1 1124 	ldrh.w	r1, [r1, #292]	; 0x124
    9c54:	f005 b94c 	b.w	eef0 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    9c58:	f8b1 1130 	ldrh.w	r1, [r1, #304]	; 0x130
    9c5c:	7241      	strb	r1, [r0, #9]
    9c5e:	0a09      	lsrs	r1, r1, #8
    9c60:	7281      	strb	r1, [r0, #10]
    9c62:	4770      	bx	lr
    9c64:	f8b1 1146 	ldrh.w	r1, [r1, #326]	; 0x146
    9c68:	7341      	strb	r1, [r0, #13]
    9c6a:	0a09      	lsrs	r1, r1, #8
    9c6c:	7381      	strb	r1, [r0, #14]
    9c6e:	4770      	bx	lr
    9c70:	20000104 	.word	0x20000104
    9c74:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9c76:	4c2a      	ldr	r4, [pc, #168]	; (9d20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x208>)
    9c78:	2300      	movs	r3, #0
    9c7a:	4619      	mov	r1, r3
    9c7c:	6860      	ldr	r0, [r4, #4]
    9c7e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9c82:	3078      	adds	r0, #120	; 0x78
    9c84:	f004 fe94 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c88:	2800      	cmp	r0, #0
    9c8a:	d048      	beq.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9c8c:	6860      	ldr	r0, [r4, #4]
    9c8e:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    9c92:	f88d 1000 	strb.w	r1, [sp]
    9c96:	9900      	ldr	r1, [sp, #0]
    9c98:	9100      	str	r1, [sp, #0]
    9c9a:	f89d 1000 	ldrb.w	r1, [sp]
    9c9e:	2900      	cmp	r1, #0
    9ca0:	d03d      	beq.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9ca2:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9ca6:	f004 fedc 	bl	ea62 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9caa:	2800      	cmp	r0, #0
    9cac:	d137      	bne.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9cae:	6860      	ldr	r0, [r4, #4]
    9cb0:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
    9cb4:	280a      	cmp	r0, #10
    9cb6:	d932      	bls.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9cb8:	4668      	mov	r0, sp
    9cba:	f7fc ff9d 	bl	6bf8 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    9cbe:	2800      	cmp	r0, #0
    9cc0:	d02d      	beq.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9cc2:	6861      	ldr	r1, [r4, #4]
    9cc4:	2205      	movs	r2, #5
    9cc6:	4668      	mov	r0, sp
    9cc8:	318e      	adds	r1, #142	; 0x8e
    9cca:	f003 fc1b 	bl	d504 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    9cce:	2500      	movs	r5, #0
    9cd0:	b310      	cbz	r0, 9d18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x200>
    9cd2:	6860      	ldr	r0, [r4, #4]
    9cd4:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    9cd8:	7808      	ldrb	r0, [r1, #0]
    9cda:	b158      	cbz	r0, 9cf4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1dc>
    9cdc:	2205      	movs	r2, #5
    9cde:	4668      	mov	r0, sp
    9ce0:	1c49      	adds	r1, r1, #1
    9ce2:	f003 fc0f 	bl	d504 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    9ce6:	2800      	cmp	r0, #0
    9ce8:	d119      	bne.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9cea:	6860      	ldr	r0, [r4, #4]
    9cec:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    9cf0:	7800      	ldrb	r0, [r0, #0]
    9cf2:	b940      	cbnz	r0, 9d06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1ee>
    9cf4:	6860      	ldr	r0, [r4, #4]
    9cf6:	9900      	ldr	r1, [sp, #0]
    9cf8:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    9cfc:	f8c0 1001 	str.w	r1, [r0, #1]
    9d00:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9d04:	7141      	strb	r1, [r0, #5]
    9d06:	6860      	ldr	r0, [r4, #4]
    9d08:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    9d0c:	7808      	ldrb	r0, [r1, #0]
    9d0e:	1c40      	adds	r0, r0, #1
    9d10:	7008      	strb	r0, [r1, #0]
    9d12:	2001      	movs	r0, #1
    9d14:	f000 fd04 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9d18:	6860      	ldr	r0, [r4, #4]
    9d1a:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
    9d1e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9d20:	20000104 	.word	0x20000104
    9d24:	4a0c      	ldr	r2, [pc, #48]	; (9d58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x240>)
    9d26:	7851      	ldrb	r1, [r2, #1]
    9d28:	b999      	cbnz	r1, 9d52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    9d2a:	4611      	mov	r1, r2
    9d2c:	2801      	cmp	r0, #1
    9d2e:	6849      	ldr	r1, [r1, #4]
    9d30:	d008      	beq.n	9d44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x22c>
    9d32:	7890      	ldrb	r0, [r2, #2]
    9d34:	0740      	lsls	r0, r0, #29
    9d36:	d503      	bpl.n	9d40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x228>
    9d38:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
    9d3c:	2807      	cmp	r0, #7
    9d3e:	d008      	beq.n	9d52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    9d40:	2001      	movs	r0, #1
    9d42:	4770      	bx	lr
    9d44:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    9d48:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    9d4a:	4288      	cmp	r0, r1
    9d4c:	d801      	bhi.n	9d52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    9d4e:	f7fe be85 	b.w	8a5c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    9d52:	2000      	movs	r0, #0
    9d54:	4770      	bx	lr
    9d56:	0000      	.short	0x0000
    9d58:	20000104 	.word	0x20000104
    9d5c:	b538      	push	{r3, r4, r5, lr}
    9d5e:	4c87      	ldr	r4, [pc, #540]	; (9f7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x464>)
    9d60:	6860      	ldr	r0, [r4, #4]
    9d62:	3078      	adds	r0, #120	; 0x78
    9d64:	f005 fd40 	bl	f7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9d68:	2800      	cmp	r0, #0
    9d6a:	d15b      	bne.n	9e24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    9d6c:	6860      	ldr	r0, [r4, #4]
    9d6e:	2300      	movs	r3, #0
    9d70:	2101      	movs	r1, #1
    9d72:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9d76:	3078      	adds	r0, #120	; 0x78
    9d78:	f004 fe1a 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d7c:	2800      	cmp	r0, #0
    9d7e:	d151      	bne.n	9e24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    9d80:	6860      	ldr	r0, [r4, #4]
    9d82:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    9d86:	f88d 1000 	strb.w	r1, [sp]
    9d8a:	9900      	ldr	r1, [sp, #0]
    9d8c:	9100      	str	r1, [sp, #0]
    9d8e:	f89d 1000 	ldrb.w	r1, [sp]
    9d92:	b109      	cbz	r1, 9d98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x280>
    9d94:	2002      	movs	r0, #2
    9d96:	e038      	b.n	9e0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    9d98:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9d9c:	2300      	movs	r3, #0
    9d9e:	4619      	mov	r1, r3
    9da0:	3078      	adds	r0, #120	; 0x78
    9da2:	f004 fe05 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9da6:	b128      	cbz	r0, 9db4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    9da8:	6860      	ldr	r0, [r4, #4]
    9daa:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    9dae:	b108      	cbz	r0, 9db4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    9db0:	2012      	movs	r0, #18
    9db2:	e02a      	b.n	9e0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    9db4:	6860      	ldr	r0, [r4, #4]
    9db6:	2500      	movs	r5, #0
    9db8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9dbc:	2a12      	cmp	r2, #18
    9dbe:	d01d      	beq.n	9dfc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e4>
    9dc0:	dc04      	bgt.n	9dcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2b4>
    9dc2:	2a03      	cmp	r2, #3
    9dc4:	d025      	beq.n	9e12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2fa>
    9dc6:	2a11      	cmp	r2, #17
    9dc8:	d104      	bne.n	9dd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2bc>
    9dca:	e019      	b.n	9e00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e8>
    9dcc:	2a18      	cmp	r2, #24
    9dce:	d01b      	beq.n	9e08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f0>
    9dd0:	2a23      	cmp	r2, #35	; 0x23
    9dd2:	d028      	beq.n	9e26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30e>
    9dd4:	2300      	movs	r3, #0
    9dd6:	2104      	movs	r1, #4
    9dd8:	3078      	adds	r0, #120	; 0x78
    9dda:	f004 fde9 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9dde:	2800      	cmp	r0, #0
    9de0:	d120      	bne.n	9e24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    9de2:	6860      	ldr	r0, [r4, #4]
    9de4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9de8:	2919      	cmp	r1, #25
    9dea:	d07c      	beq.n	9ee6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3ce>
    9dec:	dc22      	bgt.n	9e34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31c>
    9dee:	2901      	cmp	r1, #1
    9df0:	d02c      	beq.n	9e4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x334>
    9df2:	2902      	cmp	r1, #2
    9df4:	d037      	beq.n	9e66 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34e>
    9df6:	2903      	cmp	r1, #3
    9df8:	d134      	bne.n	9e64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34c>
    9dfa:	e022      	b.n	9e42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x32a>
    9dfc:	200b      	movs	r0, #11
    9dfe:	e004      	b.n	9e0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    9e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9e04:	f000 bba0 	b.w	a548 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    9e08:	2006      	movs	r0, #6
    9e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9e0e:	f000 bc87 	b.w	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9e12:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    9e16:	7101      	strb	r1, [r0, #4]
    9e18:	2007      	movs	r0, #7
    9e1a:	f000 fc81 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9e1e:	6860      	ldr	r0, [r4, #4]
    9e20:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9e24:	bd38      	pop	{r3, r4, r5, pc}
    9e26:	2018      	movs	r0, #24
    9e28:	f000 fc7a 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9e2c:	6860      	ldr	r0, [r4, #4]
    9e2e:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    9e32:	bd38      	pop	{r3, r4, r5, pc}
    9e34:	291d      	cmp	r1, #29
    9e36:	d018      	beq.n	9e6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    9e38:	291e      	cmp	r1, #30
    9e3a:	d016      	beq.n	9e6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    9e3c:	2921      	cmp	r1, #33	; 0x21
    9e3e:	d176      	bne.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9e40:	e056      	b.n	9ef0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d8>
    9e42:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    9e46:	7141      	strb	r1, [r0, #5]
    9e48:	2007      	movs	r0, #7
    9e4a:	e07e      	b.n	9f4a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x432>
    9e4c:	200c      	movs	r0, #12
    9e4e:	f000 fc67 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9e52:	6860      	ldr	r0, [r4, #4]
    9e54:	f820 5fba 	strh.w	r5, [r0, #186]!
    9e58:	7981      	ldrb	r1, [r0, #6]
    9e5a:	f041 0101 	orr.w	r1, r1, #1
    9e5e:	7181      	strb	r1, [r0, #6]
    9e60:	f800 5c34 	strb.w	r5, [r0, #-52]
    9e64:	e063      	b.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9e66:	2013      	movs	r0, #19
    9e68:	e037      	b.n	9eda <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c2>
    9e6a:	f890 2133 	ldrb.w	r2, [r0, #307]	; 0x133
    9e6e:	f88d 2000 	strb.w	r2, [sp]
    9e72:	9a00      	ldr	r2, [sp, #0]
    9e74:	9200      	str	r2, [sp, #0]
    9e76:	f89d 2000 	ldrb.w	r2, [sp]
    9e7a:	bbaa      	cbnz	r2, 9ee8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d0>
    9e7c:	f890 2132 	ldrb.w	r2, [r0, #306]	; 0x132
    9e80:	f88d 2000 	strb.w	r2, [sp]
    9e84:	9a00      	ldr	r2, [sp, #0]
    9e86:	9200      	str	r2, [sp, #0]
    9e88:	f89d 2000 	ldrb.w	r2, [sp]
    9e8c:	b1aa      	cbz	r2, 9eba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a2>
    9e8e:	2924      	cmp	r1, #36	; 0x24
    9e90:	d011      	beq.n	9eb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    9e92:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9e96:	2924      	cmp	r1, #36	; 0x24
    9e98:	d00d      	beq.n	9eb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    9e9a:	2300      	movs	r3, #0
    9e9c:	f500 7293 	add.w	r2, r0, #294	; 0x126
    9ea0:	f500 7199 	add.w	r1, r0, #306	; 0x132
    9ea4:	f005 f92c 	bl	f100 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9ea8:	6860      	ldr	r0, [r4, #4]
    9eaa:	211e      	movs	r1, #30
    9eac:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    9eb0:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    9eb4:	e003      	b.n	9ebe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a6>
    9eb6:	2301      	movs	r3, #1
    9eb8:	e7f0      	b.n	9e9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x384>
    9eba:	291e      	cmp	r1, #30
    9ebc:	d137      	bne.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9ebe:	6860      	ldr	r0, [r4, #4]
    9ec0:	f005 f939 	bl	f136 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9ec4:	f000 f85c 	bl	9f80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    9ec8:	6861      	ldr	r1, [r4, #4]
    9eca:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    9ece:	8bc2      	ldrh	r2, [r0, #30]
    9ed0:	f821 2ffe 	strh.w	r2, [r1, #254]!
    9ed4:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9ed6:	8048      	strh	r0, [r1, #2]
    9ed8:	2015      	movs	r0, #21
    9eda:	f000 fc21 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9ede:	6860      	ldr	r0, [r4, #4]
    9ee0:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    9ee4:	e001      	b.n	9eea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d2>
    9ee6:	e02f      	b.n	9f48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x430>
    9ee8:	e021      	b.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9eea:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9eee:	e01e      	b.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9ef0:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    9ef4:	2901      	cmp	r1, #1
    9ef6:	d108      	bne.n	9f0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3f2>
    9ef8:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    9efc:	f88d 1000 	strb.w	r1, [sp]
    9f00:	9900      	ldr	r1, [sp, #0]
    9f02:	9100      	str	r1, [sp, #0]
    9f04:	f89d 1000 	ldrb.w	r1, [sp]
    9f08:	b121      	cbz	r1, 9f14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3fc>
    9f0a:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    9f0e:	2902      	cmp	r1, #2
    9f10:	d005      	beq.n	9f1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x406>
    9f12:	e00c      	b.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9f14:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    9f18:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    9f1c:	e002      	b.n	9f24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x40c>
    9f1e:	f850 1f62 	ldr.w	r1, [r0, #98]!
    9f22:	6840      	ldr	r0, [r0, #4]
    9f24:	f000 fc1e 	bl	a764 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    9f28:	2018      	movs	r0, #24
    9f2a:	f000 fbf9 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9f2e:	6860      	ldr	r0, [r4, #4]
    9f30:	3078      	adds	r0, #120	; 0x78
    9f32:	f005 fc59 	bl	f7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9f36:	2800      	cmp	r0, #0
    9f38:	f47f af7b 	bne.w	9e32 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31a>
    9f3c:	6860      	ldr	r0, [r4, #4]
    9f3e:	3078      	adds	r0, #120	; 0x78
    9f40:	f005 fc52 	bl	f7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9f44:	b128      	cbz	r0, 9f52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x43a>
    9f46:	e00f      	b.n	9f68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    9f48:	2011      	movs	r0, #17
    9f4a:	f000 fbe9 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9f4e:	6860      	ldr	r0, [r4, #4]
    9f50:	e7c8      	b.n	9ee4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3cc>
    9f52:	6860      	ldr	r0, [r4, #4]
    9f54:	2300      	movs	r3, #0
    9f56:	4619      	mov	r1, r3
    9f58:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f5c:	3078      	adds	r0, #120	; 0x78
    9f5e:	f004 fd27 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f62:	b108      	cbz	r0, 9f68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    9f64:	f000 fa44 	bl	a3f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d8>
    9f68:	6860      	ldr	r0, [r4, #4]
    9f6a:	3078      	adds	r0, #120	; 0x78
    9f6c:	f005 fc3c 	bl	f7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9f70:	2800      	cmp	r0, #0
    9f72:	d1e1      	bne.n	9f38 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x420>
    9f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9f78:	f7ff be7c 	b.w	9c74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15c>
    9f7c:	20000104 	.word	0x20000104
    9f80:	480a      	ldr	r0, [pc, #40]	; (9fac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x494>)
    9f82:	b510      	push	{r4, lr}
    9f84:	6841      	ldr	r1, [r0, #4]
    9f86:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    9f8a:	2801      	cmp	r0, #1
    9f8c:	d009      	beq.n	9fa2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x48a>
    9f8e:	8808      	ldrh	r0, [r1, #0]
    9f90:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    9f94:	312c      	adds	r1, #44	; 0x2c
    9f96:	f005 f88f 	bl	f0b8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9f9e:	f001 baef 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9fa2:	2002      	movs	r0, #2
    9fa4:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9fa8:	bd10      	pop	{r4, pc}
    9faa:	0000      	.short	0x0000
    9fac:	20000104 	.word	0x20000104
    9fb0:	b570      	push	{r4, r5, r6, lr}
    9fb2:	4c22      	ldr	r4, [pc, #136]	; (a03c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x524>)
    9fb4:	f04f 0500 	mov.w	r5, #0
    9fb8:	8861      	ldrh	r1, [r4, #2]
    9fba:	0748      	lsls	r0, r1, #29
    9fbc:	d510      	bpl.n	9fe0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    9fbe:	6860      	ldr	r0, [r4, #4]
    9fc0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9fc4:	2a03      	cmp	r2, #3
    9fc6:	d004      	beq.n	9fd2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4ba>
    9fc8:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9fcc:	2a07      	cmp	r2, #7
    9fce:	d107      	bne.n	9fe0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    9fd0:	e002      	b.n	9fd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c0>
    9fd2:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    9fd6:	e026      	b.n	a026 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50e>
    9fd8:	2201      	movs	r2, #1
    9fda:	7022      	strb	r2, [r4, #0]
    9fdc:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    9fe0:	0788      	lsls	r0, r1, #30
    9fe2:	d508      	bpl.n	9ff6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4de>
    9fe4:	68a0      	ldr	r0, [r4, #8]
    9fe6:	78c0      	ldrb	r0, [r0, #3]
    9fe8:	2819      	cmp	r0, #25
    9fea:	d21a      	bcs.n	a022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    9fec:	4914      	ldr	r1, [pc, #80]	; (a040 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x528>)
    9fee:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    9ff2:	b1b0      	cbz	r0, a022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    9ff4:	4780      	blx	r0
    9ff6:	f000 f867 	bl	a0c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5b0>
    9ffa:	f000 f823 	bl	a044 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x52c>
    9ffe:	4606      	mov	r6, r0
    a000:	7860      	ldrb	r0, [r4, #1]
    a002:	0700      	lsls	r0, r0, #28
    a004:	d515      	bpl.n	a032 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    a006:	6860      	ldr	r0, [r4, #4]
    a008:	2300      	movs	r3, #0
    a00a:	2105      	movs	r1, #5
    a00c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a010:	3078      	adds	r0, #120	; 0x78
    a012:	f004 fccd 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a016:	b148      	cbz	r0, a02c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x514>
    a018:	6860      	ldr	r0, [r4, #4]
    a01a:	2608      	movs	r6, #8
    a01c:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    a020:	e007      	b.n	a032 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    a022:	f240 61b1 	movw	r1, #1713	; 0x6b1
    a026:	2036      	movs	r0, #54	; 0x36
    a028:	f7fa fe76 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a02c:	2000      	movs	r0, #0
    a02e:	f7fb fe21 	bl	5c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    a032:	6860      	ldr	r0, [r4, #4]
    a034:	f005 fc08 	bl	f848 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    a038:	4630      	mov	r0, r6
    a03a:	bd70      	pop	{r4, r5, r6, pc}
    a03c:	20000104 	.word	0x20000104
    a040:	20000178 	.word	0x20000178
    a044:	b570      	push	{r4, r5, r6, lr}
    a046:	4c1e      	ldr	r4, [pc, #120]	; (a0c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5a8>)
    a048:	2000      	movs	r0, #0
    a04a:	78a1      	ldrb	r1, [r4, #2]
    a04c:	07c9      	lsls	r1, r1, #31
    a04e:	d01b      	beq.n	a088 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x570>
    a050:	68e0      	ldr	r0, [r4, #12]
    a052:	2300      	movs	r3, #0
    a054:	2105      	movs	r1, #5
    a056:	78c5      	ldrb	r5, [r0, #3]
    a058:	6860      	ldr	r0, [r4, #4]
    a05a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a05e:	3078      	adds	r0, #120	; 0x78
    a060:	f004 fca6 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a064:	b188      	cbz	r0, a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a066:	2d06      	cmp	r5, #6
    a068:	d00f      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a06a:	dc06      	bgt.n	a07a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x562>
    a06c:	2d02      	cmp	r5, #2
    a06e:	d00c      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a070:	2d04      	cmp	r5, #4
    a072:	d00a      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a074:	2d05      	cmp	r5, #5
    a076:	d106      	bne.n	a086 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x56e>
    a078:	e007      	b.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a07a:	2d0b      	cmp	r5, #11
    a07c:	d005      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a07e:	2d0d      	cmp	r5, #13
    a080:	d003      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a082:	2d11      	cmp	r5, #17
    a084:	d001      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a086:	2008      	movs	r0, #8
    a088:	bd70      	pop	{r4, r5, r6, pc}
    a08a:	68e0      	ldr	r0, [r4, #12]
    a08c:	f7fc fe70 	bl	6d70 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    a090:	b148      	cbz	r0, a0a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    a092:	68e0      	ldr	r0, [r4, #12]
    a094:	78c0      	ldrb	r0, [r0, #3]
    a096:	2819      	cmp	r0, #25
    a098:	d205      	bcs.n	a0a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    a09a:	490a      	ldr	r1, [pc, #40]	; (a0c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ac>)
    a09c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    a0a0:	b108      	cbz	r0, a0a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    a0a2:	4780      	blx	r0
    a0a4:	e002      	b.n	a0ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x594>
    a0a6:	2000      	movs	r0, #0
    a0a8:	f000 fbdc 	bl	a864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    a0ac:	6861      	ldr	r1, [r4, #4]
    a0ae:	e9f1 2336 	ldrd	r2, r3, [r1, #216]!	; 0xd8
    a0b2:	1c52      	adds	r2, r2, #1
    a0b4:	f143 0300 	adc.w	r3, r3, #0
    a0b8:	e9c1 2300 	strd	r2, r3, [r1]
    a0bc:	bd70      	pop	{r4, r5, r6, pc}
    a0be:	0000      	.short	0x0000
    a0c0:	20000104 	.word	0x20000104
    a0c4:	20000114 	.word	0x20000114
    a0c8:	b510      	push	{r4, lr}
    a0ca:	4c11      	ldr	r4, [pc, #68]	; (a110 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5f8>)
    a0cc:	78a0      	ldrb	r0, [r4, #2]
    a0ce:	0700      	lsls	r0, r0, #28
    a0d0:	d517      	bpl.n	a102 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    a0d2:	6860      	ldr	r0, [r4, #4]
    a0d4:	2100      	movs	r1, #0
    a0d6:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    a0da:	f001 f97b 	bl	b3d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    a0de:	6860      	ldr	r0, [r4, #4]
    a0e0:	3078      	adds	r0, #120	; 0x78
    a0e2:	f005 fb81 	bl	f7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    a0e6:	b168      	cbz	r0, a104 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ec>
    a0e8:	6860      	ldr	r0, [r4, #4]
    a0ea:	21fe      	movs	r1, #254	; 0xfe
    a0ec:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    a0f0:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    a0f4:	2908      	cmp	r1, #8
    a0f6:	d104      	bne.n	a102 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    a0f8:	2102      	movs	r1, #2
    a0fa:	7021      	strb	r1, [r4, #0]
    a0fc:	2100      	movs	r1, #0
    a0fe:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    a102:	bd10      	pop	{r4, pc}
    a104:	f240 61bd 	movw	r1, #1725	; 0x6bd
    a108:	2036      	movs	r0, #54	; 0x36
    a10a:	f7fa fe05 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a10e:	0000      	.short	0x0000
    a110:	20000104 	.word	0x20000104
    a114:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a116:	4605      	mov	r5, r0
    a118:	4668      	mov	r0, sp
    a11a:	f7fb fc09 	bl	5930 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    a11e:	b318      	cbz	r0, a168 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x650>
    a120:	2222      	movs	r2, #34	; 0x22
    a122:	2100      	movs	r1, #0
    a124:	9800      	ldr	r0, [sp, #0]
    a126:	f003 fa79 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a12a:	2103      	movs	r1, #3
    a12c:	9800      	ldr	r0, [sp, #0]
    a12e:	f004 fec5 	bl	eebc <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    a132:	9800      	ldr	r0, [sp, #0]
    a134:	7801      	ldrb	r1, [r0, #0]
    a136:	f021 0110 	bic.w	r1, r1, #16
    a13a:	7001      	strb	r1, [r0, #0]
    a13c:	4629      	mov	r1, r5
    a13e:	f7fc fe27 	bl	6d90 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    a142:	2100      	movs	r1, #0
    a144:	4c6a      	ldr	r4, [pc, #424]	; (a2f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d8>)
    a146:	2d19      	cmp	r5, #25
    a148:	d270      	bcs.n	a22c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x714>
    a14a:	e8df f005 	tbb	[pc, r5]
    a14e:	1c24      	.short	0x1c24
    a150:	c9c94c10 	.word	0xc9c94c10
    a154:	c97016c2 	.word	0xc97016c2
    a158:	c964c2c2 	.word	0xc964c2c2
    a15c:	b6c9c9c9 	.word	0xb6c9c9c9
    a160:	8181c2c2 	.word	0x8181c2c2
    a164:	00a3c99a 	.word	0x00a3c99a
    a168:	f640 014f 	movw	r1, #2127	; 0x84f
    a16c:	e0bd      	b.n	a2ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    a16e:	6860      	ldr	r0, [r4, #4]
    a170:	9900      	ldr	r1, [sp, #0]
    a172:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
    a176:	7108      	strb	r0, [r1, #4]
    a178:	e0ab      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a17a:	6861      	ldr	r1, [r4, #4]
    a17c:	9800      	ldr	r0, [sp, #0]
    a17e:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    a182:	7101      	strb	r1, [r0, #4]
    a184:	e0a5      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a186:	6860      	ldr	r0, [r4, #4]
    a188:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    a18c:	9800      	ldr	r0, [sp, #0]
    a18e:	1c49      	adds	r1, r1, #1
    a190:	f004 fe74 	bl	ee7c <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
    a194:	e09d      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a196:	6860      	ldr	r0, [r4, #4]
    a198:	9d00      	ldr	r5, [sp, #0]
    a19a:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    a19e:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    a1a2:	f004 fd88 	bl	ecb6 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    a1a6:	7128      	strb	r0, [r5, #4]
    a1a8:	6860      	ldr	r0, [r4, #4]
    a1aa:	9d00      	ldr	r5, [sp, #0]
    a1ac:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
    a1b0:	c803      	ldmia	r0, {r0, r1}
    a1b2:	f004 fd75 	bl	eca0 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    a1b6:	7168      	strb	r0, [r5, #5]
    a1b8:	0a00      	lsrs	r0, r0, #8
    a1ba:	71a8      	strb	r0, [r5, #6]
    a1bc:	6860      	ldr	r0, [r4, #4]
    a1be:	9d00      	ldr	r5, [sp, #0]
    a1c0:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
    a1c4:	f004 fbdb 	bl	e97e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    a1c8:	71e8      	strb	r0, [r5, #7]
    a1ca:	0a00      	lsrs	r0, r0, #8
    a1cc:	7228      	strb	r0, [r5, #8]
    a1ce:	6862      	ldr	r2, [r4, #4]
    a1d0:	9800      	ldr	r0, [sp, #0]
    a1d2:	f8b2 1154 	ldrh.w	r1, [r2, #340]	; 0x154
    a1d6:	7241      	strb	r1, [r0, #9]
    a1d8:	0a09      	lsrs	r1, r1, #8
    a1da:	7281      	strb	r1, [r0, #10]
    a1dc:	f8b2 1156 	ldrh.w	r1, [r2, #342]	; 0x156
    a1e0:	f004 fe51 	bl	ee86 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
    a1e4:	e075      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a1e6:	6861      	ldr	r1, [r4, #4]
    a1e8:	9800      	ldr	r0, [sp, #0]
    a1ea:	f201 115b 	addw	r1, r1, #347	; 0x15b
    a1ee:	f004 fe55 	bl	ee9c <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
    a1f2:	6861      	ldr	r1, [r4, #4]
    a1f4:	9800      	ldr	r0, [sp, #0]
    a1f6:	f201 1163 	addw	r1, r1, #355	; 0x163
    a1fa:	f004 fe48 	bl	ee8e <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
    a1fe:	6861      	ldr	r1, [r4, #4]
    a200:	9800      	ldr	r0, [sp, #0]
    a202:	f201 1175 	addw	r1, r1, #373	; 0x175
    a206:	f004 fe4e 	bl	eea6 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
    a20a:	6861      	ldr	r1, [r4, #4]
    a20c:	9800      	ldr	r0, [sp, #0]
    a20e:	31f0      	adds	r1, #240	; 0xf0
    a210:	f004 fe40 	bl	ee94 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
    a214:	e05d      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a216:	9800      	ldr	r0, [sp, #0]
    a218:	220b      	movs	r2, #11
    a21a:	7102      	strb	r2, [r0, #4]
    a21c:	2259      	movs	r2, #89	; 0x59
    a21e:	7142      	strb	r2, [r0, #5]
    a220:	7181      	strb	r1, [r0, #6]
    a222:	21b0      	movs	r1, #176	; 0xb0
    a224:	71c1      	strb	r1, [r0, #7]
    a226:	2112      	movs	r1, #18
    a228:	7201      	strb	r1, [r0, #8]
    a22a:	e052      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a22c:	e058      	b.n	a2e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7c8>
    a22e:	9101      	str	r1, [sp, #4]
    a230:	9102      	str	r1, [sp, #8]
    a232:	f001 fec7 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a236:	f644 112f 	movw	r1, #18735	; 0x492f
    a23a:	4008      	ands	r0, r1
    a23c:	f88d 0004 	strb.w	r0, [sp, #4]
    a240:	0a00      	lsrs	r0, r0, #8
    a242:	f88d 0005 	strb.w	r0, [sp, #5]
    a246:	a901      	add	r1, sp, #4
    a248:	9800      	ldr	r0, [sp, #0]
    a24a:	f004 fe32 	bl	eeb2 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    a24e:	e040      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a250:	6860      	ldr	r0, [r4, #4]
    a252:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    a256:	9800      	ldr	r0, [sp, #0]
    a258:	f004 fe42 	bl	eee0 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    a25c:	6860      	ldr	r0, [r4, #4]
    a25e:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    a262:	9800      	ldr	r0, [sp, #0]
    a264:	f004 fe40 	bl	eee8 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    a268:	6860      	ldr	r0, [r4, #4]
    a26a:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    a26e:	9800      	ldr	r0, [sp, #0]
    a270:	f004 fe2e 	bl	eed0 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    a274:	6860      	ldr	r0, [r4, #4]
    a276:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    a27a:	9800      	ldr	r0, [sp, #0]
    a27c:	f004 fe2c 	bl	eed8 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    a280:	e027      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a282:	6861      	ldr	r1, [r4, #4]
    a284:	9800      	ldr	r0, [sp, #0]
    a286:	f891 2140 	ldrb.w	r2, [r1, #320]	; 0x140
    a28a:	7102      	strb	r2, [r0, #4]
    a28c:	f891 1141 	ldrb.w	r1, [r1, #321]	; 0x141
    a290:	7141      	strb	r1, [r0, #5]
    a292:	e01e      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a294:	6860      	ldr	r0, [r4, #4]
    a296:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    a29a:	f004 fc2d 	bl	eaf8 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    a29e:	4601      	mov	r1, r0
    a2a0:	9800      	ldr	r0, [sp, #0]
    a2a2:	f004 fe29 	bl	eef8 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
    a2a6:	6860      	ldr	r0, [r4, #4]
    a2a8:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    a2ac:	f004 fc24 	bl	eaf8 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    a2b0:	4601      	mov	r1, r0
    a2b2:	9800      	ldr	r0, [sp, #0]
    a2b4:	f004 fe0a 	bl	eecc <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    a2b8:	e00b      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a2ba:	6860      	ldr	r0, [r4, #4]
    a2bc:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    a2c0:	9800      	ldr	r0, [sp, #0]
    a2c2:	f004 fdd7 	bl	ee74 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    a2c6:	6860      	ldr	r0, [r4, #4]
    a2c8:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    a2cc:	9800      	ldr	r0, [sp, #0]
    a2ce:	f004 fdd3 	bl	ee78 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    a2d2:	f7fb fb07 	bl	58e4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    a2d6:	b130      	cbz	r0, a2e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ce>
    a2d8:	9800      	ldr	r0, [sp, #0]
    a2da:	f7ff fcb1 	bl	9c40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    a2de:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a2e0:	f640 01db 	movw	r1, #2267	; 0x8db
    a2e4:	e001      	b.n	a2ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    a2e6:	f640 01e1 	movw	r1, #2273	; 0x8e1
    a2ea:	2036      	movs	r0, #54	; 0x36
    a2ec:	f7fa fd14 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2f0:	20000104 	.word	0x20000104
    a2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2f8:	4c27      	ldr	r4, [pc, #156]	; (a398 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x880>)
    a2fa:	4680      	mov	r8, r0
    a2fc:	460d      	mov	r5, r1
    a2fe:	8860      	ldrh	r0, [r4, #2]
    a300:	f04f 0600 	mov.w	r6, #0
    a304:	05c1      	lsls	r1, r0, #23
    a306:	4620      	mov	r0, r4
    a308:	6840      	ldr	r0, [r0, #4]
    a30a:	d502      	bpl.n	a312 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7fa>
    a30c:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
    a310:	e004      	b.n	a31c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x804>
    a312:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
    a316:	1c49      	adds	r1, r1, #1
    a318:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    a31c:	f005 faef 	bl	f8fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    a320:	2701      	movs	r7, #1
    a322:	b1e0      	cbz	r0, a35e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    a324:	8860      	ldrh	r0, [r4, #2]
    a326:	0500      	lsls	r0, r0, #20
    a328:	d506      	bpl.n	a338 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    a32a:	6860      	ldr	r0, [r4, #4]
    a32c:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    a330:	b111      	cbz	r1, a338 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    a332:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    a336:	e012      	b.n	a35e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    a338:	6860      	ldr	r0, [r4, #4]
    a33a:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    a33e:	1c49      	adds	r1, r1, #1
    a340:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    a344:	f005 fa71 	bl	f82a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    a348:	6860      	ldr	r0, [r4, #4]
    a34a:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    a34e:	4291      	cmp	r1, r2
    a350:	d305      	bcc.n	a35e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    a352:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    a356:	f880 718e 	strb.w	r7, [r0, #398]	; 0x18e
    a35a:	f001 f911 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a35e:	8860      	ldrh	r0, [r4, #2]
    a360:	f410 7f40 	tst.w	r0, #768	; 0x300
    a364:	d008      	beq.n	a378 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    a366:	6860      	ldr	r0, [r4, #4]
    a368:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    a36c:	b921      	cbnz	r1, a378 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    a36e:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    a372:	2101      	movs	r1, #1
    a374:	f7fe fb94 	bl	8aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a378:	ea58 0005 	orrs.w	r0, r8, r5
    a37c:	d104      	bne.n	a388 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x870>
    a37e:	f7ff fe17 	bl	9fb0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x498>
    a382:	4605      	mov	r5, r0
    a384:	f7ff fcea 	bl	9d5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x244>
    a388:	4629      	mov	r1, r5
    a38a:	4640      	mov	r0, r8
    a38c:	f000 ff7a 	bl	b284 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x176c>
    a390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a394:	f7fb ba90 	b.w	58b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    a398:	20000104 	.word	0x20000104
    a39c:	4813      	ldr	r0, [pc, #76]	; (a3ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d4>)
    a39e:	6840      	ldr	r0, [r0, #4]
    a3a0:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a3a4:	b129      	cbz	r1, a3b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x89a>
    a3a6:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    a3aa:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    a3ae:	4291      	cmp	r1, r2
    a3b0:	d215      	bcs.n	a3de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    a3b2:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    a3b6:	b129      	cbz	r1, a3c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ac>
    a3b8:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
    a3bc:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    a3c0:	4291      	cmp	r1, r2
    a3c2:	d20c      	bcs.n	a3de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    a3c4:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    a3c8:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    a3cc:	428a      	cmp	r2, r1
    a3ce:	d206      	bcs.n	a3de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    a3d0:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    a3d4:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    a3d8:	b11a      	cbz	r2, a3e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ca>
    a3da:	4288      	cmp	r0, r1
    a3dc:	d303      	bcc.n	a3e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ce>
    a3de:	2001      	movs	r0, #1
    a3e0:	4770      	bx	lr
    a3e2:	2806      	cmp	r0, #6
    a3e4:	d2fb      	bcs.n	a3de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    a3e6:	2000      	movs	r0, #0
    a3e8:	4770      	bx	lr
    a3ea:	0000      	.short	0x0000
    a3ec:	20000104 	.word	0x20000104
    a3f0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a3f2:	4c54      	ldr	r4, [pc, #336]	; (a544 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2c>)
    a3f4:	6860      	ldr	r0, [r4, #4]
    a3f6:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    a3fa:	f88d 1000 	strb.w	r1, [sp]
    a3fe:	9900      	ldr	r1, [sp, #0]
    a400:	9100      	str	r1, [sp, #0]
    a402:	f89d 1000 	ldrb.w	r1, [sp]
    a406:	b129      	cbz	r1, a414 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8fc>
    a408:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a40c:	f004 fb29 	bl	ea62 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    a410:	2800      	cmp	r0, #0
    a412:	d00a      	beq.n	a42a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x912>
    a414:	6860      	ldr	r0, [r4, #4]
    a416:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    a41a:	b181      	cbz	r1, a43e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x926>
    a41c:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    a420:	b149      	cbz	r1, a436 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x91e>
    a422:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
    a426:	b108      	cbz	r0, a42c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x914>
    a428:	200a      	movs	r0, #10
    a42a:	e087      	b.n	a53c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    a42c:	f44f 61e7 	mov.w	r1, #1848	; 0x738
    a430:	2036      	movs	r0, #54	; 0x36
    a432:	f7fa fc71 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a436:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    a43a:	f000 b885 	b.w	a548 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    a43e:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
    a442:	b109      	cbz	r1, a448 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x930>
    a444:	2008      	movs	r0, #8
    a446:	e079      	b.n	a53c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    a448:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    a44c:	2500      	movs	r5, #0
    a44e:	b181      	cbz	r1, a472 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x95a>
    a450:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    a454:	0780      	lsls	r0, r0, #30
    a456:	d10b      	bne.n	a470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    a458:	200c      	movs	r0, #12
    a45a:	f000 f961 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a45e:	6860      	ldr	r0, [r4, #4]
    a460:	2101      	movs	r1, #1
    a462:	f820 5fb4 	strh.w	r5, [r0, #180]!
    a466:	7101      	strb	r1, [r0, #4]
    a468:	7b01      	ldrb	r1, [r0, #12]
    a46a:	f041 0101 	orr.w	r1, r1, #1
    a46e:	7301      	strb	r1, [r0, #12]
    a470:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a472:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    a476:	f88d 1004 	strb.w	r1, [sp, #4]
    a47a:	9901      	ldr	r1, [sp, #4]
    a47c:	9101      	str	r1, [sp, #4]
    a47e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a482:	b141      	cbz	r1, a496 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x97e>
    a484:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    a488:	f88d 1000 	strb.w	r1, [sp]
    a48c:	9900      	ldr	r1, [sp, #0]
    a48e:	9100      	str	r1, [sp, #0]
    a490:	f89d 1000 	ldrb.w	r1, [sp]
    a494:	b391      	cbz	r1, a4fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9e4>
    a496:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    a49a:	2901      	cmp	r1, #1
    a49c:	d1e8      	bne.n	a470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    a49e:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    a4a2:	f88d 1000 	strb.w	r1, [sp]
    a4a6:	9900      	ldr	r1, [sp, #0]
    a4a8:	9100      	str	r1, [sp, #0]
    a4aa:	f89d 1000 	ldrb.w	r1, [sp]
    a4ae:	2900      	cmp	r1, #0
    a4b0:	d1de      	bne.n	a470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    a4b2:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a4b6:	f004 fad4 	bl	ea62 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    a4ba:	2800      	cmp	r0, #0
    a4bc:	d1d8      	bne.n	a470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    a4be:	6860      	ldr	r0, [r4, #4]
    a4c0:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    a4c4:	f005 f998 	bl	f7f8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    a4c8:	4605      	mov	r5, r0
    a4ca:	6860      	ldr	r0, [r4, #4]
    a4cc:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    a4d0:	f005 f992 	bl	f7f8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    a4d4:	4606      	mov	r6, r0
    a4d6:	6860      	ldr	r0, [r4, #4]
    a4d8:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    a4dc:	4628      	mov	r0, r5
    a4de:	f005 f996 	bl	f80e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    a4e2:	b350      	cbz	r0, a53a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    a4e4:	6860      	ldr	r0, [r4, #4]
    a4e6:	f890 1141 	ldrb.w	r1, [r0, #321]	; 0x141
    a4ea:	4630      	mov	r0, r6
    a4ec:	f005 f98f 	bl	f80e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    a4f0:	b318      	cbz	r0, a53a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    a4f2:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    a4f6:	2000      	movs	r0, #0
    a4f8:	f000 b8ee 	b.w	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a4fc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a500:	2924      	cmp	r1, #36	; 0x24
    a502:	d018      	beq.n	a536 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    a504:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a508:	2924      	cmp	r1, #36	; 0x24
    a50a:	d014      	beq.n	a536 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    a50c:	f05f 0300 	movs.w	r3, #0
    a510:	f500 7293 	add.w	r2, r0, #294	; 0x126
    a514:	f500 7199 	add.w	r1, r0, #306	; 0x132
    a518:	f004 fdf2 	bl	f100 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    a51c:	6860      	ldr	r0, [r4, #4]
    a51e:	4602      	mov	r2, r0
    a520:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    a524:	f102 012c 	add.w	r1, r2, #44	; 0x2c
    a528:	8bc8      	ldrh	r0, [r1, #30]
    a52a:	f822 0ffe 	strh.w	r0, [r2, #254]!
    a52e:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    a530:	8050      	strh	r0, [r2, #2]
    a532:	2014      	movs	r0, #20
    a534:	e002      	b.n	a53c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    a536:	2301      	movs	r3, #1
    a538:	e7ea      	b.n	a510 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9f8>
    a53a:	2016      	movs	r0, #22
    a53c:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    a540:	f000 b8ee 	b.w	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a544:	20000104 	.word	0x20000104
    a548:	b510      	push	{r4, lr}
    a54a:	4c1e      	ldr	r4, [pc, #120]	; (a5c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaac>)
    a54c:	6862      	ldr	r2, [r4, #4]
    a54e:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    a552:	2808      	cmp	r0, #8
    a554:	d20d      	bcs.n	a572 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa5a>
    a556:	f1c0 0108 	rsb	r1, r0, #8
    a55a:	4410      	add	r0, r2
    a55c:	b2c9      	uxtb	r1, r1
    a55e:	f200 1075 	addw	r0, r0, #373	; 0x175
    a562:	f7fa fc67 	bl	4e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a566:	6861      	ldr	r1, [r4, #4]
    a568:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    a56c:	4410      	add	r0, r2
    a56e:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    a572:	6862      	ldr	r2, [r4, #4]
    a574:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    a578:	3808      	subs	r0, #8
    a57a:	2804      	cmp	r0, #4
    a57c:	d20c      	bcs.n	a598 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa80>
    a57e:	f1c0 0104 	rsb	r1, r0, #4
    a582:	4410      	add	r0, r2
    a584:	b2c9      	uxtb	r1, r1
    a586:	30f0      	adds	r0, #240	; 0xf0
    a588:	f7fa fc54 	bl	4e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a58c:	6861      	ldr	r1, [r4, #4]
    a58e:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    a592:	4410      	add	r0, r2
    a594:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    a598:	6860      	ldr	r0, [r4, #4]
    a59a:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    a59e:	290c      	cmp	r1, #12
    a5a0:	d30e      	bcc.n	a5c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaa8>
    a5a2:	d005      	beq.n	a5b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa98>
    a5a4:	f640 1131 	movw	r1, #2353	; 0x931
    a5a8:	f04f 0036 	mov.w	r0, #54	; 0x36
    a5ac:	f7fa fbb4 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5b0:	2100      	movs	r1, #0
    a5b2:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    a5b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5ba:	2003      	movs	r0, #3
    a5bc:	f000 b8b0 	b.w	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a5c0:	bd10      	pop	{r4, pc}
    a5c2:	0000      	.short	0x0000
    a5c4:	20000104 	.word	0x20000104
    a5c8:	b570      	push	{r4, r5, r6, lr}
    a5ca:	4b20      	ldr	r3, [pc, #128]	; (a64c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb34>)
    a5cc:	4602      	mov	r2, r0
    a5ce:	460c      	mov	r4, r1
    a5d0:	8858      	ldrh	r0, [r3, #2]
    a5d2:	4310      	orrs	r0, r2
    a5d4:	8058      	strh	r0, [r3, #2]
    a5d6:	4618      	mov	r0, r3
    a5d8:	0791      	lsls	r1, r2, #30
    a5da:	6840      	ldr	r0, [r0, #4]
    a5dc:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    a5e0:	d507      	bpl.n	a5f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xada>
    a5e2:	b121      	cbz	r1, a5ee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xad6>
    a5e4:	f640 21c5 	movw	r1, #2757	; 0xac5
    a5e8:	2036      	movs	r0, #54	; 0x36
    a5ea:	f7fa fb95 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5ee:	609c      	str	r4, [r3, #8]
    a5f0:	e003      	b.n	a5fa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae2>
    a5f2:	b101      	cbz	r1, a5f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xade>
    a5f4:	60dc      	str	r4, [r3, #12]
    a5f6:	0791      	lsls	r1, r2, #30
    a5f8:	d515      	bpl.n	a626 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    a5fa:	78e1      	ldrb	r1, [r4, #3]
    a5fc:	2906      	cmp	r1, #6
    a5fe:	d002      	beq.n	a606 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaee>
    a600:	290b      	cmp	r1, #11
    a602:	d110      	bne.n	a626 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    a604:	e008      	b.n	a618 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb00>
    a606:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a60a:	2918      	cmp	r1, #24
    a60c:	d10b      	bne.n	a626 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    a60e:	2100      	movs	r1, #0
    a610:	e9c0 1136 	strd	r1, r1, [r0, #216]	; 0xd8
    a614:	2101      	movs	r1, #1
    a616:	e004      	b.n	a622 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0a>
    a618:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a61c:	2912      	cmp	r1, #18
    a61e:	d102      	bne.n	a626 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    a620:	2100      	movs	r1, #0
    a622:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
    a626:	0691      	lsls	r1, r2, #26
    a628:	d501      	bpl.n	a62e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb16>
    a62a:	2108      	movs	r1, #8
    a62c:	7059      	strb	r1, [r3, #1]
    a62e:	0611      	lsls	r1, r2, #24
    a630:	d50a      	bpl.n	a648 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb30>
    a632:	8a82      	ldrh	r2, [r0, #20]
    a634:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    a638:	4620      	mov	r0, r4
    a63a:	f7ff fae3 	bl	9c04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>
    a63e:	4620      	mov	r0, r4
    a640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a644:	f7ff bafc 	b.w	9c40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    a648:	bd70      	pop	{r4, r5, r6, pc}
    a64a:	0000      	.short	0x0000
    a64c:	20000104 	.word	0x20000104
    a650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a654:	4c1f      	ldr	r4, [pc, #124]	; (a6d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbbc>)
    a656:	2501      	movs	r5, #1
    a658:	6862      	ldr	r2, [r4, #4]
    a65a:	f892 0126 	ldrb.w	r0, [r2, #294]	; 0x126
    a65e:	b908      	cbnz	r0, a664 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb4c>
    a660:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    a664:	f892 1127 	ldrb.w	r1, [r2, #295]	; 0x127
    a668:	b909      	cbnz	r1, a66e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb56>
    a66a:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    a66e:	f882 006a 	strb.w	r0, [r2, #106]	; 0x6a
    a672:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    a676:	3262      	adds	r2, #98	; 0x62
    a678:	2001      	movs	r0, #1
    a67a:	7290      	strb	r0, [r2, #10]
    a67c:	2000      	movs	r0, #0
    a67e:	f000 f82b 	bl	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a682:	6860      	ldr	r0, [r4, #4]
    a684:	302c      	adds	r0, #44	; 0x2c
    a686:	f004 fdaa 	bl	f1de <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a68a:	4606      	mov	r6, r0
    a68c:	6860      	ldr	r0, [r4, #4]
    a68e:	f004 fd52 	bl	f136 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a692:	b1c0      	cbz	r0, a6c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    a694:	6860      	ldr	r0, [r4, #4]
    a696:	302c      	adds	r0, #44	; 0x2c
    a698:	f004 fda1 	bl	f1de <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a69c:	6861      	ldr	r1, [r4, #4]
    a69e:	4607      	mov	r7, r0
    a6a0:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    a6a4:	8808      	ldrh	r0, [r1, #0]
    a6a6:	312c      	adds	r1, #44	; 0x2c
    a6a8:	f004 fd06 	bl	f0b8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a6ac:	42be      	cmp	r6, r7
    a6ae:	d20a      	bcs.n	a6c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    a6b0:	f7f7 ff54 	bl	255c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    a6b4:	4601      	mov	r1, r0
    a6b6:	1bb8      	subs	r0, r7, r6
    a6b8:	2864      	cmp	r0, #100	; 0x64
    a6ba:	d200      	bcs.n	a6be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba6>
    a6bc:	2064      	movs	r0, #100	; 0x64
    a6be:	f7f7 fe41 	bl	2344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    a6c2:	b100      	cbz	r0, a6c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    a6c4:	2500      	movs	r5, #0
    a6c6:	2104      	movs	r1, #4
    a6c8:	6860      	ldr	r0, [r4, #4]
    a6ca:	f7fe f9e9 	bl	8aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a6ce:	4628      	mov	r0, r5
    a6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a6d4:	20000104 	.word	0x20000104
    a6d8:	b510      	push	{r4, lr}
    a6da:	4c10      	ldr	r4, [pc, #64]	; (a71c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc04>)
    a6dc:	6861      	ldr	r1, [r4, #4]
    a6de:	880a      	ldrh	r2, [r1, #0]
    a6e0:	f8a1 21b4 	strh.w	r2, [r1, #436]	; 0x1b4
    a6e4:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
    a6e8:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    a6ec:	f005 f884 	bl	f7f8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    a6f0:	6861      	ldr	r1, [r4, #4]
    a6f2:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    a6f6:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    a6fa:	f005 f87d 	bl	f7f8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    a6fe:	6862      	ldr	r2, [r4, #4]
    a700:	f502 71d8 	add.w	r1, r2, #432	; 0x1b0
    a704:	f882 01b7 	strb.w	r0, [r2, #439]	; 0x1b7
    a708:	2001      	movs	r0, #1
    a70a:	7008      	strb	r0, [r1, #0]
    a70c:	2000      	movs	r0, #0
    a70e:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
    a712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a716:	f000 bf33 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a71a:	0000      	.short	0x0000
    a71c:	20000104 	.word	0x20000104
    a720:	490f      	ldr	r1, [pc, #60]	; (a760 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc48>)
    a722:	280c      	cmp	r0, #12
    a724:	6849      	ldr	r1, [r1, #4]
    a726:	f881 00fc 	strb.w	r0, [r1, #252]	; 0xfc
    a72a:	d014      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a72c:	2813      	cmp	r0, #19
    a72e:	d012      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a730:	2818      	cmp	r0, #24
    a732:	d010      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a734:	2200      	movs	r2, #0
    a736:	2811      	cmp	r0, #17
    a738:	d00e      	beq.n	a758 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    a73a:	2807      	cmp	r0, #7
    a73c:	d00b      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a73e:	2815      	cmp	r0, #21
    a740:	d00a      	beq.n	a758 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    a742:	2801      	cmp	r0, #1
    a744:	d007      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a746:	2800      	cmp	r0, #0
    a748:	d005      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a74a:	2802      	cmp	r0, #2
    a74c:	d003      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a74e:	f821 2fb4 	strh.w	r2, [r1, #180]!
    a752:	2001      	movs	r0, #1
    a754:	7108      	strb	r0, [r1, #4]
    a756:	4770      	bx	lr
    a758:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    a75c:	4770      	bx	lr
    a75e:	0000      	.short	0x0000
    a760:	20000104 	.word	0x20000104
    a764:	b538      	push	{r3, r4, r5, lr}
    a766:	4c11      	ldr	r4, [pc, #68]	; (a7ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc94>)
    a768:	6862      	ldr	r2, [r4, #4]
    a76a:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    a76e:	f8ad 2000 	strh.w	r2, [sp]
    a772:	f004 f9f6 	bl	eb62 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    a776:	f89d 3000 	ldrb.w	r3, [sp]
    a77a:	b2c2      	uxtb	r2, r0
    a77c:	2100      	movs	r1, #0
    a77e:	4293      	cmp	r3, r2
    a780:	d003      	beq.n	a78a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc72>
    a782:	6863      	ldr	r3, [r4, #4]
    a784:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    a788:	e002      	b.n	a790 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc78>
    a78a:	6862      	ldr	r2, [r4, #4]
    a78c:	f882 1126 	strb.w	r1, [r2, #294]	; 0x126
    a790:	f89d 2001 	ldrb.w	r2, [sp, #1]
    a794:	f3c0 2007 	ubfx	r0, r0, #8, #8
    a798:	4282      	cmp	r2, r0
    a79a:	d003      	beq.n	a7a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc8c>
    a79c:	6861      	ldr	r1, [r4, #4]
    a79e:	f881 0127 	strb.w	r0, [r1, #295]	; 0x127
    a7a2:	bd38      	pop	{r3, r4, r5, pc}
    a7a4:	6860      	ldr	r0, [r4, #4]
    a7a6:	f880 1127 	strb.w	r1, [r0, #295]	; 0x127
    a7aa:	bd38      	pop	{r3, r4, r5, pc}
    a7ac:	20000104 	.word	0x20000104
    a7b0:	b510      	push	{r4, lr}
    a7b2:	4c0c      	ldr	r4, [pc, #48]	; (a7e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xccc>)
    a7b4:	6861      	ldr	r1, [r4, #4]
    a7b6:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    a7ba:	2813      	cmp	r0, #19
    a7bc:	d001      	beq.n	a7c2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcaa>
    a7be:	2002      	movs	r0, #2
    a7c0:	bd10      	pop	{r4, pc}
    a7c2:	f201 117d 	addw	r1, r1, #381	; 0x17d
    a7c6:	68e0      	ldr	r0, [r4, #12]
    a7c8:	f004 fb06 	bl	edd8 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>
    a7cc:	6861      	ldr	r1, [r4, #4]
    a7ce:	68e0      	ldr	r0, [r4, #12]
    a7d0:	31f4      	adds	r1, #244	; 0xf4
    a7d2:	f004 fafe 	bl	edd2 <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>
    a7d6:	6861      	ldr	r1, [r4, #4]
    a7d8:	2016      	movs	r0, #22
    a7da:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a7de:	2000      	movs	r0, #0
    a7e0:	bd10      	pop	{r4, pc}
    a7e2:	0000      	.short	0x0000
    a7e4:	20000104 	.word	0x20000104
    a7e8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a7ea:	4c1d      	ldr	r4, [pc, #116]	; (a860 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd48>)
    a7ec:	2300      	movs	r3, #0
    a7ee:	2107      	movs	r1, #7
    a7f0:	6860      	ldr	r0, [r4, #4]
    a7f2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a7f6:	3078      	adds	r0, #120	; 0x78
    a7f8:	f004 f8da 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7fc:	b370      	cbz	r0, a85c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd44>
    a7fe:	4669      	mov	r1, sp
    a800:	68e0      	ldr	r0, [r4, #12]
    a802:	f004 faee 	bl	ede2 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    a806:	f001 fbdd 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a80a:	f644 112f 	movw	r1, #18735	; 0x492f
    a80e:	4008      	ands	r0, r1
    a810:	f89d 2000 	ldrb.w	r2, [sp]
    a814:	6861      	ldr	r1, [r4, #4]
    a816:	4002      	ands	r2, r0
    a818:	2500      	movs	r5, #0
    a81a:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    a81e:	f89d 2001 	ldrb.w	r2, [sp, #1]
    a822:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    a826:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
    a82a:	f881 50b8 	strb.w	r5, [r1, #184]	; 0xb8
    a82e:	f881 5159 	strb.w	r5, [r1, #345]	; 0x159
    a832:	8808      	ldrh	r0, [r1, #0]
    a834:	f8a1 01bc 	strh.w	r0, [r1, #444]	; 0x1bc
    a838:	f881 51ba 	strb.w	r5, [r1, #442]	; 0x1ba
    a83c:	9a00      	ldr	r2, [sp, #0]
    a83e:	f8c1 21be 	str.w	r2, [r1, #446]	; 0x1be
    a842:	9a01      	ldr	r2, [sp, #4]
    a844:	f8c1 21c2 	str.w	r2, [r1, #450]	; 0x1c2
    a848:	2001      	movs	r0, #1
    a84a:	f881 01b8 	strb.w	r0, [r1, #440]	; 0x1b8
    a84e:	f000 fe97 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a852:	6860      	ldr	r0, [r4, #4]
    a854:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a858:	2000      	movs	r0, #0
    a85a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a85c:	2001      	movs	r0, #1
    a85e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a860:	20000104 	.word	0x20000104
    a864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a868:	4c19      	ldr	r4, [pc, #100]	; (a8d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb8>)
    a86a:	2600      	movs	r6, #0
    a86c:	2703      	movs	r7, #3
    a86e:	f8d4 c004 	ldr.w	ip, [r4, #4]
    a872:	2501      	movs	r5, #1
    a874:	b1a0      	cbz	r0, a8a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd88>
    a876:	68e0      	ldr	r0, [r4, #12]
    a878:	78c0      	ldrb	r0, [r0, #3]
    a87a:	f88c 00fa 	strb.w	r0, [ip, #250]	; 0xfa
    a87e:	fa05 f000 	lsl.w	r0, r5, r0
    a882:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    a886:	b130      	cbz	r0, a896 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd7e>
    a888:	f88c 7085 	strb.w	r7, [ip, #133]	; 0x85
    a88c:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
    a890:	f88c 50b8 	strb.w	r5, [ip, #184]	; 0xb8
    a894:	e017      	b.n	a8c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdae>
    a896:	f240 5143 	movw	r1, #1347	; 0x543
    a89a:	2036      	movs	r0, #54	; 0x36
    a89c:	f7fa fa3c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8a0:	2300      	movs	r3, #0
    a8a2:	f89c 2086 	ldrb.w	r2, [ip, #134]	; 0x86
    a8a6:	4619      	mov	r1, r3
    a8a8:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    a8ac:	f004 f880 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8b0:	b160      	cbz	r0, a8cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb4>
    a8b2:	68e0      	ldr	r0, [r4, #12]
    a8b4:	78c1      	ldrb	r1, [r0, #3]
    a8b6:	6860      	ldr	r0, [r4, #4]
    a8b8:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    a8bc:	f800 7f86 	strb.w	r7, [r0, #134]!
    a8c0:	8686      	strh	r6, [r0, #52]	; 0x34
    a8c2:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    a8c6:	2000      	movs	r0, #0
    a8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a8cc:	2001      	movs	r0, #1
    a8ce:	e7fb      	b.n	a8c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb0>
    a8d0:	20000104 	.word	0x20000104
    a8d4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a8d8:	4c30      	ldr	r4, [pc, #192]	; (a99c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe84>)
    a8da:	2300      	movs	r3, #0
    a8dc:	4619      	mov	r1, r3
    a8de:	6860      	ldr	r0, [r4, #4]
    a8e0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a8e4:	3078      	adds	r0, #120	; 0x78
    a8e6:	f004 f863 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8ea:	b308      	cbz	r0, a930 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe18>
    a8ec:	68e0      	ldr	r0, [r4, #12]
    a8ee:	f004 fa8d 	bl	ee0c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a8f2:	b300      	cbz	r0, a936 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1e>
    a8f4:	68e0      	ldr	r0, [r4, #12]
    a8f6:	f004 fa7f 	bl	edf8 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a8fa:	4607      	mov	r7, r0
    a8fc:	68e0      	ldr	r0, [r4, #12]
    a8fe:	f004 fa7f 	bl	ee00 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a902:	4606      	mov	r6, r0
    a904:	68e0      	ldr	r0, [r4, #12]
    a906:	f004 fa75 	bl	edf4 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a90a:	4605      	mov	r5, r0
    a90c:	68e0      	ldr	r0, [r4, #12]
    a90e:	f004 fa75 	bl	edfc <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a912:	4601      	mov	r1, r0
    a914:	9700      	str	r7, [sp, #0]
    a916:	6860      	ldr	r0, [r4, #4]
    a918:	4633      	mov	r3, r6
    a91a:	462a      	mov	r2, r5
    a91c:	302c      	adds	r0, #44	; 0x2c
    a91e:	f004 fc98 	bl	f252 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a922:	6861      	ldr	r1, [r4, #4]
    a924:	2501      	movs	r5, #1
    a926:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    a92a:	281c      	cmp	r0, #28
    a92c:	d008      	beq.n	a940 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe28>
    a92e:	e009      	b.n	a944 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe2c>
    a930:	2001      	movs	r0, #1
    a932:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a936:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a93a:	2000      	movs	r0, #0
    a93c:	f7ff bf92 	b.w	a864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    a940:	f881 5060 	strb.w	r5, [r1, #96]	; 0x60
    a944:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    a948:	2801      	cmp	r0, #1
    a94a:	d011      	beq.n	a970 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    a94c:	f891 0133 	ldrb.w	r0, [r1, #307]	; 0x133
    a950:	f88d 0004 	strb.w	r0, [sp, #4]
    a954:	9801      	ldr	r0, [sp, #4]
    a956:	9001      	str	r0, [sp, #4]
    a958:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a95c:	b940      	cbnz	r0, a970 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    a95e:	f891 0132 	ldrb.w	r0, [r1, #306]	; 0x132
    a962:	f88d 0000 	strb.w	r0, [sp]
    a966:	9800      	ldr	r0, [sp, #0]
    a968:	9000      	str	r0, [sp, #0]
    a96a:	f89d 0000 	ldrb.w	r0, [sp]
    a96e:	b118      	cbz	r0, a978 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe60>
    a970:	201e      	movs	r0, #30
    a972:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a976:	e00a      	b.n	a98e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe76>
    a978:	201d      	movs	r0, #29
    a97a:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a97e:	f501 72cf 	add.w	r2, r1, #414	; 0x19e
    a982:	f831 0b2c 	ldrh.w	r0, [r1], #44
    a986:	f004 fc6b 	bl	f260 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    a98a:	f000 fdf9 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a98e:	6860      	ldr	r0, [r4, #4]
    a990:	2100      	movs	r1, #0
    a992:	f820 1fba 	strh.w	r1, [r0, #186]!
    a996:	7085      	strb	r5, [r0, #2]
    a998:	4608      	mov	r0, r1
    a99a:	e7ca      	b.n	a932 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1a>
    a99c:	20000104 	.word	0x20000104
    a9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9a2:	4c1a      	ldr	r4, [pc, #104]	; (aa0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xef4>)
    a9a4:	2300      	movs	r3, #0
    a9a6:	210a      	movs	r1, #10
    a9a8:	6860      	ldr	r0, [r4, #4]
    a9aa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a9ae:	3078      	adds	r0, #120	; 0x78
    a9b0:	f003 fffe 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a9b4:	b338      	cbz	r0, aa06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeee>
    a9b6:	68e0      	ldr	r0, [r4, #12]
    a9b8:	f004 fa28 	bl	ee0c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a9bc:	b1c8      	cbz	r0, a9f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeda>
    a9be:	68e0      	ldr	r0, [r4, #12]
    a9c0:	f004 fa1a 	bl	edf8 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a9c4:	4607      	mov	r7, r0
    a9c6:	68e0      	ldr	r0, [r4, #12]
    a9c8:	f004 fa1a 	bl	ee00 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a9cc:	4606      	mov	r6, r0
    a9ce:	68e0      	ldr	r0, [r4, #12]
    a9d0:	f004 fa10 	bl	edf4 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a9d4:	4605      	mov	r5, r0
    a9d6:	68e0      	ldr	r0, [r4, #12]
    a9d8:	f004 fa10 	bl	edfc <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a9dc:	4601      	mov	r1, r0
    a9de:	9700      	str	r7, [sp, #0]
    a9e0:	6860      	ldr	r0, [r4, #4]
    a9e2:	4633      	mov	r3, r6
    a9e4:	462a      	mov	r2, r5
    a9e6:	302c      	adds	r0, #44	; 0x2c
    a9e8:	f004 fc33 	bl	f252 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a9ec:	6860      	ldr	r0, [r4, #4]
    a9ee:	f004 fba2 	bl	f136 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a9f2:	6861      	ldr	r1, [r4, #4]
    a9f4:	2000      	movs	r0, #0
    a9f6:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    a9fa:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a9fe:	f7ff fabf 	bl	9f80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    aa02:	2000      	movs	r0, #0
    aa04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa06:	2001      	movs	r0, #1
    aa08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa0a:	0000      	.short	0x0000
    aa0c:	20000104 	.word	0x20000104
    aa10:	b510      	push	{r4, lr}
    aa12:	4c0b      	ldr	r4, [pc, #44]	; (aa40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf28>)
    aa14:	2300      	movs	r3, #0
    aa16:	4619      	mov	r1, r3
    aa18:	6860      	ldr	r0, [r4, #4]
    aa1a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    aa1e:	3078      	adds	r0, #120	; 0x78
    aa20:	f003 ffc6 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa24:	b150      	cbz	r0, aa3c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf24>
    aa26:	6860      	ldr	r0, [r4, #4]
    aa28:	2100      	movs	r1, #0
    aa2a:	f820 1fba 	strh.w	r1, [r0, #186]!
    aa2e:	2101      	movs	r1, #1
    aa30:	7081      	strb	r1, [r0, #2]
    aa32:	2102      	movs	r1, #2
    aa34:	f800 1c34 	strb.w	r1, [r0, #-52]
    aa38:	2000      	movs	r0, #0
    aa3a:	bd10      	pop	{r4, pc}
    aa3c:	2001      	movs	r0, #1
    aa3e:	bd10      	pop	{r4, pc}
    aa40:	20000104 	.word	0x20000104
    aa44:	b510      	push	{r4, lr}
    aa46:	4c09      	ldr	r4, [pc, #36]	; (aa6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf54>)
    aa48:	2300      	movs	r3, #0
    aa4a:	2109      	movs	r1, #9
    aa4c:	6860      	ldr	r0, [r4, #4]
    aa4e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aa52:	3078      	adds	r0, #120	; 0x78
    aa54:	f003 ffac 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa58:	2800      	cmp	r0, #0
    aa5a:	d006      	beq.n	aa6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf52>
    aa5c:	6861      	ldr	r1, [r4, #4]
    aa5e:	2000      	movs	r0, #0
    aa60:	f801 0fac 	strb.w	r0, [r1, #172]!
    aa64:	7308      	strb	r0, [r1, #12]
    aa66:	f801 0c27 	strb.w	r0, [r1, #-39]
    aa6a:	bd10      	pop	{r4, pc}
    aa6c:	20000104 	.word	0x20000104
    aa70:	4807      	ldr	r0, [pc, #28]	; (aa90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf78>)
    aa72:	6840      	ldr	r0, [r0, #4]
    aa74:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    aa78:	290f      	cmp	r1, #15
    aa7a:	d001      	beq.n	aa80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf68>
    aa7c:	2002      	movs	r0, #2
    aa7e:	4770      	bx	lr
    aa80:	2100      	movs	r1, #0
    aa82:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    aa86:	2112      	movs	r1, #18
    aa88:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    aa8c:	2000      	movs	r0, #0
    aa8e:	4770      	bx	lr
    aa90:	20000104 	.word	0x20000104
    aa94:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa96:	4c42      	ldr	r4, [pc, #264]	; (aba0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1088>)
    aa98:	2600      	movs	r6, #0
    aa9a:	b087      	sub	sp, #28
    aa9c:	6860      	ldr	r0, [r4, #4]
    aa9e:	4633      	mov	r3, r6
    aaa0:	4631      	mov	r1, r6
    aaa2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    aaa6:	3078      	adds	r0, #120	; 0x78
    aaa8:	f003 ff82 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aaac:	b180      	cbz	r0, aad0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfb8>
    aaae:	6860      	ldr	r0, [r4, #4]
    aab0:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    aab4:	2823      	cmp	r0, #35	; 0x23
    aab6:	d00e      	beq.n	aad6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    aab8:	2824      	cmp	r0, #36	; 0x24
    aaba:	d00c      	beq.n	aad6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    aabc:	4668      	mov	r0, sp
    aabe:	f7fa ff25 	bl	590c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    aac2:	b150      	cbz	r0, aada <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc2>
    aac4:	9800      	ldr	r0, [sp, #0]
    aac6:	a901      	add	r1, sp, #4
    aac8:	78c0      	ldrb	r0, [r0, #3]
    aaca:	f88d 0004 	strb.w	r0, [sp, #4]
    aace:	e005      	b.n	aadc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc4>
    aad0:	2001      	movs	r0, #1
    aad2:	b007      	add	sp, #28
    aad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aad6:	2020      	movs	r0, #32
    aad8:	e7fb      	b.n	aad2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    aada:	2100      	movs	r1, #0
    aadc:	6860      	ldr	r0, [r4, #4]
    aade:	ab04      	add	r3, sp, #16
    aae0:	2216      	movs	r2, #22
    aae2:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    aae6:	f004 f81f 	bl	eb28 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    aaea:	2700      	movs	r7, #0
    aaec:	2501      	movs	r5, #1
    aaee:	b178      	cbz	r0, ab10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xff8>
    aaf0:	6860      	ldr	r0, [r4, #4]
    aaf2:	f89d 1010 	ldrb.w	r1, [sp, #16]
    aaf6:	2216      	movs	r2, #22
    aaf8:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
    aafc:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
    ab00:	2119      	movs	r1, #25
    ab02:	f800 1f86 	strb.w	r1, [r0, #134]!
    ab06:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    ab0a:	8687      	strh	r7, [r0, #52]	; 0x34
    ab0c:	2000      	movs	r0, #0
    ab0e:	e7e0      	b.n	aad2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    ab10:	68e0      	ldr	r0, [r4, #12]
    ab12:	f004 f997 	bl	ee44 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    ab16:	b1a8      	cbz	r0, ab44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x102c>
    ab18:	68e1      	ldr	r1, [r4, #12]
    ab1a:	7908      	ldrb	r0, [r1, #4]
    ab1c:	f000 0207 	and.w	r2, r0, #7
    ab20:	6860      	ldr	r0, [r4, #4]
    ab22:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    ab26:	7949      	ldrb	r1, [r1, #5]
    ab28:	f001 0107 	and.w	r1, r1, #7
    ab2c:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    ab30:	f890 313f 	ldrb.w	r3, [r0, #319]	; 0x13f
    ab34:	f88d 3018 	strb.w	r3, [sp, #24]
    ab38:	9b06      	ldr	r3, [sp, #24]
    ab3a:	9301      	str	r3, [sp, #4]
    ab3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ab40:	bb23      	cbnz	r3, ab8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    ab42:	e004      	b.n	ab4e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1036>
    ab44:	2000      	movs	r0, #0
    ab46:	f7ff fe8d 	bl	a864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    ab4a:	4606      	mov	r6, r0
    ab4c:	e025      	b.n	ab9a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1082>
    ab4e:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    ab52:	2b01      	cmp	r3, #1
    ab54:	d01a      	beq.n	ab8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    ab56:	f890 c06b 	ldrb.w	ip, [r0, #107]	; 0x6b
    ab5a:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    ab5e:	4594      	cmp	ip, r2
    ab60:	d106      	bne.n	ab70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    ab62:	781a      	ldrb	r2, [r3, #0]
    ab64:	428a      	cmp	r2, r1
    ab66:	d103      	bne.n	ab70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    ab68:	2102      	movs	r1, #2
    ab6a:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
    ab6e:	e00d      	b.n	ab8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    ab70:	f500 71d6 	add.w	r1, r0, #428	; 0x1ac
    ab74:	8802      	ldrh	r2, [r0, #0]
    ab76:	f821 2902 	strh.w	r2, [r1], #-2
    ab7a:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    ab7e:	710a      	strb	r2, [r1, #4]
    ab80:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    ab84:	7148      	strb	r0, [r1, #5]
    ab86:	700d      	strb	r5, [r1, #0]
    ab88:	f000 fcfa 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ab8c:	6860      	ldr	r0, [r4, #4]
    ab8e:	2121      	movs	r1, #33	; 0x21
    ab90:	f800 1f86 	strb.w	r1, [r0, #134]!
    ab94:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    ab98:	8687      	strh	r7, [r0, #52]	; 0x34
    ab9a:	4630      	mov	r0, r6
    ab9c:	e799      	b.n	aad2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    ab9e:	0000      	.short	0x0000
    aba0:	20000104 	.word	0x20000104
    aba4:	b570      	push	{r4, r5, r6, lr}
    aba6:	4c18      	ldr	r4, [pc, #96]	; (ac08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10f0>)
    aba8:	6860      	ldr	r0, [r4, #4]
    abaa:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    abae:	281f      	cmp	r0, #31
    abb0:	d001      	beq.n	abb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x109e>
    abb2:	2001      	movs	r0, #1
    abb4:	bd70      	pop	{r4, r5, r6, pc}
    abb6:	68e0      	ldr	r0, [r4, #12]
    abb8:	f004 f94e 	bl	ee58 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    abbc:	b1d8      	cbz	r0, abf6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10de>
    abbe:	68e0      	ldr	r0, [r4, #12]
    abc0:	2201      	movs	r2, #1
    abc2:	7901      	ldrb	r1, [r0, #4]
    abc4:	7940      	ldrb	r0, [r0, #5]
    abc6:	f001 0107 	and.w	r1, r1, #7
    abca:	f361 0507 	bfi	r5, r1, #0, #8
    abce:	4629      	mov	r1, r5
    abd0:	f000 0007 	and.w	r0, r0, #7
    abd4:	f360 210f 	bfi	r1, r0, #8, #8
    abd8:	6860      	ldr	r0, [r4, #4]
    abda:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
    abde:	2200      	movs	r2, #0
    abe0:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
    abe4:	2223      	movs	r2, #35	; 0x23
    abe6:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    abea:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    abee:	f7ff fdb9 	bl	a764 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    abf2:	2000      	movs	r0, #0
    abf4:	bd70      	pop	{r4, r5, r6, pc}
    abf6:	2001      	movs	r0, #1
    abf8:	f7ff fe34 	bl	a864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    abfc:	4604      	mov	r4, r0
    abfe:	201e      	movs	r0, #30
    ac00:	f7ff fd6a 	bl	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    ac04:	4620      	mov	r0, r4
    ac06:	bd70      	pop	{r4, r5, r6, pc}
    ac08:	20000104 	.word	0x20000104
    ac0c:	b570      	push	{r4, r5, r6, lr}
    ac0e:	4d07      	ldr	r5, [pc, #28]	; (ac2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1114>)
    ac10:	2400      	movs	r4, #0
    ac12:	68e8      	ldr	r0, [r5, #12]
    ac14:	f004 f92a 	bl	ee6c <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    ac18:	2803      	cmp	r0, #3
    ac1a:	d105      	bne.n	ac28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1110>
    ac1c:	68e8      	ldr	r0, [r5, #12]
    ac1e:	f004 f927 	bl	ee70 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    ac22:	f000 f805 	bl	ac30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    ac26:	4604      	mov	r4, r0
    ac28:	4620      	mov	r0, r4
    ac2a:	bd70      	pop	{r4, r5, r6, pc}
    ac2c:	20000104 	.word	0x20000104
    ac30:	b570      	push	{r4, r5, r6, lr}
    ac32:	4d18      	ldr	r5, [pc, #96]	; (ac94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x117c>)
    ac34:	6869      	ldr	r1, [r5, #4]
    ac36:	f891 2085 	ldrb.w	r2, [r1, #133]	; 0x85
    ac3a:	2a16      	cmp	r2, #22
    ac3c:	d001      	beq.n	ac42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x112a>
    ac3e:	2a13      	cmp	r2, #19
    ac40:	d102      	bne.n	ac48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1130>
    ac42:	f891 20be 	ldrb.w	r2, [r1, #190]	; 0xbe
    ac46:	b10a      	cbz	r2, ac4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1134>
    ac48:	2002      	movs	r0, #2
    ac4a:	bd70      	pop	{r4, r5, r6, pc}
    ac4c:	f881 00f8 	strb.w	r0, [r1, #248]	; 0xf8
    ac50:	2400      	movs	r4, #0
    ac52:	f881 40bd 	strb.w	r4, [r1, #189]	; 0xbd
    ac56:	f881 40b8 	strb.w	r4, [r1, #184]	; 0xb8
    ac5a:	f891 21d2 	ldrb.w	r2, [r1, #466]	; 0x1d2
    ac5e:	b122      	cbz	r2, ac6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1152>
    ac60:	f240 21eb 	movw	r1, #747	; 0x2eb
    ac64:	2036      	movs	r0, #54	; 0x36
    ac66:	f7fa f857 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac6a:	880a      	ldrh	r2, [r1, #0]
    ac6c:	f8a1 21d6 	strh.w	r2, [r1, #470]	; 0x1d6
    ac70:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
    ac74:	f881 41d8 	strb.w	r4, [r1, #472]	; 0x1d8
    ac78:	200d      	movs	r0, #13
    ac7a:	f881 01d2 	strb.w	r0, [r1, #466]	; 0x1d2
    ac7e:	f881 415a 	strb.w	r4, [r1, #346]	; 0x15a
    ac82:	f000 fb9b 	bl	b3bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    ac86:	f000 fc7b 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ac8a:	6868      	ldr	r0, [r5, #4]
    ac8c:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    ac90:	2000      	movs	r0, #0
    ac92:	bd70      	pop	{r4, r5, r6, pc}
    ac94:	20000104 	.word	0x20000104
    ac98:	4802      	ldr	r0, [pc, #8]	; (aca4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x118c>)
    ac9a:	68c0      	ldr	r0, [r0, #12]
    ac9c:	7900      	ldrb	r0, [r0, #4]
    ac9e:	f7ff bfc7 	b.w	ac30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    aca2:	0000      	.short	0x0000
    aca4:	20000104 	.word	0x20000104
    aca8:	b510      	push	{r4, lr}
    acaa:	4c0e      	ldr	r4, [pc, #56]	; (ace4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11cc>)
    acac:	6860      	ldr	r0, [r4, #4]
    acae:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    acb2:	2916      	cmp	r1, #22
    acb4:	d001      	beq.n	acba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11a2>
    acb6:	2002      	movs	r0, #2
    acb8:	bd10      	pop	{r4, pc}
    acba:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    acbe:	f200 1175 	addw	r1, r0, #373	; 0x175
    acc2:	2200      	movs	r2, #0
    acc4:	f200 1065 	addw	r0, r0, #357	; 0x165
    acc8:	f003 fdf4 	bl	e8b4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    accc:	6860      	ldr	r0, [r4, #4]
    acce:	2100      	movs	r1, #0
    acd0:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    acd4:	2101      	movs	r1, #1
    acd6:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    acda:	2118      	movs	r1, #24
    acdc:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    ace0:	2000      	movs	r0, #0
    ace2:	bd10      	pop	{r4, pc}
    ace4:	20000104 	.word	0x20000104
    ace8:	b570      	push	{r4, r5, r6, lr}
    acea:	4d1b      	ldr	r5, [pc, #108]	; (ad58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1240>)
    acec:	6868      	ldr	r0, [r5, #4]
    acee:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    acf2:	291a      	cmp	r1, #26
    acf4:	d001      	beq.n	acfa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e2>
    acf6:	2002      	movs	r0, #2
    acf8:	bd70      	pop	{r4, r5, r6, pc}
    acfa:	2400      	movs	r4, #0
    acfc:	f880 40bd 	strb.w	r4, [r0, #189]	; 0xbd
    ad00:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    ad04:	f880 415a 	strb.w	r4, [r0, #346]	; 0x15a
    ad08:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
    ad0c:	b121      	cbz	r1, ad18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1200>
    ad0e:	f240 3113 	movw	r1, #787	; 0x313
    ad12:	2036      	movs	r0, #54	; 0x36
    ad14:	f7fa f800 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad18:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    ad1c:	b141      	cbz	r1, ad30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1218>
    ad1e:	f880 40be 	strb.w	r4, [r0, #190]	; 0xbe
    ad22:	8801      	ldrh	r1, [r0, #0]
    ad24:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    ad28:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    ad2c:	210e      	movs	r1, #14
    ad2e:	e008      	b.n	ad42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x122a>
    ad30:	8801      	ldrh	r1, [r0, #0]
    ad32:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    ad36:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    ad3a:	2101      	movs	r1, #1
    ad3c:	f880 11d8 	strb.w	r1, [r0, #472]	; 0x1d8
    ad40:	210d      	movs	r1, #13
    ad42:	f880 11d2 	strb.w	r1, [r0, #466]	; 0x1d2
    ad46:	f000 fb39 	bl	b3bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    ad4a:	f000 fc19 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ad4e:	6868      	ldr	r0, [r5, #4]
    ad50:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    ad54:	2000      	movs	r0, #0
    ad56:	bd70      	pop	{r4, r5, r6, pc}
    ad58:	20000104 	.word	0x20000104
    ad5c:	b510      	push	{r4, lr}
    ad5e:	4c0d      	ldr	r4, [pc, #52]	; (ad94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x127c>)
    ad60:	2300      	movs	r3, #0
    ad62:	2101      	movs	r1, #1
    ad64:	6860      	ldr	r0, [r4, #4]
    ad66:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    ad6a:	3078      	adds	r0, #120	; 0x78
    ad6c:	f003 fe20 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ad70:	b108      	cbz	r0, ad76 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125e>
    ad72:	2000      	movs	r0, #0
    ad74:	bd10      	pop	{r4, pc}
    ad76:	68e0      	ldr	r0, [r4, #12]
    ad78:	f004 f844 	bl	ee04 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    ad7c:	6861      	ldr	r1, [r4, #4]
    ad7e:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    ad82:	2007      	movs	r0, #7
    ad84:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    ad88:	2000      	movs	r0, #0
    ad8a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    ad8e:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    ad92:	e7ee      	b.n	ad72 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125a>
    ad94:	20000104 	.word	0x20000104
    ad98:	b570      	push	{r4, r5, r6, lr}
    ad9a:	4c25      	ldr	r4, [pc, #148]	; (ae30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1318>)
    ad9c:	2600      	movs	r6, #0
    ad9e:	2109      	movs	r1, #9
    ada0:	6860      	ldr	r0, [r4, #4]
    ada2:	4633      	mov	r3, r6
    ada4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ada8:	3078      	adds	r0, #120	; 0x78
    adaa:	f003 fe01 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    adae:	2500      	movs	r5, #0
    adb0:	b118      	cbz	r0, adba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12a2>
    adb2:	68e0      	ldr	r0, [r4, #12]
    adb4:	7900      	ldrb	r0, [r0, #4]
    adb6:	2812      	cmp	r0, #18
    adb8:	d011      	beq.n	adde <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12c6>
    adba:	6860      	ldr	r0, [r4, #4]
    adbc:	210a      	movs	r1, #10
    adbe:	2300      	movs	r3, #0
    adc0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    adc4:	3078      	adds	r0, #120	; 0x78
    adc6:	f003 fdf3 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    adca:	b118      	cbz	r0, add4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12bc>
    adcc:	68e0      	ldr	r0, [r4, #12]
    adce:	7900      	ldrb	r0, [r0, #4]
    add0:	2814      	cmp	r0, #20
    add2:	d008      	beq.n	ade6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ce>
    add4:	68e0      	ldr	r0, [r4, #12]
    add6:	7900      	ldrb	r0, [r0, #4]
    add8:	2816      	cmp	r0, #22
    adda:	d012      	beq.n	ae02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ea>
    addc:	e026      	b.n	ae2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    adde:	f7ff fe31 	bl	aa44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf2c>
    ade2:	4606      	mov	r6, r0
    ade4:	e022      	b.n	ae2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    ade6:	6860      	ldr	r0, [r4, #4]
    ade8:	2105      	movs	r1, #5
    adea:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    adee:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    adf2:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    adf6:	30c6      	adds	r0, #198	; 0xc6
    adf8:	f004 fc81 	bl	f6fe <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    adfc:	f7ff f8c0 	bl	9f80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    ae00:	e014      	b.n	ae2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    ae02:	6860      	ldr	r0, [r4, #4]
    ae04:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ae08:	291f      	cmp	r1, #31
    ae0a:	d10f      	bne.n	ae2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    ae0c:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    ae10:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    ae14:	2108      	movs	r1, #8
    ae16:	30c6      	adds	r0, #198	; 0xc6
    ae18:	f004 fc71 	bl	f6fe <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    ae1c:	6860      	ldr	r0, [r4, #4]
    ae1e:	210b      	movs	r1, #11
    ae20:	30c6      	adds	r0, #198	; 0xc6
    ae22:	f004 fc6c 	bl	f6fe <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    ae26:	201a      	movs	r0, #26
    ae28:	f7ff fc56 	bl	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    ae2c:	4630      	mov	r0, r6
    ae2e:	bd70      	pop	{r4, r5, r6, pc}
    ae30:	20000104 	.word	0x20000104
    ae34:	b570      	push	{r4, r5, r6, lr}
    ae36:	4c32      	ldr	r4, [pc, #200]	; (af00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e8>)
    ae38:	2300      	movs	r3, #0
    ae3a:	4619      	mov	r1, r3
    ae3c:	6860      	ldr	r0, [r4, #4]
    ae3e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    ae42:	3078      	adds	r0, #120	; 0x78
    ae44:	f003 fdb4 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae48:	b940      	cbnz	r0, ae5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1344>
    ae4a:	6860      	ldr	r0, [r4, #4]
    ae4c:	2300      	movs	r3, #0
    ae4e:	2108      	movs	r1, #8
    ae50:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ae54:	3078      	adds	r0, #120	; 0x78
    ae56:	f003 fdab 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae5a:	b1f8      	cbz	r0, ae9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1384>
    ae5c:	6860      	ldr	r0, [r4, #4]
    ae5e:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    ae62:	0780      	lsls	r0, r0, #30
    ae64:	d412      	bmi.n	ae8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1374>
    ae66:	68e0      	ldr	r0, [r4, #12]
    ae68:	f003 ffce 	bl	ee08 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    ae6c:	6861      	ldr	r1, [r4, #4]
    ae6e:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
    ae72:	68e0      	ldr	r0, [r4, #12]
    ae74:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    ae78:	f8a1 20c2 	strh.w	r2, [r1, #194]	; 0xc2
    ae7c:	8840      	ldrh	r0, [r0, #2]
    ae7e:	f8a1 00c4 	strh.w	r0, [r1, #196]	; 0xc4
    ae82:	f811 0fc0 	ldrb.w	r0, [r1, #192]!
    ae86:	f040 0002 	orr.w	r0, r0, #2
    ae8a:	7008      	strb	r0, [r1, #0]
    ae8c:	6860      	ldr	r0, [r4, #4]
    ae8e:	f04f 0500 	mov.w	r5, #0
    ae92:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    ae96:	07c9      	lsls	r1, r1, #31
    ae98:	d002      	beq.n	aea0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1388>
    ae9a:	e010      	b.n	aebe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13a6>
    ae9c:	2001      	movs	r0, #1
    ae9e:	bd70      	pop	{r4, r5, r6, pc}
    aea0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    aea4:	2300      	movs	r3, #0
    aea6:	4619      	mov	r1, r3
    aea8:	3078      	adds	r0, #120	; 0x78
    aeaa:	f003 fd81 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aeae:	b160      	cbz	r0, aeca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13b2>
    aeb0:	6860      	ldr	r0, [r4, #4]
    aeb2:	2101      	movs	r1, #1
    aeb4:	f800 1f86 	strb.w	r1, [r0, #134]!
    aeb8:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    aebc:	8685      	strh	r5, [r0, #52]	; 0x34
    aebe:	6860      	ldr	r0, [r4, #4]
    aec0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    aec4:	2901      	cmp	r1, #1
    aec6:	d005      	beq.n	aed4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13bc>
    aec8:	e00a      	b.n	aee0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13c8>
    aeca:	f240 314e 	movw	r1, #846	; 0x34e
    aece:	2036      	movs	r0, #54	; 0x36
    aed0:	f7f9 ff22 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aed4:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    aed8:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    aedc:	f000 fb50 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aee0:	6860      	ldr	r0, [r4, #4]
    aee2:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    aee6:	b149      	cbz	r1, aefc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    aee8:	f880 5158 	strb.w	r5, [r0, #344]	; 0x158
    aeec:	f000 fb48 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aef0:	6860      	ldr	r0, [r4, #4]
    aef2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    aef6:	b909      	cbnz	r1, aefc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    aef8:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    aefc:	2000      	movs	r0, #0
    aefe:	bd70      	pop	{r4, r5, r6, pc}
    af00:	20000104 	.word	0x20000104
    af04:	b510      	push	{r4, lr}
    af06:	4c0a      	ldr	r4, [pc, #40]	; (af30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1418>)
    af08:	2300      	movs	r3, #0
    af0a:	4619      	mov	r1, r3
    af0c:	6860      	ldr	r0, [r4, #4]
    af0e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af12:	3078      	adds	r0, #120	; 0x78
    af14:	f003 fd4c 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af18:	b120      	cbz	r0, af24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140c>
    af1a:	6861      	ldr	r1, [r4, #4]
    af1c:	200c      	movs	r0, #12
    af1e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    af22:	bd10      	pop	{r4, pc}
    af24:	f240 51fa 	movw	r1, #1530	; 0x5fa
    af28:	2036      	movs	r0, #54	; 0x36
    af2a:	f7f9 fef5 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af2e:	0000      	.short	0x0000
    af30:	20000104 	.word	0x20000104
    af34:	b510      	push	{r4, lr}
    af36:	4c0a      	ldr	r4, [pc, #40]	; (af60 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1448>)
    af38:	2300      	movs	r3, #0
    af3a:	4619      	mov	r1, r3
    af3c:	6860      	ldr	r0, [r4, #4]
    af3e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af42:	3078      	adds	r0, #120	; 0x78
    af44:	f003 fd34 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af48:	b120      	cbz	r0, af54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x143c>
    af4a:	6861      	ldr	r1, [r4, #4]
    af4c:	200d      	movs	r0, #13
    af4e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    af52:	bd10      	pop	{r4, pc}
    af54:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    af58:	2036      	movs	r0, #54	; 0x36
    af5a:	f7f9 fedd 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af5e:	0000      	.short	0x0000
    af60:	20000104 	.word	0x20000104
    af64:	b510      	push	{r4, lr}
    af66:	4c0d      	ldr	r4, [pc, #52]	; (af9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1484>)
    af68:	2300      	movs	r3, #0
    af6a:	4619      	mov	r1, r3
    af6c:	6860      	ldr	r0, [r4, #4]
    af6e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af72:	3078      	adds	r0, #120	; 0x78
    af74:	f003 fd1c 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af78:	b918      	cbnz	r0, af82 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x146a>
    af7a:	6860      	ldr	r0, [r4, #4]
    af7c:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    af80:	b138      	cbz	r0, af92 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x147a>
    af82:	6860      	ldr	r0, [r4, #4]
    af84:	2101      	movs	r1, #1
    af86:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    af8a:	2113      	movs	r1, #19
    af8c:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    af90:	bd10      	pop	{r4, pc}
    af92:	f240 6115 	movw	r1, #1557	; 0x615
    af96:	2036      	movs	r0, #54	; 0x36
    af98:	f7f9 febe 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af9c:	20000104 	.word	0x20000104
    afa0:	b510      	push	{r4, lr}
    afa2:	4c0a      	ldr	r4, [pc, #40]	; (afcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14b4>)
    afa4:	2300      	movs	r3, #0
    afa6:	4619      	mov	r1, r3
    afa8:	6860      	ldr	r0, [r4, #4]
    afaa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    afae:	3078      	adds	r0, #120	; 0x78
    afb0:	f003 fcfe 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    afb4:	b120      	cbz	r0, afc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a8>
    afb6:	6861      	ldr	r1, [r4, #4]
    afb8:	2004      	movs	r0, #4
    afba:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    afbe:	bd10      	pop	{r4, pc}
    afc0:	f240 51f4 	movw	r1, #1524	; 0x5f4
    afc4:	2036      	movs	r0, #54	; 0x36
    afc6:	f7f9 fea7 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afca:	0000      	.short	0x0000
    afcc:	20000104 	.word	0x20000104
    afd0:	b510      	push	{r4, lr}
    afd2:	4c0a      	ldr	r4, [pc, #40]	; (affc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14e4>)
    afd4:	2300      	movs	r3, #0
    afd6:	4619      	mov	r1, r3
    afd8:	6860      	ldr	r0, [r4, #4]
    afda:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    afde:	3078      	adds	r0, #120	; 0x78
    afe0:	f003 fce6 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    afe4:	b120      	cbz	r0, aff0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14d8>
    afe6:	6861      	ldr	r1, [r4, #4]
    afe8:	201c      	movs	r0, #28
    afea:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    afee:	bd10      	pop	{r4, pc}
    aff0:	f240 614c 	movw	r1, #1612	; 0x64c
    aff4:	2036      	movs	r0, #54	; 0x36
    aff6:	f7f9 fe8f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    affa:	0000      	.short	0x0000
    affc:	20000104 	.word	0x20000104
    b000:	b510      	push	{r4, lr}
    b002:	4c0a      	ldr	r4, [pc, #40]	; (b02c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1514>)
    b004:	2300      	movs	r3, #0
    b006:	4619      	mov	r1, r3
    b008:	6860      	ldr	r0, [r4, #4]
    b00a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b00e:	3078      	adds	r0, #120	; 0x78
    b010:	f003 fcce 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b014:	b120      	cbz	r0, b020 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1508>
    b016:	6861      	ldr	r1, [r4, #4]
    b018:	2000      	movs	r0, #0
    b01a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    b01e:	bd10      	pop	{r4, pc}
    b020:	f240 6153 	movw	r1, #1619	; 0x653
    b024:	2036      	movs	r0, #54	; 0x36
    b026:	f7f9 fe77 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b02a:	0000      	.short	0x0000
    b02c:	20000104 	.word	0x20000104
    b030:	b510      	push	{r4, lr}
    b032:	4c0a      	ldr	r4, [pc, #40]	; (b05c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1544>)
    b034:	2300      	movs	r3, #0
    b036:	4619      	mov	r1, r3
    b038:	6860      	ldr	r0, [r4, #4]
    b03a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b03e:	3078      	adds	r0, #120	; 0x78
    b040:	f003 fcb6 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b044:	b120      	cbz	r0, b050 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1538>
    b046:	6861      	ldr	r1, [r4, #4]
    b048:	2005      	movs	r0, #5
    b04a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b04e:	bd10      	pop	{r4, pc}
    b050:	f240 613f 	movw	r1, #1599	; 0x63f
    b054:	2036      	movs	r0, #54	; 0x36
    b056:	f7f9 fe5f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b05a:	0000      	.short	0x0000
    b05c:	20000104 	.word	0x20000104
    b060:	4902      	ldr	r1, [pc, #8]	; (b06c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1554>)
    b062:	2000      	movs	r0, #0
    b064:	6849      	ldr	r1, [r1, #4]
    b066:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    b06a:	4770      	bx	lr
    b06c:	20000104 	.word	0x20000104
    b070:	b510      	push	{r4, lr}
    b072:	4c0b      	ldr	r4, [pc, #44]	; (b0a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1588>)
    b074:	2300      	movs	r3, #0
    b076:	4619      	mov	r1, r3
    b078:	6860      	ldr	r0, [r4, #4]
    b07a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b07e:	3078      	adds	r0, #120	; 0x78
    b080:	f003 fc96 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b084:	b138      	cbz	r0, b096 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x157e>
    b086:	6860      	ldr	r0, [r4, #4]
    b088:	2101      	movs	r1, #1
    b08a:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    b08e:	210f      	movs	r1, #15
    b090:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b094:	bd10      	pop	{r4, pc}
    b096:	f240 6106 	movw	r1, #1542	; 0x606
    b09a:	2036      	movs	r0, #54	; 0x36
    b09c:	f7f9 fe3c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0a0:	20000104 	.word	0x20000104
    b0a4:	4809      	ldr	r0, [pc, #36]	; (b0cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15b4>)
    b0a6:	b510      	push	{r4, lr}
    b0a8:	6840      	ldr	r0, [r0, #4]
    b0aa:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b0ae:	2912      	cmp	r1, #18
    b0b0:	d004      	beq.n	b0bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15a4>
    b0b2:	f240 610e 	movw	r1, #1550	; 0x60e
    b0b6:	2036      	movs	r0, #54	; 0x36
    b0b8:	f7f9 fe2e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0bc:	2101      	movs	r1, #1
    b0be:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b0c2:	2111      	movs	r1, #17
    b0c4:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b0c8:	bd10      	pop	{r4, pc}
    b0ca:	0000      	.short	0x0000
    b0cc:	20000104 	.word	0x20000104
    b0d0:	b510      	push	{r4, lr}
    b0d2:	4c0a      	ldr	r4, [pc, #40]	; (b0fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15e4>)
    b0d4:	2300      	movs	r3, #0
    b0d6:	4619      	mov	r1, r3
    b0d8:	6860      	ldr	r0, [r4, #4]
    b0da:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b0de:	3078      	adds	r0, #120	; 0x78
    b0e0:	f003 fc66 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b0e4:	b120      	cbz	r0, b0f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15d8>
    b0e6:	6861      	ldr	r1, [r4, #4]
    b0e8:	201f      	movs	r0, #31
    b0ea:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b0ee:	bd10      	pop	{r4, pc}
    b0f0:	f240 615c 	movw	r1, #1628	; 0x65c
    b0f4:	2036      	movs	r0, #54	; 0x36
    b0f6:	f7f9 fe0f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0fa:	0000      	.short	0x0000
    b0fc:	20000104 	.word	0x20000104
    b100:	b570      	push	{r4, r5, r6, lr}
    b102:	4c1d      	ldr	r4, [pc, #116]	; (b178 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1660>)
    b104:	6860      	ldr	r0, [r4, #4]
    b106:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    b10a:	b911      	cbnz	r1, b112 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fa>
    b10c:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    b110:	b179      	cbz	r1, b132 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161a>
    b112:	2100      	movs	r1, #0
    b114:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    b118:	2224      	movs	r2, #36	; 0x24
    b11a:	2500      	movs	r5, #0
    b11c:	2b21      	cmp	r3, #33	; 0x21
    b11e:	d00a      	beq.n	b136 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161e>
    b120:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    b124:	2b23      	cmp	r3, #35	; 0x23
    b126:	d01a      	beq.n	b15e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1646>
    b128:	f44f 61d1 	mov.w	r1, #1672	; 0x688
    b12c:	2036      	movs	r0, #54	; 0x36
    b12e:	f7f9 fdf3 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b132:	2101      	movs	r1, #1
    b134:	e7ee      	b.n	b114 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fc>
    b136:	b161      	cbz	r1, b152 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163a>
    b138:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    b13c:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    b140:	2801      	cmp	r0, #1
    b142:	d102      	bne.n	b14a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1632>
    b144:	2000      	movs	r0, #0
    b146:	f7ff fac7 	bl	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    b14a:	6860      	ldr	r0, [r4, #4]
    b14c:	f880 513e 	strb.w	r5, [r0, #318]	; 0x13e
    b150:	e001      	b.n	b156 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163e>
    b152:	f880 2086 	strb.w	r2, [r0, #134]	; 0x86
    b156:	6860      	ldr	r0, [r4, #4]
    b158:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    b15c:	bd70      	pop	{r4, r5, r6, pc}
    b15e:	b129      	cbz	r1, b16c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1654>
    b160:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    b164:	2000      	movs	r0, #0
    b166:	f7ff fab7 	bl	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    b16a:	e001      	b.n	b170 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1658>
    b16c:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    b170:	6860      	ldr	r0, [r4, #4]
    b172:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    b176:	bd70      	pop	{r4, r5, r6, pc}
    b178:	20000104 	.word	0x20000104
    b17c:	4903      	ldr	r1, [pc, #12]	; (b18c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1674>)
    b17e:	2000      	movs	r0, #0
    b180:	6849      	ldr	r1, [r1, #4]
    b182:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    b186:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    b18a:	4770      	bx	lr
    b18c:	20000104 	.word	0x20000104
    b190:	4807      	ldr	r0, [pc, #28]	; (b1b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1698>)
    b192:	b510      	push	{r4, lr}
    b194:	6840      	ldr	r0, [r0, #4]
    b196:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b19a:	2918      	cmp	r1, #24
    b19c:	d004      	beq.n	b1a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1690>
    b19e:	f240 611e 	movw	r1, #1566	; 0x61e
    b1a2:	2036      	movs	r0, #54	; 0x36
    b1a4:	f7f9 fdb8 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1a8:	211a      	movs	r1, #26
    b1aa:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b1ae:	bd10      	pop	{r4, pc}
    b1b0:	20000104 	.word	0x20000104
    b1b4:	b510      	push	{r4, lr}
    b1b6:	4c0a      	ldr	r4, [pc, #40]	; (b1e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c8>)
    b1b8:	2300      	movs	r3, #0
    b1ba:	2101      	movs	r1, #1
    b1bc:	6860      	ldr	r0, [r4, #4]
    b1be:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    b1c2:	3078      	adds	r0, #120	; 0x78
    b1c4:	f003 fbf4 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b1c8:	2800      	cmp	r0, #0
    b1ca:	d108      	bne.n	b1de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c6>
    b1cc:	6860      	ldr	r0, [r4, #4]
    b1ce:	2108      	movs	r1, #8
    b1d0:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    b1d4:	2100      	movs	r1, #0
    b1d6:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    b1da:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    b1de:	bd10      	pop	{r4, pc}
    b1e0:	20000104 	.word	0x20000104
    b1e4:	b570      	push	{r4, r5, r6, lr}
    b1e6:	4c0e      	ldr	r4, [pc, #56]	; (b220 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1708>)
    b1e8:	2300      	movs	r3, #0
    b1ea:	4619      	mov	r1, r3
    b1ec:	6860      	ldr	r0, [r4, #4]
    b1ee:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b1f2:	3078      	adds	r0, #120	; 0x78
    b1f4:	f003 fbdc 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b1f8:	2500      	movs	r5, #0
    b1fa:	b110      	cbz	r0, b202 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16ea>
    b1fc:	6860      	ldr	r0, [r4, #4]
    b1fe:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    b202:	6860      	ldr	r0, [r4, #4]
    b204:	2300      	movs	r3, #0
    b206:	4619      	mov	r1, r3
    b208:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b20c:	3078      	adds	r0, #120	; 0x78
    b20e:	f003 fbcf 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b212:	2800      	cmp	r0, #0
    b214:	d002      	beq.n	b21c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1704>
    b216:	6860      	ldr	r0, [r4, #4]
    b218:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    b21c:	bd70      	pop	{r4, r5, r6, pc}
    b21e:	0000      	.short	0x0000
    b220:	20000104 	.word	0x20000104
    b224:	b570      	push	{r4, r5, r6, lr}
    b226:	4d16      	ldr	r5, [pc, #88]	; (b280 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1768>)
    b228:	f04f 0400 	mov.w	r4, #0
    b22c:	6868      	ldr	r0, [r5, #4]
    b22e:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    b232:	0789      	lsls	r1, r1, #30
    b234:	d411      	bmi.n	b25a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1742>
    b236:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b23a:	2300      	movs	r3, #0
    b23c:	4619      	mov	r1, r3
    b23e:	3078      	adds	r0, #120	; 0x78
    b240:	f003 fbb6 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b244:	b120      	cbz	r0, b250 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1738>
    b246:	6869      	ldr	r1, [r5, #4]
    b248:	2001      	movs	r0, #1
    b24a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b24e:	e008      	b.n	b262 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x174a>
    b250:	f240 612b 	movw	r1, #1579	; 0x62b
    b254:	2036      	movs	r0, #54	; 0x36
    b256:	f7f9 fd5f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b25a:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    b25e:	f880 4158 	strb.w	r4, [r0, #344]	; 0x158
    b262:	6868      	ldr	r0, [r5, #4]
    b264:	2300      	movs	r3, #0
    b266:	4619      	mov	r1, r3
    b268:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b26c:	3078      	adds	r0, #120	; 0x78
    b26e:	f003 fb9f 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b272:	2800      	cmp	r0, #0
    b274:	d002      	beq.n	b27c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1764>
    b276:	6868      	ldr	r0, [r5, #4]
    b278:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    b27c:	bd70      	pop	{r4, r5, r6, pc}
    b27e:	0000      	.short	0x0000
    b280:	20000104 	.word	0x20000104
    b284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b286:	4d4c      	ldr	r5, [pc, #304]	; (b3b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a0>)
    b288:	4607      	mov	r7, r0
    b28a:	460e      	mov	r6, r1
    b28c:	6868      	ldr	r0, [r5, #4]
    b28e:	f100 0478 	add.w	r4, r0, #120	; 0x78
    b292:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    b296:	f88d 0000 	strb.w	r0, [sp]
    b29a:	9800      	ldr	r0, [sp, #0]
    b29c:	9000      	str	r0, [sp, #0]
    b29e:	f89d 0000 	ldrb.w	r0, [sp]
    b2a2:	b930      	cbnz	r0, b2b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x179a>
    b2a4:	7c22      	ldrb	r2, [r4, #16]
    b2a6:	2300      	movs	r3, #0
    b2a8:	2101      	movs	r1, #1
    b2aa:	4620      	mov	r0, r4
    b2ac:	f003 fb80 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b2b0:	b110      	cbz	r0, b2b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17a0>
    b2b2:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    b2b4:	1c40      	adds	r0, r0, #1
    b2b6:	8760      	strh	r0, [r4, #58]	; 0x3a
    b2b8:	2001      	movs	r0, #1
    b2ba:	213d      	movs	r1, #61	; 0x3d
    b2bc:	bbf7      	cbnz	r7, b33c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1824>
    b2be:	782a      	ldrb	r2, [r5, #0]
    b2c0:	2a02      	cmp	r2, #2
    b2c2:	d006      	beq.n	b2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17ba>
    b2c4:	2a01      	cmp	r2, #1
    b2c6:	d006      	beq.n	b2d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17be>
    b2c8:	b1c6      	cbz	r6, b2fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e4>
    b2ca:	06f2      	lsls	r2, r6, #27
    b2cc:	d507      	bpl.n	b2de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17c6>
    b2ce:	211e      	movs	r1, #30
    b2d0:	e043      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2d2:	2116      	movs	r1, #22
    b2d4:	e041      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2d6:	6869      	ldr	r1, [r5, #4]
    b2d8:	f891 112c 	ldrb.w	r1, [r1, #300]	; 0x12c
    b2dc:	e03d      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2de:	0732      	lsls	r2, r6, #28
    b2e0:	d43b      	bmi.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2e2:	07b1      	lsls	r1, r6, #30
    b2e4:	d001      	beq.n	b2ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17d2>
    b2e6:	212a      	movs	r1, #42	; 0x2a
    b2e8:	e037      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2ea:	06b1      	lsls	r1, r6, #26
    b2ec:	d404      	bmi.n	b2f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e0>
    b2ee:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    b2f2:	2036      	movs	r0, #54	; 0x36
    b2f4:	f7f9 fd10 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2f8:	2123      	movs	r1, #35	; 0x23
    b2fa:	e02e      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2fc:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    b300:	b129      	cbz	r1, b30e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17f6>
    b302:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    b304:	1c4a      	adds	r2, r1, #1
    b306:	87a2      	strh	r2, [r4, #60]	; 0x3c
    b308:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    b30a:	4291      	cmp	r1, r2
    b30c:	d21d      	bcs.n	b34a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    b30e:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    b312:	b139      	cbz	r1, b324 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x180c>
    b314:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    b318:	1c4a      	adds	r2, r1, #1
    b31a:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    b31e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    b320:	4291      	cmp	r1, r2
    b322:	d212      	bcs.n	b34a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    b324:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    b326:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    b328:	428a      	cmp	r2, r1
    b32a:	d30b      	bcc.n	b344 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x182c>
    b32c:	686b      	ldr	r3, [r5, #4]
    b32e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    b332:	f88d 3000 	strb.w	r3, [sp]
    b336:	9b00      	ldr	r3, [sp, #0]
    b338:	9300      	str	r3, [sp, #0]
    b33a:	e000      	b.n	b33e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1826>
    b33c:	e00d      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b33e:	f89d 3000 	ldrb.w	r3, [sp]
    b342:	b913      	cbnz	r3, b34a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    b344:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    b346:	429a      	cmp	r2, r3
    b348:	d301      	bcc.n	b34e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1836>
    b34a:	2122      	movs	r1, #34	; 0x22
    b34c:	e005      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b34e:	7c62      	ldrb	r2, [r4, #17]
    b350:	b1f2      	cbz	r2, b390 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1878>
    b352:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    b354:	428a      	cmp	r2, r1
    b356:	d304      	bcc.n	b362 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    b358:	2108      	movs	r1, #8
    b35a:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    b35e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    b362:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    b366:	f88d 0000 	strb.w	r0, [sp]
    b36a:	9800      	ldr	r0, [sp, #0]
    b36c:	9000      	str	r0, [sp, #0]
    b36e:	f89d 0000 	ldrb.w	r0, [sp]
    b372:	b1d8      	cbz	r0, b3ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1894>
    b374:	2000      	movs	r0, #0
    b376:	7360      	strb	r0, [r4, #13]
    b378:	73a0      	strb	r0, [r4, #14]
    b37a:	7460      	strb	r0, [r4, #17]
    b37c:	2102      	movs	r1, #2
    b37e:	6868      	ldr	r0, [r5, #4]
    b380:	f7fd fb8e 	bl	8aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    b384:	6868      	ldr	r0, [r5, #4]
    b386:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    b38a:	2901      	cmp	r1, #1
    b38c:	d005      	beq.n	b39a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1882>
    b38e:	e009      	b.n	b3a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x188c>
    b390:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    b392:	2906      	cmp	r1, #6
    b394:	d3e5      	bcc.n	b362 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    b396:	213e      	movs	r1, #62	; 0x3e
    b398:	e7df      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b39a:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    b39e:	7801      	ldrb	r1, [r0, #0]
    b3a0:	1e49      	subs	r1, r1, #1
    b3a2:	7001      	strb	r1, [r0, #0]
    b3a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b3a8:	f000 b8ea 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b3ac:	6868      	ldr	r0, [r5, #4]
    b3ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b3b2:	2100      	movs	r1, #0
    b3b4:	f7fd bb74 	b.w	8aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    b3b8:	20000104 	.word	0x20000104
    b3bc:	4804      	ldr	r0, [pc, #16]	; (b3d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18b8>)
    b3be:	b510      	push	{r4, lr}
    b3c0:	6840      	ldr	r0, [r0, #4]
    b3c2:	8800      	ldrh	r0, [r0, #0]
    b3c4:	f7fa f8a6 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    b3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b3cc:	f003 b83a 	b.w	e444 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    b3d0:	20000104 	.word	0x20000104
    b3d4:	4a19      	ldr	r2, [pc, #100]	; (b43c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1924>)
    b3d6:	2901      	cmp	r1, #1
    b3d8:	6852      	ldr	r2, [r2, #4]
    b3da:	d010      	beq.n	b3fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e6>
    b3dc:	2100      	movs	r1, #0
    b3de:	b1c8      	cbz	r0, b414 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fc>
    b3e0:	2801      	cmp	r0, #1
    b3e2:	d022      	beq.n	b42a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1912>
    b3e4:	2803      	cmp	r0, #3
    b3e6:	d109      	bne.n	b3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b3e8:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    b3ec:	2813      	cmp	r0, #19
    b3ee:	d005      	beq.n	b3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b3f0:	2816      	cmp	r0, #22
    b3f2:	d003      	beq.n	b3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b3f4:	2818      	cmp	r0, #24
    b3f6:	d001      	beq.n	b3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b3f8:	f882 115a 	strb.w	r1, [r2, #346]	; 0x15a
    b3fc:	4770      	bx	lr
    b3fe:	f892 00fc 	ldrb.w	r0, [r2, #252]	; 0xfc
    b402:	2801      	cmp	r0, #1
    b404:	d0fa      	beq.n	b3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b406:	bf00      	nop
    b408:	f8d2 0128 	ldr.w	r0, [r2, #296]	; 0x128
    b40c:	7801      	ldrb	r1, [r0, #0]
    b40e:	1e49      	subs	r1, r1, #1
    b410:	7001      	strb	r1, [r0, #0]
    b412:	4770      	bx	lr
    b414:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    b418:	f8b2 3146 	ldrh.w	r3, [r2, #326]	; 0x146
    b41c:	1ac0      	subs	r0, r0, r3
    b41e:	b200      	sxth	r0, r0
    b420:	2800      	cmp	r0, #0
    b422:	dbf6      	blt.n	b412 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fa>
    b424:	f882 1144 	strb.w	r1, [r2, #324]	; 0x144
    b428:	4770      	bx	lr
    b42a:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    b42e:	f8b2 1130 	ldrh.w	r1, [r2, #304]	; 0x130
    b432:	1a40      	subs	r0, r0, r1
    b434:	b200      	sxth	r0, r0
    b436:	2800      	cmp	r0, #0
    b438:	dae6      	bge.n	b408 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18f0>
    b43a:	4770      	bx	lr
    b43c:	20000104 	.word	0x20000104

0000b440 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    b440:	b510      	push	{r4, lr}
    b442:	6941      	ldr	r1, [r0, #20]
    b444:	b119      	cbz	r1, b44e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    b446:	6842      	ldr	r2, [r0, #4]
    b448:	684b      	ldr	r3, [r1, #4]
    b44a:	429a      	cmp	r2, r3
    b44c:	d203      	bcs.n	b456 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    b44e:	21c1      	movs	r1, #193	; 0xc1
    b450:	2037      	movs	r0, #55	; 0x37
    b452:	f7f9 fc61 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b456:	6902      	ldr	r2, [r0, #16]
    b458:	610a      	str	r2, [r1, #16]
    b45a:	68c3      	ldr	r3, [r0, #12]
    b45c:	60cb      	str	r3, [r1, #12]
    b45e:	b10a      	cbz	r2, b464 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    b460:	60d1      	str	r1, [r2, #12]
    b462:	e001      	b.n	b468 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    b464:	4a06      	ldr	r2, [pc, #24]	; (b480 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    b466:	6011      	str	r1, [r2, #0]
    b468:	68ca      	ldr	r2, [r1, #12]
    b46a:	b132      	cbz	r2, b47a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    b46c:	6111      	str	r1, [r2, #16]
    b46e:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
    b472:	4410      	add	r0, r2
    b474:	684a      	ldr	r2, [r1, #4]
    b476:	1a80      	subs	r0, r0, r2
    b478:	e000      	b.n	b47c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    b47a:	2000      	movs	r0, #0
    b47c:	6088      	str	r0, [r1, #8]
    b47e:	bd10      	pop	{r4, pc}
    b480:	200001dc 	.word	0x200001dc

0000b484 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    b484:	b510      	push	{r4, lr}
    b486:	2200      	movs	r2, #0
    b488:	6101      	str	r1, [r0, #16]
    b48a:	b189      	cbz	r1, b4b0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    b48c:	68cb      	ldr	r3, [r1, #12]
    b48e:	60c8      	str	r0, [r1, #12]
    b490:	60c3      	str	r3, [r0, #12]
    b492:	b103      	cbz	r3, b496 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    b494:	6118      	str	r0, [r3, #16]
    b496:	6901      	ldr	r1, [r0, #16]
    b498:	6082      	str	r2, [r0, #8]
    b49a:	2900      	cmp	r1, #0
    b49c:	d00f      	beq.n	b4be <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    b49e:	688b      	ldr	r3, [r1, #8]
    b4a0:	b163      	cbz	r3, b4bc <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    b4a2:	6844      	ldr	r4, [r0, #4]
    b4a4:	42a3      	cmp	r3, r4
    b4a6:	d207      	bcs.n	b4b8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    b4a8:	212a      	movs	r1, #42	; 0x2a
    b4aa:	2037      	movs	r0, #55	; 0x37
    b4ac:	f7f9 fc34 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4b0:	4903      	ldr	r1, [pc, #12]	; (b4c0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    b4b2:	60c2      	str	r2, [r0, #12]
    b4b4:	6008      	str	r0, [r1, #0]
    b4b6:	e7ee      	b.n	b496 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    b4b8:	1b1b      	subs	r3, r3, r4
    b4ba:	6083      	str	r3, [r0, #8]
    b4bc:	608a      	str	r2, [r1, #8]
    b4be:	bd10      	pop	{r4, pc}
    b4c0:	200001dc 	.word	0x200001dc

0000b4c4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    b4c4:	6901      	ldr	r1, [r0, #16]
    b4c6:	b149      	cbz	r1, b4dc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    b4c8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    b4cc:	441a      	add	r2, r3
    b4ce:	688b      	ldr	r3, [r1, #8]
    b4d0:	441a      	add	r2, r3
    b4d2:	608a      	str	r2, [r1, #8]
    b4d4:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    b4d8:	60d1      	str	r1, [r2, #12]
    b4da:	e002      	b.n	b4e2 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    b4dc:	4a06      	ldr	r2, [pc, #24]	; (b4f8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    b4de:	68c1      	ldr	r1, [r0, #12]
    b4e0:	6011      	str	r1, [r2, #0]
    b4e2:	e9d0 1003 	ldrd	r1, r0, [r0, #12]
    b4e6:	b109      	cbz	r1, b4ec <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    b4e8:	6108      	str	r0, [r1, #16]
    b4ea:	4770      	bx	lr
    b4ec:	2800      	cmp	r0, #0
    b4ee:	d0fc      	beq.n	b4ea <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    b4f0:	2100      	movs	r1, #0
    b4f2:	6081      	str	r1, [r0, #8]
    b4f4:	4770      	bx	lr
    b4f6:	0000      	.short	0x0000
    b4f8:	200001dc 	.word	0x200001dc

0000b4fc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    b4fc:	b510      	push	{r4, lr}
    b4fe:	4604      	mov	r4, r0
    b500:	490a      	ldr	r1, [pc, #40]	; (b52c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    b502:	2000      	movs	r0, #0
    b504:	4602      	mov	r2, r0
    b506:	6809      	ldr	r1, [r1, #0]
    b508:	1e43      	subs	r3, r0, #1
    b50a:	e008      	b.n	b51e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    b50c:	688a      	ldr	r2, [r1, #8]
    b50e:	42a2      	cmp	r2, r4
    b510:	d303      	bcc.n	b51a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    b512:	429a      	cmp	r2, r3
    b514:	d201      	bcs.n	b51a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    b516:	4613      	mov	r3, r2
    b518:	4608      	mov	r0, r1
    b51a:	460a      	mov	r2, r1
    b51c:	68c9      	ldr	r1, [r1, #12]
    b51e:	2900      	cmp	r1, #0
    b520:	d1f4      	bne.n	b50c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    b522:	2800      	cmp	r0, #0
    b524:	d100      	bne.n	b528 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    b526:	4610      	mov	r0, r2
    b528:	bd10      	pop	{r4, pc}
    b52a:	0000      	.short	0x0000
    b52c:	200001dc 	.word	0x200001dc

0000b530 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    b530:	4801      	ldr	r0, [pc, #4]	; (b538 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    b532:	6800      	ldr	r0, [r0, #0]
    b534:	4770      	bx	lr
    b536:	0000      	.short	0x0000
    b538:	200001dc 	.word	0x200001dc

0000b53c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    b53c:	4804      	ldr	r0, [pc, #16]	; (b550 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    b53e:	6801      	ldr	r1, [r0, #0]
    b540:	2000      	movs	r0, #0
    b542:	e001      	b.n	b548 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    b544:	4608      	mov	r0, r1
    b546:	68c9      	ldr	r1, [r1, #12]
    b548:	2900      	cmp	r1, #0
    b54a:	d1fb      	bne.n	b544 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    b54c:	4770      	bx	lr
    b54e:	0000      	.short	0x0000
    b550:	200001dc 	.word	0x200001dc

0000b554 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    b554:	4801      	ldr	r0, [pc, #4]	; (b55c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    b556:	2100      	movs	r1, #0
    b558:	6001      	str	r1, [r0, #0]
    b55a:	4770      	bx	lr
    b55c:	200001dc 	.word	0x200001dc

0000b560 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    b560:	4903      	ldr	r1, [pc, #12]	; (b570 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    b562:	2000      	movs	r0, #0
    b564:	6809      	ldr	r1, [r1, #0]
    b566:	2900      	cmp	r1, #0
    b568:	d000      	beq.n	b56c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    b56a:	200c      	movs	r0, #12
    b56c:	4770      	bx	lr
    b56e:	0000      	.short	0x0000
    b570:	200001dc 	.word	0x200001dc

0000b574 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    b574:	4901      	ldr	r1, [pc, #4]	; (b57c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    b576:	7008      	strb	r0, [r1, #0]
    b578:	4770      	bx	lr
    b57a:	0000      	.short	0x0000
    b57c:	20000296 	.word	0x20000296

0000b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    b580:	4801      	ldr	r0, [pc, #4]	; (b588 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    b582:	7800      	ldrb	r0, [r0, #0]
    b584:	f7f9 b9bc 	b.w	4900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b588:	20000296 	.word	0x20000296

0000b58c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    b58c:	b500      	push	{lr}
    b58e:	7941      	ldrb	r1, [r0, #5]
    b590:	b095      	sub	sp, #84	; 0x54
    b592:	b141      	cbz	r1, b5a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    b594:	2901      	cmp	r1, #1
    b596:	d006      	beq.n	b5a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    b598:	2902      	cmp	r1, #2
    b59a:	d004      	beq.n	b5a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    b59c:	2903      	cmp	r1, #3
    b59e:	d002      	beq.n	b5a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    b5a0:	2012      	movs	r0, #18
    b5a2:	b015      	add	sp, #84	; 0x54
    b5a4:	bd00      	pop	{pc}
    b5a6:	7901      	ldrb	r1, [r0, #4]
    b5a8:	f88d 1000 	strb.w	r1, [sp]
    b5ac:	7b01      	ldrb	r1, [r0, #12]
    b5ae:	f88d 1001 	strb.w	r1, [sp, #1]
    b5b2:	7942      	ldrb	r2, [r0, #5]
    b5b4:	2100      	movs	r1, #0
    b5b6:	2301      	movs	r3, #1
    b5b8:	b3e2      	cbz	r2, b634 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xa8>
    b5ba:	2a02      	cmp	r2, #2
    b5bc:	d03b      	beq.n	b636 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    b5be:	f88d 3002 	strb.w	r3, [sp, #2]
    b5c2:	bf00      	nop
    b5c4:	f8d0 2006 	ldr.w	r2, [r0, #6]
    b5c8:	f8cd 2003 	str.w	r2, [sp, #3]
    b5cc:	8942      	ldrh	r2, [r0, #10]
    b5ce:	f8ad 2007 	strh.w	r2, [sp, #7]
    b5d2:	f88d 3009 	strb.w	r3, [sp, #9]
    b5d6:	f830 2b01 	ldrh.w	r2, [r0], #1
    b5da:	f240 2371 	movw	r3, #625	; 0x271
    b5de:	435a      	muls	r2, r3
    b5e0:	9203      	str	r2, [sp, #12]
    b5e2:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    b5e6:	435a      	muls	r2, r3
    b5e8:	9206      	str	r2, [sp, #24]
    b5ea:	8982      	ldrh	r2, [r0, #12]
    b5ec:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    b5f0:	89c2      	ldrh	r2, [r0, #14]
    b5f2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    b5f6:	8a02      	ldrh	r2, [r0, #16]
    b5f8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    b5fc:	8a42      	ldrh	r2, [r0, #18]
    b5fe:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    b602:	8a82      	ldrh	r2, [r0, #20]
    b604:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    b608:	8ac0      	ldrh	r0, [r0, #22]
    b60a:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    b60e:	2007      	movs	r0, #7
    b610:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    b614:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    b618:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    b61c:	9806      	ldr	r0, [sp, #24]
    b61e:	f000 fbd7 	bl	bdd0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>
    b622:	b158      	cbz	r0, b63c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    b624:	9803      	ldr	r0, [sp, #12]
    b626:	f000 fbc7 	bl	bdb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    b62a:	b138      	cbz	r0, b63c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    b62c:	4668      	mov	r0, sp
    b62e:	f000 f8cb 	bl	b7c8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    b632:	e7b6      	b.n	b5a2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    b634:	e7ff      	b.n	b636 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    b636:	f88d 1002 	strb.w	r1, [sp, #2]
    b63a:	e7c3      	b.n	b5c4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    b63c:	2030      	movs	r0, #48	; 0x30
    b63e:	e7b0      	b.n	b5a2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

0000b640 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    b640:	b538      	push	{r3, r4, r5, lr}
    b642:	4c14      	ldr	r4, [pc, #80]	; (b694 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x54>)
    b644:	7860      	ldrb	r0, [r4, #1]
    b646:	b970      	cbnz	r0, b666 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    b648:	f7fd f9e6 	bl	8a18 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
    b64c:	2805      	cmp	r0, #5
    b64e:	d005      	beq.n	b65c <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x1c>
    b650:	f7fb ff36 	bl	74c0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    b654:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    b658:	39ff      	subs	r1, #255	; 0xff
    b65a:	d004      	beq.n	b666 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    b65c:	4668      	mov	r0, sp
    b65e:	f7fd f93b 	bl	88d8 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q>
    b662:	b110      	cbz	r0, b66a <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x2a>
    b664:	e014      	b.n	b690 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x50>
    b666:	200c      	movs	r0, #12
    b668:	bd38      	pop	{r3, r4, r5, pc}
    b66a:	9800      	ldr	r0, [sp, #0]
    b66c:	8800      	ldrh	r0, [r0, #0]
    b66e:	f003 f85b 	bl	e728 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    b672:	9800      	ldr	r0, [sp, #0]
    b674:	2100      	movs	r1, #0
    b676:	8800      	ldrh	r0, [r0, #0]
    b678:	f7f9 fdcc 	bl	5214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    b67c:	b120      	cbz	r0, b688 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x48>
    b67e:	f640 7172 	movw	r1, #3954	; 0xf72
    b682:	2039      	movs	r0, #57	; 0x39
    b684:	f7f9 fb48 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b688:	2001      	movs	r0, #1
    b68a:	7060      	strb	r0, [r4, #1]
    b68c:	f7ff ff78 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b690:	2000      	movs	r0, #0
    b692:	bd38      	pop	{r3, r4, r5, pc}
    b694:	20000ff8 	.word	0x20000ff8

0000b698 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    b698:	4903      	ldr	r1, [pc, #12]	; (b6a8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    b69a:	888a      	ldrh	r2, [r1, #4]
    b69c:	8002      	strh	r2, [r0, #0]
    b69e:	7889      	ldrb	r1, [r1, #2]
    b6a0:	7081      	strb	r1, [r0, #2]
    b6a2:	2000      	movs	r0, #0
    b6a4:	4770      	bx	lr
    b6a6:	0000      	.short	0x0000
    b6a8:	20000ff8 	.word	0x20000ff8

0000b6ac <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    b6ac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b6ae:	460c      	mov	r4, r1
    b6b0:	4605      	mov	r5, r0
    b6b2:	8800      	ldrh	r0, [r0, #0]
    b6b4:	4669      	mov	r1, sp
    b6b6:	f003 f952 	bl	e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b6ba:	0001      	movs	r1, r0
    b6bc:	f04f 0000 	mov.w	r0, #0
    b6c0:	d005      	beq.n	b6ce <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    b6c2:	f8c4 0002 	str.w	r0, [r4, #2]
    b6c6:	71a0      	strb	r0, [r4, #6]
    b6c8:	8020      	strh	r0, [r4, #0]
    b6ca:	2002      	movs	r0, #2
    b6cc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b6ce:	9901      	ldr	r1, [sp, #4]
    b6d0:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    b6d4:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    b6d8:	f8d1 2016 	ldr.w	r2, [r1, #22]
    b6dc:	f8c4 2002 	str.w	r2, [r4, #2]
    b6e0:	7e8a      	ldrb	r2, [r1, #26]
    b6e2:	71a2      	strb	r2, [r4, #6]
    b6e4:	882a      	ldrh	r2, [r5, #0]
    b6e6:	8022      	strh	r2, [r4, #0]
    b6e8:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    b6ec:	f88d 2008 	strb.w	r2, [sp, #8]
    b6f0:	9a02      	ldr	r2, [sp, #8]
    b6f2:	9202      	str	r2, [sp, #8]
    b6f4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    b6f8:	2a00      	cmp	r2, #0
    b6fa:	d1eb      	bne.n	b6d4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    b6fc:	2000      	movs	r0, #0
    b6fe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000b700 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    b700:	b51c      	push	{r2, r3, r4, lr}
    b702:	8800      	ldrh	r0, [r0, #0]
    b704:	4669      	mov	r1, sp
    b706:	f003 f92a 	bl	e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b70a:	2800      	cmp	r0, #0
    b70c:	d106      	bne.n	b71c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1c>
    b70e:	f89d 0000 	ldrb.w	r0, [sp]
    b712:	b120      	cbz	r0, b71e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1e>
    b714:	480b      	ldr	r0, [pc, #44]	; (b744 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x44>)
    b716:	7800      	ldrb	r0, [r0, #0]
    b718:	b190      	cbz	r0, b740 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x40>
    b71a:	2002      	movs	r0, #2
    b71c:	bd1c      	pop	{r2, r3, r4, pc}
    b71e:	9801      	ldr	r0, [sp, #4]
    b720:	f004 fec3 	bl	104aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    b724:	2800      	cmp	r0, #0
    b726:	d0f8      	beq.n	b71a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1a>
    b728:	9801      	ldr	r0, [sp, #4]
    b72a:	f890 0159 	ldrb.w	r0, [r0, #345]	; 0x159
    b72e:	b108      	cbz	r0, b734 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x34>
    b730:	203a      	movs	r0, #58	; 0x3a
    b732:	bd1c      	pop	{r2, r3, r4, pc}
    b734:	9901      	ldr	r1, [sp, #4]
    b736:	2001      	movs	r0, #1
    b738:	f881 0159 	strb.w	r0, [r1, #345]	; 0x159
    b73c:	2000      	movs	r0, #0
    b73e:	bd1c      	pop	{r2, r3, r4, pc}
    b740:	2011      	movs	r0, #17
    b742:	bd1c      	pop	{r2, r3, r4, pc}
    b744:	200001e0 	.word	0x200001e0

0000b748 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    b748:	b510      	push	{r4, lr}
    b74a:	4604      	mov	r4, r0
    b74c:	f004 fea4 	bl	10498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    b750:	b130      	cbz	r0, b760 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    b752:	4804      	ldr	r0, [pc, #16]	; (b764 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    b754:	8881      	ldrh	r1, [r0, #4]
    b756:	8021      	strh	r1, [r4, #0]
    b758:	88c0      	ldrh	r0, [r0, #6]
    b75a:	8060      	strh	r0, [r4, #2]
    b75c:	2000      	movs	r0, #0
    b75e:	bd10      	pop	{r4, pc}
    b760:	2001      	movs	r0, #1
    b762:	bd10      	pop	{r4, pc}
    b764:	200001ee 	.word	0x200001ee

0000b768 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    b768:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b76a:	4605      	mov	r5, r0
    b76c:	f000 fc2a 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    b770:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b774:	b310      	cbz	r0, b7bc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    b776:	2400      	movs	r4, #0
    b778:	a802      	add	r0, sp, #8
    b77a:	f88d 4004 	strb.w	r4, [sp, #4]
    b77e:	f88d 4008 	strb.w	r4, [sp, #8]
    b782:	9000      	str	r0, [sp, #0]
    b784:	78aa      	ldrb	r2, [r5, #2]
    b786:	7869      	ldrb	r1, [r5, #1]
    b788:	7828      	ldrb	r0, [r5, #0]
    b78a:	ab01      	add	r3, sp, #4
    b78c:	f004 ff2a 	bl	105e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    b790:	2800      	cmp	r0, #0
    b792:	d112      	bne.n	b7ba <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    b794:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b798:	f004 fca1 	bl	100de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    b79c:	b180      	cbz	r0, b7c0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    b79e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b7a2:	f004 fc9c 	bl	100de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    b7a6:	b158      	cbz	r0, b7c0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    b7a8:	4806      	ldr	r0, [pc, #24]	; (b7c4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    b7aa:	f89d 1004 	ldrb.w	r1, [sp, #4]
    b7ae:	7481      	strb	r1, [r0, #18]
    b7b0:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b7b4:	74c1      	strb	r1, [r0, #19]
    b7b6:	8284      	strh	r4, [r0, #20]
    b7b8:	2000      	movs	r0, #0
    b7ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b7bc:	2001      	movs	r0, #1
    b7be:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b7c0:	2011      	movs	r0, #17
    b7c2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b7c4:	20000ff8 	.word	0x20000ff8

0000b7c8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7cc:	a1a2      	add	r1, pc, #648	; (adr r1, ba58 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x290>)
    b7ce:	4605      	mov	r5, r0
    b7d0:	e9d1 8700 	ldrd	r8, r7, [r1]
    b7d4:	7a40      	ldrb	r0, [r0, #9]
    b7d6:	b087      	sub	sp, #28
    b7d8:	0781      	lsls	r1, r0, #30
    b7da:	d502      	bpl.n	b7e2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1a>
    b7dc:	f040 0001 	orr.w	r0, r0, #1
    b7e0:	7268      	strb	r0, [r5, #9]
    b7e2:	4628      	mov	r0, r5
    b7e4:	f004 fcda 	bl	1019c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x156>
    b7e8:	2800      	cmp	r0, #0
    b7ea:	d10c      	bne.n	b806 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b7ec:	f004 fe71 	bl	104d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    b7f0:	b940      	cbnz	r0, b804 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    b7f2:	4e9b      	ldr	r6, [pc, #620]	; (ba60 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x298>)
    b7f4:	7870      	ldrb	r0, [r6, #1]
    b7f6:	b928      	cbnz	r0, b804 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    b7f8:	f7fb fe62 	bl	74c0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    b7fc:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    b800:	39ff      	subs	r1, #255	; 0xff
    b802:	d003      	beq.n	b80c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x44>
    b804:	200c      	movs	r0, #12
    b806:	b007      	add	sp, #28
    b808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b80c:	7828      	ldrb	r0, [r5, #0]
    b80e:	f04f 0b00 	mov.w	fp, #0
    b812:	f04f 0a01 	mov.w	sl, #1
    b816:	b9e8      	cbnz	r0, b854 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8c>
    b818:	78a8      	ldrb	r0, [r5, #2]
    b81a:	9000      	str	r0, [sp, #0]
    b81c:	f105 0903 	add.w	r9, r5, #3
    b820:	a902      	add	r1, sp, #8
    b822:	2000      	movs	r0, #0
    b824:	f002 ff26 	bl	e674 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    b828:	b178      	cbz	r0, b84a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x82>
    b82a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    b82e:	e10e      	b.n	ba4e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x286>
    b830:	9c04      	ldr	r4, [sp, #16]
    b832:	9800      	ldr	r0, [sp, #0]
    b834:	f004 f890 	bl	f958 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    b838:	78a1      	ldrb	r1, [r4, #2]
    b83a:	4288      	cmp	r0, r1
    b83c:	d105      	bne.n	b84a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x82>
    b83e:	2206      	movs	r2, #6
    b840:	4649      	mov	r1, r9
    b842:	1ce0      	adds	r0, r4, #3
    b844:	f001 fe5e 	bl	d504 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    b848:	b320      	cbz	r0, b894 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xcc>
    b84a:	a802      	add	r0, sp, #8
    b84c:	f7f9 fc94 	bl	5178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    b850:	2800      	cmp	r0, #0
    b852:	d0ed      	beq.n	b830 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x68>
    b854:	2103      	movs	r1, #3
    b856:	f105 0018 	add.w	r0, r5, #24
    b85a:	f000 fac5 	bl	bde8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x160>
    b85e:	2200      	movs	r2, #0
    b860:	4611      	mov	r1, r2
    b862:	a801      	add	r0, sp, #4
    b864:	f7f9 fcae 	bl	51c4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    b868:	0004      	movs	r4, r0
    b86a:	d015      	beq.n	b898 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd0>
    b86c:	2100      	movs	r1, #0
    b86e:	f7fb f953 	bl	6b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    b872:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b876:	8020      	strh	r0, [r4, #0]
    b878:	487a      	ldr	r0, [pc, #488]	; (ba64 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x29c>)
    b87a:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    b87e:	f004 fe0b 	bl	10498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    b882:	2800      	cmp	r0, #0
    b884:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    b888:	d008      	beq.n	b89c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd4>
    b88a:	88b1      	ldrh	r1, [r6, #4]
    b88c:	88f2      	ldrh	r2, [r6, #6]
    b88e:	84c1      	strh	r1, [r0, #38]	; 0x26
    b890:	8502      	strh	r2, [r0, #40]	; 0x28
    b892:	e006      	b.n	b8a2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xda>
    b894:	200b      	movs	r0, #11
    b896:	e7b6      	b.n	b806 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b898:	2009      	movs	r0, #9
    b89a:	e7b4      	b.n	b806 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b89c:	221b      	movs	r2, #27
    b89e:	84c2      	strh	r2, [r0, #38]	; 0x26
    b8a0:	8502      	strh	r2, [r0, #40]	; 0x28
    b8a2:	78f1      	ldrb	r1, [r6, #3]
    b8a4:	9100      	str	r1, [sp, #0]
    b8a6:	46b1      	mov	r9, r6
    b8a8:	78b3      	ldrb	r3, [r6, #2]
    b8aa:	88f2      	ldrh	r2, [r6, #6]
    b8ac:	88b1      	ldrh	r1, [r6, #4]
    b8ae:	8820      	ldrh	r0, [r4, #0]
    b8b0:	f7f9 fd6a 	bl	5388 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    b8b4:	b110      	cbz	r0, b8bc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf4>
    b8b6:	f640 618b 	movw	r1, #3723	; 0xe8b
    b8ba:	e0c8      	b.n	ba4e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x286>
    b8bc:	8820      	ldrh	r0, [r4, #0]
    b8be:	f7fb fd53 	bl	7368 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    b8c2:	6120      	str	r0, [r4, #16]
    b8c4:	a068      	add	r0, pc, #416	; (adr r0, ba68 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    b8c6:	f104 0618 	add.w	r6, r4, #24
    b8ca:	6800      	ldr	r0, [r0, #0]
    b8cc:	9000      	str	r0, [sp, #0]
    b8ce:	2103      	movs	r1, #3
    b8d0:	4668      	mov	r0, sp
    b8d2:	f7f9 fabd 	bl	4e50 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    b8d6:	2000      	movs	r0, #0
    b8d8:	4669      	mov	r1, sp
    b8da:	5c0a      	ldrb	r2, [r1, r0]
    b8dc:	5432      	strb	r2, [r6, r0]
    b8de:	1c40      	adds	r0, r0, #1
    b8e0:	b2c0      	uxtb	r0, r0
    b8e2:	2803      	cmp	r0, #3
    b8e4:	d3f9      	bcc.n	b8da <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x112>
    b8e6:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
    b8e8:	f003 f845 	bl	e976 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    b8ec:	60e0      	str	r0, [r4, #12]
    b8ee:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    b8f0:	82a0      	strh	r0, [r4, #20]
    b8f2:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
    b8f4:	82e0      	strh	r0, [r4, #22]
    b8f6:	7a68      	ldrb	r0, [r5, #9]
    b8f8:	f004 fbd0 	bl	1009c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    b8fc:	f8d9 1008 	ldr.w	r1, [r9, #8]
    b900:	464e      	mov	r6, r9
    b902:	4620      	mov	r0, r4
    b904:	62e1      	str	r1, [r4, #44]	; 0x2c
    b906:	f003 fe49 	bl	f59c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI>
    b90a:	f8c4 808e 	str.w	r8, [r4, #142]	; 0x8e
    b90e:	46d1      	mov	r9, sl
    b910:	4650      	mov	r0, sl
    b912:	f884 7092 	strb.w	r7, [r4, #146]	; 0x92
    b916:	f884 012e 	strb.w	r0, [r4, #302]	; 0x12e
    b91a:	4852      	ldr	r0, [pc, #328]	; (ba64 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x29c>)
    b91c:	3808      	subs	r0, #8
    b91e:	6843      	ldr	r3, [r0, #4]
    b920:	b123      	cbz	r3, b92c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x164>
    b922:	2201      	movs	r2, #1
    b924:	f504 7199 	add.w	r1, r4, #306	; 0x132
    b928:	4620      	mov	r0, r4
    b92a:	4798      	blx	r3
    b92c:	8821      	ldrh	r1, [r4, #0]
    b92e:	f8ad 1008 	strh.w	r1, [sp, #8]
    b932:	7cb1      	ldrb	r1, [r6, #18]
    b934:	f88d 100a 	strb.w	r1, [sp, #10]
    b938:	7cf1      	ldrb	r1, [r6, #19]
    b93a:	f88d 100b 	strb.w	r1, [sp, #11]
    b93e:	8ab1      	ldrh	r1, [r6, #20]
    b940:	f8ad 100c 	strh.w	r1, [sp, #12]
    b944:	a905      	add	r1, sp, #20
    b946:	9100      	str	r1, [sp, #0]
    b948:	2000      	movs	r0, #0
    b94a:	ab04      	add	r3, sp, #16
    b94c:	aa02      	add	r2, sp, #8
    b94e:	4621      	mov	r1, r4
    b950:	f004 fd63 	bl	1041a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d4>
    b954:	0006      	movs	r6, r0
    b956:	d10f      	bne.n	b978 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1b0>
    b958:	f89d 0010 	ldrb.w	r0, [sp, #16]
    b95c:	f88d 0018 	strb.w	r0, [sp, #24]
    b960:	f89d 0014 	ldrb.w	r0, [sp, #20]
    b964:	f88d 0019 	strb.w	r0, [sp, #25]
    b968:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b96c:	f8ad 001a 	strh.w	r0, [sp, #26]
    b970:	a906      	add	r1, sp, #24
    b972:	4620      	mov	r0, r4
    b974:	f003 f8bc 	bl	eaf0 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b978:	46d8      	mov	r8, fp
    b97a:	f88d b000 	strb.w	fp, [sp]
    b97e:	2101      	movs	r1, #1
    b980:	4668      	mov	r0, sp
    b982:	f7f9 fa65 	bl	4e50 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    b986:	f89d 0000 	ldrb.w	r0, [sp]
    b98a:	f000 0107 	and.w	r1, r0, #7
    b98e:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    b992:	4411      	add	r1, r2
    b994:	f3c0 1040 	ubfx	r0, r0, #5, #1
    b998:	4408      	add	r0, r1
    b99a:	f88d 0000 	strb.w	r0, [sp]
    b99e:	1d40      	adds	r0, r0, #5
    b9a0:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    b9a4:	2809      	cmp	r0, #9
    b9a6:	d202      	bcs.n	b9ae <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1e6>
    b9a8:	3008      	adds	r0, #8
    b9aa:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    b9ae:	2101      	movs	r1, #1
    b9b0:	4620      	mov	r0, r4
    b9b2:	f7fb f8b1 	bl	6b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    b9b6:	7868      	ldrb	r0, [r5, #1]
    b9b8:	f7fb fe56 	bl	7668 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    b9bc:	bbee      	cbnz	r6, ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    b9be:	78a9      	ldrb	r1, [r5, #2]
    b9c0:	7828      	ldrb	r0, [r5, #0]
    b9c2:	1cea      	adds	r2, r5, #3
    b9c4:	f7fb fdfa 	bl	75bc <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    b9c8:	b148      	cbz	r0, b9de <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x216>
    b9ca:	f7fb fd21 	bl	7410 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    b9ce:	78a9      	ldrb	r1, [r5, #2]
    b9d0:	7828      	ldrb	r0, [r5, #0]
    b9d2:	1cea      	adds	r2, r5, #3
    b9d4:	f7fb fe16 	bl	7604 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    b9d8:	0006      	movs	r6, r0
    b9da:	d002      	beq.n	b9e2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x21a>
    b9dc:	e02d      	b.n	ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    b9de:	2612      	movs	r6, #18
    b9e0:	e02b      	b.n	ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    b9e2:	78a8      	ldrb	r0, [r5, #2]
    b9e4:	f003 ffb8 	bl	f958 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    b9e8:	4602      	mov	r2, r0
    b9ea:	1ceb      	adds	r3, r5, #3
    b9ec:	4621      	mov	r1, r4
    b9ee:	2003      	movs	r0, #3
    b9f0:	f7fb fd50 	bl	7494 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    b9f4:	0006      	movs	r6, r0
    b9f6:	d120      	bne.n	ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    b9f8:	464f      	mov	r7, r9
    b9fa:	4648      	mov	r0, r9
    b9fc:	f7fb fda8 	bl	7550 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    ba00:	0006      	movs	r6, r0
    ba02:	d11a      	bne.n	ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    ba04:	f88d 8008 	strb.w	r8, [sp, #8]
    ba08:	7a68      	ldrb	r0, [r5, #9]
    ba0a:	07c0      	lsls	r0, r0, #31
    ba0c:	d005      	beq.n	ba1a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x252>
    ba0e:	68e8      	ldr	r0, [r5, #12]
    ba10:	9003      	str	r0, [sp, #12]
    ba12:	69a8      	ldr	r0, [r5, #24]
    ba14:	9004      	str	r0, [sp, #16]
    ba16:	f88d 7008 	strb.w	r7, [sp, #8]
    ba1a:	a802      	add	r0, sp, #8
    ba1c:	f7fd f802 	bl	8a24 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>
    ba20:	4606      	mov	r6, r0
    ba22:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
    ba26:	f7fb fe93 	bl	7750 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    ba2a:	b936      	cbnz	r6, ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    ba2c:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    ba30:	4620      	mov	r0, r4
    ba32:	f7fc ff0d 	bl	8850 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ>
    ba36:	0006      	movs	r6, r0
    ba38:	d00c      	beq.n	ba54 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    ba3a:	8820      	ldrh	r0, [r4, #0]
    ba3c:	f002 fe74 	bl	e728 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ba40:	8820      	ldrh	r0, [r4, #0]
    ba42:	2100      	movs	r1, #0
    ba44:	f7f9 fbe6 	bl	5214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ba48:	b120      	cbz	r0, ba54 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    ba4a:	f640 7152 	movw	r1, #3922	; 0xf52
    ba4e:	2039      	movs	r0, #57	; 0x39
    ba50:	f7f9 f962 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba54:	4630      	mov	r0, r6
    ba56:	e6d6      	b.n	b806 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    ba58:	ffffffff 	.word	0xffffffff
    ba5c:	0000001f 	.word	0x0000001f
    ba60:	20000ff8 	.word	0x20000ff8
    ba64:	200001e8 	.word	0x200001e8
    ba68:	00332211 	.word	0x00332211

0000ba6c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    ba6c:	7801      	ldrb	r1, [r0, #0]
    ba6e:	b179      	cbz	r1, ba90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ba70:	7841      	ldrb	r1, [r0, #1]
    ba72:	b169      	cbz	r1, ba90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ba74:	8841      	ldrh	r1, [r0, #2]
    ba76:	291b      	cmp	r1, #27
    ba78:	d30a      	bcc.n	ba90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ba7a:	8881      	ldrh	r1, [r0, #4]
    ba7c:	291b      	cmp	r1, #27
    ba7e:	d307      	bcc.n	ba90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ba80:	4904      	ldr	r1, [pc, #16]	; (ba94 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    ba82:	6802      	ldr	r2, [r0, #0]
    ba84:	f8c1 2002 	str.w	r2, [r1, #2]
    ba88:	8880      	ldrh	r0, [r0, #4]
    ba8a:	80c8      	strh	r0, [r1, #6]
    ba8c:	2000      	movs	r0, #0
    ba8e:	4770      	bx	lr
    ba90:	2012      	movs	r0, #18
    ba92:	4770      	bx	lr
    ba94:	20000ff8 	.word	0x20000ff8

0000ba98 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    ba98:	6800      	ldr	r0, [r0, #0]
    ba9a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ba9e:	4288      	cmp	r0, r1
    baa0:	d303      	bcc.n	baaa <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    baa2:	4903      	ldr	r1, [pc, #12]	; (bab0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    baa4:	6088      	str	r0, [r1, #8]
    baa6:	2000      	movs	r0, #0
    baa8:	4770      	bx	lr
    baaa:	2012      	movs	r0, #18
    baac:	4770      	bx	lr
    baae:	0000      	.short	0x0000
    bab0:	20000ff8 	.word	0x20000ff8

0000bab4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    bab4:	b510      	push	{r4, lr}
    bab6:	b086      	sub	sp, #24
    bab8:	4604      	mov	r4, r0
    baba:	f004 fbe6 	bl	1028a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x244>
    babe:	2800      	cmp	r0, #0
    bac0:	d103      	bne.n	baca <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    bac2:	f004 fd06 	bl	104d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    bac6:	b110      	cbz	r0, bace <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    bac8:	200c      	movs	r0, #12
    baca:	b006      	add	sp, #24
    bacc:	bd10      	pop	{r4, pc}
    bace:	2102      	movs	r1, #2
    bad0:	f104 0010 	add.w	r0, r4, #16
    bad4:	f000 f988 	bl	bde8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x160>
    bad8:	78a0      	ldrb	r0, [r4, #2]
    bada:	f88d 0008 	strb.w	r0, [sp, #8]
    bade:	78a0      	ldrb	r0, [r4, #2]
    bae0:	f88d 0000 	strb.w	r0, [sp]
    bae4:	7860      	ldrb	r0, [r4, #1]
    bae6:	f88d 0003 	strb.w	r0, [sp, #3]
    baea:	7820      	ldrb	r0, [r4, #0]
    baec:	f88d 0002 	strb.w	r0, [sp, #2]
    baf0:	7e20      	ldrb	r0, [r4, #24]
    baf2:	f88d 0004 	strb.w	r0, [sp, #4]
    baf6:	78a0      	ldrb	r0, [r4, #2]
    baf8:	07c0      	lsls	r0, r0, #31
    bafa:	d00b      	beq.n	bb14 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    bafc:	78e0      	ldrb	r0, [r4, #3]
    bafe:	2801      	cmp	r0, #1
    bb00:	d011      	beq.n	bb26 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    bb02:	b190      	cbz	r0, bb2a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    bb04:	f05f 0000 	movs.w	r0, #0
    bb08:	f88d 0001 	strb.w	r0, [sp, #1]
    bb0c:	68a0      	ldr	r0, [r4, #8]
    bb0e:	9003      	str	r0, [sp, #12]
    bb10:	6920      	ldr	r0, [r4, #16]
    bb12:	9004      	str	r0, [sp, #16]
    bb14:	a802      	add	r0, sp, #8
    bb16:	f7fc ff85 	bl	8a24 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>
    bb1a:	2800      	cmp	r0, #0
    bb1c:	d1d5      	bne.n	baca <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    bb1e:	4668      	mov	r0, sp
    bb20:	f7fb fe1e 	bl	7760 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    bb24:	e7d1      	b.n	baca <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    bb26:	2002      	movs	r0, #2
    bb28:	e7ee      	b.n	bb08 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    bb2a:	2001      	movs	r0, #1
    bb2c:	e7ec      	b.n	bb08 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

0000bb30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    bb30:	4a03      	ldr	r2, [pc, #12]	; (bb40 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    bb32:	e9d2 1200 	ldrd	r1, r2, [r2]
    bb36:	6001      	str	r1, [r0, #0]
    bb38:	6042      	str	r2, [r0, #4]
    bb3a:	2000      	movs	r0, #0
    bb3c:	4770      	bx	lr
    bb3e:	0000      	.short	0x0000
    bb40:	0000be74 	.word	0x0000be74

0000bb44 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    bb44:	b510      	push	{r4, lr}
    bb46:	2005      	movs	r0, #5
    bb48:	f000 fa32 	bl	bfb0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    bb4c:	f7fd fe14 	bl	9778 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    bb50:	4902      	ldr	r1, [pc, #8]	; (bb5c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    bb52:	4801      	ldr	r0, [pc, #4]	; (bb58 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    bb54:	6048      	str	r0, [r1, #4]
    bb56:	bd10      	pop	{r4, pc}
    bb58:	0000bcbd 	.word	0x0000bcbd
    bb5c:	200001e0 	.word	0x200001e0

0000bb60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    bb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb64:	b086      	sub	sp, #24
    bb66:	468a      	mov	sl, r1
    bb68:	4606      	mov	r6, r0
    bb6a:	8800      	ldrh	r0, [r0, #0]
    bb6c:	a901      	add	r1, sp, #4
    bb6e:	f002 fef6 	bl	e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    bb72:	2800      	cmp	r0, #0
    bb74:	d139      	bne.n	bbea <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    bb76:	9802      	ldr	r0, [sp, #8]
    bb78:	f04f 0801 	mov.w	r8, #1
    bb7c:	4601      	mov	r1, r0
    bb7e:	4689      	mov	r9, r1
    bb80:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    bb84:	f88d 1000 	strb.w	r1, [sp]
    bb88:	9900      	ldr	r1, [sp, #0]
    bb8a:	9100      	str	r1, [sp, #0]
    bb8c:	f89d 5000 	ldrb.w	r5, [sp]
    bb90:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bb94:	3078      	adds	r0, #120	; 0x78
    bb96:	2921      	cmp	r1, #33	; 0x21
    bb98:	d100      	bne.n	bb9c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    bb9a:	b13d      	cbz	r5, bbac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    bb9c:	2400      	movs	r4, #0
    bb9e:	304e      	adds	r0, #78	; 0x4e
    bba0:	2108      	movs	r1, #8
    bba2:	4607      	mov	r7, r0
    bba4:	f003 fece 	bl	f944 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    bba8:	b110      	cbz	r0, bbb0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    bbaa:	e007      	b.n	bbbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    bbac:	2401      	movs	r4, #1
    bbae:	e7f6      	b.n	bb9e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    bbb0:	210b      	movs	r1, #11
    bbb2:	4638      	mov	r0, r7
    bbb4:	f003 fec6 	bl	f944 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    bbb8:	b900      	cbnz	r0, bbbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    bbba:	b1ac      	cbz	r4, bbe8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    bbbc:	a804      	add	r0, sp, #16
    bbbe:	9000      	str	r0, [sp, #0]
    bbc0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    bbc4:	ab03      	add	r3, sp, #12
    bbc6:	4632      	mov	r2, r6
    bbc8:	4649      	mov	r1, r9
    bbca:	f004 fc26 	bl	1041a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d4>
    bbce:	0007      	movs	r7, r0
    bbd0:	d10b      	bne.n	bbea <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    bbd2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    bbd6:	9c02      	ldr	r4, [sp, #8]
    bbd8:	b150      	cbz	r0, bbf0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x90>
    bbda:	f504 74df 	add.w	r4, r4, #446	; 0x1be
    bbde:	bf00      	nop
    bbe0:	f884 8001 	strb.w	r8, [r4, #1]
    bbe4:	b94d      	cbnz	r5, bbfa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
    bbe6:	e006      	b.n	bbf6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x96>
    bbe8:	201a      	movs	r0, #26
    bbea:	b006      	add	sp, #24
    bbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bbf0:	f504 749f 	add.w	r4, r4, #318	; 0x13e
    bbf4:	e7f4      	b.n	bbe0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x80>
    bbf6:	7820      	ldrb	r0, [r4, #0]
    bbf8:	b108      	cbz	r0, bbfe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
    bbfa:	273a      	movs	r7, #58	; 0x3a
    bbfc:	e012      	b.n	bc24 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
    bbfe:	f884 a000 	strb.w	sl, [r4]
    bc02:	f89d 000c 	ldrb.w	r0, [sp, #12]
    bc06:	70a0      	strb	r0, [r4, #2]
    bc08:	f89d 1010 	ldrb.w	r1, [sp, #16]
    bc0c:	70e1      	strb	r1, [r4, #3]
    bc0e:	f88d 0000 	strb.w	r0, [sp]
    bc12:	f88d 1001 	strb.w	r1, [sp, #1]
    bc16:	88b0      	ldrh	r0, [r6, #4]
    bc18:	f8ad 0002 	strh.w	r0, [sp, #2]
    bc1c:	4669      	mov	r1, sp
    bc1e:	4648      	mov	r0, r9
    bc20:	f002 ff66 	bl	eaf0 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    bc24:	2000      	movs	r0, #0
    bc26:	7060      	strb	r0, [r4, #1]
    bc28:	4638      	mov	r0, r7
    bc2a:	e7de      	b.n	bbea <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>

0000bc2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    bc2c:	b510      	push	{r4, lr}
    bc2e:	f002 fd8f 	bl	e750 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    bc32:	f7fa fd17 	bl	6664 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    bc36:	f000 f9d5 	bl	bfe4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    bc3a:	4811      	ldr	r0, [pc, #68]	; (bc80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>)
    bc3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bc40:	4b10      	ldr	r3, [pc, #64]	; (bc84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    bc42:	81c1      	strh	r1, [r0, #14]
    bc44:	8201      	strh	r1, [r0, #16]
    bc46:	2100      	movs	r1, #0
    bc48:	75c1      	strb	r1, [r0, #23]
    bc4a:	8301      	strh	r1, [r0, #24]
    bc4c:	8001      	strh	r1, [r0, #0]
    bc4e:	221b      	movs	r2, #27
    bc50:	801a      	strh	r2, [r3, #0]
    bc52:	f44f 74a4 	mov.w	r4, #328	; 0x148
    bc56:	805c      	strh	r4, [r3, #2]
    bc58:	809a      	strh	r2, [r3, #4]
    bc5a:	80dc      	strh	r4, [r3, #6]
    bc5c:	7481      	strb	r1, [r0, #18]
    bc5e:	74c1      	strb	r1, [r0, #19]
    bc60:	2303      	movs	r3, #3
    bc62:	7083      	strb	r3, [r0, #2]
    bc64:	2302      	movs	r3, #2
    bc66:	70c3      	strb	r3, [r0, #3]
    bc68:	8082      	strh	r2, [r0, #4]
    bc6a:	80c2      	strh	r2, [r0, #6]
    bc6c:	f640 62a6 	movw	r2, #3750	; 0xea6
    bc70:	6082      	str	r2, [r0, #8]
    bc72:	4a04      	ldr	r2, [pc, #16]	; (bc84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    bc74:	1f92      	subs	r2, r2, #6
    bc76:	7011      	strb	r1, [r2, #0]
    bc78:	7581      	strb	r1, [r0, #22]
    bc7a:	7301      	strb	r1, [r0, #12]
    bc7c:	bd10      	pop	{r4, pc}
    bc7e:	0000      	.short	0x0000
    bc80:	20000ff8 	.word	0x20000ff8
    bc84:	200001ee 	.word	0x200001ee

0000bc88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    bc88:	b510      	push	{r4, lr}
    bc8a:	b158      	cbz	r0, bca4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    bc8c:	490a      	ldr	r1, [pc, #40]	; (bcb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    bc8e:	780a      	ldrb	r2, [r1, #0]
    bc90:	b16a      	cbz	r2, bcae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    bc92:	2200      	movs	r2, #0
    bc94:	7042      	strb	r2, [r0, #1]
    bc96:	2303      	movs	r3, #3
    bc98:	7003      	strb	r3, [r0, #0]
    bc9a:	2301      	movs	r3, #1
    bc9c:	7103      	strb	r3, [r0, #4]
    bc9e:	700a      	strb	r2, [r1, #0]
    bca0:	4618      	mov	r0, r3
    bca2:	bd10      	pop	{r4, pc}
    bca4:	f641 1146 	movw	r1, #6470	; 0x1946
    bca8:	2039      	movs	r0, #57	; 0x39
    bcaa:	f7f9 f835 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bcb2:	f7fb b881 	b.w	6db8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    bcb6:	0000      	.short	0x0000
    bcb8:	20000ff8 	.word	0x20000ff8
    bcbc:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bcc0:	4692      	mov	sl, r2
    bcc2:	460f      	mov	r7, r1
    bcc4:	4681      	mov	r9, r0
    bcc6:	f004 fbe7 	bl	10498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    bcca:	2800      	cmp	r0, #0
    bccc:	d063      	beq.n	bd96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    bcce:	4933      	ldr	r1, [pc, #204]	; (bd9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    bcd0:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    bcd4:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    bcd8:	8808      	ldrh	r0, [r1, #0]
    bcda:	4290      	cmp	r0, r2
    bcdc:	d300      	bcc.n	bce0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    bcde:	4610      	mov	r0, r2
    bce0:	4680      	mov	r8, r0
    bce2:	8888      	ldrh	r0, [r1, #4]
    bce4:	42b0      	cmp	r0, r6
    bce6:	d200      	bcs.n	bcea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    bce8:	4606      	mov	r6, r0
    bcea:	884c      	ldrh	r4, [r1, #2]
    bcec:	f640 0048 	movw	r0, #2120	; 0x848
    bcf0:	4284      	cmp	r4, r0
    bcf2:	d300      	bcc.n	bcf6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    bcf4:	4604      	mov	r4, r0
    bcf6:	88cd      	ldrh	r5, [r1, #6]
    bcf8:	4285      	cmp	r5, r0
    bcfa:	d300      	bcc.n	bcfe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    bcfc:	4605      	mov	r5, r0
    bcfe:	4284      	cmp	r4, r0
    bd00:	d300      	bcc.n	bd04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    bd02:	4604      	mov	r4, r0
    bd04:	f44f 71a4 	mov.w	r1, #328	; 0x148
    bd08:	2e1b      	cmp	r6, #27
    bd0a:	d001      	beq.n	bd10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    bd0c:	428d      	cmp	r5, r1
    bd0e:	d104      	bne.n	bd1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    bd10:	f1b8 0f1b 	cmp.w	r8, #27
    bd14:	d03f      	beq.n	bd96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    bd16:	428c      	cmp	r4, r1
    bd18:	d03d      	beq.n	bd96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    bd1a:	466a      	mov	r2, sp
    bd1c:	4651      	mov	r1, sl
    bd1e:	4648      	mov	r0, r9
    bd20:	f004 fb3e 	bl	103a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    bd24:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    bd28:	4641      	mov	r1, r8
    bd2a:	4540      	cmp	r0, r8
    bd2c:	d900      	bls.n	bd30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    bd2e:	4608      	mov	r0, r1
    bd30:	80f8      	strh	r0, [r7, #6]
    bd32:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    bd36:	42a1      	cmp	r1, r4
    bd38:	d800      	bhi.n	bd3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    bd3a:	460c      	mov	r4, r1
    bd3c:	813c      	strh	r4, [r7, #8]
    bd3e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    bd42:	42b1      	cmp	r1, r6
    bd44:	d800      	bhi.n	bd48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    bd46:	460e      	mov	r6, r1
    bd48:	807e      	strh	r6, [r7, #2]
    bd4a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    bd4e:	42a9      	cmp	r1, r5
    bd50:	d900      	bls.n	bd54 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    bd52:	4629      	mov	r1, r5
    bd54:	80b9      	strh	r1, [r7, #4]
    bd56:	2201      	movs	r2, #1
    bd58:	703a      	strb	r2, [r7, #0]
    bd5a:	381b      	subs	r0, #27
    bd5c:	28e0      	cmp	r0, #224	; 0xe0
    bd5e:	d902      	bls.n	bd66 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    bd60:	f640 4172 	movw	r1, #3186	; 0xc72
    bd64:	e014      	b.n	bd90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    bd66:	3e1b      	subs	r6, #27
    bd68:	2ee0      	cmp	r6, #224	; 0xe0
    bd6a:	d902      	bls.n	bd72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    bd6c:	f640 4174 	movw	r1, #3188	; 0xc74
    bd70:	e00e      	b.n	bd90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    bd72:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    bd76:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    bd7a:	4284      	cmp	r4, r0
    bd7c:	d902      	bls.n	bd84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    bd7e:	f640 4176 	movw	r1, #3190	; 0xc76
    bd82:	e005      	b.n	bd90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    bd84:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    bd88:	4281      	cmp	r1, r0
    bd8a:	d904      	bls.n	bd96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    bd8c:	f640 4178 	movw	r1, #3192	; 0xc78
    bd90:	2039      	movs	r0, #57	; 0x39
    bd92:	f7f8 ffc1 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd96:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd9a:	0000      	.short	0x0000
    bd9c:	200001ee 	.word	0x200001ee
    bda0:	4904      	ldr	r1, [pc, #16]	; (bdb4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12c>)
    bda2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    bda6:	4288      	cmp	r0, r1
    bda8:	d301      	bcc.n	bdae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    bdaa:	2000      	movs	r0, #0
    bdac:	4770      	bx	lr
    bdae:	2001      	movs	r0, #1
    bdb0:	4770      	bx	lr
    bdb2:	0000      	.short	0x0000
    bdb4:	0270f3cc 	.word	0x0270f3cc
    bdb8:	4904      	ldr	r1, [pc, #16]	; (bdcc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x144>)
    bdba:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    bdbe:	4288      	cmp	r0, r1
    bdc0:	d301      	bcc.n	bdc6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    bdc2:	2000      	movs	r0, #0
    bdc4:	4770      	bx	lr
    bdc6:	2001      	movs	r0, #1
    bdc8:	4770      	bx	lr
    bdca:	0000      	.short	0x0000
    bdcc:	009c363d 	.word	0x009c363d
    bdd0:	4904      	ldr	r1, [pc, #16]	; (bde4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>)
    bdd2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    bdd6:	4288      	cmp	r0, r1
    bdd8:	d301      	bcc.n	bdde <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    bdda:	2000      	movs	r0, #0
    bddc:	4770      	bx	lr
    bdde:	2001      	movs	r0, #1
    bde0:	4770      	bx	lr
    bde2:	0000      	.short	0x0000
    bde4:	009c363d 	.word	0x009c363d
    bde8:	b530      	push	{r4, r5, lr}
    bdea:	2200      	movs	r2, #0
    bdec:	4d07      	ldr	r5, [pc, #28]	; (be0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    bdee:	e009      	b.n	be04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    bdf0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    bdf4:	462b      	mov	r3, r5
    bdf6:	429c      	cmp	r4, r3
    bdf8:	d800      	bhi.n	bdfc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x174>
    bdfa:	4623      	mov	r3, r4
    bdfc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    be00:	1c52      	adds	r2, r2, #1
    be02:	b2d2      	uxtb	r2, r2
    be04:	428a      	cmp	r2, r1
    be06:	d3f3      	bcc.n	bdf0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x168>
    be08:	bd30      	pop	{r4, r5, pc}
    be0a:	0000      	.short	0x0000
    be0c:	00f42400 	.word	0x00f42400
    be10:	4a09      	ldr	r2, [pc, #36]	; (be38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>)
    be12:	4290      	cmp	r0, r2
    be14:	d80b      	bhi.n	be2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a6>
    be16:	2901      	cmp	r1, #1
    be18:	d002      	beq.n	be20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    be1a:	2904      	cmp	r1, #4
    be1c:	d003      	beq.n	be26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    be1e:	e008      	b.n	be32 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1aa>
    be20:	f240 7153 	movw	r1, #1875	; 0x753
    be24:	e001      	b.n	be2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a2>
    be26:	f640 11c4 	movw	r1, #2500	; 0x9c4
    be2a:	4288      	cmp	r0, r1
    be2c:	d201      	bcs.n	be32 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1aa>
    be2e:	2000      	movs	r0, #0
    be30:	4770      	bx	lr
    be32:	2001      	movs	r0, #1
    be34:	4770      	bx	lr
    be36:	0000      	.short	0x0000
    be38:	0270fd8f 	.word	0x0270fd8f
    be3c:	b510      	push	{r4, lr}
    be3e:	4604      	mov	r4, r0
    be40:	88c1      	ldrh	r1, [r0, #6]
    be42:	8880      	ldrh	r0, [r0, #4]
    be44:	f004 f960 	bl	10108 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    be48:	2800      	cmp	r0, #0
    be4a:	d10f      	bne.n	be6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e4>
    be4c:	8861      	ldrh	r1, [r4, #2]
    be4e:	8820      	ldrh	r0, [r4, #0]
    be50:	f004 f95a 	bl	10108 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    be54:	2800      	cmp	r0, #0
    be56:	d109      	bne.n	be6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e4>
    be58:	4805      	ldr	r0, [pc, #20]	; (be70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e8>)
    be5a:	88a1      	ldrh	r1, [r4, #4]
    be5c:	8081      	strh	r1, [r0, #4]
    be5e:	8821      	ldrh	r1, [r4, #0]
    be60:	8001      	strh	r1, [r0, #0]
    be62:	88e1      	ldrh	r1, [r4, #6]
    be64:	80c1      	strh	r1, [r0, #6]
    be66:	8861      	ldrh	r1, [r4, #2]
    be68:	8041      	strh	r1, [r0, #2]
    be6a:	2000      	movs	r0, #0
    be6c:	bd10      	pop	{r4, pc}
    be6e:	0000      	.short	0x0000
    be70:	200001ee 	.word	0x200001ee
    be74:	0b12b00b 	.word	0x0b12b00b
    be78:	12b00059 	.word	0x12b00059
    be7c:	05060708 	.word	0x05060708
    be80:	00020304 	.word	0x00020304
    be84:	f0f4f8fc 	.word	0xf0f4f8fc
    be88:	0304d8ec 	.word	0x0304d8ec
    be8c:	f4f8fc00 	.word	0xf4f8fc00
    be90:	00d8ecf0 	.word	0x00d8ecf0

0000be94 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    be94:	b510      	push	{r4, lr}
    be96:	460c      	mov	r4, r1
    be98:	f7ff fb6c 	bl	b574 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    be9c:	4804      	ldr	r0, [pc, #16]	; (beb0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    be9e:	6004      	str	r4, [r0, #0]
    bea0:	6840      	ldr	r0, [r0, #4]
    bea2:	f004 fbce 	bl	10642 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    bea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    beaa:	f004 b8c2 	b.w	10032 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    beae:	0000      	.short	0x0000
    beb0:	200001f8 	.word	0x200001f8

0000beb4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    beb4:	b510      	push	{r4, lr}
    beb6:	4c07      	ldr	r4, [pc, #28]	; (bed4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    beb8:	68a0      	ldr	r0, [r4, #8]
    beba:	f004 fbc2 	bl	10642 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    bebe:	68e0      	ldr	r0, [r4, #12]
    bec0:	f004 fbbf 	bl	10642 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    bec4:	f002 fc44 	bl	e750 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    bec8:	f7fa fbcc 	bl	6664 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    becc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bed0:	f7ff beac 	b.w	bc2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    bed4:	200001f8 	.word	0x200001f8

0000bed8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    bed8:	b500      	push	{lr}
    beda:	4905      	ldr	r1, [pc, #20]	; (bef0 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    bedc:	4805      	ldr	r0, [pc, #20]	; (bef4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    bede:	f004 fba3 	bl	10628 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bee2:	4804      	ldr	r0, [pc, #16]	; (bef4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    bee4:	4904      	ldr	r1, [pc, #16]	; (bef8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    bee6:	1d00      	adds	r0, r0, #4
    bee8:	f85d eb04 	ldr.w	lr, [sp], #4
    beec:	f004 bb9c 	b.w	10628 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bef0:	20000238 	.word	0x20000238
    bef4:	200001fc 	.word	0x200001fc
    bef8:	20000240 	.word	0x20000240

0000befc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    befc:	b500      	push	{lr}
    befe:	4908      	ldr	r1, [pc, #32]	; (bf20 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    bf00:	4808      	ldr	r0, [pc, #32]	; (bf24 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    bf02:	f004 fb91 	bl	10628 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bf06:	4807      	ldr	r0, [pc, #28]	; (bf24 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    bf08:	4907      	ldr	r1, [pc, #28]	; (bf28 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    bf0a:	1d00      	adds	r0, r0, #4
    bf0c:	f004 fb8c 	bl	10628 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bf10:	4804      	ldr	r0, [pc, #16]	; (bf24 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    bf12:	4906      	ldr	r1, [pc, #24]	; (bf2c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    bf14:	3008      	adds	r0, #8
    bf16:	f85d eb04 	ldr.w	lr, [sp], #4
    bf1a:	f004 bb85 	b.w	10628 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bf1e:	0000      	.short	0x0000
    bf20:	20000228 	.word	0x20000228
    bf24:	200001fc 	.word	0x200001fc
    bf28:	20000230 	.word	0x20000230
    bf2c:	20000220 	.word	0x20000220
    bf30:	b510      	push	{r4, lr}
    bf32:	f002 fbfb 	bl	e72c <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    bf36:	4809      	ldr	r0, [pc, #36]	; (bf5c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x60>)
    bf38:	f7f9 fda0 	bl	5a7c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    bf3c:	2000      	movs	r0, #0
    bf3e:	f7f9 f8b3 	bl	50a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    bf42:	4908      	ldr	r1, [pc, #32]	; (bf64 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x68>)
    bf44:	4806      	ldr	r0, [pc, #24]	; (bf60 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x64>)
    bf46:	6008      	str	r0, [r1, #0]
    bf48:	f7fd fd62 	bl	9a10 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    bf4c:	4907      	ldr	r1, [pc, #28]	; (bf6c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x70>)
    bf4e:	4806      	ldr	r0, [pc, #24]	; (bf68 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x6c>)
    bf50:	6008      	str	r0, [r1, #0]
    bf52:	4908      	ldr	r1, [pc, #32]	; (bf74 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x78>)
    bf54:	4806      	ldr	r0, [pc, #24]	; (bf70 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x74>)
    bf56:	6008      	str	r0, [r1, #0]
    bf58:	bd10      	pop	{r4, pc}
    bf5a:	0000      	.short	0x0000
    bf5c:	2000133d 	.word	0x2000133d
    bf60:	00005a29 	.word	0x00005a29
    bf64:	2000021c 	.word	0x2000021c
    bf68:	000097a9 	.word	0x000097a9
    bf6c:	20000210 	.word	0x20000210
    bf70:	00006e5d 	.word	0x00006e5d
    bf74:	2000020c 	.word	0x2000020c
    bf78:	b510      	push	{r4, lr}
    bf7a:	f7fb fb6d 	bl	7658 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    bf7e:	f7ff fae9 	bl	b554 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    bf82:	f7fc fc47 	bl	8814 <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ>
    bf86:	4805      	ldr	r0, [pc, #20]	; (bf9c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa0>)
    bf88:	f7fb fb02 	bl	7590 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    bf8c:	4905      	ldr	r1, [pc, #20]	; (bfa4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa8>)
    bf8e:	4804      	ldr	r0, [pc, #16]	; (bfa0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa4>)
    bf90:	6008      	str	r0, [r1, #0]
    bf92:	4906      	ldr	r1, [pc, #24]	; (bfac <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xb0>)
    bf94:	4804      	ldr	r0, [pc, #16]	; (bfa8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xac>)
    bf96:	6008      	str	r0, [r1, #0]
    bf98:	bd10      	pop	{r4, pc}
    bf9a:	0000      	.short	0x0000
    bf9c:	2000133d 	.word	0x2000133d
    bfa0:	000074e5 	.word	0x000074e5
    bfa4:	20000214 	.word	0x20000214
    bfa8:	00006f99 	.word	0x00006f99
    bfac:	20000218 	.word	0x20000218

0000bfb0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    bfb0:	2101      	movs	r1, #1
    bfb2:	4081      	lsls	r1, r0
    bfb4:	4802      	ldr	r0, [pc, #8]	; (bfc0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    bfb6:	6802      	ldr	r2, [r0, #0]
    bfb8:	4311      	orrs	r1, r2
    bfba:	6001      	str	r1, [r0, #0]
    bfbc:	4770      	bx	lr
    bfbe:	0000      	.short	0x0000
    bfc0:	20000248 	.word	0x20000248

0000bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    bfc4:	4801      	ldr	r0, [pc, #4]	; (bfcc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    bfc6:	6800      	ldr	r0, [r0, #0]
    bfc8:	4770      	bx	lr
    bfca:	0000      	.short	0x0000
    bfcc:	20000248 	.word	0x20000248

0000bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    bfd0:	4803      	ldr	r0, [pc, #12]	; (bfe0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    bfd2:	8800      	ldrh	r0, [r0, #0]
    bfd4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    bfd8:	0040      	lsls	r0, r0, #1
    bfda:	1c40      	adds	r0, r0, #1
    bfdc:	4770      	bx	lr
    bfde:	0000      	.short	0x0000
    bfe0:	20000248 	.word	0x20000248

0000bfe4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    bfe4:	b510      	push	{r4, lr}
    bfe6:	f7f8 faf5 	bl	45d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    bfea:	2200      	movs	r2, #0
    bfec:	4b08      	ldr	r3, [pc, #32]	; (c010 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    bfee:	4611      	mov	r1, r2
    bff0:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    bff4:	4284      	cmp	r4, r0
    bff6:	d303      	bcc.n	c000 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    bff8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    bffc:	7882      	ldrb	r2, [r0, #2]
    bffe:	e003      	b.n	c008 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    c000:	1c49      	adds	r1, r1, #1
    c002:	b2c9      	uxtb	r1, r1
    c004:	290c      	cmp	r1, #12
    c006:	d3f3      	bcc.n	bff0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    c008:	4802      	ldr	r0, [pc, #8]	; (c014 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    c00a:	7002      	strb	r2, [r0, #0]
    c00c:	bd10      	pop	{r4, pc}
    c00e:	0000      	.short	0x0000
    c010:	000106ae 	.word	0x000106ae
    c014:	20000297 	.word	0x20000297

0000c018 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    c018:	4801      	ldr	r0, [pc, #4]	; (c020 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    c01a:	7800      	ldrb	r0, [r0, #0]
    c01c:	4770      	bx	lr
    c01e:	0000      	.short	0x0000
    c020:	20000297 	.word	0x20000297

0000c024 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    c024:	b570      	push	{r4, r5, r6, lr}
    c026:	4605      	mov	r5, r0
    c028:	4616      	mov	r6, r2
    c02a:	460c      	mov	r4, r1
    c02c:	2002      	movs	r0, #2
    c02e:	f000 f9f9 	bl	c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c032:	4906      	ldr	r1, [pc, #24]	; (c04c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    c034:	2001      	movs	r0, #1
    c036:	1ef6      	subs	r6, r6, #3
    c038:	7008      	strb	r0, [r1, #0]
    c03a:	4805      	ldr	r0, [pc, #20]	; (c050 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    c03c:	6006      	str	r6, [r0, #0]
    c03e:	4804      	ldr	r0, [pc, #16]	; (c050 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    c040:	3808      	subs	r0, #8
    c042:	6005      	str	r5, [r0, #0]
    c044:	1f00      	subs	r0, r0, #4
    c046:	6004      	str	r4, [r0, #0]
    c048:	bd70      	pop	{r4, r5, r6, pc}
    c04a:	0000      	.short	0x0000
    c04c:	20000298 	.word	0x20000298
    c050:	4000f510 	.word	0x4000f510

0000c054 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    c054:	b510      	push	{r4, lr}
    c056:	4c0c      	ldr	r4, [pc, #48]	; (c088 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    c058:	7820      	ldrb	r0, [r4, #0]
    c05a:	b180      	cbz	r0, c07e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    c05c:	490b      	ldr	r1, [pc, #44]	; (c08c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    c05e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    c062:	6008      	str	r0, [r1, #0]
    c064:	f000 f86a 	bl	c13c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    c068:	2100      	movs	r1, #0
    c06a:	b120      	cbz	r0, c076 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    c06c:	2001      	movs	r0, #1
    c06e:	7060      	strb	r0, [r4, #1]
    c070:	4807      	ldr	r0, [pc, #28]	; (c090 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    c072:	6800      	ldr	r0, [r0, #0]
    c074:	e001      	b.n	c07a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    c076:	7061      	strb	r1, [r4, #1]
    c078:	2010      	movs	r0, #16
    c07a:	70a0      	strb	r0, [r4, #2]
    c07c:	7021      	strb	r1, [r4, #0]
    c07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c082:	2000      	movs	r0, #0
    c084:	f000 b9ce 	b.w	c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c088:	20000298 	.word	0x20000298
    c08c:	4001f508 	.word	0x4001f508
    c090:	4000f400 	.word	0x4000f400

0000c094 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    c094:	b510      	push	{r4, lr}
    c096:	2002      	movs	r0, #2
    c098:	f000 f9c4 	bl	c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c09c:	4904      	ldr	r1, [pc, #16]	; (c0b0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    c09e:	2001      	movs	r0, #1
    c0a0:	7008      	strb	r0, [r1, #0]
    c0a2:	f000 f859 	bl	c158 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    c0a6:	4903      	ldr	r1, [pc, #12]	; (c0b4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    c0a8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    c0ac:	6008      	str	r0, [r1, #0]
    c0ae:	bd10      	pop	{r4, pc}
    c0b0:	20000298 	.word	0x20000298
    c0b4:	4001f504 	.word	0x4001f504

0000c0b8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    c0b8:	4803      	ldr	r0, [pc, #12]	; (c0c8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    c0ba:	2100      	movs	r1, #0
    c0bc:	7001      	strb	r1, [r0, #0]
    c0be:	7041      	strb	r1, [r0, #1]
    c0c0:	2110      	movs	r1, #16
    c0c2:	7081      	strb	r1, [r0, #2]
    c0c4:	4770      	bx	lr
    c0c6:	0000      	.short	0x0000
    c0c8:	20000298 	.word	0x20000298

0000c0cc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    c0cc:	4807      	ldr	r0, [pc, #28]	; (c0ec <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    c0ce:	b510      	push	{r4, lr}
    c0d0:	7801      	ldrb	r1, [r0, #0]
    c0d2:	b141      	cbz	r1, c0e6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    c0d4:	f000 f832 	bl	c13c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    c0d8:	b118      	cbz	r0, c0e2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    c0da:	4805      	ldr	r0, [pc, #20]	; (c0f0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    c0dc:	6800      	ldr	r0, [r0, #0]
    c0de:	b2c0      	uxtb	r0, r0
    c0e0:	bd10      	pop	{r4, pc}
    c0e2:	2010      	movs	r0, #16
    c0e4:	bd10      	pop	{r4, pc}
    c0e6:	7880      	ldrb	r0, [r0, #2]
    c0e8:	bd10      	pop	{r4, pc}
    c0ea:	0000      	.short	0x0000
    c0ec:	20000298 	.word	0x20000298
    c0f0:	4000f400 	.word	0x4000f400

0000c0f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    c0f4:	4808      	ldr	r0, [pc, #32]	; (c118 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    c0f6:	b510      	push	{r4, lr}
    c0f8:	7801      	ldrb	r1, [r0, #0]
    c0fa:	b159      	cbz	r1, c114 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    c0fc:	4807      	ldr	r0, [pc, #28]	; (c11c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    c0fe:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c102:	b128      	cbz	r0, c110 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    c104:	f000 f80c 	bl	c120 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    c108:	2800      	cmp	r0, #0
    c10a:	d000      	beq.n	c10e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    c10c:	2001      	movs	r0, #1
    c10e:	bd10      	pop	{r4, pc}
    c110:	2002      	movs	r0, #2
    c112:	bd10      	pop	{r4, pc}
    c114:	7840      	ldrb	r0, [r0, #1]
    c116:	bd10      	pop	{r4, pc}
    c118:	20000298 	.word	0x20000298
    c11c:	4000f000 	.word	0x4000f000
    c120:	4805      	ldr	r0, [pc, #20]	; (c138 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    c122:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    c126:	b111      	cbz	r1, c12e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    c128:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    c12c:	b108      	cbz	r0, c132 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    c12e:	2000      	movs	r0, #0
    c130:	4770      	bx	lr
    c132:	2001      	movs	r0, #1
    c134:	4770      	bx	lr
    c136:	0000      	.short	0x0000
    c138:	4000f000 	.word	0x4000f000
    c13c:	4805      	ldr	r0, [pc, #20]	; (c154 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    c13e:	b510      	push	{r4, lr}
    c140:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c144:	b120      	cbz	r0, c150 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    c146:	f7ff ffeb 	bl	c120 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    c14a:	b108      	cbz	r0, c150 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    c14c:	2001      	movs	r0, #1
    c14e:	bd10      	pop	{r4, pc}
    c150:	2000      	movs	r0, #0
    c152:	bd10      	pop	{r4, pc}
    c154:	4000f000 	.word	0x4000f000
    c158:	4804      	ldr	r0, [pc, #16]	; (c16c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    c15a:	2100      	movs	r1, #0
    c15c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c160:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c164:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    c168:	4770      	bx	lr
    c16a:	0000      	.short	0x0000
    c16c:	4000f000 	.word	0x4000f000

0000c170 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    c170:	4a08      	ldr	r2, [pc, #32]	; (c194 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    c172:	b510      	push	{r4, lr}
    c174:	e9c2 0102 	strd	r0, r1, [r2, #8]
    c178:	4907      	ldr	r1, [pc, #28]	; (c198 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    c17a:	4610      	mov	r0, r2
    c17c:	f7f8 fc6c 	bl	4a58 <mpsl_fem_lna_configuration_set>
    c180:	2800      	cmp	r0, #0
    c182:	d005      	beq.n	c190 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    c184:	1c40      	adds	r0, r0, #1
    c186:	d003      	beq.n	c190 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    c188:	217d      	movs	r1, #125	; 0x7d
    c18a:	2040      	movs	r0, #64	; 0x40
    c18c:	f7f8 fdc4 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c190:	bd10      	pop	{r4, pc}
    c192:	0000      	.short	0x0000
    c194:	2000024c 	.word	0x2000024c
    c198:	0000c1c8 	.word	0x0000c1c8

0000c19c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    c19c:	4a08      	ldr	r2, [pc, #32]	; (c1c0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    c19e:	b510      	push	{r4, lr}
    c1a0:	e9c2 0102 	strd	r0, r1, [r2, #8]
    c1a4:	4907      	ldr	r1, [pc, #28]	; (c1c4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    c1a6:	4610      	mov	r0, r2
    c1a8:	f7f8 fc62 	bl	4a70 <mpsl_fem_pa_configuration_set>
    c1ac:	2800      	cmp	r0, #0
    c1ae:	d005      	beq.n	c1bc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    c1b0:	1c40      	adds	r0, r0, #1
    c1b2:	d003      	beq.n	c1bc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    c1b4:	2172      	movs	r1, #114	; 0x72
    c1b6:	2040      	movs	r0, #64	; 0x40
    c1b8:	f7f8 fdae 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1bc:	bd10      	pop	{r4, pc}
    c1be:	0000      	.short	0x0000
    c1c0:	2000024c 	.word	0x2000024c
    c1c4:	0000c1c8 	.word	0x0000c1c8
    c1c8:	00000001 	.word	0x00000001
    c1cc:	40001110 	.word	0x40001110
	...

0000c1e0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    c1e0:	4a07      	ldr	r2, [pc, #28]	; (c200 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    c1e2:	b510      	push	{r4, lr}
    c1e4:	7853      	ldrb	r3, [r2, #1]
    c1e6:	b133      	cbz	r3, c1f6 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    c1e8:	4b06      	ldr	r3, [pc, #24]	; (c204 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    c1ea:	6019      	str	r1, [r3, #0]
    c1ec:	1d19      	adds	r1, r3, #4
    c1ee:	6008      	str	r0, [r1, #0]
    c1f0:	2001      	movs	r0, #1
    c1f2:	7090      	strb	r0, [r2, #2]
    c1f4:	bd10      	pop	{r4, pc}
    c1f6:	21ba      	movs	r1, #186	; 0xba
    c1f8:	203c      	movs	r0, #60	; 0x3c
    c1fa:	f7f8 fd8d 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1fe:	0000      	.short	0x0000
    c200:	2000029b 	.word	0x2000029b
    c204:	4000f50c 	.word	0x4000f50c

0000c208 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    c208:	4809      	ldr	r0, [pc, #36]	; (c230 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    c20a:	b510      	push	{r4, lr}
    c20c:	7801      	ldrb	r1, [r0, #0]
    c20e:	b151      	cbz	r1, c226 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    c210:	7880      	ldrb	r0, [r0, #2]
    c212:	b140      	cbz	r0, c226 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    c214:	4907      	ldr	r1, [pc, #28]	; (c234 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    c216:	2000      	movs	r0, #0
    c218:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    c21c:	4906      	ldr	r1, [pc, #24]	; (c238 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    c21e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    c222:	6008      	str	r0, [r1, #0]
    c224:	bd10      	pop	{r4, pc}
    c226:	21e1      	movs	r1, #225	; 0xe1
    c228:	203c      	movs	r0, #60	; 0x3c
    c22a:	f7f8 fd75 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c22e:	0000      	.short	0x0000
    c230:	2000029b 	.word	0x2000029b
    c234:	4000f000 	.word	0x4000f000
    c238:	4001f504 	.word	0x4001f504

0000c23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    c23c:	b570      	push	{r4, r5, r6, lr}
    c23e:	4c0b      	ldr	r4, [pc, #44]	; (c26c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    c240:	2500      	movs	r5, #0
    c242:	7820      	ldrb	r0, [r4, #0]
    c244:	b158      	cbz	r0, c25e <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    c246:	f000 f8e5 	bl	c414 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    c24a:	4809      	ldr	r0, [pc, #36]	; (c270 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    c24c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    c250:	b118      	cbz	r0, c25a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    c252:	4808      	ldr	r0, [pc, #32]	; (c274 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    c254:	6800      	ldr	r0, [r0, #0]
    c256:	70e0      	strb	r0, [r4, #3]
    c258:	e000      	b.n	c25c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    c25a:	70e5      	strb	r5, [r4, #3]
    c25c:	7025      	strb	r5, [r4, #0]
    c25e:	2000      	movs	r0, #0
    c260:	f000 f8e0 	bl	c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c264:	7065      	strb	r5, [r4, #1]
    c266:	70a5      	strb	r5, [r4, #2]
    c268:	bd70      	pop	{r4, r5, r6, pc}
    c26a:	0000      	.short	0x0000
    c26c:	2000029b 	.word	0x2000029b
    c270:	4000f000 	.word	0x4000f000
    c274:	4000f400 	.word	0x4000f400

0000c278 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    c278:	480d      	ldr	r0, [pc, #52]	; (c2b0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    c27a:	b510      	push	{r4, lr}
    c27c:	7801      	ldrb	r1, [r0, #0]
    c27e:	b191      	cbz	r1, c2a6 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    c280:	7880      	ldrb	r0, [r0, #2]
    c282:	b180      	cbz	r0, c2a6 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    c284:	490b      	ldr	r1, [pc, #44]	; (c2b4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    c286:	2000      	movs	r0, #0
    c288:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    c28c:	4a0a      	ldr	r2, [pc, #40]	; (c2b8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    c28e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    c292:	6010      	str	r0, [r2, #0]
    c294:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    c298:	2a01      	cmp	r2, #1
    c29a:	d103      	bne.n	c2a4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    c29c:	604a      	str	r2, [r1, #4]
    c29e:	4906      	ldr	r1, [pc, #24]	; (c2b8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    c2a0:	1d09      	adds	r1, r1, #4
    c2a2:	6008      	str	r0, [r1, #0]
    c2a4:	bd10      	pop	{r4, pc}
    c2a6:	21d1      	movs	r1, #209	; 0xd1
    c2a8:	203c      	movs	r0, #60	; 0x3c
    c2aa:	f7f8 fd35 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2ae:	0000      	.short	0x0000
    c2b0:	2000029b 	.word	0x2000029b
    c2b4:	4000f000 	.word	0x4000f000
    c2b8:	4001f504 	.word	0x4001f504

0000c2bc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    c2bc:	4803      	ldr	r0, [pc, #12]	; (c2cc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    c2be:	2100      	movs	r1, #0
    c2c0:	7001      	strb	r1, [r0, #0]
    c2c2:	7041      	strb	r1, [r0, #1]
    c2c4:	7081      	strb	r1, [r0, #2]
    c2c6:	70c1      	strb	r1, [r0, #3]
    c2c8:	4770      	bx	lr
    c2ca:	0000      	.short	0x0000
    c2cc:	2000029b 	.word	0x2000029b

0000c2d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    c2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2d4:	4605      	mov	r5, r0
    c2d6:	461c      	mov	r4, r3
    c2d8:	4690      	mov	r8, r2
    c2da:	460f      	mov	r7, r1
    c2dc:	2001      	movs	r0, #1
    c2de:	f000 f8a1 	bl	c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c2e2:	4e12      	ldr	r6, [pc, #72]	; (c32c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    c2e4:	4812      	ldr	r0, [pc, #72]	; (c330 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    c2e6:	7134      	strb	r4, [r6, #4]
    c2e8:	6007      	str	r7, [r0, #0]
    c2ea:	4911      	ldr	r1, [pc, #68]	; (c330 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    c2ec:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    c2f0:	1f09      	subs	r1, r1, #4
    c2f2:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    c2f6:	6008      	str	r0, [r1, #0]
    c2f8:	f001 f8c4 	bl	d484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c2fc:	b938      	cbnz	r0, c30e <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    c2fe:	480c      	ldr	r0, [pc, #48]	; (c330 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    c300:	3010      	adds	r0, #16
    c302:	6801      	ldr	r1, [r0, #0]
    c304:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    c308:	ea41 0108 	orr.w	r1, r1, r8
    c30c:	6001      	str	r1, [r0, #0]
    c30e:	f000 f881 	bl	c414 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    c312:	b93d      	cbnz	r5, c324 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    c314:	4808      	ldr	r0, [pc, #32]	; (c338 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    c316:	4a07      	ldr	r2, [pc, #28]	; (c334 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    c318:	4906      	ldr	r1, [pc, #24]	; (c334 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    c31a:	3afc      	subs	r2, #252	; 0xfc
    c31c:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    c320:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    c324:	2001      	movs	r0, #1
    c326:	7070      	strb	r0, [r6, #1]
    c328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c32c:	2000029b 	.word	0x2000029b
    c330:	4000f508 	.word	0x4000f508
    c334:	4000f100 	.word	0x4000f100
    c338:	4001f088 	.word	0x4001f088

0000c33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    c33c:	4808      	ldr	r0, [pc, #32]	; (c360 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    c33e:	b510      	push	{r4, lr}
    c340:	7841      	ldrb	r1, [r0, #1]
    c342:	b149      	cbz	r1, c358 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    c344:	2101      	movs	r1, #1
    c346:	7001      	strb	r1, [r0, #0]
    c348:	4806      	ldr	r0, [pc, #24]	; (c364 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    c34a:	2200      	movs	r2, #0
    c34c:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    c350:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    c354:	6001      	str	r1, [r0, #0]
    c356:	bd10      	pop	{r4, pc}
    c358:	21c5      	movs	r1, #197	; 0xc5
    c35a:	203c      	movs	r0, #60	; 0x3c
    c35c:	f7f8 fcdc 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c360:	2000029b 	.word	0x2000029b
    c364:	4000f000 	.word	0x4000f000

0000c368 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    c368:	4806      	ldr	r0, [pc, #24]	; (c384 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    c36a:	7801      	ldrb	r1, [r0, #0]
    c36c:	b141      	cbz	r1, c380 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    c36e:	4806      	ldr	r0, [pc, #24]	; (c388 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    c370:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    c374:	2800      	cmp	r0, #0
    c376:	d002      	beq.n	c37e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    c378:	4804      	ldr	r0, [pc, #16]	; (c38c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    c37a:	6800      	ldr	r0, [r0, #0]
    c37c:	b2c0      	uxtb	r0, r0
    c37e:	4770      	bx	lr
    c380:	78c0      	ldrb	r0, [r0, #3]
    c382:	4770      	bx	lr
    c384:	2000029b 	.word	0x2000029b
    c388:	4000f000 	.word	0x4000f000
    c38c:	4000f400 	.word	0x4000f400

0000c390 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    c390:	4901      	ldr	r1, [pc, #4]	; (c398 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    c392:	2001      	movs	r0, #1
    c394:	6088      	str	r0, [r1, #8]
    c396:	4770      	bx	lr
    c398:	4000f000 	.word	0x4000f000

0000c39c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    c39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c3a0:	2800      	cmp	r0, #0
    c3a2:	d02e      	beq.n	c402 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    c3a4:	4818      	ldr	r0, [pc, #96]	; (c408 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    c3a6:	7800      	ldrb	r0, [r0, #0]
    c3a8:	b1b0      	cbz	r0, c3d8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    c3aa:	4d18      	ldr	r5, [pc, #96]	; (c40c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    c3ac:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    c3b0:	2800      	cmp	r0, #0
    c3b2:	d126      	bne.n	c402 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    c3b4:	2702      	movs	r7, #2
    c3b6:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    c3ba:	4c15      	ldr	r4, [pc, #84]	; (c410 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    c3bc:	6820      	ldr	r0, [r4, #0]
    c3be:	43c0      	mvns	r0, r0
    c3c0:	f340 1600 	sbfx	r6, r0, #4, #1
    c3c4:	6820      	ldr	r0, [r4, #0]
    c3c6:	f040 0010 	orr.w	r0, r0, #16
    c3ca:	6020      	str	r0, [r4, #0]
    c3cc:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    c3d0:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    c3d4:	1c76      	adds	r6, r6, #1
    c3d6:	e009      	b.n	c3ec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    c3d8:	f240 1153 	movw	r1, #339	; 0x153
    c3dc:	203c      	movs	r0, #60	; 0x3c
    c3de:	f7f8 fc9b 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c3e2:	bf00      	nop
    c3e4:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    c3e8:	f7f8 fae0 	bl	49ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c3ec:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    c3f0:	2800      	cmp	r0, #0
    c3f2:	d0f7      	beq.n	c3e4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    c3f4:	b91e      	cbnz	r6, c3fe <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    c3f6:	6820      	ldr	r0, [r4, #0]
    c3f8:	f020 0010 	bic.w	r0, r0, #16
    c3fc:	6020      	str	r0, [r4, #0]
    c3fe:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    c402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c406:	0000      	.short	0x0000
    c408:	2000029b 	.word	0x2000029b
    c40c:	4000f000 	.word	0x4000f000
    c410:	e000ed10 	.word	0xe000ed10
    c414:	4902      	ldr	r1, [pc, #8]	; (c420 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    c416:	4801      	ldr	r0, [pc, #4]	; (c41c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    c418:	6008      	str	r0, [r1, #0]
    c41a:	4770      	bx	lr
    c41c:	02020000 	.word	0x02020000
    c420:	4001f508 	.word	0x4001f508

0000c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    c424:	b510      	push	{r4, lr}
    c426:	4604      	mov	r4, r0
    c428:	f000 f822 	bl	c470 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    c42c:	2c00      	cmp	r4, #0
    c42e:	d017      	beq.n	c460 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    c430:	4a0c      	ldr	r2, [pc, #48]	; (c464 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    c432:	480c      	ldr	r0, [pc, #48]	; (c464 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    c434:	490c      	ldr	r1, [pc, #48]	; (c468 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    c436:	3214      	adds	r2, #20
    c438:	4b0c      	ldr	r3, [pc, #48]	; (c46c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    c43a:	2c01      	cmp	r4, #1
    c43c:	d005      	beq.n	c44a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    c43e:	2c02      	cmp	r4, #2
    c440:	d008      	beq.n	c454 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    c442:	2183      	movs	r1, #131	; 0x83
    c444:	203d      	movs	r0, #61	; 0x3d
    c446:	f7f8 fc67 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c44a:	2402      	movs	r4, #2
    c44c:	6004      	str	r4, [r0, #0]
    c44e:	6011      	str	r1, [r2, #0]
    c450:	0620      	lsls	r0, r4, #24
    c452:	e004      	b.n	c45e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    c454:	2403      	movs	r4, #3
    c456:	6004      	str	r4, [r0, #0]
    c458:	6011      	str	r1, [r2, #0]
    c45a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    c45e:	6018      	str	r0, [r3, #0]
    c460:	bd10      	pop	{r4, pc}
    c462:	0000      	.short	0x0000
    c464:	4000f500 	.word	0x4000f500
    c468:	2000143f 	.word	0x2000143f
    c46c:	4001f504 	.word	0x4001f504
    c470:	4804      	ldr	r0, [pc, #16]	; (c484 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    c472:	2100      	movs	r1, #0
    c474:	6001      	str	r1, [r0, #0]
    c476:	6001      	str	r1, [r0, #0]
    c478:	4903      	ldr	r1, [pc, #12]	; (c488 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    c47a:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    c47e:	6008      	str	r0, [r1, #0]
    c480:	4770      	bx	lr
    c482:	0000      	.short	0x0000
    c484:	4000f500 	.word	0x4000f500
    c488:	4001f508 	.word	0x4001f508

0000c48c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    c48c:	4805      	ldr	r0, [pc, #20]	; (c4a4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    c48e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c492:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    c496:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c49a:	4903      	ldr	r1, [pc, #12]	; (c4a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    c49c:	2000      	movs	r0, #0
    c49e:	6008      	str	r0, [r1, #0]
    c4a0:	4770      	bx	lr
    c4a2:	0000      	.short	0x0000
    c4a4:	40001000 	.word	0x40001000
    c4a8:	40001560 	.word	0x40001560

0000c4ac <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    c4ac:	4904      	ldr	r1, [pc, #16]	; (c4c0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    c4ae:	6008      	str	r0, [r1, #0]
    c4b0:	4804      	ldr	r0, [pc, #16]	; (c4c4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    c4b2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c4b6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    c4ba:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c4be:	4770      	bx	lr
    c4c0:	40001560 	.word	0x40001560
    c4c4:	40001000 	.word	0x40001000

0000c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    c4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4ca:	4c1e      	ldr	r4, [pc, #120]	; (c544 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    c4cc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    c4d0:	2710      	movs	r7, #16
    c4d2:	f3c0 1600 	ubfx	r6, r0, #4, #1
    c4d6:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    c4da:	2002      	movs	r0, #2
    c4dc:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    c4e0:	4819      	ldr	r0, [pc, #100]	; (c548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    c4e2:	2500      	movs	r5, #0
    c4e4:	491a      	ldr	r1, [pc, #104]	; (c550 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    c4e6:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    c4ea:	4818      	ldr	r0, [pc, #96]	; (c54c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    c4ec:	6008      	str	r0, [r1, #0]
    c4ee:	4819      	ldr	r0, [pc, #100]	; (c554 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    c4f0:	6800      	ldr	r0, [r0, #0]
    c4f2:	b1b0      	cbz	r0, c522 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    c4f4:	20ff      	movs	r0, #255	; 0xff
    c4f6:	f88d 0000 	strb.w	r0, [sp]
    c4fa:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    c4fe:	2001      	movs	r0, #1
    c500:	6120      	str	r0, [r4, #16]
    c502:	e004      	b.n	c50e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    c504:	f89d 0000 	ldrb.w	r0, [sp]
    c508:	1e40      	subs	r0, r0, #1
    c50a:	f88d 0000 	strb.w	r0, [sp]
    c50e:	f89d 0000 	ldrb.w	r0, [sp]
    c512:	b118      	cbz	r0, c51c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    c514:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    c518:	2800      	cmp	r0, #0
    c51a:	d0f3      	beq.n	c504 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    c51c:	f89d 0000 	ldrb.w	r0, [sp]
    c520:	b150      	cbz	r0, c538 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    c522:	f000 fc6f 	bl	ce04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    c526:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    c52a:	f000 fde7 	bl	d0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c52e:	2e00      	cmp	r6, #0
    c530:	d001      	beq.n	c536 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    c532:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    c536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c538:	f240 71a3 	movw	r1, #1955	; 0x7a3
    c53c:	203e      	movs	r0, #62	; 0x3e
    c53e:	f7f8 fbeb 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c542:	0000      	.short	0x0000
    c544:	40001000 	.word	0x40001000
    c548:	200010fc 	.word	0x200010fc
    c54c:	0c0e0000 	.word	0x0c0e0000
    c550:	4001f508 	.word	0x4001f508
    c554:	40001550 	.word	0x40001550

0000c558 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    c558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c55c:	4c1f      	ldr	r4, [pc, #124]	; (c5dc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    c55e:	4607      	mov	r7, r0
    c560:	4688      	mov	r8, r1
    c562:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    c566:	07c1      	lsls	r1, r0, #31
    c568:	d018      	beq.n	c59c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    c56a:	4a1d      	ldr	r2, [pc, #116]	; (c5e0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    c56c:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    c570:	6011      	str	r1, [r2, #0]
    c572:	4d1c      	ldr	r5, [pc, #112]	; (c5e4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    c574:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    c578:	f041 0101 	orr.w	r1, r1, #1
    c57c:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    c580:	f040 0002 	orr.w	r0, r0, #2
    c584:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    c588:	4640      	mov	r0, r8
    c58a:	f000 fe1b 	bl	d1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c58e:	f000 fbe7 	bl	cd60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c592:	2601      	movs	r6, #1
    c594:	b13f      	cbz	r7, c5a6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    c596:	2f01      	cmp	r7, #1
    c598:	d00e      	beq.n	c5b8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    c59a:	e016      	b.n	c5ca <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    c59c:	f240 612d 	movw	r1, #1581	; 0x62d
    c5a0:	203e      	movs	r0, #62	; 0x3e
    c5a2:	f7f8 fbb9 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5a6:	4640      	mov	r0, r8
    c5a8:	f000 fbfa 	bl	cda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    c5ac:	4640      	mov	r0, r8
    c5ae:	f000 fbbb 	bl	cd28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c5b2:	7266      	strb	r6, [r4, #9]
    c5b4:	602e      	str	r6, [r5, #0]
    c5b6:	e008      	b.n	c5ca <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    c5b8:	f000 fc1a 	bl	cdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    c5bc:	f000 fd68 	bl	d090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c5c0:	2002      	movs	r0, #2
    c5c2:	7260      	strb	r0, [r4, #9]
    c5c4:	f000 fc90 	bl	cee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    c5c8:	606e      	str	r6, [r5, #4]
    c5ca:	4807      	ldr	r0, [pc, #28]	; (c5e8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    c5cc:	64c6      	str	r6, [r0, #76]	; 0x4c
    c5ce:	4807      	ldr	r0, [pc, #28]	; (c5ec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    c5d0:	6801      	ldr	r1, [r0, #0]
    c5d2:	4638      	mov	r0, r7
    c5d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c5d8:	f004 b920 	b.w	1081c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    c5dc:	200010fc 	.word	0x200010fc
    c5e0:	4001f504 	.word	0x4001f504
    c5e4:	40001000 	.word	0x40001000
    c5e8:	40008000 	.word	0x40008000
    c5ec:	4000854c 	.word	0x4000854c

0000c5f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    c5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c5f4:	4d35      	ldr	r5, [pc, #212]	; (c6cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    c5f6:	4606      	mov	r6, r0
    c5f8:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c5fc:	4689      	mov	r9, r1
    c5fe:	6028      	str	r0, [r5, #0]
    c600:	4c33      	ldr	r4, [pc, #204]	; (c6d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    c602:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    c606:	f040 0002 	orr.w	r0, r0, #2
    c60a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    c60e:	4608      	mov	r0, r1
    c610:	f000 fdd8 	bl	d1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c614:	f000 fba4 	bl	cd60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c618:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c6d4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    c61c:	2700      	movs	r7, #0
    c61e:	b116      	cbz	r6, c626 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    c620:	2e01      	cmp	r6, #1
    c622:	d027      	beq.n	c674 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    c624:	e03f      	b.n	c6a6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    c626:	4648      	mov	r0, r9
    c628:	f000 fbba 	bl	cda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    c62c:	79e0      	ldrb	r0, [r4, #7]
    c62e:	2801      	cmp	r0, #1
    c630:	d105      	bne.n	c63e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    c632:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    c636:	f041 0108 	orr.w	r1, r1, #8
    c63a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    c63e:	4648      	mov	r0, r9
    c640:	f000 fb72 	bl	cd28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c644:	2001      	movs	r0, #1
    c646:	7260      	strb	r0, [r4, #9]
    c648:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c64a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    c64e:	62a0      	str	r0, [r4, #40]	; 0x28
    c650:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c654:	6028      	str	r0, [r5, #0]
    c656:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c65a:	f1b9 0f02 	cmp.w	r9, #2
    c65e:	d007      	beq.n	c670 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    c660:	f640 0034 	movw	r0, #2100	; 0x834
    c664:	f649 72ec 	movw	r2, #40940	; 0x9fec
    c668:	4410      	add	r0, r2
    c66a:	fbb0 f7f1 	udiv	r7, r0, r1
    c66e:	e01a      	b.n	c6a6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    c670:	4608      	mov	r0, r1
    c672:	e7f7      	b.n	c664 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    c674:	f000 fbbc 	bl	cdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    c678:	f000 fd0a 	bl	d090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c67c:	79e0      	ldrb	r0, [r4, #7]
    c67e:	2801      	cmp	r0, #1
    c680:	d105      	bne.n	c68e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    c682:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    c686:	f041 0104 	orr.w	r1, r1, #4
    c68a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    c68e:	2002      	movs	r0, #2
    c690:	7260      	strb	r0, [r4, #9]
    c692:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c694:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    c698:	62a0      	str	r0, [r4, #40]	; 0x28
    c69a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    c69e:	6028      	str	r0, [r5, #0]
    c6a0:	2729      	movs	r7, #41	; 0x29
    c6a2:	f000 fc21 	bl	cee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    c6a6:	f000 fc0b 	bl	cec0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    c6aa:	f000 fdc5 	bl	d238 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    c6ae:	6800      	ldr	r0, [r0, #0]
    c6b0:	2801      	cmp	r0, #1
    c6b2:	d006      	beq.n	c6c2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    c6b4:	2100      	movs	r1, #0
    c6b6:	4630      	mov	r0, r6
    c6b8:	f004 f8b0 	bl	1081c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    c6bc:	4638      	mov	r0, r7
    c6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c6c2:	f7ff ff01 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c6c6:	2000      	movs	r0, #0
    c6c8:	e7f9      	b.n	c6be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    c6ca:	0000      	.short	0x0000
    c6cc:	4001f504 	.word	0x4001f504
    c6d0:	200010fc 	.word	0x200010fc
    c6d4:	40001000 	.word	0x40001000

0000c6d8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    c6d8:	b510      	push	{r4, lr}
    c6da:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    c6dc:	4901      	ldr	r1, [pc, #4]	; (c6e4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    c6de:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    c6e2:	bd10      	pop	{r4, pc}
    c6e4:	200010ec 	.word	0x200010ec

0000c6e8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    c6e8:	b570      	push	{r4, r5, r6, lr}
    c6ea:	4c10      	ldr	r4, [pc, #64]	; (c72c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    c6ec:	4606      	mov	r6, r0
    c6ee:	2002      	movs	r0, #2
    c6f0:	7320      	strb	r0, [r4, #12]
    c6f2:	2596      	movs	r5, #150	; 0x96
    c6f4:	f000 f856 	bl	c7a4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    c6f8:	4602      	mov	r2, r0
    c6fa:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    c6fe:	f894 1020 	ldrb.w	r1, [r4, #32]
    c702:	2801      	cmp	r0, #1
    c704:	d00d      	beq.n	c722 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    c706:	4628      	mov	r0, r5
    c708:	f004 f8a0 	bl	1084c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    c70c:	4908      	ldr	r1, [pc, #32]	; (c730 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    c70e:	6120      	str	r0, [r4, #16]
    c710:	2000      	movs	r0, #0
    c712:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    c716:	6921      	ldr	r1, [r4, #16]
    c718:	69e0      	ldr	r0, [r4, #28]
    c71a:	4408      	add	r0, r1
    c71c:	4905      	ldr	r1, [pc, #20]	; (c734 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    c71e:	6008      	str	r0, [r1, #0]
    c720:	bd70      	pop	{r4, r5, r6, pc}
    c722:	4633      	mov	r3, r6
    c724:	4628      	mov	r0, r5
    c726:	f004 f8ad 	bl	10884 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    c72a:	e7ef      	b.n	c70c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    c72c:	200010fc 	.word	0x200010fc
    c730:	40008000 	.word	0x40008000
    c734:	40008544 	.word	0x40008544

0000c738 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    c738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c73c:	2238      	movs	r2, #56	; 0x38
    c73e:	2100      	movs	r1, #0
    c740:	4813      	ldr	r0, [pc, #76]	; (c790 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    c742:	f000 ff6b 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c746:	f000 fcd9 	bl	d0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c74a:	f000 fe70 	bl	d42e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c74e:	4d11      	ldr	r5, [pc, #68]	; (c794 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c750:	4e10      	ldr	r6, [pc, #64]	; (c794 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c752:	2400      	movs	r4, #0
    c754:	4f0f      	ldr	r7, [pc, #60]	; (c794 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c756:	3508      	adds	r5, #8
    c758:	3610      	adds	r6, #16
    c75a:	b928      	cbnz	r0, c768 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c75c:	f000 fe7e 	bl	d45c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c760:	b910      	cbnz	r0, c768 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c762:	f000 fe85 	bl	d470 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    c766:	b108      	cbz	r0, c76c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    c768:	2224      	movs	r2, #36	; 0x24
    c76a:	e006      	b.n	c77a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c76c:	f000 fec0 	bl	d4f0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c770:	b910      	cbnz	r0, c778 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    c772:	f000 feb3 	bl	d4dc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    c776:	b140      	cbz	r0, c78a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    c778:	2240      	movs	r2, #64	; 0x40
    c77a:	21ff      	movs	r1, #255	; 0xff
    c77c:	4638      	mov	r0, r7
    c77e:	f000 ff4d 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c782:	602c      	str	r4, [r5, #0]
    c784:	6034      	str	r4, [r6, #0]
    c786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c78a:	2238      	movs	r2, #56	; 0x38
    c78c:	e7f5      	b.n	c77a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c78e:	0000      	.short	0x0000
    c790:	200010fc 	.word	0x200010fc
    c794:	40000e00 	.word	0x40000e00

0000c798 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    c798:	4801      	ldr	r0, [pc, #4]	; (c7a0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    c79a:	69c0      	ldr	r0, [r0, #28]
    c79c:	4770      	bx	lr
    c79e:	0000      	.short	0x0000
    c7a0:	200010fc 	.word	0x200010fc

0000c7a4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    c7a4:	4814      	ldr	r0, [pc, #80]	; (c7f8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    c7a6:	b510      	push	{r4, lr}
    c7a8:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    c7ac:	7a40      	ldrb	r0, [r0, #9]
    c7ae:	b141      	cbz	r1, c7c2 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    c7b0:	2902      	cmp	r1, #2
    c7b2:	d00b      	beq.n	c7cc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    c7b4:	2802      	cmp	r0, #2
    c7b6:	d009      	beq.n	c7cc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    c7b8:	2901      	cmp	r1, #1
    c7ba:	d00b      	beq.n	c7d4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    c7bc:	2801      	cmp	r0, #1
    c7be:	d009      	beq.n	c7d4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    c7c0:	e015      	b.n	c7ee <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    c7c2:	2800      	cmp	r0, #0
    c7c4:	d1f6      	bne.n	c7b4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    c7c6:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    c7ca:	e00d      	b.n	c7e8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    c7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c7d0:	f000 bc10 	b.w	cff4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c7d4:	4809      	ldr	r0, [pc, #36]	; (c7fc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    c7d6:	6800      	ldr	r0, [r0, #0]
    c7d8:	f000 000f 	and.w	r0, r0, #15
    c7dc:	2803      	cmp	r0, #3
    c7de:	d006      	beq.n	c7ee <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    c7e0:	2804      	cmp	r0, #4
    c7e2:	d006      	beq.n	c7f2 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    c7e4:	f240 11e7 	movw	r1, #487	; 0x1e7
    c7e8:	203e      	movs	r0, #62	; 0x3e
    c7ea:	f7f8 fa95 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c7ee:	2001      	movs	r0, #1
    c7f0:	bd10      	pop	{r4, pc}
    c7f2:	2002      	movs	r0, #2
    c7f4:	bd10      	pop	{r4, pc}
    c7f6:	0000      	.short	0x0000
    c7f8:	200010fc 	.word	0x200010fc
    c7fc:	40001510 	.word	0x40001510

0000c800 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    c800:	b510      	push	{r4, lr}
    c802:	f000 fc61 	bl	d0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    c806:	f7ff fe5f 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c80a:	f003 ff9d 	bl	10748 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    c80e:	480f      	ldr	r0, [pc, #60]	; (c84c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    c810:	4a0f      	ldr	r2, [pc, #60]	; (c850 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    c812:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c814:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c818:	6011      	str	r1, [r2, #0]
    c81a:	2400      	movs	r4, #0
    c81c:	6284      	str	r4, [r0, #40]	; 0x28
    c81e:	7304      	strb	r4, [r0, #12]
    c820:	61c4      	str	r4, [r0, #28]
    c822:	6184      	str	r4, [r0, #24]
    c824:	f000 fc50 	bl	d0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    c828:	480a      	ldr	r0, [pc, #40]	; (c854 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    c82a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    c82e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    c832:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    c836:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    c83a:	2001      	movs	r0, #1
    c83c:	f003 ffbd 	bl	107ba <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c844:	2001      	movs	r0, #1
    c846:	f003 bfab 	b.w	107a0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c84a:	0000      	.short	0x0000
    c84c:	200010fc 	.word	0x200010fc
    c850:	4001f508 	.word	0x4001f508
    c854:	40008000 	.word	0x40008000

0000c858 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    c858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c85c:	2001      	movs	r0, #1
    c85e:	f003 ffac 	bl	107ba <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c862:	4838      	ldr	r0, [pc, #224]	; (c944 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c864:	2400      	movs	r4, #0
    c866:	6004      	str	r4, [r0, #0]
    c868:	2601      	movs	r6, #1
    c86a:	6006      	str	r6, [r0, #0]
    c86c:	f000 fe16 	bl	d49c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c870:	4d35      	ldr	r5, [pc, #212]	; (c948 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c872:	b118      	cbz	r0, c87c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x24>
    c874:	6828      	ldr	r0, [r5, #0]
    c876:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    c87a:	6028      	str	r0, [r5, #0]
    c87c:	f000 fe02 	bl	d484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c880:	b128      	cbz	r0, c88e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x36>
    c882:	6828      	ldr	r0, [r5, #0]
    c884:	4931      	ldr	r1, [pc, #196]	; (c94c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    c886:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    c88a:	4308      	orrs	r0, r1
    c88c:	6028      	str	r0, [r5, #0]
    c88e:	f000 fe15 	bl	d4bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c892:	b138      	cbz	r0, c8a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4c>
    c894:	482c      	ldr	r0, [pc, #176]	; (c948 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c896:	1d00      	adds	r0, r0, #4
    c898:	6801      	ldr	r1, [r0, #0]
    c89a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    c89e:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    c8a2:	6001      	str	r1, [r0, #0]
    c8a4:	4928      	ldr	r1, [pc, #160]	; (c948 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c8a6:	482a      	ldr	r0, [pc, #168]	; (c950 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    c8a8:	313c      	adds	r1, #60	; 0x3c
    c8aa:	6008      	str	r0, [r1, #0]
    c8ac:	f7f8 f8ec 	bl	4a88 <mpsl_fem_device_config_254_apply_get>
    c8b0:	b140      	cbz	r0, c8c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    c8b2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c8b6:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    c8ba:	1c41      	adds	r1, r0, #1
    c8bc:	d002      	beq.n	c8c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    c8be:	4922      	ldr	r1, [pc, #136]	; (c948 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c8c0:	3110      	adds	r1, #16
    c8c2:	6008      	str	r0, [r1, #0]
    c8c4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    c8c8:	6e00      	ldr	r0, [r0, #96]	; 0x60
    c8ca:	1c41      	adds	r1, r0, #1
    c8cc:	d004      	beq.n	c8d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x80>
    c8ce:	4921      	ldr	r1, [pc, #132]	; (c954 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c8d0:	680a      	ldr	r2, [r1, #0]
    c8d2:	f360 4217 	bfi	r2, r0, #16, #8
    c8d6:	600a      	str	r2, [r1, #0]
    c8d8:	491e      	ldr	r1, [pc, #120]	; (c954 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c8da:	f240 605b 	movw	r0, #1627	; 0x65b
    c8de:	3954      	subs	r1, #84	; 0x54
    c8e0:	6008      	str	r0, [r1, #0]
    c8e2:	1f09      	subs	r1, r1, #4
    c8e4:	f240 1003 	movw	r0, #259	; 0x103
    c8e8:	6008      	str	r0, [r1, #0]
    c8ea:	1f08      	subs	r0, r1, #4
    c8ec:	6006      	str	r6, [r0, #0]
    c8ee:	2001      	movs	r0, #1
    c8f0:	f000 fc68 	bl	d1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c8f4:	4917      	ldr	r1, [pc, #92]	; (c954 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c8f6:	f240 1001 	movw	r0, #257	; 0x101
    c8fa:	31c4      	adds	r1, #196	; 0xc4
    c8fc:	6008      	str	r0, [r1, #0]
    c8fe:	4e16      	ldr	r6, [pc, #88]	; (c958 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    c900:	2502      	movs	r5, #2
    c902:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    c906:	4916      	ldr	r1, [pc, #88]	; (c960 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    c908:	4814      	ldr	r0, [pc, #80]	; (c95c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    c90a:	6008      	str	r0, [r1, #0]
    c90c:	4815      	ldr	r0, [pc, #84]	; (c964 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    c90e:	4f16      	ldr	r7, [pc, #88]	; (c968 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    c910:	f506 7600 	add.w	r6, r6, #512	; 0x200
    c914:	8604      	strh	r4, [r0, #48]	; 0x30
    c916:	3010      	adds	r0, #16
    c918:	61c4      	str	r4, [r0, #28]
    c91a:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
    c91e:	703c      	strb	r4, [r7, #0]
    c920:	2001      	movs	r0, #1
    c922:	f003 ff3d 	bl	107a0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c926:	2010      	movs	r0, #16
    c928:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    c92c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    c930:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    c934:	6878      	ldr	r0, [r7, #4]
    c936:	2800      	cmp	r0, #0
    c938:	d002      	beq.n	c940 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>
    c93a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c93e:	4700      	bx	r0
    c940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c944:	40001ffc 	.word	0x40001ffc
    c948:	4000173c 	.word	0x4000173c
    c94c:	80000096 	.word	0x80000096
    c950:	8900002c 	.word	0x8900002c
    c954:	4000158c 	.word	0x4000158c
    c958:	40001000 	.word	0x40001000
    c95c:	0c0e0000 	.word	0x0c0e0000
    c960:	4001f508 	.word	0x4001f508
    c964:	200010ec 	.word	0x200010ec
    c968:	20000264 	.word	0x20000264

0000c96c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    c96c:	4901      	ldr	r1, [pc, #4]	; (c974 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    c96e:	7508      	strb	r0, [r1, #20]
    c970:	4770      	bx	lr
    c972:	0000      	.short	0x0000
    c974:	200010fc 	.word	0x200010fc

0000c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    c978:	4904      	ldr	r1, [pc, #16]	; (c98c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    c97a:	6008      	str	r0, [r1, #0]
    c97c:	4804      	ldr	r0, [pc, #16]	; (c990 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    c97e:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    c982:	f041 0101 	orr.w	r1, r1, #1
    c986:	7001      	strb	r1, [r0, #0]
    c988:	f000 ba62 	b.w	ce50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    c98c:	40001504 	.word	0x40001504
    c990:	200010fc 	.word	0x200010fc

0000c994 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    c994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c998:	4e35      	ldr	r6, [pc, #212]	; (ca70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    c99a:	4607      	mov	r7, r0
    c99c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c9a0:	468a      	mov	sl, r1
    c9a2:	4614      	mov	r4, r2
    c9a4:	6030      	str	r0, [r6, #0]
    c9a6:	4610      	mov	r0, r2
    c9a8:	f000 fc0c 	bl	d1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c9ac:	f000 f9d8 	bl	cd60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c9b0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; ca74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    c9b4:	4d30      	ldr	r5, [pc, #192]	; (ca78 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    c9b6:	f04f 0801 	mov.w	r8, #1
    c9ba:	b127      	cbz	r7, c9c6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    c9bc:	2f01      	cmp	r7, #1
    c9be:	d01d      	beq.n	c9fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    c9c0:	f240 7122 	movw	r1, #1826	; 0x722
    c9c4:	e04a      	b.n	ca5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    c9c6:	4620      	mov	r0, r4
    c9c8:	f000 f9ea 	bl	cda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    c9cc:	4620      	mov	r0, r4
    c9ce:	f000 f9ab 	bl	cd28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c9d2:	2c02      	cmp	r4, #2
    c9d4:	d00f      	beq.n	c9f6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    c9d6:	f640 0034 	movw	r0, #2100	; 0x834
    c9da:	bf00      	nop
    c9dc:	f649 51f8 	movw	r1, #40440	; 0x9df8
    c9e0:	4401      	add	r1, r0
    c9e2:	4650      	mov	r0, sl
    c9e4:	f000 fb92 	bl	d10c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    c9e8:	4604      	mov	r4, r0
    c9ea:	4648      	mov	r0, r9
    c9ec:	f000 fb7a 	bl	d0e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    c9f0:	f885 8009 	strb.w	r8, [r5, #9]
    c9f4:	e014      	b.n	ca20 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    c9f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c9fa:	e7ef      	b.n	c9dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    c9fc:	f000 f9f8 	bl	cdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    ca00:	f000 fb46 	bl	d090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    ca04:	f000 fa70 	bl	cee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    ca08:	f649 71ba 	movw	r1, #40890	; 0x9fba
    ca0c:	4650      	mov	r0, sl
    ca0e:	f000 fb7d 	bl	d10c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    ca12:	4604      	mov	r4, r0
    ca14:	4817      	ldr	r0, [pc, #92]	; (ca74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    ca16:	1d00      	adds	r0, r0, #4
    ca18:	f000 fb64 	bl	d0e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    ca1c:	2002      	movs	r0, #2
    ca1e:	7268      	strb	r0, [r5, #9]
    ca20:	4816      	ldr	r0, [pc, #88]	; (ca7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ca22:	6004      	str	r4, [r0, #0]
    ca24:	4917      	ldr	r1, [pc, #92]	; (ca84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    ca26:	4816      	ldr	r0, [pc, #88]	; (ca80 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    ca28:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    ca2c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    ca2e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    ca32:	62a8      	str	r0, [r5, #40]	; 0x28
    ca34:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ca38:	6030      	str	r0, [r6, #0]
    ca3a:	2110      	movs	r1, #16
    ca3c:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    ca40:	1200      	asrs	r0, r0, #8
    ca42:	6030      	str	r0, [r6, #0]
    ca44:	f000 fa3c 	bl	cec0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    ca48:	490f      	ldr	r1, [pc, #60]	; (ca88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    ca4a:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    ca4e:	480b      	ldr	r0, [pc, #44]	; (ca7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ca50:	300c      	adds	r0, #12
    ca52:	6800      	ldr	r0, [r0, #0]
    ca54:	42a0      	cmp	r0, r4
    ca56:	d304      	bcc.n	ca62 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    ca58:	f240 7149 	movw	r1, #1865	; 0x749
    ca5c:	203e      	movs	r0, #62	; 0x3e
    ca5e:	f7f8 f95b 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca62:	4621      	mov	r1, r4
    ca64:	4638      	mov	r0, r7
    ca66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ca6a:	f003 bed7 	b.w	1081c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ca6e:	0000      	.short	0x0000
    ca70:	4001f504 	.word	0x4001f504
    ca74:	40001000 	.word	0x40001000
    ca78:	200010fc 	.word	0x200010fc
    ca7c:	40008540 	.word	0x40008540
    ca80:	40008140 	.word	0x40008140
    ca84:	4001f098 	.word	0x4001f098
    ca88:	40008000 	.word	0x40008000

0000ca8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    ca8c:	4b0d      	ldr	r3, [pc, #52]	; (cac4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    ca8e:	b510      	push	{r4, lr}
    ca90:	71d8      	strb	r0, [r3, #7]
    ca92:	729a      	strb	r2, [r3, #10]
    ca94:	b151      	cbz	r1, caac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    ca96:	2002      	movs	r0, #2
    ca98:	7218      	strb	r0, [r3, #8]
    ca9a:	2801      	cmp	r0, #1
    ca9c:	d008      	beq.n	cab0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    ca9e:	2802      	cmp	r0, #2
    caa0:	d00f      	beq.n	cac2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    caa2:	f640 112a 	movw	r1, #2346	; 0x92a
    caa6:	203e      	movs	r0, #62	; 0x3e
    caa8:	f7f8 f936 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    caac:	2001      	movs	r0, #1
    caae:	e7f3      	b.n	ca98 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    cab0:	7a58      	ldrb	r0, [r3, #9]
    cab2:	2802      	cmp	r0, #2
    cab4:	d105      	bne.n	cac2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    cab6:	f000 f99b 	bl	cdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    caba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cabe:	f000 bae7 	b.w	d090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    cac2:	bd10      	pop	{r4, pc}
    cac4:	200010fc 	.word	0x200010fc

0000cac8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    cac8:	4901      	ldr	r1, [pc, #4]	; (cad0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0x8>)
    caca:	2000      	movs	r0, #0
    cacc:	6008      	str	r0, [r1, #0]
    cace:	4770      	bx	lr
    cad0:	40008540 	.word	0x40008540

0000cad4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    cad4:	490a      	ldr	r1, [pc, #40]	; (cb00 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    cad6:	b508      	push	{r3, lr}
    cad8:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    cadc:	2a01      	cmp	r2, #1
    cade:	d001      	beq.n	cae4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    cae0:	2000      	movs	r0, #0
    cae2:	bd08      	pop	{r3, pc}
    cae4:	4a07      	ldr	r2, [pc, #28]	; (cb04 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    cae6:	6812      	ldr	r2, [r2, #0]
    cae8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    caec:	4252      	negs	r2, r2
    caee:	7002      	strb	r2, [r0, #0]
    caf0:	2000      	movs	r0, #0
    caf2:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    caf6:	4804      	ldr	r0, [pc, #16]	; (cb08 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    caf8:	6800      	ldr	r0, [r0, #0]
    cafa:	9000      	str	r0, [sp, #0]
    cafc:	2001      	movs	r0, #1
    cafe:	bd08      	pop	{r3, pc}
    cb00:	40001000 	.word	0x40001000
    cb04:	40001548 	.word	0x40001548
    cb08:	4000111c 	.word	0x4000111c

0000cb0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    cb0c:	4a03      	ldr	r2, [pc, #12]	; (cb1c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    cb0e:	0e01      	lsrs	r1, r0, #24
    cb10:	6011      	str	r1, [r2, #0]
    cb12:	4902      	ldr	r1, [pc, #8]	; (cb1c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    cb14:	0200      	lsls	r0, r0, #8
    cb16:	3908      	subs	r1, #8
    cb18:	6008      	str	r0, [r1, #0]
    cb1a:	4770      	bx	lr
    cb1c:	40001524 	.word	0x40001524

0000cb20 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    cb20:	6800      	ldr	r0, [r0, #0]
    cb22:	4902      	ldr	r1, [pc, #8]	; (cb2c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    cb24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cb28:	6008      	str	r0, [r1, #0]
    cb2a:	4770      	bx	lr
    cb2c:	4000153c 	.word	0x4000153c

0000cb30 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    cb30:	b510      	push	{r4, lr}
    cb32:	f000 fb23 	bl	d17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    cb36:	4806      	ldr	r0, [pc, #24]	; (cb50 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    cb38:	6800      	ldr	r0, [r0, #0]
    cb3a:	2803      	cmp	r0, #3
    cb3c:	d001      	beq.n	cb42 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    cb3e:	280b      	cmp	r0, #11
    cb40:	d104      	bne.n	cb4c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    cb42:	f240 218a 	movw	r1, #650	; 0x28a
    cb46:	203e      	movs	r0, #62	; 0x3e
    cb48:	f7f8 f8e6 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb4c:	bd10      	pop	{r4, pc}
    cb4e:	0000      	.short	0x0000
    cb50:	40001550 	.word	0x40001550

0000cb54 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    cb54:	4901      	ldr	r1, [pc, #4]	; (cb5c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    cb56:	7548      	strb	r0, [r1, #21]
    cb58:	4770      	bx	lr
    cb5a:	0000      	.short	0x0000
    cb5c:	200010fc 	.word	0x200010fc

0000cb60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    cb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb64:	4d51      	ldr	r5, [pc, #324]	; (ccac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    cb66:	2701      	movs	r7, #1
    cb68:	64ef      	str	r7, [r5, #76]	; 0x4c
    cb6a:	4851      	ldr	r0, [pc, #324]	; (ccb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    cb6c:	f8d0 9000 	ldr.w	r9, [r0]
    cb70:	4850      	ldr	r0, [pc, #320]	; (ccb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    cb72:	6800      	ldr	r0, [r0, #0]
    cb74:	4c50      	ldr	r4, [pc, #320]	; (ccb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    cb76:	e9c4 090c 	strd	r0, r9, [r4, #48]	; 0x30
    cb7a:	f000 f943 	bl	ce04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    cb7e:	494f      	ldr	r1, [pc, #316]	; (ccbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    cb80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    cb82:	6008      	str	r0, [r1, #0]
    cb84:	f8df a138 	ldr.w	sl, [pc, #312]	; ccc0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    cb88:	2600      	movs	r6, #0
    cb8a:	62a6      	str	r6, [r4, #40]	; 0x28
    cb8c:	f8da 1200 	ldr.w	r1, [sl, #512]	; 0x200
    cb90:	f240 121d 	movw	r2, #285	; 0x11d
    cb94:	4391      	bics	r1, r2
    cb96:	f8ca 1200 	str.w	r1, [sl, #512]	; 0x200
    cb9a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    cb9e:	f8da 010c 	ldr.w	r0, [sl, #268]	; 0x10c
    cba2:	b900      	cbnz	r0, cba6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46>
    cba4:	64af      	str	r7, [r5, #72]	; 0x48
    cba6:	f000 f9b1 	bl	cf0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    cbaa:	4605      	mov	r5, r0
    cbac:	4840      	ldr	r0, [pc, #256]	; (ccb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    cbae:	1f00      	subs	r0, r0, #4
    cbb0:	6800      	ldr	r0, [r0, #0]
    cbb2:	61e0      	str	r0, [r4, #28]
    cbb4:	f7ff fdf6 	bl	c7a4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    cbb8:	f884 0020 	strb.w	r0, [r4, #32]
    cbbc:	7a60      	ldrb	r0, [r4, #9]
    cbbe:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    cbc2:	61a6      	str	r6, [r4, #24]
    cbc4:	4e3f      	ldr	r6, [pc, #252]	; (ccc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    cbc6:	07a8      	lsls	r0, r5, #30
    cbc8:	d501      	bpl.n	cbce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6e>
    cbca:	6830      	ldr	r0, [r6, #0]
    cbcc:	61a0      	str	r0, [r4, #24]
    cbce:	0728      	lsls	r0, r5, #28
    cbd0:	d501      	bpl.n	cbd6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x76>
    cbd2:	6830      	ldr	r0, [r6, #0]
    cbd4:	61a0      	str	r0, [r4, #24]
    cbd6:	f04f 0800 	mov.w	r8, #0
    cbda:	4649      	mov	r1, r9
    cbdc:	4628      	mov	r0, r5
    cbde:	f000 fa1d 	bl	d01c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    cbe2:	b918      	cbnz	r0, cbec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    cbe4:	f8ca 7010 	str.w	r7, [sl, #16]
    cbe8:	f04f 0801 	mov.w	r8, #1
    cbec:	4f32      	ldr	r7, [pc, #200]	; (ccb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    cbee:	07e8      	lsls	r0, r5, #31
    cbf0:	f1a7 0710 	sub.w	r7, r7, #16
    cbf4:	d002      	beq.n	cbfc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9c>
    cbf6:	6838      	ldr	r0, [r7, #0]
    cbf8:	4780      	blx	r0
    cbfa:	e031      	b.n	cc60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    cbfc:	07a8      	lsls	r0, r5, #30
    cbfe:	d526      	bpl.n	cc4e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xee>
    cc00:	0768      	lsls	r0, r5, #29
    cc02:	d41e      	bmi.n	cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc04:	f000 fc5a 	bl	d4bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cc08:	b9d8      	cbnz	r0, cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc0a:	f000 fc47 	bl	d49c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    cc0e:	b9c0      	cbnz	r0, cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc10:	482d      	ldr	r0, [pc, #180]	; (ccc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    cc12:	6800      	ldr	r0, [r0, #0]
    cc14:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    cc18:	f3c0 6300 	ubfx	r3, r0, #24, #1
    cc1c:	f000 020f 	and.w	r2, r0, #15
    cc20:	f3c0 1103 	ubfx	r1, r0, #4, #4
    cc24:	f3c0 2003 	ubfx	r0, r0, #8, #4
    cc28:	b15b      	cbz	r3, cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc2a:	b10a      	cbz	r2, cc30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    cc2c:	b101      	cbz	r1, cc30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    cc2e:	b940      	cbnz	r0, cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc30:	4825      	ldr	r0, [pc, #148]	; (ccc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    cc32:	1d00      	adds	r0, r0, #4
    cc34:	6800      	ldr	r0, [r0, #0]
    cc36:	b120      	cbz	r0, cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc38:	f1bc 0f03 	cmp.w	ip, #3
    cc3c:	d201      	bcs.n	cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc3e:	f045 0504 	orr.w	r5, r5, #4
    cc42:	f345 0080 	sbfx	r0, r5, #2, #1
    cc46:	4641      	mov	r1, r8
    cc48:	1c40      	adds	r0, r0, #1
    cc4a:	687a      	ldr	r2, [r7, #4]
    cc4c:	e007      	b.n	cc5e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfe>
    cc4e:	f015 0f28 	tst.w	r5, #40	; 0x28
    cc52:	d005      	beq.n	cc60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    cc54:	f345 1140 	sbfx	r1, r5, #5, #1
    cc58:	68ba      	ldr	r2, [r7, #8]
    cc5a:	4640      	mov	r0, r8
    cc5c:	1c49      	adds	r1, r1, #1
    cc5e:	4790      	blx	r2
    cc60:	06e8      	lsls	r0, r5, #27
    cc62:	d501      	bpl.n	cc68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    cc64:	68f8      	ldr	r0, [r7, #12]
    cc66:	4780      	blx	r0
    cc68:	7a60      	ldrb	r0, [r4, #9]
    cc6a:	2802      	cmp	r0, #2
    cc6c:	d11b      	bne.n	cca6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    cc6e:	7b20      	ldrb	r0, [r4, #12]
    cc70:	2800      	cmp	r0, #0
    cc72:	d018      	beq.n	cca6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    cc74:	2802      	cmp	r0, #2
    cc76:	d004      	beq.n	cc82 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    cc78:	2801      	cmp	r0, #1
    cc7a:	d006      	beq.n	cc8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    cc7c:	f640 3103 	movw	r1, #2819	; 0xb03
    cc80:	e009      	b.n	cc96 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x136>
    cc82:	6921      	ldr	r1, [r4, #16]
    cc84:	69e0      	ldr	r0, [r4, #28]
    cc86:	4408      	add	r0, r1
    cc88:	e008      	b.n	cc9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    cc8a:	69e1      	ldr	r1, [r4, #28]
    cc8c:	6920      	ldr	r0, [r4, #16]
    cc8e:	4288      	cmp	r0, r1
    cc90:	d804      	bhi.n	cc9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    cc92:	f640 3104 	movw	r1, #2820	; 0xb04
    cc96:	203e      	movs	r0, #62	; 0x3e
    cc98:	f7f8 f83e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc9c:	6030      	str	r0, [r6, #0]
    cc9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cca2:	f000 ba03 	b.w	d0ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>
    cca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ccaa:	0000      	.short	0x0000
    ccac:	40008000 	.word	0x40008000
    ccb0:	4000854c 	.word	0x4000854c
    ccb4:	4000b504 	.word	0x4000b504
    ccb8:	200010fc 	.word	0x200010fc
    ccbc:	4001f508 	.word	0x4001f508
    ccc0:	40001000 	.word	0x40001000
    ccc4:	40008544 	.word	0x40008544
    ccc8:	40001450 	.word	0x40001450

0000cccc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    cccc:	b570      	push	{r4, r5, r6, lr}
    ccce:	4b11      	ldr	r3, [pc, #68]	; (cd14 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    ccd0:	888c      	ldrh	r4, [r1, #4]
    ccd2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ccd6:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    ccda:	780c      	ldrb	r4, [r1, #0]
    ccdc:	f8d1 1001 	ldr.w	r1, [r1, #1]
    cce0:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    cce4:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    cce8:	4d0b      	ldr	r5, [pc, #44]	; (cd18 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    ccea:	6829      	ldr	r1, [r5, #0]
    ccec:	f100 0608 	add.w	r6, r0, #8
    ccf0:	2401      	movs	r4, #1
    ccf2:	fa04 f306 	lsl.w	r3, r4, r6
    ccf6:	b132      	cbz	r2, cd06 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    ccf8:	2a01      	cmp	r2, #1
    ccfa:	d006      	beq.n	cd0a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    ccfc:	f240 41c1 	movw	r1, #1217	; 0x4c1
    cd00:	203e      	movs	r0, #62	; 0x3e
    cd02:	f7f8 f809 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd06:	4399      	bics	r1, r3
    cd08:	e000      	b.n	cd0c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    cd0a:	4319      	orrs	r1, r3
    cd0c:	4084      	lsls	r4, r0
    cd0e:	430c      	orrs	r4, r1
    cd10:	602c      	str	r4, [r5, #0]
    cd12:	bd70      	pop	{r4, r5, r6, pc}
    cd14:	40001000 	.word	0x40001000
    cd18:	40001640 	.word	0x40001640

0000cd1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    cd1c:	4901      	ldr	r1, [pc, #4]	; (cd24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    cd1e:	2001      	movs	r0, #1
    cd20:	7008      	strb	r0, [r1, #0]
    cd22:	4770      	bx	lr
    cd24:	20000264 	.word	0x20000264
    cd28:	b510      	push	{r4, lr}
    cd2a:	4604      	mov	r4, r0
    cd2c:	f000 fbc6 	bl	d4bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cd30:	2800      	cmp	r0, #0
    cd32:	d00e      	beq.n	cd52 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    cd34:	4a09      	ldr	r2, [pc, #36]	; (cd5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    cd36:	6811      	ldr	r1, [r2, #0]
    cd38:	0650      	lsls	r0, r2, #25
    cd3a:	2c02      	cmp	r4, #2
    cd3c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    cd40:	d008      	beq.n	cd54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    cd42:	f3c0 2006 	ubfx	r0, r0, #8, #7
    cd46:	bf00      	nop
    cd48:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    cd4c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    cd50:	6010      	str	r0, [r2, #0]
    cd52:	bd10      	pop	{r4, pc}
    cd54:	f3c0 6006 	ubfx	r0, r0, #24, #7
    cd58:	e7f6      	b.n	cd48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    cd5a:	0000      	.short	0x0000
    cd5c:	40001588 	.word	0x40001588
    cd60:	480d      	ldr	r0, [pc, #52]	; (cd98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>)
    cd62:	7d40      	ldrb	r0, [r0, #21]
    cd64:	2825      	cmp	r0, #37	; 0x25
    cd66:	d007      	beq.n	cd78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x5c>
    cd68:	2826      	cmp	r0, #38	; 0x26
    cd6a:	d007      	beq.n	cd7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x60>
    cd6c:	2827      	cmp	r0, #39	; 0x27
    cd6e:	d007      	beq.n	cd80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x64>
    cd70:	280a      	cmp	r0, #10
    cd72:	d807      	bhi.n	cd84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    cd74:	2204      	movs	r2, #4
    cd76:	e006      	b.n	cd86 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6a>
    cd78:	2102      	movs	r1, #2
    cd7a:	e007      	b.n	cd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    cd7c:	211a      	movs	r1, #26
    cd7e:	e005      	b.n	cd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    cd80:	2150      	movs	r1, #80	; 0x50
    cd82:	e003      	b.n	cd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    cd84:	2206      	movs	r2, #6
    cd86:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    cd8a:	b2c9      	uxtb	r1, r1
    cd8c:	4a03      	ldr	r2, [pc, #12]	; (cd9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    cd8e:	6011      	str	r1, [r2, #0]
    cd90:	4902      	ldr	r1, [pc, #8]	; (cd9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    cd92:	314c      	adds	r1, #76	; 0x4c
    cd94:	6008      	str	r0, [r1, #0]
    cd96:	4770      	bx	lr
    cd98:	200010fc 	.word	0x200010fc
    cd9c:	40001508 	.word	0x40001508
    cda0:	4912      	ldr	r1, [pc, #72]	; (cdec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>)
    cda2:	b508      	push	{r3, lr}
    cda4:	f991 2014 	ldrsb.w	r2, [r1, #20]
    cda8:	7d49      	ldrb	r1, [r1, #21]
    cdaa:	2801      	cmp	r0, #1
    cdac:	d00a      	beq.n	cdc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa8>
    cdae:	2802      	cmp	r0, #2
    cdb0:	d00a      	beq.n	cdc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xac>
    cdb2:	2804      	cmp	r0, #4
    cdb4:	d00a      	beq.n	cdcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb0>
    cdb6:	2808      	cmp	r0, #8
    cdb8:	d00a      	beq.n	cdd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    cdba:	f240 31da 	movw	r1, #986	; 0x3da
    cdbe:	2006      	movs	r0, #6
    cdc0:	f7f7 ffaa 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cdc4:	2000      	movs	r0, #0
    cdc6:	e004      	b.n	cdd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    cdc8:	2001      	movs	r0, #1
    cdca:	e002      	b.n	cdd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    cdcc:	2003      	movs	r0, #3
    cdce:	e000      	b.n	cdd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    cdd0:	2002      	movs	r0, #2
    cdd2:	466b      	mov	r3, sp
    cdd4:	f7f4 fb0e 	bl	13f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    cdd8:	b118      	cbz	r0, cde2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    cdda:	f240 41f3 	movw	r1, #1267	; 0x4f3
    cdde:	203e      	movs	r0, #62	; 0x3e
    cde0:	e7ee      	b.n	cdc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    cde2:	f99d 0000 	ldrsb.w	r0, [sp]
    cde6:	f000 f9e7 	bl	d1b8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    cdea:	bd08      	pop	{r3, pc}
    cdec:	200010fc 	.word	0x200010fc
    cdf0:	4803      	ldr	r0, [pc, #12]	; (ce00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe4>)
    cdf2:	7a01      	ldrb	r1, [r0, #8]
    cdf4:	2901      	cmp	r1, #1
    cdf6:	d102      	bne.n	cdfe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe2>
    cdf8:	7a80      	ldrb	r0, [r0, #10]
    cdfa:	f7ff bfd1 	b.w	cda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    cdfe:	4770      	bx	lr
    ce00:	200010fc 	.word	0x200010fc
    ce04:	4805      	ldr	r0, [pc, #20]	; (ce1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x100>)
    ce06:	7a40      	ldrb	r0, [r0, #9]
    ce08:	2801      	cmp	r0, #1
    ce0a:	d003      	beq.n	ce14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf8>
    ce0c:	2802      	cmp	r0, #2
    ce0e:	d103      	bne.n	ce18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xfc>
    ce10:	f003 bc82 	b.w	10718 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    ce14:	f003 bc8c 	b.w	10730 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    ce18:	4770      	bx	lr
    ce1a:	0000      	.short	0x0000
    ce1c:	200010fc 	.word	0x200010fc
    ce20:	4809      	ldr	r0, [pc, #36]	; (ce48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12c>)
    ce22:	b508      	push	{r3, lr}
    ce24:	2100      	movs	r1, #0
    ce26:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    ce2a:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    ce2e:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    ce32:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    ce36:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    ce3a:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    ce3e:	4803      	ldr	r0, [pc, #12]	; (ce4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x130>)
    ce40:	6800      	ldr	r0, [r0, #0]
    ce42:	9000      	str	r0, [sp, #0]
    ce44:	bd08      	pop	{r3, pc}
    ce46:	0000      	.short	0x0000
    ce48:	40001000 	.word	0x40001000
    ce4c:	40001118 	.word	0x40001118
    ce50:	4816      	ldr	r0, [pc, #88]	; (ceac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>)
    ce52:	b510      	push	{r4, lr}
    ce54:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    ce58:	07c1      	lsls	r1, r0, #31
    ce5a:	d026      	beq.n	ceaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    ce5c:	0781      	lsls	r1, r0, #30
    ce5e:	d513      	bpl.n	ce88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    ce60:	4813      	ldr	r0, [pc, #76]	; (ceb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    ce62:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ce66:	f041 0101 	orr.w	r1, r1, #1
    ce6a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ce6e:	4811      	ldr	r0, [pc, #68]	; (ceb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x198>)
    ce70:	6800      	ldr	r0, [r0, #0]
    ce72:	280b      	cmp	r0, #11
    ce74:	d005      	beq.n	ce82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    ce76:	280a      	cmp	r0, #10
    ce78:	d003      	beq.n	ce82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    ce7a:	2803      	cmp	r0, #3
    ce7c:	d001      	beq.n	ce82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    ce7e:	2802      	cmp	r0, #2
    ce80:	d113      	bne.n	ceaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    ce82:	f240 5123 	movw	r1, #1315	; 0x523
    ce86:	e00d      	b.n	cea4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    ce88:	0740      	lsls	r0, r0, #29
    ce8a:	d50e      	bpl.n	ceaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    ce8c:	4808      	ldr	r0, [pc, #32]	; (ceb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    ce8e:	490a      	ldr	r1, [pc, #40]	; (ceb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x19c>)
    ce90:	3008      	adds	r0, #8
    ce92:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    ce96:	4809      	ldr	r0, [pc, #36]	; (cebc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a0>)
    ce98:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    ce9c:	2801      	cmp	r0, #1
    ce9e:	d104      	bne.n	ceaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    cea0:	f240 512a 	movw	r1, #1322	; 0x52a
    cea4:	203e      	movs	r0, #62	; 0x3e
    cea6:	f7f7 ff37 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ceaa:	bd10      	pop	{r4, pc}
    ceac:	200010fc 	.word	0x200010fc
    ceb0:	40001000 	.word	0x40001000
    ceb4:	40001550 	.word	0x40001550
    ceb8:	4001f098 	.word	0x4001f098
    cebc:	40008000 	.word	0x40008000
    cec0:	4808      	ldr	r0, [pc, #32]	; (cee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c8>)
    cec2:	4601      	mov	r1, r0
    cec4:	79c2      	ldrb	r2, [r0, #7]
    cec6:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    ceca:	b112      	cbz	r2, ced2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b6>
    cecc:	2a01      	cmp	r2, #1
    cece:	d003      	beq.n	ced8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    ced0:	e006      	b.n	cee0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    ced2:	f041 0102 	orr.w	r1, r1, #2
    ced6:	e001      	b.n	cedc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    ced8:	f041 0104 	orr.w	r1, r1, #4
    cedc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    cee0:	f7ff bfb6 	b.w	ce50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    cee4:	200010fc 	.word	0x200010fc
    cee8:	b510      	push	{r4, lr}
    ceea:	f000 fae7 	bl	d4bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ceee:	2800      	cmp	r0, #0
    cef0:	d108      	bne.n	cf04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    cef2:	f000 fad3 	bl	d49c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    cef6:	2800      	cmp	r0, #0
    cef8:	d104      	bne.n	cf04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    cefa:	4803      	ldr	r0, [pc, #12]	; (cf08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ec>)
    cefc:	6801      	ldr	r1, [r0, #0]
    cefe:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    cf02:	6001      	str	r1, [r0, #0]
    cf04:	bd10      	pop	{r4, pc}
    cf06:	0000      	.short	0x0000
    cf08:	40001568 	.word	0x40001568
    cf0c:	b538      	push	{r3, r4, r5, lr}
    cf0e:	4d32      	ldr	r5, [pc, #200]	; (cfd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2bc>)
    cf10:	2400      	movs	r4, #0
    cf12:	7b28      	ldrb	r0, [r5, #12]
    cf14:	b120      	cbz	r0, cf20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    cf16:	4831      	ldr	r0, [pc, #196]	; (cfdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c0>)
    cf18:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    cf1c:	2801      	cmp	r0, #1
    cf1e:	d007      	beq.n	cf30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x214>
    cf20:	2200      	movs	r2, #0
    cf22:	7a69      	ldrb	r1, [r5, #9]
    cf24:	482e      	ldr	r0, [pc, #184]	; (cfe0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>)
    cf26:	2901      	cmp	r1, #1
    cf28:	d004      	beq.n	cf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x218>
    cf2a:	2902      	cmp	r1, #2
    cf2c:	d00a      	beq.n	cf44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x228>
    cf2e:	e019      	b.n	cf64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    cf30:	2201      	movs	r2, #1
    cf32:	e7f6      	b.n	cf22 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x206>
    cf34:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    cf38:	2901      	cmp	r1, #1
    cf3a:	d001      	beq.n	cf40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    cf3c:	2400      	movs	r4, #0
    cf3e:	e011      	b.n	cf64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    cf40:	2408      	movs	r4, #8
    cf42:	e00f      	b.n	cf64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    cf44:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    cf48:	2901      	cmp	r1, #1
    cf4a:	d006      	beq.n	cf5a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    cf4c:	2100      	movs	r1, #0
    cf4e:	4b25      	ldr	r3, [pc, #148]	; (cfe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    cf50:	681b      	ldr	r3, [r3, #0]
    cf52:	2b01      	cmp	r3, #1
    cf54:	d003      	beq.n	cf5e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x242>
    cf56:	2404      	movs	r4, #4
    cf58:	e002      	b.n	cf60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    cf5a:	2102      	movs	r1, #2
    cf5c:	e7f7      	b.n	cf4e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x232>
    cf5e:	2400      	movs	r4, #0
    cf60:	430c      	orrs	r4, r1
    cf62:	4314      	orrs	r4, r2
    cf64:	f014 0f0b 	tst.w	r4, #11
    cf68:	d105      	bne.n	cf76 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x25a>
    cf6a:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    cf6e:	2901      	cmp	r1, #1
    cf70:	d029      	beq.n	cfc6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2aa>
    cf72:	2100      	movs	r1, #0
    cf74:	430c      	orrs	r4, r1
    cf76:	491c      	ldr	r1, [pc, #112]	; (cfe8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>)
    cf78:	7809      	ldrb	r1, [r1, #0]
    cf7a:	b1d1      	cbz	r1, cfb2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x296>
    cf7c:	491b      	ldr	r1, [pc, #108]	; (cfec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>)
    cf7e:	6809      	ldr	r1, [r1, #0]
    cf80:	f011 0fff 	tst.w	r1, #255	; 0xff
    cf84:	d003      	beq.n	cf8e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x272>
    cf86:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    cf8a:	2a01      	cmp	r2, #1
    cf8c:	d000      	beq.n	cf90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>
    cf8e:	2200      	movs	r2, #0
    cf90:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
    cf94:	f011 0fff 	tst.w	r1, #255	; 0xff
    cf98:	d003      	beq.n	cfa2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x286>
    cf9a:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    cf9e:	2801      	cmp	r0, #1
    cfa0:	d000      	beq.n	cfa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x288>
    cfa2:	2000      	movs	r0, #0
    cfa4:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    cfa8:	480e      	ldr	r0, [pc, #56]	; (cfe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    cfaa:	3010      	adds	r0, #16
    cfac:	6800      	ldr	r0, [r0, #0]
    cfae:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    cfb2:	f7ff ff35 	bl	ce20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>
    cfb6:	06e0      	lsls	r0, r4, #27
    cfb8:	d509      	bpl.n	cfce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    cfba:	0720      	lsls	r0, r4, #28
    cfbc:	d407      	bmi.n	cfce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    cfbe:	7a68      	ldrb	r0, [r5, #9]
    cfc0:	2801      	cmp	r0, #1
    cfc2:	d002      	beq.n	cfca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ae>
    cfc4:	e003      	b.n	cfce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    cfc6:	2110      	movs	r1, #16
    cfc8:	e7d4      	b.n	cf74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x258>
    cfca:	f044 0420 	orr.w	r4, r4, #32
    cfce:	4808      	ldr	r0, [pc, #32]	; (cff0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d4>)
    cfd0:	6800      	ldr	r0, [r0, #0]
    cfd2:	9000      	str	r0, [sp, #0]
    cfd4:	4620      	mov	r0, r4
    cfd6:	bd38      	pop	{r3, r4, r5, pc}
    cfd8:	200010fc 	.word	0x200010fc
    cfdc:	40008000 	.word	0x40008000
    cfe0:	40001000 	.word	0x40001000
    cfe4:	40001400 	.word	0x40001400
    cfe8:	20000264 	.word	0x20000264
    cfec:	40001640 	.word	0x40001640
    cff0:	40008144 	.word	0x40008144
    cff4:	4808      	ldr	r0, [pc, #32]	; (d018 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    cff6:	b510      	push	{r4, lr}
    cff8:	6800      	ldr	r0, [r0, #0]
    cffa:	f000 000f 	and.w	r0, r0, #15
    cffe:	2803      	cmp	r0, #3
    d000:	d006      	beq.n	d010 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    d002:	2804      	cmp	r0, #4
    d004:	d006      	beq.n	d014 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f8>
    d006:	f240 2112 	movw	r1, #530	; 0x212
    d00a:	203e      	movs	r0, #62	; 0x3e
    d00c:	f7f7 fe84 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d010:	2001      	movs	r0, #1
    d012:	bd10      	pop	{r4, pc}
    d014:	2002      	movs	r0, #2
    d016:	bd10      	pop	{r4, pc}
    d018:	40001510 	.word	0x40001510
    d01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d020:	4c19      	ldr	r4, [pc, #100]	; (d088 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36c>)
    d022:	460d      	mov	r5, r1
    d024:	7a21      	ldrb	r1, [r4, #8]
    d026:	b129      	cbz	r1, d034 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>
    d028:	f010 0f11 	tst.w	r0, #17
    d02c:	d00b      	beq.n	d046 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x32a>
    d02e:	f7ff fa4b 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    d032:	e027      	b.n	d084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    d034:	4915      	ldr	r1, [pc, #84]	; (d08c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x370>)
    d036:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    d03a:	6008      	str	r0, [r1, #0]
    d03c:	f000 f85e 	bl	d0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    d040:	2000      	movs	r0, #0
    d042:	7320      	strb	r0, [r4, #12]
    d044:	e01e      	b.n	d084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    d046:	2901      	cmp	r1, #1
    d048:	d001      	beq.n	d04e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x332>
    d04a:	2601      	movs	r6, #1
    d04c:	e000      	b.n	d050 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    d04e:	2600      	movs	r6, #0
    d050:	79e0      	ldrb	r0, [r4, #7]
    d052:	2801      	cmp	r0, #1
    d054:	d00e      	beq.n	d074 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    d056:	2700      	movs	r7, #0
    d058:	f000 f850 	bl	d0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    d05c:	2196      	movs	r1, #150	; 0x96
    d05e:	4630      	mov	r0, r6
    d060:	f000 f862 	bl	d128 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40c>
    d064:	4601      	mov	r1, r0
    d066:	b14f      	cbz	r7, d07c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x360>
    d068:	353b      	adds	r5, #59	; 0x3b
    d06a:	428d      	cmp	r5, r1
    d06c:	d904      	bls.n	d078 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    d06e:	2000      	movs	r0, #0
    d070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d074:	2701      	movs	r7, #1
    d076:	e7ef      	b.n	d058 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>
    d078:	2001      	movs	r0, #1
    d07a:	71e0      	strb	r0, [r4, #7]
    d07c:	7aa2      	ldrb	r2, [r4, #10]
    d07e:	4630      	mov	r0, r6
    d080:	f7ff fc88 	bl	c994 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    d084:	2001      	movs	r0, #1
    d086:	e7f3      	b.n	d070 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    d088:	200010fc 	.word	0x200010fc
    d08c:	4001f508 	.word	0x4001f508
    d090:	4805      	ldr	r0, [pc, #20]	; (d0a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    d092:	2100      	movs	r1, #0
    d094:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    d098:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d09c:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    d0a0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    d0a4:	4770      	bx	lr
    d0a6:	0000      	.short	0x0000
    d0a8:	40001000 	.word	0x40001000
    d0ac:	4804      	ldr	r0, [pc, #16]	; (d0c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    d0ae:	6a81      	ldr	r1, [r0, #40]	; 0x28
    d0b0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    d0b4:	6281      	str	r1, [r0, #40]	; 0x28
    d0b6:	4903      	ldr	r1, [pc, #12]	; (d0c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>)
    d0b8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    d0bc:	6008      	str	r0, [r1, #0]
    d0be:	4770      	bx	lr
    d0c0:	200010fc 	.word	0x200010fc
    d0c4:	4001f504 	.word	0x4001f504
    d0c8:	4905      	ldr	r1, [pc, #20]	; (d0e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    d0ca:	2000      	movs	r0, #0
    d0cc:	6008      	str	r0, [r1, #0]
    d0ce:	1f09      	subs	r1, r1, #4
    d0d0:	6008      	str	r0, [r1, #0]
    d0d2:	1f09      	subs	r1, r1, #4
    d0d4:	6008      	str	r0, [r1, #0]
    d0d6:	4902      	ldr	r1, [pc, #8]	; (d0e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    d0d8:	1d09      	adds	r1, r1, #4
    d0da:	6008      	str	r0, [r1, #0]
    d0dc:	4770      	bx	lr
    d0de:	0000      	.short	0x0000
    d0e0:	40008548 	.word	0x40008548
    d0e4:	4903      	ldr	r1, [pc, #12]	; (d0f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d8>)
    d0e6:	79c9      	ldrb	r1, [r1, #7]
    d0e8:	2900      	cmp	r1, #0
    d0ea:	d102      	bne.n	d0f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d6>
    d0ec:	4902      	ldr	r1, [pc, #8]	; (d0f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    d0ee:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    d0f2:	4770      	bx	lr
    d0f4:	200010fc 	.word	0x200010fc
    d0f8:	4001f098 	.word	0x4001f098
    d0fc:	4802      	ldr	r0, [pc, #8]	; (d108 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    d0fe:	2100      	movs	r1, #0
    d100:	71c1      	strb	r1, [r0, #7]
    d102:	7201      	strb	r1, [r0, #8]
    d104:	7241      	strb	r1, [r0, #9]
    d106:	4770      	bx	lr
    d108:	200010fc 	.word	0x200010fc
    d10c:	4a05      	ldr	r2, [pc, #20]	; (d124 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>)
    d10e:	79d2      	ldrb	r2, [r2, #7]
    d110:	2a01      	cmp	r2, #1
    d112:	d006      	beq.n	d122 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    d114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d118:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    d11c:	fbb1 f1f2 	udiv	r1, r1, r2
    d120:	1a40      	subs	r0, r0, r1
    d122:	4770      	bx	lr
    d124:	200010fc 	.word	0x200010fc
    d128:	b570      	push	{r4, r5, r6, lr}
    d12a:	4c13      	ldr	r4, [pc, #76]	; (d178 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>)
    d12c:	4603      	mov	r3, r0
    d12e:	460d      	mov	r5, r1
    d130:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    d134:	2000      	movs	r0, #0
    d136:	b15a      	cbz	r2, d150 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    d138:	4621      	mov	r1, r4
    d13a:	f891 1020 	ldrb.w	r1, [r1, #32]
    d13e:	b163      	cbz	r3, d15a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x43e>
    d140:	2b01      	cmp	r3, #1
    d142:	d111      	bne.n	d168 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>
    d144:	2a01      	cmp	r2, #1
    d146:	4628      	mov	r0, r5
    d148:	d012      	beq.n	d170 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    d14a:	f003 fbbf 	bl	108cc <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    d14e:	e009      	b.n	d164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    d150:	f240 7166 	movw	r1, #1894	; 0x766
    d154:	203e      	movs	r0, #62	; 0x3e
    d156:	f7f7 fddf 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d15a:	2a01      	cmp	r2, #1
    d15c:	4628      	mov	r0, r5
    d15e:	d004      	beq.n	d16a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44e>
    d160:	f003 fbc2 	bl	108e8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    d164:	69e1      	ldr	r1, [r4, #28]
    d166:	4408      	add	r0, r1
    d168:	bd70      	pop	{r4, r5, r6, pc}
    d16a:	f003 fbd7 	bl	1091c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    d16e:	e7f9      	b.n	d164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    d170:	f003 fbc5 	bl	108fe <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    d174:	e7f6      	b.n	d164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    d176:	0000      	.short	0x0000
    d178:	200010fc 	.word	0x200010fc
    d17c:	b510      	push	{r4, lr}
    d17e:	2200      	movs	r2, #0
    d180:	2901      	cmp	r1, #1
    d182:	d008      	beq.n	d196 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47a>
    d184:	2902      	cmp	r1, #2
    d186:	d004      	beq.n	d192 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    d188:	f240 2169 	movw	r1, #617	; 0x269
    d18c:	203e      	movs	r0, #62	; 0x3e
    d18e:	f7f7 fdc3 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d192:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    d196:	4905      	ldr	r1, [pc, #20]	; (d1ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x490>)
    d198:	430a      	orrs	r2, r1
    d19a:	4905      	ldr	r1, [pc, #20]	; (d1b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    d19c:	600a      	str	r2, [r1, #0]
    d19e:	4905      	ldr	r1, [pc, #20]	; (d1b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x498>)
    d1a0:	4308      	orrs	r0, r1
    d1a2:	4903      	ldr	r1, [pc, #12]	; (d1b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    d1a4:	1d09      	adds	r1, r1, #4
    d1a6:	6008      	str	r0, [r1, #0]
    d1a8:	bd10      	pop	{r4, pc}
    d1aa:	0000      	.short	0x0000
    d1ac:	00100108 	.word	0x00100108
    d1b0:	40001514 	.word	0x40001514
    d1b4:	02030000 	.word	0x02030000

0000d1b8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    d1b8:	4901      	ldr	r1, [pc, #4]	; (d1c0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    d1ba:	b2c0      	uxtb	r0, r0
    d1bc:	6008      	str	r0, [r1, #0]
    d1be:	4770      	bx	lr
    d1c0:	4000150c 	.word	0x4000150c

0000d1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    d1c4:	b510      	push	{r4, lr}
    d1c6:	4907      	ldr	r1, [pc, #28]	; (d1e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    d1c8:	2801      	cmp	r0, #1
    d1ca:	d005      	beq.n	d1d8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    d1cc:	2802      	cmp	r0, #2
    d1ce:	d005      	beq.n	d1dc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    d1d0:	218b      	movs	r1, #139	; 0x8b
    d1d2:	203f      	movs	r0, #63	; 0x3f
    d1d4:	f7f7 fda0 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1d8:	2003      	movs	r0, #3
    d1da:	e000      	b.n	d1de <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    d1dc:	2004      	movs	r0, #4
    d1de:	6008      	str	r0, [r1, #0]
    d1e0:	bd10      	pop	{r4, pc}
    d1e2:	0000      	.short	0x0000
    d1e4:	40001510 	.word	0x40001510

0000d1e8 <strcmp>:
    d1e8:	f810 2b01 	ldrb.w	r2, [r0], #1
    d1ec:	f811 3b01 	ldrb.w	r3, [r1], #1
    d1f0:	2a01      	cmp	r2, #1
    d1f2:	bf28      	it	cs
    d1f4:	429a      	cmpcs	r2, r3
    d1f6:	d0f7      	beq.n	d1e8 <strcmp>
    d1f8:	1ad0      	subs	r0, r2, r3
    d1fa:	4770      	bx	lr

0000d1fc <strlen>:
    d1fc:	4603      	mov	r3, r0
    d1fe:	f813 2b01 	ldrb.w	r2, [r3], #1
    d202:	2a00      	cmp	r2, #0
    d204:	d1fb      	bne.n	d1fe <strlen+0x2>
    d206:	1a18      	subs	r0, r3, r0
    d208:	3801      	subs	r0, #1
    d20a:	4770      	bx	lr

0000d20c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    d20c:	4770      	bx	lr
    d20e:	2100      	movs	r1, #0
    d210:	7081      	strb	r1, [r0, #2]
    d212:	7001      	strb	r1, [r0, #0]
    d214:	7041      	strb	r1, [r0, #1]
    d216:	4770      	bx	lr

0000d218 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    d218:	b570      	push	{r4, r5, r6, lr}
    d21a:	f7f4 f905 	bl	1428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d21e:	4605      	mov	r5, r0
    d220:	2400      	movs	r4, #0
    d222:	e006      	b.n	d232 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    d224:	4620      	mov	r0, r4
    d226:	f7f4 f905 	bl	1434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d22a:	f7ff fff0 	bl	d20e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    d22e:	1c64      	adds	r4, r4, #1
    d230:	b2e4      	uxtb	r4, r4
    d232:	42ac      	cmp	r4, r5
    d234:	d3f6      	bcc.n	d224 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    d236:	bd70      	pop	{r4, r5, r6, pc}

0000d238 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    d238:	2000      	movs	r0, #0
    d23a:	f7f6 beed 	b.w	4018 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000d23e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    d23e:	b510      	push	{r4, lr}
    d240:	f7f6 fbd6 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    d244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d248:	f000 b800 	b.w	d24c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000d24c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    d24c:	0a41      	lsrs	r1, r0, #9
    d24e:	f643 5209 	movw	r2, #15625	; 0x3d09
    d252:	4351      	muls	r1, r2
    d254:	f3c0 0008 	ubfx	r0, r0, #0, #9
    d258:	fb10 f002 	smulbb	r0, r0, r2
    d25c:	f500 7080 	add.w	r0, r0, #256	; 0x100
    d260:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    d264:	4770      	bx	lr

0000d266 <MPSL_IRQ_RADIO_Handler>:
    d266:	f7f5 b9f3 	b.w	2650 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    d26a:	2800      	cmp	r0, #0
    d26c:	db09      	blt.n	d282 <MPSL_IRQ_RADIO_Handler+0x1c>
    d26e:	f000 021f 	and.w	r2, r0, #31
    d272:	2101      	movs	r1, #1
    d274:	4091      	lsls	r1, r2
    d276:	0940      	lsrs	r0, r0, #5
    d278:	0080      	lsls	r0, r0, #2
    d27a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d27e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d282:	4770      	bx	lr
    d284:	2800      	cmp	r0, #0
    d286:	db0d      	blt.n	d2a4 <MPSL_IRQ_RADIO_Handler+0x3e>
    d288:	f000 021f 	and.w	r2, r0, #31
    d28c:	2101      	movs	r1, #1
    d28e:	4091      	lsls	r1, r2
    d290:	0940      	lsrs	r0, r0, #5
    d292:	0080      	lsls	r0, r0, #2
    d294:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d298:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d29c:	f3bf 8f4f 	dsb	sy
    d2a0:	f3bf 8f6f 	isb	sy
    d2a4:	4770      	bx	lr

0000d2a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    d2a6:	b570      	push	{r4, r5, r6, lr}
    d2a8:	4602      	mov	r2, r0
    d2aa:	2000      	movs	r0, #0
    d2ac:	2900      	cmp	r1, #0
    d2ae:	d01d      	beq.n	d2ec <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    d2b0:	fba2 0101 	umull	r0, r1, r2, r1
    d2b4:	0a40      	lsrs	r0, r0, #9
    d2b6:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    d2ba:	0a49      	lsrs	r1, r1, #9
    d2bc:	1c40      	adds	r0, r0, #1
    d2be:	f141 0100 	adc.w	r1, r1, #0
    d2c2:	f240 72a1 	movw	r2, #1953	; 0x7a1
    d2c6:	1883      	adds	r3, r0, r2
    d2c8:	f141 0100 	adc.w	r1, r1, #0
    d2cc:	1c5b      	adds	r3, r3, #1
    d2ce:	f141 0400 	adc.w	r4, r1, #0
    d2d2:	2100      	movs	r1, #0
    d2d4:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    d2d8:	41a1      	sbcs	r1, r4
    d2da:	d203      	bcs.n	d2e4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    d2dc:	2171      	movs	r1, #113	; 0x71
    d2de:	206d      	movs	r0, #109	; 0x6d
    d2e0:	f7f7 fa3e 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d2e4:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    d2e8:	fbb0 f0f2 	udiv	r0, r0, r2
    d2ec:	bd70      	pop	{r4, r5, r6, pc}
    d2ee:	5840      	ldr	r0, [r0, r1]
    d2f0:	2800      	cmp	r0, #0
    d2f2:	d000      	beq.n	d2f6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    d2f4:	2001      	movs	r0, #1
    d2f6:	4770      	bx	lr
    d2f8:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    d2fc:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    d300:	f002 0201 	and.w	r2, r2, #1
    d304:	03c0      	lsls	r0, r0, #15
    d306:	d503      	bpl.n	d310 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d308:	428a      	cmp	r2, r1
    d30a:	d101      	bne.n	d310 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d30c:	2001      	movs	r0, #1
    d30e:	4770      	bx	lr
    d310:	2000      	movs	r0, #0
    d312:	4770      	bx	lr

0000d314 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    d314:	b510      	push	{r4, lr}
    d316:	2101      	movs	r1, #1
    d318:	0788      	lsls	r0, r1, #30
    d31a:	f7f7 f9df 	bl	46dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d31e:	2800      	cmp	r0, #0
    d320:	d000      	beq.n	d324 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    d322:	2001      	movs	r0, #1
    d324:	bd10      	pop	{r4, pc}

0000d326 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    d326:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d32a:	2101      	movs	r1, #1
    d32c:	6001      	str	r1, [r0, #0]
    d32e:	4770      	bx	lr

0000d330 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    d330:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d334:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    d338:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    d33c:	f002 0203 	and.w	r2, r2, #3
    d340:	03c9      	lsls	r1, r1, #15
    d342:	d503      	bpl.n	d34c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d344:	4282      	cmp	r2, r0
    d346:	d101      	bne.n	d34c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d348:	2001      	movs	r0, #1
    d34a:	4770      	bx	lr
    d34c:	2000      	movs	r0, #0
    d34e:	4770      	bx	lr

0000d350 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    d350:	b510      	push	{r4, lr}
    d352:	2100      	movs	r1, #0
    d354:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d358:	f7f7 f9c0 	bl	46dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d35c:	2800      	cmp	r0, #0
    d35e:	d000      	beq.n	d362 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    d360:	2001      	movs	r0, #1
    d362:	bd10      	pop	{r4, pc}
    d364:	2800      	cmp	r0, #0
    d366:	db09      	blt.n	d37c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    d368:	f000 021f 	and.w	r2, r0, #31
    d36c:	2101      	movs	r1, #1
    d36e:	4091      	lsls	r1, r2
    d370:	0940      	lsrs	r0, r0, #5
    d372:	0080      	lsls	r0, r0, #2
    d374:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d378:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d37c:	4770      	bx	lr
    d37e:	2800      	cmp	r0, #0
    d380:	db0d      	blt.n	d39e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    d382:	f000 021f 	and.w	r2, r0, #31
    d386:	2101      	movs	r1, #1
    d388:	4091      	lsls	r1, r2
    d38a:	0940      	lsrs	r0, r0, #5
    d38c:	0080      	lsls	r0, r0, #2
    d38e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d392:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d396:	f3bf 8f4f 	dsb	sy
    d39a:	f3bf 8f6f 	isb	sy
    d39e:	4770      	bx	lr
    d3a0:	00021000 	.word	0x00021000
    d3a4:	000000fa 	.word	0x000000fa
    d3a8:	71a053fe 	.word	0x71a053fe
    d3ac:	1095eb1b 	.word	0x1095eb1b
    d3b0:	c946cf33 	.word	0xc946cf33
    d3b4:	5ebe9563 	.word	0x5ebe9563
    d3b8:	736e3829 	.word	0x736e3829
    d3bc:	2800      	cmp	r0, #0
    d3be:	db09      	blt.n	d3d4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    d3c0:	f000 021f 	and.w	r2, r0, #31
    d3c4:	2101      	movs	r1, #1
    d3c6:	4091      	lsls	r1, r2
    d3c8:	0940      	lsrs	r0, r0, #5
    d3ca:	0080      	lsls	r0, r0, #2
    d3cc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d3d0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d3d4:	4770      	bx	lr

0000d3d6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    d3d6:	f3ef 8110 	mrs	r1, PRIMASK
    d3da:	b672      	cpsid	i
    d3dc:	7802      	ldrb	r2, [r0, #0]
    d3de:	2a01      	cmp	r2, #1
    d3e0:	d001      	beq.n	d3e6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    d3e2:	2201      	movs	r2, #1
    d3e4:	e000      	b.n	d3e8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    d3e6:	2200      	movs	r2, #0
    d3e8:	2301      	movs	r3, #1
    d3ea:	7003      	strb	r3, [r0, #0]
    d3ec:	b901      	cbnz	r1, d3f0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    d3ee:	b662      	cpsie	i
    d3f0:	b10a      	cbz	r2, d3f6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    d3f2:	2000      	movs	r0, #0
    d3f4:	4770      	bx	lr
    d3f6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d3fa:	4770      	bx	lr

0000d3fc <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    d3fc:	2100      	movs	r1, #0
    d3fe:	7001      	strb	r1, [r0, #0]
    d400:	4608      	mov	r0, r1
    d402:	4770      	bx	lr

0000d404 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    d404:	f3ef 8110 	mrs	r1, PRIMASK
    d408:	b672      	cpsid	i
    d40a:	2200      	movs	r2, #0
    d40c:	7002      	strb	r2, [r0, #0]
    d40e:	b901      	cbnz	r1, d412 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    d410:	b662      	cpsie	i
    d412:	2000      	movs	r0, #0
    d414:	4770      	bx	lr

0000d416 <mpsl_low_priority_process>:
    d416:	f7f7 ba8f 	b.w	4938 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000d41a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    d41a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d41e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d422:	280f      	cmp	r0, #15
    d424:	d001      	beq.n	d42a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    d426:	2000      	movs	r0, #0
    d428:	4770      	bx	lr
    d42a:	2001      	movs	r0, #1
    d42c:	4770      	bx	lr

0000d42e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    d42e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d432:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d436:	280a      	cmp	r0, #10
    d438:	d001      	beq.n	d43e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    d43a:	2000      	movs	r0, #0
    d43c:	4770      	bx	lr
    d43e:	2001      	movs	r0, #1
    d440:	4770      	bx	lr

0000d442 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    d442:	b500      	push	{lr}
    d444:	f7ff fff3 	bl	d42e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d448:	b120      	cbz	r0, d454 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    d44a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d44e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d452:	b108      	cbz	r0, d458 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    d454:	2000      	movs	r0, #0
    d456:	bd00      	pop	{pc}
    d458:	2001      	movs	r0, #1
    d45a:	bd00      	pop	{pc}

0000d45c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    d45c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d460:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d464:	280e      	cmp	r0, #14
    d466:	d001      	beq.n	d46c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    d468:	2000      	movs	r0, #0
    d46a:	4770      	bx	lr
    d46c:	2001      	movs	r0, #1
    d46e:	4770      	bx	lr

0000d470 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    d470:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d474:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d478:	2810      	cmp	r0, #16
    d47a:	d001      	beq.n	d480 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    d47c:	2000      	movs	r0, #0
    d47e:	4770      	bx	lr
    d480:	2001      	movs	r0, #1
    d482:	4770      	bx	lr

0000d484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    d484:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d488:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d48c:	2806      	cmp	r0, #6
    d48e:	d003      	beq.n	d498 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d490:	1c40      	adds	r0, r0, #1
    d492:	d001      	beq.n	d498 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d494:	2000      	movs	r0, #0
    d496:	4770      	bx	lr
    d498:	2001      	movs	r0, #1
    d49a:	4770      	bx	lr

0000d49c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    d49c:	b500      	push	{lr}
    d49e:	f7ff fff1 	bl	d484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d4a2:	b148      	cbz	r0, d4b8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d4a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d4a8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d4ac:	2806      	cmp	r0, #6
    d4ae:	d303      	bcc.n	d4b8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d4b0:	1c40      	adds	r0, r0, #1
    d4b2:	d001      	beq.n	d4b8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d4b4:	2001      	movs	r0, #1
    d4b6:	bd00      	pop	{pc}
    d4b8:	2000      	movs	r0, #0
    d4ba:	bd00      	pop	{pc}

0000d4bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    d4bc:	b500      	push	{lr}
    d4be:	f7ff ffe1 	bl	d484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d4c2:	b138      	cbz	r0, d4d4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    d4c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d4c8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d4cc:	2806      	cmp	r0, #6
    d4ce:	d303      	bcc.n	d4d8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d4d0:	1c40      	adds	r0, r0, #1
    d4d2:	d001      	beq.n	d4d8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d4d4:	2000      	movs	r0, #0
    d4d6:	bd00      	pop	{pc}
    d4d8:	2001      	movs	r0, #1
    d4da:	bd00      	pop	{pc}

0000d4dc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    d4dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d4e0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d4e4:	280d      	cmp	r0, #13
    d4e6:	d001      	beq.n	d4ec <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    d4e8:	2000      	movs	r0, #0
    d4ea:	4770      	bx	lr
    d4ec:	2001      	movs	r0, #1
    d4ee:	4770      	bx	lr

0000d4f0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    d4f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d4f4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d4f8:	2808      	cmp	r0, #8
    d4fa:	d001      	beq.n	d500 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    d4fc:	2000      	movs	r0, #0
    d4fe:	4770      	bx	lr
    d500:	2001      	movs	r0, #1
    d502:	4770      	bx	lr

0000d504 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    d504:	2a00      	cmp	r2, #0
    d506:	bf04      	itt	eq
    d508:	2000      	moveq	r0, #0
    d50a:	4770      	bxeq	lr
    d50c:	1e52      	subs	r2, r2, #1
    d50e:	d007      	beq.n	d520 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    d510:	7803      	ldrb	r3, [r0, #0]
    d512:	f891 c000 	ldrb.w	ip, [r1]
    d516:	4563      	cmp	r3, ip
    d518:	bf04      	itt	eq
    d51a:	1c40      	addeq	r0, r0, #1
    d51c:	1c49      	addeq	r1, r1, #1
    d51e:	d0f5      	beq.n	d50c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    d520:	7800      	ldrb	r0, [r0, #0]
    d522:	7809      	ldrb	r1, [r1, #0]
    d524:	1a40      	subs	r0, r0, r1
    d526:	4770      	bx	lr

0000d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    d528:	b4f0      	push	{r4, r5, r6, r7}
    d52a:	ea80 0c01 	eor.w	ip, r0, r1
    d52e:	4603      	mov	r3, r0
    d530:	f01c 0f03 	tst.w	ip, #3
    d534:	d13c      	bne.n	d5b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d536:	f013 0f03 	tst.w	r3, #3
    d53a:	d00b      	beq.n	d554 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    d53c:	2a00      	cmp	r2, #0
    d53e:	bf04      	itt	eq
    d540:	bcf0      	popeq	{r4, r5, r6, r7}
    d542:	4770      	bxeq	lr
    d544:	f811 cb01 	ldrb.w	ip, [r1], #1
    d548:	f803 cb01 	strb.w	ip, [r3], #1
    d54c:	1e52      	subs	r2, r2, #1
    d54e:	f013 0f03 	tst.w	r3, #3
    d552:	d1f3      	bne.n	d53c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    d554:	2a03      	cmp	r2, #3
    d556:	d94f      	bls.n	d5f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d558:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d55c:	d24c      	bcs.n	d5f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d55e:	f1c2 0c00 	rsb	ip, r2, #0
    d562:	ea4f 74ec 	mov.w	r4, ip, asr #31
    d566:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    d56a:	ea4f 0cac 	mov.w	ip, ip, asr #2
    d56e:	f1cc 0c00 	rsb	ip, ip, #0
    d572:	f1bc 0f00 	cmp.w	ip, #0
    d576:	dd1b      	ble.n	d5b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d578:	1f0d      	subs	r5, r1, #4
    d57a:	1f1c      	subs	r4, r3, #4
    d57c:	f01c 0f01 	tst.w	ip, #1
    d580:	d003      	beq.n	d58a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    d582:	f855 6f04 	ldr.w	r6, [r5, #4]!
    d586:	f844 6f04 	str.w	r6, [r4, #4]!
    d58a:	ea5f 066c 	movs.w	r6, ip, asr #1
    d58e:	d007      	beq.n	d5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    d590:	686f      	ldr	r7, [r5, #4]
    d592:	6067      	str	r7, [r4, #4]
    d594:	f855 7f08 	ldr.w	r7, [r5, #8]!
    d598:	f844 7f08 	str.w	r7, [r4, #8]!
    d59c:	1e76      	subs	r6, r6, #1
    d59e:	d1f7      	bne.n	d590 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    d5a0:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    d5a4:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    d5a8:	f1cc 0c00 	rsb	ip, ip, #0
    d5ac:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    d5b0:	2a00      	cmp	r2, #0
    d5b2:	bf04      	itt	eq
    d5b4:	bcf0      	popeq	{r4, r5, r6, r7}
    d5b6:	4770      	bxeq	lr
    d5b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d5bc:	d226      	bcs.n	d60c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d5be:	2a00      	cmp	r2, #0
    d5c0:	bfdc      	itt	le
    d5c2:	bcf0      	pople	{r4, r5, r6, r7}
    d5c4:	4770      	bxle	lr
    d5c6:	1e49      	subs	r1, r1, #1
    d5c8:	1e5b      	subs	r3, r3, #1
    d5ca:	f012 0f01 	tst.w	r2, #1
    d5ce:	d003      	beq.n	d5d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    d5d0:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    d5d4:	f803 cf01 	strb.w	ip, [r3, #1]!
    d5d8:	1052      	asrs	r2, r2, #1
    d5da:	bf04      	itt	eq
    d5dc:	bcf0      	popeq	{r4, r5, r6, r7}
    d5de:	4770      	bxeq	lr
    d5e0:	f891 c001 	ldrb.w	ip, [r1, #1]
    d5e4:	f883 c001 	strb.w	ip, [r3, #1]
    d5e8:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    d5ec:	f803 cf02 	strb.w	ip, [r3, #2]!
    d5f0:	1e52      	subs	r2, r2, #1
    d5f2:	d1f5      	bne.n	d5e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    d5f4:	bcf0      	pop	{r4, r5, r6, r7}
    d5f6:	4770      	bx	lr
    d5f8:	2a04      	cmp	r2, #4
    d5fa:	d3d9      	bcc.n	d5b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d5fc:	f851 cb04 	ldr.w	ip, [r1], #4
    d600:	1f12      	subs	r2, r2, #4
    d602:	f843 cb04 	str.w	ip, [r3], #4
    d606:	2a04      	cmp	r2, #4
    d608:	d2f8      	bcs.n	d5fc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    d60a:	e7d1      	b.n	d5b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d60c:	f811 cb01 	ldrb.w	ip, [r1], #1
    d610:	f803 cb01 	strb.w	ip, [r3], #1
    d614:	1e52      	subs	r2, r2, #1
    d616:	d1f9      	bne.n	d60c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d618:	bcf0      	pop	{r4, r5, r6, r7}
    d61a:	4770      	bx	lr

0000d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    d61c:	b470      	push	{r4, r5, r6}
    d61e:	4603      	mov	r3, r0
    d620:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    d624:	f010 0f03 	tst.w	r0, #3
    d628:	d009      	beq.n	d63e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    d62a:	2a00      	cmp	r2, #0
    d62c:	bf04      	itt	eq
    d62e:	bc70      	popeq	{r4, r5, r6}
    d630:	4770      	bxeq	lr
    d632:	f803 cb01 	strb.w	ip, [r3], #1
    d636:	1e52      	subs	r2, r2, #1
    d638:	f013 0f03 	tst.w	r3, #3
    d63c:	d1f5      	bne.n	d62a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    d63e:	b2c9      	uxtb	r1, r1
    d640:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d644:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    d648:	2a03      	cmp	r2, #3
    d64a:	d939      	bls.n	d6c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d64c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d650:	d236      	bcs.n	d6c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d652:	4251      	negs	r1, r2
    d654:	17cc      	asrs	r4, r1, #31
    d656:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    d65a:	1089      	asrs	r1, r1, #2
    d65c:	424e      	negs	r6, r1
    d65e:	2e00      	cmp	r6, #0
    d660:	dd11      	ble.n	d686 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d662:	1f19      	subs	r1, r3, #4
    d664:	f016 0f01 	tst.w	r6, #1
    d668:	bf18      	it	ne
    d66a:	f841 5f04 	strne.w	r5, [r1, #4]!
    d66e:	1074      	asrs	r4, r6, #1
    d670:	d004      	beq.n	d67c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    d672:	604d      	str	r5, [r1, #4]
    d674:	f841 5f08 	str.w	r5, [r1, #8]!
    d678:	1e64      	subs	r4, r4, #1
    d67a:	d1fa      	bne.n	d672 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    d67c:	4271      	negs	r1, r6
    d67e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    d682:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d686:	2a00      	cmp	r2, #0
    d688:	bf04      	itt	eq
    d68a:	bc70      	popeq	{r4, r5, r6}
    d68c:	4770      	bxeq	lr
    d68e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d692:	d21d      	bcs.n	d6d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d694:	2a00      	cmp	r2, #0
    d696:	bfdc      	itt	le
    d698:	bc70      	pople	{r4, r5, r6}
    d69a:	4770      	bxle	lr
    d69c:	1e59      	subs	r1, r3, #1
    d69e:	f012 0f01 	tst.w	r2, #1
    d6a2:	bf18      	it	ne
    d6a4:	f801 cf01 	strbne.w	ip, [r1, #1]!
    d6a8:	1052      	asrs	r2, r2, #1
    d6aa:	bf04      	itt	eq
    d6ac:	bc70      	popeq	{r4, r5, r6}
    d6ae:	4770      	bxeq	lr
    d6b0:	f881 c001 	strb.w	ip, [r1, #1]
    d6b4:	f801 cf02 	strb.w	ip, [r1, #2]!
    d6b8:	1e52      	subs	r2, r2, #1
    d6ba:	d1f9      	bne.n	d6b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    d6bc:	bc70      	pop	{r4, r5, r6}
    d6be:	4770      	bx	lr
    d6c0:	2a04      	cmp	r2, #4
    d6c2:	d3e0      	bcc.n	d686 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d6c4:	1f12      	subs	r2, r2, #4
    d6c6:	f843 5b04 	str.w	r5, [r3], #4
    d6ca:	2a04      	cmp	r2, #4
    d6cc:	d2fa      	bcs.n	d6c4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    d6ce:	e7da      	b.n	d686 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d6d0:	f803 cb01 	strb.w	ip, [r3], #1
    d6d4:	1e52      	subs	r2, r2, #1
    d6d6:	d1fb      	bne.n	d6d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d6d8:	bc70      	pop	{r4, r5, r6}
    d6da:	4770      	bx	lr
    d6dc:	f04f 30ff 	mov.w	r0, #4294967295
    d6e0:	4770      	bx	lr
    d6e2:	2000      	movs	r0, #0
    d6e4:	4770      	bx	lr
    d6e6:	2000      	movs	r0, #0
    d6e8:	4770      	bx	lr
    d6ea:	f04f 30ff 	mov.w	r0, #4294967295
    d6ee:	4770      	bx	lr
    d6f0:	4770      	bx	lr
    d6f2:	4770      	bx	lr
    d6f4:	2000      	movs	r0, #0
    d6f6:	4770      	bx	lr
    d6f8:	f04f 30ff 	mov.w	r0, #4294967295
    d6fc:	4770      	bx	lr
    d6fe:	f04f 30ff 	mov.w	r0, #4294967295
    d702:	4770      	bx	lr
    d704:	2100      	movs	r1, #0
    d706:	7001      	strb	r1, [r0, #0]
    d708:	4770      	bx	lr
    d70a:	f04f 30ff 	mov.w	r0, #4294967295
    d70e:	4770      	bx	lr
    d710:	f04f 30ff 	mov.w	r0, #4294967295
    d714:	4770      	bx	lr
    d716:	2000      	movs	r0, #0
    d718:	4770      	bx	lr
    d71a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d71e:	4606      	mov	r6, r0
    d720:	460c      	mov	r4, r1
    d722:	7808      	ldrb	r0, [r1, #0]
    d724:	7849      	ldrb	r1, [r1, #1]
    d726:	2700      	movs	r7, #0
    d728:	4408      	add	r0, r1
    d72a:	4691      	mov	r9, r2
    d72c:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    d730:	463d      	mov	r5, r7
    d732:	e00e      	b.n	d752 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    d734:	7a23      	ldrb	r3, [r4, #8]
    d736:	2b02      	cmp	r3, #2
    d738:	d200      	bcs.n	d73c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x120>
    d73a:	2302      	movs	r3, #2
    d73c:	79e2      	ldrb	r2, [r4, #7]
    d73e:	2a03      	cmp	r2, #3
    d740:	d200      	bcs.n	d744 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x128>
    d742:	2203      	movs	r2, #3
    d744:	79a1      	ldrb	r1, [r4, #6]
    d746:	7960      	ldrb	r0, [r4, #5]
    d748:	f000 ffaf 	bl	e6aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    d74c:	1c6d      	adds	r5, r5, #1
    d74e:	4407      	add	r7, r0
    d750:	b2ed      	uxtb	r5, r5
    d752:	4545      	cmp	r5, r8
    d754:	d3ee      	bcc.n	d734 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    d756:	6830      	ldr	r0, [r6, #0]
    d758:	1cc0      	adds	r0, r0, #3
    d75a:	f020 0003 	bic.w	r0, r0, #3
    d75e:	6030      	str	r0, [r6, #0]
    d760:	f1b9 0f00 	cmp.w	r9, #0
    d764:	d000      	beq.n	d768 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14c>
    d766:	2000      	movs	r0, #0
    d768:	463a      	mov	r2, r7
    d76a:	4641      	mov	r1, r8
    d76c:	f7f7 fe8a 	bl	5484 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    d770:	6831      	ldr	r1, [r6, #0]
    d772:	4408      	add	r0, r1
    d774:	6030      	str	r0, [r6, #0]
    d776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d77a <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    d77a:	2000      	movs	r0, #0
    d77c:	4770      	bx	lr

0000d77e <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    d77e:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    d780:	4604      	mov	r4, r0
    d782:	1d01      	adds	r1, r0, #4
    d784:	4668      	mov	r0, sp
    d786:	f7f9 fc45 	bl	7014 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    d78a:	2800      	cmp	r0, #0
    d78c:	d004      	beq.n	d798 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    d78e:	4669      	mov	r1, sp
    d790:	4620      	mov	r0, r4
    d792:	f000 f848 	bl	d826 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    d796:	2001      	movs	r0, #1
    d798:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000d79a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    d79a:	b50e      	push	{r1, r2, r3, lr}
    d79c:	4601      	mov	r1, r0
    d79e:	4668      	mov	r0, sp
    d7a0:	f000 f827 	bl	d7f2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    d7a4:	4668      	mov	r0, sp
    d7a6:	f7f9 fc5f 	bl	7068 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    d7aa:	bd0e      	pop	{r1, r2, r3, pc}

0000d7ac <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    d7ac:	b510      	push	{r4, lr}
    d7ae:	4604      	mov	r4, r0
    d7b0:	4620      	mov	r0, r4
    d7b2:	f7f7 fba7 	bl	4f04 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    d7b6:	2800      	cmp	r0, #0
    d7b8:	d006      	beq.n	d7c8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    d7ba:	78a1      	ldrb	r1, [r4, #2]
    d7bc:	7820      	ldrb	r0, [r4, #0]
    d7be:	f000 f804 	bl	d7ca <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    d7c2:	2800      	cmp	r0, #0
    d7c4:	d0f4      	beq.n	d7b0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    d7c6:	2001      	movs	r0, #1
    d7c8:	bd10      	pop	{r4, pc}
    d7ca:	b570      	push	{r4, r5, r6, lr}
    d7cc:	460c      	mov	r4, r1
    d7ce:	4605      	mov	r5, r0
    d7d0:	f7f7 fbf4 	bl	4fbc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    d7d4:	2800      	cmp	r0, #0
    d7d6:	d002      	beq.n	d7de <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    d7d8:	2d3e      	cmp	r5, #62	; 0x3e
    d7da:	d001      	beq.n	d7e0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    d7dc:	2001      	movs	r0, #1
    d7de:	bd70      	pop	{r4, r5, r6, pc}
    d7e0:	2c12      	cmp	r4, #18
    d7e2:	d004      	beq.n	d7ee <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    d7e4:	4620      	mov	r0, r4
    d7e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d7ea:	f7f7 bc03 	b.w	4ff4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d7ee:	2000      	movs	r0, #0
    d7f0:	bd70      	pop	{r4, r5, r6, pc}

0000d7f2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    d7f2:	880a      	ldrh	r2, [r1, #0]
    d7f4:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d7f8:	8002      	strh	r2, [r0, #0]
    d7fa:	884a      	ldrh	r2, [r1, #2]
    d7fc:	8042      	strh	r2, [r0, #2]
    d7fe:	784a      	ldrb	r2, [r1, #1]
    d800:	0993      	lsrs	r3, r2, #6
    d802:	2200      	movs	r2, #0
    d804:	7142      	strb	r2, [r0, #5]
    d806:	784b      	ldrb	r3, [r1, #1]
    d808:	f3c3 1301 	ubfx	r3, r3, #4, #2
    d80c:	b11b      	cbz	r3, d816 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d80e:	2b01      	cmp	r3, #1
    d810:	d005      	beq.n	d81e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    d812:	2b02      	cmp	r3, #2
    d814:	d005      	beq.n	d822 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    d816:	7102      	strb	r2, [r0, #4]
    d818:	1d09      	adds	r1, r1, #4
    d81a:	6081      	str	r1, [r0, #8]
    d81c:	4770      	bx	lr
    d81e:	2201      	movs	r2, #1
    d820:	e7f9      	b.n	d816 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d822:	2202      	movs	r2, #2
    d824:	e7f7      	b.n	d816 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000d826 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    d826:	b510      	push	{r4, lr}
    d828:	460c      	mov	r4, r1
    d82a:	7809      	ldrb	r1, [r1, #0]
    d82c:	7001      	strb	r1, [r0, #0]
    d82e:	7841      	ldrb	r1, [r0, #1]
    d830:	f021 010f 	bic.w	r1, r1, #15
    d834:	7041      	strb	r1, [r0, #1]
    d836:	8822      	ldrh	r2, [r4, #0]
    d838:	f3c2 2203 	ubfx	r2, r2, #8, #4
    d83c:	4311      	orrs	r1, r2
    d83e:	7041      	strb	r1, [r0, #1]
    d840:	78a2      	ldrb	r2, [r4, #2]
    d842:	7082      	strb	r2, [r0, #2]
    d844:	8862      	ldrh	r2, [r4, #2]
    d846:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    d84a:	0a12      	lsrs	r2, r2, #8
    d84c:	70c2      	strb	r2, [r0, #3]
    d84e:	7041      	strb	r1, [r0, #1]
    d850:	7922      	ldrb	r2, [r4, #4]
    d852:	f002 0203 	and.w	r2, r2, #3
    d856:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    d85a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    d85e:	7041      	strb	r1, [r0, #1]
    d860:	7962      	ldrb	r2, [r4, #5]
    d862:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    d866:	7041      	strb	r1, [r0, #1]
    d868:	68a1      	ldr	r1, [r4, #8]
    d86a:	1d02      	adds	r2, r0, #4
    d86c:	4291      	cmp	r1, r2
    d86e:	d006      	beq.n	d87e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    d870:	8862      	ldrh	r2, [r4, #2]
    d872:	2afb      	cmp	r2, #251	; 0xfb
    d874:	d300      	bcc.n	d878 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    d876:	22fb      	movs	r2, #251	; 0xfb
    d878:	1d00      	adds	r0, r0, #4
    d87a:	f7ff fe55 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d87e:	78a0      	ldrb	r0, [r4, #2]
    d880:	1d00      	adds	r0, r0, #4
    d882:	b2c0      	uxtb	r0, r0
    d884:	bd10      	pop	{r4, pc}

0000d886 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    d886:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d88a:	4604      	mov	r4, r0
    d88c:	f891 c000 	ldrb.w	ip, [r1]
    d890:	2000      	movs	r0, #0
    d892:	270c      	movs	r7, #12
    d894:	223e      	movs	r2, #62	; 0x3e
    d896:	2612      	movs	r6, #18
    d898:	25ff      	movs	r5, #255	; 0xff
    d89a:	f04f 0b14 	mov.w	fp, #20
    d89e:	f04f 0e13 	mov.w	lr, #19
    d8a2:	f04f 0a05 	mov.w	sl, #5
    d8a6:	f104 030d 	add.w	r3, r4, #13
    d8aa:	f04f 0911 	mov.w	r9, #17
    d8ae:	f1bc 0f20 	cmp.w	ip, #32
    d8b2:	d272      	bcs.n	d99a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    d8b4:	e8df f00c 	tbb	[pc, ip]
    d8b8:	29271071 	.word	0x29271071
    d8bc:	a46dfc2e 	.word	0xa46dfc2e
    d8c0:	fbdac0ae 	.word	0xfbdac0ae
    d8c4:	f7f8f9fa 	.word	0xf7f8f9fa
    d8c8:	507171f6 	.word	0x507171f6
    d8cc:	f3f4f572 	.word	0xf3f4f572
    d8d0:	eff0f1f2 	.word	0xeff0f1f2
    d8d4:	ec71edee 	.word	0xec71edee
    d8d8:	7027      	strb	r7, [r4, #0]
    d8da:	7908      	ldrb	r0, [r1, #4]
    d8dc:	70a0      	strb	r0, [r4, #2]
    d8de:	7948      	ldrb	r0, [r1, #5]
    d8e0:	70e0      	strb	r0, [r4, #3]
    d8e2:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d8e6:	0a00      	lsrs	r0, r0, #8
    d8e8:	7120      	strb	r0, [r4, #4]
    d8ea:	79c8      	ldrb	r0, [r1, #7]
    d8ec:	7160      	strb	r0, [r4, #5]
    d8ee:	7a08      	ldrb	r0, [r1, #8]
    d8f0:	71a0      	strb	r0, [r4, #6]
    d8f2:	8908      	ldrh	r0, [r1, #8]
    d8f4:	0a00      	lsrs	r0, r0, #8
    d8f6:	71e0      	strb	r0, [r4, #7]
    d8f8:	7a88      	ldrb	r0, [r1, #10]
    d8fa:	7220      	strb	r0, [r4, #8]
    d8fc:	8948      	ldrh	r0, [r1, #10]
    d8fe:	0a00      	lsrs	r0, r0, #8
    d900:	7260      	strb	r0, [r4, #9]
    d902:	2008      	movs	r0, #8
    d904:	e154      	b.n	dbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d906:	2010      	movs	r0, #16
    d908:	e000      	b.n	d90c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    d90a:	201a      	movs	r0, #26
    d90c:	7020      	strb	r0, [r4, #0]
    d90e:	7908      	ldrb	r0, [r1, #4]
    d910:	70a0      	strb	r0, [r4, #2]
    d912:	e154      	b.n	dbbe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    d914:	7022      	strb	r2, [r4, #0]
    d916:	2002      	movs	r0, #2
    d918:	70a0      	strb	r0, [r4, #2]
    d91a:	7908      	ldrb	r0, [r1, #4]
    d91c:	70e0      	strb	r0, [r4, #3]
    d91e:	7b88      	ldrb	r0, [r1, #14]
    d920:	7120      	strb	r0, [r4, #4]
    d922:	7948      	ldrb	r0, [r1, #5]
    d924:	7160      	strb	r0, [r4, #5]
    d926:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d92a:	f8c4 0006 	str.w	r0, [r4, #6]
    d92e:	8948      	ldrh	r0, [r1, #10]
    d930:	8160      	strh	r0, [r4, #10]
    d932:	7b08      	ldrb	r0, [r1, #12]
    d934:	7320      	strb	r0, [r4, #12]
    d936:	7b0e      	ldrb	r6, [r1, #12]
    d938:	1d0d      	adds	r5, r1, #4
    d93a:	2e1f      	cmp	r6, #31
    d93c:	d300      	bcc.n	d940 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    d93e:	261f      	movs	r6, #31
    d940:	4618      	mov	r0, r3
    d942:	4632      	mov	r2, r6
    d944:	f105 010b 	add.w	r1, r5, #11
    d948:	f7ff fdee 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d94c:	360d      	adds	r6, #13
    d94e:	7a69      	ldrb	r1, [r5, #9]
    d950:	55a1      	strb	r1, [r4, r6]
    d952:	1e76      	subs	r6, r6, #1
    d954:	b2f0      	uxtb	r0, r6
    d956:	e129      	b.n	dbac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    d958:	7022      	strb	r2, [r4, #0]
    d95a:	200b      	movs	r0, #11
    d95c:	70a0      	strb	r0, [r4, #2]
    d95e:	7908      	ldrb	r0, [r1, #4]
    d960:	70e0      	strb	r0, [r4, #3]
    d962:	7948      	ldrb	r0, [r1, #5]
    d964:	7120      	strb	r0, [r4, #4]
    d966:	7988      	ldrb	r0, [r1, #6]
    d968:	7160      	strb	r0, [r4, #5]
    d96a:	f8d1 0007 	ldr.w	r0, [r1, #7]
    d96e:	f8c4 0006 	str.w	r0, [r4, #6]
    d972:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    d976:	8160      	strh	r0, [r4, #10]
    d978:	7b48      	ldrb	r0, [r1, #13]
    d97a:	7320      	strb	r0, [r4, #12]
    d97c:	f8d1 000e 	ldr.w	r0, [r1, #14]
    d980:	f8c4 000d 	str.w	r0, [r4, #13]
    d984:	8a48      	ldrh	r0, [r1, #18]
    d986:	f8a4 0011 	strh.w	r0, [r4, #17]
    d98a:	7d08      	ldrb	r0, [r1, #20]
    d98c:	74e0      	strb	r0, [r4, #19]
    d98e:	4630      	mov	r0, r6
    d990:	e10e      	b.n	dbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d992:	4620      	mov	r0, r4
    d994:	f000 f98d 	bl	dcb2 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    d998:	e108      	b.n	dbac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    d99a:	e10b      	b.n	dbb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    d99c:	7022      	strb	r2, [r4, #0]
    d99e:	200a      	movs	r0, #10
    d9a0:	70a0      	strb	r0, [r4, #2]
    d9a2:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    d9a6:	70e0      	strb	r0, [r4, #3]
    d9a8:	7888      	ldrb	r0, [r1, #2]
    d9aa:	7120      	strb	r0, [r4, #4]
    d9ac:	8848      	ldrh	r0, [r1, #2]
    d9ae:	0a00      	lsrs	r0, r0, #8
    d9b0:	7160      	strb	r0, [r4, #5]
    d9b2:	7908      	ldrb	r0, [r1, #4]
    d9b4:	71a0      	strb	r0, [r4, #6]
    d9b6:	7948      	ldrb	r0, [r1, #5]
    d9b8:	71e0      	strb	r0, [r4, #7]
    d9ba:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d9be:	60a0      	str	r0, [r4, #8]
    d9c0:	8948      	ldrh	r0, [r1, #10]
    d9c2:	81a0      	strh	r0, [r4, #12]
    d9c4:	68c8      	ldr	r0, [r1, #12]
    d9c6:	f8c4 000e 	str.w	r0, [r4, #14]
    d9ca:	8a08      	ldrh	r0, [r1, #16]
    d9cc:	8260      	strh	r0, [r4, #18]
    d9ce:	f8d1 0012 	ldr.w	r0, [r1, #18]
    d9d2:	6160      	str	r0, [r4, #20]
    d9d4:	8ac8      	ldrh	r0, [r1, #22]
    d9d6:	8320      	strh	r0, [r4, #24]
    d9d8:	7e08      	ldrb	r0, [r1, #24]
    d9da:	76a0      	strb	r0, [r4, #26]
    d9dc:	8b08      	ldrh	r0, [r1, #24]
    d9de:	0a00      	lsrs	r0, r0, #8
    d9e0:	76e0      	strb	r0, [r4, #27]
    d9e2:	7e88      	ldrb	r0, [r1, #26]
    d9e4:	7720      	strb	r0, [r4, #28]
    d9e6:	8b48      	ldrh	r0, [r1, #26]
    d9e8:	0a00      	lsrs	r0, r0, #8
    d9ea:	7760      	strb	r0, [r4, #29]
    d9ec:	7f08      	ldrb	r0, [r1, #28]
    d9ee:	77a0      	strb	r0, [r4, #30]
    d9f0:	8b88      	ldrh	r0, [r1, #28]
    d9f2:	0a00      	lsrs	r0, r0, #8
    d9f4:	77e0      	strb	r0, [r4, #31]
    d9f6:	7f88      	ldrb	r0, [r1, #30]
    d9f8:	f884 0020 	strb.w	r0, [r4, #32]
    d9fc:	201f      	movs	r0, #31
    d9fe:	e0d7      	b.n	dbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    da00:	7022      	strb	r2, [r4, #0]
    da02:	f884 b002 	strb.w	fp, [r4, #2]
    da06:	7908      	ldrb	r0, [r1, #4]
    da08:	70e0      	strb	r0, [r4, #3]
    da0a:	8888      	ldrh	r0, [r1, #4]
    da0c:	0a00      	lsrs	r0, r0, #8
    da0e:	7120      	strb	r0, [r4, #4]
    da10:	7988      	ldrb	r0, [r1, #6]
    da12:	e0ed      	b.n	dbf0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    da14:	7022      	strb	r2, [r4, #0]
    da16:	2004      	movs	r0, #4
    da18:	70a0      	strb	r0, [r4, #2]
    da1a:	7908      	ldrb	r0, [r1, #4]
    da1c:	70e0      	strb	r0, [r4, #3]
    da1e:	7988      	ldrb	r0, [r1, #6]
    da20:	7120      	strb	r0, [r4, #4]
    da22:	88c8      	ldrh	r0, [r1, #6]
    da24:	0a00      	lsrs	r0, r0, #8
    da26:	7160      	strb	r0, [r4, #5]
    da28:	6888      	ldr	r0, [r1, #8]
    da2a:	f8c4 0006 	str.w	r0, [r4, #6]
    da2e:	68c8      	ldr	r0, [r1, #12]
    da30:	f8c4 000a 	str.w	r0, [r4, #10]
    da34:	200c      	movs	r0, #12
    da36:	e0bb      	b.n	dbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    da38:	7022      	strb	r2, [r4, #0]
    da3a:	2003      	movs	r0, #3
    da3c:	70a0      	strb	r0, [r4, #2]
    da3e:	7908      	ldrb	r0, [r1, #4]
    da40:	70e0      	strb	r0, [r4, #3]
    da42:	7988      	ldrb	r0, [r1, #6]
    da44:	7120      	strb	r0, [r4, #4]
    da46:	88c8      	ldrh	r0, [r1, #6]
    da48:	0a00      	lsrs	r0, r0, #8
    da4a:	7160      	strb	r0, [r4, #5]
    da4c:	7a08      	ldrb	r0, [r1, #8]
    da4e:	71a0      	strb	r0, [r4, #6]
    da50:	8908      	ldrh	r0, [r1, #8]
    da52:	0a00      	lsrs	r0, r0, #8
    da54:	71e0      	strb	r0, [r4, #7]
    da56:	7a88      	ldrb	r0, [r1, #10]
    da58:	7220      	strb	r0, [r4, #8]
    da5a:	8948      	ldrh	r0, [r1, #10]
    da5c:	0a00      	lsrs	r0, r0, #8
    da5e:	7260      	strb	r0, [r4, #9]
    da60:	7b08      	ldrb	r0, [r1, #12]
    da62:	72a0      	strb	r0, [r4, #10]
    da64:	8988      	ldrh	r0, [r1, #12]
    da66:	0a00      	lsrs	r0, r0, #8
    da68:	72e0      	strb	r0, [r4, #11]
    da6a:	e120      	b.n	dcae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    da6c:	7022      	strb	r2, [r4, #0]
    da6e:	f884 a002 	strb.w	sl, [r4, #2]
    da72:	7908      	ldrb	r0, [r1, #4]
    da74:	70e0      	strb	r0, [r4, #3]
    da76:	8888      	ldrh	r0, [r1, #4]
    da78:	0a00      	lsrs	r0, r0, #8
    da7a:	7120      	strb	r0, [r4, #4]
    da7c:	f8d1 0006 	ldr.w	r0, [r1, #6]
    da80:	f8c4 0005 	str.w	r0, [r4, #5]
    da84:	f8d1 000a 	ldr.w	r0, [r1, #10]
    da88:	f8c4 0009 	str.w	r0, [r4, #9]
    da8c:	89c8      	ldrh	r0, [r1, #14]
    da8e:	e010      	b.n	dab2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    da90:	e0fa      	b.n	dc88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    da92:	e0ce      	b.n	dc32 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    da94:	e0af      	b.n	dbf6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    da96:	e0da      	b.n	dc4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    da98:	e0e8      	b.n	dc6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    da9a:	e0a1      	b.n	dbe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    da9c:	e08c      	b.n	dbb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    da9e:	e090      	b.n	dbc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    daa0:	e033      	b.n	db0a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    daa2:	e02f      	b.n	db04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    daa4:	e043      	b.n	db2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    daa6:	e03d      	b.n	db24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    daa8:	e021      	b.n	daee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    daaa:	e015      	b.n	dad8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    daac:	e008      	b.n	dac0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    daae:	e004      	b.n	daba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    dab0:	e046      	b.n	db40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    dab2:	f8a4 000d 	strh.w	r0, [r4, #13]
    dab6:	200d      	movs	r0, #13
    dab8:	e07a      	b.n	dbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    daba:	f884 9000 	strb.w	r9, [r4]
    dabe:	e038      	b.n	db32 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    dac0:	f884 a000 	strb.w	sl, [r4]
    dac4:	7908      	ldrb	r0, [r1, #4]
    dac6:	70a0      	strb	r0, [r4, #2]
    dac8:	7948      	ldrb	r0, [r1, #5]
    daca:	70e0      	strb	r0, [r4, #3]
    dacc:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    dad0:	0a00      	lsrs	r0, r0, #8
    dad2:	7120      	strb	r0, [r4, #4]
    dad4:	79c8      	ldrb	r0, [r1, #7]
    dad6:	e08b      	b.n	dbf0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    dad8:	2008      	movs	r0, #8
    dada:	7020      	strb	r0, [r4, #0]
    dadc:	7908      	ldrb	r0, [r1, #4]
    dade:	70a0      	strb	r0, [r4, #2]
    dae0:	7988      	ldrb	r0, [r1, #6]
    dae2:	70e0      	strb	r0, [r4, #3]
    dae4:	88c8      	ldrh	r0, [r1, #6]
    dae6:	0a00      	lsrs	r0, r0, #8
    dae8:	7120      	strb	r0, [r4, #4]
    daea:	7a08      	ldrb	r0, [r1, #8]
    daec:	e080      	b.n	dbf0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    daee:	2030      	movs	r0, #48	; 0x30
    daf0:	7020      	strb	r0, [r4, #0]
    daf2:	7908      	ldrb	r0, [r1, #4]
    daf4:	70a0      	strb	r0, [r4, #2]
    daf6:	7988      	ldrb	r0, [r1, #6]
    daf8:	70e0      	strb	r0, [r4, #3]
    dafa:	88c8      	ldrh	r0, [r1, #6]
    dafc:	0a00      	lsrs	r0, r0, #8
    dafe:	7120      	strb	r0, [r4, #4]
    db00:	2003      	movs	r0, #3
    db02:	e055      	b.n	dbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    db04:	7022      	strb	r2, [r4, #0]
    db06:	2007      	movs	r0, #7
    db08:	e077      	b.n	dbfa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    db0a:	7022      	strb	r2, [r4, #0]
    db0c:	70a7      	strb	r7, [r4, #2]
    db0e:	7908      	ldrb	r0, [r1, #4]
    db10:	70e0      	strb	r0, [r4, #3]
    db12:	7988      	ldrb	r0, [r1, #6]
    db14:	7120      	strb	r0, [r4, #4]
    db16:	88c8      	ldrh	r0, [r1, #6]
    db18:	0a00      	lsrs	r0, r0, #8
    db1a:	7160      	strb	r0, [r4, #5]
    db1c:	7a08      	ldrb	r0, [r1, #8]
    db1e:	71a0      	strb	r0, [r4, #6]
    db20:	7a48      	ldrb	r0, [r1, #9]
    db22:	e05a      	b.n	dbda <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    db24:	4620      	mov	r0, r4
    db26:	1d09      	adds	r1, r1, #4
    db28:	f7f7 fa1a 	bl	4f60 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    db2c:	e03e      	b.n	dbac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    db2e:	2057      	movs	r0, #87	; 0x57
    db30:	7020      	strb	r0, [r4, #0]
    db32:	7908      	ldrb	r0, [r1, #4]
    db34:	70a0      	strb	r0, [r4, #2]
    db36:	8888      	ldrh	r0, [r1, #4]
    db38:	0a00      	lsrs	r0, r0, #8
    db3a:	70e0      	strb	r0, [r4, #3]
    db3c:	2002      	movs	r0, #2
    db3e:	e037      	b.n	dbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    db40:	7022      	strb	r2, [r4, #0]
    db42:	220d      	movs	r2, #13
    db44:	70a2      	strb	r2, [r4, #2]
    db46:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    db4a:	70e2      	strb	r2, [r4, #3]
    db4c:	894a      	ldrh	r2, [r1, #10]
    db4e:	80a2      	strh	r2, [r4, #4]
    db50:	784a      	ldrb	r2, [r1, #1]
    db52:	71a2      	strb	r2, [r4, #6]
    db54:	f8d1 2002 	ldr.w	r2, [r1, #2]
    db58:	f8c4 2007 	str.w	r2, [r4, #7]
    db5c:	88ca      	ldrh	r2, [r1, #6]
    db5e:	f8a4 200b 	strh.w	r2, [r4, #11]
    db62:	7b0a      	ldrb	r2, [r1, #12]
    db64:	4620      	mov	r0, r4
    db66:	7362      	strb	r2, [r4, #13]
    db68:	7b4a      	ldrb	r2, [r1, #13]
    db6a:	7382      	strb	r2, [r0, #14]
    db6c:	7b8a      	ldrb	r2, [r1, #14]
    db6e:	73c2      	strb	r2, [r0, #15]
    db70:	7e8a      	ldrb	r2, [r1, #26]
    db72:	7402      	strb	r2, [r0, #16]
    db74:	7a4a      	ldrb	r2, [r1, #9]
    db76:	7442      	strb	r2, [r0, #17]
    db78:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    db7c:	f8ad 2000 	strh.w	r2, [sp]
    db80:	8242      	strh	r2, [r0, #18]
    db82:	7cca      	ldrb	r2, [r1, #19]
    db84:	7502      	strb	r2, [r0, #20]
    db86:	694a      	ldr	r2, [r1, #20]
    db88:	f8c0 2015 	str.w	r2, [r0, #21]
    db8c:	8b0a      	ldrh	r2, [r1, #24]
    db8e:	f8a0 2019 	strh.w	r2, [r0, #25]
    db92:	7a0a      	ldrb	r2, [r1, #8]
    db94:	76c2      	strb	r2, [r0, #27]
    db96:	7a0d      	ldrb	r5, [r1, #8]
    db98:	2de5      	cmp	r5, #229	; 0xe5
    db9a:	d300      	bcc.n	db9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x318>
    db9c:	25e5      	movs	r5, #229	; 0xe5
    db9e:	462a      	mov	r2, r5
    dba0:	301c      	adds	r0, #28
    dba2:	311c      	adds	r1, #28
    dba4:	f7ff fcc0 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dba8:	351a      	adds	r5, #26
    dbaa:	b2e8      	uxtb	r0, r5
    dbac:	2800      	cmp	r0, #0
    dbae:	d001      	beq.n	dbb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    dbb0:	7060      	strb	r0, [r4, #1]
    dbb2:	1c80      	adds	r0, r0, #2
    dbb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbb8:	7022      	strb	r2, [r4, #0]
    dbba:	f884 9002 	strb.w	r9, [r4, #2]
    dbbe:	2001      	movs	r0, #1
    dbc0:	e7f6      	b.n	dbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dbc2:	7022      	strb	r2, [r4, #0]
    dbc4:	70a6      	strb	r6, [r4, #2]
    dbc6:	7908      	ldrb	r0, [r1, #4]
    dbc8:	70e0      	strb	r0, [r4, #3]
    dbca:	7948      	ldrb	r0, [r1, #5]
    dbcc:	7120      	strb	r0, [r4, #4]
    dbce:	7988      	ldrb	r0, [r1, #6]
    dbd0:	7160      	strb	r0, [r4, #5]
    dbd2:	88c8      	ldrh	r0, [r1, #6]
    dbd4:	0a00      	lsrs	r0, r0, #8
    dbd6:	71a0      	strb	r0, [r4, #6]
    dbd8:	7a08      	ldrb	r0, [r1, #8]
    dbda:	71e0      	strb	r0, [r4, #7]
    dbdc:	2006      	movs	r0, #6
    dbde:	e7e7      	b.n	dbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dbe0:	7025      	strb	r5, [r4, #0]
    dbe2:	20a1      	movs	r0, #161	; 0xa1
    dbe4:	70a0      	strb	r0, [r4, #2]
    dbe6:	7908      	ldrb	r0, [r1, #4]
    dbe8:	70e0      	strb	r0, [r4, #3]
    dbea:	7948      	ldrb	r0, [r1, #5]
    dbec:	7120      	strb	r0, [r4, #4]
    dbee:	2000      	movs	r0, #0
    dbf0:	7160      	strb	r0, [r4, #5]
    dbf2:	2004      	movs	r0, #4
    dbf4:	e7dc      	b.n	dbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dbf6:	7025      	strb	r5, [r4, #0]
    dbf8:	20a2      	movs	r0, #162	; 0xa2
    dbfa:	70a0      	strb	r0, [r4, #2]
    dbfc:	7908      	ldrb	r0, [r1, #4]
    dbfe:	70e0      	strb	r0, [r4, #3]
    dc00:	8888      	ldrh	r0, [r1, #4]
    dc02:	0a00      	lsrs	r0, r0, #8
    dc04:	7120      	strb	r0, [r4, #4]
    dc06:	7988      	ldrb	r0, [r1, #6]
    dc08:	7160      	strb	r0, [r4, #5]
    dc0a:	88c8      	ldrh	r0, [r1, #6]
    dc0c:	0a00      	lsrs	r0, r0, #8
    dc0e:	71a0      	strb	r0, [r4, #6]
    dc10:	7a08      	ldrb	r0, [r1, #8]
    dc12:	71e0      	strb	r0, [r4, #7]
    dc14:	8908      	ldrh	r0, [r1, #8]
    dc16:	0a00      	lsrs	r0, r0, #8
    dc18:	7220      	strb	r0, [r4, #8]
    dc1a:	7a88      	ldrb	r0, [r1, #10]
    dc1c:	7260      	strb	r0, [r4, #9]
    dc1e:	8948      	ldrh	r0, [r1, #10]
    dc20:	0a00      	lsrs	r0, r0, #8
    dc22:	72a0      	strb	r0, [r4, #10]
    dc24:	7b08      	ldrb	r0, [r1, #12]
    dc26:	72e0      	strb	r0, [r4, #11]
    dc28:	8988      	ldrh	r0, [r1, #12]
    dc2a:	0a00      	lsrs	r0, r0, #8
    dc2c:	7320      	strb	r0, [r4, #12]
    dc2e:	200b      	movs	r0, #11
    dc30:	e7be      	b.n	dbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dc32:	7025      	strb	r5, [r4, #0]
    dc34:	20a3      	movs	r0, #163	; 0xa3
    dc36:	70a0      	strb	r0, [r4, #2]
    dc38:	7908      	ldrb	r0, [r1, #4]
    dc3a:	70e0      	strb	r0, [r4, #3]
    dc3c:	8888      	ldrh	r0, [r1, #4]
    dc3e:	0a00      	lsrs	r0, r0, #8
    dc40:	7120      	strb	r0, [r4, #4]
    dc42:	7988      	ldrb	r0, [r1, #6]
    dc44:	7160      	strb	r0, [r4, #5]
    dc46:	79c8      	ldrb	r0, [r1, #7]
    dc48:	71a0      	strb	r0, [r4, #6]
    dc4a:	2005      	movs	r0, #5
    dc4c:	e7b0      	b.n	dbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dc4e:	7022      	strb	r2, [r4, #0]
    dc50:	f884 e002 	strb.w	lr, [r4, #2]
    dc54:	7908      	ldrb	r0, [r1, #4]
    dc56:	70e0      	strb	r0, [r4, #3]
    dc58:	7948      	ldrb	r0, [r1, #5]
    dc5a:	7120      	strb	r0, [r4, #4]
    dc5c:	f8d1 0006 	ldr.w	r0, [r1, #6]
    dc60:	f8c4 0005 	str.w	r0, [r4, #5]
    dc64:	8948      	ldrh	r0, [r1, #10]
    dc66:	f8a4 0009 	strh.w	r0, [r4, #9]
    dc6a:	e020      	b.n	dcae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    dc6c:	7025      	strb	r5, [r4, #0]
    dc6e:	20a4      	movs	r0, #164	; 0xa4
    dc70:	70a0      	strb	r0, [r4, #2]
    dc72:	7908      	ldrb	r0, [r1, #4]
    dc74:	70e0      	strb	r0, [r4, #3]
    dc76:	8888      	ldrh	r0, [r1, #4]
    dc78:	0a00      	lsrs	r0, r0, #8
    dc7a:	7120      	strb	r0, [r4, #4]
    dc7c:	7988      	ldrb	r0, [r1, #6]
    dc7e:	7160      	strb	r0, [r4, #5]
    dc80:	79c8      	ldrb	r0, [r1, #7]
    dc82:	71a0      	strb	r0, [r4, #6]
    dc84:	2007      	movs	r0, #7
    dc86:	e793      	b.n	dbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dc88:	7025      	strb	r5, [r4, #0]
    dc8a:	2080      	movs	r0, #128	; 0x80
    dc8c:	70a0      	strb	r0, [r4, #2]
    dc8e:	888a      	ldrh	r2, [r1, #4]
    dc90:	f8a4 2003 	strh.w	r2, [r4, #3]
    dc94:	88ca      	ldrh	r2, [r1, #6]
    dc96:	f8a4 2005 	strh.w	r2, [r4, #5]
    dc9a:	7a0a      	ldrb	r2, [r1, #8]
    dc9c:	71e2      	strb	r2, [r4, #7]
    dc9e:	7a4a      	ldrb	r2, [r1, #9]
    dca0:	8122      	strh	r2, [r4, #8]
    dca2:	7a8a      	ldrb	r2, [r1, #10]
    dca4:	72a2      	strb	r2, [r4, #10]
    dca6:	7ac9      	ldrb	r1, [r1, #11]
    dca8:	f001 0101 	and.w	r1, r1, #1
    dcac:	72e1      	strb	r1, [r4, #11]
    dcae:	200a      	movs	r0, #10
    dcb0:	e77e      	b.n	dbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>

0000dcb2 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    dcb2:	223e      	movs	r2, #62	; 0x3e
    dcb4:	7002      	strb	r2, [r0, #0]
    dcb6:	2201      	movs	r2, #1
    dcb8:	7082      	strb	r2, [r0, #2]
    dcba:	790a      	ldrb	r2, [r1, #4]
    dcbc:	70c2      	strb	r2, [r0, #3]
    dcbe:	798a      	ldrb	r2, [r1, #6]
    dcc0:	7102      	strb	r2, [r0, #4]
    dcc2:	88ca      	ldrh	r2, [r1, #6]
    dcc4:	0a12      	lsrs	r2, r2, #8
    dcc6:	7142      	strb	r2, [r0, #5]
    dcc8:	7a0a      	ldrb	r2, [r1, #8]
    dcca:	7182      	strb	r2, [r0, #6]
    dccc:	7a4a      	ldrb	r2, [r1, #9]
    dcce:	71c2      	strb	r2, [r0, #7]
    dcd0:	f8d1 200a 	ldr.w	r2, [r1, #10]
    dcd4:	6082      	str	r2, [r0, #8]
    dcd6:	89ca      	ldrh	r2, [r1, #14]
    dcd8:	8182      	strh	r2, [r0, #12]
    dcda:	7c0a      	ldrb	r2, [r1, #16]
    dcdc:	7382      	strb	r2, [r0, #14]
    dcde:	8a0a      	ldrh	r2, [r1, #16]
    dce0:	0a12      	lsrs	r2, r2, #8
    dce2:	73c2      	strb	r2, [r0, #15]
    dce4:	7c8a      	ldrb	r2, [r1, #18]
    dce6:	7402      	strb	r2, [r0, #16]
    dce8:	8a4a      	ldrh	r2, [r1, #18]
    dcea:	0a12      	lsrs	r2, r2, #8
    dcec:	7442      	strb	r2, [r0, #17]
    dcee:	7d0a      	ldrb	r2, [r1, #20]
    dcf0:	7482      	strb	r2, [r0, #18]
    dcf2:	8a8a      	ldrh	r2, [r1, #20]
    dcf4:	0a12      	lsrs	r2, r2, #8
    dcf6:	74c2      	strb	r2, [r0, #19]
    dcf8:	7d89      	ldrb	r1, [r1, #22]
    dcfa:	7501      	strb	r1, [r0, #20]
    dcfc:	2013      	movs	r0, #19
    dcfe:	4770      	bx	lr

0000dd00 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    dd00:	223e      	movs	r2, #62	; 0x3e
    dd02:	7002      	strb	r2, [r0, #0]
    dd04:	2201      	movs	r2, #1
    dd06:	7082      	strb	r2, [r0, #2]
    dd08:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    dd0c:	70c2      	strb	r2, [r0, #3]
    dd0e:	788a      	ldrb	r2, [r1, #2]
    dd10:	7102      	strb	r2, [r0, #4]
    dd12:	884a      	ldrh	r2, [r1, #2]
    dd14:	0a12      	lsrs	r2, r2, #8
    dd16:	7142      	strb	r2, [r0, #5]
    dd18:	790a      	ldrb	r2, [r1, #4]
    dd1a:	7182      	strb	r2, [r0, #6]
    dd1c:	794a      	ldrb	r2, [r1, #5]
    dd1e:	71c2      	strb	r2, [r0, #7]
    dd20:	f8d1 2006 	ldr.w	r2, [r1, #6]
    dd24:	6082      	str	r2, [r0, #8]
    dd26:	894a      	ldrh	r2, [r1, #10]
    dd28:	8182      	strh	r2, [r0, #12]
    dd2a:	7e0a      	ldrb	r2, [r1, #24]
    dd2c:	7382      	strb	r2, [r0, #14]
    dd2e:	8b0a      	ldrh	r2, [r1, #24]
    dd30:	0a12      	lsrs	r2, r2, #8
    dd32:	73c2      	strb	r2, [r0, #15]
    dd34:	7e8a      	ldrb	r2, [r1, #26]
    dd36:	7402      	strb	r2, [r0, #16]
    dd38:	8b4a      	ldrh	r2, [r1, #26]
    dd3a:	0a12      	lsrs	r2, r2, #8
    dd3c:	7442      	strb	r2, [r0, #17]
    dd3e:	7f0a      	ldrb	r2, [r1, #28]
    dd40:	7482      	strb	r2, [r0, #18]
    dd42:	8b8a      	ldrh	r2, [r1, #28]
    dd44:	0a12      	lsrs	r2, r2, #8
    dd46:	74c2      	strb	r2, [r0, #19]
    dd48:	7f89      	ldrb	r1, [r1, #30]
    dd4a:	7501      	strb	r1, [r0, #20]
    dd4c:	2113      	movs	r1, #19
    dd4e:	7041      	strb	r1, [r0, #1]
    dd50:	4608      	mov	r0, r1
    dd52:	4770      	bx	lr

0000dd54 <sdc_hci_data_get>:
    dd54:	b510      	push	{r4, lr}
    dd56:	b120      	cbz	r0, dd62 <sdc_hci_data_get+0xe>
    dd58:	f7ff fd11 	bl	d77e <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    dd5c:	b120      	cbz	r0, dd68 <sdc_hci_data_get+0x14>
    dd5e:	2000      	movs	r0, #0
    dd60:	bd10      	pop	{r4, pc}
    dd62:	f06f 0015 	mvn.w	r0, #21
    dd66:	bd10      	pop	{r4, pc}
    dd68:	f06f 0022 	mvn.w	r0, #34	; 0x22
    dd6c:	bd10      	pop	{r4, pc}

0000dd6e <sdc_hci_data_put>:
    dd6e:	b510      	push	{r4, lr}
    dd70:	f06f 0415 	mvn.w	r4, #21
    dd74:	b120      	cbz	r0, dd80 <sdc_hci_data_put+0x12>
    dd76:	f7ff fd10 	bl	d79a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    dd7a:	b108      	cbz	r0, dd80 <sdc_hci_data_put+0x12>
    dd7c:	2000      	movs	r0, #0
    dd7e:	bd10      	pop	{r4, pc}
    dd80:	4620      	mov	r0, r4
    dd82:	bd10      	pop	{r4, pc}

0000dd84 <sdc_hci_evt_get>:
    dd84:	b510      	push	{r4, lr}
    dd86:	b120      	cbz	r0, dd92 <sdc_hci_evt_get+0xe>
    dd88:	f7ff fd10 	bl	d7ac <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    dd8c:	b120      	cbz	r0, dd98 <sdc_hci_evt_get+0x14>
    dd8e:	2000      	movs	r0, #0
    dd90:	bd10      	pop	{r4, pc}
    dd92:	f06f 0015 	mvn.w	r0, #21
    dd96:	bd10      	pop	{r4, pc}
    dd98:	f06f 0022 	mvn.w	r0, #34	; 0x22
    dd9c:	bd10      	pop	{r4, pc}

0000dd9e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    dd9e:	f002 b8cb 	b.w	ff38 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000dda2 <sdc_hci_cmd_cb_read_transmit_power_level>:
    dda2:	f002 b90a 	b.w	ffba <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000dda6 <sdc_hci_cmd_cb_set_event_mask>:
    dda6:	b510      	push	{r4, lr}
    dda8:	f7f7 f938 	bl	501c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    ddac:	2000      	movs	r0, #0
    ddae:	bd10      	pop	{r4, pc}

0000ddb0 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    ddb0:	b510      	push	{r4, lr}
    ddb2:	f7f7 f941 	bl	5038 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    ddb6:	2000      	movs	r0, #0
    ddb8:	bd10      	pop	{r4, pc}

0000ddba <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    ddba:	f002 b91a 	b.w	fff2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000ddbe <sdc_hci_cmd_vs_conn_event_extend>:
    ddbe:	b508      	push	{r3, lr}
    ddc0:	7800      	ldrb	r0, [r0, #0]
    ddc2:	f88d 0000 	strb.w	r0, [sp]
    ddc6:	4668      	mov	r0, sp
    ddc8:	f002 f888 	bl	fedc <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    ddcc:	bd08      	pop	{r3, pc}

0000ddce <sdc_hci_cmd_vs_conn_update>:
    ddce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ddd0:	2100      	movs	r1, #0
    ddd2:	9100      	str	r1, [sp, #0]
    ddd4:	9101      	str	r1, [sp, #4]
    ddd6:	9102      	str	r1, [sp, #8]
    ddd8:	9103      	str	r1, [sp, #12]
    ddda:	f8d0 1002 	ldr.w	r1, [r0, #2]
    ddde:	f641 524c 	movw	r2, #7500	; 0x1d4c
    dde2:	4291      	cmp	r1, r2
    dde4:	d304      	bcc.n	ddf0 <sdc_hci_cmd_vs_conn_update+0x22>
    dde6:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ddea:	fbb1 f1f2 	udiv	r1, r1, r2
    ddee:	e005      	b.n	ddfc <sdc_hci_cmd_vs_conn_update+0x2e>
    ddf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ddf4:	fbb1 f1f2 	udiv	r1, r1, r2
    ddf8:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    ddfc:	8802      	ldrh	r2, [r0, #0]
    ddfe:	b289      	uxth	r1, r1
    de00:	f8ad 2000 	strh.w	r2, [sp]
    de04:	f8ad 1002 	strh.w	r1, [sp, #2]
    de08:	f8ad 1004 	strh.w	r1, [sp, #4]
    de0c:	88c1      	ldrh	r1, [r0, #6]
    de0e:	f8ad 1006 	strh.w	r1, [sp, #6]
    de12:	8900      	ldrh	r0, [r0, #8]
    de14:	f8ad 0008 	strh.w	r0, [sp, #8]
    de18:	4668      	mov	r0, sp
    de1a:	f001 fe3e 	bl	fa9a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    de1e:	b004      	add	sp, #16
    de20:	bd10      	pop	{r4, pc}

0000de22 <sdc_hci_cmd_vs_event_length_set>:
    de22:	f7fd be39 	b.w	ba98 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000de26 <sdc_hci_cmd_vs_llpm_mode_set>:
    de26:	2001      	movs	r0, #1
    de28:	4770      	bx	lr

0000de2a <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    de2a:	7800      	ldrb	r0, [r0, #0]
    de2c:	b100      	cbz	r0, de30 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    de2e:	2001      	movs	r0, #1
    de30:	f002 b82c 	b.w	fe8c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000de34 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    de34:	b570      	push	{r4, r5, r6, lr}
    de36:	4605      	mov	r5, r0
    de38:	2210      	movs	r2, #16
    de3a:	2100      	movs	r1, #0
    de3c:	f7ff fbee 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    de40:	2210      	movs	r2, #16
    de42:	2100      	movs	r1, #0
    de44:	f105 0010 	add.w	r0, r5, #16
    de48:	f7ff fbe8 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    de4c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    de50:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    de54:	1c40      	adds	r0, r0, #1
    de56:	d10b      	bne.n	de70 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    de58:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    de5c:	1c40      	adds	r0, r0, #1
    de5e:	d107      	bne.n	de70 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    de60:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    de64:	1c40      	adds	r0, r0, #1
    de66:	d103      	bne.n	de70 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    de68:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    de6c:	1c40      	adds	r0, r0, #1
    de6e:	d00b      	beq.n	de88 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    de70:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    de74:	6128      	str	r0, [r5, #16]
    de76:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    de7a:	6168      	str	r0, [r5, #20]
    de7c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    de80:	61a8      	str	r0, [r5, #24]
    de82:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    de86:	61e8      	str	r0, [r5, #28]
    de88:	2000      	movs	r0, #0
    de8a:	f7f7 fdb7 	bl	59fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    de8e:	b918      	cbnz	r0, de98 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    de90:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    de94:	07c0      	lsls	r0, r0, #31
    de96:	d118      	bne.n	deca <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    de98:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    de9c:	1c40      	adds	r0, r0, #1
    de9e:	d10b      	bne.n	deb8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    dea0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    dea4:	1c40      	adds	r0, r0, #1
    dea6:	d107      	bne.n	deb8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    dea8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    deac:	1c40      	adds	r0, r0, #1
    deae:	d103      	bne.n	deb8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    deb0:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    deb4:	1c40      	adds	r0, r0, #1
    deb6:	d008      	beq.n	deca <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    deb8:	f854 0f90 	ldr.w	r0, [r4, #144]!
    debc:	6028      	str	r0, [r5, #0]
    debe:	6860      	ldr	r0, [r4, #4]
    dec0:	6068      	str	r0, [r5, #4]
    dec2:	68a0      	ldr	r0, [r4, #8]
    dec4:	60a8      	str	r0, [r5, #8]
    dec6:	68e0      	ldr	r0, [r4, #12]
    dec8:	60e8      	str	r0, [r5, #12]
    deca:	2000      	movs	r0, #0
    decc:	bd70      	pop	{r4, r5, r6, pc}

0000dece <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    dece:	b570      	push	{r4, r5, r6, lr}
    ded0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    ded4:	4604      	mov	r4, r0
    ded6:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    deda:	1c40      	adds	r0, r0, #1
    dedc:	d105      	bne.n	deea <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    dede:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    dee2:	43c0      	mvns	r0, r0
    dee4:	0400      	lsls	r0, r0, #16
    dee6:	0c00      	lsrs	r0, r0, #16
    dee8:	d03a      	beq.n	df60 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    deea:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    deee:	07c0      	lsls	r0, r0, #31
    def0:	d036      	beq.n	df60 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    def2:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    def6:	f8c4 0001 	str.w	r0, [r4, #1]
    defa:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    defe:	f8a4 0005 	strh.w	r0, [r4, #5]
    df02:	79a0      	ldrb	r0, [r4, #6]
    df04:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    df08:	71a0      	strb	r0, [r4, #6]
    df0a:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    df0e:	1c40      	adds	r0, r0, #1
    df10:	d00f      	beq.n	df32 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    df12:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    df16:	1c40      	adds	r0, r0, #1
    df18:	d00b      	beq.n	df32 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    df1a:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    df1e:	1c40      	adds	r0, r0, #1
    df20:	d007      	beq.n	df32 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    df22:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    df26:	1c40      	adds	r0, r0, #1
    df28:	d003      	beq.n	df32 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    df2a:	2000      	movs	r0, #0
    df2c:	f7f7 fd66 	bl	59fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    df30:	b140      	cbz	r0, df44 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    df32:	2210      	movs	r2, #16
    df34:	2100      	movs	r1, #0
    df36:	1de0      	adds	r0, r4, #7
    df38:	f7ff fb70 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    df3c:	2001      	movs	r0, #1
    df3e:	7020      	strb	r0, [r4, #0]
    df40:	2000      	movs	r0, #0
    df42:	bd70      	pop	{r4, r5, r6, pc}
    df44:	f855 0f90 	ldr.w	r0, [r5, #144]!
    df48:	f8c4 0007 	str.w	r0, [r4, #7]
    df4c:	6868      	ldr	r0, [r5, #4]
    df4e:	f8c4 000b 	str.w	r0, [r4, #11]
    df52:	68a8      	ldr	r0, [r5, #8]
    df54:	f8c4 000f 	str.w	r0, [r4, #15]
    df58:	68e8      	ldr	r0, [r5, #12]
    df5a:	f8c4 0013 	str.w	r0, [r4, #19]
    df5e:	e7ed      	b.n	df3c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    df60:	2000      	movs	r0, #0
    df62:	e7ec      	b.n	df3e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000df64 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    df64:	f001 bfac 	b.w	fec0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000df68 <sdc_hci_cmd_ip_read_bd_addr>:
    df68:	f001 bff7 	b.w	ff5a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000df6c <sdc_hci_cmd_ip_read_local_version_information>:
    df6c:	f7fd bde0 	b.w	bb30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000df70 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    df70:	f001 bd4a 	b.w	fa08 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000df74 <sdc_hci_cmd_le_add_device_to_white_list>:
    df74:	f001 bd63 	b.w	fa3e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000df78 <sdc_hci_cmd_le_clear_resolving_list>:
    df78:	f001 bd78 	b.w	fa6c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000df7c <sdc_hci_cmd_le_clear_white_list>:
    df7c:	f001 bd83 	b.w	fa86 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000df80 <sdc_hci_cmd_le_conn_update>:
    df80:	f001 bd8b 	b.w	fa9a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000df84 <sdc_hci_cmd_le_create_conn>:
    df84:	f7fd bb02 	b.w	b58c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000df88 <sdc_hci_cmd_le_create_conn_cancel>:
    df88:	f7fd bb5a 	b.w	b640 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000df8c <sdc_hci_cmd_le_enable_encryption>:
    df8c:	f001 bf35 	b.w	fdfa <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000df90 <sdc_hci_cmd_le_encrypt>:
    df90:	f001 bdc5 	b.w	fb1e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000df94 <sdc_hci_cmd_le_rand>:
    df94:	f001 bdcc 	b.w	fb30 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000df98 <sdc_hci_cmd_le_read_buffer_size>:
    df98:	f7fd bb7e 	b.w	b698 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000df9c <sdc_hci_cmd_le_read_channel_map>:
    df9c:	f7fd bb86 	b.w	b6ac <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000dfa0 <sdc_hci_cmd_le_read_max_data_length>:
    dfa0:	f001 bdcc 	b.w	fb3c <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000dfa4 <sdc_hci_cmd_le_read_phy>:
    dfa4:	f001 bdda 	b.w	fb5c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000dfa8 <sdc_hci_cmd_le_read_remote_features>:
    dfa8:	f7fd bbaa 	b.w	b700 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000dfac <sdc_hci_cmd_le_read_resolving_list_size>:
    dfac:	f001 be01 	b.w	fbb2 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000dfb0 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    dfb0:	f7fd bbca 	b.w	b748 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000dfb4 <sdc_hci_cmd_le_read_transmit_power>:
    dfb4:	f001 be01 	b.w	fbba <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000dfb8 <sdc_hci_cmd_le_read_white_list_size>:
    dfb8:	f001 be08 	b.w	fbcc <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000dfbc <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    dfbc:	f001 be0a 	b.w	fbd4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000dfc0 <sdc_hci_cmd_le_remove_device_from_white_list>:
    dfc0:	f001 be21 	b.w	fc06 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000dfc4 <sdc_hci_cmd_le_set_address_resolution_enable>:
    dfc4:	f001 be34 	b.w	fc30 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000dfc8 <sdc_hci_cmd_le_set_data_length>:
    dfc8:	f001 be40 	b.w	fc4c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000dfcc <sdc_hci_cmd_le_set_default_phy>:
    dfcc:	f7fd bbcc 	b.w	b768 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000dfd0 <sdc_hci_cmd_le_set_event_mask>:
    dfd0:	b510      	push	{r4, lr}
    dfd2:	f7f7 f81d 	bl	5010 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    dfd6:	2000      	movs	r0, #0
    dfd8:	bd10      	pop	{r4, pc}

0000dfda <sdc_hci_cmd_le_set_host_channel_classification>:
    dfda:	f001 be5e 	b.w	fc9a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000dfde <sdc_hci_cmd_le_set_phy>:
    dfde:	f001 be7c 	b.w	fcda <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000dfe2 <sdc_hci_cmd_le_set_privacy_mode>:
    dfe2:	f001 be9a 	b.w	fd1a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000dfe6 <sdc_hci_cmd_le_set_random_address>:
    dfe6:	f001 beae 	b.w	fd46 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000dfea <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    dfea:	f001 beba 	b.w	fd62 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000dfee <sdc_hci_cmd_le_set_scan_enable>:
    dfee:	f001 bec1 	b.w	fd74 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000dff2 <sdc_hci_cmd_le_set_scan_params>:
    dff2:	f001 bed5 	b.w	fda0 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000dff6 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    dff6:	f001 bf32 	b.w	fe5e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000dffa <sdc_hci_cmd_lc_disconnect>:
    dffa:	f001 bcb4 	b.w	f966 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000dffe <sdc_hci_cmd_lc_read_remote_version_information>:
    dffe:	f001 bfb8 	b.w	ff72 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    e002:	b570      	push	{r4, r5, r6, lr}
    e004:	880b      	ldrh	r3, [r1, #0]
    e006:	7f04      	ldrb	r4, [r0, #28]
    e008:	f100 0524 	add.w	r5, r0, #36	; 0x24
    e00c:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    e010:	8802      	ldrh	r2, [r0, #0]
    e012:	4435      	add	r5, r6
    e014:	1da4      	adds	r4, r4, #6
    e016:	882d      	ldrh	r5, [r5, #0]
    e018:	4422      	add	r2, r4
    e01a:	b292      	uxth	r2, r2
    e01c:	4425      	add	r5, r4
    e01e:	1e54      	subs	r4, r2, #1
    e020:	442c      	add	r4, r5
    e022:	fb94 f4f2 	sdiv	r4, r4, r2
    e026:	fb02 6204 	mla	r2, r2, r4, r6
    e02a:	8840      	ldrh	r0, [r0, #2]
    e02c:	b292      	uxth	r2, r2
    e02e:	4290      	cmp	r0, r2
    e030:	d903      	bls.n	e03a <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    e032:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    e036:	4310      	orrs	r0, r2
    e038:	e002      	b.n	e040 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    e03a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    e03e:	4398      	bics	r0, r3
    e040:	8008      	strh	r0, [r1, #0]
    e042:	bd70      	pop	{r4, r5, r6, pc}
    e044:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    e048:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e04c:	429a      	cmp	r2, r3
    e04e:	d107      	bne.n	e060 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    e050:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    e054:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    e058:	4288      	cmp	r0, r1
    e05a:	d001      	beq.n	e060 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    e05c:	2001      	movs	r0, #1
    e05e:	4770      	bx	lr
    e060:	2000      	movs	r0, #0
    e062:	4770      	bx	lr

0000e064 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    e064:	b570      	push	{r4, r5, r6, lr}
    e066:	7f00      	ldrb	r0, [r0, #28]
    e068:	461c      	mov	r4, r3
    e06a:	1d80      	adds	r0, r0, #6
    e06c:	4408      	add	r0, r1
    e06e:	4613      	mov	r3, r2
    e070:	8809      	ldrh	r1, [r1, #0]
    e072:	9a04      	ldr	r2, [sp, #16]
    e074:	1cc9      	adds	r1, r1, #3
    e076:	b289      	uxth	r1, r1
    e078:	1915      	adds	r5, r2, r4
    e07a:	1ec0      	subs	r0, r0, #3
    e07c:	428d      	cmp	r5, r1
    e07e:	d805      	bhi.n	e08c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    e080:	1881      	adds	r1, r0, r2
    e082:	4622      	mov	r2, r4
    e084:	4618      	mov	r0, r3
    e086:	f7ff fa4f 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e08a:	e000      	b.n	e08e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    e08c:	2400      	movs	r4, #0
    e08e:	4620      	mov	r0, r4
    e090:	bd70      	pop	{r4, r5, r6, pc}

0000e092 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    e092:	b570      	push	{r4, r5, r6, lr}
    e094:	7f00      	ldrb	r0, [r0, #28]
    e096:	461c      	mov	r4, r3
    e098:	1d80      	adds	r0, r0, #6
    e09a:	4408      	add	r0, r1
    e09c:	4613      	mov	r3, r2
    e09e:	8809      	ldrh	r1, [r1, #0]
    e0a0:	9a04      	ldr	r2, [sp, #16]
    e0a2:	1cc9      	adds	r1, r1, #3
    e0a4:	b289      	uxth	r1, r1
    e0a6:	1915      	adds	r5, r2, r4
    e0a8:	1ec0      	subs	r0, r0, #3
    e0aa:	428d      	cmp	r5, r1
    e0ac:	d805      	bhi.n	e0ba <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    e0ae:	4410      	add	r0, r2
    e0b0:	4622      	mov	r2, r4
    e0b2:	4619      	mov	r1, r3
    e0b4:	f7ff fa38 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e0b8:	e000      	b.n	e0bc <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    e0ba:	2400      	movs	r4, #0
    e0bc:	4620      	mov	r0, r4
    e0be:	bd70      	pop	{r4, r5, r6, pc}

0000e0c0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    e0c0:	8881      	ldrh	r1, [r0, #4]
    e0c2:	88c0      	ldrh	r0, [r0, #6]
    e0c4:	4288      	cmp	r0, r1
    e0c6:	d101      	bne.n	e0cc <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    e0c8:	2001      	movs	r0, #1
    e0ca:	4770      	bx	lr
    e0cc:	2000      	movs	r0, #0
    e0ce:	4770      	bx	lr

0000e0d0 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    e0d0:	8881      	ldrh	r1, [r0, #4]
    e0d2:	8900      	ldrh	r0, [r0, #8]
    e0d4:	4288      	cmp	r0, r1
    e0d6:	d101      	bne.n	e0dc <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    e0d8:	2001      	movs	r0, #1
    e0da:	4770      	bx	lr
    e0dc:	2000      	movs	r0, #0
    e0de:	4770      	bx	lr

0000e0e0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    e0e0:	b570      	push	{r4, r5, r6, lr}
    e0e2:	4604      	mov	r4, r0
    e0e4:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e0e8:	8880      	ldrh	r0, [r0, #4]
    e0ea:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e0ee:	4401      	add	r1, r0
    e0f0:	8a20      	ldrh	r0, [r4, #16]
    e0f2:	2800      	cmp	r0, #0
    e0f4:	d01a      	beq.n	e12c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    e0f6:	89a2      	ldrh	r2, [r4, #12]
    e0f8:	2500      	movs	r5, #0
    e0fa:	4410      	add	r0, r2
    e0fc:	b280      	uxth	r0, r0
    e0fe:	81a0      	strh	r0, [r4, #12]
    e100:	880a      	ldrh	r2, [r1, #0]
    e102:	4290      	cmp	r0, r2
    e104:	d905      	bls.n	e112 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    e106:	f240 1163 	movw	r1, #355	; 0x163
    e10a:	f04f 0014 	mov.w	r0, #20
    e10e:	f7f6 fe03 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e112:	d109      	bne.n	e128 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    e114:	69a0      	ldr	r0, [r4, #24]
    e116:	b108      	cbz	r0, e11c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    e118:	7f40      	ldrb	r0, [r0, #29]
    e11a:	7088      	strb	r0, [r1, #2]
    e11c:	f104 0104 	add.w	r1, r4, #4
    e120:	4620      	mov	r0, r4
    e122:	f7ff ff6e 	bl	e002 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e126:	81a5      	strh	r5, [r4, #12]
    e128:	8225      	strh	r5, [r4, #16]
    e12a:	2001      	movs	r0, #1
    e12c:	bd70      	pop	{r4, r5, r6, pc}

0000e12e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    e12e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e130:	4604      	mov	r4, r0
    e132:	f100 0324 	add.w	r3, r0, #36	; 0x24
    e136:	88c0      	ldrh	r0, [r0, #6]
    e138:	460e      	mov	r6, r1
    e13a:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    e13e:	8a60      	ldrh	r0, [r4, #18]
    e140:	19d9      	adds	r1, r3, r7
    e142:	b108      	cbz	r0, e148 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    e144:	42b0      	cmp	r0, r6
    e146:	d201      	bcs.n	e14c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    e148:	2000      	movs	r0, #0
    e14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e14c:	89e0      	ldrh	r0, [r4, #14]
    e14e:	2500      	movs	r5, #0
    e150:	b140      	cbz	r0, e164 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    e152:	f8b1 c000 	ldrh.w	ip, [r1]
    e156:	4560      	cmp	r0, ip
    e158:	d008      	beq.n	e16c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    e15a:	f240 214b 	movw	r1, #587	; 0x24b
    e15e:	2014      	movs	r0, #20
    e160:	f7f6 fdda 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e164:	7f60      	ldrb	r0, [r4, #29]
    e166:	7088      	strb	r0, [r1, #2]
    e168:	800d      	strh	r5, [r1, #0]
    e16a:	e00e      	b.n	e18a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    e16c:	f894 c01c 	ldrb.w	ip, [r4, #28]
    e170:	4418      	add	r0, r3
    e172:	f10c 0c06 	add.w	ip, ip, #6
    e176:	44bc      	add	ip, r7
    e178:	4460      	add	r0, ip
    e17a:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    e17e:	f820 cc03 	strh.w	ip, [r0, #-3]
    e182:	f894 c020 	ldrb.w	ip, [r4, #32]
    e186:	f800 cc01 	strb.w	ip, [r0, #-1]
    e18a:	89e0      	ldrh	r0, [r4, #14]
    e18c:	4430      	add	r0, r6
    e18e:	81e0      	strh	r0, [r4, #14]
    e190:	8808      	ldrh	r0, [r1, #0]
    e192:	4430      	add	r0, r6
    e194:	8008      	strh	r0, [r1, #0]
    e196:	b19a      	cbz	r2, e1c0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    e198:	1da1      	adds	r1, r4, #6
    e19a:	4620      	mov	r0, r4
    e19c:	f7ff ff31 	bl	e002 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e1a0:	81e5      	strh	r5, [r4, #14]
    e1a2:	7f60      	ldrb	r0, [r4, #29]
    e1a4:	1c40      	adds	r0, r0, #1
    e1a6:	7760      	strb	r0, [r4, #29]
    e1a8:	7da0      	ldrb	r0, [r4, #22]
    e1aa:	f88d 0000 	strb.w	r0, [sp]
    e1ae:	9800      	ldr	r0, [sp, #0]
    e1b0:	9000      	str	r0, [sp, #0]
    e1b2:	f89d 0000 	ldrb.w	r0, [sp]
    e1b6:	b178      	cbz	r0, e1d8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e1b8:	88e0      	ldrh	r0, [r4, #6]
    e1ba:	82a0      	strh	r0, [r4, #20]
    e1bc:	75a5      	strb	r5, [r4, #22]
    e1be:	e00b      	b.n	e1d8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e1c0:	7f20      	ldrb	r0, [r4, #28]
    e1c2:	89e1      	ldrh	r1, [r4, #14]
    e1c4:	1d80      	adds	r0, r0, #6
    e1c6:	4438      	add	r0, r7
    e1c8:	4419      	add	r1, r3
    e1ca:	4408      	add	r0, r1
    e1cc:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    e1d0:	83e1      	strh	r1, [r4, #30]
    e1d2:	7880      	ldrb	r0, [r0, #2]
    e1d4:	f884 0020 	strb.w	r0, [r4, #32]
    e1d8:	8265      	strh	r5, [r4, #18]
    e1da:	2001      	movs	r0, #1
    e1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e1de <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    e1de:	1cc0      	adds	r0, r0, #3
    e1e0:	4770      	bx	lr

0000e1e2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    e1e2:	b510      	push	{r4, lr}
    e1e4:	88c2      	ldrh	r2, [r0, #6]
    e1e6:	8943      	ldrh	r3, [r0, #10]
    e1e8:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
    e1ec:	f423 4400 	bic.w	r4, r3, #32768	; 0x8000
    e1f0:	1a61      	subs	r1, r4, r1
    e1f2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    e1f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    e1fa:	429a      	cmp	r2, r3
    e1fc:	d101      	bne.n	e202 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    e1fe:	8842      	ldrh	r2, [r0, #2]
    e200:	4411      	add	r1, r2
    e202:	7f02      	ldrb	r2, [r0, #28]
    e204:	8800      	ldrh	r0, [r0, #0]
    e206:	4410      	add	r0, r2
    e208:	1d80      	adds	r0, r0, #6
    e20a:	b280      	uxth	r0, r0
    e20c:	fb91 f0f0 	sdiv	r0, r1, r0
    e210:	b280      	uxth	r0, r0
    e212:	bd10      	pop	{r4, pc}

0000e214 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    e214:	b510      	push	{r4, lr}
    e216:	4604      	mov	r4, r0
    e218:	88c0      	ldrh	r0, [r0, #6]
    e21a:	88a1      	ldrh	r1, [r4, #4]
    e21c:	4281      	cmp	r1, r0
    e21e:	d007      	beq.n	e230 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e220:	89a0      	ldrh	r0, [r4, #12]
    e222:	b928      	cbnz	r0, e230 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e224:	8a20      	ldrh	r0, [r4, #16]
    e226:	b918      	cbnz	r0, e230 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e228:	88a0      	ldrh	r0, [r4, #4]
    e22a:	8aa1      	ldrh	r1, [r4, #20]
    e22c:	4288      	cmp	r0, r1
    e22e:	d101      	bne.n	e234 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    e230:	2000      	movs	r0, #0
    e232:	bd10      	pop	{r4, pc}
    e234:	1d21      	adds	r1, r4, #4
    e236:	4620      	mov	r0, r4
    e238:	f7ff fee3 	bl	e002 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e23c:	2000      	movs	r0, #0
    e23e:	8220      	strh	r0, [r4, #16]
    e240:	2001      	movs	r0, #1
    e242:	bd10      	pop	{r4, pc}

0000e244 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    e244:	b510      	push	{r4, lr}
    e246:	4604      	mov	r4, r0
    e248:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e24c:	88c0      	ldrh	r0, [r0, #6]
    e24e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e252:	4402      	add	r2, r0
    e254:	8820      	ldrh	r0, [r4, #0]
    e256:	2845      	cmp	r0, #69	; 0x45
    e258:	d200      	bcs.n	e25c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    e25a:	2045      	movs	r0, #69	; 0x45
    e25c:	4288      	cmp	r0, r1
    e25e:	d204      	bcs.n	e26a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    e260:	f240 1119 	movw	r1, #281	; 0x119
    e264:	2014      	movs	r0, #20
    e266:	f7f6 fd57 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e26a:	7de0      	ldrb	r0, [r4, #23]
    e26c:	2800      	cmp	r0, #0
    e26e:	d003      	beq.n	e278 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    e270:	8810      	ldrh	r0, [r2, #0]
    e272:	4288      	cmp	r0, r1
    e274:	d201      	bcs.n	e27a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    e276:	2000      	movs	r0, #0
    e278:	bd10      	pop	{r4, pc}
    e27a:	8011      	strh	r1, [r2, #0]
    e27c:	1da1      	adds	r1, r4, #6
    e27e:	4620      	mov	r0, r4
    e280:	f7ff febf 	bl	e002 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e284:	2000      	movs	r0, #0
    e286:	75e0      	strb	r0, [r4, #23]
    e288:	2001      	movs	r0, #1
    e28a:	bd10      	pop	{r4, pc}

0000e28c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    e28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e290:	8941      	ldrh	r1, [r0, #10]
    e292:	8886      	ldrh	r6, [r0, #4]
    e294:	4604      	mov	r4, r0
    e296:	2500      	movs	r5, #0
    e298:	f100 070a 	add.w	r7, r0, #10
    e29c:	e006      	b.n	e2ac <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    e29e:	4639      	mov	r1, r7
    e2a0:	4620      	mov	r0, r4
    e2a2:	f7ff feae 	bl	e002 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e2a6:	1c6d      	adds	r5, r5, #1
    e2a8:	8961      	ldrh	r1, [r4, #10]
    e2aa:	b2ad      	uxth	r5, r5
    e2ac:	42b1      	cmp	r1, r6
    e2ae:	d1f6      	bne.n	e29e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    e2b0:	4628      	mov	r0, r5
    e2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e2b6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    e2b6:	b530      	push	{r4, r5, lr}
    e2b8:	88c4      	ldrh	r4, [r0, #6]
    e2ba:	8881      	ldrh	r1, [r0, #4]
    e2bc:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e2c0:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e2c4:	4413      	add	r3, r2
    e2c6:	8882      	ldrh	r2, [r0, #4]
    e2c8:	8a85      	ldrh	r5, [r0, #20]
    e2ca:	42aa      	cmp	r2, r5
    e2cc:	d012      	beq.n	e2f4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e2ce:	42a1      	cmp	r1, r4
    e2d0:	d010      	beq.n	e2f4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e2d2:	8981      	ldrh	r1, [r0, #12]
    e2d4:	b971      	cbnz	r1, e2f4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e2d6:	6982      	ldr	r2, [r0, #24]
    e2d8:	b172      	cbz	r2, e2f8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e2da:	4610      	mov	r0, r2
    e2dc:	f7ff fef8 	bl	e0d0 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    e2e0:	b950      	cbnz	r0, e2f8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e2e2:	8910      	ldrh	r0, [r2, #8]
    e2e4:	3224      	adds	r2, #36	; 0x24
    e2e6:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e2ea:	4410      	add	r0, r2
    e2ec:	7899      	ldrb	r1, [r3, #2]
    e2ee:	7880      	ldrb	r0, [r0, #2]
    e2f0:	4288      	cmp	r0, r1
    e2f2:	d101      	bne.n	e2f8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e2f4:	2000      	movs	r0, #0
    e2f6:	bd30      	pop	{r4, r5, pc}
    e2f8:	4618      	mov	r0, r3
    e2fa:	bd30      	pop	{r4, r5, pc}

0000e2fc <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    e2fc:	8803      	ldrh	r3, [r0, #0]
    e2fe:	2b45      	cmp	r3, #69	; 0x45
    e300:	d200      	bcs.n	e304 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    e302:	2345      	movs	r3, #69	; 0x45
    e304:	8013      	strh	r3, [r2, #0]
    e306:	88c2      	ldrh	r2, [r0, #6]
    e308:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    e30c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e310:	441a      	add	r2, r3
    e312:	600a      	str	r2, [r1, #0]
    e314:	89c0      	ldrh	r0, [r0, #14]
    e316:	4770      	bx	lr

0000e318 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    e318:	7f00      	ldrb	r0, [r0, #28]
    e31a:	1d80      	adds	r0, r0, #6
    e31c:	4408      	add	r0, r1
    e31e:	1ec0      	subs	r0, r0, #3
    e320:	6010      	str	r0, [r2, #0]
    e322:	8808      	ldrh	r0, [r1, #0]
    e324:	4770      	bx	lr

0000e326 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    e326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e32a:	460e      	mov	r6, r1
    e32c:	88c1      	ldrh	r1, [r0, #6]
    e32e:	8902      	ldrh	r2, [r0, #8]
    e330:	4604      	mov	r4, r0
    e332:	f100 0824 	add.w	r8, r0, #36	; 0x24
    e336:	8800      	ldrh	r0, [r0, #0]
    e338:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    e33c:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    e340:	2845      	cmp	r0, #69	; 0x45
    e342:	d200      	bcs.n	e346 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    e344:	2045      	movs	r0, #69	; 0x45
    e346:	42b0      	cmp	r0, r6
    e348:	d203      	bcs.n	e352 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    e34a:	21db      	movs	r1, #219	; 0xdb
    e34c:	2014      	movs	r0, #20
    e34e:	f7f6 fce3 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e352:	4610      	mov	r0, r2
    e354:	f7ff fe76 	bl	e044 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e358:	b110      	cbz	r0, e360 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    e35a:	2000      	movs	r0, #0
    e35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e360:	42af      	cmp	r7, r5
    e362:	d908      	bls.n	e376 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e364:	7f21      	ldrb	r1, [r4, #28]
    e366:	1b78      	subs	r0, r7, r5
    e368:	1a40      	subs	r0, r0, r1
    e36a:	1f80      	subs	r0, r0, #6
    e36c:	4286      	cmp	r6, r0
    e36e:	dd02      	ble.n	e376 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e370:	2000      	movs	r0, #0
    e372:	75e0      	strb	r0, [r4, #23]
    e374:	e7f1      	b.n	e35a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    e376:	eb08 0005 	add.w	r0, r8, r5
    e37a:	2101      	movs	r1, #1
    e37c:	8006      	strh	r6, [r0, #0]
    e37e:	75e1      	strb	r1, [r4, #23]
    e380:	e7ec      	b.n	e35c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000e382 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    e382:	b538      	push	{r3, r4, r5, lr}
    e384:	88c4      	ldrh	r4, [r0, #6]
    e386:	8881      	ldrh	r1, [r0, #4]
    e388:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e38c:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e390:	441a      	add	r2, r3
    e392:	42a1      	cmp	r1, r4
    e394:	d010      	beq.n	e3b8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e396:	8983      	ldrh	r3, [r0, #12]
    e398:	8a05      	ldrh	r5, [r0, #16]
    e39a:	8812      	ldrh	r2, [r2, #0]
    e39c:	442b      	add	r3, r5
    e39e:	4293      	cmp	r3, r2
    e3a0:	d308      	bcc.n	e3b4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    e3a2:	f8ad 1000 	strh.w	r1, [sp]
    e3a6:	4669      	mov	r1, sp
    e3a8:	f7ff fe2b 	bl	e002 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e3ac:	f8bd 0000 	ldrh.w	r0, [sp]
    e3b0:	42a0      	cmp	r0, r4
    e3b2:	d001      	beq.n	e3b8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e3b4:	2001      	movs	r0, #1
    e3b6:	bd38      	pop	{r3, r4, r5, pc}
    e3b8:	2000      	movs	r0, #0
    e3ba:	bd38      	pop	{r3, r4, r5, pc}

0000e3bc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    e3bc:	b570      	push	{r4, r5, r6, lr}
    e3be:	88c6      	ldrh	r6, [r0, #6]
    e3c0:	8885      	ldrh	r5, [r0, #4]
    e3c2:	4603      	mov	r3, r0
    e3c4:	f100 0424 	add.w	r4, r0, #36	; 0x24
    e3c8:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    e3cc:	4420      	add	r0, r4
    e3ce:	42b5      	cmp	r5, r6
    e3d0:	d102      	bne.n	e3d8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    e3d2:	2000      	movs	r0, #0
    e3d4:	8218      	strh	r0, [r3, #16]
    e3d6:	bd70      	pop	{r4, r5, r6, pc}
    e3d8:	8804      	ldrh	r4, [r0, #0]
    e3da:	899d      	ldrh	r5, [r3, #12]
    e3dc:	7f1e      	ldrb	r6, [r3, #28]
    e3de:	1b64      	subs	r4, r4, r5
    e3e0:	4435      	add	r5, r6
    e3e2:	4428      	add	r0, r5
    e3e4:	880d      	ldrh	r5, [r1, #0]
    e3e6:	b2a4      	uxth	r4, r4
    e3e8:	1cc0      	adds	r0, r0, #3
    e3ea:	42a5      	cmp	r5, r4
    e3ec:	d900      	bls.n	e3f0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    e3ee:	800c      	strh	r4, [r1, #0]
    e3f0:	899c      	ldrh	r4, [r3, #12]
    e3f2:	b124      	cbz	r4, e3fe <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    e3f4:	2400      	movs	r4, #0
    e3f6:	7014      	strb	r4, [r2, #0]
    e3f8:	8809      	ldrh	r1, [r1, #0]
    e3fa:	8219      	strh	r1, [r3, #16]
    e3fc:	bd70      	pop	{r4, r5, r6, pc}
    e3fe:	2401      	movs	r4, #1
    e400:	e7f9      	b.n	e3f6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000e402 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    e402:	b508      	push	{r3, lr}
    e404:	8a81      	ldrh	r1, [r0, #20]
    e406:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e40a:	3aff      	subs	r2, #255	; 0xff
    e40c:	d008      	beq.n	e420 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    e40e:	7d82      	ldrb	r2, [r0, #22]
    e410:	f88d 2000 	strb.w	r2, [sp]
    e414:	9a00      	ldr	r2, [sp, #0]
    e416:	9200      	str	r2, [sp, #0]
    e418:	f89d 2000 	ldrb.w	r2, [sp]
    e41c:	b952      	cbnz	r2, e434 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e41e:	e004      	b.n	e42a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    e420:	f44f 7162 	mov.w	r1, #904	; 0x388
    e424:	2014      	movs	r0, #20
    e426:	f7f6 fc77 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e42a:	8880      	ldrh	r0, [r0, #4]
    e42c:	4281      	cmp	r1, r0
    e42e:	d101      	bne.n	e434 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e430:	2000      	movs	r0, #0
    e432:	bd08      	pop	{r3, pc}
    e434:	2001      	movs	r0, #1
    e436:	bd08      	pop	{r3, pc}

0000e438 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    e438:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e43c:	8281      	strh	r1, [r0, #20]
    e43e:	2100      	movs	r1, #0
    e440:	7581      	strb	r1, [r0, #22]
    e442:	4770      	bx	lr

0000e444 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    e444:	b510      	push	{r4, lr}
    e446:	8a81      	ldrh	r1, [r0, #20]
    e448:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e44c:	3aff      	subs	r2, #255	; 0xff
    e44e:	d004      	beq.n	e45a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    e450:	f44f 7159 	mov.w	r1, #868	; 0x364
    e454:	2014      	movs	r0, #20
    e456:	f7f6 fc5f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e45a:	88c1      	ldrh	r1, [r0, #6]
    e45c:	8281      	strh	r1, [r0, #20]
    e45e:	89c1      	ldrh	r1, [r0, #14]
    e460:	b109      	cbz	r1, e466 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    e462:	2101      	movs	r1, #1
    e464:	e000      	b.n	e468 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    e466:	2100      	movs	r1, #0
    e468:	7581      	strb	r1, [r0, #22]
    e46a:	bd10      	pop	{r4, pc}

0000e46c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    e46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e470:	461d      	mov	r5, r3
    e472:	4616      	mov	r6, r2
    e474:	9f06      	ldr	r7, [sp, #24]
    e476:	460b      	mov	r3, r1
    e478:	4604      	mov	r4, r0
    e47a:	463a      	mov	r2, r7
    e47c:	4629      	mov	r1, r5
    e47e:	4630      	mov	r0, r6
    e480:	f000 f84f 	bl	e522 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e484:	4283      	cmp	r3, r0
    e486:	d201      	bcs.n	e48c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    e488:	21a8      	movs	r1, #168	; 0xa8
    e48a:	e018      	b.n	e4be <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e48c:	1ce0      	adds	r0, r4, #3
    e48e:	f020 0103 	bic.w	r1, r0, #3
    e492:	4620      	mov	r0, r4
    e494:	42a1      	cmp	r1, r4
    e496:	d001      	beq.n	e49c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    e498:	21a9      	movs	r1, #169	; 0xa9
    e49a:	e010      	b.n	e4be <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e49c:	2224      	movs	r2, #36	; 0x24
    e49e:	2100      	movs	r1, #0
    e4a0:	f7ff f8bc 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e4a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e4a8:	82a0      	strh	r0, [r4, #20]
    e4aa:	19a8      	adds	r0, r5, r6
    e4ac:	1d80      	adds	r0, r0, #6
    e4ae:	4378      	muls	r0, r7
    e4b0:	b280      	uxth	r0, r0
    e4b2:	7725      	strb	r5, [r4, #28]
    e4b4:	8060      	strh	r0, [r4, #2]
    e4b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    e4ba:	d903      	bls.n	e4c4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    e4bc:	21af      	movs	r1, #175	; 0xaf
    e4be:	2014      	movs	r0, #20
    e4c0:	f7f6 fc2a 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4c4:	8026      	strh	r6, [r4, #0]
    e4c6:	2000      	movs	r0, #0
    e4c8:	7760      	strb	r0, [r4, #29]
    e4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e4ce <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    e4ce:	6181      	str	r1, [r0, #24]
    e4d0:	6188      	str	r0, [r1, #24]
    e4d2:	4770      	bx	lr

0000e4d4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    e4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4d8:	460b      	mov	r3, r1
    e4da:	4604      	mov	r4, r0
    e4dc:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e4e0:	8905      	ldrh	r5, [r0, #8]
    e4e2:	8946      	ldrh	r6, [r0, #10]
    e4e4:	8880      	ldrh	r0, [r0, #4]
    e4e6:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    e4ea:	4439      	add	r1, r7
    e4ec:	460f      	mov	r7, r1
    e4ee:	4285      	cmp	r5, r0
    e4f0:	d102      	bne.n	e4f8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    e4f2:	2000      	movs	r0, #0
    e4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4f8:	b10a      	cbz	r2, e4fe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    e4fa:	1cc8      	adds	r0, r1, #3
    e4fc:	6010      	str	r0, [r2, #0]
    e4fe:	b123      	cbz	r3, e50a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    e500:	7f22      	ldrb	r2, [r4, #28]
    e502:	1cf9      	adds	r1, r7, #3
    e504:	4618      	mov	r0, r3
    e506:	f7ff f80f 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e50a:	883f      	ldrh	r7, [r7, #0]
    e50c:	f104 0108 	add.w	r1, r4, #8
    e510:	4620      	mov	r0, r4
    e512:	f7ff fd76 	bl	e002 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e516:	42b5      	cmp	r5, r6
    e518:	d101      	bne.n	e51e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    e51a:	8920      	ldrh	r0, [r4, #8]
    e51c:	8160      	strh	r0, [r4, #10]
    e51e:	4638      	mov	r0, r7
    e520:	e7e8      	b.n	e4f4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000e522 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    e522:	4401      	add	r1, r0
    e524:	1d89      	adds	r1, r1, #6
    e526:	4351      	muls	r1, r2
    e528:	b28a      	uxth	r2, r1
    e52a:	2100      	movs	r1, #0
    e52c:	2845      	cmp	r0, #69	; 0x45
    e52e:	d201      	bcs.n	e534 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    e530:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    e534:	3224      	adds	r2, #36	; 0x24
    e536:	1850      	adds	r0, r2, r1
    e538:	b280      	uxth	r0, r0
    e53a:	4770      	bx	lr

0000e53c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    e53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e540:	4688      	mov	r8, r1
    e542:	88c1      	ldrh	r1, [r0, #6]
    e544:	4604      	mov	r4, r0
    e546:	8900      	ldrh	r0, [r0, #8]
    e548:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    e54c:	f104 0524 	add.w	r5, r4, #36	; 0x24
    e550:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    e554:	eb05 0906 	add.w	r9, r5, r6
    e558:	f7ff fd74 	bl	e044 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e55c:	2200      	movs	r2, #0
    e55e:	b998      	cbnz	r0, e588 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    e560:	8820      	ldrh	r0, [r4, #0]
    e562:	2845      	cmp	r0, #69	; 0x45
    e564:	d200      	bcs.n	e568 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    e566:	2045      	movs	r0, #69	; 0x45
    e568:	42b7      	cmp	r7, r6
    e56a:	d906      	bls.n	e57a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e56c:	7f23      	ldrb	r3, [r4, #28]
    e56e:	1bb9      	subs	r1, r7, r6
    e570:	1ac9      	subs	r1, r1, r3
    e572:	1f89      	subs	r1, r1, #6
    e574:	4281      	cmp	r1, r0
    e576:	da00      	bge.n	e57a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e578:	4608      	mov	r0, r1
    e57a:	89e1      	ldrh	r1, [r4, #14]
    e57c:	b111      	cbz	r1, e584 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    e57e:	f8b9 3000 	ldrh.w	r3, [r9]
    e582:	1ac0      	subs	r0, r0, r3
    e584:	4540      	cmp	r0, r8
    e586:	da03      	bge.n	e590 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    e588:	8262      	strh	r2, [r4, #18]
    e58a:	2000      	movs	r0, #0
    e58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e590:	7f20      	ldrb	r0, [r4, #28]
    e592:	4429      	add	r1, r5
    e594:	1d80      	adds	r0, r0, #6
    e596:	4430      	add	r0, r6
    e598:	4408      	add	r0, r1
    e59a:	f8a4 8012 	strh.w	r8, [r4, #18]
    e59e:	1ec0      	subs	r0, r0, #3
    e5a0:	e7f4      	b.n	e58c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000e5a2 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    e5a2:	2100      	movs	r1, #0
    e5a4:	81c1      	strh	r1, [r0, #14]
    e5a6:	8241      	strh	r1, [r0, #18]
    e5a8:	7581      	strb	r1, [r0, #22]
    e5aa:	4770      	bx	lr

0000e5ac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    e5ac:	b570      	push	{r4, r5, r6, lr}
    e5ae:	2300      	movs	r3, #0
    e5b0:	2908      	cmp	r1, #8
    e5b2:	d204      	bcs.n	e5be <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    e5b4:	f240 11cb 	movw	r1, #459	; 0x1cb
    e5b8:	2015      	movs	r0, #21
    e5ba:	f7f6 fbad 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5be:	6802      	ldr	r2, [r0, #0]
    e5c0:	b90a      	cbnz	r2, e5c6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    e5c2:	e01e      	b.n	e602 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    e5c4:	4610      	mov	r0, r2
    e5c6:	6802      	ldr	r2, [r0, #0]
    e5c8:	8893      	ldrh	r3, [r2, #4]
    e5ca:	428b      	cmp	r3, r1
    e5cc:	d002      	beq.n	e5d4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    e5ce:	6813      	ldr	r3, [r2, #0]
    e5d0:	2b00      	cmp	r3, #0
    e5d2:	d1f7      	bne.n	e5c4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    e5d4:	8894      	ldrh	r4, [r2, #4]
    e5d6:	4613      	mov	r3, r2
    e5d8:	428c      	cmp	r4, r1
    e5da:	d101      	bne.n	e5e0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    e5dc:	6811      	ldr	r1, [r2, #0]
    e5de:	e00d      	b.n	e5fc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    e5e0:	f101 0508 	add.w	r5, r1, #8
    e5e4:	b2ae      	uxth	r6, r5
    e5e6:	2500      	movs	r5, #0
    e5e8:	42b4      	cmp	r4, r6
    e5ea:	d309      	bcc.n	e600 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    e5ec:	1a64      	subs	r4, r4, r1
    e5ee:	4411      	add	r1, r2
    e5f0:	600d      	str	r5, [r1, #0]
    e5f2:	808c      	strh	r4, [r1, #4]
    e5f4:	6802      	ldr	r2, [r0, #0]
    e5f6:	6812      	ldr	r2, [r2, #0]
    e5f8:	6002      	str	r2, [r0, #0]
    e5fa:	600a      	str	r2, [r1, #0]
    e5fc:	6001      	str	r1, [r0, #0]
    e5fe:	e000      	b.n	e602 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    e600:	2300      	movs	r3, #0
    e602:	4618      	mov	r0, r3
    e604:	bd70      	pop	{r4, r5, r6, pc}

0000e606 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    e606:	b510      	push	{r4, lr}
    e608:	000c      	movs	r4, r1
    e60a:	d006      	beq.n	e61a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    e60c:	2c08      	cmp	r4, #8
    e60e:	d209      	bcs.n	e624 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    e610:	f240 1195 	movw	r1, #405	; 0x195
    e614:	2015      	movs	r0, #21
    e616:	f7f6 fb7f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e61a:	b108      	cbz	r0, e620 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    e61c:	2100      	movs	r1, #0
    e61e:	6001      	str	r1, [r0, #0]
    e620:	2000      	movs	r0, #0
    e622:	bd10      	pop	{r4, pc}
    e624:	b118      	cbz	r0, e62e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    e626:	b2a1      	uxth	r1, r4
    e628:	6800      	ldr	r0, [r0, #0]
    e62a:	f000 f814 	bl	e656 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    e62e:	1d20      	adds	r0, r4, #4
    e630:	bd10      	pop	{r4, pc}

0000e632 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    e632:	2100      	movs	r1, #0
    e634:	6802      	ldr	r2, [r0, #0]
    e636:	e003      	b.n	e640 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    e638:	8893      	ldrh	r3, [r2, #4]
    e63a:	6812      	ldr	r2, [r2, #0]
    e63c:	4419      	add	r1, r3
    e63e:	b289      	uxth	r1, r1
    e640:	2a00      	cmp	r2, #0
    e642:	d1f9      	bne.n	e638 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    e644:	f000 b807 	b.w	e656 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000e648 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    e648:	2300      	movs	r3, #0
    e64a:	600b      	str	r3, [r1, #0]
    e64c:	808a      	strh	r2, [r1, #4]
    e64e:	6802      	ldr	r2, [r0, #0]
    e650:	600a      	str	r2, [r1, #0]
    e652:	6001      	str	r1, [r0, #0]
    e654:	4770      	bx	lr
    e656:	2300      	movs	r3, #0
    e658:	6043      	str	r3, [r0, #4]
    e65a:	1d02      	adds	r2, r0, #4
    e65c:	8101      	strh	r1, [r0, #8]
    e65e:	6002      	str	r2, [r0, #0]
    e660:	4770      	bx	lr

0000e662 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    e662:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    e666:	3aff      	subs	r2, #255	; 0xff
    e668:	d000      	beq.n	e66c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    e66a:	b109      	cbz	r1, e670 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    e66c:	2000      	movs	r0, #0
    e66e:	4770      	bx	lr
    e670:	f7f6 be32 	b.w	52d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>

0000e674 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    e674:	b570      	push	{r4, r5, r6, lr}
    e676:	4605      	mov	r5, r0
    e678:	460c      	mov	r4, r1
    e67a:	4608      	mov	r0, r1
    e67c:	f000 f84f 	bl	e71e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    e680:	b108      	cbz	r0, e686 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    e682:	2010      	movs	r0, #16
    e684:	bd70      	pop	{r4, r5, r6, pc}
    e686:	b10d      	cbz	r5, e68c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x18>
    e688:	2007      	movs	r0, #7
    e68a:	bd70      	pop	{r4, r5, r6, pc}
    e68c:	7025      	strb	r5, [r4, #0]
    e68e:	2000      	movs	r0, #0
    e690:	8060      	strh	r0, [r4, #2]
    e692:	bd70      	pop	{r4, r5, r6, pc}
    e694:	b510      	push	{r4, lr}
    e696:	4604      	mov	r4, r0
    e698:	f7f6 fe6a 	bl	5370 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    e69c:	42a0      	cmp	r0, r4
    e69e:	d901      	bls.n	e6a4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x30>
    e6a0:	2001      	movs	r0, #1
    e6a2:	bd10      	pop	{r4, pc}
    e6a4:	2000      	movs	r0, #0
    e6a6:	bd10      	pop	{r4, pc}
    e6a8:	4770      	bx	lr

0000e6aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    e6aa:	b570      	push	{r4, r5, r6, lr}
    e6ac:	460e      	mov	r6, r1
    e6ae:	461d      	mov	r5, r3
    e6b0:	4611      	mov	r1, r2
    e6b2:	f000 f811 	bl	e6d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    e6b6:	4604      	mov	r4, r0
    e6b8:	4629      	mov	r1, r5
    e6ba:	4630      	mov	r0, r6
    e6bc:	f000 f803 	bl	e6c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    e6c0:	4420      	add	r0, r4
    e6c2:	1d00      	adds	r0, r0, #4
    e6c4:	bd70      	pop	{r4, r5, r6, pc}
    e6c6:	b510      	push	{r4, lr}
    e6c8:	460a      	mov	r2, r1
    e6ca:	2101      	movs	r1, #1
    e6cc:	f7ff ff29 	bl	e522 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e6d0:	1cc0      	adds	r0, r0, #3
    e6d2:	f020 0003 	bic.w	r0, r0, #3
    e6d6:	bd10      	pop	{r4, pc}
    e6d8:	b510      	push	{r4, lr}
    e6da:	460a      	mov	r2, r1
    e6dc:	2101      	movs	r1, #1
    e6de:	f7ff ff20 	bl	e522 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e6e2:	1cc0      	adds	r0, r0, #3
    e6e4:	f020 0003 	bic.w	r0, r0, #3
    e6e8:	bd10      	pop	{r4, pc}
    e6ea:	2800      	cmp	r0, #0
    e6ec:	db09      	blt.n	e702 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    e6ee:	f000 021f 	and.w	r2, r0, #31
    e6f2:	2101      	movs	r1, #1
    e6f4:	4091      	lsls	r1, r2
    e6f6:	0940      	lsrs	r0, r0, #5
    e6f8:	0080      	lsls	r0, r0, #2
    e6fa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e6fe:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e702:	4770      	bx	lr

0000e704 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    e704:	f7f6 bffa 	b.w	56fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000e708 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    e708:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    e70c:	2000      	movs	r0, #0
    e70e:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    e712:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    e716:	2001      	movs	r0, #1
    e718:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    e71c:	4770      	bx	lr

0000e71e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    e71e:	b108      	cbz	r0, e724 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    e720:	2000      	movs	r0, #0
    e722:	4770      	bx	lr
    e724:	2001      	movs	r0, #1
    e726:	4770      	bx	lr

0000e728 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    e728:	f7f7 b92e 	b.w	5988 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000e72c <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    e72c:	f7f7 b91c 	b.w	5968 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000e730 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    e730:	b510      	push	{r4, lr}
    e732:	2900      	cmp	r1, #0
    e734:	4604      	mov	r4, r0
    e736:	f04f 0106 	mov.w	r1, #6
    e73a:	d002      	beq.n	e742 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    e73c:	f7f6 fb7a 	bl	4e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e740:	e001      	b.n	e746 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    e742:	f7f6 fb93 	bl	4e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e746:	7960      	ldrb	r0, [r4, #5]
    e748:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    e74c:	7160      	strb	r0, [r4, #5]
    e74e:	bd10      	pop	{r4, pc}

0000e750 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    e750:	4770      	bx	lr

0000e752 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    e752:	b530      	push	{r4, r5, lr}
    e754:	460c      	mov	r4, r1
    e756:	4605      	mov	r5, r0
    e758:	b08d      	sub	sp, #52	; 0x34
    e75a:	f04f 0103 	mov.w	r1, #3
    e75e:	f104 0003 	add.w	r0, r4, #3
    e762:	b112      	cbz	r2, e76a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    e764:	f7f6 fb66 	bl	4e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e768:	e001      	b.n	e76e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    e76a:	f7f6 fb7f 	bl	4e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e76e:	7960      	ldrb	r0, [r4, #5]
    e770:	220d      	movs	r2, #13
    e772:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    e776:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    e77a:	7160      	strb	r0, [r4, #5]
    e77c:	2100      	movs	r1, #0
    e77e:	a804      	add	r0, sp, #16
    e780:	f7fe ff4c 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e784:	78e0      	ldrb	r0, [r4, #3]
    e786:	f88d 001f 	strb.w	r0, [sp, #31]
    e78a:	7920      	ldrb	r0, [r4, #4]
    e78c:	f88d 001e 	strb.w	r0, [sp, #30]
    e790:	7960      	ldrb	r0, [r4, #5]
    e792:	f88d 001d 	strb.w	r0, [sp, #29]
    e796:	2210      	movs	r2, #16
    e798:	4629      	mov	r1, r5
    e79a:	4668      	mov	r0, sp
    e79c:	f7fe fec4 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e7a0:	4668      	mov	r0, sp
    e7a2:	f7ff ffaf 	bl	e704 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e7a6:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    e7aa:	7020      	strb	r0, [r4, #0]
    e7ac:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    e7b0:	7060      	strb	r0, [r4, #1]
    e7b2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    e7b6:	70a0      	strb	r0, [r4, #2]
    e7b8:	b00d      	add	sp, #52	; 0x34
    e7ba:	bd30      	pop	{r4, r5, pc}

0000e7bc <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    e7bc:	b530      	push	{r4, r5, lr}
    e7be:	b08d      	sub	sp, #52	; 0x34
    e7c0:	460c      	mov	r4, r1
    e7c2:	4605      	mov	r5, r0
    e7c4:	220d      	movs	r2, #13
    e7c6:	2100      	movs	r1, #0
    e7c8:	a804      	add	r0, sp, #16
    e7ca:	f7fe ff27 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e7ce:	78e0      	ldrb	r0, [r4, #3]
    e7d0:	f88d 001f 	strb.w	r0, [sp, #31]
    e7d4:	7920      	ldrb	r0, [r4, #4]
    e7d6:	f88d 001e 	strb.w	r0, [sp, #30]
    e7da:	7960      	ldrb	r0, [r4, #5]
    e7dc:	f88d 001d 	strb.w	r0, [sp, #29]
    e7e0:	2210      	movs	r2, #16
    e7e2:	4629      	mov	r1, r5
    e7e4:	4668      	mov	r0, sp
    e7e6:	f7fe fe9f 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e7ea:	4668      	mov	r0, sp
    e7ec:	f7ff ff8a 	bl	e704 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e7f0:	7820      	ldrb	r0, [r4, #0]
    e7f2:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    e7f6:	4288      	cmp	r0, r1
    e7f8:	d10c      	bne.n	e814 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e7fa:	7860      	ldrb	r0, [r4, #1]
    e7fc:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    e800:	4288      	cmp	r0, r1
    e802:	d107      	bne.n	e814 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e804:	78a0      	ldrb	r0, [r4, #2]
    e806:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    e80a:	4288      	cmp	r0, r1
    e80c:	d102      	bne.n	e814 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e80e:	2001      	movs	r0, #1
    e810:	b00d      	add	sp, #52	; 0x34
    e812:	bd30      	pop	{r4, r5, pc}
    e814:	2000      	movs	r0, #0
    e816:	e7fb      	b.n	e810 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000e818 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    e818:	f7f7 bc84 	b.w	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    e81c:	b510      	push	{r4, lr}
    e81e:	2801      	cmp	r0, #1
    e820:	d008      	beq.n	e834 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    e822:	2802      	cmp	r0, #2
    e824:	d004      	beq.n	e830 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    e826:	f240 319a 	movw	r1, #922	; 0x39a
    e82a:	2006      	movs	r0, #6
    e82c:	f7f6 fa74 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e830:	2001      	movs	r0, #1
    e832:	bd10      	pop	{r4, pc}
    e834:	2000      	movs	r0, #0
    e836:	bd10      	pop	{r4, pc}
    e838:	2900      	cmp	r1, #0
    e83a:	d004      	beq.n	e846 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    e83c:	2801      	cmp	r0, #1
    e83e:	d003      	beq.n	e848 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    e840:	2901      	cmp	r1, #1
    e842:	d001      	beq.n	e848 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    e844:	2002      	movs	r0, #2
    e846:	4770      	bx	lr
    e848:	2001      	movs	r0, #1
    e84a:	4770      	bx	lr
    e84c:	f7ff bdb6 	b.w	e3bc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000e850 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    e850:	2101      	movs	r1, #1
    e852:	f7f8 b87b 	b.w	694c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000e856 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    e856:	b510      	push	{r4, lr}
    e858:	f001 ff4c 	bl	106f4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    e85c:	b118      	cbz	r0, e866 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    e85e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e862:	f7fd bc33 	b.w	c0cc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    e866:	20ff      	movs	r0, #255	; 0xff
    e868:	bd10      	pop	{r4, pc}

0000e86a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    e86a:	b510      	push	{r4, lr}
    e86c:	f7f8 f8b6 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e870:	2810      	cmp	r0, #16
    e872:	d003      	beq.n	e87c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    e874:	f7f8 f882 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e878:	2810      	cmp	r0, #16
    e87a:	d100      	bne.n	e87e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    e87c:	2008      	movs	r0, #8
    e87e:	bd10      	pop	{r4, pc}

0000e880 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    e880:	b510      	push	{r4, lr}
    e882:	f7f8 f8ab 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e886:	2810      	cmp	r0, #16
    e888:	d007      	beq.n	e89a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e88a:	f7f8 f877 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e88e:	2810      	cmp	r0, #16
    e890:	d003      	beq.n	e89a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e892:	f7f8 f8eb 	bl	6a6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    e896:	2001      	movs	r0, #1
    e898:	bd10      	pop	{r4, pc}
    e89a:	2000      	movs	r0, #0
    e89c:	bd10      	pop	{r4, pc}

0000e89e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    e89e:	b510      	push	{r4, lr}
    e8a0:	f7f8 f89c 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e8a4:	2810      	cmp	r0, #16
    e8a6:	d003      	beq.n	e8b0 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    e8a8:	f7f8 f928 	bl	6afc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    e8ac:	2001      	movs	r0, #1
    e8ae:	bd10      	pop	{r4, pc}
    e8b0:	2000      	movs	r0, #0
    e8b2:	bd10      	pop	{r4, pc}

0000e8b4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    e8b4:	b570      	push	{r4, r5, r6, lr}
    e8b6:	460e      	mov	r6, r1
    e8b8:	b08c      	sub	sp, #48	; 0x30
    e8ba:	4614      	mov	r4, r2
    e8bc:	4601      	mov	r1, r0
    e8be:	461d      	mov	r5, r3
    e8c0:	2210      	movs	r2, #16
    e8c2:	4668      	mov	r0, sp
    e8c4:	f000 f9a0 	bl	ec08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e8c8:	2210      	movs	r2, #16
    e8ca:	4631      	mov	r1, r6
    e8cc:	a804      	add	r0, sp, #16
    e8ce:	f000 f99b 	bl	ec08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e8d2:	4668      	mov	r0, sp
    e8d4:	f7ff ff16 	bl	e704 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e8d8:	a908      	add	r1, sp, #32
    e8da:	f04f 0210 	mov.w	r2, #16
    e8de:	4628      	mov	r0, r5
    e8e0:	b11c      	cbz	r4, e8ea <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    e8e2:	f000 f991 	bl	ec08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e8e6:	b00c      	add	sp, #48	; 0x30
    e8e8:	bd70      	pop	{r4, r5, r6, pc}
    e8ea:	f7fe fe1d 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e8ee:	e7fa      	b.n	e8e6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    e8f0:	0781      	lsls	r1, r0, #30
    e8f2:	d501      	bpl.n	e8f8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    e8f4:	2002      	movs	r0, #2
    e8f6:	4770      	bx	lr
    e8f8:	07c0      	lsls	r0, r0, #31
    e8fa:	d0fc      	beq.n	e8f6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    e8fc:	2001      	movs	r0, #1
    e8fe:	4770      	bx	lr

0000e900 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    e900:	b530      	push	{r4, r5, lr}
    e902:	7901      	ldrb	r1, [r0, #4]
    e904:	0949      	lsrs	r1, r1, #5
    e906:	d128      	bne.n	e95a <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x5a>
    e908:	2200      	movs	r2, #0
    e90a:	4611      	mov	r1, r2
    e90c:	5c44      	ldrb	r4, [r0, r1]
    e90e:	1c49      	adds	r1, r1, #1
    e910:	f004 0301 	and.w	r3, r4, #1
    e914:	0864      	lsrs	r4, r4, #1
    e916:	f004 0501 	and.w	r5, r4, #1
    e91a:	442b      	add	r3, r5
    e91c:	0864      	lsrs	r4, r4, #1
    e91e:	f004 0501 	and.w	r5, r4, #1
    e922:	441d      	add	r5, r3
    e924:	0863      	lsrs	r3, r4, #1
    e926:	f003 0401 	and.w	r4, r3, #1
    e92a:	442c      	add	r4, r5
    e92c:	085b      	lsrs	r3, r3, #1
    e92e:	f003 0501 	and.w	r5, r3, #1
    e932:	442c      	add	r4, r5
    e934:	085b      	lsrs	r3, r3, #1
    e936:	f003 0501 	and.w	r5, r3, #1
    e93a:	085b      	lsrs	r3, r3, #1
    e93c:	442c      	add	r4, r5
    e93e:	f003 0501 	and.w	r5, r3, #1
    e942:	442c      	add	r4, r5
    e944:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    e948:	441a      	add	r2, r3
    e94a:	b2c9      	uxtb	r1, r1
    e94c:	b2d2      	uxtb	r2, r2
    e94e:	2905      	cmp	r1, #5
    e950:	d3dc      	bcc.n	e90c <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xc>
    e952:	2a01      	cmp	r2, #1
    e954:	d901      	bls.n	e95a <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x5a>
    e956:	2001      	movs	r0, #1
    e958:	bd30      	pop	{r4, r5, pc}
    e95a:	2000      	movs	r0, #0
    e95c:	bd30      	pop	{r4, r5, pc}

0000e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    e95e:	b510      	push	{r4, lr}
    e960:	460c      	mov	r4, r1
    e962:	2100      	movs	r1, #0
    e964:	f7ff fe7d 	bl	e662 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e968:	6060      	str	r0, [r4, #4]
    e96a:	b110      	cbz	r0, e972 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    e96c:	2000      	movs	r0, #0
    e96e:	7020      	strb	r0, [r4, #0]
    e970:	bd10      	pop	{r4, pc}
    e972:	2002      	movs	r0, #2
    e974:	bd10      	pop	{r4, pc}

0000e976 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    e976:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e97a:	4348      	muls	r0, r1
    e97c:	4770      	bx	lr

0000e97e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    e97e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e982:	fbb0 f0f1 	udiv	r0, r0, r1
    e986:	b280      	uxth	r0, r0
    e988:	4770      	bx	lr

0000e98a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    e98a:	b570      	push	{r4, r5, r6, lr}
    e98c:	4604      	mov	r4, r0
    e98e:	4290      	cmp	r0, r2
    e990:	d20b      	bcs.n	e9aa <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    e992:	1b10      	subs	r0, r2, r4
    e994:	2864      	cmp	r0, #100	; 0x64
    e996:	d200      	bcs.n	e99a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    e998:	2064      	movs	r0, #100	; 0x64
    e99a:	1825      	adds	r5, r4, r0
    e99c:	428d      	cmp	r5, r1
    e99e:	d803      	bhi.n	e9a8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    e9a0:	2104      	movs	r1, #4
    e9a2:	f7f3 fccf 	bl	2344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e9a6:	b108      	cbz	r0, e9ac <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    e9a8:	4620      	mov	r0, r4
    e9aa:	bd70      	pop	{r4, r5, r6, pc}
    e9ac:	4628      	mov	r0, r5
    e9ae:	bd70      	pop	{r4, r5, r6, pc}

0000e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    e9b0:	b510      	push	{r4, lr}
    e9b2:	f1a2 030f 	sub.w	r3, r2, #15
    e9b6:	290c      	cmp	r1, #12
    e9b8:	d24f      	bcs.n	ea5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9ba:	e8df f001 	tbb	[pc, r1]
    e9be:	0806      	.short	0x0806
    e9c0:	1815120d 	.word	0x1815120d
    e9c4:	4c322f27 	.word	0x4c322f27
    e9c8:	3d35      	.short	0x3d35
    e9ca:	b3a2      	cbz	r2, ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x86>
    e9cc:	e045      	b.n	ea5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9ce:	2a07      	cmp	r2, #7
    e9d0:	d045      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9d2:	2a08      	cmp	r2, #8
    e9d4:	d043      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9d6:	e040      	b.n	ea5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9d8:	2a0c      	cmp	r2, #12
    e9da:	d040      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9dc:	2a0b      	cmp	r2, #11
    e9de:	d03e      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9e0:	e03b      	b.n	ea5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9e2:	2a0d      	cmp	r2, #13
    e9e4:	d03b      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9e6:	e038      	b.n	ea5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9e8:	2b0c      	cmp	r3, #12
    e9ea:	d938      	bls.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9ec:	e035      	b.n	ea5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9ee:	2a12      	cmp	r2, #18
    e9f0:	d035      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9f2:	2a11      	cmp	r2, #17
    e9f4:	d033      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9f6:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    e9fa:	b120      	cbz	r0, ea06 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x56>
    e9fc:	2a12      	cmp	r2, #18
    e9fe:	d32c      	bcc.n	ea5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ea00:	2a1a      	cmp	r2, #26
    ea02:	d92c      	bls.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea04:	e029      	b.n	ea5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ea06:	2a16      	cmp	r2, #22
    ea08:	d2fa      	bcs.n	ea00 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x50>
    ea0a:	e026      	b.n	ea5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ea0c:	2b03      	cmp	r3, #3
    ea0e:	d926      	bls.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea10:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    ea14:	b308      	cbz	r0, ea5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ea16:	2a1b      	cmp	r2, #27
    ea18:	d921      	bls.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea1a:	e01e      	b.n	ea5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ea1c:	2a04      	cmp	r2, #4
    ea1e:	d01e      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea20:	e01b      	b.n	ea5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ea22:	2a01      	cmp	r2, #1
    ea24:	d01b      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea26:	e018      	b.n	ea5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ea28:	2a1c      	cmp	r2, #28
    ea2a:	d018      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea2c:	2a1d      	cmp	r2, #29
    ea2e:	d016      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea30:	2a1e      	cmp	r2, #30
    ea32:	d014      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea34:	e011      	b.n	ea5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ea36:	e012      	b.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea38:	2a1f      	cmp	r2, #31
    ea3a:	d010      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea3c:	2a20      	cmp	r2, #32
    ea3e:	d00e      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea40:	2a21      	cmp	r2, #33	; 0x21
    ea42:	d00c      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea44:	2a22      	cmp	r2, #34	; 0x22
    ea46:	d00a      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea48:	2a23      	cmp	r2, #35	; 0x23
    ea4a:	d008      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea4c:	2a24      	cmp	r2, #36	; 0x24
    ea4e:	d006      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea50:	2a26      	cmp	r2, #38	; 0x26
    ea52:	d004      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea54:	e001      	b.n	ea5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ea56:	2a05      	cmp	r2, #5
    ea58:	d001      	beq.n	ea5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea5a:	2000      	movs	r0, #0
    ea5c:	bd10      	pop	{r4, pc}
    ea5e:	2001      	movs	r0, #1
    ea60:	bd10      	pop	{r4, pc}

0000ea62 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    ea62:	280c      	cmp	r0, #12
    ea64:	d013      	beq.n	ea8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea66:	280b      	cmp	r0, #11
    ea68:	d011      	beq.n	ea8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea6a:	280d      	cmp	r0, #13
    ea6c:	d00f      	beq.n	ea8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea6e:	281f      	cmp	r0, #31
    ea70:	d00d      	beq.n	ea8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea72:	2820      	cmp	r0, #32
    ea74:	d00b      	beq.n	ea8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea76:	2821      	cmp	r0, #33	; 0x21
    ea78:	d009      	beq.n	ea8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea7a:	2822      	cmp	r0, #34	; 0x22
    ea7c:	d007      	beq.n	ea8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea7e:	2823      	cmp	r0, #35	; 0x23
    ea80:	d005      	beq.n	ea8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea82:	2824      	cmp	r0, #36	; 0x24
    ea84:	d003      	beq.n	ea8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea86:	2826      	cmp	r0, #38	; 0x26
    ea88:	d001      	beq.n	ea8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea8a:	2000      	movs	r0, #0
    ea8c:	4770      	bx	lr
    ea8e:	2001      	movs	r0, #1
    ea90:	4770      	bx	lr

0000ea92 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    ea92:	f011 0f0c 	tst.w	r1, #12
    ea96:	d016      	beq.n	eac6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ea98:	074a      	lsls	r2, r1, #29
    ea9a:	f44f 7116 	mov.w	r1, #600	; 0x258
    ea9e:	2a00      	cmp	r2, #0
    eaa0:	da02      	bge.n	eaa8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    eaa2:	f04f 0210 	mov.w	r2, #16
    eaa6:	e001      	b.n	eaac <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    eaa8:	f04f 0240 	mov.w	r2, #64	; 0x40
    eaac:	da01      	bge.n	eab2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    eaae:	f04f 0196 	mov.w	r1, #150	; 0x96
    eab2:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    eab6:	eba0 0301 	sub.w	r3, r0, r1
    eaba:	4288      	cmp	r0, r1
    eabc:	d910      	bls.n	eae0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    eabe:	fb93 f0f2 	sdiv	r0, r3, r2
    eac2:	b280      	uxth	r0, r0
    eac4:	4770      	bx	lr
    eac6:	2902      	cmp	r1, #2
    eac8:	d002      	beq.n	ead0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    eaca:	2870      	cmp	r0, #112	; 0x70
    eacc:	d80a      	bhi.n	eae4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    eace:	e007      	b.n	eae0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ead0:	283c      	cmp	r0, #60	; 0x3c
    ead2:	d905      	bls.n	eae0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ead4:	383c      	subs	r0, #60	; 0x3c
    ead6:	17c1      	asrs	r1, r0, #31
    ead8:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    eadc:	1080      	asrs	r0, r0, #2
    eade:	e7f0      	b.n	eac2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    eae0:	2000      	movs	r0, #0
    eae2:	e7ee      	b.n	eac2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    eae4:	3870      	subs	r0, #112	; 0x70
    eae6:	17c1      	asrs	r1, r0, #31
    eae8:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    eaec:	10c0      	asrs	r0, r0, #3
    eaee:	e7e8      	b.n	eac2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000eaf0 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    eaf0:	6809      	ldr	r1, [r1, #0]
    eaf2:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    eaf6:	4770      	bx	lr

0000eaf8 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    eaf8:	2801      	cmp	r0, #1
    eafa:	d002      	beq.n	eb02 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    eafc:	2802      	cmp	r0, #2
    eafe:	d000      	beq.n	eb02 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    eb00:	2000      	movs	r0, #0
    eb02:	4770      	bx	lr

0000eb04 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    eb04:	b510      	push	{r4, lr}
    eb06:	f640 12c4 	movw	r2, #2500	; 0x9c4
    eb0a:	2901      	cmp	r1, #1
    eb0c:	d006      	beq.n	eb1c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    eb0e:	2902      	cmp	r1, #2
    eb10:	d005      	beq.n	eb1e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    eb12:	f240 31c6 	movw	r1, #966	; 0x3c6
    eb16:	2029      	movs	r0, #41	; 0x29
    eb18:	f7f6 f8fe 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb1c:	b108      	cbz	r0, eb22 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    eb1e:	4610      	mov	r0, r2
    eb20:	bd10      	pop	{r4, pc}
    eb22:	f240 40e2 	movw	r0, #1250	; 0x4e2
    eb26:	bd10      	pop	{r4, pc}

0000eb28 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    eb28:	b530      	push	{r4, r5, lr}
    eb2a:	242a      	movs	r4, #42	; 0x2a
    eb2c:	2523      	movs	r5, #35	; 0x23
    eb2e:	2a16      	cmp	r2, #22
    eb30:	d105      	bne.n	eb3e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x16>
    eb32:	280c      	cmp	r0, #12
    eb34:	d007      	beq.n	eb46 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    eb36:	280d      	cmp	r0, #13
    eb38:	d005      	beq.n	eb46 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    eb3a:	281f      	cmp	r0, #31
    eb3c:	d005      	beq.n	eb4a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    eb3e:	b171      	cbz	r1, eb5e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    eb40:	2a16      	cmp	r2, #22
    eb42:	d10c      	bne.n	eb5e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    eb44:	e004      	b.n	eb50 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x28>
    eb46:	701c      	strb	r4, [r3, #0]
    eb48:	e000      	b.n	eb4c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x24>
    eb4a:	701d      	strb	r5, [r3, #0]
    eb4c:	2001      	movs	r0, #1
    eb4e:	bd30      	pop	{r4, r5, pc}
    eb50:	7808      	ldrb	r0, [r1, #0]
    eb52:	2801      	cmp	r0, #1
    eb54:	d0f7      	beq.n	eb46 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    eb56:	2800      	cmp	r0, #0
    eb58:	d0f5      	beq.n	eb46 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    eb5a:	2816      	cmp	r0, #22
    eb5c:	d0f5      	beq.n	eb4a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    eb5e:	2000      	movs	r0, #0
    eb60:	bd30      	pop	{r4, r5, pc}

0000eb62 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    eb62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb64:	b2cf      	uxtb	r7, r1
    eb66:	4606      	mov	r6, r0
    eb68:	f3c1 2407 	ubfx	r4, r1, #8, #8
    eb6c:	4621      	mov	r1, r4
    eb6e:	4638      	mov	r0, r7
    eb70:	f000 f8ca 	bl	ed08 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    eb74:	b2f5      	uxtb	r5, r6
    eb76:	f3c6 2607 	ubfx	r6, r6, #8, #8
    eb7a:	b920      	cbnz	r0, eb86 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    eb7c:	4631      	mov	r1, r6
    eb7e:	4628      	mov	r0, r5
    eb80:	f000 f8c2 	bl	ed08 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    eb84:	b140      	cbz	r0, eb98 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    eb86:	4027      	ands	r7, r4
    eb88:	4035      	ands	r5, r6
    eb8a:	403d      	ands	r5, r7
    eb8c:	4644      	mov	r4, r8
    eb8e:	f365 0407 	bfi	r4, r5, #0, #8
    eb92:	f365 240f 	bfi	r4, r5, #8, #8
    eb96:	e006      	b.n	eba6 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    eb98:	4025      	ands	r5, r4
    eb9a:	4644      	mov	r4, r8
    eb9c:	f365 0407 	bfi	r4, r5, #0, #8
    eba0:	403e      	ands	r6, r7
    eba2:	f366 240f 	bfi	r4, r6, #8, #8
    eba6:	b2e0      	uxtb	r0, r4
    eba8:	f7ff fea2 	bl	e8f0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    ebac:	f88d 0000 	strb.w	r0, [sp]
    ebb0:	f3c4 2007 	ubfx	r0, r4, #8, #8
    ebb4:	f7ff fe9c 	bl	e8f0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    ebb8:	f88d 0001 	strb.w	r0, [sp, #1]
    ebbc:	f8bd 0000 	ldrh.w	r0, [sp]
    ebc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ebc2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    ebc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ebc6:	460c      	mov	r4, r1
    ebc8:	4605      	mov	r5, r0
    ebca:	68c6      	ldr	r6, [r0, #12]
    ebcc:	f7f4 f814 	bl	2bf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    ebd0:	b198      	cbz	r0, ebfa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    ebd2:	b1bc      	cbz	r4, ec04 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    ebd4:	4630      	mov	r0, r6
    ebd6:	68e9      	ldr	r1, [r5, #12]
    ebd8:	f7f3 fd02 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ebdc:	2800      	cmp	r0, #0
    ebde:	dd11      	ble.n	ec04 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    ebe0:	4420      	add	r0, r4
    ebe2:	1e40      	subs	r0, r0, #1
    ebe4:	fbb0 f7f4 	udiv	r7, r0, r4
    ebe8:	fb07 f104 	mul.w	r1, r7, r4
    ebec:	4630      	mov	r0, r6
    ebee:	f7f3 fcc5 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ebf2:	60e8      	str	r0, [r5, #12]
    ebf4:	4638      	mov	r0, r7
    ebf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ebfa:	f240 214b 	movw	r1, #587	; 0x24b
    ebfe:	2029      	movs	r0, #41	; 0x29
    ec00:	f7f6 f88a 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec04:	2000      	movs	r0, #0
    ec06:	e7f6      	b.n	ebf6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000ec08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    ec08:	b530      	push	{r4, r5, lr}
    ec0a:	4613      	mov	r3, r2
    ec0c:	e006      	b.n	ec1c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    ec0e:	18cc      	adds	r4, r1, r3
    ec10:	1ad5      	subs	r5, r2, r3
    ec12:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    ec16:	1e5b      	subs	r3, r3, #1
    ec18:	5544      	strb	r4, [r0, r5]
    ec1a:	b2db      	uxtb	r3, r3
    ec1c:	2b00      	cmp	r3, #0
    ec1e:	d1f6      	bne.n	ec0e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    ec20:	bd30      	pop	{r4, r5, pc}

0000ec22 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    ec22:	b538      	push	{r3, r4, r5, lr}
    ec24:	4605      	mov	r5, r0
    ec26:	460c      	mov	r4, r1
    ec28:	4668      	mov	r0, sp
    ec2a:	f7fd ff53 	bl	cad4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    ec2e:	b310      	cbz	r0, ec76 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    ec30:	f99d 0000 	ldrsb.w	r0, [sp]
    ec34:	7260      	strb	r0, [r4, #9]
    ec36:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    ec3a:	72a1      	strb	r1, [r4, #10]
    ec3c:	f994 100b 	ldrsb.w	r1, [r4, #11]
    ec40:	2200      	movs	r2, #0
    ec42:	1a41      	subs	r1, r0, r1
    ec44:	d500      	bpl.n	ec48 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    ec46:	4249      	negs	r1, r1
    ec48:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    ec4c:	428b      	cmp	r3, r1
    ec4e:	dc10      	bgt.n	ec72 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ec50:	2bff      	cmp	r3, #255	; 0xff
    ec52:	d00e      	beq.n	ec72 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ec54:	7b21      	ldrb	r1, [r4, #12]
    ec56:	1c49      	adds	r1, r1, #1
    ec58:	b2c9      	uxtb	r1, r1
    ec5a:	7321      	strb	r1, [r4, #12]
    ec5c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    ec60:	4299      	cmp	r1, r3
    ec62:	d802      	bhi.n	ec6a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    ec64:	7ae1      	ldrb	r1, [r4, #11]
    ec66:	297f      	cmp	r1, #127	; 0x7f
    ec68:	d103      	bne.n	ec72 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ec6a:	72e0      	strb	r0, [r4, #11]
    ec6c:	2000      	movs	r0, #0
    ec6e:	7320      	strb	r0, [r4, #12]
    ec70:	2201      	movs	r2, #1
    ec72:	4610      	mov	r0, r2
    ec74:	bd38      	pop	{r3, r4, r5, pc}
    ec76:	207f      	movs	r0, #127	; 0x7f
    ec78:	7260      	strb	r0, [r4, #9]
    ec7a:	2000      	movs	r0, #0
    ec7c:	bd38      	pop	{r3, r4, r5, pc}

0000ec7e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    ec7e:	2300      	movs	r3, #0
    ec80:	6283      	str	r3, [r0, #40]	; 0x28
    ec82:	8602      	strh	r2, [r0, #48]	; 0x30
    ec84:	f240 2371 	movw	r3, #625	; 0x271
    ec88:	435a      	muls	r2, r3
    ec8a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    ec8e:	1e52      	subs	r2, r2, #1
    ec90:	fbb2 f1f1 	udiv	r1, r2, r1
    ec94:	62c1      	str	r1, [r0, #44]	; 0x2c
    ec96:	4770      	bx	lr

0000ec98 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    ec98:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ec9c:	4348      	muls	r0, r1
    ec9e:	4770      	bx	lr

0000eca0 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    eca0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    eca4:	fbb0 f0f1 	udiv	r0, r0, r1
    eca8:	b280      	uxth	r0, r0
    ecaa:	4770      	bx	lr

0000ecac <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    ecac:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ecb0:	fb10 f001 	smulbb	r0, r0, r1
    ecb4:	4770      	bx	lr

0000ecb6 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    ecb6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ecba:	fbb0 f0f1 	udiv	r0, r0, r1
    ecbe:	b2c0      	uxtb	r0, r0
    ecc0:	4770      	bx	lr

0000ecc2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    ecc2:	b510      	push	{r4, lr}
    ecc4:	2300      	movs	r3, #0
    ecc6:	461a      	mov	r2, r3
    ecc8:	e003      	b.n	ecd2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    ecca:	5c84      	ldrb	r4, [r0, r2]
    eccc:	4323      	orrs	r3, r4
    ecce:	1c52      	adds	r2, r2, #1
    ecd0:	b2d2      	uxtb	r2, r2
    ecd2:	428a      	cmp	r2, r1
    ecd4:	d3f9      	bcc.n	ecca <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    ecd6:	b10b      	cbz	r3, ecdc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    ecd8:	2000      	movs	r0, #0
    ecda:	bd10      	pop	{r4, pc}
    ecdc:	2001      	movs	r0, #1
    ecde:	bd10      	pop	{r4, pc}
    ece0:	b510      	push	{r4, lr}
    ece2:	4604      	mov	r4, r0
    ece4:	f7fd f96e 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ece8:	f644 112b 	movw	r1, #18731	; 0x492b
    ecec:	4008      	ands	r0, r1
    ecee:	2101      	movs	r1, #1
    ecf0:	7561      	strb	r1, [r4, #21]
    ecf2:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    ecf6:	0a00      	lsrs	r0, r0, #8
    ecf8:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
    ecfc:	20fe      	movs	r0, #254	; 0xfe
    ecfe:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    ed02:	207f      	movs	r0, #127	; 0x7f
    ed04:	7260      	strb	r0, [r4, #9]
    ed06:	bd10      	pop	{r4, pc}
    ed08:	2801      	cmp	r0, #1
    ed0a:	d002      	beq.n	ed12 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x50>
    ed0c:	2802      	cmp	r0, #2
    ed0e:	d003      	beq.n	ed18 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x56>
    ed10:	e004      	b.n	ed1c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    ed12:	2901      	cmp	r1, #1
    ed14:	d004      	beq.n	ed20 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    ed16:	e001      	b.n	ed1c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    ed18:	2902      	cmp	r1, #2
    ed1a:	d001      	beq.n	ed20 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    ed1c:	2000      	movs	r0, #0
    ed1e:	4770      	bx	lr
    ed20:	2001      	movs	r0, #1
    ed22:	4770      	bx	lr

0000ed24 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    ed24:	b510      	push	{r4, lr}
    ed26:	4604      	mov	r4, r0
    ed28:	f890 0020 	ldrb.w	r0, [r0, #32]
    ed2c:	b108      	cbz	r0, ed32 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    ed2e:	2825      	cmp	r0, #37	; 0x25
    ed30:	d901      	bls.n	ed36 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    ed32:	2012      	movs	r0, #18
    ed34:	bd10      	pop	{r4, pc}
    ed36:	b12a      	cbz	r2, ed44 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    ed38:	7d60      	ldrb	r0, [r4, #21]
    ed3a:	b128      	cbz	r0, ed48 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    ed3c:	2801      	cmp	r0, #1
    ed3e:	d009      	beq.n	ed54 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    ed40:	201f      	movs	r0, #31
    ed42:	bd10      	pop	{r4, pc}
    ed44:	2000      	movs	r0, #0
    ed46:	bd10      	pop	{r4, pc}
    ed48:	4620      	mov	r0, r4
    ed4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed4e:	4611      	mov	r1, r2
    ed50:	f7f7 bfca 	b.w	6ce8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    ed54:	88a2      	ldrh	r2, [r4, #4]
    ed56:	6909      	ldr	r1, [r1, #16]
    ed58:	f104 0015 	add.w	r0, r4, #21
    ed5c:	f7f7 ff70 	bl	6c40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    ed60:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    ed64:	e7ee      	b.n	ed44 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000ed66 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    ed66:	b530      	push	{r4, r5, lr}
    ed68:	1c42      	adds	r2, r0, #1
    ed6a:	428a      	cmp	r2, r1
    ed6c:	d004      	beq.n	ed78 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    ed6e:	680a      	ldr	r2, [r1, #0]
    ed70:	f8c0 2001 	str.w	r2, [r0, #1]
    ed74:	7909      	ldrb	r1, [r1, #4]
    ed76:	7141      	strb	r1, [r0, #5]
    ed78:	7941      	ldrb	r1, [r0, #5]
    ed7a:	f001 011f 	and.w	r1, r1, #31
    ed7e:	7141      	strb	r1, [r0, #5]
    ed80:	2100      	movs	r1, #0
    ed82:	72c1      	strb	r1, [r0, #11]
    ed84:	1843      	adds	r3, r0, r1
    ed86:	1c49      	adds	r1, r1, #1
    ed88:	785c      	ldrb	r4, [r3, #1]
    ed8a:	b2c9      	uxtb	r1, r1
    ed8c:	f004 0201 	and.w	r2, r4, #1
    ed90:	0864      	lsrs	r4, r4, #1
    ed92:	f004 0501 	and.w	r5, r4, #1
    ed96:	4415      	add	r5, r2
    ed98:	0862      	lsrs	r2, r4, #1
    ed9a:	f002 0401 	and.w	r4, r2, #1
    ed9e:	442c      	add	r4, r5
    eda0:	0852      	lsrs	r2, r2, #1
    eda2:	f002 0501 	and.w	r5, r2, #1
    eda6:	442c      	add	r4, r5
    eda8:	0852      	lsrs	r2, r2, #1
    edaa:	f002 0501 	and.w	r5, r2, #1
    edae:	442c      	add	r4, r5
    edb0:	0852      	lsrs	r2, r2, #1
    edb2:	f002 0501 	and.w	r5, r2, #1
    edb6:	442c      	add	r4, r5
    edb8:	0852      	lsrs	r2, r2, #1
    edba:	f002 0501 	and.w	r5, r2, #1
    edbe:	442c      	add	r4, r5
    edc0:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    edc4:	719a      	strb	r2, [r3, #6]
    edc6:	7ac3      	ldrb	r3, [r0, #11]
    edc8:	2905      	cmp	r1, #5
    edca:	441a      	add	r2, r3
    edcc:	72c2      	strb	r2, [r0, #11]
    edce:	d3d9      	bcc.n	ed84 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    edd0:	bd30      	pop	{r4, r5, pc}

0000edd2 <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>:
    edd2:	68c0      	ldr	r0, [r0, #12]
    edd4:	6008      	str	r0, [r1, #0]
    edd6:	4770      	bx	lr

0000edd8 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>:
    edd8:	6842      	ldr	r2, [r0, #4]
    edda:	600a      	str	r2, [r1, #0]
    eddc:	6880      	ldr	r0, [r0, #8]
    edde:	6048      	str	r0, [r1, #4]
    ede0:	4770      	bx	lr

0000ede2 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    ede2:	6842      	ldr	r2, [r0, #4]
    ede4:	600a      	str	r2, [r1, #0]
    ede6:	6880      	ldr	r0, [r0, #8]
    ede8:	6048      	str	r0, [r1, #4]
    edea:	4770      	bx	lr

0000edec <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    edec:	7800      	ldrb	r0, [r0, #0]
    edee:	f000 0003 	and.w	r0, r0, #3
    edf2:	4770      	bx	lr

0000edf4 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    edf4:	8880      	ldrh	r0, [r0, #4]
    edf6:	4770      	bx	lr

0000edf8 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    edf8:	88c0      	ldrh	r0, [r0, #6]
    edfa:	4770      	bx	lr

0000edfc <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    edfc:	8900      	ldrh	r0, [r0, #8]
    edfe:	4770      	bx	lr

0000ee00 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    ee00:	8940      	ldrh	r0, [r0, #10]
    ee02:	4770      	bx	lr

0000ee04 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    ee04:	7900      	ldrb	r0, [r0, #4]
    ee06:	4770      	bx	lr

0000ee08 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    ee08:	7900      	ldrb	r0, [r0, #4]
    ee0a:	4770      	bx	lr

0000ee0c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    ee0c:	8901      	ldrh	r1, [r0, #8]
    ee0e:	291b      	cmp	r1, #27
    ee10:	d30c      	bcc.n	ee2c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ee12:	8941      	ldrh	r1, [r0, #10]
    ee14:	f44f 72a4 	mov.w	r2, #328	; 0x148
    ee18:	4291      	cmp	r1, r2
    ee1a:	d307      	bcc.n	ee2c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ee1c:	8881      	ldrh	r1, [r0, #4]
    ee1e:	291b      	cmp	r1, #27
    ee20:	d304      	bcc.n	ee2c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ee22:	88c0      	ldrh	r0, [r0, #6]
    ee24:	4290      	cmp	r0, r2
    ee26:	d301      	bcc.n	ee2c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ee28:	2001      	movs	r0, #1
    ee2a:	4770      	bx	lr
    ee2c:	2000      	movs	r0, #0
    ee2e:	4770      	bx	lr

0000ee30 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    ee30:	b510      	push	{r4, lr}
    ee32:	29fb      	cmp	r1, #251	; 0xfb
    ee34:	d904      	bls.n	ee40 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    ee36:	f44f 61af 	mov.w	r1, #1400	; 0x578
    ee3a:	202a      	movs	r0, #42	; 0x2a
    ee3c:	f7f5 ff6c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee40:	7041      	strb	r1, [r0, #1]
    ee42:	bd10      	pop	{r4, pc}

0000ee44 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    ee44:	7901      	ldrb	r1, [r0, #4]
    ee46:	0749      	lsls	r1, r1, #29
    ee48:	d004      	beq.n	ee54 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    ee4a:	7940      	ldrb	r0, [r0, #5]
    ee4c:	0740      	lsls	r0, r0, #29
    ee4e:	d001      	beq.n	ee54 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    ee50:	2001      	movs	r0, #1
    ee52:	4770      	bx	lr
    ee54:	2000      	movs	r0, #0
    ee56:	4770      	bx	lr

0000ee58 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
    ee58:	7901      	ldrb	r1, [r0, #4]
    ee5a:	0749      	lsls	r1, r1, #29
    ee5c:	d004      	beq.n	ee68 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    ee5e:	7940      	ldrb	r0, [r0, #5]
    ee60:	0740      	lsls	r0, r0, #29
    ee62:	d001      	beq.n	ee68 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    ee64:	2001      	movs	r0, #1
    ee66:	4770      	bx	lr
    ee68:	2000      	movs	r0, #0
    ee6a:	4770      	bx	lr

0000ee6c <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    ee6c:	7900      	ldrb	r0, [r0, #4]
    ee6e:	4770      	bx	lr

0000ee70 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    ee70:	7940      	ldrb	r0, [r0, #5]
    ee72:	4770      	bx	lr

0000ee74 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    ee74:	7101      	strb	r1, [r0, #4]
    ee76:	4770      	bx	lr

0000ee78 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    ee78:	7141      	strb	r1, [r0, #5]
    ee7a:	4770      	bx	lr

0000ee7c <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
    ee7c:	680a      	ldr	r2, [r1, #0]
    ee7e:	6042      	str	r2, [r0, #4]
    ee80:	7909      	ldrb	r1, [r1, #4]
    ee82:	7201      	strb	r1, [r0, #8]
    ee84:	4770      	bx	lr

0000ee86 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
    ee86:	72c1      	strb	r1, [r0, #11]
    ee88:	0a09      	lsrs	r1, r1, #8
    ee8a:	7301      	strb	r1, [r0, #12]
    ee8c:	4770      	bx	lr

0000ee8e <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
    ee8e:	8809      	ldrh	r1, [r1, #0]
    ee90:	8181      	strh	r1, [r0, #12]
    ee92:	4770      	bx	lr

0000ee94 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
    ee94:	6809      	ldr	r1, [r1, #0]
    ee96:	f8c0 1016 	str.w	r1, [r0, #22]
    ee9a:	4770      	bx	lr

0000ee9c <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
    ee9c:	680a      	ldr	r2, [r1, #0]
    ee9e:	6042      	str	r2, [r0, #4]
    eea0:	6849      	ldr	r1, [r1, #4]
    eea2:	6081      	str	r1, [r0, #8]
    eea4:	4770      	bx	lr

0000eea6 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
    eea6:	680a      	ldr	r2, [r1, #0]
    eea8:	f840 2f0e 	str.w	r2, [r0, #14]!
    eeac:	6849      	ldr	r1, [r1, #4]
    eeae:	6041      	str	r1, [r0, #4]
    eeb0:	4770      	bx	lr

0000eeb2 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    eeb2:	680a      	ldr	r2, [r1, #0]
    eeb4:	6042      	str	r2, [r0, #4]
    eeb6:	6849      	ldr	r1, [r1, #4]
    eeb8:	6081      	str	r1, [r0, #8]
    eeba:	4770      	bx	lr

0000eebc <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    eebc:	7802      	ldrb	r2, [r0, #0]
    eebe:	f001 0103 	and.w	r1, r1, #3
    eec2:	f022 0203 	bic.w	r2, r2, #3
    eec6:	430a      	orrs	r2, r1
    eec8:	7002      	strb	r2, [r0, #0]
    eeca:	4770      	bx	lr

0000eecc <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
    eecc:	7101      	strb	r1, [r0, #4]
    eece:	4770      	bx	lr

0000eed0 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    eed0:	7101      	strb	r1, [r0, #4]
    eed2:	0a09      	lsrs	r1, r1, #8
    eed4:	7141      	strb	r1, [r0, #5]
    eed6:	4770      	bx	lr

0000eed8 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    eed8:	7181      	strb	r1, [r0, #6]
    eeda:	0a09      	lsrs	r1, r1, #8
    eedc:	71c1      	strb	r1, [r0, #7]
    eede:	4770      	bx	lr

0000eee0 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    eee0:	7201      	strb	r1, [r0, #8]
    eee2:	0a09      	lsrs	r1, r1, #8
    eee4:	7241      	strb	r1, [r0, #9]
    eee6:	4770      	bx	lr

0000eee8 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    eee8:	7281      	strb	r1, [r0, #10]
    eeea:	0a09      	lsrs	r1, r1, #8
    eeec:	72c1      	strb	r1, [r0, #11]
    eeee:	4770      	bx	lr

0000eef0 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
    eef0:	7181      	strb	r1, [r0, #6]
    eef2:	0a09      	lsrs	r1, r1, #8
    eef4:	71c1      	strb	r1, [r0, #7]
    eef6:	4770      	bx	lr

0000eef8 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
    eef8:	7141      	strb	r1, [r0, #5]
    eefa:	4770      	bx	lr

0000eefc <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    eefc:	7841      	ldrb	r1, [r0, #1]
    eefe:	7800      	ldrb	r0, [r0, #0]
    ef00:	f010 000f 	ands.w	r0, r0, #15
    ef04:	d005      	beq.n	ef12 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    ef06:	2801      	cmp	r0, #1
    ef08:	d007      	beq.n	ef1a <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x1e>
    ef0a:	2802      	cmp	r0, #2
    ef0c:	d001      	beq.n	ef12 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    ef0e:	2806      	cmp	r0, #6
    ef10:	d105      	bne.n	ef1e <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    ef12:	1f89      	subs	r1, r1, #6
    ef14:	291f      	cmp	r1, #31
    ef16:	d904      	bls.n	ef22 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    ef18:	e001      	b.n	ef1e <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    ef1a:	290c      	cmp	r1, #12
    ef1c:	d001      	beq.n	ef22 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    ef1e:	2000      	movs	r0, #0
    ef20:	4770      	bx	lr
    ef22:	2001      	movs	r0, #1
    ef24:	4770      	bx	lr

0000ef26 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    ef26:	7800      	ldrb	r0, [r0, #0]
    ef28:	09c0      	lsrs	r0, r0, #7
    ef2a:	4770      	bx	lr

0000ef2c <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
    ef2c:	f850 2f03 	ldr.w	r2, [r0, #3]!
    ef30:	600a      	str	r2, [r1, #0]
    ef32:	8880      	ldrh	r0, [r0, #4]
    ef34:	8088      	strh	r0, [r1, #4]
    ef36:	4770      	bx	lr

0000ef38 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    ef38:	7800      	ldrb	r0, [r0, #0]
    ef3a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    ef3e:	4770      	bx	lr

0000ef40 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    ef40:	7801      	ldrb	r1, [r0, #0]
    ef42:	f001 010f 	and.w	r1, r1, #15
    ef46:	2904      	cmp	r1, #4
    ef48:	d105      	bne.n	ef56 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    ef4a:	7840      	ldrb	r0, [r0, #1]
    ef4c:	1f80      	subs	r0, r0, #6
    ef4e:	281f      	cmp	r0, #31
    ef50:	d801      	bhi.n	ef56 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    ef52:	2001      	movs	r0, #1
    ef54:	4770      	bx	lr
    ef56:	2000      	movs	r0, #0
    ef58:	4770      	bx	lr

0000ef5a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    ef5a:	b510      	push	{r4, lr}
    ef5c:	7802      	ldrb	r2, [r0, #0]
    ef5e:	f001 030f 	and.w	r3, r1, #15
    ef62:	f022 020f 	bic.w	r2, r2, #15
    ef66:	431a      	orrs	r2, r3
    ef68:	7002      	strb	r2, [r0, #0]
    ef6a:	2907      	cmp	r1, #7
    ef6c:	d20c      	bcs.n	ef88 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    ef6e:	e8df f001 	tbb	[pc, r1]
    ef72:	0604      	.short	0x0604
    ef74:	08040604 	.word	0x08040604
    ef78:	0004      	.short	0x0004
    ef7a:	2106      	movs	r1, #6
    ef7c:	e002      	b.n	ef84 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    ef7e:	210c      	movs	r1, #12
    ef80:	e000      	b.n	ef84 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    ef82:	2122      	movs	r1, #34	; 0x22
    ef84:	7041      	strb	r1, [r0, #1]
    ef86:	bd10      	pop	{r4, pc}
    ef88:	216e      	movs	r1, #110	; 0x6e
    ef8a:	202a      	movs	r0, #42	; 0x2a
    ef8c:	f7f5 fec4 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ef90 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    ef90:	680a      	ldr	r2, [r1, #0]
    ef92:	f840 2f09 	str.w	r2, [r0, #9]!
    ef96:	8889      	ldrh	r1, [r1, #4]
    ef98:	8081      	strh	r1, [r0, #4]
    ef9a:	4770      	bx	lr

0000ef9c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    ef9c:	7802      	ldrb	r2, [r0, #0]
    ef9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    efa2:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    efa6:	7002      	strb	r2, [r0, #0]
    efa8:	4770      	bx	lr

0000efaa <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    efaa:	680a      	ldr	r2, [r1, #0]
    efac:	f840 2f03 	str.w	r2, [r0, #3]!
    efb0:	8889      	ldrh	r1, [r1, #4]
    efb2:	8081      	strh	r1, [r0, #4]
    efb4:	4770      	bx	lr

0000efb6 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    efb6:	7802      	ldrb	r2, [r0, #0]
    efb8:	2340      	movs	r3, #64	; 0x40
    efba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    efbe:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    efc2:	430a      	orrs	r2, r1
    efc4:	7002      	strb	r2, [r0, #0]
    efc6:	4770      	bx	lr

0000efc8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    efc8:	2101      	movs	r1, #1
    efca:	f000 b847 	b.w	f05c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    efce:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    efd2:	460e      	mov	r6, r1
    efd4:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    efd8:	4617      	mov	r7, r2
    efda:	39ff      	subs	r1, #255	; 0xff
    efdc:	d014      	beq.n	f008 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x40>
    efde:	8030      	strh	r0, [r6, #0]
    efe0:	2100      	movs	r1, #0
    efe2:	7171      	strb	r1, [r6, #5]
    efe4:	f7f6 fa96 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    efe8:	4604      	mov	r4, r0
    efea:	f7ff f964 	bl	e2b6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    efee:	0005      	movs	r5, r0
    eff0:	d00a      	beq.n	f008 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x40>
    eff2:	4620      	mov	r0, r4
    eff4:	4629      	mov	r1, r5
    eff6:	aa01      	add	r2, sp, #4
    eff8:	f7ff f98e 	bl	e318 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    effc:	8070      	strh	r0, [r6, #2]
    effe:	b130      	cbz	r0, f00e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x46>
    f000:	28fb      	cmp	r0, #251	; 0xfb
    f002:	d906      	bls.n	f012 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x4a>
    f004:	21c9      	movs	r1, #201	; 0xc9
    f006:	e026      	b.n	f056 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    f008:	2000      	movs	r0, #0
    f00a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f00e:	21c8      	movs	r1, #200	; 0xc8
    f010:	e021      	b.n	f056 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    f012:	9801      	ldr	r0, [sp, #4]
    f014:	f7ff feea 	bl	edec <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    f018:	2801      	cmp	r0, #1
    f01a:	d003      	beq.n	f024 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x5c>
    f01c:	2802      	cmp	r0, #2
    f01e:	d001      	beq.n	f024 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x5c>
    f020:	21d8      	movs	r1, #216	; 0xd8
    f022:	e018      	b.n	f056 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    f024:	7130      	strb	r0, [r6, #4]
    f026:	4629      	mov	r1, r5
    f028:	8873      	ldrh	r3, [r6, #2]
    f02a:	2503      	movs	r5, #3
    f02c:	4620      	mov	r0, r4
    f02e:	463a      	mov	r2, r7
    f030:	9500      	str	r5, [sp, #0]
    f032:	f7ff f817 	bl	e064 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    f036:	4620      	mov	r0, r4
    f038:	60b7      	str	r7, [r6, #8]
    f03a:	f7ff f8eb 	bl	e214 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f03e:	b138      	cbz	r0, f050 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x88>
    f040:	2100      	movs	r1, #0
    f042:	4620      	mov	r0, r4
    f044:	460a      	mov	r2, r1
    f046:	f7ff fa45 	bl	e4d4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f04a:	b118      	cbz	r0, f054 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8c>
    f04c:	2001      	movs	r0, #1
    f04e:	e7dc      	b.n	f00a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x42>
    f050:	21e8      	movs	r1, #232	; 0xe8
    f052:	e000      	b.n	f056 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    f054:	21ed      	movs	r1, #237	; 0xed
    f056:	202b      	movs	r0, #43	; 0x2b
    f058:	f7f5 fe5e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f05c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f060:	4604      	mov	r4, r0
    f062:	460e      	mov	r6, r1
    f064:	2000      	movs	r0, #0
    f066:	f7f6 f83b 	bl	50e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f06a:	4605      	mov	r5, r0
    f06c:	2000      	movs	r0, #0
    f06e:	b906      	cbnz	r6, f072 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xaa>
    f070:	2001      	movs	r0, #1
    f072:	2600      	movs	r6, #0
    f074:	46b0      	mov	r8, r6
    f076:	182f      	adds	r7, r5, r0
    f078:	e017      	b.n	f0aa <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xe2>
    f07a:	8820      	ldrh	r0, [r4, #0]
    f07c:	1c40      	adds	r0, r0, #1
    f07e:	b280      	uxth	r0, r0
    f080:	8020      	strh	r0, [r4, #0]
    f082:	42b8      	cmp	r0, r7
    f084:	d302      	bcc.n	f08c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xc4>
    f086:	4640      	mov	r0, r8
    f088:	f8a4 8000 	strh.w	r8, [r4]
    f08c:	b280      	uxth	r0, r0
    f08e:	42a8      	cmp	r0, r5
    f090:	d304      	bcc.n	f09c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd4>
    f092:	42b8      	cmp	r0, r7
    f094:	d202      	bcs.n	f09c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd4>
    f096:	2000      	movs	r0, #0
    f098:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f09c:	4669      	mov	r1, sp
    f09e:	f7ff fc5e 	bl	e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f0a2:	2800      	cmp	r0, #0
    f0a4:	d0f8      	beq.n	f098 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd0>
    f0a6:	1c76      	adds	r6, r6, #1
    f0a8:	b2f6      	uxtb	r6, r6
    f0aa:	42b7      	cmp	r7, r6
    f0ac:	d8e5      	bhi.n	f07a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xb2>
    f0ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f0b2:	8020      	strh	r0, [r4, #0]
    f0b4:	2012      	movs	r0, #18
    f0b6:	e7ef      	b.n	f098 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd0>

0000f0b8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    f0b8:	b570      	push	{r4, r5, r6, lr}
    f0ba:	8050      	strh	r0, [r2, #2]
    f0bc:	890c      	ldrh	r4, [r1, #8]
    f0be:	8094      	strh	r4, [r2, #4]
    f0c0:	898b      	ldrh	r3, [r1, #12]
    f0c2:	80d3      	strh	r3, [r2, #6]
    f0c4:	8948      	ldrh	r0, [r1, #10]
    f0c6:	8110      	strh	r0, [r2, #8]
    f0c8:	89cd      	ldrh	r5, [r1, #14]
    f0ca:	8155      	strh	r5, [r2, #10]
    f0cc:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    f0ce:	42ae      	cmp	r6, r5
    f0d0:	d108      	bne.n	f0e4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f0d2:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    f0d4:	4285      	cmp	r5, r0
    f0d6:	d105      	bne.n	f0e4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f0d8:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    f0da:	429d      	cmp	r5, r3
    f0dc:	d102      	bne.n	f0e4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f0de:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    f0e0:	42a3      	cmp	r3, r4
    f0e2:	d001      	beq.n	f0e8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    f0e4:	2301      	movs	r3, #1
    f0e6:	e000      	b.n	f0ea <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    f0e8:	2300      	movs	r3, #0
    f0ea:	7313      	strb	r3, [r2, #12]
    f0ec:	8548      	strh	r0, [r1, #42]	; 0x2a
    f0ee:	8950      	ldrh	r0, [r2, #10]
    f0f0:	85c8      	strh	r0, [r1, #46]	; 0x2e
    f0f2:	8890      	ldrh	r0, [r2, #4]
    f0f4:	8588      	strh	r0, [r1, #44]	; 0x2c
    f0f6:	88d0      	ldrh	r0, [r2, #6]
    f0f8:	8608      	strh	r0, [r1, #48]	; 0x30
    f0fa:	2001      	movs	r0, #1
    f0fc:	7010      	strb	r0, [r2, #0]
    f0fe:	bd70      	pop	{r4, r5, r6, pc}

0000f100 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    f100:	b510      	push	{r4, lr}
    f102:	888c      	ldrh	r4, [r1, #4]
    f104:	890a      	ldrh	r2, [r1, #8]
    f106:	884b      	ldrh	r3, [r1, #2]
    f108:	88c9      	ldrh	r1, [r1, #6]
    f10a:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    f10e:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    f112:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    f116:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    f11a:	bd10      	pop	{r4, pc}

0000f11c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    f11c:	b570      	push	{r4, r5, r6, lr}
    f11e:	4615      	mov	r5, r2
    f120:	460c      	mov	r4, r1
    f122:	f000 f8c7 	bl	f2b4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    f126:	3096      	adds	r0, #150	; 0x96
    f128:	4428      	add	r0, r5
    f12a:	42a0      	cmp	r0, r4
    f12c:	d801      	bhi.n	f132 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    f12e:	1a20      	subs	r0, r4, r0
    f130:	bd70      	pop	{r4, r5, r6, pc}
    f132:	2000      	movs	r0, #0
    f134:	bd70      	pop	{r4, r5, r6, pc}

0000f136 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    f136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f13a:	4604      	mov	r4, r0
    f13c:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    f13e:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    f140:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    f144:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    f148:	4285      	cmp	r5, r0
    f14a:	d300      	bcc.n	f14e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    f14c:	4605      	mov	r5, r0
    f14e:	4620      	mov	r0, r4
    f150:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    f154:	f000 f89e 	bl	f294 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f158:	4601      	mov	r1, r0
    f15a:	86e5      	strh	r5, [r4, #54]	; 0x36
    f15c:	8761      	strh	r1, [r4, #58]	; 0x3a
    f15e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    f160:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f164:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    f166:	4680      	mov	r8, r0
    f168:	42aa      	cmp	r2, r5
    f16a:	d200      	bcs.n	f16e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    f16c:	462a      	mov	r2, r5
    f16e:	428b      	cmp	r3, r1
    f170:	d200      	bcs.n	f174 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    f172:	460b      	mov	r3, r1
    f174:	8202      	strh	r2, [r0, #16]
    f176:	f8a8 3012 	strh.w	r3, [r8, #18]
    f17a:	42bd      	cmp	r5, r7
    f17c:	d101      	bne.n	f182 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    f17e:	42b1      	cmp	r1, r6
    f180:	d001      	beq.n	f186 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    f182:	2001      	movs	r0, #1
    f184:	e000      	b.n	f188 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    f186:	2000      	movs	r0, #0
    f188:	4681      	mov	r9, r0
    f18a:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    f18e:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    f192:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    f194:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    f196:	4285      	cmp	r5, r0
    f198:	d300      	bcc.n	f19c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    f19a:	4605      	mov	r5, r0
    f19c:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    f1a0:	4620      	mov	r0, r4
    f1a2:	f000 f87f 	bl	f2a4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    f1a6:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    f1aa:	2902      	cmp	r1, #2
    f1ac:	d108      	bne.n	f1c0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    f1ae:	42af      	cmp	r7, r5
    f1b0:	d200      	bcs.n	f1b4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    f1b2:	463d      	mov	r5, r7
    f1b4:	4286      	cmp	r6, r0
    f1b6:	d200      	bcs.n	f1ba <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    f1b8:	4630      	mov	r0, r6
    f1ba:	2100      	movs	r1, #0
    f1bc:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    f1c0:	f8a8 5008 	strh.w	r5, [r8, #8]
    f1c4:	f8a8 000c 	strh.w	r0, [r8, #12]
    f1c8:	42bd      	cmp	r5, r7
    f1ca:	d101      	bne.n	f1d0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    f1cc:	42b0      	cmp	r0, r6
    f1ce:	d001      	beq.n	f1d4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    f1d0:	2001      	movs	r0, #1
    f1d2:	e000      	b.n	f1d6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    f1d4:	2000      	movs	r0, #0
    f1d6:	ea40 0009 	orr.w	r0, r0, r9
    f1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f1de <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    f1de:	6840      	ldr	r0, [r0, #4]
    f1e0:	4770      	bx	lr

0000f1e2 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    f1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1e6:	4616      	mov	r6, r2
    f1e8:	460f      	mov	r7, r1
    f1ea:	4604      	mov	r4, r0
    f1ec:	f000 f862 	bl	f2b4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    f1f0:	4605      	mov	r5, r0
    f1f2:	463a      	mov	r2, r7
    f1f4:	68e1      	ldr	r1, [r4, #12]
    f1f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f1f8:	f000 f847 	bl	f28a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    f1fc:	19a9      	adds	r1, r5, r6
    f1fe:	4281      	cmp	r1, r0
    f200:	d300      	bcc.n	f204 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    f202:	4608      	mov	r0, r1
    f204:	6320      	str	r0, [r4, #48]	; 0x30
    f206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f20a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    f20a:	221b      	movs	r2, #27
    f20c:	8402      	strh	r2, [r0, #32]
    f20e:	8382      	strh	r2, [r0, #28]
    f210:	82c2      	strh	r2, [r0, #22]
    f212:	8282      	strh	r2, [r0, #20]
    f214:	8142      	strh	r2, [r0, #10]
    f216:	8202      	strh	r2, [r0, #16]
    f218:	8102      	strh	r2, [r0, #8]
    f21a:	8542      	strh	r2, [r0, #42]	; 0x2a
    f21c:	8582      	strh	r2, [r0, #44]	; 0x2c
    f21e:	8482      	strh	r2, [r0, #36]	; 0x24
    f220:	2900      	cmp	r1, #0
    f222:	d10a      	bne.n	f23a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    f224:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f228:	8441      	strh	r1, [r0, #34]	; 0x22
    f22a:	83c1      	strh	r1, [r0, #30]
    f22c:	8341      	strh	r1, [r0, #26]
    f22e:	8301      	strh	r1, [r0, #24]
    f230:	81c1      	strh	r1, [r0, #14]
    f232:	8241      	strh	r1, [r0, #18]
    f234:	8181      	strh	r1, [r0, #12]
    f236:	85c1      	strh	r1, [r0, #46]	; 0x2e
    f238:	8601      	strh	r1, [r0, #48]	; 0x30
    f23a:	4770      	bx	lr

0000f23c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    f23c:	6800      	ldr	r0, [r0, #0]
    f23e:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    f242:	4290      	cmp	r0, r2
    f244:	d903      	bls.n	f24e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    f246:	1a40      	subs	r0, r0, r1
    f248:	389c      	subs	r0, #156	; 0x9c
    f24a:	0840      	lsrs	r0, r0, #1
    f24c:	4770      	bx	lr
    f24e:	2000      	movs	r0, #0
    f250:	4770      	bx	lr

0000f252 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    f252:	b510      	push	{r4, lr}
    f254:	9c02      	ldr	r4, [sp, #8]
    f256:	8281      	strh	r1, [r0, #20]
    f258:	82c2      	strh	r2, [r0, #22]
    f25a:	8303      	strh	r3, [r0, #24]
    f25c:	8344      	strh	r4, [r0, #26]
    f25e:	bd10      	pop	{r4, pc}

0000f260 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    f260:	8050      	strh	r0, [r2, #2]
    f262:	8a88      	ldrh	r0, [r1, #20]
    f264:	8090      	strh	r0, [r2, #4]
    f266:	8ac8      	ldrh	r0, [r1, #22]
    f268:	80d0      	strh	r0, [r2, #6]
    f26a:	8b08      	ldrh	r0, [r1, #24]
    f26c:	8110      	strh	r0, [r2, #8]
    f26e:	8b48      	ldrh	r0, [r1, #26]
    f270:	8150      	strh	r0, [r2, #10]
    f272:	2001      	movs	r0, #1
    f274:	7010      	strb	r0, [r2, #0]
    f276:	4770      	bx	lr
    f278:	2902      	cmp	r1, #2
    f27a:	d003      	beq.n	f284 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    f27c:	00c0      	lsls	r0, r0, #3
    f27e:	3070      	adds	r0, #112	; 0x70
    f280:	b280      	uxth	r0, r0
    f282:	4770      	bx	lr
    f284:	0080      	lsls	r0, r0, #2
    f286:	303c      	adds	r0, #60	; 0x3c
    f288:	e7fa      	b.n	f280 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    f28a:	4288      	cmp	r0, r1
    f28c:	d300      	bcc.n	f290 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    f28e:	4608      	mov	r0, r1
    f290:	1a80      	subs	r0, r0, r2
    f292:	4770      	bx	lr
    f294:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    f298:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    f29c:	4281      	cmp	r1, r0
    f29e:	d200      	bcs.n	f2a2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    f2a0:	4608      	mov	r0, r1
    f2a2:	4770      	bx	lr
    f2a4:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    f2a8:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    f2ac:	4281      	cmp	r1, r0
    f2ae:	d200      	bcs.n	f2b2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    f2b0:	4608      	mov	r0, r1
    f2b2:	4770      	bx	lr
    f2b4:	2196      	movs	r1, #150	; 0x96
    f2b6:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    f2ba:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    f2be:	f000 b800 	b.w	f2c2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    f2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2c6:	460d      	mov	r5, r1
    f2c8:	4606      	mov	r6, r0
    f2ca:	4698      	mov	r8, r3
    f2cc:	4617      	mov	r7, r2
    f2ce:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    f2d0:	4611      	mov	r1, r2
    f2d2:	f7ff ffd1 	bl	f278 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    f2d6:	4604      	mov	r4, r0
    f2d8:	4639      	mov	r1, r7
    f2da:	4630      	mov	r0, r6
    f2dc:	f7ff ffe2 	bl	f2a4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    f2e0:	42a0      	cmp	r0, r4
    f2e2:	d200      	bcs.n	f2e6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    f2e4:	4604      	mov	r4, r0
    f2e6:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    f2e8:	4641      	mov	r1, r8
    f2ea:	f7ff ffc5 	bl	f278 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    f2ee:	4607      	mov	r7, r0
    f2f0:	4641      	mov	r1, r8
    f2f2:	4630      	mov	r0, r6
    f2f4:	f7ff ffce 	bl	f294 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f2f8:	42b8      	cmp	r0, r7
    f2fa:	d300      	bcc.n	f2fe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    f2fc:	4638      	mov	r0, r7
    f2fe:	4420      	add	r0, r4
    f300:	4428      	add	r0, r5
    f302:	1d80      	adds	r0, r0, #6
    f304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f308:	2801      	cmp	r0, #1
    f30a:	d102      	bne.n	f312 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    f30c:	7948      	ldrb	r0, [r1, #5]
    f30e:	0980      	lsrs	r0, r0, #6
    f310:	d001      	beq.n	f316 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    f312:	2000      	movs	r0, #0
    f314:	4770      	bx	lr
    f316:	2001      	movs	r0, #1
    f318:	4770      	bx	lr
    f31a:	2801      	cmp	r0, #1
    f31c:	d106      	bne.n	f32c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    f31e:	7948      	ldrb	r0, [r1, #5]
    f320:	2101      	movs	r1, #1
    f322:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f326:	d101      	bne.n	f32c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    f328:	2001      	movs	r0, #1
    f32a:	4770      	bx	lr
    f32c:	2000      	movs	r0, #0
    f32e:	4770      	bx	lr
    f330:	b118      	cbz	r0, f33a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xda>
    f332:	2802      	cmp	r0, #2
    f334:	d001      	beq.n	f33a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xda>
    f336:	2001      	movs	r0, #1
    f338:	4770      	bx	lr
    f33a:	2000      	movs	r0, #0
    f33c:	4770      	bx	lr
    f33e:	2802      	cmp	r0, #2
    f340:	d003      	beq.n	f34a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xea>
    f342:	2803      	cmp	r0, #3
    f344:	d001      	beq.n	f34a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xea>
    f346:	2000      	movs	r0, #0
    f348:	4770      	bx	lr
    f34a:	2001      	movs	r0, #1
    f34c:	4770      	bx	lr

0000f34e <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    f34e:	f7f9 b86b 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    f352:	b510      	push	{r4, lr}
    f354:	f7f8 feb6 	bl	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    f358:	f7f8 fa76 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    f35c:	f7fd f8b4 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f360:	2005      	movs	r0, #5
    f362:	bd10      	pop	{r4, pc}
    f364:	b510      	push	{r4, lr}
    f366:	f7f8 fead 	bl	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    f36a:	f7fd f8ad 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f36e:	2005      	movs	r0, #5
    f370:	bd10      	pop	{r4, pc}
    f372:	b530      	push	{r4, r5, lr}
    f374:	b089      	sub	sp, #36	; 0x24
    f376:	4605      	mov	r5, r0
    f378:	f7f8 fea4 	bl	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    f37c:	7828      	ldrb	r0, [r5, #0]
    f37e:	4669      	mov	r1, sp
    f380:	f000 040f 	and.w	r4, r0, #15
    f384:	4622      	mov	r2, r4
    f386:	4628      	mov	r0, r5
    f388:	f7f9 fa0c 	bl	87a4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    f38c:	2200      	movs	r2, #0
    f38e:	4621      	mov	r1, r4
    f390:	4668      	mov	r0, sp
    f392:	f7f8 fad9 	bl	7948 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13c>
    f396:	4602      	mov	r2, r0
    f398:	4621      	mov	r1, r4
    f39a:	4668      	mov	r0, sp
    f39c:	f7f8 fe10 	bl	7fc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7b4>
    f3a0:	4604      	mov	r4, r0
    f3a2:	f7f8 fa51 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    f3a6:	b009      	add	sp, #36	; 0x24
    f3a8:	4620      	mov	r0, r4
    f3aa:	bd30      	pop	{r4, r5, pc}
    f3ac:	f240 21c5 	movw	r1, #709	; 0x2c5
    f3b0:	2032      	movs	r0, #50	; 0x32
    f3b2:	f7f5 fcb1 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3b6:	b510      	push	{r4, lr}
    f3b8:	f7f8 fe84 	bl	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    f3bc:	f7fd f884 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3c4:	f7f9 b848 	b.w	8458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>
    f3c8:	f7f9 b82e 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    f3cc:	f7ff b8b6 	b.w	e53c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>

0000f3d0 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>:
    f3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3d2:	b08b      	sub	sp, #44	; 0x2c
    f3d4:	4607      	mov	r7, r0
    f3d6:	f7f6 f8d1 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f3da:	4604      	mov	r4, r0
    f3dc:	f7fe ff6b 	bl	e2b6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    f3e0:	0005      	movs	r5, r0
    f3e2:	d00c      	beq.n	f3fe <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x2e>
    f3e4:	4620      	mov	r0, r4
    f3e6:	4629      	mov	r1, r5
    f3e8:	466a      	mov	r2, sp
    f3ea:	f7fe ff95 	bl	e318 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    f3ee:	4606      	mov	r6, r0
    f3f0:	f7f6 f8be 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    f3f4:	42b0      	cmp	r0, r6
    f3f6:	d005      	beq.n	f404 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x34>
    f3f8:	f44f 7197 	mov.w	r1, #302	; 0x12e
    f3fc:	e033      	b.n	f466 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x96>
    f3fe:	2000      	movs	r0, #0
    f400:	b00b      	add	sp, #44	; 0x2c
    f402:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f404:	a901      	add	r1, sp, #4
    f406:	9800      	ldr	r0, [sp, #0]
    f408:	f000 f8b4 	bl	f574 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    f40c:	1d3e      	adds	r6, r7, #4
    f40e:	4628      	mov	r0, r5
    f410:	f7fe fee5 	bl	e1de <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    f414:	4605      	mov	r5, r0
    f416:	4601      	mov	r1, r0
    f418:	221c      	movs	r2, #28
    f41a:	4630      	mov	r0, r6
    f41c:	f7fe f884 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f420:	7aa8      	ldrb	r0, [r5, #10]
    f422:	f04f 0500 	mov.w	r5, #0
    f426:	06c1      	lsls	r1, r0, #27
    f428:	d50d      	bpl.n	f446 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    f42a:	0740      	lsls	r0, r0, #29
    f42c:	d40a      	bmi.n	f444 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x74>
    f42e:	f89d 2014 	ldrb.w	r2, [sp, #20]
    f432:	f106 001c 	add.w	r0, r6, #28
    f436:	9904      	ldr	r1, [sp, #16]
    f438:	f7fe f876 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f43c:	f89d 0014 	ldrb.w	r0, [sp, #20]
    f440:	7230      	strb	r0, [r6, #8]
    f442:	e000      	b.n	f446 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    f444:	7235      	strb	r5, [r6, #8]
    f446:	707d      	strb	r5, [r7, #1]
    f448:	2005      	movs	r0, #5
    f44a:	7038      	strb	r0, [r7, #0]
    f44c:	4620      	mov	r0, r4
    f44e:	f7fe fee1 	bl	e214 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f452:	b130      	cbz	r0, f462 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x92>
    f454:	2100      	movs	r1, #0
    f456:	4620      	mov	r0, r4
    f458:	460a      	mov	r2, r1
    f45a:	f7ff f83b 	bl	e4d4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f45e:	2001      	movs	r0, #1
    f460:	e7ce      	b.n	f400 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x30>
    f462:	f240 1171 	movw	r1, #369	; 0x171
    f466:	2033      	movs	r0, #51	; 0x33
    f468:	f7f5 fc56 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f46c <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    f46c:	b510      	push	{r4, lr}
    f46e:	f7f6 f885 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f472:	f000 f874 	bl	f55e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    f476:	4604      	mov	r4, r0
    f478:	221c      	movs	r2, #28
    f47a:	2100      	movs	r1, #0
    f47c:	f7fe f8ce 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f480:	207f      	movs	r0, #127	; 0x7f
    f482:	76a0      	strb	r0, [r4, #26]
    f484:	21ff      	movs	r1, #255	; 0xff
    f486:	73a1      	strb	r1, [r4, #14]
    f488:	7061      	strb	r1, [r4, #1]
    f48a:	74e1      	strb	r1, [r4, #19]
    f48c:	7aa0      	ldrb	r0, [r4, #10]
    f48e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    f492:	3020      	adds	r0, #32
    f494:	72a0      	strb	r0, [r4, #10]
    f496:	bd10      	pop	{r4, pc}

0000f498 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>:
    f498:	f7ff bfe8 	b.w	f46c <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>

0000f49c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    f49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f4a0:	461e      	mov	r6, r3
    f4a2:	4617      	mov	r7, r2
    f4a4:	4689      	mov	r9, r1
    f4a6:	4682      	mov	sl, r0
    f4a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    f4ac:	f7f6 f866 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f4b0:	4604      	mov	r4, r0
    f4b2:	f7fe fe96 	bl	e1e2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    f4b6:	2801      	cmp	r0, #1
    f4b8:	d034      	beq.n	f524 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    f4ba:	4620      	mov	r0, r4
    f4bc:	f000 f84f 	bl	f55e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    f4c0:	4604      	mov	r4, r0
    f4c2:	221c      	movs	r2, #28
    f4c4:	2100      	movs	r1, #0
    f4c6:	f7fe f8a9 	bl	d61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f4ca:	2501      	movs	r5, #1
    f4cc:	7025      	strb	r5, [r4, #0]
    f4ce:	1c63      	adds	r3, r4, #1
    f4d0:	1ca2      	adds	r2, r4, #2
    f4d2:	4649      	mov	r1, r9
    f4d4:	4650      	mov	r0, sl
    f4d6:	f000 f827 	bl	f528 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    f4da:	f884 8009 	strb.w	r8, [r4, #9]
    f4de:	7aa0      	ldrb	r0, [r4, #10]
    f4e0:	21ff      	movs	r1, #255	; 0xff
    f4e2:	f367 0000 	bfi	r0, r7, #0, #1
    f4e6:	f040 001a 	orr.w	r0, r0, #26
    f4ea:	72a0      	strb	r0, [r4, #10]
    f4ec:	7325      	strb	r5, [r4, #12]
    f4ee:	2000      	movs	r0, #0
    f4f0:	7360      	strb	r0, [r4, #13]
    f4f2:	73a1      	strb	r1, [r4, #14]
    f4f4:	74e1      	strb	r1, [r4, #19]
    f4f6:	207f      	movs	r0, #127	; 0x7f
    f4f8:	76a0      	strb	r0, [r4, #26]
    f4fa:	76e6      	strb	r6, [r4, #27]
    f4fc:	f7f6 f838 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    f500:	4604      	mov	r4, r0
    f502:	f7f6 f83b 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f506:	2201      	movs	r2, #1
    f508:	4621      	mov	r1, r4
    f50a:	f000 f831 	bl	f570 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    f50e:	b120      	cbz	r0, f51a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x7e>
    f510:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f514:	2005      	movs	r0, #5
    f516:	f7f9 bb2d 	b.w	8b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    f51a:	f240 21c7 	movw	r1, #711	; 0x2c7
    f51e:	2033      	movs	r0, #51	; 0x33
    f520:	f7f5 fbfa 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f528:	b510      	push	{r4, lr}
    f52a:	461c      	mov	r4, r3
    f52c:	460b      	mov	r3, r1
    f52e:	29ff      	cmp	r1, #255	; 0xff
    f530:	d00d      	beq.n	f54e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xb2>
    f532:	4621      	mov	r1, r4
    f534:	4618      	mov	r0, r3
    f536:	f7f7 f8bb 	bl	66b0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    f53a:	b120      	cbz	r0, f546 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xaa>
    f53c:	7820      	ldrb	r0, [r4, #0]
    f53e:	f040 0002 	orr.w	r0, r0, #2
    f542:	7020      	strb	r0, [r4, #0]
    f544:	bd10      	pop	{r4, pc}
    f546:	2150      	movs	r1, #80	; 0x50
    f548:	2033      	movs	r0, #51	; 0x33
    f54a:	f7f5 fbe5 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f54e:	7c41      	ldrb	r1, [r0, #17]
    f550:	7021      	strb	r1, [r4, #0]
    f552:	6840      	ldr	r0, [r0, #4]
    f554:	6801      	ldr	r1, [r0, #0]
    f556:	6011      	str	r1, [r2, #0]
    f558:	8880      	ldrh	r0, [r0, #4]
    f55a:	8090      	strh	r0, [r2, #4]
    f55c:	bd10      	pop	{r4, pc}
    f55e:	b51c      	push	{r2, r3, r4, lr}
    f560:	4669      	mov	r1, sp
    f562:	aa01      	add	r2, sp, #4
    f564:	f7fe feca 	bl	e2fc <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    f568:	9800      	ldr	r0, [sp, #0]
    f56a:	f7fe fe38 	bl	e1de <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    f56e:	bd1c      	pop	{r2, r3, r4, pc}
    f570:	f7fe bddd 	b.w	e12e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000f574 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    f574:	7802      	ldrb	r2, [r0, #0]
    f576:	f002 020f 	and.w	r2, r2, #15
    f57a:	f7f9 b913 	b.w	87a4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    f57e:	2800      	cmp	r0, #0
    f580:	db04      	blt.n	f58c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x18>
    f582:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f586:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    f58a:	e005      	b.n	f598 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x24>
    f58c:	f000 000f 	and.w	r0, r0, #15
    f590:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f594:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
    f598:	0940      	lsrs	r0, r0, #5
    f59a:	4770      	bx	lr

0000f59c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI>:
    f59c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    f5a0:	4770      	bx	lr
    f5a2:	6940      	ldr	r0, [r0, #20]
    f5a4:	2800      	cmp	r0, #0
    f5a6:	d000      	beq.n	f5aa <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xe>
    f5a8:	2001      	movs	r0, #1
    f5aa:	4770      	bx	lr
    f5ac:	b510      	push	{r4, lr}
    f5ae:	2808      	cmp	r0, #8
    f5b0:	d00a      	beq.n	f5c8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x2c>
    f5b2:	2804      	cmp	r0, #4
    f5b4:	d00a      	beq.n	f5cc <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x30>
    f5b6:	2802      	cmp	r0, #2
    f5b8:	d00a      	beq.n	f5d0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x34>
    f5ba:	2108      	movs	r1, #8
    f5bc:	2801      	cmp	r0, #1
    f5be:	d009      	beq.n	f5d4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x38>
    f5c0:	21d9      	movs	r1, #217	; 0xd9
    f5c2:	2005      	movs	r0, #5
    f5c4:	f7f5 fba8 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5c8:	2140      	movs	r1, #64	; 0x40
    f5ca:	e7f7      	b.n	f5bc <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    f5cc:	2110      	movs	r1, #16
    f5ce:	e7f5      	b.n	f5bc <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    f5d0:	2104      	movs	r1, #4
    f5d2:	e7f3      	b.n	f5bc <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    f5d4:	222a      	movs	r2, #42	; 0x2a
    f5d6:	2028      	movs	r0, #40	; 0x28
    f5d8:	fb11 0002 	smlabb	r0, r1, r2, r0
    f5dc:	b280      	uxth	r0, r0
    f5de:	bd10      	pop	{r4, pc}
    f5e0:	2000      	movs	r0, #0
    f5e2:	4770      	bx	lr
    f5e4:	b570      	push	{r4, r5, r6, lr}
    f5e6:	4604      	mov	r4, r0
    f5e8:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    f5ec:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    f5f0:	f000 f80c 	bl	f60c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x70>
    f5f4:	4605      	mov	r5, r0
    f5f6:	f000 f857 	bl	f6a8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    f5fa:	4601      	mov	r1, r0
    f5fc:	462a      	mov	r2, r5
    f5fe:	4620      	mov	r0, r4
    f600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f604:	f7ff bded 	b.w	f1e2 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    f608:	f7f3 b928 	b.w	285c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f60c:	b510      	push	{r4, lr}
    f60e:	4604      	mov	r4, r0
    f610:	4608      	mov	r0, r1
    f612:	f001 f8f1 	bl	107f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f616:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f61a:	2c02      	cmp	r4, #2
    f61c:	d00a      	beq.n	f634 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x98>
    f61e:	f640 0234 	movw	r2, #2100	; 0x834
    f622:	4410      	add	r0, r2
    f624:	f24a 5295 	movw	r2, #42389	; 0xa595
    f628:	4410      	add	r0, r2
    f62a:	fbb0 f0f1 	udiv	r0, r0, r1
    f62e:	f500 709b 	add.w	r0, r0, #310	; 0x136
    f632:	bd10      	pop	{r4, pc}
    f634:	460a      	mov	r2, r1
    f636:	e7f4      	b.n	f622 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x86>
    f638:	b510      	push	{r4, lr}
    f63a:	4604      	mov	r4, r0
    f63c:	2000      	movs	r0, #0
    f63e:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    f642:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    f646:	f7f3 fd55 	bl	30f4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f64a:	b140      	cbz	r0, f65e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xc2>
    f64c:	2020      	movs	r0, #32
    f64e:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    f652:	f504 7084 	add.w	r0, r4, #264	; 0x108
    f656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f65a:	f7fb bf33 	b.w	b4c4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    f65e:	f240 5139 	movw	r1, #1337	; 0x539
    f662:	2035      	movs	r0, #53	; 0x35
    f664:	f7f5 fb58 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f66a:	4613      	mov	r3, r2
    f66c:	460a      	mov	r2, r1
    f66e:	4604      	mov	r4, r0
    f670:	4601      	mov	r1, r0
    f672:	4668      	mov	r0, sp
    f674:	f7f9 fd40 	bl	90f8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x584>
    f678:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    f67c:	4669      	mov	r1, sp
    f67e:	f7ff ffc3 	bl	f608 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    f682:	2800      	cmp	r0, #0
    f684:	d104      	bne.n	f690 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf4>
    f686:	f640 2139 	movw	r1, #2617	; 0xa39
    f68a:	2035      	movs	r0, #53	; 0x35
    f68c:	f7f5 fb44 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f690:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    f692:	b510      	push	{r4, lr}
    f694:	245b      	movs	r4, #91	; 0x5b
    f696:	f001 f86d 	bl	10774 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    f69a:	b910      	cbnz	r0, f6a2 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x106>
    f69c:	f001 f860 	bl	10760 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    f6a0:	b100      	cbz	r0, f6a4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x108>
    f6a2:	2462      	movs	r4, #98	; 0x62
    f6a4:	4620      	mov	r0, r4
    f6a6:	bd10      	pop	{r4, pc}
    f6a8:	b510      	push	{r4, lr}
    f6aa:	f7ff fff2 	bl	f692 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    f6ae:	3065      	adds	r0, #101	; 0x65
    f6b0:	b280      	uxth	r0, r0
    f6b2:	bd10      	pop	{r4, pc}
    f6b4:	b510      	push	{r4, lr}
    f6b6:	f7ff ffec 	bl	f692 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    f6ba:	30fb      	adds	r0, #251	; 0xfb
    f6bc:	b280      	uxth	r0, r0
    f6be:	bd10      	pop	{r4, pc}
    f6c0:	b1d0      	cbz	r0, f6f8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x15c>
    f6c2:	2908      	cmp	r1, #8
    f6c4:	d011      	beq.n	f6ea <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x14e>
    f6c6:	2904      	cmp	r1, #4
    f6c8:	d00b      	beq.n	f6e2 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x146>
    f6ca:	2000      	movs	r0, #0
    f6cc:	2902      	cmp	r1, #2
    f6ce:	d010      	beq.n	f6f2 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x156>
    f6d0:	2108      	movs	r1, #8
    f6d2:	3028      	adds	r0, #40	; 0x28
    f6d4:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
    f6d8:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    f6dc:	4408      	add	r0, r1
    f6de:	3098      	adds	r0, #152	; 0x98
    f6e0:	4770      	bx	lr
    f6e2:	f44f 70bf 	mov.w	r0, #382	; 0x17e
    f6e6:	2110      	movs	r1, #16
    f6e8:	e7f4      	b.n	f6d4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    f6ea:	f44f 70c8 	mov.w	r0, #400	; 0x190
    f6ee:	2140      	movs	r1, #64	; 0x40
    f6f0:	e7f0      	b.n	f6d4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    f6f2:	2104      	movs	r1, #4
    f6f4:	3018      	adds	r0, #24
    f6f6:	e7ed      	b.n	f6d4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    f6f8:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    f6fc:	4770      	bx	lr
    f6fe:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f702:	f001 0307 	and.w	r3, r1, #7
    f706:	7802      	ldrb	r2, [r0, #0]
    f708:	2101      	movs	r1, #1
    f70a:	4099      	lsls	r1, r3
    f70c:	438a      	bics	r2, r1
    f70e:	7002      	strb	r2, [r0, #0]
    f710:	4770      	bx	lr

0000f712 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    f712:	f7f5 be8b 	b.w	542c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f716 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    f716:	2000      	movs	r0, #0
    f718:	4770      	bx	lr

0000f71a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    f71a:	b538      	push	{r3, r4, r5, lr}
    f71c:	460d      	mov	r5, r1
    f71e:	4604      	mov	r4, r0
    f720:	e050      	b.n	f7c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa>
    f722:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    f726:	1c40      	adds	r0, r0, #1
    f728:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    f72c:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    f730:	1c40      	adds	r0, r0, #1
    f732:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
    f736:	4620      	mov	r0, r4
    f738:	f000 f8e1 	bl	f8fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    f73c:	b198      	cbz	r0, f766 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    f73e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    f742:	1c40      	adds	r0, r0, #1
    f744:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    f748:	4620      	mov	r0, r4
    f74a:	f000 f86e 	bl	f82a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    f74e:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    f752:	4288      	cmp	r0, r1
    f754:	d307      	bcc.n	f766 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    f756:	2000      	movs	r0, #0
    f758:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    f75c:	2001      	movs	r0, #1
    f75e:	f884 018e 	strb.w	r0, [r4, #398]	; 0x18e
    f762:	f7fb ff0d 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f766:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    f76a:	b120      	cbz	r0, f776 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c>
    f76c:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
    f770:	1c40      	adds	r0, r0, #1
    f772:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
    f776:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    f77a:	b120      	cbz	r0, f786 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c>
    f77c:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
    f780:	1c40      	adds	r0, r0, #1
    f782:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    f786:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
    f78a:	f88d 0000 	strb.w	r0, [sp]
    f78e:	9800      	ldr	r0, [sp, #0]
    f790:	9000      	str	r0, [sp, #0]
    f792:	f89d 0000 	ldrb.w	r0, [sp]
    f796:	b940      	cbnz	r0, f7aa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90>
    f798:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    f79c:	2300      	movs	r3, #0
    f79e:	2101      	movs	r1, #1
    f7a0:	f104 0078 	add.w	r0, r4, #120	; 0x78
    f7a4:	f7ff f904 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f7a8:	b120      	cbz	r0, f7b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9a>
    f7aa:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	; 0xb2
    f7ae:	1c40      	adds	r0, r0, #1
    f7b0:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
    f7b4:	4620      	mov	r0, r4
    f7b6:	f000 f847 	bl	f848 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    f7ba:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    f7be:	1c40      	adds	r0, r0, #1
    f7c0:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    f7c4:	1e6d      	subs	r5, r5, #1
    f7c6:	b2ad      	uxth	r5, r5
    f7c8:	d2ab      	bcs.n	f722 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8>
    f7ca:	bd38      	pop	{r3, r4, r5, pc}

0000f7cc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    f7cc:	b510      	push	{r4, lr}
    f7ce:	f7fa fde5 	bl	a39c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    f7d2:	b128      	cbz	r0, f7e0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    f7d4:	2000      	movs	r0, #0
    f7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f7da:	4601      	mov	r1, r0
    f7dc:	f7fa bd8a 	b.w	a2f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    f7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f7e4:	f7f6 bac2 	b.w	5d6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    f7e8:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    f7ec:	28fe      	cmp	r0, #254	; 0xfe
    f7ee:	d001      	beq.n	f7f4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    f7f0:	2001      	movs	r0, #1
    f7f2:	4770      	bx	lr
    f7f4:	2000      	movs	r0, #0
    f7f6:	4770      	bx	lr
    f7f8:	b510      	push	{r4, lr}
    f7fa:	2801      	cmp	r0, #1
    f7fc:	d006      	beq.n	f80c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    f7fe:	2802      	cmp	r0, #2
    f800:	d004      	beq.n	f80c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    f802:	f240 2163 	movw	r1, #611	; 0x263
    f806:	2006      	movs	r0, #6
    f808:	f7f5 fa86 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f80c:	bd10      	pop	{r4, pc}
    f80e:	2801      	cmp	r0, #1
    f810:	d002      	beq.n	f818 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    f812:	2802      	cmp	r0, #2
    f814:	d105      	bne.n	f822 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    f816:	e002      	b.n	f81e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    f818:	2901      	cmp	r1, #1
    f81a:	d004      	beq.n	f826 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    f81c:	e001      	b.n	f822 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    f81e:	2902      	cmp	r1, #2
    f820:	d001      	beq.n	f826 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    f822:	2000      	movs	r0, #0
    f824:	4770      	bx	lr
    f826:	2001      	movs	r0, #1
    f828:	4770      	bx	lr
    f82a:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    f82e:	428a      	cmp	r2, r1
    f830:	d301      	bcc.n	f836 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    f832:	1a51      	subs	r1, r2, r1
    f834:	e000      	b.n	f838 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    f836:	2100      	movs	r1, #0
    f838:	8a82      	ldrh	r2, [r0, #20]
    f83a:	1d52      	adds	r2, r2, #5
    f83c:	428a      	cmp	r2, r1
    f83e:	d302      	bcc.n	f846 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    f840:	2101      	movs	r1, #1
    f842:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac
    f846:	4770      	bx	lr
    f848:	b570      	push	{r4, r5, r6, lr}
    f84a:	4604      	mov	r4, r0
    f84c:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    f850:	2500      	movs	r5, #0
    f852:	2601      	movs	r6, #1
    f854:	280c      	cmp	r0, #12
    f856:	d02c      	beq.n	f8b2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe6>
    f858:	280d      	cmp	r0, #13
    f85a:	d129      	bne.n	f8b0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    f85c:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    f860:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    f864:	1c40      	adds	r0, r0, #1
    f866:	4288      	cmp	r0, r1
    f868:	d122      	bne.n	f8b0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    f86a:	8820      	ldrh	r0, [r4, #0]
    f86c:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    f870:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    f874:	f7ff f883 	bl	e97e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    f878:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    f87c:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    f880:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    f884:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    f888:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    f88c:	f884 51c8 	strb.w	r5, [r4, #456]	; 0x1c8
    f890:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    f894:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    f898:	2102      	movs	r1, #2
    f89a:	4620      	mov	r0, r4
    f89c:	f7f7 f93c 	bl	6b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    f8a0:	f7fb fe6e 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f8a4:	2103      	movs	r1, #3
    f8a6:	4620      	mov	r0, r4
    f8a8:	f7f9 f8fa 	bl	8aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    f8ac:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    f8b0:	bd70      	pop	{r4, r5, r6, pc}
    f8b2:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    f8b6:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    f8ba:	1c40      	adds	r0, r0, #1
    f8bc:	4288      	cmp	r0, r1
    f8be:	d1f7      	bne.n	f8b0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    f8c0:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    f8c4:	f8d0 1001 	ldr.w	r1, [r0, #1]
    f8c8:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    f8cc:	7940      	ldrb	r0, [r0, #5]
    f8ce:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    f8d2:	2103      	movs	r1, #3
    f8d4:	4620      	mov	r0, r4
    f8d6:	f7f7 f91f 	bl	6b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    f8da:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    f8de:	7800      	ldrb	r0, [r0, #0]
    f8e0:	b140      	cbz	r0, f8f4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x128>
    f8e2:	2101      	movs	r1, #1
    f8e4:	20fe      	movs	r0, #254	; 0xfe
    f8e6:	f7fb fd75 	bl	b3d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    f8ea:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    f8ee:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    f8f2:	bd70      	pop	{r4, r5, r6, pc}
    f8f4:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    f8f8:	2036      	movs	r0, #54	; 0x36
    f8fa:	f7f5 fa0d 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8fe:	b510      	push	{r4, lr}
    f900:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    f904:	b941      	cbnz	r1, f918 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14c>
    f906:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    f90a:	2300      	movs	r3, #0
    f90c:	2106      	movs	r1, #6
    f90e:	3078      	adds	r0, #120	; 0x78
    f910:	f7ff f84e 	bl	e9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f914:	2800      	cmp	r0, #0
    f916:	d000      	beq.n	f91a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
    f918:	2001      	movs	r0, #1
    f91a:	bd10      	pop	{r4, pc}

0000f91c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    f91c:	b510      	push	{r4, lr}
    f91e:	460c      	mov	r4, r1
    f920:	4601      	mov	r1, r0
    f922:	4610      	mov	r0, r2
    f924:	f7f2 fe5c 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    f928:	2800      	cmp	r0, #0
    f92a:	da06      	bge.n	f93a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x1e>
    f92c:	1a21      	subs	r1, r4, r0
    f92e:	1e49      	subs	r1, r1, #1
    f930:	fbb1 f1f4 	udiv	r1, r1, r4
    f934:	fb01 0004 	mla	r0, r1, r4, r0
    f938:	bd10      	pop	{r4, pc}
    f93a:	fb90 f1f4 	sdiv	r1, r0, r4
    f93e:	fb01 0014 	mls	r0, r1, r4, r0
    f942:	bd10      	pop	{r4, pc}
    f944:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f948:	f001 0107 	and.w	r1, r1, #7
    f94c:	7800      	ldrb	r0, [r0, #0]
    f94e:	2201      	movs	r2, #1
    f950:	408a      	lsls	r2, r1
    f952:	4010      	ands	r0, r2
    f954:	40c8      	lsrs	r0, r1
    f956:	4770      	bx	lr
    f958:	b118      	cbz	r0, f962 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f95a:	2802      	cmp	r0, #2
    f95c:	d001      	beq.n	f962 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f95e:	2001      	movs	r0, #1
    f960:	4770      	bx	lr
    f962:	2000      	movs	r0, #0
    f964:	4770      	bx	lr

0000f966 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f966:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f968:	7881      	ldrb	r1, [r0, #2]
    f96a:	4604      	mov	r4, r0
    f96c:	291a      	cmp	r1, #26
    f96e:	d025      	beq.n	f9bc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f970:	dc0e      	bgt.n	f990 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    f972:	2916      	cmp	r1, #22
    f974:	d22d      	bcs.n	f9d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f976:	e8df f001 	tbb	[pc, r1]
    f97a:	2c2c      	.short	0x2c2c
    f97c:	212c2c2c 	.word	0x212c2c2c
    f980:	2c2c2c2c 	.word	0x2c2c2c2c
    f984:	2c2c2c2c 	.word	0x2c2c2c2c
    f988:	2c2c2c2c 	.word	0x2c2c2c2c
    f98c:	2121212c 	.word	0x2121212c
    f990:	292a      	cmp	r1, #42	; 0x2a
    f992:	d01e      	beq.n	f9d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f994:	dc0b      	bgt.n	f9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    f996:	f1a1 011e 	sub.w	r1, r1, #30
    f99a:	290c      	cmp	r1, #12
    f99c:	d219      	bcs.n	f9d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f99e:	e8df f001 	tbb	[pc, r1]
    f9a2:	1818      	.short	0x1818
    f9a4:	18181818 	.word	0x18181818
    f9a8:	18181818 	.word	0x18181818
    f9ac:	0d18      	.short	0x0d18
    f9ae:	393a      	subs	r1, #58	; 0x3a
    f9b0:	2904      	cmp	r1, #4
    f9b2:	d20e      	bcs.n	f9d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f9b4:	e8df f001 	tbb	[pc, r1]
    f9b8:	020d020d 	.word	0x020d020d
    f9bc:	8820      	ldrh	r0, [r4, #0]
    f9be:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f9c2:	d206      	bcs.n	f9d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f9c4:	2701      	movs	r7, #1
    f9c6:	4669      	mov	r1, sp
    f9c8:	f7fe ffc9 	bl	e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f9cc:	b118      	cbz	r0, f9d6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    f9ce:	2002      	movs	r0, #2
    f9d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f9d2:	2012      	movs	r0, #18
    f9d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f9d6:	9d01      	ldr	r5, [sp, #4]
    f9d8:	4668      	mov	r0, sp
    f9da:	462e      	mov	r6, r5
    f9dc:	f505 759e 	add.w	r5, r5, #316	; 0x13c
    f9e0:	f206 163d 	addw	r6, r6, #317	; 0x13d
    f9e4:	f000 fd5e 	bl	104a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x45e>
    f9e8:	b138      	cbz	r0, f9fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    f9ea:	7828      	ldrb	r0, [r5, #0]
    f9ec:	f88d 0008 	strb.w	r0, [sp, #8]
    f9f0:	9802      	ldr	r0, [sp, #8]
    f9f2:	9002      	str	r0, [sp, #8]
    f9f4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f9f8:	b108      	cbz	r0, f9fe <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    f9fa:	200c      	movs	r0, #12
    f9fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f9fe:	702f      	strb	r7, [r5, #0]
    fa00:	78a0      	ldrb	r0, [r4, #2]
    fa02:	7030      	strb	r0, [r6, #0]
    fa04:	2000      	movs	r0, #0
    fa06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000fa08 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    fa08:	b510      	push	{r4, lr}
    fa0a:	4604      	mov	r4, r0
    fa0c:	7800      	ldrb	r0, [r0, #0]
    fa0e:	b118      	cbz	r0, fa18 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    fa10:	2801      	cmp	r0, #1
    fa12:	d001      	beq.n	fa18 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    fa14:	2012      	movs	r0, #18
    fa16:	bd10      	pop	{r4, pc}
    fa18:	f000 fcf8 	bl	1040c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    fa1c:	b120      	cbz	r0, fa28 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    fa1e:	f7f6 fe41 	bl	66a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fa22:	b108      	cbz	r0, fa28 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    fa24:	200c      	movs	r0, #12
    fa26:	bd10      	pop	{r4, pc}
    fa28:	7820      	ldrb	r0, [r4, #0]
    fa2a:	f7ff ff95 	bl	f958 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fa2e:	1de2      	adds	r2, r4, #7
    fa30:	f104 0317 	add.w	r3, r4, #23
    fa34:	1c61      	adds	r1, r4, #1
    fa36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa3a:	f7f6 be65 	b.w	6708 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000fa3e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fa3e:	b510      	push	{r4, lr}
    fa40:	4604      	mov	r4, r0
    fa42:	f000 fde6 	bl	10612 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    fa46:	b108      	cbz	r0, fa4c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    fa48:	200c      	movs	r0, #12
    fa4a:	bd10      	pop	{r4, pc}
    fa4c:	7820      	ldrb	r0, [r4, #0]
    fa4e:	b118      	cbz	r0, fa58 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fa50:	2801      	cmp	r0, #1
    fa52:	d001      	beq.n	fa58 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fa54:	2012      	movs	r0, #18
    fa56:	bd10      	pop	{r4, pc}
    fa58:	f7ff ff7e 	bl	f958 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fa5c:	1c61      	adds	r1, r4, #1
    fa5e:	f7f6 fef7 	bl	6850 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    fa62:	b108      	cbz	r0, fa68 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fa64:	2000      	movs	r0, #0
    fa66:	bd10      	pop	{r4, pc}
    fa68:	2007      	movs	r0, #7
    fa6a:	bd10      	pop	{r4, pc}

0000fa6c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    fa6c:	b510      	push	{r4, lr}
    fa6e:	f000 fccd 	bl	1040c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    fa72:	b120      	cbz	r0, fa7e <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fa74:	f7f6 fe16 	bl	66a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fa78:	b108      	cbz	r0, fa7e <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fa7a:	200c      	movs	r0, #12
    fa7c:	bd10      	pop	{r4, pc}
    fa7e:	f7f6 fe89 	bl	6794 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    fa82:	2000      	movs	r0, #0
    fa84:	bd10      	pop	{r4, pc}

0000fa86 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fa86:	b510      	push	{r4, lr}
    fa88:	f000 fdc3 	bl	10612 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    fa8c:	b108      	cbz	r0, fa92 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fa8e:	200c      	movs	r0, #12
    fa90:	bd10      	pop	{r4, pc}
    fa92:	f7f6 ff05 	bl	68a0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    fa96:	2000      	movs	r0, #0
    fa98:	bd10      	pop	{r4, pc}

0000fa9a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    fa9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa9c:	4605      	mov	r5, r0
    fa9e:	f000 fad2 	bl	10046 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    faa2:	2800      	cmp	r0, #0
    faa4:	d112      	bne.n	facc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x32>
    faa6:	8828      	ldrh	r0, [r5, #0]
    faa8:	2100      	movs	r1, #0
    faaa:	f7fe fdda 	bl	e662 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    faae:	0004      	movs	r4, r0
    fab0:	d00d      	beq.n	face <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fab2:	f000 fcfa 	bl	104aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    fab6:	b150      	cbz	r0, face <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fab8:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    fabc:	f88d 0000 	strb.w	r0, [sp]
    fac0:	9800      	ldr	r0, [sp, #0]
    fac2:	9000      	str	r0, [sp, #0]
    fac4:	f89d 0000 	ldrb.w	r0, [sp]
    fac8:	b118      	cbz	r0, fad2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    faca:	203a      	movs	r0, #58	; 0x3a
    facc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    face:	2002      	movs	r0, #2
    fad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fad2:	88a8      	ldrh	r0, [r5, #4]
    fad4:	f7fe ff4f 	bl	e976 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    fad8:	4606      	mov	r6, r0
    fada:	4601      	mov	r1, r0
    fadc:	2008      	movs	r0, #8
    fade:	f7ff f8e5 	bl	ecac <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    fae2:	4601      	mov	r1, r0
    fae4:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    fae8:	4281      	cmp	r1, r0
    faea:	d301      	bcc.n	faf0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x56>
    faec:	42b0      	cmp	r0, r6
    faee:	d301      	bcc.n	faf4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x5a>
    faf0:	2012      	movs	r0, #18
    faf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    faf4:	4631      	mov	r1, r6
    faf6:	2005      	movs	r0, #5
    faf8:	f7ff f8d8 	bl	ecac <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    fafc:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
    fb00:	2000      	movs	r0, #0
    fb02:	e9c4 0653 	strd	r0, r6, [r4, #332]	; 0x14c
    fb06:	88e8      	ldrh	r0, [r5, #6]
    fb08:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    fb0c:	8928      	ldrh	r0, [r5, #8]
    fb0e:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    fb12:	f504 74a2 	add.w	r4, r4, #324	; 0x144
    fb16:	2001      	movs	r0, #1
    fb18:	7020      	strb	r0, [r4, #0]
    fb1a:	2000      	movs	r0, #0
    fb1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fb1e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fb1e:	b510      	push	{r4, lr}
    fb20:	460b      	mov	r3, r1
    fb22:	2201      	movs	r2, #1
    fb24:	f100 0110 	add.w	r1, r0, #16
    fb28:	f7fe fec4 	bl	e8b4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fb2c:	2000      	movs	r0, #0
    fb2e:	bd10      	pop	{r4, pc}

0000fb30 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fb30:	b510      	push	{r4, lr}
    fb32:	2108      	movs	r1, #8
    fb34:	f7f5 f99a 	bl	4e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fb38:	2000      	movs	r0, #0
    fb3a:	bd10      	pop	{r4, pc}

0000fb3c <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fb3c:	b510      	push	{r4, lr}
    fb3e:	4604      	mov	r4, r0
    fb40:	f000 fcaa 	bl	10498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    fb44:	b140      	cbz	r0, fb58 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    fb46:	20fb      	movs	r0, #251	; 0xfb
    fb48:	8020      	strh	r0, [r4, #0]
    fb4a:	f640 0148 	movw	r1, #2120	; 0x848
    fb4e:	8061      	strh	r1, [r4, #2]
    fb50:	80a0      	strh	r0, [r4, #4]
    fb52:	80e1      	strh	r1, [r4, #6]
    fb54:	2000      	movs	r0, #0
    fb56:	bd10      	pop	{r4, pc}
    fb58:	2001      	movs	r0, #1
    fb5a:	bd10      	pop	{r4, pc}

0000fb5c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    fb5c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    fb5e:	460d      	mov	r5, r1
    fb60:	4606      	mov	r6, r0
    fb62:	f7fc fa2f 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fb66:	f3c0 2000 	ubfx	r0, r0, #8, #1
    fb6a:	b300      	cbz	r0, fbae <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    fb6c:	8830      	ldrh	r0, [r6, #0]
    fb6e:	4669      	mov	r1, sp
    fb70:	f7fe fef5 	bl	e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb74:	2800      	cmp	r0, #0
    fb76:	d119      	bne.n	fbac <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    fb78:	9c01      	ldr	r4, [sp, #4]
    fb7a:	2700      	movs	r7, #0
    fb7c:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    fb80:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    fb84:	f000 fa94 	bl	100b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    fb88:	70a8      	strb	r0, [r5, #2]
    fb8a:	7860      	ldrb	r0, [r4, #1]
    fb8c:	f000 fa90 	bl	100b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    fb90:	70e8      	strb	r0, [r5, #3]
    fb92:	78a0      	ldrb	r0, [r4, #2]
    fb94:	f88d 0008 	strb.w	r0, [sp, #8]
    fb98:	9802      	ldr	r0, [sp, #8]
    fb9a:	9002      	str	r0, [sp, #8]
    fb9c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fba0:	3c6a      	subs	r4, #106	; 0x6a
    fba2:	2800      	cmp	r0, #0
    fba4:	d1ea      	bne.n	fb7c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    fba6:	8830      	ldrh	r0, [r6, #0]
    fba8:	8028      	strh	r0, [r5, #0]
    fbaa:	2000      	movs	r0, #0
    fbac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fbae:	2001      	movs	r0, #1
    fbb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000fbb2 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    fbb2:	2108      	movs	r1, #8
    fbb4:	7001      	strb	r1, [r0, #0]
    fbb6:	2000      	movs	r0, #0
    fbb8:	4770      	bx	lr

0000fbba <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fbba:	b510      	push	{r4, lr}
    fbbc:	4604      	mov	r4, r0
    fbbe:	20d8      	movs	r0, #216	; 0xd8
    fbc0:	7020      	strb	r0, [r4, #0]
    fbc2:	f000 fc4a 	bl	1045a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x414>
    fbc6:	7060      	strb	r0, [r4, #1]
    fbc8:	2000      	movs	r0, #0
    fbca:	bd10      	pop	{r4, pc}

0000fbcc <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fbcc:	2108      	movs	r1, #8
    fbce:	7001      	strb	r1, [r0, #0]
    fbd0:	2000      	movs	r0, #0
    fbd2:	4770      	bx	lr

0000fbd4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    fbd4:	b510      	push	{r4, lr}
    fbd6:	4604      	mov	r4, r0
    fbd8:	7800      	ldrb	r0, [r0, #0]
    fbda:	b108      	cbz	r0, fbe0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    fbdc:	2801      	cmp	r0, #1
    fbde:	d110      	bne.n	fc02 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fbe0:	f000 fc14 	bl	1040c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    fbe4:	b120      	cbz	r0, fbf0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fbe6:	f7f6 fd5d 	bl	66a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fbea:	b108      	cbz	r0, fbf0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fbec:	200c      	movs	r0, #12
    fbee:	bd10      	pop	{r4, pc}
    fbf0:	7820      	ldrb	r0, [r4, #0]
    fbf2:	f7ff feb1 	bl	f958 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fbf6:	1c61      	adds	r1, r4, #1
    fbf8:	f7fe fe42 	bl	e880 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    fbfc:	b108      	cbz	r0, fc02 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fbfe:	2000      	movs	r0, #0
    fc00:	bd10      	pop	{r4, pc}
    fc02:	2012      	movs	r0, #18
    fc04:	bd10      	pop	{r4, pc}

0000fc06 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fc06:	b510      	push	{r4, lr}
    fc08:	4604      	mov	r4, r0
    fc0a:	f000 fd02 	bl	10612 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    fc0e:	b108      	cbz	r0, fc14 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fc10:	200c      	movs	r0, #12
    fc12:	bd10      	pop	{r4, pc}
    fc14:	7820      	ldrb	r0, [r4, #0]
    fc16:	b108      	cbz	r0, fc1c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fc18:	2801      	cmp	r0, #1
    fc1a:	d107      	bne.n	fc2c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fc1c:	f7ff fe9c 	bl	f958 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fc20:	1c61      	adds	r1, r4, #1
    fc22:	f7fe fe3c 	bl	e89e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    fc26:	b108      	cbz	r0, fc2c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fc28:	2000      	movs	r0, #0
    fc2a:	bd10      	pop	{r4, pc}
    fc2c:	2012      	movs	r0, #18
    fc2e:	bd10      	pop	{r4, pc}

0000fc30 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    fc30:	b510      	push	{r4, lr}
    fc32:	4604      	mov	r4, r0
    fc34:	f000 fbea 	bl	1040c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    fc38:	b108      	cbz	r0, fc3e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    fc3a:	200c      	movs	r0, #12
    fc3c:	bd10      	pop	{r4, pc}
    fc3e:	7820      	ldrb	r0, [r4, #0]
    fc40:	f000 0001 	and.w	r0, r0, #1
    fc44:	f7f6 fd28 	bl	6698 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    fc48:	2000      	movs	r0, #0
    fc4a:	bd10      	pop	{r4, pc}

0000fc4c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fc4c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fc4e:	460d      	mov	r5, r1
    fc50:	4604      	mov	r4, r0
    fc52:	f000 fc21 	bl	10498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    fc56:	b130      	cbz	r0, fc66 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fc58:	88a2      	ldrh	r2, [r4, #4]
    fc5a:	f244 2090 	movw	r0, #17040	; 0x4290
    fc5e:	4282      	cmp	r2, r0
    fc60:	d903      	bls.n	fc6a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    fc62:	2012      	movs	r0, #18
    fc64:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fc66:	2001      	movs	r0, #1
    fc68:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fc6a:	f640 0048 	movw	r0, #2120	; 0x848
    fc6e:	4282      	cmp	r2, r0
    fc70:	d300      	bcc.n	fc74 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    fc72:	4602      	mov	r2, r0
    fc74:	8820      	ldrh	r0, [r4, #0]
    fc76:	f8ad 0000 	strh.w	r0, [sp]
    fc7a:	8860      	ldrh	r0, [r4, #2]
    fc7c:	f8ad 0002 	strh.w	r0, [sp, #2]
    fc80:	f8ad 2004 	strh.w	r2, [sp, #4]
    fc84:	8860      	ldrh	r0, [r4, #2]
    fc86:	f8ad 0006 	strh.w	r0, [sp, #6]
    fc8a:	f8ad 2008 	strh.w	r2, [sp, #8]
    fc8e:	8820      	ldrh	r0, [r4, #0]
    fc90:	8028      	strh	r0, [r5, #0]
    fc92:	4668      	mov	r0, sp
    fc94:	f000 fc28 	bl	104e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    fc98:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fc9a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    fc9a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fc9c:	4604      	mov	r4, r0
    fc9e:	f7fe fe2f 	bl	e900 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    fca2:	b160      	cbz	r0, fcbe <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x24>
    fca4:	4620      	mov	r0, r4
    fca6:	f7f6 ffbd 	bl	6c24 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    fcaa:	4669      	mov	r1, sp
    fcac:	2000      	movs	r0, #0
    fcae:	f7fe fce1 	bl	e674 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fcb2:	b150      	cbz	r0, fcca <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x30>
    fcb4:	f640 71f7 	movw	r1, #4087	; 0xff7
    fcb8:	2039      	movs	r0, #57	; 0x39
    fcba:	f7f5 f82d 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fcbe:	2012      	movs	r0, #18
    fcc0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fcc2:	9802      	ldr	r0, [sp, #8]
    fcc4:	f880 412e 	strb.w	r4, [r0, #302]	; 0x12e
    fcc8:	e000      	b.n	fccc <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x32>
    fcca:	2401      	movs	r4, #1
    fccc:	4668      	mov	r0, sp
    fcce:	f7f5 fa53 	bl	5178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    fcd2:	2800      	cmp	r0, #0
    fcd4:	d0f5      	beq.n	fcc2 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    fcd6:	2000      	movs	r0, #0
    fcd8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fcda <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fcda:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fcdc:	4604      	mov	r4, r0
    fcde:	f7fc f971 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fce2:	f3c0 2000 	ubfx	r0, r0, #8, #1
    fce6:	b1b0      	cbz	r0, fd16 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    fce8:	f10d 0007 	add.w	r0, sp, #7
    fcec:	9000      	str	r0, [sp, #0]
    fcee:	7922      	ldrb	r2, [r4, #4]
    fcf0:	78e1      	ldrb	r1, [r4, #3]
    fcf2:	78a0      	ldrb	r0, [r4, #2]
    fcf4:	f10d 0306 	add.w	r3, sp, #6
    fcf8:	f000 fc74 	bl	105e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    fcfc:	2800      	cmp	r0, #0
    fcfe:	d109      	bne.n	fd14 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    fd00:	8820      	ldrh	r0, [r4, #0]
    fd02:	f8ad 0004 	strh.w	r0, [sp, #4]
    fd06:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fd0a:	f8ad 0008 	strh.w	r0, [sp, #8]
    fd0e:	a801      	add	r0, sp, #4
    fd10:	f000 f8f8 	bl	ff04 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fd14:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fd16:	2001      	movs	r0, #1
    fd18:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fd1a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    fd1a:	b510      	push	{r4, lr}
    fd1c:	4604      	mov	r4, r0
    fd1e:	f000 fb75 	bl	1040c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    fd22:	b120      	cbz	r0, fd2e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fd24:	f7f6 fcbe 	bl	66a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fd28:	b108      	cbz	r0, fd2e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fd2a:	200c      	movs	r0, #12
    fd2c:	bd10      	pop	{r4, pc}
    fd2e:	7820      	ldrb	r0, [r4, #0]
    fd30:	f7ff fe12 	bl	f958 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fd34:	79e2      	ldrb	r2, [r4, #7]
    fd36:	1c61      	adds	r1, r4, #1
    fd38:	f7f6 fc4e 	bl	65d8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    fd3c:	b108      	cbz	r0, fd42 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    fd3e:	2000      	movs	r0, #0
    fd40:	bd10      	pop	{r4, pc}
    fd42:	2002      	movs	r0, #2
    fd44:	bd10      	pop	{r4, pc}

0000fd46 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fd46:	b510      	push	{r4, lr}
    fd48:	4604      	mov	r4, r0
    fd4a:	2001      	movs	r0, #1
    fd4c:	f000 f9bb 	bl	100c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    fd50:	b128      	cbz	r0, fd5e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fd52:	4621      	mov	r1, r4
    fd54:	2001      	movs	r0, #1
    fd56:	f7f5 fe3d 	bl	59d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fd5a:	2000      	movs	r0, #0
    fd5c:	bd10      	pop	{r4, pc}
    fd5e:	200c      	movs	r0, #12
    fd60:	bd10      	pop	{r4, pc}

0000fd62 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    fd62:	b510      	push	{r4, lr}
    fd64:	8800      	ldrh	r0, [r0, #0]
    fd66:	f7f6 fd2b 	bl	67c0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    fd6a:	b108      	cbz	r0, fd70 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    fd6c:	2000      	movs	r0, #0
    fd6e:	bd10      	pop	{r4, pc}
    fd70:	2030      	movs	r0, #48	; 0x30
    fd72:	bd10      	pop	{r4, pc}

0000fd74 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    fd74:	b51c      	push	{r2, r3, r4, lr}
    fd76:	7801      	ldrb	r1, [r0, #0]
    fd78:	f88d 1000 	strb.w	r1, [sp]
    fd7c:	7840      	ldrb	r0, [r0, #1]
    fd7e:	f88d 0001 	strb.w	r0, [sp, #1]
    fd82:	2000      	movs	r0, #0
    fd84:	f8ad 0002 	strh.w	r0, [sp, #2]
    fd88:	f8ad 0004 	strh.w	r0, [sp, #4]
    fd8c:	4601      	mov	r1, r0
    fd8e:	4668      	mov	r0, sp
    fd90:	f000 f9e4 	bl	1015c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x116>
    fd94:	2800      	cmp	r0, #0
    fd96:	d102      	bne.n	fd9e <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    fd98:	4668      	mov	r0, sp
    fd9a:	f000 f9c3 	bl	10124 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xde>
    fd9e:	bd1c      	pop	{r2, r3, r4, pc}

0000fda0 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    fda0:	b500      	push	{lr}
    fda2:	b087      	sub	sp, #28
    fda4:	7941      	ldrb	r1, [r0, #5]
    fda6:	f88d 1000 	strb.w	r1, [sp]
    fdaa:	7981      	ldrb	r1, [r0, #6]
    fdac:	f88d 1001 	strb.w	r1, [sp, #1]
    fdb0:	2101      	movs	r1, #1
    fdb2:	f88d 1002 	strb.w	r1, [sp, #2]
    fdb6:	7801      	ldrb	r1, [r0, #0]
    fdb8:	f88d 1003 	strb.w	r1, [sp, #3]
    fdbc:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    fdc0:	f240 2271 	movw	r2, #625	; 0x271
    fdc4:	4351      	muls	r1, r2
    fdc6:	9102      	str	r1, [sp, #8]
    fdc8:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    fdcc:	4350      	muls	r0, r2
    fdce:	9004      	str	r0, [sp, #16]
    fdd0:	2007      	movs	r0, #7
    fdd2:	f88d 0018 	strb.w	r0, [sp, #24]
    fdd6:	2000      	movs	r0, #0
    fdd8:	f88d 0019 	strb.w	r0, [sp, #25]
    fddc:	9804      	ldr	r0, [sp, #16]
    fdde:	f7fb fff7 	bl	bdd0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>
    fde2:	b140      	cbz	r0, fdf6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    fde4:	9802      	ldr	r0, [sp, #8]
    fde6:	f7fb ffe7 	bl	bdb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    fdea:	b120      	cbz	r0, fdf6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    fdec:	4668      	mov	r0, sp
    fdee:	f7fb fe61 	bl	bab4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    fdf2:	b007      	add	sp, #28
    fdf4:	bd00      	pop	{pc}
    fdf6:	2030      	movs	r0, #48	; 0x30
    fdf8:	e7fb      	b.n	fdf2 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000fdfa <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    fdfa:	b570      	push	{r4, r5, r6, lr}
    fdfc:	4605      	mov	r5, r0
    fdfe:	8800      	ldrh	r0, [r0, #0]
    fe00:	2100      	movs	r1, #0
    fe02:	f7fe fc2e 	bl	e662 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe06:	0004      	movs	r4, r0
    fe08:	d007      	beq.n	fe1a <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    fe0a:	f000 fb4e 	bl	104aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    fe0e:	b120      	cbz	r0, fe1a <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    fe10:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
    fe14:	b118      	cbz	r0, fe1e <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    fe16:	203a      	movs	r0, #58	; 0x3a
    fe18:	bd70      	pop	{r4, r5, r6, pc}
    fe1a:	2002      	movs	r0, #2
    fe1c:	bd70      	pop	{r4, r5, r6, pc}
    fe1e:	2100      	movs	r1, #0
    fe20:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
    fe24:	f7ff fd8e 	bl	f944 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    fe28:	2801      	cmp	r0, #1
    fe2a:	d001      	beq.n	fe30 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    fe2c:	201a      	movs	r0, #26
    fe2e:	bd70      	pop	{r4, r5, r6, pc}
    fe30:	f8d5 1002 	ldr.w	r1, [r5, #2]
    fe34:	f8c4 115b 	str.w	r1, [r4, #347]	; 0x15b
    fe38:	f8d5 1006 	ldr.w	r1, [r5, #6]
    fe3c:	f8c4 115f 	str.w	r1, [r4, #351]	; 0x15f
    fe40:	8969      	ldrh	r1, [r5, #10]
    fe42:	f8a4 1163 	strh.w	r1, [r4, #355]	; 0x163
    fe46:	2210      	movs	r2, #16
    fe48:	f105 010c 	add.w	r1, r5, #12
    fe4c:	f204 1065 	addw	r0, r4, #357	; 0x165
    fe50:	f7fd fb6a 	bl	d528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fe54:	2001      	movs	r0, #1
    fe56:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
    fe5a:	2000      	movs	r0, #0
    fe5c:	bd70      	pop	{r4, r5, r6, pc}

0000fe5e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    fe5e:	b51c      	push	{r2, r3, r4, lr}
    fe60:	4604      	mov	r4, r0
    fe62:	f000 fb19 	bl	10498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    fe66:	b178      	cbz	r0, fe88 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    fe68:	8820      	ldrh	r0, [r4, #0]
    fe6a:	f8ad 0000 	strh.w	r0, [sp]
    fe6e:	8860      	ldrh	r0, [r4, #2]
    fe70:	f8ad 0002 	strh.w	r0, [sp, #2]
    fe74:	8820      	ldrh	r0, [r4, #0]
    fe76:	f8ad 0004 	strh.w	r0, [sp, #4]
    fe7a:	8860      	ldrh	r0, [r4, #2]
    fe7c:	f8ad 0006 	strh.w	r0, [sp, #6]
    fe80:	4668      	mov	r0, sp
    fe82:	f7fb ffdb 	bl	be3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>
    fe86:	bd1c      	pop	{r2, r3, r4, pc}
    fe88:	2001      	movs	r0, #1
    fe8a:	bd1c      	pop	{r2, r3, r4, pc}

0000fe8c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    fe8c:	b510      	push	{r4, lr}
    fe8e:	f7f5 fdc5 	bl	5a1c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    fe92:	2000      	movs	r0, #0
    fe94:	bd10      	pop	{r4, pc}

0000fe96 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    fe96:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fe98:	460c      	mov	r4, r1
    fe9a:	4605      	mov	r5, r0
    fe9c:	f000 fafc 	bl	10498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    fea0:	b160      	cbz	r0, febc <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    fea2:	4669      	mov	r1, sp
    fea4:	4628      	mov	r0, r5
    fea6:	f7fe fd5a 	bl	e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    feaa:	2800      	cmp	r0, #0
    feac:	d105      	bne.n	feba <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    feae:	2101      	movs	r1, #1
    feb0:	4622      	mov	r2, r4
    feb2:	9801      	ldr	r0, [sp, #4]
    feb4:	f000 fa74 	bl	103a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    feb8:	2000      	movs	r0, #0
    feba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    febc:	2001      	movs	r0, #1
    febe:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fec0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fec0:	b510      	push	{r4, lr}
    fec2:	4604      	mov	r4, r0
    fec4:	2000      	movs	r0, #0
    fec6:	f000 f8fe 	bl	100c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    feca:	b128      	cbz	r0, fed8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    fecc:	4621      	mov	r1, r4
    fece:	2000      	movs	r0, #0
    fed0:	f7f5 fd80 	bl	59d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fed4:	2000      	movs	r0, #0
    fed6:	bd10      	pop	{r4, pc}
    fed8:	200c      	movs	r0, #12
    feda:	bd10      	pop	{r4, pc}

0000fedc <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    fedc:	b510      	push	{r4, lr}
    fede:	7800      	ldrb	r0, [r0, #0]
    fee0:	f000 0001 	and.w	r0, r0, #1
    fee4:	f7f8 fd00 	bl	88e8 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>
    fee8:	2000      	movs	r0, #0
    feea:	bd10      	pop	{r4, pc}

0000feec <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    feec:	b510      	push	{r4, lr}
    feee:	4604      	mov	r4, r0
    fef0:	f000 fad2 	bl	10498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    fef4:	b120      	cbz	r0, ff00 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    fef6:	4620      	mov	r0, r4
    fef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fefc:	f000 baf4 	b.w	104e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    ff00:	2001      	movs	r0, #1
    ff02:	bd10      	pop	{r4, pc}

0000ff04 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    ff04:	b510      	push	{r4, lr}
    ff06:	4604      	mov	r4, r0
    ff08:	8880      	ldrh	r0, [r0, #4]
    ff0a:	b128      	cbz	r0, ff18 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ff0c:	2801      	cmp	r0, #1
    ff0e:	d003      	beq.n	ff18 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ff10:	2802      	cmp	r0, #2
    ff12:	d001      	beq.n	ff18 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ff14:	2012      	movs	r0, #18
    ff16:	bd10      	pop	{r4, pc}
    ff18:	78e0      	ldrb	r0, [r4, #3]
    ff1a:	f000 f8e0 	bl	100de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    ff1e:	b148      	cbz	r0, ff34 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    ff20:	78a0      	ldrb	r0, [r4, #2]
    ff22:	f000 f8dc 	bl	100de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    ff26:	b128      	cbz	r0, ff34 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    ff28:	4620      	mov	r0, r4
    ff2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff2e:	2101      	movs	r1, #1
    ff30:	f7fb be16 	b.w	bb60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    ff34:	2011      	movs	r0, #17
    ff36:	bd10      	pop	{r4, pc}

0000ff38 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    ff38:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ff3a:	460c      	mov	r4, r1
    ff3c:	4605      	mov	r5, r0
    ff3e:	8800      	ldrh	r0, [r0, #0]
    ff40:	4669      	mov	r1, sp
    ff42:	f7fe fd0c 	bl	e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ff46:	2800      	cmp	r0, #0
    ff48:	d106      	bne.n	ff58 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    ff4a:	9801      	ldr	r0, [sp, #4]
    ff4c:	8829      	ldrh	r1, [r5, #0]
    ff4e:	8021      	strh	r1, [r4, #0]
    ff50:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
    ff54:	8060      	strh	r0, [r4, #2]
    ff56:	2000      	movs	r0, #0
    ff58:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ff5a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    ff5a:	b510      	push	{r4, lr}
    ff5c:	4604      	mov	r4, r0
    ff5e:	4601      	mov	r1, r0
    ff60:	2000      	movs	r0, #0
    ff62:	f7f5 fd1f 	bl	59a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    ff66:	b910      	cbnz	r0, ff6e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    ff68:	2000      	movs	r0, #0
    ff6a:	6020      	str	r0, [r4, #0]
    ff6c:	80a0      	strh	r0, [r4, #4]
    ff6e:	2000      	movs	r0, #0
    ff70:	bd10      	pop	{r4, pc}

0000ff72 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    ff72:	b51c      	push	{r2, r3, r4, lr}
    ff74:	8800      	ldrh	r0, [r0, #0]
    ff76:	4669      	mov	r1, sp
    ff78:	f7fe fcf1 	bl	e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ff7c:	b968      	cbnz	r0, ff9a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    ff7e:	4668      	mov	r0, sp
    ff80:	f000 fa90 	bl	104a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x45e>
    ff84:	b148      	cbz	r0, ff9a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    ff86:	9801      	ldr	r0, [sp, #4]
    ff88:	2201      	movs	r2, #1
    ff8a:	4601      	mov	r1, r0
    ff8c:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
    ff90:	3078      	adds	r0, #120	; 0x78
    ff92:	f501 71ac 	add.w	r1, r1, #344	; 0x158
    ff96:	b92b      	cbnz	r3, ffa4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    ff98:	e001      	b.n	ff9e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    ff9a:	2002      	movs	r0, #2
    ff9c:	bd1c      	pop	{r2, r3, r4, pc}
    ff9e:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
    ffa2:	b10b      	cbz	r3, ffa8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x36>
    ffa4:	203a      	movs	r0, #58	; 0x3a
    ffa6:	bd1c      	pop	{r2, r3, r4, pc}
    ffa8:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    ffac:	079b      	lsls	r3, r3, #30
    ffae:	d100      	bne.n	ffb2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x40>
    ffb0:	700a      	strb	r2, [r1, #0]
    ffb2:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
    ffb6:	2000      	movs	r0, #0
    ffb8:	bd1c      	pop	{r2, r3, r4, pc}

0000ffba <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    ffba:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ffbc:	460c      	mov	r4, r1
    ffbe:	4605      	mov	r5, r0
    ffc0:	8800      	ldrh	r0, [r0, #0]
    ffc2:	4669      	mov	r1, sp
    ffc4:	f7fe fccb 	bl	e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ffc8:	b108      	cbz	r0, ffce <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    ffca:	2002      	movs	r0, #2
    ffcc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ffce:	78a8      	ldrb	r0, [r5, #2]
    ffd0:	b130      	cbz	r0, ffe0 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    ffd2:	f000 fa42 	bl	1045a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x414>
    ffd6:	70a0      	strb	r0, [r4, #2]
    ffd8:	8828      	ldrh	r0, [r5, #0]
    ffda:	8020      	strh	r0, [r4, #0]
    ffdc:	2000      	movs	r0, #0
    ffde:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ffe0:	9801      	ldr	r0, [sp, #4]
    ffe2:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    ffe6:	e7f6      	b.n	ffd6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000ffe8 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    ffe8:	b510      	push	{r4, lr}
    ffea:	f7fb ff63 	bl	beb4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    ffee:	2000      	movs	r0, #0
    fff0:	bd10      	pop	{r4, pc}

0000fff2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    fff2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fff6:	4604      	mov	r4, r0
    fff8:	8840      	ldrh	r0, [r0, #2]
    fffa:	460d      	mov	r5, r1
    fffc:	b1b8      	cbz	r0, 1002e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    fffe:	8820      	ldrh	r0, [r4, #0]
   10000:	4669      	mov	r1, sp
   10002:	f7fe fcac 	bl	e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10006:	2800      	cmp	r0, #0
   10008:	d10f      	bne.n	1002a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   1000a:	8820      	ldrh	r0, [r4, #0]
   1000c:	8028      	strh	r0, [r5, #0]
   1000e:	9e01      	ldr	r6, [sp, #4]
   10010:	f106 050c 	add.w	r5, r6, #12
   10014:	3678      	adds	r6, #120	; 0x78
   10016:	682f      	ldr	r7, [r5, #0]
   10018:	8862      	ldrh	r2, [r4, #2]
   1001a:	4639      	mov	r1, r7
   1001c:	4630      	mov	r0, r6
   1001e:	f7fe fe2e 	bl	ec7e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10022:	6828      	ldr	r0, [r5, #0]
   10024:	42b8      	cmp	r0, r7
   10026:	d1f6      	bne.n	10016 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   10028:	2000      	movs	r0, #0
   1002a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1002e:	2012      	movs	r0, #18
   10030:	e7fb      	b.n	1002a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010032 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10032:	f7fb bdfb 	b.w	bc2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010036 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10036:	b510      	push	{r4, lr}
   10038:	2008      	movs	r0, #8
   1003a:	f7fb ffb9 	bl	bfb0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   1003e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10042:	f7f9 bd51 	b.w	9ae8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

00010046 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   10046:	b510      	push	{r4, lr}
   10048:	4604      	mov	r4, r0
   1004a:	2000      	movs	r0, #0
   1004c:	8822      	ldrh	r2, [r4, #0]
   1004e:	b086      	sub	sp, #24
   10050:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   10054:	39ff      	subs	r1, #255	; 0xff
   10056:	d008      	beq.n	1006a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   10058:	a903      	add	r1, sp, #12
   1005a:	4610      	mov	r0, r2
   1005c:	f7fe fc7f 	bl	e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10060:	b110      	cbz	r0, 10068 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   10062:	2002      	movs	r0, #2
   10064:	b006      	add	sp, #24
   10066:	bd10      	pop	{r4, pc}
   10068:	9804      	ldr	r0, [sp, #16]
   1006a:	8921      	ldrh	r1, [r4, #8]
   1006c:	89a3      	ldrh	r3, [r4, #12]
   1006e:	8962      	ldrh	r2, [r4, #10]
   10070:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   10074:	88e3      	ldrh	r3, [r4, #6]
   10076:	88a2      	ldrh	r2, [r4, #4]
   10078:	8861      	ldrh	r1, [r4, #2]
   1007a:	f000 f966 	bl	1034a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
   1007e:	b108      	cbz	r0, 10084 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   10080:	2000      	movs	r0, #0
   10082:	e7ef      	b.n	10064 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   10084:	2030      	movs	r0, #48	; 0x30
   10086:	e7ed      	b.n	10064 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   10088:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1008c:	4288      	cmp	r0, r1
   1008e:	d303      	bcc.n	10098 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
   10090:	f640 0148 	movw	r1, #2120	; 0x848
   10094:	4288      	cmp	r0, r1
   10096:	d300      	bcc.n	1009a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
   10098:	4608      	mov	r0, r1
   1009a:	4770      	bx	lr
   1009c:	07c1      	lsls	r1, r0, #31
   1009e:	d001      	beq.n	100a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
   100a0:	2001      	movs	r0, #1
   100a2:	4770      	bx	lr
   100a4:	0780      	lsls	r0, r0, #30
   100a6:	d501      	bpl.n	100ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
   100a8:	2002      	movs	r0, #2
   100aa:	4770      	bx	lr
   100ac:	2000      	movs	r0, #0
   100ae:	4770      	bx	lr
   100b0:	b510      	push	{r4, lr}
   100b2:	2801      	cmp	r0, #1
   100b4:	d006      	beq.n	100c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   100b6:	2802      	cmp	r0, #2
   100b8:	d004      	beq.n	100c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   100ba:	f240 2163 	movw	r1, #611	; 0x263
   100be:	2006      	movs	r0, #6
   100c0:	f7f4 fe2a 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100c4:	bd10      	pop	{r4, pc}
   100c6:	b510      	push	{r4, lr}
   100c8:	f000 fa03 	bl	104d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   100cc:	b128      	cbz	r0, 100da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
   100ce:	f7f7 fb95 	bl	77fc <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
   100d2:	2801      	cmp	r0, #1
   100d4:	d001      	beq.n	100da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
   100d6:	2000      	movs	r0, #0
   100d8:	bd10      	pop	{r4, pc}
   100da:	2001      	movs	r0, #1
   100dc:	bd10      	pop	{r4, pc}
   100de:	b510      	push	{r4, lr}
   100e0:	0004      	movs	r4, r0
   100e2:	d005      	beq.n	100f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
   100e4:	f7fb ff74 	bl	bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   100e8:	4384      	bics	r4, r0
   100ea:	d001      	beq.n	100f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
   100ec:	2000      	movs	r0, #0
   100ee:	bd10      	pop	{r4, pc}
   100f0:	2001      	movs	r0, #1
   100f2:	bd10      	pop	{r4, pc}
   100f4:	28fb      	cmp	r0, #251	; 0xfb
   100f6:	d803      	bhi.n	10100 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xba>
   100f8:	f640 0048 	movw	r0, #2120	; 0x848
   100fc:	4281      	cmp	r1, r0
   100fe:	d901      	bls.n	10104 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xbe>
   10100:	2011      	movs	r0, #17
   10102:	4770      	bx	lr
   10104:	2000      	movs	r0, #0
   10106:	4770      	bx	lr
   10108:	381b      	subs	r0, #27
   1010a:	28e1      	cmp	r0, #225	; 0xe1
   1010c:	d206      	bcs.n	1011c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
   1010e:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10112:	d303      	bcc.n	1011c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
   10114:	f244 2090 	movw	r0, #17040	; 0x4290
   10118:	4281      	cmp	r1, r0
   1011a:	d901      	bls.n	10120 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xda>
   1011c:	2012      	movs	r0, #18
   1011e:	4770      	bx	lr
   10120:	2000      	movs	r0, #0
   10122:	4770      	bx	lr
   10124:	b510      	push	{r4, lr}
   10126:	4604      	mov	r4, r0
   10128:	7800      	ldrb	r0, [r0, #0]
   1012a:	2801      	cmp	r0, #1
   1012c:	d009      	beq.n	10142 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfc>
   1012e:	f7f8 fc73 	bl	8a18 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
   10132:	2805      	cmp	r0, #5
   10134:	d003      	beq.n	1013e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf8>
   10136:	f7f8 fc39 	bl	89ac <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
   1013a:	2800      	cmp	r0, #0
   1013c:	d000      	beq.n	10140 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfa>
   1013e:	200c      	movs	r0, #12
   10140:	bd10      	pop	{r4, pc}
   10142:	f7f7 fae9 	bl	7718 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
   10146:	b138      	cbz	r0, 10158 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x112>
   10148:	f7f7 f962 	bl	7410 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
   1014c:	88a1      	ldrh	r1, [r4, #4]
   1014e:	8860      	ldrh	r0, [r4, #2]
   10150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10154:	f7f8 bbee 	b.w	8934 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA>
   10158:	2012      	movs	r0, #18
   1015a:	bd10      	pop	{r4, pc}
   1015c:	7802      	ldrb	r2, [r0, #0]
   1015e:	2a01      	cmp	r2, #1
   10160:	d001      	beq.n	10166 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x120>
   10162:	b1ba      	cbz	r2, 10194 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   10164:	e018      	b.n	10198 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   10166:	7842      	ldrb	r2, [r0, #1]
   10168:	b13a      	cbz	r2, 1017a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
   1016a:	2a01      	cmp	r2, #1
   1016c:	d005      	beq.n	1017a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
   1016e:	2a02      	cmp	r2, #2
   10170:	d112      	bne.n	10198 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   10172:	b189      	cbz	r1, 10198 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   10174:	8881      	ldrh	r1, [r0, #4]
   10176:	b179      	cbz	r1, 10198 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   10178:	e000      	b.n	1017c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x136>
   1017a:	b159      	cbz	r1, 10194 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   1017c:	8841      	ldrh	r1, [r0, #2]
   1017e:	b149      	cbz	r1, 10194 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   10180:	8880      	ldrh	r0, [r0, #4]
   10182:	b138      	cbz	r0, 10194 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   10184:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   10188:	0049      	lsls	r1, r1, #1
   1018a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1018e:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
   10192:	d201      	bcs.n	10198 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   10194:	2000      	movs	r0, #0
   10196:	4770      	bx	lr
   10198:	2012      	movs	r0, #18
   1019a:	4770      	bx	lr
   1019c:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   101a0:	7a45      	ldrb	r5, [r0, #9]
   101a2:	4604      	mov	r4, r0
   101a4:	0768      	lsls	r0, r5, #29
   101a6:	d06c      	beq.n	10282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   101a8:	08e8      	lsrs	r0, r5, #3
   101aa:	d16a      	bne.n	10282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   101ac:	2d02      	cmp	r5, #2
   101ae:	d068      	beq.n	10282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   101b0:	f7fb ff0e 	bl	bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   101b4:	ea25 0000 	bic.w	r0, r5, r0
   101b8:	0740      	lsls	r0, r0, #29
   101ba:	d102      	bne.n	101c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17c>
   101bc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   101c0:	b110      	cbz	r0, 101c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x182>
   101c2:	2011      	movs	r0, #17
   101c4:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   101c8:	2d01      	cmp	r5, #1
   101ca:	d15a      	bne.n	10282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   101cc:	27ff      	movs	r7, #255	; 0xff
   101ce:	2101      	movs	r1, #1
   101d0:	69a0      	ldr	r0, [r4, #24]
   101d2:	f7fb fe1d 	bl	be10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
   101d6:	b3e8      	cbz	r0, 10254 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
   101d8:	46a8      	mov	r8, r5
   101da:	2600      	movs	r6, #0
   101dc:	4635      	mov	r5, r6
   101de:	42bd      	cmp	r5, r7
   101e0:	d02f      	beq.n	10242 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
   101e2:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   101e6:	6988      	ldr	r0, [r1, #24]
   101e8:	68c9      	ldr	r1, [r1, #12]
   101ea:	4288      	cmp	r0, r1
   101ec:	d849      	bhi.n	10282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   101ee:	4406      	add	r6, r0
   101f0:	eb04 0045 	add.w	r0, r4, r5, lsl #1
   101f4:	4681      	mov	r9, r0
   101f6:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
   101f8:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   101fc:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   101fe:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   10202:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   10204:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   10206:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   10208:	2000      	movs	r0, #0
   1020a:	f000 f89e 	bl	1034a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
   1020e:	b308      	cbz	r0, 10254 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
   10210:	b1bd      	cbz	r5, 10242 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
   10212:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
   10216:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
   1021a:	4281      	cmp	r1, r0
   1021c:	d131      	bne.n	10282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1021e:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
   10222:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
   10226:	4281      	cmp	r1, r0
   10228:	d12b      	bne.n	10282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1022a:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
   1022e:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
   10232:	4281      	cmp	r1, r0
   10234:	d125      	bne.n	10282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10236:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
   1023a:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
   1023e:	4281      	cmp	r1, r0
   10240:	d11f      	bne.n	10282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10242:	1c6d      	adds	r5, r5, #1
   10244:	b2ed      	uxtb	r5, r5
   10246:	4545      	cmp	r5, r8
   10248:	d3c9      	bcc.n	101de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x198>
   1024a:	68e0      	ldr	r0, [r4, #12]
   1024c:	42b0      	cmp	r0, r6
   1024e:	d318      	bcc.n	10282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10250:	7820      	ldrb	r0, [r4, #0]
   10252:	e000      	b.n	10256 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
   10254:	e003      	b.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x218>
   10256:	b120      	cbz	r0, 10262 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21c>
   10258:	2801      	cmp	r0, #1
   1025a:	d112      	bne.n	10282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1025c:	e004      	b.n	10268 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   1025e:	2030      	movs	r0, #48	; 0x30
   10260:	e7b0      	b.n	101c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
   10262:	78a0      	ldrb	r0, [r4, #2]
   10264:	2800      	cmp	r0, #0
   10266:	d1f7      	bne.n	10258 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x212>
   10268:	7860      	ldrb	r0, [r4, #1]
   1026a:	b128      	cbz	r0, 10278 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
   1026c:	2801      	cmp	r0, #1
   1026e:	d003      	beq.n	10278 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
   10270:	2802      	cmp	r0, #2
   10272:	d001      	beq.n	10278 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
   10274:	2803      	cmp	r0, #3
   10276:	d104      	bne.n	10282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10278:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   1027c:	b108      	cbz	r0, 10282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1027e:	2807      	cmp	r0, #7
   10280:	d901      	bls.n	10286 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
   10282:	2012      	movs	r0, #18
   10284:	e79e      	b.n	101c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
   10286:	2000      	movs	r0, #0
   10288:	e79c      	b.n	101c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
   1028a:	b570      	push	{r4, r5, r6, lr}
   1028c:	4604      	mov	r4, r0
   1028e:	7800      	ldrb	r0, [r0, #0]
   10290:	2500      	movs	r5, #0
   10292:	2801      	cmp	r0, #1
   10294:	d004      	beq.n	102a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
   10296:	b118      	cbz	r0, 102a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
   10298:	2802      	cmp	r0, #2
   1029a:	d001      	beq.n	102a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
   1029c:	2803      	cmp	r0, #3
   1029e:	d139      	bne.n	10314 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   102a0:	7860      	ldrb	r0, [r4, #1]
   102a2:	b128      	cbz	r0, 102b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
   102a4:	2801      	cmp	r0, #1
   102a6:	d003      	beq.n	102b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
   102a8:	2802      	cmp	r0, #2
   102aa:	d001      	beq.n	102b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
   102ac:	2803      	cmp	r0, #3
   102ae:	d131      	bne.n	10314 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   102b0:	7e60      	ldrb	r0, [r4, #25]
   102b2:	b948      	cbnz	r0, 102c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
   102b4:	78a0      	ldrb	r0, [r4, #2]
   102b6:	2801      	cmp	r0, #1
   102b8:	d12c      	bne.n	10314 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   102ba:	f7fb fe89 	bl	bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   102be:	4601      	mov	r1, r0
   102c0:	78a0      	ldrb	r0, [r4, #2]
   102c2:	ea30 0101 	bics.w	r1, r0, r1
   102c6:	d001      	beq.n	102cc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
   102c8:	2011      	movs	r0, #17
   102ca:	bd70      	pop	{r4, r5, r6, pc}
   102cc:	07c0      	lsls	r0, r0, #31
   102ce:	d006      	beq.n	102de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
   102d0:	78e0      	ldrb	r0, [r4, #3]
   102d2:	2301      	movs	r3, #1
   102d4:	6922      	ldr	r2, [r4, #16]
   102d6:	68a1      	ldr	r1, [r4, #8]
   102d8:	f000 f820 	bl	1031c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
   102dc:	4605      	mov	r5, r0
   102de:	78a0      	ldrb	r0, [r4, #2]
   102e0:	0780      	lsls	r0, r0, #30
   102e2:	d506      	bpl.n	102f2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ac>
   102e4:	78e0      	ldrb	r0, [r4, #3]
   102e6:	2302      	movs	r3, #2
   102e8:	6922      	ldr	r2, [r4, #16]
   102ea:	68a1      	ldr	r1, [r4, #8]
   102ec:	f000 f816 	bl	1031c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
   102f0:	4305      	orrs	r5, r0
   102f2:	78a0      	ldrb	r0, [r4, #2]
   102f4:	0740      	lsls	r0, r0, #29
   102f6:	d506      	bpl.n	10306 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c0>
   102f8:	78e0      	ldrb	r0, [r4, #3]
   102fa:	2304      	movs	r3, #4
   102fc:	6922      	ldr	r2, [r4, #16]
   102fe:	68a1      	ldr	r1, [r4, #8]
   10300:	f000 f80c 	bl	1031c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
   10304:	4305      	orrs	r5, r0
   10306:	b10d      	cbz	r5, 1030c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
   10308:	4628      	mov	r0, r5
   1030a:	bd70      	pop	{r4, r5, r6, pc}
   1030c:	7e20      	ldrb	r0, [r4, #24]
   1030e:	b108      	cbz	r0, 10314 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   10310:	2807      	cmp	r0, #7
   10312:	d901      	bls.n	10318 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
   10314:	2012      	movs	r0, #18
   10316:	bd70      	pop	{r4, r5, r6, pc}
   10318:	2000      	movs	r0, #0
   1031a:	bd70      	pop	{r4, r5, r6, pc}
   1031c:	b570      	push	{r4, r5, r6, lr}
   1031e:	4614      	mov	r4, r2
   10320:	460d      	mov	r5, r1
   10322:	b108      	cbz	r0, 10328 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e2>
   10324:	2801      	cmp	r0, #1
   10326:	d10a      	bne.n	1033e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f8>
   10328:	4619      	mov	r1, r3
   1032a:	4610      	mov	r0, r2
   1032c:	f7fb fd70 	bl	be10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
   10330:	b138      	cbz	r0, 10342 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
   10332:	4628      	mov	r0, r5
   10334:	f7fb fd34 	bl	bda0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
   10338:	b118      	cbz	r0, 10342 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
   1033a:	42ac      	cmp	r4, r5
   1033c:	d903      	bls.n	10346 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
   1033e:	2012      	movs	r0, #18
   10340:	bd70      	pop	{r4, r5, r6, pc}
   10342:	2030      	movs	r0, #48	; 0x30
   10344:	bd70      	pop	{r4, r5, r6, pc}
   10346:	2000      	movs	r0, #0
   10348:	bd70      	pop	{r4, r5, r6, pc}
   1034a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1034e:	461d      	mov	r5, r3
   10350:	4610      	mov	r0, r2
   10352:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
   10356:	1f8b      	subs	r3, r1, #6
   10358:	f640 427a 	movw	r2, #3194	; 0xc7a
   1035c:	9e08      	ldr	r6, [sp, #32]
   1035e:	4293      	cmp	r3, r2
   10360:	d81c      	bhi.n	1039c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   10362:	1f83      	subs	r3, r0, #6
   10364:	4293      	cmp	r3, r2
   10366:	d819      	bhi.n	1039c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   10368:	4281      	cmp	r1, r0
   1036a:	d817      	bhi.n	1039c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   1036c:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   10370:	d214      	bcs.n	1039c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   10372:	f1a4 010a 	sub.w	r1, r4, #10
   10376:	1f12      	subs	r2, r2, #4
   10378:	4291      	cmp	r1, r2
   1037a:	d80f      	bhi.n	1039c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   1037c:	f7fe fafb 	bl	e976 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   10380:	1c6d      	adds	r5, r5, #1
   10382:	4368      	muls	r0, r5
   10384:	f240 2171 	movw	r1, #625	; 0x271
   10388:	0040      	lsls	r0, r0, #1
   1038a:	434c      	muls	r4, r1
   1038c:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
   10390:	d204      	bcs.n	1039c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   10392:	42b7      	cmp	r7, r6
   10394:	d802      	bhi.n	1039c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   10396:	2001      	movs	r0, #1
   10398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1039c:	2000      	movs	r0, #0
   1039e:	e7fb      	b.n	10398 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x352>
   103a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103a4:	4606      	mov	r6, r0
   103a6:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   103aa:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   103ae:	4615      	mov	r5, r2
   103b0:	302c      	adds	r0, #44	; 0x2c
   103b2:	f7f8 fa9f 	bl	88f4 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>
   103b6:	4680      	mov	r8, r0
   103b8:	2102      	movs	r1, #2
   103ba:	f7fe fb6a 	bl	ea92 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   103be:	4287      	cmp	r7, r0
   103c0:	d200      	bcs.n	103c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
   103c2:	4638      	mov	r0, r7
   103c4:	4607      	mov	r7, r0
   103c6:	2102      	movs	r1, #2
   103c8:	4640      	mov	r0, r8
   103ca:	f7fe fb62 	bl	ea92 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   103ce:	4284      	cmp	r4, r0
   103d0:	d200      	bcs.n	103d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
   103d2:	4620      	mov	r0, r4
   103d4:	8831      	ldrh	r1, [r6, #0]
   103d6:	8029      	strh	r1, [r5, #0]
   103d8:	2f1b      	cmp	r7, #27
   103da:	d913      	bls.n	10404 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
   103dc:	2ffb      	cmp	r7, #251	; 0xfb
   103de:	d300      	bcc.n	103e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
   103e0:	27fb      	movs	r7, #251	; 0xfb
   103e2:	806f      	strh	r7, [r5, #2]
   103e4:	281b      	cmp	r0, #27
   103e6:	d90f      	bls.n	10408 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c2>
   103e8:	28fb      	cmp	r0, #251	; 0xfb
   103ea:	d300      	bcc.n	103ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
   103ec:	20fb      	movs	r0, #251	; 0xfb
   103ee:	80e8      	strh	r0, [r5, #6]
   103f0:	4640      	mov	r0, r8
   103f2:	f7ff fe49 	bl	10088 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   103f6:	80a8      	strh	r0, [r5, #4]
   103f8:	4640      	mov	r0, r8
   103fa:	f7ff fe45 	bl	10088 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   103fe:	8128      	strh	r0, [r5, #8]
   10400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10404:	271b      	movs	r7, #27
   10406:	e7ec      	b.n	103e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
   10408:	201b      	movs	r0, #27
   1040a:	e7f0      	b.n	103ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
   1040c:	b510      	push	{r4, lr}
   1040e:	f000 f860 	bl	104d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   10412:	2800      	cmp	r0, #0
   10414:	d000      	beq.n	10418 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d2>
   10416:	2001      	movs	r0, #1
   10418:	bd10      	pop	{r4, pc}
   1041a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1041e:	7890      	ldrb	r0, [r2, #2]
   10420:	9e06      	ldr	r6, [sp, #24]
   10422:	461d      	mov	r5, r3
   10424:	4614      	mov	r4, r2
   10426:	b908      	cbnz	r0, 1042c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e6>
   10428:	f7fb fdd2 	bl	bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1042c:	78e4      	ldrb	r4, [r4, #3]
   1042e:	4607      	mov	r7, r0
   10430:	b914      	cbnz	r4, 10438 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3f2>
   10432:	f7fb fdcd 	bl	bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10436:	4604      	mov	r4, r0
   10438:	b16f      	cbz	r7, 10456 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
   1043a:	b164      	cbz	r4, 10456 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
   1043c:	4638      	mov	r0, r7
   1043e:	f7ff fe2d 	bl	1009c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   10442:	4620      	mov	r0, r4
   10444:	f7ff fe2a 	bl	1009c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   10448:	b12f      	cbz	r7, 10456 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
   1044a:	b124      	cbz	r4, 10456 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
   1044c:	702f      	strb	r7, [r5, #0]
   1044e:	7034      	strb	r4, [r6, #0]
   10450:	2000      	movs	r0, #0
   10452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10456:	2009      	movs	r0, #9
   10458:	e7fb      	b.n	10452 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x40c>
   1045a:	b510      	push	{r4, lr}
   1045c:	f7fd f808 	bl	d470 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   10460:	b928      	cbnz	r0, 1046e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x428>
   10462:	f7fd f83b 	bl	d4dc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   10466:	b910      	cbnz	r0, 1046e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x428>
   10468:	f7fd f842 	bl	d4f0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   1046c:	b108      	cbz	r0, 10472 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42c>
   1046e:	2008      	movs	r0, #8
   10470:	bd10      	pop	{r4, pc}
   10472:	f7fc ffd2 	bl	d41a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   10476:	b940      	cbnz	r0, 1048a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   10478:	f7fc ffd9 	bl	d42e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   1047c:	b928      	cbnz	r0, 1048a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   1047e:	f7fc ffed 	bl	d45c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   10482:	b910      	cbnz	r0, 1048a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   10484:	f7fc fffe 	bl	d484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10488:	b108      	cbz	r0, 1048e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x448>
   1048a:	2004      	movs	r0, #4
   1048c:	bd10      	pop	{r4, pc}
   1048e:	f44f 61b1 	mov.w	r1, #1416	; 0x588
   10492:	2039      	movs	r0, #57	; 0x39
   10494:	f7f4 fc40 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10498:	b510      	push	{r4, lr}
   1049a:	f7fb fd93 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1049e:	f3c0 1040 	ubfx	r0, r0, #5, #1
   104a2:	bd10      	pop	{r4, pc}
   104a4:	6840      	ldr	r0, [r0, #4]
   104a6:	f000 b800 	b.w	104aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
   104aa:	b508      	push	{r3, lr}
   104ac:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   104b0:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
   104b4:	f88d 0000 	strb.w	r0, [sp]
   104b8:	9800      	ldr	r0, [sp, #0]
   104ba:	9000      	str	r0, [sp, #0]
   104bc:	f89d 0000 	ldrb.w	r0, [sp]
   104c0:	1e40      	subs	r0, r0, #1
   104c2:	4208      	tst	r0, r1
   104c4:	d003      	beq.n	104ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x488>
   104c6:	2904      	cmp	r1, #4
   104c8:	d001      	beq.n	104ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x488>
   104ca:	2001      	movs	r0, #1
   104cc:	bd08      	pop	{r3, pc}
   104ce:	2000      	movs	r0, #0
   104d0:	bd08      	pop	{r3, pc}
   104d2:	b510      	push	{r4, lr}
   104d4:	f7f8 faa0 	bl	8a18 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
   104d8:	2804      	cmp	r0, #4
   104da:	d003      	beq.n	104e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
   104dc:	2805      	cmp	r0, #5
   104de:	d001      	beq.n	104e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
   104e0:	2000      	movs	r0, #0
   104e2:	bd10      	pop	{r4, pc}
   104e4:	2001      	movs	r0, #1
   104e6:	bd10      	pop	{r4, pc}
   104e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   104ea:	b089      	sub	sp, #36	; 0x24
   104ec:	4604      	mov	r4, r0
   104ee:	8800      	ldrh	r0, [r0, #0]
   104f0:	a906      	add	r1, sp, #24
   104f2:	f7fe fa34 	bl	e95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   104f6:	2800      	cmp	r0, #0
   104f8:	d143      	bne.n	10582 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   104fa:	9807      	ldr	r0, [sp, #28]
   104fc:	2601      	movs	r6, #1
   104fe:	f890 119e 	ldrb.w	r1, [r0, #414]	; 0x19e
   10502:	f88d 1008 	strb.w	r1, [sp, #8]
   10506:	9902      	ldr	r1, [sp, #8]
   10508:	9102      	str	r1, [sp, #8]
   1050a:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1050e:	f88d 100c 	strb.w	r1, [sp, #12]
   10512:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   10516:	3078      	adds	r0, #120	; 0x78
   10518:	291d      	cmp	r1, #29
   1051a:	d102      	bne.n	10522 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4dc>
   1051c:	f89d 100c 	ldrb.w	r1, [sp, #12]
   10520:	b141      	cbz	r1, 10534 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ee>
   10522:	2100      	movs	r1, #0
   10524:	f88d 1004 	strb.w	r1, [sp, #4]
   10528:	2105      	movs	r1, #5
   1052a:	304e      	adds	r0, #78	; 0x4e
   1052c:	f7ff fa0a 	bl	f944 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
   10530:	b110      	cbz	r0, 10538 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f2>
   10532:	e004      	b.n	1053e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f8>
   10534:	2101      	movs	r1, #1
   10536:	e7f5      	b.n	10524 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
   10538:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1053c:	b300      	cbz	r0, 10580 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53a>
   1053e:	8921      	ldrh	r1, [r4, #8]
   10540:	88e0      	ldrh	r0, [r4, #6]
   10542:	f7ff fde1 	bl	10108 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
   10546:	2800      	cmp	r0, #0
   10548:	d11b      	bne.n	10582 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   1054a:	88a1      	ldrh	r1, [r4, #4]
   1054c:	8860      	ldrh	r0, [r4, #2]
   1054e:	f7ff fddb 	bl	10108 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
   10552:	2800      	cmp	r0, #0
   10554:	d115      	bne.n	10582 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   10556:	8921      	ldrh	r1, [r4, #8]
   10558:	88e0      	ldrh	r0, [r4, #6]
   1055a:	f7ff fdcb 	bl	100f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
   1055e:	2800      	cmp	r0, #0
   10560:	d10f      	bne.n	10582 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   10562:	88a1      	ldrh	r1, [r4, #4]
   10564:	8860      	ldrh	r0, [r4, #2]
   10566:	f7ff fdc5 	bl	100f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
   1056a:	0007      	movs	r7, r0
   1056c:	d109      	bne.n	10582 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   1056e:	9807      	ldr	r0, [sp, #28]
   10570:	f500 7599 	add.w	r5, r0, #306	; 0x132
   10574:	706e      	strb	r6, [r5, #1]
   10576:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1057a:	b121      	cbz	r1, 10586 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x540>
   1057c:	273a      	movs	r7, #58	; 0x3a
   1057e:	e02d      	b.n	105dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x596>
   10580:	201a      	movs	r0, #26
   10582:	b009      	add	sp, #36	; 0x24
   10584:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10586:	4631      	mov	r1, r6
   10588:	aa03      	add	r2, sp, #12
   1058a:	f7ff ff09 	bl	103a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
   1058e:	8861      	ldrh	r1, [r4, #2]
   10590:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   10594:	4281      	cmp	r1, r0
   10596:	d200      	bcs.n	1059a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x554>
   10598:	4608      	mov	r0, r1
   1059a:	80e8      	strh	r0, [r5, #6]
   1059c:	88a1      	ldrh	r1, [r4, #4]
   1059e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   105a2:	4281      	cmp	r1, r0
   105a4:	d200      	bcs.n	105a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x562>
   105a6:	4608      	mov	r0, r1
   105a8:	8128      	strh	r0, [r5, #8]
   105aa:	88e2      	ldrh	r2, [r4, #6]
   105ac:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   105b0:	428a      	cmp	r2, r1
   105b2:	d200      	bcs.n	105b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x570>
   105b4:	4611      	mov	r1, r2
   105b6:	8069      	strh	r1, [r5, #2]
   105b8:	8922      	ldrh	r2, [r4, #8]
   105ba:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   105be:	428a      	cmp	r2, r1
   105c0:	d200      	bcs.n	105c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x57e>
   105c2:	4611      	mov	r1, r2
   105c4:	f640 0248 	movw	r2, #2120	; 0x848
   105c8:	80a9      	strh	r1, [r5, #4]
   105ca:	4291      	cmp	r1, r2
   105cc:	d300      	bcc.n	105d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x58a>
   105ce:	4611      	mov	r1, r2
   105d0:	80a9      	strh	r1, [r5, #4]
   105d2:	4290      	cmp	r0, r2
   105d4:	d200      	bcs.n	105d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x592>
   105d6:	4602      	mov	r2, r0
   105d8:	812a      	strh	r2, [r5, #8]
   105da:	702e      	strb	r6, [r5, #0]
   105dc:	2000      	movs	r0, #0
   105de:	7068      	strb	r0, [r5, #1]
   105e0:	4638      	mov	r0, r7
   105e2:	e7ce      	b.n	10582 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   105e4:	b530      	push	{r4, r5, lr}
   105e6:	f340 0400 	sbfx	r4, r0, #0, #1
   105ea:	f340 0040 	sbfx	r0, r0, #1, #1
   105ee:	1c40      	adds	r0, r0, #1
   105f0:	9d03      	ldr	r5, [sp, #12]
   105f2:	1c64      	adds	r4, r4, #1
   105f4:	d000      	beq.n	105f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b2>
   105f6:	b119      	cbz	r1, 10600 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
   105f8:	b100      	cbz	r0, 105fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b6>
   105fa:	b10a      	cbz	r2, 10600 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
   105fc:	b91c      	cbnz	r4, 10606 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c0>
   105fe:	e001      	b.n	10604 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5be>
   10600:	2011      	movs	r0, #17
   10602:	bd30      	pop	{r4, r5, pc}
   10604:	2100      	movs	r1, #0
   10606:	7019      	strb	r1, [r3, #0]
   10608:	b900      	cbnz	r0, 1060c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c6>
   1060a:	2200      	movs	r2, #0
   1060c:	702a      	strb	r2, [r5, #0]
   1060e:	2000      	movs	r0, #0
   10610:	bd30      	pop	{r4, r5, pc}
   10612:	b510      	push	{r4, lr}
   10614:	f7ff ff5d 	bl	104d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   10618:	b120      	cbz	r0, 10624 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
   1061a:	f7f7 f8f7 	bl	780c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   1061e:	b108      	cbz	r0, 10624 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
   10620:	2001      	movs	r0, #1
   10622:	bd10      	pop	{r4, pc}
   10624:	2000      	movs	r0, #0
   10626:	bd10      	pop	{r4, pc}

00010628 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   10628:	6802      	ldr	r2, [r0, #0]
   1062a:	b912      	cbnz	r2, 10632 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   1062c:	6001      	str	r1, [r0, #0]
   1062e:	4770      	bx	lr
   10630:	4602      	mov	r2, r0
   10632:	6850      	ldr	r0, [r2, #4]
   10634:	b108      	cbz	r0, 1063a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
   10636:	428a      	cmp	r2, r1
   10638:	d1fa      	bne.n	10630 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   1063a:	428a      	cmp	r2, r1
   1063c:	d0f7      	beq.n	1062e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
   1063e:	6051      	str	r1, [r2, #4]
   10640:	4770      	bx	lr
   10642:	b510      	push	{r4, lr}
   10644:	4604      	mov	r4, r0
   10646:	e002      	b.n	1064e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
   10648:	6820      	ldr	r0, [r4, #0]
   1064a:	4780      	blx	r0
   1064c:	6864      	ldr	r4, [r4, #4]
   1064e:	2c00      	cmp	r4, #0
   10650:	d1fa      	bne.n	10648 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x20>
   10652:	bd10      	pop	{r4, pc}
   10654:	b510      	push	{r4, lr}
   10656:	2000      	movs	r0, #0
   10658:	f7f4 fd26 	bl	50a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   1065c:	f7f4 ff46 	bl	54ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   10660:	f7f5 f982 	bl	5968 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10664:	f7f5 fb74 	bl	5d50 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10668:	2800      	cmp	r0, #0
   1066a:	d003      	beq.n	10674 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4c>
   1066c:	21d0      	movs	r1, #208	; 0xd0
   1066e:	2001      	movs	r0, #1
   10670:	f7f4 fb52 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10674:	bd10      	pop	{r4, pc}
   10676:	b510      	push	{r4, lr}
   10678:	f000 f80a 	bl	10690 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
   1067c:	f7ff f84b 	bl	f716 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
   10680:	2800      	cmp	r0, #0
   10682:	d004      	beq.n	1068e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
   10684:	f240 1155 	movw	r1, #341	; 0x155
   10688:	2001      	movs	r0, #1
   1068a:	f7f4 fb45 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1068e:	bd10      	pop	{r4, pc}
   10690:	b510      	push	{r4, lr}
   10692:	f7f8 f943 	bl	891c <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>
   10696:	b120      	cbz	r0, 106a2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x7a>
   10698:	f240 113b 	movw	r1, #315	; 0x13b
   1069c:	2001      	movs	r0, #1
   1069e:	f7f4 fb3b 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   106a2:	f7f7 f803 	bl	76ac <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   106a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   106aa:	f7fa bf59 	b.w	b560 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
   106ae:	0001      	.short	0x0001
   106b0:	0002000b 	.word	0x0002000b
   106b4:	0005000a 	.word	0x0005000a
   106b8:	000a0009 	.word	0x000a0009
   106bc:	00140008 	.word	0x00140008
   106c0:	001e0007 	.word	0x001e0007
   106c4:	00320006 	.word	0x00320006
   106c8:	004b0005 	.word	0x004b0005
   106cc:	00640004 	.word	0x00640004
   106d0:	00960003 	.word	0x00960003
   106d4:	00fa0002 	.word	0x00fa0002
   106d8:	01f40001 	.word	0x01f40001
	...

000106de <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   106de:	b510      	push	{r4, lr}
   106e0:	f7fc f82a 	bl	c738 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   106e4:	f000 f850 	bl	10788 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   106e8:	f7fb fce6 	bl	c0b8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   106ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   106f0:	f7fb bde4 	b.w	c2bc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000106f4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   106f4:	b510      	push	{r4, lr}
   106f6:	24c8      	movs	r4, #200	; 0xc8
   106f8:	1e64      	subs	r4, r4, #1
   106fa:	b2e4      	uxtb	r4, r4
   106fc:	f7fb fcfa 	bl	c0f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10700:	2802      	cmp	r0, #2
   10702:	d003      	beq.n	1070c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10704:	2801      	cmp	r0, #1
   10706:	d000      	beq.n	1070a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10708:	2000      	movs	r0, #0
   1070a:	bd10      	pop	{r4, pc}
   1070c:	2c00      	cmp	r4, #0
   1070e:	d1f3      	bne.n	106f8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10710:	2193      	movs	r1, #147	; 0x93
   10712:	203b      	movs	r0, #59	; 0x3b
   10714:	f7f4 fb00 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010718 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
   10718:	b510      	push	{r4, lr}
   1071a:	f7f4 f997 	bl	4a4c <mpsl_fem_lna_configuration_clear>
   1071e:	2800      	cmp	r0, #0
   10720:	d005      	beq.n	1072e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   10722:	1c40      	adds	r0, r0, #1
   10724:	d003      	beq.n	1072e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   10726:	2150      	movs	r1, #80	; 0x50
   10728:	2040      	movs	r0, #64	; 0x40
   1072a:	f7f4 faf5 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1072e:	bd10      	pop	{r4, pc}

00010730 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
   10730:	b510      	push	{r4, lr}
   10732:	f7f4 f997 	bl	4a64 <mpsl_fem_pa_configuration_clear>
   10736:	2800      	cmp	r0, #0
   10738:	d005      	beq.n	10746 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   1073a:	1c40      	adds	r0, r0, #1
   1073c:	d003      	beq.n	10746 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   1073e:	2149      	movs	r1, #73	; 0x49
   10740:	2040      	movs	r0, #64	; 0x40
   10742:	f7f4 fae9 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10746:	bd10      	pop	{r4, pc}

00010748 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
   10748:	b510      	push	{r4, lr}
   1074a:	f7f4 f979 	bl	4a40 <mpsl_fem_disable>
   1074e:	2800      	cmp	r0, #0
   10750:	d005      	beq.n	1075e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   10752:	1c40      	adds	r0, r0, #1
   10754:	d003      	beq.n	1075e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   10756:	2157      	movs	r1, #87	; 0x57
   10758:	2040      	movs	r0, #64	; 0x40
   1075a:	f7f4 fadd 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1075e:	bd10      	pop	{r4, pc}

00010760 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
   10760:	b510      	push	{r4, lr}
   10762:	2100      	movs	r1, #0
   10764:	4608      	mov	r0, r1
   10766:	f7f4 f977 	bl	4a58 <mpsl_fem_lna_configuration_set>
   1076a:	b108      	cbz	r0, 10770 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
   1076c:	2000      	movs	r0, #0
   1076e:	bd10      	pop	{r4, pc}
   10770:	2001      	movs	r0, #1
   10772:	bd10      	pop	{r4, pc}

00010774 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
   10774:	b508      	push	{r3, lr}
   10776:	4668      	mov	r0, sp
   10778:	f7f4 f980 	bl	4a7c <mpsl_fem_pa_is_configured>
   1077c:	f89d 0000 	ldrb.w	r0, [sp]
   10780:	2800      	cmp	r0, #0
   10782:	d000      	beq.n	10786 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
   10784:	2001      	movs	r0, #1
   10786:	bd08      	pop	{r3, pc}

00010788 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10788:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1078c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10790:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10794:	f3bf 8f4f 	dsb	sy
   10798:	f3bf 8f6f 	isb	sy
   1079c:	f7fb be68 	b.w	c470 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
   107a0:	2800      	cmp	r0, #0
   107a2:	db09      	blt.n	107b8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   107a4:	f000 021f 	and.w	r2, r0, #31
   107a8:	2101      	movs	r1, #1
   107aa:	4091      	lsls	r1, r2
   107ac:	0940      	lsrs	r0, r0, #5
   107ae:	0080      	lsls	r0, r0, #2
   107b0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   107b4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   107b8:	4770      	bx	lr
   107ba:	2800      	cmp	r0, #0
   107bc:	db0d      	blt.n	107da <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   107be:	f000 021f 	and.w	r2, r0, #31
   107c2:	2101      	movs	r1, #1
   107c4:	4091      	lsls	r1, r2
   107c6:	0940      	lsrs	r0, r0, #5
   107c8:	0080      	lsls	r0, r0, #2
   107ca:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   107ce:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   107d2:	f3bf 8f4f 	dsb	sy
   107d6:	f3bf 8f6f 	isb	sy
   107da:	4770      	bx	lr

000107dc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   107dc:	b510      	push	{r4, lr}
   107de:	2801      	cmp	r0, #1
   107e0:	d006      	beq.n	107f0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
   107e2:	2802      	cmp	r0, #2
   107e4:	d006      	beq.n	107f4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
   107e6:	f640 3164 	movw	r1, #2916	; 0xb64
   107ea:	203e      	movs	r0, #62	; 0x3e
   107ec:	f7f4 fa94 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107f0:	2028      	movs	r0, #40	; 0x28
   107f2:	bd10      	pop	{r4, pc}
   107f4:	2018      	movs	r0, #24
   107f6:	bd10      	pop	{r4, pc}

000107f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   107f8:	b510      	push	{r4, lr}
   107fa:	2801      	cmp	r0, #1
   107fc:	d006      	beq.n	1080c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
   107fe:	2802      	cmp	r0, #2
   10800:	d007      	beq.n	10812 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
   10802:	f640 3178 	movw	r1, #2936	; 0xb78
   10806:	203e      	movs	r0, #62	; 0x3e
   10808:	f7f4 fa86 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1080c:	f641 6014 	movw	r0, #7700	; 0x1e14
   10810:	bd10      	pop	{r4, pc}
   10812:	f241 1030 	movw	r0, #4400	; 0x1130
   10816:	bd10      	pop	{r4, pc}

00010818 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
   10818:	f7fc bcb0 	b.w	d17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
   1081c:	b510      	push	{r4, lr}
   1081e:	460a      	mov	r2, r1
   10820:	b130      	cbz	r0, 10830 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
   10822:	2801      	cmp	r0, #1
   10824:	d00b      	beq.n	1083e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
   10826:	f240 6127 	movw	r1, #1575	; 0x627
   1082a:	203e      	movs	r0, #62	; 0x3e
   1082c:	f7f4 fa74 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10834:	f102 0128 	add.w	r1, r2, #40	; 0x28
   10838:	4610      	mov	r0, r2
   1083a:	f7fb bcaf 	b.w	c19c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
   1083e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10842:	f102 0129 	add.w	r1, r2, #41	; 0x29
   10846:	4610      	mov	r0, r2
   10848:	f7fb bc92 	b.w	c170 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0001084c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   1084c:	b570      	push	{r4, r5, r6, lr}
   1084e:	4605      	mov	r5, r0
   10850:	4614      	mov	r4, r2
   10852:	4608      	mov	r0, r1
   10854:	f7ff ffd0 	bl	107f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10858:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   1085c:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   10860:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
   10864:	4620      	mov	r0, r4
   10866:	f7ff ffc7 	bl	107f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1086a:	4428      	add	r0, r5
   1086c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10870:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   10874:	fbb0 f5f1 	udiv	r5, r0, r1
   10878:	4620      	mov	r0, r4
   1087a:	f7ff ffaf 	bl	107dc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1087e:	4428      	add	r0, r5
   10880:	1d40      	adds	r0, r0, #5
   10882:	bd70      	pop	{r4, r5, r6, pc}

00010884 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   10884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10888:	4607      	mov	r7, r0
   1088a:	461d      	mov	r5, r3
   1088c:	460e      	mov	r6, r1
   1088e:	4614      	mov	r4, r2
   10890:	4610      	mov	r0, r2
   10892:	f7ff ffb1 	bl	107f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10896:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   1089a:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   1089e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   108a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   108a6:	2e02      	cmp	r6, #2
   108a8:	d00e      	beq.n	108c8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
   108aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
   108ae:	4411      	add	r1, r2
   108b0:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
   108b4:	fbb1 f6f0 	udiv	r6, r1, r0
   108b8:	4620      	mov	r0, r4
   108ba:	f7ff ff8f 	bl	107dc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   108be:	4430      	add	r0, r6
   108c0:	4428      	add	r0, r5
   108c2:	1d40      	adds	r0, r0, #5
   108c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   108c8:	4602      	mov	r2, r0
   108ca:	e7f0      	b.n	108ae <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

000108cc <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   108cc:	b510      	push	{r4, lr}
   108ce:	4604      	mov	r4, r0
   108d0:	4608      	mov	r0, r1
   108d2:	f7ff ff91 	bl	107f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   108d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   108da:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   108de:	fbb0 f0f1 	udiv	r0, r0, r1
   108e2:	1a20      	subs	r0, r4, r0
   108e4:	1e80      	subs	r0, r0, #2
   108e6:	bd10      	pop	{r4, pc}

000108e8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   108e8:	b510      	push	{r4, lr}
   108ea:	4604      	mov	r4, r0
   108ec:	4608      	mov	r0, r1
   108ee:	f7ff ff83 	bl	107f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   108f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   108f6:	fbb0 f0f1 	udiv	r0, r0, r1
   108fa:	1a20      	subs	r0, r4, r0
   108fc:	bd10      	pop	{r4, pc}

000108fe <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   108fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10902:	2902      	cmp	r1, #2
   10904:	d008      	beq.n	10918 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
   10906:	f240 51dc 	movw	r1, #1500	; 0x5dc
   1090a:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   1090e:	fbb1 f1f2 	udiv	r1, r1, r2
   10912:	4408      	add	r0, r1
   10914:	1e80      	subs	r0, r0, #2
   10916:	4770      	bx	lr
   10918:	4611      	mov	r1, r2
   1091a:	e7f6      	b.n	1090a <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0001091c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   1091c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10920:	2902      	cmp	r1, #2
   10922:	d007      	beq.n	10934 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
   10924:	f240 51dc 	movw	r1, #1500	; 0x5dc
   10928:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   1092c:	fbb1 f1f2 	udiv	r1, r1, r2
   10930:	4408      	add	r0, r1
   10932:	4770      	bx	lr
   10934:	4611      	mov	r1, r2
   10936:	e7f7      	b.n	10928 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
   10938:	1702080c 	.word	0x1702080c
   1093c:	0201010d 	.word	0x0201010d
   10940:	01010909 	.word	0x01010909
   10944:	18090206 	.word	0x18090206
   10948:	01010318 	.word	0x01010318
   1094c:	03030909 	.word	0x03030909
   10950:	05          	.byte	0x05
   10951:	55          	.byte	0x55
   10952:	5555      	.short	0x5555
   10954:	2625      	.short	0x2625
   10956:	27          	.byte	0x27
   10957:	01          	.byte	0x01
   10958:	0103      	.short	0x0103
   1095a:	01          	.byte	0x01
   1095b:	01          	.byte	0x01

0001095c <scan_connecting_error>:


//Scanning error
void scan_connecting_error(struct bt_scan_device_info *device_info)
{
	printk("Connection to peer failed!\n");
   1095c:	4801      	ldr	r0, [pc, #4]	; (10964 <scan_connecting_error+0x8>)
   1095e:	f00f bb38 	b.w	1ffd2 <printk>
   10962:	bf00      	nop
   10964:	00023633 	.word	0x00023633

00010968 <start_scan>:
{
   10968:	b510      	push	{r4, lr}
   1096a:	b08c      	sub	sp, #48	; 0x30
	struct bt_le_scan_param scan_param = {
   1096c:	ab07      	add	r3, sp, #28
   1096e:	2214      	movs	r2, #20
   10970:	2100      	movs	r1, #0
   10972:	4618      	mov	r0, r3
   10974:	f012 f999 	bl	22caa <memset>
   10978:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
   1097c:	9209      	str	r2, [sp, #36]	; 0x24
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
   1097e:	4a1a      	ldr	r2, [pc, #104]	; (109e8 <start_scan+0x80>)
	struct bt_scan_init_param scan_init = {
   10980:	9004      	str	r0, [sp, #16]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
   10982:	6851      	ldr	r1, [r2, #4]
   10984:	6810      	ldr	r0, [r2, #0]
   10986:	ab02      	add	r3, sp, #8
   10988:	c303      	stmia	r3!, {r0, r1}
	struct bt_le_scan_param scan_param = {
   1098a:	2401      	movs	r4, #1
	struct bt_scan_init_param scan_init = {
   1098c:	ab02      	add	r3, sp, #8
	bt_scan_init(&scan_init);
   1098e:	a804      	add	r0, sp, #16
	struct bt_scan_init_param scan_init = {
   10990:	9306      	str	r3, [sp, #24]
	struct bt_le_scan_param scan_param = {
   10992:	f88d 401c 	strb.w	r4, [sp, #28]
   10996:	9408      	str	r4, [sp, #32]
	struct bt_scan_init_param scan_init = {
   10998:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_scan_init(&scan_init);
   1099c:	f001 fc3e 	bl	1221c <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
   109a0:	4812      	ldr	r0, [pc, #72]	; (109ec <start_scan+0x84>)
   109a2:	f001 faef 	bl	11f84 <bt_scan_cb_register>
	char name = "Thingy one";
   109a6:	4b12      	ldr	r3, [pc, #72]	; (109f0 <start_scan+0x88>)
   109a8:	f88d 3007 	strb.w	r3, [sp, #7]
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_NAME, data);
   109ac:	f10d 0107 	add.w	r1, sp, #7
   109b0:	2000      	movs	r0, #0
   109b2:	f001 faf7 	bl	11fa4 <bt_scan_filter_add>
	if (err) {
   109b6:	4601      	mov	r1, r0
   109b8:	b120      	cbz	r0, 109c4 <start_scan+0x5c>
		printk("Scanning filters cannot be set\n");
   109ba:	480e      	ldr	r0, [pc, #56]	; (109f4 <start_scan+0x8c>)
	printk("Scanning...\n");
   109bc:	f00f fb09 	bl	1ffd2 <printk>
}
   109c0:	b00c      	add	sp, #48	; 0x30
   109c2:	bd10      	pop	{r4, pc}
	err = bt_scan_filter_enable(BT_SCAN_NAME_FILTER, false);
   109c4:	4620      	mov	r0, r4
   109c6:	f001 fb51 	bl	1206c <bt_scan_filter_enable>
	if (err) {
   109ca:	b110      	cbz	r0, 109d2 <start_scan+0x6a>
		printk("Filters cannot be turned on\n");
   109cc:	480a      	ldr	r0, [pc, #40]	; (109f8 <start_scan+0x90>)
   109ce:	f00f fb00 	bl	1ffd2 <printk>
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   109d2:	2001      	movs	r0, #1
   109d4:	f001 fc5c 	bl	12290 <bt_scan_start>
	if (err) {
   109d8:	4601      	mov	r1, r0
   109da:	b110      	cbz	r0, 109e2 <start_scan+0x7a>
		printk("Scanning failed to start, err %d\n", err);
   109dc:	4807      	ldr	r0, [pc, #28]	; (109fc <start_scan+0x94>)
   109de:	f00f faf8 	bl	1ffd2 <printk>
	printk("Scanning...\n");
   109e2:	4807      	ldr	r0, [pc, #28]	; (10a00 <start_scan+0x98>)
   109e4:	e7ea      	b.n	109bc <start_scan+0x54>
   109e6:	bf00      	nop
   109e8:	0002304c 	.word	0x0002304c
   109ec:	20000424 	.word	0x20000424
   109f0:	0002364f 	.word	0x0002364f
   109f4:	0002365a 	.word	0x0002365a
   109f8:	0002367a 	.word	0x0002367a
   109fc:	00023697 	.word	0x00023697
   10a00:	000236b9 	.word	0x000236b9

00010a04 <ble_ready>:
};


//Callback function after enabling bluetooth
static void ble_ready(int err)
{
   10a04:	b508      	push	{r3, lr}
	printk("Bluetooth ready\n");
   10a06:	4805      	ldr	r0, [pc, #20]	; (10a1c <ble_ready+0x18>)
   10a08:	f00f fae3 	bl	1ffd2 <printk>

	bt_conn_cb_register(&conn_callbacks);
   10a0c:	4804      	ldr	r0, [pc, #16]	; (10a20 <ble_ready+0x1c>)
   10a0e:	f004 fb1b 	bl	15048 <bt_conn_cb_register>
	start_scan();
}
   10a12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	start_scan();
   10a16:	f7ff bfa7 	b.w	10968 <start_scan>
   10a1a:	bf00      	nop
   10a1c:	000236c6 	.word	0x000236c6
   10a20:	20000410 	.word	0x20000410

00010a24 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   10a24:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   10a26:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   10a28:	b08a      	sub	sp, #40	; 0x28
   10a2a:	4604      	mov	r4, r0
   10a2c:	460e      	mov	r6, r1
   10a2e:	ad07      	add	r5, sp, #28
   10a30:	2b03      	cmp	r3, #3
   10a32:	d820      	bhi.n	10a76 <bt_addr_le_to_str.constprop.0+0x52>
   10a34:	e8df f003 	tbb	[pc, r3]
   10a38:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   10a3c:	4911      	ldr	r1, [pc, #68]	; (10a84 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   10a3e:	4628      	mov	r0, r5
   10a40:	f012 f93b 	bl	22cba <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10a44:	7863      	ldrb	r3, [r4, #1]
   10a46:	9304      	str	r3, [sp, #16]
   10a48:	78a3      	ldrb	r3, [r4, #2]
   10a4a:	9303      	str	r3, [sp, #12]
   10a4c:	78e3      	ldrb	r3, [r4, #3]
   10a4e:	9302      	str	r3, [sp, #8]
   10a50:	7923      	ldrb	r3, [r4, #4]
   10a52:	9301      	str	r3, [sp, #4]
   10a54:	7963      	ldrb	r3, [r4, #5]
   10a56:	9300      	str	r3, [sp, #0]
   10a58:	4a0b      	ldr	r2, [pc, #44]	; (10a88 <bt_addr_le_to_str.constprop.0+0x64>)
   10a5a:	79a3      	ldrb	r3, [r4, #6]
   10a5c:	9505      	str	r5, [sp, #20]
   10a5e:	211e      	movs	r1, #30
   10a60:	4630      	mov	r0, r6
   10a62:	f00f fac3 	bl	1ffec <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   10a66:	b00a      	add	sp, #40	; 0x28
   10a68:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   10a6a:	4908      	ldr	r1, [pc, #32]	; (10a8c <bt_addr_le_to_str.constprop.0+0x68>)
   10a6c:	e7e7      	b.n	10a3e <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
   10a6e:	4908      	ldr	r1, [pc, #32]	; (10a90 <bt_addr_le_to_str.constprop.0+0x6c>)
   10a70:	e7e5      	b.n	10a3e <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
   10a72:	4908      	ldr	r1, [pc, #32]	; (10a94 <bt_addr_le_to_str.constprop.0+0x70>)
   10a74:	e7e3      	b.n	10a3e <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10a76:	4a08      	ldr	r2, [pc, #32]	; (10a98 <bt_addr_le_to_str.constprop.0+0x74>)
   10a78:	210a      	movs	r1, #10
   10a7a:	4628      	mov	r0, r5
   10a7c:	f00f fab6 	bl	1ffec <snprintk>
		break;
   10a80:	e7e0      	b.n	10a44 <bt_addr_le_to_str.constprop.0+0x20>
   10a82:	bf00      	nop
   10a84:	000236d7 	.word	0x000236d7
   10a88:	00023700 	.word	0x00023700
   10a8c:	000236de 	.word	0x000236de
   10a90:	000236e5 	.word	0x000236e5
   10a94:	000236ef 	.word	0x000236ef
   10a98:	000236f9 	.word	0x000236f9

00010a9c <connected>:
{
   10a9c:	b570      	push	{r4, r5, r6, lr}
   10a9e:	b088      	sub	sp, #32
   10aa0:	460c      	mov	r4, r1
   10aa2:	4606      	mov	r6, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10aa4:	f010 fb7e 	bl	211a4 <bt_conn_get_dst>
   10aa8:	4669      	mov	r1, sp
   10aaa:	f7ff ffbb 	bl	10a24 <bt_addr_le_to_str.constprop.0>
	if (err) {
   10aae:	4d0b      	ldr	r5, [pc, #44]	; (10adc <connected+0x40>)
   10ab0:	b16c      	cbz	r4, 10ace <connected+0x32>
		printk("Failed to connect to %s (%u)\n", addr, err);
   10ab2:	480b      	ldr	r0, [pc, #44]	; (10ae0 <connected+0x44>)
   10ab4:	4622      	mov	r2, r4
   10ab6:	4669      	mov	r1, sp
   10ab8:	f00f fa8b 	bl	1ffd2 <printk>
		bt_conn_unref(default_conn);
   10abc:	6828      	ldr	r0, [r5, #0]
   10abe:	f004 f8b3 	bl	14c28 <bt_conn_unref>
		default_conn = NULL;
   10ac2:	2300      	movs	r3, #0
   10ac4:	602b      	str	r3, [r5, #0]
		start_scan();
   10ac6:	f7ff ff4f 	bl	10968 <start_scan>
}
   10aca:	b008      	add	sp, #32
   10acc:	bd70      	pop	{r4, r5, r6, pc}
	printk("Connected: %s\n", addr);
   10ace:	4805      	ldr	r0, [pc, #20]	; (10ae4 <connected+0x48>)
   10ad0:	4669      	mov	r1, sp
   10ad2:	f00f fa7e 	bl	1ffd2 <printk>
	default_conn = conn;
   10ad6:	602e      	str	r6, [r5, #0]
   10ad8:	e7f7      	b.n	10aca <connected+0x2e>
   10ada:	bf00      	nop
   10adc:	20001c80 	.word	0x20001c80
   10ae0:	00023723 	.word	0x00023723
   10ae4:	00023741 	.word	0x00023741

00010ae8 <disconnected>:
{
   10ae8:	b530      	push	{r4, r5, lr}
   10aea:	b089      	sub	sp, #36	; 0x24
   10aec:	460d      	mov	r5, r1
   10aee:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10af0:	f010 fb58 	bl	211a4 <bt_conn_get_dst>
   10af4:	4669      	mov	r1, sp
   10af6:	f7ff ff95 	bl	10a24 <bt_addr_le_to_str.constprop.0>
	printk("Disconnected: %s (reason 0x%02x)\n", addr, reason);
   10afa:	462a      	mov	r2, r5
   10afc:	4669      	mov	r1, sp
   10afe:	4804      	ldr	r0, [pc, #16]	; (10b10 <disconnected+0x28>)
   10b00:	f00f fa67 	bl	1ffd2 <printk>
	bt_conn_unref(conn);
   10b04:	4620      	mov	r0, r4
   10b06:	f004 f88f 	bl	14c28 <bt_conn_unref>
}
   10b0a:	b009      	add	sp, #36	; 0x24
   10b0c:	bd30      	pop	{r4, r5, pc}
   10b0e:	bf00      	nop
   10b10:	00023750 	.word	0x00023750

00010b14 <scan_filter_match>:
{
   10b14:	b510      	push	{r4, lr}
	int rssival = device_info->recv_info->rssi;
   10b16:	6803      	ldr	r3, [r0, #0]
{
   10b18:	b088      	sub	sp, #32
	int rssival = device_info->recv_info->rssi;
   10b1a:	f993 4005 	ldrsb.w	r4, [r3, #5]
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   10b1e:	6818      	ldr	r0, [r3, #0]
   10b20:	4669      	mov	r1, sp
   10b22:	f7ff ff7f 	bl	10a24 <bt_addr_le_to_str.constprop.0>
	printk("Device found: %s, rssi = %i\n", addr,rssival);
   10b26:	4803      	ldr	r0, [pc, #12]	; (10b34 <scan_filter_match+0x20>)
   10b28:	4622      	mov	r2, r4
   10b2a:	4669      	mov	r1, sp
   10b2c:	f00f fa51 	bl	1ffd2 <printk>
}
   10b30:	b008      	add	sp, #32
   10b32:	bd10      	pop	{r4, pc}
   10b34:	00023772 	.word	0x00023772

00010b38 <main>:


//Main
void main(void)
{
   10b38:	b508      	push	{r3, lr}
	int err;

	printk("Bluetooth initialized\n");
   10b3a:	4804      	ldr	r0, [pc, #16]	; (10b4c <main+0x14>)
   10b3c:	f00f fa49 	bl	1ffd2 <printk>

	err = bt_enable(ble_ready);
   10b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = bt_enable(ble_ready);
   10b44:	4802      	ldr	r0, [pc, #8]	; (10b50 <main+0x18>)
   10b46:	f003 ba07 	b.w	13f58 <bt_enable>
   10b4a:	bf00      	nop
   10b4c:	0002378f 	.word	0x0002378f
   10b50:	00010a05 	.word	0x00010a05

00010b54 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   10b54:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   10b56:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   10b5a:	2b02      	cmp	r3, #2
{
   10b5c:	b570      	push	{r4, r5, r6, lr}
   10b5e:	4604      	mov	r4, r0
   10b60:	460e      	mov	r6, r1
	notify->result = res;
   10b62:	6081      	str	r1, [r0, #8]
	switch (method) {
   10b64:	d010      	beq.n	10b88 <sys_notify_finalize+0x34>
   10b66:	2b03      	cmp	r3, #3
   10b68:	d004      	beq.n	10b74 <sys_notify_finalize+0x20>
   10b6a:	2b01      	cmp	r3, #1
   10b6c:	d10f      	bne.n	10b8e <sys_notify_finalize+0x3a>
   10b6e:	2500      	movs	r5, #0
   10b70:	4628      	mov	r0, r5
   10b72:	e001      	b.n	10b78 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   10b74:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   10b76:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   10b78:	2300      	movs	r3, #0
   10b7a:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   10b7c:	b110      	cbz	r0, 10b84 <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   10b7e:	4631      	mov	r1, r6
   10b80:	f00c fd12 	bl	1d5a8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   10b84:	4628      	mov	r0, r5
   10b86:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
   10b88:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   10b8a:	2500      	movs	r5, #0
		break;
   10b8c:	e7f4      	b.n	10b78 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   10b8e:	4a06      	ldr	r2, [pc, #24]	; (10ba8 <sys_notify_finalize+0x54>)
   10b90:	4906      	ldr	r1, [pc, #24]	; (10bac <sys_notify_finalize+0x58>)
   10b92:	4807      	ldr	r0, [pc, #28]	; (10bb0 <sys_notify_finalize+0x5c>)
   10b94:	2345      	movs	r3, #69	; 0x45
   10b96:	f00f fa1c 	bl	1ffd2 <printk>
   10b9a:	4803      	ldr	r0, [pc, #12]	; (10ba8 <sys_notify_finalize+0x54>)
   10b9c:	2145      	movs	r1, #69	; 0x45
   10b9e:	f00f fc72 	bl	20486 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   10ba2:	2500      	movs	r5, #0
   10ba4:	e7e7      	b.n	10b76 <sys_notify_finalize+0x22>
   10ba6:	bf00      	nop
   10ba8:	000237a6 	.word	0x000237a6
   10bac:	00025541 	.word	0x00025541
   10bb0:	000237c9 	.word	0x000237c9

00010bb4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   10bb4:	680b      	ldr	r3, [r1, #0]
   10bb6:	3301      	adds	r3, #1
   10bb8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   10bba:	4b01      	ldr	r3, [pc, #4]	; (10bc0 <char_out+0xc>)
   10bbc:	681b      	ldr	r3, [r3, #0]
   10bbe:	4718      	bx	r3
   10bc0:	2000042c 	.word	0x2000042c

00010bc4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   10bc4:	b507      	push	{r0, r1, r2, lr}
   10bc6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   10bc8:	2100      	movs	r1, #0
{
   10bca:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   10bcc:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   10bce:	4803      	ldr	r0, [pc, #12]	; (10bdc <vprintk+0x18>)
   10bd0:	a901      	add	r1, sp, #4
   10bd2:	f000 fcc7 	bl	11564 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   10bd6:	b003      	add	sp, #12
   10bd8:	f85d fb04 	ldr.w	pc, [sp], #4
   10bdc:	00010bb5 	.word	0x00010bb5

00010be0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   10be0:	b530      	push	{r4, r5, lr}
   10be2:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   10be4:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   10be8:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   10bea:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   10bec:	a901      	add	r1, sp, #4
   10bee:	4805      	ldr	r0, [pc, #20]	; (10c04 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   10bf0:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   10bf2:	f000 fcb7 	bl	11564 <cbvprintf>

	if (ctx.count < ctx.max) {
   10bf6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   10bfa:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   10bfc:	bfb8      	it	lt
   10bfe:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   10c00:	b005      	add	sp, #20
   10c02:	bd30      	pop	{r4, r5, pc}
   10c04:	0001ffad 	.word	0x0001ffad

00010c08 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10c0c:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   10c10:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10c12:	f019 0f08 	tst.w	r9, #8
{
   10c16:	4604      	mov	r4, r0
   10c18:	9203      	str	r2, [sp, #12]
	if (processing) {
   10c1a:	d022      	beq.n	10c62 <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
   10c1c:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10c1e:	bf0c      	ite	eq
   10c20:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10c24:	f049 0920 	orrne.w	r9, r9, #32
   10c28:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   10c2c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10c2e:	4620      	mov	r0, r4
   10c30:	f009 fab4 	bl	1a19c <z_spin_unlock_valid>
   10c34:	b968      	cbnz	r0, 10c52 <process_event+0x4a>
   10c36:	4a9f      	ldr	r2, [pc, #636]	; (10eb4 <process_event+0x2ac>)
   10c38:	499f      	ldr	r1, [pc, #636]	; (10eb8 <process_event+0x2b0>)
   10c3a:	48a0      	ldr	r0, [pc, #640]	; (10ebc <process_event+0x2b4>)
   10c3c:	23ac      	movs	r3, #172	; 0xac
   10c3e:	f00f f9c8 	bl	1ffd2 <printk>
   10c42:	489f      	ldr	r0, [pc, #636]	; (10ec0 <process_event+0x2b8>)
   10c44:	4621      	mov	r1, r4
   10c46:	f00f f9c4 	bl	1ffd2 <printk>
   10c4a:	489a      	ldr	r0, [pc, #616]	; (10eb4 <process_event+0x2ac>)
   10c4c:	21ac      	movs	r1, #172	; 0xac
   10c4e:	f00f fc1a 	bl	20486 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10c52:	9b03      	ldr	r3, [sp, #12]
   10c54:	f383 8811 	msr	BASEPRI, r3
   10c58:	f3bf 8f6f 	isb	sy
}
   10c5c:	b005      	add	sp, #20
   10c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   10c62:	4f98      	ldr	r7, [pc, #608]	; (10ec4 <process_event+0x2bc>)
   10c64:	f8df 8254 	ldr.w	r8, [pc, #596]	; 10ebc <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10c68:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   10c6c:	2902      	cmp	r1, #2
   10c6e:	d106      	bne.n	10c7e <process_event+0x76>
			evt = process_recheck(mgr);
   10c70:	4620      	mov	r0, r4
   10c72:	f00f f9c8 	bl	20006 <process_recheck>
		if (evt == EVT_NOP) {
   10c76:	2800      	cmp	r0, #0
   10c78:	d0d8      	beq.n	10c2c <process_event+0x24>
		if (evt == EVT_COMPLETE) {
   10c7a:	2801      	cmp	r0, #1
   10c7c:	d168      	bne.n	10d50 <process_event+0x148>
			res = mgr->last_res;
   10c7e:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10c82:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   10c84:	f1bb 0f00 	cmp.w	fp, #0
   10c88:	da0a      	bge.n	10ca0 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   10c8a:	2600      	movs	r6, #0
		*clients = mgr->clients;
   10c8c:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10c8e:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   10c92:	e9c4 6600 	strd	r6, r6, [r4]
   10c96:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   10c9a:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   10c9c:	9601      	str	r6, [sp, #4]
   10c9e:	e027      	b.n	10cf0 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10ca0:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   10ca4:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   10ca6:	2901      	cmp	r1, #1
   10ca8:	d834      	bhi.n	10d14 <process_event+0x10c>
	list->head = NULL;
   10caa:	2100      	movs	r1, #0
   10cac:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   10cb0:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   10cb2:	6825      	ldr	r5, [r4, #0]
   10cb4:	b29b      	uxth	r3, r3
	list->tail = NULL;
   10cb6:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   10cba:	d10c      	bne.n	10cd6 <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10cbc:	428d      	cmp	r5, r1
   10cbe:	462a      	mov	r2, r5
   10cc0:	bf38      	it	cc
   10cc2:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10cc4:	b12a      	cbz	r2, 10cd2 <process_event+0xca>
				mgr->refs += 1U;
   10cc6:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10cc8:	6812      	ldr	r2, [r2, #0]
   10cca:	3101      	adds	r1, #1
   10ccc:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10cce:	2a00      	cmp	r2, #0
   10cd0:	d1f8      	bne.n	10cc4 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10cd2:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   10cd6:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   10cd8:	4620      	mov	r0, r4
   10cda:	f00f f994 	bl	20006 <process_recheck>
   10cde:	4606      	mov	r6, r0
   10ce0:	2800      	cmp	r0, #0
   10ce2:	d0db      	beq.n	10c9c <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10ce4:	8ba3      	ldrh	r3, [r4, #28]
   10ce6:	f043 0320 	orr.w	r3, r3, #32
   10cea:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   10cec:	2300      	movs	r3, #0
   10cee:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10cf0:	8ba3      	ldrh	r3, [r4, #28]
   10cf2:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10cf6:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10cf8:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
   10cfa:	d003      	beq.n	10d04 <process_event+0xfc>
		if (do_monitors
   10cfc:	68a2      	ldr	r2, [r4, #8]
   10cfe:	2a00      	cmp	r2, #0
   10d00:	f040 80f0 	bne.w	10ee4 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
   10d04:	b91d      	cbnz	r5, 10d0e <process_event+0x106>
		    || (transit != NULL)) {
   10d06:	9a01      	ldr	r2, [sp, #4]
   10d08:	2a00      	cmp	r2, #0
   10d0a:	f000 8136 	beq.w	10f7a <process_event+0x372>
   10d0e:	f04f 0900 	mov.w	r9, #0
   10d12:	e0e9      	b.n	10ee8 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
   10d14:	2a04      	cmp	r2, #4
   10d16:	d10e      	bne.n	10d36 <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10d18:	f023 0307 	bic.w	r3, r3, #7
   10d1c:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   10d1e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   10d20:	4620      	mov	r0, r4
   10d22:	f00f f970 	bl	20006 <process_recheck>
   10d26:	4605      	mov	r5, r0
   10d28:	b118      	cbz	r0, 10d32 <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10d2a:	f042 0220 	orr.w	r2, r2, #32
   10d2e:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   10d30:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   10d32:	9501      	str	r5, [sp, #4]
   10d34:	e7dc      	b.n	10cf0 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
   10d36:	4640      	mov	r0, r8
   10d38:	4963      	ldr	r1, [pc, #396]	; (10ec8 <process_event+0x2c0>)
   10d3a:	f240 131b 	movw	r3, #283	; 0x11b
   10d3e:	463a      	mov	r2, r7
   10d40:	f00f f947 	bl	1ffd2 <printk>
   10d44:	f240 111b 	movw	r1, #283	; 0x11b
   10d48:	4638      	mov	r0, r7
   10d4a:	f00f fb9c 	bl	20486 <assert_post_action>
   10d4e:	e7ef      	b.n	10d30 <process_event+0x128>
		} else if (evt == EVT_START) {
   10d50:	2803      	cmp	r0, #3
   10d52:	d135      	bne.n	10dc0 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   10d54:	f1b9 0f00 	cmp.w	r9, #0
   10d58:	d00b      	beq.n	10d72 <process_event+0x16a>
   10d5a:	495c      	ldr	r1, [pc, #368]	; (10ecc <process_event+0x2c4>)
   10d5c:	4640      	mov	r0, r8
   10d5e:	f44f 73ab 	mov.w	r3, #342	; 0x156
   10d62:	463a      	mov	r2, r7
   10d64:	f00f f935 	bl	1ffd2 <printk>
   10d68:	f44f 71ab 	mov.w	r1, #342	; 0x156
   10d6c:	4638      	mov	r0, r7
   10d6e:	f00f fb8a 	bl	20486 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10d72:	6823      	ldr	r3, [r4, #0]
   10d74:	b95b      	cbnz	r3, 10d8e <process_event+0x186>
   10d76:	4956      	ldr	r1, [pc, #344]	; (10ed0 <process_event+0x2c8>)
   10d78:	4640      	mov	r0, r8
   10d7a:	f240 1357 	movw	r3, #343	; 0x157
   10d7e:	463a      	mov	r2, r7
   10d80:	f00f f927 	bl	1ffd2 <printk>
   10d84:	f240 1157 	movw	r1, #343	; 0x157
   10d88:	4638      	mov	r0, r7
   10d8a:	f00f fb7c 	bl	20486 <assert_post_action>
			transit = mgr->transitions->start;
   10d8e:	6923      	ldr	r3, [r4, #16]
   10d90:	681b      	ldr	r3, [r3, #0]
   10d92:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   10d94:	b95b      	cbnz	r3, 10dae <process_event+0x1a6>
   10d96:	494f      	ldr	r1, [pc, #316]	; (10ed4 <process_event+0x2cc>)
   10d98:	4640      	mov	r0, r8
   10d9a:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   10d9e:	463a      	mov	r2, r7
   10da0:	f00f f917 	bl	1ffd2 <printk>
   10da4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   10da8:	4638      	mov	r0, r7
   10daa:	f00f fb6c 	bl	20486 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10dae:	8ba3      	ldrh	r3, [r4, #28]
   10db0:	f023 0307 	bic.w	r3, r3, #7
   10db4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   10db8:	83a3      	strh	r3, [r4, #28]
}
   10dba:	2500      	movs	r5, #0
		res = 0;
   10dbc:	46ab      	mov	fp, r5
}
   10dbe:	e797      	b.n	10cf0 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
   10dc0:	2804      	cmp	r0, #4
   10dc2:	d132      	bne.n	10e2a <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   10dc4:	f1b9 0f02 	cmp.w	r9, #2
   10dc8:	d00b      	beq.n	10de2 <process_event+0x1da>
   10dca:	4943      	ldr	r1, [pc, #268]	; (10ed8 <process_event+0x2d0>)
   10dcc:	4640      	mov	r0, r8
   10dce:	f240 135d 	movw	r3, #349	; 0x15d
   10dd2:	463a      	mov	r2, r7
   10dd4:	f00f f8fd 	bl	1ffd2 <printk>
   10dd8:	f240 115d 	movw	r1, #349	; 0x15d
   10ddc:	4638      	mov	r0, r7
   10dde:	f00f fb52 	bl	20486 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   10de2:	8be3      	ldrh	r3, [r4, #30]
   10de4:	b15b      	cbz	r3, 10dfe <process_event+0x1f6>
   10de6:	493d      	ldr	r1, [pc, #244]	; (10edc <process_event+0x2d4>)
   10de8:	4640      	mov	r0, r8
   10dea:	f44f 73af 	mov.w	r3, #350	; 0x15e
   10dee:	463a      	mov	r2, r7
   10df0:	f00f f8ef 	bl	1ffd2 <printk>
   10df4:	f44f 71af 	mov.w	r1, #350	; 0x15e
   10df8:	4638      	mov	r0, r7
   10dfa:	f00f fb44 	bl	20486 <assert_post_action>
			transit = mgr->transitions->stop;
   10dfe:	6923      	ldr	r3, [r4, #16]
   10e00:	685b      	ldr	r3, [r3, #4]
   10e02:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   10e04:	b95b      	cbnz	r3, 10e1e <process_event+0x216>
   10e06:	4933      	ldr	r1, [pc, #204]	; (10ed4 <process_event+0x2cc>)
   10e08:	4640      	mov	r0, r8
   10e0a:	f240 1361 	movw	r3, #353	; 0x161
   10e0e:	463a      	mov	r2, r7
   10e10:	f00f f8df 	bl	1ffd2 <printk>
   10e14:	f240 1161 	movw	r1, #353	; 0x161
   10e18:	4638      	mov	r0, r7
   10e1a:	f00f fb34 	bl	20486 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10e1e:	8ba3      	ldrh	r3, [r4, #28]
   10e20:	f023 0307 	bic.w	r3, r3, #7
   10e24:	f043 0304 	orr.w	r3, r3, #4
   10e28:	e7c6      	b.n	10db8 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
   10e2a:	2805      	cmp	r0, #5
   10e2c:	d132      	bne.n	10e94 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   10e2e:	f1b9 0f01 	cmp.w	r9, #1
   10e32:	d00b      	beq.n	10e4c <process_event+0x244>
   10e34:	492a      	ldr	r1, [pc, #168]	; (10ee0 <process_event+0x2d8>)
   10e36:	4640      	mov	r0, r8
   10e38:	f44f 73b2 	mov.w	r3, #356	; 0x164
   10e3c:	463a      	mov	r2, r7
   10e3e:	f00f f8c8 	bl	1ffd2 <printk>
   10e42:	f44f 71b2 	mov.w	r1, #356	; 0x164
   10e46:	4638      	mov	r0, r7
   10e48:	f00f fb1d 	bl	20486 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10e4c:	6823      	ldr	r3, [r4, #0]
   10e4e:	b95b      	cbnz	r3, 10e68 <process_event+0x260>
   10e50:	491f      	ldr	r1, [pc, #124]	; (10ed0 <process_event+0x2c8>)
   10e52:	4640      	mov	r0, r8
   10e54:	f240 1365 	movw	r3, #357	; 0x165
   10e58:	463a      	mov	r2, r7
   10e5a:	f00f f8ba 	bl	1ffd2 <printk>
   10e5e:	f240 1165 	movw	r1, #357	; 0x165
   10e62:	4638      	mov	r0, r7
   10e64:	f00f fb0f 	bl	20486 <assert_post_action>
			transit = mgr->transitions->reset;
   10e68:	6923      	ldr	r3, [r4, #16]
   10e6a:	689b      	ldr	r3, [r3, #8]
   10e6c:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   10e6e:	b95b      	cbnz	r3, 10e88 <process_event+0x280>
   10e70:	4918      	ldr	r1, [pc, #96]	; (10ed4 <process_event+0x2cc>)
   10e72:	4640      	mov	r0, r8
   10e74:	f44f 73b4 	mov.w	r3, #360	; 0x168
   10e78:	463a      	mov	r2, r7
   10e7a:	f00f f8aa 	bl	1ffd2 <printk>
   10e7e:	f44f 71b4 	mov.w	r1, #360	; 0x168
   10e82:	4638      	mov	r0, r7
   10e84:	f00f faff 	bl	20486 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10e88:	8ba3      	ldrh	r3, [r4, #28]
   10e8a:	f023 0307 	bic.w	r3, r3, #7
   10e8e:	f043 0305 	orr.w	r3, r3, #5
   10e92:	e791      	b.n	10db8 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
   10e94:	490c      	ldr	r1, [pc, #48]	; (10ec8 <process_event+0x2c0>)
   10e96:	f240 136b 	movw	r3, #363	; 0x16b
   10e9a:	463a      	mov	r2, r7
   10e9c:	4640      	mov	r0, r8
   10e9e:	f00f f898 	bl	1ffd2 <printk>
   10ea2:	2500      	movs	r5, #0
   10ea4:	f240 116b 	movw	r1, #363	; 0x16b
   10ea8:	4638      	mov	r0, r7
   10eaa:	f00f faec 	bl	20486 <assert_post_action>
		onoff_transition_fn transit = NULL;
   10eae:	9501      	str	r5, [sp, #4]
   10eb0:	e784      	b.n	10dbc <process_event+0x1b4>
   10eb2:	bf00      	nop
   10eb4:	00023889 	.word	0x00023889
   10eb8:	000238af 	.word	0x000238af
   10ebc:	000237c9 	.word	0x000237c9
   10ec0:	000238c6 	.word	0x000238c6
   10ec4:	000237e6 	.word	0x000237e6
   10ec8:	00025541 	.word	0x00025541
   10ecc:	00023808 	.word	0x00023808
   10ed0:	00023814 	.word	0x00023814
   10ed4:	00023837 	.word	0x00023837
   10ed8:	0002384e 	.word	0x0002384e
   10edc:	00023864 	.word	0x00023864
   10ee0:	00023873 	.word	0x00023873
				   && !sys_slist_is_empty(&mgr->monitors);
   10ee4:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10ee8:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   10eec:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
   10ef0:	83a3      	strh	r3, [r4, #28]
   10ef2:	4650      	mov	r0, sl
   10ef4:	f009 f952 	bl	1a19c <z_spin_unlock_valid>
   10ef8:	b968      	cbnz	r0, 10f16 <process_event+0x30e>
   10efa:	4a3a      	ldr	r2, [pc, #232]	; (10fe4 <process_event+0x3dc>)
   10efc:	493a      	ldr	r1, [pc, #232]	; (10fe8 <process_event+0x3e0>)
   10efe:	23ac      	movs	r3, #172	; 0xac
   10f00:	4640      	mov	r0, r8
   10f02:	f00f f866 	bl	1ffd2 <printk>
   10f06:	4839      	ldr	r0, [pc, #228]	; (10fec <process_event+0x3e4>)
   10f08:	4651      	mov	r1, sl
   10f0a:	f00f f862 	bl	1ffd2 <printk>
   10f0e:	4835      	ldr	r0, [pc, #212]	; (10fe4 <process_event+0x3dc>)
   10f10:	21ac      	movs	r1, #172	; 0xac
   10f12:	f00f fab8 	bl	20486 <assert_post_action>
   10f16:	9b03      	ldr	r3, [sp, #12]
   10f18:	f383 8811 	msr	BASEPRI, r3
   10f1c:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10f20:	f1b9 0f00 	cmp.w	r9, #0
   10f24:	d138      	bne.n	10f98 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
   10f26:	2d00      	cmp	r5, #0
   10f28:	d14b      	bne.n	10fc2 <process_event+0x3ba>
			if (transit != NULL) {
   10f2a:	9b01      	ldr	r3, [sp, #4]
   10f2c:	b113      	cbz	r3, 10f34 <process_event+0x32c>
				transit(mgr, transition_complete);
   10f2e:	4930      	ldr	r1, [pc, #192]	; (10ff0 <process_event+0x3e8>)
   10f30:	4620      	mov	r0, r4
   10f32:	4798      	blx	r3
	__asm__ volatile(
   10f34:	f04f 0340 	mov.w	r3, #64	; 0x40
   10f38:	f3ef 8b11 	mrs	fp, BASEPRI
   10f3c:	f383 8812 	msr	BASEPRI_MAX, r3
   10f40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10f44:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   10f46:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10f4a:	f009 f919 	bl	1a180 <z_spin_lock_valid>
   10f4e:	b968      	cbnz	r0, 10f6c <process_event+0x364>
   10f50:	4a24      	ldr	r2, [pc, #144]	; (10fe4 <process_event+0x3dc>)
   10f52:	4928      	ldr	r1, [pc, #160]	; (10ff4 <process_event+0x3ec>)
   10f54:	2381      	movs	r3, #129	; 0x81
   10f56:	4640      	mov	r0, r8
   10f58:	f00f f83b 	bl	1ffd2 <printk>
   10f5c:	4826      	ldr	r0, [pc, #152]	; (10ff8 <process_event+0x3f0>)
   10f5e:	4651      	mov	r1, sl
   10f60:	f00f f837 	bl	1ffd2 <printk>
   10f64:	481f      	ldr	r0, [pc, #124]	; (10fe4 <process_event+0x3dc>)
   10f66:	2181      	movs	r1, #129	; 0x81
   10f68:	f00f fa8d 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   10f6c:	4650      	mov	r0, sl
   10f6e:	f009 f925 	bl	1a1bc <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10f72:	8ba3      	ldrh	r3, [r4, #28]
   10f74:	f023 0308 	bic.w	r3, r3, #8
   10f78:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10f7a:	8ba3      	ldrh	r3, [r4, #28]
   10f7c:	06da      	lsls	r2, r3, #27
   10f7e:	d528      	bpl.n	10fd2 <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10f80:	f023 0310 	bic.w	r3, r3, #16
   10f84:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   10f86:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   10f88:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   10f8c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   10f90:	2900      	cmp	r1, #0
   10f92:	f47f ae6b 	bne.w	10c6c <process_event+0x64>
out:
   10f96:	e649      	b.n	10c2c <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10f98:	68a1      	ldr	r1, [r4, #8]
   10f9a:	2900      	cmp	r1, #0
   10f9c:	d0c3      	beq.n	10f26 <process_event+0x31e>
	return node->next;
   10f9e:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   10fa0:	9a02      	ldr	r2, [sp, #8]
   10fa2:	2b00      	cmp	r3, #0
   10fa4:	bf38      	it	cc
   10fa6:	2300      	movcc	r3, #0
   10fa8:	4699      	mov	r9, r3
   10faa:	684b      	ldr	r3, [r1, #4]
   10fac:	4620      	mov	r0, r4
   10fae:	461e      	mov	r6, r3
   10fb0:	465b      	mov	r3, fp
   10fb2:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10fb4:	f1b9 0f00 	cmp.w	r9, #0
   10fb8:	d0b5      	beq.n	10f26 <process_event+0x31e>
   10fba:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10fbe:	4649      	mov	r1, r9
   10fc0:	e7ee      	b.n	10fa0 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10fc2:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   10fc4:	9a02      	ldr	r2, [sp, #8]
   10fc6:	682d      	ldr	r5, [r5, #0]
   10fc8:	465b      	mov	r3, fp
   10fca:	4620      	mov	r0, r4
   10fcc:	f00f f837 	bl	2003e <notify_one>
   10fd0:	e7a9      	b.n	10f26 <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10fd2:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10fd6:	bf1e      	ittt	ne
   10fd8:	f023 0320 	bicne.w	r3, r3, #32
   10fdc:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   10fde:	2102      	movne	r1, #2
   10fe0:	e7d2      	b.n	10f88 <process_event+0x380>
   10fe2:	bf00      	nop
   10fe4:	00023889 	.word	0x00023889
   10fe8:	000238af 	.word	0x000238af
   10fec:	000238c6 	.word	0x000238c6
   10ff0:	00010ffd 	.word	0x00010ffd
   10ff4:	000238db 	.word	0x000238db
   10ff8:	000238f0 	.word	0x000238f0

00010ffc <transition_complete>:
{
   10ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ffe:	4604      	mov	r4, r0
   11000:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11002:	f100 0614 	add.w	r6, r0, #20
   11006:	f04f 0340 	mov.w	r3, #64	; 0x40
   1100a:	f3ef 8711 	mrs	r7, BASEPRI
   1100e:	f383 8812 	msr	BASEPRI_MAX, r3
   11012:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11016:	4630      	mov	r0, r6
   11018:	f009 f8b2 	bl	1a180 <z_spin_lock_valid>
   1101c:	b968      	cbnz	r0, 1103a <transition_complete+0x3e>
   1101e:	4a0c      	ldr	r2, [pc, #48]	; (11050 <transition_complete+0x54>)
   11020:	490c      	ldr	r1, [pc, #48]	; (11054 <transition_complete+0x58>)
   11022:	480d      	ldr	r0, [pc, #52]	; (11058 <transition_complete+0x5c>)
   11024:	2381      	movs	r3, #129	; 0x81
   11026:	f00e ffd4 	bl	1ffd2 <printk>
   1102a:	480c      	ldr	r0, [pc, #48]	; (1105c <transition_complete+0x60>)
   1102c:	4631      	mov	r1, r6
   1102e:	f00e ffd0 	bl	1ffd2 <printk>
   11032:	4807      	ldr	r0, [pc, #28]	; (11050 <transition_complete+0x54>)
   11034:	2181      	movs	r1, #129	; 0x81
   11036:	f00f fa26 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1103a:	4630      	mov	r0, r6
   1103c:	f009 f8be 	bl	1a1bc <z_spin_lock_set_owner>
	mgr->last_res = res;
   11040:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   11042:	463a      	mov	r2, r7
   11044:	4620      	mov	r0, r4
   11046:	2101      	movs	r1, #1
}
   11048:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   1104c:	f7ff bddc 	b.w	10c08 <process_event>
   11050:	00023889 	.word	0x00023889
   11054:	000238db 	.word	0x000238db
   11058:	000237c9 	.word	0x000237c9
   1105c:	000238f0 	.word	0x000238f0

00011060 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   11060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11064:	4604      	mov	r4, r0
   11066:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   11068:	f00e ffff 	bl	2006a <validate_args>

	if (rv < 0) {
   1106c:	1e05      	subs	r5, r0, #0
   1106e:	db5e      	blt.n	1112e <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11070:	f104 0914 	add.w	r9, r4, #20
   11074:	f04f 0340 	mov.w	r3, #64	; 0x40
   11078:	f3ef 8a11 	mrs	sl, BASEPRI
   1107c:	f383 8812 	msr	BASEPRI_MAX, r3
   11080:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11084:	4648      	mov	r0, r9
   11086:	f009 f87b 	bl	1a180 <z_spin_lock_valid>
   1108a:	b968      	cbnz	r0, 110a8 <onoff_request+0x48>
   1108c:	4a38      	ldr	r2, [pc, #224]	; (11170 <onoff_request+0x110>)
   1108e:	4939      	ldr	r1, [pc, #228]	; (11174 <onoff_request+0x114>)
   11090:	4839      	ldr	r0, [pc, #228]	; (11178 <onoff_request+0x118>)
   11092:	2381      	movs	r3, #129	; 0x81
   11094:	f00e ff9d 	bl	1ffd2 <printk>
   11098:	4838      	ldr	r0, [pc, #224]	; (1117c <onoff_request+0x11c>)
   1109a:	4649      	mov	r1, r9
   1109c:	f00e ff99 	bl	1ffd2 <printk>
   110a0:	4833      	ldr	r0, [pc, #204]	; (11170 <onoff_request+0x110>)
   110a2:	2181      	movs	r1, #129	; 0x81
   110a4:	f00f f9ef 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   110a8:	4648      	mov	r0, r9
   110aa:	f009 f887 	bl	1a1bc <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   110ae:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   110b0:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   110b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   110b6:	428b      	cmp	r3, r1
   110b8:	f002 0607 	and.w	r6, r2, #7
   110bc:	d050      	beq.n	11160 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   110be:	2e02      	cmp	r6, #2
   110c0:	d124      	bne.n	1110c <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   110c2:	3301      	adds	r3, #1
   110c4:	83e3      	strh	r3, [r4, #30]
	rv = state;
   110c6:	4635      	mov	r5, r6
		notify = true;
   110c8:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   110cc:	4648      	mov	r0, r9
   110ce:	f009 f865 	bl	1a19c <z_spin_unlock_valid>
   110d2:	b968      	cbnz	r0, 110f0 <onoff_request+0x90>
   110d4:	4a26      	ldr	r2, [pc, #152]	; (11170 <onoff_request+0x110>)
   110d6:	492a      	ldr	r1, [pc, #168]	; (11180 <onoff_request+0x120>)
   110d8:	4827      	ldr	r0, [pc, #156]	; (11178 <onoff_request+0x118>)
   110da:	23ac      	movs	r3, #172	; 0xac
   110dc:	f00e ff79 	bl	1ffd2 <printk>
   110e0:	4828      	ldr	r0, [pc, #160]	; (11184 <onoff_request+0x124>)
   110e2:	4649      	mov	r1, r9
   110e4:	f00e ff75 	bl	1ffd2 <printk>
   110e8:	4821      	ldr	r0, [pc, #132]	; (11170 <onoff_request+0x110>)
   110ea:	21ac      	movs	r1, #172	; 0xac
   110ec:	f00f f9cb 	bl	20486 <assert_post_action>
	__asm__ volatile(
   110f0:	f38a 8811 	msr	BASEPRI, sl
   110f4:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   110f8:	f1b8 0f00 	cmp.w	r8, #0
   110fc:	d017      	beq.n	1112e <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   110fe:	2300      	movs	r3, #0
   11100:	4632      	mov	r2, r6
   11102:	4639      	mov	r1, r7
   11104:	4620      	mov	r0, r4
   11106:	f00e ff9a 	bl	2003e <notify_one>
   1110a:	e010      	b.n	1112e <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   1110c:	0793      	lsls	r3, r2, #30
   1110e:	d001      	beq.n	11114 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   11110:	2e06      	cmp	r6, #6
   11112:	d10f      	bne.n	11134 <onoff_request+0xd4>
	parent->next = child;
   11114:	2300      	movs	r3, #0
   11116:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   11118:	6863      	ldr	r3, [r4, #4]
   1111a:	b9f3      	cbnz	r3, 1115a <onoff_request+0xfa>
	list->head = node;
   1111c:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   11120:	4635      	mov	r5, r6
   11122:	b9fe      	cbnz	r6, 11164 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   11124:	4652      	mov	r2, sl
   11126:	2102      	movs	r1, #2
   11128:	4620      	mov	r0, r4
   1112a:	f7ff fd6d 	bl	10c08 <process_event>
		}
	}

	return rv;
}
   1112e:	4628      	mov	r0, r5
   11130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   11134:	2e05      	cmp	r6, #5
   11136:	d018      	beq.n	1116a <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11138:	2e01      	cmp	r6, #1
   1113a:	d00b      	beq.n	11154 <onoff_request+0xf4>
   1113c:	4912      	ldr	r1, [pc, #72]	; (11188 <onoff_request+0x128>)
   1113e:	480e      	ldr	r0, [pc, #56]	; (11178 <onoff_request+0x118>)
   11140:	4a12      	ldr	r2, [pc, #72]	; (1118c <onoff_request+0x12c>)
   11142:	f240 13c9 	movw	r3, #457	; 0x1c9
   11146:	f00e ff44 	bl	1ffd2 <printk>
   1114a:	4810      	ldr	r0, [pc, #64]	; (1118c <onoff_request+0x12c>)
   1114c:	f240 11c9 	movw	r1, #457	; 0x1c9
   11150:	f00f f999 	bl	20486 <assert_post_action>
		rv = -EIO;
   11154:	f06f 0504 	mvn.w	r5, #4
   11158:	e004      	b.n	11164 <onoff_request+0x104>
	parent->next = child;
   1115a:	601f      	str	r7, [r3, #0]
	list->tail = node;
   1115c:	6067      	str	r7, [r4, #4]
}
   1115e:	e7df      	b.n	11120 <onoff_request+0xc0>
		rv = -EAGAIN;
   11160:	f06f 050a 	mvn.w	r5, #10
   11164:	f04f 0800 	mov.w	r8, #0
   11168:	e7b0      	b.n	110cc <onoff_request+0x6c>
		rv = -ENOTSUP;
   1116a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1116e:	e7f9      	b.n	11164 <onoff_request+0x104>
   11170:	00023889 	.word	0x00023889
   11174:	000238db 	.word	0x000238db
   11178:	000237c9 	.word	0x000237c9
   1117c:	000238f0 	.word	0x000238f0
   11180:	000238af 	.word	0x000238af
   11184:	000238c6 	.word	0x000238c6
   11188:	00023873 	.word	0x00023873
   1118c:	000237e6 	.word	0x000237e6

00011190 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   11190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   11192:	460e      	mov	r6, r1
   11194:	2900      	cmp	r1, #0
   11196:	d043      	beq.n	11220 <sys_heap_free+0x90>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   11198:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1119a:	68ab      	ldr	r3, [r5, #8]
   1119c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   111a0:	bf2c      	ite	cs
   111a2:	2408      	movcs	r4, #8
   111a4:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   111a6:	1b0c      	subs	r4, r1, r4
   111a8:	1b64      	subs	r4, r4, r5
   111aa:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   111ac:	2201      	movs	r2, #1
   111ae:	4621      	mov	r1, r4
   111b0:	4628      	mov	r0, r5
   111b2:	f00e ff86 	bl	200c2 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   111b6:	07c3      	lsls	r3, r0, #31
   111b8:	d40d      	bmi.n	111d6 <sys_heap_free+0x46>
   111ba:	4a1a      	ldr	r2, [pc, #104]	; (11224 <sys_heap_free+0x94>)
   111bc:	491a      	ldr	r1, [pc, #104]	; (11228 <sys_heap_free+0x98>)
   111be:	481b      	ldr	r0, [pc, #108]	; (1122c <sys_heap_free+0x9c>)
   111c0:	239a      	movs	r3, #154	; 0x9a
   111c2:	f00e ff06 	bl	1ffd2 <printk>
   111c6:	481a      	ldr	r0, [pc, #104]	; (11230 <sys_heap_free+0xa0>)
   111c8:	4631      	mov	r1, r6
   111ca:	f00e ff02 	bl	1ffd2 <printk>
   111ce:	4815      	ldr	r0, [pc, #84]	; (11224 <sys_heap_free+0x94>)
   111d0:	219a      	movs	r1, #154	; 0x9a
   111d2:	f00f f958 	bl	20486 <assert_post_action>
	return c + chunk_size(h, c);
   111d6:	4621      	mov	r1, r4
   111d8:	4628      	mov	r0, r5
   111da:	f00e ff88 	bl	200ee <chunk_size>
   111de:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   111e0:	4639      	mov	r1, r7
   111e2:	2200      	movs	r2, #0
   111e4:	4628      	mov	r0, r5
   111e6:	f00e ff6c 	bl	200c2 <chunk_field>
   111ea:	1a3f      	subs	r7, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   111ec:	42bc      	cmp	r4, r7
   111ee:	d00d      	beq.n	1120c <sys_heap_free+0x7c>
   111f0:	4a0c      	ldr	r2, [pc, #48]	; (11224 <sys_heap_free+0x94>)
   111f2:	4910      	ldr	r1, [pc, #64]	; (11234 <sys_heap_free+0xa4>)
   111f4:	480d      	ldr	r0, [pc, #52]	; (1122c <sys_heap_free+0x9c>)
   111f6:	23a2      	movs	r3, #162	; 0xa2
   111f8:	f00e feeb 	bl	1ffd2 <printk>
   111fc:	480e      	ldr	r0, [pc, #56]	; (11238 <sys_heap_free+0xa8>)
   111fe:	4631      	mov	r1, r6
   11200:	f00e fee7 	bl	1ffd2 <printk>
   11204:	4807      	ldr	r0, [pc, #28]	; (11224 <sys_heap_free+0x94>)
   11206:	21a2      	movs	r1, #162	; 0xa2
   11208:	f00f f93d 	bl	20486 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   1120c:	4621      	mov	r1, r4
   1120e:	4628      	mov	r0, r5
   11210:	2200      	movs	r2, #0
   11212:	f00e ff72 	bl	200fa <set_chunk_used>
	free_chunk(h, c);
   11216:	4621      	mov	r1, r4
}
   11218:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
   1121c:	f00f b8a8 	b.w	20370 <free_chunk>
}
   11220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11222:	bf00      	nop
   11224:	00023908 	.word	0x00023908
   11228:	00023929 	.word	0x00023929
   1122c:	000237c9 	.word	0x000237c9
   11230:	0002393a 	.word	0x0002393a
   11234:	00023972 	.word	0x00023972
   11238:	00023998 	.word	0x00023998

0001123c <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1123c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;
   11240:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   11242:	68b3      	ldr	r3, [r6, #8]
{
   11244:	4614      	mov	r4, r2
	return big_heap(h) ? 8 : 4;
   11246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	rew = align & -align;
   1124a:	f1c1 0200 	rsb	r2, r1, #0
   1124e:	ea02 0701 	and.w	r7, r2, r1
   11252:	bf2c      	ite	cs
   11254:	2508      	movcs	r5, #8
   11256:	2504      	movcc	r5, #4
	if (align != rew) {
   11258:	ea31 0202 	bics.w	r2, r1, r2
   1125c:	d01e      	beq.n	1129c <sys_heap_aligned_alloc+0x60>
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1125e:	42bd      	cmp	r5, r7
   11260:	bf28      	it	cs
   11262:	463d      	movcs	r5, r7
   11264:	46b9      	mov	r9, r7
		align -= rew;
   11266:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   11268:	f107 3aff 	add.w	sl, r7, #4294967295
   1126c:	ea1a 0f07 	tst.w	sl, r7
   11270:	d00e      	beq.n	11290 <sys_heap_aligned_alloc+0x54>
   11272:	4936      	ldr	r1, [pc, #216]	; (1134c <sys_heap_aligned_alloc+0x110>)
   11274:	4a36      	ldr	r2, [pc, #216]	; (11350 <sys_heap_aligned_alloc+0x114>)
   11276:	4837      	ldr	r0, [pc, #220]	; (11354 <sys_heap_aligned_alloc+0x118>)
   11278:	f240 130d 	movw	r3, #269	; 0x10d
   1127c:	f00e fea9 	bl	1ffd2 <printk>
   11280:	4835      	ldr	r0, [pc, #212]	; (11358 <sys_heap_aligned_alloc+0x11c>)
   11282:	f00e fea6 	bl	1ffd2 <printk>
   11286:	4832      	ldr	r0, [pc, #200]	; (11350 <sys_heap_aligned_alloc+0x114>)
   11288:	f240 110d 	movw	r1, #269	; 0x10d
   1128c:	f00f f8fb 	bl	20486 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   11290:	b974      	cbnz	r4, 112b0 <sys_heap_aligned_alloc+0x74>
		return NULL;
   11292:	f04f 0900 	mov.w	r9, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   11296:	4648      	mov	r0, r9
   11298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   1129c:	42a9      	cmp	r1, r5
   1129e:	d804      	bhi.n	112aa <sys_heap_aligned_alloc+0x6e>
			return sys_heap_alloc(heap, bytes);
   112a0:	4621      	mov	r1, r4
}
   112a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   112a6:	f00f b8a5 	b.w	203f4 <sys_heap_alloc>
		rew = 0;
   112aa:	f04f 0900 	mov.w	r9, #0
   112ae:	e7db      	b.n	11268 <sys_heap_aligned_alloc+0x2c>
	if (bytes == 0 || size_too_big(h, bytes)) {
   112b0:	68b3      	ldr	r3, [r6, #8]
   112b2:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   112b6:	d9ec      	bls.n	11292 <sys_heap_aligned_alloc+0x56>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   112b8:	1939      	adds	r1, r7, r4
   112ba:	1b49      	subs	r1, r1, r5
   112bc:	4630      	mov	r0, r6
   112be:	f00e ff38 	bl	20132 <bytes_to_chunksz>
   112c2:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   112c4:	4630      	mov	r0, r6
   112c6:	f00e ffbe 	bl	20246 <alloc_chunk>
	if (c0 == 0) {
   112ca:	4680      	mov	r8, r0
   112cc:	2800      	cmp	r0, #0
   112ce:	d0e0      	beq.n	11292 <sys_heap_aligned_alloc+0x56>
	return big_heap(h) ? 8 : 4;
   112d0:	68b3      	ldr	r3, [r6, #8]
   112d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   112d6:	bf2c      	ite	cs
   112d8:	2308      	movcs	r3, #8
   112da:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   112dc:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   112e0:	441d      	add	r5, r3
   112e2:	4435      	add	r5, r6
   112e4:	4455      	add	r5, sl
   112e6:	427f      	negs	r7, r7
   112e8:	402f      	ands	r7, r5
   112ea:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   112ee:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   112f0:	eba9 0303 	sub.w	r3, r9, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   112f4:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   112f6:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   112f8:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   112fc:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   112fe:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11302:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   11306:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1130a:	d208      	bcs.n	1131e <sys_heap_aligned_alloc+0xe2>
		split_chunks(h, c0, c);
   1130c:	4601      	mov	r1, r0
   1130e:	463a      	mov	r2, r7
   11310:	4630      	mov	r0, r6
   11312:	f00e ff42 	bl	2019a <split_chunks>
		free_list_add(h, c0);
   11316:	4641      	mov	r1, r8
   11318:	4630      	mov	r0, r6
   1131a:	f00e ffcd 	bl	202b8 <free_list_add>
	return c + chunk_size(h, c);
   1131e:	4639      	mov	r1, r7
   11320:	4630      	mov	r0, r6
   11322:	f00e fee4 	bl	200ee <chunk_size>
   11326:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   11328:	4284      	cmp	r4, r0
   1132a:	d208      	bcs.n	1133e <sys_heap_aligned_alloc+0x102>
		split_chunks(h, c, c_end);
   1132c:	4639      	mov	r1, r7
   1132e:	4630      	mov	r0, r6
   11330:	4622      	mov	r2, r4
   11332:	f00e ff32 	bl	2019a <split_chunks>
		free_list_add(h, c_end);
   11336:	4621      	mov	r1, r4
   11338:	4630      	mov	r0, r6
   1133a:	f00e ffbd 	bl	202b8 <free_list_add>
	set_chunk_used(h, c, true);
   1133e:	2201      	movs	r2, #1
   11340:	4639      	mov	r1, r7
   11342:	4630      	mov	r0, r6
   11344:	f00e fed9 	bl	200fa <set_chunk_used>
	return mem;
   11348:	e7a5      	b.n	11296 <sys_heap_aligned_alloc+0x5a>
   1134a:	bf00      	nop
   1134c:	000239d4 	.word	0x000239d4
   11350:	00023908 	.word	0x00023908
   11354:	000237c9 	.word	0x000237c9
   11358:	000239ef 	.word	0x000239ef

0001135c <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   1135c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   11360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11362:	4607      	mov	r7, r0
   11364:	460d      	mov	r5, r1
   11366:	4616      	mov	r6, r2
   11368:	d212      	bcs.n	11390 <sys_heap_init+0x34>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   1136a:	2a04      	cmp	r2, #4
   1136c:	d80e      	bhi.n	1138c <sys_heap_init+0x30>
   1136e:	4944      	ldr	r1, [pc, #272]	; (11480 <sys_heap_init+0x124>)
   11370:	4a44      	ldr	r2, [pc, #272]	; (11484 <sys_heap_init+0x128>)
   11372:	4845      	ldr	r0, [pc, #276]	; (11488 <sys_heap_init+0x12c>)
   11374:	f44f 73c1 	mov.w	r3, #386	; 0x182
   11378:	f00e fe2b 	bl	1ffd2 <printk>
   1137c:	4843      	ldr	r0, [pc, #268]	; (1148c <sys_heap_init+0x130>)
   1137e:	f00e fe28 	bl	1ffd2 <printk>
   11382:	4840      	ldr	r0, [pc, #256]	; (11484 <sys_heap_init+0x128>)
   11384:	f44f 71c1 	mov.w	r1, #386	; 0x182
   11388:	f00f f87d 	bl	20486 <assert_post_action>
   1138c:	2204      	movs	r2, #4
   1138e:	e000      	b.n	11392 <sys_heap_init+0x36>
   11390:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
   11392:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11394:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11396:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11398:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1139c:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   113a0:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   113a2:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   113a4:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   113a8:	d80e      	bhi.n	113c8 <sys_heap_init+0x6c>
   113aa:	4939      	ldr	r1, [pc, #228]	; (11490 <sys_heap_init+0x134>)
   113ac:	4a35      	ldr	r2, [pc, #212]	; (11484 <sys_heap_init+0x128>)
   113ae:	4836      	ldr	r0, [pc, #216]	; (11488 <sys_heap_init+0x12c>)
   113b0:	f240 138b 	movw	r3, #395	; 0x18b
   113b4:	f00e fe0d 	bl	1ffd2 <printk>
   113b8:	4834      	ldr	r0, [pc, #208]	; (1148c <sys_heap_init+0x130>)
   113ba:	f00e fe0a 	bl	1ffd2 <printk>
   113be:	4831      	ldr	r0, [pc, #196]	; (11484 <sys_heap_init+0x128>)
   113c0:	f240 118b 	movw	r1, #395	; 0x18b
   113c4:	f00f f85f 	bl	20486 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   113c8:	2300      	movs	r3, #0
	heap->heap = h;
   113ca:	603c      	str	r4, [r7, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   113cc:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   113ce:	60e3      	str	r3, [r4, #12]
	h->end_chunk = heap_sz;
   113d0:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   113d2:	4620      	mov	r0, r4
   113d4:	f00e feb7 	bl	20146 <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline chunksz_t min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   113d8:	2101      	movs	r1, #1
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   113da:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   113dc:	1c47      	adds	r7, r0, #1
   113de:	4620      	mov	r0, r4
   113e0:	f00e fea7 	bl	20132 <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   113e4:	351b      	adds	r5, #27
   113e6:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   113e8:	4428      	add	r0, r5
   113ea:	42b0      	cmp	r0, r6
   113ec:	d90e      	bls.n	1140c <sys_heap_init+0xb0>
   113ee:	4929      	ldr	r1, [pc, #164]	; (11494 <sys_heap_init+0x138>)
   113f0:	4a24      	ldr	r2, [pc, #144]	; (11484 <sys_heap_init+0x128>)
   113f2:	4825      	ldr	r0, [pc, #148]	; (11488 <sys_heap_init+0x12c>)
   113f4:	f44f 73cb 	mov.w	r3, #406	; 0x196
   113f8:	f00e fdeb 	bl	1ffd2 <printk>
   113fc:	4823      	ldr	r0, [pc, #140]	; (1148c <sys_heap_init+0x130>)
   113fe:	f00e fde8 	bl	1ffd2 <printk>
   11402:	4820      	ldr	r0, [pc, #128]	; (11484 <sys_heap_init+0x128>)
   11404:	f44f 71cb 	mov.w	r1, #406	; 0x196
   11408:	f00f f83d 	bl	20486 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   1140c:	2300      	movs	r3, #0
   1140e:	f104 0210 	add.w	r2, r4, #16

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   11412:	4619      	mov	r1, r3
	for (int i = 0; i < nb_buckets; i++) {
   11414:	42bb      	cmp	r3, r7
   11416:	db2f      	blt.n	11478 <sys_heap_init+0x11c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   11418:	462a      	mov	r2, r5
   1141a:	4620      	mov	r0, r4
   1141c:	2100      	movs	r1, #0
   1141e:	f00e fe84 	bl	2012a <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   11422:	2300      	movs	r3, #0
   11424:	461a      	mov	r2, r3
   11426:	4619      	mov	r1, r3
   11428:	4620      	mov	r0, r4
   1142a:	f00e fe55 	bl	200d8 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1142e:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   11430:	4620      	mov	r0, r4
   11432:	2201      	movs	r2, #1
   11434:	2100      	movs	r1, #0
   11436:	f00e fe60 	bl	200fa <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1143a:	463a      	mov	r2, r7
   1143c:	4629      	mov	r1, r5
   1143e:	f00e fe74 	bl	2012a <set_chunk_size>
   11442:	462b      	mov	r3, r5
   11444:	4629      	mov	r1, r5
   11446:	4620      	mov	r0, r4
   11448:	2200      	movs	r2, #0
   1144a:	f00e fe45 	bl	200d8 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1144e:	4631      	mov	r1, r6
   11450:	4620      	mov	r0, r4
   11452:	2200      	movs	r2, #0
   11454:	f00e fe69 	bl	2012a <set_chunk_size>
   11458:	463b      	mov	r3, r7
   1145a:	4631      	mov	r1, r6
   1145c:	4620      	mov	r0, r4
   1145e:	2200      	movs	r2, #0
   11460:	f00e fe3a 	bl	200d8 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   11464:	4631      	mov	r1, r6
   11466:	4620      	mov	r0, r4
   11468:	2201      	movs	r2, #1
   1146a:	f00e fe46 	bl	200fa <set_chunk_used>

	free_list_add(h, chunk0_size);
   1146e:	4629      	mov	r1, r5
}
   11470:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   11474:	f00e bf20 	b.w	202b8 <free_list_add>
		h->buckets[i].next = 0;
   11478:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1147c:	3301      	adds	r3, #1
   1147e:	e7c9      	b.n	11414 <sys_heap_init+0xb8>
   11480:	00023a0c 	.word	0x00023a0c
   11484:	00023908 	.word	0x00023908
   11488:	000237c9 	.word	0x000237c9
   1148c:	00023a2d 	.word	0x00023a2d
   11490:	00023a46 	.word	0x00023a46
   11494:	00023a6f 	.word	0x00023a6f

00011498 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   11498:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
   1149a:	4e09      	ldr	r6, [pc, #36]	; (114c0 <extract_decimal+0x28>)
   1149c:	6801      	ldr	r1, [r0, #0]
{
   1149e:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
   114a0:	270a      	movs	r7, #10
	size_t val = 0;
   114a2:	2000      	movs	r0, #0
   114a4:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
   114a6:	3101      	adds	r1, #1
   114a8:	7823      	ldrb	r3, [r4, #0]
   114aa:	5d9d      	ldrb	r5, [r3, r6]
   114ac:	076d      	lsls	r5, r5, #29
   114ae:	d401      	bmi.n	114b4 <extract_decimal+0x1c>
	}
	*str = sp;
   114b0:	6014      	str	r4, [r2, #0]
	return val;
}
   114b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   114b4:	fb07 3300 	mla	r3, r7, r0, r3
   114b8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   114bc:	e7f2      	b.n	114a4 <extract_decimal+0xc>
   114be:	bf00      	nop
   114c0:	0002556c 	.word	0x0002556c

000114c4 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   114c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114c8:	4614      	mov	r4, r2
   114ca:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   114cc:	78d3      	ldrb	r3, [r2, #3]
   114ce:	4a24      	ldr	r2, [pc, #144]	; (11560 <encode_uint+0x9c>)
   114d0:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
   114d4:	2b6f      	cmp	r3, #111	; 0x6f
   114d6:	f00a 0203 	and.w	r2, sl, #3
{
   114da:	4606      	mov	r6, r0
   114dc:	460f      	mov	r7, r1
   114de:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   114e0:	d02d      	beq.n	1153e <encode_uint+0x7a>
   114e2:	d828      	bhi.n	11536 <encode_uint+0x72>
		return 16;
   114e4:	2b58      	cmp	r3, #88	; 0x58
   114e6:	bf14      	ite	ne
   114e8:	250a      	movne	r5, #10
   114ea:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   114ec:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   114f0:	46aa      	mov	sl, r5
   114f2:	f04f 0b00 	mov.w	fp, #0
   114f6:	4652      	mov	r2, sl
   114f8:	465b      	mov	r3, fp
   114fa:	4630      	mov	r0, r6
   114fc:	4639      	mov	r1, r7
   114fe:	f7ef fdff 	bl	1100 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   11502:	2a09      	cmp	r2, #9
   11504:	b2d3      	uxtb	r3, r2
   11506:	d81f      	bhi.n	11548 <encode_uint+0x84>
   11508:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   1150a:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1150c:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1150e:	bf08      	it	eq
   11510:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11512:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   11516:	d301      	bcc.n	1151c <encode_uint+0x58>
   11518:	45c8      	cmp	r8, r9
   1151a:	d812      	bhi.n	11542 <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   1151c:	7823      	ldrb	r3, [r4, #0]
   1151e:	069b      	lsls	r3, r3, #26
   11520:	d505      	bpl.n	1152e <encode_uint+0x6a>
		if (radix == 8) {
   11522:	2d08      	cmp	r5, #8
   11524:	d116      	bne.n	11554 <encode_uint+0x90>
			conv->altform_0 = true;
   11526:	78a3      	ldrb	r3, [r4, #2]
   11528:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   1152c:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
   1152e:	4640      	mov	r0, r8
   11530:	b003      	add	sp, #12
   11532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   11536:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1153a:	2b70      	cmp	r3, #112	; 0x70
   1153c:	e7d3      	b.n	114e6 <encode_uint+0x22>
	switch (specifier) {
   1153e:	2508      	movs	r5, #8
   11540:	e7d4      	b.n	114ec <encode_uint+0x28>
		value /= radix;
   11542:	4606      	mov	r6, r0
   11544:	460f      	mov	r7, r1
   11546:	e7d6      	b.n	114f6 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11548:	9a01      	ldr	r2, [sp, #4]
   1154a:	2a01      	cmp	r2, #1
   1154c:	bf0c      	ite	eq
   1154e:	3337      	addeq	r3, #55	; 0x37
   11550:	3357      	addne	r3, #87	; 0x57
   11552:	e7da      	b.n	1150a <encode_uint+0x46>
		} else if (radix == 16) {
   11554:	2d10      	cmp	r5, #16
   11556:	d1ea      	bne.n	1152e <encode_uint+0x6a>
			conv->altform_0c = true;
   11558:	78a3      	ldrb	r3, [r4, #2]
   1155a:	f043 0310 	orr.w	r3, r3, #16
   1155e:	e7e5      	b.n	1152c <encode_uint+0x68>
   11560:	0002556c 	.word	0x0002556c

00011564 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   11564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11568:	4682      	mov	sl, r0
   1156a:	b093      	sub	sp, #76	; 0x4c
   1156c:	468b      	mov	fp, r1
   1156e:	4691      	mov	r9, r2
   11570:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11572:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11574:	f899 0000 	ldrb.w	r0, [r9]
   11578:	b908      	cbnz	r0, 1157e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1157a:	4628      	mov	r0, r5
   1157c:	e33a      	b.n	11bf4 <cbvprintf+0x690>
		if (*fp != '%') {
   1157e:	f109 0301 	add.w	r3, r9, #1
   11582:	2825      	cmp	r0, #37	; 0x25
   11584:	9302      	str	r3, [sp, #8]
   11586:	d006      	beq.n	11596 <cbvprintf+0x32>
			OUTC('%');
   11588:	4659      	mov	r1, fp
   1158a:	47d0      	blx	sl
   1158c:	2800      	cmp	r0, #0
   1158e:	f2c0 8331 	blt.w	11bf4 <cbvprintf+0x690>
   11592:	3501      	adds	r5, #1
			break;
   11594:	e1f1      	b.n	1197a <cbvprintf+0x416>
		} state = {
   11596:	2218      	movs	r2, #24
   11598:	2100      	movs	r1, #0
   1159a:	a80c      	add	r0, sp, #48	; 0x30
   1159c:	f011 fb85 	bl	22caa <memset>
	if (*sp == '%') {
   115a0:	f899 3001 	ldrb.w	r3, [r9, #1]
   115a4:	2b25      	cmp	r3, #37	; 0x25
   115a6:	d059      	beq.n	1165c <cbvprintf+0xf8>
   115a8:	9a02      	ldr	r2, [sp, #8]
   115aa:	4616      	mov	r6, r2
		switch (*sp) {
   115ac:	f812 3b01 	ldrb.w	r3, [r2], #1
   115b0:	2b2b      	cmp	r3, #43	; 0x2b
   115b2:	f000 808b 	beq.w	116cc <cbvprintf+0x168>
   115b6:	d879      	bhi.n	116ac <cbvprintf+0x148>
   115b8:	2b20      	cmp	r3, #32
   115ba:	f000 808c 	beq.w	116d6 <cbvprintf+0x172>
   115be:	2b23      	cmp	r3, #35	; 0x23
   115c0:	f000 808e 	beq.w	116e0 <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
   115c4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   115c8:	f003 0244 	and.w	r2, r3, #68	; 0x44
   115cc:	2a44      	cmp	r2, #68	; 0x44
   115ce:	d103      	bne.n	115d8 <cbvprintf+0x74>
		conv->flag_zero = false;
   115d0:	f36f 1386 	bfc	r3, #6, #1
   115d4:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   115d8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   115dc:	9605      	str	r6, [sp, #20]
   115de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   115e2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   115e6:	7833      	ldrb	r3, [r6, #0]
   115e8:	2b2a      	cmp	r3, #42	; 0x2a
   115ea:	d17e      	bne.n	116ea <cbvprintf+0x186>
		conv->width_star = true;
   115ec:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   115f0:	f043 0301 	orr.w	r3, r3, #1
   115f4:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   115f8:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   115fa:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   115fc:	781a      	ldrb	r2, [r3, #0]
   115fe:	2a2e      	cmp	r2, #46	; 0x2e
   11600:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   11604:	bf0c      	ite	eq
   11606:	2101      	moveq	r1, #1
   11608:	2100      	movne	r1, #0
   1160a:	f361 0241 	bfi	r2, r1, #1, #1
   1160e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   11612:	d10b      	bne.n	1162c <cbvprintf+0xc8>
	++sp;
   11614:	1c5a      	adds	r2, r3, #1
   11616:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   11618:	785a      	ldrb	r2, [r3, #1]
   1161a:	2a2a      	cmp	r2, #42	; 0x2a
   1161c:	d17b      	bne.n	11716 <cbvprintf+0x1b2>
		conv->prec_star = true;
   1161e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   11622:	f042 0204 	orr.w	r2, r2, #4
   11626:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   1162a:	3302      	adds	r3, #2
	switch (*sp) {
   1162c:	4619      	mov	r1, r3
   1162e:	f811 0b01 	ldrb.w	r0, [r1], #1
   11632:	286c      	cmp	r0, #108	; 0x6c
   11634:	f000 80b6 	beq.w	117a4 <cbvprintf+0x240>
   11638:	d87d      	bhi.n	11736 <cbvprintf+0x1d2>
   1163a:	2868      	cmp	r0, #104	; 0x68
   1163c:	f000 8084 	beq.w	11748 <cbvprintf+0x1e4>
   11640:	286a      	cmp	r0, #106	; 0x6a
   11642:	f000 80b9 	beq.w	117b8 <cbvprintf+0x254>
   11646:	284c      	cmp	r0, #76	; 0x4c
   11648:	f000 80bd 	beq.w	117c6 <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
   1164c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   11650:	f36f 02c6 	bfc	r2, #3, #4
   11654:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   11658:	4619      	mov	r1, r3
   1165a:	e080      	b.n	1175e <cbvprintf+0x1fa>
		conv->specifier = *sp++;
   1165c:	f109 0202 	add.w	r2, r9, #2
   11660:	9202      	str	r2, [sp, #8]
   11662:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   11666:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1166a:	07d9      	lsls	r1, r3, #31
   1166c:	f140 8149 	bpl.w	11902 <cbvprintf+0x39e>
			width = va_arg(ap, int);
   11670:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   11674:	f1b8 0f00 	cmp.w	r8, #0
   11678:	da07      	bge.n	1168a <cbvprintf+0x126>
				conv->flag_dash = true;
   1167a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1167e:	f042 0204 	orr.w	r2, r2, #4
   11682:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
   11686:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   1168a:	075a      	lsls	r2, r3, #29
   1168c:	f140 8142 	bpl.w	11914 <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
   11690:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   11694:	2f00      	cmp	r7, #0
   11696:	f280 8141 	bge.w	1191c <cbvprintf+0x3b8>
				conv->prec_present = false;
   1169a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1169e:	f36f 0341 	bfc	r3, #1, #1
   116a2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   116a6:	f04f 37ff 	mov.w	r7, #4294967295
   116aa:	e137      	b.n	1191c <cbvprintf+0x3b8>
		switch (*sp) {
   116ac:	2b2d      	cmp	r3, #45	; 0x2d
   116ae:	d006      	beq.n	116be <cbvprintf+0x15a>
   116b0:	2b30      	cmp	r3, #48	; 0x30
   116b2:	d187      	bne.n	115c4 <cbvprintf+0x60>
			conv->flag_zero = true;
   116b4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   116b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   116bc:	e003      	b.n	116c6 <cbvprintf+0x162>
			conv->flag_dash = true;
   116be:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   116c2:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   116c6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   116ca:	e76e      	b.n	115aa <cbvprintf+0x46>
			conv->flag_plus = true;
   116cc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   116d0:	f043 0308 	orr.w	r3, r3, #8
   116d4:	e7f7      	b.n	116c6 <cbvprintf+0x162>
			conv->flag_space = true;
   116d6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   116da:	f043 0310 	orr.w	r3, r3, #16
   116de:	e7f2      	b.n	116c6 <cbvprintf+0x162>
			conv->flag_hash = true;
   116e0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   116e4:	f043 0320 	orr.w	r3, r3, #32
   116e8:	e7ed      	b.n	116c6 <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
   116ea:	a805      	add	r0, sp, #20
   116ec:	f7ff fed4 	bl	11498 <extract_decimal>
	if (sp != wp) {
   116f0:	9b05      	ldr	r3, [sp, #20]
   116f2:	42b3      	cmp	r3, r6
   116f4:	d081      	beq.n	115fa <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
   116f6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   116fa:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   116fc:	f3c1 0240 	ubfx	r2, r1, #1, #1
   11700:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   11704:	0052      	lsls	r2, r2, #1
   11706:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1170a:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   1170e:	430a      	orrs	r2, r1
   11710:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   11714:	e771      	b.n	115fa <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
   11716:	a805      	add	r0, sp, #20
   11718:	f7ff febe 	bl	11498 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   1171c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   11720:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   11722:	f3c3 0240 	ubfx	r2, r3, #1, #1
   11726:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   1172a:	f360 0341 	bfi	r3, r0, #1, #1
   1172e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   11732:	9b05      	ldr	r3, [sp, #20]
   11734:	e77a      	b.n	1162c <cbvprintf+0xc8>
	switch (*sp) {
   11736:	2874      	cmp	r0, #116	; 0x74
   11738:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1173c:	d040      	beq.n	117c0 <cbvprintf+0x25c>
   1173e:	287a      	cmp	r0, #122	; 0x7a
   11740:	d184      	bne.n	1164c <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
   11742:	4613      	mov	r3, r2
   11744:	2206      	movs	r2, #6
   11746:	e028      	b.n	1179a <cbvprintf+0x236>
		if (*++sp == 'h') {
   11748:	785a      	ldrb	r2, [r3, #1]
   1174a:	2a68      	cmp	r2, #104	; 0x68
   1174c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   11750:	d121      	bne.n	11796 <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
   11752:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   11754:	f361 02c6 	bfi	r2, r1, #3, #4
   11758:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   1175c:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   1175e:	460b      	mov	r3, r1
   11760:	f813 2b01 	ldrb.w	r2, [r3], #1
   11764:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
   11766:	2a78      	cmp	r2, #120	; 0x78
   11768:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
   1176c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   11770:	f200 80bf 	bhi.w	118f2 <cbvprintf+0x38e>
   11774:	2a57      	cmp	r2, #87	; 0x57
   11776:	d833      	bhi.n	117e0 <cbvprintf+0x27c>
   11778:	2a41      	cmp	r2, #65	; 0x41
   1177a:	d003      	beq.n	11784 <cbvprintf+0x220>
   1177c:	3a45      	subs	r2, #69	; 0x45
   1177e:	2a02      	cmp	r2, #2
   11780:	f200 80b7 	bhi.w	118f2 <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
   11784:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   11788:	2204      	movs	r2, #4
   1178a:	f362 0302 	bfi	r3, r2, #0, #3
   1178e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
   11792:	2301      	movs	r3, #1
			break;
   11794:	e084      	b.n	118a0 <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
   11796:	4613      	mov	r3, r2
   11798:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   1179a:	f362 03c6 	bfi	r3, r2, #3, #4
   1179e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   117a2:	e7dc      	b.n	1175e <cbvprintf+0x1fa>
		if (*++sp == 'l') {
   117a4:	785a      	ldrb	r2, [r3, #1]
   117a6:	2a6c      	cmp	r2, #108	; 0x6c
   117a8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   117ac:	d101      	bne.n	117b2 <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
   117ae:	2104      	movs	r1, #4
   117b0:	e7d0      	b.n	11754 <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
   117b2:	4613      	mov	r3, r2
   117b4:	2203      	movs	r2, #3
   117b6:	e7f0      	b.n	1179a <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
   117b8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   117bc:	2205      	movs	r2, #5
   117be:	e7ec      	b.n	1179a <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
   117c0:	4613      	mov	r3, r2
   117c2:	2207      	movs	r2, #7
   117c4:	e7e9      	b.n	1179a <cbvprintf+0x236>
		conv->unsupported = true;
   117c6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   117ca:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   117ce:	f023 0302 	bic.w	r3, r3, #2
   117d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   117d6:	f043 0302 	orr.w	r3, r3, #2
   117da:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   117de:	e7be      	b.n	1175e <cbvprintf+0x1fa>
   117e0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   117e4:	2920      	cmp	r1, #32
   117e6:	f200 8084 	bhi.w	118f2 <cbvprintf+0x38e>
   117ea:	a001      	add	r0, pc, #4	; (adr r0, 117f0 <cbvprintf+0x28c>)
   117ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   117f0:	000118b5 	.word	0x000118b5
   117f4:	000118f3 	.word	0x000118f3
   117f8:	000118f3 	.word	0x000118f3
   117fc:	000118f3 	.word	0x000118f3
   11800:	000118f3 	.word	0x000118f3
   11804:	000118f3 	.word	0x000118f3
   11808:	000118f3 	.word	0x000118f3
   1180c:	000118f3 	.word	0x000118f3
   11810:	000118f3 	.word	0x000118f3
   11814:	00011785 	.word	0x00011785
   11818:	000118f3 	.word	0x000118f3
   1181c:	000118b5 	.word	0x000118b5
   11820:	00011875 	.word	0x00011875
   11824:	00011785 	.word	0x00011785
   11828:	00011785 	.word	0x00011785
   1182c:	00011785 	.word	0x00011785
   11830:	000118f3 	.word	0x000118f3
   11834:	00011875 	.word	0x00011875
   11838:	000118f3 	.word	0x000118f3
   1183c:	000118f3 	.word	0x000118f3
   11840:	000118f3 	.word	0x000118f3
   11844:	000118f3 	.word	0x000118f3
   11848:	000118bd 	.word	0x000118bd
   1184c:	000118b5 	.word	0x000118b5
   11850:	000118d9 	.word	0x000118d9
   11854:	000118f3 	.word	0x000118f3
   11858:	000118f3 	.word	0x000118f3
   1185c:	000118d9 	.word	0x000118d9
   11860:	000118f3 	.word	0x000118f3
   11864:	000118b5 	.word	0x000118b5
   11868:	000118f3 	.word	0x000118f3
   1186c:	000118f3 	.word	0x000118f3
   11870:	000118b5 	.word	0x000118b5
		conv->specifier_cat = SPECIFIER_SINT;
   11874:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   11878:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1187a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1187e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11882:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   11884:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
   11888:	bf02      	ittt	eq
   1188a:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   1188e:	f041 0101 	orreq.w	r1, r1, #1
   11892:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   11896:	2a63      	cmp	r2, #99	; 0x63
   11898:	d131      	bne.n	118fe <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1189a:	3b00      	subs	r3, #0
   1189c:	bf18      	it	ne
   1189e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   118a0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   118a4:	f3c2 0140 	ubfx	r1, r2, #1, #1
   118a8:	430b      	orrs	r3, r1
   118aa:	f363 0241 	bfi	r2, r3, #1, #1
   118ae:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   118b2:	e6d8      	b.n	11666 <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
   118b4:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   118b8:	2002      	movs	r0, #2
   118ba:	e7de      	b.n	1187a <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
   118bc:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   118c0:	f003 0378 	and.w	r3, r3, #120	; 0x78
   118c4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   118c8:	2103      	movs	r1, #3
   118ca:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   118ce:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   118d0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   118d4:	4143      	adcs	r3, r0
   118d6:	e7e3      	b.n	118a0 <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
   118d8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   118dc:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   118de:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   118e2:	f361 0202 	bfi	r2, r1, #0, #3
   118e6:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   118ea:	bf14      	ite	ne
   118ec:	2301      	movne	r3, #1
   118ee:	2300      	moveq	r3, #0
   118f0:	e7d6      	b.n	118a0 <cbvprintf+0x33c>
		conv->invalid = true;
   118f2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   118f6:	f043 0301 	orr.w	r3, r3, #1
   118fa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
   118fe:	2300      	movs	r3, #0
   11900:	e7ce      	b.n	118a0 <cbvprintf+0x33c>
		} else if (conv->width_present) {
   11902:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   11906:	2a00      	cmp	r2, #0
			width = conv->width_value;
   11908:	bfb4      	ite	lt
   1190a:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
   1190e:	f04f 38ff 	movge.w	r8, #4294967295
   11912:	e6ba      	b.n	1168a <cbvprintf+0x126>
		} else if (conv->prec_present) {
   11914:	079f      	lsls	r7, r3, #30
   11916:	f57f aec6 	bpl.w	116a6 <cbvprintf+0x142>
			precision = conv->prec_value;
   1191a:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
   1191c:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
   11920:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11922:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
   11926:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
   1192a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1192e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   11930:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   11934:	d137      	bne.n	119a6 <cbvprintf+0x442>
			switch (length_mod) {
   11936:	1ecb      	subs	r3, r1, #3
   11938:	2b04      	cmp	r3, #4
   1193a:	d821      	bhi.n	11980 <cbvprintf+0x41c>
   1193c:	e8df f003 	tbb	[pc, r3]
   11940:	20070703 	.word	0x20070703
   11944:	20          	.byte	0x20
   11945:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   11946:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   1194a:	17d3      	asrs	r3, r2, #31
   1194c:	e004      	b.n	11958 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
   1194e:	3407      	adds	r4, #7
   11950:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   11954:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   11958:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   1195c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   11960:	f013 0603 	ands.w	r6, r3, #3
   11964:	d055      	beq.n	11a12 <cbvprintf+0x4ae>
			OUTS(sp, fp);
   11966:	9b02      	ldr	r3, [sp, #8]
   11968:	464a      	mov	r2, r9
   1196a:	4659      	mov	r1, fp
   1196c:	4650      	mov	r0, sl
   1196e:	f00e fd74 	bl	2045a <outs>
   11972:	2800      	cmp	r0, #0
   11974:	f2c0 813e 	blt.w	11bf4 <cbvprintf+0x690>
   11978:	4405      	add	r5, r0
			OUTS(bps, bpe);
   1197a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1197e:	e5f9      	b.n	11574 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11980:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   11984:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11986:	ea4f 73e2 	mov.w	r3, r2, asr #31
   1198a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   1198e:	d105      	bne.n	1199c <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
   11990:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   11994:	930c      	str	r3, [sp, #48]	; 0x30
   11996:	2300      	movs	r3, #0
   11998:	930d      	str	r3, [sp, #52]	; 0x34
   1199a:	e7df      	b.n	1195c <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
   1199c:	2902      	cmp	r1, #2
   1199e:	d1dd      	bne.n	1195c <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
   119a0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
   119a4:	e7d1      	b.n	1194a <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   119a6:	2b02      	cmp	r3, #2
   119a8:	d123      	bne.n	119f2 <cbvprintf+0x48e>
			switch (length_mod) {
   119aa:	1ecb      	subs	r3, r1, #3
   119ac:	2b04      	cmp	r3, #4
   119ae:	d813      	bhi.n	119d8 <cbvprintf+0x474>
   119b0:	e8df f003 	tbb	[pc, r3]
   119b4:	120a0a03 	.word	0x120a0a03
   119b8:	12          	.byte	0x12
   119b9:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   119ba:	6822      	ldr	r2, [r4, #0]
   119bc:	920c      	str	r2, [sp, #48]	; 0x30
   119be:	2300      	movs	r3, #0
   119c0:	1d20      	adds	r0, r4, #4
   119c2:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   119c4:	4604      	mov	r4, r0
   119c6:	e7c9      	b.n	1195c <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
   119c8:	3407      	adds	r4, #7
   119ca:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   119ce:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   119d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   119d6:	e7f5      	b.n	119c4 <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
   119d8:	f854 3b04 	ldr.w	r3, [r4], #4
   119dc:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   119de:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   119e0:	f04f 0300 	mov.w	r3, #0
   119e4:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   119e6:	d0d3      	beq.n	11990 <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
   119e8:	2902      	cmp	r1, #2
   119ea:	d1b7      	bne.n	1195c <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
   119ec:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   119f0:	e7d0      	b.n	11994 <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   119f2:	2b04      	cmp	r3, #4
   119f4:	d107      	bne.n	11a06 <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
   119f6:	3407      	adds	r4, #7
   119f8:	f024 0407 	bic.w	r4, r4, #7
   119fc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   11a00:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   11a04:	e7aa      	b.n	1195c <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
   11a06:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   11a08:	bf04      	itt	eq
   11a0a:	f854 3b04 	ldreq.w	r3, [r4], #4
   11a0e:	930c      	streq	r3, [sp, #48]	; 0x30
   11a10:	e7a4      	b.n	1195c <cbvprintf+0x3f8>
		switch (conv->specifier) {
   11a12:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   11a16:	2878      	cmp	r0, #120	; 0x78
   11a18:	d8af      	bhi.n	1197a <cbvprintf+0x416>
   11a1a:	2862      	cmp	r0, #98	; 0x62
   11a1c:	d820      	bhi.n	11a60 <cbvprintf+0x4fc>
   11a1e:	2825      	cmp	r0, #37	; 0x25
   11a20:	f43f adb2 	beq.w	11588 <cbvprintf+0x24>
   11a24:	2858      	cmp	r0, #88	; 0x58
   11a26:	d1a8      	bne.n	1197a <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
   11a28:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   11a2c:	9300      	str	r3, [sp, #0]
   11a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   11a32:	ab06      	add	r3, sp, #24
   11a34:	aa0e      	add	r2, sp, #56	; 0x38
   11a36:	f7ff fd45 	bl	114c4 <encode_uint>
   11a3a:	4681      	mov	r9, r0
			if (precision >= 0) {
   11a3c:	2f00      	cmp	r7, #0
   11a3e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   11a42:	db0b      	blt.n	11a5c <cbvprintf+0x4f8>
				conv->flag_zero = false;
   11a44:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   11a48:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   11a4c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   11a50:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   11a52:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   11a56:	d901      	bls.n	11a5c <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
   11a58:	1aff      	subs	r7, r7, r3
   11a5a:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   11a5c:	4607      	mov	r7, r0
   11a5e:	e03c      	b.n	11ada <cbvprintf+0x576>
   11a60:	3863      	subs	r0, #99	; 0x63
   11a62:	2815      	cmp	r0, #21
   11a64:	d889      	bhi.n	1197a <cbvprintf+0x416>
   11a66:	a201      	add	r2, pc, #4	; (adr r2, 11a6c <cbvprintf+0x508>)
   11a68:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   11a6c:	00011aeb 	.word	0x00011aeb
   11a70:	00011b4d 	.word	0x00011b4d
   11a74:	0001197b 	.word	0x0001197b
   11a78:	0001197b 	.word	0x0001197b
   11a7c:	0001197b 	.word	0x0001197b
   11a80:	0001197b 	.word	0x0001197b
   11a84:	00011b4d 	.word	0x00011b4d
   11a88:	0001197b 	.word	0x0001197b
   11a8c:	0001197b 	.word	0x0001197b
   11a90:	0001197b 	.word	0x0001197b
   11a94:	0001197b 	.word	0x0001197b
   11a98:	00011bab 	.word	0x00011bab
   11a9c:	00011b79 	.word	0x00011b79
   11aa0:	00011b7d 	.word	0x00011b7d
   11aa4:	0001197b 	.word	0x0001197b
   11aa8:	0001197b 	.word	0x0001197b
   11aac:	00011ac5 	.word	0x00011ac5
   11ab0:	0001197b 	.word	0x0001197b
   11ab4:	00011b79 	.word	0x00011b79
   11ab8:	0001197b 	.word	0x0001197b
   11abc:	0001197b 	.word	0x0001197b
   11ac0:	00011b79 	.word	0x00011b79
			if (precision >= 0) {
   11ac4:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   11ac6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   11aca:	db0a      	blt.n	11ae2 <cbvprintf+0x57e>
				len = strnlen(bps, precision);
   11acc:	4639      	mov	r1, r7
   11ace:	4648      	mov	r0, r9
   11ad0:	f011 f8fb 	bl	22cca <strnlen>
			bpe = bps + len;
   11ad4:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
   11ad8:	2600      	movs	r6, #0
		if (bps == NULL) {
   11ada:	f1b9 0f00 	cmp.w	r9, #0
   11ade:	d10c      	bne.n	11afa <cbvprintf+0x596>
   11ae0:	e74b      	b.n	1197a <cbvprintf+0x416>
				len = strlen(bps);
   11ae2:	4648      	mov	r0, r9
   11ae4:	f7fb fb8a 	bl	d1fc <strlen>
   11ae8:	e7f4      	b.n	11ad4 <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11aec:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
   11af0:	2600      	movs	r6, #0
			bpe = buf + 1;
   11af2:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
   11af6:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   11afa:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   11afe:	b106      	cbz	r6, 11b02 <cbvprintf+0x59e>
			nj_len += 1U;
   11b00:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   11b02:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   11b06:	06d0      	lsls	r0, r2, #27
   11b08:	d569      	bpl.n	11bde <cbvprintf+0x67a>
			nj_len += 2U;
   11b0a:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   11b0c:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   11b0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   11b10:	bf48      	it	mi
   11b12:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   11b14:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   11b16:	bf48      	it	mi
   11b18:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   11b1a:	f1b8 0f00 	cmp.w	r8, #0
   11b1e:	dd76      	ble.n	11c0e <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
   11b20:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   11b24:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   11b28:	f3c2 0380 	ubfx	r3, r2, #2, #1
   11b2c:	9303      	str	r3, [sp, #12]
   11b2e:	0753      	lsls	r3, r2, #29
   11b30:	d46d      	bmi.n	11c0e <cbvprintf+0x6aa>
				if (conv->flag_zero) {
   11b32:	0650      	lsls	r0, r2, #25
   11b34:	d561      	bpl.n	11bfa <cbvprintf+0x696>
					if (sign != 0) {
   11b36:	b13e      	cbz	r6, 11b48 <cbvprintf+0x5e4>
						OUTC(sign);
   11b38:	4659      	mov	r1, fp
   11b3a:	4630      	mov	r0, r6
   11b3c:	47d0      	blx	sl
   11b3e:	2800      	cmp	r0, #0
   11b40:	db58      	blt.n	11bf4 <cbvprintf+0x690>
						sign = 0;
   11b42:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   11b44:	3501      	adds	r5, #1
						sign = 0;
   11b46:	461e      	mov	r6, r3
					pad = '0';
   11b48:	2330      	movs	r3, #48	; 0x30
   11b4a:	e057      	b.n	11bfc <cbvprintf+0x698>
			if (conv->flag_plus) {
   11b4c:	071e      	lsls	r6, r3, #28
   11b4e:	d411      	bmi.n	11b74 <cbvprintf+0x610>
				sign = ' ';
   11b50:	f013 0610 	ands.w	r6, r3, #16
   11b54:	bf18      	it	ne
   11b56:	2620      	movne	r6, #32
			sint = value->sint;
   11b58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   11b5c:	2a00      	cmp	r2, #0
   11b5e:	f173 0100 	sbcs.w	r1, r3, #0
   11b62:	f6bf af61 	bge.w	11a28 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
   11b66:	4252      	negs	r2, r2
   11b68:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11b6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
   11b70:	262d      	movs	r6, #45	; 0x2d
   11b72:	e759      	b.n	11a28 <cbvprintf+0x4c4>
				sign = '+';
   11b74:	262b      	movs	r6, #43	; 0x2b
   11b76:	e7ef      	b.n	11b58 <cbvprintf+0x5f4>
		switch (conv->specifier) {
   11b78:	2600      	movs	r6, #0
   11b7a:	e755      	b.n	11a28 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
   11b7c:	980c      	ldr	r0, [sp, #48]	; 0x30
   11b7e:	b348      	cbz	r0, 11bd4 <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11b80:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   11b84:	9300      	str	r3, [sp, #0]
   11b86:	aa0e      	add	r2, sp, #56	; 0x38
   11b88:	ab06      	add	r3, sp, #24
   11b8a:	2100      	movs	r1, #0
   11b8c:	f7ff fc9a 	bl	114c4 <encode_uint>
				conv->altform_0c = true;
   11b90:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   11b94:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11b98:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   11b9c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11ba0:	4681      	mov	r9, r0
				conv->altform_0c = true;
   11ba2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
   11ba6:	2600      	movs	r6, #0
				goto prec_int_pad0;
   11ba8:	e748      	b.n	11a3c <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
   11baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   11bac:	2907      	cmp	r1, #7
   11bae:	f63f aee4 	bhi.w	1197a <cbvprintf+0x416>
   11bb2:	e8df f001 	tbb	[pc, r1]
   11bb6:	040d      	.short	0x040d
   11bb8:	08080d06 	.word	0x08080d06
   11bbc:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   11bbe:	701d      	strb	r5, [r3, #0]
		break;
   11bc0:	e6db      	b.n	1197a <cbvprintf+0x416>
		*(short *)dp = (short)count;
   11bc2:	801d      	strh	r5, [r3, #0]
		break;
   11bc4:	e6d9      	b.n	1197a <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
   11bc6:	4628      	mov	r0, r5
   11bc8:	17e9      	asrs	r1, r5, #31
   11bca:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   11bce:	e6d4      	b.n	1197a <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11bd0:	601d      	str	r5, [r3, #0]
		break;
   11bd2:	e6d2      	b.n	1197a <cbvprintf+0x416>
			bpe = bps + 5;
   11bd4:	4f2e      	ldr	r7, [pc, #184]	; (11c90 <cbvprintf+0x72c>)
   11bd6:	4606      	mov	r6, r0
			bps = "(nil)";
   11bd8:	f1a7 0905 	sub.w	r9, r7, #5
   11bdc:	e78d      	b.n	11afa <cbvprintf+0x596>
		} else if (conv->altform_0) {
   11bde:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   11be0:	bf48      	it	mi
   11be2:	3301      	addmi	r3, #1
   11be4:	e792      	b.n	11b0c <cbvprintf+0x5a8>
					OUTC(pad);
   11be6:	4618      	mov	r0, r3
   11be8:	4659      	mov	r1, fp
   11bea:	9303      	str	r3, [sp, #12]
   11bec:	47d0      	blx	sl
   11bee:	2800      	cmp	r0, #0
   11bf0:	9b03      	ldr	r3, [sp, #12]
   11bf2:	da04      	bge.n	11bfe <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
   11bf4:	b013      	add	sp, #76	; 0x4c
   11bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   11bfa:	2320      	movs	r3, #32
   11bfc:	4445      	add	r5, r8
   11bfe:	4642      	mov	r2, r8
				while (width-- > 0) {
   11c00:	2a00      	cmp	r2, #0
   11c02:	eba5 0108 	sub.w	r1, r5, r8
   11c06:	f108 38ff 	add.w	r8, r8, #4294967295
   11c0a:	dcec      	bgt.n	11be6 <cbvprintf+0x682>
   11c0c:	460d      	mov	r5, r1
		if (sign != 0) {
   11c0e:	b12e      	cbz	r6, 11c1c <cbvprintf+0x6b8>
			OUTC(sign);
   11c10:	4659      	mov	r1, fp
   11c12:	4630      	mov	r0, r6
   11c14:	47d0      	blx	sl
   11c16:	2800      	cmp	r0, #0
   11c18:	dbec      	blt.n	11bf4 <cbvprintf+0x690>
   11c1a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   11c1c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   11c20:	06d9      	lsls	r1, r3, #27
   11c22:	d401      	bmi.n	11c28 <cbvprintf+0x6c4>
   11c24:	071a      	lsls	r2, r3, #28
   11c26:	d505      	bpl.n	11c34 <cbvprintf+0x6d0>
				OUTC('0');
   11c28:	4659      	mov	r1, fp
   11c2a:	2030      	movs	r0, #48	; 0x30
   11c2c:	47d0      	blx	sl
   11c2e:	2800      	cmp	r0, #0
   11c30:	dbe0      	blt.n	11bf4 <cbvprintf+0x690>
   11c32:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11c34:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   11c38:	06db      	lsls	r3, r3, #27
   11c3a:	d506      	bpl.n	11c4a <cbvprintf+0x6e6>
				OUTC(conv->specifier);
   11c3c:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   11c40:	4659      	mov	r1, fp
   11c42:	47d0      	blx	sl
   11c44:	2800      	cmp	r0, #0
   11c46:	dbd5      	blt.n	11bf4 <cbvprintf+0x690>
   11c48:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11c4a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   11c4c:	442e      	add	r6, r5
   11c4e:	1b73      	subs	r3, r6, r5
   11c50:	2b00      	cmp	r3, #0
   11c52:	dc15      	bgt.n	11c80 <cbvprintf+0x71c>
			OUTS(bps, bpe);
   11c54:	463b      	mov	r3, r7
   11c56:	464a      	mov	r2, r9
   11c58:	4659      	mov	r1, fp
   11c5a:	4650      	mov	r0, sl
   11c5c:	f00e fbfd 	bl	2045a <outs>
   11c60:	2800      	cmp	r0, #0
   11c62:	dbc7      	blt.n	11bf4 <cbvprintf+0x690>
   11c64:	4405      	add	r5, r0
		while (width > 0) {
   11c66:	44a8      	add	r8, r5
   11c68:	eba8 0305 	sub.w	r3, r8, r5
   11c6c:	2b00      	cmp	r3, #0
   11c6e:	f77f ae84 	ble.w	1197a <cbvprintf+0x416>
			OUTC(' ');
   11c72:	4659      	mov	r1, fp
   11c74:	2020      	movs	r0, #32
   11c76:	47d0      	blx	sl
   11c78:	2800      	cmp	r0, #0
   11c7a:	dbbb      	blt.n	11bf4 <cbvprintf+0x690>
   11c7c:	3501      	adds	r5, #1
			--width;
   11c7e:	e7f3      	b.n	11c68 <cbvprintf+0x704>
				OUTC('0');
   11c80:	4659      	mov	r1, fp
   11c82:	2030      	movs	r0, #48	; 0x30
   11c84:	47d0      	blx	sl
   11c86:	2800      	cmp	r0, #0
   11c88:	dbb4      	blt.n	11bf4 <cbvprintf+0x690>
   11c8a:	3501      	adds	r5, #1
   11c8c:	e7df      	b.n	11c4e <cbvprintf+0x6ea>
   11c8e:	bf00      	nop
   11c90:	00023a9f 	.word	0x00023a9f

00011c94 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
   11c94:	b508      	push	{r3, lr}
   11c96:	4604      	mov	r4, r0
	__asm__ volatile(
   11c98:	f04f 0240 	mov.w	r2, #64	; 0x40
   11c9c:	f3ef 8311 	mrs	r3, BASEPRI
   11ca0:	f382 8812 	msr	BASEPRI_MAX, r2
   11ca4:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   11ca8:	f010 fdf8 	bl	2289c <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   11cac:	4620      	mov	r0, r4
   11cae:	f001 f94d 	bl	12f4c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   11cb2:	4803      	ldr	r0, [pc, #12]	; (11cc0 <sys_reboot+0x2c>)
   11cb4:	f00e f98d 	bl	1ffd2 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   11cb8:	f000 fc88 	bl	125cc <arch_cpu_idle>
   11cbc:	e7fc      	b.n	11cb8 <sys_reboot+0x24>
   11cbe:	bf00      	nop
   11cc0:	00023aa0 	.word	0x00023aa0

00011cc4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   11cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11cc6:	4605      	mov	r5, r0
   11cc8:	f04f 0340 	mov.w	r3, #64	; 0x40
   11ccc:	f3ef 8611 	mrs	r6, BASEPRI
   11cd0:	f383 8812 	msr	BASEPRI_MAX, r3
   11cd4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11cd8:	481e      	ldr	r0, [pc, #120]	; (11d54 <pm_state_notify+0x90>)
   11cda:	f008 fa51 	bl	1a180 <z_spin_lock_valid>
   11cde:	b968      	cbnz	r0, 11cfc <pm_state_notify+0x38>
   11ce0:	4a1d      	ldr	r2, [pc, #116]	; (11d58 <pm_state_notify+0x94>)
   11ce2:	491e      	ldr	r1, [pc, #120]	; (11d5c <pm_state_notify+0x98>)
   11ce4:	481e      	ldr	r0, [pc, #120]	; (11d60 <pm_state_notify+0x9c>)
   11ce6:	2381      	movs	r3, #129	; 0x81
   11ce8:	f00e f973 	bl	1ffd2 <printk>
   11cec:	4919      	ldr	r1, [pc, #100]	; (11d54 <pm_state_notify+0x90>)
   11cee:	481d      	ldr	r0, [pc, #116]	; (11d64 <pm_state_notify+0xa0>)
   11cf0:	f00e f96f 	bl	1ffd2 <printk>
   11cf4:	4818      	ldr	r0, [pc, #96]	; (11d58 <pm_state_notify+0x94>)
   11cf6:	2181      	movs	r1, #129	; 0x81
   11cf8:	f00e fbc5 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   11cfc:	4815      	ldr	r0, [pc, #84]	; (11d54 <pm_state_notify+0x90>)
   11cfe:	f008 fa5d 	bl	1a1bc <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11d02:	4b19      	ldr	r3, [pc, #100]	; (11d68 <pm_state_notify+0xa4>)
   11d04:	681c      	ldr	r4, [r3, #0]
   11d06:	2c00      	cmp	r4, #0
   11d08:	bf38      	it	cc
   11d0a:	2400      	movcc	r4, #0
   11d0c:	b15c      	cbz	r4, 11d26 <pm_state_notify+0x62>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   11d0e:	4f17      	ldr	r7, [pc, #92]	; (11d6c <pm_state_notify+0xa8>)
			callback = notifier->state_exit;
   11d10:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   11d14:	2d00      	cmp	r5, #0
   11d16:	bf08      	it	eq
   11d18:	4613      	moveq	r3, r2
		if (callback) {
   11d1a:	b10b      	cbz	r3, 11d20 <pm_state_notify+0x5c>
			callback(z_power_state.state);
   11d1c:	7838      	ldrb	r0, [r7, #0]
   11d1e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11d20:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11d22:	2c00      	cmp	r4, #0
   11d24:	d1f4      	bne.n	11d10 <pm_state_notify+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11d26:	480b      	ldr	r0, [pc, #44]	; (11d54 <pm_state_notify+0x90>)
   11d28:	f008 fa38 	bl	1a19c <z_spin_unlock_valid>
   11d2c:	b968      	cbnz	r0, 11d4a <pm_state_notify+0x86>
   11d2e:	4a0a      	ldr	r2, [pc, #40]	; (11d58 <pm_state_notify+0x94>)
   11d30:	490f      	ldr	r1, [pc, #60]	; (11d70 <pm_state_notify+0xac>)
   11d32:	480b      	ldr	r0, [pc, #44]	; (11d60 <pm_state_notify+0x9c>)
   11d34:	23ac      	movs	r3, #172	; 0xac
   11d36:	f00e f94c 	bl	1ffd2 <printk>
   11d3a:	4906      	ldr	r1, [pc, #24]	; (11d54 <pm_state_notify+0x90>)
   11d3c:	480d      	ldr	r0, [pc, #52]	; (11d74 <pm_state_notify+0xb0>)
   11d3e:	f00e f948 	bl	1ffd2 <printk>
   11d42:	4805      	ldr	r0, [pc, #20]	; (11d58 <pm_state_notify+0x94>)
   11d44:	21ac      	movs	r1, #172	; 0xac
   11d46:	f00e fb9e 	bl	20486 <assert_post_action>
	__asm__ volatile(
   11d4a:	f386 8811 	msr	BASEPRI, r6
   11d4e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   11d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d54:	20001c84 	.word	0x20001c84
   11d58:	00023889 	.word	0x00023889
   11d5c:	000238db 	.word	0x000238db
   11d60:	000237c9 	.word	0x000237c9
   11d64:	000238f0 	.word	0x000238f0
   11d68:	20001c88 	.word	0x20001c88
   11d6c:	20001c90 	.word	0x20001c90
   11d70:	000238af 	.word	0x000238af
   11d74:	000238c6 	.word	0x000238c6

00011d78 <pm_system_resume>:

void pm_system_resume(void)
{
   11d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   11d7a:	4b0f      	ldr	r3, [pc, #60]	; (11db8 <pm_system_resume+0x40>)
   11d7c:	681a      	ldr	r2, [r3, #0]
   11d7e:	b9ba      	cbnz	r2, 11db0 <pm_system_resume+0x38>
		post_ops_done = 1;
   11d80:	2201      	movs	r2, #1
   11d82:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   11d84:	4a0d      	ldr	r2, [pc, #52]	; (11dbc <pm_system_resume+0x44>)
   11d86:	ca07      	ldmia	r2, {r0, r1, r2}
   11d88:	ab01      	add	r3, sp, #4
   11d8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   11d8e:	4a0c      	ldr	r2, [pc, #48]	; (11dc0 <pm_system_resume+0x48>)
   11d90:	b14a      	cbz	r2, 11da6 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
   11d92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   11d96:	f00e fd9b 	bl	208d0 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   11d9a:	2000      	movs	r0, #0
	}
}
   11d9c:	b005      	add	sp, #20
   11d9e:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
   11da2:	f7ff bf8f 	b.w	11cc4 <pm_state_notify>
   11da6:	f382 8811 	msr	BASEPRI, r2
   11daa:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   11dae:	e7f4      	b.n	11d9a <pm_system_resume+0x22>
}
   11db0:	b005      	add	sp, #20
   11db2:	f85d fb04 	ldr.w	pc, [sp], #4
   11db6:	bf00      	nop
   11db8:	20000430 	.word	0x20000430
   11dbc:	20001c90 	.word	0x20001c90
   11dc0:	000208d1 	.word	0x000208d1

00011dc4 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   11dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11dc6:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   11dc8:	466e      	mov	r6, sp
   11dca:	4601      	mov	r1, r0
{
   11dcc:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   11dce:	4630      	mov	r0, r6
   11dd0:	f00e fb61 	bl	20496 <pm_policy_next_state>
   11dd4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   11dd8:	4c1f      	ldr	r4, [pc, #124]	; (11e58 <pm_system_suspend+0x94>)
   11dda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   11dde:	7820      	ldrb	r0, [r4, #0]
   11de0:	2800      	cmp	r0, #0
   11de2:	d037      	beq.n	11e54 <pm_system_suspend+0x90>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   11de4:	4b1d      	ldr	r3, [pc, #116]	; (11e5c <pm_system_suspend+0x98>)
   11de6:	2000      	movs	r0, #0
   11de8:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   11dea:	1c6b      	adds	r3, r5, #1
   11dec:	d01d      	beq.n	11e2a <pm_system_suspend+0x66>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
   11dee:	4291      	cmp	r1, r2
   11df0:	d20c      	bcs.n	11e0c <pm_system_suspend+0x48>
   11df2:	491b      	ldr	r1, [pc, #108]	; (11e60 <pm_system_suspend+0x9c>)
   11df4:	4a1b      	ldr	r2, [pc, #108]	; (11e64 <pm_system_suspend+0xa0>)
   11df6:	481c      	ldr	r0, [pc, #112]	; (11e68 <pm_system_suspend+0xa4>)
   11df8:	23ca      	movs	r3, #202	; 0xca
   11dfa:	f00e f8ea 	bl	1ffd2 <printk>
   11dfe:	481b      	ldr	r0, [pc, #108]	; (11e6c <pm_system_suspend+0xa8>)
   11e00:	f00e f8e7 	bl	1ffd2 <printk>
   11e04:	4817      	ldr	r0, [pc, #92]	; (11e64 <pm_system_suspend+0xa0>)
   11e06:	21ca      	movs	r1, #202	; 0xca
   11e08:	f00e fb3d 	bl	20486 <assert_post_action>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   11e0c:	68a7      	ldr	r7, [r4, #8]
   11e0e:	4818      	ldr	r0, [pc, #96]	; (11e70 <pm_system_suspend+0xac>)
   11e10:	4a18      	ldr	r2, [pc, #96]	; (11e74 <pm_system_suspend+0xb0>)
   11e12:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   11e16:	2100      	movs	r1, #0
   11e18:	2300      	movs	r3, #0
   11e1a:	fbe6 0107 	umlal	r0, r1, r6, r7
   11e1e:	f7ef f96f 	bl	1100 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   11e22:	2101      	movs	r1, #1
   11e24:	1a28      	subs	r0, r5, r0
   11e26:	f00a fe91 	bl	1cb4c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   11e2a:	f009 fbe1 	bl	1b5f0 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   11e2e:	2001      	movs	r0, #1
   11e30:	f7ff ff48 	bl	11cc4 <pm_state_notify>
	pm_state_set(z_power_state);
   11e34:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   11e38:	ab05      	add	r3, sp, #20
   11e3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   11e3e:	4a0e      	ldr	r2, [pc, #56]	; (11e78 <pm_system_suspend+0xb4>)
   11e40:	b11a      	cbz	r2, 11e4a <pm_system_suspend+0x86>
		pm_power_state_set(info);
   11e42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   11e46:	f00e fd30 	bl	208aa <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   11e4a:	f7ff ff95 	bl	11d78 <pm_system_resume>
	k_sched_unlock();
   11e4e:	f00a f913 	bl	1c078 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   11e52:	7820      	ldrb	r0, [r4, #0]
}
   11e54:	b009      	add	sp, #36	; 0x24
   11e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11e58:	20001c90 	.word	0x20001c90
   11e5c:	20000430 	.word	0x20000430
   11e60:	00023b3f 	.word	0x00023b3f
   11e64:	00023ac9 	.word	0x00023ac9
   11e68:	000237c9 	.word	0x000237c9
   11e6c:	00023b7f 	.word	0x00023b7f
   11e70:	000f423f 	.word	0x000f423f
   11e74:	000f4240 	.word	0x000f4240
   11e78:	000208ab 	.word	0x000208ab

00011e7c <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
   11e7c:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   11e7e:	4d06      	ldr	r5, [pc, #24]	; (11e98 <scan_default_param_set+0x1c>)
   11e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   11e82:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   11e84:	ac01      	add	r4, sp, #4
   11e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
   11e88:	ae01      	add	r6, sp, #4
   11e8a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   11e8c:	4c03      	ldr	r4, [pc, #12]	; (11e9c <scan_default_param_set+0x20>)
   11e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11e90:	682b      	ldr	r3, [r5, #0]
   11e92:	6023      	str	r3, [r4, #0]
}
   11e94:	b006      	add	sp, #24
   11e96:	bd70      	pop	{r4, r5, r6, pc}
   11e98:	00022ff0 	.word	0x00022ff0
   11e9c:	20001ccc 	.word	0x20001ccc

00011ea0 <uuid_check>:
{
   11ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return CONFIG_BT_SCAN_UUID_CNT && bt_scan.scan_filters.uuid.enabled;
   11ea4:	4c29      	ldr	r4, [pc, #164]	; (11f4c <uuid_check+0xac>)
{
   11ea6:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
   11ea8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
{
   11eac:	9100      	str	r1, [sp, #0]
   11eae:	4606      	mov	r6, r0
   11eb0:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
   11eb2:	2b00      	cmp	r3, #0
   11eb4:	d03c      	beq.n	11f30 <uuid_check+0x90>
	uint8_t data_len = data->data_len;
   11eb6:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
   11eb8:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   11ebc:	f894 a020 	ldrb.w	sl, [r4, #32]
	uint8_t data_len = data->data_len;
   11ec0:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
   11ec2:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
   11ec4:	463d      	mov	r5, r7
	for (size_t i = 0; i < counter; i++) {
   11ec6:	4557      	cmp	r7, sl
   11ec8:	d30e      	bcc.n	11ee8 <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
   11eca:	f886 503c 	strb.w	r5, [r6, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
   11ece:	f1bb 0f00 	cmp.w	fp, #0
   11ed2:	d02b      	beq.n	11f2c <uuid_check+0x8c>
   11ed4:	45aa      	cmp	sl, r5
   11ed6:	d12b      	bne.n	11f30 <uuid_check+0x90>
			control->filter_match_cnt++;
   11ed8:	7873      	ldrb	r3, [r6, #1]
   11eda:	3301      	adds	r3, #1
   11edc:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
   11ede:	2301      	movs	r3, #1
   11ee0:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
   11ee4:	70b3      	strb	r3, [r6, #2]
}
   11ee6:	e023      	b.n	11f30 <uuid_check+0x90>
		if (find_uuid(data->data, data_len, uuid_type,
   11ee8:	9b00      	ldr	r3, [sp, #0]
   11eea:	9a03      	ldr	r2, [sp, #12]
   11eec:	685b      	ldr	r3, [r3, #4]
   11eee:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
   11ef0:	4b17      	ldr	r3, [pc, #92]	; (11f50 <uuid_check+0xb0>)
   11ef2:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
   11ef6:	f04f 0900 	mov.w	r9, #0
   11efa:	9b01      	ldr	r3, [sp, #4]
   11efc:	4599      	cmp	r9, r3
   11efe:	d305      	bcc.n	11f0c <uuid_check+0x6c>
		} else if (all_filters_mode) {
   11f00:	f1bb 0f00 	cmp.w	fp, #0
   11f04:	d1e1      	bne.n	11eca <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
   11f06:	3701      	adds	r7, #1
   11f08:	3418      	adds	r4, #24
   11f0a:	e7dc      	b.n	11ec6 <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
   11f0c:	9b02      	ldr	r3, [sp, #8]
   11f0e:	4642      	mov	r2, r8
   11f10:	eb03 0109 	add.w	r1, r3, r9
   11f14:	a805      	add	r0, sp, #20
   11f16:	f00e fd10 	bl	2093a <bt_uuid_create>
   11f1a:	2800      	cmp	r0, #0
   11f1c:	d0f0      	beq.n	11f00 <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
   11f1e:	68a1      	ldr	r1, [r4, #8]
   11f20:	a805      	add	r0, sp, #20
   11f22:	f00e fce0 	bl	208e6 <bt_uuid_cmp>
   11f26:	b130      	cbz	r0, 11f36 <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
   11f28:	44c1      	add	r9, r8
   11f2a:	e7e6      	b.n	11efa <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
   11f2c:	2d00      	cmp	r5, #0
   11f2e:	d1d3      	bne.n	11ed8 <uuid_check+0x38>
}
   11f30:	b00b      	add	sp, #44	; 0x2c
   11f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			control->filter_status.uuid.uuid[uuid_match_cnt] =
   11f36:	eb06 0285 	add.w	r2, r6, r5, lsl #2
				uuid_filter->uuid[i].uuid;
   11f3a:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
   11f3c:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
   11f3e:	3501      	adds	r5, #1
   11f40:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
   11f42:	f1bb 0f00 	cmp.w	fp, #0
   11f46:	d1de      	bne.n	11f06 <uuid_check+0x66>
   11f48:	e7bf      	b.n	11eca <uuid_check+0x2a>
   11f4a:	bf00      	nop
   11f4c:	20001c9c 	.word	0x20001c9c
   11f50:	00023ba4 	.word	0x00023ba4

00011f54 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   11f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11f56:	4b0a      	ldr	r3, [pc, #40]	; (11f80 <notify_filter_matched.constprop.0+0x2c>)
   11f58:	681c      	ldr	r4, [r3, #0]
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   11f5a:	4605      	mov	r5, r0
   11f5c:	460e      	mov	r6, r1
   11f5e:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11f60:	b10c      	cbz	r4, 11f66 <notify_filter_matched.constprop.0+0x12>
   11f62:	3c04      	subs	r4, #4
   11f64:	b904      	cbnz	r4, 11f68 <notify_filter_matched.constprop.0+0x14>
}
   11f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
   11f68:	6823      	ldr	r3, [r4, #0]
   11f6a:	681b      	ldr	r3, [r3, #0]
   11f6c:	b11b      	cbz	r3, 11f76 <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
   11f6e:	463a      	mov	r2, r7
   11f70:	4631      	mov	r1, r6
   11f72:	4628      	mov	r0, r5
   11f74:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   11f76:	1d23      	adds	r3, r4, #4
   11f78:	d0f5      	beq.n	11f66 <notify_filter_matched.constprop.0+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11f7a:	6864      	ldr	r4, [r4, #4]
   11f7c:	e7f0      	b.n	11f60 <notify_filter_matched.constprop.0+0xc>
   11f7e:	bf00      	nop
   11f80:	20001ce8 	.word	0x20001ce8

00011f84 <bt_scan_cb_register>:
	if (!cb) {
   11f84:	b150      	cbz	r0, 11f9c <bt_scan_cb_register+0x18>
	parent->next = child;
   11f86:	2300      	movs	r3, #0
   11f88:	6043      	str	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   11f8a:	4b05      	ldr	r3, [pc, #20]	; (11fa0 <bt_scan_cb_register+0x1c>)
   11f8c:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&callback_list, &cb->node);
   11f8e:	1d02      	adds	r2, r0, #4
   11f90:	b911      	cbnz	r1, 11f98 <bt_scan_cb_register+0x14>
	list->head = node;
   11f92:	e9c3 2200 	strd	r2, r2, [r3]
}
   11f96:	4770      	bx	lr
	parent->next = child;
   11f98:	600a      	str	r2, [r1, #0]
	list->tail = node;
   11f9a:	605a      	str	r2, [r3, #4]
}
   11f9c:	4770      	bx	lr
   11f9e:	bf00      	nop
   11fa0:	20001ce8 	.word	0x20001ce8

00011fa4 <bt_scan_filter_add>:
	bt_scan.conn_param = *conn_param;
}

int bt_scan_filter_add(enum bt_scan_filter_type type,
		       const void *data)
{
   11fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11fa6:	4605      	mov	r5, r0
	struct bt_uuid *uuid;
	uint16_t appearance;
	struct bt_scan_manufacturer_data *manufacturer_data;
	int err = 0;

	if (!data) {
   11fa8:	460c      	mov	r4, r1
   11faa:	2900      	cmp	r1, #0
   11fac:	d048      	beq.n	12040 <bt_scan_filter_add+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
   11fae:	4826      	ldr	r0, [pc, #152]	; (12048 <bt_scan_filter_add+0xa4>)
   11fb0:	f04f 32ff 	mov.w	r2, #4294967295
   11fb4:	f04f 33ff 	mov.w	r3, #4294967295
   11fb8:	f008 f934 	bl	1a224 <z_impl_k_mutex_lock>
		return -EINVAL;
	}

	k_mutex_lock(&scan_mutex, K_FOREVER);

	switch (type) {
   11fbc:	2d03      	cmp	r5, #3
   11fbe:	d00c      	beq.n	11fda <bt_scan_filter_add+0x36>
   11fc0:	d938      	bls.n	12034 <bt_scan_filter_add+0x90>
   11fc2:	3d04      	subs	r5, #4
		manufacturer_data = (struct bt_scan_manufacturer_data *)data;
		err = scan_manufacturer_data_filter_add(manufacturer_data);
		break;

	default:
		err = -EINVAL;
   11fc4:	2d01      	cmp	r5, #1
   11fc6:	bf94      	ite	ls
   11fc8:	f06f 040b 	mvnls.w	r4, #11
   11fcc:	f06f 0415 	mvnhi.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
   11fd0:	481d      	ldr	r0, [pc, #116]	; (12048 <bt_scan_filter_add+0xa4>)
   11fd2:	f008 fa27 	bl	1a424 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&scan_mutex);

	return err;
}
   11fd6:	4620      	mov	r0, r4
   11fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   11fda:	4a1c      	ldr	r2, [pc, #112]	; (1204c <bt_scan_filter_add+0xa8>)
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
   11fdc:	f892 3020 	ldrb.w	r3, [r2, #32]
   11fe0:	bb43      	cbnz	r3, 12034 <bt_scan_filter_add+0x90>
	switch (uuid->type) {
   11fe2:	7823      	ldrb	r3, [r4, #0]
   11fe4:	2b01      	cmp	r3, #1
   11fe6:	d00c      	beq.n	12002 <bt_scan_filter_add+0x5e>
   11fe8:	2b02      	cmp	r3, #2
   11fea:	d011      	beq.n	12010 <bt_scan_filter_add+0x6c>
   11fec:	bb2b      	cbnz	r3, 1203a <bt_scan_filter_add+0x96>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
   11fee:	6820      	ldr	r0, [r4, #0]
   11ff0:	60d0      	str	r0, [r2, #12]
   11ff2:	f102 030c 	add.w	r3, r2, #12
		uuid_filter[counter].uuid =
   11ff6:	6093      	str	r3, [r2, #8]
	bt_scan.scan_filters.uuid.cnt++;
   11ff8:	2301      	movs	r3, #1
   11ffa:	f882 3020 	strb.w	r3, [r2, #32]
	return 0;
   11ffe:	2400      	movs	r4, #0
   12000:	e7e6      	b.n	11fd0 <bt_scan_filter_add+0x2c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
   12002:	e894 0003 	ldmia.w	r4, {r0, r1}
   12006:	f102 030c 	add.w	r3, r2, #12
   1200a:	e883 0003 	stmia.w	r3, {r0, r1}
   1200e:	e7f2      	b.n	11ff6 <bt_scan_filter_add+0x52>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
   12010:	4623      	mov	r3, r4
   12012:	f102 040c 	add.w	r4, r2, #12
   12016:	f103 0710 	add.w	r7, r3, #16
   1201a:	4626      	mov	r6, r4
   1201c:	6818      	ldr	r0, [r3, #0]
   1201e:	6859      	ldr	r1, [r3, #4]
   12020:	4625      	mov	r5, r4
   12022:	c503      	stmia	r5!, {r0, r1}
   12024:	3308      	adds	r3, #8
   12026:	42bb      	cmp	r3, r7
   12028:	462c      	mov	r4, r5
   1202a:	d1f7      	bne.n	1201c <bt_scan_filter_add+0x78>
   1202c:	781b      	ldrb	r3, [r3, #0]
   1202e:	702b      	strb	r3, [r5, #0]
		uuid_filter[counter].uuid =
   12030:	6096      	str	r6, [r2, #8]
		break;
   12032:	e7e1      	b.n	11ff8 <bt_scan_filter_add+0x54>
		return -ENOMEM;
   12034:	f06f 040b 	mvn.w	r4, #11
   12038:	e7ca      	b.n	11fd0 <bt_scan_filter_add+0x2c>
	switch (uuid->type) {
   1203a:	f06f 0415 	mvn.w	r4, #21
   1203e:	e7c7      	b.n	11fd0 <bt_scan_filter_add+0x2c>
		return -EINVAL;
   12040:	f06f 0415 	mvn.w	r4, #21
   12044:	e7c7      	b.n	11fd6 <bt_scan_filter_add+0x32>
   12046:	bf00      	nop
   12048:	200006c4 	.word	0x200006c4
   1204c:	20001c9c 	.word	0x20001c9c

00012050 <bt_scan_filter_disable>:
}

void bt_scan_filter_disable(void)
{
	/* Disable all filters. */
	bt_scan.scan_filters.name.enabled = false;
   12050:	4b05      	ldr	r3, [pc, #20]	; (12068 <bt_scan_filter_disable+0x18>)
   12052:	2200      	movs	r2, #0
   12054:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
   12056:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
   12058:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
   1205a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.appearance.enabled = false;
   1205e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.manufacturer_data.enabled = false;
   12062:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
   12066:	4770      	bx	lr
   12068:	20001c9c 	.word	0x20001c9c

0001206c <bt_scan_filter_enable>:

int bt_scan_filter_enable(uint8_t mode, bool match_all)
{
   1206c:	b508      	push	{r3, lr}
	/* Check if the mode is correct. */
	if (!check_filter_mode(mode)) {
   1206e:	0683      	lsls	r3, r0, #26
   12070:	d022      	beq.n	120b8 <bt_scan_filter_enable+0x4c>
		return -EINVAL;
	}

	/* Disable filters. */
	bt_scan_filter_disable();
   12072:	f7ff ffed 	bl	12050 <bt_scan_filter_disable>

	struct bt_scan_filters *filters = &bt_scan.scan_filters;

	/* Turn on the filters of your choice. */
	if (mode & BT_SCAN_ADDR_FILTER) {
   12076:	4b12      	ldr	r3, [pc, #72]	; (120c0 <bt_scan_filter_enable+0x54>)
   12078:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
   1207c:	bf1c      	itt	ne
   1207e:	2201      	movne	r2, #1
   12080:	715a      	strbne	r2, [r3, #5]
	}

	if (mode & BT_SCAN_NAME_FILTER) {
   12082:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
   12084:	bf44      	itt	mi
   12086:	2201      	movmi	r2, #1
   12088:	705a      	strbmi	r2, [r3, #1]
	}

	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
   1208a:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
   1208c:	bf44      	itt	mi
   1208e:	2201      	movmi	r2, #1
   12090:	70da      	strbmi	r2, [r3, #3]
	}

	if (mode & BT_SCAN_UUID_FILTER) {
   12092:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
   12094:	bf44      	itt	mi
   12096:	2201      	movmi	r2, #1
   12098:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	}

	if (mode & BT_SCAN_APPEARANCE_FILTER) {
   1209c:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
   1209e:	bf44      	itt	mi
   120a0:	2201      	movmi	r2, #1
   120a2:	f883 2025 	strbmi.w	r2, [r3, #37]	; 0x25
	}

	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
   120a6:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
   120a8:	bf44      	itt	mi
   120aa:	2201      	movmi	r2, #1
   120ac:	f883 2027 	strbmi.w	r2, [r3, #39]	; 0x27
	}

	/* Select the filter mode. */
	filters->all_mode = match_all;
   120b0:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28

	return 0;
   120b4:	2000      	movs	r0, #0
}
   120b6:	bd08      	pop	{r3, pc}
		return -EINVAL;
   120b8:	f06f 0015 	mvn.w	r0, #21
   120bc:	e7fb      	b.n	120b6 <bt_scan_filter_enable+0x4a>
   120be:	bf00      	nop
   120c0:	20001c9c 	.word	0x20001c9c

000120c4 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
   120c4:	b570      	push	{r4, r5, r6, lr}
   120c6:	b086      	sub	sp, #24
   120c8:	460e      	mov	r6, r1
   120ca:	4605      	mov	r5, r0
	bt_scan_stop();
   120cc:	f00e fa01 	bl	204d2 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
   120d0:	4b18      	ldr	r3, [pc, #96]	; (12134 <scan_connect_with_target.part.0+0x70>)
   120d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   120d4:	ac02      	add	r4, sp, #8
   120d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
   120da:	ab01      	add	r3, sp, #4
   120dc:	4621      	mov	r1, r4
   120de:	4a16      	ldr	r2, [pc, #88]	; (12138 <scan_connect_with_target.part.0+0x74>)
   120e0:	4630      	mov	r0, r6
   120e2:	f003 f813 	bl	1510c <bt_conn_le_create>
	if (err) {
   120e6:	4b15      	ldr	r3, [pc, #84]	; (1213c <scan_connect_with_target.part.0+0x78>)
   120e8:	3508      	adds	r5, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   120ea:	681c      	ldr	r4, [r3, #0]
	if (err) {
   120ec:	b168      	cbz	r0, 1210a <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   120ee:	b10c      	cbz	r4, 120f4 <scan_connect_with_target.part.0+0x30>
   120f0:	3c04      	subs	r4, #4
   120f2:	b90c      	cbnz	r4, 120f8 <scan_connect_with_target.part.0+0x34>
}
   120f4:	b006      	add	sp, #24
   120f6:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
   120f8:	6823      	ldr	r3, [r4, #0]
   120fa:	689b      	ldr	r3, [r3, #8]
   120fc:	b10b      	cbz	r3, 12102 <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
   120fe:	4628      	mov	r0, r5
   12100:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   12102:	1d22      	adds	r2, r4, #4
   12104:	d0f6      	beq.n	120f4 <scan_connect_with_target.part.0+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12106:	6864      	ldr	r4, [r4, #4]
   12108:	e7f1      	b.n	120ee <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1210a:	b91c      	cbnz	r4, 12114 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
   1210c:	9801      	ldr	r0, [sp, #4]
   1210e:	f002 fd8b 	bl	14c28 <bt_conn_unref>
   12112:	e7ef      	b.n	120f4 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
   12114:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   12116:	3c04      	subs	r4, #4
   12118:	2c00      	cmp	r4, #0
   1211a:	d0f7      	beq.n	1210c <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
   1211c:	6823      	ldr	r3, [r4, #0]
   1211e:	68db      	ldr	r3, [r3, #12]
   12120:	b113      	cbz	r3, 12128 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
   12122:	4631      	mov	r1, r6
   12124:	4628      	mov	r0, r5
   12126:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   12128:	1d23      	adds	r3, r4, #4
   1212a:	d0ef      	beq.n	1210c <scan_connect_with_target.part.0+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1212c:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1212e:	2c00      	cmp	r4, #0
   12130:	d1f1      	bne.n	12116 <scan_connect_with_target.part.0+0x52>
   12132:	e7eb      	b.n	1210c <scan_connect_with_target.part.0+0x48>
   12134:	00023004 	.word	0x00023004
   12138:	20001ce0 	.word	0x20001ce0
   1213c:	20001ce8 	.word	0x20001ce8

00012140 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
   12140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   12144:	4f31      	ldr	r7, [pc, #196]	; (1220c <scan_recv+0xcc>)
{
   12146:	b096      	sub	sp, #88	; 0x58
	memset(&scan_control, 0, sizeof(scan_control));
   12148:	2254      	movs	r2, #84	; 0x54
{
   1214a:	4605      	mov	r5, r0
   1214c:	460c      	mov	r4, r1
	memset(&scan_control, 0, sizeof(scan_control));
   1214e:	a801      	add	r0, sp, #4
   12150:	2100      	movs	r1, #0
   12152:	f010 fdaa 	bl	22caa <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   12156:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   1215a:	f88d 2007 	strb.w	r2, [sp, #7]
	control->filter_cnt = 0;
   1215e:	2200      	movs	r2, #0
   12160:	f88d 2004 	strb.w	r2, [sp, #4]
	if (is_uuid_filter_enabled()) {
   12164:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   12168:	b112      	cbz	r2, 12170 <scan_recv+0x30>
		control->filter_cnt++;
   1216a:	2301      	movs	r3, #1
   1216c:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
   12170:	7a2b      	ldrb	r3, [r5, #8]
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
   12172:	4620      	mov	r0, r4
   12174:	f003 0301 	and.w	r3, r3, #1
   12178:	f88d 3008 	strb.w	r3, [sp, #8]
   1217c:	f010 fa5f 	bl	2263e <net_buf_simple_headroom>

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
   12180:	4923      	ldr	r1, [pc, #140]	; (12210 <scan_recv+0xd0>)
	state->len = buf->len;
   12182:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
   12186:	4606      	mov	r6, r0
   12188:	aa01      	add	r2, sp, #4
   1218a:	4620      	mov	r0, r4
   1218c:	f00e feaf 	bl	20eee <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
   12190:	4b20      	ldr	r3, [pc, #128]	; (12214 <scan_recv+0xd4>)
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
   12192:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
   12194:	f8a4 8004 	strh.w	r8, [r4, #4]
	scan_control.device_info.adv_data = ad;
   12198:	e9cd 3404 	strd	r3, r4, [sp, #16]
	if (control->all_mode &&
   1219c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	scan_control.device_info.recv_info = info;
   121a0:	9503      	str	r5, [sp, #12]
	buf->data = buf->__buf + state->offset;
   121a2:	fa10 f686 	uxtah	r6, r0, r6
   121a6:	6026      	str	r6, [r4, #0]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
   121a8:	682c      	ldr	r4, [r5, #0]
	if (control->all_mode &&
   121aa:	b1ab      	cbz	r3, 121d8 <scan_recv+0x98>
   121ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
   121b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   121b4:	429a      	cmp	r2, r3
   121b6:	d113      	bne.n	121e0 <scan_recv+0xa0>
		notify_filter_matched(&control->device_info,
   121b8:	f89d 2008 	ldrb.w	r2, [sp, #8]
   121bc:	a906      	add	r1, sp, #24
   121be:	a803      	add	r0, sp, #12
   121c0:	f7ff fec8 	bl	11f54 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
   121c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   121c8:	b11b      	cbz	r3, 121d2 <scan_recv+0x92>
   121ca:	4621      	mov	r1, r4
   121cc:	a801      	add	r0, sp, #4
   121ce:	f7ff ff79 	bl	120c4 <scan_connect_with_target.part.0>
}
   121d2:	b016      	add	sp, #88	; 0x58
   121d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if ((!control->all_mode) && control->filter_match) {
   121d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   121dc:	2b00      	cmp	r3, #0
   121de:	d1eb      	bne.n	121b8 <scan_recv+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   121e0:	4b0d      	ldr	r3, [pc, #52]	; (12218 <scan_recv+0xd8>)
   121e2:	681c      	ldr	r4, [r3, #0]
   121e4:	2c00      	cmp	r4, #0
   121e6:	d0f4      	beq.n	121d2 <scan_recv+0x92>
		notify_filter_no_match(&control->device_info,
   121e8:	f89d 5008 	ldrb.w	r5, [sp, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   121ec:	3c04      	subs	r4, #4
   121ee:	2c00      	cmp	r4, #0
   121f0:	d0ef      	beq.n	121d2 <scan_recv+0x92>
		if (cb->cb_addr->filter_no_match) {
   121f2:	6823      	ldr	r3, [r4, #0]
   121f4:	685b      	ldr	r3, [r3, #4]
   121f6:	b113      	cbz	r3, 121fe <scan_recv+0xbe>
			cb->cb_addr->filter_no_match(device_info, connectable);
   121f8:	4629      	mov	r1, r5
   121fa:	a803      	add	r0, sp, #12
   121fc:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   121fe:	1d23      	adds	r3, r4, #4
   12200:	d0e7      	beq.n	121d2 <scan_recv+0x92>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12202:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   12204:	2c00      	cmp	r4, #0
   12206:	d1f1      	bne.n	121ec <scan_recv+0xac>
   12208:	e7e3      	b.n	121d2 <scan_recv+0x92>
   1220a:	bf00      	nop
   1220c:	20001c9c 	.word	0x20001c9c
   12210:	000204a1 	.word	0x000204a1
   12214:	20001ce0 	.word	0x20001ce0
   12218:	20001ce8 	.word	0x20001ce8

0001221c <bt_scan_init>:
{
   1221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   1221e:	4c18      	ldr	r4, [pc, #96]	; (12280 <bt_scan_init+0x64>)
{
   12220:	4605      	mov	r5, r0
	bt_le_scan_cb_register(&scan_cb);
   12222:	4818      	ldr	r0, [pc, #96]	; (12284 <bt_scan_init+0x68>)
   12224:	f002 fb10 	bl	14848 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   12228:	222c      	movs	r2, #44	; 0x2c
   1222a:	2100      	movs	r1, #0
   1222c:	4620      	mov	r0, r4
   1222e:	f010 fd3c 	bl	22caa <memset>
	if (init) {
   12232:	4627      	mov	r7, r4
   12234:	b1d5      	cbz	r5, 1226c <bt_scan_init+0x50>
		bt_scan.connect_if_match = init->connect_if_match;
   12236:	792b      	ldrb	r3, [r5, #4]
   12238:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (init->scan_param) {
   1223c:	682c      	ldr	r4, [r5, #0]
   1223e:	b164      	cbz	r4, 1225a <bt_scan_init+0x3e>
			bt_scan.scan_param = *init->scan_param;
   12240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   12242:	f107 0630 	add.w	r6, r7, #48	; 0x30
   12246:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   12248:	6823      	ldr	r3, [r4, #0]
   1224a:	6033      	str	r3, [r6, #0]
		if (init->conn_param) {
   1224c:	68aa      	ldr	r2, [r5, #8]
   1224e:	b13a      	cbz	r2, 12260 <bt_scan_init+0x44>
			bt_scan.conn_param = *init->conn_param;
   12250:	4b0d      	ldr	r3, [pc, #52]	; (12288 <bt_scan_init+0x6c>)
   12252:	6810      	ldr	r0, [r2, #0]
   12254:	6851      	ldr	r1, [r2, #4]
   12256:	c303      	stmia	r3!, {r0, r1}
}
   12258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			scan_default_param_set();
   1225a:	f7ff fe0f 	bl	11e7c <scan_default_param_set>
   1225e:	e7f5      	b.n	1224c <bt_scan_init+0x30>
	bt_scan.conn_param = *conn_param;
   12260:	490a      	ldr	r1, [pc, #40]	; (1228c <bt_scan_init+0x70>)
   12262:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   12266:	e9c7 1311 	strd	r1, r3, [r7, #68]	; 0x44
}
   1226a:	e7f5      	b.n	12258 <bt_scan_init+0x3c>
		scan_default_param_set();
   1226c:	f7ff fe06 	bl	11e7c <scan_default_param_set>
	bt_scan.conn_param = *conn_param;
   12270:	4a06      	ldr	r2, [pc, #24]	; (1228c <bt_scan_init+0x70>)
		bt_scan.connect_if_match = false;
   12272:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
	bt_scan.conn_param = *conn_param;
   12276:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   1227a:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
}
   1227e:	e7eb      	b.n	12258 <bt_scan_init+0x3c>
   12280:	20001c9c 	.word	0x20001c9c
   12284:	20000434 	.word	0x20000434
   12288:	20001ce0 	.word	0x20001ce0
   1228c:	00280018 	.word	0x00280018

00012290 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
   12290:	b108      	cbz	r0, 12296 <bt_scan_start+0x6>
   12292:	2801      	cmp	r0, #1
   12294:	d106      	bne.n	122a4 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   12296:	4b05      	ldr	r3, [pc, #20]	; (122ac <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   12298:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   1229a:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   1229e:	4804      	ldr	r0, [pc, #16]	; (122b0 <bt_scan_start+0x20>)
   122a0:	f002 ba3c 	b.w	1471c <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   122a4:	f06f 0015 	mvn.w	r0, #21
   122a8:	4770      	bx	lr
   122aa:	bf00      	nop
   122ac:	20001c9c 	.word	0x20001c9c
   122b0:	20001ccc 	.word	0x20001ccc

000122b4 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   122b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   122b6:	4e26      	ldr	r6, [pc, #152]	; (12350 <tc_aes128_set_encrypt_key+0x9c>)
{
   122b8:	4607      	mov	r7, r0
   122ba:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   122bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   122be:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   122c0:	ad01      	add	r5, sp, #4
   122c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   122c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   122c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   122c8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   122cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   122d0:	4638      	mov	r0, r7
   122d2:	2f00      	cmp	r7, #0
   122d4:	d038      	beq.n	12348 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   122d6:	2c00      	cmp	r4, #0
   122d8:	d038      	beq.n	1234c <tc_aes128_set_encrypt_key+0x98>
   122da:	1f38      	subs	r0, r7, #4
   122dc:	4621      	mov	r1, r4
   122de:	4602      	mov	r2, r0
   122e0:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   122e2:	784b      	ldrb	r3, [r1, #1]
   122e4:	780d      	ldrb	r5, [r1, #0]
   122e6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   122e8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   122ec:	78cd      	ldrb	r5, [r1, #3]
   122ee:	432b      	orrs	r3, r5
   122f0:	788d      	ldrb	r5, [r1, #2]
   122f2:	3104      	adds	r1, #4
   122f4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   122f8:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   122fa:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   122fe:	d1f0      	bne.n	122e2 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12300:	4c14      	ldr	r4, [pc, #80]	; (12354 <tc_aes128_set_encrypt_key+0xa0>)
   12302:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   12304:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   12306:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   12308:	d116      	bne.n	12338 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1230a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1230e:	5ca5      	ldrb	r5, [r4, r2]
   12310:	0e1a      	lsrs	r2, r3, #24
   12312:	5ca2      	ldrb	r2, [r4, r2]
   12314:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   12318:	f3c3 2507 	ubfx	r5, r3, #8, #8
   1231c:	b2db      	uxtb	r3, r3
   1231e:	5d65      	ldrb	r5, [r4, r5]
   12320:	5ce3      	ldrb	r3, [r4, r3]
   12322:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   12326:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1232a:	ad0c      	add	r5, sp, #48	; 0x30
   1232c:	f021 0303 	bic.w	r3, r1, #3
   12330:	442b      	add	r3, r5
   12332:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   12336:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   12338:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   1233c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   1233e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   12340:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   12342:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   12344:	d1de      	bne.n	12304 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   12346:	2001      	movs	r0, #1
}
   12348:	b00d      	add	sp, #52	; 0x34
   1234a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1234c:	4620      	mov	r0, r4
   1234e:	e7fb      	b.n	12348 <tc_aes128_set_encrypt_key+0x94>
   12350:	00023014 	.word	0x00023014
   12354:	00023ba7 	.word	0x00023ba7

00012358 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   12358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1235c:	4615      	mov	r5, r2
   1235e:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   12360:	4606      	mov	r6, r0
   12362:	2800      	cmp	r0, #0
   12364:	d058      	beq.n	12418 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   12366:	2900      	cmp	r1, #0
   12368:	d059      	beq.n	1241e <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1236a:	2a00      	cmp	r2, #0
   1236c:	d059      	beq.n	12422 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1236e:	2310      	movs	r3, #16
   12370:	460a      	mov	r2, r1
   12372:	4668      	mov	r0, sp
   12374:	4619      	mov	r1, r3
   12376:	f00e f8ae 	bl	204d6 <_copy>
	add_round_key(state, s->words);
   1237a:	4629      	mov	r1, r5
   1237c:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   1237e:	4c2a      	ldr	r4, [pc, #168]	; (12428 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   12380:	f00e f8c1 	bl	20506 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   12384:	f105 0710 	add.w	r7, r5, #16
   12388:	46a1      	mov	r9, r4
   1238a:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   1238c:	46e8      	mov	r8, sp
{
   1238e:	466a      	mov	r2, sp
   12390:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   12392:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   12394:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   12396:	5c61      	ldrb	r1, [r4, r1]
   12398:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   1239c:	d1f9      	bne.n	12392 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   1239e:	4668      	mov	r0, sp
   123a0:	f00e f8f6 	bl	20590 <shift_rows>
	mult_row_column(t, s);
   123a4:	4669      	mov	r1, sp
   123a6:	a804      	add	r0, sp, #16
   123a8:	f00e f92b 	bl	20602 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   123ac:	a901      	add	r1, sp, #4
   123ae:	a805      	add	r0, sp, #20
   123b0:	f00e f927 	bl	20602 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   123b4:	a902      	add	r1, sp, #8
   123b6:	a806      	add	r0, sp, #24
   123b8:	f00e f923 	bl	20602 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   123bc:	a903      	add	r1, sp, #12
   123be:	a807      	add	r0, sp, #28
   123c0:	f00e f91f 	bl	20602 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   123c4:	2310      	movs	r3, #16
   123c6:	4619      	mov	r1, r3
   123c8:	eb0d 0203 	add.w	r2, sp, r3
   123cc:	4668      	mov	r0, sp
   123ce:	f00e f882 	bl	204d6 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   123d2:	4639      	mov	r1, r7
   123d4:	4668      	mov	r0, sp
   123d6:	3710      	adds	r7, #16
   123d8:	f00e f895 	bl	20506 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   123dc:	42af      	cmp	r7, r5
   123de:	d1d5      	bne.n	1238c <tc_aes_encrypt+0x34>
   123e0:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   123e2:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   123e6:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   123e8:	f819 3003 	ldrb.w	r3, [r9, r3]
   123ec:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   123f0:	d1f7      	bne.n	123e2 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   123f2:	4668      	mov	r0, sp
   123f4:	f00e f8cc 	bl	20590 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   123f8:	4629      	mov	r1, r5
   123fa:	4668      	mov	r0, sp
   123fc:	f00e f883 	bl	20506 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   12400:	2310      	movs	r3, #16
   12402:	4619      	mov	r1, r3
   12404:	466a      	mov	r2, sp
   12406:	4630      	mov	r0, r6
   12408:	f00e f865 	bl	204d6 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1240c:	4668      	mov	r0, sp
   1240e:	2210      	movs	r2, #16
   12410:	4621      	mov	r1, r4
   12412:	f00e f86d 	bl	204f0 <_set>

	return TC_CRYPTO_SUCCESS;
   12416:	2001      	movs	r0, #1
}
   12418:	b009      	add	sp, #36	; 0x24
   1241a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1241e:	4608      	mov	r0, r1
   12420:	e7fa      	b.n	12418 <tc_aes_encrypt+0xc0>
   12422:	4610      	mov	r0, r2
   12424:	e7f8      	b.n	12418 <tc_aes_encrypt+0xc0>
   12426:	bf00      	nop
   12428:	00023ba7 	.word	0x00023ba7

0001242c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   1242c:	4801      	ldr	r0, [pc, #4]	; (12434 <nrf_cc3xx_platform_abort_init+0x8>)
   1242e:	f00b b9b9 	b.w	1d7a4 <nrf_cc3xx_platform_set_abort>
   12432:	bf00      	nop
   12434:	00023078 	.word	0x00023078

00012438 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12438:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   1243a:	b1d0      	cbz	r0, 12472 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   1243c:	6843      	ldr	r3, [r0, #4]
   1243e:	2b04      	cmp	r3, #4
   12440:	d111      	bne.n	12466 <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12442:	2200      	movs	r2, #0
   12444:	6803      	ldr	r3, [r0, #0]
   12446:	f3bf 8f5b 	dmb	ish
   1244a:	e853 1f00 	ldrex	r1, [r3]
   1244e:	2901      	cmp	r1, #1
   12450:	d103      	bne.n	1245a <mutex_unlock_platform+0x22>
   12452:	e843 2000 	strex	r0, r2, [r3]
   12456:	2800      	cmp	r0, #0
   12458:	d1f7      	bne.n	1244a <mutex_unlock_platform+0x12>
   1245a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1245e:	4807      	ldr	r0, [pc, #28]	; (1247c <mutex_unlock_platform+0x44>)
   12460:	bf08      	it	eq
   12462:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   12464:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12466:	b13b      	cbz	r3, 12478 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   12468:	6800      	ldr	r0, [r0, #0]
   1246a:	f007 ffdb 	bl	1a424 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   1246e:	2000      	movs	r0, #0
   12470:	e7f8      	b.n	12464 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12472:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12476:	e7f5      	b.n	12464 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12478:	4801      	ldr	r0, [pc, #4]	; (12480 <mutex_unlock_platform+0x48>)
   1247a:	e7f3      	b.n	12464 <mutex_unlock_platform+0x2c>
   1247c:	ffff8fe9 	.word	0xffff8fe9
   12480:	ffff8fea 	.word	0xffff8fea

00012484 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12484:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   12486:	4604      	mov	r4, r0
   12488:	b918      	cbnz	r0, 12492 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   1248a:	4b0d      	ldr	r3, [pc, #52]	; (124c0 <mutex_free_platform+0x3c>)
   1248c:	480d      	ldr	r0, [pc, #52]	; (124c4 <mutex_free_platform+0x40>)
   1248e:	685b      	ldr	r3, [r3, #4]
   12490:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   12492:	6861      	ldr	r1, [r4, #4]
   12494:	2908      	cmp	r1, #8
   12496:	d00d      	beq.n	124b4 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12498:	f031 0304 	bics.w	r3, r1, #4
   1249c:	d00a      	beq.n	124b4 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   1249e:	f011 0102 	ands.w	r1, r1, #2
   124a2:	d008      	beq.n	124b6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   124a4:	4808      	ldr	r0, [pc, #32]	; (124c8 <mutex_free_platform+0x44>)
   124a6:	4621      	mov	r1, r4
   124a8:	f007 fcc4 	bl	19e34 <k_mem_slab_free>
        mutex->mutex = NULL;
   124ac:	2300      	movs	r3, #0
   124ae:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   124b0:	2300      	movs	r3, #0
   124b2:	6063      	str	r3, [r4, #4]
}
   124b4:	bd10      	pop	{r4, pc}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   124b6:	6820      	ldr	r0, [r4, #0]
   124b8:	2214      	movs	r2, #20
   124ba:	f010 fbf6 	bl	22caa <memset>
   124be:	e7f7      	b.n	124b0 <mutex_free_platform+0x2c>
   124c0:	20000524 	.word	0x20000524
   124c4:	00023ca7 	.word	0x00023ca7
   124c8:	20001cf0 	.word	0x20001cf0

000124cc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   124cc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   124ce:	4604      	mov	r4, r0
   124d0:	b918      	cbnz	r0, 124da <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   124d2:	4b16      	ldr	r3, [pc, #88]	; (1252c <mutex_init_platform+0x60>)
   124d4:	4816      	ldr	r0, [pc, #88]	; (12530 <mutex_init_platform+0x64>)
   124d6:	685b      	ldr	r3, [r3, #4]
   124d8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   124da:	6863      	ldr	r3, [r4, #4]
   124dc:	2b04      	cmp	r3, #4
   124de:	d023      	beq.n	12528 <mutex_init_platform+0x5c>
   124e0:	2b08      	cmp	r3, #8
   124e2:	d021      	beq.n	12528 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   124e4:	b9cb      	cbnz	r3, 1251a <mutex_init_platform+0x4e>
   124e6:	6823      	ldr	r3, [r4, #0]
   124e8:	b9bb      	cbnz	r3, 1251a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   124ea:	4812      	ldr	r0, [pc, #72]	; (12534 <mutex_init_platform+0x68>)
   124ec:	f04f 32ff 	mov.w	r2, #4294967295
   124f0:	f04f 33ff 	mov.w	r3, #4294967295
   124f4:	4621      	mov	r1, r4
   124f6:	f007 fc31 	bl	19d5c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   124fa:	b908      	cbnz	r0, 12500 <mutex_init_platform+0x34>
   124fc:	6823      	ldr	r3, [r4, #0]
   124fe:	b91b      	cbnz	r3, 12508 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   12500:	4b0a      	ldr	r3, [pc, #40]	; (1252c <mutex_init_platform+0x60>)
   12502:	480d      	ldr	r0, [pc, #52]	; (12538 <mutex_init_platform+0x6c>)
   12504:	685b      	ldr	r3, [r3, #4]
   12506:	4798      	blx	r3
   12508:	6820      	ldr	r0, [r4, #0]
   1250a:	2214      	movs	r2, #20
   1250c:	2100      	movs	r1, #0
   1250e:	f010 fbcc 	bl	22caa <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   12512:	6863      	ldr	r3, [r4, #4]
   12514:	f043 0302 	orr.w	r3, r3, #2
   12518:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   1251a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   1251c:	f010 fa4c 	bl	229b8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   12520:	6863      	ldr	r3, [r4, #4]
   12522:	f043 0301 	orr.w	r3, r3, #1
   12526:	6063      	str	r3, [r4, #4]
}
   12528:	bd10      	pop	{r4, pc}
   1252a:	bf00      	nop
   1252c:	20000524 	.word	0x20000524
   12530:	00023ca7 	.word	0x00023ca7
   12534:	20001cf0 	.word	0x20001cf0
   12538:	00023ccd 	.word	0x00023ccd

0001253c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1253c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   1253e:	b308      	cbz	r0, 12584 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
   12540:	6843      	ldr	r3, [r0, #4]
   12542:	2b04      	cmp	r3, #4
   12544:	d110      	bne.n	12568 <mutex_lock_platform+0x2c>
   12546:	2201      	movs	r2, #1
   12548:	6803      	ldr	r3, [r0, #0]
   1254a:	f3bf 8f5b 	dmb	ish
   1254e:	e853 1f00 	ldrex	r1, [r3]
   12552:	2900      	cmp	r1, #0
   12554:	d103      	bne.n	1255e <mutex_lock_platform+0x22>
   12556:	e843 2000 	strex	r0, r2, [r3]
   1255a:	2800      	cmp	r0, #0
   1255c:	d1f7      	bne.n	1254e <mutex_lock_platform+0x12>
   1255e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12562:	d10b      	bne.n	1257c <mutex_lock_platform+0x40>
   12564:	2000      	movs	r0, #0
}
   12566:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12568:	b153      	cbz	r3, 12580 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   1256a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1256c:	f04f 32ff 	mov.w	r2, #4294967295
   12570:	f04f 33ff 	mov.w	r3, #4294967295
   12574:	f007 fe56 	bl	1a224 <z_impl_k_mutex_lock>
        if (ret == 0) {
   12578:	2800      	cmp	r0, #0
   1257a:	d0f3      	beq.n	12564 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1257c:	4803      	ldr	r0, [pc, #12]	; (1258c <mutex_lock_platform+0x50>)
   1257e:	e7f2      	b.n	12566 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12580:	4803      	ldr	r0, [pc, #12]	; (12590 <mutex_lock_platform+0x54>)
   12582:	e7f0      	b.n	12566 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12584:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12588:	e7ed      	b.n	12566 <mutex_lock_platform+0x2a>
   1258a:	bf00      	nop
   1258c:	ffff8fe9 	.word	0xffff8fe9
   12590:	ffff8fea 	.word	0xffff8fea

00012594 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   12594:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   12596:	4906      	ldr	r1, [pc, #24]	; (125b0 <nrf_cc3xx_platform_mutex_init+0x1c>)
   12598:	4806      	ldr	r0, [pc, #24]	; (125b4 <nrf_cc3xx_platform_mutex_init+0x20>)
   1259a:	2340      	movs	r3, #64	; 0x40
   1259c:	2214      	movs	r2, #20
   1259e:	f010 f9dd 	bl	2295c <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   125a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   125a6:	4904      	ldr	r1, [pc, #16]	; (125b8 <nrf_cc3xx_platform_mutex_init+0x24>)
   125a8:	4804      	ldr	r0, [pc, #16]	; (125bc <nrf_cc3xx_platform_mutex_init+0x28>)
   125aa:	f00b b9b3 	b.w	1d914 <nrf_cc3xx_platform_set_mutexes>
   125ae:	bf00      	nop
   125b0:	20001d10 	.word	0x20001d10
   125b4:	20001cf0 	.word	0x20001cf0
   125b8:	00023090 	.word	0x00023090
   125bc:	00023080 	.word	0x00023080

000125c0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   125c0:	4901      	ldr	r1, [pc, #4]	; (125c8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   125c2:	2210      	movs	r2, #16
	str	r2, [r1]
   125c4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   125c6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   125c8:	e000ed10 	.word	0xe000ed10

000125cc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   125cc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   125ce:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   125d0:	f380 8811 	msr	BASEPRI, r0
	isb
   125d4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   125d8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   125dc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   125de:	b662      	cpsie	i
	isb
   125e0:	f3bf 8f6f 	isb	sy

	bx	lr
   125e4:	4770      	bx	lr
   125e6:	bf00      	nop

000125e8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   125e8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   125ea:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   125ec:	f381 8811 	msr	BASEPRI, r1

	wfe
   125f0:	bf20      	wfe

	msr	BASEPRI, r0
   125f2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   125f6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   125f8:	4770      	bx	lr
   125fa:	bf00      	nop

000125fc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   125fc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   125fe:	2b00      	cmp	r3, #0
   12600:	db08      	blt.n	12614 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12602:	2201      	movs	r2, #1
   12604:	f000 001f 	and.w	r0, r0, #31
   12608:	fa02 f000 	lsl.w	r0, r2, r0
   1260c:	095b      	lsrs	r3, r3, #5
   1260e:	4a02      	ldr	r2, [pc, #8]	; (12618 <arch_irq_enable+0x1c>)
   12610:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   12614:	4770      	bx	lr
   12616:	bf00      	nop
   12618:	e000e100 	.word	0xe000e100

0001261c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   1261c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1261e:	2b00      	cmp	r3, #0
   12620:	db0d      	blt.n	1263e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12622:	2201      	movs	r2, #1
   12624:	095b      	lsrs	r3, r3, #5
   12626:	f000 001f 	and.w	r0, r0, #31
   1262a:	fa02 f000 	lsl.w	r0, r2, r0
   1262e:	3320      	adds	r3, #32
   12630:	4a03      	ldr	r2, [pc, #12]	; (12640 <arch_irq_disable+0x24>)
   12632:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12636:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1263a:	f3bf 8f6f 	isb	sy
}
   1263e:	4770      	bx	lr
   12640:	e000e100 	.word	0xe000e100

00012644 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   12644:	4b05      	ldr	r3, [pc, #20]	; (1265c <arch_irq_is_enabled+0x18>)
   12646:	0942      	lsrs	r2, r0, #5
   12648:	f000 001f 	and.w	r0, r0, #31
   1264c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12650:	2301      	movs	r3, #1
   12652:	fa03 f000 	lsl.w	r0, r3, r0
}
   12656:	4010      	ands	r0, r2
   12658:	4770      	bx	lr
   1265a:	bf00      	nop
   1265c:	e000e100 	.word	0xe000e100

00012660 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   12660:	07d3      	lsls	r3, r2, #31
{
   12662:	b570      	push	{r4, r5, r6, lr}
   12664:	4605      	mov	r5, r0
   12666:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   12668:	d425      	bmi.n	126b6 <z_arm_irq_priority_set+0x56>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   1266a:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1266c:	2c07      	cmp	r4, #7
   1266e:	d90f      	bls.n	12690 <z_arm_irq_priority_set+0x30>
   12670:	4a12      	ldr	r2, [pc, #72]	; (126bc <z_arm_irq_priority_set+0x5c>)
   12672:	4913      	ldr	r1, [pc, #76]	; (126c0 <z_arm_irq_priority_set+0x60>)
   12674:	4813      	ldr	r0, [pc, #76]	; (126c4 <z_arm_irq_priority_set+0x64>)
   12676:	2358      	movs	r3, #88	; 0x58
   12678:	f00d fcab 	bl	1ffd2 <printk>
   1267c:	4812      	ldr	r0, [pc, #72]	; (126c8 <z_arm_irq_priority_set+0x68>)
   1267e:	4631      	mov	r1, r6
   12680:	2306      	movs	r3, #6
   12682:	462a      	mov	r2, r5
   12684:	f00d fca5 	bl	1ffd2 <printk>
   12688:	480c      	ldr	r0, [pc, #48]	; (126bc <z_arm_irq_priority_set+0x5c>)
   1268a:	2158      	movs	r1, #88	; 0x58
   1268c:	f00d fefb 	bl	20486 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12690:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   12692:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12694:	bfac      	ite	ge
   12696:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1269a:	4b0c      	ldrlt	r3, [pc, #48]	; (126cc <z_arm_irq_priority_set+0x6c>)
   1269c:	ea4f 1444 	mov.w	r4, r4, lsl #5
   126a0:	bfb8      	it	lt
   126a2:	f005 050f 	andlt.w	r5, r5, #15
   126a6:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   126a8:	bfaa      	itet	ge
   126aa:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   126ae:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   126b0:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   126b4:	bd70      	pop	{r4, r5, r6, pc}
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   126b6:	2400      	movs	r4, #0
   126b8:	e7ea      	b.n	12690 <z_arm_irq_priority_set+0x30>
   126ba:	bf00      	nop
   126bc:	00023cfa 	.word	0x00023cfa
   126c0:	00023d30 	.word	0x00023d30
   126c4:	000237c9 	.word	0x000237c9
   126c8:	00023d4b 	.word	0x00023d4b
   126cc:	e000ed14 	.word	0xe000ed14

000126d0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   126d0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   126d2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   126d4:	4b04      	ldr	r3, [pc, #16]	; (126e8 <_arch_isr_direct_pm+0x18>)
   126d6:	6998      	ldr	r0, [r3, #24]
   126d8:	b118      	cbz	r0, 126e2 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   126da:	2200      	movs	r2, #0
   126dc:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit(idle_val);
   126de:	f010 f964 	bl	229aa <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   126e2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   126e4:	bd08      	pop	{r3, pc}
   126e6:	bf00      	nop
   126e8:	20002444 	.word	0x20002444

000126ec <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   126ec:	bf30      	wfi
    b z_SysNmiOnReset
   126ee:	f7ff bffd 	b.w	126ec <z_SysNmiOnReset>
   126f2:	bf00      	nop

000126f4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   126f4:	4a0b      	ldr	r2, [pc, #44]	; (12724 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   126f6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   126f8:	4b0b      	ldr	r3, [pc, #44]	; (12728 <z_arm_prep_c+0x34>)
   126fa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   126fe:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12700:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12704:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12708:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1270c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   12714:	f007 f93a 	bl	1998c <z_bss_zero>
	z_data_copy();
   12718:	f00a f844 	bl	1c7a4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1271c:	f000 fa2c 	bl	12b78 <z_arm_interrupt_init>
	z_cstart();
   12720:	f007 f93e 	bl	199a0 <z_cstart>
   12724:	00001000 	.word	0x00001000
   12728:	e000ed00 	.word	0xe000ed00

0001272c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1272c:	4a09      	ldr	r2, [pc, #36]	; (12754 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1272e:	490a      	ldr	r1, [pc, #40]	; (12758 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   12730:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   12732:	6809      	ldr	r1, [r1, #0]
   12734:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12736:	4909      	ldr	r1, [pc, #36]	; (1275c <arch_swap+0x30>)
	_current->arch.basepri = key;
   12738:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1273a:	684b      	ldr	r3, [r1, #4]
   1273c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12740:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   12742:	2300      	movs	r3, #0
   12744:	f383 8811 	msr	BASEPRI, r3
   12748:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1274c:	6893      	ldr	r3, [r2, #8]
}
   1274e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   12750:	4770      	bx	lr
   12752:	bf00      	nop
   12754:	20002444 	.word	0x20002444
   12758:	000234a8 	.word	0x000234a8
   1275c:	e000ed00 	.word	0xe000ed00

00012760 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   12760:	4912      	ldr	r1, [pc, #72]	; (127ac <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   12762:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   12764:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   12768:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1276a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1276e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12772:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   12774:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12778:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1277c:	4f0c      	ldr	r7, [pc, #48]	; (127b0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1277e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   12782:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   12784:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   12786:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   12788:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1278a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1278c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1278e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   12792:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   12794:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   12796:	f000 fa85 	bl	12ca4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1279a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1279e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   127a2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   127a6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   127aa:	4770      	bx	lr
    ldr r1, =_kernel
   127ac:	20002444 	.word	0x20002444
    ldr v4, =_SCS_ICSR
   127b0:	e000ed04 	.word	0xe000ed04

000127b4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   127b4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   127b8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   127ba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   127be:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   127c2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   127c4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   127c8:	2902      	cmp	r1, #2
    beq _oops
   127ca:	d0ff      	beq.n	127cc <_oops>

000127cc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   127cc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   127ce:	f00e f85d 	bl	2088c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   127d2:	bd01      	pop	{r0, pc}

000127d4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   127d4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   127d8:	9b00      	ldr	r3, [sp, #0]
   127da:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   127de:	490a      	ldr	r1, [pc, #40]	; (12808 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   127e0:	9b01      	ldr	r3, [sp, #4]
   127e2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   127e6:	9b02      	ldr	r3, [sp, #8]
   127e8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   127ec:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   127f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   127f4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   127f8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   127fc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   127fe:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   12800:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   12802:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12804:	4770      	bx	lr
   12806:	bf00      	nop
   12808:	000200af 	.word	0x000200af

0001280c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   1280c:	4a0b      	ldr	r2, [pc, #44]	; (1283c <z_check_thread_stack_fail+0x30>)
{
   1280e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   12810:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   12812:	b190      	cbz	r0, 1283a <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   12814:	f113 0f16 	cmn.w	r3, #22
   12818:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1281a:	d005      	beq.n	12828 <z_check_thread_stack_fail+0x1c>
   1281c:	f1a0 0220 	sub.w	r2, r0, #32
   12820:	429a      	cmp	r2, r3
   12822:	d806      	bhi.n	12832 <z_check_thread_stack_fail+0x26>
   12824:	4283      	cmp	r3, r0
   12826:	d204      	bcs.n	12832 <z_check_thread_stack_fail+0x26>
   12828:	4281      	cmp	r1, r0
   1282a:	bf2c      	ite	cs
   1282c:	2100      	movcs	r1, #0
   1282e:	2101      	movcc	r1, #1
   12830:	e000      	b.n	12834 <z_check_thread_stack_fail+0x28>
   12832:	2100      	movs	r1, #0
   12834:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   12836:	bf08      	it	eq
   12838:	2000      	moveq	r0, #0
}
   1283a:	4770      	bx	lr
   1283c:	20002444 	.word	0x20002444

00012840 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   12840:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   12842:	4b09      	ldr	r3, [pc, #36]	; (12868 <arch_switch_to_main_thread+0x28>)
   12844:	6098      	str	r0, [r3, #8]
{
   12846:	460d      	mov	r5, r1
   12848:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1284a:	f000 fa2b 	bl	12ca4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1284e:	4620      	mov	r0, r4
   12850:	f385 8809 	msr	PSP, r5
   12854:	2100      	movs	r1, #0
   12856:	b663      	cpsie	if
   12858:	f381 8811 	msr	BASEPRI, r1
   1285c:	f3bf 8f6f 	isb	sy
   12860:	2200      	movs	r2, #0
   12862:	2300      	movs	r3, #0
   12864:	f00d fc23 	bl	200ae <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   12868:	20002444 	.word	0x20002444

0001286c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1286c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1286e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12870:	4a0b      	ldr	r2, [pc, #44]	; (128a0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   12872:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   12874:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   12876:	bf1e      	ittt	ne
	movne	r1, #0
   12878:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1287a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   1287c:	f010 f895 	blne	229aa <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12880:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   12882:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   12886:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1288a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1288e:	4905      	ldr	r1, [pc, #20]	; (128a4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   12890:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   12892:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   12894:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   12896:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1289a:	4903      	ldr	r1, [pc, #12]	; (128a8 <_isr_wrapper+0x3c>)
	bx r1
   1289c:	4708      	bx	r1
   1289e:	0000      	.short	0x0000
	ldr r2, =_kernel
   128a0:	20002444 	.word	0x20002444
	ldr r1, =_sw_isr_table
   128a4:	00022e08 	.word	0x00022e08
	ldr r1, =z_arm_int_exit
   128a8:	000128ad 	.word	0x000128ad

000128ac <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   128ac:	4b04      	ldr	r3, [pc, #16]	; (128c0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   128ae:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   128b0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   128b2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   128b4:	d003      	beq.n	128be <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   128b6:	4903      	ldr	r1, [pc, #12]	; (128c4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   128b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   128bc:	600a      	str	r2, [r1, #0]

000128be <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   128be:	4770      	bx	lr
	ldr r3, =_kernel
   128c0:	20002444 	.word	0x20002444
	ldr r1, =_SCS_ICSR
   128c4:	e000ed04 	.word	0xe000ed04

000128c8 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   128c8:	4b23      	ldr	r3, [pc, #140]	; (12958 <mem_manage_fault+0x90>)
{
   128ca:	b570      	push	{r4, r5, r6, lr}
   128cc:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   128ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   128d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   128d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   128d4:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   128d6:	0790      	lsls	r0, r2, #30
   128d8:	d51a      	bpl.n	12910 <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   128da:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   128dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   128de:	0612      	lsls	r2, r2, #24
   128e0:	d516      	bpl.n	12910 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   128e2:	b119      	cbz	r1, 128ec <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   128e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   128e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   128ea:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   128ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   128ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   128f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   128f2:	06d6      	lsls	r6, r2, #27
   128f4:	d40f      	bmi.n	12916 <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   128f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   128f8:	0799      	lsls	r1, r3, #30
   128fa:	d40c      	bmi.n	12916 <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   128fc:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   128fe:	4a16      	ldr	r2, [pc, #88]	; (12958 <mem_manage_fault+0x90>)
   12900:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12902:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   12906:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   12908:	2300      	movs	r3, #0
   1290a:	702b      	strb	r3, [r5, #0]

	return reason;
}
   1290c:	4620      	mov	r0, r4
   1290e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
   12910:	f06f 0015 	mvn.w	r0, #21
   12914:	e7ea      	b.n	128ec <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   12916:	4e10      	ldr	r6, [pc, #64]	; (12958 <mem_manage_fault+0x90>)
   12918:	6873      	ldr	r3, [r6, #4]
   1291a:	051a      	lsls	r2, r3, #20
   1291c:	d5ee      	bpl.n	128fc <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   1291e:	4621      	mov	r1, r4
   12920:	f7ff ff74 	bl	1280c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   12924:	4604      	mov	r4, r0
   12926:	b118      	cbz	r0, 12930 <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   12928:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   1292c:	2402      	movs	r4, #2
   1292e:	e7e6      	b.n	128fe <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   12930:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   12932:	06db      	lsls	r3, r3, #27
   12934:	d5e2      	bpl.n	128fc <mem_manage_fault+0x34>
   12936:	4a09      	ldr	r2, [pc, #36]	; (1295c <mem_manage_fault+0x94>)
   12938:	4909      	ldr	r1, [pc, #36]	; (12960 <mem_manage_fault+0x98>)
   1293a:	480a      	ldr	r0, [pc, #40]	; (12964 <mem_manage_fault+0x9c>)
   1293c:	f240 1349 	movw	r3, #329	; 0x149
   12940:	f00d fb47 	bl	1ffd2 <printk>
   12944:	4808      	ldr	r0, [pc, #32]	; (12968 <mem_manage_fault+0xa0>)
   12946:	f00d fb44 	bl	1ffd2 <printk>
   1294a:	4804      	ldr	r0, [pc, #16]	; (1295c <mem_manage_fault+0x94>)
   1294c:	f240 1149 	movw	r1, #329	; 0x149
   12950:	f00d fd99 	bl	20486 <assert_post_action>
   12954:	e7d3      	b.n	128fe <mem_manage_fault+0x36>
   12956:	bf00      	nop
   12958:	e000ed00 	.word	0xe000ed00
   1295c:	00023d8b 	.word	0x00023d8b
   12960:	00023dc5 	.word	0x00023dc5
   12964:	000237c9 	.word	0x000237c9
   12968:	00023e0f 	.word	0x00023e0f

0001296c <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1296c:	4b0d      	ldr	r3, [pc, #52]	; (129a4 <bus_fault.isra.0+0x38>)
   1296e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   12970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   12972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12974:	0592      	lsls	r2, r2, #22
   12976:	d508      	bpl.n	1298a <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   12978:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1297a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1297c:	0412      	lsls	r2, r2, #16
   1297e:	d504      	bpl.n	1298a <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   12980:	b118      	cbz	r0, 1298a <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   12982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12984:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   12988:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1298a:	4b06      	ldr	r3, [pc, #24]	; (129a4 <bus_fault.isra.0+0x38>)
   1298c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1298e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12990:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12992:	bf58      	it	pl
   12994:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12996:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   12998:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1299a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   1299e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   129a0:	7008      	strb	r0, [r1, #0]

	return reason;
}
   129a2:	4770      	bx	lr
   129a4:	e000ed00 	.word	0xe000ed00

000129a8 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   129a8:	4b07      	ldr	r3, [pc, #28]	; (129c8 <usage_fault.isra.0+0x20>)
   129aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   129ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   129ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   129b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   129b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   129b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   129b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   129b8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   129bc:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   129c0:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   129c2:	2000      	movs	r0, #0
   129c4:	4770      	bx	lr
   129c6:	bf00      	nop
   129c8:	e000ed00 	.word	0xe000ed00

000129cc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   129cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   129ce:	4b57      	ldr	r3, [pc, #348]	; (12b2c <z_arm_fault+0x160>)
   129d0:	685c      	ldr	r4, [r3, #4]
{
   129d2:	b08b      	sub	sp, #44	; 0x2c
   129d4:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   129d6:	f3c4 0408 	ubfx	r4, r4, #0, #9
   129da:	2600      	movs	r6, #0
   129dc:	f386 8811 	msr	BASEPRI, r6
   129e0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   129e4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   129e8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   129ec:	d108      	bne.n	12a00 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   129ee:	f002 030c 	and.w	r3, r2, #12
   129f2:	2b08      	cmp	r3, #8
   129f4:	d004      	beq.n	12a00 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   129f6:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
   129f8:	bf5c      	itt	pl
   129fa:	4605      	movpl	r5, r0
			*nested_exc = true;
   129fc:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   129fe:	b97d      	cbnz	r5, 12a20 <z_arm_fault+0x54>
   12a00:	4a4b      	ldr	r2, [pc, #300]	; (12b30 <z_arm_fault+0x164>)
   12a02:	494c      	ldr	r1, [pc, #304]	; (12b34 <z_arm_fault+0x168>)
   12a04:	484c      	ldr	r0, [pc, #304]	; (12b38 <z_arm_fault+0x16c>)
   12a06:	f240 33f2 	movw	r3, #1010	; 0x3f2
   12a0a:	f00d fae2 	bl	1ffd2 <printk>
   12a0e:	484b      	ldr	r0, [pc, #300]	; (12b3c <z_arm_fault+0x170>)
   12a10:	f00d fadf 	bl	1ffd2 <printk>
   12a14:	4846      	ldr	r0, [pc, #280]	; (12b30 <z_arm_fault+0x164>)
   12a16:	f240 31f2 	movw	r1, #1010	; 0x3f2
   12a1a:	f00d fd34 	bl	20486 <assert_post_action>
   12a1e:	2500      	movs	r5, #0
	*recoverable = false;
   12a20:	2300      	movs	r3, #0
   12a22:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   12a26:	1ee3      	subs	r3, r4, #3
   12a28:	2b03      	cmp	r3, #3
   12a2a:	d878      	bhi.n	12b1e <z_arm_fault+0x152>
   12a2c:	e8df f003 	tbb	[pc, r3]
   12a30:	4f736f02 	.word	0x4f736f02
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12a34:	4b3d      	ldr	r3, [pc, #244]	; (12b2c <z_arm_fault+0x160>)
   12a36:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   12a38:	f014 0402 	ands.w	r4, r4, #2
   12a3c:	d16f      	bne.n	12b1e <z_arm_fault+0x152>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   12a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12a40:	2a00      	cmp	r2, #0
   12a42:	db18      	blt.n	12a76 <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   12a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12a46:	005b      	lsls	r3, r3, #1
   12a48:	d554      	bpl.n	12af4 <z_arm_fault+0x128>
	uint16_t fault_insn = *(ret_addr - 1);
   12a4a:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   12a4c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   12a50:	f64d 7302 	movw	r3, #57090	; 0xdf02
   12a54:	429a      	cmp	r2, r3
   12a56:	d00d      	beq.n	12a74 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
   12a58:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   12a5c:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   12a60:	781b      	ldrb	r3, [r3, #0]
   12a62:	b33b      	cbz	r3, 12ab4 <z_arm_fault+0xe8>
			reason = mem_manage_fault(esf, 1, recoverable);
   12a64:	f10d 0207 	add.w	r2, sp, #7
   12a68:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   12a6a:	4628      	mov	r0, r5
   12a6c:	f7ff ff2c 	bl	128c8 <mem_manage_fault>
		reason = usage_fault(esf);
   12a70:	4604      	mov	r4, r0
		break;
   12a72:	e000      	b.n	12a76 <z_arm_fault+0xaa>
			reason = esf->basic.r0;
   12a74:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   12a76:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a7a:	b9cb      	cbnz	r3, 12ab0 <z_arm_fault+0xe4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   12a7c:	aa02      	add	r2, sp, #8
   12a7e:	f105 0720 	add.w	r7, r5, #32
   12a82:	6828      	ldr	r0, [r5, #0]
   12a84:	6869      	ldr	r1, [r5, #4]
   12a86:	4613      	mov	r3, r2
   12a88:	c303      	stmia	r3!, {r0, r1}
   12a8a:	3508      	adds	r5, #8
   12a8c:	42bd      	cmp	r5, r7
   12a8e:	461a      	mov	r2, r3
   12a90:	d1f7      	bne.n	12a82 <z_arm_fault+0xb6>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   12a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12a94:	2e00      	cmp	r6, #0
   12a96:	d044      	beq.n	12b22 <z_arm_fault+0x156>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   12a98:	f3c3 0208 	ubfx	r2, r3, #0, #9
   12a9c:	b922      	cbnz	r2, 12aa8 <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   12a9e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   12aa2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12aa6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   12aa8:	a902      	add	r1, sp, #8
   12aaa:	4620      	mov	r0, r4
   12aac:	f00d feec 	bl	20888 <z_arm_fatal_error>
}
   12ab0:	b00b      	add	sp, #44	; 0x2c
   12ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   12ab4:	4b22      	ldr	r3, [pc, #136]	; (12b40 <z_arm_fault+0x174>)
   12ab6:	781b      	ldrb	r3, [r3, #0]
   12ab8:	b12b      	cbz	r3, 12ac6 <z_arm_fault+0xfa>
			reason = bus_fault(esf, 1, recoverable);
   12aba:	f10d 0107 	add.w	r1, sp, #7
   12abe:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   12ac0:	f7ff ff54 	bl	1296c <bus_fault.isra.0>
   12ac4:	e7d4      	b.n	12a70 <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
   12ac6:	4b1f      	ldr	r3, [pc, #124]	; (12b44 <z_arm_fault+0x178>)
   12ac8:	881b      	ldrh	r3, [r3, #0]
   12aca:	b29b      	uxth	r3, r3
   12acc:	b113      	cbz	r3, 12ad4 <z_arm_fault+0x108>
		reason = usage_fault(esf);
   12ace:	f7ff ff6b 	bl	129a8 <usage_fault.isra.0>
   12ad2:	e7cd      	b.n	12a70 <z_arm_fault+0xa4>
			__ASSERT(0,
   12ad4:	491c      	ldr	r1, [pc, #112]	; (12b48 <z_arm_fault+0x17c>)
   12ad6:	4a16      	ldr	r2, [pc, #88]	; (12b30 <z_arm_fault+0x164>)
   12ad8:	4817      	ldr	r0, [pc, #92]	; (12b38 <z_arm_fault+0x16c>)
   12ada:	f240 23c3 	movw	r3, #707	; 0x2c3
   12ade:	f00d fa78 	bl	1ffd2 <printk>
   12ae2:	481a      	ldr	r0, [pc, #104]	; (12b4c <z_arm_fault+0x180>)
   12ae4:	f00d fa75 	bl	1ffd2 <printk>
   12ae8:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
   12aec:	4810      	ldr	r0, [pc, #64]	; (12b30 <z_arm_fault+0x164>)
   12aee:	f00d fcca 	bl	20486 <assert_post_action>
   12af2:	e7c0      	b.n	12a76 <z_arm_fault+0xaa>
   12af4:	4914      	ldr	r1, [pc, #80]	; (12b48 <z_arm_fault+0x17c>)
   12af6:	4a0e      	ldr	r2, [pc, #56]	; (12b30 <z_arm_fault+0x164>)
   12af8:	480f      	ldr	r0, [pc, #60]	; (12b38 <z_arm_fault+0x16c>)
   12afa:	f240 23c7 	movw	r3, #711	; 0x2c7
   12afe:	f00d fa68 	bl	1ffd2 <printk>
   12b02:	4813      	ldr	r0, [pc, #76]	; (12b50 <z_arm_fault+0x184>)
   12b04:	f00d fa65 	bl	1ffd2 <printk>
   12b08:	f240 21c7 	movw	r1, #711	; 0x2c7
   12b0c:	e7ee      	b.n	12aec <z_arm_fault+0x120>
		reason = mem_manage_fault(esf, 0, recoverable);
   12b0e:	f10d 0207 	add.w	r2, sp, #7
   12b12:	2100      	movs	r1, #0
   12b14:	e7a9      	b.n	12a6a <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
   12b16:	f10d 0107 	add.w	r1, sp, #7
   12b1a:	2000      	movs	r0, #0
   12b1c:	e7d0      	b.n	12ac0 <z_arm_fault+0xf4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12b1e:	2400      	movs	r4, #0
   12b20:	e7a9      	b.n	12a76 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12b22:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   12b26:	f023 0301 	bic.w	r3, r3, #1
   12b2a:	e7bc      	b.n	12aa6 <z_arm_fault+0xda>
   12b2c:	e000ed00 	.word	0xe000ed00
   12b30:	00023d8b 	.word	0x00023d8b
   12b34:	00023e32 	.word	0x00023e32
   12b38:	000237c9 	.word	0x000237c9
   12b3c:	00023e45 	.word	0x00023e45
   12b40:	e000ed29 	.word	0xe000ed29
   12b44:	e000ed2a 	.word	0xe000ed2a
   12b48:	00025541 	.word	0x00025541
   12b4c:	00023e83 	.word	0x00023e83
   12b50:	00023ea7 	.word	0x00023ea7

00012b54 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   12b54:	4a02      	ldr	r2, [pc, #8]	; (12b60 <z_arm_fault_init+0xc>)
   12b56:	6953      	ldr	r3, [r2, #20]
   12b58:	f043 0310 	orr.w	r3, r3, #16
   12b5c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   12b5e:	4770      	bx	lr
   12b60:	e000ed00 	.word	0xe000ed00

00012b64 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   12b64:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   12b68:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   12b6c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   12b6e:	4672      	mov	r2, lr
	bl z_arm_fault
   12b70:	f7ff ff2c 	bl	129cc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   12b74:	bd01      	pop	{r0, pc}
   12b76:	bf00      	nop

00012b78 <z_arm_interrupt_init>:
   12b78:	4804      	ldr	r0, [pc, #16]	; (12b8c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   12b7a:	2300      	movs	r3, #0
   12b7c:	2140      	movs	r1, #64	; 0x40
   12b7e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12b80:	3301      	adds	r3, #1
   12b82:	2b30      	cmp	r3, #48	; 0x30
   12b84:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   12b88:	d1f9      	bne.n	12b7e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   12b8a:	4770      	bx	lr
   12b8c:	e000e100 	.word	0xe000e100

00012b90 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   12b90:	2000      	movs	r0, #0
    msr CONTROL, r0
   12b92:	f380 8814 	msr	CONTROL, r0
    isb
   12b96:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   12b9a:	f010 f8a3 	bl	22ce4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   12b9e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   12ba0:	490d      	ldr	r1, [pc, #52]	; (12bd8 <__start+0x48>)
    str r0, [r1]
   12ba2:	6008      	str	r0, [r1, #0]
    dsb
   12ba4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12ba8:	480c      	ldr	r0, [pc, #48]	; (12bdc <__start+0x4c>)
    msr msp, r0
   12baa:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   12bae:	f000 f829 	bl	12c04 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12bb2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   12bb4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12bb8:	4809      	ldr	r0, [pc, #36]	; (12be0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12bba:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   12bbe:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12bc0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12bc4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12bc8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   12bca:	4308      	orrs	r0, r1
    msr CONTROL, r0
   12bcc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12bd0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   12bd4:	f7ff fd8e 	bl	126f4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   12bd8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12bdc:	20006700 	.word	0x20006700
    ldr r0, =z_interrupt_stacks
   12be0:	20006880 	.word	0x20006880

00012be4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   12be4:	4a06      	ldr	r2, [pc, #24]	; (12c00 <z_arm_clear_arm_mpu_config+0x1c>)
   12be6:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   12be8:	2300      	movs	r3, #0
	int num_regions =
   12bea:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   12bee:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   12bf0:	428b      	cmp	r3, r1
   12bf2:	d100      	bne.n	12bf6 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   12bf4:	4770      	bx	lr
  MPU->RNR = rnr;
   12bf6:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   12bf8:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   12bfa:	3301      	adds	r3, #1
   12bfc:	e7f8      	b.n	12bf0 <z_arm_clear_arm_mpu_config+0xc>
   12bfe:	bf00      	nop
   12c00:	e000ed90 	.word	0xe000ed90

00012c04 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   12c04:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   12c06:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   12c08:	2300      	movs	r3, #0
   12c0a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   12c0e:	f7ff ffe9 	bl	12be4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   12c12:	4b14      	ldr	r3, [pc, #80]	; (12c64 <z_arm_init_arch_hw_at_boot+0x60>)
   12c14:	f04f 32ff 	mov.w	r2, #4294967295
   12c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   12c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   12c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   12c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   12c28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   12c2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   12c30:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   12c34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   12c38:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   12c3c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   12c40:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   12c44:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   12c48:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   12c4c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   12c50:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   12c54:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   12c58:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   12c5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12c5e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   12c62:	bd08      	pop	{r3, pc}
   12c64:	e000e100 	.word	0xe000e100

00012c68 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   12c68:	4b06      	ldr	r3, [pc, #24]	; (12c84 <z_impl_k_thread_abort+0x1c>)
   12c6a:	689b      	ldr	r3, [r3, #8]
   12c6c:	4283      	cmp	r3, r0
   12c6e:	d107      	bne.n	12c80 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12c70:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   12c74:	b123      	cbz	r3, 12c80 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12c76:	4a04      	ldr	r2, [pc, #16]	; (12c88 <z_impl_k_thread_abort+0x20>)
   12c78:	6853      	ldr	r3, [r2, #4]
   12c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12c7e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   12c80:	f009 bc72 	b.w	1c568 <z_thread_abort>
   12c84:	20002444 	.word	0x20002444
   12c88:	e000ed00 	.word	0xe000ed00

00012c8c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   12c8c:	4b02      	ldr	r3, [pc, #8]	; (12c98 <z_arm_configure_static_mpu_regions+0xc>)
   12c8e:	4a03      	ldr	r2, [pc, #12]	; (12c9c <z_arm_configure_static_mpu_regions+0x10>)
   12c90:	4803      	ldr	r0, [pc, #12]	; (12ca0 <z_arm_configure_static_mpu_regions+0x14>)
   12c92:	2101      	movs	r1, #1
   12c94:	f000 b868 	b.w	12d68 <arm_core_mpu_configure_static_mpu_regions>
   12c98:	20040000 	.word	0x20040000
   12c9c:	20000000 	.word	0x20000000
   12ca0:	000230a4 	.word	0x000230a4

00012ca4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   12ca4:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   12ca6:	4b05      	ldr	r3, [pc, #20]	; (12cbc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   12ca8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   12caa:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   12cac:	4a04      	ldr	r2, [pc, #16]	; (12cc0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   12cae:	2120      	movs	r1, #32
   12cb0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   12cb4:	4618      	mov	r0, r3
   12cb6:	2101      	movs	r1, #1
   12cb8:	f000 b87e 	b.w	12db8 <arm_core_mpu_configure_dynamic_mpu_regions>
   12cbc:	20002210 	.word	0x20002210
   12cc0:	150b0000 	.word	0x150b0000

00012cc4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   12cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   12cc6:	4f1e      	ldr	r7, [pc, #120]	; (12d40 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   12cc8:	2600      	movs	r6, #0
   12cca:	428e      	cmp	r6, r1
   12ccc:	db01      	blt.n	12cd2 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   12cce:	4610      	mov	r0, r2
   12cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   12cd2:	6844      	ldr	r4, [r0, #4]
   12cd4:	b384      	cbz	r4, 12d38 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
   12cd6:	b153      	cbz	r3, 12cee <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   12cd8:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   12cdc:	ea14 0f0c 	tst.w	r4, ip
   12ce0:	d118      	bne.n	12d14 <mpu_configure_regions+0x50>
		&&
   12ce2:	2c1f      	cmp	r4, #31
   12ce4:	d916      	bls.n	12d14 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   12ce6:	6805      	ldr	r5, [r0, #0]
		&&
   12ce8:	ea1c 0f05 	tst.w	ip, r5
   12cec:	d112      	bne.n	12d14 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   12cee:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   12cf0:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   12cf2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   12cf6:	b2d2      	uxtb	r2, r2
   12cf8:	d90f      	bls.n	12d1a <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   12cfa:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   12cfe:	d80e      	bhi.n	12d1e <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   12d00:	3c01      	subs	r4, #1
   12d02:	fab4 f484 	clz	r4, r4
   12d06:	f1c4 041f 	rsb	r4, r4, #31
   12d0a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   12d0c:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12d0e:	ea4c 0404 	orr.w	r4, ip, r4
   12d12:	d906      	bls.n	12d22 <mpu_configure_regions+0x5e>
			return -EINVAL;
   12d14:	f06f 0215 	mvn.w	r2, #21
   12d18:	e7d9      	b.n	12cce <mpu_configure_regions+0xa>
		return REGION_32B;
   12d1a:	2408      	movs	r4, #8
   12d1c:	e7f6      	b.n	12d0c <mpu_configure_regions+0x48>
		return REGION_4G;
   12d1e:	243e      	movs	r4, #62	; 0x3e
   12d20:	e7f4      	b.n	12d0c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12d22:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   12d26:	4315      	orrs	r5, r2
   12d28:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12d2c:	f044 0401 	orr.w	r4, r4, #1
   12d30:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12d32:	60fd      	str	r5, [r7, #12]
		reg_index++;
   12d34:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12d36:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
   12d38:	3601      	adds	r6, #1
   12d3a:	300c      	adds	r0, #12
   12d3c:	e7c5      	b.n	12cca <mpu_configure_regions+0x6>
   12d3e:	bf00      	nop
   12d40:	e000ed90 	.word	0xe000ed90

00012d44 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   12d44:	4b03      	ldr	r3, [pc, #12]	; (12d54 <arm_core_mpu_enable+0x10>)
   12d46:	2205      	movs	r2, #5
   12d48:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   12d4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12d4e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   12d52:	4770      	bx	lr
   12d54:	e000ed90 	.word	0xe000ed90

00012d58 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   12d58:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   12d5c:	4b01      	ldr	r3, [pc, #4]	; (12d64 <arm_core_mpu_disable+0xc>)
   12d5e:	2200      	movs	r2, #0
   12d60:	605a      	str	r2, [r3, #4]
}
   12d62:	4770      	bx	lr
   12d64:	e000ed90 	.word	0xe000ed90

00012d68 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   12d68:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   12d6a:	4d0e      	ldr	r5, [pc, #56]	; (12da4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   12d6c:	2301      	movs	r3, #1
   12d6e:	782a      	ldrb	r2, [r5, #0]
   12d70:	460c      	mov	r4, r1
   12d72:	f7ff ffa7 	bl	12cc4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   12d76:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   12d78:	3016      	adds	r0, #22
   12d7a:	d111      	bne.n	12da0 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   12d7c:	f240 1311 	movw	r3, #273	; 0x111
   12d80:	4a09      	ldr	r2, [pc, #36]	; (12da8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   12d82:	490a      	ldr	r1, [pc, #40]	; (12dac <arm_core_mpu_configure_static_mpu_regions+0x44>)
   12d84:	480a      	ldr	r0, [pc, #40]	; (12db0 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   12d86:	f00d f924 	bl	1ffd2 <printk>
   12d8a:	4621      	mov	r1, r4
   12d8c:	4809      	ldr	r0, [pc, #36]	; (12db4 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
   12d8e:	f00d f920 	bl	1ffd2 <printk>
			regions_num);
	}
}
   12d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   12d96:	4804      	ldr	r0, [pc, #16]	; (12da8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   12d98:	f240 1111 	movw	r1, #273	; 0x111
   12d9c:	f00d bb73 	b.w	20486 <assert_post_action>
}
   12da0:	bd38      	pop	{r3, r4, r5, pc}
   12da2:	bf00      	nop
   12da4:	20002dac 	.word	0x20002dac
   12da8:	00023ed7 	.word	0x00023ed7
   12dac:	00025541 	.word	0x00025541
   12db0:	000237c9 	.word	0x000237c9
   12db4:	00023f0e 	.word	0x00023f0e

00012db8 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   12db8:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   12dba:	4a12      	ldr	r2, [pc, #72]	; (12e04 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   12dbc:	2300      	movs	r3, #0
   12dbe:	7812      	ldrb	r2, [r2, #0]
   12dc0:	460c      	mov	r4, r1
   12dc2:	f7ff ff7f 	bl	12cc4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   12dc6:	f110 0f16 	cmn.w	r0, #22
   12dca:	d008      	beq.n	12dde <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
   12dcc:	4b0e      	ldr	r3, [pc, #56]	; (12e08 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
   12dce:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   12dd0:	2807      	cmp	r0, #7
   12dd2:	dd00      	ble.n	12dd6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   12dd4:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
   12dd6:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   12dd8:	611a      	str	r2, [r3, #16]
   12dda:	3001      	adds	r0, #1
   12ddc:	e7f8      	b.n	12dd0 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   12dde:	4a0b      	ldr	r2, [pc, #44]	; (12e0c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   12de0:	490b      	ldr	r1, [pc, #44]	; (12e10 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   12de2:	480c      	ldr	r0, [pc, #48]	; (12e14 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   12de4:	f44f 7398 	mov.w	r3, #304	; 0x130
   12de8:	f00d f8f3 	bl	1ffd2 <printk>
   12dec:	4621      	mov	r1, r4
   12dee:	480a      	ldr	r0, [pc, #40]	; (12e18 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   12df0:	f00d f8ef 	bl	1ffd2 <printk>
}
   12df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   12df8:	4804      	ldr	r0, [pc, #16]	; (12e0c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   12dfa:	f44f 7198 	mov.w	r1, #304	; 0x130
   12dfe:	f00d bb42 	b.w	20486 <assert_post_action>
   12e02:	bf00      	nop
   12e04:	20002dac 	.word	0x20002dac
   12e08:	e000ed90 	.word	0xe000ed90
   12e0c:	00023ed7 	.word	0x00023ed7
   12e10:	00025541 	.word	0x00025541
   12e14:	000237c9 	.word	0x000237c9
   12e18:	00023f3a 	.word	0x00023f3a

00012e1c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   12e1c:	4925      	ldr	r1, [pc, #148]	; (12eb4 <z_arm_mpu_init+0x98>)
{
   12e1e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   12e20:	680c      	ldr	r4, [r1, #0]
   12e22:	2c08      	cmp	r4, #8
   12e24:	d913      	bls.n	12e4e <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   12e26:	f44f 73a4 	mov.w	r3, #328	; 0x148
   12e2a:	4a23      	ldr	r2, [pc, #140]	; (12eb8 <z_arm_mpu_init+0x9c>)
   12e2c:	4923      	ldr	r1, [pc, #140]	; (12ebc <z_arm_mpu_init+0xa0>)
   12e2e:	4824      	ldr	r0, [pc, #144]	; (12ec0 <z_arm_mpu_init+0xa4>)
   12e30:	f00d f8cf 	bl	1ffd2 <printk>
   12e34:	4823      	ldr	r0, [pc, #140]	; (12ec4 <z_arm_mpu_init+0xa8>)
   12e36:	2208      	movs	r2, #8
   12e38:	4621      	mov	r1, r4
   12e3a:	f00d f8ca 	bl	1ffd2 <printk>
   12e3e:	481e      	ldr	r0, [pc, #120]	; (12eb8 <z_arm_mpu_init+0x9c>)
   12e40:	f44f 71a4 	mov.w	r1, #328	; 0x148
   12e44:	f00d fb1f 	bl	20486 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   12e48:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   12e4c:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   12e4e:	f7ff ff83 	bl	12d58 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12e52:	6848      	ldr	r0, [r1, #4]
   12e54:	491c      	ldr	r1, [pc, #112]	; (12ec8 <z_arm_mpu_init+0xac>)
   12e56:	2200      	movs	r2, #0
   12e58:	4294      	cmp	r4, r2
   12e5a:	f100 000c 	add.w	r0, r0, #12
   12e5e:	d119      	bne.n	12e94 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
   12e60:	4b1a      	ldr	r3, [pc, #104]	; (12ecc <z_arm_mpu_init+0xb0>)
   12e62:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   12e64:	f7ff ff6e 	bl	12d44 <arm_core_mpu_enable>
	__ASSERT(
   12e68:	680b      	ldr	r3, [r1, #0]
   12e6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   12e6e:	2b08      	cmp	r3, #8
   12e70:	d00e      	beq.n	12e90 <z_arm_mpu_init+0x74>
   12e72:	4917      	ldr	r1, [pc, #92]	; (12ed0 <z_arm_mpu_init+0xb4>)
   12e74:	4a10      	ldr	r2, [pc, #64]	; (12eb8 <z_arm_mpu_init+0x9c>)
   12e76:	4812      	ldr	r0, [pc, #72]	; (12ec0 <z_arm_mpu_init+0xa4>)
   12e78:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   12e7c:	f00d f8a9 	bl	1ffd2 <printk>
   12e80:	4814      	ldr	r0, [pc, #80]	; (12ed4 <z_arm_mpu_init+0xb8>)
   12e82:	f00d f8a6 	bl	1ffd2 <printk>
   12e86:	480c      	ldr	r0, [pc, #48]	; (12eb8 <z_arm_mpu_init+0x9c>)
   12e88:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   12e8c:	f00d fafb 	bl	20486 <assert_post_action>
	return 0;
   12e90:	2000      	movs	r0, #0
   12e92:	e7db      	b.n	12e4c <z_arm_mpu_init+0x30>
   12e94:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12e96:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   12e9a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   12e9e:	4313      	orrs	r3, r2
   12ea0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12ea4:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12ea6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   12eaa:	f043 0301 	orr.w	r3, r3, #1
   12eae:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12eb0:	3201      	adds	r2, #1
   12eb2:	e7d1      	b.n	12e58 <z_arm_mpu_init+0x3c>
   12eb4:	000230b0 	.word	0x000230b0
   12eb8:	00023ed7 	.word	0x00023ed7
   12ebc:	00025541 	.word	0x00025541
   12ec0:	000237c9 	.word	0x000237c9
   12ec4:	00023f67 	.word	0x00023f67
   12ec8:	e000ed90 	.word	0xe000ed90
   12ecc:	20002dac 	.word	0x20002dac
   12ed0:	00023f9b 	.word	0x00023f9b
   12ed4:	00023feb 	.word	0x00023feb

00012ed8 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   12ed8:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   12eda:	4b0b      	ldr	r3, [pc, #44]	; (12f08 <malloc_prepare+0x30>)
   12edc:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   12ee0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   12ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   12ee8:	d20c      	bcs.n	12f04 <malloc_prepare+0x2c>
   12eea:	4908      	ldr	r1, [pc, #32]	; (12f0c <malloc_prepare+0x34>)
   12eec:	4a08      	ldr	r2, [pc, #32]	; (12f10 <malloc_prepare+0x38>)
   12eee:	4809      	ldr	r0, [pc, #36]	; (12f14 <malloc_prepare+0x3c>)
   12ef0:	2380      	movs	r3, #128	; 0x80
   12ef2:	f00d f86e 	bl	1ffd2 <printk>
   12ef6:	4808      	ldr	r0, [pc, #32]	; (12f18 <malloc_prepare+0x40>)
   12ef8:	f00d f86b 	bl	1ffd2 <printk>
   12efc:	4804      	ldr	r0, [pc, #16]	; (12f10 <malloc_prepare+0x38>)
   12efe:	2180      	movs	r1, #128	; 0x80
   12f00:	f00d fac1 	bl	20486 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   12f04:	2000      	movs	r0, #0
   12f06:	bd08      	pop	{r3, pc}
   12f08:	2000c0e1 	.word	0x2000c0e1
   12f0c:	0002403c 	.word	0x0002403c
   12f10:	0002400c 	.word	0x0002400c
   12f14:	000237c9 	.word	0x000237c9
   12f18:	00024083 	.word	0x00024083

00012f1c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   12f1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   12f20:	f3ef 8211 	mrs	r2, BASEPRI
   12f24:	f383 8812 	msr	BASEPRI_MAX, r3
   12f28:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   12f2c:	4906      	ldr	r1, [pc, #24]	; (12f48 <nordicsemi_nrf52_init+0x2c>)
   12f2e:	2301      	movs	r3, #1
   12f30:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   12f34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12f38:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   12f3c:	f382 8811 	msr	BASEPRI, r2
   12f40:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12f44:	2000      	movs	r0, #0
   12f46:	4770      	bx	lr
   12f48:	4001e000 	.word	0x4001e000

00012f4c <sys_arch_reboot>:
    *p_gpregret = val;
   12f4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12f50:	b2c0      	uxtb	r0, r0
   12f52:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   12f56:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12f5a:	4905      	ldr	r1, [pc, #20]	; (12f70 <sys_arch_reboot+0x24>)
   12f5c:	4b05      	ldr	r3, [pc, #20]	; (12f74 <sys_arch_reboot+0x28>)
   12f5e:	68ca      	ldr	r2, [r1, #12]
   12f60:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12f64:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   12f66:	60cb      	str	r3, [r1, #12]
   12f68:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   12f6c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   12f6e:	e7fd      	b.n	12f6c <sys_arch_reboot+0x20>
   12f70:	e000ed00 	.word	0xe000ed00
   12f74:	05fa0004 	.word	0x05fa0004

00012f78 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12f78:	b120      	cbz	r0, 12f84 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   12f7a:	4b03      	ldr	r3, [pc, #12]	; (12f88 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12f7c:	0180      	lsls	r0, r0, #6
   12f7e:	f043 0301 	orr.w	r3, r3, #1
   12f82:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   12f84:	4770      	bx	lr
   12f86:	bf00      	nop
   12f88:	00023060 	.word	0x00023060

00012f8c <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
   12f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12f90:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
   12f94:	07db      	lsls	r3, r3, #31
   12f96:	d52e      	bpl.n	12ff6 <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
   12f98:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   12f9c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   12fa0:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
   12fa4:	2b07      	cmp	r3, #7
   12fa6:	d126      	bne.n	12ff6 <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   12fa8:	4b14      	ldr	r3, [pc, #80]	; (12ffc <board_nrf52840dongle_nrf52840_init+0x70>)
   12faa:	2201      	movs	r2, #1
   12fac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   12fb0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   12fb4:	2a00      	cmp	r2, #0
   12fb6:	d0fb      	beq.n	12fb0 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
   12fb8:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   12fbc:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   12fc0:	f022 0207 	bic.w	r2, r2, #7
   12fc4:	f042 0204 	orr.w	r2, r2, #4
		NRF_UICR->REGOUT0 =
   12fc8:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   12fcc:	2200      	movs	r2, #0
   12fce:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   12fd2:	4a0a      	ldr	r2, [pc, #40]	; (12ffc <board_nrf52840dongle_nrf52840_init+0x70>)
   12fd4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   12fd8:	2b00      	cmp	r3, #0
   12fda:	d0fb      	beq.n	12fd4 <board_nrf52840dongle_nrf52840_init+0x48>
   12fdc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12fe0:	4907      	ldr	r1, [pc, #28]	; (13000 <board_nrf52840dongle_nrf52840_init+0x74>)
   12fe2:	4b08      	ldr	r3, [pc, #32]	; (13004 <board_nrf52840dongle_nrf52840_init+0x78>)
   12fe4:	68ca      	ldr	r2, [r1, #12]
   12fe6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12fea:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   12fec:	60cb      	str	r3, [r1, #12]
   12fee:	f3bf 8f4f 	dsb	sy
    __NOP();
   12ff2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   12ff4:	e7fd      	b.n	12ff2 <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
   12ff6:	2000      	movs	r0, #0
   12ff8:	4770      	bx	lr
   12ffa:	bf00      	nop
   12ffc:	4001e000 	.word	0x4001e000
   13000:	e000ed00 	.word	0xe000ed00
   13004:	05fa0004 	.word	0x05fa0004

00013008 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   13008:	b5f0      	push	{r4, r5, r6, r7, lr}
   1300a:	460b      	mov	r3, r1
	switch (src->type) {
   1300c:	7801      	ldrb	r1, [r0, #0]
   1300e:	2901      	cmp	r1, #1
{
   13010:	4602      	mov	r2, r0
	switch (src->type) {
   13012:	d015      	beq.n	13040 <uuid_to_uuid128+0x38>
   13014:	2902      	cmp	r1, #2
   13016:	d02b      	beq.n	13070 <uuid_to_uuid128+0x68>
   13018:	b989      	cbnz	r1, 1303e <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   1301a:	4c1c      	ldr	r4, [pc, #112]	; (1308c <uuid_to_uuid128+0x84>)
   1301c:	461d      	mov	r5, r3
   1301e:	f104 0710 	add.w	r7, r4, #16
   13022:	6820      	ldr	r0, [r4, #0]
   13024:	6861      	ldr	r1, [r4, #4]
   13026:	462e      	mov	r6, r5
   13028:	c603      	stmia	r6!, {r0, r1}
   1302a:	3408      	adds	r4, #8
   1302c:	42bc      	cmp	r4, r7
   1302e:	4635      	mov	r5, r6
   13030:	d1f7      	bne.n	13022 <uuid_to_uuid128+0x1a>
		sys_put_le16(BT_UUID_16(src)->val,
   13032:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
   13034:	7821      	ldrb	r1, [r4, #0]
   13036:	7031      	strb	r1, [r6, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   13038:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1303a:	0a12      	lsrs	r2, r2, #8
   1303c:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1303e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
   13040:	4c12      	ldr	r4, [pc, #72]	; (1308c <uuid_to_uuid128+0x84>)
   13042:	461d      	mov	r5, r3
   13044:	f104 0710 	add.w	r7, r4, #16
   13048:	6820      	ldr	r0, [r4, #0]
   1304a:	6861      	ldr	r1, [r4, #4]
   1304c:	462e      	mov	r6, r5
   1304e:	c603      	stmia	r6!, {r0, r1}
   13050:	3408      	adds	r4, #8
   13052:	42bc      	cmp	r4, r7
   13054:	4635      	mov	r5, r6
   13056:	d1f7      	bne.n	13048 <uuid_to_uuid128+0x40>
		sys_put_le32(BT_UUID_32(src)->val,
   13058:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
   1305a:	7821      	ldrb	r1, [r4, #0]
   1305c:	7031      	strb	r1, [r6, #0]
   1305e:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
   13062:	735a      	strb	r2, [r3, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   13064:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   13066:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   13068:	0a12      	lsrs	r2, r2, #8
   1306a:	7399      	strb	r1, [r3, #14]
   1306c:	741a      	strb	r2, [r3, #16]
}
   1306e:	e7e6      	b.n	1303e <uuid_to_uuid128+0x36>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13070:	f100 0510 	add.w	r5, r0, #16
   13074:	6810      	ldr	r0, [r2, #0]
   13076:	6851      	ldr	r1, [r2, #4]
   13078:	461c      	mov	r4, r3
   1307a:	c403      	stmia	r4!, {r0, r1}
   1307c:	3208      	adds	r2, #8
   1307e:	42aa      	cmp	r2, r5
   13080:	4623      	mov	r3, r4
   13082:	d1f7      	bne.n	13074 <uuid_to_uuid128+0x6c>
   13084:	7812      	ldrb	r2, [r2, #0]
   13086:	7022      	strb	r2, [r4, #0]
   13088:	e7d9      	b.n	1303e <uuid_to_uuid128+0x36>
   1308a:	bf00      	nop
   1308c:	00024119 	.word	0x00024119

00013090 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   13090:	b570      	push	{r4, r5, r6, lr}
   13092:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   13094:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   13098:	2b01      	cmp	r3, #1
{
   1309a:	4605      	mov	r5, r0
   1309c:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1309e:	d00e      	beq.n	130be <bt_buf_get_rx+0x2e>
   130a0:	2805      	cmp	r0, #5
   130a2:	d00c      	beq.n	130be <bt_buf_get_rx+0x2e>
   130a4:	490d      	ldr	r1, [pc, #52]	; (130dc <bt_buf_get_rx+0x4c>)
   130a6:	4a0e      	ldr	r2, [pc, #56]	; (130e0 <bt_buf_get_rx+0x50>)
   130a8:	480e      	ldr	r0, [pc, #56]	; (130e4 <bt_buf_get_rx+0x54>)
   130aa:	2342      	movs	r3, #66	; 0x42
   130ac:	f00c ff91 	bl	1ffd2 <printk>
   130b0:	480d      	ldr	r0, [pc, #52]	; (130e8 <bt_buf_get_rx+0x58>)
   130b2:	f00c ff8e 	bl	1ffd2 <printk>
   130b6:	480a      	ldr	r0, [pc, #40]	; (130e0 <bt_buf_get_rx+0x50>)
   130b8:	2142      	movs	r1, #66	; 0x42
   130ba:	f00d f9e4 	bl	20486 <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   130be:	4623      	mov	r3, r4
   130c0:	480a      	ldr	r0, [pc, #40]	; (130ec <bt_buf_get_rx+0x5c>)
   130c2:	4632      	mov	r2, r6
   130c4:	f00f faa0 	bl	22608 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   130c8:	4604      	mov	r4, r0
   130ca:	b120      	cbz	r0, 130d6 <bt_buf_get_rx+0x46>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   130cc:	2100      	movs	r1, #0
   130ce:	3008      	adds	r0, #8
   130d0:	f004 f97c 	bl	173cc <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   130d4:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   130d6:	4620      	mov	r0, r4
   130d8:	bd70      	pop	{r4, r5, r6, pc}
   130da:	bf00      	nop
   130dc:	00024159 	.word	0x00024159
   130e0:	0002412a 	.word	0x0002412a
   130e4:	000237c9 	.word	0x000237c9
   130e8:	0002419e 	.word	0x0002419e
   130ec:	200007e8 	.word	0x200007e8

000130f0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   130f0:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   130f2:	490b      	ldr	r1, [pc, #44]	; (13120 <bt_buf_get_cmd_complete+0x30>)
{
   130f4:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   130f6:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
   130fa:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   130fc:	b920      	cbnz	r0, 13108 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   130fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13102:	2001      	movs	r0, #1
   13104:	f7ff bfc4 	b.w	13090 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   13108:	f004 fa04 	bl	17514 <net_buf_ref>
   1310c:	2301      	movs	r3, #1
		buf->len = 0U;
   1310e:	2100      	movs	r1, #0
   13110:	7503      	strb	r3, [r0, #20]
   13112:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   13114:	4604      	mov	r4, r0
   13116:	3008      	adds	r0, #8
   13118:	f004 f958 	bl	173cc <net_buf_simple_reserve>
}
   1311c:	4620      	mov	r0, r4
   1311e:	bd10      	pop	{r4, pc}
   13120:	200002a0 	.word	0x200002a0

00013124 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   13124:	b570      	push	{r4, r5, r6, lr}
   13126:	4604      	mov	r4, r0
	switch (evt) {
   13128:	2c0f      	cmp	r4, #15
{
   1312a:	460d      	mov	r5, r1
   1312c:	4610      	mov	r0, r2
   1312e:	4619      	mov	r1, r3
	switch (evt) {
   13130:	d805      	bhi.n	1313e <bt_buf_get_evt+0x1a>
   13132:	2c0d      	cmp	r4, #13
   13134:	d912      	bls.n	1315c <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   13136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   1313a:	f7ff bfd9 	b.w	130f0 <bt_buf_get_cmd_complete>
	switch (evt) {
   1313e:	2c13      	cmp	r4, #19
   13140:	d10c      	bne.n	1315c <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   13142:	480b      	ldr	r0, [pc, #44]	; (13170 <bt_buf_get_evt+0x4c>)
   13144:	f00f fa60 	bl	22608 <net_buf_alloc_fixed>
			if (buf) {
   13148:	4604      	mov	r4, r0
   1314a:	b128      	cbz	r0, 13158 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   1314c:	2100      	movs	r1, #0
   1314e:	3008      	adds	r0, #8
   13150:	f004 f93c 	bl	173cc <net_buf_simple_reserve>
   13154:	2301      	movs	r3, #1
   13156:	7523      	strb	r3, [r4, #20]
}
   13158:	4620      	mov	r0, r4
   1315a:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   1315c:	4602      	mov	r2, r0
   1315e:	460b      	mov	r3, r1
		if (discardable) {
   13160:	b10d      	cbz	r5, 13166 <bt_buf_get_evt+0x42>
   13162:	4804      	ldr	r0, [pc, #16]	; (13174 <bt_buf_get_evt+0x50>)
   13164:	e7ee      	b.n	13144 <bt_buf_get_evt+0x20>
}
   13166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1316a:	2001      	movs	r0, #1
   1316c:	f7ff bf90 	b.w	13090 <bt_buf_get_rx>
   13170:	20000814 	.word	0x20000814
   13174:	20000764 	.word	0x20000764

00013178 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   13178:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1317a:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   1317c:	781a      	ldrb	r2, [r3, #0]
   1317e:	b972      	cbnz	r2, 1319e <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13180:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   13184:	4620      	mov	r0, r4
   13186:	f001 fd79 	bl	14c7c <bt_conn_lookup_handle>
	if (!conn) {
   1318a:	4605      	mov	r5, r0
   1318c:	b940      	cbnz	r0, 131a0 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1318e:	4b08      	ldr	r3, [pc, #32]	; (131b0 <hci_disconn_complete_prio+0x38>)
   13190:	881a      	ldrh	r2, [r3, #0]
   13192:	b922      	cbnz	r2, 1319e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   13194:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   13198:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   1319c:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   1319e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   131a0:	2101      	movs	r1, #1
   131a2:	f001 fd77 	bl	14c94 <bt_conn_set_state>
	bt_conn_unref(conn);
   131a6:	4628      	mov	r0, r5
}
   131a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   131ac:	f001 bd3c 	b.w	14c28 <bt_conn_unref>
   131b0:	20002d9c 	.word	0x20002d9c

000131b4 <hci_le_meta_event>:
		      sizeof(struct bt_hci_evt_le_connectionless_iq_report)),
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
};

static void hci_le_meta_event(struct net_buf *buf)
{
   131b4:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   131b6:	2101      	movs	r1, #1
   131b8:	4604      	mov	r4, r0
   131ba:	3008      	adds	r0, #8
   131bc:	f004 fa72 	bl	176a4 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   131c0:	4621      	mov	r1, r4
   131c2:	4a03      	ldr	r2, [pc, #12]	; (131d0 <hci_le_meta_event+0x1c>)
   131c4:	7800      	ldrb	r0, [r0, #0]
}
   131c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   131ca:	2308      	movs	r3, #8
   131cc:	f00d bc02 	b.w	209d4 <handle_event>
   131d0:	00023100 	.word	0x00023100

000131d4 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   131d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   131d8:	4f3b      	ldr	r7, [pc, #236]	; (132c8 <hci_rx_thread+0xf4>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   131da:	f8df 8100 	ldr.w	r8, [pc, #256]	; 132dc <hci_rx_thread+0x108>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   131de:	4e3b      	ldr	r6, [pc, #236]	; (132cc <hci_rx_thread+0xf8>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   131e0:	f04f 33ff 	mov.w	r3, #4294967295
   131e4:	f04f 32ff 	mov.w	r2, #4294967295
   131e8:	4638      	mov	r0, r7
   131ea:	f004 f8bb 	bl	17364 <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   131ee:	7d03      	ldrb	r3, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   131f0:	2b01      	cmp	r3, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   131f2:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   131f4:	d039      	beq.n	1326a <hci_rx_thread+0x96>
   131f6:	2b03      	cmp	r3, #3
   131f8:	d120      	bne.n	1323c <hci_rx_thread+0x68>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   131fa:	8983      	ldrh	r3, [r0, #12]
   131fc:	2b03      	cmp	r3, #3
   131fe:	d80c      	bhi.n	1321a <hci_rx_thread+0x46>
   13200:	4933      	ldr	r1, [pc, #204]	; (132d0 <hci_rx_thread+0xfc>)
   13202:	4834      	ldr	r0, [pc, #208]	; (132d4 <hci_rx_thread+0x100>)
   13204:	f44f 73db 	mov.w	r3, #438	; 0x1b6
   13208:	4632      	mov	r2, r6
   1320a:	f00c fee2 	bl	1ffd2 <printk>
   1320e:	4040      	eors	r0, r0
   13210:	f380 8811 	msr	BASEPRI, r0
   13214:	f04f 0003 	mov.w	r0, #3
   13218:	df02      	svc	2
   1321a:	2104      	movs	r1, #4
   1321c:	f104 0008 	add.w	r0, r4, #8
   13220:	f004 fa40 	bl	176a4 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13224:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   13226:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   13228:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1322c:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   1322e:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   13230:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   13234:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   13236:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   13238:	d003      	beq.n	13242 <hci_rx_thread+0x6e>
	net_buf_unref(buf);
   1323a:	4620      	mov	r0, r4
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   1323c:	f004 f924 	bl	17488 <net_buf_unref>
			break;
   13240:	e010      	b.n	13264 <hci_rx_thread+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   13242:	f001 fd1b 	bl	14c7c <bt_conn_lookup_handle>
	if (!conn) {
   13246:	4605      	mov	r5, r0
   13248:	2800      	cmp	r0, #0
   1324a:	d0f6      	beq.n	1323a <hci_rx_thread+0x66>
	acl(buf)->index = bt_conn_index(conn);
   1324c:	f001 fdec 	bl	14e28 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   13250:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   13254:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   13256:	4621      	mov	r1, r4
   13258:	4628      	mov	r0, r5
   1325a:	f00d fee3 	bl	21024 <bt_conn_recv>
	bt_conn_unref(conn);
   1325e:	4628      	mov	r0, r5
   13260:	f001 fce2 	bl	14c28 <bt_conn_unref>
	z_impl_k_yield();
   13264:	f008 ffe0 	bl	1c228 <z_impl_k_yield>
	while (1) {
   13268:	e7ba      	b.n	131e0 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1326a:	8983      	ldrh	r3, [r0, #12]
   1326c:	2b01      	cmp	r3, #1
   1326e:	d80c      	bhi.n	1328a <hci_rx_thread+0xb6>
   13270:	4917      	ldr	r1, [pc, #92]	; (132d0 <hci_rx_thread+0xfc>)
   13272:	4818      	ldr	r0, [pc, #96]	; (132d4 <hci_rx_thread+0x100>)
   13274:	f640 130d 	movw	r3, #2317	; 0x90d
   13278:	4632      	mov	r2, r6
   1327a:	f00c feaa 	bl	1ffd2 <printk>
   1327e:	4040      	eors	r0, r0
   13280:	f380 8811 	msr	BASEPRI, r0
   13284:	f04f 0003 	mov.w	r0, #3
   13288:	df02      	svc	2
   1328a:	2102      	movs	r1, #2
   1328c:	f104 0008 	add.w	r0, r4, #8
   13290:	f004 fa08 	bl	176a4 <net_buf_simple_pull_mem>
   13294:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13296:	7800      	ldrb	r0, [r0, #0]
   13298:	f00d fb8a 	bl	209b0 <bt_hci_evt_get_flags>
   1329c:	0783      	lsls	r3, r0, #30
   1329e:	d40c      	bmi.n	132ba <hci_rx_thread+0xe6>
   132a0:	490d      	ldr	r1, [pc, #52]	; (132d8 <hci_rx_thread+0x104>)
   132a2:	480c      	ldr	r0, [pc, #48]	; (132d4 <hci_rx_thread+0x100>)
   132a4:	f640 1311 	movw	r3, #2321	; 0x911
   132a8:	4632      	mov	r2, r6
   132aa:	f00c fe92 	bl	1ffd2 <printk>
   132ae:	4040      	eors	r0, r0
   132b0:	f380 8811 	msr	BASEPRI, r0
   132b4:	f04f 0003 	mov.w	r0, #3
   132b8:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   132ba:	7828      	ldrb	r0, [r5, #0]
   132bc:	2304      	movs	r3, #4
   132be:	4642      	mov	r2, r8
   132c0:	4621      	mov	r1, r4
   132c2:	f00d fb87 	bl	209d4 <handle_event>
   132c6:	e7b8      	b.n	1323a <hci_rx_thread+0x66>
   132c8:	200003d4 	.word	0x200003d4
   132cc:	000241be 	.word	0x000241be
   132d0:	000241f2 	.word	0x000241f2
   132d4:	000237c9 	.word	0x000237c9
   132d8:	0002420b 	.word	0x0002420b
   132dc:	00023150 	.word	0x00023150

000132e0 <hci_cmd_done>:
{
   132e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   132e2:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   132e4:	7990      	ldrb	r0, [r2, #6]
{
   132e6:	460e      	mov	r6, r1
   132e8:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   132ea:	f003 ff2d 	bl	17148 <net_buf_pool_get>
   132ee:	4b30      	ldr	r3, [pc, #192]	; (133b0 <hci_cmd_done+0xd0>)
   132f0:	4283      	cmp	r3, r0
   132f2:	d15b      	bne.n	133ac <hci_cmd_done+0xcc>
	if (cmd(buf)->opcode != opcode) {
   132f4:	4620      	mov	r0, r4
   132f6:	f003 ff2f 	bl	17158 <net_buf_id>
   132fa:	4d2e      	ldr	r5, [pc, #184]	; (133b4 <hci_cmd_done+0xd4>)
   132fc:	230c      	movs	r3, #12
   132fe:	fb03 5300 	mla	r3, r3, r0, r5
   13302:	885b      	ldrh	r3, [r3, #2]
   13304:	42bb      	cmp	r3, r7
   13306:	d151      	bne.n	133ac <hci_cmd_done+0xcc>
	if (bt_dev.sent_cmd) {
   13308:	4f2b      	ldr	r7, [pc, #172]	; (133b8 <hci_cmd_done+0xd8>)
   1330a:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   1330e:	b120      	cbz	r0, 1331a <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   13310:	f004 f8ba 	bl	17488 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13314:	2300      	movs	r3, #0
   13316:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   1331a:	4620      	mov	r0, r4
   1331c:	f003 ff1c 	bl	17158 <net_buf_id>
   13320:	270c      	movs	r7, #12
   13322:	fb07 5000 	mla	r0, r7, r0, r5
   13326:	6843      	ldr	r3, [r0, #4]
   13328:	b1e3      	cbz	r3, 13364 <hci_cmd_done+0x84>
   1332a:	b9de      	cbnz	r6, 13364 <hci_cmd_done+0x84>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1332c:	4620      	mov	r0, r4
   1332e:	f003 ff13 	bl	17158 <net_buf_id>
   13332:	fb07 5000 	mla	r0, r7, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13336:	2201      	movs	r2, #1
   13338:	6840      	ldr	r0, [r0, #4]
   1333a:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
   1333e:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   13340:	f001 071f 	and.w	r7, r1, #31
   13344:	40ba      	lsls	r2, r7
	if (val) {
   13346:	0949      	lsrs	r1, r1, #5
   13348:	b318      	cbz	r0, 13392 <hci_cmd_done+0xb2>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1334a:	f3bf 8f5b 	dmb	ish
   1334e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13352:	e853 1f00 	ldrex	r1, [r3]
   13356:	4311      	orrs	r1, r2
   13358:	e843 1000 	strex	r0, r1, [r3]
   1335c:	2800      	cmp	r0, #0
   1335e:	d1f8      	bne.n	13352 <hci_cmd_done+0x72>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13360:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
   13364:	4620      	mov	r0, r4
   13366:	f003 fef7 	bl	17158 <net_buf_id>
   1336a:	270c      	movs	r7, #12
   1336c:	fb07 5000 	mla	r0, r7, r0, r5
   13370:	6883      	ldr	r3, [r0, #8]
   13372:	b1db      	cbz	r3, 133ac <hci_cmd_done+0xcc>
		cmd(buf)->status = status;
   13374:	4620      	mov	r0, r4
   13376:	f003 feef 	bl	17158 <net_buf_id>
   1337a:	4378      	muls	r0, r7
   1337c:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   1337e:	4620      	mov	r0, r4
   13380:	f003 feea 	bl	17158 <net_buf_id>
   13384:	fb07 5500 	mla	r5, r7, r0, r5
   13388:	68a8      	ldr	r0, [r5, #8]
}
   1338a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   1338e:	f007 ba75 	b.w	1a87c <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13392:	43d2      	mvns	r2, r2
   13394:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13398:	f3bf 8f5b 	dmb	ish
   1339c:	e853 1f00 	ldrex	r1, [r3]
   133a0:	4011      	ands	r1, r2
   133a2:	e843 1000 	strex	r0, r1, [r3]
   133a6:	2800      	cmp	r0, #0
   133a8:	d0da      	beq.n	13360 <hci_cmd_done+0x80>
   133aa:	e7f7      	b.n	1339c <hci_cmd_done+0xbc>
   133ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   133ae:	bf00      	nop
   133b0:	200007bc 	.word	0x200007bc
   133b4:	2000221c 	.word	0x2000221c
   133b8:	200002a0 	.word	0x200002a0

000133bc <hci_cmd_status>:
{
   133bc:	b538      	push	{r3, r4, r5, lr}
   133be:	2104      	movs	r1, #4
   133c0:	4604      	mov	r4, r0
   133c2:	3008      	adds	r0, #8
   133c4:	f004 f96e 	bl	176a4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   133c8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   133ca:	7801      	ldrb	r1, [r0, #0]
   133cc:	8840      	ldrh	r0, [r0, #2]
   133ce:	4622      	mov	r2, r4
   133d0:	f7ff ff86 	bl	132e0 <hci_cmd_done>
	if (ncmd) {
   133d4:	b125      	cbz	r5, 133e0 <hci_cmd_status+0x24>
   133d6:	4803      	ldr	r0, [pc, #12]	; (133e4 <hci_cmd_status+0x28>)
}
   133d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   133dc:	f007 ba4e 	b.w	1a87c <z_impl_k_sem_give>
   133e0:	bd38      	pop	{r3, r4, r5, pc}
   133e2:	bf00      	nop
   133e4:	200003b8 	.word	0x200003b8

000133e8 <hci_cmd_complete>:
{
   133e8:	b538      	push	{r3, r4, r5, lr}
   133ea:	2103      	movs	r1, #3
   133ec:	4604      	mov	r4, r0
   133ee:	3008      	adds	r0, #8
   133f0:	f004 f958 	bl	176a4 <net_buf_simple_pull_mem>
	status = buf->data[0];
   133f4:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   133f6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   133f8:	7819      	ldrb	r1, [r3, #0]
   133fa:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   133fe:	4622      	mov	r2, r4
   13400:	f7ff ff6e 	bl	132e0 <hci_cmd_done>
	if (ncmd) {
   13404:	b125      	cbz	r5, 13410 <hci_cmd_complete+0x28>
   13406:	4803      	ldr	r0, [pc, #12]	; (13414 <hci_cmd_complete+0x2c>)
}
   13408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1340c:	f007 ba36 	b.w	1a87c <z_impl_k_sem_give>
   13410:	bd38      	pop	{r3, r4, r5, pc}
   13412:	bf00      	nop
   13414:	200003b8 	.word	0x200003b8

00013418 <bt_hci_cmd_state_set_init>:
{
   13418:	b510      	push	{r4, lr}
	state->bit = bit;
   1341a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   1341e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   13422:	720b      	strb	r3, [r1, #8]
{
   13424:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   13426:	f003 fe97 	bl	17158 <net_buf_id>
   1342a:	4b03      	ldr	r3, [pc, #12]	; (13438 <bt_hci_cmd_state_set_init+0x20>)
   1342c:	220c      	movs	r2, #12
   1342e:	fb02 3000 	mla	r0, r2, r0, r3
   13432:	6044      	str	r4, [r0, #4]
}
   13434:	bd10      	pop	{r4, pc}
   13436:	bf00      	nop
   13438:	2000221c 	.word	0x2000221c

0001343c <bt_hci_cmd_create>:
{
   1343c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   13440:	f04f 32ff 	mov.w	r2, #4294967295
   13444:	4605      	mov	r5, r0
   13446:	f04f 33ff 	mov.w	r3, #4294967295
   1344a:	481b      	ldr	r0, [pc, #108]	; (134b8 <bt_hci_cmd_create+0x7c>)
   1344c:	460e      	mov	r6, r1
   1344e:	f00f f8db 	bl	22608 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   13452:	4604      	mov	r4, r0
   13454:	b948      	cbnz	r0, 1346a <bt_hci_cmd_create+0x2e>
   13456:	4919      	ldr	r1, [pc, #100]	; (134bc <bt_hci_cmd_create+0x80>)
   13458:	4819      	ldr	r0, [pc, #100]	; (134c0 <bt_hci_cmd_create+0x84>)
   1345a:	4a1a      	ldr	r2, [pc, #104]	; (134c4 <bt_hci_cmd_create+0x88>)
   1345c:	23e9      	movs	r3, #233	; 0xe9
   1345e:	f00c fdb8 	bl	1ffd2 <printk>
   13462:	4818      	ldr	r0, [pc, #96]	; (134c4 <bt_hci_cmd_create+0x88>)
   13464:	21e9      	movs	r1, #233	; 0xe9
   13466:	f00d f80e 	bl	20486 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   1346a:	f104 0b08 	add.w	fp, r4, #8
   1346e:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13470:	2700      	movs	r7, #0
   13472:	4658      	mov	r0, fp
   13474:	f003 ffaa 	bl	173cc <net_buf_simple_reserve>
   13478:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   1347a:	4620      	mov	r0, r4
   1347c:	f003 fe6c 	bl	17158 <net_buf_id>
   13480:	f8df 8044 	ldr.w	r8, [pc, #68]	; 134c8 <bt_hci_cmd_create+0x8c>
   13484:	f04f 0a0c 	mov.w	sl, #12
   13488:	fb0a 8000 	mla	r0, sl, r0, r8
   1348c:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   1348e:	4620      	mov	r0, r4
   13490:	f003 fe62 	bl	17158 <net_buf_id>
   13494:	fb0a 8000 	mla	r0, sl, r0, r8
   13498:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   1349a:	4620      	mov	r0, r4
   1349c:	f003 fe5c 	bl	17158 <net_buf_id>
   134a0:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   134a4:	2103      	movs	r1, #3
   134a6:	6047      	str	r7, [r0, #4]
   134a8:	4658      	mov	r0, fp
   134aa:	f004 f91d 	bl	176e8 <net_buf_simple_add>
	hdr->param_len = param_len;
   134ae:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   134b0:	8005      	strh	r5, [r0, #0]
}
   134b2:	4620      	mov	r0, r4
   134b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134b8:	200007bc 	.word	0x200007bc
   134bc:	00024239 	.word	0x00024239
   134c0:	000237c9 	.word	0x000237c9
   134c4:	000241be 	.word	0x000241be
   134c8:	2000221c 	.word	0x2000221c

000134cc <bt_hci_cmd_send_sync>:
{
   134cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   134ce:	4615      	mov	r5, r2
   134d0:	b087      	sub	sp, #28
	if (!buf) {
   134d2:	460c      	mov	r4, r1
   134d4:	b921      	cbnz	r1, 134e0 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   134d6:	f7ff ffb1 	bl	1343c <bt_hci_cmd_create>
		if (!buf) {
   134da:	4604      	mov	r4, r0
   134dc:	2800      	cmp	r0, #0
   134de:	d048      	beq.n	13572 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   134e0:	2201      	movs	r2, #1
   134e2:	2100      	movs	r1, #0
   134e4:	4668      	mov	r0, sp
   134e6:	f00f fa9c 	bl	22a22 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   134ea:	4620      	mov	r0, r4
   134ec:	f003 fe34 	bl	17158 <net_buf_id>
   134f0:	4e21      	ldr	r6, [pc, #132]	; (13578 <bt_hci_cmd_send_sync+0xac>)
   134f2:	230c      	movs	r3, #12
   134f4:	fb03 6000 	mla	r0, r3, r0, r6
   134f8:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   134fc:	4620      	mov	r0, r4
   134fe:	f004 f809 	bl	17514 <net_buf_ref>
   13502:	4601      	mov	r1, r0
   13504:	481d      	ldr	r0, [pc, #116]	; (1357c <bt_hci_cmd_send_sync+0xb0>)
   13506:	f003 ff8b 	bl	17420 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   1350a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1350e:	2300      	movs	r3, #0
   13510:	4668      	mov	r0, sp
   13512:	f007 f9f7 	bl	1a904 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   13516:	4607      	mov	r7, r0
   13518:	b180      	cbz	r0, 1353c <bt_hci_cmd_send_sync+0x70>
   1351a:	4a19      	ldr	r2, [pc, #100]	; (13580 <bt_hci_cmd_send_sync+0xb4>)
   1351c:	4919      	ldr	r1, [pc, #100]	; (13584 <bt_hci_cmd_send_sync+0xb8>)
   1351e:	481a      	ldr	r0, [pc, #104]	; (13588 <bt_hci_cmd_send_sync+0xbc>)
   13520:	f44f 7399 	mov.w	r3, #306	; 0x132
   13524:	f00c fd55 	bl	1ffd2 <printk>
   13528:	4818      	ldr	r0, [pc, #96]	; (1358c <bt_hci_cmd_send_sync+0xc0>)
   1352a:	4639      	mov	r1, r7
   1352c:	f00c fd51 	bl	1ffd2 <printk>
   13530:	4040      	eors	r0, r0
   13532:	f380 8811 	msr	BASEPRI, r0
   13536:	f04f 0003 	mov.w	r0, #3
   1353a:	df02      	svc	2
	status = cmd(buf)->status;
   1353c:	4620      	mov	r0, r4
   1353e:	f003 fe0b 	bl	17158 <net_buf_id>
   13542:	230c      	movs	r3, #12
   13544:	4343      	muls	r3, r0
   13546:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   13548:	b156      	cbz	r6, 13560 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   1354a:	4620      	mov	r0, r4
   1354c:	f003 ff9c 	bl	17488 <net_buf_unref>
			return -EIO;
   13550:	2e09      	cmp	r6, #9
   13552:	bf0c      	ite	eq
   13554:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   13558:	f06f 0004 	mvnne.w	r0, #4
}
   1355c:	b007      	add	sp, #28
   1355e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   13560:	b115      	cbz	r5, 13568 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   13562:	602c      	str	r4, [r5, #0]
	return 0;
   13564:	4630      	mov	r0, r6
   13566:	e7f9      	b.n	1355c <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   13568:	4620      	mov	r0, r4
   1356a:	f003 ff8d 	bl	17488 <net_buf_unref>
	return 0;
   1356e:	4628      	mov	r0, r5
   13570:	e7f4      	b.n	1355c <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   13572:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13576:	e7f1      	b.n	1355c <bt_hci_cmd_send_sync+0x90>
   13578:	2000221c 	.word	0x2000221c
   1357c:	200003f0 	.word	0x200003f0
   13580:	000241be 	.word	0x000241be
   13584:	0002423d 	.word	0x0002423d
   13588:	000237c9 	.word	0x000237c9
   1358c:	00024246 	.word	0x00024246

00013590 <hci_init>:
{
   13590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   13592:	4d41      	ldr	r5, [pc, #260]	; (13698 <hci_init+0x108>)
   13594:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   13598:	6899      	ldr	r1, [r3, #8]
   1359a:	f011 0101 	ands.w	r1, r1, #1
   1359e:	d123      	bne.n	135e8 <hci_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   135a0:	aa01      	add	r2, sp, #4
   135a2:	f640 4003 	movw	r0, #3075	; 0xc03
   135a6:	f7ff ff91 	bl	134cc <bt_hci_cmd_send_sync>
		if (err) {
   135aa:	4604      	mov	r4, r0
   135ac:	2800      	cmp	r0, #0
   135ae:	d170      	bne.n	13692 <hci_init+0x102>
		hci_reset_complete(rsp);
   135b0:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
   135b2:	689b      	ldr	r3, [r3, #8]
	if (status) {
   135b4:	781b      	ldrb	r3, [r3, #0]
   135b6:	b9a3      	cbnz	r3, 135e2 <hci_init+0x52>
		bt_scan_reset();
   135b8:	f000 ff7a 	bl	144b0 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   135bc:	f3bf 8f5b 	dmb	ish
   135c0:	462b      	mov	r3, r5
   135c2:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   135c6:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   135ca:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   135ce:	f3bf 8f5b 	dmb	ish
   135d2:	e853 1f00 	ldrex	r1, [r3]
   135d6:	e843 2000 	strex	r0, r2, [r3]
   135da:	2800      	cmp	r0, #0
   135dc:	d1f9      	bne.n	135d2 <hci_init+0x42>
   135de:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   135e2:	9801      	ldr	r0, [sp, #4]
   135e4:	f003 ff50 	bl	17488 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   135e8:	aa01      	add	r2, sp, #4
   135ea:	2100      	movs	r1, #0
   135ec:	f241 0003 	movw	r0, #4099	; 0x1003
   135f0:	f7ff ff6c 	bl	134cc <bt_hci_cmd_send_sync>
	if (err) {
   135f4:	4604      	mov	r4, r0
   135f6:	2800      	cmp	r0, #0
   135f8:	d14b      	bne.n	13692 <hci_init+0x102>
	read_local_features_complete(rsp);
   135fa:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   135fc:	4e27      	ldr	r6, [pc, #156]	; (1369c <hci_init+0x10c>)
   135fe:	6893      	ldr	r3, [r2, #8]
   13600:	f853 0f01 	ldr.w	r0, [r3, #1]!
   13604:	6859      	ldr	r1, [r3, #4]
   13606:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   13608:	4610      	mov	r0, r2
   1360a:	f003 ff3d 	bl	17488 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1360e:	4621      	mov	r1, r4
   13610:	aa01      	add	r2, sp, #4
   13612:	f241 0001 	movw	r0, #4097	; 0x1001
   13616:	f7ff ff59 	bl	134cc <bt_hci_cmd_send_sync>
	if (err) {
   1361a:	4604      	mov	r4, r0
   1361c:	2800      	cmp	r0, #0
   1361e:	d138      	bne.n	13692 <hci_init+0x102>
	read_local_ver_complete(rsp);
   13620:	9801      	ldr	r0, [sp, #4]
   13622:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   13624:	785a      	ldrb	r2, [r3, #1]
   13626:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   1362a:	78d9      	ldrb	r1, [r3, #3]
   1362c:	789a      	ldrb	r2, [r3, #2]
   1362e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13632:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   13636:	791a      	ldrb	r2, [r3, #4]
   13638:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   1363c:	7a19      	ldrb	r1, [r3, #8]
   1363e:	79da      	ldrb	r2, [r3, #7]
   13640:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13644:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   13648:	795a      	ldrb	r2, [r3, #5]
   1364a:	799b      	ldrb	r3, [r3, #6]
   1364c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   13650:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   13654:	f003 ff18 	bl	17488 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   13658:	4621      	mov	r1, r4
   1365a:	aa01      	add	r2, sp, #4
   1365c:	f241 0002 	movw	r0, #4098	; 0x1002
   13660:	f7ff ff34 	bl	134cc <bt_hci_cmd_send_sync>
	if (err) {
   13664:	4604      	mov	r4, r0
   13666:	b9a0      	cbnz	r0, 13692 <hci_init+0x102>
	read_supported_commands_complete(rsp);
   13668:	9f01      	ldr	r7, [sp, #4]
   1366a:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   1366c:	1c53      	adds	r3, r2, #1
   1366e:	3241      	adds	r2, #65	; 0x41
   13670:	6818      	ldr	r0, [r3, #0]
   13672:	6859      	ldr	r1, [r3, #4]
   13674:	4634      	mov	r4, r6
   13676:	c403      	stmia	r4!, {r0, r1}
   13678:	3308      	adds	r3, #8
   1367a:	4293      	cmp	r3, r2
   1367c:	4626      	mov	r6, r4
   1367e:	d1f7      	bne.n	13670 <hci_init+0xe0>
	net_buf_unref(rsp);
   13680:	4638      	mov	r0, r7
   13682:	f003 ff01 	bl	17488 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   13686:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   1368a:	065e      	lsls	r6, r3, #25
   1368c:	d408      	bmi.n	136a0 <hci_init+0x110>
		return -ENODEV;
   1368e:	f06f 0412 	mvn.w	r4, #18
}
   13692:	4620      	mov	r0, r4
   13694:	b003      	add	sp, #12
   13696:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13698:	200002a0 	.word	0x200002a0
   1369c:	20000310 	.word	0x20000310
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   136a0:	aa01      	add	r2, sp, #4
   136a2:	2100      	movs	r1, #0
   136a4:	f242 0003 	movw	r0, #8195	; 0x2003
   136a8:	f7ff ff10 	bl	134cc <bt_hci_cmd_send_sync>
	if (err) {
   136ac:	4604      	mov	r4, r0
   136ae:	2800      	cmp	r0, #0
   136b0:	d1ef      	bne.n	13692 <hci_init+0x102>
	read_le_features_complete(rsp);
   136b2:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   136b4:	4e95      	ldr	r6, [pc, #596]	; (1390c <hci_init+0x37c>)
   136b6:	6893      	ldr	r3, [r2, #8]
   136b8:	f853 0f01 	ldr.w	r0, [r3, #1]!
   136bc:	6859      	ldr	r1, [r3, #4]
   136be:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   136c0:	4610      	mov	r0, r2
   136c2:	f003 fee1 	bl	17488 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   136c6:	4621      	mov	r1, r4
   136c8:	aa01      	add	r2, sp, #4
   136ca:	f242 0002 	movw	r0, #8194	; 0x2002
   136ce:	f7ff fefd 	bl	134cc <bt_hci_cmd_send_sync>
		if (err) {
   136d2:	4604      	mov	r4, r0
   136d4:	2800      	cmp	r0, #0
   136d6:	d1dc      	bne.n	13692 <hci_init+0x102>
		le_read_buffer_size_complete(rsp);
   136d8:	9b01      	ldr	r3, [sp, #4]
   136da:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   136dc:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   136e0:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   136e4:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   136e6:	b129      	cbz	r1, 136f4 <hci_init+0x164>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   136e8:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   136ea:	4611      	mov	r1, r2
   136ec:	f106 0028 	add.w	r0, r6, #40	; 0x28
   136f0:	f00f f997 	bl	22a22 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   136f4:	9801      	ldr	r0, [sp, #4]
   136f6:	f003 fec7 	bl	17488 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   136fa:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   136fe:	f016 0620 	ands.w	r6, r6, #32
   13702:	f000 80e7 	beq.w	138d4 <hci_init+0x344>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   13706:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   1370a:	071c      	lsls	r4, r3, #28
   1370c:	d511      	bpl.n	13732 <hci_init+0x1a2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1370e:	aa01      	add	r2, sp, #4
   13710:	2100      	movs	r1, #0
   13712:	f242 001c 	movw	r0, #8220	; 0x201c
   13716:	f7ff fed9 	bl	134cc <bt_hci_cmd_send_sync>
		if (err) {
   1371a:	4604      	mov	r4, r0
   1371c:	2800      	cmp	r0, #0
   1371e:	d1b8      	bne.n	13692 <hci_init+0x102>
		le_read_supp_states_complete(rsp);
   13720:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   13722:	6883      	ldr	r3, [r0, #8]
   13724:	f853 2f01 	ldr.w	r2, [r3, #1]!
   13728:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   1372a:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   1372e:	f003 feab 	bl	17488 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   13732:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   13736:	0698      	lsls	r0, r3, #26
   13738:	d523      	bpl.n	13782 <hci_init+0x1f2>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1373a:	f10d 0102 	add.w	r1, sp, #2
   1373e:	4668      	mov	r0, sp
   13740:	f00d fa3f 	bl	20bc2 <hci_le_read_max_data_len>
		if (err) {
   13744:	4604      	mov	r4, r0
   13746:	2800      	cmp	r0, #0
   13748:	d1a3      	bne.n	13692 <hci_init+0x102>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1374a:	2104      	movs	r1, #4
   1374c:	f242 0024 	movw	r0, #8228	; 0x2024
   13750:	f7ff fe74 	bl	1343c <bt_hci_cmd_create>
		if (!buf) {
   13754:	4606      	mov	r6, r0
   13756:	2800      	cmp	r0, #0
   13758:	f000 80c3 	beq.w	138e2 <hci_init+0x352>
   1375c:	2104      	movs	r1, #4
   1375e:	3008      	adds	r0, #8
   13760:	f003 ffc2 	bl	176e8 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   13764:	f8bd 3000 	ldrh.w	r3, [sp]
   13768:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1376a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1376e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   13770:	4622      	mov	r2, r4
   13772:	4631      	mov	r1, r6
   13774:	f242 0024 	movw	r0, #8228	; 0x2024
   13778:	f7ff fea8 	bl	134cc <bt_hci_cmd_send_sync>
		if (err) {
   1377c:	4604      	mov	r4, r0
   1377e:	2800      	cmp	r0, #0
   13780:	d187      	bne.n	13692 <hci_init+0x102>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   13782:	2108      	movs	r1, #8
   13784:	f242 0001 	movw	r0, #8193	; 0x2001
   13788:	f7ff fe58 	bl	1343c <bt_hci_cmd_create>
	if (!buf) {
   1378c:	4604      	mov	r4, r0
   1378e:	2800      	cmp	r0, #0
   13790:	f000 80a7 	beq.w	138e2 <hci_init+0x352>
   13794:	2108      	movs	r1, #8
   13796:	4408      	add	r0, r1
   13798:	f003 ffa6 	bl	176e8 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1379c:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   137a0:	f012 0f02 	tst.w	r2, #2
   137a4:	bf14      	ite	ne
   137a6:	232f      	movne	r3, #47	; 0x2f
   137a8:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   137aa:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   137ac:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   137b0:	bf48      	it	mi
   137b2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   137b6:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   137ba:	bf18      	it	ne
   137bc:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   137c0:	2200      	movs	r2, #0
   137c2:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   137c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   137c8:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   137ca:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   137cc:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   137ce:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   137d0:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   137d2:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   137d4:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   137d6:	4621      	mov	r1, r4
   137d8:	f242 0001 	movw	r0, #8193	; 0x2001
   137dc:	f7ff fe76 	bl	134cc <bt_hci_cmd_send_sync>
	if (err) {
   137e0:	4604      	mov	r4, r0
   137e2:	2800      	cmp	r0, #0
   137e4:	f47f af55 	bne.w	13692 <hci_init+0x102>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   137e8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   137ec:	069a      	lsls	r2, r3, #26
   137ee:	d41e      	bmi.n	1382e <hci_init+0x29e>
	if (bt_dev.le.acl_mtu) {
   137f0:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   137f4:	b9d9      	cbnz	r1, 1382e <hci_init+0x29e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   137f6:	aa01      	add	r2, sp, #4
   137f8:	f241 0005 	movw	r0, #4101	; 0x1005
   137fc:	f7ff fe66 	bl	134cc <bt_hci_cmd_send_sync>
	if (err) {
   13800:	4604      	mov	r4, r0
   13802:	2800      	cmp	r0, #0
   13804:	f47f af45 	bne.w	13692 <hci_init+0x102>
	if (bt_dev.le.acl_mtu) {
   13808:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   1380c:	b963      	cbnz	r3, 13828 <hci_init+0x298>
	read_buffer_size_complete(rsp);
   1380e:	9b01      	ldr	r3, [sp, #4]
   13810:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   13812:	785a      	ldrb	r2, [r3, #1]
   13814:	7899      	ldrb	r1, [r3, #2]
   13816:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1381a:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   1381e:	889a      	ldrh	r2, [r3, #4]
   13820:	483b      	ldr	r0, [pc, #236]	; (13910 <hci_init+0x380>)
   13822:	4611      	mov	r1, r2
   13824:	f00f f8fd 	bl	22a22 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   13828:	9801      	ldr	r0, [sp, #4]
   1382a:	f003 fe2d 	bl	17488 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1382e:	2108      	movs	r1, #8
   13830:	f640 4001 	movw	r0, #3073	; 0xc01
   13834:	f7ff fe02 	bl	1343c <bt_hci_cmd_create>
	if (!buf) {
   13838:	4604      	mov	r4, r0
   1383a:	2800      	cmp	r0, #0
   1383c:	d051      	beq.n	138e2 <hci_init+0x352>
   1383e:	2108      	movs	r1, #8
   13840:	4408      	add	r0, r1
   13842:	f003 ff51 	bl	176e8 <net_buf_simple_add>
	dst[0] = val;
   13846:	2310      	movs	r3, #16
   13848:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1384a:	2388      	movs	r3, #136	; 0x88
   1384c:	7043      	strb	r3, [r0, #1]
   1384e:	2302      	movs	r3, #2
	dst[0] = val;
   13850:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   13852:	70c3      	strb	r3, [r0, #3]
   13854:	2320      	movs	r3, #32
	dst[0] = val;
   13856:	7082      	strb	r2, [r0, #2]
   13858:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1385a:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1385c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1385e:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   13860:	4621      	mov	r1, r4
   13862:	f640 4001 	movw	r0, #3073	; 0xc01
   13866:	f7ff fe31 	bl	134cc <bt_hci_cmd_send_sync>
	if (err) {
   1386a:	4604      	mov	r4, r0
   1386c:	2800      	cmp	r0, #0
   1386e:	f47f af10 	bne.w	13692 <hci_init+0x102>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   13872:	4601      	mov	r1, r0
   13874:	aa01      	add	r2, sp, #4
   13876:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1387a:	f7ff fe27 	bl	134cc <bt_hci_cmd_send_sync>
	if (err) {
   1387e:	4604      	mov	r4, r0
   13880:	bb20      	cbnz	r0, 138cc <hci_init+0x33c>
	net_buf_unref(rsp);
   13882:	9801      	ldr	r0, [sp, #4]
   13884:	f003 fe00 	bl	17488 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   13888:	4621      	mov	r1, r4
   1388a:	aa01      	add	r2, sp, #4
   1388c:	f64f 4002 	movw	r0, #64514	; 0xfc02
   13890:	f7ff fe1c 	bl	134cc <bt_hci_cmd_send_sync>
	if (err) {
   13894:	4604      	mov	r4, r0
   13896:	b9c8      	cbnz	r0, 138cc <hci_init+0x33c>
	rp.cmds = (void *)rsp->data;
   13898:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   1389a:	6883      	ldr	r3, [r0, #8]
   1389c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   138a0:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
   138a4:	f003 fdf0 	bl	17488 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   138a8:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   138ac:	075b      	lsls	r3, r3, #29
   138ae:	d50d      	bpl.n	138cc <hci_init+0x33c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   138b0:	aa01      	add	r2, sp, #4
   138b2:	4621      	mov	r1, r4
   138b4:	f64f 4003 	movw	r0, #64515	; 0xfc03
   138b8:	f7ff fe08 	bl	134cc <bt_hci_cmd_send_sync>
		if (err) {
   138bc:	b930      	cbnz	r0, 138cc <hci_init+0x33c>
		rp.feat = (void *)rsp->data;
   138be:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   138c0:	6883      	ldr	r3, [r0, #8]
   138c2:	785b      	ldrb	r3, [r3, #1]
   138c4:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
   138c8:	f003 fdde 	bl	17488 <net_buf_unref>
	err = bt_id_init();
   138cc:	f000 fd50 	bl	14370 <bt_id_init>
   138d0:	4604      	mov	r4, r0
	if (err) {
   138d2:	e6de      	b.n	13692 <hci_init+0x102>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   138d4:	2102      	movs	r1, #2
   138d6:	f640 406d 	movw	r0, #3181	; 0xc6d
   138da:	f7ff fdaf 	bl	1343c <bt_hci_cmd_create>
		if (!buf) {
   138de:	4604      	mov	r4, r0
   138e0:	b910      	cbnz	r0, 138e8 <hci_init+0x358>
		return -ENOBUFS;
   138e2:	f06f 0468 	mvn.w	r4, #104	; 0x68
   138e6:	e6d4      	b.n	13692 <hci_init+0x102>
   138e8:	2102      	movs	r1, #2
   138ea:	3008      	adds	r0, #8
   138ec:	f003 fefc 	bl	176e8 <net_buf_simple_add>
		cp_le->le = 0x01;
   138f0:	2301      	movs	r3, #1
   138f2:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   138f4:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   138f6:	4621      	mov	r1, r4
   138f8:	4632      	mov	r2, r6
   138fa:	f640 406d 	movw	r0, #3181	; 0xc6d
   138fe:	f7ff fde5 	bl	134cc <bt_hci_cmd_send_sync>
		if (err) {
   13902:	4604      	mov	r4, r0
   13904:	2800      	cmp	r0, #0
   13906:	f43f aefe 	beq.w	13706 <hci_init+0x176>
   1390a:	e6c2      	b.n	13692 <hci_init+0x102>
   1390c:	20000370 	.word	0x20000370
   13910:	200003a0 	.word	0x200003a0

00013914 <bt_le_create_conn_legacy>:
{
   13914:	b5f0      	push	{r4, r5, r6, r7, lr}
   13916:	b085      	sub	sp, #20
   13918:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   1391a:	f10d 0103 	add.w	r1, sp, #3
   1391e:	2000      	movs	r0, #0
   13920:	f000 fd06 	bl	14330 <bt_id_set_create_conn_own_addr>
	if (err) {
   13924:	4604      	mov	r4, r0
   13926:	2800      	cmp	r0, #0
   13928:	d145      	bne.n	139b6 <bt_le_create_conn_legacy+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   1392a:	2119      	movs	r1, #25
   1392c:	f242 000d 	movw	r0, #8205	; 0x200d
   13930:	f7ff fd84 	bl	1343c <bt_hci_cmd_create>
	if (!buf) {
   13934:	4607      	mov	r7, r0
   13936:	2800      	cmp	r0, #0
   13938:	d040      	beq.n	139bc <bt_le_create_conn_legacy+0xa8>
   1393a:	2119      	movs	r1, #25
   1393c:	3008      	adds	r0, #8
   1393e:	f003 fed3 	bl	176e8 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   13942:	2219      	movs	r2, #25
   13944:	4605      	mov	r5, r0
   13946:	4621      	mov	r1, r4
   13948:	f00f f9af 	bl	22caa <memset>
	cp->own_addr_type = own_addr_type;
   1394c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13950:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   13952:	f106 0190 	add.w	r1, r6, #144	; 0x90
   13956:	1d68      	adds	r0, r5, #5
   13958:	f00d f860 	bl	20a1c <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   1395c:	4b19      	ldr	r3, [pc, #100]	; (139c4 <bt_le_create_conn_legacy+0xb0>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   1395e:	712c      	strb	r4, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   13960:	899a      	ldrh	r2, [r3, #12]
   13962:	802a      	strh	r2, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   13964:	89da      	ldrh	r2, [r3, #14]
   13966:	806a      	strh	r2, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   13968:	f8b6 20a8 	ldrh.w	r2, [r6, #168]	; 0xa8
   1396c:	f8a5 200d 	strh.w	r2, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   13970:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
   13974:	f8a5 200f 	strh.w	r2, [r5, #15]
	state->target = target;
   13978:	33cc      	adds	r3, #204	; 0xcc
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   1397a:	f8b6 20ac 	ldrh.w	r2, [r6, #172]	; 0xac
   1397e:	f8a5 2011 	strh.w	r2, [r5, #17]
	state->target = target;
   13982:	9301      	str	r3, [sp, #4]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   13984:	f8b6 20ae 	ldrh.w	r2, [r6, #174]	; 0xae
   13988:	f8a5 2013 	strh.w	r2, [r5, #19]
	state->bit = bit;
   1398c:	230b      	movs	r3, #11
   1398e:	9302      	str	r3, [sp, #8]
	cmd(buf)->state = state;
   13990:	4638      	mov	r0, r7
	state->val = val;
   13992:	2301      	movs	r3, #1
   13994:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = state;
   13998:	f003 fbde 	bl	17158 <net_buf_id>
   1399c:	4b0a      	ldr	r3, [pc, #40]	; (139c8 <bt_le_create_conn_legacy+0xb4>)
   1399e:	220c      	movs	r2, #12
   139a0:	fb02 3300 	mla	r3, r2, r0, r3
   139a4:	aa01      	add	r2, sp, #4
   139a6:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   139a8:	4639      	mov	r1, r7
   139aa:	4622      	mov	r2, r4
   139ac:	f242 000d 	movw	r0, #8205	; 0x200d
   139b0:	f7ff fd8c 	bl	134cc <bt_hci_cmd_send_sync>
   139b4:	4604      	mov	r4, r0
}
   139b6:	4620      	mov	r0, r4
   139b8:	b005      	add	sp, #20
   139ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   139bc:	f06f 0468 	mvn.w	r4, #104	; 0x68
   139c0:	e7f9      	b.n	139b6 <bt_le_create_conn_legacy+0xa2>
   139c2:	bf00      	nop
   139c4:	200002a0 	.word	0x200002a0
   139c8:	2000221c 	.word	0x2000221c

000139cc <bt_le_create_conn_cancel>:
{
   139cc:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   139ce:	2100      	movs	r1, #0
{
   139d0:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   139d2:	f242 000e 	movw	r0, #8206	; 0x200e
   139d6:	f7ff fd31 	bl	1343c <bt_hci_cmd_create>
	state->target = target;
   139da:	4b0c      	ldr	r3, [pc, #48]	; (13a0c <bt_le_create_conn_cancel+0x40>)
   139dc:	9301      	str	r3, [sp, #4]
	state->val = val;
   139de:	2500      	movs	r5, #0
	state->bit = bit;
   139e0:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   139e2:	4604      	mov	r4, r0
	state->bit = bit;
   139e4:	9302      	str	r3, [sp, #8]
	state->val = val;
   139e6:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = state;
   139ea:	f003 fbb5 	bl	17158 <net_buf_id>
   139ee:	4b08      	ldr	r3, [pc, #32]	; (13a10 <bt_le_create_conn_cancel+0x44>)
   139f0:	220c      	movs	r2, #12
   139f2:	fb02 3000 	mla	r0, r2, r0, r3
   139f6:	ab01      	add	r3, sp, #4
   139f8:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   139fa:	462a      	mov	r2, r5
   139fc:	4621      	mov	r1, r4
   139fe:	f242 000e 	movw	r0, #8206	; 0x200e
   13a02:	f7ff fd63 	bl	134cc <bt_hci_cmd_send_sync>
}
   13a06:	b005      	add	sp, #20
   13a08:	bd30      	pop	{r4, r5, pc}
   13a0a:	bf00      	nop
   13a0c:	2000036c 	.word	0x2000036c
   13a10:	2000221c 	.word	0x2000221c

00013a14 <bt_send>:
	return bt_dev.drv->send(buf);
   13a14:	4b02      	ldr	r3, [pc, #8]	; (13a20 <bt_send+0xc>)
   13a16:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   13a1a:	691b      	ldr	r3, [r3, #16]
   13a1c:	4718      	bx	r3
   13a1e:	bf00      	nop
   13a20:	200002a0 	.word	0x200002a0

00013a24 <bt_hci_cmd_send>:
{
   13a24:	b538      	push	{r3, r4, r5, lr}
   13a26:	4605      	mov	r5, r0
	if (!buf) {
   13a28:	460c      	mov	r4, r1
   13a2a:	b919      	cbnz	r1, 13a34 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   13a2c:	f7ff fd06 	bl	1343c <bt_hci_cmd_create>
		if (!buf) {
   13a30:	4604      	mov	r4, r0
   13a32:	b198      	cbz	r0, 13a5c <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   13a34:	f640 4335 	movw	r3, #3125	; 0xc35
   13a38:	429d      	cmp	r5, r3
   13a3a:	d109      	bne.n	13a50 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
   13a3c:	4620      	mov	r0, r4
   13a3e:	f7ff ffe9 	bl	13a14 <bt_send>
		if (err) {
   13a42:	4605      	mov	r5, r0
   13a44:	b110      	cbz	r0, 13a4c <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   13a46:	4620      	mov	r0, r4
   13a48:	f003 fd1e 	bl	17488 <net_buf_unref>
}
   13a4c:	4628      	mov	r0, r5
   13a4e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   13a50:	4804      	ldr	r0, [pc, #16]	; (13a64 <bt_hci_cmd_send+0x40>)
   13a52:	4621      	mov	r1, r4
   13a54:	f003 fce4 	bl	17420 <net_buf_put>
	return 0;
   13a58:	2500      	movs	r5, #0
   13a5a:	e7f7      	b.n	13a4c <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   13a5c:	f06f 0568 	mvn.w	r5, #104	; 0x68
   13a60:	e7f4      	b.n	13a4c <bt_hci_cmd_send+0x28>
   13a62:	bf00      	nop
   13a64:	200003f0 	.word	0x200003f0

00013a68 <conn_auto_initiate>:
{
   13a68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   13a6a:	7a83      	ldrb	r3, [r0, #10]
   13a6c:	2b07      	cmp	r3, #7
{
   13a6e:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   13a70:	d121      	bne.n	13ab6 <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13a72:	f3bf 8f5b 	dmb	ish
   13a76:	6843      	ldr	r3, [r0, #4]
   13a78:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   13a7c:	049b      	lsls	r3, r3, #18
   13a7e:	f100 0604 	add.w	r6, r0, #4
   13a82:	d41a      	bmi.n	13aba <conn_auto_initiate+0x52>
   13a84:	78c3      	ldrb	r3, [r0, #3]
   13a86:	b123      	cbz	r3, 13a92 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   13a88:	4b29      	ldr	r3, [pc, #164]	; (13b30 <conn_auto_initiate+0xc8>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   13a8a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   13a8e:	071d      	lsls	r5, r3, #28
   13a90:	d513      	bpl.n	13aba <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   13a92:	2102      	movs	r1, #2
   13a94:	f242 0016 	movw	r0, #8214	; 0x2016
   13a98:	f7ff fcd0 	bl	1343c <bt_hci_cmd_create>
	if (!buf) {
   13a9c:	4605      	mov	r5, r0
   13a9e:	b160      	cbz	r0, 13aba <conn_auto_initiate+0x52>
   13aa0:	2102      	movs	r1, #2
   13aa2:	3008      	adds	r0, #8
   13aa4:	f003 fe20 	bl	176e8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   13aa8:	8823      	ldrh	r3, [r4, #0]
   13aaa:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   13aac:	4629      	mov	r1, r5
   13aae:	f242 0016 	movw	r0, #8214	; 0x2016
   13ab2:	f7ff ffb7 	bl	13a24 <bt_hci_cmd_send>
}
   13ab6:	b004      	add	sp, #16
   13ab8:	bd70      	pop	{r4, r5, r6, pc}
   13aba:	f3bf 8f5b 	dmb	ish
   13abe:	6863      	ldr	r3, [r4, #4]
   13ac0:	4d1b      	ldr	r5, [pc, #108]	; (13b30 <conn_auto_initiate+0xc8>)
   13ac2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   13ac6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   13aca:	f3c3 3100 	ubfx	r1, r3, #12, #1
   13ace:	d117      	bne.n	13b00 <conn_auto_initiate+0x98>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   13ad0:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   13ad4:	07d8      	lsls	r0, r3, #31
   13ad6:	d513      	bpl.n	13b00 <conn_auto_initiate+0x98>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   13ad8:	2302      	movs	r3, #2
   13ada:	9100      	str	r1, [sp, #0]
   13adc:	461a      	mov	r2, r3
   13ade:	4620      	mov	r0, r4
   13ae0:	f00d f8e1 	bl	20ca6 <bt_le_set_phy>
		if (!err) {
   13ae4:	b960      	cbnz	r0, 13b00 <conn_auto_initiate+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13ae6:	f3bf 8f5b 	dmb	ish
   13aea:	e856 3f00 	ldrex	r3, [r6]
   13aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13af2:	e846 3200 	strex	r2, r3, [r6]
   13af6:	2a00      	cmp	r2, #0
   13af8:	d1f7      	bne.n	13aea <conn_auto_initiate+0x82>
   13afa:	f3bf 8f5b 	dmb	ish
			return;
   13afe:	e7da      	b.n	13ab6 <conn_auto_initiate+0x4e>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   13b00:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   13b04:	069a      	lsls	r2, r3, #26
   13b06:	d5d6      	bpl.n	13ab6 <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   13b08:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   13b0c:	689b      	ldr	r3, [r3, #8]
   13b0e:	079b      	lsls	r3, r3, #30
   13b10:	d5d1      	bpl.n	13ab6 <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   13b12:	f10d 010e 	add.w	r1, sp, #14
   13b16:	a803      	add	r0, sp, #12
   13b18:	f00d f853 	bl	20bc2 <hci_le_read_max_data_len>
			if (!err) {
   13b1c:	2800      	cmp	r0, #0
   13b1e:	d1ca      	bne.n	13ab6 <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   13b20:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   13b24:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   13b28:	4620      	mov	r0, r4
   13b2a:	f00d f89f 	bl	20c6c <bt_le_set_data_len>
		}
   13b2e:	e7c2      	b.n	13ab6 <conn_auto_initiate+0x4e>
   13b30:	200002a0 	.word	0x200002a0

00013b34 <bt_hci_le_enh_conn_complete>:
{
   13b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13b38:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   13b3c:	4a5e      	ldr	r2, [pc, #376]	; (13cb8 <bt_hci_le_enh_conn_complete+0x184>)
	if (evt->status) {
   13b3e:	7806      	ldrb	r6, [r0, #0]
		if (disconnected_handles[i] == handle) {
   13b40:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   13b42:	ea6f 5308 	mvn.w	r3, r8, lsl #20
   13b46:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   13b4a:	b29b      	uxth	r3, r3
   13b4c:	4299      	cmp	r1, r3
   13b4e:	f04f 0700 	mov.w	r7, #0
			disconnected_handles[i] = 0;
   13b52:	bf08      	it	eq
   13b54:	8017      	strheq	r7, [r2, #0]
{
   13b56:	b085      	sub	sp, #20
   13b58:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13b5a:	fa1f f988 	uxth.w	r9, r8
			return true;
   13b5e:	bf08      	it	eq
   13b60:	2701      	moveq	r7, #1
	if (evt->status) {
   13b62:	b306      	cbz	r6, 13ba6 <bt_hci_le_enh_conn_complete+0x72>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13b64:	2e02      	cmp	r6, #2
   13b66:	d11b      	bne.n	13ba0 <bt_hci_le_enh_conn_complete+0x6c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   13b68:	2100      	movs	r1, #0
   13b6a:	2206      	movs	r2, #6
   13b6c:	4608      	mov	r0, r1
   13b6e:	f001 faab 	bl	150c8 <bt_conn_lookup_state_le>
	if (!conn) {
   13b72:	4604      	mov	r4, r0
   13b74:	b188      	cbz	r0, 13b9a <bt_hci_le_enh_conn_complete+0x66>
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   13b76:	7246      	strb	r6, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13b78:	2100      	movs	r1, #0
   13b7a:	f001 f88b 	bl	14c94 <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13b7e:	f3bf 8f5b 	dmb	ish
   13b82:	6863      	ldr	r3, [r4, #4]
   13b84:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   13b88:	07db      	lsls	r3, r3, #31
   13b8a:	d503      	bpl.n	13b94 <bt_hci_le_enh_conn_complete+0x60>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   13b8c:	4631      	mov	r1, r6
   13b8e:	4620      	mov	r0, r4
   13b90:	f001 f880 	bl	14c94 <bt_conn_set_state>
	bt_conn_unref(conn);
   13b94:	4620      	mov	r0, r4
   13b96:	f001 f847 	bl	14c28 <bt_conn_unref>
			bt_le_scan_update(false);
   13b9a:	2000      	movs	r0, #0
   13b9c:	f000 fc8e 	bl	144bc <bt_le_scan_update>
}
   13ba0:	b005      	add	sp, #20
   13ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   13ba6:	7903      	ldrb	r3, [r0, #4]
   13ba8:	3b02      	subs	r3, #2
   13baa:	2b01      	cmp	r3, #1
   13bac:	f100 0404 	add.w	r4, r0, #4
   13bb0:	d82d      	bhi.n	13c0e <bt_hci_le_enh_conn_complete+0xda>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   13bb2:	4621      	mov	r1, r4
   13bb4:	a802      	add	r0, sp, #8
   13bb6:	f00c ff31 	bl	20a1c <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   13bba:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   13bbe:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   13bc2:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   13bc4:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   13bc8:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   13bcc:	f00c ff2d 	bl	20a2a <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   13bd0:	2301      	movs	r3, #1
   13bd2:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   13bd6:	78e8      	ldrb	r0, [r5, #3]
   13bd8:	b9a0      	cbnz	r0, 13c04 <bt_hci_le_enh_conn_complete+0xd0>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   13bda:	2206      	movs	r2, #6
   13bdc:	a902      	add	r1, sp, #8
   13bde:	f001 fa73 	bl	150c8 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13be2:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   13be4:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13be6:	b963      	cbnz	r3, 13c02 <bt_hci_le_enh_conn_complete+0xce>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13be8:	f3bf 8f5b 	dmb	ish
   13bec:	4b33      	ldr	r3, [pc, #204]	; (13cbc <bt_hci_le_enh_conn_complete+0x188>)
   13bee:	e853 2f00 	ldrex	r2, [r3]
   13bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   13bf6:	e843 2100 	strex	r1, r2, [r3]
   13bfa:	2900      	cmp	r1, #0
   13bfc:	d1f7      	bne.n	13bee <bt_hci_le_enh_conn_complete+0xba>
   13bfe:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   13c02:	b9bc      	cbnz	r4, 13c34 <bt_hci_le_enh_conn_complete+0x100>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   13c04:	211f      	movs	r1, #31
   13c06:	4648      	mov	r0, r9
   13c08:	f00c fff5 	bl	20bf6 <bt_hci_disconnect>
		return;
   13c0c:	e7c8      	b.n	13ba0 <bt_hci_le_enh_conn_complete+0x6c>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   13c0e:	78c3      	ldrb	r3, [r0, #3]
   13c10:	2b01      	cmp	r3, #1
   13c12:	bf04      	itt	eq
   13c14:	4b2a      	ldreq	r3, [pc, #168]	; (13cc0 <bt_hci_le_enh_conn_complete+0x18c>)
   13c16:	f893 6067 	ldrbeq.w	r6, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   13c1a:	4621      	mov	r1, r4
   13c1c:	4630      	mov	r0, r6
   13c1e:	f00d f999 	bl	20f54 <bt_lookup_id_addr>
   13c22:	4601      	mov	r1, r0
   13c24:	a802      	add	r0, sp, #8
   13c26:	f00c fef9 	bl	20a1c <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   13c2a:	4621      	mov	r1, r4
   13c2c:	4668      	mov	r0, sp
   13c2e:	f00c fef5 	bl	20a1c <bt_addr_le_copy>
   13c32:	e7d0      	b.n	13bd6 <bt_hci_le_enh_conn_complete+0xa2>
	conn->handle = handle;
   13c34:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   13c36:	a902      	add	r1, sp, #8
	conn->handle = handle;
   13c38:	f820 8b90 	strh.w	r8, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   13c3c:	f00c feee 	bl	20a1c <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   13c40:	7e2a      	ldrb	r2, [r5, #24]
   13c42:	7deb      	ldrb	r3, [r5, #23]
   13c44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13c48:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   13c4c:	7eaa      	ldrb	r2, [r5, #26]
   13c4e:	7e6b      	ldrb	r3, [r5, #25]
   13c50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13c54:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   13c58:	7f2a      	ldrb	r2, [r5, #28]
   13c5a:	7eeb      	ldrb	r3, [r5, #27]
   13c5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13c60:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   13c64:	78eb      	ldrb	r3, [r5, #3]
   13c66:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   13c68:	2200      	movs	r2, #0
   13c6a:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13c6c:	b96b      	cbnz	r3, 13c8a <bt_hci_le_enh_conn_complete+0x156>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   13c6e:	4669      	mov	r1, sp
   13c70:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   13c74:	f00c fed2 	bl	20a1c <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   13c78:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   13c7a:	4b11      	ldr	r3, [pc, #68]	; (13cc0 <bt_hci_le_enh_conn_complete+0x18c>)
					&bt_dev.id_addr[conn->id]);
   13c7c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   13c80:	4419      	add	r1, r3
   13c82:	f104 0097 	add.w	r0, r4, #151	; 0x97
   13c86:	f00c fec9 	bl	20a1c <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   13c8a:	2107      	movs	r1, #7
   13c8c:	4620      	mov	r0, r4
   13c8e:	f001 f801 	bl	14c94 <bt_conn_set_state>
	if (is_disconnected) {
   13c92:	b11f      	cbz	r7, 13c9c <bt_hci_le_enh_conn_complete+0x168>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   13c94:	2101      	movs	r1, #1
   13c96:	4620      	mov	r0, r4
   13c98:	f000 fffc 	bl	14c94 <bt_conn_set_state>
	bt_conn_connected(conn);
   13c9c:	4620      	mov	r0, r4
   13c9e:	f00d fa4e 	bl	2113e <bt_conn_connected>
	conn_auto_initiate(conn);
   13ca2:	4620      	mov	r0, r4
   13ca4:	f7ff fee0 	bl	13a68 <conn_auto_initiate>
	bt_conn_unref(conn);
   13ca8:	4620      	mov	r0, r4
   13caa:	f000 ffbd 	bl	14c28 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13cae:	78e3      	ldrb	r3, [r4, #3]
   13cb0:	2b00      	cmp	r3, #0
   13cb2:	f47f af75 	bne.w	13ba0 <bt_hci_le_enh_conn_complete+0x6c>
   13cb6:	e770      	b.n	13b9a <bt_hci_le_enh_conn_complete+0x66>
   13cb8:	20002d9c 	.word	0x20002d9c
   13cbc:	2000036c 	.word	0x2000036c
   13cc0:	200002a0 	.word	0x200002a0

00013cc4 <hci_tx_thread>:
{
   13cc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   13cc8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 13dd8 <hci_tx_thread+0x114>
		BT_ASSERT(err == 0);
   13ccc:	f8df a120 	ldr.w	sl, [pc, #288]	; 13df0 <hci_tx_thread+0x12c>
		events[0].state = K_POLL_STATE_NOT_READY;
   13cd0:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   13cd4:	483f      	ldr	r0, [pc, #252]	; (13dd4 <hci_tx_thread+0x110>)
		events[0].state = K_POLL_STATE_NOT_READY;
   13cd6:	f36f 3352 	bfc	r3, #13, #6
   13cda:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   13cde:	f000 ff65 	bl	14bac <bt_conn_prepare_events>
   13ce2:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   13ce4:	483c      	ldr	r0, [pc, #240]	; (13dd8 <hci_tx_thread+0x114>)
   13ce6:	f04f 32ff 	mov.w	r2, #4294967295
   13cea:	f04f 33ff 	mov.w	r3, #4294967295
   13cee:	4629      	mov	r1, r5
   13cf0:	f009 fb4c 	bl	1d38c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   13cf4:	b160      	cbz	r0, 13d10 <hci_tx_thread+0x4c>
   13cf6:	4939      	ldr	r1, [pc, #228]	; (13ddc <hci_tx_thread+0x118>)
   13cf8:	4839      	ldr	r0, [pc, #228]	; (13de0 <hci_tx_thread+0x11c>)
   13cfa:	f640 1389 	movw	r3, #2441	; 0x989
   13cfe:	4652      	mov	r2, sl
   13d00:	f00c f967 	bl	1ffd2 <printk>
   13d04:	4040      	eors	r0, r0
   13d06:	f380 8811 	msr	BASEPRI, r0
   13d0a:	f04f 0003 	mov.w	r0, #3
   13d0e:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   13d10:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 13df4 <hci_tx_thread+0x130>
{
   13d14:	4e30      	ldr	r6, [pc, #192]	; (13dd8 <hci_tx_thread+0x114>)
	return z_impl_k_sem_take(sem, timeout);
   13d16:	f5a9 77a8 	sub.w	r7, r9, #336	; 0x150
   13d1a:	f1a9 0b38 	sub.w	fp, r9, #56	; 0x38
	for (; count; ev++, count--) {
   13d1e:	b915      	cbnz	r5, 13d26 <hci_tx_thread+0x62>
	z_impl_k_yield();
   13d20:	f008 fa82 	bl	1c228 <z_impl_k_yield>
	while (1) {
   13d24:	e7d4      	b.n	13cd0 <hci_tx_thread+0xc>
		switch (ev->state) {
   13d26:	68f3      	ldr	r3, [r6, #12]
   13d28:	f3c3 3345 	ubfx	r3, r3, #13, #6
   13d2c:	2b04      	cmp	r3, #4
   13d2e:	d147      	bne.n	13dc0 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   13d30:	7b33      	ldrb	r3, [r6, #12]
   13d32:	2b00      	cmp	r3, #0
   13d34:	d147      	bne.n	13dc6 <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   13d36:	2200      	movs	r2, #0
   13d38:	2300      	movs	r3, #0
   13d3a:	4648      	mov	r0, r9
   13d3c:	f003 fb12 	bl	17364 <net_buf_get>
	BT_ASSERT(buf);
   13d40:	4604      	mov	r4, r0
   13d42:	b960      	cbnz	r0, 13d5e <hci_tx_thread+0x9a>
   13d44:	4927      	ldr	r1, [pc, #156]	; (13de4 <hci_tx_thread+0x120>)
   13d46:	4826      	ldr	r0, [pc, #152]	; (13de0 <hci_tx_thread+0x11c>)
   13d48:	f44f 6312 	mov.w	r3, #2336	; 0x920
   13d4c:	4652      	mov	r2, sl
   13d4e:	f00c f940 	bl	1ffd2 <printk>
   13d52:	4040      	eors	r0, r0
   13d54:	f380 8811 	msr	BASEPRI, r0
   13d58:	f04f 0003 	mov.w	r0, #3
   13d5c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   13d5e:	f04f 32ff 	mov.w	r2, #4294967295
   13d62:	f04f 33ff 	mov.w	r3, #4294967295
   13d66:	4658      	mov	r0, fp
   13d68:	f006 fdcc 	bl	1a904 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   13d6c:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   13d70:	b120      	cbz	r0, 13d7c <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   13d72:	f003 fb89 	bl	17488 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13d76:	2300      	movs	r3, #0
   13d78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   13d7c:	4620      	mov	r0, r4
   13d7e:	f003 fbc9 	bl	17514 <net_buf_ref>
   13d82:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
   13d86:	4620      	mov	r0, r4
   13d88:	f7ff fe44 	bl	13a14 <bt_send>
	if (err) {
   13d8c:	b1c0      	cbz	r0, 13dc0 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
   13d8e:	4816      	ldr	r0, [pc, #88]	; (13de8 <hci_tx_thread+0x124>)
   13d90:	f006 fd74 	bl	1a87c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   13d94:	4620      	mov	r0, r4
   13d96:	f003 f9df 	bl	17158 <net_buf_id>
   13d9a:	4b14      	ldr	r3, [pc, #80]	; (13dec <hci_tx_thread+0x128>)
   13d9c:	220c      	movs	r2, #12
   13d9e:	fb02 3000 	mla	r0, r2, r0, r3
   13da2:	211f      	movs	r1, #31
   13da4:	8840      	ldrh	r0, [r0, #2]
   13da6:	4622      	mov	r2, r4
   13da8:	f7ff fa9a 	bl	132e0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   13dac:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   13db0:	f003 fb6a 	bl	17488 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13db4:	2300      	movs	r3, #0
		net_buf_unref(buf);
   13db6:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   13db8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
   13dbc:	f003 fb64 	bl	17488 <net_buf_unref>
	for (; count; ev++, count--) {
   13dc0:	3614      	adds	r6, #20
   13dc2:	3d01      	subs	r5, #1
   13dc4:	e7ab      	b.n	13d1e <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   13dc6:	2b01      	cmp	r3, #1
   13dc8:	d1fa      	bne.n	13dc0 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
   13dca:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   13dcc:	3838      	subs	r0, #56	; 0x38
   13dce:	f001 fb15 	bl	153fc <bt_conn_process_tx>
   13dd2:	e7f5      	b.n	13dc0 <hci_tx_thread+0xfc>
   13dd4:	20000474 	.word	0x20000474
   13dd8:	20000460 	.word	0x20000460
   13ddc:	0002423d 	.word	0x0002423d
   13de0:	000237c9 	.word	0x000237c9
   13de4:	00024239 	.word	0x00024239
   13de8:	200003b8 	.word	0x200003b8
   13dec:	2000221c 	.word	0x2000221c
   13df0:	000241be 	.word	0x000241be
   13df4:	200003f0 	.word	0x200003f0

00013df8 <hci_event_prio>:
{
   13df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13dfc:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   13dfe:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   13e02:	4630      	mov	r0, r6
   13e04:	f00e fc1b 	bl	2263e <net_buf_simple_headroom>
	state->len = buf->len;
   13e08:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13e0c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   13e10:	4605      	mov	r5, r0
   13e12:	d80c      	bhi.n	13e2e <hci_event_prio+0x36>
   13e14:	4a1c      	ldr	r2, [pc, #112]	; (13e88 <hci_event_prio+0x90>)
   13e16:	491d      	ldr	r1, [pc, #116]	; (13e8c <hci_event_prio+0x94>)
   13e18:	481d      	ldr	r0, [pc, #116]	; (13e90 <hci_event_prio+0x98>)
   13e1a:	f640 5315 	movw	r3, #3349	; 0xd15
   13e1e:	f00c f8d8 	bl	1ffd2 <printk>
   13e22:	4040      	eors	r0, r0
   13e24:	f380 8811 	msr	BASEPRI, r0
   13e28:	f04f 0003 	mov.w	r0, #3
   13e2c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   13e2e:	2102      	movs	r1, #2
   13e30:	4630      	mov	r0, r6
   13e32:	f003 fc37 	bl	176a4 <net_buf_simple_pull_mem>
   13e36:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13e38:	7800      	ldrb	r0, [r0, #0]
   13e3a:	f00c fdb9 	bl	209b0 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   13e3e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13e40:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   13e42:	d40c      	bmi.n	13e5e <hci_event_prio+0x66>
   13e44:	4a10      	ldr	r2, [pc, #64]	; (13e88 <hci_event_prio+0x90>)
   13e46:	4913      	ldr	r1, [pc, #76]	; (13e94 <hci_event_prio+0x9c>)
   13e48:	4811      	ldr	r0, [pc, #68]	; (13e90 <hci_event_prio+0x98>)
   13e4a:	f640 5319 	movw	r3, #3353	; 0xd19
   13e4e:	f00c f8c0 	bl	1ffd2 <printk>
   13e52:	4040      	eors	r0, r0
   13e54:	f380 8811 	msr	BASEPRI, r0
   13e58:	f04f 0003 	mov.w	r0, #3
   13e5c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   13e5e:	2305      	movs	r3, #5
   13e60:	4a0d      	ldr	r2, [pc, #52]	; (13e98 <hci_event_prio+0xa0>)
   13e62:	7838      	ldrb	r0, [r7, #0]
   13e64:	4621      	mov	r1, r4
   13e66:	f00c fdb5 	bl	209d4 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   13e6a:	07b3      	lsls	r3, r6, #30
   13e6c:	d507      	bpl.n	13e7e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   13e6e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   13e70:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   13e74:	fa10 f585 	uxtah	r5, r0, r5
   13e78:	60a5      	str	r5, [r4, #8]
}
   13e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   13e7e:	4620      	mov	r0, r4
}
   13e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   13e84:	f003 bb00 	b.w	17488 <net_buf_unref>
   13e88:	000241be 	.word	0x000241be
   13e8c:	000241f2 	.word	0x000241f2
   13e90:	000237c9 	.word	0x000237c9
   13e94:	00024266 	.word	0x00024266
   13e98:	00023170 	.word	0x00023170

00013e9c <bt_recv>:
{
   13e9c:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   13e9e:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   13ea0:	2b01      	cmp	r3, #1
{
   13ea2:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   13ea4:	d007      	beq.n	13eb6 <bt_recv+0x1a>
   13ea6:	2b03      	cmp	r3, #3
   13ea8:	d113      	bne.n	13ed2 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   13eaa:	480c      	ldr	r0, [pc, #48]	; (13edc <bt_recv+0x40>)
   13eac:	4629      	mov	r1, r5
   13eae:	f003 fab7 	bl	17420 <net_buf_put>
		return 0;
   13eb2:	2000      	movs	r0, #0
   13eb4:	e00c      	b.n	13ed0 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13eb6:	6883      	ldr	r3, [r0, #8]
   13eb8:	7818      	ldrb	r0, [r3, #0]
   13eba:	f00c fd79 	bl	209b0 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   13ebe:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13ec0:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   13ec2:	d502      	bpl.n	13eca <bt_recv+0x2e>
			hci_event_prio(buf);
   13ec4:	4628      	mov	r0, r5
   13ec6:	f7ff ff97 	bl	13df8 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   13eca:	f014 0002 	ands.w	r0, r4, #2
   13ece:	d1ec      	bne.n	13eaa <bt_recv+0xe>
}
   13ed0:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   13ed2:	f003 fad9 	bl	17488 <net_buf_unref>
		return -EINVAL;
   13ed6:	f06f 0015 	mvn.w	r0, #21
   13eda:	e7f9      	b.n	13ed0 <bt_recv+0x34>
   13edc:	200003d4 	.word	0x200003d4

00013ee0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   13ee0:	4a08      	ldr	r2, [pc, #32]	; (13f04 <bt_hci_driver_register+0x24>)
{
   13ee2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   13ee4:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   13ee8:	b930      	cbnz	r0, 13ef8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   13eea:	68d9      	ldr	r1, [r3, #12]
   13eec:	b139      	cbz	r1, 13efe <bt_hci_driver_register+0x1e>
   13eee:	6919      	ldr	r1, [r3, #16]
   13ef0:	b129      	cbz	r1, 13efe <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   13ef2:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	return 0;
   13ef6:	4770      	bx	lr
		return -EALREADY;
   13ef8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13efc:	4770      	bx	lr
		return -EINVAL;
   13efe:	f06f 0015 	mvn.w	r0, #21
}
   13f02:	4770      	bx	lr
   13f04:	200002a0 	.word	0x200002a0

00013f08 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13f08:	4b07      	ldr	r3, [pc, #28]	; (13f28 <bt_finalize_init+0x20>)
   13f0a:	f3bf 8f5b 	dmb	ish
   13f0e:	e853 2f00 	ldrex	r2, [r3]
   13f12:	f042 0202 	orr.w	r2, r2, #2
   13f16:	e843 2100 	strex	r1, r2, [r3]
   13f1a:	2900      	cmp	r1, #0
   13f1c:	d1f7      	bne.n	13f0e <bt_finalize_init+0x6>
   13f1e:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   13f22:	2000      	movs	r0, #0
   13f24:	f000 baca 	b.w	144bc <bt_le_scan_update>
   13f28:	2000036c 	.word	0x2000036c

00013f2c <init_work>:
{
   13f2c:	b510      	push	{r4, lr}
	err = hci_init();
   13f2e:	f7ff fb2f 	bl	13590 <hci_init>
	if (err) {
   13f32:	4604      	mov	r4, r0
   13f34:	b928      	cbnz	r0, 13f42 <init_work+0x16>
		err = bt_conn_init();
   13f36:	f001 fac9 	bl	154cc <bt_conn_init>
		if (err) {
   13f3a:	4604      	mov	r4, r0
   13f3c:	b908      	cbnz	r0, 13f42 <init_work+0x16>
	bt_finalize_init();
   13f3e:	f7ff ffe3 	bl	13f08 <bt_finalize_init>
	if (ready_cb) {
   13f42:	4b04      	ldr	r3, [pc, #16]	; (13f54 <init_work+0x28>)
   13f44:	681b      	ldr	r3, [r3, #0]
   13f46:	b11b      	cbz	r3, 13f50 <init_work+0x24>
		ready_cb(err);
   13f48:	4620      	mov	r0, r4
}
   13f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   13f4e:	4718      	bx	r3
}
   13f50:	bd10      	pop	{r4, pc}
   13f52:	bf00      	nop
   13f54:	20002234 	.word	0x20002234

00013f58 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   13f58:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   13f5c:	4d32      	ldr	r5, [pc, #200]	; (14028 <bt_enable+0xd0>)
   13f5e:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
{
   13f62:	b088      	sub	sp, #32
   13f64:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   13f66:	2b00      	cmp	r3, #0
   13f68:	d058      	beq.n	1401c <bt_enable+0xc4>
   13f6a:	f3bf 8f5b 	dmb	ish
   13f6e:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   13f72:	e853 4f00 	ldrex	r4, [r3]
   13f76:	f044 0201 	orr.w	r2, r4, #1
   13f7a:	e843 2100 	strex	r1, r2, [r3]
   13f7e:	2900      	cmp	r1, #0
   13f80:	d1f7      	bne.n	13f72 <bt_enable+0x1a>
   13f82:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13f86:	f014 0401 	ands.w	r4, r4, #1
   13f8a:	d14a      	bne.n	14022 <bt_enable+0xca>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   13f8c:	4b27      	ldr	r3, [pc, #156]	; (1402c <bt_enable+0xd4>)
   13f8e:	f04f 0800 	mov.w	r8, #0
   13f92:	601e      	str	r6, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   13f94:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13f98:	f06f 0308 	mvn.w	r3, #8
   13f9c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   13fa0:	e9cd 8906 	strd	r8, r9, [sp, #24]
   13fa4:	e9cd 4400 	strd	r4, r4, [sp]
   13fa8:	4b21      	ldr	r3, [pc, #132]	; (14030 <bt_enable+0xd8>)
   13faa:	4922      	ldr	r1, [pc, #136]	; (14034 <bt_enable+0xdc>)
   13fac:	9404      	str	r4, [sp, #16]
   13fae:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   13fb2:	4821      	ldr	r0, [pc, #132]	; (14038 <bt_enable+0xe0>)
   13fb4:	f006 f806 	bl	19fc4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13fb8:	4920      	ldr	r1, [pc, #128]	; (1403c <bt_enable+0xe4>)
   13fba:	481f      	ldr	r0, [pc, #124]	; (14038 <bt_enable+0xe0>)
   13fbc:	f00e fcf0 	bl	229a0 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13fc0:	f06f 0307 	mvn.w	r3, #7
   13fc4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   13fc8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   13fcc:	e9cd 4400 	strd	r4, r4, [sp]
   13fd0:	4b1b      	ldr	r3, [pc, #108]	; (14040 <bt_enable+0xe8>)
   13fd2:	491c      	ldr	r1, [pc, #112]	; (14044 <bt_enable+0xec>)
   13fd4:	9404      	str	r4, [sp, #16]
   13fd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13fda:	481b      	ldr	r0, [pc, #108]	; (14048 <bt_enable+0xf0>)
   13fdc:	f005 fff2 	bl	19fc4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13fe0:	491a      	ldr	r1, [pc, #104]	; (1404c <bt_enable+0xf4>)
   13fe2:	4819      	ldr	r0, [pc, #100]	; (14048 <bt_enable+0xf0>)
   13fe4:	f00e fcdc 	bl	229a0 <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   13fe8:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   13fec:	68db      	ldr	r3, [r3, #12]
   13fee:	4798      	blx	r3
	if (err) {
   13ff0:	4604      	mov	r4, r0
   13ff2:	b950      	cbnz	r0, 1400a <bt_enable+0xb2>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   13ff4:	b96e      	cbnz	r6, 14012 <bt_enable+0xba>
	err = hci_init();
   13ff6:	f7ff facb 	bl	13590 <hci_init>
	if (err) {
   13ffa:	4604      	mov	r4, r0
   13ffc:	b928      	cbnz	r0, 1400a <bt_enable+0xb2>
		err = bt_conn_init();
   13ffe:	f001 fa65 	bl	154cc <bt_conn_init>
		if (err) {
   14002:	4604      	mov	r4, r0
   14004:	b908      	cbnz	r0, 1400a <bt_enable+0xb2>
	bt_finalize_init();
   14006:	f7ff ff7f 	bl	13f08 <bt_finalize_init>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1400a:	4620      	mov	r0, r4
   1400c:	b008      	add	sp, #32
   1400e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	k_work_submit(&bt_dev.init);
   14012:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   14016:	f006 ff91 	bl	1af3c <k_work_submit>
	return 0;
   1401a:	e7f6      	b.n	1400a <bt_enable+0xb2>
		return -ENODEV;
   1401c:	f06f 0412 	mvn.w	r4, #18
   14020:	e7f3      	b.n	1400a <bt_enable+0xb2>
		return -EALREADY;
   14022:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14026:	e7f0      	b.n	1400a <bt_enable+0xb2>
   14028:	200002a0 	.word	0x200002a0
   1402c:	20002234 	.word	0x20002234
   14030:	00013cc5 	.word	0x00013cc5
   14034:	200038a0 	.word	0x200038a0
   14038:	200015d0 	.word	0x200015d0
   1403c:	0002427f 	.word	0x0002427f
   14040:	000131d5 	.word	0x000131d5
   14044:	20003480 	.word	0x20003480
   14048:	20001550 	.word	0x20001550
   1404c:	00024285 	.word	0x00024285

00014050 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   14050:	4800      	ldr	r0, [pc, #0]	; (14054 <bt_get_name+0x4>)
   14052:	4770      	bx	lr
   14054:	0002428b 	.word	0x0002428b

00014058 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   14058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1405a:	4f0b      	ldr	r7, [pc, #44]	; (14088 <id_find+0x30>)
{
   1405c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   1405e:	2500      	movs	r5, #0
   14060:	79fb      	ldrb	r3, [r7, #7]
   14062:	b2ec      	uxtb	r4, r5
   14064:	42a3      	cmp	r3, r4
   14066:	d802      	bhi.n	1406e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   14068:	f06f 0401 	mvn.w	r4, #1
   1406c:	e009      	b.n	14082 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1406e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   14072:	2207      	movs	r2, #7
   14074:	4439      	add	r1, r7
   14076:	4630      	mov	r0, r6
   14078:	f00e fde1 	bl	22c3e <memcmp>
   1407c:	3501      	adds	r5, #1
   1407e:	2800      	cmp	r0, #0
   14080:	d1ee      	bne.n	14060 <id_find+0x8>
}
   14082:	4620      	mov	r0, r4
   14084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14086:	bf00      	nop
   14088:	200002a0 	.word	0x200002a0

0001408c <set_random_address>:
{
   1408c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1408e:	2206      	movs	r2, #6
   14090:	4913      	ldr	r1, [pc, #76]	; (140e0 <set_random_address+0x54>)
   14092:	4605      	mov	r5, r0
   14094:	f00e fdd3 	bl	22c3e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   14098:	4602      	mov	r2, r0
   1409a:	b1d8      	cbz	r0, 140d4 <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1409c:	2106      	movs	r1, #6
   1409e:	f242 0005 	movw	r0, #8197	; 0x2005
   140a2:	f7ff f9cb 	bl	1343c <bt_hci_cmd_create>
	if (!buf) {
   140a6:	4604      	mov	r4, r0
   140a8:	b1b0      	cbz	r0, 140d8 <set_random_address+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   140aa:	2206      	movs	r2, #6
   140ac:	4629      	mov	r1, r5
   140ae:	3008      	adds	r0, #8
   140b0:	f00e fad1 	bl	22656 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   140b4:	2200      	movs	r2, #0
   140b6:	4621      	mov	r1, r4
   140b8:	f242 0005 	movw	r0, #8197	; 0x2005
   140bc:	f7ff fa06 	bl	134cc <bt_hci_cmd_send_sync>
	if (err) {
   140c0:	4602      	mov	r2, r0
   140c2:	b938      	cbnz	r0, 140d4 <set_random_address+0x48>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   140c4:	4629      	mov	r1, r5
   140c6:	4806      	ldr	r0, [pc, #24]	; (140e0 <set_random_address+0x54>)
   140c8:	f00c ff38 	bl	20f3c <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   140cc:	4b05      	ldr	r3, [pc, #20]	; (140e4 <set_random_address+0x58>)
   140ce:	2101      	movs	r1, #1
   140d0:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
}
   140d4:	4610      	mov	r0, r2
   140d6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   140d8:	f06f 0268 	mvn.w	r2, #104	; 0x68
   140dc:	e7fa      	b.n	140d4 <set_random_address+0x48>
   140de:	bf00      	nop
   140e0:	20000301 	.word	0x20000301
   140e4:	200002a0 	.word	0x200002a0

000140e8 <id_create.isra.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   140e8:	b530      	push	{r4, r5, lr}
   140ea:	4604      	mov	r4, r0
   140ec:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   140ee:	460d      	mov	r5, r1
   140f0:	b199      	cbz	r1, 1411a <id_create.isra.0+0x32>
   140f2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   140f4:	2207      	movs	r2, #7
   140f6:	a902      	add	r1, sp, #8
   140f8:	4628      	mov	r0, r5
   140fa:	9302      	str	r3, [sp, #8]
   140fc:	f8cd 300b 	str.w	r3, [sp, #11]
   14100:	f00e fd9d 	bl	22c3e <memcmp>
   14104:	b148      	cbz	r0, 1411a <id_create.isra.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   14106:	4810      	ldr	r0, [pc, #64]	; (14148 <id_create.isra.0+0x60>)
   14108:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1410c:	4629      	mov	r1, r5
   1410e:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   14110:	f00c ff19 	bl	20f46 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   14114:	2000      	movs	r0, #0
}
   14116:	b005      	add	sp, #20
   14118:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   1411a:	4668      	mov	r0, sp
   1411c:	f00c fc3a 	bl	20994 <bt_addr_le_create_static>
			if (err) {
   14120:	2800      	cmp	r0, #0
   14122:	d1f8      	bne.n	14116 <id_create.isra.0+0x2e>
		} while (id_find(&new_addr) >= 0);
   14124:	4668      	mov	r0, sp
   14126:	f7ff ff97 	bl	14058 <id_find>
   1412a:	2800      	cmp	r0, #0
   1412c:	daf5      	bge.n	1411a <id_create.isra.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1412e:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   14132:	4c05      	ldr	r4, [pc, #20]	; (14148 <id_create.isra.0+0x60>)
   14134:	4669      	mov	r1, sp
   14136:	4420      	add	r0, r4
   14138:	f00c ff05 	bl	20f46 <bt_addr_le_copy>
		if (addr) {
   1413c:	2d00      	cmp	r5, #0
   1413e:	d0e9      	beq.n	14114 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   14140:	4601      	mov	r1, r0
   14142:	4628      	mov	r0, r5
   14144:	e7e4      	b.n	14110 <id_create.isra.0+0x28>
   14146:	bf00      	nop
   14148:	200002a0 	.word	0x200002a0

0001414c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   1414c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1414e:	460e      	mov	r6, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14150:	4604      	mov	r4, r0
   14152:	b918      	cbnz	r0, 1415c <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   14154:	b1ee      	cbz	r6, 14192 <bt_id_create+0x46>
		return -EINVAL;
   14156:	f06f 0015 	mvn.w	r0, #21
   1415a:	e018      	b.n	1418e <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1415c:	2300      	movs	r3, #0
   1415e:	2207      	movs	r2, #7
   14160:	4669      	mov	r1, sp
   14162:	9300      	str	r3, [sp, #0]
   14164:	f8cd 3003 	str.w	r3, [sp, #3]
   14168:	f00e fd69 	bl	22c3e <memcmp>
   1416c:	2800      	cmp	r0, #0
   1416e:	d0f1      	beq.n	14154 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   14170:	7823      	ldrb	r3, [r4, #0]
   14172:	2b01      	cmp	r3, #1
   14174:	d1ef      	bne.n	14156 <bt_id_create+0xa>
   14176:	79a3      	ldrb	r3, [r4, #6]
   14178:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1417c:	2bc0      	cmp	r3, #192	; 0xc0
   1417e:	d1ea      	bne.n	14156 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   14180:	4620      	mov	r0, r4
   14182:	f7ff ff69 	bl	14058 <id_find>
   14186:	2800      	cmp	r0, #0
   14188:	dbe4      	blt.n	14154 <bt_id_create+0x8>
			return -EALREADY;
   1418a:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   1418e:	b002      	add	sp, #8
   14190:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   14192:	4d13      	ldr	r5, [pc, #76]	; (141e0 <bt_id_create+0x94>)
   14194:	79eb      	ldrb	r3, [r5, #7]
   14196:	2b01      	cmp	r3, #1
   14198:	d01e      	beq.n	141d8 <bt_id_create+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1419a:	f3bf 8f5b 	dmb	ish
   1419e:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   141a2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   141a6:	07db      	lsls	r3, r3, #31
   141a8:	d40b      	bmi.n	141c2 <bt_id_create+0x76>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   141aa:	2c00      	cmp	r4, #0
   141ac:	d0d3      	beq.n	14156 <bt_id_create+0xa>
   141ae:	2207      	movs	r2, #7
   141b0:	4669      	mov	r1, sp
   141b2:	4620      	mov	r0, r4
   141b4:	9600      	str	r6, [sp, #0]
   141b6:	f8cd 6003 	str.w	r6, [sp, #3]
   141ba:	f00e fd40 	bl	22c3e <memcmp>
   141be:	2800      	cmp	r0, #0
   141c0:	d0c9      	beq.n	14156 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   141c2:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   141c4:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
   141c6:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
   141c8:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
   141ca:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
   141cc:	f7ff ff8c 	bl	140e8 <id_create.isra.0>
	new_id = bt_dev.id_count++;
   141d0:	2800      	cmp	r0, #0
   141d2:	bf08      	it	eq
   141d4:	4630      	moveq	r0, r6
   141d6:	e7da      	b.n	1418e <bt_id_create+0x42>
		return -ENOMEM;
   141d8:	f06f 000b 	mvn.w	r0, #11
   141dc:	e7d7      	b.n	1418e <bt_id_create+0x42>
   141de:	bf00      	nop
   141e0:	200002a0 	.word	0x200002a0

000141e4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   141e4:	b570      	push	{r4, r5, r6, lr}
   141e6:	b086      	sub	sp, #24
   141e8:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   141ea:	aa01      	add	r2, sp, #4
   141ec:	2100      	movs	r1, #0
   141ee:	f241 0009 	movw	r0, #4105	; 0x1009
   141f2:	f7ff f96b 	bl	134cc <bt_hci_cmd_send_sync>
	if (err) {
   141f6:	4604      	mov	r4, r0
   141f8:	b970      	cbnz	r0, 14218 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   141fa:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   141fc:	9002      	str	r0, [sp, #8]
   141fe:	689d      	ldr	r5, [r3, #8]
   14200:	f8ad 000c 	strh.w	r0, [sp, #12]
   14204:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   14206:	2206      	movs	r2, #6
   14208:	a902      	add	r1, sp, #8
   1420a:	4628      	mov	r0, r5
   1420c:	f00e fd17 	bl	22c3e <memcmp>
   14210:	b920      	cbnz	r0, 1421c <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   14212:	9801      	ldr	r0, [sp, #4]
   14214:	f003 f938 	bl	17488 <net_buf_unref>
		return 0U;
   14218:	2000      	movs	r0, #0
   1421a:	e015      	b.n	14248 <bt_id_read_public_addr+0x64>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   1421c:	4b0b      	ldr	r3, [pc, #44]	; (1424c <bt_id_read_public_addr+0x68>)
   1421e:	6818      	ldr	r0, [r3, #0]
   14220:	9004      	str	r0, [sp, #16]
   14222:	889b      	ldrh	r3, [r3, #4]
   14224:	f8ad 3014 	strh.w	r3, [sp, #20]
   14228:	2206      	movs	r2, #6
   1422a:	a904      	add	r1, sp, #16
   1422c:	4628      	mov	r0, r5
   1422e:	f00e fd06 	bl	22c3e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   14232:	2800      	cmp	r0, #0
   14234:	d0ed      	beq.n	14212 <bt_id_read_public_addr+0x2e>
		return 0U;
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
   14236:	4629      	mov	r1, r5
   14238:	1c70      	adds	r0, r6, #1
   1423a:	f00c fe7f 	bl	20f3c <bt_addr_copy>
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   1423e:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   14240:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   14242:	f003 f921 	bl	17488 <net_buf_unref>
	return 1U;
   14246:	2001      	movs	r0, #1
}
   14248:	b006      	add	sp, #24
   1424a:	bd70      	pop	{r4, r5, r6, pc}
   1424c:	00023054 	.word	0x00023054

00014250 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   14250:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   14252:	4668      	mov	r0, sp
   14254:	f7ff ffc6 	bl	141e4 <bt_id_read_public_addr>
   14258:	4b04      	ldr	r3, [pc, #16]	; (1426c <bt_setup_public_id_addr+0x1c>)
   1425a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1425c:	b118      	cbz	r0, 14266 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1425e:	4669      	mov	r1, sp
   14260:	2000      	movs	r0, #0
   14262:	f7ff ff41 	bl	140e8 <id_create.isra.0>
}
   14266:	b003      	add	sp, #12
   14268:	f85d fb04 	ldr.w	pc, [sp], #4
   1426c:	200002a0 	.word	0x200002a0

00014270 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   14270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14272:	4b18      	ldr	r3, [pc, #96]	; (142d4 <bt_read_static_addr+0x64>)
   14274:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   14278:	f014 0401 	ands.w	r4, r4, #1
{
   1427c:	4605      	mov	r5, r0
   1427e:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14280:	d015      	beq.n	142ae <bt_read_static_addr+0x3e>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   14282:	aa01      	add	r2, sp, #4
   14284:	2100      	movs	r1, #0
   14286:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1428a:	f7ff f91f 	bl	134cc <bt_hci_cmd_send_sync>
	if (err) {
   1428e:	4603      	mov	r3, r0
   14290:	b9e8      	cbnz	r0, 142ce <bt_read_static_addr+0x5e>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   14292:	9801      	ldr	r0, [sp, #4]
   14294:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   14296:	7854      	ldrb	r4, [r2, #1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14298:	f04f 0c16 	mov.w	ip, #22
   1429c:	42b4      	cmp	r4, r6
   1429e:	bf28      	it	cs
   142a0:	4634      	movcs	r4, r6
   142a2:	eb02 070c 	add.w	r7, r2, ip
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   142a6:	42a3      	cmp	r3, r4
   142a8:	db04      	blt.n	142b4 <bt_read_static_addr+0x44>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
   142aa:	f003 f8ed 	bl	17488 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   142ae:	4620      	mov	r0, r4
   142b0:	b003      	add	sp, #12
   142b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   142b4:	1c96      	adds	r6, r2, #2
   142b6:	fb0c 5103 	mla	r1, ip, r3, r5
   142ba:	f856 eb04 	ldr.w	lr, [r6], #4
   142be:	f841 eb04 	str.w	lr, [r1], #4
   142c2:	42be      	cmp	r6, r7
   142c4:	d1f9      	bne.n	142ba <bt_read_static_addr+0x4a>
   142c6:	883e      	ldrh	r6, [r7, #0]
   142c8:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
   142ca:	3301      	adds	r3, #1
   142cc:	e7eb      	b.n	142a6 <bt_read_static_addr+0x36>
		return 0;
   142ce:	2400      	movs	r4, #0
   142d0:	e7ed      	b.n	142ae <bt_read_static_addr+0x3e>
   142d2:	bf00      	nop
   142d4:	200002a0 	.word	0x200002a0

000142d8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   142d8:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   142da:	4d14      	ldr	r5, [pc, #80]	; (1432c <bt_setup_random_id_addr+0x54>)
   142dc:	79ec      	ldrb	r4, [r5, #7]
{
   142de:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   142e0:	b92c      	cbnz	r4, 142ee <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   142e2:	2101      	movs	r1, #1
   142e4:	a802      	add	r0, sp, #8
   142e6:	f7ff ffc3 	bl	14270 <bt_read_static_addr>
   142ea:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   142ec:	b9b0      	cbnz	r0, 1431c <bt_setup_random_id_addr+0x44>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   142ee:	2100      	movs	r1, #0
   142f0:	4608      	mov	r0, r1
   142f2:	f7ff ff2b 	bl	1414c <bt_id_create>
   142f6:	e00f      	b.n	14318 <bt_setup_random_id_addr+0x40>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   142f8:	ab02      	add	r3, sp, #8
   142fa:	fb06 3102 	mla	r1, r6, r2, r3
   142fe:	f10d 0001 	add.w	r0, sp, #1
   14302:	f00c fe1b 	bl	20f3c <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   14306:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   14308:	4669      	mov	r1, sp
   1430a:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   1430c:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   14310:	f7ff feea 	bl	140e8 <id_create.isra.0>
				if (err) {
   14314:	3401      	adds	r4, #1
   14316:	b110      	cbz	r0, 1431e <bt_setup_random_id_addr+0x46>
}
   14318:	b008      	add	sp, #32
   1431a:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1431c:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1431e:	79eb      	ldrb	r3, [r5, #7]
   14320:	b2e2      	uxtb	r2, r4
   14322:	4293      	cmp	r3, r2
   14324:	d8e8      	bhi.n	142f8 <bt_setup_random_id_addr+0x20>
			return 0;
   14326:	2000      	movs	r0, #0
   14328:	e7f6      	b.n	14318 <bt_setup_random_id_addr+0x40>
   1432a:	bf00      	nop
   1432c:	200002a0 	.word	0x200002a0

00014330 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   14330:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   14332:	4c07      	ldr	r4, [pc, #28]	; (14350 <bt_id_set_create_conn_own_addr+0x20>)
   14334:	7823      	ldrb	r3, [r4, #0]
   14336:	2b01      	cmp	r3, #1
{
   14338:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
   1433a:	d003      	beq.n	14344 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   1433c:	7823      	ldrb	r3, [r4, #0]
   1433e:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   14340:	2000      	movs	r0, #0
}
   14342:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   14344:	1c60      	adds	r0, r4, #1
   14346:	f7ff fea1 	bl	1408c <set_random_address>
			if (err) {
   1434a:	2800      	cmp	r0, #0
   1434c:	d0f6      	beq.n	1433c <bt_id_set_create_conn_own_addr+0xc>
   1434e:	e7f8      	b.n	14342 <bt_id_set_create_conn_own_addr+0x12>
   14350:	200002a0 	.word	0x200002a0

00014354 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   14354:	b510      	push	{r4, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   14356:	4b05      	ldr	r3, [pc, #20]	; (1436c <bt_id_set_scan_own_addr+0x18>)
   14358:	781b      	ldrb	r3, [r3, #0]
   1435a:	700b      	strb	r3, [r1, #0]
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   1435c:	2000      	movs	r0, #0
{
   1435e:	460c      	mov	r4, r1
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   14360:	f00c fdfa 	bl	20f58 <bt_id_set_private_addr>
			if (err) {
   14364:	b908      	cbnz	r0, 1436a <bt_id_set_scan_own_addr+0x16>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   14366:	2301      	movs	r3, #1
   14368:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
   1436a:	bd10      	pop	{r4, pc}
   1436c:	200002a0 	.word	0x200002a0

00014370 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   14370:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14372:	4c0a      	ldr	r4, [pc, #40]	; (1439c <bt_id_init+0x2c>)
   14374:	79e3      	ldrb	r3, [r4, #7]
   14376:	b10b      	cbz	r3, 1437c <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   14378:	2000      	movs	r0, #0
}
   1437a:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   1437c:	f7ff ff68 	bl	14250 <bt_setup_public_id_addr>
		if (err) {
   14380:	2800      	cmp	r0, #0
   14382:	d1fa      	bne.n	1437a <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14384:	79e3      	ldrb	r3, [r4, #7]
   14386:	2b00      	cmp	r3, #0
   14388:	d1f6      	bne.n	14378 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   1438a:	f7ff ffa5 	bl	142d8 <bt_setup_random_id_addr>
		if (err) {
   1438e:	2800      	cmp	r0, #0
   14390:	d1f3      	bne.n	1437a <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   14392:	1c60      	adds	r0, r4, #1
}
   14394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
   14398:	f7ff be78 	b.w	1408c <set_random_address>
   1439c:	200002a0 	.word	0x200002a0

000143a0 <atomic_get.constprop.0>:
   143a0:	4b03      	ldr	r3, [pc, #12]	; (143b0 <atomic_get.constprop.0+0x10>)
   143a2:	f3bf 8f5b 	dmb	ish
   143a6:	6818      	ldr	r0, [r3, #0]
   143a8:	f3bf 8f5b 	dmb	ish
}
   143ac:	4770      	bx	lr
   143ae:	bf00      	nop
   143b0:	2000036c 	.word	0x2000036c

000143b4 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   143b4:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   143b6:	2102      	movs	r1, #2
{
   143b8:	b087      	sub	sp, #28
   143ba:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   143bc:	f242 000c 	movw	r0, #8204	; 0x200c
   143c0:	f7ff f83c 	bl	1343c <bt_hci_cmd_create>
	if (!buf) {
   143c4:	4605      	mov	r5, r0
   143c6:	b308      	cbz	r0, 1440c <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
   143c8:	2102      	movs	r1, #2
   143ca:	3008      	adds	r0, #8
   143cc:	f003 f98c 	bl	176e8 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   143d0:	2c01      	cmp	r4, #1
   143d2:	4602      	mov	r2, r0
   143d4:	d117      	bne.n	14406 <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   143d6:	f7ff ffe3 	bl	143a0 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   143da:	f3c0 2000 	ubfx	r0, r0, #8, #1
   143de:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   143e0:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   143e2:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   143e4:	425c      	negs	r4, r3
   143e6:	415c      	adcs	r4, r3
   143e8:	4a0a      	ldr	r2, [pc, #40]	; (14414 <bt_le_scan_set_enable_legacy+0x60>)
   143ea:	9400      	str	r4, [sp, #0]
   143ec:	a903      	add	r1, sp, #12
   143ee:	4628      	mov	r0, r5
   143f0:	2305      	movs	r3, #5
   143f2:	f7ff f811 	bl	13418 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   143f6:	2200      	movs	r2, #0
   143f8:	4629      	mov	r1, r5
   143fa:	f242 000c 	movw	r0, #8204	; 0x200c
   143fe:	f7ff f865 	bl	134cc <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   14402:	b007      	add	sp, #28
   14404:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   14406:	2300      	movs	r3, #0
   14408:	7043      	strb	r3, [r0, #1]
   1440a:	e7e9      	b.n	143e0 <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
   1440c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14410:	e7f7      	b.n	14402 <bt_le_scan_set_enable_legacy+0x4e>
   14412:	bf00      	nop
   14414:	2000036c 	.word	0x2000036c

00014418 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   14418:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1441a:	2300      	movs	r3, #0
   1441c:	f88d 3005 	strb.w	r3, [sp, #5]

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   14420:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   14424:	1e43      	subs	r3, r0, #1
	set_param.scan_type = scan_type;
   14426:	f88d 0000 	strb.w	r0, [sp]
{
   1442a:	4605      	mov	r5, r0
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1442c:	4258      	negs	r0, r3
	set_param.interval = sys_cpu_to_le16(interval);
   1442e:	f8ad 1001 	strh.w	r1, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   14432:	4158      	adcs	r0, r3
   14434:	f10d 0105 	add.w	r1, sp, #5
	set_param.window = sys_cpu_to_le16(window);
   14438:	f8ad 2003 	strh.w	r2, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1443c:	f7ff ff8a 	bl	14354 <bt_id_set_scan_own_addr>
	if (err) {
   14440:	4604      	mov	r4, r0
   14442:	bb38      	cbnz	r0, 14494 <start_le_scan_legacy+0x7c>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   14444:	2107      	movs	r1, #7
   14446:	f242 000b 	movw	r0, #8203	; 0x200b
   1444a:	f7fe fff7 	bl	1343c <bt_hci_cmd_create>
	if (!buf) {
   1444e:	4606      	mov	r6, r0
   14450:	b348      	cbz	r0, 144a6 <start_le_scan_legacy+0x8e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14452:	2207      	movs	r2, #7
   14454:	4669      	mov	r1, sp
   14456:	3008      	adds	r0, #8
   14458:	f00e f8fd 	bl	22656 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   1445c:	4622      	mov	r2, r4
   1445e:	4631      	mov	r1, r6
   14460:	f242 000b 	movw	r0, #8203	; 0x200b
   14464:	f7ff f832 	bl	134cc <bt_hci_cmd_send_sync>
	if (err) {
   14468:	4604      	mov	r4, r0
   1446a:	b998      	cbnz	r0, 14494 <start_le_scan_legacy+0x7c>
	return bt_le_scan_set_enable_legacy(enable);
   1446c:	2001      	movs	r0, #1
   1446e:	f7ff ffa1 	bl	143b4 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   14472:	4604      	mov	r4, r0
   14474:	b970      	cbnz	r0, 14494 <start_le_scan_legacy+0x7c>
	if (val) {
   14476:	2d01      	cmp	r5, #1
   14478:	d10f      	bne.n	1449a <start_le_scan_legacy+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1447a:	f3bf 8f5b 	dmb	ish
   1447e:	4b0b      	ldr	r3, [pc, #44]	; (144ac <start_le_scan_legacy+0x94>)
   14480:	e853 2f00 	ldrex	r2, [r3]
   14484:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   14488:	e843 2100 	strex	r1, r2, [r3]
   1448c:	2900      	cmp	r1, #0
   1448e:	d1f7      	bne.n	14480 <start_le_scan_legacy+0x68>
   14490:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   14494:	4620      	mov	r0, r4
   14496:	b002      	add	sp, #8
   14498:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1449a:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1449e:	4803      	ldr	r0, [pc, #12]	; (144ac <start_le_scan_legacy+0x94>)
   144a0:	f00c fd6e 	bl	20f80 <atomic_and>
   144a4:	e7f6      	b.n	14494 <start_le_scan_legacy+0x7c>
		return -ENOBUFS;
   144a6:	f06f 0468 	mvn.w	r4, #104	; 0x68
   144aa:	e7f3      	b.n	14494 <start_le_scan_legacy+0x7c>
   144ac:	2000036c 	.word	0x2000036c

000144b0 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   144b0:	4b01      	ldr	r3, [pc, #4]	; (144b8 <bt_scan_reset+0x8>)
   144b2:	2200      	movs	r2, #0
   144b4:	601a      	str	r2, [r3, #0]
}
   144b6:	4770      	bx	lr
   144b8:	20002240 	.word	0x20002240

000144bc <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   144bc:	b538      	push	{r3, r4, r5, lr}
   144be:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   144c0:	f7ff ff6e 	bl	143a0 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   144c4:	0641      	lsls	r1, r0, #25
   144c6:	f3c0 1280 	ubfx	r2, r0, #6, #1
   144ca:	d501      	bpl.n	144d0 <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
   144cc:	2000      	movs	r0, #0
   144ce:	e031      	b.n	14534 <bt_le_scan_update+0x78>
   144d0:	f7ff ff66 	bl	143a0 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   144d4:	0683      	lsls	r3, r0, #26
   144d6:	d428      	bmi.n	1452a <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   144d8:	2100      	movs	r1, #0
   144da:	2206      	movs	r2, #6
   144dc:	4608      	mov	r0, r1
   144de:	f000 fdf3 	bl	150c8 <bt_conn_lookup_state_le>
		if (conn) {
   144e2:	4604      	mov	r4, r0
   144e4:	bb38      	cbnz	r0, 14536 <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   144e6:	2202      	movs	r2, #2
   144e8:	4601      	mov	r1, r0
   144ea:	f000 fded 	bl	150c8 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
   144ee:	2800      	cmp	r0, #0
   144f0:	d0ec      	beq.n	144cc <bt_le_scan_update+0x10>
   144f2:	f3bf 8f5b 	dmb	ish
   144f6:	4b11      	ldr	r3, [pc, #68]	; (1453c <bt_le_scan_update+0x80>)
   144f8:	e853 2f00 	ldrex	r2, [r3]
   144fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   14500:	e843 2100 	strex	r1, r2, [r3]
   14504:	2900      	cmp	r1, #0
   14506:	d1f7      	bne.n	144f8 <bt_le_scan_update+0x3c>
   14508:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   1450c:	f000 fb8c 	bl	14c28 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   14510:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   14512:	4620      	mov	r0, r4
   14514:	bf18      	it	ne
   14516:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   14518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   1451c:	bf0a      	itet	eq
   1451e:	2212      	moveq	r2, #18
   14520:	2160      	movne	r1, #96	; 0x60
   14522:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   14526:	f7ff bf77 	b.w	14418 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   1452a:	4610      	mov	r0, r2
   1452c:	f7ff ff42 	bl	143b4 <bt_le_scan_set_enable_legacy>
		if (err) {
   14530:	2800      	cmp	r0, #0
   14532:	d0d1      	beq.n	144d8 <bt_le_scan_update+0x1c>
}
   14534:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   14536:	f000 fb77 	bl	14c28 <bt_conn_unref>
   1453a:	e7c7      	b.n	144cc <bt_le_scan_update+0x10>
   1453c:	2000036c 	.word	0x2000036c

00014540 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   14540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   14544:	f100 0708 	add.w	r7, r0, #8
   14548:	b08d      	sub	sp, #52	; 0x34
   1454a:	4604      	mov	r4, r0
   1454c:	4638      	mov	r0, r7
   1454e:	f00e f866 	bl	2261e <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   14552:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 14718 <bt_hci_le_adv_report+0x1d8>
   14556:	9001      	str	r0, [sp, #4]
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   14558:	9b01      	ldr	r3, [sp, #4]
   1455a:	b913      	cbnz	r3, 14562 <bt_hci_le_adv_report+0x22>

		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   1455c:	b00d      	add	sp, #52	; 0x34
   1455e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
   14562:	89a3      	ldrh	r3, [r4, #12]
   14564:	2b08      	cmp	r3, #8
   14566:	d9f9      	bls.n	1455c <bt_hci_le_adv_report+0x1c>
	return net_buf_simple_pull_mem(&buf->b, len);
   14568:	2109      	movs	r1, #9
   1456a:	4638      	mov	r0, r7
   1456c:	f003 f89a 	bl	176a4 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
   14570:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   14574:	237f      	movs	r3, #127	; 0x7f
   14576:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
   1457a:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   1457e:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   14580:	7a5b      	ldrb	r3, [r3, #9]
   14582:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
   14586:	23ff      	movs	r3, #255	; 0xff
   14588:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
   1458c:	2300      	movs	r3, #0
   1458e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   14592:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
   14596:	7802      	ldrb	r2, [r0, #0]
   14598:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1459c:	2a04      	cmp	r2, #4
   1459e:	bf9c      	itt	ls
   145a0:	4b5b      	ldrls	r3, [pc, #364]	; (14710 <bt_hci_le_adv_report+0x1d0>)
   145a2:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props(evt->evt_type);
   145a4:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   145a8:	4606      	mov	r6, r0
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
   145aa:	f100 0801 	add.w	r8, r0, #1
   145ae:	f7ff fef7 	bl	143a0 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   145b2:	0645      	lsls	r5, r0, #25
   145b4:	d50d      	bpl.n	145d2 <bt_hci_le_adv_report+0x92>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   145b6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   145ba:	0758      	lsls	r0, r3, #29
   145bc:	d509      	bpl.n	145d2 <bt_hci_le_adv_report+0x92>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   145be:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
   145c0:	4638      	mov	r0, r7
   145c2:	3101      	adds	r1, #1
   145c4:	f003 f84e 	bl	17664 <net_buf_simple_pull>
   145c8:	9b01      	ldr	r3, [sp, #4]
   145ca:	1e58      	subs	r0, r3, #1
   145cc:	b2c3      	uxtb	r3, r0
   145ce:	9301      	str	r3, [sp, #4]
   145d0:	e7c2      	b.n	14558 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   145d2:	7873      	ldrb	r3, [r6, #1]
   145d4:	1e9a      	subs	r2, r3, #2
   145d6:	2a01      	cmp	r2, #1
   145d8:	d84e      	bhi.n	14678 <bt_hci_le_adv_report+0x138>
		bt_addr_le_copy(&id_addr, addr);
   145da:	4641      	mov	r1, r8
   145dc:	a804      	add	r0, sp, #16
   145de:	f00c fcde 	bl	20f9e <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   145e2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   145e6:	3b02      	subs	r3, #2
   145e8:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
   145ec:	ab04      	add	r3, sp, #16
   145ee:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
   145f0:	f8da 3000 	ldr.w	r3, [sl]
   145f4:	b1b3      	cbz	r3, 14624 <bt_hci_le_adv_report+0xe4>
	state->offset = net_buf_simple_headroom(buf);
   145f6:	4638      	mov	r0, r7
   145f8:	f00e f821 	bl	2263e <net_buf_simple_headroom>
	state->len = buf->len;
   145fc:	89a3      	ldrh	r3, [r4, #12]
   145fe:	9302      	str	r3, [sp, #8]
	state->offset = net_buf_simple_headroom(buf);
   14600:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
   14602:	463b      	mov	r3, r7
   14604:	a804      	add	r0, sp, #16
   14606:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   1460a:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
   1460e:	f8da 5000 	ldr.w	r5, [sl]
		buf->len = len;
   14612:	f8a4 900c 	strh.w	r9, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
   14616:	47a8      	blx	r5
	buf->data = buf->__buf + state->offset;
   14618:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1461a:	9b02      	ldr	r3, [sp, #8]
   1461c:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1461e:	fa10 f08b 	uxtah	r0, r0, fp
   14622:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   14624:	4b3b      	ldr	r3, [pc, #236]	; (14714 <bt_hci_le_adv_report+0x1d4>)
   14626:	681b      	ldr	r3, [r3, #0]
   14628:	2b00      	cmp	r3, #0
   1462a:	d036      	beq.n	1469a <bt_hci_le_adv_report+0x15a>
   1462c:	f1b3 0208 	subs.w	r2, r3, #8
   14630:	d033      	beq.n	1469a <bt_hci_le_adv_report+0x15a>
   14632:	681d      	ldr	r5, [r3, #0]
   14634:	b105      	cbz	r5, 14638 <bt_hci_le_adv_report+0xf8>
   14636:	3d08      	subs	r5, #8
		if (listener->recv) {
   14638:	6813      	ldr	r3, [r2, #0]
   1463a:	9203      	str	r2, [sp, #12]
   1463c:	b193      	cbz	r3, 14664 <bt_hci_le_adv_report+0x124>
	state->offset = net_buf_simple_headroom(buf);
   1463e:	4638      	mov	r0, r7
   14640:	f00d fffd 	bl	2263e <net_buf_simple_headroom>
			listener->recv(info, &buf->b);
   14644:	9a03      	ldr	r2, [sp, #12]
	state->len = buf->len;
   14646:	89a3      	ldrh	r3, [r4, #12]
   14648:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
   1464a:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1464e:	4683      	mov	fp, r0
			listener->recv(info, &buf->b);
   14650:	4639      	mov	r1, r7
   14652:	a808      	add	r0, sp, #32
	state->len = buf->len;
   14654:	9302      	str	r3, [sp, #8]
   14656:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   14658:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1465a:	9b02      	ldr	r3, [sp, #8]
   1465c:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1465e:	fa10 f08b 	uxtah	r0, r0, fp
   14662:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   14664:	b1cd      	cbz	r5, 1469a <bt_hci_le_adv_report+0x15a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14666:	f115 0308 	adds.w	r3, r5, #8
   1466a:	d002      	beq.n	14672 <bt_hci_le_adv_report+0x132>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1466c:	68ab      	ldr	r3, [r5, #8]
   1466e:	b103      	cbz	r3, 14672 <bt_hci_le_adv_report+0x132>
   14670:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
   14672:	462a      	mov	r2, r5
   14674:	461d      	mov	r5, r3
   14676:	e7df      	b.n	14638 <bt_hci_le_adv_report+0xf8>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   14678:	2bff      	cmp	r3, #255	; 0xff
   1467a:	d108      	bne.n	1468e <bt_hci_le_adv_report+0x14e>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   1467c:	2300      	movs	r3, #0
   1467e:	9306      	str	r3, [sp, #24]
   14680:	a906      	add	r1, sp, #24
   14682:	f8cd 301b 	str.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
   14686:	a804      	add	r0, sp, #16
   14688:	f00c fc89 	bl	20f9e <bt_addr_le_copy>
   1468c:	e7ae      	b.n	145ec <bt_hci_le_adv_report+0xac>
   1468e:	4641      	mov	r1, r8
   14690:	2000      	movs	r0, #0
   14692:	f00c fc5f 	bl	20f54 <bt_lookup_id_addr>
   14696:	4601      	mov	r1, r0
   14698:	e7f5      	b.n	14686 <bt_hci_le_adv_report+0x146>
	check_pending_conn(&id_addr, addr, info->adv_props);
   1469a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   1469e:	f7ff fe7f 	bl	143a0 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   146a2:	0641      	lsls	r1, r0, #25
   146a4:	f3c0 1580 	ubfx	r5, r0, #6, #1
   146a8:	d489      	bmi.n	145be <bt_hci_le_adv_report+0x7e>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   146aa:	07d2      	lsls	r2, r2, #31
   146ac:	d587      	bpl.n	145be <bt_hci_le_adv_report+0x7e>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   146ae:	2202      	movs	r2, #2
   146b0:	a904      	add	r1, sp, #16
   146b2:	4628      	mov	r0, r5
   146b4:	f000 fd08 	bl	150c8 <bt_conn_lookup_state_le>
	if (!conn) {
   146b8:	4681      	mov	r9, r0
   146ba:	2800      	cmp	r0, #0
   146bc:	f43f af7f 	beq.w	145be <bt_hci_le_adv_report+0x7e>
   146c0:	f7ff fe6e 	bl	143a0 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   146c4:	0683      	lsls	r3, r0, #26
   146c6:	d410      	bmi.n	146ea <bt_hci_le_adv_report+0x1aa>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
   146c8:	f109 009e 	add.w	r0, r9, #158	; 0x9e
   146cc:	4641      	mov	r1, r8
   146ce:	f00c fc66 	bl	20f9e <bt_addr_le_copy>
	if (bt_le_create_conn(conn)) {
   146d2:	4648      	mov	r0, r9
   146d4:	f00c fa8d 	bl	20bf2 <bt_le_create_conn>
   146d8:	b960      	cbnz	r0, 146f4 <bt_hci_le_adv_report+0x1b4>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   146da:	4648      	mov	r0, r9
   146dc:	2106      	movs	r1, #6
   146de:	f000 fad9 	bl	14c94 <bt_conn_set_state>
	bt_conn_unref(conn);
   146e2:	4648      	mov	r0, r9
   146e4:	f000 faa0 	bl	14c28 <bt_conn_unref>
	return;
   146e8:	e769      	b.n	145be <bt_hci_le_adv_report+0x7e>
	return bt_le_scan_set_enable_legacy(enable);
   146ea:	4628      	mov	r0, r5
   146ec:	f7ff fe62 	bl	143b4 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   146f0:	2800      	cmp	r0, #0
   146f2:	d0e9      	beq.n	146c8 <bt_hci_le_adv_report+0x188>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   146f4:	231f      	movs	r3, #31
   146f6:	f889 3009 	strb.w	r3, [r9, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   146fa:	2100      	movs	r1, #0
   146fc:	4648      	mov	r0, r9
   146fe:	f000 fac9 	bl	14c94 <bt_conn_set_state>
	bt_conn_unref(conn);
   14702:	4648      	mov	r0, r9
   14704:	f000 fa90 	bl	14c28 <bt_conn_unref>
	bt_le_scan_update(false);
   14708:	2000      	movs	r0, #0
   1470a:	f7ff fed7 	bl	144bc <bt_le_scan_update>
   1470e:	e756      	b.n	145be <bt_hci_le_adv_report+0x7e>
   14710:	00024292 	.word	0x00024292
   14714:	20002238 	.word	0x20002238
   14718:	20002240 	.word	0x20002240

0001471c <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   1471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14720:	4605      	mov	r5, r0
   14722:	460f      	mov	r7, r1
   14724:	f7ff fe3c 	bl	143a0 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14728:	0780      	lsls	r0, r0, #30
   1472a:	d56f      	bpl.n	1480c <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   1472c:	782a      	ldrb	r2, [r5, #0]
   1472e:	2a01      	cmp	r2, #1
   14730:	d904      	bls.n	1473c <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   14732:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   14736:	4620      	mov	r0, r4
   14738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   1473c:	686b      	ldr	r3, [r5, #4]
   1473e:	f033 030f 	bics.w	r3, r3, #15
   14742:	d1f6      	bne.n	14732 <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   14744:	8928      	ldrh	r0, [r5, #8]
   14746:	1f03      	subs	r3, r0, #4
   14748:	b29b      	uxth	r3, r3
   1474a:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   1474e:	42a3      	cmp	r3, r4
   14750:	d8ef      	bhi.n	14732 <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   14752:	8969      	ldrh	r1, [r5, #10]
   14754:	1f0b      	subs	r3, r1, #4
   14756:	b29b      	uxth	r3, r3
   14758:	42a3      	cmp	r3, r4
   1475a:	d8ea      	bhi.n	14732 <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   1475c:	4288      	cmp	r0, r1
   1475e:	d3e8      	bcc.n	14732 <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
   14760:	b99a      	cbnz	r2, 1478a <bt_le_scan_start+0x6e>
   14762:	f3bf 8f5b 	dmb	ish
   14766:	4e2b      	ldr	r6, [pc, #172]	; (14814 <bt_le_scan_start+0xf8>)
   14768:	e856 0f00 	ldrex	r0, [r6]
   1476c:	f040 0340 	orr.w	r3, r0, #64	; 0x40
   14770:	e846 3200 	strex	r2, r3, [r6]
   14774:	2a00      	cmp	r2, #0
   14776:	d1f7      	bne.n	14768 <bt_le_scan_start+0x4c>
   14778:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1477c:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   14780:	46b0      	mov	r8, r6
   14782:	d007      	beq.n	14794 <bt_le_scan_start+0x78>
		return -EALREADY;
   14784:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14788:	e7d5      	b.n	14736 <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
   1478a:	f00c fbf7 	bl	20f7c <bt_id_scan_random_addr_check>
   1478e:	2800      	cmp	r0, #0
   14790:	d1e7      	bne.n	14762 <bt_le_scan_start+0x46>
   14792:	e7ce      	b.n	14732 <bt_le_scan_start+0x16>
   14794:	f7ff fe04 	bl	143a0 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   14798:	0681      	lsls	r1, r0, #26
   1479a:	d50a      	bpl.n	147b2 <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
   1479c:	4610      	mov	r0, r2
   1479e:	f7ff fe09 	bl	143b4 <bt_le_scan_set_enable_legacy>
		if (err) {
   147a2:	4604      	mov	r4, r0
   147a4:	b128      	cbz	r0, 147b2 <bt_le_scan_start+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   147a6:	f06f 0140 	mvn.w	r1, #64	; 0x40
   147aa:	4630      	mov	r0, r6
   147ac:	f00c fbe8 	bl	20f80 <atomic_and>
		return err;
   147b0:	e7c1      	b.n	14736 <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   147b2:	686b      	ldr	r3, [r5, #4]
	if (val) {
   147b4:	07db      	lsls	r3, r3, #31
   147b6:	d515      	bpl.n	147e4 <bt_le_scan_start+0xc8>
   147b8:	f3bf 8f5b 	dmb	ish
   147bc:	e858 3f00 	ldrex	r3, [r8]
   147c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   147c4:	e848 3200 	strex	r2, r3, [r8]
   147c8:	2a00      	cmp	r2, #0
   147ca:	d1f7      	bne.n	147bc <bt_le_scan_start+0xa0>
   147cc:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   147d0:	89ab      	ldrh	r3, [r5, #12]
   147d2:	b16b      	cbz	r3, 147f0 <bt_le_scan_start+0xd4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   147d4:	480f      	ldr	r0, [pc, #60]	; (14814 <bt_le_scan_start+0xf8>)
   147d6:	f06f 0140 	mvn.w	r1, #64	; 0x40
   147da:	f00c fbd1 	bl	20f80 <atomic_and>
			return -ENOTSUP;
   147de:	f06f 0485 	mvn.w	r4, #133	; 0x85
   147e2:	e7a8      	b.n	14736 <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   147e4:	f46f 7180 	mvn.w	r1, #256	; 0x100
   147e8:	480a      	ldr	r0, [pc, #40]	; (14814 <bt_le_scan_start+0xf8>)
   147ea:	f00c fbc9 	bl	20f80 <atomic_and>
   147ee:	e7ef      	b.n	147d0 <bt_le_scan_start+0xb4>
		err = start_le_scan_legacy(param->type, param->interval,
   147f0:	896a      	ldrh	r2, [r5, #10]
   147f2:	8929      	ldrh	r1, [r5, #8]
   147f4:	7828      	ldrb	r0, [r5, #0]
   147f6:	f7ff fe0f 	bl	14418 <start_le_scan_legacy>
	if (err) {
   147fa:	4604      	mov	r4, r0
   147fc:	b118      	cbz	r0, 14806 <bt_le_scan_start+0xea>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   147fe:	4805      	ldr	r0, [pc, #20]	; (14814 <bt_le_scan_start+0xf8>)
   14800:	f06f 0140 	mvn.w	r1, #64	; 0x40
   14804:	e7d2      	b.n	147ac <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
   14806:	4b04      	ldr	r3, [pc, #16]	; (14818 <bt_le_scan_start+0xfc>)
   14808:	601f      	str	r7, [r3, #0]
	return 0;
   1480a:	e794      	b.n	14736 <bt_le_scan_start+0x1a>
		return -EAGAIN;
   1480c:	f06f 040a 	mvn.w	r4, #10
   14810:	e791      	b.n	14736 <bt_le_scan_start+0x1a>
   14812:	bf00      	nop
   14814:	2000036c 	.word	0x2000036c
   14818:	20002240 	.word	0x20002240

0001481c <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   1481c:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1481e:	4808      	ldr	r0, [pc, #32]	; (14840 <bt_le_scan_stop+0x24>)
   14820:	f06f 0140 	mvn.w	r1, #64	; 0x40
   14824:	f00c fbac 	bl	20f80 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   14828:	0643      	lsls	r3, r0, #25
   1482a:	d506      	bpl.n	1483a <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   1482c:	4b05      	ldr	r3, [pc, #20]	; (14844 <bt_le_scan_stop+0x28>)
   1482e:	2000      	movs	r0, #0
   14830:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   14832:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   14836:	f7ff be41 	b.w	144bc <bt_le_scan_update>
}
   1483a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1483e:	bd08      	pop	{r3, pc}
   14840:	2000036c 	.word	0x2000036c
   14844:	20002240 	.word	0x20002240

00014848 <bt_le_scan_cb_register>:
	parent->next = child;
   14848:	2300      	movs	r3, #0
   1484a:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1484c:	4b05      	ldr	r3, [pc, #20]	; (14864 <bt_le_scan_cb_register+0x1c>)
   1484e:	6859      	ldr	r1, [r3, #4]

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   14850:	f100 0208 	add.w	r2, r0, #8
   14854:	b911      	cbnz	r1, 1485c <bt_le_scan_cb_register+0x14>
	list->head = node;
   14856:	e9c3 2200 	strd	r2, r2, [r3]
}
   1485a:	4770      	bx	lr
	parent->next = child;
   1485c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1485e:	605a      	str	r2, [r3, #4]
}
   14860:	4770      	bx	lr
   14862:	bf00      	nop
   14864:	20002238 	.word	0x20002238

00014868 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   14868:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1486a:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   1486e:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   14870:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   14872:	4801      	ldr	r0, [pc, #4]	; (14878 <tx_free+0x10>)
   14874:	f00e b8c0 	b.w	229f8 <k_queue_append>
   14878:	2000071c 	.word	0x2000071c

0001487c <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1487c:	4b19      	ldr	r3, [pc, #100]	; (148e4 <notify_connected+0x68>)
{
   1487e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   14882:	681d      	ldr	r5, [r3, #0]
{
   14884:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   14886:	b9ed      	cbnz	r5, 148c4 <notify_connected+0x48>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14888:	4e17      	ldr	r6, [pc, #92]	; (148e8 <notify_connected+0x6c>)
   1488a:	4d18      	ldr	r5, [pc, #96]	; (148ec <notify_connected+0x70>)
   1488c:	4f18      	ldr	r7, [pc, #96]	; (148f0 <notify_connected+0x74>)
   1488e:	46b0      	mov	r8, r6
   14890:	42b5      	cmp	r5, r6
   14892:	d90e      	bls.n	148b2 <notify_connected+0x36>
   14894:	4917      	ldr	r1, [pc, #92]	; (148f4 <notify_connected+0x78>)
   14896:	4818      	ldr	r0, [pc, #96]	; (148f8 <notify_connected+0x7c>)
   14898:	f240 43fd 	movw	r3, #1277	; 0x4fd
   1489c:	463a      	mov	r2, r7
   1489e:	f00b fb98 	bl	1ffd2 <printk>
   148a2:	4816      	ldr	r0, [pc, #88]	; (148fc <notify_connected+0x80>)
   148a4:	f00b fb95 	bl	1ffd2 <printk>
   148a8:	f240 41fd 	movw	r1, #1277	; 0x4fd
   148ac:	4638      	mov	r0, r7
   148ae:	f00b fdea 	bl	20486 <assert_post_action>
   148b2:	4545      	cmp	r5, r8
   148b4:	d30d      	bcc.n	148d2 <notify_connected+0x56>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   148b6:	7a63      	ldrb	r3, [r4, #9]
   148b8:	b993      	cbnz	r3, 148e0 <notify_connected+0x64>
		bt_gatt_connected(conn);
   148ba:	4620      	mov	r0, r4
	}
}
   148bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_gatt_connected(conn);
   148c0:	f002 bb56 	b.w	16f70 <bt_gatt_connected>
		if (cb->connected) {
   148c4:	682b      	ldr	r3, [r5, #0]
   148c6:	b113      	cbz	r3, 148ce <notify_connected+0x52>
			cb->connected(conn, conn->err);
   148c8:	7a61      	ldrb	r1, [r4, #9]
   148ca:	4620      	mov	r0, r4
   148cc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   148ce:	692d      	ldr	r5, [r5, #16]
   148d0:	e7d9      	b.n	14886 <notify_connected+0xa>
		if (cb->connected) {
   148d2:	682b      	ldr	r3, [r5, #0]
   148d4:	b113      	cbz	r3, 148dc <notify_connected+0x60>
			cb->connected(conn, conn->err);
   148d6:	7a61      	ldrb	r1, [r4, #9]
   148d8:	4620      	mov	r0, r4
   148da:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   148dc:	3514      	adds	r5, #20
   148de:	e7d7      	b.n	14890 <notify_connected+0x14>
}
   148e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148e4:	20002244 	.word	0x20002244
   148e8:	00022fac 	.word	0x00022fac
   148ec:	00022fac 	.word	0x00022fac
   148f0:	00024297 	.word	0x00024297
   148f4:	000242c7 	.word	0x000242c7
   148f8:	000237c9 	.word	0x000237c9
   148fc:	000242e2 	.word	0x000242e2

00014900 <send_frag>:
{
   14900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   14904:	694d      	ldr	r5, [r1, #20]
{
   14906:	4604      	mov	r4, r0
   14908:	460e      	mov	r6, r1
   1490a:	4691      	mov	r9, r2
   1490c:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   1490e:	f04f 33ff 	mov.w	r3, #4294967295
   14912:	4847      	ldr	r0, [pc, #284]	; (14a30 <send_frag+0x130>)
   14914:	f04f 32ff 	mov.w	r2, #4294967295
   14918:	f005 fff4 	bl	1a904 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1491c:	7aa3      	ldrb	r3, [r4, #10]
   1491e:	2b07      	cmp	r3, #7
   14920:	d146      	bne.n	149b0 <send_frag+0xb0>
	__asm__ volatile(
   14922:	f04f 0340 	mov.w	r3, #64	; 0x40
   14926:	f3ef 8211 	mrs	r2, BASEPRI
   1492a:	f383 8812 	msr	BASEPRI_MAX, r3
   1492e:	f3bf 8f6f 	isb	sy
	if (tx) {
   14932:	2d00      	cmp	r5, #0
   14934:	d04e      	beq.n	149d4 <send_frag+0xd4>
	parent->next = child;
   14936:	2300      	movs	r3, #0
   14938:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   1493a:	69a3      	ldr	r3, [r4, #24]
   1493c:	2b00      	cmp	r3, #0
   1493e:	d146      	bne.n	149ce <send_frag+0xce>
	list->head = node;
   14940:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   14944:	f382 8811 	msr	BASEPRI, r2
   14948:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1494c:	2104      	movs	r1, #4
   1494e:	f106 0008 	add.w	r0, r6, #8
   14952:	f002 fe65 	bl	17620 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   14956:	8823      	ldrh	r3, [r4, #0]
   14958:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   1495c:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14960:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   14962:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14966:	3b04      	subs	r3, #4
   14968:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1496a:	2302      	movs	r3, #2
   1496c:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   1496e:	4630      	mov	r0, r6
   14970:	f7ff f850 	bl	13a14 <bt_send>
	if (err) {
   14974:	2800      	cmp	r0, #0
   14976:	d058      	beq.n	14a2a <send_frag+0x12a>
	__asm__ volatile(
   14978:	f04f 0340 	mov.w	r3, #64	; 0x40
   1497c:	f3ef 8911 	mrs	r9, BASEPRI
   14980:	f383 8812 	msr	BASEPRI_MAX, r3
   14984:	f3bf 8f6f 	isb	sy
		if (tx) {
   14988:	2d00      	cmp	r5, #0
   1498a:	d039      	beq.n	14a00 <send_frag+0x100>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1498c:	6963      	ldr	r3, [r4, #20]
   1498e:	2200      	movs	r2, #0
   14990:	b153      	cbz	r3, 149a8 <send_frag+0xa8>
   14992:	429d      	cmp	r5, r3
   14994:	d131      	bne.n	149fa <send_frag+0xfa>
Z_GENLIST_REMOVE(slist, snode)
   14996:	682b      	ldr	r3, [r5, #0]
   14998:	bb4a      	cbnz	r2, 149ee <send_frag+0xee>
   1499a:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   1499c:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   1499e:	4295      	cmp	r5, r2
   149a0:	d100      	bne.n	149a4 <send_frag+0xa4>
	list->tail = node;
   149a2:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   149a4:	2300      	movs	r3, #0
   149a6:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   149a8:	f389 8811 	msr	BASEPRI, r9
   149ac:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   149b0:	481f      	ldr	r0, [pc, #124]	; (14a30 <send_frag+0x130>)
   149b2:	f005 ff63 	bl	1a87c <z_impl_k_sem_give>
	if (tx) {
   149b6:	b115      	cbz	r5, 149be <send_frag+0xbe>
		tx_free(tx);
   149b8:	4628      	mov	r0, r5
   149ba:	f7ff ff55 	bl	14868 <tx_free>
	if (always_consume) {
   149be:	b11f      	cbz	r7, 149c8 <send_frag+0xc8>
		net_buf_unref(buf);
   149c0:	4630      	mov	r0, r6
   149c2:	f002 fd61 	bl	17488 <net_buf_unref>
	return false;
   149c6:	2700      	movs	r7, #0
}
   149c8:	4638      	mov	r0, r7
   149ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   149ce:	601d      	str	r5, [r3, #0]
	list->tail = node;
   149d0:	61a5      	str	r5, [r4, #24]
}
   149d2:	e7b7      	b.n	14944 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   149d4:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   149d6:	b133      	cbz	r3, 149e6 <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
   149d8:	f103 080c 	add.w	r8, r3, #12
   149dc:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   149de:	3301      	adds	r3, #1
   149e0:	f8c8 3000 	str.w	r3, [r8]
   149e4:	e7ae      	b.n	14944 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   149e6:	69e3      	ldr	r3, [r4, #28]
   149e8:	f104 081c 	add.w	r8, r4, #28
   149ec:	e7f7      	b.n	149de <send_frag+0xde>
	parent->next = child;
   149ee:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   149f0:	69a3      	ldr	r3, [r4, #24]
   149f2:	429d      	cmp	r5, r3
	list->tail = node;
   149f4:	bf08      	it	eq
   149f6:	61a2      	streq	r2, [r4, #24]
}
   149f8:	e7d4      	b.n	149a4 <send_frag+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   149fa:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   149fc:	681b      	ldr	r3, [r3, #0]
   149fe:	e7c7      	b.n	14990 <send_frag+0x90>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   14a00:	f8d8 3000 	ldr.w	r3, [r8]
   14a04:	b95b      	cbnz	r3, 14a1e <send_frag+0x11e>
   14a06:	490b      	ldr	r1, [pc, #44]	; (14a34 <send_frag+0x134>)
   14a08:	480b      	ldr	r0, [pc, #44]	; (14a38 <send_frag+0x138>)
   14a0a:	4a0c      	ldr	r2, [pc, #48]	; (14a3c <send_frag+0x13c>)
   14a0c:	f240 2307 	movw	r3, #519	; 0x207
   14a10:	f00b fadf 	bl	1ffd2 <printk>
   14a14:	4809      	ldr	r0, [pc, #36]	; (14a3c <send_frag+0x13c>)
   14a16:	f240 2107 	movw	r1, #519	; 0x207
   14a1a:	f00b fd34 	bl	20486 <assert_post_action>
			(*pending_no_cb)--;
   14a1e:	f8d8 3000 	ldr.w	r3, [r8]
   14a22:	3b01      	subs	r3, #1
   14a24:	f8c8 3000 	str.w	r3, [r8]
   14a28:	e7be      	b.n	149a8 <send_frag+0xa8>
	return true;
   14a2a:	2701      	movs	r7, #1
   14a2c:	e7cc      	b.n	149c8 <send_frag+0xc8>
   14a2e:	bf00      	nop
   14a30:	200003a0 	.word	0x200003a0
   14a34:	00024301 	.word	0x00024301
   14a38:	000237c9 	.word	0x000237c9
   14a3c:	00024297 	.word	0x00024297

00014a40 <bt_conn_get_pkts>:
}
   14a40:	4800      	ldr	r0, [pc, #0]	; (14a44 <bt_conn_get_pkts+0x4>)
   14a42:	4770      	bx	lr
   14a44:	200003a0 	.word	0x200003a0

00014a48 <bt_conn_new>:
{
   14a48:	b538      	push	{r3, r4, r5, lr}
   14a4a:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   14a4c:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14a4e:	2501      	movs	r5, #1
   14a50:	428b      	cmp	r3, r1
   14a52:	d102      	bne.n	14a5a <bt_conn_new+0x12>
		return NULL;
   14a54:	2400      	movs	r4, #0
}
   14a56:	4620      	mov	r0, r4
   14a58:	bd38      	pop	{r3, r4, r5, pc}
   14a5a:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   14a5e:	f3bf 8f5b 	dmb	ish
   14a62:	e852 0f00 	ldrex	r0, [r2]
   14a66:	2800      	cmp	r0, #0
   14a68:	d104      	bne.n	14a74 <bt_conn_new+0x2c>
   14a6a:	e842 5c00 	strex	ip, r5, [r2]
   14a6e:	f1bc 0f00 	cmp.w	ip, #0
   14a72:	d1f6      	bne.n	14a62 <bt_conn_new+0x1a>
   14a74:	f3bf 8f5b 	dmb	ish
   14a78:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14a7c:	d002      	beq.n	14a84 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   14a7e:	3301      	adds	r3, #1
   14a80:	4604      	mov	r4, r0
   14a82:	e7e5      	b.n	14a50 <bt_conn_new+0x8>
	if (!conn) {
   14a84:	2c00      	cmp	r4, #0
   14a86:	d0e6      	beq.n	14a56 <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   14a88:	22c0      	movs	r2, #192	; 0xc0
   14a8a:	2100      	movs	r1, #0
   14a8c:	4620      	mov	r0, r4
   14a8e:	f00e f90c 	bl	22caa <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   14a92:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14a96:	4904      	ldr	r1, [pc, #16]	; (14aa8 <bt_conn_new+0x60>)
   14a98:	f006 fac8 	bl	1b02c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   14a9c:	4903      	ldr	r1, [pc, #12]	; (14aac <bt_conn_new+0x64>)
   14a9e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14aa2:	f006 f9bf 	bl	1ae24 <k_work_init>
	return conn;
   14aa6:	e7d6      	b.n	14a56 <bt_conn_new+0xe>
   14aa8:	00015291 	.word	0x00015291
   14aac:	0002100d 	.word	0x0002100d

00014ab0 <conn_cleanup>:
{
   14ab0:	b570      	push	{r4, r5, r6, lr}
   14ab2:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   14ab4:	f100 0638 	add.w	r6, r0, #56	; 0x38
   14ab8:	2200      	movs	r2, #0
   14aba:	2300      	movs	r3, #0
   14abc:	4630      	mov	r0, r6
   14abe:	f002 fc51 	bl	17364 <net_buf_get>
   14ac2:	4605      	mov	r5, r0
   14ac4:	bb48      	cbnz	r0, 14b1a <conn_cleanup+0x6a>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   14ac6:	6963      	ldr	r3, [r4, #20]
   14ac8:	b173      	cbz	r3, 14ae8 <conn_cleanup+0x38>
   14aca:	4918      	ldr	r1, [pc, #96]	; (14b2c <conn_cleanup+0x7c>)
   14acc:	4a18      	ldr	r2, [pc, #96]	; (14b30 <conn_cleanup+0x80>)
   14ace:	4819      	ldr	r0, [pc, #100]	; (14b34 <conn_cleanup+0x84>)
   14ad0:	f240 238a 	movw	r3, #650	; 0x28a
   14ad4:	f00b fa7d 	bl	1ffd2 <printk>
   14ad8:	4817      	ldr	r0, [pc, #92]	; (14b38 <conn_cleanup+0x88>)
   14ada:	f00b fa7a 	bl	1ffd2 <printk>
   14ade:	4814      	ldr	r0, [pc, #80]	; (14b30 <conn_cleanup+0x80>)
   14ae0:	f240 218a 	movw	r1, #650	; 0x28a
   14ae4:	f00b fccf 	bl	20486 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   14ae8:	69e3      	ldr	r3, [r4, #28]
   14aea:	b15b      	cbz	r3, 14b04 <conn_cleanup+0x54>
   14aec:	4913      	ldr	r1, [pc, #76]	; (14b3c <conn_cleanup+0x8c>)
   14aee:	4811      	ldr	r0, [pc, #68]	; (14b34 <conn_cleanup+0x84>)
   14af0:	4a0f      	ldr	r2, [pc, #60]	; (14b30 <conn_cleanup+0x80>)
   14af2:	f240 238b 	movw	r3, #651	; 0x28b
   14af6:	f00b fa6c 	bl	1ffd2 <printk>
   14afa:	480d      	ldr	r0, [pc, #52]	; (14b30 <conn_cleanup+0x80>)
   14afc:	f240 218b 	movw	r1, #651	; 0x28b
   14b00:	f00b fcc1 	bl	20486 <assert_post_action>
	bt_conn_reset_rx_state(conn);
   14b04:	4620      	mov	r0, r4
   14b06:	f00c fa84 	bl	21012 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14b0a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14b0e:	2200      	movs	r2, #0
}
   14b10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14b14:	2300      	movs	r3, #0
   14b16:	f006 bbad 	b.w	1b274 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   14b1a:	6968      	ldr	r0, [r5, #20]
   14b1c:	b108      	cbz	r0, 14b22 <conn_cleanup+0x72>
			tx_free(tx_data(buf)->tx);
   14b1e:	f7ff fea3 	bl	14868 <tx_free>
		net_buf_unref(buf);
   14b22:	4628      	mov	r0, r5
   14b24:	f002 fcb0 	bl	17488 <net_buf_unref>
   14b28:	e7c6      	b.n	14ab8 <conn_cleanup+0x8>
   14b2a:	bf00      	nop
   14b2c:	00024314 	.word	0x00024314
   14b30:	00024297 	.word	0x00024297
   14b34:	000237c9 	.word	0x000237c9
   14b38:	0002433a 	.word	0x0002433a
   14b3c:	0002434f 	.word	0x0002434f

00014b40 <bt_conn_send_cb>:
{
   14b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14b42:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   14b44:	7a83      	ldrb	r3, [r0, #10]
   14b46:	2b07      	cmp	r3, #7
{
   14b48:	4604      	mov	r4, r0
   14b4a:	460d      	mov	r5, r1
   14b4c:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   14b4e:	d114      	bne.n	14b7a <bt_conn_send_cb+0x3a>
	if (cb) {
   14b50:	b312      	cbz	r2, 14b98 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   14b52:	f007 fcf3 	bl	1c53c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   14b56:	4b13      	ldr	r3, [pc, #76]	; (14ba4 <bt_conn_send_cb+0x64>)
   14b58:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   14b5a:	4813      	ldr	r0, [pc, #76]	; (14ba8 <bt_conn_send_cb+0x68>)
   14b5c:	bf07      	ittee	eq
   14b5e:	2200      	moveq	r2, #0
   14b60:	2300      	moveq	r3, #0
   14b62:	f04f 32ff 	movne.w	r2, #4294967295
   14b66:	f04f 33ff 	movne.w	r3, #4294967295
   14b6a:	f005 fe1b 	bl	1a7a4 <z_impl_k_queue_get>
		if (!tx) {
   14b6e:	b1a8      	cbz	r0, 14b9c <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   14b70:	7aa3      	ldrb	r3, [r4, #10]
   14b72:	2b07      	cmp	r3, #7
   14b74:	d004      	beq.n	14b80 <bt_conn_send_cb+0x40>
			tx_free(tx);
   14b76:	f7ff fe77 	bl	14868 <tx_free>
		return -ENOTCONN;
   14b7a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   14b7e:	e00a      	b.n	14b96 <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
   14b80:	2300      	movs	r3, #0
		tx->user_data = user_data;
   14b82:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   14b86:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   14b88:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   14b8a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14b8e:	4629      	mov	r1, r5
   14b90:	f002 fc46 	bl	17420 <net_buf_put>
	return 0;
   14b94:	2000      	movs	r0, #0
}
   14b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
   14b98:	614a      	str	r2, [r1, #20]
   14b9a:	e7f6      	b.n	14b8a <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
   14b9c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14ba0:	e7f9      	b.n	14b96 <bt_conn_send_cb+0x56>
   14ba2:	bf00      	nop
   14ba4:	20001bd8 	.word	0x20001bd8
   14ba8:	2000071c 	.word	0x2000071c

00014bac <bt_conn_prepare_events>:
{
   14bac:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   14bae:	4b1b      	ldr	r3, [pc, #108]	; (14c1c <bt_conn_prepare_events+0x70>)
   14bb0:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14bb2:	2101      	movs	r1, #1
{
   14bb4:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
   14bb6:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14bb8:	f008 fb9a 	bl	1d2f0 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   14bbc:	4b18      	ldr	r3, [pc, #96]	; (14c20 <bt_conn_prepare_events+0x74>)
   14bbe:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
   14bc2:	f00c f9f3 	bl	20fac <atomic_get>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   14bc6:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
   14bca:	4619      	mov	r1, r3
   14bcc:	b908      	cbnz	r0, 14bd2 <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
   14bce:	2001      	movs	r0, #1
}
   14bd0:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14bd2:	7a9a      	ldrb	r2, [r3, #10]
   14bd4:	b99a      	cbnz	r2, 14bfe <bt_conn_prepare_events+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14bd6:	f3bf 8f5b 	dmb	ish
   14bda:	1d1a      	adds	r2, r3, #4
   14bdc:	e852 0f00 	ldrex	r0, [r2]
   14be0:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
   14be4:	e842 ce00 	strex	lr, ip, [r2]
   14be8:	f1be 0f00 	cmp.w	lr, #0
   14bec:	d1f6      	bne.n	14bdc <bt_conn_prepare_events+0x30>
   14bee:	f3bf 8f5b 	dmb	ish
   14bf2:	0642      	lsls	r2, r0, #25
   14bf4:	d503      	bpl.n	14bfe <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   14bf6:	4618      	mov	r0, r3
   14bf8:	f7ff ff5a 	bl	14ab0 <conn_cleanup>
   14bfc:	e7e7      	b.n	14bce <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   14bfe:	7a8b      	ldrb	r3, [r1, #10]
   14c00:	2b07      	cmp	r3, #7
   14c02:	d1e4      	bne.n	14bce <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   14c04:	4b07      	ldr	r3, [pc, #28]	; (14c24 <bt_conn_prepare_events+0x78>)
   14c06:	4628      	mov	r0, r5
   14c08:	2200      	movs	r2, #0
   14c0a:	2104      	movs	r1, #4
   14c0c:	f008 fb70 	bl	1d2f0 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14c10:	2301      	movs	r3, #1
   14c12:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   14c16:	2002      	movs	r0, #2
	return ev_count;
   14c18:	e7da      	b.n	14bd0 <bt_conn_prepare_events+0x24>
   14c1a:	bf00      	nop
   14c1c:	2000049c 	.word	0x2000049c
   14c20:	20001650 	.word	0x20001650
   14c24:	20001688 	.word	0x20001688

00014c28 <bt_conn_unref>:
{
   14c28:	b508      	push	{r3, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14c2a:	30c0      	adds	r0, #192	; 0xc0
   14c2c:	f3bf 8f5b 	dmb	ish
   14c30:	e850 3f00 	ldrex	r3, [r0]
   14c34:	1e5a      	subs	r2, r3, #1
   14c36:	e840 2100 	strex	r1, r2, [r0]
   14c3a:	2900      	cmp	r1, #0
   14c3c:	d1f8      	bne.n	14c30 <bt_conn_unref+0x8>
   14c3e:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   14c42:	2b00      	cmp	r3, #0
   14c44:	dc10      	bgt.n	14c68 <bt_conn_unref+0x40>
   14c46:	4909      	ldr	r1, [pc, #36]	; (14c6c <bt_conn_unref+0x44>)
   14c48:	4a09      	ldr	r2, [pc, #36]	; (14c70 <bt_conn_unref+0x48>)
   14c4a:	480a      	ldr	r0, [pc, #40]	; (14c74 <bt_conn_unref+0x4c>)
   14c4c:	f240 4346 	movw	r3, #1094	; 0x446
   14c50:	f00b f9bf 	bl	1ffd2 <printk>
   14c54:	4808      	ldr	r0, [pc, #32]	; (14c78 <bt_conn_unref+0x50>)
   14c56:	f00b f9bc 	bl	1ffd2 <printk>
}
   14c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(old > 0, "Conn reference counter is 0");
   14c5e:	4804      	ldr	r0, [pc, #16]	; (14c70 <bt_conn_unref+0x48>)
   14c60:	f240 4146 	movw	r1, #1094	; 0x446
   14c64:	f00b bc0f 	b.w	20486 <assert_post_action>
}
   14c68:	bd08      	pop	{r3, pc}
   14c6a:	bf00      	nop
   14c6c:	00024368 	.word	0x00024368
   14c70:	00024297 	.word	0x00024297
   14c74:	000237c9 	.word	0x000237c9
   14c78:	00024370 	.word	0x00024370

00014c7c <bt_conn_lookup_handle>:
{
   14c7c:	4602      	mov	r2, r0
   14c7e:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   14c80:	2101      	movs	r1, #1
   14c82:	4803      	ldr	r0, [pc, #12]	; (14c90 <bt_conn_lookup_handle+0x14>)
   14c84:	f00c fa39 	bl	210fa <conn_lookup_handle>
}
   14c88:	2800      	cmp	r0, #0
   14c8a:	bf38      	it	cc
   14c8c:	2000      	movcc	r0, #0
   14c8e:	bd08      	pop	{r3, pc}
   14c90:	20001650 	.word	0x20001650

00014c94 <bt_conn_set_state>:
{
   14c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   14c98:	7a85      	ldrb	r5, [r0, #10]
   14c9a:	428d      	cmp	r5, r1
{
   14c9c:	4604      	mov	r4, r0
	if (conn->state == state) {
   14c9e:	d03e      	beq.n	14d1e <bt_conn_set_state+0x8a>
	conn->state = state;
   14ca0:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   14ca2:	b155      	cbz	r5, 14cba <bt_conn_set_state+0x26>
   14ca4:	2d06      	cmp	r5, #6
   14ca6:	d00e      	beq.n	14cc6 <bt_conn_set_state+0x32>
	switch (conn->state) {
   14ca8:	7aa3      	ldrb	r3, [r4, #10]
   14caa:	2b07      	cmp	r3, #7
   14cac:	d837      	bhi.n	14d1e <bt_conn_set_state+0x8a>
   14cae:	e8df f003 	tbb	[pc, r3]
   14cb2:	1138      	.short	0x1138
   14cb4:	36363636 	.word	0x36363636
   14cb8:	2877      	.short	0x2877
		if (conn->type != BT_CONN_TYPE_ISO) {
   14cba:	7883      	ldrb	r3, [r0, #2]
   14cbc:	2b08      	cmp	r3, #8
   14cbe:	d0f3      	beq.n	14ca8 <bt_conn_set_state+0x14>
			bt_conn_ref(conn);
   14cc0:	f00c fa00 	bl	210c4 <bt_conn_ref>
   14cc4:	e7f0      	b.n	14ca8 <bt_conn_set_state+0x14>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14cc6:	7883      	ldrb	r3, [r0, #2]
   14cc8:	2b01      	cmp	r3, #1
   14cca:	d1ed      	bne.n	14ca8 <bt_conn_set_state+0x14>
			k_work_cancel_delayable(&conn->deferred_work);
   14ccc:	3060      	adds	r0, #96	; 0x60
   14cce:	f006 fad7 	bl	1b280 <k_work_cancel_delayable>
   14cd2:	e7e9      	b.n	14ca8 <bt_conn_set_state+0x14>
	z_impl_k_sem_give(sem);
   14cd4:	4d51      	ldr	r5, [pc, #324]	; (14e1c <bt_conn_set_state+0x188>)
		tx->pending_no_cb = 0U;
   14cd6:	2600      	movs	r6, #0
	__asm__ volatile(
   14cd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   14cdc:	f3ef 8211 	mrs	r2, BASEPRI
   14ce0:	f383 8812 	msr	BASEPRI_MAX, r3
   14ce4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   14ce8:	69e3      	ldr	r3, [r4, #28]
   14cea:	2b00      	cmp	r3, #0
   14cec:	d075      	beq.n	14dda <bt_conn_set_state+0x146>
			conn->pending_no_cb--;
   14cee:	3b01      	subs	r3, #1
   14cf0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   14cf2:	f382 8811 	msr	BASEPRI, r2
   14cf6:	f3bf 8f6f 	isb	sy
   14cfa:	4628      	mov	r0, r5
   14cfc:	f005 fdbe 	bl	1a87c <z_impl_k_sem_give>
}
   14d00:	e7ea      	b.n	14cd8 <bt_conn_set_state+0x44>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14d02:	78a3      	ldrb	r3, [r4, #2]
   14d04:	2b04      	cmp	r3, #4
   14d06:	d00a      	beq.n	14d1e <bt_conn_set_state+0x8a>
	z_impl_k_queue_init(queue);
   14d08:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14d0c:	f00d fe67 	bl	229de <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   14d10:	4843      	ldr	r0, [pc, #268]	; (14e20 <bt_conn_set_state+0x18c>)
   14d12:	2100      	movs	r1, #0
   14d14:	f008 fc48 	bl	1d5a8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   14d18:	2300      	movs	r3, #0
	list->tail = NULL;
   14d1a:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
}
   14d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   14d22:	78a3      	ldrb	r3, [r4, #2]
   14d24:	2b04      	cmp	r3, #4
   14d26:	d104      	bne.n	14d32 <bt_conn_set_state+0x9e>
			bt_conn_unref(conn);
   14d28:	4620      	mov	r0, r4
}
   14d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
   14d2e:	f7ff bf7b 	b.w	14c28 <bt_conn_unref>
		switch (old_state) {
   14d32:	3d01      	subs	r5, #1
   14d34:	2d05      	cmp	r5, #5
   14d36:	d8f2      	bhi.n	14d1e <bt_conn_set_state+0x8a>
   14d38:	a301      	add	r3, pc, #4	; (adr r3, 14d40 <bt_conn_set_state+0xac>)
   14d3a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   14d3e:	bf00      	nop
   14d40:	00014d59 	.word	0x00014d59
   14d44:	00014d93 	.word	0x00014d93
   14d48:	00014d29 	.word	0x00014d29
   14d4c:	00014d29 	.word	0x00014d29
   14d50:	00014d93 	.word	0x00014d93
   14d54:	00014d93 	.word	0x00014d93
			tx_notify(conn);
   14d58:	4620      	mov	r0, r4
   14d5a:	f00c f934 	bl	20fc6 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   14d5e:	78a3      	ldrb	r3, [r4, #2]
   14d60:	2b01      	cmp	r3, #1
   14d62:	d103      	bne.n	14d6c <bt_conn_set_state+0xd8>
				k_work_cancel_delayable(&conn->deferred_work);
   14d64:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14d68:	f006 fa8a 	bl	1b280 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14d6c:	f3bf 8f5b 	dmb	ish
   14d70:	3404      	adds	r4, #4
   14d72:	e854 3f00 	ldrex	r3, [r4]
   14d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14d7a:	e844 3200 	strex	r2, r3, [r4]
   14d7e:	2a00      	cmp	r2, #0
   14d80:	d1f7      	bne.n	14d72 <bt_conn_set_state+0xde>
   14d82:	f3bf 8f5b 	dmb	ish
   14d86:	4826      	ldr	r0, [pc, #152]	; (14e20 <bt_conn_set_state+0x18c>)
}
   14d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14d8c:	2100      	movs	r1, #0
   14d8e:	f008 bc0b 	b.w	1d5a8 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   14d92:	7a63      	ldrb	r3, [r4, #9]
   14d94:	2b00      	cmp	r3, #0
   14d96:	d0c7      	beq.n	14d28 <bt_conn_set_state+0x94>
				notify_connected(conn);
   14d98:	4620      	mov	r0, r4
   14d9a:	f7ff fd6f 	bl	1487c <notify_connected>
   14d9e:	e7c3      	b.n	14d28 <bt_conn_set_state+0x94>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14da0:	78a3      	ldrb	r3, [r4, #2]
   14da2:	2b01      	cmp	r3, #1
   14da4:	d1bb      	bne.n	14d1e <bt_conn_set_state+0x8a>
					K_MSEC(10 * bt_dev.create_param.timeout));
   14da6:	4b1f      	ldr	r3, [pc, #124]	; (14e24 <bt_conn_set_state+0x190>)
   14da8:	8a9b      	ldrh	r3, [r3, #20]
   14daa:	210a      	movs	r1, #10
   14dac:	4359      	muls	r1, r3
		} else {
			return (t * to_hz + off) / from_hz;
   14dae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   14db2:	f240 36e7 	movw	r6, #999	; 0x3e7
   14db6:	2700      	movs	r7, #0
   14db8:	fbc0 6701 	smlal	r6, r7, r0, r1
   14dbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14dc0:	2300      	movs	r3, #0
   14dc2:	4630      	mov	r0, r6
   14dc4:	4639      	mov	r1, r7
   14dc6:	f7ec f99b 	bl	1100 <__aeabi_uldivmod>
   14dca:	4602      	mov	r2, r0
   14dcc:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   14dce:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   14dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_schedule(&conn->deferred_work,
   14dd6:	f006 b9d1 	b.w	1b17c <k_work_schedule>
Z_GENLIST_IS_EMPTY(slist)
   14dda:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   14ddc:	b128      	cbz	r0, 14dea <bt_conn_set_state+0x156>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14dde:	69a1      	ldr	r1, [r4, #24]
   14de0:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   14de2:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14de4:	4288      	cmp	r0, r1
	list->tail = node;
   14de6:	bf08      	it	eq
   14de8:	61a3      	streq	r3, [r4, #24]
   14dea:	f382 8811 	msr	BASEPRI, r2
   14dee:	f3bf 8f6f 	isb	sy
		if (!node) {
   14df2:	2800      	cmp	r0, #0
   14df4:	d093      	beq.n	14d1e <bt_conn_set_state+0x8a>
	__asm__ volatile(
   14df6:	f04f 0240 	mov.w	r2, #64	; 0x40
   14dfa:	f3ef 8311 	mrs	r3, BASEPRI
   14dfe:	f382 8812 	msr	BASEPRI_MAX, r2
   14e02:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   14e06:	68c2      	ldr	r2, [r0, #12]
   14e08:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   14e0a:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   14e0c:	f383 8811 	msr	BASEPRI, r3
   14e10:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   14e14:	f7ff fd28 	bl	14868 <tx_free>
   14e18:	e76f      	b.n	14cfa <bt_conn_set_state+0x66>
   14e1a:	bf00      	nop
   14e1c:	200003a0 	.word	0x200003a0
   14e20:	2000049c 	.word	0x2000049c
   14e24:	200002a0 	.word	0x200002a0

00014e28 <bt_conn_index>:
		index = conn - acl_conns;
   14e28:	4a0c      	ldr	r2, [pc, #48]	; (14e5c <bt_conn_index+0x34>)
{
   14e2a:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   14e2c:	1a84      	subs	r4, r0, r2
   14e2e:	10e3      	asrs	r3, r4, #3
   14e30:	4c0b      	ldr	r4, [pc, #44]	; (14e60 <bt_conn_index+0x38>)
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   14e32:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   14e34:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   14e38:	d00e      	beq.n	14e58 <bt_conn_index+0x30>
   14e3a:	490a      	ldr	r1, [pc, #40]	; (14e64 <bt_conn_index+0x3c>)
   14e3c:	4a0a      	ldr	r2, [pc, #40]	; (14e68 <bt_conn_index+0x40>)
   14e3e:	480b      	ldr	r0, [pc, #44]	; (14e6c <bt_conn_index+0x44>)
   14e40:	f240 4364 	movw	r3, #1124	; 0x464
   14e44:	f00b f8c5 	bl	1ffd2 <printk>
   14e48:	4809      	ldr	r0, [pc, #36]	; (14e70 <bt_conn_index+0x48>)
   14e4a:	f00b f8c2 	bl	1ffd2 <printk>
   14e4e:	4806      	ldr	r0, [pc, #24]	; (14e68 <bt_conn_index+0x40>)
   14e50:	f240 4164 	movw	r1, #1124	; 0x464
   14e54:	f00b fb17 	bl	20486 <assert_post_action>
}
   14e58:	b2e0      	uxtb	r0, r4
   14e5a:	bd10      	pop	{r4, pc}
   14e5c:	20001650 	.word	0x20001650
   14e60:	c28f5c29 	.word	0xc28f5c29
   14e64:	0002438e 	.word	0x0002438e
   14e68:	00024297 	.word	0x00024297
   14e6c:	000237c9 	.word	0x000237c9
   14e70:	00024455 	.word	0x00024455

00014e74 <bt_conn_create_pdu_timeout>:
{
   14e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14e76:	4604      	mov	r4, r0
   14e78:	460d      	mov	r5, r1
   14e7a:	4617      	mov	r7, r2
   14e7c:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   14e7e:	f00d fd89 	bl	22994 <k_is_in_isr>
   14e82:	b158      	cbz	r0, 14e9c <bt_conn_create_pdu_timeout+0x28>
   14e84:	490d      	ldr	r1, [pc, #52]	; (14ebc <bt_conn_create_pdu_timeout+0x48>)
   14e86:	480e      	ldr	r0, [pc, #56]	; (14ec0 <bt_conn_create_pdu_timeout+0x4c>)
   14e88:	4a0e      	ldr	r2, [pc, #56]	; (14ec4 <bt_conn_create_pdu_timeout+0x50>)
   14e8a:	f44f 6390 	mov.w	r3, #1152	; 0x480
   14e8e:	f00b f8a0 	bl	1ffd2 <printk>
   14e92:	480c      	ldr	r0, [pc, #48]	; (14ec4 <bt_conn_create_pdu_timeout+0x50>)
   14e94:	f44f 6190 	mov.w	r1, #1152	; 0x480
   14e98:	f00b faf5 	bl	20486 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   14e9c:	480a      	ldr	r0, [pc, #40]	; (14ec8 <bt_conn_create_pdu_timeout+0x54>)
   14e9e:	463a      	mov	r2, r7
   14ea0:	2c00      	cmp	r4, #0
   14ea2:	bf18      	it	ne
   14ea4:	4620      	movne	r0, r4
   14ea6:	4633      	mov	r3, r6
   14ea8:	f00d fbae 	bl	22608 <net_buf_alloc_fixed>
	if (!buf) {
   14eac:	4604      	mov	r4, r0
   14eae:	b118      	cbz	r0, 14eb8 <bt_conn_create_pdu_timeout+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
   14eb0:	1d29      	adds	r1, r5, #4
   14eb2:	3008      	adds	r0, #8
   14eb4:	f002 fa8a 	bl	173cc <net_buf_simple_reserve>
}
   14eb8:	4620      	mov	r0, r4
   14eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14ebc:	0002446f 	.word	0x0002446f
   14ec0:	000237c9 	.word	0x000237c9
   14ec4:	00024297 	.word	0x00024297
   14ec8:	20000738 	.word	0x20000738

00014ecc <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   14ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14ed0:	1d03      	adds	r3, r0, #4
{
   14ed2:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14ed4:	4618      	mov	r0, r3
   14ed6:	f00c f869 	bl	20fac <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14eda:	0582      	lsls	r2, r0, #22
   14edc:	d519      	bpl.n	14f12 <notify_le_param_updated+0x46>
	    conn->le.interval >= conn->le.interval_min &&
   14ede:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14ee2:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
   14ee6:	4291      	cmp	r1, r2
   14ee8:	d813      	bhi.n	14f12 <notify_le_param_updated+0x46>
	    conn->le.interval >= conn->le.interval_min &&
   14eea:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   14eee:	4291      	cmp	r1, r2
   14ef0:	d30f      	bcc.n	14f12 <notify_le_param_updated+0x46>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   14ef2:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
   14ef6:	4291      	cmp	r1, r2
   14ef8:	d10b      	bne.n	14f12 <notify_le_param_updated+0x46>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14efa:	f3bf 8f5b 	dmb	ish
   14efe:	e853 2f00 	ldrex	r2, [r3]
   14f02:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   14f06:	e843 2100 	strex	r1, r2, [r3]
   14f0a:	2900      	cmp	r1, #0
   14f0c:	d1f7      	bne.n	14efe <notify_le_param_updated+0x32>
   14f0e:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14f12:	4b1b      	ldr	r3, [pc, #108]	; (14f80 <notify_le_param_updated+0xb4>)
   14f14:	681d      	ldr	r5, [r3, #0]
   14f16:	b9c5      	cbnz	r5, 14f4a <notify_le_param_updated+0x7e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14f18:	4e1a      	ldr	r6, [pc, #104]	; (14f84 <notify_le_param_updated+0xb8>)
   14f1a:	4d1b      	ldr	r5, [pc, #108]	; (14f88 <notify_le_param_updated+0xbc>)
   14f1c:	4f1b      	ldr	r7, [pc, #108]	; (14f8c <notify_le_param_updated+0xc0>)
   14f1e:	46b1      	mov	r9, r6
   14f20:	42b5      	cmp	r5, r6
   14f22:	d90e      	bls.n	14f42 <notify_le_param_updated+0x76>
   14f24:	491a      	ldr	r1, [pc, #104]	; (14f90 <notify_le_param_updated+0xc4>)
   14f26:	481b      	ldr	r0, [pc, #108]	; (14f94 <notify_le_param_updated+0xc8>)
   14f28:	f240 534b 	movw	r3, #1355	; 0x54b
   14f2c:	463a      	mov	r2, r7
   14f2e:	f00b f850 	bl	1ffd2 <printk>
   14f32:	4819      	ldr	r0, [pc, #100]	; (14f98 <notify_le_param_updated+0xcc>)
   14f34:	f00b f84d 	bl	1ffd2 <printk>
   14f38:	f240 514b 	movw	r1, #1355	; 0x54b
   14f3c:	4638      	mov	r0, r7
   14f3e:	f00b faa2 	bl	20486 <assert_post_action>
   14f42:	454d      	cmp	r5, r9
   14f44:	d30d      	bcc.n	14f62 <notify_le_param_updated+0x96>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   14f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (cb->le_param_updated) {
   14f4a:	68ee      	ldr	r6, [r5, #12]
   14f4c:	b13e      	cbz	r6, 14f5e <notify_le_param_updated+0x92>
			cb->le_param_updated(conn, conn->le.interval,
   14f4e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   14f52:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   14f56:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   14f5a:	4620      	mov	r0, r4
   14f5c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   14f5e:	692d      	ldr	r5, [r5, #16]
   14f60:	e7d9      	b.n	14f16 <notify_le_param_updated+0x4a>
		if (cb->le_param_updated) {
   14f62:	f8d5 800c 	ldr.w	r8, [r5, #12]
   14f66:	f1b8 0f00 	cmp.w	r8, #0
   14f6a:	d007      	beq.n	14f7c <notify_le_param_updated+0xb0>
			cb->le_param_updated(conn, conn->le.interval,
   14f6c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   14f70:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   14f74:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   14f78:	4620      	mov	r0, r4
   14f7a:	47c0      	blx	r8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14f7c:	3514      	adds	r5, #20
   14f7e:	e7cf      	b.n	14f20 <notify_le_param_updated+0x54>
   14f80:	20002244 	.word	0x20002244
   14f84:	00022fac 	.word	0x00022fac
   14f88:	00022fac 	.word	0x00022fac
   14f8c:	00024297 	.word	0x00024297
   14f90:	000242c7 	.word	0x000242c7
   14f94:	000237c9 	.word	0x000237c9
   14f98:	000242e2 	.word	0x000242e2

00014f9c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   14f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14fa0:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   14fa2:	4608      	mov	r0, r1
{
   14fa4:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   14fa6:	f00b fe41 	bl	20c2c <bt_le_conn_params_valid>
   14faa:	4605      	mov	r5, r0
   14fac:	b918      	cbnz	r0, 14fb6 <le_param_req+0x1a>
		return false;
   14fae:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   14fb0:	4628      	mov	r0, r5
   14fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   14fb6:	4b1d      	ldr	r3, [pc, #116]	; (1502c <le_param_req+0x90>)
   14fb8:	681e      	ldr	r6, [r3, #0]
   14fba:	b9e6      	cbnz	r6, 14ff6 <le_param_req+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14fbc:	f8df 8080 	ldr.w	r8, [pc, #128]	; 15040 <le_param_req+0xa4>
   14fc0:	4e1b      	ldr	r6, [pc, #108]	; (15030 <le_param_req+0x94>)
   14fc2:	f8df 9080 	ldr.w	r9, [pc, #128]	; 15044 <le_param_req+0xa8>
   14fc6:	46c2      	mov	sl, r8
   14fc8:	4546      	cmp	r6, r8
   14fca:	d90e      	bls.n	14fea <le_param_req+0x4e>
   14fcc:	4919      	ldr	r1, [pc, #100]	; (15034 <le_param_req+0x98>)
   14fce:	481a      	ldr	r0, [pc, #104]	; (15038 <le_param_req+0x9c>)
   14fd0:	f240 5393 	movw	r3, #1427	; 0x593
   14fd4:	464a      	mov	r2, r9
   14fd6:	f00a fffc 	bl	1ffd2 <printk>
   14fda:	4818      	ldr	r0, [pc, #96]	; (1503c <le_param_req+0xa0>)
   14fdc:	f00a fff9 	bl	1ffd2 <printk>
   14fe0:	f240 5193 	movw	r1, #1427	; 0x593
   14fe4:	4648      	mov	r0, r9
   14fe6:	f00b fa4e 	bl	20486 <assert_post_action>
   14fea:	4556      	cmp	r6, sl
   14fec:	d2e0      	bcs.n	14fb0 <le_param_req+0x14>
		if (!cb->le_param_req) {
   14fee:	68b3      	ldr	r3, [r6, #8]
   14ff0:	b983      	cbnz	r3, 15014 <le_param_req+0x78>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14ff2:	3614      	adds	r6, #20
   14ff4:	e7e8      	b.n	14fc8 <le_param_req+0x2c>
		if (!cb->le_param_req) {
   14ff6:	68b3      	ldr	r3, [r6, #8]
   14ff8:	b90b      	cbnz	r3, 14ffe <le_param_req+0x62>
	for (cb = callback_list; cb; cb = cb->_next) {
   14ffa:	6936      	ldr	r6, [r6, #16]
   14ffc:	e7dd      	b.n	14fba <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   14ffe:	4621      	mov	r1, r4
   15000:	4638      	mov	r0, r7
   15002:	4798      	blx	r3
   15004:	2800      	cmp	r0, #0
   15006:	d0d2      	beq.n	14fae <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15008:	4620      	mov	r0, r4
   1500a:	f00b fe0f 	bl	20c2c <bt_le_conn_params_valid>
   1500e:	2800      	cmp	r0, #0
   15010:	d1f3      	bne.n	14ffa <le_param_req+0x5e>
   15012:	e7cc      	b.n	14fae <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   15014:	4621      	mov	r1, r4
   15016:	4638      	mov	r0, r7
   15018:	4798      	blx	r3
   1501a:	2800      	cmp	r0, #0
   1501c:	d0c7      	beq.n	14fae <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1501e:	4620      	mov	r0, r4
   15020:	f00b fe04 	bl	20c2c <bt_le_conn_params_valid>
   15024:	2800      	cmp	r0, #0
   15026:	d1e4      	bne.n	14ff2 <le_param_req+0x56>
   15028:	e7c1      	b.n	14fae <le_param_req+0x12>
   1502a:	bf00      	nop
   1502c:	20002244 	.word	0x20002244
   15030:	00022fac 	.word	0x00022fac
   15034:	000242c7 	.word	0x000242c7
   15038:	000237c9 	.word	0x000237c9
   1503c:	000242e2 	.word	0x000242e2
   15040:	00022fac 	.word	0x00022fac
   15044:	00024297 	.word	0x00024297

00015048 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   15048:	4b02      	ldr	r3, [pc, #8]	; (15054 <bt_conn_cb_register+0xc>)
   1504a:	681a      	ldr	r2, [r3, #0]
   1504c:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   1504e:	6018      	str	r0, [r3, #0]
}
   15050:	4770      	bx	lr
   15052:	bf00      	nop
   15054:	20002244 	.word	0x20002244

00015058 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   15058:	b538      	push	{r3, r4, r5, lr}
   1505a:	4605      	mov	r5, r0
   1505c:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1505e:	4809      	ldr	r0, [pc, #36]	; (15084 <bt_conn_add_le+0x2c>)
   15060:	2101      	movs	r1, #1
   15062:	f7ff fcf1 	bl	14a48 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   15066:	4602      	mov	r2, r0
   15068:	b148      	cbz	r0, 1507e <bt_conn_add_le+0x26>
		return NULL;
	}

	conn->id = id;
   1506a:	7205      	strb	r5, [r0, #8]
	bt_addr_le_copy(&conn->le.dst, peer);
   1506c:	4621      	mov	r1, r4
   1506e:	3090      	adds	r0, #144	; 0x90
   15070:	f00b ffa2 	bl	20fb8 <bt_addr_le_copy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   15074:	2301      	movs	r3, #1
   15076:	7093      	strb	r3, [r2, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   15078:	4b03      	ldr	r3, [pc, #12]	; (15088 <bt_conn_add_le+0x30>)
   1507a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1507e:	4610      	mov	r0, r2
   15080:	bd38      	pop	{r3, r4, r5, pc}
   15082:	bf00      	nop
   15084:	20001650 	.word	0x20001650
   15088:	00280018 	.word	0x00280018

0001508c <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1508c:	b570      	push	{r4, r5, r6, lr}
   1508e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15090:	480c      	ldr	r0, [pc, #48]	; (150c4 <bt_conn_lookup_addr_le+0x38>)
{
   15092:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15094:	f00c f816 	bl	210c4 <bt_conn_ref>

		if (!conn) {
   15098:	4604      	mov	r4, r0
   1509a:	b128      	cbz	r0, 150a8 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1509c:	7883      	ldrb	r3, [r0, #2]
   1509e:	2b01      	cmp	r3, #1
   150a0:	d004      	beq.n	150ac <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   150a2:	f7ff fdc1 	bl	14c28 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   150a6:	2400      	movs	r4, #0
}
   150a8:	4620      	mov	r0, r4
   150aa:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   150ac:	4629      	mov	r1, r5
   150ae:	4632      	mov	r2, r6
   150b0:	f00c f850 	bl	21154 <bt_conn_is_peer_addr_le>
   150b4:	4605      	mov	r5, r0
   150b6:	2800      	cmp	r0, #0
   150b8:	d1f6      	bne.n	150a8 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   150ba:	4620      	mov	r0, r4
   150bc:	f7ff fdb4 	bl	14c28 <bt_conn_unref>
	return NULL;
   150c0:	462c      	mov	r4, r5
			continue;
   150c2:	e7f1      	b.n	150a8 <bt_conn_lookup_addr_le+0x1c>
   150c4:	20001650 	.word	0x20001650

000150c8 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   150c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   150ca:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   150cc:	480e      	ldr	r0, [pc, #56]	; (15108 <bt_conn_lookup_state_le+0x40>)
{
   150ce:	460e      	mov	r6, r1
   150d0:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   150d2:	f00b fff7 	bl	210c4 <bt_conn_ref>

		if (!conn) {
   150d6:	4604      	mov	r4, r0
   150d8:	b1a0      	cbz	r0, 15104 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   150da:	7883      	ldrb	r3, [r0, #2]
   150dc:	2b01      	cmp	r3, #1
   150de:	d003      	beq.n	150e8 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   150e0:	f7ff fda2 	bl	14c28 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   150e4:	2400      	movs	r4, #0
			continue;
   150e6:	e00d      	b.n	15104 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   150e8:	b136      	cbz	r6, 150f8 <bt_conn_lookup_state_le+0x30>
   150ea:	4632      	mov	r2, r6
   150ec:	4629      	mov	r1, r5
   150ee:	f00c f831 	bl	21154 <bt_conn_is_peer_addr_le>
   150f2:	b908      	cbnz	r0, 150f8 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   150f4:	4620      	mov	r0, r4
   150f6:	e7f3      	b.n	150e0 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   150f8:	7aa3      	ldrb	r3, [r4, #10]
   150fa:	42bb      	cmp	r3, r7
   150fc:	d1fa      	bne.n	150f4 <bt_conn_lookup_state_le+0x2c>
   150fe:	7a23      	ldrb	r3, [r4, #8]
   15100:	42ab      	cmp	r3, r5
   15102:	d1f7      	bne.n	150f4 <bt_conn_lookup_state_le+0x2c>
}
   15104:	4620      	mov	r0, r4
   15106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15108:	20001650 	.word	0x20001650

0001510c <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   1510c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15110:	4604      	mov	r4, r0
   15112:	4843      	ldr	r0, [pc, #268]	; (15220 <bt_conn_le_create+0x114>)
   15114:	460e      	mov	r6, r1
   15116:	4615      	mov	r5, r2
   15118:	461f      	mov	r7, r3
   1511a:	f00b ff47 	bl	20fac <atomic_get>
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1511e:	0781      	lsls	r1, r0, #30
   15120:	d405      	bmi.n	1512e <bt_conn_le_create+0x22>
		return -EAGAIN;
   15122:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   15126:	4628      	mov	r0, r5
   15128:	b002      	add	sp, #8
   1512a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   1512e:	4610      	mov	r0, r2
   15130:	f00b fd7c 	bl	20c2c <bt_le_conn_params_valid>
   15134:	b910      	cbnz	r0, 1513c <bt_conn_le_create+0x30>
		return -EINVAL;
   15136:	f06f 0515 	mvn.w	r5, #21
   1513a:	e7f4      	b.n	15126 <bt_conn_le_create+0x1a>
   1513c:	4838      	ldr	r0, [pc, #224]	; (15220 <bt_conn_le_create+0x114>)
   1513e:	f00b ff35 	bl	20fac <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   15142:	0642      	lsls	r2, r0, #25
   15144:	d4ed      	bmi.n	15122 <bt_conn_le_create+0x16>
   15146:	4836      	ldr	r0, [pc, #216]	; (15220 <bt_conn_le_create+0x114>)
   15148:	f00b ff30 	bl	20fac <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   1514c:	0503      	lsls	r3, r0, #20
   1514e:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   15152:	d45e      	bmi.n	15212 <bt_conn_le_create+0x106>
	if (!bt_id_scan_random_addr_check()) {
   15154:	f00b ff12 	bl	20f7c <bt_id_scan_random_addr_check>
   15158:	2800      	cmp	r0, #0
   1515a:	d0ec      	beq.n	15136 <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   1515c:	4621      	mov	r1, r4
   1515e:	4640      	mov	r0, r8
   15160:	f00c f818 	bl	21194 <bt_conn_exists_le>
   15164:	2800      	cmp	r0, #0
   15166:	d1e6      	bne.n	15136 <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   15168:	7823      	ldrb	r3, [r4, #0]
   1516a:	3b02      	subs	r3, #2
   1516c:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&dst, peer);
   1516e:	4621      	mov	r1, r4
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   15170:	d846      	bhi.n	15200 <bt_conn_le_create+0xf4>
		bt_addr_le_copy(&dst, peer);
   15172:	4668      	mov	r0, sp
   15174:	f00b ff20 	bl	20fb8 <bt_addr_le_copy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   15178:	f89d 3000 	ldrb.w	r3, [sp]
   1517c:	3b02      	subs	r3, #2
   1517e:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   15182:	4669      	mov	r1, sp
   15184:	2000      	movs	r0, #0
   15186:	f7ff ff67 	bl	15058 <bt_conn_add_le>
	if (!conn) {
   1518a:	4604      	mov	r4, r0
   1518c:	2800      	cmp	r0, #0
   1518e:	d043      	beq.n	15218 <bt_conn_le_create+0x10c>
	conn->le.interval_min = param->interval_min;
   15190:	882b      	ldrh	r3, [r5, #0]
   15192:	f8a0 30a8 	strh.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   15196:	886b      	ldrh	r3, [r5, #2]
   15198:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
	conn->le.latency = param->latency;
   1519c:	88ab      	ldrh	r3, [r5, #4]
   1519e:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
	conn->le.timeout = param->timeout;
   151a2:	88eb      	ldrh	r3, [r5, #6]
   151a4:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
	bt_dev.create_param = *param;
   151a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   151ac:	4d1d      	ldr	r5, [pc, #116]	; (15224 <bt_conn_le_create+0x118>)
   151ae:	f105 0c08 	add.w	ip, r5, #8
   151b2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   151b6:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   151b8:	2b00      	cmp	r3, #0
   151ba:	bf08      	it	eq
   151bc:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   151c0:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   151c2:	8a2b      	ldrh	r3, [r5, #16]
   151c4:	462a      	mov	r2, r5
	bt_dev.create_param.interval_coded =
   151c6:	b903      	cbnz	r3, 151ca <bt_conn_le_create+0xbe>
   151c8:	89ab      	ldrh	r3, [r5, #12]
   151ca:	8213      	strh	r3, [r2, #16]
		(bt_dev.create_param.window_coded != 0) ?
   151cc:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
   151ce:	b903      	cbnz	r3, 151d2 <bt_conn_le_create+0xc6>
   151d0:	89d3      	ldrh	r3, [r2, #14]
   151d2:	8253      	strh	r3, [r2, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   151d4:	2106      	movs	r1, #6
   151d6:	4620      	mov	r0, r4
   151d8:	f7ff fd5c 	bl	14c94 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   151dc:	4620      	mov	r0, r4
   151de:	f00b fd08 	bl	20bf2 <bt_le_create_conn>
	if (err) {
   151e2:	4605      	mov	r5, r0
   151e4:	b198      	cbz	r0, 1520e <bt_conn_le_create+0x102>
		conn->err = 0;
   151e6:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   151e8:	4631      	mov	r1, r6
   151ea:	4620      	mov	r0, r4
		conn->err = 0;
   151ec:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   151ee:	f7ff fd51 	bl	14c94 <bt_conn_set_state>
		bt_conn_unref(conn);
   151f2:	4620      	mov	r0, r4
   151f4:	f7ff fd18 	bl	14c28 <bt_conn_unref>
		bt_le_scan_update(false);
   151f8:	4630      	mov	r0, r6
   151fa:	f7ff f95f 	bl	144bc <bt_le_scan_update>
		return err;
   151fe:	e792      	b.n	15126 <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   15200:	f00b fea8 	bl	20f54 <bt_lookup_id_addr>
   15204:	4601      	mov	r1, r0
   15206:	4668      	mov	r0, sp
   15208:	f00b fed6 	bl	20fb8 <bt_addr_le_copy>
   1520c:	e7b9      	b.n	15182 <bt_conn_le_create+0x76>
	*ret_conn = conn;
   1520e:	603c      	str	r4, [r7, #0]
	return 0;
   15210:	e789      	b.n	15126 <bt_conn_le_create+0x1a>
		return -EALREADY;
   15212:	f06f 0577 	mvn.w	r5, #119	; 0x77
   15216:	e786      	b.n	15126 <bt_conn_le_create+0x1a>
		return -ENOMEM;
   15218:	f06f 050b 	mvn.w	r5, #11
   1521c:	e783      	b.n	15126 <bt_conn_le_create+0x1a>
   1521e:	bf00      	nop
   15220:	2000036c 	.word	0x2000036c
   15224:	200002a0 	.word	0x200002a0

00015228 <send_conn_le_param_update>:
{
   15228:	b538      	push	{r3, r4, r5, lr}
   1522a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1522c:	4608      	mov	r0, r1
{
   1522e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   15230:	f00b fcfc 	bl	20c2c <bt_le_conn_params_valid>
   15234:	b338      	cbz	r0, 15286 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15236:	4b15      	ldr	r3, [pc, #84]	; (1528c <send_conn_le_param_update+0x64>)
   15238:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1523c:	0799      	lsls	r1, r3, #30
   1523e:	d407      	bmi.n	15250 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   15240:	78e3      	ldrb	r3, [r4, #3]
   15242:	b173      	cbz	r3, 15262 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   15244:	4629      	mov	r1, r5
   15246:	4620      	mov	r0, r4
}
   15248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1524c:	f000 b9f6 	b.w	1563c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15250:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   15254:	079a      	lsls	r2, r3, #30
   15256:	d5f3      	bpl.n	15240 <send_conn_le_param_update+0x18>
   15258:	1d20      	adds	r0, r4, #4
   1525a:	f00b fea7 	bl	20fac <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1525e:	0543      	lsls	r3, r0, #21
   15260:	d4ee      	bmi.n	15240 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   15262:	4629      	mov	r1, r5
   15264:	4620      	mov	r0, r4
   15266:	f00b ff9f 	bl	211a8 <bt_conn_le_conn_update>
		if (rc == 0) {
   1526a:	b958      	cbnz	r0, 15284 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   1526c:	882b      	ldrh	r3, [r5, #0]
   1526e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   15272:	886b      	ldrh	r3, [r5, #2]
   15274:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   15278:	88ab      	ldrh	r3, [r5, #4]
   1527a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1527e:	88eb      	ldrh	r3, [r5, #6]
   15280:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   15284:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15286:	f06f 0015 	mvn.w	r0, #21
   1528a:	e7fb      	b.n	15284 <send_conn_le_param_update+0x5c>
   1528c:	200002a0 	.word	0x200002a0

00015290 <deferred_work>:
{
   15290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   15294:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   15298:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   1529a:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   1529e:	2b00      	cmp	r3, #0
   152a0:	d133      	bne.n	1530a <deferred_work+0x7a>
		bt_l2cap_disconnected(conn);
   152a2:	4630      	mov	r0, r6
   152a4:	f00c f805 	bl	212b2 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   152a8:	4b2f      	ldr	r3, [pc, #188]	; (15368 <deferred_work+0xd8>)
   152aa:	681d      	ldr	r5, [r3, #0]
   152ac:	b9ed      	cbnz	r5, 152ea <deferred_work+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   152ae:	4f2f      	ldr	r7, [pc, #188]	; (1536c <deferred_work+0xdc>)
   152b0:	4d2f      	ldr	r5, [pc, #188]	; (15370 <deferred_work+0xe0>)
   152b2:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 15380 <deferred_work+0xf0>
   152b6:	46b9      	mov	r9, r7
   152b8:	42bd      	cmp	r5, r7
   152ba:	d90e      	bls.n	152da <deferred_work+0x4a>
   152bc:	492d      	ldr	r1, [pc, #180]	; (15374 <deferred_work+0xe4>)
   152be:	482e      	ldr	r0, [pc, #184]	; (15378 <deferred_work+0xe8>)
   152c0:	f240 5312 	movw	r3, #1298	; 0x512
   152c4:	4642      	mov	r2, r8
   152c6:	f00a fe84 	bl	1ffd2 <printk>
   152ca:	482c      	ldr	r0, [pc, #176]	; (1537c <deferred_work+0xec>)
   152cc:	f00a fe81 	bl	1ffd2 <printk>
   152d0:	f240 5112 	movw	r1, #1298	; 0x512
   152d4:	4640      	mov	r0, r8
   152d6:	f00b f8d6 	bl	20486 <assert_post_action>
   152da:	454d      	cmp	r5, r9
   152dc:	d30d      	bcc.n	152fa <deferred_work+0x6a>
		bt_conn_unref(conn);
   152de:	4630      	mov	r0, r6
   152e0:	f7ff fca2 	bl	14c28 <bt_conn_unref>
}
   152e4:	b003      	add	sp, #12
   152e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (cb->disconnected) {
   152ea:	686b      	ldr	r3, [r5, #4]
   152ec:	b11b      	cbz	r3, 152f6 <deferred_work+0x66>
			cb->disconnected(conn, conn->err);
   152ee:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   152f2:	4630      	mov	r0, r6
   152f4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   152f6:	692d      	ldr	r5, [r5, #16]
   152f8:	e7d8      	b.n	152ac <deferred_work+0x1c>
		if (cb->disconnected) {
   152fa:	686b      	ldr	r3, [r5, #4]
   152fc:	b11b      	cbz	r3, 15306 <deferred_work+0x76>
			cb->disconnected(conn, conn->err);
   152fe:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   15302:	4630      	mov	r0, r6
   15304:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15306:	3514      	adds	r5, #20
   15308:	e7d6      	b.n	152b8 <deferred_work+0x28>
	if (conn->type != BT_CONN_TYPE_LE) {
   1530a:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   1530e:	2b01      	cmp	r3, #1
   15310:	d1e8      	bne.n	152e4 <deferred_work+0x54>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15312:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   15316:	b913      	cbnz	r3, 1531e <deferred_work+0x8e>
		bt_le_create_conn_cancel();
   15318:	f7fe fb58 	bl	139cc <bt_le_create_conn_cancel>
		return;
   1531c:	e7e2      	b.n	152e4 <deferred_work+0x54>
	if (atomic_test_and_clear_bit(conn->flags,
   1531e:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
   15322:	f3bf 8f5b 	dmb	ish
   15326:	e855 3f00 	ldrex	r3, [r5]
   1532a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   1532e:	e845 2100 	strex	r1, r2, [r5]
   15332:	2900      	cmp	r1, #0
   15334:	d1f7      	bne.n	15326 <deferred_work+0x96>
   15336:	f3bf 8f5b 	dmb	ish
   1533a:	059b      	lsls	r3, r3, #22
   1533c:	d507      	bpl.n	1534e <deferred_work+0xbe>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1533e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   15340:	9300      	str	r3, [sp, #0]
		send_conn_le_param_update(conn, param);
   15342:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   15344:	6d23      	ldr	r3, [r4, #80]	; 0x50
   15346:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   15348:	4630      	mov	r0, r6
   1534a:	f7ff ff6d 	bl	15228 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1534e:	f3bf 8f5b 	dmb	ish
   15352:	e855 3f00 	ldrex	r3, [r5]
   15356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1535a:	e845 3200 	strex	r2, r3, [r5]
   1535e:	2a00      	cmp	r2, #0
   15360:	d1f7      	bne.n	15352 <deferred_work+0xc2>
   15362:	f3bf 8f5b 	dmb	ish
   15366:	e7bd      	b.n	152e4 <deferred_work+0x54>
   15368:	20002244 	.word	0x20002244
   1536c:	00022fac 	.word	0x00022fac
   15370:	00022fac 	.word	0x00022fac
   15374:	000242c7 	.word	0x000242c7
   15378:	000237c9 	.word	0x000237c9
   1537c:	000242e2 	.word	0x000242e2
   15380:	00024297 	.word	0x00024297

00015384 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   15384:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   15386:	4801      	ldr	r0, [pc, #4]	; (1538c <bt_conn_create_frag_timeout+0x8>)
   15388:	f7ff bd74 	b.w	14e74 <bt_conn_create_pdu_timeout>
   1538c:	20000790 	.word	0x20000790

00015390 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   15390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15394:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   15396:	f04f 33ff 	mov.w	r3, #4294967295
   1539a:	f04f 32ff 	mov.w	r2, #4294967295
   1539e:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   153a0:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   153a2:	f7ff ffef 	bl	15384 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   153a6:	7833      	ldrb	r3, [r6, #0]
   153a8:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   153aa:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   153ac:	f04f 0600 	mov.w	r6, #0
   153b0:	d005      	beq.n	153be <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   153b2:	f002 f869 	bl	17488 <net_buf_unref>
		return NULL;
   153b6:	4635      	mov	r5, r6
}
   153b8:	4628      	mov	r0, r5
   153ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   153be:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   153c0:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   153c4:	4e0c      	ldr	r6, [pc, #48]	; (153f8 <create_frag.isra.0+0x68>)
   153c6:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   153c8:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   153cc:	f00d f93b 	bl	22646 <net_buf_simple_tailroom>
   153d0:	4580      	cmp	r8, r0
   153d2:	d20c      	bcs.n	153ee <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   153d4:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   153d8:	f854 1f08 	ldr.w	r1, [r4, #8]!
   153dc:	4632      	mov	r2, r6
   153de:	4638      	mov	r0, r7
   153e0:	f00d f939 	bl	22656 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   153e4:	4631      	mov	r1, r6
   153e6:	4620      	mov	r0, r4
   153e8:	f002 f93c 	bl	17664 <net_buf_simple_pull>
   153ec:	e7e4      	b.n	153b8 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   153ee:	4638      	mov	r0, r7
   153f0:	f00d f929 	bl	22646 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   153f4:	b286      	uxth	r6, r0
   153f6:	e7ef      	b.n	153d8 <create_frag.isra.0+0x48>
   153f8:	200002a0 	.word	0x200002a0

000153fc <bt_conn_process_tx>:
{
   153fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   153fe:	7a83      	ldrb	r3, [r0, #10]
{
   15400:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   15402:	b993      	cbnz	r3, 1542a <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15404:	f3bf 8f5b 	dmb	ish
   15408:	1d03      	adds	r3, r0, #4
   1540a:	e853 2f00 	ldrex	r2, [r3]
   1540e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   15412:	e843 1400 	strex	r4, r1, [r3]
   15416:	2c00      	cmp	r4, #0
   15418:	d1f7      	bne.n	1540a <bt_conn_process_tx+0xe>
   1541a:	f3bf 8f5b 	dmb	ish
   1541e:	0653      	lsls	r3, r2, #25
   15420:	d503      	bpl.n	1542a <bt_conn_process_tx+0x2e>
}
   15422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   15426:	f7ff bb43 	b.w	14ab0 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1542a:	2200      	movs	r2, #0
   1542c:	2300      	movs	r3, #0
   1542e:	f105 0038 	add.w	r0, r5, #56	; 0x38
   15432:	f001 ff97 	bl	17364 <net_buf_get>
	BT_ASSERT(buf);
   15436:	4604      	mov	r4, r0
   15438:	b960      	cbnz	r0, 15454 <bt_conn_process_tx+0x58>
   1543a:	4a20      	ldr	r2, [pc, #128]	; (154bc <bt_conn_process_tx+0xc0>)
   1543c:	4920      	ldr	r1, [pc, #128]	; (154c0 <bt_conn_process_tx+0xc4>)
   1543e:	4821      	ldr	r0, [pc, #132]	; (154c4 <bt_conn_process_tx+0xc8>)
   15440:	f240 23df 	movw	r3, #735	; 0x2df
   15444:	f00a fdc5 	bl	1ffd2 <printk>
   15448:	4040      	eors	r0, r0
   1544a:	f380 8811 	msr	BASEPRI, r0
   1544e:	f04f 0003 	mov.w	r0, #3
   15452:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   15454:	4f1c      	ldr	r7, [pc, #112]	; (154c8 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   15456:	89a1      	ldrh	r1, [r4, #12]
   15458:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
   1545c:	4291      	cmp	r1, r2
   1545e:	d807      	bhi.n	15470 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   15460:	2300      	movs	r3, #0
   15462:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   15464:	4621      	mov	r1, r4
   15466:	4628      	mov	r0, r5
   15468:	f7ff fa4a 	bl	14900 <send_frag>
	if (!send_buf(conn, buf)) {
   1546c:	b140      	cbz	r0, 15480 <bt_conn_process_tx+0x84>
}
   1546e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   15470:	f105 060a 	add.w	r6, r5, #10
   15474:	4621      	mov	r1, r4
   15476:	4630      	mov	r0, r6
   15478:	f7ff ff8a 	bl	15390 <create_frag.isra.0>
	if (!frag) {
   1547c:	4601      	mov	r1, r0
   1547e:	b920      	cbnz	r0, 1548a <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   15480:	4620      	mov	r0, r4
}
   15482:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   15486:	f001 bfff 	b.w	17488 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1548a:	2301      	movs	r3, #1
   1548c:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1548e:	4628      	mov	r0, r5
   15490:	f7ff fa36 	bl	14900 <send_frag>
   15494:	2800      	cmp	r0, #0
   15496:	d0f3      	beq.n	15480 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   15498:	89a2      	ldrh	r2, [r4, #12]
   1549a:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
   1549e:	429a      	cmp	r2, r3
   154a0:	d802      	bhi.n	154a8 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   154a2:	2300      	movs	r3, #0
   154a4:	2203      	movs	r2, #3
   154a6:	e7dd      	b.n	15464 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   154a8:	4621      	mov	r1, r4
   154aa:	4630      	mov	r0, r6
   154ac:	f7ff ff70 	bl	15390 <create_frag.isra.0>
		if (!frag) {
   154b0:	4601      	mov	r1, r0
   154b2:	2800      	cmp	r0, #0
   154b4:	d0e4      	beq.n	15480 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   154b6:	2301      	movs	r3, #1
   154b8:	461a      	mov	r2, r3
   154ba:	e7e8      	b.n	1548e <bt_conn_process_tx+0x92>
   154bc:	00024297 	.word	0x00024297
   154c0:	00024239 	.word	0x00024239
   154c4:	000237c9 	.word	0x000237c9
   154c8:	200002a0 	.word	0x200002a0

000154cc <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   154cc:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   154ce:	4914      	ldr	r1, [pc, #80]	; (15520 <bt_conn_init+0x54>)
   154d0:	4814      	ldr	r0, [pc, #80]	; (15524 <bt_conn_init+0x58>)
   154d2:	f00d fa91 	bl	229f8 <k_queue_append>
   154d6:	4914      	ldr	r1, [pc, #80]	; (15528 <bt_conn_init+0x5c>)
   154d8:	4812      	ldr	r0, [pc, #72]	; (15524 <bt_conn_init+0x58>)
   154da:	f00d fa8d 	bl	229f8 <k_queue_append>
   154de:	4913      	ldr	r1, [pc, #76]	; (1552c <bt_conn_init+0x60>)
   154e0:	4810      	ldr	r0, [pc, #64]	; (15524 <bt_conn_init+0x58>)
   154e2:	f00d fa89 	bl	229f8 <k_queue_append>
	}

	bt_att_init();
   154e6:	f00c fbf2 	bl	21cce <bt_att_init>

	err = bt_smp_init();
   154ea:	f00d f88a 	bl	22602 <bt_smp_init>
	if (err) {
   154ee:	4605      	mov	r5, r0
   154f0:	b998      	cbnz	r0, 1551a <bt_conn_init+0x4e>
		return err;
	}

	bt_l2cap_init();
   154f2:	f00b ffd0 	bl	21496 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   154f6:	480e      	ldr	r0, [pc, #56]	; (15530 <bt_conn_init+0x64>)
   154f8:	f00b fde4 	bl	210c4 <bt_conn_ref>

			if (!conn) {
   154fc:	4604      	mov	r4, r0
   154fe:	b160      	cbz	r0, 1551a <bt_conn_init+0x4e>
   15500:	3004      	adds	r0, #4
   15502:	f00b fd53 	bl	20fac <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   15506:	07c3      	lsls	r3, r0, #31
   15508:	d504      	bpl.n	15514 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   1550a:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1550c:	2102      	movs	r1, #2
   1550e:	4620      	mov	r0, r4
   15510:	f7ff fbc0 	bl	14c94 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   15514:	4620      	mov	r0, r4
   15516:	f7ff fb87 	bl	14c28 <bt_conn_unref>
		}
	}

	return 0;
}
   1551a:	4628      	mov	r0, r5
   1551c:	bd38      	pop	{r3, r4, r5, pc}
   1551e:	bf00      	nop
   15520:	20002248 	.word	0x20002248
   15524:	2000071c 	.word	0x2000071c
   15528:	20002258 	.word	0x20002258
   1552c:	20002268 	.word	0x20002268
   15530:	20001650 	.word	0x20001650

00015534 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   15534:	4b04      	ldr	r3, [pc, #16]	; (15548 <l2cap_accept+0x14>)
   15536:	6818      	ldr	r0, [r3, #0]
   15538:	b918      	cbnz	r0, 15542 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   1553a:	4a04      	ldr	r2, [pc, #16]	; (1554c <l2cap_accept+0x18>)
   1553c:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   1553e:	600b      	str	r3, [r1, #0]

		return 0;
   15540:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   15542:	f06f 000b 	mvn.w	r0, #11
}
   15546:	4770      	bx	lr
   15548:	20001718 	.word	0x20001718
   1554c:	000231b8 	.word	0x000231b8

00015550 <bt_l2cap_connected>:
{
   15550:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15554:	4f32      	ldr	r7, [pc, #200]	; (15620 <bt_l2cap_connected+0xd0>)
   15556:	4e33      	ldr	r6, [pc, #204]	; (15624 <bt_l2cap_connected+0xd4>)
   15558:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 15638 <bt_l2cap_connected+0xe8>
{
   1555c:	4604      	mov	r4, r0
   1555e:	46b9      	mov	r9, r7
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15560:	42be      	cmp	r6, r7
   15562:	d90e      	bls.n	15582 <bt_l2cap_connected+0x32>
   15564:	4930      	ldr	r1, [pc, #192]	; (15628 <bt_l2cap_connected+0xd8>)
   15566:	4831      	ldr	r0, [pc, #196]	; (1562c <bt_l2cap_connected+0xdc>)
   15568:	f240 1365 	movw	r3, #357	; 0x165
   1556c:	4642      	mov	r2, r8
   1556e:	f00a fd30 	bl	1ffd2 <printk>
   15572:	482f      	ldr	r0, [pc, #188]	; (15630 <bt_l2cap_connected+0xe0>)
   15574:	f00a fd2d 	bl	1ffd2 <printk>
   15578:	f240 1165 	movw	r1, #357	; 0x165
   1557c:	4640      	mov	r0, r8
   1557e:	f00a ff82 	bl	20486 <assert_post_action>
   15582:	454e      	cmp	r6, r9
   15584:	d302      	bcc.n	1558c <bt_l2cap_connected+0x3c>
}
   15586:	b002      	add	sp, #8
   15588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1558c:	6873      	ldr	r3, [r6, #4]
   1558e:	a901      	add	r1, sp, #4
   15590:	4620      	mov	r0, r4
   15592:	4798      	blx	r3
   15594:	2800      	cmp	r0, #0
   15596:	db3d      	blt.n	15614 <bt_l2cap_connected+0xc4>
		ch = BT_L2CAP_LE_CHAN(chan);
   15598:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   1559a:	8833      	ldrh	r3, [r6, #0]
   1559c:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   155a0:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   155a4:	4923      	ldr	r1, [pc, #140]	; (15634 <bt_l2cap_connected+0xe4>)
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   155a6:	f8d6 a008 	ldr.w	sl, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   155aa:	f105 0010 	add.w	r0, r5, #16
   155ae:	f005 fd3d 	bl	1b02c <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   155b2:	f3bf 8f5b 	dmb	ish
   155b6:	f105 0368 	add.w	r3, r5, #104	; 0x68
   155ba:	2200      	movs	r2, #0
   155bc:	e853 1f00 	ldrex	r1, [r3]
   155c0:	e843 2000 	strex	r0, r2, [r3]
   155c4:	2800      	cmp	r0, #0
   155c6:	d1f9      	bne.n	155bc <bt_l2cap_connected+0x6c>
   155c8:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   155cc:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   155ce:	6da2      	ldr	r2, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   155d0:	f105 0308 	add.w	r3, r5, #8
   155d4:	bb02      	cbnz	r2, 15618 <bt_l2cap_connected+0xc8>
	list->head = node;
   155d6:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (chan->ops->connected) {
   155da:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   155dc:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   155de:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   155e0:	f8c5 a00c 	str.w	sl, [r5, #12]
		if (chan->ops->connected) {
   155e4:	681b      	ldr	r3, [r3, #0]
   155e6:	b103      	cbz	r3, 155ea <bt_l2cap_connected+0x9a>
			chan->ops->connected(chan);
   155e8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   155ea:	9b01      	ldr	r3, [sp, #4]
   155ec:	f3bf 8f5b 	dmb	ish
   155f0:	3368      	adds	r3, #104	; 0x68
   155f2:	e853 2f00 	ldrex	r2, [r3]
   155f6:	f042 0201 	orr.w	r2, r2, #1
   155fa:	e843 2100 	strex	r1, r2, [r3]
   155fe:	2900      	cmp	r1, #0
   15600:	d1f7      	bne.n	155f2 <bt_l2cap_connected+0xa2>
   15602:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   15606:	9801      	ldr	r0, [sp, #4]
   15608:	6843      	ldr	r3, [r0, #4]
   1560a:	699b      	ldr	r3, [r3, #24]
   1560c:	b113      	cbz	r3, 15614 <bt_l2cap_connected+0xc4>
			chan->ops->status(chan, chan->status);
   1560e:	f100 0168 	add.w	r1, r0, #104	; 0x68
   15612:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15614:	360c      	adds	r6, #12
   15616:	e7a3      	b.n	15560 <bt_l2cap_connected+0x10>
	parent->next = child;
   15618:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1561a:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1561c:	e7dd      	b.n	155da <bt_l2cap_connected+0x8a>
   1561e:	bf00      	nop
   15620:	00022fac 	.word	0x00022fac
   15624:	00022f88 	.word	0x00022f88
   15628:	000244af 	.word	0x000244af
   1562c:	000237c9 	.word	0x000237c9
   15630:	000242e2 	.word	0x000242e2
   15634:	0002129b 	.word	0x0002129b
   15638:	0002447e 	.word	0x0002447e

0001563c <bt_l2cap_update_conn_param>:
{
   1563c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1563e:	4b17      	ldr	r3, [pc, #92]	; (1569c <bt_l2cap_update_conn_param+0x60>)
   15640:	781a      	ldrb	r2, [r3, #0]
   15642:	3201      	adds	r2, #1
	if (!ident) {
   15644:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   15648:	bf08      	it	eq
   1564a:	2201      	moveq	r2, #1
   1564c:	701a      	strb	r2, [r3, #0]
{
   1564e:	4606      	mov	r6, r0
   15650:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15652:	2208      	movs	r2, #8
   15654:	7819      	ldrb	r1, [r3, #0]
   15656:	2012      	movs	r0, #18
   15658:	f00b fdd2 	bl	21200 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1565c:	4604      	mov	r4, r0
   1565e:	b1d0      	cbz	r0, 15696 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   15660:	2108      	movs	r1, #8
   15662:	4408      	add	r0, r1
   15664:	f002 f840 	bl	176e8 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   15668:	882b      	ldrh	r3, [r5, #0]
   1566a:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1566c:	886b      	ldrh	r3, [r5, #2]
   1566e:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   15670:	88ab      	ldrh	r3, [r5, #4]
   15672:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   15674:	88eb      	ldrh	r3, [r5, #6]
   15676:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   15678:	2300      	movs	r3, #0
   1567a:	9300      	str	r3, [sp, #0]
   1567c:	4622      	mov	r2, r4
   1567e:	2105      	movs	r1, #5
   15680:	4630      	mov	r0, r6
   15682:	f00b fe2f 	bl	212e4 <bt_l2cap_send_cb>
	if (err) {
   15686:	4605      	mov	r5, r0
   15688:	b110      	cbz	r0, 15690 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1568a:	4620      	mov	r0, r4
   1568c:	f001 fefc 	bl	17488 <net_buf_unref>
}
   15690:	4628      	mov	r0, r5
   15692:	b002      	add	sp, #8
   15694:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   15696:	f06f 050b 	mvn.w	r5, #11
   1569a:	e7f9      	b.n	15690 <bt_l2cap_update_conn_param+0x54>
   1569c:	20002dad 	.word	0x20002dad

000156a0 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   156a0:	4b02      	ldr	r3, [pc, #8]	; (156ac <att_cfm_sent+0xc>)
   156a2:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   156a6:	f00b bf24 	b.w	214f2 <att_sent>
   156aa:	bf00      	nop
   156ac:	000219d7 	.word	0x000219d7

000156b0 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   156b0:	4b02      	ldr	r3, [pc, #8]	; (156bc <att_rsp_sent+0xc>)
   156b2:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   156b6:	f00b bf1c 	b.w	214f2 <att_sent>
   156ba:	bf00      	nop
   156bc:	000219f3 	.word	0x000219f3

000156c0 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   156c0:	4b02      	ldr	r3, [pc, #8]	; (156cc <att_req_sent+0xc>)
   156c2:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   156c6:	f00b bf14 	b.w	214f2 <att_sent>
   156ca:	bf00      	nop
   156cc:	0002191b 	.word	0x0002191b

000156d0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   156d0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   156d2:	3808      	subs	r0, #8
   156d4:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   156d6:	a901      	add	r1, sp, #4
   156d8:	4802      	ldr	r0, [pc, #8]	; (156e4 <bt_att_released+0x14>)
   156da:	f004 fbab 	bl	19e34 <k_mem_slab_free>
}
   156de:	b003      	add	sp, #12
   156e0:	f85d fb04 	ldr.w	pc, [sp], #4
   156e4:	2000061c 	.word	0x2000061c

000156e8 <read_group_cb>:
{
   156e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   156ec:	4606      	mov	r6, r0
   156ee:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   156f0:	f04f 0800 	mov.w	r8, #0
   156f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   156f8:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   156fa:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   156fc:	f88d 8008 	strb.w	r8, [sp, #8]
   15700:	a902      	add	r1, sp, #8
{
   15702:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15704:	f8ad 300a 	strh.w	r3, [sp, #10]
   15708:	f00b f8ed 	bl	208e6 <bt_uuid_cmp>
   1570c:	b1a0      	cbz	r0, 15738 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1570e:	f642 0301 	movw	r3, #10241	; 0x2801
   15712:	6830      	ldr	r0, [r6, #0]
   15714:	f88d 800c 	strb.w	r8, [sp, #12]
   15718:	a903      	add	r1, sp, #12
   1571a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1571e:	f00b f8e2 	bl	208e6 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15722:	b148      	cbz	r0, 15738 <read_group_cb+0x50>
		if (data->group &&
   15724:	6923      	ldr	r3, [r4, #16]
   15726:	b11b      	cbz	r3, 15730 <read_group_cb+0x48>
   15728:	885a      	ldrh	r2, [r3, #2]
   1572a:	42aa      	cmp	r2, r5
   1572c:	d200      	bcs.n	15730 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1572e:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15730:	2001      	movs	r0, #1
}
   15732:	b004      	add	sp, #16
   15734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15738:	6861      	ldr	r1, [r4, #4]
   1573a:	6830      	ldr	r0, [r6, #0]
   1573c:	f00b f8d3 	bl	208e6 <bt_uuid_cmp>
   15740:	b110      	cbz	r0, 15748 <read_group_cb+0x60>
		data->group = NULL;
   15742:	2300      	movs	r3, #0
   15744:	6123      	str	r3, [r4, #16]
   15746:	e7f3      	b.n	15730 <read_group_cb+0x48>
	if (data->rsp->len &&
   15748:	68e3      	ldr	r3, [r4, #12]
   1574a:	68a0      	ldr	r0, [r4, #8]
   1574c:	781a      	ldrb	r2, [r3, #0]
   1574e:	b13a      	cbz	r2, 15760 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   15750:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   15754:	8981      	ldrh	r1, [r0, #12]
   15756:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   15758:	4293      	cmp	r3, r2
   1575a:	da01      	bge.n	15760 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   1575c:	2000      	movs	r0, #0
   1575e:	e7e8      	b.n	15732 <read_group_cb+0x4a>
   15760:	2104      	movs	r1, #4
   15762:	3008      	adds	r0, #8
   15764:	f001 ffc0 	bl	176e8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15768:	4b09      	ldr	r3, [pc, #36]	; (15790 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1576a:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1576c:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1576e:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15770:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15772:	4631      	mov	r1, r6
   15774:	9300      	str	r3, [sp, #0]
   15776:	9401      	str	r4, [sp, #4]
   15778:	2300      	movs	r3, #0
   1577a:	4638      	mov	r0, r7
   1577c:	f00b ff5d 	bl	2163a <att_chan_read>
	if (read < 0) {
   15780:	2800      	cmp	r0, #0
   15782:	dbeb      	blt.n	1575c <read_group_cb+0x74>
	if (!data->group) {
   15784:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   15786:	3800      	subs	r0, #0
   15788:	bf18      	it	ne
   1578a:	2001      	movne	r0, #1
   1578c:	e7d1      	b.n	15732 <read_group_cb+0x4a>
   1578e:	bf00      	nop
   15790:	00021879 	.word	0x00021879

00015794 <read_type_cb>:
{
   15794:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   15798:	f8d2 8000 	ldr.w	r8, [r2]
{
   1579c:	4606      	mov	r6, r0
   1579e:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   157a0:	6800      	ldr	r0, [r0, #0]
   157a2:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   157a4:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   157a8:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   157aa:	f00b f89c 	bl	208e6 <bt_uuid_cmp>
   157ae:	4607      	mov	r7, r0
   157b0:	2800      	cmp	r0, #0
   157b2:	d13e      	bne.n	15832 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   157b4:	4628      	mov	r0, r5
   157b6:	2215      	movs	r2, #21
   157b8:	4631      	mov	r1, r6
   157ba:	f00c fdfc 	bl	223b6 <bt_gatt_check_perm>
   157be:	4605      	mov	r5, r0
   157c0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   157c2:	b148      	cbz	r0, 157d8 <read_type_cb+0x44>
		if (data->rsp->len) {
   157c4:	68e3      	ldr	r3, [r4, #12]
   157c6:	781b      	ldrb	r3, [r3, #0]
   157c8:	b923      	cbnz	r3, 157d4 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   157ca:	2500      	movs	r5, #0
}
   157cc:	4628      	mov	r0, r5
   157ce:	b003      	add	sp, #12
   157d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   157d4:	7527      	strb	r7, [r4, #20]
   157d6:	e7f8      	b.n	157ca <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   157d8:	68a0      	ldr	r0, [r4, #8]
   157da:	f001 feb5 	bl	17548 <net_buf_frag_last>
   157de:	2102      	movs	r1, #2
   157e0:	3008      	adds	r0, #8
   157e2:	f001 ff81 	bl	176e8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   157e6:	4b14      	ldr	r3, [pc, #80]	; (15838 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   157e8:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   157ea:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   157ec:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   157f0:	4631      	mov	r1, r6
   157f2:	9300      	str	r3, [sp, #0]
   157f4:	9401      	str	r4, [sp, #4]
   157f6:	462b      	mov	r3, r5
   157f8:	4640      	mov	r0, r8
   157fa:	f00b ff1e 	bl	2163a <att_chan_read>
	if (read < 0) {
   157fe:	2800      	cmp	r0, #0
   15800:	da07      	bge.n	15812 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   15802:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   15806:	bf26      	itte	cs
   15808:	4240      	negcs	r0, r0
   1580a:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1580c:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1580e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   15810:	e7dc      	b.n	157cc <read_type_cb+0x38>
	if (!data->item) {
   15812:	6923      	ldr	r3, [r4, #16]
   15814:	2b00      	cmp	r3, #0
   15816:	d0d8      	beq.n	157ca <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   15818:	68a0      	ldr	r0, [r4, #8]
   1581a:	f00b fe62 	bl	214e2 <net_buf_frags_len>
   1581e:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15822:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   15824:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15826:	7818      	ldrb	r0, [r3, #0]
   15828:	4285      	cmp	r5, r0
   1582a:	bf94      	ite	ls
   1582c:	2500      	movls	r5, #0
   1582e:	2501      	movhi	r5, #1
   15830:	e7cc      	b.n	157cc <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   15832:	2501      	movs	r5, #1
   15834:	e7ca      	b.n	157cc <read_type_cb+0x38>
   15836:	bf00      	nop
   15838:	000214ff 	.word	0x000214ff

0001583c <chan_send>:
{
   1583c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15840:	688b      	ldr	r3, [r1, #8]
   15842:	781b      	ldrb	r3, [r3, #0]
   15844:	2bd2      	cmp	r3, #210	; 0xd2
{
   15846:	4606      	mov	r6, r0
   15848:	460c      	mov	r4, r1
   1584a:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1584c:	d10c      	bne.n	15868 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   1584e:	6803      	ldr	r3, [r0, #0]
   15850:	6818      	ldr	r0, [r3, #0]
   15852:	f00c fed3 	bl	225fc <bt_smp_sign>
		if (err) {
   15856:	4605      	mov	r5, r0
   15858:	b130      	cbz	r0, 15868 <chan_send+0x2c>
			net_buf_unref(buf);
   1585a:	4620      	mov	r0, r4
   1585c:	f001 fe14 	bl	17488 <net_buf_unref>
}
   15860:	4628      	mov	r0, r5
   15862:	b003      	add	sp, #12
   15864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   15868:	f104 0008 	add.w	r0, r4, #8
   1586c:	f00c fee7 	bl	2263e <net_buf_simple_headroom>
	state->len = buf->len;
   15870:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   15874:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   15876:	b957      	cbnz	r7, 1588e <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
   15878:	68a3      	ldr	r3, [r4, #8]
   1587a:	7818      	ldrb	r0, [r3, #0]
   1587c:	f00b fe51 	bl	21522 <att_op_get_type>
   15880:	3801      	subs	r0, #1
   15882:	b2c0      	uxtb	r0, r0
   15884:	2804      	cmp	r0, #4
   15886:	bf9c      	itt	ls
   15888:	4b13      	ldrls	r3, [pc, #76]	; (158d8 <chan_send+0x9c>)
   1588a:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1588e:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   15890:	f8c6 7150 	str.w	r7, [r6, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15894:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   15896:	4b11      	ldr	r3, [pc, #68]	; (158dc <chan_send+0xa0>)
   15898:	429f      	cmp	r7, r3
   1589a:	d018      	beq.n	158ce <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
   1589c:	4b10      	ldr	r3, [pc, #64]	; (158e0 <chan_send+0xa4>)
   1589e:	429f      	cmp	r7, r3
   158a0:	d017      	beq.n	158d2 <chan_send+0x96>
		return att_sent;
   158a2:	4910      	ldr	r1, [pc, #64]	; (158e4 <chan_send+0xa8>)
   158a4:	4b10      	ldr	r3, [pc, #64]	; (158e8 <chan_send+0xac>)
   158a6:	4a11      	ldr	r2, [pc, #68]	; (158ec <chan_send+0xb0>)
   158a8:	428f      	cmp	r7, r1
   158aa:	bf18      	it	ne
   158ac:	4613      	movne	r3, r2
			       &chan->chan.chan);
   158ae:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   158b0:	9600      	str	r6, [sp, #0]
   158b2:	4622      	mov	r2, r4
   158b4:	2104      	movs	r1, #4
   158b6:	f00b fd15 	bl	212e4 <bt_l2cap_send_cb>
	if (err) {
   158ba:	4605      	mov	r5, r0
   158bc:	2800      	cmp	r0, #0
   158be:	d0cf      	beq.n	15860 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   158c0:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   158c2:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   158c6:	fa10 f088 	uxtah	r0, r0, r8
   158ca:	60a0      	str	r0, [r4, #8]
}
   158cc:	e7c8      	b.n	15860 <chan_send+0x24>
		return att_rsp_sent;
   158ce:	4b08      	ldr	r3, [pc, #32]	; (158f0 <chan_send+0xb4>)
   158d0:	e7ed      	b.n	158ae <chan_send+0x72>
		return att_cfm_sent;
   158d2:	4b08      	ldr	r3, [pc, #32]	; (158f4 <chan_send+0xb8>)
   158d4:	e7eb      	b.n	158ae <chan_send+0x72>
   158d6:	bf00      	nop
   158d8:	000231dc 	.word	0x000231dc
   158dc:	000219f3 	.word	0x000219f3
   158e0:	000219d7 	.word	0x000219d7
   158e4:	0002191b 	.word	0x0002191b
   158e8:	000156c1 	.word	0x000156c1
   158ec:	000214f3 	.word	0x000214f3
   158f0:	000156b1 	.word	0x000156b1
   158f4:	000156a1 	.word	0x000156a1

000158f8 <bt_att_chan_req_send>:
{
   158f8:	b538      	push	{r3, r4, r5, lr}
   158fa:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   158fc:	4604      	mov	r4, r0
   158fe:	b958      	cbnz	r0, 15918 <bt_att_chan_req_send+0x20>
   15900:	491d      	ldr	r1, [pc, #116]	; (15978 <bt_att_chan_req_send+0x80>)
   15902:	481e      	ldr	r0, [pc, #120]	; (1597c <bt_att_chan_req_send+0x84>)
   15904:	4a1e      	ldr	r2, [pc, #120]	; (15980 <bt_att_chan_req_send+0x88>)
   15906:	f240 2332 	movw	r3, #562	; 0x232
   1590a:	f00a fb62 	bl	1ffd2 <printk>
   1590e:	481c      	ldr	r0, [pc, #112]	; (15980 <bt_att_chan_req_send+0x88>)
   15910:	f240 2132 	movw	r1, #562	; 0x232
   15914:	f00a fdb7 	bl	20486 <assert_post_action>
	__ASSERT_NO_MSG(req);
   15918:	b95d      	cbnz	r5, 15932 <bt_att_chan_req_send+0x3a>
   1591a:	491a      	ldr	r1, [pc, #104]	; (15984 <bt_att_chan_req_send+0x8c>)
   1591c:	4817      	ldr	r0, [pc, #92]	; (1597c <bt_att_chan_req_send+0x84>)
   1591e:	4a18      	ldr	r2, [pc, #96]	; (15980 <bt_att_chan_req_send+0x88>)
   15920:	f240 2333 	movw	r3, #563	; 0x233
   15924:	f00a fb55 	bl	1ffd2 <printk>
   15928:	4815      	ldr	r0, [pc, #84]	; (15980 <bt_att_chan_req_send+0x88>)
   1592a:	f240 2133 	movw	r1, #563	; 0x233
   1592e:	f00a fdaa 	bl	20486 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   15932:	686b      	ldr	r3, [r5, #4]
   15934:	b95b      	cbnz	r3, 1594e <bt_att_chan_req_send+0x56>
   15936:	4914      	ldr	r1, [pc, #80]	; (15988 <bt_att_chan_req_send+0x90>)
   15938:	4810      	ldr	r0, [pc, #64]	; (1597c <bt_att_chan_req_send+0x84>)
   1593a:	4a11      	ldr	r2, [pc, #68]	; (15980 <bt_att_chan_req_send+0x88>)
   1593c:	f44f 730d 	mov.w	r3, #564	; 0x234
   15940:	f00a fb47 	bl	1ffd2 <printk>
   15944:	480e      	ldr	r0, [pc, #56]	; (15980 <bt_att_chan_req_send+0x88>)
   15946:	f44f 710d 	mov.w	r1, #564	; 0x234
   1594a:	f00a fd9c 	bl	20486 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   1594e:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   15952:	b15b      	cbz	r3, 1596c <bt_att_chan_req_send+0x74>
   15954:	490d      	ldr	r1, [pc, #52]	; (1598c <bt_att_chan_req_send+0x94>)
   15956:	4809      	ldr	r0, [pc, #36]	; (1597c <bt_att_chan_req_send+0x84>)
   15958:	4a09      	ldr	r2, [pc, #36]	; (15980 <bt_att_chan_req_send+0x88>)
   1595a:	f240 2335 	movw	r3, #565	; 0x235
   1595e:	f00a fb38 	bl	1ffd2 <printk>
   15962:	4807      	ldr	r0, [pc, #28]	; (15980 <bt_att_chan_req_send+0x88>)
   15964:	f240 2135 	movw	r1, #565	; 0x235
   15968:	f00a fd8d 	bl	20486 <assert_post_action>
	return chan_req_send(chan, req);
   1596c:	4629      	mov	r1, r5
   1596e:	4620      	mov	r0, r4
}
   15970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return chan_req_send(chan, req);
   15974:	f00b bf90 	b.w	21898 <chan_req_send>
   15978:	00024505 	.word	0x00024505
   1597c:	000237c9 	.word	0x000237c9
   15980:	000244d6 	.word	0x000244d6
   15984:	0002451b 	.word	0x0002451b
   15988:	0002450a 	.word	0x0002450a
   1598c:	00024514 	.word	0x00024514

00015990 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   15990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15992:	2300      	movs	r3, #0
{
   15994:	4607      	mov	r7, r0
   15996:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15998:	481f      	ldr	r0, [pc, #124]	; (15a18 <bt_att_accept+0x88>)
   1599a:	2200      	movs	r2, #0
   1599c:	4669      	mov	r1, sp
   1599e:	f004 f9dd 	bl	19d5c <k_mem_slab_alloc>
   159a2:	4604      	mov	r4, r0
   159a4:	b120      	cbz	r0, 159b0 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   159a6:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   159aa:	4620      	mov	r0, r4
   159ac:	b003      	add	sp, #12
   159ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   159b0:	4601      	mov	r1, r0
   159b2:	2230      	movs	r2, #48	; 0x30
   159b4:	9800      	ldr	r0, [sp, #0]
   159b6:	f00d f978 	bl	22caa <memset>
	att->conn = conn;
   159ba:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   159bc:	4817      	ldr	r0, [pc, #92]	; (15a1c <bt_att_accept+0x8c>)
	list->tail = NULL;
   159be:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   159c0:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   159c4:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   159c8:	2200      	movs	r2, #0
   159ca:	2300      	movs	r3, #0
   159cc:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   159ce:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   159d0:	f004 f9c4 	bl	19d5c <k_mem_slab_alloc>
   159d4:	4604      	mov	r4, r0
   159d6:	2800      	cmp	r0, #0
   159d8:	d1e5      	bne.n	159a6 <bt_att_accept+0x16>
   159da:	4601      	mov	r1, r0
   159dc:	f44f 72ac 	mov.w	r2, #344	; 0x158
   159e0:	9801      	ldr	r0, [sp, #4]
   159e2:	f00d f962 	bl	22caa <memset>
	chan->chan.chan.ops = &ops;
   159e6:	9801      	ldr	r0, [sp, #4]
   159e8:	4b0d      	ldr	r3, [pc, #52]	; (15a20 <bt_att_accept+0x90>)
   159ea:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   159ec:	f500 7080 	add.w	r0, r0, #256	; 0x100
   159f0:	f00c fff5 	bl	229de <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   159f4:	9b01      	ldr	r3, [sp, #4]
   159f6:	f3bf 8f5b 	dmb	ish
   159fa:	33f8      	adds	r3, #248	; 0xf8
   159fc:	e853 2f00 	ldrex	r2, [r3]
   15a00:	e843 4100 	strex	r1, r4, [r3]
   15a04:	2900      	cmp	r1, #0
   15a06:	d1f9      	bne.n	159fc <bt_att_accept+0x6c>
   15a08:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   15a0c:	9b01      	ldr	r3, [sp, #4]
   15a0e:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   15a12:	6033      	str	r3, [r6, #0]
	return 0;
   15a14:	e7c9      	b.n	159aa <bt_att_accept+0x1a>
   15a16:	bf00      	nop
   15a18:	200005fc 	.word	0x200005fc
   15a1c:	2000061c 	.word	0x2000061c
   15a20:	200004ac 	.word	0x200004ac

00015a24 <bt_att_connected>:
{
   15a24:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   15a26:	2104      	movs	r1, #4
{
   15a28:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   15a2a:	6800      	ldr	r0, [r0, #0]
   15a2c:	f00b fcf8 	bl	21420 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   15a30:	4605      	mov	r5, r0
   15a32:	b970      	cbnz	r0, 15a52 <bt_att_connected+0x2e>
   15a34:	491c      	ldr	r1, [pc, #112]	; (15aa8 <bt_att_connected+0x84>)
   15a36:	4a1d      	ldr	r2, [pc, #116]	; (15aac <bt_att_connected+0x88>)
   15a38:	481d      	ldr	r0, [pc, #116]	; (15ab0 <bt_att_connected+0x8c>)
   15a3a:	f640 2329 	movw	r3, #2601	; 0xa29
   15a3e:	f00a fac8 	bl	1ffd2 <printk>
   15a42:	481c      	ldr	r0, [pc, #112]	; (15ab4 <bt_att_connected+0x90>)
   15a44:	f00a fac5 	bl	1ffd2 <printk>
   15a48:	4818      	ldr	r0, [pc, #96]	; (15aac <bt_att_connected+0x88>)
   15a4a:	f640 2129 	movw	r1, #2601	; 0xa29
   15a4e:	f00a fd1a 	bl	20486 <assert_post_action>
	struct bt_att *att = att_chan->att;
   15a52:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   15a56:	6aab      	ldr	r3, [r5, #40]	; 0x28
	att_chan = ATT_CHAN(chan);
   15a58:	f1a4 0608 	sub.w	r6, r4, #8
	if (sys_slist_is_empty(&att->chans)) {
   15a5c:	b91b      	cbnz	r3, 15a66 <bt_att_connected+0x42>
   15a5e:	f105 000c 	add.w	r0, r5, #12
   15a62:	f00c ffbc 	bl	229de <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   15a66:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	parent->next = child;
   15a68:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
Z_GENLIST_PREPEND(slist, snode)
   15a6c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   15a6e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
	list->head = node;
   15a72:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   15a74:	b902      	cbnz	r2, 15a78 <bt_att_connected+0x54>
	list->tail = node;
   15a76:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15a78:	f3bf 8f5b 	dmb	ish
   15a7c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   15a80:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   15a84:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15a86:	bf58      	it	pl
   15a88:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   15a8a:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15a8c:	bf5c      	itt	pl
   15a8e:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15a92:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   15a96:	f00b fd8a 	bl	215ae <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   15a9a:	f504 708c 	add.w	r0, r4, #280	; 0x118
   15a9e:	4906      	ldr	r1, [pc, #24]	; (15ab8 <bt_att_connected+0x94>)
}
   15aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   15aa4:	f005 bac2 	b.w	1b02c <k_work_init_delayable>
   15aa8:	00024505 	.word	0x00024505
   15aac:	000244d6 	.word	0x000244d6
   15ab0:	000237c9 	.word	0x000237c9
   15ab4:	0002451f 	.word	0x0002451f
   15ab8:	00021d39 	.word	0x00021d39

00015abc <att_write_cmd>:
{
   15abc:	b5f0      	push	{r4, r5, r6, r7, lr}
   15abe:	4604      	mov	r4, r0
   15ac0:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   15ac2:	f101 0008 	add.w	r0, r1, #8
   15ac6:	460d      	mov	r5, r1
   15ac8:	f00c fdb1 	bl	2262e <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15acc:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   15ace:	68af      	ldr	r7, [r5, #8]
   15ad0:	89ad      	ldrh	r5, [r5, #12]
   15ad2:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15ad4:	2100      	movs	r1, #0
   15ad6:	6818      	ldr	r0, [r3, #0]
   15ad8:	f00c fd38 	bl	2254c <bt_gatt_change_aware>
   15adc:	b328      	cbz	r0, 15b2a <att_write_cmd+0x6e>
	if (!handle) {
   15ade:	b336      	cbz	r6, 15b2e <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
   15ae0:	2214      	movs	r2, #20
   15ae2:	2100      	movs	r1, #0
   15ae4:	a801      	add	r0, sp, #4
   15ae6:	f00d f8e0 	bl	22caa <memset>
	data.conn = chan->att->conn;
   15aea:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15aec:	4a11      	ldr	r2, [pc, #68]	; (15b34 <att_write_cmd+0x78>)
	data.conn = chan->att->conn;
   15aee:	681b      	ldr	r3, [r3, #0]
   15af0:	9300      	str	r3, [sp, #0]
	data.req = req;
   15af2:	2300      	movs	r3, #0
   15af4:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   15af8:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15afc:	2301      	movs	r3, #1
   15afe:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15b02:	4631      	mov	r1, r6
   15b04:	466b      	mov	r3, sp
   15b06:	4630      	mov	r0, r6
	data.value = value;
   15b08:	9703      	str	r7, [sp, #12]
	data.len = len;
   15b0a:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15b0e:	f00b fd89 	bl	21624 <bt_gatt_foreach_attr>
	if (data.err) {
   15b12:	f89d 3014 	ldrb.w	r3, [sp, #20]
   15b16:	b92b      	cbnz	r3, 15b24 <att_write_cmd+0x68>
	if (data.buf) {
   15b18:	9901      	ldr	r1, [sp, #4]
   15b1a:	b119      	cbz	r1, 15b24 <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15b1c:	4a06      	ldr	r2, [pc, #24]	; (15b38 <att_write_cmd+0x7c>)
   15b1e:	4620      	mov	r0, r4
   15b20:	f00b feed 	bl	218fe <bt_att_chan_send_rsp>
   15b24:	2000      	movs	r0, #0
}
   15b26:	b007      	add	sp, #28
   15b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15b2a:	2012      	movs	r0, #18
   15b2c:	e7fb      	b.n	15b26 <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
   15b2e:	2001      	movs	r0, #1
   15b30:	e7f9      	b.n	15b26 <att_write_cmd+0x6a>
   15b32:	bf00      	nop
   15b34:	00021adb 	.word	0x00021adb
   15b38:	000219f3 	.word	0x000219f3

00015b3c <att_indicate>:
{
   15b3c:	b570      	push	{r4, r5, r6, lr}
   15b3e:	4604      	mov	r4, r0
   15b40:	f101 0008 	add.w	r0, r1, #8
   15b44:	460d      	mov	r5, r1
   15b46:	f00c fd72 	bl	2262e <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   15b4a:	6826      	ldr	r6, [r4, #0]
   15b4c:	89ab      	ldrh	r3, [r5, #12]
   15b4e:	68aa      	ldr	r2, [r5, #8]
   15b50:	4601      	mov	r1, r0
   15b52:	6830      	ldr	r0, [r6, #0]
   15b54:	f00c fc85 	bl	22462 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   15b58:	211e      	movs	r1, #30
   15b5a:	2200      	movs	r2, #0
   15b5c:	4620      	mov	r0, r4
   15b5e:	f00c f851 	bl	21c04 <bt_att_chan_create_pdu>
	if (!buf) {
   15b62:	4601      	mov	r1, r0
   15b64:	b118      	cbz	r0, 15b6e <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   15b66:	4a03      	ldr	r2, [pc, #12]	; (15b74 <att_indicate+0x38>)
   15b68:	4620      	mov	r0, r4
   15b6a:	f00b fec8 	bl	218fe <bt_att_chan_send_rsp>
}
   15b6e:	2000      	movs	r0, #0
   15b70:	bd70      	pop	{r4, r5, r6, pc}
   15b72:	bf00      	nop
   15b74:	000219d7 	.word	0x000219d7

00015b78 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   15b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b7c:	4688      	mov	r8, r1
   15b7e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   15b80:	2101      	movs	r1, #1
   15b82:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   15b84:	4605      	mov	r5, r0
   15b86:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   15b88:	f00c f83c 	bl	21c04 <bt_att_chan_create_pdu>
	if (!buf) {
   15b8c:	4604      	mov	r4, r0
   15b8e:	b178      	cbz	r0, 15bb0 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   15b90:	2104      	movs	r1, #4
   15b92:	3008      	adds	r0, #8
   15b94:	f001 fda8 	bl	176e8 <net_buf_simple_add>
	rsp->request = req;
   15b98:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   15b9c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   15b9e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   15ba2:	4621      	mov	r1, r4
   15ba4:	4628      	mov	r0, r5
   15ba6:	4a03      	ldr	r2, [pc, #12]	; (15bb4 <send_err_rsp.part.0+0x3c>)
}
   15ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   15bac:	f00b bea7 	b.w	218fe <bt_att_chan_send_rsp>
}
   15bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15bb4:	000219f3 	.word	0x000219f3

00015bb8 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   15bb8:	898b      	ldrh	r3, [r1, #12]
{
   15bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15bbe:	4604      	mov	r4, r0
   15bc0:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   15bc2:	2b00      	cmp	r3, #0
   15bc4:	d05e      	beq.n	15c84 <bt_att_recv+0xcc>
	return net_buf_simple_pull_mem(&buf->b, len);
   15bc6:	2101      	movs	r1, #1
   15bc8:	f105 0008 	add.w	r0, r5, #8
   15bcc:	f001 fd6a 	bl	176a4 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   15bd0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   15bd4:	4607      	mov	r7, r0
   15bd6:	2b00      	cmp	r3, #0
   15bd8:	d054      	beq.n	15c84 <bt_att_recv+0xcc>
		if (hdr->code == handlers[i].op) {
   15bda:	4a2e      	ldr	r2, [pc, #184]	; (15c94 <bt_att_recv+0xdc>)
   15bdc:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   15bde:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15be2:	2300      	movs	r3, #0
   15be4:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   15be6:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   15bea:	4288      	cmp	r0, r1
   15bec:	d11a      	bne.n	15c24 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
   15bee:	00d9      	lsls	r1, r3, #3
   15bf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15bf4:	f893 8002 	ldrb.w	r8, [r3, #2]
   15bf8:	f1b8 0f01 	cmp.w	r8, #1
   15bfc:	d020      	beq.n	15c40 <bt_att_recv+0x88>
		} else if (handler->type == ATT_INDICATION &&
   15bfe:	f1b8 0f05 	cmp.w	r8, #5
   15c02:	d12d      	bne.n	15c60 <bt_att_recv+0xa8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15c04:	f3bf 8f5b 	dmb	ish
   15c08:	34f0      	adds	r4, #240	; 0xf0
   15c0a:	e854 2f00 	ldrex	r2, [r4]
   15c0e:	f042 0302 	orr.w	r3, r2, #2
   15c12:	e844 3000 	strex	r0, r3, [r4]
   15c16:	2800      	cmp	r0, #0
   15c18:	d1f7      	bne.n	15c0a <bt_att_recv+0x52>
   15c1a:	f3bf 8f5b 	dmb	ish
   15c1e:	f012 0f02 	tst.w	r2, #2
   15c22:	e01c      	b.n	15c5e <bt_att_recv+0xa6>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15c24:	3301      	adds	r3, #1
   15c26:	2b1c      	cmp	r3, #28
   15c28:	d1dd      	bne.n	15be6 <bt_att_recv+0x2e>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   15c2a:	4608      	mov	r0, r1
   15c2c:	f00b fc79 	bl	21522 <att_op_get_type>
   15c30:	b340      	cbz	r0, 15c84 <bt_att_recv+0xcc>
	if (!req) {
   15c32:	b339      	cbz	r1, 15c84 <bt_att_recv+0xcc>
   15c34:	2306      	movs	r3, #6
   15c36:	2200      	movs	r2, #0
   15c38:	4630      	mov	r0, r6
   15c3a:	f7ff ff9d 	bl	15b78 <send_err_rsp.part.0>
   15c3e:	e021      	b.n	15c84 <bt_att_recv+0xcc>
   15c40:	34f0      	adds	r4, #240	; 0xf0
   15c42:	f3bf 8f5b 	dmb	ish
   15c46:	e854 3f00 	ldrex	r3, [r4]
   15c4a:	f043 0201 	orr.w	r2, r3, #1
   15c4e:	e844 2000 	strex	r0, r2, [r4]
   15c52:	2800      	cmp	r0, #0
   15c54:	d1f7      	bne.n	15c46 <bt_att_recv+0x8e>
   15c56:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   15c5a:	f013 0f01 	tst.w	r3, #1
   15c5e:	d111      	bne.n	15c84 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
   15c60:	eb0c 0301 	add.w	r3, ip, r1
   15c64:	89a9      	ldrh	r1, [r5, #12]
   15c66:	785a      	ldrb	r2, [r3, #1]
   15c68:	4291      	cmp	r1, r2
   15c6a:	d30e      	bcc.n	15c8a <bt_att_recv+0xd2>
		err = handler->func(att_chan, buf);
   15c6c:	685b      	ldr	r3, [r3, #4]
   15c6e:	4629      	mov	r1, r5
   15c70:	4630      	mov	r0, r6
   15c72:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   15c74:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   15c78:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   15c7a:	d103      	bne.n	15c84 <bt_att_recv+0xcc>
   15c7c:	b110      	cbz	r0, 15c84 <bt_att_recv+0xcc>
		send_err_rsp(att_chan, hdr->code, 0, err);
   15c7e:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   15c80:	2900      	cmp	r1, #0
   15c82:	d1d8      	bne.n	15c36 <bt_att_recv+0x7e>
}
   15c84:	2000      	movs	r0, #0
   15c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   15c8a:	f1b8 0f01 	cmp.w	r8, #1
   15c8e:	d1f9      	bne.n	15c84 <bt_att_recv+0xcc>
		err = BT_ATT_ERR_INVALID_PDU;
   15c90:	2304      	movs	r3, #4
   15c92:	e7f4      	b.n	15c7e <bt_att_recv+0xc6>
   15c94:	000231f0 	.word	0x000231f0

00015c98 <att_write_req>:
{
   15c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15c9c:	4604      	mov	r4, r0
   15c9e:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   15ca0:	f101 0008 	add.w	r0, r1, #8
   15ca4:	460d      	mov	r5, r1
   15ca6:	f00c fcc2 	bl	2262e <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15caa:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   15cac:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   15cb0:	89ad      	ldrh	r5, [r5, #12]
   15cb2:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15cb4:	2101      	movs	r1, #1
   15cb6:	6818      	ldr	r0, [r3, #0]
   15cb8:	f00c fc48 	bl	2254c <bt_gatt_change_aware>
   15cbc:	2800      	cmp	r0, #0
   15cbe:	d040      	beq.n	15d42 <att_write_req+0xaa>
	if (!handle) {
   15cc0:	2e00      	cmp	r6, #0
   15cc2:	d040      	beq.n	15d46 <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
   15cc4:	2218      	movs	r2, #24
   15cc6:	2100      	movs	r1, #0
   15cc8:	4668      	mov	r0, sp
   15cca:	f00c ffee 	bl	22caa <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   15cce:	2200      	movs	r2, #0
   15cd0:	2113      	movs	r1, #19
   15cd2:	4620      	mov	r0, r4
   15cd4:	f00b ff96 	bl	21c04 <bt_att_chan_create_pdu>
   15cd8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   15cda:	b380      	cbz	r0, 15d3e <att_write_req+0xa6>
	data.conn = chan->att->conn;
   15cdc:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15cde:	4a1b      	ldr	r2, [pc, #108]	; (15d4c <att_write_req+0xb4>)
	data.conn = chan->att->conn;
   15ce0:	681b      	ldr	r3, [r3, #0]
   15ce2:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15ce4:	2301      	movs	r3, #1
   15ce6:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   15cea:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   15cee:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15cf0:	466b      	mov	r3, sp
   15cf2:	4631      	mov	r1, r6
   15cf4:	4630      	mov	r0, r6
	data.len = len;
   15cf6:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   15cfa:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   15cfe:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   15d02:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15d06:	f00b fc8d 	bl	21624 <bt_gatt_foreach_attr>
	if (data.err) {
   15d0a:	f89d 5014 	ldrb.w	r5, [sp, #20]
   15d0e:	b175      	cbz	r5, 15d2e <att_write_req+0x96>
			net_buf_unref(data.buf);
   15d10:	9801      	ldr	r0, [sp, #4]
   15d12:	f001 fbb9 	bl	17488 <net_buf_unref>
	if (!req) {
   15d16:	f89d 3014 	ldrb.w	r3, [sp, #20]
   15d1a:	4632      	mov	r2, r6
   15d1c:	4641      	mov	r1, r8
   15d1e:	4620      	mov	r0, r4
   15d20:	f7ff ff2a 	bl	15b78 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   15d24:	463d      	mov	r5, r7
}
   15d26:	4628      	mov	r0, r5
   15d28:	b007      	add	sp, #28
   15d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   15d2e:	9901      	ldr	r1, [sp, #4]
   15d30:	2900      	cmp	r1, #0
   15d32:	d0f8      	beq.n	15d26 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15d34:	4a06      	ldr	r2, [pc, #24]	; (15d50 <att_write_req+0xb8>)
   15d36:	4620      	mov	r0, r4
   15d38:	f00b fde1 	bl	218fe <bt_att_chan_send_rsp>
   15d3c:	e7f3      	b.n	15d26 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   15d3e:	250e      	movs	r5, #14
   15d40:	e7f1      	b.n	15d26 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15d42:	2512      	movs	r5, #18
   15d44:	e7ef      	b.n	15d26 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   15d46:	2501      	movs	r5, #1
   15d48:	e7ed      	b.n	15d26 <att_write_req+0x8e>
   15d4a:	bf00      	nop
   15d4c:	00021adb 	.word	0x00021adb
   15d50:	000219f3 	.word	0x000219f3

00015d54 <att_read_group_req>:
{
   15d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   15d58:	7b0c      	ldrb	r4, [r1, #12]
   15d5a:	3c04      	subs	r4, #4
   15d5c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   15d5e:	2c02      	cmp	r4, #2
{
   15d60:	4605      	mov	r5, r0
   15d62:	b08c      	sub	sp, #48	; 0x30
   15d64:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   15d66:	d001      	beq.n	15d6c <att_read_group_req+0x18>
   15d68:	2c10      	cmp	r4, #16
   15d6a:	d16f      	bne.n	15e4c <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
   15d6c:	2104      	movs	r1, #4
   15d6e:	3008      	adds	r0, #8
   15d70:	f001 fc98 	bl	176a4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15d74:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   15d78:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15d7a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15d7c:	1d01      	adds	r1, r0, #4
   15d7e:	4622      	mov	r2, r4
   15d80:	4640      	mov	r0, r8
   15d82:	f00a fdda 	bl	2093a <bt_uuid_create>
   15d86:	2800      	cmp	r0, #0
   15d88:	d062      	beq.n	15e50 <att_read_group_req+0xfc>
	if (!start || !end) {
   15d8a:	2e00      	cmp	r6, #0
   15d8c:	d03a      	beq.n	15e04 <att_read_group_req+0xb0>
   15d8e:	2400      	movs	r4, #0
   15d90:	2f00      	cmp	r7, #0
   15d92:	d036      	beq.n	15e02 <att_read_group_req+0xae>
	if (start > end) {
   15d94:	42be      	cmp	r6, r7
   15d96:	d835      	bhi.n	15e04 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   15d98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15d9c:	a901      	add	r1, sp, #4
   15d9e:	4640      	mov	r0, r8
   15da0:	f88d 4004 	strb.w	r4, [sp, #4]
   15da4:	f8ad 3006 	strh.w	r3, [sp, #6]
   15da8:	f00a fd9d 	bl	208e6 <bt_uuid_cmp>
   15dac:	2800      	cmp	r0, #0
   15dae:	d134      	bne.n	15e1a <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   15db0:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   15db2:	2214      	movs	r2, #20
   15db4:	2100      	movs	r1, #0
   15db6:	a807      	add	r0, sp, #28
   15db8:	f00c ff77 	bl	22caa <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   15dbc:	2201      	movs	r2, #1
   15dbe:	2111      	movs	r1, #17
   15dc0:	4620      	mov	r0, r4
   15dc2:	f00b ff44 	bl	21c4e <bt_att_create_pdu>
   15dc6:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   15dc8:	2800      	cmp	r0, #0
   15dca:	d041      	beq.n	15e50 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   15dcc:	2101      	movs	r1, #1
   15dce:	3008      	adds	r0, #8
	data.uuid = uuid;
   15dd0:	e9cd 5807 	strd	r5, r8, [sp, #28]
   15dd4:	f001 fc88 	bl	176e8 <net_buf_simple_add>
	data.rsp->len = 0U;
   15dd8:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15ddc:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15dde:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   15de0:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15de4:	4a1b      	ldr	r2, [pc, #108]	; (15e54 <att_read_group_req+0x100>)
	data.group = NULL;
   15de6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15dea:	4639      	mov	r1, r7
   15dec:	4630      	mov	r0, r6
   15dee:	f00b fc19 	bl	21624 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   15df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15df4:	781c      	ldrb	r4, [r3, #0]
   15df6:	bb1c      	cbnz	r4, 15e40 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   15df8:	9809      	ldr	r0, [sp, #36]	; 0x24
   15dfa:	f001 fb45 	bl	17488 <net_buf_unref>
	if (!req) {
   15dfe:	230a      	movs	r3, #10
   15e00:	e018      	b.n	15e34 <att_read_group_req+0xe0>
			*err = 0U;
   15e02:	463e      	mov	r6, r7
	if (!req) {
   15e04:	2301      	movs	r3, #1
   15e06:	4632      	mov	r2, r6
   15e08:	2110      	movs	r1, #16
   15e0a:	4628      	mov	r0, r5
   15e0c:	f7ff feb4 	bl	15b78 <send_err_rsp.part.0>
		return 0;
   15e10:	2400      	movs	r4, #0
}
   15e12:	4620      	mov	r0, r4
   15e14:	b00c      	add	sp, #48	; 0x30
   15e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   15e1a:	f642 0301 	movw	r3, #10241	; 0x2801
   15e1e:	a907      	add	r1, sp, #28
   15e20:	4640      	mov	r0, r8
   15e22:	f88d 401c 	strb.w	r4, [sp, #28]
   15e26:	f8ad 301e 	strh.w	r3, [sp, #30]
   15e2a:	f00a fd5c 	bl	208e6 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   15e2e:	2800      	cmp	r0, #0
   15e30:	d0be      	beq.n	15db0 <att_read_group_req+0x5c>
	if (!req) {
   15e32:	2310      	movs	r3, #16
   15e34:	4632      	mov	r2, r6
   15e36:	2110      	movs	r1, #16
   15e38:	4628      	mov	r0, r5
   15e3a:	f7ff fe9d 	bl	15b78 <send_err_rsp.part.0>
		return 0;
   15e3e:	e7e8      	b.n	15e12 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15e40:	4a05      	ldr	r2, [pc, #20]	; (15e58 <att_read_group_req+0x104>)
   15e42:	9909      	ldr	r1, [sp, #36]	; 0x24
   15e44:	4628      	mov	r0, r5
   15e46:	f00b fd5a 	bl	218fe <bt_att_chan_send_rsp>
	return 0;
   15e4a:	e7e1      	b.n	15e10 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   15e4c:	2404      	movs	r4, #4
   15e4e:	e7e0      	b.n	15e12 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   15e50:	240e      	movs	r4, #14
   15e52:	e7de      	b.n	15e12 <att_read_group_req+0xbe>
   15e54:	000156e9 	.word	0x000156e9
   15e58:	000219f3 	.word	0x000219f3

00015e5c <att_read_mult_req>:
{
   15e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15e60:	6886      	ldr	r6, [r0, #8]
{
   15e62:	b085      	sub	sp, #20
   15e64:	4604      	mov	r4, r0
   15e66:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   15e68:	4630      	mov	r0, r6
   15e6a:	2101      	movs	r1, #1
   15e6c:	f00c fb6e 	bl	2254c <bt_gatt_change_aware>
   15e70:	2800      	cmp	r0, #0
   15e72:	d038      	beq.n	15ee6 <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   15e74:	2210      	movs	r2, #16
   15e76:	2100      	movs	r1, #0
   15e78:	4668      	mov	r0, sp
   15e7a:	f00c ff16 	bl	22caa <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   15e7e:	2200      	movs	r2, #0
   15e80:	210f      	movs	r1, #15
   15e82:	4630      	mov	r0, r6
   15e84:	f00b fee3 	bl	21c4e <bt_att_create_pdu>
   15e88:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15e8a:	b370      	cbz	r0, 15eea <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15e8c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 15ef4 <att_read_mult_req+0x98>
	data.chan = chan;
   15e90:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   15e92:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15e96:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   15e9a:	89ab      	ldrh	r3, [r5, #12]
   15e9c:	2b01      	cmp	r3, #1
   15e9e:	d805      	bhi.n	15eac <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15ea0:	4a13      	ldr	r2, [pc, #76]	; (15ef0 <att_read_mult_req+0x94>)
   15ea2:	9902      	ldr	r1, [sp, #8]
   15ea4:	4620      	mov	r0, r4
   15ea6:	f00b fd2a 	bl	218fe <bt_att_chan_send_rsp>
   15eaa:	e018      	b.n	15ede <att_read_mult_req+0x82>
   15eac:	4638      	mov	r0, r7
   15eae:	f00c fbbe 	bl	2262e <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15eb2:	466b      	mov	r3, sp
   15eb4:	464a      	mov	r2, r9
   15eb6:	4601      	mov	r1, r0
   15eb8:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15eba:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15ebe:	f00b fbb1 	bl	21624 <bt_gatt_foreach_attr>
		if (data.err) {
   15ec2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15ec6:	2b00      	cmp	r3, #0
   15ec8:	d0e7      	beq.n	15e9a <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
   15eca:	9802      	ldr	r0, [sp, #8]
   15ecc:	f001 fadc 	bl	17488 <net_buf_unref>
	if (!req) {
   15ed0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15ed4:	4632      	mov	r2, r6
   15ed6:	210e      	movs	r1, #14
   15ed8:	4620      	mov	r0, r4
   15eda:	f7ff fe4d 	bl	15b78 <send_err_rsp.part.0>
	return 0;
   15ede:	2000      	movs	r0, #0
}
   15ee0:	b005      	add	sp, #20
   15ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15ee6:	2012      	movs	r0, #18
   15ee8:	e7fa      	b.n	15ee0 <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
   15eea:	200e      	movs	r0, #14
   15eec:	e7f8      	b.n	15ee0 <att_read_mult_req+0x84>
   15eee:	bf00      	nop
   15ef0:	000219f3 	.word	0x000219f3
   15ef4:	00021bb1 	.word	0x00021bb1

00015ef8 <att_read_rsp>:
{
   15ef8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15efc:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   15f00:	4605      	mov	r5, r0
   15f02:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   15f04:	4640      	mov	r0, r8
   15f06:	2101      	movs	r1, #1
{
   15f08:	4614      	mov	r4, r2
   15f0a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   15f0c:	f00c fb1e 	bl	2254c <bt_gatt_change_aware>
   15f10:	b390      	cbz	r0, 15f78 <att_read_rsp+0x80>
	if (!handle) {
   15f12:	b39e      	cbz	r6, 15f7c <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   15f14:	2210      	movs	r2, #16
   15f16:	2100      	movs	r1, #0
   15f18:	4668      	mov	r0, sp
   15f1a:	f00c fec6 	bl	22caa <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   15f1e:	2200      	movs	r2, #0
   15f20:	4621      	mov	r1, r4
   15f22:	4640      	mov	r0, r8
   15f24:	f00b fe93 	bl	21c4e <bt_att_create_pdu>
   15f28:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15f2a:	b348      	cbz	r0, 15f80 <att_read_rsp+0x88>
	data.offset = offset;
   15f2c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   15f30:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15f34:	2301      	movs	r3, #1
   15f36:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15f3a:	4a12      	ldr	r2, [pc, #72]	; (15f84 <att_read_rsp+0x8c>)
	data.chan = chan;
   15f3c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15f3e:	466b      	mov	r3, sp
   15f40:	4631      	mov	r1, r6
   15f42:	4630      	mov	r0, r6
   15f44:	f00b fb6e 	bl	21624 <bt_gatt_foreach_attr>
	if (data.err) {
   15f48:	f89d 400c 	ldrb.w	r4, [sp, #12]
   15f4c:	b174      	cbz	r4, 15f6c <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   15f4e:	9802      	ldr	r0, [sp, #8]
   15f50:	f001 fa9a 	bl	17488 <net_buf_unref>
	if (!req) {
   15f54:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15f58:	4632      	mov	r2, r6
   15f5a:	4639      	mov	r1, r7
   15f5c:	4628      	mov	r0, r5
   15f5e:	f7ff fe0b 	bl	15b78 <send_err_rsp.part.0>
		return 0;
   15f62:	2400      	movs	r4, #0
}
   15f64:	4620      	mov	r0, r4
   15f66:	b004      	add	sp, #16
   15f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15f6c:	4a06      	ldr	r2, [pc, #24]	; (15f88 <att_read_rsp+0x90>)
   15f6e:	9902      	ldr	r1, [sp, #8]
   15f70:	4628      	mov	r0, r5
   15f72:	f00b fcc4 	bl	218fe <bt_att_chan_send_rsp>
	return 0;
   15f76:	e7f5      	b.n	15f64 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15f78:	2412      	movs	r4, #18
   15f7a:	e7f3      	b.n	15f64 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   15f7c:	2401      	movs	r4, #1
   15f7e:	e7f1      	b.n	15f64 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   15f80:	240e      	movs	r4, #14
   15f82:	e7ef      	b.n	15f64 <att_read_rsp+0x6c>
   15f84:	00021bb1 	.word	0x00021bb1
   15f88:	000219f3 	.word	0x000219f3

00015f8c <att_read_type_req>:
{
   15f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   15f90:	7b0c      	ldrb	r4, [r1, #12]
   15f92:	3c04      	subs	r4, #4
   15f94:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   15f96:	2c02      	cmp	r4, #2
{
   15f98:	4605      	mov	r5, r0
   15f9a:	b08c      	sub	sp, #48	; 0x30
   15f9c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   15f9e:	d001      	beq.n	15fa4 <att_read_type_req+0x18>
   15fa0:	2c10      	cmp	r4, #16
   15fa2:	d150      	bne.n	16046 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   15fa4:	2104      	movs	r1, #4
   15fa6:	3008      	adds	r0, #8
   15fa8:	f001 fb7c 	bl	176a4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15fac:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   15fb0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15fb2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15fb4:	1d01      	adds	r1, r0, #4
   15fb6:	4622      	mov	r2, r4
   15fb8:	4640      	mov	r0, r8
   15fba:	f00a fcbe 	bl	2093a <bt_uuid_create>
   15fbe:	b188      	cbz	r0, 15fe4 <att_read_type_req+0x58>
	if (!start || !end) {
   15fc0:	b19e      	cbz	r6, 15fea <att_read_type_req+0x5e>
   15fc2:	b18f      	cbz	r7, 15fe8 <att_read_type_req+0x5c>
	if (start > end) {
   15fc4:	42b7      	cmp	r7, r6
   15fc6:	d310      	bcc.n	15fea <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   15fc8:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   15fca:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   15fcc:	2100      	movs	r1, #0
   15fce:	eb0d 0002 	add.w	r0, sp, r2
   15fd2:	f00c fe6a 	bl	22caa <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   15fd6:	2201      	movs	r2, #1
   15fd8:	2109      	movs	r1, #9
   15fda:	4620      	mov	r0, r4
   15fdc:	f00b fe37 	bl	21c4e <bt_att_create_pdu>
   15fe0:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   15fe2:	b968      	cbnz	r0, 16000 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   15fe4:	240e      	movs	r4, #14
   15fe6:	e007      	b.n	15ff8 <att_read_type_req+0x6c>
			*err = 0U;
   15fe8:	463e      	mov	r6, r7
	if (!req) {
   15fea:	2301      	movs	r3, #1
   15fec:	4632      	mov	r2, r6
   15fee:	2108      	movs	r1, #8
   15ff0:	4628      	mov	r0, r5
   15ff2:	f7ff fdc1 	bl	15b78 <send_err_rsp.part.0>
		return 0;
   15ff6:	2400      	movs	r4, #0
}
   15ff8:	4620      	mov	r0, r4
   15ffa:	b00c      	add	sp, #48	; 0x30
   15ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   16000:	2101      	movs	r1, #1
   16002:	3008      	adds	r0, #8
	data.uuid = uuid;
   16004:	e9cd 5806 	strd	r5, r8, [sp, #24]
   16008:	f001 fb6e 	bl	176e8 <net_buf_simple_add>
	data.rsp->len = 0U;
   1600c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16010:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16012:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16014:	4a0d      	ldr	r2, [pc, #52]	; (1604c <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
   16016:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1601a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1601c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16020:	4630      	mov	r0, r6
   16022:	ab06      	add	r3, sp, #24
   16024:	f00b fafe 	bl	21624 <bt_gatt_foreach_attr>
	if (data.err) {
   16028:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   1602c:	b12c      	cbz	r4, 1603a <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   1602e:	9808      	ldr	r0, [sp, #32]
   16030:	f001 fa2a 	bl	17488 <net_buf_unref>
	if (!req) {
   16034:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   16038:	e7d8      	b.n	15fec <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1603a:	4a05      	ldr	r2, [pc, #20]	; (16050 <att_read_type_req+0xc4>)
   1603c:	9908      	ldr	r1, [sp, #32]
   1603e:	4628      	mov	r0, r5
   16040:	f00b fc5d 	bl	218fe <bt_att_chan_send_rsp>
	return 0;
   16044:	e7d8      	b.n	15ff8 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   16046:	2404      	movs	r4, #4
   16048:	e7d6      	b.n	15ff8 <att_read_type_req+0x6c>
   1604a:	bf00      	nop
   1604c:	00015795 	.word	0x00015795
   16050:	000219f3 	.word	0x000219f3

00016054 <att_find_type_req>:
{
   16054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16058:	4688      	mov	r8, r1
   1605a:	b086      	sub	sp, #24
   1605c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1605e:	2106      	movs	r1, #6
   16060:	f108 0008 	add.w	r0, r8, #8
   16064:	f001 fb1e 	bl	176a4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   16068:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1606a:	b317      	cbz	r7, 160b2 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1606c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   16070:	f1b9 0f00 	cmp.w	r9, #0
   16074:	d01c      	beq.n	160b0 <att_find_type_req+0x5c>
	if (start > end) {
   16076:	454f      	cmp	r7, r9
   16078:	d81b      	bhi.n	160b2 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1607a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1607c:	f8ad 3002 	strh.w	r3, [sp, #2]
   16080:	2400      	movs	r4, #0
   16082:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16086:	a901      	add	r1, sp, #4
   16088:	4668      	mov	r0, sp
	value = buf->data;
   1608a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1608e:	f88d 4000 	strb.w	r4, [sp]
   16092:	f88d 4004 	strb.w	r4, [sp, #4]
   16096:	f8ad 3006 	strh.w	r3, [sp, #6]
   1609a:	f00a fc24 	bl	208e6 <bt_uuid_cmp>
   1609e:	4606      	mov	r6, r0
   160a0:	b190      	cbz	r0, 160c8 <att_find_type_req+0x74>
	if (!req) {
   160a2:	230a      	movs	r3, #10
   160a4:	463a      	mov	r2, r7
   160a6:	2106      	movs	r1, #6
   160a8:	4628      	mov	r0, r5
   160aa:	f7ff fd65 	bl	15b78 <send_err_rsp.part.0>
		return 0;
   160ae:	e007      	b.n	160c0 <att_find_type_req+0x6c>
			*err = 0U;
   160b0:	464f      	mov	r7, r9
	if (!req) {
   160b2:	2301      	movs	r3, #1
   160b4:	463a      	mov	r2, r7
   160b6:	2106      	movs	r1, #6
   160b8:	4628      	mov	r0, r5
   160ba:	f7ff fd5d 	bl	15b78 <send_err_rsp.part.0>
		return 0;
   160be:	2400      	movs	r4, #0
}
   160c0:	4620      	mov	r0, r4
   160c2:	b006      	add	sp, #24
   160c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   160c8:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   160cc:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   160d0:	4601      	mov	r1, r0
   160d2:	2214      	movs	r2, #20
   160d4:	a801      	add	r0, sp, #4
   160d6:	f00c fde8 	bl	22caa <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   160da:	4632      	mov	r2, r6
   160dc:	2107      	movs	r1, #7
   160de:	4640      	mov	r0, r8
   160e0:	f00b fdb5 	bl	21c4e <bt_att_create_pdu>
   160e4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   160e6:	b1e0      	cbz	r0, 16122 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   160e8:	230a      	movs	r3, #10
   160ea:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   160ee:	4a0e      	ldr	r2, [pc, #56]	; (16128 <att_find_type_req+0xd4>)
	data.value_len = value_len;
   160f0:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   160f4:	ab01      	add	r3, sp, #4
   160f6:	4649      	mov	r1, r9
   160f8:	4638      	mov	r0, r7
	data.value = value;
   160fa:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   160fe:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16100:	f00b fa90 	bl	21624 <bt_gatt_foreach_attr>
	if (data.err) {
   16104:	f89d 4015 	ldrb.w	r4, [sp, #21]
   16108:	b12c      	cbz	r4, 16116 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1610a:	9802      	ldr	r0, [sp, #8]
   1610c:	f001 f9bc 	bl	17488 <net_buf_unref>
	if (!req) {
   16110:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16114:	e7ce      	b.n	160b4 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16116:	4a05      	ldr	r2, [pc, #20]	; (1612c <att_find_type_req+0xd8>)
   16118:	9902      	ldr	r1, [sp, #8]
   1611a:	4628      	mov	r0, r5
   1611c:	f00b fbef 	bl	218fe <bt_att_chan_send_rsp>
	return 0;
   16120:	e7ce      	b.n	160c0 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   16122:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16124:	e7cc      	b.n	160c0 <att_find_type_req+0x6c>
   16126:	bf00      	nop
   16128:	00021751 	.word	0x00021751
   1612c:	000219f3 	.word	0x000219f3

00016130 <att_find_info_req>:
{
   16130:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   16132:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   16134:	881e      	ldrh	r6, [r3, #0]
{
   16136:	b085      	sub	sp, #20
   16138:	4605      	mov	r5, r0
	if (!start || !end) {
   1613a:	b19e      	cbz	r6, 16164 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1613c:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   1613e:	b184      	cbz	r4, 16162 <att_find_info_req+0x32>
	if (start > end) {
   16140:	42b4      	cmp	r4, r6
   16142:	d30f      	bcc.n	16164 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   16144:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   16146:	2210      	movs	r2, #16
   16148:	2100      	movs	r1, #0
   1614a:	4668      	mov	r0, sp
   1614c:	f00c fdad 	bl	22caa <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   16150:	2200      	movs	r2, #0
   16152:	2105      	movs	r1, #5
   16154:	4638      	mov	r0, r7
   16156:	f00b fd7a 	bl	21c4e <bt_att_create_pdu>
   1615a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1615c:	b958      	cbnz	r0, 16176 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1615e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   16160:	e007      	b.n	16172 <att_find_info_req+0x42>
			*err = 0U;
   16162:	4626      	mov	r6, r4
	if (!req) {
   16164:	2301      	movs	r3, #1
   16166:	4632      	mov	r2, r6
   16168:	2104      	movs	r1, #4
   1616a:	4628      	mov	r0, r5
   1616c:	f7ff fd04 	bl	15b78 <send_err_rsp.part.0>
	return 0;
   16170:	2000      	movs	r0, #0
}
   16172:	b005      	add	sp, #20
   16174:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16176:	4621      	mov	r1, r4
   16178:	4a09      	ldr	r2, [pc, #36]	; (161a0 <att_find_info_req+0x70>)
	data.chan = chan;
   1617a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1617c:	466b      	mov	r3, sp
   1617e:	4630      	mov	r0, r6
   16180:	f00b fa50 	bl	21624 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   16184:	9c02      	ldr	r4, [sp, #8]
   16186:	b924      	cbnz	r4, 16192 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   16188:	9801      	ldr	r0, [sp, #4]
   1618a:	f001 f97d 	bl	17488 <net_buf_unref>
	if (!req) {
   1618e:	230a      	movs	r3, #10
   16190:	e7e9      	b.n	16166 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16192:	4a04      	ldr	r2, [pc, #16]	; (161a4 <att_find_info_req+0x74>)
   16194:	9901      	ldr	r1, [sp, #4]
   16196:	4628      	mov	r0, r5
   16198:	f00b fbb1 	bl	218fe <bt_att_chan_send_rsp>
   1619c:	e7e8      	b.n	16170 <att_find_info_req+0x40>
   1619e:	bf00      	nop
   161a0:	00021931 	.word	0x00021931
   161a4:	000219f3 	.word	0x000219f3

000161a8 <att_mtu_req>:
{
   161a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   161aa:	6803      	ldr	r3, [r0, #0]
{
   161ac:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   161ae:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   161b0:	f3bf 8f5b 	dmb	ish
   161b4:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   161b8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   161bc:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   161c0:	071b      	lsls	r3, r3, #28
   161c2:	d41e      	bmi.n	16202 <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
   161c4:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   161c6:	881b      	ldrh	r3, [r3, #0]
   161c8:	2b16      	cmp	r3, #22
   161ca:	d91c      	bls.n	16206 <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   161cc:	2202      	movs	r2, #2
   161ce:	2103      	movs	r1, #3
   161d0:	f00b fd3d 	bl	21c4e <bt_att_create_pdu>
	if (!pdu) {
   161d4:	4606      	mov	r6, r0
   161d6:	b1c0      	cbz	r0, 1620a <att_mtu_req+0x62>
	return net_buf_simple_add(&buf->b, len);
   161d8:	2102      	movs	r1, #2
   161da:	3008      	adds	r0, #8
   161dc:	f001 fa84 	bl	176e8 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   161e0:	2717      	movs	r7, #23
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   161e2:	4a0b      	ldr	r2, [pc, #44]	; (16210 <att_mtu_req+0x68>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   161e4:	7007      	strb	r7, [r0, #0]
   161e6:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   161e8:	4631      	mov	r1, r6
   161ea:	4620      	mov	r0, r4
   161ec:	f00b fb87 	bl	218fe <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   161f0:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   161f2:	f8a4 707a 	strh.w	r7, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   161f6:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   161fa:	f00b f9d8 	bl	215ae <att_chan_mtu_updated>
	return 0;
   161fe:	4628      	mov	r0, r5
}
   16200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   16202:	2006      	movs	r0, #6
   16204:	e7fc      	b.n	16200 <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
   16206:	2004      	movs	r0, #4
   16208:	e7fa      	b.n	16200 <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
   1620a:	200e      	movs	r0, #14
   1620c:	e7f8      	b.n	16200 <att_mtu_req+0x58>
   1620e:	bf00      	nop
   16210:	000219f3 	.word	0x000219f3

00016214 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   16214:	b513      	push	{r0, r1, r4, lr}
   16216:	4602      	mov	r2, r0
   16218:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1621a:	4808      	ldr	r0, [pc, #32]	; (1623c <bt_att_req_alloc+0x28>)
   1621c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   1621e:	2400      	movs	r4, #0
   16220:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16222:	f003 fd9b 	bl	19d5c <k_mem_slab_alloc>
   16226:	4601      	mov	r1, r0
   16228:	b930      	cbnz	r0, 16238 <bt_att_req_alloc+0x24>
   1622a:	9801      	ldr	r0, [sp, #4]
   1622c:	2210      	movs	r2, #16
   1622e:	f00c fd3c 	bl	22caa <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
   16232:	9801      	ldr	r0, [sp, #4]
}
   16234:	b002      	add	sp, #8
   16236:	bd10      	pop	{r4, pc}
		return NULL;
   16238:	4620      	mov	r0, r4
   1623a:	e7fb      	b.n	16234 <bt_att_req_alloc+0x20>
   1623c:	2000063c 	.word	0x2000063c

00016240 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   16240:	b507      	push	{r0, r1, r2, lr}
   16242:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   16244:	6880      	ldr	r0, [r0, #8]
   16246:	b120      	cbz	r0, 16252 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   16248:	f001 f91e 	bl	17488 <net_buf_unref>
		req->buf = NULL;
   1624c:	9b01      	ldr	r3, [sp, #4]
   1624e:	2200      	movs	r2, #0
   16250:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   16252:	4803      	ldr	r0, [pc, #12]	; (16260 <bt_att_req_free+0x20>)
   16254:	a901      	add	r1, sp, #4
   16256:	f003 fded 	bl	19e34 <k_mem_slab_free>
}
   1625a:	b003      	add	sp, #12
   1625c:	f85d fb04 	ldr.w	pc, [sp], #4
   16260:	2000063c 	.word	0x2000063c

00016264 <att_handle_rsp>:
{
   16264:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   16268:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1626a:	f500 7090 	add.w	r0, r0, #288	; 0x120
{
   1626e:	4688      	mov	r8, r1
   16270:	4691      	mov	r9, r2
   16272:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   16274:	f005 f804 	bl	1b280 <k_work_cancel_delayable>
	if (!chan->req) {
   16278:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
   1627c:	2600      	movs	r6, #0
   1627e:	b1f0      	cbz	r0, 162be <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   16280:	4b10      	ldr	r3, [pc, #64]	; (162c4 <att_handle_rsp+0x60>)
   16282:	4298      	cmp	r0, r3
   16284:	d112      	bne.n	162ac <att_handle_rsp+0x48>
		chan->req = NULL;
   16286:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
	bt_att_func_t func = NULL;
   1628a:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   1628c:	6820      	ldr	r0, [r4, #0]
   1628e:	f00b fbf8 	bl	21a82 <att_req_send_process>
	if (func) {
   16292:	b13d      	cbz	r5, 162a4 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   16294:	6820      	ldr	r0, [r4, #0]
   16296:	f8cd a000 	str.w	sl, [sp]
   1629a:	6800      	ldr	r0, [r0, #0]
   1629c:	464b      	mov	r3, r9
   1629e:	4642      	mov	r2, r8
   162a0:	4639      	mov	r1, r7
   162a2:	47a8      	blx	r5
}
   162a4:	2000      	movs	r0, #0
   162a6:	b002      	add	sp, #8
   162a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   162ac:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   162ae:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   162b0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   162b4:	f7ff ffc4 	bl	16240 <bt_att_req_free>
	chan->req = NULL;
   162b8:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
   162bc:	e7e6      	b.n	1628c <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
   162be:	4605      	mov	r5, r0
   162c0:	e7e4      	b.n	1628c <att_handle_rsp+0x28>
   162c2:	bf00      	nop
   162c4:	20002278 	.word	0x20002278

000162c8 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   162c8:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   162cc:	b143      	cbz	r3, 162e0 <att_error_rsp+0x18>
   162ce:	4a05      	ldr	r2, [pc, #20]	; (162e4 <att_error_rsp+0x1c>)
   162d0:	4293      	cmp	r3, r2
   162d2:	d005      	beq.n	162e0 <att_error_rsp+0x18>
	err = rsp->error;
   162d4:	688b      	ldr	r3, [r1, #8]
   162d6:	78db      	ldrb	r3, [r3, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   162d8:	2200      	movs	r2, #0
   162da:	4611      	mov	r1, r2
   162dc:	f7ff bfc2 	b.w	16264 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   162e0:	230e      	movs	r3, #14
   162e2:	e7f9      	b.n	162d8 <att_error_rsp+0x10>
   162e4:	20002278 	.word	0x20002278

000162e8 <bt_att_disconnected>:
{
   162e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   162ea:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   162ee:	b085      	sub	sp, #20
   162f0:	4604      	mov	r4, r0
	if (!att_chan->att) {
   162f2:	b385      	cbz	r5, 16356 <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   162f4:	f500 71a6 	add.w	r1, r0, #332	; 0x14c
   162f8:	f105 0028 	add.w	r0, r5, #40	; 0x28
   162fc:	f00b f8d6 	bl	214ac <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   16300:	f1a4 0608 	sub.w	r6, r4, #8
   16304:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
   16308:	2200      	movs	r2, #0
   1630a:	2300      	movs	r3, #0
   1630c:	4638      	mov	r0, r7
   1630e:	f001 f829 	bl	17364 <net_buf_get>
   16312:	4602      	mov	r2, r0
   16314:	bb08      	cbnz	r0, 1635a <bt_att_disconnected+0x72>
	if (chan->req) {
   16316:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1631a:	b123      	cbz	r3, 16326 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1631c:	4601      	mov	r1, r0
   1631e:	230e      	movs	r3, #14
   16320:	4630      	mov	r0, r6
   16322:	f7ff ff9f 	bl	16264 <att_handle_rsp>
	chan->att = NULL;
   16326:	2300      	movs	r3, #0
   16328:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   1632c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1632e:	b993      	cbnz	r3, 16356 <bt_att_disconnected+0x6e>
	att_reset(att);
   16330:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   16332:	9803      	ldr	r0, [sp, #12]
   16334:	2200      	movs	r2, #0
   16336:	2300      	movs	r3, #0
   16338:	300c      	adds	r0, #12
   1633a:	f001 f813 	bl	17364 <net_buf_get>
   1633e:	b978      	cbnz	r0, 16360 <bt_att_disconnected+0x78>
	att->conn = NULL;
   16340:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   16342:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
   16344:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   16346:	b976      	cbnz	r6, 16366 <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
   16348:	4813      	ldr	r0, [pc, #76]	; (16398 <bt_att_disconnected+0xb0>)
   1634a:	a903      	add	r1, sp, #12
   1634c:	f003 fd72 	bl	19e34 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   16350:	6820      	ldr	r0, [r4, #0]
   16352:	f000 fe7f 	bl	17054 <bt_gatt_disconnected>
}
   16356:	b005      	add	sp, #20
   16358:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   1635a:	f001 f895 	bl	17488 <net_buf_unref>
   1635e:	e7d3      	b.n	16308 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   16360:	f001 f892 	bl	17488 <net_buf_unref>
   16364:	e7e5      	b.n	16332 <bt_att_disconnected+0x4a>
	return node->next;
   16366:	6835      	ldr	r5, [r6, #0]
   16368:	2d00      	cmp	r5, #0
   1636a:	bf38      	it	cc
   1636c:	2500      	movcc	r5, #0
		if (req->func) {
   1636e:	6877      	ldr	r7, [r6, #4]
   16370:	b137      	cbz	r7, 16380 <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   16372:	68f3      	ldr	r3, [r6, #12]
   16374:	9300      	str	r3, [sp, #0]
   16376:	2300      	movs	r3, #0
   16378:	461a      	mov	r2, r3
   1637a:	210e      	movs	r1, #14
   1637c:	4618      	mov	r0, r3
   1637e:	47b8      	blx	r7
		bt_att_req_free(req);
   16380:	4630      	mov	r0, r6
   16382:	f7ff ff5d 	bl	16240 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   16386:	2d00      	cmp	r5, #0
   16388:	d0de      	beq.n	16348 <bt_att_disconnected+0x60>
   1638a:	682b      	ldr	r3, [r5, #0]
   1638c:	2b00      	cmp	r3, #0
   1638e:	bf38      	it	cc
   16390:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16392:	462e      	mov	r6, r5
   16394:	461d      	mov	r5, r3
   16396:	e7ea      	b.n	1636e <bt_att_disconnected+0x86>
   16398:	200005fc 	.word	0x200005fc

0001639c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1639c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   163a0:	460c      	mov	r4, r1
   163a2:	4617      	mov	r7, r2
   163a4:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   163a6:	4605      	mov	r5, r0
   163a8:	b958      	cbnz	r0, 163c2 <bt_att_send+0x26>
   163aa:	492f      	ldr	r1, [pc, #188]	; (16468 <bt_att_send+0xcc>)
   163ac:	482f      	ldr	r0, [pc, #188]	; (1646c <bt_att_send+0xd0>)
   163ae:	4a30      	ldr	r2, [pc, #192]	; (16470 <bt_att_send+0xd4>)
   163b0:	f640 33f2 	movw	r3, #3058	; 0xbf2
   163b4:	f009 fe0d 	bl	1ffd2 <printk>
   163b8:	482d      	ldr	r0, [pc, #180]	; (16470 <bt_att_send+0xd4>)
   163ba:	f640 31f2 	movw	r1, #3058	; 0xbf2
   163be:	f00a f862 	bl	20486 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   163c2:	b95c      	cbnz	r4, 163dc <bt_att_send+0x40>
   163c4:	492b      	ldr	r1, [pc, #172]	; (16474 <bt_att_send+0xd8>)
   163c6:	4829      	ldr	r0, [pc, #164]	; (1646c <bt_att_send+0xd0>)
   163c8:	4a29      	ldr	r2, [pc, #164]	; (16470 <bt_att_send+0xd4>)
   163ca:	f640 33f3 	movw	r3, #3059	; 0xbf3
   163ce:	f009 fe00 	bl	1ffd2 <printk>
   163d2:	4827      	ldr	r0, [pc, #156]	; (16470 <bt_att_send+0xd4>)
   163d4:	f640 31f3 	movw	r1, #3059	; 0xbf3
   163d8:	f00a f855 	bl	20486 <assert_post_action>

	att = att_get(conn);
   163dc:	4628      	mov	r0, r5
   163de:	f00b fb16 	bl	21a0e <att_get>
	if (!att) {
   163e2:	4606      	mov	r6, r0
   163e4:	b938      	cbnz	r0, 163f6 <bt_att_send+0x5a>
		net_buf_unref(buf);
   163e6:	4620      	mov	r0, r4
   163e8:	f001 f84e 	bl	17488 <net_buf_unref>
		return -ENOTCONN;
   163ec:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   163f0:	b002      	add	sp, #8
   163f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   163f6:	b147      	cbz	r7, 1640a <bt_att_send+0x6e>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   163f8:	f8cd 8000 	str.w	r8, [sp]
   163fc:	463b      	mov	r3, r7
   163fe:	4622      	mov	r2, r4
   16400:	2104      	movs	r1, #4
   16402:	4628      	mov	r0, r5
   16404:	f00a ff6e 	bl	212e4 <bt_l2cap_send_cb>
   16408:	e7f2      	b.n	163f0 <bt_att_send+0x54>
	net_buf_put(&att->tx_queue, buf);
   1640a:	f100 070c 	add.w	r7, r0, #12
   1640e:	4621      	mov	r1, r4
   16410:	4638      	mov	r0, r7
   16412:	f001 f805 	bl	17420 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   16416:	2200      	movs	r2, #0
   16418:	2300      	movs	r3, #0
   1641a:	4638      	mov	r0, r7
   1641c:	f000 ffa2 	bl	17364 <net_buf_get>
	if (!buf) {
   16420:	4605      	mov	r5, r0
   16422:	b908      	cbnz	r0, 16428 <bt_att_send+0x8c>
	return 0;
   16424:	2000      	movs	r0, #0
   16426:	e7e3      	b.n	163f0 <bt_att_send+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16428:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1642a:	b1c3      	cbz	r3, 1645e <bt_att_send+0xc2>
   1642c:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   16430:	d015      	beq.n	1645e <bt_att_send+0xc2>
   16432:	681c      	ldr	r4, [r3, #0]
   16434:	b10c      	cbz	r4, 1643a <bt_att_send+0x9e>
   16436:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
	return chan_send(chan, buf, cb);
   1643a:	2200      	movs	r2, #0
   1643c:	4629      	mov	r1, r5
   1643e:	f7ff f9fd 	bl	1583c <chan_send>
		if (err >= 0) {
   16442:	2800      	cmp	r0, #0
   16444:	daee      	bge.n	16424 <bt_att_send+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16446:	b154      	cbz	r4, 1645e <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16448:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   1644c:	d004      	beq.n	16458 <bt_att_send+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1644e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   16452:	b10b      	cbz	r3, 16458 <bt_att_send+0xbc>
   16454:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   16458:	4620      	mov	r0, r4
   1645a:	461c      	mov	r4, r3
   1645c:	e7ed      	b.n	1643a <bt_att_send+0x9e>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1645e:	4629      	mov	r1, r5
   16460:	4638      	mov	r0, r7
   16462:	f00c fad4 	bl	22a0e <k_queue_prepend>
   16466:	e7dd      	b.n	16424 <bt_att_send+0x88>
   16468:	00024536 	.word	0x00024536
   1646c:	000237c9 	.word	0x000237c9
   16470:	000244d6 	.word	0x000244d6
   16474:	00024239 	.word	0x00024239

00016478 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   16478:	b538      	push	{r3, r4, r5, lr}
   1647a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1647c:	4605      	mov	r5, r0
   1647e:	b958      	cbnz	r0, 16498 <bt_att_req_send+0x20>
   16480:	4916      	ldr	r1, [pc, #88]	; (164dc <bt_att_req_send+0x64>)
   16482:	4817      	ldr	r0, [pc, #92]	; (164e0 <bt_att_req_send+0x68>)
   16484:	4a17      	ldr	r2, [pc, #92]	; (164e4 <bt_att_req_send+0x6c>)
   16486:	f640 430f 	movw	r3, #3087	; 0xc0f
   1648a:	f009 fda2 	bl	1ffd2 <printk>
   1648e:	4815      	ldr	r0, [pc, #84]	; (164e4 <bt_att_req_send+0x6c>)
   16490:	f640 410f 	movw	r1, #3087	; 0xc0f
   16494:	f009 fff7 	bl	20486 <assert_post_action>
	__ASSERT_NO_MSG(req);
   16498:	b95c      	cbnz	r4, 164b2 <bt_att_req_send+0x3a>
   1649a:	4913      	ldr	r1, [pc, #76]	; (164e8 <bt_att_req_send+0x70>)
   1649c:	4810      	ldr	r0, [pc, #64]	; (164e0 <bt_att_req_send+0x68>)
   1649e:	4a11      	ldr	r2, [pc, #68]	; (164e4 <bt_att_req_send+0x6c>)
   164a0:	f44f 6341 	mov.w	r3, #3088	; 0xc10
   164a4:	f009 fd95 	bl	1ffd2 <printk>
   164a8:	480e      	ldr	r0, [pc, #56]	; (164e4 <bt_att_req_send+0x6c>)
   164aa:	f44f 6141 	mov.w	r1, #3088	; 0xc10
   164ae:	f009 ffea 	bl	20486 <assert_post_action>

	att = att_get(conn);
   164b2:	4628      	mov	r0, r5
   164b4:	f00b faab 	bl	21a0e <att_get>
	if (!att) {
   164b8:	b160      	cbz	r0, 164d4 <bt_att_req_send+0x5c>
	parent->next = child;
   164ba:	2300      	movs	r3, #0
   164bc:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   164be:	6883      	ldr	r3, [r0, #8]
   164c0:	b92b      	cbnz	r3, 164ce <bt_att_req_send+0x56>
	list->head = node;
   164c2:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   164c6:	f00b fadc 	bl	21a82 <att_req_send_process>

	return 0;
   164ca:	2000      	movs	r0, #0
}
   164cc:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   164ce:	601c      	str	r4, [r3, #0]
	list->tail = node;
   164d0:	6084      	str	r4, [r0, #8]
}
   164d2:	e7f8      	b.n	164c6 <bt_att_req_send+0x4e>
		return -ENOTCONN;
   164d4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   164d8:	e7f8      	b.n	164cc <bt_att_req_send+0x54>
   164da:	bf00      	nop
   164dc:	00024536 	.word	0x00024536
   164e0:	000237c9 	.word	0x000237c9
   164e4:	000244d6 	.word	0x000244d6
   164e8:	0002451b 	.word	0x0002451b

000164ec <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   164ec:	b510      	push	{r4, lr}
   164ee:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   164f0:	b348      	cbz	r0, 16546 <bt_att_req_cancel+0x5a>
   164f2:	b341      	cbz	r1, 16546 <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
   164f4:	f00b fa8b 	bl	21a0e <att_get>
	if (!att) {
   164f8:	b328      	cbz	r0, 16546 <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   164fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
   164fc:	b15b      	cbz	r3, 16516 <bt_att_req_cancel+0x2a>
   164fe:	f5b3 71aa 	subs.w	r1, r3, #340	; 0x154
   16502:	d008      	beq.n	16516 <bt_att_req_cancel+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16504:	681b      	ldr	r3, [r3, #0]
   16506:	b10b      	cbz	r3, 1650c <bt_att_req_cancel+0x20>
   16508:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
	if (chan->req != req) {
   1650c:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   16510:	4294      	cmp	r4, r2
   16512:	d005      	beq.n	16520 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16514:	b963      	cbnz	r3, 16530 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   16516:	4621      	mov	r1, r4
   16518:	3004      	adds	r0, #4
   1651a:	f00a ffc7 	bl	214ac <sys_slist_find_and_remove>
   1651e:	e002      	b.n	16526 <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
   16520:	4b09      	ldr	r3, [pc, #36]	; (16548 <bt_att_req_cancel+0x5c>)
   16522:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc

	bt_att_req_free(req);
   16526:	4620      	mov	r0, r4
}
   16528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1652c:	f7ff be88 	b.w	16240 <bt_att_req_free>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16530:	f513 72aa 	adds.w	r2, r3, #340	; 0x154
   16534:	d004      	beq.n	16540 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16536:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1653a:	b10a      	cbz	r2, 16540 <bt_att_req_cancel+0x54>
   1653c:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
{
   16540:	4619      	mov	r1, r3
   16542:	4613      	mov	r3, r2
   16544:	e7e2      	b.n	1650c <bt_att_req_cancel+0x20>
}
   16546:	bd10      	pop	{r4, pc}
   16548:	20002278 	.word	0x20002278

0001654c <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1654c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1654e:	4d0d      	ldr	r5, [pc, #52]	; (16584 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   16550:	4604      	mov	r4, r0
   16552:	b960      	cbnz	r0, 1656e <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   16554:	9000      	str	r0, [sp, #0]
   16556:	4669      	mov	r1, sp
   16558:	f8cd 0003 	str.w	r0, [sp, #3]
   1655c:	1c68      	adds	r0, r5, #1
   1655e:	f00b fc66 	bl	21e2e <bt_addr_le_cmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16562:	2800      	cmp	r0, #0
   16564:	bf08      	it	eq
   16566:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   16568:	4620      	mov	r0, r4
   1656a:	b003      	add	sp, #12
   1656c:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1656e:	462a      	mov	r2, r5
   16570:	f812 1b01 	ldrb.w	r1, [r2], #1
   16574:	f00a fdee 	bl	21154 <bt_conn_is_peer_addr_le>
   16578:	2800      	cmp	r0, #0
	return NULL;
   1657a:	bf14      	ite	ne
   1657c:	462c      	movne	r4, r5
   1657e:	2400      	moveq	r4, #0
   16580:	e7f2      	b.n	16568 <find_cf_cfg+0x1c>
   16582:	bf00      	nop
   16584:	20002290 	.word	0x20002290

00016588 <find_sc_cfg>:
{
   16588:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1658a:	4c06      	ldr	r4, [pc, #24]	; (165a4 <find_sc_cfg+0x1c>)
   1658c:	7823      	ldrb	r3, [r4, #0]
   1658e:	4283      	cmp	r3, r0
   16590:	d103      	bne.n	1659a <find_sc_cfg+0x12>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   16592:	1c60      	adds	r0, r4, #1
   16594:	f00b fc4b 	bl	21e2e <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   16598:	b108      	cbz	r0, 1659e <find_sc_cfg+0x16>
	return NULL;
   1659a:	2000      	movs	r0, #0
}
   1659c:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1659e:	4620      	mov	r0, r4
   165a0:	e7fc      	b.n	1659c <find_sc_cfg+0x14>
   165a2:	bf00      	nop
   165a4:	20002da0 	.word	0x20002da0

000165a8 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
   165a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   165aa:	4d0d      	ldr	r5, [pc, #52]	; (165e0 <gatt_sub_find+0x38>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
   165ac:	4604      	mov	r4, r0
   165ae:	b960      	cbnz	r0, 165ca <gatt_sub_find+0x22>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   165b0:	9000      	str	r0, [sp, #0]
   165b2:	4669      	mov	r1, sp
   165b4:	f8cd 0003 	str.w	r0, [sp, #3]
   165b8:	1c68      	adds	r0, r5, #1
   165ba:	f00b fc38 	bl	21e2e <bt_addr_le_cmp>
		struct gatt_sub *sub = &subscriptions[i];
   165be:	2800      	cmp	r0, #0
   165c0:	bf08      	it	eq
   165c2:	462c      	moveq	r4, r5
			return sub;
		}
	}

	return NULL;
}
   165c4:	4620      	mov	r0, r4
   165c6:	b003      	add	sp, #12
   165c8:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   165ca:	462a      	mov	r2, r5
   165cc:	f812 1b01 	ldrb.w	r1, [r2], #1
   165d0:	f00a fdc0 	bl	21154 <bt_conn_is_peer_addr_le>
   165d4:	2800      	cmp	r0, #0
	return NULL;
   165d6:	bf14      	ite	ne
   165d8:	462c      	movne	r4, r5
   165da:	2400      	moveq	r4, #0
   165dc:	e7f2      	b.n	165c4 <gatt_sub_find+0x1c>
   165de:	bf00      	nop
   165e0:	200022c0 	.word	0x200022c0

000165e4 <gatt_sub_free>:
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   165e4:	6883      	ldr	r3, [r0, #8]
{
   165e6:	b513      	push	{r0, r1, r4, lr}
   165e8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   165ea:	b15b      	cbz	r3, 16604 <gatt_sub_free+0x20>
   165ec:	490a      	ldr	r1, [pc, #40]	; (16618 <gatt_sub_free+0x34>)
   165ee:	480b      	ldr	r0, [pc, #44]	; (1661c <gatt_sub_free+0x38>)
   165f0:	4a0b      	ldr	r2, [pc, #44]	; (16620 <gatt_sub_free+0x3c>)
   165f2:	f640 239c 	movw	r3, #2716	; 0xa9c
   165f6:	f009 fcec 	bl	1ffd2 <printk>
   165fa:	4809      	ldr	r0, [pc, #36]	; (16620 <gatt_sub_free+0x3c>)
   165fc:	f640 219c 	movw	r1, #2716	; 0xa9c
   16600:	f009 ff41 	bl	20486 <assert_post_action>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   16604:	2300      	movs	r3, #0
   16606:	4669      	mov	r1, sp
   16608:	1c60      	adds	r0, r4, #1
   1660a:	9300      	str	r3, [sp, #0]
   1660c:	f8cd 3003 	str.w	r3, [sp, #3]
   16610:	f00b fc28 	bl	21e64 <bt_addr_le_copy>
}
   16614:	b002      	add	sp, #8
   16616:	bd10      	pop	{r4, pc}
   16618:	0002456b 	.word	0x0002456b
   1661c:	000237c9 	.word	0x000237c9
   16620:	0002453b 	.word	0x0002453b

00016624 <sc_indicate_rsp>:
{
   16624:	b510      	push	{r4, lr}
   16626:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16628:	4814      	ldr	r0, [pc, #80]	; (1667c <sc_indicate_rsp+0x58>)
   1662a:	f3bf 8f5b 	dmb	ish
   1662e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   16632:	e853 2f00 	ldrex	r2, [r3]
   16636:	f022 0202 	bic.w	r2, r2, #2
   1663a:	e843 2100 	strex	r1, r2, [r3]
   1663e:	2900      	cmp	r1, #0
   16640:	d1f7      	bne.n	16632 <sc_indicate_rsp+0xe>
   16642:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16646:	f3bf 8f5b 	dmb	ish
   1664a:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1664c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   16650:	07da      	lsls	r2, r3, #31
   16652:	d504      	bpl.n	1665e <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   16654:	2200      	movs	r2, #0
   16656:	2300      	movs	r3, #0
   16658:	3020      	adds	r0, #32
   1665a:	f004 fe0b 	bl	1b274 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   1665e:	4620      	mov	r0, r4
   16660:	f7ff ff74 	bl	1654c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   16664:	b140      	cbz	r0, 16678 <sc_indicate_rsp+0x54>
   16666:	7a03      	ldrb	r3, [r0, #8]
   16668:	07db      	lsls	r3, r3, #31
   1666a:	d505      	bpl.n	16678 <sc_indicate_rsp+0x54>
}
   1666c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   16670:	2100      	movs	r1, #0
   16672:	300c      	adds	r0, #12
   16674:	f00b bd5a 	b.w	2212c <atomic_set_bit>
}
   16678:	bd10      	pop	{r4, pc}
   1667a:	bf00      	nop
   1667c:	20001870 	.word	0x20001870

00016680 <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
   16680:	b507      	push	{r0, r1, r2, lr}
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   16682:	2312      	movs	r3, #18
{
   16684:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   16686:	2104      	movs	r1, #4
   16688:	e9cd 3100 	strd	r3, r1, [sp]
   1668c:	4b03      	ldr	r3, [pc, #12]	; (1669c <gatt_write_ccc+0x1c>)
   1668e:	4904      	ldr	r1, [pc, #16]	; (166a0 <gatt_write_ccc+0x20>)
   16690:	f00b fe09 	bl	222a6 <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len);
}
   16694:	b003      	add	sp, #12
   16696:	f85d fb04 	ldr.w	pc, [sp], #4
   1669a:	bf00      	nop
   1669c:	000220f3 	.word	0x000220f3
   166a0:	00022231 	.word	0x00022231

000166a4 <disconnected_cb>:
{
   166a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   166a8:	4b23      	ldr	r3, [pc, #140]	; (16738 <disconnected_cb+0x94>)
{
   166aa:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   166ac:	6882      	ldr	r2, [r0, #8]
   166ae:	429a      	cmp	r2, r3
{
   166b0:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   166b2:	d102      	bne.n	166ba <disconnected_cb+0x16>
	ccc = attr->user_data;
   166b4:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   166b6:	8963      	ldrh	r3, [r4, #10]
   166b8:	bb03      	cbnz	r3, 166fc <disconnected_cb+0x58>
}
   166ba:	2001      	movs	r0, #1
   166bc:	b002      	add	sp, #8
   166be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   166c2:	f105 0890 	add.w	r8, r5, #144	; 0x90
   166c6:	7a28      	ldrb	r0, [r5, #8]
   166c8:	4641      	mov	r1, r8
   166ca:	f00a fc0e 	bl	20eea <bt_addr_le_is_bonded>
   166ce:	b980      	cbnz	r0, 166f2 <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
   166d0:	4b1a      	ldr	r3, [pc, #104]	; (1673c <disconnected_cb+0x98>)
   166d2:	429c      	cmp	r4, r3
   166d4:	d102      	bne.n	166dc <disconnected_cb+0x38>
					sc_clear(conn);
   166d6:	4628      	mov	r0, r5
   166d8:	f00b fc50 	bl	21f7c <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   166dc:	2200      	movs	r2, #0
   166de:	4669      	mov	r1, sp
   166e0:	4630      	mov	r0, r6
   166e2:	9200      	str	r2, [sp, #0]
   166e4:	f8cd 2003 	str.w	r2, [sp, #3]
   166e8:	f00b fbbc 	bl	21e64 <bt_addr_le_copy>
	cfg->id = 0U;
   166ec:	7022      	strb	r2, [r4, #0]
	cfg->value = 0U;
   166ee:	8122      	strh	r2, [r4, #8]
	if (!value_used) {
   166f0:	e019      	b.n	16726 <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   166f2:	4641      	mov	r1, r8
   166f4:	4630      	mov	r0, r6
   166f6:	f00b fbb5 	bl	21e64 <bt_addr_le_copy>
	if (!value_used) {
   166fa:	e014      	b.n	16726 <disconnected_cb+0x82>
		if (!cfg->value) {
   166fc:	8923      	ldrh	r3, [r4, #8]
   166fe:	b193      	cbz	r3, 16726 <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16700:	4626      	mov	r6, r4
   16702:	4628      	mov	r0, r5
   16704:	f816 1b01 	ldrb.w	r1, [r6], #1
   16708:	4632      	mov	r2, r6
   1670a:	f00a fd23 	bl	21154 <bt_conn_is_peer_addr_le>
   1670e:	2800      	cmp	r0, #0
   16710:	d1d7      	bne.n	166c2 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   16712:	7820      	ldrb	r0, [r4, #0]
   16714:	4631      	mov	r1, r6
   16716:	f7fe fcb9 	bl	1508c <bt_conn_lookup_addr_le>
			if (tmp) {
   1671a:	b120      	cbz	r0, 16726 <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   1671c:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   1671e:	f7fe fa83 	bl	14c28 <bt_conn_unref>
	if (!value_used) {
   16722:	2d07      	cmp	r5, #7
   16724:	d0c9      	beq.n	166ba <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   16726:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   16728:	2100      	movs	r1, #0
   1672a:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1672c:	2b00      	cmp	r3, #0
   1672e:	d0c4      	beq.n	166ba <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   16730:	4638      	mov	r0, r7
   16732:	4798      	blx	r3
   16734:	e7c1      	b.n	166ba <disconnected_cb+0x16>
   16736:	bf00      	nop
   16738:	00021ec1 	.word	0x00021ec1
   1673c:	200004f8 	.word	0x200004f8

00016740 <bt_gatt_init>:
{
   16740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16742:	4b28      	ldr	r3, [pc, #160]	; (167e4 <bt_gatt_init+0xa4>)
   16744:	f3bf 8f5b 	dmb	ish
   16748:	2201      	movs	r2, #1
   1674a:	e853 1f00 	ldrex	r1, [r3]
   1674e:	2900      	cmp	r1, #0
   16750:	d103      	bne.n	1675a <bt_gatt_init+0x1a>
   16752:	e843 2000 	strex	r0, r2, [r3]
   16756:	2800      	cmp	r0, #0
   16758:	d1f7      	bne.n	1674a <bt_gatt_init+0xa>
   1675a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1675e:	d140      	bne.n	167e2 <bt_gatt_init+0xa2>
   16760:	f3bf 8f5b 	dmb	ish
   16764:	4b20      	ldr	r3, [pc, #128]	; (167e8 <bt_gatt_init+0xa8>)
   16766:	e853 1f00 	ldrex	r1, [r3]
   1676a:	2900      	cmp	r1, #0
   1676c:	d103      	bne.n	16776 <bt_gatt_init+0x36>
   1676e:	e843 2000 	strex	r0, r2, [r3]
   16772:	2800      	cmp	r0, #0
   16774:	d1f7      	bne.n	16766 <bt_gatt_init+0x26>
   16776:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1677a:	d02d      	beq.n	167d8 <bt_gatt_init+0x98>
	list->head = NULL;
   1677c:	4b1b      	ldr	r3, [pc, #108]	; (167ec <bt_gatt_init+0xac>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1677e:	491c      	ldr	r1, [pc, #112]	; (167f0 <bt_gatt_init+0xb0>)
   16780:	481c      	ldr	r0, [pc, #112]	; (167f4 <bt_gatt_init+0xb4>)
   16782:	2200      	movs	r2, #0
	list->tail = NULL;
   16784:	e9c3 2200 	strd	r2, r2, [r3]
   16788:	f004 fc50 	bl	1b02c <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1678c:	2300      	movs	r3, #0
   1678e:	4819      	ldr	r0, [pc, #100]	; (167f4 <bt_gatt_init+0xb4>)
   16790:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16794:	f004 fcf2 	bl	1b17c <k_work_schedule>
}
   16798:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1679c:	4916      	ldr	r1, [pc, #88]	; (167f8 <bt_gatt_init+0xb8>)
   1679e:	4817      	ldr	r0, [pc, #92]	; (167fc <bt_gatt_init+0xbc>)
   167a0:	f004 bc44 	b.w	1b02c <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   167a4:	4a16      	ldr	r2, [pc, #88]	; (16800 <bt_gatt_init+0xc0>)
   167a6:	6863      	ldr	r3, [r4, #4]
   167a8:	8811      	ldrh	r1, [r2, #0]
   167aa:	440b      	add	r3, r1
   167ac:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   167ae:	3408      	adds	r4, #8
   167b0:	42ac      	cmp	r4, r5
   167b2:	d90e      	bls.n	167d2 <bt_gatt_init+0x92>
   167b4:	4913      	ldr	r1, [pc, #76]	; (16804 <bt_gatt_init+0xc4>)
   167b6:	4814      	ldr	r0, [pc, #80]	; (16808 <bt_gatt_init+0xc8>)
   167b8:	f240 434e 	movw	r3, #1102	; 0x44e
   167bc:	4632      	mov	r2, r6
   167be:	f009 fc08 	bl	1ffd2 <printk>
   167c2:	4812      	ldr	r0, [pc, #72]	; (1680c <bt_gatt_init+0xcc>)
   167c4:	f009 fc05 	bl	1ffd2 <printk>
   167c8:	f240 414e 	movw	r1, #1102	; 0x44e
   167cc:	4630      	mov	r0, r6
   167ce:	f009 fe5a 	bl	20486 <assert_post_action>
   167d2:	42bc      	cmp	r4, r7
   167d4:	d3e6      	bcc.n	167a4 <bt_gatt_init+0x64>
   167d6:	e7d1      	b.n	1677c <bt_gatt_init+0x3c>
   167d8:	4d0d      	ldr	r5, [pc, #52]	; (16810 <bt_gatt_init+0xd0>)
   167da:	4c0e      	ldr	r4, [pc, #56]	; (16814 <bt_gatt_init+0xd4>)
   167dc:	4e0e      	ldr	r6, [pc, #56]	; (16818 <bt_gatt_init+0xd8>)
   167de:	462f      	mov	r7, r5
   167e0:	e7e6      	b.n	167b0 <bt_gatt_init+0x70>
}
   167e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   167e4:	200022a0 	.word	0x200022a0
   167e8:	200022bc 	.word	0x200022bc
   167ec:	20002288 	.word	0x20002288
   167f0:	000223b3 	.word	0x000223b3
   167f4:	20001818 	.word	0x20001818
   167f8:	00016bf9 	.word	0x00016bf9
   167fc:	20001890 	.word	0x20001890
   16800:	20002d9e 	.word	0x20002d9e
   16804:	00024589 	.word	0x00024589
   16808:	000237c9 	.word	0x000237c9
   1680c:	000242e2 	.word	0x000242e2
   16810:	00022fbc 	.word	0x00022fbc
   16814:	00022fac 	.word	0x00022fac
   16818:	0002453b 	.word	0x0002453b

0001681c <bt_gatt_attr_get_handle>:
{
   1681c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
   16820:	4604      	mov	r4, r0
   16822:	b910      	cbnz	r0, 1682a <bt_gatt_attr_get_handle+0xe>
		return 0;
   16824:	2000      	movs	r0, #0
}
   16826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
   1682a:	8a00      	ldrh	r0, [r0, #16]
   1682c:	2800      	cmp	r0, #0
   1682e:	d1fa      	bne.n	16826 <bt_gatt_attr_get_handle+0xa>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16830:	4f1a      	ldr	r7, [pc, #104]	; (1689c <bt_gatt_attr_get_handle+0x80>)
   16832:	4d1b      	ldr	r5, [pc, #108]	; (168a0 <bt_gatt_attr_get_handle+0x84>)
   16834:	f8df 9078 	ldr.w	r9, [pc, #120]	; 168b0 <bt_gatt_attr_get_handle+0x94>
	uint16_t handle = 1;
   16838:	2601      	movs	r6, #1
   1683a:	46b8      	mov	r8, r7
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1683c:	42bd      	cmp	r5, r7
   1683e:	d90e      	bls.n	1685e <bt_gatt_attr_get_handle+0x42>
   16840:	4918      	ldr	r1, [pc, #96]	; (168a4 <bt_gatt_attr_get_handle+0x88>)
   16842:	4819      	ldr	r0, [pc, #100]	; (168a8 <bt_gatt_attr_get_handle+0x8c>)
   16844:	f240 5377 	movw	r3, #1399	; 0x577
   16848:	464a      	mov	r2, r9
   1684a:	f009 fbc2 	bl	1ffd2 <printk>
   1684e:	4817      	ldr	r0, [pc, #92]	; (168ac <bt_gatt_attr_get_handle+0x90>)
   16850:	f009 fbbf 	bl	1ffd2 <printk>
   16854:	f240 5177 	movw	r1, #1399	; 0x577
   16858:	4648      	mov	r0, r9
   1685a:	f009 fe14 	bl	20486 <assert_post_action>
   1685e:	4545      	cmp	r5, r8
   16860:	d2e0      	bcs.n	16824 <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
   16862:	e9d5 ec00 	ldrd	lr, ip, [r5]
   16866:	4574      	cmp	r4, lr
   16868:	d305      	bcc.n	16876 <bt_gatt_attr_get_handle+0x5a>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1686a:	2114      	movs	r1, #20
   1686c:	fb01 e30c 	mla	r3, r1, ip, lr
   16870:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   16872:	429c      	cmp	r4, r3
   16874:	d90f      	bls.n	16896 <bt_gatt_attr_get_handle+0x7a>
			handle += static_svc->attr_count;
   16876:	eb06 030c 	add.w	r3, r6, ip
   1687a:	b298      	uxth	r0, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1687c:	3508      	adds	r5, #8
   1687e:	4606      	mov	r6, r0
   16880:	e7dc      	b.n	1683c <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
   16882:	fb01 e302 	mla	r3, r1, r2, lr
   16886:	429c      	cmp	r4, r3
   16888:	d0cd      	beq.n	16826 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1688a:	3201      	adds	r2, #1
   1688c:	18b3      	adds	r3, r6, r2
   1688e:	4562      	cmp	r2, ip
   16890:	b298      	uxth	r0, r3
   16892:	d1f6      	bne.n	16882 <bt_gatt_attr_get_handle+0x66>
   16894:	e7f2      	b.n	1687c <bt_gatt_attr_get_handle+0x60>
   16896:	2200      	movs	r2, #0
   16898:	e7f8      	b.n	1688c <bt_gatt_attr_get_handle+0x70>
   1689a:	bf00      	nop
   1689c:	00022fbc 	.word	0x00022fbc
   168a0:	00022fac 	.word	0x00022fac
   168a4:	00024582 	.word	0x00024582
   168a8:	000237c9 	.word	0x000237c9
   168ac:	000242e2 	.word	0x000242e2
   168b0:	0002453b 	.word	0x0002453b

000168b4 <bt_gatt_foreach_attr_type>:
{
   168b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168b8:	b085      	sub	sp, #20
   168ba:	4607      	mov	r7, r0
   168bc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
   168c0:	9301      	str	r3, [sp, #4]
		num_matches = UINT16_MAX;
   168c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   168c6:	2d00      	cmp	r5, #0
   168c8:	bf08      	it	eq
   168ca:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   168cc:	4b2d      	ldr	r3, [pc, #180]	; (16984 <bt_gatt_foreach_attr_type+0xd0>)
{
   168ce:	9102      	str	r1, [sp, #8]
	if (start_handle <= last_static_handle) {
   168d0:	881b      	ldrh	r3, [r3, #0]
   168d2:	4283      	cmp	r3, r0
{
   168d4:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   168d6:	d24e      	bcs.n	16976 <bt_gatt_foreach_attr_type+0xc2>
}
   168d8:	b005      	add	sp, #20
   168da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   168de:	6873      	ldr	r3, [r6, #4]
   168e0:	4423      	add	r3, r4
   168e2:	42bb      	cmp	r3, r7
   168e4:	d244      	bcs.n	16970 <bt_gatt_foreach_attr_type+0xbc>
				handle += static_svc->attr_count;
   168e6:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   168e8:	3608      	adds	r6, #8
   168ea:	4556      	cmp	r6, sl
   168ec:	d90e      	bls.n	1690c <bt_gatt_foreach_attr_type+0x58>
   168ee:	4926      	ldr	r1, [pc, #152]	; (16988 <bt_gatt_foreach_attr_type+0xd4>)
   168f0:	4826      	ldr	r0, [pc, #152]	; (1698c <bt_gatt_foreach_attr_type+0xd8>)
   168f2:	f240 633b 	movw	r3, #1595	; 0x63b
   168f6:	465a      	mov	r2, fp
   168f8:	f009 fb6b 	bl	1ffd2 <printk>
   168fc:	4824      	ldr	r0, [pc, #144]	; (16990 <bt_gatt_foreach_attr_type+0xdc>)
   168fe:	f009 fb68 	bl	1ffd2 <printk>
   16902:	f240 613b 	movw	r1, #1595	; 0x63b
   16906:	4658      	mov	r0, fp
   16908:	f009 fdbd 	bl	20486 <assert_post_action>
   1690c:	4b21      	ldr	r3, [pc, #132]	; (16994 <bt_gatt_foreach_attr_type+0xe0>)
   1690e:	429e      	cmp	r6, r3
   16910:	d3e5      	bcc.n	168de <bt_gatt_foreach_attr_type+0x2a>
   16912:	e7e1      	b.n	168d8 <bt_gatt_foreach_attr_type+0x24>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16914:	5889      	ldr	r1, [r1, r2]
   16916:	9303      	str	r3, [sp, #12]
   16918:	4640      	mov	r0, r8
   1691a:	f009 ffe4 	bl	208e6 <bt_uuid_cmp>
   1691e:	9b03      	ldr	r3, [sp, #12]
   16920:	b198      	cbz	r0, 1694a <bt_gatt_foreach_attr_type+0x96>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16922:	3401      	adds	r4, #1
   16924:	f109 0901 	add.w	r9, r9, #1
   16928:	b2a4      	uxth	r4, r4
   1692a:	6873      	ldr	r3, [r6, #4]
   1692c:	454b      	cmp	r3, r9
   1692e:	d9db      	bls.n	168e8 <bt_gatt_foreach_attr_type+0x34>
	if (handle > end_handle) {
   16930:	9b02      	ldr	r3, [sp, #8]
   16932:	429c      	cmp	r4, r3
   16934:	d8d0      	bhi.n	168d8 <bt_gatt_foreach_attr_type+0x24>
	if (handle < start_handle) {
   16936:	42bc      	cmp	r4, r7
   16938:	d3f3      	bcc.n	16922 <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1693a:	2314      	movs	r3, #20
   1693c:	6831      	ldr	r1, [r6, #0]
   1693e:	fb03 f209 	mul.w	r2, r3, r9
   16942:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16944:	f1b8 0f00 	cmp.w	r8, #0
   16948:	d1e4      	bne.n	16914 <bt_gatt_foreach_attr_type+0x60>
	if (attr_data && attr_data != attr->user_data) {
   1694a:	9a01      	ldr	r2, [sp, #4]
   1694c:	b95a      	cbnz	r2, 16966 <bt_gatt_foreach_attr_type+0xb2>
	*num_matches -= 1;
   1694e:	3d01      	subs	r5, #1
   16950:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   16952:	4618      	mov	r0, r3
   16954:	9a10      	ldr	r2, [sp, #64]	; 0x40
   16956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16958:	4621      	mov	r1, r4
   1695a:	4798      	blx	r3
	if (!*num_matches) {
   1695c:	2d00      	cmp	r5, #0
   1695e:	d0bb      	beq.n	168d8 <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16960:	2800      	cmp	r0, #0
   16962:	d1de      	bne.n	16922 <bt_gatt_foreach_attr_type+0x6e>
   16964:	e7b8      	b.n	168d8 <bt_gatt_foreach_attr_type+0x24>
	if (attr_data && attr_data != attr->user_data) {
   16966:	68da      	ldr	r2, [r3, #12]
   16968:	9901      	ldr	r1, [sp, #4]
   1696a:	4291      	cmp	r1, r2
   1696c:	d1d9      	bne.n	16922 <bt_gatt_foreach_attr_type+0x6e>
   1696e:	e7ee      	b.n	1694e <bt_gatt_foreach_attr_type+0x9a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16970:	f04f 0900 	mov.w	r9, #0
   16974:	e7d9      	b.n	1692a <bt_gatt_foreach_attr_type+0x76>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16976:	4e08      	ldr	r6, [pc, #32]	; (16998 <bt_gatt_foreach_attr_type+0xe4>)
   16978:	f8df a018 	ldr.w	sl, [pc, #24]	; 16994 <bt_gatt_foreach_attr_type+0xe0>
   1697c:	f8df b01c 	ldr.w	fp, [pc, #28]	; 1699c <bt_gatt_foreach_attr_type+0xe8>
		uint16_t handle = 1;
   16980:	2401      	movs	r4, #1
   16982:	e7b2      	b.n	168ea <bt_gatt_foreach_attr_type+0x36>
   16984:	20002d9e 	.word	0x20002d9e
   16988:	00024582 	.word	0x00024582
   1698c:	000237c9 	.word	0x000237c9
   16990:	000242e2 	.word	0x000242e2
   16994:	00022fbc 	.word	0x00022fbc
   16998:	00022fac 	.word	0x00022fac
   1699c:	0002453b 	.word	0x0002453b

000169a0 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   169a0:	b510      	push	{r4, lr}
   169a2:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   169a4:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   169a6:	aa1c      	add	r2, sp, #112	; 0x70
   169a8:	4669      	mov	r1, sp
   169aa:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   169ac:	e9cd 3300 	strd	r3, r3, [sp]
   169b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   169b4:	f009 fe98 	bl	206e8 <tc_cmac_setup>
   169b8:	b320      	cbz	r0, 16a04 <db_hash_gen.isra.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   169ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
   169be:	2001      	movs	r0, #1
   169c0:	4a11      	ldr	r2, [pc, #68]	; (16a08 <db_hash_gen.isra.0+0x68>)
   169c2:	ab04      	add	r3, sp, #16
   169c4:	f00b fcea 	bl	2239c <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   169c8:	4810      	ldr	r0, [pc, #64]	; (16a0c <db_hash_gen.isra.0+0x6c>)
   169ca:	a904      	add	r1, sp, #16
   169cc:	f009 ff23 	bl	20816 <tc_cmac_final>
   169d0:	b1c0      	cbz	r0, 16a04 <db_hash_gen.isra.0+0x64>
   169d2:	4b0e      	ldr	r3, [pc, #56]	; (16a0c <db_hash_gen.isra.0+0x6c>)
   169d4:	2208      	movs	r2, #8
   169d6:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   169da:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   169dc:	780c      	ldrb	r4, [r1, #0]
   169de:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   169e2:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   169e4:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   169e8:	d1f7      	bne.n	169da <db_hash_gen.isra.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   169ea:	f3bf 8f5b 	dmb	ish
   169ee:	4b08      	ldr	r3, [pc, #32]	; (16a10 <db_hash_gen.isra.0+0x70>)
   169f0:	e853 2f00 	ldrex	r2, [r3]
   169f4:	f042 0204 	orr.w	r2, r2, #4
   169f8:	e843 2100 	strex	r1, r2, [r3]
   169fc:	2900      	cmp	r1, #0
   169fe:	d1f7      	bne.n	169f0 <db_hash_gen.isra.0+0x50>
   16a00:	f3bf 8f5b 	dmb	ish
}
   16a04:	b048      	add	sp, #288	; 0x120
   16a06:	bd10      	pop	{r4, pc}
   16a08:	00021d83 	.word	0x00021d83
   16a0c:	20001808 	.word	0x20001808
   16a10:	200018c0 	.word	0x200018c0

00016a14 <gatt_indicate>:
{
   16a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a18:	4615      	mov	r5, r2
   16a1a:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   16a1c:	2214      	movs	r2, #20
   16a1e:	6869      	ldr	r1, [r5, #4]
{
   16a20:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   16a22:	f00b fcc8 	bl	223b6 <bt_gatt_check_perm>
   16a26:	2800      	cmp	r0, #0
   16a28:	d139      	bne.n	16a9e <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16a2a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   16a2e:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   16a30:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16a32:	f7ff fbef 	bl	16214 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   16a36:	3602      	adds	r6, #2
	if (!req) {
   16a38:	4604      	mov	r4, r0
   16a3a:	b920      	cbnz	r0, 16a46 <gatt_indicate+0x32>
		return -ENOMEM;
   16a3c:	f06f 050b 	mvn.w	r5, #11
}
   16a40:	4628      	mov	r0, r5
   16a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   16a46:	4b17      	ldr	r3, [pc, #92]	; (16aa4 <gatt_indicate+0x90>)
   16a48:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   16a4a:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   16a4c:	4632      	mov	r2, r6
   16a4e:	211d      	movs	r1, #29
   16a50:	4640      	mov	r0, r8
   16a52:	f00b f8fc 	bl	21c4e <bt_att_create_pdu>
	if (!buf) {
   16a56:	4606      	mov	r6, r0
   16a58:	b918      	cbnz	r0, 16a62 <gatt_indicate+0x4e>
		bt_att_req_free(req);
   16a5a:	4620      	mov	r0, r4
   16a5c:	f7ff fbf0 	bl	16240 <bt_att_req_free>
   16a60:	e7ec      	b.n	16a3c <gatt_indicate+0x28>
   16a62:	f100 0a08 	add.w	sl, r0, #8
   16a66:	2102      	movs	r1, #2
   16a68:	4650      	mov	r0, sl
   16a6a:	f000 fe3d 	bl	176e8 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   16a6e:	4607      	mov	r7, r0
   16a70:	8aa9      	ldrh	r1, [r5, #20]
   16a72:	f827 9b02 	strh.w	r9, [r7], #2
   16a76:	4650      	mov	r0, sl
   16a78:	f000 fe36 	bl	176e8 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16a7c:	8aaa      	ldrh	r2, [r5, #20]
   16a7e:	6929      	ldr	r1, [r5, #16]
   16a80:	4638      	mov	r0, r7
   16a82:	f00c f8ea 	bl	22c5a <memcpy>
	req->buf = buf;
   16a86:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   16a88:	4621      	mov	r1, r4
   16a8a:	4640      	mov	r0, r8
   16a8c:	f7ff fcf4 	bl	16478 <bt_att_req_send>
	if (err) {
   16a90:	4605      	mov	r5, r0
   16a92:	2800      	cmp	r0, #0
   16a94:	d0d4      	beq.n	16a40 <gatt_indicate+0x2c>
		bt_att_req_free(req);
   16a96:	4620      	mov	r0, r4
   16a98:	f7ff fbd2 	bl	16240 <bt_att_req_free>
   16a9c:	e7d0      	b.n	16a40 <gatt_indicate+0x2c>
		return -EPERM;
   16a9e:	f04f 35ff 	mov.w	r5, #4294967295
   16aa2:	e7cd      	b.n	16a40 <gatt_indicate+0x2c>
   16aa4:	00021d55 	.word	0x00021d55

00016aa8 <bt_gatt_indicate>:
{
   16aa8:	b530      	push	{r4, r5, lr}
   16aaa:	4605      	mov	r5, r0
   16aac:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   16aae:	460c      	mov	r4, r1
   16ab0:	b971      	cbnz	r1, 16ad0 <bt_gatt_indicate+0x28>
   16ab2:	4949      	ldr	r1, [pc, #292]	; (16bd8 <bt_gatt_indicate+0x130>)
   16ab4:	4a49      	ldr	r2, [pc, #292]	; (16bdc <bt_gatt_indicate+0x134>)
   16ab6:	484a      	ldr	r0, [pc, #296]	; (16be0 <bt_gatt_indicate+0x138>)
   16ab8:	f640 1338 	movw	r3, #2360	; 0x938
   16abc:	f009 fa89 	bl	1ffd2 <printk>
   16ac0:	4848      	ldr	r0, [pc, #288]	; (16be4 <bt_gatt_indicate+0x13c>)
   16ac2:	f009 fa86 	bl	1ffd2 <printk>
   16ac6:	4845      	ldr	r0, [pc, #276]	; (16bdc <bt_gatt_indicate+0x134>)
   16ac8:	f640 1138 	movw	r1, #2360	; 0x938
   16acc:	f009 fcdb 	bl	20486 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   16ad0:	6863      	ldr	r3, [r4, #4]
   16ad2:	b983      	cbnz	r3, 16af6 <bt_gatt_indicate+0x4e>
   16ad4:	6823      	ldr	r3, [r4, #0]
   16ad6:	b973      	cbnz	r3, 16af6 <bt_gatt_indicate+0x4e>
   16ad8:	4943      	ldr	r1, [pc, #268]	; (16be8 <bt_gatt_indicate+0x140>)
   16ada:	4a40      	ldr	r2, [pc, #256]	; (16bdc <bt_gatt_indicate+0x134>)
   16adc:	4840      	ldr	r0, [pc, #256]	; (16be0 <bt_gatt_indicate+0x138>)
   16ade:	f640 1339 	movw	r3, #2361	; 0x939
   16ae2:	f009 fa76 	bl	1ffd2 <printk>
   16ae6:	483f      	ldr	r0, [pc, #252]	; (16be4 <bt_gatt_indicate+0x13c>)
   16ae8:	f009 fa73 	bl	1ffd2 <printk>
   16aec:	483b      	ldr	r0, [pc, #236]	; (16bdc <bt_gatt_indicate+0x134>)
   16aee:	f640 1139 	movw	r1, #2361	; 0x939
   16af2:	f009 fcc8 	bl	20486 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16af6:	f3bf 8f5b 	dmb	ish
   16afa:	4b3c      	ldr	r3, [pc, #240]	; (16bec <bt_gatt_indicate+0x144>)
   16afc:	681b      	ldr	r3, [r3, #0]
   16afe:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16b02:	079a      	lsls	r2, r3, #30
   16b04:	d561      	bpl.n	16bca <bt_gatt_indicate+0x122>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16b06:	b115      	cbz	r5, 16b0e <bt_gatt_indicate+0x66>
   16b08:	7aab      	ldrb	r3, [r5, #10]
   16b0a:	2b07      	cmp	r3, #7
   16b0c:	d160      	bne.n	16bd0 <bt_gatt_indicate+0x128>
	data.attr = params->attr;
   16b0e:	6860      	ldr	r0, [r4, #4]
   16b10:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16b12:	f7ff fe83 	bl	1681c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   16b16:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16b18:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   16b1c:	b33a      	cbz	r2, 16b6e <bt_gatt_indicate+0xc6>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16b1e:	a905      	add	r1, sp, #20
   16b20:	9102      	str	r1, [sp, #8]
   16b22:	4933      	ldr	r1, [pc, #204]	; (16bf0 <bt_gatt_indicate+0x148>)
   16b24:	9101      	str	r1, [sp, #4]
   16b26:	2101      	movs	r1, #1
	found->attr = NULL;
   16b28:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16b2a:	9100      	str	r1, [sp, #0]
   16b2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16b30:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16b32:	f7ff febf 	bl	168b4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   16b36:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   16b38:	b91b      	cbnz	r3, 16b42 <bt_gatt_indicate+0x9a>
			return -ENOENT;
   16b3a:	f06f 0001 	mvn.w	r0, #1
}
   16b3e:	b00b      	add	sp, #44	; 0x2c
   16b40:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   16b42:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16b44:	9b05      	ldr	r3, [sp, #20]
   16b46:	6818      	ldr	r0, [r3, #0]
   16b48:	2300      	movs	r3, #0
   16b4a:	f88d 3010 	strb.w	r3, [sp, #16]
   16b4e:	a904      	add	r1, sp, #16
   16b50:	f642 0303 	movw	r3, #10243	; 0x2803
   16b54:	f8ad 3012 	strh.w	r3, [sp, #18]
   16b58:	f009 fec5 	bl	208e6 <bt_uuid_cmp>
   16b5c:	b970      	cbnz	r0, 16b7c <bt_gatt_indicate+0xd4>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16b5e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   16b60:	68c3      	ldr	r3, [r0, #12]
   16b62:	799b      	ldrb	r3, [r3, #6]
   16b64:	069b      	lsls	r3, r3, #26
   16b66:	d405      	bmi.n	16b74 <bt_gatt_indicate+0xcc>
			return -EINVAL;
   16b68:	f06f 0015 	mvn.w	r0, #21
   16b6c:	e7e7      	b.n	16b3e <bt_gatt_indicate+0x96>
		if (!data.handle) {
   16b6e:	2800      	cmp	r0, #0
   16b70:	d1e8      	bne.n	16b44 <bt_gatt_indicate+0x9c>
   16b72:	e7e2      	b.n	16b3a <bt_gatt_indicate+0x92>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16b74:	f00b fbcb 	bl	2230e <bt_gatt_attr_value_handle>
   16b78:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   16b7c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   16b80:	b13d      	cbz	r5, 16b92 <bt_gatt_indicate+0xea>
		params->_ref = 1;
   16b82:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   16b84:	4601      	mov	r1, r0
		params->_ref = 1;
   16b86:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   16b88:	4622      	mov	r2, r4
   16b8a:	4628      	mov	r0, r5
   16b8c:	f7ff ff42 	bl	16a14 <gatt_indicate>
   16b90:	e7d5      	b.n	16b3e <bt_gatt_indicate+0x96>
	data.err = -ENOTCONN;
   16b92:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   16b96:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   16b98:	2302      	movs	r3, #2
   16b9a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16b9e:	f642 1302 	movw	r3, #10498	; 0x2902
   16ba2:	f8ad 3012 	strh.w	r3, [sp, #18]
   16ba6:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   16ba8:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16baa:	9302      	str	r3, [sp, #8]
   16bac:	4b11      	ldr	r3, [pc, #68]	; (16bf4 <bt_gatt_indicate+0x14c>)
   16bae:	9301      	str	r3, [sp, #4]
   16bb0:	2301      	movs	r3, #1
   16bb2:	9300      	str	r3, [sp, #0]
   16bb4:	aa04      	add	r2, sp, #16
   16bb6:	462b      	mov	r3, r5
   16bb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   16bbc:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16bbe:	f88d 5010 	strb.w	r5, [sp, #16]
   16bc2:	f7ff fe77 	bl	168b4 <bt_gatt_foreach_attr_type>
	return data.err;
   16bc6:	9807      	ldr	r0, [sp, #28]
   16bc8:	e7b9      	b.n	16b3e <bt_gatt_indicate+0x96>
		return -EAGAIN;
   16bca:	f06f 000a 	mvn.w	r0, #10
   16bce:	e7b6      	b.n	16b3e <bt_gatt_indicate+0x96>
		return -ENOTCONN;
   16bd0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16bd4:	e7b3      	b.n	16b3e <bt_gatt_indicate+0x96>
   16bd6:	bf00      	nop
   16bd8:	000245b1 	.word	0x000245b1
   16bdc:	0002453b 	.word	0x0002453b
   16be0:	000237c9 	.word	0x000237c9
   16be4:	000245b8 	.word	0x000245b8
   16be8:	000245ce 	.word	0x000245ce
   16bec:	2000036c 	.word	0x2000036c
   16bf0:	00021d7b 	.word	0x00021d7b
   16bf4:	00016c9d 	.word	0x00016c9d

00016bf8 <sc_process>:
{
   16bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16bfa:	f3bf 8f5b 	dmb	ish
   16bfe:	6b03      	ldr	r3, [r0, #48]	; 0x30
   16c00:	f3bf 8f5b 	dmb	ish
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   16c04:	079b      	lsls	r3, r3, #30
{
   16c06:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   16c08:	f100 0530 	add.w	r5, r0, #48	; 0x30
   16c0c:	d50e      	bpl.n	16c2c <sc_process+0x34>
   16c0e:	491d      	ldr	r1, [pc, #116]	; (16c84 <sc_process+0x8c>)
   16c10:	4a1d      	ldr	r2, [pc, #116]	; (16c88 <sc_process+0x90>)
   16c12:	481e      	ldr	r0, [pc, #120]	; (16c8c <sc_process+0x94>)
   16c14:	f44f 7379 	mov.w	r3, #996	; 0x3e4
   16c18:	f009 f9db 	bl	1ffd2 <printk>
   16c1c:	481c      	ldr	r0, [pc, #112]	; (16c90 <sc_process+0x98>)
   16c1e:	f009 f9d8 	bl	1ffd2 <printk>
   16c22:	4819      	ldr	r0, [pc, #100]	; (16c88 <sc_process+0x90>)
   16c24:	f44f 7179 	mov.w	r1, #996	; 0x3e4
   16c28:	f009 fc2d 	bl	20486 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   16c2c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   16c30:	9301      	str	r3, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16c32:	f3bf 8f5b 	dmb	ish
   16c36:	e855 3f00 	ldrex	r3, [r5]
   16c3a:	f023 0301 	bic.w	r3, r3, #1
   16c3e:	e845 3200 	strex	r2, r3, [r5]
   16c42:	2a00      	cmp	r2, #0
   16c44:	d1f7      	bne.n	16c36 <sc_process+0x3e>
   16c46:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   16c4a:	4b12      	ldr	r3, [pc, #72]	; (16c94 <sc_process+0x9c>)
   16c4c:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   16c50:	4b11      	ldr	r3, [pc, #68]	; (16c98 <sc_process+0xa0>)
   16c52:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   16c56:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   16c58:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   16c5a:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   16c5e:	2304      	movs	r3, #4
	sc->start = 0U;
   16c60:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   16c64:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   16c68:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   16c6c:	f1a4 0120 	sub.w	r1, r4, #32
   16c70:	f7ff ff1a 	bl	16aa8 <bt_gatt_indicate>
   16c74:	b918      	cbnz	r0, 16c7e <sc_process+0x86>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   16c76:	2101      	movs	r1, #1
   16c78:	4628      	mov	r0, r5
   16c7a:	f00b fa57 	bl	2212c <atomic_set_bit>
}
   16c7e:	b003      	add	sp, #12
   16c80:	bd30      	pop	{r4, r5, pc}
   16c82:	bf00      	nop
   16c84:	000245eb 	.word	0x000245eb
   16c88:	0002453b 	.word	0x0002453b
   16c8c:	000237c9 	.word	0x000237c9
   16c90:	0002461c 	.word	0x0002461c
   16c94:	000232f8 	.word	0x000232f8
   16c98:	00016625 	.word	0x00016625

00016c9c <notify_cb>:
{
   16c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16c9e:	4b32      	ldr	r3, [pc, #200]	; (16d68 <notify_cb+0xcc>)
{
   16ca0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16ca2:	6882      	ldr	r2, [r0, #8]
   16ca4:	429a      	cmp	r2, r3
{
   16ca6:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16ca8:	d12d      	bne.n	16d06 <notify_cb+0x6a>
	ccc = attr->user_data;
   16caa:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   16cac:	4b2f      	ldr	r3, [pc, #188]	; (16d6c <notify_cb+0xd0>)
   16cae:	429f      	cmp	r7, r3
   16cb0:	d119      	bne.n	16ce6 <notify_cb+0x4a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   16cb2:	4d2f      	ldr	r5, [pc, #188]	; (16d70 <notify_cb+0xd4>)
   16cb4:	2300      	movs	r3, #0
   16cb6:	4669      	mov	r1, sp
   16cb8:	1c68      	adds	r0, r5, #1
   16cba:	9300      	str	r3, [sp, #0]
   16cbc:	f8cd 3003 	str.w	r3, [sp, #3]
   16cc0:	f00b f8b5 	bl	21e2e <bt_addr_le_cmp>
   16cc4:	b178      	cbz	r0, 16ce6 <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   16cc6:	4629      	mov	r1, r5
   16cc8:	2207      	movs	r2, #7
   16cca:	f811 0b01 	ldrb.w	r0, [r1], #1
   16cce:	f7fe f9fb 	bl	150c8 <bt_conn_lookup_state_le>
			if (!conn) {
   16cd2:	b9e0      	cbnz	r0, 16d0e <notify_cb+0x72>
				sc = (struct sc_data *)data->ind_params->data;
   16cd4:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   16cd6:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   16cd8:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   16cda:	f811 0b01 	ldrb.w	r0, [r1], #1
   16cde:	8853      	ldrh	r3, [r2, #2]
   16ce0:	8812      	ldrh	r2, [r2, #0]
   16ce2:	f00b f8c6 	bl	21e72 <sc_save>
		if (cfg->value != data->type) {
   16ce6:	893a      	ldrh	r2, [r7, #8]
   16ce8:	89a3      	ldrh	r3, [r4, #12]
   16cea:	429a      	cmp	r2, r3
   16cec:	d10b      	bne.n	16d06 <notify_cb+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   16cee:	4639      	mov	r1, r7
   16cf0:	f811 0b01 	ldrb.w	r0, [r1], #1
   16cf4:	f7fe f9ca 	bl	1508c <bt_conn_lookup_addr_le>
		if (!conn) {
   16cf8:	4605      	mov	r5, r0
   16cfa:	b120      	cbz	r0, 16d06 <notify_cb+0x6a>
		if (conn->state != BT_CONN_CONNECTED) {
   16cfc:	7a83      	ldrb	r3, [r0, #10]
   16cfe:	2b07      	cmp	r3, #7
   16d00:	d008      	beq.n	16d14 <notify_cb+0x78>
			bt_conn_unref(conn);
   16d02:	f7fd ff91 	bl	14c28 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   16d06:	2701      	movs	r7, #1
}
   16d08:	4638      	mov	r0, r7
   16d0a:	b003      	add	sp, #12
   16d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   16d0e:	f7fd ff8b 	bl	14c28 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16d12:	e7e8      	b.n	16ce6 <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   16d14:	697b      	ldr	r3, [r7, #20]
   16d16:	b123      	cbz	r3, 16d22 <notify_cb+0x86>
   16d18:	4631      	mov	r1, r6
   16d1a:	4798      	blx	r3
   16d1c:	b908      	cbnz	r0, 16d22 <notify_cb+0x86>
			bt_conn_unref(conn);
   16d1e:	4628      	mov	r0, r5
   16d20:	e7ef      	b.n	16d02 <notify_cb+0x66>
		if (bt_gatt_check_perm(conn, attr,
   16d22:	2214      	movs	r2, #20
   16d24:	4631      	mov	r1, r6
   16d26:	4628      	mov	r0, r5
   16d28:	f00b fb45 	bl	223b6 <bt_gatt_check_perm>
   16d2c:	4607      	mov	r7, r0
   16d2e:	2800      	cmp	r0, #0
   16d30:	d1e9      	bne.n	16d06 <notify_cb+0x6a>
		if (data->type == BT_GATT_CCC_INDICATE) {
   16d32:	89a3      	ldrh	r3, [r4, #12]
   16d34:	88a1      	ldrh	r1, [r4, #4]
   16d36:	6922      	ldr	r2, [r4, #16]
   16d38:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   16d3a:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   16d3c:	d10f      	bne.n	16d5e <notify_cb+0xc2>
			err = gatt_indicate(conn, data->handle,
   16d3e:	f7ff fe69 	bl	16a14 <gatt_indicate>
			if (err == 0) {
   16d42:	4606      	mov	r6, r0
   16d44:	b918      	cbnz	r0, 16d4e <notify_cb+0xb2>
				data->ind_params->_ref++;
   16d46:	6922      	ldr	r2, [r4, #16]
   16d48:	7d93      	ldrb	r3, [r2, #22]
   16d4a:	3301      	adds	r3, #1
   16d4c:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   16d4e:	4628      	mov	r0, r5
   16d50:	f7fd ff6a 	bl	14c28 <bt_conn_unref>
		if (err < 0) {
   16d54:	2e00      	cmp	r6, #0
   16d56:	dbd7      	blt.n	16d08 <notify_cb+0x6c>
		data->err = 0;
   16d58:	2300      	movs	r3, #0
   16d5a:	60a3      	str	r3, [r4, #8]
   16d5c:	e7d3      	b.n	16d06 <notify_cb+0x6a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   16d5e:	f00b fb4d 	bl	223fc <gatt_notify>
   16d62:	4606      	mov	r6, r0
   16d64:	e7f3      	b.n	16d4e <notify_cb+0xb2>
   16d66:	bf00      	nop
   16d68:	00021ec1 	.word	0x00021ec1
   16d6c:	200004f8 	.word	0x200004f8
   16d70:	20002da0 	.word	0x20002da0

00016d74 <update_ccc>:
{
   16d74:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16d76:	4b26      	ldr	r3, [pc, #152]	; (16e10 <update_ccc+0x9c>)
	struct bt_conn *conn = data->conn;
   16d78:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   16d7a:	6882      	ldr	r2, [r0, #8]
   16d7c:	429a      	cmp	r2, r3
{
   16d7e:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16d80:	d142      	bne.n	16e08 <update_ccc+0x94>
	ccc = attr->user_data;
   16d82:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   16d84:	8933      	ldrh	r3, [r6, #8]
   16d86:	2b00      	cmp	r3, #0
   16d88:	d03e      	beq.n	16e08 <update_ccc+0x94>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16d8a:	4632      	mov	r2, r6
   16d8c:	4628      	mov	r0, r5
   16d8e:	f812 1b01 	ldrb.w	r1, [r2], #1
   16d92:	f00a f9df 	bl	21154 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   16d96:	2800      	cmp	r0, #0
   16d98:	d036      	beq.n	16e08 <update_ccc+0x94>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   16d9a:	222a      	movs	r2, #42	; 0x2a
   16d9c:	4621      	mov	r1, r4
   16d9e:	4628      	mov	r0, r5
   16da0:	f00b fb09 	bl	223b6 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   16da4:	2803      	cmp	r0, #3
   16da6:	d02f      	beq.n	16e08 <update_ccc+0x94>
		gatt_ccc_changed(attr, ccc);
   16da8:	4631      	mov	r1, r6
   16daa:	4620      	mov	r0, r4
   16dac:	f00a ffc8 	bl	21d40 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   16db0:	4b18      	ldr	r3, [pc, #96]	; (16e14 <update_ccc+0xa0>)
   16db2:	429e      	cmp	r6, r3
   16db4:	d128      	bne.n	16e08 <update_ccc+0x94>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   16db6:	7a28      	ldrb	r0, [r5, #8]
   16db8:	f105 0190 	add.w	r1, r5, #144	; 0x90
   16dbc:	f7ff fbe4 	bl	16588 <find_sc_cfg>
	if (!cfg) {
   16dc0:	4604      	mov	r4, r0
   16dc2:	b308      	cbz	r0, 16e08 <update_ccc+0x94>
	if (!(cfg->data.start || cfg->data.end)) {
   16dc4:	8902      	ldrh	r2, [r0, #8]
   16dc6:	8943      	ldrh	r3, [r0, #10]
   16dc8:	ea53 0102 	orrs.w	r1, r3, r2
   16dcc:	d01c      	beq.n	16e08 <update_ccc+0x94>
	index = bt_conn_index(conn);
   16dce:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   16dd0:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   16dd4:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   16dd8:	f7fe f826 	bl	14e28 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   16ddc:	490e      	ldr	r1, [pc, #56]	; (16e18 <update_ccc+0xa4>)
   16dde:	4a0f      	ldr	r2, [pc, #60]	; (16e1c <update_ccc+0xa8>)
   16de0:	2318      	movs	r3, #24
   16de2:	fb03 1300 	mla	r3, r3, r0, r1
   16de6:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   16de8:	4a0d      	ldr	r2, [pc, #52]	; (16e20 <update_ccc+0xac>)
   16dea:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   16dec:	aa01      	add	r2, sp, #4
   16dee:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   16df0:	2204      	movs	r2, #4
   16df2:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16df4:	b203      	sxth	r3, r0
   16df6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   16dfa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   16dfe:	4628      	mov	r0, r5
   16e00:	f7ff fe52 	bl	16aa8 <bt_gatt_indicate>
__ssp_bos_icheck3(memset, void *, int)
   16e04:	2300      	movs	r3, #0
   16e06:	60a3      	str	r3, [r4, #8]
}
   16e08:	2001      	movs	r0, #1
   16e0a:	b002      	add	sp, #8
   16e0c:	bd70      	pop	{r4, r5, r6, pc}
   16e0e:	bf00      	nop
   16e10:	00021ec1 	.word	0x00021ec1
   16e14:	200004f8 	.word	0x200004f8
   16e18:	200022a4 	.word	0x200022a4
   16e1c:	000232f8 	.word	0x000232f8
   16e20:	00022149 	.word	0x00022149

00016e24 <bt_gatt_unsubscribe>:
	return 0;
}

int bt_gatt_unsubscribe(struct bt_conn *conn,
			struct bt_gatt_subscribe_params *params)
{
   16e24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e28:	460d      	mov	r5, r1
	struct gatt_sub *sub;
	struct bt_gatt_subscribe_params *tmp, *next;
	bool has_subscription = false, found = false;
	sys_snode_t *prev = NULL;

	__ASSERT(conn, "invalid parameters\n");
   16e2a:	4607      	mov	r7, r0
   16e2c:	b970      	cbnz	r0, 16e4c <bt_gatt_unsubscribe+0x28>
   16e2e:	494b      	ldr	r1, [pc, #300]	; (16f5c <bt_gatt_unsubscribe+0x138>)
   16e30:	4a4b      	ldr	r2, [pc, #300]	; (16f60 <bt_gatt_unsubscribe+0x13c>)
   16e32:	484c      	ldr	r0, [pc, #304]	; (16f64 <bt_gatt_unsubscribe+0x140>)
   16e34:	f241 13e3 	movw	r3, #4579	; 0x11e3
   16e38:	f009 f8cb 	bl	1ffd2 <printk>
   16e3c:	484a      	ldr	r0, [pc, #296]	; (16f68 <bt_gatt_unsubscribe+0x144>)
   16e3e:	f009 f8c8 	bl	1ffd2 <printk>
   16e42:	4847      	ldr	r0, [pc, #284]	; (16f60 <bt_gatt_unsubscribe+0x13c>)
   16e44:	f241 11e3 	movw	r1, #4579	; 0x11e3
   16e48:	f009 fb1d 	bl	20486 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   16e4c:	b975      	cbnz	r5, 16e6c <bt_gatt_unsubscribe+0x48>
   16e4e:	4947      	ldr	r1, [pc, #284]	; (16f6c <bt_gatt_unsubscribe+0x148>)
   16e50:	4a43      	ldr	r2, [pc, #268]	; (16f60 <bt_gatt_unsubscribe+0x13c>)
   16e52:	4844      	ldr	r0, [pc, #272]	; (16f64 <bt_gatt_unsubscribe+0x140>)
   16e54:	f241 13e4 	movw	r3, #4580	; 0x11e4
   16e58:	f009 f8bb 	bl	1ffd2 <printk>
   16e5c:	4842      	ldr	r0, [pc, #264]	; (16f68 <bt_gatt_unsubscribe+0x144>)
   16e5e:	f009 f8b8 	bl	1ffd2 <printk>
   16e62:	483f      	ldr	r0, [pc, #252]	; (16f60 <bt_gatt_unsubscribe+0x13c>)
   16e64:	f241 11e4 	movw	r1, #4580	; 0x11e4
   16e68:	f009 fb0d 	bl	20486 <assert_post_action>

	if (conn->state != BT_CONN_CONNECTED) {
   16e6c:	7abb      	ldrb	r3, [r7, #10]
   16e6e:	2b07      	cmp	r3, #7
   16e70:	d170      	bne.n	16f54 <bt_gatt_unsubscribe+0x130>
		return -ENOTCONN;
	}

	sub = gatt_sub_find(conn);
   16e72:	4638      	mov	r0, r7
   16e74:	f7ff fb98 	bl	165a8 <gatt_sub_find>
	if (!sub) {
   16e78:	4606      	mov	r6, r0
   16e7a:	b918      	cbnz	r0, 16e84 <bt_gatt_unsubscribe+0x60>
		return -EINVAL;
   16e7c:	f06f 0015 	mvn.w	r0, #21
	}

	params->value = 0x0000;

	return gatt_write_ccc(conn, params);
}
   16e80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   16e84:	6884      	ldr	r4, [r0, #8]
   16e86:	b1f4      	cbz	r4, 16ec6 <bt_gatt_unsubscribe+0xa2>
   16e88:	f1b4 0314 	subs.w	r3, r4, #20
   16e8c:	d01d      	beq.n	16eca <bt_gatt_unsubscribe+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16e8e:	6824      	ldr	r4, [r4, #0]
   16e90:	b104      	cbz	r4, 16e94 <bt_gatt_unsubscribe+0x70>
   16e92:	3c14      	subs	r4, #20
   16e94:	f04f 0800 	mov.w	r8, #0
   16e98:	46c2      	mov	sl, r8
   16e9a:	46c1      	mov	r9, r8
	parent->next = child;
   16e9c:	46c3      	mov	fp, r8
   16e9e:	b9b3      	cbnz	r3, 16ece <bt_gatt_unsubscribe+0xaa>
	if (!found) {
   16ea0:	f1ba 0f00 	cmp.w	sl, #0
   16ea4:	d0ea      	beq.n	16e7c <bt_gatt_unsubscribe+0x58>
	if (gatt_sub_is_empty(sub)) {
   16ea6:	68b3      	ldr	r3, [r6, #8]
   16ea8:	b913      	cbnz	r3, 16eb0 <bt_gatt_unsubscribe+0x8c>
		gatt_sub_free(sub);
   16eaa:	4630      	mov	r0, r6
   16eac:	f7ff fb9a 	bl	165e4 <gatt_sub_free>
	if (has_subscription) {
   16eb0:	f1b9 0f00 	cmp.w	r9, #0
   16eb4:	d046      	beq.n	16f44 <bt_gatt_unsubscribe+0x120>
		params->notify(conn, params, NULL, 0);
   16eb6:	2300      	movs	r3, #0
   16eb8:	682c      	ldr	r4, [r5, #0]
   16eba:	461a      	mov	r2, r3
   16ebc:	4629      	mov	r1, r5
   16ebe:	4638      	mov	r0, r7
   16ec0:	47a0      	blx	r4
		return 0;
   16ec2:	2000      	movs	r0, #0
   16ec4:	e7dc      	b.n	16e80 <bt_gatt_unsubscribe+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   16ec6:	4623      	mov	r3, r4
   16ec8:	e7e4      	b.n	16e94 <bt_gatt_unsubscribe+0x70>
   16eca:	461c      	mov	r4, r3
   16ecc:	e7e2      	b.n	16e94 <bt_gatt_unsubscribe+0x70>
		if (params == tmp) {
   16ece:	42ab      	cmp	r3, r5
   16ed0:	f103 0114 	add.w	r1, r3, #20
   16ed4:	d129      	bne.n	16f2a <bt_gatt_unsubscribe+0x106>
Z_GENLIST_REMOVE(slist, snode)
   16ed6:	6958      	ldr	r0, [r3, #20]
   16ed8:	f1b8 0f00 	cmp.w	r8, #0
   16edc:	d11d      	bne.n	16f1a <bt_gatt_unsubscribe+0xf6>
   16ede:	68f2      	ldr	r2, [r6, #12]
	list->head = node;
   16ee0:	60b0      	str	r0, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   16ee2:	4291      	cmp	r1, r2
   16ee4:	d100      	bne.n	16ee8 <bt_gatt_unsubscribe+0xc4>
	list->tail = node;
   16ee6:	60f0      	str	r0, [r6, #12]
	parent->next = child;
   16ee8:	f8c3 b014 	str.w	fp, [r3, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16eec:	f3bf 8f5b 	dmb	ish
   16ef0:	692b      	ldr	r3, [r5, #16]
   16ef2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16ef6:	f3c3 0a80 	ubfx	sl, r3, #2, #1
			if (atomic_test_bit(params->flags,
   16efa:	075b      	lsls	r3, r3, #29
   16efc:	d51d      	bpl.n	16f3a <bt_gatt_unsubscribe+0x116>

void bt_gatt_cancel(struct bt_conn *conn, void *params)
{
	bt_att_req_cancel(conn, params);
   16efe:	4629      	mov	r1, r5
   16f00:	4638      	mov	r0, r7
   16f02:	f7ff faf3 	bl	164ec <bt_att_req_cancel>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   16f06:	b1dc      	cbz	r4, 16f40 <bt_gatt_unsubscribe+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16f08:	f114 0214 	adds.w	r2, r4, #20
   16f0c:	d002      	beq.n	16f14 <bt_gatt_unsubscribe+0xf0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16f0e:	6962      	ldr	r2, [r4, #20]
   16f10:	b102      	cbz	r2, 16f14 <bt_gatt_unsubscribe+0xf0>
   16f12:	3a14      	subs	r2, #20
   16f14:	4623      	mov	r3, r4
   16f16:	4614      	mov	r4, r2
   16f18:	e7c1      	b.n	16e9e <bt_gatt_unsubscribe+0x7a>
	parent->next = child;
   16f1a:	f8c8 0000 	str.w	r0, [r8]
Z_GENLIST_REMOVE(slist, snode)
   16f1e:	68f2      	ldr	r2, [r6, #12]
   16f20:	4291      	cmp	r1, r2
	list->tail = node;
   16f22:	bf08      	it	eq
   16f24:	f8c6 800c 	streq.w	r8, [r6, #12]
}
   16f28:	e7de      	b.n	16ee8 <bt_gatt_unsubscribe+0xc4>
		if (tmp->value_handle == params->value_handle) {
   16f2a:	891a      	ldrh	r2, [r3, #8]
   16f2c:	892b      	ldrh	r3, [r5, #8]
   16f2e:	4688      	mov	r8, r1
   16f30:	429a      	cmp	r2, r3
   16f32:	bf08      	it	eq
   16f34:	f04f 0901 	moveq.w	r9, #1
   16f38:	e7e5      	b.n	16f06 <bt_gatt_unsubscribe+0xe2>
			found = true;
   16f3a:	f04f 0a01 	mov.w	sl, #1
   16f3e:	e7e2      	b.n	16f06 <bt_gatt_unsubscribe+0xe2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   16f40:	4622      	mov	r2, r4
   16f42:	e7e7      	b.n	16f14 <bt_gatt_unsubscribe+0xf0>
	params->value = 0x0000;
   16f44:	f8a5 900c 	strh.w	r9, [r5, #12]
	return gatt_write_ccc(conn, params);
   16f48:	4629      	mov	r1, r5
   16f4a:	4638      	mov	r0, r7
}
   16f4c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params);
   16f50:	f7ff bb96 	b.w	16680 <gatt_write_ccc>
		return -ENOTCONN;
   16f54:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16f58:	e792      	b.n	16e80 <bt_gatt_unsubscribe+0x5c>
   16f5a:	bf00      	nop
   16f5c:	00024536 	.word	0x00024536
   16f60:	0002453b 	.word	0x0002453b
   16f64:	000237c9 	.word	0x000237c9
   16f68:	000245b8 	.word	0x000245b8
   16f6c:	000245b1 	.word	0x000245b1

00016f70 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   16f70:	b573      	push	{r0, r1, r4, r5, r6, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16f72:	4a17      	ldr	r2, [pc, #92]	; (16fd0 <bt_gatt_connected+0x60>)
	data.conn = conn;
   16f74:	9000      	str	r0, [sp, #0]
{
   16f76:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16f78:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   16f7a:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16f7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   16f80:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16f84:	f00b fa0a 	bl	2239c <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   16f88:	4628      	mov	r0, r5
   16f8a:	f7ff fb0d 	bl	165a8 <gatt_sub_find>
	if (!sub) {
   16f8e:	b128      	cbz	r0, 16f9c <bt_gatt_connected+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   16f90:	6884      	ldr	r4, [r0, #8]
   16f92:	b11c      	cbz	r4, 16f9c <bt_gatt_connected+0x2c>
   16f94:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   16f96:	f105 0690 	add.w	r6, r5, #144	; 0x90
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   16f9a:	b90c      	cbnz	r4, 16fa0 <bt_gatt_connected+0x30>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   16f9c:	b002      	add	sp, #8
   16f9e:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   16fa0:	7a28      	ldrb	r0, [r5, #8]
   16fa2:	4631      	mov	r1, r6
   16fa4:	f009 ffa1 	bl	20eea <bt_addr_le_is_bonded>
   16fa8:	b150      	cbz	r0, 16fc0 <bt_gatt_connected+0x50>
   16faa:	f3bf 8f5b 	dmb	ish
   16fae:	6923      	ldr	r3, [r4, #16]
   16fb0:	f3bf 8f5b 	dmb	ish
   16fb4:	079b      	lsls	r3, r3, #30
   16fb6:	d403      	bmi.n	16fc0 <bt_gatt_connected+0x50>
			gatt_write_ccc(conn, params);
   16fb8:	4621      	mov	r1, r4
   16fba:	4628      	mov	r0, r5
   16fbc:	f7ff fb60 	bl	16680 <gatt_write_ccc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16fc0:	f114 0f14 	cmn.w	r4, #20
   16fc4:	d0ea      	beq.n	16f9c <bt_gatt_connected+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16fc6:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   16fc8:	2c00      	cmp	r4, #0
   16fca:	d0e7      	beq.n	16f9c <bt_gatt_connected+0x2c>
   16fcc:	3c14      	subs	r4, #20
   16fce:	e7e4      	b.n	16f9a <bt_gatt_connected+0x2a>
   16fd0:	00016d75 	.word	0x00016d75

00016fd4 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   16fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16fd6:	4b09      	ldr	r3, [pc, #36]	; (16ffc <bt_gatt_att_max_mtu_changed+0x28>)
   16fd8:	681c      	ldr	r4, [r3, #0]
{
   16fda:	4605      	mov	r5, r0
   16fdc:	460e      	mov	r6, r1
   16fde:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16fe0:	b10c      	cbz	r4, 16fe6 <bt_gatt_att_max_mtu_changed+0x12>
   16fe2:	3c04      	subs	r4, #4
   16fe4:	b904      	cbnz	r4, 16fe8 <bt_gatt_att_max_mtu_changed+0x14>
		if (cb->att_mtu_updated) {
			cb->att_mtu_updated(conn, tx, rx);
		}
	}
}
   16fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   16fe8:	6823      	ldr	r3, [r4, #0]
   16fea:	b11b      	cbz	r3, 16ff4 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   16fec:	463a      	mov	r2, r7
   16fee:	4631      	mov	r1, r6
   16ff0:	4628      	mov	r0, r5
   16ff2:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16ff4:	1d23      	adds	r3, r4, #4
   16ff6:	d0f6      	beq.n	16fe6 <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16ff8:	6864      	ldr	r4, [r4, #4]
   16ffa:	e7f1      	b.n	16fe0 <bt_gatt_att_max_mtu_changed+0xc>
   16ffc:	20002288 	.word	0x20002288

00017000 <db_hash_read>:
{
   17000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17004:	4910      	ldr	r1, [pc, #64]	; (17048 <db_hash_read+0x48>)
{
   17006:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   1700a:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1700c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   17010:	461d      	mov	r5, r3
   17012:	4614      	mov	r4, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17014:	f004 f992 	bl	1b33c <k_work_cancel_delayable_sync>
   17018:	f3bf 8f5b 	dmb	ish
   1701c:	4b0b      	ldr	r3, [pc, #44]	; (1704c <db_hash_read+0x4c>)
   1701e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   17020:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   17024:	075b      	lsls	r3, r3, #29
   17026:	d401      	bmi.n	1702c <db_hash_read+0x2c>
		db_hash_gen(true);
   17028:	f7ff fcba 	bl	169a0 <db_hash_gen.isra.0>
	(void)bt_gatt_change_aware(conn, true);
   1702c:	2101      	movs	r1, #1
   1702e:	4630      	mov	r0, r6
   17030:	f00b fa8c 	bl	2254c <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17034:	2310      	movs	r3, #16
   17036:	9306      	str	r3, [sp, #24]
   17038:	463a      	mov	r2, r7
   1703a:	4629      	mov	r1, r5
   1703c:	4620      	mov	r0, r4
   1703e:	4b04      	ldr	r3, [pc, #16]	; (17050 <db_hash_read+0x50>)
}
   17040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17044:	f00a bfbb 	b.w	21fbe <bt_gatt_attr_read.constprop.0>
   17048:	20001848 	.word	0x20001848
   1704c:	20001870 	.word	0x20001870
   17050:	20001808 	.word	0x20001808

00017054 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   17054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   17058:	4a33      	ldr	r2, [pc, #204]	; (17128 <bt_gatt_disconnected+0xd4>)
   1705a:	4603      	mov	r3, r0
{
   1705c:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1705e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17062:	2001      	movs	r0, #1
   17064:	f00b f99a 	bl	2239c <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   17068:	4620      	mov	r0, r4
   1706a:	f7ff fa9d 	bl	165a8 <gatt_sub_find>
	if (!sub) {
   1706e:	4606      	mov	r6, r0
   17070:	b3a8      	cbz	r0, 170de <bt_gatt_disconnected+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   17072:	6883      	ldr	r3, [r0, #8]
   17074:	b39b      	cbz	r3, 170de <bt_gatt_disconnected+0x8a>
   17076:	f1b3 0714 	subs.w	r7, r3, #20
   1707a:	d030      	beq.n	170de <bt_gatt_disconnected+0x8a>
   1707c:	681d      	ldr	r5, [r3, #0]
   1707e:	b105      	cbz	r5, 17082 <bt_gatt_disconnected+0x2e>
   17080:	3d14      	subs	r5, #20
{
   17082:	f04f 0b00 	mov.w	fp, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   17086:	f104 0890 	add.w	r8, r4, #144	; 0x90
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1708a:	f106 0901 	add.w	r9, r6, #1
			params->value = 0U;
   1708e:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   17090:	7a20      	ldrb	r0, [r4, #8]
   17092:	4641      	mov	r1, r8
   17094:	f009 ff29 	bl	20eea <bt_addr_le_is_bonded>
   17098:	b988      	cbnz	r0, 170be <bt_gatt_disconnected+0x6a>
			params->value = 0U;
   1709a:	f8a7 a00c 	strh.w	sl, [r7, #12]
			gatt_sub_remove(conn, sub, prev, params);
   1709e:	463b      	mov	r3, r7
   170a0:	465a      	mov	r2, fp
   170a2:	4631      	mov	r1, r6
   170a4:	4620      	mov	r0, r4
   170a6:	f00b f8a3 	bl	221f0 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   170aa:	b1c5      	cbz	r5, 170de <bt_gatt_disconnected+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   170ac:	f115 0114 	adds.w	r1, r5, #20
   170b0:	d002      	beq.n	170b8 <bt_gatt_disconnected+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   170b2:	6969      	ldr	r1, [r5, #20]
   170b4:	b101      	cbz	r1, 170b8 <bt_gatt_disconnected+0x64>
   170b6:	3914      	subs	r1, #20
{
   170b8:	462f      	mov	r7, r5
   170ba:	460d      	mov	r5, r1
   170bc:	e7e8      	b.n	17090 <bt_gatt_disconnected+0x3c>
   170be:	f3bf 8f5b 	dmb	ish
   170c2:	693b      	ldr	r3, [r7, #16]
   170c4:	f3bf 8f5b 	dmb	ish
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   170c8:	07db      	lsls	r3, r3, #31
   170ca:	d4e6      	bmi.n	1709a <bt_gatt_disconnected+0x46>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   170cc:	7873      	ldrb	r3, [r6, #1]
   170ce:	b11b      	cbz	r3, 170d8 <bt_gatt_disconnected+0x84>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   170d0:	4641      	mov	r1, r8
   170d2:	4648      	mov	r0, r9
   170d4:	f00a fec6 	bl	21e64 <bt_addr_le_copy>
			prev = &params->node;
   170d8:	f107 0b14 	add.w	fp, r7, #20
   170dc:	e7e5      	b.n	170aa <bt_gatt_disconnected+0x56>
	cfg = find_cf_cfg(conn);
   170de:	4620      	mov	r0, r4
   170e0:	f7ff fa34 	bl	1654c <find_cf_cfg>
	if (!cfg) {
   170e4:	4605      	mov	r5, r0
   170e6:	b1e0      	cbz	r0, 17122 <bt_gatt_disconnected+0xce>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   170e8:	f104 0690 	add.w	r6, r4, #144	; 0x90
   170ec:	7a20      	ldrb	r0, [r4, #8]
   170ee:	4631      	mov	r1, r6
   170f0:	f009 fefb 	bl	20eea <bt_addr_le_is_bonded>
   170f4:	b920      	cbnz	r0, 17100 <bt_gatt_disconnected+0xac>
		clear_cf_cfg(cfg);
   170f6:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   170f8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   170fc:	f00a bfe1 	b.w	220c2 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17100:	1c68      	adds	r0, r5, #1
   17102:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17104:	350c      	adds	r5, #12
   17106:	f00a fead 	bl	21e64 <bt_addr_le_copy>
   1710a:	f3bf 8f5b 	dmb	ish
   1710e:	e855 3f00 	ldrex	r3, [r5]
   17112:	f023 0302 	bic.w	r3, r3, #2
   17116:	e845 3200 	strex	r2, r3, [r5]
   1711a:	2a00      	cmp	r2, #0
   1711c:	d1f7      	bne.n	1710e <bt_gatt_disconnected+0xba>
   1711e:	f3bf 8f5b 	dmb	ish
}
   17122:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17126:	bf00      	nop
   17128:	000166a5 	.word	0x000166a5

0001712c <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   1712c:	4b04      	ldr	r3, [pc, #16]	; (17140 <bt_smp_accept+0x14>)
   1712e:	6818      	ldr	r0, [r3, #0]
   17130:	b918      	cbnz	r0, 1713a <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
   17132:	4a04      	ldr	r2, [pc, #16]	; (17144 <bt_smp_accept+0x18>)
   17134:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   17136:	600b      	str	r3, [r1, #0]

		return 0;
   17138:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   1713a:	f06f 000b 	mvn.w	r0, #11
}
   1713e:	4770      	bx	lr
   17140:	200018c8 	.word	0x200018c8
   17144:	000233d4 	.word	0x000233d4

00017148 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   17148:	4b02      	ldr	r3, [pc, #8]	; (17154 <net_buf_pool_get+0xc>)
   1714a:	222c      	movs	r2, #44	; 0x2c
   1714c:	fb02 3000 	mla	r0, r2, r0, r3
   17150:	4770      	bx	lr
   17152:	bf00      	nop
   17154:	20000738 	.word	0x20000738

00017158 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17158:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1715a:	4a05      	ldr	r2, [pc, #20]	; (17170 <net_buf_id+0x18>)
   1715c:	212c      	movs	r1, #44	; 0x2c
   1715e:	fb01 2303 	mla	r3, r1, r3, r2
   17162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17164:	1ac0      	subs	r0, r0, r3
}
   17166:	4b03      	ldr	r3, [pc, #12]	; (17174 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   17168:	10c0      	asrs	r0, r0, #3
}
   1716a:	4358      	muls	r0, r3
   1716c:	4770      	bx	lr
   1716e:	bf00      	nop
   17170:	20000738 	.word	0x20000738
   17174:	aaaaaaab 	.word	0xaaaaaaab

00017178 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   17178:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1717a:	4a0a      	ldr	r2, [pc, #40]	; (171a4 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1717c:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1717e:	242c      	movs	r4, #44	; 0x2c
   17180:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   17184:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17188:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1718a:	6823      	ldr	r3, [r4, #0]
   1718c:	429a      	cmp	r2, r3
   1718e:	bf94      	ite	ls
   17190:	600a      	strls	r2, [r1, #0]
   17192:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   17194:	f7ff ffe0 	bl	17158 <net_buf_id>
   17198:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1719c:	fb02 3000 	mla	r0, r2, r0, r3
   171a0:	bd10      	pop	{r4, pc}
   171a2:	bf00      	nop
   171a4:	20000738 	.word	0x20000738

000171a8 <net_buf_reset>:
{
   171a8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   171aa:	7943      	ldrb	r3, [r0, #5]
{
   171ac:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   171ae:	b14b      	cbz	r3, 171c4 <net_buf_reset+0x1c>
   171b0:	490d      	ldr	r1, [pc, #52]	; (171e8 <net_buf_reset+0x40>)
   171b2:	480e      	ldr	r0, [pc, #56]	; (171ec <net_buf_reset+0x44>)
   171b4:	4a0e      	ldr	r2, [pc, #56]	; (171f0 <net_buf_reset+0x48>)
   171b6:	234f      	movs	r3, #79	; 0x4f
   171b8:	f008 ff0b 	bl	1ffd2 <printk>
   171bc:	480c      	ldr	r0, [pc, #48]	; (171f0 <net_buf_reset+0x48>)
   171be:	214f      	movs	r1, #79	; 0x4f
   171c0:	f009 f961 	bl	20486 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   171c4:	6823      	ldr	r3, [r4, #0]
   171c6:	b14b      	cbz	r3, 171dc <net_buf_reset+0x34>
   171c8:	490a      	ldr	r1, [pc, #40]	; (171f4 <net_buf_reset+0x4c>)
   171ca:	4808      	ldr	r0, [pc, #32]	; (171ec <net_buf_reset+0x44>)
   171cc:	4a08      	ldr	r2, [pc, #32]	; (171f0 <net_buf_reset+0x48>)
   171ce:	2350      	movs	r3, #80	; 0x50
   171d0:	f008 feff 	bl	1ffd2 <printk>
   171d4:	4806      	ldr	r0, [pc, #24]	; (171f0 <net_buf_reset+0x48>)
   171d6:	2150      	movs	r1, #80	; 0x50
   171d8:	f009 f955 	bl	20486 <assert_post_action>
	buf->len  = 0U;
   171dc:	2300      	movs	r3, #0
   171de:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   171e0:	6923      	ldr	r3, [r4, #16]
   171e2:	60a3      	str	r3, [r4, #8]
}
   171e4:	bd10      	pop	{r4, pc}
   171e6:	bf00      	nop
   171e8:	00024675 	.word	0x00024675
   171ec:	000237c9 	.word	0x000237c9
   171f0:	00024651 	.word	0x00024651
   171f4:	00024686 	.word	0x00024686

000171f8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   171f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   171fc:	4605      	mov	r5, r0
   171fe:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   17200:	4610      	mov	r0, r2
   17202:	4619      	mov	r1, r3
{
   17204:	4616      	mov	r6, r2
   17206:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   17208:	f00b fca4 	bl	22b54 <sys_clock_timeout_end_calc>
   1720c:	4680      	mov	r8, r0
   1720e:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   17210:	b94d      	cbnz	r5, 17226 <net_buf_alloc_len+0x2e>
   17212:	494d      	ldr	r1, [pc, #308]	; (17348 <net_buf_alloc_len+0x150>)
   17214:	484d      	ldr	r0, [pc, #308]	; (1734c <net_buf_alloc_len+0x154>)
   17216:	4a4e      	ldr	r2, [pc, #312]	; (17350 <net_buf_alloc_len+0x158>)
   17218:	23ed      	movs	r3, #237	; 0xed
   1721a:	f008 feda 	bl	1ffd2 <printk>
   1721e:	484c      	ldr	r0, [pc, #304]	; (17350 <net_buf_alloc_len+0x158>)
   17220:	21ed      	movs	r1, #237	; 0xed
   17222:	f009 f930 	bl	20486 <assert_post_action>
	__asm__ volatile(
   17226:	f04f 0340 	mov.w	r3, #64	; 0x40
   1722a:	f3ef 8a11 	mrs	sl, BASEPRI
   1722e:	f383 8812 	msr	BASEPRI_MAX, r3
   17232:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   17236:	8beb      	ldrh	r3, [r5, #30]
   17238:	2b00      	cmp	r3, #0
   1723a:	d055      	beq.n	172e8 <net_buf_alloc_len+0xf0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1723c:	8baa      	ldrh	r2, [r5, #28]
   1723e:	429a      	cmp	r2, r3
   17240:	d93e      	bls.n	172c0 <net_buf_alloc_len+0xc8>
	return z_impl_k_queue_get(queue, timeout);
   17242:	2200      	movs	r2, #0
   17244:	2300      	movs	r3, #0
   17246:	4628      	mov	r0, r5
   17248:	f003 faac 	bl	1a7a4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1724c:	4604      	mov	r4, r0
   1724e:	2800      	cmp	r0, #0
   17250:	d036      	beq.n	172c0 <net_buf_alloc_len+0xc8>
	__asm__ volatile(
   17252:	f38a 8811 	msr	BASEPRI, sl
   17256:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1725a:	f8dd a004 	ldr.w	sl, [sp, #4]
   1725e:	f1ba 0f00 	cmp.w	sl, #0
   17262:	d06d      	beq.n	17340 <net_buf_alloc_len+0x148>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   17264:	ea56 0307 	orrs.w	r3, r6, r7
   17268:	d010      	beq.n	1728c <net_buf_alloc_len+0x94>
   1726a:	1c7b      	adds	r3, r7, #1
   1726c:	bf08      	it	eq
   1726e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   17272:	d00b      	beq.n	1728c <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   17274:	f005 fd86 	bl	1cd84 <sys_clock_tick_get>
   17278:	ebb8 0600 	subs.w	r6, r8, r0
   1727c:	eb69 0701 	sbc.w	r7, r9, r1
   17280:	2e00      	cmp	r6, #0
   17282:	f177 0300 	sbcs.w	r3, r7, #0
   17286:	bfbc      	itt	lt
   17288:	2600      	movlt	r6, #0
   1728a:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1728c:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1728e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 17354 <net_buf_alloc_len+0x15c>
   17292:	f04f 092c 	mov.w	r9, #44	; 0x2c
   17296:	fb09 8303 	mla	r3, r9, r3, r8
   1729a:	4632      	mov	r2, r6
   1729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1729e:	681b      	ldr	r3, [r3, #0]
   172a0:	a901      	add	r1, sp, #4
   172a2:	681d      	ldr	r5, [r3, #0]
   172a4:	4620      	mov	r0, r4
   172a6:	463b      	mov	r3, r7
   172a8:	47a8      	blx	r5
   172aa:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   172ac:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   172ae:	bb58      	cbnz	r0, 17308 <net_buf_alloc_len+0x110>
	k_lifo_put(&pool->free, buf);
   172b0:	79a0      	ldrb	r0, [r4, #6]
   172b2:	4621      	mov	r1, r4
   172b4:	fb00 8009 	mla	r0, r0, r9, r8
   172b8:	f00b fba9 	bl	22a0e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   172bc:	462c      	mov	r4, r5
}
   172be:	e01f      	b.n	17300 <net_buf_alloc_len+0x108>
		uninit_count = pool->uninit_count--;
   172c0:	8be8      	ldrh	r0, [r5, #30]
   172c2:	1e43      	subs	r3, r0, #1
   172c4:	83eb      	strh	r3, [r5, #30]
   172c6:	f38a 8811 	msr	BASEPRI, sl
   172ca:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   172ce:	8bac      	ldrh	r4, [r5, #28]
   172d0:	1a24      	subs	r4, r4, r0
   172d2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   172d4:	2318      	movs	r3, #24
   172d6:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   172da:	481e      	ldr	r0, [pc, #120]	; (17354 <net_buf_alloc_len+0x15c>)
   172dc:	4b1e      	ldr	r3, [pc, #120]	; (17358 <net_buf_alloc_len+0x160>)
   172de:	1a2d      	subs	r5, r5, r0
   172e0:	10ad      	asrs	r5, r5, #2
   172e2:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   172e4:	71a5      	strb	r5, [r4, #6]
		goto success;
   172e6:	e7b8      	b.n	1725a <net_buf_alloc_len+0x62>
   172e8:	f38a 8811 	msr	BASEPRI, sl
   172ec:	f3bf 8f6f 	isb	sy
   172f0:	4632      	mov	r2, r6
   172f2:	463b      	mov	r3, r7
   172f4:	4628      	mov	r0, r5
   172f6:	f003 fa55 	bl	1a7a4 <z_impl_k_queue_get>
	if (!buf) {
   172fa:	4604      	mov	r4, r0
   172fc:	2800      	cmp	r0, #0
   172fe:	d1ac      	bne.n	1725a <net_buf_alloc_len+0x62>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   17300:	4620      	mov	r0, r4
   17302:	b002      	add	sp, #8
   17304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
   17308:	9b01      	ldr	r3, [sp, #4]
   1730a:	459a      	cmp	sl, r3
   1730c:	d90e      	bls.n	1732c <net_buf_alloc_len+0x134>
   1730e:	4913      	ldr	r1, [pc, #76]	; (1735c <net_buf_alloc_len+0x164>)
   17310:	4a0f      	ldr	r2, [pc, #60]	; (17350 <net_buf_alloc_len+0x158>)
   17312:	480e      	ldr	r0, [pc, #56]	; (1734c <net_buf_alloc_len+0x154>)
   17314:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   17318:	f008 fe5b 	bl	1ffd2 <printk>
   1731c:	4810      	ldr	r0, [pc, #64]	; (17360 <net_buf_alloc_len+0x168>)
   1731e:	f008 fe58 	bl	1ffd2 <printk>
   17322:	480b      	ldr	r0, [pc, #44]	; (17350 <net_buf_alloc_len+0x158>)
   17324:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   17328:	f009 f8ad 	bl	20486 <assert_post_action>
	buf->frags = NULL;
   1732c:	2300      	movs	r3, #0
   1732e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   17330:	2301      	movs	r3, #1
   17332:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   17334:	9b01      	ldr	r3, [sp, #4]
   17336:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   17338:	4620      	mov	r0, r4
   1733a:	f7ff ff35 	bl	171a8 <net_buf_reset>
	return buf;
   1733e:	e7df      	b.n	17300 <net_buf_alloc_len+0x108>
		buf->__buf = NULL;
   17340:	f8c4 a010 	str.w	sl, [r4, #16]
   17344:	e7f2      	b.n	1732c <net_buf_alloc_len+0x134>
   17346:	bf00      	nop
   17348:	000246a0 	.word	0x000246a0
   1734c:	000237c9 	.word	0x000237c9
   17350:	00024651 	.word	0x00024651
   17354:	20000738 	.word	0x20000738
   17358:	ba2e8ba3 	.word	0xba2e8ba3
   1735c:	000246a5 	.word	0x000246a5
   17360:	000246b6 	.word	0x000246b6

00017364 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   17364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17368:	4606      	mov	r6, r0
   1736a:	f003 fa1b 	bl	1a7a4 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1736e:	4605      	mov	r5, r0
   17370:	b150      	cbz	r0, 17388 <net_buf_get+0x24>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   17372:	4f13      	ldr	r7, [pc, #76]	; (173c0 <net_buf_get+0x5c>)
   17374:	f8df 804c 	ldr.w	r8, [pc, #76]	; 173c4 <net_buf_get+0x60>
   17378:	f8df 904c 	ldr.w	r9, [pc, #76]	; 173c8 <net_buf_get+0x64>
   1737c:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1737e:	7963      	ldrb	r3, [r4, #5]
   17380:	f013 0301 	ands.w	r3, r3, #1
   17384:	d103      	bne.n	1738e <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   17386:	6023      	str	r3, [r4, #0]

	return buf;
}
   17388:	4628      	mov	r0, r5
   1738a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1738e:	2200      	movs	r2, #0
   17390:	2300      	movs	r3, #0
   17392:	4630      	mov	r0, r6
   17394:	f003 fa06 	bl	1a7a4 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   17398:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1739a:	b958      	cbnz	r0, 173b4 <net_buf_get+0x50>
   1739c:	4641      	mov	r1, r8
   1739e:	4648      	mov	r0, r9
   173a0:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   173a4:	463a      	mov	r2, r7
   173a6:	f008 fe14 	bl	1ffd2 <printk>
   173aa:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   173ae:	4638      	mov	r0, r7
   173b0:	f009 f869 	bl	20486 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   173b4:	7963      	ldrb	r3, [r4, #5]
   173b6:	f023 0301 	bic.w	r3, r3, #1
   173ba:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   173bc:	6824      	ldr	r4, [r4, #0]
   173be:	e7de      	b.n	1737e <net_buf_get+0x1a>
   173c0:	00024651 	.word	0x00024651
   173c4:	000246b9 	.word	0x000246b9
   173c8:	000237c9 	.word	0x000237c9

000173cc <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   173cc:	b538      	push	{r3, r4, r5, lr}
   173ce:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   173d0:	4604      	mov	r4, r0
   173d2:	b958      	cbnz	r0, 173ec <net_buf_simple_reserve+0x20>
   173d4:	490e      	ldr	r1, [pc, #56]	; (17410 <net_buf_simple_reserve+0x44>)
   173d6:	480f      	ldr	r0, [pc, #60]	; (17414 <net_buf_simple_reserve+0x48>)
   173d8:	4a0f      	ldr	r2, [pc, #60]	; (17418 <net_buf_simple_reserve+0x4c>)
   173da:	f240 13bd 	movw	r3, #445	; 0x1bd
   173de:	f008 fdf8 	bl	1ffd2 <printk>
   173e2:	480d      	ldr	r0, [pc, #52]	; (17418 <net_buf_simple_reserve+0x4c>)
   173e4:	f240 11bd 	movw	r1, #445	; 0x1bd
   173e8:	f009 f84d 	bl	20486 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   173ec:	88a3      	ldrh	r3, [r4, #4]
   173ee:	b15b      	cbz	r3, 17408 <net_buf_simple_reserve+0x3c>
   173f0:	490a      	ldr	r1, [pc, #40]	; (1741c <net_buf_simple_reserve+0x50>)
   173f2:	4808      	ldr	r0, [pc, #32]	; (17414 <net_buf_simple_reserve+0x48>)
   173f4:	4a08      	ldr	r2, [pc, #32]	; (17418 <net_buf_simple_reserve+0x4c>)
   173f6:	f44f 73df 	mov.w	r3, #446	; 0x1be
   173fa:	f008 fdea 	bl	1ffd2 <printk>
   173fe:	4806      	ldr	r0, [pc, #24]	; (17418 <net_buf_simple_reserve+0x4c>)
   17400:	f44f 71df 	mov.w	r1, #446	; 0x1be
   17404:	f009 f83f 	bl	20486 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   17408:	68a3      	ldr	r3, [r4, #8]
   1740a:	442b      	add	r3, r5
   1740c:	6023      	str	r3, [r4, #0]
}
   1740e:	bd38      	pop	{r3, r4, r5, pc}
   17410:	00024239 	.word	0x00024239
   17414:	000237c9 	.word	0x000237c9
   17418:	00024651 	.word	0x00024651
   1741c:	000246c5 	.word	0x000246c5

00017420 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   17420:	b538      	push	{r3, r4, r5, lr}
   17422:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   17424:	4605      	mov	r5, r0
   17426:	b958      	cbnz	r0, 17440 <net_buf_put+0x20>
   17428:	4913      	ldr	r1, [pc, #76]	; (17478 <net_buf_put+0x58>)
   1742a:	4814      	ldr	r0, [pc, #80]	; (1747c <net_buf_put+0x5c>)
   1742c:	4a14      	ldr	r2, [pc, #80]	; (17480 <net_buf_put+0x60>)
   1742e:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
   17432:	f008 fdce 	bl	1ffd2 <printk>
   17436:	4812      	ldr	r0, [pc, #72]	; (17480 <net_buf_put+0x60>)
   17438:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
   1743c:	f009 f823 	bl	20486 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   17440:	b95c      	cbnz	r4, 1745a <net_buf_put+0x3a>
   17442:	4910      	ldr	r1, [pc, #64]	; (17484 <net_buf_put+0x64>)
   17444:	480d      	ldr	r0, [pc, #52]	; (1747c <net_buf_put+0x5c>)
   17446:	4a0e      	ldr	r2, [pc, #56]	; (17480 <net_buf_put+0x60>)
   17448:	f240 13fb 	movw	r3, #507	; 0x1fb
   1744c:	f008 fdc1 	bl	1ffd2 <printk>
   17450:	480b      	ldr	r0, [pc, #44]	; (17480 <net_buf_put+0x60>)
   17452:	f240 11fb 	movw	r1, #507	; 0x1fb
   17456:	f009 f816 	bl	20486 <assert_post_action>
{
   1745a:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1745c:	6811      	ldr	r1, [r2, #0]
   1745e:	b929      	cbnz	r1, 1746c <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   17460:	4621      	mov	r1, r4
   17462:	4628      	mov	r0, r5
}
   17464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   17468:	f003 b93e 	b.w	1a6e8 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1746c:	7953      	ldrb	r3, [r2, #5]
   1746e:	f043 0301 	orr.w	r3, r3, #1
   17472:	7153      	strb	r3, [r2, #5]
   17474:	460a      	mov	r2, r1
   17476:	e7f1      	b.n	1745c <net_buf_put+0x3c>
   17478:	000246d4 	.word	0x000246d4
   1747c:	000237c9 	.word	0x000237c9
   17480:	00024651 	.word	0x00024651
   17484:	00024239 	.word	0x00024239

00017488 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   17488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1748c:	4605      	mov	r5, r0
   1748e:	b328      	cbz	r0, 174dc <net_buf_unref+0x54>
   17490:	4e1c      	ldr	r6, [pc, #112]	; (17504 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   17492:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   17494:	f04f 082c 	mov.w	r8, #44	; 0x2c
		struct net_buf *frags = buf->frags;
   17498:	462c      	mov	r4, r5
   1749a:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1749c:	7923      	ldrb	r3, [r4, #4]
   1749e:	3b01      	subs	r3, #1
   174a0:	b2db      	uxtb	r3, r3
   174a2:	7123      	strb	r3, [r4, #4]
   174a4:	b9c3      	cbnz	r3, 174d8 <net_buf_unref+0x50>
		if (buf->__buf) {
   174a6:	6921      	ldr	r1, [r4, #16]
   174a8:	b159      	cbz	r1, 174c2 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   174aa:	7963      	ldrb	r3, [r4, #5]
   174ac:	079b      	lsls	r3, r3, #30
   174ae:	d407      	bmi.n	174c0 <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
   174b0:	79a3      	ldrb	r3, [r4, #6]
   174b2:	fb08 6303 	mla	r3, r8, r3, r6
   174b6:	4620      	mov	r0, r4
   174b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   174ba:	681b      	ldr	r3, [r3, #0]
   174bc:	689b      	ldr	r3, [r3, #8]
   174be:	4798      	blx	r3
			buf->__buf = NULL;
   174c0:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   174c2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   174c4:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   174c6:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   174ca:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   174cc:	6a1b      	ldr	r3, [r3, #32]
   174ce:	b19b      	cbz	r3, 174f8 <net_buf_unref+0x70>
			pool->destroy(buf);
   174d0:	4620      	mov	r0, r4
   174d2:	4798      	blx	r3
	while (buf) {
   174d4:	2d00      	cmp	r5, #0
   174d6:	d1df      	bne.n	17498 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   174d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   174dc:	490a      	ldr	r1, [pc, #40]	; (17508 <net_buf_unref+0x80>)
   174de:	480b      	ldr	r0, [pc, #44]	; (1750c <net_buf_unref+0x84>)
   174e0:	4a0b      	ldr	r2, [pc, #44]	; (17510 <net_buf_unref+0x88>)
   174e2:	f240 230a 	movw	r3, #522	; 0x20a
   174e6:	f008 fd74 	bl	1ffd2 <printk>
}
   174ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   174ee:	4808      	ldr	r0, [pc, #32]	; (17510 <net_buf_unref+0x88>)
   174f0:	f240 210a 	movw	r1, #522	; 0x20a
   174f4:	f008 bfc7 	b.w	20486 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   174f8:	4621      	mov	r1, r4
   174fa:	fb00 6008 	mla	r0, r0, r8, r6
   174fe:	f00b fa86 	bl	22a0e <k_queue_prepend>
}
   17502:	e7e7      	b.n	174d4 <net_buf_unref+0x4c>
   17504:	20000738 	.word	0x20000738
   17508:	00024239 	.word	0x00024239
   1750c:	000237c9 	.word	0x000237c9
   17510:	00024651 	.word	0x00024651

00017514 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   17514:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   17516:	4604      	mov	r4, r0
   17518:	b958      	cbnz	r0, 17532 <net_buf_ref+0x1e>
   1751a:	4908      	ldr	r1, [pc, #32]	; (1753c <net_buf_ref+0x28>)
   1751c:	4808      	ldr	r0, [pc, #32]	; (17540 <net_buf_ref+0x2c>)
   1751e:	4a09      	ldr	r2, [pc, #36]	; (17544 <net_buf_ref+0x30>)
   17520:	f240 2339 	movw	r3, #569	; 0x239
   17524:	f008 fd55 	bl	1ffd2 <printk>
   17528:	4806      	ldr	r0, [pc, #24]	; (17544 <net_buf_ref+0x30>)
   1752a:	f240 2139 	movw	r1, #569	; 0x239
   1752e:	f008 ffaa 	bl	20486 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   17532:	7923      	ldrb	r3, [r4, #4]
   17534:	3301      	adds	r3, #1
   17536:	7123      	strb	r3, [r4, #4]
	return buf;
}
   17538:	4620      	mov	r0, r4
   1753a:	bd10      	pop	{r4, pc}
   1753c:	00024239 	.word	0x00024239
   17540:	000237c9 	.word	0x000237c9
   17544:	00024651 	.word	0x00024651

00017548 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   17548:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1754a:	4604      	mov	r4, r0
   1754c:	b958      	cbnz	r0, 17566 <net_buf_frag_last+0x1e>
   1754e:	4908      	ldr	r1, [pc, #32]	; (17570 <net_buf_frag_last+0x28>)
   17550:	4808      	ldr	r0, [pc, #32]	; (17574 <net_buf_frag_last+0x2c>)
   17552:	4a09      	ldr	r2, [pc, #36]	; (17578 <net_buf_frag_last+0x30>)
   17554:	f240 2376 	movw	r3, #630	; 0x276
   17558:	f008 fd3b 	bl	1ffd2 <printk>
   1755c:	4806      	ldr	r0, [pc, #24]	; (17578 <net_buf_frag_last+0x30>)
   1755e:	f240 2176 	movw	r1, #630	; 0x276
   17562:	f008 ff90 	bl	20486 <assert_post_action>

	while (buf->frags) {
   17566:	4620      	mov	r0, r4
   17568:	6824      	ldr	r4, [r4, #0]
   1756a:	2c00      	cmp	r4, #0
   1756c:	d1fb      	bne.n	17566 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1756e:	bd10      	pop	{r4, pc}
   17570:	00024239 	.word	0x00024239
   17574:	000237c9 	.word	0x000237c9
   17578:	00024651 	.word	0x00024651

0001757c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1757c:	b538      	push	{r3, r4, r5, lr}
   1757e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   17580:	4604      	mov	r4, r0
   17582:	b958      	cbnz	r0, 1759c <net_buf_frag_insert+0x20>
   17584:	4910      	ldr	r1, [pc, #64]	; (175c8 <net_buf_frag_insert+0x4c>)
   17586:	4811      	ldr	r0, [pc, #68]	; (175cc <net_buf_frag_insert+0x50>)
   17588:	4a11      	ldr	r2, [pc, #68]	; (175d0 <net_buf_frag_insert+0x54>)
   1758a:	f240 2381 	movw	r3, #641	; 0x281
   1758e:	f008 fd20 	bl	1ffd2 <printk>
   17592:	480f      	ldr	r0, [pc, #60]	; (175d0 <net_buf_frag_insert+0x54>)
   17594:	f240 2181 	movw	r1, #641	; 0x281
   17598:	f008 ff75 	bl	20486 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1759c:	b95d      	cbnz	r5, 175b6 <net_buf_frag_insert+0x3a>
   1759e:	490d      	ldr	r1, [pc, #52]	; (175d4 <net_buf_frag_insert+0x58>)
   175a0:	480a      	ldr	r0, [pc, #40]	; (175cc <net_buf_frag_insert+0x50>)
   175a2:	4a0b      	ldr	r2, [pc, #44]	; (175d0 <net_buf_frag_insert+0x54>)
   175a4:	f240 2382 	movw	r3, #642	; 0x282
   175a8:	f008 fd13 	bl	1ffd2 <printk>
   175ac:	4808      	ldr	r0, [pc, #32]	; (175d0 <net_buf_frag_insert+0x54>)
   175ae:	f240 2182 	movw	r1, #642	; 0x282
   175b2:	f008 ff68 	bl	20486 <assert_post_action>

	if (parent->frags) {
   175b6:	6823      	ldr	r3, [r4, #0]
   175b8:	b123      	cbz	r3, 175c4 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
   175ba:	4628      	mov	r0, r5
   175bc:	f7ff ffc4 	bl	17548 <net_buf_frag_last>
   175c0:	6823      	ldr	r3, [r4, #0]
   175c2:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   175c4:	6025      	str	r5, [r4, #0]
}
   175c6:	bd38      	pop	{r3, r4, r5, pc}
   175c8:	000246d9 	.word	0x000246d9
   175cc:	000237c9 	.word	0x000237c9
   175d0:	00024651 	.word	0x00024651
   175d4:	000246e0 	.word	0x000246e0

000175d8 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   175d8:	b538      	push	{r3, r4, r5, lr}
   175da:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   175dc:	460d      	mov	r5, r1
   175de:	b959      	cbnz	r1, 175f8 <net_buf_frag_add+0x20>
   175e0:	490c      	ldr	r1, [pc, #48]	; (17614 <net_buf_frag_add+0x3c>)
   175e2:	480d      	ldr	r0, [pc, #52]	; (17618 <net_buf_frag_add+0x40>)
   175e4:	4a0d      	ldr	r2, [pc, #52]	; (1761c <net_buf_frag_add+0x44>)
   175e6:	f240 238d 	movw	r3, #653	; 0x28d
   175ea:	f008 fcf2 	bl	1ffd2 <printk>
   175ee:	480b      	ldr	r0, [pc, #44]	; (1761c <net_buf_frag_add+0x44>)
   175f0:	f240 218d 	movw	r1, #653	; 0x28d
   175f4:	f008 ff47 	bl	20486 <assert_post_action>

	if (!head) {
   175f8:	b924      	cbnz	r4, 17604 <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
   175fa:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   175fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   17600:	f7ff bf88 	b.w	17514 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   17604:	4620      	mov	r0, r4
   17606:	f7ff ff9f 	bl	17548 <net_buf_frag_last>
   1760a:	4629      	mov	r1, r5
   1760c:	f7ff ffb6 	bl	1757c <net_buf_frag_insert>
}
   17610:	4620      	mov	r0, r4
   17612:	bd38      	pop	{r3, r4, r5, pc}
   17614:	000246e0 	.word	0x000246e0
   17618:	000237c9 	.word	0x000237c9
   1761c:	00024651 	.word	0x00024651

00017620 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   17620:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   17622:	6882      	ldr	r2, [r0, #8]
   17624:	6803      	ldr	r3, [r0, #0]
   17626:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   17628:	4299      	cmp	r1, r3
{
   1762a:	4604      	mov	r4, r0
   1762c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1762e:	d90b      	bls.n	17648 <net_buf_simple_push+0x28>
   17630:	4909      	ldr	r1, [pc, #36]	; (17658 <net_buf_simple_push+0x38>)
   17632:	480a      	ldr	r0, [pc, #40]	; (1765c <net_buf_simple_push+0x3c>)
   17634:	4a0a      	ldr	r2, [pc, #40]	; (17660 <net_buf_simple_push+0x40>)
   17636:	f240 4311 	movw	r3, #1041	; 0x411
   1763a:	f008 fcca 	bl	1ffd2 <printk>
   1763e:	4808      	ldr	r0, [pc, #32]	; (17660 <net_buf_simple_push+0x40>)
   17640:	f240 4111 	movw	r1, #1041	; 0x411
   17644:	f008 ff1f 	bl	20486 <assert_post_action>
	buf->data -= len;
   17648:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1764a:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   1764c:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1764e:	440d      	add	r5, r1
	buf->data -= len;
   17650:	6020      	str	r0, [r4, #0]
	buf->len += len;
   17652:	80a5      	strh	r5, [r4, #4]
}
   17654:	bd38      	pop	{r3, r4, r5, pc}
   17656:	bf00      	nop
   17658:	000246f5 	.word	0x000246f5
   1765c:	000237c9 	.word	0x000237c9
   17660:	00024651 	.word	0x00024651

00017664 <net_buf_simple_pull>:
{
   17664:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   17666:	8883      	ldrh	r3, [r0, #4]
   17668:	428b      	cmp	r3, r1
{
   1766a:	4604      	mov	r4, r0
   1766c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1766e:	d20b      	bcs.n	17688 <net_buf_simple_pull+0x24>
   17670:	4909      	ldr	r1, [pc, #36]	; (17698 <net_buf_simple_pull+0x34>)
   17672:	480a      	ldr	r0, [pc, #40]	; (1769c <net_buf_simple_pull+0x38>)
   17674:	4a0a      	ldr	r2, [pc, #40]	; (176a0 <net_buf_simple_pull+0x3c>)
   17676:	f240 4371 	movw	r3, #1137	; 0x471
   1767a:	f008 fcaa 	bl	1ffd2 <printk>
   1767e:	4808      	ldr	r0, [pc, #32]	; (176a0 <net_buf_simple_pull+0x3c>)
   17680:	f240 4171 	movw	r1, #1137	; 0x471
   17684:	f008 feff 	bl	20486 <assert_post_action>
	buf->len -= len;
   17688:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1768a:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1768c:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1768e:	4428      	add	r0, r5
	buf->len -= len;
   17690:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   17692:	6020      	str	r0, [r4, #0]
}
   17694:	bd38      	pop	{r3, r4, r5, pc}
   17696:	bf00      	nop
   17698:	000246e5 	.word	0x000246e5
   1769c:	000237c9 	.word	0x000237c9
   176a0:	00024651 	.word	0x00024651

000176a4 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   176a4:	8883      	ldrh	r3, [r0, #4]
   176a6:	428b      	cmp	r3, r1
{
   176a8:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   176aa:	6806      	ldr	r6, [r0, #0]
{
   176ac:	4604      	mov	r4, r0
   176ae:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   176b0:	d20b      	bcs.n	176ca <net_buf_simple_pull_mem+0x26>
   176b2:	490a      	ldr	r1, [pc, #40]	; (176dc <net_buf_simple_pull_mem+0x38>)
   176b4:	480a      	ldr	r0, [pc, #40]	; (176e0 <net_buf_simple_pull_mem+0x3c>)
   176b6:	4a0b      	ldr	r2, [pc, #44]	; (176e4 <net_buf_simple_pull_mem+0x40>)
   176b8:	f240 437d 	movw	r3, #1149	; 0x47d
   176bc:	f008 fc89 	bl	1ffd2 <printk>
   176c0:	4808      	ldr	r0, [pc, #32]	; (176e4 <net_buf_simple_pull_mem+0x40>)
   176c2:	f240 417d 	movw	r1, #1149	; 0x47d
   176c6:	f008 fede 	bl	20486 <assert_post_action>
	buf->len -= len;
   176ca:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   176cc:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   176ce:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   176d0:	4429      	add	r1, r5
	buf->len -= len;
   176d2:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   176d4:	6021      	str	r1, [r4, #0]
}
   176d6:	4630      	mov	r0, r6
   176d8:	bd70      	pop	{r4, r5, r6, pc}
   176da:	bf00      	nop
   176dc:	000246e5 	.word	0x000246e5
   176e0:	000237c9 	.word	0x000237c9
   176e4:	00024651 	.word	0x00024651

000176e8 <net_buf_simple_add>:
{
   176e8:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   176ea:	6803      	ldr	r3, [r0, #0]
   176ec:	8886      	ldrh	r6, [r0, #4]
   176ee:	4604      	mov	r4, r0
   176f0:	460d      	mov	r5, r1
   176f2:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   176f4:	f00a ffa7 	bl	22646 <net_buf_simple_tailroom>
   176f8:	4288      	cmp	r0, r1
   176fa:	d20b      	bcs.n	17714 <net_buf_simple_add+0x2c>
   176fc:	4908      	ldr	r1, [pc, #32]	; (17720 <net_buf_simple_add+0x38>)
   176fe:	4809      	ldr	r0, [pc, #36]	; (17724 <net_buf_simple_add+0x3c>)
   17700:	4a09      	ldr	r2, [pc, #36]	; (17728 <net_buf_simple_add+0x40>)
   17702:	f240 3322 	movw	r3, #802	; 0x322
   17706:	f008 fc64 	bl	1ffd2 <printk>
   1770a:	4807      	ldr	r0, [pc, #28]	; (17728 <net_buf_simple_add+0x40>)
   1770c:	f240 3122 	movw	r1, #802	; 0x322
   17710:	f008 feb9 	bl	20486 <assert_post_action>
	buf->len += len;
   17714:	88a1      	ldrh	r1, [r4, #4]
   17716:	440d      	add	r5, r1
   17718:	80a5      	strh	r5, [r4, #4]
}
   1771a:	4630      	mov	r0, r6
   1771c:	bd70      	pop	{r4, r5, r6, pc}
   1771e:	bf00      	nop
   17720:	00024719 	.word	0x00024719
   17724:	000237c9 	.word	0x000237c9
   17728:	00024651 	.word	0x00024651

0001772c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1772c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   17730:	4c10      	ldr	r4, [pc, #64]	; (17774 <onoff_start+0x48>)
   17732:	1b07      	subs	r7, r0, r4
   17734:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   17738:	f04f 080c 	mov.w	r8, #12
   1773c:	fb08 f807 	mul.w	r8, r8, r7
{
   17740:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   17742:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
   17746:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   17748:	4420      	add	r0, r4
   1774a:	2140      	movs	r1, #64	; 0x40
   1774c:	f00a ff98 	bl	22680 <set_starting_state>
	if (err < 0) {
   17750:	1e01      	subs	r1, r0, #0
   17752:	db09      	blt.n	17768 <onoff_start+0x3c>
	subdata->cb = cb;
   17754:	4b08      	ldr	r3, [pc, #32]	; (17778 <onoff_start+0x4c>)
   17756:	4444      	add	r4, r8
	subdata->user_data = user_data;
   17758:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   1775c:	4b07      	ldr	r3, [pc, #28]	; (1777c <onoff_start+0x50>)
   1775e:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   17762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   17766:	4718      	bx	r3
		notify(mgr, err);
   17768:	4630      	mov	r0, r6
   1776a:	462b      	mov	r3, r5
}
   1776c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   17770:	4718      	bx	r3
   17772:	bf00      	nop
   17774:	200022e0 	.word	0x200022e0
   17778:	000226e3 	.word	0x000226e3
   1777c:	00023418 	.word	0x00023418

00017780 <get_status>:
{
   17780:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   17782:	b2cc      	uxtb	r4, r1
   17784:	2c01      	cmp	r4, #1
{
   17786:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   17788:	d909      	bls.n	1779e <get_status+0x1e>
   1778a:	4909      	ldr	r1, [pc, #36]	; (177b0 <get_status+0x30>)
   1778c:	4809      	ldr	r0, [pc, #36]	; (177b4 <get_status+0x34>)
   1778e:	4a0a      	ldr	r2, [pc, #40]	; (177b8 <get_status+0x38>)
   17790:	237e      	movs	r3, #126	; 0x7e
   17792:	f008 fc1e 	bl	1ffd2 <printk>
   17796:	4808      	ldr	r0, [pc, #32]	; (177b8 <get_status+0x38>)
   17798:	217e      	movs	r1, #126	; 0x7e
   1779a:	f008 fe74 	bl	20486 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1779e:	692b      	ldr	r3, [r5, #16]
   177a0:	210c      	movs	r1, #12
   177a2:	fb04 3401 	mla	r4, r4, r1, r3
   177a6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   177a8:	f000 0007 	and.w	r0, r0, #7
   177ac:	bd38      	pop	{r3, r4, r5, pc}
   177ae:	bf00      	nop
   177b0:	0002477a 	.word	0x0002477a
   177b4:	000237c9 	.word	0x000237c9
   177b8:	0002473d 	.word	0x0002473d

000177bc <stop>:
{
   177bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   177be:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   177c0:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   177c2:	6907      	ldr	r7, [r0, #16]
{
   177c4:	4605      	mov	r5, r0
   177c6:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   177c8:	d90b      	bls.n	177e2 <stop+0x26>
   177ca:	4918      	ldr	r1, [pc, #96]	; (1782c <stop+0x70>)
   177cc:	4818      	ldr	r0, [pc, #96]	; (17830 <stop+0x74>)
   177ce:	4a19      	ldr	r2, [pc, #100]	; (17834 <stop+0x78>)
   177d0:	f240 1353 	movw	r3, #339	; 0x153
   177d4:	f008 fbfd 	bl	1ffd2 <printk>
   177d8:	4816      	ldr	r0, [pc, #88]	; (17834 <stop+0x78>)
   177da:	f240 1153 	movw	r1, #339	; 0x153
   177de:	f008 fe52 	bl	20486 <assert_post_action>
	__asm__ volatile(
   177e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   177e6:	f3ef 8211 	mrs	r2, BASEPRI
   177ea:	f383 8812 	msr	BASEPRI_MAX, r3
   177ee:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   177f2:	230c      	movs	r3, #12
   177f4:	fb03 7104 	mla	r1, r3, r4, r7
   177f8:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   177fa:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   177fe:	d001      	beq.n	17804 <stop+0x48>
   17800:	428e      	cmp	r6, r1
   17802:	d110      	bne.n	17826 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   17804:	fb03 7304 	mla	r3, r3, r4, r7
   17808:	2101      	movs	r1, #1
   1780a:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
   1780c:	2000      	movs	r0, #0
	__asm__ volatile(
   1780e:	f382 8811 	msr	BASEPRI, r2
   17812:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   17816:	b928      	cbnz	r0, 17824 <stop+0x68>
	get_sub_config(dev, type)->stop();
   17818:	6869      	ldr	r1, [r5, #4]
   1781a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   1781e:	6863      	ldr	r3, [r4, #4]
   17820:	4798      	blx	r3
	return 0;
   17822:	2000      	movs	r0, #0
}
   17824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   17826:	f04f 30ff 	mov.w	r0, #4294967295
   1782a:	e7f0      	b.n	1780e <stop+0x52>
   1782c:	0002477a 	.word	0x0002477a
   17830:	000237c9 	.word	0x000237c9
   17834:	0002473d 	.word	0x0002473d

00017838 <onoff_stop>:
{
   17838:	b570      	push	{r4, r5, r6, lr}
   1783a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1783c:	4906      	ldr	r1, [pc, #24]	; (17858 <onoff_stop+0x20>)
   1783e:	1a41      	subs	r1, r0, r1
{
   17840:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   17842:	1149      	asrs	r1, r1, #5
   17844:	4805      	ldr	r0, [pc, #20]	; (1785c <onoff_stop+0x24>)
   17846:	2240      	movs	r2, #64	; 0x40
   17848:	f7ff ffb8 	bl	177bc <stop>
	notify(mgr, res);
   1784c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1784e:	4601      	mov	r1, r0
	notify(mgr, res);
   17850:	4620      	mov	r0, r4
}
   17852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   17856:	4718      	bx	r3
   17858:	200022e0 	.word	0x200022e0
   1785c:	00022d78 	.word	0x00022d78

00017860 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   17860:	2200      	movs	r2, #0
{
   17862:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   17864:	2101      	movs	r1, #1
{
   17866:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   17868:	4610      	mov	r0, r2
   1786a:	f7fa fef9 	bl	12660 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1786e:	2000      	movs	r0, #0
   17870:	f7fa fec4 	bl	125fc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   17874:	480f      	ldr	r0, [pc, #60]	; (178b4 <clk_init+0x54>)
   17876:	f001 fe3b 	bl	194f0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1787a:	4b0f      	ldr	r3, [pc, #60]	; (178b8 <clk_init+0x58>)
   1787c:	4298      	cmp	r0, r3
   1787e:	d115      	bne.n	178ac <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   17880:	f00b f84a 	bl	22918 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   17884:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   17886:	490d      	ldr	r1, [pc, #52]	; (178bc <clk_init+0x5c>)
   17888:	4630      	mov	r0, r6
   1788a:	f008 fbfd 	bl	20088 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1788e:	2800      	cmp	r0, #0
   17890:	db0b      	blt.n	178aa <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   17892:	2501      	movs	r5, #1
   17894:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   17896:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   17898:	4908      	ldr	r1, [pc, #32]	; (178bc <clk_init+0x5c>)
   1789a:	f104 0020 	add.w	r0, r4, #32
   1789e:	f008 fbf3 	bl	20088 <onoff_manager_init>
		if (err < 0) {
   178a2:	2800      	cmp	r0, #0
   178a4:	db01      	blt.n	178aa <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   178a6:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   178a8:	2000      	movs	r0, #0
}
   178aa:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   178ac:	f06f 0004 	mvn.w	r0, #4
   178b0:	e7fb      	b.n	178aa <clk_init+0x4a>
   178b2:	bf00      	nop
   178b4:	000178f5 	.word	0x000178f5
   178b8:	0bad0000 	.word	0x0bad0000
   178bc:	00023428 	.word	0x00023428

000178c0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   178c0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   178c2:	230c      	movs	r3, #12
   178c4:	4809      	ldr	r0, [pc, #36]	; (178ec <clkstarted_handle.constprop.0+0x2c>)
   178c6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   178c8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   178ca:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   178cc:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   178d0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   178d2:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   178d4:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   178d6:	4418      	add	r0, r3
   178d8:	f00a fef0 	bl	226bc <set_on_state>
	if (callback) {
   178dc:	b12d      	cbz	r5, 178ea <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   178de:	4632      	mov	r2, r6
   178e0:	462b      	mov	r3, r5
   178e2:	4803      	ldr	r0, [pc, #12]	; (178f0 <clkstarted_handle.constprop.0+0x30>)
}
   178e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   178e8:	4718      	bx	r3
}
   178ea:	bd70      	pop	{r4, r5, r6, pc}
   178ec:	200022e0 	.word	0x200022e0
   178f0:	00022d78 	.word	0x00022d78

000178f4 <clock_event_handler>:
	switch (event) {
   178f4:	2801      	cmp	r0, #1
{
   178f6:	b508      	push	{r3, lr}
	switch (event) {
   178f8:	d006      	beq.n	17908 <clock_event_handler+0x14>
   178fa:	2803      	cmp	r0, #3
   178fc:	d008      	beq.n	17910 <clock_event_handler+0x1c>
   178fe:	b9a8      	cbnz	r0, 1792c <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   17900:	4b10      	ldr	r3, [pc, #64]	; (17944 <clock_event_handler+0x50>)
   17902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   17904:	075b      	lsls	r3, r3, #29
   17906:	d11b      	bne.n	17940 <clock_event_handler+0x4c>
}
   17908:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1790c:	f7ff bfd8 	b.w	178c0 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   17910:	490d      	ldr	r1, [pc, #52]	; (17948 <clock_event_handler+0x54>)
   17912:	4a0e      	ldr	r2, [pc, #56]	; (1794c <clock_event_handler+0x58>)
   17914:	480e      	ldr	r0, [pc, #56]	; (17950 <clock_event_handler+0x5c>)
   17916:	f240 2366 	movw	r3, #614	; 0x266
   1791a:	f008 fb5a 	bl	1ffd2 <printk>
   1791e:	f240 2166 	movw	r1, #614	; 0x266
}
   17922:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   17926:	4809      	ldr	r0, [pc, #36]	; (1794c <clock_event_handler+0x58>)
   17928:	f008 bdad 	b.w	20486 <assert_post_action>
   1792c:	4906      	ldr	r1, [pc, #24]	; (17948 <clock_event_handler+0x54>)
   1792e:	4a07      	ldr	r2, [pc, #28]	; (1794c <clock_event_handler+0x58>)
   17930:	4807      	ldr	r0, [pc, #28]	; (17950 <clock_event_handler+0x5c>)
   17932:	f240 236a 	movw	r3, #618	; 0x26a
   17936:	f008 fb4c 	bl	1ffd2 <printk>
   1793a:	f240 216a 	movw	r1, #618	; 0x26a
   1793e:	e7f0      	b.n	17922 <clock_event_handler+0x2e>
}
   17940:	bd08      	pop	{r3, pc}
   17942:	bf00      	nop
   17944:	200022e0 	.word	0x200022e0
   17948:	00025541 	.word	0x00025541
   1794c:	0002473d 	.word	0x0002473d
   17950:	000237c9 	.word	0x000237c9

00017954 <generic_hfclk_start>:
{
   17954:	b508      	push	{r3, lr}
	__asm__ volatile(
   17956:	f04f 0340 	mov.w	r3, #64	; 0x40
   1795a:	f3ef 8111 	mrs	r1, BASEPRI
   1795e:	f383 8812 	msr	BASEPRI_MAX, r3
   17962:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   17966:	4a12      	ldr	r2, [pc, #72]	; (179b0 <generic_hfclk_start+0x5c>)
   17968:	6813      	ldr	r3, [r2, #0]
   1796a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1796e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   17972:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   17974:	d00c      	beq.n	17990 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   17976:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1797a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1797e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   17982:	f013 0301 	ands.w	r3, r3, #1
   17986:	d003      	beq.n	17990 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   17988:	480a      	ldr	r0, [pc, #40]	; (179b4 <generic_hfclk_start+0x60>)
   1798a:	f00a fe97 	bl	226bc <set_on_state>
			already_started = true;
   1798e:	2301      	movs	r3, #1
	__asm__ volatile(
   17990:	f381 8811 	msr	BASEPRI, r1
   17994:	f3bf 8f6f 	isb	sy
	if (already_started) {
   17998:	b123      	cbz	r3, 179a4 <generic_hfclk_start+0x50>
}
   1799a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1799e:	2000      	movs	r0, #0
   179a0:	f7ff bf8e 	b.w	178c0 <clkstarted_handle.constprop.0>
}
   179a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   179a8:	2001      	movs	r0, #1
   179aa:	f001 bd57 	b.w	1945c <nrfx_clock_start>
   179ae:	bf00      	nop
   179b0:	20002338 	.word	0x20002338
   179b4:	20002328 	.word	0x20002328

000179b8 <generic_hfclk_stop>:
   179b8:	4b09      	ldr	r3, [pc, #36]	; (179e0 <generic_hfclk_stop+0x28>)
   179ba:	f3bf 8f5b 	dmb	ish
   179be:	e853 2f00 	ldrex	r2, [r3]
   179c2:	f022 0102 	bic.w	r1, r2, #2
   179c6:	e843 1000 	strex	r0, r1, [r3]
   179ca:	2800      	cmp	r0, #0
   179cc:	d1f7      	bne.n	179be <generic_hfclk_stop+0x6>
   179ce:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   179d2:	07d3      	lsls	r3, r2, #31
   179d4:	d402      	bmi.n	179dc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   179d6:	2001      	movs	r0, #1
   179d8:	f001 bd6a 	b.w	194b0 <nrfx_clock_stop>
}
   179dc:	4770      	bx	lr
   179de:	bf00      	nop
   179e0:	20002338 	.word	0x20002338

000179e4 <api_blocking_start>:
{
   179e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   179e6:	2200      	movs	r2, #0
   179e8:	2301      	movs	r3, #1
   179ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
   179ee:	ab04      	add	r3, sp, #16
   179f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   179f4:	4a09      	ldr	r2, [pc, #36]	; (17a1c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   179f6:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   179fa:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   179fc:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   17a00:	f00a fe81 	bl	22706 <api_start>
	if (err < 0) {
   17a04:	2800      	cmp	r0, #0
   17a06:	db05      	blt.n	17a14 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   17a08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   17a0c:	2300      	movs	r3, #0
   17a0e:	4668      	mov	r0, sp
   17a10:	f002 ff78 	bl	1a904 <z_impl_k_sem_take>
}
   17a14:	b007      	add	sp, #28
   17a16:	f85d fb04 	ldr.w	pc, [sp], #4
   17a1a:	bf00      	nop
   17a1c:	00022701 	.word	0x00022701

00017a20 <z_nrf_clock_control_lf_on>:
{
   17a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17a24:	4949      	ldr	r1, [pc, #292]	; (17b4c <z_nrf_clock_control_lf_on+0x12c>)
   17a26:	f3bf 8f5b 	dmb	ish
   17a2a:	4605      	mov	r5, r0
   17a2c:	2201      	movs	r2, #1
   17a2e:	e851 3f00 	ldrex	r3, [r1]
   17a32:	e841 2000 	strex	r0, r2, [r1]
   17a36:	2800      	cmp	r0, #0
   17a38:	d1f9      	bne.n	17a2e <z_nrf_clock_control_lf_on+0xe>
   17a3a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   17a3e:	b9a3      	cbnz	r3, 17a6a <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   17a40:	4943      	ldr	r1, [pc, #268]	; (17b50 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
   17a42:	4844      	ldr	r0, [pc, #272]	; (17b54 <z_nrf_clock_control_lf_on+0x134>)
   17a44:	604b      	str	r3, [r1, #4]
   17a46:	60cb      	str	r3, [r1, #12]
   17a48:	608a      	str	r2, [r1, #8]
   17a4a:	f7f9 fb09 	bl	11060 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   17a4e:	2800      	cmp	r0, #0
   17a50:	da0b      	bge.n	17a6a <z_nrf_clock_control_lf_on+0x4a>
   17a52:	4941      	ldr	r1, [pc, #260]	; (17b58 <z_nrf_clock_control_lf_on+0x138>)
   17a54:	4841      	ldr	r0, [pc, #260]	; (17b5c <z_nrf_clock_control_lf_on+0x13c>)
   17a56:	4a42      	ldr	r2, [pc, #264]	; (17b60 <z_nrf_clock_control_lf_on+0x140>)
   17a58:	f240 2326 	movw	r3, #550	; 0x226
   17a5c:	f008 fab9 	bl	1ffd2 <printk>
   17a60:	483f      	ldr	r0, [pc, #252]	; (17b60 <z_nrf_clock_control_lf_on+0x140>)
   17a62:	f240 2126 	movw	r1, #550	; 0x226
   17a66:	f008 fd0e 	bl	20486 <assert_post_action>
	switch (start_mode) {
   17a6a:	b3ad      	cbz	r5, 17ad8 <z_nrf_clock_control_lf_on+0xb8>
   17a6c:	1e6b      	subs	r3, r5, #1
   17a6e:	2b01      	cmp	r3, #1
   17a70:	d856      	bhi.n	17b20 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   17a72:	2d01      	cmp	r5, #1
   17a74:	d107      	bne.n	17a86 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   17a76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17a7a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   17a7e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   17a82:	2b01      	cmp	r3, #1
   17a84:	d028      	beq.n	17ad8 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   17a86:	f00a ff85 	bl	22994 <k_is_in_isr>
   17a8a:	4604      	mov	r4, r0
   17a8c:	b918      	cbnz	r0, 17a96 <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
   17a8e:	4b35      	ldr	r3, [pc, #212]	; (17b64 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
   17a90:	781b      	ldrb	r3, [r3, #0]
   17a92:	2b00      	cmp	r3, #0
   17a94:	d152      	bne.n	17b3c <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
   17a96:	f04f 0340 	mov.w	r3, #64	; 0x40
   17a9a:	f3ef 8611 	mrs	r6, BASEPRI
   17a9e:	f383 8812 	msr	BASEPRI_MAX, r3
   17aa2:	f3bf 8f6f 	isb	sy
   17aa6:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   17aa8:	4f2f      	ldr	r7, [pc, #188]	; (17b68 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17aaa:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 17b70 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17aae:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 17b74 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   17ab2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   17ab6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   17aba:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   17abe:	03d2      	lsls	r2, r2, #15
   17ac0:	d50c      	bpl.n	17adc <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   17ac2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   17ac6:	2b01      	cmp	r3, #1
   17ac8:	d001      	beq.n	17ace <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   17aca:	2d01      	cmp	r5, #1
   17acc:	d106      	bne.n	17adc <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
   17ace:	b30c      	cbz	r4, 17b14 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
   17ad0:	f386 8811 	msr	BASEPRI, r6
   17ad4:	f3bf 8f6f 	isb	sy
}
   17ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   17adc:	b1ac      	cbz	r4, 17b0a <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   17ade:	4630      	mov	r0, r6
   17ae0:	f7fa fd82 	bl	125e8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   17ae4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   17ae8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   17aec:	2b00      	cmp	r3, #0
   17aee:	d1e0      	bne.n	17ab2 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   17af0:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   17af2:	2900      	cmp	r1, #0
   17af4:	d0dd      	beq.n	17ab2 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17af6:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   17af8:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   17afa:	2301      	movs	r3, #1
   17afc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   17b00:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17b04:	f8c9 3000 	str.w	r3, [r9]
}
   17b08:	e7d3      	b.n	17ab2 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
   17b0a:	2100      	movs	r1, #0
   17b0c:	2021      	movs	r0, #33	; 0x21
   17b0e:	f004 fcdd 	bl	1c4cc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   17b12:	e7e7      	b.n	17ae4 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
   17b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17b18:	2202      	movs	r2, #2
   17b1a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   17b1e:	e7db      	b.n	17ad8 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
   17b20:	4912      	ldr	r1, [pc, #72]	; (17b6c <z_nrf_clock_control_lf_on+0x14c>)
   17b22:	480e      	ldr	r0, [pc, #56]	; (17b5c <z_nrf_clock_control_lf_on+0x13c>)
   17b24:	4a0e      	ldr	r2, [pc, #56]	; (17b60 <z_nrf_clock_control_lf_on+0x140>)
   17b26:	f44f 730e 	mov.w	r3, #568	; 0x238
   17b2a:	f008 fa52 	bl	1ffd2 <printk>
}
   17b2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   17b32:	480b      	ldr	r0, [pc, #44]	; (17b60 <z_nrf_clock_control_lf_on+0x140>)
   17b34:	f44f 710e 	mov.w	r1, #568	; 0x238
   17b38:	f008 bca5 	b.w	20486 <assert_post_action>
    p_reg->INTENCLR = mask;
   17b3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17b40:	2202      	movs	r2, #2
   17b42:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   17b46:	4606      	mov	r6, r0
}
   17b48:	e7ae      	b.n	17aa8 <z_nrf_clock_control_lf_on+0x88>
   17b4a:	bf00      	nop
   17b4c:	2000233c 	.word	0x2000233c
   17b50:	200022d0 	.word	0x200022d0
   17b54:	20002300 	.word	0x20002300
   17b58:	0002479e 	.word	0x0002479e
   17b5c:	000237c9 	.word	0x000237c9
   17b60:	0002473d 	.word	0x0002473d
   17b64:	200032c2 	.word	0x200032c2
   17b68:	40000104 	.word	0x40000104
   17b6c:	00025541 	.word	0x00025541
   17b70:	e000e100 	.word	0xe000e100
   17b74:	40000008 	.word	0x40000008

00017b78 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   17b78:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   17b7a:	6905      	ldr	r5, [r0, #16]
{
   17b7c:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   17b7e:	460c      	mov	r4, r1
   17b80:	b961      	cbnz	r1, 17b9c <gpio_nrfx_manage_callback+0x24>
   17b82:	4922      	ldr	r1, [pc, #136]	; (17c0c <gpio_nrfx_manage_callback+0x94>)
   17b84:	4a22      	ldr	r2, [pc, #136]	; (17c10 <gpio_nrfx_manage_callback+0x98>)
   17b86:	4823      	ldr	r0, [pc, #140]	; (17c14 <gpio_nrfx_manage_callback+0x9c>)
   17b88:	2324      	movs	r3, #36	; 0x24
   17b8a:	f008 fa22 	bl	1ffd2 <printk>
   17b8e:	4822      	ldr	r0, [pc, #136]	; (17c18 <gpio_nrfx_manage_callback+0xa0>)
   17b90:	f008 fa1f 	bl	1ffd2 <printk>
   17b94:	481e      	ldr	r0, [pc, #120]	; (17c10 <gpio_nrfx_manage_callback+0x98>)
   17b96:	2124      	movs	r1, #36	; 0x24
   17b98:	f008 fc75 	bl	20486 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   17b9c:	6863      	ldr	r3, [r4, #4]
   17b9e:	b963      	cbnz	r3, 17bba <gpio_nrfx_manage_callback+0x42>
   17ba0:	491e      	ldr	r1, [pc, #120]	; (17c1c <gpio_nrfx_manage_callback+0xa4>)
   17ba2:	4a1b      	ldr	r2, [pc, #108]	; (17c10 <gpio_nrfx_manage_callback+0x98>)
   17ba4:	481b      	ldr	r0, [pc, #108]	; (17c14 <gpio_nrfx_manage_callback+0x9c>)
   17ba6:	2325      	movs	r3, #37	; 0x25
   17ba8:	f008 fa13 	bl	1ffd2 <printk>
   17bac:	481c      	ldr	r0, [pc, #112]	; (17c20 <gpio_nrfx_manage_callback+0xa8>)
   17bae:	f008 fa10 	bl	1ffd2 <printk>
   17bb2:	4817      	ldr	r0, [pc, #92]	; (17c10 <gpio_nrfx_manage_callback+0x98>)
   17bb4:	2125      	movs	r1, #37	; 0x25
   17bb6:	f008 fc66 	bl	20486 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   17bba:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   17bbc:	b15b      	cbz	r3, 17bd6 <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17bbe:	2200      	movs	r2, #0
   17bc0:	429c      	cmp	r4, r3
   17bc2:	d113      	bne.n	17bec <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   17bc4:	6823      	ldr	r3, [r4, #0]
   17bc6:	b95a      	cbnz	r2, 17be0 <gpio_nrfx_manage_callback+0x68>
   17bc8:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   17bca:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   17bcc:	4294      	cmp	r4, r2
   17bce:	d100      	bne.n	17bd2 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   17bd0:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   17bd2:	2300      	movs	r3, #0
   17bd4:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   17bd6:	b976      	cbnz	r6, 17bf6 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   17bd8:	2000      	movs	r0, #0
				     callback, set);
}
   17bda:	bd70      	pop	{r4, r5, r6, pc}
   17bdc:	460b      	mov	r3, r1
   17bde:	e7ef      	b.n	17bc0 <gpio_nrfx_manage_callback+0x48>
   17be0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   17be2:	68ab      	ldr	r3, [r5, #8]
   17be4:	429c      	cmp	r4, r3
	list->tail = node;
   17be6:	bf08      	it	eq
   17be8:	60aa      	streq	r2, [r5, #8]
}
   17bea:	e7f2      	b.n	17bd2 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17bec:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17bee:	461a      	mov	r2, r3
   17bf0:	2900      	cmp	r1, #0
   17bf2:	d1f3      	bne.n	17bdc <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   17bf4:	b13e      	cbz	r6, 17c06 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   17bf6:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   17bf8:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   17bfa:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   17bfc:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   17bfe:	2800      	cmp	r0, #0
   17c00:	d1ea      	bne.n	17bd8 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   17c02:	60ac      	str	r4, [r5, #8]
}
   17c04:	e7e9      	b.n	17bda <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   17c06:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   17c0a:	e7e6      	b.n	17bda <gpio_nrfx_manage_callback+0x62>
   17c0c:	000247da 	.word	0x000247da
   17c10:	000247ad 	.word	0x000247ad
   17c14:	000237c9 	.word	0x000237c9
   17c18:	000247e3 	.word	0x000247e3
   17c1c:	000247f2 	.word	0x000247f2
   17c20:	00024804 	.word	0x00024804

00017c24 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   17c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17c28:	6804      	ldr	r4, [r0, #0]
{
   17c2a:	460f      	mov	r7, r1
   17c2c:	4616      	mov	r6, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17c2e:	b34c      	cbz	r4, 17c84 <gpio_fire_callbacks+0x60>
	return node->next;
   17c30:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   17c32:	f8df 8058 	ldr.w	r8, [pc, #88]	; 17c8c <gpio_fire_callbacks+0x68>
   17c36:	f8df 9058 	ldr.w	r9, [pc, #88]	; 17c90 <gpio_fire_callbacks+0x6c>
   17c3a:	f8df a058 	ldr.w	sl, [pc, #88]	; 17c94 <gpio_fire_callbacks+0x70>
   17c3e:	2d00      	cmp	r5, #0
   17c40:	bf38      	it	cc
   17c42:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   17c44:	68a3      	ldr	r3, [r4, #8]
   17c46:	421e      	tst	r6, r3
   17c48:	d014      	beq.n	17c74 <gpio_fire_callbacks+0x50>
			__ASSERT(cb->handler, "No callback handler!");
   17c4a:	6863      	ldr	r3, [r4, #4]
   17c4c:	b963      	cbnz	r3, 17c68 <gpio_fire_callbacks+0x44>
   17c4e:	4649      	mov	r1, r9
   17c50:	2345      	movs	r3, #69	; 0x45
   17c52:	4642      	mov	r2, r8
   17c54:	4650      	mov	r0, sl
   17c56:	f008 f9bc 	bl	1ffd2 <printk>
   17c5a:	480b      	ldr	r0, [pc, #44]	; (17c88 <gpio_fire_callbacks+0x64>)
   17c5c:	f008 f9b9 	bl	1ffd2 <printk>
   17c60:	2145      	movs	r1, #69	; 0x45
   17c62:	4640      	mov	r0, r8
   17c64:	f008 fc0f 	bl	20486 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   17c68:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   17c6c:	4621      	mov	r1, r4
   17c6e:	4032      	ands	r2, r6
   17c70:	4638      	mov	r0, r7
   17c72:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17c74:	b135      	cbz	r5, 17c84 <gpio_fire_callbacks+0x60>
   17c76:	682b      	ldr	r3, [r5, #0]
   17c78:	2b00      	cmp	r3, #0
   17c7a:	bf38      	it	cc
   17c7c:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17c7e:	462c      	mov	r4, r5
   17c80:	461d      	mov	r5, r3
   17c82:	e7df      	b.n	17c44 <gpio_fire_callbacks+0x20>
		}
	}
}
   17c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17c88:	00024804 	.word	0x00024804
   17c8c:	000247ad 	.word	0x000247ad
   17c90:	0002481b 	.word	0x0002481b
   17c94:	000237c9 	.word	0x000237c9

00017c98 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   17c98:	6802      	ldr	r2, [r0, #0]
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   17c9a:	0953      	lsrs	r3, r2, #5
{
   17c9c:	b510      	push	{r4, lr}
   17c9e:	4604      	mov	r4, r0
    switch (port)
   17ca0:	d02c      	beq.n	17cfc <nrf_gpio_pin_port_decode+0x64>
   17ca2:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   17ca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17ca8:	bf18      	it	ne
   17caa:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   17cac:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   17cb0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   17cb2:	07db      	lsls	r3, r3, #31
   17cb4:	d40b      	bmi.n	17cce <nrf_gpio_pin_port_decode+0x36>
   17cb6:	4914      	ldr	r1, [pc, #80]	; (17d08 <nrf_gpio_pin_port_decode+0x70>)
   17cb8:	4814      	ldr	r0, [pc, #80]	; (17d0c <nrf_gpio_pin_port_decode+0x74>)
   17cba:	4a15      	ldr	r2, [pc, #84]	; (17d10 <nrf_gpio_pin_port_decode+0x78>)
   17cbc:	f44f 7305 	mov.w	r3, #532	; 0x214
   17cc0:	f008 f987 	bl	1ffd2 <printk>
   17cc4:	4812      	ldr	r0, [pc, #72]	; (17d10 <nrf_gpio_pin_port_decode+0x78>)
   17cc6:	f44f 7105 	mov.w	r1, #532	; 0x214
   17cca:	f008 fbdc 	bl	20486 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   17cce:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   17cd0:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17cd4:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   17cd6:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17cd8:	d00d      	beq.n	17cf6 <nrf_gpio_pin_port_decode+0x5e>
   17cda:	2b01      	cmp	r3, #1
   17cdc:	d011      	beq.n	17d02 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
   17cde:	490d      	ldr	r1, [pc, #52]	; (17d14 <nrf_gpio_pin_port_decode+0x7c>)
   17ce0:	480a      	ldr	r0, [pc, #40]	; (17d0c <nrf_gpio_pin_port_decode+0x74>)
   17ce2:	4a0b      	ldr	r2, [pc, #44]	; (17d10 <nrf_gpio_pin_port_decode+0x78>)
   17ce4:	f240 2319 	movw	r3, #537	; 0x219
   17ce8:	f008 f973 	bl	1ffd2 <printk>
   17cec:	4808      	ldr	r0, [pc, #32]	; (17d10 <nrf_gpio_pin_port_decode+0x78>)
   17cee:	f240 2119 	movw	r1, #537	; 0x219
   17cf2:	f008 fbc8 	bl	20486 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17cf6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   17cfa:	bd10      	pop	{r4, pc}
    switch (port)
   17cfc:	f04f 33ff 	mov.w	r3, #4294967295
   17d00:	e7d4      	b.n	17cac <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   17d02:	4805      	ldr	r0, [pc, #20]	; (17d18 <nrf_gpio_pin_port_decode+0x80>)
   17d04:	e7f9      	b.n	17cfa <nrf_gpio_pin_port_decode+0x62>
   17d06:	bf00      	nop
   17d08:	0002485a 	.word	0x0002485a
   17d0c:	000237c9 	.word	0x000237c9
   17d10:	00024827 	.word	0x00024827
   17d14:	00025541 	.word	0x00025541
   17d18:	50000300 	.word	0x50000300

00017d1c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   17d1c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   17d1e:	4b09      	ldr	r3, [pc, #36]	; (17d44 <gpio_nrfx_init+0x28>)
   17d20:	781a      	ldrb	r2, [r3, #0]
   17d22:	b96a      	cbnz	r2, 17d40 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   17d24:	2101      	movs	r1, #1
   17d26:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   17d28:	2006      	movs	r0, #6
   17d2a:	2105      	movs	r1, #5
   17d2c:	f7fa fc98 	bl	12660 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   17d30:	2006      	movs	r0, #6
   17d32:	f7fa fc63 	bl	125fc <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   17d36:	4b04      	ldr	r3, [pc, #16]	; (17d48 <gpio_nrfx_init+0x2c>)
   17d38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   17d3c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   17d40:	2000      	movs	r0, #0
   17d42:	bd08      	pop	{r3, pc}
   17d44:	20002dae 	.word	0x20002dae
   17d48:	40006000 	.word	0x40006000

00017d4c <gpio_nrfx_pin_interrupt_configure>:
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   17d4c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   17d50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   17d54:	6904      	ldr	r4, [r0, #16]
{
   17d56:	4607      	mov	r7, r0
   17d58:	460e      	mov	r6, r1
   17d5a:	4690      	mov	r8, r2
   17d5c:	4699      	mov	r9, r3
   17d5e:	f001 051f 	and.w	r5, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   17d62:	f040 80ab 	bne.w	17ebc <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   17d66:	6843      	ldr	r3, [r0, #4]
   17d68:	7a1b      	ldrb	r3, [r3, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17d6a:	a801      	add	r0, sp, #4
   17d6c:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   17d70:	9301      	str	r3, [sp, #4]
   17d72:	f7ff ff91 	bl	17c98 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   17d76:	9b01      	ldr	r3, [sp, #4]
   17d78:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17d7c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   17d80:	07d8      	lsls	r0, r3, #31
   17d82:	f100 80bb 	bmi.w	17efc <gpio_nrfx_pin_interrupt_configure+0x1b0>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   17d86:	68e3      	ldr	r3, [r4, #12]
   17d88:	2101      	movs	r1, #1
   17d8a:	40b1      	lsls	r1, r6
   17d8c:	4319      	orrs	r1, r3
   17d8e:	6963      	ldr	r3, [r4, #20]
   17d90:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   17d92:	2101      	movs	r1, #1
   17d94:	40b1      	lsls	r1, r6
   17d96:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   17d9a:	bf0c      	ite	eq
   17d9c:	430b      	orreq	r3, r1
   17d9e:	438b      	bicne	r3, r1
   17da0:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   17da2:	69a3      	ldr	r3, [r4, #24]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   17da4:	4a57      	ldr	r2, [pc, #348]	; (17f04 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
	struct gpio_nrfx_data *data = get_port_data(port);
   17da6:	f8d7 8010 	ldr.w	r8, [r7, #16]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   17daa:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   17dae:	bf0c      	ite	eq
   17db0:	430b      	orreq	r3, r1
   17db2:	438b      	bicne	r3, r1
   17db4:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   17db6:	6923      	ldr	r3, [r4, #16]
   17db8:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   17dbc:	bf0c      	ite	eq
   17dbe:	4319      	orreq	r1, r3
   17dc0:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17dc4:	687b      	ldr	r3, [r7, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   17dc6:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17dc8:	7a1b      	ldrb	r3, [r3, #8]
   17dca:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   17dce:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   17dd2:	2000      	movs	r0, #0
   17dd4:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17dd6:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   17dda:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   17dde:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   17de2:	428d      	cmp	r5, r1
   17de4:	d175      	bne.n	17ed2 <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   17de6:	fa23 f100 	lsr.w	r1, r3, r0
   17dea:	07c9      	lsls	r1, r1, #31
   17dec:	d571      	bpl.n	17ed2 <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   17dee:	0083      	lsls	r3, r0, #2
   17df0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17df4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   17df8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   17dfc:	f021 0101 	bic.w	r1, r1, #1
   17e00:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   17e04:	2301      	movs	r3, #1
   17e06:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   17e08:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   17e0c:	b2c0      	uxtb	r0, r0
   17e0e:	f001 fc9f 	bl	19750 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   17e12:	4628      	mov	r0, r5
   17e14:	2100      	movs	r1, #0
   17e16:	f00a fcb8 	bl	2278a <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   17e1a:	f8d8 000c 	ldr.w	r0, [r8, #12]
   17e1e:	40f0      	lsrs	r0, r6
   17e20:	f010 0001 	ands.w	r0, r0, #1
   17e24:	d047      	beq.n	17eb6 <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   17e26:	f8d8 0014 	ldr.w	r0, [r8, #20]
   17e2a:	40f0      	lsrs	r0, r6
   17e2c:	f010 0401 	ands.w	r4, r0, #1
   17e30:	d057      	beq.n	17ee2 <gpio_nrfx_pin_interrupt_configure+0x196>
				if (data->double_edge & BIT(pin)) {
   17e32:	f8d8 3018 	ldr.w	r3, [r8, #24]
   17e36:	40f3      	lsrs	r3, r6
   17e38:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   17e3a:	bf5f      	itttt	pl
   17e3c:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   17e40:	fa21 f606 	lsrpl.w	r6, r1, r6
   17e44:	f006 0601 	andpl.w	r6, r6, #1
   17e48:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   17e4c:	a801      	add	r0, sp, #4
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   17e4e:	bf54      	ite	pl
   17e50:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   17e52:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   17e54:	f001 fc9e 	bl	19794 <nrfx_gpiote_channel_alloc>
   17e58:	4b2b      	ldr	r3, [pc, #172]	; (17f08 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   17e5a:	4298      	cmp	r0, r3
   17e5c:	d13e      	bne.n	17edc <gpio_nrfx_pin_interrupt_configure+0x190>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   17e5e:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   17e62:	008b      	lsls	r3, r1, #2
   17e64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17e68:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17e6c:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   17e6e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   17e72:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   17e76:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   17e7a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17e7e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   17e82:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   17e86:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   17e88:	008a      	lsls	r2, r1, #2
   17e8a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17e8e:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17e92:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17e96:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17e98:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17e9c:	6010      	str	r0, [r2, #0]
   17e9e:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   17ea0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   17ea4:	f042 0201 	orr.w	r2, r2, #1
   17ea8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   17eac:	4a15      	ldr	r2, [pc, #84]	; (17f04 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   17eae:	2301      	movs	r3, #1
   17eb0:	408b      	lsls	r3, r1
   17eb2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   17eb6:	b003      	add	sp, #12
   17eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   17ebc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   17ec0:	f47f af61 	bne.w	17d86 <gpio_nrfx_pin_interrupt_configure+0x3a>
   17ec4:	2101      	movs	r1, #1
   17ec6:	fa01 f306 	lsl.w	r3, r1, r6
   17eca:	68e1      	ldr	r1, [r4, #12]
   17ecc:	ea21 0103 	bic.w	r1, r1, r3
   17ed0:	e75d      	b.n	17d8e <gpio_nrfx_pin_interrupt_configure+0x42>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   17ed2:	3001      	adds	r0, #1
   17ed4:	2808      	cmp	r0, #8
   17ed6:	f47f af7e 	bne.w	17dd6 <gpio_nrfx_pin_interrupt_configure+0x8a>
   17eda:	e79a      	b.n	17e12 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   17edc:	f06f 0012 	mvn.w	r0, #18
   17ee0:	e7e9      	b.n	17eb6 <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   17ee2:	f8d8 1010 	ldr.w	r1, [r8, #16]
   17ee6:	40f1      	lsrs	r1, r6
   17ee8:	f001 0101 	and.w	r1, r1, #1
   17eec:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   17ef0:	4628      	mov	r0, r5
   17ef2:	b2c9      	uxtb	r1, r1
   17ef4:	f00a fc49 	bl	2278a <nrf_gpio_cfg_sense_set>
	int res = 0;
   17ef8:	4620      	mov	r0, r4
   17efa:	e7dc      	b.n	17eb6 <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   17efc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17f00:	e7d9      	b.n	17eb6 <gpio_nrfx_pin_interrupt_configure+0x16a>
   17f02:	bf00      	nop
   17f04:	40006000 	.word	0x40006000
   17f08:	0bad0000 	.word	0x0bad0000

00017f0c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17f0c:	4b2e      	ldr	r3, [pc, #184]	; (17fc8 <gpio_nrfx_config+0xbc>)
{
   17f0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17f10:	4c2e      	ldr	r4, [pc, #184]	; (17fcc <gpio_nrfx_config+0xc0>)
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17f12:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17f14:	4013      	ands	r3, r2
   17f16:	42a3      	cmp	r3, r4
   17f18:	d045      	beq.n	17fa6 <gpio_nrfx_config+0x9a>
   17f1a:	d80e      	bhi.n	17f3a <gpio_nrfx_config+0x2e>
   17f1c:	2b06      	cmp	r3, #6
   17f1e:	d044      	beq.n	17faa <gpio_nrfx_config+0x9e>
   17f20:	d806      	bhi.n	17f30 <gpio_nrfx_config+0x24>
   17f22:	2b00      	cmp	r3, #0
   17f24:	d041      	beq.n	17faa <gpio_nrfx_config+0x9e>
   17f26:	2b02      	cmp	r3, #2
   17f28:	d041      	beq.n	17fae <gpio_nrfx_config+0xa2>
   17f2a:	f06f 0015 	mvn.w	r0, #21
   17f2e:	e038      	b.n	17fa2 <gpio_nrfx_config+0x96>
   17f30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   17f34:	d1f9      	bne.n	17f2a <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   17f36:	2401      	movs	r4, #1
   17f38:	e009      	b.n	17f4e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17f3a:	4c25      	ldr	r4, [pc, #148]	; (17fd0 <gpio_nrfx_config+0xc4>)
   17f3c:	42a3      	cmp	r3, r4
   17f3e:	d038      	beq.n	17fb2 <gpio_nrfx_config+0xa6>
   17f40:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   17f44:	d037      	beq.n	17fb6 <gpio_nrfx_config+0xaa>
   17f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   17f4a:	d1ee      	bne.n	17f2a <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   17f4c:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   17f4e:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   17f50:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_NOPULL;
   17f54:	bf54      	ite	pl
   17f56:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   17f5a:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   17f5c:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   17f60:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   17f62:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   17f66:	d507      	bpl.n	17f78 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   17f68:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17f6a:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   17f6e:	d524      	bpl.n	17fba <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
   17f70:	2301      	movs	r3, #1
   17f72:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   17f74:	f8cc 3508 	str.w	r3, [ip, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   17f78:	7a03      	ldrb	r3, [r0, #8]
   17f7a:	f001 011f 	and.w	r1, r1, #31
   17f7e:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17f82:	a801      	add	r0, sp, #4
   17f84:	9101      	str	r1, [sp, #4]
   17f86:	f7ff fe87 	bl	17c98 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   17f8a:	9a01      	ldr	r2, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   17f8c:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   17f90:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   17f94:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   17f98:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   17f9c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   17fa0:	2000      	movs	r0, #0
}
   17fa2:	b003      	add	sp, #12
   17fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   17fa6:	2407      	movs	r4, #7
   17fa8:	e7d1      	b.n	17f4e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17faa:	461c      	mov	r4, r3
   17fac:	e7cf      	b.n	17f4e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   17fae:	2404      	movs	r4, #4
   17fb0:	e7cd      	b.n	17f4e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   17fb2:	2405      	movs	r4, #5
   17fb4:	e7cb      	b.n	17f4e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   17fb6:	2403      	movs	r4, #3
   17fb8:	e7c9      	b.n	17f4e <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   17fba:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   17fbc:	bf42      	ittt	mi
   17fbe:	2301      	movmi	r3, #1
   17fc0:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   17fc2:	f8cc 350c 	strmi.w	r3, [ip, #1292]	; 0x50c
}
   17fc6:	e7d7      	b.n	17f78 <gpio_nrfx_config+0x6c>
   17fc8:	00f00006 	.word	0x00f00006
   17fcc:	00100006 	.word	0x00100006
   17fd0:	00400002 	.word	0x00400002

00017fd4 <gpiote_event_handler>:
{
   17fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   17fd6:	2400      	movs	r4, #0
{
   17fd8:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   17fda:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   17fde:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17fe2:	4e26      	ldr	r6, [pc, #152]	; (1807c <gpiote_event_handler+0xa8>)
   17fe4:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
   17fe6:	b15d      	cbz	r5, 18000 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   17fe8:	a902      	add	r1, sp, #8
   17fea:	4825      	ldr	r0, [pc, #148]	; (18080 <gpiote_event_handler+0xac>)
   17fec:	f00a fbe0 	bl	227b0 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   17ff0:	a903      	add	r1, sp, #12
		fired_triggers[0] =
   17ff2:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   17ff4:	4823      	ldr	r0, [pc, #140]	; (18084 <gpiote_event_handler+0xb0>)
   17ff6:	f00a fbdb 	bl	227b0 <check_level_trigger_pins>
		fired_triggers[1] =
   17ffa:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17ffc:	6034      	str	r4, [r6, #0]
   17ffe:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
   18000:	4c21      	ldr	r4, [pc, #132]	; (18088 <gpiote_event_handler+0xb4>)
{
   18002:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   18004:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   18006:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   18008:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
   1800c:	fa06 f102 	lsl.w	r1, r6, r2
   18010:	4219      	tst	r1, r3
   18012:	d01b      	beq.n	1804c <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18014:	0091      	lsls	r1, r2, #2
   18016:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1801a:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   1801e:	680b      	ldr	r3, [r1, #0]
   18020:	b1a3      	cbz	r3, 1804c <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   18022:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   18026:	af04      	add	r7, sp, #16
   18028:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1802c:	f8c1 c000 	str.w	ip, [r1]
   18030:	f3c3 3040 	ubfx	r0, r3, #13, #1
   18034:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   18038:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1803c:	f850 7c10 	ldr.w	r7, [r0, #-16]
   18040:	fa06 f303 	lsl.w	r3, r6, r3
   18044:	433b      	orrs	r3, r7
   18046:	f840 3c10 	str.w	r3, [r0, #-16]
   1804a:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1804c:	3201      	adds	r2, #1
   1804e:	2a08      	cmp	r2, #8
   18050:	d1da      	bne.n	18008 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
   18052:	9a00      	ldr	r2, [sp, #0]
   18054:	b11a      	cbz	r2, 1805e <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
   18056:	490a      	ldr	r1, [pc, #40]	; (18080 <gpiote_event_handler+0xac>)
   18058:	480c      	ldr	r0, [pc, #48]	; (1808c <gpiote_event_handler+0xb8>)
   1805a:	f7ff fde3 	bl	17c24 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   1805e:	9a01      	ldr	r2, [sp, #4]
   18060:	b11a      	cbz	r2, 1806a <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
   18062:	4908      	ldr	r1, [pc, #32]	; (18084 <gpiote_event_handler+0xb0>)
   18064:	480a      	ldr	r0, [pc, #40]	; (18090 <gpiote_event_handler+0xbc>)
   18066:	f7ff fddd 	bl	17c24 <gpio_fire_callbacks>
	if (port_event) {
   1806a:	b12d      	cbz	r5, 18078 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1806c:	4804      	ldr	r0, [pc, #16]	; (18080 <gpiote_event_handler+0xac>)
   1806e:	f00a fbe3 	bl	22838 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   18072:	4804      	ldr	r0, [pc, #16]	; (18084 <gpiote_event_handler+0xb0>)
   18074:	f00a fbe0 	bl	22838 <cfg_level_pins>
}
   18078:	b005      	add	sp, #20
   1807a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1807c:	4000617c 	.word	0x4000617c
   18080:	00022dd8 	.word	0x00022dd8
   18084:	00022df0 	.word	0x00022df0
   18088:	40006000 	.word	0x40006000
   1808c:	20002344 	.word	0x20002344
   18090:	20002360 	.word	0x20002360

00018094 <random_byte_get>:
	__asm__ volatile(
   18094:	f04f 0340 	mov.w	r3, #64	; 0x40
   18098:	f3ef 8211 	mrs	r2, BASEPRI
   1809c:	f383 8812 	msr	BASEPRI_MAX, r3
   180a0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   180a4:	4b08      	ldr	r3, [pc, #32]	; (180c8 <random_byte_get+0x34>)
   180a6:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   180a8:	b159      	cbz	r1, 180c2 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   180aa:	4908      	ldr	r1, [pc, #32]	; (180cc <random_byte_get+0x38>)
   180ac:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   180b0:	2100      	movs	r1, #0
   180b2:	6019      	str	r1, [r3, #0]
   180b4:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   180b6:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   180b8:	f382 8811 	msr	BASEPRI, r2
   180bc:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   180c0:	4770      	bx	lr
	int retval = -EAGAIN;
   180c2:	f06f 000a 	mvn.w	r0, #10
   180c6:	e7f7      	b.n	180b8 <random_byte_get+0x24>
   180c8:	4000d100 	.word	0x4000d100
   180cc:	4000d000 	.word	0x4000d000

000180d0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   180d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   180d2:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   180d4:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   180d6:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   180d8:	f04f 0540 	mov.w	r5, #64	; 0x40
   180dc:	f3ef 8011 	mrs	r0, BASEPRI
   180e0:	f385 8812 	msr	BASEPRI_MAX, r5
   180e4:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   180e8:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   180ea:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   180ee:	1ba4      	subs	r4, r4, r6
   180f0:	403c      	ands	r4, r7
	if (available < len) {
   180f2:	42a2      	cmp	r2, r4
		len = available;
   180f4:	bf88      	it	hi
   180f6:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   180f8:	eb06 0c02 	add.w	ip, r6, r2
   180fc:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   18100:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   18102:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   18106:	f380 8811 	msr	BASEPRI, r0
   1810a:	f3bf 8f6f 	isb	sy
   1810e:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   18110:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   18112:	4282      	cmp	r2, r0
   18114:	d119      	bne.n	1814a <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   18116:	4576      	cmp	r6, lr
   18118:	d10d      	bne.n	18136 <rng_pool_get+0x66>
	__asm__ volatile(
   1811a:	f04f 0540 	mov.w	r5, #64	; 0x40
   1811e:	f3ef 8211 	mrs	r2, BASEPRI
   18122:	f385 8812 	msr	BASEPRI_MAX, r5
   18126:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1812a:	781d      	ldrb	r5, [r3, #0]
   1812c:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1812e:	f382 8811 	msr	BASEPRI, r2
   18132:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   18136:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   18138:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1813a:	b288      	uxth	r0, r1
	available = available - len;
   1813c:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1813e:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18140:	bf22      	ittt	cs
   18142:	4b06      	ldrcs	r3, [pc, #24]	; (1815c <rng_pool_get+0x8c>)
   18144:	2201      	movcs	r2, #1
   18146:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   18148:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1814a:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1814e:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   18150:	f89c c005 	ldrb.w	ip, [ip, #5]
   18154:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   18158:	403d      	ands	r5, r7
   1815a:	e7da      	b.n	18112 <rng_pool_get+0x42>
   1815c:	4000d000 	.word	0x4000d000

00018160 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   18160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18164:	4614      	mov	r4, r2
   18166:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   18168:	6902      	ldr	r2, [r0, #16]
   1816a:	4b2c      	ldr	r3, [pc, #176]	; (1821c <entropy_nrf5_get_entropy_isr+0xbc>)
   1816c:	429a      	cmp	r2, r3
{
   1816e:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   18170:	d00b      	beq.n	1818a <entropy_nrf5_get_entropy_isr+0x2a>
   18172:	492b      	ldr	r1, [pc, #172]	; (18220 <entropy_nrf5_get_entropy_isr+0xc0>)
   18174:	482b      	ldr	r0, [pc, #172]	; (18224 <entropy_nrf5_get_entropy_isr+0xc4>)
   18176:	4a2c      	ldr	r2, [pc, #176]	; (18228 <entropy_nrf5_get_entropy_isr+0xc8>)
   18178:	f44f 7384 	mov.w	r3, #264	; 0x108
   1817c:	f007 ff29 	bl	1ffd2 <printk>
   18180:	4829      	ldr	r0, [pc, #164]	; (18228 <entropy_nrf5_get_entropy_isr+0xc8>)
   18182:	f44f 7184 	mov.w	r1, #264	; 0x108
   18186:	f008 f97e 	bl	20486 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1818a:	43eb      	mvns	r3, r5
   1818c:	f013 0501 	ands.w	r5, r3, #1
   18190:	d006      	beq.n	181a0 <entropy_nrf5_get_entropy_isr+0x40>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   18192:	4826      	ldr	r0, [pc, #152]	; (1822c <entropy_nrf5_get_entropy_isr+0xcc>)
   18194:	4622      	mov	r2, r4
   18196:	4631      	mov	r1, r6
   18198:	f7ff ff9a 	bl	180d0 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1819c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   181a0:	2c00      	cmp	r4, #0
   181a2:	d033      	beq.n	1820c <entropy_nrf5_get_entropy_isr+0xac>
	__asm__ volatile(
   181a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   181a8:	f3ef 8811 	mrs	r8, BASEPRI
   181ac:	f383 8812 	msr	BASEPRI_MAX, r3
   181b0:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   181b4:	200d      	movs	r0, #13
   181b6:	f7fa fa45 	bl	12644 <arch_irq_is_enabled>
   181ba:	4607      	mov	r7, r0
		irq_disable(IRQN);
   181bc:	200d      	movs	r0, #13
   181be:	f7fa fa2d 	bl	1261c <arch_irq_disable>
	__asm__ volatile(
   181c2:	f388 8811 	msr	BASEPRI, r8
   181c6:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   181ca:	4a19      	ldr	r2, [pc, #100]	; (18230 <entropy_nrf5_get_entropy_isr+0xd0>)
   181cc:	6015      	str	r5, [r2, #0]
   181ce:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   181d0:	4b18      	ldr	r3, [pc, #96]	; (18234 <entropy_nrf5_get_entropy_isr+0xd4>)
   181d2:	2101      	movs	r1, #1
   181d4:	6019      	str	r1, [r3, #0]
   181d6:	4918      	ldr	r1, [pc, #96]	; (18238 <entropy_nrf5_get_entropy_isr+0xd8>)
   181d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   181dc:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   181e0:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   181e2:	4691      	mov	r9, r2
   181e4:	468a      	mov	sl, r1
   181e6:	4698      	mov	r8, r3
   181e8:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   181ec:	b183      	cbz	r3, 18210 <entropy_nrf5_get_entropy_isr+0xb0>
			byte = random_byte_get();
   181ee:	f7ff ff51 	bl	18094 <random_byte_get>
			if (byte < 0) {
   181f2:	1e03      	subs	r3, r0, #0
   181f4:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   181f8:	dbf6      	blt.n	181e8 <entropy_nrf5_get_entropy_isr+0x88>
   181fa:	3d01      	subs	r5, #1
   181fc:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   181fe:	5573      	strb	r3, [r6, r5]
		} while (len);
   18200:	2d00      	cmp	r5, #0
   18202:	d1f1      	bne.n	181e8 <entropy_nrf5_get_entropy_isr+0x88>
		if (irq_enabled) {
   18204:	b117      	cbz	r7, 1820c <entropy_nrf5_get_entropy_isr+0xac>
			irq_enable(IRQN);
   18206:	200d      	movs	r0, #13
   18208:	f7fa f9f8 	bl	125fc <arch_irq_enable>
	return cnt;
   1820c:	4620      	mov	r0, r4
   1820e:	e7c5      	b.n	1819c <entropy_nrf5_get_entropy_isr+0x3c>
   18210:	f3bf 8f4f 	dsb	sy
				__WFE();
   18214:	bf20      	wfe
				__SEV();
   18216:	bf40      	sev
				__WFE();
   18218:	bf20      	wfe
   1821a:	e7e5      	b.n	181e8 <entropy_nrf5_get_entropy_isr+0x88>
   1821c:	20002378 	.word	0x20002378
   18220:	000248bd 	.word	0x000248bd
   18224:	000237c9 	.word	0x000237c9
   18228:	0002488b 	.word	0x0002488b
   1822c:	200023a8 	.word	0x200023a8
   18230:	4000d100 	.word	0x4000d100
   18234:	4000d000 	.word	0x4000d000
   18238:	e000e100 	.word	0xe000e100

0001823c <entropy_nrf5_get_entropy>:
{
   1823c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   18240:	4b1a      	ldr	r3, [pc, #104]	; (182ac <entropy_nrf5_get_entropy+0x70>)
{
   18242:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   18244:	6902      	ldr	r2, [r0, #16]
   18246:	429a      	cmp	r2, r3
{
   18248:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1824a:	d009      	beq.n	18260 <entropy_nrf5_get_entropy+0x24>
   1824c:	4918      	ldr	r1, [pc, #96]	; (182b0 <entropy_nrf5_get_entropy+0x74>)
   1824e:	4819      	ldr	r0, [pc, #100]	; (182b4 <entropy_nrf5_get_entropy+0x78>)
   18250:	4a19      	ldr	r2, [pc, #100]	; (182b8 <entropy_nrf5_get_entropy+0x7c>)
   18252:	23ea      	movs	r3, #234	; 0xea
   18254:	f007 febd 	bl	1ffd2 <printk>
   18258:	4817      	ldr	r0, [pc, #92]	; (182b8 <entropy_nrf5_get_entropy+0x7c>)
   1825a:	21ea      	movs	r1, #234	; 0xea
   1825c:	f008 f913 	bl	20486 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   18260:	4e12      	ldr	r6, [pc, #72]	; (182ac <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   18262:	f106 0745 	add.w	r7, r6, #69	; 0x45
   18266:	f106 0818 	add.w	r8, r6, #24
	while (len) {
   1826a:	b914      	cbnz	r4, 18272 <entropy_nrf5_get_entropy+0x36>
}
   1826c:	4620      	mov	r0, r4
   1826e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18272:	f04f 33ff 	mov.w	r3, #4294967295
   18276:	f04f 32ff 	mov.w	r2, #4294967295
   1827a:	4630      	mov	r0, r6
   1827c:	f002 fb42 	bl	1a904 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   18280:	4622      	mov	r2, r4
   18282:	4649      	mov	r1, r9
   18284:	4638      	mov	r0, r7
   18286:	f7ff ff23 	bl	180d0 <rng_pool_get>
   1828a:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1828c:	4630      	mov	r0, r6
   1828e:	f002 faf5 	bl	1a87c <z_impl_k_sem_give>
		if (bytes == 0U) {
   18292:	b93d      	cbnz	r5, 182a4 <entropy_nrf5_get_entropy+0x68>
	return z_impl_k_sem_take(sem, timeout);
   18294:	f04f 32ff 	mov.w	r2, #4294967295
   18298:	f04f 33ff 	mov.w	r3, #4294967295
   1829c:	4640      	mov	r0, r8
   1829e:	f002 fb31 	bl	1a904 <z_impl_k_sem_take>
			continue;
   182a2:	e7e2      	b.n	1826a <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   182a4:	1b64      	subs	r4, r4, r5
   182a6:	b2a4      	uxth	r4, r4
		buf += bytes;
   182a8:	44a9      	add	r9, r5
   182aa:	e7de      	b.n	1826a <entropy_nrf5_get_entropy+0x2e>
   182ac:	20002378 	.word	0x20002378
   182b0:	000248bd 	.word	0x000248bd
   182b4:	000237c9 	.word	0x000237c9
   182b8:	0002488b 	.word	0x0002488b

000182bc <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   182bc:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   182be:	4c20      	ldr	r4, [pc, #128]	; (18340 <entropy_nrf5_init+0x84>)
   182c0:	6903      	ldr	r3, [r0, #16]
   182c2:	42a3      	cmp	r3, r4
   182c4:	d00b      	beq.n	182de <entropy_nrf5_init+0x22>
   182c6:	491f      	ldr	r1, [pc, #124]	; (18344 <entropy_nrf5_init+0x88>)
   182c8:	481f      	ldr	r0, [pc, #124]	; (18348 <entropy_nrf5_init+0x8c>)
   182ca:	4a20      	ldr	r2, [pc, #128]	; (1834c <entropy_nrf5_init+0x90>)
   182cc:	f240 1357 	movw	r3, #343	; 0x157
   182d0:	f007 fe7f 	bl	1ffd2 <printk>
   182d4:	481d      	ldr	r0, [pc, #116]	; (1834c <entropy_nrf5_init+0x90>)
   182d6:	f240 1157 	movw	r1, #343	; 0x157
   182da:	f008 f8d4 	bl	20486 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   182de:	2201      	movs	r2, #1
   182e0:	4611      	mov	r1, r2
   182e2:	4817      	ldr	r0, [pc, #92]	; (18340 <entropy_nrf5_init+0x84>)
   182e4:	f00a fb9d 	bl	22a22 <z_impl_k_sem_init>
   182e8:	2201      	movs	r2, #1
   182ea:	2100      	movs	r1, #0
   182ec:	4818      	ldr	r0, [pc, #96]	; (18350 <entropy_nrf5_init+0x94>)
   182ee:	f00a fb98 	bl	22a22 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   182f2:	f240 4307 	movw	r3, #1031	; 0x407
   182f6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   182fa:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   182fe:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   18300:	230c      	movs	r3, #12
   18302:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   18306:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   18308:	4b12      	ldr	r3, [pc, #72]	; (18354 <entropy_nrf5_init+0x98>)
   1830a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1830e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   18312:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   18316:	f022 0201 	bic.w	r2, r2, #1
   1831a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1831e:	4a0e      	ldr	r2, [pc, #56]	; (18358 <entropy_nrf5_init+0x9c>)
    p_reg->INTENSET = mask;
   18320:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18322:	6015      	str	r5, [r2, #0]
   18324:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   18326:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1832a:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1832c:	6019      	str	r1, [r3, #0]
   1832e:	200d      	movs	r0, #13
   18330:	f7fa f996 	bl	12660 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   18334:	200d      	movs	r0, #13
   18336:	f7fa f961 	bl	125fc <arch_irq_enable>

	return 0;
}
   1833a:	4628      	mov	r0, r5
   1833c:	bd38      	pop	{r3, r4, r5, pc}
   1833e:	bf00      	nop
   18340:	20002378 	.word	0x20002378
   18344:	000248bd 	.word	0x000248bd
   18348:	000237c9 	.word	0x000237c9
   1834c:	0002488b 	.word	0x0002488b
   18350:	20002390 	.word	0x20002390
   18354:	4000d000 	.word	0x4000d000
   18358:	4000d100 	.word	0x4000d100

0001835c <isr>:
{
   1835c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1835e:	f7ff fe99 	bl	18094 <random_byte_get>
	if (byte < 0) {
   18362:	2800      	cmp	r0, #0
   18364:	db20      	blt.n	183a8 <isr+0x4c>
	uint8_t last  = rngp->last;
   18366:	4b17      	ldr	r3, [pc, #92]	; (183c4 <isr+0x68>)
   18368:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1836c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   18370:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   18374:	1a51      	subs	r1, r2, r1
   18376:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1837a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1837c:	d10d      	bne.n	1839a <isr+0x3e>
	uint8_t last  = rngp->last;
   1837e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   18382:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   18386:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1838a:	1a51      	subs	r1, r2, r1
   1838c:	ea34 0101 	bics.w	r1, r4, r1
   18390:	d10b      	bne.n	183aa <isr+0x4e>
   18392:	4b0d      	ldr	r3, [pc, #52]	; (183c8 <isr+0x6c>)
   18394:	2201      	movs	r2, #1
   18396:	601a      	str	r2, [r3, #0]
}
   18398:	e00e      	b.n	183b8 <isr+0x5c>
	rngp->buffer[last] = byte;
   1839a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1839c:	3201      	adds	r2, #1
   1839e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   183a0:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   183a4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   183a8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   183aa:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   183ac:	3201      	adds	r2, #1
   183ae:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   183b0:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   183b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   183b8:	4804      	ldr	r0, [pc, #16]	; (183cc <isr+0x70>)
}
   183ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   183be:	f002 ba5d 	b.w	1a87c <z_impl_k_sem_give>
   183c2:	bf00      	nop
   183c4:	20002378 	.word	0x20002378
   183c8:	4000d004 	.word	0x4000d004
   183cc:	20002390 	.word	0x20002390

000183d0 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   183d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   183d2:	460f      	mov	r7, r1
   183d4:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   183d6:	b948      	cbnz	r0, 183ec <entropy_cc3xx_rng_get_entropy+0x1c>
   183d8:	4919      	ldr	r1, [pc, #100]	; (18440 <entropy_cc3xx_rng_get_entropy+0x70>)
   183da:	481a      	ldr	r0, [pc, #104]	; (18444 <entropy_cc3xx_rng_get_entropy+0x74>)
   183dc:	4a1a      	ldr	r2, [pc, #104]	; (18448 <entropy_cc3xx_rng_get_entropy+0x78>)
   183de:	2324      	movs	r3, #36	; 0x24
   183e0:	f007 fdf7 	bl	1ffd2 <printk>
   183e4:	4818      	ldr	r0, [pc, #96]	; (18448 <entropy_cc3xx_rng_get_entropy+0x78>)
   183e6:	2124      	movs	r1, #36	; 0x24
   183e8:	f008 f84d 	bl	20486 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   183ec:	b94f      	cbnz	r7, 18402 <entropy_cc3xx_rng_get_entropy+0x32>
   183ee:	4917      	ldr	r1, [pc, #92]	; (1844c <entropy_cc3xx_rng_get_entropy+0x7c>)
   183f0:	4814      	ldr	r0, [pc, #80]	; (18444 <entropy_cc3xx_rng_get_entropy+0x74>)
   183f2:	4a15      	ldr	r2, [pc, #84]	; (18448 <entropy_cc3xx_rng_get_entropy+0x78>)
   183f4:	2325      	movs	r3, #37	; 0x25
   183f6:	f007 fdec 	bl	1ffd2 <printk>
   183fa:	4813      	ldr	r0, [pc, #76]	; (18448 <entropy_cc3xx_rng_get_entropy+0x78>)
   183fc:	2125      	movs	r1, #37	; 0x25
   183fe:	f008 f842 	bl	20486 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   18402:	f44f 6580 	mov.w	r5, #1024	; 0x400
   18406:	2400      	movs	r4, #0
   18408:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   1840c:	42a6      	cmp	r6, r4
   1840e:	d801      	bhi.n	18414 <entropy_cc3xx_rng_get_entropy+0x44>
		offset += chunk_size;
	}
#endif

	return res;
}
   18410:	b003      	add	sp, #12
   18412:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   18414:	1b33      	subs	r3, r6, r4
   18416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1841a:	bf38      	it	cc
   1841c:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   1841e:	462a      	mov	r2, r5
   18420:	ab01      	add	r3, sp, #4
   18422:	1939      	adds	r1, r7, r4
   18424:	2000      	movs	r0, #0
   18426:	f005 f9f9 	bl	1d81c <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
   1842a:	9b01      	ldr	r3, [sp, #4]
   1842c:	42ab      	cmp	r3, r5
   1842e:	d103      	bne.n	18438 <entropy_cc3xx_rng_get_entropy+0x68>
		if (res != 0) {
   18430:	2800      	cmp	r0, #0
   18432:	d1ed      	bne.n	18410 <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
   18434:	442c      	add	r4, r5
   18436:	e7e9      	b.n	1840c <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
   18438:	f06f 0015 	mvn.w	r0, #21
   1843c:	e7e8      	b.n	18410 <entropy_cc3xx_rng_get_entropy+0x40>
   1843e:	bf00      	nop
   18440:	00024935 	.word	0x00024935
   18444:	000237c9 	.word	0x000237c9
   18448:	00024905 	.word	0x00024905
   1844c:	00024948 	.word	0x00024948

00018450 <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
   18450:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   18452:	4c06      	ldr	r4, [pc, #24]	; (1846c <sys_clock_isr+0x1c>)
   18454:	4906      	ldr	r1, [pc, #24]	; (18470 <sys_clock_isr+0x20>)
   18456:	4807      	ldr	r0, [pc, #28]	; (18474 <sys_clock_isr+0x24>)
   18458:	4622      	mov	r2, r4
   1845a:	2317      	movs	r3, #23
   1845c:	f007 fdb9 	bl	1ffd2 <printk>
   18460:	4620      	mov	r0, r4
   18462:	2117      	movs	r1, #23
}
   18464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   18468:	f008 b80d 	b.w	20486 <assert_post_action>
   1846c:	00024969 	.word	0x00024969
   18470:	00025541 	.word	0x00025541
   18474:	000237c9 	.word	0x000237c9

00018478 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   18478:	4919      	ldr	r1, [pc, #100]	; (184e0 <sys_clock_timeout_handler+0x68>)
{
   1847a:	b570      	push	{r4, r5, r6, lr}
   1847c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1847e:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   18482:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   18484:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   18488:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1848c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1848e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   18492:	f04f 0500 	mov.w	r5, #0
   18496:	d20a      	bcs.n	184ae <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   18498:	4b12      	ldr	r3, [pc, #72]	; (184e4 <sys_clock_timeout_handler+0x6c>)
   1849a:	6819      	ldr	r1, [r3, #0]
   1849c:	060a      	lsls	r2, r1, #24
   1849e:	0a0b      	lsrs	r3, r1, #8
   184a0:	1992      	adds	r2, r2, r6
   184a2:	4911      	ldr	r1, [pc, #68]	; (184e8 <sys_clock_timeout_handler+0x70>)
   184a4:	f143 0300 	adc.w	r3, r3, #0
   184a8:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   184ac:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   184ae:	f004 fb9d 	bl	1cbec <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   184b2:	00a3      	lsls	r3, r4, #2
   184b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   184b8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   184bc:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   184c0:	42b2      	cmp	r2, r6
   184c2:	d10b      	bne.n	184dc <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   184c4:	b91d      	cbnz	r5, 184ce <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   184c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   184ca:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   184ce:	4b07      	ldr	r3, [pc, #28]	; (184ec <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   184d0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   184d4:	fa00 f404 	lsl.w	r4, r0, r4
   184d8:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   184dc:	bd70      	pop	{r4, r5, r6, pc}
   184de:	bf00      	nop
   184e0:	200019d0 	.word	0x200019d0
   184e4:	200023d4 	.word	0x200023d4
   184e8:	200019b8 	.word	0x200019b8
   184ec:	40011000 	.word	0x40011000

000184f0 <compare_int_lock>:
{
   184f0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   184f2:	2301      	movs	r3, #1
   184f4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   184f6:	4a11      	ldr	r2, [pc, #68]	; (1853c <compare_int_lock+0x4c>)
   184f8:	f3bf 8f5b 	dmb	ish
   184fc:	43dc      	mvns	r4, r3
   184fe:	e852 1f00 	ldrex	r1, [r2]
   18502:	ea01 0c04 	and.w	ip, r1, r4
   18506:	e842 ce00 	strex	lr, ip, [r2]
   1850a:	f1be 0f00 	cmp.w	lr, #0
   1850e:	d1f6      	bne.n	184fe <compare_int_lock+0xe>
   18510:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18514:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18518:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1851c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   18520:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   18524:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   18528:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1852c:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   18530:	420b      	tst	r3, r1
}
   18532:	bf14      	ite	ne
   18534:	2001      	movne	r0, #1
   18536:	2000      	moveq	r0, #0
   18538:	bd10      	pop	{r4, pc}
   1853a:	bf00      	nop
   1853c:	200023d0 	.word	0x200023d0

00018540 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   18540:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18542:	4a12      	ldr	r2, [pc, #72]	; (1858c <compare_int_unlock.part.0+0x4c>)
   18544:	f3bf 8f5b 	dmb	ish
   18548:	4083      	lsls	r3, r0
   1854a:	e852 1f00 	ldrex	r1, [r2]
   1854e:	4319      	orrs	r1, r3
   18550:	e842 1c00 	strex	ip, r1, [r2]
   18554:	f1bc 0f00 	cmp.w	ip, #0
   18558:	d1f7      	bne.n	1854a <compare_int_unlock.part.0+0xa>
   1855a:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1855e:	4a0c      	ldr	r2, [pc, #48]	; (18590 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18564:	4083      	lsls	r3, r0
   18566:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1856a:	4b0a      	ldr	r3, [pc, #40]	; (18594 <compare_int_unlock.part.0+0x54>)
   1856c:	f3bf 8f5b 	dmb	ish
   18570:	681b      	ldr	r3, [r3, #0]
   18572:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   18576:	fa23 f000 	lsr.w	r0, r3, r0
   1857a:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1857c:	bf42      	ittt	mi
   1857e:	4b06      	ldrmi	r3, [pc, #24]	; (18598 <compare_int_unlock.part.0+0x58>)
   18580:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   18584:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   18588:	4770      	bx	lr
   1858a:	bf00      	nop
   1858c:	200023d0 	.word	0x200023d0
   18590:	40011000 	.word	0x40011000
   18594:	200023cc 	.word	0x200023cc
   18598:	e000e100 	.word	0xe000e100

0001859c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1859c:	4b0d      	ldr	r3, [pc, #52]	; (185d4 <z_nrf_rtc_timer_read+0x38>)
   1859e:	681b      	ldr	r3, [r3, #0]
   185a0:	0a19      	lsrs	r1, r3, #8
   185a2:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   185a4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   185a8:	4b0b      	ldr	r3, [pc, #44]	; (185d8 <z_nrf_rtc_timer_read+0x3c>)
   185aa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   185ae:	18c0      	adds	r0, r0, r3
   185b0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   185b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   185b8:	d20a      	bcs.n	185d0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   185ba:	4b08      	ldr	r3, [pc, #32]	; (185dc <z_nrf_rtc_timer_read+0x40>)
   185bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   185c0:	4299      	cmp	r1, r3
   185c2:	bf08      	it	eq
   185c4:	4290      	cmpeq	r0, r2
   185c6:	d203      	bcs.n	185d0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   185c8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   185cc:	f141 0100 	adc.w	r1, r1, #0
}
   185d0:	4770      	bx	lr
   185d2:	bf00      	nop
   185d4:	200023d4 	.word	0x200023d4
   185d8:	40011000 	.word	0x40011000
   185dc:	200019b8 	.word	0x200019b8

000185e0 <compare_set>:
{
   185e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185e4:	b085      	sub	sp, #20
   185e6:	4616      	mov	r6, r2
   185e8:	461f      	mov	r7, r3
   185ea:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   185ec:	f7ff ff80 	bl	184f0 <compare_int_lock>
   185f0:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   185f2:	f7ff ffd3 	bl	1859c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   185f6:	42b9      	cmp	r1, r7
   185f8:	bf08      	it	eq
   185fa:	42b0      	cmpeq	r0, r6
   185fc:	d27f      	bcs.n	186fe <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
   185fe:	ebb6 0800 	subs.w	r8, r6, r0
   18602:	eb67 0901 	sbc.w	r9, r7, r1
   18606:	2300      	movs	r3, #0
   18608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1860c:	454b      	cmp	r3, r9
   1860e:	bf08      	it	eq
   18610:	4542      	cmpeq	r2, r8
   18612:	f0c0 8085 	bcc.w	18720 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   18616:	4b44      	ldr	r3, [pc, #272]	; (18728 <compare_set+0x148>)
   18618:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1861c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   18620:	429f      	cmp	r7, r3
   18622:	bf08      	it	eq
   18624:	4296      	cmpeq	r6, r2
   18626:	d054      	beq.n	186d2 <compare_set+0xf2>
   18628:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1862c:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   18630:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   18634:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18638:	fa0b f205 	lsl.w	r2, fp, r5
   1863c:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   18640:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18644:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18648:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
   1864a:	4a38      	ldr	r2, [pc, #224]	; (1872c <compare_set+0x14c>)
    return p_reg->CC[ch];
   1864c:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   18650:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18654:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   18658:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1865c:	461c      	mov	r4, r3
   1865e:	4693      	mov	fp, r2
     return p_reg->COUNTER;
   18660:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   18664:	eba0 000a 	sub.w	r0, r0, sl
   18668:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1866c:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   18670:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   18672:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   18676:	d105      	bne.n	18684 <compare_set+0xa4>
   18678:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1867a:	2013      	movs	r0, #19
   1867c:	f00a fa66 	bl	22b4c <z_impl_k_busy_wait>
   18680:	4a2a      	ldr	r2, [pc, #168]	; (1872c <compare_set+0x14c>)
   18682:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   18684:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   18686:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   1868a:	eba4 000c 	sub.w	r0, r4, ip
   1868e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   18692:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18696:	bf88      	it	hi
   18698:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1869a:	2000      	movs	r0, #0
   1869c:	f8c8 0000 	str.w	r0, [r8]
   186a0:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   186a4:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   186a8:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   186ac:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   186b0:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   186b4:	4582      	cmp	sl, r0
   186b6:	d006      	beq.n	186c6 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   186b8:	1a20      	subs	r0, r4, r0
   186ba:	3802      	subs	r0, #2
   186bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   186c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   186c4:	d819      	bhi.n	186fa <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
   186c6:	1ae4      	subs	r4, r4, r3
   186c8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   186cc:	1932      	adds	r2, r6, r4
   186ce:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   186d2:	4c15      	ldr	r4, [pc, #84]	; (18728 <compare_set+0x148>)
   186d4:	0129      	lsls	r1, r5, #4
   186d6:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   186da:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   186de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
   186e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
   186e2:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
   186e4:	6043      	str	r3, [r0, #4]
	return ret;
   186e6:	2400      	movs	r4, #0
	if (key) {
   186e8:	9b01      	ldr	r3, [sp, #4]
   186ea:	b113      	cbz	r3, 186f2 <compare_set+0x112>
   186ec:	4628      	mov	r0, r5
   186ee:	f7ff ff27 	bl	18540 <compare_int_unlock.part.0>
}
   186f2:	4620      	mov	r0, r4
   186f4:	b005      	add	sp, #20
   186f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186fa:	4620      	mov	r0, r4
   186fc:	e7b0      	b.n	18660 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   186fe:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18700:	4a0b      	ldr	r2, [pc, #44]	; (18730 <compare_set+0x150>)
   18702:	f3bf 8f5b 	dmb	ish
   18706:	40ab      	lsls	r3, r5
   18708:	e852 1f00 	ldrex	r1, [r2]
   1870c:	4319      	orrs	r1, r3
   1870e:	e842 1000 	strex	r0, r1, [r2]
   18712:	2800      	cmp	r0, #0
   18714:	d1f8      	bne.n	18708 <compare_set+0x128>
   18716:	f3bf 8f5b 	dmb	ish
   1871a:	4632      	mov	r2, r6
   1871c:	463b      	mov	r3, r7
   1871e:	e7d8      	b.n	186d2 <compare_set+0xf2>
			return -EINVAL;
   18720:	f06f 0415 	mvn.w	r4, #21
   18724:	e7e0      	b.n	186e8 <compare_set+0x108>
   18726:	bf00      	nop
   18728:	200019c0 	.word	0x200019c0
   1872c:	40011000 	.word	0x40011000
   18730:	200023cc 	.word	0x200023cc

00018734 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   18734:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return p_reg->INTENSET & mask;
   18738:	4c2a      	ldr	r4, [pc, #168]	; (187e4 <rtc_nrf_isr+0xb0>)
   1873a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1873e:	0799      	lsls	r1, r3, #30
   18740:	d509      	bpl.n	18756 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18742:	4b29      	ldr	r3, [pc, #164]	; (187e8 <rtc_nrf_isr+0xb4>)
   18744:	681a      	ldr	r2, [r3, #0]
   18746:	b132      	cbz	r2, 18756 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18748:	2200      	movs	r2, #0
   1874a:	601a      	str	r2, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   1874c:	4a27      	ldr	r2, [pc, #156]	; (187ec <rtc_nrf_isr+0xb8>)
   1874e:	681b      	ldr	r3, [r3, #0]
   18750:	6813      	ldr	r3, [r2, #0]
   18752:	3301      	adds	r3, #1
   18754:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18756:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1875a:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1875c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   18760:	03d2      	lsls	r2, r2, #15
   18762:	d52c      	bpl.n	187be <rtc_nrf_isr+0x8a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18764:	f3bf 8f5b 	dmb	ish
   18768:	4a21      	ldr	r2, [pc, #132]	; (187f0 <rtc_nrf_isr+0xbc>)
   1876a:	e852 1f00 	ldrex	r1, [r2]
   1876e:	f021 0001 	bic.w	r0, r1, #1
   18772:	e842 0500 	strex	r5, r0, [r2]
   18776:	2d00      	cmp	r5, #0
   18778:	d1f7      	bne.n	1876a <rtc_nrf_isr+0x36>
   1877a:	f3bf 8f5b 	dmb	ish
   1877e:	4a1d      	ldr	r2, [pc, #116]	; (187f4 <rtc_nrf_isr+0xc0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   18780:	b909      	cbnz	r1, 18786 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18782:	6811      	ldr	r1, [r2, #0]
		if (result) {
   18784:	b1d9      	cbz	r1, 187be <rtc_nrf_isr+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18786:	2500      	movs	r5, #0
   18788:	6015      	str	r5, [r2, #0]
   1878a:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1878c:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   18790:	f7ff ff04 	bl	1859c <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18794:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18798:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1879a:	4b17      	ldr	r3, [pc, #92]	; (187f8 <rtc_nrf_isr+0xc4>)
   1879c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   187a0:	4549      	cmp	r1, r9
   187a2:	bf08      	it	eq
   187a4:	4540      	cmpeq	r0, r8
   187a6:	d20f      	bcs.n	187c8 <rtc_nrf_isr+0x94>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   187a8:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   187aa:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   187ae:	b141      	cbz	r1, 187c2 <rtc_nrf_isr+0x8e>
			handler(chan, expire_time, user_context);
   187b0:	f8cd a000 	str.w	sl, [sp]
   187b4:	4642      	mov	r2, r8
   187b6:	464b      	mov	r3, r9
   187b8:	2000      	movs	r0, #0
   187ba:	4788      	blx	r1
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   187bc:	e001      	b.n	187c2 <rtc_nrf_isr+0x8e>
   187be:	f383 8810 	msr	PRIMASK, r3
		process_channel(chan);
	}
}
   187c2:	b002      	add	sp, #8
   187c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   187c8:	f04f 36ff 	mov.w	r6, #4294967295
   187cc:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
   187d0:	e9d3 1a00 	ldrd	r1, sl, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   187d4:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
   187d8:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   187da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   187de:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   187e2:	e7e2      	b.n	187aa <rtc_nrf_isr+0x76>
   187e4:	40011000 	.word	0x40011000
   187e8:	40011104 	.word	0x40011104
   187ec:	200023d4 	.word	0x200023d4
   187f0:	200023cc 	.word	0x200023cc
   187f4:	40011140 	.word	0x40011140
   187f8:	200019c0 	.word	0x200019c0

000187fc <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   187fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   187fe:	4b1a      	ldr	r3, [pc, #104]	; (18868 <sys_clock_driver_init+0x6c>)
    p_reg->PRESCALER = val;
   18800:	4d1a      	ldr	r5, [pc, #104]	; (1886c <sys_clock_driver_init+0x70>)
   18802:	2400      	movs	r4, #0
   18804:	f04f 30ff 	mov.w	r0, #4294967295
   18808:	f04f 31ff 	mov.w	r1, #4294967295
   1880c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   18810:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   18814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18818:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1881c:	4b14      	ldr	r3, [pc, #80]	; (18870 <sys_clock_driver_init+0x74>)
   1881e:	2602      	movs	r6, #2
   18820:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   18824:	2101      	movs	r1, #1
   18826:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1882a:	2011      	movs	r0, #17
   1882c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   18830:	4622      	mov	r2, r4
   18832:	f7f9 ff15 	bl	12660 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   18836:	2011      	movs	r0, #17
   18838:	f7f9 fee0 	bl	125fc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1883c:	4a0d      	ldr	r2, [pc, #52]	; (18874 <sys_clock_driver_init+0x78>)
    p_reg->INTENSET = mask;
   1883e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   18842:	2301      	movs	r3, #1
   18844:	6013      	str	r3, [r2, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   18846:	4a0c      	ldr	r2, [pc, #48]	; (18878 <sys_clock_driver_init+0x7c>)
   18848:	602b      	str	r3, [r5, #0]
   1884a:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1884c:	4b0b      	ldr	r3, [pc, #44]	; (1887c <sys_clock_driver_init+0x80>)
   1884e:	4a0c      	ldr	r2, [pc, #48]	; (18880 <sys_clock_driver_init+0x84>)
   18850:	9300      	str	r3, [sp, #0]
   18852:	9401      	str	r4, [sp, #4]
   18854:	2300      	movs	r3, #0
   18856:	4620      	mov	r0, r4
   18858:	f7ff fec2 	bl	185e0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1885c:	4630      	mov	r0, r6
   1885e:	f7ff f8df 	bl	17a20 <z_nrf_clock_control_lf_on>

	return 0;
}
   18862:	4620      	mov	r0, r4
   18864:	b002      	add	sp, #8
   18866:	bd70      	pop	{r4, r5, r6, pc}
   18868:	200019c0 	.word	0x200019c0
   1886c:	40011000 	.word	0x40011000
   18870:	e000e100 	.word	0xe000e100
   18874:	40011008 	.word	0x40011008
   18878:	200023d0 	.word	0x200023d0
   1887c:	00018479 	.word	0x00018479
   18880:	007fffff 	.word	0x007fffff

00018884 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18884:	4b14      	ldr	r3, [pc, #80]	; (188d8 <sys_clock_set_timeout+0x54>)
{
   18886:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18888:	f1b0 3fff 	cmp.w	r0, #4294967295
   1888c:	bf08      	it	eq
   1888e:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   18890:	1e44      	subs	r4, r0, #1
   18892:	2c00      	cmp	r4, #0
   18894:	dd1e      	ble.n	188d4 <sys_clock_set_timeout+0x50>
   18896:	429c      	cmp	r4, r3
   18898:	bfa8      	it	ge
   1889a:	461c      	movge	r4, r3

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1889c:	f7ff fe7e 	bl	1859c <z_nrf_rtc_timer_read>
   188a0:	4b0e      	ldr	r3, [pc, #56]	; (188dc <sys_clock_set_timeout+0x58>)
		cyc = MAX_CYCLES;
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   188a2:	490f      	ldr	r1, [pc, #60]	; (188e0 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   188a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   188a8:	1a80      	subs	r0, r0, r2
		ticks = 0;
   188aa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   188ae:	bf28      	it	cs
   188b0:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   188b2:	3001      	adds	r0, #1
   188b4:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   188b6:	4808      	ldr	r0, [pc, #32]	; (188d8 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   188b8:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   188ba:	4284      	cmp	r4, r0
   188bc:	bf28      	it	cs
   188be:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   188c0:	1912      	adds	r2, r2, r4
   188c2:	f04f 0000 	mov.w	r0, #0
   188c6:	9001      	str	r0, [sp, #4]
   188c8:	f143 0300 	adc.w	r3, r3, #0
   188cc:	f7ff fe88 	bl	185e0 <compare_set>
}
   188d0:	b002      	add	sp, #8
   188d2:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   188d4:	2400      	movs	r4, #0
   188d6:	e7e1      	b.n	1889c <sys_clock_set_timeout+0x18>
   188d8:	007fffff 	.word	0x007fffff
   188dc:	200019d0 	.word	0x200019d0
   188e0:	00018479 	.word	0x00018479

000188e4 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
   188e4:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   188e6:	f7ff fe59 	bl	1859c <z_nrf_rtc_timer_read>
   188ea:	4b02      	ldr	r3, [pc, #8]	; (188f4 <sys_clock_elapsed+0x10>)
   188ec:	681b      	ldr	r3, [r3, #0]
}
   188ee:	1ac0      	subs	r0, r0, r3
   188f0:	bd08      	pop	{r3, pc}
   188f2:	bf00      	nop
   188f4:	200019d0 	.word	0x200019d0

000188f8 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   188f8:	4602      	mov	r2, r0
   188fa:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   188fc:	4801      	ldr	r0, [pc, #4]	; (18904 <multithreading_lock_acquire+0xc>)
   188fe:	f001 bc91 	b.w	1a224 <z_impl_k_mutex_lock>
   18902:	bf00      	nop
   18904:	20000688 	.word	0x20000688

00018908 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   18908:	4801      	ldr	r0, [pc, #4]	; (18910 <multithreading_lock_release+0x8>)
   1890a:	f001 bd8b 	b.w	1a424 <z_impl_k_mutex_unlock>
   1890e:	bf00      	nop
   18910:	20000688 	.word	0x20000688

00018914 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   18914:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   18916:	4804      	ldr	r0, [pc, #16]	; (18928 <hci_driver_init+0x14>)
   18918:	f7fb fae2 	bl	13ee0 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1891c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   18920:	4802      	ldr	r0, [pc, #8]	; (1892c <hci_driver_init+0x18>)
   18922:	f7ec b9ad 	b.w	4c80 <sdc_init>
   18926:	bf00      	nop
   18928:	00023480 	.word	0x00023480
   1892c:	000228a7 	.word	0x000228a7

00018930 <rand_prio_low_vector_get_blocking>:
{
   18930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   18932:	4b16      	ldr	r3, [pc, #88]	; (1898c <rand_prio_low_vector_get_blocking+0x5c>)
{
   18934:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   18936:	681e      	ldr	r6, [r3, #0]
   18938:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1893a:	68b7      	ldr	r7, [r6, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1893c:	683b      	ldr	r3, [r7, #0]
   1893e:	b963      	cbnz	r3, 1895a <rand_prio_low_vector_get_blocking+0x2a>
   18940:	4913      	ldr	r1, [pc, #76]	; (18990 <rand_prio_low_vector_get_blocking+0x60>)
   18942:	4a14      	ldr	r2, [pc, #80]	; (18994 <rand_prio_low_vector_get_blocking+0x64>)
   18944:	4814      	ldr	r0, [pc, #80]	; (18998 <rand_prio_low_vector_get_blocking+0x68>)
   18946:	234b      	movs	r3, #75	; 0x4b
   18948:	f007 fb43 	bl	1ffd2 <printk>
   1894c:	4813      	ldr	r0, [pc, #76]	; (1899c <rand_prio_low_vector_get_blocking+0x6c>)
   1894e:	f007 fb40 	bl	1ffd2 <printk>
   18952:	4810      	ldr	r0, [pc, #64]	; (18994 <rand_prio_low_vector_get_blocking+0x64>)
   18954:	214b      	movs	r1, #75	; 0x4b
   18956:	f007 fd96 	bl	20486 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1895a:	683b      	ldr	r3, [r7, #0]
   1895c:	462a      	mov	r2, r5
   1895e:	4621      	mov	r1, r4
   18960:	4630      	mov	r0, r6
   18962:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   18964:	b180      	cbz	r0, 18988 <rand_prio_low_vector_get_blocking+0x58>
   18966:	490e      	ldr	r1, [pc, #56]	; (189a0 <rand_prio_low_vector_get_blocking+0x70>)
   18968:	4a0e      	ldr	r2, [pc, #56]	; (189a4 <rand_prio_low_vector_get_blocking+0x74>)
   1896a:	480b      	ldr	r0, [pc, #44]	; (18998 <rand_prio_low_vector_get_blocking+0x68>)
   1896c:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   18970:	f007 fb2f 	bl	1ffd2 <printk>
   18974:	480c      	ldr	r0, [pc, #48]	; (189a8 <rand_prio_low_vector_get_blocking+0x78>)
   18976:	f007 fb2c 	bl	1ffd2 <printk>
}
   1897a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1897e:	4809      	ldr	r0, [pc, #36]	; (189a4 <rand_prio_low_vector_get_blocking+0x74>)
   18980:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
   18984:	f007 bd7f 	b.w	20486 <assert_post_action>
}
   18988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1898a:	bf00      	nop
   1898c:	200023d8 	.word	0x200023d8
   18990:	000249d2 	.word	0x000249d2
   18994:	000249a5 	.word	0x000249a5
   18998:	000237c9 	.word	0x000237c9
   1899c:	000249f2 	.word	0x000249f2
   189a0:	0002423d 	.word	0x0002423d
   189a4:	00024a18 	.word	0x00024a18
   189a8:	00024a51 	.word	0x00024a51

000189ac <rand_prio_high_vector_get>:
{
   189ac:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   189ae:	4b11      	ldr	r3, [pc, #68]	; (189f4 <rand_prio_high_vector_get+0x48>)
{
   189b0:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   189b2:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   189b4:	6883      	ldr	r3, [r0, #8]
   189b6:	685d      	ldr	r5, [r3, #4]
   189b8:	460a      	mov	r2, r1
   189ba:	b1bd      	cbz	r5, 189ec <rand_prio_high_vector_get+0x40>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   189bc:	4621      	mov	r1, r4
   189be:	2300      	movs	r3, #0
   189c0:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   189c2:	1e04      	subs	r4, r0, #0
   189c4:	da0e      	bge.n	189e4 <rand_prio_high_vector_get+0x38>
   189c6:	490c      	ldr	r1, [pc, #48]	; (189f8 <rand_prio_high_vector_get+0x4c>)
   189c8:	4a0c      	ldr	r2, [pc, #48]	; (189fc <rand_prio_high_vector_get+0x50>)
   189ca:	480d      	ldr	r0, [pc, #52]	; (18a00 <rand_prio_high_vector_get+0x54>)
   189cc:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   189d0:	f007 faff 	bl	1ffd2 <printk>
   189d4:	480b      	ldr	r0, [pc, #44]	; (18a04 <rand_prio_high_vector_get+0x58>)
   189d6:	f007 fafc 	bl	1ffd2 <printk>
   189da:	4808      	ldr	r0, [pc, #32]	; (189fc <rand_prio_high_vector_get+0x50>)
   189dc:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
   189e0:	f007 fd51 	bl	20486 <assert_post_action>
	return ret >= 0 ? ret : 0;
   189e4:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   189e8:	b2c0      	uxtb	r0, r0
   189ea:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   189ec:	f06f 0485 	mvn.w	r4, #133	; 0x85
   189f0:	e7e9      	b.n	189c6 <rand_prio_high_vector_get+0x1a>
   189f2:	bf00      	nop
   189f4:	200023d8 	.word	0x200023d8
   189f8:	00024a8b 	.word	0x00024a8b
   189fc:	00024a18 	.word	0x00024a18
   18a00:	000237c9 	.word	0x000237c9
   18a04:	00024a94 	.word	0x00024a94

00018a08 <hci_driver_open>:
{
   18a08:	b530      	push	{r4, r5, lr}
   18a0a:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18a0c:	2200      	movs	r2, #0
   18a0e:	2300      	movs	r3, #0
   18a10:	e9cd 2306 	strd	r2, r3, [sp, #24]
   18a14:	2300      	movs	r3, #0
   18a16:	f06f 0209 	mvn.w	r2, #9
   18a1a:	e9cd 2303 	strd	r2, r3, [sp, #12]
   18a1e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   18a22:	9300      	str	r3, [sp, #0]
   18a24:	4946      	ldr	r1, [pc, #280]	; (18b40 <hci_driver_open+0x138>)
   18a26:	4b47      	ldr	r3, [pc, #284]	; (18b44 <hci_driver_open+0x13c>)
   18a28:	4847      	ldr	r0, [pc, #284]	; (18b48 <hci_driver_open+0x140>)
   18a2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18a2e:	f001 fac9 	bl	19fc4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   18a32:	4946      	ldr	r1, [pc, #280]	; (18b4c <hci_driver_open+0x144>)
   18a34:	4844      	ldr	r0, [pc, #272]	; (18b48 <hci_driver_open+0x140>)
   18a36:	f009 ffb3 	bl	229a0 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   18a3a:	a80b      	add	r0, sp, #44	; 0x2c
   18a3c:	f7ec f890 	bl	4b60 <sdc_build_revision_get>
			err = sdc_support_scan();
   18a40:	f7ec f9ce 	bl	4de0 <sdc_support_scan>
			if (err) {
   18a44:	b110      	cbz	r0, 18a4c <hci_driver_open+0x44>
		return -err;
   18a46:	2086      	movs	r0, #134	; 0x86
}
   18a48:	b011      	add	sp, #68	; 0x44
   18a4a:	bd30      	pop	{r4, r5, pc}
		err = sdc_support_master();
   18a4c:	f7ec f9b8 	bl	4dc0 <sdc_support_master>
		if (err) {
   18a50:	2800      	cmp	r0, #0
   18a52:	d1f8      	bne.n	18a46 <hci_driver_open+0x3e>
		err = sdc_support_dle();
   18a54:	f7ec f994 	bl	4d80 <sdc_support_dle>
		if (err) {
   18a58:	2800      	cmp	r0, #0
   18a5a:	d1f4      	bne.n	18a46 <hci_driver_open+0x3e>
		err = sdc_support_le_2m_phy();
   18a5c:	f7ec f9a0 	bl	4da0 <sdc_support_le_2m_phy>
		if (err) {
   18a60:	4605      	mov	r5, r0
   18a62:	2800      	cmp	r0, #0
   18a64:	d1ef      	bne.n	18a46 <hci_driver_open+0x3e>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18a66:	ac08      	add	r4, sp, #32
	cfg.master_count.count = SDC_MASTER_COUNT;
   18a68:	2101      	movs	r1, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18a6a:	4622      	mov	r2, r4
	cfg.master_count.count = SDC_MASTER_COUNT;
   18a6c:	f88d 1020 	strb.w	r1, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18a70:	f7ec f884 	bl	4b7c <sdc_cfg_set>
	if (required_memory < 0) {
   18a74:	2800      	cmp	r0, #0
   18a76:	dbe7      	blt.n	18a48 <hci_driver_open+0x40>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18a78:	4622      	mov	r2, r4
   18a7a:	2102      	movs	r1, #2
   18a7c:	4628      	mov	r0, r5
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   18a7e:	f88d 5020 	strb.w	r5, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18a82:	f7ec f87b 	bl	4b7c <sdc_cfg_set>
	if (required_memory < 0) {
   18a86:	2800      	cmp	r0, #0
   18a88:	dbde      	blt.n	18a48 <hci_driver_open+0x40>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   18a8a:	4b31      	ldr	r3, [pc, #196]	; (18b50 <hci_driver_open+0x148>)
   18a8c:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18a8e:	4622      	mov	r2, r4
   18a90:	2103      	movs	r1, #3
   18a92:	4628      	mov	r0, r5
   18a94:	f7ec f872 	bl	4b7c <sdc_cfg_set>
	if (required_memory < 0) {
   18a98:	2800      	cmp	r0, #0
   18a9a:	dbd5      	blt.n	18a48 <hci_driver_open+0x40>
	cfg.event_length.event_length_us =
   18a9c:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18aa0:	4622      	mov	r2, r4
   18aa2:	2104      	movs	r1, #4
   18aa4:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   18aa6:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18aa8:	f7ec f868 	bl	4b7c <sdc_cfg_set>
	if (required_memory < 0) {
   18aac:	2800      	cmp	r0, #0
   18aae:	dbcb      	blt.n	18a48 <hci_driver_open+0x40>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18ab0:	4622      	mov	r2, r4
   18ab2:	2105      	movs	r1, #5
   18ab4:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   18ab6:	f88d 5020 	strb.w	r5, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18aba:	f7ec f85f 	bl	4b7c <sdc_cfg_set>
	if (required_memory < 0) {
   18abe:	2800      	cmp	r0, #0
   18ac0:	dbc2      	blt.n	18a48 <hci_driver_open+0x40>
		cfg.scan_buffer_cfg.count = CONFIG_SDC_SCAN_BUFFER_COUNT;
   18ac2:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18ac4:	4622      	mov	r2, r4
   18ac6:	2106      	movs	r1, #6
   18ac8:	4628      	mov	r0, r5
		cfg.scan_buffer_cfg.count = CONFIG_SDC_SCAN_BUFFER_COUNT;
   18aca:	f88d 3020 	strb.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18ace:	f7ec f855 	bl	4b7c <sdc_cfg_set>
		if (required_memory < 0) {
   18ad2:	2800      	cmp	r0, #0
   18ad4:	dbb8      	blt.n	18a48 <hci_driver_open+0x40>
	if (required_memory > sizeof(sdc_mempool)) {
   18ad6:	f240 4386 	movw	r3, #1158	; 0x486
   18ada:	4298      	cmp	r0, r3
   18adc:	dd08      	ble.n	18af0 <hci_driver_open+0xe8>
		k_panic();
   18ade:	4040      	eors	r0, r0
   18ae0:	f380 8811 	msr	BASEPRI, r0
   18ae4:	f04f 0004 	mov.w	r0, #4
   18ae8:	df02      	svc	2
		return -ENOMEM;
   18aea:	f06f 000b 	mvn.w	r0, #11
   18aee:	e7ab      	b.n	18a48 <hci_driver_open+0x40>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   18af0:	4818      	ldr	r0, [pc, #96]	; (18b54 <hci_driver_open+0x14c>)
   18af2:	f000 fea7 	bl	19844 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   18af6:	4b18      	ldr	r3, [pc, #96]	; (18b58 <hci_driver_open+0x150>)
   18af8:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   18afa:	b1e8      	cbz	r0, 18b38 <hci_driver_open+0x130>
	sdc_rand_source_t rand_functions = {
   18afc:	4b17      	ldr	r3, [pc, #92]	; (18b5c <hci_driver_open+0x154>)
   18afe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   18b02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   18b06:	4620      	mov	r0, r4
   18b08:	f7ec f9cc 	bl	4ea4 <sdc_rand_source_register>
	if (err) {
   18b0c:	b988      	cbnz	r0, 18b32 <hci_driver_open+0x12a>
	err = MULTITHREADING_LOCK_ACQUIRE();
   18b0e:	f04f 30ff 	mov.w	r0, #4294967295
   18b12:	f04f 31ff 	mov.w	r1, #4294967295
   18b16:	f7ff feef 	bl	188f8 <multithreading_lock_acquire>
	if (!err) {
   18b1a:	4604      	mov	r4, r0
   18b1c:	b930      	cbnz	r0, 18b2c <hci_driver_open+0x124>
		err = sdc_enable(host_signal, sdc_mempool);
   18b1e:	4910      	ldr	r1, [pc, #64]	; (18b60 <hci_driver_open+0x158>)
   18b20:	4810      	ldr	r0, [pc, #64]	; (18b64 <hci_driver_open+0x15c>)
   18b22:	f7ec f885 	bl	4c30 <sdc_enable>
   18b26:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   18b28:	f7ff feee 	bl	18908 <multithreading_lock_release>
	if (err < 0) {
   18b2c:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   18b30:	e78a      	b.n	18a48 <hci_driver_open+0x40>
		return -EINVAL;
   18b32:	f06f 0015 	mvn.w	r0, #21
   18b36:	e787      	b.n	18a48 <hci_driver_open+0x40>
		return -ENODEV;
   18b38:	f06f 0012 	mvn.w	r0, #18
   18b3c:	e784      	b.n	18a48 <hci_driver_open+0x40>
   18b3e:	bf00      	nop
   18b40:	20003ec0 	.word	0x20003ec0
   18b44:	00018b69 	.word	0x00018b69
   18b48:	200019d8 	.word	0x200019d8
   18b4c:	00024ad8 	.word	0x00024ad8
   18b50:	02031b1b 	.word	0x02031b1b
   18b54:	00024901 	.word	0x00024901
   18b58:	200023d8 	.word	0x200023d8
   18b5c:	00023040 	.word	0x00023040
   18b60:	20002df5 	.word	0x20002df5
   18b64:	00018c49 	.word	0x00018c49

00018b68 <recv_thread>:
{
   18b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool received_data = false;
   18b6a:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   18b6c:	4f34      	ldr	r7, [pc, #208]	; (18c40 <recv_thread+0xd8>)
		errcode = hci_internal_evt_get(p_hci_buffer);
   18b6e:	4c35      	ldr	r4, [pc, #212]	; (18c44 <recv_thread+0xdc>)
	bool received_evt = false;
   18b70:	462e      	mov	r6, r5
		if (!received_evt && !received_data) {
   18b72:	b93e      	cbnz	r6, 18b84 <recv_thread+0x1c>
   18b74:	b935      	cbnz	r5, 18b84 <recv_thread+0x1c>
   18b76:	f04f 32ff 	mov.w	r2, #4294967295
   18b7a:	f04f 33ff 	mov.w	r3, #4294967295
   18b7e:	4638      	mov	r0, r7
   18b80:	f001 fec0 	bl	1a904 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   18b84:	f04f 30ff 	mov.w	r0, #4294967295
   18b88:	f04f 31ff 	mov.w	r1, #4294967295
   18b8c:	f7ff feb4 	bl	188f8 <multithreading_lock_acquire>
	if (!errcode) {
   18b90:	b158      	cbz	r0, 18baa <recv_thread+0x42>
		return false;
   18b92:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   18b94:	f04f 30ff 	mov.w	r0, #4294967295
   18b98:	f04f 31ff 	mov.w	r1, #4294967295
   18b9c:	f7ff feac 	bl	188f8 <multithreading_lock_acquire>
	if (!errcode) {
   18ba0:	b380      	cbz	r0, 18c04 <recv_thread+0x9c>
		return false;
   18ba2:	2500      	movs	r5, #0
	z_impl_k_yield();
   18ba4:	f003 fb40 	bl	1c228 <z_impl_k_yield>
}
   18ba8:	e7e3      	b.n	18b72 <recv_thread+0xa>
		errcode = hci_internal_evt_get(p_hci_buffer);
   18baa:	4826      	ldr	r0, [pc, #152]	; (18c44 <recv_thread+0xdc>)
   18bac:	f000 fb86 	bl	192bc <hci_internal_evt_get>
   18bb0:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   18bb2:	f7ff fea9 	bl	18908 <multithreading_lock_release>
	if (errcode) {
   18bb6:	2d00      	cmp	r5, #0
   18bb8:	d1eb      	bne.n	18b92 <recv_thread+0x2a>
	switch (hdr->evt) {
   18bba:	7820      	ldrb	r0, [r4, #0]
   18bbc:	283e      	cmp	r0, #62	; 0x3e
   18bbe:	d007      	beq.n	18bd0 <recv_thread+0x68>
   18bc0:	28ff      	cmp	r0, #255	; 0xff
   18bc2:	d01c      	beq.n	18bfe <recv_thread+0x96>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   18bc4:	f04f 32ff 	mov.w	r2, #4294967295
   18bc8:	f04f 33ff 	mov.w	r3, #4294967295
   18bcc:	2100      	movs	r1, #0
   18bce:	e007      	b.n	18be0 <recv_thread+0x78>
		switch (me->subevent) {
   18bd0:	78a3      	ldrb	r3, [r4, #2]
   18bd2:	2b02      	cmp	r3, #2
   18bd4:	d001      	beq.n	18bda <recv_thread+0x72>
   18bd6:	2b0d      	cmp	r3, #13
		switch (subevent) {
   18bd8:	d1f4      	bne.n	18bc4 <recv_thread+0x5c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   18bda:	2200      	movs	r2, #0
   18bdc:	2300      	movs	r3, #0
   18bde:	2101      	movs	r1, #1
   18be0:	f7fa faa0 	bl	13124 <bt_buf_get_evt>
	if (!evt_buf) {
   18be4:	4605      	mov	r5, r0
   18be6:	b140      	cbz	r0, 18bfa <recv_thread+0x92>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   18be8:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18bea:	4621      	mov	r1, r4
   18bec:	3202      	adds	r2, #2
   18bee:	3008      	adds	r0, #8
   18bf0:	f009 fd31 	bl	22656 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   18bf4:	4628      	mov	r0, r5
   18bf6:	f7fb f951 	bl	13e9c <bt_recv>
	return true;
   18bfa:	2601      	movs	r6, #1
   18bfc:	e7ca      	b.n	18b94 <recv_thread+0x2c>
		switch (subevent) {
   18bfe:	78a3      	ldrb	r3, [r4, #2]
   18c00:	2b80      	cmp	r3, #128	; 0x80
   18c02:	e7e9      	b.n	18bd8 <recv_thread+0x70>
		errcode = sdc_hci_data_get(p_hci_buffer);
   18c04:	480f      	ldr	r0, [pc, #60]	; (18c44 <recv_thread+0xdc>)
   18c06:	f7f5 f8a5 	bl	dd54 <sdc_hci_data_get>
   18c0a:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   18c0c:	f7ff fe7c 	bl	18908 <multithreading_lock_release>
	if (errcode) {
   18c10:	2d00      	cmp	r5, #0
   18c12:	d1c6      	bne.n	18ba2 <recv_thread+0x3a>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   18c14:	f04f 32ff 	mov.w	r2, #4294967295
   18c18:	f04f 33ff 	mov.w	r3, #4294967295
   18c1c:	2003      	movs	r0, #3
   18c1e:	f7fa fa37 	bl	13090 <bt_buf_get_rx>
	if (!data_buf) {
   18c22:	4605      	mov	r5, r0
   18c24:	b908      	cbnz	r0, 18c2a <recv_thread+0xc2>
	return true;
   18c26:	2501      	movs	r5, #1
   18c28:	e7bc      	b.n	18ba4 <recv_thread+0x3c>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   18c2a:	8862      	ldrh	r2, [r4, #2]
   18c2c:	4621      	mov	r1, r4
   18c2e:	3204      	adds	r2, #4
   18c30:	3008      	adds	r0, #8
   18c32:	f009 fd10 	bl	22656 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   18c36:	4628      	mov	r0, r5
   18c38:	f7fb f930 	bl	13e9c <bt_recv>
   18c3c:	e7f3      	b.n	18c26 <recv_thread+0xbe>
   18c3e:	bf00      	nop
   18c40:	200006ec 	.word	0x200006ec
   18c44:	20002daf 	.word	0x20002daf

00018c48 <host_signal>:
	z_impl_k_sem_give(sem);
   18c48:	4801      	ldr	r0, [pc, #4]	; (18c50 <host_signal+0x8>)
   18c4a:	f001 be17 	b.w	1a87c <z_impl_k_sem_give>
   18c4e:	bf00      	nop
   18c50:	200006ec 	.word	0x200006ec

00018c54 <hci_driver_send>:
{
   18c54:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   18c56:	8983      	ldrh	r3, [r0, #12]
{
   18c58:	4605      	mov	r5, r0
	if (!buf->len) {
   18c5a:	b383      	cbz	r3, 18cbe <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   18c5c:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   18c5e:	b1ab      	cbz	r3, 18c8c <hci_driver_send+0x38>
   18c60:	2b02      	cmp	r3, #2
   18c62:	d12c      	bne.n	18cbe <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   18c64:	f04f 30ff 	mov.w	r0, #4294967295
   18c68:	f04f 31ff 	mov.w	r1, #4294967295
   18c6c:	f7ff fe44 	bl	188f8 <multithreading_lock_acquire>
	if (!errcode) {
   18c70:	4604      	mov	r4, r0
   18c72:	b948      	cbnz	r0, 18c88 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   18c74:	68a8      	ldr	r0, [r5, #8]
   18c76:	f7f5 f87a 	bl	dd6e <sdc_hci_data_put>
   18c7a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   18c7c:	f7ff fe44 	bl	18908 <multithreading_lock_release>
		if (errcode) {
   18c80:	b1c4      	cbz	r4, 18cb4 <hci_driver_send+0x60>
   18c82:	4810      	ldr	r0, [pc, #64]	; (18cc4 <hci_driver_send+0x70>)
   18c84:	f001 fdfa 	bl	1a87c <z_impl_k_sem_give>
}
   18c88:	4620      	mov	r0, r4
   18c8a:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   18c8c:	f04f 30ff 	mov.w	r0, #4294967295
   18c90:	f04f 31ff 	mov.w	r1, #4294967295
   18c94:	f7ff fe30 	bl	188f8 <multithreading_lock_acquire>
	if (!errcode) {
   18c98:	4604      	mov	r4, r0
   18c9a:	2800      	cmp	r0, #0
   18c9c:	d1f4      	bne.n	18c88 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   18c9e:	68a8      	ldr	r0, [r5, #8]
   18ca0:	f000 f840 	bl	18d24 <hci_internal_cmd_put>
   18ca4:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   18ca6:	f7ff fe2f 	bl	18908 <multithreading_lock_release>
	if (errcode) {
   18caa:	2c00      	cmp	r4, #0
   18cac:	d1ec      	bne.n	18c88 <hci_driver_send+0x34>
   18cae:	4805      	ldr	r0, [pc, #20]	; (18cc4 <hci_driver_send+0x70>)
   18cb0:	f001 fde4 	bl	1a87c <z_impl_k_sem_give>
		net_buf_unref(buf);
   18cb4:	4628      	mov	r0, r5
   18cb6:	f7fe fbe7 	bl	17488 <net_buf_unref>
   18cba:	2400      	movs	r4, #0
   18cbc:	e7e4      	b.n	18c88 <hci_driver_send+0x34>
	switch (type) {
   18cbe:	f06f 0415 	mvn.w	r4, #21
   18cc2:	e7e1      	b.n	18c88 <hci_driver_send+0x34>
   18cc4:	200006ec 	.word	0x200006ec

00018cc8 <rand_prio_low_vector_get>:
{
   18cc8:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   18cca:	4b11      	ldr	r3, [pc, #68]	; (18d10 <rand_prio_low_vector_get+0x48>)
{
   18ccc:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   18cce:	6818      	ldr	r0, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
   18cd0:	6883      	ldr	r3, [r0, #8]
   18cd2:	685d      	ldr	r5, [r3, #4]
   18cd4:	460a      	mov	r2, r1
   18cd6:	b1bd      	cbz	r5, 18d08 <rand_prio_low_vector_get+0x40>
	return api->get_entropy_isr(dev, buffer, length, flags);
   18cd8:	4621      	mov	r1, r4
   18cda:	2300      	movs	r3, #0
   18cdc:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   18cde:	1e04      	subs	r4, r0, #0
   18ce0:	da0e      	bge.n	18d00 <rand_prio_low_vector_get+0x38>
   18ce2:	490c      	ldr	r1, [pc, #48]	; (18d14 <rand_prio_low_vector_get+0x4c>)
   18ce4:	4a0c      	ldr	r2, [pc, #48]	; (18d18 <rand_prio_low_vector_get+0x50>)
   18ce6:	480d      	ldr	r0, [pc, #52]	; (18d1c <rand_prio_low_vector_get+0x54>)
   18ce8:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
   18cec:	f007 f971 	bl	1ffd2 <printk>
   18cf0:	480b      	ldr	r0, [pc, #44]	; (18d20 <rand_prio_low_vector_get+0x58>)
   18cf2:	f007 f96e 	bl	1ffd2 <printk>
   18cf6:	4808      	ldr	r0, [pc, #32]	; (18d18 <rand_prio_low_vector_get+0x50>)
   18cf8:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
   18cfc:	f007 fbc3 	bl	20486 <assert_post_action>
	return ret >= 0 ? ret : 0;
   18d00:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   18d04:	b2c0      	uxtb	r0, r0
   18d06:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   18d08:	f06f 0485 	mvn.w	r4, #133	; 0x85
   18d0c:	e7e9      	b.n	18ce2 <rand_prio_low_vector_get+0x1a>
   18d0e:	bf00      	nop
   18d10:	200023d8 	.word	0x200023d8
   18d14:	00024a8b 	.word	0x00024a8b
   18d18:	00024a18 	.word	0x00024a18
   18d1c:	000237c9 	.word	0x000237c9
   18d20:	00024adf 	.word	0x00024adf

00018d24 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   18d24:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   18d26:	4cd7      	ldr	r4, [pc, #860]	; (19084 <hci_internal_cmd_put+0x360>)
   18d28:	7823      	ldrb	r3, [r4, #0]
   18d2a:	2b00      	cmp	r3, #0
   18d2c:	f040 82b0 	bne.w	19290 <hci_internal_cmd_put+0x56c>
	return ((uint16_t)src[1] << 8) | src[0];
   18d30:	7843      	ldrb	r3, [r0, #1]
   18d32:	7805      	ldrb	r5, [r0, #0]
   18d34:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   18d38:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   18d3c:	b22e      	sxth	r6, r5
   18d3e:	ea4f 2395 	mov.w	r3, r5, lsr #10
   18d42:	d209      	bcs.n	18d58 <hci_internal_cmd_put+0x34>
   18d44:	b15b      	cbz	r3, 18d5e <hci_internal_cmd_put+0x3a>
   18d46:	3b01      	subs	r3, #1
   18d48:	2b07      	cmp	r3, #7
   18d4a:	d808      	bhi.n	18d5e <hci_internal_cmd_put+0x3a>
   18d4c:	e8df f003 	tbb	[pc, r3]
   18d50:	5c28070a 	.word	0x5c28070a
   18d54:	d0070707 	.word	0xd0070707
   18d58:	2b3f      	cmp	r3, #63	; 0x3f
   18d5a:	f000 81fc 	beq.w	19156 <hci_internal_cmd_put+0x432>
   18d5e:	2104      	movs	r1, #4
   18d60:	2001      	movs	r0, #1
   18d62:	e233      	b.n	191cc <hci_internal_cmd_put+0x4a8>
	switch (opcode)	{
   18d64:	f240 4306 	movw	r3, #1030	; 0x406
   18d68:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18d6a:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   18d6e:	d005      	beq.n	18d7c <hci_internal_cmd_put+0x58>
   18d70:	f240 431d 	movw	r3, #1053	; 0x41d
   18d74:	429e      	cmp	r6, r3
   18d76:	d010      	beq.n	18d9a <hci_internal_cmd_put+0x76>
	switch (opcode)	{
   18d78:	2001      	movs	r0, #1
   18d7a:	e001      	b.n	18d80 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   18d7c:	f7f5 f93d 	bl	dffa <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   18d80:	230f      	movs	r3, #15
   18d82:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   18d84:	2304      	movs	r3, #4
   18d86:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   18d88:	2301      	movs	r3, #1
	evt_data->status = status_code;
   18d8a:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   18d8c:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   18d8e:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   18d92:	2301      	movs	r3, #1
   18d94:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   18d96:	2000      	movs	r0, #0
}
   18d98:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   18d9a:	f7f5 f930 	bl	dffe <sdc_hci_cmd_lc_read_remote_version_information>
   18d9e:	e7ef      	b.n	18d80 <hci_internal_cmd_put+0x5c>
	switch (opcode)	{
   18da0:	f640 4363 	movw	r3, #3171	; 0xc63
   18da4:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18da6:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   18daa:	d025      	beq.n	18df8 <hci_internal_cmd_put+0xd4>
   18dac:	dc0f      	bgt.n	18dce <hci_internal_cmd_put+0xaa>
   18dae:	f640 4303 	movw	r3, #3075	; 0xc03
   18db2:	429e      	cmp	r6, r3
   18db4:	d018      	beq.n	18de8 <hci_internal_cmd_put+0xc4>
   18db6:	f640 432d 	movw	r3, #3117	; 0xc2d
   18dba:	429e      	cmp	r6, r3
   18dbc:	d017      	beq.n	18dee <hci_internal_cmd_put+0xca>
   18dbe:	f640 4301 	movw	r3, #3073	; 0xc01
   18dc2:	429e      	cmp	r6, r3
   18dc4:	d1d8      	bne.n	18d78 <hci_internal_cmd_put+0x54>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   18dc6:	f7f4 ffee 	bl	dda6 <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   18dca:	2104      	movs	r1, #4
   18dcc:	e08d      	b.n	18eea <hci_internal_cmd_put+0x1c6>
	switch (opcode)	{
   18dce:	f640 437b 	movw	r3, #3195	; 0xc7b
   18dd2:	429e      	cmp	r6, r3
   18dd4:	d013      	beq.n	18dfe <hci_internal_cmd_put+0xda>
   18dd6:	f640 437c 	movw	r3, #3196	; 0xc7c
   18dda:	429e      	cmp	r6, r3
   18ddc:	d1cc      	bne.n	18d78 <hci_internal_cmd_put+0x54>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   18dde:	49aa      	ldr	r1, [pc, #680]	; (19088 <hci_internal_cmd_put+0x364>)
   18de0:	f7f4 ffeb 	bl	ddba <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   18de4:	2106      	movs	r1, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   18de6:	e080      	b.n	18eea <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_cb_reset();
   18de8:	f7ec f93a 	bl	5060 <sdc_hci_cmd_cb_reset>
   18dec:	e7ed      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   18dee:	49a6      	ldr	r1, [pc, #664]	; (19088 <hci_internal_cmd_put+0x364>)
   18df0:	f7f4 ffd7 	bl	dda2 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   18df4:	2107      	movs	r1, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   18df6:	e078      	b.n	18eea <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   18df8:	f7f4 ffda 	bl	ddb0 <sdc_hci_cmd_cb_set_event_mask_page_2>
   18dfc:	e7e5      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   18dfe:	49a2      	ldr	r1, [pc, #648]	; (19088 <hci_internal_cmd_put+0x364>)
   18e00:	f7f4 ffcd 	bl	dd9e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   18e04:	2108      	movs	r1, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   18e06:	e070      	b.n	18eea <hci_internal_cmd_put+0x1c6>
	switch (opcode)	{
   18e08:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   18e0c:	3e01      	subs	r6, #1
   18e0e:	2e08      	cmp	r6, #8
   18e10:	d8b2      	bhi.n	18d78 <hci_internal_cmd_put+0x54>
   18e12:	a301      	add	r3, pc, #4	; (adr r3, 18e18 <hci_internal_cmd_put+0xf4>)
   18e14:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   18e18:	00018e3d 	.word	0x00018e3d
   18e1c:	00018e47 	.word	0x00018e47
   18e20:	00018ebb 	.word	0x00018ebb
   18e24:	00018d79 	.word	0x00018d79
   18e28:	00018d79 	.word	0x00018d79
   18e2c:	00018d79 	.word	0x00018d79
   18e30:	00018d79 	.word	0x00018d79
   18e34:	00018d79 	.word	0x00018d79
   18e38:	00018ee3 	.word	0x00018ee3
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   18e3c:	4892      	ldr	r0, [pc, #584]	; (19088 <hci_internal_cmd_put+0x364>)
   18e3e:	f7f5 f895 	bl	df6c <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   18e42:	210c      	movs	r1, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   18e44:	e051      	b.n	18eea <hci_internal_cmd_put+0x1c6>
	memset(cmds, 0, sizeof(*cmds));
   18e46:	4890      	ldr	r0, [pc, #576]	; (19088 <hci_internal_cmd_put+0x364>)
   18e48:	222e      	movs	r2, #46	; 0x2e
   18e4a:	2100      	movs	r1, #0
   18e4c:	f009 ff2d 	bl	22caa <memset>
	cmds->hci_disconnect = 1;
   18e50:	2320      	movs	r3, #32
   18e52:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   18e54:	2380      	movs	r3, #128	; 0x80
   18e56:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   18e58:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   18e5c:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   18e5e:	2304      	movs	r3, #4
   18e60:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   18e62:	2328      	movs	r3, #40	; 0x28
   18e64:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   18e66:	2302      	movs	r3, #2
   18e68:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   18e6a:	2304      	movs	r3, #4
   18e6c:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   18e6e:	2317      	movs	r3, #23
   18e70:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_parameters = 1;
   18e74:	f06f 0303 	mvn.w	r3, #3
   18e78:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   18e7c:	23ff      	movs	r3, #255	; 0xff
   18e7e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   18e82:	2379      	movs	r3, #121	; 0x79
   18e84:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   18e88:	2330      	movs	r3, #48	; 0x30
   18e8a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   18e8e:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   18e92:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   18e96:	2379      	movs	r3, #121	; 0x79
   18e98:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   18e9c:	f06f 0301 	mvn.w	r3, #1
   18ea0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   18ea4:	2301      	movs	r3, #1
   18ea6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   18eaa:	2380      	movs	r3, #128	; 0x80
   18eac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   18eb0:	2304      	movs	r3, #4
   18eb2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->read_supported_vs_commands = 1;
   18eb6:	2144      	movs	r1, #68	; 0x44
   18eb8:	e118      	b.n	190ec <hci_internal_cmd_put+0x3c8>
	memset(features, 0, sizeof(*features));
   18eba:	4b73      	ldr	r3, [pc, #460]	; (19088 <hci_internal_cmd_put+0x364>)
   18ebc:	2000      	movs	r0, #0
   18ebe:	f8c4 0007 	str.w	r0, [r4, #7]
   18ec2:	6058      	str	r0, [r3, #4]
	features->bdedr_not_supported = 1;
   18ec4:	7ae3      	ldrb	r3, [r4, #11]
   18ec6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   18eca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   18ece:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   18ed0:	210c      	movs	r1, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   18ed2:	230e      	movs	r3, #14
   18ed4:	7063      	strb	r3, [r4, #1]
	evt_data->ncmd = 1;
   18ed6:	2301      	movs	r3, #1
	evt_hdr->len = param_length;
   18ed8:	70a1      	strb	r1, [r4, #2]
	evt_data->ncmd = 1;
   18eda:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   18edc:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   18ede:	71a0      	strb	r0, [r4, #6]
}
   18ee0:	e757      	b.n	18d92 <hci_internal_cmd_put+0x6e>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   18ee2:	4869      	ldr	r0, [pc, #420]	; (19088 <hci_internal_cmd_put+0x364>)
   18ee4:	f7f5 f840 	bl	df68 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   18ee8:	210a      	movs	r1, #10
	if (!command_generates_command_complete_event(opcode) ||
   18eea:	2801      	cmp	r0, #1
   18eec:	d1f1      	bne.n	18ed2 <hci_internal_cmd_put+0x1ae>
   18eee:	e747      	b.n	18d80 <hci_internal_cmd_put+0x5c>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18ef0:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   18ef4:	3e01      	subs	r6, #1
   18ef6:	3003      	adds	r0, #3
	switch (opcode)	{
   18ef8:	2e4d      	cmp	r6, #77	; 0x4d
   18efa:	f63f af3d 	bhi.w	18d78 <hci_internal_cmd_put+0x54>
   18efe:	a301      	add	r3, pc, #4	; (adr r3, 18f04 <hci_internal_cmd_put+0x1e0>)
   18f00:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   18f04:	0001903d 	.word	0x0001903d
   18f08:	00019043 	.word	0x00019043
   18f0c:	0001904b 	.word	0x0001904b
   18f10:	00018d79 	.word	0x00018d79
   18f14:	0001906b 	.word	0x0001906b
   18f18:	00018d79 	.word	0x00018d79
   18f1c:	00018d79 	.word	0x00018d79
   18f20:	00018d79 	.word	0x00018d79
   18f24:	00018d79 	.word	0x00018d79
   18f28:	00018d79 	.word	0x00018d79
   18f2c:	00019071 	.word	0x00019071
   18f30:	00019077 	.word	0x00019077
   18f34:	0001907d 	.word	0x0001907d
   18f38:	0001908d 	.word	0x0001908d
   18f3c:	00019093 	.word	0x00019093
   18f40:	0001909d 	.word	0x0001909d
   18f44:	000190a3 	.word	0x000190a3
   18f48:	000190a9 	.word	0x000190a9
   18f4c:	000190af 	.word	0x000190af
   18f50:	000190b5 	.word	0x000190b5
   18f54:	000190bb 	.word	0x000190bb
   18f58:	000190c5 	.word	0x000190c5
   18f5c:	000190cb 	.word	0x000190cb
   18f60:	000190d5 	.word	0x000190d5
   18f64:	000190dd 	.word	0x000190dd
   18f68:	00018d79 	.word	0x00018d79
   18f6c:	00018d79 	.word	0x00018d79
   18f70:	000190e3 	.word	0x000190e3
   18f74:	00018d79 	.word	0x00018d79
   18f78:	00018d79 	.word	0x00018d79
   18f7c:	00018d79 	.word	0x00018d79
   18f80:	00018d79 	.word	0x00018d79
   18f84:	00018d79 	.word	0x00018d79
   18f88:	000190f1 	.word	0x000190f1
   18f8c:	000190f9 	.word	0x000190f9
   18f90:	00019101 	.word	0x00019101
   18f94:	00018d79 	.word	0x00018d79
   18f98:	00018d79 	.word	0x00018d79
   18f9c:	00019107 	.word	0x00019107
   18fa0:	0001910d 	.word	0x0001910d
   18fa4:	00019113 	.word	0x00019113
   18fa8:	00019119 	.word	0x00019119
   18fac:	00018d79 	.word	0x00018d79
   18fb0:	00018d79 	.word	0x00018d79
   18fb4:	00019121 	.word	0x00019121
   18fb8:	00019127 	.word	0x00019127
   18fbc:	0001912d 	.word	0x0001912d
   18fc0:	00019135 	.word	0x00019135
   18fc4:	0001913d 	.word	0x0001913d
   18fc8:	00019143 	.word	0x00019143
   18fcc:	00018d79 	.word	0x00018d79
   18fd0:	00018d79 	.word	0x00018d79
   18fd4:	00018d79 	.word	0x00018d79
   18fd8:	00018d79 	.word	0x00018d79
   18fdc:	00018d79 	.word	0x00018d79
   18fe0:	00018d79 	.word	0x00018d79
   18fe4:	00018d79 	.word	0x00018d79
   18fe8:	00018d79 	.word	0x00018d79
   18fec:	00018d79 	.word	0x00018d79
   18ff0:	00018d79 	.word	0x00018d79
   18ff4:	00018d79 	.word	0x00018d79
   18ff8:	00018d79 	.word	0x00018d79
   18ffc:	00018d79 	.word	0x00018d79
   19000:	00018d79 	.word	0x00018d79
   19004:	00018d79 	.word	0x00018d79
   19008:	00018d79 	.word	0x00018d79
   1900c:	00018d79 	.word	0x00018d79
   19010:	00018d79 	.word	0x00018d79
   19014:	00018d79 	.word	0x00018d79
   19018:	00018d79 	.word	0x00018d79
   1901c:	00018d79 	.word	0x00018d79
   19020:	00018d79 	.word	0x00018d79
   19024:	00018d79 	.word	0x00018d79
   19028:	00018d79 	.word	0x00018d79
   1902c:	00019149 	.word	0x00019149
   19030:	00018d79 	.word	0x00018d79
   19034:	00018d79 	.word	0x00018d79
   19038:	00019151 	.word	0x00019151
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1903c:	f7f4 ffc8 	bl	dfd0 <sdc_hci_cmd_le_set_event_mask>
   19040:	e6c3      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   19042:	4811      	ldr	r0, [pc, #68]	; (19088 <hci_internal_cmd_put+0x364>)
   19044:	f7f4 ffa8 	bl	df98 <sdc_hci_cmd_le_read_buffer_size>
   19048:	e6d4      	b.n	18df4 <hci_internal_cmd_put+0xd0>
	memset(features, 0, sizeof(*features));
   1904a:	4b0f      	ldr	r3, [pc, #60]	; (19088 <hci_internal_cmd_put+0x364>)
   1904c:	2000      	movs	r0, #0
   1904e:	f8c4 0007 	str.w	r0, [r4, #7]
   19052:	7118      	strb	r0, [r3, #4]
	features->le_encryption = 1;
   19054:	79e3      	ldrb	r3, [r4, #7]
   19056:	f063 030a 	orn	r3, r3, #10
   1905a:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1905c:	7a23      	ldrb	r3, [r4, #8]
   1905e:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   19062:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   19066:	7223      	strb	r3, [r4, #8]
   19068:	e732      	b.n	18ed0 <hci_internal_cmd_put+0x1ac>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1906a:	f7f4 ffbc 	bl	dfe6 <sdc_hci_cmd_le_set_random_address>
   1906e:	e6ac      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   19070:	f7f4 ffbf 	bl	dff2 <sdc_hci_cmd_le_set_scan_params>
   19074:	e6a9      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   19076:	f7f4 ffba 	bl	dfee <sdc_hci_cmd_le_set_scan_enable>
   1907a:	e6a6      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   1907c:	f7f4 ff82 	bl	df84 <sdc_hci_cmd_le_create_conn>
   19080:	e67e      	b.n	18d80 <hci_internal_cmd_put+0x5c>
   19082:	bf00      	nop
   19084:	2000327b 	.word	0x2000327b
   19088:	20003282 	.word	0x20003282
		return sdc_hci_cmd_le_create_conn_cancel();
   1908c:	f7f4 ff7c 	bl	df88 <sdc_hci_cmd_le_create_conn_cancel>
   19090:	e69b      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   19092:	4889      	ldr	r0, [pc, #548]	; (192b8 <hci_internal_cmd_put+0x594>)
   19094:	f7f4 ff90 	bl	dfb8 <sdc_hci_cmd_le_read_white_list_size>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   19098:	2105      	movs	r1, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1909a:	e726      	b.n	18eea <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_clear_white_list();
   1909c:	f7f4 ff6e 	bl	df7c <sdc_hci_cmd_le_clear_white_list>
   190a0:	e693      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   190a2:	f7f4 ff67 	bl	df74 <sdc_hci_cmd_le_add_device_to_white_list>
   190a6:	e690      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   190a8:	f7f4 ff8a 	bl	dfc0 <sdc_hci_cmd_le_remove_device_from_white_list>
   190ac:	e68d      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   190ae:	f7f4 ff67 	bl	df80 <sdc_hci_cmd_le_conn_update>
   190b2:	e665      	b.n	18d80 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   190b4:	f7f4 ff91 	bl	dfda <sdc_hci_cmd_le_set_host_channel_classification>
   190b8:	e687      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   190ba:	497f      	ldr	r1, [pc, #508]	; (192b8 <hci_internal_cmd_put+0x594>)
   190bc:	f7f4 ff6e 	bl	df9c <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   190c0:	210b      	movs	r1, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   190c2:	e712      	b.n	18eea <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   190c4:	f7f4 ff70 	bl	dfa8 <sdc_hci_cmd_le_read_remote_features>
   190c8:	e65a      	b.n	18d80 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   190ca:	497b      	ldr	r1, [pc, #492]	; (192b8 <hci_internal_cmd_put+0x594>)
   190cc:	f7f4 ff60 	bl	df90 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   190d0:	2114      	movs	r1, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   190d2:	e70a      	b.n	18eea <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   190d4:	4878      	ldr	r0, [pc, #480]	; (192b8 <hci_internal_cmd_put+0x594>)
   190d6:	f7f4 ff5d 	bl	df94 <sdc_hci_cmd_le_rand>
   190da:	e6b2      	b.n	18e42 <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   190dc:	f7f4 ff56 	bl	df8c <sdc_hci_cmd_le_enable_encryption>
   190e0:	e64e      	b.n	18d80 <hci_internal_cmd_put+0x5c>
	*buf = states1;
   190e2:	2370      	movs	r3, #112	; 0x70
   190e4:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   190e6:	2340      	movs	r3, #64	; 0x40
   190e8:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   190ea:	210c      	movs	r1, #12
	cmds->read_supported_vs_commands = 1;
   190ec:	2000      	movs	r0, #0
   190ee:	e6f0      	b.n	18ed2 <hci_internal_cmd_put+0x1ae>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   190f0:	4971      	ldr	r1, [pc, #452]	; (192b8 <hci_internal_cmd_put+0x594>)
   190f2:	f7f4 ff69 	bl	dfc8 <sdc_hci_cmd_le_set_data_length>
   190f6:	e675      	b.n	18de4 <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   190f8:	486f      	ldr	r0, [pc, #444]	; (192b8 <hci_internal_cmd_put+0x594>)
   190fa:	f7f4 ff59 	bl	dfb0 <sdc_hci_cmd_le_read_suggested_default_data_length>
   190fe:	e681      	b.n	18e04 <hci_internal_cmd_put+0xe0>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   19100:	f7f4 ff79 	bl	dff6 <sdc_hci_cmd_le_write_suggested_default_data_length>
   19104:	e661      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   19106:	f7f4 ff33 	bl	df70 <sdc_hci_cmd_le_add_device_to_resolving_list>
   1910a:	e65e      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1910c:	f7f4 ff56 	bl	dfbc <sdc_hci_cmd_le_remove_device_from_resolving_list>
   19110:	e65b      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_clear_resolving_list();
   19112:	f7f4 ff31 	bl	df78 <sdc_hci_cmd_le_clear_resolving_list>
   19116:	e658      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   19118:	4867      	ldr	r0, [pc, #412]	; (192b8 <hci_internal_cmd_put+0x594>)
   1911a:	f7f4 ff47 	bl	dfac <sdc_hci_cmd_le_read_resolving_list_size>
   1911e:	e7bb      	b.n	19098 <hci_internal_cmd_put+0x374>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   19120:	f7f4 ff50 	bl	dfc4 <sdc_hci_cmd_le_set_address_resolution_enable>
   19124:	e651      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   19126:	f7f4 ff60 	bl	dfea <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1912a:	e64e      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1912c:	4862      	ldr	r0, [pc, #392]	; (192b8 <hci_internal_cmd_put+0x594>)
   1912e:	f7f4 ff37 	bl	dfa0 <sdc_hci_cmd_le_read_max_data_length>
   19132:	e686      	b.n	18e42 <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   19134:	4960      	ldr	r1, [pc, #384]	; (192b8 <hci_internal_cmd_put+0x594>)
   19136:	f7f4 ff35 	bl	dfa4 <sdc_hci_cmd_le_read_phy>
   1913a:	e663      	b.n	18e04 <hci_internal_cmd_put+0xe0>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1913c:	f7f4 ff46 	bl	dfcc <sdc_hci_cmd_le_set_default_phy>
   19140:	e643      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   19142:	f7f4 ff4c 	bl	dfde <sdc_hci_cmd_le_set_phy>
   19146:	e61b      	b.n	18d80 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   19148:	485b      	ldr	r0, [pc, #364]	; (192b8 <hci_internal_cmd_put+0x594>)
   1914a:	f7f4 ff33 	bl	dfb4 <sdc_hci_cmd_le_read_transmit_power>
   1914e:	e649      	b.n	18de4 <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   19150:	f7f4 ff47 	bl	dfe2 <sdc_hci_cmd_le_set_privacy_mode>
   19154:	e639      	b.n	18dca <hci_internal_cmd_put+0xa6>
	switch (opcode)	{
   19156:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1915a:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1915c:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   19160:	d820      	bhi.n	191a4 <hci_internal_cmd_put+0x480>
   19162:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   19166:	f43f ae07 	beq.w	18d78 <hci_internal_cmd_put+0x54>
   1916a:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1916e:	3b01      	subs	r3, #1
   19170:	2b09      	cmp	r3, #9
   19172:	f63f ae01 	bhi.w	18d78 <hci_internal_cmd_put+0x54>
   19176:	a201      	add	r2, pc, #4	; (adr r2, 1917c <hci_internal_cmd_put+0x458>)
   19178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1917c:	000191c5 	.word	0x000191c5
   19180:	000191f3 	.word	0x000191f3
   19184:	00018d79 	.word	0x00018d79
   19188:	00018d79 	.word	0x00018d79
   1918c:	00018d79 	.word	0x00018d79
   19190:	00019233 	.word	0x00019233
   19194:	00018d79 	.word	0x00018d79
   19198:	00018d79 	.word	0x00018d79
   1919c:	0001921f 	.word	0x0001921f
   191a0:	00019229 	.word	0x00019229
   191a4:	f505 7340 	add.w	r3, r5, #768	; 0x300
   191a8:	b29b      	uxth	r3, r3
   191aa:	2b05      	cmp	r3, #5
   191ac:	f63f ade4 	bhi.w	18d78 <hci_internal_cmd_put+0x54>
   191b0:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   191b4:	2b05      	cmp	r3, #5
   191b6:	f63f addf 	bhi.w	18d78 <hci_internal_cmd_put+0x54>
   191ba:	e8df f003 	tbb	[pc, r3]
   191be:	413e      	.short	0x413e
   191c0:	4d4a4744 	.word	0x4d4a4744
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   191c4:	483c      	ldr	r0, [pc, #240]	; (192b8 <hci_internal_cmd_put+0x594>)
   191c6:	f7eb ff5f 	bl	5088 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   191ca:	2110      	movs	r1, #16
	switch (hci_opcode) {
   191cc:	f242 0319 	movw	r3, #8217	; 0x2019
   191d0:	429e      	cmp	r6, r3
   191d2:	dc51      	bgt.n	19278 <hci_internal_cmd_put+0x554>
   191d4:	f242 030c 	movw	r3, #8204	; 0x200c
   191d8:	429e      	cmp	r6, r3
   191da:	dc40      	bgt.n	1925e <hci_internal_cmd_put+0x53a>
   191dc:	f240 4306 	movw	r3, #1030	; 0x406
   191e0:	429e      	cmp	r6, r3
   191e2:	f43f adcd 	beq.w	18d80 <hci_internal_cmd_put+0x5c>
   191e6:	f240 431d 	movw	r3, #1053	; 0x41d
   191ea:	429e      	cmp	r6, r3
   191ec:	f43f adc8 	beq.w	18d80 <hci_internal_cmd_put+0x5c>
   191f0:	e67b      	b.n	18eea <hci_internal_cmd_put+0x1c6>
	memset(cmds, 0, sizeof(*cmds));
   191f2:	2000      	movs	r0, #0
   191f4:	f8a4 0007 	strh.w	r0, [r4, #7]
	cmds->read_version_info = 1;
   191f8:	79e3      	ldrb	r3, [r4, #7]
   191fa:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   191fe:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   19202:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   19204:	7a23      	ldrb	r3, [r4, #8]
   19206:	f023 0307 	bic.w	r3, r3, #7
   1920a:	f043 0307 	orr.w	r3, r3, #7
   1920e:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   19210:	f242 0319 	movw	r3, #8217	; 0x2019
   19214:	429e      	cmp	r6, r3
   19216:	dd3e      	ble.n	19296 <hci_internal_cmd_put+0x572>
   19218:	f242 0332 	movw	r3, #8242	; 0x2032
   1921c:	e046      	b.n	192ac <hci_internal_cmd_put+0x588>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1921e:	4826      	ldr	r0, [pc, #152]	; (192b8 <hci_internal_cmd_put+0x594>)
   19220:	f7f4 fe55 	bl	dece <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   19224:	211b      	movs	r1, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   19226:	e7d1      	b.n	191cc <hci_internal_cmd_put+0x4a8>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   19228:	4823      	ldr	r0, [pc, #140]	; (192b8 <hci_internal_cmd_put+0x594>)
   1922a:	f7f4 fe03 	bl	de34 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1922e:	2124      	movs	r1, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   19230:	e7cc      	b.n	191cc <hci_internal_cmd_put+0x4a8>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   19232:	f7f4 fe97 	bl	df64 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   19236:	2104      	movs	r1, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   19238:	e7c8      	b.n	191cc <hci_internal_cmd_put+0x4a8>
	cmds->read_supported_vs_commands = 1;
   1923a:	233f      	movs	r3, #63	; 0x3f
   1923c:	71e3      	strb	r3, [r4, #7]
   1923e:	e63a      	b.n	18eb6 <hci_internal_cmd_put+0x192>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   19240:	f7f4 fdf1 	bl	de26 <sdc_hci_cmd_vs_llpm_mode_set>
   19244:	e5c1      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   19246:	f7f4 fdc2 	bl	ddce <sdc_hci_cmd_vs_conn_update>
   1924a:	e5be      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1924c:	f7f4 fdb7 	bl	ddbe <sdc_hci_cmd_vs_conn_event_extend>
   19250:	e5bb      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   19252:	f7f4 fdea 	bl	de2a <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   19256:	e5b8      	b.n	18dca <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   19258:	f7f4 fde3 	bl	de22 <sdc_hci_cmd_vs_event_length_set>
   1925c:	e5b5      	b.n	18dca <hci_internal_cmd_put+0xa6>
   1925e:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   19262:	3b0d      	subs	r3, #13
   19264:	2201      	movs	r2, #1
   19266:	b29b      	uxth	r3, r3
   19268:	fa02 f303 	lsl.w	r3, r2, r3
   1926c:	f241 2241 	movw	r2, #4673	; 0x1241
   19270:	4213      	tst	r3, r2
   19272:	f43f ae3a 	beq.w	18eea <hci_internal_cmd_put+0x1c6>
   19276:	e583      	b.n	18d80 <hci_internal_cmd_put+0x5c>
	switch (hci_opcode) {
   19278:	f242 0332 	movw	r3, #8242	; 0x2032
   1927c:	429e      	cmp	r6, r3
   1927e:	f43f ad7f 	beq.w	18d80 <hci_internal_cmd_put+0x5c>
   19282:	f5a5 5301 	sub.w	r3, r5, #8256	; 0x2040
   19286:	3b03      	subs	r3, #3
   19288:	2b01      	cmp	r3, #1
   1928a:	f67f ad79 	bls.w	18d80 <hci_internal_cmd_put+0x5c>
   1928e:	e62c      	b.n	18eea <hci_internal_cmd_put+0x1c6>
		return -NRF_EPERM;
   19290:	f04f 30ff 	mov.w	r0, #4294967295
   19294:	e580      	b.n	18d98 <hci_internal_cmd_put+0x74>
	switch (hci_opcode) {
   19296:	f242 030c 	movw	r3, #8204	; 0x200c
   1929a:	429e      	cmp	r6, r3
   1929c:	dc09      	bgt.n	192b2 <hci_internal_cmd_put+0x58e>
   1929e:	f240 4306 	movw	r3, #1030	; 0x406
   192a2:	429e      	cmp	r6, r3
   192a4:	f43f ad6c 	beq.w	18d80 <hci_internal_cmd_put+0x5c>
   192a8:	f240 431d 	movw	r3, #1053	; 0x41d
   192ac:	429e      	cmp	r6, r3
   192ae:	f43f ad67 	beq.w	18d80 <hci_internal_cmd_put+0x5c>
   192b2:	2144      	movs	r1, #68	; 0x44
   192b4:	e60d      	b.n	18ed2 <hci_internal_cmd_put+0x1ae>
   192b6:	bf00      	nop
   192b8:	20003282 	.word	0x20003282

000192bc <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   192bc:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   192be:	4c07      	ldr	r4, [pc, #28]	; (192dc <hci_internal_evt_get+0x20>)
   192c0:	7823      	ldrb	r3, [r4, #0]
   192c2:	b13b      	cbz	r3, 192d4 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
   192c4:	78a2      	ldrb	r2, [r4, #2]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   192c6:	1c61      	adds	r1, r4, #1
   192c8:	3202      	adds	r2, #2
   192ca:	f009 fcc6 	bl	22c5a <memcpy>
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   192ce:	2000      	movs	r0, #0
   192d0:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   192d2:	bd10      	pop	{r4, pc}
   192d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   192d8:	f7f4 bd54 	b.w	dd84 <sdc_hci_evt_get>
   192dc:	2000327b 	.word	0x2000327b

000192e0 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   192e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   192e4:	4e14      	ldr	r6, [pc, #80]	; (19338 <bt_rand+0x58>)
   192e6:	6833      	ldr	r3, [r6, #0]
{
   192e8:	4605      	mov	r5, r0
   192ea:	460c      	mov	r4, r1
   192ec:	4637      	mov	r7, r6
	if (unlikely(!dev)) {
   192ee:	b1c3      	cbz	r3, 19322 <bt_rand+0x42>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   192f0:	683e      	ldr	r6, [r7, #0]
   192f2:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   192f4:	68b7      	ldr	r7, [r6, #8]
	__ASSERT(api->get_entropy != NULL,
   192f6:	683b      	ldr	r3, [r7, #0]
   192f8:	b963      	cbnz	r3, 19314 <bt_rand+0x34>
   192fa:	4910      	ldr	r1, [pc, #64]	; (1933c <bt_rand+0x5c>)
   192fc:	4a10      	ldr	r2, [pc, #64]	; (19340 <bt_rand+0x60>)
   192fe:	4811      	ldr	r0, [pc, #68]	; (19344 <bt_rand+0x64>)
   19300:	234b      	movs	r3, #75	; 0x4b
   19302:	f006 fe66 	bl	1ffd2 <printk>
   19306:	4810      	ldr	r0, [pc, #64]	; (19348 <bt_rand+0x68>)
   19308:	f006 fe63 	bl	1ffd2 <printk>
   1930c:	480c      	ldr	r0, [pc, #48]	; (19340 <bt_rand+0x60>)
   1930e:	214b      	movs	r1, #75	; 0x4b
   19310:	f007 f8b9 	bl	20486 <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   19314:	683b      	ldr	r3, [r7, #0]
   19316:	4622      	mov	r2, r4
   19318:	4629      	mov	r1, r5
   1931a:	4630      	mov	r0, r6
}
   1931c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19320:	4718      	bx	r3
   19322:	480a      	ldr	r0, [pc, #40]	; (1934c <bt_rand+0x6c>)
   19324:	f000 fa8e 	bl	19844 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   19328:	6030      	str	r0, [r6, #0]
		if (!dev) {
   1932a:	2800      	cmp	r0, #0
   1932c:	d1e0      	bne.n	192f0 <bt_rand+0x10>
}
   1932e:	f06f 0012 	mvn.w	r0, #18
   19332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19336:	bf00      	nop
   19338:	200023dc 	.word	0x200023dc
   1933c:	000249d2 	.word	0x000249d2
   19340:	000249a5 	.word	0x000249a5
   19344:	000237c9 	.word	0x000237c9
   19348:	000249f2 	.word	0x000249f2
   1934c:	00024901 	.word	0x00024901

00019350 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   19350:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   19352:	2332      	movs	r3, #50	; 0x32
   19354:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19358:	4a10      	ldr	r2, [pc, #64]	; (1939c <mpsl_lib_init+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1935a:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1935c:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1935e:	2119      	movs	r1, #25
   19360:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   19362:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   19366:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1936a:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1936e:	f7eb fa1b 	bl	47a8 <mpsl_init>
	if (err) {
   19372:	4604      	mov	r4, r0
   19374:	b970      	cbnz	r0, 19394 <mpsl_lib_init+0x44>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19376:	4601      	mov	r1, r0
   19378:	462a      	mov	r2, r5
   1937a:	2008      	movs	r0, #8
   1937c:	f7f9 f970 	bl	12660 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19380:	462a      	mov	r2, r5
   19382:	4621      	mov	r1, r4
   19384:	200b      	movs	r0, #11
   19386:	f7f9 f96b 	bl	12660 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1938a:	462a      	mov	r2, r5
   1938c:	4621      	mov	r1, r4
   1938e:	4628      	mov	r0, r5
   19390:	f7f9 f966 	bl	12660 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   19394:	4620      	mov	r0, r4
   19396:	b003      	add	sp, #12
   19398:	bd30      	pop	{r4, r5, pc}
   1939a:	bf00      	nop
   1939c:	000228b5 	.word	0x000228b5

000193a0 <mpsl_low_prio_irq_handler>:
   193a0:	4801      	ldr	r0, [pc, #4]	; (193a8 <mpsl_low_prio_irq_handler+0x8>)
   193a2:	f001 ba6b 	b.w	1a87c <z_impl_k_sem_give>
   193a6:	bf00      	nop
   193a8:	20000704 	.word	0x20000704

000193ac <signal_thread>:
{
   193ac:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
   193ae:	4d0f      	ldr	r5, [pc, #60]	; (193ec <signal_thread+0x40>)
		__ASSERT_NO_MSG(errcode == 0);
   193b0:	4c0f      	ldr	r4, [pc, #60]	; (193f0 <signal_thread+0x44>)
   193b2:	f04f 32ff 	mov.w	r2, #4294967295
   193b6:	f04f 33ff 	mov.w	r3, #4294967295
   193ba:	4628      	mov	r0, r5
   193bc:	f001 faa2 	bl	1a904 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   193c0:	f04f 30ff 	mov.w	r0, #4294967295
   193c4:	f04f 31ff 	mov.w	r1, #4294967295
   193c8:	f7ff fa96 	bl	188f8 <multithreading_lock_acquire>
		__ASSERT_NO_MSG(errcode == 0);
   193cc:	b148      	cbz	r0, 193e2 <signal_thread+0x36>
   193ce:	4909      	ldr	r1, [pc, #36]	; (193f4 <signal_thread+0x48>)
   193d0:	4809      	ldr	r0, [pc, #36]	; (193f8 <signal_thread+0x4c>)
   193d2:	2346      	movs	r3, #70	; 0x46
   193d4:	4622      	mov	r2, r4
   193d6:	f006 fdfc 	bl	1ffd2 <printk>
   193da:	2146      	movs	r1, #70	; 0x46
   193dc:	4620      	mov	r0, r4
   193de:	f007 f852 	bl	20486 <assert_post_action>
		mpsl_low_priority_process();
   193e2:	f7f4 f818 	bl	d416 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   193e6:	f7ff fa8f 	bl	18908 <multithreading_lock_release>
	while (true) {
   193ea:	e7e2      	b.n	193b2 <signal_thread+0x6>
   193ec:	20000704 	.word	0x20000704
   193f0:	00024bec 	.word	0x00024bec
   193f4:	00024c19 	.word	0x00024c19
   193f8:	000237c9 	.word	0x000237c9

000193fc <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   193fc:	b530      	push	{r4, r5, lr}
   193fe:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19400:	4d0f      	ldr	r5, [pc, #60]	; (19440 <mpsl_signal_thread_init+0x44>)
   19402:	4910      	ldr	r1, [pc, #64]	; (19444 <mpsl_signal_thread_init+0x48>)
   19404:	2200      	movs	r2, #0
   19406:	2300      	movs	r3, #0
   19408:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1940c:	2400      	movs	r4, #0
   1940e:	f06f 0309 	mvn.w	r3, #9
   19412:	e9cd 3403 	strd	r3, r4, [sp, #12]
   19416:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1941a:	4b0b      	ldr	r3, [pc, #44]	; (19448 <mpsl_signal_thread_init+0x4c>)
   1941c:	9400      	str	r4, [sp, #0]
   1941e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19422:	4628      	mov	r0, r5
   19424:	f000 fdce 	bl	19fc4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19428:	4908      	ldr	r1, [pc, #32]	; (1944c <mpsl_signal_thread_init+0x50>)
   1942a:	4628      	mov	r0, r5
   1942c:	f009 fab8 	bl	229a0 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   19430:	4622      	mov	r2, r4
   19432:	2104      	movs	r1, #4
   19434:	2019      	movs	r0, #25
   19436:	f7f9 f913 	bl	12660 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1943a:	4620      	mov	r0, r4
   1943c:	b009      	add	sp, #36	; 0x24
   1943e:	bd30      	pop	{r4, r5, pc}
   19440:	20001a58 	.word	0x20001a58
   19444:	200042e0 	.word	0x200042e0
   19448:	000193ad 	.word	0x000193ad
   1944c:	00024c26 	.word	0x00024c26

00019450 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   19450:	4b01      	ldr	r3, [pc, #4]	; (19458 <mpsl_hfclk_callback+0x8>)
   19452:	2000      	movs	r0, #0
   19454:	681b      	ldr	r3, [r3, #0]
   19456:	4718      	bx	r3
   19458:	200023e0 	.word	0x200023e0

0001945c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1945c:	b510      	push	{r4, lr}
	switch (domain) {
   1945e:	b130      	cbz	r0, 1946e <nrfx_clock_start+0x12>
   19460:	2801      	cmp	r0, #1
   19462:	d10a      	bne.n	1947a <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   19464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   19468:	480b      	ldr	r0, [pc, #44]	; (19498 <nrfx_clock_start+0x3c>)
   1946a:	f7eb b81b 	b.w	44a4 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1946e:	4b0b      	ldr	r3, [pc, #44]	; (1949c <nrfx_clock_start+0x40>)
}
   19470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   19474:	681b      	ldr	r3, [r3, #0]
   19476:	2001      	movs	r0, #1
   19478:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   1947a:	4909      	ldr	r1, [pc, #36]	; (194a0 <nrfx_clock_start+0x44>)
   1947c:	4a09      	ldr	r2, [pc, #36]	; (194a4 <nrfx_clock_start+0x48>)
   1947e:	480a      	ldr	r0, [pc, #40]	; (194a8 <nrfx_clock_start+0x4c>)
   19480:	231c      	movs	r3, #28
   19482:	f006 fda6 	bl	1ffd2 <printk>
   19486:	4809      	ldr	r0, [pc, #36]	; (194ac <nrfx_clock_start+0x50>)
   19488:	f006 fda3 	bl	1ffd2 <printk>
}
   1948c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Not supported");
   19490:	4804      	ldr	r0, [pc, #16]	; (194a4 <nrfx_clock_start+0x48>)
   19492:	211c      	movs	r1, #28
   19494:	f006 bff7 	b.w	20486 <assert_post_action>
   19498:	00019451 	.word	0x00019451
   1949c:	200023e0 	.word	0x200023e0
   194a0:	00025541 	.word	0x00025541
   194a4:	00024c32 	.word	0x00024c32
   194a8:	000237c9 	.word	0x000237c9
   194ac:	00024c6f 	.word	0x00024c6f

000194b0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   194b0:	b508      	push	{r3, lr}
	switch (domain) {
   194b2:	b1a0      	cbz	r0, 194de <nrfx_clock_stop+0x2e>
   194b4:	2801      	cmp	r0, #1
   194b6:	d103      	bne.n	194c0 <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   194b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   194bc:	f7ea bfe4 	b.w	4488 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   194c0:	4907      	ldr	r1, [pc, #28]	; (194e0 <nrfx_clock_stop+0x30>)
   194c2:	4a08      	ldr	r2, [pc, #32]	; (194e4 <nrfx_clock_stop+0x34>)
   194c4:	4808      	ldr	r0, [pc, #32]	; (194e8 <nrfx_clock_stop+0x38>)
   194c6:	232a      	movs	r3, #42	; 0x2a
   194c8:	f006 fd83 	bl	1ffd2 <printk>
   194cc:	4807      	ldr	r0, [pc, #28]	; (194ec <nrfx_clock_stop+0x3c>)
   194ce:	f006 fd80 	bl	1ffd2 <printk>
}
   194d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Not supported");
   194d6:	4803      	ldr	r0, [pc, #12]	; (194e4 <nrfx_clock_stop+0x34>)
   194d8:	212a      	movs	r1, #42	; 0x2a
   194da:	f006 bfd4 	b.w	20486 <assert_post_action>
}
   194de:	bd08      	pop	{r3, pc}
   194e0:	00025541 	.word	0x00025541
   194e4:	00024c32 	.word	0x00024c32
   194e8:	000237c9 	.word	0x000237c9
   194ec:	00024c6f 	.word	0x00024c6f

000194f0 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   194f0:	4b01      	ldr	r3, [pc, #4]	; (194f8 <nrfx_clock_init+0x8>)
   194f2:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   194f4:	4801      	ldr	r0, [pc, #4]	; (194fc <nrfx_clock_init+0xc>)
   194f6:	4770      	bx	lr
   194f8:	200023e0 	.word	0x200023e0
   194fc:	0bad0000 	.word	0x0bad0000

00019500 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   19500:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19504:	4905      	ldr	r1, [pc, #20]	; (1951c <__NVIC_SystemReset+0x1c>)
   19506:	4b06      	ldr	r3, [pc, #24]	; (19520 <__NVIC_SystemReset+0x20>)
   19508:	68ca      	ldr	r2, [r1, #12]
   1950a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1950e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19510:	60cb      	str	r3, [r1, #12]
   19512:	f3bf 8f4f 	dsb	sy
    __NOP();
   19516:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   19518:	e7fd      	b.n	19516 <__NVIC_SystemReset+0x16>
   1951a:	bf00      	nop
   1951c:	e000ed00 	.word	0xe000ed00
   19520:	05fa0004 	.word	0x05fa0004

00019524 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19524:	4b03      	ldr	r3, [pc, #12]	; (19534 <nrf52_errata_136+0x10>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19526:	6818      	ldr	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   19528:	f1a0 0308 	sub.w	r3, r0, #8
   1952c:	4258      	negs	r0, r3
   1952e:	4158      	adcs	r0, r3
   19530:	4770      	bx	lr
   19532:	bf00      	nop
   19534:	10000130 	.word	0x10000130

00019538 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19538:	4b06      	ldr	r3, [pc, #24]	; (19554 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1953a:	681b      	ldr	r3, [r3, #0]
   1953c:	2b08      	cmp	r3, #8
   1953e:	d106      	bne.n	1954e <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19540:	4b05      	ldr	r3, [pc, #20]	; (19558 <nrf52_errata_103+0x20>)
   19542:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   19544:	2b05      	cmp	r3, #5
   19546:	d802      	bhi.n	1954e <nrf52_errata_103+0x16>
   19548:	4a04      	ldr	r2, [pc, #16]	; (1955c <nrf52_errata_103+0x24>)
   1954a:	5cd0      	ldrb	r0, [r2, r3]
   1954c:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1954e:	2000      	movs	r0, #0
    #endif
}
   19550:	4770      	bx	lr
   19552:	bf00      	nop
   19554:	10000130 	.word	0x10000130
   19558:	10000134 	.word	0x10000134
   1955c:	00024c85 	.word	0x00024c85

00019560 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19560:	4a02      	ldr	r2, [pc, #8]	; (1956c <nvmc_wait+0xc>)
   19562:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   19566:	2b00      	cmp	r3, #0
   19568:	d0fb      	beq.n	19562 <nvmc_wait+0x2>
}
   1956a:	4770      	bx	lr
   1956c:	4001e000 	.word	0x4001e000

00019570 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   19570:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   19572:	f7ff ffd7 	bl	19524 <nrf52_errata_136>
   19576:	b140      	cbz	r0, 1958a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   19578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1957c:	2200      	movs	r2, #0
   1957e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   19582:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   19586:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1958a:	f7ff ffcb 	bl	19524 <nrf52_errata_136>
   1958e:	2800      	cmp	r0, #0
   19590:	d046      	beq.n	19620 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19596:	4b61      	ldr	r3, [pc, #388]	; (1971c <SystemInit+0x1ac>)
   19598:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1959c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   195a0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   195a4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   195a8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   195ac:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   195b0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   195b4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   195b8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   195bc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   195c0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   195c4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   195c8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   195cc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   195d0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   195d4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   195d8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   195dc:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   195e0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   195e4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   195e8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   195ec:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   195f0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   195f4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   195f8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   195fc:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   19600:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   19604:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   19608:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1960c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   19610:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   19614:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   19618:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1961c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   19620:	f7ff ff8a 	bl	19538 <nrf52_errata_103>
   19624:	b110      	cbz	r0, 1962c <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   19626:	4b3e      	ldr	r3, [pc, #248]	; (19720 <SystemInit+0x1b0>)
   19628:	4a3e      	ldr	r2, [pc, #248]	; (19724 <SystemInit+0x1b4>)
   1962a:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1962c:	f7ff ff84 	bl	19538 <nrf52_errata_103>
   19630:	b118      	cbz	r0, 1963a <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   19632:	4b3d      	ldr	r3, [pc, #244]	; (19728 <SystemInit+0x1b8>)
   19634:	22fb      	movs	r2, #251	; 0xfb
   19636:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1963a:	f7ff ff7d 	bl	19538 <nrf52_errata_103>
   1963e:	b148      	cbz	r0, 19654 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   19640:	493a      	ldr	r1, [pc, #232]	; (1972c <SystemInit+0x1bc>)
   19642:	4b3b      	ldr	r3, [pc, #236]	; (19730 <SystemInit+0x1c0>)
   19644:	680a      	ldr	r2, [r1, #0]
   19646:	681b      	ldr	r3, [r3, #0]
   19648:	f022 020f 	bic.w	r2, r2, #15
   1964c:	f003 030f 	and.w	r3, r3, #15
   19650:	4313      	orrs	r3, r2
   19652:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   19654:	f7ff ff70 	bl	19538 <nrf52_errata_103>
   19658:	b118      	cbz	r0, 19662 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1965a:	4b36      	ldr	r3, [pc, #216]	; (19734 <SystemInit+0x1c4>)
   1965c:	f44f 7200 	mov.w	r2, #512	; 0x200
   19660:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   19662:	f7ff ff5f 	bl	19524 <nrf52_errata_136>
   19666:	b148      	cbz	r0, 1967c <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   19668:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1966c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   19670:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   19672:	bf44      	itt	mi
   19674:	f06f 0201 	mvnmi.w	r2, #1
   19678:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1967c:	4b2e      	ldr	r3, [pc, #184]	; (19738 <SystemInit+0x1c8>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1967e:	681b      	ldr	r3, [r3, #0]
   19680:	2b08      	cmp	r3, #8
   19682:	d10e      	bne.n	196a2 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19684:	4b2d      	ldr	r3, [pc, #180]	; (1973c <SystemInit+0x1cc>)
   19686:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   19688:	2b05      	cmp	r3, #5
   1968a:	d802      	bhi.n	19692 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   1968c:	4a2c      	ldr	r2, [pc, #176]	; (19740 <SystemInit+0x1d0>)
   1968e:	5cd3      	ldrb	r3, [r2, r3]
   19690:	b13b      	cbz	r3, 196a2 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   19692:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19696:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1969a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1969e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   196a2:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   196a6:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   196aa:	07db      	lsls	r3, r3, #31
   196ac:	d514      	bpl.n	196d8 <SystemInit+0x168>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   196ae:	4825      	ldr	r0, [pc, #148]	; (19744 <SystemInit+0x1d4>)
   196b0:	2301      	movs	r3, #1
   196b2:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   196b6:	f7ff ff53 	bl	19560 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   196ba:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   196be:	f023 0301 	bic.w	r3, r3, #1
   196c2:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   196c6:	f7ff ff4b 	bl	19560 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   196ca:	2300      	movs	r3, #0
   196cc:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   196d0:	f7ff ff46 	bl	19560 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   196d4:	f7ff ff14 	bl	19500 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   196d8:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   196dc:	2b00      	cmp	r3, #0
   196de:	db03      	blt.n	196e8 <SystemInit+0x178>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   196e0:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   196e4:	2b00      	cmp	r3, #0
   196e6:	da14      	bge.n	19712 <SystemInit+0x1a2>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   196e8:	4916      	ldr	r1, [pc, #88]	; (19744 <SystemInit+0x1d4>)
   196ea:	2301      	movs	r3, #1
   196ec:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   196f0:	f7ff ff36 	bl	19560 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   196f4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   196f8:	2412      	movs	r4, #18
   196fa:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   196fe:	f7ff ff2f 	bl	19560 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   19702:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   19706:	f7ff ff2b 	bl	19560 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1970a:	2300      	movs	r3, #0
   1970c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   19710:	e7de      	b.n	196d0 <SystemInit+0x160>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   19712:	4b0d      	ldr	r3, [pc, #52]	; (19748 <SystemInit+0x1d8>)
   19714:	4a0d      	ldr	r2, [pc, #52]	; (1974c <SystemInit+0x1dc>)
   19716:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   19718:	bd10      	pop	{r4, pc}
   1971a:	bf00      	nop
   1971c:	4000c000 	.word	0x4000c000
   19720:	4000568c 	.word	0x4000568c
   19724:	00038148 	.word	0x00038148
   19728:	4000f000 	.word	0x4000f000
   1972c:	40000ee4 	.word	0x40000ee4
   19730:	10000258 	.word	0x10000258
   19734:	40029640 	.word	0x40029640
   19738:	10000130 	.word	0x10000130
   1973c:	10000134 	.word	0x10000134
   19740:	00024c7f 	.word	0x00024c7f
   19744:	4001e000 	.word	0x4001e000
   19748:	20000510 	.word	0x20000510
   1974c:	03d09000 	.word	0x03d09000

00019750 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   19750:	2301      	movs	r3, #1
   19752:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   19756:	f010 0fff 	tst.w	r0, #255	; 0xff
   1975a:	d012      	beq.n	19782 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   1975c:	f04f 0340 	mov.w	r3, #64	; 0x40
   19760:	f3ef 8111 	mrs	r1, BASEPRI
   19764:	f383 8812 	msr	BASEPRI_MAX, r3
   19768:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1976c:	4a06      	ldr	r2, [pc, #24]	; (19788 <nrfx_gpiote_channel_free+0x38>)
   1976e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   19770:	ea23 0000 	bic.w	r0, r3, r0
   19774:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   19776:	f381 8811 	msr	BASEPRI, r1
   1977a:	f3bf 8f6f 	isb	sy
   1977e:	4803      	ldr	r0, [pc, #12]	; (1978c <nrfx_gpiote_channel_free+0x3c>)
   19780:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   19782:	4803      	ldr	r0, [pc, #12]	; (19790 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19784:	4770      	bx	lr
   19786:	bf00      	nop
   19788:	200023e4 	.word	0x200023e4
   1978c:	0bad0000 	.word	0x0bad0000
   19790:	0bad0004 	.word	0x0bad0004

00019794 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   19794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19798:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1979a:	f8df e060 	ldr.w	lr, [pc, #96]	; 197fc <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1979e:	4816      	ldr	r0, [pc, #88]	; (197f8 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   197a0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 19800 <nrfx_gpiote_channel_alloc+0x6c>
{
   197a4:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   197a6:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   197a8:	2601      	movs	r6, #1
   197aa:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   197ac:	f04f 0140 	mov.w	r1, #64	; 0x40
   197b0:	f3ef 8c11 	mrs	ip, BASEPRI
   197b4:	f381 8812 	msr	BASEPRI_MAX, r1
   197b8:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   197bc:	fa22 f103 	lsr.w	r1, r2, r3
   197c0:	07c9      	lsls	r1, r1, #31
   197c2:	d50a      	bpl.n	197da <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   197c4:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   197c8:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   197cc:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   197ce:	bf01      	itttt	eq
   197d0:	4339      	orreq	r1, r7
   197d2:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   197d6:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   197d8:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   197da:	f38c 8811 	msr	BASEPRI, ip
   197de:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   197e2:	4540      	cmp	r0, r8
   197e4:	d005      	beq.n	197f2 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   197e6:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   197ea:	439a      	bics	r2, r3
   197ec:	f104 0401 	add.w	r4, r4, #1
   197f0:	d1db      	bne.n	197aa <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   197f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   197f6:	bf00      	nop
   197f8:	0bad0002 	.word	0x0bad0002
   197fc:	200023e4 	.word	0x200023e4
   19800:	0bad0000 	.word	0x0bad0000

00019804 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19804:	4b0e      	ldr	r3, [pc, #56]	; (19840 <z_sys_init_run_level+0x3c>)
{
   19806:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19808:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1980c:	3001      	adds	r0, #1
   1980e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   19812:	42a6      	cmp	r6, r4
   19814:	d800      	bhi.n	19818 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   19816:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   19818:	e9d4 3500 	ldrd	r3, r5, [r4]
   1981c:	4628      	mov	r0, r5
   1981e:	4798      	blx	r3
		if (dev != NULL) {
   19820:	b165      	cbz	r5, 1983c <z_sys_init_run_level+0x38>
			if (rc != 0) {
   19822:	68eb      	ldr	r3, [r5, #12]
   19824:	b130      	cbz	r0, 19834 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   19826:	2800      	cmp	r0, #0
   19828:	bfb8      	it	lt
   1982a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1982c:	28ff      	cmp	r0, #255	; 0xff
   1982e:	bfa8      	it	ge
   19830:	20ff      	movge	r0, #255	; 0xff
   19832:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   19834:	785a      	ldrb	r2, [r3, #1]
   19836:	f042 0201 	orr.w	r2, r2, #1
   1983a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1983c:	3408      	adds	r4, #8
   1983e:	e7e8      	b.n	19812 <z_sys_init_run_level+0xe>
   19840:	00023494 	.word	0x00023494

00019844 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   19844:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   19846:	4605      	mov	r5, r0
   19848:	b910      	cbnz	r0, 19850 <z_impl_device_get_binding+0xc>
		return NULL;
   1984a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1984c:	4620      	mov	r0, r4
   1984e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   19850:	7803      	ldrb	r3, [r0, #0]
   19852:	2b00      	cmp	r3, #0
   19854:	d0f9      	beq.n	1984a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   19856:	4a0f      	ldr	r2, [pc, #60]	; (19894 <z_impl_device_get_binding+0x50>)
   19858:	4c0f      	ldr	r4, [pc, #60]	; (19898 <z_impl_device_get_binding+0x54>)
   1985a:	4616      	mov	r6, r2
   1985c:	4294      	cmp	r4, r2
   1985e:	d108      	bne.n	19872 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   19860:	4c0d      	ldr	r4, [pc, #52]	; (19898 <z_impl_device_get_binding+0x54>)
   19862:	42b4      	cmp	r4, r6
   19864:	d0f1      	beq.n	1984a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   19866:	4620      	mov	r0, r4
   19868:	f009 f866 	bl	22938 <z_device_ready>
   1986c:	b950      	cbnz	r0, 19884 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1986e:	3418      	adds	r4, #24
   19870:	e7f7      	b.n	19862 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   19872:	4620      	mov	r0, r4
   19874:	f009 f860 	bl	22938 <z_device_ready>
   19878:	b110      	cbz	r0, 19880 <z_impl_device_get_binding+0x3c>
   1987a:	6823      	ldr	r3, [r4, #0]
   1987c:	42ab      	cmp	r3, r5
   1987e:	d0e5      	beq.n	1984c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   19880:	3418      	adds	r4, #24
   19882:	e7eb      	b.n	1985c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   19884:	6821      	ldr	r1, [r4, #0]
   19886:	4628      	mov	r0, r5
   19888:	f7f3 fcae 	bl	d1e8 <strcmp>
   1988c:	2800      	cmp	r0, #0
   1988e:	d1ee      	bne.n	1986e <z_impl_device_get_binding+0x2a>
   19890:	e7dc      	b.n	1984c <z_impl_device_get_binding+0x8>
   19892:	bf00      	nop
   19894:	00022e08 	.word	0x00022e08
   19898:	00022d78 	.word	0x00022d78

0001989c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1989e:	4604      	mov	r4, r0
   198a0:	460e      	mov	r6, r1
	__asm__ volatile(
   198a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   198a6:	f3ef 8711 	mrs	r7, BASEPRI
   198aa:	f383 8812 	msr	BASEPRI_MAX, r3
   198ae:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   198b2:	f002 fe43 	bl	1c53c <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   198b6:	4631      	mov	r1, r6
   198b8:	4605      	mov	r5, r0
   198ba:	4620      	mov	r0, r4
   198bc:	f008 ffef 	bl	2289e <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   198c0:	2c04      	cmp	r4, #4
   198c2:	d10c      	bne.n	198de <z_fatal_error+0x42>
   198c4:	490a      	ldr	r1, [pc, #40]	; (198f0 <z_fatal_error+0x54>)
   198c6:	4a0b      	ldr	r2, [pc, #44]	; (198f4 <z_fatal_error+0x58>)
   198c8:	480b      	ldr	r0, [pc, #44]	; (198f8 <z_fatal_error+0x5c>)
   198ca:	238f      	movs	r3, #143	; 0x8f
   198cc:	f006 fb81 	bl	1ffd2 <printk>
   198d0:	480a      	ldr	r0, [pc, #40]	; (198fc <z_fatal_error+0x60>)
   198d2:	f006 fb7e 	bl	1ffd2 <printk>
   198d6:	4807      	ldr	r0, [pc, #28]	; (198f4 <z_fatal_error+0x58>)
   198d8:	218f      	movs	r1, #143	; 0x8f
   198da:	f006 fdd4 	bl	20486 <assert_post_action>
	__asm__ volatile(
   198de:	f387 8811 	msr	BASEPRI, r7
   198e2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   198e6:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   198e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   198ec:	f7f9 b9bc 	b.w	12c68 <z_impl_k_thread_abort>
   198f0:	00024cad 	.word	0x00024cad
   198f4:	00024c8b 	.word	0x00024c8b
   198f8:	000237c9 	.word	0x000237c9
   198fc:	00024cca 	.word	0x00024cca

00019900 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   19900:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   19902:	2300      	movs	r3, #0
{
   19904:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   19906:	2201      	movs	r2, #1
   19908:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1990c:	220f      	movs	r2, #15
   1990e:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
   19912:	4c0d      	ldr	r4, [pc, #52]	; (19948 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   19914:	4a0d      	ldr	r2, [pc, #52]	; (1994c <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   19916:	9301      	str	r3, [sp, #4]
   19918:	490d      	ldr	r1, [pc, #52]	; (19950 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1991a:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
   1991c:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   19920:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   19924:	f44f 75b0 	mov.w	r5, #352	; 0x160
   19928:	9300      	str	r3, [sp, #0]
   1992a:	fb05 1100 	mla	r1, r5, r0, r1
   1992e:	4b09      	ldr	r3, [pc, #36]	; (19954 <init_idle_thread+0x54>)
   19930:	f44f 72a0 	mov.w	r2, #320	; 0x140
   19934:	4620      	mov	r0, r4
   19936:	f000 fae1 	bl	19efc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1993a:	7b63      	ldrb	r3, [r4, #13]
   1993c:	f023 0304 	bic.w	r3, r3, #4
   19940:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   19942:	b007      	add	sp, #28
   19944:	bd30      	pop	{r4, r5, pc}
   19946:	bf00      	nop
   19948:	20001ad8 	.word	0x20001ad8
   1994c:	20002444 	.word	0x20002444
   19950:	20006720 	.word	0x20006720
   19954:	0001a1cd 	.word	0x0001a1cd

00019958 <bg_thread_main>:
{
   19958:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1995a:	4b0a      	ldr	r3, [pc, #40]	; (19984 <bg_thread_main+0x2c>)
   1995c:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1995e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   19960:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   19962:	f7ff ff4f 	bl	19804 <z_sys_init_run_level>
	boot_banner();
   19966:	f009 f968 	bl	22c3a <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1996a:	2003      	movs	r0, #3
   1996c:	f7ff ff4a 	bl	19804 <z_sys_init_run_level>
	z_init_static_threads();
   19970:	f000 fb76 	bl	1a060 <z_init_static_threads>
	main();
   19974:	f7f7 f8e0 	bl	10b38 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   19978:	4a03      	ldr	r2, [pc, #12]	; (19988 <bg_thread_main+0x30>)
   1997a:	7b13      	ldrb	r3, [r2, #12]
   1997c:	f023 0301 	bic.w	r3, r3, #1
   19980:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   19982:	bd08      	pop	{r3, pc}
   19984:	200032c2 	.word	0x200032c2
   19988:	20001b58 	.word	0x20001b58

0001998c <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1998c:	4802      	ldr	r0, [pc, #8]	; (19998 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   1998e:	4a03      	ldr	r2, [pc, #12]	; (1999c <z_bss_zero+0x10>)
   19990:	2100      	movs	r1, #0
   19992:	1a12      	subs	r2, r2, r0
   19994:	f009 b989 	b.w	22caa <memset>
   19998:	20000840 	.word	0x20000840
   1999c:	20003480 	.word	0x20003480

000199a0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   199a0:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   199a2:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 19a80 <z_cstart+0xe0>
   199a6:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   199a8:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   199ac:	4d2e      	ldr	r5, [pc, #184]	; (19a68 <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   199ae:	4e2f      	ldr	r6, [pc, #188]	; (19a6c <z_cstart+0xcc>)
   199b0:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   199b2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 19a84 <z_cstart+0xe4>
   199b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   199ba:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   199bc:	23e0      	movs	r3, #224	; 0xe0
   199be:	2400      	movs	r4, #0
   199c0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   199c4:	2320      	movs	r3, #32
   199c6:	77eb      	strb	r3, [r5, #31]
   199c8:	762c      	strb	r4, [r5, #24]
   199ca:	766c      	strb	r4, [r5, #25]
   199cc:	76ac      	strb	r4, [r5, #26]
   199ce:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   199d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   199d4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   199d8:	626b      	str	r3, [r5, #36]	; 0x24
   199da:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   199de:	f7f9 f8b9 	bl	12b54 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   199e2:	f7f8 fded 	bl	125c0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   199e6:	f04f 33ff 	mov.w	r3, #4294967295
   199ea:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   199ec:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   199ee:	f7f9 fa15 	bl	12e1c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   199f2:	f7f9 f94b 	bl	12c8c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   199f6:	f240 1301 	movw	r3, #257	; 0x101
   199fa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   199fe:	ab06      	add	r3, sp, #24
   19a00:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   19a02:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   19a06:	f008 ff96 	bl	22936 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   19a0a:	4620      	mov	r0, r4
   19a0c:	f7ff fefa 	bl	19804 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   19a10:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   19a12:	4d17      	ldr	r5, [pc, #92]	; (19a70 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   19a14:	f7ff fef6 	bl	19804 <z_sys_init_run_level>
	z_sched_init();
   19a18:	f002 fbfa 	bl	1c210 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19a1c:	4b15      	ldr	r3, [pc, #84]	; (19a74 <z_cstart+0xd4>)
   19a1e:	9305      	str	r3, [sp, #20]
   19a20:	2301      	movs	r3, #1
   19a22:	4915      	ldr	r1, [pc, #84]	; (19a78 <z_cstart+0xd8>)
   19a24:	9400      	str	r4, [sp, #0]
   19a26:	e9cd 4303 	strd	r4, r3, [sp, #12]
   19a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   19a2e:	464b      	mov	r3, r9
   19a30:	e9cd 4401 	strd	r4, r4, [sp, #4]
   19a34:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   19a36:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19a38:	f000 fa60 	bl	19efc <z_setup_new_thread>
   19a3c:	7b6a      	ldrb	r2, [r5, #13]
   19a3e:	f022 0204 	bic.w	r2, r2, #4
   19a42:	736a      	strb	r2, [r5, #13]
   19a44:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
   19a46:	4628      	mov	r0, r5
   19a48:	f002 f82e 	bl	1baa8 <z_ready_thread>
		init_idle_thread(i);
   19a4c:	4620      	mov	r0, r4
   19a4e:	f7ff ff57 	bl	19900 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   19a52:	4b0a      	ldr	r3, [pc, #40]	; (19a7c <z_cstart+0xdc>)
   19a54:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   19a56:	464a      	mov	r2, r9
   19a58:	4639      	mov	r1, r7
   19a5a:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   19a5c:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   19a5e:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   19a62:	f7f8 feed 	bl	12840 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   19a66:	bf00      	nop
   19a68:	e000ed00 	.word	0xe000ed00
   19a6c:	20002444 	.word	0x20002444
   19a70:	20001b58 	.word	0x20001b58
   19a74:	00024cff 	.word	0x00024cff
   19a78:	20004700 	.word	0x20004700
   19a7c:	20001ad8 	.word	0x20001ad8
   19a80:	200070a0 	.word	0x200070a0
   19a84:	00019959 	.word	0x00019959

00019a88 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   19a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   19a8a:	4d0f      	ldr	r5, [pc, #60]	; (19ac8 <statics_init+0x40>)
   19a8c:	4c0f      	ldr	r4, [pc, #60]	; (19acc <statics_init+0x44>)
   19a8e:	4e10      	ldr	r6, [pc, #64]	; (19ad0 <statics_init+0x48>)
   19a90:	462f      	mov	r7, r5
   19a92:	42ac      	cmp	r4, r5
   19a94:	d90c      	bls.n	19ab0 <statics_init+0x28>
   19a96:	490f      	ldr	r1, [pc, #60]	; (19ad4 <statics_init+0x4c>)
   19a98:	480f      	ldr	r0, [pc, #60]	; (19ad8 <statics_init+0x50>)
   19a9a:	2318      	movs	r3, #24
   19a9c:	4632      	mov	r2, r6
   19a9e:	f006 fa98 	bl	1ffd2 <printk>
   19aa2:	480e      	ldr	r0, [pc, #56]	; (19adc <statics_init+0x54>)
   19aa4:	f006 fa95 	bl	1ffd2 <printk>
   19aa8:	2118      	movs	r1, #24
   19aaa:	4630      	mov	r0, r6
   19aac:	f006 fceb 	bl	20486 <assert_post_action>
   19ab0:	42bc      	cmp	r4, r7
   19ab2:	d301      	bcc.n	19ab8 <statics_init+0x30>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   19ab4:	2000      	movs	r0, #0
   19ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   19ab8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   19abc:	4620      	mov	r0, r4
   19abe:	f008 ff45 	bl	2294c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   19ac2:	3418      	adds	r4, #24
   19ac4:	e7e5      	b.n	19a92 <statics_init+0xa>
   19ac6:	bf00      	nop
   19ac8:	20000674 	.word	0x20000674
   19acc:	2000065c 	.word	0x2000065c
   19ad0:	00024d04 	.word	0x00024d04
   19ad4:	00024d26 	.word	0x00024d26
   19ad8:	000237c9 	.word	0x000237c9
   19adc:	000242e2 	.word	0x000242e2

00019ae0 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   19ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ae4:	b087      	sub	sp, #28
   19ae6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   19aea:	4606      	mov	r6, r0
   19aec:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   19aee:	4640      	mov	r0, r8
   19af0:	4649      	mov	r1, r9
{
   19af2:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   19af4:	f009 f82e 	bl	22b54 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   19af8:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   19afc:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   19b00:	f04f 0340 	mov.w	r3, #64	; 0x40
   19b04:	f3ef 8511 	mrs	r5, BASEPRI
   19b08:	f383 8812 	msr	BASEPRI_MAX, r3
   19b0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19b10:	4620      	mov	r0, r4
   19b12:	f000 fb35 	bl	1a180 <z_spin_lock_valid>
   19b16:	b968      	cbnz	r0, 19b34 <k_heap_aligned_alloc+0x54>
   19b18:	4a3f      	ldr	r2, [pc, #252]	; (19c18 <k_heap_aligned_alloc+0x138>)
   19b1a:	4940      	ldr	r1, [pc, #256]	; (19c1c <k_heap_aligned_alloc+0x13c>)
   19b1c:	4840      	ldr	r0, [pc, #256]	; (19c20 <k_heap_aligned_alloc+0x140>)
   19b1e:	2381      	movs	r3, #129	; 0x81
   19b20:	f006 fa57 	bl	1ffd2 <printk>
   19b24:	483f      	ldr	r0, [pc, #252]	; (19c24 <k_heap_aligned_alloc+0x144>)
   19b26:	4621      	mov	r1, r4
   19b28:	f006 fa53 	bl	1ffd2 <printk>
   19b2c:	483a      	ldr	r0, [pc, #232]	; (19c18 <k_heap_aligned_alloc+0x138>)
   19b2e:	2181      	movs	r1, #129	; 0x81
   19b30:	f006 fca9 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   19b34:	4620      	mov	r0, r4
   19b36:	f000 fb41 	bl	1a1bc <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   19b3a:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   19b3e:	b17b      	cbz	r3, 19b60 <k_heap_aligned_alloc+0x80>
   19b40:	ea58 0309 	orrs.w	r3, r8, r9
   19b44:	d00c      	beq.n	19b60 <k_heap_aligned_alloc+0x80>
   19b46:	4938      	ldr	r1, [pc, #224]	; (19c28 <k_heap_aligned_alloc+0x148>)
   19b48:	4a38      	ldr	r2, [pc, #224]	; (19c2c <k_heap_aligned_alloc+0x14c>)
   19b4a:	4835      	ldr	r0, [pc, #212]	; (19c20 <k_heap_aligned_alloc+0x140>)
   19b4c:	2349      	movs	r3, #73	; 0x49
   19b4e:	f006 fa40 	bl	1ffd2 <printk>
   19b52:	4837      	ldr	r0, [pc, #220]	; (19c30 <k_heap_aligned_alloc+0x150>)
   19b54:	f006 fa3d 	bl	1ffd2 <printk>
   19b58:	4834      	ldr	r0, [pc, #208]	; (19c2c <k_heap_aligned_alloc+0x14c>)
   19b5a:	2149      	movs	r1, #73	; 0x49
   19b5c:	f006 fc93 	bl	20486 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19b60:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 19c18 <k_heap_aligned_alloc+0x138>
   19b64:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 19c1c <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   19b68:	4652      	mov	r2, sl
   19b6a:	4659      	mov	r1, fp
   19b6c:	4630      	mov	r0, r6
   19b6e:	f7f7 fb65 	bl	1123c <sys_heap_aligned_alloc>
   19b72:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
   19b74:	f003 f906 	bl	1cd84 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   19b78:	b1cf      	cbz	r7, 19bae <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19b7a:	4620      	mov	r0, r4
   19b7c:	f000 fb0e 	bl	1a19c <z_spin_unlock_valid>
   19b80:	b968      	cbnz	r0, 19b9e <k_heap_aligned_alloc+0xbe>
   19b82:	4a25      	ldr	r2, [pc, #148]	; (19c18 <k_heap_aligned_alloc+0x138>)
   19b84:	492b      	ldr	r1, [pc, #172]	; (19c34 <k_heap_aligned_alloc+0x154>)
   19b86:	4826      	ldr	r0, [pc, #152]	; (19c20 <k_heap_aligned_alloc+0x140>)
   19b88:	23ac      	movs	r3, #172	; 0xac
   19b8a:	f006 fa22 	bl	1ffd2 <printk>
   19b8e:	482a      	ldr	r0, [pc, #168]	; (19c38 <k_heap_aligned_alloc+0x158>)
   19b90:	4621      	mov	r1, r4
   19b92:	f006 fa1e 	bl	1ffd2 <printk>
   19b96:	4820      	ldr	r0, [pc, #128]	; (19c18 <k_heap_aligned_alloc+0x138>)
   19b98:	21ac      	movs	r1, #172	; 0xac
   19b9a:	f006 fc74 	bl	20486 <assert_post_action>
	__asm__ volatile(
   19b9e:	f385 8811 	msr	BASEPRI, r5
   19ba2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   19ba6:	4638      	mov	r0, r7
   19ba8:	b007      	add	sp, #28
   19baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   19bae:	9b04      	ldr	r3, [sp, #16]
   19bb0:	1a1b      	subs	r3, r3, r0
   19bb2:	9302      	str	r3, [sp, #8]
   19bb4:	9b05      	ldr	r3, [sp, #20]
   19bb6:	eb63 0301 	sbc.w	r3, r3, r1
   19bba:	9303      	str	r3, [sp, #12]
   19bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19bc0:	2a01      	cmp	r2, #1
   19bc2:	f173 0300 	sbcs.w	r3, r3, #0
   19bc6:	dbd8      	blt.n	19b7a <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   19bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19bcc:	4629      	mov	r1, r5
   19bce:	e9cd 2300 	strd	r2, r3, [sp]
   19bd2:	4620      	mov	r0, r4
   19bd4:	f106 020c 	add.w	r2, r6, #12
   19bd8:	f002 f918 	bl	1be0c <z_pend_curr>
	__asm__ volatile(
   19bdc:	f04f 0340 	mov.w	r3, #64	; 0x40
   19be0:	f3ef 8511 	mrs	r5, BASEPRI
   19be4:	f383 8812 	msr	BASEPRI_MAX, r3
   19be8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19bec:	4620      	mov	r0, r4
   19bee:	f000 fac7 	bl	1a180 <z_spin_lock_valid>
   19bf2:	b968      	cbnz	r0, 19c10 <k_heap_aligned_alloc+0x130>
   19bf4:	480a      	ldr	r0, [pc, #40]	; (19c20 <k_heap_aligned_alloc+0x140>)
   19bf6:	2381      	movs	r3, #129	; 0x81
   19bf8:	4642      	mov	r2, r8
   19bfa:	4649      	mov	r1, r9
   19bfc:	f006 f9e9 	bl	1ffd2 <printk>
   19c00:	4808      	ldr	r0, [pc, #32]	; (19c24 <k_heap_aligned_alloc+0x144>)
   19c02:	4621      	mov	r1, r4
   19c04:	f006 f9e5 	bl	1ffd2 <printk>
   19c08:	2181      	movs	r1, #129	; 0x81
   19c0a:	4640      	mov	r0, r8
   19c0c:	f006 fc3b 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   19c10:	4620      	mov	r0, r4
   19c12:	f000 fad3 	bl	1a1bc <z_spin_lock_set_owner>
	return k;
   19c16:	e7a7      	b.n	19b68 <k_heap_aligned_alloc+0x88>
   19c18:	00023889 	.word	0x00023889
   19c1c:	000238db 	.word	0x000238db
   19c20:	000237c9 	.word	0x000237c9
   19c24:	000238f0 	.word	0x000238f0
   19c28:	00024d3c 	.word	0x00024d3c
   19c2c:	00024d04 	.word	0x00024d04
   19c30:	000246b6 	.word	0x000246b6
   19c34:	000238af 	.word	0x000238af
   19c38:	000238c6 	.word	0x000238c6

00019c3c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   19c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c3e:	4605      	mov	r5, r0
   19c40:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   19c42:	f100 0414 	add.w	r4, r0, #20
   19c46:	f04f 0340 	mov.w	r3, #64	; 0x40
   19c4a:	f3ef 8711 	mrs	r7, BASEPRI
   19c4e:	f383 8812 	msr	BASEPRI_MAX, r3
   19c52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19c56:	4620      	mov	r0, r4
   19c58:	f000 fa92 	bl	1a180 <z_spin_lock_valid>
   19c5c:	b968      	cbnz	r0, 19c7a <k_heap_free+0x3e>
   19c5e:	4a1b      	ldr	r2, [pc, #108]	; (19ccc <k_heap_free+0x90>)
   19c60:	491b      	ldr	r1, [pc, #108]	; (19cd0 <k_heap_free+0x94>)
   19c62:	481c      	ldr	r0, [pc, #112]	; (19cd4 <k_heap_free+0x98>)
   19c64:	2381      	movs	r3, #129	; 0x81
   19c66:	f006 f9b4 	bl	1ffd2 <printk>
   19c6a:	481b      	ldr	r0, [pc, #108]	; (19cd8 <k_heap_free+0x9c>)
   19c6c:	4621      	mov	r1, r4
   19c6e:	f006 f9b0 	bl	1ffd2 <printk>
   19c72:	4816      	ldr	r0, [pc, #88]	; (19ccc <k_heap_free+0x90>)
   19c74:	2181      	movs	r1, #129	; 0x81
   19c76:	f006 fc06 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   19c7a:	4620      	mov	r0, r4
   19c7c:	f000 fa9e 	bl	1a1bc <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   19c80:	4628      	mov	r0, r5
   19c82:	4631      	mov	r1, r6
   19c84:	f7f7 fa84 	bl	11190 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   19c88:	f105 000c 	add.w	r0, r5, #12
   19c8c:	f008 ff4a 	bl	22b24 <z_unpend_all>
   19c90:	b128      	cbz	r0, 19c9e <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   19c92:	4639      	mov	r1, r7
   19c94:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   19c96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   19c9a:	f001 bc65 	b.w	1b568 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19c9e:	4620      	mov	r0, r4
   19ca0:	f000 fa7c 	bl	1a19c <z_spin_unlock_valid>
   19ca4:	b968      	cbnz	r0, 19cc2 <k_heap_free+0x86>
   19ca6:	4a09      	ldr	r2, [pc, #36]	; (19ccc <k_heap_free+0x90>)
   19ca8:	490c      	ldr	r1, [pc, #48]	; (19cdc <k_heap_free+0xa0>)
   19caa:	480a      	ldr	r0, [pc, #40]	; (19cd4 <k_heap_free+0x98>)
   19cac:	23ac      	movs	r3, #172	; 0xac
   19cae:	f006 f990 	bl	1ffd2 <printk>
   19cb2:	480b      	ldr	r0, [pc, #44]	; (19ce0 <k_heap_free+0xa4>)
   19cb4:	4621      	mov	r1, r4
   19cb6:	f006 f98c 	bl	1ffd2 <printk>
   19cba:	4804      	ldr	r0, [pc, #16]	; (19ccc <k_heap_free+0x90>)
   19cbc:	21ac      	movs	r1, #172	; 0xac
   19cbe:	f006 fbe2 	bl	20486 <assert_post_action>
	__asm__ volatile(
   19cc2:	f387 8811 	msr	BASEPRI, r7
   19cc6:	f3bf 8f6f 	isb	sy
}
   19cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19ccc:	00023889 	.word	0x00023889
   19cd0:	000238db 	.word	0x000238db
   19cd4:	000237c9 	.word	0x000237c9
   19cd8:	000238f0 	.word	0x000238f0
   19cdc:	000238af 	.word	0x000238af
   19ce0:	000238c6 	.word	0x000238c6

00019ce4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   19ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19ce8:	4d16      	ldr	r5, [pc, #88]	; (19d44 <init_mem_slab_module+0x60>)
   19cea:	4c17      	ldr	r4, [pc, #92]	; (19d48 <init_mem_slab_module+0x64>)
   19cec:	4e17      	ldr	r6, [pc, #92]	; (19d4c <init_mem_slab_module+0x68>)
   19cee:	46a8      	mov	r8, r5
   19cf0:	42ac      	cmp	r4, r5
   19cf2:	d90c      	bls.n	19d0e <init_mem_slab_module+0x2a>
   19cf4:	4916      	ldr	r1, [pc, #88]	; (19d50 <init_mem_slab_module+0x6c>)
   19cf6:	4817      	ldr	r0, [pc, #92]	; (19d54 <init_mem_slab_module+0x70>)
   19cf8:	233c      	movs	r3, #60	; 0x3c
   19cfa:	4632      	mov	r2, r6
   19cfc:	f006 f969 	bl	1ffd2 <printk>
   19d00:	4815      	ldr	r0, [pc, #84]	; (19d58 <init_mem_slab_module+0x74>)
   19d02:	f006 f966 	bl	1ffd2 <printk>
   19d06:	213c      	movs	r1, #60	; 0x3c
   19d08:	4630      	mov	r0, r6
   19d0a:	f006 fbbc 	bl	20486 <assert_post_action>
   19d0e:	4544      	cmp	r4, r8
   19d10:	d302      	bcc.n	19d18 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
   19d12:	2000      	movs	r0, #0
	return rc;
}
   19d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   19d18:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   19d1c:	ea41 0302 	orr.w	r3, r1, r2
   19d20:	f013 0303 	ands.w	r3, r3, #3
   19d24:	d10b      	bne.n	19d3e <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   19d26:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   19d28:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   19d2a:	4283      	cmp	r3, r0
   19d2c:	d101      	bne.n	19d32 <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19d2e:	3420      	adds	r4, #32
   19d30:	e7de      	b.n	19cf0 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   19d32:	69a7      	ldr	r7, [r4, #24]
   19d34:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   19d36:	3301      	adds	r3, #1
		slab->free_list = p;
   19d38:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
   19d3a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   19d3c:	e7f5      	b.n	19d2a <init_mem_slab_module+0x46>
		return -EINVAL;
   19d3e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   19d42:	e7e7      	b.n	19d14 <init_mem_slab_module+0x30>
   19d44:	2000065c 	.word	0x2000065c
   19d48:	200005fc 	.word	0x200005fc
   19d4c:	00024d81 	.word	0x00024d81
   19d50:	00024da6 	.word	0x00024da6
   19d54:	000237c9 	.word	0x000237c9
   19d58:	000242e2 	.word	0x000242e2

00019d5c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   19d5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   19d60:	4604      	mov	r4, r0
   19d62:	460e      	mov	r6, r1
   19d64:	4690      	mov	r8, r2
   19d66:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   19d68:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   19d6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   19d70:	f3ef 8711 	mrs	r7, BASEPRI
   19d74:	f383 8812 	msr	BASEPRI_MAX, r3
   19d78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19d7c:	4628      	mov	r0, r5
   19d7e:	f000 f9ff 	bl	1a180 <z_spin_lock_valid>
   19d82:	b968      	cbnz	r0, 19da0 <k_mem_slab_alloc+0x44>
   19d84:	4a24      	ldr	r2, [pc, #144]	; (19e18 <k_mem_slab_alloc+0xbc>)
   19d86:	4925      	ldr	r1, [pc, #148]	; (19e1c <k_mem_slab_alloc+0xc0>)
   19d88:	4825      	ldr	r0, [pc, #148]	; (19e20 <k_mem_slab_alloc+0xc4>)
   19d8a:	2381      	movs	r3, #129	; 0x81
   19d8c:	f006 f921 	bl	1ffd2 <printk>
   19d90:	4824      	ldr	r0, [pc, #144]	; (19e24 <k_mem_slab_alloc+0xc8>)
   19d92:	4629      	mov	r1, r5
   19d94:	f006 f91d 	bl	1ffd2 <printk>
   19d98:	481f      	ldr	r0, [pc, #124]	; (19e18 <k_mem_slab_alloc+0xbc>)
   19d9a:	2181      	movs	r1, #129	; 0x81
   19d9c:	f006 fb73 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   19da0:	4628      	mov	r0, r5
   19da2:	f000 fa0b 	bl	1a1bc <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   19da6:	69a3      	ldr	r3, [r4, #24]
   19da8:	b1eb      	cbz	r3, 19de6 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
   19daa:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   19dac:	681b      	ldr	r3, [r3, #0]
   19dae:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   19db0:	69e3      	ldr	r3, [r4, #28]
   19db2:	3301      	adds	r3, #1
   19db4:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   19db6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19db8:	4628      	mov	r0, r5
   19dba:	f000 f9ef 	bl	1a19c <z_spin_unlock_valid>
   19dbe:	b968      	cbnz	r0, 19ddc <k_mem_slab_alloc+0x80>
   19dc0:	4a15      	ldr	r2, [pc, #84]	; (19e18 <k_mem_slab_alloc+0xbc>)
   19dc2:	4919      	ldr	r1, [pc, #100]	; (19e28 <k_mem_slab_alloc+0xcc>)
   19dc4:	4816      	ldr	r0, [pc, #88]	; (19e20 <k_mem_slab_alloc+0xc4>)
   19dc6:	23ac      	movs	r3, #172	; 0xac
   19dc8:	f006 f903 	bl	1ffd2 <printk>
   19dcc:	4817      	ldr	r0, [pc, #92]	; (19e2c <k_mem_slab_alloc+0xd0>)
   19dce:	4629      	mov	r1, r5
   19dd0:	f006 f8ff 	bl	1ffd2 <printk>
   19dd4:	4810      	ldr	r0, [pc, #64]	; (19e18 <k_mem_slab_alloc+0xbc>)
   19dd6:	21ac      	movs	r1, #172	; 0xac
   19dd8:	f006 fb55 	bl	20486 <assert_post_action>
	__asm__ volatile(
   19ddc:	f387 8811 	msr	BASEPRI, r7
   19de0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   19de4:	e013      	b.n	19e0e <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   19de6:	ea58 0209 	orrs.w	r2, r8, r9
   19dea:	d103      	bne.n	19df4 <k_mem_slab_alloc+0x98>
		*mem = NULL;
   19dec:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   19dee:	f06f 040b 	mvn.w	r4, #11
   19df2:	e7e1      	b.n	19db8 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   19df4:	4622      	mov	r2, r4
   19df6:	e9cd 8900 	strd	r8, r9, [sp]
   19dfa:	4639      	mov	r1, r7
   19dfc:	4628      	mov	r0, r5
   19dfe:	f002 f805 	bl	1be0c <z_pend_curr>
		if (result == 0) {
   19e02:	4604      	mov	r4, r0
   19e04:	b918      	cbnz	r0, 19e0e <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
   19e06:	4b0a      	ldr	r3, [pc, #40]	; (19e30 <k_mem_slab_alloc+0xd4>)
   19e08:	689b      	ldr	r3, [r3, #8]
   19e0a:	695b      	ldr	r3, [r3, #20]
   19e0c:	6033      	str	r3, [r6, #0]
}
   19e0e:	4620      	mov	r0, r4
   19e10:	b003      	add	sp, #12
   19e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19e16:	bf00      	nop
   19e18:	00023889 	.word	0x00023889
   19e1c:	000238db 	.word	0x000238db
   19e20:	000237c9 	.word	0x000237c9
   19e24:	000238f0 	.word	0x000238f0
   19e28:	000238af 	.word	0x000238af
   19e2c:	000238c6 	.word	0x000238c6
   19e30:	20002444 	.word	0x20002444

00019e34 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   19e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e38:	4604      	mov	r4, r0
   19e3a:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   19e3c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   19e40:	f04f 0340 	mov.w	r3, #64	; 0x40
   19e44:	f3ef 8711 	mrs	r7, BASEPRI
   19e48:	f383 8812 	msr	BASEPRI_MAX, r3
   19e4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19e50:	4628      	mov	r0, r5
   19e52:	f000 f995 	bl	1a180 <z_spin_lock_valid>
   19e56:	b968      	cbnz	r0, 19e74 <k_mem_slab_free+0x40>
   19e58:	4a22      	ldr	r2, [pc, #136]	; (19ee4 <k_mem_slab_free+0xb0>)
   19e5a:	4923      	ldr	r1, [pc, #140]	; (19ee8 <k_mem_slab_free+0xb4>)
   19e5c:	4823      	ldr	r0, [pc, #140]	; (19eec <k_mem_slab_free+0xb8>)
   19e5e:	2381      	movs	r3, #129	; 0x81
   19e60:	f006 f8b7 	bl	1ffd2 <printk>
   19e64:	4822      	ldr	r0, [pc, #136]	; (19ef0 <k_mem_slab_free+0xbc>)
   19e66:	4629      	mov	r1, r5
   19e68:	f006 f8b3 	bl	1ffd2 <printk>
   19e6c:	481d      	ldr	r0, [pc, #116]	; (19ee4 <k_mem_slab_free+0xb0>)
   19e6e:	2181      	movs	r1, #129	; 0x81
   19e70:	f006 fb09 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   19e74:	4628      	mov	r0, r5
   19e76:	f000 f9a1 	bl	1a1bc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   19e7a:	f8d4 8018 	ldr.w	r8, [r4, #24]
   19e7e:	f1b8 0f00 	cmp.w	r8, #0
   19e82:	d10f      	bne.n	19ea4 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   19e84:	4620      	mov	r0, r4
   19e86:	f002 f973 	bl	1c170 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   19e8a:	b158      	cbz	r0, 19ea4 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   19e8c:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   19e8e:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   19e90:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   19e94:	f001 fe08 	bl	1baa8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   19e98:	4639      	mov	r1, r7
   19e9a:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   19e9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   19ea0:	f001 bb62 	b.w	1b568 <z_reschedule>
	**(char ***) mem = slab->free_list;
   19ea4:	6833      	ldr	r3, [r6, #0]
   19ea6:	69a2      	ldr	r2, [r4, #24]
   19ea8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   19eaa:	6833      	ldr	r3, [r6, #0]
   19eac:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   19eae:	69e3      	ldr	r3, [r4, #28]
   19eb0:	3b01      	subs	r3, #1
   19eb2:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19eb4:	4628      	mov	r0, r5
   19eb6:	f000 f971 	bl	1a19c <z_spin_unlock_valid>
   19eba:	b968      	cbnz	r0, 19ed8 <k_mem_slab_free+0xa4>
   19ebc:	4a09      	ldr	r2, [pc, #36]	; (19ee4 <k_mem_slab_free+0xb0>)
   19ebe:	490d      	ldr	r1, [pc, #52]	; (19ef4 <k_mem_slab_free+0xc0>)
   19ec0:	480a      	ldr	r0, [pc, #40]	; (19eec <k_mem_slab_free+0xb8>)
   19ec2:	23ac      	movs	r3, #172	; 0xac
   19ec4:	f006 f885 	bl	1ffd2 <printk>
   19ec8:	480b      	ldr	r0, [pc, #44]	; (19ef8 <k_mem_slab_free+0xc4>)
   19eca:	4629      	mov	r1, r5
   19ecc:	f006 f881 	bl	1ffd2 <printk>
   19ed0:	4804      	ldr	r0, [pc, #16]	; (19ee4 <k_mem_slab_free+0xb0>)
   19ed2:	21ac      	movs	r1, #172	; 0xac
   19ed4:	f006 fad7 	bl	20486 <assert_post_action>
	__asm__ volatile(
   19ed8:	f387 8811 	msr	BASEPRI, r7
   19edc:	f3bf 8f6f 	isb	sy
}
   19ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19ee4:	00023889 	.word	0x00023889
   19ee8:	000238db 	.word	0x000238db
   19eec:	000237c9 	.word	0x000237c9
   19ef0:	000238f0 	.word	0x000238f0
   19ef4:	000238af 	.word	0x000238af
   19ef8:	000238c6 	.word	0x000238c6

00019efc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   19efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19f00:	b085      	sub	sp, #20
   19f02:	4604      	mov	r4, r0
   19f04:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   19f08:	f1b8 0f0f 	cmp.w	r8, #15
{
   19f0c:	460f      	mov	r7, r1
   19f0e:	4615      	mov	r5, r2
   19f10:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   19f12:	d132      	bne.n	19f7a <z_setup_new_thread+0x7e>
   19f14:	4b25      	ldr	r3, [pc, #148]	; (19fac <z_setup_new_thread+0xb0>)
   19f16:	4599      	cmp	r9, r3
   19f18:	d133      	bne.n	19f82 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   19f1a:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   19f1e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   19f22:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19f24:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19f26:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   19f28:	2304      	movs	r3, #4
   19f2a:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19f2c:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   19f30:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
   19f34:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
   19f3a:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19f3e:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19f40:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19f44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19f46:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
   19f48:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19f4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19f4c:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   19f4e:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19f50:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   19f52:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   19f56:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   19f58:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   19f5a:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19f5c:	4642      	mov	r2, r8
   19f5e:	4639      	mov	r1, r7
   19f60:	4620      	mov	r0, r4
   19f62:	f7f8 fc37 	bl	127d4 <arch_new_thread>
	if (!_current) {
   19f66:	4b12      	ldr	r3, [pc, #72]	; (19fb0 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
   19f68:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   19f6a:	689b      	ldr	r3, [r3, #8]
   19f6c:	b103      	cbz	r3, 19f70 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
   19f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   19f70:	6763      	str	r3, [r4, #116]	; 0x74
}
   19f72:	4640      	mov	r0, r8
   19f74:	b005      	add	sp, #20
   19f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   19f7a:	f108 0310 	add.w	r3, r8, #16
   19f7e:	2b1e      	cmp	r3, #30
   19f80:	d9cb      	bls.n	19f1a <z_setup_new_thread+0x1e>
   19f82:	4a0c      	ldr	r2, [pc, #48]	; (19fb4 <z_setup_new_thread+0xb8>)
   19f84:	490c      	ldr	r1, [pc, #48]	; (19fb8 <z_setup_new_thread+0xbc>)
   19f86:	480d      	ldr	r0, [pc, #52]	; (19fbc <z_setup_new_thread+0xc0>)
   19f88:	f240 2305 	movw	r3, #517	; 0x205
   19f8c:	f006 f821 	bl	1ffd2 <printk>
   19f90:	4641      	mov	r1, r8
   19f92:	480b      	ldr	r0, [pc, #44]	; (19fc0 <z_setup_new_thread+0xc4>)
   19f94:	f06f 030f 	mvn.w	r3, #15
   19f98:	220e      	movs	r2, #14
   19f9a:	f006 f81a 	bl	1ffd2 <printk>
   19f9e:	4805      	ldr	r0, [pc, #20]	; (19fb4 <z_setup_new_thread+0xb8>)
   19fa0:	f240 2105 	movw	r1, #517	; 0x205
   19fa4:	f006 fa6f 	bl	20486 <assert_post_action>
   19fa8:	e7b7      	b.n	19f1a <z_setup_new_thread+0x1e>
   19faa:	bf00      	nop
   19fac:	0001a1cd 	.word	0x0001a1cd
   19fb0:	20002444 	.word	0x20002444
   19fb4:	00024dc3 	.word	0x00024dc3
   19fb8:	00024de6 	.word	0x00024de6
   19fbc:	000237c9 	.word	0x000237c9
   19fc0:	00024e66 	.word	0x00024e66

00019fc4 <z_impl_k_thread_create>:
{
   19fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19fc8:	b087      	sub	sp, #28
   19fca:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   19fce:	4604      	mov	r4, r0
   19fd0:	460d      	mov	r5, r1
   19fd2:	4690      	mov	r8, r2
   19fd4:	4699      	mov	r9, r3
   19fd6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   19fda:	b173      	cbz	r3, 19ffa <z_impl_k_thread_create+0x36>
   19fdc:	491b      	ldr	r1, [pc, #108]	; (1a04c <z_impl_k_thread_create+0x88>)
   19fde:	4a1c      	ldr	r2, [pc, #112]	; (1a050 <z_impl_k_thread_create+0x8c>)
   19fe0:	481c      	ldr	r0, [pc, #112]	; (1a054 <z_impl_k_thread_create+0x90>)
   19fe2:	f240 236e 	movw	r3, #622	; 0x26e
   19fe6:	f005 fff4 	bl	1ffd2 <printk>
   19fea:	481b      	ldr	r0, [pc, #108]	; (1a058 <z_impl_k_thread_create+0x94>)
   19fec:	f005 fff1 	bl	1ffd2 <printk>
   19ff0:	4817      	ldr	r0, [pc, #92]	; (1a050 <z_impl_k_thread_create+0x8c>)
   19ff2:	f240 216e 	movw	r1, #622	; 0x26e
   19ff6:	f006 fa46 	bl	20486 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   19ffa:	2300      	movs	r3, #0
   19ffc:	9305      	str	r3, [sp, #20]
   19ffe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a000:	9304      	str	r3, [sp, #16]
   1a002:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a004:	9303      	str	r3, [sp, #12]
   1a006:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a008:	9302      	str	r3, [sp, #8]
   1a00a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a00c:	9301      	str	r3, [sp, #4]
   1a00e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a010:	9300      	str	r3, [sp, #0]
   1a012:	4642      	mov	r2, r8
   1a014:	464b      	mov	r3, r9
   1a016:	4629      	mov	r1, r5
   1a018:	4620      	mov	r0, r4
   1a01a:	f7ff ff6f 	bl	19efc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1a01e:	1c7b      	adds	r3, r7, #1
   1a020:	bf08      	it	eq
   1a022:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1a026:	d005      	beq.n	1a034 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a028:	ea56 0307 	orrs.w	r3, r6, r7
   1a02c:	d106      	bne.n	1a03c <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   1a02e:	4620      	mov	r0, r4
   1a030:	f001 fd82 	bl	1bb38 <z_sched_start>
}
   1a034:	4620      	mov	r0, r4
   1a036:	b007      	add	sp, #28
   1a038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1a03c:	4907      	ldr	r1, [pc, #28]	; (1a05c <z_impl_k_thread_create+0x98>)
   1a03e:	4632      	mov	r2, r6
   1a040:	463b      	mov	r3, r7
   1a042:	f104 0018 	add.w	r0, r4, #24
   1a046:	f002 fc17 	bl	1c878 <z_add_timeout>
   1a04a:	e7f3      	b.n	1a034 <z_impl_k_thread_create+0x70>
   1a04c:	00024e97 	.word	0x00024e97
   1a050:	00024dc3 	.word	0x00024dc3
   1a054:	000237c9 	.word	0x000237c9
   1a058:	00024ea9 	.word	0x00024ea9
   1a05c:	0001bbe1 	.word	0x0001bbe1

0001a060 <z_init_static_threads>:
{
   1a060:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1a064:	4f3f      	ldr	r7, [pc, #252]	; (1a164 <z_init_static_threads+0x104>)
   1a066:	4d40      	ldr	r5, [pc, #256]	; (1a168 <z_init_static_threads+0x108>)
   1a068:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1a178 <z_init_static_threads+0x118>
{
   1a06c:	b086      	sub	sp, #24
   1a06e:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   1a070:	42bd      	cmp	r5, r7
   1a072:	d90e      	bls.n	1a092 <z_init_static_threads+0x32>
   1a074:	493d      	ldr	r1, [pc, #244]	; (1a16c <z_init_static_threads+0x10c>)
   1a076:	483e      	ldr	r0, [pc, #248]	; (1a170 <z_init_static_threads+0x110>)
   1a078:	f240 23d5 	movw	r3, #725	; 0x2d5
   1a07c:	4642      	mov	r2, r8
   1a07e:	f005 ffa8 	bl	1ffd2 <printk>
   1a082:	483c      	ldr	r0, [pc, #240]	; (1a174 <z_init_static_threads+0x114>)
   1a084:	f005 ffa5 	bl	1ffd2 <printk>
   1a088:	f240 21d5 	movw	r1, #725	; 0x2d5
   1a08c:	4640      	mov	r0, r8
   1a08e:	f006 f9fa 	bl	20486 <assert_post_action>
   1a092:	42b5      	cmp	r5, r6
   1a094:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1a098:	d31f      	bcc.n	1a0da <z_init_static_threads+0x7a>
	k_sched_lock();
   1a09a:	f001 faa9 	bl	1b5f0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1a09e:	4c32      	ldr	r4, [pc, #200]	; (1a168 <z_init_static_threads+0x108>)
   1a0a0:	4d35      	ldr	r5, [pc, #212]	; (1a178 <z_init_static_threads+0x118>)
   1a0a2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 1a16c <z_init_static_threads+0x10c>
   1a0a6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 1a170 <z_init_static_threads+0x110>
   1a0aa:	42b4      	cmp	r4, r6
   1a0ac:	d90e      	bls.n	1a0cc <z_init_static_threads+0x6c>
   1a0ae:	4641      	mov	r1, r8
   1a0b0:	f44f 733d 	mov.w	r3, #756	; 0x2f4
   1a0b4:	462a      	mov	r2, r5
   1a0b6:	4648      	mov	r0, r9
   1a0b8:	f005 ff8b 	bl	1ffd2 <printk>
   1a0bc:	482d      	ldr	r0, [pc, #180]	; (1a174 <z_init_static_threads+0x114>)
   1a0be:	f005 ff88 	bl	1ffd2 <printk>
   1a0c2:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   1a0c6:	4628      	mov	r0, r5
   1a0c8:	f006 f9dd 	bl	20486 <assert_post_action>
   1a0cc:	42b4      	cmp	r4, r6
   1a0ce:	d321      	bcc.n	1a114 <z_init_static_threads+0xb4>
}
   1a0d0:	b006      	add	sp, #24
   1a0d2:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   1a0d6:	f001 bfcf 	b.w	1c078 <k_sched_unlock>
		z_setup_new_thread(
   1a0da:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a0de:	9305      	str	r3, [sp, #20]
   1a0e0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1a0e4:	9304      	str	r3, [sp, #16]
   1a0e6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1a0ea:	9303      	str	r3, [sp, #12]
   1a0ec:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1a0f0:	9302      	str	r3, [sp, #8]
   1a0f2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1a0f6:	9301      	str	r3, [sp, #4]
   1a0f8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1a0fc:	9300      	str	r3, [sp, #0]
   1a0fe:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1a102:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1a106:	f7ff fef9 	bl	19efc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1a10a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1a10e:	655d      	str	r5, [r3, #84]	; 0x54
   1a110:	4625      	mov	r5, r4
   1a112:	e7ad      	b.n	1a070 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1a114:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1a116:	1c4b      	adds	r3, r1, #1
   1a118:	d014      	beq.n	1a144 <z_init_static_threads+0xe4>
   1a11a:	f240 32e7 	movw	r2, #999	; 0x3e7
   1a11e:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
   1a120:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1a124:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1a128:	4693      	mov	fp, r2
   1a12a:	469c      	mov	ip, r3
   1a12c:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a130:	459c      	cmp	ip, r3
   1a132:	bf08      	it	eq
   1a134:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
   1a136:	6827      	ldr	r7, [r4, #0]
   1a138:	4658      	mov	r0, fp
   1a13a:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a13c:	d104      	bne.n	1a148 <z_init_static_threads+0xe8>
	z_sched_start(thread);
   1a13e:	4638      	mov	r0, r7
   1a140:	f001 fcfa 	bl	1bb38 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1a144:	3430      	adds	r4, #48	; 0x30
   1a146:	e7b0      	b.n	1a0aa <z_init_static_threads+0x4a>
   1a148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a14c:	2300      	movs	r3, #0
   1a14e:	f7e6 ffd7 	bl	1100 <__aeabi_uldivmod>
   1a152:	4602      	mov	r2, r0
   1a154:	460b      	mov	r3, r1
   1a156:	f107 0018 	add.w	r0, r7, #24
   1a15a:	4908      	ldr	r1, [pc, #32]	; (1a17c <z_init_static_threads+0x11c>)
   1a15c:	f002 fb8c 	bl	1c878 <z_add_timeout>
   1a160:	e7f0      	b.n	1a144 <z_init_static_threads+0xe4>
   1a162:	bf00      	nop
   1a164:	200005fc 	.word	0x200005fc
   1a168:	200005fc 	.word	0x200005fc
   1a16c:	00024ece 	.word	0x00024ece
   1a170:	000237c9 	.word	0x000237c9
   1a174:	000242e2 	.word	0x000242e2
   1a178:	00024dc3 	.word	0x00024dc3
   1a17c:	0001bbe1 	.word	0x0001bbe1

0001a180 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1a180:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   1a182:	b138      	cbz	r0, 1a194 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   1a184:	4b04      	ldr	r3, [pc, #16]	; (1a198 <z_spin_lock_valid+0x18>)
   1a186:	7d1b      	ldrb	r3, [r3, #20]
   1a188:	f000 0003 	and.w	r0, r0, #3
   1a18c:	1ac0      	subs	r0, r0, r3
   1a18e:	bf18      	it	ne
   1a190:	2001      	movne	r0, #1
   1a192:	4770      	bx	lr
			return false;
		}
	}
	return true;
   1a194:	2001      	movs	r0, #1
}
   1a196:	4770      	bx	lr
   1a198:	20002444 	.word	0x20002444

0001a19c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1a19c:	4906      	ldr	r1, [pc, #24]	; (1a1b8 <z_spin_unlock_valid+0x1c>)
{
   1a19e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1a1a0:	688a      	ldr	r2, [r1, #8]
   1a1a2:	7d08      	ldrb	r0, [r1, #20]
   1a1a4:	6819      	ldr	r1, [r3, #0]
   1a1a6:	4302      	orrs	r2, r0
   1a1a8:	4291      	cmp	r1, r2
   1a1aa:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   1a1ae:	bf04      	itt	eq
   1a1b0:	6018      	streq	r0, [r3, #0]
	return true;
   1a1b2:	2001      	moveq	r0, #1
}
   1a1b4:	4770      	bx	lr
   1a1b6:	bf00      	nop
   1a1b8:	20002444 	.word	0x20002444

0001a1bc <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1a1bc:	4a02      	ldr	r2, [pc, #8]	; (1a1c8 <z_spin_lock_set_owner+0xc>)
   1a1be:	7d11      	ldrb	r1, [r2, #20]
   1a1c0:	6893      	ldr	r3, [r2, #8]
   1a1c2:	430b      	orrs	r3, r1
   1a1c4:	6003      	str	r3, [r0, #0]
}
   1a1c6:	4770      	bx	lr
   1a1c8:	20002444 	.word	0x20002444

0001a1cc <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1a1cc:	4c11      	ldr	r4, [pc, #68]	; (1a214 <idle+0x48>)
   1a1ce:	68a2      	ldr	r2, [r4, #8]
   1a1d0:	f992 200e 	ldrsb.w	r2, [r2, #14]
   1a1d4:	2a00      	cmp	r2, #0
{
   1a1d6:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1a1d8:	da09      	bge.n	1a1ee <idle+0x22>
   1a1da:	490f      	ldr	r1, [pc, #60]	; (1a218 <idle+0x4c>)
   1a1dc:	480f      	ldr	r0, [pc, #60]	; (1a21c <idle+0x50>)
   1a1de:	4a10      	ldr	r2, [pc, #64]	; (1a220 <idle+0x54>)
   1a1e0:	2346      	movs	r3, #70	; 0x46
   1a1e2:	f005 fef6 	bl	1ffd2 <printk>
   1a1e6:	480e      	ldr	r0, [pc, #56]	; (1a220 <idle+0x54>)
   1a1e8:	2146      	movs	r1, #70	; 0x46
   1a1ea:	f006 f94c 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1a1ee:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a1f2:	f3ef 8311 	mrs	r3, BASEPRI
   1a1f6:	f382 8812 	msr	BASEPRI_MAX, r2
   1a1fa:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1a1fe:	f002 fc5d 	bl	1cabc <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1a202:	61a0      	str	r0, [r4, #24]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1a204:	f7f7 fdde 	bl	11dc4 <pm_system_suspend>
   1a208:	2800      	cmp	r0, #0
   1a20a:	d1f0      	bne.n	1a1ee <idle+0x22>
	arch_cpu_idle();
   1a20c:	f7f8 f9de 	bl	125cc <arch_cpu_idle>
}
   1a210:	e7ed      	b.n	1a1ee <idle+0x22>
   1a212:	bf00      	nop
   1a214:	20002444 	.word	0x20002444
   1a218:	00024f1c 	.word	0x00024f1c
   1a21c:	000237c9 	.word	0x000237c9
   1a220:	00024efb 	.word	0x00024efb

0001a224 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1a224:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a228:	4604      	mov	r4, r0
   1a22a:	4616      	mov	r6, r2
   1a22c:	461f      	mov	r7, r3
   1a22e:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1a232:	b163      	cbz	r3, 1a24e <z_impl_k_mutex_lock+0x2a>
   1a234:	4970      	ldr	r1, [pc, #448]	; (1a3f8 <z_impl_k_mutex_lock+0x1d4>)
   1a236:	4a71      	ldr	r2, [pc, #452]	; (1a3fc <z_impl_k_mutex_lock+0x1d8>)
   1a238:	4871      	ldr	r0, [pc, #452]	; (1a400 <z_impl_k_mutex_lock+0x1dc>)
   1a23a:	2365      	movs	r3, #101	; 0x65
   1a23c:	f005 fec9 	bl	1ffd2 <printk>
   1a240:	4870      	ldr	r0, [pc, #448]	; (1a404 <z_impl_k_mutex_lock+0x1e0>)
   1a242:	f005 fec6 	bl	1ffd2 <printk>
   1a246:	486d      	ldr	r0, [pc, #436]	; (1a3fc <z_impl_k_mutex_lock+0x1d8>)
   1a248:	2165      	movs	r1, #101	; 0x65
   1a24a:	f006 f91c 	bl	20486 <assert_post_action>
   1a24e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a252:	f3ef 8811 	mrs	r8, BASEPRI
   1a256:	f383 8812 	msr	BASEPRI_MAX, r3
   1a25a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a25e:	486a      	ldr	r0, [pc, #424]	; (1a408 <z_impl_k_mutex_lock+0x1e4>)
   1a260:	f7ff ff8e 	bl	1a180 <z_spin_lock_valid>
   1a264:	b968      	cbnz	r0, 1a282 <z_impl_k_mutex_lock+0x5e>
   1a266:	4a69      	ldr	r2, [pc, #420]	; (1a40c <z_impl_k_mutex_lock+0x1e8>)
   1a268:	4969      	ldr	r1, [pc, #420]	; (1a410 <z_impl_k_mutex_lock+0x1ec>)
   1a26a:	4865      	ldr	r0, [pc, #404]	; (1a400 <z_impl_k_mutex_lock+0x1dc>)
   1a26c:	2381      	movs	r3, #129	; 0x81
   1a26e:	f005 feb0 	bl	1ffd2 <printk>
   1a272:	4965      	ldr	r1, [pc, #404]	; (1a408 <z_impl_k_mutex_lock+0x1e4>)
   1a274:	4867      	ldr	r0, [pc, #412]	; (1a414 <z_impl_k_mutex_lock+0x1f0>)
   1a276:	f005 feac 	bl	1ffd2 <printk>
   1a27a:	4864      	ldr	r0, [pc, #400]	; (1a40c <z_impl_k_mutex_lock+0x1e8>)
   1a27c:	2181      	movs	r1, #129	; 0x81
   1a27e:	f006 f902 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a282:	4861      	ldr	r0, [pc, #388]	; (1a408 <z_impl_k_mutex_lock+0x1e4>)
   1a284:	f7ff ff9a 	bl	1a1bc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1a288:	68e3      	ldr	r3, [r4, #12]
   1a28a:	4a63      	ldr	r2, [pc, #396]	; (1a418 <z_impl_k_mutex_lock+0x1f4>)
   1a28c:	b1fb      	cbz	r3, 1a2ce <z_impl_k_mutex_lock+0xaa>
   1a28e:	68a0      	ldr	r0, [r4, #8]
   1a290:	6891      	ldr	r1, [r2, #8]
   1a292:	4288      	cmp	r0, r1
   1a294:	d03d      	beq.n	1a312 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1a296:	ea56 0307 	orrs.w	r3, r6, r7
   1a29a:	d13c      	bne.n	1a316 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a29c:	485a      	ldr	r0, [pc, #360]	; (1a408 <z_impl_k_mutex_lock+0x1e4>)
   1a29e:	f7ff ff7d 	bl	1a19c <z_spin_unlock_valid>
   1a2a2:	b968      	cbnz	r0, 1a2c0 <z_impl_k_mutex_lock+0x9c>
   1a2a4:	4a59      	ldr	r2, [pc, #356]	; (1a40c <z_impl_k_mutex_lock+0x1e8>)
   1a2a6:	495d      	ldr	r1, [pc, #372]	; (1a41c <z_impl_k_mutex_lock+0x1f8>)
   1a2a8:	4855      	ldr	r0, [pc, #340]	; (1a400 <z_impl_k_mutex_lock+0x1dc>)
   1a2aa:	23ac      	movs	r3, #172	; 0xac
   1a2ac:	f005 fe91 	bl	1ffd2 <printk>
   1a2b0:	4955      	ldr	r1, [pc, #340]	; (1a408 <z_impl_k_mutex_lock+0x1e4>)
   1a2b2:	485b      	ldr	r0, [pc, #364]	; (1a420 <z_impl_k_mutex_lock+0x1fc>)
   1a2b4:	f005 fe8d 	bl	1ffd2 <printk>
   1a2b8:	4854      	ldr	r0, [pc, #336]	; (1a40c <z_impl_k_mutex_lock+0x1e8>)
   1a2ba:	21ac      	movs	r1, #172	; 0xac
   1a2bc:	f006 f8e3 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1a2c0:	f388 8811 	msr	BASEPRI, r8
   1a2c4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1a2c8:	f06f 000f 	mvn.w	r0, #15
   1a2cc:	e01e      	b.n	1a30c <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1a2ce:	6891      	ldr	r1, [r2, #8]
   1a2d0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1a2d4:	484c      	ldr	r0, [pc, #304]	; (1a408 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1a2d6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1a2d8:	3301      	adds	r3, #1
   1a2da:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1a2dc:	6893      	ldr	r3, [r2, #8]
   1a2de:	60a3      	str	r3, [r4, #8]
   1a2e0:	f7ff ff5c 	bl	1a19c <z_spin_unlock_valid>
   1a2e4:	b968      	cbnz	r0, 1a302 <z_impl_k_mutex_lock+0xde>
   1a2e6:	4a49      	ldr	r2, [pc, #292]	; (1a40c <z_impl_k_mutex_lock+0x1e8>)
   1a2e8:	494c      	ldr	r1, [pc, #304]	; (1a41c <z_impl_k_mutex_lock+0x1f8>)
   1a2ea:	4845      	ldr	r0, [pc, #276]	; (1a400 <z_impl_k_mutex_lock+0x1dc>)
   1a2ec:	23ac      	movs	r3, #172	; 0xac
   1a2ee:	f005 fe70 	bl	1ffd2 <printk>
   1a2f2:	4945      	ldr	r1, [pc, #276]	; (1a408 <z_impl_k_mutex_lock+0x1e4>)
   1a2f4:	484a      	ldr	r0, [pc, #296]	; (1a420 <z_impl_k_mutex_lock+0x1fc>)
   1a2f6:	f005 fe6c 	bl	1ffd2 <printk>
   1a2fa:	4844      	ldr	r0, [pc, #272]	; (1a40c <z_impl_k_mutex_lock+0x1e8>)
   1a2fc:	21ac      	movs	r1, #172	; 0xac
   1a2fe:	f006 f8c2 	bl	20486 <assert_post_action>
   1a302:	f388 8811 	msr	BASEPRI, r8
   1a306:	f3bf 8f6f 	isb	sy
		return 0;
   1a30a:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1a30c:	b002      	add	sp, #8
   1a30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1a312:	6921      	ldr	r1, [r4, #16]
   1a314:	e7de      	b.n	1a2d4 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1a316:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1a31a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   1a31e:	4299      	cmp	r1, r3
   1a320:	bfa8      	it	ge
   1a322:	4619      	movge	r1, r3
   1a324:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1a328:	4291      	cmp	r1, r2
   1a32a:	bfb8      	it	lt
   1a32c:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1a32e:	428b      	cmp	r3, r1
   1a330:	dd44      	ble.n	1a3bc <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
   1a332:	f001 fd9b 	bl	1be6c <z_set_prio>
   1a336:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1a338:	e9cd 6700 	strd	r6, r7, [sp]
   1a33c:	4832      	ldr	r0, [pc, #200]	; (1a408 <z_impl_k_mutex_lock+0x1e4>)
   1a33e:	4622      	mov	r2, r4
   1a340:	4641      	mov	r1, r8
   1a342:	f001 fd63 	bl	1be0c <z_pend_curr>
	if (got_mutex == 0) {
   1a346:	2800      	cmp	r0, #0
   1a348:	d0e0      	beq.n	1a30c <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   1a34a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a34e:	f3ef 8611 	mrs	r6, BASEPRI
   1a352:	f383 8812 	msr	BASEPRI_MAX, r3
   1a356:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a35a:	482b      	ldr	r0, [pc, #172]	; (1a408 <z_impl_k_mutex_lock+0x1e4>)
   1a35c:	f7ff ff10 	bl	1a180 <z_spin_lock_valid>
   1a360:	b968      	cbnz	r0, 1a37e <z_impl_k_mutex_lock+0x15a>
   1a362:	4a2a      	ldr	r2, [pc, #168]	; (1a40c <z_impl_k_mutex_lock+0x1e8>)
   1a364:	492a      	ldr	r1, [pc, #168]	; (1a410 <z_impl_k_mutex_lock+0x1ec>)
   1a366:	4826      	ldr	r0, [pc, #152]	; (1a400 <z_impl_k_mutex_lock+0x1dc>)
   1a368:	2381      	movs	r3, #129	; 0x81
   1a36a:	f005 fe32 	bl	1ffd2 <printk>
   1a36e:	4926      	ldr	r1, [pc, #152]	; (1a408 <z_impl_k_mutex_lock+0x1e4>)
   1a370:	4828      	ldr	r0, [pc, #160]	; (1a414 <z_impl_k_mutex_lock+0x1f0>)
   1a372:	f005 fe2e 	bl	1ffd2 <printk>
   1a376:	4825      	ldr	r0, [pc, #148]	; (1a40c <z_impl_k_mutex_lock+0x1e8>)
   1a378:	2181      	movs	r1, #129	; 0x81
   1a37a:	f006 f884 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a37e:	4822      	ldr	r0, [pc, #136]	; (1a408 <z_impl_k_mutex_lock+0x1e4>)
   1a380:	f7ff ff1c 	bl	1a1bc <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1a384:	6823      	ldr	r3, [r4, #0]
   1a386:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a388:	429c      	cmp	r4, r3
   1a38a:	d00a      	beq.n	1a3a2 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1a38c:	b14b      	cbz	r3, 1a3a2 <z_impl_k_mutex_lock+0x17e>
   1a38e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1a392:	4299      	cmp	r1, r3
   1a394:	bfa8      	it	ge
   1a396:	4619      	movge	r1, r3
   1a398:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1a39c:	4299      	cmp	r1, r3
   1a39e:	bfb8      	it	lt
   1a3a0:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1a3a2:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1a3a4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a3a8:	4299      	cmp	r1, r3
   1a3aa:	d109      	bne.n	1a3c0 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
   1a3ac:	b16d      	cbz	r5, 1a3ca <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
   1a3ae:	4816      	ldr	r0, [pc, #88]	; (1a408 <z_impl_k_mutex_lock+0x1e4>)
   1a3b0:	4631      	mov	r1, r6
   1a3b2:	f001 f8d9 	bl	1b568 <z_reschedule>
	return -EAGAIN;
   1a3b6:	f06f 000a 	mvn.w	r0, #10
   1a3ba:	e7a7      	b.n	1a30c <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   1a3bc:	2500      	movs	r5, #0
   1a3be:	e7bb      	b.n	1a338 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
   1a3c0:	f001 fd54 	bl	1be6c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1a3c4:	2800      	cmp	r0, #0
   1a3c6:	d1f2      	bne.n	1a3ae <z_impl_k_mutex_lock+0x18a>
   1a3c8:	e7f0      	b.n	1a3ac <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a3ca:	480f      	ldr	r0, [pc, #60]	; (1a408 <z_impl_k_mutex_lock+0x1e4>)
   1a3cc:	f7ff fee6 	bl	1a19c <z_spin_unlock_valid>
   1a3d0:	b968      	cbnz	r0, 1a3ee <z_impl_k_mutex_lock+0x1ca>
   1a3d2:	4a0e      	ldr	r2, [pc, #56]	; (1a40c <z_impl_k_mutex_lock+0x1e8>)
   1a3d4:	4911      	ldr	r1, [pc, #68]	; (1a41c <z_impl_k_mutex_lock+0x1f8>)
   1a3d6:	480a      	ldr	r0, [pc, #40]	; (1a400 <z_impl_k_mutex_lock+0x1dc>)
   1a3d8:	23ac      	movs	r3, #172	; 0xac
   1a3da:	f005 fdfa 	bl	1ffd2 <printk>
   1a3de:	490a      	ldr	r1, [pc, #40]	; (1a408 <z_impl_k_mutex_lock+0x1e4>)
   1a3e0:	480f      	ldr	r0, [pc, #60]	; (1a420 <z_impl_k_mutex_lock+0x1fc>)
   1a3e2:	f005 fdf6 	bl	1ffd2 <printk>
   1a3e6:	4809      	ldr	r0, [pc, #36]	; (1a40c <z_impl_k_mutex_lock+0x1e8>)
   1a3e8:	21ac      	movs	r1, #172	; 0xac
   1a3ea:	f006 f84c 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1a3ee:	f386 8811 	msr	BASEPRI, r6
   1a3f2:	f3bf 8f6f 	isb	sy
   1a3f6:	e7de      	b.n	1a3b6 <z_impl_k_mutex_lock+0x192>
   1a3f8:	00024e97 	.word	0x00024e97
   1a3fc:	00024f44 	.word	0x00024f44
   1a400:	000237c9 	.word	0x000237c9
   1a404:	00024f66 	.word	0x00024f66
   1a408:	2000246c 	.word	0x2000246c
   1a40c:	00023889 	.word	0x00023889
   1a410:	000238db 	.word	0x000238db
   1a414:	000238f0 	.word	0x000238f0
   1a418:	20002444 	.word	0x20002444
   1a41c:	000238af 	.word	0x000238af
   1a420:	000238c6 	.word	0x000238c6

0001a424 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1a424:	b538      	push	{r3, r4, r5, lr}
   1a426:	4604      	mov	r4, r0
   1a428:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1a42c:	b163      	cbz	r3, 1a448 <z_impl_k_mutex_unlock+0x24>
   1a42e:	4952      	ldr	r1, [pc, #328]	; (1a578 <z_impl_k_mutex_unlock+0x154>)
   1a430:	4a52      	ldr	r2, [pc, #328]	; (1a57c <z_impl_k_mutex_unlock+0x158>)
   1a432:	4853      	ldr	r0, [pc, #332]	; (1a580 <z_impl_k_mutex_unlock+0x15c>)
   1a434:	23c7      	movs	r3, #199	; 0xc7
   1a436:	f005 fdcc 	bl	1ffd2 <printk>
   1a43a:	4852      	ldr	r0, [pc, #328]	; (1a584 <z_impl_k_mutex_unlock+0x160>)
   1a43c:	f005 fdc9 	bl	1ffd2 <printk>
   1a440:	484e      	ldr	r0, [pc, #312]	; (1a57c <z_impl_k_mutex_unlock+0x158>)
   1a442:	21c7      	movs	r1, #199	; 0xc7
   1a444:	f006 f81f 	bl	20486 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1a448:	68a3      	ldr	r3, [r4, #8]
   1a44a:	2b00      	cmp	r3, #0
   1a44c:	f000 808d 	beq.w	1a56a <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1a450:	4d4d      	ldr	r5, [pc, #308]	; (1a588 <z_impl_k_mutex_unlock+0x164>)
   1a452:	68aa      	ldr	r2, [r5, #8]
   1a454:	4293      	cmp	r3, r2
   1a456:	f040 808b 	bne.w	1a570 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1a45a:	68e3      	ldr	r3, [r4, #12]
   1a45c:	b94b      	cbnz	r3, 1a472 <z_impl_k_mutex_unlock+0x4e>
   1a45e:	494b      	ldr	r1, [pc, #300]	; (1a58c <z_impl_k_mutex_unlock+0x168>)
   1a460:	4847      	ldr	r0, [pc, #284]	; (1a580 <z_impl_k_mutex_unlock+0x15c>)
   1a462:	4a46      	ldr	r2, [pc, #280]	; (1a57c <z_impl_k_mutex_unlock+0x158>)
   1a464:	23df      	movs	r3, #223	; 0xdf
   1a466:	f005 fdb4 	bl	1ffd2 <printk>
   1a46a:	4844      	ldr	r0, [pc, #272]	; (1a57c <z_impl_k_mutex_unlock+0x158>)
   1a46c:	21df      	movs	r1, #223	; 0xdf
   1a46e:	f006 f80a 	bl	20486 <assert_post_action>
   1a472:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   1a476:	b163      	cbz	r3, 1a492 <z_impl_k_mutex_unlock+0x6e>
   1a478:	493f      	ldr	r1, [pc, #252]	; (1a578 <z_impl_k_mutex_unlock+0x154>)
   1a47a:	4a45      	ldr	r2, [pc, #276]	; (1a590 <z_impl_k_mutex_unlock+0x16c>)
   1a47c:	4840      	ldr	r0, [pc, #256]	; (1a580 <z_impl_k_mutex_unlock+0x15c>)
   1a47e:	23fd      	movs	r3, #253	; 0xfd
   1a480:	f005 fda7 	bl	1ffd2 <printk>
   1a484:	4843      	ldr	r0, [pc, #268]	; (1a594 <z_impl_k_mutex_unlock+0x170>)
   1a486:	f005 fda4 	bl	1ffd2 <printk>
   1a48a:	4841      	ldr	r0, [pc, #260]	; (1a590 <z_impl_k_mutex_unlock+0x16c>)
   1a48c:	21fd      	movs	r1, #253	; 0xfd
   1a48e:	f005 fffa 	bl	20486 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   1a492:	68ab      	ldr	r3, [r5, #8]
   1a494:	7bdb      	ldrb	r3, [r3, #15]
   1a496:	2b01      	cmp	r3, #1
   1a498:	d10c      	bne.n	1a4b4 <z_impl_k_mutex_unlock+0x90>
   1a49a:	493f      	ldr	r1, [pc, #252]	; (1a598 <z_impl_k_mutex_unlock+0x174>)
   1a49c:	4a3c      	ldr	r2, [pc, #240]	; (1a590 <z_impl_k_mutex_unlock+0x16c>)
   1a49e:	4838      	ldr	r0, [pc, #224]	; (1a580 <z_impl_k_mutex_unlock+0x15c>)
   1a4a0:	23fe      	movs	r3, #254	; 0xfe
   1a4a2:	f005 fd96 	bl	1ffd2 <printk>
   1a4a6:	483b      	ldr	r0, [pc, #236]	; (1a594 <z_impl_k_mutex_unlock+0x170>)
   1a4a8:	f005 fd93 	bl	1ffd2 <printk>
   1a4ac:	4838      	ldr	r0, [pc, #224]	; (1a590 <z_impl_k_mutex_unlock+0x16c>)
   1a4ae:	21fe      	movs	r1, #254	; 0xfe
   1a4b0:	f005 ffe9 	bl	20486 <assert_post_action>

	--_current->base.sched_locked;
   1a4b4:	68aa      	ldr	r2, [r5, #8]
   1a4b6:	7bd3      	ldrb	r3, [r2, #15]
   1a4b8:	3b01      	subs	r3, #1
   1a4ba:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1a4bc:	68e3      	ldr	r3, [r4, #12]
   1a4be:	2b01      	cmp	r3, #1
   1a4c0:	d905      	bls.n	1a4ce <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
   1a4c2:	3b01      	subs	r3, #1
   1a4c4:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1a4c6:	f001 fdd7 	bl	1c078 <k_sched_unlock>

	return 0;
   1a4ca:	2000      	movs	r0, #0
}
   1a4cc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1a4ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a4d2:	f3ef 8511 	mrs	r5, BASEPRI
   1a4d6:	f383 8812 	msr	BASEPRI_MAX, r3
   1a4da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a4de:	482f      	ldr	r0, [pc, #188]	; (1a59c <z_impl_k_mutex_unlock+0x178>)
   1a4e0:	f7ff fe4e 	bl	1a180 <z_spin_lock_valid>
   1a4e4:	b968      	cbnz	r0, 1a502 <z_impl_k_mutex_unlock+0xde>
   1a4e6:	4a2e      	ldr	r2, [pc, #184]	; (1a5a0 <z_impl_k_mutex_unlock+0x17c>)
   1a4e8:	492e      	ldr	r1, [pc, #184]	; (1a5a4 <z_impl_k_mutex_unlock+0x180>)
   1a4ea:	4825      	ldr	r0, [pc, #148]	; (1a580 <z_impl_k_mutex_unlock+0x15c>)
   1a4ec:	2381      	movs	r3, #129	; 0x81
   1a4ee:	f005 fd70 	bl	1ffd2 <printk>
   1a4f2:	492a      	ldr	r1, [pc, #168]	; (1a59c <z_impl_k_mutex_unlock+0x178>)
   1a4f4:	482c      	ldr	r0, [pc, #176]	; (1a5a8 <z_impl_k_mutex_unlock+0x184>)
   1a4f6:	f005 fd6c 	bl	1ffd2 <printk>
   1a4fa:	4829      	ldr	r0, [pc, #164]	; (1a5a0 <z_impl_k_mutex_unlock+0x17c>)
   1a4fc:	2181      	movs	r1, #129	; 0x81
   1a4fe:	f005 ffc2 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a502:	4826      	ldr	r0, [pc, #152]	; (1a59c <z_impl_k_mutex_unlock+0x178>)
   1a504:	f7ff fe5a 	bl	1a1bc <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1a508:	68a0      	ldr	r0, [r4, #8]
   1a50a:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   1a50c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a510:	4299      	cmp	r1, r3
   1a512:	d001      	beq.n	1a518 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
   1a514:	f001 fcaa 	bl	1be6c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1a518:	4620      	mov	r0, r4
   1a51a:	f001 fe29 	bl	1c170 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1a51e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1a520:	b158      	cbz	r0, 1a53a <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
   1a522:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1a526:	6122      	str	r2, [r4, #16]
   1a528:	2200      	movs	r2, #0
   1a52a:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1a52c:	f001 fabc 	bl	1baa8 <z_ready_thread>
		z_reschedule(&lock, key);
   1a530:	481a      	ldr	r0, [pc, #104]	; (1a59c <z_impl_k_mutex_unlock+0x178>)
   1a532:	4629      	mov	r1, r5
   1a534:	f001 f818 	bl	1b568 <z_reschedule>
   1a538:	e7c5      	b.n	1a4c6 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
   1a53a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a53c:	4817      	ldr	r0, [pc, #92]	; (1a59c <z_impl_k_mutex_unlock+0x178>)
   1a53e:	f7ff fe2d 	bl	1a19c <z_spin_unlock_valid>
   1a542:	b968      	cbnz	r0, 1a560 <z_impl_k_mutex_unlock+0x13c>
   1a544:	4a16      	ldr	r2, [pc, #88]	; (1a5a0 <z_impl_k_mutex_unlock+0x17c>)
   1a546:	4919      	ldr	r1, [pc, #100]	; (1a5ac <z_impl_k_mutex_unlock+0x188>)
   1a548:	480d      	ldr	r0, [pc, #52]	; (1a580 <z_impl_k_mutex_unlock+0x15c>)
   1a54a:	23ac      	movs	r3, #172	; 0xac
   1a54c:	f005 fd41 	bl	1ffd2 <printk>
   1a550:	4912      	ldr	r1, [pc, #72]	; (1a59c <z_impl_k_mutex_unlock+0x178>)
   1a552:	4817      	ldr	r0, [pc, #92]	; (1a5b0 <z_impl_k_mutex_unlock+0x18c>)
   1a554:	f005 fd3d 	bl	1ffd2 <printk>
   1a558:	4811      	ldr	r0, [pc, #68]	; (1a5a0 <z_impl_k_mutex_unlock+0x17c>)
   1a55a:	21ac      	movs	r1, #172	; 0xac
   1a55c:	f005 ff93 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1a560:	f385 8811 	msr	BASEPRI, r5
   1a564:	f3bf 8f6f 	isb	sy
   1a568:	e7ad      	b.n	1a4c6 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
   1a56a:	f06f 0015 	mvn.w	r0, #21
   1a56e:	e7ad      	b.n	1a4cc <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
   1a570:	f04f 30ff 	mov.w	r0, #4294967295
   1a574:	e7aa      	b.n	1a4cc <z_impl_k_mutex_unlock+0xa8>
   1a576:	bf00      	nop
   1a578:	00024e97 	.word	0x00024e97
   1a57c:	00024f44 	.word	0x00024f44
   1a580:	000237c9 	.word	0x000237c9
   1a584:	00024f66 	.word	0x00024f66
   1a588:	20002444 	.word	0x20002444
   1a58c:	00024f8b 	.word	0x00024f8b
   1a590:	00024fa2 	.word	0x00024fa2
   1a594:	000246b6 	.word	0x000246b6
   1a598:	00024fcd 	.word	0x00024fcd
   1a59c:	2000246c 	.word	0x2000246c
   1a5a0:	00023889 	.word	0x00023889
   1a5a4:	000238db 	.word	0x000238db
   1a5a8:	000238f0 	.word	0x000238f0
   1a5ac:	000238af 	.word	0x000238af
   1a5b0:	000238c6 	.word	0x000238c6

0001a5b4 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1a5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a5b8:	4604      	mov	r4, r0
   1a5ba:	f89d a020 	ldrb.w	sl, [sp, #32]
   1a5be:	460e      	mov	r6, r1
   1a5c0:	4690      	mov	r8, r2
   1a5c2:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a5c4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1a5c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a5cc:	f3ef 8711 	mrs	r7, BASEPRI
   1a5d0:	f383 8812 	msr	BASEPRI_MAX, r3
   1a5d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a5d8:	4628      	mov	r0, r5
   1a5da:	f7ff fdd1 	bl	1a180 <z_spin_lock_valid>
   1a5de:	b968      	cbnz	r0, 1a5fc <queue_insert+0x48>
   1a5e0:	4a3b      	ldr	r2, [pc, #236]	; (1a6d0 <queue_insert+0x11c>)
   1a5e2:	493c      	ldr	r1, [pc, #240]	; (1a6d4 <queue_insert+0x120>)
   1a5e4:	483c      	ldr	r0, [pc, #240]	; (1a6d8 <queue_insert+0x124>)
   1a5e6:	2381      	movs	r3, #129	; 0x81
   1a5e8:	f005 fcf3 	bl	1ffd2 <printk>
   1a5ec:	483b      	ldr	r0, [pc, #236]	; (1a6dc <queue_insert+0x128>)
   1a5ee:	4629      	mov	r1, r5
   1a5f0:	f005 fcef 	bl	1ffd2 <printk>
   1a5f4:	4836      	ldr	r0, [pc, #216]	; (1a6d0 <queue_insert+0x11c>)
   1a5f6:	2181      	movs	r1, #129	; 0x81
   1a5f8:	f005 ff45 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a5fc:	4628      	mov	r0, r5
   1a5fe:	f7ff fddd 	bl	1a1bc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   1a602:	f1ba 0f00 	cmp.w	sl, #0
   1a606:	d000      	beq.n	1a60a <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
   1a608:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1a60a:	f104 000c 	add.w	r0, r4, #12
   1a60e:	f001 fdaf 	bl	1c170 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   1a612:	b158      	cbz	r0, 1a62c <queue_insert+0x78>
   1a614:	2400      	movs	r4, #0
   1a616:	67c4      	str	r4, [r0, #124]	; 0x7c
   1a618:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1a61c:	f001 fa44 	bl	1baa8 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1a620:	4628      	mov	r0, r5
   1a622:	4639      	mov	r1, r7
   1a624:	f000 ffa0 	bl	1b568 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   1a628:	2000      	movs	r0, #0
   1a62a:	e01e      	b.n	1a66a <queue_insert+0xb6>
	if (alloc) {
   1a62c:	f1b9 0f00 	cmp.w	r9, #0
   1a630:	d02d      	beq.n	1a68e <queue_insert+0xda>
	return z_thread_aligned_alloc(0, size);
   1a632:	2108      	movs	r1, #8
   1a634:	f003 f84a 	bl	1d6cc <z_thread_aligned_alloc>
		if (anode == NULL) {
   1a638:	b9c8      	cbnz	r0, 1a66e <queue_insert+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a63a:	4628      	mov	r0, r5
   1a63c:	f7ff fdae 	bl	1a19c <z_spin_unlock_valid>
   1a640:	b968      	cbnz	r0, 1a65e <queue_insert+0xaa>
   1a642:	4a23      	ldr	r2, [pc, #140]	; (1a6d0 <queue_insert+0x11c>)
   1a644:	4926      	ldr	r1, [pc, #152]	; (1a6e0 <queue_insert+0x12c>)
   1a646:	4824      	ldr	r0, [pc, #144]	; (1a6d8 <queue_insert+0x124>)
   1a648:	23ac      	movs	r3, #172	; 0xac
   1a64a:	f005 fcc2 	bl	1ffd2 <printk>
   1a64e:	4825      	ldr	r0, [pc, #148]	; (1a6e4 <queue_insert+0x130>)
   1a650:	4629      	mov	r1, r5
   1a652:	f005 fcbe 	bl	1ffd2 <printk>
   1a656:	481e      	ldr	r0, [pc, #120]	; (1a6d0 <queue_insert+0x11c>)
   1a658:	21ac      	movs	r1, #172	; 0xac
   1a65a:	f005 ff14 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1a65e:	f387 8811 	msr	BASEPRI, r7
   1a662:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1a666:	f06f 000b 	mvn.w	r0, #11
}
   1a66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1a66e:	2301      	movs	r3, #1
		anode->data = data;
   1a670:	f8c0 8004 	str.w	r8, [r0, #4]
   1a674:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1a676:	6803      	ldr	r3, [r0, #0]
   1a678:	f003 0303 	and.w	r3, r3, #3
   1a67c:	b95e      	cbnz	r6, 1a696 <queue_insert+0xe2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a67e:	6822      	ldr	r2, [r4, #0]
   1a680:	4313      	orrs	r3, r2
   1a682:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1a684:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1a686:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1a688:	b973      	cbnz	r3, 1a6a8 <queue_insert+0xf4>
	list->tail = node;
   1a68a:	6060      	str	r0, [r4, #4]
}
   1a68c:	e00c      	b.n	1a6a8 <queue_insert+0xf4>
	node->next_and_flags = flags;
   1a68e:	f8c8 9000 	str.w	r9, [r8]
}
   1a692:	4640      	mov	r0, r8
   1a694:	e7ef      	b.n	1a676 <queue_insert+0xc2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a696:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1a698:	f032 0203 	bics.w	r2, r2, #3
   1a69c:	d110      	bne.n	1a6c0 <queue_insert+0x10c>
Z_GENLIST_APPEND(sflist, sfnode)
   1a69e:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a6a0:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1a6a2:	b93a      	cbnz	r2, 1a6b4 <queue_insert+0x100>
	list->head = node;
   1a6a4:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1a6a8:	2104      	movs	r1, #4
   1a6aa:	f104 0014 	add.w	r0, r4, #20
   1a6ae:	f008 faaf 	bl	22c10 <z_handle_obj_poll_events>
   1a6b2:	e7b5      	b.n	1a620 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a6b4:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a6b6:	f003 0303 	and.w	r3, r3, #3
   1a6ba:	4303      	orrs	r3, r0
   1a6bc:	6013      	str	r3, [r2, #0]
   1a6be:	e7e4      	b.n	1a68a <queue_insert+0xd6>
   1a6c0:	4313      	orrs	r3, r2
   1a6c2:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a6c4:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a6c6:	f003 0303 	and.w	r3, r3, #3
   1a6ca:	4303      	orrs	r3, r0
   1a6cc:	6033      	str	r3, [r6, #0]
}
   1a6ce:	e7eb      	b.n	1a6a8 <queue_insert+0xf4>
   1a6d0:	00023889 	.word	0x00023889
   1a6d4:	000238db 	.word	0x000238db
   1a6d8:	000237c9 	.word	0x000237c9
   1a6dc:	000238f0 	.word	0x000238f0
   1a6e0:	000238af 	.word	0x000238af
   1a6e4:	000238c6 	.word	0x000238c6

0001a6e8 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   1a6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a6ec:	4605      	mov	r5, r0
   1a6ee:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   1a6f0:	460c      	mov	r4, r1
   1a6f2:	2900      	cmp	r1, #0
   1a6f4:	d04a      	beq.n	1a78c <k_queue_append_list+0xa4>
   1a6f6:	2a00      	cmp	r2, #0
   1a6f8:	d048      	beq.n	1a78c <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a6fa:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1a6fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a702:	f3ef 8911 	mrs	r9, BASEPRI
   1a706:	f383 8812 	msr	BASEPRI_MAX, r3
   1a70a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a70e:	4630      	mov	r0, r6
   1a710:	f7ff fd36 	bl	1a180 <z_spin_lock_valid>
   1a714:	b968      	cbnz	r0, 1a732 <k_queue_append_list+0x4a>
   1a716:	4a1f      	ldr	r2, [pc, #124]	; (1a794 <k_queue_append_list+0xac>)
   1a718:	491f      	ldr	r1, [pc, #124]	; (1a798 <k_queue_append_list+0xb0>)
   1a71a:	4820      	ldr	r0, [pc, #128]	; (1a79c <k_queue_append_list+0xb4>)
   1a71c:	2381      	movs	r3, #129	; 0x81
   1a71e:	f005 fc58 	bl	1ffd2 <printk>
   1a722:	481f      	ldr	r0, [pc, #124]	; (1a7a0 <k_queue_append_list+0xb8>)
   1a724:	4631      	mov	r1, r6
   1a726:	f005 fc54 	bl	1ffd2 <printk>
   1a72a:	481a      	ldr	r0, [pc, #104]	; (1a794 <k_queue_append_list+0xac>)
   1a72c:	2181      	movs	r1, #129	; 0x81
   1a72e:	f005 feaa 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a732:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   1a734:	f105 080c 	add.w	r8, r5, #12
   1a738:	f7ff fd40 	bl	1a1bc <z_spin_lock_set_owner>
   1a73c:	4640      	mov	r0, r8
   1a73e:	f001 fd17 	bl	1c170 <z_unpend_first_thread>
   1a742:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   1a746:	b920      	cbnz	r0, 1a752 <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1a748:	686b      	ldr	r3, [r5, #4]
   1a74a:	b9cb      	cbnz	r3, 1a780 <k_queue_append_list+0x98>
	list->head = node;
   1a74c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1a74e:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1a750:	e00a      	b.n	1a768 <k_queue_append_list+0x80>
	thread->base.swap_data = data;
   1a752:	6144      	str	r4, [r0, #20]
   1a754:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1a758:	f001 f9a6 	bl	1baa8 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   1a75c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1a75e:	4640      	mov	r0, r8
   1a760:	f001 fd06 	bl	1c170 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1a764:	2c00      	cmp	r4, #0
   1a766:	d1ee      	bne.n	1a746 <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1a768:	2104      	movs	r1, #4
   1a76a:	f105 0014 	add.w	r0, r5, #20
   1a76e:	f008 fa4f 	bl	22c10 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1a772:	4630      	mov	r0, r6
   1a774:	4649      	mov	r1, r9
   1a776:	f000 fef7 	bl	1b568 <z_reschedule>
	return 0;
   1a77a:	2000      	movs	r0, #0
}
   1a77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a780:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a782:	f001 0103 	and.w	r1, r1, #3
   1a786:	430c      	orrs	r4, r1
   1a788:	601c      	str	r4, [r3, #0]
}
   1a78a:	e7e0      	b.n	1a74e <k_queue_append_list+0x66>
		return -EINVAL;
   1a78c:	f06f 0015 	mvn.w	r0, #21
   1a790:	e7f4      	b.n	1a77c <k_queue_append_list+0x94>
   1a792:	bf00      	nop
   1a794:	00023889 	.word	0x00023889
   1a798:	000238db 	.word	0x000238db
   1a79c:	000237c9 	.word	0x000237c9
   1a7a0:	000238f0 	.word	0x000238f0

0001a7a4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1a7a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1a7a8:	4606      	mov	r6, r0
   1a7aa:	4690      	mov	r8, r2
   1a7ac:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a7ae:	f100 0508 	add.w	r5, r0, #8
   1a7b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a7b6:	f3ef 8711 	mrs	r7, BASEPRI
   1a7ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1a7be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a7c2:	4628      	mov	r0, r5
   1a7c4:	f7ff fcdc 	bl	1a180 <z_spin_lock_valid>
   1a7c8:	b968      	cbnz	r0, 1a7e6 <z_impl_k_queue_get+0x42>
   1a7ca:	4a25      	ldr	r2, [pc, #148]	; (1a860 <z_impl_k_queue_get+0xbc>)
   1a7cc:	4925      	ldr	r1, [pc, #148]	; (1a864 <z_impl_k_queue_get+0xc0>)
   1a7ce:	4826      	ldr	r0, [pc, #152]	; (1a868 <z_impl_k_queue_get+0xc4>)
   1a7d0:	2381      	movs	r3, #129	; 0x81
   1a7d2:	f005 fbfe 	bl	1ffd2 <printk>
   1a7d6:	4825      	ldr	r0, [pc, #148]	; (1a86c <z_impl_k_queue_get+0xc8>)
   1a7d8:	4629      	mov	r1, r5
   1a7da:	f005 fbfa 	bl	1ffd2 <printk>
   1a7de:	4820      	ldr	r0, [pc, #128]	; (1a860 <z_impl_k_queue_get+0xbc>)
   1a7e0:	2181      	movs	r1, #129	; 0x81
   1a7e2:	f005 fe50 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a7e6:	4628      	mov	r0, r5
   1a7e8:	f7ff fce8 	bl	1a1bc <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   1a7ec:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1a7ee:	b334      	cbz	r4, 1a83e <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a7f0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a7f2:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a7f4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a7f8:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1a7fa:	4620      	mov	r0, r4
	list->head = node;
   1a7fc:	6033      	str	r3, [r6, #0]
	list->tail = node;
   1a7fe:	bf08      	it	eq
   1a800:	6073      	streq	r3, [r6, #4]
   1a802:	2101      	movs	r1, #1
   1a804:	f008 f8df 	bl	229c6 <z_queue_node_peek>
   1a808:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a80a:	4628      	mov	r0, r5
   1a80c:	f7ff fcc6 	bl	1a19c <z_spin_unlock_valid>
   1a810:	b968      	cbnz	r0, 1a82e <z_impl_k_queue_get+0x8a>
   1a812:	4a13      	ldr	r2, [pc, #76]	; (1a860 <z_impl_k_queue_get+0xbc>)
   1a814:	4916      	ldr	r1, [pc, #88]	; (1a870 <z_impl_k_queue_get+0xcc>)
   1a816:	4814      	ldr	r0, [pc, #80]	; (1a868 <z_impl_k_queue_get+0xc4>)
   1a818:	23ac      	movs	r3, #172	; 0xac
   1a81a:	f005 fbda 	bl	1ffd2 <printk>
   1a81e:	4815      	ldr	r0, [pc, #84]	; (1a874 <z_impl_k_queue_get+0xd0>)
   1a820:	4629      	mov	r1, r5
   1a822:	f005 fbd6 	bl	1ffd2 <printk>
   1a826:	480e      	ldr	r0, [pc, #56]	; (1a860 <z_impl_k_queue_get+0xbc>)
   1a828:	21ac      	movs	r1, #172	; 0xac
   1a82a:	f005 fe2c 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1a82e:	f387 8811 	msr	BASEPRI, r7
   1a832:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1a836:	4620      	mov	r0, r4
   1a838:	b003      	add	sp, #12
   1a83a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a83e:	ea58 0309 	orrs.w	r3, r8, r9
   1a842:	d0e2      	beq.n	1a80a <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1a844:	e9cd 8900 	strd	r8, r9, [sp]
   1a848:	f106 020c 	add.w	r2, r6, #12
   1a84c:	4639      	mov	r1, r7
   1a84e:	4628      	mov	r0, r5
   1a850:	f001 fadc 	bl	1be0c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1a854:	2800      	cmp	r0, #0
   1a856:	d1ee      	bne.n	1a836 <z_impl_k_queue_get+0x92>
   1a858:	4b07      	ldr	r3, [pc, #28]	; (1a878 <z_impl_k_queue_get+0xd4>)
   1a85a:	689b      	ldr	r3, [r3, #8]
   1a85c:	695c      	ldr	r4, [r3, #20]
   1a85e:	e7ea      	b.n	1a836 <z_impl_k_queue_get+0x92>
   1a860:	00023889 	.word	0x00023889
   1a864:	000238db 	.word	0x000238db
   1a868:	000237c9 	.word	0x000237c9
   1a86c:	000238f0 	.word	0x000238f0
   1a870:	000238af 	.word	0x000238af
   1a874:	000238c6 	.word	0x000238c6
   1a878:	20002444 	.word	0x20002444

0001a87c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1a87c:	b538      	push	{r3, r4, r5, lr}
   1a87e:	4604      	mov	r4, r0
	__asm__ volatile(
   1a880:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a884:	f3ef 8511 	mrs	r5, BASEPRI
   1a888:	f383 8812 	msr	BASEPRI_MAX, r3
   1a88c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a890:	4817      	ldr	r0, [pc, #92]	; (1a8f0 <z_impl_k_sem_give+0x74>)
   1a892:	f7ff fc75 	bl	1a180 <z_spin_lock_valid>
   1a896:	b968      	cbnz	r0, 1a8b4 <z_impl_k_sem_give+0x38>
   1a898:	4a16      	ldr	r2, [pc, #88]	; (1a8f4 <z_impl_k_sem_give+0x78>)
   1a89a:	4917      	ldr	r1, [pc, #92]	; (1a8f8 <z_impl_k_sem_give+0x7c>)
   1a89c:	4817      	ldr	r0, [pc, #92]	; (1a8fc <z_impl_k_sem_give+0x80>)
   1a89e:	2381      	movs	r3, #129	; 0x81
   1a8a0:	f005 fb97 	bl	1ffd2 <printk>
   1a8a4:	4912      	ldr	r1, [pc, #72]	; (1a8f0 <z_impl_k_sem_give+0x74>)
   1a8a6:	4816      	ldr	r0, [pc, #88]	; (1a900 <z_impl_k_sem_give+0x84>)
   1a8a8:	f005 fb93 	bl	1ffd2 <printk>
   1a8ac:	4811      	ldr	r0, [pc, #68]	; (1a8f4 <z_impl_k_sem_give+0x78>)
   1a8ae:	2181      	movs	r1, #129	; 0x81
   1a8b0:	f005 fde9 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a8b4:	480e      	ldr	r0, [pc, #56]	; (1a8f0 <z_impl_k_sem_give+0x74>)
   1a8b6:	f7ff fc81 	bl	1a1bc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1a8ba:	4620      	mov	r0, r4
   1a8bc:	f001 fc58 	bl	1c170 <z_unpend_first_thread>

	if (thread != NULL) {
   1a8c0:	b148      	cbz	r0, 1a8d6 <z_impl_k_sem_give+0x5a>
   1a8c2:	2200      	movs	r2, #0
   1a8c4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1a8c6:	f001 f8ef 	bl	1baa8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1a8ca:	4629      	mov	r1, r5
   1a8cc:	4808      	ldr	r0, [pc, #32]	; (1a8f0 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1a8ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1a8d2:	f000 be49 	b.w	1b568 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1a8d6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1a8da:	429a      	cmp	r2, r3
   1a8dc:	bf18      	it	ne
   1a8de:	3301      	addne	r3, #1
   1a8e0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1a8e2:	2102      	movs	r1, #2
   1a8e4:	f104 0010 	add.w	r0, r4, #16
   1a8e8:	f008 f992 	bl	22c10 <z_handle_obj_poll_events>
}
   1a8ec:	e7ed      	b.n	1a8ca <z_impl_k_sem_give+0x4e>
   1a8ee:	bf00      	nop
   1a8f0:	20002470 	.word	0x20002470
   1a8f4:	00023889 	.word	0x00023889
   1a8f8:	000238db 	.word	0x000238db
   1a8fc:	000237c9 	.word	0x000237c9
   1a900:	000238f0 	.word	0x000238f0

0001a904 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1a904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a906:	4604      	mov	r4, r0
   1a908:	4616      	mov	r6, r2
   1a90a:	461f      	mov	r7, r3
   1a90c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   1a910:	b17b      	cbz	r3, 1a932 <z_impl_k_sem_take+0x2e>
   1a912:	ea56 0307 	orrs.w	r3, r6, r7
   1a916:	d00c      	beq.n	1a932 <z_impl_k_sem_take+0x2e>
   1a918:	4935      	ldr	r1, [pc, #212]	; (1a9f0 <z_impl_k_sem_take+0xec>)
   1a91a:	4a36      	ldr	r2, [pc, #216]	; (1a9f4 <z_impl_k_sem_take+0xf0>)
   1a91c:	4836      	ldr	r0, [pc, #216]	; (1a9f8 <z_impl_k_sem_take+0xf4>)
   1a91e:	2379      	movs	r3, #121	; 0x79
   1a920:	f005 fb57 	bl	1ffd2 <printk>
   1a924:	4835      	ldr	r0, [pc, #212]	; (1a9fc <z_impl_k_sem_take+0xf8>)
   1a926:	f005 fb54 	bl	1ffd2 <printk>
   1a92a:	4832      	ldr	r0, [pc, #200]	; (1a9f4 <z_impl_k_sem_take+0xf0>)
   1a92c:	2179      	movs	r1, #121	; 0x79
   1a92e:	f005 fdaa 	bl	20486 <assert_post_action>
   1a932:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a936:	f3ef 8511 	mrs	r5, BASEPRI
   1a93a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a93e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a942:	482f      	ldr	r0, [pc, #188]	; (1aa00 <z_impl_k_sem_take+0xfc>)
   1a944:	f7ff fc1c 	bl	1a180 <z_spin_lock_valid>
   1a948:	b968      	cbnz	r0, 1a966 <z_impl_k_sem_take+0x62>
   1a94a:	4a2e      	ldr	r2, [pc, #184]	; (1aa04 <z_impl_k_sem_take+0x100>)
   1a94c:	492e      	ldr	r1, [pc, #184]	; (1aa08 <z_impl_k_sem_take+0x104>)
   1a94e:	482a      	ldr	r0, [pc, #168]	; (1a9f8 <z_impl_k_sem_take+0xf4>)
   1a950:	2381      	movs	r3, #129	; 0x81
   1a952:	f005 fb3e 	bl	1ffd2 <printk>
   1a956:	492a      	ldr	r1, [pc, #168]	; (1aa00 <z_impl_k_sem_take+0xfc>)
   1a958:	482c      	ldr	r0, [pc, #176]	; (1aa0c <z_impl_k_sem_take+0x108>)
   1a95a:	f005 fb3a 	bl	1ffd2 <printk>
   1a95e:	4829      	ldr	r0, [pc, #164]	; (1aa04 <z_impl_k_sem_take+0x100>)
   1a960:	2181      	movs	r1, #129	; 0x81
   1a962:	f005 fd90 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a966:	4826      	ldr	r0, [pc, #152]	; (1aa00 <z_impl_k_sem_take+0xfc>)
   1a968:	f7ff fc28 	bl	1a1bc <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1a96c:	68a3      	ldr	r3, [r4, #8]
   1a96e:	b1d3      	cbz	r3, 1a9a6 <z_impl_k_sem_take+0xa2>
		sem->count--;
   1a970:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a972:	4823      	ldr	r0, [pc, #140]	; (1aa00 <z_impl_k_sem_take+0xfc>)
   1a974:	60a3      	str	r3, [r4, #8]
   1a976:	f7ff fc11 	bl	1a19c <z_spin_unlock_valid>
   1a97a:	b968      	cbnz	r0, 1a998 <z_impl_k_sem_take+0x94>
   1a97c:	4a21      	ldr	r2, [pc, #132]	; (1aa04 <z_impl_k_sem_take+0x100>)
   1a97e:	4924      	ldr	r1, [pc, #144]	; (1aa10 <z_impl_k_sem_take+0x10c>)
   1a980:	481d      	ldr	r0, [pc, #116]	; (1a9f8 <z_impl_k_sem_take+0xf4>)
   1a982:	23ac      	movs	r3, #172	; 0xac
   1a984:	f005 fb25 	bl	1ffd2 <printk>
   1a988:	491d      	ldr	r1, [pc, #116]	; (1aa00 <z_impl_k_sem_take+0xfc>)
   1a98a:	4822      	ldr	r0, [pc, #136]	; (1aa14 <z_impl_k_sem_take+0x110>)
   1a98c:	f005 fb21 	bl	1ffd2 <printk>
   1a990:	481c      	ldr	r0, [pc, #112]	; (1aa04 <z_impl_k_sem_take+0x100>)
   1a992:	21ac      	movs	r1, #172	; 0xac
   1a994:	f005 fd77 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1a998:	f385 8811 	msr	BASEPRI, r5
   1a99c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1a9a0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1a9a2:	b003      	add	sp, #12
   1a9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a9a6:	ea56 0307 	orrs.w	r3, r6, r7
   1a9aa:	d118      	bne.n	1a9de <z_impl_k_sem_take+0xda>
   1a9ac:	4814      	ldr	r0, [pc, #80]	; (1aa00 <z_impl_k_sem_take+0xfc>)
   1a9ae:	f7ff fbf5 	bl	1a19c <z_spin_unlock_valid>
   1a9b2:	b968      	cbnz	r0, 1a9d0 <z_impl_k_sem_take+0xcc>
   1a9b4:	4a13      	ldr	r2, [pc, #76]	; (1aa04 <z_impl_k_sem_take+0x100>)
   1a9b6:	4916      	ldr	r1, [pc, #88]	; (1aa10 <z_impl_k_sem_take+0x10c>)
   1a9b8:	480f      	ldr	r0, [pc, #60]	; (1a9f8 <z_impl_k_sem_take+0xf4>)
   1a9ba:	23ac      	movs	r3, #172	; 0xac
   1a9bc:	f005 fb09 	bl	1ffd2 <printk>
   1a9c0:	490f      	ldr	r1, [pc, #60]	; (1aa00 <z_impl_k_sem_take+0xfc>)
   1a9c2:	4814      	ldr	r0, [pc, #80]	; (1aa14 <z_impl_k_sem_take+0x110>)
   1a9c4:	f005 fb05 	bl	1ffd2 <printk>
   1a9c8:	480e      	ldr	r0, [pc, #56]	; (1aa04 <z_impl_k_sem_take+0x100>)
   1a9ca:	21ac      	movs	r1, #172	; 0xac
   1a9cc:	f005 fd5b 	bl	20486 <assert_post_action>
   1a9d0:	f385 8811 	msr	BASEPRI, r5
   1a9d4:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1a9d8:	f06f 000f 	mvn.w	r0, #15
   1a9dc:	e7e1      	b.n	1a9a2 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1a9de:	e9cd 6700 	strd	r6, r7, [sp]
   1a9e2:	4622      	mov	r2, r4
   1a9e4:	4629      	mov	r1, r5
   1a9e6:	4806      	ldr	r0, [pc, #24]	; (1aa00 <z_impl_k_sem_take+0xfc>)
   1a9e8:	f001 fa10 	bl	1be0c <z_pend_curr>
	return ret;
   1a9ec:	e7d9      	b.n	1a9a2 <z_impl_k_sem_take+0x9e>
   1a9ee:	bf00      	nop
   1a9f0:	0002501e 	.word	0x0002501e
   1a9f4:	00024ffe 	.word	0x00024ffe
   1a9f8:	000237c9 	.word	0x000237c9
   1a9fc:	000246b6 	.word	0x000246b6
   1aa00:	20002470 	.word	0x20002470
   1aa04:	00023889 	.word	0x00023889
   1aa08:	000238db 	.word	0x000238db
   1aa0c:	000238f0 	.word	0x000238f0
   1aa10:	000238af 	.word	0x000238af
   1aa14:	000238c6 	.word	0x000238c6

0001aa18 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1aa18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1aa1a:	4b09      	ldr	r3, [pc, #36]	; (1aa40 <k_sys_work_q_init+0x28>)
   1aa1c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1aa1e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1aa20:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1aa22:	9300      	str	r3, [sp, #0]
   1aa24:	4907      	ldr	r1, [pc, #28]	; (1aa44 <k_sys_work_q_init+0x2c>)
   1aa26:	4808      	ldr	r0, [pc, #32]	; (1aa48 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1aa28:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1aa2c:	f04f 33ff 	mov.w	r3, #4294967295
   1aa30:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1aa34:	f000 fa88 	bl	1af48 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1aa38:	4620      	mov	r0, r4
   1aa3a:	b004      	add	sp, #16
   1aa3c:	bd10      	pop	{r4, pc}
   1aa3e:	bf00      	nop
   1aa40:	0002506b 	.word	0x0002506b
   1aa44:	200070a0 	.word	0x200070a0
   1aa48:	20001bd8 	.word	0x20001bd8

0001aa4c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1aa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aa50:	4e7e      	ldr	r6, [pc, #504]	; (1ac4c <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1aa52:	4f7f      	ldr	r7, [pc, #508]	; (1ac50 <work_queue_main+0x204>)
{
   1aa54:	b085      	sub	sp, #20
   1aa56:	4604      	mov	r4, r0
	__asm__ volatile(
   1aa58:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aa5c:	f3ef 8811 	mrs	r8, BASEPRI
   1aa60:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa64:	f3bf 8f6f 	isb	sy
   1aa68:	4630      	mov	r0, r6
   1aa6a:	f7ff fb89 	bl	1a180 <z_spin_lock_valid>
   1aa6e:	b968      	cbnz	r0, 1aa8c <work_queue_main+0x40>
   1aa70:	4a78      	ldr	r2, [pc, #480]	; (1ac54 <work_queue_main+0x208>)
   1aa72:	4979      	ldr	r1, [pc, #484]	; (1ac58 <work_queue_main+0x20c>)
   1aa74:	4879      	ldr	r0, [pc, #484]	; (1ac5c <work_queue_main+0x210>)
   1aa76:	2381      	movs	r3, #129	; 0x81
   1aa78:	f005 faab 	bl	1ffd2 <printk>
   1aa7c:	4878      	ldr	r0, [pc, #480]	; (1ac60 <work_queue_main+0x214>)
   1aa7e:	4631      	mov	r1, r6
   1aa80:	f005 faa7 	bl	1ffd2 <printk>
   1aa84:	4873      	ldr	r0, [pc, #460]	; (1ac54 <work_queue_main+0x208>)
   1aa86:	2181      	movs	r1, #129	; 0x81
   1aa88:	f005 fcfd 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1aa8c:	4630      	mov	r0, r6
   1aa8e:	f7ff fb95 	bl	1a1bc <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   1aa92:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   1aa96:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   1aa9a:	b9ad      	cbnz	r5, 1aac8 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
   1aa9c:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   1aaa0:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   1aaa2:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   1aaa6:	f100 8092 	bmi.w	1abce <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1aaaa:	2300      	movs	r3, #0
   1aaac:	9302      	str	r3, [sp, #8]
   1aaae:	f04f 32ff 	mov.w	r2, #4294967295
   1aab2:	f04f 33ff 	mov.w	r3, #4294967295
   1aab6:	e9cd 2300 	strd	r2, r3, [sp]
   1aaba:	4641      	mov	r1, r8
   1aabc:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1aac0:	4630      	mov	r0, r6
   1aac2:	f001 fe5d 	bl	1c780 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   1aac6:	e7c7      	b.n	1aa58 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1aac8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   1aacc:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   1aace:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1aad2:	428d      	cmp	r5, r1
   1aad4:	d101      	bne.n	1aada <work_queue_main+0x8e>
	list->tail = node;
   1aad6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1aada:	f043 0302 	orr.w	r3, r3, #2
   1aade:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1aae2:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   1aae4:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   1aae8:	f023 0304 	bic.w	r3, r3, #4
   1aaec:	f043 0301 	orr.w	r3, r3, #1
   1aaf0:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aaf2:	4630      	mov	r0, r6
   1aaf4:	f7ff fb52 	bl	1a19c <z_spin_unlock_valid>
   1aaf8:	b968      	cbnz	r0, 1ab16 <work_queue_main+0xca>
   1aafa:	4a56      	ldr	r2, [pc, #344]	; (1ac54 <work_queue_main+0x208>)
   1aafc:	4959      	ldr	r1, [pc, #356]	; (1ac64 <work_queue_main+0x218>)
   1aafe:	4857      	ldr	r0, [pc, #348]	; (1ac5c <work_queue_main+0x210>)
   1ab00:	23ac      	movs	r3, #172	; 0xac
   1ab02:	f005 fa66 	bl	1ffd2 <printk>
   1ab06:	4858      	ldr	r0, [pc, #352]	; (1ac68 <work_queue_main+0x21c>)
   1ab08:	4631      	mov	r1, r6
   1ab0a:	f005 fa62 	bl	1ffd2 <printk>
   1ab0e:	4851      	ldr	r0, [pc, #324]	; (1ac54 <work_queue_main+0x208>)
   1ab10:	21ac      	movs	r1, #172	; 0xac
   1ab12:	f005 fcb8 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1ab16:	f388 8811 	msr	BASEPRI, r8
   1ab1a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
   1ab1e:	f1b9 0f00 	cmp.w	r9, #0
   1ab22:	d10b      	bne.n	1ab3c <work_queue_main+0xf0>
   1ab24:	4951      	ldr	r1, [pc, #324]	; (1ac6c <work_queue_main+0x220>)
   1ab26:	484d      	ldr	r0, [pc, #308]	; (1ac5c <work_queue_main+0x210>)
   1ab28:	4a51      	ldr	r2, [pc, #324]	; (1ac70 <work_queue_main+0x224>)
   1ab2a:	f240 238a 	movw	r3, #650	; 0x28a
   1ab2e:	f005 fa50 	bl	1ffd2 <printk>
   1ab32:	484f      	ldr	r0, [pc, #316]	; (1ac70 <work_queue_main+0x224>)
   1ab34:	f240 218a 	movw	r1, #650	; 0x28a
   1ab38:	f005 fca5 	bl	20486 <assert_post_action>
			handler(work);
   1ab3c:	4628      	mov	r0, r5
   1ab3e:	47c8      	blx	r9
	__asm__ volatile(
   1ab40:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ab44:	f3ef 8a11 	mrs	sl, BASEPRI
   1ab48:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ab50:	4630      	mov	r0, r6
   1ab52:	f7ff fb15 	bl	1a180 <z_spin_lock_valid>
   1ab56:	b968      	cbnz	r0, 1ab74 <work_queue_main+0x128>
   1ab58:	4a3e      	ldr	r2, [pc, #248]	; (1ac54 <work_queue_main+0x208>)
   1ab5a:	493f      	ldr	r1, [pc, #252]	; (1ac58 <work_queue_main+0x20c>)
   1ab5c:	483f      	ldr	r0, [pc, #252]	; (1ac5c <work_queue_main+0x210>)
   1ab5e:	2381      	movs	r3, #129	; 0x81
   1ab60:	f005 fa37 	bl	1ffd2 <printk>
   1ab64:	483e      	ldr	r0, [pc, #248]	; (1ac60 <work_queue_main+0x214>)
   1ab66:	4631      	mov	r1, r6
   1ab68:	f005 fa33 	bl	1ffd2 <printk>
   1ab6c:	4839      	ldr	r0, [pc, #228]	; (1ac54 <work_queue_main+0x208>)
   1ab6e:	2181      	movs	r1, #129	; 0x81
   1ab70:	f005 fc89 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ab74:	4630      	mov	r0, r6
   1ab76:	f7ff fb21 	bl	1a1bc <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   1ab7a:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ab7c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1ab7e:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ab82:	d42e      	bmi.n	1abe2 <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
   1ab84:	60ea      	str	r2, [r5, #12]
   1ab86:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1ab8a:	f023 0302 	bic.w	r3, r3, #2
   1ab8e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ab92:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   1ab94:	f3c3 2500 	ubfx	r5, r3, #8, #1
   1ab98:	f7ff fb00 	bl	1a19c <z_spin_unlock_valid>
   1ab9c:	b968      	cbnz	r0, 1abba <work_queue_main+0x16e>
   1ab9e:	4a2d      	ldr	r2, [pc, #180]	; (1ac54 <work_queue_main+0x208>)
   1aba0:	4930      	ldr	r1, [pc, #192]	; (1ac64 <work_queue_main+0x218>)
   1aba2:	482e      	ldr	r0, [pc, #184]	; (1ac5c <work_queue_main+0x210>)
   1aba4:	23ac      	movs	r3, #172	; 0xac
   1aba6:	f005 fa14 	bl	1ffd2 <printk>
   1abaa:	482f      	ldr	r0, [pc, #188]	; (1ac68 <work_queue_main+0x21c>)
   1abac:	4631      	mov	r1, r6
   1abae:	f005 fa10 	bl	1ffd2 <printk>
   1abb2:	4828      	ldr	r0, [pc, #160]	; (1ac54 <work_queue_main+0x208>)
   1abb4:	21ac      	movs	r1, #172	; 0xac
   1abb6:	f005 fc66 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1abba:	f38a 8811 	msr	BASEPRI, sl
   1abbe:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   1abc2:	2d00      	cmp	r5, #0
   1abc4:	f47f af48 	bne.w	1aa58 <work_queue_main+0xc>
	z_impl_k_yield();
   1abc8:	f001 fb2e 	bl	1c228 <z_impl_k_yield>
}
   1abcc:	e744      	b.n	1aa58 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1abce:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1abd2:	2200      	movs	r2, #0
   1abd4:	2101      	movs	r1, #1
   1abd6:	4628      	mov	r0, r5
   1abd8:	f001 fd7a 	bl	1c6d0 <z_sched_wake>
   1abdc:	2800      	cmp	r0, #0
   1abde:	d1f8      	bne.n	1abd2 <work_queue_main+0x186>
   1abe0:	e763      	b.n	1aaaa <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1abe2:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   1abe4:	f023 0303 	bic.w	r3, r3, #3
   1abe8:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1abea:	2800      	cmp	r0, #0
   1abec:	d0cb      	beq.n	1ab86 <work_queue_main+0x13a>
	return node->next;
   1abee:	6803      	ldr	r3, [r0, #0]
   1abf0:	2b00      	cmp	r3, #0
   1abf2:	bf38      	it	cc
   1abf4:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1abf6:	f04f 0900 	mov.w	r9, #0
   1abfa:	4698      	mov	r8, r3
	parent->next = child;
   1abfc:	46cb      	mov	fp, r9
		if (wc->work == work) {
   1abfe:	6843      	ldr	r3, [r0, #4]
   1ac00:	429d      	cmp	r5, r3
   1ac02:	4602      	mov	r2, r0
   1ac04:	d10d      	bne.n	1ac22 <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
   1ac06:	6802      	ldr	r2, [r0, #0]
   1ac08:	f1b9 0f00 	cmp.w	r9, #0
   1ac0c:	d115      	bne.n	1ac3a <work_queue_main+0x1ee>
   1ac0e:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   1ac10:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ac12:	4283      	cmp	r3, r0
   1ac14:	d100      	bne.n	1ac18 <work_queue_main+0x1cc>
	list->tail = node;
   1ac16:	607a      	str	r2, [r7, #4]
	parent->next = child;
   1ac18:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   1ac1c:	f7ff fe2e 	bl	1a87c <z_impl_k_sem_give>
}
   1ac20:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1ac22:	f1b8 0f00 	cmp.w	r8, #0
   1ac26:	d0ae      	beq.n	1ab86 <work_queue_main+0x13a>
	return node->next;
   1ac28:	f8d8 3000 	ldr.w	r3, [r8]
   1ac2c:	2b00      	cmp	r3, #0
   1ac2e:	bf38      	it	cc
   1ac30:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ac32:	4640      	mov	r0, r8
   1ac34:	4691      	mov	r9, r2
   1ac36:	4698      	mov	r8, r3
   1ac38:	e7e1      	b.n	1abfe <work_queue_main+0x1b2>
	parent->next = child;
   1ac3a:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   1ac3e:	687b      	ldr	r3, [r7, #4]
   1ac40:	4283      	cmp	r3, r0
	list->tail = node;
   1ac42:	bf08      	it	eq
   1ac44:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   1ac48:	e7e6      	b.n	1ac18 <work_queue_main+0x1cc>
   1ac4a:	bf00      	nop
   1ac4c:	20002474 	.word	0x20002474
   1ac50:	20002478 	.word	0x20002478
   1ac54:	00023889 	.word	0x00023889
   1ac58:	000238db 	.word	0x000238db
   1ac5c:	000237c9 	.word	0x000237c9
   1ac60:	000238f0 	.word	0x000238f0
   1ac64:	000238af 	.word	0x000238af
   1ac68:	000238c6 	.word	0x000238c6
   1ac6c:	00025095 	.word	0x00025095
   1ac70:	00025074 	.word	0x00025074

0001ac74 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1ac74:	68c3      	ldr	r3, [r0, #12]
{
   1ac76:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1ac78:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1ac7c:	079b      	lsls	r3, r3, #30
{
   1ac7e:	4605      	mov	r5, r0
   1ac80:	460c      	mov	r4, r1
	if (ret) {
   1ac82:	d50d      	bpl.n	1aca0 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ac84:	2201      	movs	r2, #1
   1ac86:	2100      	movs	r1, #0
   1ac88:	f104 0008 	add.w	r0, r4, #8
   1ac8c:	f007 fec9 	bl	22a22 <z_impl_k_sem_init>
	parent->next = child;
   1ac90:	2300      	movs	r3, #0
   1ac92:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1ac94:	4b05      	ldr	r3, [pc, #20]	; (1acac <cancel_sync_locked+0x38>)
	canceler->work = work;
   1ac96:	6065      	str	r5, [r4, #4]
   1ac98:	685a      	ldr	r2, [r3, #4]
   1ac9a:	b91a      	cbnz	r2, 1aca4 <cancel_sync_locked+0x30>
	list->head = node;
   1ac9c:	e9c3 4400 	strd	r4, r4, [r3]
}
   1aca0:	4630      	mov	r0, r6
   1aca2:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1aca4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1aca6:	605c      	str	r4, [r3, #4]
}
   1aca8:	e7fa      	b.n	1aca0 <cancel_sync_locked+0x2c>
   1acaa:	bf00      	nop
   1acac:	20002478 	.word	0x20002478

0001acb0 <submit_to_queue_locked>:
{
   1acb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1acb2:	68c3      	ldr	r3, [r0, #12]
   1acb4:	079a      	lsls	r2, r3, #30
{
   1acb6:	4604      	mov	r4, r0
   1acb8:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1acba:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1acbe:	d42b      	bmi.n	1ad18 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1acc0:	075f      	lsls	r7, r3, #29
   1acc2:	d42b      	bmi.n	1ad1c <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
   1acc4:	680a      	ldr	r2, [r1, #0]
   1acc6:	b90a      	cbnz	r2, 1accc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1acc8:	6882      	ldr	r2, [r0, #8]
   1acca:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1accc:	07d8      	lsls	r0, r3, #31
   1acce:	d528      	bpl.n	1ad22 <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
   1acd0:	68a3      	ldr	r3, [r4, #8]
   1acd2:	b95b      	cbnz	r3, 1acec <submit_to_queue_locked+0x3c>
   1acd4:	4924      	ldr	r1, [pc, #144]	; (1ad68 <submit_to_queue_locked+0xb8>)
   1acd6:	4825      	ldr	r0, [pc, #148]	; (1ad6c <submit_to_queue_locked+0xbc>)
   1acd8:	4a25      	ldr	r2, [pc, #148]	; (1ad70 <submit_to_queue_locked+0xc0>)
   1acda:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1acde:	f005 f978 	bl	1ffd2 <printk>
   1ace2:	4823      	ldr	r0, [pc, #140]	; (1ad70 <submit_to_queue_locked+0xc0>)
   1ace4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1ace8:	f005 fbcd 	bl	20486 <assert_post_action>
			*queuep = work->queue;
   1acec:	68a3      	ldr	r3, [r4, #8]
   1acee:	6033      	str	r3, [r6, #0]
			ret = 2;
   1acf0:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
   1acf2:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   1acf4:	b38f      	cbz	r7, 1ad5a <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1acf6:	4b1f      	ldr	r3, [pc, #124]	; (1ad74 <submit_to_queue_locked+0xc4>)
   1acf8:	689b      	ldr	r3, [r3, #8]
   1acfa:	42bb      	cmp	r3, r7
   1acfc:	d113      	bne.n	1ad26 <submit_to_queue_locked+0x76>
   1acfe:	f007 fe49 	bl	22994 <k_is_in_isr>
   1ad02:	f080 0001 	eor.w	r0, r0, #1
   1ad06:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   1ad08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1ad0c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1ad0e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1ad12:	d525      	bpl.n	1ad60 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
   1ad14:	b14a      	cbz	r2, 1ad2a <submit_to_queue_locked+0x7a>
   1ad16:	b950      	cbnz	r0, 1ad2e <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   1ad18:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1ad1c:	2300      	movs	r3, #0
   1ad1e:	6033      	str	r3, [r6, #0]
	return ret;
   1ad20:	e015      	b.n	1ad4e <submit_to_queue_locked+0x9e>
		ret = 1;
   1ad22:	2501      	movs	r5, #1
   1ad24:	e7e5      	b.n	1acf2 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1ad26:	2000      	movs	r0, #0
   1ad28:	e7ee      	b.n	1ad08 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
   1ad2a:	071b      	lsls	r3, r3, #28
   1ad2c:	d4f4      	bmi.n	1ad18 <submit_to_queue_locked+0x68>
	parent->next = child;
   1ad2e:	2300      	movs	r3, #0
   1ad30:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1ad32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1ad36:	b963      	cbnz	r3, 1ad52 <submit_to_queue_locked+0xa2>
	list->head = node;
   1ad38:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1ad3c:	4638      	mov	r0, r7
   1ad3e:	f007 fe80 	bl	22a42 <notify_queue_locked>
	*flagp |= BIT(bit);
   1ad42:	68e3      	ldr	r3, [r4, #12]
   1ad44:	f043 0304 	orr.w	r3, r3, #4
   1ad48:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1ad4a:	6833      	ldr	r3, [r6, #0]
   1ad4c:	60a3      	str	r3, [r4, #8]
}
   1ad4e:	4628      	mov	r0, r5
   1ad50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1ad52:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ad54:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1ad58:	e7f0      	b.n	1ad3c <submit_to_queue_locked+0x8c>
		return -EINVAL;
   1ad5a:	f06f 0515 	mvn.w	r5, #21
   1ad5e:	e7dd      	b.n	1ad1c <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
   1ad60:	f06f 0512 	mvn.w	r5, #18
   1ad64:	e7da      	b.n	1ad1c <submit_to_queue_locked+0x6c>
   1ad66:	bf00      	nop
   1ad68:	000250ac 	.word	0x000250ac
   1ad6c:	000237c9 	.word	0x000237c9
   1ad70:	00025074 	.word	0x00025074
   1ad74:	20002444 	.word	0x20002444

0001ad78 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   1ad78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ad7a:	4604      	mov	r4, r0
	__asm__ volatile(
   1ad7c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ad80:	f3ef 8511 	mrs	r5, BASEPRI
   1ad84:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ad8c:	481e      	ldr	r0, [pc, #120]	; (1ae08 <work_timeout+0x90>)
   1ad8e:	f7ff f9f7 	bl	1a180 <z_spin_lock_valid>
   1ad92:	b968      	cbnz	r0, 1adb0 <work_timeout+0x38>
   1ad94:	4a1d      	ldr	r2, [pc, #116]	; (1ae0c <work_timeout+0x94>)
   1ad96:	491e      	ldr	r1, [pc, #120]	; (1ae10 <work_timeout+0x98>)
   1ad98:	481e      	ldr	r0, [pc, #120]	; (1ae14 <work_timeout+0x9c>)
   1ad9a:	2381      	movs	r3, #129	; 0x81
   1ad9c:	f005 f919 	bl	1ffd2 <printk>
   1ada0:	4919      	ldr	r1, [pc, #100]	; (1ae08 <work_timeout+0x90>)
   1ada2:	481d      	ldr	r0, [pc, #116]	; (1ae18 <work_timeout+0xa0>)
   1ada4:	f005 f915 	bl	1ffd2 <printk>
   1ada8:	4818      	ldr	r0, [pc, #96]	; (1ae0c <work_timeout+0x94>)
   1adaa:	2181      	movs	r1, #129	; 0x81
   1adac:	f005 fb6b 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1adb0:	4815      	ldr	r0, [pc, #84]	; (1ae08 <work_timeout+0x90>)
   1adb2:	f7ff fa03 	bl	1a1bc <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   1adb6:	2300      	movs	r3, #0
   1adb8:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   1adba:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   1adbe:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1adc2:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   1adc4:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1adc8:	d506      	bpl.n	1add8 <work_timeout+0x60>
		queue = dw->queue;
   1adca:	69a3      	ldr	r3, [r4, #24]
   1adcc:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1adce:	a901      	add	r1, sp, #4
   1add0:	f1a4 0010 	sub.w	r0, r4, #16
   1add4:	f7ff ff6c 	bl	1acb0 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1add8:	480b      	ldr	r0, [pc, #44]	; (1ae08 <work_timeout+0x90>)
   1adda:	f7ff f9df 	bl	1a19c <z_spin_unlock_valid>
   1adde:	b968      	cbnz	r0, 1adfc <work_timeout+0x84>
   1ade0:	4a0a      	ldr	r2, [pc, #40]	; (1ae0c <work_timeout+0x94>)
   1ade2:	490e      	ldr	r1, [pc, #56]	; (1ae1c <work_timeout+0xa4>)
   1ade4:	480b      	ldr	r0, [pc, #44]	; (1ae14 <work_timeout+0x9c>)
   1ade6:	23ac      	movs	r3, #172	; 0xac
   1ade8:	f005 f8f3 	bl	1ffd2 <printk>
   1adec:	4906      	ldr	r1, [pc, #24]	; (1ae08 <work_timeout+0x90>)
   1adee:	480c      	ldr	r0, [pc, #48]	; (1ae20 <work_timeout+0xa8>)
   1adf0:	f005 f8ef 	bl	1ffd2 <printk>
   1adf4:	4805      	ldr	r0, [pc, #20]	; (1ae0c <work_timeout+0x94>)
   1adf6:	21ac      	movs	r1, #172	; 0xac
   1adf8:	f005 fb45 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1adfc:	f385 8811 	msr	BASEPRI, r5
   1ae00:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   1ae04:	b003      	add	sp, #12
   1ae06:	bd30      	pop	{r4, r5, pc}
   1ae08:	20002474 	.word	0x20002474
   1ae0c:	00023889 	.word	0x00023889
   1ae10:	000238db 	.word	0x000238db
   1ae14:	000237c9 	.word	0x000237c9
   1ae18:	000238f0 	.word	0x000238f0
   1ae1c:	000238af 	.word	0x000238af
   1ae20:	000238c6 	.word	0x000238c6

0001ae24 <k_work_init>:
{
   1ae24:	b538      	push	{r3, r4, r5, lr}
   1ae26:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   1ae28:	4604      	mov	r4, r0
   1ae2a:	b948      	cbnz	r0, 1ae40 <k_work_init+0x1c>
   1ae2c:	490d      	ldr	r1, [pc, #52]	; (1ae64 <k_work_init+0x40>)
   1ae2e:	480e      	ldr	r0, [pc, #56]	; (1ae68 <k_work_init+0x44>)
   1ae30:	4a0e      	ldr	r2, [pc, #56]	; (1ae6c <k_work_init+0x48>)
   1ae32:	2389      	movs	r3, #137	; 0x89
   1ae34:	f005 f8cd 	bl	1ffd2 <printk>
   1ae38:	480c      	ldr	r0, [pc, #48]	; (1ae6c <k_work_init+0x48>)
   1ae3a:	2189      	movs	r1, #137	; 0x89
   1ae3c:	f005 fb23 	bl	20486 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   1ae40:	b94d      	cbnz	r5, 1ae56 <k_work_init+0x32>
   1ae42:	490b      	ldr	r1, [pc, #44]	; (1ae70 <k_work_init+0x4c>)
   1ae44:	4808      	ldr	r0, [pc, #32]	; (1ae68 <k_work_init+0x44>)
   1ae46:	4a09      	ldr	r2, [pc, #36]	; (1ae6c <k_work_init+0x48>)
   1ae48:	238a      	movs	r3, #138	; 0x8a
   1ae4a:	f005 f8c2 	bl	1ffd2 <printk>
   1ae4e:	4807      	ldr	r0, [pc, #28]	; (1ae6c <k_work_init+0x48>)
   1ae50:	218a      	movs	r1, #138	; 0x8a
   1ae52:	f005 fb18 	bl	20486 <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1ae56:	2210      	movs	r2, #16
   1ae58:	2100      	movs	r1, #0
   1ae5a:	4620      	mov	r0, r4
   1ae5c:	f007 ff25 	bl	22caa <memset>
   1ae60:	6065      	str	r5, [r4, #4]
}
   1ae62:	bd38      	pop	{r3, r4, r5, pc}
   1ae64:	0002514b 	.word	0x0002514b
   1ae68:	000237c9 	.word	0x000237c9
   1ae6c:	00025074 	.word	0x00025074
   1ae70:	00025095 	.word	0x00025095

0001ae74 <k_work_submit_to_queue>:
{
   1ae74:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   1ae76:	460c      	mov	r4, r1
{
   1ae78:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   1ae7a:	b959      	cbnz	r1, 1ae94 <k_work_submit_to_queue+0x20>
   1ae7c:	4926      	ldr	r1, [pc, #152]	; (1af18 <k_work_submit_to_queue+0xa4>)
   1ae7e:	4827      	ldr	r0, [pc, #156]	; (1af1c <k_work_submit_to_queue+0xa8>)
   1ae80:	4a27      	ldr	r2, [pc, #156]	; (1af20 <k_work_submit_to_queue+0xac>)
   1ae82:	f240 1369 	movw	r3, #361	; 0x169
   1ae86:	f005 f8a4 	bl	1ffd2 <printk>
   1ae8a:	4825      	ldr	r0, [pc, #148]	; (1af20 <k_work_submit_to_queue+0xac>)
   1ae8c:	f240 1169 	movw	r1, #361	; 0x169
   1ae90:	f005 faf9 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1ae94:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ae98:	f3ef 8511 	mrs	r5, BASEPRI
   1ae9c:	f383 8812 	msr	BASEPRI_MAX, r3
   1aea0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aea4:	481f      	ldr	r0, [pc, #124]	; (1af24 <k_work_submit_to_queue+0xb0>)
   1aea6:	f7ff f96b 	bl	1a180 <z_spin_lock_valid>
   1aeaa:	b968      	cbnz	r0, 1aec8 <k_work_submit_to_queue+0x54>
   1aeac:	4a1e      	ldr	r2, [pc, #120]	; (1af28 <k_work_submit_to_queue+0xb4>)
   1aeae:	491f      	ldr	r1, [pc, #124]	; (1af2c <k_work_submit_to_queue+0xb8>)
   1aeb0:	481a      	ldr	r0, [pc, #104]	; (1af1c <k_work_submit_to_queue+0xa8>)
   1aeb2:	2381      	movs	r3, #129	; 0x81
   1aeb4:	f005 f88d 	bl	1ffd2 <printk>
   1aeb8:	491a      	ldr	r1, [pc, #104]	; (1af24 <k_work_submit_to_queue+0xb0>)
   1aeba:	481d      	ldr	r0, [pc, #116]	; (1af30 <k_work_submit_to_queue+0xbc>)
   1aebc:	f005 f889 	bl	1ffd2 <printk>
   1aec0:	4819      	ldr	r0, [pc, #100]	; (1af28 <k_work_submit_to_queue+0xb4>)
   1aec2:	2181      	movs	r1, #129	; 0x81
   1aec4:	f005 fadf 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1aec8:	4816      	ldr	r0, [pc, #88]	; (1af24 <k_work_submit_to_queue+0xb0>)
   1aeca:	f7ff f977 	bl	1a1bc <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   1aece:	4620      	mov	r0, r4
   1aed0:	a901      	add	r1, sp, #4
   1aed2:	f7ff feed 	bl	1acb0 <submit_to_queue_locked>
   1aed6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aed8:	4812      	ldr	r0, [pc, #72]	; (1af24 <k_work_submit_to_queue+0xb0>)
   1aeda:	f7ff f95f 	bl	1a19c <z_spin_unlock_valid>
   1aede:	b968      	cbnz	r0, 1aefc <k_work_submit_to_queue+0x88>
   1aee0:	4a11      	ldr	r2, [pc, #68]	; (1af28 <k_work_submit_to_queue+0xb4>)
   1aee2:	4914      	ldr	r1, [pc, #80]	; (1af34 <k_work_submit_to_queue+0xc0>)
   1aee4:	480d      	ldr	r0, [pc, #52]	; (1af1c <k_work_submit_to_queue+0xa8>)
   1aee6:	23ac      	movs	r3, #172	; 0xac
   1aee8:	f005 f873 	bl	1ffd2 <printk>
   1aeec:	490d      	ldr	r1, [pc, #52]	; (1af24 <k_work_submit_to_queue+0xb0>)
   1aeee:	4812      	ldr	r0, [pc, #72]	; (1af38 <k_work_submit_to_queue+0xc4>)
   1aef0:	f005 f86f 	bl	1ffd2 <printk>
   1aef4:	480c      	ldr	r0, [pc, #48]	; (1af28 <k_work_submit_to_queue+0xb4>)
   1aef6:	21ac      	movs	r1, #172	; 0xac
   1aef8:	f005 fac5 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1aefc:	f385 8811 	msr	BASEPRI, r5
   1af00:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1af04:	2c00      	cmp	r4, #0
   1af06:	dd04      	ble.n	1af12 <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
   1af08:	f001 fb1e 	bl	1c548 <z_impl_k_is_preempt_thread>
   1af0c:	b108      	cbz	r0, 1af12 <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
   1af0e:	f001 f98b 	bl	1c228 <z_impl_k_yield>
}
   1af12:	4620      	mov	r0, r4
   1af14:	b003      	add	sp, #12
   1af16:	bd30      	pop	{r4, r5, pc}
   1af18:	0002514b 	.word	0x0002514b
   1af1c:	000237c9 	.word	0x000237c9
   1af20:	00025074 	.word	0x00025074
   1af24:	20002474 	.word	0x20002474
   1af28:	00023889 	.word	0x00023889
   1af2c:	000238db 	.word	0x000238db
   1af30:	000238f0 	.word	0x000238f0
   1af34:	000238af 	.word	0x000238af
   1af38:	000238c6 	.word	0x000238c6

0001af3c <k_work_submit>:
{
   1af3c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1af3e:	4801      	ldr	r0, [pc, #4]	; (1af44 <k_work_submit+0x8>)
   1af40:	f7ff bf98 	b.w	1ae74 <k_work_submit_to_queue>
   1af44:	20001bd8 	.word	0x20001bd8

0001af48 <k_work_queue_start>:
{
   1af48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af4c:	b088      	sub	sp, #32
   1af4e:	460e      	mov	r6, r1
   1af50:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1af52:	4617      	mov	r7, r2
   1af54:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   1af56:	4604      	mov	r4, r0
   1af58:	b958      	cbnz	r0, 1af72 <k_work_queue_start+0x2a>
   1af5a:	492e      	ldr	r1, [pc, #184]	; (1b014 <k_work_queue_start+0xcc>)
   1af5c:	482e      	ldr	r0, [pc, #184]	; (1b018 <k_work_queue_start+0xd0>)
   1af5e:	4a2f      	ldr	r2, [pc, #188]	; (1b01c <k_work_queue_start+0xd4>)
   1af60:	f44f 732e 	mov.w	r3, #696	; 0x2b8
   1af64:	f005 f835 	bl	1ffd2 <printk>
   1af68:	482c      	ldr	r0, [pc, #176]	; (1b01c <k_work_queue_start+0xd4>)
   1af6a:	f44f 712e 	mov.w	r1, #696	; 0x2b8
   1af6e:	f005 fa8a 	bl	20486 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   1af72:	b95e      	cbnz	r6, 1af8c <k_work_queue_start+0x44>
   1af74:	492a      	ldr	r1, [pc, #168]	; (1b020 <k_work_queue_start+0xd8>)
   1af76:	4828      	ldr	r0, [pc, #160]	; (1b018 <k_work_queue_start+0xd0>)
   1af78:	4a28      	ldr	r2, [pc, #160]	; (1b01c <k_work_queue_start+0xd4>)
   1af7a:	f240 23b9 	movw	r3, #697	; 0x2b9
   1af7e:	f005 f828 	bl	1ffd2 <printk>
   1af82:	4826      	ldr	r0, [pc, #152]	; (1b01c <k_work_queue_start+0xd4>)
   1af84:	f240 21b9 	movw	r1, #697	; 0x2b9
   1af88:	f005 fa7d 	bl	20486 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   1af8c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   1af90:	07db      	lsls	r3, r3, #31
   1af92:	d50b      	bpl.n	1afac <k_work_queue_start+0x64>
   1af94:	4923      	ldr	r1, [pc, #140]	; (1b024 <k_work_queue_start+0xdc>)
   1af96:	4820      	ldr	r0, [pc, #128]	; (1b018 <k_work_queue_start+0xd0>)
   1af98:	4a20      	ldr	r2, [pc, #128]	; (1b01c <k_work_queue_start+0xd4>)
   1af9a:	f240 23ba 	movw	r3, #698	; 0x2ba
   1af9e:	f005 f818 	bl	1ffd2 <printk>
   1afa2:	481e      	ldr	r0, [pc, #120]	; (1b01c <k_work_queue_start+0xd4>)
   1afa4:	f240 21ba 	movw	r1, #698	; 0x2ba
   1afa8:	f005 fa6d 	bl	20486 <assert_post_action>
	list->head = NULL;
   1afac:	2300      	movs	r3, #0
	list->tail = NULL;
   1afae:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   1afb2:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1afb6:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   1afba:	f104 0390 	add.w	r3, r4, #144	; 0x90
   1afbe:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   1afc2:	b32d      	cbz	r5, 1b010 <k_work_queue_start+0xc8>
   1afc4:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1afc6:	2b00      	cmp	r3, #0
   1afc8:	f240 1101 	movw	r1, #257	; 0x101
   1afcc:	bf08      	it	eq
   1afce:	2101      	moveq	r1, #1
	*flagp = flags;
   1afd0:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1afd4:	f04f 32ff 	mov.w	r2, #4294967295
   1afd8:	f04f 33ff 	mov.w	r3, #4294967295
   1afdc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1afe0:	2200      	movs	r2, #0
   1afe2:	e9cd 8203 	strd	r8, r2, [sp, #12]
   1afe6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1afea:	4b0f      	ldr	r3, [pc, #60]	; (1b028 <k_work_queue_start+0xe0>)
   1afec:	9400      	str	r4, [sp, #0]
   1afee:	463a      	mov	r2, r7
   1aff0:	4631      	mov	r1, r6
   1aff2:	4620      	mov	r0, r4
   1aff4:	f7fe ffe6 	bl	19fc4 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1aff8:	b125      	cbz	r5, 1b004 <k_work_queue_start+0xbc>
   1affa:	6829      	ldr	r1, [r5, #0]
   1affc:	b111      	cbz	r1, 1b004 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
   1affe:	4620      	mov	r0, r4
   1b000:	f007 fcce 	bl	229a0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1b004:	4620      	mov	r0, r4
}
   1b006:	b008      	add	sp, #32
   1b008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b00c:	f007 bccb 	b.w	229a6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1b010:	2101      	movs	r1, #1
   1b012:	e7dd      	b.n	1afd0 <k_work_queue_start+0x88>
   1b014:	0002510a 	.word	0x0002510a
   1b018:	000237c9 	.word	0x000237c9
   1b01c:	00025074 	.word	0x00025074
   1b020:	00025110 	.word	0x00025110
   1b024:	00025116 	.word	0x00025116
   1b028:	0001aa4d 	.word	0x0001aa4d

0001b02c <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   1b02c:	b538      	push	{r3, r4, r5, lr}
   1b02e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1b030:	4604      	mov	r4, r0
   1b032:	b958      	cbnz	r0, 1b04c <k_work_init_delayable+0x20>
   1b034:	4911      	ldr	r1, [pc, #68]	; (1b07c <k_work_init_delayable+0x50>)
   1b036:	4812      	ldr	r0, [pc, #72]	; (1b080 <k_work_init_delayable+0x54>)
   1b038:	4a12      	ldr	r2, [pc, #72]	; (1b084 <k_work_init_delayable+0x58>)
   1b03a:	f44f 734c 	mov.w	r3, #816	; 0x330
   1b03e:	f004 ffc8 	bl	1ffd2 <printk>
   1b042:	4810      	ldr	r0, [pc, #64]	; (1b084 <k_work_init_delayable+0x58>)
   1b044:	f44f 714c 	mov.w	r1, #816	; 0x330
   1b048:	f005 fa1d 	bl	20486 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   1b04c:	b95d      	cbnz	r5, 1b066 <k_work_init_delayable+0x3a>
   1b04e:	490e      	ldr	r1, [pc, #56]	; (1b088 <k_work_init_delayable+0x5c>)
   1b050:	480b      	ldr	r0, [pc, #44]	; (1b080 <k_work_init_delayable+0x54>)
   1b052:	4a0c      	ldr	r2, [pc, #48]	; (1b084 <k_work_init_delayable+0x58>)
   1b054:	f240 3331 	movw	r3, #817	; 0x331
   1b058:	f004 ffbb 	bl	1ffd2 <printk>
   1b05c:	4809      	ldr	r0, [pc, #36]	; (1b084 <k_work_init_delayable+0x58>)
   1b05e:	f240 3131 	movw	r1, #817	; 0x331
   1b062:	f005 fa10 	bl	20486 <assert_post_action>

	*dwork = (struct k_work_delayable){
   1b066:	2230      	movs	r2, #48	; 0x30
   1b068:	2100      	movs	r1, #0
   1b06a:	4620      	mov	r0, r4
   1b06c:	f007 fe1d 	bl	22caa <memset>
   1b070:	f44f 7380 	mov.w	r3, #256	; 0x100
   1b074:	6065      	str	r5, [r4, #4]
   1b076:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   1b078:	bd38      	pop	{r3, r4, r5, pc}
   1b07a:	bf00      	nop
   1b07c:	0002514a 	.word	0x0002514a
   1b080:	000237c9 	.word	0x000237c9
   1b084:	00025074 	.word	0x00025074
   1b088:	00025095 	.word	0x00025095

0001b08c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1b08c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b08e:	4616      	mov	r6, r2
   1b090:	9001      	str	r0, [sp, #4]
   1b092:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1b094:	460c      	mov	r4, r1
   1b096:	b959      	cbnz	r1, 1b0b0 <k_work_schedule_for_queue+0x24>
   1b098:	492e      	ldr	r1, [pc, #184]	; (1b154 <k_work_schedule_for_queue+0xc8>)
   1b09a:	482f      	ldr	r0, [pc, #188]	; (1b158 <k_work_schedule_for_queue+0xcc>)
   1b09c:	4a2f      	ldr	r2, [pc, #188]	; (1b15c <k_work_schedule_for_queue+0xd0>)
   1b09e:	f240 33a7 	movw	r3, #935	; 0x3a7
   1b0a2:	f004 ff96 	bl	1ffd2 <printk>
   1b0a6:	482d      	ldr	r0, [pc, #180]	; (1b15c <k_work_schedule_for_queue+0xd0>)
   1b0a8:	f240 31a7 	movw	r1, #935	; 0x3a7
   1b0ac:	f005 f9eb 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1b0b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b0b4:	f3ef 8511 	mrs	r5, BASEPRI
   1b0b8:	f383 8812 	msr	BASEPRI_MAX, r3
   1b0bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b0c0:	4827      	ldr	r0, [pc, #156]	; (1b160 <k_work_schedule_for_queue+0xd4>)
   1b0c2:	f7ff f85d 	bl	1a180 <z_spin_lock_valid>
   1b0c6:	b968      	cbnz	r0, 1b0e4 <k_work_schedule_for_queue+0x58>
   1b0c8:	4a26      	ldr	r2, [pc, #152]	; (1b164 <k_work_schedule_for_queue+0xd8>)
   1b0ca:	4927      	ldr	r1, [pc, #156]	; (1b168 <k_work_schedule_for_queue+0xdc>)
   1b0cc:	4822      	ldr	r0, [pc, #136]	; (1b158 <k_work_schedule_for_queue+0xcc>)
   1b0ce:	2381      	movs	r3, #129	; 0x81
   1b0d0:	f004 ff7f 	bl	1ffd2 <printk>
   1b0d4:	4922      	ldr	r1, [pc, #136]	; (1b160 <k_work_schedule_for_queue+0xd4>)
   1b0d6:	4825      	ldr	r0, [pc, #148]	; (1b16c <k_work_schedule_for_queue+0xe0>)
   1b0d8:	f004 ff7b 	bl	1ffd2 <printk>
   1b0dc:	4821      	ldr	r0, [pc, #132]	; (1b164 <k_work_schedule_for_queue+0xd8>)
   1b0de:	2181      	movs	r1, #129	; 0x81
   1b0e0:	f005 f9d1 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b0e4:	481e      	ldr	r0, [pc, #120]	; (1b160 <k_work_schedule_for_queue+0xd4>)
   1b0e6:	f7ff f869 	bl	1a1bc <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   1b0ea:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1b0ec:	f013 0f0e 	tst.w	r3, #14
   1b0f0:	d12e      	bne.n	1b150 <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b0f2:	ea56 0207 	orrs.w	r2, r6, r7
   1b0f6:	d11d      	bne.n	1b134 <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
   1b0f8:	4620      	mov	r0, r4
   1b0fa:	a901      	add	r1, sp, #4
   1b0fc:	f7ff fdd8 	bl	1acb0 <submit_to_queue_locked>
   1b100:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b102:	4817      	ldr	r0, [pc, #92]	; (1b160 <k_work_schedule_for_queue+0xd4>)
   1b104:	f7ff f84a 	bl	1a19c <z_spin_unlock_valid>
   1b108:	b968      	cbnz	r0, 1b126 <k_work_schedule_for_queue+0x9a>
   1b10a:	4a16      	ldr	r2, [pc, #88]	; (1b164 <k_work_schedule_for_queue+0xd8>)
   1b10c:	4918      	ldr	r1, [pc, #96]	; (1b170 <k_work_schedule_for_queue+0xe4>)
   1b10e:	4812      	ldr	r0, [pc, #72]	; (1b158 <k_work_schedule_for_queue+0xcc>)
   1b110:	23ac      	movs	r3, #172	; 0xac
   1b112:	f004 ff5e 	bl	1ffd2 <printk>
   1b116:	4912      	ldr	r1, [pc, #72]	; (1b160 <k_work_schedule_for_queue+0xd4>)
   1b118:	4816      	ldr	r0, [pc, #88]	; (1b174 <k_work_schedule_for_queue+0xe8>)
   1b11a:	f004 ff5a 	bl	1ffd2 <printk>
   1b11e:	4811      	ldr	r0, [pc, #68]	; (1b164 <k_work_schedule_for_queue+0xd8>)
   1b120:	21ac      	movs	r1, #172	; 0xac
   1b122:	f005 f9b0 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1b126:	f385 8811 	msr	BASEPRI, r5
   1b12a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1b12e:	4620      	mov	r0, r4
   1b130:	b003      	add	sp, #12
   1b132:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1b134:	f043 0308 	orr.w	r3, r3, #8
   1b138:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1b13a:	9b01      	ldr	r3, [sp, #4]
   1b13c:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b13e:	f104 0010 	add.w	r0, r4, #16
   1b142:	490d      	ldr	r1, [pc, #52]	; (1b178 <k_work_schedule_for_queue+0xec>)
   1b144:	4632      	mov	r2, r6
   1b146:	463b      	mov	r3, r7
   1b148:	f001 fb96 	bl	1c878 <z_add_timeout>
	return ret;
   1b14c:	2401      	movs	r4, #1
   1b14e:	e7d8      	b.n	1b102 <k_work_schedule_for_queue+0x76>
	int ret = 0;
   1b150:	2400      	movs	r4, #0
   1b152:	e7d6      	b.n	1b102 <k_work_schedule_for_queue+0x76>
   1b154:	0002514a 	.word	0x0002514a
   1b158:	000237c9 	.word	0x000237c9
   1b15c:	00025074 	.word	0x00025074
   1b160:	20002474 	.word	0x20002474
   1b164:	00023889 	.word	0x00023889
   1b168:	000238db 	.word	0x000238db
   1b16c:	000238f0 	.word	0x000238f0
   1b170:	000238af 	.word	0x000238af
   1b174:	000238c6 	.word	0x000238c6
   1b178:	0001ad79 	.word	0x0001ad79

0001b17c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1b17c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1b17e:	4801      	ldr	r0, [pc, #4]	; (1b184 <k_work_schedule+0x8>)
   1b180:	f7ff bf84 	b.w	1b08c <k_work_schedule_for_queue>
   1b184:	20001bd8 	.word	0x20001bd8

0001b188 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1b188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b18a:	4616      	mov	r6, r2
   1b18c:	9001      	str	r0, [sp, #4]
   1b18e:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1b190:	460c      	mov	r4, r1
   1b192:	b959      	cbnz	r1, 1b1ac <k_work_reschedule_for_queue+0x24>
   1b194:	492d      	ldr	r1, [pc, #180]	; (1b24c <k_work_reschedule_for_queue+0xc4>)
   1b196:	482e      	ldr	r0, [pc, #184]	; (1b250 <k_work_reschedule_for_queue+0xc8>)
   1b198:	4a2e      	ldr	r2, [pc, #184]	; (1b254 <k_work_reschedule_for_queue+0xcc>)
   1b19a:	f240 33cb 	movw	r3, #971	; 0x3cb
   1b19e:	f004 ff18 	bl	1ffd2 <printk>
   1b1a2:	482c      	ldr	r0, [pc, #176]	; (1b254 <k_work_reschedule_for_queue+0xcc>)
   1b1a4:	f240 31cb 	movw	r1, #971	; 0x3cb
   1b1a8:	f005 f96d 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1b1ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b1b0:	f3ef 8511 	mrs	r5, BASEPRI
   1b1b4:	f383 8812 	msr	BASEPRI_MAX, r3
   1b1b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b1bc:	4826      	ldr	r0, [pc, #152]	; (1b258 <k_work_reschedule_for_queue+0xd0>)
   1b1be:	f7fe ffdf 	bl	1a180 <z_spin_lock_valid>
   1b1c2:	b968      	cbnz	r0, 1b1e0 <k_work_reschedule_for_queue+0x58>
   1b1c4:	4a25      	ldr	r2, [pc, #148]	; (1b25c <k_work_reschedule_for_queue+0xd4>)
   1b1c6:	4926      	ldr	r1, [pc, #152]	; (1b260 <k_work_reschedule_for_queue+0xd8>)
   1b1c8:	4821      	ldr	r0, [pc, #132]	; (1b250 <k_work_reschedule_for_queue+0xc8>)
   1b1ca:	2381      	movs	r3, #129	; 0x81
   1b1cc:	f004 ff01 	bl	1ffd2 <printk>
   1b1d0:	4921      	ldr	r1, [pc, #132]	; (1b258 <k_work_reschedule_for_queue+0xd0>)
   1b1d2:	4824      	ldr	r0, [pc, #144]	; (1b264 <k_work_reschedule_for_queue+0xdc>)
   1b1d4:	f004 fefd 	bl	1ffd2 <printk>
   1b1d8:	4820      	ldr	r0, [pc, #128]	; (1b25c <k_work_reschedule_for_queue+0xd4>)
   1b1da:	2181      	movs	r1, #129	; 0x81
   1b1dc:	f005 f953 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b1e0:	481d      	ldr	r0, [pc, #116]	; (1b258 <k_work_reschedule_for_queue+0xd0>)
   1b1e2:	f7fe ffeb 	bl	1a1bc <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1b1e6:	4620      	mov	r0, r4
   1b1e8:	f007 fc32 	bl	22a50 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b1ec:	ea56 0307 	orrs.w	r3, r6, r7
   1b1f0:	d11d      	bne.n	1b22e <k_work_reschedule_for_queue+0xa6>
		return submit_to_queue_locked(work, queuep);
   1b1f2:	4620      	mov	r0, r4
   1b1f4:	a901      	add	r1, sp, #4
   1b1f6:	f7ff fd5b 	bl	1acb0 <submit_to_queue_locked>
   1b1fa:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b1fc:	4816      	ldr	r0, [pc, #88]	; (1b258 <k_work_reschedule_for_queue+0xd0>)
   1b1fe:	f7fe ffcd 	bl	1a19c <z_spin_unlock_valid>
   1b202:	b968      	cbnz	r0, 1b220 <k_work_reschedule_for_queue+0x98>
   1b204:	4a15      	ldr	r2, [pc, #84]	; (1b25c <k_work_reschedule_for_queue+0xd4>)
   1b206:	4918      	ldr	r1, [pc, #96]	; (1b268 <k_work_reschedule_for_queue+0xe0>)
   1b208:	4811      	ldr	r0, [pc, #68]	; (1b250 <k_work_reschedule_for_queue+0xc8>)
   1b20a:	23ac      	movs	r3, #172	; 0xac
   1b20c:	f004 fee1 	bl	1ffd2 <printk>
   1b210:	4911      	ldr	r1, [pc, #68]	; (1b258 <k_work_reschedule_for_queue+0xd0>)
   1b212:	4816      	ldr	r0, [pc, #88]	; (1b26c <k_work_reschedule_for_queue+0xe4>)
   1b214:	f004 fedd 	bl	1ffd2 <printk>
   1b218:	4810      	ldr	r0, [pc, #64]	; (1b25c <k_work_reschedule_for_queue+0xd4>)
   1b21a:	21ac      	movs	r1, #172	; 0xac
   1b21c:	f005 f933 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1b220:	f385 8811 	msr	BASEPRI, r5
   1b224:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1b228:	4620      	mov	r0, r4
   1b22a:	b003      	add	sp, #12
   1b22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1b22e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b230:	490f      	ldr	r1, [pc, #60]	; (1b270 <k_work_reschedule_for_queue+0xe8>)
	*flagp |= BIT(bit);
   1b232:	f043 0308 	orr.w	r3, r3, #8
   1b236:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1b238:	9b01      	ldr	r3, [sp, #4]
   1b23a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b23c:	f104 0010 	add.w	r0, r4, #16
   1b240:	4632      	mov	r2, r6
   1b242:	463b      	mov	r3, r7
   1b244:	f001 fb18 	bl	1c878 <z_add_timeout>
	return ret;
   1b248:	2401      	movs	r4, #1
   1b24a:	e7d7      	b.n	1b1fc <k_work_reschedule_for_queue+0x74>
   1b24c:	0002514a 	.word	0x0002514a
   1b250:	000237c9 	.word	0x000237c9
   1b254:	00025074 	.word	0x00025074
   1b258:	20002474 	.word	0x20002474
   1b25c:	00023889 	.word	0x00023889
   1b260:	000238db 	.word	0x000238db
   1b264:	000238f0 	.word	0x000238f0
   1b268:	000238af 	.word	0x000238af
   1b26c:	000238c6 	.word	0x000238c6
   1b270:	0001ad79 	.word	0x0001ad79

0001b274 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1b274:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1b276:	4801      	ldr	r0, [pc, #4]	; (1b27c <k_work_reschedule+0x8>)
   1b278:	f7ff bf86 	b.w	1b188 <k_work_reschedule_for_queue>
   1b27c:	20001bd8 	.word	0x20001bd8

0001b280 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1b280:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   1b282:	4604      	mov	r4, r0
   1b284:	b958      	cbnz	r0, 1b29e <k_work_cancel_delayable+0x1e>
   1b286:	4924      	ldr	r1, [pc, #144]	; (1b318 <k_work_cancel_delayable+0x98>)
   1b288:	4824      	ldr	r0, [pc, #144]	; (1b31c <k_work_cancel_delayable+0x9c>)
   1b28a:	4a25      	ldr	r2, [pc, #148]	; (1b320 <k_work_cancel_delayable+0xa0>)
   1b28c:	f240 33ed 	movw	r3, #1005	; 0x3ed
   1b290:	f004 fe9f 	bl	1ffd2 <printk>
   1b294:	4822      	ldr	r0, [pc, #136]	; (1b320 <k_work_cancel_delayable+0xa0>)
   1b296:	f240 31ed 	movw	r1, #1005	; 0x3ed
   1b29a:	f005 f8f4 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1b29e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b2a2:	f3ef 8511 	mrs	r5, BASEPRI
   1b2a6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b2aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b2ae:	481d      	ldr	r0, [pc, #116]	; (1b324 <k_work_cancel_delayable+0xa4>)
   1b2b0:	f7fe ff66 	bl	1a180 <z_spin_lock_valid>
   1b2b4:	b968      	cbnz	r0, 1b2d2 <k_work_cancel_delayable+0x52>
   1b2b6:	4a1c      	ldr	r2, [pc, #112]	; (1b328 <k_work_cancel_delayable+0xa8>)
   1b2b8:	491c      	ldr	r1, [pc, #112]	; (1b32c <k_work_cancel_delayable+0xac>)
   1b2ba:	4818      	ldr	r0, [pc, #96]	; (1b31c <k_work_cancel_delayable+0x9c>)
   1b2bc:	2381      	movs	r3, #129	; 0x81
   1b2be:	f004 fe88 	bl	1ffd2 <printk>
   1b2c2:	4918      	ldr	r1, [pc, #96]	; (1b324 <k_work_cancel_delayable+0xa4>)
   1b2c4:	481a      	ldr	r0, [pc, #104]	; (1b330 <k_work_cancel_delayable+0xb0>)
   1b2c6:	f004 fe84 	bl	1ffd2 <printk>
   1b2ca:	4817      	ldr	r0, [pc, #92]	; (1b328 <k_work_cancel_delayable+0xa8>)
   1b2cc:	2181      	movs	r1, #129	; 0x81
   1b2ce:	f005 f8da 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b2d2:	4814      	ldr	r0, [pc, #80]	; (1b324 <k_work_cancel_delayable+0xa4>)
   1b2d4:	f7fe ff72 	bl	1a1bc <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   1b2d8:	4620      	mov	r0, r4
   1b2da:	f007 fbb9 	bl	22a50 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1b2de:	4620      	mov	r0, r4
   1b2e0:	f007 fbc4 	bl	22a6c <cancel_async_locked>
   1b2e4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b2e6:	480f      	ldr	r0, [pc, #60]	; (1b324 <k_work_cancel_delayable+0xa4>)
   1b2e8:	f7fe ff58 	bl	1a19c <z_spin_unlock_valid>
   1b2ec:	b968      	cbnz	r0, 1b30a <k_work_cancel_delayable+0x8a>
   1b2ee:	4a0e      	ldr	r2, [pc, #56]	; (1b328 <k_work_cancel_delayable+0xa8>)
   1b2f0:	4910      	ldr	r1, [pc, #64]	; (1b334 <k_work_cancel_delayable+0xb4>)
   1b2f2:	480a      	ldr	r0, [pc, #40]	; (1b31c <k_work_cancel_delayable+0x9c>)
   1b2f4:	23ac      	movs	r3, #172	; 0xac
   1b2f6:	f004 fe6c 	bl	1ffd2 <printk>
   1b2fa:	490a      	ldr	r1, [pc, #40]	; (1b324 <k_work_cancel_delayable+0xa4>)
   1b2fc:	480e      	ldr	r0, [pc, #56]	; (1b338 <k_work_cancel_delayable+0xb8>)
   1b2fe:	f004 fe68 	bl	1ffd2 <printk>
   1b302:	4809      	ldr	r0, [pc, #36]	; (1b328 <k_work_cancel_delayable+0xa8>)
   1b304:	21ac      	movs	r1, #172	; 0xac
   1b306:	f005 f8be 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1b30a:	f385 8811 	msr	BASEPRI, r5
   1b30e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1b312:	4620      	mov	r0, r4
   1b314:	bd38      	pop	{r3, r4, r5, pc}
   1b316:	bf00      	nop
   1b318:	0002514a 	.word	0x0002514a
   1b31c:	000237c9 	.word	0x000237c9
   1b320:	00025074 	.word	0x00025074
   1b324:	20002474 	.word	0x20002474
   1b328:	00023889 	.word	0x00023889
   1b32c:	000238db 	.word	0x000238db
   1b330:	000238f0 	.word	0x000238f0
   1b334:	000238af 	.word	0x000238af
   1b338:	000238c6 	.word	0x000238c6

0001b33c <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1b33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b340:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1b342:	4605      	mov	r5, r0
   1b344:	b958      	cbnz	r0, 1b35e <k_work_cancel_delayable_sync+0x22>
   1b346:	493f      	ldr	r1, [pc, #252]	; (1b444 <k_work_cancel_delayable_sync+0x108>)
   1b348:	483f      	ldr	r0, [pc, #252]	; (1b448 <k_work_cancel_delayable_sync+0x10c>)
   1b34a:	4a40      	ldr	r2, [pc, #256]	; (1b44c <k_work_cancel_delayable_sync+0x110>)
   1b34c:	f240 33fe 	movw	r3, #1022	; 0x3fe
   1b350:	f004 fe3f 	bl	1ffd2 <printk>
   1b354:	483d      	ldr	r0, [pc, #244]	; (1b44c <k_work_cancel_delayable_sync+0x110>)
   1b356:	f240 31fe 	movw	r1, #1022	; 0x3fe
   1b35a:	f005 f894 	bl	20486 <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   1b35e:	b95e      	cbnz	r6, 1b378 <k_work_cancel_delayable_sync+0x3c>
   1b360:	493b      	ldr	r1, [pc, #236]	; (1b450 <k_work_cancel_delayable_sync+0x114>)
   1b362:	4839      	ldr	r0, [pc, #228]	; (1b448 <k_work_cancel_delayable_sync+0x10c>)
   1b364:	4a39      	ldr	r2, [pc, #228]	; (1b44c <k_work_cancel_delayable_sync+0x110>)
   1b366:	f240 33ff 	movw	r3, #1023	; 0x3ff
   1b36a:	f004 fe32 	bl	1ffd2 <printk>
   1b36e:	4837      	ldr	r0, [pc, #220]	; (1b44c <k_work_cancel_delayable_sync+0x110>)
   1b370:	f240 31ff 	movw	r1, #1023	; 0x3ff
   1b374:	f005 f887 	bl	20486 <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   1b378:	f007 fb0c 	bl	22994 <k_is_in_isr>
   1b37c:	b158      	cbz	r0, 1b396 <k_work_cancel_delayable_sync+0x5a>
   1b37e:	4935      	ldr	r1, [pc, #212]	; (1b454 <k_work_cancel_delayable_sync+0x118>)
   1b380:	4831      	ldr	r0, [pc, #196]	; (1b448 <k_work_cancel_delayable_sync+0x10c>)
   1b382:	4a32      	ldr	r2, [pc, #200]	; (1b44c <k_work_cancel_delayable_sync+0x110>)
   1b384:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1b388:	f004 fe23 	bl	1ffd2 <printk>
   1b38c:	482f      	ldr	r0, [pc, #188]	; (1b44c <k_work_cancel_delayable_sync+0x110>)
   1b38e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1b392:	f005 f878 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1b396:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b39a:	f3ef 8811 	mrs	r8, BASEPRI
   1b39e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b3a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b3a6:	482c      	ldr	r0, [pc, #176]	; (1b458 <k_work_cancel_delayable_sync+0x11c>)
   1b3a8:	f7fe feea 	bl	1a180 <z_spin_lock_valid>
   1b3ac:	b968      	cbnz	r0, 1b3ca <k_work_cancel_delayable_sync+0x8e>
   1b3ae:	4a2b      	ldr	r2, [pc, #172]	; (1b45c <k_work_cancel_delayable_sync+0x120>)
   1b3b0:	492b      	ldr	r1, [pc, #172]	; (1b460 <k_work_cancel_delayable_sync+0x124>)
   1b3b2:	4825      	ldr	r0, [pc, #148]	; (1b448 <k_work_cancel_delayable_sync+0x10c>)
   1b3b4:	2381      	movs	r3, #129	; 0x81
   1b3b6:	f004 fe0c 	bl	1ffd2 <printk>
   1b3ba:	4927      	ldr	r1, [pc, #156]	; (1b458 <k_work_cancel_delayable_sync+0x11c>)
   1b3bc:	4829      	ldr	r0, [pc, #164]	; (1b464 <k_work_cancel_delayable_sync+0x128>)
   1b3be:	f004 fe08 	bl	1ffd2 <printk>
   1b3c2:	4826      	ldr	r0, [pc, #152]	; (1b45c <k_work_cancel_delayable_sync+0x120>)
   1b3c4:	2181      	movs	r1, #129	; 0x81
   1b3c6:	f005 f85e 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b3ca:	4823      	ldr	r0, [pc, #140]	; (1b458 <k_work_cancel_delayable_sync+0x11c>)
   1b3cc:	f7fe fef6 	bl	1a1bc <z_spin_lock_set_owner>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b3d0:	f3bf 8f5b 	dmb	ish
   1b3d4:	68ec      	ldr	r4, [r5, #12]
   1b3d6:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   1b3da:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1b3de:	2c00      	cmp	r4, #0
   1b3e0:	bf14      	ite	ne
   1b3e2:	2701      	movne	r7, #1
   1b3e4:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   1b3e6:	d00a      	beq.n	1b3fe <k_work_cancel_delayable_sync+0xc2>
	(void)unschedule_locked(dwork);
   1b3e8:	4628      	mov	r0, r5
   1b3ea:	f007 fb31 	bl	22a50 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1b3ee:	4628      	mov	r0, r5
   1b3f0:	f007 fb3c 	bl	22a6c <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1b3f4:	4631      	mov	r1, r6
   1b3f6:	4628      	mov	r0, r5
   1b3f8:	f7ff fc3c 	bl	1ac74 <cancel_sync_locked>
   1b3fc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b3fe:	4816      	ldr	r0, [pc, #88]	; (1b458 <k_work_cancel_delayable_sync+0x11c>)
   1b400:	f7fe fecc 	bl	1a19c <z_spin_unlock_valid>
   1b404:	b968      	cbnz	r0, 1b422 <k_work_cancel_delayable_sync+0xe6>
   1b406:	4a15      	ldr	r2, [pc, #84]	; (1b45c <k_work_cancel_delayable_sync+0x120>)
   1b408:	4917      	ldr	r1, [pc, #92]	; (1b468 <k_work_cancel_delayable_sync+0x12c>)
   1b40a:	480f      	ldr	r0, [pc, #60]	; (1b448 <k_work_cancel_delayable_sync+0x10c>)
   1b40c:	23ac      	movs	r3, #172	; 0xac
   1b40e:	f004 fde0 	bl	1ffd2 <printk>
   1b412:	4911      	ldr	r1, [pc, #68]	; (1b458 <k_work_cancel_delayable_sync+0x11c>)
   1b414:	4815      	ldr	r0, [pc, #84]	; (1b46c <k_work_cancel_delayable_sync+0x130>)
   1b416:	f004 fddc 	bl	1ffd2 <printk>
   1b41a:	4810      	ldr	r0, [pc, #64]	; (1b45c <k_work_cancel_delayable_sync+0x120>)
   1b41c:	21ac      	movs	r1, #172	; 0xac
   1b41e:	f005 f832 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1b422:	f388 8811 	msr	BASEPRI, r8
   1b426:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1b42a:	b13c      	cbz	r4, 1b43c <k_work_cancel_delayable_sync+0x100>
	return z_impl_k_sem_take(sem, timeout);
   1b42c:	f04f 32ff 	mov.w	r2, #4294967295
   1b430:	f04f 33ff 	mov.w	r3, #4294967295
   1b434:	f106 0008 	add.w	r0, r6, #8
   1b438:	f7ff fa64 	bl	1a904 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1b43c:	4638      	mov	r0, r7
   1b43e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b442:	bf00      	nop
   1b444:	0002514a 	.word	0x0002514a
   1b448:	000237c9 	.word	0x000237c9
   1b44c:	00025074 	.word	0x00025074
   1b450:	000250f6 	.word	0x000250f6
   1b454:	0002446f 	.word	0x0002446f
   1b458:	20002474 	.word	0x20002474
   1b45c:	00023889 	.word	0x00023889
   1b460:	000238db 	.word	0x000238db
   1b464:	000238f0 	.word	0x000238f0
   1b468:	000238af 	.word	0x000238af
   1b46c:	000238c6 	.word	0x000238c6

0001b470 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1b470:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1b472:	4c08      	ldr	r4, [pc, #32]	; (1b494 <z_reset_time_slice+0x24>)
   1b474:	6823      	ldr	r3, [r4, #0]
   1b476:	b15b      	cbz	r3, 1b490 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1b478:	f7fd fa34 	bl	188e4 <sys_clock_elapsed>
   1b47c:	4603      	mov	r3, r0
   1b47e:	6820      	ldr	r0, [r4, #0]
   1b480:	4a05      	ldr	r2, [pc, #20]	; (1b498 <z_reset_time_slice+0x28>)
   1b482:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1b484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1b488:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1b48a:	2100      	movs	r1, #0
   1b48c:	f001 bb5e 	b.w	1cb4c <z_set_timeout_expiry>
}
   1b490:	bd10      	pop	{r4, pc}
   1b492:	bf00      	nop
   1b494:	2000248c 	.word	0x2000248c
   1b498:	20002444 	.word	0x20002444

0001b49c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1b49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b49e:	4604      	mov	r4, r0
   1b4a0:	460d      	mov	r5, r1
	__asm__ volatile(
   1b4a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b4a6:	f3ef 8611 	mrs	r6, BASEPRI
   1b4aa:	f383 8812 	msr	BASEPRI_MAX, r3
   1b4ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b4b2:	4823      	ldr	r0, [pc, #140]	; (1b540 <k_sched_time_slice_set+0xa4>)
   1b4b4:	f7fe fe64 	bl	1a180 <z_spin_lock_valid>
   1b4b8:	b968      	cbnz	r0, 1b4d6 <k_sched_time_slice_set+0x3a>
   1b4ba:	4a22      	ldr	r2, [pc, #136]	; (1b544 <k_sched_time_slice_set+0xa8>)
   1b4bc:	4922      	ldr	r1, [pc, #136]	; (1b548 <k_sched_time_slice_set+0xac>)
   1b4be:	4823      	ldr	r0, [pc, #140]	; (1b54c <k_sched_time_slice_set+0xb0>)
   1b4c0:	2381      	movs	r3, #129	; 0x81
   1b4c2:	f004 fd86 	bl	1ffd2 <printk>
   1b4c6:	491e      	ldr	r1, [pc, #120]	; (1b540 <k_sched_time_slice_set+0xa4>)
   1b4c8:	4821      	ldr	r0, [pc, #132]	; (1b550 <k_sched_time_slice_set+0xb4>)
   1b4ca:	f004 fd82 	bl	1ffd2 <printk>
   1b4ce:	481d      	ldr	r0, [pc, #116]	; (1b544 <k_sched_time_slice_set+0xa8>)
   1b4d0:	2181      	movs	r1, #129	; 0x81
   1b4d2:	f004 ffd8 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b4d6:	481a      	ldr	r0, [pc, #104]	; (1b540 <k_sched_time_slice_set+0xa4>)
   1b4d8:	f7fe fe70 	bl	1a1bc <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b4dc:	4b1d      	ldr	r3, [pc, #116]	; (1b554 <k_sched_time_slice_set+0xb8>)
   1b4de:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b4e0:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1b4e4:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b4e8:	2100      	movs	r1, #0
   1b4ea:	611a      	str	r2, [r3, #16]
   1b4ec:	fbe7 0104 	umlal	r0, r1, r7, r4
   1b4f0:	2300      	movs	r3, #0
   1b4f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b4f6:	f7e5 fe03 	bl	1100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1b4fa:	2c00      	cmp	r4, #0
   1b4fc:	4b16      	ldr	r3, [pc, #88]	; (1b558 <k_sched_time_slice_set+0xbc>)
   1b4fe:	dc1b      	bgt.n	1b538 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1b500:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1b502:	4b16      	ldr	r3, [pc, #88]	; (1b55c <k_sched_time_slice_set+0xc0>)
   1b504:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1b506:	f7ff ffb3 	bl	1b470 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b50a:	480d      	ldr	r0, [pc, #52]	; (1b540 <k_sched_time_slice_set+0xa4>)
   1b50c:	f7fe fe46 	bl	1a19c <z_spin_unlock_valid>
   1b510:	b968      	cbnz	r0, 1b52e <k_sched_time_slice_set+0x92>
   1b512:	4a0c      	ldr	r2, [pc, #48]	; (1b544 <k_sched_time_slice_set+0xa8>)
   1b514:	4912      	ldr	r1, [pc, #72]	; (1b560 <k_sched_time_slice_set+0xc4>)
   1b516:	480d      	ldr	r0, [pc, #52]	; (1b54c <k_sched_time_slice_set+0xb0>)
   1b518:	23ac      	movs	r3, #172	; 0xac
   1b51a:	f004 fd5a 	bl	1ffd2 <printk>
   1b51e:	4908      	ldr	r1, [pc, #32]	; (1b540 <k_sched_time_slice_set+0xa4>)
   1b520:	4810      	ldr	r0, [pc, #64]	; (1b564 <k_sched_time_slice_set+0xc8>)
   1b522:	f004 fd56 	bl	1ffd2 <printk>
   1b526:	4807      	ldr	r0, [pc, #28]	; (1b544 <k_sched_time_slice_set+0xa8>)
   1b528:	21ac      	movs	r1, #172	; 0xac
   1b52a:	f004 ffac 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1b52e:	f386 8811 	msr	BASEPRI, r6
   1b532:	f3bf 8f6f 	isb	sy
	}
}
   1b536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1b538:	2802      	cmp	r0, #2
   1b53a:	bfb8      	it	lt
   1b53c:	2002      	movlt	r0, #2
   1b53e:	e7df      	b.n	1b500 <k_sched_time_slice_set+0x64>
   1b540:	20002484 	.word	0x20002484
   1b544:	00023889 	.word	0x00023889
   1b548:	000238db 	.word	0x000238db
   1b54c:	000237c9 	.word	0x000237c9
   1b550:	000238f0 	.word	0x000238f0
   1b554:	20002444 	.word	0x20002444
   1b558:	2000248c 	.word	0x2000248c
   1b55c:	20002488 	.word	0x20002488
   1b560:	000238af 	.word	0x000238af
   1b564:	000238c6 	.word	0x000238c6

0001b568 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1b568:	b538      	push	{r3, r4, r5, lr}
   1b56a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1b56c:	460d      	mov	r5, r1
   1b56e:	b9e9      	cbnz	r1, 1b5ac <z_reschedule+0x44>
   1b570:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
   1b574:	b9d3      	cbnz	r3, 1b5ac <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   1b576:	4b19      	ldr	r3, [pc, #100]	; (1b5dc <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   1b578:	69da      	ldr	r2, [r3, #28]
   1b57a:	689b      	ldr	r3, [r3, #8]
   1b57c:	429a      	cmp	r2, r3
   1b57e:	d015      	beq.n	1b5ac <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b580:	f7fe fe0c 	bl	1a19c <z_spin_unlock_valid>
   1b584:	b968      	cbnz	r0, 1b5a2 <z_reschedule+0x3a>
   1b586:	4a16      	ldr	r2, [pc, #88]	; (1b5e0 <z_reschedule+0x78>)
   1b588:	4916      	ldr	r1, [pc, #88]	; (1b5e4 <z_reschedule+0x7c>)
   1b58a:	4817      	ldr	r0, [pc, #92]	; (1b5e8 <z_reschedule+0x80>)
   1b58c:	23c3      	movs	r3, #195	; 0xc3
   1b58e:	f004 fd20 	bl	1ffd2 <printk>
   1b592:	4816      	ldr	r0, [pc, #88]	; (1b5ec <z_reschedule+0x84>)
   1b594:	4621      	mov	r1, r4
   1b596:	f004 fd1c 	bl	1ffd2 <printk>
   1b59a:	4811      	ldr	r0, [pc, #68]	; (1b5e0 <z_reschedule+0x78>)
   1b59c:	21c3      	movs	r1, #195	; 0xc3
   1b59e:	f004 ff72 	bl	20486 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1b5a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   1b5a6:	2000      	movs	r0, #0
   1b5a8:	f7f7 b8c0 	b.w	1272c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b5ac:	4620      	mov	r0, r4
   1b5ae:	f7fe fdf5 	bl	1a19c <z_spin_unlock_valid>
   1b5b2:	b968      	cbnz	r0, 1b5d0 <z_reschedule+0x68>
   1b5b4:	4a0a      	ldr	r2, [pc, #40]	; (1b5e0 <z_reschedule+0x78>)
   1b5b6:	490b      	ldr	r1, [pc, #44]	; (1b5e4 <z_reschedule+0x7c>)
   1b5b8:	480b      	ldr	r0, [pc, #44]	; (1b5e8 <z_reschedule+0x80>)
   1b5ba:	23ac      	movs	r3, #172	; 0xac
   1b5bc:	f004 fd09 	bl	1ffd2 <printk>
   1b5c0:	480a      	ldr	r0, [pc, #40]	; (1b5ec <z_reschedule+0x84>)
   1b5c2:	4621      	mov	r1, r4
   1b5c4:	f004 fd05 	bl	1ffd2 <printk>
   1b5c8:	4805      	ldr	r0, [pc, #20]	; (1b5e0 <z_reschedule+0x78>)
   1b5ca:	21ac      	movs	r1, #172	; 0xac
   1b5cc:	f004 ff5b 	bl	20486 <assert_post_action>
   1b5d0:	f385 8811 	msr	BASEPRI, r5
   1b5d4:	f3bf 8f6f 	isb	sy
   1b5d8:	bd38      	pop	{r3, r4, r5, pc}
   1b5da:	bf00      	nop
   1b5dc:	20002444 	.word	0x20002444
   1b5e0:	00023889 	.word	0x00023889
   1b5e4:	000238af 	.word	0x000238af
   1b5e8:	000237c9 	.word	0x000237c9
   1b5ec:	000238c6 	.word	0x000238c6

0001b5f0 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   1b5f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1b5f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b5f6:	f3ef 8511 	mrs	r5, BASEPRI
   1b5fa:	f383 8812 	msr	BASEPRI_MAX, r3
   1b5fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b602:	4829      	ldr	r0, [pc, #164]	; (1b6a8 <k_sched_lock+0xb8>)
   1b604:	f7fe fdbc 	bl	1a180 <z_spin_lock_valid>
   1b608:	b968      	cbnz	r0, 1b626 <k_sched_lock+0x36>
   1b60a:	4a28      	ldr	r2, [pc, #160]	; (1b6ac <k_sched_lock+0xbc>)
   1b60c:	4928      	ldr	r1, [pc, #160]	; (1b6b0 <k_sched_lock+0xc0>)
   1b60e:	4829      	ldr	r0, [pc, #164]	; (1b6b4 <k_sched_lock+0xc4>)
   1b610:	2381      	movs	r3, #129	; 0x81
   1b612:	f004 fcde 	bl	1ffd2 <printk>
   1b616:	4924      	ldr	r1, [pc, #144]	; (1b6a8 <k_sched_lock+0xb8>)
   1b618:	4827      	ldr	r0, [pc, #156]	; (1b6b8 <k_sched_lock+0xc8>)
   1b61a:	f004 fcda 	bl	1ffd2 <printk>
   1b61e:	4823      	ldr	r0, [pc, #140]	; (1b6ac <k_sched_lock+0xbc>)
   1b620:	2181      	movs	r1, #129	; 0x81
   1b622:	f004 ff30 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b626:	4820      	ldr	r0, [pc, #128]	; (1b6a8 <k_sched_lock+0xb8>)
   1b628:	f7fe fdc8 	bl	1a1bc <z_spin_lock_set_owner>
   1b62c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1b630:	b163      	cbz	r3, 1b64c <k_sched_lock+0x5c>
   1b632:	4922      	ldr	r1, [pc, #136]	; (1b6bc <k_sched_lock+0xcc>)
   1b634:	4a22      	ldr	r2, [pc, #136]	; (1b6c0 <k_sched_lock+0xd0>)
   1b636:	481f      	ldr	r0, [pc, #124]	; (1b6b4 <k_sched_lock+0xc4>)
   1b638:	23fd      	movs	r3, #253	; 0xfd
   1b63a:	f004 fcca 	bl	1ffd2 <printk>
   1b63e:	4821      	ldr	r0, [pc, #132]	; (1b6c4 <k_sched_lock+0xd4>)
   1b640:	f004 fcc7 	bl	1ffd2 <printk>
   1b644:	481e      	ldr	r0, [pc, #120]	; (1b6c0 <k_sched_lock+0xd0>)
   1b646:	21fd      	movs	r1, #253	; 0xfd
   1b648:	f004 ff1d 	bl	20486 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   1b64c:	4c1e      	ldr	r4, [pc, #120]	; (1b6c8 <k_sched_lock+0xd8>)
   1b64e:	68a2      	ldr	r2, [r4, #8]
   1b650:	7bd2      	ldrb	r2, [r2, #15]
   1b652:	2a01      	cmp	r2, #1
   1b654:	d10c      	bne.n	1b670 <k_sched_lock+0x80>
   1b656:	491d      	ldr	r1, [pc, #116]	; (1b6cc <k_sched_lock+0xdc>)
   1b658:	4a19      	ldr	r2, [pc, #100]	; (1b6c0 <k_sched_lock+0xd0>)
   1b65a:	4816      	ldr	r0, [pc, #88]	; (1b6b4 <k_sched_lock+0xc4>)
   1b65c:	23fe      	movs	r3, #254	; 0xfe
   1b65e:	f004 fcb8 	bl	1ffd2 <printk>
   1b662:	4818      	ldr	r0, [pc, #96]	; (1b6c4 <k_sched_lock+0xd4>)
   1b664:	f004 fcb5 	bl	1ffd2 <printk>
   1b668:	4815      	ldr	r0, [pc, #84]	; (1b6c0 <k_sched_lock+0xd0>)
   1b66a:	21fe      	movs	r1, #254	; 0xfe
   1b66c:	f004 ff0b 	bl	20486 <assert_post_action>
	--_current->base.sched_locked;
   1b670:	68a2      	ldr	r2, [r4, #8]
   1b672:	7bd3      	ldrb	r3, [r2, #15]
   1b674:	3b01      	subs	r3, #1
   1b676:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b678:	480b      	ldr	r0, [pc, #44]	; (1b6a8 <k_sched_lock+0xb8>)
   1b67a:	f7fe fd8f 	bl	1a19c <z_spin_unlock_valid>
   1b67e:	b968      	cbnz	r0, 1b69c <k_sched_lock+0xac>
   1b680:	4a0a      	ldr	r2, [pc, #40]	; (1b6ac <k_sched_lock+0xbc>)
   1b682:	4913      	ldr	r1, [pc, #76]	; (1b6d0 <k_sched_lock+0xe0>)
   1b684:	480b      	ldr	r0, [pc, #44]	; (1b6b4 <k_sched_lock+0xc4>)
   1b686:	23ac      	movs	r3, #172	; 0xac
   1b688:	f004 fca3 	bl	1ffd2 <printk>
   1b68c:	4906      	ldr	r1, [pc, #24]	; (1b6a8 <k_sched_lock+0xb8>)
   1b68e:	4811      	ldr	r0, [pc, #68]	; (1b6d4 <k_sched_lock+0xe4>)
   1b690:	f004 fc9f 	bl	1ffd2 <printk>
   1b694:	4805      	ldr	r0, [pc, #20]	; (1b6ac <k_sched_lock+0xbc>)
   1b696:	21ac      	movs	r1, #172	; 0xac
   1b698:	f004 fef5 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1b69c:	f385 8811 	msr	BASEPRI, r5
   1b6a0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1b6a4:	bd38      	pop	{r3, r4, r5, pc}
   1b6a6:	bf00      	nop
   1b6a8:	20002484 	.word	0x20002484
   1b6ac:	00023889 	.word	0x00023889
   1b6b0:	000238db 	.word	0x000238db
   1b6b4:	000237c9 	.word	0x000237c9
   1b6b8:	000238f0 	.word	0x000238f0
   1b6bc:	00024e97 	.word	0x00024e97
   1b6c0:	00024fa2 	.word	0x00024fa2
   1b6c4:	000246b6 	.word	0x000246b6
   1b6c8:	20002444 	.word	0x20002444
   1b6cc:	00024fcd 	.word	0x00024fcd
   1b6d0:	000238af 	.word	0x000238af
   1b6d4:	000238c6 	.word	0x000238c6

0001b6d8 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b6d8:	4b0c      	ldr	r3, [pc, #48]	; (1b70c <z_priq_dumb_remove+0x34>)
   1b6da:	4299      	cmp	r1, r3
{
   1b6dc:	b510      	push	{r4, lr}
   1b6de:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b6e0:	d10b      	bne.n	1b6fa <z_priq_dumb_remove+0x22>
   1b6e2:	490b      	ldr	r1, [pc, #44]	; (1b710 <z_priq_dumb_remove+0x38>)
   1b6e4:	480b      	ldr	r0, [pc, #44]	; (1b714 <z_priq_dumb_remove+0x3c>)
   1b6e6:	4a0c      	ldr	r2, [pc, #48]	; (1b718 <z_priq_dumb_remove+0x40>)
   1b6e8:	f240 33b5 	movw	r3, #949	; 0x3b5
   1b6ec:	f004 fc71 	bl	1ffd2 <printk>
   1b6f0:	4809      	ldr	r0, [pc, #36]	; (1b718 <z_priq_dumb_remove+0x40>)
   1b6f2:	f240 31b5 	movw	r1, #949	; 0x3b5
   1b6f6:	f004 fec6 	bl	20486 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   1b6fa:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   1b6fe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1b700:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b702:	2300      	movs	r3, #0
	node->prev = NULL;
   1b704:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1b708:	bd10      	pop	{r4, pc}
   1b70a:	bf00      	nop
   1b70c:	20001ad8 	.word	0x20001ad8
   1b710:	00025181 	.word	0x00025181
   1b714:	000237c9 	.word	0x000237c9
   1b718:	0002515f 	.word	0x0002515f

0001b71c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   1b71c:	6883      	ldr	r3, [r0, #8]
{
   1b71e:	b510      	push	{r4, lr}
   1b720:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   1b722:	b95b      	cbnz	r3, 1b73c <unpend_thread_no_timeout+0x20>
   1b724:	490b      	ldr	r1, [pc, #44]	; (1b754 <unpend_thread_no_timeout+0x38>)
   1b726:	480c      	ldr	r0, [pc, #48]	; (1b758 <unpend_thread_no_timeout+0x3c>)
   1b728:	4a0c      	ldr	r2, [pc, #48]	; (1b75c <unpend_thread_no_timeout+0x40>)
   1b72a:	f240 2353 	movw	r3, #595	; 0x253
   1b72e:	f004 fc50 	bl	1ffd2 <printk>
   1b732:	480a      	ldr	r0, [pc, #40]	; (1b75c <unpend_thread_no_timeout+0x40>)
   1b734:	f240 2153 	movw	r1, #595	; 0x253
   1b738:	f004 fea5 	bl	20486 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1b73c:	68a0      	ldr	r0, [r4, #8]
   1b73e:	4621      	mov	r1, r4
   1b740:	f7ff ffca 	bl	1b6d8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1b744:	7b63      	ldrb	r3, [r4, #13]
   1b746:	f023 0302 	bic.w	r3, r3, #2
   1b74a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1b74c:	2300      	movs	r3, #0
   1b74e:	60a3      	str	r3, [r4, #8]
}
   1b750:	bd10      	pop	{r4, pc}
   1b752:	bf00      	nop
   1b754:	000251a2 	.word	0x000251a2
   1b758:	000237c9 	.word	0x000237c9
   1b75c:	0002515f 	.word	0x0002515f

0001b760 <z_unpend_thread>:
{
   1b760:	b538      	push	{r3, r4, r5, lr}
   1b762:	4604      	mov	r4, r0
	__asm__ volatile(
   1b764:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b768:	f3ef 8511 	mrs	r5, BASEPRI
   1b76c:	f383 8812 	msr	BASEPRI_MAX, r3
   1b770:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b774:	4819      	ldr	r0, [pc, #100]	; (1b7dc <z_unpend_thread+0x7c>)
   1b776:	f7fe fd03 	bl	1a180 <z_spin_lock_valid>
   1b77a:	b968      	cbnz	r0, 1b798 <z_unpend_thread+0x38>
   1b77c:	4a18      	ldr	r2, [pc, #96]	; (1b7e0 <z_unpend_thread+0x80>)
   1b77e:	4919      	ldr	r1, [pc, #100]	; (1b7e4 <z_unpend_thread+0x84>)
   1b780:	4819      	ldr	r0, [pc, #100]	; (1b7e8 <z_unpend_thread+0x88>)
   1b782:	2381      	movs	r3, #129	; 0x81
   1b784:	f004 fc25 	bl	1ffd2 <printk>
   1b788:	4914      	ldr	r1, [pc, #80]	; (1b7dc <z_unpend_thread+0x7c>)
   1b78a:	4818      	ldr	r0, [pc, #96]	; (1b7ec <z_unpend_thread+0x8c>)
   1b78c:	f004 fc21 	bl	1ffd2 <printk>
   1b790:	4813      	ldr	r0, [pc, #76]	; (1b7e0 <z_unpend_thread+0x80>)
   1b792:	2181      	movs	r1, #129	; 0x81
   1b794:	f004 fe77 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b798:	4810      	ldr	r0, [pc, #64]	; (1b7dc <z_unpend_thread+0x7c>)
   1b79a:	f7fe fd0f 	bl	1a1bc <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1b79e:	4620      	mov	r0, r4
   1b7a0:	f7ff ffbc 	bl	1b71c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b7a4:	480d      	ldr	r0, [pc, #52]	; (1b7dc <z_unpend_thread+0x7c>)
   1b7a6:	f7fe fcf9 	bl	1a19c <z_spin_unlock_valid>
   1b7aa:	b968      	cbnz	r0, 1b7c8 <z_unpend_thread+0x68>
   1b7ac:	4a0c      	ldr	r2, [pc, #48]	; (1b7e0 <z_unpend_thread+0x80>)
   1b7ae:	4910      	ldr	r1, [pc, #64]	; (1b7f0 <z_unpend_thread+0x90>)
   1b7b0:	480d      	ldr	r0, [pc, #52]	; (1b7e8 <z_unpend_thread+0x88>)
   1b7b2:	23ac      	movs	r3, #172	; 0xac
   1b7b4:	f004 fc0d 	bl	1ffd2 <printk>
   1b7b8:	4908      	ldr	r1, [pc, #32]	; (1b7dc <z_unpend_thread+0x7c>)
   1b7ba:	480e      	ldr	r0, [pc, #56]	; (1b7f4 <z_unpend_thread+0x94>)
   1b7bc:	f004 fc09 	bl	1ffd2 <printk>
   1b7c0:	4807      	ldr	r0, [pc, #28]	; (1b7e0 <z_unpend_thread+0x80>)
   1b7c2:	21ac      	movs	r1, #172	; 0xac
   1b7c4:	f004 fe5f 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1b7c8:	f385 8811 	msr	BASEPRI, r5
   1b7cc:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1b7d0:	f104 0018 	add.w	r0, r4, #24
}
   1b7d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b7d8:	f001 b922 	b.w	1ca20 <z_abort_timeout>
   1b7dc:	20002484 	.word	0x20002484
   1b7e0:	00023889 	.word	0x00023889
   1b7e4:	000238db 	.word	0x000238db
   1b7e8:	000237c9 	.word	0x000237c9
   1b7ec:	000238f0 	.word	0x000238f0
   1b7f0:	000238af 	.word	0x000238af
   1b7f4:	000238c6 	.word	0x000238c6

0001b7f8 <update_cache>:
{
   1b7f8:	b538      	push	{r3, r4, r5, lr}
   1b7fa:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1b7fc:	4814      	ldr	r0, [pc, #80]	; (1b850 <update_cache+0x58>)
   1b7fe:	4d15      	ldr	r5, [pc, #84]	; (1b854 <update_cache+0x5c>)
   1b800:	f007 f986 	bl	22b10 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1b804:	4604      	mov	r4, r0
   1b806:	b900      	cbnz	r0, 1b80a <update_cache+0x12>
   1b808:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   1b80a:	b9ca      	cbnz	r2, 1b840 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   1b80c:	68ab      	ldr	r3, [r5, #8]
   1b80e:	b963      	cbnz	r3, 1b82a <update_cache+0x32>
   1b810:	4911      	ldr	r1, [pc, #68]	; (1b858 <update_cache+0x60>)
   1b812:	4a12      	ldr	r2, [pc, #72]	; (1b85c <update_cache+0x64>)
   1b814:	4812      	ldr	r0, [pc, #72]	; (1b860 <update_cache+0x68>)
   1b816:	2381      	movs	r3, #129	; 0x81
   1b818:	f004 fbdb 	bl	1ffd2 <printk>
   1b81c:	4811      	ldr	r0, [pc, #68]	; (1b864 <update_cache+0x6c>)
   1b81e:	f004 fbd8 	bl	1ffd2 <printk>
   1b822:	480e      	ldr	r0, [pc, #56]	; (1b85c <update_cache+0x64>)
   1b824:	2181      	movs	r1, #129	; 0x81
   1b826:	f004 fe2e 	bl	20486 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1b82a:	68ab      	ldr	r3, [r5, #8]
   1b82c:	7b5a      	ldrb	r2, [r3, #13]
   1b82e:	06d2      	lsls	r2, r2, #27
   1b830:	d106      	bne.n	1b840 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b832:	69a2      	ldr	r2, [r4, #24]
   1b834:	b922      	cbnz	r2, 1b840 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
   1b836:	89da      	ldrh	r2, [r3, #14]
   1b838:	2a7f      	cmp	r2, #127	; 0x7f
   1b83a:	d901      	bls.n	1b840 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
   1b83c:	61eb      	str	r3, [r5, #28]
}
   1b83e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1b840:	68ab      	ldr	r3, [r5, #8]
   1b842:	42a3      	cmp	r3, r4
   1b844:	d001      	beq.n	1b84a <update_cache+0x52>
			z_reset_time_slice();
   1b846:	f7ff fe13 	bl	1b470 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1b84a:	61ec      	str	r4, [r5, #28]
}
   1b84c:	e7f7      	b.n	1b83e <update_cache+0x46>
   1b84e:	bf00      	nop
   1b850:	20002464 	.word	0x20002464
   1b854:	20002444 	.word	0x20002444
   1b858:	000251b9 	.word	0x000251b9
   1b85c:	0002515f 	.word	0x0002515f
   1b860:	000237c9 	.word	0x000237c9
   1b864:	000246b6 	.word	0x000246b6

0001b868 <move_thread_to_end_of_prio_q>:
{
   1b868:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1b86a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1b86e:	7b43      	ldrb	r3, [r0, #13]
   1b870:	2a00      	cmp	r2, #0
{
   1b872:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1b874:	da06      	bge.n	1b884 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b87a:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   1b87c:	4601      	mov	r1, r0
   1b87e:	481f      	ldr	r0, [pc, #124]	; (1b8fc <move_thread_to_end_of_prio_q+0x94>)
   1b880:	f7ff ff2a 	bl	1b6d8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b884:	7b63      	ldrb	r3, [r4, #13]
   1b886:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b88a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b88c:	4b1c      	ldr	r3, [pc, #112]	; (1b900 <move_thread_to_end_of_prio_q+0x98>)
   1b88e:	429c      	cmp	r4, r3
   1b890:	d109      	bne.n	1b8a6 <move_thread_to_end_of_prio_q+0x3e>
   1b892:	491c      	ldr	r1, [pc, #112]	; (1b904 <move_thread_to_end_of_prio_q+0x9c>)
   1b894:	481c      	ldr	r0, [pc, #112]	; (1b908 <move_thread_to_end_of_prio_q+0xa0>)
   1b896:	4a1d      	ldr	r2, [pc, #116]	; (1b90c <move_thread_to_end_of_prio_q+0xa4>)
   1b898:	23b1      	movs	r3, #177	; 0xb1
   1b89a:	f004 fb9a 	bl	1ffd2 <printk>
   1b89e:	481b      	ldr	r0, [pc, #108]	; (1b90c <move_thread_to_end_of_prio_q+0xa4>)
   1b8a0:	21b1      	movs	r1, #177	; 0xb1
   1b8a2:	f004 fdf0 	bl	20486 <assert_post_action>
	return list->head == list;
   1b8a6:	4a1a      	ldr	r2, [pc, #104]	; (1b910 <move_thread_to_end_of_prio_q+0xa8>)
   1b8a8:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b8aa:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
   1b8ac:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b8b0:	428b      	cmp	r3, r1
   1b8b2:	bf08      	it	eq
   1b8b4:	2300      	moveq	r3, #0
   1b8b6:	2b00      	cmp	r3, #0
   1b8b8:	bf38      	it	cc
   1b8ba:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b8bc:	b1cb      	cbz	r3, 1b8f2 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
   1b8be:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1b8c2:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1b8c6:	4286      	cmp	r6, r0
   1b8c8:	d00f      	beq.n	1b8ea <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
   1b8ca:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b8cc:	2800      	cmp	r0, #0
   1b8ce:	dd0c      	ble.n	1b8ea <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   1b8d0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1b8d2:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1b8d6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1b8d8:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   1b8da:	6890      	ldr	r0, [r2, #8]
   1b8dc:	1b03      	subs	r3, r0, r4
   1b8de:	4258      	negs	r0, r3
}
   1b8e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1b8e4:	4158      	adcs	r0, r3
   1b8e6:	f7ff bf87 	b.w	1b7f8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1b8ea:	42ab      	cmp	r3, r5
   1b8ec:	d001      	beq.n	1b8f2 <move_thread_to_end_of_prio_q+0x8a>
   1b8ee:	681b      	ldr	r3, [r3, #0]
   1b8f0:	e7e4      	b.n	1b8bc <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
   1b8f2:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   1b8f6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1b8f8:	6254      	str	r4, [r2, #36]	; 0x24
}
   1b8fa:	e7ee      	b.n	1b8da <move_thread_to_end_of_prio_q+0x72>
   1b8fc:	20002464 	.word	0x20002464
   1b900:	20001ad8 	.word	0x20001ad8
   1b904:	00025181 	.word	0x00025181
   1b908:	000237c9 	.word	0x000237c9
   1b90c:	0002515f 	.word	0x0002515f
   1b910:	20002444 	.word	0x20002444

0001b914 <z_time_slice>:
{
   1b914:	b570      	push	{r4, r5, r6, lr}
   1b916:	4604      	mov	r4, r0
	__asm__ volatile(
   1b918:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b91c:	f3ef 8511 	mrs	r5, BASEPRI
   1b920:	f383 8812 	msr	BASEPRI_MAX, r3
   1b924:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b928:	482a      	ldr	r0, [pc, #168]	; (1b9d4 <z_time_slice+0xc0>)
   1b92a:	f7fe fc29 	bl	1a180 <z_spin_lock_valid>
   1b92e:	b968      	cbnz	r0, 1b94c <z_time_slice+0x38>
   1b930:	4a29      	ldr	r2, [pc, #164]	; (1b9d8 <z_time_slice+0xc4>)
   1b932:	492a      	ldr	r1, [pc, #168]	; (1b9dc <z_time_slice+0xc8>)
   1b934:	482a      	ldr	r0, [pc, #168]	; (1b9e0 <z_time_slice+0xcc>)
   1b936:	2381      	movs	r3, #129	; 0x81
   1b938:	f004 fb4b 	bl	1ffd2 <printk>
   1b93c:	4925      	ldr	r1, [pc, #148]	; (1b9d4 <z_time_slice+0xc0>)
   1b93e:	4829      	ldr	r0, [pc, #164]	; (1b9e4 <z_time_slice+0xd0>)
   1b940:	f004 fb47 	bl	1ffd2 <printk>
   1b944:	4824      	ldr	r0, [pc, #144]	; (1b9d8 <z_time_slice+0xc4>)
   1b946:	2181      	movs	r1, #129	; 0x81
   1b948:	f004 fd9d 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b94c:	4821      	ldr	r0, [pc, #132]	; (1b9d4 <z_time_slice+0xc0>)
   1b94e:	f7fe fc35 	bl	1a1bc <z_spin_lock_set_owner>
	if (pending_current == _current) {
   1b952:	4b25      	ldr	r3, [pc, #148]	; (1b9e8 <z_time_slice+0xd4>)
   1b954:	4a25      	ldr	r2, [pc, #148]	; (1b9ec <z_time_slice+0xd8>)
   1b956:	6898      	ldr	r0, [r3, #8]
   1b958:	6811      	ldr	r1, [r2, #0]
   1b95a:	4288      	cmp	r0, r1
   1b95c:	4619      	mov	r1, r3
   1b95e:	d118      	bne.n	1b992 <z_time_slice+0x7e>
			z_reset_time_slice();
   1b960:	f7ff fd86 	bl	1b470 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b964:	481b      	ldr	r0, [pc, #108]	; (1b9d4 <z_time_slice+0xc0>)
   1b966:	f7fe fc19 	bl	1a19c <z_spin_unlock_valid>
   1b96a:	b968      	cbnz	r0, 1b988 <z_time_slice+0x74>
   1b96c:	4a1a      	ldr	r2, [pc, #104]	; (1b9d8 <z_time_slice+0xc4>)
   1b96e:	4920      	ldr	r1, [pc, #128]	; (1b9f0 <z_time_slice+0xdc>)
   1b970:	481b      	ldr	r0, [pc, #108]	; (1b9e0 <z_time_slice+0xcc>)
   1b972:	23ac      	movs	r3, #172	; 0xac
   1b974:	f004 fb2d 	bl	1ffd2 <printk>
   1b978:	4916      	ldr	r1, [pc, #88]	; (1b9d4 <z_time_slice+0xc0>)
   1b97a:	481e      	ldr	r0, [pc, #120]	; (1b9f4 <z_time_slice+0xe0>)
   1b97c:	f004 fb29 	bl	1ffd2 <printk>
   1b980:	4815      	ldr	r0, [pc, #84]	; (1b9d8 <z_time_slice+0xc4>)
   1b982:	21ac      	movs	r1, #172	; 0xac
   1b984:	f004 fd7f 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1b988:	f385 8811 	msr	BASEPRI, r5
   1b98c:	f3bf 8f6f 	isb	sy
}
   1b990:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1b992:	2600      	movs	r6, #0
   1b994:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1b996:	4a18      	ldr	r2, [pc, #96]	; (1b9f8 <z_time_slice+0xe4>)
   1b998:	6812      	ldr	r2, [r2, #0]
   1b99a:	b1ba      	cbz	r2, 1b9cc <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   1b99c:	89c2      	ldrh	r2, [r0, #14]
   1b99e:	2a7f      	cmp	r2, #127	; 0x7f
   1b9a0:	d814      	bhi.n	1b9cc <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   1b9a2:	7b42      	ldrb	r2, [r0, #13]
   1b9a4:	06d2      	lsls	r2, r2, #27
   1b9a6:	d111      	bne.n	1b9cc <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1b9a8:	4a14      	ldr	r2, [pc, #80]	; (1b9fc <z_time_slice+0xe8>)
   1b9aa:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1b9ae:	6812      	ldr	r2, [r2, #0]
   1b9b0:	4296      	cmp	r6, r2
   1b9b2:	db0b      	blt.n	1b9cc <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   1b9b4:	4a12      	ldr	r2, [pc, #72]	; (1ba00 <z_time_slice+0xec>)
   1b9b6:	4290      	cmp	r0, r2
   1b9b8:	d008      	beq.n	1b9cc <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   1b9ba:	691a      	ldr	r2, [r3, #16]
   1b9bc:	42a2      	cmp	r2, r4
   1b9be:	dc02      	bgt.n	1b9c6 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   1b9c0:	f7ff ff52 	bl	1b868 <move_thread_to_end_of_prio_q>
   1b9c4:	e7cc      	b.n	1b960 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   1b9c6:	1b12      	subs	r2, r2, r4
   1b9c8:	611a      	str	r2, [r3, #16]
   1b9ca:	e7cb      	b.n	1b964 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   1b9cc:	2300      	movs	r3, #0
   1b9ce:	610b      	str	r3, [r1, #16]
   1b9d0:	e7c8      	b.n	1b964 <z_time_slice+0x50>
   1b9d2:	bf00      	nop
   1b9d4:	20002484 	.word	0x20002484
   1b9d8:	00023889 	.word	0x00023889
   1b9dc:	000238db 	.word	0x000238db
   1b9e0:	000237c9 	.word	0x000237c9
   1b9e4:	000238f0 	.word	0x000238f0
   1b9e8:	20002444 	.word	0x20002444
   1b9ec:	20002480 	.word	0x20002480
   1b9f0:	000238af 	.word	0x000238af
   1b9f4:	000238c6 	.word	0x000238c6
   1b9f8:	2000248c 	.word	0x2000248c
   1b9fc:	20002488 	.word	0x20002488
   1ba00:	20001ad8 	.word	0x20001ad8

0001ba04 <ready_thread>:
{
   1ba04:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1ba06:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1ba0a:	7b43      	ldrb	r3, [r0, #13]
   1ba0c:	2a00      	cmp	r2, #0
{
   1ba0e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1ba10:	db3e      	blt.n	1ba90 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ba12:	06da      	lsls	r2, r3, #27
   1ba14:	d13c      	bne.n	1ba90 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
   1ba16:	6985      	ldr	r5, [r0, #24]
   1ba18:	2d00      	cmp	r5, #0
   1ba1a:	d139      	bne.n	1ba90 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
   1ba1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ba20:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1ba22:	4b1c      	ldr	r3, [pc, #112]	; (1ba94 <ready_thread+0x90>)
   1ba24:	4298      	cmp	r0, r3
   1ba26:	d109      	bne.n	1ba3c <ready_thread+0x38>
   1ba28:	491b      	ldr	r1, [pc, #108]	; (1ba98 <ready_thread+0x94>)
   1ba2a:	481c      	ldr	r0, [pc, #112]	; (1ba9c <ready_thread+0x98>)
   1ba2c:	4a1c      	ldr	r2, [pc, #112]	; (1baa0 <ready_thread+0x9c>)
   1ba2e:	23b1      	movs	r3, #177	; 0xb1
   1ba30:	f004 facf 	bl	1ffd2 <printk>
   1ba34:	481a      	ldr	r0, [pc, #104]	; (1baa0 <ready_thread+0x9c>)
   1ba36:	21b1      	movs	r1, #177	; 0xb1
   1ba38:	f004 fd25 	bl	20486 <assert_post_action>
	return list->head == list;
   1ba3c:	4919      	ldr	r1, [pc, #100]	; (1baa4 <ready_thread+0xa0>)
   1ba3e:	460b      	mov	r3, r1
   1ba40:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba44:	4298      	cmp	r0, r3
   1ba46:	bf18      	it	ne
   1ba48:	4605      	movne	r5, r0
   1ba4a:	2d00      	cmp	r5, #0
   1ba4c:	461a      	mov	r2, r3
   1ba4e:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ba50:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   1ba52:	bf38      	it	cc
   1ba54:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ba56:	b1b3      	cbz	r3, 1ba86 <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
   1ba58:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1ba5c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1ba60:	4286      	cmp	r6, r0
   1ba62:	d00c      	beq.n	1ba7e <ready_thread+0x7a>
		return b2 - b1;
   1ba64:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ba66:	2800      	cmp	r0, #0
   1ba68:	dd09      	ble.n	1ba7e <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
   1ba6a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ba6c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1ba70:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ba72:	605c      	str	r4, [r3, #4]
}
   1ba74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   1ba78:	2000      	movs	r0, #0
   1ba7a:	f7ff bebd 	b.w	1b7f8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1ba7e:	42ab      	cmp	r3, r5
   1ba80:	d001      	beq.n	1ba86 <ready_thread+0x82>
   1ba82:	681b      	ldr	r3, [r3, #0]
   1ba84:	e7e7      	b.n	1ba56 <ready_thread+0x52>
	node->prev = tail;
   1ba86:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   1ba8a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1ba8c:	624c      	str	r4, [r1, #36]	; 0x24
}
   1ba8e:	e7f1      	b.n	1ba74 <ready_thread+0x70>
}
   1ba90:	bd70      	pop	{r4, r5, r6, pc}
   1ba92:	bf00      	nop
   1ba94:	20001ad8 	.word	0x20001ad8
   1ba98:	00025181 	.word	0x00025181
   1ba9c:	000237c9 	.word	0x000237c9
   1baa0:	0002515f 	.word	0x0002515f
   1baa4:	20002444 	.word	0x20002444

0001baa8 <z_ready_thread>:
{
   1baa8:	b538      	push	{r3, r4, r5, lr}
   1baaa:	4604      	mov	r4, r0
	__asm__ volatile(
   1baac:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bab0:	f3ef 8511 	mrs	r5, BASEPRI
   1bab4:	f383 8812 	msr	BASEPRI_MAX, r3
   1bab8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1babc:	4817      	ldr	r0, [pc, #92]	; (1bb1c <z_ready_thread+0x74>)
   1babe:	f7fe fb5f 	bl	1a180 <z_spin_lock_valid>
   1bac2:	b968      	cbnz	r0, 1bae0 <z_ready_thread+0x38>
   1bac4:	4a16      	ldr	r2, [pc, #88]	; (1bb20 <z_ready_thread+0x78>)
   1bac6:	4917      	ldr	r1, [pc, #92]	; (1bb24 <z_ready_thread+0x7c>)
   1bac8:	4817      	ldr	r0, [pc, #92]	; (1bb28 <z_ready_thread+0x80>)
   1baca:	2381      	movs	r3, #129	; 0x81
   1bacc:	f004 fa81 	bl	1ffd2 <printk>
   1bad0:	4912      	ldr	r1, [pc, #72]	; (1bb1c <z_ready_thread+0x74>)
   1bad2:	4816      	ldr	r0, [pc, #88]	; (1bb2c <z_ready_thread+0x84>)
   1bad4:	f004 fa7d 	bl	1ffd2 <printk>
   1bad8:	4811      	ldr	r0, [pc, #68]	; (1bb20 <z_ready_thread+0x78>)
   1bada:	2181      	movs	r1, #129	; 0x81
   1badc:	f004 fcd3 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bae0:	480e      	ldr	r0, [pc, #56]	; (1bb1c <z_ready_thread+0x74>)
   1bae2:	f7fe fb6b 	bl	1a1bc <z_spin_lock_set_owner>
			ready_thread(thread);
   1bae6:	4620      	mov	r0, r4
   1bae8:	f7ff ff8c 	bl	1ba04 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1baec:	480b      	ldr	r0, [pc, #44]	; (1bb1c <z_ready_thread+0x74>)
   1baee:	f7fe fb55 	bl	1a19c <z_spin_unlock_valid>
   1baf2:	b968      	cbnz	r0, 1bb10 <z_ready_thread+0x68>
   1baf4:	4a0a      	ldr	r2, [pc, #40]	; (1bb20 <z_ready_thread+0x78>)
   1baf6:	490e      	ldr	r1, [pc, #56]	; (1bb30 <z_ready_thread+0x88>)
   1baf8:	480b      	ldr	r0, [pc, #44]	; (1bb28 <z_ready_thread+0x80>)
   1bafa:	23ac      	movs	r3, #172	; 0xac
   1bafc:	f004 fa69 	bl	1ffd2 <printk>
   1bb00:	4906      	ldr	r1, [pc, #24]	; (1bb1c <z_ready_thread+0x74>)
   1bb02:	480c      	ldr	r0, [pc, #48]	; (1bb34 <z_ready_thread+0x8c>)
   1bb04:	f004 fa65 	bl	1ffd2 <printk>
   1bb08:	4805      	ldr	r0, [pc, #20]	; (1bb20 <z_ready_thread+0x78>)
   1bb0a:	21ac      	movs	r1, #172	; 0xac
   1bb0c:	f004 fcbb 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1bb10:	f385 8811 	msr	BASEPRI, r5
   1bb14:	f3bf 8f6f 	isb	sy
}
   1bb18:	bd38      	pop	{r3, r4, r5, pc}
   1bb1a:	bf00      	nop
   1bb1c:	20002484 	.word	0x20002484
   1bb20:	00023889 	.word	0x00023889
   1bb24:	000238db 	.word	0x000238db
   1bb28:	000237c9 	.word	0x000237c9
   1bb2c:	000238f0 	.word	0x000238f0
   1bb30:	000238af 	.word	0x000238af
   1bb34:	000238c6 	.word	0x000238c6

0001bb38 <z_sched_start>:
{
   1bb38:	b538      	push	{r3, r4, r5, lr}
   1bb3a:	4604      	mov	r4, r0
	__asm__ volatile(
   1bb3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bb40:	f3ef 8511 	mrs	r5, BASEPRI
   1bb44:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bb4c:	481d      	ldr	r0, [pc, #116]	; (1bbc4 <z_sched_start+0x8c>)
   1bb4e:	f7fe fb17 	bl	1a180 <z_spin_lock_valid>
   1bb52:	b968      	cbnz	r0, 1bb70 <z_sched_start+0x38>
   1bb54:	4a1c      	ldr	r2, [pc, #112]	; (1bbc8 <z_sched_start+0x90>)
   1bb56:	491d      	ldr	r1, [pc, #116]	; (1bbcc <z_sched_start+0x94>)
   1bb58:	481d      	ldr	r0, [pc, #116]	; (1bbd0 <z_sched_start+0x98>)
   1bb5a:	2381      	movs	r3, #129	; 0x81
   1bb5c:	f004 fa39 	bl	1ffd2 <printk>
   1bb60:	4918      	ldr	r1, [pc, #96]	; (1bbc4 <z_sched_start+0x8c>)
   1bb62:	481c      	ldr	r0, [pc, #112]	; (1bbd4 <z_sched_start+0x9c>)
   1bb64:	f004 fa35 	bl	1ffd2 <printk>
   1bb68:	4817      	ldr	r0, [pc, #92]	; (1bbc8 <z_sched_start+0x90>)
   1bb6a:	2181      	movs	r1, #129	; 0x81
   1bb6c:	f004 fc8b 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bb70:	4814      	ldr	r0, [pc, #80]	; (1bbc4 <z_sched_start+0x8c>)
   1bb72:	f7fe fb23 	bl	1a1bc <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   1bb76:	7b63      	ldrb	r3, [r4, #13]
   1bb78:	075a      	lsls	r2, r3, #29
   1bb7a:	d416      	bmi.n	1bbaa <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bb7c:	4811      	ldr	r0, [pc, #68]	; (1bbc4 <z_sched_start+0x8c>)
   1bb7e:	f7fe fb0d 	bl	1a19c <z_spin_unlock_valid>
   1bb82:	b968      	cbnz	r0, 1bba0 <z_sched_start+0x68>
   1bb84:	4a10      	ldr	r2, [pc, #64]	; (1bbc8 <z_sched_start+0x90>)
   1bb86:	4914      	ldr	r1, [pc, #80]	; (1bbd8 <z_sched_start+0xa0>)
   1bb88:	4811      	ldr	r0, [pc, #68]	; (1bbd0 <z_sched_start+0x98>)
   1bb8a:	23ac      	movs	r3, #172	; 0xac
   1bb8c:	f004 fa21 	bl	1ffd2 <printk>
   1bb90:	490c      	ldr	r1, [pc, #48]	; (1bbc4 <z_sched_start+0x8c>)
   1bb92:	4812      	ldr	r0, [pc, #72]	; (1bbdc <z_sched_start+0xa4>)
   1bb94:	f004 fa1d 	bl	1ffd2 <printk>
   1bb98:	480b      	ldr	r0, [pc, #44]	; (1bbc8 <z_sched_start+0x90>)
   1bb9a:	21ac      	movs	r1, #172	; 0xac
   1bb9c:	f004 fc73 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1bba0:	f385 8811 	msr	BASEPRI, r5
   1bba4:	f3bf 8f6f 	isb	sy
}
   1bba8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1bbaa:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   1bbae:	4620      	mov	r0, r4
   1bbb0:	7363      	strb	r3, [r4, #13]
   1bbb2:	f7ff ff27 	bl	1ba04 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1bbb6:	4629      	mov	r1, r5
   1bbb8:	4802      	ldr	r0, [pc, #8]	; (1bbc4 <z_sched_start+0x8c>)
}
   1bbba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   1bbbe:	f7ff bcd3 	b.w	1b568 <z_reschedule>
   1bbc2:	bf00      	nop
   1bbc4:	20002484 	.word	0x20002484
   1bbc8:	00023889 	.word	0x00023889
   1bbcc:	000238db 	.word	0x000238db
   1bbd0:	000237c9 	.word	0x000237c9
   1bbd4:	000238f0 	.word	0x000238f0
   1bbd8:	000238af 	.word	0x000238af
   1bbdc:	000238c6 	.word	0x000238c6

0001bbe0 <z_thread_timeout>:
{
   1bbe0:	b570      	push	{r4, r5, r6, lr}
   1bbe2:	4604      	mov	r4, r0
	__asm__ volatile(
   1bbe4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bbe8:	f3ef 8611 	mrs	r6, BASEPRI
   1bbec:	f383 8812 	msr	BASEPRI_MAX, r3
   1bbf0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bbf4:	4820      	ldr	r0, [pc, #128]	; (1bc78 <z_thread_timeout+0x98>)
   1bbf6:	f7fe fac3 	bl	1a180 <z_spin_lock_valid>
   1bbfa:	b968      	cbnz	r0, 1bc18 <z_thread_timeout+0x38>
   1bbfc:	4a1f      	ldr	r2, [pc, #124]	; (1bc7c <z_thread_timeout+0x9c>)
   1bbfe:	4920      	ldr	r1, [pc, #128]	; (1bc80 <z_thread_timeout+0xa0>)
   1bc00:	4820      	ldr	r0, [pc, #128]	; (1bc84 <z_thread_timeout+0xa4>)
   1bc02:	2381      	movs	r3, #129	; 0x81
   1bc04:	f004 f9e5 	bl	1ffd2 <printk>
   1bc08:	491b      	ldr	r1, [pc, #108]	; (1bc78 <z_thread_timeout+0x98>)
   1bc0a:	481f      	ldr	r0, [pc, #124]	; (1bc88 <z_thread_timeout+0xa8>)
   1bc0c:	f004 f9e1 	bl	1ffd2 <printk>
   1bc10:	481a      	ldr	r0, [pc, #104]	; (1bc7c <z_thread_timeout+0x9c>)
   1bc12:	2181      	movs	r1, #129	; 0x81
   1bc14:	f004 fc37 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bc18:	4817      	ldr	r0, [pc, #92]	; (1bc78 <z_thread_timeout+0x98>)
   1bc1a:	f7fe facf 	bl	1a1bc <z_spin_lock_set_owner>
		if (!killed) {
   1bc1e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1bc22:	f013 0f28 	tst.w	r3, #40	; 0x28
   1bc26:	d110      	bne.n	1bc4a <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   1bc28:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1bc2c:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   1bc30:	b113      	cbz	r3, 1bc38 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   1bc32:	4628      	mov	r0, r5
   1bc34:	f7ff fd72 	bl	1b71c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1bc38:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1bc3c:	f023 0314 	bic.w	r3, r3, #20
   1bc40:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   1bc44:	4628      	mov	r0, r5
   1bc46:	f7ff fedd 	bl	1ba04 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bc4a:	480b      	ldr	r0, [pc, #44]	; (1bc78 <z_thread_timeout+0x98>)
   1bc4c:	f7fe faa6 	bl	1a19c <z_spin_unlock_valid>
   1bc50:	b968      	cbnz	r0, 1bc6e <z_thread_timeout+0x8e>
   1bc52:	4a0a      	ldr	r2, [pc, #40]	; (1bc7c <z_thread_timeout+0x9c>)
   1bc54:	490d      	ldr	r1, [pc, #52]	; (1bc8c <z_thread_timeout+0xac>)
   1bc56:	480b      	ldr	r0, [pc, #44]	; (1bc84 <z_thread_timeout+0xa4>)
   1bc58:	23ac      	movs	r3, #172	; 0xac
   1bc5a:	f004 f9ba 	bl	1ffd2 <printk>
   1bc5e:	4906      	ldr	r1, [pc, #24]	; (1bc78 <z_thread_timeout+0x98>)
   1bc60:	480b      	ldr	r0, [pc, #44]	; (1bc90 <z_thread_timeout+0xb0>)
   1bc62:	f004 f9b6 	bl	1ffd2 <printk>
   1bc66:	4805      	ldr	r0, [pc, #20]	; (1bc7c <z_thread_timeout+0x9c>)
   1bc68:	21ac      	movs	r1, #172	; 0xac
   1bc6a:	f004 fc0c 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1bc6e:	f386 8811 	msr	BASEPRI, r6
   1bc72:	f3bf 8f6f 	isb	sy
}
   1bc76:	bd70      	pop	{r4, r5, r6, pc}
   1bc78:	20002484 	.word	0x20002484
   1bc7c:	00023889 	.word	0x00023889
   1bc80:	000238db 	.word	0x000238db
   1bc84:	000237c9 	.word	0x000237c9
   1bc88:	000238f0 	.word	0x000238f0
   1bc8c:	000238af 	.word	0x000238af
   1bc90:	000238c6 	.word	0x000238c6

0001bc94 <unready_thread>:
{
   1bc94:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1bc96:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1bc9a:	7b43      	ldrb	r3, [r0, #13]
   1bc9c:	2a00      	cmp	r2, #0
{
   1bc9e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1bca0:	da06      	bge.n	1bcb0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bca6:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   1bca8:	4601      	mov	r1, r0
   1bcaa:	4806      	ldr	r0, [pc, #24]	; (1bcc4 <unready_thread+0x30>)
   1bcac:	f7ff fd14 	bl	1b6d8 <z_priq_dumb_remove>
	update_cache(thread == _current);
   1bcb0:	4b05      	ldr	r3, [pc, #20]	; (1bcc8 <unready_thread+0x34>)
   1bcb2:	6898      	ldr	r0, [r3, #8]
   1bcb4:	1b03      	subs	r3, r0, r4
   1bcb6:	4258      	negs	r0, r3
}
   1bcb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   1bcbc:	4158      	adcs	r0, r3
   1bcbe:	f7ff bd9b 	b.w	1b7f8 <update_cache>
   1bcc2:	bf00      	nop
   1bcc4:	20002464 	.word	0x20002464
   1bcc8:	20002444 	.word	0x20002444

0001bccc <add_to_waitq_locked>:
{
   1bccc:	b538      	push	{r3, r4, r5, lr}
   1bcce:	4604      	mov	r4, r0
   1bcd0:	460d      	mov	r5, r1
	unready_thread(thread);
   1bcd2:	f7ff ffdf 	bl	1bc94 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1bcd6:	7b63      	ldrb	r3, [r4, #13]
   1bcd8:	f043 0302 	orr.w	r3, r3, #2
   1bcdc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1bcde:	b31d      	cbz	r5, 1bd28 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1bce0:	4b17      	ldr	r3, [pc, #92]	; (1bd40 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   1bce2:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1bce4:	429c      	cmp	r4, r3
   1bce6:	d109      	bne.n	1bcfc <add_to_waitq_locked+0x30>
   1bce8:	4916      	ldr	r1, [pc, #88]	; (1bd44 <add_to_waitq_locked+0x78>)
   1bcea:	4817      	ldr	r0, [pc, #92]	; (1bd48 <add_to_waitq_locked+0x7c>)
   1bcec:	4a17      	ldr	r2, [pc, #92]	; (1bd4c <add_to_waitq_locked+0x80>)
   1bcee:	23b1      	movs	r3, #177	; 0xb1
   1bcf0:	f004 f96f 	bl	1ffd2 <printk>
   1bcf4:	4815      	ldr	r0, [pc, #84]	; (1bd4c <add_to_waitq_locked+0x80>)
   1bcf6:	21b1      	movs	r1, #177	; 0xb1
   1bcf8:	f004 fbc5 	bl	20486 <assert_post_action>
	return list->head == list;
   1bcfc:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bcfe:	429d      	cmp	r5, r3
   1bd00:	bf08      	it	eq
   1bd02:	2300      	moveq	r3, #0
   1bd04:	2b00      	cmp	r3, #0
   1bd06:	bf38      	it	cc
   1bd08:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bd0a:	b19b      	cbz	r3, 1bd34 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
   1bd0c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1bd10:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1bd14:	4291      	cmp	r1, r2
   1bd16:	d008      	beq.n	1bd2a <add_to_waitq_locked+0x5e>
		return b2 - b1;
   1bd18:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1bd1a:	2a00      	cmp	r2, #0
   1bd1c:	dd05      	ble.n	1bd2a <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
   1bd1e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1bd20:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1bd24:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1bd26:	605c      	str	r4, [r3, #4]
}
   1bd28:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1bd2a:	686a      	ldr	r2, [r5, #4]
   1bd2c:	4293      	cmp	r3, r2
   1bd2e:	d001      	beq.n	1bd34 <add_to_waitq_locked+0x68>
   1bd30:	681b      	ldr	r3, [r3, #0]
   1bd32:	e7ea      	b.n	1bd0a <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
   1bd34:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1bd36:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1bd3a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bd3c:	606c      	str	r4, [r5, #4]
   1bd3e:	e7f3      	b.n	1bd28 <add_to_waitq_locked+0x5c>
   1bd40:	20001ad8 	.word	0x20001ad8
   1bd44:	00025181 	.word	0x00025181
   1bd48:	000237c9 	.word	0x000237c9
   1bd4c:	0002515f 	.word	0x0002515f

0001bd50 <pend>:
{
   1bd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd54:	4604      	mov	r4, r0
   1bd56:	460d      	mov	r5, r1
   1bd58:	4616      	mov	r6, r2
   1bd5a:	461f      	mov	r7, r3
	__asm__ volatile(
   1bd5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bd60:	f3ef 8811 	mrs	r8, BASEPRI
   1bd64:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bd6c:	481f      	ldr	r0, [pc, #124]	; (1bdec <pend+0x9c>)
   1bd6e:	f7fe fa07 	bl	1a180 <z_spin_lock_valid>
   1bd72:	b968      	cbnz	r0, 1bd90 <pend+0x40>
   1bd74:	4a1e      	ldr	r2, [pc, #120]	; (1bdf0 <pend+0xa0>)
   1bd76:	491f      	ldr	r1, [pc, #124]	; (1bdf4 <pend+0xa4>)
   1bd78:	481f      	ldr	r0, [pc, #124]	; (1bdf8 <pend+0xa8>)
   1bd7a:	2381      	movs	r3, #129	; 0x81
   1bd7c:	f004 f929 	bl	1ffd2 <printk>
   1bd80:	491a      	ldr	r1, [pc, #104]	; (1bdec <pend+0x9c>)
   1bd82:	481e      	ldr	r0, [pc, #120]	; (1bdfc <pend+0xac>)
   1bd84:	f004 f925 	bl	1ffd2 <printk>
   1bd88:	4819      	ldr	r0, [pc, #100]	; (1bdf0 <pend+0xa0>)
   1bd8a:	2181      	movs	r1, #129	; 0x81
   1bd8c:	f004 fb7b 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bd90:	4816      	ldr	r0, [pc, #88]	; (1bdec <pend+0x9c>)
   1bd92:	f7fe fa13 	bl	1a1bc <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   1bd96:	4620      	mov	r0, r4
   1bd98:	4629      	mov	r1, r5
   1bd9a:	f7ff ff97 	bl	1bccc <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bd9e:	4813      	ldr	r0, [pc, #76]	; (1bdec <pend+0x9c>)
   1bda0:	f7fe f9fc 	bl	1a19c <z_spin_unlock_valid>
   1bda4:	b968      	cbnz	r0, 1bdc2 <pend+0x72>
   1bda6:	4a12      	ldr	r2, [pc, #72]	; (1bdf0 <pend+0xa0>)
   1bda8:	4915      	ldr	r1, [pc, #84]	; (1be00 <pend+0xb0>)
   1bdaa:	4813      	ldr	r0, [pc, #76]	; (1bdf8 <pend+0xa8>)
   1bdac:	23ac      	movs	r3, #172	; 0xac
   1bdae:	f004 f910 	bl	1ffd2 <printk>
   1bdb2:	490e      	ldr	r1, [pc, #56]	; (1bdec <pend+0x9c>)
   1bdb4:	4813      	ldr	r0, [pc, #76]	; (1be04 <pend+0xb4>)
   1bdb6:	f004 f90c 	bl	1ffd2 <printk>
   1bdba:	480d      	ldr	r0, [pc, #52]	; (1bdf0 <pend+0xa0>)
   1bdbc:	21ac      	movs	r1, #172	; 0xac
   1bdbe:	f004 fb62 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1bdc2:	f388 8811 	msr	BASEPRI, r8
   1bdc6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bdca:	1c7b      	adds	r3, r7, #1
   1bdcc:	bf08      	it	eq
   1bdce:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1bdd2:	d008      	beq.n	1bde6 <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1bdd4:	4632      	mov	r2, r6
   1bdd6:	463b      	mov	r3, r7
   1bdd8:	f104 0018 	add.w	r0, r4, #24
   1bddc:	490a      	ldr	r1, [pc, #40]	; (1be08 <pend+0xb8>)
}
   1bdde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bde2:	f000 bd49 	b.w	1c878 <z_add_timeout>
   1bde6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bdea:	bf00      	nop
   1bdec:	20002484 	.word	0x20002484
   1bdf0:	00023889 	.word	0x00023889
   1bdf4:	000238db 	.word	0x000238db
   1bdf8:	000237c9 	.word	0x000237c9
   1bdfc:	000238f0 	.word	0x000238f0
   1be00:	000238af 	.word	0x000238af
   1be04:	000238c6 	.word	0x000238c6
   1be08:	0001bbe1 	.word	0x0001bbe1

0001be0c <z_pend_curr>:
{
   1be0c:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   1be0e:	4b11      	ldr	r3, [pc, #68]	; (1be54 <z_pend_curr+0x48>)
{
   1be10:	4604      	mov	r4, r0
	pending_current = _current;
   1be12:	6898      	ldr	r0, [r3, #8]
   1be14:	4b10      	ldr	r3, [pc, #64]	; (1be58 <z_pend_curr+0x4c>)
{
   1be16:	460d      	mov	r5, r1
	pending_current = _current;
   1be18:	6018      	str	r0, [r3, #0]
{
   1be1a:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1be1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1be20:	f7ff ff96 	bl	1bd50 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1be24:	4620      	mov	r0, r4
   1be26:	f7fe f9b9 	bl	1a19c <z_spin_unlock_valid>
   1be2a:	b968      	cbnz	r0, 1be48 <z_pend_curr+0x3c>
   1be2c:	4a0b      	ldr	r2, [pc, #44]	; (1be5c <z_pend_curr+0x50>)
   1be2e:	490c      	ldr	r1, [pc, #48]	; (1be60 <z_pend_curr+0x54>)
   1be30:	480c      	ldr	r0, [pc, #48]	; (1be64 <z_pend_curr+0x58>)
   1be32:	23c3      	movs	r3, #195	; 0xc3
   1be34:	f004 f8cd 	bl	1ffd2 <printk>
   1be38:	480b      	ldr	r0, [pc, #44]	; (1be68 <z_pend_curr+0x5c>)
   1be3a:	4621      	mov	r1, r4
   1be3c:	f004 f8c9 	bl	1ffd2 <printk>
   1be40:	4806      	ldr	r0, [pc, #24]	; (1be5c <z_pend_curr+0x50>)
   1be42:	21c3      	movs	r1, #195	; 0xc3
   1be44:	f004 fb1f 	bl	20486 <assert_post_action>
   1be48:	4628      	mov	r0, r5
}
   1be4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1be4e:	f7f6 bc6d 	b.w	1272c <arch_swap>
   1be52:	bf00      	nop
   1be54:	20002444 	.word	0x20002444
   1be58:	20002480 	.word	0x20002480
   1be5c:	00023889 	.word	0x00023889
   1be60:	000238af 	.word	0x000238af
   1be64:	000237c9 	.word	0x000237c9
   1be68:	000238c6 	.word	0x000238c6

0001be6c <z_set_prio>:
{
   1be6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1be6e:	4604      	mov	r4, r0
   1be70:	460e      	mov	r6, r1
	__asm__ volatile(
   1be72:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be76:	f3ef 8711 	mrs	r7, BASEPRI
   1be7a:	f383 8812 	msr	BASEPRI_MAX, r3
   1be7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1be82:	483c      	ldr	r0, [pc, #240]	; (1bf74 <z_set_prio+0x108>)
   1be84:	f7fe f97c 	bl	1a180 <z_spin_lock_valid>
   1be88:	b968      	cbnz	r0, 1bea6 <z_set_prio+0x3a>
   1be8a:	4a3b      	ldr	r2, [pc, #236]	; (1bf78 <z_set_prio+0x10c>)
   1be8c:	493b      	ldr	r1, [pc, #236]	; (1bf7c <z_set_prio+0x110>)
   1be8e:	483c      	ldr	r0, [pc, #240]	; (1bf80 <z_set_prio+0x114>)
   1be90:	2381      	movs	r3, #129	; 0x81
   1be92:	f004 f89e 	bl	1ffd2 <printk>
   1be96:	4937      	ldr	r1, [pc, #220]	; (1bf74 <z_set_prio+0x108>)
   1be98:	483a      	ldr	r0, [pc, #232]	; (1bf84 <z_set_prio+0x118>)
   1be9a:	f004 f89a 	bl	1ffd2 <printk>
   1be9e:	4836      	ldr	r0, [pc, #216]	; (1bf78 <z_set_prio+0x10c>)
   1bea0:	2181      	movs	r1, #129	; 0x81
   1bea2:	f004 faf0 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bea6:	4833      	ldr	r0, [pc, #204]	; (1bf74 <z_set_prio+0x108>)
   1bea8:	f7fe f988 	bl	1a1bc <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1beac:	7b63      	ldrb	r3, [r4, #13]
   1beae:	06da      	lsls	r2, r3, #27
   1beb0:	b276      	sxtb	r6, r6
   1beb2:	d15c      	bne.n	1bf6e <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
   1beb4:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   1beb6:	2d00      	cmp	r5, #0
   1beb8:	d159      	bne.n	1bf6e <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1beba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bebe:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   1bec0:	4831      	ldr	r0, [pc, #196]	; (1bf88 <z_set_prio+0x11c>)
   1bec2:	4621      	mov	r1, r4
   1bec4:	f7ff fc08 	bl	1b6d8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1bec8:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   1beca:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1becc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1bed0:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1bed2:	4b2e      	ldr	r3, [pc, #184]	; (1bf8c <z_set_prio+0x120>)
   1bed4:	429c      	cmp	r4, r3
   1bed6:	d109      	bne.n	1beec <z_set_prio+0x80>
   1bed8:	492d      	ldr	r1, [pc, #180]	; (1bf90 <z_set_prio+0x124>)
   1beda:	4829      	ldr	r0, [pc, #164]	; (1bf80 <z_set_prio+0x114>)
   1bedc:	4a2d      	ldr	r2, [pc, #180]	; (1bf94 <z_set_prio+0x128>)
   1bede:	23b1      	movs	r3, #177	; 0xb1
   1bee0:	f004 f877 	bl	1ffd2 <printk>
   1bee4:	482b      	ldr	r0, [pc, #172]	; (1bf94 <z_set_prio+0x128>)
   1bee6:	21b1      	movs	r1, #177	; 0xb1
   1bee8:	f004 facd 	bl	20486 <assert_post_action>
	return list->head == list;
   1beec:	492a      	ldr	r1, [pc, #168]	; (1bf98 <z_set_prio+0x12c>)
   1beee:	460b      	mov	r3, r1
   1bef0:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bef4:	4298      	cmp	r0, r3
   1bef6:	bf18      	it	ne
   1bef8:	4605      	movne	r5, r0
   1befa:	2d00      	cmp	r5, #0
   1befc:	461a      	mov	r2, r3
   1befe:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bf00:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   1bf02:	bf38      	it	cc
   1bf04:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bf06:	b36b      	cbz	r3, 1bf64 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
   1bf08:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1bf0c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1bf10:	4286      	cmp	r6, r0
   1bf12:	d023      	beq.n	1bf5c <z_set_prio+0xf0>
		return b2 - b1;
   1bf14:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1bf16:	2800      	cmp	r0, #0
   1bf18:	dd20      	ble.n	1bf5c <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
   1bf1a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1bf1c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1bf20:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1bf22:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1bf24:	2001      	movs	r0, #1
   1bf26:	f7ff fc67 	bl	1b7f8 <update_cache>
   1bf2a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bf2c:	4811      	ldr	r0, [pc, #68]	; (1bf74 <z_set_prio+0x108>)
   1bf2e:	f7fe f935 	bl	1a19c <z_spin_unlock_valid>
   1bf32:	b968      	cbnz	r0, 1bf50 <z_set_prio+0xe4>
   1bf34:	4a10      	ldr	r2, [pc, #64]	; (1bf78 <z_set_prio+0x10c>)
   1bf36:	4919      	ldr	r1, [pc, #100]	; (1bf9c <z_set_prio+0x130>)
   1bf38:	4811      	ldr	r0, [pc, #68]	; (1bf80 <z_set_prio+0x114>)
   1bf3a:	23ac      	movs	r3, #172	; 0xac
   1bf3c:	f004 f849 	bl	1ffd2 <printk>
   1bf40:	490c      	ldr	r1, [pc, #48]	; (1bf74 <z_set_prio+0x108>)
   1bf42:	4817      	ldr	r0, [pc, #92]	; (1bfa0 <z_set_prio+0x134>)
   1bf44:	f004 f845 	bl	1ffd2 <printk>
   1bf48:	480b      	ldr	r0, [pc, #44]	; (1bf78 <z_set_prio+0x10c>)
   1bf4a:	21ac      	movs	r1, #172	; 0xac
   1bf4c:	f004 fa9b 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1bf50:	f387 8811 	msr	BASEPRI, r7
   1bf54:	f3bf 8f6f 	isb	sy
}
   1bf58:	4620      	mov	r0, r4
   1bf5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1bf5c:	42ab      	cmp	r3, r5
   1bf5e:	d001      	beq.n	1bf64 <z_set_prio+0xf8>
   1bf60:	681b      	ldr	r3, [r3, #0]
   1bf62:	e7d0      	b.n	1bf06 <z_set_prio+0x9a>
	node->prev = tail;
   1bf64:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   1bf68:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1bf6a:	624c      	str	r4, [r1, #36]	; 0x24
}
   1bf6c:	e7da      	b.n	1bf24 <z_set_prio+0xb8>
			thread->base.prio = prio;
   1bf6e:	73a6      	strb	r6, [r4, #14]
   1bf70:	2400      	movs	r4, #0
   1bf72:	e7db      	b.n	1bf2c <z_set_prio+0xc0>
   1bf74:	20002484 	.word	0x20002484
   1bf78:	00023889 	.word	0x00023889
   1bf7c:	000238db 	.word	0x000238db
   1bf80:	000237c9 	.word	0x000237c9
   1bf84:	000238f0 	.word	0x000238f0
   1bf88:	20002464 	.word	0x20002464
   1bf8c:	20001ad8 	.word	0x20001ad8
   1bf90:	00025181 	.word	0x00025181
   1bf94:	0002515f 	.word	0x0002515f
   1bf98:	20002444 	.word	0x20002444
   1bf9c:	000238af 	.word	0x000238af
   1bfa0:	000238c6 	.word	0x000238c6

0001bfa4 <z_impl_k_thread_suspend>:
{
   1bfa4:	b570      	push	{r4, r5, r6, lr}
   1bfa6:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   1bfa8:	3018      	adds	r0, #24
   1bfaa:	f000 fd39 	bl	1ca20 <z_abort_timeout>
	__asm__ volatile(
   1bfae:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bfb2:	f3ef 8611 	mrs	r6, BASEPRI
   1bfb6:	f383 8812 	msr	BASEPRI_MAX, r3
   1bfba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bfbe:	4825      	ldr	r0, [pc, #148]	; (1c054 <z_impl_k_thread_suspend+0xb0>)
   1bfc0:	f7fe f8de 	bl	1a180 <z_spin_lock_valid>
   1bfc4:	b968      	cbnz	r0, 1bfe2 <z_impl_k_thread_suspend+0x3e>
   1bfc6:	4a24      	ldr	r2, [pc, #144]	; (1c058 <z_impl_k_thread_suspend+0xb4>)
   1bfc8:	4924      	ldr	r1, [pc, #144]	; (1c05c <z_impl_k_thread_suspend+0xb8>)
   1bfca:	4825      	ldr	r0, [pc, #148]	; (1c060 <z_impl_k_thread_suspend+0xbc>)
   1bfcc:	2381      	movs	r3, #129	; 0x81
   1bfce:	f004 f800 	bl	1ffd2 <printk>
   1bfd2:	4920      	ldr	r1, [pc, #128]	; (1c054 <z_impl_k_thread_suspend+0xb0>)
   1bfd4:	4823      	ldr	r0, [pc, #140]	; (1c064 <z_impl_k_thread_suspend+0xc0>)
   1bfd6:	f003 fffc 	bl	1ffd2 <printk>
   1bfda:	481f      	ldr	r0, [pc, #124]	; (1c058 <z_impl_k_thread_suspend+0xb4>)
   1bfdc:	2181      	movs	r1, #129	; 0x81
   1bfde:	f004 fa52 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bfe2:	481c      	ldr	r0, [pc, #112]	; (1c054 <z_impl_k_thread_suspend+0xb0>)
   1bfe4:	f7fe f8ea 	bl	1a1bc <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1bfe8:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1bfec:	7b63      	ldrb	r3, [r4, #13]
   1bfee:	2a00      	cmp	r2, #0
   1bff0:	da06      	bge.n	1c000 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   1bff6:	481c      	ldr	r0, [pc, #112]	; (1c068 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bff8:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   1bffa:	4621      	mov	r1, r4
   1bffc:	f7ff fb6c 	bl	1b6d8 <z_priq_dumb_remove>
		update_cache(thread == _current);
   1c000:	4d1a      	ldr	r5, [pc, #104]	; (1c06c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1c002:	7b63      	ldrb	r3, [r4, #13]
   1c004:	68a8      	ldr	r0, [r5, #8]
   1c006:	f043 0310 	orr.w	r3, r3, #16
   1c00a:	7363      	strb	r3, [r4, #13]
   1c00c:	1b03      	subs	r3, r0, r4
   1c00e:	4258      	negs	r0, r3
   1c010:	4158      	adcs	r0, r3
   1c012:	f7ff fbf1 	bl	1b7f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c016:	480f      	ldr	r0, [pc, #60]	; (1c054 <z_impl_k_thread_suspend+0xb0>)
   1c018:	f7fe f8c0 	bl	1a19c <z_spin_unlock_valid>
   1c01c:	b968      	cbnz	r0, 1c03a <z_impl_k_thread_suspend+0x96>
   1c01e:	4a0e      	ldr	r2, [pc, #56]	; (1c058 <z_impl_k_thread_suspend+0xb4>)
   1c020:	4913      	ldr	r1, [pc, #76]	; (1c070 <z_impl_k_thread_suspend+0xcc>)
   1c022:	480f      	ldr	r0, [pc, #60]	; (1c060 <z_impl_k_thread_suspend+0xbc>)
   1c024:	23ac      	movs	r3, #172	; 0xac
   1c026:	f003 ffd4 	bl	1ffd2 <printk>
   1c02a:	490a      	ldr	r1, [pc, #40]	; (1c054 <z_impl_k_thread_suspend+0xb0>)
   1c02c:	4811      	ldr	r0, [pc, #68]	; (1c074 <z_impl_k_thread_suspend+0xd0>)
   1c02e:	f003 ffd0 	bl	1ffd2 <printk>
   1c032:	4809      	ldr	r0, [pc, #36]	; (1c058 <z_impl_k_thread_suspend+0xb4>)
   1c034:	21ac      	movs	r1, #172	; 0xac
   1c036:	f004 fa26 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1c03a:	f386 8811 	msr	BASEPRI, r6
   1c03e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1c042:	68ab      	ldr	r3, [r5, #8]
   1c044:	42a3      	cmp	r3, r4
   1c046:	d103      	bne.n	1c050 <z_impl_k_thread_suspend+0xac>
}
   1c048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1c04c:	f006 bd56 	b.w	22afc <z_reschedule_unlocked>
}
   1c050:	bd70      	pop	{r4, r5, r6, pc}
   1c052:	bf00      	nop
   1c054:	20002484 	.word	0x20002484
   1c058:	00023889 	.word	0x00023889
   1c05c:	000238db 	.word	0x000238db
   1c060:	000237c9 	.word	0x000237c9
   1c064:	000238f0 	.word	0x000238f0
   1c068:	20002464 	.word	0x20002464
   1c06c:	20002444 	.word	0x20002444
   1c070:	000238af 	.word	0x000238af
   1c074:	000238c6 	.word	0x000238c6

0001c078 <k_sched_unlock>:
{
   1c078:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1c07a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c07e:	f3ef 8511 	mrs	r5, BASEPRI
   1c082:	f383 8812 	msr	BASEPRI_MAX, r3
   1c086:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c08a:	482d      	ldr	r0, [pc, #180]	; (1c140 <k_sched_unlock+0xc8>)
   1c08c:	f7fe f878 	bl	1a180 <z_spin_lock_valid>
   1c090:	b968      	cbnz	r0, 1c0ae <k_sched_unlock+0x36>
   1c092:	4a2c      	ldr	r2, [pc, #176]	; (1c144 <k_sched_unlock+0xcc>)
   1c094:	492c      	ldr	r1, [pc, #176]	; (1c148 <k_sched_unlock+0xd0>)
   1c096:	482d      	ldr	r0, [pc, #180]	; (1c14c <k_sched_unlock+0xd4>)
   1c098:	2381      	movs	r3, #129	; 0x81
   1c09a:	f003 ff9a 	bl	1ffd2 <printk>
   1c09e:	4928      	ldr	r1, [pc, #160]	; (1c140 <k_sched_unlock+0xc8>)
   1c0a0:	482b      	ldr	r0, [pc, #172]	; (1c150 <k_sched_unlock+0xd8>)
   1c0a2:	f003 ff96 	bl	1ffd2 <printk>
   1c0a6:	4827      	ldr	r0, [pc, #156]	; (1c144 <k_sched_unlock+0xcc>)
   1c0a8:	2181      	movs	r1, #129	; 0x81
   1c0aa:	f004 f9ec 	bl	20486 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   1c0ae:	4c29      	ldr	r4, [pc, #164]	; (1c154 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   1c0b0:	4823      	ldr	r0, [pc, #140]	; (1c140 <k_sched_unlock+0xc8>)
   1c0b2:	f7fe f883 	bl	1a1bc <z_spin_lock_set_owner>
   1c0b6:	68a2      	ldr	r2, [r4, #8]
   1c0b8:	7bd2      	ldrb	r2, [r2, #15]
   1c0ba:	b972      	cbnz	r2, 1c0da <k_sched_unlock+0x62>
   1c0bc:	4926      	ldr	r1, [pc, #152]	; (1c158 <k_sched_unlock+0xe0>)
   1c0be:	4a27      	ldr	r2, [pc, #156]	; (1c15c <k_sched_unlock+0xe4>)
   1c0c0:	4822      	ldr	r0, [pc, #136]	; (1c14c <k_sched_unlock+0xd4>)
   1c0c2:	f240 3355 	movw	r3, #853	; 0x355
   1c0c6:	f003 ff84 	bl	1ffd2 <printk>
   1c0ca:	4825      	ldr	r0, [pc, #148]	; (1c160 <k_sched_unlock+0xe8>)
   1c0cc:	f003 ff81 	bl	1ffd2 <printk>
   1c0d0:	4822      	ldr	r0, [pc, #136]	; (1c15c <k_sched_unlock+0xe4>)
   1c0d2:	f240 3155 	movw	r1, #853	; 0x355
   1c0d6:	f004 f9d6 	bl	20486 <assert_post_action>
   1c0da:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   1c0de:	b173      	cbz	r3, 1c0fe <k_sched_unlock+0x86>
   1c0e0:	4920      	ldr	r1, [pc, #128]	; (1c164 <k_sched_unlock+0xec>)
   1c0e2:	4a1e      	ldr	r2, [pc, #120]	; (1c15c <k_sched_unlock+0xe4>)
   1c0e4:	4819      	ldr	r0, [pc, #100]	; (1c14c <k_sched_unlock+0xd4>)
   1c0e6:	f240 3356 	movw	r3, #854	; 0x356
   1c0ea:	f003 ff72 	bl	1ffd2 <printk>
   1c0ee:	481c      	ldr	r0, [pc, #112]	; (1c160 <k_sched_unlock+0xe8>)
   1c0f0:	f003 ff6f 	bl	1ffd2 <printk>
   1c0f4:	4819      	ldr	r0, [pc, #100]	; (1c15c <k_sched_unlock+0xe4>)
   1c0f6:	f240 3156 	movw	r1, #854	; 0x356
   1c0fa:	f004 f9c4 	bl	20486 <assert_post_action>
		++_current->base.sched_locked;
   1c0fe:	68a2      	ldr	r2, [r4, #8]
   1c100:	7bd3      	ldrb	r3, [r2, #15]
   1c102:	3301      	adds	r3, #1
		update_cache(0);
   1c104:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1c106:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1c108:	f7ff fb76 	bl	1b7f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c10c:	480c      	ldr	r0, [pc, #48]	; (1c140 <k_sched_unlock+0xc8>)
   1c10e:	f7fe f845 	bl	1a19c <z_spin_unlock_valid>
   1c112:	b968      	cbnz	r0, 1c130 <k_sched_unlock+0xb8>
   1c114:	4a0b      	ldr	r2, [pc, #44]	; (1c144 <k_sched_unlock+0xcc>)
   1c116:	4914      	ldr	r1, [pc, #80]	; (1c168 <k_sched_unlock+0xf0>)
   1c118:	480c      	ldr	r0, [pc, #48]	; (1c14c <k_sched_unlock+0xd4>)
   1c11a:	23ac      	movs	r3, #172	; 0xac
   1c11c:	f003 ff59 	bl	1ffd2 <printk>
   1c120:	4907      	ldr	r1, [pc, #28]	; (1c140 <k_sched_unlock+0xc8>)
   1c122:	4812      	ldr	r0, [pc, #72]	; (1c16c <k_sched_unlock+0xf4>)
   1c124:	f003 ff55 	bl	1ffd2 <printk>
   1c128:	4806      	ldr	r0, [pc, #24]	; (1c144 <k_sched_unlock+0xcc>)
   1c12a:	21ac      	movs	r1, #172	; 0xac
   1c12c:	f004 f9ab 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1c130:	f385 8811 	msr	BASEPRI, r5
   1c134:	f3bf 8f6f 	isb	sy
}
   1c138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   1c13c:	f006 bcde 	b.w	22afc <z_reschedule_unlocked>
   1c140:	20002484 	.word	0x20002484
   1c144:	00023889 	.word	0x00023889
   1c148:	000238db 	.word	0x000238db
   1c14c:	000237c9 	.word	0x000237c9
   1c150:	000238f0 	.word	0x000238f0
   1c154:	20002444 	.word	0x20002444
   1c158:	000251e0 	.word	0x000251e0
   1c15c:	0002515f 	.word	0x0002515f
   1c160:	000246b6 	.word	0x000246b6
   1c164:	00024e97 	.word	0x00024e97
   1c168:	000238af 	.word	0x000238af
   1c16c:	000238c6 	.word	0x000238c6

0001c170 <z_unpend_first_thread>:
{
   1c170:	b538      	push	{r3, r4, r5, lr}
   1c172:	4604      	mov	r4, r0
	__asm__ volatile(
   1c174:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c178:	f3ef 8511 	mrs	r5, BASEPRI
   1c17c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c180:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c184:	481b      	ldr	r0, [pc, #108]	; (1c1f4 <z_unpend_first_thread+0x84>)
   1c186:	f7fd fffb 	bl	1a180 <z_spin_lock_valid>
   1c18a:	b968      	cbnz	r0, 1c1a8 <z_unpend_first_thread+0x38>
   1c18c:	4a1a      	ldr	r2, [pc, #104]	; (1c1f8 <z_unpend_first_thread+0x88>)
   1c18e:	491b      	ldr	r1, [pc, #108]	; (1c1fc <z_unpend_first_thread+0x8c>)
   1c190:	481b      	ldr	r0, [pc, #108]	; (1c200 <z_unpend_first_thread+0x90>)
   1c192:	2381      	movs	r3, #129	; 0x81
   1c194:	f003 ff1d 	bl	1ffd2 <printk>
   1c198:	4916      	ldr	r1, [pc, #88]	; (1c1f4 <z_unpend_first_thread+0x84>)
   1c19a:	481a      	ldr	r0, [pc, #104]	; (1c204 <z_unpend_first_thread+0x94>)
   1c19c:	f003 ff19 	bl	1ffd2 <printk>
   1c1a0:	4815      	ldr	r0, [pc, #84]	; (1c1f8 <z_unpend_first_thread+0x88>)
   1c1a2:	2181      	movs	r1, #129	; 0x81
   1c1a4:	f004 f96f 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c1a8:	4812      	ldr	r0, [pc, #72]	; (1c1f4 <z_unpend_first_thread+0x84>)
   1c1aa:	f7fe f807 	bl	1a1bc <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   1c1ae:	4620      	mov	r0, r4
   1c1b0:	f006 fcae 	bl	22b10 <z_priq_dumb_best>
		if (thread != NULL) {
   1c1b4:	4604      	mov	r4, r0
   1c1b6:	b128      	cbz	r0, 1c1c4 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   1c1b8:	f7ff fab0 	bl	1b71c <unpend_thread_no_timeout>
   1c1bc:	f104 0018 	add.w	r0, r4, #24
   1c1c0:	f000 fc2e 	bl	1ca20 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c1c4:	480b      	ldr	r0, [pc, #44]	; (1c1f4 <z_unpend_first_thread+0x84>)
   1c1c6:	f7fd ffe9 	bl	1a19c <z_spin_unlock_valid>
   1c1ca:	b968      	cbnz	r0, 1c1e8 <z_unpend_first_thread+0x78>
   1c1cc:	4a0a      	ldr	r2, [pc, #40]	; (1c1f8 <z_unpend_first_thread+0x88>)
   1c1ce:	490e      	ldr	r1, [pc, #56]	; (1c208 <z_unpend_first_thread+0x98>)
   1c1d0:	480b      	ldr	r0, [pc, #44]	; (1c200 <z_unpend_first_thread+0x90>)
   1c1d2:	23ac      	movs	r3, #172	; 0xac
   1c1d4:	f003 fefd 	bl	1ffd2 <printk>
   1c1d8:	4906      	ldr	r1, [pc, #24]	; (1c1f4 <z_unpend_first_thread+0x84>)
   1c1da:	480c      	ldr	r0, [pc, #48]	; (1c20c <z_unpend_first_thread+0x9c>)
   1c1dc:	f003 fef9 	bl	1ffd2 <printk>
   1c1e0:	4805      	ldr	r0, [pc, #20]	; (1c1f8 <z_unpend_first_thread+0x88>)
   1c1e2:	21ac      	movs	r1, #172	; 0xac
   1c1e4:	f004 f94f 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1c1e8:	f385 8811 	msr	BASEPRI, r5
   1c1ec:	f3bf 8f6f 	isb	sy
}
   1c1f0:	4620      	mov	r0, r4
   1c1f2:	bd38      	pop	{r3, r4, r5, pc}
   1c1f4:	20002484 	.word	0x20002484
   1c1f8:	00023889 	.word	0x00023889
   1c1fc:	000238db 	.word	0x000238db
   1c200:	000237c9 	.word	0x000237c9
   1c204:	000238f0 	.word	0x000238f0
   1c208:	000238af 	.word	0x000238af
   1c20c:	000238c6 	.word	0x000238c6

0001c210 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1c210:	4b04      	ldr	r3, [pc, #16]	; (1c224 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1c212:	2100      	movs	r1, #0
   1c214:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1c218:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1c21c:	4608      	mov	r0, r1
   1c21e:	f7ff b93d 	b.w	1b49c <k_sched_time_slice_set>
   1c222:	bf00      	nop
   1c224:	20002444 	.word	0x20002444

0001c228 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c22a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1c22e:	b173      	cbz	r3, 1c24e <z_impl_k_yield+0x26>
   1c230:	4941      	ldr	r1, [pc, #260]	; (1c338 <z_impl_k_yield+0x110>)
   1c232:	4a42      	ldr	r2, [pc, #264]	; (1c33c <z_impl_k_yield+0x114>)
   1c234:	4842      	ldr	r0, [pc, #264]	; (1c340 <z_impl_k_yield+0x118>)
   1c236:	f240 43a1 	movw	r3, #1185	; 0x4a1
   1c23a:	f003 feca 	bl	1ffd2 <printk>
   1c23e:	4841      	ldr	r0, [pc, #260]	; (1c344 <z_impl_k_yield+0x11c>)
   1c240:	f003 fec7 	bl	1ffd2 <printk>
   1c244:	483d      	ldr	r0, [pc, #244]	; (1c33c <z_impl_k_yield+0x114>)
   1c246:	f240 41a1 	movw	r1, #1185	; 0x4a1
   1c24a:	f004 f91c 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1c24e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c252:	f3ef 8611 	mrs	r6, BASEPRI
   1c256:	f383 8812 	msr	BASEPRI_MAX, r3
   1c25a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c25e:	483a      	ldr	r0, [pc, #232]	; (1c348 <z_impl_k_yield+0x120>)
   1c260:	f7fd ff8e 	bl	1a180 <z_spin_lock_valid>
   1c264:	b968      	cbnz	r0, 1c282 <z_impl_k_yield+0x5a>
   1c266:	4a39      	ldr	r2, [pc, #228]	; (1c34c <z_impl_k_yield+0x124>)
   1c268:	4939      	ldr	r1, [pc, #228]	; (1c350 <z_impl_k_yield+0x128>)
   1c26a:	4835      	ldr	r0, [pc, #212]	; (1c340 <z_impl_k_yield+0x118>)
   1c26c:	2381      	movs	r3, #129	; 0x81
   1c26e:	f003 feb0 	bl	1ffd2 <printk>
   1c272:	4935      	ldr	r1, [pc, #212]	; (1c348 <z_impl_k_yield+0x120>)
   1c274:	4837      	ldr	r0, [pc, #220]	; (1c354 <z_impl_k_yield+0x12c>)
   1c276:	f003 feac 	bl	1ffd2 <printk>
   1c27a:	4834      	ldr	r0, [pc, #208]	; (1c34c <z_impl_k_yield+0x124>)
   1c27c:	2181      	movs	r1, #129	; 0x81
   1c27e:	f004 f902 	bl	20486 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   1c282:	4d35      	ldr	r5, [pc, #212]	; (1c358 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
   1c284:	4830      	ldr	r0, [pc, #192]	; (1c348 <z_impl_k_yield+0x120>)
   1c286:	f7fd ff99 	bl	1a1bc <z_spin_lock_set_owner>
   1c28a:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c28c:	7b4b      	ldrb	r3, [r1, #13]
   1c28e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c292:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   1c294:	f105 0020 	add.w	r0, r5, #32
   1c298:	f7ff fa1e 	bl	1b6d8 <z_priq_dumb_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   1c29c:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1c29e:	7b63      	ldrb	r3, [r4, #13]
   1c2a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c2a4:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1c2a6:	4b2d      	ldr	r3, [pc, #180]	; (1c35c <z_impl_k_yield+0x134>)
   1c2a8:	429c      	cmp	r4, r3
   1c2aa:	d109      	bne.n	1c2c0 <z_impl_k_yield+0x98>
   1c2ac:	492c      	ldr	r1, [pc, #176]	; (1c360 <z_impl_k_yield+0x138>)
   1c2ae:	4824      	ldr	r0, [pc, #144]	; (1c340 <z_impl_k_yield+0x118>)
   1c2b0:	4a22      	ldr	r2, [pc, #136]	; (1c33c <z_impl_k_yield+0x114>)
   1c2b2:	23b1      	movs	r3, #177	; 0xb1
   1c2b4:	f003 fe8d 	bl	1ffd2 <printk>
   1c2b8:	4820      	ldr	r0, [pc, #128]	; (1c33c <z_impl_k_yield+0x114>)
   1c2ba:	21b1      	movs	r1, #177	; 0xb1
   1c2bc:	f004 f8e3 	bl	20486 <assert_post_action>
	return list->head == list;
   1c2c0:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c2c2:	4828      	ldr	r0, [pc, #160]	; (1c364 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c2c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c2c6:	4283      	cmp	r3, r0
   1c2c8:	bf08      	it	eq
   1c2ca:	2300      	moveq	r3, #0
   1c2cc:	2b00      	cmp	r3, #0
   1c2ce:	bf38      	it	cc
   1c2d0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c2d2:	b35b      	cbz	r3, 1c32c <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
   1c2d4:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1c2d8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1c2dc:	4297      	cmp	r7, r2
   1c2de:	d021      	beq.n	1c324 <z_impl_k_yield+0xfc>
		return b2 - b1;
   1c2e0:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c2e2:	2a00      	cmp	r2, #0
   1c2e4:	dd1e      	ble.n	1c324 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
   1c2e6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1c2e8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1c2ec:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1c2ee:	605c      	str	r4, [r3, #4]
	update_cache(1);
   1c2f0:	2001      	movs	r0, #1
   1c2f2:	f7ff fa81 	bl	1b7f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c2f6:	4814      	ldr	r0, [pc, #80]	; (1c348 <z_impl_k_yield+0x120>)
   1c2f8:	f7fd ff50 	bl	1a19c <z_spin_unlock_valid>
   1c2fc:	b968      	cbnz	r0, 1c31a <z_impl_k_yield+0xf2>
   1c2fe:	4a13      	ldr	r2, [pc, #76]	; (1c34c <z_impl_k_yield+0x124>)
   1c300:	4919      	ldr	r1, [pc, #100]	; (1c368 <z_impl_k_yield+0x140>)
   1c302:	480f      	ldr	r0, [pc, #60]	; (1c340 <z_impl_k_yield+0x118>)
   1c304:	23c3      	movs	r3, #195	; 0xc3
   1c306:	f003 fe64 	bl	1ffd2 <printk>
   1c30a:	490f      	ldr	r1, [pc, #60]	; (1c348 <z_impl_k_yield+0x120>)
   1c30c:	4817      	ldr	r0, [pc, #92]	; (1c36c <z_impl_k_yield+0x144>)
   1c30e:	f003 fe60 	bl	1ffd2 <printk>
   1c312:	480e      	ldr	r0, [pc, #56]	; (1c34c <z_impl_k_yield+0x124>)
   1c314:	21c3      	movs	r1, #195	; 0xc3
   1c316:	f004 f8b6 	bl	20486 <assert_post_action>
   1c31a:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   1c31c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c320:	f7f6 ba04 	b.w	1272c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1c324:	428b      	cmp	r3, r1
   1c326:	d001      	beq.n	1c32c <z_impl_k_yield+0x104>
   1c328:	681b      	ldr	r3, [r3, #0]
   1c32a:	e7d2      	b.n	1c2d2 <z_impl_k_yield+0xaa>
	node->prev = tail;
   1c32c:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   1c330:	600c      	str	r4, [r1, #0]
	list->tail = node;
   1c332:	626c      	str	r4, [r5, #36]	; 0x24
}
   1c334:	e7dc      	b.n	1c2f0 <z_impl_k_yield+0xc8>
   1c336:	bf00      	nop
   1c338:	00024e97 	.word	0x00024e97
   1c33c:	0002515f 	.word	0x0002515f
   1c340:	000237c9 	.word	0x000237c9
   1c344:	000246b6 	.word	0x000246b6
   1c348:	20002484 	.word	0x20002484
   1c34c:	00023889 	.word	0x00023889
   1c350:	000238db 	.word	0x000238db
   1c354:	000238f0 	.word	0x000238f0
   1c358:	20002444 	.word	0x20002444
   1c35c:	20001ad8 	.word	0x20001ad8
   1c360:	00025181 	.word	0x00025181
   1c364:	20002464 	.word	0x20002464
   1c368:	000238af 	.word	0x000238af
   1c36c:	000238c6 	.word	0x000238c6

0001c370 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1c370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c374:	4604      	mov	r4, r0
   1c376:	460d      	mov	r5, r1
   1c378:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1c37c:	b173      	cbz	r3, 1c39c <z_tick_sleep+0x2c>
   1c37e:	4945      	ldr	r1, [pc, #276]	; (1c494 <z_tick_sleep+0x124>)
   1c380:	4a45      	ldr	r2, [pc, #276]	; (1c498 <z_tick_sleep+0x128>)
   1c382:	4846      	ldr	r0, [pc, #280]	; (1c49c <z_tick_sleep+0x12c>)
   1c384:	f240 43be 	movw	r3, #1214	; 0x4be
   1c388:	f003 fe23 	bl	1ffd2 <printk>
   1c38c:	4844      	ldr	r0, [pc, #272]	; (1c4a0 <z_tick_sleep+0x130>)
   1c38e:	f003 fe20 	bl	1ffd2 <printk>
   1c392:	4841      	ldr	r0, [pc, #260]	; (1c498 <z_tick_sleep+0x128>)
   1c394:	f240 41be 	movw	r1, #1214	; 0x4be
   1c398:	f004 f875 	bl	20486 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1c39c:	ea54 0305 	orrs.w	r3, r4, r5
   1c3a0:	d104      	bne.n	1c3ac <z_tick_sleep+0x3c>
	z_impl_k_yield();
   1c3a2:	f7ff ff41 	bl	1c228 <z_impl_k_yield>
		k_yield();
		return 0;
   1c3a6:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1c3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   1c3ac:	f06f 0301 	mvn.w	r3, #1
   1c3b0:	1b1e      	subs	r6, r3, r4
   1c3b2:	f04f 33ff 	mov.w	r3, #4294967295
   1c3b6:	eb63 0705 	sbc.w	r7, r3, r5
   1c3ba:	2e01      	cmp	r6, #1
   1c3bc:	f177 0300 	sbcs.w	r3, r7, #0
   1c3c0:	da64      	bge.n	1c48c <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1c3c2:	f006 fbbf 	bl	22b44 <sys_clock_tick_get_32>
   1c3c6:	1906      	adds	r6, r0, r4
   1c3c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c3cc:	f3ef 8811 	mrs	r8, BASEPRI
   1c3d0:	f383 8812 	msr	BASEPRI_MAX, r3
   1c3d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c3d8:	4832      	ldr	r0, [pc, #200]	; (1c4a4 <z_tick_sleep+0x134>)
   1c3da:	f7fd fed1 	bl	1a180 <z_spin_lock_valid>
   1c3de:	b968      	cbnz	r0, 1c3fc <z_tick_sleep+0x8c>
   1c3e0:	4a31      	ldr	r2, [pc, #196]	; (1c4a8 <z_tick_sleep+0x138>)
   1c3e2:	4932      	ldr	r1, [pc, #200]	; (1c4ac <z_tick_sleep+0x13c>)
   1c3e4:	482d      	ldr	r0, [pc, #180]	; (1c49c <z_tick_sleep+0x12c>)
   1c3e6:	2381      	movs	r3, #129	; 0x81
   1c3e8:	f003 fdf3 	bl	1ffd2 <printk>
   1c3ec:	492d      	ldr	r1, [pc, #180]	; (1c4a4 <z_tick_sleep+0x134>)
   1c3ee:	4830      	ldr	r0, [pc, #192]	; (1c4b0 <z_tick_sleep+0x140>)
   1c3f0:	f003 fdef 	bl	1ffd2 <printk>
   1c3f4:	482c      	ldr	r0, [pc, #176]	; (1c4a8 <z_tick_sleep+0x138>)
   1c3f6:	2181      	movs	r1, #129	; 0x81
   1c3f8:	f004 f845 	bl	20486 <assert_post_action>
	pending_current = _current;
   1c3fc:	4f2d      	ldr	r7, [pc, #180]	; (1c4b4 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
   1c3fe:	4829      	ldr	r0, [pc, #164]	; (1c4a4 <z_tick_sleep+0x134>)
   1c400:	f7fd fedc 	bl	1a1bc <z_spin_lock_set_owner>
   1c404:	4b2c      	ldr	r3, [pc, #176]	; (1c4b8 <z_tick_sleep+0x148>)
   1c406:	68b8      	ldr	r0, [r7, #8]
   1c408:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1c40a:	f7ff fc43 	bl	1bc94 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1c40e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1c410:	492a      	ldr	r1, [pc, #168]	; (1c4bc <z_tick_sleep+0x14c>)
   1c412:	4622      	mov	r2, r4
   1c414:	462b      	mov	r3, r5
   1c416:	3018      	adds	r0, #24
   1c418:	f000 fa2e 	bl	1c878 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1c41c:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c41e:	4821      	ldr	r0, [pc, #132]	; (1c4a4 <z_tick_sleep+0x134>)
   1c420:	7b53      	ldrb	r3, [r2, #13]
   1c422:	f043 0310 	orr.w	r3, r3, #16
   1c426:	7353      	strb	r3, [r2, #13]
   1c428:	f7fd feb8 	bl	1a19c <z_spin_unlock_valid>
   1c42c:	b968      	cbnz	r0, 1c44a <z_tick_sleep+0xda>
   1c42e:	4a1e      	ldr	r2, [pc, #120]	; (1c4a8 <z_tick_sleep+0x138>)
   1c430:	4923      	ldr	r1, [pc, #140]	; (1c4c0 <z_tick_sleep+0x150>)
   1c432:	481a      	ldr	r0, [pc, #104]	; (1c49c <z_tick_sleep+0x12c>)
   1c434:	23c3      	movs	r3, #195	; 0xc3
   1c436:	f003 fdcc 	bl	1ffd2 <printk>
   1c43a:	491a      	ldr	r1, [pc, #104]	; (1c4a4 <z_tick_sleep+0x134>)
   1c43c:	4821      	ldr	r0, [pc, #132]	; (1c4c4 <z_tick_sleep+0x154>)
   1c43e:	f003 fdc8 	bl	1ffd2 <printk>
   1c442:	4819      	ldr	r0, [pc, #100]	; (1c4a8 <z_tick_sleep+0x138>)
   1c444:	21c3      	movs	r1, #195	; 0xc3
   1c446:	f004 f81e 	bl	20486 <assert_post_action>
   1c44a:	4640      	mov	r0, r8
   1c44c:	f7f6 f96e 	bl	1272c <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1c450:	68bb      	ldr	r3, [r7, #8]
   1c452:	7b5b      	ldrb	r3, [r3, #13]
   1c454:	06db      	lsls	r3, r3, #27
   1c456:	d50e      	bpl.n	1c476 <z_tick_sleep+0x106>
   1c458:	491b      	ldr	r1, [pc, #108]	; (1c4c8 <z_tick_sleep+0x158>)
   1c45a:	4a0f      	ldr	r2, [pc, #60]	; (1c498 <z_tick_sleep+0x128>)
   1c45c:	480f      	ldr	r0, [pc, #60]	; (1c49c <z_tick_sleep+0x12c>)
   1c45e:	f240 43df 	movw	r3, #1247	; 0x4df
   1c462:	f003 fdb6 	bl	1ffd2 <printk>
   1c466:	480e      	ldr	r0, [pc, #56]	; (1c4a0 <z_tick_sleep+0x130>)
   1c468:	f003 fdb3 	bl	1ffd2 <printk>
   1c46c:	480a      	ldr	r0, [pc, #40]	; (1c498 <z_tick_sleep+0x128>)
   1c46e:	f240 41df 	movw	r1, #1247	; 0x4df
   1c472:	f004 f808 	bl	20486 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1c476:	f006 fb65 	bl	22b44 <sys_clock_tick_get_32>
   1c47a:	1a30      	subs	r0, r6, r0
   1c47c:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
   1c480:	2801      	cmp	r0, #1
   1c482:	f171 0300 	sbcs.w	r3, r1, #0
   1c486:	bfb8      	it	lt
   1c488:	2000      	movlt	r0, #0
   1c48a:	e78d      	b.n	1c3a8 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1c48c:	f06f 0601 	mvn.w	r6, #1
   1c490:	1b36      	subs	r6, r6, r4
   1c492:	e799      	b.n	1c3c8 <z_tick_sleep+0x58>
   1c494:	00024e97 	.word	0x00024e97
   1c498:	0002515f 	.word	0x0002515f
   1c49c:	000237c9 	.word	0x000237c9
   1c4a0:	000246b6 	.word	0x000246b6
   1c4a4:	20002484 	.word	0x20002484
   1c4a8:	00023889 	.word	0x00023889
   1c4ac:	000238db 	.word	0x000238db
   1c4b0:	000238f0 	.word	0x000238f0
   1c4b4:	20002444 	.word	0x20002444
   1c4b8:	20002480 	.word	0x20002480
   1c4bc:	0001bbe1 	.word	0x0001bbe1
   1c4c0:	000238af 	.word	0x000238af
   1c4c4:	000238c6 	.word	0x000238c6
   1c4c8:	00025211 	.word	0x00025211

0001c4cc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1c4cc:	b538      	push	{r3, r4, r5, lr}
   1c4ce:	4604      	mov	r4, r0
   1c4d0:	460d      	mov	r5, r1
   1c4d2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1c4d6:	b173      	cbz	r3, 1c4f6 <z_impl_k_sleep+0x2a>
   1c4d8:	4913      	ldr	r1, [pc, #76]	; (1c528 <z_impl_k_sleep+0x5c>)
   1c4da:	4a14      	ldr	r2, [pc, #80]	; (1c52c <z_impl_k_sleep+0x60>)
   1c4dc:	4814      	ldr	r0, [pc, #80]	; (1c530 <z_impl_k_sleep+0x64>)
   1c4de:	f240 43ee 	movw	r3, #1262	; 0x4ee
   1c4e2:	f003 fd76 	bl	1ffd2 <printk>
   1c4e6:	4813      	ldr	r0, [pc, #76]	; (1c534 <z_impl_k_sleep+0x68>)
   1c4e8:	f003 fd73 	bl	1ffd2 <printk>
   1c4ec:	480f      	ldr	r0, [pc, #60]	; (1c52c <z_impl_k_sleep+0x60>)
   1c4ee:	f240 41ee 	movw	r1, #1262	; 0x4ee
   1c4f2:	f003 ffc8 	bl	20486 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c4f6:	1c6b      	adds	r3, r5, #1
   1c4f8:	bf08      	it	eq
   1c4fa:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1c4fe:	d106      	bne.n	1c50e <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   1c500:	4b0d      	ldr	r3, [pc, #52]	; (1c538 <z_impl_k_sleep+0x6c>)
   1c502:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1c504:	f7ff fd4e 	bl	1bfa4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1c508:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1c50c:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   1c50e:	4620      	mov	r0, r4
   1c510:	4629      	mov	r1, r5
   1c512:	f7ff ff2d 	bl	1c370 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1c516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1c51a:	fb80 3403 	smull	r3, r4, r0, r3
   1c51e:	0bd8      	lsrs	r0, r3, #15
   1c520:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   1c524:	e7f2      	b.n	1c50c <z_impl_k_sleep+0x40>
   1c526:	bf00      	nop
   1c528:	00024e97 	.word	0x00024e97
   1c52c:	0002515f 	.word	0x0002515f
   1c530:	000237c9 	.word	0x000237c9
   1c534:	000246b6 	.word	0x000246b6
   1c538:	20002444 	.word	0x20002444

0001c53c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1c53c:	4b01      	ldr	r3, [pc, #4]	; (1c544 <z_impl_z_current_get+0x8>)
   1c53e:	6898      	ldr	r0, [r3, #8]
   1c540:	4770      	bx	lr
   1c542:	bf00      	nop
   1c544:	20002444 	.word	0x20002444

0001c548 <z_impl_k_is_preempt_thread>:
   1c548:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1c54c:	b93b      	cbnz	r3, 1c55e <z_impl_k_is_preempt_thread+0x16>
   1c54e:	4b05      	ldr	r3, [pc, #20]	; (1c564 <z_impl_k_is_preempt_thread+0x1c>)
   1c550:	689b      	ldr	r3, [r3, #8]
   1c552:	89d8      	ldrh	r0, [r3, #14]
   1c554:	287f      	cmp	r0, #127	; 0x7f
   1c556:	bf8c      	ite	hi
   1c558:	2000      	movhi	r0, #0
   1c55a:	2001      	movls	r0, #1
   1c55c:	4770      	bx	lr
   1c55e:	2000      	movs	r0, #0
}
   1c560:	4770      	bx	lr
   1c562:	bf00      	nop
   1c564:	20002444 	.word	0x20002444

0001c568 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1c568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c56c:	4604      	mov	r4, r0
   1c56e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c572:	f3ef 8611 	mrs	r6, BASEPRI
   1c576:	f383 8812 	msr	BASEPRI_MAX, r3
   1c57a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c57e:	4848      	ldr	r0, [pc, #288]	; (1c6a0 <z_thread_abort+0x138>)
   1c580:	f7fd fdfe 	bl	1a180 <z_spin_lock_valid>
   1c584:	b968      	cbnz	r0, 1c5a2 <z_thread_abort+0x3a>
   1c586:	4a47      	ldr	r2, [pc, #284]	; (1c6a4 <z_thread_abort+0x13c>)
   1c588:	4947      	ldr	r1, [pc, #284]	; (1c6a8 <z_thread_abort+0x140>)
   1c58a:	4848      	ldr	r0, [pc, #288]	; (1c6ac <z_thread_abort+0x144>)
   1c58c:	2381      	movs	r3, #129	; 0x81
   1c58e:	f003 fd20 	bl	1ffd2 <printk>
   1c592:	4943      	ldr	r1, [pc, #268]	; (1c6a0 <z_thread_abort+0x138>)
   1c594:	4846      	ldr	r0, [pc, #280]	; (1c6b0 <z_thread_abort+0x148>)
   1c596:	f003 fd1c 	bl	1ffd2 <printk>
   1c59a:	4842      	ldr	r0, [pc, #264]	; (1c6a4 <z_thread_abort+0x13c>)
   1c59c:	2181      	movs	r1, #129	; 0x81
   1c59e:	f003 ff72 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c5a2:	483f      	ldr	r0, [pc, #252]	; (1c6a0 <z_thread_abort+0x138>)
   1c5a4:	f7fd fe0a 	bl	1a1bc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1c5a8:	7b63      	ldrb	r3, [r4, #13]
   1c5aa:	071a      	lsls	r2, r3, #28
   1c5ac:	d517      	bpl.n	1c5de <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c5ae:	483c      	ldr	r0, [pc, #240]	; (1c6a0 <z_thread_abort+0x138>)
   1c5b0:	f7fd fdf4 	bl	1a19c <z_spin_unlock_valid>
   1c5b4:	b968      	cbnz	r0, 1c5d2 <z_thread_abort+0x6a>
   1c5b6:	4a3b      	ldr	r2, [pc, #236]	; (1c6a4 <z_thread_abort+0x13c>)
   1c5b8:	493e      	ldr	r1, [pc, #248]	; (1c6b4 <z_thread_abort+0x14c>)
   1c5ba:	483c      	ldr	r0, [pc, #240]	; (1c6ac <z_thread_abort+0x144>)
   1c5bc:	23ac      	movs	r3, #172	; 0xac
   1c5be:	f003 fd08 	bl	1ffd2 <printk>
   1c5c2:	4937      	ldr	r1, [pc, #220]	; (1c6a0 <z_thread_abort+0x138>)
   1c5c4:	483c      	ldr	r0, [pc, #240]	; (1c6b8 <z_thread_abort+0x150>)
   1c5c6:	f003 fd04 	bl	1ffd2 <printk>
   1c5ca:	4836      	ldr	r0, [pc, #216]	; (1c6a4 <z_thread_abort+0x13c>)
   1c5cc:	21ac      	movs	r1, #172	; 0xac
   1c5ce:	f003 ff5a 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1c5d2:	f386 8811 	msr	BASEPRI, r6
   1c5d6:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1c5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1c5de:	f023 0220 	bic.w	r2, r3, #32
   1c5e2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1c5e6:	09d2      	lsrs	r2, r2, #7
   1c5e8:	d142      	bne.n	1c670 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1c5ea:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   1c5ec:	68a3      	ldr	r3, [r4, #8]
   1c5ee:	b113      	cbz	r3, 1c5f6 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   1c5f0:	4620      	mov	r0, r4
   1c5f2:	f7ff f893 	bl	1b71c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1c5f6:	f104 0018 	add.w	r0, r4, #24
   1c5fa:	f000 fa11 	bl	1ca20 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1c5fe:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1c602:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1c606:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c608:	42bd      	cmp	r5, r7
   1c60a:	d001      	beq.n	1c610 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1c60c:	2d00      	cmp	r5, #0
   1c60e:	d139      	bne.n	1c684 <z_thread_abort+0x11c>
		update_cache(1);
   1c610:	2001      	movs	r0, #1
   1c612:	f7ff f8f1 	bl	1b7f8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1c616:	4b29      	ldr	r3, [pc, #164]	; (1c6bc <z_thread_abort+0x154>)
   1c618:	689b      	ldr	r3, [r3, #8]
   1c61a:	42a3      	cmp	r3, r4
   1c61c:	d1c7      	bne.n	1c5ae <z_thread_abort+0x46>
   1c61e:	f3ef 8305 	mrs	r3, IPSR
   1c622:	2b00      	cmp	r3, #0
   1c624:	d1c3      	bne.n	1c5ae <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c626:	481e      	ldr	r0, [pc, #120]	; (1c6a0 <z_thread_abort+0x138>)
   1c628:	f7fd fdb8 	bl	1a19c <z_spin_unlock_valid>
   1c62c:	b968      	cbnz	r0, 1c64a <z_thread_abort+0xe2>
   1c62e:	4a1d      	ldr	r2, [pc, #116]	; (1c6a4 <z_thread_abort+0x13c>)
   1c630:	4920      	ldr	r1, [pc, #128]	; (1c6b4 <z_thread_abort+0x14c>)
   1c632:	481e      	ldr	r0, [pc, #120]	; (1c6ac <z_thread_abort+0x144>)
   1c634:	23c3      	movs	r3, #195	; 0xc3
   1c636:	f003 fccc 	bl	1ffd2 <printk>
   1c63a:	4919      	ldr	r1, [pc, #100]	; (1c6a0 <z_thread_abort+0x138>)
   1c63c:	481e      	ldr	r0, [pc, #120]	; (1c6b8 <z_thread_abort+0x150>)
   1c63e:	f003 fcc8 	bl	1ffd2 <printk>
   1c642:	4818      	ldr	r0, [pc, #96]	; (1c6a4 <z_thread_abort+0x13c>)
   1c644:	21c3      	movs	r1, #195	; 0xc3
   1c646:	f003 ff1e 	bl	20486 <assert_post_action>
   1c64a:	4630      	mov	r0, r6
   1c64c:	f7f6 f86e 	bl	1272c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   1c650:	4a1b      	ldr	r2, [pc, #108]	; (1c6c0 <z_thread_abort+0x158>)
   1c652:	491c      	ldr	r1, [pc, #112]	; (1c6c4 <z_thread_abort+0x15c>)
   1c654:	4815      	ldr	r0, [pc, #84]	; (1c6ac <z_thread_abort+0x144>)
   1c656:	f240 6309 	movw	r3, #1545	; 0x609
   1c65a:	f003 fcba 	bl	1ffd2 <printk>
   1c65e:	481a      	ldr	r0, [pc, #104]	; (1c6c8 <z_thread_abort+0x160>)
   1c660:	f003 fcb7 	bl	1ffd2 <printk>
   1c664:	4816      	ldr	r0, [pc, #88]	; (1c6c0 <z_thread_abort+0x158>)
   1c666:	f240 6109 	movw	r1, #1545	; 0x609
   1c66a:	f003 ff0c 	bl	20486 <assert_post_action>
   1c66e:	e79e      	b.n	1c5ae <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c670:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1c674:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
   1c678:	4814      	ldr	r0, [pc, #80]	; (1c6cc <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c67a:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   1c67c:	4621      	mov	r1, r4
   1c67e:	f7ff f82b 	bl	1b6d8 <z_priq_dumb_remove>
}
   1c682:	e7b3      	b.n	1c5ec <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   1c684:	4628      	mov	r0, r5
   1c686:	f7ff f849 	bl	1b71c <unpend_thread_no_timeout>
   1c68a:	f105 0018 	add.w	r0, r5, #24
   1c68e:	f000 f9c7 	bl	1ca20 <z_abort_timeout>
   1c692:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1c696:	4628      	mov	r0, r5
   1c698:	f7ff f9b4 	bl	1ba04 <ready_thread>
   1c69c:	e7b3      	b.n	1c606 <z_thread_abort+0x9e>
   1c69e:	bf00      	nop
   1c6a0:	20002484 	.word	0x20002484
   1c6a4:	00023889 	.word	0x00023889
   1c6a8:	000238db 	.word	0x000238db
   1c6ac:	000237c9 	.word	0x000237c9
   1c6b0:	000238f0 	.word	0x000238f0
   1c6b4:	000238af 	.word	0x000238af
   1c6b8:	000238c6 	.word	0x000238c6
   1c6bc:	20002444 	.word	0x20002444
   1c6c0:	0002515f 	.word	0x0002515f
   1c6c4:	00025541 	.word	0x00025541
   1c6c8:	00025251 	.word	0x00025251
   1c6cc:	20002464 	.word	0x20002464

0001c6d0 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   1c6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c6d2:	4604      	mov	r4, r0
   1c6d4:	460e      	mov	r6, r1
   1c6d6:	4615      	mov	r5, r2
	__asm__ volatile(
   1c6d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c6dc:	f3ef 8711 	mrs	r7, BASEPRI
   1c6e0:	f383 8812 	msr	BASEPRI_MAX, r3
   1c6e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c6e8:	481e      	ldr	r0, [pc, #120]	; (1c764 <z_sched_wake+0x94>)
   1c6ea:	f7fd fd49 	bl	1a180 <z_spin_lock_valid>
   1c6ee:	b968      	cbnz	r0, 1c70c <z_sched_wake+0x3c>
   1c6f0:	4a1d      	ldr	r2, [pc, #116]	; (1c768 <z_sched_wake+0x98>)
   1c6f2:	491e      	ldr	r1, [pc, #120]	; (1c76c <z_sched_wake+0x9c>)
   1c6f4:	481e      	ldr	r0, [pc, #120]	; (1c770 <z_sched_wake+0xa0>)
   1c6f6:	2381      	movs	r3, #129	; 0x81
   1c6f8:	f003 fc6b 	bl	1ffd2 <printk>
   1c6fc:	4919      	ldr	r1, [pc, #100]	; (1c764 <z_sched_wake+0x94>)
   1c6fe:	481d      	ldr	r0, [pc, #116]	; (1c774 <z_sched_wake+0xa4>)
   1c700:	f003 fc67 	bl	1ffd2 <printk>
   1c704:	4818      	ldr	r0, [pc, #96]	; (1c768 <z_sched_wake+0x98>)
   1c706:	2181      	movs	r1, #129	; 0x81
   1c708:	f003 febd 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c70c:	4815      	ldr	r0, [pc, #84]	; (1c764 <z_sched_wake+0x94>)
   1c70e:	f7fd fd55 	bl	1a1bc <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   1c712:	4620      	mov	r0, r4
   1c714:	f006 f9fc 	bl	22b10 <z_priq_dumb_best>

		if (thread != NULL) {
   1c718:	4604      	mov	r4, r0
   1c71a:	b158      	cbz	r0, 1c734 <z_sched_wake+0x64>
   1c71c:	67c6      	str	r6, [r0, #124]	; 0x7c
   1c71e:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   1c720:	f7fe fffc 	bl	1b71c <unpend_thread_no_timeout>
   1c724:	f104 0018 	add.w	r0, r4, #24
   1c728:	f000 f97a 	bl	1ca20 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   1c72c:	4620      	mov	r0, r4
   1c72e:	f7ff f969 	bl	1ba04 <ready_thread>
			ret = true;
   1c732:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c734:	480b      	ldr	r0, [pc, #44]	; (1c764 <z_sched_wake+0x94>)
   1c736:	f7fd fd31 	bl	1a19c <z_spin_unlock_valid>
   1c73a:	b968      	cbnz	r0, 1c758 <z_sched_wake+0x88>
   1c73c:	4a0a      	ldr	r2, [pc, #40]	; (1c768 <z_sched_wake+0x98>)
   1c73e:	490e      	ldr	r1, [pc, #56]	; (1c778 <z_sched_wake+0xa8>)
   1c740:	480b      	ldr	r0, [pc, #44]	; (1c770 <z_sched_wake+0xa0>)
   1c742:	23ac      	movs	r3, #172	; 0xac
   1c744:	f003 fc45 	bl	1ffd2 <printk>
   1c748:	4906      	ldr	r1, [pc, #24]	; (1c764 <z_sched_wake+0x94>)
   1c74a:	480c      	ldr	r0, [pc, #48]	; (1c77c <z_sched_wake+0xac>)
   1c74c:	f003 fc41 	bl	1ffd2 <printk>
   1c750:	4805      	ldr	r0, [pc, #20]	; (1c768 <z_sched_wake+0x98>)
   1c752:	21ac      	movs	r1, #172	; 0xac
   1c754:	f003 fe97 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1c758:	f387 8811 	msr	BASEPRI, r7
   1c75c:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1c760:	4620      	mov	r0, r4
   1c762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c764:	20002484 	.word	0x20002484
   1c768:	00023889 	.word	0x00023889
   1c76c:	000238db 	.word	0x000238db
   1c770:	000237c9 	.word	0x000237c9
   1c774:	000238f0 	.word	0x000238f0
   1c778:	000238af 	.word	0x000238af
   1c77c:	000238c6 	.word	0x000238c6

0001c780 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1c780:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1c782:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1c786:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1c788:	e9cd 6700 	strd	r6, r7, [sp]
   1c78c:	f7ff fb3e 	bl	1be0c <z_pend_curr>

	if (data != NULL) {
   1c790:	b11c      	cbz	r4, 1c79a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1c792:	4b03      	ldr	r3, [pc, #12]	; (1c7a0 <z_sched_wait+0x20>)
   1c794:	689b      	ldr	r3, [r3, #8]
   1c796:	695b      	ldr	r3, [r3, #20]
   1c798:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1c79a:	b002      	add	sp, #8
   1c79c:	bdd0      	pop	{r4, r6, r7, pc}
   1c79e:	bf00      	nop
   1c7a0:	20002444 	.word	0x20002444

0001c7a4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1c7a4:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c7a6:	4806      	ldr	r0, [pc, #24]	; (1c7c0 <z_data_copy+0x1c>)
   1c7a8:	4a06      	ldr	r2, [pc, #24]	; (1c7c4 <z_data_copy+0x20>)
   1c7aa:	4907      	ldr	r1, [pc, #28]	; (1c7c8 <z_data_copy+0x24>)
   1c7ac:	1a12      	subs	r2, r2, r0
   1c7ae:	f006 fa54 	bl	22c5a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1c7b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1c7b6:	4a05      	ldr	r2, [pc, #20]	; (1c7cc <z_data_copy+0x28>)
   1c7b8:	4905      	ldr	r1, [pc, #20]	; (1c7d0 <z_data_copy+0x2c>)
   1c7ba:	4806      	ldr	r0, [pc, #24]	; (1c7d4 <z_data_copy+0x30>)
   1c7bc:	f006 ba4d 	b.w	22c5a <memcpy>
   1c7c0:	20000000 	.word	0x20000000
   1c7c4:	20000840 	.word	0x20000840
   1c7c8:	0002566c 	.word	0x0002566c
   1c7cc:	00000000 	.word	0x00000000
   1c7d0:	0002566c 	.word	0x0002566c
   1c7d4:	20000000 	.word	0x20000000

0001c7d8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1c7d8:	4b03      	ldr	r3, [pc, #12]	; (1c7e8 <elapsed+0x10>)
   1c7da:	681b      	ldr	r3, [r3, #0]
   1c7dc:	b90b      	cbnz	r3, 1c7e2 <elapsed+0xa>
   1c7de:	f7fc b881 	b.w	188e4 <sys_clock_elapsed>
}
   1c7e2:	2000      	movs	r0, #0
   1c7e4:	4770      	bx	lr
   1c7e6:	bf00      	nop
   1c7e8:	20002490 	.word	0x20002490

0001c7ec <next_timeout>:

static int32_t next_timeout(void)
{
   1c7ec:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1c7ee:	4b13      	ldr	r3, [pc, #76]	; (1c83c <next_timeout+0x50>)
   1c7f0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c7f2:	429c      	cmp	r4, r3
   1c7f4:	bf08      	it	eq
   1c7f6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1c7f8:	f7ff ffee 	bl	1c7d8 <elapsed>
   1c7fc:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1c7fe:	b1bc      	cbz	r4, 1c830 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1c800:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1c804:	1b40      	subs	r0, r0, r5
   1c806:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1c80a:	2801      	cmp	r0, #1
   1c80c:	f171 0300 	sbcs.w	r3, r1, #0
   1c810:	db11      	blt.n	1c836 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1c812:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1c816:	2300      	movs	r3, #0
   1c818:	4282      	cmp	r2, r0
   1c81a:	eb73 0401 	sbcs.w	r4, r3, r1
   1c81e:	da00      	bge.n	1c822 <next_timeout+0x36>
   1c820:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1c822:	4b07      	ldr	r3, [pc, #28]	; (1c840 <next_timeout+0x54>)
   1c824:	691b      	ldr	r3, [r3, #16]
   1c826:	b113      	cbz	r3, 1c82e <next_timeout+0x42>
   1c828:	4298      	cmp	r0, r3
   1c82a:	bfa8      	it	ge
   1c82c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1c82e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1c830:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1c834:	e7f5      	b.n	1c822 <next_timeout+0x36>
   1c836:	2000      	movs	r0, #0
   1c838:	e7f3      	b.n	1c822 <next_timeout+0x36>
   1c83a:	bf00      	nop
   1c83c:	20000514 	.word	0x20000514
   1c840:	20002444 	.word	0x20002444

0001c844 <remove_timeout>:
{
   1c844:	b530      	push	{r4, r5, lr}
   1c846:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c848:	b168      	cbz	r0, 1c866 <remove_timeout+0x22>
   1c84a:	4a0a      	ldr	r2, [pc, #40]	; (1c874 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1c84c:	6852      	ldr	r2, [r2, #4]
   1c84e:	4290      	cmp	r0, r2
   1c850:	d009      	beq.n	1c866 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1c852:	b143      	cbz	r3, 1c866 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1c854:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1c858:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1c85c:	1912      	adds	r2, r2, r4
   1c85e:	eb45 0101 	adc.w	r1, r5, r1
   1c862:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   1c866:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   1c868:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c86a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c86c:	2300      	movs	r3, #0
	node->prev = NULL;
   1c86e:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c872:	bd30      	pop	{r4, r5, pc}
   1c874:	20000514 	.word	0x20000514

0001c878 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1c878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c87c:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c87e:	1c6b      	adds	r3, r5, #1
   1c880:	bf08      	it	eq
   1c882:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1c886:	4682      	mov	sl, r0
   1c888:	468b      	mov	fp, r1
   1c88a:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c88c:	f000 80aa 	beq.w	1c9e4 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1c890:	6803      	ldr	r3, [r0, #0]
   1c892:	b163      	cbz	r3, 1c8ae <z_add_timeout+0x36>
   1c894:	4955      	ldr	r1, [pc, #340]	; (1c9ec <z_add_timeout+0x174>)
   1c896:	4a56      	ldr	r2, [pc, #344]	; (1c9f0 <z_add_timeout+0x178>)
   1c898:	4856      	ldr	r0, [pc, #344]	; (1c9f4 <z_add_timeout+0x17c>)
   1c89a:	235d      	movs	r3, #93	; 0x5d
   1c89c:	f003 fb99 	bl	1ffd2 <printk>
   1c8a0:	4855      	ldr	r0, [pc, #340]	; (1c9f8 <z_add_timeout+0x180>)
   1c8a2:	f003 fb96 	bl	1ffd2 <printk>
   1c8a6:	4852      	ldr	r0, [pc, #328]	; (1c9f0 <z_add_timeout+0x178>)
   1c8a8:	215d      	movs	r1, #93	; 0x5d
   1c8aa:	f003 fdec 	bl	20486 <assert_post_action>
	to->fn = fn;
   1c8ae:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   1c8b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c8b6:	f3ef 8b11 	mrs	fp, BASEPRI
   1c8ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1c8be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c8c2:	484e      	ldr	r0, [pc, #312]	; (1c9fc <z_add_timeout+0x184>)
   1c8c4:	f7fd fc5c 	bl	1a180 <z_spin_lock_valid>
   1c8c8:	b968      	cbnz	r0, 1c8e6 <z_add_timeout+0x6e>
   1c8ca:	4a4d      	ldr	r2, [pc, #308]	; (1ca00 <z_add_timeout+0x188>)
   1c8cc:	494d      	ldr	r1, [pc, #308]	; (1ca04 <z_add_timeout+0x18c>)
   1c8ce:	4849      	ldr	r0, [pc, #292]	; (1c9f4 <z_add_timeout+0x17c>)
   1c8d0:	2381      	movs	r3, #129	; 0x81
   1c8d2:	f003 fb7e 	bl	1ffd2 <printk>
   1c8d6:	4949      	ldr	r1, [pc, #292]	; (1c9fc <z_add_timeout+0x184>)
   1c8d8:	484b      	ldr	r0, [pc, #300]	; (1ca08 <z_add_timeout+0x190>)
   1c8da:	f003 fb7a 	bl	1ffd2 <printk>
   1c8de:	4848      	ldr	r0, [pc, #288]	; (1ca00 <z_add_timeout+0x188>)
   1c8e0:	2181      	movs	r1, #129	; 0x81
   1c8e2:	f003 fdd0 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c8e6:	4845      	ldr	r0, [pc, #276]	; (1c9fc <z_add_timeout+0x184>)
   1c8e8:	f7fd fc68 	bl	1a1bc <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1c8ec:	f06f 0301 	mvn.w	r3, #1
   1c8f0:	ebb3 0804 	subs.w	r8, r3, r4
   1c8f4:	f04f 32ff 	mov.w	r2, #4294967295
   1c8f8:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1c8fc:	f1b8 0f00 	cmp.w	r8, #0
   1c900:	f179 0100 	sbcs.w	r1, r9, #0
   1c904:	db1c      	blt.n	1c940 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1c906:	4841      	ldr	r0, [pc, #260]	; (1ca0c <z_add_timeout+0x194>)
   1c908:	e9d0 1000 	ldrd	r1, r0, [r0]
   1c90c:	1a5b      	subs	r3, r3, r1
   1c90e:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   1c912:	1b1e      	subs	r6, r3, r4
   1c914:	eb62 0705 	sbc.w	r7, r2, r5
   1c918:	2e01      	cmp	r6, #1
   1c91a:	f177 0300 	sbcs.w	r3, r7, #0
   1c91e:	bfbc      	itt	lt
   1c920:	2601      	movlt	r6, #1
   1c922:	2700      	movlt	r7, #0
   1c924:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   1c928:	4a39      	ldr	r2, [pc, #228]	; (1ca10 <z_add_timeout+0x198>)
   1c92a:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c92e:	4293      	cmp	r3, r2
   1c930:	d11d      	bne.n	1c96e <z_add_timeout+0xf6>
	node->prev = tail;
   1c932:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   1c936:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   1c93a:	f8c2 a004 	str.w	sl, [r2, #4]
}
   1c93e:	e02c      	b.n	1c99a <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1c940:	f7ff ff4a 	bl	1c7d8 <elapsed>
   1c944:	1c63      	adds	r3, r4, #1
   1c946:	9300      	str	r3, [sp, #0]
   1c948:	f145 0300 	adc.w	r3, r5, #0
   1c94c:	9301      	str	r3, [sp, #4]
   1c94e:	e9dd 2300 	ldrd	r2, r3, [sp]
   1c952:	1812      	adds	r2, r2, r0
   1c954:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   1c958:	e9ca 2304 	strd	r2, r3, [sl, #16]
   1c95c:	e7e4      	b.n	1c928 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1c95e:	1be0      	subs	r0, r4, r7
   1c960:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   1c964:	42b3      	cmp	r3, r6
   1c966:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1c96a:	d0e2      	beq.n	1c932 <z_add_timeout+0xba>
   1c96c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1c96e:	2b00      	cmp	r3, #0
   1c970:	d0df      	beq.n	1c932 <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   1c972:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   1c976:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1c97a:	42bc      	cmp	r4, r7
   1c97c:	eb75 0108 	sbcs.w	r1, r5, r8
   1c980:	daed      	bge.n	1c95e <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
   1c982:	1b38      	subs	r0, r7, r4
   1c984:	eb68 0105 	sbc.w	r1, r8, r5
   1c988:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1c98c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1c98e:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   1c992:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1c996:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   1c99a:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c99c:	4293      	cmp	r3, r2
   1c99e:	d00b      	beq.n	1c9b8 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1c9a0:	459a      	cmp	sl, r3
   1c9a2:	d109      	bne.n	1c9b8 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1c9a4:	f7ff ff22 	bl	1c7ec <next_timeout>

			if (next_time == 0 ||
   1c9a8:	b118      	cbz	r0, 1c9b2 <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
   1c9aa:	4b1a      	ldr	r3, [pc, #104]	; (1ca14 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
   1c9ac:	691b      	ldr	r3, [r3, #16]
   1c9ae:	4283      	cmp	r3, r0
   1c9b0:	d002      	beq.n	1c9b8 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
   1c9b2:	2100      	movs	r1, #0
   1c9b4:	f7fb ff66 	bl	18884 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c9b8:	4810      	ldr	r0, [pc, #64]	; (1c9fc <z_add_timeout+0x184>)
   1c9ba:	f7fd fbef 	bl	1a19c <z_spin_unlock_valid>
   1c9be:	b968      	cbnz	r0, 1c9dc <z_add_timeout+0x164>
   1c9c0:	4a0f      	ldr	r2, [pc, #60]	; (1ca00 <z_add_timeout+0x188>)
   1c9c2:	4915      	ldr	r1, [pc, #84]	; (1ca18 <z_add_timeout+0x1a0>)
   1c9c4:	480b      	ldr	r0, [pc, #44]	; (1c9f4 <z_add_timeout+0x17c>)
   1c9c6:	23ac      	movs	r3, #172	; 0xac
   1c9c8:	f003 fb03 	bl	1ffd2 <printk>
   1c9cc:	490b      	ldr	r1, [pc, #44]	; (1c9fc <z_add_timeout+0x184>)
   1c9ce:	4813      	ldr	r0, [pc, #76]	; (1ca1c <z_add_timeout+0x1a4>)
   1c9d0:	f003 faff 	bl	1ffd2 <printk>
   1c9d4:	480a      	ldr	r0, [pc, #40]	; (1ca00 <z_add_timeout+0x188>)
   1c9d6:	21ac      	movs	r1, #172	; 0xac
   1c9d8:	f003 fd55 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1c9dc:	f38b 8811 	msr	BASEPRI, fp
   1c9e0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1c9e4:	b003      	add	sp, #12
   1c9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c9ea:	bf00      	nop
   1c9ec:	00025297 	.word	0x00025297
   1c9f0:	00025273 	.word	0x00025273
   1c9f4:	000237c9 	.word	0x000237c9
   1c9f8:	000246b6 	.word	0x000246b6
   1c9fc:	20002494 	.word	0x20002494
   1ca00:	00023889 	.word	0x00023889
   1ca04:	000238db 	.word	0x000238db
   1ca08:	000238f0 	.word	0x000238f0
   1ca0c:	20001c78 	.word	0x20001c78
   1ca10:	20000514 	.word	0x20000514
   1ca14:	20002444 	.word	0x20002444
   1ca18:	000238af 	.word	0x000238af
   1ca1c:	000238c6 	.word	0x000238c6

0001ca20 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   1ca20:	b538      	push	{r3, r4, r5, lr}
   1ca22:	4604      	mov	r4, r0
	__asm__ volatile(
   1ca24:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca28:	f3ef 8511 	mrs	r5, BASEPRI
   1ca2c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ca30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ca34:	481a      	ldr	r0, [pc, #104]	; (1caa0 <z_abort_timeout+0x80>)
   1ca36:	f7fd fba3 	bl	1a180 <z_spin_lock_valid>
   1ca3a:	b968      	cbnz	r0, 1ca58 <z_abort_timeout+0x38>
   1ca3c:	4a19      	ldr	r2, [pc, #100]	; (1caa4 <z_abort_timeout+0x84>)
   1ca3e:	491a      	ldr	r1, [pc, #104]	; (1caa8 <z_abort_timeout+0x88>)
   1ca40:	481a      	ldr	r0, [pc, #104]	; (1caac <z_abort_timeout+0x8c>)
   1ca42:	2381      	movs	r3, #129	; 0x81
   1ca44:	f003 fac5 	bl	1ffd2 <printk>
   1ca48:	4915      	ldr	r1, [pc, #84]	; (1caa0 <z_abort_timeout+0x80>)
   1ca4a:	4819      	ldr	r0, [pc, #100]	; (1cab0 <z_abort_timeout+0x90>)
   1ca4c:	f003 fac1 	bl	1ffd2 <printk>
   1ca50:	4814      	ldr	r0, [pc, #80]	; (1caa4 <z_abort_timeout+0x84>)
   1ca52:	2181      	movs	r1, #129	; 0x81
   1ca54:	f003 fd17 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ca58:	4811      	ldr	r0, [pc, #68]	; (1caa0 <z_abort_timeout+0x80>)
   1ca5a:	f7fd fbaf 	bl	1a1bc <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   1ca5e:	6823      	ldr	r3, [r4, #0]
   1ca60:	b1db      	cbz	r3, 1ca9a <z_abort_timeout+0x7a>
			remove_timeout(to);
   1ca62:	4620      	mov	r0, r4
   1ca64:	f7ff feee 	bl	1c844 <remove_timeout>
			ret = 0;
   1ca68:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ca6a:	480d      	ldr	r0, [pc, #52]	; (1caa0 <z_abort_timeout+0x80>)
   1ca6c:	f7fd fb96 	bl	1a19c <z_spin_unlock_valid>
   1ca70:	b968      	cbnz	r0, 1ca8e <z_abort_timeout+0x6e>
   1ca72:	4a0c      	ldr	r2, [pc, #48]	; (1caa4 <z_abort_timeout+0x84>)
   1ca74:	490f      	ldr	r1, [pc, #60]	; (1cab4 <z_abort_timeout+0x94>)
   1ca76:	480d      	ldr	r0, [pc, #52]	; (1caac <z_abort_timeout+0x8c>)
   1ca78:	23ac      	movs	r3, #172	; 0xac
   1ca7a:	f003 faaa 	bl	1ffd2 <printk>
   1ca7e:	4908      	ldr	r1, [pc, #32]	; (1caa0 <z_abort_timeout+0x80>)
   1ca80:	480d      	ldr	r0, [pc, #52]	; (1cab8 <z_abort_timeout+0x98>)
   1ca82:	f003 faa6 	bl	1ffd2 <printk>
   1ca86:	4807      	ldr	r0, [pc, #28]	; (1caa4 <z_abort_timeout+0x84>)
   1ca88:	21ac      	movs	r1, #172	; 0xac
   1ca8a:	f003 fcfc 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1ca8e:	f385 8811 	msr	BASEPRI, r5
   1ca92:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1ca96:	4620      	mov	r0, r4
   1ca98:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   1ca9a:	f06f 0415 	mvn.w	r4, #21
   1ca9e:	e7e4      	b.n	1ca6a <z_abort_timeout+0x4a>
   1caa0:	20002494 	.word	0x20002494
   1caa4:	00023889 	.word	0x00023889
   1caa8:	000238db 	.word	0x000238db
   1caac:	000237c9 	.word	0x000237c9
   1cab0:	000238f0 	.word	0x000238f0
   1cab4:	000238af 	.word	0x000238af
   1cab8:	000238c6 	.word	0x000238c6

0001cabc <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   1cabc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1cabe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cac2:	f3ef 8511 	mrs	r5, BASEPRI
   1cac6:	f383 8812 	msr	BASEPRI_MAX, r3
   1caca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cace:	4818      	ldr	r0, [pc, #96]	; (1cb30 <z_get_next_timeout_expiry+0x74>)
   1cad0:	f7fd fb56 	bl	1a180 <z_spin_lock_valid>
   1cad4:	b968      	cbnz	r0, 1caf2 <z_get_next_timeout_expiry+0x36>
   1cad6:	4a17      	ldr	r2, [pc, #92]	; (1cb34 <z_get_next_timeout_expiry+0x78>)
   1cad8:	4917      	ldr	r1, [pc, #92]	; (1cb38 <z_get_next_timeout_expiry+0x7c>)
   1cada:	4818      	ldr	r0, [pc, #96]	; (1cb3c <z_get_next_timeout_expiry+0x80>)
   1cadc:	2381      	movs	r3, #129	; 0x81
   1cade:	f003 fa78 	bl	1ffd2 <printk>
   1cae2:	4913      	ldr	r1, [pc, #76]	; (1cb30 <z_get_next_timeout_expiry+0x74>)
   1cae4:	4816      	ldr	r0, [pc, #88]	; (1cb40 <z_get_next_timeout_expiry+0x84>)
   1cae6:	f003 fa74 	bl	1ffd2 <printk>
   1caea:	4812      	ldr	r0, [pc, #72]	; (1cb34 <z_get_next_timeout_expiry+0x78>)
   1caec:	2181      	movs	r1, #129	; 0x81
   1caee:	f003 fcca 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1caf2:	480f      	ldr	r0, [pc, #60]	; (1cb30 <z_get_next_timeout_expiry+0x74>)
   1caf4:	f7fd fb62 	bl	1a1bc <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1caf8:	f7ff fe78 	bl	1c7ec <next_timeout>
   1cafc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cafe:	480c      	ldr	r0, [pc, #48]	; (1cb30 <z_get_next_timeout_expiry+0x74>)
   1cb00:	f7fd fb4c 	bl	1a19c <z_spin_unlock_valid>
   1cb04:	b968      	cbnz	r0, 1cb22 <z_get_next_timeout_expiry+0x66>
   1cb06:	4a0b      	ldr	r2, [pc, #44]	; (1cb34 <z_get_next_timeout_expiry+0x78>)
   1cb08:	490e      	ldr	r1, [pc, #56]	; (1cb44 <z_get_next_timeout_expiry+0x88>)
   1cb0a:	480c      	ldr	r0, [pc, #48]	; (1cb3c <z_get_next_timeout_expiry+0x80>)
   1cb0c:	23ac      	movs	r3, #172	; 0xac
   1cb0e:	f003 fa60 	bl	1ffd2 <printk>
   1cb12:	4907      	ldr	r1, [pc, #28]	; (1cb30 <z_get_next_timeout_expiry+0x74>)
   1cb14:	480c      	ldr	r0, [pc, #48]	; (1cb48 <z_get_next_timeout_expiry+0x8c>)
   1cb16:	f003 fa5c 	bl	1ffd2 <printk>
   1cb1a:	4806      	ldr	r0, [pc, #24]	; (1cb34 <z_get_next_timeout_expiry+0x78>)
   1cb1c:	21ac      	movs	r1, #172	; 0xac
   1cb1e:	f003 fcb2 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1cb22:	f385 8811 	msr	BASEPRI, r5
   1cb26:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1cb2a:	4620      	mov	r0, r4
   1cb2c:	bd38      	pop	{r3, r4, r5, pc}
   1cb2e:	bf00      	nop
   1cb30:	20002494 	.word	0x20002494
   1cb34:	00023889 	.word	0x00023889
   1cb38:	000238db 	.word	0x000238db
   1cb3c:	000237c9 	.word	0x000237c9
   1cb40:	000238f0 	.word	0x000238f0
   1cb44:	000238af 	.word	0x000238af
   1cb48:	000238c6 	.word	0x000238c6

0001cb4c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   1cb4c:	b570      	push	{r4, r5, r6, lr}
   1cb4e:	4604      	mov	r4, r0
   1cb50:	460d      	mov	r5, r1
	__asm__ volatile(
   1cb52:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb56:	f3ef 8611 	mrs	r6, BASEPRI
   1cb5a:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cb62:	481b      	ldr	r0, [pc, #108]	; (1cbd0 <z_set_timeout_expiry+0x84>)
   1cb64:	f7fd fb0c 	bl	1a180 <z_spin_lock_valid>
   1cb68:	b968      	cbnz	r0, 1cb86 <z_set_timeout_expiry+0x3a>
   1cb6a:	4a1a      	ldr	r2, [pc, #104]	; (1cbd4 <z_set_timeout_expiry+0x88>)
   1cb6c:	491a      	ldr	r1, [pc, #104]	; (1cbd8 <z_set_timeout_expiry+0x8c>)
   1cb6e:	481b      	ldr	r0, [pc, #108]	; (1cbdc <z_set_timeout_expiry+0x90>)
   1cb70:	2381      	movs	r3, #129	; 0x81
   1cb72:	f003 fa2e 	bl	1ffd2 <printk>
   1cb76:	4916      	ldr	r1, [pc, #88]	; (1cbd0 <z_set_timeout_expiry+0x84>)
   1cb78:	4819      	ldr	r0, [pc, #100]	; (1cbe0 <z_set_timeout_expiry+0x94>)
   1cb7a:	f003 fa2a 	bl	1ffd2 <printk>
   1cb7e:	4815      	ldr	r0, [pc, #84]	; (1cbd4 <z_set_timeout_expiry+0x88>)
   1cb80:	2181      	movs	r1, #129	; 0x81
   1cb82:	f003 fc80 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cb86:	4812      	ldr	r0, [pc, #72]	; (1cbd0 <z_set_timeout_expiry+0x84>)
   1cb88:	f7fd fb18 	bl	1a1bc <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   1cb8c:	f7ff fe2e 	bl	1c7ec <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1cb90:	2801      	cmp	r0, #1
   1cb92:	dd05      	ble.n	1cba0 <z_set_timeout_expiry+0x54>
   1cb94:	42a0      	cmp	r0, r4
   1cb96:	db03      	blt.n	1cba0 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1cb98:	4629      	mov	r1, r5
   1cb9a:	4620      	mov	r0, r4
   1cb9c:	f7fb fe72 	bl	18884 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cba0:	480b      	ldr	r0, [pc, #44]	; (1cbd0 <z_set_timeout_expiry+0x84>)
   1cba2:	f7fd fafb 	bl	1a19c <z_spin_unlock_valid>
   1cba6:	b968      	cbnz	r0, 1cbc4 <z_set_timeout_expiry+0x78>
   1cba8:	4a0a      	ldr	r2, [pc, #40]	; (1cbd4 <z_set_timeout_expiry+0x88>)
   1cbaa:	490e      	ldr	r1, [pc, #56]	; (1cbe4 <z_set_timeout_expiry+0x98>)
   1cbac:	480b      	ldr	r0, [pc, #44]	; (1cbdc <z_set_timeout_expiry+0x90>)
   1cbae:	23ac      	movs	r3, #172	; 0xac
   1cbb0:	f003 fa0f 	bl	1ffd2 <printk>
   1cbb4:	4906      	ldr	r1, [pc, #24]	; (1cbd0 <z_set_timeout_expiry+0x84>)
   1cbb6:	480c      	ldr	r0, [pc, #48]	; (1cbe8 <z_set_timeout_expiry+0x9c>)
   1cbb8:	f003 fa0b 	bl	1ffd2 <printk>
   1cbbc:	4805      	ldr	r0, [pc, #20]	; (1cbd4 <z_set_timeout_expiry+0x88>)
   1cbbe:	21ac      	movs	r1, #172	; 0xac
   1cbc0:	f003 fc61 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1cbc4:	f386 8811 	msr	BASEPRI, r6
   1cbc8:	f3bf 8f6f 	isb	sy
		}
	}
}
   1cbcc:	bd70      	pop	{r4, r5, r6, pc}
   1cbce:	bf00      	nop
   1cbd0:	20002494 	.word	0x20002494
   1cbd4:	00023889 	.word	0x00023889
   1cbd8:	000238db 	.word	0x000238db
   1cbdc:	000237c9 	.word	0x000237c9
   1cbe0:	000238f0 	.word	0x000238f0
   1cbe4:	000238af 	.word	0x000238af
   1cbe8:	000238c6 	.word	0x000238c6

0001cbec <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   1cbec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbf0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1cbf2:	f7fe fe8f 	bl	1b914 <z_time_slice>
	__asm__ volatile(
   1cbf6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cbfa:	f3ef 8711 	mrs	r7, BASEPRI
   1cbfe:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cc06:	4855      	ldr	r0, [pc, #340]	; (1cd5c <sys_clock_announce+0x170>)
   1cc08:	f7fd faba 	bl	1a180 <z_spin_lock_valid>
   1cc0c:	b968      	cbnz	r0, 1cc2a <sys_clock_announce+0x3e>
   1cc0e:	4a54      	ldr	r2, [pc, #336]	; (1cd60 <sys_clock_announce+0x174>)
   1cc10:	4954      	ldr	r1, [pc, #336]	; (1cd64 <sys_clock_announce+0x178>)
   1cc12:	4855      	ldr	r0, [pc, #340]	; (1cd68 <sys_clock_announce+0x17c>)
   1cc14:	2381      	movs	r3, #129	; 0x81
   1cc16:	f003 f9dc 	bl	1ffd2 <printk>
   1cc1a:	4950      	ldr	r1, [pc, #320]	; (1cd5c <sys_clock_announce+0x170>)
   1cc1c:	4853      	ldr	r0, [pc, #332]	; (1cd6c <sys_clock_announce+0x180>)
   1cc1e:	f003 f9d8 	bl	1ffd2 <printk>
   1cc22:	484f      	ldr	r0, [pc, #316]	; (1cd60 <sys_clock_announce+0x174>)
   1cc24:	2181      	movs	r1, #129	; 0x81
   1cc26:	f003 fc2e 	bl	20486 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1cc2a:	4d51      	ldr	r5, [pc, #324]	; (1cd70 <sys_clock_announce+0x184>)
   1cc2c:	4e51      	ldr	r6, [pc, #324]	; (1cd74 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
   1cc2e:	484b      	ldr	r0, [pc, #300]	; (1cd5c <sys_clock_announce+0x170>)
	return list->head == list;
   1cc30:	f8df a14c 	ldr.w	sl, [pc, #332]	; 1cd80 <sys_clock_announce+0x194>
   1cc34:	f7fd fac2 	bl	1a1bc <z_spin_lock_set_owner>
   1cc38:	46b3      	mov	fp, r6
   1cc3a:	602c      	str	r4, [r5, #0]
   1cc3c:	e9d6 2300 	ldrd	r2, r3, [r6]
   1cc40:	f8d5 c000 	ldr.w	ip, [r5]
   1cc44:	f8da 4000 	ldr.w	r4, [sl]
   1cc48:	e9cd 2300 	strd	r2, r3, [sp]
   1cc4c:	4662      	mov	r2, ip
   1cc4e:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cc50:	4554      	cmp	r4, sl
   1cc52:	46e0      	mov	r8, ip
   1cc54:	4699      	mov	r9, r3
   1cc56:	d00c      	beq.n	1cc72 <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1cc58:	b15c      	cbz	r4, 1cc72 <sys_clock_announce+0x86>
   1cc5a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1cc5e:	458c      	cmp	ip, r1
   1cc60:	eb79 0302 	sbcs.w	r3, r9, r2
   1cc64:	da2e      	bge.n	1ccc4 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1cc66:	ebb1 000c 	subs.w	r0, r1, ip
   1cc6a:	eb62 0109 	sbc.w	r1, r2, r9
   1cc6e:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   1cc72:	9a00      	ldr	r2, [sp, #0]
   1cc74:	9901      	ldr	r1, [sp, #4]
   1cc76:	eb18 0202 	adds.w	r2, r8, r2
   1cc7a:	464b      	mov	r3, r9
   1cc7c:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
   1cc80:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1cc82:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   1cc86:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1cc88:	f7ff fdb0 	bl	1c7ec <next_timeout>
   1cc8c:	4621      	mov	r1, r4
   1cc8e:	f7fb fdf9 	bl	18884 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cc92:	4832      	ldr	r0, [pc, #200]	; (1cd5c <sys_clock_announce+0x170>)
   1cc94:	f7fd fa82 	bl	1a19c <z_spin_unlock_valid>
   1cc98:	b968      	cbnz	r0, 1ccb6 <sys_clock_announce+0xca>
   1cc9a:	4a31      	ldr	r2, [pc, #196]	; (1cd60 <sys_clock_announce+0x174>)
   1cc9c:	4936      	ldr	r1, [pc, #216]	; (1cd78 <sys_clock_announce+0x18c>)
   1cc9e:	4832      	ldr	r0, [pc, #200]	; (1cd68 <sys_clock_announce+0x17c>)
   1cca0:	23ac      	movs	r3, #172	; 0xac
   1cca2:	f003 f996 	bl	1ffd2 <printk>
   1cca6:	492d      	ldr	r1, [pc, #180]	; (1cd5c <sys_clock_announce+0x170>)
   1cca8:	4834      	ldr	r0, [pc, #208]	; (1cd7c <sys_clock_announce+0x190>)
   1ccaa:	f003 f992 	bl	1ffd2 <printk>
   1ccae:	482c      	ldr	r0, [pc, #176]	; (1cd60 <sys_clock_announce+0x174>)
   1ccb0:	21ac      	movs	r1, #172	; 0xac
   1ccb2:	f003 fbe8 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1ccb6:	f387 8811 	msr	BASEPRI, r7
   1ccba:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1ccbe:	b003      	add	sp, #12
   1ccc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1ccc4:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
   1ccc8:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   1cccc:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
   1ccd0:	f04f 0200 	mov.w	r2, #0
   1ccd4:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1ccd8:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   1ccdc:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   1ccde:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1cce2:	4620      	mov	r0, r4
		curr_tick += dt;
   1cce4:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   1cce8:	f7ff fdac 	bl	1c844 <remove_timeout>
   1ccec:	481b      	ldr	r0, [pc, #108]	; (1cd5c <sys_clock_announce+0x170>)
   1ccee:	f7fd fa55 	bl	1a19c <z_spin_unlock_valid>
   1ccf2:	b968      	cbnz	r0, 1cd10 <sys_clock_announce+0x124>
   1ccf4:	4a1a      	ldr	r2, [pc, #104]	; (1cd60 <sys_clock_announce+0x174>)
   1ccf6:	4920      	ldr	r1, [pc, #128]	; (1cd78 <sys_clock_announce+0x18c>)
   1ccf8:	481b      	ldr	r0, [pc, #108]	; (1cd68 <sys_clock_announce+0x17c>)
   1ccfa:	23ac      	movs	r3, #172	; 0xac
   1ccfc:	f003 f969 	bl	1ffd2 <printk>
   1cd00:	4916      	ldr	r1, [pc, #88]	; (1cd5c <sys_clock_announce+0x170>)
   1cd02:	481e      	ldr	r0, [pc, #120]	; (1cd7c <sys_clock_announce+0x190>)
   1cd04:	f003 f965 	bl	1ffd2 <printk>
   1cd08:	4815      	ldr	r0, [pc, #84]	; (1cd60 <sys_clock_announce+0x174>)
   1cd0a:	21ac      	movs	r1, #172	; 0xac
   1cd0c:	f003 fbbb 	bl	20486 <assert_post_action>
   1cd10:	f387 8811 	msr	BASEPRI, r7
   1cd14:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1cd18:	68a3      	ldr	r3, [r4, #8]
   1cd1a:	4620      	mov	r0, r4
   1cd1c:	4798      	blx	r3
	__asm__ volatile(
   1cd1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd22:	f3ef 8711 	mrs	r7, BASEPRI
   1cd26:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cd2e:	480b      	ldr	r0, [pc, #44]	; (1cd5c <sys_clock_announce+0x170>)
   1cd30:	f7fd fa26 	bl	1a180 <z_spin_lock_valid>
   1cd34:	b968      	cbnz	r0, 1cd52 <sys_clock_announce+0x166>
   1cd36:	4a0a      	ldr	r2, [pc, #40]	; (1cd60 <sys_clock_announce+0x174>)
   1cd38:	490a      	ldr	r1, [pc, #40]	; (1cd64 <sys_clock_announce+0x178>)
   1cd3a:	480b      	ldr	r0, [pc, #44]	; (1cd68 <sys_clock_announce+0x17c>)
   1cd3c:	2381      	movs	r3, #129	; 0x81
   1cd3e:	f003 f948 	bl	1ffd2 <printk>
   1cd42:	4906      	ldr	r1, [pc, #24]	; (1cd5c <sys_clock_announce+0x170>)
   1cd44:	4809      	ldr	r0, [pc, #36]	; (1cd6c <sys_clock_announce+0x180>)
   1cd46:	f003 f944 	bl	1ffd2 <printk>
   1cd4a:	4805      	ldr	r0, [pc, #20]	; (1cd60 <sys_clock_announce+0x174>)
   1cd4c:	2181      	movs	r1, #129	; 0x81
   1cd4e:	f003 fb9a 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cd52:	4802      	ldr	r0, [pc, #8]	; (1cd5c <sys_clock_announce+0x170>)
   1cd54:	f7fd fa32 	bl	1a1bc <z_spin_lock_set_owner>
	return k;
   1cd58:	e770      	b.n	1cc3c <sys_clock_announce+0x50>
   1cd5a:	bf00      	nop
   1cd5c:	20002494 	.word	0x20002494
   1cd60:	00023889 	.word	0x00023889
   1cd64:	000238db 	.word	0x000238db
   1cd68:	000237c9 	.word	0x000237c9
   1cd6c:	000238f0 	.word	0x000238f0
   1cd70:	20002490 	.word	0x20002490
   1cd74:	20001c78 	.word	0x20001c78
   1cd78:	000238af 	.word	0x000238af
   1cd7c:	000238c6 	.word	0x000238c6
   1cd80:	20000514 	.word	0x20000514

0001cd84 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1cd84:	b570      	push	{r4, r5, r6, lr}
   1cd86:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd8a:	f3ef 8611 	mrs	r6, BASEPRI
   1cd8e:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cd96:	481b      	ldr	r0, [pc, #108]	; (1ce04 <sys_clock_tick_get+0x80>)
   1cd98:	f7fd f9f2 	bl	1a180 <z_spin_lock_valid>
   1cd9c:	b968      	cbnz	r0, 1cdba <sys_clock_tick_get+0x36>
   1cd9e:	4a1a      	ldr	r2, [pc, #104]	; (1ce08 <sys_clock_tick_get+0x84>)
   1cda0:	491a      	ldr	r1, [pc, #104]	; (1ce0c <sys_clock_tick_get+0x88>)
   1cda2:	481b      	ldr	r0, [pc, #108]	; (1ce10 <sys_clock_tick_get+0x8c>)
   1cda4:	2381      	movs	r3, #129	; 0x81
   1cda6:	f003 f914 	bl	1ffd2 <printk>
   1cdaa:	4916      	ldr	r1, [pc, #88]	; (1ce04 <sys_clock_tick_get+0x80>)
   1cdac:	4819      	ldr	r0, [pc, #100]	; (1ce14 <sys_clock_tick_get+0x90>)
   1cdae:	f003 f910 	bl	1ffd2 <printk>
   1cdb2:	4815      	ldr	r0, [pc, #84]	; (1ce08 <sys_clock_tick_get+0x84>)
   1cdb4:	2181      	movs	r1, #129	; 0x81
   1cdb6:	f003 fb66 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cdba:	4812      	ldr	r0, [pc, #72]	; (1ce04 <sys_clock_tick_get+0x80>)
   1cdbc:	f7fd f9fe 	bl	1a1bc <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1cdc0:	f7fb fd90 	bl	188e4 <sys_clock_elapsed>
   1cdc4:	4b14      	ldr	r3, [pc, #80]	; (1ce18 <sys_clock_tick_get+0x94>)
   1cdc6:	e9d3 4500 	ldrd	r4, r5, [r3]
   1cdca:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cdcc:	480d      	ldr	r0, [pc, #52]	; (1ce04 <sys_clock_tick_get+0x80>)
   1cdce:	f145 0500 	adc.w	r5, r5, #0
   1cdd2:	f7fd f9e3 	bl	1a19c <z_spin_unlock_valid>
   1cdd6:	b968      	cbnz	r0, 1cdf4 <sys_clock_tick_get+0x70>
   1cdd8:	4a0b      	ldr	r2, [pc, #44]	; (1ce08 <sys_clock_tick_get+0x84>)
   1cdda:	4910      	ldr	r1, [pc, #64]	; (1ce1c <sys_clock_tick_get+0x98>)
   1cddc:	480c      	ldr	r0, [pc, #48]	; (1ce10 <sys_clock_tick_get+0x8c>)
   1cdde:	23ac      	movs	r3, #172	; 0xac
   1cde0:	f003 f8f7 	bl	1ffd2 <printk>
   1cde4:	4907      	ldr	r1, [pc, #28]	; (1ce04 <sys_clock_tick_get+0x80>)
   1cde6:	480e      	ldr	r0, [pc, #56]	; (1ce20 <sys_clock_tick_get+0x9c>)
   1cde8:	f003 f8f3 	bl	1ffd2 <printk>
   1cdec:	4806      	ldr	r0, [pc, #24]	; (1ce08 <sys_clock_tick_get+0x84>)
   1cdee:	21ac      	movs	r1, #172	; 0xac
   1cdf0:	f003 fb49 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1cdf4:	f386 8811 	msr	BASEPRI, r6
   1cdf8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1cdfc:	4620      	mov	r0, r4
   1cdfe:	4629      	mov	r1, r5
   1ce00:	bd70      	pop	{r4, r5, r6, pc}
   1ce02:	bf00      	nop
   1ce04:	20002494 	.word	0x20002494
   1ce08:	00023889 	.word	0x00023889
   1ce0c:	000238db 	.word	0x000238db
   1ce10:	000237c9 	.word	0x000237c9
   1ce14:	000238f0 	.word	0x000238f0
   1ce18:	20001c78 	.word	0x20001c78
   1ce1c:	000238af 	.word	0x000238af
   1ce20:	000238c6 	.word	0x000238c6

0001ce24 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   1ce24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ce28:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   1ce2a:	4d53      	ldr	r5, [pc, #332]	; (1cf78 <clear_event_registrations+0x154>)
   1ce2c:	f8df 918c 	ldr.w	r9, [pc, #396]	; 1cfbc <clear_event_registrations+0x198>
   1ce30:	4e52      	ldr	r6, [pc, #328]	; (1cf7c <clear_event_registrations+0x158>)
{
   1ce32:	4680      	mov	r8, r0
   1ce34:	4617      	mov	r7, r2
	while (num_events--) {
   1ce36:	fb04 0401 	mla	r4, r4, r1, r0
   1ce3a:	45a0      	cmp	r8, r4
   1ce3c:	d101      	bne.n	1ce42 <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   1ce3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   1ce42:	2300      	movs	r3, #0
   1ce44:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1ce48:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1ce4c:	f003 031f 	and.w	r3, r3, #31
   1ce50:	2b08      	cmp	r3, #8
   1ce52:	d84f      	bhi.n	1cef4 <clear_event_registrations+0xd0>
   1ce54:	e8df f003 	tbb	[pc, r3]
   1ce58:	4e05305b 	.word	0x4e05305b
   1ce5c:	4e4e4e21 	.word	0x4e4e4e21
   1ce60:	3f          	.byte	0x3f
   1ce61:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1ce62:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1ce66:	b963      	cbnz	r3, 1ce82 <clear_event_registrations+0x5e>
   1ce68:	4945      	ldr	r1, [pc, #276]	; (1cf80 <clear_event_registrations+0x15c>)
   1ce6a:	23a9      	movs	r3, #169	; 0xa9
   1ce6c:	462a      	mov	r2, r5
   1ce6e:	4630      	mov	r0, r6
   1ce70:	f003 f8af 	bl	1ffd2 <printk>
   1ce74:	4843      	ldr	r0, [pc, #268]	; (1cf84 <clear_event_registrations+0x160>)
   1ce76:	f003 f8ac 	bl	1ffd2 <printk>
   1ce7a:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1ce7c:	4628      	mov	r0, r5
   1ce7e:	f003 fb02 	bl	20486 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1ce82:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1ce86:	2b00      	cmp	r3, #0
   1ce88:	d041      	beq.n	1cf0e <clear_event_registrations+0xea>
	sys_dnode_t *const prev = node->prev;
   1ce8a:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   1ce8e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1ce90:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ce92:	2300      	movs	r3, #0
	node->prev = NULL;
   1ce94:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   1ce98:	e039      	b.n	1cf0e <clear_event_registrations+0xea>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1ce9a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1ce9e:	2b00      	cmp	r3, #0
   1cea0:	d1ef      	bne.n	1ce82 <clear_event_registrations+0x5e>
   1cea2:	4939      	ldr	r1, [pc, #228]	; (1cf88 <clear_event_registrations+0x164>)
   1cea4:	23ad      	movs	r3, #173	; 0xad
   1cea6:	462a      	mov	r2, r5
   1cea8:	4630      	mov	r0, r6
   1ceaa:	f003 f892 	bl	1ffd2 <printk>
   1ceae:	4837      	ldr	r0, [pc, #220]	; (1cf8c <clear_event_registrations+0x168>)
   1ceb0:	f003 f88f 	bl	1ffd2 <printk>
   1ceb4:	21ad      	movs	r1, #173	; 0xad
   1ceb6:	e7e1      	b.n	1ce7c <clear_event_registrations+0x58>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1ceb8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1cebc:	2b00      	cmp	r3, #0
   1cebe:	d1e0      	bne.n	1ce82 <clear_event_registrations+0x5e>
   1cec0:	4933      	ldr	r1, [pc, #204]	; (1cf90 <clear_event_registrations+0x16c>)
   1cec2:	23b1      	movs	r3, #177	; 0xb1
   1cec4:	462a      	mov	r2, r5
   1cec6:	4630      	mov	r0, r6
   1cec8:	f003 f883 	bl	1ffd2 <printk>
   1cecc:	4831      	ldr	r0, [pc, #196]	; (1cf94 <clear_event_registrations+0x170>)
   1cece:	f003 f880 	bl	1ffd2 <printk>
   1ced2:	21b1      	movs	r1, #177	; 0xb1
   1ced4:	e7d2      	b.n	1ce7c <clear_event_registrations+0x58>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1ced6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1ceda:	2b00      	cmp	r3, #0
   1cedc:	d1d1      	bne.n	1ce82 <clear_event_registrations+0x5e>
   1cede:	492e      	ldr	r1, [pc, #184]	; (1cf98 <clear_event_registrations+0x174>)
   1cee0:	23b5      	movs	r3, #181	; 0xb5
   1cee2:	462a      	mov	r2, r5
   1cee4:	4630      	mov	r0, r6
   1cee6:	f003 f874 	bl	1ffd2 <printk>
   1ceea:	482c      	ldr	r0, [pc, #176]	; (1cf9c <clear_event_registrations+0x178>)
   1ceec:	f003 f871 	bl	1ffd2 <printk>
   1cef0:	21b5      	movs	r1, #181	; 0xb5
   1cef2:	e7c3      	b.n	1ce7c <clear_event_registrations+0x58>
		__ASSERT(false, "invalid event type\n");
   1cef4:	4649      	mov	r1, r9
   1cef6:	23bc      	movs	r3, #188	; 0xbc
   1cef8:	462a      	mov	r2, r5
   1cefa:	4630      	mov	r0, r6
   1cefc:	f003 f869 	bl	1ffd2 <printk>
   1cf00:	4827      	ldr	r0, [pc, #156]	; (1cfa0 <clear_event_registrations+0x17c>)
   1cf02:	f003 f866 	bl	1ffd2 <printk>
   1cf06:	21bc      	movs	r1, #188	; 0xbc
   1cf08:	4628      	mov	r0, r5
   1cf0a:	f003 fabc 	bl	20486 <assert_post_action>
   1cf0e:	4825      	ldr	r0, [pc, #148]	; (1cfa4 <clear_event_registrations+0x180>)
   1cf10:	f7fd f944 	bl	1a19c <z_spin_unlock_valid>
   1cf14:	b968      	cbnz	r0, 1cf32 <clear_event_registrations+0x10e>
   1cf16:	4a24      	ldr	r2, [pc, #144]	; (1cfa8 <clear_event_registrations+0x184>)
   1cf18:	4924      	ldr	r1, [pc, #144]	; (1cfac <clear_event_registrations+0x188>)
   1cf1a:	23ac      	movs	r3, #172	; 0xac
   1cf1c:	4630      	mov	r0, r6
   1cf1e:	f003 f858 	bl	1ffd2 <printk>
   1cf22:	4920      	ldr	r1, [pc, #128]	; (1cfa4 <clear_event_registrations+0x180>)
   1cf24:	4822      	ldr	r0, [pc, #136]	; (1cfb0 <clear_event_registrations+0x18c>)
   1cf26:	f003 f854 	bl	1ffd2 <printk>
   1cf2a:	481f      	ldr	r0, [pc, #124]	; (1cfa8 <clear_event_registrations+0x184>)
   1cf2c:	21ac      	movs	r1, #172	; 0xac
   1cf2e:	f003 faaa 	bl	20486 <assert_post_action>
   1cf32:	f387 8811 	msr	BASEPRI, r7
   1cf36:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1cf3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cf3e:	f3ef 8711 	mrs	r7, BASEPRI
   1cf42:	f383 8812 	msr	BASEPRI_MAX, r3
   1cf46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cf4a:	4816      	ldr	r0, [pc, #88]	; (1cfa4 <clear_event_registrations+0x180>)
   1cf4c:	f7fd f918 	bl	1a180 <z_spin_lock_valid>
   1cf50:	b968      	cbnz	r0, 1cf6e <clear_event_registrations+0x14a>
   1cf52:	4a15      	ldr	r2, [pc, #84]	; (1cfa8 <clear_event_registrations+0x184>)
   1cf54:	4917      	ldr	r1, [pc, #92]	; (1cfb4 <clear_event_registrations+0x190>)
   1cf56:	2381      	movs	r3, #129	; 0x81
   1cf58:	4630      	mov	r0, r6
   1cf5a:	f003 f83a 	bl	1ffd2 <printk>
   1cf5e:	4911      	ldr	r1, [pc, #68]	; (1cfa4 <clear_event_registrations+0x180>)
   1cf60:	4815      	ldr	r0, [pc, #84]	; (1cfb8 <clear_event_registrations+0x194>)
   1cf62:	f003 f836 	bl	1ffd2 <printk>
   1cf66:	4810      	ldr	r0, [pc, #64]	; (1cfa8 <clear_event_registrations+0x184>)
   1cf68:	2181      	movs	r1, #129	; 0x81
   1cf6a:	f003 fa8c 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cf6e:	480d      	ldr	r0, [pc, #52]	; (1cfa4 <clear_event_registrations+0x180>)
   1cf70:	f7fd f924 	bl	1a1bc <z_spin_lock_set_owner>
	return k;
   1cf74:	3c14      	subs	r4, #20
   1cf76:	e760      	b.n	1ce3a <clear_event_registrations+0x16>
   1cf78:	000252b7 	.word	0x000252b7
   1cf7c:	000237c9 	.word	0x000237c9
   1cf80:	000252d8 	.word	0x000252d8
   1cf84:	000252f2 	.word	0x000252f2
   1cf88:	00025307 	.word	0x00025307
   1cf8c:	00025323 	.word	0x00025323
   1cf90:	00025334 	.word	0x00025334
   1cf94:	00025351 	.word	0x00025351
   1cf98:	00025368 	.word	0x00025368
   1cf9c:	00025383 	.word	0x00025383
   1cfa0:	0002539c 	.word	0x0002539c
   1cfa4:	20002498 	.word	0x20002498
   1cfa8:	00023889 	.word	0x00023889
   1cfac:	000238af 	.word	0x000238af
   1cfb0:	000238c6 	.word	0x000238c6
   1cfb4:	000238db 	.word	0x000238db
   1cfb8:	000238f0 	.word	0x000238f0
   1cfbc:	00025541 	.word	0x00025541

0001cfc0 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   1cfc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   1cfc4:	2700      	movs	r7, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cfc6:	4e7c      	ldr	r6, [pc, #496]	; (1d1b8 <register_events+0x1f8>)
   1cfc8:	f8df 8230 	ldr.w	r8, [pc, #560]	; 1d1fc <register_events+0x23c>
   1cfcc:	f8df a230 	ldr.w	sl, [pc, #560]	; 1d200 <register_events+0x240>
{
   1cfd0:	9100      	str	r1, [sp, #0]
   1cfd2:	4615      	mov	r5, r2
   1cfd4:	9301      	str	r3, [sp, #4]
   1cfd6:	4604      	mov	r4, r0
	int events_registered = 0;
   1cfd8:	46b9      	mov	r9, r7
	for (int ii = 0; ii < num_events; ii++) {
   1cfda:	9b00      	ldr	r3, [sp, #0]
   1cfdc:	429f      	cmp	r7, r3
   1cfde:	db03      	blt.n	1cfe8 <register_events+0x28>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   1cfe0:	4648      	mov	r0, r9
   1cfe2:	b003      	add	sp, #12
   1cfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfe8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cfec:	f3ef 8b11 	mrs	fp, BASEPRI
   1cff0:	f383 8812 	msr	BASEPRI_MAX, r3
   1cff4:	f3bf 8f6f 	isb	sy
   1cff8:	4630      	mov	r0, r6
   1cffa:	f7fd f8c1 	bl	1a180 <z_spin_lock_valid>
   1cffe:	b968      	cbnz	r0, 1d01c <register_events+0x5c>
   1d000:	486e      	ldr	r0, [pc, #440]	; (1d1bc <register_events+0x1fc>)
   1d002:	2381      	movs	r3, #129	; 0x81
   1d004:	4642      	mov	r2, r8
   1d006:	4651      	mov	r1, sl
   1d008:	f002 ffe3 	bl	1ffd2 <printk>
   1d00c:	486c      	ldr	r0, [pc, #432]	; (1d1c0 <register_events+0x200>)
   1d00e:	4631      	mov	r1, r6
   1d010:	f002 ffdf 	bl	1ffd2 <printk>
   1d014:	2181      	movs	r1, #129	; 0x81
   1d016:	4640      	mov	r0, r8
   1d018:	f003 fa35 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d01c:	4630      	mov	r0, r6
   1d01e:	f7fd f8cd 	bl	1a1bc <z_spin_lock_set_owner>
	switch (event->type) {
   1d022:	7b63      	ldrb	r3, [r4, #13]
   1d024:	f003 031f 	and.w	r3, r3, #31
   1d028:	2b08      	cmp	r3, #8
   1d02a:	d84f      	bhi.n	1d0cc <register_events+0x10c>
   1d02c:	e8df f003 	tbb	[pc, r3]
   1d030:	4e054230 	.word	0x4e054230
   1d034:	4e4e4e2c 	.word	0x4e4e4e2c
   1d038:	48          	.byte	0x48
   1d039:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1d03a:	6923      	ldr	r3, [r4, #16]
   1d03c:	689b      	ldr	r3, [r3, #8]
   1d03e:	b33b      	cbz	r3, 1d090 <register_events+0xd0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1d040:	2302      	movs	r3, #2
	event->state |= state;
   1d042:	68e2      	ldr	r2, [r4, #12]
   1d044:	f3c2 3045 	ubfx	r0, r2, #13, #6
   1d048:	4303      	orrs	r3, r0
	event->poller = NULL;
   1d04a:	2100      	movs	r1, #0
	event->state |= state;
   1d04c:	f363 3252 	bfi	r2, r3, #13, #6
	event->poller = NULL;
   1d050:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   1d052:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1d054:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d056:	4630      	mov	r0, r6
   1d058:	f7fd f8a0 	bl	1a19c <z_spin_unlock_valid>
   1d05c:	b968      	cbnz	r0, 1d07a <register_events+0xba>
   1d05e:	4959      	ldr	r1, [pc, #356]	; (1d1c4 <register_events+0x204>)
   1d060:	4856      	ldr	r0, [pc, #344]	; (1d1bc <register_events+0x1fc>)
   1d062:	23ac      	movs	r3, #172	; 0xac
   1d064:	4642      	mov	r2, r8
   1d066:	f002 ffb4 	bl	1ffd2 <printk>
   1d06a:	4857      	ldr	r0, [pc, #348]	; (1d1c8 <register_events+0x208>)
   1d06c:	4631      	mov	r1, r6
   1d06e:	f002 ffb0 	bl	1ffd2 <printk>
   1d072:	21ac      	movs	r1, #172	; 0xac
   1d074:	4640      	mov	r0, r8
   1d076:	f003 fa06 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1d07a:	f38b 8811 	msr	BASEPRI, fp
   1d07e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1d082:	3701      	adds	r7, #1
   1d084:	3414      	adds	r4, #20
   1d086:	e7a8      	b.n	1cfda <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   1d088:	6923      	ldr	r3, [r4, #16]
   1d08a:	681b      	ldr	r3, [r3, #0]
   1d08c:	2b00      	cmp	r3, #0
   1d08e:	d12e      	bne.n	1d0ee <register_events+0x12e>
		} else if (!just_check && poller->is_polling) {
   1d090:	9b01      	ldr	r3, [sp, #4]
   1d092:	2b00      	cmp	r3, #0
   1d094:	d1df      	bne.n	1d056 <register_events+0x96>
   1d096:	782b      	ldrb	r3, [r5, #0]
   1d098:	2b00      	cmp	r3, #0
   1d09a:	d0dc      	beq.n	1d056 <register_events+0x96>
	switch (event->type) {
   1d09c:	7b63      	ldrb	r3, [r4, #13]
   1d09e:	f003 031f 	and.w	r3, r3, #31
   1d0a2:	2b08      	cmp	r3, #8
   1d0a4:	d879      	bhi.n	1d19a <register_events+0x1da>
   1d0a6:	e8df f003 	tbb	[pc, r3]
   1d0aa:	5139      	.short	0x5139
   1d0ac:	783d7824 	.word	0x783d7824
   1d0b0:	7878      	.short	0x7878
   1d0b2:	64          	.byte	0x64
   1d0b3:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1d0b4:	6923      	ldr	r3, [r4, #16]
   1d0b6:	689b      	ldr	r3, [r3, #8]
   1d0b8:	2b00      	cmp	r3, #0
   1d0ba:	d0e9      	beq.n	1d090 <register_events+0xd0>
			*state = K_POLL_STATE_SIGNALED;
   1d0bc:	2301      	movs	r3, #1
   1d0be:	e7c0      	b.n	1d042 <register_events+0x82>
		if (event->msgq->used_msgs > 0) {
   1d0c0:	6923      	ldr	r3, [r4, #16]
   1d0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d0c4:	2b00      	cmp	r3, #0
   1d0c6:	d0e3      	beq.n	1d090 <register_events+0xd0>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1d0c8:	2310      	movs	r3, #16
   1d0ca:	e7ba      	b.n	1d042 <register_events+0x82>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1d0cc:	4a3f      	ldr	r2, [pc, #252]	; (1d1cc <register_events+0x20c>)
   1d0ce:	4940      	ldr	r1, [pc, #256]	; (1d1d0 <register_events+0x210>)
   1d0d0:	483a      	ldr	r0, [pc, #232]	; (1d1bc <register_events+0x1fc>)
   1d0d2:	235c      	movs	r3, #92	; 0x5c
   1d0d4:	f002 ff7d 	bl	1ffd2 <printk>
   1d0d8:	7b61      	ldrb	r1, [r4, #13]
   1d0da:	483e      	ldr	r0, [pc, #248]	; (1d1d4 <register_events+0x214>)
   1d0dc:	f001 011f 	and.w	r1, r1, #31
   1d0e0:	f002 ff77 	bl	1ffd2 <printk>
   1d0e4:	4839      	ldr	r0, [pc, #228]	; (1d1cc <register_events+0x20c>)
   1d0e6:	215c      	movs	r1, #92	; 0x5c
   1d0e8:	f003 f9cd 	bl	20486 <assert_post_action>
		break;
   1d0ec:	e7d0      	b.n	1d090 <register_events+0xd0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1d0ee:	2304      	movs	r3, #4
   1d0f0:	e7a7      	b.n	1d042 <register_events+0x82>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1d0f2:	6923      	ldr	r3, [r4, #16]
   1d0f4:	b963      	cbnz	r3, 1d110 <register_events+0x150>
   1d0f6:	4938      	ldr	r1, [pc, #224]	; (1d1d8 <register_events+0x218>)
   1d0f8:	4a34      	ldr	r2, [pc, #208]	; (1d1cc <register_events+0x20c>)
   1d0fa:	4830      	ldr	r0, [pc, #192]	; (1d1bc <register_events+0x1fc>)
   1d0fc:	2386      	movs	r3, #134	; 0x86
   1d0fe:	f002 ff68 	bl	1ffd2 <printk>
   1d102:	4836      	ldr	r0, [pc, #216]	; (1d1dc <register_events+0x21c>)
   1d104:	f002 ff65 	bl	1ffd2 <printk>
   1d108:	4830      	ldr	r0, [pc, #192]	; (1d1cc <register_events+0x20c>)
   1d10a:	2186      	movs	r1, #134	; 0x86
   1d10c:	f003 f9bb 	bl	20486 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   1d110:	6920      	ldr	r0, [r4, #16]
   1d112:	462a      	mov	r2, r5
   1d114:	4621      	mov	r1, r4
   1d116:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   1d118:	f005 fd45 	bl	22ba6 <add_event>
	event->poller = poller;
   1d11c:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   1d11e:	f109 0901 	add.w	r9, r9, #1
   1d122:	e798      	b.n	1d056 <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1d124:	6923      	ldr	r3, [r4, #16]
   1d126:	b963      	cbnz	r3, 1d142 <register_events+0x182>
   1d128:	492d      	ldr	r1, [pc, #180]	; (1d1e0 <register_events+0x220>)
   1d12a:	4a28      	ldr	r2, [pc, #160]	; (1d1cc <register_events+0x20c>)
   1d12c:	4823      	ldr	r0, [pc, #140]	; (1d1bc <register_events+0x1fc>)
   1d12e:	238a      	movs	r3, #138	; 0x8a
   1d130:	f002 ff4f 	bl	1ffd2 <printk>
   1d134:	482b      	ldr	r0, [pc, #172]	; (1d1e4 <register_events+0x224>)
   1d136:	f002 ff4c 	bl	1ffd2 <printk>
   1d13a:	4824      	ldr	r0, [pc, #144]	; (1d1cc <register_events+0x20c>)
   1d13c:	218a      	movs	r1, #138	; 0x8a
   1d13e:	f003 f9a2 	bl	20486 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   1d142:	6920      	ldr	r0, [r4, #16]
   1d144:	462a      	mov	r2, r5
   1d146:	4621      	mov	r1, r4
   1d148:	3014      	adds	r0, #20
   1d14a:	e7e5      	b.n	1d118 <register_events+0x158>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1d14c:	6923      	ldr	r3, [r4, #16]
   1d14e:	b963      	cbnz	r3, 1d16a <register_events+0x1aa>
   1d150:	4925      	ldr	r1, [pc, #148]	; (1d1e8 <register_events+0x228>)
   1d152:	4a1e      	ldr	r2, [pc, #120]	; (1d1cc <register_events+0x20c>)
   1d154:	4819      	ldr	r0, [pc, #100]	; (1d1bc <register_events+0x1fc>)
   1d156:	238e      	movs	r3, #142	; 0x8e
   1d158:	f002 ff3b 	bl	1ffd2 <printk>
   1d15c:	4823      	ldr	r0, [pc, #140]	; (1d1ec <register_events+0x22c>)
   1d15e:	f002 ff38 	bl	1ffd2 <printk>
   1d162:	481a      	ldr	r0, [pc, #104]	; (1d1cc <register_events+0x20c>)
   1d164:	218e      	movs	r1, #142	; 0x8e
   1d166:	f003 f98e 	bl	20486 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   1d16a:	6920      	ldr	r0, [r4, #16]
   1d16c:	462a      	mov	r2, r5
   1d16e:	4621      	mov	r1, r4
   1d170:	e7d2      	b.n	1d118 <register_events+0x158>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1d172:	6923      	ldr	r3, [r4, #16]
   1d174:	b963      	cbnz	r3, 1d190 <register_events+0x1d0>
   1d176:	491e      	ldr	r1, [pc, #120]	; (1d1f0 <register_events+0x230>)
   1d178:	4a14      	ldr	r2, [pc, #80]	; (1d1cc <register_events+0x20c>)
   1d17a:	4810      	ldr	r0, [pc, #64]	; (1d1bc <register_events+0x1fc>)
   1d17c:	2392      	movs	r3, #146	; 0x92
   1d17e:	f002 ff28 	bl	1ffd2 <printk>
   1d182:	481c      	ldr	r0, [pc, #112]	; (1d1f4 <register_events+0x234>)
   1d184:	f002 ff25 	bl	1ffd2 <printk>
   1d188:	4810      	ldr	r0, [pc, #64]	; (1d1cc <register_events+0x20c>)
   1d18a:	2192      	movs	r1, #146	; 0x92
   1d18c:	f003 f97b 	bl	20486 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   1d190:	6920      	ldr	r0, [r4, #16]
   1d192:	462a      	mov	r2, r5
   1d194:	4621      	mov	r1, r4
   1d196:	3028      	adds	r0, #40	; 0x28
   1d198:	e7be      	b.n	1d118 <register_events+0x158>
		__ASSERT(false, "invalid event type\n");
   1d19a:	4a0c      	ldr	r2, [pc, #48]	; (1d1cc <register_events+0x20c>)
   1d19c:	490c      	ldr	r1, [pc, #48]	; (1d1d0 <register_events+0x210>)
   1d19e:	4807      	ldr	r0, [pc, #28]	; (1d1bc <register_events+0x1fc>)
   1d1a0:	2399      	movs	r3, #153	; 0x99
   1d1a2:	f002 ff16 	bl	1ffd2 <printk>
   1d1a6:	4814      	ldr	r0, [pc, #80]	; (1d1f8 <register_events+0x238>)
   1d1a8:	f002 ff13 	bl	1ffd2 <printk>
   1d1ac:	4807      	ldr	r0, [pc, #28]	; (1d1cc <register_events+0x20c>)
   1d1ae:	2199      	movs	r1, #153	; 0x99
   1d1b0:	f003 f969 	bl	20486 <assert_post_action>
		break;
   1d1b4:	e7b2      	b.n	1d11c <register_events+0x15c>
   1d1b6:	bf00      	nop
   1d1b8:	20002498 	.word	0x20002498
   1d1bc:	000237c9 	.word	0x000237c9
   1d1c0:	000238f0 	.word	0x000238f0
   1d1c4:	000238af 	.word	0x000238af
   1d1c8:	000238c6 	.word	0x000238c6
   1d1cc:	000252b7 	.word	0x000252b7
   1d1d0:	00025541 	.word	0x00025541
   1d1d4:	000253b2 	.word	0x000253b2
   1d1d8:	000252d8 	.word	0x000252d8
   1d1dc:	000252f2 	.word	0x000252f2
   1d1e0:	00025307 	.word	0x00025307
   1d1e4:	00025323 	.word	0x00025323
   1d1e8:	00025334 	.word	0x00025334
   1d1ec:	00025351 	.word	0x00025351
   1d1f0:	00025368 	.word	0x00025368
   1d1f4:	00025383 	.word	0x00025383
   1d1f8:	0002539c 	.word	0x0002539c
   1d1fc:	00023889 	.word	0x00023889
   1d200:	000238db 	.word	0x000238db

0001d204 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   1d204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1d208:	6884      	ldr	r4, [r0, #8]
{
   1d20a:	4605      	mov	r5, r0
   1d20c:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
   1d20e:	b1d4      	cbz	r4, 1d246 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
   1d210:	7863      	ldrb	r3, [r4, #1]
   1d212:	2b01      	cmp	r3, #1
   1d214:	d14b      	bne.n	1d2ae <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   1d216:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
   1d21a:	d10e      	bne.n	1d23a <signal_poll_event+0x36>
   1d21c:	4a30      	ldr	r2, [pc, #192]	; (1d2e0 <signal_poll_event+0xdc>)
   1d21e:	4931      	ldr	r1, [pc, #196]	; (1d2e4 <signal_poll_event+0xe0>)
   1d220:	4831      	ldr	r0, [pc, #196]	; (1d2e8 <signal_poll_event+0xe4>)
   1d222:	23f9      	movs	r3, #249	; 0xf9
   1d224:	f002 fed5 	bl	1ffd2 <printk>
   1d228:	4830      	ldr	r0, [pc, #192]	; (1d2ec <signal_poll_event+0xe8>)
   1d22a:	f002 fed2 	bl	1ffd2 <printk>
   1d22e:	482c      	ldr	r0, [pc, #176]	; (1d2e0 <signal_poll_event+0xdc>)
   1d230:	21f9      	movs	r1, #249	; 0xf9
   1d232:	f003 f928 	bl	20486 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   1d236:	7b7b      	ldrb	r3, [r7, #13]
   1d238:	deff      	udf	#255	; 0xff
   1d23a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1d23e:	f013 0302 	ands.w	r3, r3, #2
   1d242:	d10a      	bne.n	1d25a <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
   1d244:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1d246:	68eb      	ldr	r3, [r5, #12]
   1d248:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1d24c:	430e      	orrs	r6, r1
	event->poller = NULL;
   1d24e:	2000      	movs	r0, #0
	event->state |= state;
   1d250:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1d254:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1d256:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1d258:	e00d      	b.n	1d276 <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
   1d25a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1d25e:	f04f 31ff 	mov.w	r1, #4294967295
   1d262:	f06f 0001 	mvn.w	r0, #1
   1d266:	428b      	cmp	r3, r1
   1d268:	bf08      	it	eq
   1d26a:	4282      	cmpeq	r2, r0
   1d26c:	d105      	bne.n	1d27a <signal_poll_event+0x76>
		poller->is_polling = false;
   1d26e:	2300      	movs	r3, #0
   1d270:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1d272:	f06f 000a 	mvn.w	r0, #10
}
   1d276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   1d27a:	4638      	mov	r0, r7
   1d27c:	f7fe fa70 	bl	1b760 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1d280:	2e08      	cmp	r6, #8
   1d282:	bf0c      	ite	eq
   1d284:	f06f 0303 	mvneq.w	r3, #3
   1d288:	2300      	movne	r3, #0
   1d28a:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d28c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1d290:	06db      	lsls	r3, r3, #27
   1d292:	d104      	bne.n	1d29e <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
   1d294:	f854 8c48 	ldr.w	r8, [r4, #-72]
   1d298:	f1b8 0f00 	cmp.w	r8, #0
   1d29c:	d001      	beq.n	1d2a2 <signal_poll_event+0x9e>
		poller->is_polling = false;
   1d29e:	2300      	movs	r3, #0
   1d2a0:	e7d0      	b.n	1d244 <signal_poll_event+0x40>
	z_ready_thread(thread);
   1d2a2:	4638      	mov	r0, r7
   1d2a4:	f7fe fc00 	bl	1baa8 <z_ready_thread>
		poller->is_polling = false;
   1d2a8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1d2ac:	e7cb      	b.n	1d246 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
   1d2ae:	2b02      	cmp	r3, #2
   1d2b0:	d1f5      	bne.n	1d29e <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1d2b2:	7823      	ldrb	r3, [r4, #0]
   1d2b4:	2b00      	cmp	r3, #0
   1d2b6:	d0c6      	beq.n	1d246 <signal_poll_event+0x42>
   1d2b8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1d2bc:	b177      	cbz	r7, 1d2dc <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   1d2be:	f1a4 0914 	sub.w	r9, r4, #20
   1d2c2:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
   1d2c6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1d2ca:	f7ff fba9 	bl	1ca20 <z_abort_timeout>
		twork->poll_result = 0;
   1d2ce:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1d2d2:	4649      	mov	r1, r9
   1d2d4:	4638      	mov	r0, r7
   1d2d6:	f7fd fdcd 	bl	1ae74 <k_work_submit_to_queue>
   1d2da:	e7e5      	b.n	1d2a8 <signal_poll_event+0xa4>
		poller->is_polling = false;
   1d2dc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1d2de:	e7b2      	b.n	1d246 <signal_poll_event+0x42>
   1d2e0:	000252b7 	.word	0x000252b7
   1d2e4:	000253cf 	.word	0x000253cf
   1d2e8:	000237c9 	.word	0x000237c9
   1d2ec:	000253e5 	.word	0x000253e5

0001d2f0 <k_poll_event_init>:
{
   1d2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d2f2:	4605      	mov	r5, r0
   1d2f4:	460f      	mov	r7, r1
   1d2f6:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1d2f8:	4614      	mov	r4, r2
   1d2fa:	b162      	cbz	r2, 1d316 <k_poll_event_init+0x26>
   1d2fc:	491b      	ldr	r1, [pc, #108]	; (1d36c <k_poll_event_init+0x7c>)
   1d2fe:	4a1c      	ldr	r2, [pc, #112]	; (1d370 <k_poll_event_init+0x80>)
   1d300:	481c      	ldr	r0, [pc, #112]	; (1d374 <k_poll_event_init+0x84>)
   1d302:	232d      	movs	r3, #45	; 0x2d
   1d304:	f002 fe65 	bl	1ffd2 <printk>
   1d308:	481b      	ldr	r0, [pc, #108]	; (1d378 <k_poll_event_init+0x88>)
   1d30a:	f002 fe62 	bl	1ffd2 <printk>
   1d30e:	4818      	ldr	r0, [pc, #96]	; (1d370 <k_poll_event_init+0x80>)
   1d310:	212d      	movs	r1, #45	; 0x2d
   1d312:	f003 f8b8 	bl	20486 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1d316:	2f1f      	cmp	r7, #31
   1d318:	d90c      	bls.n	1d334 <k_poll_event_init+0x44>
   1d31a:	4918      	ldr	r1, [pc, #96]	; (1d37c <k_poll_event_init+0x8c>)
   1d31c:	4a14      	ldr	r2, [pc, #80]	; (1d370 <k_poll_event_init+0x80>)
   1d31e:	4815      	ldr	r0, [pc, #84]	; (1d374 <k_poll_event_init+0x84>)
   1d320:	232f      	movs	r3, #47	; 0x2f
   1d322:	f002 fe56 	bl	1ffd2 <printk>
   1d326:	4816      	ldr	r0, [pc, #88]	; (1d380 <k_poll_event_init+0x90>)
   1d328:	f002 fe53 	bl	1ffd2 <printk>
   1d32c:	4810      	ldr	r0, [pc, #64]	; (1d370 <k_poll_event_init+0x80>)
   1d32e:	212f      	movs	r1, #47	; 0x2f
   1d330:	f003 f8a9 	bl	20486 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   1d334:	b966      	cbnz	r6, 1d350 <k_poll_event_init+0x60>
   1d336:	4913      	ldr	r1, [pc, #76]	; (1d384 <k_poll_event_init+0x94>)
   1d338:	4a0d      	ldr	r2, [pc, #52]	; (1d370 <k_poll_event_init+0x80>)
   1d33a:	480e      	ldr	r0, [pc, #56]	; (1d374 <k_poll_event_init+0x84>)
   1d33c:	2330      	movs	r3, #48	; 0x30
   1d33e:	f002 fe48 	bl	1ffd2 <printk>
   1d342:	4811      	ldr	r0, [pc, #68]	; (1d388 <k_poll_event_init+0x98>)
   1d344:	f002 fe45 	bl	1ffd2 <printk>
   1d348:	4809      	ldr	r0, [pc, #36]	; (1d370 <k_poll_event_init+0x80>)
   1d34a:	2130      	movs	r1, #48	; 0x30
   1d34c:	f003 f89b 	bl	20486 <assert_post_action>
	event->poller = NULL;
   1d350:	2300      	movs	r3, #0
	event->type = type;
   1d352:	04e4      	lsls	r4, r4, #19
   1d354:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   1d356:	60ab      	str	r3, [r5, #8]
	event->type = type;
   1d358:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
   1d35c:	7b2b      	ldrb	r3, [r5, #12]
   1d35e:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   1d362:	433c      	orrs	r4, r7
   1d364:	431c      	orrs	r4, r3
	event->obj = obj;
   1d366:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   1d36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d36c:	00025404 	.word	0x00025404
   1d370:	000252b7 	.word	0x000252b7
   1d374:	000237c9 	.word	0x000237c9
   1d378:	00025424 	.word	0x00025424
   1d37c:	0002544a 	.word	0x0002544a
   1d380:	0002546e 	.word	0x0002546e
   1d384:	0002547e 	.word	0x0002547e
   1d388:	00025491 	.word	0x00025491

0001d38c <z_impl_k_poll>:
{
   1d38c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d390:	461f      	mov	r7, r3
	struct z_poller *poller = &_current->poller;
   1d392:	4b75      	ldr	r3, [pc, #468]	; (1d568 <z_impl_k_poll+0x1dc>)
   1d394:	689d      	ldr	r5, [r3, #8]
	poller->is_polling = true;
   1d396:	2301      	movs	r3, #1
{
   1d398:	4604      	mov	r4, r0
   1d39a:	4688      	mov	r8, r1
   1d39c:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   1d39e:	f105 0960 	add.w	r9, r5, #96	; 0x60
	poller->is_polling = true;
   1d3a2:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   1d3a6:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
   1d3aa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1d3ae:	b173      	cbz	r3, 1d3ce <z_impl_k_poll+0x42>
   1d3b0:	496e      	ldr	r1, [pc, #440]	; (1d56c <z_impl_k_poll+0x1e0>)
   1d3b2:	4a6f      	ldr	r2, [pc, #444]	; (1d570 <z_impl_k_poll+0x1e4>)
   1d3b4:	486f      	ldr	r0, [pc, #444]	; (1d574 <z_impl_k_poll+0x1e8>)
   1d3b6:	f44f 738d 	mov.w	r3, #282	; 0x11a
   1d3ba:	f002 fe0a 	bl	1ffd2 <printk>
   1d3be:	486e      	ldr	r0, [pc, #440]	; (1d578 <z_impl_k_poll+0x1ec>)
   1d3c0:	f002 fe07 	bl	1ffd2 <printk>
   1d3c4:	486a      	ldr	r0, [pc, #424]	; (1d570 <z_impl_k_poll+0x1e4>)
   1d3c6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1d3ca:	f003 f85c 	bl	20486 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   1d3ce:	b974      	cbnz	r4, 1d3ee <z_impl_k_poll+0x62>
   1d3d0:	496a      	ldr	r1, [pc, #424]	; (1d57c <z_impl_k_poll+0x1f0>)
   1d3d2:	4a67      	ldr	r2, [pc, #412]	; (1d570 <z_impl_k_poll+0x1e4>)
   1d3d4:	4867      	ldr	r0, [pc, #412]	; (1d574 <z_impl_k_poll+0x1e8>)
   1d3d6:	f240 131b 	movw	r3, #283	; 0x11b
   1d3da:	f002 fdfa 	bl	1ffd2 <printk>
   1d3de:	4868      	ldr	r0, [pc, #416]	; (1d580 <z_impl_k_poll+0x1f4>)
   1d3e0:	f002 fdf7 	bl	1ffd2 <printk>
   1d3e4:	4862      	ldr	r0, [pc, #392]	; (1d570 <z_impl_k_poll+0x1e4>)
   1d3e6:	f240 111b 	movw	r1, #283	; 0x11b
   1d3ea:	f003 f84c 	bl	20486 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1d3ee:	f1b8 0f00 	cmp.w	r8, #0
   1d3f2:	da0e      	bge.n	1d412 <z_impl_k_poll+0x86>
   1d3f4:	4963      	ldr	r1, [pc, #396]	; (1d584 <z_impl_k_poll+0x1f8>)
   1d3f6:	4a5e      	ldr	r2, [pc, #376]	; (1d570 <z_impl_k_poll+0x1e4>)
   1d3f8:	485e      	ldr	r0, [pc, #376]	; (1d574 <z_impl_k_poll+0x1e8>)
   1d3fa:	f44f 738e 	mov.w	r3, #284	; 0x11c
   1d3fe:	f002 fde8 	bl	1ffd2 <printk>
   1d402:	4861      	ldr	r0, [pc, #388]	; (1d588 <z_impl_k_poll+0x1fc>)
   1d404:	f002 fde5 	bl	1ffd2 <printk>
   1d408:	4859      	ldr	r0, [pc, #356]	; (1d570 <z_impl_k_poll+0x1e4>)
   1d40a:	f44f 718e 	mov.w	r1, #284	; 0x11c
   1d40e:	f003 f83a 	bl	20486 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   1d412:	ea56 0307 	orrs.w	r3, r6, r7
   1d416:	bf0c      	ite	eq
   1d418:	2301      	moveq	r3, #1
   1d41a:	2300      	movne	r3, #0
   1d41c:	4641      	mov	r1, r8
   1d41e:	464a      	mov	r2, r9
   1d420:	4620      	mov	r0, r4
   1d422:	f7ff fdcd 	bl	1cfc0 <register_events>
   1d426:	4680      	mov	r8, r0
	__asm__ volatile(
   1d428:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d42c:	f3ef 8911 	mrs	r9, BASEPRI
   1d430:	f383 8812 	msr	BASEPRI_MAX, r3
   1d434:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d438:	4854      	ldr	r0, [pc, #336]	; (1d58c <z_impl_k_poll+0x200>)
   1d43a:	f7fc fea1 	bl	1a180 <z_spin_lock_valid>
   1d43e:	b968      	cbnz	r0, 1d45c <z_impl_k_poll+0xd0>
   1d440:	4a53      	ldr	r2, [pc, #332]	; (1d590 <z_impl_k_poll+0x204>)
   1d442:	4954      	ldr	r1, [pc, #336]	; (1d594 <z_impl_k_poll+0x208>)
   1d444:	484b      	ldr	r0, [pc, #300]	; (1d574 <z_impl_k_poll+0x1e8>)
   1d446:	2381      	movs	r3, #129	; 0x81
   1d448:	f002 fdc3 	bl	1ffd2 <printk>
   1d44c:	494f      	ldr	r1, [pc, #316]	; (1d58c <z_impl_k_poll+0x200>)
   1d44e:	4852      	ldr	r0, [pc, #328]	; (1d598 <z_impl_k_poll+0x20c>)
   1d450:	f002 fdbf 	bl	1ffd2 <printk>
   1d454:	484e      	ldr	r0, [pc, #312]	; (1d590 <z_impl_k_poll+0x204>)
   1d456:	2181      	movs	r1, #129	; 0x81
   1d458:	f003 f815 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d45c:	484b      	ldr	r0, [pc, #300]	; (1d58c <z_impl_k_poll+0x200>)
   1d45e:	f7fc fead 	bl	1a1bc <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   1d462:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   1d466:	b9fb      	cbnz	r3, 1d4a8 <z_impl_k_poll+0x11c>
		clear_event_registrations(events, events_registered, key);
   1d468:	4620      	mov	r0, r4
   1d46a:	464a      	mov	r2, r9
   1d46c:	4641      	mov	r1, r8
   1d46e:	f7ff fcd9 	bl	1ce24 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d472:	4846      	ldr	r0, [pc, #280]	; (1d58c <z_impl_k_poll+0x200>)
   1d474:	f7fc fe92 	bl	1a19c <z_spin_unlock_valid>
   1d478:	b968      	cbnz	r0, 1d496 <z_impl_k_poll+0x10a>
   1d47a:	4a45      	ldr	r2, [pc, #276]	; (1d590 <z_impl_k_poll+0x204>)
   1d47c:	4947      	ldr	r1, [pc, #284]	; (1d59c <z_impl_k_poll+0x210>)
   1d47e:	483d      	ldr	r0, [pc, #244]	; (1d574 <z_impl_k_poll+0x1e8>)
   1d480:	23ac      	movs	r3, #172	; 0xac
   1d482:	f002 fda6 	bl	1ffd2 <printk>
   1d486:	4941      	ldr	r1, [pc, #260]	; (1d58c <z_impl_k_poll+0x200>)
   1d488:	4845      	ldr	r0, [pc, #276]	; (1d5a0 <z_impl_k_poll+0x214>)
   1d48a:	f002 fda2 	bl	1ffd2 <printk>
   1d48e:	4840      	ldr	r0, [pc, #256]	; (1d590 <z_impl_k_poll+0x204>)
   1d490:	21ac      	movs	r1, #172	; 0xac
   1d492:	f002 fff8 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1d496:	f389 8811 	msr	BASEPRI, r9
   1d49a:	f3bf 8f6f 	isb	sy
		return 0;
   1d49e:	2500      	movs	r5, #0
}
   1d4a0:	4628      	mov	r0, r5
   1d4a2:	b003      	add	sp, #12
   1d4a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   1d4a8:	2300      	movs	r3, #0
   1d4aa:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d4ae:	ea56 0307 	orrs.w	r3, r6, r7
   1d4b2:	d118      	bne.n	1d4e6 <z_impl_k_poll+0x15a>
   1d4b4:	4835      	ldr	r0, [pc, #212]	; (1d58c <z_impl_k_poll+0x200>)
   1d4b6:	f7fc fe71 	bl	1a19c <z_spin_unlock_valid>
   1d4ba:	b968      	cbnz	r0, 1d4d8 <z_impl_k_poll+0x14c>
   1d4bc:	4a34      	ldr	r2, [pc, #208]	; (1d590 <z_impl_k_poll+0x204>)
   1d4be:	4937      	ldr	r1, [pc, #220]	; (1d59c <z_impl_k_poll+0x210>)
   1d4c0:	482c      	ldr	r0, [pc, #176]	; (1d574 <z_impl_k_poll+0x1e8>)
   1d4c2:	23ac      	movs	r3, #172	; 0xac
   1d4c4:	f002 fd85 	bl	1ffd2 <printk>
   1d4c8:	4930      	ldr	r1, [pc, #192]	; (1d58c <z_impl_k_poll+0x200>)
   1d4ca:	4835      	ldr	r0, [pc, #212]	; (1d5a0 <z_impl_k_poll+0x214>)
   1d4cc:	f002 fd81 	bl	1ffd2 <printk>
   1d4d0:	482f      	ldr	r0, [pc, #188]	; (1d590 <z_impl_k_poll+0x204>)
   1d4d2:	21ac      	movs	r1, #172	; 0xac
   1d4d4:	f002 ffd7 	bl	20486 <assert_post_action>
   1d4d8:	f389 8811 	msr	BASEPRI, r9
   1d4dc:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1d4e0:	f06f 050a 	mvn.w	r5, #10
   1d4e4:	e7dc      	b.n	1d4a0 <z_impl_k_poll+0x114>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1d4e6:	e9cd 6700 	strd	r6, r7, [sp]
   1d4ea:	4a2e      	ldr	r2, [pc, #184]	; (1d5a4 <z_impl_k_poll+0x218>)
   1d4ec:	4827      	ldr	r0, [pc, #156]	; (1d58c <z_impl_k_poll+0x200>)
   1d4ee:	4649      	mov	r1, r9
   1d4f0:	f7fe fc8c 	bl	1be0c <z_pend_curr>
   1d4f4:	4605      	mov	r5, r0
	__asm__ volatile(
   1d4f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d4fa:	f3ef 8611 	mrs	r6, BASEPRI
   1d4fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1d502:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d506:	4821      	ldr	r0, [pc, #132]	; (1d58c <z_impl_k_poll+0x200>)
   1d508:	f7fc fe3a 	bl	1a180 <z_spin_lock_valid>
   1d50c:	b968      	cbnz	r0, 1d52a <z_impl_k_poll+0x19e>
   1d50e:	4a20      	ldr	r2, [pc, #128]	; (1d590 <z_impl_k_poll+0x204>)
   1d510:	4920      	ldr	r1, [pc, #128]	; (1d594 <z_impl_k_poll+0x208>)
   1d512:	4818      	ldr	r0, [pc, #96]	; (1d574 <z_impl_k_poll+0x1e8>)
   1d514:	2381      	movs	r3, #129	; 0x81
   1d516:	f002 fd5c 	bl	1ffd2 <printk>
   1d51a:	491c      	ldr	r1, [pc, #112]	; (1d58c <z_impl_k_poll+0x200>)
   1d51c:	481e      	ldr	r0, [pc, #120]	; (1d598 <z_impl_k_poll+0x20c>)
   1d51e:	f002 fd58 	bl	1ffd2 <printk>
   1d522:	481b      	ldr	r0, [pc, #108]	; (1d590 <z_impl_k_poll+0x204>)
   1d524:	2181      	movs	r1, #129	; 0x81
   1d526:	f002 ffae 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d52a:	4818      	ldr	r0, [pc, #96]	; (1d58c <z_impl_k_poll+0x200>)
   1d52c:	f7fc fe46 	bl	1a1bc <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1d530:	4620      	mov	r0, r4
   1d532:	4632      	mov	r2, r6
   1d534:	4641      	mov	r1, r8
   1d536:	f7ff fc75 	bl	1ce24 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d53a:	4814      	ldr	r0, [pc, #80]	; (1d58c <z_impl_k_poll+0x200>)
   1d53c:	f7fc fe2e 	bl	1a19c <z_spin_unlock_valid>
   1d540:	b968      	cbnz	r0, 1d55e <z_impl_k_poll+0x1d2>
   1d542:	4a13      	ldr	r2, [pc, #76]	; (1d590 <z_impl_k_poll+0x204>)
   1d544:	4915      	ldr	r1, [pc, #84]	; (1d59c <z_impl_k_poll+0x210>)
   1d546:	480b      	ldr	r0, [pc, #44]	; (1d574 <z_impl_k_poll+0x1e8>)
   1d548:	23ac      	movs	r3, #172	; 0xac
   1d54a:	f002 fd42 	bl	1ffd2 <printk>
   1d54e:	490f      	ldr	r1, [pc, #60]	; (1d58c <z_impl_k_poll+0x200>)
   1d550:	4813      	ldr	r0, [pc, #76]	; (1d5a0 <z_impl_k_poll+0x214>)
   1d552:	f002 fd3e 	bl	1ffd2 <printk>
   1d556:	480e      	ldr	r0, [pc, #56]	; (1d590 <z_impl_k_poll+0x204>)
   1d558:	21ac      	movs	r1, #172	; 0xac
   1d55a:	f002 ff94 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1d55e:	f386 8811 	msr	BASEPRI, r6
   1d562:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1d566:	e79b      	b.n	1d4a0 <z_impl_k_poll+0x114>
   1d568:	20002444 	.word	0x20002444
   1d56c:	00024e97 	.word	0x00024e97
   1d570:	000252b7 	.word	0x000252b7
   1d574:	000237c9 	.word	0x000237c9
   1d578:	000246b6 	.word	0x000246b6
   1d57c:	000254ab 	.word	0x000254ab
   1d580:	000254c1 	.word	0x000254c1
   1d584:	000254d0 	.word	0x000254d0
   1d588:	000254e0 	.word	0x000254e0
   1d58c:	20002498 	.word	0x20002498
   1d590:	00023889 	.word	0x00023889
   1d594:	000238db 	.word	0x000238db
   1d598:	000238f0 	.word	0x000238f0
   1d59c:	000238af 	.word	0x000238af
   1d5a0:	000238c6 	.word	0x000238c6
   1d5a4:	2000051c 	.word	0x2000051c

0001d5a8 <z_impl_k_poll_signal_raise>:
{
   1d5a8:	b570      	push	{r4, r5, r6, lr}
   1d5aa:	4604      	mov	r4, r0
   1d5ac:	460d      	mov	r5, r1
	__asm__ volatile(
   1d5ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d5b2:	f3ef 8611 	mrs	r6, BASEPRI
   1d5b6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d5ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d5be:	4821      	ldr	r0, [pc, #132]	; (1d644 <z_impl_k_poll_signal_raise+0x9c>)
   1d5c0:	f7fc fdde 	bl	1a180 <z_spin_lock_valid>
   1d5c4:	b968      	cbnz	r0, 1d5e2 <z_impl_k_poll_signal_raise+0x3a>
   1d5c6:	4a20      	ldr	r2, [pc, #128]	; (1d648 <z_impl_k_poll_signal_raise+0xa0>)
   1d5c8:	4920      	ldr	r1, [pc, #128]	; (1d64c <z_impl_k_poll_signal_raise+0xa4>)
   1d5ca:	4821      	ldr	r0, [pc, #132]	; (1d650 <z_impl_k_poll_signal_raise+0xa8>)
   1d5cc:	2381      	movs	r3, #129	; 0x81
   1d5ce:	f002 fd00 	bl	1ffd2 <printk>
   1d5d2:	491c      	ldr	r1, [pc, #112]	; (1d644 <z_impl_k_poll_signal_raise+0x9c>)
   1d5d4:	481f      	ldr	r0, [pc, #124]	; (1d654 <z_impl_k_poll_signal_raise+0xac>)
   1d5d6:	f002 fcfc 	bl	1ffd2 <printk>
   1d5da:	481b      	ldr	r0, [pc, #108]	; (1d648 <z_impl_k_poll_signal_raise+0xa0>)
   1d5dc:	2181      	movs	r1, #129	; 0x81
   1d5de:	f002 ff52 	bl	20486 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d5e2:	4818      	ldr	r0, [pc, #96]	; (1d644 <z_impl_k_poll_signal_raise+0x9c>)
   1d5e4:	f7fc fdea 	bl	1a1bc <z_spin_lock_set_owner>
	return list->head == list;
   1d5e8:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   1d5ea:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   1d5ec:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1d5ee:	4284      	cmp	r4, r0
   1d5f0:	60a1      	str	r1, [r4, #8]
   1d5f2:	d117      	bne.n	1d624 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d5f4:	4813      	ldr	r0, [pc, #76]	; (1d644 <z_impl_k_poll_signal_raise+0x9c>)
   1d5f6:	f7fc fdd1 	bl	1a19c <z_spin_unlock_valid>
   1d5fa:	b968      	cbnz	r0, 1d618 <z_impl_k_poll_signal_raise+0x70>
   1d5fc:	4a12      	ldr	r2, [pc, #72]	; (1d648 <z_impl_k_poll_signal_raise+0xa0>)
   1d5fe:	4916      	ldr	r1, [pc, #88]	; (1d658 <z_impl_k_poll_signal_raise+0xb0>)
   1d600:	4813      	ldr	r0, [pc, #76]	; (1d650 <z_impl_k_poll_signal_raise+0xa8>)
   1d602:	23ac      	movs	r3, #172	; 0xac
   1d604:	f002 fce5 	bl	1ffd2 <printk>
   1d608:	490e      	ldr	r1, [pc, #56]	; (1d644 <z_impl_k_poll_signal_raise+0x9c>)
   1d60a:	4814      	ldr	r0, [pc, #80]	; (1d65c <z_impl_k_poll_signal_raise+0xb4>)
   1d60c:	f002 fce1 	bl	1ffd2 <printk>
   1d610:	480d      	ldr	r0, [pc, #52]	; (1d648 <z_impl_k_poll_signal_raise+0xa0>)
   1d612:	21ac      	movs	r1, #172	; 0xac
   1d614:	f002 ff37 	bl	20486 <assert_post_action>
	__asm__ volatile(
   1d618:	f386 8811 	msr	BASEPRI, r6
   1d61c:	f3bf 8f6f 	isb	sy
		return 0;
   1d620:	2400      	movs	r4, #0
   1d622:	e00d      	b.n	1d640 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
   1d624:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1d628:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d62a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d62c:	2300      	movs	r3, #0
	node->prev = NULL;
   1d62e:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d632:	f7ff fde7 	bl	1d204 <signal_poll_event>
	z_reschedule(&lock, key);
   1d636:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d638:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1d63a:	4802      	ldr	r0, [pc, #8]	; (1d644 <z_impl_k_poll_signal_raise+0x9c>)
   1d63c:	f7fd ff94 	bl	1b568 <z_reschedule>
}
   1d640:	4620      	mov	r0, r4
   1d642:	bd70      	pop	{r4, r5, r6, pc}
   1d644:	20002498 	.word	0x20002498
   1d648:	00023889 	.word	0x00023889
   1d64c:	000238db 	.word	0x000238db
   1d650:	000237c9 	.word	0x000237c9
   1d654:	000238f0 	.word	0x000238f0
   1d658:	000238af 	.word	0x000238af
   1d65c:	000238c6 	.word	0x000238c6

0001d660 <z_heap_aligned_alloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   1d660:	2304      	movs	r3, #4
   1d662:	18d2      	adds	r2, r2, r3
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   1d664:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   1d668:	4606      	mov	r6, r0
   1d66a:	460d      	mov	r5, r1
   1d66c:	d20a      	bcs.n	1d684 <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1d66e:	f04f 0800 	mov.w	r8, #0
   1d672:	f04f 0900 	mov.w	r9, #0
   1d676:	e9cd 8900 	strd	r8, r9, [sp]
   1d67a:	4319      	orrs	r1, r3
   1d67c:	f7fc fa30 	bl	19ae0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1d680:	4604      	mov	r4, r0
   1d682:	b920      	cbnz	r0, 1d68e <z_heap_aligned_alloc+0x2e>
		return NULL;
   1d684:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   1d686:	4620      	mov	r0, r4
   1d688:	b002      	add	sp, #8
   1d68a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   1d68e:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   1d692:	2d00      	cmp	r5, #0
   1d694:	d0f7      	beq.n	1d686 <z_heap_aligned_alloc+0x26>
   1d696:	1e6b      	subs	r3, r5, #1
   1d698:	421c      	tst	r4, r3
   1d69a:	d0f4      	beq.n	1d686 <z_heap_aligned_alloc+0x26>
   1d69c:	2325      	movs	r3, #37	; 0x25
   1d69e:	4a07      	ldr	r2, [pc, #28]	; (1d6bc <z_heap_aligned_alloc+0x5c>)
   1d6a0:	4907      	ldr	r1, [pc, #28]	; (1d6c0 <z_heap_aligned_alloc+0x60>)
   1d6a2:	4808      	ldr	r0, [pc, #32]	; (1d6c4 <z_heap_aligned_alloc+0x64>)
   1d6a4:	f002 fc95 	bl	1ffd2 <printk>
   1d6a8:	4621      	mov	r1, r4
   1d6aa:	4807      	ldr	r0, [pc, #28]	; (1d6c8 <z_heap_aligned_alloc+0x68>)
   1d6ac:	462a      	mov	r2, r5
   1d6ae:	f002 fc90 	bl	1ffd2 <printk>
   1d6b2:	4802      	ldr	r0, [pc, #8]	; (1d6bc <z_heap_aligned_alloc+0x5c>)
   1d6b4:	2125      	movs	r1, #37	; 0x25
   1d6b6:	f002 fee6 	bl	20486 <assert_post_action>
   1d6ba:	e7e4      	b.n	1d686 <z_heap_aligned_alloc+0x26>
   1d6bc:	000254ed 	.word	0x000254ed
   1d6c0:	00025511 	.word	0x00025511
   1d6c4:	000237c9 	.word	0x000237c9
   1d6c8:	00025543 	.word	0x00025543

0001d6cc <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1d6cc:	b538      	push	{r3, r4, r5, lr}
   1d6ce:	4604      	mov	r4, r0
   1d6d0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1d6d2:	f005 f95f 	bl	22994 <k_is_in_isr>
   1d6d6:	b950      	cbnz	r0, 1d6ee <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1d6d8:	4b06      	ldr	r3, [pc, #24]	; (1d6f4 <z_thread_aligned_alloc+0x28>)
   1d6da:	689b      	ldr	r3, [r3, #8]
   1d6dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1d6de:	b143      	cbz	r3, 1d6f2 <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   1d6e0:	462a      	mov	r2, r5
   1d6e2:	4621      	mov	r1, r4
   1d6e4:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1d6e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1d6ea:	f7ff bfb9 	b.w	1d660 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   1d6ee:	4b02      	ldr	r3, [pc, #8]	; (1d6f8 <z_thread_aligned_alloc+0x2c>)
   1d6f0:	e7f6      	b.n	1d6e0 <z_thread_aligned_alloc+0x14>
}
   1d6f2:	bd38      	pop	{r3, r4, r5, pc}
   1d6f4:	20002444 	.word	0x20002444
   1d6f8:	2000065c 	.word	0x2000065c

0001d6fc <nrf_cc3xx_platform_init>:
   1d6fc:	b510      	push	{r4, lr}
   1d6fe:	4c0c      	ldr	r4, [pc, #48]	; (1d730 <nrf_cc3xx_platform_init+0x34>)
   1d700:	6823      	ldr	r3, [r4, #0]
   1d702:	b113      	cbz	r3, 1d70a <nrf_cc3xx_platform_init+0xe>
   1d704:	4b0b      	ldr	r3, [pc, #44]	; (1d734 <nrf_cc3xx_platform_init+0x38>)
   1d706:	681b      	ldr	r3, [r3, #0]
   1d708:	b92b      	cbnz	r3, 1d716 <nrf_cc3xx_platform_init+0x1a>
   1d70a:	f000 fabd 	bl	1dc88 <CC_LibInit>
   1d70e:	b930      	cbnz	r0, 1d71e <nrf_cc3xx_platform_init+0x22>
   1d710:	4b08      	ldr	r3, [pc, #32]	; (1d734 <nrf_cc3xx_platform_init+0x38>)
   1d712:	2201      	movs	r2, #1
   1d714:	601a      	str	r2, [r3, #0]
   1d716:	2301      	movs	r3, #1
   1d718:	6023      	str	r3, [r4, #0]
   1d71a:	2000      	movs	r0, #0
   1d71c:	bd10      	pop	{r4, pc}
   1d71e:	3801      	subs	r0, #1
   1d720:	2806      	cmp	r0, #6
   1d722:	d901      	bls.n	1d728 <nrf_cc3xx_platform_init+0x2c>
   1d724:	4804      	ldr	r0, [pc, #16]	; (1d738 <nrf_cc3xx_platform_init+0x3c>)
   1d726:	bd10      	pop	{r4, pc}
   1d728:	4b04      	ldr	r3, [pc, #16]	; (1d73c <nrf_cc3xx_platform_init+0x40>)
   1d72a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1d72e:	bd10      	pop	{r4, pc}
   1d730:	2000249c 	.word	0x2000249c
   1d734:	200024a0 	.word	0x200024a0
   1d738:	ffff8ffe 	.word	0xffff8ffe
   1d73c:	000234ac 	.word	0x000234ac

0001d740 <nrf_cc3xx_platform_abort>:
   1d740:	f3bf 8f4f 	dsb	sy
   1d744:	4905      	ldr	r1, [pc, #20]	; (1d75c <nrf_cc3xx_platform_abort+0x1c>)
   1d746:	4b06      	ldr	r3, [pc, #24]	; (1d760 <nrf_cc3xx_platform_abort+0x20>)
   1d748:	68ca      	ldr	r2, [r1, #12]
   1d74a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1d74e:	4313      	orrs	r3, r2
   1d750:	60cb      	str	r3, [r1, #12]
   1d752:	f3bf 8f4f 	dsb	sy
   1d756:	bf00      	nop
   1d758:	e7fd      	b.n	1d756 <nrf_cc3xx_platform_abort+0x16>
   1d75a:	bf00      	nop
   1d75c:	e000ed00 	.word	0xe000ed00
   1d760:	05fa0004 	.word	0x05fa0004

0001d764 <CC_PalAbort>:
   1d764:	b4f0      	push	{r4, r5, r6, r7}
   1d766:	4f09      	ldr	r7, [pc, #36]	; (1d78c <CC_PalAbort+0x28>)
   1d768:	4e09      	ldr	r6, [pc, #36]	; (1d790 <CC_PalAbort+0x2c>)
   1d76a:	4c0a      	ldr	r4, [pc, #40]	; (1d794 <CC_PalAbort+0x30>)
   1d76c:	4a0a      	ldr	r2, [pc, #40]	; (1d798 <CC_PalAbort+0x34>)
   1d76e:	4d0b      	ldr	r5, [pc, #44]	; (1d79c <CC_PalAbort+0x38>)
   1d770:	490b      	ldr	r1, [pc, #44]	; (1d7a0 <CC_PalAbort+0x3c>)
   1d772:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   1d776:	603b      	str	r3, [r7, #0]
   1d778:	6852      	ldr	r2, [r2, #4]
   1d77a:	6033      	str	r3, [r6, #0]
   1d77c:	6023      	str	r3, [r4, #0]
   1d77e:	2400      	movs	r4, #0
   1d780:	602b      	str	r3, [r5, #0]
   1d782:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   1d786:	bcf0      	pop	{r4, r5, r6, r7}
   1d788:	4710      	bx	r2
   1d78a:	bf00      	nop
   1d78c:	5002b400 	.word	0x5002b400
   1d790:	5002b404 	.word	0x5002b404
   1d794:	5002b408 	.word	0x5002b408
   1d798:	20000524 	.word	0x20000524
   1d79c:	5002b40c 	.word	0x5002b40c
   1d7a0:	5002a000 	.word	0x5002a000

0001d7a4 <nrf_cc3xx_platform_set_abort>:
   1d7a4:	e9d0 1200 	ldrd	r1, r2, [r0]
   1d7a8:	4b01      	ldr	r3, [pc, #4]	; (1d7b0 <nrf_cc3xx_platform_set_abort+0xc>)
   1d7aa:	e9c3 1200 	strd	r1, r2, [r3]
   1d7ae:	4770      	bx	lr
   1d7b0:	20000524 	.word	0x20000524

0001d7b4 <nrf_cc3xx_platform_ctr_drbg_init>:
   1d7b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d7b8:	4c15      	ldr	r4, [pc, #84]	; (1d810 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1d7ba:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1d818 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   1d7be:	2800      	cmp	r0, #0
   1d7c0:	bf18      	it	ne
   1d7c2:	4604      	movne	r4, r0
   1d7c4:	b083      	sub	sp, #12
   1d7c6:	6820      	ldr	r0, [r4, #0]
   1d7c8:	4540      	cmp	r0, r8
   1d7ca:	d01d      	beq.n	1d808 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   1d7cc:	460d      	mov	r5, r1
   1d7ce:	4620      	mov	r0, r4
   1d7d0:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1d7d4:	f104 0904 	add.w	r9, r4, #4
   1d7d8:	4616      	mov	r6, r2
   1d7da:	f504 778c 	add.w	r7, r4, #280	; 0x118
   1d7de:	f000 fe9f 	bl	1e520 <mbedtls_platform_zeroize>
   1d7e2:	4648      	mov	r0, r9
   1d7e4:	f000 f940 	bl	1da68 <cc_mbedtls_entropy_init>
   1d7e8:	4638      	mov	r0, r7
   1d7ea:	f001 fa75 	bl	1ecd8 <cc_mbedtls_ctr_drbg_init>
   1d7ee:	4909      	ldr	r1, [pc, #36]	; (1d814 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   1d7f0:	9600      	str	r6, [sp, #0]
   1d7f2:	464a      	mov	r2, r9
   1d7f4:	4638      	mov	r0, r7
   1d7f6:	462b      	mov	r3, r5
   1d7f8:	f001 fa80 	bl	1ecfc <cc_mbedtls_ctr_drbg_seed>
   1d7fc:	b908      	cbnz	r0, 1d802 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   1d7fe:	f8c4 8000 	str.w	r8, [r4]
   1d802:	b003      	add	sp, #12
   1d804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d808:	2000      	movs	r0, #0
   1d80a:	b003      	add	sp, #12
   1d80c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d810:	200032c4 	.word	0x200032c4
   1d814:	0001dae5 	.word	0x0001dae5
   1d818:	5ac9bca5 	.word	0x5ac9bca5

0001d81c <nrf_cc3xx_platform_ctr_drbg_get>:
   1d81c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d81e:	4c0d      	ldr	r4, [pc, #52]	; (1d854 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   1d820:	4e0d      	ldr	r6, [pc, #52]	; (1d858 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1d822:	2800      	cmp	r0, #0
   1d824:	bf08      	it	eq
   1d826:	4620      	moveq	r0, r4
   1d828:	b083      	sub	sp, #12
   1d82a:	6807      	ldr	r7, [r0, #0]
   1d82c:	42b7      	cmp	r7, r6
   1d82e:	d10e      	bne.n	1d84e <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   1d830:	2600      	movs	r6, #0
   1d832:	461d      	mov	r5, r3
   1d834:	f500 708c 	add.w	r0, r0, #280	; 0x118
   1d838:	9600      	str	r6, [sp, #0]
   1d83a:	4633      	mov	r3, r6
   1d83c:	4614      	mov	r4, r2
   1d83e:	f001 faad 	bl	1ed9c <cc_mbedtls_ctr_drbg_random_with_add>
   1d842:	2800      	cmp	r0, #0
   1d844:	bf18      	it	ne
   1d846:	4634      	movne	r4, r6
   1d848:	602c      	str	r4, [r5, #0]
   1d84a:	b003      	add	sp, #12
   1d84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d84e:	4803      	ldr	r0, [pc, #12]	; (1d85c <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1d850:	e7fb      	b.n	1d84a <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   1d852:	bf00      	nop
   1d854:	200032c4 	.word	0x200032c4
   1d858:	5ac9bca5 	.word	0x5ac9bca5
   1d85c:	ffff8fe8 	.word	0xffff8fe8

0001d860 <mutex_free>:
   1d860:	b510      	push	{r4, lr}
   1d862:	4604      	mov	r4, r0
   1d864:	b130      	cbz	r0, 1d874 <mutex_free+0x14>
   1d866:	6863      	ldr	r3, [r4, #4]
   1d868:	06db      	lsls	r3, r3, #27
   1d86a:	d502      	bpl.n	1d872 <mutex_free+0x12>
   1d86c:	2300      	movs	r3, #0
   1d86e:	6023      	str	r3, [r4, #0]
   1d870:	6063      	str	r3, [r4, #4]
   1d872:	bd10      	pop	{r4, pc}
   1d874:	4b02      	ldr	r3, [pc, #8]	; (1d880 <mutex_free+0x20>)
   1d876:	4803      	ldr	r0, [pc, #12]	; (1d884 <mutex_free+0x24>)
   1d878:	685b      	ldr	r3, [r3, #4]
   1d87a:	4798      	blx	r3
   1d87c:	e7f3      	b.n	1d866 <mutex_free+0x6>
   1d87e:	bf00      	nop
   1d880:	20000524 	.word	0x20000524
   1d884:	000234c8 	.word	0x000234c8

0001d888 <mutex_unlock>:
   1d888:	b168      	cbz	r0, 1d8a6 <mutex_unlock+0x1e>
   1d88a:	6843      	ldr	r3, [r0, #4]
   1d88c:	b13b      	cbz	r3, 1d89e <mutex_unlock+0x16>
   1d88e:	06db      	lsls	r3, r3, #27
   1d890:	d507      	bpl.n	1d8a2 <mutex_unlock+0x1a>
   1d892:	f3bf 8f5f 	dmb	sy
   1d896:	2300      	movs	r3, #0
   1d898:	6003      	str	r3, [r0, #0]
   1d89a:	4618      	mov	r0, r3
   1d89c:	4770      	bx	lr
   1d89e:	4803      	ldr	r0, [pc, #12]	; (1d8ac <mutex_unlock+0x24>)
   1d8a0:	4770      	bx	lr
   1d8a2:	4803      	ldr	r0, [pc, #12]	; (1d8b0 <mutex_unlock+0x28>)
   1d8a4:	4770      	bx	lr
   1d8a6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1d8aa:	4770      	bx	lr
   1d8ac:	ffff8fea 	.word	0xffff8fea
   1d8b0:	ffff8fe9 	.word	0xffff8fe9

0001d8b4 <mutex_init>:
   1d8b4:	b510      	push	{r4, lr}
   1d8b6:	4604      	mov	r4, r0
   1d8b8:	b120      	cbz	r0, 1d8c4 <mutex_init+0x10>
   1d8ba:	2200      	movs	r2, #0
   1d8bc:	2311      	movs	r3, #17
   1d8be:	6022      	str	r2, [r4, #0]
   1d8c0:	6063      	str	r3, [r4, #4]
   1d8c2:	bd10      	pop	{r4, pc}
   1d8c4:	4801      	ldr	r0, [pc, #4]	; (1d8cc <mutex_init+0x18>)
   1d8c6:	f7ff ff4d 	bl	1d764 <CC_PalAbort>
   1d8ca:	e7f6      	b.n	1d8ba <mutex_init+0x6>
   1d8cc:	000234f0 	.word	0x000234f0

0001d8d0 <mutex_lock>:
   1d8d0:	b1c0      	cbz	r0, 1d904 <mutex_lock+0x34>
   1d8d2:	6843      	ldr	r3, [r0, #4]
   1d8d4:	b1a3      	cbz	r3, 1d900 <mutex_lock+0x30>
   1d8d6:	06db      	lsls	r3, r3, #27
   1d8d8:	d510      	bpl.n	1d8fc <mutex_lock+0x2c>
   1d8da:	2201      	movs	r2, #1
   1d8dc:	f3bf 8f5b 	dmb	ish
   1d8e0:	e850 3f00 	ldrex	r3, [r0]
   1d8e4:	e840 2100 	strex	r1, r2, [r0]
   1d8e8:	2900      	cmp	r1, #0
   1d8ea:	d1f9      	bne.n	1d8e0 <mutex_lock+0x10>
   1d8ec:	f3bf 8f5b 	dmb	ish
   1d8f0:	2b01      	cmp	r3, #1
   1d8f2:	d0f3      	beq.n	1d8dc <mutex_lock+0xc>
   1d8f4:	f3bf 8f5f 	dmb	sy
   1d8f8:	2000      	movs	r0, #0
   1d8fa:	4770      	bx	lr
   1d8fc:	4803      	ldr	r0, [pc, #12]	; (1d90c <mutex_lock+0x3c>)
   1d8fe:	4770      	bx	lr
   1d900:	4803      	ldr	r0, [pc, #12]	; (1d910 <mutex_lock+0x40>)
   1d902:	4770      	bx	lr
   1d904:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1d908:	4770      	bx	lr
   1d90a:	bf00      	nop
   1d90c:	ffff8fe9 	.word	0xffff8fe9
   1d910:	ffff8fea 	.word	0xffff8fea

0001d914 <nrf_cc3xx_platform_set_mutexes>:
   1d914:	b570      	push	{r4, r5, r6, lr}
   1d916:	e9d0 2300 	ldrd	r2, r3, [r0]
   1d91a:	4c13      	ldr	r4, [pc, #76]	; (1d968 <nrf_cc3xx_platform_set_mutexes+0x54>)
   1d91c:	4d13      	ldr	r5, [pc, #76]	; (1d96c <nrf_cc3xx_platform_set_mutexes+0x58>)
   1d91e:	e9c4 2300 	strd	r2, r3, [r4]
   1d922:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   1d926:	e9c4 6302 	strd	r6, r3, [r4, #8]
   1d92a:	4b11      	ldr	r3, [pc, #68]	; (1d970 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1d92c:	6808      	ldr	r0, [r1, #0]
   1d92e:	6018      	str	r0, [r3, #0]
   1d930:	6848      	ldr	r0, [r1, #4]
   1d932:	6058      	str	r0, [r3, #4]
   1d934:	6888      	ldr	r0, [r1, #8]
   1d936:	6098      	str	r0, [r3, #8]
   1d938:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   1d93c:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   1d940:	60de      	str	r6, [r3, #12]
   1d942:	6118      	str	r0, [r3, #16]
   1d944:	06cb      	lsls	r3, r1, #27
   1d946:	d50d      	bpl.n	1d964 <nrf_cc3xx_platform_set_mutexes+0x50>
   1d948:	2300      	movs	r3, #0
   1d94a:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   1d94e:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   1d952:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1d956:	4790      	blx	r2
   1d958:	6823      	ldr	r3, [r4, #0]
   1d95a:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   1d95e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d962:	4718      	bx	r3
   1d964:	bd70      	pop	{r4, r5, r6, pc}
   1d966:	bf00      	nop
   1d968:	20000534 	.word	0x20000534
   1d96c:	200032c4 	.word	0x200032c4
   1d970:	20000544 	.word	0x20000544

0001d974 <entropy_update>:
   1d974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d978:	2b20      	cmp	r3, #32
   1d97a:	b08b      	sub	sp, #44	; 0x2c
   1d97c:	461d      	mov	r5, r3
   1d97e:	4606      	mov	r6, r0
   1d980:	4689      	mov	r9, r1
   1d982:	4690      	mov	r8, r2
   1d984:	d826      	bhi.n	1d9d4 <entropy_update+0x60>
   1d986:	b2db      	uxtb	r3, r3
   1d988:	af02      	add	r7, sp, #8
   1d98a:	6831      	ldr	r1, [r6, #0]
   1d98c:	f88d 9004 	strb.w	r9, [sp, #4]
   1d990:	f88d 3005 	strb.w	r3, [sp, #5]
   1d994:	f106 0904 	add.w	r9, r6, #4
   1d998:	b921      	cbnz	r1, 1d9a4 <entropy_update+0x30>
   1d99a:	4648      	mov	r0, r9
   1d99c:	f000 fe62 	bl	1e664 <cc_mbedtls_sha256_starts_ret>
   1d9a0:	4604      	mov	r4, r0
   1d9a2:	b940      	cbnz	r0, 1d9b6 <entropy_update+0x42>
   1d9a4:	2301      	movs	r3, #1
   1d9a6:	6033      	str	r3, [r6, #0]
   1d9a8:	2202      	movs	r2, #2
   1d9aa:	a901      	add	r1, sp, #4
   1d9ac:	4648      	mov	r0, r9
   1d9ae:	f000 fe6d 	bl	1e68c <cc_mbedtls_sha256_update_ret>
   1d9b2:	4604      	mov	r4, r0
   1d9b4:	b138      	cbz	r0, 1d9c6 <entropy_update+0x52>
   1d9b6:	4638      	mov	r0, r7
   1d9b8:	2120      	movs	r1, #32
   1d9ba:	f000 fdb1 	bl	1e520 <mbedtls_platform_zeroize>
   1d9be:	4620      	mov	r0, r4
   1d9c0:	b00b      	add	sp, #44	; 0x2c
   1d9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d9c6:	462a      	mov	r2, r5
   1d9c8:	4641      	mov	r1, r8
   1d9ca:	4648      	mov	r0, r9
   1d9cc:	f000 fe5e 	bl	1e68c <cc_mbedtls_sha256_update_ret>
   1d9d0:	4604      	mov	r4, r0
   1d9d2:	e7f0      	b.n	1d9b6 <entropy_update+0x42>
   1d9d4:	af02      	add	r7, sp, #8
   1d9d6:	4619      	mov	r1, r3
   1d9d8:	4610      	mov	r0, r2
   1d9da:	2300      	movs	r3, #0
   1d9dc:	463a      	mov	r2, r7
   1d9de:	f001 fad1 	bl	1ef84 <cc_mbedtls_sha256_ret>
   1d9e2:	4604      	mov	r4, r0
   1d9e4:	2800      	cmp	r0, #0
   1d9e6:	d1e6      	bne.n	1d9b6 <entropy_update+0x42>
   1d9e8:	2320      	movs	r3, #32
   1d9ea:	461d      	mov	r5, r3
   1d9ec:	46b8      	mov	r8, r7
   1d9ee:	e7cc      	b.n	1d98a <entropy_update+0x16>

0001d9f0 <entropy_gather_internal.part.0>:
   1d9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d9f2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1d9f6:	b0a7      	sub	sp, #156	; 0x9c
   1d9f8:	2b00      	cmp	r3, #0
   1d9fa:	bfd8      	it	le
   1d9fc:	ae02      	addle	r6, sp, #8
   1d9fe:	dd2c      	ble.n	1da5a <entropy_gather_internal.part.0+0x6a>
   1da00:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   1da04:	4605      	mov	r5, r0
   1da06:	2300      	movs	r3, #0
   1da08:	ae02      	add	r6, sp, #8
   1da0a:	9301      	str	r3, [sp, #4]
   1da0c:	f1a4 0701 	sub.w	r7, r4, #1
   1da10:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   1da14:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   1da18:	4631      	mov	r1, r6
   1da1a:	ab01      	add	r3, sp, #4
   1da1c:	2290      	movs	r2, #144	; 0x90
   1da1e:	47a0      	blx	r4
   1da20:	fab7 f787 	clz	r7, r7
   1da24:	097f      	lsrs	r7, r7, #5
   1da26:	4604      	mov	r4, r0
   1da28:	b910      	cbnz	r0, 1da30 <entropy_gather_internal.part.0+0x40>
   1da2a:	9b01      	ldr	r3, [sp, #4]
   1da2c:	b93b      	cbnz	r3, 1da3e <entropy_gather_internal.part.0+0x4e>
   1da2e:	b1a7      	cbz	r7, 1da5a <entropy_gather_internal.part.0+0x6a>
   1da30:	4630      	mov	r0, r6
   1da32:	2190      	movs	r1, #144	; 0x90
   1da34:	f000 fd74 	bl	1e520 <mbedtls_platform_zeroize>
   1da38:	4620      	mov	r0, r4
   1da3a:	b027      	add	sp, #156	; 0x9c
   1da3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1da3e:	4601      	mov	r1, r0
   1da40:	4632      	mov	r2, r6
   1da42:	4628      	mov	r0, r5
   1da44:	f7ff ff96 	bl	1d974 <entropy_update>
   1da48:	b950      	cbnz	r0, 1da60 <entropy_gather_internal.part.0+0x70>
   1da4a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1da4e:	9a01      	ldr	r2, [sp, #4]
   1da50:	4413      	add	r3, r2
   1da52:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   1da56:	2f00      	cmp	r7, #0
   1da58:	d1ea      	bne.n	1da30 <entropy_gather_internal.part.0+0x40>
   1da5a:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1da5e:	e7e7      	b.n	1da30 <entropy_gather_internal.part.0+0x40>
   1da60:	4604      	mov	r4, r0
   1da62:	4620      	mov	r0, r4
   1da64:	b027      	add	sp, #156	; 0x9c
   1da66:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001da68 <cc_mbedtls_entropy_init>:
   1da68:	b570      	push	{r4, r5, r6, lr}
   1da6a:	2500      	movs	r5, #0
   1da6c:	4604      	mov	r4, r0
   1da6e:	4629      	mov	r1, r5
   1da70:	2214      	movs	r2, #20
   1da72:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   1da76:	30f8      	adds	r0, #248	; 0xf8
   1da78:	f005 f917 	bl	22caa <memset>
   1da7c:	4b15      	ldr	r3, [pc, #84]	; (1dad4 <cc_mbedtls_entropy_init+0x6c>)
   1da7e:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   1da82:	681b      	ldr	r3, [r3, #0]
   1da84:	4630      	mov	r0, r6
   1da86:	4798      	blx	r3
   1da88:	4620      	mov	r0, r4
   1da8a:	f840 5b04 	str.w	r5, [r0], #4
   1da8e:	f000 fdcf 	bl	1e630 <cc_mbedtls_sha256_init>
   1da92:	4b11      	ldr	r3, [pc, #68]	; (1dad8 <cc_mbedtls_entropy_init+0x70>)
   1da94:	4630      	mov	r0, r6
   1da96:	681b      	ldr	r3, [r3, #0]
   1da98:	4798      	blx	r3
   1da9a:	b9c8      	cbnz	r0, 1dad0 <cc_mbedtls_entropy_init+0x68>
   1da9c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1daa0:	42ab      	cmp	r3, r5
   1daa2:	dc0f      	bgt.n	1dac4 <cc_mbedtls_entropy_init+0x5c>
   1daa4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1daa8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1daac:	490b      	ldr	r1, [pc, #44]	; (1dadc <cc_mbedtls_entropy_init+0x74>)
   1daae:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   1dab2:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   1dab6:	3301      	adds	r3, #1
   1dab8:	2020      	movs	r0, #32
   1daba:	2101      	movs	r1, #1
   1dabc:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   1dac0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   1dac4:	4b06      	ldr	r3, [pc, #24]	; (1dae0 <cc_mbedtls_entropy_init+0x78>)
   1dac6:	4630      	mov	r0, r6
   1dac8:	681b      	ldr	r3, [r3, #0]
   1daca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1dace:	4718      	bx	r3
   1dad0:	bd70      	pop	{r4, r5, r6, pc}
   1dad2:	bf00      	nop
   1dad4:	20000588 	.word	0x20000588
   1dad8:	2000058c 	.word	0x2000058c
   1dadc:	0001e535 	.word	0x0001e535
   1dae0:	20000590 	.word	0x20000590

0001dae4 <cc_mbedtls_entropy_func>:
   1dae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dae8:	2a20      	cmp	r2, #32
   1daea:	b088      	sub	sp, #32
   1daec:	d876      	bhi.n	1dbdc <cc_mbedtls_entropy_func+0xf8>
   1daee:	4b3d      	ldr	r3, [pc, #244]	; (1dbe4 <cc_mbedtls_entropy_func+0x100>)
   1daf0:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   1daf4:	681b      	ldr	r3, [r3, #0]
   1daf6:	4604      	mov	r4, r0
   1daf8:	4648      	mov	r0, r9
   1dafa:	4617      	mov	r7, r2
   1dafc:	4688      	mov	r8, r1
   1dafe:	4798      	blx	r3
   1db00:	4605      	mov	r5, r0
   1db02:	bba0      	cbnz	r0, 1db6e <cc_mbedtls_entropy_func+0x8a>
   1db04:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1db08:	f240 1601 	movw	r6, #257	; 0x101
   1db0c:	e001      	b.n	1db12 <cc_mbedtls_entropy_func+0x2e>
   1db0e:	3e01      	subs	r6, #1
   1db10:	d060      	beq.n	1dbd4 <cc_mbedtls_entropy_func+0xf0>
   1db12:	4620      	mov	r0, r4
   1db14:	b37b      	cbz	r3, 1db76 <cc_mbedtls_entropy_func+0x92>
   1db16:	f7ff ff6b 	bl	1d9f0 <entropy_gather_internal.part.0>
   1db1a:	4605      	mov	r5, r0
   1db1c:	bb68      	cbnz	r0, 1db7a <cc_mbedtls_entropy_func+0x96>
   1db1e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1db22:	2b00      	cmp	r3, #0
   1db24:	ddf3      	ble.n	1db0e <cc_mbedtls_entropy_func+0x2a>
   1db26:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   1db2a:	4290      	cmp	r0, r2
   1db2c:	d3ef      	bcc.n	1db0e <cc_mbedtls_entropy_func+0x2a>
   1db2e:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1db32:	2a01      	cmp	r2, #1
   1db34:	d1eb      	bne.n	1db0e <cc_mbedtls_entropy_func+0x2a>
   1db36:	281f      	cmp	r0, #31
   1db38:	d9e9      	bls.n	1db0e <cc_mbedtls_entropy_func+0x2a>
   1db3a:	466e      	mov	r6, sp
   1db3c:	4629      	mov	r1, r5
   1db3e:	2220      	movs	r2, #32
   1db40:	4630      	mov	r0, r6
   1db42:	f104 0a04 	add.w	sl, r4, #4
   1db46:	f005 f8b0 	bl	22caa <memset>
   1db4a:	4631      	mov	r1, r6
   1db4c:	4650      	mov	r0, sl
   1db4e:	f000 fda5 	bl	1e69c <cc_mbedtls_sha256_finish_ret>
   1db52:	4605      	mov	r5, r0
   1db54:	b198      	cbz	r0, 1db7e <cc_mbedtls_entropy_func+0x9a>
   1db56:	4630      	mov	r0, r6
   1db58:	2120      	movs	r1, #32
   1db5a:	f000 fce1 	bl	1e520 <mbedtls_platform_zeroize>
   1db5e:	4b22      	ldr	r3, [pc, #136]	; (1dbe8 <cc_mbedtls_entropy_func+0x104>)
   1db60:	4648      	mov	r0, r9
   1db62:	681b      	ldr	r3, [r3, #0]
   1db64:	4798      	blx	r3
   1db66:	2800      	cmp	r0, #0
   1db68:	bf18      	it	ne
   1db6a:	f06f 051d 	mvnne.w	r5, #29
   1db6e:	4628      	mov	r0, r5
   1db70:	b008      	add	sp, #32
   1db72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1db76:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1db7a:	466e      	mov	r6, sp
   1db7c:	e7eb      	b.n	1db56 <cc_mbedtls_entropy_func+0x72>
   1db7e:	4650      	mov	r0, sl
   1db80:	f000 fd6a 	bl	1e658 <cc_mbedtls_sha256_free>
   1db84:	4650      	mov	r0, sl
   1db86:	f000 fd53 	bl	1e630 <cc_mbedtls_sha256_init>
   1db8a:	4629      	mov	r1, r5
   1db8c:	4650      	mov	r0, sl
   1db8e:	f000 fd69 	bl	1e664 <cc_mbedtls_sha256_starts_ret>
   1db92:	4605      	mov	r5, r0
   1db94:	2800      	cmp	r0, #0
   1db96:	d1de      	bne.n	1db56 <cc_mbedtls_entropy_func+0x72>
   1db98:	4650      	mov	r0, sl
   1db9a:	2220      	movs	r2, #32
   1db9c:	4631      	mov	r1, r6
   1db9e:	f000 fd75 	bl	1e68c <cc_mbedtls_sha256_update_ret>
   1dba2:	4605      	mov	r5, r0
   1dba4:	2800      	cmp	r0, #0
   1dba6:	d1d6      	bne.n	1db56 <cc_mbedtls_entropy_func+0x72>
   1dba8:	4603      	mov	r3, r0
   1dbaa:	4632      	mov	r2, r6
   1dbac:	2120      	movs	r1, #32
   1dbae:	4630      	mov	r0, r6
   1dbb0:	f001 f9e8 	bl	1ef84 <cc_mbedtls_sha256_ret>
   1dbb4:	4605      	mov	r5, r0
   1dbb6:	2800      	cmp	r0, #0
   1dbb8:	d1cd      	bne.n	1db56 <cc_mbedtls_entropy_func+0x72>
   1dbba:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1dbbe:	2b00      	cmp	r3, #0
   1dbc0:	bfc4      	itt	gt
   1dbc2:	2300      	movgt	r3, #0
   1dbc4:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   1dbc8:	463a      	mov	r2, r7
   1dbca:	4640      	mov	r0, r8
   1dbcc:	4631      	mov	r1, r6
   1dbce:	f005 f844 	bl	22c5a <memcpy>
   1dbd2:	e7c0      	b.n	1db56 <cc_mbedtls_entropy_func+0x72>
   1dbd4:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1dbd8:	466e      	mov	r6, sp
   1dbda:	e7bc      	b.n	1db56 <cc_mbedtls_entropy_func+0x72>
   1dbdc:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1dbe0:	e7c5      	b.n	1db6e <cc_mbedtls_entropy_func+0x8a>
   1dbe2:	bf00      	nop
   1dbe4:	2000058c 	.word	0x2000058c
   1dbe8:	20000590 	.word	0x20000590

0001dbec <RndStartupTest.constprop.0>:
   1dbec:	b530      	push	{r4, r5, lr}
   1dbee:	b08d      	sub	sp, #52	; 0x34
   1dbf0:	2100      	movs	r1, #0
   1dbf2:	2228      	movs	r2, #40	; 0x28
   1dbf4:	a802      	add	r0, sp, #8
   1dbf6:	9101      	str	r1, [sp, #4]
   1dbf8:	f005 f857 	bl	22caa <memset>
   1dbfc:	a802      	add	r0, sp, #8
   1dbfe:	f001 f9e9 	bl	1efd4 <RNG_PLAT_SetUserRngParameters>
   1dc02:	4604      	mov	r4, r0
   1dc04:	b110      	cbz	r0, 1dc0c <RndStartupTest.constprop.0+0x20>
   1dc06:	4620      	mov	r0, r4
   1dc08:	b00d      	add	sp, #52	; 0x34
   1dc0a:	bd30      	pop	{r4, r5, pc}
   1dc0c:	4d18      	ldr	r5, [pc, #96]	; (1dc70 <RndStartupTest.constprop.0+0x84>)
   1dc0e:	f04f 31ff 	mov.w	r1, #4294967295
   1dc12:	6828      	ldr	r0, [r5, #0]
   1dc14:	f000 f93c 	bl	1de90 <CC_PalMutexLock>
   1dc18:	4604      	mov	r4, r0
   1dc1a:	b9c0      	cbnz	r0, 1dc4e <RndStartupTest.constprop.0+0x62>
   1dc1c:	2000      	movs	r0, #0
   1dc1e:	f000 f967 	bl	1def0 <CC_PalPowerSaveModeSelect>
   1dc22:	bb00      	cbnz	r0, 1dc66 <RndStartupTest.constprop.0+0x7a>
   1dc24:	4a13      	ldr	r2, [pc, #76]	; (1dc74 <RndStartupTest.constprop.0+0x88>)
   1dc26:	a902      	add	r1, sp, #8
   1dc28:	a801      	add	r0, sp, #4
   1dc2a:	f000 fc6b 	bl	1e504 <LLF_RND_RunTrngStartupTest>
   1dc2e:	4604      	mov	r4, r0
   1dc30:	2001      	movs	r0, #1
   1dc32:	f000 f95d 	bl	1def0 <CC_PalPowerSaveModeSelect>
   1dc36:	b990      	cbnz	r0, 1dc5e <RndStartupTest.constprop.0+0x72>
   1dc38:	6828      	ldr	r0, [r5, #0]
   1dc3a:	f000 f931 	bl	1dea0 <CC_PalMutexUnlock>
   1dc3e:	2800      	cmp	r0, #0
   1dc40:	d0e1      	beq.n	1dc06 <RndStartupTest.constprop.0+0x1a>
   1dc42:	480d      	ldr	r0, [pc, #52]	; (1dc78 <RndStartupTest.constprop.0+0x8c>)
   1dc44:	f7ff fd8e 	bl	1d764 <CC_PalAbort>
   1dc48:	4620      	mov	r0, r4
   1dc4a:	b00d      	add	sp, #52	; 0x34
   1dc4c:	bd30      	pop	{r4, r5, pc}
   1dc4e:	480b      	ldr	r0, [pc, #44]	; (1dc7c <RndStartupTest.constprop.0+0x90>)
   1dc50:	f7ff fd88 	bl	1d764 <CC_PalAbort>
   1dc54:	2c01      	cmp	r4, #1
   1dc56:	bf08      	it	eq
   1dc58:	2405      	moveq	r4, #5
   1dc5a:	d0ed      	beq.n	1dc38 <RndStartupTest.constprop.0+0x4c>
   1dc5c:	e7de      	b.n	1dc1c <RndStartupTest.constprop.0+0x30>
   1dc5e:	4808      	ldr	r0, [pc, #32]	; (1dc80 <RndStartupTest.constprop.0+0x94>)
   1dc60:	f7ff fd80 	bl	1d764 <CC_PalAbort>
   1dc64:	e7e8      	b.n	1dc38 <RndStartupTest.constprop.0+0x4c>
   1dc66:	4807      	ldr	r0, [pc, #28]	; (1dc84 <RndStartupTest.constprop.0+0x98>)
   1dc68:	f7ff fd7c 	bl	1d764 <CC_PalAbort>
   1dc6c:	e7da      	b.n	1dc24 <RndStartupTest.constprop.0+0x38>
   1dc6e:	bf00      	nop
   1dc70:	20000584 	.word	0x20000584
   1dc74:	2000251c 	.word	0x2000251c
   1dc78:	0002356c 	.word	0x0002356c
   1dc7c:	00023514 	.word	0x00023514
   1dc80:	0002354c 	.word	0x0002354c
   1dc84:	0002352c 	.word	0x0002352c

0001dc88 <CC_LibInit>:
   1dc88:	b510      	push	{r4, lr}
   1dc8a:	b082      	sub	sp, #8
   1dc8c:	f000 f854 	bl	1dd38 <CC_HalInit>
   1dc90:	b128      	cbz	r0, 1dc9e <CC_LibInit+0x16>
   1dc92:	f000 f8a3 	bl	1dddc <CC_PalTerminate>
   1dc96:	2403      	movs	r4, #3
   1dc98:	4620      	mov	r0, r4
   1dc9a:	b002      	add	sp, #8
   1dc9c:	bd10      	pop	{r4, pc}
   1dc9e:	f000 f86f 	bl	1dd80 <CC_PalInit>
   1dca2:	b9d0      	cbnz	r0, 1dcda <CC_LibInit+0x52>
   1dca4:	f000 f924 	bl	1def0 <CC_PalPowerSaveModeSelect>
   1dca8:	b9d8      	cbnz	r0, 1dce2 <CC_LibInit+0x5a>
   1dcaa:	4b1e      	ldr	r3, [pc, #120]	; (1dd24 <CC_LibInit+0x9c>)
   1dcac:	681b      	ldr	r3, [r3, #0]
   1dcae:	0e1b      	lsrs	r3, r3, #24
   1dcb0:	2bf0      	cmp	r3, #240	; 0xf0
   1dcb2:	d10a      	bne.n	1dcca <CC_LibInit+0x42>
   1dcb4:	4a1c      	ldr	r2, [pc, #112]	; (1dd28 <CC_LibInit+0xa0>)
   1dcb6:	4b1d      	ldr	r3, [pc, #116]	; (1dd2c <CC_LibInit+0xa4>)
   1dcb8:	6812      	ldr	r2, [r2, #0]
   1dcba:	429a      	cmp	r2, r3
   1dcbc:	d029      	beq.n	1dd12 <CC_LibInit+0x8a>
   1dcbe:	f000 f83d 	bl	1dd3c <CC_HalTerminate>
   1dcc2:	2407      	movs	r4, #7
   1dcc4:	f000 f88a 	bl	1dddc <CC_PalTerminate>
   1dcc8:	e7e6      	b.n	1dc98 <CC_LibInit+0x10>
   1dcca:	f000 f837 	bl	1dd3c <CC_HalTerminate>
   1dcce:	f000 f885 	bl	1dddc <CC_PalTerminate>
   1dcd2:	2406      	movs	r4, #6
   1dcd4:	4620      	mov	r0, r4
   1dcd6:	b002      	add	sp, #8
   1dcd8:	bd10      	pop	{r4, pc}
   1dcda:	2404      	movs	r4, #4
   1dcdc:	4620      	mov	r0, r4
   1dcde:	b002      	add	sp, #8
   1dce0:	bd10      	pop	{r4, pc}
   1dce2:	f000 f82b 	bl	1dd3c <CC_HalTerminate>
   1dce6:	f000 f879 	bl	1dddc <CC_PalTerminate>
   1dcea:	f7ff ff7f 	bl	1dbec <RndStartupTest.constprop.0>
   1dcee:	4604      	mov	r4, r0
   1dcf0:	b958      	cbnz	r0, 1dd0a <CC_LibInit+0x82>
   1dcf2:	4602      	mov	r2, r0
   1dcf4:	4601      	mov	r1, r0
   1dcf6:	f7ff fd5d 	bl	1d7b4 <nrf_cc3xx_platform_ctr_drbg_init>
   1dcfa:	b930      	cbnz	r0, 1dd0a <CC_LibInit+0x82>
   1dcfc:	490c      	ldr	r1, [pc, #48]	; (1dd30 <CC_LibInit+0xa8>)
   1dcfe:	ab01      	add	r3, sp, #4
   1dd00:	2268      	movs	r2, #104	; 0x68
   1dd02:	f7ff fd8b 	bl	1d81c <nrf_cc3xx_platform_ctr_drbg_get>
   1dd06:	2800      	cmp	r0, #0
   1dd08:	d0c6      	beq.n	1dc98 <CC_LibInit+0x10>
   1dd0a:	2405      	movs	r4, #5
   1dd0c:	4620      	mov	r0, r4
   1dd0e:	b002      	add	sp, #8
   1dd10:	bd10      	pop	{r4, pc}
   1dd12:	2001      	movs	r0, #1
   1dd14:	f000 f8ec 	bl	1def0 <CC_PalPowerSaveModeSelect>
   1dd18:	2800      	cmp	r0, #0
   1dd1a:	d1e2      	bne.n	1dce2 <CC_LibInit+0x5a>
   1dd1c:	4b05      	ldr	r3, [pc, #20]	; (1dd34 <CC_LibInit+0xac>)
   1dd1e:	6018      	str	r0, [r3, #0]
   1dd20:	e7e3      	b.n	1dcea <CC_LibInit+0x62>
   1dd22:	bf00      	nop
   1dd24:	5002b928 	.word	0x5002b928
   1dd28:	5002ba24 	.word	0x5002ba24
   1dd2c:	20e00000 	.word	0x20e00000
   1dd30:	200024b4 	.word	0x200024b4
   1dd34:	5002ba0c 	.word	0x5002ba0c

0001dd38 <CC_HalInit>:
   1dd38:	2000      	movs	r0, #0
   1dd3a:	4770      	bx	lr

0001dd3c <CC_HalTerminate>:
   1dd3c:	2000      	movs	r0, #0
   1dd3e:	4770      	bx	lr

0001dd40 <CC_HalClearInterruptBit>:
   1dd40:	0543      	lsls	r3, r0, #21
   1dd42:	d503      	bpl.n	1dd4c <CC_HalClearInterruptBit+0xc>
   1dd44:	4b03      	ldr	r3, [pc, #12]	; (1dd54 <CC_HalClearInterruptBit+0x14>)
   1dd46:	f04f 32ff 	mov.w	r2, #4294967295
   1dd4a:	601a      	str	r2, [r3, #0]
   1dd4c:	4b02      	ldr	r3, [pc, #8]	; (1dd58 <CC_HalClearInterruptBit+0x18>)
   1dd4e:	6018      	str	r0, [r3, #0]
   1dd50:	4770      	bx	lr
   1dd52:	bf00      	nop
   1dd54:	5002b108 	.word	0x5002b108
   1dd58:	5002ba08 	.word	0x5002ba08

0001dd5c <CC_HalMaskInterrupt>:
   1dd5c:	4b01      	ldr	r3, [pc, #4]	; (1dd64 <CC_HalMaskInterrupt+0x8>)
   1dd5e:	6018      	str	r0, [r3, #0]
   1dd60:	4770      	bx	lr
   1dd62:	bf00      	nop
   1dd64:	5002ba04 	.word	0x5002ba04

0001dd68 <CC_HalWaitInterrupt>:
   1dd68:	b108      	cbz	r0, 1dd6e <CC_HalWaitInterrupt+0x6>
   1dd6a:	f000 b86f 	b.w	1de4c <CC_PalWaitInterrupt>
   1dd6e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1dd72:	4770      	bx	lr

0001dd74 <CC_HalWaitInterruptRND>:
   1dd74:	b108      	cbz	r0, 1dd7a <CC_HalWaitInterruptRND+0x6>
   1dd76:	f000 b84f 	b.w	1de18 <CC_PalWaitInterruptRND>
   1dd7a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1dd7e:	4770      	bx	lr

0001dd80 <CC_PalInit>:
   1dd80:	b510      	push	{r4, lr}
   1dd82:	4811      	ldr	r0, [pc, #68]	; (1ddc8 <CC_PalInit+0x48>)
   1dd84:	f000 f870 	bl	1de68 <CC_PalMutexCreate>
   1dd88:	b100      	cbz	r0, 1dd8c <CC_PalInit+0xc>
   1dd8a:	bd10      	pop	{r4, pc}
   1dd8c:	480f      	ldr	r0, [pc, #60]	; (1ddcc <CC_PalInit+0x4c>)
   1dd8e:	f000 f86b 	bl	1de68 <CC_PalMutexCreate>
   1dd92:	2800      	cmp	r0, #0
   1dd94:	d1f9      	bne.n	1dd8a <CC_PalInit+0xa>
   1dd96:	4c0e      	ldr	r4, [pc, #56]	; (1ddd0 <CC_PalInit+0x50>)
   1dd98:	4620      	mov	r0, r4
   1dd9a:	f000 f865 	bl	1de68 <CC_PalMutexCreate>
   1dd9e:	2800      	cmp	r0, #0
   1dda0:	d1f3      	bne.n	1dd8a <CC_PalInit+0xa>
   1dda2:	4b0c      	ldr	r3, [pc, #48]	; (1ddd4 <CC_PalInit+0x54>)
   1dda4:	480c      	ldr	r0, [pc, #48]	; (1ddd8 <CC_PalInit+0x58>)
   1dda6:	601c      	str	r4, [r3, #0]
   1dda8:	f000 f85e 	bl	1de68 <CC_PalMutexCreate>
   1ddac:	4601      	mov	r1, r0
   1ddae:	2800      	cmp	r0, #0
   1ddb0:	d1eb      	bne.n	1dd8a <CC_PalInit+0xa>
   1ddb2:	f000 f82d 	bl	1de10 <CC_PalDmaInit>
   1ddb6:	4604      	mov	r4, r0
   1ddb8:	b108      	cbz	r0, 1ddbe <CC_PalInit+0x3e>
   1ddba:	4620      	mov	r0, r4
   1ddbc:	bd10      	pop	{r4, pc}
   1ddbe:	f000 f879 	bl	1deb4 <CC_PalPowerSaveModeInit>
   1ddc2:	4620      	mov	r0, r4
   1ddc4:	e7fa      	b.n	1ddbc <CC_PalInit+0x3c>
   1ddc6:	bf00      	nop
   1ddc8:	20000580 	.word	0x20000580
   1ddcc:	20000574 	.word	0x20000574
   1ddd0:	2000057c 	.word	0x2000057c
   1ddd4:	20000584 	.word	0x20000584
   1ddd8:	20000578 	.word	0x20000578

0001dddc <CC_PalTerminate>:
   1dddc:	b508      	push	{r3, lr}
   1ddde:	4808      	ldr	r0, [pc, #32]	; (1de00 <CC_PalTerminate+0x24>)
   1dde0:	f000 f84c 	bl	1de7c <CC_PalMutexDestroy>
   1dde4:	4807      	ldr	r0, [pc, #28]	; (1de04 <CC_PalTerminate+0x28>)
   1dde6:	f000 f849 	bl	1de7c <CC_PalMutexDestroy>
   1ddea:	4807      	ldr	r0, [pc, #28]	; (1de08 <CC_PalTerminate+0x2c>)
   1ddec:	f000 f846 	bl	1de7c <CC_PalMutexDestroy>
   1ddf0:	4806      	ldr	r0, [pc, #24]	; (1de0c <CC_PalTerminate+0x30>)
   1ddf2:	f000 f843 	bl	1de7c <CC_PalMutexDestroy>
   1ddf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1ddfa:	f000 b80b 	b.w	1de14 <CC_PalDmaTerminate>
   1ddfe:	bf00      	nop
   1de00:	20000580 	.word	0x20000580
   1de04:	20000574 	.word	0x20000574
   1de08:	2000057c 	.word	0x2000057c
   1de0c:	20000578 	.word	0x20000578

0001de10 <CC_PalDmaInit>:
   1de10:	2000      	movs	r0, #0
   1de12:	4770      	bx	lr

0001de14 <CC_PalDmaTerminate>:
   1de14:	4770      	bx	lr
   1de16:	bf00      	nop

0001de18 <CC_PalWaitInterruptRND>:
   1de18:	b410      	push	{r4}
   1de1a:	4c08      	ldr	r4, [pc, #32]	; (1de3c <CC_PalWaitInterruptRND+0x24>)
   1de1c:	4602      	mov	r2, r0
   1de1e:	6823      	ldr	r3, [r4, #0]
   1de20:	4213      	tst	r3, r2
   1de22:	d0fc      	beq.n	1de1e <CC_PalWaitInterruptRND+0x6>
   1de24:	b121      	cbz	r1, 1de30 <CC_PalWaitInterruptRND+0x18>
   1de26:	4b06      	ldr	r3, [pc, #24]	; (1de40 <CC_PalWaitInterruptRND+0x28>)
   1de28:	4806      	ldr	r0, [pc, #24]	; (1de44 <CC_PalWaitInterruptRND+0x2c>)
   1de2a:	681b      	ldr	r3, [r3, #0]
   1de2c:	600b      	str	r3, [r1, #0]
   1de2e:	6003      	str	r3, [r0, #0]
   1de30:	4b05      	ldr	r3, [pc, #20]	; (1de48 <CC_PalWaitInterruptRND+0x30>)
   1de32:	601a      	str	r2, [r3, #0]
   1de34:	2000      	movs	r0, #0
   1de36:	bc10      	pop	{r4}
   1de38:	4770      	bx	lr
   1de3a:	bf00      	nop
   1de3c:	5002ba00 	.word	0x5002ba00
   1de40:	5002b104 	.word	0x5002b104
   1de44:	5002b108 	.word	0x5002b108
   1de48:	5002ba08 	.word	0x5002ba08

0001de4c <CC_PalWaitInterrupt>:
   1de4c:	4904      	ldr	r1, [pc, #16]	; (1de60 <CC_PalWaitInterrupt+0x14>)
   1de4e:	4602      	mov	r2, r0
   1de50:	680b      	ldr	r3, [r1, #0]
   1de52:	421a      	tst	r2, r3
   1de54:	d0fc      	beq.n	1de50 <CC_PalWaitInterrupt+0x4>
   1de56:	4b03      	ldr	r3, [pc, #12]	; (1de64 <CC_PalWaitInterrupt+0x18>)
   1de58:	2000      	movs	r0, #0
   1de5a:	601a      	str	r2, [r3, #0]
   1de5c:	4770      	bx	lr
   1de5e:	bf00      	nop
   1de60:	5002ba00 	.word	0x5002ba00
   1de64:	5002ba08 	.word	0x5002ba08

0001de68 <CC_PalMutexCreate>:
   1de68:	b508      	push	{r3, lr}
   1de6a:	4b03      	ldr	r3, [pc, #12]	; (1de78 <CC_PalMutexCreate+0x10>)
   1de6c:	6802      	ldr	r2, [r0, #0]
   1de6e:	681b      	ldr	r3, [r3, #0]
   1de70:	6810      	ldr	r0, [r2, #0]
   1de72:	4798      	blx	r3
   1de74:	2000      	movs	r0, #0
   1de76:	bd08      	pop	{r3, pc}
   1de78:	20000534 	.word	0x20000534

0001de7c <CC_PalMutexDestroy>:
   1de7c:	b508      	push	{r3, lr}
   1de7e:	4b03      	ldr	r3, [pc, #12]	; (1de8c <CC_PalMutexDestroy+0x10>)
   1de80:	6802      	ldr	r2, [r0, #0]
   1de82:	685b      	ldr	r3, [r3, #4]
   1de84:	6810      	ldr	r0, [r2, #0]
   1de86:	4798      	blx	r3
   1de88:	2000      	movs	r0, #0
   1de8a:	bd08      	pop	{r3, pc}
   1de8c:	20000534 	.word	0x20000534

0001de90 <CC_PalMutexLock>:
   1de90:	4b02      	ldr	r3, [pc, #8]	; (1de9c <CC_PalMutexLock+0xc>)
   1de92:	6802      	ldr	r2, [r0, #0]
   1de94:	689b      	ldr	r3, [r3, #8]
   1de96:	6810      	ldr	r0, [r2, #0]
   1de98:	4718      	bx	r3
   1de9a:	bf00      	nop
   1de9c:	20000534 	.word	0x20000534

0001dea0 <CC_PalMutexUnlock>:
   1dea0:	b508      	push	{r3, lr}
   1dea2:	4b03      	ldr	r3, [pc, #12]	; (1deb0 <CC_PalMutexUnlock+0x10>)
   1dea4:	6802      	ldr	r2, [r0, #0]
   1dea6:	68db      	ldr	r3, [r3, #12]
   1dea8:	6810      	ldr	r0, [r2, #0]
   1deaa:	4798      	blx	r3
   1deac:	2000      	movs	r0, #0
   1deae:	bd08      	pop	{r3, pc}
   1deb0:	20000534 	.word	0x20000534

0001deb4 <CC_PalPowerSaveModeInit>:
   1deb4:	b570      	push	{r4, r5, r6, lr}
   1deb6:	4c09      	ldr	r4, [pc, #36]	; (1dedc <CC_PalPowerSaveModeInit+0x28>)
   1deb8:	4d09      	ldr	r5, [pc, #36]	; (1dee0 <CC_PalPowerSaveModeInit+0x2c>)
   1deba:	6920      	ldr	r0, [r4, #16]
   1debc:	68ab      	ldr	r3, [r5, #8]
   1debe:	4798      	blx	r3
   1dec0:	b118      	cbz	r0, 1deca <CC_PalPowerSaveModeInit+0x16>
   1dec2:	4b08      	ldr	r3, [pc, #32]	; (1dee4 <CC_PalPowerSaveModeInit+0x30>)
   1dec4:	4808      	ldr	r0, [pc, #32]	; (1dee8 <CC_PalPowerSaveModeInit+0x34>)
   1dec6:	685b      	ldr	r3, [r3, #4]
   1dec8:	4798      	blx	r3
   1deca:	4a08      	ldr	r2, [pc, #32]	; (1deec <CC_PalPowerSaveModeInit+0x38>)
   1decc:	68eb      	ldr	r3, [r5, #12]
   1dece:	6920      	ldr	r0, [r4, #16]
   1ded0:	2100      	movs	r1, #0
   1ded2:	6011      	str	r1, [r2, #0]
   1ded4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ded8:	4718      	bx	r3
   1deda:	bf00      	nop
   1dedc:	20000544 	.word	0x20000544
   1dee0:	20000534 	.word	0x20000534
   1dee4:	20000524 	.word	0x20000524
   1dee8:	00023584 	.word	0x00023584
   1deec:	2000273c 	.word	0x2000273c

0001def0 <CC_PalPowerSaveModeSelect>:
   1def0:	b570      	push	{r4, r5, r6, lr}
   1def2:	4d1a      	ldr	r5, [pc, #104]	; (1df5c <CC_PalPowerSaveModeSelect+0x6c>)
   1def4:	4e1a      	ldr	r6, [pc, #104]	; (1df60 <CC_PalPowerSaveModeSelect+0x70>)
   1def6:	4604      	mov	r4, r0
   1def8:	68b2      	ldr	r2, [r6, #8]
   1defa:	6928      	ldr	r0, [r5, #16]
   1defc:	4790      	blx	r2
   1defe:	b9f0      	cbnz	r0, 1df3e <CC_PalPowerSaveModeSelect+0x4e>
   1df00:	b15c      	cbz	r4, 1df1a <CC_PalPowerSaveModeSelect+0x2a>
   1df02:	4c18      	ldr	r4, [pc, #96]	; (1df64 <CC_PalPowerSaveModeSelect+0x74>)
   1df04:	6823      	ldr	r3, [r4, #0]
   1df06:	b1ab      	cbz	r3, 1df34 <CC_PalPowerSaveModeSelect+0x44>
   1df08:	2b01      	cmp	r3, #1
   1df0a:	d01a      	beq.n	1df42 <CC_PalPowerSaveModeSelect+0x52>
   1df0c:	3b01      	subs	r3, #1
   1df0e:	6023      	str	r3, [r4, #0]
   1df10:	6928      	ldr	r0, [r5, #16]
   1df12:	68f3      	ldr	r3, [r6, #12]
   1df14:	4798      	blx	r3
   1df16:	2000      	movs	r0, #0
   1df18:	bd70      	pop	{r4, r5, r6, pc}
   1df1a:	4c12      	ldr	r4, [pc, #72]	; (1df64 <CC_PalPowerSaveModeSelect+0x74>)
   1df1c:	6821      	ldr	r1, [r4, #0]
   1df1e:	b939      	cbnz	r1, 1df30 <CC_PalPowerSaveModeSelect+0x40>
   1df20:	4b11      	ldr	r3, [pc, #68]	; (1df68 <CC_PalPowerSaveModeSelect+0x78>)
   1df22:	4a12      	ldr	r2, [pc, #72]	; (1df6c <CC_PalPowerSaveModeSelect+0x7c>)
   1df24:	2001      	movs	r0, #1
   1df26:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1df2a:	6813      	ldr	r3, [r2, #0]
   1df2c:	2b00      	cmp	r3, #0
   1df2e:	d1fc      	bne.n	1df2a <CC_PalPowerSaveModeSelect+0x3a>
   1df30:	3101      	adds	r1, #1
   1df32:	6021      	str	r1, [r4, #0]
   1df34:	68f3      	ldr	r3, [r6, #12]
   1df36:	6928      	ldr	r0, [r5, #16]
   1df38:	4798      	blx	r3
   1df3a:	2000      	movs	r0, #0
   1df3c:	bd70      	pop	{r4, r5, r6, pc}
   1df3e:	480c      	ldr	r0, [pc, #48]	; (1df70 <CC_PalPowerSaveModeSelect+0x80>)
   1df40:	bd70      	pop	{r4, r5, r6, pc}
   1df42:	4a0a      	ldr	r2, [pc, #40]	; (1df6c <CC_PalPowerSaveModeSelect+0x7c>)
   1df44:	6813      	ldr	r3, [r2, #0]
   1df46:	2b00      	cmp	r3, #0
   1df48:	d1fc      	bne.n	1df44 <CC_PalPowerSaveModeSelect+0x54>
   1df4a:	4a07      	ldr	r2, [pc, #28]	; (1df68 <CC_PalPowerSaveModeSelect+0x78>)
   1df4c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1df50:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1df54:	f7ff ff02 	bl	1dd5c <CC_HalMaskInterrupt>
   1df58:	6823      	ldr	r3, [r4, #0]
   1df5a:	e7d7      	b.n	1df0c <CC_PalPowerSaveModeSelect+0x1c>
   1df5c:	20000544 	.word	0x20000544
   1df60:	20000534 	.word	0x20000534
   1df64:	2000273c 	.word	0x2000273c
   1df68:	5002a000 	.word	0x5002a000
   1df6c:	5002b910 	.word	0x5002b910
   1df70:	ffff8fe9 	.word	0xffff8fe9

0001df74 <mutex_init>:
   1df74:	4b01      	ldr	r3, [pc, #4]	; (1df7c <mutex_init+0x8>)
   1df76:	681b      	ldr	r3, [r3, #0]
   1df78:	4718      	bx	r3
   1df7a:	bf00      	nop
   1df7c:	20000534 	.word	0x20000534

0001df80 <mutex_lock>:
   1df80:	4b01      	ldr	r3, [pc, #4]	; (1df88 <mutex_lock+0x8>)
   1df82:	689b      	ldr	r3, [r3, #8]
   1df84:	4718      	bx	r3
   1df86:	bf00      	nop
   1df88:	20000534 	.word	0x20000534

0001df8c <mutex_unlock>:
   1df8c:	4b01      	ldr	r3, [pc, #4]	; (1df94 <mutex_unlock+0x8>)
   1df8e:	68db      	ldr	r3, [r3, #12]
   1df90:	4718      	bx	r3
   1df92:	bf00      	nop
   1df94:	20000534 	.word	0x20000534

0001df98 <startTrngHW>:
   1df98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1df9c:	2800      	cmp	r0, #0
   1df9e:	d077      	beq.n	1e090 <startTrngHW+0xf8>
   1dfa0:	460c      	mov	r4, r1
   1dfa2:	2900      	cmp	r1, #0
   1dfa4:	d074      	beq.n	1e090 <startTrngHW+0xf8>
   1dfa6:	461d      	mov	r5, r3
   1dfa8:	2b00      	cmp	r3, #0
   1dfaa:	d071      	beq.n	1e090 <startTrngHW+0xf8>
   1dfac:	4606      	mov	r6, r0
   1dfae:	b11a      	cbz	r2, 1dfb8 <startTrngHW+0x20>
   1dfb0:	2201      	movs	r2, #1
   1dfb2:	2300      	movs	r3, #0
   1dfb4:	602a      	str	r2, [r5, #0]
   1dfb6:	6003      	str	r3, [r0, #0]
   1dfb8:	682b      	ldr	r3, [r5, #0]
   1dfba:	2b00      	cmp	r3, #0
   1dfbc:	d064      	beq.n	1e088 <startTrngHW+0xf0>
   1dfbe:	4629      	mov	r1, r5
   1dfc0:	4620      	mov	r0, r4
   1dfc2:	f001 f8cd 	bl	1f160 <LLF_RND_GetFastestRosc>
   1dfc6:	4607      	mov	r7, r0
   1dfc8:	2800      	cmp	r0, #0
   1dfca:	d15e      	bne.n	1e08a <startTrngHW+0xf2>
   1dfcc:	6828      	ldr	r0, [r5, #0]
   1dfce:	4621      	mov	r1, r4
   1dfd0:	f001 f8a8 	bl	1f124 <LLF_RND_GetRoscSampleCnt>
   1dfd4:	4607      	mov	r7, r0
   1dfd6:	2800      	cmp	r0, #0
   1dfd8:	d157      	bne.n	1e08a <startTrngHW+0xf2>
   1dfda:	682b      	ldr	r3, [r5, #0]
   1dfdc:	2b08      	cmp	r3, #8
   1dfde:	d066      	beq.n	1e0ae <startTrngHW+0x116>
   1dfe0:	2b04      	cmp	r3, #4
   1dfe2:	d067      	beq.n	1e0b4 <startTrngHW+0x11c>
   1dfe4:	f1a3 0802 	sub.w	r8, r3, #2
   1dfe8:	fab8 f888 	clz	r8, r8
   1dfec:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1dff0:	4b32      	ldr	r3, [pc, #200]	; (1e0bc <startTrngHW+0x124>)
   1dff2:	4933      	ldr	r1, [pc, #204]	; (1e0c0 <startTrngHW+0x128>)
   1dff4:	4a33      	ldr	r2, [pc, #204]	; (1e0c4 <startTrngHW+0x12c>)
   1dff6:	2001      	movs	r0, #1
   1dff8:	6018      	str	r0, [r3, #0]
   1dffa:	469c      	mov	ip, r3
   1dffc:	6008      	str	r0, [r1, #0]
   1dffe:	f8cc 0000 	str.w	r0, [ip]
   1e002:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e004:	6013      	str	r3, [r2, #0]
   1e006:	6811      	ldr	r1, [r2, #0]
   1e008:	428b      	cmp	r3, r1
   1e00a:	d1f8      	bne.n	1dffe <startTrngHW+0x66>
   1e00c:	4b2e      	ldr	r3, [pc, #184]	; (1e0c8 <startTrngHW+0x130>)
   1e00e:	f04f 0900 	mov.w	r9, #0
   1e012:	f8c3 9000 	str.w	r9, [r3]
   1e016:	f04f 30ff 	mov.w	r0, #4294967295
   1e01a:	f7ff fe91 	bl	1dd40 <CC_HalClearInterruptBit>
   1e01e:	4b2b      	ldr	r3, [pc, #172]	; (1e0cc <startTrngHW+0x134>)
   1e020:	f06f 021b 	mvn.w	r2, #27
   1e024:	601a      	str	r2, [r3, #0]
   1e026:	4648      	mov	r0, r9
   1e028:	f7ff fe98 	bl	1dd5c <CC_HalMaskInterrupt>
   1e02c:	4a28      	ldr	r2, [pc, #160]	; (1e0d0 <startTrngHW+0x138>)
   1e02e:	4b29      	ldr	r3, [pc, #164]	; (1e0d4 <startTrngHW+0x13c>)
   1e030:	f8c2 8000 	str.w	r8, [r2]
   1e034:	6818      	ldr	r0, [r3, #0]
   1e036:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1e03a:	f7ff fe8f 	bl	1dd5c <CC_HalMaskInterrupt>
   1e03e:	4b26      	ldr	r3, [pc, #152]	; (1e0d8 <startTrngHW+0x140>)
   1e040:	220a      	movs	r2, #10
   1e042:	601a      	str	r2, [r3, #0]
   1e044:	9908      	ldr	r1, [sp, #32]
   1e046:	6923      	ldr	r3, [r4, #16]
   1e048:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1e04a:	2901      	cmp	r1, #1
   1e04c:	d024      	beq.n	1e098 <startTrngHW+0x100>
   1e04e:	4923      	ldr	r1, [pc, #140]	; (1e0dc <startTrngHW+0x144>)
   1e050:	fba1 1303 	umull	r1, r3, r1, r3
   1e054:	091b      	lsrs	r3, r3, #4
   1e056:	fb03 f302 	mul.w	r3, r3, r2
   1e05a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e05e:	4920      	ldr	r1, [pc, #128]	; (1e0e0 <startTrngHW+0x148>)
   1e060:	4a19      	ldr	r2, [pc, #100]	; (1e0c8 <startTrngHW+0x130>)
   1e062:	03db      	lsls	r3, r3, #15
   1e064:	099b      	lsrs	r3, r3, #6
   1e066:	600b      	str	r3, [r1, #0]
   1e068:	2301      	movs	r3, #1
   1e06a:	6013      	str	r3, [r2, #0]
   1e06c:	6833      	ldr	r3, [r6, #0]
   1e06e:	682a      	ldr	r2, [r5, #0]
   1e070:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1e074:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1e078:	6033      	str	r3, [r6, #0]
   1e07a:	682a      	ldr	r2, [r5, #0]
   1e07c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e080:	6033      	str	r3, [r6, #0]
   1e082:	4638      	mov	r0, r7
   1e084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e088:	4f16      	ldr	r7, [pc, #88]	; (1e0e4 <startTrngHW+0x14c>)
   1e08a:	4638      	mov	r0, r7
   1e08c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e090:	4f15      	ldr	r7, [pc, #84]	; (1e0e8 <startTrngHW+0x150>)
   1e092:	4638      	mov	r0, r7
   1e094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e098:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e09c:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   1e0a0:	3101      	adds	r1, #1
   1e0a2:	d002      	beq.n	1e0aa <startTrngHW+0x112>
   1e0a4:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   1e0a8:	e7d1      	b.n	1e04e <startTrngHW+0xb6>
   1e0aa:	2316      	movs	r3, #22
   1e0ac:	e7d3      	b.n	1e056 <startTrngHW+0xbe>
   1e0ae:	f04f 0803 	mov.w	r8, #3
   1e0b2:	e79d      	b.n	1dff0 <startTrngHW+0x58>
   1e0b4:	f04f 0802 	mov.w	r8, #2
   1e0b8:	e79a      	b.n	1dff0 <startTrngHW+0x58>
   1e0ba:	bf00      	nop
   1e0bc:	5002b1c4 	.word	0x5002b1c4
   1e0c0:	5002b140 	.word	0x5002b140
   1e0c4:	5002b130 	.word	0x5002b130
   1e0c8:	5002b12c 	.word	0x5002b12c
   1e0cc:	5002b100 	.word	0x5002b100
   1e0d0:	5002b10c 	.word	0x5002b10c
   1e0d4:	5002ba04 	.word	0x5002ba04
   1e0d8:	5002b138 	.word	0x5002b138
   1e0dc:	aaaaaaab 	.word	0xaaaaaaab
   1e0e0:	5002b1d8 	.word	0x5002b1d8
   1e0e4:	00f10c31 	.word	0x00f10c31
   1e0e8:	00f10c35 	.word	0x00f10c35

0001e0ec <LLF_RND_RepetitionCounterTest.part.0>:
   1e0ec:	b4f0      	push	{r4, r5, r6, r7}
   1e0ee:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   1e0f2:	2400      	movs	r4, #0
   1e0f4:	f10c 3cff 	add.w	ip, ip, #4294967295
   1e0f8:	4626      	mov	r6, r4
   1e0fa:	4627      	mov	r7, r4
   1e0fc:	e006      	b.n	1e10c <LLF_RND_RepetitionCounterTest.part.0+0x20>
   1e0fe:	429f      	cmp	r7, r3
   1e100:	d016      	beq.n	1e130 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   1e102:	2601      	movs	r6, #1
   1e104:	4565      	cmp	r5, ip
   1e106:	d819      	bhi.n	1e13c <LLF_RND_RepetitionCounterTest.part.0+0x50>
   1e108:	462c      	mov	r4, r5
   1e10a:	461f      	mov	r7, r3
   1e10c:	0963      	lsrs	r3, r4, #5
   1e10e:	f004 011f 	and.w	r1, r4, #31
   1e112:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1e116:	291f      	cmp	r1, #31
   1e118:	fa23 f301 	lsr.w	r3, r3, r1
   1e11c:	f104 0501 	add.w	r5, r4, #1
   1e120:	bf18      	it	ne
   1e122:	f003 0301 	andne.w	r3, r3, #1
   1e126:	2c00      	cmp	r4, #0
   1e128:	d1e9      	bne.n	1e0fe <LLF_RND_RepetitionCounterTest.part.0+0x12>
   1e12a:	2601      	movs	r6, #1
   1e12c:	4635      	mov	r5, r6
   1e12e:	e7eb      	b.n	1e108 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   1e130:	3601      	adds	r6, #1
   1e132:	4296      	cmp	r6, r2
   1e134:	d1e6      	bne.n	1e104 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1e136:	4803      	ldr	r0, [pc, #12]	; (1e144 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   1e138:	bcf0      	pop	{r4, r5, r6, r7}
   1e13a:	4770      	bx	lr
   1e13c:	2000      	movs	r0, #0
   1e13e:	bcf0      	pop	{r4, r5, r6, r7}
   1e140:	4770      	bx	lr
   1e142:	bf00      	nop
   1e144:	00f10c36 	.word	0x00f10c36

0001e148 <LLF_RND_AdaptiveProportionTest>:
   1e148:	2800      	cmp	r0, #0
   1e14a:	d061      	beq.n	1e210 <LLF_RND_AdaptiveProportionTest+0xc8>
   1e14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e150:	1e4c      	subs	r4, r1, #1
   1e152:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1e156:	d227      	bcs.n	1e1a8 <LLF_RND_AdaptiveProportionTest+0x60>
   1e158:	b333      	cbz	r3, 1e1a8 <LLF_RND_AdaptiveProportionTest+0x60>
   1e15a:	b32a      	cbz	r2, 1e1a8 <LLF_RND_AdaptiveProportionTest+0x60>
   1e15c:	00cd      	lsls	r5, r1, #3
   1e15e:	2b01      	cmp	r3, #1
   1e160:	f105 3eff 	add.w	lr, r5, #4294967295
   1e164:	d030      	beq.n	1e1c8 <LLF_RND_AdaptiveProportionTest+0x80>
   1e166:	2100      	movs	r1, #0
   1e168:	468c      	mov	ip, r1
   1e16a:	460f      	mov	r7, r1
   1e16c:	460e      	mov	r6, r1
   1e16e:	f103 38ff 	add.w	r8, r3, #4294967295
   1e172:	094c      	lsrs	r4, r1, #5
   1e174:	f001 051f 	and.w	r5, r1, #31
   1e178:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1e17c:	2d1f      	cmp	r5, #31
   1e17e:	fa24 f405 	lsr.w	r4, r4, r5
   1e182:	bf18      	it	ne
   1e184:	f004 0401 	andne.w	r4, r4, #1
   1e188:	b921      	cbnz	r1, 1e194 <LLF_RND_AdaptiveProportionTest+0x4c>
   1e18a:	2601      	movs	r6, #1
   1e18c:	46b4      	mov	ip, r6
   1e18e:	4631      	mov	r1, r6
   1e190:	4627      	mov	r7, r4
   1e192:	e7ee      	b.n	1e172 <LLF_RND_AdaptiveProportionTest+0x2a>
   1e194:	42b3      	cmp	r3, r6
   1e196:	d013      	beq.n	1e1c0 <LLF_RND_AdaptiveProportionTest+0x78>
   1e198:	42a7      	cmp	r7, r4
   1e19a:	d101      	bne.n	1e1a0 <LLF_RND_AdaptiveProportionTest+0x58>
   1e19c:	f10c 0c01 	add.w	ip, ip, #1
   1e1a0:	4546      	cmp	r6, r8
   1e1a2:	d104      	bne.n	1e1ae <LLF_RND_AdaptiveProportionTest+0x66>
   1e1a4:	4562      	cmp	r2, ip
   1e1a6:	d202      	bcs.n	1e1ae <LLF_RND_AdaptiveProportionTest+0x66>
   1e1a8:	481a      	ldr	r0, [pc, #104]	; (1e214 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1e1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e1ae:	463c      	mov	r4, r7
   1e1b0:	3101      	adds	r1, #1
   1e1b2:	458e      	cmp	lr, r1
   1e1b4:	f106 0601 	add.w	r6, r6, #1
   1e1b8:	d2ea      	bcs.n	1e190 <LLF_RND_AdaptiveProportionTest+0x48>
   1e1ba:	2000      	movs	r0, #0
   1e1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e1c0:	2600      	movs	r6, #0
   1e1c2:	f04f 0c01 	mov.w	ip, #1
   1e1c6:	e7f3      	b.n	1e1b0 <LLF_RND_AdaptiveProportionTest+0x68>
   1e1c8:	2600      	movs	r6, #0
   1e1ca:	46b4      	mov	ip, r6
   1e1cc:	4637      	mov	r7, r6
   1e1ce:	4634      	mov	r4, r6
   1e1d0:	0961      	lsrs	r1, r4, #5
   1e1d2:	f004 031f 	and.w	r3, r4, #31
   1e1d6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1e1da:	2b1f      	cmp	r3, #31
   1e1dc:	fa21 f103 	lsr.w	r1, r1, r3
   1e1e0:	bf18      	it	ne
   1e1e2:	f001 0101 	andne.w	r1, r1, #1
   1e1e6:	b13c      	cbz	r4, 1e1f8 <LLF_RND_AdaptiveProportionTest+0xb0>
   1e1e8:	b95f      	cbnz	r7, 1e202 <LLF_RND_AdaptiveProportionTest+0xba>
   1e1ea:	458c      	cmp	ip, r1
   1e1ec:	d001      	beq.n	1e1f2 <LLF_RND_AdaptiveProportionTest+0xaa>
   1e1ee:	4661      	mov	r1, ip
   1e1f0:	e008      	b.n	1e204 <LLF_RND_AdaptiveProportionTest+0xbc>
   1e1f2:	3601      	adds	r6, #1
   1e1f4:	4661      	mov	r1, ip
   1e1f6:	e005      	b.n	1e204 <LLF_RND_AdaptiveProportionTest+0xbc>
   1e1f8:	2601      	movs	r6, #1
   1e1fa:	4634      	mov	r4, r6
   1e1fc:	468c      	mov	ip, r1
   1e1fe:	2701      	movs	r7, #1
   1e200:	e7e6      	b.n	1e1d0 <LLF_RND_AdaptiveProportionTest+0x88>
   1e202:	463e      	mov	r6, r7
   1e204:	42b2      	cmp	r2, r6
   1e206:	d3cf      	bcc.n	1e1a8 <LLF_RND_AdaptiveProportionTest+0x60>
   1e208:	3401      	adds	r4, #1
   1e20a:	42ac      	cmp	r4, r5
   1e20c:	d1f6      	bne.n	1e1fc <LLF_RND_AdaptiveProportionTest+0xb4>
   1e20e:	e7d4      	b.n	1e1ba <LLF_RND_AdaptiveProportionTest+0x72>
   1e210:	4800      	ldr	r0, [pc, #0]	; (1e214 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1e212:	4770      	bx	lr
   1e214:	00f10c37 	.word	0x00f10c37

0001e218 <getTrngSource>:
   1e218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e21c:	b08d      	sub	sp, #52	; 0x34
   1e21e:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   1e222:	4607      	mov	r7, r0
   1e224:	460c      	mov	r4, r1
   1e226:	2d00      	cmp	r5, #0
   1e228:	d14c      	bne.n	1e2c4 <getTrngSource+0xac>
   1e22a:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1e22e:	601e      	str	r6, [r3, #0]
   1e230:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1e232:	2100      	movs	r1, #0
   1e234:	6019      	str	r1, [r3, #0]
   1e236:	2a00      	cmp	r2, #0
   1e238:	f000 811f 	beq.w	1e47a <getTrngSource+0x262>
   1e23c:	4a9b      	ldr	r2, [pc, #620]	; (1e4ac <getTrngSource+0x294>)
   1e23e:	4b9c      	ldr	r3, [pc, #624]	; (1e4b0 <getTrngSource+0x298>)
   1e240:	6811      	ldr	r1, [r2, #0]
   1e242:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1e244:	681b      	ldr	r3, [r3, #0]
   1e246:	429a      	cmp	r2, r3
   1e248:	d147      	bne.n	1e2da <getTrngSource+0xc2>
   1e24a:	290a      	cmp	r1, #10
   1e24c:	d145      	bne.n	1e2da <getTrngSource+0xc2>
   1e24e:	78fb      	ldrb	r3, [r7, #3]
   1e250:	9304      	str	r3, [sp, #16]
   1e252:	4b98      	ldr	r3, [pc, #608]	; (1e4b4 <getTrngSource+0x29c>)
   1e254:	fba3 230a 	umull	r2, r3, r3, sl
   1e258:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   1e25c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   1e260:	f106 0208 	add.w	r2, r6, #8
   1e264:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   1e268:	2304      	movs	r3, #4
   1e26a:	9203      	str	r2, [sp, #12]
   1e26c:	9302      	str	r3, [sp, #8]
   1e26e:	46b8      	mov	r8, r7
   1e270:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1e272:	f8c3 a000 	str.w	sl, [r3]
   1e276:	f1ba 0f00 	cmp.w	sl, #0
   1e27a:	f000 80c4 	beq.w	1e406 <getTrngSource+0x1ee>
   1e27e:	9e03      	ldr	r6, [sp, #12]
   1e280:	4655      	mov	r5, sl
   1e282:	f04f 0900 	mov.w	r9, #0
   1e286:	f000 ff7b 	bl	1f180 <LLF_RND_TurnOffTrng>
   1e28a:	2300      	movs	r3, #0
   1e28c:	9305      	str	r3, [sp, #20]
   1e28e:	f1b8 0f00 	cmp.w	r8, #0
   1e292:	f000 80e6 	beq.w	1e462 <getTrngSource+0x24a>
   1e296:	2c00      	cmp	r4, #0
   1e298:	f000 80e3 	beq.w	1e462 <getTrngSource+0x24a>
   1e29c:	9b04      	ldr	r3, [sp, #16]
   1e29e:	2b00      	cmp	r3, #0
   1e2a0:	f000 80dd 	beq.w	1e45e <getTrngSource+0x246>
   1e2a4:	a904      	add	r1, sp, #16
   1e2a6:	4620      	mov	r0, r4
   1e2a8:	f000 ff5a 	bl	1f160 <LLF_RND_GetFastestRosc>
   1e2ac:	b1b8      	cbz	r0, 1e2de <getTrngSource+0xc6>
   1e2ae:	4b82      	ldr	r3, [pc, #520]	; (1e4b8 <getTrngSource+0x2a0>)
   1e2b0:	4298      	cmp	r0, r3
   1e2b2:	f040 80a8 	bne.w	1e406 <getTrngSource+0x1ee>
   1e2b6:	9002      	str	r0, [sp, #8]
   1e2b8:	f000 ff62 	bl	1f180 <LLF_RND_TurnOffTrng>
   1e2bc:	9802      	ldr	r0, [sp, #8]
   1e2be:	b00d      	add	sp, #52	; 0x34
   1e2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2c4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1e2c8:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   1e2cc:	3001      	adds	r0, #1
   1e2ce:	bf14      	ite	ne
   1e2d0:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   1e2d4:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   1e2d8:	e7a9      	b.n	1e22e <getTrngSource+0x16>
   1e2da:	4878      	ldr	r0, [pc, #480]	; (1e4bc <getTrngSource+0x2a4>)
   1e2dc:	e7eb      	b.n	1e2b6 <getTrngSource+0x9e>
   1e2de:	9804      	ldr	r0, [sp, #16]
   1e2e0:	4621      	mov	r1, r4
   1e2e2:	f000 ff1f 	bl	1f124 <LLF_RND_GetRoscSampleCnt>
   1e2e6:	2800      	cmp	r0, #0
   1e2e8:	d1e1      	bne.n	1e2ae <getTrngSource+0x96>
   1e2ea:	9f04      	ldr	r7, [sp, #16]
   1e2ec:	2f08      	cmp	r7, #8
   1e2ee:	f000 80ba 	beq.w	1e466 <getTrngSource+0x24e>
   1e2f2:	2f04      	cmp	r7, #4
   1e2f4:	f000 80b9 	beq.w	1e46a <getTrngSource+0x252>
   1e2f8:	f1a7 0702 	sub.w	r7, r7, #2
   1e2fc:	fab7 f787 	clz	r7, r7
   1e300:	097f      	lsrs	r7, r7, #5
   1e302:	496f      	ldr	r1, [pc, #444]	; (1e4c0 <getTrngSource+0x2a8>)
   1e304:	2301      	movs	r3, #1
   1e306:	600b      	str	r3, [r1, #0]
   1e308:	f841 3c84 	str.w	r3, [r1, #-132]
   1e30c:	4619      	mov	r1, r3
   1e30e:	4b6c      	ldr	r3, [pc, #432]	; (1e4c0 <getTrngSource+0x2a8>)
   1e310:	4867      	ldr	r0, [pc, #412]	; (1e4b0 <getTrngSource+0x298>)
   1e312:	6019      	str	r1, [r3, #0]
   1e314:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e316:	6003      	str	r3, [r0, #0]
   1e318:	6800      	ldr	r0, [r0, #0]
   1e31a:	4283      	cmp	r3, r0
   1e31c:	d1f7      	bne.n	1e30e <getTrngSource+0xf6>
   1e31e:	4a69      	ldr	r2, [pc, #420]	; (1e4c4 <getTrngSource+0x2ac>)
   1e320:	2300      	movs	r3, #0
   1e322:	6013      	str	r3, [r2, #0]
   1e324:	f04f 30ff 	mov.w	r0, #4294967295
   1e328:	f7ff fd0a 	bl	1dd40 <CC_HalClearInterruptBit>
   1e32c:	2300      	movs	r3, #0
   1e32e:	4618      	mov	r0, r3
   1e330:	4b65      	ldr	r3, [pc, #404]	; (1e4c8 <getTrngSource+0x2b0>)
   1e332:	f06f 011b 	mvn.w	r1, #27
   1e336:	6019      	str	r1, [r3, #0]
   1e338:	f7ff fd10 	bl	1dd5c <CC_HalMaskInterrupt>
   1e33c:	4963      	ldr	r1, [pc, #396]	; (1e4cc <getTrngSource+0x2b4>)
   1e33e:	4b64      	ldr	r3, [pc, #400]	; (1e4d0 <getTrngSource+0x2b8>)
   1e340:	600f      	str	r7, [r1, #0]
   1e342:	6818      	ldr	r0, [r3, #0]
   1e344:	4f5b      	ldr	r7, [pc, #364]	; (1e4b4 <getTrngSource+0x29c>)
   1e346:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1e34a:	f7ff fd07 	bl	1dd5c <CC_HalMaskInterrupt>
   1e34e:	4b57      	ldr	r3, [pc, #348]	; (1e4ac <getTrngSource+0x294>)
   1e350:	4860      	ldr	r0, [pc, #384]	; (1e4d4 <getTrngSource+0x2bc>)
   1e352:	210a      	movs	r1, #10
   1e354:	6019      	str	r1, [r3, #0]
   1e356:	6921      	ldr	r1, [r4, #16]
   1e358:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e35a:	fba7 c101 	umull	ip, r1, r7, r1
   1e35e:	0909      	lsrs	r1, r1, #4
   1e360:	fb03 f301 	mul.w	r3, r3, r1
   1e364:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e368:	03db      	lsls	r3, r3, #15
   1e36a:	099b      	lsrs	r3, r3, #6
   1e36c:	6003      	str	r3, [r0, #0]
   1e36e:	4b55      	ldr	r3, [pc, #340]	; (1e4c4 <getTrngSource+0x2ac>)
   1e370:	2201      	movs	r2, #1
   1e372:	601a      	str	r2, [r3, #0]
   1e374:	9904      	ldr	r1, [sp, #16]
   1e376:	f8d8 2000 	ldr.w	r2, [r8]
   1e37a:	020b      	lsls	r3, r1, #8
   1e37c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1e380:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1e384:	4313      	orrs	r3, r2
   1e386:	f8c8 3000 	str.w	r3, [r8]
   1e38a:	a805      	add	r0, sp, #20
   1e38c:	f000 feba 	bl	1f104 <LLF_RND_WaitRngInterrupt>
   1e390:	9b05      	ldr	r3, [sp, #20]
   1e392:	f003 031a 	and.w	r3, r3, #26
   1e396:	4303      	orrs	r3, r0
   1e398:	d135      	bne.n	1e406 <getTrngSource+0x1ee>
   1e39a:	4a4f      	ldr	r2, [pc, #316]	; (1e4d8 <getTrngSource+0x2c0>)
   1e39c:	4b4f      	ldr	r3, [pc, #316]	; (1e4dc <getTrngSource+0x2c4>)
   1e39e:	6812      	ldr	r2, [r2, #0]
   1e3a0:	9206      	str	r2, [sp, #24]
   1e3a2:	681a      	ldr	r2, [r3, #0]
   1e3a4:	9207      	str	r2, [sp, #28]
   1e3a6:	685a      	ldr	r2, [r3, #4]
   1e3a8:	9208      	str	r2, [sp, #32]
   1e3aa:	689a      	ldr	r2, [r3, #8]
   1e3ac:	9209      	str	r2, [sp, #36]	; 0x24
   1e3ae:	68da      	ldr	r2, [r3, #12]
   1e3b0:	920a      	str	r2, [sp, #40]	; 0x28
   1e3b2:	3310      	adds	r3, #16
   1e3b4:	fba7 2705 	umull	r2, r7, r7, r5
   1e3b8:	681b      	ldr	r3, [r3, #0]
   1e3ba:	930b      	str	r3, [sp, #44]	; 0x2c
   1e3bc:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   1e3c0:	d102      	bne.n	1e3c8 <getTrngSource+0x1b0>
   1e3c2:	f1bb 0f00 	cmp.w	fp, #0
   1e3c6:	d141      	bne.n	1e44c <getTrngSource+0x234>
   1e3c8:	2218      	movs	r2, #24
   1e3ca:	4630      	mov	r0, r6
   1e3cc:	eb0d 0102 	add.w	r1, sp, r2
   1e3d0:	f000 fe3c 	bl	1f04c <CC_PalMemCopyPlat>
   1e3d4:	3d18      	subs	r5, #24
   1e3d6:	3618      	adds	r6, #24
   1e3d8:	f109 0901 	add.w	r9, r9, #1
   1e3dc:	2d00      	cmp	r5, #0
   1e3de:	f47f af52 	bne.w	1e286 <getTrngSource+0x6e>
   1e3e2:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   1e3e6:	d85d      	bhi.n	1e4a4 <getTrngSource+0x28c>
   1e3e8:	9d03      	ldr	r5, [sp, #12]
   1e3ea:	6962      	ldr	r2, [r4, #20]
   1e3ec:	4651      	mov	r1, sl
   1e3ee:	4628      	mov	r0, r5
   1e3f0:	f7ff fe7c 	bl	1e0ec <LLF_RND_RepetitionCounterTest.part.0>
   1e3f4:	2800      	cmp	r0, #0
   1e3f6:	d04b      	beq.n	1e490 <getTrngSource+0x278>
   1e3f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1e3fa:	2300      	movs	r3, #0
   1e3fc:	6013      	str	r3, [r2, #0]
   1e3fe:	4b2e      	ldr	r3, [pc, #184]	; (1e4b8 <getTrngSource+0x2a0>)
   1e400:	4298      	cmp	r0, r3
   1e402:	f43f af58 	beq.w	1e2b6 <getTrngSource+0x9e>
   1e406:	9d04      	ldr	r5, [sp, #16]
   1e408:	2d08      	cmp	r5, #8
   1e40a:	d034      	beq.n	1e476 <getTrngSource+0x25e>
   1e40c:	2200      	movs	r2, #0
   1e40e:	ab04      	add	r3, sp, #16
   1e410:	006d      	lsls	r5, r5, #1
   1e412:	9200      	str	r2, [sp, #0]
   1e414:	4621      	mov	r1, r4
   1e416:	4640      	mov	r0, r8
   1e418:	9504      	str	r5, [sp, #16]
   1e41a:	f7ff fdbd 	bl	1df98 <startTrngHW>
   1e41e:	4b30      	ldr	r3, [pc, #192]	; (1e4e0 <getTrngSource+0x2c8>)
   1e420:	4298      	cmp	r0, r3
   1e422:	d024      	beq.n	1e46e <getTrngSource+0x256>
   1e424:	2800      	cmp	r0, #0
   1e426:	f47f af46 	bne.w	1e2b6 <getTrngSource+0x9e>
   1e42a:	f8d8 2000 	ldr.w	r2, [r8]
   1e42e:	0a13      	lsrs	r3, r2, #8
   1e430:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1e434:	4313      	orrs	r3, r2
   1e436:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1e43a:	f8c8 3000 	str.w	r3, [r8]
   1e43e:	9b02      	ldr	r3, [sp, #8]
   1e440:	3b01      	subs	r3, #1
   1e442:	9302      	str	r3, [sp, #8]
   1e444:	f47f af14 	bne.w	1e270 <getTrngSource+0x58>
   1e448:	2000      	movs	r0, #0
   1e44a:	e734      	b.n	1e2b6 <getTrngSource+0x9e>
   1e44c:	4630      	mov	r0, r6
   1e44e:	465a      	mov	r2, fp
   1e450:	a906      	add	r1, sp, #24
   1e452:	f000 fdfb 	bl	1f04c <CC_PalMemCopyPlat>
   1e456:	eba5 050b 	sub.w	r5, r5, fp
   1e45a:	445e      	add	r6, fp
   1e45c:	e7bc      	b.n	1e3d8 <getTrngSource+0x1c0>
   1e45e:	4820      	ldr	r0, [pc, #128]	; (1e4e0 <getTrngSource+0x2c8>)
   1e460:	e725      	b.n	1e2ae <getTrngSource+0x96>
   1e462:	4820      	ldr	r0, [pc, #128]	; (1e4e4 <getTrngSource+0x2cc>)
   1e464:	e723      	b.n	1e2ae <getTrngSource+0x96>
   1e466:	2703      	movs	r7, #3
   1e468:	e74b      	b.n	1e302 <getTrngSource+0xea>
   1e46a:	2702      	movs	r7, #2
   1e46c:	e749      	b.n	1e302 <getTrngSource+0xea>
   1e46e:	6a23      	ldr	r3, [r4, #32]
   1e470:	2b00      	cmp	r3, #0
   1e472:	f43f af20 	beq.w	1e2b6 <getTrngSource+0x9e>
   1e476:	481c      	ldr	r0, [pc, #112]	; (1e4e8 <getTrngSource+0x2d0>)
   1e478:	e71d      	b.n	1e2b6 <getTrngSource+0x9e>
   1e47a:	9500      	str	r5, [sp, #0]
   1e47c:	ab04      	add	r3, sp, #16
   1e47e:	2201      	movs	r2, #1
   1e480:	4621      	mov	r1, r4
   1e482:	4638      	mov	r0, r7
   1e484:	f7ff fd88 	bl	1df98 <startTrngHW>
   1e488:	2800      	cmp	r0, #0
   1e48a:	f43f aee2 	beq.w	1e252 <getTrngSource+0x3a>
   1e48e:	e712      	b.n	1e2b6 <getTrngSource+0x9e>
   1e490:	69a2      	ldr	r2, [r4, #24]
   1e492:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1e496:	4651      	mov	r1, sl
   1e498:	4628      	mov	r0, r5
   1e49a:	f7ff fe55 	bl	1e148 <LLF_RND_AdaptiveProportionTest>
   1e49e:	2800      	cmp	r0, #0
   1e4a0:	d1aa      	bne.n	1e3f8 <getTrngSource+0x1e0>
   1e4a2:	e7d1      	b.n	1e448 <getTrngSource+0x230>
   1e4a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1e4a6:	601d      	str	r5, [r3, #0]
   1e4a8:	e7ad      	b.n	1e406 <getTrngSource+0x1ee>
   1e4aa:	bf00      	nop
   1e4ac:	5002b138 	.word	0x5002b138
   1e4b0:	5002b130 	.word	0x5002b130
   1e4b4:	aaaaaaab 	.word	0xaaaaaaab
   1e4b8:	00f10c02 	.word	0x00f10c02
   1e4bc:	00f10c30 	.word	0x00f10c30
   1e4c0:	5002b1c4 	.word	0x5002b1c4
   1e4c4:	5002b12c 	.word	0x5002b12c
   1e4c8:	5002b100 	.word	0x5002b100
   1e4cc:	5002b10c 	.word	0x5002b10c
   1e4d0:	5002ba04 	.word	0x5002ba04
   1e4d4:	5002b1d8 	.word	0x5002b1d8
   1e4d8:	5002b114 	.word	0x5002b114
   1e4dc:	5002b118 	.word	0x5002b118
   1e4e0:	00f10c31 	.word	0x00f10c31
   1e4e4:	00f10c35 	.word	0x00f10c35
   1e4e8:	00f10c32 	.word	0x00f10c32

0001e4ec <LLF_RND_GetTrngSource>:
   1e4ec:	b430      	push	{r4, r5}
   1e4ee:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1e4f2:	9d04      	ldr	r5, [sp, #16]
   1e4f4:	9402      	str	r4, [sp, #8]
   1e4f6:	2400      	movs	r4, #0
   1e4f8:	e9cd 5403 	strd	r5, r4, [sp, #12]
   1e4fc:	bc30      	pop	{r4, r5}
   1e4fe:	f7ff be8b 	b.w	1e218 <getTrngSource>
   1e502:	bf00      	nop

0001e504 <LLF_RND_RunTrngStartupTest>:
   1e504:	b510      	push	{r4, lr}
   1e506:	b086      	sub	sp, #24
   1e508:	ab05      	add	r3, sp, #20
   1e50a:	2401      	movs	r4, #1
   1e50c:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1e510:	9300      	str	r3, [sp, #0]
   1e512:	2200      	movs	r2, #0
   1e514:	ab04      	add	r3, sp, #16
   1e516:	f7ff fe7f 	bl	1e218 <getTrngSource>
   1e51a:	b006      	add	sp, #24
   1e51c:	bd10      	pop	{r4, pc}
   1e51e:	bf00      	nop

0001e520 <mbedtls_platform_zeroize>:
   1e520:	b138      	cbz	r0, 1e532 <mbedtls_platform_zeroize+0x12>
   1e522:	b131      	cbz	r1, 1e532 <mbedtls_platform_zeroize+0x12>
   1e524:	4401      	add	r1, r0
   1e526:	2200      	movs	r2, #0
   1e528:	4603      	mov	r3, r0
   1e52a:	3001      	adds	r0, #1
   1e52c:	4281      	cmp	r1, r0
   1e52e:	701a      	strb	r2, [r3, #0]
   1e530:	d1fa      	bne.n	1e528 <mbedtls_platform_zeroize+0x8>
   1e532:	4770      	bx	lr

0001e534 <mbedtls_hardware_poll>:
   1e534:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e536:	b089      	sub	sp, #36	; 0x24
   1e538:	9205      	str	r2, [sp, #20]
   1e53a:	2900      	cmp	r1, #0
   1e53c:	d064      	beq.n	1e608 <mbedtls_hardware_poll+0xd4>
   1e53e:	461c      	mov	r4, r3
   1e540:	2b00      	cmp	r3, #0
   1e542:	d061      	beq.n	1e608 <mbedtls_hardware_poll+0xd4>
   1e544:	4615      	mov	r5, r2
   1e546:	2a00      	cmp	r2, #0
   1e548:	d05e      	beq.n	1e608 <mbedtls_hardware_poll+0xd4>
   1e54a:	4f31      	ldr	r7, [pc, #196]	; (1e610 <mbedtls_hardware_poll+0xdc>)
   1e54c:	460e      	mov	r6, r1
   1e54e:	6838      	ldr	r0, [r7, #0]
   1e550:	f04f 31ff 	mov.w	r1, #4294967295
   1e554:	f7ff fc9c 	bl	1de90 <CC_PalMutexLock>
   1e558:	2800      	cmp	r0, #0
   1e55a:	d14b      	bne.n	1e5f4 <mbedtls_hardware_poll+0xc0>
   1e55c:	2000      	movs	r0, #0
   1e55e:	f7ff fcc7 	bl	1def0 <CC_PalPowerSaveModeSelect>
   1e562:	2800      	cmp	r0, #0
   1e564:	d142      	bne.n	1e5ec <mbedtls_hardware_poll+0xb8>
   1e566:	482b      	ldr	r0, [pc, #172]	; (1e614 <mbedtls_hardware_poll+0xe0>)
   1e568:	f000 fd34 	bl	1efd4 <RNG_PLAT_SetUserRngParameters>
   1e56c:	b1d8      	cbz	r0, 1e5a6 <mbedtls_hardware_poll+0x72>
   1e56e:	2001      	movs	r0, #1
   1e570:	f04f 36ff 	mov.w	r6, #4294967295
   1e574:	f7ff fcbc 	bl	1def0 <CC_PalPowerSaveModeSelect>
   1e578:	2800      	cmp	r0, #0
   1e57a:	d133      	bne.n	1e5e4 <mbedtls_hardware_poll+0xb0>
   1e57c:	4826      	ldr	r0, [pc, #152]	; (1e618 <mbedtls_hardware_poll+0xe4>)
   1e57e:	f44f 7108 	mov.w	r1, #544	; 0x220
   1e582:	f7ff ffcd 	bl	1e520 <mbedtls_platform_zeroize>
   1e586:	4825      	ldr	r0, [pc, #148]	; (1e61c <mbedtls_hardware_poll+0xe8>)
   1e588:	2104      	movs	r1, #4
   1e58a:	f7ff ffc9 	bl	1e520 <mbedtls_platform_zeroize>
   1e58e:	4821      	ldr	r0, [pc, #132]	; (1e614 <mbedtls_hardware_poll+0xe0>)
   1e590:	2128      	movs	r1, #40	; 0x28
   1e592:	f7ff ffc5 	bl	1e520 <mbedtls_platform_zeroize>
   1e596:	6838      	ldr	r0, [r7, #0]
   1e598:	f7ff fc82 	bl	1dea0 <CC_PalMutexUnlock>
   1e59c:	2800      	cmp	r0, #0
   1e59e:	d12d      	bne.n	1e5fc <mbedtls_hardware_poll+0xc8>
   1e5a0:	4630      	mov	r0, r6
   1e5a2:	b009      	add	sp, #36	; 0x24
   1e5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e5a6:	491c      	ldr	r1, [pc, #112]	; (1e618 <mbedtls_hardware_poll+0xe4>)
   1e5a8:	9003      	str	r0, [sp, #12]
   1e5aa:	ab07      	add	r3, sp, #28
   1e5ac:	4602      	mov	r2, r0
   1e5ae:	9102      	str	r1, [sp, #8]
   1e5b0:	9300      	str	r3, [sp, #0]
   1e5b2:	4918      	ldr	r1, [pc, #96]	; (1e614 <mbedtls_hardware_poll+0xe0>)
   1e5b4:	4819      	ldr	r0, [pc, #100]	; (1e61c <mbedtls_hardware_poll+0xe8>)
   1e5b6:	9401      	str	r4, [sp, #4]
   1e5b8:	ab05      	add	r3, sp, #20
   1e5ba:	f7ff ff97 	bl	1e4ec <LLF_RND_GetTrngSource>
   1e5be:	4603      	mov	r3, r0
   1e5c0:	2800      	cmp	r0, #0
   1e5c2:	d1d4      	bne.n	1e56e <mbedtls_hardware_poll+0x3a>
   1e5c4:	6822      	ldr	r2, [r4, #0]
   1e5c6:	42aa      	cmp	r2, r5
   1e5c8:	d3d1      	bcc.n	1e56e <mbedtls_hardware_poll+0x3a>
   1e5ca:	9907      	ldr	r1, [sp, #28]
   1e5cc:	4630      	mov	r0, r6
   1e5ce:	3108      	adds	r1, #8
   1e5d0:	462a      	mov	r2, r5
   1e5d2:	461e      	mov	r6, r3
   1e5d4:	f000 fd3a 	bl	1f04c <CC_PalMemCopyPlat>
   1e5d8:	6025      	str	r5, [r4, #0]
   1e5da:	2001      	movs	r0, #1
   1e5dc:	f7ff fc88 	bl	1def0 <CC_PalPowerSaveModeSelect>
   1e5e0:	2800      	cmp	r0, #0
   1e5e2:	d0cb      	beq.n	1e57c <mbedtls_hardware_poll+0x48>
   1e5e4:	480e      	ldr	r0, [pc, #56]	; (1e620 <mbedtls_hardware_poll+0xec>)
   1e5e6:	f7ff f8bd 	bl	1d764 <CC_PalAbort>
   1e5ea:	e7c7      	b.n	1e57c <mbedtls_hardware_poll+0x48>
   1e5ec:	480d      	ldr	r0, [pc, #52]	; (1e624 <mbedtls_hardware_poll+0xf0>)
   1e5ee:	f7ff f8b9 	bl	1d764 <CC_PalAbort>
   1e5f2:	e7b8      	b.n	1e566 <mbedtls_hardware_poll+0x32>
   1e5f4:	480c      	ldr	r0, [pc, #48]	; (1e628 <mbedtls_hardware_poll+0xf4>)
   1e5f6:	f7ff f8b5 	bl	1d764 <CC_PalAbort>
   1e5fa:	e7af      	b.n	1e55c <mbedtls_hardware_poll+0x28>
   1e5fc:	480b      	ldr	r0, [pc, #44]	; (1e62c <mbedtls_hardware_poll+0xf8>)
   1e5fe:	f7ff f8b1 	bl	1d764 <CC_PalAbort>
   1e602:	4630      	mov	r0, r6
   1e604:	b009      	add	sp, #36	; 0x24
   1e606:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e608:	f04f 36ff 	mov.w	r6, #4294967295
   1e60c:	e7c8      	b.n	1e5a0 <mbedtls_hardware_poll+0x6c>
   1e60e:	bf00      	nop
   1e610:	20000584 	.word	0x20000584
   1e614:	20002964 	.word	0x20002964
   1e618:	20002744 	.word	0x20002744
   1e61c:	20002740 	.word	0x20002740
   1e620:	0002354c 	.word	0x0002354c
   1e624:	0002352c 	.word	0x0002352c
   1e628:	00023514 	.word	0x00023514
   1e62c:	000235a4 	.word	0x000235a4

0001e630 <cc_mbedtls_sha256_init>:
   1e630:	b510      	push	{r4, lr}
   1e632:	4604      	mov	r4, r0
   1e634:	b128      	cbz	r0, 1e642 <cc_mbedtls_sha256_init+0x12>
   1e636:	4620      	mov	r0, r4
   1e638:	21f0      	movs	r1, #240	; 0xf0
   1e63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e63e:	f000 bd09 	b.w	1f054 <CC_PalMemSetZeroPlat>
   1e642:	4804      	ldr	r0, [pc, #16]	; (1e654 <cc_mbedtls_sha256_init+0x24>)
   1e644:	f7ff f88e 	bl	1d764 <CC_PalAbort>
   1e648:	4620      	mov	r0, r4
   1e64a:	21f0      	movs	r1, #240	; 0xf0
   1e64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e650:	f000 bd00 	b.w	1f054 <CC_PalMemSetZeroPlat>
   1e654:	000235bc 	.word	0x000235bc

0001e658 <cc_mbedtls_sha256_free>:
   1e658:	b110      	cbz	r0, 1e660 <cc_mbedtls_sha256_free+0x8>
   1e65a:	21f0      	movs	r1, #240	; 0xf0
   1e65c:	f7ff bf60 	b.w	1e520 <mbedtls_platform_zeroize>
   1e660:	4770      	bx	lr
   1e662:	bf00      	nop

0001e664 <cc_mbedtls_sha256_starts_ret>:
   1e664:	b508      	push	{r3, lr}
   1e666:	b161      	cbz	r1, 1e682 <cc_mbedtls_sha256_starts_ret+0x1e>
   1e668:	2901      	cmp	r1, #1
   1e66a:	d107      	bne.n	1e67c <cc_mbedtls_sha256_starts_ret+0x18>
   1e66c:	2102      	movs	r1, #2
   1e66e:	f000 f839 	bl	1e6e4 <mbedtls_sha_starts_internal>
   1e672:	2800      	cmp	r0, #0
   1e674:	bf18      	it	ne
   1e676:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1e67a:	bd08      	pop	{r3, pc}
   1e67c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e680:	bd08      	pop	{r3, pc}
   1e682:	2101      	movs	r1, #1
   1e684:	f000 f82e 	bl	1e6e4 <mbedtls_sha_starts_internal>
   1e688:	e7f3      	b.n	1e672 <cc_mbedtls_sha256_starts_ret+0xe>
   1e68a:	bf00      	nop

0001e68c <cc_mbedtls_sha256_update_ret>:
   1e68c:	b508      	push	{r3, lr}
   1e68e:	f000 f86b 	bl	1e768 <mbedtls_sha_update_internal>
   1e692:	2800      	cmp	r0, #0
   1e694:	bf18      	it	ne
   1e696:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1e69a:	bd08      	pop	{r3, pc}

0001e69c <cc_mbedtls_sha256_finish_ret>:
   1e69c:	b570      	push	{r4, r5, r6, lr}
   1e69e:	b1e8      	cbz	r0, 1e6dc <cc_mbedtls_sha256_finish_ret+0x40>
   1e6a0:	460e      	mov	r6, r1
   1e6a2:	b1d9      	cbz	r1, 1e6dc <cc_mbedtls_sha256_finish_ret+0x40>
   1e6a4:	4604      	mov	r4, r0
   1e6a6:	f000 f831 	bl	1e70c <mbedtls_sha_finish_internal>
   1e6aa:	4605      	mov	r5, r0
   1e6ac:	b9b0      	cbnz	r0, 1e6dc <cc_mbedtls_sha256_finish_ret+0x40>
   1e6ae:	6823      	ldr	r3, [r4, #0]
   1e6b0:	2b01      	cmp	r3, #1
   1e6b2:	d00b      	beq.n	1e6cc <cc_mbedtls_sha256_finish_ret+0x30>
   1e6b4:	2b02      	cmp	r3, #2
   1e6b6:	d001      	beq.n	1e6bc <cc_mbedtls_sha256_finish_ret+0x20>
   1e6b8:	4628      	mov	r0, r5
   1e6ba:	bd70      	pop	{r4, r5, r6, pc}
   1e6bc:	f104 0108 	add.w	r1, r4, #8
   1e6c0:	4630      	mov	r0, r6
   1e6c2:	221c      	movs	r2, #28
   1e6c4:	f000 fcc2 	bl	1f04c <CC_PalMemCopyPlat>
   1e6c8:	4628      	mov	r0, r5
   1e6ca:	bd70      	pop	{r4, r5, r6, pc}
   1e6cc:	f104 0108 	add.w	r1, r4, #8
   1e6d0:	4630      	mov	r0, r6
   1e6d2:	2220      	movs	r2, #32
   1e6d4:	f000 fcba 	bl	1f04c <CC_PalMemCopyPlat>
   1e6d8:	4628      	mov	r0, r5
   1e6da:	bd70      	pop	{r4, r5, r6, pc}
   1e6dc:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1e6e0:	e7ea      	b.n	1e6b8 <cc_mbedtls_sha256_finish_ret+0x1c>
   1e6e2:	bf00      	nop

0001e6e4 <mbedtls_sha_starts_internal>:
   1e6e4:	b178      	cbz	r0, 1e706 <mbedtls_sha_starts_internal+0x22>
   1e6e6:	b538      	push	{r3, r4, r5, lr}
   1e6e8:	4604      	mov	r4, r0
   1e6ea:	460d      	mov	r5, r1
   1e6ec:	21f0      	movs	r1, #240	; 0xf0
   1e6ee:	f000 fcb1 	bl	1f054 <CC_PalMemSetZeroPlat>
   1e6f2:	2340      	movs	r3, #64	; 0x40
   1e6f4:	6025      	str	r5, [r4, #0]
   1e6f6:	65e3      	str	r3, [r4, #92]	; 0x5c
   1e6f8:	4620      	mov	r0, r4
   1e6fa:	f000 fd83 	bl	1f204 <InitHashDrv>
   1e6fe:	3800      	subs	r0, #0
   1e700:	bf18      	it	ne
   1e702:	2001      	movne	r0, #1
   1e704:	bd38      	pop	{r3, r4, r5, pc}
   1e706:	2001      	movs	r0, #1
   1e708:	4770      	bx	lr
   1e70a:	bf00      	nop

0001e70c <mbedtls_sha_finish_internal>:
   1e70c:	b570      	push	{r4, r5, r6, lr}
   1e70e:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1e710:	b0a4      	sub	sp, #144	; 0x90
   1e712:	4604      	mov	r4, r0
   1e714:	ae04      	add	r6, sp, #16
   1e716:	b9e5      	cbnz	r5, 1e752 <mbedtls_sha_finish_internal+0x46>
   1e718:	2201      	movs	r2, #1
   1e71a:	2300      	movs	r3, #0
   1e71c:	6062      	str	r2, [r4, #4]
   1e71e:	4630      	mov	r0, r6
   1e720:	e9cd 3300 	strd	r3, r3, [sp]
   1e724:	aa02      	add	r2, sp, #8
   1e726:	4629      	mov	r1, r5
   1e728:	f000 fd38 	bl	1f19c <SetDataBuffersInfo>
   1e72c:	b110      	cbz	r0, 1e734 <mbedtls_sha_finish_internal+0x28>
   1e72e:	2001      	movs	r0, #1
   1e730:	b024      	add	sp, #144	; 0x90
   1e732:	bd70      	pop	{r4, r5, r6, pc}
   1e734:	462a      	mov	r2, r5
   1e736:	a902      	add	r1, sp, #8
   1e738:	4620      	mov	r0, r4
   1e73a:	f000 fd8d 	bl	1f258 <ProcessHashDrv>
   1e73e:	2800      	cmp	r0, #0
   1e740:	d1f5      	bne.n	1e72e <mbedtls_sha_finish_internal+0x22>
   1e742:	4620      	mov	r0, r4
   1e744:	f000 feb6 	bl	1f4b4 <FinishHashDrv>
   1e748:	2800      	cmp	r0, #0
   1e74a:	d1f0      	bne.n	1e72e <mbedtls_sha_finish_internal+0x22>
   1e74c:	6620      	str	r0, [r4, #96]	; 0x60
   1e74e:	b024      	add	sp, #144	; 0x90
   1e750:	bd70      	pop	{r4, r5, r6, pc}
   1e752:	2d80      	cmp	r5, #128	; 0x80
   1e754:	462a      	mov	r2, r5
   1e756:	4630      	mov	r0, r6
   1e758:	bf28      	it	cs
   1e75a:	2280      	movcs	r2, #128	; 0x80
   1e75c:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1e760:	f000 fc74 	bl	1f04c <CC_PalMemCopyPlat>
   1e764:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1e766:	e7d7      	b.n	1e718 <mbedtls_sha_finish_internal+0xc>

0001e768 <mbedtls_sha_update_internal>:
   1e768:	2800      	cmp	r0, #0
   1e76a:	d054      	beq.n	1e816 <mbedtls_sha_update_internal+0xae>
   1e76c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e76e:	4614      	mov	r4, r2
   1e770:	b0a5      	sub	sp, #148	; 0x94
   1e772:	b1b2      	cbz	r2, 1e7a2 <mbedtls_sha_update_internal+0x3a>
   1e774:	460e      	mov	r6, r1
   1e776:	b351      	cbz	r1, 1e7ce <mbedtls_sha_update_internal+0x66>
   1e778:	4605      	mov	r5, r0
   1e77a:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   1e77e:	1a1a      	subs	r2, r3, r0
   1e780:	fbb2 f7f3 	udiv	r7, r2, r3
   1e784:	fb03 2717 	mls	r7, r3, r7, r2
   1e788:	42a7      	cmp	r7, r4
   1e78a:	bf28      	it	cs
   1e78c:	4627      	movcs	r7, r4
   1e78e:	2f00      	cmp	r7, #0
   1e790:	d143      	bne.n	1e81a <mbedtls_sha_update_internal+0xb2>
   1e792:	4283      	cmp	r3, r0
   1e794:	d008      	beq.n	1e7a8 <mbedtls_sha_update_internal+0x40>
   1e796:	fbb4 f7f3 	udiv	r7, r4, r3
   1e79a:	fb03 f707 	mul.w	r7, r3, r7
   1e79e:	b9cf      	cbnz	r7, 1e7d4 <mbedtls_sha_update_internal+0x6c>
   1e7a0:	bb6c      	cbnz	r4, 1e7fe <mbedtls_sha_update_internal+0x96>
   1e7a2:	2000      	movs	r0, #0
   1e7a4:	b025      	add	sp, #148	; 0x94
   1e7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e7a8:	2b80      	cmp	r3, #128	; 0x80
   1e7aa:	bf28      	it	cs
   1e7ac:	2380      	movcs	r3, #128	; 0x80
   1e7ae:	461a      	mov	r2, r3
   1e7b0:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1e7b4:	a804      	add	r0, sp, #16
   1e7b6:	f000 fc49 	bl	1f04c <CC_PalMemCopyPlat>
   1e7ba:	2300      	movs	r3, #0
   1e7bc:	e9cd 3300 	strd	r3, r3, [sp]
   1e7c0:	a804      	add	r0, sp, #16
   1e7c2:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1e7c4:	aa02      	add	r2, sp, #8
   1e7c6:	f000 fce9 	bl	1f19c <SetDataBuffersInfo>
   1e7ca:	2800      	cmp	r0, #0
   1e7cc:	d032      	beq.n	1e834 <mbedtls_sha_update_internal+0xcc>
   1e7ce:	2001      	movs	r0, #1
   1e7d0:	b025      	add	sp, #148	; 0x94
   1e7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e7d4:	2300      	movs	r3, #0
   1e7d6:	e9cd 3300 	strd	r3, r3, [sp]
   1e7da:	aa02      	add	r2, sp, #8
   1e7dc:	4639      	mov	r1, r7
   1e7de:	4630      	mov	r0, r6
   1e7e0:	f000 fcdc 	bl	1f19c <SetDataBuffersInfo>
   1e7e4:	2800      	cmp	r0, #0
   1e7e6:	d1f2      	bne.n	1e7ce <mbedtls_sha_update_internal+0x66>
   1e7e8:	a902      	add	r1, sp, #8
   1e7ea:	463a      	mov	r2, r7
   1e7ec:	4628      	mov	r0, r5
   1e7ee:	f000 fd33 	bl	1f258 <ProcessHashDrv>
   1e7f2:	2800      	cmp	r0, #0
   1e7f4:	d1eb      	bne.n	1e7ce <mbedtls_sha_update_internal+0x66>
   1e7f6:	1be4      	subs	r4, r4, r7
   1e7f8:	443e      	add	r6, r7
   1e7fa:	2c00      	cmp	r4, #0
   1e7fc:	d0d1      	beq.n	1e7a2 <mbedtls_sha_update_internal+0x3a>
   1e7fe:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e800:	3019      	adds	r0, #25
   1e802:	4622      	mov	r2, r4
   1e804:	4631      	mov	r1, r6
   1e806:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1e80a:	f000 fc1f 	bl	1f04c <CC_PalMemCopyPlat>
   1e80e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1e810:	4422      	add	r2, r4
   1e812:	662a      	str	r2, [r5, #96]	; 0x60
   1e814:	e7c5      	b.n	1e7a2 <mbedtls_sha_update_internal+0x3a>
   1e816:	2001      	movs	r0, #1
   1e818:	4770      	bx	lr
   1e81a:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1e81e:	4418      	add	r0, r3
   1e820:	463a      	mov	r2, r7
   1e822:	f000 fc13 	bl	1f04c <CC_PalMemCopyPlat>
   1e826:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   1e82a:	4438      	add	r0, r7
   1e82c:	443e      	add	r6, r7
   1e82e:	1be4      	subs	r4, r4, r7
   1e830:	6628      	str	r0, [r5, #96]	; 0x60
   1e832:	e7ae      	b.n	1e792 <mbedtls_sha_update_internal+0x2a>
   1e834:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e836:	a902      	add	r1, sp, #8
   1e838:	4628      	mov	r0, r5
   1e83a:	f000 fd0d 	bl	1f258 <ProcessHashDrv>
   1e83e:	2800      	cmp	r0, #0
   1e840:	d1c5      	bne.n	1e7ce <mbedtls_sha_update_internal+0x66>
   1e842:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e844:	6628      	str	r0, [r5, #96]	; 0x60
   1e846:	e7a6      	b.n	1e796 <mbedtls_sha_update_internal+0x2e>

0001e848 <block_cipher_df>:
   1e848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e84c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1e850:	b0b1      	sub	sp, #196	; 0xc4
   1e852:	f200 812e 	bhi.w	1eab2 <block_cipher_df+0x26a>
   1e856:	f8df 926c 	ldr.w	r9, [pc, #620]	; 1eac4 <block_cipher_df+0x27c>
   1e85a:	4614      	mov	r4, r2
   1e85c:	460d      	mov	r5, r1
   1e85e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1e862:	2100      	movs	r1, #0
   1e864:	4682      	mov	sl, r0
   1e866:	4648      	mov	r0, r9
   1e868:	f004 fa1f 	bl	22caa <memset>
   1e86c:	a813      	add	r0, sp, #76	; 0x4c
   1e86e:	f000 fe63 	bl	1f538 <cc_mbedtls_aes_init>
   1e872:	2600      	movs	r6, #0
   1e874:	4629      	mov	r1, r5
   1e876:	2320      	movs	r3, #32
   1e878:	ba65      	rev16	r5, r4
   1e87a:	4622      	mov	r2, r4
   1e87c:	f109 0018 	add.w	r0, r9, #24
   1e880:	f8a9 5012 	strh.w	r5, [r9, #18]
   1e884:	f889 3017 	strb.w	r3, [r9, #23]
   1e888:	f8a9 6010 	strh.w	r6, [r9, #16]
   1e88c:	f004 f9e5 	bl	22c5a <memcpy>
   1e890:	eb09 0304 	add.w	r3, r9, r4
   1e894:	2280      	movs	r2, #128	; 0x80
   1e896:	4d88      	ldr	r5, [pc, #544]	; (1eab8 <block_cipher_df+0x270>)
   1e898:	761a      	strb	r2, [r3, #24]
   1e89a:	4b88      	ldr	r3, [pc, #544]	; (1eabc <block_cipher_df+0x274>)
   1e89c:	9503      	str	r5, [sp, #12]
   1e89e:	9304      	str	r3, [sp, #16]
   1e8a0:	a813      	add	r0, sp, #76	; 0x4c
   1e8a2:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   1e8a6:	a903      	add	r1, sp, #12
   1e8a8:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   1e8ac:	e9cd 5305 	strd	r5, r3, [sp, #20]
   1e8b0:	f000 fe58 	bl	1f564 <cc_mbedtls_aes_setkey_enc>
   1e8b4:	4680      	mov	r8, r0
   1e8b6:	2800      	cmp	r0, #0
   1e8b8:	f040 80da 	bne.w	1ea70 <block_cipher_df+0x228>
   1e8bc:	f104 0319 	add.w	r3, r4, #25
   1e8c0:	9301      	str	r3, [sp, #4]
   1e8c2:	af07      	add	r7, sp, #28
   1e8c4:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1e8c8:	2210      	movs	r2, #16
   1e8ca:	2100      	movs	r1, #0
   1e8cc:	4638      	mov	r0, r7
   1e8ce:	f004 f9ec 	bl	22caa <memset>
   1e8d2:	4c7b      	ldr	r4, [pc, #492]	; (1eac0 <block_cipher_df+0x278>)
   1e8d4:	9d01      	ldr	r5, [sp, #4]
   1e8d6:	f89d 601d 	ldrb.w	r6, [sp, #29]
   1e8da:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   1e8de:	f89d e01c 	ldrb.w	lr, [sp, #28]
   1e8e2:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   1e8e6:	f89d c01f 	ldrb.w	ip, [sp, #31]
   1e8ea:	f89d 001e 	ldrb.w	r0, [sp, #30]
   1e8ee:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   1e8f2:	404e      	eors	r6, r1
   1e8f4:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   1e8f8:	f88d 601d 	strb.w	r6, [sp, #29]
   1e8fc:	ea8e 0303 	eor.w	r3, lr, r3
   1e900:	4050      	eors	r0, r2
   1e902:	ea8c 0101 	eor.w	r1, ip, r1
   1e906:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1e90a:	f88d 301c 	strb.w	r3, [sp, #28]
   1e90e:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   1e912:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   1e916:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   1e91a:	f88d 001e 	strb.w	r0, [sp, #30]
   1e91e:	f88d 101f 	strb.w	r1, [sp, #31]
   1e922:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1e926:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   1e92a:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   1e92e:	405a      	eors	r2, r3
   1e930:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1e934:	f88d 2020 	strb.w	r2, [sp, #32]
   1e938:	ea8c 0606 	eor.w	r6, ip, r6
   1e93c:	4048      	eors	r0, r1
   1e93e:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   1e942:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1e946:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   1e94a:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   1e94e:	ea8e 0303 	eor.w	r3, lr, r3
   1e952:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   1e956:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   1e95a:	ea8c 0101 	eor.w	r1, ip, r1
   1e95e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1e962:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   1e966:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1e96a:	ea82 020c 	eor.w	r2, r2, ip
   1e96e:	4073      	eors	r3, r6
   1e970:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   1e974:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   1e978:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1e97c:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   1e980:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   1e984:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   1e988:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   1e98c:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1e990:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1e994:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   1e998:	ea8e 0202 	eor.w	r2, lr, r2
   1e99c:	4041      	eors	r1, r0
   1e99e:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   1e9a2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1e9a6:	4073      	eors	r3, r6
   1e9a8:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   1e9ac:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   1e9b0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1e9b4:	ea8c 0000 	eor.w	r0, ip, r0
   1e9b8:	4056      	eors	r6, r2
   1e9ba:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   1e9be:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   1e9c2:	463b      	mov	r3, r7
   1e9c4:	463a      	mov	r2, r7
   1e9c6:	2101      	movs	r1, #1
   1e9c8:	a813      	add	r0, sp, #76	; 0x4c
   1e9ca:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   1e9ce:	f000 fde3 	bl	1f598 <cc_mbedtls_aes_crypt_ecb>
   1e9d2:	2d10      	cmp	r5, #16
   1e9d4:	bf94      	ite	ls
   1e9d6:	1b6d      	subls	r5, r5, r5
   1e9d8:	3d10      	subhi	r5, #16
   1e9da:	2800      	cmp	r0, #0
   1e9dc:	d167      	bne.n	1eaae <block_cipher_df+0x266>
   1e9de:	3410      	adds	r4, #16
   1e9e0:	2d00      	cmp	r5, #0
   1e9e2:	f47f af78 	bne.w	1e8d6 <block_cipher_df+0x8e>
   1e9e6:	eb0b 0008 	add.w	r0, fp, r8
   1e9ea:	2210      	movs	r2, #16
   1e9ec:	4639      	mov	r1, r7
   1e9ee:	f004 f934 	bl	22c5a <memcpy>
   1e9f2:	f899 3003 	ldrb.w	r3, [r9, #3]
   1e9f6:	f108 0810 	add.w	r8, r8, #16
   1e9fa:	3301      	adds	r3, #1
   1e9fc:	f1b8 0f20 	cmp.w	r8, #32
   1ea00:	f889 3003 	strb.w	r3, [r9, #3]
   1ea04:	f47f af60 	bne.w	1e8c8 <block_cipher_df+0x80>
   1ea08:	2280      	movs	r2, #128	; 0x80
   1ea0a:	4659      	mov	r1, fp
   1ea0c:	a813      	add	r0, sp, #76	; 0x4c
   1ea0e:	f000 fda9 	bl	1f564 <cc_mbedtls_aes_setkey_enc>
   1ea12:	4680      	mov	r8, r0
   1ea14:	bb78      	cbnz	r0, 1ea76 <block_cipher_df+0x22e>
   1ea16:	f10a 0520 	add.w	r5, sl, #32
   1ea1a:	4654      	mov	r4, sl
   1ea1c:	ab0f      	add	r3, sp, #60	; 0x3c
   1ea1e:	461a      	mov	r2, r3
   1ea20:	2101      	movs	r1, #1
   1ea22:	a813      	add	r0, sp, #76	; 0x4c
   1ea24:	f000 fdb8 	bl	1f598 <cc_mbedtls_aes_crypt_ecb>
   1ea28:	2210      	movs	r2, #16
   1ea2a:	4680      	mov	r8, r0
   1ea2c:	a90f      	add	r1, sp, #60	; 0x3c
   1ea2e:	4620      	mov	r0, r4
   1ea30:	4414      	add	r4, r2
   1ea32:	f1b8 0f00 	cmp.w	r8, #0
   1ea36:	d11e      	bne.n	1ea76 <block_cipher_df+0x22e>
   1ea38:	f004 f90f 	bl	22c5a <memcpy>
   1ea3c:	42ac      	cmp	r4, r5
   1ea3e:	d1ed      	bne.n	1ea1c <block_cipher_df+0x1d4>
   1ea40:	a813      	add	r0, sp, #76	; 0x4c
   1ea42:	f000 fd89 	bl	1f558 <cc_mbedtls_aes_free>
   1ea46:	481f      	ldr	r0, [pc, #124]	; (1eac4 <block_cipher_df+0x27c>)
   1ea48:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1ea4c:	f7ff fd68 	bl	1e520 <mbedtls_platform_zeroize>
   1ea50:	4658      	mov	r0, fp
   1ea52:	2120      	movs	r1, #32
   1ea54:	f7ff fd64 	bl	1e520 <mbedtls_platform_zeroize>
   1ea58:	a803      	add	r0, sp, #12
   1ea5a:	2110      	movs	r1, #16
   1ea5c:	f7ff fd60 	bl	1e520 <mbedtls_platform_zeroize>
   1ea60:	4638      	mov	r0, r7
   1ea62:	2110      	movs	r1, #16
   1ea64:	f7ff fd5c 	bl	1e520 <mbedtls_platform_zeroize>
   1ea68:	4640      	mov	r0, r8
   1ea6a:	b031      	add	sp, #196	; 0xc4
   1ea6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea70:	af07      	add	r7, sp, #28
   1ea72:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1ea76:	a813      	add	r0, sp, #76	; 0x4c
   1ea78:	f000 fd6e 	bl	1f558 <cc_mbedtls_aes_free>
   1ea7c:	4811      	ldr	r0, [pc, #68]	; (1eac4 <block_cipher_df+0x27c>)
   1ea7e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1ea82:	f7ff fd4d 	bl	1e520 <mbedtls_platform_zeroize>
   1ea86:	4658      	mov	r0, fp
   1ea88:	2120      	movs	r1, #32
   1ea8a:	f7ff fd49 	bl	1e520 <mbedtls_platform_zeroize>
   1ea8e:	a803      	add	r0, sp, #12
   1ea90:	2110      	movs	r1, #16
   1ea92:	f7ff fd45 	bl	1e520 <mbedtls_platform_zeroize>
   1ea96:	4638      	mov	r0, r7
   1ea98:	2110      	movs	r1, #16
   1ea9a:	f7ff fd41 	bl	1e520 <mbedtls_platform_zeroize>
   1ea9e:	4650      	mov	r0, sl
   1eaa0:	2120      	movs	r1, #32
   1eaa2:	f7ff fd3d 	bl	1e520 <mbedtls_platform_zeroize>
   1eaa6:	4640      	mov	r0, r8
   1eaa8:	b031      	add	sp, #196	; 0xc4
   1eaaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eaae:	4680      	mov	r8, r0
   1eab0:	e7e1      	b.n	1ea76 <block_cipher_df+0x22e>
   1eab2:	f06f 0837 	mvn.w	r8, #55	; 0x37
   1eab6:	e7f6      	b.n	1eaa6 <block_cipher_df+0x25e>
   1eab8:	03020100 	.word	0x03020100
   1eabc:	07060504 	.word	0x07060504
   1eac0:	2000299c 	.word	0x2000299c
   1eac4:	2000298c 	.word	0x2000298c

0001eac8 <ctr_drbg_update_internal>:
   1eac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eacc:	b088      	sub	sp, #32
   1eace:	4604      	mov	r4, r0
   1ead0:	2220      	movs	r2, #32
   1ead2:	460d      	mov	r5, r1
   1ead4:	4668      	mov	r0, sp
   1ead6:	2100      	movs	r1, #0
   1ead8:	eb04 0802 	add.w	r8, r4, r2
   1eadc:	f004 f8e5 	bl	22caa <memset>
   1eae0:	466e      	mov	r6, sp
   1eae2:	7be2      	ldrb	r2, [r4, #15]
   1eae4:	3201      	adds	r2, #1
   1eae6:	b2d2      	uxtb	r2, r2
   1eae8:	73e2      	strb	r2, [r4, #15]
   1eaea:	2a00      	cmp	r2, #0
   1eaec:	d14d      	bne.n	1eb8a <ctr_drbg_update_internal+0xc2>
   1eaee:	7ba2      	ldrb	r2, [r4, #14]
   1eaf0:	3201      	adds	r2, #1
   1eaf2:	b2d2      	uxtb	r2, r2
   1eaf4:	73a2      	strb	r2, [r4, #14]
   1eaf6:	2a00      	cmp	r2, #0
   1eaf8:	d147      	bne.n	1eb8a <ctr_drbg_update_internal+0xc2>
   1eafa:	7b63      	ldrb	r3, [r4, #13]
   1eafc:	3301      	adds	r3, #1
   1eafe:	b2db      	uxtb	r3, r3
   1eb00:	7363      	strb	r3, [r4, #13]
   1eb02:	2b00      	cmp	r3, #0
   1eb04:	d141      	bne.n	1eb8a <ctr_drbg_update_internal+0xc2>
   1eb06:	7b23      	ldrb	r3, [r4, #12]
   1eb08:	3301      	adds	r3, #1
   1eb0a:	b2db      	uxtb	r3, r3
   1eb0c:	7323      	strb	r3, [r4, #12]
   1eb0e:	2b00      	cmp	r3, #0
   1eb10:	d13b      	bne.n	1eb8a <ctr_drbg_update_internal+0xc2>
   1eb12:	7ae3      	ldrb	r3, [r4, #11]
   1eb14:	3301      	adds	r3, #1
   1eb16:	b2db      	uxtb	r3, r3
   1eb18:	72e3      	strb	r3, [r4, #11]
   1eb1a:	2b00      	cmp	r3, #0
   1eb1c:	d135      	bne.n	1eb8a <ctr_drbg_update_internal+0xc2>
   1eb1e:	7aa3      	ldrb	r3, [r4, #10]
   1eb20:	3301      	adds	r3, #1
   1eb22:	b2db      	uxtb	r3, r3
   1eb24:	72a3      	strb	r3, [r4, #10]
   1eb26:	2b00      	cmp	r3, #0
   1eb28:	d12f      	bne.n	1eb8a <ctr_drbg_update_internal+0xc2>
   1eb2a:	7a63      	ldrb	r3, [r4, #9]
   1eb2c:	3301      	adds	r3, #1
   1eb2e:	b2db      	uxtb	r3, r3
   1eb30:	7263      	strb	r3, [r4, #9]
   1eb32:	bb53      	cbnz	r3, 1eb8a <ctr_drbg_update_internal+0xc2>
   1eb34:	7a23      	ldrb	r3, [r4, #8]
   1eb36:	3301      	adds	r3, #1
   1eb38:	b2db      	uxtb	r3, r3
   1eb3a:	7223      	strb	r3, [r4, #8]
   1eb3c:	bb2b      	cbnz	r3, 1eb8a <ctr_drbg_update_internal+0xc2>
   1eb3e:	79e3      	ldrb	r3, [r4, #7]
   1eb40:	3301      	adds	r3, #1
   1eb42:	b2db      	uxtb	r3, r3
   1eb44:	71e3      	strb	r3, [r4, #7]
   1eb46:	bb03      	cbnz	r3, 1eb8a <ctr_drbg_update_internal+0xc2>
   1eb48:	79a3      	ldrb	r3, [r4, #6]
   1eb4a:	3301      	adds	r3, #1
   1eb4c:	b2db      	uxtb	r3, r3
   1eb4e:	71a3      	strb	r3, [r4, #6]
   1eb50:	b9db      	cbnz	r3, 1eb8a <ctr_drbg_update_internal+0xc2>
   1eb52:	7963      	ldrb	r3, [r4, #5]
   1eb54:	3301      	adds	r3, #1
   1eb56:	b2db      	uxtb	r3, r3
   1eb58:	7163      	strb	r3, [r4, #5]
   1eb5a:	b9b3      	cbnz	r3, 1eb8a <ctr_drbg_update_internal+0xc2>
   1eb5c:	7923      	ldrb	r3, [r4, #4]
   1eb5e:	3301      	adds	r3, #1
   1eb60:	b2db      	uxtb	r3, r3
   1eb62:	7123      	strb	r3, [r4, #4]
   1eb64:	b98b      	cbnz	r3, 1eb8a <ctr_drbg_update_internal+0xc2>
   1eb66:	78e3      	ldrb	r3, [r4, #3]
   1eb68:	3301      	adds	r3, #1
   1eb6a:	b2db      	uxtb	r3, r3
   1eb6c:	70e3      	strb	r3, [r4, #3]
   1eb6e:	b963      	cbnz	r3, 1eb8a <ctr_drbg_update_internal+0xc2>
   1eb70:	78a3      	ldrb	r3, [r4, #2]
   1eb72:	3301      	adds	r3, #1
   1eb74:	b2db      	uxtb	r3, r3
   1eb76:	70a3      	strb	r3, [r4, #2]
   1eb78:	b93b      	cbnz	r3, 1eb8a <ctr_drbg_update_internal+0xc2>
   1eb7a:	7863      	ldrb	r3, [r4, #1]
   1eb7c:	3301      	adds	r3, #1
   1eb7e:	b2db      	uxtb	r3, r3
   1eb80:	7063      	strb	r3, [r4, #1]
   1eb82:	b913      	cbnz	r3, 1eb8a <ctr_drbg_update_internal+0xc2>
   1eb84:	7823      	ldrb	r3, [r4, #0]
   1eb86:	3301      	adds	r3, #1
   1eb88:	7023      	strb	r3, [r4, #0]
   1eb8a:	4633      	mov	r3, r6
   1eb8c:	4622      	mov	r2, r4
   1eb8e:	2101      	movs	r1, #1
   1eb90:	4640      	mov	r0, r8
   1eb92:	f000 fd01 	bl	1f598 <cc_mbedtls_aes_crypt_ecb>
   1eb96:	4607      	mov	r7, r0
   1eb98:	2800      	cmp	r0, #0
   1eb9a:	d12b      	bne.n	1ebf4 <ctr_drbg_update_internal+0x12c>
   1eb9c:	3610      	adds	r6, #16
   1eb9e:	ab08      	add	r3, sp, #32
   1eba0:	429e      	cmp	r6, r3
   1eba2:	d19e      	bne.n	1eae2 <ctr_drbg_update_internal+0x1a>
   1eba4:	9e01      	ldr	r6, [sp, #4]
   1eba6:	686a      	ldr	r2, [r5, #4]
   1eba8:	9f00      	ldr	r7, [sp, #0]
   1ebaa:	6829      	ldr	r1, [r5, #0]
   1ebac:	68ab      	ldr	r3, [r5, #8]
   1ebae:	4072      	eors	r2, r6
   1ebb0:	9e02      	ldr	r6, [sp, #8]
   1ebb2:	9201      	str	r2, [sp, #4]
   1ebb4:	4079      	eors	r1, r7
   1ebb6:	4073      	eors	r3, r6
   1ebb8:	9100      	str	r1, [sp, #0]
   1ebba:	9e03      	ldr	r6, [sp, #12]
   1ebbc:	68e9      	ldr	r1, [r5, #12]
   1ebbe:	692a      	ldr	r2, [r5, #16]
   1ebc0:	9302      	str	r3, [sp, #8]
   1ebc2:	4071      	eors	r1, r6
   1ebc4:	9e04      	ldr	r6, [sp, #16]
   1ebc6:	696b      	ldr	r3, [r5, #20]
   1ebc8:	9103      	str	r1, [sp, #12]
   1ebca:	4056      	eors	r6, r2
   1ebcc:	9a05      	ldr	r2, [sp, #20]
   1ebce:	9604      	str	r6, [sp, #16]
   1ebd0:	ea83 0102 	eor.w	r1, r3, r2
   1ebd4:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   1ebd8:	9d06      	ldr	r5, [sp, #24]
   1ebda:	9105      	str	r1, [sp, #20]
   1ebdc:	4055      	eors	r5, r2
   1ebde:	9a07      	ldr	r2, [sp, #28]
   1ebe0:	4640      	mov	r0, r8
   1ebe2:	4053      	eors	r3, r2
   1ebe4:	4669      	mov	r1, sp
   1ebe6:	2280      	movs	r2, #128	; 0x80
   1ebe8:	e9cd 5306 	strd	r5, r3, [sp, #24]
   1ebec:	f000 fcba 	bl	1f564 <cc_mbedtls_aes_setkey_enc>
   1ebf0:	4607      	mov	r7, r0
   1ebf2:	b138      	cbz	r0, 1ec04 <ctr_drbg_update_internal+0x13c>
   1ebf4:	4668      	mov	r0, sp
   1ebf6:	2120      	movs	r1, #32
   1ebf8:	f7ff fc92 	bl	1e520 <mbedtls_platform_zeroize>
   1ebfc:	4638      	mov	r0, r7
   1ebfe:	b008      	add	sp, #32
   1ec00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ec04:	2210      	movs	r2, #16
   1ec06:	4620      	mov	r0, r4
   1ec08:	eb0d 0102 	add.w	r1, sp, r2
   1ec0c:	f004 f825 	bl	22c5a <memcpy>
   1ec10:	e7f0      	b.n	1ebf4 <ctr_drbg_update_internal+0x12c>
   1ec12:	bf00      	nop

0001ec14 <mbedtls_ctr_drbg_reseed_internal>:
   1ec14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ec18:	4604      	mov	r4, r0
   1ec1a:	6980      	ldr	r0, [r0, #24]
   1ec1c:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1ec20:	d851      	bhi.n	1ecc6 <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1ec22:	461d      	mov	r5, r3
   1ec24:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1ec28:	42ab      	cmp	r3, r5
   1ec2a:	d34c      	bcc.n	1ecc6 <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1ec2c:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1ec30:	1a18      	subs	r0, r3, r0
   1ec32:	4290      	cmp	r0, r2
   1ec34:	4616      	mov	r6, r2
   1ec36:	d346      	bcc.n	1ecc6 <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1ec38:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1ecd4 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1ec3c:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1ec40:	460f      	mov	r7, r1
   1ec42:	4640      	mov	r0, r8
   1ec44:	2100      	movs	r1, #0
   1ec46:	f004 f830 	bl	22caa <memset>
   1ec4a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1ec4e:	69a2      	ldr	r2, [r4, #24]
   1ec50:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1ec54:	4641      	mov	r1, r8
   1ec56:	4798      	blx	r3
   1ec58:	2800      	cmp	r0, #0
   1ec5a:	d137      	bne.n	1eccc <mbedtls_ctr_drbg_reseed_internal+0xb8>
   1ec5c:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1ec60:	b135      	cbz	r5, 1ec70 <mbedtls_ctr_drbg_reseed_internal+0x5c>
   1ec62:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1ec66:	462a      	mov	r2, r5
   1ec68:	4641      	mov	r1, r8
   1ec6a:	4798      	blx	r3
   1ec6c:	bb70      	cbnz	r0, 1eccc <mbedtls_ctr_drbg_reseed_internal+0xb8>
   1ec6e:	44a9      	add	r9, r5
   1ec70:	b107      	cbz	r7, 1ec74 <mbedtls_ctr_drbg_reseed_internal+0x60>
   1ec72:	b9c6      	cbnz	r6, 1eca6 <mbedtls_ctr_drbg_reseed_internal+0x92>
   1ec74:	4917      	ldr	r1, [pc, #92]	; (1ecd4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ec76:	464a      	mov	r2, r9
   1ec78:	4608      	mov	r0, r1
   1ec7a:	f7ff fde5 	bl	1e848 <block_cipher_df>
   1ec7e:	4605      	mov	r5, r0
   1ec80:	b138      	cbz	r0, 1ec92 <mbedtls_ctr_drbg_reseed_internal+0x7e>
   1ec82:	4814      	ldr	r0, [pc, #80]	; (1ecd4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ec84:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1ec88:	f7ff fc4a 	bl	1e520 <mbedtls_platform_zeroize>
   1ec8c:	4628      	mov	r0, r5
   1ec8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ec92:	4910      	ldr	r1, [pc, #64]	; (1ecd4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ec94:	4620      	mov	r0, r4
   1ec96:	f7ff ff17 	bl	1eac8 <ctr_drbg_update_internal>
   1ec9a:	4605      	mov	r5, r0
   1ec9c:	2800      	cmp	r0, #0
   1ec9e:	d1f0      	bne.n	1ec82 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1eca0:	2301      	movs	r3, #1
   1eca2:	6123      	str	r3, [r4, #16]
   1eca4:	e7ed      	b.n	1ec82 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1eca6:	4639      	mov	r1, r7
   1eca8:	eb08 0009 	add.w	r0, r8, r9
   1ecac:	4632      	mov	r2, r6
   1ecae:	f003 ffd4 	bl	22c5a <memcpy>
   1ecb2:	4908      	ldr	r1, [pc, #32]	; (1ecd4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ecb4:	44b1      	add	r9, r6
   1ecb6:	464a      	mov	r2, r9
   1ecb8:	4608      	mov	r0, r1
   1ecba:	f7ff fdc5 	bl	1e848 <block_cipher_df>
   1ecbe:	4605      	mov	r5, r0
   1ecc0:	2800      	cmp	r0, #0
   1ecc2:	d1de      	bne.n	1ec82 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1ecc4:	e7e5      	b.n	1ec92 <mbedtls_ctr_drbg_reseed_internal+0x7e>
   1ecc6:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1ecca:	e7df      	b.n	1ec8c <mbedtls_ctr_drbg_reseed_internal+0x78>
   1eccc:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1ecd0:	e7dc      	b.n	1ec8c <mbedtls_ctr_drbg_reseed_internal+0x78>
   1ecd2:	bf00      	nop
   1ecd4:	20002b2c 	.word	0x20002b2c

0001ecd8 <cc_mbedtls_ctr_drbg_init>:
   1ecd8:	b510      	push	{r4, lr}
   1ecda:	22a4      	movs	r2, #164	; 0xa4
   1ecdc:	4604      	mov	r4, r0
   1ecde:	2100      	movs	r1, #0
   1ece0:	f003 ffe3 	bl	22caa <memset>
   1ece4:	4b04      	ldr	r3, [pc, #16]	; (1ecf8 <cc_mbedtls_ctr_drbg_init+0x20>)
   1ece6:	f04f 32ff 	mov.w	r2, #4294967295
   1ecea:	6122      	str	r2, [r4, #16]
   1ecec:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1ecf0:	681b      	ldr	r3, [r3, #0]
   1ecf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ecf6:	4718      	bx	r3
   1ecf8:	20000588 	.word	0x20000588

0001ecfc <cc_mbedtls_ctr_drbg_seed>:
   1ecfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ed00:	b085      	sub	sp, #20
   1ed02:	4605      	mov	r5, r0
   1ed04:	460f      	mov	r7, r1
   1ed06:	4616      	mov	r6, r2
   1ed08:	4668      	mov	r0, sp
   1ed0a:	2210      	movs	r2, #16
   1ed0c:	2100      	movs	r1, #0
   1ed0e:	4699      	mov	r9, r3
   1ed10:	f003 ffcb 	bl	22caa <memset>
   1ed14:	4b1f      	ldr	r3, [pc, #124]	; (1ed94 <cc_mbedtls_ctr_drbg_seed+0x98>)
   1ed16:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1ed1a:	681b      	ldr	r3, [r3, #0]
   1ed1c:	4640      	mov	r0, r8
   1ed1e:	4798      	blx	r3
   1ed20:	b120      	cbz	r0, 1ed2c <cc_mbedtls_ctr_drbg_seed+0x30>
   1ed22:	4604      	mov	r4, r0
   1ed24:	4620      	mov	r0, r4
   1ed26:	b005      	add	sp, #20
   1ed28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ed2c:	f105 0420 	add.w	r4, r5, #32
   1ed30:	4620      	mov	r0, r4
   1ed32:	f000 fc01 	bl	1f538 <cc_mbedtls_aes_init>
   1ed36:	69aa      	ldr	r2, [r5, #24]
   1ed38:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1ed3c:	692e      	ldr	r6, [r5, #16]
   1ed3e:	b9fa      	cbnz	r2, 1ed80 <cc_mbedtls_ctr_drbg_seed+0x84>
   1ed40:	2220      	movs	r2, #32
   1ed42:	2e00      	cmp	r6, #0
   1ed44:	61aa      	str	r2, [r5, #24]
   1ed46:	db22      	blt.n	1ed8e <cc_mbedtls_ctr_drbg_seed+0x92>
   1ed48:	f64f 73f0 	movw	r3, #65520	; 0xfff0
   1ed4c:	4620      	mov	r0, r4
   1ed4e:	4669      	mov	r1, sp
   1ed50:	61eb      	str	r3, [r5, #28]
   1ed52:	2280      	movs	r2, #128	; 0x80
   1ed54:	f000 fc06 	bl	1f564 <cc_mbedtls_aes_setkey_enc>
   1ed58:	4604      	mov	r4, r0
   1ed5a:	b930      	cbnz	r0, 1ed6a <cc_mbedtls_ctr_drbg_seed+0x6e>
   1ed5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ed5e:	4633      	mov	r3, r6
   1ed60:	4649      	mov	r1, r9
   1ed62:	4628      	mov	r0, r5
   1ed64:	f7ff ff56 	bl	1ec14 <mbedtls_ctr_drbg_reseed_internal>
   1ed68:	4604      	mov	r4, r0
   1ed6a:	4b0b      	ldr	r3, [pc, #44]	; (1ed98 <cc_mbedtls_ctr_drbg_seed+0x9c>)
   1ed6c:	4640      	mov	r0, r8
   1ed6e:	681b      	ldr	r3, [r3, #0]
   1ed70:	4798      	blx	r3
   1ed72:	2800      	cmp	r0, #0
   1ed74:	bf18      	it	ne
   1ed76:	4604      	movne	r4, r0
   1ed78:	4620      	mov	r0, r4
   1ed7a:	b005      	add	sp, #20
   1ed7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ed80:	2e00      	cmp	r6, #0
   1ed82:	dae1      	bge.n	1ed48 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1ed84:	2a17      	cmp	r2, #23
   1ed86:	d802      	bhi.n	1ed8e <cc_mbedtls_ctr_drbg_seed+0x92>
   1ed88:	1c53      	adds	r3, r2, #1
   1ed8a:	085e      	lsrs	r6, r3, #1
   1ed8c:	e7dc      	b.n	1ed48 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1ed8e:	2600      	movs	r6, #0
   1ed90:	e7da      	b.n	1ed48 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1ed92:	bf00      	nop
   1ed94:	2000058c 	.word	0x2000058c
   1ed98:	20000590 	.word	0x20000590

0001ed9c <cc_mbedtls_ctr_drbg_random_with_add>:
   1ed9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eda0:	b08d      	sub	sp, #52	; 0x34
   1eda2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1eda6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1edaa:	f200 80e4 	bhi.w	1ef76 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   1edae:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   1edb2:	f200 80dd 	bhi.w	1ef70 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   1edb6:	4604      	mov	r4, r0
   1edb8:	4615      	mov	r5, r2
   1edba:	460e      	mov	r6, r1
   1edbc:	2220      	movs	r2, #32
   1edbe:	2100      	movs	r1, #0
   1edc0:	a804      	add	r0, sp, #16
   1edc2:	461f      	mov	r7, r3
   1edc4:	f003 ff71 	bl	22caa <memset>
   1edc8:	4b6c      	ldr	r3, [pc, #432]	; (1ef7c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   1edca:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1edce:	681b      	ldr	r3, [r3, #0]
   1edd0:	4648      	mov	r0, r9
   1edd2:	4798      	blx	r3
   1edd4:	4683      	mov	fp, r0
   1edd6:	2800      	cmp	r0, #0
   1edd8:	f040 8093 	bne.w	1ef02 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1eddc:	6922      	ldr	r2, [r4, #16]
   1edde:	69e3      	ldr	r3, [r4, #28]
   1ede0:	429a      	cmp	r2, r3
   1ede2:	f300 8092 	bgt.w	1ef0a <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1ede6:	6963      	ldr	r3, [r4, #20]
   1ede8:	2b00      	cmp	r3, #0
   1edea:	f040 808e 	bne.w	1ef0a <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1edee:	f1b8 0f00 	cmp.w	r8, #0
   1edf2:	f040 80a9 	bne.w	1ef48 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   1edf6:	f8df a188 	ldr.w	sl, [pc, #392]	; 1ef80 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1edfa:	466f      	mov	r7, sp
   1edfc:	2d00      	cmp	r5, #0
   1edfe:	f000 8098 	beq.w	1ef32 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1ee02:	f104 0820 	add.w	r8, r4, #32
   1ee06:	466f      	mov	r7, sp
   1ee08:	e00e      	b.n	1ee28 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   1ee0a:	2d10      	cmp	r5, #16
   1ee0c:	46ab      	mov	fp, r5
   1ee0e:	bf28      	it	cs
   1ee10:	f04f 0b10 	movcs.w	fp, #16
   1ee14:	4630      	mov	r0, r6
   1ee16:	465a      	mov	r2, fp
   1ee18:	4639      	mov	r1, r7
   1ee1a:	f003 ff1e 	bl	22c5a <memcpy>
   1ee1e:	ebb5 050b 	subs.w	r5, r5, fp
   1ee22:	445e      	add	r6, fp
   1ee24:	f000 8085 	beq.w	1ef32 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1ee28:	7be3      	ldrb	r3, [r4, #15]
   1ee2a:	3301      	adds	r3, #1
   1ee2c:	b2db      	uxtb	r3, r3
   1ee2e:	73e3      	strb	r3, [r4, #15]
   1ee30:	2b00      	cmp	r3, #0
   1ee32:	d14d      	bne.n	1eed0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ee34:	7ba3      	ldrb	r3, [r4, #14]
   1ee36:	3301      	adds	r3, #1
   1ee38:	b2db      	uxtb	r3, r3
   1ee3a:	73a3      	strb	r3, [r4, #14]
   1ee3c:	2b00      	cmp	r3, #0
   1ee3e:	d147      	bne.n	1eed0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ee40:	7b63      	ldrb	r3, [r4, #13]
   1ee42:	3301      	adds	r3, #1
   1ee44:	b2db      	uxtb	r3, r3
   1ee46:	7363      	strb	r3, [r4, #13]
   1ee48:	2b00      	cmp	r3, #0
   1ee4a:	d141      	bne.n	1eed0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ee4c:	7b23      	ldrb	r3, [r4, #12]
   1ee4e:	3301      	adds	r3, #1
   1ee50:	b2db      	uxtb	r3, r3
   1ee52:	7323      	strb	r3, [r4, #12]
   1ee54:	2b00      	cmp	r3, #0
   1ee56:	d13b      	bne.n	1eed0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ee58:	7ae3      	ldrb	r3, [r4, #11]
   1ee5a:	3301      	adds	r3, #1
   1ee5c:	b2db      	uxtb	r3, r3
   1ee5e:	72e3      	strb	r3, [r4, #11]
   1ee60:	2b00      	cmp	r3, #0
   1ee62:	d135      	bne.n	1eed0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ee64:	7aa3      	ldrb	r3, [r4, #10]
   1ee66:	3301      	adds	r3, #1
   1ee68:	b2db      	uxtb	r3, r3
   1ee6a:	72a3      	strb	r3, [r4, #10]
   1ee6c:	2b00      	cmp	r3, #0
   1ee6e:	d12f      	bne.n	1eed0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ee70:	7a63      	ldrb	r3, [r4, #9]
   1ee72:	3301      	adds	r3, #1
   1ee74:	b2db      	uxtb	r3, r3
   1ee76:	7263      	strb	r3, [r4, #9]
   1ee78:	bb53      	cbnz	r3, 1eed0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ee7a:	7a23      	ldrb	r3, [r4, #8]
   1ee7c:	3301      	adds	r3, #1
   1ee7e:	b2db      	uxtb	r3, r3
   1ee80:	7223      	strb	r3, [r4, #8]
   1ee82:	bb2b      	cbnz	r3, 1eed0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ee84:	79e3      	ldrb	r3, [r4, #7]
   1ee86:	3301      	adds	r3, #1
   1ee88:	b2db      	uxtb	r3, r3
   1ee8a:	71e3      	strb	r3, [r4, #7]
   1ee8c:	bb03      	cbnz	r3, 1eed0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ee8e:	79a3      	ldrb	r3, [r4, #6]
   1ee90:	3301      	adds	r3, #1
   1ee92:	b2db      	uxtb	r3, r3
   1ee94:	71a3      	strb	r3, [r4, #6]
   1ee96:	b9db      	cbnz	r3, 1eed0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ee98:	7963      	ldrb	r3, [r4, #5]
   1ee9a:	3301      	adds	r3, #1
   1ee9c:	b2db      	uxtb	r3, r3
   1ee9e:	7163      	strb	r3, [r4, #5]
   1eea0:	b9b3      	cbnz	r3, 1eed0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1eea2:	7923      	ldrb	r3, [r4, #4]
   1eea4:	3301      	adds	r3, #1
   1eea6:	b2db      	uxtb	r3, r3
   1eea8:	7123      	strb	r3, [r4, #4]
   1eeaa:	b98b      	cbnz	r3, 1eed0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1eeac:	78e3      	ldrb	r3, [r4, #3]
   1eeae:	3301      	adds	r3, #1
   1eeb0:	b2db      	uxtb	r3, r3
   1eeb2:	70e3      	strb	r3, [r4, #3]
   1eeb4:	b963      	cbnz	r3, 1eed0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1eeb6:	78a3      	ldrb	r3, [r4, #2]
   1eeb8:	3301      	adds	r3, #1
   1eeba:	b2db      	uxtb	r3, r3
   1eebc:	70a3      	strb	r3, [r4, #2]
   1eebe:	b93b      	cbnz	r3, 1eed0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1eec0:	7863      	ldrb	r3, [r4, #1]
   1eec2:	3301      	adds	r3, #1
   1eec4:	b2db      	uxtb	r3, r3
   1eec6:	7063      	strb	r3, [r4, #1]
   1eec8:	b913      	cbnz	r3, 1eed0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1eeca:	7823      	ldrb	r3, [r4, #0]
   1eecc:	3301      	adds	r3, #1
   1eece:	7023      	strb	r3, [r4, #0]
   1eed0:	463b      	mov	r3, r7
   1eed2:	4622      	mov	r2, r4
   1eed4:	2101      	movs	r1, #1
   1eed6:	4640      	mov	r0, r8
   1eed8:	f000 fb5e 	bl	1f598 <cc_mbedtls_aes_crypt_ecb>
   1eedc:	4683      	mov	fp, r0
   1eede:	2800      	cmp	r0, #0
   1eee0:	d093      	beq.n	1ee0a <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   1eee2:	f8da 3000 	ldr.w	r3, [sl]
   1eee6:	4648      	mov	r0, r9
   1eee8:	4798      	blx	r3
   1eeea:	2120      	movs	r1, #32
   1eeec:	4603      	mov	r3, r0
   1eeee:	a804      	add	r0, sp, #16
   1eef0:	2b00      	cmp	r3, #0
   1eef2:	bf18      	it	ne
   1eef4:	469b      	movne	fp, r3
   1eef6:	f7ff fb13 	bl	1e520 <mbedtls_platform_zeroize>
   1eefa:	4638      	mov	r0, r7
   1eefc:	2110      	movs	r1, #16
   1eefe:	f7ff fb0f 	bl	1e520 <mbedtls_platform_zeroize>
   1ef02:	4658      	mov	r0, fp
   1ef04:	b00d      	add	sp, #52	; 0x34
   1ef06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef0a:	4642      	mov	r2, r8
   1ef0c:	4639      	mov	r1, r7
   1ef0e:	2300      	movs	r3, #0
   1ef10:	4620      	mov	r0, r4
   1ef12:	f7ff fe7f 	bl	1ec14 <mbedtls_ctr_drbg_reseed_internal>
   1ef16:	f8df a068 	ldr.w	sl, [pc, #104]	; 1ef80 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1ef1a:	2800      	cmp	r0, #0
   1ef1c:	f43f af6d 	beq.w	1edfa <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1ef20:	f8da 3000 	ldr.w	r3, [sl]
   1ef24:	4648      	mov	r0, r9
   1ef26:	4798      	blx	r3
   1ef28:	4683      	mov	fp, r0
   1ef2a:	2800      	cmp	r0, #0
   1ef2c:	f43f af65 	beq.w	1edfa <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1ef30:	e7e7      	b.n	1ef02 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1ef32:	a904      	add	r1, sp, #16
   1ef34:	4620      	mov	r0, r4
   1ef36:	f7ff fdc7 	bl	1eac8 <ctr_drbg_update_internal>
   1ef3a:	4683      	mov	fp, r0
   1ef3c:	2800      	cmp	r0, #0
   1ef3e:	d1d0      	bne.n	1eee2 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1ef40:	6923      	ldr	r3, [r4, #16]
   1ef42:	3301      	adds	r3, #1
   1ef44:	6123      	str	r3, [r4, #16]
   1ef46:	e7cc      	b.n	1eee2 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1ef48:	4642      	mov	r2, r8
   1ef4a:	4639      	mov	r1, r7
   1ef4c:	a804      	add	r0, sp, #16
   1ef4e:	f7ff fc7b 	bl	1e848 <block_cipher_df>
   1ef52:	4683      	mov	fp, r0
   1ef54:	b118      	cbz	r0, 1ef5e <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   1ef56:	f8df a028 	ldr.w	sl, [pc, #40]	; 1ef80 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1ef5a:	466f      	mov	r7, sp
   1ef5c:	e7c1      	b.n	1eee2 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1ef5e:	a904      	add	r1, sp, #16
   1ef60:	4620      	mov	r0, r4
   1ef62:	f7ff fdb1 	bl	1eac8 <ctr_drbg_update_internal>
   1ef66:	4683      	mov	fp, r0
   1ef68:	2800      	cmp	r0, #0
   1ef6a:	f43f af44 	beq.w	1edf6 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1ef6e:	e7f2      	b.n	1ef56 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   1ef70:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1ef74:	e7c5      	b.n	1ef02 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1ef76:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1ef7a:	e7c2      	b.n	1ef02 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1ef7c:	2000058c 	.word	0x2000058c
   1ef80:	20000590 	.word	0x20000590

0001ef84 <cc_mbedtls_sha256_ret>:
   1ef84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ef86:	461c      	mov	r4, r3
   1ef88:	4605      	mov	r5, r0
   1ef8a:	4811      	ldr	r0, [pc, #68]	; (1efd0 <cc_mbedtls_sha256_ret+0x4c>)
   1ef8c:	460e      	mov	r6, r1
   1ef8e:	4617      	mov	r7, r2
   1ef90:	f7ff fb4e 	bl	1e630 <cc_mbedtls_sha256_init>
   1ef94:	4621      	mov	r1, r4
   1ef96:	480e      	ldr	r0, [pc, #56]	; (1efd0 <cc_mbedtls_sha256_ret+0x4c>)
   1ef98:	f7ff fb64 	bl	1e664 <cc_mbedtls_sha256_starts_ret>
   1ef9c:	4604      	mov	r4, r0
   1ef9e:	b120      	cbz	r0, 1efaa <cc_mbedtls_sha256_ret+0x26>
   1efa0:	480b      	ldr	r0, [pc, #44]	; (1efd0 <cc_mbedtls_sha256_ret+0x4c>)
   1efa2:	f7ff fb59 	bl	1e658 <cc_mbedtls_sha256_free>
   1efa6:	4620      	mov	r0, r4
   1efa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1efaa:	4809      	ldr	r0, [pc, #36]	; (1efd0 <cc_mbedtls_sha256_ret+0x4c>)
   1efac:	4632      	mov	r2, r6
   1efae:	4629      	mov	r1, r5
   1efb0:	f7ff fb6c 	bl	1e68c <cc_mbedtls_sha256_update_ret>
   1efb4:	4604      	mov	r4, r0
   1efb6:	2800      	cmp	r0, #0
   1efb8:	d1f2      	bne.n	1efa0 <cc_mbedtls_sha256_ret+0x1c>
   1efba:	4639      	mov	r1, r7
   1efbc:	4804      	ldr	r0, [pc, #16]	; (1efd0 <cc_mbedtls_sha256_ret+0x4c>)
   1efbe:	f7ff fb6d 	bl	1e69c <cc_mbedtls_sha256_finish_ret>
   1efc2:	4604      	mov	r4, r0
   1efc4:	4802      	ldr	r0, [pc, #8]	; (1efd0 <cc_mbedtls_sha256_ret+0x4c>)
   1efc6:	f7ff fb47 	bl	1e658 <cc_mbedtls_sha256_free>
   1efca:	4620      	mov	r0, r4
   1efcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1efce:	bf00      	nop
   1efd0:	20002cac 	.word	0x20002cac

0001efd4 <RNG_PLAT_SetUserRngParameters>:
   1efd4:	b530      	push	{r4, r5, lr}
   1efd6:	b083      	sub	sp, #12
   1efd8:	231c      	movs	r3, #28
   1efda:	a901      	add	r1, sp, #4
   1efdc:	4604      	mov	r4, r0
   1efde:	9301      	str	r3, [sp, #4]
   1efe0:	f000 f83c 	bl	1f05c <CC_PalTrngParamGet>
   1efe4:	4605      	mov	r5, r0
   1efe6:	b938      	cbnz	r0, 1eff8 <RNG_PLAT_SetUserRngParameters+0x24>
   1efe8:	9b01      	ldr	r3, [sp, #4]
   1efea:	2b1c      	cmp	r3, #28
   1efec:	d007      	beq.n	1effe <RNG_PLAT_SetUserRngParameters+0x2a>
   1efee:	4d15      	ldr	r5, [pc, #84]	; (1f044 <RNG_PLAT_SetUserRngParameters+0x70>)
   1eff0:	4620      	mov	r0, r4
   1eff2:	211c      	movs	r1, #28
   1eff4:	f000 f82e 	bl	1f054 <CC_PalMemSetZeroPlat>
   1eff8:	4628      	mov	r0, r5
   1effa:	b003      	add	sp, #12
   1effc:	bd30      	pop	{r4, r5, pc}
   1effe:	e9d4 3200 	ldrd	r3, r2, [r4]
   1f002:	2101      	movs	r1, #1
   1f004:	3b00      	subs	r3, #0
   1f006:	bf18      	it	ne
   1f008:	2301      	movne	r3, #1
   1f00a:	61e1      	str	r1, [r4, #28]
   1f00c:	b10a      	cbz	r2, 1f012 <RNG_PLAT_SetUserRngParameters+0x3e>
   1f00e:	f043 0302 	orr.w	r3, r3, #2
   1f012:	68a2      	ldr	r2, [r4, #8]
   1f014:	b932      	cbnz	r2, 1f024 <RNG_PLAT_SetUserRngParameters+0x50>
   1f016:	68e2      	ldr	r2, [r4, #12]
   1f018:	b942      	cbnz	r2, 1f02c <RNG_PLAT_SetUserRngParameters+0x58>
   1f01a:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1f01e:	b97b      	cbnz	r3, 1f040 <RNG_PLAT_SetUserRngParameters+0x6c>
   1f020:	4d09      	ldr	r5, [pc, #36]	; (1f048 <RNG_PLAT_SetUserRngParameters+0x74>)
   1f022:	e7e5      	b.n	1eff0 <RNG_PLAT_SetUserRngParameters+0x1c>
   1f024:	68e2      	ldr	r2, [r4, #12]
   1f026:	f043 0304 	orr.w	r3, r3, #4
   1f02a:	b13a      	cbz	r2, 1f03c <RNG_PLAT_SetUserRngParameters+0x68>
   1f02c:	f043 0308 	orr.w	r3, r3, #8
   1f030:	2200      	movs	r2, #0
   1f032:	4628      	mov	r0, r5
   1f034:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1f038:	b003      	add	sp, #12
   1f03a:	bd30      	pop	{r4, r5, pc}
   1f03c:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1f040:	4615      	mov	r5, r2
   1f042:	e7d9      	b.n	1eff8 <RNG_PLAT_SetUserRngParameters+0x24>
   1f044:	00f00c37 	.word	0x00f00c37
   1f048:	00f00c0e 	.word	0x00f00c0e

0001f04c <CC_PalMemCopyPlat>:
   1f04c:	f003 be13 	b.w	22c76 <memmove>

0001f050 <CC_PalMemSetPlat>:
   1f050:	f003 be2b 	b.w	22caa <memset>

0001f054 <CC_PalMemSetZeroPlat>:
   1f054:	460a      	mov	r2, r1
   1f056:	2100      	movs	r1, #0
   1f058:	f003 be27 	b.w	22caa <memset>

0001f05c <CC_PalTrngParamGet>:
   1f05c:	b118      	cbz	r0, 1f066 <CC_PalTrngParamGet+0xa>
   1f05e:	b111      	cbz	r1, 1f066 <CC_PalTrngParamGet+0xa>
   1f060:	680b      	ldr	r3, [r1, #0]
   1f062:	2b1c      	cmp	r3, #28
   1f064:	d001      	beq.n	1f06a <CC_PalTrngParamGet+0xe>
   1f066:	2001      	movs	r0, #1
   1f068:	4770      	bx	lr
   1f06a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f06e:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1f072:	3201      	adds	r2, #1
   1f074:	bf14      	ite	ne
   1f076:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1f07a:	f241 225c 	movweq	r2, #4700	; 0x125c
   1f07e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f082:	6002      	str	r2, [r0, #0]
   1f084:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1f088:	3201      	adds	r2, #1
   1f08a:	bf14      	ite	ne
   1f08c:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1f090:	f641 1264 	movweq	r2, #6500	; 0x1964
   1f094:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f098:	6042      	str	r2, [r0, #4]
   1f09a:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1f09e:	3201      	adds	r2, #1
   1f0a0:	bf14      	ite	ne
   1f0a2:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1f0a6:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1f0aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f0ae:	6082      	str	r2, [r0, #8]
   1f0b0:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1f0b4:	3201      	adds	r2, #1
   1f0b6:	bf14      	ite	ne
   1f0b8:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1f0bc:	f241 3288 	movweq	r2, #5000	; 0x1388
   1f0c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f0c4:	60c2      	str	r2, [r0, #12]
   1f0c6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1f0ca:	3201      	adds	r2, #1
   1f0cc:	bf14      	ite	ne
   1f0ce:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1f0d2:	2290      	moveq	r2, #144	; 0x90
   1f0d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f0d8:	6102      	str	r2, [r0, #16]
   1f0da:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1f0de:	3201      	adds	r2, #1
   1f0e0:	bf14      	ite	ne
   1f0e2:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1f0e6:	2251      	moveq	r2, #81	; 0x51
   1f0e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f0ec:	6142      	str	r2, [r0, #20]
   1f0ee:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1f0f2:	3201      	adds	r2, #1
   1f0f4:	bf14      	ite	ne
   1f0f6:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1f0fa:	f240 3337 	movweq	r3, #823	; 0x337
   1f0fe:	6183      	str	r3, [r0, #24]
   1f100:	2000      	movs	r0, #0
   1f102:	4770      	bx	lr

0001f104 <LLF_RND_WaitRngInterrupt>:
   1f104:	b508      	push	{r3, lr}
   1f106:	4601      	mov	r1, r0
   1f108:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1f10c:	f7fe fe32 	bl	1dd74 <CC_HalWaitInterruptRND>
   1f110:	4902      	ldr	r1, [pc, #8]	; (1f11c <LLF_RND_WaitRngInterrupt+0x18>)
   1f112:	4a03      	ldr	r2, [pc, #12]	; (1f120 <LLF_RND_WaitRngInterrupt+0x1c>)
   1f114:	2300      	movs	r3, #0
   1f116:	600b      	str	r3, [r1, #0]
   1f118:	6013      	str	r3, [r2, #0]
   1f11a:	bd08      	pop	{r3, pc}
   1f11c:	5002b1c8 	.word	0x5002b1c8
   1f120:	5002b12c 	.word	0x5002b12c

0001f124 <LLF_RND_GetRoscSampleCnt>:
   1f124:	3801      	subs	r0, #1
   1f126:	2807      	cmp	r0, #7
   1f128:	d805      	bhi.n	1f136 <LLF_RND_GetRoscSampleCnt+0x12>
   1f12a:	e8df f000 	tbb	[pc, r0]
   1f12e:	0e0a      	.short	0x0e0a
   1f130:	04041204 	.word	0x04041204
   1f134:	0604      	.short	0x0604
   1f136:	4809      	ldr	r0, [pc, #36]	; (1f15c <LLF_RND_GetRoscSampleCnt+0x38>)
   1f138:	4770      	bx	lr
   1f13a:	68cb      	ldr	r3, [r1, #12]
   1f13c:	624b      	str	r3, [r1, #36]	; 0x24
   1f13e:	2000      	movs	r0, #0
   1f140:	4770      	bx	lr
   1f142:	680b      	ldr	r3, [r1, #0]
   1f144:	624b      	str	r3, [r1, #36]	; 0x24
   1f146:	2000      	movs	r0, #0
   1f148:	4770      	bx	lr
   1f14a:	684b      	ldr	r3, [r1, #4]
   1f14c:	624b      	str	r3, [r1, #36]	; 0x24
   1f14e:	2000      	movs	r0, #0
   1f150:	4770      	bx	lr
   1f152:	688b      	ldr	r3, [r1, #8]
   1f154:	624b      	str	r3, [r1, #36]	; 0x24
   1f156:	2000      	movs	r0, #0
   1f158:	4770      	bx	lr
   1f15a:	bf00      	nop
   1f15c:	00f10c31 	.word	0x00f10c31

0001f160 <LLF_RND_GetFastestRosc>:
   1f160:	680b      	ldr	r3, [r1, #0]
   1f162:	e002      	b.n	1f16a <LLF_RND_GetFastestRosc+0xa>
   1f164:	2b08      	cmp	r3, #8
   1f166:	600b      	str	r3, [r1, #0]
   1f168:	d806      	bhi.n	1f178 <LLF_RND_GetFastestRosc+0x18>
   1f16a:	6a02      	ldr	r2, [r0, #32]
   1f16c:	4213      	tst	r3, r2
   1f16e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1f172:	d0f7      	beq.n	1f164 <LLF_RND_GetFastestRosc+0x4>
   1f174:	2000      	movs	r0, #0
   1f176:	4770      	bx	lr
   1f178:	4800      	ldr	r0, [pc, #0]	; (1f17c <LLF_RND_GetFastestRosc+0x1c>)
   1f17a:	4770      	bx	lr
   1f17c:	00f10c31 	.word	0x00f10c31

0001f180 <LLF_RND_TurnOffTrng>:
   1f180:	4904      	ldr	r1, [pc, #16]	; (1f194 <LLF_RND_TurnOffTrng+0x14>)
   1f182:	4a05      	ldr	r2, [pc, #20]	; (1f198 <LLF_RND_TurnOffTrng+0x18>)
   1f184:	2300      	movs	r3, #0
   1f186:	600b      	str	r3, [r1, #0]
   1f188:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1f18c:	6013      	str	r3, [r2, #0]
   1f18e:	f7fe bdd7 	b.w	1dd40 <CC_HalClearInterruptBit>
   1f192:	bf00      	nop
   1f194:	5002b12c 	.word	0x5002b12c
   1f198:	5002b1c4 	.word	0x5002b1c4

0001f19c <SetDataBuffersInfo>:
   1f19c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f19e:	b083      	sub	sp, #12
   1f1a0:	2400      	movs	r4, #0
   1f1a2:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1f1a6:	f88d 4007 	strb.w	r4, [sp, #7]
   1f1aa:	d325      	bcc.n	1f1f8 <SetDataBuffersInfo+0x5c>
   1f1ac:	460c      	mov	r4, r1
   1f1ae:	4404      	add	r4, r0
   1f1b0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1f1b4:	4605      	mov	r5, r0
   1f1b6:	d81f      	bhi.n	1f1f8 <SetDataBuffersInfo+0x5c>
   1f1b8:	4617      	mov	r7, r2
   1f1ba:	461e      	mov	r6, r3
   1f1bc:	2201      	movs	r2, #1
   1f1be:	f10d 0307 	add.w	r3, sp, #7
   1f1c2:	f000 fa13 	bl	1f5ec <CC_PalDataBufferAttrGet>
   1f1c6:	4604      	mov	r4, r0
   1f1c8:	b9b0      	cbnz	r0, 1f1f8 <SetDataBuffersInfo+0x5c>
   1f1ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f1cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f1d0:	603d      	str	r5, [r7, #0]
   1f1d2:	713b      	strb	r3, [r7, #4]
   1f1d4:	b192      	cbz	r2, 1f1fc <SetDataBuffersInfo+0x60>
   1f1d6:	b14e      	cbz	r6, 1f1ec <SetDataBuffersInfo+0x50>
   1f1d8:	4602      	mov	r2, r0
   1f1da:	9908      	ldr	r1, [sp, #32]
   1f1dc:	f10d 0307 	add.w	r3, sp, #7
   1f1e0:	4630      	mov	r0, r6
   1f1e2:	f000 fa03 	bl	1f5ec <CC_PalDataBufferAttrGet>
   1f1e6:	b938      	cbnz	r0, 1f1f8 <SetDataBuffersInfo+0x5c>
   1f1e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f1ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f1ee:	4620      	mov	r0, r4
   1f1f0:	6016      	str	r6, [r2, #0]
   1f1f2:	7113      	strb	r3, [r2, #4]
   1f1f4:	b003      	add	sp, #12
   1f1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f1f8:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   1f1fc:	4620      	mov	r0, r4
   1f1fe:	b003      	add	sp, #12
   1f200:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f202:	bf00      	nop

0001f204 <InitHashDrv>:
   1f204:	b1e8      	cbz	r0, 1f242 <InitHashDrv+0x3e>
   1f206:	b510      	push	{r4, lr}
   1f208:	6804      	ldr	r4, [r0, #0]
   1f20a:	2c01      	cmp	r4, #1
   1f20c:	d004      	beq.n	1f218 <InitHashDrv+0x14>
   1f20e:	2c02      	cmp	r4, #2
   1f210:	d010      	beq.n	1f234 <InitHashDrv+0x30>
   1f212:	b144      	cbz	r4, 1f226 <InitHashDrv+0x22>
   1f214:	480c      	ldr	r0, [pc, #48]	; (1f248 <InitHashDrv+0x44>)
   1f216:	bd10      	pop	{r4, pc}
   1f218:	490c      	ldr	r1, [pc, #48]	; (1f24c <InitHashDrv+0x48>)
   1f21a:	2220      	movs	r2, #32
   1f21c:	3008      	adds	r0, #8
   1f21e:	f7ff ff15 	bl	1f04c <CC_PalMemCopyPlat>
   1f222:	2000      	movs	r0, #0
   1f224:	bd10      	pop	{r4, pc}
   1f226:	490a      	ldr	r1, [pc, #40]	; (1f250 <InitHashDrv+0x4c>)
   1f228:	2214      	movs	r2, #20
   1f22a:	3008      	adds	r0, #8
   1f22c:	f7ff ff0e 	bl	1f04c <CC_PalMemCopyPlat>
   1f230:	4620      	mov	r0, r4
   1f232:	bd10      	pop	{r4, pc}
   1f234:	4907      	ldr	r1, [pc, #28]	; (1f254 <InitHashDrv+0x50>)
   1f236:	2220      	movs	r2, #32
   1f238:	3008      	adds	r0, #8
   1f23a:	f7ff ff07 	bl	1f04c <CC_PalMemCopyPlat>
   1f23e:	2000      	movs	r0, #0
   1f240:	bd10      	pop	{r4, pc}
   1f242:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1f246:	4770      	bx	lr
   1f248:	00f30001 	.word	0x00f30001
   1f24c:	00023600 	.word	0x00023600
   1f250:	000235cc 	.word	0x000235cc
   1f254:	000235e0 	.word	0x000235e0

0001f258 <ProcessHashDrv>:
   1f258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f25c:	2900      	cmp	r1, #0
   1f25e:	f000 80ef 	beq.w	1f440 <ProcessHashDrv+0x1e8>
   1f262:	4604      	mov	r4, r0
   1f264:	2800      	cmp	r0, #0
   1f266:	f000 80ef 	beq.w	1f448 <ProcessHashDrv+0x1f0>
   1f26a:	6803      	ldr	r3, [r0, #0]
   1f26c:	4617      	mov	r7, r2
   1f26e:	460e      	mov	r6, r1
   1f270:	2b00      	cmp	r3, #0
   1f272:	f000 80b9 	beq.w	1f3e8 <ProcessHashDrv+0x190>
   1f276:	3b01      	subs	r3, #1
   1f278:	2b01      	cmp	r3, #1
   1f27a:	f200 80cd 	bhi.w	1f418 <ProcessHashDrv+0x1c0>
   1f27e:	4874      	ldr	r0, [pc, #464]	; (1f450 <ProcessHashDrv+0x1f8>)
   1f280:	f04f 31ff 	mov.w	r1, #4294967295
   1f284:	f04f 0802 	mov.w	r8, #2
   1f288:	f7fe fe02 	bl	1de90 <CC_PalMutexLock>
   1f28c:	2800      	cmp	r0, #0
   1f28e:	f040 80b5 	bne.w	1f3fc <ProcessHashDrv+0x1a4>
   1f292:	2000      	movs	r0, #0
   1f294:	f7fe fe2c 	bl	1def0 <CC_PalPowerSaveModeSelect>
   1f298:	4605      	mov	r5, r0
   1f29a:	2800      	cmp	r0, #0
   1f29c:	f040 80b8 	bne.w	1f410 <ProcessHashDrv+0x1b8>
   1f2a0:	4a6c      	ldr	r2, [pc, #432]	; (1f454 <ProcessHashDrv+0x1fc>)
   1f2a2:	6813      	ldr	r3, [r2, #0]
   1f2a4:	2b00      	cmp	r3, #0
   1f2a6:	d1fc      	bne.n	1f2a2 <ProcessHashDrv+0x4a>
   1f2a8:	486b      	ldr	r0, [pc, #428]	; (1f458 <ProcessHashDrv+0x200>)
   1f2aa:	6803      	ldr	r3, [r0, #0]
   1f2ac:	2b00      	cmp	r3, #0
   1f2ae:	d1fc      	bne.n	1f2aa <ProcessHashDrv+0x52>
   1f2b0:	f04f 30ff 	mov.w	r0, #4294967295
   1f2b4:	f7fe fd44 	bl	1dd40 <CC_HalClearInterruptBit>
   1f2b8:	4b68      	ldr	r3, [pc, #416]	; (1f45c <ProcessHashDrv+0x204>)
   1f2ba:	6818      	ldr	r0, [r3, #0]
   1f2bc:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1f2c0:	f7fe fd4c 	bl	1dd5c <CC_HalMaskInterrupt>
   1f2c4:	4866      	ldr	r0, [pc, #408]	; (1f460 <ProcessHashDrv+0x208>)
   1f2c6:	4a67      	ldr	r2, [pc, #412]	; (1f464 <ProcessHashDrv+0x20c>)
   1f2c8:	4967      	ldr	r1, [pc, #412]	; (1f468 <ProcessHashDrv+0x210>)
   1f2ca:	2301      	movs	r3, #1
   1f2cc:	6003      	str	r3, [r0, #0]
   1f2ce:	2007      	movs	r0, #7
   1f2d0:	6010      	str	r0, [r2, #0]
   1f2d2:	600b      	str	r3, [r1, #0]
   1f2d4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   1f2d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1f2da:	6013      	str	r3, [r2, #0]
   1f2dc:	4b63      	ldr	r3, [pc, #396]	; (1f46c <ProcessHashDrv+0x214>)
   1f2de:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1f2e0:	6051      	str	r1, [r2, #4]
   1f2e2:	f8c3 8000 	str.w	r8, [r3]
   1f2e6:	6823      	ldr	r3, [r4, #0]
   1f2e8:	b15b      	cbz	r3, 1f302 <ProcessHashDrv+0xaa>
   1f2ea:	3b01      	subs	r3, #1
   1f2ec:	2b01      	cmp	r3, #1
   1f2ee:	d817      	bhi.n	1f320 <ProcessHashDrv+0xc8>
   1f2f0:	4b5f      	ldr	r3, [pc, #380]	; (1f470 <ProcessHashDrv+0x218>)
   1f2f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1f2f4:	601a      	str	r2, [r3, #0]
   1f2f6:	6a22      	ldr	r2, [r4, #32]
   1f2f8:	f843 2c04 	str.w	r2, [r3, #-4]
   1f2fc:	69e2      	ldr	r2, [r4, #28]
   1f2fe:	f843 2c08 	str.w	r2, [r3, #-8]
   1f302:	4b5c      	ldr	r3, [pc, #368]	; (1f474 <ProcessHashDrv+0x21c>)
   1f304:	69a2      	ldr	r2, [r4, #24]
   1f306:	601a      	str	r2, [r3, #0]
   1f308:	6962      	ldr	r2, [r4, #20]
   1f30a:	f843 2c04 	str.w	r2, [r3, #-4]
   1f30e:	6922      	ldr	r2, [r4, #16]
   1f310:	f843 2c08 	str.w	r2, [r3, #-8]
   1f314:	68e2      	ldr	r2, [r4, #12]
   1f316:	f843 2c0c 	str.w	r2, [r3, #-12]
   1f31a:	68a2      	ldr	r2, [r4, #8]
   1f31c:	f843 2c10 	str.w	r2, [r3, #-16]
   1f320:	4a55      	ldr	r2, [pc, #340]	; (1f478 <ProcessHashDrv+0x220>)
   1f322:	6813      	ldr	r3, [r2, #0]
   1f324:	2b00      	cmp	r3, #0
   1f326:	d1fc      	bne.n	1f322 <ProcessHashDrv+0xca>
   1f328:	2f00      	cmp	r7, #0
   1f32a:	d059      	beq.n	1f3e0 <ProcessHashDrv+0x188>
   1f32c:	6863      	ldr	r3, [r4, #4]
   1f32e:	2b01      	cmp	r3, #1
   1f330:	bf04      	itt	eq
   1f332:	4a52      	ldreq	r2, [pc, #328]	; (1f47c <ProcessHashDrv+0x224>)
   1f334:	6013      	streq	r3, [r2, #0]
   1f336:	4a52      	ldr	r2, [pc, #328]	; (1f480 <ProcessHashDrv+0x228>)
   1f338:	4b52      	ldr	r3, [pc, #328]	; (1f484 <ProcessHashDrv+0x22c>)
   1f33a:	6831      	ldr	r1, [r6, #0]
   1f33c:	6011      	str	r1, [r2, #0]
   1f33e:	2040      	movs	r0, #64	; 0x40
   1f340:	601f      	str	r7, [r3, #0]
   1f342:	f7fe fd11 	bl	1dd68 <CC_HalWaitInterrupt>
   1f346:	4605      	mov	r5, r0
   1f348:	4a4b      	ldr	r2, [pc, #300]	; (1f478 <ProcessHashDrv+0x220>)
   1f34a:	6813      	ldr	r3, [r2, #0]
   1f34c:	2b00      	cmp	r3, #0
   1f34e:	d1fc      	bne.n	1f34a <ProcessHashDrv+0xf2>
   1f350:	4a41      	ldr	r2, [pc, #260]	; (1f458 <ProcessHashDrv+0x200>)
   1f352:	6813      	ldr	r3, [r2, #0]
   1f354:	2b00      	cmp	r3, #0
   1f356:	d1fc      	bne.n	1f352 <ProcessHashDrv+0xfa>
   1f358:	6823      	ldr	r3, [r4, #0]
   1f35a:	b15b      	cbz	r3, 1f374 <ProcessHashDrv+0x11c>
   1f35c:	3b01      	subs	r3, #1
   1f35e:	2b01      	cmp	r3, #1
   1f360:	d817      	bhi.n	1f392 <ProcessHashDrv+0x13a>
   1f362:	4a43      	ldr	r2, [pc, #268]	; (1f470 <ProcessHashDrv+0x218>)
   1f364:	4b48      	ldr	r3, [pc, #288]	; (1f488 <ProcessHashDrv+0x230>)
   1f366:	6812      	ldr	r2, [r2, #0]
   1f368:	6262      	str	r2, [r4, #36]	; 0x24
   1f36a:	681a      	ldr	r2, [r3, #0]
   1f36c:	6222      	str	r2, [r4, #32]
   1f36e:	3b04      	subs	r3, #4
   1f370:	681b      	ldr	r3, [r3, #0]
   1f372:	61e3      	str	r3, [r4, #28]
   1f374:	4a3f      	ldr	r2, [pc, #252]	; (1f474 <ProcessHashDrv+0x21c>)
   1f376:	4b45      	ldr	r3, [pc, #276]	; (1f48c <ProcessHashDrv+0x234>)
   1f378:	6812      	ldr	r2, [r2, #0]
   1f37a:	61a2      	str	r2, [r4, #24]
   1f37c:	681a      	ldr	r2, [r3, #0]
   1f37e:	6162      	str	r2, [r4, #20]
   1f380:	f853 2c04 	ldr.w	r2, [r3, #-4]
   1f384:	6122      	str	r2, [r4, #16]
   1f386:	f853 2c08 	ldr.w	r2, [r3, #-8]
   1f38a:	60e2      	str	r2, [r4, #12]
   1f38c:	3b0c      	subs	r3, #12
   1f38e:	681b      	ldr	r3, [r3, #0]
   1f390:	60a3      	str	r3, [r4, #8]
   1f392:	4b3f      	ldr	r3, [pc, #252]	; (1f490 <ProcessHashDrv+0x238>)
   1f394:	4a3f      	ldr	r2, [pc, #252]	; (1f494 <ProcessHashDrv+0x23c>)
   1f396:	681b      	ldr	r3, [r3, #0]
   1f398:	64a3      	str	r3, [r4, #72]	; 0x48
   1f39a:	6812      	ldr	r2, [r2, #0]
   1f39c:	4b32      	ldr	r3, [pc, #200]	; (1f468 <ProcessHashDrv+0x210>)
   1f39e:	64e2      	str	r2, [r4, #76]	; 0x4c
   1f3a0:	4836      	ldr	r0, [pc, #216]	; (1f47c <ProcessHashDrv+0x224>)
   1f3a2:	493d      	ldr	r1, [pc, #244]	; (1f498 <ProcessHashDrv+0x240>)
   1f3a4:	2201      	movs	r2, #1
   1f3a6:	601a      	str	r2, [r3, #0]
   1f3a8:	2300      	movs	r3, #0
   1f3aa:	4a33      	ldr	r2, [pc, #204]	; (1f478 <ProcessHashDrv+0x220>)
   1f3ac:	6003      	str	r3, [r0, #0]
   1f3ae:	600b      	str	r3, [r1, #0]
   1f3b0:	6813      	ldr	r3, [r2, #0]
   1f3b2:	2b00      	cmp	r3, #0
   1f3b4:	d1fc      	bne.n	1f3b0 <ProcessHashDrv+0x158>
   1f3b6:	4a2a      	ldr	r2, [pc, #168]	; (1f460 <ProcessHashDrv+0x208>)
   1f3b8:	6013      	str	r3, [r2, #0]
   1f3ba:	2d00      	cmp	r5, #0
   1f3bc:	d13a      	bne.n	1f434 <ProcessHashDrv+0x1dc>
   1f3be:	4b27      	ldr	r3, [pc, #156]	; (1f45c <ProcessHashDrv+0x204>)
   1f3c0:	6818      	ldr	r0, [r3, #0]
   1f3c2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1f3c6:	f7fe fcc9 	bl	1dd5c <CC_HalMaskInterrupt>
   1f3ca:	2001      	movs	r0, #1
   1f3cc:	f7fe fd90 	bl	1def0 <CC_PalPowerSaveModeSelect>
   1f3d0:	bb60      	cbnz	r0, 1f42c <ProcessHashDrv+0x1d4>
   1f3d2:	481f      	ldr	r0, [pc, #124]	; (1f450 <ProcessHashDrv+0x1f8>)
   1f3d4:	f7fe fd64 	bl	1dea0 <CC_PalMutexUnlock>
   1f3d8:	bb10      	cbnz	r0, 1f420 <ProcessHashDrv+0x1c8>
   1f3da:	4628      	mov	r0, r5
   1f3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f3e0:	4b2d      	ldr	r3, [pc, #180]	; (1f498 <ProcessHashDrv+0x240>)
   1f3e2:	2204      	movs	r2, #4
   1f3e4:	601a      	str	r2, [r3, #0]
   1f3e6:	e7af      	b.n	1f348 <ProcessHashDrv+0xf0>
   1f3e8:	4819      	ldr	r0, [pc, #100]	; (1f450 <ProcessHashDrv+0x1f8>)
   1f3ea:	f04f 31ff 	mov.w	r1, #4294967295
   1f3ee:	f04f 0801 	mov.w	r8, #1
   1f3f2:	f7fe fd4d 	bl	1de90 <CC_PalMutexLock>
   1f3f6:	2800      	cmp	r0, #0
   1f3f8:	f43f af4b 	beq.w	1f292 <ProcessHashDrv+0x3a>
   1f3fc:	4827      	ldr	r0, [pc, #156]	; (1f49c <ProcessHashDrv+0x244>)
   1f3fe:	f7fe f9b1 	bl	1d764 <CC_PalAbort>
   1f402:	2000      	movs	r0, #0
   1f404:	f7fe fd74 	bl	1def0 <CC_PalPowerSaveModeSelect>
   1f408:	4605      	mov	r5, r0
   1f40a:	2800      	cmp	r0, #0
   1f40c:	f43f af48 	beq.w	1f2a0 <ProcessHashDrv+0x48>
   1f410:	4823      	ldr	r0, [pc, #140]	; (1f4a0 <ProcessHashDrv+0x248>)
   1f412:	f7fe f9a7 	bl	1d764 <CC_PalAbort>
   1f416:	e743      	b.n	1f2a0 <ProcessHashDrv+0x48>
   1f418:	4d22      	ldr	r5, [pc, #136]	; (1f4a4 <ProcessHashDrv+0x24c>)
   1f41a:	4628      	mov	r0, r5
   1f41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f420:	4821      	ldr	r0, [pc, #132]	; (1f4a8 <ProcessHashDrv+0x250>)
   1f422:	f7fe f99f 	bl	1d764 <CC_PalAbort>
   1f426:	4628      	mov	r0, r5
   1f428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f42c:	481f      	ldr	r0, [pc, #124]	; (1f4ac <ProcessHashDrv+0x254>)
   1f42e:	f7fe f999 	bl	1d764 <CC_PalAbort>
   1f432:	e7ce      	b.n	1f3d2 <ProcessHashDrv+0x17a>
   1f434:	f104 0008 	add.w	r0, r4, #8
   1f438:	2110      	movs	r1, #16
   1f43a:	f7ff fe0b 	bl	1f054 <CC_PalMemSetZeroPlat>
   1f43e:	e7be      	b.n	1f3be <ProcessHashDrv+0x166>
   1f440:	4d1b      	ldr	r5, [pc, #108]	; (1f4b0 <ProcessHashDrv+0x258>)
   1f442:	4628      	mov	r0, r5
   1f444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f448:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   1f44c:	e7c5      	b.n	1f3da <ProcessHashDrv+0x182>
   1f44e:	bf00      	nop
   1f450:	20000580 	.word	0x20000580
   1f454:	5002b91c 	.word	0x5002b91c
   1f458:	5002bc20 	.word	0x5002bc20
   1f45c:	5002ba04 	.word	0x5002ba04
   1f460:	5002b818 	.word	0x5002b818
   1f464:	5002b900 	.word	0x5002b900
   1f468:	5002b7c4 	.word	0x5002b7c4
   1f46c:	5002b7c0 	.word	0x5002b7c0
   1f470:	5002b65c 	.word	0x5002b65c
   1f474:	5002b650 	.word	0x5002b650
   1f478:	5002b910 	.word	0x5002b910
   1f47c:	5002b684 	.word	0x5002b684
   1f480:	5002bc28 	.word	0x5002bc28
   1f484:	5002bc2c 	.word	0x5002bc2c
   1f488:	5002b658 	.word	0x5002b658
   1f48c:	5002b64c 	.word	0x5002b64c
   1f490:	5002b7cc 	.word	0x5002b7cc
   1f494:	5002b7d0 	.word	0x5002b7d0
   1f498:	5002b7c8 	.word	0x5002b7c8
   1f49c:	00023514 	.word	0x00023514
   1f4a0:	0002352c 	.word	0x0002352c
   1f4a4:	00f30001 	.word	0x00f30001
   1f4a8:	0002356c 	.word	0x0002356c
   1f4ac:	0002354c 	.word	0x0002354c
   1f4b0:	00f30003 	.word	0x00f30003

0001f4b4 <FinishHashDrv>:
   1f4b4:	2800      	cmp	r0, #0
   1f4b6:	d03b      	beq.n	1f530 <FinishHashDrv+0x7c>
   1f4b8:	b4f0      	push	{r4, r5, r6, r7}
   1f4ba:	b082      	sub	sp, #8
   1f4bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1f4be:	9301      	str	r3, [sp, #4]
   1f4c0:	6883      	ldr	r3, [r0, #8]
   1f4c2:	fa93 fc83 	rev.w	ip, r3
   1f4c6:	9b01      	ldr	r3, [sp, #4]
   1f4c8:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   1f4cc:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   1f4d0:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   1f4d4:	ba1b      	rev	r3, r3
   1f4d6:	6243      	str	r3, [r0, #36]	; 0x24
   1f4d8:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1f4da:	9301      	str	r3, [sp, #4]
   1f4dc:	ba09      	rev	r1, r1
   1f4de:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1f4e0:	61c1      	str	r1, [r0, #28]
   1f4e2:	ba12      	rev	r2, r2
   1f4e4:	6202      	str	r2, [r0, #32]
   1f4e6:	ba3f      	rev	r7, r7
   1f4e8:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   1f4ec:	ba36      	rev	r6, r6
   1f4ee:	ba2d      	rev	r5, r5
   1f4f0:	ba24      	rev	r4, r4
   1f4f2:	e9c0 c702 	strd	ip, r7, [r0, #8]
   1f4f6:	e9c0 6504 	strd	r6, r5, [r0, #16]
   1f4fa:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1f4fc:	6b06      	ldr	r6, [r0, #48]	; 0x30
   1f4fe:	6b45      	ldr	r5, [r0, #52]	; 0x34
   1f500:	6184      	str	r4, [r0, #24]
   1f502:	fa93 fc83 	rev.w	ip, r3
   1f506:	6b84      	ldr	r4, [r0, #56]	; 0x38
   1f508:	9b01      	ldr	r3, [sp, #4]
   1f50a:	ba3f      	rev	r7, r7
   1f50c:	ba36      	rev	r6, r6
   1f50e:	ba2d      	rev	r5, r5
   1f510:	ba24      	rev	r4, r4
   1f512:	ba09      	rev	r1, r1
   1f514:	ba12      	rev	r2, r2
   1f516:	ba1b      	rev	r3, r3
   1f518:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   1f51c:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   1f520:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   1f524:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   1f528:	2000      	movs	r0, #0
   1f52a:	b002      	add	sp, #8
   1f52c:	bcf0      	pop	{r4, r5, r6, r7}
   1f52e:	4770      	bx	lr
   1f530:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1f534:	4770      	bx	lr
   1f536:	bf00      	nop

0001f538 <cc_mbedtls_aes_init>:
   1f538:	b510      	push	{r4, lr}
   1f53a:	4604      	mov	r4, r0
   1f53c:	b130      	cbz	r0, 1f54c <cc_mbedtls_aes_init+0x14>
   1f53e:	2200      	movs	r2, #0
   1f540:	2301      	movs	r3, #1
   1f542:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1f546:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   1f54a:	bd10      	pop	{r4, pc}
   1f54c:	4801      	ldr	r0, [pc, #4]	; (1f554 <cc_mbedtls_aes_init+0x1c>)
   1f54e:	f7fe f909 	bl	1d764 <CC_PalAbort>
   1f552:	e7f4      	b.n	1f53e <cc_mbedtls_aes_init+0x6>
   1f554:	00023620 	.word	0x00023620

0001f558 <cc_mbedtls_aes_free>:
   1f558:	b118      	cbz	r0, 1f562 <cc_mbedtls_aes_free+0xa>
   1f55a:	2274      	movs	r2, #116	; 0x74
   1f55c:	2100      	movs	r1, #0
   1f55e:	f7ff bd77 	b.w	1f050 <CC_PalMemSetPlat>
   1f562:	4770      	bx	lr

0001f564 <cc_mbedtls_aes_setkey_enc>:
   1f564:	b190      	cbz	r0, 1f58c <cc_mbedtls_aes_setkey_enc+0x28>
   1f566:	b1a1      	cbz	r1, 1f592 <cc_mbedtls_aes_setkey_enc+0x2e>
   1f568:	b510      	push	{r4, lr}
   1f56a:	2a80      	cmp	r2, #128	; 0x80
   1f56c:	f04f 0400 	mov.w	r4, #0
   1f570:	6384      	str	r4, [r0, #56]	; 0x38
   1f572:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   1f576:	d106      	bne.n	1f586 <cc_mbedtls_aes_setkey_enc+0x22>
   1f578:	6304      	str	r4, [r0, #48]	; 0x30
   1f57a:	2210      	movs	r2, #16
   1f57c:	3010      	adds	r0, #16
   1f57e:	f7ff fd65 	bl	1f04c <CC_PalMemCopyPlat>
   1f582:	4620      	mov	r0, r4
   1f584:	bd10      	pop	{r4, pc}
   1f586:	f06f 001f 	mvn.w	r0, #31
   1f58a:	bd10      	pop	{r4, pc}
   1f58c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1f590:	4770      	bx	lr
   1f592:	f06f 001f 	mvn.w	r0, #31
   1f596:	4770      	bx	lr

0001f598 <cc_mbedtls_aes_crypt_ecb>:
   1f598:	b320      	cbz	r0, 1f5e4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1f59a:	b31a      	cbz	r2, 1f5e4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1f59c:	b313      	cbz	r3, 1f5e4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1f59e:	2901      	cmp	r1, #1
   1f5a0:	d820      	bhi.n	1f5e4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1f5a2:	b570      	push	{r4, r5, r6, lr}
   1f5a4:	4604      	mov	r4, r0
   1f5a6:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1f5a8:	b086      	sub	sp, #24
   1f5aa:	d016      	beq.n	1f5da <cc_mbedtls_aes_crypt_ecb+0x42>
   1f5ac:	2901      	cmp	r1, #1
   1f5ae:	d116      	bne.n	1f5de <cc_mbedtls_aes_crypt_ecb+0x46>
   1f5b0:	2100      	movs	r1, #0
   1f5b2:	2510      	movs	r5, #16
   1f5b4:	ae04      	add	r6, sp, #16
   1f5b6:	6361      	str	r1, [r4, #52]	; 0x34
   1f5b8:	4610      	mov	r0, r2
   1f5ba:	e9cd 5600 	strd	r5, r6, [sp]
   1f5be:	aa02      	add	r2, sp, #8
   1f5c0:	4629      	mov	r1, r5
   1f5c2:	f7ff fdeb 	bl	1f19c <SetDataBuffersInfo>
   1f5c6:	b950      	cbnz	r0, 1f5de <cc_mbedtls_aes_crypt_ecb+0x46>
   1f5c8:	462b      	mov	r3, r5
   1f5ca:	4632      	mov	r2, r6
   1f5cc:	a902      	add	r1, sp, #8
   1f5ce:	4620      	mov	r0, r4
   1f5d0:	f000 f8d6 	bl	1f780 <ProcessAesDrv>
   1f5d4:	b918      	cbnz	r0, 1f5de <cc_mbedtls_aes_crypt_ecb+0x46>
   1f5d6:	b006      	add	sp, #24
   1f5d8:	bd70      	pop	{r4, r5, r6, pc}
   1f5da:	2900      	cmp	r1, #0
   1f5dc:	d0e8      	beq.n	1f5b0 <cc_mbedtls_aes_crypt_ecb+0x18>
   1f5de:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1f5e2:	e7f8      	b.n	1f5d6 <cc_mbedtls_aes_crypt_ecb+0x3e>
   1f5e4:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1f5e8:	4770      	bx	lr
   1f5ea:	bf00      	nop

0001f5ec <CC_PalDataBufferAttrGet>:
   1f5ec:	2000      	movs	r0, #0
   1f5ee:	7018      	strb	r0, [r3, #0]
   1f5f0:	4770      	bx	lr
   1f5f2:	bf00      	nop

0001f5f4 <LoadAesKey>:
   1f5f4:	2800      	cmp	r0, #0
   1f5f6:	d03b      	beq.n	1f670 <LoadAesKey+0x7c>
   1f5f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1f5fc:	2b00      	cmp	r3, #0
   1f5fe:	d02c      	beq.n	1f65a <LoadAesKey+0x66>
   1f600:	2b03      	cmp	r3, #3
   1f602:	b510      	push	{r4, lr}
   1f604:	d00f      	beq.n	1f626 <LoadAesKey+0x32>
   1f606:	481c      	ldr	r0, [pc, #112]	; (1f678 <LoadAesKey+0x84>)
   1f608:	4c1c      	ldr	r4, [pc, #112]	; (1f67c <LoadAesKey+0x88>)
   1f60a:	6822      	ldr	r2, [r4, #0]
   1f60c:	4b1c      	ldr	r3, [pc, #112]	; (1f680 <LoadAesKey+0x8c>)
   1f60e:	6812      	ldr	r2, [r2, #0]
   1f610:	601a      	str	r2, [r3, #0]
   1f612:	6822      	ldr	r2, [r4, #0]
   1f614:	6852      	ldr	r2, [r2, #4]
   1f616:	605a      	str	r2, [r3, #4]
   1f618:	6822      	ldr	r2, [r4, #0]
   1f61a:	6892      	ldr	r2, [r2, #8]
   1f61c:	609a      	str	r2, [r3, #8]
   1f61e:	6822      	ldr	r2, [r4, #0]
   1f620:	68d2      	ldr	r2, [r2, #12]
   1f622:	60da      	str	r2, [r3, #12]
   1f624:	bd10      	pop	{r4, pc}
   1f626:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1f628:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1f62a:	4c14      	ldr	r4, [pc, #80]	; (1f67c <LoadAesKey+0x88>)
   1f62c:	f000 fba4 	bl	1fd78 <kmu_validate_kdr_slot_and_size>
   1f630:	2800      	cmp	r0, #0
   1f632:	d1ea      	bne.n	1f60a <LoadAesKey+0x16>
   1f634:	6821      	ldr	r1, [r4, #0]
   1f636:	4a12      	ldr	r2, [pc, #72]	; (1f680 <LoadAesKey+0x8c>)
   1f638:	6809      	ldr	r1, [r1, #0]
   1f63a:	6011      	str	r1, [r2, #0]
   1f63c:	6821      	ldr	r1, [r4, #0]
   1f63e:	4b11      	ldr	r3, [pc, #68]	; (1f684 <LoadAesKey+0x90>)
   1f640:	6849      	ldr	r1, [r1, #4]
   1f642:	6019      	str	r1, [r3, #0]
   1f644:	6821      	ldr	r1, [r4, #0]
   1f646:	6889      	ldr	r1, [r1, #8]
   1f648:	6091      	str	r1, [r2, #8]
   1f64a:	6822      	ldr	r2, [r4, #0]
   1f64c:	68d2      	ldr	r2, [r2, #12]
   1f64e:	609a      	str	r2, [r3, #8]
   1f650:	f000 fb9e 	bl	1fd90 <kmu_use_kdr_key>
   1f654:	2800      	cmp	r0, #0
   1f656:	d1d8      	bne.n	1f60a <LoadAesKey+0x16>
   1f658:	bd10      	pop	{r4, pc}
   1f65a:	4a09      	ldr	r2, [pc, #36]	; (1f680 <LoadAesKey+0x8c>)
   1f65c:	6901      	ldr	r1, [r0, #16]
   1f65e:	6011      	str	r1, [r2, #0]
   1f660:	6941      	ldr	r1, [r0, #20]
   1f662:	6051      	str	r1, [r2, #4]
   1f664:	6981      	ldr	r1, [r0, #24]
   1f666:	6091      	str	r1, [r2, #8]
   1f668:	69c1      	ldr	r1, [r0, #28]
   1f66a:	60d1      	str	r1, [r2, #12]
   1f66c:	4618      	mov	r0, r3
   1f66e:	4770      	bx	lr
   1f670:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1f674:	4770      	bx	lr
   1f676:	bf00      	nop
   1f678:	00f10009 	.word	0x00f10009
   1f67c:	20000570 	.word	0x20000570
   1f680:	5002b400 	.word	0x5002b400
   1f684:	5002b404 	.word	0x5002b404

0001f688 <InitAes.part.0>:
   1f688:	4a32      	ldr	r2, [pc, #200]	; (1f754 <InitAes.part.0+0xcc>)
   1f68a:	b510      	push	{r4, lr}
   1f68c:	4604      	mov	r4, r0
   1f68e:	6813      	ldr	r3, [r2, #0]
   1f690:	2b00      	cmp	r3, #0
   1f692:	d1fc      	bne.n	1f68e <InitAes.part.0+0x6>
   1f694:	4a30      	ldr	r2, [pc, #192]	; (1f758 <InitAes.part.0+0xd0>)
   1f696:	6813      	ldr	r3, [r2, #0]
   1f698:	2b00      	cmp	r3, #0
   1f69a:	d1fc      	bne.n	1f696 <InitAes.part.0+0xe>
   1f69c:	4a2f      	ldr	r2, [pc, #188]	; (1f75c <InitAes.part.0+0xd4>)
   1f69e:	6813      	ldr	r3, [r2, #0]
   1f6a0:	2b00      	cmp	r3, #0
   1f6a2:	d1fc      	bne.n	1f69e <InitAes.part.0+0x16>
   1f6a4:	4a2e      	ldr	r2, [pc, #184]	; (1f760 <InitAes.part.0+0xd8>)
   1f6a6:	6813      	ldr	r3, [r2, #0]
   1f6a8:	2b00      	cmp	r3, #0
   1f6aa:	d1fc      	bne.n	1f6a6 <InitAes.part.0+0x1e>
   1f6ac:	4a2d      	ldr	r2, [pc, #180]	; (1f764 <InitAes.part.0+0xdc>)
   1f6ae:	6813      	ldr	r3, [r2, #0]
   1f6b0:	2b00      	cmp	r3, #0
   1f6b2:	d1fc      	bne.n	1f6ae <InitAes.part.0+0x26>
   1f6b4:	4a2c      	ldr	r2, [pc, #176]	; (1f768 <InitAes.part.0+0xe0>)
   1f6b6:	6813      	ldr	r3, [r2, #0]
   1f6b8:	2b00      	cmp	r3, #0
   1f6ba:	d1fc      	bne.n	1f6b6 <InitAes.part.0+0x2e>
   1f6bc:	f04f 30ff 	mov.w	r0, #4294967295
   1f6c0:	f7fe fb3e 	bl	1dd40 <CC_HalClearInterruptBit>
   1f6c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f6c6:	f023 0304 	bic.w	r3, r3, #4
   1f6ca:	2b03      	cmp	r3, #3
   1f6cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f6ce:	d036      	beq.n	1f73e <InitAes.part.0+0xb6>
   1f6d0:	2b01      	cmp	r3, #1
   1f6d2:	4b26      	ldr	r3, [pc, #152]	; (1f76c <InitAes.part.0+0xe4>)
   1f6d4:	6818      	ldr	r0, [r3, #0]
   1f6d6:	bf0c      	ite	eq
   1f6d8:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1f6dc:	f020 0020 	bicne.w	r0, r0, #32
   1f6e0:	f7fe fb3c 	bl	1dd5c <CC_HalMaskInterrupt>
   1f6e4:	4b22      	ldr	r3, [pc, #136]	; (1f770 <InitAes.part.0+0xe8>)
   1f6e6:	4a1b      	ldr	r2, [pc, #108]	; (1f754 <InitAes.part.0+0xcc>)
   1f6e8:	2101      	movs	r1, #1
   1f6ea:	6019      	str	r1, [r3, #0]
   1f6ec:	6813      	ldr	r3, [r2, #0]
   1f6ee:	2b00      	cmp	r3, #0
   1f6f0:	d1fc      	bne.n	1f6ec <InitAes.part.0+0x64>
   1f6f2:	4a19      	ldr	r2, [pc, #100]	; (1f758 <InitAes.part.0+0xd0>)
   1f6f4:	6813      	ldr	r3, [r2, #0]
   1f6f6:	2b00      	cmp	r3, #0
   1f6f8:	d1fc      	bne.n	1f6f4 <InitAes.part.0+0x6c>
   1f6fa:	491e      	ldr	r1, [pc, #120]	; (1f774 <InitAes.part.0+0xec>)
   1f6fc:	4a15      	ldr	r2, [pc, #84]	; (1f754 <InitAes.part.0+0xcc>)
   1f6fe:	600b      	str	r3, [r1, #0]
   1f700:	6813      	ldr	r3, [r2, #0]
   1f702:	2b00      	cmp	r3, #0
   1f704:	d1fc      	bne.n	1f700 <InitAes.part.0+0x78>
   1f706:	4a14      	ldr	r2, [pc, #80]	; (1f758 <InitAes.part.0+0xd0>)
   1f708:	6813      	ldr	r3, [r2, #0]
   1f70a:	2b00      	cmp	r3, #0
   1f70c:	d1fc      	bne.n	1f708 <InitAes.part.0+0x80>
   1f70e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1f710:	f022 0104 	bic.w	r1, r2, #4
   1f714:	2903      	cmp	r1, #3
   1f716:	bf18      	it	ne
   1f718:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   1f71a:	4917      	ldr	r1, [pc, #92]	; (1f778 <InitAes.part.0+0xf0>)
   1f71c:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1f720:	bf18      	it	ne
   1f722:	f003 0301 	andne.w	r3, r3, #1
   1f726:	f002 021c 	and.w	r2, r2, #28
   1f72a:	4313      	orrs	r3, r2
   1f72c:	600b      	str	r3, [r1, #0]
   1f72e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f730:	2b07      	cmp	r3, #7
   1f732:	d102      	bne.n	1f73a <InitAes.part.0+0xb2>
   1f734:	4b11      	ldr	r3, [pc, #68]	; (1f77c <InitAes.part.0+0xf4>)
   1f736:	2201      	movs	r2, #1
   1f738:	601a      	str	r2, [r3, #0]
   1f73a:	2000      	movs	r0, #0
   1f73c:	bd10      	pop	{r4, pc}
   1f73e:	2b01      	cmp	r3, #1
   1f740:	4b0a      	ldr	r3, [pc, #40]	; (1f76c <InitAes.part.0+0xe4>)
   1f742:	6818      	ldr	r0, [r3, #0]
   1f744:	bf0c      	ite	eq
   1f746:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1f74a:	f020 0010 	bicne.w	r0, r0, #16
   1f74e:	f7fe fb05 	bl	1dd5c <CC_HalMaskInterrupt>
   1f752:	e7c7      	b.n	1f6e4 <InitAes.part.0+0x5c>
   1f754:	5002b910 	.word	0x5002b910
   1f758:	5002b470 	.word	0x5002b470
   1f75c:	5002bd20 	.word	0x5002bd20
   1f760:	5002bc20 	.word	0x5002bc20
   1f764:	5002bd38 	.word	0x5002bd38
   1f768:	5002bc38 	.word	0x5002bc38
   1f76c:	5002ba04 	.word	0x5002ba04
   1f770:	5002b900 	.word	0x5002b900
   1f774:	5002b4bc 	.word	0x5002b4bc
   1f778:	5002b4c0 	.word	0x5002b4c0
   1f77c:	5002b47c 	.word	0x5002b47c

0001f780 <ProcessAesDrv>:
   1f780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f784:	b087      	sub	sp, #28
   1f786:	2900      	cmp	r1, #0
   1f788:	f000 80a5 	beq.w	1f8d6 <ProcessAesDrv+0x156>
   1f78c:	4616      	mov	r6, r2
   1f78e:	2a00      	cmp	r2, #0
   1f790:	f000 80a1 	beq.w	1f8d6 <ProcessAesDrv+0x156>
   1f794:	4604      	mov	r4, r0
   1f796:	2800      	cmp	r0, #0
   1f798:	f000 813f 	beq.w	1fa1a <ProcessAesDrv+0x29a>
   1f79c:	461f      	mov	r7, r3
   1f79e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1f7a0:	460d      	mov	r5, r1
   1f7a2:	2b00      	cmp	r3, #0
   1f7a4:	d150      	bne.n	1f848 <ProcessAesDrv+0xc8>
   1f7a6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   1f7aa:	d252      	bcs.n	1f852 <ProcessAesDrv+0xd2>
   1f7ac:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1f7b0:	2b04      	cmp	r3, #4
   1f7b2:	f000 8109 	beq.w	1f9c8 <ProcessAesDrv+0x248>
   1f7b6:	f04f 0800 	mov.w	r8, #0
   1f7ba:	48aa      	ldr	r0, [pc, #680]	; (1fa64 <ProcessAesDrv+0x2e4>)
   1f7bc:	f04f 31ff 	mov.w	r1, #4294967295
   1f7c0:	f7fe fb66 	bl	1de90 <CC_PalMutexLock>
   1f7c4:	2800      	cmp	r0, #0
   1f7c6:	f040 80de 	bne.w	1f986 <ProcessAesDrv+0x206>
   1f7ca:	2000      	movs	r0, #0
   1f7cc:	f7fe fb90 	bl	1def0 <CC_PalPowerSaveModeSelect>
   1f7d0:	2800      	cmp	r0, #0
   1f7d2:	f040 80e1 	bne.w	1f998 <ProcessAesDrv+0x218>
   1f7d6:	4ba4      	ldr	r3, [pc, #656]	; (1fa68 <ProcessAesDrv+0x2e8>)
   1f7d8:	4aa4      	ldr	r2, [pc, #656]	; (1fa6c <ProcessAesDrv+0x2ec>)
   1f7da:	2101      	movs	r1, #1
   1f7dc:	6019      	str	r1, [r3, #0]
   1f7de:	6813      	ldr	r3, [r2, #0]
   1f7e0:	2b00      	cmp	r3, #0
   1f7e2:	d1fc      	bne.n	1f7de <ProcessAesDrv+0x5e>
   1f7e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f7e6:	2b03      	cmp	r3, #3
   1f7e8:	dc39      	bgt.n	1f85e <ProcessAesDrv+0xde>
   1f7ea:	2b00      	cmp	r3, #0
   1f7ec:	da3a      	bge.n	1f864 <ProcessAesDrv+0xe4>
   1f7ee:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 1fab8 <ProcessAesDrv+0x338>
   1f7f2:	4a9e      	ldr	r2, [pc, #632]	; (1fa6c <ProcessAesDrv+0x2ec>)
   1f7f4:	6813      	ldr	r3, [r2, #0]
   1f7f6:	2b00      	cmp	r3, #0
   1f7f8:	d1fc      	bne.n	1f7f4 <ProcessAesDrv+0x74>
   1f7fa:	f1b8 0f00 	cmp.w	r8, #0
   1f7fe:	f040 80da 	bne.w	1f9b6 <ProcessAesDrv+0x236>
   1f802:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f804:	f023 0304 	bic.w	r3, r3, #4
   1f808:	2b03      	cmp	r3, #3
   1f80a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f80c:	d058      	beq.n	1f8c0 <ProcessAesDrv+0x140>
   1f80e:	2b01      	cmp	r3, #1
   1f810:	4b97      	ldr	r3, [pc, #604]	; (1fa70 <ProcessAesDrv+0x2f0>)
   1f812:	6818      	ldr	r0, [r3, #0]
   1f814:	bf0c      	ite	eq
   1f816:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   1f81a:	f040 0020 	orrne.w	r0, r0, #32
   1f81e:	f7fe fa9d 	bl	1dd5c <CC_HalMaskInterrupt>
   1f822:	4b91      	ldr	r3, [pc, #580]	; (1fa68 <ProcessAesDrv+0x2e8>)
   1f824:	2200      	movs	r2, #0
   1f826:	601a      	str	r2, [r3, #0]
   1f828:	2001      	movs	r0, #1
   1f82a:	f7fe fb61 	bl	1def0 <CC_PalPowerSaveModeSelect>
   1f82e:	2800      	cmp	r0, #0
   1f830:	f040 80bd 	bne.w	1f9ae <ProcessAesDrv+0x22e>
   1f834:	488b      	ldr	r0, [pc, #556]	; (1fa64 <ProcessAesDrv+0x2e4>)
   1f836:	f7fe fb33 	bl	1dea0 <CC_PalMutexUnlock>
   1f83a:	2800      	cmp	r0, #0
   1f83c:	f040 80b0 	bne.w	1f9a0 <ProcessAesDrv+0x220>
   1f840:	4648      	mov	r0, r9
   1f842:	b007      	add	sp, #28
   1f844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f848:	2b01      	cmp	r3, #1
   1f84a:	d1af      	bne.n	1f7ac <ProcessAesDrv+0x2c>
   1f84c:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   1f850:	d3ac      	bcc.n	1f7ac <ProcessAesDrv+0x2c>
   1f852:	f8df 9268 	ldr.w	r9, [pc, #616]	; 1fabc <ProcessAesDrv+0x33c>
   1f856:	4648      	mov	r0, r9
   1f858:	b007      	add	sp, #28
   1f85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f85e:	3b06      	subs	r3, #6
   1f860:	2b01      	cmp	r3, #1
   1f862:	d8c4      	bhi.n	1f7ee <ProcessAesDrv+0x6e>
   1f864:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f866:	2b01      	cmp	r3, #1
   1f868:	f200 80d4 	bhi.w	1fa14 <ProcessAesDrv+0x294>
   1f86c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f86e:	2b01      	cmp	r3, #1
   1f870:	d837      	bhi.n	1f8e2 <ProcessAesDrv+0x162>
   1f872:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1f874:	2b01      	cmp	r3, #1
   1f876:	f200 8131 	bhi.w	1fadc <ProcessAesDrv+0x35c>
   1f87a:	4620      	mov	r0, r4
   1f87c:	f7ff ff04 	bl	1f688 <InitAes.part.0>
   1f880:	4681      	mov	r9, r0
   1f882:	2800      	cmp	r0, #0
   1f884:	d1b5      	bne.n	1f7f2 <ProcessAesDrv+0x72>
   1f886:	4620      	mov	r0, r4
   1f888:	f7ff feb4 	bl	1f5f4 <LoadAesKey>
   1f88c:	4681      	mov	r9, r0
   1f88e:	2800      	cmp	r0, #0
   1f890:	d1af      	bne.n	1f7f2 <ProcessAesDrv+0x72>
   1f892:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f894:	2b07      	cmp	r3, #7
   1f896:	d8aa      	bhi.n	1f7ee <ProcessAesDrv+0x6e>
   1f898:	a201      	add	r2, pc, #4	; (adr r2, 1f8a0 <ProcessAesDrv+0x120>)
   1f89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f89e:	bf00      	nop
   1f8a0:	0001f8fd 	.word	0x0001f8fd
   1f8a4:	0001f8e9 	.word	0x0001f8e9
   1f8a8:	0001fa59 	.word	0x0001fa59
   1f8ac:	0001f8e9 	.word	0x0001f8e9
   1f8b0:	0001f7ef 	.word	0x0001f7ef
   1f8b4:	0001f7ef 	.word	0x0001f7ef
   1f8b8:	0001fa59 	.word	0x0001fa59
   1f8bc:	0001f8e9 	.word	0x0001f8e9
   1f8c0:	2b01      	cmp	r3, #1
   1f8c2:	4b6b      	ldr	r3, [pc, #428]	; (1fa70 <ProcessAesDrv+0x2f0>)
   1f8c4:	6818      	ldr	r0, [r3, #0]
   1f8c6:	bf0c      	ite	eq
   1f8c8:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1f8cc:	f040 0010 	orrne.w	r0, r0, #16
   1f8d0:	f7fe fa44 	bl	1dd5c <CC_HalMaskInterrupt>
   1f8d4:	e7a5      	b.n	1f822 <ProcessAesDrv+0xa2>
   1f8d6:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 1fac0 <ProcessAesDrv+0x340>
   1f8da:	4648      	mov	r0, r9
   1f8dc:	b007      	add	sp, #28
   1f8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8e2:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 1fac4 <ProcessAesDrv+0x344>
   1f8e6:	e784      	b.n	1f7f2 <ProcessAesDrv+0x72>
   1f8e8:	4b62      	ldr	r3, [pc, #392]	; (1fa74 <ProcessAesDrv+0x2f4>)
   1f8ea:	6822      	ldr	r2, [r4, #0]
   1f8ec:	601a      	str	r2, [r3, #0]
   1f8ee:	6862      	ldr	r2, [r4, #4]
   1f8f0:	605a      	str	r2, [r3, #4]
   1f8f2:	68a2      	ldr	r2, [r4, #8]
   1f8f4:	609a      	str	r2, [r3, #8]
   1f8f6:	68e2      	ldr	r2, [r4, #12]
   1f8f8:	60da      	str	r2, [r3, #12]
   1f8fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f8fc:	682a      	ldr	r2, [r5, #0]
   1f8fe:	f023 0304 	bic.w	r3, r3, #4
   1f902:	2b03      	cmp	r3, #3
   1f904:	d009      	beq.n	1f91a <ProcessAesDrv+0x19a>
   1f906:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1f908:	6833      	ldr	r3, [r6, #0]
   1f90a:	2901      	cmp	r1, #1
   1f90c:	bf07      	ittee	eq
   1f90e:	485a      	ldreq	r0, [pc, #360]	; (1fa78 <ProcessAesDrv+0x2f8>)
   1f910:	495a      	ldreq	r1, [pc, #360]	; (1fa7c <ProcessAesDrv+0x2fc>)
   1f912:	485b      	ldrne	r0, [pc, #364]	; (1fa80 <ProcessAesDrv+0x300>)
   1f914:	495b      	ldrne	r1, [pc, #364]	; (1fa84 <ProcessAesDrv+0x304>)
   1f916:	6003      	str	r3, [r0, #0]
   1f918:	600f      	str	r7, [r1, #0]
   1f91a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f91c:	2b01      	cmp	r3, #1
   1f91e:	bf0b      	itete	eq
   1f920:	4b59      	ldreq	r3, [pc, #356]	; (1fa88 <ProcessAesDrv+0x308>)
   1f922:	4b5a      	ldrne	r3, [pc, #360]	; (1fa8c <ProcessAesDrv+0x30c>)
   1f924:	495a      	ldreq	r1, [pc, #360]	; (1fa90 <ProcessAesDrv+0x310>)
   1f926:	495b      	ldrne	r1, [pc, #364]	; (1fa94 <ProcessAesDrv+0x314>)
   1f928:	600a      	str	r2, [r1, #0]
   1f92a:	601f      	str	r7, [r3, #0]
   1f92c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f92e:	f023 0304 	bic.w	r3, r3, #4
   1f932:	2b03      	cmp	r3, #3
   1f934:	d074      	beq.n	1fa20 <ProcessAesDrv+0x2a0>
   1f936:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1f938:	2b01      	cmp	r3, #1
   1f93a:	bf0c      	ite	eq
   1f93c:	2080      	moveq	r0, #128	; 0x80
   1f93e:	2020      	movne	r0, #32
   1f940:	f7fe fa12 	bl	1dd68 <CC_HalWaitInterrupt>
   1f944:	4681      	mov	r9, r0
   1f946:	2800      	cmp	r0, #0
   1f948:	f47f af53 	bne.w	1f7f2 <ProcessAesDrv+0x72>
   1f94c:	4b47      	ldr	r3, [pc, #284]	; (1fa6c <ProcessAesDrv+0x2ec>)
   1f94e:	681a      	ldr	r2, [r3, #0]
   1f950:	2a00      	cmp	r2, #0
   1f952:	d1fc      	bne.n	1f94e <ProcessAesDrv+0x1ce>
   1f954:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f956:	3b01      	subs	r3, #1
   1f958:	4691      	mov	r9, r2
   1f95a:	2b06      	cmp	r3, #6
   1f95c:	d810      	bhi.n	1f980 <ProcessAesDrv+0x200>
   1f95e:	e8df f003 	tbb	[pc, r3]
   1f962:	7d04      	.short	0x7d04
   1f964:	7d0f0f04 	.word	0x7d0f0f04
   1f968:	04          	.byte	0x04
   1f969:	00          	.byte	0x00
   1f96a:	4a42      	ldr	r2, [pc, #264]	; (1fa74 <ProcessAesDrv+0x2f4>)
   1f96c:	4b4a      	ldr	r3, [pc, #296]	; (1fa98 <ProcessAesDrv+0x318>)
   1f96e:	6812      	ldr	r2, [r2, #0]
   1f970:	6022      	str	r2, [r4, #0]
   1f972:	681a      	ldr	r2, [r3, #0]
   1f974:	6062      	str	r2, [r4, #4]
   1f976:	685a      	ldr	r2, [r3, #4]
   1f978:	60a2      	str	r2, [r4, #8]
   1f97a:	3308      	adds	r3, #8
   1f97c:	681b      	ldr	r3, [r3, #0]
   1f97e:	60e3      	str	r3, [r4, #12]
   1f980:	2301      	movs	r3, #1
   1f982:	65a3      	str	r3, [r4, #88]	; 0x58
   1f984:	e735      	b.n	1f7f2 <ProcessAesDrv+0x72>
   1f986:	4845      	ldr	r0, [pc, #276]	; (1fa9c <ProcessAesDrv+0x31c>)
   1f988:	f7fd feec 	bl	1d764 <CC_PalAbort>
   1f98c:	2000      	movs	r0, #0
   1f98e:	f7fe faaf 	bl	1def0 <CC_PalPowerSaveModeSelect>
   1f992:	2800      	cmp	r0, #0
   1f994:	f43f af1f 	beq.w	1f7d6 <ProcessAesDrv+0x56>
   1f998:	4841      	ldr	r0, [pc, #260]	; (1faa0 <ProcessAesDrv+0x320>)
   1f99a:	f7fd fee3 	bl	1d764 <CC_PalAbort>
   1f99e:	e71a      	b.n	1f7d6 <ProcessAesDrv+0x56>
   1f9a0:	4840      	ldr	r0, [pc, #256]	; (1faa4 <ProcessAesDrv+0x324>)
   1f9a2:	f7fd fedf 	bl	1d764 <CC_PalAbort>
   1f9a6:	4648      	mov	r0, r9
   1f9a8:	b007      	add	sp, #28
   1f9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f9ae:	483e      	ldr	r0, [pc, #248]	; (1faa8 <ProcessAesDrv+0x328>)
   1f9b0:	f7fd fed8 	bl	1d764 <CC_PalAbort>
   1f9b4:	e73e      	b.n	1f834 <ProcessAesDrv+0xb4>
   1f9b6:	2304      	movs	r3, #4
   1f9b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1f9bc:	2120      	movs	r1, #32
   1f9be:	f104 0010 	add.w	r0, r4, #16
   1f9c2:	f7ff fb47 	bl	1f054 <CC_PalMemSetZeroPlat>
   1f9c6:	e71c      	b.n	1f802 <ProcessAesDrv+0x82>
   1f9c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1f9ca:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1f9cc:	f000 f9c8 	bl	1fd60 <kmu_validate_slot_and_size>
   1f9d0:	b9e8      	cbnz	r0, 1fa0e <ProcessAesDrv+0x28e>
   1f9d2:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1fac8 <ProcessAesDrv+0x348>
   1f9d6:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 1facc <ProcessAesDrv+0x34c>
   1f9da:	f8d8 3000 	ldr.w	r3, [r8]
   1f9de:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1fad0 <ProcessAesDrv+0x350>
   1f9e2:	681b      	ldr	r3, [r3, #0]
   1f9e4:	f8cb 3000 	str.w	r3, [fp]
   1f9e8:	f8d8 3000 	ldr.w	r3, [r8]
   1f9ec:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 1fad4 <ProcessAesDrv+0x354>
   1f9f0:	685b      	ldr	r3, [r3, #4]
   1f9f2:	f8ca 3000 	str.w	r3, [sl]
   1f9f6:	f8d8 3000 	ldr.w	r3, [r8]
   1f9fa:	4a2c      	ldr	r2, [pc, #176]	; (1faac <ProcessAesDrv+0x32c>)
   1f9fc:	689b      	ldr	r3, [r3, #8]
   1f9fe:	f8c9 3000 	str.w	r3, [r9]
   1fa02:	f8d8 3000 	ldr.w	r3, [r8]
   1fa06:	68db      	ldr	r3, [r3, #12]
   1fa08:	6013      	str	r3, [r2, #0]
   1fa0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1fa0c:	b171      	cbz	r1, 1fa2c <ProcessAesDrv+0x2ac>
   1fa0e:	f04f 0801 	mov.w	r8, #1
   1fa12:	e6d2      	b.n	1f7ba <ProcessAesDrv+0x3a>
   1fa14:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1fad8 <ProcessAesDrv+0x358>
   1fa18:	e6eb      	b.n	1f7f2 <ProcessAesDrv+0x72>
   1fa1a:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   1fa1e:	e70f      	b.n	1f840 <ProcessAesDrv+0xc0>
   1fa20:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1fa22:	2b01      	cmp	r3, #1
   1fa24:	bf0c      	ite	eq
   1fa26:	2040      	moveq	r0, #64	; 0x40
   1fa28:	2010      	movne	r0, #16
   1fa2a:	e789      	b.n	1f940 <ProcessAesDrv+0x1c0>
   1fa2c:	f104 0310 	add.w	r3, r4, #16
   1fa30:	4618      	mov	r0, r3
   1fa32:	9305      	str	r3, [sp, #20]
   1fa34:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   1fa38:	e9cd 3200 	strd	r3, r2, [sp]
   1fa3c:	9002      	str	r0, [sp, #8]
   1fa3e:	2010      	movs	r0, #16
   1fa40:	9003      	str	r0, [sp, #12]
   1fa42:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   1fa46:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1fa48:	f000 f9ae 	bl	1fda8 <kmu_derive_cmac>
   1fa4c:	2800      	cmp	r0, #0
   1fa4e:	d148      	bne.n	1fae2 <ProcessAesDrv+0x362>
   1fa50:	2300      	movs	r3, #0
   1fa52:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1fa56:	e7da      	b.n	1fa0e <ProcessAesDrv+0x28e>
   1fa58:	4b15      	ldr	r3, [pc, #84]	; (1fab0 <ProcessAesDrv+0x330>)
   1fa5a:	e746      	b.n	1f8ea <ProcessAesDrv+0x16a>
   1fa5c:	4a14      	ldr	r2, [pc, #80]	; (1fab0 <ProcessAesDrv+0x330>)
   1fa5e:	4b15      	ldr	r3, [pc, #84]	; (1fab4 <ProcessAesDrv+0x334>)
   1fa60:	e785      	b.n	1f96e <ProcessAesDrv+0x1ee>
   1fa62:	bf00      	nop
   1fa64:	20000580 	.word	0x20000580
   1fa68:	5002b810 	.word	0x5002b810
   1fa6c:	5002b910 	.word	0x5002b910
   1fa70:	5002ba04 	.word	0x5002ba04
   1fa74:	5002b440 	.word	0x5002b440
   1fa78:	5002bd28 	.word	0x5002bd28
   1fa7c:	5002bd2c 	.word	0x5002bd2c
   1fa80:	5002bd30 	.word	0x5002bd30
   1fa84:	5002bd34 	.word	0x5002bd34
   1fa88:	5002bc2c 	.word	0x5002bc2c
   1fa8c:	5002bc34 	.word	0x5002bc34
   1fa90:	5002bc28 	.word	0x5002bc28
   1fa94:	5002bc30 	.word	0x5002bc30
   1fa98:	5002b444 	.word	0x5002b444
   1fa9c:	00023514 	.word	0x00023514
   1faa0:	0002352c 	.word	0x0002352c
   1faa4:	0002356c 	.word	0x0002356c
   1faa8:	0002354c 	.word	0x0002354c
   1faac:	5002b40c 	.word	0x5002b40c
   1fab0:	5002b460 	.word	0x5002b460
   1fab4:	5002b464 	.word	0x5002b464
   1fab8:	00f10001 	.word	0x00f10001
   1fabc:	00f10005 	.word	0x00f10005
   1fac0:	00f1000b 	.word	0x00f1000b
   1fac4:	00f10003 	.word	0x00f10003
   1fac8:	20000570 	.word	0x20000570
   1facc:	5002b400 	.word	0x5002b400
   1fad0:	5002b404 	.word	0x5002b404
   1fad4:	5002b408 	.word	0x5002b408
   1fad8:	00f10002 	.word	0x00f10002
   1fadc:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1fb18 <ProcessAesDrv+0x398>
   1fae0:	e687      	b.n	1f7f2 <ProcessAesDrv+0x72>
   1fae2:	f8d8 3000 	ldr.w	r3, [r8]
   1fae6:	4a0b      	ldr	r2, [pc, #44]	; (1fb14 <ProcessAesDrv+0x394>)
   1fae8:	681b      	ldr	r3, [r3, #0]
   1faea:	f8cb 3000 	str.w	r3, [fp]
   1faee:	f8d8 3000 	ldr.w	r3, [r8]
   1faf2:	685b      	ldr	r3, [r3, #4]
   1faf4:	f8ca 3000 	str.w	r3, [sl]
   1faf8:	f8d8 3000 	ldr.w	r3, [r8]
   1fafc:	689b      	ldr	r3, [r3, #8]
   1fafe:	f8c9 3000 	str.w	r3, [r9]
   1fb02:	f8d8 3000 	ldr.w	r3, [r8]
   1fb06:	68db      	ldr	r3, [r3, #12]
   1fb08:	6013      	str	r3, [r2, #0]
   1fb0a:	9805      	ldr	r0, [sp, #20]
   1fb0c:	2110      	movs	r1, #16
   1fb0e:	f7ff faa1 	bl	1f054 <CC_PalMemSetZeroPlat>
   1fb12:	e79d      	b.n	1fa50 <ProcessAesDrv+0x2d0>
   1fb14:	5002b40c 	.word	0x5002b40c
   1fb18:	00f10004 	.word	0x00f10004

0001fb1c <FinishAesDrv>:
   1fb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb20:	b301      	cbz	r1, 1fb64 <FinishAesDrv+0x48>
   1fb22:	b1fa      	cbz	r2, 1fb64 <FinishAesDrv+0x48>
   1fb24:	4604      	mov	r4, r0
   1fb26:	2800      	cmp	r0, #0
   1fb28:	d07a      	beq.n	1fc20 <FinishAesDrv+0x104>
   1fb2a:	461d      	mov	r5, r3
   1fb2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1fb2e:	2b07      	cmp	r3, #7
   1fb30:	460e      	mov	r6, r1
   1fb32:	d01b      	beq.n	1fb6c <FinishAesDrv+0x50>
   1fb34:	b95d      	cbnz	r5, 1fb4e <FinishAesDrv+0x32>
   1fb36:	2b03      	cmp	r3, #3
   1fb38:	d110      	bne.n	1fb5c <FinishAesDrv+0x40>
   1fb3a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1fb3c:	b973      	cbnz	r3, 1fb5c <FinishAesDrv+0x40>
   1fb3e:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1fb42:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   1fb46:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   1fb4a:	600b      	str	r3, [r1, #0]
   1fb4c:	2510      	movs	r5, #16
   1fb4e:	462b      	mov	r3, r5
   1fb50:	4631      	mov	r1, r6
   1fb52:	4620      	mov	r0, r4
   1fb54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1fb58:	f7ff be12 	b.w	1f780 <ProcessAesDrv>
   1fb5c:	462f      	mov	r7, r5
   1fb5e:	4638      	mov	r0, r7
   1fb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fb64:	4f66      	ldr	r7, [pc, #408]	; (1fd00 <FinishAesDrv+0x1e4>)
   1fb66:	4638      	mov	r0, r7
   1fb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fb6c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1fb6e:	2b00      	cmp	r3, #0
   1fb70:	d159      	bne.n	1fc26 <FinishAesDrv+0x10a>
   1fb72:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1fb76:	d25b      	bcs.n	1fc30 <FinishAesDrv+0x114>
   1fb78:	b915      	cbnz	r5, 1fb80 <FinishAesDrv+0x64>
   1fb7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1fb7c:	2b00      	cmp	r3, #0
   1fb7e:	d157      	bne.n	1fc30 <FinishAesDrv+0x114>
   1fb80:	4860      	ldr	r0, [pc, #384]	; (1fd04 <FinishAesDrv+0x1e8>)
   1fb82:	f04f 31ff 	mov.w	r1, #4294967295
   1fb86:	f7fe f983 	bl	1de90 <CC_PalMutexLock>
   1fb8a:	2800      	cmp	r0, #0
   1fb8c:	f040 8097 	bne.w	1fcbe <FinishAesDrv+0x1a2>
   1fb90:	2000      	movs	r0, #0
   1fb92:	f7fe f9ad 	bl	1def0 <CC_PalPowerSaveModeSelect>
   1fb96:	2800      	cmp	r0, #0
   1fb98:	f040 808d 	bne.w	1fcb6 <FinishAesDrv+0x19a>
   1fb9c:	4b5a      	ldr	r3, [pc, #360]	; (1fd08 <FinishAesDrv+0x1ec>)
   1fb9e:	4a5b      	ldr	r2, [pc, #364]	; (1fd0c <FinishAesDrv+0x1f0>)
   1fba0:	2101      	movs	r1, #1
   1fba2:	6019      	str	r1, [r3, #0]
   1fba4:	6813      	ldr	r3, [r2, #0]
   1fba6:	2b00      	cmp	r3, #0
   1fba8:	d1fc      	bne.n	1fba4 <FinishAesDrv+0x88>
   1fbaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1fbac:	2b03      	cmp	r3, #3
   1fbae:	dd20      	ble.n	1fbf2 <FinishAesDrv+0xd6>
   1fbb0:	3b06      	subs	r3, #6
   1fbb2:	2b01      	cmp	r3, #1
   1fbb4:	d81f      	bhi.n	1fbf6 <FinishAesDrv+0xda>
   1fbb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1fbb8:	2b01      	cmp	r3, #1
   1fbba:	d83b      	bhi.n	1fc34 <FinishAesDrv+0x118>
   1fbbc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1fbbe:	2b01      	cmp	r3, #1
   1fbc0:	f200 8085 	bhi.w	1fcce <FinishAesDrv+0x1b2>
   1fbc4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1fbc6:	2b01      	cmp	r3, #1
   1fbc8:	f200 8083 	bhi.w	1fcd2 <FinishAesDrv+0x1b6>
   1fbcc:	4620      	mov	r0, r4
   1fbce:	f7ff fd5b 	bl	1f688 <InitAes.part.0>
   1fbd2:	4607      	mov	r7, r0
   1fbd4:	b980      	cbnz	r0, 1fbf8 <FinishAesDrv+0xdc>
   1fbd6:	4620      	mov	r0, r4
   1fbd8:	f7ff fd0c 	bl	1f5f4 <LoadAesKey>
   1fbdc:	4607      	mov	r7, r0
   1fbde:	b958      	cbnz	r0, 1fbf8 <FinishAesDrv+0xdc>
   1fbe0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1fbe2:	2b07      	cmp	r3, #7
   1fbe4:	d807      	bhi.n	1fbf6 <FinishAesDrv+0xda>
   1fbe6:	e8df f003 	tbb	[pc, r3]
   1fbea:	2730      	.short	0x2730
   1fbec:	06062755 	.word	0x06062755
   1fbf0:	2755      	.short	0x2755
   1fbf2:	2b00      	cmp	r3, #0
   1fbf4:	dadf      	bge.n	1fbb6 <FinishAesDrv+0x9a>
   1fbf6:	4f46      	ldr	r7, [pc, #280]	; (1fd10 <FinishAesDrv+0x1f4>)
   1fbf8:	4a44      	ldr	r2, [pc, #272]	; (1fd0c <FinishAesDrv+0x1f0>)
   1fbfa:	6813      	ldr	r3, [r2, #0]
   1fbfc:	2b00      	cmp	r3, #0
   1fbfe:	d1fc      	bne.n	1fbfa <FinishAesDrv+0xde>
   1fc00:	4a41      	ldr	r2, [pc, #260]	; (1fd08 <FinishAesDrv+0x1ec>)
   1fc02:	2001      	movs	r0, #1
   1fc04:	6013      	str	r3, [r2, #0]
   1fc06:	f7fe f973 	bl	1def0 <CC_PalPowerSaveModeSelect>
   1fc0a:	2800      	cmp	r0, #0
   1fc0c:	d15b      	bne.n	1fcc6 <FinishAesDrv+0x1aa>
   1fc0e:	483d      	ldr	r0, [pc, #244]	; (1fd04 <FinishAesDrv+0x1e8>)
   1fc10:	f7fe f946 	bl	1dea0 <CC_PalMutexUnlock>
   1fc14:	2800      	cmp	r0, #0
   1fc16:	d0a2      	beq.n	1fb5e <FinishAesDrv+0x42>
   1fc18:	483e      	ldr	r0, [pc, #248]	; (1fd14 <FinishAesDrv+0x1f8>)
   1fc1a:	f7fd fda3 	bl	1d764 <CC_PalAbort>
   1fc1e:	e79e      	b.n	1fb5e <FinishAesDrv+0x42>
   1fc20:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1fc24:	e79b      	b.n	1fb5e <FinishAesDrv+0x42>
   1fc26:	2b01      	cmp	r3, #1
   1fc28:	d1a6      	bne.n	1fb78 <FinishAesDrv+0x5c>
   1fc2a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1fc2e:	d3a3      	bcc.n	1fb78 <FinishAesDrv+0x5c>
   1fc30:	4f39      	ldr	r7, [pc, #228]	; (1fd18 <FinishAesDrv+0x1fc>)
   1fc32:	e794      	b.n	1fb5e <FinishAesDrv+0x42>
   1fc34:	4f39      	ldr	r7, [pc, #228]	; (1fd1c <FinishAesDrv+0x200>)
   1fc36:	e7df      	b.n	1fbf8 <FinishAesDrv+0xdc>
   1fc38:	4b39      	ldr	r3, [pc, #228]	; (1fd20 <FinishAesDrv+0x204>)
   1fc3a:	6822      	ldr	r2, [r4, #0]
   1fc3c:	601a      	str	r2, [r3, #0]
   1fc3e:	6862      	ldr	r2, [r4, #4]
   1fc40:	605a      	str	r2, [r3, #4]
   1fc42:	68a2      	ldr	r2, [r4, #8]
   1fc44:	609a      	str	r2, [r3, #8]
   1fc46:	68e2      	ldr	r2, [r4, #12]
   1fc48:	60da      	str	r2, [r3, #12]
   1fc4a:	4936      	ldr	r1, [pc, #216]	; (1fd24 <FinishAesDrv+0x208>)
   1fc4c:	4a36      	ldr	r2, [pc, #216]	; (1fd28 <FinishAesDrv+0x20c>)
   1fc4e:	2301      	movs	r3, #1
   1fc50:	600b      	str	r3, [r1, #0]
   1fc52:	6015      	str	r5, [r2, #0]
   1fc54:	2d00      	cmp	r5, #0
   1fc56:	d13e      	bne.n	1fcd6 <FinishAesDrv+0x1ba>
   1fc58:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1fc5a:	b90a      	cbnz	r2, 1fc60 <FinishAesDrv+0x144>
   1fc5c:	4a33      	ldr	r2, [pc, #204]	; (1fd2c <FinishAesDrv+0x210>)
   1fc5e:	6013      	str	r3, [r2, #0]
   1fc60:	4b2a      	ldr	r3, [pc, #168]	; (1fd0c <FinishAesDrv+0x1f0>)
   1fc62:	681f      	ldr	r7, [r3, #0]
   1fc64:	2f00      	cmp	r7, #0
   1fc66:	d1fc      	bne.n	1fc62 <FinishAesDrv+0x146>
   1fc68:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1fc6a:	3b01      	subs	r3, #1
   1fc6c:	2b06      	cmp	r3, #6
   1fc6e:	d8c3      	bhi.n	1fbf8 <FinishAesDrv+0xdc>
   1fc70:	a201      	add	r2, pc, #4	; (adr r2, 1fc78 <FinishAesDrv+0x15c>)
   1fc72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1fc76:	bf00      	nop
   1fc78:	0001fc99 	.word	0x0001fc99
   1fc7c:	0001fcb1 	.word	0x0001fcb1
   1fc80:	0001fc99 	.word	0x0001fc99
   1fc84:	0001fbf9 	.word	0x0001fbf9
   1fc88:	0001fbf9 	.word	0x0001fbf9
   1fc8c:	0001fcb1 	.word	0x0001fcb1
   1fc90:	0001fc99 	.word	0x0001fc99
   1fc94:	4b26      	ldr	r3, [pc, #152]	; (1fd30 <FinishAesDrv+0x214>)
   1fc96:	e7d0      	b.n	1fc3a <FinishAesDrv+0x11e>
   1fc98:	4a21      	ldr	r2, [pc, #132]	; (1fd20 <FinishAesDrv+0x204>)
   1fc9a:	4b26      	ldr	r3, [pc, #152]	; (1fd34 <FinishAesDrv+0x218>)
   1fc9c:	6812      	ldr	r2, [r2, #0]
   1fc9e:	6022      	str	r2, [r4, #0]
   1fca0:	681a      	ldr	r2, [r3, #0]
   1fca2:	6062      	str	r2, [r4, #4]
   1fca4:	685a      	ldr	r2, [r3, #4]
   1fca6:	60a2      	str	r2, [r4, #8]
   1fca8:	3308      	adds	r3, #8
   1fcaa:	681b      	ldr	r3, [r3, #0]
   1fcac:	60e3      	str	r3, [r4, #12]
   1fcae:	e7a3      	b.n	1fbf8 <FinishAesDrv+0xdc>
   1fcb0:	4a1f      	ldr	r2, [pc, #124]	; (1fd30 <FinishAesDrv+0x214>)
   1fcb2:	4b21      	ldr	r3, [pc, #132]	; (1fd38 <FinishAesDrv+0x21c>)
   1fcb4:	e7f2      	b.n	1fc9c <FinishAesDrv+0x180>
   1fcb6:	4821      	ldr	r0, [pc, #132]	; (1fd3c <FinishAesDrv+0x220>)
   1fcb8:	f7fd fd54 	bl	1d764 <CC_PalAbort>
   1fcbc:	e76e      	b.n	1fb9c <FinishAesDrv+0x80>
   1fcbe:	4820      	ldr	r0, [pc, #128]	; (1fd40 <FinishAesDrv+0x224>)
   1fcc0:	f7fd fd50 	bl	1d764 <CC_PalAbort>
   1fcc4:	e764      	b.n	1fb90 <FinishAesDrv+0x74>
   1fcc6:	481f      	ldr	r0, [pc, #124]	; (1fd44 <FinishAesDrv+0x228>)
   1fcc8:	f7fd fd4c 	bl	1d764 <CC_PalAbort>
   1fccc:	e79f      	b.n	1fc0e <FinishAesDrv+0xf2>
   1fcce:	4f1e      	ldr	r7, [pc, #120]	; (1fd48 <FinishAesDrv+0x22c>)
   1fcd0:	e792      	b.n	1fbf8 <FinishAesDrv+0xdc>
   1fcd2:	4f1e      	ldr	r7, [pc, #120]	; (1fd4c <FinishAesDrv+0x230>)
   1fcd4:	e790      	b.n	1fbf8 <FinishAesDrv+0xdc>
   1fcd6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1fcd8:	6833      	ldr	r3, [r6, #0]
   1fcda:	2a01      	cmp	r2, #1
   1fcdc:	d00a      	beq.n	1fcf4 <FinishAesDrv+0x1d8>
   1fcde:	491c      	ldr	r1, [pc, #112]	; (1fd50 <FinishAesDrv+0x234>)
   1fce0:	4a1c      	ldr	r2, [pc, #112]	; (1fd54 <FinishAesDrv+0x238>)
   1fce2:	600b      	str	r3, [r1, #0]
   1fce4:	2010      	movs	r0, #16
   1fce6:	6015      	str	r5, [r2, #0]
   1fce8:	f7fe f83e 	bl	1dd68 <CC_HalWaitInterrupt>
   1fcec:	4607      	mov	r7, r0
   1fcee:	2800      	cmp	r0, #0
   1fcf0:	d0b6      	beq.n	1fc60 <FinishAesDrv+0x144>
   1fcf2:	e781      	b.n	1fbf8 <FinishAesDrv+0xdc>
   1fcf4:	4918      	ldr	r1, [pc, #96]	; (1fd58 <FinishAesDrv+0x23c>)
   1fcf6:	4a19      	ldr	r2, [pc, #100]	; (1fd5c <FinishAesDrv+0x240>)
   1fcf8:	600b      	str	r3, [r1, #0]
   1fcfa:	2040      	movs	r0, #64	; 0x40
   1fcfc:	6015      	str	r5, [r2, #0]
   1fcfe:	e7f3      	b.n	1fce8 <FinishAesDrv+0x1cc>
   1fd00:	00f1000b 	.word	0x00f1000b
   1fd04:	20000580 	.word	0x20000580
   1fd08:	5002b810 	.word	0x5002b810
   1fd0c:	5002b910 	.word	0x5002b910
   1fd10:	00f10001 	.word	0x00f10001
   1fd14:	0002356c 	.word	0x0002356c
   1fd18:	00f10005 	.word	0x00f10005
   1fd1c:	00f10002 	.word	0x00f10002
   1fd20:	5002b440 	.word	0x5002b440
   1fd24:	5002b47c 	.word	0x5002b47c
   1fd28:	5002b4bc 	.word	0x5002b4bc
   1fd2c:	5002b524 	.word	0x5002b524
   1fd30:	5002b460 	.word	0x5002b460
   1fd34:	5002b444 	.word	0x5002b444
   1fd38:	5002b464 	.word	0x5002b464
   1fd3c:	0002352c 	.word	0x0002352c
   1fd40:	00023514 	.word	0x00023514
   1fd44:	0002354c 	.word	0x0002354c
   1fd48:	00f10003 	.word	0x00f10003
   1fd4c:	00f10004 	.word	0x00f10004
   1fd50:	5002bc30 	.word	0x5002bc30
   1fd54:	5002bc34 	.word	0x5002bc34
   1fd58:	5002bc28 	.word	0x5002bc28
   1fd5c:	5002bc2c 	.word	0x5002bc2c

0001fd60 <kmu_validate_slot_and_size>:
   1fd60:	b921      	cbnz	r1, 1fd6c <kmu_validate_slot_and_size+0xc>
   1fd62:	4b03      	ldr	r3, [pc, #12]	; (1fd70 <kmu_validate_slot_and_size+0x10>)
   1fd64:	2800      	cmp	r0, #0
   1fd66:	bf18      	it	ne
   1fd68:	4618      	movne	r0, r3
   1fd6a:	4770      	bx	lr
   1fd6c:	4801      	ldr	r0, [pc, #4]	; (1fd74 <kmu_validate_slot_and_size+0x14>)
   1fd6e:	4770      	bx	lr
   1fd70:	00f70001 	.word	0x00f70001
   1fd74:	00f70003 	.word	0x00f70003

0001fd78 <kmu_validate_kdr_slot_and_size>:
   1fd78:	b921      	cbnz	r1, 1fd84 <kmu_validate_kdr_slot_and_size+0xc>
   1fd7a:	4b03      	ldr	r3, [pc, #12]	; (1fd88 <kmu_validate_kdr_slot_and_size+0x10>)
   1fd7c:	2800      	cmp	r0, #0
   1fd7e:	bf18      	it	ne
   1fd80:	4618      	movne	r0, r3
   1fd82:	4770      	bx	lr
   1fd84:	4801      	ldr	r0, [pc, #4]	; (1fd8c <kmu_validate_kdr_slot_and_size+0x14>)
   1fd86:	4770      	bx	lr
   1fd88:	00f70001 	.word	0x00f70001
   1fd8c:	00f70003 	.word	0x00f70003

0001fd90 <kmu_use_kdr_key>:
   1fd90:	4903      	ldr	r1, [pc, #12]	; (1fda0 <kmu_use_kdr_key+0x10>)
   1fd92:	4b04      	ldr	r3, [pc, #16]	; (1fda4 <kmu_use_kdr_key+0x14>)
   1fd94:	2000      	movs	r0, #0
   1fd96:	2201      	movs	r2, #1
   1fd98:	6008      	str	r0, [r1, #0]
   1fd9a:	601a      	str	r2, [r3, #0]
   1fd9c:	4770      	bx	lr
   1fd9e:	bf00      	nop
   1fda0:	5002ba38 	.word	0x5002ba38
   1fda4:	5002b478 	.word	0x5002b478

0001fda8 <kmu_derive_cmac>:
   1fda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fdac:	b0cd      	sub	sp, #308	; 0x134
   1fdae:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   1fdb2:	460f      	mov	r7, r1
   1fdb4:	2100      	movs	r1, #0
   1fdb6:	460c      	mov	r4, r1
   1fdb8:	4681      	mov	r9, r0
   1fdba:	4616      	mov	r6, r2
   1fdbc:	a80e      	add	r0, sp, #56	; 0x38
   1fdbe:	2274      	movs	r2, #116	; 0x74
   1fdc0:	469b      	mov	fp, r3
   1fdc2:	f002 ff72 	bl	22caa <memset>
   1fdc6:	4621      	mov	r1, r4
   1fdc8:	2280      	movs	r2, #128	; 0x80
   1fdca:	a82c      	add	r0, sp, #176	; 0xb0
   1fdcc:	942b      	str	r4, [sp, #172]	; 0xac
   1fdce:	f002 ff6c 	bl	22caa <memset>
   1fdd2:	2384      	movs	r3, #132	; 0x84
   1fdd4:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1fdd8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1fddc:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1fde0:	9305      	str	r3, [sp, #20]
   1fde2:	d860      	bhi.n	1fea6 <kmu_derive_cmac+0xfe>
   1fde4:	ab05      	add	r3, sp, #20
   1fde6:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   1fdea:	9301      	str	r3, [sp, #4]
   1fdec:	9502      	str	r5, [sp, #8]
   1fdee:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   1fdf2:	4659      	mov	r1, fp
   1fdf4:	4630      	mov	r0, r6
   1fdf6:	f8cd a000 	str.w	sl, [sp]
   1fdfa:	f000 f865 	bl	1fec8 <UtilCmacBuildDataForDerivation>
   1fdfe:	2800      	cmp	r0, #0
   1fe00:	d14c      	bne.n	1fe9c <kmu_derive_cmac+0xf4>
   1fe02:	2303      	movs	r3, #3
   1fe04:	f88d 3013 	strb.w	r3, [sp, #19]
   1fe08:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1fe0c:	901c      	str	r0, [sp, #112]	; 0x70
   1fe0e:	2200      	movs	r2, #0
   1fe10:	2110      	movs	r1, #16
   1fe12:	a80e      	add	r0, sp, #56	; 0x38
   1fe14:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1fe18:	2607      	movs	r6, #7
   1fe1a:	2301      	movs	r3, #1
   1fe1c:	2401      	movs	r4, #1
   1fe1e:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1fe22:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   1fe26:	971a      	str	r7, [sp, #104]	; 0x68
   1fe28:	961b      	str	r6, [sp, #108]	; 0x6c
   1fe2a:	9426      	str	r4, [sp, #152]	; 0x98
   1fe2c:	f10d 0920 	add.w	r9, sp, #32
   1fe30:	f7ff f910 	bl	1f054 <CC_PalMemSetZeroPlat>
   1fe34:	2110      	movs	r1, #16
   1fe36:	e9cd 1900 	strd	r1, r9, [sp]
   1fe3a:	ab0a      	add	r3, sp, #40	; 0x28
   1fe3c:	9905      	ldr	r1, [sp, #20]
   1fe3e:	4650      	mov	r0, sl
   1fe40:	aa06      	add	r2, sp, #24
   1fe42:	f7ff f9ab 	bl	1f19c <SetDataBuffersInfo>
   1fe46:	4607      	mov	r7, r0
   1fe48:	b150      	cbz	r0, 1fe60 <kmu_derive_cmac+0xb8>
   1fe4a:	e01e      	b.n	1fe8a <kmu_derive_cmac+0xe2>
   1fe4c:	f7ff f8fe 	bl	1f04c <CC_PalMemCopyPlat>
   1fe50:	2110      	movs	r1, #16
   1fe52:	a80e      	add	r0, sp, #56	; 0x38
   1fe54:	f7ff f8fe 	bl	1f054 <CC_PalMemSetZeroPlat>
   1fe58:	3401      	adds	r4, #1
   1fe5a:	1bad      	subs	r5, r5, r6
   1fe5c:	b2e4      	uxtb	r4, r4
   1fe5e:	d027      	beq.n	1feb0 <kmu_derive_cmac+0x108>
   1fe60:	9b05      	ldr	r3, [sp, #20]
   1fe62:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1fe66:	2d10      	cmp	r5, #16
   1fe68:	464a      	mov	r2, r9
   1fe6a:	a906      	add	r1, sp, #24
   1fe6c:	a80e      	add	r0, sp, #56	; 0x38
   1fe6e:	462e      	mov	r6, r5
   1fe70:	bf28      	it	cs
   1fe72:	2610      	movcs	r6, #16
   1fe74:	f7ff fe52 	bl	1fb1c <FinishAesDrv>
   1fe78:	4603      	mov	r3, r0
   1fe7a:	4632      	mov	r2, r6
   1fe7c:	eb08 0007 	add.w	r0, r8, r7
   1fe80:	a90e      	add	r1, sp, #56	; 0x38
   1fe82:	4437      	add	r7, r6
   1fe84:	2b00      	cmp	r3, #0
   1fe86:	d0e1      	beq.n	1fe4c <kmu_derive_cmac+0xa4>
   1fe88:	461f      	mov	r7, r3
   1fe8a:	a80e      	add	r0, sp, #56	; 0x38
   1fe8c:	2274      	movs	r2, #116	; 0x74
   1fe8e:	2100      	movs	r1, #0
   1fe90:	f7ff f8de 	bl	1f050 <CC_PalMemSetPlat>
   1fe94:	4638      	mov	r0, r7
   1fe96:	b04d      	add	sp, #308	; 0x134
   1fe98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe9c:	4f08      	ldr	r7, [pc, #32]	; (1fec0 <kmu_derive_cmac+0x118>)
   1fe9e:	4638      	mov	r0, r7
   1fea0:	b04d      	add	sp, #308	; 0x134
   1fea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fea6:	4f07      	ldr	r7, [pc, #28]	; (1fec4 <kmu_derive_cmac+0x11c>)
   1fea8:	4638      	mov	r0, r7
   1feaa:	b04d      	add	sp, #308	; 0x134
   1feac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1feb0:	a80e      	add	r0, sp, #56	; 0x38
   1feb2:	2274      	movs	r2, #116	; 0x74
   1feb4:	2100      	movs	r1, #0
   1feb6:	462f      	mov	r7, r5
   1feb8:	f7ff f8ca 	bl	1f050 <CC_PalMemSetPlat>
   1febc:	e7ea      	b.n	1fe94 <kmu_derive_cmac+0xec>
   1febe:	bf00      	nop
   1fec0:	00f1000e 	.word	0x00f1000e
   1fec4:	00f1000f 	.word	0x00f1000f

0001fec8 <UtilCmacBuildDataForDerivation>:
   1fec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fecc:	b082      	sub	sp, #8
   1fece:	2600      	movs	r6, #0
   1fed0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1fed2:	9601      	str	r6, [sp, #4]
   1fed4:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1fed8:	d83c      	bhi.n	1ff54 <UtilCmacBuildDataForDerivation+0x8c>
   1feda:	00ee      	lsls	r6, r5, #3
   1fedc:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   1fee0:	f101 35ff 	add.w	r5, r1, #4294967295
   1fee4:	461f      	mov	r7, r3
   1fee6:	bf34      	ite	cc
   1fee8:	2303      	movcc	r3, #3
   1feea:	2304      	movcs	r3, #4
   1feec:	2d3f      	cmp	r5, #63	; 0x3f
   1feee:	460c      	mov	r4, r1
   1fef0:	9300      	str	r3, [sp, #0]
   1fef2:	d82f      	bhi.n	1ff54 <UtilCmacBuildDataForDerivation+0x8c>
   1fef4:	b370      	cbz	r0, 1ff54 <UtilCmacBuildDataForDerivation+0x8c>
   1fef6:	4690      	mov	r8, r2
   1fef8:	b117      	cbz	r7, 1ff00 <UtilCmacBuildDataForDerivation+0x38>
   1fefa:	b35a      	cbz	r2, 1ff54 <UtilCmacBuildDataForDerivation+0x8c>
   1fefc:	2f40      	cmp	r7, #64	; 0x40
   1fefe:	d829      	bhi.n	1ff54 <UtilCmacBuildDataForDerivation+0x8c>
   1ff00:	9a08      	ldr	r2, [sp, #32]
   1ff02:	b33a      	cbz	r2, 1ff54 <UtilCmacBuildDataForDerivation+0x8c>
   1ff04:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ff06:	6811      	ldr	r1, [r2, #0]
   1ff08:	b321      	cbz	r1, 1ff54 <UtilCmacBuildDataForDerivation+0x8c>
   1ff0a:	19e2      	adds	r2, r4, r7
   1ff0c:	4413      	add	r3, r2
   1ff0e:	4299      	cmp	r1, r3
   1ff10:	d320      	bcc.n	1ff54 <UtilCmacBuildDataForDerivation+0x8c>
   1ff12:	9b08      	ldr	r3, [sp, #32]
   1ff14:	4622      	mov	r2, r4
   1ff16:	4601      	mov	r1, r0
   1ff18:	1c58      	adds	r0, r3, #1
   1ff1a:	f7ff f897 	bl	1f04c <CC_PalMemCopyPlat>
   1ff1e:	9b08      	ldr	r3, [sp, #32]
   1ff20:	4423      	add	r3, r4
   1ff22:	2200      	movs	r2, #0
   1ff24:	3402      	adds	r4, #2
   1ff26:	705a      	strb	r2, [r3, #1]
   1ff28:	bb07      	cbnz	r7, 1ff6c <UtilCmacBuildDataForDerivation+0xa4>
   1ff2a:	2eff      	cmp	r6, #255	; 0xff
   1ff2c:	9600      	str	r6, [sp, #0]
   1ff2e:	d915      	bls.n	1ff5c <UtilCmacBuildDataForDerivation+0x94>
   1ff30:	9b08      	ldr	r3, [sp, #32]
   1ff32:	0235      	lsls	r5, r6, #8
   1ff34:	b2ad      	uxth	r5, r5
   1ff36:	1918      	adds	r0, r3, r4
   1ff38:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   1ff3c:	2202      	movs	r2, #2
   1ff3e:	a901      	add	r1, sp, #4
   1ff40:	9501      	str	r5, [sp, #4]
   1ff42:	f7ff f883 	bl	1f04c <CC_PalMemCopyPlat>
   1ff46:	3402      	adds	r4, #2
   1ff48:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ff4a:	2000      	movs	r0, #0
   1ff4c:	601c      	str	r4, [r3, #0]
   1ff4e:	b002      	add	sp, #8
   1ff50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ff54:	4809      	ldr	r0, [pc, #36]	; (1ff7c <UtilCmacBuildDataForDerivation+0xb4>)
   1ff56:	b002      	add	sp, #8
   1ff58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ff5c:	9b08      	ldr	r3, [sp, #32]
   1ff5e:	2201      	movs	r2, #1
   1ff60:	1918      	adds	r0, r3, r4
   1ff62:	4669      	mov	r1, sp
   1ff64:	f7ff f872 	bl	1f04c <CC_PalMemCopyPlat>
   1ff68:	3401      	adds	r4, #1
   1ff6a:	e7ed      	b.n	1ff48 <UtilCmacBuildDataForDerivation+0x80>
   1ff6c:	9b08      	ldr	r3, [sp, #32]
   1ff6e:	4641      	mov	r1, r8
   1ff70:	1918      	adds	r0, r3, r4
   1ff72:	463a      	mov	r2, r7
   1ff74:	f7ff f86a 	bl	1f04c <CC_PalMemCopyPlat>
   1ff78:	443c      	add	r4, r7
   1ff7a:	e7d6      	b.n	1ff2a <UtilCmacBuildDataForDerivation+0x62>
   1ff7c:	80000006 	.word	0x80000006

0001ff80 <sys_notify_validate>:
	if (notify == NULL) {
   1ff80:	4603      	mov	r3, r0
   1ff82:	b140      	cbz	r0, 1ff96 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1ff84:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1ff86:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1ff8a:	2a02      	cmp	r2, #2
   1ff8c:	d006      	beq.n	1ff9c <sys_notify_validate+0x1c>
   1ff8e:	2a03      	cmp	r2, #3
   1ff90:	d004      	beq.n	1ff9c <sys_notify_validate+0x1c>
   1ff92:	2a01      	cmp	r2, #1
   1ff94:	d005      	beq.n	1ffa2 <sys_notify_validate+0x22>
		return -EINVAL;
   1ff96:	f06f 0015 	mvn.w	r0, #21
}
   1ff9a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1ff9c:	681a      	ldr	r2, [r3, #0]
   1ff9e:	2a00      	cmp	r2, #0
   1ffa0:	d0f9      	beq.n	1ff96 <sys_notify_validate+0x16>
		notify->result = 0;
   1ffa2:	2000      	movs	r0, #0
   1ffa4:	6098      	str	r0, [r3, #8]
   1ffa6:	4770      	bx	lr

0001ffa8 <arch_printk_char_out>:
}
   1ffa8:	2000      	movs	r0, #0
   1ffaa:	4770      	bx	lr

0001ffac <str_out>:
{
   1ffac:	b530      	push	{r4, r5, lr}
   1ffae:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1ffb0:	680c      	ldr	r4, [r1, #0]
   1ffb2:	1c55      	adds	r5, r2, #1
   1ffb4:	b114      	cbz	r4, 1ffbc <str_out+0x10>
   1ffb6:	684b      	ldr	r3, [r1, #4]
   1ffb8:	4293      	cmp	r3, r2
   1ffba:	dc01      	bgt.n	1ffc0 <str_out+0x14>
		ctx->count++;
   1ffbc:	608d      	str	r5, [r1, #8]
}
   1ffbe:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1ffc0:	3b01      	subs	r3, #1
   1ffc2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1ffc4:	bf08      	it	eq
   1ffc6:	2200      	moveq	r2, #0
   1ffc8:	608d      	str	r5, [r1, #8]
   1ffca:	bf0c      	ite	eq
   1ffcc:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1ffce:	54a0      	strbne	r0, [r4, r2]
   1ffd0:	e7f5      	b.n	1ffbe <str_out+0x12>

0001ffd2 <printk>:
{
   1ffd2:	b40f      	push	{r0, r1, r2, r3}
   1ffd4:	b507      	push	{r0, r1, r2, lr}
   1ffd6:	a904      	add	r1, sp, #16
   1ffd8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1ffdc:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1ffde:	f7f0 fdf1 	bl	10bc4 <vprintk>
}
   1ffe2:	b003      	add	sp, #12
   1ffe4:	f85d eb04 	ldr.w	lr, [sp], #4
   1ffe8:	b004      	add	sp, #16
   1ffea:	4770      	bx	lr

0001ffec <snprintk>:
{
   1ffec:	b40c      	push	{r2, r3}
   1ffee:	b507      	push	{r0, r1, r2, lr}
   1fff0:	ab04      	add	r3, sp, #16
   1fff2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1fff6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1fff8:	f7f0 fdf2 	bl	10be0 <vsnprintk>
}
   1fffc:	b003      	add	sp, #12
   1fffe:	f85d eb04 	ldr.w	lr, [sp], #4
   20002:	b002      	add	sp, #8
   20004:	4770      	bx	lr

00020006 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20006:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   20008:	f013 0307 	ands.w	r3, r3, #7
   2000c:	d105      	bne.n	2001a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2000e:	6803      	ldr	r3, [r0, #0]
   20010:	2b00      	cmp	r3, #0
		evt = EVT_START;
   20012:	bf0c      	ite	eq
   20014:	2000      	moveq	r0, #0
   20016:	2003      	movne	r0, #3
   20018:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2001a:	2b02      	cmp	r3, #2
   2001c:	d105      	bne.n	2002a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2001e:	8bc3      	ldrh	r3, [r0, #30]
   20020:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   20022:	bf14      	ite	ne
   20024:	2000      	movne	r0, #0
   20026:	2004      	moveq	r0, #4
   20028:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2002a:	2b01      	cmp	r3, #1
   2002c:	d105      	bne.n	2003a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2002e:	6803      	ldr	r3, [r0, #0]
   20030:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   20032:	bf0c      	ite	eq
   20034:	2000      	moveq	r0, #0
   20036:	2005      	movne	r0, #5
   20038:	4770      	bx	lr
	int evt = EVT_NOP;
   2003a:	2000      	movs	r0, #0
}
   2003c:	4770      	bx	lr

0002003e <notify_one>:
{
   2003e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20042:	460d      	mov	r5, r1
   20044:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   20046:	4619      	mov	r1, r3
   20048:	1d28      	adds	r0, r5, #4
{
   2004a:	4690      	mov	r8, r2
   2004c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2004e:	f7f0 fd81 	bl	10b54 <sys_notify_finalize>
	if (cb) {
   20052:	4604      	mov	r4, r0
   20054:	b138      	cbz	r0, 20066 <notify_one+0x28>
		cb(mgr, cli, state, res);
   20056:	4633      	mov	r3, r6
   20058:	4642      	mov	r2, r8
   2005a:	4629      	mov	r1, r5
   2005c:	4638      	mov	r0, r7
   2005e:	46a4      	mov	ip, r4
}
   20060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   20064:	4760      	bx	ip
}
   20066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002006a <validate_args>:
{
   2006a:	b510      	push	{r4, lr}
   2006c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2006e:	b140      	cbz	r0, 20082 <validate_args+0x18>
   20070:	b139      	cbz	r1, 20082 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   20072:	1d08      	adds	r0, r1, #4
   20074:	f7ff ff84 	bl	1ff80 <sys_notify_validate>
	if ((rv == 0)
   20078:	b928      	cbnz	r0, 20086 <validate_args+0x1c>
	    && ((cli->notify.flags
   2007a:	68a3      	ldr	r3, [r4, #8]
   2007c:	f033 0303 	bics.w	r3, r3, #3
   20080:	d001      	beq.n	20086 <validate_args+0x1c>
		rv = -EINVAL;
   20082:	f06f 0015 	mvn.w	r0, #21
}
   20086:	bd10      	pop	{r4, pc}

00020088 <onoff_manager_init>:
{
   20088:	b538      	push	{r3, r4, r5, lr}
   2008a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2008c:	4605      	mov	r5, r0
   2008e:	b158      	cbz	r0, 200a8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   20090:	b151      	cbz	r1, 200a8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   20092:	680b      	ldr	r3, [r1, #0]
   20094:	b143      	cbz	r3, 200a8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   20096:	684b      	ldr	r3, [r1, #4]
   20098:	b133      	cbz	r3, 200a8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2009a:	2220      	movs	r2, #32
   2009c:	2100      	movs	r1, #0
   2009e:	f002 fe04 	bl	22caa <memset>
   200a2:	612c      	str	r4, [r5, #16]
	return 0;
   200a4:	2000      	movs	r0, #0
}
   200a6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   200a8:	f06f 0015 	mvn.w	r0, #21
   200ac:	e7fb      	b.n	200a6 <onoff_manager_init+0x1e>

000200ae <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   200ae:	4604      	mov	r4, r0
   200b0:	b508      	push	{r3, lr}
   200b2:	4608      	mov	r0, r1
   200b4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   200b6:	461a      	mov	r2, r3
   200b8:	47a0      	blx	r4
	return z_impl_z_current_get();
   200ba:	f7fc fa3f 	bl	1c53c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   200be:	f7f2 fdd3 	bl	12c68 <z_impl_k_thread_abort>

000200c2 <chunk_field>:
	if (big_heap(h)) {
   200c2:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   200c4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   200c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   200cc:	bf2c      	ite	cs
   200ce:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   200d2:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   200d6:	4770      	bx	lr

000200d8 <chunk_set>:
	void *cmem = &buf[c];
   200d8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   200dc:	6880      	ldr	r0, [r0, #8]
   200de:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   200e2:	bf2c      	ite	cs
   200e4:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   200e8:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   200ec:	4770      	bx	lr

000200ee <chunk_size>:
{
   200ee:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   200f0:	2201      	movs	r2, #1
   200f2:	f7ff ffe6 	bl	200c2 <chunk_field>
}
   200f6:	0840      	lsrs	r0, r0, #1
   200f8:	bd08      	pop	{r3, pc}

000200fa <set_chunk_used>:
	if (big_heap(h)) {
   200fa:	6883      	ldr	r3, [r0, #8]
   200fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   20100:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   20104:	d308      	bcc.n	20118 <set_chunk_used+0x1e>
		if (used) {
   20106:	684b      	ldr	r3, [r1, #4]
   20108:	b11a      	cbz	r2, 20112 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   2010a:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2010e:	604b      	str	r3, [r1, #4]
   20110:	4770      	bx	lr
   20112:	f023 0301 	bic.w	r3, r3, #1
   20116:	e7fa      	b.n	2010e <set_chunk_used+0x14>
		if (used) {
   20118:	884b      	ldrh	r3, [r1, #2]
   2011a:	b11a      	cbz	r2, 20124 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2011c:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   20120:	804b      	strh	r3, [r1, #2]
}
   20122:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   20124:	f023 0301 	bic.w	r3, r3, #1
   20128:	e7fa      	b.n	20120 <set_chunk_used+0x26>

0002012a <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2012a:	0053      	lsls	r3, r2, #1
   2012c:	2201      	movs	r2, #1
   2012e:	f7ff bfd3 	b.w	200d8 <chunk_set>

00020132 <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   20132:	6883      	ldr	r3, [r0, #8]
   20134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20138:	bf2c      	ite	cs
   2013a:	2008      	movcs	r0, #8
   2013c:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2013e:	3107      	adds	r1, #7
   20140:	4408      	add	r0, r1
}
   20142:	08c0      	lsrs	r0, r0, #3
   20144:	4770      	bx	lr

00020146 <bucket_idx>:
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
   20146:	460a      	mov	r2, r1
   20148:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   2014a:	2101      	movs	r1, #1
   2014c:	f7ff fff1 	bl	20132 <bytes_to_chunksz>
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   20150:	3201      	adds	r2, #1
   20152:	1a12      	subs	r2, r2, r0
	return 31 - __builtin_clz(usable_sz);
   20154:	fab2 f082 	clz	r0, r2
}
   20158:	f1c0 001f 	rsb	r0, r0, #31
   2015c:	bd08      	pop	{r3, pc}

0002015e <merge_chunks>:
{
   2015e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20162:	4616      	mov	r6, r2
   20164:	4604      	mov	r4, r0
   20166:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   20168:	f7ff ffc1 	bl	200ee <chunk_size>
   2016c:	4631      	mov	r1, r6
   2016e:	4605      	mov	r5, r0
   20170:	4620      	mov	r0, r4
   20172:	f7ff ffbc 	bl	200ee <chunk_size>
   20176:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   20178:	462a      	mov	r2, r5
   2017a:	4639      	mov	r1, r7
   2017c:	4620      	mov	r0, r4
   2017e:	f7ff ffd4 	bl	2012a <set_chunk_size>
	return c + chunk_size(h, c);
   20182:	4631      	mov	r1, r6
   20184:	4620      	mov	r0, r4
   20186:	f7ff ffb2 	bl	200ee <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2018a:	462b      	mov	r3, r5
   2018c:	1831      	adds	r1, r6, r0
   2018e:	2200      	movs	r2, #0
   20190:	4620      	mov	r0, r4
}
   20192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20196:	f7ff bf9f 	b.w	200d8 <chunk_set>

0002019a <split_chunks>:
{
   2019a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2019e:	4614      	mov	r4, r2
   201a0:	4605      	mov	r5, r0
   201a2:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   201a4:	f7ff ffa3 	bl	200ee <chunk_size>
	chunksz_t lsz = rc - lc;
   201a8:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   201ac:	1b37      	subs	r7, r6, r4
   201ae:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   201b0:	4642      	mov	r2, r8
   201b2:	4631      	mov	r1, r6
   201b4:	4628      	mov	r0, r5
   201b6:	f7ff ffb8 	bl	2012a <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   201ba:	463a      	mov	r2, r7
   201bc:	4621      	mov	r1, r4
   201be:	4628      	mov	r0, r5
   201c0:	f7ff ffb3 	bl	2012a <set_chunk_size>
   201c4:	4643      	mov	r3, r8
   201c6:	2200      	movs	r2, #0
   201c8:	4621      	mov	r1, r4
   201ca:	4628      	mov	r0, r5
   201cc:	f7ff ff84 	bl	200d8 <chunk_set>
	return c + chunk_size(h, c);
   201d0:	4621      	mov	r1, r4
   201d2:	4628      	mov	r0, r5
   201d4:	f7ff ff8b 	bl	200ee <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   201d8:	463b      	mov	r3, r7
   201da:	1821      	adds	r1, r4, r0
   201dc:	2200      	movs	r2, #0
   201de:	4628      	mov	r0, r5
}
   201e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   201e4:	f7ff bf78 	b.w	200d8 <chunk_set>

000201e8 <free_list_remove_bidx>:
{
   201e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   201ec:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   201ee:	2203      	movs	r2, #3
   201f0:	460e      	mov	r6, r1
   201f2:	4604      	mov	r4, r0
   201f4:	f7ff ff65 	bl	200c2 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   201f8:	4286      	cmp	r6, r0
   201fa:	4605      	mov	r5, r0
   201fc:	f107 0804 	add.w	r8, r7, #4
   20200:	d10b      	bne.n	2021a <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   20202:	2301      	movs	r3, #1
   20204:	fa03 f707 	lsl.w	r7, r3, r7
   20208:	68e3      	ldr	r3, [r4, #12]
   2020a:	ea23 0307 	bic.w	r3, r3, r7
   2020e:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   20210:	2300      	movs	r3, #0
   20212:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   20216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   2021a:	4631      	mov	r1, r6
   2021c:	2202      	movs	r2, #2
   2021e:	4620      	mov	r0, r4
   20220:	f7ff ff4f 	bl	200c2 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   20224:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   20226:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   20228:	4601      	mov	r1, r0
		b->next = second;
   2022a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   2022e:	4620      	mov	r0, r4
   20230:	2203      	movs	r2, #3
   20232:	f7ff ff51 	bl	200d8 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   20236:	4633      	mov	r3, r6
   20238:	4629      	mov	r1, r5
   2023a:	4620      	mov	r0, r4
   2023c:	2202      	movs	r2, #2
}
   2023e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20242:	f7ff bf49 	b.w	200d8 <chunk_set>

00020246 <alloc_chunk>:
{
   20246:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2024a:	4605      	mov	r5, r0
   2024c:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   2024e:	f7ff ff7a 	bl	20146 <bucket_idx>
   20252:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   20256:	4606      	mov	r6, r0
	if (b->next) {
   20258:	f8da 9010 	ldr.w	r9, [sl, #16]
   2025c:	f1b9 0f00 	cmp.w	r9, #0
   20260:	d01b      	beq.n	2029a <alloc_chunk+0x54>
   20262:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   20264:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   20268:	4628      	mov	r0, r5
   2026a:	4621      	mov	r1, r4
   2026c:	f7ff ff3f 	bl	200ee <chunk_size>
   20270:	4540      	cmp	r0, r8
   20272:	d307      	bcc.n	20284 <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   20274:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
   20276:	4621      	mov	r1, r4
   20278:	4628      	mov	r0, r5
   2027a:	f7ff ffb5 	bl	201e8 <free_list_remove_bidx>
}
   2027e:	4620      	mov	r0, r4
   20280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   20284:	2203      	movs	r2, #3
   20286:	4621      	mov	r1, r4
   20288:	4628      	mov	r0, r5
   2028a:	f7ff ff1a 	bl	200c2 <chunk_field>
		} while (--i && b->next != first);
   2028e:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   20290:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   20294:	d001      	beq.n	2029a <alloc_chunk+0x54>
   20296:	4581      	cmp	r9, r0
   20298:	d1e4      	bne.n	20264 <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   2029a:	68e9      	ldr	r1, [r5, #12]
   2029c:	3601      	adds	r6, #1
   2029e:	f04f 34ff 	mov.w	r4, #4294967295
   202a2:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   202a4:	400c      	ands	r4, r1
   202a6:	d0ea      	beq.n	2027e <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   202a8:	fa94 f2a4 	rbit	r2, r4
   202ac:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   202b0:	1d13      	adds	r3, r2, #4
   202b2:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   202b6:	e7de      	b.n	20276 <alloc_chunk+0x30>

000202b8 <free_list_add>:
{
   202b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   202bc:	4604      	mov	r4, r0
   202be:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   202c0:	f7ff ff15 	bl	200ee <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   202c4:	68a3      	ldr	r3, [r4, #8]
   202c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   202ca:	4601      	mov	r1, r0
   202cc:	d301      	bcc.n	202d2 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   202ce:	2801      	cmp	r0, #1
   202d0:	d035      	beq.n	2033e <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   202d2:	4620      	mov	r0, r4
   202d4:	f7ff ff37 	bl	20146 <bucket_idx>
	if (b->next == 0U) {
   202d8:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   202dc:	6916      	ldr	r6, [r2, #16]
   202de:	b99e      	cbnz	r6, 20308 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   202e0:	2301      	movs	r3, #1
   202e2:	fa03 f000 	lsl.w	r0, r3, r0
   202e6:	68e3      	ldr	r3, [r4, #12]
   202e8:	4303      	orrs	r3, r0
   202ea:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   202ec:	4629      	mov	r1, r5
		b->next = c;
   202ee:	6115      	str	r5, [r2, #16]
   202f0:	462b      	mov	r3, r5
   202f2:	2202      	movs	r2, #2
   202f4:	4620      	mov	r0, r4
   202f6:	f7ff feef 	bl	200d8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   202fa:	2203      	movs	r2, #3
   202fc:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   202fe:	4620      	mov	r0, r4
}
   20300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20304:	f7ff bee8 	b.w	200d8 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   20308:	2202      	movs	r2, #2
   2030a:	4631      	mov	r1, r6
   2030c:	4620      	mov	r0, r4
   2030e:	f7ff fed8 	bl	200c2 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   20312:	2202      	movs	r2, #2
   20314:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   20316:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   20318:	4629      	mov	r1, r5
   2031a:	4620      	mov	r0, r4
   2031c:	f7ff fedc 	bl	200d8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   20320:	4633      	mov	r3, r6
   20322:	2203      	movs	r2, #3
   20324:	4629      	mov	r1, r5
   20326:	4620      	mov	r0, r4
   20328:	f7ff fed6 	bl	200d8 <chunk_set>
   2032c:	2203      	movs	r2, #3
   2032e:	4639      	mov	r1, r7
   20330:	462b      	mov	r3, r5
   20332:	4620      	mov	r0, r4
   20334:	f7ff fed0 	bl	200d8 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   20338:	2202      	movs	r2, #2
   2033a:	4631      	mov	r1, r6
   2033c:	e7df      	b.n	202fe <free_list_add+0x46>
   2033e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020342 <free_list_remove>:
{
   20342:	b538      	push	{r3, r4, r5, lr}
   20344:	4604      	mov	r4, r0
   20346:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   20348:	f7ff fed1 	bl	200ee <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   2034c:	68a3      	ldr	r3, [r4, #8]
   2034e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20352:	4601      	mov	r1, r0
   20354:	d301      	bcc.n	2035a <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   20356:	2801      	cmp	r0, #1
   20358:	d009      	beq.n	2036e <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2035a:	4620      	mov	r0, r4
   2035c:	f7ff fef3 	bl	20146 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   20360:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   20362:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   20364:	4620      	mov	r0, r4
}
   20366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   2036a:	f7ff bf3d 	b.w	201e8 <free_list_remove_bidx>
}
   2036e:	bd38      	pop	{r3, r4, r5, pc}

00020370 <free_chunk>:
{
   20370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20372:	460c      	mov	r4, r1
   20374:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   20376:	f7ff feba 	bl	200ee <chunk_size>
   2037a:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2037c:	2201      	movs	r2, #1
   2037e:	4631      	mov	r1, r6
   20380:	4628      	mov	r0, r5
   20382:	f7ff fe9e 	bl	200c2 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   20386:	07c3      	lsls	r3, r0, #31
   20388:	d40c      	bmi.n	203a4 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   2038a:	4631      	mov	r1, r6
   2038c:	4628      	mov	r0, r5
   2038e:	f7ff ffd8 	bl	20342 <free_list_remove>
	return c + chunk_size(h, c);
   20392:	4621      	mov	r1, r4
   20394:	4628      	mov	r0, r5
   20396:	f7ff feaa 	bl	200ee <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2039a:	4621      	mov	r1, r4
   2039c:	1822      	adds	r2, r4, r0
   2039e:	4628      	mov	r0, r5
   203a0:	f7ff fedd 	bl	2015e <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   203a4:	2200      	movs	r2, #0
   203a6:	4621      	mov	r1, r4
   203a8:	4628      	mov	r0, r5
   203aa:	f7ff fe8a 	bl	200c2 <chunk_field>
   203ae:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   203b0:	2201      	movs	r2, #1
   203b2:	4639      	mov	r1, r7
   203b4:	4628      	mov	r0, r5
   203b6:	f7ff fe84 	bl	200c2 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   203ba:	f010 0601 	ands.w	r6, r0, #1
   203be:	d113      	bne.n	203e8 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   203c0:	4639      	mov	r1, r7
   203c2:	4628      	mov	r0, r5
   203c4:	f7ff ffbd 	bl	20342 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   203c8:	4621      	mov	r1, r4
   203ca:	4632      	mov	r2, r6
   203cc:	4628      	mov	r0, r5
   203ce:	f7ff fe78 	bl	200c2 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   203d2:	4622      	mov	r2, r4
   203d4:	1a21      	subs	r1, r4, r0
   203d6:	4628      	mov	r0, r5
   203d8:	f7ff fec1 	bl	2015e <merge_chunks>
   203dc:	4621      	mov	r1, r4
   203de:	4632      	mov	r2, r6
   203e0:	4628      	mov	r0, r5
   203e2:	f7ff fe6e 	bl	200c2 <chunk_field>
   203e6:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   203e8:	4621      	mov	r1, r4
   203ea:	4628      	mov	r0, r5
}
   203ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   203f0:	f7ff bf62 	b.w	202b8 <free_list_add>

000203f4 <sys_heap_alloc>:
{
   203f4:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   203f6:	6804      	ldr	r4, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   203f8:	b909      	cbnz	r1, 203fe <sys_heap_alloc+0xa>
		return NULL;
   203fa:	2000      	movs	r0, #0
}
   203fc:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   203fe:	68a2      	ldr	r2, [r4, #8]
   20400:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   20404:	d9f9      	bls.n	203fa <sys_heap_alloc+0x6>
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   20406:	4620      	mov	r0, r4
   20408:	f7ff fe93 	bl	20132 <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2040c:	4601      	mov	r1, r0
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   2040e:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   20410:	4620      	mov	r0, r4
   20412:	f7ff ff18 	bl	20246 <alloc_chunk>
	if (c == 0U) {
   20416:	4605      	mov	r5, r0
   20418:	2800      	cmp	r0, #0
   2041a:	d0ee      	beq.n	203fa <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2041c:	4601      	mov	r1, r0
   2041e:	4620      	mov	r0, r4
   20420:	f7ff fe65 	bl	200ee <chunk_size>
   20424:	42b0      	cmp	r0, r6
   20426:	d909      	bls.n	2043c <sys_heap_alloc+0x48>
		split_chunks(h, c, c + chunk_sz);
   20428:	442e      	add	r6, r5
   2042a:	4629      	mov	r1, r5
   2042c:	4620      	mov	r0, r4
   2042e:	4632      	mov	r2, r6
   20430:	f7ff feb3 	bl	2019a <split_chunks>
		free_list_add(h, c + chunk_sz);
   20434:	4631      	mov	r1, r6
   20436:	4620      	mov	r0, r4
   20438:	f7ff ff3e 	bl	202b8 <free_list_add>
	set_chunk_used(h, c, true);
   2043c:	4620      	mov	r0, r4
   2043e:	2201      	movs	r2, #1
   20440:	4629      	mov	r1, r5
   20442:	f7ff fe5a 	bl	200fa <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   20446:	68a3      	ldr	r3, [r4, #8]
   20448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2044c:	bf2c      	ite	cs
   2044e:	2008      	movcs	r0, #8
   20450:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   20452:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   20456:	4420      	add	r0, r4
	return chunk_mem(h, c);
   20458:	e7d0      	b.n	203fc <sys_heap_alloc+0x8>

0002045a <outs>:
{
   2045a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2045e:	4607      	mov	r7, r0
   20460:	4688      	mov	r8, r1
   20462:	4615      	mov	r5, r2
   20464:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   20466:	4614      	mov	r4, r2
   20468:	42b4      	cmp	r4, r6
   2046a:	eba4 0005 	sub.w	r0, r4, r5
   2046e:	d302      	bcc.n	20476 <outs+0x1c>
   20470:	b93e      	cbnz	r6, 20482 <outs+0x28>
   20472:	7823      	ldrb	r3, [r4, #0]
   20474:	b12b      	cbz	r3, 20482 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   20476:	f814 0b01 	ldrb.w	r0, [r4], #1
   2047a:	4641      	mov	r1, r8
   2047c:	47b8      	blx	r7
		if (rc < 0) {
   2047e:	2800      	cmp	r0, #0
   20480:	daf2      	bge.n	20468 <outs+0xe>
}
   20482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020486 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   20486:	4040      	eors	r0, r0
   20488:	f380 8811 	msr	BASEPRI, r0
   2048c:	f04f 0004 	mov.w	r0, #4
   20490:	df02      	svc	2
}
   20492:	4770      	bx	lr

00020494 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   20494:	4770      	bx	lr

00020496 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   20496:	2200      	movs	r2, #0
   20498:	e9c0 2200 	strd	r2, r2, [r0]
   2049c:	6082      	str	r2, [r0, #8]
}
   2049e:	4770      	bx	lr

000204a0 <adv_data_found>:
{
   204a0:	b510      	push	{r4, lr}
   204a2:	4604      	mov	r4, r0
   204a4:	4608      	mov	r0, r1
	switch (data->type) {
   204a6:	7823      	ldrb	r3, [r4, #0]
   204a8:	2b05      	cmp	r3, #5
   204aa:	d806      	bhi.n	204ba <adv_data_found+0x1a>
   204ac:	2b03      	cmp	r3, #3
   204ae:	d80e      	bhi.n	204ce <adv_data_found+0x2e>
   204b0:	3b02      	subs	r3, #2
   204b2:	2b01      	cmp	r3, #1
   204b4:	d906      	bls.n	204c4 <adv_data_found+0x24>
}
   204b6:	2001      	movs	r0, #1
   204b8:	bd10      	pop	{r4, pc}
	switch (data->type) {
   204ba:	3b06      	subs	r3, #6
   204bc:	2b01      	cmp	r3, #1
   204be:	d8fa      	bhi.n	204b6 <adv_data_found+0x16>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   204c0:	2202      	movs	r2, #2
   204c2:	e000      	b.n	204c6 <adv_data_found+0x26>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
   204c4:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   204c6:	4621      	mov	r1, r4
   204c8:	f7f1 fcea 	bl	11ea0 <uuid_check>
		break;
   204cc:	e7f3      	b.n	204b6 <adv_data_found+0x16>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
   204ce:	2201      	movs	r2, #1
   204d0:	e7f9      	b.n	204c6 <adv_data_found+0x26>

000204d2 <bt_scan_stop>:
	return bt_le_scan_stop();
   204d2:	f7f4 b9a3 	b.w	1481c <bt_le_scan_stop>

000204d6 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   204d6:	b538      	push	{r3, r4, r5, lr}
   204d8:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   204da:	42ab      	cmp	r3, r5
{
   204dc:	4611      	mov	r1, r2
   204de:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   204e0:	d804      	bhi.n	204ec <_copy+0x16>
   204e2:	461a      	mov	r2, r3
   204e4:	f002 fbb9 	bl	22c5a <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   204e8:	4620      	mov	r0, r4
   204ea:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   204ec:	2400      	movs	r4, #0
   204ee:	e7fb      	b.n	204e8 <_copy+0x12>

000204f0 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   204f0:	f002 bbdb 	b.w	22caa <memset>

000204f4 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   204f4:	09c3      	lsrs	r3, r0, #7
   204f6:	005a      	lsls	r2, r3, #1
   204f8:	4413      	add	r3, r2
   204fa:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   204fe:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   20502:	b2c0      	uxtb	r0, r0
   20504:	4770      	bx	lr

00020506 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   20506:	78cb      	ldrb	r3, [r1, #3]
   20508:	7802      	ldrb	r2, [r0, #0]
   2050a:	4053      	eors	r3, r2
   2050c:	7003      	strb	r3, [r0, #0]
   2050e:	884b      	ldrh	r3, [r1, #2]
   20510:	7842      	ldrb	r2, [r0, #1]
   20512:	4053      	eors	r3, r2
   20514:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   20516:	680a      	ldr	r2, [r1, #0]
   20518:	7883      	ldrb	r3, [r0, #2]
   2051a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2051e:	7083      	strb	r3, [r0, #2]
   20520:	680a      	ldr	r2, [r1, #0]
   20522:	78c3      	ldrb	r3, [r0, #3]
   20524:	4053      	eors	r3, r2
   20526:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   20528:	79cb      	ldrb	r3, [r1, #7]
   2052a:	7902      	ldrb	r2, [r0, #4]
   2052c:	4053      	eors	r3, r2
   2052e:	7103      	strb	r3, [r0, #4]
   20530:	88cb      	ldrh	r3, [r1, #6]
   20532:	7942      	ldrb	r2, [r0, #5]
   20534:	4053      	eors	r3, r2
   20536:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   20538:	684a      	ldr	r2, [r1, #4]
   2053a:	7983      	ldrb	r3, [r0, #6]
   2053c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20540:	7183      	strb	r3, [r0, #6]
   20542:	684a      	ldr	r2, [r1, #4]
   20544:	79c3      	ldrb	r3, [r0, #7]
   20546:	4053      	eors	r3, r2
   20548:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2054a:	7acb      	ldrb	r3, [r1, #11]
   2054c:	7a02      	ldrb	r2, [r0, #8]
   2054e:	4053      	eors	r3, r2
   20550:	7203      	strb	r3, [r0, #8]
   20552:	7a42      	ldrb	r2, [r0, #9]
   20554:	894b      	ldrh	r3, [r1, #10]
   20556:	4053      	eors	r3, r2
   20558:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2055a:	688a      	ldr	r2, [r1, #8]
   2055c:	7a83      	ldrb	r3, [r0, #10]
   2055e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20562:	7283      	strb	r3, [r0, #10]
   20564:	688a      	ldr	r2, [r1, #8]
   20566:	7ac3      	ldrb	r3, [r0, #11]
   20568:	4053      	eors	r3, r2
   2056a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2056c:	7bcb      	ldrb	r3, [r1, #15]
   2056e:	7b02      	ldrb	r2, [r0, #12]
   20570:	4053      	eors	r3, r2
   20572:	7303      	strb	r3, [r0, #12]
   20574:	89cb      	ldrh	r3, [r1, #14]
   20576:	7b42      	ldrb	r2, [r0, #13]
   20578:	4053      	eors	r3, r2
   2057a:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2057c:	68ca      	ldr	r2, [r1, #12]
   2057e:	7b83      	ldrb	r3, [r0, #14]
   20580:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20584:	7383      	strb	r3, [r0, #14]
   20586:	68ca      	ldr	r2, [r1, #12]
   20588:	7bc3      	ldrb	r3, [r0, #15]
   2058a:	4053      	eors	r3, r2
   2058c:	73c3      	strb	r3, [r0, #15]
}
   2058e:	4770      	bx	lr

00020590 <shift_rows>:
{
   20590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   20592:	7802      	ldrb	r2, [r0, #0]
   20594:	f88d 2000 	strb.w	r2, [sp]
   20598:	7942      	ldrb	r2, [r0, #5]
   2059a:	f88d 2001 	strb.w	r2, [sp, #1]
   2059e:	7a82      	ldrb	r2, [r0, #10]
   205a0:	f88d 2002 	strb.w	r2, [sp, #2]
   205a4:	7bc2      	ldrb	r2, [r0, #15]
   205a6:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   205aa:	7902      	ldrb	r2, [r0, #4]
   205ac:	f88d 2004 	strb.w	r2, [sp, #4]
   205b0:	7a42      	ldrb	r2, [r0, #9]
   205b2:	f88d 2005 	strb.w	r2, [sp, #5]
   205b6:	7b82      	ldrb	r2, [r0, #14]
   205b8:	f88d 2006 	strb.w	r2, [sp, #6]
   205bc:	78c2      	ldrb	r2, [r0, #3]
   205be:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   205c2:	7a02      	ldrb	r2, [r0, #8]
   205c4:	f88d 2008 	strb.w	r2, [sp, #8]
   205c8:	7b42      	ldrb	r2, [r0, #13]
   205ca:	f88d 2009 	strb.w	r2, [sp, #9]
   205ce:	7882      	ldrb	r2, [r0, #2]
   205d0:	f88d 200a 	strb.w	r2, [sp, #10]
   205d4:	79c2      	ldrb	r2, [r0, #7]
   205d6:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   205da:	7b02      	ldrb	r2, [r0, #12]
   205dc:	f88d 200c 	strb.w	r2, [sp, #12]
   205e0:	7842      	ldrb	r2, [r0, #1]
   205e2:	7ac3      	ldrb	r3, [r0, #11]
   205e4:	f88d 200d 	strb.w	r2, [sp, #13]
   205e8:	7982      	ldrb	r2, [r0, #6]
   205ea:	f88d 200e 	strb.w	r2, [sp, #14]
   205ee:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   205f2:	2310      	movs	r3, #16
   205f4:	466a      	mov	r2, sp
   205f6:	4619      	mov	r1, r3
   205f8:	f7ff ff6d 	bl	204d6 <_copy>
}
   205fc:	b005      	add	sp, #20
   205fe:	f85d fb04 	ldr.w	pc, [sp], #4

00020602 <mult_row_column>:
{
   20602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20604:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   20606:	7808      	ldrb	r0, [r1, #0]
{
   20608:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2060a:	f7ff ff73 	bl	204f4 <_double_byte>
   2060e:	4605      	mov	r5, r0
   20610:	7860      	ldrb	r0, [r4, #1]
   20612:	f7ff ff6f 	bl	204f4 <_double_byte>
   20616:	78a2      	ldrb	r2, [r4, #2]
   20618:	7863      	ldrb	r3, [r4, #1]
   2061a:	4053      	eors	r3, r2
   2061c:	78e2      	ldrb	r2, [r4, #3]
   2061e:	4053      	eors	r3, r2
   20620:	405d      	eors	r5, r3
   20622:	4045      	eors	r5, r0
   20624:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   20626:	7860      	ldrb	r0, [r4, #1]
   20628:	7827      	ldrb	r7, [r4, #0]
   2062a:	f7ff ff63 	bl	204f4 <_double_byte>
   2062e:	4605      	mov	r5, r0
   20630:	78a0      	ldrb	r0, [r4, #2]
   20632:	f7ff ff5f 	bl	204f4 <_double_byte>
   20636:	78a3      	ldrb	r3, [r4, #2]
   20638:	405f      	eors	r7, r3
   2063a:	78e3      	ldrb	r3, [r4, #3]
   2063c:	405f      	eors	r7, r3
   2063e:	407d      	eors	r5, r7
   20640:	4045      	eors	r5, r0
   20642:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   20644:	78a0      	ldrb	r0, [r4, #2]
   20646:	7865      	ldrb	r5, [r4, #1]
   20648:	7827      	ldrb	r7, [r4, #0]
   2064a:	f7ff ff53 	bl	204f4 <_double_byte>
   2064e:	406f      	eors	r7, r5
   20650:	4605      	mov	r5, r0
   20652:	78e0      	ldrb	r0, [r4, #3]
   20654:	f7ff ff4e 	bl	204f4 <_double_byte>
   20658:	78e3      	ldrb	r3, [r4, #3]
   2065a:	405f      	eors	r7, r3
   2065c:	407d      	eors	r5, r7
   2065e:	4045      	eors	r5, r0
   20660:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   20662:	7820      	ldrb	r0, [r4, #0]
   20664:	f7ff ff46 	bl	204f4 <_double_byte>
   20668:	7863      	ldrb	r3, [r4, #1]
   2066a:	7825      	ldrb	r5, [r4, #0]
   2066c:	405d      	eors	r5, r3
   2066e:	78a3      	ldrb	r3, [r4, #2]
   20670:	405d      	eors	r5, r3
   20672:	4045      	eors	r5, r0
   20674:	78e0      	ldrb	r0, [r4, #3]
   20676:	f7ff ff3d 	bl	204f4 <_double_byte>
   2067a:	b2ed      	uxtb	r5, r5
   2067c:	4045      	eors	r5, r0
   2067e:	70f5      	strb	r5, [r6, #3]
}
   20680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020682 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   20682:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   20684:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   20686:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   20688:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2068c:	2b00      	cmp	r3, #0
   2068e:	bfb4      	ite	lt
   20690:	2387      	movlt	r3, #135	; 0x87
   20692:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   20694:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   20698:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2069c:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2069e:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   206a2:	d002      	beq.n	206aa <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   206a4:	7813      	ldrb	r3, [r2, #0]
   206a6:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   206a8:	e7f4      	b.n	20694 <gf_double+0x12>
	}
}
   206aa:	bd10      	pop	{r4, pc}

000206ac <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   206ac:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   206ae:	b120      	cbz	r0, 206ba <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   206b0:	2258      	movs	r2, #88	; 0x58
   206b2:	2100      	movs	r1, #0
   206b4:	f7ff ff1c 	bl	204f0 <_set>
   206b8:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   206ba:	bd08      	pop	{r3, pc}

000206bc <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   206bc:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   206be:	4604      	mov	r4, r0
   206c0:	b188      	cbz	r0, 206e6 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   206c2:	2210      	movs	r2, #16
   206c4:	2100      	movs	r1, #0
   206c6:	f7ff ff13 	bl	204f0 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   206ca:	2210      	movs	r2, #16
   206cc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   206d0:	2100      	movs	r1, #0
   206d2:	f7ff ff0d 	bl	204f0 <_set>
	s->leftover_offset = 0;
   206d6:	2300      	movs	r3, #0
   206d8:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   206da:	2200      	movs	r2, #0
   206dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   206e0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   206e4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   206e6:	bd10      	pop	{r4, pc}

000206e8 <tc_cmac_setup>:
{
   206e8:	b570      	push	{r4, r5, r6, lr}
   206ea:	460d      	mov	r5, r1
   206ec:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   206ee:	4604      	mov	r4, r0
   206f0:	b310      	cbz	r0, 20738 <tc_cmac_setup+0x50>
   206f2:	b311      	cbz	r1, 2073a <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   206f4:	2258      	movs	r2, #88	; 0x58
   206f6:	2100      	movs	r1, #0
   206f8:	f7ff fefa 	bl	204f0 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   206fc:	4629      	mov	r1, r5
	s->sched = sched;
   206fe:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   20700:	4630      	mov	r0, r6
   20702:	f7f1 fdd7 	bl	122b4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   20706:	2210      	movs	r2, #16
   20708:	2100      	movs	r1, #0
   2070a:	4620      	mov	r0, r4
   2070c:	f7ff fef0 	bl	204f0 <_set>
	gf_double (s->K1, s->iv);
   20710:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   20714:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20716:	4621      	mov	r1, r4
   20718:	4620      	mov	r0, r4
   2071a:	f7f1 fe1d 	bl	12358 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2071e:	4621      	mov	r1, r4
   20720:	4628      	mov	r0, r5
   20722:	f7ff ffae 	bl	20682 <gf_double>
	gf_double (s->K2, s->K1);
   20726:	4629      	mov	r1, r5
   20728:	f104 0020 	add.w	r0, r4, #32
   2072c:	f7ff ffa9 	bl	20682 <gf_double>
	tc_cmac_init(s);
   20730:	4620      	mov	r0, r4
   20732:	f7ff ffc3 	bl	206bc <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   20736:	2001      	movs	r0, #1
}
   20738:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2073a:	4608      	mov	r0, r1
   2073c:	e7fc      	b.n	20738 <tc_cmac_setup+0x50>

0002073e <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2073e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20742:	460d      	mov	r5, r1
   20744:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   20746:	4604      	mov	r4, r0
   20748:	2800      	cmp	r0, #0
   2074a:	d062      	beq.n	20812 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2074c:	b912      	cbnz	r2, 20754 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2074e:	2001      	movs	r0, #1
}
   20750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   20754:	2900      	cmp	r1, #0
   20756:	d05c      	beq.n	20812 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   20758:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   2075c:	ea50 0301 	orrs.w	r3, r0, r1
   20760:	d057      	beq.n	20812 <tc_cmac_update+0xd4>
	s->countdown--;
   20762:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   20766:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   2076a:	f141 33ff 	adc.w	r3, r1, #4294967295
   2076e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   20772:	f1b8 0f00 	cmp.w	r8, #0
   20776:	d02a      	beq.n	207ce <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   20778:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   2077c:	f108 0030 	add.w	r0, r8, #48	; 0x30
   20780:	42be      	cmp	r6, r7
   20782:	4420      	add	r0, r4
   20784:	d208      	bcs.n	20798 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   20786:	462a      	mov	r2, r5
   20788:	4633      	mov	r3, r6
   2078a:	4631      	mov	r1, r6
   2078c:	f7ff fea3 	bl	204d6 <_copy>
			s->leftover_offset += data_length;
   20790:	6c62      	ldr	r2, [r4, #68]	; 0x44
   20792:	4432      	add	r2, r6
   20794:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   20796:	e7da      	b.n	2074e <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   20798:	463b      	mov	r3, r7
   2079a:	462a      	mov	r2, r5
   2079c:	4639      	mov	r1, r7
   2079e:	f7ff fe9a 	bl	204d6 <_copy>
		data_length -= remaining_space;
   207a2:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   207a4:	2300      	movs	r3, #0
   207a6:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   207a8:	4446      	add	r6, r8
		data += remaining_space;
   207aa:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   207ac:	1e63      	subs	r3, r4, #1
   207ae:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   207b2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   207b6:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   207ba:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   207bc:	ea82 0200 	eor.w	r2, r2, r0
   207c0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   207c2:	d1f6      	bne.n	207b2 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   207c4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   207c6:	4621      	mov	r1, r4
   207c8:	4620      	mov	r0, r4
   207ca:	f7f1 fdc5 	bl	12358 <tc_aes_encrypt>
   207ce:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   207d2:	2e10      	cmp	r6, #16
   207d4:	d80a      	bhi.n	207ec <tc_cmac_update+0xae>
	if (data_length > 0) {
   207d6:	2e00      	cmp	r6, #0
   207d8:	d0b9      	beq.n	2074e <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   207da:	4633      	mov	r3, r6
   207dc:	462a      	mov	r2, r5
   207de:	4631      	mov	r1, r6
   207e0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   207e4:	f7ff fe77 	bl	204d6 <_copy>
		s->leftover_offset = data_length;
   207e8:	6466      	str	r6, [r4, #68]	; 0x44
   207ea:	e7b0      	b.n	2074e <tc_cmac_update+0x10>
   207ec:	1e63      	subs	r3, r4, #1
   207ee:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   207f0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   207f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   207f8:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   207fa:	ea82 0200 	eor.w	r2, r2, r0
   207fe:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20800:	d1f6      	bne.n	207f0 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   20802:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20804:	4621      	mov	r1, r4
   20806:	4620      	mov	r0, r4
   20808:	f7f1 fda6 	bl	12358 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2080c:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2080e:	3e10      	subs	r6, #16
   20810:	e7df      	b.n	207d2 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   20812:	2000      	movs	r0, #0
   20814:	e79c      	b.n	20750 <tc_cmac_update+0x12>

00020816 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   20816:	b570      	push	{r4, r5, r6, lr}
   20818:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2081a:	4605      	mov	r5, r0
   2081c:	b1e8      	cbz	r0, 2085a <tc_cmac_final+0x44>
   2081e:	b369      	cbz	r1, 2087c <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   20820:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   20822:	2a10      	cmp	r2, #16
   20824:	d11a      	bne.n	2085c <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   20826:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20828:	1e63      	subs	r3, r4, #1
   2082a:	3901      	subs	r1, #1
   2082c:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20830:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   20834:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   20838:	4072      	eors	r2, r6
   2083a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2083e:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20840:	ea82 0206 	eor.w	r2, r2, r6
   20844:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20846:	d1f3      	bne.n	20830 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   20848:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2084a:	4621      	mov	r1, r4
   2084c:	4628      	mov	r0, r5
   2084e:	f7f1 fd83 	bl	12358 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   20852:	4620      	mov	r0, r4
   20854:	f7ff ff2a 	bl	206ac <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   20858:	2001      	movs	r0, #1
}
   2085a:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2085c:	f102 0030 	add.w	r0, r2, #48	; 0x30
   20860:	2100      	movs	r1, #0
   20862:	f1c2 0210 	rsb	r2, r2, #16
   20866:	4420      	add	r0, r4
   20868:	f7ff fe42 	bl	204f0 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2086c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2086e:	4423      	add	r3, r4
   20870:	2280      	movs	r2, #128	; 0x80
   20872:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   20876:	f104 0120 	add.w	r1, r4, #32
   2087a:	e7d5      	b.n	20828 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2087c:	4608      	mov	r0, r1
   2087e:	e7ec      	b.n	2085a <tc_cmac_final+0x44>

00020880 <abort_function>:
{
   20880:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   20882:	2000      	movs	r0, #0
   20884:	f7f1 fa06 	bl	11c94 <sys_reboot>

00020888 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   20888:	f7f9 b808 	b.w	1989c <z_fatal_error>

0002088c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2088c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   2088e:	6800      	ldr	r0, [r0, #0]
   20890:	f7f9 b804 	b.w	1989c <z_fatal_error>

00020894 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   20894:	2100      	movs	r1, #0
   20896:	2001      	movs	r0, #1
   20898:	f7ff bff6 	b.w	20888 <z_arm_fatal_error>

0002089c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2089c:	b508      	push	{r3, lr}
	handler();
   2089e:	f7f1 ff25 	bl	126ec <z_SysNmiOnReset>
	z_arm_int_exit();
}
   208a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   208a6:	f7f2 b801 	b.w	128ac <z_arm_exc_exit>

000208aa <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   208aa:	b084      	sub	sp, #16
   208ac:	ab04      	add	r3, sp, #16
   208ae:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   208b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   208b6:	2b06      	cmp	r3, #6
   208b8:	d108      	bne.n	208cc <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   208ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   208be:	2201      	movs	r2, #1
   208c0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   208c4:	f3bf 8f4f 	dsb	sy
        __WFE();
   208c8:	bf20      	wfe
    while (true)
   208ca:	e7fd      	b.n	208c8 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   208cc:	b004      	add	sp, #16
   208ce:	4770      	bx	lr

000208d0 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   208d0:	b084      	sub	sp, #16
   208d2:	ab04      	add	r3, sp, #16
   208d4:	e903 0007 	stmdb	r3, {r0, r1, r2}
   208d8:	2300      	movs	r3, #0
   208da:	f383 8811 	msr	BASEPRI, r3
   208de:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   208e2:	b004      	add	sp, #16
   208e4:	4770      	bx	lr

000208e6 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   208e6:	b510      	push	{r4, lr}
   208e8:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   208ea:	7801      	ldrb	r1, [r0, #0]
   208ec:	7822      	ldrb	r2, [r4, #0]
   208ee:	428a      	cmp	r2, r1
{
   208f0:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   208f2:	d00e      	beq.n	20912 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   208f4:	4669      	mov	r1, sp
   208f6:	f7f2 fb87 	bl	13008 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   208fa:	a905      	add	r1, sp, #20
   208fc:	4620      	mov	r0, r4
   208fe:	f7f2 fb83 	bl	13008 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   20902:	2210      	movs	r2, #16
   20904:	f10d 0115 	add.w	r1, sp, #21
   20908:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2090c:	f002 f997 	bl	22c3e <memcmp>
   20910:	e007      	b.n	20922 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   20912:	2a01      	cmp	r2, #1
   20914:	d007      	beq.n	20926 <bt_uuid_cmp+0x40>
   20916:	2a02      	cmp	r2, #2
   20918:	d008      	beq.n	2092c <bt_uuid_cmp+0x46>
   2091a:	b95a      	cbnz	r2, 20934 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2091c:	8840      	ldrh	r0, [r0, #2]
   2091e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   20920:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   20922:	b00a      	add	sp, #40	; 0x28
   20924:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   20926:	6840      	ldr	r0, [r0, #4]
   20928:	6863      	ldr	r3, [r4, #4]
   2092a:	e7f9      	b.n	20920 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2092c:	2210      	movs	r2, #16
   2092e:	1c61      	adds	r1, r4, #1
   20930:	3001      	adds	r0, #1
   20932:	e7eb      	b.n	2090c <bt_uuid_cmp+0x26>
	switch (u1->type) {
   20934:	f06f 0015 	mvn.w	r0, #21
   20938:	e7f3      	b.n	20922 <bt_uuid_cmp+0x3c>

0002093a <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2093a:	2a04      	cmp	r2, #4
{
   2093c:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   2093e:	d00d      	beq.n	2095c <bt_uuid_create+0x22>
   20940:	2a10      	cmp	r2, #16
   20942:	d019      	beq.n	20978 <bt_uuid_create+0x3e>
   20944:	2a02      	cmp	r2, #2
   20946:	f04f 0300 	mov.w	r3, #0
   2094a:	d121      	bne.n	20990 <bt_uuid_create+0x56>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2094c:	7003      	strb	r3, [r0, #0]
   2094e:	784a      	ldrb	r2, [r1, #1]
   20950:	780b      	ldrb	r3, [r1, #0]
   20952:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   20956:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   20958:	2001      	movs	r0, #1
}
   2095a:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   2095c:	2301      	movs	r3, #1
   2095e:	7003      	strb	r3, [r0, #0]
   20960:	788a      	ldrb	r2, [r1, #2]
   20962:	78cc      	ldrb	r4, [r1, #3]
   20964:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   20966:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   2096a:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2096c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   20970:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   20974:	6042      	str	r2, [r0, #4]
		break;
   20976:	e7ef      	b.n	20958 <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   20978:	2302      	movs	r3, #2
   2097a:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2097e:	f101 0310 	add.w	r3, r1, #16
   20982:	f851 2b04 	ldr.w	r2, [r1], #4
   20986:	f840 2b04 	str.w	r2, [r0], #4
   2098a:	4299      	cmp	r1, r3
   2098c:	d1f9      	bne.n	20982 <bt_uuid_create+0x48>
   2098e:	e7e3      	b.n	20958 <bt_uuid_create+0x1e>
	switch (data_len) {
   20990:	4618      	mov	r0, r3
   20992:	e7e2      	b.n	2095a <bt_uuid_create+0x20>

00020994 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   20994:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   20996:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   20998:	2106      	movs	r1, #6
{
   2099a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2099c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   209a0:	f7f8 fc9e 	bl	192e0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   209a4:	b918      	cbnz	r0, 209ae <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   209a6:	79a3      	ldrb	r3, [r4, #6]
   209a8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   209ac:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   209ae:	bd10      	pop	{r4, pc}

000209b0 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   209b0:	280f      	cmp	r0, #15
   209b2:	d806      	bhi.n	209c2 <bt_hci_evt_get_flags+0x12>
   209b4:	280d      	cmp	r0, #13
   209b6:	d80b      	bhi.n	209d0 <bt_hci_evt_get_flags+0x20>
   209b8:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   209ba:	bf14      	ite	ne
   209bc:	2002      	movne	r0, #2
   209be:	2003      	moveq	r0, #3
   209c0:	4770      	bx	lr
	switch (evt) {
   209c2:	2813      	cmp	r0, #19
   209c4:	d004      	beq.n	209d0 <bt_hci_evt_get_flags+0x20>
   209c6:	281a      	cmp	r0, #26
   209c8:	bf14      	ite	ne
   209ca:	2002      	movne	r0, #2
   209cc:	2001      	moveq	r0, #1
   209ce:	4770      	bx	lr
   209d0:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   209d2:	4770      	bx	lr

000209d4 <handle_event>:
{
   209d4:	b410      	push	{r4}
   209d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   209da:	4604      	mov	r4, r0
   209dc:	4608      	mov	r0, r1
		if (handler->event != event) {
   209de:	7811      	ldrb	r1, [r2, #0]
   209e0:	42a1      	cmp	r1, r4
   209e2:	d004      	beq.n	209ee <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   209e4:	3208      	adds	r2, #8
   209e6:	429a      	cmp	r2, r3
   209e8:	d1f9      	bne.n	209de <handle_event+0xa>
}
   209ea:	bc10      	pop	{r4}
   209ec:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   209ee:	8981      	ldrh	r1, [r0, #12]
   209f0:	7853      	ldrb	r3, [r2, #1]
   209f2:	4299      	cmp	r1, r3
   209f4:	d3f9      	bcc.n	209ea <handle_event+0x16>
		handler->handler(buf);
   209f6:	6853      	ldr	r3, [r2, #4]
}
   209f8:	bc10      	pop	{r4}
		handler->handler(buf);
   209fa:	4718      	bx	r3

000209fc <hci_data_buf_overflow>:
}
   209fc:	4770      	bx	lr

000209fe <le_data_len_change>:
{
   209fe:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   20a00:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   20a02:	8818      	ldrh	r0, [r3, #0]
   20a04:	f7f4 f93a 	bl	14c7c <bt_conn_lookup_handle>
	if (!conn) {
   20a08:	b118      	cbz	r0, 20a12 <le_data_len_change+0x14>
}
   20a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   20a0e:	f7f4 b90b 	b.w	14c28 <bt_conn_unref>
}
   20a12:	bd08      	pop	{r3, pc}

00020a14 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   20a14:	2101      	movs	r1, #1
   20a16:	3008      	adds	r0, #8
   20a18:	f7f6 be44 	b.w	176a4 <net_buf_simple_pull_mem>

00020a1c <bt_addr_le_copy>:
   20a1c:	680b      	ldr	r3, [r1, #0]
   20a1e:	6003      	str	r3, [r0, #0]
   20a20:	888b      	ldrh	r3, [r1, #4]
   20a22:	8083      	strh	r3, [r0, #4]
   20a24:	798b      	ldrb	r3, [r1, #6]
   20a26:	7183      	strb	r3, [r0, #6]
}
   20a28:	4770      	bx	lr

00020a2a <bt_addr_copy>:
   20a2a:	680b      	ldr	r3, [r1, #0]
   20a2c:	6003      	str	r3, [r0, #0]
   20a2e:	888b      	ldrh	r3, [r1, #4]
   20a30:	8083      	strh	r3, [r0, #4]
}
   20a32:	4770      	bx	lr

00020a34 <hci_vendor_event>:
   20a34:	4770      	bx	lr

00020a36 <hci_num_completed_packets>:
{
   20a36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   20a3a:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   20a3c:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   20a3e:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   20a40:	783b      	ldrb	r3, [r7, #0]
   20a42:	429d      	cmp	r5, r3
   20a44:	db01      	blt.n	20a4a <hci_num_completed_packets+0x14>
}
   20a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   20a4a:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   20a4e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   20a52:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   20a56:	f7f4 f911 	bl	14c7c <bt_conn_lookup_handle>
		if (!conn) {
   20a5a:	4604      	mov	r4, r0
   20a5c:	b350      	cbz	r0, 20ab4 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   20a5e:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   20a62:	b326      	cbz	r6, 20aae <hci_num_completed_packets+0x78>
	__asm__ volatile(
   20a64:	f04f 0340 	mov.w	r3, #64	; 0x40
   20a68:	f3ef 8211 	mrs	r2, BASEPRI
   20a6c:	f383 8812 	msr	BASEPRI_MAX, r3
   20a70:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   20a74:	69e3      	ldr	r3, [r4, #28]
   20a76:	b16b      	cbz	r3, 20a94 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   20a78:	3b01      	subs	r3, #1
   20a7a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   20a7c:	f382 8811 	msr	BASEPRI, r2
   20a80:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   20a84:	4620      	mov	r0, r4
   20a86:	f7f3 ffdb 	bl	14a40 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   20a8a:	3e01      	subs	r6, #1
   20a8c:	f7f9 fef6 	bl	1a87c <z_impl_k_sem_give>
   20a90:	b2b6      	uxth	r6, r6
   20a92:	e7e6      	b.n	20a62 <hci_num_completed_packets+0x2c>
Z_GENLIST_IS_EMPTY(slist)
   20a94:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   20a96:	b12b      	cbz	r3, 20aa4 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20a98:	69a1      	ldr	r1, [r4, #24]
   20a9a:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   20a9c:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20a9e:	428b      	cmp	r3, r1
	list->tail = node;
   20aa0:	bf08      	it	eq
   20aa2:	61a0      	streq	r0, [r4, #24]
   20aa4:	f382 8811 	msr	BASEPRI, r2
   20aa8:	f3bf 8f6f 	isb	sy
			if (!node) {
   20aac:	b923      	cbnz	r3, 20ab8 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   20aae:	4620      	mov	r0, r4
   20ab0:	f7f4 f8ba 	bl	14c28 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   20ab4:	3501      	adds	r5, #1
   20ab6:	e7c3      	b.n	20a40 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   20ab8:	f04f 0240 	mov.w	r2, #64	; 0x40
   20abc:	f3ef 8111 	mrs	r1, BASEPRI
   20ac0:	f382 8812 	msr	BASEPRI_MAX, r2
   20ac4:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   20ac8:	68da      	ldr	r2, [r3, #12]
   20aca:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   20acc:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   20ad0:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   20ad2:	f8c3 800c 	str.w	r8, [r3, #12]
   20ad6:	b94a      	cbnz	r2, 20aec <hci_num_completed_packets+0xb6>
	list->head = node;
   20ad8:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   20adc:	f381 8811 	msr	BASEPRI, r1
   20ae0:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   20ae4:	4648      	mov	r0, r9
   20ae6:	f7fa fa29 	bl	1af3c <k_work_submit>
   20aea:	e7cb      	b.n	20a84 <hci_num_completed_packets+0x4e>
	parent->next = child;
   20aec:	6013      	str	r3, [r2, #0]
	list->tail = node;
   20aee:	6263      	str	r3, [r4, #36]	; 0x24
}
   20af0:	e7f4      	b.n	20adc <hci_num_completed_packets+0xa6>

00020af2 <hci_disconn_complete>:
{
   20af2:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   20af4:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   20af6:	7835      	ldrb	r5, [r6, #0]
   20af8:	bb0d      	cbnz	r5, 20b3e <hci_disconn_complete+0x4c>
	conn = bt_conn_lookup_handle(handle);
   20afa:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   20afe:	f7f4 f8bd 	bl	14c7c <bt_conn_lookup_handle>
	if (!conn) {
   20b02:	4604      	mov	r4, r0
   20b04:	b1d8      	cbz	r0, 20b3e <hci_disconn_complete+0x4c>
	conn->err = evt->reason;
   20b06:	78f3      	ldrb	r3, [r6, #3]
   20b08:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   20b0a:	4629      	mov	r1, r5
   20b0c:	f7f4 f8c2 	bl	14c94 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   20b10:	78a3      	ldrb	r3, [r4, #2]
   20b12:	2b01      	cmp	r3, #1
   20b14:	d004      	beq.n	20b20 <hci_disconn_complete+0x2e>
	bt_conn_unref(conn);
   20b16:	4620      	mov	r0, r4
}
   20b18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   20b1c:	f7f4 b884 	b.w	14c28 <bt_conn_unref>
   20b20:	f3bf 8f5b 	dmb	ish
   20b24:	6863      	ldr	r3, [r4, #4]
   20b26:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   20b2a:	07db      	lsls	r3, r3, #31
   20b2c:	d5f3      	bpl.n	20b16 <hci_disconn_complete+0x24>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   20b2e:	4620      	mov	r0, r4
   20b30:	2102      	movs	r1, #2
   20b32:	f7f4 f8af 	bl	14c94 <bt_conn_set_state>
		bt_le_scan_update(false);
   20b36:	4628      	mov	r0, r5
   20b38:	f7f3 fcc0 	bl	144bc <bt_le_scan_update>
   20b3c:	e7eb      	b.n	20b16 <hci_disconn_complete+0x24>
}
   20b3e:	bd70      	pop	{r4, r5, r6, pc}

00020b40 <le_conn_update_complete>:
{
   20b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   20b42:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   20b44:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   20b48:	f7f4 f898 	bl	14c7c <bt_conn_lookup_handle>
	if (!conn) {
   20b4c:	4604      	mov	r4, r0
   20b4e:	b1c0      	cbz	r0, 20b82 <le_conn_update_complete+0x42>
	if (!evt->status) {
   20b50:	782b      	ldrb	r3, [r5, #0]
   20b52:	b9c3      	cbnz	r3, 20b86 <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   20b54:	792a      	ldrb	r2, [r5, #4]
   20b56:	78eb      	ldrb	r3, [r5, #3]
   20b58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   20b5c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   20b60:	79aa      	ldrb	r2, [r5, #6]
   20b62:	796b      	ldrb	r3, [r5, #5]
   20b64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   20b68:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   20b6c:	79eb      	ldrb	r3, [r5, #7]
   20b6e:	7a2a      	ldrb	r2, [r5, #8]
   20b70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   20b74:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   20b78:	f7f4 f9a8 	bl	14ecc <notify_le_param_updated>
	bt_conn_unref(conn);
   20b7c:	4620      	mov	r0, r4
   20b7e:	f7f4 f853 	bl	14c28 <bt_conn_unref>
}
   20b82:	b003      	add	sp, #12
   20b84:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   20b86:	2b1a      	cmp	r3, #26
   20b88:	d1f8      	bne.n	20b7c <le_conn_update_complete+0x3c>
   20b8a:	78c3      	ldrb	r3, [r0, #3]
   20b8c:	2b01      	cmp	r3, #1
   20b8e:	d1f5      	bne.n	20b7c <le_conn_update_complete+0x3c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20b90:	f3bf 8f5b 	dmb	ish
   20b94:	1d03      	adds	r3, r0, #4
   20b96:	e853 2f00 	ldrex	r2, [r3]
   20b9a:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   20b9e:	e843 1500 	strex	r5, r1, [r3]
   20ba2:	2d00      	cmp	r5, #0
   20ba4:	d1f7      	bne.n	20b96 <le_conn_update_complete+0x56>
   20ba6:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   20baa:	0553      	lsls	r3, r2, #21
   20bac:	d4e6      	bmi.n	20b7c <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   20bae:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   20bb2:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   20bb4:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   20bb6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   20bba:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   20bbc:	f7f4 fd3e 	bl	1563c <bt_l2cap_update_conn_param>
   20bc0:	e7dc      	b.n	20b7c <le_conn_update_complete+0x3c>

00020bc2 <hci_le_read_max_data_len>:
{
   20bc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20bc4:	4606      	mov	r6, r0
   20bc6:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   20bc8:	aa01      	add	r2, sp, #4
   20bca:	2100      	movs	r1, #0
   20bcc:	f242 002f 	movw	r0, #8239	; 0x202f
   20bd0:	f7f2 fc7c 	bl	134cc <bt_hci_cmd_send_sync>
	if (err) {
   20bd4:	4604      	mov	r4, r0
   20bd6:	b948      	cbnz	r0, 20bec <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   20bd8:	9801      	ldr	r0, [sp, #4]
   20bda:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   20bdc:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   20be0:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   20be2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   20be6:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   20be8:	f7f6 fc4e 	bl	17488 <net_buf_unref>
}
   20bec:	4620      	mov	r0, r4
   20bee:	b002      	add	sp, #8
   20bf0:	bd70      	pop	{r4, r5, r6, pc}

00020bf2 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   20bf2:	f7f2 be8f 	b.w	13914 <bt_le_create_conn_legacy>

00020bf6 <bt_hci_disconnect>:
{
   20bf6:	b570      	push	{r4, r5, r6, lr}
   20bf8:	4606      	mov	r6, r0
   20bfa:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   20bfc:	f240 4006 	movw	r0, #1030	; 0x406
   20c00:	2103      	movs	r1, #3
   20c02:	f7f2 fc1b 	bl	1343c <bt_hci_cmd_create>
	if (!buf) {
   20c06:	4604      	mov	r4, r0
   20c08:	b168      	cbz	r0, 20c26 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   20c0a:	2103      	movs	r1, #3
   20c0c:	3008      	adds	r0, #8
   20c0e:	f7f6 fd6b 	bl	176e8 <net_buf_simple_add>
	disconn->reason = reason;
   20c12:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   20c14:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   20c16:	4621      	mov	r1, r4
   20c18:	2200      	movs	r2, #0
}
   20c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   20c1e:	f240 4006 	movw	r0, #1030	; 0x406
   20c22:	f7f2 bc53 	b.w	134cc <bt_hci_cmd_send_sync>
}
   20c26:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20c2a:	bd70      	pop	{r4, r5, r6, pc}

00020c2c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   20c2c:	8802      	ldrh	r2, [r0, #0]
   20c2e:	8843      	ldrh	r3, [r0, #2]
   20c30:	429a      	cmp	r2, r3
{
   20c32:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   20c34:	d818      	bhi.n	20c68 <bt_le_conn_params_valid+0x3c>
   20c36:	2a05      	cmp	r2, #5
   20c38:	d916      	bls.n	20c68 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   20c3a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   20c3e:	d813      	bhi.n	20c68 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   20c40:	8884      	ldrh	r4, [r0, #4]
   20c42:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   20c46:	d20f      	bcs.n	20c68 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   20c48:	88c1      	ldrh	r1, [r0, #6]
   20c4a:	f1a1 020a 	sub.w	r2, r1, #10
   20c4e:	b292      	uxth	r2, r2
   20c50:	f640 4076 	movw	r0, #3190	; 0xc76
   20c54:	4282      	cmp	r2, r0
   20c56:	d807      	bhi.n	20c68 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   20c58:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   20c5c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   20c60:	bf34      	ite	cc
   20c62:	2001      	movcc	r0, #1
   20c64:	2000      	movcs	r0, #0
}
   20c66:	bd10      	pop	{r4, pc}
		return false;
   20c68:	2000      	movs	r0, #0
   20c6a:	e7fc      	b.n	20c66 <bt_le_conn_params_valid+0x3a>

00020c6c <bt_le_set_data_len>:
{
   20c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20c6e:	4607      	mov	r7, r0
   20c70:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   20c72:	f242 0022 	movw	r0, #8226	; 0x2022
   20c76:	2106      	movs	r1, #6
{
   20c78:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   20c7a:	f7f2 fbdf 	bl	1343c <bt_hci_cmd_create>
	if (!buf) {
   20c7e:	4604      	mov	r4, r0
   20c80:	b170      	cbz	r0, 20ca0 <bt_le_set_data_len+0x34>
   20c82:	2106      	movs	r1, #6
   20c84:	3008      	adds	r0, #8
   20c86:	f7f6 fd2f 	bl	176e8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20c8a:	883b      	ldrh	r3, [r7, #0]
   20c8c:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   20c8e:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   20c90:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   20c92:	4621      	mov	r1, r4
   20c94:	f242 0022 	movw	r0, #8226	; 0x2022
}
   20c98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   20c9c:	f7f2 bec2 	b.w	13a24 <bt_hci_cmd_send>
}
   20ca0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020ca6 <bt_le_set_phy>:
{
   20ca6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20caa:	4680      	mov	r8, r0
   20cac:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20cae:	f242 0032 	movw	r0, #8242	; 0x2032
   20cb2:	2107      	movs	r1, #7
{
   20cb4:	f89d 9020 	ldrb.w	r9, [sp, #32]
   20cb8:	4616      	mov	r6, r2
   20cba:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20cbc:	f7f2 fbbe 	bl	1343c <bt_hci_cmd_create>
	if (!buf) {
   20cc0:	4604      	mov	r4, r0
   20cc2:	b190      	cbz	r0, 20cea <bt_le_set_phy+0x44>
   20cc4:	2107      	movs	r1, #7
   20cc6:	3008      	adds	r0, #8
   20cc8:	f7f6 fd0e 	bl	176e8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20ccc:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   20cd0:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   20cd2:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   20cd4:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   20cd6:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   20cd8:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20cdc:	4621      	mov	r1, r4
   20cde:	f242 0032 	movw	r0, #8242	; 0x2032
}
   20ce2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20ce6:	f7f2 be9d 	b.w	13a24 <bt_hci_cmd_send>
}
   20cea:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020cf2 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   20cf2:	6880      	ldr	r0, [r0, #8]
   20cf4:	f7f2 bf1e 	b.w	13b34 <bt_hci_le_enh_conn_complete>

00020cf8 <le_legacy_conn_complete>:
{
   20cf8:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   20cfa:	6881      	ldr	r1, [r0, #8]
{
   20cfc:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   20cfe:	780b      	ldrb	r3, [r1, #0]
   20d00:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   20d04:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   20d08:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   20d0c:	78cb      	ldrb	r3, [r1, #3]
   20d0e:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   20d12:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   20d16:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   20d1a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   20d1e:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   20d22:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   20d26:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   20d2a:	7c4b      	ldrb	r3, [r1, #17]
   20d2c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   20d30:	a803      	add	r0, sp, #12
   20d32:	3104      	adds	r1, #4
   20d34:	f7ff fe72 	bl	20a1c <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   20d38:	2200      	movs	r2, #0
   20d3a:	4669      	mov	r1, sp
   20d3c:	f10d 0013 	add.w	r0, sp, #19
   20d40:	9200      	str	r2, [sp, #0]
   20d42:	f8ad 2004 	strh.w	r2, [sp, #4]
   20d46:	f7ff fe70 	bl	20a2a <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   20d4a:	4669      	mov	r1, sp
   20d4c:	f10d 0019 	add.w	r0, sp, #25
   20d50:	9200      	str	r2, [sp, #0]
   20d52:	f8ad 2004 	strh.w	r2, [sp, #4]
   20d56:	f7ff fe68 	bl	20a2a <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   20d5a:	a802      	add	r0, sp, #8
   20d5c:	f7f2 feea 	bl	13b34 <bt_hci_le_enh_conn_complete>
}
   20d60:	b00b      	add	sp, #44	; 0x2c
   20d62:	f85d fb04 	ldr.w	pc, [sp], #4

00020d66 <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   20d66:	6883      	ldr	r3, [r0, #8]
{
   20d68:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_handle(handle);
   20d6a:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   20d6e:	f7f3 ff85 	bl	14c7c <bt_conn_lookup_handle>
	if (!conn) {
   20d72:	4604      	mov	r4, r0
   20d74:	b310      	cbz	r0, 20dbc <le_phy_update_complete+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20d76:	f3bf 8f5b 	dmb	ish
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   20d7a:	1d03      	adds	r3, r0, #4
   20d7c:	e853 2f00 	ldrex	r2, [r3]
   20d80:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   20d84:	e843 1c00 	strex	ip, r1, [r3]
   20d88:	f1bc 0f00 	cmp.w	ip, #0
   20d8c:	d1f6      	bne.n	20d7c <le_phy_update_complete+0x16>
   20d8e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   20d92:	0612      	lsls	r2, r2, #24
   20d94:	d50d      	bpl.n	20db2 <le_phy_update_complete+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20d96:	f3bf 8f5b 	dmb	ish
   20d9a:	e853 2f00 	ldrex	r2, [r3]
   20d9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   20da2:	e843 2100 	strex	r1, r2, [r3]
   20da6:	2900      	cmp	r1, #0
   20da8:	d1f7      	bne.n	20d9a <le_phy_update_complete+0x34>
   20daa:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   20dae:	f7f2 fe5b 	bl	13a68 <conn_auto_initiate>
	bt_conn_unref(conn);
   20db2:	4620      	mov	r0, r4
}
   20db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   20db8:	f7f3 bf36 	b.w	14c28 <bt_conn_unref>
}
   20dbc:	bd10      	pop	{r4, pc}

00020dbe <le_remote_feat_complete>:
{
   20dbe:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   20dc0:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   20dc2:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   20dc6:	f7f3 ff59 	bl	14c7c <bt_conn_lookup_handle>
	if (!conn) {
   20dca:	4604      	mov	r4, r0
   20dcc:	b1e8      	cbz	r0, 20e0a <le_remote_feat_complete+0x4c>
	if (!evt->status) {
   20dce:	782b      	ldrb	r3, [r5, #0]
   20dd0:	b933      	cbnz	r3, 20de0 <le_remote_feat_complete+0x22>
   20dd2:	f855 3f03 	ldr.w	r3, [r5, #3]!
   20dd6:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
   20dda:	686b      	ldr	r3, [r5, #4]
   20ddc:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
   20de0:	1d23      	adds	r3, r4, #4
   20de2:	f3bf 8f5b 	dmb	ish
   20de6:	e853 2f00 	ldrex	r2, [r3]
   20dea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   20dee:	e843 2100 	strex	r1, r2, [r3]
   20df2:	2900      	cmp	r1, #0
   20df4:	d1f7      	bne.n	20de6 <le_remote_feat_complete+0x28>
   20df6:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   20dfa:	4620      	mov	r0, r4
   20dfc:	f7f2 fe34 	bl	13a68 <conn_auto_initiate>
	bt_conn_unref(conn);
   20e00:	4620      	mov	r0, r4
}
   20e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   20e06:	f7f3 bf0f 	b.w	14c28 <bt_conn_unref>
}
   20e0a:	bd38      	pop	{r3, r4, r5, pc}

00020e0c <le_conn_param_neg_reply>:
{
   20e0c:	b570      	push	{r4, r5, r6, lr}
   20e0e:	4606      	mov	r6, r0
   20e10:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   20e12:	f242 0021 	movw	r0, #8225	; 0x2021
   20e16:	2103      	movs	r1, #3
   20e18:	f7f2 fb10 	bl	1343c <bt_hci_cmd_create>
	if (!buf) {
   20e1c:	4604      	mov	r4, r0
   20e1e:	b160      	cbz	r0, 20e3a <le_conn_param_neg_reply+0x2e>
   20e20:	2103      	movs	r1, #3
   20e22:	3008      	adds	r0, #8
   20e24:	f7f6 fc60 	bl	176e8 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   20e28:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   20e2a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   20e2c:	4621      	mov	r1, r4
   20e2e:	f242 0021 	movw	r0, #8225	; 0x2021
}
   20e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   20e36:	f7f2 bdf5 	b.w	13a24 <bt_hci_cmd_send>
}
   20e3a:	bd70      	pop	{r4, r5, r6, pc}

00020e3c <le_conn_param_req>:
{
   20e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   20e3e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   20e40:	78d9      	ldrb	r1, [r3, #3]
   20e42:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   20e44:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   20e46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20e4a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   20e4e:	7959      	ldrb	r1, [r3, #5]
   20e50:	791a      	ldrb	r2, [r3, #4]
   20e52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20e56:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   20e5a:	799a      	ldrb	r2, [r3, #6]
   20e5c:	79d9      	ldrb	r1, [r3, #7]
   20e5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20e62:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20e66:	7a1a      	ldrb	r2, [r3, #8]
   20e68:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   20e6a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20e6c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   20e70:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20e72:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   20e76:	f7f3 ff01 	bl	14c7c <bt_conn_lookup_handle>
	if (!conn) {
   20e7a:	4606      	mov	r6, r0
   20e7c:	b928      	cbnz	r0, 20e8a <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   20e7e:	2102      	movs	r1, #2
   20e80:	4620      	mov	r0, r4
   20e82:	f7ff ffc3 	bl	20e0c <le_conn_param_neg_reply>
}
   20e86:	b003      	add	sp, #12
   20e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   20e8a:	4669      	mov	r1, sp
   20e8c:	f7f4 f886 	bl	14f9c <le_param_req>
   20e90:	b938      	cbnz	r0, 20ea2 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   20e92:	211e      	movs	r1, #30
   20e94:	4620      	mov	r0, r4
   20e96:	f7ff ffb9 	bl	20e0c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   20e9a:	4630      	mov	r0, r6
   20e9c:	f7f3 fec4 	bl	14c28 <bt_conn_unref>
   20ea0:	e7f1      	b.n	20e86 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   20ea2:	210e      	movs	r1, #14
   20ea4:	f242 0020 	movw	r0, #8224	; 0x2020
   20ea8:	f7f2 fac8 	bl	1343c <bt_hci_cmd_create>
	if (!buf) {
   20eac:	4605      	mov	r5, r0
   20eae:	2800      	cmp	r0, #0
   20eb0:	d0f3      	beq.n	20e9a <le_conn_param_req+0x5e>
   20eb2:	210e      	movs	r1, #14
   20eb4:	3008      	adds	r0, #8
   20eb6:	f7f6 fc17 	bl	176e8 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   20eba:	220e      	movs	r2, #14
   20ebc:	4604      	mov	r4, r0
   20ebe:	2100      	movs	r1, #0
   20ec0:	f001 fef3 	bl	22caa <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   20ec4:	f8bd 3000 	ldrh.w	r3, [sp]
   20ec8:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   20eca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   20ece:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   20ed0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   20ed4:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   20ed6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   20eda:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   20edc:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   20ede:	4629      	mov	r1, r5
   20ee0:	f242 0020 	movw	r0, #8224	; 0x2020
   20ee4:	f7f2 fd9e 	bl	13a24 <bt_hci_cmd_send>
   20ee8:	e7d7      	b.n	20e9a <le_conn_param_req+0x5e>

00020eea <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   20eea:	2000      	movs	r0, #0
   20eec:	4770      	bx	lr

00020eee <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   20eee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20ef0:	4604      	mov	r4, r0
   20ef2:	460e      	mov	r6, r1
   20ef4:	4617      	mov	r7, r2
	while (ad->len > 1) {
   20ef6:	88a3      	ldrh	r3, [r4, #4]
   20ef8:	2b01      	cmp	r3, #1
   20efa:	d801      	bhi.n	20f00 <bt_data_parse+0x12>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   20efc:	b003      	add	sp, #12
   20efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
   20f00:	4620      	mov	r0, r4
   20f02:	f001 fb8c 	bl	2261e <net_buf_simple_pull_u8>
		if (len == 0U) {
   20f06:	4605      	mov	r5, r0
   20f08:	2800      	cmp	r0, #0
   20f0a:	d0f7      	beq.n	20efc <bt_data_parse+0xe>
		if (len > ad->len) {
   20f0c:	88a2      	ldrh	r2, [r4, #4]
   20f0e:	b283      	uxth	r3, r0
   20f10:	429a      	cmp	r2, r3
   20f12:	d3f3      	bcc.n	20efc <bt_data_parse+0xe>
		data.type = net_buf_simple_pull_u8(ad);
   20f14:	4620      	mov	r0, r4
   20f16:	f001 fb82 	bl	2261e <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   20f1a:	3d01      	subs	r5, #1
		data.data = ad->data;
   20f1c:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   20f1e:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
   20f22:	4639      	mov	r1, r7
   20f24:	4668      	mov	r0, sp
		data.data_len = len - 1;
   20f26:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   20f2a:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   20f2c:	47b0      	blx	r6
   20f2e:	2800      	cmp	r0, #0
   20f30:	d0e4      	beq.n	20efc <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
   20f32:	4629      	mov	r1, r5
   20f34:	4620      	mov	r0, r4
   20f36:	f7f6 fb95 	bl	17664 <net_buf_simple_pull>
   20f3a:	e7dc      	b.n	20ef6 <bt_data_parse+0x8>

00020f3c <bt_addr_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20f3c:	680b      	ldr	r3, [r1, #0]
   20f3e:	6003      	str	r3, [r0, #0]
   20f40:	888b      	ldrh	r3, [r1, #4]
   20f42:	8083      	strh	r3, [r0, #4]
   20f44:	4770      	bx	lr

00020f46 <bt_addr_le_copy>:
   20f46:	680b      	ldr	r3, [r1, #0]
   20f48:	6003      	str	r3, [r0, #0]
   20f4a:	888b      	ldrh	r3, [r1, #4]
   20f4c:	8083      	strh	r3, [r0, #4]
   20f4e:	798b      	ldrb	r3, [r1, #6]
   20f50:	7183      	strb	r3, [r0, #6]
}
   20f52:	4770      	bx	lr

00020f54 <bt_lookup_id_addr>:
}
   20f54:	4608      	mov	r0, r1
   20f56:	4770      	bx	lr

00020f58 <bt_id_set_private_addr>:
{
   20f58:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   20f5a:	2106      	movs	r1, #6
   20f5c:	4668      	mov	r0, sp
   20f5e:	f7f8 f9bf 	bl	192e0 <bt_rand>
	if (err) {
   20f62:	b940      	cbnz	r0, 20f76 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   20f64:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   20f68:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   20f6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   20f6e:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   20f72:	f7f3 f88b 	bl	1408c <set_random_address>
}
   20f76:	b003      	add	sp, #12
   20f78:	f85d fb04 	ldr.w	pc, [sp], #4

00020f7c <bt_id_scan_random_addr_check>:
}
   20f7c:	2001      	movs	r0, #1
   20f7e:	4770      	bx	lr

00020f80 <atomic_and>:
{
   20f80:	4603      	mov	r3, r0
}
   20f82:	f3bf 8f5b 	dmb	ish
   20f86:	e853 0f00 	ldrex	r0, [r3]
   20f8a:	ea00 0201 	and.w	r2, r0, r1
   20f8e:	e843 2c00 	strex	ip, r2, [r3]
   20f92:	f1bc 0f00 	cmp.w	ip, #0
   20f96:	d1f6      	bne.n	20f86 <atomic_and+0x6>
   20f98:	f3bf 8f5b 	dmb	ish
   20f9c:	4770      	bx	lr

00020f9e <bt_addr_le_copy>:
   20f9e:	680b      	ldr	r3, [r1, #0]
   20fa0:	6003      	str	r3, [r0, #0]
   20fa2:	888b      	ldrh	r3, [r1, #4]
   20fa4:	8083      	strh	r3, [r0, #4]
   20fa6:	798b      	ldrb	r3, [r1, #6]
   20fa8:	7183      	strb	r3, [r0, #6]
   20faa:	4770      	bx	lr

00020fac <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20fac:	f3bf 8f5b 	dmb	ish
   20fb0:	6800      	ldr	r0, [r0, #0]
   20fb2:	f3bf 8f5b 	dmb	ish
}
   20fb6:	4770      	bx	lr

00020fb8 <bt_addr_le_copy>:
   20fb8:	680b      	ldr	r3, [r1, #0]
   20fba:	6003      	str	r3, [r0, #0]
   20fbc:	888b      	ldrh	r3, [r1, #4]
   20fbe:	8083      	strh	r3, [r0, #4]
   20fc0:	798b      	ldrb	r3, [r1, #6]
   20fc2:	7183      	strb	r3, [r0, #6]
   20fc4:	4770      	bx	lr

00020fc6 <tx_notify>:
{
   20fc6:	b570      	push	{r4, r5, r6, lr}
   20fc8:	4604      	mov	r4, r0
	__asm__ volatile(
   20fca:	f04f 0240 	mov.w	r2, #64	; 0x40
   20fce:	f3ef 8311 	mrs	r3, BASEPRI
   20fd2:	f382 8812 	msr	BASEPRI_MAX, r2
   20fd6:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   20fda:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   20fdc:	b920      	cbnz	r0, 20fe8 <tx_notify+0x22>
	__asm__ volatile(
   20fde:	f383 8811 	msr	BASEPRI, r3
   20fe2:	f3bf 8f6f 	isb	sy
}
   20fe6:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20fe8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   20fea:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   20fec:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20fee:	4288      	cmp	r0, r1
	list->tail = node;
   20ff0:	bf08      	it	eq
   20ff2:	6262      	streq	r2, [r4, #36]	; 0x24
   20ff4:	f383 8811 	msr	BASEPRI, r3
   20ff8:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   20ffc:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   21000:	f7f3 fc32 	bl	14868 <tx_free>
		cb(conn, user_data);
   21004:	4631      	mov	r1, r6
   21006:	4620      	mov	r0, r4
   21008:	47a8      	blx	r5
	while (1) {
   2100a:	e7de      	b.n	20fca <tx_notify+0x4>

0002100c <tx_complete_work>:
	tx_notify(conn);
   2100c:	3828      	subs	r0, #40	; 0x28
   2100e:	f7ff bfda 	b.w	20fc6 <tx_notify>

00021012 <bt_conn_reset_rx_state>:
{
   21012:	b510      	push	{r4, lr}
   21014:	4604      	mov	r4, r0
	if (!conn->rx) {
   21016:	6900      	ldr	r0, [r0, #16]
   21018:	b118      	cbz	r0, 21022 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2101a:	f7f6 fa35 	bl	17488 <net_buf_unref>
	conn->rx = NULL;
   2101e:	2300      	movs	r3, #0
   21020:	6123      	str	r3, [r4, #16]
}
   21022:	bd10      	pop	{r4, pc}

00021024 <bt_conn_recv>:
{
   21024:	b570      	push	{r4, r5, r6, lr}
   21026:	4616      	mov	r6, r2
   21028:	4604      	mov	r4, r0
   2102a:	460d      	mov	r5, r1
	tx_notify(conn);
   2102c:	f7ff ffcb 	bl	20fc6 <tx_notify>
	switch (flags) {
   21030:	2e01      	cmp	r6, #1
   21032:	d01a      	beq.n	2106a <bt_conn_recv+0x46>
   21034:	2e02      	cmp	r6, #2
   21036:	d11a      	bne.n	2106e <bt_conn_recv+0x4a>
		if (conn->rx) {
   21038:	6923      	ldr	r3, [r4, #16]
   2103a:	b113      	cbz	r3, 21042 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   2103c:	4620      	mov	r0, r4
   2103e:	f7ff ffe8 	bl	21012 <bt_conn_reset_rx_state>
		conn->rx = buf;
   21042:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   21044:	6921      	ldr	r1, [r4, #16]
   21046:	898a      	ldrh	r2, [r1, #12]
   21048:	2a01      	cmp	r2, #1
   2104a:	d93a      	bls.n	210c2 <bt_conn_recv+0x9e>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   2104c:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   2104e:	7845      	ldrb	r5, [r0, #1]
   21050:	7803      	ldrb	r3, [r0, #0]
   21052:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   21056:	3304      	adds	r3, #4
   21058:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   2105a:	429a      	cmp	r2, r3
   2105c:	d331      	bcc.n	210c2 <bt_conn_recv+0x9e>
	if (conn->rx->len > acl_total_len) {
   2105e:	d928      	bls.n	210b2 <bt_conn_recv+0x8e>
		bt_conn_reset_rx_state(conn);
   21060:	4620      	mov	r0, r4
}
   21062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   21066:	f7ff bfd4 	b.w	21012 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   2106a:	6920      	ldr	r0, [r4, #16]
   2106c:	b918      	cbnz	r0, 21076 <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   2106e:	4620      	mov	r0, r4
   21070:	f7ff ffcf 	bl	21012 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   21074:	e001      	b.n	2107a <bt_conn_recv+0x56>
		if (!buf->len) {
   21076:	89ae      	ldrh	r6, [r5, #12]
   21078:	b926      	cbnz	r6, 21084 <bt_conn_recv+0x60>
			net_buf_unref(buf);
   2107a:	4628      	mov	r0, r5
}
   2107c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   21080:	f7f6 ba02 	b.w	17488 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   21084:	3008      	adds	r0, #8
   21086:	f001 fade 	bl	22646 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   2108a:	4286      	cmp	r6, r0
   2108c:	d907      	bls.n	2109e <bt_conn_recv+0x7a>
			bt_l2cap_recv(conn, conn->rx, false);
   2108e:	6921      	ldr	r1, [r4, #16]
   21090:	2200      	movs	r2, #0
   21092:	4620      	mov	r0, r4
   21094:	f000 f9e4 	bl	21460 <bt_l2cap_recv>
			conn->rx = NULL;
   21098:	2300      	movs	r3, #0
   2109a:	6123      	str	r3, [r4, #16]
   2109c:	e7ed      	b.n	2107a <bt_conn_recv+0x56>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2109e:	6920      	ldr	r0, [r4, #16]
   210a0:	89aa      	ldrh	r2, [r5, #12]
   210a2:	68a9      	ldr	r1, [r5, #8]
   210a4:	3008      	adds	r0, #8
   210a6:	f001 fad6 	bl	22656 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   210aa:	4628      	mov	r0, r5
   210ac:	f7f6 f9ec 	bl	17488 <net_buf_unref>
		break;
   210b0:	e7c8      	b.n	21044 <bt_conn_recv+0x20>
	conn->rx = NULL;
   210b2:	2300      	movs	r3, #0
   210b4:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   210b6:	4620      	mov	r0, r4
   210b8:	2201      	movs	r2, #1
}
   210ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   210be:	f000 b9cf 	b.w	21460 <bt_l2cap_recv>
}
   210c2:	bd70      	pop	{r4, r5, r6, pc}

000210c4 <bt_conn_ref>:
{
   210c4:	b510      	push	{r4, lr}
   210c6:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   210c8:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   210cc:	4610      	mov	r0, r2
   210ce:	f7ff ff6d 	bl	20fac <atomic_get>
		if (!old) {
   210d2:	b180      	cbz	r0, 210f6 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   210d4:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   210d8:	1c41      	adds	r1, r0, #1
   210da:	e852 4f00 	ldrex	r4, [r2]
   210de:	4284      	cmp	r4, r0
   210e0:	d104      	bne.n	210ec <bt_conn_ref+0x28>
   210e2:	e842 1c00 	strex	ip, r1, [r2]
   210e6:	f1bc 0f00 	cmp.w	ip, #0
   210ea:	d1f6      	bne.n	210da <bt_conn_ref+0x16>
   210ec:	f3bf 8f5b 	dmb	ish
   210f0:	d1ec      	bne.n	210cc <bt_conn_ref+0x8>
}
   210f2:	4618      	mov	r0, r3
   210f4:	bd10      	pop	{r4, pc}
			return NULL;
   210f6:	4603      	mov	r3, r0
   210f8:	e7fb      	b.n	210f2 <bt_conn_ref+0x2e>

000210fa <conn_lookup_handle>:
{
   210fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   210fe:	4607      	mov	r7, r0
   21100:	460e      	mov	r6, r1
   21102:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   21104:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   21106:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2110a:	42b4      	cmp	r4, r6
   2110c:	d103      	bne.n	21116 <conn_lookup_handle+0x1c>
	return NULL;
   2110e:	2300      	movs	r3, #0
}
   21110:	4618      	mov	r0, r3
   21112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   21116:	fb09 7004 	mla	r0, r9, r4, r7
   2111a:	f7ff ffd3 	bl	210c4 <bt_conn_ref>
   2111e:	4603      	mov	r3, r0
		if (!conn) {
   21120:	b158      	cbz	r0, 2113a <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   21122:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   21124:	2d01      	cmp	r5, #1
   21126:	d002      	beq.n	2112e <conn_lookup_handle+0x34>
   21128:	3d07      	subs	r5, #7
   2112a:	2d01      	cmp	r5, #1
   2112c:	d803      	bhi.n	21136 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2112e:	881a      	ldrh	r2, [r3, #0]
   21130:	4542      	cmp	r2, r8
   21132:	d0ed      	beq.n	21110 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   21134:	4618      	mov	r0, r3
   21136:	f7f3 fd77 	bl	14c28 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2113a:	3401      	adds	r4, #1
   2113c:	e7e5      	b.n	2110a <conn_lookup_handle+0x10>

0002113e <bt_conn_connected>:
{
   2113e:	b510      	push	{r4, lr}
   21140:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   21142:	f7f4 fa05 	bl	15550 <bt_l2cap_connected>
	notify_connected(conn);
   21146:	4620      	mov	r0, r4
}
   21148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2114c:	f7f3 bb96 	b.w	1487c <notify_connected>

00021150 <bt_conn_get_security>:
}
   21150:	2001      	movs	r0, #1
   21152:	4770      	bx	lr

00021154 <bt_conn_is_peer_addr_le>:
{
   21154:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   21156:	7a03      	ldrb	r3, [r0, #8]
   21158:	428b      	cmp	r3, r1
{
   2115a:	4604      	mov	r4, r0
   2115c:	4615      	mov	r5, r2
	if (id != conn->id) {
   2115e:	d115      	bne.n	2118c <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   21160:	f100 0190 	add.w	r1, r0, #144	; 0x90
   21164:	2207      	movs	r2, #7
   21166:	4628      	mov	r0, r5
   21168:	f001 fd69 	bl	22c3e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2116c:	b180      	cbz	r0, 21190 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2116e:	78e3      	ldrb	r3, [r4, #3]
   21170:	2207      	movs	r2, #7
   21172:	b943      	cbnz	r3, 21186 <bt_conn_is_peer_addr_le+0x32>
   21174:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   21178:	4628      	mov	r0, r5
   2117a:	f001 fd60 	bl	22c3e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2117e:	fab0 f080 	clz	r0, r0
   21182:	0940      	lsrs	r0, r0, #5
}
   21184:	bd38      	pop	{r3, r4, r5, pc}
   21186:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2118a:	e7f5      	b.n	21178 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2118c:	2000      	movs	r0, #0
   2118e:	e7f9      	b.n	21184 <bt_conn_is_peer_addr_le+0x30>
		return true;
   21190:	2001      	movs	r0, #1
   21192:	e7f7      	b.n	21184 <bt_conn_is_peer_addr_le+0x30>

00021194 <bt_conn_exists_le>:
{
   21194:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   21196:	f7f3 ff79 	bl	1508c <bt_conn_lookup_addr_le>
	if (conn) {
   2119a:	b110      	cbz	r0, 211a2 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   2119c:	f7f3 fd44 	bl	14c28 <bt_conn_unref>
		return true;
   211a0:	2001      	movs	r0, #1
}
   211a2:	bd08      	pop	{r3, pc}

000211a4 <bt_conn_get_dst>:
}
   211a4:	3090      	adds	r0, #144	; 0x90
   211a6:	4770      	bx	lr

000211a8 <bt_conn_le_conn_update>:
{
   211a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   211aa:	4607      	mov	r7, r0
   211ac:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   211ae:	f242 0013 	movw	r0, #8211	; 0x2013
   211b2:	210e      	movs	r1, #14
   211b4:	f7f2 f942 	bl	1343c <bt_hci_cmd_create>
	if (!buf) {
   211b8:	4606      	mov	r6, r0
   211ba:	b1d0      	cbz	r0, 211f2 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   211bc:	210e      	movs	r1, #14
   211be:	3008      	adds	r0, #8
   211c0:	f7f6 fa92 	bl	176e8 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   211c4:	220e      	movs	r2, #14
   211c6:	4604      	mov	r4, r0
   211c8:	2100      	movs	r1, #0
   211ca:	f001 fd6e 	bl	22caa <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   211ce:	883b      	ldrh	r3, [r7, #0]
   211d0:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   211d2:	882b      	ldrh	r3, [r5, #0]
   211d4:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   211d6:	886b      	ldrh	r3, [r5, #2]
   211d8:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   211da:	88ab      	ldrh	r3, [r5, #4]
   211dc:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   211de:	88eb      	ldrh	r3, [r5, #6]
   211e0:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   211e2:	4631      	mov	r1, r6
   211e4:	2200      	movs	r2, #0
}
   211e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   211ea:	f242 0013 	movw	r0, #8211	; 0x2013
   211ee:	f7f2 b96d 	b.w	134cc <bt_hci_cmd_send_sync>
}
   211f2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   211f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000211f8 <l2cap_connected>:
}
   211f8:	4770      	bx	lr

000211fa <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   211fa:	3010      	adds	r0, #16
   211fc:	f7fa b840 	b.w	1b280 <k_work_cancel_delayable>

00021200 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   21200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21202:	4607      	mov	r7, r0
   21204:	460e      	mov	r6, r1
   21206:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   21208:	2300      	movs	r3, #0
   2120a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2120e:	2104      	movs	r1, #4
   21210:	2000      	movs	r0, #0
   21212:	f7f3 fe2f 	bl	14e74 <bt_conn_create_pdu_timeout>
	if (!buf) {
   21216:	4604      	mov	r4, r0
   21218:	b130      	cbz	r0, 21228 <l2cap_create_le_sig_pdu.isra.0+0x28>
   2121a:	2104      	movs	r1, #4
   2121c:	3008      	adds	r0, #8
   2121e:	f7f6 fa63 	bl	176e8 <net_buf_simple_add>
	hdr->code = code;
   21222:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   21224:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   21226:	8045      	strh	r5, [r0, #2]
}
   21228:	4620      	mov	r0, r4
   2122a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002122c <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2122c:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   2122e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21230:	b17b      	cbz	r3, 21252 <bt_l2cap_chan_remove+0x26>
   21232:	3b08      	subs	r3, #8
   21234:	2200      	movs	r2, #0
   21236:	b163      	cbz	r3, 21252 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   21238:	428b      	cmp	r3, r1
   2123a:	f103 0408 	add.w	r4, r3, #8
   2123e:	d10f      	bne.n	21260 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   21240:	688b      	ldr	r3, [r1, #8]
   21242:	b93a      	cbnz	r2, 21254 <bt_l2cap_chan_remove+0x28>
   21244:	6d82      	ldr	r2, [r0, #88]	; 0x58
	list->head = node;
   21246:	6543      	str	r3, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   21248:	4294      	cmp	r4, r2
   2124a:	d100      	bne.n	2124e <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   2124c:	6583      	str	r3, [r0, #88]	; 0x58
	parent->next = child;
   2124e:	2300      	movs	r3, #0
   21250:	608b      	str	r3, [r1, #8]
}
   21252:	bd10      	pop	{r4, pc}
   21254:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   21256:	6d83      	ldr	r3, [r0, #88]	; 0x58
   21258:	429c      	cmp	r4, r3
	list->tail = node;
   2125a:	bf08      	it	eq
   2125c:	6582      	streq	r2, [r0, #88]	; 0x58
}
   2125e:	e7f6      	b.n	2124e <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21260:	2c00      	cmp	r4, #0
   21262:	d0f6      	beq.n	21252 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21264:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21266:	2b00      	cmp	r3, #0
   21268:	d0f3      	beq.n	21252 <bt_l2cap_chan_remove+0x26>
   2126a:	3b08      	subs	r3, #8
   2126c:	4622      	mov	r2, r4
   2126e:	e7e2      	b.n	21236 <bt_l2cap_chan_remove+0xa>

00021270 <bt_l2cap_chan_del>:
{
   21270:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   21272:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   21276:	4604      	mov	r4, r0
	if (!chan->conn) {
   21278:	b123      	cbz	r3, 21284 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2127a:	686b      	ldr	r3, [r5, #4]
   2127c:	b103      	cbz	r3, 21280 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2127e:	4798      	blx	r3
	chan->conn = NULL;
   21280:	2300      	movs	r3, #0
   21282:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   21284:	68e3      	ldr	r3, [r4, #12]
   21286:	b10b      	cbz	r3, 2128c <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   21288:	4620      	mov	r0, r4
   2128a:	4798      	blx	r3
	if (ops->released) {
   2128c:	69eb      	ldr	r3, [r5, #28]
   2128e:	b11b      	cbz	r3, 21298 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   21290:	4620      	mov	r0, r4
}
   21292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   21296:	4718      	bx	r3
}
   21298:	bd70      	pop	{r4, r5, r6, pc}

0002129a <l2cap_rtx_timeout>:
{
   2129a:	b508      	push	{r3, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   2129c:	f1a0 0110 	sub.w	r1, r0, #16
   212a0:	f850 0c10 	ldr.w	r0, [r0, #-16]
   212a4:	f7ff ffc2 	bl	2122c <bt_l2cap_chan_remove>
}
   212a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_l2cap_chan_del(&chan->chan);
   212ac:	4608      	mov	r0, r1
   212ae:	f7ff bfdf 	b.w	21270 <bt_l2cap_chan_del>

000212b2 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   212b2:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   212b4:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   212b6:	b18b      	cbz	r3, 212dc <bt_l2cap_disconnected+0x2a>
   212b8:	f1b3 0008 	subs.w	r0, r3, #8
   212bc:	d00e      	beq.n	212dc <bt_l2cap_disconnected+0x2a>
   212be:	681c      	ldr	r4, [r3, #0]
   212c0:	b104      	cbz	r4, 212c4 <bt_l2cap_disconnected+0x12>
   212c2:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   212c4:	f7ff ffd4 	bl	21270 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   212c8:	b144      	cbz	r4, 212dc <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   212ca:	f114 0308 	adds.w	r3, r4, #8
   212ce:	d002      	beq.n	212d6 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   212d0:	68a3      	ldr	r3, [r4, #8]
   212d2:	b103      	cbz	r3, 212d6 <bt_l2cap_disconnected+0x24>
   212d4:	3b08      	subs	r3, #8
{
   212d6:	4620      	mov	r0, r4
   212d8:	461c      	mov	r4, r3
   212da:	e7f3      	b.n	212c4 <bt_l2cap_disconnected+0x12>
}
   212dc:	bd10      	pop	{r4, pc}

000212de <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   212de:	3104      	adds	r1, #4
   212e0:	f7f3 bdc8 	b.w	14e74 <bt_conn_create_pdu_timeout>

000212e4 <bt_l2cap_send_cb>:
{
   212e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   212e8:	4614      	mov	r4, r2
   212ea:	4605      	mov	r5, r0
   212ec:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   212ee:	f102 0008 	add.w	r0, r2, #8
   212f2:	2104      	movs	r1, #4
   212f4:	461e      	mov	r6, r3
   212f6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   212fa:	f7f6 f991 	bl	17620 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   212fe:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   21300:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   21302:	3a04      	subs	r2, #4
   21304:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   21306:	4643      	mov	r3, r8
   21308:	4632      	mov	r2, r6
   2130a:	4621      	mov	r1, r4
   2130c:	4628      	mov	r0, r5
}
   2130e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   21312:	f7f3 bc15 	b.w	14b40 <bt_conn_send_cb>

00021316 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   21316:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21318:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2131a:	2202      	movs	r2, #2
   2131c:	2001      	movs	r0, #1
   2131e:	f7ff ff6f 	bl	21200 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   21322:	4604      	mov	r4, r0
   21324:	b198      	cbz	r0, 2134e <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   21326:	2102      	movs	r1, #2
   21328:	3008      	adds	r0, #8
   2132a:	f7f6 f9dd 	bl	176e8 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2132e:	2300      	movs	r3, #0
   21330:	7003      	strb	r3, [r0, #0]
   21332:	7043      	strb	r3, [r0, #1]
   21334:	4622      	mov	r2, r4
   21336:	9300      	str	r3, [sp, #0]
   21338:	2105      	movs	r1, #5
   2133a:	4628      	mov	r0, r5
   2133c:	f7ff ffd2 	bl	212e4 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   21340:	b128      	cbz	r0, 2134e <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   21342:	4620      	mov	r0, r4
}
   21344:	b003      	add	sp, #12
   21346:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2134a:	f7f6 b89d 	b.w	17488 <net_buf_unref>
}
   2134e:	b003      	add	sp, #12
   21350:	bd30      	pop	{r4, r5, pc}

00021352 <l2cap_recv>:
{
   21352:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   21354:	898b      	ldrh	r3, [r1, #12]
   21356:	2b03      	cmp	r3, #3
{
   21358:	b085      	sub	sp, #20
   2135a:	4605      	mov	r5, r0
   2135c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   2135e:	d911      	bls.n	21384 <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   21360:	2104      	movs	r1, #4
   21362:	f104 0008 	add.w	r0, r4, #8
   21366:	f7f6 f99d 	bl	176a4 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   2136a:	89a3      	ldrh	r3, [r4, #12]
   2136c:	8842      	ldrh	r2, [r0, #2]
   2136e:	429a      	cmp	r2, r3
   21370:	d108      	bne.n	21384 <l2cap_recv+0x32>
	if (!hdr->ident) {
   21372:	7841      	ldrb	r1, [r0, #1]
   21374:	b131      	cbz	r1, 21384 <l2cap_recv+0x32>
	switch (hdr->code) {
   21376:	7803      	ldrb	r3, [r0, #0]
   21378:	2b12      	cmp	r3, #18
   2137a:	d006      	beq.n	2138a <l2cap_recv+0x38>
   2137c:	2b13      	cmp	r3, #19
   2137e:	d001      	beq.n	21384 <l2cap_recv+0x32>
   21380:	2b01      	cmp	r3, #1
   21382:	d14b      	bne.n	2141c <l2cap_recv+0xca>
}
   21384:	2000      	movs	r0, #0
   21386:	b005      	add	sp, #20
   21388:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
   2138a:	2a07      	cmp	r2, #7
   2138c:	d9fa      	bls.n	21384 <l2cap_recv+0x32>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   2138e:	682d      	ldr	r5, [r5, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   21390:	78ef      	ldrb	r7, [r5, #3]
   21392:	b11f      	cbz	r7, 2139c <l2cap_recv+0x4a>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   21394:	4628      	mov	r0, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   21396:	f7ff ffbe 	bl	21316 <l2cap_send_reject.constprop.0>
		break;
   2139a:	e7f3      	b.n	21384 <l2cap_recv+0x32>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   2139c:	68a2      	ldr	r2, [r4, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   2139e:	7850      	ldrb	r0, [r2, #1]
   213a0:	7813      	ldrb	r3, [r2, #0]
   213a2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   213a6:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   213aa:	78d0      	ldrb	r0, [r2, #3]
   213ac:	7893      	ldrb	r3, [r2, #2]
   213ae:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   213b2:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   213b6:	7950      	ldrb	r0, [r2, #5]
   213b8:	7913      	ldrb	r3, [r2, #4]
   213ba:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   213be:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   213c2:	7993      	ldrb	r3, [r2, #6]
   213c4:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   213c6:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   213c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   213cc:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   213ce:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   213d2:	f7ff ff15 	bl	21200 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   213d6:	4604      	mov	r4, r0
   213d8:	2800      	cmp	r0, #0
   213da:	d0d3      	beq.n	21384 <l2cap_recv+0x32>
	accepted = le_param_req(conn, &param);
   213dc:	a902      	add	r1, sp, #8
   213de:	4628      	mov	r0, r5
   213e0:	f7f3 fddc 	bl	14f9c <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   213e4:	2102      	movs	r1, #2
   213e6:	4606      	mov	r6, r0
   213e8:	f104 0008 	add.w	r0, r4, #8
   213ec:	f7f6 f97c 	bl	176e8 <net_buf_simple_add>
	if (accepted) {
   213f0:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   213f4:	b2db      	uxtb	r3, r3
   213f6:	8003      	strh	r3, [r0, #0]
   213f8:	4622      	mov	r2, r4
   213fa:	9700      	str	r7, [sp, #0]
   213fc:	463b      	mov	r3, r7
   213fe:	2105      	movs	r1, #5
   21400:	4628      	mov	r0, r5
   21402:	f7ff ff6f 	bl	212e4 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   21406:	b110      	cbz	r0, 2140e <l2cap_recv+0xbc>
		net_buf_unref(buf);
   21408:	4620      	mov	r0, r4
   2140a:	f7f6 f83d 	bl	17488 <net_buf_unref>
	if (accepted) {
   2140e:	2e00      	cmp	r6, #0
   21410:	d0b8      	beq.n	21384 <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
   21412:	a902      	add	r1, sp, #8
   21414:	4628      	mov	r0, r5
   21416:	f7ff fec7 	bl	211a8 <bt_conn_le_conn_update>
   2141a:	e7b3      	b.n	21384 <l2cap_recv+0x32>
		l2cap_send_reject(chan->conn, hdr->ident,
   2141c:	6828      	ldr	r0, [r5, #0]
   2141e:	e7ba      	b.n	21396 <l2cap_recv+0x44>

00021420 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21420:	6d40      	ldr	r0, [r0, #84]	; 0x54
   21422:	b160      	cbz	r0, 2143e <bt_l2cap_le_lookup_tx_cid+0x1e>
   21424:	3808      	subs	r0, #8
   21426:	b900      	cbnz	r0, 2142a <bt_l2cap_le_lookup_tx_cid+0xa>
   21428:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2142a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   2142e:	428b      	cmp	r3, r1
   21430:	d005      	beq.n	2143e <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21432:	f110 0308 	adds.w	r3, r0, #8
   21436:	d001      	beq.n	2143c <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21438:	6880      	ldr	r0, [r0, #8]
   2143a:	e7f2      	b.n	21422 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   2143c:	4618      	mov	r0, r3
}
   2143e:	4770      	bx	lr

00021440 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21440:	6d40      	ldr	r0, [r0, #84]	; 0x54
   21442:	b160      	cbz	r0, 2145e <bt_l2cap_le_lookup_rx_cid+0x1e>
   21444:	3808      	subs	r0, #8
   21446:	b900      	cbnz	r0, 2144a <bt_l2cap_le_lookup_rx_cid+0xa>
   21448:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2144a:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   2144e:	428b      	cmp	r3, r1
   21450:	d005      	beq.n	2145e <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21452:	f110 0308 	adds.w	r3, r0, #8
   21456:	d001      	beq.n	2145c <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21458:	6880      	ldr	r0, [r0, #8]
   2145a:	e7f2      	b.n	21442 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   2145c:	4618      	mov	r0, r3
}
   2145e:	4770      	bx	lr

00021460 <bt_l2cap_recv>:
{
   21460:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   21462:	898b      	ldrh	r3, [r1, #12]
   21464:	2b03      	cmp	r3, #3
{
   21466:	4605      	mov	r5, r0
   21468:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   2146a:	d804      	bhi.n	21476 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   2146c:	4620      	mov	r0, r4
}
   2146e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   21472:	f7f6 b809 	b.w	17488 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   21476:	2104      	movs	r1, #4
   21478:	f104 0008 	add.w	r0, r4, #8
   2147c:	f7f6 f912 	bl	176a4 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   21480:	8841      	ldrh	r1, [r0, #2]
   21482:	4628      	mov	r0, r5
   21484:	f7ff ffdc 	bl	21440 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   21488:	2800      	cmp	r0, #0
   2148a:	d0ef      	beq.n	2146c <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   2148c:	6843      	ldr	r3, [r0, #4]
   2148e:	4621      	mov	r1, r4
   21490:	691b      	ldr	r3, [r3, #16]
   21492:	4798      	blx	r3
   21494:	e7ea      	b.n	2146c <bt_l2cap_recv+0xc>

00021496 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   21496:	4770      	bx	lr

00021498 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   21498:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   2149a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2149c:	b128      	cbz	r0, 214aa <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2149e:	6859      	ldr	r1, [r3, #4]
   214a0:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   214a2:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   214a4:	4288      	cmp	r0, r1
	list->tail = node;
   214a6:	bf08      	it	eq
   214a8:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   214aa:	4770      	bx	lr

000214ac <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   214ac:	4603      	mov	r3, r0
   214ae:	6800      	ldr	r0, [r0, #0]
   214b0:	2200      	movs	r2, #0
   214b2:	b900      	cbnz	r0, 214b6 <sys_slist_find_and_remove+0xa>
   214b4:	4770      	bx	lr
   214b6:	4288      	cmp	r0, r1
   214b8:	d110      	bne.n	214dc <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   214ba:	6808      	ldr	r0, [r1, #0]
   214bc:	b942      	cbnz	r2, 214d0 <sys_slist_find_and_remove+0x24>
   214be:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   214c0:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   214c2:	4291      	cmp	r1, r2
   214c4:	d100      	bne.n	214c8 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   214c6:	6058      	str	r0, [r3, #4]
	parent->next = child;
   214c8:	2300      	movs	r3, #0
   214ca:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   214cc:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   214ce:	4770      	bx	lr
	parent->next = child;
   214d0:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   214d2:	6858      	ldr	r0, [r3, #4]
   214d4:	4281      	cmp	r1, r0
	list->tail = node;
   214d6:	bf08      	it	eq
   214d8:	605a      	streq	r2, [r3, #4]
}
   214da:	e7f5      	b.n	214c8 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   214dc:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   214de:	6800      	ldr	r0, [r0, #0]
   214e0:	e7e7      	b.n	214b2 <sys_slist_find_and_remove+0x6>

000214e2 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   214e2:	4603      	mov	r3, r0
	size_t bytes = 0;
   214e4:	2000      	movs	r0, #0

	while (buf) {
   214e6:	b903      	cbnz	r3, 214ea <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   214e8:	4770      	bx	lr
		bytes += buf->len;
   214ea:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   214ec:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   214ee:	4410      	add	r0, r2
		buf = buf->frags;
   214f0:	e7f9      	b.n	214e6 <net_buf_frags_len+0x4>

000214f2 <att_sent>:
	if (chan->ops->sent) {
   214f2:	684b      	ldr	r3, [r1, #4]
   214f4:	695b      	ldr	r3, [r3, #20]
{
   214f6:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   214f8:	b103      	cbz	r3, 214fc <att_sent+0xa>
		chan->ops->sent(chan);
   214fa:	4718      	bx	r3
}
   214fc:	4770      	bx	lr

000214fe <attr_read_type_cb>:
{
   214fe:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   21500:	68d4      	ldr	r4, [r2, #12]
   21502:	7823      	ldrb	r3, [r4, #0]
   21504:	3102      	adds	r1, #2
   21506:	b913      	cbnz	r3, 2150e <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   21508:	7021      	strb	r1, [r4, #0]
	return true;
   2150a:	2001      	movs	r0, #1
   2150c:	e006      	b.n	2151c <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2150e:	428b      	cmp	r3, r1
   21510:	d0fb      	beq.n	2150a <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   21512:	8983      	ldrh	r3, [r0, #12]
   21514:	3b02      	subs	r3, #2
   21516:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   21518:	2000      	movs	r0, #0
   2151a:	6110      	str	r0, [r2, #16]
}
   2151c:	bd10      	pop	{r4, pc}

0002151e <att_prepare_write_req>:
}
   2151e:	2006      	movs	r0, #6
   21520:	4770      	bx	lr

00021522 <att_op_get_type>:
	switch (op) {
   21522:	281e      	cmp	r0, #30
   21524:	d816      	bhi.n	21554 <att_op_get_type+0x32>
   21526:	b308      	cbz	r0, 2156c <att_op_get_type+0x4a>
   21528:	1e43      	subs	r3, r0, #1
   2152a:	2b1d      	cmp	r3, #29
   2152c:	d81e      	bhi.n	2156c <att_op_get_type+0x4a>
   2152e:	e8df f003 	tbb	[pc, r3]
   21532:	2317      	.short	0x2317
   21534:	23172317 	.word	0x23172317
   21538:	23172317 	.word	0x23172317
   2153c:	23172317 	.word	0x23172317
   21540:	23172317 	.word	0x23172317
   21544:	231d1d17 	.word	0x231d1d17
   21548:	1d172317 	.word	0x1d172317
   2154c:	0f1b1d19 	.word	0x0f1b1d19
   21550:	2004      	movs	r0, #4
   21552:	4770      	bx	lr
   21554:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   21558:	2b52      	cmp	r3, #82	; 0x52
   2155a:	d107      	bne.n	2156c <att_op_get_type+0x4a>
		return ATT_COMMAND;
   2155c:	2000      	movs	r0, #0
}
   2155e:	4770      	bx	lr
		return ATT_RESPONSE;
   21560:	2002      	movs	r0, #2
   21562:	4770      	bx	lr
		return ATT_NOTIFICATION;
   21564:	2003      	movs	r0, #3
   21566:	4770      	bx	lr
		return ATT_INDICATION;
   21568:	2005      	movs	r0, #5
   2156a:	4770      	bx	lr
		return ATT_COMMAND;
   2156c:	f010 0f40 	tst.w	r0, #64	; 0x40
   21570:	bf0c      	ite	eq
   21572:	2006      	moveq	r0, #6
   21574:	2000      	movne	r0, #0
   21576:	4770      	bx	lr
		return ATT_REQUEST;
   21578:	2001      	movs	r0, #1
   2157a:	4770      	bx	lr

0002157c <att_notify_mult>:
{
   2157c:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   2157e:	6803      	ldr	r3, [r0, #0]
   21580:	898a      	ldrh	r2, [r1, #12]
   21582:	6818      	ldr	r0, [r3, #0]
   21584:	6889      	ldr	r1, [r1, #8]
   21586:	f000 ff97 	bl	224b8 <bt_gatt_mult_notification>
}
   2158a:	2000      	movs	r0, #0
   2158c:	bd08      	pop	{r3, pc}

0002158e <att_notify>:
{
   2158e:	b538      	push	{r3, r4, r5, lr}
   21590:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   21592:	f101 0008 	add.w	r0, r1, #8
   21596:	460c      	mov	r4, r1
   21598:	f001 f849 	bl	2262e <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2159c:	682d      	ldr	r5, [r5, #0]
   2159e:	89a3      	ldrh	r3, [r4, #12]
   215a0:	68a2      	ldr	r2, [r4, #8]
   215a2:	4601      	mov	r1, r0
   215a4:	6828      	ldr	r0, [r5, #0]
   215a6:	f000 ff5c 	bl	22462 <bt_gatt_notification>
}
   215aa:	2000      	movs	r0, #0
   215ac:	bd38      	pop	{r3, r4, r5, pc}

000215ae <att_chan_mtu_updated>:
{
   215ae:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   215b0:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   215b2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   215b4:	b30a      	cbz	r2, 215fa <att_chan_mtu_updated+0x4c>
   215b6:	f5b2 74aa 	subs.w	r4, r2, #340	; 0x154
   215ba:	d01d      	beq.n	215f8 <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   215bc:	6813      	ldr	r3, [r2, #0]
   215be:	b10b      	cbz	r3, 215c4 <att_chan_mtu_updated+0x16>
   215c0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   215c4:	2200      	movs	r2, #0
   215c6:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   215c8:	42a0      	cmp	r0, r4
   215ca:	d009      	beq.n	215e0 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   215cc:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   215d0:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   215d4:	42a9      	cmp	r1, r5
   215d6:	bf38      	it	cc
   215d8:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   215da:	42a2      	cmp	r2, r4
   215dc:	bf38      	it	cc
   215de:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   215e0:	b163      	cbz	r3, 215fc <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   215e2:	f513 75aa 	adds.w	r5, r3, #340	; 0x154
   215e6:	d004      	beq.n	215f2 <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   215e8:	f8d3 5154 	ldr.w	r5, [r3, #340]	; 0x154
   215ec:	b10d      	cbz	r5, 215f2 <att_chan_mtu_updated+0x44>
   215ee:	f5a5 75aa 	sub.w	r5, r5, #340	; 0x154
{
   215f2:	461c      	mov	r4, r3
   215f4:	462b      	mov	r3, r5
   215f6:	e7e7      	b.n	215c8 <att_chan_mtu_updated+0x1a>
   215f8:	4622      	mov	r2, r4
   215fa:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   215fc:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   21600:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   21604:	428b      	cmp	r3, r1
   21606:	d801      	bhi.n	2160c <att_chan_mtu_updated+0x5e>
   21608:	4290      	cmp	r0, r2
   2160a:	d909      	bls.n	21620 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2160c:	4282      	cmp	r2, r0
   2160e:	bf38      	it	cc
   21610:	4602      	movcc	r2, r0
   21612:	4299      	cmp	r1, r3
   21614:	6830      	ldr	r0, [r6, #0]
   21616:	bf38      	it	cc
   21618:	4619      	movcc	r1, r3
}
   2161a:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2161c:	f7f5 bcda 	b.w	16fd4 <bt_gatt_att_max_mtu_changed>
}
   21620:	bc70      	pop	{r4, r5, r6}
   21622:	4770      	bx	lr

00021624 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   21624:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   21626:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2162a:	2300      	movs	r3, #0
   2162c:	9300      	str	r3, [sp, #0]
   2162e:	461a      	mov	r2, r3
   21630:	f7f5 f940 	bl	168b4 <bt_gatt_foreach_attr_type>
				  user_data);
}
   21634:	b005      	add	sp, #20
   21636:	f85d fb04 	ldr.w	pc, [sp], #4

0002163a <att_chan_read>:
{
   2163a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2163e:	4680      	mov	r8, r0
   21640:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21642:	4610      	mov	r0, r2
{
   21644:	4699      	mov	r9, r3
   21646:	468b      	mov	fp, r1
   21648:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2164a:	f7ff ff4a 	bl	214e2 <net_buf_frags_len>
   2164e:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   21652:	4283      	cmp	r3, r0
   21654:	d97a      	bls.n	2174c <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   21656:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2165a:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2165c:	4630      	mov	r0, r6
   2165e:	f7f5 ff73 	bl	17548 <net_buf_frag_last>
	size_t len, total = 0;
   21662:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   21666:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   21668:	4630      	mov	r0, r6
   2166a:	f7ff ff3a 	bl	214e2 <net_buf_frags_len>
   2166e:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   21672:	f105 0708 	add.w	r7, r5, #8
   21676:	1a24      	subs	r4, r4, r0
   21678:	4638      	mov	r0, r7
   2167a:	f000 ffe4 	bl	22646 <net_buf_simple_tailroom>
   2167e:	4284      	cmp	r4, r0
   21680:	d211      	bcs.n	216a6 <att_chan_read+0x6c>
   21682:	4630      	mov	r0, r6
   21684:	f7ff ff2d 	bl	214e2 <net_buf_frags_len>
   21688:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2168c:	1a24      	subs	r4, r4, r0
		if (!len) {
   2168e:	bb34      	cbnz	r4, 216de <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   21690:	79b0      	ldrb	r0, [r6, #6]
   21692:	f7f5 fd59 	bl	17148 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   21696:	2200      	movs	r2, #0
   21698:	2300      	movs	r3, #0
   2169a:	f000 ffb5 	bl	22608 <net_buf_alloc_fixed>
			if (!frag) {
   2169e:	4605      	mov	r5, r0
   216a0:	b930      	cbnz	r0, 216b0 <att_chan_read+0x76>
	return total;
   216a2:	4657      	mov	r7, sl
   216a4:	e02c      	b.n	21700 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   216a6:	4638      	mov	r0, r7
   216a8:	f000 ffcd 	bl	22646 <net_buf_simple_tailroom>
   216ac:	4604      	mov	r4, r0
   216ae:	e7ee      	b.n	2168e <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   216b0:	4601      	mov	r1, r0
   216b2:	4630      	mov	r0, r6
   216b4:	f7f5 ff90 	bl	175d8 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   216b8:	4630      	mov	r0, r6
   216ba:	f7ff ff12 	bl	214e2 <net_buf_frags_len>
   216be:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   216c2:	f105 0708 	add.w	r7, r5, #8
   216c6:	1a24      	subs	r4, r4, r0
   216c8:	4638      	mov	r0, r7
   216ca:	f000 ffbc 	bl	22646 <net_buf_simple_tailroom>
   216ce:	4284      	cmp	r4, r0
   216d0:	d21a      	bcs.n	21708 <att_chan_read+0xce>
   216d2:	4630      	mov	r0, r6
   216d4:	f7ff ff05 	bl	214e2 <net_buf_frags_len>
   216d8:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   216dc:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   216de:	68a9      	ldr	r1, [r5, #8]
   216e0:	89aa      	ldrh	r2, [r5, #12]
   216e2:	f8db 7004 	ldr.w	r7, [fp, #4]
   216e6:	9803      	ldr	r0, [sp, #12]
   216e8:	f8cd 9000 	str.w	r9, [sp]
   216ec:	440a      	add	r2, r1
   216ee:	b2a3      	uxth	r3, r4
   216f0:	4659      	mov	r1, fp
   216f2:	47b8      	blx	r7
		if (read < 0) {
   216f4:	1e07      	subs	r7, r0, #0
   216f6:	da0c      	bge.n	21712 <att_chan_read+0xd8>
				return total;
   216f8:	f1ba 0f00 	cmp.w	sl, #0
   216fc:	bf18      	it	ne
   216fe:	4657      	movne	r7, sl
}
   21700:	4638      	mov	r0, r7
   21702:	b005      	add	sp, #20
   21704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21708:	4638      	mov	r0, r7
   2170a:	f000 ff9c 	bl	22646 <net_buf_simple_tailroom>
   2170e:	4604      	mov	r4, r0
   21710:	e7e5      	b.n	216de <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   21712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21714:	b993      	cbnz	r3, 2173c <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   21716:	4639      	mov	r1, r7
   21718:	f105 0008 	add.w	r0, r5, #8
   2171c:	f7f5 ffe4 	bl	176e8 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21720:	4630      	mov	r0, r6
   21722:	f7ff fede 	bl	214e2 <net_buf_frags_len>
   21726:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   2172a:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2172c:	4283      	cmp	r3, r0
		total += read;
   2172e:	44ba      	add	sl, r7
		offset += read;
   21730:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21734:	d9b5      	bls.n	216a2 <att_chan_read+0x68>
   21736:	42a7      	cmp	r7, r4
   21738:	d096      	beq.n	21668 <att_chan_read+0x2e>
   2173a:	e7b2      	b.n	216a2 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2173c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2173e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21740:	4639      	mov	r1, r7
   21742:	4628      	mov	r0, r5
   21744:	4798      	blx	r3
   21746:	2800      	cmp	r0, #0
   21748:	d1e5      	bne.n	21716 <att_chan_read+0xdc>
   2174a:	e7aa      	b.n	216a2 <att_chan_read+0x68>
		return 0;
   2174c:	2700      	movs	r7, #0
   2174e:	e7d7      	b.n	21700 <att_chan_read+0xc6>

00021750 <find_type_cb>:
{
   21750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   21754:	f8d2 9000 	ldr.w	r9, [r2]
{
   21758:	b091      	sub	sp, #68	; 0x44
   2175a:	4607      	mov	r7, r0
   2175c:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2175e:	2500      	movs	r5, #0
   21760:	f642 0301 	movw	r3, #10241	; 0x2801
   21764:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   21766:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2176a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   2176e:	a90b      	add	r1, sp, #44	; 0x2c
{
   21770:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   21772:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   21776:	f7ff f8b6 	bl	208e6 <bt_uuid_cmp>
   2177a:	2800      	cmp	r0, #0
   2177c:	d079      	beq.n	21872 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   2177e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   21782:	6838      	ldr	r0, [r7, #0]
   21784:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   21788:	a90b      	add	r1, sp, #44	; 0x2c
   2178a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   2178e:	f7ff f8aa 	bl	208e6 <bt_uuid_cmp>
   21792:	b138      	cbz	r0, 217a4 <find_type_cb+0x54>
		if (data->group &&
   21794:	68a3      	ldr	r3, [r4, #8]
   21796:	b11b      	cbz	r3, 217a0 <find_type_cb+0x50>
   21798:	885a      	ldrh	r2, [r3, #2]
   2179a:	42b2      	cmp	r2, r6
   2179c:	d200      	bcs.n	217a0 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   2179e:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   217a0:	2001      	movs	r0, #1
   217a2:	e009      	b.n	217b8 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   217a4:	6861      	ldr	r1, [r4, #4]
   217a6:	4608      	mov	r0, r1
   217a8:	f7ff fe9b 	bl	214e2 <net_buf_frags_len>
   217ac:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   217b0:	1a1b      	subs	r3, r3, r0
   217b2:	2b03      	cmp	r3, #3
   217b4:	d803      	bhi.n	217be <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   217b6:	2000      	movs	r0, #0
}
   217b8:	b011      	add	sp, #68	; 0x44
   217ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   217be:	4608      	mov	r0, r1
   217c0:	f7f5 fec2 	bl	17548 <net_buf_frag_last>
   217c4:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   217c6:	6860      	ldr	r0, [r4, #4]
   217c8:	f7ff fe8b 	bl	214e2 <net_buf_frags_len>
   217cc:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   217d0:	f105 0b08 	add.w	fp, r5, #8
   217d4:	ebaa 0a00 	sub.w	sl, sl, r0
   217d8:	4658      	mov	r0, fp
   217da:	f000 ff34 	bl	22646 <net_buf_simple_tailroom>
   217de:	4582      	cmp	sl, r0
   217e0:	d23f      	bcs.n	21862 <find_type_cb+0x112>
   217e2:	6860      	ldr	r0, [r4, #4]
   217e4:	f7ff fe7d 	bl	214e2 <net_buf_frags_len>
   217e8:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   217ec:	1a18      	subs	r0, r3, r0
	if (!len) {
   217ee:	b970      	cbnz	r0, 2180e <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   217f0:	6863      	ldr	r3, [r4, #4]
   217f2:	7998      	ldrb	r0, [r3, #6]
   217f4:	f7f5 fca8 	bl	17148 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   217f8:	2200      	movs	r2, #0
   217fa:	2300      	movs	r3, #0
   217fc:	f000 ff04 	bl	22608 <net_buf_alloc_fixed>
		if (!frag) {
   21800:	4605      	mov	r5, r0
   21802:	2800      	cmp	r0, #0
   21804:	d0d7      	beq.n	217b6 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   21806:	4601      	mov	r1, r0
   21808:	6860      	ldr	r0, [r4, #4]
   2180a:	f7f5 fee5 	bl	175d8 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   2180e:	2300      	movs	r3, #0
   21810:	9300      	str	r3, [sp, #0]
   21812:	f8d7 9004 	ldr.w	r9, [r7, #4]
   21816:	4639      	mov	r1, r7
   21818:	2310      	movs	r3, #16
   2181a:	aa02      	add	r2, sp, #8
   2181c:	4640      	mov	r0, r8
   2181e:	47c8      	blx	r9
	if (read < 0) {
   21820:	1e07      	subs	r7, r0, #0
   21822:	db26      	blt.n	21872 <find_type_cb+0x122>
	if (read != data->value_len) {
   21824:	7c22      	ldrb	r2, [r4, #16]
   21826:	68e0      	ldr	r0, [r4, #12]
   21828:	42ba      	cmp	r2, r7
   2182a:	d01e      	beq.n	2186a <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   2182c:	4601      	mov	r1, r0
   2182e:	a80b      	add	r0, sp, #44	; 0x2c
   21830:	f7ff f883 	bl	2093a <bt_uuid_create>
   21834:	b1e8      	cbz	r0, 21872 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   21836:	b2fa      	uxtb	r2, r7
   21838:	a902      	add	r1, sp, #8
   2183a:	a806      	add	r0, sp, #24
   2183c:	f7ff f87d 	bl	2093a <bt_uuid_create>
   21840:	b1b8      	cbz	r0, 21872 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   21842:	a906      	add	r1, sp, #24
   21844:	a80b      	add	r0, sp, #44	; 0x2c
   21846:	f7ff f84e 	bl	208e6 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   2184a:	b990      	cbnz	r0, 21872 <find_type_cb+0x122>
	data->err = 0x00;
   2184c:	2300      	movs	r3, #0
   2184e:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   21850:	2104      	movs	r1, #4
   21852:	f105 0008 	add.w	r0, r5, #8
   21856:	f7f5 ff47 	bl	176e8 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   2185a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   2185c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   2185e:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   21860:	e79e      	b.n	217a0 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   21862:	4658      	mov	r0, fp
   21864:	f000 feef 	bl	22646 <net_buf_simple_tailroom>
   21868:	e7c1      	b.n	217ee <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   2186a:	a902      	add	r1, sp, #8
   2186c:	f001 f9e7 	bl	22c3e <memcmp>
   21870:	e7eb      	b.n	2184a <find_type_cb+0xfa>
	data->group = NULL;
   21872:	2300      	movs	r3, #0
   21874:	60a3      	str	r3, [r4, #8]
   21876:	e793      	b.n	217a0 <find_type_cb+0x50>

00021878 <attr_read_group_cb>:
	if (!data->rsp->len) {
   21878:	68d0      	ldr	r0, [r2, #12]
   2187a:	7803      	ldrb	r3, [r0, #0]
   2187c:	3104      	adds	r1, #4
   2187e:	b913      	cbnz	r3, 21886 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   21880:	7001      	strb	r1, [r0, #0]
	return true;
   21882:	2001      	movs	r0, #1
}
   21884:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   21886:	428b      	cmp	r3, r1
   21888:	d0fb      	beq.n	21882 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2188a:	6891      	ldr	r1, [r2, #8]
   2188c:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   2188e:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   21890:	3b04      	subs	r3, #4
   21892:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   21894:	6110      	str	r0, [r2, #16]
		return false;
   21896:	4770      	bx	lr

00021898 <chan_req_send>:
{
   21898:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2189a:	688e      	ldr	r6, [r1, #8]
{
   2189c:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2189e:	4630      	mov	r0, r6
{
   218a0:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   218a2:	f7ff fe1e 	bl	214e2 <net_buf_frags_len>
   218a6:	f8b5 308a 	ldrh.w	r3, [r5, #138]	; 0x8a
   218aa:	4283      	cmp	r3, r0
   218ac:	d30a      	bcc.n	218c4 <chan_req_send+0x2c>
	req->buf = NULL;
   218ae:	2200      	movs	r2, #0
	chan->req = req;
   218b0:	f8c5 10fc 	str.w	r1, [r5, #252]	; 0xfc
	err = chan_send(chan, buf, NULL);
   218b4:	4628      	mov	r0, r5
	req->buf = NULL;
   218b6:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   218b8:	4631      	mov	r1, r6
   218ba:	f7f3 ffbf 	bl	1583c <chan_send>
	if (err) {
   218be:	b100      	cbz	r0, 218c2 <chan_req_send+0x2a>
		req->buf = buf;
   218c0:	60a6      	str	r6, [r4, #8]
}
   218c2:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   218c4:	f06f 0079 	mvn.w	r0, #121	; 0x79
   218c8:	e7fb      	b.n	218c2 <chan_req_send+0x2a>

000218ca <process_queue>:
{
   218ca:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   218cc:	2200      	movs	r2, #0
{
   218ce:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   218d0:	2300      	movs	r3, #0
   218d2:	4608      	mov	r0, r1
{
   218d4:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   218d6:	f7f5 fd45 	bl	17364 <net_buf_get>
	if (buf) {
   218da:	4605      	mov	r5, r0
   218dc:	b160      	cbz	r0, 218f8 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   218de:	4601      	mov	r1, r0
   218e0:	2200      	movs	r2, #0
   218e2:	4620      	mov	r0, r4
   218e4:	f7f3 ffaa 	bl	1583c <chan_send>
		if (err) {
   218e8:	4604      	mov	r4, r0
   218ea:	b118      	cbz	r0, 218f4 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   218ec:	4629      	mov	r1, r5
   218ee:	4630      	mov	r0, r6
   218f0:	f001 f88d 	bl	22a0e <k_queue_prepend>
}
   218f4:	4620      	mov	r0, r4
   218f6:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   218f8:	f06f 0401 	mvn.w	r4, #1
   218fc:	e7fa      	b.n	218f4 <process_queue+0x2a>

000218fe <bt_att_chan_send_rsp>:
{
   218fe:	b538      	push	{r3, r4, r5, lr}
   21900:	4604      	mov	r4, r0
   21902:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   21904:	f7f3 ff9a 	bl	1583c <chan_send>
	if (err) {
   21908:	b130      	cbz	r0, 21918 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2190a:	4629      	mov	r1, r5
   2190c:	f504 7080 	add.w	r0, r4, #256	; 0x100
}
   21910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   21914:	f7f5 bd84 	b.w	17420 <net_buf_put>
}
   21918:	bd38      	pop	{r3, r4, r5, pc}

0002191a <chan_req_sent>:
	if (chan->req) {
   2191a:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   2191e:	b133      	cbz	r3, 2192e <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   21920:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21924:	2300      	movs	r3, #0
   21926:	f500 7090 	add.w	r0, r0, #288	; 0x120
   2192a:	f7f9 bca3 	b.w	1b274 <k_work_reschedule>
}
   2192e:	4770      	bx	lr

00021930 <find_info_cb>:
{
   21930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   21932:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   21934:	6816      	ldr	r6, [r2, #0]
{
   21936:	4605      	mov	r5, r0
   21938:	460f      	mov	r7, r1
   2193a:	4614      	mov	r4, r2
	if (!data->rsp) {
   2193c:	b963      	cbnz	r3, 21958 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2193e:	6850      	ldr	r0, [r2, #4]
   21940:	2101      	movs	r1, #1
   21942:	3008      	adds	r0, #8
   21944:	f7f5 fed0 	bl	176e8 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   21948:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2194a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2194c:	781b      	ldrb	r3, [r3, #0]
   2194e:	2b00      	cmp	r3, #0
   21950:	bf0c      	ite	eq
   21952:	2301      	moveq	r3, #1
   21954:	2302      	movne	r3, #2
   21956:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   21958:	68a3      	ldr	r3, [r4, #8]
   2195a:	781b      	ldrb	r3, [r3, #0]
   2195c:	2b01      	cmp	r3, #1
   2195e:	d003      	beq.n	21968 <find_info_cb+0x38>
   21960:	2b02      	cmp	r3, #2
   21962:	d019      	beq.n	21998 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   21964:	2000      	movs	r0, #0
   21966:	e016      	b.n	21996 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   21968:	682b      	ldr	r3, [r5, #0]
   2196a:	781b      	ldrb	r3, [r3, #0]
   2196c:	2b00      	cmp	r3, #0
   2196e:	d1f9      	bne.n	21964 <find_info_cb+0x34>
   21970:	6860      	ldr	r0, [r4, #4]
   21972:	2104      	movs	r1, #4
   21974:	3008      	adds	r0, #8
   21976:	f7f5 feb7 	bl	176e8 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2197a:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2197c:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2197e:	885b      	ldrh	r3, [r3, #2]
   21980:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   21982:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   21984:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   21986:	899b      	ldrh	r3, [r3, #12]
   21988:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   2198c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2198e:	2804      	cmp	r0, #4
   21990:	bf94      	ite	ls
   21992:	2000      	movls	r0, #0
   21994:	2001      	movhi	r0, #1
}
   21996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   21998:	682b      	ldr	r3, [r5, #0]
   2199a:	781b      	ldrb	r3, [r3, #0]
   2199c:	2b02      	cmp	r3, #2
   2199e:	d1e1      	bne.n	21964 <find_info_cb+0x34>
   219a0:	6860      	ldr	r0, [r4, #4]
   219a2:	2112      	movs	r1, #18
   219a4:	3008      	adds	r0, #8
   219a6:	f7f5 fe9f 	bl	176e8 <net_buf_simple_add>
   219aa:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   219ac:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   219ae:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   219b0:	f823 7b02 	strh.w	r7, [r3], #2
   219b4:	1c51      	adds	r1, r2, #1
   219b6:	3211      	adds	r2, #17
   219b8:	f851 0b04 	ldr.w	r0, [r1], #4
   219bc:	f843 0b04 	str.w	r0, [r3], #4
   219c0:	4291      	cmp	r1, r2
   219c2:	d1f9      	bne.n	219b8 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   219c4:	6863      	ldr	r3, [r4, #4]
   219c6:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   219ca:	899b      	ldrh	r3, [r3, #12]
   219cc:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   219ce:	2812      	cmp	r0, #18
   219d0:	e7de      	b.n	21990 <find_info_cb+0x60>

000219d2 <att_exec_write_req>:
   219d2:	2006      	movs	r0, #6
   219d4:	4770      	bx	lr

000219d6 <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   219d6:	30f8      	adds	r0, #248	; 0xf8
   219d8:	f3bf 8f5b 	dmb	ish
   219dc:	e850 3f00 	ldrex	r3, [r0]
   219e0:	f023 0302 	bic.w	r3, r3, #2
   219e4:	e840 3200 	strex	r2, r3, [r0]
   219e8:	2a00      	cmp	r2, #0
   219ea:	d1f7      	bne.n	219dc <chan_cfm_sent+0x6>
   219ec:	f3bf 8f5b 	dmb	ish
}
   219f0:	4770      	bx	lr

000219f2 <chan_rsp_sent>:
   219f2:	30f8      	adds	r0, #248	; 0xf8
   219f4:	f3bf 8f5b 	dmb	ish
   219f8:	e850 3f00 	ldrex	r3, [r0]
   219fc:	f023 0301 	bic.w	r3, r3, #1
   21a00:	e840 3200 	strex	r2, r3, [r0]
   21a04:	2a00      	cmp	r2, #0
   21a06:	d1f7      	bne.n	219f8 <chan_rsp_sent+0x6>
   21a08:	f3bf 8f5b 	dmb	ish
}
   21a0c:	4770      	bx	lr

00021a0e <att_get>:
{
   21a0e:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   21a10:	7a83      	ldrb	r3, [r0, #10]
   21a12:	2b07      	cmp	r3, #7
   21a14:	d001      	beq.n	21a1a <att_get+0xc>
		return NULL;
   21a16:	2000      	movs	r0, #0
}
   21a18:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   21a1a:	2104      	movs	r1, #4
   21a1c:	f7ff fd10 	bl	21440 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   21a20:	2800      	cmp	r0, #0
   21a22:	d0f8      	beq.n	21a16 <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21a24:	f3bf 8f5b 	dmb	ish
   21a28:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   21a2c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   21a30:	075b      	lsls	r3, r3, #29
   21a32:	d4f0      	bmi.n	21a16 <att_get+0x8>
	return att_chan->att;
   21a34:	f850 0c08 	ldr.w	r0, [r0, #-8]
   21a38:	e7ee      	b.n	21a18 <att_get+0xa>

00021a3a <bt_att_status>:
{
   21a3a:	b538      	push	{r3, r4, r5, lr}
   21a3c:	f3bf 8f5b 	dmb	ish
   21a40:	680b      	ldr	r3, [r1, #0]
   21a42:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21a46:	07db      	lsls	r3, r3, #31
{
   21a48:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21a4a:	d519      	bpl.n	21a80 <bt_att_status+0x46>
	if (!chan->att) {
   21a4c:	f850 0c08 	ldr.w	r0, [r0, #-8]
   21a50:	b1b0      	cbz	r0, 21a80 <bt_att_status+0x46>
	if (chan->req) {
   21a52:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   21a56:	b99b      	cbnz	r3, 21a80 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   21a58:	3004      	adds	r0, #4
   21a5a:	f7ff fd1d 	bl	21498 <sys_slist_get>
	if (!node) {
   21a5e:	4604      	mov	r4, r0
   21a60:	b170      	cbz	r0, 21a80 <bt_att_status+0x46>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21a62:	4601      	mov	r1, r0
   21a64:	f1a5 0008 	sub.w	r0, r5, #8
   21a68:	f7f3 ff46 	bl	158f8 <bt_att_chan_req_send>
   21a6c:	2800      	cmp	r0, #0
   21a6e:	da07      	bge.n	21a80 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   21a70:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   21a74:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   21a76:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   21a78:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   21a7a:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   21a7c:	b902      	cbnz	r2, 21a80 <bt_att_status+0x46>
	list->tail = node;
   21a7e:	609c      	str	r4, [r3, #8]
}
   21a80:	bd38      	pop	{r3, r4, r5, pc}

00021a82 <att_req_send_process>:
{
   21a82:	b570      	push	{r4, r5, r6, lr}
   21a84:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   21a86:	3004      	adds	r0, #4
   21a88:	f7ff fd06 	bl	21498 <sys_slist_get>
	if (!node) {
   21a8c:	4606      	mov	r6, r0
   21a8e:	b1c0      	cbz	r0, 21ac2 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21a90:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21a92:	b153      	cbz	r3, 21aaa <att_req_send_process+0x28>
   21a94:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   21a98:	d007      	beq.n	21aaa <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21a9a:	681c      	ldr	r4, [r3, #0]
   21a9c:	b10c      	cbz	r4, 21aa2 <att_req_send_process+0x20>
   21a9e:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
		if (!chan->req) {
   21aa2:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   21aa6:	b13b      	cbz	r3, 21ab8 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21aa8:	b964      	cbnz	r4, 21ac4 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   21aaa:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   21aac:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   21aae:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   21ab0:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   21ab2:	b933      	cbnz	r3, 21ac2 <att_req_send_process+0x40>
	list->tail = node;
   21ab4:	60ae      	str	r6, [r5, #8]
}
   21ab6:	e004      	b.n	21ac2 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21ab8:	4631      	mov	r1, r6
   21aba:	f7f3 ff1d 	bl	158f8 <bt_att_chan_req_send>
   21abe:	2800      	cmp	r0, #0
   21ac0:	dbf2      	blt.n	21aa8 <att_req_send_process+0x26>
}
   21ac2:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   21ac4:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   21ac8:	d004      	beq.n	21ad4 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21aca:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21ace:	b10b      	cbz	r3, 21ad4 <att_req_send_process+0x52>
   21ad0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   21ad4:	4620      	mov	r0, r4
   21ad6:	461c      	mov	r4, r3
   21ad8:	e7e3      	b.n	21aa2 <att_req_send_process+0x20>

00021ada <write_cb>:
{
   21ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21adc:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   21ade:	4601      	mov	r1, r0
{
   21ae0:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   21ae2:	222a      	movs	r2, #42	; 0x2a
   21ae4:	6820      	ldr	r0, [r4, #0]
   21ae6:	f000 fc66 	bl	223b6 <bt_gatt_check_perm>
   21aea:	4605      	mov	r5, r0
   21aec:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   21aee:	bb00      	cbnz	r0, 21b32 <write_cb+0x58>
	if (!data->req) {
   21af0:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   21af2:	68b7      	ldr	r7, [r6, #8]
   21af4:	68e2      	ldr	r2, [r4, #12]
   21af6:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   21af8:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   21afa:	bf14      	ite	ne
   21afc:	2300      	movne	r3, #0
   21afe:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   21b00:	9301      	str	r3, [sp, #4]
   21b02:	8a63      	ldrh	r3, [r4, #18]
   21b04:	9300      	str	r3, [sp, #0]
   21b06:	4631      	mov	r1, r6
   21b08:	8a23      	ldrh	r3, [r4, #16]
   21b0a:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   21b0c:	1e03      	subs	r3, r0, #0
   21b0e:	db05      	blt.n	21b1c <write_cb+0x42>
   21b10:	8a22      	ldrh	r2, [r4, #16]
   21b12:	4293      	cmp	r3, r2
   21b14:	d10b      	bne.n	21b2e <write_cb+0x54>
	data->err = 0U;
   21b16:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   21b18:	2501      	movs	r5, #1
   21b1a:	e005      	b.n	21b28 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   21b1c:	f113 0fff 	cmn.w	r3, #255	; 0xff
   21b20:	d305      	bcc.n	21b2e <write_cb+0x54>
		return -err;
   21b22:	425b      	negs	r3, r3
   21b24:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   21b26:	7523      	strb	r3, [r4, #20]
}
   21b28:	4628      	mov	r0, r5
   21b2a:	b003      	add	sp, #12
   21b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   21b2e:	230e      	movs	r3, #14
   21b30:	e7f9      	b.n	21b26 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   21b32:	2500      	movs	r5, #0
   21b34:	e7f8      	b.n	21b28 <write_cb+0x4e>

00021b36 <bt_att_sent>:
{
   21b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   21b38:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
	struct bt_att *att = chan->att;
   21b3c:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   21b40:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   21b42:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   21b46:	b10b      	cbz	r3, 21b4c <bt_att_sent+0x16>
		chan->sent(chan);
   21b48:	4638      	mov	r0, r7
   21b4a:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21b4c:	f3bf 8f5b 	dmb	ish
   21b50:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   21b54:	e853 2f00 	ldrex	r2, [r3]
   21b58:	f022 0210 	bic.w	r2, r2, #16
   21b5c:	e843 2100 	strex	r1, r2, [r3]
   21b60:	2900      	cmp	r1, #0
   21b62:	d1f7      	bne.n	21b54 <bt_att_sent+0x1e>
   21b64:	f3bf 8f5b 	dmb	ish
	if (!att) {
   21b68:	b30c      	cbz	r4, 21bae <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   21b6a:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   21b6e:	b98b      	cbnz	r3, 21b94 <bt_att_sent+0x5e>
   21b70:	6863      	ldr	r3, [r4, #4]
   21b72:	b17b      	cbz	r3, 21b94 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   21b74:	1d20      	adds	r0, r4, #4
   21b76:	f7ff fc8f 	bl	21498 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21b7a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   21b7c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21b7e:	4638      	mov	r0, r7
   21b80:	f7ff fe8a 	bl	21898 <chan_req_send>
   21b84:	2800      	cmp	r0, #0
   21b86:	da12      	bge.n	21bae <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   21b88:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   21b8a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   21b8c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   21b8e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   21b90:	b903      	cbnz	r3, 21b94 <bt_att_sent+0x5e>
	list->tail = node;
   21b92:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   21b94:	f105 01f8 	add.w	r1, r5, #248	; 0xf8
   21b98:	4638      	mov	r0, r7
   21b9a:	f7ff fe96 	bl	218ca <process_queue>
	if (!err) {
   21b9e:	b130      	cbz	r0, 21bae <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   21ba0:	f104 010c 	add.w	r1, r4, #12
   21ba4:	4638      	mov	r0, r7
}
   21ba6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   21baa:	f7ff be8e 	b.w	218ca <process_queue>
}
   21bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021bb0 <read_cb>:
{
   21bb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   21bb4:	f8d2 8000 	ldr.w	r8, [r2]
{
   21bb8:	4606      	mov	r6, r0
	data->err = 0x00;
   21bba:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   21bbc:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   21bc0:	7317      	strb	r7, [r2, #12]
{
   21bc2:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   21bc4:	4631      	mov	r1, r6
   21bc6:	2215      	movs	r2, #21
   21bc8:	f000 fbf5 	bl	223b6 <bt_gatt_check_perm>
   21bcc:	4604      	mov	r4, r0
   21bce:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   21bd0:	b9a0      	cbnz	r0, 21bfc <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   21bd2:	e9cd 0000 	strd	r0, r0, [sp]
   21bd6:	88ab      	ldrh	r3, [r5, #4]
   21bd8:	68aa      	ldr	r2, [r5, #8]
   21bda:	4631      	mov	r1, r6
   21bdc:	4640      	mov	r0, r8
   21bde:	f7ff fd2c 	bl	2163a <att_chan_read>
	if (ret < 0) {
   21be2:	1e03      	subs	r3, r0, #0
   21be4:	da0c      	bge.n	21c00 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   21be6:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   21bea:	bf26      	itte	cs
   21bec:	425b      	negcs	r3, r3
   21bee:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   21bf0:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   21bf2:	732b      	strb	r3, [r5, #12]
}
   21bf4:	4620      	mov	r0, r4
   21bf6:	b002      	add	sp, #8
   21bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   21bfc:	463c      	mov	r4, r7
   21bfe:	e7f9      	b.n	21bf4 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   21c00:	2401      	movs	r4, #1
   21c02:	e7f7      	b.n	21bf4 <read_cb+0x44>

00021c04 <bt_att_chan_create_pdu>:
{
   21c04:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   21c06:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   21c0a:	3201      	adds	r2, #1
   21c0c:	429a      	cmp	r2, r3
{
   21c0e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   21c10:	d81b      	bhi.n	21c4a <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   21c12:	4608      	mov	r0, r1
   21c14:	f7ff fc85 	bl	21522 <att_op_get_type>
   21c18:	2802      	cmp	r0, #2
   21c1a:	d001      	beq.n	21c20 <bt_att_chan_create_pdu+0x1c>
   21c1c:	2804      	cmp	r0, #4
   21c1e:	d10f      	bne.n	21c40 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   21c20:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21c24:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   21c26:	2100      	movs	r1, #0
   21c28:	4608      	mov	r0, r1
   21c2a:	f7ff fb58 	bl	212de <bt_l2cap_create_pdu_timeout>
   21c2e:	4604      	mov	r4, r0
	if (!buf) {
   21c30:	b120      	cbz	r0, 21c3c <bt_att_chan_create_pdu+0x38>
   21c32:	2101      	movs	r1, #1
   21c34:	3008      	adds	r0, #8
   21c36:	f7f5 fd57 	bl	176e8 <net_buf_simple_add>
	hdr->code = op;
   21c3a:	7005      	strb	r5, [r0, #0]
}
   21c3c:	4620      	mov	r0, r4
   21c3e:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   21c40:	f04f 32ff 	mov.w	r2, #4294967295
   21c44:	f04f 33ff 	mov.w	r3, #4294967295
   21c48:	e7ed      	b.n	21c26 <bt_att_chan_create_pdu+0x22>
		return NULL;
   21c4a:	2400      	movs	r4, #0
   21c4c:	e7f6      	b.n	21c3c <bt_att_chan_create_pdu+0x38>

00021c4e <bt_att_create_pdu>:
{
   21c4e:	b570      	push	{r4, r5, r6, lr}
   21c50:	460e      	mov	r6, r1
   21c52:	4615      	mov	r5, r2
	att = att_get(conn);
   21c54:	f7ff fedb 	bl	21a0e <att_get>
	if (!att) {
   21c58:	b170      	cbz	r0, 21c78 <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21c5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   21c5c:	b163      	cbz	r3, 21c78 <bt_att_create_pdu+0x2a>
   21c5e:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   21c62:	d009      	beq.n	21c78 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21c64:	681b      	ldr	r3, [r3, #0]
   21c66:	b10b      	cbz	r3, 21c6c <bt_att_create_pdu+0x1e>
   21c68:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   21c6c:	1c6a      	adds	r2, r5, #1
   21c6e:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   21c72:	428a      	cmp	r2, r1
   21c74:	d902      	bls.n	21c7c <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21c76:	b93b      	cbnz	r3, 21c88 <bt_att_create_pdu+0x3a>
}
   21c78:	2000      	movs	r0, #0
   21c7a:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   21c7c:	462a      	mov	r2, r5
   21c7e:	4631      	mov	r1, r6
}
   21c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   21c84:	f7ff bfbe 	b.w	21c04 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21c88:	f513 74aa 	adds.w	r4, r3, #340	; 0x154
   21c8c:	d004      	beq.n	21c98 <bt_att_create_pdu+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21c8e:	f8d3 4154 	ldr.w	r4, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21c92:	b10c      	cbz	r4, 21c98 <bt_att_create_pdu+0x4a>
   21c94:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
{
   21c98:	4618      	mov	r0, r3
   21c9a:	4623      	mov	r3, r4
   21c9c:	e7e7      	b.n	21c6e <bt_att_create_pdu+0x20>

00021c9e <att_read_blob_req>:
{
   21c9e:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   21ca0:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   21ca2:	8813      	ldrh	r3, [r2, #0]
   21ca4:	8852      	ldrh	r2, [r2, #2]
   21ca6:	9200      	str	r2, [sp, #0]
   21ca8:	210c      	movs	r1, #12
   21caa:	220d      	movs	r2, #13
   21cac:	f7f4 f924 	bl	15ef8 <att_read_rsp>
}
   21cb0:	b003      	add	sp, #12
   21cb2:	f85d fb04 	ldr.w	pc, [sp], #4

00021cb6 <att_read_req>:
{
   21cb6:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   21cb8:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   21cba:	2200      	movs	r2, #0
   21cbc:	881b      	ldrh	r3, [r3, #0]
   21cbe:	9200      	str	r2, [sp, #0]
   21cc0:	210a      	movs	r1, #10
   21cc2:	220b      	movs	r2, #11
   21cc4:	f7f4 f918 	bl	15ef8 <att_read_rsp>
}
   21cc8:	b003      	add	sp, #12
   21cca:	f85d fb04 	ldr.w	pc, [sp], #4

00021cce <bt_att_init>:
	bt_gatt_init();
   21cce:	f7f4 bd37 	b.w	16740 <bt_gatt_init>

00021cd2 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   21cd2:	898a      	ldrh	r2, [r1, #12]
   21cd4:	6889      	ldr	r1, [r1, #8]
   21cd6:	2300      	movs	r3, #0
   21cd8:	f7f4 bac4 	b.w	16264 <att_handle_rsp>

00021cdc <att_handle_find_type_rsp>:
   21cdc:	f7ff bff9 	b.w	21cd2 <att_handle_find_info_rsp>

00021ce0 <att_handle_read_type_rsp>:
   21ce0:	f7ff bff7 	b.w	21cd2 <att_handle_find_info_rsp>

00021ce4 <att_handle_read_rsp>:
   21ce4:	f7ff bff5 	b.w	21cd2 <att_handle_find_info_rsp>

00021ce8 <att_handle_read_blob_rsp>:
   21ce8:	f7ff bff3 	b.w	21cd2 <att_handle_find_info_rsp>

00021cec <att_handle_read_mult_rsp>:
   21cec:	f7ff bff1 	b.w	21cd2 <att_handle_find_info_rsp>

00021cf0 <att_handle_read_group_rsp>:
   21cf0:	f7ff bfef 	b.w	21cd2 <att_handle_find_info_rsp>

00021cf4 <att_handle_write_rsp>:
   21cf4:	f7ff bfed 	b.w	21cd2 <att_handle_find_info_rsp>

00021cf8 <att_handle_prepare_write_rsp>:
   21cf8:	f7ff bfeb 	b.w	21cd2 <att_handle_find_info_rsp>

00021cfc <att_handle_exec_write_rsp>:
   21cfc:	f7ff bfe9 	b.w	21cd2 <att_handle_find_info_rsp>

00021d00 <att_confirm>:
   21d00:	f7ff bfe7 	b.w	21cd2 <att_handle_find_info_rsp>

00021d04 <att_mtu_rsp>:
{
   21d04:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   21d06:	688e      	ldr	r6, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   21d08:	8833      	ldrh	r3, [r6, #0]
   21d0a:	2b16      	cmp	r3, #22
{
   21d0c:	4604      	mov	r4, r0
   21d0e:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   21d10:	d806      	bhi.n	21d20 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   21d12:	2200      	movs	r2, #0
   21d14:	2304      	movs	r3, #4
   21d16:	4611      	mov	r1, r2
}
   21d18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   21d1c:	f7f4 baa2 	b.w	16264 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   21d20:	2317      	movs	r3, #23
   21d22:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   21d26:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   21d2a:	f7ff fc40 	bl	215ae <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   21d2e:	89aa      	ldrh	r2, [r5, #12]
   21d30:	2300      	movs	r3, #0
   21d32:	4631      	mov	r1, r6
   21d34:	4620      	mov	r0, r4
   21d36:	e7ef      	b.n	21d18 <att_mtu_rsp+0x14>

00021d38 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   21d38:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
   21d3c:	f7f4 bad4 	b.w	162e8 <bt_att_disconnected>

00021d40 <gatt_ccc_changed>:
{
   21d40:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   21d42:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   21d44:	895a      	ldrh	r2, [r3, #10]
   21d46:	428a      	cmp	r2, r1
   21d48:	d003      	beq.n	21d52 <gatt_ccc_changed+0x12>
		ccc->value = value;
   21d4a:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   21d4c:	68db      	ldr	r3, [r3, #12]
   21d4e:	b103      	cbz	r3, 21d52 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   21d50:	4718      	bx	r3
}
   21d52:	4770      	bx	lr

00021d54 <gatt_indicate_rsp>:
{
   21d54:	b510      	push	{r4, lr}
   21d56:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   21d58:	68a3      	ldr	r3, [r4, #8]
{
   21d5a:	460a      	mov	r2, r1
	if (params->func) {
   21d5c:	b10b      	cbz	r3, 21d62 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   21d5e:	4621      	mov	r1, r4
   21d60:	4798      	blx	r3
	params->_ref--;
   21d62:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21d64:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   21d66:	3b01      	subs	r3, #1
   21d68:	b2db      	uxtb	r3, r3
   21d6a:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21d6c:	b122      	cbz	r2, 21d78 <gatt_indicate_rsp+0x24>
   21d6e:	b91b      	cbnz	r3, 21d78 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   21d70:	4620      	mov	r0, r4
}
   21d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   21d76:	4710      	bx	r2
}
   21d78:	bd10      	pop	{r4, pc}

00021d7a <match_uuid>:
	data->attr = attr;
   21d7a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   21d7c:	8091      	strh	r1, [r2, #4]
}
   21d7e:	2000      	movs	r0, #0
   21d80:	4770      	bx	lr

00021d82 <gen_hash_m>:
{
   21d82:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21d84:	6807      	ldr	r7, [r0, #0]
   21d86:	783d      	ldrb	r5, [r7, #0]
{
   21d88:	b089      	sub	sp, #36	; 0x24
   21d8a:	4606      	mov	r6, r0
   21d8c:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21d8e:	b10d      	cbz	r5, 21d94 <gen_hash_m+0x12>
	switch (u16->val) {
   21d90:	2501      	movs	r5, #1
   21d92:	e014      	b.n	21dbe <gen_hash_m+0x3c>
   21d94:	887b      	ldrh	r3, [r7, #2]
   21d96:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   21d9a:	d004      	beq.n	21da6 <gen_hash_m+0x24>
   21d9c:	d812      	bhi.n	21dc4 <gen_hash_m+0x42>
   21d9e:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   21da2:	2b03      	cmp	r3, #3
   21da4:	d8f4      	bhi.n	21d90 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   21da6:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21daa:	2202      	movs	r2, #2
   21dac:	f10d 010e 	add.w	r1, sp, #14
   21db0:	4620      	mov	r0, r4
   21db2:	f7fe fcc4 	bl	2073e <tc_cmac_update>
   21db6:	b9e0      	cbnz	r0, 21df2 <gen_hash_m+0x70>
			state->err = -EINVAL;
   21db8:	f06f 0315 	mvn.w	r3, #21
   21dbc:	65a3      	str	r3, [r4, #88]	; 0x58
}
   21dbe:	4628      	mov	r0, r5
   21dc0:	b009      	add	sp, #36	; 0x24
   21dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   21dc4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   21dc8:	33ff      	adds	r3, #255	; 0xff
   21dca:	b29b      	uxth	r3, r3
   21dcc:	2b04      	cmp	r3, #4
   21dce:	d8df      	bhi.n	21d90 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   21dd0:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21dd4:	2202      	movs	r2, #2
   21dd6:	f10d 010e 	add.w	r1, sp, #14
   21dda:	4620      	mov	r0, r4
   21ddc:	f7fe fcaf 	bl	2073e <tc_cmac_update>
   21de0:	2800      	cmp	r0, #0
   21de2:	d0e9      	beq.n	21db8 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   21de4:	887b      	ldrh	r3, [r7, #2]
   21de6:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21dea:	2202      	movs	r2, #2
   21dec:	f10d 010e 	add.w	r1, sp, #14
   21df0:	e017      	b.n	21e22 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   21df2:	887b      	ldrh	r3, [r7, #2]
   21df4:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21df8:	2202      	movs	r2, #2
   21dfa:	f10d 010e 	add.w	r1, sp, #14
   21dfe:	4620      	mov	r0, r4
   21e00:	f7fe fc9d 	bl	2073e <tc_cmac_update>
   21e04:	2800      	cmp	r0, #0
   21e06:	d0d7      	beq.n	21db8 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   21e08:	2000      	movs	r0, #0
   21e0a:	2310      	movs	r3, #16
   21e0c:	eb0d 0203 	add.w	r2, sp, r3
   21e10:	6877      	ldr	r7, [r6, #4]
   21e12:	9000      	str	r0, [sp, #0]
   21e14:	4631      	mov	r1, r6
   21e16:	47b8      	blx	r7
		if (len < 0) {
   21e18:	1e02      	subs	r2, r0, #0
   21e1a:	da01      	bge.n	21e20 <gen_hash_m+0x9e>
			state->err = len;
   21e1c:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   21e1e:	e7ce      	b.n	21dbe <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   21e20:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21e22:	4620      	mov	r0, r4
   21e24:	f7fe fc8b 	bl	2073e <tc_cmac_update>
   21e28:	2800      	cmp	r0, #0
   21e2a:	d1b1      	bne.n	21d90 <gen_hash_m+0xe>
   21e2c:	e7c4      	b.n	21db8 <gen_hash_m+0x36>

00021e2e <bt_addr_le_cmp>:
   21e2e:	2207      	movs	r2, #7
   21e30:	f000 bf05 	b.w	22c3e <memcmp>

00021e34 <find_ccc_cfg>:
{
   21e34:	b513      	push	{r0, r1, r4, lr}
   21e36:	1c4a      	adds	r2, r1, #1
   21e38:	460c      	mov	r4, r1
		if (conn) {
   21e3a:	b140      	cbz	r0, 21e4e <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   21e3c:	7809      	ldrb	r1, [r1, #0]
   21e3e:	f7ff f989 	bl	21154 <bt_conn_is_peer_addr_le>
   21e42:	2800      	cmp	r0, #0
	return NULL;
   21e44:	bf08      	it	eq
   21e46:	2400      	moveq	r4, #0
}
   21e48:	4620      	mov	r0, r4
   21e4a:	b002      	add	sp, #8
   21e4c:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   21e4e:	9000      	str	r0, [sp, #0]
   21e50:	4669      	mov	r1, sp
   21e52:	f8cd 0003 	str.w	r0, [sp, #3]
   21e56:	4610      	mov	r0, r2
   21e58:	f7ff ffe9 	bl	21e2e <bt_addr_le_cmp>
   21e5c:	2800      	cmp	r0, #0
	return NULL;
   21e5e:	bf18      	it	ne
   21e60:	2400      	movne	r4, #0
   21e62:	e7f1      	b.n	21e48 <find_ccc_cfg+0x14>

00021e64 <bt_addr_le_copy>:
   21e64:	680b      	ldr	r3, [r1, #0]
   21e66:	6003      	str	r3, [r0, #0]
   21e68:	888b      	ldrh	r3, [r1, #4]
   21e6a:	8083      	strh	r3, [r0, #4]
   21e6c:	798b      	ldrb	r3, [r1, #6]
   21e6e:	7183      	strb	r3, [r0, #6]
}
   21e70:	4770      	bx	lr

00021e72 <sc_save>:
{
   21e72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21e76:	4680      	mov	r8, r0
   21e78:	460f      	mov	r7, r1
   21e7a:	4616      	mov	r6, r2
   21e7c:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   21e7e:	f7f4 fb83 	bl	16588 <find_sc_cfg>
	if (!cfg) {
   21e82:	4604      	mov	r4, r0
   21e84:	b960      	cbnz	r0, 21ea0 <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   21e86:	4669      	mov	r1, sp
   21e88:	9000      	str	r0, [sp, #0]
   21e8a:	f8cd 0003 	str.w	r0, [sp, #3]
   21e8e:	f7f4 fb7b 	bl	16588 <find_sc_cfg>
		if (!cfg) {
   21e92:	4604      	mov	r4, r0
   21e94:	b178      	cbz	r0, 21eb6 <sc_save+0x44>
		cfg->id = id;
   21e96:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   21e9a:	4639      	mov	r1, r7
   21e9c:	f7ff ffe2 	bl	21e64 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   21ea0:	8922      	ldrh	r2, [r4, #8]
   21ea2:	8963      	ldrh	r3, [r4, #10]
   21ea4:	b91a      	cbnz	r2, 21eae <sc_save+0x3c>
   21ea6:	b923      	cbnz	r3, 21eb2 <sc_save+0x40>
		cfg->data.start = start;
   21ea8:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   21eaa:	8165      	strh	r5, [r4, #10]
   21eac:	e003      	b.n	21eb6 <sc_save+0x44>
	if (new_start >= *start && new_end <= *end) {
   21eae:	4296      	cmp	r6, r2
   21eb0:	d304      	bcc.n	21ebc <sc_save+0x4a>
   21eb2:	429d      	cmp	r5, r3
   21eb4:	d8f9      	bhi.n	21eaa <sc_save+0x38>
}
   21eb6:	b002      	add	sp, #8
   21eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   21ebc:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   21ebe:	e7f8      	b.n	21eb2 <sc_save+0x40>

00021ec0 <bt_gatt_attr_write_ccc>:
{
   21ec0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21ec4:	461f      	mov	r7, r3
   21ec6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   21eca:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   21ece:	4606      	mov	r6, r0
   21ed0:	4688      	mov	r8, r1
	if (offset) {
   21ed2:	2b00      	cmp	r3, #0
   21ed4:	d144      	bne.n	21f60 <bt_gatt_attr_write_ccc+0xa0>
	if (!len || len > sizeof(uint16_t)) {
   21ed6:	1e7b      	subs	r3, r7, #1
   21ed8:	2b01      	cmp	r3, #1
   21eda:	d844      	bhi.n	21f66 <bt_gatt_attr_write_ccc+0xa6>
	if (len < sizeof(uint16_t)) {
   21edc:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   21ede:	7815      	ldrb	r5, [r2, #0]
   21ee0:	bf18      	it	ne
   21ee2:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   21ee4:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   21ee6:	bf0c      	ite	eq
   21ee8:	b2ad      	uxtheq	r5, r5
   21eea:	ea45 2502 	orrne.w	r5, r5, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   21eee:	f7ff ffa1 	bl	21e34 <find_ccc_cfg>
	if (!cfg) {
   21ef2:	4604      	mov	r4, r0
   21ef4:	b980      	cbnz	r0, 21f18 <bt_gatt_attr_write_ccc+0x58>
		if (!value) {
   21ef6:	b91d      	cbnz	r5, 21f00 <bt_gatt_attr_write_ccc+0x40>
			return len;
   21ef8:	4638      	mov	r0, r7
}
   21efa:	b003      	add	sp, #12
   21efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   21f00:	4649      	mov	r1, r9
   21f02:	f7ff ff97 	bl	21e34 <find_ccc_cfg>
		if (!cfg) {
   21f06:	4604      	mov	r4, r0
   21f08:	b380      	cbz	r0, 21f6c <bt_gatt_attr_write_ccc+0xac>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   21f0a:	f106 0190 	add.w	r1, r6, #144	; 0x90
   21f0e:	3001      	adds	r0, #1
   21f10:	f7ff ffa8 	bl	21e64 <bt_addr_le_copy>
		cfg->id = conn->id;
   21f14:	7a33      	ldrb	r3, [r6, #8]
   21f16:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   21f18:	f8d9 3010 	ldr.w	r3, [r9, #16]
   21f1c:	b9a3      	cbnz	r3, 21f48 <bt_gatt_attr_write_ccc+0x88>
	if (cfg->value != ccc->value) {
   21f1e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   21f22:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   21f24:	42ab      	cmp	r3, r5
   21f26:	d003      	beq.n	21f30 <bt_gatt_attr_write_ccc+0x70>
		gatt_ccc_changed(attr, ccc);
   21f28:	4649      	mov	r1, r9
   21f2a:	4640      	mov	r0, r8
   21f2c:	f7ff ff08 	bl	21d40 <gatt_ccc_changed>
	if (!value) {
   21f30:	2d00      	cmp	r5, #0
   21f32:	d1e1      	bne.n	21ef8 <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   21f34:	4669      	mov	r1, sp
   21f36:	1c60      	adds	r0, r4, #1
   21f38:	9500      	str	r5, [sp, #0]
   21f3a:	f8cd 5003 	str.w	r5, [sp, #3]
   21f3e:	f7ff ff91 	bl	21e64 <bt_addr_le_copy>
	cfg->id = 0U;
   21f42:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   21f44:	8125      	strh	r5, [r4, #8]
}
   21f46:	e7d7      	b.n	21ef8 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   21f48:	462a      	mov	r2, r5
   21f4a:	4641      	mov	r1, r8
   21f4c:	4630      	mov	r0, r6
   21f4e:	4798      	blx	r3
		if (write < 0) {
   21f50:	2800      	cmp	r0, #0
   21f52:	dbd2      	blt.n	21efa <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   21f54:	3801      	subs	r0, #1
   21f56:	2801      	cmp	r0, #1
   21f58:	d9e1      	bls.n	21f1e <bt_gatt_attr_write_ccc+0x5e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   21f5a:	f06f 000d 	mvn.w	r0, #13
   21f5e:	e7cc      	b.n	21efa <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21f60:	f06f 0006 	mvn.w	r0, #6
   21f64:	e7c9      	b.n	21efa <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   21f66:	f06f 000c 	mvn.w	r0, #12
   21f6a:	e7c6      	b.n	21efa <bt_gatt_attr_write_ccc+0x3a>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   21f6c:	f06f 0010 	mvn.w	r0, #16
   21f70:	e7c3      	b.n	21efa <bt_gatt_attr_write_ccc+0x3a>

00021f72 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   21f72:	2300      	movs	r3, #0
   21f74:	6003      	str	r3, [r0, #0]
   21f76:	6043      	str	r3, [r0, #4]
   21f78:	6083      	str	r3, [r0, #8]
}
   21f7a:	4770      	bx	lr

00021f7c <sc_clear>:
{
   21f7c:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   21f7e:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   21f82:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   21f84:	4629      	mov	r1, r5
   21f86:	7a00      	ldrb	r0, [r0, #8]
   21f88:	f7fe ffaf 	bl	20eea <bt_addr_le_is_bonded>
   21f8c:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   21f8e:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   21f90:	f7f4 fafa 	bl	16588 <find_sc_cfg>
		if (cfg) {
   21f94:	b118      	cbz	r0, 21f9e <sc_clear+0x22>
}
   21f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   21f9a:	f7ff bfea 	b.w	21f72 <clear_sc_cfg>
}
   21f9e:	bd38      	pop	{r3, r4, r5, pc}

00021fa0 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   21fa0:	2a02      	cmp	r2, #2
{
   21fa2:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   21fa4:	d108      	bne.n	21fb8 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   21fa6:	2300      	movs	r3, #0
   21fa8:	f100 0190 	add.w	r1, r0, #144	; 0x90
   21fac:	461a      	mov	r2, r3
   21fae:	7a00      	ldrb	r0, [r0, #8]
   21fb0:	f7ff ff5f 	bl	21e72 <sc_save>
}
   21fb4:	2002      	movs	r0, #2
   21fb6:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   21fb8:	f7ff ffe0 	bl	21f7c <sc_clear>
   21fbc:	e7fa      	b.n	21fb4 <sc_ccc_cfg_write+0x14>

00021fbe <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   21fbe:	b538      	push	{r3, r4, r5, lr}
   21fc0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   21fc4:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   21fc6:	460c      	mov	r4, r1
   21fc8:	4611      	mov	r1, r2
	if (offset > value_len) {
   21fca:	d30a      	bcc.n	21fe2 <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   21fcc:	1aad      	subs	r5, r5, r2
   21fce:	42a5      	cmp	r5, r4
   21fd0:	bfa8      	it	ge
   21fd2:	4625      	movge	r5, r4
   21fd4:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21fd6:	462a      	mov	r2, r5
   21fd8:	4419      	add	r1, r3
   21fda:	f000 fe3e 	bl	22c5a <memcpy>
}
   21fde:	4628      	mov	r0, r5
   21fe0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21fe2:	f06f 0506 	mvn.w	r5, #6
   21fe6:	e7fa      	b.n	21fde <bt_gatt_attr_read.constprop.0+0x20>

00021fe8 <bt_gatt_attr_read_ccc>:
{
   21fe8:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   21fea:	68c9      	ldr	r1, [r1, #12]
{
   21fec:	b085      	sub	sp, #20
   21fee:	4614      	mov	r4, r2
   21ff0:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   21ff2:	f7ff ff1f 	bl	21e34 <find_ccc_cfg>
	if (cfg) {
   21ff6:	b100      	cbz	r0, 21ffa <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   21ff8:	8900      	ldrh	r0, [r0, #8]
   21ffa:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   21ffe:	2302      	movs	r3, #2
   22000:	9300      	str	r3, [sp, #0]
   22002:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   22006:	f10d 030e 	add.w	r3, sp, #14
   2200a:	4629      	mov	r1, r5
   2200c:	4620      	mov	r0, r4
   2200e:	f7ff ffd6 	bl	21fbe <bt_gatt_attr_read.constprop.0>
}
   22012:	b005      	add	sp, #20
   22014:	bd30      	pop	{r4, r5, pc}

00022016 <bt_gatt_attr_read_service>:
{
   22016:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   22018:	460c      	mov	r4, r1
   2201a:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2201c:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2201e:	781c      	ldrb	r4, [r3, #0]
{
   22020:	4610      	mov	r0, r2
   22022:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   22026:	b954      	cbnz	r4, 2203e <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   22028:	885b      	ldrh	r3, [r3, #2]
   2202a:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2202e:	2302      	movs	r3, #2
   22030:	9300      	str	r3, [sp, #0]
   22032:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   22036:	f7ff ffc2 	bl	21fbe <bt_gatt_attr_read.constprop.0>
}
   2203a:	b004      	add	sp, #16
   2203c:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2203e:	2410      	movs	r4, #16
   22040:	9400      	str	r4, [sp, #0]
   22042:	3301      	adds	r3, #1
   22044:	e7f7      	b.n	22036 <bt_gatt_attr_read_service+0x20>

00022046 <cf_read>:
{
   22046:	b530      	push	{r4, r5, lr}
   22048:	b085      	sub	sp, #20
   2204a:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2204c:	2300      	movs	r3, #0
{
   2204e:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   22050:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   22054:	f7f4 fa7a 	bl	1654c <find_cf_cfg>
	if (cfg) {
   22058:	b110      	cbz	r0, 22060 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2205a:	7a03      	ldrb	r3, [r0, #8]
   2205c:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   22060:	2301      	movs	r3, #1
   22062:	9300      	str	r3, [sp, #0]
   22064:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   22068:	ab03      	add	r3, sp, #12
   2206a:	4629      	mov	r1, r5
   2206c:	4620      	mov	r0, r4
   2206e:	f7ff ffa6 	bl	21fbe <bt_gatt_attr_read.constprop.0>
}
   22072:	b005      	add	sp, #20
   22074:	bd30      	pop	{r4, r5, pc}

00022076 <read_name>:
{
   22076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2207a:	4614      	mov	r4, r2
   2207c:	461d      	mov	r5, r3
   2207e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   22082:	f7f1 ffe5 	bl	14050 <bt_get_name>
   22086:	4606      	mov	r6, r0
				 strlen(name));
   22088:	f7eb f8b8 	bl	d1fc <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2208c:	b280      	uxth	r0, r0
   2208e:	9006      	str	r0, [sp, #24]
   22090:	4633      	mov	r3, r6
   22092:	463a      	mov	r2, r7
   22094:	4629      	mov	r1, r5
   22096:	4620      	mov	r0, r4
}
   22098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2209c:	f7ff bf8f 	b.w	21fbe <bt_gatt_attr_read.constprop.0>

000220a0 <read_appearance>:
{
   220a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   220a2:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   220a4:	2300      	movs	r3, #0
   220a6:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   220aa:	2302      	movs	r3, #2
   220ac:	9300      	str	r3, [sp, #0]
{
   220ae:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   220b0:	f10d 030e 	add.w	r3, sp, #14
   220b4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   220b8:	f7ff ff81 	bl	21fbe <bt_gatt_attr_read.constprop.0>
}
   220bc:	b005      	add	sp, #20
   220be:	f85d fb04 	ldr.w	pc, [sp], #4

000220c2 <clear_cf_cfg>:
{
   220c2:	b513      	push	{r0, r1, r4, lr}
   220c4:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   220c6:	2400      	movs	r4, #0
   220c8:	4669      	mov	r1, sp
   220ca:	3001      	adds	r0, #1
   220cc:	9400      	str	r4, [sp, #0]
   220ce:	f8cd 4003 	str.w	r4, [sp, #3]
   220d2:	f7ff fec7 	bl	21e64 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   220d6:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   220d8:	320c      	adds	r2, #12
   220da:	f3bf 8f5b 	dmb	ish
   220de:	e852 3f00 	ldrex	r3, [r2]
   220e2:	e842 4100 	strex	r1, r4, [r2]
   220e6:	2900      	cmp	r1, #0
   220e8:	d1f9      	bne.n	220de <clear_cf_cfg+0x1c>
   220ea:	f3bf 8f5b 	dmb	ish
}
   220ee:	b002      	add	sp, #8
   220f0:	bd10      	pop	{r4, pc}

000220f2 <gatt_write_ccc_buf>:
{
   220f2:	b538      	push	{r3, r4, r5, lr}
   220f4:	f100 0508 	add.w	r5, r0, #8
   220f8:	2102      	movs	r1, #2
   220fa:	4628      	mov	r0, r5
   220fc:	4614      	mov	r4, r2
   220fe:	f7f5 faf3 	bl	176e8 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   22102:	8963      	ldrh	r3, [r4, #10]
	net_buf_simple_add_le16(&buf->b, val);
   22104:	89a1      	ldrh	r1, [r4, #12]
   22106:	8003      	strh	r3, [r0, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22108:	3410      	adds	r4, #16
   2210a:	4628      	mov	r0, r5
   2210c:	f000 faaf 	bl	2266e <net_buf_simple_add_le16>
   22110:	f3bf 8f5b 	dmb	ish
   22114:	e854 3f00 	ldrex	r3, [r4]
   22118:	f043 0304 	orr.w	r3, r3, #4
   2211c:	e844 3200 	strex	r2, r3, [r4]
   22120:	2a00      	cmp	r2, #0
   22122:	d1f7      	bne.n	22114 <gatt_write_ccc_buf+0x22>
   22124:	f3bf 8f5b 	dmb	ish
}
   22128:	2000      	movs	r0, #0
   2212a:	bd38      	pop	{r3, r4, r5, pc}

0002212c <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2212c:	2301      	movs	r3, #1
   2212e:	408b      	lsls	r3, r1
   22130:	f3bf 8f5b 	dmb	ish
   22134:	e850 2f00 	ldrex	r2, [r0]
   22138:	431a      	orrs	r2, r3
   2213a:	e840 2100 	strex	r1, r2, [r0]
   2213e:	2900      	cmp	r1, #0
   22140:	d1f8      	bne.n	22134 <atomic_set_bit+0x8>
   22142:	f3bf 8f5b 	dmb	ish
}
   22146:	4770      	bx	lr

00022148 <sc_restore_rsp>:
{
   22148:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   2214a:	f7f4 f9ff 	bl	1654c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2214e:	b140      	cbz	r0, 22162 <sc_restore_rsp+0x1a>
   22150:	7a03      	ldrb	r3, [r0, #8]
   22152:	07db      	lsls	r3, r3, #31
   22154:	d505      	bpl.n	22162 <sc_restore_rsp+0x1a>
}
   22156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2215a:	2100      	movs	r1, #0
   2215c:	300c      	adds	r0, #12
   2215e:	f7ff bfe5 	b.w	2212c <atomic_set_bit>
}
   22162:	bd08      	pop	{r3, pc}

00022164 <cf_write>:
{
   22164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22168:	4698      	mov	r8, r3
   2216a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   2216e:	2b01      	cmp	r3, #1
{
   22170:	4606      	mov	r6, r0
   22172:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   22174:	d830      	bhi.n	221d8 <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   22176:	4443      	add	r3, r8
   22178:	2b01      	cmp	r3, #1
   2217a:	4645      	mov	r5, r8
   2217c:	dc2f      	bgt.n	221de <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   2217e:	f7f4 f9e5 	bl	1654c <find_cf_cfg>
	if (!cfg) {
   22182:	4604      	mov	r4, r0
   22184:	b918      	cbnz	r0, 2218e <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   22186:	f7f4 f9e1 	bl	1654c <find_cf_cfg>
	if (!cfg) {
   2218a:	4604      	mov	r4, r0
   2218c:	b350      	cbz	r0, 221e4 <cf_write+0x80>
{
   2218e:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   22190:	f1b8 0f00 	cmp.w	r8, #0
   22194:	d10e      	bne.n	221b4 <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   22196:	f106 0190 	add.w	r1, r6, #144	; 0x90
   2219a:	1c60      	adds	r0, r4, #1
   2219c:	f7ff fe62 	bl	21e64 <bt_addr_le_copy>
	cfg->id = conn->id;
   221a0:	4620      	mov	r0, r4
   221a2:	7a33      	ldrb	r3, [r6, #8]
   221a4:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   221a8:	2100      	movs	r1, #0
   221aa:	f7ff ffbf 	bl	2212c <atomic_set_bit>
}
   221ae:	4628      	mov	r0, r5
   221b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   221b4:	7a20      	ldrb	r0, [r4, #8]
   221b6:	fa20 f301 	lsr.w	r3, r0, r1
   221ba:	07da      	lsls	r2, r3, #31
   221bc:	d503      	bpl.n	221c6 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   221be:	783b      	ldrb	r3, [r7, #0]
   221c0:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   221c2:	07db      	lsls	r3, r3, #31
   221c4:	d511      	bpl.n	221ea <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   221c6:	3101      	adds	r1, #1
   221c8:	2903      	cmp	r1, #3
   221ca:	d1e1      	bne.n	22190 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   221cc:	783b      	ldrb	r3, [r7, #0]
   221ce:	f003 0307 	and.w	r3, r3, #7
   221d2:	4318      	orrs	r0, r3
   221d4:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   221d6:	e7de      	b.n	22196 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   221d8:	f06f 0506 	mvn.w	r5, #6
   221dc:	e7e7      	b.n	221ae <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   221de:	f06f 050c 	mvn.w	r5, #12
   221e2:	e7e4      	b.n	221ae <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   221e4:	f06f 0510 	mvn.w	r5, #16
   221e8:	e7e1      	b.n	221ae <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   221ea:	f06f 0512 	mvn.w	r5, #18
   221ee:	e7de      	b.n	221ae <cf_write+0x4a>

000221f0 <gatt_sub_remove>:
{
   221f0:	b538      	push	{r3, r4, r5, lr}
   221f2:	460c      	mov	r4, r1
	if (params) {
   221f4:	4619      	mov	r1, r3
   221f6:	b16b      	cbz	r3, 22214 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   221f8:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   221fc:	695b      	ldr	r3, [r3, #20]
   221fe:	b982      	cbnz	r2, 22222 <gatt_sub_remove+0x32>
   22200:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   22202:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   22204:	4295      	cmp	r5, r2
   22206:	d100      	bne.n	2220a <gatt_sub_remove+0x1a>
	list->tail = node;
   22208:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   2220a:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   2220c:	680d      	ldr	r5, [r1, #0]
   2220e:	614b      	str	r3, [r1, #20]
   22210:	461a      	mov	r2, r3
   22212:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   22214:	68a3      	ldr	r3, [r4, #8]
   22216:	b953      	cbnz	r3, 2222e <gatt_sub_remove+0x3e>
		gatt_sub_free(sub);
   22218:	4620      	mov	r0, r4
}
   2221a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gatt_sub_free(sub);
   2221e:	f7f4 b9e1 	b.w	165e4 <gatt_sub_free>
   22222:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   22224:	68e3      	ldr	r3, [r4, #12]
   22226:	429d      	cmp	r5, r3
	list->tail = node;
   22228:	bf08      	it	eq
   2222a:	60e2      	streq	r2, [r4, #12]
}
   2222c:	e7ed      	b.n	2220a <gatt_sub_remove+0x1a>
}
   2222e:	bd38      	pop	{r3, r4, r5, pc}

00022230 <gatt_write_ccc_rsp>:
{
   22230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22234:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22236:	f3bf 8f5b 	dmb	ish
   2223a:	4606      	mov	r6, r0
   2223c:	460d      	mov	r5, r1
   2223e:	f104 0310 	add.w	r3, r4, #16
   22242:	e853 2f00 	ldrex	r2, [r3]
   22246:	f022 0204 	bic.w	r2, r2, #4
   2224a:	e843 2100 	strex	r1, r2, [r3]
   2224e:	2900      	cmp	r1, #0
   22250:	d1f7      	bne.n	22242 <gatt_write_ccc_rsp+0x12>
   22252:	f3bf 8f5b 	dmb	ish
	if (err) {
   22256:	b1dd      	cbz	r5, 22290 <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   22258:	f7f4 f9a6 	bl	165a8 <gatt_sub_find>
		if (!sub) {
   2225c:	4601      	mov	r1, r0
   2225e:	b300      	cbz	r0, 222a2 <gatt_write_ccc_rsp+0x72>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   22260:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   22262:	b143      	cbz	r3, 22276 <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22264:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   22266:	f104 0014 	add.w	r0, r4, #20
   2226a:	4283      	cmp	r3, r0
   2226c:	d10b      	bne.n	22286 <gatt_write_ccc_rsp+0x56>
				gatt_sub_remove(conn, sub, tmp, params);
   2226e:	4623      	mov	r3, r4
   22270:	4630      	mov	r0, r6
   22272:	f7ff ffbd 	bl	221f0 <gatt_sub_remove>
	if (params->write) {
   22276:	6863      	ldr	r3, [r4, #4]
   22278:	b19b      	cbz	r3, 222a2 <gatt_write_ccc_rsp+0x72>
		params->write(conn, err, NULL);
   2227a:	4629      	mov	r1, r5
   2227c:	4630      	mov	r0, r6
   2227e:	2200      	movs	r2, #0
}
   22280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   22284:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   22286:	2a00      	cmp	r2, #0
   22288:	d0f5      	beq.n	22276 <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2228a:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   2228c:	6812      	ldr	r2, [r2, #0]
   2228e:	e7ec      	b.n	2226a <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   22290:	89a3      	ldrh	r3, [r4, #12]
   22292:	2b00      	cmp	r3, #0
   22294:	d1ef      	bne.n	22276 <gatt_write_ccc_rsp+0x46>
		params->notify(conn, params, NULL, 0);
   22296:	6827      	ldr	r7, [r4, #0]
   22298:	462b      	mov	r3, r5
   2229a:	462a      	mov	r2, r5
   2229c:	4621      	mov	r1, r4
   2229e:	47b8      	blx	r7
   222a0:	e7e9      	b.n	22276 <gatt_write_ccc_rsp+0x46>
}
   222a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000222a6 <gatt_req_send>:
{
   222a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   222aa:	4606      	mov	r6, r0
   222ac:	4688      	mov	r8, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   222ae:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   222b2:	2100      	movs	r1, #0
{
   222b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   222b8:	4614      	mov	r4, r2
   222ba:	461f      	mov	r7, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   222bc:	f7f3 ffaa 	bl	16214 <bt_att_req_alloc>
	if (!req) {
   222c0:	4605      	mov	r5, r0
   222c2:	b920      	cbnz	r0, 222ce <gatt_req_send+0x28>
		return -ENOMEM;
   222c4:	f06f 040b 	mvn.w	r4, #11
}
   222c8:	4620      	mov	r0, r4
   222ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	req->func = func;
   222ce:	f8c0 8004 	str.w	r8, [r0, #4]
	req->user_data = params;
   222d2:	60c4      	str	r4, [r0, #12]
	buf = bt_att_create_pdu(conn, op, len);
   222d4:	f89d 1020 	ldrb.w	r1, [sp, #32]
   222d8:	464a      	mov	r2, r9
   222da:	4630      	mov	r0, r6
   222dc:	f7ff fcb7 	bl	21c4e <bt_att_create_pdu>
	if (!buf) {
   222e0:	b918      	cbnz	r0, 222ea <gatt_req_send+0x44>
		bt_att_req_free(req);
   222e2:	4628      	mov	r0, r5
   222e4:	f7f3 ffac 	bl	16240 <bt_att_req_free>
   222e8:	e7ec      	b.n	222c4 <gatt_req_send+0x1e>
	err = encode(buf, len, params);
   222ea:	4622      	mov	r2, r4
	req->buf = buf;
   222ec:	60a8      	str	r0, [r5, #8]
	err = encode(buf, len, params);
   222ee:	4649      	mov	r1, r9
   222f0:	47b8      	blx	r7
	if (err) {
   222f2:	4604      	mov	r4, r0
   222f4:	b118      	cbz	r0, 222fe <gatt_req_send+0x58>
		bt_att_req_free(req);
   222f6:	4628      	mov	r0, r5
   222f8:	f7f3 ffa2 	bl	16240 <bt_att_req_free>
   222fc:	e7e4      	b.n	222c8 <gatt_req_send+0x22>
	err = bt_att_req_send(conn, req);
   222fe:	4629      	mov	r1, r5
   22300:	4630      	mov	r0, r6
   22302:	f7f4 f8b9 	bl	16478 <bt_att_req_send>
	if (err) {
   22306:	4604      	mov	r4, r0
   22308:	2800      	cmp	r0, #0
   2230a:	d0dd      	beq.n	222c8 <gatt_req_send+0x22>
   2230c:	e7f3      	b.n	222f6 <gatt_req_send+0x50>

0002230e <bt_gatt_attr_value_handle>:
{
   2230e:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   22310:	4604      	mov	r4, r0
   22312:	b910      	cbnz	r0, 2231a <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   22314:	2000      	movs	r0, #0
}
   22316:	b002      	add	sp, #8
   22318:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2231a:	2300      	movs	r3, #0
   2231c:	f88d 3004 	strb.w	r3, [sp, #4]
   22320:	6800      	ldr	r0, [r0, #0]
   22322:	f642 0303 	movw	r3, #10243	; 0x2803
   22326:	a901      	add	r1, sp, #4
   22328:	f8ad 3006 	strh.w	r3, [sp, #6]
   2232c:	f7fe fadb 	bl	208e6 <bt_uuid_cmp>
   22330:	2800      	cmp	r0, #0
   22332:	d1ef      	bne.n	22314 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   22334:	68e3      	ldr	r3, [r4, #12]
   22336:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   22338:	2800      	cmp	r0, #0
   2233a:	d1ec      	bne.n	22316 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2233c:	4620      	mov	r0, r4
   2233e:	f7f4 fa6d 	bl	1681c <bt_gatt_attr_get_handle>
   22342:	3001      	adds	r0, #1
   22344:	b280      	uxth	r0, r0
	return handle;
   22346:	e7e6      	b.n	22316 <bt_gatt_attr_value_handle+0x8>

00022348 <bt_gatt_attr_read_chrc>:
{
   22348:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2234a:	68ce      	ldr	r6, [r1, #12]
{
   2234c:	b088      	sub	sp, #32
   2234e:	4608      	mov	r0, r1
   22350:	461d      	mov	r5, r3
	pdu.properties = chrc->properties;
   22352:	79b3      	ldrb	r3, [r6, #6]
   22354:	f88d 300c 	strb.w	r3, [sp, #12]
{
   22358:	4614      	mov	r4, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2235a:	f7ff ffd8 	bl	2230e <bt_gatt_attr_value_handle>
   2235e:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   22362:	6830      	ldr	r0, [r6, #0]
   22364:	7803      	ldrb	r3, [r0, #0]
   22366:	b96b      	cbnz	r3, 22384 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   22368:	8843      	ldrh	r3, [r0, #2]
   2236a:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2236e:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   22370:	9300      	str	r3, [sp, #0]
   22372:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   22376:	ab03      	add	r3, sp, #12
   22378:	4629      	mov	r1, r5
   2237a:	4620      	mov	r0, r4
   2237c:	f7ff fe1f 	bl	21fbe <bt_gatt_attr_read.constprop.0>
}
   22380:	b008      	add	sp, #32
   22382:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   22384:	1c43      	adds	r3, r0, #1
   22386:	f10d 020f 	add.w	r2, sp, #15
   2238a:	3011      	adds	r0, #17
   2238c:	f853 1b04 	ldr.w	r1, [r3], #4
   22390:	f842 1b04 	str.w	r1, [r2], #4
   22394:	4283      	cmp	r3, r0
   22396:	d1f9      	bne.n	2238c <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   22398:	2313      	movs	r3, #19
   2239a:	e7e9      	b.n	22370 <bt_gatt_attr_read_chrc+0x28>

0002239c <bt_gatt_foreach_attr>:
{
   2239c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2239e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   223a2:	2300      	movs	r3, #0
   223a4:	9300      	str	r3, [sp, #0]
   223a6:	461a      	mov	r2, r3
   223a8:	f7f4 fa84 	bl	168b4 <bt_gatt_foreach_attr_type>
}
   223ac:	b005      	add	sp, #20
   223ae:	f85d fb04 	ldr.w	pc, [sp], #4

000223b2 <db_hash_process>:
	db_hash_gen(true);
   223b2:	f7f4 baf5 	b.w	169a0 <db_hash_gen.isra.0>

000223b6 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   223b6:	07d3      	lsls	r3, r2, #31
{
   223b8:	b510      	push	{r4, lr}
   223ba:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   223bc:	d504      	bpl.n	223c8 <bt_gatt_check_perm+0x12>
   223be:	f014 0f15 	tst.w	r4, #21
   223c2:	d017      	beq.n	223f4 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   223c4:	684b      	ldr	r3, [r1, #4]
   223c6:	b1ab      	cbz	r3, 223f4 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   223c8:	0793      	lsls	r3, r2, #30
   223ca:	d504      	bpl.n	223d6 <bt_gatt_check_perm+0x20>
   223cc:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   223d0:	d012      	beq.n	223f8 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   223d2:	688b      	ldr	r3, [r1, #8]
   223d4:	b183      	cbz	r3, 223f8 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   223d6:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   223d8:	f014 0f30 	tst.w	r4, #48	; 0x30
   223dc:	d104      	bne.n	223e8 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   223de:	f014 000c 	ands.w	r0, r4, #12
   223e2:	bf18      	it	ne
   223e4:	200f      	movne	r0, #15
}
   223e6:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   223e8:	f7fe feb2 	bl	21150 <bt_conn_get_security>
   223ec:	2802      	cmp	r0, #2
   223ee:	d8f6      	bhi.n	223de <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   223f0:	2005      	movs	r0, #5
   223f2:	e7f8      	b.n	223e6 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   223f4:	2002      	movs	r0, #2
   223f6:	e7f6      	b.n	223e6 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   223f8:	2003      	movs	r0, #3
   223fa:	e7f4      	b.n	223e6 <bt_gatt_check_perm+0x30>

000223fc <gatt_notify>:
{
   223fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22400:	4614      	mov	r4, r2
   22402:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   22404:	2214      	movs	r2, #20
   22406:	6861      	ldr	r1, [r4, #4]
{
   22408:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   2240a:	f7ff ffd4 	bl	223b6 <bt_gatt_check_perm>
   2240e:	bb08      	cbnz	r0, 22454 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   22410:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   22412:	211b      	movs	r1, #27
   22414:	3202      	adds	r2, #2
   22416:	4638      	mov	r0, r7
   22418:	f7ff fc19 	bl	21c4e <bt_att_create_pdu>
	if (!buf) {
   2241c:	4605      	mov	r5, r0
   2241e:	b1e8      	cbz	r0, 2245c <gatt_notify+0x60>
	return net_buf_simple_add(&buf->b, len);
   22420:	f100 0908 	add.w	r9, r0, #8
   22424:	2102      	movs	r1, #2
   22426:	4648      	mov	r0, r9
   22428:	f7f5 f95e 	bl	176e8 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   2242c:	4606      	mov	r6, r0
   2242e:	89a1      	ldrh	r1, [r4, #12]
   22430:	f826 8b02 	strh.w	r8, [r6], #2
   22434:	4648      	mov	r0, r9
   22436:	f7f5 f957 	bl	176e8 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2243a:	89a2      	ldrh	r2, [r4, #12]
   2243c:	68a1      	ldr	r1, [r4, #8]
   2243e:	4630      	mov	r0, r6
   22440:	f000 fc0b 	bl	22c5a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   22444:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   22448:	4629      	mov	r1, r5
   2244a:	4638      	mov	r0, r7
}
   2244c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   22450:	f7f3 bfa4 	b.w	1639c <bt_att_send>
		return -EPERM;
   22454:	f04f 30ff 	mov.w	r0, #4294967295
}
   22458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   2245c:	f06f 000b 	mvn.w	r0, #11
   22460:	e7fa      	b.n	22458 <gatt_notify+0x5c>

00022462 <bt_gatt_notification>:
{
   22462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22466:	4607      	mov	r7, r0
   22468:	4688      	mov	r8, r1
   2246a:	4691      	mov	r9, r2
   2246c:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   2246e:	f7f4 f89b 	bl	165a8 <gatt_sub_find>
	if (!sub) {
   22472:	b1f8      	cbz	r0, 224b4 <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   22474:	6883      	ldr	r3, [r0, #8]
   22476:	b1eb      	cbz	r3, 224b4 <bt_gatt_notification+0x52>
   22478:	f1b3 0614 	subs.w	r6, r3, #20
   2247c:	d01a      	beq.n	224b4 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2247e:	681c      	ldr	r4, [r3, #0]
   22480:	b104      	cbz	r4, 22484 <bt_gatt_notification+0x22>
   22482:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   22484:	8933      	ldrh	r3, [r6, #8]
   22486:	4543      	cmp	r3, r8
   22488:	d10a      	bne.n	224a0 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   2248a:	6835      	ldr	r5, [r6, #0]
   2248c:	4653      	mov	r3, sl
   2248e:	464a      	mov	r2, r9
   22490:	4631      	mov	r1, r6
   22492:	4638      	mov	r0, r7
   22494:	47a8      	blx	r5
   22496:	b918      	cbnz	r0, 224a0 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   22498:	4631      	mov	r1, r6
   2249a:	4638      	mov	r0, r7
   2249c:	f7f4 fcc2 	bl	16e24 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   224a0:	b144      	cbz	r4, 224b4 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   224a2:	f114 0514 	adds.w	r5, r4, #20
   224a6:	d002      	beq.n	224ae <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   224a8:	6965      	ldr	r5, [r4, #20]
   224aa:	b105      	cbz	r5, 224ae <bt_gatt_notification+0x4c>
   224ac:	3d14      	subs	r5, #20
{
   224ae:	4626      	mov	r6, r4
   224b0:	462c      	mov	r4, r5
   224b2:	e7e7      	b.n	22484 <bt_gatt_notification+0x22>
}
   224b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000224b8 <bt_gatt_mult_notification>:
{
   224b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224bc:	b085      	sub	sp, #20
   224be:	4681      	mov	r9, r0
   224c0:	460c      	mov	r4, r1
   224c2:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   224c4:	f7f4 f870 	bl	165a8 <gatt_sub_find>
	if (!sub) {
   224c8:	4607      	mov	r7, r0
   224ca:	b140      	cbz	r0, 224de <bt_gatt_mult_notification+0x26>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   224cc:	462a      	mov	r2, r5
   224ce:	4621      	mov	r1, r4
   224d0:	a801      	add	r0, sp, #4
   224d2:	f000 f89e 	bl	22612 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   224d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   224da:	2b04      	cmp	r3, #4
   224dc:	d802      	bhi.n	224e4 <bt_gatt_mult_notification+0x2c>
}
   224de:	b005      	add	sp, #20
   224e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   224e4:	2104      	movs	r1, #4
   224e6:	eb0d 0001 	add.w	r0, sp, r1
   224ea:	f7f5 f8db 	bl	176a4 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   224ee:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   224f2:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		if (len > buf.len) {
   224f6:	455b      	cmp	r3, fp
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   224f8:	4605      	mov	r5, r0
		if (len > buf.len) {
   224fa:	d3f0      	bcc.n	224de <bt_gatt_mult_notification+0x26>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   224fc:	68bb      	ldr	r3, [r7, #8]
   224fe:	b303      	cbz	r3, 22542 <bt_gatt_mult_notification+0x8a>
   22500:	f1b3 0614 	subs.w	r6, r3, #20
   22504:	d01d      	beq.n	22542 <bt_gatt_mult_notification+0x8a>
   22506:	681c      	ldr	r4, [r3, #0]
   22508:	b104      	cbz	r4, 2250c <bt_gatt_mult_notification+0x54>
   2250a:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   2250c:	46a8      	mov	r8, r5
   2250e:	f838 ab04 	ldrh.w	sl, [r8], #4
			if (handle != params->value_handle) {
   22512:	8933      	ldrh	r3, [r6, #8]
   22514:	4553      	cmp	r3, sl
   22516:	d10a      	bne.n	2252e <bt_gatt_mult_notification+0x76>
			if (params->notify(conn, params, nfy->value, len) ==
   22518:	6835      	ldr	r5, [r6, #0]
   2251a:	465b      	mov	r3, fp
   2251c:	4642      	mov	r2, r8
   2251e:	4631      	mov	r1, r6
   22520:	4648      	mov	r0, r9
   22522:	47a8      	blx	r5
   22524:	b918      	cbnz	r0, 2252e <bt_gatt_mult_notification+0x76>
				bt_gatt_unsubscribe(conn, params);
   22526:	4631      	mov	r1, r6
   22528:	4648      	mov	r0, r9
   2252a:	f7f4 fc7b 	bl	16e24 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   2252e:	b144      	cbz	r4, 22542 <bt_gatt_mult_notification+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22530:	f114 0214 	adds.w	r2, r4, #20
   22534:	d002      	beq.n	2253c <bt_gatt_mult_notification+0x84>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22536:	6962      	ldr	r2, [r4, #20]
   22538:	b102      	cbz	r2, 2253c <bt_gatt_mult_notification+0x84>
   2253a:	3a14      	subs	r2, #20
{
   2253c:	4626      	mov	r6, r4
   2253e:	4614      	mov	r4, r2
   22540:	e7e7      	b.n	22512 <bt_gatt_mult_notification+0x5a>
		net_buf_simple_pull_mem(&buf, len);
   22542:	4659      	mov	r1, fp
   22544:	a801      	add	r0, sp, #4
   22546:	f7f5 f8ad 	bl	176a4 <net_buf_simple_pull_mem>
   2254a:	e7c4      	b.n	224d6 <bt_gatt_mult_notification+0x1e>

0002254c <bt_gatt_change_aware>:
{
   2254c:	b510      	push	{r4, lr}
   2254e:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   22550:	f7f3 fffc 	bl	1654c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   22554:	4603      	mov	r3, r0
   22556:	b910      	cbnz	r0, 2255e <bt_gatt_change_aware+0x12>
		return true;
   22558:	2401      	movs	r4, #1
}
   2255a:	4620      	mov	r0, r4
   2255c:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2255e:	7a02      	ldrb	r2, [r0, #8]
   22560:	07d2      	lsls	r2, r2, #31
   22562:	d5f9      	bpl.n	22558 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22564:	f3bf 8f5b 	dmb	ish
   22568:	68d9      	ldr	r1, [r3, #12]
   2256a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2256e:	f011 0101 	ands.w	r1, r1, #1
   22572:	f100 000c 	add.w	r0, r0, #12
   22576:	d1ef      	bne.n	22558 <bt_gatt_change_aware+0xc>
	if (!req) {
   22578:	2c00      	cmp	r4, #0
   2257a:	d0ee      	beq.n	2255a <bt_gatt_change_aware+0xe>
   2257c:	f3bf 8f5b 	dmb	ish
   22580:	68db      	ldr	r3, [r3, #12]
   22582:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   22586:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2258a:	079b      	lsls	r3, r3, #30
   2258c:	d50e      	bpl.n	225ac <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2258e:	f3bf 8f5b 	dmb	ish
   22592:	e850 3f00 	ldrex	r3, [r0]
   22596:	f023 0302 	bic.w	r3, r3, #2
   2259a:	e840 3200 	strex	r2, r3, [r0]
   2259e:	2a00      	cmp	r2, #0
   225a0:	d1f7      	bne.n	22592 <bt_gatt_change_aware+0x46>
   225a2:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   225a6:	f7ff fdc1 	bl	2212c <atomic_set_bit>
	return false;
   225aa:	e7d6      	b.n	2255a <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   225ac:	2101      	movs	r1, #1
   225ae:	e7fa      	b.n	225a6 <bt_gatt_change_aware+0x5a>

000225b0 <bt_smp_recv>:
{
   225b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   225b2:	2100      	movs	r1, #0
   225b4:	f04f 32ff 	mov.w	r2, #4294967295
   225b8:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   225bc:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   225be:	4608      	mov	r0, r1
   225c0:	f7fe fe8d 	bl	212de <bt_l2cap_create_pdu_timeout>
   225c4:	f100 0608 	add.w	r6, r0, #8
   225c8:	4604      	mov	r4, r0
   225ca:	2101      	movs	r1, #1
   225cc:	4630      	mov	r0, r6
   225ce:	f7f5 f88b 	bl	176e8 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   225d2:	2505      	movs	r5, #5
   225d4:	7005      	strb	r5, [r0, #0]
   225d6:	2101      	movs	r1, #1
   225d8:	4630      	mov	r0, r6
   225da:	f7f5 f885 	bl	176e8 <net_buf_simple_add>
   225de:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   225e0:	7005      	strb	r5, [r0, #0]
   225e2:	4622      	mov	r2, r4
   225e4:	9300      	str	r3, [sp, #0]
   225e6:	2106      	movs	r1, #6
   225e8:	4638      	mov	r0, r7
   225ea:	f7fe fe7b 	bl	212e4 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   225ee:	b110      	cbz	r0, 225f6 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   225f0:	4620      	mov	r0, r4
   225f2:	f7f4 ff49 	bl	17488 <net_buf_unref>
}
   225f6:	2000      	movs	r0, #0
   225f8:	b003      	add	sp, #12
   225fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000225fc <bt_smp_sign>:
   225fc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22600:	4770      	bx	lr

00022602 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   22602:	2000      	movs	r0, #0
   22604:	4770      	bx	lr

00022606 <fixed_data_unref>:
}
   22606:	4770      	bx	lr

00022608 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   22608:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2260a:	6849      	ldr	r1, [r1, #4]
   2260c:	6809      	ldr	r1, [r1, #0]
   2260e:	f7f4 bdf3 	b.w	171f8 <net_buf_alloc_len>

00022612 <net_buf_simple_init_with_data>:
	buf->size  = size;
   22612:	b292      	uxth	r2, r2
	buf->__buf = data;
   22614:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   22616:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   22618:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2261a:	8082      	strh	r2, [r0, #4]
}
   2261c:	4770      	bx	lr

0002261e <net_buf_simple_pull_u8>:
{
   2261e:	b510      	push	{r4, lr}
	val = buf->data[0];
   22620:	6803      	ldr	r3, [r0, #0]
   22622:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   22624:	2101      	movs	r1, #1
   22626:	f7f5 f81d 	bl	17664 <net_buf_simple_pull>
}
   2262a:	4620      	mov	r0, r4
   2262c:	bd10      	pop	{r4, pc}

0002262e <net_buf_simple_pull_le16>:
{
   2262e:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   22630:	6803      	ldr	r3, [r0, #0]
   22632:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   22634:	2102      	movs	r1, #2
   22636:	f7f5 f815 	bl	17664 <net_buf_simple_pull>
}
   2263a:	4620      	mov	r0, r4
   2263c:	bd10      	pop	{r4, pc}

0002263e <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2263e:	6802      	ldr	r2, [r0, #0]
   22640:	6880      	ldr	r0, [r0, #8]
}
   22642:	1a10      	subs	r0, r2, r0
   22644:	4770      	bx	lr

00022646 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   22646:	8883      	ldrh	r3, [r0, #4]
   22648:	88c2      	ldrh	r2, [r0, #6]
   2264a:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2264c:	6803      	ldr	r3, [r0, #0]
   2264e:	6880      	ldr	r0, [r0, #8]
   22650:	1a18      	subs	r0, r3, r0
}
   22652:	1a10      	subs	r0, r2, r0
   22654:	4770      	bx	lr

00022656 <net_buf_simple_add_mem>:
{
   22656:	b538      	push	{r3, r4, r5, lr}
   22658:	460d      	mov	r5, r1
   2265a:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2265c:	4611      	mov	r1, r2
   2265e:	f7f5 f843 	bl	176e8 <net_buf_simple_add>
   22662:	4622      	mov	r2, r4
   22664:	4629      	mov	r1, r5
}
   22666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2266a:	f000 baf6 	b.w	22c5a <memcpy>

0002266e <net_buf_simple_add_le16>:
{
   2266e:	b510      	push	{r4, lr}
   22670:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   22672:	2102      	movs	r1, #2
   22674:	f7f5 f838 	bl	176e8 <net_buf_simple_add>
	dst[0] = val;
   22678:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   2267a:	0a24      	lsrs	r4, r4, #8
   2267c:	7044      	strb	r4, [r0, #1]
}
   2267e:	bd10      	pop	{r4, pc}

00022680 <set_starting_state>:
{
   22680:	b510      	push	{r4, lr}
	__asm__ volatile(
   22682:	f04f 0340 	mov.w	r3, #64	; 0x40
   22686:	f3ef 8211 	mrs	r2, BASEPRI
   2268a:	f383 8812 	msr	BASEPRI_MAX, r3
   2268e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   22692:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   22694:	f003 0407 	and.w	r4, r3, #7
   22698:	2c01      	cmp	r4, #1
   2269a:	d106      	bne.n	226aa <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2269c:	6001      	str	r1, [r0, #0]
	int err = 0;
   2269e:	2000      	movs	r0, #0
	__asm__ volatile(
   226a0:	f382 8811 	msr	BASEPRI, r2
   226a4:	f3bf 8f6f 	isb	sy
}
   226a8:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   226aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   226ae:	428b      	cmp	r3, r1
		err = -EALREADY;
   226b0:	bf14      	ite	ne
   226b2:	f04f 30ff 	movne.w	r0, #4294967295
   226b6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   226ba:	e7f1      	b.n	226a0 <set_starting_state+0x20>

000226bc <set_on_state>:
	__asm__ volatile(
   226bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   226c0:	f3ef 8211 	mrs	r2, BASEPRI
   226c4:	f383 8812 	msr	BASEPRI_MAX, r3
   226c8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   226cc:	6803      	ldr	r3, [r0, #0]
   226ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   226d2:	f043 0302 	orr.w	r3, r3, #2
   226d6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   226d8:	f382 8811 	msr	BASEPRI, r2
   226dc:	f3bf 8f6f 	isb	sy
}
   226e0:	4770      	bx	lr

000226e2 <onoff_started_callback>:
	return &data->mgr[type];
   226e2:	6900      	ldr	r0, [r0, #16]
   226e4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   226e6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   226ea:	2100      	movs	r1, #0
   226ec:	4710      	bx	r2

000226ee <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   226ee:	2000      	movs	r0, #0
   226f0:	f7f6 beb4 	b.w	1945c <nrfx_clock_start>

000226f4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   226f4:	2000      	movs	r0, #0
   226f6:	f7f6 bedb 	b.w	194b0 <nrfx_clock_stop>

000226fa <api_stop>:
	return stop(dev, subsys, CTX_API);
   226fa:	2280      	movs	r2, #128	; 0x80
   226fc:	f7f5 b85e 	b.w	177bc <stop>

00022700 <blocking_start_callback>:
{
   22700:	4610      	mov	r0, r2
   22702:	f7f8 b8bb 	b.w	1a87c <z_impl_k_sem_give>

00022706 <api_start>:
{
   22706:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2270a:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   2270c:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2270e:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   22710:	436f      	muls	r7, r5
{
   22712:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   22714:	f107 0048 	add.w	r0, r7, #72	; 0x48
   22718:	2180      	movs	r1, #128	; 0x80
   2271a:	4420      	add	r0, r4
{
   2271c:	4690      	mov	r8, r2
   2271e:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   22720:	f7ff ffae 	bl	22680 <set_starting_state>
	if (err < 0) {
   22724:	2800      	cmp	r0, #0
   22726:	db07      	blt.n	22738 <api_start+0x32>
	subdata->cb = cb;
   22728:	443c      	add	r4, r7
	subdata->user_data = user_data;
   2272a:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   2272e:	6873      	ldr	r3, [r6, #4]
   22730:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   22734:	4798      	blx	r3
	return 0;
   22736:	2000      	movs	r0, #0
}
   22738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002273c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2273c:	6843      	ldr	r3, [r0, #4]
   2273e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   22740:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   22744:	600b      	str	r3, [r1, #0]
}
   22746:	2000      	movs	r0, #0
   22748:	4770      	bx	lr

0002274a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2274a:	6843      	ldr	r3, [r0, #4]
   2274c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2274e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   22752:	4042      	eors	r2, r0
   22754:	400a      	ands	r2, r1
   22756:	4042      	eors	r2, r0
    p_reg->OUT = value;
   22758:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2275c:	2000      	movs	r0, #0
   2275e:	4770      	bx	lr

00022760 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22760:	6843      	ldr	r3, [r0, #4]
   22762:	685b      	ldr	r3, [r3, #4]
}
   22764:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   22766:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2276a:	4770      	bx	lr

0002276c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2276c:	6843      	ldr	r3, [r0, #4]
   2276e:	685b      	ldr	r3, [r3, #4]
}
   22770:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   22772:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   22776:	4770      	bx	lr

00022778 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22778:	6843      	ldr	r3, [r0, #4]
   2277a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2277c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   22780:	404b      	eors	r3, r1
    p_reg->OUT = value;
   22782:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   22786:	2000      	movs	r0, #0
   22788:	4770      	bx	lr

0002278a <nrf_gpio_cfg_sense_set>:
{
   2278a:	b513      	push	{r0, r1, r4, lr}
   2278c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2278e:	a801      	add	r0, sp, #4
{
   22790:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22792:	f7f5 fa81 	bl	17c98 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   22796:	9b01      	ldr	r3, [sp, #4]
   22798:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2279c:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   227a0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   227a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   227a8:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   227ac:	b002      	add	sp, #8
   227ae:	bd10      	pop	{r4, pc}

000227b0 <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
   227b0:	6903      	ldr	r3, [r0, #16]
{
   227b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   227b6:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
   227b8:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
   227bc:	68de      	ldr	r6, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   227be:	f8d0 b004 	ldr.w	fp, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   227c2:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   227c4:	430a      	orrs	r2, r1
   227c6:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   227ca:	f8db 2004 	ldr.w	r2, [fp, #4]
    return p_reg->IN;
   227ce:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   227d2:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   227d4:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
   227d8:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
   227da:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   227dc:	f04f 0a00 	mov.w	sl, #0
	while (check_pins) {
   227e0:	b91f      	cbnz	r7, 227ea <check_level_trigger_pins+0x3a>
}
   227e2:	4628      	mov	r0, r5
   227e4:	b003      	add	sp, #12
   227e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   227ea:	423c      	tst	r4, r7
   227ec:	d020      	beq.n	22830 <check_level_trigger_pins+0x80>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   227ee:	f89b 3008 	ldrb.w	r3, [fp, #8]
   227f2:	f00a 091f 	and.w	r9, sl, #31
			if (!(level_pins & bit)) {
   227f6:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   227f8:	ea49 1943 	orr.w	r9, r9, r3, lsl #5
			if (!(level_pins & bit)) {
   227fc:	d112      	bne.n	22824 <check_level_trigger_pins+0x74>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   227fe:	a801      	add	r0, sp, #4
   22800:	f8cd 9004 	str.w	r9, [sp, #4]
   22804:	f7f5 fa48 	bl	17c98 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   22808:	9b01      	ldr	r3, [sp, #4]
   2280a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2280e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   22812:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
   22816:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
   22818:	bf02      	ittt	eq
   2281a:	f8d8 3000 	ldreq.w	r3, [r8]
   2281e:	4323      	orreq	r3, r4
   22820:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   22824:	2100      	movs	r1, #0
   22826:	4648      	mov	r0, r9
   22828:	f7ff ffaf 	bl	2278a <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   2282c:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
   22830:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   22834:	0064      	lsls	r4, r4, #1
   22836:	e7d3      	b.n	227e0 <check_level_trigger_pins+0x30>

00022838 <cfg_level_pins>:
{
   22838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   2283c:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   2283e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   22842:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   22844:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   22848:	4313      	orrs	r3, r2
   2284a:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   2284e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   22850:	2500      	movs	r5, #0
	while (level_pins) {
   22852:	b90c      	cbnz	r4, 22858 <cfg_level_pins+0x20>
}
   22854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   22858:	4226      	tst	r6, r4
   2285a:	d010      	beq.n	2287e <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2285c:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2285e:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   22862:	40e9      	lsrs	r1, r5
   22864:	f001 0101 	and.w	r1, r1, #1
   22868:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2286c:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   22870:	b2c9      	uxtb	r1, r1
   22872:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   22876:	f7ff ff88 	bl	2278a <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2287a:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   2287e:	3501      	adds	r5, #1
		bit <<= 1;
   22880:	0076      	lsls	r6, r6, #1
   22882:	e7e6      	b.n	22852 <cfg_level_pins+0x1a>

00022884 <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   22884:	2200      	movs	r2, #0
{
   22886:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   22888:	4611      	mov	r1, r2
   2288a:	4610      	mov	r0, r2
   2288c:	f7fa ff92 	bl	1d7b4 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   22890:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
   22892:	bf18      	it	ne
   22894:	f06f 0015 	mvnne.w	r0, #21
   22898:	bd08      	pop	{r3, pc}

0002289a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2289a:	4770      	bx	lr

0002289c <sys_clock_disable>:
   2289c:	4770      	bx	lr

0002289e <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   2289e:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   228a0:	2000      	movs	r0, #0
   228a2:	f7f0 fb53 	bl	12f4c <sys_arch_reboot>

000228a6 <sdc_assertion_handler>:
	k_oops();
   228a6:	4040      	eors	r0, r0
   228a8:	f380 8811 	msr	BASEPRI, r0
   228ac:	f04f 0003 	mov.w	r0, #3
   228b0:	df02      	svc	2
}
   228b2:	4770      	bx	lr

000228b4 <m_assert_handler>:
	k_oops();
   228b4:	4040      	eors	r0, r0
   228b6:	f380 8811 	msr	BASEPRI, r0
   228ba:	f04f 0003 	mov.w	r0, #3
   228be:	df02      	svc	2
}
   228c0:	4770      	bx	lr

000228c2 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   228c2:	4668      	mov	r0, sp
   228c4:	f020 0107 	bic.w	r1, r0, #7
   228c8:	468d      	mov	sp, r1
   228ca:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   228cc:	f7e0 ffe6 	bl	389c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   228d0:	f7ef fefe 	bl	126d0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   228d4:	f7ef ffea 	bl	128ac <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   228d8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   228dc:	4685      	mov	sp, r0
   228de:	4770      	bx	lr

000228e0 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   228e0:	4668      	mov	r0, sp
   228e2:	f020 0107 	bic.w	r1, r0, #7
   228e6:	468d      	mov	sp, r1
   228e8:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   228ea:	f7e0 ff59 	bl	37a0 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   228ee:	f7ef feef 	bl	126d0 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   228f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   228f6:	4685      	mov	sp, r0
   228f8:	4770      	bx	lr

000228fa <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   228fa:	4668      	mov	r0, sp
   228fc:	f020 0107 	bic.w	r1, r0, #7
   22900:	468d      	mov	sp, r1
   22902:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   22904:	f7ea fcaf 	bl	d266 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   22908:	f7ef fee2 	bl	126d0 <_arch_isr_direct_pm>
   2290c:	f7ef ffce 	bl	128ac <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   22910:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   22914:	4685      	mov	sp, r0
   22916:	4770      	bx	lr

00022918 <nrfx_clock_enable>:
}
   22918:	4770      	bx	lr

0002291a <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2291a:	f7e1 bbd3 	b.w	40c4 <MPSL_IRQ_CLOCK_Handler>

0002291e <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   2291e:	f7fa beed 	b.w	1d6fc <nrf_cc3xx_platform_init>

00022922 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   22922:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   22924:	f7ef fd82 	bl	1242c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   22928:	f7ef fe34 	bl	12594 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   2292c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   22930:	f7fa bee4 	b.w	1d6fc <nrf_cc3xx_platform_init>

00022934 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   22934:	4700      	bx	r0

00022936 <z_device_state_init>:
}
   22936:	4770      	bx	lr

00022938 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   22938:	b138      	cbz	r0, 2294a <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2293a:	68c3      	ldr	r3, [r0, #12]
   2293c:	8818      	ldrh	r0, [r3, #0]
   2293e:	f3c0 0008 	ubfx	r0, r0, #0, #9
   22942:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   22946:	4258      	negs	r0, r3
   22948:	4158      	adcs	r0, r3
}
   2294a:	4770      	bx	lr

0002294c <k_heap_init>:
{
   2294c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2294e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   22952:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   22956:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   22958:	f7ee bd00 	b.w	1135c <sys_heap_init>

0002295c <k_mem_slab_init>:
{
   2295c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2295e:	2400      	movs	r4, #0
   22960:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   22962:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22964:	ea41 0402 	orr.w	r4, r1, r2
   22968:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2296c:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   22970:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22972:	d10c      	bne.n	2298e <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   22974:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   22976:	42a3      	cmp	r3, r4
   22978:	d103      	bne.n	22982 <k_mem_slab_init+0x26>
   2297a:	e9c0 0000 	strd	r0, r0, [r0]
}
   2297e:	2000      	movs	r0, #0
}
   22980:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   22982:	6985      	ldr	r5, [r0, #24]
   22984:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   22986:	3401      	adds	r4, #1
		slab->free_list = p;
   22988:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   2298a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2298c:	e7f3      	b.n	22976 <k_mem_slab_init+0x1a>
		return -EINVAL;
   2298e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   22992:	e7f5      	b.n	22980 <k_mem_slab_init+0x24>

00022994 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   22994:	f3ef 8005 	mrs	r0, IPSR
}
   22998:	3800      	subs	r0, #0
   2299a:	bf18      	it	ne
   2299c:	2001      	movne	r0, #1
   2299e:	4770      	bx	lr

000229a0 <z_impl_k_thread_name_set>:
}
   229a0:	f06f 0057 	mvn.w	r0, #87	; 0x57
   229a4:	4770      	bx	lr

000229a6 <z_impl_k_thread_start>:
	z_sched_start(thread);
   229a6:	f7f9 b8c7 	b.w	1bb38 <z_sched_start>

000229aa <z_pm_save_idle_exit>:
{
   229aa:	b508      	push	{r3, lr}
	pm_system_resume();
   229ac:	f7ef f9e4 	bl	11d78 <pm_system_resume>
}
   229b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   229b4:	f7ff bf71 	b.w	2289a <sys_clock_idle_exit>

000229b8 <z_impl_k_mutex_init>:
{
   229b8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   229ba:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   229bc:	e9c3 0002 	strd	r0, r0, [r3, #8]
   229c0:	e9c3 3300 	strd	r3, r3, [r3]
}
   229c4:	4770      	bx	lr

000229c6 <z_queue_node_peek>:
{
   229c6:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   229c8:	4604      	mov	r4, r0
   229ca:	b130      	cbz	r0, 229da <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   229cc:	6802      	ldr	r2, [r0, #0]
   229ce:	0793      	lsls	r3, r2, #30
   229d0:	d003      	beq.n	229da <z_queue_node_peek+0x14>
		ret = anode->data;
   229d2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   229d4:	b109      	cbz	r1, 229da <z_queue_node_peek+0x14>
			k_free(anode);
   229d6:	f000 f929 	bl	22c2c <k_free>
}
   229da:	4620      	mov	r0, r4
   229dc:	bd10      	pop	{r4, pc}

000229de <z_impl_k_queue_init>:
	list->head = NULL;
   229de:	2300      	movs	r3, #0
	list->tail = NULL;
   229e0:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   229e4:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   229e6:	f100 030c 	add.w	r3, r0, #12
   229ea:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   229ee:	f100 0314 	add.w	r3, r0, #20
   229f2:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   229f6:	4770      	bx	lr

000229f8 <k_queue_append>:
{
   229f8:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   229fa:	2301      	movs	r3, #1
   229fc:	9300      	str	r3, [sp, #0]
   229fe:	2300      	movs	r3, #0
{
   22a00:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   22a02:	4619      	mov	r1, r3
   22a04:	f7f7 fdd6 	bl	1a5b4 <queue_insert>
}
   22a08:	b003      	add	sp, #12
   22a0a:	f85d fb04 	ldr.w	pc, [sp], #4

00022a0e <k_queue_prepend>:
{
   22a0e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   22a10:	2300      	movs	r3, #0
{
   22a12:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   22a14:	9300      	str	r3, [sp, #0]
   22a16:	4619      	mov	r1, r3
   22a18:	f7f7 fdcc 	bl	1a5b4 <queue_insert>
}
   22a1c:	b003      	add	sp, #12
   22a1e:	f85d fb04 	ldr.w	pc, [sp], #4

00022a22 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   22a22:	b15a      	cbz	r2, 22a3c <z_impl_k_sem_init+0x1a>
   22a24:	428a      	cmp	r2, r1
   22a26:	d309      	bcc.n	22a3c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   22a28:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   22a2c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   22a30:	e9c0 0000 	strd	r0, r0, [r0]
   22a34:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   22a38:	2000      	movs	r0, #0
   22a3a:	4770      	bx	lr
		return -EINVAL;
   22a3c:	f06f 0015 	mvn.w	r0, #21
}
   22a40:	4770      	bx	lr

00022a42 <notify_queue_locked>:
	if (queue != NULL) {
   22a42:	b120      	cbz	r0, 22a4e <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   22a44:	2200      	movs	r2, #0
   22a46:	4611      	mov	r1, r2
   22a48:	3088      	adds	r0, #136	; 0x88
   22a4a:	f7f9 be41 	b.w	1c6d0 <z_sched_wake>
}
   22a4e:	4770      	bx	lr

00022a50 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   22a50:	68c3      	ldr	r3, [r0, #12]
{
   22a52:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   22a54:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   22a58:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   22a5c:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   22a5e:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   22a60:	d502      	bpl.n	22a68 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   22a62:	3010      	adds	r0, #16
   22a64:	f7f9 ffdc 	bl	1ca20 <z_abort_timeout>
}
   22a68:	4620      	mov	r0, r4
   22a6a:	bd10      	pop	{r4, pc}

00022a6c <cancel_async_locked>:
{
   22a6c:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22a6e:	68c0      	ldr	r0, [r0, #12]
{
   22a70:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22a72:	0784      	lsls	r4, r0, #30
   22a74:	f3c0 0140 	ubfx	r1, r0, #1, #1
   22a78:	d416      	bmi.n	22aa8 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   22a7a:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   22a7e:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   22a80:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   22a82:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   22a84:	d510      	bpl.n	22aa8 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22a86:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   22a8a:	b168      	cbz	r0, 22aa8 <cancel_async_locked+0x3c>
   22a8c:	4283      	cmp	r3, r0
   22a8e:	d11d      	bne.n	22acc <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   22a90:	6818      	ldr	r0, [r3, #0]
   22a92:	b999      	cbnz	r1, 22abc <cancel_async_locked+0x50>
   22a94:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   22a98:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   22a9c:	428b      	cmp	r3, r1
   22a9e:	d101      	bne.n	22aa4 <cancel_async_locked+0x38>
	list->tail = node;
   22aa0:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   22aa4:	2200      	movs	r2, #0
   22aa6:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   22aa8:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   22aaa:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   22aae:	bf1e      	ittt	ne
   22ab0:	f042 0202 	orrne.w	r2, r2, #2
   22ab4:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   22ab6:	f002 000f 	andne.w	r0, r2, #15
}
   22aba:	bd10      	pop	{r4, pc}
   22abc:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   22abe:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   22ac2:	4283      	cmp	r3, r0
	list->tail = node;
   22ac4:	bf08      	it	eq
   22ac6:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   22aca:	e7eb      	b.n	22aa4 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22acc:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22ace:	6800      	ldr	r0, [r0, #0]
   22ad0:	e7db      	b.n	22a8a <cancel_async_locked+0x1e>

00022ad2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   22ad2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   22ad6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   22ada:	4283      	cmp	r3, r0
		return b2 - b1;
   22adc:	bf14      	ite	ne
   22ade:	1ac0      	subne	r0, r0, r3
	return 0;
   22ae0:	2000      	moveq	r0, #0
}
   22ae2:	4770      	bx	lr

00022ae4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   22ae4:	4603      	mov	r3, r0
   22ae6:	b920      	cbnz	r0, 22af2 <z_reschedule_irqlock+0xe>
   22ae8:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   22aec:	b90a      	cbnz	r2, 22af2 <z_reschedule_irqlock+0xe>
   22aee:	f7ef be1d 	b.w	1272c <arch_swap>
   22af2:	f383 8811 	msr	BASEPRI, r3
   22af6:	f3bf 8f6f 	isb	sy
}
   22afa:	4770      	bx	lr

00022afc <z_reschedule_unlocked>:
	__asm__ volatile(
   22afc:	f04f 0340 	mov.w	r3, #64	; 0x40
   22b00:	f3ef 8011 	mrs	r0, BASEPRI
   22b04:	f383 8812 	msr	BASEPRI_MAX, r3
   22b08:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   22b0c:	f7ff bfea 	b.w	22ae4 <z_reschedule_irqlock>

00022b10 <z_priq_dumb_best>:
{
   22b10:	4603      	mov	r3, r0
	return list->head == list;
   22b12:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22b14:	4283      	cmp	r3, r0
   22b16:	d003      	beq.n	22b20 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   22b18:	2800      	cmp	r0, #0
   22b1a:	bf38      	it	cc
   22b1c:	2000      	movcc	r0, #0
   22b1e:	4770      	bx	lr
	struct k_thread *thread = NULL;
   22b20:	2000      	movs	r0, #0
}
   22b22:	4770      	bx	lr

00022b24 <z_unpend_all>:
{
   22b24:	b538      	push	{r3, r4, r5, lr}
   22b26:	4605      	mov	r5, r0
	int need_sched = 0;
   22b28:	2000      	movs	r0, #0
	return list->head == list;
   22b2a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22b2c:	42a5      	cmp	r5, r4
   22b2e:	d000      	beq.n	22b32 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22b30:	b904      	cbnz	r4, 22b34 <z_unpend_all+0x10>
}
   22b32:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   22b34:	4620      	mov	r0, r4
   22b36:	f7f8 fe13 	bl	1b760 <z_unpend_thread>
		z_ready_thread(thread);
   22b3a:	4620      	mov	r0, r4
   22b3c:	f7f8 ffb4 	bl	1baa8 <z_ready_thread>
		need_sched = 1;
   22b40:	2001      	movs	r0, #1
   22b42:	e7f2      	b.n	22b2a <z_unpend_all+0x6>

00022b44 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   22b44:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   22b46:	f7fa f91d 	bl	1cd84 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   22b4a:	bd08      	pop	{r3, pc}

00022b4c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   22b4c:	b108      	cbz	r0, 22b52 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   22b4e:	f7f0 ba13 	b.w	12f78 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   22b52:	4770      	bx	lr

00022b54 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   22b54:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22b56:	1c4b      	adds	r3, r1, #1
   22b58:	bf08      	it	eq
   22b5a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   22b5e:	4604      	mov	r4, r0
   22b60:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22b62:	d013      	beq.n	22b8c <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22b64:	ea54 0105 	orrs.w	r1, r4, r5
   22b68:	d103      	bne.n	22b72 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   22b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   22b6e:	f7fa b909 	b.w	1cd84 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   22b72:	f06f 0101 	mvn.w	r1, #1
   22b76:	1a0a      	subs	r2, r1, r0
   22b78:	f04f 31ff 	mov.w	r1, #4294967295
   22b7c:	eb61 0305 	sbc.w	r3, r1, r5
   22b80:	2a00      	cmp	r2, #0
   22b82:	f173 0100 	sbcs.w	r1, r3, #0
   22b86:	db02      	blt.n	22b8e <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   22b88:	4610      	mov	r0, r2
   22b8a:	4619      	mov	r1, r3
}
   22b8c:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   22b8e:	f7fa f8f9 	bl	1cd84 <sys_clock_tick_get>
   22b92:	2c01      	cmp	r4, #1
   22b94:	f175 0300 	sbcs.w	r3, r5, #0
   22b98:	bfbc      	itt	lt
   22b9a:	2401      	movlt	r4, #1
   22b9c:	2500      	movlt	r5, #0
   22b9e:	1820      	adds	r0, r4, r0
   22ba0:	eb45 0101 	adc.w	r1, r5, r1
   22ba4:	e7f2      	b.n	22b8c <sys_clock_timeout_end_calc+0x38>

00022ba6 <add_event>:
{
   22ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22ba8:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   22baa:	e9d0 2300 	ldrd	r2, r3, [r0]
   22bae:	4290      	cmp	r0, r2
   22bb0:	4604      	mov	r4, r0
   22bb2:	460d      	mov	r5, r1
   22bb4:	d105      	bne.n	22bc2 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   22bb6:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   22bb8:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   22bbc:	601d      	str	r5, [r3, #0]
	list->tail = node;
   22bbe:	6065      	str	r5, [r4, #4]
}
   22bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   22bc2:	2b00      	cmp	r3, #0
   22bc4:	d0f7      	beq.n	22bb6 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   22bc6:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   22bc8:	b100      	cbz	r0, 22bcc <add_event+0x26>
   22bca:	3860      	subs	r0, #96	; 0x60
   22bcc:	b107      	cbz	r7, 22bd0 <add_event+0x2a>
   22bce:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   22bd0:	4639      	mov	r1, r7
   22bd2:	f7ff ff7e 	bl	22ad2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   22bd6:	2800      	cmp	r0, #0
   22bd8:	dced      	bgt.n	22bb6 <add_event+0x10>
	return list->head == list;
   22bda:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22bdc:	42b4      	cmp	r4, r6
   22bde:	d0ea      	beq.n	22bb6 <add_event+0x10>
   22be0:	2e00      	cmp	r6, #0
   22be2:	bf38      	it	cc
   22be4:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22be6:	2e00      	cmp	r6, #0
   22be8:	d0e5      	beq.n	22bb6 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   22bea:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   22bec:	b101      	cbz	r1, 22bf0 <add_event+0x4a>
   22bee:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   22bf0:	4638      	mov	r0, r7
   22bf2:	f7ff ff6e 	bl	22ad2 <z_sched_prio_cmp>
   22bf6:	2800      	cmp	r0, #0
   22bf8:	dd05      	ble.n	22c06 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   22bfa:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   22bfc:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   22c00:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   22c02:	6075      	str	r5, [r6, #4]
			return;
   22c04:	e7dc      	b.n	22bc0 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   22c06:	6863      	ldr	r3, [r4, #4]
   22c08:	42b3      	cmp	r3, r6
   22c0a:	d0d4      	beq.n	22bb6 <add_event+0x10>
   22c0c:	6836      	ldr	r6, [r6, #0]
   22c0e:	e7ea      	b.n	22be6 <add_event+0x40>

00022c10 <z_handle_obj_poll_events>:
{
   22c10:	4603      	mov	r3, r0
	return list->head == list;
   22c12:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   22c14:	4283      	cmp	r3, r0
   22c16:	d008      	beq.n	22c2a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   22c18:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22c1c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22c1e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22c20:	2300      	movs	r3, #0
	node->prev = NULL;
   22c22:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   22c26:	f7fa baed 	b.w	1d204 <signal_poll_event>
}
   22c2a:	4770      	bx	lr

00022c2c <k_free>:
	if (ptr != NULL) {
   22c2c:	b120      	cbz	r0, 22c38 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   22c2e:	1f01      	subs	r1, r0, #4
   22c30:	f850 0c04 	ldr.w	r0, [r0, #-4]
   22c34:	f7f7 b802 	b.w	19c3c <k_heap_free>
}
   22c38:	4770      	bx	lr

00022c3a <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   22c3a:	4770      	bx	lr

00022c3c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   22c3c:	4770      	bx	lr

00022c3e <memcmp>:
   22c3e:	b530      	push	{r4, r5, lr}
   22c40:	3901      	subs	r1, #1
   22c42:	2400      	movs	r4, #0
   22c44:	42a2      	cmp	r2, r4
   22c46:	d101      	bne.n	22c4c <memcmp+0xe>
   22c48:	2000      	movs	r0, #0
   22c4a:	e005      	b.n	22c58 <memcmp+0x1a>
   22c4c:	5d03      	ldrb	r3, [r0, r4]
   22c4e:	3401      	adds	r4, #1
   22c50:	5d0d      	ldrb	r5, [r1, r4]
   22c52:	42ab      	cmp	r3, r5
   22c54:	d0f6      	beq.n	22c44 <memcmp+0x6>
   22c56:	1b58      	subs	r0, r3, r5
   22c58:	bd30      	pop	{r4, r5, pc}

00022c5a <memcpy>:
   22c5a:	440a      	add	r2, r1
   22c5c:	4291      	cmp	r1, r2
   22c5e:	f100 33ff 	add.w	r3, r0, #4294967295
   22c62:	d100      	bne.n	22c66 <memcpy+0xc>
   22c64:	4770      	bx	lr
   22c66:	b510      	push	{r4, lr}
   22c68:	f811 4b01 	ldrb.w	r4, [r1], #1
   22c6c:	f803 4f01 	strb.w	r4, [r3, #1]!
   22c70:	4291      	cmp	r1, r2
   22c72:	d1f9      	bne.n	22c68 <memcpy+0xe>
   22c74:	bd10      	pop	{r4, pc}

00022c76 <memmove>:
   22c76:	4288      	cmp	r0, r1
   22c78:	b510      	push	{r4, lr}
   22c7a:	eb01 0402 	add.w	r4, r1, r2
   22c7e:	d902      	bls.n	22c86 <memmove+0x10>
   22c80:	4284      	cmp	r4, r0
   22c82:	4623      	mov	r3, r4
   22c84:	d807      	bhi.n	22c96 <memmove+0x20>
   22c86:	1e43      	subs	r3, r0, #1
   22c88:	42a1      	cmp	r1, r4
   22c8a:	d008      	beq.n	22c9e <memmove+0x28>
   22c8c:	f811 2b01 	ldrb.w	r2, [r1], #1
   22c90:	f803 2f01 	strb.w	r2, [r3, #1]!
   22c94:	e7f8      	b.n	22c88 <memmove+0x12>
   22c96:	4402      	add	r2, r0
   22c98:	4601      	mov	r1, r0
   22c9a:	428a      	cmp	r2, r1
   22c9c:	d100      	bne.n	22ca0 <memmove+0x2a>
   22c9e:	bd10      	pop	{r4, pc}
   22ca0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   22ca4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   22ca8:	e7f7      	b.n	22c9a <memmove+0x24>

00022caa <memset>:
   22caa:	4402      	add	r2, r0
   22cac:	4603      	mov	r3, r0
   22cae:	4293      	cmp	r3, r2
   22cb0:	d100      	bne.n	22cb4 <memset+0xa>
   22cb2:	4770      	bx	lr
   22cb4:	f803 1b01 	strb.w	r1, [r3], #1
   22cb8:	e7f9      	b.n	22cae <memset+0x4>

00022cba <strcpy>:
   22cba:	4603      	mov	r3, r0
   22cbc:	f811 2b01 	ldrb.w	r2, [r1], #1
   22cc0:	f803 2b01 	strb.w	r2, [r3], #1
   22cc4:	2a00      	cmp	r2, #0
   22cc6:	d1f9      	bne.n	22cbc <strcpy+0x2>
   22cc8:	4770      	bx	lr

00022cca <strnlen>:
   22cca:	b510      	push	{r4, lr}
   22ccc:	4602      	mov	r2, r0
   22cce:	4401      	add	r1, r0
   22cd0:	428a      	cmp	r2, r1
   22cd2:	4613      	mov	r3, r2
   22cd4:	d101      	bne.n	22cda <strnlen+0x10>
   22cd6:	1a18      	subs	r0, r3, r0
   22cd8:	bd10      	pop	{r4, pc}
   22cda:	781c      	ldrb	r4, [r3, #0]
   22cdc:	3201      	adds	r2, #1
   22cde:	2c00      	cmp	r4, #0
   22ce0:	d1f6      	bne.n	22cd0 <strnlen+0x6>
   22ce2:	e7f8      	b.n	22cd6 <strnlen+0xc>

00022ce4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   22ce4:	f7f6 bc44 	b.w	19570 <SystemInit>
