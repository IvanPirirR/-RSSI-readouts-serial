
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20003ee0 	.word	0x20003ee0
}
   4:	00011885 	.word	0x00011885
   8:	0001d233 	.word	0x0001d233
   c:	00011859 	.word	0x00011859
  10:	00011859 	.word	0x00011859
  14:	00011859 	.word	0x00011859
  18:	00011859 	.word	0x00011859
	...
  2c:	000114a9 	.word	0x000114a9
  30:	00011859 	.word	0x00011859
  34:	00000000 	.word	0x00000000
  38:	00011455 	.word	0x00011455
  3c:	00017559 	.word	0x00017559

00000040 <_irq_vector_table>:
  40:	00011561 0001f279 00011561 00011561     a...y...a...a...
  50:	00011561 00011561 00011561 00011561     a...a...a...a...
  60:	0001f241 00011561 00011561 0001f25f     A...a...a..._...
  70:	00011561 00011561 00011561 00011561     a...a...a...a...
  80:	00011561 00011561 00011561 00011561     a...a...a...a...
  90:	00011561 00011561 00011561 00011561     a...a...a...a...
  a0:	00011561 00011561 00011561 00011561     a...a...a...a...
  b0:	00011561 00011561 00011561 00011561     a...a...a...a...
  c0:	00011561 00011561 00011561 00011561     a...a...a...a...
  d0:	00011561 00011561 00011561              a...a...a...

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b96c 	b.w	3cc <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9e08      	ldr	r6, [sp, #32]
     112:	460d      	mov	r5, r1
     114:	4604      	mov	r4, r0
     116:	468e      	mov	lr, r1
     118:	2b00      	cmp	r3, #0
     11a:	f040 8082 	bne.w	222 <CONFIG_FLASH_SIZE+0x22>
     11e:	428a      	cmp	r2, r1
     120:	4617      	mov	r7, r2
     122:	d946      	bls.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     124:	fab2 f282 	clz	r2, r2
     128:	b14a      	cbz	r2, 13e <__udivmoddi4+0x32>
     12a:	f1c2 0120 	rsb	r1, r2, #32
     12e:	fa05 f302 	lsl.w	r3, r5, r2
     132:	fa20 f101 	lsr.w	r1, r0, r1
     136:	4097      	lsls	r7, r2
     138:	ea41 0e03 	orr.w	lr, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     142:	0c23      	lsrs	r3, r4, #16
     144:	fbbe fcf8 	udiv	ip, lr, r8
     148:	b2b9      	uxth	r1, r7
     14a:	fb08 ee1c 	mls	lr, r8, ip, lr
     14e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     152:	fb0c f001 	mul.w	r0, ip, r1
     156:	4298      	cmp	r0, r3
     158:	d90a      	bls.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     15a:	18fb      	adds	r3, r7, r3
     15c:	f10c 35ff 	add.w	r5, ip, #4294967295
     160:	f080 8116 	bcs.w	390 <CONFIG_FLASH_SIZE+0x190>
     164:	4298      	cmp	r0, r3
     166:	f240 8113 	bls.w	390 <CONFIG_FLASH_SIZE+0x190>
     16a:	f1ac 0c02 	sub.w	ip, ip, #2
     16e:	443b      	add	r3, r7
     170:	1a1b      	subs	r3, r3, r0
     172:	b2a4      	uxth	r4, r4
     174:	fbb3 f0f8 	udiv	r0, r3, r8
     178:	fb08 3310 	mls	r3, r8, r0, r3
     17c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     180:	fb00 f101 	mul.w	r1, r0, r1
     184:	42a1      	cmp	r1, r4
     186:	d909      	bls.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     188:	193c      	adds	r4, r7, r4
     18a:	f100 33ff 	add.w	r3, r0, #4294967295
     18e:	f080 8101 	bcs.w	394 <CONFIG_FLASH_SIZE+0x194>
     192:	42a1      	cmp	r1, r4
     194:	f240 80fe 	bls.w	394 <CONFIG_FLASH_SIZE+0x194>
     198:	3802      	subs	r0, #2
     19a:	443c      	add	r4, r7
     19c:	1a64      	subs	r4, r4, r1
     19e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a2:	2100      	movs	r1, #0
     1a4:	b11e      	cbz	r6, 1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     1a6:	40d4      	lsrs	r4, r2
     1a8:	2300      	movs	r3, #0
     1aa:	e9c6 4300 	strd	r4, r3, [r6]
     1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b2:	b902      	cbnz	r2, 1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     1b4:	deff      	udf	#255	; 0xff
     1b6:	fab2 f282 	clz	r2, r2
     1ba:	2a00      	cmp	r2, #0
     1bc:	d14f      	bne.n	25e <CONFIG_FLASH_SIZE+0x5e>
     1be:	1bcb      	subs	r3, r1, r7
     1c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c4:	fa1f f887 	uxth.w	r8, r7
     1c8:	2101      	movs	r1, #1
     1ca:	fbb3 fcfe 	udiv	ip, r3, lr
     1ce:	0c25      	lsrs	r5, r4, #16
     1d0:	fb0e 331c 	mls	r3, lr, ip, r3
     1d4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1d8:	fb08 f30c 	mul.w	r3, r8, ip
     1dc:	42ab      	cmp	r3, r5
     1de:	d907      	bls.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     1e0:	197d      	adds	r5, r7, r5
     1e2:	f10c 30ff 	add.w	r0, ip, #4294967295
     1e6:	d202      	bcs.n	1ee <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa4>
     1e8:	42ab      	cmp	r3, r5
     1ea:	f200 80e7 	bhi.w	3bc <CONFIG_FLASH_SIZE+0x1bc>
     1ee:	4684      	mov	ip, r0
     1f0:	1aed      	subs	r5, r5, r3
     1f2:	b2a3      	uxth	r3, r4
     1f4:	fbb5 f0fe 	udiv	r0, r5, lr
     1f8:	fb0e 5510 	mls	r5, lr, r0, r5
     1fc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     200:	fb08 f800 	mul.w	r8, r8, r0
     204:	45a0      	cmp	r8, r4
     206:	d907      	bls.n	218 <CONFIG_FLASH_SIZE+0x18>
     208:	193c      	adds	r4, r7, r4
     20a:	f100 33ff 	add.w	r3, r0, #4294967295
     20e:	d202      	bcs.n	216 <CONFIG_FLASH_SIZE+0x16>
     210:	45a0      	cmp	r8, r4
     212:	f200 80d7 	bhi.w	3c4 <CONFIG_FLASH_SIZE+0x1c4>
     216:	4618      	mov	r0, r3
     218:	eba4 0408 	sub.w	r4, r4, r8
     21c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     220:	e7c0      	b.n	1a4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5a>
     222:	428b      	cmp	r3, r1
     224:	d908      	bls.n	238 <CONFIG_FLASH_SIZE+0x38>
     226:	2e00      	cmp	r6, #0
     228:	f000 80af 	beq.w	38a <CONFIG_FLASH_SIZE+0x18a>
     22c:	2100      	movs	r1, #0
     22e:	e9c6 0500 	strd	r0, r5, [r6]
     232:	4608      	mov	r0, r1
     234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     238:	fab3 f183 	clz	r1, r3
     23c:	2900      	cmp	r1, #0
     23e:	d14b      	bne.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
     240:	42ab      	cmp	r3, r5
     242:	d302      	bcc.n	24a <CONFIG_FLASH_SIZE+0x4a>
     244:	4282      	cmp	r2, r0
     246:	f200 80b7 	bhi.w	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     24a:	1a84      	subs	r4, r0, r2
     24c:	eb65 0303 	sbc.w	r3, r5, r3
     250:	2001      	movs	r0, #1
     252:	469e      	mov	lr, r3
     254:	2e00      	cmp	r6, #0
     256:	d0aa      	beq.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     258:	e9c6 4e00 	strd	r4, lr, [r6]
     25c:	e7a7      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     25e:	f1c2 0c20 	rsb	ip, r2, #32
     262:	fa01 f302 	lsl.w	r3, r1, r2
     266:	4097      	lsls	r7, r2
     268:	fa20 f00c 	lsr.w	r0, r0, ip
     26c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     270:	fa21 fc0c 	lsr.w	ip, r1, ip
     274:	4318      	orrs	r0, r3
     276:	fbbc f1fe 	udiv	r1, ip, lr
     27a:	0c05      	lsrs	r5, r0, #16
     27c:	fb0e cc11 	mls	ip, lr, r1, ip
     280:	fa1f f887 	uxth.w	r8, r7
     284:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     288:	fb01 f308 	mul.w	r3, r1, r8
     28c:	42ab      	cmp	r3, r5
     28e:	fa04 f402 	lsl.w	r4, r4, r2
     292:	d909      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     294:	197d      	adds	r5, r7, r5
     296:	f101 3cff 	add.w	ip, r1, #4294967295
     29a:	f080 808b 	bcs.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     29e:	42ab      	cmp	r3, r5
     2a0:	f240 8088 	bls.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     2a4:	3902      	subs	r1, #2
     2a6:	443d      	add	r5, r7
     2a8:	1aeb      	subs	r3, r5, r3
     2aa:	b285      	uxth	r5, r0
     2ac:	fbb3 f0fe 	udiv	r0, r3, lr
     2b0:	fb0e 3310 	mls	r3, lr, r0, r3
     2b4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2b8:	fb00 f308 	mul.w	r3, r0, r8
     2bc:	42ab      	cmp	r3, r5
     2be:	d907      	bls.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     2c0:	197d      	adds	r5, r7, r5
     2c2:	f100 3cff 	add.w	ip, r0, #4294967295
     2c6:	d271      	bcs.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2c8:	42ab      	cmp	r3, r5
     2ca:	d96f      	bls.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2cc:	3802      	subs	r0, #2
     2ce:	443d      	add	r5, r7
     2d0:	1aeb      	subs	r3, r5, r3
     2d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2d6:	e778      	b.n	1ca <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x80>
     2d8:	f1c1 0c20 	rsb	ip, r1, #32
     2dc:	408b      	lsls	r3, r1
     2de:	fa22 f70c 	lsr.w	r7, r2, ip
     2e2:	431f      	orrs	r7, r3
     2e4:	fa20 f40c 	lsr.w	r4, r0, ip
     2e8:	fa05 f301 	lsl.w	r3, r5, r1
     2ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f0:	fa25 f50c 	lsr.w	r5, r5, ip
     2f4:	431c      	orrs	r4, r3
     2f6:	0c23      	lsrs	r3, r4, #16
     2f8:	fbb5 f9fe 	udiv	r9, r5, lr
     2fc:	fa1f f887 	uxth.w	r8, r7
     300:	fb0e 5519 	mls	r5, lr, r9, r5
     304:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     308:	fb09 fa08 	mul.w	sl, r9, r8
     30c:	45aa      	cmp	sl, r5
     30e:	fa02 f201 	lsl.w	r2, r2, r1
     312:	fa00 f301 	lsl.w	r3, r0, r1
     316:	d908      	bls.n	32a <CONFIG_FLASH_SIZE+0x12a>
     318:	197d      	adds	r5, r7, r5
     31a:	f109 30ff 	add.w	r0, r9, #4294967295
     31e:	d247      	bcs.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     320:	45aa      	cmp	sl, r5
     322:	d945      	bls.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     324:	f1a9 0902 	sub.w	r9, r9, #2
     328:	443d      	add	r5, r7
     32a:	eba5 050a 	sub.w	r5, r5, sl
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fe 	udiv	r0, r5, lr
     334:	fb0e 5510 	mls	r5, lr, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f808 	mul.w	r8, r0, r8
     340:	45a0      	cmp	r8, r4
     342:	d907      	bls.n	354 <CONFIG_FLASH_SIZE+0x154>
     344:	193c      	adds	r4, r7, r4
     346:	f100 35ff 	add.w	r5, r0, #4294967295
     34a:	d22d      	bcs.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     34c:	45a0      	cmp	r8, r4
     34e:	d92b      	bls.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     350:	3802      	subs	r0, #2
     352:	443c      	add	r4, r7
     354:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     358:	eba4 0408 	sub.w	r4, r4, r8
     35c:	fba0 8902 	umull	r8, r9, r0, r2
     360:	454c      	cmp	r4, r9
     362:	46c6      	mov	lr, r8
     364:	464d      	mov	r5, r9
     366:	d319      	bcc.n	39c <CONFIG_FLASH_SIZE+0x19c>
     368:	d016      	beq.n	398 <CONFIG_FLASH_SIZE+0x198>
     36a:	b15e      	cbz	r6, 384 <CONFIG_FLASH_SIZE+0x184>
     36c:	ebb3 020e 	subs.w	r2, r3, lr
     370:	eb64 0405 	sbc.w	r4, r4, r5
     374:	fa04 fc0c 	lsl.w	ip, r4, ip
     378:	40ca      	lsrs	r2, r1
     37a:	ea4c 0202 	orr.w	r2, ip, r2
     37e:	40cc      	lsrs	r4, r1
     380:	e9c6 2400 	strd	r2, r4, [r6]
     384:	2100      	movs	r1, #0
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	4631      	mov	r1, r6
     38c:	4630      	mov	r0, r6
     38e:	e70e      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     390:	46ac      	mov	ip, r5
     392:	e6ed      	b.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     394:	4618      	mov	r0, r3
     396:	e701      	b.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     398:	4543      	cmp	r3, r8
     39a:	d2e6      	bcs.n	36a <CONFIG_FLASH_SIZE+0x16a>
     39c:	ebb8 0e02 	subs.w	lr, r8, r2
     3a0:	eb69 0507 	sbc.w	r5, r9, r7
     3a4:	3801      	subs	r0, #1
     3a6:	e7e0      	b.n	36a <CONFIG_FLASH_SIZE+0x16a>
     3a8:	4628      	mov	r0, r5
     3aa:	e7d3      	b.n	354 <CONFIG_FLASH_SIZE+0x154>
     3ac:	4660      	mov	r0, ip
     3ae:	e78f      	b.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     3b0:	4681      	mov	r9, r0
     3b2:	e7ba      	b.n	32a <CONFIG_FLASH_SIZE+0x12a>
     3b4:	4661      	mov	r1, ip
     3b6:	e777      	b.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     3b8:	4608      	mov	r0, r1
     3ba:	e74b      	b.n	254 <CONFIG_FLASH_SIZE+0x54>
     3bc:	f1ac 0c02 	sub.w	ip, ip, #2
     3c0:	443d      	add	r5, r7
     3c2:	e715      	b.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     3c4:	3802      	subs	r0, #2
     3c6:	443c      	add	r4, r7
     3c8:	e726      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     3ca:	bf00      	nop

000003cc <__aeabi_idiv0>:
     3cc:	4770      	bx	lr
     3ce:	bf00      	nop

000003d0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3d2:	4615      	mov	r5, r2
     3d4:	4a0a      	ldr	r2, [pc, #40]	; (400 <CONFIG_BT_RX_STACK_SIZE>)
     3d6:	461c      	mov	r4, r3
     3d8:	6856      	ldr	r6, [r2, #4]
     3da:	b12e      	cbz	r6, 3e8 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
     3dc:	b001      	add	sp, #4
     3de:	462a      	mov	r2, r5
     3e0:	46b4      	mov	ip, r6
     3e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     3e6:	4760      	bx	ip
     3e8:	2000      	movs	r0, #0
     3ea:	f88d 0000 	strb.w	r0, [sp]
     3ee:	4668      	mov	r0, sp
     3f0:	f00b fefa 	bl	c1e8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     3f4:	f89d 0000 	ldrb.w	r0, [sp]
     3f8:	1a28      	subs	r0, r5, r0
     3fa:	7020      	strb	r0, [r4, #0]
     3fc:	2000      	movs	r0, #0
     3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     400:	20000000 	.word	0x20000000

00000404 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     404:	4801      	ldr	r0, [pc, #4]	; (40c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     406:	7800      	ldrb	r0, [r0, #0]
     408:	4770      	bx	lr
     40a:	0000      	.short	0x0000
     40c:	20000008 	.word	0x20000008

00000410 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     410:	4905      	ldr	r1, [pc, #20]	; (428 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     412:	780a      	ldrb	r2, [r1, #0]
     414:	4290      	cmp	r0, r2
     416:	d301      	bcc.n	41c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     418:	2000      	movs	r0, #0
     41a:	4770      	bx	lr
     41c:	6849      	ldr	r1, [r1, #4]
     41e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     422:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     426:	4770      	bx	lr
     428:	20000008 	.word	0x20000008
     42c:	b570      	push	{r4, r5, r6, lr}
     42e:	4605      	mov	r5, r0
     430:	2a20      	cmp	r2, #32
     432:	d027      	beq.n	484 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10>
     434:	4819      	ldr	r0, [pc, #100]	; (49c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x28>)
     436:	4c1a      	ldr	r4, [pc, #104]	; (4a0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2c>)
     438:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     43c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     440:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     444:	2920      	cmp	r1, #32
     446:	d022      	beq.n	48e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
     448:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     44c:	7840      	ldrb	r0, [r0, #1]
     44e:	784c      	ldrb	r4, [r1, #1]
     450:	7048      	strb	r0, [r1, #1]
     452:	4620      	mov	r0, r4
     454:	4601      	mov	r1, r0
     456:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     45a:	4291      	cmp	r1, r2
     45c:	7005      	strb	r5, [r0, #0]
     45e:	7840      	ldrb	r0, [r0, #1]
     460:	d1f8      	bne.n	454 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
     462:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     466:	2a20      	cmp	r2, #32
     468:	bf1a      	itte	ne
     46a:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     46e:	7054      	strbne	r4, [r2, #1]
     470:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     474:	2220      	movs	r2, #32
     476:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     47a:	f88c 2001 	strb.w	r2, [ip, #1]
     47e:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     482:	bd70      	pop	{r4, r5, r6, pc}
     484:	f240 217e 	movw	r1, #638	; 0x27e
     488:	2070      	movs	r0, #112	; 0x70
     48a:	f003 f957 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     48e:	f893 4020 	ldrb.w	r4, [r3, #32]
     492:	7840      	ldrb	r0, [r0, #1]
     494:	f883 0020 	strb.w	r0, [r3, #32]
     498:	e7db      	b.n	452 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
     49a:	0000      	.short	0x0000
     49c:	20000bac 	.word	0x20000bac
     4a0:	20000c2c 	.word	0x20000c2c
     4a4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4a8:	b085      	sub	sp, #20
     4aa:	4615      	mov	r5, r2
     4ac:	460c      	mov	r4, r1
     4ae:	f002 f91b 	bl	26e8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     4b2:	4428      	add	r0, r5
     4b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4b8:	9002      	str	r0, [sp, #8]
     4ba:	6821      	ldr	r1, [r4, #0]
     4bc:	1a08      	subs	r0, r1, r0
     4be:	0200      	lsls	r0, r0, #8
     4c0:	17c1      	asrs	r1, r0, #31
     4c2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     4c6:	1200      	asrs	r0, r0, #8
     4c8:	2800      	cmp	r0, #0
     4ca:	f300 80d5 	bgt.w	678 <CONFIG_BT_HCI_TX_STACK_SIZE+0x78>
     4ce:	48ac      	ldr	r0, [pc, #688]	; (780 <CONFIG_BT_HCI_TX_STACK_SIZE+0x180>)
     4d0:	9f08      	ldr	r7, [sp, #32]
     4d2:	4eac      	ldr	r6, [pc, #688]	; (784 <CONFIG_BT_HCI_TX_STACK_SIZE+0x184>)
     4d4:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     4d8:	9003      	str	r0, [sp, #12]
     4da:	f890 5020 	ldrb.w	r5, [r0, #32]
     4de:	2020      	movs	r0, #32
     4e0:	46e9      	mov	r9, sp
     4e2:	f10d 0804 	add.w	r8, sp, #4
     4e6:	f88d 0000 	strb.w	r0, [sp]
     4ea:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     4ee:	2d20      	cmp	r5, #32
     4f0:	bf18      	it	ne
     4f2:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     4f6:	d025      	beq.n	544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
     4f8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     4fc:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     500:	6822      	ldr	r2, [r4, #0]
     502:	68c1      	ldr	r1, [r0, #12]
     504:	1a51      	subs	r1, r2, r1
     506:	0209      	lsls	r1, r1, #8
     508:	17ca      	asrs	r2, r1, #31
     50a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     50e:	3008      	adds	r0, #8
     510:	1209      	asrs	r1, r1, #8
     512:	d417      	bmi.n	544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
     514:	8961      	ldrh	r1, [r4, #10]
     516:	b171      	cbz	r1, 536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     518:	8941      	ldrh	r1, [r0, #10]
     51a:	b961      	cbnz	r1, 536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     51c:	f000 fdba 	bl	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
     520:	f002 f8e2 	bl	26e8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     524:	6821      	ldr	r1, [r4, #0]
     526:	1a08      	subs	r0, r1, r0
     528:	0200      	lsls	r0, r0, #8
     52a:	17c1      	asrs	r1, r0, #31
     52c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     530:	1200      	asrs	r0, r0, #8
     532:	2833      	cmp	r0, #51	; 0x33
     534:	db06      	blt.n	544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
     536:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     53a:	f889 5000 	strb.w	r5, [r9]
     53e:	7845      	ldrb	r5, [r0, #1]
     540:	2d20      	cmp	r5, #32
     542:	d1d9      	bne.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     544:	f899 0000 	ldrb.w	r0, [r9]
     548:	f888 0000 	strb.w	r0, [r8]
     54c:	46a1      	mov	r9, r4
     54e:	2d20      	cmp	r5, #32
     550:	bf1c      	itt	ne
     552:	488d      	ldrne	r0, [pc, #564]	; (788 <CONFIG_BT_HCI_TX_STACK_SIZE+0x188>)
     554:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     558:	f000 810e 	beq.w	778 <CONFIG_BT_HCI_TX_STACK_SIZE+0x178>
     55c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     560:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     564:	f8d9 2004 	ldr.w	r2, [r9, #4]
     568:	f8da 1008 	ldr.w	r1, [sl, #8]
     56c:	4648      	mov	r0, r9
     56e:	1a89      	subs	r1, r1, r2
     570:	0209      	lsls	r1, r1, #8
     572:	17ca      	asrs	r2, r1, #31
     574:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     578:	f10a 0708 	add.w	r7, sl, #8
     57c:	1209      	asrs	r1, r1, #8
     57e:	d415      	bmi.n	5ac <__data_size+0x54>
     580:	8979      	ldrh	r1, [r7, #10]
     582:	2900      	cmp	r1, #0
     584:	f000 80f8 	beq.w	778 <CONFIG_BT_HCI_TX_STACK_SIZE+0x178>
     588:	8941      	ldrh	r1, [r0, #10]
     58a:	2900      	cmp	r1, #0
     58c:	f040 80f4 	bne.w	778 <CONFIG_BT_HCI_TX_STACK_SIZE+0x178>
     590:	f000 fd80 	bl	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
     594:	f002 f8a8 	bl	26e8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     598:	6839      	ldr	r1, [r7, #0]
     59a:	1a08      	subs	r0, r1, r0
     59c:	0200      	lsls	r0, r0, #8
     59e:	17c1      	asrs	r1, r0, #31
     5a0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     5a4:	1200      	asrs	r0, r0, #8
     5a6:	2833      	cmp	r0, #51	; 0x33
     5a8:	f280 80e6 	bge.w	778 <CONFIG_BT_HCI_TX_STACK_SIZE+0x178>
     5ac:	f888 5000 	strb.w	r5, [r8]
     5b0:	f89a 1014 	ldrb.w	r1, [sl, #20]
     5b4:	f899 000c 	ldrb.w	r0, [r9, #12]
     5b8:	4281      	cmp	r1, r0
     5ba:	d906      	bls.n	5ca <__data_size+0x72>
     5bc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     5c0:	7845      	ldrb	r5, [r0, #1]
     5c2:	2d20      	cmp	r5, #32
     5c4:	d1ca      	bne.n	55c <__data_size+0x4>
     5c6:	f000 b8d7 	b.w	778 <CONFIG_BT_HCI_TX_STACK_SIZE+0x178>
     5ca:	f89d 0004 	ldrb.w	r0, [sp, #4]
     5ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     5d2:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     5d6:	8a68      	ldrh	r0, [r5, #18]
     5d8:	68ef      	ldr	r7, [r5, #12]
     5da:	2800      	cmp	r0, #0
     5dc:	d143      	bne.n	666 <CONFIG_BT_HCI_TX_STACK_SIZE+0x66>
     5de:	8960      	ldrh	r0, [r4, #10]
     5e0:	b3e8      	cbz	r0, 65e <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     5e2:	68a8      	ldr	r0, [r5, #8]
     5e4:	f00b fe20 	bl	c228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     5e8:	8a69      	ldrh	r1, [r5, #18]
     5ea:	7c2a      	ldrb	r2, [r5, #16]
     5ec:	4b67      	ldr	r3, [pc, #412]	; (78c <CONFIG_BT_HCI_TX_STACK_SIZE+0x18c>)
     5ee:	4411      	add	r1, r2
     5f0:	1c49      	adds	r1, r1, #1
     5f2:	1842      	adds	r2, r0, r1
     5f4:	4298      	cmp	r0, r3
     5f6:	d904      	bls.n	602 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     5f8:	f240 6109 	movw	r1, #1545	; 0x609
     5fc:	2070      	movs	r0, #112	; 0x70
     5fe:	f003 f89d 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     602:	4863      	ldr	r0, [pc, #396]	; (790 <CONFIG_BT_HCI_TX_STACK_SIZE+0x190>)
     604:	4281      	cmp	r1, r0
     606:	dd04      	ble.n	612 <CONFIG_BT_HCI_TX_STACK_SIZE+0x12>
     608:	f240 610a 	movw	r1, #1546	; 0x60a
     60c:	2070      	movs	r0, #112	; 0x70
     60e:	f003 f895 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     612:	4860      	ldr	r0, [pc, #384]	; (794 <CONFIG_BT_HCI_TX_STACK_SIZE+0x194>)
     614:	4281      	cmp	r1, r0
     616:	da04      	bge.n	622 <CONFIG_BT_HCI_TX_STACK_SIZE+0x22>
     618:	f240 610b 	movw	r1, #1547	; 0x60b
     61c:	2070      	movs	r0, #112	; 0x70
     61e:	f003 f88d 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     622:	485d      	ldr	r0, [pc, #372]	; (798 <CONFIG_BT_HCI_TX_STACK_SIZE+0x198>)
     624:	4290      	cmp	r0, r2
     626:	bfdc      	itt	le
     628:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
     62c:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
     630:	dd05      	ble.n	63e <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     632:	2a00      	cmp	r2, #0
     634:	bfbc      	itt	lt
     636:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
     63a:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
     63e:	4610      	mov	r0, r2
     640:	f002 f852 	bl	26e8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     644:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     648:	1a78      	subs	r0, r7, r1
     64a:	0200      	lsls	r0, r0, #8
     64c:	17c2      	asrs	r2, r0, #31
     64e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     652:	1200      	asrs	r0, r0, #8
     654:	2833      	cmp	r0, #51	; 0x33
     656:	bfb8      	it	lt
     658:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
     65c:	e000      	b.n	660 <CONFIG_BT_HCI_TX_STACK_SIZE+0x60>
     65e:	e002      	b.n	666 <CONFIG_BT_HCI_TX_STACK_SIZE+0x66>
     660:	bfb8      	it	lt
     662:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     666:	9802      	ldr	r0, [sp, #8]
     668:	1a38      	subs	r0, r7, r0
     66a:	0200      	lsls	r0, r0, #8
     66c:	17c1      	asrs	r1, r0, #31
     66e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     672:	1200      	asrs	r0, r0, #8
     674:	2800      	cmp	r0, #0
     676:	dd03      	ble.n	680 <CONFIG_BT_HCI_TX_STACK_SIZE+0x80>
     678:	b009      	add	sp, #36	; 0x24
     67a:	2000      	movs	r0, #0
     67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     680:	e9d4 1000 	ldrd	r1, r0, [r4]
     684:	1a40      	subs	r0, r0, r1
     686:	4438      	add	r0, r7
     688:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     68c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     690:	e9c4 1000 	strd	r1, r0, [r4]
     694:	9803      	ldr	r0, [sp, #12]
     696:	f8dd 8020 	ldr.w	r8, [sp, #32]
     69a:	466f      	mov	r7, sp
     69c:	f890 5020 	ldrb.w	r5, [r0, #32]
     6a0:	2020      	movs	r0, #32
     6a2:	f10d 0a04 	add.w	sl, sp, #4
     6a6:	f88d 0000 	strb.w	r0, [sp]
     6aa:	2d20      	cmp	r5, #32
     6ac:	bf1c      	itt	ne
     6ae:	4836      	ldrne	r0, [pc, #216]	; (788 <CONFIG_BT_HCI_TX_STACK_SIZE+0x188>)
     6b0:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     6b4:	d025      	beq.n	702 <CONFIG_BT_HCI_TX_STACK_SIZE+0x102>
     6b6:	bf00      	nop
     6b8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     6bc:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     6c0:	6822      	ldr	r2, [r4, #0]
     6c2:	68c1      	ldr	r1, [r0, #12]
     6c4:	1a51      	subs	r1, r2, r1
     6c6:	0209      	lsls	r1, r1, #8
     6c8:	17ca      	asrs	r2, r1, #31
     6ca:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     6ce:	3008      	adds	r0, #8
     6d0:	1209      	asrs	r1, r1, #8
     6d2:	d416      	bmi.n	702 <CONFIG_BT_HCI_TX_STACK_SIZE+0x102>
     6d4:	8961      	ldrh	r1, [r4, #10]
     6d6:	b171      	cbz	r1, 6f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf6>
     6d8:	8941      	ldrh	r1, [r0, #10]
     6da:	b961      	cbnz	r1, 6f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf6>
     6dc:	f000 fcda 	bl	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
     6e0:	f002 f802 	bl	26e8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     6e4:	6821      	ldr	r1, [r4, #0]
     6e6:	1a08      	subs	r0, r1, r0
     6e8:	0200      	lsls	r0, r0, #8
     6ea:	17c1      	asrs	r1, r0, #31
     6ec:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     6f0:	1200      	asrs	r0, r0, #8
     6f2:	2833      	cmp	r0, #51	; 0x33
     6f4:	db05      	blt.n	702 <CONFIG_BT_HCI_TX_STACK_SIZE+0x102>
     6f6:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     6fa:	703d      	strb	r5, [r7, #0]
     6fc:	7845      	ldrb	r5, [r0, #1]
     6fe:	2d20      	cmp	r5, #32
     700:	d1da      	bne.n	6b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb8>
     702:	7838      	ldrb	r0, [r7, #0]
     704:	f88a 0000 	strb.w	r0, [sl]
     708:	4627      	mov	r7, r4
     70a:	2d20      	cmp	r5, #32
     70c:	bf1c      	itt	ne
     70e:	481e      	ldrne	r0, [pc, #120]	; (788 <CONFIG_BT_HCI_TX_STACK_SIZE+0x188>)
     710:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     714:	d030      	beq.n	778 <CONFIG_BT_HCI_TX_STACK_SIZE+0x178>
     716:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     71a:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     71e:	6879      	ldr	r1, [r7, #4]
     720:	f8d9 2008 	ldr.w	r2, [r9, #8]
     724:	4638      	mov	r0, r7
     726:	1a51      	subs	r1, r2, r1
     728:	0209      	lsls	r1, r1, #8
     72a:	17ca      	asrs	r2, r1, #31
     72c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     730:	f109 0808 	add.w	r8, r9, #8
     734:	1209      	asrs	r1, r1, #8
     736:	d412      	bmi.n	75e <CONFIG_BT_HCI_TX_STACK_SIZE+0x15e>
     738:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     73c:	b1e1      	cbz	r1, 778 <CONFIG_BT_HCI_TX_STACK_SIZE+0x178>
     73e:	8941      	ldrh	r1, [r0, #10]
     740:	b9d1      	cbnz	r1, 778 <CONFIG_BT_HCI_TX_STACK_SIZE+0x178>
     742:	f000 fca7 	bl	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
     746:	f001 ffcf 	bl	26e8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     74a:	f8d8 1000 	ldr.w	r1, [r8]
     74e:	1a08      	subs	r0, r1, r0
     750:	0200      	lsls	r0, r0, #8
     752:	17c1      	asrs	r1, r0, #31
     754:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     758:	1200      	asrs	r0, r0, #8
     75a:	2833      	cmp	r0, #51	; 0x33
     75c:	da0c      	bge.n	778 <CONFIG_BT_HCI_TX_STACK_SIZE+0x178>
     75e:	f88a 5000 	strb.w	r5, [sl]
     762:	f899 0014 	ldrb.w	r0, [r9, #20]
     766:	7b39      	ldrb	r1, [r7, #12]
     768:	4288      	cmp	r0, r1
     76a:	f67f af2e 	bls.w	5ca <__data_size+0x72>
     76e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     772:	7845      	ldrb	r5, [r0, #1]
     774:	2d20      	cmp	r5, #32
     776:	d1ce      	bne.n	716 <CONFIG_BT_HCI_TX_STACK_SIZE+0x116>
     778:	b009      	add	sp, #36	; 0x24
     77a:	2001      	movs	r0, #1
     77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     780:	20000c2c 	.word	0x20000c2c
     784:	200008ac 	.word	0x200008ac
     788:	20000bac 	.word	0x20000bac
     78c:	1e847fff 	.word	0x1e847fff
     790:	07a12000 	.word	0x07a12000
     794:	f85ee000 	.word	0xf85ee000
     798:	1e848000 	.word	0x1e848000
     79c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     7a0:	4604      	mov	r4, r0
     7a2:	483c      	ldr	r0, [pc, #240]	; (894 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x94>)
     7a4:	460e      	mov	r6, r1
     7a6:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     7aa:	4f3b      	ldr	r7, [pc, #236]	; (898 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x98>)
     7ac:	f890 5020 	ldrb.w	r5, [r0, #32]
     7b0:	2020      	movs	r0, #32
     7b2:	4698      	mov	r8, r3
     7b4:	4692      	mov	sl, r2
     7b6:	7010      	strb	r0, [r2, #0]
     7b8:	f507 7940 	add.w	r9, r7, #768	; 0x300
     7bc:	2d20      	cmp	r5, #32
     7be:	bf18      	it	ne
     7c0:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     7c4:	d028      	beq.n	818 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x18>
     7c6:	bf00      	nop
     7c8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     7cc:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     7d0:	f100 0108 	add.w	r1, r0, #8
     7d4:	68c0      	ldr	r0, [r0, #12]
     7d6:	6822      	ldr	r2, [r4, #0]
     7d8:	1a10      	subs	r0, r2, r0
     7da:	0200      	lsls	r0, r0, #8
     7dc:	17c2      	asrs	r2, r0, #31
     7de:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     7e2:	1200      	asrs	r0, r0, #8
     7e4:	d418      	bmi.n	818 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x18>
     7e6:	8960      	ldrh	r0, [r4, #10]
     7e8:	b178      	cbz	r0, 80a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa>
     7ea:	8948      	ldrh	r0, [r1, #10]
     7ec:	b968      	cbnz	r0, 80a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa>
     7ee:	4608      	mov	r0, r1
     7f0:	f000 fc50 	bl	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
     7f4:	f001 ff78 	bl	26e8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     7f8:	6821      	ldr	r1, [r4, #0]
     7fa:	1a08      	subs	r0, r1, r0
     7fc:	0200      	lsls	r0, r0, #8
     7fe:	17c1      	asrs	r1, r0, #31
     800:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     804:	1200      	asrs	r0, r0, #8
     806:	2833      	cmp	r0, #51	; 0x33
     808:	db06      	blt.n	818 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x18>
     80a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     80e:	f88a 5000 	strb.w	r5, [sl]
     812:	7845      	ldrb	r5, [r0, #1]
     814:	2d20      	cmp	r5, #32
     816:	d1d7      	bne.n	7c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1c8>
     818:	f89a 0000 	ldrb.w	r0, [sl]
     81c:	f888 0000 	strb.w	r0, [r8]
     820:	2d20      	cmp	r5, #32
     822:	bf18      	it	ne
     824:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     828:	d030      	beq.n	88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     82a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     82e:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     832:	6861      	ldr	r1, [r4, #4]
     834:	f8d9 2008 	ldr.w	r2, [r9, #8]
     838:	4620      	mov	r0, r4
     83a:	1a51      	subs	r1, r2, r1
     83c:	0209      	lsls	r1, r1, #8
     83e:	17ca      	asrs	r2, r1, #31
     840:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     844:	f109 0608 	add.w	r6, r9, #8
     848:	1209      	asrs	r1, r1, #8
     84a:	d410      	bmi.n	86e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6e>
     84c:	8971      	ldrh	r1, [r6, #10]
     84e:	b1e9      	cbz	r1, 88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     850:	8941      	ldrh	r1, [r0, #10]
     852:	b9d9      	cbnz	r1, 88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     854:	f000 fc1e 	bl	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
     858:	f001 ff46 	bl	26e8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     85c:	6831      	ldr	r1, [r6, #0]
     85e:	1a08      	subs	r0, r1, r0
     860:	0200      	lsls	r0, r0, #8
     862:	17c1      	asrs	r1, r0, #31
     864:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     868:	1200      	asrs	r0, r0, #8
     86a:	2833      	cmp	r0, #51	; 0x33
     86c:	da0e      	bge.n	88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     86e:	f888 5000 	strb.w	r5, [r8]
     872:	f899 0014 	ldrb.w	r0, [r9, #20]
     876:	7b21      	ldrb	r1, [r4, #12]
     878:	4288      	cmp	r0, r1
     87a:	d802      	bhi.n	882 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x82>
     87c:	2000      	movs	r0, #0
     87e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     882:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     886:	7845      	ldrb	r5, [r0, #1]
     888:	2d20      	cmp	r5, #32
     88a:	d1ce      	bne.n	82a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2a>
     88c:	2001      	movs	r0, #1
     88e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     892:	0000      	.short	0x0000
     894:	20000c2c 	.word	0x20000c2c
     898:	200008ac 	.word	0x200008ac
     89c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8a0:	f04f 0800 	mov.w	r8, #0
     8a4:	b098      	sub	sp, #96	; 0x60
     8a6:	4616      	mov	r6, r2
     8a8:	460d      	mov	r5, r1
     8aa:	46c3      	mov	fp, r8
     8ac:	f002 f994 	bl	2bd8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     8b0:	4604      	mov	r4, r0
     8b2:	2d01      	cmp	r5, #1
     8b4:	bf18      	it	ne
     8b6:	2d02      	cmpne	r5, #2
     8b8:	d005      	beq.n	8c6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc6>
     8ba:	f640 1194 	movw	r1, #2452	; 0x994
     8be:	f04f 0070 	mov.w	r0, #112	; 0x70
     8c2:	f002 ff3b 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     8c6:	49fd      	ldr	r1, [pc, #1012]	; (cbc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4bc>)
     8c8:	2001      	movs	r0, #1
     8ca:	6008      	str	r0, [r1, #0]
     8cc:	49fc      	ldr	r1, [pc, #1008]	; (cc0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c0>)
     8ce:	6889      	ldr	r1, [r1, #8]
     8d0:	6008      	str	r0, [r1, #0]
     8d2:	2000      	movs	r0, #0
     8d4:	900c      	str	r0, [sp, #48]	; 0x30
     8d6:	1e40      	subs	r0, r0, #1
     8d8:	900e      	str	r0, [sp, #56]	; 0x38
     8da:	49fa      	ldr	r1, [pc, #1000]	; (cc4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c4>)
     8dc:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     8e0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     8e4:	3308      	adds	r3, #8
     8e6:	af0f      	add	r7, sp, #60	; 0x3c
     8e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     8ea:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     8ee:	a80f      	add	r0, sp, #60	; 0x3c
     8f0:	f000 fbd0 	bl	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
     8f4:	900d      	str	r0, [sp, #52]	; 0x34
     8f6:	48f3      	ldr	r0, [pc, #972]	; (cc4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c4>)
     8f8:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     8fc:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     900:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     904:	f1b9 0f00 	cmp.w	r9, #0
     908:	bf14      	ite	ne
     90a:	f04f 0a01 	movne.w	sl, #1
     90e:	f04f 0a00 	moveq.w	sl, #0
     912:	980f      	ldr	r0, [sp, #60]	; 0x3c
     914:	9014      	str	r0, [sp, #80]	; 0x50
     916:	f1ba 0f00 	cmp.w	sl, #0
     91a:	d009      	beq.n	930 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x130>
     91c:	48ea      	ldr	r0, [pc, #936]	; (cc8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c8>)
     91e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     922:	b928      	cbnz	r0, 930 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x130>
     924:	f002 fea6 	bl	3674 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     928:	2800      	cmp	r0, #0
     92a:	bf08      	it	eq
     92c:	2701      	moveq	r7, #1
     92e:	d000      	beq.n	932 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x132>
     930:	2700      	movs	r7, #0
     932:	48e6      	ldr	r0, [pc, #920]	; (ccc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4cc>)
     934:	2200      	movs	r2, #0
     936:	9215      	str	r2, [sp, #84]	; 0x54
     938:	7800      	ldrb	r0, [r0, #0]
     93a:	4616      	mov	r6, r2
     93c:	2801      	cmp	r0, #1
     93e:	bf18      	it	ne
     940:	2803      	cmpne	r0, #3
     942:	d140      	bne.n	9c6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1c6>
     944:	48e1      	ldr	r0, [pc, #900]	; (ccc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4cc>)
     946:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     94a:	eba8 0009 	sub.w	r0, r8, r9
     94e:	9015      	str	r0, [sp, #84]	; 0x54
     950:	45c8      	cmp	r8, r9
     952:	d938      	bls.n	9c6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1c6>
     954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     956:	ea6f 0108 	mvn.w	r1, r8
     95a:	f8df e374 	ldr.w	lr, [pc, #884]	; cd0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4d0>
     95e:	1858      	adds	r0, r3, r1
     960:	f10d 0c0c 	add.w	ip, sp, #12
     964:	aa17      	add	r2, sp, #92	; 0x5c
     966:	4573      	cmp	r3, lr
     968:	d904      	bls.n	974 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x174>
     96a:	f240 6109 	movw	r1, #1545	; 0x609
     96e:	2070      	movs	r0, #112	; 0x70
     970:	f002 fee4 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     974:	4bd7      	ldr	r3, [pc, #860]	; (cd4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4d4>)
     976:	4299      	cmp	r1, r3
     978:	dd04      	ble.n	984 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x184>
     97a:	f240 610a 	movw	r1, #1546	; 0x60a
     97e:	2070      	movs	r0, #112	; 0x70
     980:	f002 fedc 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     984:	4bd4      	ldr	r3, [pc, #848]	; (cd8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4d8>)
     986:	4299      	cmp	r1, r3
     988:	da04      	bge.n	994 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x194>
     98a:	f240 610b 	movw	r1, #1547	; 0x60b
     98e:	2070      	movs	r0, #112	; 0x70
     990:	f002 fed4 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     994:	49d1      	ldr	r1, [pc, #836]	; (cdc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4dc>)
     996:	4281      	cmp	r1, r0
     998:	bfdc      	itt	le
     99a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     99e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     9a2:	dd05      	ble.n	9b0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1b0>
     9a4:	2800      	cmp	r0, #0
     9a6:	bfbc      	itt	lt
     9a8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     9ac:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     9b0:	4661      	mov	r1, ip
     9b2:	f001 feb5 	bl	2720 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     9b6:	9803      	ldr	r0, [sp, #12]
     9b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
     9ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9be:	9003      	str	r0, [sp, #12]
     9c0:	1a08      	subs	r0, r1, r0
     9c2:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     9c6:	2f00      	cmp	r7, #0
     9c8:	bf18      	it	ne
     9ca:	2632      	movne	r6, #50	; 0x32
     9cc:	d104      	bne.n	9d8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1d8>
     9ce:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     9d2:	2800      	cmp	r0, #0
     9d4:	bf18      	it	ne
     9d6:	2602      	movne	r6, #2
     9d8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     9dc:	d008      	beq.n	9f0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f0>
     9de:	980f      	ldr	r0, [sp, #60]	; 0x3c
     9e0:	1b00      	subs	r0, r0, r4
     9e2:	0200      	lsls	r0, r0, #8
     9e4:	17c1      	asrs	r1, r0, #31
     9e6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     9ea:	1200      	asrs	r0, r0, #8
     9ec:	2801      	cmp	r0, #1
     9ee:	da02      	bge.n	9f6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f6>
     9f0:	2104      	movs	r1, #4
     9f2:	9818      	ldr	r0, [sp, #96]	; 0x60
     9f4:	e00b      	b.n	a0e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20e>
     9f6:	b147      	cbz	r7, a0a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20a>
     9f8:	48b3      	ldr	r0, [pc, #716]	; (cc8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c8>)
     9fa:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     9fe:	b120      	cbz	r0, a0a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20a>
     a00:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     a04:	1c06      	adds	r6, r0, #0
     a06:	bf18      	it	ne
     a08:	2602      	movne	r6, #2
     a0a:	4620      	mov	r0, r4
     a0c:	2101      	movs	r1, #1
     a0e:	f1b9 0f00 	cmp.w	r9, #0
     a12:	d002      	beq.n	a1a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x21a>
     a14:	9b15      	ldr	r3, [sp, #84]	; 0x54
     a16:	2b1e      	cmp	r3, #30
     a18:	da02      	bge.n	a20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x220>
     a1a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     a1e:	b113      	cbz	r3, a26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x226>
     a20:	f04f 0b01 	mov.w	fp, #1
     a24:	1e49      	subs	r1, r1, #1
     a26:	198b      	adds	r3, r1, r6
     a28:	49a8      	ldr	r1, [pc, #672]	; (ccc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4cc>)
     a2a:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     a2e:	7809      	ldrb	r1, [r1, #0]
     a30:	9115      	str	r1, [sp, #84]	; 0x54
     a32:	990f      	ldr	r1, [sp, #60]	; 0x3c
     a34:	1a89      	subs	r1, r1, r2
     a36:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
     a3a:	ebac 0100 	sub.w	r1, ip, r0
     a3e:	0209      	lsls	r1, r1, #8
     a40:	17ce      	asrs	r6, r1, #31
     a42:	eb01 6116 	add.w	r1, r1, r6, lsr #24
     a46:	1209      	asrs	r1, r1, #8
     a48:	4299      	cmp	r1, r3
     a4a:	db18      	blt.n	a7e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x27e>
     a4c:	2a00      	cmp	r2, #0
     a4e:	bf18      	it	ne
     a50:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     a54:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     a56:	9705      	str	r7, [sp, #20]
     a58:	2700      	movs	r7, #0
     a5a:	f001 ffb7 	bl	29cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     a5e:	1a30      	subs	r0, r6, r0
     a60:	0200      	lsls	r0, r0, #8
     a62:	17c1      	asrs	r1, r0, #31
     a64:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a68:	1200      	asrs	r0, r0, #8
     a6a:	283e      	cmp	r0, #62	; 0x3e
     a6c:	da3f      	bge.n	aee <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2ee>
     a6e:	2d01      	cmp	r5, #1
     a70:	d020      	beq.n	ab4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2b4>
     a72:	1e70      	subs	r0, r6, #1
     a74:	9905      	ldr	r1, [sp, #20]
     a76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a7a:	b319      	cbz	r1, ac4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2c4>
     a7c:	e02d      	b.n	ada <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2da>
     a7e:	b182      	cbz	r2, aa2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2a2>
     a80:	f1be 0f00 	cmp.w	lr, #0
     a84:	bf04      	itt	eq
     a86:	9915      	ldreq	r1, [sp, #84]	; 0x54
     a88:	2903      	cmpeq	r1, #3
     a8a:	d00a      	beq.n	aa2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2a2>
     a8c:	b927      	cbnz	r7, a98 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x298>
     a8e:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     a92:	2900      	cmp	r1, #0
     a94:	bf18      	it	ne
     a96:	1e9b      	subne	r3, r3, #2
     a98:	2200      	movs	r2, #0
     a9a:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     a9e:	4690      	mov	r8, r2
     aa0:	e7c7      	b.n	a32 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x232>
     aa2:	bb07      	cbnz	r7, ae6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e6>
     aa4:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     aa8:	b1e9      	cbz	r1, ae6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e6>
     aaa:	2100      	movs	r1, #0
     aac:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
     ab0:	1e9b      	subs	r3, r3, #2
     ab2:	e7be      	b.n	a32 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x232>
     ab4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     ab8:	d120      	bne.n	afc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2fc>
     aba:	f640 110d 	movw	r1, #2317	; 0x90d
     abe:	2070      	movs	r0, #112	; 0x70
     ac0:	f002 fe3c 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ac4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     ac8:	d007      	beq.n	ada <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2da>
     aca:	1a21      	subs	r1, r4, r0
     acc:	0209      	lsls	r1, r1, #8
     ace:	17ca      	asrs	r2, r1, #31
     ad0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     ad4:	1209      	asrs	r1, r1, #8
     ad6:	2904      	cmp	r1, #4
     ad8:	dd03      	ble.n	ae2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e2>
     ada:	4604      	mov	r4, r0
     adc:	f001 ff7c 	bl	29d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     ae0:	e00c      	b.n	afc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2fc>
     ae2:	2900      	cmp	r1, #0
     ae4:	dd0a      	ble.n	afc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2fc>
     ae6:	b01b      	add	sp, #108	; 0x6c
     ae8:	2000      	movs	r0, #0
     aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     aee:	1e70      	subs	r0, r6, #1
     af0:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     af4:	4620      	mov	r0, r4
     af6:	f001 ff6f 	bl	29d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     afa:	4657      	mov	r7, sl
     afc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b00:	d028      	beq.n	b54 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x354>
     b02:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b04:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
     b08:	1b00      	subs	r0, r0, r4
     b0a:	f08b 0301 	eor.w	r3, fp, #1
     b0e:	4a74      	ldr	r2, [pc, #464]	; (ce0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e0>)
     b10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b14:	ebac 0c04 	sub.w	ip, ip, r4
     b18:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     b1c:	4283      	cmp	r3, r0
     b1e:	bf98      	it	ls
     b20:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     b24:	d2df      	bcs.n	ae6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e6>
     b26:	4562      	cmp	r2, ip
     b28:	d3dd      	bcc.n	ae6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e6>
     b2a:	4620      	mov	r0, r4
     b2c:	f00b fb7c 	bl	c228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     b30:	4967      	ldr	r1, [pc, #412]	; (cd0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4d0>)
     b32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     b34:	1c4b      	adds	r3, r1, #1
     b36:	1a16      	subs	r6, r2, r0
     b38:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     b3c:	bf24      	itt	cs
     b3e:	eba0 0c02 	subcs.w	ip, r0, r2
     b42:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     b46:	d310      	bcc.n	b6a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x36a>
     b48:	42b1      	cmp	r1, r6
     b4a:	d208      	bcs.n	b5e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x35e>
     b4c:	1a08      	subs	r0, r1, r0
     b4e:	4410      	add	r0, r2
     b50:	1c46      	adds	r6, r0, #1
     b52:	e00a      	b.n	b6a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x36a>
     b54:	f640 212c 	movw	r1, #2604	; 0xa2c
     b58:	2070      	movs	r0, #112	; 0x70
     b5a:	f002 fdef 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b5e:	4561      	cmp	r1, ip
     b60:	d22c      	bcs.n	bbc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3bc>
     b62:	1a89      	subs	r1, r1, r2
     b64:	4408      	add	r0, r1
     b66:	1c40      	adds	r0, r0, #1
     b68:	4246      	negs	r6, r0
     b6a:	4857      	ldr	r0, [pc, #348]	; (cc8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c8>)
     b6c:	7f80      	ldrb	r0, [r0, #30]
     b6e:	b350      	cbz	r0, bc6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c6>
     b70:	4628      	mov	r0, r5
     b72:	4645      	mov	r5, r8
     b74:	f04f 0b00 	mov.w	fp, #0
     b78:	46d8      	mov	r8, fp
     b7a:	2801      	cmp	r0, #1
     b7c:	d005      	beq.n	b8a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38a>
     b7e:	2002      	movs	r0, #2
     b80:	f002 f972 	bl	2e68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     b84:	2001      	movs	r0, #1
     b86:	f002 f96f 	bl	2e68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     b8a:	45a9      	cmp	r9, r5
     b8c:	d22c      	bcs.n	be8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3e8>
     b8e:	eba6 0105 	sub.w	r1, r6, r5
     b92:	f04f 0301 	mov.w	r3, #1
     b96:	f04f 0203 	mov.w	r2, #3
     b9a:	f04f 0002 	mov.w	r0, #2
     b9e:	f002 f89b 	bl	2cd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     ba2:	2800      	cmp	r0, #0
     ba4:	bf08      	it	eq
     ba6:	f04f 0801 	moveq.w	r8, #1
     baa:	f1b9 0f00 	cmp.w	r9, #0
     bae:	d035      	beq.n	c1c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x41c>
     bb0:	2301      	movs	r3, #1
     bb2:	eba6 0109 	sub.w	r1, r6, r9
     bb6:	2203      	movs	r2, #3
     bb8:	4618      	mov	r0, r3
     bba:	e023      	b.n	c04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x404>
     bbc:	f640 310c 	movw	r1, #2828	; 0xb0c
     bc0:	2070      	movs	r0, #112	; 0x70
     bc2:	f002 fdbb 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bc6:	45c1      	cmp	r9, r8
     bc8:	bf34      	ite	cc
     bca:	4640      	movcc	r0, r8
     bcc:	4648      	movcs	r0, r9
     bce:	f1bb 0f00 	cmp.w	fp, #0
     bd2:	bf14      	ite	ne
     bd4:	2100      	movne	r1, #0
     bd6:	211e      	moveq	r1, #30
     bd8:	4408      	add	r0, r1
     bda:	42b0      	cmp	r0, r6
     bdc:	dbc8      	blt.n	b70 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x370>
     bde:	f640 213f 	movw	r1, #2623	; 0xa3f
     be2:	2070      	movs	r0, #112	; 0x70
     be4:	f002 fdaa 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     be8:	d910      	bls.n	c0c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x40c>
     bea:	2301      	movs	r3, #1
     bec:	eba6 0109 	sub.w	r1, r6, r9
     bf0:	2203      	movs	r2, #3
     bf2:	4618      	mov	r0, r3
     bf4:	f002 f870 	bl	2cd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bf8:	b328      	cbz	r0, c46 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x446>
     bfa:	b17d      	cbz	r5, c1c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x41c>
     bfc:	1b71      	subs	r1, r6, r5
     bfe:	2301      	movs	r3, #1
     c00:	2203      	movs	r2, #3
     c02:	2002      	movs	r0, #2
     c04:	f002 f868 	bl	2cd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c08:	b1e8      	cbz	r0, c46 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x446>
     c0a:	e007      	b.n	c1c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x41c>
     c0c:	ea55 0009 	orrs.w	r0, r5, r9
     c10:	d004      	beq.n	c1c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x41c>
     c12:	f640 1177 	movw	r1, #2423	; 0x977
     c16:	2070      	movs	r0, #112	; 0x70
     c18:	f002 fd90 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c1c:	2301      	movs	r3, #1
     c1e:	2203      	movs	r2, #3
     c20:	4631      	mov	r1, r6
     c22:	2000      	movs	r0, #0
     c24:	f002 f858 	bl	2cd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c28:	b168      	cbz	r0, c46 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x446>
     c2a:	2501      	movs	r5, #1
     c2c:	f1b8 0f00 	cmp.w	r8, #0
     c30:	d003      	beq.n	c3a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x43a>
     c32:	9814      	ldr	r0, [sp, #80]	; 0x50
     c34:	900f      	str	r0, [sp, #60]	; 0x3c
     c36:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     c3a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; ce4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e4>
     c3e:	f1ba 0f00 	cmp.w	sl, #0
     c42:	d10e      	bne.n	c62 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x462>
     c44:	e009      	b.n	c5a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x45a>
     c46:	2002      	movs	r0, #2
     c48:	f002 f90e 	bl	2e68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c4c:	2001      	movs	r0, #1
     c4e:	f002 f90b 	bl	2e68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c52:	b01b      	add	sp, #108	; 0x6c
     c54:	2000      	movs	r0, #0
     c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c5a:	481b      	ldr	r0, [pc, #108]	; (cc8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c8>)
     c5c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     c60:	b100      	cbz	r0, c64 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x464>
     c62:	b34f      	cbz	r7, cb8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4b8>
     c64:	f8df a060 	ldr.w	sl, [pc, #96]	; cc8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c8>
     c68:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     c6c:	b118      	cbz	r0, c76 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x476>
     c6e:	f002 fbc9 	bl	3404 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     c72:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     c76:	b307      	cbz	r7, cba <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ba>
     c78:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     c7c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     c80:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     c84:	f8c8 0000 	str.w	r0, [r8]
     c88:	2300      	movs	r3, #0
     c8a:	2203      	movs	r2, #3
     c8c:	2005      	movs	r0, #5
     c8e:	f002 f823 	bl	2cd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c92:	b368      	cbz	r0, cf0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4f0>
     c94:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     c98:	2005      	movs	r0, #5
     c9a:	f002 f9ab 	bl	2ff4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     c9e:	4912      	ldr	r1, [pc, #72]	; (ce8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e8>)
     ca0:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     ca4:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     ca8:	4910      	ldr	r1, [pc, #64]	; (cec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ec>)
     caa:	12e0      	asrs	r0, r4, #11
     cac:	6008      	str	r0, [r1, #0]
     cae:	4c06      	ldr	r4, [pc, #24]	; (cc8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c8>)
     cb0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     cb4:	b3f0      	cbz	r0, d34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x534>
     cb6:	e05b      	b.n	d70 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x570>
     cb8:	e01b      	b.n	cf2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4f2>
     cba:	e01f      	b.n	cfc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4fc>
     cbc:	40000508 	.word	0x40000508
     cc0:	20000010 	.word	0x20000010
     cc4:	200008ac 	.word	0x200008ac
     cc8:	20000c2c 	.word	0x20000c2c
     ccc:	20000012 	.word	0x20000012
     cd0:	1e847fff 	.word	0x1e847fff
     cd4:	07a12000 	.word	0x07a12000
     cd8:	f85ee000 	.word	0xf85ee000
     cdc:	1e848000 	.word	0x1e848000
     ce0:	003fffff 	.word	0x003fffff
     ce4:	4001f508 	.word	0x4001f508
     ce8:	4001f098 	.word	0x4001f098
     cec:	4001f504 	.word	0x4001f504
     cf0:	e035      	b.n	d5e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x55e>
     cf2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; dac <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5ac>
     cf6:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     cfa:	b358      	cbz	r0, d54 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x554>
     cfc:	4c2b      	ldr	r4, [pc, #172]	; (dac <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5ac>)
     cfe:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     d02:	b150      	cbz	r0, d1a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x51a>
     d04:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d08:	f8c8 0000 	str.w	r0, [r8]
     d0c:	2005      	movs	r0, #5
     d0e:	f002 f8ab 	bl	2e68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d12:	f002 fbdf 	bl	34d4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     d16:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     d1a:	ac0c      	add	r4, sp, #48	; 0x30
     d1c:	4824      	ldr	r0, [pc, #144]	; (db0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b0>)
     d1e:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d22:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     d26:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     d2a:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     d2e:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     d32:	e000      	b.n	d36 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x536>
     d34:	e018      	b.n	d68 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x568>
     d36:	ac10      	add	r4, sp, #64	; 0x40
     d38:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d3c:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     d40:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     d44:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     d48:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     d4c:	b01b      	add	sp, #108	; 0x6c
     d4e:	2001      	movs	r0, #1
     d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d54:	f002 fb72 	bl	343c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     d58:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     d5c:	e78b      	b.n	c76 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x476>
     d5e:	f240 313e 	movw	r1, #830	; 0x33e
     d62:	2070      	movs	r0, #112	; 0x70
     d64:	f002 fcea 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d68:	f002 fba6 	bl	34b8 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     d6c:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     d70:	eba6 0009 	sub.w	r0, r6, r9
     d74:	f1a0 0119 	sub.w	r1, r0, #25
     d78:	2900      	cmp	r1, #0
     d7a:	dc04      	bgt.n	d86 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x586>
     d7c:	f640 2169 	movw	r1, #2665	; 0xa69
     d80:	2070      	movs	r0, #112	; 0x70
     d82:	f002 fcdb 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d86:	2203      	movs	r2, #3
     d88:	2301      	movs	r3, #1
     d8a:	4610      	mov	r0, r2
     d8c:	f001 ffa4 	bl	2cd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d90:	b138      	cbz	r0, da2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5a2>
     d92:	4808      	ldr	r0, [pc, #32]	; (db4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b4>)
     d94:	6880      	ldr	r0, [r0, #8]
     d96:	f8c0 b000 	str.w	fp, [r0]
     d9a:	4807      	ldr	r0, [pc, #28]	; (db8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b8>)
     d9c:	f8c0 b000 	str.w	fp, [r0]
     da0:	e7bb      	b.n	d1a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x51a>
     da2:	f640 2174 	movw	r1, #2676	; 0xa74
     da6:	2070      	movs	r0, #112	; 0x70
     da8:	f002 fcc8 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     dac:	20000c2c 	.word	0x20000c2c
     db0:	200008ac 	.word	0x200008ac
     db4:	20000010 	.word	0x20000010
     db8:	40000508 	.word	0x40000508
     dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     dc0:	4606      	mov	r6, r0
     dc2:	b083      	sub	sp, #12
     dc4:	7808      	ldrb	r0, [r1, #0]
     dc6:	7390      	strb	r0, [r2, #14]
     dc8:	7acf      	ldrb	r7, [r1, #11]
     dca:	7357      	strb	r7, [r2, #13]
     dcc:	7a88      	ldrb	r0, [r1, #10]
     dce:	7310      	strb	r0, [r2, #12]
     dd0:	8908      	ldrh	r0, [r1, #8]
     dd2:	4614      	mov	r4, r2
     dd4:	8150      	strh	r0, [r2, #10]
     dd6:	460d      	mov	r5, r1
     dd8:	780a      	ldrb	r2, [r1, #0]
     dda:	495f      	ldr	r1, [pc, #380]	; (f58 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x758>)
     ddc:	4699      	mov	r9, r3
     dde:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     de2:	424b      	negs	r3, r1
     de4:	f1ac 0801 	sub.w	r8, ip, #1
     de8:	b15a      	cbz	r2, e02 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x602>
     dea:	43c0      	mvns	r0, r0
     dec:	f8d5 8004 	ldr.w	r8, [r5, #4]
     df0:	f104 0208 	add.w	r2, r4, #8
     df4:	4288      	cmp	r0, r1
     df6:	dd3d      	ble.n	e74 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x674>
     df8:	f240 610a 	movw	r1, #1546	; 0x60a
     dfc:	2070      	movs	r0, #112	; 0x70
     dfe:	f002 fc9d 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e02:	68ee      	ldr	r6, [r5, #12]
     e04:	686d      	ldr	r5, [r5, #4]
     e06:	ea6f 0900 	mvn.w	r9, r0
     e0a:	f104 0208 	add.w	r2, r4, #8
     e0e:	eb06 0009 	add.w	r0, r6, r9
     e12:	4546      	cmp	r6, r8
     e14:	d904      	bls.n	e20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x620>
     e16:	f240 6109 	movw	r1, #1545	; 0x609
     e1a:	2070      	movs	r0, #112	; 0x70
     e1c:	f002 fc8e 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e20:	4589      	cmp	r9, r1
     e22:	dce9      	bgt.n	df8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5f8>
     e24:	4599      	cmp	r9, r3
     e26:	db28      	blt.n	e7a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x67a>
     e28:	4584      	cmp	ip, r0
     e2a:	bfdc      	itt	le
     e2c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     e30:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     e34:	dd05      	ble.n	e42 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x642>
     e36:	2800      	cmp	r0, #0
     e38:	bfbc      	itt	lt
     e3a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     e3e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     e42:	4621      	mov	r1, r4
     e44:	f001 fc6c 	bl	2720 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e48:	6820      	ldr	r0, [r4, #0]
     e4a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e4e:	1970      	adds	r0, r6, r5
     e50:	1c40      	adds	r0, r0, #1
     e52:	6021      	str	r1, [r4, #0]
     e54:	2f00      	cmp	r7, #0
     e56:	bf08      	it	eq
     e58:	307a      	addeq	r0, #122	; 0x7a
     e5a:	d003      	beq.n	e64 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x664>
     e5c:	2f01      	cmp	r7, #1
     e5e:	bf08      	it	eq
     e60:	3044      	addeq	r0, #68	; 0x44
     e62:	d12d      	bne.n	ec0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6c0>
     e64:	f001 fc40 	bl	26e8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e68:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     e6c:	6060      	str	r0, [r4, #4]
     e6e:	b003      	add	sp, #12
     e70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     e74:	4601      	mov	r1, r0
     e76:	4298      	cmp	r0, r3
     e78:	da04      	bge.n	e84 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x684>
     e7a:	f240 610b 	movw	r1, #1547	; 0x60b
     e7e:	2070      	movs	r0, #112	; 0x70
     e80:	f002 fc5c 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e84:	4584      	cmp	ip, r0
     e86:	bfdc      	itt	le
     e88:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     e8c:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     e90:	dd05      	ble.n	e9e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x69e>
     e92:	2800      	cmp	r0, #0
     e94:	bfbc      	itt	lt
     e96:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     e9a:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     e9e:	4621      	mov	r1, r4
     ea0:	f001 fc3e 	bl	2720 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ea4:	6820      	ldr	r0, [r4, #0]
     ea6:	2f00      	cmp	r7, #0
     ea8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     eac:	f108 0001 	add.w	r0, r8, #1
     eb0:	6021      	str	r1, [r4, #0]
     eb2:	bf08      	it	eq
     eb4:	307a      	addeq	r0, #122	; 0x7a
     eb6:	d008      	beq.n	eca <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6ca>
     eb8:	2f01      	cmp	r7, #1
     eba:	bf08      	it	eq
     ebc:	3044      	addeq	r0, #68	; 0x44
     ebe:	d004      	beq.n	eca <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6ca>
     ec0:	f240 61b1 	movw	r1, #1713	; 0x6b1
     ec4:	2070      	movs	r0, #112	; 0x70
     ec6:	f002 fc39 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     eca:	f001 fc0d 	bl	26e8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     ece:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ed2:	6061      	str	r1, [r4, #4]
     ed4:	8960      	ldrh	r0, [r4, #10]
     ed6:	aa01      	add	r2, sp, #4
     ed8:	4669      	mov	r1, sp
     eda:	f001 fc21 	bl	2720 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ede:	481f      	ldr	r0, [pc, #124]	; (f5c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x75c>)
     ee0:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
     ee4:	2920      	cmp	r1, #32
     ee6:	d023      	beq.n	f30 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x730>
     ee8:	6900      	ldr	r0, [r0, #16]
     eea:	1d40      	adds	r0, r0, #5
     eec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ef0:	e9d4 2100 	ldrd	r2, r1, [r4]
     ef4:	1a89      	subs	r1, r1, r2
     ef6:	6020      	str	r0, [r4, #0]
     ef8:	4408      	add	r0, r1
     efa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     efe:	6060      	str	r0, [r4, #4]
     f00:	464b      	mov	r3, r9
     f02:	4632      	mov	r2, r6
     f04:	4621      	mov	r1, r4
     f06:	68e8      	ldr	r0, [r5, #12]
     f08:	f7ff facc 	bl	4a4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x30>
     f0c:	2800      	cmp	r0, #0
     f0e:	bf1c      	itt	ne
     f10:	b003      	addne	sp, #12
     f12:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f16:	e9d4 1000 	ldrd	r1, r0, [r4]
     f1a:	1a40      	subs	r0, r0, r1
     f1c:	4430      	add	r0, r6
     f1e:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
     f22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f26:	e9c4 1000 	strd	r1, r0, [r4]
     f2a:	b003      	add	sp, #12
     f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f30:	8960      	ldrh	r0, [r4, #10]
     f32:	f106 0709 	add.w	r7, r6, #9
     f36:	b120      	cbz	r0, f42 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x742>
     f38:	f002 fb9c 	bl	3674 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     f3c:	2800      	cmp	r0, #0
     f3e:	bf08      	it	eq
     f40:	3732      	addeq	r7, #50	; 0x32
     f42:	4807      	ldr	r0, [pc, #28]	; (f60 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x760>)
     f44:	7841      	ldrb	r1, [r0, #1]
     f46:	9800      	ldr	r0, [sp, #0]
     f48:	4281      	cmp	r1, r0
     f4a:	bf84      	itt	hi
     f4c:	1a08      	subhi	r0, r1, r0
     f4e:	4407      	addhi	r7, r0
     f50:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
     f54:	e7cc      	b.n	ef0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6f0>
     f56:	0000      	.short	0x0000
     f58:	07a12000 	.word	0x07a12000
     f5c:	20000c2c 	.word	0x20000c2c
     f60:	20000012 	.word	0x20000012
     f64:	b510      	push	{r4, lr}
     f66:	4c15      	ldr	r4, [pc, #84]	; (fbc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7bc>)
     f68:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
     f6c:	2820      	cmp	r0, #32
     f6e:	bf18      	it	ne
     f70:	bd10      	popne	{r4, pc}
     f72:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
     f76:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     f7a:	f890 1020 	ldrb.w	r1, [r0, #32]
     f7e:	2920      	cmp	r1, #32
     f80:	d017      	beq.n	fb2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7b2>
     f82:	f8df c03c 	ldr.w	ip, [pc, #60]	; fc0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7c0>
     f86:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     f8a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     f8e:	785b      	ldrb	r3, [r3, #1]
     f90:	f880 3020 	strb.w	r3, [r0, #32]
     f94:	2301      	movs	r3, #1
     f96:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
     f9a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
     f9e:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
     fa2:	2002      	movs	r0, #2
     fa4:	f000 f8b0 	bl	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
     fa8:	2000      	movs	r0, #0
     faa:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
     fae:	77a0      	strb	r0, [r4, #30]
     fb0:	bd10      	pop	{r4, pc}
     fb2:	f240 318b 	movw	r1, #907	; 0x38b
     fb6:	2070      	movs	r0, #112	; 0x70
     fb8:	f002 fbc0 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fbc:	20000c2c 	.word	0x20000c2c
     fc0:	20000bac 	.word	0x20000bac
     fc4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fc8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
     fcc:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
     fd0:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     fd4:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     fd8:	2c20      	cmp	r4, #32
     fda:	bf08      	it	eq
     fdc:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     fe0:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     fe4:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
     fe8:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
     fec:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
     ff0:	2607      	movs	r6, #7
     ff2:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
     ff6:	2801      	cmp	r0, #1
     ff8:	d00e      	beq.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
     ffa:	2804      	cmp	r0, #4
     ffc:	bf08      	it	eq
     ffe:	2602      	moveq	r6, #2
    1000:	d00a      	beq.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
    1002:	2805      	cmp	r0, #5
    1004:	bf0c      	ite	eq
    1006:	2603      	moveq	r6, #3
    1008:	2806      	cmpne	r0, #6
    100a:	d005      	beq.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
    100c:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1010:	f04f 0070 	mov.w	r0, #112	; 0x70
    1014:	f002 fb92 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1018:	f1bb 0f00 	cmp.w	fp, #0
    101c:	bf18      	it	ne
    101e:	f3af 8000 	nopne.w
    1022:	f3ef 8010 	mrs	r0, PRIMASK
    1026:	b672      	cpsid	i
    1028:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    102c:	784a      	ldrb	r2, [r1, #1]
    102e:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1032:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1036:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    103a:	42a2      	cmp	r2, r4
    103c:	bf04      	itt	eq
    103e:	2220      	moveq	r2, #32
    1040:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1044:	b1b8      	cbz	r0, 1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    1046:	462a      	mov	r2, r5
    1048:	4621      	mov	r1, r4
    104a:	2001      	movs	r0, #1
    104c:	f000 f85c 	bl	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    1050:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1054:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    1058:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    105c:	6840      	ldr	r0, [r0, #4]
    105e:	4631      	mov	r1, r6
    1060:	4790      	blx	r2
    1062:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1066:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    106a:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    106e:	2c20      	cmp	r4, #32
    1070:	d1bc      	bne.n	fec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7ec>
    1072:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1076:	4806      	ldr	r0, [pc, #24]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    1078:	2800      	cmp	r0, #0
    107a:	bf18      	it	ne
    107c:	f3af 8000 	nopne.w
    1080:	b662      	cpsie	i
    1082:	e7e0      	b.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
    1084:	20000c2c 	.word	0x20000c2c
    1088:	00000000 	.word	0x00000000
    108c:	20000bac 	.word	0x20000bac
    1090:	00000000 	.word	0x00000000
    1094:	b510      	push	{r4, lr}
    1096:	4604      	mov	r4, r0
    1098:	6800      	ldr	r0, [r0, #0]
    109a:	f00b f8c5 	bl	c228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    109e:	4602      	mov	r2, r0
    10a0:	8960      	ldrh	r0, [r4, #10]
    10a2:	7a21      	ldrb	r1, [r4, #8]
    10a4:	4b14      	ldr	r3, [pc, #80]	; (10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
    10a6:	4408      	add	r0, r1
    10a8:	1c41      	adds	r1, r0, #1
    10aa:	1850      	adds	r0, r2, r1
    10ac:	429a      	cmp	r2, r3
    10ae:	d904      	bls.n	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
    10b0:	f240 6109 	movw	r1, #1545	; 0x609
    10b4:	2070      	movs	r0, #112	; 0x70
    10b6:	f002 fb41 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10ba:	4a10      	ldr	r2, [pc, #64]	; (10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>)
    10bc:	4291      	cmp	r1, r2
    10be:	dd04      	ble.n	10ca <CONFIG_FPROTECT_BLOCK_SIZE+0xca>
    10c0:	f240 610a 	movw	r1, #1546	; 0x60a
    10c4:	2070      	movs	r0, #112	; 0x70
    10c6:	f002 fb39 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10ca:	4a0d      	ldr	r2, [pc, #52]	; (1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>)
    10cc:	4291      	cmp	r1, r2
    10ce:	da04      	bge.n	10da <CONFIG_FPROTECT_BLOCK_SIZE+0xda>
    10d0:	f240 610b 	movw	r1, #1547	; 0x60b
    10d4:	2070      	movs	r0, #112	; 0x70
    10d6:	f002 fb31 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10da:	490a      	ldr	r1, [pc, #40]	; (1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>)
    10dc:	4281      	cmp	r1, r0
    10de:	bfde      	ittt	le
    10e0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    10e4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    10e8:	bd10      	pople	{r4, pc}
    10ea:	2800      	cmp	r0, #0
    10ec:	bfbc      	itt	lt
    10ee:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    10f2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    10f6:	bd10      	pop	{r4, pc}
    10f8:	1e847fff 	.word	0x1e847fff
    10fc:	07a12000 	.word	0x07a12000
    1100:	f85ee000 	.word	0xf85ee000
    1104:	1e848000 	.word	0x1e848000
    1108:	f8df c054 	ldr.w	ip, [pc, #84]	; 1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
    110c:	b510      	push	{r4, lr}
    110e:	2300      	movs	r3, #0
    1110:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1114:	2807      	cmp	r0, #7
    1116:	d21e      	bcs.n	1156 <CONFIG_FPROTECT_BLOCK_SIZE+0x156>
    1118:	e8df f000 	tbb	[pc, r0]
    111c:	05050505 	.word	0x05050505
    1120:	00040404 	.word	0x00040404
    1124:	2301      	movs	r3, #1
    1126:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    112a:	2b00      	cmp	r3, #0
    112c:	bf08      	it	eq
    112e:	bd10      	popeq	{r4, pc}
    1130:	480c      	ldr	r0, [pc, #48]	; (1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>)
    1132:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    1136:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    113a:	2820      	cmp	r0, #32
    113c:	bf0e      	itee	eq
    113e:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1142:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1146:	7041      	strbne	r1, [r0, #1]
    1148:	2020      	movs	r0, #32
    114a:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    114e:	7058      	strb	r0, [r3, #1]
    1150:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1154:	bd10      	pop	{r4, pc}
    1156:	f44f 7115 	mov.w	r1, #596	; 0x254
    115a:	2070      	movs	r0, #112	; 0x70
    115c:	f002 faee 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1160:	20000bac 	.word	0x20000bac
    1164:	20000c2c 	.word	0x20000c2c
    1168:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    116c:	b083      	sub	sp, #12
    116e:	485c      	ldr	r0, [pc, #368]	; (12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
    1170:	9904      	ldr	r1, [sp, #16]
    1172:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1176:	9001      	str	r0, [sp, #4]
    1178:	f890 4020 	ldrb.w	r4, [r0, #32]
    117c:	9803      	ldr	r0, [sp, #12]
    117e:	4625      	mov	r5, r4
    1180:	2801      	cmp	r0, #1
    1182:	bf18      	it	ne
    1184:	2802      	cmpne	r0, #2
    1186:	d005      	beq.n	1194 <CONFIG_FPROTECT_BLOCK_SIZE+0x194>
    1188:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    118c:	f04f 0070 	mov.w	r0, #112	; 0x70
    1190:	f002 fad4 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1194:	2700      	movs	r7, #0
    1196:	2d20      	cmp	r5, #32
    1198:	d04a      	beq.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    119a:	4851      	ldr	r0, [pc, #324]	; (12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
    119c:	9100      	str	r1, [sp, #0]
    119e:	2600      	movs	r6, #0
    11a0:	7f80      	ldrb	r0, [r0, #30]
    11a2:	2800      	cmp	r0, #0
    11a4:	bf08      	it	eq
    11a6:	2602      	moveq	r6, #2
    11a8:	f001 fc10 	bl	29cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    11ac:	f8df a138 	ldr.w	sl, [pc, #312]	; 12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
    11b0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    11b4:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    11b8:	f8df 9128 	ldr.w	r9, [pc, #296]	; 12e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e4>
    11bc:	688a      	ldr	r2, [r1, #8]
    11be:	68c9      	ldr	r1, [r1, #12]
    11c0:	1a12      	subs	r2, r2, r0
    11c2:	1a09      	subs	r1, r1, r0
    11c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    11c8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    11cc:	4296      	cmp	r6, r2
    11ce:	bf98      	it	ls
    11d0:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    11d4:	d201      	bcs.n	11da <CONFIG_FPROTECT_BLOCK_SIZE+0x1da>
    11d6:	4589      	cmp	r9, r1
    11d8:	d228      	bcs.n	122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>
    11da:	4a44      	ldr	r2, [pc, #272]	; (12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>)
    11dc:	9900      	ldr	r1, [sp, #0]
    11de:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    11e2:	4622      	mov	r2, r4
    11e4:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    11e8:	784c      	ldrb	r4, [r1, #1]
    11ea:	2c20      	cmp	r4, #32
    11ec:	d016      	beq.n	121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>
    11ee:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    11f2:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    11f6:	f8dc 8008 	ldr.w	r8, [ip, #8]
    11fa:	f8dc c00c 	ldr.w	ip, [ip, #12]
    11fe:	eba8 0800 	sub.w	r8, r8, r0
    1202:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    1206:	ebac 0100 	sub.w	r1, ip, r0
    120a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    120e:	4546      	cmp	r6, r8
    1210:	bf98      	it	ls
    1212:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    1216:	d2e4      	bcs.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
    1218:	4589      	cmp	r9, r1
    121a:	d3e2      	bcc.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
    121c:	2a20      	cmp	r2, #32
    121e:	d005      	beq.n	122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>
    1220:	2120      	movs	r1, #32
    1222:	2004      	movs	r0, #4
    1224:	9b00      	ldr	r3, [sp, #0]
    1226:	f7ff f901 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    122a:	4604      	mov	r4, r0
    122c:	42ac      	cmp	r4, r5
    122e:	d115      	bne.n	125c <CONFIG_FPROTECT_BLOCK_SIZE+0x25c>
    1230:	482f      	ldr	r0, [pc, #188]	; (12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>)
    1232:	2800      	cmp	r0, #0
    1234:	bf18      	it	ne
    1236:	f3af 8000 	nopne.w
    123a:	f001 fbc7 	bl	29cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    123e:	4c28      	ldr	r4, [pc, #160]	; (12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
    1240:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1244:	2920      	cmp	r1, #32
    1246:	d00d      	beq.n	1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>
    1248:	68e1      	ldr	r1, [r4, #12]
    124a:	1c82      	adds	r2, r0, #2
    124c:	1a51      	subs	r1, r2, r1
    124e:	0209      	lsls	r1, r1, #8
    1250:	17ca      	asrs	r2, r1, #31
    1252:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1256:	1209      	asrs	r1, r1, #8
    1258:	2900      	cmp	r1, #0
    125a:	dd03      	ble.n	1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>
    125c:	b005      	add	sp, #20
    125e:	2000      	movs	r0, #0
    1260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1264:	2d20      	cmp	r5, #32
    1266:	d00d      	beq.n	1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>
    1268:	462a      	mov	r2, r5
    126a:	9903      	ldr	r1, [sp, #12]
    126c:	f7ff fb16 	bl	89c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9c>
    1270:	b358      	cbz	r0, 12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    1272:	9801      	ldr	r0, [sp, #4]
    1274:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1278:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    127c:	b005      	add	sp, #20
    127e:	2001      	movs	r0, #1
    1280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1284:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1288:	b118      	cbz	r0, 1292 <CONFIG_FPROTECT_BLOCK_SIZE+0x292>
    128a:	f002 f8bb 	bl	3404 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    128e:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    1292:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1296:	b150      	cbz	r0, 12ae <CONFIG_FPROTECT_BLOCK_SIZE+0x2ae>
    1298:	4916      	ldr	r1, [pc, #88]	; (12f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f4>)
    129a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    129e:	6008      	str	r0, [r1, #0]
    12a0:	2005      	movs	r0, #5
    12a2:	f001 fde1 	bl	2e68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12a6:	f002 f915 	bl	34d4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    12aa:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    12ae:	2004      	movs	r0, #4
    12b0:	f001 fdda 	bl	2e68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12b4:	f001 fe40 	bl	2f38 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    12b8:	2020      	movs	r0, #32
    12ba:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    12be:	480e      	ldr	r0, [pc, #56]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    12c0:	6880      	ldr	r0, [r0, #8]
    12c2:	6007      	str	r7, [r0, #0]
    12c4:	480d      	ldr	r0, [pc, #52]	; (12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>)
    12c6:	6007      	str	r7, [r0, #0]
    12c8:	e7d8      	b.n	127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
    12ca:	462a      	mov	r2, r5
    12cc:	2120      	movs	r1, #32
    12ce:	2004      	movs	r0, #4
    12d0:	9b04      	ldr	r3, [sp, #16]
    12d2:	f7ff f8ab 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    12d6:	b005      	add	sp, #20
    12d8:	2000      	movs	r0, #0
    12da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12de:	0000      	.short	0x0000
    12e0:	20000c2c 	.word	0x20000c2c
    12e4:	003fffff 	.word	0x003fffff
    12e8:	200008ac 	.word	0x200008ac
    12ec:	20000bac 	.word	0x20000bac
    12f0:	00000000 	.word	0x00000000
    12f4:	4001f508 	.word	0x4001f508
    12f8:	20000010 	.word	0x20000010
    12fc:	40000508 	.word	0x40000508

00001300 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1300:	4906      	ldr	r1, [pc, #24]	; (131c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    1302:	b510      	push	{r4, lr}
    1304:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    1308:	2a20      	cmp	r2, #32
    130a:	bf1c      	itt	ne
    130c:	7788      	strbne	r0, [r1, #30]
    130e:	bd10      	popne	{r4, pc}
    1310:	f240 31ea 	movw	r1, #1002	; 0x3ea
    1314:	2070      	movs	r0, #112	; 0x70
    1316:	f002 fa11 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    131a:	0000      	.short	0x0000
    131c:	20000c2c 	.word	0x20000c2c

00001320 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1324:	4e5b      	ldr	r6, [pc, #364]	; (1494 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10c>)
    1326:	4681      	mov	r9, r0
    1328:	b085      	sub	sp, #20
    132a:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    132e:	468a      	mov	sl, r1
    1330:	2820      	cmp	r0, #32
    1332:	d04d      	beq.n	13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>
    1334:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1338:	f106 040c 	add.w	r4, r6, #12
    133c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1340:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    1344:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1348:	2020      	movs	r0, #32
    134a:	f88d 0000 	strb.w	r0, [sp]
    134e:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1352:	aa03      	add	r2, sp, #12
    1354:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1358:	a901      	add	r1, sp, #4
    135a:	f890 5020 	ldrb.w	r5, [r0, #32]
    135e:	6930      	ldr	r0, [r6, #16]
    1360:	9002      	str	r0, [sp, #8]
    1362:	6830      	ldr	r0, [r6, #0]
    1364:	4448      	add	r0, r9
    1366:	f001 f9db 	bl	2720 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    136a:	68f8      	ldr	r0, [r7, #12]
    136c:	9901      	ldr	r1, [sp, #4]
    136e:	4a4a      	ldr	r2, [pc, #296]	; (1498 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x110>)
    1370:	4408      	add	r0, r1
    1372:	f1a9 0164 	sub.w	r1, r9, #100	; 0x64
    1376:	4291      	cmp	r1, r2
    1378:	d82f      	bhi.n	13da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x52>
    137a:	68b9      	ldr	r1, [r7, #8]
    137c:	1a41      	subs	r1, r0, r1
    137e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1382:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1386:	d228      	bcs.n	13da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x52>
    1388:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    138c:	6060      	str	r0, [r4, #4]
    138e:	4630      	mov	r0, r6
    1390:	f884 a00c 	strb.w	sl, [r4, #12]
    1394:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    1398:	46ea      	mov	sl, sp
    139a:	2d20      	cmp	r5, #32
    139c:	bf1c      	itt	ne
    139e:	493f      	ldrne	r1, [pc, #252]	; (149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>)
    13a0:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    13a4:	d03c      	beq.n	1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>
    13a6:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    13aa:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    13ae:	6860      	ldr	r0, [r4, #4]
    13b0:	68ba      	ldr	r2, [r7, #8]
    13b2:	4621      	mov	r1, r4
    13b4:	1a10      	subs	r0, r2, r0
    13b6:	0200      	lsls	r0, r0, #8
    13b8:	17c2      	asrs	r2, r0, #31
    13ba:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13be:	f107 0608 	add.w	r6, r7, #8
    13c2:	1200      	asrs	r0, r0, #8
    13c4:	d41b      	bmi.n	13fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x76>
    13c6:	8970      	ldrh	r0, [r6, #10]
    13c8:	b350      	cbz	r0, 1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>
    13ca:	8948      	ldrh	r0, [r1, #10]
    13cc:	b148      	cbz	r0, 13e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a>
    13ce:	e027      	b.n	1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>
    13d0:	f640 317b 	movw	r1, #2939	; 0xb7b
    13d4:	2070      	movs	r0, #112	; 0x70
    13d6:	f002 f9b1 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13da:	b005      	add	sp, #20
    13dc:	2001      	movs	r0, #1
    13de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13e2:	4620      	mov	r0, r4
    13e4:	f7ff fe56 	bl	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
    13e8:	f001 f97e 	bl	26e8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    13ec:	6831      	ldr	r1, [r6, #0]
    13ee:	1a08      	subs	r0, r1, r0
    13f0:	0200      	lsls	r0, r0, #8
    13f2:	17c1      	asrs	r1, r0, #31
    13f4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    13f8:	1200      	asrs	r0, r0, #8
    13fa:	2833      	cmp	r0, #51	; 0x33
    13fc:	da10      	bge.n	1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>
    13fe:	f88a 5000 	strb.w	r5, [sl]
    1402:	7d39      	ldrb	r1, [r7, #20]
    1404:	7b20      	ldrb	r0, [r4, #12]
    1406:	4281      	cmp	r1, r0
    1408:	d805      	bhi.n	1416 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e>
    140a:	9802      	ldr	r0, [sp, #8]
    140c:	6060      	str	r0, [r4, #4]
    140e:	b005      	add	sp, #20
    1410:	2002      	movs	r0, #2
    1412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1416:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    141a:	7845      	ldrb	r5, [r0, #1]
    141c:	2d20      	cmp	r5, #32
    141e:	d1c2      	bne.n	13a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e>
    1420:	2005      	movs	r0, #5
    1422:	f001 fd21 	bl	2e68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1426:	4c1b      	ldr	r4, [pc, #108]	; (1494 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10c>)
    1428:	f04f 30ff 	mov.w	r0, #4294967295
    142c:	60a0      	str	r0, [r4, #8]
    142e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    1432:	f89d 2000 	ldrb.w	r2, [sp]
    1436:	2120      	movs	r1, #32
    1438:	2a20      	cmp	r2, #32
    143a:	bf13      	iteet	ne
    143c:	2005      	movne	r0, #5
    143e:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    1442:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1446:	f7fe fff1 	blne	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    144a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    144e:	4913      	ldr	r1, [pc, #76]	; (149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>)
    1450:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1454:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    1458:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    145c:	7048      	strb	r0, [r1, #1]
    145e:	6820      	ldr	r0, [r4, #0]
    1460:	4448      	add	r0, r9
    1462:	6020      	str	r0, [r4, #0]
    1464:	2001      	movs	r0, #1
    1466:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    146a:	7e60      	ldrb	r0, [r4, #25]
    146c:	2801      	cmp	r0, #1
    146e:	d105      	bne.n	147c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf4>
    1470:	6920      	ldr	r0, [r4, #16]
    1472:	1e40      	subs	r0, r0, #1
    1474:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1478:	f001 fb48 	bl	2b0c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    147c:	f89d 0000 	ldrb.w	r0, [sp]
    1480:	2820      	cmp	r0, #32
    1482:	d003      	beq.n	148c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x104>
    1484:	4806      	ldr	r0, [pc, #24]	; (14a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118>)
    1486:	7840      	ldrb	r0, [r0, #1]
    1488:	f002 fa28 	bl	38dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    148c:	b005      	add	sp, #20
    148e:	2000      	movs	r0, #0
    1490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1494:	20000c2c 	.word	0x20000c2c
    1498:	07a11f9c 	.word	0x07a11f9c
    149c:	20000bac 	.word	0x20000bac
    14a0:	20000010 	.word	0x20000010

000014a4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    14a4:	b570      	push	{r4, r5, r6, lr}
    14a6:	4a23      	ldr	r2, [pc, #140]	; (1534 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    14a8:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    14ac:	2920      	cmp	r1, #32
    14ae:	d039      	beq.n	1524 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    14b0:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    14b4:	f5a2 7360 	sub.w	r3, r2, #896	; 0x380
    14b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    14bc:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    14c0:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    14c4:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
    14c8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    14cc:	f891 1020 	ldrb.w	r1, [r1, #32]
    14d0:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    14d4:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    14d8:	2920      	cmp	r1, #32
    14da:	d028      	beq.n	152e <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    14dc:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    14e0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    14e4:	7d2d      	ldrb	r5, [r5, #20]
    14e6:	4285      	cmp	r5, r0
    14e8:	bf84      	itt	hi
    14ea:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    14ee:	7849      	ldrbhi	r1, [r1, #1]
    14f0:	d8f2      	bhi.n	14d8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x34>
    14f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    14f6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    14fa:	f8dc 000c 	ldr.w	r0, [ip, #12]
    14fe:	6889      	ldr	r1, [r1, #8]
    1500:	6814      	ldr	r4, [r2, #0]
    1502:	1a08      	subs	r0, r1, r0
    1504:	0200      	lsls	r0, r0, #8
    1506:	17c1      	asrs	r1, r0, #31
    1508:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    150c:	1200      	asrs	r0, r0, #8
    150e:	d407      	bmi.n	1520 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    1510:	f00a fe8a 	bl	c228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1514:	f104 0164 	add.w	r1, r4, #100	; 0x64
    1518:	4288      	cmp	r0, r1
    151a:	bf24      	itt	cs
    151c:	1b00      	subcs	r0, r0, r4
    151e:	bd70      	popcs	{r4, r5, r6, pc}
    1520:	2000      	movs	r0, #0
    1522:	bd70      	pop	{r4, r5, r6, pc}
    1524:	f640 314d 	movw	r1, #2893	; 0xb4d
    1528:	2070      	movs	r0, #112	; 0x70
    152a:	f002 f907 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    152e:	f04f 30ff 	mov.w	r0, #4294967295
    1532:	bd70      	pop	{r4, r5, r6, pc}
    1534:	20000c2c 	.word	0x20000c2c

00001538 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    1538:	4806      	ldr	r0, [pc, #24]	; (1554 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    153a:	b510      	push	{r4, lr}
    153c:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1540:	2920      	cmp	r1, #32
    1542:	bf1c      	itt	ne
    1544:	7e00      	ldrbne	r0, [r0, #24]
    1546:	bd10      	popne	{r4, pc}
    1548:	f640 3174 	movw	r1, #2932	; 0xb74
    154c:	2070      	movs	r0, #112	; 0x70
    154e:	f002 f8f5 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1552:	0000      	.short	0x0000
    1554:	20000c2c 	.word	0x20000c2c

00001558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    1558:	4602      	mov	r2, r0
    155a:	4b14      	ldr	r3, [pc, #80]	; (15ac <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    155c:	b510      	push	{r4, lr}
    155e:	4408      	add	r0, r1
    1560:	429a      	cmp	r2, r3
    1562:	d904      	bls.n	156e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    1564:	f240 6109 	movw	r1, #1545	; 0x609
    1568:	2070      	movs	r0, #112	; 0x70
    156a:	f002 f8e7 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    156e:	4a10      	ldr	r2, [pc, #64]	; (15b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    1570:	4291      	cmp	r1, r2
    1572:	dd04      	ble.n	157e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    1574:	f240 610a 	movw	r1, #1546	; 0x60a
    1578:	2070      	movs	r0, #112	; 0x70
    157a:	f002 f8df 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    157e:	4a0d      	ldr	r2, [pc, #52]	; (15b4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1580:	4291      	cmp	r1, r2
    1582:	da04      	bge.n	158e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    1584:	f240 610b 	movw	r1, #1547	; 0x60b
    1588:	2070      	movs	r0, #112	; 0x70
    158a:	f002 f8d7 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    158e:	490a      	ldr	r1, [pc, #40]	; (15b8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1590:	4281      	cmp	r1, r0
    1592:	bfde      	ittt	le
    1594:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1598:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    159c:	bd10      	pople	{r4, pc}
    159e:	2800      	cmp	r0, #0
    15a0:	bfbc      	itt	lt
    15a2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    15a6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    15aa:	bd10      	pop	{r4, pc}
    15ac:	1e847fff 	.word	0x1e847fff
    15b0:	07a12000 	.word	0x07a12000
    15b4:	f85ee000 	.word	0xf85ee000
    15b8:	1e848000 	.word	0x1e848000

000015bc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    15bc:	4a10      	ldr	r2, [pc, #64]	; (1600 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    15be:	1a0b      	subs	r3, r1, r0
    15c0:	f102 0c01 	add.w	ip, r2, #1
    15c4:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    15c8:	bf3c      	itt	cc
    15ca:	4618      	movcc	r0, r3
    15cc:	4770      	bxcc	lr
    15ce:	b510      	push	{r4, lr}
    15d0:	1a44      	subs	r4, r0, r1
    15d2:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    15d6:	bf3c      	itt	cc
    15d8:	4618      	movcc	r0, r3
    15da:	bd10      	popcc	{r4, pc}
    15dc:	429a      	cmp	r2, r3
    15de:	d203      	bcs.n	15e8 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    15e0:	1a10      	subs	r0, r2, r0
    15e2:	4408      	add	r0, r1
    15e4:	1c40      	adds	r0, r0, #1
    15e6:	bd10      	pop	{r4, pc}
    15e8:	42a2      	cmp	r2, r4
    15ea:	d204      	bcs.n	15f6 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    15ec:	1a51      	subs	r1, r2, r1
    15ee:	4408      	add	r0, r1
    15f0:	1c40      	adds	r0, r0, #1
    15f2:	4240      	negs	r0, r0
    15f4:	bd10      	pop	{r4, pc}
    15f6:	f640 310c 	movw	r1, #2828	; 0xb0c
    15fa:	2070      	movs	r0, #112	; 0x70
    15fc:	f002 f89e 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1600:	1e847fff 	.word	0x1e847fff

00001604 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    1604:	4907      	ldr	r1, [pc, #28]	; (1624 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    1606:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    160a:	4282      	cmp	r2, r0
    160c:	bf04      	itt	eq
    160e:	6848      	ldreq	r0, [r1, #4]
    1610:	4770      	bxeq	lr
    1612:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1616:	4904      	ldr	r1, [pc, #16]	; (1628 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    1618:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    161c:	3008      	adds	r0, #8
    161e:	f7ff bd39 	b.w	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
    1622:	0000      	.short	0x0000
    1624:	20000c2c 	.word	0x20000c2c
    1628:	200008ac 	.word	0x200008ac

0000162c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    162c:	490e      	ldr	r1, [pc, #56]	; (1668 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    162e:	b510      	push	{r4, lr}
    1630:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1634:	2820      	cmp	r0, #32
    1636:	d012      	beq.n	165e <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    1638:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    163c:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    1640:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1644:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    1648:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    164c:	6840      	ldr	r0, [r0, #4]
    164e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1652:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    1656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    165a:	2104      	movs	r1, #4
    165c:	4710      	bx	r2
    165e:	f640 01bc 	movw	r1, #2236	; 0x8bc
    1662:	2070      	movs	r0, #112	; 0x70
    1664:	f002 f86a 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1668:	20000c2c 	.word	0x20000c2c

0000166c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    166e:	4d6d      	ldr	r5, [pc, #436]	; (1824 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1670:	496d      	ldr	r1, [pc, #436]	; (1828 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    1672:	2601      	movs	r6, #1
    1674:	f505 7460 	add.w	r4, r5, #896	; 0x380
    1678:	2808      	cmp	r0, #8
    167a:	d273      	bcs.n	1764 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    167c:	e8df f000 	tbb	[pc, r0]
    1680:	af9d6704 	.word	0xaf9d6704
    1684:	b9b444cd 	.word	0xb9b444cd
    1688:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    168c:	b918      	cbnz	r0, 1696 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    168e:	f001 fed5 	bl	343c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1692:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    1696:	8ae0      	ldrh	r0, [r4, #22]
    1698:	b110      	cbz	r0, 16a0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    169a:	f001 ffeb 	bl	3674 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    169e:	b188      	cbz	r0, 16c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    16a0:	f7ff fc60 	bl	f64 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x764>
    16a4:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    16a8:	68a1      	ldr	r1, [r4, #8]
    16aa:	f1b1 3fff 	cmp.w	r1, #4294967295
    16ae:	d005      	beq.n	16bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    16b0:	2301      	movs	r3, #1
    16b2:	2203      	movs	r2, #3
    16b4:	2005      	movs	r0, #5
    16b6:	f001 fb0f 	bl	2cd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    16ba:	b140      	cbz	r0, 16ce <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    16bc:	7e60      	ldrb	r0, [r4, #25]
    16be:	2801      	cmp	r0, #1
    16c0:	d110      	bne.n	16e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    16c2:	e009      	b.n	16d8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    16c4:	f44f 6107 	mov.w	r1, #2160	; 0x870
    16c8:	2070      	movs	r0, #112	; 0x70
    16ca:	f002 f837 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16ce:	f640 0175 	movw	r1, #2165	; 0x875
    16d2:	2070      	movs	r0, #112	; 0x70
    16d4:	f002 f832 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16d8:	6920      	ldr	r0, [r4, #16]
    16da:	1e40      	subs	r0, r0, #1
    16dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16e0:	f001 fa14 	bl	2b0c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    16e4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    16e8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    16ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    16f0:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    16f4:	6840      	ldr	r0, [r0, #4]
    16f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    16fa:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    16fe:	b001      	add	sp, #4
    1700:	2101      	movs	r1, #1
    1702:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1706:	4710      	bx	r2
    1708:	f7ff fc2c 	bl	f64 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x764>
    170c:	f04f 30ff 	mov.w	r0, #4294967295
    1710:	60a0      	str	r0, [r4, #8]
    1712:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    1716:	f88d 0000 	strb.w	r0, [sp]
    171a:	f89d 0000 	ldrb.w	r0, [sp]
    171e:	b188      	cbz	r0, 1744 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    1720:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1724:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1728:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    172c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1730:	6840      	ldr	r0, [r0, #4]
    1732:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1736:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    173a:	b001      	add	sp, #4
    173c:	2106      	movs	r1, #6
    173e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1742:	4710      	bx	r2
    1744:	f640 0186 	movw	r1, #2182	; 0x886
    1748:	2070      	movs	r0, #112	; 0x70
    174a:	f001 fff7 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    174e:	f7ff fc09 	bl	f64 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x764>
    1752:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    1756:	f001 ff8d 	bl	3674 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    175a:	b120      	cbz	r0, 1766 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    175c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1760:	b130      	cbz	r0, 1770 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    1762:	e009      	b.n	1778 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    1764:	e059      	b.n	181a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    1766:	f640 0196 	movw	r1, #2198	; 0x896
    176a:	2070      	movs	r0, #112	; 0x70
    176c:	f001 ffe6 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1770:	f001 fe64 	bl	343c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1774:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    1778:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    177c:	b158      	cbz	r0, 1796 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    177e:	492b      	ldr	r1, [pc, #172]	; (182c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    1780:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1784:	6008      	str	r0, [r1, #0]
    1786:	2005      	movs	r0, #5
    1788:	f001 fb6e 	bl	2e68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    178c:	f001 fea2 	bl	34d4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1790:	2000      	movs	r0, #0
    1792:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    1796:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    179a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    179e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    17a2:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    17a6:	6840      	ldr	r0, [r0, #4]
    17a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    17ac:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    17b0:	b001      	add	sp, #4
    17b2:	2100      	movs	r1, #0
    17b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    17b8:	4710      	bx	r2
    17ba:	f001 fc07 	bl	2fcc <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    17be:	8ae0      	ldrh	r0, [r4, #22]
    17c0:	b110      	cbz	r0, 17c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    17c2:	f001 ff57 	bl	3674 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    17c6:	b128      	cbz	r0, 17d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    17c8:	4819      	ldr	r0, [pc, #100]	; (1830 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    17ca:	7800      	ldrb	r0, [r0, #0]
    17cc:	2803      	cmp	r0, #3
    17ce:	bf08      	it	eq
    17d0:	7766      	strbeq	r6, [r4, #29]
    17d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17d4:	f640 01a1 	movw	r1, #2209	; 0x8a1
    17d8:	2070      	movs	r0, #112	; 0x70
    17da:	f001 ffaf 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17de:	4815      	ldr	r0, [pc, #84]	; (1834 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    17e0:	6006      	str	r6, [r0, #0]
    17e2:	6888      	ldr	r0, [r1, #8]
    17e4:	6006      	str	r6, [r0, #0]
    17e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17e8:	7808      	ldrb	r0, [r1, #0]
    17ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    17ee:	f002 b875 	b.w	38dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    17f2:	f7ff fbb7 	bl	f64 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x764>
    17f6:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    17fa:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    17fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1802:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1806:	6840      	ldr	r0, [r0, #4]
    1808:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    180c:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1810:	b001      	add	sp, #4
    1812:	2105      	movs	r1, #5
    1814:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1818:	4710      	bx	r2
    181a:	f640 01b4 	movw	r1, #2228	; 0x8b4
    181e:	2070      	movs	r0, #112	; 0x70
    1820:	f001 ff8c 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1824:	200008ac 	.word	0x200008ac
    1828:	20000010 	.word	0x20000010
    182c:	4001f508 	.word	0x4001f508
    1830:	20000012 	.word	0x20000012
    1834:	40000508 	.word	0x40000508

00001838 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1838:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    183c:	4682      	mov	sl, r0
    183e:	48dc      	ldr	r0, [pc, #880]	; (1bb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    1840:	b08b      	sub	sp, #44	; 0x2c
    1842:	6800      	ldr	r0, [r0, #0]
    1844:	4ddb      	ldr	r5, [pc, #876]	; (1bb4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    1846:	05c0      	lsls	r0, r0, #23
    1848:	0dc0      	lsrs	r0, r0, #23
    184a:	d00e      	beq.n	186a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    184c:	3810      	subs	r0, #16
    184e:	b240      	sxtb	r0, r0
    1850:	2800      	cmp	r0, #0
    1852:	bfb8      	it	lt
    1854:	f000 000f 	andlt.w	r0, r0, #15
    1858:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    185c:	bfac      	ite	ge
    185e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1862:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1866:	0940      	lsrs	r0, r0, #5
    1868:	d00d      	beq.n	1886 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    186a:	980c      	ldr	r0, [sp, #48]	; 0x30
    186c:	f04f 0b00 	mov.w	fp, #0
    1870:	7800      	ldrb	r0, [r0, #0]
    1872:	2800      	cmp	r0, #0
    1874:	bf18      	it	ne
    1876:	2801      	cmpne	r0, #1
    1878:	d018      	beq.n	18ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    187a:	f240 714f 	movw	r1, #1871	; 0x74f
    187e:	f04f 0070 	mov.w	r0, #112	; 0x70
    1882:	f001 ff5b 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1886:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    188a:	f04f 0b01 	mov.w	fp, #1
    188e:	2820      	cmp	r0, #32
    1890:	d007      	beq.n	18a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1892:	980c      	ldr	r0, [sp, #48]	; 0x30
    1894:	7800      	ldrb	r0, [r0, #0]
    1896:	b148      	cbz	r0, 18ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1898:	f240 714b 	movw	r1, #1867	; 0x74b
    189c:	2070      	movs	r0, #112	; 0x70
    189e:	f001 ff4d 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18a2:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    18a6:	2070      	movs	r0, #112	; 0x70
    18a8:	f001 ff48 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ac:	4cc2      	ldr	r4, [pc, #776]	; (1bb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    18ae:	b124      	cbz	r4, 18ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    18b0:	2100      	movs	r1, #0
    18b2:	f240 7052 	movw	r0, #1874	; 0x752
    18b6:	f3af 8000 	nop.w
    18ba:	49c0      	ldr	r1, [pc, #768]	; (1bbc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    18bc:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    18c0:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    18c4:	f04f 0801 	mov.w	r8, #1
    18c8:	9000      	str	r0, [sp, #0]
    18ca:	b124      	cbz	r4, 18d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    18cc:	2100      	movs	r1, #0
    18ce:	f240 705a 	movw	r0, #1882	; 0x75a
    18d2:	f3af 8000 	nop.w
    18d6:	f1b8 0f00 	cmp.w	r8, #0
    18da:	d009      	beq.n	18f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    18dc:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    18e0:	f04f 0900 	mov.w	r9, #0
    18e4:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    18e8:	f1bb 0f00 	cmp.w	fp, #0
    18ec:	d007      	beq.n	18fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    18ee:	e032      	b.n	1956 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    18f0:	48b3      	ldr	r0, [pc, #716]	; (1bc0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    18f2:	2800      	cmp	r0, #0
    18f4:	bf18      	it	ne
    18f6:	f3af 8000 	nopne.w
    18fa:	b662      	cpsie	i
    18fc:	e7ee      	b.n	18dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    18fe:	4637      	mov	r7, r6
    1900:	2001      	movs	r0, #1
    1902:	ea20 0607 	bic.w	r6, r0, r7
    1906:	48af      	ldr	r0, [pc, #700]	; (1bc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1908:	2240      	movs	r2, #64	; 0x40
    190a:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    190e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1912:	f00a fdf7 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1916:	b124      	cbz	r4, 1922 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    1918:	2100      	movs	r1, #0
    191a:	f240 50cd 	movw	r0, #1485	; 0x5cd
    191e:	f3af 8000 	nop.w
    1922:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    1926:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    192a:	6a09      	ldr	r1, [r1, #32]
    192c:	6201      	str	r1, [r0, #32]
    192e:	b124      	cbz	r4, 193a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    1930:	2100      	movs	r1, #0
    1932:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1936:	f3af 8000 	nop.w
    193a:	b124      	cbz	r4, 1946 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    193c:	2100      	movs	r1, #0
    193e:	f240 7064 	movw	r0, #1892	; 0x764
    1942:	f3af 8000 	nop.w
    1946:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    194a:	f88d 0004 	strb.w	r0, [sp, #4]
    194e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1952:	2800      	cmp	r0, #0
    1954:	d1b9      	bne.n	18ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1956:	b124      	cbz	r4, 1962 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    1958:	2100      	movs	r1, #0
    195a:	f240 706e 	movw	r0, #1902	; 0x76e
    195e:	f3af 8000 	nop.w
    1962:	f001 f833 	bl	29cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1966:	4680      	mov	r8, r0
    1968:	4633      	mov	r3, r6
    196a:	aa06      	add	r2, sp, #24
    196c:	990c      	ldr	r1, [sp, #48]	; 0x30
    196e:	f7ff fa25 	bl	dbc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5bc>
    1972:	b124      	cbz	r4, 197e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    1974:	2100      	movs	r1, #0
    1976:	f240 7075 	movw	r0, #1909	; 0x775
    197a:	f3af 8000 	nop.w
    197e:	4991      	ldr	r1, [pc, #580]	; (1bc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1980:	a806      	add	r0, sp, #24
    1982:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    1986:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    198a:	2901      	cmp	r1, #1
    198c:	bf18      	it	ne
    198e:	2902      	cmpne	r1, #2
    1990:	d13c      	bne.n	1a0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1992:	9906      	ldr	r1, [sp, #24]
    1994:	9b07      	ldr	r3, [sp, #28]
    1996:	eba1 0108 	sub.w	r1, r1, r8
    199a:	4a8b      	ldr	r2, [pc, #556]	; (1bc8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    199c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    19a0:	eba3 0308 	sub.w	r3, r3, r8
    19a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    19a8:	2902      	cmp	r1, #2
    19aa:	d371      	bcc.n	1a90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    19ac:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    19b0:	d26e      	bcs.n	1a90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    19b2:	429a      	cmp	r2, r3
    19b4:	d36c      	bcc.n	1a90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    19b6:	f04f 0901 	mov.w	r9, #1
    19ba:	ab01      	add	r3, sp, #4
    19bc:	aa05      	add	r2, sp, #20
    19be:	4631      	mov	r1, r6
    19c0:	f7fe feec 	bl	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
    19c4:	2800      	cmp	r0, #0
    19c6:	d06b      	beq.n	1aa0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    19c8:	f89d 1014 	ldrb.w	r1, [sp, #20]
    19cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
    19d0:	4633      	mov	r3, r6
    19d2:	428a      	cmp	r2, r1
    19d4:	d068      	beq.n	1aa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    19d6:	2005      	movs	r0, #5
    19d8:	f7fe fd28 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    19dc:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    19e0:	7048      	strb	r0, [r1, #1]
    19e2:	f89d 0014 	ldrb.w	r0, [sp, #20]
    19e6:	2820      	cmp	r0, #32
    19e8:	bf03      	ittte	eq
    19ea:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    19ee:	f880 a020 	strbeq.w	sl, [r0, #32]
    19f2:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    19f6:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    19fa:	bf18      	it	ne
    19fc:	f880 a001 	strbne.w	sl, [r0, #1]
    1a00:	4632      	mov	r2, r6
    1a02:	4651      	mov	r1, sl
    1a04:	f05f 0003 	movs.w	r0, #3
    1a08:	f7ff fb7e 	bl	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    1a0c:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1a10:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1a14:	f88d 0004 	strb.w	r0, [sp, #4]
    1a18:	f89d 7004 	ldrb.w	r7, [sp, #4]
    1a1c:	b124      	cbz	r4, 1a28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    1a1e:	2100      	movs	r1, #0
    1a20:	f240 707c 	movw	r0, #1916	; 0x77c
    1a24:	f3af 8000 	nop.w
    1a28:	4868      	ldr	r0, [pc, #416]	; (1bcc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    1a2a:	2800      	cmp	r0, #0
    1a2c:	bf18      	it	ne
    1a2e:	f3af 8000 	nopne.w
    1a32:	f3ef 8810 	mrs	r8, PRIMASK
    1a36:	b672      	cpsid	i
    1a38:	b124      	cbz	r4, 1a44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    1a3a:	2100      	movs	r1, #0
    1a3c:	f240 7082 	movw	r0, #1922	; 0x782
    1a40:	f3af 8000 	nop.w
    1a44:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1a48:	f88d 0004 	strb.w	r0, [sp, #4]
    1a4c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1a50:	2800      	cmp	r0, #0
    1a52:	f47f af3a 	bne.w	18ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1a56:	b124      	cbz	r4, 1a62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    1a58:	2100      	movs	r1, #0
    1a5a:	f240 708a 	movw	r0, #1930	; 0x78a
    1a5e:	f3af 8000 	nop.w
    1a62:	f10d 0e18 	add.w	lr, sp, #24
    1a66:	9800      	ldr	r0, [sp, #0]
    1a68:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    1a6c:	f100 0008 	add.w	r0, r0, #8
    1a70:	f1b9 0f00 	cmp.w	r9, #0
    1a74:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1a78:	d044      	beq.n	1b04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1a7a:	b124      	cbz	r4, 1a86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    1a7c:	2100      	movs	r1, #0
    1a7e:	f240 7097 	movw	r0, #1943	; 0x797
    1a82:	f3af 8000 	nop.w
    1a86:	f1bb 0f00 	cmp.w	fp, #0
    1a8a:	d12c      	bne.n	1ae6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1a8c:	e016      	b.n	1abc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    1a8e:	e7ff      	b.n	1a90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a90:	4632      	mov	r2, r6
    1a92:	4651      	mov	r1, sl
    1a94:	2004      	movs	r0, #4
    1a96:	f7ff fb37 	bl	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    1a9a:	f04f 0901 	mov.w	r9, #1
    1a9e:	e7b5      	b.n	1a0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1aa0:	4632      	mov	r2, r6
    1aa2:	4651      	mov	r1, sl
    1aa4:	2004      	movs	r0, #4
    1aa6:	e7af      	b.n	1a08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    1aa8:	2920      	cmp	r1, #32
    1aaa:	bf19      	ittee	ne
    1aac:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1ab0:	7840      	ldrbne	r0, [r0, #1]
    1ab2:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1ab6:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1aba:	e78f      	b.n	19dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    1abc:	b19f      	cbz	r7, 1ae6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1abe:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1ac2:	2820      	cmp	r0, #32
    1ac4:	d10f      	bne.n	1ae6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1ac6:	b124      	cbz	r4, 1ad2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    1ac8:	2100      	movs	r1, #0
    1aca:	f240 709c 	movw	r0, #1948	; 0x79c
    1ace:	f3af 8000 	nop.w
    1ad2:	4631      	mov	r1, r6
    1ad4:	2002      	movs	r0, #2
    1ad6:	f7ff fb47 	bl	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
    1ada:	b920      	cbnz	r0, 1ae6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1adc:	980c      	ldr	r0, [sp, #48]	; 0x30
    1ade:	7800      	ldrb	r0, [r0, #0]
    1ae0:	b3f0      	cbz	r0, 1b60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    1ae2:	2801      	cmp	r0, #1
    1ae4:	d04c      	beq.n	1b80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    1ae6:	b124      	cbz	r4, 1af2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    1ae8:	2100      	movs	r1, #0
    1aea:	f240 70b9 	movw	r0, #1977	; 0x7b9
    1aee:	f3af 8000 	nop.w
    1af2:	f1bb 0f00 	cmp.w	fp, #0
    1af6:	bf18      	it	ne
    1af8:	2001      	movne	r0, #1
    1afa:	d04a      	beq.n	1b92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    1afc:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1b00:	f04f 0901 	mov.w	r9, #1
    1b04:	b124      	cbz	r4, 1b10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    1b06:	2100      	movs	r1, #0
    1b08:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1b0c:	f3af 8000 	nop.w
    1b10:	f1b8 0f00 	cmp.w	r8, #0
    1b14:	d045      	beq.n	1ba2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1b16:	b124      	cbz	r4, 1b22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    1b18:	2100      	movs	r1, #0
    1b1a:	f240 70ce 	movw	r0, #1998	; 0x7ce
    1b1e:	f3af 8000 	nop.w
    1b22:	f1b9 0f00 	cmp.w	r9, #0
    1b26:	d011      	beq.n	1b4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1b28:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1b2c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1b30:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1b34:	2820      	cmp	r0, #32
    1b36:	d009      	beq.n	1b4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1b38:	b124      	cbz	r4, 1b44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    1b3a:	2100      	movs	r1, #0
    1b3c:	f240 70d5 	movw	r0, #2005	; 0x7d5
    1b40:	f3af 8000 	nop.w
    1b44:	4822      	ldr	r0, [pc, #136]	; (1bd0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    1b46:	7840      	ldrb	r0, [r0, #1]
    1b48:	f001 fec8 	bl	38dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1b4c:	b124      	cbz	r4, 1b58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    1b4e:	2100      	movs	r1, #0
    1b50:	f240 70da 	movw	r0, #2010	; 0x7da
    1b54:	f3af 8000 	nop.w
    1b58:	b00d      	add	sp, #52	; 0x34
    1b5a:	4648      	mov	r0, r9
    1b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b60:	e7ff      	b.n	1b62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    1b62:	b124      	cbz	r4, 1b6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    1b64:	2100      	movs	r1, #0
    1b66:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1b6a:	f3af 8000 	nop.w
    1b6e:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1b72:	4651      	mov	r1, sl
    1b74:	2004      	movs	r0, #4
    1b76:	f7ff fac7 	bl	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    1b7a:	f04f 0901 	mov.w	r9, #1
    1b7e:	e7c1      	b.n	1b04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1b80:	2c00      	cmp	r4, #0
    1b82:	f43f aea2 	beq.w	18ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1b86:	2100      	movs	r1, #0
    1b88:	f240 70af 	movw	r0, #1967	; 0x7af
    1b8c:	f3af 8000 	nop.w
    1b90:	e69b      	b.n	18ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1b92:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    1b96:	2001      	movs	r0, #1
    1b98:	ea20 0101 	bic.w	r1, r0, r1
    1b9c:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    1ba0:	e7ac      	b.n	1afc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    1ba2:	4807      	ldr	r0, [pc, #28]	; (1bc0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1ba4:	2800      	cmp	r0, #0
    1ba6:	bf18      	it	ne
    1ba8:	f3af 8000 	nopne.w
    1bac:	b662      	cpsie	i
    1bae:	e7b2      	b.n	1b16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    1bb0:	e000ed04 	.word	0xe000ed04
    1bb4:	20000c2c 	.word	0x20000c2c
    1bb8:	00000000 	.word	0x00000000
    1bbc:	200008ac 	.word	0x200008ac
    1bc0:	00000000 	.word	0x00000000
    1bc4:	20000bac 	.word	0x20000bac
    1bc8:	003fffff 	.word	0x003fffff
    1bcc:	00000000 	.word	0x00000000
    1bd0:	20000010 	.word	0x20000010

00001bd4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1bd4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bd8:	48a5      	ldr	r0, [pc, #660]	; (1e70 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>)
    1bda:	b08c      	sub	sp, #48	; 0x30
    1bdc:	6800      	ldr	r0, [r0, #0]
    1bde:	05c0      	lsls	r0, r0, #23
    1be0:	0dc0      	lsrs	r0, r0, #23
    1be2:	d011      	beq.n	1c08 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1be4:	3810      	subs	r0, #16
    1be6:	b240      	sxtb	r0, r0
    1be8:	2800      	cmp	r0, #0
    1bea:	bfb8      	it	lt
    1bec:	f000 000f 	andlt.w	r0, r0, #15
    1bf0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1bf4:	bfac      	ite	ge
    1bf6:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1bfa:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1bfe:	0940      	lsrs	r0, r0, #5
    1c00:	bf08      	it	eq
    1c02:	f04f 0901 	moveq.w	r9, #1
    1c06:	d001      	beq.n	1c0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1c08:	f04f 0900 	mov.w	r9, #0
    1c0c:	980c      	ldr	r0, [sp, #48]	; 0x30
    1c0e:	7800      	ldrb	r0, [r0, #0]
    1c10:	2800      	cmp	r0, #0
    1c12:	f04f 0000 	mov.w	r0, #0
    1c16:	bf1c      	itt	ne
    1c18:	b00d      	addne	sp, #52	; 0x34
    1c1a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c1e:	f8df a254 	ldr.w	sl, [pc, #596]	; 1e74 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x128>
    1c22:	4d95      	ldr	r5, [pc, #596]	; (1e78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12c>)
    1c24:	4c95      	ldr	r4, [pc, #596]	; (1e7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>)
    1c26:	f04f 0b00 	mov.w	fp, #0
    1c2a:	900b      	str	r0, [sp, #44]	; 0x2c
    1c2c:	b125      	cbz	r5, 1c38 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1c2e:	2100      	movs	r1, #0
    1c30:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    1c34:	f3af 8000 	nop.w
    1c38:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1c3c:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1c40:	f04f 0800 	mov.w	r8, #0
    1c44:	b125      	cbz	r5, 1c50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    1c46:	2100      	movs	r1, #0
    1c48:	f240 605d 	movw	r0, #1629	; 0x65d
    1c4c:	f3af 8000 	nop.w
    1c50:	f1b9 0f00 	cmp.w	r9, #0
    1c54:	d11d      	bne.n	1c92 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1c56:	4637      	mov	r7, r6
    1c58:	2001      	movs	r0, #1
    1c5a:	ea20 0607 	bic.w	r6, r0, r7
    1c5e:	4888      	ldr	r0, [pc, #544]	; (1e80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x134>)
    1c60:	2240      	movs	r2, #64	; 0x40
    1c62:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1c66:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1c6a:	f00a fc4b 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1c6e:	b125      	cbz	r5, 1c7a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    1c70:	2100      	movs	r1, #0
    1c72:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1c76:	f3af 8000 	nop.w
    1c7a:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1c7e:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1c82:	6a09      	ldr	r1, [r1, #32]
    1c84:	6201      	str	r1, [r0, #32]
    1c86:	b125      	cbz	r5, 1c92 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1c88:	2100      	movs	r1, #0
    1c8a:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1c8e:	f3af 8000 	nop.w
    1c92:	b125      	cbz	r5, 1c9e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    1c94:	2100      	movs	r1, #0
    1c96:	f240 6065 	movw	r0, #1637	; 0x665
    1c9a:	f3af 8000 	nop.w
    1c9e:	f000 fe95 	bl	29cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1ca2:	4607      	mov	r7, r0
    1ca4:	4633      	mov	r3, r6
    1ca6:	466a      	mov	r2, sp
    1ca8:	990c      	ldr	r1, [sp, #48]	; 0x30
    1caa:	f7ff f887 	bl	dbc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5bc>
    1cae:	b125      	cbz	r5, 1cba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    1cb0:	2100      	movs	r1, #0
    1cb2:	f240 606b 	movw	r0, #1643	; 0x66b
    1cb6:	f3af 8000 	nop.w
    1cba:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1cbe:	2820      	cmp	r0, #32
    1cc0:	d014      	beq.n	1cec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1cc2:	6920      	ldr	r0, [r4, #16]
    1cc4:	9900      	ldr	r1, [sp, #0]
    1cc6:	1a09      	subs	r1, r1, r0
    1cc8:	0209      	lsls	r1, r1, #8
    1cca:	17ca      	asrs	r2, r1, #31
    1ccc:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1cd0:	1209      	asrs	r1, r1, #8
    1cd2:	d50b      	bpl.n	1cec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1cd4:	e9dd 2100 	ldrd	r2, r1, [sp]
    1cd8:	1a89      	subs	r1, r1, r2
    1cda:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1cde:	4408      	add	r0, r1
    1ce0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ce4:	e9cd 2000 	strd	r2, r0, [sp]
    1ce8:	f04f 0801 	mov.w	r8, #1
    1cec:	b14d      	cbz	r5, 1d02 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    1cee:	2100      	movs	r1, #0
    1cf0:	f240 6075 	movw	r0, #1653	; 0x675
    1cf4:	f3af 8000 	nop.w
    1cf8:	2100      	movs	r1, #0
    1cfa:	f240 607b 	movw	r0, #1659	; 0x67b
    1cfe:	f3af 8000 	nop.w
    1d02:	9800      	ldr	r0, [sp, #0]
    1d04:	9901      	ldr	r1, [sp, #4]
    1d06:	1bc0      	subs	r0, r0, r7
    1d08:	1bc9      	subs	r1, r1, r7
    1d0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d12:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1d16:	d205      	bcs.n	1d24 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1d18:	458a      	cmp	sl, r1
    1d1a:	d303      	bcc.n	1d24 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1d1c:	f1b9 0f00 	cmp.w	r9, #0
    1d20:	d10c      	bne.n	1d3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    1d22:	e003      	b.n	1d2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    1d24:	f1b9 0f00 	cmp.w	r9, #0
    1d28:	d038      	beq.n	1d9c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>
    1d2a:	e094      	b.n	1e56 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10a>
    1d2c:	4633      	mov	r3, r6
    1d2e:	463a      	mov	r2, r7
    1d30:	4669      	mov	r1, sp
    1d32:	4854      	ldr	r0, [pc, #336]	; (1e84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>)
    1d34:	f7fe fbb6 	bl	4a4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x30>
    1d38:	ea48 0800 	orr.w	r8, r8, r0
    1d3c:	f1b8 0f00 	cmp.w	r8, #0
    1d40:	d022      	beq.n	1d88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1d42:	9800      	ldr	r0, [sp, #0]
    1d44:	f00a fa70 	bl	c228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1d48:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1d4c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1d50:	4b4d      	ldr	r3, [pc, #308]	; (1e88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>)
    1d52:	4411      	add	r1, r2
    1d54:	1c49      	adds	r1, r1, #1
    1d56:	1842      	adds	r2, r0, r1
    1d58:	4298      	cmp	r0, r3
    1d5a:	d841      	bhi.n	1de0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    1d5c:	4849      	ldr	r0, [pc, #292]	; (1e84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>)
    1d5e:	4281      	cmp	r1, r0
    1d60:	dc5a      	bgt.n	1e18 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    1d62:	4240      	negs	r0, r0
    1d64:	4281      	cmp	r1, r0
    1d66:	db5f      	blt.n	1e28 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1d68:	1c58      	adds	r0, r3, #1
    1d6a:	4290      	cmp	r0, r2
    1d6c:	bfdc      	itt	le
    1d6e:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1d72:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1d76:	dd05      	ble.n	1d84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>
    1d78:	2a00      	cmp	r2, #0
    1d7a:	bfbc      	itt	lt
    1d7c:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1d80:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1d84:	980c      	ldr	r0, [sp, #48]	; 0x30
    1d86:	60c2      	str	r2, [r0, #12]
    1d88:	2001      	movs	r0, #1
    1d8a:	900b      	str	r0, [sp, #44]	; 0x2c
    1d8c:	2d00      	cmp	r5, #0
    1d8e:	d062      	beq.n	1e56 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10a>
    1d90:	2100      	movs	r1, #0
    1d92:	f240 608e 	movw	r0, #1678	; 0x68e
    1d96:	f3af 8000 	nop.w
    1d9a:	e05c      	b.n	1e56 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10a>
    1d9c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1da0:	aa08      	add	r2, sp, #32
    1da2:	a907      	add	r1, sp, #28
    1da4:	f000 fcbc 	bl	2720 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1da8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1dac:	2820      	cmp	r0, #32
    1dae:	d01c      	beq.n	1dea <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9e>
    1db0:	6920      	ldr	r0, [r4, #16]
    1db2:	1d40      	adds	r0, r0, #5
    1db4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1db8:	e9dd 2100 	ldrd	r2, r1, [sp]
    1dbc:	1a89      	subs	r1, r1, r2
    1dbe:	4401      	add	r1, r0
    1dc0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1dc4:	e9cd 0100 	strd	r0, r1, [sp]
    1dc8:	f00a fa2e 	bl	c228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1dcc:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1dd0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1dd4:	4b2c      	ldr	r3, [pc, #176]	; (1e88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>)
    1dd6:	4411      	add	r1, r2
    1dd8:	1c4a      	adds	r2, r1, #1
    1dda:	1881      	adds	r1, r0, r2
    1ddc:	4298      	cmp	r0, r3
    1dde:	d918      	bls.n	1e12 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc6>
    1de0:	f240 6109 	movw	r1, #1545	; 0x609
    1de4:	2070      	movs	r0, #112	; 0x70
    1de6:	f001 fca9 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1dea:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1dee:	f107 0609 	add.w	r6, r7, #9
    1df2:	b120      	cbz	r0, 1dfe <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb2>
    1df4:	f001 fc3e 	bl	3674 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1df8:	2800      	cmp	r0, #0
    1dfa:	bf08      	it	eq
    1dfc:	3632      	addeq	r6, #50	; 0x32
    1dfe:	4823      	ldr	r0, [pc, #140]	; (1e8c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>)
    1e00:	7841      	ldrb	r1, [r0, #1]
    1e02:	9807      	ldr	r0, [sp, #28]
    1e04:	4281      	cmp	r1, r0
    1e06:	bf84      	itt	hi
    1e08:	1a08      	subhi	r0, r1, r0
    1e0a:	4406      	addhi	r6, r0
    1e0c:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1e10:	e7d2      	b.n	1db8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6c>
    1e12:	481c      	ldr	r0, [pc, #112]	; (1e84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>)
    1e14:	4282      	cmp	r2, r0
    1e16:	dd04      	ble.n	1e22 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd6>
    1e18:	f240 610a 	movw	r1, #1546	; 0x60a
    1e1c:	2070      	movs	r0, #112	; 0x70
    1e1e:	f001 fc8d 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e22:	481b      	ldr	r0, [pc, #108]	; (1e90 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>)
    1e24:	4282      	cmp	r2, r0
    1e26:	da04      	bge.n	1e32 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe6>
    1e28:	f240 610b 	movw	r1, #1547	; 0x60b
    1e2c:	2070      	movs	r0, #112	; 0x70
    1e2e:	f001 fc85 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e32:	4818      	ldr	r0, [pc, #96]	; (1e94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>)
    1e34:	4288      	cmp	r0, r1
    1e36:	bfdc      	itt	le
    1e38:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    1e3c:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    1e40:	dd05      	ble.n	1e4e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x102>
    1e42:	2900      	cmp	r1, #0
    1e44:	bfbc      	itt	lt
    1e46:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    1e4a:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    1e4e:	980c      	ldr	r0, [sp, #48]	; 0x30
    1e50:	60c1      	str	r1, [r0, #12]
    1e52:	2001      	movs	r0, #1
    1e54:	900b      	str	r0, [sp, #44]	; 0x2c
    1e56:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1e5a:	f88d 0010 	strb.w	r0, [sp, #16]
    1e5e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    1e62:	2800      	cmp	r0, #0
    1e64:	f47f aee2 	bne.w	1c2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1e68:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1e6a:	b00d      	add	sp, #52	; 0x34
    1e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e70:	e000ed04 	.word	0xe000ed04
    1e74:	003fffff 	.word	0x003fffff
    1e78:	00000000 	.word	0x00000000
    1e7c:	20000c2c 	.word	0x20000c2c
    1e80:	20000bac 	.word	0x20000bac
    1e84:	07a12000 	.word	0x07a12000
    1e88:	1e847fff 	.word	0x1e847fff
    1e8c:	20000012 	.word	0x20000012
    1e90:	f85ee000 	.word	0xf85ee000
    1e94:	1e848000 	.word	0x1e848000

00001e98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1e98:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e9c:	4d88      	ldr	r5, [pc, #544]	; (20c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    1e9e:	b08c      	sub	sp, #48	; 0x30
    1ea0:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1ea4:	2000      	movs	r0, #0
    1ea6:	9009      	str	r0, [sp, #36]	; 0x24
    1ea8:	2001      	movs	r0, #1
    1eaa:	4c86      	ldr	r4, [pc, #536]	; (20c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    1eac:	f04f 0900 	mov.w	r9, #0
    1eb0:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1eb4:	4680      	mov	r8, r0
    1eb6:	9008      	str	r0, [sp, #32]
    1eb8:	b124      	cbz	r4, 1ec4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1eba:	2100      	movs	r1, #0
    1ebc:	f240 70e9 	movw	r0, #2025	; 0x7e9
    1ec0:	f3af 8000 	nop.w
    1ec4:	9808      	ldr	r0, [sp, #32]
    1ec6:	2800      	cmp	r0, #0
    1ec8:	d037      	beq.n	1f3a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    1eca:	bf00      	nop
    1ecc:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1ed0:	b124      	cbz	r4, 1edc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    1ed2:	2100      	movs	r1, #0
    1ed4:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1ed8:	f3af 8000 	nop.w
    1edc:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    1ee0:	2240      	movs	r2, #64	; 0x40
    1ee2:	ea28 060a 	bic.w	r6, r8, sl
    1ee6:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1eea:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    1eee:	4683      	mov	fp, r0
    1ef0:	f00a fb08 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1ef4:	b124      	cbz	r4, 1f00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    1ef6:	2100      	movs	r1, #0
    1ef8:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1efc:	f3af 8000 	nop.w
    1f00:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1f04:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    1f08:	9000      	str	r0, [sp, #0]
    1f0a:	6a09      	ldr	r1, [r1, #32]
    1f0c:	6201      	str	r1, [r0, #32]
    1f0e:	b124      	cbz	r4, 1f1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    1f10:	2100      	movs	r1, #0
    1f12:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1f16:	f3af 8000 	nop.w
    1f1a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1f1e:	f88d 0008 	strb.w	r0, [sp, #8]
    1f22:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1f26:	b178      	cbz	r0, 1f48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    1f28:	2c00      	cmp	r4, #0
    1f2a:	bf1c      	itt	ne
    1f2c:	2100      	movne	r1, #0
    1f2e:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    1f32:	d0c1      	beq.n	1eb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f34:	f3af 8000 	nop.w
    1f38:	e7be      	b.n	1eb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f3a:	4863      	ldr	r0, [pc, #396]	; (20c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    1f3c:	2800      	cmp	r0, #0
    1f3e:	bf18      	it	ne
    1f40:	f3af 8000 	nopne.w
    1f44:	b662      	cpsie	i
    1f46:	e7c1      	b.n	1ecc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    1f48:	b124      	cbz	r4, 1f54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    1f4a:	2100      	movs	r1, #0
    1f4c:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    1f50:	f3af 8000 	nop.w
    1f54:	980c      	ldr	r0, [sp, #48]	; 0x30
    1f56:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    1f5a:	2803      	cmp	r0, #3
    1f5c:	d172      	bne.n	2044 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    1f5e:	f8dd a000 	ldr.w	sl, [sp]
    1f62:	f8cd a018 	str.w	sl, [sp, #24]
    1f66:	990c      	ldr	r1, [sp, #48]	; 0x30
    1f68:	f89a 0020 	ldrb.w	r0, [sl, #32]
    1f6c:	4288      	cmp	r0, r1
    1f6e:	bf14      	ite	ne
    1f70:	f04f 0b00 	movne.w	fp, #0
    1f74:	f04f 0b01 	moveq.w	fp, #1
    1f78:	f10a 0c20 	add.w	ip, sl, #32
    1f7c:	4686      	mov	lr, r0
    1f7e:	2220      	movs	r2, #32
    1f80:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1f84:	e003      	b.n	1f8e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1f86:	4602      	mov	r2, r0
    1f88:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1f8c:	7840      	ldrb	r0, [r0, #1]
    1f8e:	4288      	cmp	r0, r1
    1f90:	d002      	beq.n	1f98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    1f92:	2820      	cmp	r0, #32
    1f94:	d00a      	beq.n	1fac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    1f96:	e7f6      	b.n	1f86 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    1f98:	2820      	cmp	r0, #32
    1f9a:	d007      	beq.n	1fac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    1f9c:	4586      	cmp	lr, r0
    1f9e:	d107      	bne.n	1fb0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    1fa0:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1fa4:	7840      	ldrb	r0, [r0, #1]
    1fa6:	f88c 0000 	strb.w	r0, [ip]
    1faa:	e007      	b.n	1fbc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    1fac:	4648      	mov	r0, r9
    1fae:	e00c      	b.n	1fca <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    1fb0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1fb4:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    1fb8:	7840      	ldrb	r0, [r0, #1]
    1fba:	7048      	strb	r0, [r1, #1]
    1fbc:	b124      	cbz	r4, 1fc8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    1fbe:	2100      	movs	r1, #0
    1fc0:	f240 5037 	movw	r0, #1335	; 0x537
    1fc4:	f3af 8000 	nop.w
    1fc8:	4640      	mov	r0, r8
    1fca:	ea10 0f0b 	tst.w	r0, fp
    1fce:	bf18      	it	ne
    1fd0:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    1fd4:	2800      	cmp	r0, #0
    1fd6:	d052      	beq.n	207e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    1fd8:	b124      	cbz	r4, 1fe4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    1fda:	2100      	movs	r1, #0
    1fdc:	f240 70fd 	movw	r0, #2045	; 0x7fd
    1fe0:	f3af 8000 	nop.w
    1fe4:	4632      	mov	r2, r6
    1fe6:	2001      	movs	r0, #1
    1fe8:	990c      	ldr	r1, [sp, #48]	; 0x30
    1fea:	f7ff f88d 	bl	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    1fee:	9806      	ldr	r0, [sp, #24]
    1ff0:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1ff4:	f88d 0008 	strb.w	r0, [sp, #8]
    1ff8:	f89d a008 	ldrb.w	sl, [sp, #8]
    1ffc:	b124      	cbz	r4, 2008 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    1ffe:	2100      	movs	r1, #0
    2000:	f640 0008 	movw	r0, #2056	; 0x808
    2004:	f3af 8000 	nop.w
    2008:	4830      	ldr	r0, [pc, #192]	; (20cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    200a:	2800      	cmp	r0, #0
    200c:	bf18      	it	ne
    200e:	f3af 8000 	nopne.w
    2012:	f3ef 8010 	mrs	r0, PRIMASK
    2016:	b672      	cpsid	i
    2018:	9008      	str	r0, [sp, #32]
    201a:	b124      	cbz	r4, 2026 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    201c:	2100      	movs	r1, #0
    201e:	f640 000d 	movw	r0, #2061	; 0x80d
    2022:	f3af 8000 	nop.w
    2026:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    202a:	f88d 0008 	strb.w	r0, [sp, #8]
    202e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2032:	b140      	cbz	r0, 2046 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2034:	2c00      	cmp	r4, #0
    2036:	bf1c      	itt	ne
    2038:	2100      	movne	r1, #0
    203a:	f640 0011 	movwne	r0, #2065	; 0x811
    203e:	f43f af3b 	beq.w	1eb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2042:	e777      	b.n	1f34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    2044:	e01b      	b.n	207e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2046:	f1ba 0f00 	cmp.w	sl, #0
    204a:	d008      	beq.n	205e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    204c:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2050:	2820      	cmp	r0, #32
    2052:	d104      	bne.n	205e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2054:	4631      	mov	r1, r6
    2056:	2002      	movs	r0, #2
    2058:	f7ff f886 	bl	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
    205c:	b308      	cbz	r0, 20a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    205e:	b124      	cbz	r4, 206a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2060:	2100      	movs	r1, #0
    2062:	f640 0025 	movw	r0, #2085	; 0x825
    2066:	f3af 8000 	nop.w
    206a:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    206e:	ea28 0000 	bic.w	r0, r8, r0
    2072:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    2076:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    207a:	2001      	movs	r0, #1
    207c:	9009      	str	r0, [sp, #36]	; 0x24
    207e:	b124      	cbz	r4, 208a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2080:	2100      	movs	r1, #0
    2082:	f640 002e 	movw	r0, #2094	; 0x82e
    2086:	f3af 8000 	nop.w
    208a:	9808      	ldr	r0, [sp, #32]
    208c:	b188      	cbz	r0, 20b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    208e:	b124      	cbz	r4, 209a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    2090:	2100      	movs	r1, #0
    2092:	f640 0032 	movw	r0, #2098	; 0x832
    2096:	f3af 8000 	nop.w
    209a:	9809      	ldr	r0, [sp, #36]	; 0x24
    209c:	b00d      	add	sp, #52	; 0x34
    209e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20a2:	2c00      	cmp	r4, #0
    20a4:	d0f1      	beq.n	208a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    20a6:	2100      	movs	r1, #0
    20a8:	f44f 6002 	mov.w	r0, #2080	; 0x820
    20ac:	f3af 8000 	nop.w
    20b0:	e7e6      	b.n	2080 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    20b2:	4805      	ldr	r0, [pc, #20]	; (20c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    20b4:	2800      	cmp	r0, #0
    20b6:	bf18      	it	ne
    20b8:	f3af 8000 	nopne.w
    20bc:	b662      	cpsie	i
    20be:	e7e6      	b.n	208e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    20c0:	20000c2c 	.word	0x20000c2c
	...

000020d0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    20d0:	b510      	push	{r4, lr}
    20d2:	2820      	cmp	r0, #32
    20d4:	d211      	bcs.n	20fa <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    20d6:	490e      	ldr	r1, [pc, #56]	; (2110 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    20d8:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    20dc:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    20e0:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    20e4:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    20e8:	b13b      	cbz	r3, 20fa <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    20ea:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    20ee:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    20f2:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    20f6:	2a01      	cmp	r2, #1
    20f8:	d001      	beq.n	20fe <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    20fa:	2000      	movs	r0, #0
    20fc:	bd10      	pop	{r4, pc}
    20fe:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    2102:	4601      	mov	r1, r0
    2104:	2000      	movs	r0, #0
    2106:	f7fe ffff 	bl	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    210a:	2001      	movs	r0, #1
    210c:	bd10      	pop	{r4, pc}
    210e:	0000      	.short	0x0000
    2110:	20000c2c 	.word	0x20000c2c

00002114 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2118:	4e80      	ldr	r6, [pc, #512]	; (231c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    211a:	4680      	mov	r8, r0
    211c:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2120:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2124:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2128:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    212c:	2800      	cmp	r0, #0
    212e:	d068      	beq.n	2202 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    2130:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2134:	4d7a      	ldr	r5, [pc, #488]	; (2320 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    2136:	b125      	cbz	r5, 2142 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2138:	2100      	movs	r1, #0
    213a:	f640 30c1 	movw	r0, #3009	; 0xbc1
    213e:	f3af 8000 	nop.w
    2142:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2146:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    214a:	2801      	cmp	r0, #1
    214c:	d018      	beq.n	2180 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    214e:	b2c0      	uxtb	r0, r0
    2150:	2804      	cmp	r0, #4
    2152:	bf1c      	itt	ne
    2154:	2805      	cmpne	r0, #5
    2156:	2806      	cmpne	r0, #6
    2158:	d058      	beq.n	220c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    215a:	b12d      	cbz	r5, 2168 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    215c:	f04f 0100 	mov.w	r1, #0
    2160:	f640 30cd 	movw	r0, #3021	; 0xbcd
    2164:	f3af 8000 	nop.w
    2168:	f001 fc0e 	bl	3988 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    216c:	b125      	cbz	r5, 2178 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    216e:	2100      	movs	r1, #0
    2170:	f640 30d1 	movw	r0, #3025	; 0xbd1
    2174:	f3af 8000 	nop.w
    2178:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    217c:	2801      	cmp	r0, #1
    217e:	d1e6      	bne.n	214e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2180:	2401      	movs	r4, #1
    2182:	b125      	cbz	r5, 218e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2184:	2100      	movs	r1, #0
    2186:	f640 30d8 	movw	r0, #3032	; 0xbd8
    218a:	f3af 8000 	nop.w
    218e:	2c00      	cmp	r4, #0
    2190:	d042      	beq.n	2218 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    2192:	2000      	movs	r0, #0
    2194:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2198:	b125      	cbz	r5, 21a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    219a:	2100      	movs	r1, #0
    219c:	f640 30dd 	movw	r0, #3037	; 0xbdd
    21a0:	f3af 8000 	nop.w
    21a4:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    21a8:	2001      	movs	r0, #1
    21aa:	ea20 090b 	bic.w	r9, r0, fp
    21ae:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    21b2:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    21b6:	2240      	movs	r2, #64	; 0x40
    21b8:	f00a f9a4 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    21bc:	b125      	cbz	r5, 21c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    21be:	2100      	movs	r1, #0
    21c0:	f240 50cd 	movw	r0, #1485	; 0x5cd
    21c4:	f3af 8000 	nop.w
    21c8:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    21cc:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    21d0:	6a00      	ldr	r0, [r0, #32]
    21d2:	f8ca 0020 	str.w	r0, [sl, #32]
    21d6:	b125      	cbz	r5, 21e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    21d8:	2100      	movs	r1, #0
    21da:	f240 50d1 	movw	r0, #1489	; 0x5d1
    21de:	f3af 8000 	nop.w
    21e2:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    21e6:	f88d 0000 	strb.w	r0, [sp]
    21ea:	f89d 0000 	ldrb.w	r0, [sp]
    21ee:	b1d0      	cbz	r0, 2226 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    21f0:	2d00      	cmp	r5, #0
    21f2:	bf1c      	itt	ne
    21f4:	2100      	movne	r1, #0
    21f6:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    21fa:	d0c2      	beq.n	2182 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    21fc:	f3af 8000 	nop.w
    2200:	e7bf      	b.n	2182 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2202:	f640 31b8 	movw	r1, #3000	; 0xbb8
    2206:	2070      	movs	r0, #112	; 0x70
    2208:	f001 fa98 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    220c:	464a      	mov	r2, r9
    220e:	4641      	mov	r1, r8
    2210:	2001      	movs	r0, #1
    2212:	f7fe ff79 	bl	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    2216:	e7a9      	b.n	216c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2218:	4842      	ldr	r0, [pc, #264]	; (2324 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    221a:	2800      	cmp	r0, #0
    221c:	bf18      	it	ne
    221e:	f3af 8000 	nopne.w
    2222:	b662      	cpsie	i
    2224:	e7b5      	b.n	2192 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    2226:	b125      	cbz	r5, 2232 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    2228:	2100      	movs	r1, #0
    222a:	f640 30e7 	movw	r0, #3047	; 0xbe7
    222e:	f3af 8000 	nop.w
    2232:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    2236:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    223a:	4614      	mov	r4, r2
    223c:	f04f 0b20 	mov.w	fp, #32
    2240:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2244:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2248:	e003      	b.n	2252 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    224a:	46a3      	mov	fp, r4
    224c:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    2250:	785c      	ldrb	r4, [r3, #1]
    2252:	4544      	cmp	r4, r8
    2254:	d002      	beq.n	225c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    2256:	2c20      	cmp	r4, #32
    2258:	d02b      	beq.n	22b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    225a:	e7f6      	b.n	224a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    225c:	2c20      	cmp	r4, #32
    225e:	d028      	beq.n	22b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2260:	42a2      	cmp	r2, r4
    2262:	d104      	bne.n	226e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    2264:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    2268:	7840      	ldrb	r0, [r0, #1]
    226a:	7008      	strb	r0, [r1, #0]
    226c:	e005      	b.n	227a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    226e:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    2272:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    2276:	7849      	ldrb	r1, [r1, #1]
    2278:	7041      	strb	r1, [r0, #1]
    227a:	f1ba 0f00 	cmp.w	sl, #0
    227e:	d011      	beq.n	22a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2280:	b125      	cbz	r5, 228c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    2282:	2100      	movs	r1, #0
    2284:	f240 502f 	movw	r0, #1327	; 0x52f
    2288:	f3af 8000 	nop.w
    228c:	f89a 0000 	ldrb.w	r0, [sl]
    2290:	42a0      	cmp	r0, r4
    2292:	d107      	bne.n	22a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2294:	b125      	cbz	r5, 22a0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    2296:	2100      	movs	r1, #0
    2298:	f240 5032 	movw	r0, #1330	; 0x532
    229c:	f3af 8000 	nop.w
    22a0:	f88a b000 	strb.w	fp, [sl]
    22a4:	b15d      	cbz	r5, 22be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    22a6:	2100      	movs	r1, #0
    22a8:	f240 5037 	movw	r0, #1335	; 0x537
    22ac:	f3af 8000 	nop.w
    22b0:	e000      	b.n	22b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    22b2:	b125      	cbz	r5, 22be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    22b4:	2100      	movs	r1, #0
    22b6:	f640 30eb 	movw	r0, #3051	; 0xbeb
    22ba:	f3af 8000 	nop.w
    22be:	481a      	ldr	r0, [pc, #104]	; (2328 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    22c0:	2800      	cmp	r0, #0
    22c2:	bf18      	it	ne
    22c4:	f3af 8000 	nopne.w
    22c8:	f3ef 8410 	mrs	r4, PRIMASK
    22cc:	b672      	cpsid	i
    22ce:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    22d2:	f88d 0000 	strb.w	r0, [sp]
    22d6:	f89d 0000 	ldrb.w	r0, [sp]
    22da:	b138      	cbz	r0, 22ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    22dc:	2d00      	cmp	r5, #0
    22de:	bf1c      	itt	ne
    22e0:	2100      	movne	r1, #0
    22e2:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    22e6:	f43f af4c 	beq.w	2182 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    22ea:	e787      	b.n	21fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    22ec:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    22f0:	2001      	movs	r0, #1
    22f2:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    22f6:	b154      	cbz	r4, 230e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    22f8:	2d00      	cmp	r5, #0
    22fa:	bf08      	it	eq
    22fc:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2300:	2100      	movs	r1, #0
    2302:	f640 30fe 	movw	r0, #3070	; 0xbfe
    2306:	f3af 8000 	nop.w
    230a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    230e:	4805      	ldr	r0, [pc, #20]	; (2324 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2310:	2800      	cmp	r0, #0
    2312:	bf18      	it	ne
    2314:	f3af 8000 	nopne.w
    2318:	b662      	cpsie	i
    231a:	e7ed      	b.n	22f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    231c:	20000c2c 	.word	0x20000c2c
	...

0000232c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    232c:	b570      	push	{r4, r5, r6, lr}
    232e:	460d      	mov	r5, r1
    2330:	4606      	mov	r6, r0
    2332:	f001 f98d 	bl	3650 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2336:	480f      	ldr	r0, [pc, #60]	; (2374 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2338:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    233c:	2400      	movs	r4, #0
    233e:	3880      	subs	r0, #128	; 0x80
    2340:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2344:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2348:	b129      	cbz	r1, 2356 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    234a:	1c61      	adds	r1, r4, #1
    234c:	b2cc      	uxtb	r4, r1
    234e:	2c20      	cmp	r4, #32
    2350:	d3f8      	bcc.n	2344 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2352:	2020      	movs	r0, #32
    2354:	bd70      	pop	{r4, r5, r6, pc}
    2356:	4808      	ldr	r0, [pc, #32]	; (2378 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2358:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    235c:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2360:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    2364:	4621      	mov	r1, r4
    2366:	6045      	str	r5, [r0, #4]
    2368:	2001      	movs	r0, #1
    236a:	f7fe fecd 	bl	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    236e:	4620      	mov	r0, r4
    2370:	bd70      	pop	{r4, r5, r6, pc}
    2372:	0000      	.short	0x0000
    2374:	20000c2c 	.word	0x20000c2c
    2378:	200008ac 	.word	0x200008ac

0000237c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    237c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2380:	b083      	sub	sp, #12
    2382:	f000 fb23 	bl	29cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2386:	4605      	mov	r5, r0
    2388:	f000 fdd6 	bl	2f38 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    238c:	4c67      	ldr	r4, [pc, #412]	; (252c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    238e:	68a0      	ldr	r0, [r4, #8]
    2390:	f1b0 3fff 	cmp.w	r0, #4294967295
    2394:	bf1c      	itt	ne
    2396:	f04f 30ff 	movne.w	r0, #4294967295
    239a:	60a0      	strne	r0, [r4, #8]
    239c:	7fa0      	ldrb	r0, [r4, #30]
    239e:	f8df b190 	ldr.w	fp, [pc, #400]	; 2530 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    23a2:	b9a8      	cbnz	r0, 23d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    23a4:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    23a8:	1a08      	subs	r0, r1, r0
    23aa:	0200      	lsls	r0, r0, #8
    23ac:	17c1      	asrs	r1, r0, #31
    23ae:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23b2:	1200      	asrs	r0, r0, #8
    23b4:	f44f 710c 	mov.w	r1, #560	; 0x230
    23b8:	f009 ff63 	bl	c282 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    23bc:	6921      	ldr	r1, [r4, #16]
    23be:	4408      	add	r0, r1
    23c0:	1a28      	subs	r0, r5, r0
    23c2:	0200      	lsls	r0, r0, #8
    23c4:	17c1      	asrs	r1, r0, #31
    23c6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23ca:	1200      	asrs	r0, r0, #8
    23cc:	0fc0      	lsrs	r0, r0, #31
    23ce:	d013      	beq.n	23f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    23d0:	7e60      	ldrb	r0, [r4, #25]
    23d2:	b328      	cbz	r0, 2420 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    23d4:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    23d8:	f88d 0000 	strb.w	r0, [sp]
    23dc:	f89d 0000 	ldrb.w	r0, [sp]
    23e0:	b1f0      	cbz	r0, 2420 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    23e2:	f000 fbff 	bl	2be4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    23e6:	bf00      	nop
    23e8:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    23ec:	b1f0      	cbz	r0, 242c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    23ee:	f240 4147 	movw	r1, #1095	; 0x447
    23f2:	2070      	movs	r0, #112	; 0x70
    23f4:	f001 f9a2 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23f8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    23fc:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2400:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2404:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2408:	6840      	ldr	r0, [r0, #4]
    240a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    240e:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    2412:	2108      	movs	r1, #8
    2414:	4790      	blx	r2
    2416:	f44f 6186 	mov.w	r1, #1072	; 0x430
    241a:	2070      	movs	r0, #112	; 0x70
    241c:	f001 f98e 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2420:	1ce8      	adds	r0, r5, #3
    2422:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2426:	f000 fad7 	bl	29d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    242a:	e7dd      	b.n	23e8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    242c:	f04f 0a01 	mov.w	sl, #1
    2430:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    2434:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2438:	2820      	cmp	r0, #32
    243a:	d024      	beq.n	2486 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    243c:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2440:	2020      	movs	r0, #32
    2442:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    2446:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    244a:	2600      	movs	r6, #0
    244c:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2450:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2454:	4837      	ldr	r0, [pc, #220]	; (2534 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    2456:	6026      	str	r6, [r4, #0]
    2458:	7800      	ldrb	r0, [r0, #0]
    245a:	2802      	cmp	r0, #2
    245c:	bf16      	itet	ne
    245e:	2803      	cmpne	r0, #3
    2460:	2001      	moveq	r0, #1
    2462:	2000      	movne	r0, #0
    2464:	7720      	strb	r0, [r4, #28]
    2466:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    246a:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    246e:	f899 0020 	ldrb.w	r0, [r9, #32]
    2472:	2820      	cmp	r0, #32
    2474:	d031      	beq.n	24da <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2476:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    247a:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    247e:	7d81      	ldrb	r1, [r0, #22]
    2480:	2901      	cmp	r1, #1
    2482:	d005      	beq.n	2490 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    2484:	e029      	b.n	24da <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2486:	f240 414a 	movw	r1, #1098	; 0x44a
    248a:	2070      	movs	r0, #112	; 0x70
    248c:	f001 f956 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2490:	46ab      	mov	fp, r5
    2492:	f100 0508 	add.w	r5, r0, #8
    2496:	8a40      	ldrh	r0, [r0, #18]
    2498:	aa01      	add	r2, sp, #4
    249a:	4669      	mov	r1, sp
    249c:	f000 f940 	bl	2720 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    24a0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24a4:	2820      	cmp	r0, #32
    24a6:	d004      	beq.n	24b2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    24a8:	6920      	ldr	r0, [r4, #16]
    24aa:	1d40      	adds	r0, r0, #5
    24ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24b0:	e00b      	b.n	24ca <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    24b2:	8968      	ldrh	r0, [r5, #10]
    24b4:	f10b 0b09 	add.w	fp, fp, #9
    24b8:	b128      	cbz	r0, 24c6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    24ba:	f001 f8db 	bl	3674 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    24be:	2800      	cmp	r0, #0
    24c0:	bf08      	it	eq
    24c2:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    24c6:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    24ca:	e9d5 2100 	ldrd	r2, r1, [r5]
    24ce:	1a89      	subs	r1, r1, r2
    24d0:	6028      	str	r0, [r5, #0]
    24d2:	4408      	add	r0, r1
    24d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24d8:	6068      	str	r0, [r5, #4]
    24da:	4639      	mov	r1, r7
    24dc:	2001      	movs	r0, #1
    24de:	f7fe fe43 	bl	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
    24e2:	2800      	cmp	r0, #0
    24e4:	d0f9      	beq.n	24da <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    24e6:	4814      	ldr	r0, [pc, #80]	; (2538 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    24e8:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    24ec:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    24f0:	2802      	cmp	r0, #2
    24f2:	d104      	bne.n	24fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    24f4:	463a      	mov	r2, r7
    24f6:	4641      	mov	r1, r8
    24f8:	2006      	movs	r0, #6
    24fa:	f7fe fe05 	bl	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    24fe:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    2502:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    2506:	2820      	cmp	r0, #32
    2508:	d003      	beq.n	2512 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    250a:	480c      	ldr	r0, [pc, #48]	; (253c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    250c:	7840      	ldrb	r0, [r0, #1]
    250e:	f001 f9e5 	bl	38dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2512:	7f20      	ldrb	r0, [r4, #28]
    2514:	2800      	cmp	r0, #0
    2516:	bf04      	itt	eq
    2518:	b003      	addeq	sp, #12
    251a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    251e:	f000 fd55 	bl	2fcc <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2522:	7726      	strb	r6, [r4, #28]
    2524:	7766      	strb	r6, [r4, #29]
    2526:	b003      	add	sp, #12
    2528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    252c:	20000c2c 	.word	0x20000c2c
    2530:	200008ac 	.word	0x200008ac
    2534:	20000012 	.word	0x20000012
    2538:	20000bac 	.word	0x20000bac
    253c:	20000010 	.word	0x20000010

00002540 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2540:	b510      	push	{r4, lr}
    2542:	4c32      	ldr	r4, [pc, #200]	; (260c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    2544:	b082      	sub	sp, #8
    2546:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    254a:	2920      	cmp	r1, #32
    254c:	d008      	beq.n	2560 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    254e:	68a1      	ldr	r1, [r4, #8]
    2550:	f1b1 3fff 	cmp.w	r1, #4294967295
    2554:	d009      	beq.n	256a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    2556:	f640 21e9 	movw	r1, #2793	; 0xae9
    255a:	2070      	movs	r0, #112	; 0x70
    255c:	f001 f8ee 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2560:	f640 21e8 	movw	r1, #2792	; 0xae8
    2564:	2070      	movs	r0, #112	; 0x70
    2566:	f001 f8e9 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    256a:	6862      	ldr	r2, [r4, #4]
    256c:	4601      	mov	r1, r0
    256e:	4b28      	ldr	r3, [pc, #160]	; (2610 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2570:	1850      	adds	r0, r2, r1
    2572:	429a      	cmp	r2, r3
    2574:	d904      	bls.n	2580 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    2576:	f240 6109 	movw	r1, #1545	; 0x609
    257a:	2070      	movs	r0, #112	; 0x70
    257c:	f001 f8de 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2580:	4a24      	ldr	r2, [pc, #144]	; (2614 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2582:	4291      	cmp	r1, r2
    2584:	dd04      	ble.n	2590 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    2586:	f240 610a 	movw	r1, #1546	; 0x60a
    258a:	2070      	movs	r0, #112	; 0x70
    258c:	f001 f8d6 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2590:	4a21      	ldr	r2, [pc, #132]	; (2618 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2592:	4291      	cmp	r1, r2
    2594:	da04      	bge.n	25a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    2596:	f240 610b 	movw	r1, #1547	; 0x60b
    259a:	2070      	movs	r0, #112	; 0x70
    259c:	f001 f8ce 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25a0:	491e      	ldr	r1, [pc, #120]	; (261c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    25a2:	4281      	cmp	r1, r0
    25a4:	bfdc      	itt	le
    25a6:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    25aa:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    25ae:	dd05      	ble.n	25bc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    25b0:	2800      	cmp	r0, #0
    25b2:	bfbc      	itt	lt
    25b4:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    25b8:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    25bc:	aa01      	add	r2, sp, #4
    25be:	4669      	mov	r1, sp
    25c0:	f000 f8ae 	bl	2720 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    25c4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    25c8:	280f      	cmp	r0, #15
    25ca:	bf8c      	ite	hi
    25cc:	2001      	movhi	r0, #1
    25ce:	2000      	movls	r0, #0
    25d0:	9900      	ldr	r1, [sp, #0]
    25d2:	4408      	add	r0, r1
    25d4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    25d8:	60a1      	str	r1, [r4, #8]
    25da:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    25de:	f88d 0000 	strb.w	r0, [sp]
    25e2:	f89d 0000 	ldrb.w	r0, [sp]
    25e6:	2800      	cmp	r0, #0
    25e8:	bf04      	itt	eq
    25ea:	b002      	addeq	sp, #8
    25ec:	bd10      	popeq	{r4, pc}
    25ee:	2301      	movs	r3, #1
    25f0:	2203      	movs	r2, #3
    25f2:	2005      	movs	r0, #5
    25f4:	f000 fb70 	bl	2cd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    25f8:	2800      	cmp	r0, #0
    25fa:	bf1c      	itt	ne
    25fc:	b002      	addne	sp, #8
    25fe:	bd10      	popne	{r4, pc}
    2600:	f640 21f1 	movw	r1, #2801	; 0xaf1
    2604:	2070      	movs	r0, #112	; 0x70
    2606:	f001 f899 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    260a:	0000      	.short	0x0000
    260c:	20000c2c 	.word	0x20000c2c
    2610:	1e847fff 	.word	0x1e847fff
    2614:	07a12000 	.word	0x07a12000
    2618:	f85ee000 	.word	0xf85ee000
    261c:	1e848000 	.word	0x1e848000

00002620 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2620:	b570      	push	{r4, r5, r6, lr}
    2622:	4c1e      	ldr	r4, [pc, #120]	; (269c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2624:	2120      	movs	r1, #32
    2626:	f884 1020 	strb.w	r1, [r4, #32]
    262a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    262e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2632:	2000      	movs	r0, #0
    2634:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2638:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    263c:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2640:	1e42      	subs	r2, r0, #1
    2642:	60a2      	str	r2, [r4, #8]
    2644:	6020      	str	r0, [r4, #0]
    2646:	77a0      	strb	r0, [r4, #30]
    2648:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    264c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2650:	7720      	strb	r0, [r4, #28]
    2652:	7760      	strb	r0, [r4, #29]
    2654:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2658:	4911      	ldr	r1, [pc, #68]	; (26a0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    265a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    265e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2662:	7008      	strb	r0, [r1, #0]
    2664:	7048      	strb	r0, [r1, #1]
    2666:	8048      	strh	r0, [r1, #2]
    2668:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    266c:	2210      	movs	r2, #16
    266e:	7088      	strb	r0, [r1, #2]
    2670:	f801 0f04 	strb.w	r0, [r1, #4]!
    2674:	1e52      	subs	r2, r2, #1
    2676:	d1fa      	bne.n	266e <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2678:	4d0a      	ldr	r5, [pc, #40]	; (26a4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    267a:	2601      	movs	r6, #1
    267c:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2680:	20ff      	movs	r0, #255	; 0xff
    2682:	7028      	strb	r0, [r5, #0]
    2684:	4808      	ldr	r0, [pc, #32]	; (26a8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    2686:	f001 f90b 	bl	38a0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    268a:	7068      	strb	r0, [r5, #1]
    268c:	f001 f966 	bl	395c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2690:	60a8      	str	r0, [r5, #8]
    2692:	f000 fcc9 	bl	3028 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2696:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    269a:	bd70      	pop	{r4, r5, r6, pc}
    269c:	20000c2c 	.word	0x20000c2c
    26a0:	20000012 	.word	0x20000012
    26a4:	20000010 	.word	0x20000010
    26a8:	00000fc5 	.word	0x00000fc5

000026ac <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    26ac:	b570      	push	{r4, r5, r6, lr}
    26ae:	4605      	mov	r5, r0
    26b0:	2001      	movs	r0, #1
    26b2:	fa00 f405 	lsl.w	r4, r0, r5
    26b6:	460e      	mov	r6, r1
    26b8:	2a00      	cmp	r2, #0
    26ba:	bf08      	it	eq
    26bc:	4808      	ldreq	r0, [pc, #32]	; (26e0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    26be:	d00c      	beq.n	26da <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    26c0:	2000      	movs	r0, #0
    26c2:	f000 fc97 	bl	2ff4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    26c6:	00e9      	lsls	r1, r5, #3
    26c8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    26cc:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    26d0:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    26d4:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    26d8:	4802      	ldr	r0, [pc, #8]	; (26e4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    26da:	6004      	str	r4, [r0, #0]
    26dc:	bd70      	pop	{r4, r5, r6, pc}
    26de:	0000      	.short	0x0000
    26e0:	4001f508 	.word	0x4001f508
    26e4:	4001f504 	.word	0x4001f504

000026e8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    26e8:	0b41      	lsrs	r1, r0, #13
    26ea:	f248 6237 	movw	r2, #34359	; 0x8637
    26ee:	4351      	muls	r1, r2
    26f0:	0c0a      	lsrs	r2, r1, #16
    26f2:	4b09      	ldr	r3, [pc, #36]	; (2718 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    26f4:	0251      	lsls	r1, r2, #9
    26f6:	fb02 0203 	mla	r2, r2, r3, r0
    26fa:	4808      	ldr	r0, [pc, #32]	; (271c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    26fc:	4350      	muls	r0, r2
    26fe:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    2702:	306e      	adds	r0, #110	; 0x6e
    2704:	0d40      	lsrs	r0, r0, #21
    2706:	425b      	negs	r3, r3
    2708:	fb10 f303 	smulbb	r3, r0, r3
    270c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2710:	bf88      	it	hi
    2712:	1c49      	addhi	r1, r1, #1
    2714:	4408      	add	r0, r1
    2716:	4770      	bx	lr
    2718:	ffffc2f7 	.word	0xffffc2f7
    271c:	00010c6f 	.word	0x00010c6f

00002720 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2720:	0b43      	lsrs	r3, r0, #13
    2722:	f248 6c37 	movw	ip, #34359	; 0x8637
    2726:	fb03 f30c 	mul.w	r3, r3, ip
    272a:	b430      	push	{r4, r5}
    272c:	0c1b      	lsrs	r3, r3, #16
    272e:	f8df c044 	ldr.w	ip, [pc, #68]	; 2774 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    2732:	025c      	lsls	r4, r3, #9
    2734:	fb03 030c 	mla	r3, r3, ip, r0
    2738:	480f      	ldr	r0, [pc, #60]	; (2778 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    273a:	4358      	muls	r0, r3
    273c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2740:	eb04 000c 	add.w	r0, r4, ip
    2744:	f643 5409 	movw	r4, #15625	; 0x3d09
    2748:	fb1c f404 	smulbb	r4, ip, r4
    274c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2750:	f643 5508 	movw	r5, #15624	; 0x3d08
    2754:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2758:	442c      	add	r4, r5
    275a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    275e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2762:	bf84      	itt	hi
    2764:	f04f 0c00 	movhi.w	ip, #0
    2768:	1c40      	addhi	r0, r0, #1
    276a:	6008      	str	r0, [r1, #0]
    276c:	f882 c000 	strb.w	ip, [r2]
    2770:	bc30      	pop	{r4, r5}
    2772:	4770      	bx	lr
    2774:	ffffc2f7 	.word	0xffffc2f7
    2778:	00010c6f 	.word	0x00010c6f

0000277c <MPSL_IRQ_RTC0_Handler>:
    277c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2780:	4c38      	ldr	r4, [pc, #224]	; (2864 <MPSL_IRQ_RTC0_Handler+0xe8>)
    2782:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2786:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 2868 <MPSL_IRQ_RTC0_Handler+0xec>
    278a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    278e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2792:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2796:	f04f 0500 	mov.w	r5, #0
    279a:	bf1c      	itt	ne
    279c:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    27a0:	2800      	cmpne	r0, #0
    27a2:	d017      	beq.n	27d4 <MPSL_IRQ_RTC0_Handler+0x58>
    27a4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    27a8:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27ac:	482f      	ldr	r0, [pc, #188]	; (286c <MPSL_IRQ_RTC0_Handler+0xf0>)
    27ae:	6800      	ldr	r0, [r0, #0]
    27b0:	f8d8 1000 	ldr.w	r1, [r8]
    27b4:	eba0 0001 	sub.w	r0, r0, r1
    27b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27bc:	2802      	cmp	r0, #2
    27be:	d302      	bcc.n	27c6 <MPSL_IRQ_RTC0_Handler+0x4a>
    27c0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    27c4:	d306      	bcc.n	27d4 <MPSL_IRQ_RTC0_Handler+0x58>
    27c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    27ca:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    27ce:	2004      	movs	r0, #4
    27d0:	f7fe ff4c 	bl	166c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27d4:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27d8:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    27dc:	bf1c      	itt	ne
    27de:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    27e2:	2800      	cmpne	r0, #0
    27e4:	d017      	beq.n	2816 <MPSL_IRQ_RTC0_Handler+0x9a>
    27e6:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    27ea:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27ee:	4820      	ldr	r0, [pc, #128]	; (2870 <MPSL_IRQ_RTC0_Handler+0xf4>)
    27f0:	6800      	ldr	r0, [r0, #0]
    27f2:	f8d8 1000 	ldr.w	r1, [r8]
    27f6:	eba0 0001 	sub.w	r0, r0, r1
    27fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27fe:	2802      	cmp	r0, #2
    2800:	d302      	bcc.n	2808 <MPSL_IRQ_RTC0_Handler+0x8c>
    2802:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2806:	d306      	bcc.n	2816 <MPSL_IRQ_RTC0_Handler+0x9a>
    2808:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    280c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2810:	2005      	movs	r0, #5
    2812:	f7fe ff2b 	bl	166c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2816:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    281a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    281e:	bf1a      	itte	ne
    2820:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2824:	2800      	cmpne	r0, #0
    2826:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    282a:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    282e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2832:	4810      	ldr	r0, [pc, #64]	; (2874 <MPSL_IRQ_RTC0_Handler+0xf8>)
    2834:	6800      	ldr	r0, [r0, #0]
    2836:	f8d8 1000 	ldr.w	r1, [r8]
    283a:	eba0 0001 	sub.w	r0, r0, r1
    283e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2842:	2802      	cmp	r0, #2
    2844:	d304      	bcc.n	2850 <MPSL_IRQ_RTC0_Handler+0xd4>
    2846:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    284a:	bf38      	it	cc
    284c:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    2850:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2854:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    285c:	2006      	movs	r0, #6
    285e:	f7fe bf05 	b.w	166c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2862:	0000      	.short	0x0000
    2864:	4000b000 	.word	0x4000b000
    2868:	4000b504 	.word	0x4000b504
    286c:	4000b540 	.word	0x4000b540
    2870:	4000b544 	.word	0x4000b544
    2874:	4000b548 	.word	0x4000b548

00002878 <MPSL_IRQ_TIMER0_Handler>:
    2878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    287c:	4d3a      	ldr	r5, [pc, #232]	; (2968 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    287e:	7828      	ldrb	r0, [r5, #0]
    2880:	2804      	cmp	r0, #4
    2882:	d06c      	beq.n	295e <MPSL_IRQ_TIMER0_Handler+0xe6>
    2884:	1ce8      	adds	r0, r5, #3
    2886:	2201      	movs	r2, #1
    2888:	7801      	ldrb	r1, [r0, #0]
    288a:	b159      	cbz	r1, 28a4 <MPSL_IRQ_TIMER0_Handler+0x2c>
    288c:	2901      	cmp	r1, #1
    288e:	bf08      	it	eq
    2890:	706a      	strbeq	r2, [r5, #1]
    2892:	d002      	beq.n	289a <MPSL_IRQ_TIMER0_Handler+0x22>
    2894:	7869      	ldrb	r1, [r5, #1]
    2896:	2900      	cmp	r1, #0
    2898:	d05c      	beq.n	2954 <MPSL_IRQ_TIMER0_Handler+0xdc>
    289a:	2102      	movs	r1, #2
    289c:	7001      	strb	r1, [r0, #0]
    289e:	7840      	ldrb	r0, [r0, #1]
    28a0:	f000 fae2 	bl	2e68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28a4:	4c31      	ldr	r4, [pc, #196]	; (296c <MPSL_IRQ_TIMER0_Handler+0xf4>)
    28a6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28aa:	f04f 0800 	mov.w	r8, #0
    28ae:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    28b2:	f44f 7680 	mov.w	r6, #256	; 0x100
    28b6:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    28ba:	bf1c      	itt	ne
    28bc:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    28c0:	2800      	cmpne	r0, #0
    28c2:	d008      	beq.n	28d6 <MPSL_IRQ_TIMER0_Handler+0x5e>
    28c4:	f04f 0003 	mov.w	r0, #3
    28c8:	f000 face 	bl	2e68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28cc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    28d0:	2003      	movs	r0, #3
    28d2:	f7fe fecb 	bl	166c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28d6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28da:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    28de:	bf1c      	itt	ne
    28e0:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    28e4:	2800      	cmpne	r0, #0
    28e6:	d008      	beq.n	28fa <MPSL_IRQ_TIMER0_Handler+0x82>
    28e8:	f04f 0002 	mov.w	r0, #2
    28ec:	f000 fabc 	bl	2e68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28f0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    28f4:	2002      	movs	r0, #2
    28f6:	f7fe feb9 	bl	166c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28fa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28fe:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2902:	bf1c      	itt	ne
    2904:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    2908:	2800      	cmpne	r0, #0
    290a:	d008      	beq.n	291e <MPSL_IRQ_TIMER0_Handler+0xa6>
    290c:	f04f 0001 	mov.w	r0, #1
    2910:	f000 faaa 	bl	2e68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2914:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2918:	2001      	movs	r0, #1
    291a:	f7fe fea7 	bl	166c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    291e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2922:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2926:	bf1a      	itte	ne
    2928:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    292c:	2800      	cmpne	r0, #0
    292e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2932:	f04f 0000 	mov.w	r0, #0
    2936:	f000 fa97 	bl	2e68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    293a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    293e:	2004      	movs	r0, #4
    2940:	7028      	strb	r0, [r5, #0]
    2942:	f8c5 8008 	str.w	r8, [r5, #8]
    2946:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    294a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    294e:	2000      	movs	r0, #0
    2950:	f7fe be8c 	b.w	166c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2954:	f44f 715a 	mov.w	r1, #872	; 0x368
    2958:	206c      	movs	r0, #108	; 0x6c
    295a:	f000 feef 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    295e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2962:	2007      	movs	r0, #7
    2964:	f7fe be82 	b.w	166c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2968:	2000001c 	.word	0x2000001c
    296c:	40008000 	.word	0x40008000
    2970:	2201      	movs	r2, #1
    2972:	0213      	lsls	r3, r2, #8
    2974:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2978:	2000      	movs	r0, #0
    297a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    297e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    2982:	f3bf 8f4f 	dsb	sy
    2986:	f3bf 8f6f 	isb	sy
    298a:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    298e:	490c      	ldr	r1, [pc, #48]	; (29c0 <MPSL_IRQ_TIMER0_Handler+0x148>)
    2990:	604a      	str	r2, [r1, #4]
    2992:	1e43      	subs	r3, r0, #1
    2994:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2998:	4b0a      	ldr	r3, [pc, #40]	; (29c4 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    299a:	6018      	str	r0, [r3, #0]
    299c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    29a0:	1d1b      	adds	r3, r3, #4
    29a2:	6018      	str	r0, [r3, #0]
    29a4:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    29a8:	1d1b      	adds	r3, r3, #4
    29aa:	6018      	str	r0, [r3, #0]
    29ac:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    29b0:	1d1b      	adds	r3, r3, #4
    29b2:	6018      	str	r0, [r3, #0]
    29b4:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    29b8:	610a      	str	r2, [r1, #16]
    29ba:	4903      	ldr	r1, [pc, #12]	; (29c8 <MPSL_IRQ_TIMER0_Handler+0x150>)
    29bc:	7048      	strb	r0, [r1, #1]
    29be:	4770      	bx	lr
    29c0:	40008000 	.word	0x40008000
    29c4:	40008540 	.word	0x40008540
    29c8:	2000001c 	.word	0x2000001c

000029cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    29cc:	4801      	ldr	r0, [pc, #4]	; (29d4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    29ce:	6800      	ldr	r0, [r0, #0]
    29d0:	4770      	bx	lr
    29d2:	0000      	.short	0x0000
    29d4:	4000b504 	.word	0x4000b504

000029d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    29d8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    29dc:	4e41      	ldr	r6, [pc, #260]	; (2ae4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    29de:	4604      	mov	r4, r0
    29e0:	1ef7      	subs	r7, r6, #3
    29e2:	f896 c000 	ldrb.w	ip, [r6]
    29e6:	68f8      	ldr	r0, [r7, #12]
    29e8:	f1bc 0f01 	cmp.w	ip, #1
    29ec:	bf04      	itt	eq
    29ee:	42a0      	cmpeq	r0, r4
    29f0:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    29f4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    29f8:	4a3b      	ldr	r2, [pc, #236]	; (2ae8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    29fa:	6011      	str	r1, [r2, #0]
    29fc:	493b      	ldr	r1, [pc, #236]	; (2aec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    29fe:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2a02:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2a06:	4a3a      	ldr	r2, [pc, #232]	; (2af0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    2a08:	f04f 0500 	mov.w	r5, #0
    2a0c:	f1bc 0f00 	cmp.w	ip, #0
    2a10:	d057      	beq.n	2ac2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    2a12:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2a16:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2a1a:	6015      	str	r5, [r2, #0]
    2a1c:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2a20:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    2a24:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2a28:	f04f 0801 	mov.w	r8, #1
    2a2c:	2a00      	cmp	r2, #0
    2a2e:	bf04      	itt	eq
    2a30:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    2a34:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    2a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a3c:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2a40:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2a44:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2a48:	4a2a      	ldr	r2, [pc, #168]	; (2af4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    2a4a:	f8d2 a000 	ldr.w	sl, [r2]
    2a4e:	eba4 0a0a 	sub.w	sl, r4, sl
    2a52:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    2a56:	f1bb 0f02 	cmp.w	fp, #2
    2a5a:	d33c      	bcc.n	2ad6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2a5c:	f04f 0a02 	mov.w	sl, #2
    2a60:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    2a64:	d237      	bcs.n	2ad6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2a66:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2a6a:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2a6e:	f1bc 0f00 	cmp.w	ip, #0
    2a72:	d005      	beq.n	2a80 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    2a74:	6811      	ldr	r1, [r2, #0]
    2a76:	1a41      	subs	r1, r0, r1
    2a78:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2a7c:	2902      	cmp	r1, #2
    2a7e:	d3f9      	bcc.n	2a74 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2a80:	f8c7 8008 	str.w	r8, [r7, #8]
    2a84:	703d      	strb	r5, [r7, #0]
    2a86:	f7ff ff73 	bl	2970 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2a8a:	481b      	ldr	r0, [pc, #108]	; (2af8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2a8c:	6005      	str	r5, [r0, #0]
    2a8e:	1d00      	adds	r0, r0, #4
    2a90:	f8c0 a000 	str.w	sl, [r0]
    2a94:	4919      	ldr	r1, [pc, #100]	; (2afc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2a96:	2004      	movs	r0, #4
    2a98:	6008      	str	r0, [r1, #0]
    2a9a:	4919      	ldr	r1, [pc, #100]	; (2b00 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2a9c:	f8c1 800c 	str.w	r8, [r1, #12]
    2aa0:	68ba      	ldr	r2, [r7, #8]
    2aa2:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    2aa6:	0181      	lsls	r1, r0, #6
    2aa8:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    2aac:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    2ab0:	4a14      	ldr	r2, [pc, #80]	; (2b04 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2ab2:	0741      	lsls	r1, r0, #29
    2ab4:	6011      	str	r1, [r2, #0]
    2ab6:	60fc      	str	r4, [r7, #12]
    2ab8:	7070      	strb	r0, [r6, #1]
    2aba:	f886 8000 	strb.w	r8, [r6]
    2abe:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2ac2:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2ac6:	4b10      	ldr	r3, [pc, #64]	; (2b08 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2ac8:	601d      	str	r5, [r3, #0]
    2aca:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2ace:	6015      	str	r5, [r2, #0]
    2ad0:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2ad4:	e7a4      	b.n	2a20 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    2ad6:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    2ada:	f240 11f1 	movw	r1, #497	; 0x1f1
    2ade:	206c      	movs	r0, #108	; 0x6c
    2ae0:	f000 fe2c 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ae4:	2000001f 	.word	0x2000001f
    2ae8:	4001f508 	.word	0x4001f508
    2aec:	4000b000 	.word	0x4000b000
    2af0:	4000b544 	.word	0x4000b544
    2af4:	4000b504 	.word	0x4000b504
    2af8:	40008504 	.word	0x40008504
    2afc:	40008510 	.word	0x40008510
    2b00:	40008000 	.word	0x40008000
    2b04:	4001f504 	.word	0x4001f504
    2b08:	4000b540 	.word	0x4000b540

00002b0c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b10:	4c2b      	ldr	r4, [pc, #172]	; (2bc0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2b12:	68e1      	ldr	r1, [r4, #12]
    2b14:	4281      	cmp	r1, r0
    2b16:	bf14      	ite	ne
    2b18:	2201      	movne	r2, #1
    2b1a:	2200      	moveq	r2, #0
    2b1c:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2bc4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2b20:	f89c 7000 	ldrb.w	r7, [ip]
    2b24:	2f02      	cmp	r7, #2
    2b26:	d002      	beq.n	2b2e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    2b28:	2a00      	cmp	r2, #0
    2b2a:	d038      	beq.n	2b9e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2b2c:	e003      	b.n	2b36 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    2b2e:	2a00      	cmp	r2, #0
    2b30:	bf08      	it	eq
    2b32:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b36:	7862      	ldrb	r2, [r4, #1]
    2b38:	b382      	cbz	r2, 2b9c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    2b3a:	4b23      	ldr	r3, [pc, #140]	; (2bc8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2b3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b40:	601a      	str	r2, [r3, #0]
    2b42:	4b22      	ldr	r3, [pc, #136]	; (2bcc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2b44:	1395      	asrs	r5, r2, #14
    2b46:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    2b4a:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2b4e:	2600      	movs	r6, #0
    2b50:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2b54:	4a1e      	ldr	r2, [pc, #120]	; (2bd0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2b56:	f8d2 8000 	ldr.w	r8, [r2]
    2b5a:	eba0 0808 	sub.w	r8, r0, r8
    2b5e:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2b62:	f1b8 0f02 	cmp.w	r8, #2
    2b66:	d324      	bcc.n	2bb2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2b68:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2b6c:	d221      	bcs.n	2bb2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2b6e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2b72:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2b76:	b12f      	cbz	r7, 2b84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2b78:	6813      	ldr	r3, [r2, #0]
    2b7a:	1acb      	subs	r3, r1, r3
    2b7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2b80:	2b02      	cmp	r3, #2
    2b82:	d3f9      	bcc.n	2b78 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2b84:	4b13      	ldr	r3, [pc, #76]	; (2bd4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2b86:	2102      	movs	r1, #2
    2b88:	074a      	lsls	r2, r1, #29
    2b8a:	601a      	str	r2, [r3, #0]
    2b8c:	60e0      	str	r0, [r4, #12]
    2b8e:	2004      	movs	r0, #4
    2b90:	f88c 0001 	strb.w	r0, [ip, #1]
    2b94:	f88c 1000 	strb.w	r1, [ip]
    2b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b9c:	e004      	b.n	2ba8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2b9e:	f240 11ff 	movw	r1, #511	; 0x1ff
    2ba2:	206c      	movs	r0, #108	; 0x6c
    2ba4:	f000 fdca 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ba8:	f240 2103 	movw	r1, #515	; 0x203
    2bac:	206c      	movs	r0, #108	; 0x6c
    2bae:	f000 fdc5 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bb2:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2bb6:	f240 210f 	movw	r1, #527	; 0x20f
    2bba:	206c      	movs	r0, #108	; 0x6c
    2bbc:	f000 fdbe 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bc0:	2000001c 	.word	0x2000001c
    2bc4:	2000001f 	.word	0x2000001f
    2bc8:	4001f508 	.word	0x4001f508
    2bcc:	4000b000 	.word	0x4000b000
    2bd0:	4000b504 	.word	0x4000b504
    2bd4:	4001f504 	.word	0x4001f504

00002bd8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2bd8:	4801      	ldr	r0, [pc, #4]	; (2be0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2bda:	68c0      	ldr	r0, [r0, #12]
    2bdc:	4770      	bx	lr
    2bde:	0000      	.short	0x0000
    2be0:	2000001c 	.word	0x2000001c

00002be4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2be8:	4833      	ldr	r0, [pc, #204]	; (2cb8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2bea:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2bee:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2bf2:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2cbc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2bf6:	4a32      	ldr	r2, [pc, #200]	; (2cc0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2bf8:	2100      	movs	r1, #0
    2bfa:	f89c 3000 	ldrb.w	r3, [ip]
    2bfe:	b163      	cbz	r3, 2c1a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2c00:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2c04:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2c08:	6011      	str	r1, [r2, #0]
    2c0a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2c0e:	bf00      	nop
    2c10:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2c14:	2201      	movs	r2, #1
    2c16:	b980      	cbnz	r0, 2c3a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2c18:	e009      	b.n	2c2e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2c1a:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2c1e:	4c29      	ldr	r4, [pc, #164]	; (2cc4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2c20:	6021      	str	r1, [r4, #0]
    2c22:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2c26:	6011      	str	r1, [r2, #0]
    2c28:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2c2c:	e7f0      	b.n	2c10 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2c2e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2c32:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2c36:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2c3a:	2b02      	cmp	r3, #2
    2c3c:	d004      	beq.n	2c48 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2c3e:	f240 211b 	movw	r1, #539	; 0x21b
    2c42:	206c      	movs	r0, #108	; 0x6c
    2c44:	f000 fd7a 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c48:	4e1f      	ldr	r6, [pc, #124]	; (2cc8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2c4a:	6830      	ldr	r0, [r6, #0]
    2c4c:	4c1f      	ldr	r4, [pc, #124]	; (2ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2c4e:	1cc0      	adds	r0, r0, #3
    2c50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c54:	68e3      	ldr	r3, [r4, #12]
    2c56:	4d1e      	ldr	r5, [pc, #120]	; (2cd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2c58:	4298      	cmp	r0, r3
    2c5a:	d00b      	beq.n	2c74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2c5c:	6837      	ldr	r7, [r6, #0]
    2c5e:	1bdf      	subs	r7, r3, r7
    2c60:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2c64:	2f04      	cmp	r7, #4
    2c66:	d305      	bcc.n	2c74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2c68:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2c6c:	d202      	bcs.n	2c74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2c6e:	f7ff feb3 	bl	29d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2c72:	e01b      	b.n	2cac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2c74:	6830      	ldr	r0, [r6, #0]
    2c76:	1a18      	subs	r0, r3, r0
    2c78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c7c:	2802      	cmp	r0, #2
    2c7e:	d313      	bcc.n	2ca8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2c80:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2c84:	d210      	bcs.n	2ca8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2c86:	4b13      	ldr	r3, [pc, #76]	; (2cd4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2c88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2c8c:	6018      	str	r0, [r3, #0]
    2c8e:	60a2      	str	r2, [r4, #8]
    2c90:	7021      	strb	r1, [r4, #0]
    2c92:	606a      	str	r2, [r5, #4]
    2c94:	60ea      	str	r2, [r5, #12]
    2c96:	0040      	lsls	r0, r0, #1
    2c98:	1f19      	subs	r1, r3, #4
    2c9a:	6008      	str	r0, [r1, #0]
    2c9c:	2004      	movs	r0, #4
    2c9e:	f88c 0001 	strb.w	r0, [ip, #1]
    2ca2:	f88c 2000 	strb.w	r2, [ip]
    2ca6:	e001      	b.n	2cac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2ca8:	60a2      	str	r2, [r4, #8]
    2caa:	7021      	strb	r1, [r4, #0]
    2cac:	68a0      	ldr	r0, [r4, #8]
    2cae:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2cb6:	0000      	.short	0x0000
    2cb8:	4000b000 	.word	0x4000b000
    2cbc:	2000001f 	.word	0x2000001f
    2cc0:	4000b544 	.word	0x4000b544
    2cc4:	4000b540 	.word	0x4000b540
    2cc8:	4000b504 	.word	0x4000b504
    2ccc:	2000001c 	.word	0x2000001c
    2cd0:	40008000 	.word	0x40008000
    2cd4:	4001f508 	.word	0x4001f508

00002cd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2cdc:	f8df c174 	ldr.w	ip, [pc, #372]	; 2e54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2ce0:	2701      	movs	r7, #1
    2ce2:	f04f 0800 	mov.w	r8, #0
    2ce6:	f89c 5000 	ldrb.w	r5, [ip]
    2cea:	f89c c001 	ldrb.w	ip, [ip, #1]
    2cee:	2807      	cmp	r0, #7
    2cf0:	d27e      	bcs.n	2df0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2cf2:	e8df f000 	tbb	[pc, r0]
    2cf6:	0404      	.short	0x0404
    2cf8:	6a6a0404 	.word	0x6a6a0404
    2cfc:	006a      	.short	0x006a
    2cfe:	4c56      	ldr	r4, [pc, #344]	; (2e58 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2d00:	68e6      	ldr	r6, [r4, #12]
    2d02:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2d06:	bf04      	itt	eq
    2d08:	7864      	ldrbeq	r4, [r4, #1]
    2d0a:	2c00      	cmpeq	r4, #0
    2d0c:	d002      	beq.n	2d14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2d0e:	2d02      	cmp	r5, #2
    2d10:	d005      	beq.n	2d1e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2d12:	e03c      	b.n	2d8e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2d14:	f240 214e 	movw	r1, #590	; 0x24e
    2d18:	206c      	movs	r0, #108	; 0x6c
    2d1a:	f000 fd0f 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d1e:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2d22:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2d26:	f1ac 0404 	sub.w	r4, ip, #4
    2d2a:	0624      	lsls	r4, r4, #24
    2d2c:	0da4      	lsrs	r4, r4, #22
    2d2e:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2d32:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2d36:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2d3a:	2400      	movs	r4, #0
    2d3c:	2d01      	cmp	r5, #1
    2d3e:	d002      	beq.n	2d46 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2d40:	2d02      	cmp	r5, #2
    2d42:	d011      	beq.n	2d68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2d44:	e020      	b.n	2d88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d46:	f1bc 0f04 	cmp.w	ip, #4
    2d4a:	d205      	bcs.n	2d58 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2d4c:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2d50:	f1ba 0f00 	cmp.w	sl, #0
    2d54:	d118      	bne.n	2d88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d56:	e004      	b.n	2d62 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2d58:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2d5c:	f1ba 0f00 	cmp.w	sl, #0
    2d60:	d112      	bne.n	2d88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d62:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2d66:	e00f      	b.n	2d88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d68:	f1bc 0f04 	cmp.w	ip, #4
    2d6c:	d205      	bcs.n	2d7a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2d6e:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2d72:	f1ba 0f00 	cmp.w	sl, #0
    2d76:	d107      	bne.n	2d88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d78:	e004      	b.n	2d84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2d7a:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2d7e:	f1ba 0f00 	cmp.w	sl, #0
    2d82:	d101      	bne.n	2d88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d84:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2d88:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2d8c:	d1d5      	bne.n	2d3a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2d8e:	4c33      	ldr	r4, [pc, #204]	; (2e5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2d90:	f100 0c10 	add.w	ip, r0, #16
    2d94:	fa07 fc0c 	lsl.w	ip, r7, ip
    2d98:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2d9c:	0080      	lsls	r0, r0, #2
    2d9e:	4420      	add	r0, r4
    2da0:	b152      	cbz	r2, 2db8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2da2:	6407      	str	r7, [r0, #64]	; 0x40
    2da4:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2da8:	1b8d      	subs	r5, r1, r6
    2daa:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2dae:	42aa      	cmp	r2, r5
    2db0:	bf98      	it	ls
    2db2:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2db6:	d243      	bcs.n	2e40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2db8:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2dbc:	2b01      	cmp	r3, #1
    2dbe:	bf08      	it	eq
    2dc0:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2dc4:	2001      	movs	r0, #1
    2dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2dca:	b135      	cbz	r5, 2dda <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2dcc:	4584      	cmp	ip, r0
    2dce:	d104      	bne.n	2dda <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2dd0:	f240 2171 	movw	r1, #625	; 0x271
    2dd4:	206c      	movs	r0, #108	; 0x6c
    2dd6:	f000 fcb1 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dda:	1f00      	subs	r0, r0, #4
    2ddc:	b2c0      	uxtb	r0, r0
    2dde:	2b01      	cmp	r3, #1
    2de0:	bf0c      	ite	eq
    2de2:	2401      	moveq	r4, #1
    2de4:	2400      	movne	r4, #0
    2de6:	2803      	cmp	r0, #3
    2de8:	d306      	bcc.n	2df8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2dea:	f240 114b 	movw	r1, #331	; 0x14b
    2dee:	e000      	b.n	2df2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2df0:	e02b      	b.n	2e4a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2df2:	206c      	movs	r0, #108	; 0x6c
    2df4:	f000 fca2 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2df8:	f8df c064 	ldr.w	ip, [pc, #100]	; 2e60 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2dfc:	f100 0310 	add.w	r3, r0, #16
    2e00:	fa07 f303 	lsl.w	r3, r7, r3
    2e04:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2e08:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2e0c:	0080      	lsls	r0, r0, #2
    2e0e:	4460      	add	r0, ip
    2e10:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2e14:	b14a      	cbz	r2, 2e2a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2e16:	4d13      	ldr	r5, [pc, #76]	; (2e64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2e18:	682e      	ldr	r6, [r5, #0]
    2e1a:	1b8d      	subs	r5, r1, r6
    2e1c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2e20:	42aa      	cmp	r2, r5
    2e22:	bf98      	it	ls
    2e24:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2e28:	d20a      	bcs.n	2e40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2e2a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e2e:	2c00      	cmp	r4, #0
    2e30:	bf18      	it	ne
    2e32:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2e36:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2e3a:	2001      	movs	r0, #1
    2e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e40:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2e44:	2000      	movs	r0, #0
    2e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e4a:	f240 2176 	movw	r1, #630	; 0x276
    2e4e:	206c      	movs	r0, #108	; 0x6c
    2e50:	f000 fc74 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e54:	2000001f 	.word	0x2000001f
    2e58:	2000001c 	.word	0x2000001c
    2e5c:	40008000 	.word	0x40008000
    2e60:	4000b000 	.word	0x4000b000
    2e64:	4000b504 	.word	0x4000b504

00002e68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e6a:	2701      	movs	r7, #1
    2e6c:	2400      	movs	r4, #0
    2e6e:	2807      	cmp	r0, #7
    2e70:	d24c      	bcs.n	2f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    2e72:	e8df f000 	tbb	[pc, r0]
    2e76:	0404      	.short	0x0404
    2e78:	16160404 	.word	0x16160404
    2e7c:	0016      	.short	0x0016
    2e7e:	4a26      	ldr	r2, [pc, #152]	; (2f18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2e80:	f100 0110 	add.w	r1, r0, #16
    2e84:	fa07 f101 	lsl.w	r1, r7, r1
    2e88:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2e8c:	0081      	lsls	r1, r0, #2
    2e8e:	4411      	add	r1, r2
    2e90:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2e94:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2e98:	4920      	ldr	r1, [pc, #128]	; (2f1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2e9a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2e9e:	9000      	str	r0, [sp, #0]
    2ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ea2:	4d1f      	ldr	r5, [pc, #124]	; (2f20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    2ea4:	1f01      	subs	r1, r0, #4
    2ea6:	b2ce      	uxtb	r6, r1
    2ea8:	7829      	ldrb	r1, [r5, #0]
    2eaa:	b179      	cbz	r1, 2ecc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2eac:	786a      	ldrb	r2, [r5, #1]
    2eae:	4282      	cmp	r2, r0
    2eb0:	d10c      	bne.n	2ecc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2eb2:	4a1c      	ldr	r2, [pc, #112]	; (2f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    2eb4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2eb8:	6010      	str	r0, [r2, #0]
    2eba:	2901      	cmp	r1, #1
    2ebc:	bf08      	it	eq
    2ebe:	f7ff fd57 	bleq	2970 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2ec2:	702c      	strb	r4, [r5, #0]
    2ec4:	4918      	ldr	r1, [pc, #96]	; (2f28 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2ec6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2eca:	60c8      	str	r0, [r1, #12]
    2ecc:	f106 0010 	add.w	r0, r6, #16
    2ed0:	fa07 f100 	lsl.w	r1, r7, r0
    2ed4:	4815      	ldr	r0, [pc, #84]	; (2f2c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2ed6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2eda:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2ede:	00b0      	lsls	r0, r6, #2
    2ee0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2ee4:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2ee8:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    2eec:	4a10      	ldr	r2, [pc, #64]	; (2f30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2eee:	6812      	ldr	r2, [r2, #0]
    2ef0:	1a89      	subs	r1, r1, r2
    2ef2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2ef6:	2902      	cmp	r1, #2
    2ef8:	bf24      	itt	cs
    2efa:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    2efe:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    2f02:	480c      	ldr	r0, [pc, #48]	; (2f34 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2f04:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2f08:	9000      	str	r0, [sp, #0]
    2f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f0c:	f240 21ef 	movw	r1, #751	; 0x2ef
    2f10:	206c      	movs	r0, #108	; 0x6c
    2f12:	f000 fc13 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f16:	0000      	.short	0x0000
    2f18:	40008000 	.word	0x40008000
    2f1c:	40008140 	.word	0x40008140
    2f20:	2000001f 	.word	0x2000001f
    2f24:	4001f508 	.word	0x4001f508
    2f28:	2000001c 	.word	0x2000001c
    2f2c:	4000b000 	.word	0x4000b000
    2f30:	4000b504 	.word	0x4000b504
    2f34:	4000b140 	.word	0x4000b140

00002f38 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2f38:	491e      	ldr	r1, [pc, #120]	; (2fb4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    2f3a:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2f3e:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2f42:	481d      	ldr	r0, [pc, #116]	; (2fb8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    2f44:	4a1d      	ldr	r2, [pc, #116]	; (2fbc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2f46:	f890 c000 	ldrb.w	ip, [r0]
    2f4a:	2000      	movs	r0, #0
    2f4c:	f1bc 0f00 	cmp.w	ip, #0
    2f50:	d00a      	beq.n	2f68 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    2f52:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2f56:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2f5a:	6010      	str	r0, [r2, #0]
    2f5c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2f60:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    2f64:	b981      	cbnz	r1, 2f88 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2f66:	e009      	b.n	2f7c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    2f68:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2f6c:	4b14      	ldr	r3, [pc, #80]	; (2fc0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2f6e:	6018      	str	r0, [r3, #0]
    2f70:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2f74:	6010      	str	r0, [r2, #0]
    2f76:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2f7a:	e7f1      	b.n	2f60 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2f7c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2f84:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2f88:	490e      	ldr	r1, [pc, #56]	; (2fc4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2f8a:	f04f 32ff 	mov.w	r2, #4294967295
    2f8e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2f92:	4a0d      	ldr	r2, [pc, #52]	; (2fc8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2f94:	6010      	str	r0, [r2, #0]
    2f96:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2f9a:	1d12      	adds	r2, r2, #4
    2f9c:	6010      	str	r0, [r2, #0]
    2f9e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fa2:	1d12      	adds	r2, r2, #4
    2fa4:	6010      	str	r0, [r2, #0]
    2fa6:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2faa:	1d12      	adds	r2, r2, #4
    2fac:	6010      	str	r0, [r2, #0]
    2fae:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2fb2:	4770      	bx	lr
    2fb4:	4000b000 	.word	0x4000b000
    2fb8:	2000001f 	.word	0x2000001f
    2fbc:	4000b544 	.word	0x4000b544
    2fc0:	4000b540 	.word	0x4000b540
    2fc4:	40008000 	.word	0x40008000
    2fc8:	40008540 	.word	0x40008540

00002fcc <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    2fcc:	4808      	ldr	r0, [pc, #32]	; (2ff0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    2fce:	f990 0002 	ldrsb.w	r0, [r0, #2]
    2fd2:	2800      	cmp	r0, #0
    2fd4:	bfb8      	it	lt
    2fd6:	4770      	bxlt	lr
    2fd8:	f000 011f 	and.w	r1, r0, #31
    2fdc:	2201      	movs	r2, #1
    2fde:	fa02 f101 	lsl.w	r1, r2, r1
    2fe2:	0940      	lsrs	r0, r0, #5
    2fe4:	0080      	lsls	r0, r0, #2
    2fe6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2fea:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2fee:	4770      	bx	lr
    2ff0:	2000001c 	.word	0x2000001c

00002ff4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    2ff4:	b510      	push	{r4, lr}
    2ff6:	2807      	cmp	r0, #7
    2ff8:	d20d      	bcs.n	3016 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    2ffa:	e8df f000 	tbb	[pc, r0]
    2ffe:	0404      	.short	0x0404
    3000:	06060404 	.word	0x06060404
    3004:	0006      	.short	0x0006
    3006:	4906      	ldr	r1, [pc, #24]	; (3020 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3008:	e002      	b.n	3010 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    300a:	1f00      	subs	r0, r0, #4
    300c:	4905      	ldr	r1, [pc, #20]	; (3024 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    300e:	b2c0      	uxtb	r0, r0
    3010:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3014:	bd10      	pop	{r4, pc}
    3016:	f240 219a 	movw	r1, #666	; 0x29a
    301a:	206c      	movs	r0, #108	; 0x6c
    301c:	f000 fb8e 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3020:	40008140 	.word	0x40008140
    3024:	4000b140 	.word	0x4000b140

00003028 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3028:	b570      	push	{r4, r5, r6, lr}
    302a:	4819      	ldr	r0, [pc, #100]	; (3090 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    302c:	2400      	movs	r4, #0
    302e:	2104      	movs	r1, #4
    3030:	7004      	strb	r4, [r0, #0]
    3032:	1ec0      	subs	r0, r0, #3
    3034:	7001      	strb	r1, [r0, #0]
    3036:	0589      	lsls	r1, r1, #22
    3038:	60c1      	str	r1, [r0, #12]
    303a:	f7ff fc99 	bl	2970 <MPSL_IRQ_TIMER0_Handler+0xf8>
    303e:	2501      	movs	r5, #1
    3040:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3044:	02eb      	lsls	r3, r5, #11
    3046:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    304a:	f3bf 8f4f 	dsb	sy
    304e:	f3bf 8f6f 	isb	sy
    3052:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3056:	4a0f      	ldr	r2, [pc, #60]	; (3094 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    3058:	6055      	str	r5, [r2, #4]
    305a:	6095      	str	r5, [r2, #8]
    305c:	480e      	ldr	r0, [pc, #56]	; (3098 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    305e:	6801      	ldr	r1, [r0, #0]
    3060:	2900      	cmp	r1, #0
    3062:	d1fc      	bne.n	305e <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    3064:	1e48      	subs	r0, r1, #1
    3066:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    306a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    306e:	480b      	ldr	r0, [pc, #44]	; (309c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    3070:	6004      	str	r4, [r0, #0]
    3072:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3076:	1d00      	adds	r0, r0, #4
    3078:	6004      	str	r4, [r0, #0]
    307a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    307e:	1d00      	adds	r0, r0, #4
    3080:	6004      	str	r4, [r0, #0]
    3082:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    3086:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    308a:	6015      	str	r5, [r2, #0]
    308c:	bd70      	pop	{r4, r5, r6, pc}
    308e:	0000      	.short	0x0000
    3090:	2000001f 	.word	0x2000001f
    3094:	4000b000 	.word	0x4000b000
    3098:	4000b504 	.word	0x4000b504
    309c:	4000b540 	.word	0x4000b540

000030a0 <MPSL_IRQ_CLOCK_Handler>:
    30a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30a4:	4c16      	ldr	r4, [pc, #88]	; (3100 <MPSL_IRQ_CLOCK_Handler+0x60>)
    30a6:	7a60      	ldrb	r0, [r4, #9]
    30a8:	2800      	cmp	r0, #0
    30aa:	d027      	beq.n	30fc <MPSL_IRQ_CLOCK_Handler+0x5c>
    30ac:	f44f 7180 	mov.w	r1, #256	; 0x100
    30b0:	058d      	lsls	r5, r1, #22
    30b2:	4628      	mov	r0, r5
    30b4:	f009 f909 	bl	c2ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    30b8:	4680      	mov	r8, r0
    30ba:	f44f 7182 	mov.w	r1, #260	; 0x104
    30be:	4628      	mov	r0, r5
    30c0:	f009 f903 	bl	c2ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    30c4:	2600      	movs	r6, #0
    30c6:	4607      	mov	r7, r0
    30c8:	f1b8 0f00 	cmp.w	r8, #0
    30cc:	d009      	beq.n	30e2 <MPSL_IRQ_CLOCK_Handler+0x42>
    30ce:	2001      	movs	r0, #1
    30d0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    30d4:	7920      	ldrb	r0, [r4, #4]
    30d6:	b120      	cbz	r0, 30e2 <MPSL_IRQ_CLOCK_Handler+0x42>
    30d8:	7126      	strb	r6, [r4, #4]
    30da:	69e0      	ldr	r0, [r4, #28]
    30dc:	b108      	cbz	r0, 30e2 <MPSL_IRQ_CLOCK_Handler+0x42>
    30de:	4780      	blx	r0
    30e0:	61e6      	str	r6, [r4, #28]
    30e2:	b137      	cbz	r7, 30f2 <MPSL_IRQ_CLOCK_Handler+0x52>
    30e4:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    30e8:	2002      	movs	r0, #2
    30ea:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    30ee:	f000 fa6d 	bl	35cc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    30f2:	4640      	mov	r0, r8
    30f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    30f8:	f000 b85a 	b.w	31b0 <MPSL_IRQ_CLOCK_Handler+0x110>
    30fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3100:	2000002c 	.word	0x2000002c
    3104:	b510      	push	{r4, lr}
    3106:	f009 f98a 	bl	c41e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    310a:	b930      	cbnz	r0, 311a <MPSL_IRQ_CLOCK_Handler+0x7a>
    310c:	f009 f9a8 	bl	c460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3110:	b918      	cbnz	r0, 311a <MPSL_IRQ_CLOCK_Handler+0x7a>
    3112:	f009 f9db 	bl	c4cc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3116:	2800      	cmp	r0, #0
    3118:	d002      	beq.n	3120 <MPSL_IRQ_CLOCK_Handler+0x80>
    311a:	4902      	ldr	r1, [pc, #8]	; (3124 <MPSL_IRQ_CLOCK_Handler+0x84>)
    311c:	2002      	movs	r0, #2
    311e:	6008      	str	r0, [r1, #0]
    3120:	bd10      	pop	{r4, pc}
    3122:	0000      	.short	0x0000
    3124:	40000c34 	.word	0x40000c34
    3128:	b570      	push	{r4, r5, r6, lr}
    312a:	f000 f987 	bl	343c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    312e:	f000 faa1 	bl	3674 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3132:	4c09      	ldr	r4, [pc, #36]	; (3158 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3134:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3138:	b130      	cbz	r0, 3148 <MPSL_IRQ_CLOCK_Handler+0xa8>
    313a:	f7ff ffe3 	bl	3104 <MPSL_IRQ_CLOCK_Handler+0x64>
    313e:	2001      	movs	r0, #1
    3140:	6128      	str	r0, [r5, #16]
    3142:	2004      	movs	r0, #4
    3144:	72a0      	strb	r0, [r4, #10]
    3146:	e004      	b.n	3152 <MPSL_IRQ_CLOCK_Handler+0xb2>
    3148:	2003      	movs	r0, #3
    314a:	72a0      	strb	r0, [r4, #10]
    314c:	2001      	movs	r0, #1
    314e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3152:	2000      	movs	r0, #0
    3154:	71e0      	strb	r0, [r4, #7]
    3156:	bd70      	pop	{r4, r5, r6, pc}
    3158:	2000002c 	.word	0x2000002c
    315c:	b570      	push	{r4, r5, r6, lr}
    315e:	4c13      	ldr	r4, [pc, #76]	; (31ac <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3160:	79a0      	ldrb	r0, [r4, #6]
    3162:	b1f0      	cbz	r0, 31a2 <MPSL_IRQ_CLOCK_Handler+0x102>
    3164:	2801      	cmp	r0, #1
    3166:	d003      	beq.n	3170 <MPSL_IRQ_CLOCK_Handler+0xd0>
    3168:	79e1      	ldrb	r1, [r4, #7]
    316a:	1e40      	subs	r0, r0, #1
    316c:	4281      	cmp	r1, r0
    316e:	da18      	bge.n	31a2 <MPSL_IRQ_CLOCK_Handler+0x102>
    3170:	f000 fa80 	bl	3674 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3174:	4605      	mov	r5, r0
    3176:	f000 fb51 	bl	381c <mpsl_temperature_get>
    317a:	79a1      	ldrb	r1, [r4, #6]
    317c:	2901      	cmp	r1, #1
    317e:	d902      	bls.n	3186 <MPSL_IRQ_CLOCK_Handler+0xe6>
    3180:	79e1      	ldrb	r1, [r4, #7]
    3182:	1c49      	adds	r1, r1, #1
    3184:	71e1      	strb	r1, [r4, #7]
    3186:	b10d      	cbz	r5, 318c <MPSL_IRQ_CLOCK_Handler+0xec>
    3188:	6961      	ldr	r1, [r4, #20]
    318a:	e000      	b.n	318e <MPSL_IRQ_CLOCK_Handler+0xee>
    318c:	6921      	ldr	r1, [r4, #16]
    318e:	1a41      	subs	r1, r0, r1
    3190:	2902      	cmp	r1, #2
    3192:	da02      	bge.n	319a <MPSL_IRQ_CLOCK_Handler+0xfa>
    3194:	f111 0f02 	cmn.w	r1, #2
    3198:	dc07      	bgt.n	31aa <MPSL_IRQ_CLOCK_Handler+0x10a>
    319a:	b10d      	cbz	r5, 31a0 <MPSL_IRQ_CLOCK_Handler+0x100>
    319c:	6160      	str	r0, [r4, #20]
    319e:	e000      	b.n	31a2 <MPSL_IRQ_CLOCK_Handler+0x102>
    31a0:	6120      	str	r0, [r4, #16]
    31a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    31a6:	f7ff bfbf 	b.w	3128 <MPSL_IRQ_CLOCK_Handler+0x88>
    31aa:	bd70      	pop	{r4, r5, r6, pc}
    31ac:	2000002c 	.word	0x2000002c
    31b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31b4:	4606      	mov	r6, r0
    31b6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    31ba:	f44f 7186 	mov.w	r1, #268	; 0x10c
    31be:	4628      	mov	r0, r5
    31c0:	f009 f883 	bl	c2ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    31c4:	4680      	mov	r8, r0
    31c6:	f44f 7188 	mov.w	r1, #272	; 0x110
    31ca:	4628      	mov	r0, r5
    31cc:	f009 f87d 	bl	c2ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    31d0:	4c27      	ldr	r4, [pc, #156]	; (3270 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    31d2:	4682      	mov	sl, r0
    31d4:	7827      	ldrb	r7, [r4, #0]
    31d6:	f104 0008 	add.w	r0, r4, #8
    31da:	f009 f8ea 	bl	c3b2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    31de:	b110      	cbz	r0, 31e6 <MPSL_IRQ_CLOCK_Handler+0x146>
    31e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    31e4:	e016      	b.n	3214 <MPSL_IRQ_CLOCK_Handler+0x174>
    31e6:	f04f 0901 	mov.w	r9, #1
    31ea:	b146      	cbz	r6, 31fe <MPSL_IRQ_CLOCK_Handler+0x15e>
    31ec:	7aa0      	ldrb	r0, [r4, #10]
    31ee:	2803      	cmp	r0, #3
    31f0:	d105      	bne.n	31fe <MPSL_IRQ_CLOCK_Handler+0x15e>
    31f2:	2004      	movs	r0, #4
    31f4:	72a0      	strb	r0, [r4, #10]
    31f6:	f7ff ff85 	bl	3104 <MPSL_IRQ_CLOCK_Handler+0x64>
    31fa:	f8c5 9010 	str.w	r9, [r5, #16]
    31fe:	2600      	movs	r6, #0
    3200:	f1b8 0f00 	cmp.w	r8, #0
    3204:	d018      	beq.n	3238 <MPSL_IRQ_CLOCK_Handler+0x198>
    3206:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    320a:	7aa0      	ldrb	r0, [r4, #10]
    320c:	2804      	cmp	r0, #4
    320e:	d004      	beq.n	321a <MPSL_IRQ_CLOCK_Handler+0x17a>
    3210:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3214:	206d      	movs	r0, #109	; 0x6d
    3216:	f000 fa91 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    321a:	f009 f900 	bl	c41e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    321e:	b928      	cbnz	r0, 322c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3220:	f009 f91e 	bl	c460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3224:	b910      	cbnz	r0, 322c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3226:	f009 f951 	bl	c4cc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    322a:	b108      	cbz	r0, 3230 <MPSL_IRQ_CLOCK_Handler+0x190>
    322c:	4811      	ldr	r0, [pc, #68]	; (3274 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    322e:	6006      	str	r6, [r0, #0]
    3230:	2002      	movs	r0, #2
    3232:	72a0      	strb	r0, [r4, #10]
    3234:	f000 f8e6 	bl	3404 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3238:	f1ba 0f00 	cmp.w	sl, #0
    323c:	d008      	beq.n	3250 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    323e:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3242:	7aa0      	ldrb	r0, [r4, #10]
    3244:	2802      	cmp	r0, #2
    3246:	d101      	bne.n	324c <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3248:	f7ff ff88 	bl	315c <MPSL_IRQ_CLOCK_Handler+0xbc>
    324c:	f8c5 9014 	str.w	r9, [r5, #20]
    3250:	b13f      	cbz	r7, 3262 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    3252:	7026      	strb	r6, [r4, #0]
    3254:	7aa0      	ldrb	r0, [r4, #10]
    3256:	2802      	cmp	r0, #2
    3258:	d101      	bne.n	325e <MPSL_IRQ_CLOCK_Handler+0x1be>
    325a:	f7ff ff65 	bl	3128 <MPSL_IRQ_CLOCK_Handler+0x88>
    325e:	f000 f8d1 	bl	3404 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3262:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3266:	4802      	ldr	r0, [pc, #8]	; (3270 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3268:	3008      	adds	r0, #8
    326a:	f009 b8b9 	b.w	c3e0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    326e:	0000      	.short	0x0000
    3270:	2000002c 	.word	0x2000002c
    3274:	40000c34 	.word	0x40000c34
    3278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    327c:	4c5c      	ldr	r4, [pc, #368]	; (33f0 <MPSL_IRQ_CLOCK_Handler+0x350>)
    327e:	f04f 0800 	mov.w	r8, #0
    3282:	4606      	mov	r6, r0
    3284:	f8c4 8018 	str.w	r8, [r4, #24]
    3288:	7843      	ldrb	r3, [r0, #1]
    328a:	7882      	ldrb	r2, [r0, #2]
    328c:	7800      	ldrb	r0, [r0, #0]
    328e:	72e0      	strb	r0, [r4, #11]
    3290:	7163      	strb	r3, [r4, #5]
    3292:	2701      	movs	r7, #1
    3294:	71a2      	strb	r2, [r4, #6]
    3296:	07bd      	lsls	r5, r7, #30
    3298:	f884 8007 	strb.w	r8, [r4, #7]
    329c:	2805      	cmp	r0, #5
    329e:	d224      	bcs.n	32ea <MPSL_IRQ_CLOCK_Handler+0x24a>
    32a0:	e8df f000 	tbb	[pc, r0]
    32a4:	1f05030f 	.word	0x1f05030f
    32a8:	0021      	.short	0x0021
    32aa:	61a7      	str	r7, [r4, #24]
    32ac:	e009      	b.n	32c2 <MPSL_IRQ_CLOCK_Handler+0x222>
    32ae:	f000 f8c5 	bl	343c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    32b2:	2101      	movs	r1, #1
    32b4:	4628      	mov	r0, r5
    32b6:	f009 f80d 	bl	c2d4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    32ba:	2800      	cmp	r0, #0
    32bc:	d0f9      	beq.n	32b2 <MPSL_IRQ_CLOCK_Handler+0x212>
    32be:	2002      	movs	r0, #2
    32c0:	61a0      	str	r0, [r4, #24]
    32c2:	f009 f833 	bl	c32c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    32c6:	b1b0      	cbz	r0, 32f6 <MPSL_IRQ_CLOCK_Handler+0x256>
    32c8:	f000 f9ee 	bl	36a8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    32cc:	7e21      	ldrb	r1, [r4, #24]
    32ce:	f001 0103 	and.w	r1, r1, #3
    32d2:	4288      	cmp	r0, r1
    32d4:	d10f      	bne.n	32f6 <MPSL_IRQ_CLOCK_Handler+0x256>
    32d6:	79b0      	ldrb	r0, [r6, #6]
    32d8:	b150      	cbz	r0, 32f0 <MPSL_IRQ_CLOCK_Handler+0x250>
    32da:	2002      	movs	r0, #2
    32dc:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    32e0:	e06a      	b.n	33b8 <MPSL_IRQ_CLOCK_Handler+0x318>
    32e2:	4844      	ldr	r0, [pc, #272]	; (33f4 <MPSL_IRQ_CLOCK_Handler+0x354>)
    32e4:	e7ec      	b.n	32c0 <MPSL_IRQ_CLOCK_Handler+0x220>
    32e6:	4844      	ldr	r0, [pc, #272]	; (33f8 <MPSL_IRQ_CLOCK_Handler+0x358>)
    32e8:	e7ea      	b.n	32c0 <MPSL_IRQ_CLOCK_Handler+0x220>
    32ea:	f44f 714c 	mov.w	r1, #816	; 0x330
    32ee:	e049      	b.n	3384 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    32f0:	f000 f9ae 	bl	3650 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    32f4:	e060      	b.n	33b8 <MPSL_IRQ_CLOCK_Handler+0x318>
    32f6:	60ef      	str	r7, [r5, #12]
    32f8:	f44f 7a82 	mov.w	sl, #260	; 0x104
    32fc:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3300:	69a0      	ldr	r0, [r4, #24]
    3302:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3306:	f009 f876 	bl	c3f6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    330a:	b940      	cbnz	r0, 331e <MPSL_IRQ_CLOCK_Handler+0x27e>
    330c:	f009 f87d 	bl	c40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3310:	b928      	cbnz	r0, 331e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3312:	f009 f891 	bl	c438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3316:	b910      	cbnz	r0, 331e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3318:	f009 f8a2 	bl	c460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    331c:	b138      	cbz	r0, 332e <MPSL_IRQ_CLOCK_Handler+0x28e>
    331e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3322:	4836      	ldr	r0, [pc, #216]	; (33fc <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3324:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3328:	f3c1 3142 	ubfx	r1, r1, #13, #3
    332c:	6001      	str	r1, [r0, #0]
    332e:	f009 f862 	bl	c3f6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3332:	b940      	cbnz	r0, 3346 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3334:	f009 f869 	bl	c40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3338:	b928      	cbnz	r0, 3346 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    333a:	f009 f87d 	bl	c438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    333e:	b910      	cbnz	r0, 3346 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3340:	f009 f88e 	bl	c460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3344:	b110      	cbz	r0, 334c <MPSL_IRQ_CLOCK_Handler+0x2ac>
    3346:	482d      	ldr	r0, [pc, #180]	; (33fc <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3348:	3010      	adds	r0, #16
    334a:	6007      	str	r7, [r0, #0]
    334c:	60af      	str	r7, [r5, #8]
    334e:	2002      	movs	r0, #2
    3350:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3354:	79b0      	ldrb	r0, [r6, #6]
    3356:	bb78      	cbnz	r0, 33b8 <MPSL_IRQ_CLOCK_Handler+0x318>
    3358:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    335c:	f010 0f02 	tst.w	r0, #2
    3360:	d00e      	beq.n	3380 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    3362:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3400 <MPSL_IRQ_CLOCK_Handler+0x360>
    3366:	f8d9 1000 	ldr.w	r1, [r9]
    336a:	43c9      	mvns	r1, r1
    336c:	f341 1700 	sbfx	r7, r1, #4, #1
    3370:	f8d9 1000 	ldr.w	r1, [r9]
    3374:	f041 0110 	orr.w	r1, r1, #16
    3378:	f8c9 1000 	str.w	r1, [r9]
    337c:	1c7f      	adds	r7, r7, #1
    337e:	e007      	b.n	3390 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3380:	f240 21f1 	movw	r1, #753	; 0x2f1
    3384:	206d      	movs	r0, #109	; 0x6d
    3386:	f000 f9d9 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    338a:	bf00      	nop
    338c:	f000 fafc 	bl	3988 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3390:	4651      	mov	r1, sl
    3392:	4628      	mov	r0, r5
    3394:	f008 ff99 	bl	c2ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3398:	2800      	cmp	r0, #0
    339a:	d0f7      	beq.n	338c <MPSL_IRQ_CLOCK_Handler+0x2ec>
    339c:	f000 f958 	bl	3650 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    33a0:	b92f      	cbnz	r7, 33ae <MPSL_IRQ_CLOCK_Handler+0x30e>
    33a2:	f8d9 1000 	ldr.w	r1, [r9]
    33a6:	f021 0110 	bic.w	r1, r1, #16
    33aa:	f8c9 1000 	str.w	r1, [r9]
    33ae:	2002      	movs	r0, #2
    33b0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    33b4:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    33b8:	79a0      	ldrb	r0, [r4, #6]
    33ba:	b170      	cbz	r0, 33da <MPSL_IRQ_CLOCK_Handler+0x33a>
    33bc:	7830      	ldrb	r0, [r6, #0]
    33be:	b960      	cbnz	r0, 33da <MPSL_IRQ_CLOCK_Handler+0x33a>
    33c0:	f000 f958 	bl	3674 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    33c4:	4606      	mov	r6, r0
    33c6:	f000 fa29 	bl	381c <mpsl_temperature_get>
    33ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    33ce:	b116      	cbz	r6, 33d6 <MPSL_IRQ_CLOCK_Handler+0x336>
    33d0:	e9c4 2004 	strd	r2, r0, [r4, #16]
    33d4:	e001      	b.n	33da <MPSL_IRQ_CLOCK_Handler+0x33a>
    33d6:	e9c4 0204 	strd	r0, r2, [r4, #16]
    33da:	2101      	movs	r1, #1
    33dc:	4628      	mov	r0, r5
    33de:	f008 ff79 	bl	c2d4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    33e2:	b108      	cbz	r0, 33e8 <MPSL_IRQ_CLOCK_Handler+0x348>
    33e4:	f000 f940 	bl	3668 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    33e8:	f884 800a 	strb.w	r8, [r4, #10]
    33ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    33f0:	2000002c 	.word	0x2000002c
    33f4:	00020001 	.word	0x00020001
    33f8:	00030001 	.word	0x00030001
    33fc:	4000053c 	.word	0x4000053c
    3400:	e000ed10 	.word	0xe000ed10

00003404 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3404:	b510      	push	{r4, lr}
    3406:	f3ef 8410 	mrs	r4, PRIMASK
    340a:	b672      	cpsid	i
    340c:	480a      	ldr	r0, [pc, #40]	; (3438 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    340e:	7841      	ldrb	r1, [r0, #1]
    3410:	b129      	cbz	r1, 341e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3412:	7841      	ldrb	r1, [r0, #1]
    3414:	1e49      	subs	r1, r1, #1
    3416:	7041      	strb	r1, [r0, #1]
    3418:	7841      	ldrb	r1, [r0, #1]
    341a:	b129      	cbz	r1, 3428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    341c:	e008      	b.n	3430 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    341e:	f240 110d 	movw	r1, #269	; 0x10d
    3422:	206d      	movs	r0, #109	; 0x6d
    3424:	f000 f98a 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3428:	7880      	ldrb	r0, [r0, #2]
    342a:	b908      	cbnz	r0, 3430 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    342c:	f000 f930 	bl	3690 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3430:	2c00      	cmp	r4, #0
    3432:	d100      	bne.n	3436 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3434:	b662      	cpsie	i
    3436:	bd10      	pop	{r4, pc}
    3438:	2000002c 	.word	0x2000002c

0000343c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    343c:	b510      	push	{r4, lr}
    343e:	f3ef 8410 	mrs	r4, PRIMASK
    3442:	b672      	cpsid	i
    3444:	4806      	ldr	r0, [pc, #24]	; (3460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3446:	7841      	ldrb	r1, [r0, #1]
    3448:	1c49      	adds	r1, r1, #1
    344a:	7041      	strb	r1, [r0, #1]
    344c:	7840      	ldrb	r0, [r0, #1]
    344e:	2801      	cmp	r0, #1
    3450:	d101      	bne.n	3456 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3452:	f008 ff56 	bl	c302 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3456:	2c00      	cmp	r4, #0
    3458:	d100      	bne.n	345c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    345a:	b662      	cpsie	i
    345c:	bd10      	pop	{r4, pc}
    345e:	0000      	.short	0x0000
    3460:	2000002c 	.word	0x2000002c

00003464 <mpsl_clock_hfclk_release>:
    3464:	4805      	ldr	r0, [pc, #20]	; (347c <mpsl_clock_hfclk_release+0x18>)
    3466:	b510      	push	{r4, lr}
    3468:	78c1      	ldrb	r1, [r0, #3]
    346a:	b121      	cbz	r1, 3476 <mpsl_clock_hfclk_release+0x12>
    346c:	2100      	movs	r1, #0
    346e:	7101      	strb	r1, [r0, #4]
    3470:	70c1      	strb	r1, [r0, #3]
    3472:	f7ff ffc7 	bl	3404 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3476:	2000      	movs	r0, #0
    3478:	bd10      	pop	{r4, pc}
    347a:	0000      	.short	0x0000
    347c:	2000002c 	.word	0x2000002c

00003480 <mpsl_clock_hfclk_request>:
    3480:	b570      	push	{r4, r5, r6, lr}
    3482:	4c0c      	ldr	r4, [pc, #48]	; (34b4 <mpsl_clock_hfclk_request+0x34>)
    3484:	78e1      	ldrb	r1, [r4, #3]
    3486:	b961      	cbnz	r1, 34a2 <mpsl_clock_hfclk_request+0x22>
    3488:	2501      	movs	r5, #1
    348a:	70e5      	strb	r5, [r4, #3]
    348c:	61e0      	str	r0, [r4, #28]
    348e:	f7ff ffd5 	bl	343c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3492:	f000 f8ef 	bl	3674 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3496:	b130      	cbz	r0, 34a6 <mpsl_clock_hfclk_request+0x26>
    3498:	69e0      	ldr	r0, [r4, #28]
    349a:	b110      	cbz	r0, 34a2 <mpsl_clock_hfclk_request+0x22>
    349c:	4780      	blx	r0
    349e:	2000      	movs	r0, #0
    34a0:	61e0      	str	r0, [r4, #28]
    34a2:	2000      	movs	r0, #0
    34a4:	bd70      	pop	{r4, r5, r6, pc}
    34a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    34aa:	7125      	strb	r5, [r4, #4]
    34ac:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    34b0:	e7f7      	b.n	34a2 <mpsl_clock_hfclk_request+0x22>
    34b2:	0000      	.short	0x0000
    34b4:	2000002c 	.word	0x2000002c

000034b8 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    34b8:	f3ef 8010 	mrs	r0, PRIMASK
    34bc:	b672      	cpsid	i
    34be:	4904      	ldr	r1, [pc, #16]	; (34d0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    34c0:	788a      	ldrb	r2, [r1, #2]
    34c2:	1c52      	adds	r2, r2, #1
    34c4:	708a      	strb	r2, [r1, #2]
    34c6:	2800      	cmp	r0, #0
    34c8:	d100      	bne.n	34cc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    34ca:	b662      	cpsie	i
    34cc:	4770      	bx	lr
    34ce:	0000      	.short	0x0000
    34d0:	2000002c 	.word	0x2000002c

000034d4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    34d4:	b510      	push	{r4, lr}
    34d6:	f3ef 8410 	mrs	r4, PRIMASK
    34da:	b672      	cpsid	i
    34dc:	480a      	ldr	r0, [pc, #40]	; (3508 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    34de:	7881      	ldrb	r1, [r0, #2]
    34e0:	b129      	cbz	r1, 34ee <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    34e2:	7881      	ldrb	r1, [r0, #2]
    34e4:	1e49      	subs	r1, r1, #1
    34e6:	7081      	strb	r1, [r0, #2]
    34e8:	7841      	ldrb	r1, [r0, #1]
    34ea:	b129      	cbz	r1, 34f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    34ec:	e008      	b.n	3500 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    34ee:	f240 1125 	movw	r1, #293	; 0x125
    34f2:	206d      	movs	r0, #109	; 0x6d
    34f4:	f000 f922 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34f8:	7880      	ldrb	r0, [r0, #2]
    34fa:	b908      	cbnz	r0, 3500 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    34fc:	f000 f8c8 	bl	3690 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3500:	2c00      	cmp	r4, #0
    3502:	d100      	bne.n	3506 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3504:	b662      	cpsie	i
    3506:	bd10      	pop	{r4, pc}
    3508:	2000002c 	.word	0x2000002c

0000350c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    350c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3510:	0004      	movs	r4, r0
    3512:	f06f 0015 	mvn.w	r0, #21
    3516:	d03c      	beq.n	3592 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3518:	7821      	ldrb	r1, [r4, #0]
    351a:	2904      	cmp	r1, #4
    351c:	d839      	bhi.n	3592 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    351e:	2900      	cmp	r1, #0
    3520:	7861      	ldrb	r1, [r4, #1]
    3522:	d038      	beq.n	3596 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3524:	2900      	cmp	r1, #0
    3526:	d134      	bne.n	3592 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3528:	78a1      	ldrb	r1, [r4, #2]
    352a:	2900      	cmp	r1, #0
    352c:	d131      	bne.n	3592 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    352e:	2000      	movs	r0, #0
    3530:	f008 fe96 	bl	c260 <MPSL_IRQ_RADIO_Handler+0x1e>
    3534:	2000      	movs	r0, #0
    3536:	f008 fe86 	bl	c246 <MPSL_IRQ_RADIO_Handler+0x4>
    353a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    353e:	f04f 31ff 	mov.w	r1, #4294967295
    3542:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3546:	2600      	movs	r6, #0
    3548:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    354c:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3550:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3554:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3558:	4f14      	ldr	r7, [pc, #80]	; (35ac <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    355a:	707e      	strb	r6, [r7, #1]
    355c:	88a0      	ldrh	r0, [r4, #4]
    355e:	81b8      	strh	r0, [r7, #12]
    3560:	f008 fec6 	bl	c2f0 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3564:	2501      	movs	r5, #1
    3566:	b108      	cbz	r0, 356c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3568:	70fd      	strb	r5, [r7, #3]
    356a:	707d      	strb	r5, [r7, #1]
    356c:	2101      	movs	r1, #1
    356e:	4640      	mov	r0, r8
    3570:	f008 feb0 	bl	c2d4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3574:	b108      	cbz	r0, 357a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3576:	f000 f877 	bl	3668 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    357a:	4620      	mov	r0, r4
    357c:	f7ff fe7c 	bl	3278 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    3580:	727d      	strb	r5, [r7, #9]
    3582:	2000      	movs	r0, #0
    3584:	f008 fe5f 	bl	c246 <MPSL_IRQ_RADIO_Handler+0x4>
    3588:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    358c:	4630      	mov	r0, r6
    358e:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    3592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3596:	2900      	cmp	r1, #0
    3598:	d0fb      	beq.n	3592 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    359a:	2920      	cmp	r1, #32
    359c:	d8f9      	bhi.n	3592 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    359e:	78a1      	ldrb	r1, [r4, #2]
    35a0:	2921      	cmp	r1, #33	; 0x21
    35a2:	d8f6      	bhi.n	3592 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35a4:	2901      	cmp	r1, #1
    35a6:	d1c2      	bne.n	352e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    35a8:	e7f3      	b.n	3592 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35aa:	0000      	.short	0x0000
    35ac:	2000002c 	.word	0x2000002c

000035b0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    35b0:	4801      	ldr	r0, [pc, #4]	; (35b8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    35b2:	8980      	ldrh	r0, [r0, #12]
    35b4:	4770      	bx	lr
    35b6:	0000      	.short	0x0000
    35b8:	2000002c 	.word	0x2000002c

000035bc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    35bc:	4802      	ldr	r0, [pc, #8]	; (35c8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    35be:	7a80      	ldrb	r0, [r0, #10]
    35c0:	2800      	cmp	r0, #0
    35c2:	d000      	beq.n	35c6 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    35c4:	2001      	movs	r0, #1
    35c6:	4770      	bx	lr
    35c8:	2000002c 	.word	0x2000002c

000035cc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    35cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35ce:	4d1f      	ldr	r5, [pc, #124]	; (364c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    35d0:	7ae8      	ldrb	r0, [r5, #11]
    35d2:	2800      	cmp	r0, #0
    35d4:	d10f      	bne.n	35f6 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    35d6:	7e28      	ldrb	r0, [r5, #24]
    35d8:	f000 0003 	and.w	r0, r0, #3
    35dc:	f008 fe96 	bl	c30c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    35e0:	2800      	cmp	r0, #0
    35e2:	d008      	beq.n	35f6 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    35e4:	f3ef 8110 	mrs	r1, PRIMASK
    35e8:	b672      	cpsid	i
    35ea:	f7ff ffe7 	bl	35bc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    35ee:	b118      	cbz	r0, 35f8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    35f0:	2900      	cmp	r1, #0
    35f2:	d100      	bne.n	35f6 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    35f4:	b662      	cpsie	i
    35f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35f8:	2601      	movs	r6, #1
    35fa:	72ae      	strb	r6, [r5, #10]
    35fc:	b901      	cbnz	r1, 3600 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    35fe:	b662      	cpsie	i
    3600:	2018      	movs	r0, #24
    3602:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3606:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    360a:	61a6      	str	r6, [r4, #24]
    360c:	f44f 7020 	mov.w	r0, #640	; 0x280
    3610:	f8ad 0000 	strh.w	r0, [sp]
    3614:	f8bd 0000 	ldrh.w	r0, [sp]
    3618:	1e41      	subs	r1, r0, #1
    361a:	f8ad 1000 	strh.w	r1, [sp]
    361e:	d2f9      	bcs.n	3614 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3620:	2700      	movs	r7, #0
    3622:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3626:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    362a:	4808      	ldr	r0, [pc, #32]	; (364c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    362c:	3008      	adds	r0, #8
    362e:	f008 fed3 	bl	c3d8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3632:	702f      	strb	r7, [r5, #0]
    3634:	f7ff fd78 	bl	3128 <MPSL_IRQ_CLOCK_Handler+0x88>
    3638:	6166      	str	r6, [r4, #20]
    363a:	7968      	ldrb	r0, [r5, #5]
    363c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3640:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3644:	2018      	movs	r0, #24
    3646:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    364a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    364c:	2000002c 	.word	0x2000002c

00003650 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3650:	b510      	push	{r4, lr}
    3652:	4c04      	ldr	r4, [pc, #16]	; (3664 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3654:	7e20      	ldrb	r0, [r4, #24]
    3656:	f000 0003 	and.w	r0, r0, #3
    365a:	f008 fe57 	bl	c30c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    365e:	2800      	cmp	r0, #0
    3660:	d0f8      	beq.n	3654 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3662:	bd10      	pop	{r4, pc}
    3664:	2000002c 	.word	0x2000002c

00003668 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3668:	4901      	ldr	r1, [pc, #4]	; (3670 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    366a:	2001      	movs	r0, #1
    366c:	7008      	strb	r0, [r1, #0]
    366e:	4770      	bx	lr
    3670:	2000027c 	.word	0x2000027c

00003674 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3674:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3678:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    367c:	b918      	cbnz	r0, 3686 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    367e:	4803      	ldr	r0, [pc, #12]	; (368c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3680:	7800      	ldrb	r0, [r0, #0]
    3682:	2800      	cmp	r0, #0
    3684:	d000      	beq.n	3688 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3686:	2001      	movs	r0, #1
    3688:	4770      	bx	lr
    368a:	0000      	.short	0x0000
    368c:	2000027c 	.word	0x2000027c

00003690 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3690:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3694:	2101      	movs	r1, #1
    3696:	6041      	str	r1, [r0, #4]
    3698:	2100      	movs	r1, #0
    369a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    369e:	4801      	ldr	r0, [pc, #4]	; (36a4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    36a0:	7001      	strb	r1, [r0, #0]
    36a2:	4770      	bx	lr
    36a4:	2000027c 	.word	0x2000027c

000036a8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    36a8:	4802      	ldr	r0, [pc, #8]	; (36b4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    36aa:	6800      	ldr	r0, [r0, #0]
    36ac:	f000 0003 	and.w	r0, r0, #3
    36b0:	4770      	bx	lr
    36b2:	0000      	.short	0x0000
    36b4:	4000041c 	.word	0x4000041c
    36b8:	b510      	push	{r4, lr}
    36ba:	b131      	cbz	r1, 36ca <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    36bc:	2901      	cmp	r1, #1
    36be:	d007      	beq.n	36d0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    36c0:	f240 3102 	movw	r1, #770	; 0x302
    36c4:	a005      	add	r0, pc, #20	; (adr r0, 36dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    36c6:	f000 f80f 	bl	36e8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    36ca:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    36ce:	e001      	b.n	36d4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    36d0:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    36d4:	f000 0001 	and.w	r0, r0, #1
    36d8:	bd10      	pop	{r4, pc}
    36da:	0000      	.short	0x0000
    36dc:	5f66726e 	.word	0x5f66726e
    36e0:	636f6c63 	.word	0x636f6c63
    36e4:	00682e6b 	.word	0x00682e6b

000036e8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    36e8:	4a02      	ldr	r2, [pc, #8]	; (36f4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    36ea:	6852      	ldr	r2, [r2, #4]
    36ec:	b102      	cbz	r2, 36f0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    36ee:	4710      	bx	r2
    36f0:	e7fe      	b.n	36f0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    36f2:	0000      	.short	0x0000
    36f4:	2000004c 	.word	0x2000004c
    36f8:	4806      	ldr	r0, [pc, #24]	; (3714 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    36fa:	b510      	push	{r4, lr}
    36fc:	2100      	movs	r1, #0
    36fe:	6001      	str	r1, [r0, #0]
    3700:	2101      	movs	r1, #1
    3702:	6001      	str	r1, [r0, #0]
    3704:	4608      	mov	r0, r1
    3706:	f008 fe28 	bl	c35a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    370a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    370e:	2001      	movs	r0, #1
    3710:	f008 be16 	b.w	c340 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3714:	40001ffc 	.word	0x40001ffc
    3718:	4807      	ldr	r0, [pc, #28]	; (3738 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    371a:	b510      	push	{r4, lr}
    371c:	2101      	movs	r1, #1
    371e:	6041      	str	r1, [r0, #4]
    3720:	1e89      	subs	r1, r1, #2
    3722:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3726:	200c      	movs	r0, #12
    3728:	f008 fe17 	bl	c35a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    372c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3730:	200c      	movs	r0, #12
    3732:	f008 be05 	b.w	c340 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3736:	0000      	.short	0x0000
    3738:	4000c000 	.word	0x4000c000

0000373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    373c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    373e:	4a10      	ldr	r2, [pc, #64]	; (3780 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3740:	6855      	ldr	r5, [r2, #4]
    3742:	b1e5      	cbz	r5, 377e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3744:	2200      	movs	r2, #0
    3746:	4603      	mov	r3, r0
    3748:	466e      	mov	r6, sp
    374a:	240a      	movs	r4, #10
    374c:	e003      	b.n	3756 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    374e:	fbb0 f0f4 	udiv	r0, r0, r4
    3752:	1c52      	adds	r2, r2, #1
    3754:	b2d2      	uxtb	r2, r2
    3756:	2800      	cmp	r0, #0
    3758:	d1f9      	bne.n	374e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    375a:	54b0      	strb	r0, [r6, r2]
    375c:	e00a      	b.n	3774 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    375e:	bf00      	nop
    3760:	fbb3 f0f4 	udiv	r0, r3, r4
    3764:	fb04 3010 	mls	r0, r4, r0, r3
    3768:	fbb3 f3f4 	udiv	r3, r3, r4
    376c:	1e52      	subs	r2, r2, #1
    376e:	b2d2      	uxtb	r2, r2
    3770:	3030      	adds	r0, #48	; 0x30
    3772:	54b0      	strb	r0, [r6, r2]
    3774:	2a00      	cmp	r2, #0
    3776:	d1f3      	bne.n	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3778:	4630      	mov	r0, r6
    377a:	47a8      	blx	r5
    377c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    377e:	e7fe      	b.n	377e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3780:	2000004c 	.word	0x2000004c

00003784 <mpsl_init>:
    3784:	b570      	push	{r4, r5, r6, lr}
    3786:	4c17      	ldr	r4, [pc, #92]	; (37e4 <mpsl_init+0x60>)
    3788:	4606      	mov	r6, r0
    378a:	460d      	mov	r5, r1
    378c:	7860      	ldrb	r0, [r4, #1]
    378e:	b110      	cbz	r0, 3796 <mpsl_init+0x12>
    3790:	f04f 30ff 	mov.w	r0, #4294967295
    3794:	bd70      	pop	{r4, r5, r6, pc}
    3796:	b906      	cbnz	r6, 379a <mpsl_init+0x16>
    3798:	4e13      	ldr	r6, [pc, #76]	; (37e8 <mpsl_init+0x64>)
    379a:	6062      	str	r2, [r4, #4]
    379c:	7025      	strb	r5, [r4, #0]
    379e:	f7ff ffab 	bl	36f8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    37a2:	f7ff ffb9 	bl	3718 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    37a6:	4630      	mov	r0, r6
    37a8:	f7ff feb0 	bl	350c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    37ac:	0006      	movs	r6, r0
    37ae:	d1f1      	bne.n	3794 <mpsl_init+0x10>
    37b0:	f7fe ff36 	bl	2620 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    37b4:	f7ff ff0a 	bl	35cc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    37b8:	f008 fd1c 	bl	c1f4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    37bc:	4628      	mov	r0, r5
    37be:	f008 fdbf 	bl	c340 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    37c2:	2001      	movs	r0, #1
    37c4:	2d00      	cmp	r5, #0
    37c6:	db09      	blt.n	37dc <mpsl_init+0x58>
    37c8:	f005 011f 	and.w	r1, r5, #31
    37cc:	fa00 f101 	lsl.w	r1, r0, r1
    37d0:	096a      	lsrs	r2, r5, #5
    37d2:	0092      	lsls	r2, r2, #2
    37d4:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    37d8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    37dc:	7060      	strb	r0, [r4, #1]
    37de:	4630      	mov	r0, r6
    37e0:	bd70      	pop	{r4, r5, r6, pc}
    37e2:	0000      	.short	0x0000
    37e4:	2000004c 	.word	0x2000004c
    37e8:	0000c37c 	.word	0x0000c37c

000037ec <mpsl_is_initialized>:
    37ec:	4801      	ldr	r0, [pc, #4]	; (37f4 <mpsl_is_initialized+0x8>)
    37ee:	7840      	ldrb	r0, [r0, #1]
    37f0:	4770      	bx	lr
    37f2:	0000      	.short	0x0000
    37f4:	2000004c 	.word	0x2000004c

000037f8 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    37f8:	4807      	ldr	r0, [pc, #28]	; (3818 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    37fa:	f990 0000 	ldrsb.w	r0, [r0]
    37fe:	2800      	cmp	r0, #0
    3800:	db09      	blt.n	3816 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3802:	f000 021f 	and.w	r2, r0, #31
    3806:	2101      	movs	r1, #1
    3808:	4091      	lsls	r1, r2
    380a:	0940      	lsrs	r0, r0, #5
    380c:	0080      	lsls	r0, r0, #2
    380e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3812:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3816:	4770      	bx	lr
    3818:	2000004c 	.word	0x2000004c

0000381c <mpsl_temperature_get>:
    381c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3820:	2601      	movs	r6, #1
    3822:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3826:	0331      	lsls	r1, r6, #12
    3828:	f04f 0800 	mov.w	r8, #0
    382c:	4640      	mov	r0, r8
    382e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    3832:	f3bf 8f4f 	dsb	sy
    3836:	f3bf 8f6f 	isb	sy
    383a:	4c16      	ldr	r4, [pc, #88]	; (3894 <mpsl_temperature_get+0x78>)
    383c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    3840:	200c      	movs	r0, #12
    3842:	f008 fda9 	bl	c398 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3846:	4d14      	ldr	r5, [pc, #80]	; (3898 <mpsl_temperature_get+0x7c>)
    3848:	6828      	ldr	r0, [r5, #0]
    384a:	43c0      	mvns	r0, r0
    384c:	f340 1700 	sbfx	r7, r0, #4, #1
    3850:	6828      	ldr	r0, [r5, #0]
    3852:	f040 0010 	orr.w	r0, r0, #16
    3856:	6028      	str	r0, [r5, #0]
    3858:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    385c:	6026      	str	r6, [r4, #0]
    385e:	1c7f      	adds	r7, r7, #1
    3860:	e002      	b.n	3868 <mpsl_temperature_get+0x4c>
    3862:	bf00      	nop
    3864:	f000 f890 	bl	3988 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3868:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    386c:	2800      	cmp	r0, #0
    386e:	d0f9      	beq.n	3864 <mpsl_temperature_get+0x48>
    3870:	b91f      	cbnz	r7, 387a <mpsl_temperature_get+0x5e>
    3872:	6828      	ldr	r0, [r5, #0]
    3874:	f020 0010 	bic.w	r0, r0, #16
    3878:	6028      	str	r0, [r5, #0]
    387a:	4808      	ldr	r0, [pc, #32]	; (389c <mpsl_temperature_get+0x80>)
    387c:	6805      	ldr	r5, [r0, #0]
    387e:	6066      	str	r6, [r4, #4]
    3880:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3884:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3888:	200c      	movs	r0, #12
    388a:	f008 fd85 	bl	c398 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    388e:	4628      	mov	r0, r5
    3890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3894:	4000c000 	.word	0x4000c000
    3898:	e000ed10 	.word	0xe000ed10
    389c:	4000c508 	.word	0x4000c508

000038a0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    38a0:	b510      	push	{r4, lr}
    38a2:	4602      	mov	r2, r0
    38a4:	2005      	movs	r0, #5
    38a6:	490c      	ldr	r1, [pc, #48]	; (38d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    38a8:	e004      	b.n	38b4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    38aa:	bf00      	nop
    38ac:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    38b0:	791b      	ldrb	r3, [r3, #4]
    38b2:	b133      	cbz	r3, 38c2 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    38b4:	1e40      	subs	r0, r0, #1
    38b6:	b2c0      	uxtb	r0, r0
    38b8:	d2f8      	bcs.n	38ac <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    38ba:	214b      	movs	r1, #75	; 0x4b
    38bc:	2069      	movs	r0, #105	; 0x69
    38be:	f7ff ff3d 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38c2:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    38c6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    38ca:	2200      	movs	r2, #0
    38cc:	714a      	strb	r2, [r1, #5]
    38ce:	718a      	strb	r2, [r1, #6]
    38d0:	2201      	movs	r2, #1
    38d2:	710a      	strb	r2, [r1, #4]
    38d4:	bd10      	pop	{r4, pc}
    38d6:	0000      	.short	0x0000
    38d8:	20000c60 	.word	0x20000c60

000038dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    38dc:	b510      	push	{r4, lr}
    38de:	2805      	cmp	r0, #5
    38e0:	d301      	bcc.n	38e6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    38e2:	215a      	movs	r1, #90	; 0x5a
    38e4:	e006      	b.n	38f4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    38e6:	490a      	ldr	r1, [pc, #40]	; (3910 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    38e8:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    38ec:	7901      	ldrb	r1, [r0, #4]
    38ee:	2901      	cmp	r1, #1
    38f0:	d003      	beq.n	38fa <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    38f2:	215b      	movs	r1, #91	; 0x5b
    38f4:	2069      	movs	r0, #105	; 0x69
    38f6:	f7ff ff21 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38fa:	7941      	ldrb	r1, [r0, #5]
    38fc:	7982      	ldrb	r2, [r0, #6]
    38fe:	1c49      	adds	r1, r1, #1
    3900:	b2c9      	uxtb	r1, r1
    3902:	428a      	cmp	r2, r1
    3904:	d000      	beq.n	3908 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3906:	7141      	strb	r1, [r0, #5]
    3908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    390c:	f7ff bf74 	b.w	37f8 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3910:	20000c60 	.word	0x20000c60

00003914 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3914:	b570      	push	{r4, r5, r6, lr}
    3916:	2505      	movs	r5, #5
    3918:	4e0e      	ldr	r6, [pc, #56]	; (3954 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    391a:	4c0f      	ldr	r4, [pc, #60]	; (3958 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    391c:	e016      	b.n	394c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    391e:	7821      	ldrb	r1, [r4, #0]
    3920:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3924:	7902      	ldrb	r2, [r0, #4]
    3926:	2a01      	cmp	r2, #1
    3928:	d108      	bne.n	393c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    392a:	7942      	ldrb	r2, [r0, #5]
    392c:	7983      	ldrb	r3, [r0, #6]
    392e:	429a      	cmp	r2, r3
    3930:	d004      	beq.n	393c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3932:	7942      	ldrb	r2, [r0, #5]
    3934:	7182      	strb	r2, [r0, #6]
    3936:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    393a:	4780      	blx	r0
    393c:	7820      	ldrb	r0, [r4, #0]
    393e:	1c40      	adds	r0, r0, #1
    3940:	b2c0      	uxtb	r0, r0
    3942:	7020      	strb	r0, [r4, #0]
    3944:	2805      	cmp	r0, #5
    3946:	d301      	bcc.n	394c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3948:	2000      	movs	r0, #0
    394a:	7020      	strb	r0, [r4, #0]
    394c:	1e6d      	subs	r5, r5, #1
    394e:	b2ed      	uxtb	r5, r5
    3950:	d2e5      	bcs.n	391e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    3952:	bd70      	pop	{r4, r5, r6, pc}
    3954:	20000c60 	.word	0x20000c60
    3958:	2000027d 	.word	0x2000027d

0000395c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    395c:	b500      	push	{lr}
    395e:	f008 fd4a 	bl	c3f6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3962:	b940      	cbnz	r0, 3976 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3964:	f008 fd51 	bl	c40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3968:	b928      	cbnz	r0, 3976 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    396a:	f008 fd65 	bl	c438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    396e:	b910      	cbnz	r0, 3976 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3970:	f008 fd76 	bl	c460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3974:	b108      	cbz	r0, 397a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3976:	4802      	ldr	r0, [pc, #8]	; (3980 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3978:	bd00      	pop	{pc}
    397a:	4802      	ldr	r0, [pc, #8]	; (3984 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    397c:	bd00      	pop	{pc}
    397e:	0000      	.short	0x0000
    3980:	4000050c 	.word	0x4000050c
    3984:	4001e700 	.word	0x4001e700

00003988 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3988:	b510      	push	{r4, lr}
    398a:	f008 fd69 	bl	c460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    398e:	b330      	cbz	r0, 39de <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3990:	f3ef 8010 	mrs	r0, PRIMASK
    3994:	b1c8      	cbz	r0, 39ca <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3996:	2100      	movs	r1, #0
    3998:	b672      	cpsid	i
    399a:	4812      	ldr	r0, [pc, #72]	; (39e4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    399c:	6802      	ldr	r2, [r0, #0]
    399e:	6803      	ldr	r3, [r0, #0]
    39a0:	f3c2 1200 	ubfx	r2, r2, #4, #1
    39a4:	f043 0310 	orr.w	r3, r3, #16
    39a8:	6003      	str	r3, [r0, #0]
    39aa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    39ae:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    39b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    39b6:	431c      	orrs	r4, r3
    39b8:	d000      	beq.n	39bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    39ba:	bf40      	sev
    39bc:	bf20      	wfe
    39be:	bf00      	nop
    39c0:	bf00      	nop
    39c2:	bf00      	nop
    39c4:	bf00      	nop
    39c6:	b112      	cbz	r2, 39ce <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    39c8:	e005      	b.n	39d6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    39ca:	2101      	movs	r1, #1
    39cc:	e7e4      	b.n	3998 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    39ce:	6802      	ldr	r2, [r0, #0]
    39d0:	f022 0210 	bic.w	r2, r2, #16
    39d4:	6002      	str	r2, [r0, #0]
    39d6:	2900      	cmp	r1, #0
    39d8:	d000      	beq.n	39dc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    39da:	b662      	cpsie	i
    39dc:	bd10      	pop	{r4, pc}
    39de:	bf20      	wfe
    39e0:	bd10      	pop	{r4, pc}
    39e2:	0000      	.short	0x0000
    39e4:	e000ed10 	.word	0xe000ed10

000039e8 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    39e8:	0000c6d1 0000c6ed 0000c6db 0000c6e7     ................
    39f8:	0000c6d5 0000c6cf 0000c6cd 0000c6f3     ................
    3a08:	0000c6e1 0000c6c7 0000c6bf 0000c6c3     ................
    3a18:	0000c6b9                                ....

00003a1c <mpsl_fem_disable>:
    3a1c:	4801      	ldr	r0, [pc, #4]	; (3a24 <mpsl_fem_disable+0x8>)
    3a1e:	6800      	ldr	r0, [r0, #0]
    3a20:	6800      	ldr	r0, [r0, #0]
    3a22:	4700      	bx	r0
    3a24:	20000054 	.word	0x20000054

00003a28 <mpsl_fem_lna_configuration_clear>:
    3a28:	4801      	ldr	r0, [pc, #4]	; (3a30 <mpsl_fem_lna_configuration_clear+0x8>)
    3a2a:	6800      	ldr	r0, [r0, #0]
    3a2c:	6900      	ldr	r0, [r0, #16]
    3a2e:	4700      	bx	r0
    3a30:	20000054 	.word	0x20000054

00003a34 <mpsl_fem_lna_configuration_set>:
    3a34:	4a01      	ldr	r2, [pc, #4]	; (3a3c <mpsl_fem_lna_configuration_set+0x8>)
    3a36:	6812      	ldr	r2, [r2, #0]
    3a38:	6892      	ldr	r2, [r2, #8]
    3a3a:	4710      	bx	r2
    3a3c:	20000054 	.word	0x20000054

00003a40 <mpsl_fem_pa_configuration_clear>:
    3a40:	4801      	ldr	r0, [pc, #4]	; (3a48 <mpsl_fem_pa_configuration_clear+0x8>)
    3a42:	6800      	ldr	r0, [r0, #0]
    3a44:	68c0      	ldr	r0, [r0, #12]
    3a46:	4700      	bx	r0
    3a48:	20000054 	.word	0x20000054

00003a4c <mpsl_fem_pa_configuration_set>:
    3a4c:	4a01      	ldr	r2, [pc, #4]	; (3a54 <mpsl_fem_pa_configuration_set+0x8>)
    3a4e:	6812      	ldr	r2, [r2, #0]
    3a50:	6852      	ldr	r2, [r2, #4]
    3a52:	4710      	bx	r2
    3a54:	20000054 	.word	0x20000054

00003a58 <mpsl_fem_pa_is_configured>:
    3a58:	4901      	ldr	r1, [pc, #4]	; (3a60 <mpsl_fem_pa_is_configured+0x8>)
    3a5a:	6809      	ldr	r1, [r1, #0]
    3a5c:	6a09      	ldr	r1, [r1, #32]
    3a5e:	4708      	bx	r1
    3a60:	20000054 	.word	0x20000054

00003a64 <mpsl_fem_device_config_254_apply_get>:
    3a64:	4801      	ldr	r0, [pc, #4]	; (3a6c <mpsl_fem_device_config_254_apply_get+0x8>)
    3a66:	7800      	ldrb	r0, [r0, #0]
    3a68:	4770      	bx	lr
    3a6a:	0000      	.short	0x0000
    3a6c:	2000027e 	.word	0x2000027e
    3a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3a72:	4c17      	ldr	r4, [pc, #92]	; (3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>)
    3a74:	7a20      	ldrb	r0, [r4, #8]
    3a76:	2802      	cmp	r0, #2
    3a78:	d200      	bcs.n	3a7c <mpsl_fem_device_config_254_apply_get+0x18>
    3a7a:	2002      	movs	r0, #2
    3a7c:	f88d 0001 	strb.w	r0, [sp, #1]
    3a80:	79e0      	ldrb	r0, [r4, #7]
    3a82:	2803      	cmp	r0, #3
    3a84:	d200      	bcs.n	3a88 <mpsl_fem_device_config_254_apply_get+0x24>
    3a86:	2003      	movs	r0, #3
    3a88:	f88d 0000 	strb.w	r0, [sp]
    3a8c:	79a0      	ldrb	r0, [r4, #6]
    3a8e:	f8ad 0004 	strh.w	r0, [sp, #4]
    3a92:	7960      	ldrb	r0, [r4, #5]
    3a94:	f8ad 0002 	strh.w	r0, [sp, #2]
    3a98:	4668      	mov	r0, sp
    3a9a:	f006 ffd5 	bl	aa48 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3a9e:	b108      	cbz	r0, 3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
    3aa0:	2180      	movs	r1, #128	; 0x80
    3aa2:	e010      	b.n	3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
    3aa4:	68e0      	ldr	r0, [r4, #12]
    3aa6:	9002      	str	r0, [sp, #8]
    3aa8:	a802      	add	r0, sp, #8
    3aaa:	f006 ffe3 	bl	aa74 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3aae:	b108      	cbz	r0, 3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
    3ab0:	2184      	movs	r1, #132	; 0x84
    3ab2:	e008      	b.n	3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
    3ab4:	4807      	ldr	r0, [pc, #28]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    3ab6:	6800      	ldr	r0, [r0, #0]
    3ab8:	9003      	str	r0, [sp, #12]
    3aba:	a803      	add	r0, sp, #12
    3abc:	f00b f9fc 	bl	eeb8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3ac0:	2800      	cmp	r0, #0
    3ac2:	d003      	beq.n	3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
    3ac4:	2188      	movs	r1, #136	; 0x88
    3ac6:	2003      	movs	r0, #3
    3ac8:	f000 f914 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3acc:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3ace:	0000      	.short	0x0000
    3ad0:	20000c88 	.word	0x20000c88
    3ad4:	00003de0 	.word	0x00003de0
    3ad8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3ada:	4604      	mov	r4, r0
    3adc:	460e      	mov	r6, r1
    3ade:	f100 0003 	add.w	r0, r0, #3
    3ae2:	f020 0003 	bic.w	r0, r0, #3
    3ae6:	f04f 0100 	mov.w	r1, #0
    3aea:	e9cd 0100 	strd	r0, r1, [sp]
    3aee:	7831      	ldrb	r1, [r6, #0]
    3af0:	0015      	movs	r5, r2
    3af2:	f88d 1005 	strb.w	r1, [sp, #5]
    3af6:	d000      	beq.n	3afa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x62>
    3af8:	2000      	movs	r0, #0
    3afa:	a901      	add	r1, sp, #4
    3afc:	f000 faea 	bl	40d4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    3b00:	9900      	ldr	r1, [sp, #0]
    3b02:	4408      	add	r0, r1
    3b04:	490c      	ldr	r1, [pc, #48]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3b06:	9000      	str	r0, [sp, #0]
    3b08:	78c9      	ldrb	r1, [r1, #3]
    3b0a:	b149      	cbz	r1, 3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>
    3b0c:	7c31      	ldrb	r1, [r6, #16]
    3b0e:	b139      	cbz	r1, 3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>
    3b10:	2225      	movs	r2, #37	; 0x25
    3b12:	b105      	cbz	r5, 3b16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7e>
    3b14:	2000      	movs	r0, #0
    3b16:	f000 fd25 	bl	4564 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    3b1a:	9900      	ldr	r1, [sp, #0]
    3b1c:	4408      	add	r0, r1
    3b1e:	9000      	str	r0, [sp, #0]
    3b20:	462a      	mov	r2, r5
    3b22:	4631      	mov	r1, r6
    3b24:	4668      	mov	r0, sp
    3b26:	f008 fde6 	bl	c6f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3b2a:	9800      	ldr	r0, [sp, #0]
    3b2c:	1dc0      	adds	r0, r0, #7
    3b2e:	f020 0007 	bic.w	r0, r0, #7
    3b32:	9000      	str	r0, [sp, #0]
    3b34:	1b00      	subs	r0, r0, r4
    3b36:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3b38:	20000058 	.word	0x20000058

00003b3c <sdc_build_revision_get>:
    3b3c:	b510      	push	{r4, lr}
    3b3e:	b128      	cbz	r0, 3b4c <sdc_build_revision_get+0x10>
    3b40:	2214      	movs	r2, #20
    3b42:	4904      	ldr	r1, [pc, #16]	; (3b54 <sdc_build_revision_get+0x18>)
    3b44:	f008 fcde 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3b48:	2000      	movs	r0, #0
    3b4a:	bd10      	pop	{r4, pc}
    3b4c:	f06f 0015 	mvn.w	r0, #21
    3b50:	bd10      	pop	{r4, pc}
    3b52:	0000      	.short	0x0000
    3b54:	00003dfc 	.word	0x00003dfc

00003b58 <sdc_cfg_set>:
    3b58:	b570      	push	{r4, r5, r6, lr}
    3b5a:	0003      	movs	r3, r0
    3b5c:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    3b60:	d103      	bne.n	3b6a <sdc_cfg_set+0x12>
    3b62:	4c28      	ldr	r4, [pc, #160]	; (3c04 <sdc_cfg_set+0xac>)
    3b64:	7863      	ldrb	r3, [r4, #1]
    3b66:	b10b      	cbz	r3, 3b6c <sdc_cfg_set+0x14>
    3b68:	1180      	asrs	r0, r0, #6
    3b6a:	bd70      	pop	{r4, r5, r6, pc}
    3b6c:	b319      	cbz	r1, 3bb6 <sdc_cfg_set+0x5e>
    3b6e:	f06f 0515 	mvn.w	r5, #21
    3b72:	b38a      	cbz	r2, 3bd8 <sdc_cfg_set+0x80>
    3b74:	4b24      	ldr	r3, [pc, #144]	; (3c08 <sdc_cfg_set+0xb0>)
    3b76:	290b      	cmp	r1, #11
    3b78:	d23e      	bcs.n	3bf8 <sdc_cfg_set+0xa0>
    3b7a:	e8df f001 	tbb	[pc, r1]
    3b7e:	063d      	.short	0x063d
    3b80:	13100c09 	.word	0x13100c09
    3b84:	2818251d 	.word	0x2818251d
    3b88:	002e      	.short	0x002e
    3b8a:	7810      	ldrb	r0, [r2, #0]
    3b8c:	7018      	strb	r0, [r3, #0]
    3b8e:	e028      	b.n	3be2 <sdc_cfg_set+0x8a>
    3b90:	7810      	ldrb	r0, [r2, #0]
    3b92:	7058      	strb	r0, [r3, #1]
    3b94:	e025      	b.n	3be2 <sdc_cfg_set+0x8a>
    3b96:	6810      	ldr	r0, [r2, #0]
    3b98:	f8c3 0005 	str.w	r0, [r3, #5]
    3b9c:	e021      	b.n	3be2 <sdc_cfg_set+0x8a>
    3b9e:	6810      	ldr	r0, [r2, #0]
    3ba0:	60d8      	str	r0, [r3, #12]
    3ba2:	e01e      	b.n	3be2 <sdc_cfg_set+0x8a>
    3ba4:	7811      	ldrb	r1, [r2, #0]
    3ba6:	2900      	cmp	r1, #0
    3ba8:	d1df      	bne.n	3b6a <sdc_cfg_set+0x12>
    3baa:	7099      	strb	r1, [r3, #2]
    3bac:	e019      	b.n	3be2 <sdc_cfg_set+0x8a>
    3bae:	7811      	ldrb	r1, [r2, #0]
    3bb0:	2900      	cmp	r1, #0
    3bb2:	d1da      	bne.n	3b6a <sdc_cfg_set+0x12>
    3bb4:	70d9      	strb	r1, [r3, #3]
    3bb6:	e014      	b.n	3be2 <sdc_cfg_set+0x8a>
    3bb8:	78e0      	ldrb	r0, [r4, #3]
    3bba:	b110      	cbz	r0, 3bc2 <sdc_cfg_set+0x6a>
    3bbc:	7810      	ldrb	r0, [r2, #0]
    3bbe:	2802      	cmp	r0, #2
    3bc0:	d31a      	bcc.n	3bf8 <sdc_cfg_set+0xa0>
    3bc2:	7810      	ldrb	r0, [r2, #0]
    3bc4:	7418      	strb	r0, [r3, #16]
    3bc6:	e00c      	b.n	3be2 <sdc_cfg_set+0x8a>
    3bc8:	8810      	ldrh	r0, [r2, #0]
    3bca:	8258      	strh	r0, [r3, #18]
    3bcc:	e009      	b.n	3be2 <sdc_cfg_set+0x8a>
    3bce:	7811      	ldrb	r1, [r2, #0]
    3bd0:	2900      	cmp	r1, #0
    3bd2:	d1ca      	bne.n	3b6a <sdc_cfg_set+0x12>
    3bd4:	7119      	strb	r1, [r3, #4]
    3bd6:	e004      	b.n	3be2 <sdc_cfg_set+0x8a>
    3bd8:	e00e      	b.n	3bf8 <sdc_cfg_set+0xa0>
    3bda:	7810      	ldrb	r0, [r2, #0]
    3bdc:	2802      	cmp	r0, #2
    3bde:	d30b      	bcc.n	3bf8 <sdc_cfg_set+0xa0>
    3be0:	7518      	strb	r0, [r3, #20]
    3be2:	2201      	movs	r2, #1
    3be4:	4908      	ldr	r1, [pc, #32]	; (3c08 <sdc_cfg_set+0xb0>)
    3be6:	2000      	movs	r0, #0
    3be8:	f7ff ff76 	bl	3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
    3bec:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3bf0:	db04      	blt.n	3bfc <sdc_cfg_set+0xa4>
    3bf2:	f06f 000b 	mvn.w	r0, #11
    3bf6:	bd70      	pop	{r4, r5, r6, pc}
    3bf8:	4628      	mov	r0, r5
    3bfa:	bd70      	pop	{r4, r5, r6, pc}
    3bfc:	2101      	movs	r1, #1
    3bfe:	70a1      	strb	r1, [r4, #2]
    3c00:	bd70      	pop	{r4, r5, r6, pc}
    3c02:	0000      	.short	0x0000
    3c04:	20000058 	.word	0x20000058
    3c08:	20000c88 	.word	0x20000c88

00003c0c <sdc_enable>:
    3c0c:	b570      	push	{r4, r5, r6, lr}
    3c0e:	460c      	mov	r4, r1
    3c10:	0005      	movs	r5, r0
    3c12:	d019      	beq.n	3c48 <sdc_enable+0x3c>
    3c14:	b1c4      	cbz	r4, 3c48 <sdc_enable+0x3c>
    3c16:	f000 f925 	bl	3e64 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3c1a:	b1c0      	cbz	r0, 3c4e <sdc_enable+0x42>
    3c1c:	4628      	mov	r0, r5
    3c1e:	f7ff fe3f 	bl	38a0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3c22:	4d0c      	ldr	r5, [pc, #48]	; (3c54 <sdc_enable+0x48>)
    3c24:	2200      	movs	r2, #0
    3c26:	490c      	ldr	r1, [pc, #48]	; (3c58 <sdc_enable+0x4c>)
    3c28:	7028      	strb	r0, [r5, #0]
    3c2a:	4620      	mov	r0, r4
    3c2c:	f7ff ff54 	bl	3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
    3c30:	f00b fd43 	bl	f6ba <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3c34:	2100      	movs	r1, #0
    3c36:	7828      	ldrb	r0, [r5, #0]
    3c38:	f007 f91a 	bl	ae70 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3c3c:	f7ff ff18 	bl	3a70 <mpsl_fem_device_config_254_apply_get+0xc>
    3c40:	2001      	movs	r0, #1
    3c42:	7068      	strb	r0, [r5, #1]
    3c44:	2000      	movs	r0, #0
    3c46:	bd70      	pop	{r4, r5, r6, pc}
    3c48:	f06f 0015 	mvn.w	r0, #21
    3c4c:	bd70      	pop	{r4, r5, r6, pc}
    3c4e:	f04f 30ff 	mov.w	r0, #4294967295
    3c52:	bd70      	pop	{r4, r5, r6, pc}
    3c54:	20000058 	.word	0x20000058
    3c58:	20000c88 	.word	0x20000c88

00003c5c <sdc_init>:
    3c5c:	b530      	push	{r4, r5, lr}
    3c5e:	b087      	sub	sp, #28
    3c60:	0005      	movs	r5, r0
    3c62:	d00c      	beq.n	3c7e <sdc_init+0x22>
    3c64:	f7ff fdc2 	bl	37ec <mpsl_is_initialized>
    3c68:	f04f 34ff 	mov.w	r4, #4294967295
    3c6c:	b120      	cbz	r0, 3c78 <sdc_init+0x1c>
    3c6e:	f7ff fc9f 	bl	35b0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3c72:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3c76:	d905      	bls.n	3c84 <sdc_init+0x28>
    3c78:	4620      	mov	r0, r4
    3c7a:	b007      	add	sp, #28
    3c7c:	bd30      	pop	{r4, r5, pc}
    3c7e:	f06f 0015 	mvn.w	r0, #21
    3c82:	e7fa      	b.n	3c7a <sdc_init+0x1e>
    3c84:	4c15      	ldr	r4, [pc, #84]	; (3cdc <sdc_init+0x80>)
    3c86:	4816      	ldr	r0, [pc, #88]	; (3ce0 <sdc_init+0x84>)
    3c88:	6065      	str	r5, [r4, #4]
    3c8a:	f000 f9e5 	bl	4058 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3c8e:	2000      	movs	r0, #0
    3c90:	7060      	strb	r0, [r4, #1]
    3c92:	70a0      	strb	r0, [r4, #2]
    3c94:	70e0      	strb	r0, [r4, #3]
    3c96:	4601      	mov	r1, r0
    3c98:	2218      	movs	r2, #24
    3c9a:	4668      	mov	r0, sp
    3c9c:	f008 fcac 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3ca0:	2218      	movs	r2, #24
    3ca2:	4910      	ldr	r1, [pc, #64]	; (3ce4 <sdc_init+0x88>)
    3ca4:	4668      	mov	r0, sp
    3ca6:	f008 fc2d 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3caa:	2218      	movs	r2, #24
    3cac:	4669      	mov	r1, sp
    3cae:	480e      	ldr	r0, [pc, #56]	; (3ce8 <sdc_init+0x8c>)
    3cb0:	f008 fc28 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3cb4:	f3ef 8410 	mrs	r4, PRIMASK
    3cb8:	b672      	cpsid	i
    3cba:	480c      	ldr	r0, [pc, #48]	; (3cec <sdc_init+0x90>)
    3cbc:	f06f 010c 	mvn.w	r1, #12
    3cc0:	f000 fcf2 	bl	46a8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3cc4:	480a      	ldr	r0, [pc, #40]	; (3cf0 <sdc_init+0x94>)
    3cc6:	f000 fdb3 	bl	4830 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3cca:	b118      	cbz	r0, 3cd4 <sdc_init+0x78>
    3ccc:	2196      	movs	r1, #150	; 0x96
    3cce:	2003      	movs	r0, #3
    3cd0:	f000 f810 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cd4:	b904      	cbnz	r4, 3cd8 <sdc_init+0x7c>
    3cd6:	b662      	cpsie	i
    3cd8:	2000      	movs	r0, #0
    3cda:	e7ce      	b.n	3c7a <sdc_init+0x1e>
    3cdc:	20000058 	.word	0x20000058
    3ce0:	00003a71 	.word	0x00003a71
    3ce4:	00003de4 	.word	0x00003de4
    3ce8:	20000c88 	.word	0x20000c88
    3cec:	4000c000 	.word	0x4000c000
    3cf0:	00003e91 	.word	0x00003e91

00003cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3cf4:	b50e      	push	{r1, r2, r3, lr}
    3cf6:	b672      	cpsid	i
    3cf8:	4a15      	ldr	r2, [pc, #84]	; (3d50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3cfa:	6855      	ldr	r5, [r2, #4]
    3cfc:	b1d5      	cbz	r5, 3d34 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3cfe:	2200      	movs	r2, #0
    3d00:	4603      	mov	r3, r0
    3d02:	466e      	mov	r6, sp
    3d04:	240a      	movs	r4, #10
    3d06:	e003      	b.n	3d10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3d08:	fbb0 f0f4 	udiv	r0, r0, r4
    3d0c:	1c52      	adds	r2, r2, #1
    3d0e:	b2d2      	uxtb	r2, r2
    3d10:	2800      	cmp	r0, #0
    3d12:	d1f9      	bne.n	3d08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3d14:	54b0      	strb	r0, [r6, r2]
    3d16:	e009      	b.n	3d2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3d18:	fbb3 f0f4 	udiv	r0, r3, r4
    3d1c:	fb04 3010 	mls	r0, r4, r0, r3
    3d20:	fbb3 f3f4 	udiv	r3, r3, r4
    3d24:	1e52      	subs	r2, r2, #1
    3d26:	b2d2      	uxtb	r2, r2
    3d28:	3030      	adds	r0, #48	; 0x30
    3d2a:	54b0      	strb	r0, [r6, r2]
    3d2c:	2a00      	cmp	r2, #0
    3d2e:	d1f3      	bne.n	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3d30:	4630      	mov	r0, r6
    3d32:	47a8      	blx	r5
    3d34:	f3bf 8f4f 	dsb	sy
    3d38:	4806      	ldr	r0, [pc, #24]	; (3d54 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3d3a:	6801      	ldr	r1, [r0, #0]
    3d3c:	4a06      	ldr	r2, [pc, #24]	; (3d58 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3d3e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3d42:	4311      	orrs	r1, r2
    3d44:	6001      	str	r1, [r0, #0]
    3d46:	f3bf 8f4f 	dsb	sy
    3d4a:	bf00      	nop
    3d4c:	e7fd      	b.n	3d4a <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3d4e:	0000      	.short	0x0000
    3d50:	20000058 	.word	0x20000058
    3d54:	e000ed0c 	.word	0xe000ed0c
    3d58:	05fa0004 	.word	0x05fa0004

00003d5c <sdc_support_dle>:
    3d5c:	4806      	ldr	r0, [pc, #24]	; (3d78 <sdc_support_dle+0x1c>)
    3d5e:	b510      	push	{r4, lr}
    3d60:	7881      	ldrb	r1, [r0, #2]
    3d62:	7840      	ldrb	r0, [r0, #1]
    3d64:	4301      	orrs	r1, r0
    3d66:	d002      	beq.n	3d6e <sdc_support_dle+0x12>
    3d68:	f04f 30ff 	mov.w	r0, #4294967295
    3d6c:	bd10      	pop	{r4, pc}
    3d6e:	f006 fed7 	bl	ab20 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3d72:	2000      	movs	r0, #0
    3d74:	bd10      	pop	{r4, pc}
    3d76:	0000      	.short	0x0000
    3d78:	20000058 	.word	0x20000058

00003d7c <sdc_support_le_2m_phy>:
    3d7c:	4806      	ldr	r0, [pc, #24]	; (3d98 <sdc_support_le_2m_phy+0x1c>)
    3d7e:	b510      	push	{r4, lr}
    3d80:	7881      	ldrb	r1, [r0, #2]
    3d82:	7840      	ldrb	r0, [r0, #1]
    3d84:	4301      	orrs	r1, r0
    3d86:	d002      	beq.n	3d8e <sdc_support_le_2m_phy+0x12>
    3d88:	f04f 30ff 	mov.w	r0, #4294967295
    3d8c:	bd10      	pop	{r4, pc}
    3d8e:	f00b f940 	bl	f012 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3d92:	2000      	movs	r0, #0
    3d94:	bd10      	pop	{r4, pc}
    3d96:	0000      	.short	0x0000
    3d98:	20000058 	.word	0x20000058

00003d9c <sdc_support_master>:
    3d9c:	4806      	ldr	r0, [pc, #24]	; (3db8 <sdc_support_master+0x1c>)
    3d9e:	b510      	push	{r4, lr}
    3da0:	7881      	ldrb	r1, [r0, #2]
    3da2:	7840      	ldrb	r0, [r0, #1]
    3da4:	4301      	orrs	r1, r0
    3da6:	d002      	beq.n	3dae <sdc_support_master+0x12>
    3da8:	f04f 30ff 	mov.w	r0, #4294967295
    3dac:	bd10      	pop	{r4, pc}
    3dae:	f007 f893 	bl	aed8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
    3db2:	2000      	movs	r0, #0
    3db4:	bd10      	pop	{r4, pc}
    3db6:	0000      	.short	0x0000
    3db8:	20000058 	.word	0x20000058

00003dbc <sdc_support_scan>:
    3dbc:	4807      	ldr	r0, [pc, #28]	; (3ddc <sdc_support_scan+0x20>)
    3dbe:	b510      	push	{r4, lr}
    3dc0:	7881      	ldrb	r1, [r0, #2]
    3dc2:	7842      	ldrb	r2, [r0, #1]
    3dc4:	4311      	orrs	r1, r2
    3dc6:	d002      	beq.n	3dce <sdc_support_scan+0x12>
    3dc8:	f04f 30ff 	mov.w	r0, #4294967295
    3dcc:	bd10      	pop	{r4, pc}
    3dce:	2101      	movs	r1, #1
    3dd0:	70c1      	strb	r1, [r0, #3]
    3dd2:	f007 f86f 	bl	aeb4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
    3dd6:	2000      	movs	r0, #0
    3dd8:	bd10      	pop	{r4, pc}
    3dda:	0000      	.short	0x0000
    3ddc:	20000058 	.word	0x20000058
    3de0:	00000001 	.word	0x00000001
    3de4:	00010101 	.word	0x00010101
    3de8:	031b1b00 	.word	0x031b1b00
    3dec:	00000002 	.word	0x00000002
    3df0:	00001d4c 	.word	0x00001d4c
    3df4:	001f0003 	.word	0x001f0003
    3df8:	00000000 	.word	0x00000000
    3dfc:	d64ec0df 	.word	0xd64ec0df
    3e00:	09667c1f 	.word	0x09667c1f
    3e04:	a02bf50a 	.word	0xa02bf50a
    3e08:	6443f298 	.word	0x6443f298
    3e0c:	2aa6c562 	.word	0x2aa6c562

00003e10 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3e10:	4a05      	ldr	r2, [pc, #20]	; (3e28 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3e12:	b510      	push	{r4, lr}
    3e14:	6852      	ldr	r2, [r2, #4]
    3e16:	b112      	cbz	r2, 3e1e <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e1c:	4710      	bx	r2
    3e1e:	2183      	movs	r1, #131	; 0x83
    3e20:	2004      	movs	r0, #4
    3e22:	f7ff ff67 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e26:	0000      	.short	0x0000
    3e28:	20000ca0 	.word	0x20000ca0

00003e2c <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3e2c:	4a05      	ldr	r2, [pc, #20]	; (3e44 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3e2e:	b510      	push	{r4, lr}
    3e30:	6812      	ldr	r2, [r2, #0]
    3e32:	b112      	cbz	r2, 3e3a <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    3e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e38:	4710      	bx	r2
    3e3a:	217d      	movs	r1, #125	; 0x7d
    3e3c:	2004      	movs	r0, #4
    3e3e:	f7ff ff59 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e42:	0000      	.short	0x0000
    3e44:	20000ca0 	.word	0x20000ca0

00003e48 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3e48:	4a05      	ldr	r2, [pc, #20]	; (3e60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3e4a:	b510      	push	{r4, lr}
    3e4c:	6892      	ldr	r2, [r2, #8]
    3e4e:	b112      	cbz	r2, 3e56 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e54:	4710      	bx	r2
    3e56:	2189      	movs	r1, #137	; 0x89
    3e58:	2004      	movs	r0, #4
    3e5a:	f7ff ff4b 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e5e:	0000      	.short	0x0000
    3e60:	20000ca0 	.word	0x20000ca0

00003e64 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3e64:	4805      	ldr	r0, [pc, #20]	; (3e7c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3e66:	6801      	ldr	r1, [r0, #0]
    3e68:	b129      	cbz	r1, 3e76 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3e6a:	6841      	ldr	r1, [r0, #4]
    3e6c:	b119      	cbz	r1, 3e76 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3e6e:	6880      	ldr	r0, [r0, #8]
    3e70:	b108      	cbz	r0, 3e76 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3e72:	2001      	movs	r0, #1
    3e74:	4770      	bx	lr
    3e76:	2000      	movs	r0, #0
    3e78:	4770      	bx	lr
    3e7a:	0000      	.short	0x0000
    3e7c:	20000ca0 	.word	0x20000ca0

00003e80 <sdc_rand_source_register>:
    3e80:	4902      	ldr	r1, [pc, #8]	; (3e8c <sdc_rand_source_register+0xc>)
    3e82:	c80d      	ldmia	r0, {r0, r2, r3}
    3e84:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3e88:	2000      	movs	r0, #0
    3e8a:	4770      	bx	lr
    3e8c:	20000ca0 	.word	0x20000ca0

00003e90 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e92:	4c12      	ldr	r4, [pc, #72]	; (3edc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3e94:	2600      	movs	r6, #0
    3e96:	6825      	ldr	r5, [r4, #0]
    3e98:	e011      	b.n	3ebe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3e9a:	9800      	ldr	r0, [sp, #0]
    3e9c:	2802      	cmp	r0, #2
    3e9e:	d002      	beq.n	3ea6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3ea0:	2803      	cmp	r0, #3
    3ea2:	d10c      	bne.n	3ebe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3ea4:	e006      	b.n	3eb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3ea6:	6820      	ldr	r0, [r4, #0]
    3ea8:	b110      	cbz	r0, 3eb0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3eaa:	2000      	movs	r0, #0
    3eac:	6026      	str	r6, [r4, #0]
    3eae:	e005      	b.n	3ebc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3eb0:	2128      	movs	r1, #40	; 0x28
    3eb2:	e00c      	b.n	3ece <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3eb4:	6820      	ldr	r0, [r4, #0]
    3eb6:	b168      	cbz	r0, 3ed4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3eb8:	2001      	movs	r0, #1
    3eba:	6026      	str	r6, [r4, #0]
    3ebc:	47a8      	blx	r5
    3ebe:	4668      	mov	r0, sp
    3ec0:	f000 fc88 	bl	47d4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3ec4:	2800      	cmp	r0, #0
    3ec6:	d0e8      	beq.n	3e9a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3ec8:	2805      	cmp	r0, #5
    3eca:	d005      	beq.n	3ed8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3ecc:	2135      	movs	r1, #53	; 0x35
    3ece:	2004      	movs	r0, #4
    3ed0:	f7ff ff10 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ed4:	212d      	movs	r1, #45	; 0x2d
    3ed6:	e7fa      	b.n	3ece <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3eda:	0000      	.short	0x0000
    3edc:	20000060 	.word	0x20000060
    3ee0:	b570      	push	{r4, r5, r6, lr}
    3ee2:	4c14      	ldr	r4, [pc, #80]	; (3f34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>)
    3ee4:	4605      	mov	r5, r0
    3ee6:	7820      	ldrb	r0, [r4, #0]
    3ee8:	b140      	cbz	r0, 3efc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    3eea:	78a2      	ldrb	r2, [r4, #2]
    3eec:	1c61      	adds	r1, r4, #1
    3eee:	4628      	mov	r0, r5
    3ef0:	1c92      	adds	r2, r2, #2
    3ef2:	f008 fb07 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3ef6:	2000      	movs	r0, #0
    3ef8:	7020      	strb	r0, [r4, #0]
    3efa:	e013      	b.n	3f24 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    3efc:	480e      	ldr	r0, [pc, #56]	; (3f38 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3efe:	f006 feb1 	bl	ac64 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3f02:	2800      	cmp	r0, #0
    3f04:	d00f      	beq.n	3f26 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    3f06:	480c      	ldr	r0, [pc, #48]	; (3f38 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3f08:	7800      	ldrb	r0, [r0, #0]
    3f0a:	2814      	cmp	r0, #20
    3f0c:	d104      	bne.n	3f18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    3f0e:	210a      	movs	r1, #10
    3f10:	203e      	movs	r0, #62	; 0x3e
    3f12:	f008 fc48 	bl	c7a6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3f16:	b138      	cbz	r0, 3f28 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x98>
    3f18:	4907      	ldr	r1, [pc, #28]	; (3f38 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3f1a:	4628      	mov	r0, r5
    3f1c:	f008 fca1 	bl	c862 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3f20:	2800      	cmp	r0, #0
    3f22:	d000      	beq.n	3f26 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    3f24:	2001      	movs	r0, #1
    3f26:	bd70      	pop	{r4, r5, r6, pc}
    3f28:	4903      	ldr	r1, [pc, #12]	; (3f38 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3f2a:	4628      	mov	r0, r5
    3f2c:	f008 fed6 	bl	ccdc <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3f30:	e7f8      	b.n	3f24 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    3f32:	0000      	.short	0x0000
    3f34:	20000db4 	.word	0x20000db4
    3f38:	20000cac 	.word	0x20000cac
    3f3c:	b570      	push	{r4, r5, r6, lr}
    3f3e:	780a      	ldrb	r2, [r1, #0]
    3f40:	7082      	strb	r2, [r0, #2]
    3f42:	b33a      	cbz	r2, 3f94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    3f44:	2a01      	cmp	r2, #1
    3f46:	d825      	bhi.n	3f94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    3f48:	2313      	movs	r3, #19
    3f4a:	7003      	strb	r3, [r0, #0]
    3f4c:	2300      	movs	r3, #0
    3f4e:	e00a      	b.n	3f66 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd6>
    3f50:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3f54:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3f58:	78a6      	ldrb	r6, [r4, #2]
    3f5a:	70ee      	strb	r6, [r5, #3]
    3f5c:	8864      	ldrh	r4, [r4, #2]
    3f5e:	0a24      	lsrs	r4, r4, #8
    3f60:	1c5b      	adds	r3, r3, #1
    3f62:	712c      	strb	r4, [r5, #4]
    3f64:	b2db      	uxtb	r3, r3
    3f66:	4293      	cmp	r3, r2
    3f68:	d3f2      	bcc.n	3f50 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xc0>
    3f6a:	2300      	movs	r3, #0
    3f6c:	e00b      	b.n	3f86 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf6>
    3f6e:	bf00      	nop
    3f70:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    3f74:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    3f78:	792e      	ldrb	r6, [r5, #4]
    3f7a:	7166      	strb	r6, [r4, #5]
    3f7c:	88ad      	ldrh	r5, [r5, #4]
    3f7e:	0a2d      	lsrs	r5, r5, #8
    3f80:	1c5b      	adds	r3, r3, #1
    3f82:	71a5      	strb	r5, [r4, #6]
    3f84:	b2db      	uxtb	r3, r3
    3f86:	4293      	cmp	r3, r2
    3f88:	d3f2      	bcc.n	3f70 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xe0>
    3f8a:	2101      	movs	r1, #1
    3f8c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3f90:	b2c0      	uxtb	r0, r0
    3f92:	bd70      	pop	{r4, r5, r6, pc}
    3f94:	2000      	movs	r0, #0
    3f96:	bd70      	pop	{r4, r5, r6, pc}

00003f98 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    3f98:	2101      	movs	r1, #1
    3f9a:	4a0c      	ldr	r2, [pc, #48]	; (3fcc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    3f9c:	2840      	cmp	r0, #64	; 0x40
    3f9e:	d20c      	bcs.n	3fba <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    3fa0:	2820      	cmp	r0, #32
    3fa2:	d803      	bhi.n	3fac <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    3fa4:	1e40      	subs	r0, r0, #1
    3fa6:	4081      	lsls	r1, r0
    3fa8:	6810      	ldr	r0, [r2, #0]
    3faa:	e002      	b.n	3fb2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3fac:	3821      	subs	r0, #33	; 0x21
    3fae:	4081      	lsls	r1, r0
    3fb0:	6850      	ldr	r0, [r2, #4]
    3fb2:	4201      	tst	r1, r0
    3fb4:	d107      	bne.n	3fc6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3fb6:	2000      	movs	r0, #0
    3fb8:	4770      	bx	lr
    3fba:	28ff      	cmp	r0, #255	; 0xff
    3fbc:	d003      	beq.n	3fc6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3fbe:	3840      	subs	r0, #64	; 0x40
    3fc0:	4081      	lsls	r1, r0
    3fc2:	6890      	ldr	r0, [r2, #8]
    3fc4:	e7f5      	b.n	3fb2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3fc6:	2001      	movs	r0, #1
    3fc8:	4770      	bx	lr
    3fca:	0000      	.short	0x0000
    3fcc:	20000064 	.word	0x20000064

00003fd0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    3fd0:	2101      	movs	r1, #1
    3fd2:	1e40      	subs	r0, r0, #1
    3fd4:	4081      	lsls	r1, r0
    3fd6:	4804      	ldr	r0, [pc, #16]	; (3fe8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    3fd8:	68c0      	ldr	r0, [r0, #12]
    3fda:	4201      	tst	r1, r0
    3fdc:	d001      	beq.n	3fe2 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    3fde:	2001      	movs	r0, #1
    3fe0:	4770      	bx	lr
    3fe2:	2000      	movs	r0, #0
    3fe4:	4770      	bx	lr
    3fe6:	0000      	.short	0x0000
    3fe8:	20000064 	.word	0x20000064

00003fec <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    3fec:	4901      	ldr	r1, [pc, #4]	; (3ff4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    3fee:	6800      	ldr	r0, [r0, #0]
    3ff0:	60c8      	str	r0, [r1, #12]
    3ff2:	4770      	bx	lr
    3ff4:	20000064 	.word	0x20000064

00003ff8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    3ff8:	4904      	ldr	r1, [pc, #16]	; (400c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    3ffa:	6802      	ldr	r2, [r0, #0]
    3ffc:	6840      	ldr	r0, [r0, #4]
    3ffe:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4002:	600a      	str	r2, [r1, #0]
    4004:	4a02      	ldr	r2, [pc, #8]	; (4010 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4006:	4310      	orrs	r0, r2
    4008:	6048      	str	r0, [r1, #4]
    400a:	4770      	bx	lr
    400c:	20000064 	.word	0x20000064
    4010:	024007f8 	.word	0x024007f8

00004014 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4014:	4901      	ldr	r1, [pc, #4]	; (401c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    4016:	6800      	ldr	r0, [r0, #0]
    4018:	6088      	str	r0, [r1, #8]
    401a:	4770      	bx	lr
    401c:	20000064 	.word	0x20000064

00004020 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4020:	4805      	ldr	r0, [pc, #20]	; (4038 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    4022:	f04f 31ff 	mov.w	r1, #4294967295
    4026:	6001      	str	r1, [r0, #0]
    4028:	0cc9      	lsrs	r1, r1, #19
    402a:	6041      	str	r1, [r0, #4]
    402c:	2100      	movs	r1, #0
    402e:	6081      	str	r1, [r0, #8]
    4030:	211f      	movs	r1, #31
    4032:	60c1      	str	r1, [r0, #12]
    4034:	4770      	bx	lr
    4036:	0000      	.short	0x0000
    4038:	20000064 	.word	0x20000064

0000403c <sdc_hci_cmd_cb_reset>:
    403c:	b510      	push	{r4, lr}
    403e:	f7ff ffef 	bl	4020 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4042:	f00a ffbf 	bl	efc4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4046:	4604      	mov	r4, r0
    4048:	4802      	ldr	r0, [pc, #8]	; (4054 <sdc_hci_cmd_cb_reset+0x18>)
    404a:	6800      	ldr	r0, [r0, #0]
    404c:	b100      	cbz	r0, 4050 <sdc_hci_cmd_cb_reset+0x14>
    404e:	4780      	blx	r0
    4050:	4620      	mov	r0, r4
    4052:	bd10      	pop	{r4, pc}
    4054:	20000074 	.word	0x20000074

00004058 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4058:	4901      	ldr	r1, [pc, #4]	; (4060 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    405a:	6008      	str	r0, [r1, #0]
    405c:	4770      	bx	lr
    405e:	0000      	.short	0x0000
    4060:	20000074 	.word	0x20000074

00004064 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4064:	2102      	movs	r1, #2
    4066:	8001      	strh	r1, [r0, #0]
    4068:	8041      	strh	r1, [r0, #2]
    406a:	2100      	movs	r1, #0
    406c:	7101      	strb	r1, [r0, #4]
    406e:	21df      	movs	r1, #223	; 0xdf
    4070:	7141      	strb	r1, [r0, #5]
    4072:	f644 61c0 	movw	r1, #20160	; 0x4ec0
    4076:	80c1      	strh	r1, [r0, #6]
    4078:	4901      	ldr	r1, [pc, #4]	; (4080 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    407a:	6081      	str	r1, [r0, #8]
    407c:	2000      	movs	r0, #0
    407e:	4770      	bx	lr
    4080:	667c1fd6 	.word	0x667c1fd6

00004084 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    4084:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    4086:	4604      	mov	r4, r0
    4088:	4669      	mov	r1, sp
    408a:	f009 fae1 	bl	d650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    408e:	b170      	cbz	r0, 40ae <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4090:	f240 215a 	movw	r1, #602	; 0x25a
    4094:	e008      	b.n	40a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    4096:	bf00      	nop
    4098:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    409c:	4621      	mov	r1, r4
    409e:	f000 f8a7 	bl	41f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    40a2:	b120      	cbz	r0, 40ae <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    40a4:	f240 215f 	movw	r1, #607	; 0x25f
    40a8:	2017      	movs	r0, #23
    40aa:	f7ff fe23 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40ae:	4668      	mov	r0, sp
    40b0:	f000 f850 	bl	4154 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    40b4:	2800      	cmp	r0, #0
    40b6:	d0ef      	beq.n	4098 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    40b8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000040bc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    40bc:	b510      	push	{r4, lr}
    40be:	b120      	cbz	r0, 40ca <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0xe>
    40c0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    40c4:	2017      	movs	r0, #23
    40c6:	f7ff fe15 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40ca:	4801      	ldr	r0, [pc, #4]	; (40d0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x14>)
    40cc:	7800      	ldrb	r0, [r0, #0]
    40ce:	bd10      	pop	{r4, pc}
    40d0:	20000eb8 	.word	0x20000eb8

000040d4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    40d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40d6:	4605      	mov	r5, r0
    40d8:	7808      	ldrb	r0, [r1, #0]
    40da:	784a      	ldrb	r2, [r1, #1]
    40dc:	4290      	cmp	r0, r2
    40de:	d902      	bls.n	40e6 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
    40e0:	f240 1163 	movw	r1, #355	; 0x163
    40e4:	e00a      	b.n	40fc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    40e6:	9500      	str	r5, [sp, #0]
    40e8:	b15d      	cbz	r5, 4102 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    40ea:	2600      	movs	r6, #0
    40ec:	1ce8      	adds	r0, r5, #3
    40ee:	784c      	ldrb	r4, [r1, #1]
    40f0:	f020 0003 	bic.w	r0, r0, #3
    40f4:	42a8      	cmp	r0, r5
    40f6:	d006      	beq.n	4106 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x32>
    40f8:	f240 1179 	movw	r1, #377	; 0x179
    40fc:	2017      	movs	r0, #23
    40fe:	f7ff fdf9 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4102:	2601      	movs	r6, #1
    4104:	e7f2      	b.n	40ec <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
    4106:	4f12      	ldr	r7, [pc, #72]	; (4150 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    4108:	4631      	mov	r1, r6
    410a:	4668      	mov	r0, sp
    410c:	703c      	strb	r4, [r7, #0]
    410e:	f000 f8e1 	bl	42d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe4>
    4112:	2000      	movs	r0, #0
    4114:	4603      	mov	r3, r0
    4116:	9900      	ldr	r1, [sp, #0]
    4118:	1cc9      	adds	r1, r1, #3
    411a:	f021 0103 	bic.w	r1, r1, #3
    411e:	9100      	str	r1, [sp, #0]
    4120:	b966      	cbnz	r6, 413c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    4122:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    4126:	6091      	str	r1, [r2, #8]
    4128:	2100      	movs	r1, #0
    412a:	e005      	b.n	4138 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    412c:	f8d2 c008 	ldr.w	ip, [r2, #8]
    4130:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    4134:	1c49      	adds	r1, r1, #1
    4136:	b2c9      	uxtb	r1, r1
    4138:	42a1      	cmp	r1, r4
    413a:	d3f7      	bcc.n	412c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    413c:	9900      	ldr	r1, [sp, #0]
    413e:	1c40      	adds	r0, r0, #1
    4140:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    4144:	9100      	str	r1, [sp, #0]
    4146:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    414a:	d0e4      	beq.n	4116 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    414c:	1b48      	subs	r0, r1, r5
    414e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4150:	20000eb8 	.word	0x20000eb8

00004154 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4154:	b570      	push	{r4, r5, r6, lr}
    4156:	4604      	mov	r4, r0
    4158:	f009 facf 	bl	d6fa <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    415c:	b108      	cbz	r0, 4162 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    415e:	2010      	movs	r0, #16
    4160:	bd70      	pop	{r4, r5, r6, pc}
    4162:	7825      	ldrb	r5, [r4, #0]
    4164:	f000 f8f2 	bl	434c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4168:	4602      	mov	r2, r0
    416a:	480c      	ldr	r0, [pc, #48]	; (419c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    416c:	8861      	ldrh	r1, [r4, #2]
    416e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4172:	e00e      	b.n	4192 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4174:	6883      	ldr	r3, [r0, #8]
    4176:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    417a:	b143      	cbz	r3, 418e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    417c:	1c4a      	adds	r2, r1, #1
    417e:	8062      	strh	r2, [r4, #2]
    4180:	80a1      	strh	r1, [r4, #4]
    4182:	6880      	ldr	r0, [r0, #8]
    4184:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4188:	60a0      	str	r0, [r4, #8]
    418a:	2000      	movs	r0, #0
    418c:	bd70      	pop	{r4, r5, r6, pc}
    418e:	1c49      	adds	r1, r1, #1
    4190:	b289      	uxth	r1, r1
    4192:	4291      	cmp	r1, r2
    4194:	d3ee      	bcc.n	4174 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4196:	8061      	strh	r1, [r4, #2]
    4198:	2005      	movs	r0, #5
    419a:	bd70      	pop	{r4, r5, r6, pc}
    419c:	20000eb8 	.word	0x20000eb8

000041a0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    41a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41a4:	b949      	cbnz	r1, 41ba <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    41a6:	4c11      	ldr	r4, [pc, #68]	; (41ec <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    41a8:	2700      	movs	r7, #0
    41aa:	463b      	mov	r3, r7
    41ac:	f64f 76ff 	movw	r6, #65535	; 0xffff
    41b0:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    41b4:	f814 c001 	ldrb.w	ip, [r4, r1]
    41b8:	e00d      	b.n	41d6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    41ba:	2000      	movs	r0, #0
    41bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41c0:	19dc      	adds	r4, r3, r7
    41c2:	f8d5 e008 	ldr.w	lr, [r5, #8]
    41c6:	b2a4      	uxth	r4, r4
    41c8:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    41cc:	f1be 0f00 	cmp.w	lr, #0
    41d0:	d004      	beq.n	41dc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    41d2:	1c5b      	adds	r3, r3, #1
    41d4:	b29b      	uxth	r3, r3
    41d6:	459c      	cmp	ip, r3
    41d8:	d8f2      	bhi.n	41c0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    41da:	4634      	mov	r4, r6
    41dc:	8004      	strh	r4, [r0, #0]
    41de:	4620      	mov	r0, r4
    41e0:	42b4      	cmp	r4, r6
    41e2:	d0ea      	beq.n	41ba <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    41e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    41e8:	f000 b82c 	b.w	4244 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
    41ec:	20000eb8 	.word	0x20000eb8

000041f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    41f0:	b570      	push	{r4, r5, r6, lr}
    41f2:	4606      	mov	r6, r0
    41f4:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    41f8:	f243 0502 	movw	r5, #12290	; 0x3002
    41fc:	38ff      	subs	r0, #255	; 0xff
    41fe:	d01a      	beq.n	4236 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    4200:	b109      	cbz	r1, 4206 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
    4202:	2007      	movs	r0, #7
    4204:	bd70      	pop	{r4, r5, r6, pc}
    4206:	4630      	mov	r0, r6
    4208:	f000 f854 	bl	42b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    420c:	0004      	movs	r4, r0
    420e:	d012      	beq.n	4236 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    4210:	480a      	ldr	r0, [pc, #40]	; (423c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
    4212:	4621      	mov	r1, r4
    4214:	6802      	ldr	r2, [r0, #0]
    4216:	4630      	mov	r0, r6
    4218:	4790      	blx	r2
    421a:	4d09      	ldr	r5, [pc, #36]	; (4240 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
    421c:	2000      	movs	r0, #0
    421e:	68a9      	ldr	r1, [r5, #8]
    4220:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
    4224:	f000 f888 	bl	4338 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    4228:	4602      	mov	r2, r0
    422a:	4621      	mov	r1, r4
    422c:	6868      	ldr	r0, [r5, #4]
    422e:	f009 f9f9 	bl	d624 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4232:	2000      	movs	r0, #0
    4234:	bd70      	pop	{r4, r5, r6, pc}
    4236:	4628      	mov	r0, r5
    4238:	bd70      	pop	{r4, r5, r6, pc}
    423a:	0000      	.short	0x0000
    423c:	00004360 	.word	0x00004360
    4240:	20000eb8 	.word	0x20000eb8
    4244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4248:	4690      	mov	r8, r2
    424a:	460e      	mov	r6, r1
    424c:	4607      	mov	r7, r0
    424e:	f009 fa0f 	bl	d670 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    4252:	b148      	cbz	r0, 4268 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
    4254:	4815      	ldr	r0, [pc, #84]	; (42ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbc>)
    4256:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    425a:	68a8      	ldr	r0, [r5, #8]
    425c:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4260:	b128      	cbz	r0, 426e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
    4262:	f44f 719d 	mov.w	r1, #314	; 0x13a
    4266:	e014      	b.n	4292 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    4268:	f240 1139 	movw	r1, #313	; 0x139
    426c:	e011      	b.n	4292 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    426e:	6868      	ldr	r0, [r5, #4]
    4270:	2800      	cmp	r0, #0
    4272:	d018      	beq.n	42a6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb6>
    4274:	4630      	mov	r0, r6
    4276:	f000 f85f 	bl	4338 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    427a:	4601      	mov	r1, r0
    427c:	6868      	ldr	r0, [r5, #4]
    427e:	f009 f983 	bl	d588 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4282:	0004      	movs	r4, r0
    4284:	d00e      	beq.n	42a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4286:	68a8      	ldr	r0, [r5, #8]
    4288:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    428c:	b126      	cbz	r6, 4298 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa8>
    428e:	f240 1145 	movw	r1, #325	; 0x145
    4292:	2017      	movs	r0, #23
    4294:	f7ff fd2e 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4298:	4805      	ldr	r0, [pc, #20]	; (42b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
    429a:	4642      	mov	r2, r8
    429c:	4621      	mov	r1, r4
    429e:	6803      	ldr	r3, [r0, #0]
    42a0:	4638      	mov	r0, r7
    42a2:	4798      	blx	r3
    42a4:	4620      	mov	r0, r4
    42a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42aa:	0000      	.short	0x0000
    42ac:	20000eb8 	.word	0x20000eb8
    42b0:	0000435c 	.word	0x0000435c
    42b4:	b570      	push	{r4, r5, r6, lr}
    42b6:	460c      	mov	r4, r1
    42b8:	4605      	mov	r5, r0
    42ba:	f009 f9d9 	bl	d670 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    42be:	2800      	cmp	r0, #0
    42c0:	d005      	beq.n	42ce <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xde>
    42c2:	4803      	ldr	r0, [pc, #12]	; (42d0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>)
    42c4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    42c8:	6880      	ldr	r0, [r0, #8]
    42ca:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    42ce:	bd70      	pop	{r4, r5, r6, pc}
    42d0:	20000eb8 	.word	0x20000eb8
    42d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    42d8:	4e16      	ldr	r6, [pc, #88]	; (4334 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>)
    42da:	4688      	mov	r8, r1
    42dc:	4605      	mov	r5, r0
    42de:	2400      	movs	r4, #0
    42e0:	6828      	ldr	r0, [r5, #0]
    42e2:	1cc0      	adds	r0, r0, #3
    42e4:	f020 0003 	bic.w	r0, r0, #3
    42e8:	6028      	str	r0, [r5, #0]
    42ea:	4620      	mov	r0, r4
    42ec:	f000 f824 	bl	4338 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    42f0:	5d31      	ldrb	r1, [r6, r4]
    42f2:	4348      	muls	r0, r1
    42f4:	f1b8 0f00 	cmp.w	r8, #0
    42f8:	d001      	beq.n	42fe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10e>
    42fa:	2200      	movs	r2, #0
    42fc:	e000      	b.n	4300 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
    42fe:	682a      	ldr	r2, [r5, #0]
    4300:	4601      	mov	r1, r0
    4302:	9200      	str	r2, [sp, #0]
    4304:	b132      	cbz	r2, 4314 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    4306:	2700      	movs	r7, #0
    4308:	ea4f 000d 	mov.w	r0, sp
    430c:	f009 f969 	bl	d5e2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4310:	b11f      	cbz	r7, 431a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    4312:	e006      	b.n	4322 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    4314:	2701      	movs	r7, #1
    4316:	2000      	movs	r0, #0
    4318:	e7f8      	b.n	430c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11c>
    431a:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    431e:	9a00      	ldr	r2, [sp, #0]
    4320:	604a      	str	r2, [r1, #4]
    4322:	6829      	ldr	r1, [r5, #0]
    4324:	1c64      	adds	r4, r4, #1
    4326:	4408      	add	r0, r1
    4328:	6028      	str	r0, [r5, #0]
    432a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    432e:	d0d7      	beq.n	42e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf0>
    4330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4334:	20000eb8 	.word	0x20000eb8
    4338:	4903      	ldr	r1, [pc, #12]	; (4348 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    433a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    433e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4342:	1cc0      	adds	r0, r0, #3
    4344:	4008      	ands	r0, r1
    4346:	4770      	bx	lr
    4348:	00004358 	.word	0x00004358
    434c:	4801      	ldr	r0, [pc, #4]	; (4354 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>)
    434e:	7800      	ldrb	r0, [r0, #0]
    4350:	4770      	bx	lr
    4352:	0000      	.short	0x0000
    4354:	20000eb8 	.word	0x20000eb8
    4358:	000001e0 	.word	0x000001e0
    435c:	0000d685 	.word	0x0000d685
    4360:	0000e6ef 	.word	0x0000e6ef

00004364 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4364:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4368:	4c26      	ldr	r4, [pc, #152]	; (4404 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    436a:	4680      	mov	r8, r0
    436c:	b081      	sub	sp, #4
    436e:	6820      	ldr	r0, [r4, #0]
    4370:	469a      	mov	sl, r3
    4372:	4693      	mov	fp, r2
    4374:	b158      	cbz	r0, 438e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4376:	7a02      	ldrb	r2, [r0, #8]
    4378:	4542      	cmp	r2, r8
    437a:	d903      	bls.n	4384 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    437c:	6841      	ldr	r1, [r0, #4]
    437e:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    4382:	b140      	cbz	r0, 4396 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4384:	f243 0002 	movw	r0, #12290	; 0x3002
    4388:	b005      	add	sp, #20
    438a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    438e:	21a5      	movs	r1, #165	; 0xa5
    4390:	2018      	movs	r0, #24
    4392:	f7ff fcaf 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4396:	4619      	mov	r1, r3
    4398:	9802      	ldr	r0, [sp, #8]
    439a:	f009 f98b 	bl	d6b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    439e:	b286      	uxth	r6, r0
    43a0:	4658      	mov	r0, fp
    43a2:	990e      	ldr	r1, [sp, #56]	; 0x38
    43a4:	f009 f97d 	bl	d6a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    43a8:	b285      	uxth	r5, r0
    43aa:	1970      	adds	r0, r6, r5
    43ac:	1d00      	adds	r0, r0, #4
    43ae:	b287      	uxth	r7, r0
    43b0:	6820      	ldr	r0, [r4, #0]
    43b2:	46a1      	mov	r9, r4
    43b4:	4639      	mov	r1, r7
    43b6:	6800      	ldr	r0, [r0, #0]
    43b8:	f009 f8e6 	bl	d588 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    43bc:	0004      	movs	r4, r0
    43be:	d01f      	beq.n	4400 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    43c0:	8067      	strh	r7, [r4, #2]
    43c2:	8025      	strh	r5, [r4, #0]
    43c4:	4629      	mov	r1, r5
    43c6:	1d20      	adds	r0, r4, #4
    43c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    43ca:	4607      	mov	r7, r0
    43cc:	465a      	mov	r2, fp
    43ce:	2301      	movs	r3, #1
    43d0:	9500      	str	r5, [sp, #0]
    43d2:	f009 f839 	bl	d448 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    43d6:	8820      	ldrh	r0, [r4, #0]
    43d8:	4631      	mov	r1, r6
    43da:	4438      	add	r0, r7
    43dc:	2301      	movs	r3, #1
    43de:	9a02      	ldr	r2, [sp, #8]
    43e0:	f8cd a000 	str.w	sl, [sp]
    43e4:	f009 f830 	bl	d448 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    43e8:	8820      	ldrh	r0, [r4, #0]
    43ea:	19c1      	adds	r1, r0, r7
    43ec:	4638      	mov	r0, r7
    43ee:	f009 f85c 	bl	d4aa <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    43f2:	f8d9 0000 	ldr.w	r0, [r9]
    43f6:	6841      	ldr	r1, [r0, #4]
    43f8:	2000      	movs	r0, #0
    43fa:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    43fe:	e7c3      	b.n	4388 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4400:	2004      	movs	r0, #4
    4402:	e7c1      	b.n	4388 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4404:	20000078 	.word	0x20000078

00004408 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4408:	b570      	push	{r4, r5, r6, lr}
    440a:	4c14      	ldr	r4, [pc, #80]	; (445c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    440c:	6823      	ldr	r3, [r4, #0]
    440e:	b18b      	cbz	r3, 4434 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4410:	7a19      	ldrb	r1, [r3, #8]
    4412:	4281      	cmp	r1, r0
    4414:	d912      	bls.n	443c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4416:	685a      	ldr	r2, [r3, #4]
    4418:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    441c:	b171      	cbz	r1, 443c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    441e:	2500      	movs	r5, #0
    4420:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4424:	884a      	ldrh	r2, [r1, #2]
    4426:	6818      	ldr	r0, [r3, #0]
    4428:	f009 f8fc 	bl	d624 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    442c:	6821      	ldr	r1, [r4, #0]
    442e:	2000      	movs	r0, #0
    4430:	7a0a      	ldrb	r2, [r1, #8]
    4432:	e00c      	b.n	444e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4434:	21c8      	movs	r1, #200	; 0xc8
    4436:	2018      	movs	r0, #24
    4438:	f7ff fc5c 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    443c:	f243 0002 	movw	r0, #12290	; 0x3002
    4440:	bd70      	pop	{r4, r5, r6, pc}
    4442:	684b      	ldr	r3, [r1, #4]
    4444:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4448:	b933      	cbnz	r3, 4458 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    444a:	1c40      	adds	r0, r0, #1
    444c:	b2c0      	uxtb	r0, r0
    444e:	4282      	cmp	r2, r0
    4450:	d8f7      	bhi.n	4442 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4452:	6808      	ldr	r0, [r1, #0]
    4454:	f009 f8db 	bl	d60e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4458:	2000      	movs	r0, #0
    445a:	bd70      	pop	{r4, r5, r6, pc}
    445c:	20000078 	.word	0x20000078

00004460 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4464:	460d      	mov	r5, r1
    4466:	0004      	movs	r4, r0
    4468:	4690      	mov	r8, r2
    446a:	f04f 0600 	mov.w	r6, #0
    446e:	d009      	beq.n	4484 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4470:	2700      	movs	r7, #0
    4472:	1ce0      	adds	r0, r4, #3
    4474:	f020 0003 	bic.w	r0, r0, #3
    4478:	42a0      	cmp	r0, r4
    447a:	d005      	beq.n	4488 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    447c:	2186      	movs	r1, #134	; 0x86
    447e:	2018      	movs	r0, #24
    4480:	f7ff fc38 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4484:	2701      	movs	r7, #1
    4486:	e7f4      	b.n	4472 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4488:	b1cd      	cbz	r5, 44be <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    448a:	4611      	mov	r1, r2
    448c:	2000      	movs	r0, #0
    448e:	f009 f8a8 	bl	d5e2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4492:	300c      	adds	r0, #12
    4494:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4498:	b98f      	cbnz	r7, 44be <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    449a:	4f0a      	ldr	r7, [pc, #40]	; (44c4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    449c:	f104 000c 	add.w	r0, r4, #12
    44a0:	00aa      	lsls	r2, r5, #2
    44a2:	603c      	str	r4, [r7, #0]
    44a4:	7225      	strb	r5, [r4, #8]
    44a6:	6060      	str	r0, [r4, #4]
    44a8:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    44ac:	6020      	str	r0, [r4, #0]
    44ae:	2100      	movs	r1, #0
    44b0:	6860      	ldr	r0, [r4, #4]
    44b2:	f008 f8a1 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    44b6:	4641      	mov	r1, r8
    44b8:	6838      	ldr	r0, [r7, #0]
    44ba:	f009 f892 	bl	d5e2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    44be:	4630      	mov	r0, r6
    44c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44c4:	20000078 	.word	0x20000078

000044c8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    44c8:	b570      	push	{r4, r5, r6, lr}
    44ca:	4d08      	ldr	r5, [pc, #32]	; (44ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    44cc:	6828      	ldr	r0, [r5, #0]
    44ce:	2800      	cmp	r0, #0
    44d0:	d00a      	beq.n	44e8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    44d2:	2400      	movs	r4, #0
    44d4:	e004      	b.n	44e0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    44d6:	4620      	mov	r0, r4
    44d8:	f7ff ff96 	bl	4408 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    44dc:	1c64      	adds	r4, r4, #1
    44de:	b2e4      	uxtb	r4, r4
    44e0:	6828      	ldr	r0, [r5, #0]
    44e2:	7a00      	ldrb	r0, [r0, #8]
    44e4:	42a0      	cmp	r0, r4
    44e6:	d8f6      	bhi.n	44d6 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    44e8:	bd70      	pop	{r4, r5, r6, pc}
    44ea:	0000      	.short	0x0000
    44ec:	20000078 	.word	0x20000078

000044f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    44f0:	4909      	ldr	r1, [pc, #36]	; (4518 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    44f2:	b510      	push	{r4, lr}
    44f4:	4602      	mov	r2, r0
    44f6:	6809      	ldr	r1, [r1, #0]
    44f8:	2000      	movs	r0, #0
    44fa:	b149      	cbz	r1, 4510 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    44fc:	7a0b      	ldrb	r3, [r1, #8]
    44fe:	4293      	cmp	r3, r2
    4500:	d905      	bls.n	450e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4502:	6849      	ldr	r1, [r1, #4]
    4504:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4508:	2900      	cmp	r1, #0
    450a:	d000      	beq.n	450e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    450c:	1d08      	adds	r0, r1, #4
    450e:	bd10      	pop	{r4, pc}
    4510:	21ee      	movs	r1, #238	; 0xee
    4512:	2018      	movs	r0, #24
    4514:	f7ff fbee 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4518:	20000078 	.word	0x20000078

0000451c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    451c:	490a      	ldr	r1, [pc, #40]	; (4548 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    451e:	b510      	push	{r4, lr}
    4520:	4602      	mov	r2, r0
    4522:	6809      	ldr	r1, [r1, #0]
    4524:	2000      	movs	r0, #0
    4526:	b159      	cbz	r1, 4540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4528:	7a0b      	ldrb	r3, [r1, #8]
    452a:	4293      	cmp	r3, r2
    452c:	d907      	bls.n	453e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    452e:	6849      	ldr	r1, [r1, #4]
    4530:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4534:	2900      	cmp	r1, #0
    4536:	d002      	beq.n	453e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4538:	f831 0b04 	ldrh.w	r0, [r1], #4
    453c:	4408      	add	r0, r1
    453e:	bd10      	pop	{r4, pc}
    4540:	21fc      	movs	r1, #252	; 0xfc
    4542:	2018      	movs	r0, #24
    4544:	f7ff fbd6 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4548:	20000078 	.word	0x20000078

0000454c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    454c:	4801      	ldr	r0, [pc, #4]	; (4554 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    454e:	7840      	ldrb	r0, [r0, #1]
    4550:	4770      	bx	lr
    4552:	0000      	.short	0x0000
    4554:	2000007c 	.word	0x2000007c

00004558 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    4558:	4801      	ldr	r0, [pc, #4]	; (4560 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    455a:	6840      	ldr	r0, [r0, #4]
    455c:	4770      	bx	lr
    455e:	0000      	.short	0x0000
    4560:	2000007c 	.word	0x2000007c

00004564 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    4564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4568:	460c      	mov	r4, r1
    456a:	4607      	mov	r7, r0
    456c:	4616      	mov	r6, r2
    456e:	211c      	movs	r1, #28
    4570:	4610      	mov	r0, r2
    4572:	460d      	mov	r5, r1
    4574:	4622      	mov	r2, r4
    4576:	f008 ffc2 	bl	d4fe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    457a:	4680      	mov	r8, r0
    457c:	b157      	cbz	r7, 4594 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    457e:	4638      	mov	r0, r7
    4580:	4641      	mov	r1, r8
    4582:	4632      	mov	r2, r6
    4584:	462b      	mov	r3, r5
    4586:	9400      	str	r4, [sp, #0]
    4588:	f008 ff5e 	bl	d448 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    458c:	4803      	ldr	r0, [pc, #12]	; (459c <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    458e:	6047      	str	r7, [r0, #4]
    4590:	7004      	strb	r4, [r0, #0]
    4592:	7046      	strb	r6, [r0, #1]
    4594:	4640      	mov	r0, r8
    4596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    459a:	0000      	.short	0x0000
    459c:	2000007c 	.word	0x2000007c

000045a0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    45a0:	4802      	ldr	r0, [pc, #8]	; (45ac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    45a2:	7842      	ldrb	r2, [r0, #1]
    45a4:	7801      	ldrb	r1, [r0, #0]
    45a6:	6840      	ldr	r0, [r0, #4]
    45a8:	f7ff bfdc 	b.w	4564 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    45ac:	2000007c 	.word	0x2000007c
    45b0:	4909      	ldr	r1, [pc, #36]	; (45d8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x38>)
    45b2:	b510      	push	{r4, lr}
    45b4:	4807      	ldr	r0, [pc, #28]	; (45d4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x34>)
    45b6:	6008      	str	r0, [r1, #0]
    45b8:	4b08      	ldr	r3, [pc, #32]	; (45dc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x3c>)
    45ba:	2011      	movs	r0, #17
    45bc:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    45c0:	2200      	movs	r2, #0
    45c2:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    45c6:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    45ca:	1c40      	adds	r0, r0, #1
    45cc:	b2c0      	uxtb	r0, r0
    45ce:	2814      	cmp	r0, #20
    45d0:	d3f4      	bcc.n	45bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x1c>
    45d2:	bd10      	pop	{r4, pc}
    45d4:	fffe0000 	.word	0xfffe0000
    45d8:	4001f508 	.word	0x4001f508
    45dc:	4001f000 	.word	0x4001f000
    45e0:	b570      	push	{r4, r5, r6, lr}
    45e2:	2420      	movs	r4, #32
    45e4:	2100      	movs	r1, #0
    45e6:	2301      	movs	r3, #1
    45e8:	fa20 f201 	lsr.w	r2, r0, r1
    45ec:	07d2      	lsls	r2, r2, #31
    45ee:	d020      	beq.n	4632 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    45f0:	b24a      	sxtb	r2, r1
    45f2:	2a00      	cmp	r2, #0
    45f4:	db10      	blt.n	4618 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x78>
    45f6:	bf00      	nop
    45f8:	ea4f 1652 	mov.w	r6, r2, lsr #5
    45fc:	ea4f 0686 	mov.w	r6, r6, lsl #2
    4600:	f002 051f 	and.w	r5, r2, #31
    4604:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    4608:	fa03 f505 	lsl.w	r5, r3, r5
    460c:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    4610:	f3bf 8f4f 	dsb	sy
    4614:	f3bf 8f6f 	isb	sy
    4618:	db0b      	blt.n	4632 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    461a:	f002 051f 	and.w	r5, r2, #31
    461e:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4622:	ea4f 0282 	mov.w	r2, r2, lsl #2
    4626:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    462a:	fa03 f505 	lsl.w	r5, r3, r5
    462e:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    4632:	f101 0101 	add.w	r1, r1, #1
    4636:	42a1      	cmp	r1, r4
    4638:	d3d6      	bcc.n	45e8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>
    463a:	bd70      	pop	{r4, r5, r6, pc}
    463c:	b570      	push	{r4, r5, r6, lr}
    463e:	0042      	lsls	r2, r0, #1
    4640:	f04f 0100 	mov.w	r1, #0
    4644:	d501      	bpl.n	464a <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xaa>
    4646:	4a14      	ldr	r2, [pc, #80]	; (4698 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xf8>)
    4648:	6011      	str	r1, [r2, #0]
    464a:	f3c0 3280 	ubfx	r2, r0, #14, #1
    464e:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    4652:	429a      	cmp	r2, r3
    4654:	d003      	beq.n	465e <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xbe>
    4656:	2166      	movs	r1, #102	; 0x66
    4658:	201b      	movs	r0, #27
    465a:	f7ff fb4b 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    465e:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    4662:	d014      	beq.n	468e <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xee>
    4664:	4a0d      	ldr	r2, [pc, #52]	; (469c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xfc>)
    4666:	2001      	movs	r0, #1
    4668:	6050      	str	r0, [r2, #4]
    466a:	1e83      	subs	r3, r0, #2
    466c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4670:	4a0b      	ldr	r2, [pc, #44]	; (46a0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x100>)
    4672:	6090      	str	r0, [r2, #8]
    4674:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4678:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    467c:	4c09      	ldr	r4, [pc, #36]	; (46a4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x104>)
    467e:	6021      	str	r1, [r4, #0]
    4680:	1d25      	adds	r5, r4, #4
    4682:	6028      	str	r0, [r5, #0]
    4684:	6090      	str	r0, [r2, #8]
    4686:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    468a:	6021      	str	r1, [r4, #0]
    468c:	6028      	str	r0, [r5, #0]
    468e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4692:	f7ff bf8d 	b.w	45b0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    4696:	0000      	.short	0x0000
    4698:	4001e504 	.word	0x4001e504
    469c:	4000e000 	.word	0x4000e000
    46a0:	4000f000 	.word	0x4000f000
    46a4:	4000f500 	.word	0x4000f500

000046a8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    46a8:	b570      	push	{r4, r5, r6, lr}
    46aa:	4c0a      	ldr	r4, [pc, #40]	; (46d4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    46ac:	460d      	mov	r5, r1
    46ae:	6020      	str	r0, [r4, #0]
    46b0:	f7ff ffc4 	bl	463c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x9c>
    46b4:	6820      	ldr	r0, [r4, #0]
    46b6:	f7ff ff93 	bl	45e0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x40>
    46ba:	f000 f877 	bl	47ac <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    46be:	f7ff ff77 	bl	45b0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    46c2:	f009 f80f 	bl	d6e4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    46c6:	4628      	mov	r0, r5
    46c8:	f000 f8aa 	bl	4820 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    46cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    46d0:	f000 b8c2 	b.w	4858 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    46d4:	20000084 	.word	0x20000084

000046d8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    46d8:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    46dc:	4e2f      	ldr	r6, [pc, #188]	; (479c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    46de:	4683      	mov	fp, r0
    46e0:	6830      	ldr	r0, [r6, #0]
    46e2:	9001      	str	r0, [sp, #4]
    46e4:	2701      	movs	r7, #1
    46e6:	482e      	ldr	r0, [pc, #184]	; (47a0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    46e8:	f007 fe63 	bl	c3b2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    46ec:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 47a0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    46f0:	b920      	cbnz	r0, 46fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    46f2:	2700      	movs	r7, #0
    46f4:	f108 0001 	add.w	r0, r8, #1
    46f8:	f007 fe72 	bl	c3e0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    46fc:	4c29      	ldr	r4, [pc, #164]	; (47a4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    46fe:	2500      	movs	r5, #0
    4700:	f04f 0903 	mov.w	r9, #3
    4704:	2001      	movs	r0, #1
    4706:	6060      	str	r0, [r4, #4]
    4708:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    470c:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    4710:	f8c6 b000 	str.w	fp, [r6]
    4714:	6020      	str	r0, [r4, #0]
    4716:	f8df a090 	ldr.w	sl, [pc, #144]	; 47a8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    471a:	e017      	b.n	474c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    471c:	f8da 0000 	ldr.w	r0, [sl]
    4720:	06c0      	lsls	r0, r0, #27
    4722:	d513      	bpl.n	474c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4724:	200e      	movs	r0, #14
    4726:	f008 ffce 	bl	d6c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    472a:	f3ef 8010 	mrs	r0, PRIMASK
    472e:	9000      	str	r0, [sp, #0]
    4730:	b672      	cpsid	i
    4732:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    4736:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    473a:	b920      	cbnz	r0, 4746 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    473c:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4740:	b908      	cbnz	r0, 4746 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4742:	f7ff f921 	bl	3988 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4746:	9800      	ldr	r0, [sp, #0]
    4748:	b900      	cbnz	r0, 474c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    474a:	b662      	cpsie	i
    474c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4750:	b918      	cbnz	r0, 475a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4752:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4756:	2800      	cmp	r0, #0
    4758:	d0e0      	beq.n	471c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    475a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    475e:	2800      	cmp	r0, #0
    4760:	d1d0      	bne.n	4704 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    4762:	b137      	cbz	r7, 4772 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    4764:	9801      	ldr	r0, [sp, #4]
    4766:	6030      	str	r0, [r6, #0]
    4768:	f108 0001 	add.w	r0, r8, #1
    476c:	f007 fe21 	bl	c3b2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4770:	e011      	b.n	4796 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    4772:	f108 0001 	add.w	r0, r8, #1
    4776:	f007 fe1c 	bl	c3b2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    477a:	2800      	cmp	r0, #0
    477c:	d1ba      	bne.n	46f4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    477e:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    4782:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    4786:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    478a:	200e      	movs	r0, #14
    478c:	f008 ff9b 	bl	d6c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4790:	4803      	ldr	r0, [pc, #12]	; (47a0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    4792:	f007 fe25 	bl	c3e0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4796:	2000      	movs	r0, #0
    4798:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    479c:	4000e504 	.word	0x4000e504
    47a0:	2000027f 	.word	0x2000027f
    47a4:	4000e000 	.word	0x4000e000
    47a8:	e000ed10 	.word	0xe000ed10

000047ac <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    47ac:	b510      	push	{r4, lr}
    47ae:	4808      	ldr	r0, [pc, #32]	; (47d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    47b0:	f007 fe12 	bl	c3d8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    47b4:	b108      	cbz	r0, 47ba <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    47b6:	2124      	movs	r1, #36	; 0x24
    47b8:	e006      	b.n	47c8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    47ba:	4805      	ldr	r0, [pc, #20]	; (47d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    47bc:	1c40      	adds	r0, r0, #1
    47be:	f007 fe0b 	bl	c3d8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    47c2:	2800      	cmp	r0, #0
    47c4:	d003      	beq.n	47ce <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    47c6:	2128      	movs	r1, #40	; 0x28
    47c8:	201d      	movs	r0, #29
    47ca:	f7ff fa93 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47ce:	bd10      	pop	{r4, pc}
    47d0:	2000027f 	.word	0x2000027f

000047d4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    47d4:	b570      	push	{r4, r5, r6, lr}
    47d6:	4911      	ldr	r1, [pc, #68]	; (481c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    47d8:	680a      	ldr	r2, [r1, #0]
    47da:	b1ea      	cbz	r2, 4818 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    47dc:	2300      	movs	r3, #0
    47de:	461d      	mov	r5, r3
    47e0:	2401      	movs	r4, #1
    47e2:	684a      	ldr	r2, [r1, #4]
    47e4:	1c52      	adds	r2, r2, #1
    47e6:	604a      	str	r2, [r1, #4]
    47e8:	2a0c      	cmp	r2, #12
    47ea:	d300      	bcc.n	47ee <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    47ec:	604d      	str	r5, [r1, #4]
    47ee:	790e      	ldrb	r6, [r1, #4]
    47f0:	fa04 f206 	lsl.w	r2, r4, r6
    47f4:	680e      	ldr	r6, [r1, #0]
    47f6:	4216      	tst	r6, r2
    47f8:	d00b      	beq.n	4812 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    47fa:	f3ef 8310 	mrs	r3, PRIMASK
    47fe:	b672      	cpsid	i
    4800:	680c      	ldr	r4, [r1, #0]
    4802:	4394      	bics	r4, r2
    4804:	600c      	str	r4, [r1, #0]
    4806:	b903      	cbnz	r3, 480a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4808:	b662      	cpsie	i
    480a:	6849      	ldr	r1, [r1, #4]
    480c:	6001      	str	r1, [r0, #0]
    480e:	2000      	movs	r0, #0
    4810:	bd70      	pop	{r4, r5, r6, pc}
    4812:	1c5b      	adds	r3, r3, #1
    4814:	2b0c      	cmp	r3, #12
    4816:	d3e4      	bcc.n	47e2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4818:	2005      	movs	r0, #5
    481a:	bd70      	pop	{r4, r5, r6, pc}
    481c:	20000088 	.word	0x20000088

00004820 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4820:	4802      	ldr	r0, [pc, #8]	; (482c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    4822:	2100      	movs	r1, #0
    4824:	6001      	str	r1, [r0, #0]
    4826:	6041      	str	r1, [r0, #4]
    4828:	4770      	bx	lr
    482a:	0000      	.short	0x0000
    482c:	20000088 	.word	0x20000088

00004830 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4830:	b510      	push	{r4, lr}
    4832:	4c08      	ldr	r4, [pc, #32]	; (4854 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4834:	7861      	ldrb	r1, [r4, #1]
    4836:	b109      	cbz	r1, 483c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4838:	200f      	movs	r0, #15
    483a:	bd10      	pop	{r4, pc}
    483c:	f7ff f830 	bl	38a0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4840:	7020      	strb	r0, [r4, #0]
    4842:	28ff      	cmp	r0, #255	; 0xff
    4844:	d001      	beq.n	484a <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4846:	2000      	movs	r0, #0
    4848:	bd10      	pop	{r4, pc}
    484a:	2176      	movs	r1, #118	; 0x76
    484c:	201f      	movs	r0, #31
    484e:	f7ff fa51 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4852:	0000      	.short	0x0000
    4854:	20000090 	.word	0x20000090

00004858 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4858:	4901      	ldr	r1, [pc, #4]	; (4860 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    485a:	2000      	movs	r0, #0
    485c:	7048      	strb	r0, [r1, #1]
    485e:	4770      	bx	lr
    4860:	20000090 	.word	0x20000090

00004864 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4864:	4806      	ldr	r0, [pc, #24]	; (4880 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    4866:	4a07      	ldr	r2, [pc, #28]	; (4884 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4868:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    486a:	8852      	ldrh	r2, [r2, #2]
    486c:	4291      	cmp	r1, r2
    486e:	d104      	bne.n	487a <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4870:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4874:	b108      	cbz	r0, 487a <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4876:	2000      	movs	r0, #0
    4878:	4770      	bx	lr
    487a:	2001      	movs	r0, #1
    487c:	4770      	bx	lr
    487e:	0000      	.short	0x0000
    4880:	2000103c 	.word	0x2000103c
    4884:	2000026c 	.word	0x2000026c

00004888 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4888:	4901      	ldr	r1, [pc, #4]	; (4890 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    488a:	8048      	strh	r0, [r1, #2]
    488c:	4770      	bx	lr
    488e:	0000      	.short	0x0000
    4890:	2000026c 	.word	0x2000026c

00004894 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4894:	4808      	ldr	r0, [pc, #32]	; (48b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    4896:	4a09      	ldr	r2, [pc, #36]	; (48bc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4898:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    489a:	8852      	ldrh	r2, [r2, #2]
    489c:	4291      	cmp	r1, r2
    489e:	d109      	bne.n	48b4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    48a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    48a4:	8481      	strh	r1, [r0, #36]	; 0x24
    48a6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    48aa:	b119      	cbz	r1, 48b4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    48ac:	2100      	movs	r1, #0
    48ae:	7001      	strb	r1, [r0, #0]
    48b0:	2001      	movs	r0, #1
    48b2:	4770      	bx	lr
    48b4:	2000      	movs	r0, #0
    48b6:	4770      	bx	lr
    48b8:	2000103c 	.word	0x2000103c
    48bc:	2000026c 	.word	0x2000026c

000048c0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    48c0:	4807      	ldr	r0, [pc, #28]	; (48e0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    48c2:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    48c6:	2901      	cmp	r1, #1
    48c8:	d007      	beq.n	48da <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    48ca:	2101      	movs	r1, #1
    48cc:	7001      	strb	r1, [r0, #0]
    48ce:	4805      	ldr	r0, [pc, #20]	; (48e4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    48d0:	4903      	ldr	r1, [pc, #12]	; (48e0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    48d2:	8800      	ldrh	r0, [r0, #0]
    48d4:	8488      	strh	r0, [r1, #36]	; 0x24
    48d6:	2001      	movs	r0, #1
    48d8:	4770      	bx	lr
    48da:	2000      	movs	r0, #0
    48dc:	4770      	bx	lr
    48de:	0000      	.short	0x0000
    48e0:	2000103c 	.word	0x2000103c
    48e4:	2000026c 	.word	0x2000026c

000048e8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    48e8:	4906      	ldr	r1, [pc, #24]	; (4904 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    48ea:	4b07      	ldr	r3, [pc, #28]	; (4908 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    48ec:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    48ee:	885b      	ldrh	r3, [r3, #2]
    48f0:	429a      	cmp	r2, r3
    48f2:	d105      	bne.n	4900 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    48f4:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    48f8:	b112      	cbz	r2, 4900 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    48fa:	6001      	str	r1, [r0, #0]
    48fc:	2001      	movs	r0, #1
    48fe:	4770      	bx	lr
    4900:	2000      	movs	r0, #0
    4902:	4770      	bx	lr
    4904:	2000103c 	.word	0x2000103c
    4908:	2000026c 	.word	0x2000026c

0000490c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    490c:	4909      	ldr	r1, [pc, #36]	; (4934 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    490e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4910:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4914:	3bff      	subs	r3, #255	; 0xff
    4916:	d002      	beq.n	491e <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    4918:	2100      	movs	r1, #0
    491a:	6001      	str	r1, [r0, #0]
    491c:	e007      	b.n	492e <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    491e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4922:	4904      	ldr	r1, [pc, #16]	; (4934 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4924:	2a01      	cmp	r2, #1
    4926:	d002      	beq.n	492e <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4928:	6001      	str	r1, [r0, #0]
    492a:	2001      	movs	r0, #1
    492c:	4770      	bx	lr
    492e:	2000      	movs	r0, #0
    4930:	4770      	bx	lr
    4932:	0000      	.short	0x0000
    4934:	2000103c 	.word	0x2000103c

00004938 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4938:	4901      	ldr	r1, [pc, #4]	; (4940 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    493a:	8008      	strh	r0, [r1, #0]
    493c:	4770      	bx	lr
    493e:	0000      	.short	0x0000
    4940:	2000026c 	.word	0x2000026c

00004944 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4944:	4905      	ldr	r1, [pc, #20]	; (495c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    4946:	2000      	movs	r0, #0
    4948:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    494c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4950:	8488      	strh	r0, [r1, #36]	; 0x24
    4952:	4903      	ldr	r1, [pc, #12]	; (4960 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4954:	8008      	strh	r0, [r1, #0]
    4956:	8048      	strh	r0, [r1, #2]
    4958:	4770      	bx	lr
    495a:	0000      	.short	0x0000
    495c:	2000103c 	.word	0x2000103c
    4960:	2000026c 	.word	0x2000026c
    4964:	4905      	ldr	r1, [pc, #20]	; (497c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4966:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4968:	4282      	cmp	r2, r0
    496a:	d105      	bne.n	4978 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    496c:	2000      	movs	r0, #0
    496e:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4972:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4976:	8488      	strh	r0, [r1, #36]	; 0x24
    4978:	4770      	bx	lr
    497a:	0000      	.short	0x0000
    497c:	2000103c 	.word	0x2000103c

00004980 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4980:	4a0a      	ldr	r2, [pc, #40]	; (49ac <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4982:	b110      	cbz	r0, 498a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4984:	2801      	cmp	r0, #1
    4986:	d007      	beq.n	4998 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4988:	e00e      	b.n	49a8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    498a:	7850      	ldrb	r0, [r2, #1]
    498c:	b160      	cbz	r0, 49a8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    498e:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4992:	6008      	str	r0, [r1, #0]
    4994:	88d0      	ldrh	r0, [r2, #6]
    4996:	e004      	b.n	49a2 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4998:	7810      	ldrb	r0, [r2, #0]
    499a:	b128      	cbz	r0, 49a8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    499c:	6890      	ldr	r0, [r2, #8]
    499e:	6008      	str	r0, [r1, #0]
    49a0:	8990      	ldrh	r0, [r2, #12]
    49a2:	8088      	strh	r0, [r1, #4]
    49a4:	2001      	movs	r0, #1
    49a6:	4770      	bx	lr
    49a8:	2000      	movs	r0, #0
    49aa:	4770      	bx	lr
    49ac:	20000281 	.word	0x20000281

000049b0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    49b0:	4a08      	ldr	r2, [pc, #32]	; (49d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    49b2:	2301      	movs	r3, #1
    49b4:	b138      	cbz	r0, 49c6 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    49b6:	2801      	cmp	r0, #1
    49b8:	d104      	bne.n	49c4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    49ba:	7013      	strb	r3, [r2, #0]
    49bc:	6808      	ldr	r0, [r1, #0]
    49be:	6090      	str	r0, [r2, #8]
    49c0:	8888      	ldrh	r0, [r1, #4]
    49c2:	8190      	strh	r0, [r2, #12]
    49c4:	4770      	bx	lr
    49c6:	7053      	strb	r3, [r2, #1]
    49c8:	6808      	ldr	r0, [r1, #0]
    49ca:	f8c2 0002 	str.w	r0, [r2, #2]
    49ce:	8888      	ldrh	r0, [r1, #4]
    49d0:	80d0      	strh	r0, [r2, #6]
    49d2:	4770      	bx	lr
    49d4:	20000281 	.word	0x20000281

000049d8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    49d8:	4906      	ldr	r1, [pc, #24]	; (49f4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    49da:	b110      	cbz	r0, 49e2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    49dc:	2801      	cmp	r0, #1
    49de:	d002      	beq.n	49e6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    49e0:	e005      	b.n	49ee <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    49e2:	7848      	ldrb	r0, [r1, #1]
    49e4:	e000      	b.n	49e8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    49e6:	7808      	ldrb	r0, [r1, #0]
    49e8:	b108      	cbz	r0, 49ee <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    49ea:	2001      	movs	r0, #1
    49ec:	4770      	bx	lr
    49ee:	2000      	movs	r0, #0
    49f0:	4770      	bx	lr
    49f2:	0000      	.short	0x0000
    49f4:	20000281 	.word	0x20000281

000049f8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    49f8:	4901      	ldr	r1, [pc, #4]	; (4a00 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    49fa:	7448      	strb	r0, [r1, #17]
    49fc:	4770      	bx	lr
    49fe:	0000      	.short	0x0000
    4a00:	2000089a 	.word	0x2000089a

00004a04 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4a04:	b578      	push	{r3, r4, r5, r6, lr}
    4a06:	4913      	ldr	r1, [pc, #76]	; (4a54 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    4a08:	7c4a      	ldrb	r2, [r1, #17]
    4a0a:	b30a      	cbz	r2, 4a50 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4a0c:	7c0a      	ldrb	r2, [r1, #16]
    4a0e:	f88d 2000 	strb.w	r2, [sp]
    4a12:	9a00      	ldr	r2, [sp, #0]
    4a14:	9200      	str	r2, [sp, #0]
    4a16:	f89d 2000 	ldrb.w	r2, [sp]
    4a1a:	b1ca      	cbz	r2, 4a50 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4a1c:	2300      	movs	r3, #0
    4a1e:	f101 0210 	add.w	r2, r1, #16
    4a22:	241f      	movs	r4, #31
    4a24:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    4a28:	7c0e      	ldrb	r6, [r1, #16]
    4a2a:	f88d 6000 	strb.w	r6, [sp]
    4a2e:	9e00      	ldr	r6, [sp, #0]
    4a30:	9600      	str	r6, [sp, #0]
    4a32:	f89d 6000 	ldrb.w	r6, [sp]
    4a36:	b14e      	cbz	r6, 4a4c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    4a38:	7013      	strb	r3, [r2, #0]
    4a3a:	7043      	strb	r3, [r0, #1]
    4a3c:	7004      	strb	r4, [r0, #0]
    4a3e:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4a42:	6046      	str	r6, [r0, #4]
    4a44:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4a48:	6086      	str	r6, [r0, #8]
    4a4a:	e7ed      	b.n	4a28 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4a4c:	2001      	movs	r0, #1
    4a4e:	bd78      	pop	{r3, r4, r5, r6, pc}
    4a50:	2000      	movs	r0, #0
    4a52:	bd78      	pop	{r3, r4, r5, r6, pc}
    4a54:	2000089a 	.word	0x2000089a

00004a58 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4a58:	b510      	push	{r4, lr}
    4a5a:	4604      	mov	r4, r0
    4a5c:	f000 f966 	bl	4d2c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4a60:	b118      	cbz	r0, 4a6a <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    4a62:	21bd      	movs	r1, #189	; 0xbd
    4a64:	2027      	movs	r0, #39	; 0x27
    4a66:	f7ff f945 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a6a:	4803      	ldr	r0, [pc, #12]	; (4a78 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    4a6c:	2101      	movs	r1, #1
    4a6e:	f009 fa13 	bl	de98 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4a72:	4802      	ldr	r0, [pc, #8]	; (4a7c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4a74:	62c4      	str	r4, [r0, #44]	; 0x2c
    4a76:	bd10      	pop	{r4, pc}
    4a78:	20000878 	.word	0x20000878
    4a7c:	200000ac 	.word	0x200000ac

00004a80 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4a80:	4901      	ldr	r1, [pc, #4]	; (4a88 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4a82:	2001      	movs	r0, #1
    4a84:	7188      	strb	r0, [r1, #6]
    4a86:	4770      	bx	lr
    4a88:	200000ac 	.word	0x200000ac

00004a8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4a8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a90:	4d6b      	ldr	r5, [pc, #428]	; (4c40 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b4>)
    4a92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4a94:	782e      	ldrb	r6, [r5, #0]
    4a96:	bbee      	cbnz	r6, 4b14 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4a98:	b3e2      	cbz	r2, 4b14 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4a9a:	b3db      	cbz	r3, 4b14 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4a9c:	b3d4      	cbz	r4, 4b14 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4a9e:	f105 0614 	add.w	r6, r5, #20
    4aa2:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4aa6:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    4aaa:	2700      	movs	r7, #0
    4aac:	71af      	strb	r7, [r5, #6]
    4aae:	716f      	strb	r7, [r5, #5]
    4ab0:	70ef      	strb	r7, [r5, #3]
    4ab2:	70af      	strb	r7, [r5, #2]
    4ab4:	712f      	strb	r7, [r5, #4]
    4ab6:	81af      	strh	r7, [r5, #12]
    4ab8:	81ef      	strh	r7, [r5, #14]
    4aba:	f000 f97b 	bl	4db4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4abe:	4606      	mov	r6, r0
    4ac0:	f000 f972 	bl	4da8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4ac4:	4604      	mov	r4, r0
    4ac6:	f006 feb5 	bl	b834 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4aca:	f006 fba5 	bl	b218 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4ace:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    4ad2:	f006 ff39 	bl	b948 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4ad6:	f104 0018 	add.w	r0, r4, #24
    4ada:	f007 f80f 	bl	bafc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4ade:	6920      	ldr	r0, [r4, #16]
    4ae0:	f007 f802 	bl	bae8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4ae4:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    4ae8:	f007 f822 	bl	bb30 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4aec:	f04f 0b01 	mov.w	fp, #1
    4af0:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    4af4:	2000      	movs	r0, #0
    4af6:	f006 fd69 	bl	b5cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4afa:	2800      	cmp	r0, #0
    4afc:	d07e      	beq.n	4bfc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>
    4afe:	4851      	ldr	r0, [pc, #324]	; (4c44 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b8>)
    4b00:	f006 fdd8 	bl	b6b4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4b04:	8820      	ldrh	r0, [r4, #0]
    4b06:	f7ff fd09 	bl	451c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4b0a:	6328      	str	r0, [r5, #48]	; 0x30
    4b0c:	8820      	ldrh	r0, [r4, #0]
    4b0e:	f7ff fcef 	bl	44f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4b12:	e000      	b.n	4b16 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    4b14:	e00a      	b.n	4b2c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa0>
    4b16:	6368      	str	r0, [r5, #52]	; 0x34
    4b18:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    4b1c:	f88d 0000 	strb.w	r0, [sp]
    4b20:	9800      	ldr	r0, [sp, #0]
    4b22:	9000      	str	r0, [sp, #0]
    4b24:	f89d 0000 	ldrb.w	r0, [sp]
    4b28:	b118      	cbz	r0, 4b32 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa6>
    4b2a:	e012      	b.n	4b52 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4b2c:	f44f 718a 	mov.w	r1, #276	; 0x114
    4b30:	e082      	b.n	4c38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>
    4b32:	6f20      	ldr	r0, [r4, #112]	; 0x70
    4b34:	b168      	cbz	r0, 4b52 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4b36:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    4b38:	88b1      	ldrh	r1, [r6, #4]
    4b3a:	4288      	cmp	r0, r1
    4b3c:	d109      	bne.n	4b52 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4b3e:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    4b42:	2201      	movs	r2, #1
    4b44:	4408      	add	r0, r1
    4b46:	8670      	strh	r0, [r6, #50]	; 0x32
    4b48:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    4b4c:	6f21      	ldr	r1, [r4, #112]	; 0x70
    4b4e:	f7fd fdad 	bl	26ac <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4b52:	f106 0168 	add.w	r1, r6, #104	; 0x68
    4b56:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 4c48 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>
    4b5a:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4b5e:	f109 0808 	add.w	r8, r9, #8
    4b62:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4b66:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    4b68:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    4b6c:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    4b6e:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    4b72:	f000 f98d 	bl	4e90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>
    4b76:	4601      	mov	r1, r0
    4b78:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    4b7a:	46ba      	mov	sl, r7
    4b7c:	f008 ff77 	bl	da6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4b80:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    4b82:	4281      	cmp	r1, r0
    4b84:	d200      	bcs.n	4b88 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    4b86:	4608      	mov	r0, r1
    4b88:	7228      	strb	r0, [r5, #8]
    4b8a:	46a8      	mov	r8, r5
    4b8c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4b90:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    4b92:	7cf7      	ldrb	r7, [r6, #19]
    4b94:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    4b96:	2908      	cmp	r1, #8
    4b98:	d100      	bne.n	4b9c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    4b9a:	2104      	movs	r1, #4
    4b9c:	f008 ff67 	bl	da6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4ba0:	b90f      	cbnz	r7, 4ba6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11a>
    4ba2:	1d00      	adds	r0, r0, #4
    4ba4:	b280      	uxth	r0, r0
    4ba6:	4285      	cmp	r5, r0
    4ba8:	d200      	bcs.n	4bac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    4baa:	4628      	mov	r0, r5
    4bac:	b2c0      	uxtb	r0, r0
    4bae:	f888 0009 	strb.w	r0, [r8, #9]
    4bb2:	7cf2      	ldrb	r2, [r6, #19]
    4bb4:	b102      	cbz	r2, 4bb8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12c>
    4bb6:	2204      	movs	r2, #4
    4bb8:	4410      	add	r0, r2
    4bba:	b2c0      	uxtb	r0, r0
    4bbc:	f888 0007 	strb.w	r0, [r8, #7]
    4bc0:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    4bc4:	1d09      	adds	r1, r1, #4
    4bc6:	4281      	cmp	r1, r0
    4bc8:	d202      	bcs.n	4bd0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x144>
    4bca:	f240 119f 	movw	r1, #415	; 0x19f
    4bce:	e033      	b.n	4c38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>
    4bd0:	7cb0      	ldrb	r0, [r6, #18]
    4bd2:	b1b0      	cbz	r0, 4c02 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    4bd4:	481c      	ldr	r0, [pc, #112]	; (4c48 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    4bd6:	3008      	adds	r0, #8
    4bd8:	f880 b018 	strb.w	fp, [r0, #24]
    4bdc:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    4be0:	e9c0 1204 	strd	r1, r2, [r0, #16]
    4be4:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4be8:	f008 fe06 	bl	d7f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4bec:	4916      	ldr	r1, [pc, #88]	; (4c48 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    4bee:	4603      	mov	r3, r0
    4bf0:	22fb      	movs	r2, #251	; 0xfb
    4bf2:	3108      	adds	r1, #8
    4bf4:	2000      	movs	r0, #0
    4bf6:	f006 fb59 	bl	b2ac <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    4bfa:	e000      	b.n	4bfe <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    4bfc:	e018      	b.n	4c30 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>
    4bfe:	f006 fb8b 	bl	b318 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    4c02:	2001      	movs	r0, #1
    4c04:	f000 fb94 	bl	5330 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    4c08:	4810      	ldr	r0, [pc, #64]	; (4c4c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1c0>)
    4c0a:	6800      	ldr	r0, [r0, #0]
    4c0c:	2803      	cmp	r0, #3
    4c0e:	d011      	beq.n	4c34 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    4c10:	280b      	cmp	r0, #11
    4c12:	d00f      	beq.n	4c34 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    4c14:	4648      	mov	r0, r9
    4c16:	f840 af52 	str.w	sl, [r0, #82]!
    4c1a:	f8c0 a004 	str.w	sl, [r0, #4]
    4c1e:	480a      	ldr	r0, [pc, #40]	; (4c48 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    4c20:	88b1      	ldrh	r1, [r6, #4]
    4c22:	3052      	adds	r0, #82	; 0x52
    4c24:	8041      	strh	r1, [r0, #2]
    4c26:	8821      	ldrh	r1, [r4, #0]
    4c28:	8001      	strh	r1, [r0, #0]
    4c2a:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    4c2e:	7101      	strb	r1, [r0, #4]
    4c30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c34:	f240 11c7 	movw	r1, #455	; 0x1c7
    4c38:	2027      	movs	r0, #39	; 0x27
    4c3a:	f7ff f85b 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c3e:	0000      	.short	0x0000
    4c40:	200000ac 	.word	0x200000ac
    4c44:	000054b4 	.word	0x000054b4
    4c48:	20000848 	.word	0x20000848
    4c4c:	40001550 	.word	0x40001550

00004c50 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c54:	4605      	mov	r5, r0
    4c56:	f000 f8ad 	bl	4db4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4c5a:	4e33      	ldr	r6, [pc, #204]	; (4d28 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4c5c:	4604      	mov	r4, r0
    4c5e:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4c60:	7847      	ldrb	r7, [r0, #1]
    4c62:	b10d      	cbz	r5, 4c68 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4c64:	2d01      	cmp	r5, #1
    4c66:	d103      	bne.n	4c70 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4c68:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4c6a:	f007 fd74 	bl	c756 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4c6e:	7070      	strb	r0, [r6, #1]
    4c70:	7870      	ldrb	r0, [r6, #1]
    4c72:	f04f 0800 	mov.w	r8, #0
    4c76:	f04f 0901 	mov.w	r9, #1
    4c7a:	b150      	cbz	r0, 4c92 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4c7c:	2801      	cmp	r0, #1
    4c7e:	d01a      	beq.n	4cb6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4c80:	2802      	cmp	r0, #2
    4c82:	d034      	beq.n	4cee <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4c84:	2803      	cmp	r0, #3
    4c86:	d048      	beq.n	4d1a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    4c88:	f240 4114 	movw	r1, #1044	; 0x414
    4c8c:	2027      	movs	r0, #39	; 0x27
    4c8e:	f7ff f831 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c92:	2d01      	cmp	r5, #1
    4c94:	d032      	beq.n	4cfc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4c96:	f000 f8e7 	bl	4e68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4c9a:	4639      	mov	r1, r7
    4c9c:	2201      	movs	r2, #1
    4c9e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4ca0:	f008 fa33 	bl	d10a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4ca4:	e028      	b.n	4cf8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4ca6:	bf00      	nop
    4ca8:	f884 8008 	strb.w	r8, [r4, #8]
    4cac:	e031      	b.n	4d12 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4cae:	bf00      	nop
    4cb0:	f884 9008 	strb.w	r9, [r4, #8]
    4cb4:	e02d      	b.n	4d12 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4cb6:	2d01      	cmp	r5, #1
    4cb8:	d008      	beq.n	4ccc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4cba:	f000 f8d5 	bl	4e68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4cbe:	4639      	mov	r1, r7
    4cc0:	2200      	movs	r2, #0
    4cc2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4cc4:	f008 fa21 	bl	d10a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4cc8:	2d02      	cmp	r5, #2
    4cca:	d00b      	beq.n	4ce4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4ccc:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    4cd0:	1c40      	adds	r0, r0, #1
    4cd2:	f141 0100 	adc.w	r1, r1, #0
    4cd6:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    4cda:	7a20      	ldrb	r0, [r4, #8]
    4cdc:	2801      	cmp	r0, #1
    4cde:	d003      	beq.n	4ce8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4ce0:	f884 9008 	strb.w	r9, [r4, #8]
    4ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4ce8:	f884 8008 	strb.w	r8, [r4, #8]
    4cec:	e7fa      	b.n	4ce4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4cee:	2d01      	cmp	r5, #1
    4cf0:	d004      	beq.n	4cfc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4cf2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4cf4:	f008 fc43 	bl	d57e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4cf8:	2d02      	cmp	r5, #2
    4cfa:	d0f3      	beq.n	4ce4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4cfc:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    4d00:	1c40      	adds	r0, r0, #1
    4d02:	f141 0100 	adc.w	r1, r1, #0
    4d06:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    4d0a:	7a20      	ldrb	r0, [r4, #8]
    4d0c:	2801      	cmp	r0, #1
    4d0e:	d1cf      	bne.n	4cb0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4d10:	e7ca      	b.n	4ca8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4d12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d16:	f005 bc21 	b.w	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4d1a:	2d01      	cmp	r5, #1
    4d1c:	d0e2      	beq.n	4ce4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d1e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d20:	f008 fc2d 	bl	d57e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4d24:	e7f5      	b.n	4d12 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d26:	0000      	.short	0x0000
    4d28:	200000ac 	.word	0x200000ac

00004d2c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4d2c:	4804      	ldr	r0, [pc, #16]	; (4d40 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4d2e:	7800      	ldrb	r0, [r0, #0]
    4d30:	b108      	cbz	r0, 4d36 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4d32:	200c      	movs	r0, #12
    4d34:	4770      	bx	lr
    4d36:	4903      	ldr	r1, [pc, #12]	; (4d44 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4d38:	2000      	movs	r0, #0
    4d3a:	7448      	strb	r0, [r1, #17]
    4d3c:	4770      	bx	lr
    4d3e:	0000      	.short	0x0000
    4d40:	200000ac 	.word	0x200000ac
    4d44:	2000089a 	.word	0x2000089a

00004d48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4d48:	4812      	ldr	r0, [pc, #72]	; (4d94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    4d4a:	b508      	push	{r3, lr}
    4d4c:	7801      	ldrb	r1, [r0, #0]
    4d4e:	b139      	cbz	r1, 4d60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    4d50:	7800      	ldrb	r0, [r0, #0]
    4d52:	2801      	cmp	r0, #1
    4d54:	d006      	beq.n	4d64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4d56:	f240 11df 	movw	r1, #479	; 0x1df
    4d5a:	2027      	movs	r0, #39	; 0x27
    4d5c:	f7fe ffca 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d60:	f000 f9ce 	bl	5100 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    4d64:	f000 f820 	bl	4da8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4d68:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    4d6c:	f88d 1000 	strb.w	r1, [sp]
    4d70:	9900      	ldr	r1, [sp, #0]
    4d72:	9100      	str	r1, [sp, #0]
    4d74:	f89d 1000 	ldrb.w	r1, [sp]
    4d78:	2900      	cmp	r1, #0
    4d7a:	d10a      	bne.n	4d92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    4d7c:	6f01      	ldr	r1, [r0, #112]	; 0x70
    4d7e:	2900      	cmp	r1, #0
    4d80:	d007      	beq.n	4d92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    4d82:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    4d86:	2200      	movs	r2, #0
    4d88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4d8c:	4611      	mov	r1, r2
    4d8e:	f7fd bc8d 	b.w	26ac <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4d92:	bd08      	pop	{r3, pc}
    4d94:	200000ac 	.word	0x200000ac
    4d98:	4a02      	ldr	r2, [pc, #8]	; (4da4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4d9a:	8993      	ldrh	r3, [r2, #12]
    4d9c:	4303      	orrs	r3, r0
    4d9e:	8193      	strh	r3, [r2, #12]
    4da0:	6952      	ldr	r2, [r2, #20]
    4da2:	4710      	bx	r2
    4da4:	200000ac 	.word	0x200000ac
    4da8:	4801      	ldr	r0, [pc, #4]	; (4db0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4daa:	6840      	ldr	r0, [r0, #4]
    4dac:	4770      	bx	lr
    4dae:	0000      	.short	0x0000
    4db0:	200000e4 	.word	0x200000e4
    4db4:	4801      	ldr	r0, [pc, #4]	; (4dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    4db6:	6840      	ldr	r0, [r0, #4]
    4db8:	3078      	adds	r0, #120	; 0x78
    4dba:	4770      	bx	lr
    4dbc:	200000e4 	.word	0x200000e4
    4dc0:	4a01      	ldr	r2, [pc, #4]	; (4dc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    4dc2:	2100      	movs	r1, #0
    4dc4:	6952      	ldr	r2, [r2, #20]
    4dc6:	4710      	bx	r2
    4dc8:	200000ac 	.word	0x200000ac
    4dcc:	b570      	push	{r4, r5, r6, lr}
    4dce:	f7ff fff1 	bl	4db4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4dd2:	4604      	mov	r4, r0
    4dd4:	f7ff ffe8 	bl	4da8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4dd8:	4605      	mov	r5, r0
    4dda:	4621      	mov	r1, r4
    4ddc:	f008 ff0f 	bl	dbfe <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    4de0:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    4de4:	2901      	cmp	r1, #1
    4de6:	d114      	bne.n	4e12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    4de8:	2800      	cmp	r0, #0
    4dea:	d012      	beq.n	4e12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    4dec:	4909      	ldr	r1, [pc, #36]	; (4e14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>)
    4dee:	2001      	movs	r0, #1
    4df0:	684a      	ldr	r2, [r1, #4]
    4df2:	8829      	ldrh	r1, [r5, #0]
    4df4:	f8a2 118a 	strh.w	r1, [r2, #394]	; 0x18a
    4df8:	7a61      	ldrb	r1, [r4, #9]
    4dfa:	f882 118c 	strb.w	r1, [r2, #396]	; 0x18c
    4dfe:	7aa1      	ldrb	r1, [r4, #10]
    4e00:	f882 118d 	strb.w	r1, [r2, #397]	; 0x18d
    4e04:	f502 72c4 	add.w	r2, r2, #392	; 0x188
    4e08:	7010      	strb	r0, [r2, #0]
    4e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4e0e:	f005 bba5 	b.w	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4e12:	bd70      	pop	{r4, r5, r6, pc}
    4e14:	200000e4 	.word	0x200000e4
    4e18:	b570      	push	{r4, r5, r6, lr}
    4e1a:	4605      	mov	r5, r0
    4e1c:	2901      	cmp	r1, #1
    4e1e:	d81c      	bhi.n	4e5a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4e20:	4c10      	ldr	r4, [pc, #64]	; (4e64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>)
    4e22:	69a1      	ldr	r1, [r4, #24]
    4e24:	4788      	blx	r1
    4e26:	b1c0      	cbz	r0, 4e5a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4e28:	7960      	ldrb	r0, [r4, #5]
    4e2a:	b9b0      	cbnz	r0, 4e5a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4e2c:	2d01      	cmp	r5, #1
    4e2e:	d116      	bne.n	4e5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    4e30:	f104 0010 	add.w	r0, r4, #16
    4e34:	7800      	ldrb	r0, [r0, #0]
    4e36:	06c1      	lsls	r1, r0, #27
    4e38:	d405      	bmi.n	4e46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    4e3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4e3c:	7809      	ldrb	r1, [r1, #0]
    4e3e:	06c9      	lsls	r1, r1, #27
    4e40:	d401      	bmi.n	4e46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    4e42:	2101      	movs	r1, #1
    4e44:	e000      	b.n	4e48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    4e46:	2100      	movs	r1, #0
    4e48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4e4a:	b91a      	cbnz	r2, 4e54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    4e4c:	8962      	ldrh	r2, [r4, #10]
    4e4e:	b10a      	cbz	r2, 4e54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    4e50:	06c0      	lsls	r0, r0, #27
    4e52:	d502      	bpl.n	4e5a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4e54:	89a0      	ldrh	r0, [r4, #12]
    4e56:	4301      	orrs	r1, r0
    4e58:	d001      	beq.n	4e5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    4e5a:	2001      	movs	r0, #1
    4e5c:	bd70      	pop	{r4, r5, r6, pc}
    4e5e:	2000      	movs	r0, #0
    4e60:	bd70      	pop	{r4, r5, r6, pc}
    4e62:	0000      	.short	0x0000
    4e64:	200000ac 	.word	0x200000ac
    4e68:	b510      	push	{r4, lr}
    4e6a:	4c08      	ldr	r4, [pc, #32]	; (4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>)
    4e6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4e6e:	b138      	cbz	r0, 4e80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    4e70:	8962      	ldrh	r2, [r4, #10]
    4e72:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4e74:	1cd2      	adds	r2, r2, #3
    4e76:	f007 fb45 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4e7a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4e7c:	6260      	str	r0, [r4, #36]	; 0x24
    4e7e:	bd10      	pop	{r4, pc}
    4e80:	f240 415a 	movw	r1, #1114	; 0x45a
    4e84:	2027      	movs	r0, #39	; 0x27
    4e86:	f7fe ff35 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e8a:	0000      	.short	0x0000
    4e8c:	200000ac 	.word	0x200000ac
    4e90:	b510      	push	{r4, lr}
    4e92:	f7ff ff89 	bl	4da8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4e96:	4604      	mov	r4, r0
    4e98:	f7ff ff8c 	bl	4db4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4e9c:	7b41      	ldrb	r1, [r0, #13]
    4e9e:	4a0a      	ldr	r2, [pc, #40]	; (4ec8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>)
    4ea0:	2924      	cmp	r1, #36	; 0x24
    4ea2:	d008      	beq.n	4eb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    4ea4:	7b80      	ldrb	r0, [r0, #14]
    4ea6:	2824      	cmp	r0, #36	; 0x24
    4ea8:	d005      	beq.n	4eb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    4eaa:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4eae:	2804      	cmp	r0, #4
    4eb0:	d100      	bne.n	4eb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4eb2:	2008      	movs	r0, #8
    4eb4:	bd10      	pop	{r4, pc}
    4eb6:	6850      	ldr	r0, [r2, #4]
    4eb8:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    4ebc:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ec4:	f008 bca6 	b.w	d814 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    4ec8:	200000e4 	.word	0x200000e4
    4ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4ed0:	4689      	mov	r9, r1
    4ed2:	4606      	mov	r6, r0
    4ed4:	f7ff ff6e 	bl	4db4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4ed8:	4c58      	ldr	r4, [pc, #352]	; (503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>)
    4eda:	2700      	movs	r7, #0
    4edc:	4605      	mov	r5, r0
    4ede:	f88d 7000 	strb.w	r7, [sp]
    4ee2:	7820      	ldrb	r0, [r4, #0]
    4ee4:	2802      	cmp	r0, #2
    4ee6:	d004      	beq.n	4ef2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    4ee8:	f240 41b9 	movw	r1, #1209	; 0x4b9
    4eec:	2027      	movs	r0, #39	; 0x27
    4eee:	f7fe ff01 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ef2:	7ba0      	ldrb	r0, [r4, #14]
    4ef4:	0640      	lsls	r0, r0, #25
    4ef6:	d406      	bmi.n	4f06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    4ef8:	2040      	movs	r0, #64	; 0x40
    4efa:	f7ff ff61 	bl	4dc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    4efe:	89e0      	ldrh	r0, [r4, #14]
    4f00:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    4f04:	81e0      	strh	r0, [r4, #14]
    4f06:	7ce8      	ldrb	r0, [r5, #19]
    4f08:	f04f 0801 	mov.w	r8, #1
    4f0c:	b3c6      	cbz	r6, 4f80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x238>
    4f0e:	f006 fa33 	bl	b378 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    4f12:	f006 fa17 	bl	b344 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    4f16:	b968      	cbnz	r0, 4f34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4f18:	7ce8      	ldrb	r0, [r5, #19]
    4f1a:	b158      	cbz	r0, 4f34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4f1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4f1e:	7841      	ldrb	r1, [r0, #1]
    4f20:	b141      	cbz	r1, 4f34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4f22:	7800      	ldrb	r0, [r0, #0]
    4f24:	7a29      	ldrb	r1, [r5, #8]
    4f26:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4f2a:	4288      	cmp	r0, r1
    4f2c:	d102      	bne.n	4f34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4f2e:	f884 8002 	strb.w	r8, [r4, #2]
    4f32:	e064      	b.n	4ffe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    4f34:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4f36:	7841      	ldrb	r1, [r0, #1]
    4f38:	8161      	strh	r1, [r4, #10]
    4f3a:	b121      	cbz	r1, 4f46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fe>
    4f3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4f3e:	f008 faeb 	bl	d518 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    4f42:	62a0      	str	r0, [r4, #40]	; 0x28
    4f44:	e000      	b.n	4f48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x200>
    4f46:	62a7      	str	r7, [r4, #40]	; 0x28
    4f48:	89e0      	ldrh	r0, [r4, #14]
    4f4a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4f4e:	81e0      	strh	r0, [r4, #14]
    4f50:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4f52:	79e9      	ldrb	r1, [r5, #7]
    4f54:	7800      	ldrb	r0, [r0, #0]
    4f56:	f3c0 0080 	ubfx	r0, r0, #2, #1
    4f5a:	4288      	cmp	r0, r1
    4f5c:	d005      	beq.n	4f6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x222>
    4f5e:	f000 f963 	bl	5228 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    4f62:	89e0      	ldrh	r0, [r4, #14]
    4f64:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    4f68:	81e0      	strh	r0, [r4, #14]
    4f6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4f6c:	7a29      	ldrb	r1, [r5, #8]
    4f6e:	7800      	ldrb	r0, [r0, #0]
    4f70:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4f74:	4288      	cmp	r0, r1
    4f76:	d10e      	bne.n	4f96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    4f78:	4668      	mov	r0, sp
    4f7a:	f000 f917 	bl	51ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    4f7e:	e00a      	b.n	4f96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    4f80:	e7ff      	b.n	4f82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    4f82:	b108      	cbz	r0, 4f88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x240>
    4f84:	f006 f9f2 	bl	b36c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    4f88:	78e0      	ldrb	r0, [r4, #3]
    4f8a:	1c40      	adds	r0, r0, #1
    4f8c:	70e0      	strb	r0, [r4, #3]
    4f8e:	89e0      	ldrh	r0, [r4, #14]
    4f90:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    4f94:	81e0      	strh	r0, [r4, #14]
    4f96:	7ca8      	ldrb	r0, [r5, #18]
    4f98:	b1a0      	cbz	r0, 4fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    4f9a:	f7ff ff05 	bl	4da8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4f9e:	4928      	ldr	r1, [pc, #160]	; (5040 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    4fa0:	f881 8018 	strb.w	r8, [r1, #24]
    4fa4:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    4fa8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    4fac:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    4fb0:	f008 fc22 	bl	d7f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4fb4:	4603      	mov	r3, r0
    4fb6:	22fb      	movs	r2, #251	; 0xfb
    4fb8:	4921      	ldr	r1, [pc, #132]	; (5040 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    4fba:	2000      	movs	r0, #0
    4fbc:	f006 f976 	bl	b2ac <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    4fc0:	f006 f9aa 	bl	b318 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    4fc4:	4d1e      	ldr	r5, [pc, #120]	; (5040 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    4fc6:	354a      	adds	r5, #74	; 0x4a
    4fc8:	f1b9 0f00 	cmp.w	r9, #0
    4fcc:	d104      	bne.n	4fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x290>
    4fce:	78e1      	ldrb	r1, [r4, #3]
    4fd0:	2001      	movs	r0, #1
    4fd2:	f7ff ff21 	bl	4e18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    4fd6:	b1b0      	cbz	r0, 5006 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    4fd8:	f006 fd64 	bl	baa4 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    4fdc:	f89d 0000 	ldrb.w	r0, [sp]
    4fe0:	b110      	cbz	r0, 4fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a0>
    4fe2:	2000      	movs	r0, #0
    4fe4:	f7ff fe34 	bl	4c50 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    4fe8:	b136      	cbz	r6, 4ff8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    4fea:	70e7      	strb	r7, [r4, #3]
    4fec:	7968      	ldrb	r0, [r5, #5]
    4fee:	1c40      	adds	r0, r0, #1
    4ff0:	7168      	strb	r0, [r5, #5]
    4ff2:	f7ff feeb 	bl	4dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    4ff6:	e002      	b.n	4ffe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    4ff8:	79a8      	ldrb	r0, [r5, #6]
    4ffa:	1c40      	adds	r0, r0, #1
    4ffc:	71a8      	strb	r0, [r5, #6]
    4ffe:	f000 f87f 	bl	5100 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5006:	f89d 0000 	ldrb.w	r0, [sp]
    500a:	b110      	cbz	r0, 5012 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    500c:	2001      	movs	r0, #1
    500e:	f7ff fe1f 	bl	4c50 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5012:	2000      	movs	r0, #0
    5014:	f000 f98c 	bl	5330 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    5018:	f89d 0000 	ldrb.w	r0, [sp]
    501c:	b110      	cbz	r0, 5024 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>
    501e:	2002      	movs	r0, #2
    5020:	f7ff fe16 	bl	4c50 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5024:	b136      	cbz	r6, 5034 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    5026:	70e7      	strb	r7, [r4, #3]
    5028:	7968      	ldrb	r0, [r5, #5]
    502a:	1c40      	adds	r0, r0, #1
    502c:	7168      	strb	r0, [r5, #5]
    502e:	f7ff fecd 	bl	4dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    5032:	e7e6      	b.n	5002 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    5034:	79a8      	ldrb	r0, [r5, #6]
    5036:	1c40      	adds	r0, r0, #1
    5038:	71a8      	strb	r0, [r5, #6]
    503a:	e7e2      	b.n	5002 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    503c:	200000ac 	.word	0x200000ac
    5040:	20000850 	.word	0x20000850
    5044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5048:	4688      	mov	r8, r1
    504a:	4681      	mov	r9, r0
    504c:	f7ff feb2 	bl	4db4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5050:	4d29      	ldr	r5, [pc, #164]	; (50f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    5052:	4604      	mov	r4, r0
    5054:	7828      	ldrb	r0, [r5, #0]
    5056:	2801      	cmp	r0, #1
    5058:	d004      	beq.n	5064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    505a:	f240 4169 	movw	r1, #1129	; 0x469
    505e:	2027      	movs	r0, #39	; 0x27
    5060:	f7fe fe48 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5064:	7860      	ldrb	r0, [r4, #1]
    5066:	2600      	movs	r6, #0
    5068:	2701      	movs	r7, #1
    506a:	b120      	cbz	r0, 5076 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x32e>
    506c:	7066      	strb	r6, [r4, #1]
    506e:	2100      	movs	r1, #0
    5070:	2004      	movs	r0, #4
    5072:	f7ff fe91 	bl	4d98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5076:	6a29      	ldr	r1, [r5, #32]
    5078:	7808      	ldrb	r0, [r1, #0]
    507a:	43c0      	mvns	r0, r0
    507c:	0780      	lsls	r0, r0, #30
    507e:	d109      	bne.n	5094 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    5080:	79a0      	ldrb	r0, [r4, #6]
    5082:	bb88      	cbnz	r0, 50e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    5084:	2002      	movs	r0, #2
    5086:	f7ff fe87 	bl	4d98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    508a:	6a28      	ldr	r0, [r5, #32]
    508c:	7800      	ldrb	r0, [r0, #0]
    508e:	43c0      	mvns	r0, r0
    5090:	0780      	lsls	r0, r0, #30
    5092:	d029      	beq.n	50e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    5094:	6a28      	ldr	r0, [r5, #32]
    5096:	7840      	ldrb	r0, [r0, #1]
    5098:	b110      	cbz	r0, 50a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    509a:	2002      	movs	r0, #2
    509c:	71a0      	strb	r0, [r4, #6]
    509e:	e000      	b.n	50a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    50a0:	71a7      	strb	r7, [r4, #6]
    50a2:	7ce0      	ldrb	r0, [r4, #19]
    50a4:	b1a0      	cbz	r0, 50d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    50a6:	f7ff fe7f 	bl	4da8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    50aa:	4914      	ldr	r1, [pc, #80]	; (50fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    50ac:	7a6d      	ldrb	r5, [r5, #9]
    50ae:	760e      	strb	r6, [r1, #24]
    50b0:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    50b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    50b8:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    50bc:	f008 fb9c 	bl	d7f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    50c0:	4603      	mov	r3, r0
    50c2:	462a      	mov	r2, r5
    50c4:	490d      	ldr	r1, [pc, #52]	; (50fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    50c6:	2001      	movs	r0, #1
    50c8:	f006 f8f0 	bl	b2ac <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    50cc:	f006 f924 	bl	b318 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    50d0:	ea38 0009 	bics.w	r0, r8, r9
    50d4:	d004      	beq.n	50e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    50d6:	2100      	movs	r1, #0
    50d8:	4608      	mov	r0, r1
    50da:	f7ff fe9d 	bl	4e18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    50de:	b128      	cbz	r0, 50ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
    50e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    50e4:	f000 b80c 	b.w	5100 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    50e8:	2003      	movs	r0, #3
    50ea:	e7d7      	b.n	509c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    50ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    50f0:	2000      	movs	r0, #0
    50f2:	f000 b8df 	b.w	52b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56c>
    50f6:	0000      	.short	0x0000
    50f8:	200000ac 	.word	0x200000ac
    50fc:	20000850 	.word	0x20000850
    5100:	b510      	push	{r4, lr}
    5102:	f006 f9cf 	bl	b4a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5106:	f006 f887 	bl	b218 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    510a:	4c0d      	ldr	r4, [pc, #52]	; (5140 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    510c:	89e0      	ldrh	r0, [r4, #14]
    510e:	f7ff fe57 	bl	4dc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5112:	69e2      	ldr	r2, [r4, #28]
    5114:	7961      	ldrb	r1, [r4, #5]
    5116:	78a0      	ldrb	r0, [r4, #2]
    5118:	4790      	blx	r2
    511a:	480a      	ldr	r0, [pc, #40]	; (5144 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    511c:	7c40      	ldrb	r0, [r0, #17]
    511e:	b158      	cbz	r0, 5138 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    5120:	4808      	ldr	r0, [pc, #32]	; (5144 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    5122:	3852      	subs	r0, #82	; 0x52
    5124:	f850 1f52 	ldr.w	r1, [r0, #82]!
    5128:	6081      	str	r1, [r0, #8]
    512a:	6841      	ldr	r1, [r0, #4]
    512c:	60c1      	str	r1, [r0, #12]
    512e:	4805      	ldr	r0, [pc, #20]	; (5144 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    5130:	2101      	movs	r1, #1
    5132:	7401      	strb	r1, [r0, #16]
    5134:	f005 fa12 	bl	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5138:	2000      	movs	r0, #0
    513a:	7020      	strb	r0, [r4, #0]
    513c:	bd10      	pop	{r4, pc}
    513e:	0000      	.short	0x0000
    5140:	200000ac 	.word	0x200000ac
    5144:	2000089a 	.word	0x2000089a
    5148:	4808      	ldr	r0, [pc, #32]	; (516c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    514a:	b510      	push	{r4, lr}
    514c:	7800      	ldrb	r0, [r0, #0]
    514e:	2802      	cmp	r0, #2
    5150:	d004      	beq.n	515c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5152:	f240 2117 	movw	r1, #535	; 0x217
    5156:	2027      	movs	r0, #39	; 0x27
    5158:	f7fe fdcc 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    515c:	4904      	ldr	r1, [pc, #16]	; (5170 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x428>)
    515e:	2001      	movs	r0, #1
    5160:	71c8      	strb	r0, [r1, #7]
    5162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5166:	f7ff bfcb 	b.w	5100 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    516a:	0000      	.short	0x0000
    516c:	200000ac 	.word	0x200000ac
    5170:	2000089a 	.word	0x2000089a
    5174:	b430      	push	{r4, r5}
    5176:	4b0c      	ldr	r3, [pc, #48]	; (51a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>)
    5178:	b942      	cbnz	r2, 518c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    517a:	79da      	ldrb	r2, [r3, #7]
    517c:	2aff      	cmp	r2, #255	; 0xff
    517e:	d105      	bne.n	518c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    5180:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5184:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    5188:	42a2      	cmp	r2, r4
    518a:	d00b      	beq.n	51a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    518c:	b131      	cbz	r1, 519c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>
    518e:	79da      	ldrb	r2, [r3, #7]
    5190:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5194:	bc30      	pop	{r4, r5}
    5196:	4610      	mov	r0, r2
    5198:	f006 bcb8 	b.w	bb0c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    519c:	22ff      	movs	r2, #255	; 0xff
    519e:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    51a2:	e7f7      	b.n	5194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    51a4:	bc30      	pop	{r4, r5}
    51a6:	4770      	bx	lr
    51a8:	200000ac 	.word	0x200000ac
    51ac:	b570      	push	{r4, r5, r6, lr}
    51ae:	4606      	mov	r6, r0
    51b0:	f7ff fe00 	bl	4db4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    51b4:	4a1b      	ldr	r2, [pc, #108]	; (5224 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>)
    51b6:	4604      	mov	r4, r0
    51b8:	2501      	movs	r5, #1
    51ba:	6a51      	ldr	r1, [r2, #36]	; 0x24
    51bc:	7808      	ldrb	r0, [r1, #0]
    51be:	f000 0003 	and.w	r0, r0, #3
    51c2:	2801      	cmp	r0, #1
    51c4:	d00c      	beq.n	51e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    51c6:	2802      	cmp	r0, #2
    51c8:	d00a      	beq.n	51e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    51ca:	2803      	cmp	r0, #3
    51cc:	d121      	bne.n	5212 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    51ce:	7065      	strb	r5, [r4, #1]
    51d0:	89d0      	ldrh	r0, [r2, #14]
    51d2:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    51d6:	81d0      	strh	r0, [r2, #14]
    51d8:	2001      	movs	r0, #1
    51da:	f7ff fddd 	bl	4d98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    51de:	e018      	b.n	5212 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    51e0:	7848      	ldrb	r0, [r1, #1]
    51e2:	b1b0      	cbz	r0, 5212 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    51e4:	89d1      	ldrh	r1, [r2, #14]
    51e6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    51ea:	81d1      	strh	r1, [r2, #14]
    51ec:	6a91      	ldr	r1, [r2, #40]	; 0x28
    51ee:	2900      	cmp	r1, #0
    51f0:	d009      	beq.n	5206 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    51f2:	28fb      	cmp	r0, #251	; 0xfb
    51f4:	d808      	bhi.n	5208 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>
    51f6:	7990      	ldrb	r0, [r2, #6]
    51f8:	b120      	cbz	r0, 5204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>
    51fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    51fe:	2020      	movs	r0, #32
    5200:	f7ff bdde 	b.w	4dc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5204:	7035      	strb	r5, [r6, #0]
    5206:	bd70      	pop	{r4, r5, r6, pc}
    5208:	7950      	ldrb	r0, [r2, #5]
    520a:	f040 0010 	orr.w	r0, r0, #16
    520e:	7150      	strb	r0, [r2, #5]
    5210:	bd70      	pop	{r4, r5, r6, pc}
    5212:	7a20      	ldrb	r0, [r4, #8]
    5214:	2801      	cmp	r0, #1
    5216:	d001      	beq.n	521c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
    5218:	7225      	strb	r5, [r4, #8]
    521a:	bd70      	pop	{r4, r5, r6, pc}
    521c:	2000      	movs	r0, #0
    521e:	7220      	strb	r0, [r4, #8]
    5220:	bd70      	pop	{r4, r5, r6, pc}
    5222:	0000      	.short	0x0000
    5224:	200000ac 	.word	0x200000ac
    5228:	b570      	push	{r4, r5, r6, lr}
    522a:	f7ff fdc3 	bl	4db4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    522e:	4604      	mov	r4, r0
    5230:	7980      	ldrb	r0, [r0, #6]
    5232:	2800      	cmp	r0, #0
    5234:	d027      	beq.n	5286 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53e>
    5236:	2802      	cmp	r0, #2
    5238:	d10d      	bne.n	5256 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50e>
    523a:	4818      	ldr	r0, [pc, #96]	; (529c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x554>)
    523c:	6b00      	ldr	r0, [r0, #48]	; 0x30
    523e:	f007 ff3d 	bl	d0bc <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5242:	b308      	cbz	r0, 5288 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    5244:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5248:	1c40      	adds	r0, r0, #1
    524a:	f141 0100 	adc.w	r1, r1, #0
    524e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5252:	f005 f983 	bl	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5256:	2500      	movs	r5, #0
    5258:	71a5      	strb	r5, [r4, #6]
    525a:	78a0      	ldrb	r0, [r4, #2]
    525c:	2601      	movs	r6, #1
    525e:	b170      	cbz	r0, 527e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    5260:	70a5      	strb	r5, [r4, #2]
    5262:	f7ff fb17 	bl	4894 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5266:	b190      	cbz	r0, 528e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x546>
    5268:	2100      	movs	r1, #0
    526a:	2008      	movs	r0, #8
    526c:	f7ff fd94 	bl	4d98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5270:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5274:	1c40      	adds	r0, r0, #1
    5276:	f141 0100 	adc.w	r1, r1, #0
    527a:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    527e:	79e0      	ldrb	r0, [r4, #7]
    5280:	2801      	cmp	r0, #1
    5282:	d009      	beq.n	5298 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x550>
    5284:	71e6      	strb	r6, [r4, #7]
    5286:	bd70      	pop	{r4, r5, r6, pc}
    5288:	f240 31af 	movw	r1, #943	; 0x3af
    528c:	e001      	b.n	5292 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    528e:	f240 31c7 	movw	r1, #967	; 0x3c7
    5292:	2027      	movs	r0, #39	; 0x27
    5294:	f7fe fd2e 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5298:	71e5      	strb	r5, [r4, #7]
    529a:	bd70      	pop	{r4, r5, r6, pc}
    529c:	200000ac 	.word	0x200000ac
    52a0:	4803      	ldr	r0, [pc, #12]	; (52b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>)
    52a2:	7800      	ldrb	r0, [r0, #0]
    52a4:	2800      	cmp	r0, #0
    52a6:	d001      	beq.n	52ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    52a8:	f7ff bf2a 	b.w	5100 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    52ac:	4770      	bx	lr
    52ae:	0000      	.short	0x0000
    52b0:	200000ac 	.word	0x200000ac
    52b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52b8:	4607      	mov	r7, r0
    52ba:	f7ff fd75 	bl	4da8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    52be:	4680      	mov	r8, r0
    52c0:	f7ff fd78 	bl	4db4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    52c4:	4c17      	ldr	r4, [pc, #92]	; (5324 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>)
    52c6:	4605      	mov	r5, r0
    52c8:	463a      	mov	r2, r7
    52ca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    52cc:	6260      	str	r0, [r4, #36]	; 0x24
    52ce:	2101      	movs	r1, #1
    52d0:	4640      	mov	r0, r8
    52d2:	f7ff ff4f 	bl	5174 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    52d6:	7ce8      	ldrb	r0, [r5, #19]
    52d8:	2600      	movs	r6, #0
    52da:	b178      	cbz	r0, 52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    52dc:	4812      	ldr	r0, [pc, #72]	; (5328 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    52de:	f006 fb39 	bl	b954 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    52e2:	4812      	ldr	r0, [pc, #72]	; (532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    52e4:	7606      	strb	r6, [r0, #24]
    52e6:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    52ea:	e9c0 1204 	strd	r1, r2, [r0, #16]
    52ee:	490e      	ldr	r1, [pc, #56]	; (5328 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    52f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    52f2:	f005 ff63 	bl	b1bc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    52f6:	f005 ff75 	bl	b1e4 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    52fa:	e004      	b.n	5306 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    52fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    52fe:	f006 fb29 	bl	b954 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5302:	f005 ff89 	bl	b218 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5306:	b917      	cbnz	r7, 530e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c6>
    5308:	4630      	mov	r0, r6
    530a:	f006 f9db 	bl	b6c4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    530e:	2100      	movs	r1, #0
    5310:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    5314:	4608      	mov	r0, r1
    5316:	f006 fba7 	bl	ba68 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    531a:	2002      	movs	r0, #2
    531c:	7020      	strb	r0, [r4, #0]
    531e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5322:	0000      	.short	0x0000
    5324:	200000ac 	.word	0x200000ac
    5328:	20000748 	.word	0x20000748
    532c:	20000850 	.word	0x20000850
    5330:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5334:	4604      	mov	r4, r0
    5336:	f7ff fd3d 	bl	4db4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    533a:	4605      	mov	r5, r0
    533c:	f7ff fd34 	bl	4da8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5340:	4606      	mov	r6, r0
    5342:	f8df 9164 	ldr.w	r9, [pc, #356]	; 54a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    5346:	4622      	mov	r2, r4
    5348:	2100      	movs	r1, #0
    534a:	f7ff ff13 	bl	5174 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    534e:	79a8      	ldrb	r0, [r5, #6]
    5350:	f04f 0800 	mov.w	r8, #0
    5354:	2701      	movs	r7, #1
    5356:	f1a9 0420 	sub.w	r4, r9, #32
    535a:	b140      	cbz	r0, 536e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x626>
    535c:	2801      	cmp	r0, #1
    535e:	d01f      	beq.n	53a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    5360:	2802      	cmp	r0, #2
    5362:	d030      	beq.n	53c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67e>
    5364:	2803      	cmp	r0, #3
    5366:	d03c      	beq.n	53e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    5368:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    536c:	e058      	b.n	5420 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    536e:	7a20      	ldrb	r0, [r4, #8]
    5370:	2150      	movs	r1, #80	; 0x50
    5372:	f8ad 0004 	strh.w	r0, [sp, #4]
    5376:	5388      	strh	r0, [r1, r6]
    5378:	4648      	mov	r0, r9
    537a:	f7ff fab5 	bl	48e8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    537e:	b128      	cbz	r0, 538c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    5380:	2080      	movs	r0, #128	; 0x80
    5382:	6a21      	ldr	r1, [r4, #32]
    5384:	f7ff fd08 	bl	4d98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5388:	70af      	strb	r7, [r5, #2]
    538a:	e02e      	b.n	53ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    538c:	466a      	mov	r2, sp
    538e:	a901      	add	r1, sp, #4
    5390:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5392:	f008 fa49 	bl	d828 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5396:	6220      	str	r0, [r4, #32]
    5398:	b110      	cbz	r0, 53a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    539a:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
    539e:	b111      	cbz	r1, 53a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    53a0:	4842      	ldr	r0, [pc, #264]	; (54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    53a2:	6220      	str	r0, [r4, #32]
    53a4:	e021      	b.n	53ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    53a6:	f89d 1000 	ldrb.w	r1, [sp]
    53aa:	b931      	cbnz	r1, 53ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x672>
    53ac:	f8a0 8000 	strh.w	r8, [r0]
    53b0:	f880 8002 	strb.w	r8, [r0, #2]
    53b4:	2101      	movs	r1, #1
    53b6:	f008 fd6f 	bl	de98 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    53ba:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    53be:	6a20      	ldr	r0, [r4, #32]
    53c0:	f008 fd24 	bl	de0c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    53c4:	e011      	b.n	53ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    53c6:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    53ca:	f8ad 0004 	strh.w	r0, [sp, #4]
    53ce:	466a      	mov	r2, sp
    53d0:	a901      	add	r1, sp, #4
    53d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    53d4:	f008 fa28 	bl	d828 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    53d8:	6220      	str	r0, [r4, #32]
    53da:	b930      	cbnz	r0, 53ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    53dc:	f240 21a5 	movw	r1, #677	; 0x2a5
    53e0:	e01e      	b.n	5420 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    53e2:	4648      	mov	r0, r9
    53e4:	f7ff fa80 	bl	48e8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    53e8:	b1c0      	cbz	r0, 541c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    53ea:	6a20      	ldr	r0, [r4, #32]
    53ec:	2308      	movs	r3, #8
    53ee:	7801      	ldrb	r1, [r0, #0]
    53f0:	f021 0108 	bic.w	r1, r1, #8
    53f4:	7001      	strb	r1, [r0, #0]
    53f6:	79ea      	ldrb	r2, [r5, #7]
    53f8:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    53fc:	4311      	orrs	r1, r2
    53fe:	f021 0104 	bic.w	r1, r1, #4
    5402:	7001      	strb	r1, [r0, #0]
    5404:	7a2a      	ldrb	r2, [r5, #8]
    5406:	2304      	movs	r3, #4
    5408:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    540c:	4311      	orrs	r1, r2
    540e:	f021 0110 	bic.w	r1, r1, #16
    5412:	7001      	strb	r1, [r0, #0]
    5414:	43c9      	mvns	r1, r1
    5416:	0789      	lsls	r1, r1, #30
    5418:	d005      	beq.n	5426 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6de>
    541a:	e007      	b.n	542c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    541c:	f240 21ae 	movw	r1, #686	; 0x2ae
    5420:	2027      	movs	r0, #39	; 0x27
    5422:	f7fe fc67 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5426:	78c0      	ldrb	r0, [r0, #3]
    5428:	2802      	cmp	r0, #2
    542a:	d00f      	beq.n	544c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    542c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    542e:	f007 ff96 	bl	d35e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    5432:	b108      	cbz	r0, 5438 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    5434:	2101      	movs	r1, #1
    5436:	e00a      	b.n	544e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    5438:	6a20      	ldr	r0, [r4, #32]
    543a:	7800      	ldrb	r0, [r0, #0]
    543c:	43c0      	mvns	r0, r0
    543e:	0780      	lsls	r0, r0, #30
    5440:	d004      	beq.n	544c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    5442:	f7ff fa0f 	bl	4864 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5446:	f080 0101 	eor.w	r1, r0, #1
    544a:	e000      	b.n	544e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    544c:	2100      	movs	r1, #0
    544e:	6a20      	ldr	r0, [r4, #32]
    5450:	7802      	ldrb	r2, [r0, #0]
    5452:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    5456:	7001      	strb	r1, [r0, #0]
    5458:	7ca9      	ldrb	r1, [r5, #18]
    545a:	b191      	cbz	r1, 5482 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    545c:	7841      	ldrb	r1, [r0, #1]
    545e:	b181      	cbz	r1, 5482 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    5460:	4813      	ldr	r0, [pc, #76]	; (54b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    5462:	f006 fa77 	bl	b954 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5466:	4811      	ldr	r0, [pc, #68]	; (54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    5468:	3828      	subs	r0, #40	; 0x28
    546a:	7607      	strb	r7, [r0, #24]
    546c:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    5470:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5474:	480e      	ldr	r0, [pc, #56]	; (54b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    5476:	6a21      	ldr	r1, [r4, #32]
    5478:	f005 fea0 	bl	b1bc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    547c:	f005 feea 	bl	b254 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    5480:	e003      	b.n	548a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    5482:	f006 fa67 	bl	b954 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5486:	f005 fec7 	bl	b218 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    548a:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    548e:	2101      	movs	r1, #1
    5490:	2000      	movs	r0, #0
    5492:	f006 fae9 	bl	ba68 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5496:	7127      	strb	r7, [r4, #4]
    5498:	6a20      	ldr	r0, [r4, #32]
    549a:	8801      	ldrh	r1, [r0, #0]
    549c:	8221      	strh	r1, [r4, #16]
    549e:	7880      	ldrb	r0, [r0, #2]
    54a0:	74a0      	strb	r0, [r4, #18]
    54a2:	7027      	strb	r7, [r4, #0]
    54a4:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    54a8:	200000cc 	.word	0x200000cc
    54ac:	20000878 	.word	0x20000878
    54b0:	20000748 	.word	0x20000748
    54b4:	00005149 	.word	0x00005149
    54b8:	00004ecd 	.word	0x00004ecd
    54bc:	00005045 	.word	0x00005045
    54c0:	000052a1 	.word	0x000052a1

000054c4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    54c4:	4800      	ldr	r0, [pc, #0]	; (54c8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    54c6:	4770      	bx	lr
    54c8:	20001235 	.word	0x20001235

000054cc <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    54cc:	b570      	push	{r4, r5, r6, lr}
    54ce:	2600      	movs	r6, #0
    54d0:	4635      	mov	r5, r6
    54d2:	4c0f      	ldr	r4, [pc, #60]	; (5510 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    54d4:	e018      	b.n	5508 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    54d6:	1960      	adds	r0, r4, r5
    54d8:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    54dc:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    54e0:	2a01      	cmp	r2, #1
    54e2:	d002      	beq.n	54ea <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    54e4:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    54e8:	b160      	cbz	r0, 5504 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    54ea:	480a      	ldr	r0, [pc, #40]	; (5514 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    54ec:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    54f0:	1c73      	adds	r3, r6, #1
    54f2:	5585      	strb	r5, [r0, r6]
    54f4:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    54f8:	4630      	mov	r0, r6
    54fa:	b2de      	uxtb	r6, r3
    54fc:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    5500:	f006 fbd2 	bl	bca8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5504:	1c6d      	adds	r5, r5, #1
    5506:	b2ed      	uxtb	r5, r5
    5508:	78a0      	ldrb	r0, [r4, #2]
    550a:	42a8      	cmp	r0, r5
    550c:	d8e3      	bhi.n	54d6 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    550e:	bd70      	pop	{r4, r5, r6, pc}
    5510:	20001062 	.word	0x20001062
    5514:	20000274 	.word	0x20000274

00005518 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5518:	4904      	ldr	r1, [pc, #16]	; (552c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    551a:	788a      	ldrb	r2, [r1, #2]
    551c:	4282      	cmp	r2, r0
    551e:	d903      	bls.n	5528 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5520:	4408      	add	r0, r1
    5522:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5526:	4770      	bx	lr
    5528:	2000      	movs	r0, #0
    552a:	4770      	bx	lr
    552c:	20001062 	.word	0x20001062

00005530 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5530:	4904      	ldr	r1, [pc, #16]	; (5544 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5532:	788a      	ldrb	r2, [r1, #2]
    5534:	4282      	cmp	r2, r0
    5536:	d903      	bls.n	5540 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5538:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    553c:	3083      	adds	r0, #131	; 0x83
    553e:	4770      	bx	lr
    5540:	2000      	movs	r0, #0
    5542:	4770      	bx	lr
    5544:	20001062 	.word	0x20001062

00005548 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5548:	4a05      	ldr	r2, [pc, #20]	; (5560 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    554a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    554e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5552:	6802      	ldr	r2, [r0, #0]
    5554:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5558:	8880      	ldrh	r0, [r0, #4]
    555a:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    555e:	4770      	bx	lr
    5560:	20001062 	.word	0x20001062

00005564 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    5564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5568:	4607      	mov	r7, r0
    556a:	2400      	movs	r4, #0
    556c:	4d10      	ldr	r5, [pc, #64]	; (55b0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    556e:	e019      	b.n	55a4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    5570:	4620      	mov	r0, r4
    5572:	f7ff ffdd 	bl	5530 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    5576:	0003      	movs	r3, r0
    5578:	d012      	beq.n	55a0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    557a:	1928      	adds	r0, r5, r4
    557c:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5580:	b970      	cbnz	r0, 55a0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    5582:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    5586:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    558a:	f206 160b 	addw	r6, r6, #267	; 0x10b
    558e:	463a      	mov	r2, r7
    5590:	4631      	mov	r1, r6
    5592:	4618      	mov	r0, r3
    5594:	f008 f8cb 	bl	d72e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    5598:	4630      	mov	r0, r6
    559a:	4621      	mov	r1, r4
    559c:	f7ff ffd4 	bl	5548 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    55a0:	1c64      	adds	r4, r4, #1
    55a2:	b2e4      	uxtb	r4, r4
    55a4:	78a8      	ldrb	r0, [r5, #2]
    55a6:	42a0      	cmp	r0, r4
    55a8:	d8e2      	bhi.n	5570 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    55aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55ae:	0000      	.short	0x0000
    55b0:	20001062 	.word	0x20001062

000055b4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    55b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55b8:	460e      	mov	r6, r1
    55ba:	4607      	mov	r7, r0
    55bc:	4615      	mov	r5, r2
    55be:	2106      	movs	r1, #6
    55c0:	4630      	mov	r0, r6
    55c2:	f008 fb6c 	bl	dc9e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    55c6:	4c0d      	ldr	r4, [pc, #52]	; (55fc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    55c8:	b160      	cbz	r0, 55e4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    55ca:	2000      	movs	r0, #0
    55cc:	e004      	b.n	55d8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    55ce:	1821      	adds	r1, r4, r0
    55d0:	1c40      	adds	r0, r0, #1
    55d2:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    55d6:	b2c0      	uxtb	r0, r0
    55d8:	78a1      	ldrb	r1, [r4, #2]
    55da:	4281      	cmp	r1, r0
    55dc:	d8f7      	bhi.n	55ce <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    55de:	2001      	movs	r0, #1
    55e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55e4:	4631      	mov	r1, r6
    55e6:	4638      	mov	r0, r7
    55e8:	f008 f92d 	bl	d846 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    55ec:	2808      	cmp	r0, #8
    55ee:	d003      	beq.n	55f8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    55f0:	4420      	add	r0, r4
    55f2:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    55f6:	e7f2      	b.n	55de <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    55f8:	2000      	movs	r0, #0
    55fa:	e7f1      	b.n	55e0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    55fc:	20001062 	.word	0x20001062

00005600 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5600:	4904      	ldr	r1, [pc, #16]	; (5614 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5602:	788a      	ldrb	r2, [r1, #2]
    5604:	4282      	cmp	r2, r0
    5606:	d903      	bls.n	5610 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5608:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    560c:	1cc0      	adds	r0, r0, #3
    560e:	4770      	bx	lr
    5610:	2000      	movs	r0, #0
    5612:	4770      	bx	lr
    5614:	20001062 	.word	0x20001062

00005618 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    5618:	4908      	ldr	r1, [pc, #32]	; (563c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    561a:	788a      	ldrb	r2, [r1, #2]
    561c:	4282      	cmp	r2, r0
    561e:	d903      	bls.n	5628 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    5620:	180a      	adds	r2, r1, r0
    5622:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    5626:	b10a      	cbz	r2, 562c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    5628:	2000      	movs	r0, #0
    562a:	4770      	bx	lr
    562c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5630:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    5634:	f200 100b 	addw	r0, r0, #267	; 0x10b
    5638:	4770      	bx	lr
    563a:	0000      	.short	0x0000
    563c:	20001062 	.word	0x20001062

00005640 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5640:	b510      	push	{r4, lr}
    5642:	f240 12d3 	movw	r2, #467	; 0x1d3
    5646:	2100      	movs	r1, #0
    5648:	4808      	ldr	r0, [pc, #32]	; (566c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    564a:	f006 ffd5 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    564e:	2208      	movs	r2, #8
    5650:	21ff      	movs	r1, #255	; 0xff
    5652:	4807      	ldr	r0, [pc, #28]	; (5670 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5654:	f006 ffd0 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5658:	4805      	ldr	r0, [pc, #20]	; (5670 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    565a:	2100      	movs	r1, #0
    565c:	1f00      	subs	r0, r0, #4
    565e:	7001      	strb	r1, [r0, #0]
    5660:	7041      	strb	r1, [r0, #1]
    5662:	f44f 7161 	mov.w	r1, #900	; 0x384
    5666:	8041      	strh	r1, [r0, #2]
    5668:	bd10      	pop	{r4, pc}
    566a:	0000      	.short	0x0000
    566c:	20001062 	.word	0x20001062
    5670:	20000274 	.word	0x20000274

00005674 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5674:	4901      	ldr	r1, [pc, #4]	; (567c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5676:	7008      	strb	r0, [r1, #0]
    5678:	4770      	bx	lr
    567a:	0000      	.short	0x0000
    567c:	20000270 	.word	0x20000270

00005680 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5680:	4801      	ldr	r0, [pc, #4]	; (5688 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5682:	7800      	ldrb	r0, [r0, #0]
    5684:	4770      	bx	lr
    5686:	0000      	.short	0x0000
    5688:	20000270 	.word	0x20000270

0000568c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    568c:	4b0b      	ldr	r3, [pc, #44]	; (56bc <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    568e:	b510      	push	{r4, lr}
    5690:	789c      	ldrb	r4, [r3, #2]
    5692:	4284      	cmp	r4, r0
    5694:	d90f      	bls.n	56b6 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5696:	4418      	add	r0, r3
    5698:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    569c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    56a0:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    56a4:	700b      	strb	r3, [r1, #0]
    56a6:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    56aa:	6011      	str	r1, [r2, #0]
    56ac:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    56b0:	8090      	strh	r0, [r2, #4]
    56b2:	2001      	movs	r0, #1
    56b4:	bd10      	pop	{r4, pc}
    56b6:	2000      	movs	r0, #0
    56b8:	bd10      	pop	{r4, pc}
    56ba:	0000      	.short	0x0000
    56bc:	20001062 	.word	0x20001062

000056c0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    56c0:	4907      	ldr	r1, [pc, #28]	; (56e0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    56c2:	788a      	ldrb	r2, [r1, #2]
    56c4:	4282      	cmp	r2, r0
    56c6:	d909      	bls.n	56dc <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    56c8:	4408      	add	r0, r1
    56ca:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    56ce:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    56d2:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    56d6:	f000 0001 	and.w	r0, r0, #1
    56da:	4770      	bx	lr
    56dc:	2000      	movs	r0, #0
    56de:	4770      	bx	lr
    56e0:	20001062 	.word	0x20001062

000056e4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    56e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    56e8:	4698      	mov	r8, r3
    56ea:	4691      	mov	r9, r2
    56ec:	460c      	mov	r4, r1
    56ee:	4605      	mov	r5, r0
    56f0:	f000 f962 	bl	59b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    56f4:	4606      	mov	r6, r0
    56f6:	2810      	cmp	r0, #16
    56f8:	d006      	beq.n	5708 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    56fa:	f000 f92d 	bl	5958 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    56fe:	2810      	cmp	r0, #16
    5700:	d002      	beq.n	5708 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5702:	2012      	movs	r0, #18
    5704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5708:	4f18      	ldr	r7, [pc, #96]	; (576c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    570a:	78b8      	ldrb	r0, [r7, #2]
    570c:	2808      	cmp	r0, #8
    570e:	d22a      	bcs.n	5766 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    5710:	2e10      	cmp	r6, #16
    5712:	d105      	bne.n	5720 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    5714:	2200      	movs	r2, #0
    5716:	4621      	mov	r1, r4
    5718:	4628      	mov	r0, r5
    571a:	f000 f931 	bl	5980 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    571e:	4606      	mov	r6, r0
    5720:	78bc      	ldrb	r4, [r7, #2]
    5722:	2210      	movs	r2, #16
    5724:	1c60      	adds	r0, r4, #1
    5726:	70b8      	strb	r0, [r7, #2]
    5728:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    572c:	1ce8      	adds	r0, r5, #3
    572e:	4649      	mov	r1, r9
    5730:	f008 fa58 	bl	dbe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5734:	f105 0083 	add.w	r0, r5, #131	; 0x83
    5738:	2210      	movs	r2, #16
    573a:	4641      	mov	r1, r8
    573c:	f008 fa52 	bl	dbe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5740:	2110      	movs	r1, #16
    5742:	4640      	mov	r0, r8
    5744:	f008 faab 	bl	dc9e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5748:	443c      	add	r4, r7
    574a:	2110      	movs	r1, #16
    574c:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5750:	4648      	mov	r0, r9
    5752:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    5756:	f008 faa2 	bl	dc9e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    575a:	77e0      	strb	r0, [r4, #31]
    575c:	f804 6c29 	strb.w	r6, [r4, #-41]
    5760:	2000      	movs	r0, #0
    5762:	73e0      	strb	r0, [r4, #15]
    5764:	e7ce      	b.n	5704 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5766:	2007      	movs	r0, #7
    5768:	e7cc      	b.n	5704 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    576a:	0000      	.short	0x0000
    576c:	20001062 	.word	0x20001062

00005770 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5770:	4806      	ldr	r0, [pc, #24]	; (578c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5772:	b510      	push	{r4, lr}
    5774:	7880      	ldrb	r0, [r0, #2]
    5776:	1e40      	subs	r0, r0, #1
    5778:	b244      	sxtb	r4, r0
    577a:	e004      	b.n	5786 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    577c:	b2e0      	uxtb	r0, r4
    577e:	f000 f963 	bl	5a48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    5782:	1e64      	subs	r4, r4, #1
    5784:	b264      	sxtb	r4, r4
    5786:	2c00      	cmp	r4, #0
    5788:	daf8      	bge.n	577c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    578a:	bd10      	pop	{r4, pc}
    578c:	20001062 	.word	0x20001062

00005790 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5790:	4801      	ldr	r0, [pc, #4]	; (5798 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5792:	8840      	ldrh	r0, [r0, #2]
    5794:	4770      	bx	lr
    5796:	0000      	.short	0x0000
    5798:	20000270 	.word	0x20000270

0000579c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    579c:	b138      	cbz	r0, 57ae <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    579e:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    57a2:	4288      	cmp	r0, r1
    57a4:	d803      	bhi.n	57ae <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    57a6:	4903      	ldr	r1, [pc, #12]	; (57b4 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    57a8:	8048      	strh	r0, [r1, #2]
    57aa:	2001      	movs	r0, #1
    57ac:	4770      	bx	lr
    57ae:	2000      	movs	r0, #0
    57b0:	4770      	bx	lr
    57b2:	0000      	.short	0x0000
    57b4:	20000270 	.word	0x20000270

000057b8 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY>:
    57b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    57bc:	2501      	movs	r5, #1
    57be:	461f      	mov	r7, r3
    57c0:	4691      	mov	r9, r2
    57c2:	462c      	mov	r4, r5
    57c4:	2600      	movs	r6, #0
    57c6:	f000 f8f7 	bl	59b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    57ca:	2810      	cmp	r0, #16
    57cc:	d023      	beq.n	5816 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    57ce:	f8df 8058 	ldr.w	r8, [pc, #88]	; 5828 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x70>
    57d2:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    57d6:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    57da:	f001 0601 	and.w	r6, r1, #1
    57de:	f000 f8bb 	bl	5958 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    57e2:	4603      	mov	r3, r0
    57e4:	2810      	cmp	r0, #16
    57e6:	d016      	beq.n	5816 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    57e8:	b107      	cbz	r7, 57ec <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x34>
    57ea:	703b      	strb	r3, [r7, #0]
    57ec:	4618      	mov	r0, r3
    57ee:	f7ff ff07 	bl	5600 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    57f2:	b180      	cbz	r0, 5816 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    57f4:	f898 1002 	ldrb.w	r1, [r8, #2]
    57f8:	4640      	mov	r0, r8
    57fa:	4299      	cmp	r1, r3
    57fc:	d903      	bls.n	5806 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x4e>
    57fe:	18c1      	adds	r1, r0, r3
    5800:	f891 414b 	ldrb.w	r4, [r1, #331]	; 0x14b
    5804:	e000      	b.n	5808 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x50>
    5806:	2400      	movs	r4, #0
    5808:	eb08 0003 	add.w	r0, r8, r3
    580c:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5810:	2801      	cmp	r0, #1
    5812:	d006      	beq.n	5822 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x6a>
    5814:	2500      	movs	r5, #0
    5816:	ea49 0006 	orr.w	r0, r9, r6
    581a:	4325      	orrs	r5, r4
    581c:	4028      	ands	r0, r5
    581e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5822:	2501      	movs	r5, #1
    5824:	e7f7      	b.n	5816 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    5826:	0000      	.short	0x0000
    5828:	20001062 	.word	0x20001062

0000582c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    582c:	b570      	push	{r4, r5, r6, lr}
    582e:	460d      	mov	r5, r1
    5830:	4606      	mov	r6, r0
    5832:	f000 f8c1 	bl	59b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5836:	4c10      	ldr	r4, [pc, #64]	; (5878 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    5838:	2810      	cmp	r0, #16
    583a:	d007      	beq.n	584c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    583c:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    5840:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5844:	07c9      	lsls	r1, r1, #31
    5846:	d001      	beq.n	584c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5848:	2001      	movs	r0, #1
    584a:	bd70      	pop	{r4, r5, r6, pc}
    584c:	7861      	ldrb	r1, [r4, #1]
    584e:	2908      	cmp	r1, #8
    5850:	d210      	bcs.n	5874 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5852:	2810      	cmp	r0, #16
    5854:	d008      	beq.n	5868 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    5856:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    585a:	2101      	movs	r1, #1
    585c:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5860:	7860      	ldrb	r0, [r4, #1]
    5862:	1c40      	adds	r0, r0, #1
    5864:	7060      	strb	r0, [r4, #1]
    5866:	e7ef      	b.n	5848 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    5868:	2201      	movs	r2, #1
    586a:	4629      	mov	r1, r5
    586c:	4630      	mov	r0, r6
    586e:	f000 f887 	bl	5980 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5872:	e7f5      	b.n	5860 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5874:	2000      	movs	r0, #0
    5876:	bd70      	pop	{r4, r5, r6, pc}
    5878:	20001062 	.word	0x20001062

0000587c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    587c:	b570      	push	{r4, r5, r6, lr}
    587e:	4d0b      	ldr	r5, [pc, #44]	; (58ac <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5880:	7828      	ldrb	r0, [r5, #0]
    5882:	1e40      	subs	r0, r0, #1
    5884:	b244      	sxtb	r4, r0
    5886:	e00a      	b.n	589e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5888:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    588c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5890:	07c0      	lsls	r0, r0, #31
    5892:	d002      	beq.n	589a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5894:	b2e0      	uxtb	r0, r4
    5896:	f000 f91f 	bl	5ad8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    589a:	1e64      	subs	r4, r4, #1
    589c:	b264      	sxtb	r4, r4
    589e:	2c00      	cmp	r4, #0
    58a0:	daf2      	bge.n	5888 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    58a2:	4903      	ldr	r1, [pc, #12]	; (58b0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    58a4:	2000      	movs	r0, #0
    58a6:	7048      	strb	r0, [r1, #1]
    58a8:	bd70      	pop	{r4, r5, r6, pc}
    58aa:	0000      	.short	0x0000
    58ac:	20001062 	.word	0x20001062
    58b0:	20000270 	.word	0x20000270

000058b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    58b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58b8:	2400      	movs	r4, #0
    58ba:	4625      	mov	r5, r4
    58bc:	4e18      	ldr	r6, [pc, #96]	; (5920 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    58be:	e029      	b.n	5914 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    58c0:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    58c4:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    58c8:	07c0      	lsls	r0, r0, #31
    58ca:	d021      	beq.n	5910 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    58cc:	4628      	mov	r0, r5
    58ce:	f000 f843 	bl	5958 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    58d2:	4603      	mov	r3, r0
    58d4:	f7ff fe94 	bl	5600 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    58d8:	4601      	mov	r1, r0
    58da:	2000      	movs	r0, #0
    58dc:	2b10      	cmp	r3, #16
    58de:	d009      	beq.n	58f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    58e0:	18f2      	adds	r2, r6, r3
    58e2:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    58e6:	f1bc 0f01 	cmp.w	ip, #1
    58ea:	d002      	beq.n	58f2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    58ec:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    58f0:	b102      	cbz	r2, 58f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    58f2:	2001      	movs	r0, #1
    58f4:	1e40      	subs	r0, r0, #1
    58f6:	4201      	tst	r1, r0
    58f8:	d10a      	bne.n	5910 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    58fa:	480a      	ldr	r0, [pc, #40]	; (5924 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    58fc:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5900:	5503      	strb	r3, [r0, r4]
    5902:	4620      	mov	r0, r4
    5904:	1c64      	adds	r4, r4, #1
    5906:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    590a:	b2e4      	uxtb	r4, r4
    590c:	f006 f9cc 	bl	bca8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5910:	1c6d      	adds	r5, r5, #1
    5912:	b2ed      	uxtb	r5, r5
    5914:	7830      	ldrb	r0, [r6, #0]
    5916:	42a8      	cmp	r0, r5
    5918:	d8d2      	bhi.n	58c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    591a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    591e:	0000      	.short	0x0000
    5920:	20001062 	.word	0x20001062
    5924:	20000274 	.word	0x20000274
    5928:	4602      	mov	r2, r0
    592a:	4809      	ldr	r0, [pc, #36]	; (5950 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    592c:	b510      	push	{r4, lr}
    592e:	7800      	ldrb	r0, [r0, #0]
    5930:	460b      	mov	r3, r1
    5932:	b158      	cbz	r0, 594c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5934:	4807      	ldr	r0, [pc, #28]	; (5954 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5936:	7881      	ldrb	r1, [r0, #2]
    5938:	b141      	cbz	r1, 594c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    593a:	b10b      	cbz	r3, 5940 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    593c:	1cc0      	adds	r0, r0, #3
    593e:	e001      	b.n	5944 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5940:	4804      	ldr	r0, [pc, #16]	; (5954 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5942:	3083      	adds	r0, #131	; 0x83
    5944:	f005 fb5c 	bl	b000 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5948:	2001      	movs	r0, #1
    594a:	bd10      	pop	{r4, pc}
    594c:	2000      	movs	r0, #0
    594e:	bd10      	pop	{r4, pc}
    5950:	20000270 	.word	0x20000270
    5954:	20001062 	.word	0x20001062
    5958:	4908      	ldr	r1, [pc, #32]	; (597c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    595a:	b510      	push	{r4, lr}
    595c:	4603      	mov	r3, r0
    595e:	2000      	movs	r0, #0
    5960:	788a      	ldrb	r2, [r1, #2]
    5962:	e006      	b.n	5972 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    5964:	180c      	adds	r4, r1, r0
    5966:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    596a:	429c      	cmp	r4, r3
    596c:	d004      	beq.n	5978 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    596e:	1c40      	adds	r0, r0, #1
    5970:	b2c0      	uxtb	r0, r0
    5972:	4282      	cmp	r2, r0
    5974:	d8f6      	bhi.n	5964 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    5976:	2010      	movs	r0, #16
    5978:	bd10      	pop	{r4, pc}
    597a:	0000      	.short	0x0000
    597c:	20001062 	.word	0x20001062
    5980:	b570      	push	{r4, r5, r6, lr}
    5982:	4b0c      	ldr	r3, [pc, #48]	; (59b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    5984:	4604      	mov	r4, r0
    5986:	7818      	ldrb	r0, [r3, #0]
    5988:	1c45      	adds	r5, r0, #1
    598a:	701d      	strb	r5, [r3, #0]
    598c:	2810      	cmp	r0, #16
    598e:	d303      	bcc.n	5998 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    5990:	2146      	movs	r1, #70	; 0x46
    5992:	2028      	movs	r0, #40	; 0x28
    5994:	f7fe f9ae 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5998:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    599c:	680d      	ldr	r5, [r1, #0]
    599e:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    59a2:	8889      	ldrh	r1, [r1, #4]
    59a4:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    59a8:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    59ac:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    59b0:	bd70      	pop	{r4, r5, r6, pc}
    59b2:	0000      	.short	0x0000
    59b4:	20001062 	.word	0x20001062
    59b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59bc:	460f      	mov	r7, r1
    59be:	4606      	mov	r6, r0
    59c0:	2400      	movs	r4, #0
    59c2:	4d0d      	ldr	r5, [pc, #52]	; (59f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    59c4:	e00f      	b.n	59e6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    59c6:	bf00      	nop
    59c8:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    59cc:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    59d0:	42b1      	cmp	r1, r6
    59d2:	d106      	bne.n	59e2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    59d4:	2206      	movs	r2, #6
    59d6:	4639      	mov	r1, r7
    59d8:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    59dc:	f006 fd80 	bl	c4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    59e0:	b138      	cbz	r0, 59f2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    59e2:	1c64      	adds	r4, r4, #1
    59e4:	b2e4      	uxtb	r4, r4
    59e6:	7828      	ldrb	r0, [r5, #0]
    59e8:	42a0      	cmp	r0, r4
    59ea:	d8ed      	bhi.n	59c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    59ec:	2010      	movs	r0, #16
    59ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59f2:	4620      	mov	r0, r4
    59f4:	e7fb      	b.n	59ee <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    59f6:	0000      	.short	0x0000
    59f8:	20001062 	.word	0x20001062
    59fc:	b570      	push	{r4, r5, r6, lr}
    59fe:	4605      	mov	r5, r0
    5a00:	f7ff ffaa 	bl	5958 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5a04:	2810      	cmp	r0, #16
    5a06:	d11c      	bne.n	5a42 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5a08:	4c0e      	ldr	r4, [pc, #56]	; (5a44 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    5a0a:	7820      	ldrb	r0, [r4, #0]
    5a0c:	1e40      	subs	r0, r0, #1
    5a0e:	b2c0      	uxtb	r0, r0
    5a10:	7020      	strb	r0, [r4, #0]
    5a12:	42a8      	cmp	r0, r5
    5a14:	d015      	beq.n	5a42 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5a16:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5a1a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5a1e:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5a22:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5a26:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5a2a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5a2e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5a32:	7820      	ldrb	r0, [r4, #0]
    5a34:	f7ff ff90 	bl	5958 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5a38:	2810      	cmp	r0, #16
    5a3a:	d002      	beq.n	5a42 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5a3c:	4420      	add	r0, r4
    5a3e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5a42:	bd70      	pop	{r4, r5, r6, pc}
    5a44:	20001062 	.word	0x20001062
    5a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a4c:	4c21      	ldr	r4, [pc, #132]	; (5ad4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    5a4e:	4606      	mov	r6, r0
    5a50:	19a7      	adds	r7, r4, r6
    5a52:	78a0      	ldrb	r0, [r4, #2]
    5a54:	1e40      	subs	r0, r0, #1
    5a56:	b2c5      	uxtb	r5, r0
    5a58:	70a5      	strb	r5, [r4, #2]
    5a5a:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5a5e:	42ae      	cmp	r6, r5
    5a60:	d02a      	beq.n	5ab8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    5a62:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5a66:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5a6a:	f10a 0103 	add.w	r1, sl, #3
    5a6e:	f109 0003 	add.w	r0, r9, #3
    5a72:	2210      	movs	r2, #16
    5a74:	f006 fd46 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a78:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5a7c:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5a80:	2210      	movs	r2, #16
    5a82:	f006 fd3f 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a86:	1960      	adds	r0, r4, r5
    5a88:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5a8c:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5a90:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5a94:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5a98:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5a9c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5aa0:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5aa4:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5aa8:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5aac:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5ab0:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5ab4:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5ab8:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5abc:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5ac0:	07c0      	lsls	r0, r0, #31
    5ac2:	d104      	bne.n	5ace <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    5ac4:	4640      	mov	r0, r8
    5ac6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5aca:	f7ff bf97 	b.w	59fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ad2:	0000      	.short	0x0000
    5ad4:	20001062 	.word	0x20001062
    5ad8:	4905      	ldr	r1, [pc, #20]	; (5af0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    5ada:	784a      	ldrb	r2, [r1, #1]
    5adc:	1e52      	subs	r2, r2, #1
    5ade:	704a      	strb	r2, [r1, #1]
    5ae0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5ae4:	2200      	movs	r2, #0
    5ae6:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5aea:	f7ff bf87 	b.w	59fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5aee:	0000      	.short	0x0000
    5af0:	20001062 	.word	0x20001062

00005af4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    5af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5af8:	4604      	mov	r4, r0
    5afa:	f100 0778 	add.w	r7, r0, #120	; 0x78
    5afe:	b171      	cbz	r1, 5b1e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    5b00:	f104 068e 	add.w	r6, r4, #142	; 0x8e
    5b04:	1e75      	subs	r5, r6, #1
    5b06:	2901      	cmp	r1, #1
    5b08:	d016      	beq.n	5b38 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    5b0a:	2902      	cmp	r1, #2
    5b0c:	d025      	beq.n	5b5a <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    5b0e:	2903      	cmp	r1, #3
    5b10:	d110      	bne.n	5b34 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    5b12:	4631      	mov	r1, r6
    5b14:	4628      	mov	r0, r5
    5b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5b1a:	f008 b912 	b.w	dd42 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5b1e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    5b22:	2100      	movs	r1, #0
    5b24:	f006 fd68 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5b28:	4638      	mov	r0, r7
    5b2a:	f008 f8c7 	bl	dcbc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    5b2e:	2020      	movs	r0, #32
    5b30:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    5b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b38:	68e1      	ldr	r1, [r4, #12]
    5b3a:	480d      	ldr	r0, [pc, #52]	; (5b70 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    5b3c:	460a      	mov	r2, r1
    5b3e:	4408      	add	r0, r1
    5b40:	fbb0 f0f1 	udiv	r0, r0, r1
    5b44:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    5b48:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5b4c:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    5b50:	8ae3      	ldrh	r3, [r4, #22]
    5b52:	4638      	mov	r0, r7
    5b54:	f000 f80e 	bl	5b74 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    5b58:	e7db      	b.n	5b12 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    5b5a:	68c1      	ldr	r1, [r0, #12]
    5b5c:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
    5b60:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    5b64:	4638      	mov	r0, r7
    5b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5b6a:	f000 b803 	b.w	5b74 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    5b6e:	0000      	.short	0x0000
    5b70:	01c9c37f 	.word	0x01c9c37f
    5b74:	b530      	push	{r4, r5, lr}
    5b76:	2400      	movs	r4, #0
    5b78:	86c4      	strh	r4, [r0, #54]	; 0x36
    5b7a:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
    5b7c:	4d13      	ldr	r5, [pc, #76]	; (5bcc <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd8>)
    5b7e:	434c      	muls	r4, r1
    5b80:	fbb4 f4f2 	udiv	r4, r4, r2
    5b84:	8744      	strh	r4, [r0, #58]	; 0x3a
    5b86:	f242 7410 	movw	r4, #10000	; 0x2710
    5b8a:	4363      	muls	r3, r4
    5b8c:	fbb3 f3f2 	udiv	r3, r3, r2
    5b90:	1c5b      	adds	r3, r3, #1
    5b92:	b29b      	uxth	r3, r3
    5b94:	fb03 f402 	mul.w	r4, r3, r2
    5b98:	8703      	strh	r3, [r0, #56]	; 0x38
    5b9a:	42ac      	cmp	r4, r5
    5b9c:	d901      	bls.n	5ba2 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xae>
    5b9e:	1e5b      	subs	r3, r3, #1
    5ba0:	8703      	strh	r3, [r0, #56]	; 0x38
    5ba2:	4b0b      	ldr	r3, [pc, #44]	; (5bd0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xdc>)
    5ba4:	f240 2471 	movw	r4, #625	; 0x271
    5ba8:	fbb3 f3f2 	udiv	r3, r3, r2
    5bac:	1c5b      	adds	r3, r3, #1
    5bae:	87c3      	strh	r3, [r0, #62]	; 0x3e
    5bb0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    5bb2:	4363      	muls	r3, r4
    5bb4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5bb8:	1e5b      	subs	r3, r3, #1
    5bba:	fbb3 f3f2 	udiv	r3, r3, r2
    5bbe:	62c3      	str	r3, [r0, #44]	; 0x2c
    5bc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5bc2:	434b      	muls	r3, r1
    5bc4:	fbb3 f1f2 	udiv	r1, r3, r2
    5bc8:	6281      	str	r1, [r0, #40]	; 0x28
    5bca:	bd30      	pop	{r4, r5, pc}
    5bcc:	01e84800 	.word	0x01e84800
    5bd0:	02625a00 	.word	0x02625a00

00005bd4 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    5bd4:	4909      	ldr	r1, [pc, #36]	; (5bfc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    5bd6:	b508      	push	{r3, lr}
    5bd8:	7809      	ldrb	r1, [r1, #0]
    5bda:	f88d 1000 	strb.w	r1, [sp]
    5bde:	9900      	ldr	r1, [sp, #0]
    5be0:	9100      	str	r1, [sp, #0]
    5be2:	f89d 1000 	ldrb.w	r1, [sp]
    5be6:	b109      	cbz	r1, 5bec <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    5be8:	2000      	movs	r0, #0
    5bea:	bd08      	pop	{r3, pc}
    5bec:	4903      	ldr	r1, [pc, #12]	; (5bfc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    5bee:	f8d1 2001 	ldr.w	r2, [r1, #1]
    5bf2:	6002      	str	r2, [r0, #0]
    5bf4:	7949      	ldrb	r1, [r1, #5]
    5bf6:	7101      	strb	r1, [r0, #4]
    5bf8:	2001      	movs	r0, #1
    5bfa:	bd08      	pop	{r3, pc}
    5bfc:	2000028f 	.word	0x2000028f

00005c00 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    5c00:	4905      	ldr	r1, [pc, #20]	; (5c18 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    5c02:	2201      	movs	r2, #1
    5c04:	700a      	strb	r2, [r1, #0]
    5c06:	460a      	mov	r2, r1
    5c08:	6803      	ldr	r3, [r0, #0]
    5c0a:	f8c2 3001 	str.w	r3, [r2, #1]
    5c0e:	7900      	ldrb	r0, [r0, #4]
    5c10:	7150      	strb	r0, [r2, #5]
    5c12:	2000      	movs	r0, #0
    5c14:	7008      	strb	r0, [r1, #0]
    5c16:	4770      	bx	lr
    5c18:	2000028f 	.word	0x2000028f

00005c1c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    5c1c:	b570      	push	{r4, r5, r6, lr}
    5c1e:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    5c22:	b28b      	uxth	r3, r1
    5c24:	7ac5      	ldrb	r5, [r0, #11]
    5c26:	ea83 0102 	eor.w	r1, r3, r2
    5c2a:	2200      	movs	r2, #0
    5c2c:	b2cc      	uxtb	r4, r1
    5c2e:	0a09      	lsrs	r1, r1, #8
    5c30:	fa94 f4a4 	rbit	r4, r4
    5c34:	fa91 f1a1 	rbit	r1, r1
    5c38:	0e24      	lsrs	r4, r4, #24
    5c3a:	0e09      	lsrs	r1, r1, #24
    5c3c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    5c40:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    5c44:	1c52      	adds	r2, r2, #1
    5c46:	4419      	add	r1, r3
    5c48:	b2d2      	uxtb	r2, r2
    5c4a:	b289      	uxth	r1, r1
    5c4c:	2a03      	cmp	r2, #3
    5c4e:	d3ed      	bcc.n	5c2c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    5c50:	4059      	eors	r1, r3
    5c52:	2225      	movs	r2, #37	; 0x25
    5c54:	fbb1 f3f2 	udiv	r3, r1, r2
    5c58:	fb02 1213 	mls	r2, r2, r3, r1
    5c5c:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    5c60:	f002 0607 	and.w	r6, r2, #7
    5c64:	785b      	ldrb	r3, [r3, #1]
    5c66:	2401      	movs	r4, #1
    5c68:	fa04 f606 	lsl.w	r6, r4, r6
    5c6c:	4233      	tst	r3, r6
    5c6e:	d001      	beq.n	5c74 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    5c70:	4610      	mov	r0, r2
    5c72:	bd70      	pop	{r4, r5, r6, pc}
    5c74:	434d      	muls	r5, r1
    5c76:	0c29      	lsrs	r1, r5, #16
    5c78:	1c49      	adds	r1, r1, #1
    5c7a:	b2c9      	uxtb	r1, r1
    5c7c:	2200      	movs	r2, #0
    5c7e:	1885      	adds	r5, r0, r2
    5c80:	79ab      	ldrb	r3, [r5, #6]
    5c82:	428b      	cmp	r3, r1
    5c84:	d312      	bcc.n	5cac <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    5c86:	f895 5001 	ldrb.w	r5, [r5, #1]
    5c8a:	2300      	movs	r3, #0
    5c8c:	fa04 f603 	lsl.w	r6, r4, r3
    5c90:	4235      	tst	r5, r6
    5c92:	d001      	beq.n	5c98 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    5c94:	1e49      	subs	r1, r1, #1
    5c96:	b2c9      	uxtb	r1, r1
    5c98:	b121      	cbz	r1, 5ca4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    5c9a:	1c5b      	adds	r3, r3, #1
    5c9c:	b2db      	uxtb	r3, r3
    5c9e:	2b08      	cmp	r3, #8
    5ca0:	d3f4      	bcc.n	5c8c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    5ca2:	e005      	b.n	5cb0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    5ca4:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    5ca8:	b2c0      	uxtb	r0, r0
    5caa:	bd70      	pop	{r4, r5, r6, pc}
    5cac:	1ac9      	subs	r1, r1, r3
    5cae:	b2c9      	uxtb	r1, r1
    5cb0:	1c52      	adds	r2, r2, #1
    5cb2:	b2d2      	uxtb	r2, r2
    5cb4:	2a05      	cmp	r2, #5
    5cb6:	d3e2      	bcc.n	5c7e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    5cb8:	f240 110d 	movw	r1, #269	; 0x10d
    5cbc:	2046      	movs	r0, #70	; 0x46
    5cbe:	f7fe f819 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cc2:	0000      	movs	r0, r0
    5cc4:	b570      	push	{r4, r5, r6, lr}
    5cc6:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    5cca:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    5cce:	2401      	movs	r4, #1
    5cd0:	fb03 2101 	mla	r1, r3, r1, r2
    5cd4:	2225      	movs	r2, #37	; 0x25
    5cd6:	fbb1 f3f2 	udiv	r3, r1, r2
    5cda:	fb02 1113 	mls	r1, r2, r3, r1
    5cde:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    5ce2:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    5ce6:	f001 0307 	and.w	r3, r1, #7
    5cea:	7d92      	ldrb	r2, [r2, #22]
    5cec:	fa04 f303 	lsl.w	r3, r4, r3
    5cf0:	421a      	tst	r2, r3
    5cf2:	d003      	beq.n	5cfc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    5cf4:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    5cf8:	2000      	movs	r0, #0
    5cfa:	bd70      	pop	{r4, r5, r6, pc}
    5cfc:	f890 2020 	ldrb.w	r2, [r0, #32]
    5d00:	fbb1 f3f2 	udiv	r3, r1, r2
    5d04:	fb02 1113 	mls	r1, r2, r3, r1
    5d08:	1c49      	adds	r1, r1, #1
    5d0a:	b2c9      	uxtb	r1, r1
    5d0c:	2300      	movs	r3, #0
    5d0e:	18c5      	adds	r5, r0, r3
    5d10:	7eea      	ldrb	r2, [r5, #27]
    5d12:	428a      	cmp	r2, r1
    5d14:	d311      	bcc.n	5d3a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    5d16:	f895 5016 	ldrb.w	r5, [r5, #22]
    5d1a:	2200      	movs	r2, #0
    5d1c:	fa04 f602 	lsl.w	r6, r4, r2
    5d20:	4235      	tst	r5, r6
    5d22:	d001      	beq.n	5d28 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    5d24:	1e49      	subs	r1, r1, #1
    5d26:	b2c9      	uxtb	r1, r1
    5d28:	b121      	cbz	r1, 5d34 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    5d2a:	1c52      	adds	r2, r2, #1
    5d2c:	b2d2      	uxtb	r2, r2
    5d2e:	2a08      	cmp	r2, #8
    5d30:	d3f4      	bcc.n	5d1c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    5d32:	e004      	b.n	5d3e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    5d34:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5d38:	e7dc      	b.n	5cf4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    5d3a:	1a89      	subs	r1, r1, r2
    5d3c:	b2c9      	uxtb	r1, r1
    5d3e:	1c5b      	adds	r3, r3, #1
    5d40:	b2db      	uxtb	r3, r3
    5d42:	2b05      	cmp	r3, #5
    5d44:	d3e3      	bcc.n	5d0e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    5d46:	201f      	movs	r0, #31
    5d48:	bd70      	pop	{r4, r5, r6, pc}
	...

00005d4c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5d4c:	7841      	ldrb	r1, [r0, #1]
    5d4e:	b141      	cbz	r1, 5d62 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5d50:	78c0      	ldrb	r0, [r0, #3]
    5d52:	2819      	cmp	r0, #25
    5d54:	d203      	bcs.n	5d5e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5d56:	4a04      	ldr	r2, [pc, #16]	; (5d68 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5d58:	5c10      	ldrb	r0, [r2, r0]
    5d5a:	4288      	cmp	r0, r1
    5d5c:	d101      	bne.n	5d62 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5d5e:	2001      	movs	r0, #1
    5d60:	4770      	bx	lr
    5d62:	2000      	movs	r0, #0
    5d64:	4770      	bx	lr
    5d66:	0000      	.short	0x0000
    5d68:	0000f914 	.word	0x0000f914

00005d6c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5d6c:	b510      	push	{r4, lr}
    5d6e:	2201      	movs	r2, #1
    5d70:	70c1      	strb	r1, [r0, #3]
    5d72:	2919      	cmp	r1, #25
    5d74:	d202      	bcs.n	5d7c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5d76:	4a06      	ldr	r2, [pc, #24]	; (5d90 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5d78:	5c52      	ldrb	r2, [r2, r1]
    5d7a:	e006      	b.n	5d8a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5d7c:	29ff      	cmp	r1, #255	; 0xff
    5d7e:	d004      	beq.n	5d8a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5d80:	f240 31d5 	movw	r1, #981	; 0x3d5
    5d84:	202a      	movs	r0, #42	; 0x2a
    5d86:	f7fd ffb5 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d8a:	7042      	strb	r2, [r0, #1]
    5d8c:	bd10      	pop	{r4, pc}
    5d8e:	0000      	.short	0x0000
    5d90:	0000f914 	.word	0x0000f914

00005d94 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    5d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d98:	ea5f 0900 	movs.w	r9, r0
    5d9c:	d006      	beq.n	5dac <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    5d9e:	4c21      	ldr	r4, [pc, #132]	; (5e24 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    5da0:	f104 0010 	add.w	r0, r4, #16
    5da4:	7b61      	ldrb	r1, [r4, #13]
    5da6:	4682      	mov	sl, r0
    5da8:	b119      	cbz	r1, 5db2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    5daa:	e00b      	b.n	5dc4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5dac:	f240 3193 	movw	r1, #915	; 0x393
    5db0:	e005      	b.n	5dbe <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    5db2:	2100      	movs	r1, #0
    5db4:	f008 f940 	bl	e038 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    5db8:	b120      	cbz	r0, 5dc4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5dba:	f240 3196 	movw	r1, #918	; 0x396
    5dbe:	202b      	movs	r0, #43	; 0x2b
    5dc0:	f7fd ff98 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5dc4:	8a26      	ldrh	r6, [r4, #16]
    5dc6:	2000      	movs	r0, #0
    5dc8:	f7fe f978 	bl	40bc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    5dcc:	4f16      	ldr	r7, [pc, #88]	; (5e28 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    5dce:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5e2c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    5dd2:	4605      	mov	r5, r0
    5dd4:	6839      	ldr	r1, [r7, #0]
    5dd6:	b129      	cbz	r1, 5de4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x50>
    5dd8:	8a20      	ldrh	r0, [r4, #16]
    5dda:	42a8      	cmp	r0, r5
    5ddc:	d102      	bne.n	5de4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x50>
    5dde:	4648      	mov	r0, r9
    5de0:	4788      	blx	r1
    5de2:	e005      	b.n	5df0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5de4:	f8d8 2000 	ldr.w	r2, [r8]
    5de8:	b11a      	cbz	r2, 5df2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5e>
    5dea:	8a20      	ldrh	r0, [r4, #16]
    5dec:	4649      	mov	r1, r9
    5dee:	4790      	blx	r2
    5df0:	b998      	cbnz	r0, 5e1a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    5df2:	2100      	movs	r1, #0
    5df4:	4650      	mov	r0, sl
    5df6:	f008 f91f 	bl	e038 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    5dfa:	b910      	cbnz	r0, 5e02 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6e>
    5dfc:	8a20      	ldrh	r0, [r4, #16]
    5dfe:	42b0      	cmp	r0, r6
    5e00:	d1e8      	bne.n	5dd4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    5e02:	480b      	ldr	r0, [pc, #44]	; (5e30 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    5e04:	6801      	ldr	r1, [r0, #0]
    5e06:	b111      	cbz	r1, 5e0e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    5e08:	4648      	mov	r0, r9
    5e0a:	4788      	blx	r1
    5e0c:	b928      	cbnz	r0, 5e1a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    5e0e:	4809      	ldr	r0, [pc, #36]	; (5e34 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xa0>)
    5e10:	6801      	ldr	r1, [r0, #0]
    5e12:	b129      	cbz	r1, 5e20 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5e14:	4648      	mov	r0, r9
    5e16:	4788      	blx	r1
    5e18:	b110      	cbz	r0, 5e20 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5e1a:	2001      	movs	r0, #1
    5e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e20:	2000      	movs	r0, #0
    5e22:	e7fb      	b.n	5e1c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    5e24:	20000f00 	.word	0x20000f00
    5e28:	20000218 	.word	0x20000218
    5e2c:	2000020c 	.word	0x2000020c
    5e30:	2000021c 	.word	0x2000021c
    5e34:	20000208 	.word	0x20000208

00005e38 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    5e38:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e3c:	b087      	sub	sp, #28
    5e3e:	460c      	mov	r4, r1
    5e40:	a902      	add	r1, sp, #8
    5e42:	9807      	ldr	r0, [sp, #28]
    5e44:	f007 fd79 	bl	d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5e48:	2800      	cmp	r0, #0
    5e4a:	d17d      	bne.n	5f48 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5e4c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 5f70 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x138>
    5e50:	f04f 0801 	mov.w	r8, #1
    5e54:	4682      	mov	sl, r0
    5e56:	9803      	ldr	r0, [sp, #12]
    5e58:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    5e5c:	2800      	cmp	r0, #0
    5e5e:	d00c      	beq.n	5e7a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5e60:	f8d9 2000 	ldr.w	r2, [r9]
    5e64:	b162      	cbz	r2, 5e80 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5e66:	4621      	mov	r1, r4
    5e68:	9807      	ldr	r0, [sp, #28]
    5e6a:	4790      	blx	r2
    5e6c:	b140      	cbz	r0, 5e80 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5e6e:	4620      	mov	r0, r4
    5e70:	f000 f9c0 	bl	61f4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1b0>
    5e74:	2800      	cmp	r0, #0
    5e76:	d1ee      	bne.n	5e56 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    5e78:	2001      	movs	r0, #1
    5e7a:	b009      	add	sp, #36	; 0x24
    5e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e80:	9d03      	ldr	r5, [sp, #12]
    5e82:	f895 0120 	ldrb.w	r0, [r5, #288]	; 0x120
    5e86:	3578      	adds	r5, #120	; 0x78
    5e88:	b950      	cbnz	r0, 5ea0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5e8a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    5e8e:	f88d 0004 	strb.w	r0, [sp, #4]
    5e92:	9801      	ldr	r0, [sp, #4]
    5e94:	9001      	str	r0, [sp, #4]
    5e96:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5e9a:	b108      	cbz	r0, 5ea0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5e9c:	2001      	movs	r0, #1
    5e9e:	e000      	b.n	5ea2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    5ea0:	2000      	movs	r0, #0
    5ea2:	4683      	mov	fp, r0
    5ea4:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
    5ea8:	b1c0      	cbz	r0, 5edc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    5eaa:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
    5eae:	0780      	lsls	r0, r0, #30
    5eb0:	d514      	bpl.n	5edc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    5eb2:	f884 a001 	strb.w	sl, [r4, #1]
    5eb6:	f884 8000 	strb.w	r8, [r4]
    5eba:	f884 a004 	strb.w	sl, [r4, #4]
    5ebe:	9907      	ldr	r1, [sp, #28]
    5ec0:	f8a4 1005 	strh.w	r1, [r4, #5]
    5ec4:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
    5ec8:	71e1      	strb	r1, [r4, #7]
    5eca:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    5ece:	8121      	strh	r1, [r4, #8]
    5ed0:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    5ed4:	8161      	strh	r1, [r4, #10]
    5ed6:	f885 a047 	strb.w	sl, [r5, #71]	; 0x47
    5eda:	e7c8      	b.n	5e6e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5edc:	9807      	ldr	r0, [sp, #28]
    5ede:	f7fe fb1d 	bl	451c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5ee2:	0007      	movs	r7, r0
    5ee4:	d00d      	beq.n	5f02 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xca>
    5ee6:	f007 f9bf 	bl	d268 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    5eea:	0006      	movs	r6, r0
    5eec:	d015      	beq.n	5f1a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe2>
    5eee:	f884 a001 	strb.w	sl, [r4, #1]
    5ef2:	200f      	movs	r0, #15
    5ef4:	7020      	strb	r0, [r4, #0]
    5ef6:	9807      	ldr	r0, [sp, #28]
    5ef8:	80e0      	strh	r0, [r4, #6]
    5efa:	8126      	strh	r6, [r4, #8]
    5efc:	f884 8004 	strb.w	r8, [r4, #4]
    5f00:	e007      	b.n	5f12 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xda>
    5f02:	f240 213a 	movw	r1, #570	; 0x23a
    5f06:	e02d      	b.n	5f64 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    5f08:	2100      	movs	r1, #0
    5f0a:	4638      	mov	r0, r7
    5f0c:	460a      	mov	r2, r1
    5f0e:	f007 facf 	bl	d4b0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    5f12:	1e76      	subs	r6, r6, #1
    5f14:	b2b6      	uxth	r6, r6
    5f16:	d2f7      	bcs.n	5f08 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd0>
    5f18:	e7a9      	b.n	5e6e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5f1a:	9807      	ldr	r0, [sp, #28]
    5f1c:	f7fe fae8 	bl	44f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5f20:	b1f0      	cbz	r0, 5f60 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x128>
    5f22:	f1bb 0f00 	cmp.w	fp, #0
    5f26:	d020      	beq.n	5f6a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    5f28:	f007 f8b8 	bl	d09c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5f2c:	b160      	cbz	r0, 5f48 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5f2e:	9807      	ldr	r0, [sp, #28]
    5f30:	f007 fbe8 	bl	d704 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5f34:	2100      	movs	r1, #0
    5f36:	9807      	ldr	r0, [sp, #28]
    5f38:	f7fe f95a 	bl	41f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5f3c:	f884 a001 	strb.w	sl, [r4, #1]
    5f40:	210c      	movs	r1, #12
    5f42:	4650      	mov	r0, sl
    5f44:	7021      	strb	r1, [r4, #0]
    5f46:	e000      	b.n	5f4a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    5f48:	e00f      	b.n	5f6a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    5f4a:	f884 a004 	strb.w	sl, [r4, #4]
    5f4e:	9907      	ldr	r1, [sp, #28]
    5f50:	f8a4 1005 	strh.w	r1, [r4, #5]
    5f54:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    5f58:	71e1      	strb	r1, [r4, #7]
    5f5a:	3524      	adds	r5, #36	; 0x24
    5f5c:	7028      	strb	r0, [r5, #0]
    5f5e:	e786      	b.n	5e6e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5f60:	f44f 7116 	mov.w	r1, #600	; 0x258
    5f64:	202b      	movs	r0, #43	; 0x2b
    5f66:	f7fd fec5 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f6a:	2000      	movs	r0, #0
    5f6c:	e785      	b.n	5e7a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5f6e:	0000      	.short	0x0000
    5f70:	20000210 	.word	0x20000210

00005f74 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI>:
    5f74:	b570      	push	{r4, r5, r6, lr}
    5f76:	4604      	mov	r4, r0
    5f78:	481b      	ldr	r0, [pc, #108]	; (5fe8 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x74>)
    5f7a:	6801      	ldr	r1, [r0, #0]
    5f7c:	b319      	cbz	r1, 5fc6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x52>
    5f7e:	4620      	mov	r0, r4
    5f80:	4788      	blx	r1
    5f82:	b300      	cbz	r0, 5fc6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x52>
    5f84:	7820      	ldrb	r0, [r4, #0]
    5f86:	2818      	cmp	r0, #24
    5f88:	d002      	beq.n	5f90 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x1c>
    5f8a:	2805      	cmp	r0, #5
    5f8c:	d016      	beq.n	5fbc <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x48>
    5f8e:	e018      	b.n	5fc2 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    5f90:	7920      	ldrb	r0, [r4, #4]
    5f92:	2801      	cmp	r0, #1
    5f94:	d115      	bne.n	5fc2 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    5f96:	88e0      	ldrh	r0, [r4, #6]
    5f98:	2100      	movs	r1, #0
    5f9a:	f007 fb50 	bl	d63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5f9e:	0004      	movs	r4, r0
    5fa0:	d00f      	beq.n	5fc2 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    5fa2:	8820      	ldrh	r0, [r4, #0]
    5fa4:	f007 fbae 	bl	d704 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5fa8:	8820      	ldrh	r0, [r4, #0]
    5faa:	2100      	movs	r1, #0
    5fac:	f7fe f920 	bl	41f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5fb0:	b138      	cbz	r0, 5fc2 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    5fb2:	f240 2192 	movw	r1, #658	; 0x292
    5fb6:	202b      	movs	r0, #43	; 0x2b
    5fb8:	f7fd fe9c 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fbc:	4620      	mov	r0, r4
    5fbe:	f000 f85b 	bl	6078 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    5fc2:	2001      	movs	r0, #1
    5fc4:	bd70      	pop	{r4, r5, r6, pc}
    5fc6:	4d09      	ldr	r5, [pc, #36]	; (5fec <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x78>)
    5fc8:	7868      	ldrb	r0, [r5, #1]
    5fca:	2800      	cmp	r0, #0
    5fcc:	d0fa      	beq.n	5fc4 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x50>
    5fce:	2600      	movs	r6, #0
    5fd0:	7066      	strb	r6, [r4, #1]
    5fd2:	2014      	movs	r0, #20
    5fd4:	7020      	strb	r0, [r4, #0]
    5fd6:	2220      	movs	r2, #32
    5fd8:	4631      	mov	r1, r6
    5fda:	1d20      	adds	r0, r4, #4
    5fdc:	f006 fb0c 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5fe0:	2002      	movs	r0, #2
    5fe2:	7120      	strb	r0, [r4, #4]
    5fe4:	706e      	strb	r6, [r5, #1]
    5fe6:	e7ec      	b.n	5fc2 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    5fe8:	20000214 	.word	0x20000214
    5fec:	20000f00 	.word	0x20000f00

00005ff0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    5ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ff4:	4c12      	ldr	r4, [pc, #72]	; (6040 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5ff6:	4607      	mov	r7, r0
    5ff8:	460e      	mov	r6, r1
    5ffa:	7de0      	ldrb	r0, [r4, #23]
    5ffc:	b110      	cbz	r0, 6004 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    5ffe:	8b20      	ldrh	r0, [r4, #24]
    6000:	2800      	cmp	r0, #0
    6002:	d012      	beq.n	602a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6004:	480e      	ldr	r0, [pc, #56]	; (6040 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6006:	300e      	adds	r0, #14
    6008:	4680      	mov	r8, r0
    600a:	f007 ffcb 	bl	dfa4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    600e:	b9a8      	cbnz	r0, 603c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6010:	89e5      	ldrh	r5, [r4, #14]
    6012:	89e0      	ldrh	r0, [r4, #14]
    6014:	4632      	mov	r2, r6
    6016:	4639      	mov	r1, r7
    6018:	f007 ffc7 	bl	dfaa <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x6>
    601c:	b138      	cbz	r0, 602e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    601e:	7de0      	ldrb	r0, [r4, #23]
    6020:	b110      	cbz	r0, 6028 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    6022:	8b20      	ldrh	r0, [r4, #24]
    6024:	1e40      	subs	r0, r0, #1
    6026:	8320      	strh	r0, [r4, #24]
    6028:	2001      	movs	r0, #1
    602a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    602e:	4640      	mov	r0, r8
    6030:	f007 ffb8 	bl	dfa4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6034:	b910      	cbnz	r0, 603c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6036:	89e0      	ldrh	r0, [r4, #14]
    6038:	42a8      	cmp	r0, r5
    603a:	d1ea      	bne.n	6012 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    603c:	2000      	movs	r0, #0
    603e:	e7f4      	b.n	602a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6040:	20000f00 	.word	0x20000f00

00006044 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    6044:	b510      	push	{r4, lr}
    6046:	7901      	ldrb	r1, [r0, #4]
    6048:	b119      	cbz	r1, 6052 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    604a:	2901      	cmp	r1, #1
    604c:	d006      	beq.n	605c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    604e:	2000      	movs	r0, #0
    6050:	bd10      	pop	{r4, pc}
    6052:	8842      	ldrh	r2, [r0, #2]
    6054:	6883      	ldr	r3, [r0, #8]
    6056:	8800      	ldrh	r0, [r0, #0]
    6058:	2102      	movs	r1, #2
    605a:	e003      	b.n	6064 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    605c:	8842      	ldrh	r2, [r0, #2]
    605e:	6883      	ldr	r3, [r0, #8]
    6060:	8800      	ldrh	r0, [r0, #0]
    6062:	2101      	movs	r1, #1
    6064:	f000 f878 	bl	6158 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x114>
    6068:	b910      	cbnz	r0, 6070 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    606a:	4902      	ldr	r1, [pc, #8]	; (6074 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    606c:	2001      	movs	r0, #1
    606e:	7008      	strb	r0, [r1, #0]
    6070:	2001      	movs	r0, #1
    6072:	bd10      	pop	{r4, pc}
    6074:	20000f00 	.word	0x20000f00
    6078:	b570      	push	{r4, r5, r6, lr}
    607a:	4604      	mov	r4, r0
    607c:	7800      	ldrb	r0, [r0, #0]
    607e:	2805      	cmp	r0, #5
    6080:	d002      	beq.n	6088 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x44>
    6082:	f240 1187 	movw	r1, #391	; 0x187
    6086:	e059      	b.n	613c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    6088:	7ba0      	ldrb	r0, [r4, #14]
    608a:	06c0      	lsls	r0, r0, #27
    608c:	d402      	bmi.n	6094 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x50>
    608e:	f44f 71c4 	mov.w	r1, #392	; 0x188
    6092:	e053      	b.n	613c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    6094:	221c      	movs	r2, #28
    6096:	1d21      	adds	r1, r4, #4
    6098:	482e      	ldr	r0, [pc, #184]	; (6154 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    609a:	f006 fa33 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    609e:	482d      	ldr	r0, [pc, #180]	; (6154 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    60a0:	7b22      	ldrb	r2, [r4, #12]
    60a2:	f104 0120 	add.w	r1, r4, #32
    60a6:	301c      	adds	r0, #28
    60a8:	f006 fa2c 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    60ac:	4829      	ldr	r0, [pc, #164]	; (6154 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    60ae:	f04f 0201 	mov.w	r2, #1
    60b2:	7a81      	ldrb	r1, [r0, #10]
    60b4:	0749      	lsls	r1, r1, #29
    60b6:	d502      	bpl.n	60be <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7a>
    60b8:	7cc1      	ldrb	r1, [r0, #19]
    60ba:	29fe      	cmp	r1, #254	; 0xfe
    60bc:	d00c      	beq.n	60d8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x94>
    60be:	2304      	movs	r3, #4
    60c0:	7023      	strb	r3, [r4, #0]
    60c2:	6801      	ldr	r1, [r0, #0]
    60c4:	6061      	str	r1, [r4, #4]
    60c6:	6841      	ldr	r1, [r0, #4]
    60c8:	60a1      	str	r1, [r4, #8]
    60ca:	8901      	ldrh	r1, [r0, #8]
    60cc:	81a1      	strh	r1, [r4, #12]
    60ce:	7a81      	ldrb	r1, [r0, #10]
    60d0:	070d      	lsls	r5, r1, #28
    60d2:	d519      	bpl.n	6108 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    60d4:	73a3      	strb	r3, [r4, #14]
    60d6:	e02c      	b.n	6132 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    60d8:	2113      	movs	r1, #19
    60da:	7021      	strb	r1, [r4, #0]
    60dc:	7801      	ldrb	r1, [r0, #0]
    60de:	7121      	strb	r1, [r4, #4]
    60e0:	7162      	strb	r2, [r4, #5]
    60e2:	7841      	ldrb	r1, [r0, #1]
    60e4:	71a1      	strb	r1, [r4, #6]
    60e6:	f8d0 1002 	ldr.w	r1, [r0, #2]
    60ea:	f8c4 1007 	str.w	r1, [r4, #7]
    60ee:	88c1      	ldrh	r1, [r0, #6]
    60f0:	f8a4 100b 	strh.w	r1, [r4, #11]
    60f4:	21fe      	movs	r1, #254	; 0xfe
    60f6:	7361      	strb	r1, [r4, #13]
    60f8:	6941      	ldr	r1, [r0, #20]
    60fa:	f8c4 100e 	str.w	r1, [r4, #14]
    60fe:	8b01      	ldrh	r1, [r0, #24]
    6100:	8261      	strh	r1, [r4, #18]
    6102:	7a40      	ldrb	r0, [r0, #9]
    6104:	7520      	strb	r0, [r4, #20]
    6106:	bd70      	pop	{r4, r5, r6, pc}
    6108:	07cb      	lsls	r3, r1, #31
    610a:	d003      	beq.n	6114 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    610c:	078b      	lsls	r3, r1, #30
    610e:	d501      	bpl.n	6114 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    6110:	2100      	movs	r1, #0
    6112:	e00d      	b.n	6130 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    6114:	074b      	lsls	r3, r1, #29
    6116:	d501      	bpl.n	611c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd8>
    6118:	73a2      	strb	r2, [r4, #14]
    611a:	e00a      	b.n	6132 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    611c:	07ca      	lsls	r2, r1, #31
    611e:	d002      	beq.n	6126 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe2>
    6120:	f240 11cf 	movw	r1, #463	; 0x1cf
    6124:	e00a      	b.n	613c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    6126:	0789      	lsls	r1, r1, #30
    6128:	d501      	bpl.n	612e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xea>
    612a:	2102      	movs	r1, #2
    612c:	e000      	b.n	6130 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    612e:	2103      	movs	r1, #3
    6130:	73a1      	strb	r1, [r4, #14]
    6132:	7a02      	ldrb	r2, [r0, #8]
    6134:	2a1f      	cmp	r2, #31
    6136:	d904      	bls.n	6142 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfe>
    6138:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    613c:	202b      	movs	r0, #43	; 0x2b
    613e:	f7fd fdd9 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6142:	f104 000f 	add.w	r0, r4, #15
    6146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    614a:	4902      	ldr	r1, [pc, #8]	; (6154 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    614c:	311c      	adds	r1, #28
    614e:	f006 b9d9 	b.w	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6152:	0000      	.short	0x0000
    6154:	20000ec4 	.word	0x20000ec4
    6158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    615c:	468a      	mov	sl, r1
    615e:	4699      	mov	r9, r3
    6160:	4615      	mov	r5, r2
    6162:	4604      	mov	r4, r0
    6164:	a901      	add	r1, sp, #4
    6166:	f007 fbe8 	bl	d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    616a:	bbd8      	cbnz	r0, 61e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a0>
    616c:	9f02      	ldr	r7, [sp, #8]
    616e:	2001      	movs	r0, #1
    6170:	3778      	adds	r7, #120	; 0x78
    6172:	b18d      	cbz	r5, 6198 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x154>
    6174:	4620      	mov	r0, r4
    6176:	f7fe f9d1 	bl	451c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    617a:	0004      	movs	r4, r0
    617c:	d00e      	beq.n	619c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x158>
    617e:	4629      	mov	r1, r5
    6180:	f007 f8bf 	bl	d302 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6184:	0006      	movs	r6, r0
    6186:	d003      	beq.n	6190 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14c>
    6188:	4819      	ldr	r0, [pc, #100]	; (61f0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1ac>)
    618a:	8880      	ldrh	r0, [r0, #4]
    618c:	42a8      	cmp	r0, r5
    618e:	d207      	bcs.n	61a0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x15c>
    6190:	2000      	movs	r0, #0
    6192:	b004      	add	sp, #16
    6194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6198:	7538      	strb	r0, [r7, #20]
    619a:	e023      	b.n	61e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a0>
    619c:	2189      	movs	r1, #137	; 0x89
    619e:	e024      	b.n	61ea <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a6>
    61a0:	4620      	mov	r0, r4
    61a2:	4631      	mov	r1, r6
    61a4:	aa03      	add	r2, sp, #12
    61a6:	f007 f8a5 	bl	d2f4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    61aa:	9803      	ldr	r0, [sp, #12]
    61ac:	f04f 0800 	mov.w	r8, #0
    61b0:	f8a0 8000 	strh.w	r8, [r0]
    61b4:	f880 8002 	strb.w	r8, [r0, #2]
    61b8:	7d39      	ldrb	r1, [r7, #20]
    61ba:	b109      	cbz	r1, 61c0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17c>
    61bc:	f04f 0a02 	mov.w	sl, #2
    61c0:	4651      	mov	r1, sl
    61c2:	f007 fe69 	bl	de98 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    61c6:	4631      	mov	r1, r6
    61c8:	2603      	movs	r6, #3
    61ca:	4620      	mov	r0, r4
    61cc:	464a      	mov	r2, r9
    61ce:	462b      	mov	r3, r5
    61d0:	9600      	str	r6, [sp, #0]
    61d2:	f006 ff4c 	bl	d06e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    61d6:	4620      	mov	r0, r4
    61d8:	4629      	mov	r1, r5
    61da:	f007 f821 	bl	d220 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    61de:	b118      	cbz	r0, 61e8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a4>
    61e0:	f887 8014 	strb.w	r8, [r7, #20]
    61e4:	2001      	movs	r0, #1
    61e6:	e7d4      	b.n	6192 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14e>
    61e8:	219f      	movs	r1, #159	; 0x9f
    61ea:	202b      	movs	r0, #43	; 0x2b
    61ec:	f7fd fd82 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61f0:	20000f00 	.word	0x20000f00
    61f4:	b510      	push	{r4, lr}
    61f6:	492c      	ldr	r1, [pc, #176]	; (62a8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>)
    61f8:	b086      	sub	sp, #24
    61fa:	7d8a      	ldrb	r2, [r1, #22]
    61fc:	7801      	ldrb	r1, [r0, #0]
    61fe:	07d3      	lsls	r3, r2, #31
    6200:	d101      	bne.n	6206 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1c2>
    6202:	291d      	cmp	r1, #29
    6204:	d004      	beq.n	6210 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1cc>
    6206:	291c      	cmp	r1, #28
    6208:	d01e      	beq.n	6248 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x204>
    620a:	2915      	cmp	r1, #21
    620c:	d045      	beq.n	629a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x256>
    620e:	e049      	b.n	62a4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    6210:	8880      	ldrh	r0, [r0, #4]
    6212:	f8ad 0000 	strh.w	r0, [sp]
    6216:	a902      	add	r1, sp, #8
    6218:	f007 fb8f 	bl	d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    621c:	b108      	cbz	r0, 6222 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1de>
    621e:	2158      	movs	r1, #88	; 0x58
    6220:	e035      	b.n	628e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    6222:	9803      	ldr	r0, [sp, #12]
    6224:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    6228:	f88d 1002 	strb.w	r1, [sp, #2]
    622c:	7841      	ldrb	r1, [r0, #1]
    622e:	f88d 1003 	strb.w	r1, [sp, #3]
    6232:	8840      	ldrh	r0, [r0, #2]
    6234:	f8ad 0004 	strh.w	r0, [sp, #4]
    6238:	2102      	movs	r1, #2
    623a:	4668      	mov	r0, sp
    623c:	f004 fc7e 	bl	ab3c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6240:	b340      	cbz	r0, 6294 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    6242:	f240 114d 	movw	r1, #333	; 0x14d
    6246:	e022      	b.n	628e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    6248:	0791      	lsls	r1, r2, #30
    624a:	d42b      	bmi.n	62a4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    624c:	8884      	ldrh	r4, [r0, #4]
    624e:	a903      	add	r1, sp, #12
    6250:	4620      	mov	r0, r4
    6252:	f008 fe0e 	bl	ee72 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6256:	b110      	cbz	r0, 625e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x21a>
    6258:	f44f 71aa 	mov.w	r1, #340	; 0x154
    625c:	e017      	b.n	628e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    625e:	f8ad 4000 	strh.w	r4, [sp]
    6262:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6266:	f8ad 0002 	strh.w	r0, [sp, #2]
    626a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    626e:	f8ad 0004 	strh.w	r0, [sp, #4]
    6272:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6276:	f8ad 0006 	strh.w	r0, [sp, #6]
    627a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    627e:	f8ad 0008 	strh.w	r0, [sp, #8]
    6282:	4668      	mov	r0, sp
    6284:	f008 fe20 	bl	eec8 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6288:	b120      	cbz	r0, 6294 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    628a:	f240 115d 	movw	r1, #349	; 0x15d
    628e:	202b      	movs	r0, #43	; 0x2b
    6290:	f7fd fd30 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6294:	2001      	movs	r0, #1
    6296:	b006      	add	sp, #24
    6298:	bd10      	pop	{r4, pc}
    629a:	0751      	lsls	r1, r2, #29
    629c:	d402      	bmi.n	62a4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    629e:	7b80      	ldrb	r0, [r0, #14]
    62a0:	07c0      	lsls	r0, r0, #31
    62a2:	d0f7      	beq.n	6294 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    62a4:	2000      	movs	r0, #0
    62a6:	e7f6      	b.n	6296 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x252>
    62a8:	20000f00 	.word	0x20000f00

000062ac <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q>:
    62ac:	b510      	push	{r4, lr}
    62ae:	4603      	mov	r3, r0
    62b0:	4907      	ldr	r1, [pc, #28]	; (62d0 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0x24>)
    62b2:	4c08      	ldr	r4, [pc, #32]	; (62d4 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0x28>)
    62b4:	2001      	movs	r0, #1
    62b6:	780a      	ldrb	r2, [r1, #0]
    62b8:	1c52      	adds	r2, r2, #1
    62ba:	f002 021f 	and.w	r2, r2, #31
    62be:	700a      	strb	r2, [r1, #0]
    62c0:	fa00 f202 	lsl.w	r2, r0, r2
    62c4:	4222      	tst	r2, r4
    62c6:	d0f6      	beq.n	62b6 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0xa>
    62c8:	7809      	ldrb	r1, [r1, #0]
    62ca:	4088      	lsls	r0, r1
    62cc:	4058      	eors	r0, r3
    62ce:	bd10      	pop	{r4, pc}
    62d0:	20000295 	.word	0x20000295
    62d4:	abd7aeaa 	.word	0xabd7aeaa

000062d8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    62d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    62da:	f06f 021f 	mvn.w	r2, #31
    62de:	0c01      	lsrs	r1, r0, #16
    62e0:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    62e4:	251f      	movs	r5, #31
    62e6:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    62ea:	3854      	subs	r0, #84	; 0x54
    62ec:	d00d      	beq.n	630a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    62ee:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    62f2:	3855      	subs	r0, #85	; 0x55
    62f4:	d009      	beq.n	630a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    62f6:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    62fa:	38aa      	subs	r0, #170	; 0xaa
    62fc:	d005      	beq.n	630a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    62fe:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    6302:	38aa      	subs	r0, #170	; 0xaa
    6304:	d001      	beq.n	630a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6306:	2001      	movs	r0, #1
    6308:	e000      	b.n	630c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    630a:	2000      	movs	r0, #0
    630c:	2200      	movs	r2, #0
    630e:	4613      	mov	r3, r2
    6310:	ea4f 0402 	mov.w	r4, r2
    6314:	ea82 0701 	eor.w	r7, r2, r1
    6318:	43ff      	mvns	r7, r7
    631a:	431f      	orrs	r7, r3
    631c:	1c7f      	adds	r7, r7, #1
    631e:	d00f      	beq.n	6340 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    6320:	f006 0701 	and.w	r7, r6, #1
    6324:	0852      	lsrs	r2, r2, #1
    6326:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    632a:	f005 0701 	and.w	r7, r5, #1
    632e:	085b      	lsrs	r3, r3, #1
    6330:	0876      	lsrs	r6, r6, #1
    6332:	086d      	lsrs	r5, r5, #1
    6334:	1c64      	adds	r4, r4, #1
    6336:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    633a:	2c16      	cmp	r4, #22
    633c:	d3ea      	bcc.n	6314 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    633e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6340:	2000      	movs	r0, #0
    6342:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006344 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    6344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6348:	2500      	movs	r5, #0
    634a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 63d8 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x94>
    634e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 63dc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x98>
    6352:	4607      	mov	r7, r0
    6354:	260a      	movs	r6, #10
    6356:	2104      	movs	r1, #4
    6358:	4668      	mov	r0, sp
    635a:	f7fd fd75 	bl	3e48 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    635e:	9800      	ldr	r0, [sp, #0]
    6360:	ea00 0008 	and.w	r0, r0, r8
    6364:	ea40 0009 	orr.w	r0, r0, r9
    6368:	9000      	str	r0, [sp, #0]
    636a:	2000      	movs	r0, #0
    636c:	f7fd fea6 	bl	40bc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6370:	4604      	mov	r4, r0
    6372:	e019      	b.n	63a8 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x64>
    6374:	a901      	add	r1, sp, #4
    6376:	2000      	movs	r0, #0
    6378:	f007 f96a 	bl	d650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    637c:	e00e      	b.n	639c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    637e:	bf00      	nop
    6380:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    6384:	42b8      	cmp	r0, r7
    6386:	d009      	beq.n	639c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    6388:	9803      	ldr	r0, [sp, #12]
    638a:	9900      	ldr	r1, [sp, #0]
    638c:	6900      	ldr	r0, [r0, #16]
    638e:	4288      	cmp	r0, r1
    6390:	d104      	bne.n	639c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    6392:	4608      	mov	r0, r1
    6394:	f7ff ff8a 	bl	62ac <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q>
    6398:	9000      	str	r0, [sp, #0]
    639a:	e004      	b.n	63a6 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x62>
    639c:	a801      	add	r0, sp, #4
    639e:	f7fd fed9 	bl	4154 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    63a2:	0005      	movs	r5, r0
    63a4:	d0ec      	beq.n	6380 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3c>
    63a6:	1e64      	subs	r4, r4, #1
    63a8:	2c00      	cmp	r4, #0
    63aa:	dd01      	ble.n	63b0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x6c>
    63ac:	2d00      	cmp	r5, #0
    63ae:	d0e1      	beq.n	6374 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x30>
    63b0:	2000      	movs	r0, #0
    63b2:	f7fd fe83 	bl	40bc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    63b6:	b100      	cbz	r0, 63ba <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x76>
    63b8:	b155      	cbz	r5, 63d0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x8c>
    63ba:	9800      	ldr	r0, [sp, #0]
    63bc:	f7ff ff8c 	bl	62d8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    63c0:	1e76      	subs	r6, r6, #1
    63c2:	d001      	beq.n	63c8 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x84>
    63c4:	2800      	cmp	r0, #0
    63c6:	d0c6      	beq.n	6356 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x12>
    63c8:	9800      	ldr	r0, [sp, #0]
    63ca:	b004      	add	sp, #16
    63cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    63d0:	2152      	movs	r1, #82	; 0x52
    63d2:	200f      	movs	r0, #15
    63d4:	f7fd fc8e 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63d8:	abd7aeaa 	.word	0xabd7aeaa
    63dc:	10204115 	.word	0x10204115

000063e0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    63e0:	4801      	ldr	r0, [pc, #4]	; (63e8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    63e2:	6840      	ldr	r0, [r0, #4]
    63e4:	3080      	adds	r0, #128	; 0x80
    63e6:	4770      	bx	lr
    63e8:	200000ec 	.word	0x200000ec

000063ec <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    63ec:	b510      	push	{r4, lr}
    63ee:	4c1f      	ldr	r4, [pc, #124]	; (646c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x80>)
    63f0:	6860      	ldr	r0, [r4, #4]
    63f2:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    63f6:	f007 ff89 	bl	e30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    63fa:	6861      	ldr	r1, [r4, #4]
    63fc:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    6400:	3132      	adds	r1, #50	; 0x32
    6402:	f7fe fabd 	bl	4980 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6406:	6860      	ldr	r0, [r4, #4]
    6408:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    640c:	f007 ff85 	bl	e31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    6410:	6861      	ldr	r1, [r4, #4]
    6412:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
    6416:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    641a:	3132      	adds	r1, #50	; 0x32
    641c:	f007 ff62 	bl	e2e4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    6420:	b930      	cbnz	r0, 6430 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    6422:	6861      	ldr	r1, [r4, #4]
    6424:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    6428:	3132      	adds	r1, #50	; 0x32
    642a:	f007 ff64 	bl	e2f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    642e:	b108      	cbz	r0, 6434 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    6430:	2101      	movs	r1, #1
    6432:	e000      	b.n	6436 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    6434:	2100      	movs	r1, #0
    6436:	6860      	ldr	r0, [r4, #4]
    6438:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
    643c:	b919      	cbnz	r1, 6446 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    643e:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
    6442:	2900      	cmp	r1, #0
    6444:	d010      	beq.n	6468 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7c>
    6446:	2100      	movs	r1, #0
    6448:	6781      	str	r1, [r0, #120]	; 0x78
    644a:	f005 fee6 	bl	c21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    644e:	6861      	ldr	r1, [r4, #4]
    6450:	6448      	str	r0, [r1, #68]	; 0x44
    6452:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    6456:	b110      	cbz	r0, 645e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x72>
    6458:	2000      	movs	r0, #0
    645a:	f7ff f883 	bl	5564 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    645e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6462:	2000      	movs	r0, #0
    6464:	f000 bddc 	b.w	7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>
    6468:	bd10      	pop	{r4, pc}
    646a:	0000      	.short	0x0000
    646c:	200000ec 	.word	0x200000ec

00006470 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    6470:	b510      	push	{r4, lr}
    6472:	4c09      	ldr	r4, [pc, #36]	; (6498 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x28>)
    6474:	2803      	cmp	r0, #3
    6476:	6864      	ldr	r4, [r4, #4]
    6478:	d109      	bne.n	648e <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    647a:	63e1      	str	r1, [r4, #60]	; 0x3c
    647c:	b13b      	cbz	r3, 648e <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    647e:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    6482:	6819      	ldr	r1, [r3, #0]
    6484:	f8c4 104d 	str.w	r1, [r4, #77]	; 0x4d
    6488:	8899      	ldrh	r1, [r3, #4]
    648a:	f8a4 1051 	strh.w	r1, [r4, #81]	; 0x51
    648e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    6492:	2000      	movs	r0, #0
    6494:	bd10      	pop	{r4, pc}
    6496:	0000      	.short	0x0000
    6498:	200000ec 	.word	0x200000ec

0000649c <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    649c:	4807      	ldr	r0, [pc, #28]	; (64bc <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x20>)
    649e:	b508      	push	{r3, lr}
    64a0:	6840      	ldr	r0, [r0, #4]
    64a2:	7801      	ldrb	r1, [r0, #0]
    64a4:	f88d 1000 	strb.w	r1, [sp]
    64a8:	9900      	ldr	r1, [sp, #0]
    64aa:	9100      	str	r1, [sp, #0]
    64ac:	f89d 1000 	ldrb.w	r1, [sp]
    64b0:	b109      	cbz	r1, 64b6 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x1a>
    64b2:	8880      	ldrh	r0, [r0, #4]
    64b4:	bd08      	pop	{r3, pc}
    64b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    64ba:	bd08      	pop	{r3, pc}
    64bc:	200000ec 	.word	0x200000ec

000064c0 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q>:
    64c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64c2:	4604      	mov	r4, r0
    64c4:	f007 ff72 	bl	e3ac <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>
    64c8:	bb48      	cbnz	r0, 651e <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    64ca:	4e17      	ldr	r6, [pc, #92]	; (6528 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x68>)
    64cc:	6870      	ldr	r0, [r6, #4]
    64ce:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    64d2:	f88d 1000 	strb.w	r1, [sp]
    64d6:	9900      	ldr	r1, [sp, #0]
    64d8:	9100      	str	r1, [sp, #0]
    64da:	f89d 1000 	ldrb.w	r1, [sp]
    64de:	2500      	movs	r5, #0
    64e0:	b139      	cbz	r1, 64f2 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x32>
    64e2:	7065      	strb	r5, [r4, #1]
    64e4:	2107      	movs	r1, #7
    64e6:	7021      	strb	r1, [r4, #0]
    64e8:	6a41      	ldr	r1, [r0, #36]	; 0x24
    64ea:	6061      	str	r1, [r4, #4]
    64ec:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
    64f0:	e015      	b.n	651e <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    64f2:	4620      	mov	r0, r4
    64f4:	f000 f9d0 	bl	6898 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    64f8:	b988      	cbnz	r0, 651e <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    64fa:	6870      	ldr	r0, [r6, #4]
    64fc:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
    6500:	f88d 1000 	strb.w	r1, [sp]
    6504:	9900      	ldr	r1, [sp, #0]
    6506:	9100      	str	r1, [sp, #0]
    6508:	f89d 1000 	ldrb.w	r1, [sp]
    650c:	b149      	cbz	r1, 6522 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x62>
    650e:	7065      	strb	r5, [r4, #1]
    6510:	2118      	movs	r1, #24
    6512:	7021      	strb	r1, [r4, #0]
    6514:	f8d0 102a 	ldr.w	r1, [r0, #42]	; 0x2a
    6518:	6061      	str	r1, [r4, #4]
    651a:	300a      	adds	r0, #10
    651c:	7785      	strb	r5, [r0, #30]
    651e:	2001      	movs	r0, #1
    6520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6522:	2000      	movs	r0, #0
    6524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6526:	0000      	.short	0x0000
    6528:	200000ec 	.word	0x200000ec

0000652c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    652c:	4902      	ldr	r1, [pc, #8]	; (6538 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    652e:	6849      	ldr	r1, [r1, #4]
    6530:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
    6534:	2000      	movs	r0, #0
    6536:	4770      	bx	lr
    6538:	200000ec 	.word	0x200000ec

0000653c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    653c:	4809      	ldr	r0, [pc, #36]	; (6564 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x28>)
    653e:	6841      	ldr	r1, [r0, #4]
    6540:	6d48      	ldr	r0, [r1, #84]	; 0x54
    6542:	b168      	cbz	r0, 6560 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x24>
    6544:	f101 0059 	add.w	r0, r1, #89	; 0x59
    6548:	2201      	movs	r2, #1
    654a:	7002      	strb	r2, [r0, #0]
    654c:	2300      	movs	r3, #0
    654e:	654b      	str	r3, [r1, #84]	; 0x54
    6550:	7003      	strb	r3, [r0, #0]
    6552:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    6556:	4082      	lsls	r2, r0
    6558:	4803      	ldr	r0, [pc, #12]	; (6568 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    655a:	6002      	str	r2, [r0, #0]
    655c:	2000      	movs	r0, #0
    655e:	4770      	bx	lr
    6560:	200c      	movs	r0, #12
    6562:	4770      	bx	lr
    6564:	200000ec 	.word	0x200000ec
    6568:	4001f508 	.word	0x4001f508

0000656c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    656c:	4909      	ldr	r1, [pc, #36]	; (6594 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x28>)
    656e:	b510      	push	{r4, lr}
    6570:	6088      	str	r0, [r1, #8]
    6572:	68c8      	ldr	r0, [r1, #12]
    6574:	b150      	cbz	r0, 658c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x20>
    6576:	f000 ff55 	bl	7424 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x424>
    657a:	f000 f885 	bl	6688 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    657e:	2800      	cmp	r0, #0
    6580:	d007      	beq.n	6592 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x26>
    6582:	f640 0169 	movw	r1, #2153	; 0x869
    6586:	2032      	movs	r0, #50	; 0x32
    6588:	f7fd fbb4 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    658c:	f640 0165 	movw	r1, #2149	; 0x865
    6590:	e7f9      	b.n	6586 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x1a>
    6592:	bd10      	pop	{r4, pc}
    6594:	200000ec 	.word	0x200000ec

00006598 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    6598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    659c:	4c0f      	ldr	r4, [pc, #60]	; (65dc <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    659e:	4605      	mov	r5, r0
    65a0:	4616      	mov	r6, r2
    65a2:	6860      	ldr	r0, [r4, #4]
    65a4:	460f      	mov	r7, r1
    65a6:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    65aa:	f007 feb6 	bl	e31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    65ae:	b158      	cbz	r0, 65c8 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    65b0:	b955      	cbnz	r5, 65c8 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    65b2:	4638      	mov	r0, r7
    65b4:	f007 feaa 	bl	e30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    65b8:	4631      	mov	r1, r6
    65ba:	f007 f944 	bl	d846 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    65be:	2808      	cmp	r0, #8
    65c0:	d002      	beq.n	65c8 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    65c2:	2001      	movs	r0, #1
    65c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65c8:	6860      	ldr	r0, [r4, #4]
    65ca:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    65ce:	f007 fe9d 	bl	e30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    65d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    65d6:	f7fe b9ff 	b.w	49d8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    65da:	0000      	.short	0x0000
    65dc:	200000ec 	.word	0x200000ec

000065e0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    65e0:	b570      	push	{r4, r5, r6, lr}
    65e2:	4c13      	ldr	r4, [pc, #76]	; (6630 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    65e4:	4615      	mov	r5, r2
    65e6:	460e      	mov	r6, r1
    65e8:	2800      	cmp	r0, #0
    65ea:	d016      	beq.n	661a <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    65ec:	f04f 0200 	mov.w	r2, #0
    65f0:	6861      	ldr	r1, [r4, #4]
    65f2:	f801 2f39 	strb.w	r2, [r1, #57]!
    65f6:	7248      	strb	r0, [r1, #9]
    65f8:	f04f 0008 	mov.w	r0, #8
    65fc:	f881 002e 	strb.w	r0, [r1, #46]	; 0x2e
    6600:	d114      	bne.n	662c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    6602:	4630      	mov	r0, r6
    6604:	f007 fe82 	bl	e30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    6608:	4629      	mov	r1, r5
    660a:	f007 f91c 	bl	d846 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    660e:	6861      	ldr	r1, [r4, #4]
    6610:	2808      	cmp	r0, #8
    6612:	f881 0067 	strb.w	r0, [r1, #103]	; 0x67
    6616:	d003      	beq.n	6620 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    6618:	e008      	b.n	662c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    661a:	f04f 0201 	mov.w	r2, #1
    661e:	e7e7      	b.n	65f0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    6620:	4630      	mov	r0, r6
    6622:	f007 fe7a 	bl	e31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    6626:	b108      	cbz	r0, 662c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    6628:	2012      	movs	r0, #18
    662a:	bd70      	pop	{r4, r5, r6, pc}
    662c:	2000      	movs	r0, #0
    662e:	bd70      	pop	{r4, r5, r6, pc}
    6630:	200000ec 	.word	0x200000ec

00006634 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    6634:	4902      	ldr	r1, [pc, #8]	; (6640 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    6636:	4801      	ldr	r0, [pc, #4]	; (663c <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    6638:	60c8      	str	r0, [r1, #12]
    663a:	4770      	bx	lr
    663c:	00007668 	.word	0x00007668
    6640:	200000ec 	.word	0x200000ec

00006644 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    6644:	4902      	ldr	r1, [pc, #8]	; (6650 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    6646:	6849      	ldr	r1, [r1, #4]
    6648:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    664c:	4770      	bx	lr
    664e:	0000      	.short	0x0000
    6650:	200000ec 	.word	0x200000ec

00006654 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    6654:	b570      	push	{r4, r5, r6, lr}
    6656:	4605      	mov	r5, r0
    6658:	f7fd ff78 	bl	454c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    665c:	4604      	mov	r4, r0
    665e:	f7fd ff7b 	bl	4558 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    6662:	4621      	mov	r1, r4
    6664:	f007 fea0 	bl	e3a8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    6668:	0001      	movs	r1, r0
    666a:	d006      	beq.n	667a <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    666c:	4805      	ldr	r0, [pc, #20]	; (6684 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    666e:	68c0      	ldr	r0, [r0, #12]
    6670:	6802      	ldr	r2, [r0, #0]
    6672:	4628      	mov	r0, r5
    6674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6678:	4710      	bx	r2
    667a:	f640 1161 	movw	r1, #2401	; 0x961
    667e:	2032      	movs	r0, #50	; 0x32
    6680:	f7fd fb38 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6684:	200000ec 	.word	0x200000ec

00006688 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    6688:	b570      	push	{r4, r5, r6, lr}
    668a:	4d19      	ldr	r5, [pc, #100]	; (66f0 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    668c:	6868      	ldr	r0, [r5, #4]
    668e:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    6692:	2901      	cmp	r1, #1
    6694:	d004      	beq.n	66a0 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    6696:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    669a:	b108      	cbz	r0, 66a0 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    669c:	200c      	movs	r0, #12
    669e:	bd70      	pop	{r4, r5, r6, pc}
    66a0:	f7fd ff7e 	bl	45a0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    66a4:	f007 fee6 	bl	e474 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>
    66a8:	6868      	ldr	r0, [r5, #4]
    66aa:	2400      	movs	r4, #0
    66ac:	7004      	strb	r4, [r0, #0]
    66ae:	f100 0122 	add.w	r1, r0, #34	; 0x22
    66b2:	700c      	strb	r4, [r1, #0]
    66b4:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    66b8:	f000 f8b4 	bl	6824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    66bc:	6868      	ldr	r0, [r5, #4]
    66be:	2201      	movs	r2, #1
    66c0:	2107      	movs	r1, #7
    66c2:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
    66c6:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    66ca:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    66ce:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
    66d2:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
    66d6:	f880 407d 	strb.w	r4, [r0, #125]	; 0x7d
    66da:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    66de:	f100 0159 	add.w	r1, r0, #89	; 0x59
    66e2:	700a      	strb	r2, [r1, #0]
    66e4:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    66e8:	6544      	str	r4, [r0, #84]	; 0x54
    66ea:	700c      	strb	r4, [r1, #0]
    66ec:	2000      	movs	r0, #0
    66ee:	bd70      	pop	{r4, r5, r6, pc}
    66f0:	200000ec 	.word	0x200000ec

000066f4 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    66f4:	4805      	ldr	r0, [pc, #20]	; (670c <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    66f6:	b510      	push	{r4, lr}
    66f8:	6840      	ldr	r0, [r0, #4]
    66fa:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    66fe:	f007 fe05 	bl	e30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    6702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6706:	f7fe b967 	b.w	49d8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    670a:	0000      	.short	0x0000
    670c:	200000ec 	.word	0x200000ec

00006710 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    6710:	b140      	cbz	r0, 6724 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    6712:	2802      	cmp	r0, #2
    6714:	d006      	beq.n	6724 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    6716:	2200      	movs	r2, #0
    6718:	4903      	ldr	r1, [pc, #12]	; (6728 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    671a:	6849      	ldr	r1, [r1, #4]
    671c:	f801 2f39 	strb.w	r2, [r1, #57]!
    6720:	7208      	strb	r0, [r1, #8]
    6722:	4770      	bx	lr
    6724:	2201      	movs	r2, #1
    6726:	e7f7      	b.n	6718 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    6728:	200000ec 	.word	0x200000ec

0000672c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    672c:	4902      	ldr	r1, [pc, #8]	; (6738 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    672e:	6849      	ldr	r1, [r1, #4]
    6730:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    6734:	4770      	bx	lr
    6736:	0000      	.short	0x0000
    6738:	200000ec 	.word	0x200000ec

0000673c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    673c:	b510      	push	{r4, lr}
    673e:	4604      	mov	r4, r0
    6740:	7800      	ldrb	r0, [r0, #0]
    6742:	07c0      	lsls	r0, r0, #31
    6744:	d007      	beq.n	6756 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x1a>
    6746:	2300      	movs	r3, #0
    6748:	7860      	ldrb	r0, [r4, #1]
    674a:	461a      	mov	r2, r3
    674c:	4619      	mov	r1, r3
    674e:	f7ff fe8f 	bl	6470 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    6752:	2800      	cmp	r0, #0
    6754:	d10c      	bne.n	6770 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>
    6756:	4b07      	ldr	r3, [pc, #28]	; (6774 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x38>)
    6758:	78a0      	ldrb	r0, [r4, #2]
    675a:	6859      	ldr	r1, [r3, #4]
    675c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    6760:	78e0      	ldrb	r0, [r4, #3]
    6762:	f7ff ffd5 	bl	6710 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    6766:	6859      	ldr	r1, [r3, #4]
    6768:	7920      	ldrb	r0, [r4, #4]
    676a:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    676e:	2000      	movs	r0, #0
    6770:	bd10      	pop	{r4, pc}
    6772:	0000      	.short	0x0000
    6774:	200000ec 	.word	0x200000ec

00006778 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    6778:	4801      	ldr	r0, [pc, #4]	; (6780 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    677a:	68c0      	ldr	r0, [r0, #12]
    677c:	6840      	ldr	r0, [r0, #4]
    677e:	4700      	bx	r0
    6780:	200000ec 	.word	0x200000ec

00006784 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    6784:	b510      	push	{r4, lr}
    6786:	2000      	movs	r0, #0
    6788:	f000 fc70 	bl	706c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
    678c:	f000 f84a 	bl	6824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    6790:	f000 fe48 	bl	7424 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x424>
    6794:	4803      	ldr	r0, [pc, #12]	; (67a4 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x20>)
    6796:	6840      	ldr	r0, [r0, #4]
    6798:	2100      	movs	r1, #0
    679a:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    679e:	4608      	mov	r0, r1
    67a0:	bd10      	pop	{r4, pc}
    67a2:	0000      	.short	0x0000
    67a4:	200000ec 	.word	0x200000ec

000067a8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    67a8:	b510      	push	{r4, lr}
    67aa:	f000 f951 	bl	6a50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    67ae:	4909      	ldr	r1, [pc, #36]	; (67d4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x2c>)
    67b0:	2201      	movs	r2, #1
    67b2:	b130      	cbz	r0, 67c2 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1a>
    67b4:	6848      	ldr	r0, [r1, #4]
    67b6:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
    67ba:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    67bc:	881b      	ldrh	r3, [r3, #0]
    67be:	8583      	strh	r3, [r0, #44]	; 0x2c
    67c0:	e004      	b.n	67cc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x24>
    67c2:	684b      	ldr	r3, [r1, #4]
    67c4:	2000      	movs	r0, #0
    67c6:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
    67ca:	8598      	strh	r0, [r3, #44]	; 0x2c
    67cc:	6848      	ldr	r0, [r1, #4]
    67ce:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    67d2:	bd10      	pop	{r4, pc}
    67d4:	200000ec 	.word	0x200000ec

000067d8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    67d8:	4802      	ldr	r0, [pc, #8]	; (67e4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    67da:	6840      	ldr	r0, [r0, #4]
    67dc:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    67e0:	4770      	bx	lr
    67e2:	0000      	.short	0x0000
    67e4:	200000ec 	.word	0x200000ec

000067e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    67e8:	b510      	push	{r4, lr}
    67ea:	f000 f931 	bl	6a50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    67ee:	490c      	ldr	r1, [pc, #48]	; (6820 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    67f0:	b128      	cbz	r0, 67fe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    67f2:	6848      	ldr	r0, [r1, #4]
    67f4:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
    67f8:	2801      	cmp	r0, #1
    67fa:	d00e      	beq.n	681a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    67fc:	e00c      	b.n	6818 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    67fe:	6849      	ldr	r1, [r1, #4]
    6800:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    6804:	2801      	cmp	r0, #1
    6806:	d001      	beq.n	680c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    6808:	2802      	cmp	r0, #2
    680a:	d105      	bne.n	6818 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    680c:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    6810:	2801      	cmp	r0, #1
    6812:	d003      	beq.n	681c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    6814:	2803      	cmp	r0, #3
    6816:	d001      	beq.n	681c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    6818:	2000      	movs	r0, #0
    681a:	bd10      	pop	{r4, pc}
    681c:	2001      	movs	r0, #1
    681e:	bd10      	pop	{r4, pc}
    6820:	200000ec 	.word	0x200000ec
    6824:	b510      	push	{r4, lr}
    6826:	4c07      	ldr	r4, [pc, #28]	; (6844 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    6828:	6860      	ldr	r0, [r4, #4]
    682a:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    682e:	2800      	cmp	r0, #0
    6830:	d007      	beq.n	6842 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    6832:	f004 fe19 	bl	b468 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6836:	f004 fbfb 	bl	b030 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    683a:	6861      	ldr	r1, [r4, #4]
    683c:	2000      	movs	r0, #0
    683e:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    6842:	bd10      	pop	{r4, pc}
    6844:	200000ec 	.word	0x200000ec
    6848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    684c:	4d10      	ldr	r5, [pc, #64]	; (6890 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    684e:	4606      	mov	r6, r0
    6850:	460f      	mov	r7, r1
    6852:	6868      	ldr	r0, [r5, #4]
    6854:	490f      	ldr	r1, [pc, #60]	; (6894 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    6856:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    685a:	5c0c      	ldrb	r4, [r1, r0]
    685c:	4620      	mov	r0, r4
    685e:	f005 f967 	bl	bb30 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    6862:	6868      	ldr	r0, [r5, #4]
    6864:	2101      	movs	r1, #1
    6866:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74
    686a:	2025      	movs	r0, #37	; 0x25
    686c:	f008 ffc2 	bl	f7f4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    6870:	4638      	mov	r0, r7
    6872:	f005 f86f 	bl	b954 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6876:	f04f 0101 	mov.w	r1, #1
    687a:	4608      	mov	r0, r1
    687c:	b126      	cbz	r6, 6888 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    687e:	f004 fea5 	bl	b5cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6882:	b918      	cbnz	r0, 688c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    6884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6888:	f004 fe54 	bl	b534 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    688c:	2001      	movs	r0, #1
    688e:	e7f9      	b.n	6884 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    6890:	200000ec 	.word	0x200000ec
    6894:	0000f930 	.word	0x0000f930
    6898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    689a:	4e20      	ldr	r6, [pc, #128]	; (691c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
    689c:	4604      	mov	r4, r0
    689e:	6870      	ldr	r0, [r6, #4]
    68a0:	7801      	ldrb	r1, [r0, #0]
    68a2:	f88d 1000 	strb.w	r1, [sp]
    68a6:	9900      	ldr	r1, [sp, #0]
    68a8:	9100      	str	r1, [sp, #0]
    68aa:	f89d 1000 	ldrb.w	r1, [sp]
    68ae:	b389      	cbz	r1, 6914 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
    68b0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    68b2:	6882      	ldr	r2, [r0, #8]
    68b4:	f841 2f03 	str.w	r2, [r1, #3]!
    68b8:	8982      	ldrh	r2, [r0, #12]
    68ba:	808a      	strh	r2, [r1, #4]
    68bc:	79c0      	ldrb	r0, [r0, #7]
    68be:	f007 fd25 	bl	e30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    68c2:	6871      	ldr	r1, [r6, #4]
    68c4:	2500      	movs	r5, #0
    68c6:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    68c8:	1c89      	adds	r1, r1, #2
    68ca:	7090      	strb	r0, [r2, #2]
    68cc:	7065      	strb	r5, [r4, #1]
    68ce:	2014      	movs	r0, #20
    68d0:	7020      	strb	r0, [r4, #0]
    68d2:	2220      	movs	r2, #32
    68d4:	1d20      	adds	r0, r4, #4
    68d6:	f005 fe15 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    68da:	4a11      	ldr	r2, [pc, #68]	; (6920 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>)
    68dc:	7225      	strb	r5, [r4, #8]
    68de:	2301      	movs	r3, #1
    68e0:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    68e2:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    68e6:	6871      	ldr	r1, [r6, #4]
    68e8:	700d      	strb	r5, [r1, #0]
    68ea:	f101 0028 	add.w	r0, r1, #40	; 0x28
    68ee:	7005      	strb	r5, [r0, #0]
    68f0:	88e0      	ldrh	r0, [r4, #6]
    68f2:	8490      	strh	r0, [r2, #36]	; 0x24
    68f4:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    68f6:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    68fa:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
    68fe:	4610      	mov	r0, r2
    6900:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    6904:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    6906:	8800      	ldrh	r0, [r0, #0]
    6908:	f7fd fdf2 	bl	44f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    690c:	f006 fd82 	bl	d414 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    6910:	2001      	movs	r0, #1
    6912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6914:	e7ff      	b.n	6916 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e>
    6916:	2000      	movs	r0, #0
    6918:	e7fb      	b.n	6912 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12a>
    691a:	0000      	.short	0x0000
    691c:	200000ec 	.word	0x200000ec
    6920:	20000f1c 	.word	0x20000f1c
    6924:	b570      	push	{r4, r5, r6, lr}
    6926:	4c1d      	ldr	r4, [pc, #116]	; (699c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b4>)
    6928:	4605      	mov	r5, r0
    692a:	2907      	cmp	r1, #7
    692c:	6860      	ldr	r0, [r4, #4]
    692e:	f890 6039 	ldrb.w	r6, [r0, #57]	; 0x39
    6932:	d301      	bcc.n	6938 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x150>
    6934:	2000      	movs	r0, #0
    6936:	bd70      	pop	{r4, r5, r6, pc}
    6938:	7c68      	ldrb	r0, [r5, #17]
    693a:	6869      	ldr	r1, [r5, #4]
    693c:	f007 fcdb 	bl	e2f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6940:	6861      	ldr	r1, [r4, #4]
    6942:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    6946:	b141      	cbz	r1, 695a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x172>
    6948:	b138      	cbz	r0, 695a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x172>
    694a:	f006 ff72 	bl	d832 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    694e:	4601      	mov	r1, r0
    6950:	6860      	ldr	r0, [r4, #4]
    6952:	f800 1f64 	strb.w	r1, [r0, #100]!
    6956:	2101      	movs	r1, #1
    6958:	71c1      	strb	r1, [r0, #7]
    695a:	6863      	ldr	r3, [r4, #4]
    695c:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    6960:	28ff      	cmp	r0, #255	; 0xff
    6962:	d012      	beq.n	698a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a2>
    6964:	f883 0065 	strb.w	r0, [r3, #101]	; 0x65
    6968:	f7fe feaa 	bl	56c0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    696c:	4330      	orrs	r0, r6
    696e:	6869      	ldr	r1, [r5, #4]
    6970:	2900      	cmp	r1, #0
    6972:	d0e0      	beq.n	6936 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x14e>
    6974:	6861      	ldr	r1, [r4, #4]
    6976:	7c6a      	ldrb	r2, [r5, #17]
    6978:	f881 2075 	strb.w	r2, [r1, #117]	; 0x75
    697c:	686a      	ldr	r2, [r5, #4]
    697e:	6813      	ldr	r3, [r2, #0]
    6980:	f841 3f6e 	str.w	r3, [r1, #110]!
    6984:	8892      	ldrh	r2, [r2, #4]
    6986:	808a      	strh	r2, [r1, #4]
    6988:	bd70      	pop	{r4, r5, r6, pc}
    698a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
    698e:	7c68      	ldrb	r0, [r5, #17]
    6990:	3364      	adds	r3, #100	; 0x64
    6992:	6869      	ldr	r1, [r5, #4]
    6994:	f7fe ff10 	bl	57b8 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY>
    6998:	e7e9      	b.n	696e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x186>
    699a:	0000      	.short	0x0000
    699c:	200000ec 	.word	0x200000ec
    69a0:	b510      	push	{r4, lr}
    69a2:	4915      	ldr	r1, [pc, #84]	; (69f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x210>)
    69a4:	6842      	ldr	r2, [r0, #4]
    69a6:	6849      	ldr	r1, [r1, #4]
    69a8:	7813      	ldrb	r3, [r2, #0]
    69aa:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
    69ae:	42a3      	cmp	r3, r4
    69b0:	d11f      	bne.n	69f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    69b2:	7853      	ldrb	r3, [r2, #1]
    69b4:	f891 406f 	ldrb.w	r4, [r1, #111]	; 0x6f
    69b8:	42a3      	cmp	r3, r4
    69ba:	d11a      	bne.n	69f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    69bc:	7893      	ldrb	r3, [r2, #2]
    69be:	f891 4070 	ldrb.w	r4, [r1, #112]	; 0x70
    69c2:	42a3      	cmp	r3, r4
    69c4:	d115      	bne.n	69f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    69c6:	78d3      	ldrb	r3, [r2, #3]
    69c8:	f891 4071 	ldrb.w	r4, [r1, #113]	; 0x71
    69cc:	42a3      	cmp	r3, r4
    69ce:	d110      	bne.n	69f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    69d0:	7913      	ldrb	r3, [r2, #4]
    69d2:	f891 4072 	ldrb.w	r4, [r1, #114]	; 0x72
    69d6:	42a3      	cmp	r3, r4
    69d8:	d10b      	bne.n	69f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    69da:	7952      	ldrb	r2, [r2, #5]
    69dc:	f891 3073 	ldrb.w	r3, [r1, #115]	; 0x73
    69e0:	429a      	cmp	r2, r3
    69e2:	d106      	bne.n	69f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    69e4:	7c40      	ldrb	r0, [r0, #17]
    69e6:	f891 1075 	ldrb.w	r1, [r1, #117]	; 0x75
    69ea:	4288      	cmp	r0, r1
    69ec:	d101      	bne.n	69f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    69ee:	2001      	movs	r0, #1
    69f0:	bd10      	pop	{r4, pc}
    69f2:	2000      	movs	r0, #0
    69f4:	bd10      	pop	{r4, pc}
    69f6:	0000      	.short	0x0000
    69f8:	200000ec 	.word	0x200000ec
    69fc:	b530      	push	{r4, r5, lr}
    69fe:	7801      	ldrb	r1, [r0, #0]
    6a00:	b08b      	sub	sp, #44	; 0x2c
    6a02:	f001 040f 	and.w	r4, r1, #15
    6a06:	4622      	mov	r2, r4
    6a08:	a901      	add	r1, sp, #4
    6a0a:	f000 feb9 	bl	7780 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    6a0e:	a801      	add	r0, sp, #4
    6a10:	f7ff ffc6 	bl	69a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b8>
    6a14:	4605      	mov	r5, r0
    6a16:	f004 fd45 	bl	b4a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6a1a:	f000 fb41 	bl	70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    6a1e:	2c04      	cmp	r4, #4
    6a20:	d111      	bne.n	6a46 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25e>
    6a22:	b185      	cbz	r5, 6a46 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25e>
    6a24:	a80a      	add	r0, sp, #40	; 0x28
    6a26:	f000 fb47 	bl	70b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>
    6a2a:	f99d 0028 	ldrsb.w	r0, [sp, #40]	; 0x28
    6a2e:	9000      	str	r0, [sp, #0]
    6a30:	4806      	ldr	r0, [pc, #24]	; (6a4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x264>)
    6a32:	6840      	ldr	r0, [r0, #4]
    6a34:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    6a38:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    6a3c:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
    6a40:	a801      	add	r0, sp, #4
    6a42:	f007 fd19 	bl	e478 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    6a46:	b00b      	add	sp, #44	; 0x2c
    6a48:	2005      	movs	r0, #5
    6a4a:	bd30      	pop	{r4, r5, pc}
    6a4c:	200000ec 	.word	0x200000ec
    6a50:	4804      	ldr	r0, [pc, #16]	; (6a64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x27c>)
    6a52:	6840      	ldr	r0, [r0, #4]
    6a54:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6a58:	2803      	cmp	r0, #3
    6a5a:	d001      	beq.n	6a60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x278>
    6a5c:	2000      	movs	r0, #0
    6a5e:	4770      	bx	lr
    6a60:	2001      	movs	r0, #1
    6a62:	4770      	bx	lr
    6a64:	200000ec 	.word	0x200000ec
    6a68:	4908      	ldr	r1, [pc, #32]	; (6a8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a4>)
    6a6a:	b510      	push	{r4, lr}
    6a6c:	6849      	ldr	r1, [r1, #4]
    6a6e:	7c83      	ldrb	r3, [r0, #18]
    6a70:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    6a74:	429a      	cmp	r2, r3
    6a76:	d105      	bne.n	6a84 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x29c>
    6a78:	6880      	ldr	r0, [r0, #8]
    6a7a:	2206      	movs	r2, #6
    6a7c:	3132      	adds	r1, #50	; 0x32
    6a7e:	f005 fd2f 	bl	c4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6a82:	b108      	cbz	r0, 6a88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a0>
    6a84:	2000      	movs	r0, #0
    6a86:	bd10      	pop	{r4, pc}
    6a88:	2001      	movs	r0, #1
    6a8a:	bd10      	pop	{r4, pc}
    6a8c:	200000ec 	.word	0x200000ec
    6a90:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    6a92:	4c3d      	ldr	r4, [pc, #244]	; (6b88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a0>)
    6a94:	466f      	mov	r7, sp
    6a96:	6860      	ldr	r0, [r4, #4]
    6a98:	7801      	ldrb	r1, [r0, #0]
    6a9a:	f88d 1008 	strb.w	r1, [sp, #8]
    6a9e:	9902      	ldr	r1, [sp, #8]
    6aa0:	9102      	str	r1, [sp, #8]
    6aa2:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6aa6:	b111      	cbz	r1, 6aae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c6>
    6aa8:	f241 313a 	movw	r1, #4922	; 0x133a
    6aac:	e04f      	b.n	6b4e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x366>
    6aae:	2500      	movs	r5, #0
    6ab0:	7085      	strb	r5, [r0, #2]
    6ab2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6ab4:	880a      	ldrh	r2, [r1, #0]
    6ab6:	8082      	strh	r2, [r0, #4]
    6ab8:	68c8      	ldr	r0, [r1, #12]
    6aba:	f006 ff4e 	bl	d95a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6abe:	6861      	ldr	r1, [r4, #4]
    6ac0:	8348      	strh	r0, [r1, #26]
    6ac2:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    6ac4:	8a82      	ldrh	r2, [r0, #20]
    6ac6:	838a      	strh	r2, [r1, #28]
    6ac8:	8ac0      	ldrh	r0, [r0, #22]
    6aca:	83c8      	strh	r0, [r1, #30]
    6acc:	f881 5020 	strb.w	r5, [r1, #32]
    6ad0:	4669      	mov	r1, sp
    6ad2:	68a0      	ldr	r0, [r4, #8]
    6ad4:	f007 fa18 	bl	df08 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
    6ad8:	68a0      	ldr	r0, [r4, #8]
    6ada:	7800      	ldrb	r0, [r0, #0]
    6adc:	f3c0 1680 	ubfx	r6, r0, #6, #1
    6ae0:	6860      	ldr	r0, [r4, #4]
    6ae2:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6ae6:	b120      	cbz	r0, 6af2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30a>
    6ae8:	4639      	mov	r1, r7
    6aea:	4630      	mov	r0, r6
    6aec:	f007 fc03 	bl	e2f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6af0:	b940      	cbnz	r0, 6b04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x31c>
    6af2:	6860      	ldr	r0, [r4, #4]
    6af4:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    6af8:	b160      	cbz	r0, 6b14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32c>
    6afa:	4639      	mov	r1, r7
    6afc:	4630      	mov	r0, r6
    6afe:	f007 fbf1 	bl	e2e4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    6b02:	b138      	cbz	r0, 6b14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32c>
    6b04:	6860      	ldr	r0, [r4, #4]
    6b06:	9900      	ldr	r1, [sp, #0]
    6b08:	f8c0 100e 	str.w	r1, [r0, #14]
    6b0c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6b10:	8241      	strh	r1, [r0, #18]
    6b12:	e003      	b.n	6b1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x334>
    6b14:	6860      	ldr	r0, [r4, #4]
    6b16:	f8c0 500e 	str.w	r5, [r0, #14]
    6b1a:	8245      	strh	r5, [r0, #18]
    6b1c:	6861      	ldr	r1, [r4, #4]
    6b1e:	f891 0065 	ldrb.w	r0, [r1, #101]	; 0x65
    6b22:	28ff      	cmp	r0, #255	; 0xff
    6b24:	d016      	beq.n	6b54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36c>
    6b26:	f101 0208 	add.w	r2, r1, #8
    6b2a:	1dc9      	adds	r1, r1, #7
    6b2c:	f7fe fdae 	bl	568c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6b30:	b158      	cbz	r0, 6b4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x362>
    6b32:	6860      	ldr	r0, [r4, #4]
    6b34:	79c1      	ldrb	r1, [r0, #7]
    6b36:	f041 0102 	orr.w	r1, r1, #2
    6b3a:	71c1      	strb	r1, [r0, #7]
    6b3c:	f8d0 106e 	ldr.w	r1, [r0, #110]	; 0x6e
    6b40:	6141      	str	r1, [r0, #20]
    6b42:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
    6b46:	8301      	strh	r1, [r0, #24]
    6b48:	e00f      	b.n	6b6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x382>
    6b4a:	f241 3165 	movw	r1, #4965	; 0x1365
    6b4e:	2032      	movs	r0, #50	; 0x32
    6b50:	f7fd f8d0 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b54:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    6b58:	71c8      	strb	r0, [r1, #7]
    6b5a:	f8d1 006e 	ldr.w	r0, [r1, #110]	; 0x6e
    6b5e:	6088      	str	r0, [r1, #8]
    6b60:	f8b1 0072 	ldrh.w	r0, [r1, #114]	; 0x72
    6b64:	8188      	strh	r0, [r1, #12]
    6b66:	614d      	str	r5, [r1, #20]
    6b68:	830d      	strh	r5, [r1, #24]
    6b6a:	6860      	ldr	r0, [r4, #4]
    6b6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    6b6e:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
    6b72:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    6b76:	2101      	movs	r1, #1
    6b78:	7001      	strb	r1, [r0, #0]
    6b7a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6b7c:	8800      	ldrh	r0, [r0, #0]
    6b7e:	f7fd fcb7 	bl	44f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6b82:	f006 fc4d 	bl	d420 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6b86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6b88:	200000ec 	.word	0x200000ec
    6b8c:	b570      	push	{r4, r5, r6, lr}
    6b8e:	4d39      	ldr	r5, [pc, #228]	; (6c74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48c>)
    6b90:	4601      	mov	r1, r0
    6b92:	2200      	movs	r2, #0
    6b94:	e9d5 6001 	ldrd	r6, r0, [r5, #4]
    6b98:	365c      	adds	r6, #92	; 0x5c
    6b9a:	8002      	strh	r2, [r0, #0]
    6b9c:	2903      	cmp	r1, #3
    6b9e:	d002      	beq.n	6ba6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3be>
    6ba0:	2905      	cmp	r1, #5
    6ba2:	d004      	beq.n	6bae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c6>
    6ba4:	e056      	b.n	6c54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46c>
    6ba6:	2103      	movs	r1, #3
    6ba8:	f007 f9c5 	bl	df36 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6bac:	e052      	b.n	6c54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46c>
    6bae:	2105      	movs	r1, #5
    6bb0:	f007 f9c1 	bl	df36 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6bb4:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6bb8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6bba:	6909      	ldr	r1, [r1, #16]
    6bbc:	f844 1f0f 	str.w	r1, [r4, #15]!
    6bc0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6bc2:	8b0a      	ldrh	r2, [r1, #24]
    6bc4:	80a2      	strh	r2, [r4, #4]
    6bc6:	7e89      	ldrb	r1, [r1, #26]
    6bc8:	71a1      	strb	r1, [r4, #6]
    6bca:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6bcc:	68c1      	ldr	r1, [r0, #12]
    6bce:	8b80      	ldrh	r0, [r0, #28]
    6bd0:	f007 f85f 	bl	dc92 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    6bd4:	71e0      	strb	r0, [r4, #7]
    6bd6:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6bda:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6bdc:	68c1      	ldr	r1, [r0, #12]
    6bde:	6a00      	ldr	r0, [r0, #32]
    6be0:	f007 f84c 	bl	dc7c <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    6be4:	75e0      	strb	r0, [r4, #23]
    6be6:	0a00      	lsrs	r0, r0, #8
    6be8:	7620      	strb	r0, [r4, #24]
    6bea:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6bee:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6bf0:	68c0      	ldr	r0, [r0, #12]
    6bf2:	f006 feb2 	bl	d95a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6bf6:	7660      	strb	r0, [r4, #25]
    6bf8:	0a00      	lsrs	r0, r0, #8
    6bfa:	76a0      	strb	r0, [r4, #26]
    6bfc:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6c00:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6c02:	8a89      	ldrh	r1, [r1, #20]
    6c04:	76e1      	strb	r1, [r4, #27]
    6c06:	0a09      	lsrs	r1, r1, #8
    6c08:	7721      	strb	r1, [r4, #28]
    6c0a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6c0c:	8ac9      	ldrh	r1, [r1, #22]
    6c0e:	7761      	strb	r1, [r4, #29]
    6c10:	0a09      	lsrs	r1, r1, #8
    6c12:	77a1      	strb	r1, [r4, #30]
    6c14:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6c16:	f851 2f8e 	ldr.w	r2, [r1, #142]!
    6c1a:	f8c4 201f 	str.w	r2, [r4, #31]
    6c1e:	7909      	ldrb	r1, [r1, #4]
    6c20:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
    6c24:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6c26:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    6c2a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    6c2e:	f001 011f 	and.w	r1, r1, #31
    6c32:	f020 001f 	bic.w	r0, r0, #31
    6c36:	4308      	orrs	r0, r1
    6c38:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    6c3c:	f004 f9da 	bl	aff4 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    6c40:	2807      	cmp	r0, #7
    6c42:	d900      	bls.n	6c46 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x45e>
    6c44:	2007      	movs	r0, #7
    6c46:	f814 1f24 	ldrb.w	r1, [r4, #36]!
    6c4a:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
    6c4e:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    6c52:	7021      	strb	r1, [r4, #0]
    6c54:	f106 0112 	add.w	r1, r6, #18
    6c58:	68a8      	ldr	r0, [r5, #8]
    6c5a:	f007 f987 	bl	df6c <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6c5e:	7e71      	ldrb	r1, [r6, #25]
    6c60:	68a8      	ldr	r0, [r5, #8]
    6c62:	f007 f989 	bl	df78 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6c66:	f000 fba5 	bl	73b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b4>
    6c6a:	68a8      	ldr	r0, [r5, #8]
    6c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6c70:	f004 be70 	b.w	b954 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6c74:	200000ec 	.word	0x200000ec
    6c78:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6c7c:	4f65      	ldr	r7, [pc, #404]	; (6e14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62c>)
    6c7e:	4604      	mov	r4, r0
    6c80:	468a      	mov	sl, r1
    6c82:	6878      	ldr	r0, [r7, #4]
    6c84:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6c88:	b180      	cbz	r0, 6cac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>
    6c8a:	2600      	movs	r6, #0
    6c8c:	2500      	movs	r5, #0
    6c8e:	7ca0      	ldrb	r0, [r4, #18]
    6c90:	68a1      	ldr	r1, [r4, #8]
    6c92:	f007 fb30 	bl	e2f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6c96:	4681      	mov	r9, r0
    6c98:	f7ff feda 	bl	6a50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    6c9c:	b140      	cbz	r0, 6cb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    6c9e:	6878      	ldr	r0, [r7, #4]
    6ca0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    6ca4:	b121      	cbz	r1, 6cb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    6ca6:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    6caa:	e004      	b.n	6cb6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ce>
    6cac:	2601      	movs	r6, #1
    6cae:	e7ed      	b.n	6c8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    6cb0:	6878      	ldr	r0, [r7, #4]
    6cb2:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    6cb6:	4683      	mov	fp, r0
    6cb8:	f7fe fc3a 	bl	5530 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    6cbc:	ea5f 0800 	movs.w	r8, r0
    6cc0:	d00c      	beq.n	6cdc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>
    6cc2:	4658      	mov	r0, fp
    6cc4:	f7fe fc28 	bl	5518 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    6cc8:	b100      	cbz	r0, 6ccc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4e4>
    6cca:	2601      	movs	r6, #1
    6ccc:	f1b9 0f00 	cmp.w	r9, #0
    6cd0:	d004      	beq.n	6cdc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>
    6cd2:	4640      	mov	r0, r8
    6cd4:	68a1      	ldr	r1, [r4, #8]
    6cd6:	f006 fd5f 	bl	d798 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    6cda:	4605      	mov	r5, r0
    6cdc:	6878      	ldr	r0, [r7, #4]
    6cde:	46b8      	mov	r8, r7
    6ce0:	f890 7031 	ldrb.w	r7, [r0, #49]	; 0x31
    6ce4:	b10d      	cbz	r5, 6cea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    6ce6:	f047 0702 	orr.w	r7, r7, #2
    6cea:	f7ff feb1 	bl	6a50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    6cee:	b3a0      	cbz	r0, 6d5a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x572>
    6cf0:	6860      	ldr	r0, [r4, #4]
    6cf2:	f8d8 1004 	ldr.w	r1, [r8, #4]
    6cf6:	7802      	ldrb	r2, [r0, #0]
    6cf8:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    6cfc:	429a      	cmp	r2, r3
    6cfe:	d11f      	bne.n	6d40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6d00:	7842      	ldrb	r2, [r0, #1]
    6d02:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    6d06:	429a      	cmp	r2, r3
    6d08:	d11a      	bne.n	6d40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6d0a:	7882      	ldrb	r2, [r0, #2]
    6d0c:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    6d10:	429a      	cmp	r2, r3
    6d12:	d115      	bne.n	6d40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6d14:	78c2      	ldrb	r2, [r0, #3]
    6d16:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    6d1a:	429a      	cmp	r2, r3
    6d1c:	d110      	bne.n	6d40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6d1e:	7902      	ldrb	r2, [r0, #4]
    6d20:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    6d24:	429a      	cmp	r2, r3
    6d26:	d10b      	bne.n	6d40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6d28:	7940      	ldrb	r0, [r0, #5]
    6d2a:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    6d2e:	4290      	cmp	r0, r2
    6d30:	d106      	bne.n	6d40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6d32:	7c60      	ldrb	r0, [r4, #17]
    6d34:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
    6d38:	4288      	cmp	r0, r1
    6d3a:	d101      	bne.n	6d40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6d3c:	2001      	movs	r0, #1
    6d3e:	e000      	b.n	6d42 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x55a>
    6d40:	2000      	movs	r0, #0
    6d42:	4f35      	ldr	r7, [pc, #212]	; (6e18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x630>)
    6d44:	4681      	mov	r9, r0
    6d46:	f897 0064 	ldrb.w	r0, [r7, #100]	; 0x64
    6d4a:	2808      	cmp	r0, #8
    6d4c:	d006      	beq.n	6d5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x574>
    6d4e:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
    6d52:	4288      	cmp	r0, r1
    6d54:	d102      	bne.n	6d5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x574>
    6d56:	2001      	movs	r0, #1
    6d58:	e001      	b.n	6d5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x576>
    6d5a:	e021      	b.n	6da0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b8>
    6d5c:	2000      	movs	r0, #0
    6d5e:	4680      	mov	r8, r0
    6d60:	b925      	cbnz	r5, 6d6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x584>
    6d62:	b12e      	cbz	r6, 6d70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x588>
    6d64:	4620      	mov	r0, r4
    6d66:	f7ff fe7f 	bl	6a68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    6d6a:	b108      	cbz	r0, 6d70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x588>
    6d6c:	2001      	movs	r0, #1
    6d6e:	e000      	b.n	6d72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x58a>
    6d70:	2000      	movs	r0, #0
    6d72:	f1ba 0f00 	cmp.w	sl, #0
    6d76:	d009      	beq.n	6d8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    6d78:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
    6d7c:	2901      	cmp	r1, #1
    6d7e:	d003      	beq.n	6d88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a0>
    6d80:	b921      	cbnz	r1, 6d8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    6d82:	ea59 0108 	orrs.w	r1, r9, r8
    6d86:	d001      	beq.n	6d8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    6d88:	2101      	movs	r1, #1
    6d8a:	e000      	b.n	6d8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a6>
    6d8c:	2100      	movs	r1, #0
    6d8e:	4208      	tst	r0, r1
    6d90:	d003      	beq.n	6d9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b2>
    6d92:	200c      	movs	r0, #12
    6d94:	b004      	add	sp, #16
    6d96:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6d9a:	f004 fb83 	bl	b4a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6d9e:	e036      	b.n	6e0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    6da0:	f004 fb80 	bl	b4a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6da4:	f1ba 0f00 	cmp.w	sl, #0
    6da8:	d031      	beq.n	6e0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    6daa:	4620      	mov	r0, r4
    6dac:	f7ff fe5c 	bl	6a68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    6db0:	b900      	cbnz	r0, 6db4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5cc>
    6db2:	b175      	cbz	r5, 6dd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ea>
    6db4:	a803      	add	r0, sp, #12
    6db6:	f000 f97f 	bl	70b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>
    6dba:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6dbe:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6dc2:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6dc6:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6dca:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6dce:	463b      	mov	r3, r7
    6dd0:	e018      	b.n	6e04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61c>
    6dd2:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6dd6:	4645      	mov	r5, r8
    6dd8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    6ddc:	2803      	cmp	r0, #3
    6dde:	d001      	beq.n	6de4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fc>
    6de0:	2802      	cmp	r0, #2
    6de2:	d114      	bne.n	6e0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    6de4:	f1b9 0f00 	cmp.w	r9, #0
    6de8:	d011      	beq.n	6e0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    6dea:	a803      	add	r0, sp, #12
    6dec:	f000 f964 	bl	70b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>
    6df0:	686a      	ldr	r2, [r5, #4]
    6df2:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6df6:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6dfa:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6dfe:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6e02:	23fe      	movs	r3, #254	; 0xfe
    6e04:	2101      	movs	r1, #1
    6e06:	4620      	mov	r0, r4
    6e08:	3232      	adds	r2, #50	; 0x32
    6e0a:	f000 fc43 	bl	7694 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6e0e:	2005      	movs	r0, #5
    6e10:	e7c0      	b.n	6d94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ac>
    6e12:	0000      	.short	0x0000
    6e14:	200000ec 	.word	0x200000ec
    6e18:	20000f1c 	.word	0x20000f1c
    6e1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6e1e:	4605      	mov	r5, r0
    6e20:	2900      	cmp	r1, #0
    6e22:	d06e      	beq.n	6f02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x71a>
    6e24:	4c3c      	ldr	r4, [pc, #240]	; (6f18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x730>)
    6e26:	6860      	ldr	r0, [r4, #4]
    6e28:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6e2c:	2802      	cmp	r0, #2
    6e2e:	d02c      	beq.n	6e8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6a2>
    6e30:	2801      	cmp	r0, #1
    6e32:	d043      	beq.n	6ebc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d4>
    6e34:	f7ff fe0c 	bl	6a50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    6e38:	2800      	cmp	r0, #0
    6e3a:	d067      	beq.n	6f0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x724>
    6e3c:	686a      	ldr	r2, [r5, #4]
    6e3e:	6861      	ldr	r1, [r4, #4]
    6e40:	7810      	ldrb	r0, [r2, #0]
    6e42:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    6e46:	4298      	cmp	r0, r3
    6e48:	d14c      	bne.n	6ee4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6e4a:	7850      	ldrb	r0, [r2, #1]
    6e4c:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    6e50:	4298      	cmp	r0, r3
    6e52:	d147      	bne.n	6ee4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6e54:	7890      	ldrb	r0, [r2, #2]
    6e56:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    6e5a:	4298      	cmp	r0, r3
    6e5c:	d142      	bne.n	6ee4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6e5e:	78d0      	ldrb	r0, [r2, #3]
    6e60:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    6e64:	4298      	cmp	r0, r3
    6e66:	d13d      	bne.n	6ee4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6e68:	7910      	ldrb	r0, [r2, #4]
    6e6a:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    6e6e:	4298      	cmp	r0, r3
    6e70:	d138      	bne.n	6ee4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6e72:	7950      	ldrb	r0, [r2, #5]
    6e74:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    6e78:	4290      	cmp	r0, r2
    6e7a:	d133      	bne.n	6ee4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6e7c:	7c68      	ldrb	r0, [r5, #17]
    6e7e:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
    6e82:	4290      	cmp	r0, r2
    6e84:	d12e      	bne.n	6ee4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6e86:	2001      	movs	r0, #1
    6e88:	e02d      	b.n	6ee6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fe>
    6e8a:	a803      	add	r0, sp, #12
    6e8c:	f000 f914 	bl	70b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>
    6e90:	6862      	ldr	r2, [r4, #4]
    6e92:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6e96:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6e9a:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6e9e:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6ea2:	23ff      	movs	r3, #255	; 0xff
    6ea4:	2100      	movs	r1, #0
    6ea6:	4628      	mov	r0, r5
    6ea8:	3232      	adds	r2, #50	; 0x32
    6eaa:	f000 fbf3 	bl	7694 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6eae:	6861      	ldr	r1, [r4, #4]
    6eb0:	2001      	movs	r0, #1
    6eb2:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    6eb6:	200b      	movs	r0, #11
    6eb8:	b004      	add	sp, #16
    6eba:	bd70      	pop	{r4, r5, r6, pc}
    6ebc:	a803      	add	r0, sp, #12
    6ebe:	f000 f8fb 	bl	70b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>
    6ec2:	6862      	ldr	r2, [r4, #4]
    6ec4:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6ec8:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6ecc:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6ed0:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6ed4:	23ff      	movs	r3, #255	; 0xff
    6ed6:	2100      	movs	r1, #0
    6ed8:	4628      	mov	r0, r5
    6eda:	3232      	adds	r2, #50	; 0x32
    6edc:	f000 fbda 	bl	7694 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6ee0:	2005      	movs	r0, #5
    6ee2:	e7e9      	b.n	6eb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>
    6ee4:	2000      	movs	r0, #0
    6ee6:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    6eea:	2901      	cmp	r1, #1
    6eec:	d00c      	beq.n	6f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    6eee:	b958      	cbnz	r0, 6f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    6ef0:	490a      	ldr	r1, [pc, #40]	; (6f1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x734>)
    6ef2:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    6ef6:	2808      	cmp	r0, #8
    6ef8:	d003      	beq.n	6f02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x71a>
    6efa:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
    6efe:	4281      	cmp	r1, r0
    6f00:	d002      	beq.n	6f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    6f02:	f004 facf 	bl	b4a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6f06:	e7eb      	b.n	6ee0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6f8>
    6f08:	200c      	movs	r0, #12
    6f0a:	e7d5      	b.n	6eb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>
    6f0c:	f640 515b 	movw	r1, #3419	; 0xd5b
    6f10:	2032      	movs	r0, #50	; 0x32
    6f12:	f7fc feef 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f16:	0000      	.short	0x0000
    6f18:	200000ec 	.word	0x200000ec
    6f1c:	20000f1c 	.word	0x20000f1c
    6f20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6f22:	4605      	mov	r5, r0
    6f24:	b139      	cbz	r1, 6f36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x74e>
    6f26:	4c1c      	ldr	r4, [pc, #112]	; (6f98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7b0>)
    6f28:	6860      	ldr	r0, [r4, #4]
    6f2a:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6f2e:	2802      	cmp	r0, #2
    6f30:	d004      	beq.n	6f3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x754>
    6f32:	2801      	cmp	r0, #1
    6f34:	d01b      	beq.n	6f6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x786>
    6f36:	f004 fab5 	bl	b4a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6f3a:	e02a      	b.n	6f92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7aa>
    6f3c:	a803      	add	r0, sp, #12
    6f3e:	f000 f8bb 	bl	70b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>
    6f42:	6862      	ldr	r2, [r4, #4]
    6f44:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6f48:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6f4c:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6f50:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6f54:	23ff      	movs	r3, #255	; 0xff
    6f56:	2106      	movs	r1, #6
    6f58:	4628      	mov	r0, r5
    6f5a:	3232      	adds	r2, #50	; 0x32
    6f5c:	f000 fb9a 	bl	7694 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6f60:	6862      	ldr	r2, [r4, #4]
    6f62:	200b      	movs	r0, #11
    6f64:	2100      	movs	r1, #0
    6f66:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    6f6a:	b004      	add	sp, #16
    6f6c:	bd70      	pop	{r4, r5, r6, pc}
    6f6e:	a803      	add	r0, sp, #12
    6f70:	f000 f8a2 	bl	70b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>
    6f74:	6862      	ldr	r2, [r4, #4]
    6f76:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6f7a:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6f7e:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6f82:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6f86:	23ff      	movs	r3, #255	; 0xff
    6f88:	2106      	movs	r1, #6
    6f8a:	4628      	mov	r0, r5
    6f8c:	3232      	adds	r2, #50	; 0x32
    6f8e:	f000 fb81 	bl	7694 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6f92:	2005      	movs	r0, #5
    6f94:	e7e9      	b.n	6f6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x782>
    6f96:	0000      	.short	0x0000
    6f98:	200000ec 	.word	0x200000ec
    6f9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6f9e:	b389      	cbz	r1, 7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    6fa0:	2901      	cmp	r1, #1
    6fa2:	d035      	beq.n	7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    6fa4:	2405      	movs	r4, #5
    6fa6:	2902      	cmp	r1, #2
    6fa8:	d004      	beq.n	6fb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7cc>
    6faa:	2906      	cmp	r1, #6
    6fac:	d024      	beq.n	6ff8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x810>
    6fae:	f004 fa79 	bl	b4a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6fb2:	e01e      	b.n	6ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x80a>
    6fb4:	4605      	mov	r5, r0
    6fb6:	4616      	mov	r6, r2
    6fb8:	f004 fa74 	bl	b4a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6fbc:	b1ce      	cbz	r6, 6ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x80a>
    6fbe:	4e17      	ldr	r6, [pc, #92]	; (701c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
    6fc0:	6870      	ldr	r0, [r6, #4]
    6fc2:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6fc6:	2801      	cmp	r0, #1
    6fc8:	d001      	beq.n	6fce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e6>
    6fca:	2802      	cmp	r0, #2
    6fcc:	d111      	bne.n	6ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x80a>
    6fce:	a803      	add	r0, sp, #12
    6fd0:	f000 f872 	bl	70b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>
    6fd4:	6872      	ldr	r2, [r6, #4]
    6fd6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6fda:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6fde:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6fe2:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6fe6:	23ff      	movs	r3, #255	; 0xff
    6fe8:	2102      	movs	r1, #2
    6fea:	4628      	mov	r0, r5
    6fec:	3232      	adds	r2, #50	; 0x32
    6fee:	f000 fb51 	bl	7694 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6ff2:	b004      	add	sp, #16
    6ff4:	4620      	mov	r0, r4
    6ff6:	bd70      	pop	{r4, r5, r6, pc}
    6ff8:	b004      	add	sp, #16
    6ffa:	4611      	mov	r1, r2
    6ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7000:	f7ff bf8e 	b.w	6f20 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    7004:	b004      	add	sp, #16
    7006:	4611      	mov	r1, r2
    7008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    700c:	f7ff bf06 	b.w	6e1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x634>
    7010:	b004      	add	sp, #16
    7012:	4611      	mov	r1, r2
    7014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7018:	f7ff be2e 	b.w	6c78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x490>
    701c:	200000ec 	.word	0x200000ec
    7020:	b570      	push	{r4, r5, r6, lr}
    7022:	4c11      	ldr	r4, [pc, #68]	; (7068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>)
    7024:	4605      	mov	r5, r0
    7026:	6861      	ldr	r1, [r4, #4]
    7028:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
    702c:	2800      	cmp	r0, #0
    702e:	d019      	beq.n	7064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>
    7030:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    7034:	2800      	cmp	r0, #0
    7036:	d015      	beq.n	7064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>
    7038:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    703c:	3132      	adds	r1, #50	; 0x32
    703e:	f007 f95a 	bl	e2f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    7042:	b140      	cbz	r0, 7056 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56>
    7044:	f7fe fa3e 	bl	54c4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    7048:	6861      	ldr	r1, [r4, #4]
    704a:	462a      	mov	r2, r5
    704c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7050:	3132      	adds	r1, #50	; 0x32
    7052:	f006 bb6c 	b.w	d72e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7056:	6860      	ldr	r0, [r4, #4]
    7058:	4629      	mov	r1, r5
    705a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    705e:	3032      	adds	r0, #50	; 0x32
    7060:	f006 bb54 	b.w	d70c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    7064:	bd70      	pop	{r4, r5, r6, pc}
    7066:	0000      	.short	0x0000
    7068:	200000ec 	.word	0x200000ec
    706c:	4602      	mov	r2, r0
    706e:	480b      	ldr	r0, [pc, #44]	; (709c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
    7070:	b082      	sub	sp, #8
    7072:	6840      	ldr	r0, [r0, #4]
    7074:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    7078:	f88d 1000 	strb.w	r1, [sp]
    707c:	9900      	ldr	r1, [sp, #0]
    707e:	9100      	str	r1, [sp, #0]
    7080:	f89d 1000 	ldrb.w	r1, [sp]
    7084:	2900      	cmp	r1, #0
    7086:	d107      	bne.n	7098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>
    7088:	6d41      	ldr	r1, [r0, #84]	; 0x54
    708a:	2900      	cmp	r1, #0
    708c:	d004      	beq.n	7098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>
    708e:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    7092:	b002      	add	sp, #8
    7094:	f7fb bb0a 	b.w	26ac <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    7098:	b002      	add	sp, #8
    709a:	4770      	bx	lr
    709c:	200000ec 	.word	0x200000ec
    70a0:	b510      	push	{r4, lr}
    70a2:	4804      	ldr	r0, [pc, #16]	; (70b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
    70a4:	f004 fd04 	bl	bab0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    70a8:	2800      	cmp	r0, #0
    70aa:	d102      	bne.n	70b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb2>
    70ac:	4901      	ldr	r1, [pc, #4]	; (70b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
    70ae:	207f      	movs	r0, #127	; 0x7f
    70b0:	7008      	strb	r0, [r1, #0]
    70b2:	bd10      	pop	{r4, pc}
    70b4:	200000ec 	.word	0x200000ec
    70b8:	4a07      	ldr	r2, [pc, #28]	; (70d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>)
    70ba:	b510      	push	{r4, lr}
    70bc:	f992 1000 	ldrsb.w	r1, [r2]
    70c0:	297f      	cmp	r1, #127	; 0x7f
    70c2:	d003      	beq.n	70cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>
    70c4:	7001      	strb	r1, [r0, #0]
    70c6:	207f      	movs	r0, #127	; 0x7f
    70c8:	7010      	strb	r0, [r2, #0]
    70ca:	bd10      	pop	{r4, pc}
    70cc:	f240 3172 	movw	r1, #882	; 0x372
    70d0:	2032      	movs	r0, #50	; 0x32
    70d2:	f7fc fe0f 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70d6:	0000      	.short	0x0000
    70d8:	200000ec 	.word	0x200000ec
    70dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70e0:	4607      	mov	r7, r0
    70e2:	f7fd fa33 	bl	454c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    70e6:	4604      	mov	r4, r0
    70e8:	f7fd fa36 	bl	4558 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    70ec:	4621      	mov	r1, r4
    70ee:	f007 f95b 	bl	e3a8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    70f2:	0005      	movs	r5, r0
    70f4:	d012      	beq.n	711c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>
    70f6:	4c2d      	ldr	r4, [pc, #180]	; (71ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ac>)
    70f8:	6860      	ldr	r0, [r4, #4]
    70fa:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    70fe:	2801      	cmp	r0, #1
    7100:	d004      	beq.n	710c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>
    7102:	2802      	cmp	r0, #2
    7104:	d002      	beq.n	710c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>
    7106:	f7ff fca3 	bl	6a50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    710a:	b150      	cbz	r0, 7122 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x122>
    710c:	f06f 0613 	mvn.w	r6, #19
    7110:	b33f      	cbz	r7, 7162 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x162>
    7112:	4628      	mov	r0, r5
    7114:	f006 fee0 	bl	ded8 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    7118:	b950      	cbnz	r0, 7130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    711a:	e005      	b.n	7128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>
    711c:	f241 310a 	movw	r1, #4874	; 0x130a
    7120:	e03a      	b.n	7198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    7122:	f241 3110 	movw	r1, #4880	; 0x1310
    7126:	e037      	b.n	7198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    7128:	4628      	mov	r0, r5
    712a:	f006 fef7 	bl	df1c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    712e:	b1c0      	cbz	r0, 7162 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x162>
    7130:	6861      	ldr	r1, [r4, #4]
    7132:	4628      	mov	r0, r5
    7134:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7138:	2a05      	cmp	r2, #5
    713a:	d202      	bcs.n	7142 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x142>
    713c:	f241 2194 	movw	r1, #4756	; 0x1294
    7140:	e02a      	b.n	7198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    7142:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7146:	2a0b      	cmp	r2, #11
    7148:	d302      	bcc.n	7150 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x150>
    714a:	f241 2195 	movw	r1, #4757	; 0x1295
    714e:	e023      	b.n	7198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    7150:	68e2      	ldr	r2, [r4, #12]
    7152:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    7156:	6952      	ldr	r2, [r2, #20]
    7158:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    715c:	5851      	ldr	r1, [r2, r1]
    715e:	4788      	blx	r1
    7160:	e016      	b.n	7190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190>
    7162:	6860      	ldr	r0, [r4, #4]
    7164:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    7168:	2905      	cmp	r1, #5
    716a:	d202      	bcs.n	7172 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x172>
    716c:	f44f 5198 	mov.w	r1, #4864	; 0x1300
    7170:	e012      	b.n	7198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    7172:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    7176:	290b      	cmp	r1, #11
    7178:	d302      	bcc.n	7180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>
    717a:	f241 3101 	movw	r1, #4865	; 0x1301
    717e:	e00b      	b.n	7198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    7180:	68e1      	ldr	r1, [r4, #12]
    7182:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7186:	6989      	ldr	r1, [r1, #24]
    7188:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    718c:	5808      	ldr	r0, [r1, r0]
    718e:	4780      	blx	r0
    7190:	280f      	cmp	r0, #15
    7192:	d304      	bcc.n	719e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19e>
    7194:	f241 3125 	movw	r1, #4901	; 0x1325
    7198:	2032      	movs	r0, #50	; 0x32
    719a:	f7fc fdab 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    719e:	68e1      	ldr	r1, [r4, #12]
    71a0:	6909      	ldr	r1, [r1, #16]
    71a2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    71a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    71aa:	4700      	bx	r0
    71ac:	200000ec 	.word	0x200000ec
    71b0:	b510      	push	{r4, lr}
    71b2:	b118      	cbz	r0, 71bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    71b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    71b8:	f000 b924 	b.w	7404 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x404>
    71bc:	2900      	cmp	r1, #0
    71be:	d01d      	beq.n	71fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fc>
    71c0:	480f      	ldr	r0, [pc, #60]	; (7200 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x200>)
    71c2:	6841      	ldr	r1, [r0, #4]
    71c4:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    71c8:	2a0b      	cmp	r2, #11
    71ca:	d202      	bcs.n	71d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d2>
    71cc:	f241 31cc 	movw	r1, #5068	; 0x13cc
    71d0:	e005      	b.n	71de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1de>
    71d2:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    71d6:	2a0f      	cmp	r2, #15
    71d8:	d304      	bcc.n	71e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e4>
    71da:	f241 31cd 	movw	r1, #5069	; 0x13cd
    71de:	2032      	movs	r0, #50	; 0x32
    71e0:	f7fc fd88 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71e4:	68c0      	ldr	r0, [r0, #12]
    71e6:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    71ea:	6880      	ldr	r0, [r0, #8]
    71ec:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    71f0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    71f4:	5840      	ldr	r0, [r0, r1]
    71f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    71fa:	4700      	bx	r0
    71fc:	bd10      	pop	{r4, pc}
    71fe:	0000      	.short	0x0000
    7200:	200000ec 	.word	0x200000ec
    7204:	b510      	push	{r4, lr}
    7206:	f7ff fb0d 	bl	6824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    720a:	f000 f90b 	bl	7424 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x424>
    720e:	4805      	ldr	r0, [pc, #20]	; (7224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x224>)
    7210:	6881      	ldr	r1, [r0, #8]
    7212:	2000      	movs	r0, #0
    7214:	f7ff fc3c 	bl	6a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a8>
    7218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    721c:	2003      	movs	r0, #3
    721e:	f000 bc97 	b.w	7b50 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    7222:	0000      	.short	0x0000
    7224:	200000ec 	.word	0x200000ec
    7228:	b510      	push	{r4, lr}
    722a:	f7fd f98f 	bl	454c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    722e:	4604      	mov	r4, r0
    7230:	f7fd f992 	bl	4558 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7234:	4621      	mov	r1, r4
    7236:	f007 f8b7 	bl	e3a8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    723a:	b150      	cbz	r0, 7252 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x252>
    723c:	f004 fb8a 	bl	b954 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7240:	2000      	movs	r0, #0
    7242:	f004 fa3f 	bl	b6c4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7246:	4905      	ldr	r1, [pc, #20]	; (725c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25c>)
    7248:	2006      	movs	r0, #6
    724a:	6849      	ldr	r1, [r1, #4]
    724c:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7250:	bd10      	pop	{r4, pc}
    7252:	f240 41e7 	movw	r1, #1255	; 0x4e7
    7256:	2032      	movs	r0, #50	; 0x32
    7258:	f7fc fd4c 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    725c:	200000ec 	.word	0x200000ec
    7260:	490f      	ldr	r1, [pc, #60]	; (72a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a0>)
    7262:	b510      	push	{r4, lr}
    7264:	6848      	ldr	r0, [r1, #4]
    7266:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    726a:	2a06      	cmp	r2, #6
    726c:	d202      	bcs.n	7274 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x274>
    726e:	f241 31fa 	movw	r1, #5114	; 0x13fa
    7272:	e005      	b.n	7280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>
    7274:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    7278:	2a0b      	cmp	r2, #11
    727a:	d304      	bcc.n	7286 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x286>
    727c:	f241 31fb 	movw	r1, #5115	; 0x13fb
    7280:	2032      	movs	r0, #50	; 0x32
    7282:	f7fc fd37 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7286:	68c9      	ldr	r1, [r1, #12]
    7288:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    728c:	68c9      	ldr	r1, [r1, #12]
    728e:	f06f 0213 	mvn.w	r2, #19
    7292:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    7296:	5808      	ldr	r0, [r1, r0]
    7298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    729c:	4700      	bx	r0
    729e:	0000      	.short	0x0000
    72a0:	200000ec 	.word	0x200000ec
    72a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72a8:	4c31      	ldr	r4, [pc, #196]	; (7370 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x370>)
    72aa:	4605      	mov	r5, r0
    72ac:	460e      	mov	r6, r1
    72ae:	6860      	ldr	r0, [r4, #4]
    72b0:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    72b4:	b120      	cbz	r0, 72c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c0>
    72b6:	2801      	cmp	r0, #1
    72b8:	d002      	beq.n	72c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c0>
    72ba:	200c      	movs	r0, #12
    72bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72c0:	f004 fab8 	bl	b834 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    72c4:	f004 f8d0 	bl	b468 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    72c8:	f003 feb2 	bl	b030 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    72cc:	f004 fd14 	bl	bcf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    72d0:	4828      	ldr	r0, [pc, #160]	; (7374 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x374>)
    72d2:	f004 f9ef 	bl	b6b4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    72d6:	4828      	ldr	r0, [pc, #160]	; (7378 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x378>)
    72d8:	f004 fc10 	bl	bafc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    72dc:	4827      	ldr	r0, [pc, #156]	; (737c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37c>)
    72de:	f004 fc03 	bl	bae8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    72e2:	4630      	mov	r0, r6
    72e4:	f004 fb36 	bl	b954 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    72e8:	7968      	ldrb	r0, [r5, #5]
    72ea:	b110      	cbz	r0, 72f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f2>
    72ec:	2001      	movs	r0, #1
    72ee:	f7ff febd 	bl	706c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
    72f2:	7928      	ldrb	r0, [r5, #4]
    72f4:	2803      	cmp	r0, #3
    72f6:	d001      	beq.n	72fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2fc>
    72f8:	b118      	cbz	r0, 7302 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x302>
    72fa:	e018      	b.n	732e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32e>
    72fc:	f640 01f7 	movw	r1, #2295	; 0x8f7
    7300:	e033      	b.n	736a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36a>
    7302:	6861      	ldr	r1, [r4, #4]
    7304:	2000      	movs	r0, #0
    7306:	2503      	movs	r5, #3
    7308:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    730c:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    7310:	1c52      	adds	r2, r2, #1
    7312:	fbb2 f7f5 	udiv	r7, r2, r5
    7316:	fb05 2217 	mls	r2, r5, r7, r2
    731a:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    731e:	fa23 f202 	lsr.w	r2, r3, r2
    7322:	07d2      	lsls	r2, r2, #31
    7324:	d103      	bne.n	732e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32e>
    7326:	1c40      	adds	r0, r0, #1
    7328:	b2c0      	uxtb	r0, r0
    732a:	2803      	cmp	r0, #3
    732c:	d3ee      	bcc.n	730c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30c>
    732e:	6860      	ldr	r0, [r4, #4]
    7330:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
    7334:	f004 fb08 	bl	b948 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7338:	4631      	mov	r1, r6
    733a:	2001      	movs	r0, #1
    733c:	f7ff fa84 	bl	6848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    7340:	2800      	cmp	r0, #0
    7342:	d0bb      	beq.n	72bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2bc>
    7344:	f000 f920 	bl	7588 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x588>
    7348:	6860      	ldr	r0, [r4, #4]
    734a:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
    734e:	b138      	cbz	r0, 7360 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x360>
    7350:	f7fe f8bc 	bl	54cc <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    7354:	480a      	ldr	r0, [pc, #40]	; (7380 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x380>)
    7356:	6800      	ldr	r0, [r0, #0]
    7358:	2803      	cmp	r0, #3
    735a:	d004      	beq.n	7366 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x366>
    735c:	2000      	movs	r0, #0
    735e:	e7ad      	b.n	72bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2bc>
    7360:	f7fe faa8 	bl	58b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7364:	e7f6      	b.n	7354 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x354>
    7366:	f640 1109 	movw	r1, #2313	; 0x909
    736a:	2032      	movs	r0, #50	; 0x32
    736c:	f7fc fcc2 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7370:	200000ec 	.word	0x200000ec
    7374:	00007684 	.word	0x00007684
    7378:	0000f92d 	.word	0x0000f92d
    737c:	8e89bed6 	.word	0x8e89bed6
    7380:	40001550 	.word	0x40001550
    7384:	b510      	push	{r4, lr}
    7386:	2000      	movs	r0, #0
    7388:	f7ff fe70 	bl	706c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
    738c:	4808      	ldr	r0, [pc, #32]	; (73b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b0>)
    738e:	6840      	ldr	r0, [r0, #4]
    7390:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7394:	b128      	cbz	r0, 73a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a2>
    7396:	2801      	cmp	r0, #1
    7398:	d003      	beq.n	73a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a2>
    739a:	2802      	cmp	r0, #2
    739c:	d004      	beq.n	73a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a8>
    739e:	200c      	movs	r0, #12
    73a0:	bd10      	pop	{r4, pc}
    73a2:	f000 f82f 	bl	7404 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x404>
    73a6:	e001      	b.n	73ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ac>
    73a8:	f000 f844 	bl	7434 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x434>
    73ac:	2000      	movs	r0, #0
    73ae:	bd10      	pop	{r4, pc}
    73b0:	200000ec 	.word	0x200000ec
    73b4:	b570      	push	{r4, r5, r6, lr}
    73b6:	4c12      	ldr	r4, [pc, #72]	; (7400 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x400>)
    73b8:	6860      	ldr	r0, [r4, #4]
    73ba:	f100 0532 	add.w	r5, r0, #50	; 0x32
    73be:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
    73c2:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    73c6:	b188      	cbz	r0, 73ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ec>
    73c8:	f7ff fb42 	bl	6a50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    73cc:	b130      	cbz	r0, 73dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3dc>
    73ce:	6860      	ldr	r0, [r4, #4]
    73d0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    73d4:	b111      	cbz	r1, 73dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3dc>
    73d6:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    73da:	e002      	b.n	73e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e2>
    73dc:	6860      	ldr	r0, [r4, #4]
    73de:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    73e2:	f7fe f919 	bl	5618 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    73e6:	b108      	cbz	r0, 73ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ec>
    73e8:	2601      	movs	r6, #1
    73ea:	4605      	mov	r5, r0
    73ec:	4629      	mov	r1, r5
    73ee:	68a0      	ldr	r0, [r4, #8]
    73f0:	f006 fdc9 	bl	df86 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    73f4:	4631      	mov	r1, r6
    73f6:	68a0      	ldr	r0, [r4, #8]
    73f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    73fc:	f006 bdc9 	b.w	df92 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7400:	200000ec 	.word	0x200000ec
    7404:	b510      	push	{r4, lr}
    7406:	f7ff fa0d 	bl	6824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    740a:	4905      	ldr	r1, [pc, #20]	; (7420 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x420>)
    740c:	2001      	movs	r0, #1
    740e:	6849      	ldr	r1, [r1, #4]
    7410:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7418:	2000      	movs	r0, #0
    741a:	f000 bb99 	b.w	7b50 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    741e:	0000      	.short	0x0000
    7420:	200000ec 	.word	0x200000ec
    7424:	4902      	ldr	r1, [pc, #8]	; (7430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>)
    7426:	2000      	movs	r0, #0
    7428:	6849      	ldr	r1, [r1, #4]
    742a:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    742e:	4770      	bx	lr
    7430:	200000ec 	.word	0x200000ec
    7434:	b570      	push	{r4, r5, r6, lr}
    7436:	f7fd f889 	bl	454c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    743a:	4604      	mov	r4, r0
    743c:	f7fd f88c 	bl	4558 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7440:	4621      	mov	r1, r4
    7442:	f006 ffb1 	bl	e3a8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    7446:	0005      	movs	r5, r0
    7448:	d020      	beq.n	748c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48c>
    744a:	f006 fffd 	bl	e448 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    744e:	2000      	movs	r0, #0
    7450:	f000 fb4c 	bl	7aec <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7454:	b1f8      	cbz	r0, 7496 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x496>
    7456:	4c1d      	ldr	r4, [pc, #116]	; (74cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4cc>)
    7458:	6860      	ldr	r0, [r4, #4]
    745a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    745e:	2802      	cmp	r0, #2
    7460:	d003      	beq.n	746a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46a>
    7462:	4629      	mov	r1, r5
    7464:	2000      	movs	r0, #0
    7466:	f7ff f9ef 	bl	6848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    746a:	1ce8      	adds	r0, r5, #3
    746c:	f006 f9de 	bl	d82c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7470:	6861      	ldr	r1, [r4, #4]
    7472:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    7476:	b128      	cbz	r0, 7484 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x484>
    7478:	2540      	movs	r5, #64	; 0x40
    747a:	f003 fdf9 	bl	b070 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    747e:	4628      	mov	r0, r5
    7480:	f004 f802 	bl	b488 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7484:	f7ff fae4 	bl	6a50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    7488:	b970      	cbnz	r0, 74a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    748a:	e008      	b.n	749e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x49e>
    748c:	f240 414a 	movw	r1, #1098	; 0x44a
    7490:	2032      	movs	r0, #50	; 0x32
    7492:	f7fc fc2f 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    749a:	f7ff bfb3 	b.w	7404 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x404>
    749e:	6860      	ldr	r0, [r4, #4]
    74a0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    74a4:	2802      	cmp	r0, #2
    74a6:	d104      	bne.n	74b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b2>
    74a8:	2100      	movs	r1, #0
    74aa:	2201      	movs	r2, #1
    74ac:	4608      	mov	r0, r1
    74ae:	f004 fadb 	bl	ba68 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    74b2:	6860      	ldr	r0, [r4, #4]
    74b4:	21ff      	movs	r1, #255	; 0xff
    74b6:	f800 1f64 	strb.w	r1, [r0, #100]!
    74ba:	7041      	strb	r1, [r0, #1]
    74bc:	2100      	movs	r1, #0
    74be:	7201      	strb	r1, [r0, #8]
    74c0:	71c1      	strb	r1, [r0, #7]
    74c2:	7641      	strb	r1, [r0, #25]
    74c4:	2105      	movs	r1, #5
    74c6:	f800 1c08 	strb.w	r1, [r0, #-8]
    74ca:	bd70      	pop	{r4, r5, r6, pc}
    74cc:	200000ec 	.word	0x200000ec
    74d0:	b570      	push	{r4, r5, r6, lr}
    74d2:	f7fd f83b 	bl	454c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    74d6:	4604      	mov	r4, r0
    74d8:	f7fd f83e 	bl	4558 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    74dc:	4621      	mov	r1, r4
    74de:	f006 ff63 	bl	e3a8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    74e2:	0005      	movs	r5, r0
    74e4:	d028      	beq.n	7538 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x538>
    74e6:	4e19      	ldr	r6, [pc, #100]	; (754c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54c>)
    74e8:	2004      	movs	r0, #4
    74ea:	6874      	ldr	r4, [r6, #4]
    74ec:	345c      	adds	r4, #92	; 0x5c
    74ee:	f000 fafd 	bl	7aec <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    74f2:	b330      	cbz	r0, 7542 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x542>
    74f4:	200c      	movs	r0, #12
    74f6:	7020      	strb	r0, [r4, #0]
    74f8:	2001      	movs	r0, #1
    74fa:	f000 fb29 	bl	7b50 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    74fe:	7828      	ldrb	r0, [r5, #0]
    7500:	6871      	ldr	r1, [r6, #4]
    7502:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7506:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    750a:	2005      	movs	r0, #5
    750c:	f7ff fb3e 	bl	6b8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    7510:	4a0f      	ldr	r2, [pc, #60]	; (7550 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x550>)
    7512:	68b1      	ldr	r1, [r6, #8]
    7514:	2520      	movs	r5, #32
    7516:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7518:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
    751c:	7808      	ldrb	r0, [r1, #0]
    751e:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    7522:	f020 0020 	bic.w	r0, r0, #32
    7526:	4318      	orrs	r0, r3
    7528:	7008      	strb	r0, [r1, #0]
    752a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    752c:	7ea2      	ldrb	r2, [r4, #26]
    752e:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    7532:	4011      	ands	r1, r2
    7534:	7001      	strb	r1, [r0, #0]
    7536:	bd70      	pop	{r4, r5, r6, pc}
    7538:	f240 5152 	movw	r1, #1362	; 0x552
    753c:	2032      	movs	r0, #50	; 0x32
    753e:	f7fc fbd9 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7546:	f7ff bf5d 	b.w	7404 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x404>
    754a:	0000      	.short	0x0000
    754c:	200000ec 	.word	0x200000ec
    7550:	20000f1c 	.word	0x20000f1c
    7554:	b510      	push	{r4, lr}
    7556:	2003      	movs	r0, #3
    7558:	f000 fac8 	bl	7aec <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    755c:	b168      	cbz	r0, 757a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x57a>
    755e:	2003      	movs	r0, #3
    7560:	f7ff fb14 	bl	6b8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    7564:	2201      	movs	r2, #1
    7566:	4611      	mov	r1, r2
    7568:	2000      	movs	r0, #0
    756a:	f004 fa7d 	bl	ba68 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    756e:	4905      	ldr	r1, [pc, #20]	; (7584 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x584>)
    7570:	200b      	movs	r0, #11
    7572:	6849      	ldr	r1, [r1, #4]
    7574:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7578:	bd10      	pop	{r4, pc}
    757a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    757e:	f7ff bf41 	b.w	7404 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x404>
    7582:	0000      	.short	0x0000
    7584:	200000ec 	.word	0x200000ec
    7588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    758c:	4c1d      	ldr	r4, [pc, #116]	; (7604 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x604>)
    758e:	2600      	movs	r6, #0
    7590:	6860      	ldr	r0, [r4, #4]
    7592:	f880 607d 	strb.w	r6, [r0, #125]	; 0x7d
    7596:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    759a:	b911      	cbnz	r1, 75a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a2>
    759c:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    75a0:	b350      	cbz	r0, 75f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f8>
    75a2:	f004 fe3a 	bl	c21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    75a6:	4680      	mov	r8, r0
    75a8:	6860      	ldr	r0, [r4, #4]
    75aa:	4641      	mov	r1, r8
    75ac:	6c40      	ldr	r0, [r0, #68]	; 0x44
    75ae:	f7fa f805 	bl	15bc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    75b2:	4f15      	ldr	r7, [pc, #84]	; (7608 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x608>)
    75b4:	4605      	mov	r5, r0
    75b6:	fb90 f0f7 	sdiv	r0, r0, r7
    75ba:	fb07 5010 	mls	r0, r7, r0, r5
    75be:	4241      	negs	r1, r0
    75c0:	4640      	mov	r0, r8
    75c2:	f7f9 ffc9 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    75c6:	6861      	ldr	r1, [r4, #4]
    75c8:	6448      	str	r0, [r1, #68]	; 0x44
    75ca:	fb95 f0f7 	sdiv	r0, r5, r7
    75ce:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    75d0:	4410      	add	r0, r2
    75d2:	6788      	str	r0, [r1, #120]	; 0x78
    75d4:	f7fe f8dc 	bl	5790 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    75d8:	6861      	ldr	r1, [r4, #4]
    75da:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    75dc:	4290      	cmp	r0, r2
    75de:	d80b      	bhi.n	75f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f8>
    75e0:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
    75e4:	678e      	str	r6, [r1, #120]	; 0x78
    75e6:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    75ea:	b110      	cbz	r0, 75f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f2>
    75ec:	2001      	movs	r0, #1
    75ee:	f7fd ffb9 	bl	5564 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    75f2:	2001      	movs	r0, #1
    75f4:	f7ff fd14 	bl	7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>
    75f8:	6861      	ldr	r1, [r4, #4]
    75fa:	2002      	movs	r0, #2
    75fc:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7604:	200000ec 	.word	0x200000ec
    7608:	000f4240 	.word	0x000f4240
    760c:	00007425 	.word	0x00007425
    7610:	00007405 	.word	0x00007405
    7614:	0000e389 	.word	0x0000e389
    7618:	0000e389 	.word	0x0000e389
    761c:	0000e389 	.word	0x0000e389
    7620:	00007435 	.word	0x00007435
    7624:	0000e389 	.word	0x0000e389
    7628:	0000e389 	.word	0x0000e389
    762c:	0000e389 	.word	0x0000e389
    7630:	0000e389 	.word	0x0000e389
    7634:	0000e389 	.word	0x0000e389
    7638:	00007555 	.word	0x00007555
    763c:	000074d1 	.word	0x000074d1
    7640:	0000e389 	.word	0x0000e389
    7644:	0000e389 	.word	0x0000e389
    7648:	00007229 	.word	0x00007229
    764c:	00007205 	.word	0x00007205
    7650:	00000000 	.word	0x00000000
    7654:	0000e393 	.word	0x0000e393
    7658:	0000e32f 	.word	0x0000e32f
    765c:	0000e341 	.word	0x0000e341
    7660:	0000e34f 	.word	0x0000e34f
    7664:	000069fd 	.word	0x000069fd
    7668:	000072a5 	.word	0x000072a5
    766c:	00007385 	.word	0x00007385
    7670:	00007648 	.word	0x00007648
    7674:	00007650 	.word	0x00007650
    7678:	0000760c 	.word	0x0000760c
    767c:	00007660 	.word	0x00007660
    7680:	00007658 	.word	0x00007658
    7684:	00007261 	.word	0x00007261
    7688:	000070dd 	.word	0x000070dd
    768c:	000071b1 	.word	0x000071b1
    7690:	0000e3a5 	.word	0x0000e3a5

00007694 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    7694:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    7698:	461d      	mov	r5, r3
    769a:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    769e:	4616      	mov	r6, r2
    76a0:	4688      	mov	r8, r1
    76a2:	4681      	mov	r9, r0
    76a4:	f7fc ff58 	bl	4558 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    76a8:	4604      	mov	r4, r0
    76aa:	f005 fd88 	bl	d1be <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    76ae:	2801      	cmp	r0, #1
    76b0:	d063      	beq.n	777a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    76b2:	4620      	mov	r0, r4
    76b4:	f006 ff41 	bl	e53a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    76b8:	4604      	mov	r4, r0
    76ba:	221c      	movs	r2, #28
    76bc:	2100      	movs	r1, #0
    76be:	f004 ff9b 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    76c2:	2701      	movs	r7, #1
    76c4:	7027      	strb	r7, [r4, #0]
    76c6:	ea5f 0008 	movs.w	r0, r8
    76ca:	d009      	beq.n	76e0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4c>
    76cc:	2801      	cmp	r0, #1
    76ce:	d00b      	beq.n	76e8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x54>
    76d0:	2802      	cmp	r0, #2
    76d2:	d02d      	beq.n	7730 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9c>
    76d4:	f1b8 0f06 	cmp.w	r8, #6
    76d8:	d02c      	beq.n	7734 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa0>
    76da:	f240 217b 	movw	r1, #635	; 0x27b
    76de:	e049      	b.n	7774 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe0>
    76e0:	7aa0      	ldrb	r0, [r4, #10]
    76e2:	f040 0001 	orr.w	r0, r0, #1
    76e6:	e026      	b.n	7736 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    76e8:	7aa0      	ldrb	r0, [r4, #10]
    76ea:	f040 0005 	orr.w	r0, r0, #5
    76ee:	bf00      	nop
    76f0:	f040 0010 	orr.w	r0, r0, #16
    76f4:	72a0      	strb	r0, [r4, #10]
    76f6:	1c63      	adds	r3, r4, #1
    76f8:	1ca2      	adds	r2, r4, #2
    76fa:	4648      	mov	r0, r9
    76fc:	990a      	ldr	r1, [sp, #40]	; 0x28
    76fe:	f006 ff01 	bl	e504 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    7702:	f884 a009 	strb.w	sl, [r4, #9]
    7706:	7327      	strb	r7, [r4, #12]
    7708:	2000      	movs	r0, #0
    770a:	7360      	strb	r0, [r4, #13]
    770c:	20ff      	movs	r0, #255	; 0xff
    770e:	73a0      	strb	r0, [r4, #14]
    7710:	7aa1      	ldrb	r1, [r4, #10]
    7712:	0749      	lsls	r1, r1, #29
    7714:	d518      	bpl.n	7748 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb4>
    7716:	f104 0014 	add.w	r0, r4, #20
    771a:	1e41      	subs	r1, r0, #1
    771c:	2d02      	cmp	r5, #2
    771e:	d00d      	beq.n	773c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    7720:	2d03      	cmp	r5, #3
    7722:	d00b      	beq.n	773c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    7724:	f8d9 2008 	ldr.w	r2, [r9, #8]
    7728:	6813      	ldr	r3, [r2, #0]
    772a:	6003      	str	r3, [r0, #0]
    772c:	8892      	ldrh	r2, [r2, #4]
    772e:	e008      	b.n	7742 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xae>
    7730:	7aa0      	ldrb	r0, [r4, #10]
    7732:	e7dd      	b.n	76f0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    7734:	7aa0      	ldrb	r0, [r4, #10]
    7736:	f040 0002 	orr.w	r0, r0, #2
    773a:	e7d9      	b.n	76f0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    773c:	6832      	ldr	r2, [r6, #0]
    773e:	6002      	str	r2, [r0, #0]
    7740:	88b2      	ldrh	r2, [r6, #4]
    7742:	8082      	strh	r2, [r0, #4]
    7744:	700d      	strb	r5, [r1, #0]
    7746:	e000      	b.n	774a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    7748:	74e0      	strb	r0, [r4, #19]
    774a:	207f      	movs	r0, #127	; 0x7f
    774c:	76a0      	strb	r0, [r4, #26]
    774e:	f884 b01b 	strb.w	fp, [r4, #27]
    7752:	f7fc fefb 	bl	454c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7756:	4604      	mov	r4, r0
    7758:	f7fc fefe 	bl	4558 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    775c:	2201      	movs	r2, #1
    775e:	4621      	mov	r1, r4
    7760:	f006 fef4 	bl	e54c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    7764:	b120      	cbz	r0, 7770 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xdc>
    7766:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    776a:	2005      	movs	r0, #5
    776c:	f000 b9f0 	b.w	7b50 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    7770:	f240 219b 	movw	r1, #667	; 0x29b
    7774:	2033      	movs	r0, #51	; 0x33
    7776:	f7fc fabd 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    777a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
	...

00007780 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    7780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7784:	4616      	mov	r6, r2
    7786:	460c      	mov	r4, r1
    7788:	4605      	mov	r5, r0
    778a:	f006 fbc3 	bl	df14 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    778e:	7460      	strb	r0, [r4, #17]
    7790:	4628      	mov	r0, r5
    7792:	f006 fbb6 	bl	df02 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    7796:	74a0      	strb	r0, [r4, #18]
    7798:	1cea      	adds	r2, r5, #3
    779a:	4b14      	ldr	r3, [pc, #80]	; (77ec <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    779c:	1d90      	adds	r0, r2, #6
    779e:	2100      	movs	r1, #0
    77a0:	2e07      	cmp	r6, #7
    77a2:	d21f      	bcs.n	77e4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    77a4:	e8df f006 	tbb	[pc, r6]
    77a8:	1e110b04 	.word	0x1e110b04
    77ac:	00041e13 	.word	0x00041e13
    77b0:	781b      	ldrb	r3, [r3, #0]
    77b2:	e00d      	b.n	77d0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    77b4:	60e0      	str	r0, [r4, #12]
    77b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77ba:	60e1      	str	r1, [r4, #12]
    77bc:	e7fb      	b.n	77b6 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    77be:	785b      	ldrb	r3, [r3, #1]
    77c0:	7063      	strb	r3, [r4, #1]
    77c2:	e9c4 2001 	strd	r2, r0, [r4, #4]
    77c6:	7421      	strb	r1, [r4, #16]
    77c8:	e7f7      	b.n	77ba <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    77ca:	789b      	ldrb	r3, [r3, #2]
    77cc:	e000      	b.n	77d0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    77ce:	78db      	ldrb	r3, [r3, #3]
    77d0:	7063      	strb	r3, [r4, #1]
    77d2:	e9c4 2101 	strd	r2, r1, [r4, #4]
    77d6:	786a      	ldrb	r2, [r5, #1]
    77d8:	1f92      	subs	r2, r2, #6
    77da:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    77de:	7422      	strb	r2, [r4, #16]
    77e0:	d0eb      	beq.n	77ba <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    77e2:	e7e7      	b.n	77b4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    77e4:	7061      	strb	r1, [r4, #1]
    77e6:	6061      	str	r1, [r4, #4]
    77e8:	60a1      	str	r1, [r4, #8]
    77ea:	e7ec      	b.n	77c6 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    77ec:	0000f933 	.word	0x0000f933

000077f0 <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ>:
    77f0:	b508      	push	{r3, lr}
    77f2:	2244      	movs	r2, #68	; 0x44
    77f4:	2100      	movs	r1, #0
    77f6:	480c      	ldr	r0, [pc, #48]	; (7828 <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ+0x38>)
    77f8:	f004 fefe 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    77fc:	f7fe fdf0 	bl	63e0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7800:	2120      	movs	r1, #32
    7802:	7001      	strb	r1, [r0, #0]
    7804:	4808      	ldr	r0, [pc, #32]	; (7828 <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ+0x38>)
    7806:	3810      	subs	r0, #16
    7808:	2100      	movs	r1, #0
    780a:	6001      	str	r1, [r0, #0]
    780c:	6041      	str	r1, [r0, #4]
    780e:	6081      	str	r1, [r0, #8]
    7810:	60c1      	str	r1, [r0, #12]
    7812:	f000 f871 	bl	78f8 <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>
    7816:	f242 7010 	movw	r0, #10000	; 0x2710
    781a:	9000      	str	r0, [sp, #0]
    781c:	2201      	movs	r2, #1
    781e:	4669      	mov	r1, sp
    7820:	1080      	asrs	r0, r0, #2
    7822:	f000 fbb1 	bl	7f88 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x438>
    7826:	bd08      	pop	{r3, pc}
    7828:	20000fb0 	.word	0x20000fb0

0000782c <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ>:
    782c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    7830:	4c1e      	ldr	r4, [pc, #120]	; (78ac <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x80>)
    7832:	4607      	mov	r7, r0
    7834:	460e      	mov	r6, r1
    7836:	7820      	ldrb	r0, [r4, #0]
    7838:	b118      	cbz	r0, 7842 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x16>
    783a:	200c      	movs	r0, #12
    783c:	b004      	add	sp, #16
    783e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7842:	f7fe fdcd 	bl	63e0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7846:	4605      	mov	r5, r0
    7848:	61a7      	str	r7, [r4, #24]
    784a:	f897 0120 	ldrb.w	r0, [r7, #288]	; 0x120
    784e:	b110      	cbz	r0, 7856 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x2a>
    7850:	f240 4129 	movw	r1, #1065	; 0x429
    7854:	e026      	b.n	78a4 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    7856:	2005      	movs	r0, #5
    7858:	7020      	strb	r0, [r4, #0]
    785a:	2000      	movs	r0, #0
    785c:	7060      	strb	r0, [r4, #1]
    785e:	7720      	strb	r0, [r4, #28]
    7860:	4630      	mov	r0, r6
    7862:	f000 f9f7 	bl	7c54 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x104>
    7866:	f000 fd27 	bl	82b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b8>
    786a:	6320      	str	r0, [r4, #48]	; 0x30
    786c:	2100      	movs	r1, #0
    786e:	4810      	ldr	r0, [pc, #64]	; (78b0 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x84>)
    7870:	f7fa fd5c 	bl	232c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7874:	7028      	strb	r0, [r5, #0]
    7876:	2820      	cmp	r0, #32
    7878:	d00c      	beq.n	7894 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x68>
    787a:	2200      	movs	r2, #0
    787c:	2101      	movs	r1, #1
    787e:	4668      	mov	r0, sp
    7880:	f000 fdb4 	bl	83ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ec>
    7884:	b148      	cbz	r0, 789a <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x6e>
    7886:	7828      	ldrb	r0, [r5, #0]
    7888:	4669      	mov	r1, sp
    788a:	f006 feab 	bl	e5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    788e:	b138      	cbz	r0, 78a0 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x74>
    7890:	2000      	movs	r0, #0
    7892:	e7d3      	b.n	783c <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x10>
    7894:	f44f 6187 	mov.w	r1, #1080	; 0x438
    7898:	e004      	b.n	78a4 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    789a:	f240 413b 	movw	r1, #1083	; 0x43b
    789e:	e001      	b.n	78a4 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    78a0:	f240 413c 	movw	r1, #1084	; 0x43c
    78a4:	2035      	movs	r0, #53	; 0x35
    78a6:	f7fc fa25 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78aa:	0000      	.short	0x0000
    78ac:	20000fb0 	.word	0x20000fb0
    78b0:	00007cf1 	.word	0x00007cf1

000078b4 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q>:
    78b4:	4902      	ldr	r1, [pc, #8]	; (78c0 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q+0xc>)
    78b6:	6989      	ldr	r1, [r1, #24]
    78b8:	6001      	str	r1, [r0, #0]
    78ba:	f000 b865 	b.w	7988 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
    78be:	0000      	.short	0x0000
    78c0:	20000fb0 	.word	0x20000fb0

000078c4 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>:
    78c4:	4901      	ldr	r1, [pc, #4]	; (78cc <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA+0x8>)
    78c6:	7048      	strb	r0, [r1, #1]
    78c8:	4770      	bx	lr
    78ca:	0000      	.short	0x0000
    78cc:	20000fa0 	.word	0x20000fa0

000078d0 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>:
    78d0:	b570      	push	{r4, r5, r6, lr}
    78d2:	4605      	mov	r5, r0
    78d4:	4907      	ldr	r1, [pc, #28]	; (78f4 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY+0x24>)
    78d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    78da:	fbb1 f4f0 	udiv	r4, r1, r0
    78de:	f006 fed1 	bl	e684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    78e2:	1901      	adds	r1, r0, r4
    78e4:	4628      	mov	r0, r5
    78e6:	f501 719b 	add.w	r1, r1, #310	; 0x136
    78ea:	f006 fc95 	bl	e218 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    78ee:	b280      	uxth	r0, r0
    78f0:	bd70      	pop	{r4, r5, r6, pc}
    78f2:	0000      	.short	0x0000
    78f4:	00012105 	.word	0x00012105

000078f8 <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>:
    78f8:	4804      	ldr	r0, [pc, #16]	; (790c <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ+0x14>)
    78fa:	b510      	push	{r4, lr}
    78fc:	7800      	ldrb	r0, [r0, #0]
    78fe:	b108      	cbz	r0, 7904 <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ+0xc>
    7900:	f000 f842 	bl	7988 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
    7904:	f000 f972 	bl	7bec <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9c>
    7908:	2000      	movs	r0, #0
    790a:	bd10      	pop	{r4, pc}
    790c:	20000fb0 	.word	0x20000fb0

00007910 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA>:
    7910:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7912:	4606      	mov	r6, r0
    7914:	b111      	cbz	r1, 791c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0xc>
    7916:	2011      	movs	r0, #17
    7918:	b004      	add	sp, #16
    791a:	bd70      	pop	{r4, r5, r6, pc}
    791c:	4c18      	ldr	r4, [pc, #96]	; (7980 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x70>)
    791e:	7820      	ldrb	r0, [r4, #0]
    7920:	b108      	cbz	r0, 7926 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x16>
    7922:	200c      	movs	r0, #12
    7924:	e7f8      	b.n	7918 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x8>
    7926:	f7fe fd5b 	bl	63e0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    792a:	4605      	mov	r5, r0
    792c:	2000      	movs	r0, #0
    792e:	7060      	strb	r0, [r4, #1]
    7930:	2004      	movs	r0, #4
    7932:	7020      	strb	r0, [r4, #0]
    7934:	4630      	mov	r0, r6
    7936:	f000 f98d 	bl	7c54 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x104>
    793a:	f000 fcbd 	bl	82b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b8>
    793e:	6320      	str	r0, [r4, #48]	; 0x30
    7940:	2100      	movs	r1, #0
    7942:	4810      	ldr	r0, [pc, #64]	; (7984 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x74>)
    7944:	f7fa fcf2 	bl	232c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7948:	7028      	strb	r0, [r5, #0]
    794a:	2820      	cmp	r0, #32
    794c:	d00c      	beq.n	7968 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x58>
    794e:	2200      	movs	r2, #0
    7950:	2101      	movs	r1, #1
    7952:	4668      	mov	r0, sp
    7954:	f000 fd4a 	bl	83ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ec>
    7958:	b148      	cbz	r0, 796e <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x5e>
    795a:	7828      	ldrb	r0, [r5, #0]
    795c:	4669      	mov	r1, sp
    795e:	f006 fe41 	bl	e5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    7962:	b138      	cbz	r0, 7974 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x64>
    7964:	2000      	movs	r0, #0
    7966:	e7d7      	b.n	7918 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x8>
    7968:	f240 419f 	movw	r1, #1183	; 0x49f
    796c:	e004      	b.n	7978 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x68>
    796e:	f240 41a1 	movw	r1, #1185	; 0x4a1
    7972:	e001      	b.n	7978 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x68>
    7974:	f240 41a2 	movw	r1, #1186	; 0x4a2
    7978:	2035      	movs	r0, #53	; 0x35
    797a:	f7fc f9bb 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    797e:	0000      	.short	0x0000
    7980:	20000fb0 	.word	0x20000fb0
    7984:	00007cf1 	.word	0x00007cf1

00007988 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>:
    7988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    798c:	2700      	movs	r7, #0
    798e:	f7fe fd27 	bl	63e0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7992:	4c17      	ldr	r4, [pc, #92]	; (79f0 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x68>)
    7994:	4605      	mov	r5, r0
    7996:	7820      	ldrb	r0, [r4, #0]
    7998:	2804      	cmp	r0, #4
    799a:	d005      	beq.n	79a8 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x20>
    799c:	7820      	ldrb	r0, [r4, #0]
    799e:	2805      	cmp	r0, #5
    79a0:	d002      	beq.n	79a8 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x20>
    79a2:	200c      	movs	r0, #12
    79a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    79a8:	2001      	movs	r0, #1
    79aa:	7060      	strb	r0, [r4, #1]
    79ac:	7b20      	ldrb	r0, [r4, #12]
    79ae:	b160      	cbz	r0, 79ca <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x42>
    79b0:	f3ef 8610 	mrs	r6, PRIMASK
    79b4:	b672      	cpsid	i
    79b6:	7b20      	ldrb	r0, [r4, #12]
    79b8:	b128      	cbz	r0, 79c6 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x3e>
    79ba:	7b60      	ldrb	r0, [r4, #13]
    79bc:	b118      	cbz	r0, 79c6 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x3e>
    79be:	f7fe fee1 	bl	6784 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    79c2:	f000 fad1 	bl	7f68 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x418>
    79c6:	b126      	cbz	r6, 79d2 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4a>
    79c8:	e004      	b.n	79d4 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4c>
    79ca:	7828      	ldrb	r0, [r5, #0]
    79cc:	f7fa fa64 	bl	1e98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    79d0:	e000      	b.n	79d4 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4c>
    79d2:	b662      	cpsie	i
    79d4:	7828      	ldrb	r0, [r5, #0]
    79d6:	f7fa fb9d 	bl	2114 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    79da:	f000 fe37 	bl	864c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64c>
    79de:	2000      	movs	r0, #0
    79e0:	7060      	strb	r0, [r4, #1]
    79e2:	7f20      	ldrb	r0, [r4, #28]
    79e4:	b100      	cbz	r0, 79e8 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x60>
    79e6:	270c      	movs	r7, #12
    79e8:	f000 fe5a 	bl	86a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6a0>
    79ec:	4638      	mov	r0, r7
    79ee:	e7d9      	b.n	79a4 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x1c>
    79f0:	20000fb0 	.word	0x20000fb0

000079f4 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>:
    79f4:	4801      	ldr	r0, [pc, #4]	; (79fc <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ+0x8>)
    79f6:	7800      	ldrb	r0, [r0, #0]
    79f8:	4770      	bx	lr
    79fa:	0000      	.short	0x0000
    79fc:	20000fb0 	.word	0x20000fb0

00007a00 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>:
    7a00:	490c      	ldr	r1, [pc, #48]	; (7a34 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x34>)
    7a02:	b508      	push	{r3, lr}
    7a04:	7809      	ldrb	r1, [r1, #0]
    7a06:	b121      	cbz	r1, 7a12 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x12>
    7a08:	f44f 618b 	mov.w	r1, #1112	; 0x458
    7a0c:	2035      	movs	r0, #53	; 0x35
    7a0e:	f7fc f971 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a12:	2300      	movs	r3, #0
    7a14:	9300      	str	r3, [sp, #0]
    7a16:	7801      	ldrb	r1, [r0, #0]
    7a18:	461a      	mov	r2, r3
    7a1a:	07c9      	lsls	r1, r1, #31
    7a1c:	d003      	beq.n	7a26 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x26>
    7a1e:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    7a22:	2201      	movs	r2, #1
    7a24:	9000      	str	r0, [sp, #0]
    7a26:	4669      	mov	r1, sp
    7a28:	4618      	mov	r0, r3
    7a2a:	f000 faad 	bl	7f88 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x438>
    7a2e:	2000      	movs	r0, #0
    7a30:	bd08      	pop	{r3, pc}
    7a32:	0000      	.short	0x0000
    7a34:	20000fb0 	.word	0x20000fb0

00007a38 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    7a38:	b570      	push	{r4, r5, r6, lr}
    7a3a:	f003 fe9b 	bl	b774 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7a3e:	4c0e      	ldr	r4, [pc, #56]	; (7a78 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
    7a40:	4606      	mov	r6, r0
    7a42:	7860      	ldrb	r0, [r4, #1]
    7a44:	b170      	cbz	r0, 7a64 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    7a46:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    7a4a:	4632      	mov	r2, r6
    7a4c:	4628      	mov	r0, r5
    7a4e:	f005 ff8a 	bl	d966 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7a52:	6060      	str	r0, [r4, #4]
    7a54:	42a8      	cmp	r0, r5
    7a56:	d005      	beq.n	7a64 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    7a58:	68e1      	ldr	r1, [r4, #12]
    7a5a:	1b40      	subs	r0, r0, r5
    7a5c:	4408      	add	r0, r1
    7a5e:	60e0      	str	r0, [r4, #12]
    7a60:	f7fa fd6e 	bl	2540 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7a64:	6860      	ldr	r0, [r4, #4]
    7a66:	42b0      	cmp	r0, r6
    7a68:	d301      	bcc.n	7a6e <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    7a6a:	7820      	ldrb	r0, [r4, #0]
    7a6c:	b108      	cbz	r0, 7a72 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3a>
    7a6e:	2000      	movs	r0, #0
    7a70:	bd70      	pop	{r4, r5, r6, pc}
    7a72:	2001      	movs	r0, #1
    7a74:	bd70      	pop	{r4, r5, r6, pc}
    7a76:	0000      	.short	0x0000
    7a78:	20000fa0 	.word	0x20000fa0

00007a7c <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    7a7c:	b510      	push	{r4, lr}
    7a7e:	2905      	cmp	r1, #5
    7a80:	d22d      	bcs.n	7ade <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    7a82:	e8df f001 	tbb	[pc, r1]
    7a86:	0a05      	.short	0x0a05
    7a88:	00280e03 	.word	0x00280e03
    7a8c:	2100      	movs	r1, #0
    7a8e:	e000      	b.n	7a92 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    7a90:	2101      	movs	r1, #1
    7a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7a96:	f000 b9d1 	b.w	7e3c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ec>
    7a9a:	2103      	movs	r1, #3
    7a9c:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    7aa0:	bd10      	pop	{r4, pc}
    7aa2:	4911      	ldr	r1, [pc, #68]	; (7ae8 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x6c>)
    7aa4:	4604      	mov	r4, r0
    7aa6:	68c0      	ldr	r0, [r0, #12]
    7aa8:	6008      	str	r0, [r1, #0]
    7aaa:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    7aae:	6220      	str	r0, [r4, #32]
    7ab0:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    7ab4:	83a0      	strh	r0, [r4, #28]
    7ab6:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    7aba:	60e0      	str	r0, [r4, #12]
    7abc:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    7ac0:	82a0      	strh	r0, [r4, #20]
    7ac2:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    7ac6:	82e0      	strh	r0, [r4, #22]
    7ac8:	4620      	mov	r0, r4
    7aca:	f006 fd79 	bl	e5c0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    7ace:	2002      	movs	r0, #2
    7ad0:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    7ad4:	bd10      	pop	{r4, pc}
    7ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ada:	f006 bd71 	b.w	e5c0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    7ade:	f640 3158 	movw	r1, #2904	; 0xb58
    7ae2:	2035      	movs	r0, #53	; 0x35
    7ae4:	f7fc f906 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ae8:	200000fc 	.word	0x200000fc

00007aec <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    7aec:	b570      	push	{r4, r5, r6, lr}
    7aee:	4605      	mov	r5, r0
    7af0:	f003 fe40 	bl	b774 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7af4:	4604      	mov	r4, r0
    7af6:	b155      	cbz	r5, 7b0e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x22>
    7af8:	2d03      	cmp	r5, #3
    7afa:	d00d      	beq.n	7b18 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x2c>
    7afc:	2d04      	cmp	r5, #4
    7afe:	d00e      	beq.n	7b1e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x32>
    7b00:	2d06      	cmp	r5, #6
    7b02:	d01e      	beq.n	7b42 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x56>
    7b04:	f240 5194 	movw	r1, #1428	; 0x594
    7b08:	2035      	movs	r0, #53	; 0x35
    7b0a:	f7fc f8f3 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b0e:	2001      	movs	r0, #1
    7b10:	f006 fd3a 	bl	e588 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    7b14:	3098      	adds	r0, #152	; 0x98
    7b16:	e004      	b.n	7b22 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    7b18:	f44f 7057 	mov.w	r0, #860	; 0x35c
    7b1c:	e001      	b.n	7b22 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    7b1e:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    7b22:	4e0a      	ldr	r6, [pc, #40]	; (7b4c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x60>)
    7b24:	1825      	adds	r5, r4, r0
    7b26:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7b28:	38f0      	subs	r0, #240	; 0xf0
    7b2a:	4285      	cmp	r5, r0
    7b2c:	d307      	bcc.n	7b3e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x52>
    7b2e:	2400      	movs	r4, #0
    7b30:	f000 fc12 	bl	8358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x358>
    7b34:	b140      	cbz	r0, 7b48 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    7b36:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7b38:	38f0      	subs	r0, #240	; 0xf0
    7b3a:	4285      	cmp	r5, r0
    7b3c:	d203      	bcs.n	7b46 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    7b3e:	2401      	movs	r4, #1
    7b40:	e002      	b.n	7b48 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    7b42:	2001      	movs	r0, #1
    7b44:	bd70      	pop	{r4, r5, r6, pc}
    7b46:	2400      	movs	r4, #0
    7b48:	4620      	mov	r0, r4
    7b4a:	bd70      	pop	{r4, r5, r6, pc}
    7b4c:	20000fb0 	.word	0x20000fb0

00007b50 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>:
    7b50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7b52:	2501      	movs	r5, #1
    7b54:	4c24      	ldr	r4, [pc, #144]	; (7be8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x98>)
    7b56:	2806      	cmp	r0, #6
    7b58:	d243      	bcs.n	7be2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x92>
    7b5a:	e8df f000 	tbb	[pc, r0]
    7b5e:	1903      	.short	0x1903
    7b60:	3e232319 	.word	0x3e232319
    7b64:	f002 fcfa 	bl	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7b68:	7860      	ldrb	r0, [r4, #1]
    7b6a:	bb88      	cbnz	r0, 7bd0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7b6c:	2200      	movs	r2, #0
    7b6e:	4611      	mov	r1, r2
    7b70:	4668      	mov	r0, sp
    7b72:	f000 fc3b 	bl	83ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ec>
    7b76:	b148      	cbz	r0, 7b8c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3c>
    7b78:	f7fe fc32 	bl	63e0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7b7c:	7800      	ldrb	r0, [r0, #0]
    7b7e:	4669      	mov	r1, sp
    7b80:	f006 fd30 	bl	e5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    7b84:	bb20      	cbnz	r0, 7bd0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7b86:	f640 2163 	movw	r1, #2659	; 0xa63
    7b8a:	e01c      	b.n	7bc6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7b8c:	70e5      	strb	r5, [r4, #3]
    7b8e:	e020      	b.n	7bd2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7b90:	2802      	cmp	r0, #2
    7b92:	d005      	beq.n	7ba0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x50>
    7b94:	2000      	movs	r0, #0
    7b96:	b004      	add	sp, #16
    7b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b9c:	f000 b96a 	b.w	7e74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x324>
    7ba0:	2001      	movs	r0, #1
    7ba2:	e7f8      	b.n	7b96 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x46>
    7ba4:	2804      	cmp	r0, #4
    7ba6:	d011      	beq.n	7bcc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7c>
    7ba8:	f05f 0600 	movs.w	r6, #0
    7bac:	f002 fcd6 	bl	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7bb0:	7725      	strb	r5, [r4, #28]
    7bb2:	7766      	strb	r6, [r4, #29]
    7bb4:	69a1      	ldr	r1, [r4, #24]
    7bb6:	2000      	movs	r0, #0
    7bb8:	f881 0120 	strb.w	r0, [r1, #288]	; 0x120
    7bbc:	f000 f85a 	bl	7c74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x124>
    7bc0:	b130      	cbz	r0, 7bd0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7bc2:	f640 3118 	movw	r1, #2840	; 0xb18
    7bc6:	2035      	movs	r0, #53	; 0x35
    7bc8:	f7fc f894 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bcc:	2601      	movs	r6, #1
    7bce:	e7ed      	b.n	7bac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c>
    7bd0:	e7ff      	b.n	7bd2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7bd2:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7bd6:	f000 b9c7 	b.w	7f68 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x418>
    7bda:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7bde:	f002 bcbd 	b.w	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7be2:	f640 31b2 	movw	r1, #2994	; 0xbb2
    7be6:	e7ee      	b.n	7bc6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7be8:	20000fb0 	.word	0x20000fb0
    7bec:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7bee:	4c18      	ldr	r4, [pc, #96]	; (7c50 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x100>)
    7bf0:	2001      	movs	r0, #1
    7bf2:	7020      	strb	r0, [r4, #0]
    7bf4:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7bf8:	e00b      	b.n	7c12 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xc2>
    7bfa:	2100      	movs	r1, #0
    7bfc:	f005 fd1f 	bl	d63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7c00:	0006      	movs	r6, r0
    7c02:	d010      	beq.n	7c26 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xd6>
    7c04:	f896 0121 	ldrb.w	r0, [r6, #289]	; 0x121
    7c08:	f7fa fa84 	bl	2114 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7c0c:	4630      	mov	r0, r6
    7c0e:	f006 fd01 	bl	e614 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x9c>
    7c12:	4669      	mov	r1, sp
    7c14:	2000      	movs	r0, #0
    7c16:	f005 fd1b 	bl	d650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7c1a:	b180      	cbz	r0, 7c3e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    7c1c:	f240 2145 	movw	r1, #581	; 0x245
    7c20:	2035      	movs	r0, #53	; 0x35
    7c22:	f7fc f867 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c26:	f240 514a 	movw	r1, #1354	; 0x54a
    7c2a:	e7f9      	b.n	7c20 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xd0>
    7c2c:	9802      	ldr	r0, [sp, #8]
    7c2e:	b130      	cbz	r0, 7c3e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    7c30:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    7c34:	b119      	cbz	r1, 7c3e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    7c36:	8800      	ldrh	r0, [r0, #0]
    7c38:	42a8      	cmp	r0, r5
    7c3a:	d1de      	bne.n	7bfa <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaa>
    7c3c:	e004      	b.n	7c48 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xf8>
    7c3e:	4668      	mov	r0, sp
    7c40:	f7fc fa88 	bl	4154 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7c44:	2800      	cmp	r0, #0
    7c46:	d0f1      	beq.n	7c2c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xdc>
    7c48:	2000      	movs	r0, #0
    7c4a:	7020      	strb	r0, [r4, #0]
    7c4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7c4e:	0000      	.short	0x0000
    7c50:	20000fa0 	.word	0x20000fa0
    7c54:	4906      	ldr	r1, [pc, #24]	; (7c70 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x120>)
    7c56:	b140      	cbz	r0, 7c6a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x11a>
    7c58:	2201      	movs	r2, #1
    7c5a:	708a      	strb	r2, [r1, #2]
    7c5c:	f242 7210 	movw	r2, #10000	; 0x2710
    7c60:	4350      	muls	r0, r2
    7c62:	684a      	ldr	r2, [r1, #4]
    7c64:	4410      	add	r0, r2
    7c66:	6208      	str	r0, [r1, #32]
    7c68:	4770      	bx	lr
    7c6a:	2000      	movs	r0, #0
    7c6c:	7088      	strb	r0, [r1, #2]
    7c6e:	4770      	bx	lr
    7c70:	20000fb0 	.word	0x20000fb0
    7c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7c76:	4c1c      	ldr	r4, [pc, #112]	; (7ce8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x198>)
    7c78:	7820      	ldrb	r0, [r4, #0]
    7c7a:	2805      	cmp	r0, #5
    7c7c:	d002      	beq.n	7c84 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x134>
    7c7e:	200c      	movs	r0, #12
    7c80:	b004      	add	sp, #16
    7c82:	bd10      	pop	{r4, pc}
    7c84:	69a1      	ldr	r1, [r4, #24]
    7c86:	b129      	cbz	r1, 7c94 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x144>
    7c88:	f891 0120 	ldrb.w	r0, [r1, #288]	; 0x120
    7c8c:	b128      	cbz	r0, 7c9a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x14a>
    7c8e:	f240 5103 	movw	r1, #1283	; 0x503
    7c92:	e025      	b.n	7ce0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    7c94:	f240 5102 	movw	r1, #1282	; 0x502
    7c98:	e022      	b.n	7ce0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    7c9a:	f891 0121 	ldrb.w	r0, [r1, #289]	; 0x121
    7c9e:	2820      	cmp	r0, #32
    7ca0:	d002      	beq.n	7ca8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x158>
    7ca2:	f240 5105 	movw	r1, #1285	; 0x505
    7ca6:	e01b      	b.n	7ce0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    7ca8:	4810      	ldr	r0, [pc, #64]	; (7cec <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x19c>)
    7caa:	f7fa fb3f 	bl	232c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7cae:	69a1      	ldr	r1, [r4, #24]
    7cb0:	2820      	cmp	r0, #32
    7cb2:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    7cb6:	d00e      	beq.n	7cd6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x186>
    7cb8:	2300      	movs	r3, #0
    7cba:	2201      	movs	r2, #1
    7cbc:	4668      	mov	r0, sp
    7cbe:	f000 fa09 	bl	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
    7cc2:	69a0      	ldr	r0, [r4, #24]
    7cc4:	4669      	mov	r1, sp
    7cc6:	f890 0121 	ldrb.w	r0, [r0, #289]	; 0x121
    7cca:	f006 fc8b 	bl	e5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    7cce:	b128      	cbz	r0, 7cdc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x18c>
    7cd0:	2000      	movs	r0, #0
    7cd2:	61a0      	str	r0, [r4, #24]
    7cd4:	e7d4      	b.n	7c80 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x130>
    7cd6:	f240 5109 	movw	r1, #1289	; 0x509
    7cda:	e001      	b.n	7ce0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    7cdc:	f240 510c 	movw	r1, #1292	; 0x50c
    7ce0:	2035      	movs	r0, #53	; 0x35
    7ce2:	f7fc f807 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ce6:	0000      	.short	0x0000
    7ce8:	20000fb0 	.word	0x20000fb0
    7cec:	00007fdd 	.word	0x00007fdd
    7cf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7cf2:	460d      	mov	r5, r1
    7cf4:	2001      	movs	r0, #1
    7cf6:	f006 fc30 	bl	e55a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7cfa:	b2c4      	uxtb	r4, r0
    7cfc:	200b      	movs	r0, #11
    7cfe:	f006 fc2c 	bl	e55a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7d02:	b2c0      	uxtb	r0, r0
    7d04:	4284      	cmp	r4, r0
    7d06:	d002      	beq.n	7d0e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1be>
    7d08:	f240 21ce 	movw	r1, #718	; 0x2ce
    7d0c:	e073      	b.n	7df6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    7d0e:	f7fe fb67 	bl	63e0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7d12:	2601      	movs	r6, #1
    7d14:	4c3b      	ldr	r4, [pc, #236]	; (7e04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b4>)
    7d16:	2d09      	cmp	r5, #9
    7d18:	d270      	bcs.n	7dfc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ac>
    7d1a:	e8df f005 	tbb	[pc, r5]
    7d1e:	3605      	.short	0x3605
    7d20:	6f464a4a 	.word	0x6f464a4a
    7d24:	006a665e 	.word	0x006a665e
    7d28:	7326      	strb	r6, [r4, #12]
    7d2a:	7861      	ldrb	r1, [r4, #1]
    7d2c:	2900      	cmp	r1, #0
    7d2e:	d12b      	bne.n	7d88 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    7d30:	7800      	ldrb	r0, [r0, #0]
    7d32:	f7f9 fc67 	bl	1604 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    7d36:	4605      	mov	r5, r0
    7d38:	6120      	str	r0, [r4, #16]
    7d3a:	f000 fccb 	bl	86d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6d4>
    7d3e:	b118      	cbz	r0, 7d48 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1f8>
    7d40:	2000      	movs	r0, #0
    7d42:	f88d 0004 	strb.w	r0, [sp, #4]
    7d46:	e001      	b.n	7d4c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1fc>
    7d48:	f88d 6004 	strb.w	r6, [sp, #4]
    7d4c:	4629      	mov	r1, r5
    7d4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7d50:	f7f9 fc34 	bl	15bc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7d54:	6861      	ldr	r1, [r4, #4]
    7d56:	fbb0 f2f1 	udiv	r2, r0, r1
    7d5a:	fb01 0012 	mls	r0, r1, r2, r0
    7d5e:	b150      	cbz	r0, 7d76 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x226>
    7d60:	f05f 0000 	movs.w	r0, #0
    7d64:	f88d 0005 	strb.w	r0, [sp, #5]
    7d68:	4668      	mov	r0, sp
    7d6a:	f7fe fc73 	bl	6654 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    7d6e:	b120      	cbz	r0, 7d7a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x22a>
    7d70:	f44f 7142 	mov.w	r1, #776	; 0x308
    7d74:	e03f      	b.n	7df6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    7d76:	2001      	movs	r0, #1
    7d78:	e7f4      	b.n	7d64 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x214>
    7d7a:	4922      	ldr	r1, [pc, #136]	; (7e04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b4>)
    7d7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7d7e:	3910      	subs	r1, #16
    7d80:	38df      	subs	r0, #223	; 0xdf
    7d82:	60c8      	str	r0, [r1, #12]
    7d84:	f7fa fbdc 	bl	2540 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7d88:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7d8a:	7860      	ldrb	r0, [r4, #1]
    7d8c:	b128      	cbz	r0, 7d9a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x24a>
    7d8e:	f7fe fcf9 	bl	6784 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    7d92:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7d96:	f000 b8e7 	b.w	7f68 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x418>
    7d9a:	7366      	strb	r6, [r4, #13]
    7d9c:	f7fe fcec 	bl	6778 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    7da0:	2800      	cmp	r0, #0
    7da2:	d0f1      	beq.n	7d88 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    7da4:	f240 311b 	movw	r1, #795	; 0x31b
    7da8:	e025      	b.n	7df6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    7daa:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7dae:	f003 bec5 	b.w	bb3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    7db2:	7805      	ldrb	r5, [r0, #0]
    7db4:	2201      	movs	r2, #1
    7db6:	2100      	movs	r1, #0
    7db8:	4668      	mov	r0, sp
    7dba:	f000 fb17 	bl	83ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ec>
    7dbe:	b140      	cbz	r0, 7dd2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x282>
    7dc0:	4669      	mov	r1, sp
    7dc2:	4628      	mov	r0, r5
    7dc4:	f006 fc0e 	bl	e5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    7dc8:	2800      	cmp	r0, #0
    7dca:	d1dd      	bne.n	7d88 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    7dcc:	f640 217f 	movw	r1, #2687	; 0xa7f
    7dd0:	e011      	b.n	7df6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    7dd2:	70e6      	strb	r6, [r4, #3]
    7dd4:	f000 f818 	bl	7e08 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b8>
    7dd8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7dda:	f000 fabd 	bl	8358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x358>
    7dde:	2800      	cmp	r0, #0
    7de0:	d1fa      	bne.n	7dd8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x288>
    7de2:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7de6:	f006 baa0 	b.w	e32a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    7dea:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7dee:	f000 b80b 	b.w	7e08 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b8>
    7df2:	f240 313f 	movw	r1, #831	; 0x33f
    7df6:	2035      	movs	r0, #53	; 0x35
    7df8:	f7fb ff7c 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7dfc:	f240 3143 	movw	r1, #835	; 0x343
    7e00:	e7f9      	b.n	7df6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    7e02:	0000      	.short	0x0000
    7e04:	20000fb0 	.word	0x20000fb0
    7e08:	b510      	push	{r4, lr}
    7e0a:	4c0b      	ldr	r4, [pc, #44]	; (7e38 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e8>)
    7e0c:	7820      	ldrb	r0, [r4, #0]
    7e0e:	b130      	cbz	r0, 7e1e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ce>
    7e10:	f000 fc1c 	bl	864c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64c>
    7e14:	78e0      	ldrb	r0, [r4, #3]
    7e16:	b158      	cbz	r0, 7e30 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e0>
    7e18:	7f20      	ldrb	r0, [r4, #28]
    7e1a:	b128      	cbz	r0, 7e28 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2d8>
    7e1c:	e008      	b.n	7e30 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e0>
    7e1e:	f240 21ba 	movw	r1, #698	; 0x2ba
    7e22:	2035      	movs	r0, #53	; 0x35
    7e24:	f7fb ff66 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e28:	f7fe fcbe 	bl	67a8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    7e2c:	f002 fb96 	bl	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7e34:	f000 bc34 	b.w	86a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6a0>
    7e38:	20000fb0 	.word	0x20000fb0
    7e3c:	b510      	push	{r4, lr}
    7e3e:	4604      	mov	r4, r0
    7e40:	2901      	cmp	r1, #1
    7e42:	d102      	bne.n	7e4a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2fa>
    7e44:	480a      	ldr	r0, [pc, #40]	; (7e70 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x320>)
    7e46:	7800      	ldrb	r0, [r0, #0]
    7e48:	b140      	cbz	r0, 7e5c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x30c>
    7e4a:	2004      	movs	r0, #4
    7e4c:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    7e50:	f003 fcc4 	bl	b7dc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    7e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7e58:	f7fa ba90 	b.w	237c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    7e5c:	2200      	movs	r2, #0
    7e5e:	2101      	movs	r1, #1
    7e60:	4620      	mov	r0, r4
    7e62:	f006 fbef 	bl	e644 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xcc>
    7e66:	f834 0f7c 	ldrh.w	r0, [r4, #124]!
    7e6a:	1c40      	adds	r0, r0, #1
    7e6c:	8020      	strh	r0, [r4, #0]
    7e6e:	e7ef      	b.n	7e50 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x300>
    7e70:	20000fa0 	.word	0x20000fa0
    7e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e78:	4c39      	ldr	r4, [pc, #228]	; (7f60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x410>)
    7e7a:	4682      	mov	sl, r0
    7e7c:	6926      	ldr	r6, [r4, #16]
    7e7e:	f003 fc79 	bl	b774 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7e82:	4605      	mov	r5, r0
    7e84:	69a0      	ldr	r0, [r4, #24]
    7e86:	2201      	movs	r2, #1
    7e88:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    7e8c:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
    7e90:	3062      	adds	r0, #98	; 0x62
    7e92:	2101      	movs	r1, #1
    7e94:	7281      	strb	r1, [r0, #10]
    7e96:	69a0      	ldr	r0, [r4, #24]
    7e98:	2100      	movs	r1, #0
    7e9a:	302c      	adds	r0, #44	; 0x2c
    7e9c:	f006 f9a3 	bl	e1e6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7ea0:	2101      	movs	r1, #1
    7ea2:	2000      	movs	r0, #0
    7ea4:	f006 fbfa 	bl	e69c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x124>
    7ea8:	69a7      	ldr	r7, [r4, #24]
    7eaa:	1971      	adds	r1, r6, r5
    7eac:	4408      	add	r0, r1
    7eae:	f200 49af 	addw	r9, r0, #1199	; 0x4af
    7eb2:	f8d7 800c 	ldr.w	r8, [r7, #12]
    7eb6:	f002 fb29 	bl	a50c <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    7eba:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    7ebe:	4288      	cmp	r0, r1
    7ec0:	d00a      	beq.n	7ed8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x388>
    7ec2:	464a      	mov	r2, r9
    7ec4:	4641      	mov	r1, r8
    7ec6:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    7eca:	f006 fd15 	bl	e8f8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    7ece:	4540      	cmp	r0, r8
    7ed0:	d903      	bls.n	7eda <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x38a>
    7ed2:	f44f 61bf 	mov.w	r1, #1528	; 0x5f8
    7ed6:	e022      	b.n	7f1e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3ce>
    7ed8:	2000      	movs	r0, #0
    7eda:	4922      	ldr	r1, [pc, #136]	; (7f64 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x414>)
    7edc:	4607      	mov	r7, r0
    7ede:	6849      	ldr	r1, [r1, #4]
    7ee0:	4288      	cmp	r0, r1
    7ee2:	69a0      	ldr	r0, [r4, #24]
    7ee4:	68c1      	ldr	r1, [r0, #12]
    7ee6:	d202      	bcs.n	7eee <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x39e>
    7ee8:	440f      	add	r7, r1
    7eea:	6201      	str	r1, [r0, #32]
    7eec:	e008      	b.n	7f00 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3b0>
    7eee:	4638      	mov	r0, r7
    7ef0:	f005 fec4 	bl	dc7c <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    7ef4:	69a1      	ldr	r1, [r4, #24]
    7ef6:	68c9      	ldr	r1, [r1, #12]
    7ef8:	f005 febc 	bl	dc74 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7efc:	69a1      	ldr	r1, [r4, #24]
    7efe:	6208      	str	r0, [r1, #32]
    7f00:	69a0      	ldr	r0, [r4, #24]
    7f02:	68c1      	ldr	r1, [r0, #12]
    7f04:	2005      	movs	r0, #5
    7f06:	f005 febf 	bl	dc88 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7f0a:	69a1      	ldr	r1, [r4, #24]
    7f0c:	b280      	uxth	r0, r0
    7f0e:	8388      	strh	r0, [r1, #28]
    7f10:	69a1      	ldr	r1, [r4, #24]
    7f12:	6a09      	ldr	r1, [r1, #32]
    7f14:	1a79      	subs	r1, r7, r1
    7f16:	4288      	cmp	r0, r1
    7f18:	d804      	bhi.n	7f24 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3d4>
    7f1a:	f640 21ee 	movw	r1, #2798	; 0xaee
    7f1e:	2035      	movs	r0, #53	; 0x35
    7f20:	f7fb fee8 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f24:	2101      	movs	r1, #1
    7f26:	4650      	mov	r0, sl
    7f28:	f006 fbb8 	bl	e69c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x124>
    7f2c:	4428      	add	r0, r5
    7f2e:	19c5      	adds	r5, r0, r7
    7f30:	2101      	movs	r1, #1
    7f32:	4650      	mov	r0, sl
    7f34:	f005 fdd4 	bl	dae0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7f38:	4405      	add	r5, r0
    7f3a:	2001      	movs	r0, #1
    7f3c:	f007 fc4a 	bl	f7d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7f40:	f64a 2113 	movw	r1, #43539	; 0xaa13
    7f44:	4408      	add	r0, r1
    7f46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7f4a:	fbb0 f0f1 	udiv	r0, r0, r1
    7f4e:	1a29      	subs	r1, r5, r0
    7f50:	4630      	mov	r0, r6
    7f52:	f7f9 fb01 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7f56:	69a1      	ldr	r1, [r4, #24]
    7f58:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    7f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f60:	20000fb0 	.word	0x20000fb0
    7f64:	200000fc 	.word	0x200000fc
    7f68:	b510      	push	{r4, lr}
    7f6a:	4c06      	ldr	r4, [pc, #24]	; (7f84 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x434>)
    7f6c:	7b20      	ldrb	r0, [r4, #12]
    7f6e:	2800      	cmp	r0, #0
    7f70:	d006      	beq.n	7f80 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x430>
    7f72:	f003 fc33 	bl	b7dc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    7f76:	f7fa fa01 	bl	237c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    7f7a:	2000      	movs	r0, #0
    7f7c:	7320      	strb	r0, [r4, #12]
    7f7e:	7360      	strb	r0, [r4, #13]
    7f80:	bd10      	pop	{r4, pc}
    7f82:	0000      	.short	0x0000
    7f84:	20000fb0 	.word	0x20000fb0
    7f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f8c:	4d11      	ldr	r5, [pc, #68]	; (7fd4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x484>)
    7f8e:	4616      	mov	r6, r2
    7f90:	460f      	mov	r7, r1
    7f92:	2400      	movs	r4, #0
    7f94:	6068      	str	r0, [r5, #4]
    7f96:	f006 fb75 	bl	e684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    7f9a:	f8df c03c 	ldr.w	ip, [pc, #60]	; 7fd8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x488>
    7f9e:	2100      	movs	r1, #0
    7fa0:	f81c 2001 	ldrb.w	r2, [ip, r1]
    7fa4:	4232      	tst	r2, r6
    7fa6:	d007      	beq.n	7fb8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x468>
    7fa8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    7fac:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    7fb0:	1a1b      	subs	r3, r3, r0
    7fb2:	1c64      	adds	r4, r4, #1
    7fb4:	b2e4      	uxtb	r4, r4
    7fb6:	6093      	str	r3, [r2, #8]
    7fb8:	1c49      	adds	r1, r1, #1
    7fba:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    7fbe:	d0ef      	beq.n	7fa0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x450>
    7fc0:	f016 0f0e 	tst.w	r6, #14
    7fc4:	d004      	beq.n	7fd0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x480>
    7fc6:	f640 11b8 	movw	r1, #2488	; 0x9b8
    7fca:	2035      	movs	r0, #53	; 0x35
    7fcc:	f7fb fe92 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7fd4:	20000fb0 	.word	0x20000fb0
    7fd8:	0000f937 	.word	0x0000f937
    7fdc:	b570      	push	{r4, r5, r6, lr}
    7fde:	460d      	mov	r5, r1
    7fe0:	0004      	movs	r4, r0
    7fe2:	d00c      	beq.n	7ffe <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x4ae>
    7fe4:	2001      	movs	r0, #1
    7fe6:	f006 fab8 	bl	e55a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7fea:	b2c6      	uxtb	r6, r0
    7fec:	200b      	movs	r0, #11
    7fee:	f006 fab4 	bl	e55a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7ff2:	b2c0      	uxtb	r0, r0
    7ff4:	4286      	cmp	r6, r0
    7ff6:	d005      	beq.n	8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
    7ff8:	f44f 711a 	mov.w	r1, #616	; 0x268
    7ffc:	e061      	b.n	80c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc2>
    7ffe:	f240 2165 	movw	r1, #613	; 0x265
    8002:	e05e      	b.n	80c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc2>
    8004:	2d09      	cmp	r5, #9
    8006:	d25f      	bcs.n	80c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8>
    8008:	e8df f005 	tbb	[pc, r5]
    800c:	3d3d3505 	.word	0x3d3d3505
    8010:	4b445e39 	.word	0x4b445e39
    8014:	0059      	.short	0x0059
    8016:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    801a:	b348      	cbz	r0, 8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
    801c:	4620      	mov	r0, r4
    801e:	f000 fd69 	bl	8af4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    8022:	f006 fb2f 	bl	e684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    8026:	f200 1037 	addw	r0, r0, #311	; 0x137
    802a:	b285      	uxth	r5, r0
    802c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8030:	2128      	movs	r1, #40	; 0x28
    8032:	f006 fac3 	bl	e5bc <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x44>
    8036:	182e      	adds	r6, r5, r0
    8038:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    803a:	68e0      	ldr	r0, [r4, #12]
    803c:	4288      	cmp	r0, r1
    803e:	d200      	bcs.n	8042 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42>
    8040:	4601      	mov	r1, r0
    8042:	4632      	mov	r2, r6
    8044:	4620      	mov	r0, r4
    8046:	f006 f857 	bl	e0f8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    804a:	4d21      	ldr	r5, [pc, #132]	; (80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>)
    804c:	4632      	mov	r2, r6
    804e:	6068      	str	r0, [r5, #4]
    8050:	4620      	mov	r0, r4
    8052:	68e1      	ldr	r1, [r4, #12]
    8054:	f006 f850 	bl	e0f8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8058:	60a8      	str	r0, [r5, #8]
    805a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    805e:	f006 f8ac 	bl	e1ba <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8062:	f5a0 7093 	sub.w	r0, r0, #294	; 0x126
    8066:	60e8      	str	r0, [r5, #12]
    8068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    806c:	f7fa ba68 	b.w	2540 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8070:	f240 216e 	movw	r1, #622	; 0x26e
    8074:	e025      	b.n	80c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc2>
    8076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    807a:	f006 bb95 	b.w	e7a8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    807e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8082:	f003 bd5b 	b.w	bb3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    8086:	4620      	mov	r0, r4
    8088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    808c:	2201      	movs	r2, #1
    808e:	2100      	movs	r1, #0
    8090:	f006 bad8 	b.w	e644 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xcc>
    8094:	2001      	movs	r0, #1
    8096:	f7f9 f933 	bl	1300 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    809a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    809e:	f005 bba9 	b.w	d7f4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    80a2:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    80a6:	2804      	cmp	r0, #4
    80a8:	d002      	beq.n	80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>
    80aa:	f240 21a2 	movw	r1, #674	; 0x2a2
    80ae:	e008      	b.n	80c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc2>
    80b0:	4620      	mov	r0, r4
    80b2:	f006 faaf 	bl	e614 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x9c>
    80b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    80ba:	f002 ba4f 	b.w	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    80be:	f240 21ad 	movw	r1, #685	; 0x2ad
    80c2:	2035      	movs	r0, #53	; 0x35
    80c4:	f7fb fe16 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80c8:	f240 21b1 	movw	r1, #689	; 0x2b1
    80cc:	e7f9      	b.n	80c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc2>
    80ce:	0000      	.short	0x0000
    80d0:	20000fa0 	.word	0x20000fa0
    80d4:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    80d8:	4605      	mov	r5, r0
    80da:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    80de:	2600      	movs	r6, #0
    80e0:	f8d1 b020 	ldr.w	fp, [r1, #32]
    80e4:	469a      	mov	sl, r3
    80e6:	460c      	mov	r4, r1
    80e8:	280d      	cmp	r0, #13
    80ea:	d020      	beq.n	812e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12e>
    80ec:	280c      	cmp	r0, #12
    80ee:	d01e      	beq.n	812e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12e>
    80f0:	2824      	cmp	r0, #36	; 0x24
    80f2:	d01c      	beq.n	812e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12e>
    80f4:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    80f8:	2824      	cmp	r0, #36	; 0x24
    80fa:	d018      	beq.n	812e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12e>
    80fc:	2000      	movs	r0, #0
    80fe:	4680      	mov	r8, r0
    8100:	f006 fab5 	bl	e66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    8104:	4681      	mov	r9, r0
    8106:	f1ba 0f00 	cmp.w	sl, #0
    810a:	d003      	beq.n	8114 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x114>
    810c:	2101      	movs	r1, #1
    810e:	4620      	mov	r0, r4
    8110:	f006 faf1 	bl	e6f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    8114:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    8118:	2701      	movs	r7, #1
    811a:	b150      	cbz	r0, 8132 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x132>
    811c:	2801      	cmp	r0, #1
    811e:	d01b      	beq.n	8158 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x158>
    8120:	2802      	cmp	r0, #2
    8122:	d011      	beq.n	8148 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x148>
    8124:	2803      	cmp	r0, #3
    8126:	d017      	beq.n	8158 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x158>
    8128:	f640 113b 	movw	r1, #2363	; 0x93b
    812c:	e07b      	b.n	8226 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x226>
    812e:	2001      	movs	r0, #1
    8130:	e7e5      	b.n	80fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfe>
    8132:	9802      	ldr	r0, [sp, #8]
    8134:	b128      	cbz	r0, 8142 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x142>
    8136:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
    813a:	4620      	mov	r0, r4
    813c:	f006 fa40 	bl	e5c0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    8140:	e00b      	b.n	815a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15a>
    8142:	f640 1101 	movw	r1, #2305	; 0x901
    8146:	e06e      	b.n	8226 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x226>
    8148:	4838      	ldr	r0, [pc, #224]	; (822c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22c>)
    814a:	6801      	ldr	r1, [r0, #0]
    814c:	2003      	movs	r0, #3
    814e:	eb01 060b 	add.w	r6, r1, fp
    8152:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    8156:	e000      	b.n	815a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15a>
    8158:	68e6      	ldr	r6, [r4, #12]
    815a:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    815e:	4631      	mov	r1, r6
    8160:	f7f9 f9fa 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8164:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    8168:	60e8      	str	r0, [r5, #12]
    816a:	2000      	movs	r0, #0
    816c:	7028      	strb	r0, [r5, #0]
    816e:	f8a5 9008 	strh.w	r9, [r5, #8]
    8172:	4620      	mov	r0, r4
    8174:	f000 fc0c 	bl	8990 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    8178:	f1a8 0101 	sub.w	r1, r8, #1
    817c:	4208      	tst	r0, r1
    817e:	d101      	bne.n	8184 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x184>
    8180:	72af      	strb	r7, [r5, #10]
    8182:	e005      	b.n	8190 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x190>
    8184:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    8188:	2801      	cmp	r0, #1
    818a:	d017      	beq.n	81bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bc>
    818c:	2003      	movs	r0, #3
    818e:	72a8      	strb	r0, [r5, #10]
    8190:	46b9      	mov	r9, r7
    8192:	72ef      	strb	r7, [r5, #11]
    8194:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8198:	f006 f80f 	bl	e1ba <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    819c:	6068      	str	r0, [r5, #4]
    819e:	f1ba 0f00 	cmp.w	sl, #0
    81a2:	d03c      	beq.n	821e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x21e>
    81a4:	4631      	mov	r1, r6
    81a6:	4628      	mov	r0, r5
    81a8:	f005 fcf9 	bl	db9e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    81ac:	b287      	uxth	r7, r0
    81ae:	4620      	mov	r0, r4
    81b0:	f000 fbee 	bl	8990 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    81b4:	f1b8 0f00 	cmp.w	r8, #0
    81b8:	d002      	beq.n	81c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c0>
    81ba:	e014      	b.n	81e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e6>
    81bc:	2002      	movs	r0, #2
    81be:	e7e6      	b.n	818e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18e>
    81c0:	42b8      	cmp	r0, r7
    81c2:	d810      	bhi.n	81e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e6>
    81c4:	4607      	mov	r7, r0
    81c6:	f885 900a 	strb.w	r9, [r5, #10]
    81ca:	fb06 f107 	mul.w	r1, r6, r7
    81ce:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    81d2:	f7f9 f9c1 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    81d6:	60e8      	str	r0, [r5, #12]
    81d8:	b31e      	cbz	r6, 8222 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x222>
    81da:	4631      	mov	r1, r6
    81dc:	4628      	mov	r0, r5
    81de:	f005 fcde 	bl	db9e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    81e2:	4438      	add	r0, r7
    81e4:	b287      	uxth	r7, r0
    81e6:	4639      	mov	r1, r7
    81e8:	4620      	mov	r0, r4
    81ea:	f006 fa84 	bl	e6f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    81ee:	68e8      	ldr	r0, [r5, #12]
    81f0:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    81f4:	6f20      	ldr	r0, [r4, #112]	; 0x70
    81f6:	2800      	cmp	r0, #0
    81f8:	d011      	beq.n	821e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x21e>
    81fa:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    81fe:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
    8202:	1a40      	subs	r0, r0, r1
    8204:	b202      	sxth	r2, r0
    8206:	2a00      	cmp	r2, #0
    8208:	dd09      	ble.n	821e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x21e>
    820a:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    820e:	4402      	add	r2, r0
    8210:	1e52      	subs	r2, r2, #1
    8212:	fb92 f2f0 	sdiv	r2, r2, r0
    8216:	b292      	uxth	r2, r2
    8218:	fb02 1000 	mla	r0, r2, r0, r1
    821c:	86e0      	strh	r0, [r4, #54]	; 0x36
    821e:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    8222:	f640 1176 	movw	r1, #2422	; 0x976
    8226:	2035      	movs	r0, #53	; 0x35
    8228:	f7fb fd64 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    822c:	200000fc 	.word	0x200000fc
    8230:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8234:	460d      	mov	r5, r1
    8236:	4607      	mov	r7, r0
    8238:	f000 fa58 	bl	86ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ec>
    823c:	4c1d      	ldr	r4, [pc, #116]	; (82b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b4>)
    823e:	6861      	ldr	r1, [r4, #4]
    8240:	f7f9 f98a 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8244:	4606      	mov	r6, r0
    8246:	4601      	mov	r1, r0
    8248:	4638      	mov	r0, r7
    824a:	f7f9 f9b7 	bl	15bc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    824e:	4607      	mov	r7, r0
    8250:	f006 fa1e 	bl	e690 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x118>
    8254:	4287      	cmp	r7, r0
    8256:	da10      	bge.n	827a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x27a>
    8258:	6960      	ldr	r0, [r4, #20]
    825a:	f000 fa47 	bl	86ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ec>
    825e:	4631      	mov	r1, r6
    8260:	f7f9 f9ac 	bl	15bc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8264:	6861      	ldr	r1, [r4, #4]
    8266:	fbb0 f0f1 	udiv	r0, r0, r1
    826a:	6028      	str	r0, [r5, #0]
    826c:	6861      	ldr	r1, [r4, #4]
    826e:	b004      	add	sp, #16
    8270:	4630      	mov	r0, r6
    8272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8276:	f7f9 b96f 	b.w	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    827a:	2000      	movs	r0, #0
    827c:	f88d 0000 	strb.w	r0, [sp]
    8280:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8282:	9001      	str	r0, [sp, #4]
    8284:	f006 f9f3 	bl	e66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    8288:	f8ad 0008 	strh.w	r0, [sp, #8]
    828c:	2001      	movs	r0, #1
    828e:	f88d 000b 	strb.w	r0, [sp, #11]
    8292:	6960      	ldr	r0, [r4, #20]
    8294:	f000 fa2a 	bl	86ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ec>
    8298:	9003      	str	r0, [sp, #12]
    829a:	f000 f9c1 	bl	8620 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x620>
    829e:	f88d 000a 	strb.w	r0, [sp, #10]
    82a2:	4668      	mov	r0, sp
    82a4:	6861      	ldr	r1, [r4, #4]
    82a6:	f005 fc7a 	bl	db9e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    82aa:	6028      	str	r0, [r5, #0]
    82ac:	9803      	ldr	r0, [sp, #12]
    82ae:	b004      	add	sp, #16
    82b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    82b4:	20000fb0 	.word	0x20000fb0
    82b8:	b510      	push	{r4, lr}
    82ba:	2400      	movs	r4, #0
    82bc:	f006 f9e2 	bl	e684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    82c0:	4a06      	ldr	r2, [pc, #24]	; (82dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2dc>)
    82c2:	2100      	movs	r1, #0
    82c4:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    82c8:	4404      	add	r4, r0
    82ca:	689b      	ldr	r3, [r3, #8]
    82cc:	1c49      	adds	r1, r1, #1
    82ce:	441c      	add	r4, r3
    82d0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    82d4:	d0f6      	beq.n	82c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c4>
    82d6:	4620      	mov	r0, r4
    82d8:	bd10      	pop	{r4, pc}
    82da:	0000      	.short	0x0000
    82dc:	20000fb0 	.word	0x20000fb0
    82e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    82e2:	4c1b      	ldr	r4, [pc, #108]	; (8350 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x350>)
    82e4:	4606      	mov	r6, r0
    82e6:	460d      	mov	r5, r1
    82e8:	78a0      	ldrb	r0, [r4, #2]
    82ea:	b360      	cbz	r0, 8346 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x346>
    82ec:	4919      	ldr	r1, [pc, #100]	; (8354 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x354>)
    82ee:	6a20      	ldr	r0, [r4, #32]
    82f0:	4288      	cmp	r0, r1
    82f2:	d828      	bhi.n	8346 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x346>
    82f4:	2000      	movs	r0, #0
    82f6:	f88d 0000 	strb.w	r0, [sp]
    82fa:	9501      	str	r5, [sp, #4]
    82fc:	f006 f9b7 	bl	e66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    8300:	f8ad 0008 	strh.w	r0, [sp, #8]
    8304:	2001      	movs	r0, #1
    8306:	f88d 000b 	strb.w	r0, [sp, #11]
    830a:	f006 f9c1 	bl	e690 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x118>
    830e:	4601      	mov	r1, r0
    8310:	4630      	mov	r0, r6
    8312:	f7f9 f921 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8316:	9003      	str	r0, [sp, #12]
    8318:	2003      	movs	r0, #3
    831a:	f88d 000a 	strb.w	r0, [sp, #10]
    831e:	4668      	mov	r0, sp
    8320:	f7f9 fc58 	bl	1bd4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    8324:	4606      	mov	r6, r0
    8326:	4629      	mov	r1, r5
    8328:	9803      	ldr	r0, [sp, #12]
    832a:	f7f9 f915 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    832e:	4605      	mov	r5, r0
    8330:	6a21      	ldr	r1, [r4, #32]
    8332:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8334:	f7f9 f910 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8338:	4601      	mov	r1, r0
    833a:	b13e      	cbz	r6, 834c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34c>
    833c:	4628      	mov	r0, r5
    833e:	f7f9 f93d 	bl	15bc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8342:	2800      	cmp	r0, #0
    8344:	db02      	blt.n	834c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34c>
    8346:	2001      	movs	r0, #1
    8348:	b004      	add	sp, #16
    834a:	bd70      	pop	{r4, r5, r6, pc}
    834c:	2000      	movs	r0, #0
    834e:	e7fb      	b.n	8348 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x348>
    8350:	20000fb0 	.word	0x20000fb0
    8354:	07a12000 	.word	0x07a12000
    8358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    835c:	f003 ff5d 	bl	c21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8360:	4c21      	ldr	r4, [pc, #132]	; (83e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e8>)
    8362:	4607      	mov	r7, r0
    8364:	6920      	ldr	r0, [r4, #16]
    8366:	f000 f95b 	bl	8620 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x620>
    836a:	4606      	mov	r6, r0
    836c:	f7f9 f89a 	bl	14a4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    8370:	4605      	mov	r5, r0
    8372:	2864      	cmp	r0, #100	; 0x64
    8374:	d326      	bcc.n	83c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c4>
    8376:	1c68      	adds	r0, r5, #1
    8378:	d027      	beq.n	83ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ca>
    837a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    837c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    837e:	1948      	adds	r0, r1, r5
    8380:	4282      	cmp	r2, r0
    8382:	d800      	bhi.n	8386 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x386>
    8384:	1a55      	subs	r5, r2, r1
    8386:	f06f 0138 	mvn.w	r1, #56	; 0x38
    838a:	4638      	mov	r0, r7
    838c:	f7f9 f8e4 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8390:	4629      	mov	r1, r5
    8392:	f000 f9bd 	bl	8710 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x710>
    8396:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8398:	4408      	add	r0, r1
    839a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    839c:	1a45      	subs	r5, r0, r1
    839e:	f241 3088 	movw	r0, #5000	; 0x1388
    83a2:	4285      	cmp	r5, r0
    83a4:	d900      	bls.n	83a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a8>
    83a6:	4605      	mov	r5, r0
    83a8:	f003 ff37 	bl	c21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    83ac:	4601      	mov	r1, r0
    83ae:	4638      	mov	r0, r7
    83b0:	f7f9 f904 	bl	15bc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    83b4:	309b      	adds	r0, #155	; 0x9b
    83b6:	4285      	cmp	r5, r0
    83b8:	d304      	bcc.n	83c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c4>
    83ba:	4631      	mov	r1, r6
    83bc:	4628      	mov	r0, r5
    83be:	f7f8 ffaf 	bl	1320 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    83c2:	b120      	cbz	r0, 83ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ce>
    83c4:	2000      	movs	r0, #0
    83c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    83cc:	e7e5      	b.n	839a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x39a>
    83ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
    83d0:	4905      	ldr	r1, [pc, #20]	; (83e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e8>)
    83d2:	4428      	add	r0, r5
    83d4:	3910      	subs	r1, #16
    83d6:	6260      	str	r0, [r4, #36]	; 0x24
    83d8:	68c8      	ldr	r0, [r1, #12]
    83da:	4428      	add	r0, r5
    83dc:	60c8      	str	r0, [r1, #12]
    83de:	f7fa f8af 	bl	2540 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    83e2:	2001      	movs	r0, #1
    83e4:	e7ef      	b.n	83c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c6>
    83e6:	0000      	.short	0x0000
    83e8:	20000fb0 	.word	0x20000fb0
    83ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83f0:	b08c      	sub	sp, #48	; 0x30
    83f2:	4616      	mov	r6, r2
    83f4:	4607      	mov	r7, r0
    83f6:	f003 ff10 	bl	c21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    83fa:	4c87      	ldr	r4, [pc, #540]	; (8618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x618>)
    83fc:	9002      	str	r0, [sp, #8]
    83fe:	2500      	movs	r5, #0
    8400:	f8d4 a008 	ldr.w	sl, [r4, #8]
    8404:	f006 f93e 	bl	e684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    8408:	68a1      	ldr	r1, [r4, #8]
    840a:	4408      	add	r0, r1
    840c:	6861      	ldr	r1, [r4, #4]
    840e:	4288      	cmp	r0, r1
    8410:	d101      	bne.n	8416 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x416>
    8412:	2001      	movs	r0, #1
    8414:	e000      	b.n	8418 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x418>
    8416:	2000      	movs	r0, #0
    8418:	4683      	mov	fp, r0
    841a:	980d      	ldr	r0, [sp, #52]	; 0x34
    841c:	ea06 090b 	and.w	r9, r6, fp
    8420:	2800      	cmp	r0, #0
    8422:	d065      	beq.n	84f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f0>
    8424:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    8428:	9802      	ldr	r0, [sp, #8]
    842a:	f7f9 f895 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    842e:	9000      	str	r0, [sp, #0]
    8430:	f002 f872 	bl	a518 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    8434:	4680      	mov	r8, r0
    8436:	4878      	ldr	r0, [pc, #480]	; (8618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x618>)
    8438:	7800      	ldrb	r0, [r0, #0]
    843a:	4e77      	ldr	r6, [pc, #476]	; (8618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x618>)
    843c:	362c      	adds	r6, #44	; 0x2c
    843e:	2805      	cmp	r0, #5
    8440:	d12e      	bne.n	84a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a0>
    8442:	4875      	ldr	r0, [pc, #468]	; (8618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x618>)
    8444:	6980      	ldr	r0, [r0, #24]
    8446:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    844a:	f002 f845 	bl	a4d8 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    844e:	4604      	mov	r4, r0
    8450:	4540      	cmp	r0, r8
    8452:	d009      	beq.n	8468 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x468>
    8454:	4870      	ldr	r0, [pc, #448]	; (8618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x618>)
    8456:	4621      	mov	r1, r4
    8458:	6980      	ldr	r0, [r0, #24]
    845a:	f500 7084 	add.w	r0, r0, #264	; 0x108
    845e:	f001 ffff 	bl	a460 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    8462:	2000      	movs	r0, #0
    8464:	6170      	str	r0, [r6, #20]
    8466:	e00c      	b.n	8482 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x482>
    8468:	496b      	ldr	r1, [pc, #428]	; (8618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x618>)
    846a:	6988      	ldr	r0, [r1, #24]
    846c:	f500 7084 	add.w	r0, r0, #264	; 0x108
    8470:	6170      	str	r0, [r6, #20]
    8472:	698a      	ldr	r2, [r1, #24]
    8474:	6b08      	ldr	r0, [r1, #48]	; 0x30
    8476:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
    847a:	4290      	cmp	r0, r2
    847c:	d200      	bcs.n	8480 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x480>
    847e:	4610      	mov	r0, r2
    8480:	6308      	str	r0, [r1, #48]	; 0x30
    8482:	4865      	ldr	r0, [pc, #404]	; (8618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x618>)
    8484:	6980      	ldr	r0, [r0, #24]
    8486:	b130      	cbz	r0, 8496 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x496>
    8488:	b144      	cbz	r4, 849c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x49c>
    848a:	e9d4 1200 	ldrd	r1, r2, [r4]
    848e:	4411      	add	r1, r2
    8490:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    8494:	e004      	b.n	84a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a0>
    8496:	f240 51c7 	movw	r1, #1479	; 0x5c7
    849a:	e017      	b.n	84cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4cc>
    849c:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    84a0:	4641      	mov	r1, r8
    84a2:	4630      	mov	r0, r6
    84a4:	f001 ffdc 	bl	a460 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    84a8:	ea5f 0008 	movs.w	r0, r8
    84ac:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x618>
    84b0:	9a00      	ldr	r2, [sp, #0]
    84b2:	f8d8 4004 	ldr.w	r4, [r8, #4]
    84b6:	d00c      	beq.n	84d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d2>
    84b8:	e9d0 1000 	ldrd	r1, r0, [r0]
    84bc:	4408      	add	r0, r1
    84be:	4621      	mov	r1, r4
    84c0:	f006 fa1a 	bl	e8f8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    84c4:	42a0      	cmp	r0, r4
    84c6:	d904      	bls.n	84d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d2>
    84c8:	f240 51e5 	movw	r1, #1509	; 0x5e5
    84cc:	2035      	movs	r0, #53	; 0x35
    84ce:	f7fb fc11 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84d2:	4601      	mov	r1, r0
    84d4:	9800      	ldr	r0, [sp, #0]
    84d6:	f7f9 f83f 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    84da:	4606      	mov	r6, r0
    84dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
    84e0:	4644      	mov	r4, r8
    84e2:	4241      	negs	r1, r0
    84e4:	4630      	mov	r0, r6
    84e6:	f7f9 f837 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    84ea:	62e0      	str	r0, [r4, #44]	; 0x2c
    84ec:	2001      	movs	r0, #1
    84ee:	e042      	b.n	8576 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x576>
    84f0:	f1b9 0f00 	cmp.w	r9, #0
    84f4:	d018      	beq.n	8528 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x528>
    84f6:	2001      	movs	r0, #1
    84f8:	f006 f846 	bl	e588 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    84fc:	4604      	mov	r4, r0
    84fe:	2001      	movs	r0, #1
    8500:	f007 f968 	bl	f7d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8504:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8508:	4401      	add	r1, r0
    850a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    850e:	fbb1 f0f0 	udiv	r0, r1, r0
    8512:	1821      	adds	r1, r4, r0
    8514:	31f0      	adds	r1, #240	; 0xf0
    8516:	9802      	ldr	r0, [sp, #8]
    8518:	f7ff fee2 	bl	82e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e0>
    851c:	b908      	cbnz	r0, 8522 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x522>
    851e:	f04f 0a00 	mov.w	sl, #0
    8522:	9e02      	ldr	r6, [sp, #8]
    8524:	9508      	str	r5, [sp, #32]
    8526:	e027      	b.n	8578 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x578>
    8528:	b12e      	cbz	r6, 8536 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x536>
    852a:	a908      	add	r1, sp, #32
    852c:	9802      	ldr	r0, [sp, #8]
    852e:	f7ff fe7f 	bl	8230 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x230>
    8532:	4606      	mov	r6, r0
    8534:	e020      	b.n	8578 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x578>
    8536:	9802      	ldr	r0, [sp, #8]
    8538:	f000 f8d8 	bl	86ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ec>
    853c:	4c36      	ldr	r4, [pc, #216]	; (8618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x618>)
    853e:	e9d4 1a01 	ldrd	r1, sl, [r4, #4]
    8542:	f7f9 f809 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8546:	4606      	mov	r6, r0
    8548:	6920      	ldr	r0, [r4, #16]
    854a:	f000 f8c3 	bl	86d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6d4>
    854e:	6861      	ldr	r1, [r4, #4]
    8550:	4348      	muls	r0, r1
    8552:	78a1      	ldrb	r1, [r4, #2]
    8554:	b131      	cbz	r1, 8564 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x564>
    8556:	6a21      	ldr	r1, [r4, #32]
    8558:	4281      	cmp	r1, r0
    855a:	d302      	bcc.n	8562 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x562>
    855c:	1a09      	subs	r1, r1, r0
    855e:	6221      	str	r1, [r4, #32]
    8560:	e000      	b.n	8564 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x564>
    8562:	6225      	str	r5, [r4, #32]
    8564:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    8566:	4601      	mov	r1, r0
    8568:	4610      	mov	r0, r2
    856a:	f7f8 fff5 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    856e:	62e0      	str	r0, [r4, #44]	; 0x2c
    8570:	4630      	mov	r0, r6
    8572:	f000 f8af 	bl	86d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6d4>
    8576:	9008      	str	r0, [sp, #32]
    8578:	2001      	movs	r0, #1
    857a:	f006 f805 	bl	e588 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    857e:	4604      	mov	r4, r0
    8580:	2001      	movs	r0, #1
    8582:	f007 f927 	bl	f7d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8586:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    858a:	4401      	add	r1, r0
    858c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8590:	fbb1 f0f0 	udiv	r0, r1, r0
    8594:	4404      	add	r4, r0
    8596:	4651      	mov	r1, sl
    8598:	4630      	mov	r0, r6
    859a:	34f0      	adds	r4, #240	; 0xf0
    859c:	f000 f8b8 	bl	8710 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x710>
    85a0:	491d      	ldr	r1, [pc, #116]	; (8618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x618>)
    85a2:	eb01 0285 	add.w	r2, r1, r5, lsl #2
    85a6:	6892      	ldr	r2, [r2, #8]
    85a8:	4282      	cmp	r2, r0
    85aa:	d800      	bhi.n	85ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ae>
    85ac:	4610      	mov	r0, r2
    85ae:	6288      	str	r0, [r1, #40]	; 0x28
    85b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    85b2:	b102      	cbz	r2, 85b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5b6>
    85b4:	610e      	str	r6, [r1, #16]
    85b6:	4688      	mov	r8, r1
    85b8:	614e      	str	r6, [r1, #20]
    85ba:	f1bb 0f00 	cmp.w	fp, #0
    85be:	d002      	beq.n	85c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c6>
    85c0:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    85c4:	e001      	b.n	85ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ca>
    85c6:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    85ca:	f04f 0a01 	mov.w	sl, #1
    85ce:	f887 a00b 	strb.w	sl, [r7, #11]
    85d2:	f006 f84c 	bl	e66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    85d6:	8138      	strh	r0, [r7, #8]
    85d8:	4630      	mov	r0, r6
    85da:	f000 f821 	bl	8620 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x620>
    85de:	72b8      	strb	r0, [r7, #10]
    85e0:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    85e4:	6078      	str	r0, [r7, #4]
    85e6:	f1b9 0f00 	cmp.w	r9, #0
    85ea:	d008      	beq.n	85fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5fe>
    85ec:	f887 a000 	strb.w	sl, [r7]
    85f0:	490a      	ldr	r1, [pc, #40]	; (861c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x61c>)
    85f2:	9802      	ldr	r0, [sp, #8]
    85f4:	f000 f88c 	bl	8710 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x710>
    85f8:	1b00      	subs	r0, r0, r4
    85fa:	60f8      	str	r0, [r7, #12]
    85fc:	e001      	b.n	8602 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x602>
    85fe:	703d      	strb	r5, [r7, #0]
    8600:	60fe      	str	r6, [r7, #12]
    8602:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    8606:	42a0      	cmp	r0, r4
    8608:	d303      	bcc.n	8612 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x612>
    860a:	2001      	movs	r0, #1
    860c:	b00f      	add	sp, #60	; 0x3c
    860e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8612:	2000      	movs	r0, #0
    8614:	e7fa      	b.n	860c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60c>
    8616:	0000      	.short	0x0000
    8618:	20000fb0 	.word	0x20000fb0
    861c:	07a12000 	.word	0x07a12000
    8620:	4a09      	ldr	r2, [pc, #36]	; (8648 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x648>)
    8622:	b510      	push	{r4, lr}
    8624:	7811      	ldrb	r1, [r2, #0]
    8626:	2904      	cmp	r1, #4
    8628:	d10c      	bne.n	8644 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x644>
    862a:	6851      	ldr	r1, [r2, #4]
    862c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    862e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    8632:	004c      	lsls	r4, r1, #1
    8634:	4601      	mov	r1, r0
    8636:	4610      	mov	r0, r2
    8638:	f7f8 ffc0 	bl	15bc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    863c:	42a0      	cmp	r0, r4
    863e:	d201      	bcs.n	8644 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x644>
    8640:	2003      	movs	r0, #3
    8642:	bd10      	pop	{r4, pc}
    8644:	2002      	movs	r0, #2
    8646:	bd10      	pop	{r4, pc}
    8648:	20000fb0 	.word	0x20000fb0
    864c:	b570      	push	{r4, r5, r6, lr}
    864e:	4d13      	ldr	r5, [pc, #76]	; (869c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x69c>)
    8650:	7f28      	ldrb	r0, [r5, #28]
    8652:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    8656:	2800      	cmp	r0, #0
    8658:	7828      	ldrb	r0, [r5, #0]
    865a:	d00f      	beq.n	867c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x67c>
    865c:	2805      	cmp	r0, #5
    865e:	d004      	beq.n	866a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66a>
    8660:	f44f 7166 	mov.w	r1, #920	; 0x398
    8664:	2035      	movs	r0, #53	; 0x35
    8666:	f7fb fb45 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    866a:	4620      	mov	r0, r4
    866c:	f005 ff87 	bl	e57e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6>
    8670:	b178      	cbz	r0, 8692 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x692>
    8672:	4620      	mov	r0, r4
    8674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8678:	f001 bed0 	b.w	a41c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    867c:	2805      	cmp	r0, #5
    867e:	d108      	bne.n	8692 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x692>
    8680:	4620      	mov	r0, r4
    8682:	f005 ff7c 	bl	e57e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6>
    8686:	b920      	cbnz	r0, 8692 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x692>
    8688:	69a8      	ldr	r0, [r5, #24]
    868a:	f500 7084 	add.w	r0, r0, #264	; 0x108
    868e:	f001 ff07 	bl	a4a0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    8692:	4620      	mov	r0, r4
    8694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8698:	f001 bf02 	b.w	a4a0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    869c:	20000fb0 	.word	0x20000fb0
    86a0:	b510      	push	{r4, lr}
    86a2:	f7fd ff4b 	bl	653c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    86a6:	490a      	ldr	r1, [pc, #40]	; (86d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6d0>)
    86a8:	2000      	movs	r0, #0
    86aa:	70c8      	strb	r0, [r1, #3]
    86ac:	7708      	strb	r0, [r1, #28]
    86ae:	6188      	str	r0, [r1, #24]
    86b0:	7008      	strb	r0, [r1, #0]
    86b2:	f7fd fe95 	bl	63e0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    86b6:	4604      	mov	r4, r0
    86b8:	7800      	ldrb	r0, [r0, #0]
    86ba:	f7f9 fd09 	bl	20d0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    86be:	b110      	cbz	r0, 86c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c6>
    86c0:	2020      	movs	r0, #32
    86c2:	7020      	strb	r0, [r4, #0]
    86c4:	bd10      	pop	{r4, pc}
    86c6:	f240 5131 	movw	r1, #1329	; 0x531
    86ca:	2035      	movs	r0, #53	; 0x35
    86cc:	f7fb fb12 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86d0:	20000fb0 	.word	0x20000fb0
    86d4:	b510      	push	{r4, lr}
    86d6:	4c04      	ldr	r4, [pc, #16]	; (86e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6e8>)
    86d8:	4601      	mov	r1, r0
    86da:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    86dc:	f7f8 ff6e 	bl	15bc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    86e0:	6861      	ldr	r1, [r4, #4]
    86e2:	fbb0 f0f1 	udiv	r0, r0, r1
    86e6:	bd10      	pop	{r4, pc}
    86e8:	20000fb0 	.word	0x20000fb0
    86ec:	b510      	push	{r4, lr}
    86ee:	4c07      	ldr	r4, [pc, #28]	; (870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>)
    86f0:	4601      	mov	r1, r0
    86f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    86f4:	f7f8 ff62 	bl	15bc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    86f8:	6861      	ldr	r1, [r4, #4]
    86fa:	fbb0 f2f1 	udiv	r2, r0, r1
    86fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8704:	4351      	muls	r1, r2
    8706:	f7f8 bf27 	b.w	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    870a:	0000      	.short	0x0000
    870c:	20000fb0 	.word	0x20000fb0
    8710:	b570      	push	{r4, r5, r6, lr}
    8712:	4605      	mov	r5, r0
    8714:	480d      	ldr	r0, [pc, #52]	; (874c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74c>)
    8716:	460c      	mov	r4, r1
    8718:	7881      	ldrb	r1, [r0, #2]
    871a:	b1a9      	cbz	r1, 8748 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x748>
    871c:	4a0c      	ldr	r2, [pc, #48]	; (8750 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x750>)
    871e:	6a01      	ldr	r1, [r0, #32]
    8720:	4291      	cmp	r1, r2
    8722:	d211      	bcs.n	8748 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x748>
    8724:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    8726:	f7f8 ff17 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    872a:	4606      	mov	r6, r0
    872c:	4621      	mov	r1, r4
    872e:	4628      	mov	r0, r5
    8730:	f7f8 ff12 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8734:	4601      	mov	r1, r0
    8736:	4630      	mov	r0, r6
    8738:	f7f8 ff40 	bl	15bc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    873c:	2800      	cmp	r0, #0
    873e:	dd03      	ble.n	8748 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x748>
    8740:	1a20      	subs	r0, r4, r0
    8742:	d500      	bpl.n	8746 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x746>
    8744:	2000      	movs	r0, #0
    8746:	bd70      	pop	{r4, r5, r6, pc}
    8748:	4620      	mov	r0, r4
    874a:	bd70      	pop	{r4, r5, r6, pc}
    874c:	20000fb0 	.word	0x20000fb0
    8750:	07a12000 	.word	0x07a12000

00008754 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    8754:	4806      	ldr	r0, [pc, #24]	; (8770 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    8756:	4905      	ldr	r1, [pc, #20]	; (876c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    8758:	6501      	str	r1, [r0, #80]	; 0x50
    875a:	4906      	ldr	r1, [pc, #24]	; (8774 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    875c:	6541      	str	r1, [r0, #84]	; 0x54
    875e:	4807      	ldr	r0, [pc, #28]	; (877c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    8760:	4905      	ldr	r1, [pc, #20]	; (8778 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    8762:	6501      	str	r1, [r0, #80]	; 0x50
    8764:	4906      	ldr	r1, [pc, #24]	; (8780 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    8766:	6541      	str	r1, [r0, #84]	; 0x54
    8768:	4770      	bx	lr
    876a:	0000      	.short	0x0000
    876c:	000098b1 	.word	0x000098b1
    8770:	20000114 	.word	0x20000114
    8774:	0000997d 	.word	0x0000997d
    8778:	00009fad 	.word	0x00009fad
    877c:	20000178 	.word	0x20000178
    8780:	00009fdd 	.word	0x00009fdd

00008784 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI>:
    8784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8786:	460d      	mov	r5, r1
    8788:	4607      	mov	r7, r0
    878a:	2100      	movs	r1, #0
    878c:	f004 ff57 	bl	d63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8790:	1e04      	subs	r4, r0, #0
    8792:	d051      	beq.n	8838 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    8794:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
    8798:	2800      	cmp	r0, #0
    879a:	d04d      	beq.n	8838 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    879c:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    87a0:	f88d 0000 	strb.w	r0, [sp]
    87a4:	9800      	ldr	r0, [sp, #0]
    87a6:	9000      	str	r0, [sp, #0]
    87a8:	f89d 0000 	ldrb.w	r0, [sp]
    87ac:	2600      	movs	r6, #0
    87ae:	b158      	cbz	r0, 87c8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x44>
    87b0:	706e      	strb	r6, [r5, #1]
    87b2:	2009      	movs	r0, #9
    87b4:	7028      	strb	r0, [r5, #0]
    87b6:	220a      	movs	r2, #10
    87b8:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    87bc:	1d28      	adds	r0, r5, #4
    87be:	f003 fea1 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    87c2:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    87c6:	e0e1      	b.n	898c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    87c8:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    87cc:	280e      	cmp	r0, #14
    87ce:	d01d      	beq.n	880c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x88>
    87d0:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    87d4:	280d      	cmp	r0, #13
    87d6:	d027      	beq.n	8828 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xa4>
    87d8:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    87dc:	f88d 0000 	strb.w	r0, [sp]
    87e0:	9800      	ldr	r0, [sp, #0]
    87e2:	9000      	str	r0, [sp, #0]
    87e4:	f89d 0000 	ldrb.w	r0, [sp]
    87e8:	b3b0      	cbz	r0, 8858 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd4>
    87ea:	706e      	strb	r6, [r5, #1]
    87ec:	2008      	movs	r0, #8
    87ee:	7028      	strb	r0, [r5, #0]
    87f0:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    87f4:	6068      	str	r0, [r5, #4]
    87f6:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    87fa:	60a8      	str	r0, [r5, #8]
    87fc:	f8d4 01c2 	ldr.w	r0, [r4, #450]	; 0x1c2
    8800:	60e8      	str	r0, [r5, #12]
    8802:	f504 74dd 	add.w	r4, r4, #442	; 0x1ba
    8806:	f804 6c02 	strb.w	r6, [r4, #-2]
    880a:	e0bf      	b.n	898c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    880c:	8820      	ldrh	r0, [r4, #0]
    880e:	f7fb fe6f 	bl	44f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8812:	4607      	mov	r7, r0
    8814:	f004 fde3 	bl	d3de <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8818:	b968      	cbnz	r0, 8836 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb2>
    881a:	706e      	strb	r6, [r5, #1]
    881c:	200e      	movs	r0, #14
    881e:	7028      	strb	r0, [r5, #0]
    8820:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    8824:	6068      	str	r0, [r5, #4]
    8826:	e011      	b.n	884c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xc8>
    8828:	8820      	ldrh	r0, [r4, #0]
    882a:	f7fb fe61 	bl	44f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    882e:	4607      	mov	r7, r0
    8830:	f004 fdd5 	bl	d3de <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8834:	b108      	cbz	r0, 883a <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb6>
    8836:	2000      	movs	r0, #0
    8838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    883a:	706e      	strb	r6, [r5, #1]
    883c:	200d      	movs	r0, #13
    883e:	7028      	strb	r0, [r5, #0]
    8840:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    8844:	6068      	str	r0, [r5, #4]
    8846:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    884a:	8128      	strh	r0, [r5, #8]
    884c:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    8850:	4638      	mov	r0, r7
    8852:	f004 fddf 	bl	d414 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    8856:	e099      	b.n	898c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8858:	e7ff      	b.n	885a <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd6>
    885a:	f894 018e 	ldrb.w	r0, [r4, #398]	; 0x18e
    885e:	f88d 0000 	strb.w	r0, [sp]
    8862:	9800      	ldr	r0, [sp, #0]
    8864:	9000      	str	r0, [sp, #0]
    8866:	f89d 0000 	ldrb.w	r0, [sp]
    886a:	b130      	cbz	r0, 887a <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xf6>
    886c:	706e      	strb	r6, [r5, #1]
    886e:	2010      	movs	r0, #16
    8870:	7028      	strb	r0, [r5, #0]
    8872:	80af      	strh	r7, [r5, #4]
    8874:	f884 618e 	strb.w	r6, [r4, #398]	; 0x18e
    8878:	e088      	b.n	898c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    887a:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    887e:	f88d 0000 	strb.w	r0, [sp]
    8882:	9800      	ldr	r0, [sp, #0]
    8884:	9000      	str	r0, [sp, #0]
    8886:	f89d 0000 	ldrb.w	r0, [sp]
    888a:	b1c8      	cbz	r0, 88c0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x13c>
    888c:	706e      	strb	r6, [r5, #1]
    888e:	2015      	movs	r0, #21
    8890:	7028      	strb	r0, [r5, #0]
    8892:	e00a      	b.n	88aa <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x126>
    8894:	f884 6190 	strb.w	r6, [r4, #400]	; 0x190
    8898:	f8d4 0192 	ldr.w	r0, [r4, #402]	; 0x192
    889c:	6068      	str	r0, [r5, #4]
    889e:	f8d4 0196 	ldr.w	r0, [r4, #406]	; 0x196
    88a2:	60a8      	str	r0, [r5, #8]
    88a4:	f8d4 019a 	ldr.w	r0, [r4, #410]	; 0x19a
    88a8:	60e8      	str	r0, [r5, #12]
    88aa:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    88ae:	f88d 0000 	strb.w	r0, [sp]
    88b2:	9800      	ldr	r0, [sp, #0]
    88b4:	9000      	str	r0, [sp, #0]
    88b6:	f89d 0000 	ldrb.w	r0, [sp]
    88ba:	2800      	cmp	r0, #0
    88bc:	d1ea      	bne.n	8894 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x110>
    88be:	e065      	b.n	898c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    88c0:	f894 019e 	ldrb.w	r0, [r4, #414]	; 0x19e
    88c4:	f88d 0000 	strb.w	r0, [sp]
    88c8:	9800      	ldr	r0, [sp, #0]
    88ca:	9000      	str	r0, [sp, #0]
    88cc:	f89d 0000 	ldrb.w	r0, [sp]
    88d0:	b158      	cbz	r0, 88ea <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x166>
    88d2:	706e      	strb	r6, [r5, #1]
    88d4:	201c      	movs	r0, #28
    88d6:	7028      	strb	r0, [r5, #0]
    88d8:	220a      	movs	r2, #10
    88da:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
    88de:	1d28      	adds	r0, r5, #4
    88e0:	f003 fe10 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    88e4:	f884 619e 	strb.w	r6, [r4, #414]	; 0x19e
    88e8:	e050      	b.n	898c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    88ea:	f894 01aa 	ldrb.w	r0, [r4, #426]	; 0x1aa
    88ee:	f88d 0000 	strb.w	r0, [sp]
    88f2:	9800      	ldr	r0, [sp, #0]
    88f4:	9000      	str	r0, [sp, #0]
    88f6:	f89d 0000 	ldrb.w	r0, [sp]
    88fa:	b140      	cbz	r0, 890e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x18a>
    88fc:	706e      	strb	r6, [r5, #1]
    88fe:	201d      	movs	r0, #29
    8900:	7028      	strb	r0, [r5, #0]
    8902:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    8906:	6068      	str	r0, [r5, #4]
    8908:	f884 61aa 	strb.w	r6, [r4, #426]	; 0x1aa
    890c:	e03e      	b.n	898c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    890e:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    8912:	f88d 0000 	strb.w	r0, [sp]
    8916:	9800      	ldr	r0, [sp, #0]
    8918:	9000      	str	r0, [sp, #0]
    891a:	f89d 0000 	ldrb.w	r0, [sp]
    891e:	b198      	cbz	r0, 8948 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1c4>
    8920:	706e      	strb	r6, [r5, #1]
    8922:	201a      	movs	r0, #26
    8924:	7028      	strb	r0, [r5, #0]
    8926:	e004      	b.n	8932 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1ae>
    8928:	f884 6188 	strb.w	r6, [r4, #392]	; 0x188
    892c:	f8d4 018a 	ldr.w	r0, [r4, #394]	; 0x18a
    8930:	6068      	str	r0, [r5, #4]
    8932:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    8936:	f88d 0000 	strb.w	r0, [sp]
    893a:	9800      	ldr	r0, [sp, #0]
    893c:	9000      	str	r0, [sp, #0]
    893e:	f89d 0000 	ldrb.w	r0, [sp]
    8942:	2800      	cmp	r0, #0
    8944:	d1f0      	bne.n	8928 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1a4>
    8946:	e021      	b.n	898c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8948:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    894c:	f88d 0000 	strb.w	r0, [sp]
    8950:	9800      	ldr	r0, [sp, #0]
    8952:	9000      	str	r0, [sp, #0]
    8954:	f89d 0000 	ldrb.w	r0, [sp]
    8958:	2800      	cmp	r0, #0
    895a:	f43f af6d 	beq.w	8838 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    895e:	706e      	strb	r6, [r5, #1]
    8960:	2016      	movs	r0, #22
    8962:	7028      	strb	r0, [r5, #0]
    8964:	e008      	b.n	8978 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1f4>
    8966:	bf00      	nop
    8968:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    896c:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    8970:	6068      	str	r0, [r5, #4]
    8972:	f8b4 01b6 	ldrh.w	r0, [r4, #438]	; 0x1b6
    8976:	8128      	strh	r0, [r5, #8]
    8978:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    897c:	f88d 0000 	strb.w	r0, [sp]
    8980:	9800      	ldr	r0, [sp, #0]
    8982:	9000      	str	r0, [sp, #0]
    8984:	f89d 0000 	ldrb.w	r0, [sp]
    8988:	2800      	cmp	r0, #0
    898a:	d1ed      	bne.n	8968 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1e4>
    898c:	2001      	movs	r0, #1
    898e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008990 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    8990:	b570      	push	{r4, r5, r6, lr}
    8992:	4605      	mov	r5, r0
    8994:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    8998:	f895 1089 	ldrb.w	r1, [r5, #137]	; 0x89
    899c:	b1c9      	cbz	r1, 89d2 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    899e:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
    89a2:	1a0c      	subs	r4, r1, r0
    89a4:	f1b4 0404 	subs.w	r4, r4, #4
    89a8:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
    89ac:	b140      	cbz	r0, 89c0 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    89ae:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    89b2:	2300      	movs	r3, #0
    89b4:	2109      	movs	r1, #9
    89b6:	f105 0078 	add.w	r0, r5, #120	; 0x78
    89ba:	f004 ffe7 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    89be:	b160      	cbz	r0, 89da <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    89c0:	4628      	mov	r0, r5
    89c2:	f005 ff8a 	bl	e8da <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    89c6:	b138      	cbz	r0, 89d8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    89c8:	e9d5 1028 	ldrd	r1, r0, [r5, #160]	; 0xa0
    89cc:	1a40      	subs	r0, r0, r1
    89ce:	1f00      	subs	r0, r0, #4
    89d0:	e003      	b.n	89da <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    89d2:	f1c0 0402 	rsb	r4, r0, #2
    89d6:	e7e7      	b.n	89a8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    89d8:	4620      	mov	r0, r4
    89da:	42a0      	cmp	r0, r4
    89dc:	da00      	bge.n	89e0 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    89de:	4604      	mov	r4, r0
    89e0:	2c00      	cmp	r4, #0
    89e2:	dc01      	bgt.n	89e8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    89e4:	2000      	movs	r0, #0
    89e6:	bd70      	pop	{r4, r5, r6, pc}
    89e8:	b2a0      	uxth	r0, r4
    89ea:	bd70      	pop	{r4, r5, r6, pc}

000089ec <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    89ec:	481b      	ldr	r0, [pc, #108]	; (8a5c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x70>)
    89ee:	491a      	ldr	r1, [pc, #104]	; (8a58 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x6c>)
    89f0:	6081      	str	r1, [r0, #8]
    89f2:	491b      	ldr	r1, [pc, #108]	; (8a60 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    89f4:	61c1      	str	r1, [r0, #28]
    89f6:	491b      	ldr	r1, [pc, #108]	; (8a64 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    89f8:	62c1      	str	r1, [r0, #44]	; 0x2c
    89fa:	491b      	ldr	r1, [pc, #108]	; (8a68 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    89fc:	6101      	str	r1, [r0, #16]
    89fe:	491b      	ldr	r1, [pc, #108]	; (8a6c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    8a00:	6141      	str	r1, [r0, #20]
    8a02:	491b      	ldr	r1, [pc, #108]	; (8a70 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    8a04:	6441      	str	r1, [r0, #68]	; 0x44
    8a06:	491b      	ldr	r1, [pc, #108]	; (8a74 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    8a08:	6181      	str	r1, [r0, #24]
    8a0a:	491b      	ldr	r1, [pc, #108]	; (8a78 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    8a0c:	6301      	str	r1, [r0, #48]	; 0x30
    8a0e:	491b      	ldr	r1, [pc, #108]	; (8a7c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    8a10:	6241      	str	r1, [r0, #36]	; 0x24
    8a12:	491b      	ldr	r1, [pc, #108]	; (8a80 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    8a14:	64c1      	str	r1, [r0, #76]	; 0x4c
    8a16:	491b      	ldr	r1, [pc, #108]	; (8a84 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    8a18:	6481      	str	r1, [r0, #72]	; 0x48
    8a1a:	491b      	ldr	r1, [pc, #108]	; (8a88 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    8a1c:	6341      	str	r1, [r0, #52]	; 0x34
    8a1e:	481c      	ldr	r0, [pc, #112]	; (8a90 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    8a20:	491a      	ldr	r1, [pc, #104]	; (8a8c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    8a22:	6081      	str	r1, [r0, #8]
    8a24:	491b      	ldr	r1, [pc, #108]	; (8a94 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    8a26:	61c1      	str	r1, [r0, #28]
    8a28:	491b      	ldr	r1, [pc, #108]	; (8a98 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    8a2a:	6201      	str	r1, [r0, #32]
    8a2c:	491b      	ldr	r1, [pc, #108]	; (8a9c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    8a2e:	6041      	str	r1, [r0, #4]
    8a30:	491b      	ldr	r1, [pc, #108]	; (8aa0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    8a32:	6001      	str	r1, [r0, #0]
    8a34:	491b      	ldr	r1, [pc, #108]	; (8aa4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    8a36:	6281      	str	r1, [r0, #40]	; 0x28
    8a38:	491b      	ldr	r1, [pc, #108]	; (8aa8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    8a3a:	62c1      	str	r1, [r0, #44]	; 0x2c
    8a3c:	491b      	ldr	r1, [pc, #108]	; (8aac <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    8a3e:	60c1      	str	r1, [r0, #12]
    8a40:	491b      	ldr	r1, [pc, #108]	; (8ab0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    8a42:	6181      	str	r1, [r0, #24]
    8a44:	491b      	ldr	r1, [pc, #108]	; (8ab4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    8a46:	6301      	str	r1, [r0, #48]	; 0x30
    8a48:	491b      	ldr	r1, [pc, #108]	; (8ab8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    8a4a:	6481      	str	r1, [r0, #72]	; 0x48
    8a4c:	491b      	ldr	r1, [pc, #108]	; (8abc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    8a4e:	64c1      	str	r1, [r0, #76]	; 0x4c
    8a50:	491b      	ldr	r1, [pc, #108]	; (8ac0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    8a52:	6441      	str	r1, [r0, #68]	; 0x44
    8a54:	4770      	bx	lr
    8a56:	0000      	.short	0x0000
    8a58:	00009d39 	.word	0x00009d39
    8a5c:	20000114 	.word	0x20000114
    8a60:	00009d75 	.word	0x00009d75
    8a64:	00009a4d 	.word	0x00009a4d
    8a68:	0000978d 	.word	0x0000978d
    8a6c:	00009c85 	.word	0x00009c85
    8a70:	00009be9 	.word	0x00009be9
    8a74:	00009cc5 	.word	0x00009cc5
    8a78:	00009e11 	.word	0x00009e11
    8a7c:	000097c5 	.word	0x000097c5
    8a80:	00009a21 	.word	0x00009a21
    8a84:	000099ed 	.word	0x000099ed
    8a88:	00009c75 	.word	0x00009c75
    8a8c:	0000a191 	.word	0x0000a191
    8a90:	20000178 	.word	0x20000178
    8a94:	0000a1c1 	.word	0x0000a1c1
    8a98:	00009f7d 	.word	0x00009f7d
    8a9c:	00009ee1 	.word	0x00009ee1
    8aa0:	00009f11 	.word	0x00009f11
    8aa4:	0000a04d 	.word	0x0000a04d
    8aa8:	0000a081 	.word	0x0000a081
    8aac:	00009f41 	.word	0x00009f41
    8ab0:	0000a16d 	.word	0x0000a16d
    8ab4:	0000a201 	.word	0x0000a201
    8ab8:	0000a00d 	.word	0x0000a00d
    8abc:	0000a03d 	.word	0x0000a03d
    8ac0:	0000a159 	.word	0x0000a159

00008ac4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    8ac4:	4806      	ldr	r0, [pc, #24]	; (8ae0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    8ac6:	4905      	ldr	r1, [pc, #20]	; (8adc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    8ac8:	6581      	str	r1, [r0, #88]	; 0x58
    8aca:	4906      	ldr	r1, [pc, #24]	; (8ae4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    8acc:	65c1      	str	r1, [r0, #92]	; 0x5c
    8ace:	4807      	ldr	r0, [pc, #28]	; (8aec <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    8ad0:	4905      	ldr	r1, [pc, #20]	; (8ae8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    8ad2:	6581      	str	r1, [r0, #88]	; 0x58
    8ad4:	4906      	ldr	r1, [pc, #24]	; (8af0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    8ad6:	6601      	str	r1, [r0, #96]	; 0x60
    8ad8:	4770      	bx	lr
    8ada:	0000      	.short	0x0000
    8adc:	00009a71 	.word	0x00009a71
    8ae0:	20000114 	.word	0x20000114
    8ae4:	00009b81 	.word	0x00009b81
    8ae8:	0000a0ad 	.word	0x0000a0ad
    8aec:	20000178 	.word	0x20000178
    8af0:	0000a0dd 	.word	0x0000a0dd

00008af4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    8af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8af6:	4d36      	ldr	r5, [pc, #216]	; (8bd0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc>)
    8af8:	2600      	movs	r6, #0
    8afa:	4604      	mov	r4, r0
    8afc:	6068      	str	r0, [r5, #4]
    8afe:	806e      	strh	r6, [r5, #2]
    8b00:	706e      	strb	r6, [r5, #1]
    8b02:	702e      	strb	r6, [r5, #0]
    8b04:	8800      	ldrh	r0, [r0, #0]
    8b06:	f7fb ff17 	bl	4938 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8b0a:	6868      	ldr	r0, [r5, #4]
    8b0c:	8800      	ldrh	r0, [r0, #0]
    8b0e:	f7fb febb 	bl	4888 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8b12:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    8b16:	6869      	ldr	r1, [r5, #4]
    8b18:	1c40      	adds	r0, r0, #1
    8b1a:	b282      	uxth	r2, r0
    8b1c:	f101 0078 	add.w	r0, r1, #120	; 0x78
    8b20:	f005 f8ee 	bl	dd00 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8b24:	b120      	cbz	r0, 8b30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c>
    8b26:	f44f 71ac 	mov.w	r1, #344	; 0x158
    8b2a:	2036      	movs	r0, #54	; 0x36
    8b2c:	f7fb f8e2 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b30:	f8a4 6122 	strh.w	r6, [r4, #290]	; 0x122
    8b34:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    8b38:	4630      	mov	r0, r6
    8b3a:	2924      	cmp	r1, #36	; 0x24
    8b3c:	d10a      	bne.n	8b54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8b3e:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8b42:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8b46:	1a51      	subs	r1, r2, r1
    8b48:	b209      	sxth	r1, r1
    8b4a:	2900      	cmp	r1, #0
    8b4c:	db02      	blt.n	8b54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8b4e:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
    8b52:	e00f      	b.n	8b74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x80>
    8b54:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    8b58:	2924      	cmp	r1, #36	; 0x24
    8b5a:	d001      	beq.n	8b60 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6c>
    8b5c:	2925      	cmp	r1, #37	; 0x25
    8b5e:	d10c      	bne.n	8b7a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8b60:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8b64:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8b68:	1a51      	subs	r1, r2, r1
    8b6a:	b209      	sxth	r1, r1
    8b6c:	2900      	cmp	r1, #0
    8b6e:	db04      	blt.n	8b7a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8b70:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    8b74:	f000 fd5a 	bl	962c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb38>
    8b78:	b318      	cbz	r0, 8bc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xce>
    8b7a:	f000 fbfd 	bl	9378 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    8b7e:	2800      	cmp	r0, #0
    8b80:	d125      	bne.n	8bce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8b82:	6868      	ldr	r0, [r5, #4]
    8b84:	3078      	adds	r0, #120	; 0x78
    8b86:	f005 fe1d 	bl	e7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8b8a:	b120      	cbz	r0, 8b96 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2>
    8b8c:	6868      	ldr	r0, [r5, #4]
    8b8e:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    8b92:	f000 faad 	bl	90f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5fc>
    8b96:	480f      	ldr	r0, [pc, #60]	; (8bd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>)
    8b98:	9000      	str	r0, [sp, #0]
    8b9a:	4b0f      	ldr	r3, [pc, #60]	; (8bd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    8b9c:	4a0f      	ldr	r2, [pc, #60]	; (8bdc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    8b9e:	4621      	mov	r1, r4
    8ba0:	4630      	mov	r0, r6
    8ba2:	f7fb ff73 	bl	4a8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8ba6:	6868      	ldr	r0, [r5, #4]
    8ba8:	2300      	movs	r3, #0
    8baa:	2105      	movs	r1, #5
    8bac:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8bb0:	3078      	adds	r0, #120	; 0x78
    8bb2:	f004 feeb 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8bb6:	2800      	cmp	r0, #0
    8bb8:	d009      	beq.n	8bce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8bba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8bbe:	f7fb bf5f 	b.w	4a80 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8bc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8bc6:	2100      	movs	r1, #0
    8bc8:	4608      	mov	r0, r1
    8bca:	f000 bb81 	b.w	92d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    8bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8bd0:	20000104 	.word	0x20000104
    8bd4:	000092d1 	.word	0x000092d1
    8bd8:	00008d01 	.word	0x00008d01
    8bdc:	000095a5 	.word	0x000095a5
    8be0:	4411      	add	r1, r2
    8be2:	78c2      	ldrb	r2, [r0, #3]
    8be4:	480c      	ldr	r0, [pc, #48]	; (8c18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x124>)
    8be6:	1d89      	adds	r1, r1, #6
    8be8:	b289      	uxth	r1, r1
    8bea:	6840      	ldr	r0, [r0, #4]
    8bec:	2a01      	cmp	r2, #1
    8bee:	d006      	beq.n	8bfe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10a>
    8bf0:	b142      	cbz	r2, 8c04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x110>
    8bf2:	2a18      	cmp	r2, #24
    8bf4:	d105      	bne.n	8c02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10e>
    8bf6:	f890 2126 	ldrb.w	r2, [r0, #294]	; 0x126
    8bfa:	b132      	cbz	r2, 8c0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x116>
    8bfc:	e009      	b.n	8c12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8bfe:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    8c02:	4770      	bx	lr
    8c04:	f8a0 1146 	strh.w	r1, [r0, #326]	; 0x146
    8c08:	4770      	bx	lr
    8c0a:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
    8c0e:	b902      	cbnz	r2, 8c12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8c10:	2100      	movs	r1, #0
    8c12:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
    8c16:	4770      	bx	lr
    8c18:	20000104 	.word	0x20000104
    8c1c:	490b      	ldr	r1, [pc, #44]	; (8c4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x158>)
    8c1e:	78c2      	ldrb	r2, [r0, #3]
    8c20:	6849      	ldr	r1, [r1, #4]
    8c22:	2a01      	cmp	r2, #1
    8c24:	d006      	beq.n	8c34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140>
    8c26:	b15a      	cbz	r2, 8c40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14c>
    8c28:	2a18      	cmp	r2, #24
    8c2a:	d108      	bne.n	8c3e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a>
    8c2c:	f8b1 1124 	ldrh.w	r1, [r1, #292]	; 0x124
    8c30:	f005 b94c 	b.w	decc <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    8c34:	f8b1 1130 	ldrh.w	r1, [r1, #304]	; 0x130
    8c38:	7241      	strb	r1, [r0, #9]
    8c3a:	0a09      	lsrs	r1, r1, #8
    8c3c:	7281      	strb	r1, [r0, #10]
    8c3e:	4770      	bx	lr
    8c40:	f8b1 1146 	ldrh.w	r1, [r1, #326]	; 0x146
    8c44:	7341      	strb	r1, [r0, #13]
    8c46:	0a09      	lsrs	r1, r1, #8
    8c48:	7381      	strb	r1, [r0, #14]
    8c4a:	4770      	bx	lr
    8c4c:	20000104 	.word	0x20000104
    8c50:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8c52:	4c2a      	ldr	r4, [pc, #168]	; (8cfc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x208>)
    8c54:	2300      	movs	r3, #0
    8c56:	4619      	mov	r1, r3
    8c58:	6860      	ldr	r0, [r4, #4]
    8c5a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8c5e:	3078      	adds	r0, #120	; 0x78
    8c60:	f004 fe94 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c64:	2800      	cmp	r0, #0
    8c66:	d048      	beq.n	8cfa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8c68:	6860      	ldr	r0, [r4, #4]
    8c6a:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    8c6e:	f88d 1000 	strb.w	r1, [sp]
    8c72:	9900      	ldr	r1, [sp, #0]
    8c74:	9100      	str	r1, [sp, #0]
    8c76:	f89d 1000 	ldrb.w	r1, [sp]
    8c7a:	2900      	cmp	r1, #0
    8c7c:	d03d      	beq.n	8cfa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8c7e:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    8c82:	f004 fedc 	bl	da3e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8c86:	2800      	cmp	r0, #0
    8c88:	d137      	bne.n	8cfa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8c8a:	6860      	ldr	r0, [r4, #4]
    8c8c:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
    8c90:	280a      	cmp	r0, #10
    8c92:	d932      	bls.n	8cfa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8c94:	4668      	mov	r0, sp
    8c96:	f7fc ff9d 	bl	5bd4 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    8c9a:	2800      	cmp	r0, #0
    8c9c:	d02d      	beq.n	8cfa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8c9e:	6861      	ldr	r1, [r4, #4]
    8ca0:	2205      	movs	r2, #5
    8ca2:	4668      	mov	r0, sp
    8ca4:	318e      	adds	r1, #142	; 0x8e
    8ca6:	f003 fc1b 	bl	c4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8caa:	2500      	movs	r5, #0
    8cac:	b310      	cbz	r0, 8cf4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x200>
    8cae:	6860      	ldr	r0, [r4, #4]
    8cb0:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8cb4:	7808      	ldrb	r0, [r1, #0]
    8cb6:	b158      	cbz	r0, 8cd0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1dc>
    8cb8:	2205      	movs	r2, #5
    8cba:	4668      	mov	r0, sp
    8cbc:	1c49      	adds	r1, r1, #1
    8cbe:	f003 fc0f 	bl	c4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8cc2:	2800      	cmp	r0, #0
    8cc4:	d119      	bne.n	8cfa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8cc6:	6860      	ldr	r0, [r4, #4]
    8cc8:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8ccc:	7800      	ldrb	r0, [r0, #0]
    8cce:	b940      	cbnz	r0, 8ce2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1ee>
    8cd0:	6860      	ldr	r0, [r4, #4]
    8cd2:	9900      	ldr	r1, [sp, #0]
    8cd4:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8cd8:	f8c0 1001 	str.w	r1, [r0, #1]
    8cdc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8ce0:	7141      	strb	r1, [r0, #5]
    8ce2:	6860      	ldr	r0, [r4, #4]
    8ce4:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8ce8:	7808      	ldrb	r0, [r1, #0]
    8cea:	1c40      	adds	r0, r0, #1
    8cec:	7008      	strb	r0, [r1, #0]
    8cee:	2001      	movs	r0, #1
    8cf0:	f000 fd04 	bl	96fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8cf4:	6860      	ldr	r0, [r4, #4]
    8cf6:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
    8cfa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8cfc:	20000104 	.word	0x20000104
    8d00:	4a0c      	ldr	r2, [pc, #48]	; (8d34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x240>)
    8d02:	7851      	ldrb	r1, [r2, #1]
    8d04:	b999      	cbnz	r1, 8d2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8d06:	4611      	mov	r1, r2
    8d08:	2801      	cmp	r0, #1
    8d0a:	6849      	ldr	r1, [r1, #4]
    8d0c:	d008      	beq.n	8d20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x22c>
    8d0e:	7890      	ldrb	r0, [r2, #2]
    8d10:	0740      	lsls	r0, r0, #29
    8d12:	d503      	bpl.n	8d1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x228>
    8d14:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
    8d18:	2807      	cmp	r0, #7
    8d1a:	d008      	beq.n	8d2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8d1c:	2001      	movs	r0, #1
    8d1e:	4770      	bx	lr
    8d20:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    8d24:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    8d26:	4288      	cmp	r0, r1
    8d28:	d801      	bhi.n	8d2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8d2a:	f7fe be85 	b.w	7a38 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    8d2e:	2000      	movs	r0, #0
    8d30:	4770      	bx	lr
    8d32:	0000      	.short	0x0000
    8d34:	20000104 	.word	0x20000104
    8d38:	b538      	push	{r3, r4, r5, lr}
    8d3a:	4c87      	ldr	r4, [pc, #540]	; (8f58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x464>)
    8d3c:	6860      	ldr	r0, [r4, #4]
    8d3e:	3078      	adds	r0, #120	; 0x78
    8d40:	f005 fd40 	bl	e7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8d44:	2800      	cmp	r0, #0
    8d46:	d15b      	bne.n	8e00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8d48:	6860      	ldr	r0, [r4, #4]
    8d4a:	2300      	movs	r3, #0
    8d4c:	2101      	movs	r1, #1
    8d4e:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8d52:	3078      	adds	r0, #120	; 0x78
    8d54:	f004 fe1a 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d58:	2800      	cmp	r0, #0
    8d5a:	d151      	bne.n	8e00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8d5c:	6860      	ldr	r0, [r4, #4]
    8d5e:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    8d62:	f88d 1000 	strb.w	r1, [sp]
    8d66:	9900      	ldr	r1, [sp, #0]
    8d68:	9100      	str	r1, [sp, #0]
    8d6a:	f89d 1000 	ldrb.w	r1, [sp]
    8d6e:	b109      	cbz	r1, 8d74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x280>
    8d70:	2002      	movs	r0, #2
    8d72:	e038      	b.n	8de6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8d74:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8d78:	2300      	movs	r3, #0
    8d7a:	4619      	mov	r1, r3
    8d7c:	3078      	adds	r0, #120	; 0x78
    8d7e:	f004 fe05 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d82:	b128      	cbz	r0, 8d90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8d84:	6860      	ldr	r0, [r4, #4]
    8d86:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    8d8a:	b108      	cbz	r0, 8d90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8d8c:	2012      	movs	r0, #18
    8d8e:	e02a      	b.n	8de6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8d90:	6860      	ldr	r0, [r4, #4]
    8d92:	2500      	movs	r5, #0
    8d94:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8d98:	2a12      	cmp	r2, #18
    8d9a:	d01d      	beq.n	8dd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e4>
    8d9c:	dc04      	bgt.n	8da8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2b4>
    8d9e:	2a03      	cmp	r2, #3
    8da0:	d025      	beq.n	8dee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2fa>
    8da2:	2a11      	cmp	r2, #17
    8da4:	d104      	bne.n	8db0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2bc>
    8da6:	e019      	b.n	8ddc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e8>
    8da8:	2a18      	cmp	r2, #24
    8daa:	d01b      	beq.n	8de4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f0>
    8dac:	2a23      	cmp	r2, #35	; 0x23
    8dae:	d028      	beq.n	8e02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30e>
    8db0:	2300      	movs	r3, #0
    8db2:	2104      	movs	r1, #4
    8db4:	3078      	adds	r0, #120	; 0x78
    8db6:	f004 fde9 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8dba:	2800      	cmp	r0, #0
    8dbc:	d120      	bne.n	8e00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8dbe:	6860      	ldr	r0, [r4, #4]
    8dc0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    8dc4:	2919      	cmp	r1, #25
    8dc6:	d07c      	beq.n	8ec2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3ce>
    8dc8:	dc22      	bgt.n	8e10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31c>
    8dca:	2901      	cmp	r1, #1
    8dcc:	d02c      	beq.n	8e28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x334>
    8dce:	2902      	cmp	r1, #2
    8dd0:	d037      	beq.n	8e42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34e>
    8dd2:	2903      	cmp	r1, #3
    8dd4:	d134      	bne.n	8e40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34c>
    8dd6:	e022      	b.n	8e1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x32a>
    8dd8:	200b      	movs	r0, #11
    8dda:	e004      	b.n	8de6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8de0:	f000 bba0 	b.w	9524 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    8de4:	2006      	movs	r0, #6
    8de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8dea:	f000 bc87 	b.w	96fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8dee:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    8df2:	7101      	strb	r1, [r0, #4]
    8df4:	2007      	movs	r0, #7
    8df6:	f000 fc81 	bl	96fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8dfa:	6860      	ldr	r0, [r4, #4]
    8dfc:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    8e00:	bd38      	pop	{r3, r4, r5, pc}
    8e02:	2018      	movs	r0, #24
    8e04:	f000 fc7a 	bl	96fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8e08:	6860      	ldr	r0, [r4, #4]
    8e0a:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    8e0e:	bd38      	pop	{r3, r4, r5, pc}
    8e10:	291d      	cmp	r1, #29
    8e12:	d018      	beq.n	8e46 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    8e14:	291e      	cmp	r1, #30
    8e16:	d016      	beq.n	8e46 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    8e18:	2921      	cmp	r1, #33	; 0x21
    8e1a:	d176      	bne.n	8f0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8e1c:	e056      	b.n	8ecc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d8>
    8e1e:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    8e22:	7141      	strb	r1, [r0, #5]
    8e24:	2007      	movs	r0, #7
    8e26:	e07e      	b.n	8f26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x432>
    8e28:	200c      	movs	r0, #12
    8e2a:	f000 fc67 	bl	96fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8e2e:	6860      	ldr	r0, [r4, #4]
    8e30:	f820 5fba 	strh.w	r5, [r0, #186]!
    8e34:	7981      	ldrb	r1, [r0, #6]
    8e36:	f041 0101 	orr.w	r1, r1, #1
    8e3a:	7181      	strb	r1, [r0, #6]
    8e3c:	f800 5c34 	strb.w	r5, [r0, #-52]
    8e40:	e063      	b.n	8f0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8e42:	2013      	movs	r0, #19
    8e44:	e037      	b.n	8eb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c2>
    8e46:	f890 2133 	ldrb.w	r2, [r0, #307]	; 0x133
    8e4a:	f88d 2000 	strb.w	r2, [sp]
    8e4e:	9a00      	ldr	r2, [sp, #0]
    8e50:	9200      	str	r2, [sp, #0]
    8e52:	f89d 2000 	ldrb.w	r2, [sp]
    8e56:	bbaa      	cbnz	r2, 8ec4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d0>
    8e58:	f890 2132 	ldrb.w	r2, [r0, #306]	; 0x132
    8e5c:	f88d 2000 	strb.w	r2, [sp]
    8e60:	9a00      	ldr	r2, [sp, #0]
    8e62:	9200      	str	r2, [sp, #0]
    8e64:	f89d 2000 	ldrb.w	r2, [sp]
    8e68:	b1aa      	cbz	r2, 8e96 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a2>
    8e6a:	2924      	cmp	r1, #36	; 0x24
    8e6c:	d011      	beq.n	8e92 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    8e6e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    8e72:	2924      	cmp	r1, #36	; 0x24
    8e74:	d00d      	beq.n	8e92 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    8e76:	2300      	movs	r3, #0
    8e78:	f500 7293 	add.w	r2, r0, #294	; 0x126
    8e7c:	f500 7199 	add.w	r1, r0, #306	; 0x132
    8e80:	f005 f92c 	bl	e0dc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8e84:	6860      	ldr	r0, [r4, #4]
    8e86:	211e      	movs	r1, #30
    8e88:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    8e8c:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    8e90:	e003      	b.n	8e9a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a6>
    8e92:	2301      	movs	r3, #1
    8e94:	e7f0      	b.n	8e78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x384>
    8e96:	291e      	cmp	r1, #30
    8e98:	d137      	bne.n	8f0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8e9a:	6860      	ldr	r0, [r4, #4]
    8e9c:	f005 f939 	bl	e112 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8ea0:	f000 f85c 	bl	8f5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    8ea4:	6861      	ldr	r1, [r4, #4]
    8ea6:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8eaa:	8bc2      	ldrh	r2, [r0, #30]
    8eac:	f821 2ffe 	strh.w	r2, [r1, #254]!
    8eb0:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8eb2:	8048      	strh	r0, [r1, #2]
    8eb4:	2015      	movs	r0, #21
    8eb6:	f000 fc21 	bl	96fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8eba:	6860      	ldr	r0, [r4, #4]
    8ebc:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    8ec0:	e001      	b.n	8ec6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d2>
    8ec2:	e02f      	b.n	8f24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x430>
    8ec4:	e021      	b.n	8f0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8ec6:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    8eca:	e01e      	b.n	8f0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8ecc:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    8ed0:	2901      	cmp	r1, #1
    8ed2:	d108      	bne.n	8ee6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3f2>
    8ed4:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    8ed8:	f88d 1000 	strb.w	r1, [sp]
    8edc:	9900      	ldr	r1, [sp, #0]
    8ede:	9100      	str	r1, [sp, #0]
    8ee0:	f89d 1000 	ldrb.w	r1, [sp]
    8ee4:	b121      	cbz	r1, 8ef0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3fc>
    8ee6:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    8eea:	2902      	cmp	r1, #2
    8eec:	d005      	beq.n	8efa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x406>
    8eee:	e00c      	b.n	8f0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8ef0:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    8ef4:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    8ef8:	e002      	b.n	8f00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x40c>
    8efa:	f850 1f62 	ldr.w	r1, [r0, #98]!
    8efe:	6840      	ldr	r0, [r0, #4]
    8f00:	f000 fc1e 	bl	9740 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    8f04:	2018      	movs	r0, #24
    8f06:	f000 fbf9 	bl	96fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8f0a:	6860      	ldr	r0, [r4, #4]
    8f0c:	3078      	adds	r0, #120	; 0x78
    8f0e:	f005 fc59 	bl	e7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8f12:	2800      	cmp	r0, #0
    8f14:	f47f af7b 	bne.w	8e0e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31a>
    8f18:	6860      	ldr	r0, [r4, #4]
    8f1a:	3078      	adds	r0, #120	; 0x78
    8f1c:	f005 fc52 	bl	e7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8f20:	b128      	cbz	r0, 8f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x43a>
    8f22:	e00f      	b.n	8f44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    8f24:	2011      	movs	r0, #17
    8f26:	f000 fbe9 	bl	96fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8f2a:	6860      	ldr	r0, [r4, #4]
    8f2c:	e7c8      	b.n	8ec0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3cc>
    8f2e:	6860      	ldr	r0, [r4, #4]
    8f30:	2300      	movs	r3, #0
    8f32:	4619      	mov	r1, r3
    8f34:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8f38:	3078      	adds	r0, #120	; 0x78
    8f3a:	f004 fd27 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f3e:	b108      	cbz	r0, 8f44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    8f40:	f000 fa44 	bl	93cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d8>
    8f44:	6860      	ldr	r0, [r4, #4]
    8f46:	3078      	adds	r0, #120	; 0x78
    8f48:	f005 fc3c 	bl	e7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8f4c:	2800      	cmp	r0, #0
    8f4e:	d1e1      	bne.n	8f14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x420>
    8f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8f54:	f7ff be7c 	b.w	8c50 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15c>
    8f58:	20000104 	.word	0x20000104
    8f5c:	480a      	ldr	r0, [pc, #40]	; (8f88 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x494>)
    8f5e:	b510      	push	{r4, lr}
    8f60:	6841      	ldr	r1, [r0, #4]
    8f62:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    8f66:	2801      	cmp	r0, #1
    8f68:	d009      	beq.n	8f7e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x48a>
    8f6a:	8808      	ldrh	r0, [r1, #0]
    8f6c:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    8f70:	312c      	adds	r1, #44	; 0x2c
    8f72:	f005 f88f 	bl	e094 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8f7a:	f001 baef 	b.w	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8f7e:	2002      	movs	r0, #2
    8f80:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    8f84:	bd10      	pop	{r4, pc}
    8f86:	0000      	.short	0x0000
    8f88:	20000104 	.word	0x20000104
    8f8c:	b570      	push	{r4, r5, r6, lr}
    8f8e:	4c22      	ldr	r4, [pc, #136]	; (9018 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x524>)
    8f90:	f04f 0500 	mov.w	r5, #0
    8f94:	8861      	ldrh	r1, [r4, #2]
    8f96:	0748      	lsls	r0, r1, #29
    8f98:	d510      	bpl.n	8fbc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    8f9a:	6860      	ldr	r0, [r4, #4]
    8f9c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8fa0:	2a03      	cmp	r2, #3
    8fa2:	d004      	beq.n	8fae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4ba>
    8fa4:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8fa8:	2a07      	cmp	r2, #7
    8faa:	d107      	bne.n	8fbc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    8fac:	e002      	b.n	8fb4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c0>
    8fae:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    8fb2:	e026      	b.n	9002 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50e>
    8fb4:	2201      	movs	r2, #1
    8fb6:	7022      	strb	r2, [r4, #0]
    8fb8:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    8fbc:	0788      	lsls	r0, r1, #30
    8fbe:	d508      	bpl.n	8fd2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4de>
    8fc0:	68a0      	ldr	r0, [r4, #8]
    8fc2:	78c0      	ldrb	r0, [r0, #3]
    8fc4:	2819      	cmp	r0, #25
    8fc6:	d21a      	bcs.n	8ffe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    8fc8:	4914      	ldr	r1, [pc, #80]	; (901c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x528>)
    8fca:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8fce:	b1b0      	cbz	r0, 8ffe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    8fd0:	4780      	blx	r0
    8fd2:	f000 f867 	bl	90a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5b0>
    8fd6:	f000 f823 	bl	9020 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x52c>
    8fda:	4606      	mov	r6, r0
    8fdc:	7860      	ldrb	r0, [r4, #1]
    8fde:	0700      	lsls	r0, r0, #28
    8fe0:	d515      	bpl.n	900e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    8fe2:	6860      	ldr	r0, [r4, #4]
    8fe4:	2300      	movs	r3, #0
    8fe6:	2105      	movs	r1, #5
    8fe8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8fec:	3078      	adds	r0, #120	; 0x78
    8fee:	f004 fccd 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ff2:	b148      	cbz	r0, 9008 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x514>
    8ff4:	6860      	ldr	r0, [r4, #4]
    8ff6:	2608      	movs	r6, #8
    8ff8:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    8ffc:	e007      	b.n	900e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    8ffe:	f240 61b1 	movw	r1, #1713	; 0x6b1
    9002:	2036      	movs	r0, #54	; 0x36
    9004:	f7fa fe76 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9008:	2000      	movs	r0, #0
    900a:	f7fb fe21 	bl	4c50 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    900e:	6860      	ldr	r0, [r4, #4]
    9010:	f005 fc08 	bl	e824 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    9014:	4630      	mov	r0, r6
    9016:	bd70      	pop	{r4, r5, r6, pc}
    9018:	20000104 	.word	0x20000104
    901c:	20000178 	.word	0x20000178
    9020:	b570      	push	{r4, r5, r6, lr}
    9022:	4c1e      	ldr	r4, [pc, #120]	; (909c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5a8>)
    9024:	2000      	movs	r0, #0
    9026:	78a1      	ldrb	r1, [r4, #2]
    9028:	07c9      	lsls	r1, r1, #31
    902a:	d01b      	beq.n	9064 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x570>
    902c:	68e0      	ldr	r0, [r4, #12]
    902e:	2300      	movs	r3, #0
    9030:	2105      	movs	r1, #5
    9032:	78c5      	ldrb	r5, [r0, #3]
    9034:	6860      	ldr	r0, [r4, #4]
    9036:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    903a:	3078      	adds	r0, #120	; 0x78
    903c:	f004 fca6 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9040:	b188      	cbz	r0, 9066 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9042:	2d06      	cmp	r5, #6
    9044:	d00f      	beq.n	9066 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9046:	dc06      	bgt.n	9056 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x562>
    9048:	2d02      	cmp	r5, #2
    904a:	d00c      	beq.n	9066 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    904c:	2d04      	cmp	r5, #4
    904e:	d00a      	beq.n	9066 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9050:	2d05      	cmp	r5, #5
    9052:	d106      	bne.n	9062 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x56e>
    9054:	e007      	b.n	9066 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9056:	2d0b      	cmp	r5, #11
    9058:	d005      	beq.n	9066 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    905a:	2d0d      	cmp	r5, #13
    905c:	d003      	beq.n	9066 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    905e:	2d11      	cmp	r5, #17
    9060:	d001      	beq.n	9066 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9062:	2008      	movs	r0, #8
    9064:	bd70      	pop	{r4, r5, r6, pc}
    9066:	68e0      	ldr	r0, [r4, #12]
    9068:	f7fc fe70 	bl	5d4c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    906c:	b148      	cbz	r0, 9082 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    906e:	68e0      	ldr	r0, [r4, #12]
    9070:	78c0      	ldrb	r0, [r0, #3]
    9072:	2819      	cmp	r0, #25
    9074:	d205      	bcs.n	9082 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    9076:	490a      	ldr	r1, [pc, #40]	; (90a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ac>)
    9078:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    907c:	b108      	cbz	r0, 9082 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    907e:	4780      	blx	r0
    9080:	e002      	b.n	9088 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x594>
    9082:	2000      	movs	r0, #0
    9084:	f000 fbdc 	bl	9840 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9088:	6861      	ldr	r1, [r4, #4]
    908a:	e9f1 2336 	ldrd	r2, r3, [r1, #216]!	; 0xd8
    908e:	1c52      	adds	r2, r2, #1
    9090:	f143 0300 	adc.w	r3, r3, #0
    9094:	e9c1 2300 	strd	r2, r3, [r1]
    9098:	bd70      	pop	{r4, r5, r6, pc}
    909a:	0000      	.short	0x0000
    909c:	20000104 	.word	0x20000104
    90a0:	20000114 	.word	0x20000114
    90a4:	b510      	push	{r4, lr}
    90a6:	4c11      	ldr	r4, [pc, #68]	; (90ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5f8>)
    90a8:	78a0      	ldrb	r0, [r4, #2]
    90aa:	0700      	lsls	r0, r0, #28
    90ac:	d517      	bpl.n	90de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    90ae:	6860      	ldr	r0, [r4, #4]
    90b0:	2100      	movs	r1, #0
    90b2:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    90b6:	f001 f97b 	bl	a3b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    90ba:	6860      	ldr	r0, [r4, #4]
    90bc:	3078      	adds	r0, #120	; 0x78
    90be:	f005 fb81 	bl	e7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    90c2:	b168      	cbz	r0, 90e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ec>
    90c4:	6860      	ldr	r0, [r4, #4]
    90c6:	21fe      	movs	r1, #254	; 0xfe
    90c8:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    90cc:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    90d0:	2908      	cmp	r1, #8
    90d2:	d104      	bne.n	90de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    90d4:	2102      	movs	r1, #2
    90d6:	7021      	strb	r1, [r4, #0]
    90d8:	2100      	movs	r1, #0
    90da:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    90de:	bd10      	pop	{r4, pc}
    90e0:	f240 61bd 	movw	r1, #1725	; 0x6bd
    90e4:	2036      	movs	r0, #54	; 0x36
    90e6:	f7fa fe05 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90ea:	0000      	.short	0x0000
    90ec:	20000104 	.word	0x20000104
    90f0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    90f2:	4605      	mov	r5, r0
    90f4:	4668      	mov	r0, sp
    90f6:	f7fb fc09 	bl	490c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    90fa:	b318      	cbz	r0, 9144 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x650>
    90fc:	2222      	movs	r2, #34	; 0x22
    90fe:	2100      	movs	r1, #0
    9100:	9800      	ldr	r0, [sp, #0]
    9102:	f003 fa79 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9106:	2103      	movs	r1, #3
    9108:	9800      	ldr	r0, [sp, #0]
    910a:	f004 fec5 	bl	de98 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    910e:	9800      	ldr	r0, [sp, #0]
    9110:	7801      	ldrb	r1, [r0, #0]
    9112:	f021 0110 	bic.w	r1, r1, #16
    9116:	7001      	strb	r1, [r0, #0]
    9118:	4629      	mov	r1, r5
    911a:	f7fc fe27 	bl	5d6c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    911e:	2100      	movs	r1, #0
    9120:	4c6a      	ldr	r4, [pc, #424]	; (92cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d8>)
    9122:	2d19      	cmp	r5, #25
    9124:	d270      	bcs.n	9208 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x714>
    9126:	e8df f005 	tbb	[pc, r5]
    912a:	1c24      	.short	0x1c24
    912c:	c9c94c10 	.word	0xc9c94c10
    9130:	c97016c2 	.word	0xc97016c2
    9134:	c964c2c2 	.word	0xc964c2c2
    9138:	b6c9c9c9 	.word	0xb6c9c9c9
    913c:	8181c2c2 	.word	0x8181c2c2
    9140:	00a3c99a 	.word	0x00a3c99a
    9144:	f640 014f 	movw	r1, #2127	; 0x84f
    9148:	e0bd      	b.n	92c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    914a:	6860      	ldr	r0, [r4, #4]
    914c:	9900      	ldr	r1, [sp, #0]
    914e:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
    9152:	7108      	strb	r0, [r1, #4]
    9154:	e0ab      	b.n	92ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9156:	6861      	ldr	r1, [r4, #4]
    9158:	9800      	ldr	r0, [sp, #0]
    915a:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    915e:	7101      	strb	r1, [r0, #4]
    9160:	e0a5      	b.n	92ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9162:	6860      	ldr	r0, [r4, #4]
    9164:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    9168:	9800      	ldr	r0, [sp, #0]
    916a:	1c49      	adds	r1, r1, #1
    916c:	f004 fe74 	bl	de58 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
    9170:	e09d      	b.n	92ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9172:	6860      	ldr	r0, [r4, #4]
    9174:	9d00      	ldr	r5, [sp, #0]
    9176:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    917a:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    917e:	f004 fd88 	bl	dc92 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    9182:	7128      	strb	r0, [r5, #4]
    9184:	6860      	ldr	r0, [r4, #4]
    9186:	9d00      	ldr	r5, [sp, #0]
    9188:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
    918c:	c803      	ldmia	r0, {r0, r1}
    918e:	f004 fd75 	bl	dc7c <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    9192:	7168      	strb	r0, [r5, #5]
    9194:	0a00      	lsrs	r0, r0, #8
    9196:	71a8      	strb	r0, [r5, #6]
    9198:	6860      	ldr	r0, [r4, #4]
    919a:	9d00      	ldr	r5, [sp, #0]
    919c:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
    91a0:	f004 fbdb 	bl	d95a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    91a4:	71e8      	strb	r0, [r5, #7]
    91a6:	0a00      	lsrs	r0, r0, #8
    91a8:	7228      	strb	r0, [r5, #8]
    91aa:	6862      	ldr	r2, [r4, #4]
    91ac:	9800      	ldr	r0, [sp, #0]
    91ae:	f8b2 1154 	ldrh.w	r1, [r2, #340]	; 0x154
    91b2:	7241      	strb	r1, [r0, #9]
    91b4:	0a09      	lsrs	r1, r1, #8
    91b6:	7281      	strb	r1, [r0, #10]
    91b8:	f8b2 1156 	ldrh.w	r1, [r2, #342]	; 0x156
    91bc:	f004 fe51 	bl	de62 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
    91c0:	e075      	b.n	92ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    91c2:	6861      	ldr	r1, [r4, #4]
    91c4:	9800      	ldr	r0, [sp, #0]
    91c6:	f201 115b 	addw	r1, r1, #347	; 0x15b
    91ca:	f004 fe55 	bl	de78 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
    91ce:	6861      	ldr	r1, [r4, #4]
    91d0:	9800      	ldr	r0, [sp, #0]
    91d2:	f201 1163 	addw	r1, r1, #355	; 0x163
    91d6:	f004 fe48 	bl	de6a <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
    91da:	6861      	ldr	r1, [r4, #4]
    91dc:	9800      	ldr	r0, [sp, #0]
    91de:	f201 1175 	addw	r1, r1, #373	; 0x175
    91e2:	f004 fe4e 	bl	de82 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
    91e6:	6861      	ldr	r1, [r4, #4]
    91e8:	9800      	ldr	r0, [sp, #0]
    91ea:	31f0      	adds	r1, #240	; 0xf0
    91ec:	f004 fe40 	bl	de70 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
    91f0:	e05d      	b.n	92ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    91f2:	9800      	ldr	r0, [sp, #0]
    91f4:	220b      	movs	r2, #11
    91f6:	7102      	strb	r2, [r0, #4]
    91f8:	2259      	movs	r2, #89	; 0x59
    91fa:	7142      	strb	r2, [r0, #5]
    91fc:	7181      	strb	r1, [r0, #6]
    91fe:	21b0      	movs	r1, #176	; 0xb0
    9200:	71c1      	strb	r1, [r0, #7]
    9202:	2112      	movs	r1, #18
    9204:	7201      	strb	r1, [r0, #8]
    9206:	e052      	b.n	92ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9208:	e058      	b.n	92bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7c8>
    920a:	9101      	str	r1, [sp, #4]
    920c:	9102      	str	r1, [sp, #8]
    920e:	f001 fec7 	bl	afa0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9212:	f644 112f 	movw	r1, #18735	; 0x492f
    9216:	4008      	ands	r0, r1
    9218:	f88d 0004 	strb.w	r0, [sp, #4]
    921c:	0a00      	lsrs	r0, r0, #8
    921e:	f88d 0005 	strb.w	r0, [sp, #5]
    9222:	a901      	add	r1, sp, #4
    9224:	9800      	ldr	r0, [sp, #0]
    9226:	f004 fe32 	bl	de8e <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    922a:	e040      	b.n	92ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    922c:	6860      	ldr	r0, [r4, #4]
    922e:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    9232:	9800      	ldr	r0, [sp, #0]
    9234:	f004 fe42 	bl	debc <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    9238:	6860      	ldr	r0, [r4, #4]
    923a:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    923e:	9800      	ldr	r0, [sp, #0]
    9240:	f004 fe40 	bl	dec4 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9244:	6860      	ldr	r0, [r4, #4]
    9246:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    924a:	9800      	ldr	r0, [sp, #0]
    924c:	f004 fe2e 	bl	deac <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9250:	6860      	ldr	r0, [r4, #4]
    9252:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    9256:	9800      	ldr	r0, [sp, #0]
    9258:	f004 fe2c 	bl	deb4 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    925c:	e027      	b.n	92ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    925e:	6861      	ldr	r1, [r4, #4]
    9260:	9800      	ldr	r0, [sp, #0]
    9262:	f891 2140 	ldrb.w	r2, [r1, #320]	; 0x140
    9266:	7102      	strb	r2, [r0, #4]
    9268:	f891 1141 	ldrb.w	r1, [r1, #321]	; 0x141
    926c:	7141      	strb	r1, [r0, #5]
    926e:	e01e      	b.n	92ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9270:	6860      	ldr	r0, [r4, #4]
    9272:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    9276:	f004 fc2d 	bl	dad4 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    927a:	4601      	mov	r1, r0
    927c:	9800      	ldr	r0, [sp, #0]
    927e:	f004 fe29 	bl	ded4 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
    9282:	6860      	ldr	r0, [r4, #4]
    9284:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    9288:	f004 fc24 	bl	dad4 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    928c:	4601      	mov	r1, r0
    928e:	9800      	ldr	r0, [sp, #0]
    9290:	f004 fe0a 	bl	dea8 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    9294:	e00b      	b.n	92ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9296:	6860      	ldr	r0, [r4, #4]
    9298:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    929c:	9800      	ldr	r0, [sp, #0]
    929e:	f004 fdd7 	bl	de50 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    92a2:	6860      	ldr	r0, [r4, #4]
    92a4:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    92a8:	9800      	ldr	r0, [sp, #0]
    92aa:	f004 fdd3 	bl	de54 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    92ae:	f7fb fb07 	bl	48c0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    92b2:	b130      	cbz	r0, 92c2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ce>
    92b4:	9800      	ldr	r0, [sp, #0]
    92b6:	f7ff fcb1 	bl	8c1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    92ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    92bc:	f640 01db 	movw	r1, #2267	; 0x8db
    92c0:	e001      	b.n	92c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    92c2:	f640 01e1 	movw	r1, #2273	; 0x8e1
    92c6:	2036      	movs	r0, #54	; 0x36
    92c8:	f7fa fd14 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92cc:	20000104 	.word	0x20000104
    92d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92d4:	4c27      	ldr	r4, [pc, #156]	; (9374 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x880>)
    92d6:	4680      	mov	r8, r0
    92d8:	460d      	mov	r5, r1
    92da:	8860      	ldrh	r0, [r4, #2]
    92dc:	f04f 0600 	mov.w	r6, #0
    92e0:	05c1      	lsls	r1, r0, #23
    92e2:	4620      	mov	r0, r4
    92e4:	6840      	ldr	r0, [r0, #4]
    92e6:	d502      	bpl.n	92ee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7fa>
    92e8:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
    92ec:	e004      	b.n	92f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x804>
    92ee:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
    92f2:	1c49      	adds	r1, r1, #1
    92f4:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    92f8:	f005 faef 	bl	e8da <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    92fc:	2701      	movs	r7, #1
    92fe:	b1e0      	cbz	r0, 933a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    9300:	8860      	ldrh	r0, [r4, #2]
    9302:	0500      	lsls	r0, r0, #20
    9304:	d506      	bpl.n	9314 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    9306:	6860      	ldr	r0, [r4, #4]
    9308:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    930c:	b111      	cbz	r1, 9314 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    930e:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    9312:	e012      	b.n	933a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    9314:	6860      	ldr	r0, [r4, #4]
    9316:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    931a:	1c49      	adds	r1, r1, #1
    931c:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    9320:	f005 fa71 	bl	e806 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    9324:	6860      	ldr	r0, [r4, #4]
    9326:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    932a:	4291      	cmp	r1, r2
    932c:	d305      	bcc.n	933a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    932e:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    9332:	f880 718e 	strb.w	r7, [r0, #398]	; 0x18e
    9336:	f001 f911 	bl	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    933a:	8860      	ldrh	r0, [r4, #2]
    933c:	f410 7f40 	tst.w	r0, #768	; 0x300
    9340:	d008      	beq.n	9354 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    9342:	6860      	ldr	r0, [r4, #4]
    9344:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    9348:	b921      	cbnz	r1, 9354 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    934a:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    934e:	2101      	movs	r1, #1
    9350:	f7fe fb94 	bl	7a7c <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    9354:	ea58 0005 	orrs.w	r0, r8, r5
    9358:	d104      	bne.n	9364 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x870>
    935a:	f7ff fe17 	bl	8f8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x498>
    935e:	4605      	mov	r5, r0
    9360:	f7ff fcea 	bl	8d38 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x244>
    9364:	4629      	mov	r1, r5
    9366:	4640      	mov	r0, r8
    9368:	f000 ff7a 	bl	a260 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x176c>
    936c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9370:	f7fb ba90 	b.w	4894 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9374:	20000104 	.word	0x20000104
    9378:	4813      	ldr	r0, [pc, #76]	; (93c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d4>)
    937a:	6840      	ldr	r0, [r0, #4]
    937c:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    9380:	b129      	cbz	r1, 938e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x89a>
    9382:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    9386:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    938a:	4291      	cmp	r1, r2
    938c:	d215      	bcs.n	93ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    938e:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    9392:	b129      	cbz	r1, 93a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ac>
    9394:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
    9398:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    939c:	4291      	cmp	r1, r2
    939e:	d20c      	bcs.n	93ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    93a0:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    93a4:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    93a8:	428a      	cmp	r2, r1
    93aa:	d206      	bcs.n	93ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    93ac:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    93b0:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    93b4:	b11a      	cbz	r2, 93be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ca>
    93b6:	4288      	cmp	r0, r1
    93b8:	d303      	bcc.n	93c2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ce>
    93ba:	2001      	movs	r0, #1
    93bc:	4770      	bx	lr
    93be:	2806      	cmp	r0, #6
    93c0:	d2fb      	bcs.n	93ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    93c2:	2000      	movs	r0, #0
    93c4:	4770      	bx	lr
    93c6:	0000      	.short	0x0000
    93c8:	20000104 	.word	0x20000104
    93cc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    93ce:	4c54      	ldr	r4, [pc, #336]	; (9520 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2c>)
    93d0:	6860      	ldr	r0, [r4, #4]
    93d2:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    93d6:	f88d 1000 	strb.w	r1, [sp]
    93da:	9900      	ldr	r1, [sp, #0]
    93dc:	9100      	str	r1, [sp, #0]
    93de:	f89d 1000 	ldrb.w	r1, [sp]
    93e2:	b129      	cbz	r1, 93f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8fc>
    93e4:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    93e8:	f004 fb29 	bl	da3e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    93ec:	2800      	cmp	r0, #0
    93ee:	d00a      	beq.n	9406 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x912>
    93f0:	6860      	ldr	r0, [r4, #4]
    93f2:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    93f6:	b181      	cbz	r1, 941a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x926>
    93f8:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    93fc:	b149      	cbz	r1, 9412 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x91e>
    93fe:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
    9402:	b108      	cbz	r0, 9408 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x914>
    9404:	200a      	movs	r0, #10
    9406:	e087      	b.n	9518 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    9408:	f44f 61e7 	mov.w	r1, #1848	; 0x738
    940c:	2036      	movs	r0, #54	; 0x36
    940e:	f7fa fc71 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9412:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    9416:	f000 b885 	b.w	9524 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    941a:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
    941e:	b109      	cbz	r1, 9424 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x930>
    9420:	2008      	movs	r0, #8
    9422:	e079      	b.n	9518 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    9424:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    9428:	2500      	movs	r5, #0
    942a:	b181      	cbz	r1, 944e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x95a>
    942c:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    9430:	0780      	lsls	r0, r0, #30
    9432:	d10b      	bne.n	944c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9434:	200c      	movs	r0, #12
    9436:	f000 f961 	bl	96fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    943a:	6860      	ldr	r0, [r4, #4]
    943c:	2101      	movs	r1, #1
    943e:	f820 5fb4 	strh.w	r5, [r0, #180]!
    9442:	7101      	strb	r1, [r0, #4]
    9444:	7b01      	ldrb	r1, [r0, #12]
    9446:	f041 0101 	orr.w	r1, r1, #1
    944a:	7301      	strb	r1, [r0, #12]
    944c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    944e:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    9452:	f88d 1004 	strb.w	r1, [sp, #4]
    9456:	9901      	ldr	r1, [sp, #4]
    9458:	9101      	str	r1, [sp, #4]
    945a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    945e:	b141      	cbz	r1, 9472 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x97e>
    9460:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    9464:	f88d 1000 	strb.w	r1, [sp]
    9468:	9900      	ldr	r1, [sp, #0]
    946a:	9100      	str	r1, [sp, #0]
    946c:	f89d 1000 	ldrb.w	r1, [sp]
    9470:	b391      	cbz	r1, 94d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9e4>
    9472:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    9476:	2901      	cmp	r1, #1
    9478:	d1e8      	bne.n	944c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    947a:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    947e:	f88d 1000 	strb.w	r1, [sp]
    9482:	9900      	ldr	r1, [sp, #0]
    9484:	9100      	str	r1, [sp, #0]
    9486:	f89d 1000 	ldrb.w	r1, [sp]
    948a:	2900      	cmp	r1, #0
    948c:	d1de      	bne.n	944c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    948e:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9492:	f004 fad4 	bl	da3e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9496:	2800      	cmp	r0, #0
    9498:	d1d8      	bne.n	944c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    949a:	6860      	ldr	r0, [r4, #4]
    949c:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    94a0:	f005 f998 	bl	e7d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    94a4:	4605      	mov	r5, r0
    94a6:	6860      	ldr	r0, [r4, #4]
    94a8:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    94ac:	f005 f992 	bl	e7d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    94b0:	4606      	mov	r6, r0
    94b2:	6860      	ldr	r0, [r4, #4]
    94b4:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    94b8:	4628      	mov	r0, r5
    94ba:	f005 f996 	bl	e7ea <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    94be:	b350      	cbz	r0, 9516 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    94c0:	6860      	ldr	r0, [r4, #4]
    94c2:	f890 1141 	ldrb.w	r1, [r0, #321]	; 0x141
    94c6:	4630      	mov	r0, r6
    94c8:	f005 f98f 	bl	e7ea <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    94cc:	b318      	cbz	r0, 9516 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    94ce:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    94d2:	2000      	movs	r0, #0
    94d4:	f000 b8ee 	b.w	96b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    94d8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    94dc:	2924      	cmp	r1, #36	; 0x24
    94de:	d018      	beq.n	9512 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    94e0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    94e4:	2924      	cmp	r1, #36	; 0x24
    94e6:	d014      	beq.n	9512 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    94e8:	f05f 0300 	movs.w	r3, #0
    94ec:	f500 7293 	add.w	r2, r0, #294	; 0x126
    94f0:	f500 7199 	add.w	r1, r0, #306	; 0x132
    94f4:	f004 fdf2 	bl	e0dc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    94f8:	6860      	ldr	r0, [r4, #4]
    94fa:	4602      	mov	r2, r0
    94fc:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    9500:	f102 012c 	add.w	r1, r2, #44	; 0x2c
    9504:	8bc8      	ldrh	r0, [r1, #30]
    9506:	f822 0ffe 	strh.w	r0, [r2, #254]!
    950a:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    950c:	8050      	strh	r0, [r2, #2]
    950e:	2014      	movs	r0, #20
    9510:	e002      	b.n	9518 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    9512:	2301      	movs	r3, #1
    9514:	e7ea      	b.n	94ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9f8>
    9516:	2016      	movs	r0, #22
    9518:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    951c:	f000 b8ee 	b.w	96fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9520:	20000104 	.word	0x20000104
    9524:	b510      	push	{r4, lr}
    9526:	4c1e      	ldr	r4, [pc, #120]	; (95a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaac>)
    9528:	6862      	ldr	r2, [r4, #4]
    952a:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    952e:	2808      	cmp	r0, #8
    9530:	d20d      	bcs.n	954e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa5a>
    9532:	f1c0 0108 	rsb	r1, r0, #8
    9536:	4410      	add	r0, r2
    9538:	b2c9      	uxtb	r1, r1
    953a:	f200 1075 	addw	r0, r0, #373	; 0x175
    953e:	f7fa fc67 	bl	3e10 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9542:	6861      	ldr	r1, [r4, #4]
    9544:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    9548:	4410      	add	r0, r2
    954a:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    954e:	6862      	ldr	r2, [r4, #4]
    9550:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    9554:	3808      	subs	r0, #8
    9556:	2804      	cmp	r0, #4
    9558:	d20c      	bcs.n	9574 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa80>
    955a:	f1c0 0104 	rsb	r1, r0, #4
    955e:	4410      	add	r0, r2
    9560:	b2c9      	uxtb	r1, r1
    9562:	30f0      	adds	r0, #240	; 0xf0
    9564:	f7fa fc54 	bl	3e10 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9568:	6861      	ldr	r1, [r4, #4]
    956a:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    956e:	4410      	add	r0, r2
    9570:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    9574:	6860      	ldr	r0, [r4, #4]
    9576:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    957a:	290c      	cmp	r1, #12
    957c:	d30e      	bcc.n	959c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaa8>
    957e:	d005      	beq.n	958c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa98>
    9580:	f640 1131 	movw	r1, #2353	; 0x931
    9584:	f04f 0036 	mov.w	r0, #54	; 0x36
    9588:	f7fa fbb4 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    958c:	2100      	movs	r1, #0
    958e:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    9592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9596:	2003      	movs	r0, #3
    9598:	f000 b8b0 	b.w	96fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    959c:	bd10      	pop	{r4, pc}
    959e:	0000      	.short	0x0000
    95a0:	20000104 	.word	0x20000104
    95a4:	b570      	push	{r4, r5, r6, lr}
    95a6:	4b20      	ldr	r3, [pc, #128]	; (9628 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb34>)
    95a8:	4602      	mov	r2, r0
    95aa:	460c      	mov	r4, r1
    95ac:	8858      	ldrh	r0, [r3, #2]
    95ae:	4310      	orrs	r0, r2
    95b0:	8058      	strh	r0, [r3, #2]
    95b2:	4618      	mov	r0, r3
    95b4:	0791      	lsls	r1, r2, #30
    95b6:	6840      	ldr	r0, [r0, #4]
    95b8:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    95bc:	d507      	bpl.n	95ce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xada>
    95be:	b121      	cbz	r1, 95ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xad6>
    95c0:	f640 21c5 	movw	r1, #2757	; 0xac5
    95c4:	2036      	movs	r0, #54	; 0x36
    95c6:	f7fa fb95 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95ca:	609c      	str	r4, [r3, #8]
    95cc:	e003      	b.n	95d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae2>
    95ce:	b101      	cbz	r1, 95d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xade>
    95d0:	60dc      	str	r4, [r3, #12]
    95d2:	0791      	lsls	r1, r2, #30
    95d4:	d515      	bpl.n	9602 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    95d6:	78e1      	ldrb	r1, [r4, #3]
    95d8:	2906      	cmp	r1, #6
    95da:	d002      	beq.n	95e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaee>
    95dc:	290b      	cmp	r1, #11
    95de:	d110      	bne.n	9602 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    95e0:	e008      	b.n	95f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb00>
    95e2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    95e6:	2918      	cmp	r1, #24
    95e8:	d10b      	bne.n	9602 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    95ea:	2100      	movs	r1, #0
    95ec:	e9c0 1136 	strd	r1, r1, [r0, #216]	; 0xd8
    95f0:	2101      	movs	r1, #1
    95f2:	e004      	b.n	95fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0a>
    95f4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    95f8:	2912      	cmp	r1, #18
    95fa:	d102      	bne.n	9602 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    95fc:	2100      	movs	r1, #0
    95fe:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
    9602:	0691      	lsls	r1, r2, #26
    9604:	d501      	bpl.n	960a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb16>
    9606:	2108      	movs	r1, #8
    9608:	7059      	strb	r1, [r3, #1]
    960a:	0611      	lsls	r1, r2, #24
    960c:	d50a      	bpl.n	9624 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb30>
    960e:	8a82      	ldrh	r2, [r0, #20]
    9610:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    9614:	4620      	mov	r0, r4
    9616:	f7ff fae3 	bl	8be0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>
    961a:	4620      	mov	r0, r4
    961c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9620:	f7ff bafc 	b.w	8c1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    9624:	bd70      	pop	{r4, r5, r6, pc}
    9626:	0000      	.short	0x0000
    9628:	20000104 	.word	0x20000104
    962c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9630:	4c1f      	ldr	r4, [pc, #124]	; (96b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbbc>)
    9632:	2501      	movs	r5, #1
    9634:	6862      	ldr	r2, [r4, #4]
    9636:	f892 0126 	ldrb.w	r0, [r2, #294]	; 0x126
    963a:	b908      	cbnz	r0, 9640 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb4c>
    963c:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    9640:	f892 1127 	ldrb.w	r1, [r2, #295]	; 0x127
    9644:	b909      	cbnz	r1, 964a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb56>
    9646:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    964a:	f882 006a 	strb.w	r0, [r2, #106]	; 0x6a
    964e:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    9652:	3262      	adds	r2, #98	; 0x62
    9654:	2001      	movs	r0, #1
    9656:	7290      	strb	r0, [r2, #10]
    9658:	2000      	movs	r0, #0
    965a:	f000 f82b 	bl	96b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    965e:	6860      	ldr	r0, [r4, #4]
    9660:	302c      	adds	r0, #44	; 0x2c
    9662:	f004 fdaa 	bl	e1ba <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9666:	4606      	mov	r6, r0
    9668:	6860      	ldr	r0, [r4, #4]
    966a:	f004 fd52 	bl	e112 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    966e:	b1c0      	cbz	r0, 96a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    9670:	6860      	ldr	r0, [r4, #4]
    9672:	302c      	adds	r0, #44	; 0x2c
    9674:	f004 fda1 	bl	e1ba <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9678:	6861      	ldr	r1, [r4, #4]
    967a:	4607      	mov	r7, r0
    967c:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    9680:	8808      	ldrh	r0, [r1, #0]
    9682:	312c      	adds	r1, #44	; 0x2c
    9684:	f004 fd06 	bl	e094 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9688:	42be      	cmp	r6, r7
    968a:	d20a      	bcs.n	96a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    968c:	f7f7 ff54 	bl	1538 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    9690:	4601      	mov	r1, r0
    9692:	1bb8      	subs	r0, r7, r6
    9694:	2864      	cmp	r0, #100	; 0x64
    9696:	d200      	bcs.n	969a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba6>
    9698:	2064      	movs	r0, #100	; 0x64
    969a:	f7f7 fe41 	bl	1320 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    969e:	b100      	cbz	r0, 96a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    96a0:	2500      	movs	r5, #0
    96a2:	2104      	movs	r1, #4
    96a4:	6860      	ldr	r0, [r4, #4]
    96a6:	f7fe f9e9 	bl	7a7c <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    96aa:	4628      	mov	r0, r5
    96ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    96b0:	20000104 	.word	0x20000104
    96b4:	b510      	push	{r4, lr}
    96b6:	4c10      	ldr	r4, [pc, #64]	; (96f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc04>)
    96b8:	6861      	ldr	r1, [r4, #4]
    96ba:	880a      	ldrh	r2, [r1, #0]
    96bc:	f8a1 21b4 	strh.w	r2, [r1, #436]	; 0x1b4
    96c0:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
    96c4:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    96c8:	f005 f884 	bl	e7d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    96cc:	6861      	ldr	r1, [r4, #4]
    96ce:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    96d2:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    96d6:	f005 f87d 	bl	e7d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    96da:	6862      	ldr	r2, [r4, #4]
    96dc:	f502 71d8 	add.w	r1, r2, #432	; 0x1b0
    96e0:	f882 01b7 	strb.w	r0, [r2, #439]	; 0x1b7
    96e4:	2001      	movs	r0, #1
    96e6:	7008      	strb	r0, [r1, #0]
    96e8:	2000      	movs	r0, #0
    96ea:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
    96ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    96f2:	f000 bf33 	b.w	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    96f6:	0000      	.short	0x0000
    96f8:	20000104 	.word	0x20000104
    96fc:	490f      	ldr	r1, [pc, #60]	; (973c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc48>)
    96fe:	280c      	cmp	r0, #12
    9700:	6849      	ldr	r1, [r1, #4]
    9702:	f881 00fc 	strb.w	r0, [r1, #252]	; 0xfc
    9706:	d014      	beq.n	9732 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9708:	2813      	cmp	r0, #19
    970a:	d012      	beq.n	9732 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    970c:	2818      	cmp	r0, #24
    970e:	d010      	beq.n	9732 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9710:	2200      	movs	r2, #0
    9712:	2811      	cmp	r0, #17
    9714:	d00e      	beq.n	9734 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    9716:	2807      	cmp	r0, #7
    9718:	d00b      	beq.n	9732 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    971a:	2815      	cmp	r0, #21
    971c:	d00a      	beq.n	9734 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    971e:	2801      	cmp	r0, #1
    9720:	d007      	beq.n	9732 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9722:	2800      	cmp	r0, #0
    9724:	d005      	beq.n	9732 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9726:	2802      	cmp	r0, #2
    9728:	d003      	beq.n	9732 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    972a:	f821 2fb4 	strh.w	r2, [r1, #180]!
    972e:	2001      	movs	r0, #1
    9730:	7108      	strb	r0, [r1, #4]
    9732:	4770      	bx	lr
    9734:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    9738:	4770      	bx	lr
    973a:	0000      	.short	0x0000
    973c:	20000104 	.word	0x20000104
    9740:	b538      	push	{r3, r4, r5, lr}
    9742:	4c11      	ldr	r4, [pc, #68]	; (9788 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc94>)
    9744:	6862      	ldr	r2, [r4, #4]
    9746:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    974a:	f8ad 2000 	strh.w	r2, [sp]
    974e:	f004 f9f6 	bl	db3e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    9752:	f89d 3000 	ldrb.w	r3, [sp]
    9756:	b2c2      	uxtb	r2, r0
    9758:	2100      	movs	r1, #0
    975a:	4293      	cmp	r3, r2
    975c:	d003      	beq.n	9766 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc72>
    975e:	6863      	ldr	r3, [r4, #4]
    9760:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    9764:	e002      	b.n	976c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc78>
    9766:	6862      	ldr	r2, [r4, #4]
    9768:	f882 1126 	strb.w	r1, [r2, #294]	; 0x126
    976c:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9770:	f3c0 2007 	ubfx	r0, r0, #8, #8
    9774:	4282      	cmp	r2, r0
    9776:	d003      	beq.n	9780 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc8c>
    9778:	6861      	ldr	r1, [r4, #4]
    977a:	f881 0127 	strb.w	r0, [r1, #295]	; 0x127
    977e:	bd38      	pop	{r3, r4, r5, pc}
    9780:	6860      	ldr	r0, [r4, #4]
    9782:	f880 1127 	strb.w	r1, [r0, #295]	; 0x127
    9786:	bd38      	pop	{r3, r4, r5, pc}
    9788:	20000104 	.word	0x20000104
    978c:	b510      	push	{r4, lr}
    978e:	4c0c      	ldr	r4, [pc, #48]	; (97c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xccc>)
    9790:	6861      	ldr	r1, [r4, #4]
    9792:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    9796:	2813      	cmp	r0, #19
    9798:	d001      	beq.n	979e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcaa>
    979a:	2002      	movs	r0, #2
    979c:	bd10      	pop	{r4, pc}
    979e:	f201 117d 	addw	r1, r1, #381	; 0x17d
    97a2:	68e0      	ldr	r0, [r4, #12]
    97a4:	f004 fb06 	bl	ddb4 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>
    97a8:	6861      	ldr	r1, [r4, #4]
    97aa:	68e0      	ldr	r0, [r4, #12]
    97ac:	31f4      	adds	r1, #244	; 0xf4
    97ae:	f004 fafe 	bl	ddae <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>
    97b2:	6861      	ldr	r1, [r4, #4]
    97b4:	2016      	movs	r0, #22
    97b6:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    97ba:	2000      	movs	r0, #0
    97bc:	bd10      	pop	{r4, pc}
    97be:	0000      	.short	0x0000
    97c0:	20000104 	.word	0x20000104
    97c4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    97c6:	4c1d      	ldr	r4, [pc, #116]	; (983c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd48>)
    97c8:	2300      	movs	r3, #0
    97ca:	2107      	movs	r1, #7
    97cc:	6860      	ldr	r0, [r4, #4]
    97ce:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    97d2:	3078      	adds	r0, #120	; 0x78
    97d4:	f004 f8da 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97d8:	b370      	cbz	r0, 9838 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd44>
    97da:	4669      	mov	r1, sp
    97dc:	68e0      	ldr	r0, [r4, #12]
    97de:	f004 faee 	bl	ddbe <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    97e2:	f001 fbdd 	bl	afa0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    97e6:	f644 112f 	movw	r1, #18735	; 0x492f
    97ea:	4008      	ands	r0, r1
    97ec:	f89d 2000 	ldrb.w	r2, [sp]
    97f0:	6861      	ldr	r1, [r4, #4]
    97f2:	4002      	ands	r2, r0
    97f4:	2500      	movs	r5, #0
    97f6:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    97fa:	f89d 2001 	ldrb.w	r2, [sp, #1]
    97fe:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    9802:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
    9806:	f881 50b8 	strb.w	r5, [r1, #184]	; 0xb8
    980a:	f881 5159 	strb.w	r5, [r1, #345]	; 0x159
    980e:	8808      	ldrh	r0, [r1, #0]
    9810:	f8a1 01bc 	strh.w	r0, [r1, #444]	; 0x1bc
    9814:	f881 51ba 	strb.w	r5, [r1, #442]	; 0x1ba
    9818:	9a00      	ldr	r2, [sp, #0]
    981a:	f8c1 21be 	str.w	r2, [r1, #446]	; 0x1be
    981e:	9a01      	ldr	r2, [sp, #4]
    9820:	f8c1 21c2 	str.w	r2, [r1, #450]	; 0x1c2
    9824:	2001      	movs	r0, #1
    9826:	f881 01b8 	strb.w	r0, [r1, #440]	; 0x1b8
    982a:	f000 fe97 	bl	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    982e:	6860      	ldr	r0, [r4, #4]
    9830:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9834:	2000      	movs	r0, #0
    9836:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9838:	2001      	movs	r0, #1
    983a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    983c:	20000104 	.word	0x20000104
    9840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9844:	4c19      	ldr	r4, [pc, #100]	; (98ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb8>)
    9846:	2600      	movs	r6, #0
    9848:	2703      	movs	r7, #3
    984a:	f8d4 c004 	ldr.w	ip, [r4, #4]
    984e:	2501      	movs	r5, #1
    9850:	b1a0      	cbz	r0, 987c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd88>
    9852:	68e0      	ldr	r0, [r4, #12]
    9854:	78c0      	ldrb	r0, [r0, #3]
    9856:	f88c 00fa 	strb.w	r0, [ip, #250]	; 0xfa
    985a:	fa05 f000 	lsl.w	r0, r5, r0
    985e:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    9862:	b130      	cbz	r0, 9872 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd7e>
    9864:	f88c 7085 	strb.w	r7, [ip, #133]	; 0x85
    9868:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
    986c:	f88c 50b8 	strb.w	r5, [ip, #184]	; 0xb8
    9870:	e017      	b.n	98a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdae>
    9872:	f240 5143 	movw	r1, #1347	; 0x543
    9876:	2036      	movs	r0, #54	; 0x36
    9878:	f7fa fa3c 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    987c:	2300      	movs	r3, #0
    987e:	f89c 2086 	ldrb.w	r2, [ip, #134]	; 0x86
    9882:	4619      	mov	r1, r3
    9884:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    9888:	f004 f880 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    988c:	b160      	cbz	r0, 98a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb4>
    988e:	68e0      	ldr	r0, [r4, #12]
    9890:	78c1      	ldrb	r1, [r0, #3]
    9892:	6860      	ldr	r0, [r4, #4]
    9894:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    9898:	f800 7f86 	strb.w	r7, [r0, #134]!
    989c:	8686      	strh	r6, [r0, #52]	; 0x34
    989e:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    98a2:	2000      	movs	r0, #0
    98a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98a8:	2001      	movs	r0, #1
    98aa:	e7fb      	b.n	98a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb0>
    98ac:	20000104 	.word	0x20000104
    98b0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    98b4:	4c30      	ldr	r4, [pc, #192]	; (9978 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe84>)
    98b6:	2300      	movs	r3, #0
    98b8:	4619      	mov	r1, r3
    98ba:	6860      	ldr	r0, [r4, #4]
    98bc:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    98c0:	3078      	adds	r0, #120	; 0x78
    98c2:	f004 f863 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98c6:	b308      	cbz	r0, 990c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe18>
    98c8:	68e0      	ldr	r0, [r4, #12]
    98ca:	f004 fa8d 	bl	dde8 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    98ce:	b300      	cbz	r0, 9912 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1e>
    98d0:	68e0      	ldr	r0, [r4, #12]
    98d2:	f004 fa7f 	bl	ddd4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    98d6:	4607      	mov	r7, r0
    98d8:	68e0      	ldr	r0, [r4, #12]
    98da:	f004 fa7f 	bl	dddc <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    98de:	4606      	mov	r6, r0
    98e0:	68e0      	ldr	r0, [r4, #12]
    98e2:	f004 fa75 	bl	ddd0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    98e6:	4605      	mov	r5, r0
    98e8:	68e0      	ldr	r0, [r4, #12]
    98ea:	f004 fa75 	bl	ddd8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    98ee:	4601      	mov	r1, r0
    98f0:	9700      	str	r7, [sp, #0]
    98f2:	6860      	ldr	r0, [r4, #4]
    98f4:	4633      	mov	r3, r6
    98f6:	462a      	mov	r2, r5
    98f8:	302c      	adds	r0, #44	; 0x2c
    98fa:	f004 fc98 	bl	e22e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    98fe:	6861      	ldr	r1, [r4, #4]
    9900:	2501      	movs	r5, #1
    9902:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    9906:	281c      	cmp	r0, #28
    9908:	d008      	beq.n	991c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe28>
    990a:	e009      	b.n	9920 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe2c>
    990c:	2001      	movs	r0, #1
    990e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9912:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9916:	2000      	movs	r0, #0
    9918:	f7ff bf92 	b.w	9840 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    991c:	f881 5060 	strb.w	r5, [r1, #96]	; 0x60
    9920:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    9924:	2801      	cmp	r0, #1
    9926:	d011      	beq.n	994c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    9928:	f891 0133 	ldrb.w	r0, [r1, #307]	; 0x133
    992c:	f88d 0004 	strb.w	r0, [sp, #4]
    9930:	9801      	ldr	r0, [sp, #4]
    9932:	9001      	str	r0, [sp, #4]
    9934:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9938:	b940      	cbnz	r0, 994c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    993a:	f891 0132 	ldrb.w	r0, [r1, #306]	; 0x132
    993e:	f88d 0000 	strb.w	r0, [sp]
    9942:	9800      	ldr	r0, [sp, #0]
    9944:	9000      	str	r0, [sp, #0]
    9946:	f89d 0000 	ldrb.w	r0, [sp]
    994a:	b118      	cbz	r0, 9954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe60>
    994c:	201e      	movs	r0, #30
    994e:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9952:	e00a      	b.n	996a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe76>
    9954:	201d      	movs	r0, #29
    9956:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    995a:	f501 72cf 	add.w	r2, r1, #414	; 0x19e
    995e:	f831 0b2c 	ldrh.w	r0, [r1], #44
    9962:	f004 fc6b 	bl	e23c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9966:	f000 fdf9 	bl	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    996a:	6860      	ldr	r0, [r4, #4]
    996c:	2100      	movs	r1, #0
    996e:	f820 1fba 	strh.w	r1, [r0, #186]!
    9972:	7085      	strb	r5, [r0, #2]
    9974:	4608      	mov	r0, r1
    9976:	e7ca      	b.n	990e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1a>
    9978:	20000104 	.word	0x20000104
    997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    997e:	4c1a      	ldr	r4, [pc, #104]	; (99e8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xef4>)
    9980:	2300      	movs	r3, #0
    9982:	210a      	movs	r1, #10
    9984:	6860      	ldr	r0, [r4, #4]
    9986:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    998a:	3078      	adds	r0, #120	; 0x78
    998c:	f003 fffe 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9990:	b338      	cbz	r0, 99e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeee>
    9992:	68e0      	ldr	r0, [r4, #12]
    9994:	f004 fa28 	bl	dde8 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9998:	b1c8      	cbz	r0, 99ce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeda>
    999a:	68e0      	ldr	r0, [r4, #12]
    999c:	f004 fa1a 	bl	ddd4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    99a0:	4607      	mov	r7, r0
    99a2:	68e0      	ldr	r0, [r4, #12]
    99a4:	f004 fa1a 	bl	dddc <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    99a8:	4606      	mov	r6, r0
    99aa:	68e0      	ldr	r0, [r4, #12]
    99ac:	f004 fa10 	bl	ddd0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    99b0:	4605      	mov	r5, r0
    99b2:	68e0      	ldr	r0, [r4, #12]
    99b4:	f004 fa10 	bl	ddd8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    99b8:	4601      	mov	r1, r0
    99ba:	9700      	str	r7, [sp, #0]
    99bc:	6860      	ldr	r0, [r4, #4]
    99be:	4633      	mov	r3, r6
    99c0:	462a      	mov	r2, r5
    99c2:	302c      	adds	r0, #44	; 0x2c
    99c4:	f004 fc33 	bl	e22e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    99c8:	6860      	ldr	r0, [r4, #4]
    99ca:	f004 fba2 	bl	e112 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    99ce:	6861      	ldr	r1, [r4, #4]
    99d0:	2000      	movs	r0, #0
    99d2:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    99d6:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    99da:	f7ff fabf 	bl	8f5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    99de:	2000      	movs	r0, #0
    99e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99e2:	2001      	movs	r0, #1
    99e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99e6:	0000      	.short	0x0000
    99e8:	20000104 	.word	0x20000104
    99ec:	b510      	push	{r4, lr}
    99ee:	4c0b      	ldr	r4, [pc, #44]	; (9a1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf28>)
    99f0:	2300      	movs	r3, #0
    99f2:	4619      	mov	r1, r3
    99f4:	6860      	ldr	r0, [r4, #4]
    99f6:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    99fa:	3078      	adds	r0, #120	; 0x78
    99fc:	f003 ffc6 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a00:	b150      	cbz	r0, 9a18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf24>
    9a02:	6860      	ldr	r0, [r4, #4]
    9a04:	2100      	movs	r1, #0
    9a06:	f820 1fba 	strh.w	r1, [r0, #186]!
    9a0a:	2101      	movs	r1, #1
    9a0c:	7081      	strb	r1, [r0, #2]
    9a0e:	2102      	movs	r1, #2
    9a10:	f800 1c34 	strb.w	r1, [r0, #-52]
    9a14:	2000      	movs	r0, #0
    9a16:	bd10      	pop	{r4, pc}
    9a18:	2001      	movs	r0, #1
    9a1a:	bd10      	pop	{r4, pc}
    9a1c:	20000104 	.word	0x20000104
    9a20:	b510      	push	{r4, lr}
    9a22:	4c09      	ldr	r4, [pc, #36]	; (9a48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf54>)
    9a24:	2300      	movs	r3, #0
    9a26:	2109      	movs	r1, #9
    9a28:	6860      	ldr	r0, [r4, #4]
    9a2a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9a2e:	3078      	adds	r0, #120	; 0x78
    9a30:	f003 ffac 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a34:	2800      	cmp	r0, #0
    9a36:	d006      	beq.n	9a46 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf52>
    9a38:	6861      	ldr	r1, [r4, #4]
    9a3a:	2000      	movs	r0, #0
    9a3c:	f801 0fac 	strb.w	r0, [r1, #172]!
    9a40:	7308      	strb	r0, [r1, #12]
    9a42:	f801 0c27 	strb.w	r0, [r1, #-39]
    9a46:	bd10      	pop	{r4, pc}
    9a48:	20000104 	.word	0x20000104
    9a4c:	4807      	ldr	r0, [pc, #28]	; (9a6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf78>)
    9a4e:	6840      	ldr	r0, [r0, #4]
    9a50:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9a54:	290f      	cmp	r1, #15
    9a56:	d001      	beq.n	9a5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf68>
    9a58:	2002      	movs	r0, #2
    9a5a:	4770      	bx	lr
    9a5c:	2100      	movs	r1, #0
    9a5e:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    9a62:	2112      	movs	r1, #18
    9a64:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    9a68:	2000      	movs	r0, #0
    9a6a:	4770      	bx	lr
    9a6c:	20000104 	.word	0x20000104
    9a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a72:	4c42      	ldr	r4, [pc, #264]	; (9b7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1088>)
    9a74:	2600      	movs	r6, #0
    9a76:	b087      	sub	sp, #28
    9a78:	6860      	ldr	r0, [r4, #4]
    9a7a:	4633      	mov	r3, r6
    9a7c:	4631      	mov	r1, r6
    9a7e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9a82:	3078      	adds	r0, #120	; 0x78
    9a84:	f003 ff82 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a88:	b180      	cbz	r0, 9aac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfb8>
    9a8a:	6860      	ldr	r0, [r4, #4]
    9a8c:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9a90:	2823      	cmp	r0, #35	; 0x23
    9a92:	d00e      	beq.n	9ab2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    9a94:	2824      	cmp	r0, #36	; 0x24
    9a96:	d00c      	beq.n	9ab2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    9a98:	4668      	mov	r0, sp
    9a9a:	f7fa ff25 	bl	48e8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    9a9e:	b150      	cbz	r0, 9ab6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc2>
    9aa0:	9800      	ldr	r0, [sp, #0]
    9aa2:	a901      	add	r1, sp, #4
    9aa4:	78c0      	ldrb	r0, [r0, #3]
    9aa6:	f88d 0004 	strb.w	r0, [sp, #4]
    9aaa:	e005      	b.n	9ab8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc4>
    9aac:	2001      	movs	r0, #1
    9aae:	b007      	add	sp, #28
    9ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ab2:	2020      	movs	r0, #32
    9ab4:	e7fb      	b.n	9aae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9ab6:	2100      	movs	r1, #0
    9ab8:	6860      	ldr	r0, [r4, #4]
    9aba:	ab04      	add	r3, sp, #16
    9abc:	2216      	movs	r2, #22
    9abe:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9ac2:	f004 f81f 	bl	db04 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    9ac6:	2700      	movs	r7, #0
    9ac8:	2501      	movs	r5, #1
    9aca:	b178      	cbz	r0, 9aec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xff8>
    9acc:	6860      	ldr	r0, [r4, #4]
    9ace:	f89d 1010 	ldrb.w	r1, [sp, #16]
    9ad2:	2216      	movs	r2, #22
    9ad4:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
    9ad8:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
    9adc:	2119      	movs	r1, #25
    9ade:	f800 1f86 	strb.w	r1, [r0, #134]!
    9ae2:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9ae6:	8687      	strh	r7, [r0, #52]	; 0x34
    9ae8:	2000      	movs	r0, #0
    9aea:	e7e0      	b.n	9aae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9aec:	68e0      	ldr	r0, [r4, #12]
    9aee:	f004 f997 	bl	de20 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9af2:	b1a8      	cbz	r0, 9b20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x102c>
    9af4:	68e1      	ldr	r1, [r4, #12]
    9af6:	7908      	ldrb	r0, [r1, #4]
    9af8:	f000 0207 	and.w	r2, r0, #7
    9afc:	6860      	ldr	r0, [r4, #4]
    9afe:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    9b02:	7949      	ldrb	r1, [r1, #5]
    9b04:	f001 0107 	and.w	r1, r1, #7
    9b08:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    9b0c:	f890 313f 	ldrb.w	r3, [r0, #319]	; 0x13f
    9b10:	f88d 3018 	strb.w	r3, [sp, #24]
    9b14:	9b06      	ldr	r3, [sp, #24]
    9b16:	9301      	str	r3, [sp, #4]
    9b18:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9b1c:	bb23      	cbnz	r3, 9b68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9b1e:	e004      	b.n	9b2a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1036>
    9b20:	2000      	movs	r0, #0
    9b22:	f7ff fe8d 	bl	9840 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9b26:	4606      	mov	r6, r0
    9b28:	e025      	b.n	9b76 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1082>
    9b2a:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    9b2e:	2b01      	cmp	r3, #1
    9b30:	d01a      	beq.n	9b68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9b32:	f890 c06b 	ldrb.w	ip, [r0, #107]	; 0x6b
    9b36:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    9b3a:	4594      	cmp	ip, r2
    9b3c:	d106      	bne.n	9b4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    9b3e:	781a      	ldrb	r2, [r3, #0]
    9b40:	428a      	cmp	r2, r1
    9b42:	d103      	bne.n	9b4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    9b44:	2102      	movs	r1, #2
    9b46:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
    9b4a:	e00d      	b.n	9b68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9b4c:	f500 71d6 	add.w	r1, r0, #428	; 0x1ac
    9b50:	8802      	ldrh	r2, [r0, #0]
    9b52:	f821 2902 	strh.w	r2, [r1], #-2
    9b56:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    9b5a:	710a      	strb	r2, [r1, #4]
    9b5c:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    9b60:	7148      	strb	r0, [r1, #5]
    9b62:	700d      	strb	r5, [r1, #0]
    9b64:	f000 fcfa 	bl	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9b68:	6860      	ldr	r0, [r4, #4]
    9b6a:	2121      	movs	r1, #33	; 0x21
    9b6c:	f800 1f86 	strb.w	r1, [r0, #134]!
    9b70:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9b74:	8687      	strh	r7, [r0, #52]	; 0x34
    9b76:	4630      	mov	r0, r6
    9b78:	e799      	b.n	9aae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9b7a:	0000      	.short	0x0000
    9b7c:	20000104 	.word	0x20000104
    9b80:	b570      	push	{r4, r5, r6, lr}
    9b82:	4c18      	ldr	r4, [pc, #96]	; (9be4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10f0>)
    9b84:	6860      	ldr	r0, [r4, #4]
    9b86:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9b8a:	281f      	cmp	r0, #31
    9b8c:	d001      	beq.n	9b92 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x109e>
    9b8e:	2001      	movs	r0, #1
    9b90:	bd70      	pop	{r4, r5, r6, pc}
    9b92:	68e0      	ldr	r0, [r4, #12]
    9b94:	f004 f94e 	bl	de34 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    9b98:	b1d8      	cbz	r0, 9bd2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10de>
    9b9a:	68e0      	ldr	r0, [r4, #12]
    9b9c:	2201      	movs	r2, #1
    9b9e:	7901      	ldrb	r1, [r0, #4]
    9ba0:	7940      	ldrb	r0, [r0, #5]
    9ba2:	f001 0107 	and.w	r1, r1, #7
    9ba6:	f361 0507 	bfi	r5, r1, #0, #8
    9baa:	4629      	mov	r1, r5
    9bac:	f000 0007 	and.w	r0, r0, #7
    9bb0:	f360 210f 	bfi	r1, r0, #8, #8
    9bb4:	6860      	ldr	r0, [r4, #4]
    9bb6:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
    9bba:	2200      	movs	r2, #0
    9bbc:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
    9bc0:	2223      	movs	r2, #35	; 0x23
    9bc2:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    9bc6:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    9bca:	f7ff fdb9 	bl	9740 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    9bce:	2000      	movs	r0, #0
    9bd0:	bd70      	pop	{r4, r5, r6, pc}
    9bd2:	2001      	movs	r0, #1
    9bd4:	f7ff fe34 	bl	9840 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9bd8:	4604      	mov	r4, r0
    9bda:	201e      	movs	r0, #30
    9bdc:	f7ff fd6a 	bl	96b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9be0:	4620      	mov	r0, r4
    9be2:	bd70      	pop	{r4, r5, r6, pc}
    9be4:	20000104 	.word	0x20000104
    9be8:	b570      	push	{r4, r5, r6, lr}
    9bea:	4d07      	ldr	r5, [pc, #28]	; (9c08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1114>)
    9bec:	2400      	movs	r4, #0
    9bee:	68e8      	ldr	r0, [r5, #12]
    9bf0:	f004 f92a 	bl	de48 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9bf4:	2803      	cmp	r0, #3
    9bf6:	d105      	bne.n	9c04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1110>
    9bf8:	68e8      	ldr	r0, [r5, #12]
    9bfa:	f004 f927 	bl	de4c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9bfe:	f000 f805 	bl	9c0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    9c02:	4604      	mov	r4, r0
    9c04:	4620      	mov	r0, r4
    9c06:	bd70      	pop	{r4, r5, r6, pc}
    9c08:	20000104 	.word	0x20000104
    9c0c:	b570      	push	{r4, r5, r6, lr}
    9c0e:	4d18      	ldr	r5, [pc, #96]	; (9c70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x117c>)
    9c10:	6869      	ldr	r1, [r5, #4]
    9c12:	f891 2085 	ldrb.w	r2, [r1, #133]	; 0x85
    9c16:	2a16      	cmp	r2, #22
    9c18:	d001      	beq.n	9c1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x112a>
    9c1a:	2a13      	cmp	r2, #19
    9c1c:	d102      	bne.n	9c24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1130>
    9c1e:	f891 20be 	ldrb.w	r2, [r1, #190]	; 0xbe
    9c22:	b10a      	cbz	r2, 9c28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1134>
    9c24:	2002      	movs	r0, #2
    9c26:	bd70      	pop	{r4, r5, r6, pc}
    9c28:	f881 00f8 	strb.w	r0, [r1, #248]	; 0xf8
    9c2c:	2400      	movs	r4, #0
    9c2e:	f881 40bd 	strb.w	r4, [r1, #189]	; 0xbd
    9c32:	f881 40b8 	strb.w	r4, [r1, #184]	; 0xb8
    9c36:	f891 21d2 	ldrb.w	r2, [r1, #466]	; 0x1d2
    9c3a:	b122      	cbz	r2, 9c46 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1152>
    9c3c:	f240 21eb 	movw	r1, #747	; 0x2eb
    9c40:	2036      	movs	r0, #54	; 0x36
    9c42:	f7fa f857 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c46:	880a      	ldrh	r2, [r1, #0]
    9c48:	f8a1 21d6 	strh.w	r2, [r1, #470]	; 0x1d6
    9c4c:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
    9c50:	f881 41d8 	strb.w	r4, [r1, #472]	; 0x1d8
    9c54:	200d      	movs	r0, #13
    9c56:	f881 01d2 	strb.w	r0, [r1, #466]	; 0x1d2
    9c5a:	f881 415a 	strb.w	r4, [r1, #346]	; 0x15a
    9c5e:	f000 fb9b 	bl	a398 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    9c62:	f000 fc7b 	bl	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9c66:	6868      	ldr	r0, [r5, #4]
    9c68:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    9c6c:	2000      	movs	r0, #0
    9c6e:	bd70      	pop	{r4, r5, r6, pc}
    9c70:	20000104 	.word	0x20000104
    9c74:	4802      	ldr	r0, [pc, #8]	; (9c80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x118c>)
    9c76:	68c0      	ldr	r0, [r0, #12]
    9c78:	7900      	ldrb	r0, [r0, #4]
    9c7a:	f7ff bfc7 	b.w	9c0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    9c7e:	0000      	.short	0x0000
    9c80:	20000104 	.word	0x20000104
    9c84:	b510      	push	{r4, lr}
    9c86:	4c0e      	ldr	r4, [pc, #56]	; (9cc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11cc>)
    9c88:	6860      	ldr	r0, [r4, #4]
    9c8a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9c8e:	2916      	cmp	r1, #22
    9c90:	d001      	beq.n	9c96 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11a2>
    9c92:	2002      	movs	r0, #2
    9c94:	bd10      	pop	{r4, pc}
    9c96:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    9c9a:	f200 1175 	addw	r1, r0, #373	; 0x175
    9c9e:	2200      	movs	r2, #0
    9ca0:	f200 1065 	addw	r0, r0, #357	; 0x165
    9ca4:	f003 fdf4 	bl	d890 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9ca8:	6860      	ldr	r0, [r4, #4]
    9caa:	2100      	movs	r1, #0
    9cac:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    9cb0:	2101      	movs	r1, #1
    9cb2:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    9cb6:	2118      	movs	r1, #24
    9cb8:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    9cbc:	2000      	movs	r0, #0
    9cbe:	bd10      	pop	{r4, pc}
    9cc0:	20000104 	.word	0x20000104
    9cc4:	b570      	push	{r4, r5, r6, lr}
    9cc6:	4d1b      	ldr	r5, [pc, #108]	; (9d34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1240>)
    9cc8:	6868      	ldr	r0, [r5, #4]
    9cca:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9cce:	291a      	cmp	r1, #26
    9cd0:	d001      	beq.n	9cd6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e2>
    9cd2:	2002      	movs	r0, #2
    9cd4:	bd70      	pop	{r4, r5, r6, pc}
    9cd6:	2400      	movs	r4, #0
    9cd8:	f880 40bd 	strb.w	r4, [r0, #189]	; 0xbd
    9cdc:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    9ce0:	f880 415a 	strb.w	r4, [r0, #346]	; 0x15a
    9ce4:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
    9ce8:	b121      	cbz	r1, 9cf4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1200>
    9cea:	f240 3113 	movw	r1, #787	; 0x313
    9cee:	2036      	movs	r0, #54	; 0x36
    9cf0:	f7fa f800 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cf4:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    9cf8:	b141      	cbz	r1, 9d0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1218>
    9cfa:	f880 40be 	strb.w	r4, [r0, #190]	; 0xbe
    9cfe:	8801      	ldrh	r1, [r0, #0]
    9d00:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    9d04:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    9d08:	210e      	movs	r1, #14
    9d0a:	e008      	b.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x122a>
    9d0c:	8801      	ldrh	r1, [r0, #0]
    9d0e:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    9d12:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    9d16:	2101      	movs	r1, #1
    9d18:	f880 11d8 	strb.w	r1, [r0, #472]	; 0x1d8
    9d1c:	210d      	movs	r1, #13
    9d1e:	f880 11d2 	strb.w	r1, [r0, #466]	; 0x1d2
    9d22:	f000 fb39 	bl	a398 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    9d26:	f000 fc19 	bl	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9d2a:	6868      	ldr	r0, [r5, #4]
    9d2c:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    9d30:	2000      	movs	r0, #0
    9d32:	bd70      	pop	{r4, r5, r6, pc}
    9d34:	20000104 	.word	0x20000104
    9d38:	b510      	push	{r4, lr}
    9d3a:	4c0d      	ldr	r4, [pc, #52]	; (9d70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x127c>)
    9d3c:	2300      	movs	r3, #0
    9d3e:	2101      	movs	r1, #1
    9d40:	6860      	ldr	r0, [r4, #4]
    9d42:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9d46:	3078      	adds	r0, #120	; 0x78
    9d48:	f003 fe20 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d4c:	b108      	cbz	r0, 9d52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125e>
    9d4e:	2000      	movs	r0, #0
    9d50:	bd10      	pop	{r4, pc}
    9d52:	68e0      	ldr	r0, [r4, #12]
    9d54:	f004 f844 	bl	dde0 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    9d58:	6861      	ldr	r1, [r4, #4]
    9d5a:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    9d5e:	2007      	movs	r0, #7
    9d60:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    9d64:	2000      	movs	r0, #0
    9d66:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    9d6a:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    9d6e:	e7ee      	b.n	9d4e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125a>
    9d70:	20000104 	.word	0x20000104
    9d74:	b570      	push	{r4, r5, r6, lr}
    9d76:	4c25      	ldr	r4, [pc, #148]	; (9e0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1318>)
    9d78:	2600      	movs	r6, #0
    9d7a:	2109      	movs	r1, #9
    9d7c:	6860      	ldr	r0, [r4, #4]
    9d7e:	4633      	mov	r3, r6
    9d80:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9d84:	3078      	adds	r0, #120	; 0x78
    9d86:	f003 fe01 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d8a:	2500      	movs	r5, #0
    9d8c:	b118      	cbz	r0, 9d96 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12a2>
    9d8e:	68e0      	ldr	r0, [r4, #12]
    9d90:	7900      	ldrb	r0, [r0, #4]
    9d92:	2812      	cmp	r0, #18
    9d94:	d011      	beq.n	9dba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12c6>
    9d96:	6860      	ldr	r0, [r4, #4]
    9d98:	210a      	movs	r1, #10
    9d9a:	2300      	movs	r3, #0
    9d9c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9da0:	3078      	adds	r0, #120	; 0x78
    9da2:	f003 fdf3 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9da6:	b118      	cbz	r0, 9db0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12bc>
    9da8:	68e0      	ldr	r0, [r4, #12]
    9daa:	7900      	ldrb	r0, [r0, #4]
    9dac:	2814      	cmp	r0, #20
    9dae:	d008      	beq.n	9dc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ce>
    9db0:	68e0      	ldr	r0, [r4, #12]
    9db2:	7900      	ldrb	r0, [r0, #4]
    9db4:	2816      	cmp	r0, #22
    9db6:	d012      	beq.n	9dde <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ea>
    9db8:	e026      	b.n	9e08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9dba:	f7ff fe31 	bl	9a20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf2c>
    9dbe:	4606      	mov	r6, r0
    9dc0:	e022      	b.n	9e08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9dc2:	6860      	ldr	r0, [r4, #4]
    9dc4:	2105      	movs	r1, #5
    9dc6:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9dca:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    9dce:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9dd2:	30c6      	adds	r0, #198	; 0xc6
    9dd4:	f004 fc81 	bl	e6da <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    9dd8:	f7ff f8c0 	bl	8f5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    9ddc:	e014      	b.n	9e08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9dde:	6860      	ldr	r0, [r4, #4]
    9de0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9de4:	291f      	cmp	r1, #31
    9de6:	d10f      	bne.n	9e08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9de8:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9dec:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9df0:	2108      	movs	r1, #8
    9df2:	30c6      	adds	r0, #198	; 0xc6
    9df4:	f004 fc71 	bl	e6da <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    9df8:	6860      	ldr	r0, [r4, #4]
    9dfa:	210b      	movs	r1, #11
    9dfc:	30c6      	adds	r0, #198	; 0xc6
    9dfe:	f004 fc6c 	bl	e6da <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    9e02:	201a      	movs	r0, #26
    9e04:	f7ff fc56 	bl	96b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9e08:	4630      	mov	r0, r6
    9e0a:	bd70      	pop	{r4, r5, r6, pc}
    9e0c:	20000104 	.word	0x20000104
    9e10:	b570      	push	{r4, r5, r6, lr}
    9e12:	4c32      	ldr	r4, [pc, #200]	; (9edc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e8>)
    9e14:	2300      	movs	r3, #0
    9e16:	4619      	mov	r1, r3
    9e18:	6860      	ldr	r0, [r4, #4]
    9e1a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9e1e:	3078      	adds	r0, #120	; 0x78
    9e20:	f003 fdb4 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e24:	b940      	cbnz	r0, 9e38 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1344>
    9e26:	6860      	ldr	r0, [r4, #4]
    9e28:	2300      	movs	r3, #0
    9e2a:	2108      	movs	r1, #8
    9e2c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9e30:	3078      	adds	r0, #120	; 0x78
    9e32:	f003 fdab 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e36:	b1f8      	cbz	r0, 9e78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1384>
    9e38:	6860      	ldr	r0, [r4, #4]
    9e3a:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    9e3e:	0780      	lsls	r0, r0, #30
    9e40:	d412      	bmi.n	9e68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1374>
    9e42:	68e0      	ldr	r0, [r4, #12]
    9e44:	f003 ffce 	bl	dde4 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    9e48:	6861      	ldr	r1, [r4, #4]
    9e4a:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
    9e4e:	68e0      	ldr	r0, [r4, #12]
    9e50:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    9e54:	f8a1 20c2 	strh.w	r2, [r1, #194]	; 0xc2
    9e58:	8840      	ldrh	r0, [r0, #2]
    9e5a:	f8a1 00c4 	strh.w	r0, [r1, #196]	; 0xc4
    9e5e:	f811 0fc0 	ldrb.w	r0, [r1, #192]!
    9e62:	f040 0002 	orr.w	r0, r0, #2
    9e66:	7008      	strb	r0, [r1, #0]
    9e68:	6860      	ldr	r0, [r4, #4]
    9e6a:	f04f 0500 	mov.w	r5, #0
    9e6e:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    9e72:	07c9      	lsls	r1, r1, #31
    9e74:	d002      	beq.n	9e7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1388>
    9e76:	e010      	b.n	9e9a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13a6>
    9e78:	2001      	movs	r0, #1
    9e7a:	bd70      	pop	{r4, r5, r6, pc}
    9e7c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9e80:	2300      	movs	r3, #0
    9e82:	4619      	mov	r1, r3
    9e84:	3078      	adds	r0, #120	; 0x78
    9e86:	f003 fd81 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e8a:	b160      	cbz	r0, 9ea6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13b2>
    9e8c:	6860      	ldr	r0, [r4, #4]
    9e8e:	2101      	movs	r1, #1
    9e90:	f800 1f86 	strb.w	r1, [r0, #134]!
    9e94:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    9e98:	8685      	strh	r5, [r0, #52]	; 0x34
    9e9a:	6860      	ldr	r0, [r4, #4]
    9e9c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9ea0:	2901      	cmp	r1, #1
    9ea2:	d005      	beq.n	9eb0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13bc>
    9ea4:	e00a      	b.n	9ebc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13c8>
    9ea6:	f240 314e 	movw	r1, #846	; 0x34e
    9eaa:	2036      	movs	r0, #54	; 0x36
    9eac:	f7f9 ff22 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9eb0:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9eb4:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9eb8:	f000 fb50 	bl	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9ebc:	6860      	ldr	r0, [r4, #4]
    9ebe:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    9ec2:	b149      	cbz	r1, 9ed8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    9ec4:	f880 5158 	strb.w	r5, [r0, #344]	; 0x158
    9ec8:	f000 fb48 	bl	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9ecc:	6860      	ldr	r0, [r4, #4]
    9ece:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9ed2:	b909      	cbnz	r1, 9ed8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    9ed4:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9ed8:	2000      	movs	r0, #0
    9eda:	bd70      	pop	{r4, r5, r6, pc}
    9edc:	20000104 	.word	0x20000104
    9ee0:	b510      	push	{r4, lr}
    9ee2:	4c0a      	ldr	r4, [pc, #40]	; (9f0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1418>)
    9ee4:	2300      	movs	r3, #0
    9ee6:	4619      	mov	r1, r3
    9ee8:	6860      	ldr	r0, [r4, #4]
    9eea:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9eee:	3078      	adds	r0, #120	; 0x78
    9ef0:	f003 fd4c 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ef4:	b120      	cbz	r0, 9f00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140c>
    9ef6:	6861      	ldr	r1, [r4, #4]
    9ef8:	200c      	movs	r0, #12
    9efa:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9efe:	bd10      	pop	{r4, pc}
    9f00:	f240 51fa 	movw	r1, #1530	; 0x5fa
    9f04:	2036      	movs	r0, #54	; 0x36
    9f06:	f7f9 fef5 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f0a:	0000      	.short	0x0000
    9f0c:	20000104 	.word	0x20000104
    9f10:	b510      	push	{r4, lr}
    9f12:	4c0a      	ldr	r4, [pc, #40]	; (9f3c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1448>)
    9f14:	2300      	movs	r3, #0
    9f16:	4619      	mov	r1, r3
    9f18:	6860      	ldr	r0, [r4, #4]
    9f1a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f1e:	3078      	adds	r0, #120	; 0x78
    9f20:	f003 fd34 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f24:	b120      	cbz	r0, 9f30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x143c>
    9f26:	6861      	ldr	r1, [r4, #4]
    9f28:	200d      	movs	r0, #13
    9f2a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9f2e:	bd10      	pop	{r4, pc}
    9f30:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    9f34:	2036      	movs	r0, #54	; 0x36
    9f36:	f7f9 fedd 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f3a:	0000      	.short	0x0000
    9f3c:	20000104 	.word	0x20000104
    9f40:	b510      	push	{r4, lr}
    9f42:	4c0d      	ldr	r4, [pc, #52]	; (9f78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1484>)
    9f44:	2300      	movs	r3, #0
    9f46:	4619      	mov	r1, r3
    9f48:	6860      	ldr	r0, [r4, #4]
    9f4a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f4e:	3078      	adds	r0, #120	; 0x78
    9f50:	f003 fd1c 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f54:	b918      	cbnz	r0, 9f5e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x146a>
    9f56:	6860      	ldr	r0, [r4, #4]
    9f58:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    9f5c:	b138      	cbz	r0, 9f6e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x147a>
    9f5e:	6860      	ldr	r0, [r4, #4]
    9f60:	2101      	movs	r1, #1
    9f62:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    9f66:	2113      	movs	r1, #19
    9f68:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    9f6c:	bd10      	pop	{r4, pc}
    9f6e:	f240 6115 	movw	r1, #1557	; 0x615
    9f72:	2036      	movs	r0, #54	; 0x36
    9f74:	f7f9 febe 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f78:	20000104 	.word	0x20000104
    9f7c:	b510      	push	{r4, lr}
    9f7e:	4c0a      	ldr	r4, [pc, #40]	; (9fa8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14b4>)
    9f80:	2300      	movs	r3, #0
    9f82:	4619      	mov	r1, r3
    9f84:	6860      	ldr	r0, [r4, #4]
    9f86:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f8a:	3078      	adds	r0, #120	; 0x78
    9f8c:	f003 fcfe 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f90:	b120      	cbz	r0, 9f9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a8>
    9f92:	6861      	ldr	r1, [r4, #4]
    9f94:	2004      	movs	r0, #4
    9f96:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9f9a:	bd10      	pop	{r4, pc}
    9f9c:	f240 51f4 	movw	r1, #1524	; 0x5f4
    9fa0:	2036      	movs	r0, #54	; 0x36
    9fa2:	f7f9 fea7 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fa6:	0000      	.short	0x0000
    9fa8:	20000104 	.word	0x20000104
    9fac:	b510      	push	{r4, lr}
    9fae:	4c0a      	ldr	r4, [pc, #40]	; (9fd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14e4>)
    9fb0:	2300      	movs	r3, #0
    9fb2:	4619      	mov	r1, r3
    9fb4:	6860      	ldr	r0, [r4, #4]
    9fb6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9fba:	3078      	adds	r0, #120	; 0x78
    9fbc:	f003 fce6 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fc0:	b120      	cbz	r0, 9fcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14d8>
    9fc2:	6861      	ldr	r1, [r4, #4]
    9fc4:	201c      	movs	r0, #28
    9fc6:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9fca:	bd10      	pop	{r4, pc}
    9fcc:	f240 614c 	movw	r1, #1612	; 0x64c
    9fd0:	2036      	movs	r0, #54	; 0x36
    9fd2:	f7f9 fe8f 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fd6:	0000      	.short	0x0000
    9fd8:	20000104 	.word	0x20000104
    9fdc:	b510      	push	{r4, lr}
    9fde:	4c0a      	ldr	r4, [pc, #40]	; (a008 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1514>)
    9fe0:	2300      	movs	r3, #0
    9fe2:	4619      	mov	r1, r3
    9fe4:	6860      	ldr	r0, [r4, #4]
    9fe6:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9fea:	3078      	adds	r0, #120	; 0x78
    9fec:	f003 fcce 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ff0:	b120      	cbz	r0, 9ffc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1508>
    9ff2:	6861      	ldr	r1, [r4, #4]
    9ff4:	2000      	movs	r0, #0
    9ff6:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    9ffa:	bd10      	pop	{r4, pc}
    9ffc:	f240 6153 	movw	r1, #1619	; 0x653
    a000:	2036      	movs	r0, #54	; 0x36
    a002:	f7f9 fe77 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a006:	0000      	.short	0x0000
    a008:	20000104 	.word	0x20000104
    a00c:	b510      	push	{r4, lr}
    a00e:	4c0a      	ldr	r4, [pc, #40]	; (a038 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1544>)
    a010:	2300      	movs	r3, #0
    a012:	4619      	mov	r1, r3
    a014:	6860      	ldr	r0, [r4, #4]
    a016:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a01a:	3078      	adds	r0, #120	; 0x78
    a01c:	f003 fcb6 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a020:	b120      	cbz	r0, a02c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1538>
    a022:	6861      	ldr	r1, [r4, #4]
    a024:	2005      	movs	r0, #5
    a026:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a02a:	bd10      	pop	{r4, pc}
    a02c:	f240 613f 	movw	r1, #1599	; 0x63f
    a030:	2036      	movs	r0, #54	; 0x36
    a032:	f7f9 fe5f 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a036:	0000      	.short	0x0000
    a038:	20000104 	.word	0x20000104
    a03c:	4902      	ldr	r1, [pc, #8]	; (a048 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1554>)
    a03e:	2000      	movs	r0, #0
    a040:	6849      	ldr	r1, [r1, #4]
    a042:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a046:	4770      	bx	lr
    a048:	20000104 	.word	0x20000104
    a04c:	b510      	push	{r4, lr}
    a04e:	4c0b      	ldr	r4, [pc, #44]	; (a07c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1588>)
    a050:	2300      	movs	r3, #0
    a052:	4619      	mov	r1, r3
    a054:	6860      	ldr	r0, [r4, #4]
    a056:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a05a:	3078      	adds	r0, #120	; 0x78
    a05c:	f003 fc96 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a060:	b138      	cbz	r0, a072 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x157e>
    a062:	6860      	ldr	r0, [r4, #4]
    a064:	2101      	movs	r1, #1
    a066:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    a06a:	210f      	movs	r1, #15
    a06c:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a070:	bd10      	pop	{r4, pc}
    a072:	f240 6106 	movw	r1, #1542	; 0x606
    a076:	2036      	movs	r0, #54	; 0x36
    a078:	f7f9 fe3c 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a07c:	20000104 	.word	0x20000104
    a080:	4809      	ldr	r0, [pc, #36]	; (a0a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15b4>)
    a082:	b510      	push	{r4, lr}
    a084:	6840      	ldr	r0, [r0, #4]
    a086:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a08a:	2912      	cmp	r1, #18
    a08c:	d004      	beq.n	a098 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15a4>
    a08e:	f240 610e 	movw	r1, #1550	; 0x60e
    a092:	2036      	movs	r0, #54	; 0x36
    a094:	f7f9 fe2e 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a098:	2101      	movs	r1, #1
    a09a:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a09e:	2111      	movs	r1, #17
    a0a0:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a0a4:	bd10      	pop	{r4, pc}
    a0a6:	0000      	.short	0x0000
    a0a8:	20000104 	.word	0x20000104
    a0ac:	b510      	push	{r4, lr}
    a0ae:	4c0a      	ldr	r4, [pc, #40]	; (a0d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15e4>)
    a0b0:	2300      	movs	r3, #0
    a0b2:	4619      	mov	r1, r3
    a0b4:	6860      	ldr	r0, [r4, #4]
    a0b6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a0ba:	3078      	adds	r0, #120	; 0x78
    a0bc:	f003 fc66 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0c0:	b120      	cbz	r0, a0cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15d8>
    a0c2:	6861      	ldr	r1, [r4, #4]
    a0c4:	201f      	movs	r0, #31
    a0c6:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a0ca:	bd10      	pop	{r4, pc}
    a0cc:	f240 615c 	movw	r1, #1628	; 0x65c
    a0d0:	2036      	movs	r0, #54	; 0x36
    a0d2:	f7f9 fe0f 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0d6:	0000      	.short	0x0000
    a0d8:	20000104 	.word	0x20000104
    a0dc:	b570      	push	{r4, r5, r6, lr}
    a0de:	4c1d      	ldr	r4, [pc, #116]	; (a154 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1660>)
    a0e0:	6860      	ldr	r0, [r4, #4]
    a0e2:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    a0e6:	b911      	cbnz	r1, a0ee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fa>
    a0e8:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    a0ec:	b179      	cbz	r1, a10e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161a>
    a0ee:	2100      	movs	r1, #0
    a0f0:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a0f4:	2224      	movs	r2, #36	; 0x24
    a0f6:	2500      	movs	r5, #0
    a0f8:	2b21      	cmp	r3, #33	; 0x21
    a0fa:	d00a      	beq.n	a112 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161e>
    a0fc:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    a100:	2b23      	cmp	r3, #35	; 0x23
    a102:	d01a      	beq.n	a13a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1646>
    a104:	f44f 61d1 	mov.w	r1, #1672	; 0x688
    a108:	2036      	movs	r0, #54	; 0x36
    a10a:	f7f9 fdf3 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a10e:	2101      	movs	r1, #1
    a110:	e7ee      	b.n	a0f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fc>
    a112:	b161      	cbz	r1, a12e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163a>
    a114:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    a118:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    a11c:	2801      	cmp	r0, #1
    a11e:	d102      	bne.n	a126 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1632>
    a120:	2000      	movs	r0, #0
    a122:	f7ff fac7 	bl	96b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a126:	6860      	ldr	r0, [r4, #4]
    a128:	f880 513e 	strb.w	r5, [r0, #318]	; 0x13e
    a12c:	e001      	b.n	a132 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163e>
    a12e:	f880 2086 	strb.w	r2, [r0, #134]	; 0x86
    a132:	6860      	ldr	r0, [r4, #4]
    a134:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    a138:	bd70      	pop	{r4, r5, r6, pc}
    a13a:	b129      	cbz	r1, a148 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1654>
    a13c:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a140:	2000      	movs	r0, #0
    a142:	f7ff fab7 	bl	96b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a146:	e001      	b.n	a14c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1658>
    a148:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    a14c:	6860      	ldr	r0, [r4, #4]
    a14e:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a152:	bd70      	pop	{r4, r5, r6, pc}
    a154:	20000104 	.word	0x20000104
    a158:	4903      	ldr	r1, [pc, #12]	; (a168 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1674>)
    a15a:	2000      	movs	r0, #0
    a15c:	6849      	ldr	r1, [r1, #4]
    a15e:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a162:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a166:	4770      	bx	lr
    a168:	20000104 	.word	0x20000104
    a16c:	4807      	ldr	r0, [pc, #28]	; (a18c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1698>)
    a16e:	b510      	push	{r4, lr}
    a170:	6840      	ldr	r0, [r0, #4]
    a172:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a176:	2918      	cmp	r1, #24
    a178:	d004      	beq.n	a184 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1690>
    a17a:	f240 611e 	movw	r1, #1566	; 0x61e
    a17e:	2036      	movs	r0, #54	; 0x36
    a180:	f7f9 fdb8 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a184:	211a      	movs	r1, #26
    a186:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a18a:	bd10      	pop	{r4, pc}
    a18c:	20000104 	.word	0x20000104
    a190:	b510      	push	{r4, lr}
    a192:	4c0a      	ldr	r4, [pc, #40]	; (a1bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c8>)
    a194:	2300      	movs	r3, #0
    a196:	2101      	movs	r1, #1
    a198:	6860      	ldr	r0, [r4, #4]
    a19a:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a19e:	3078      	adds	r0, #120	; 0x78
    a1a0:	f003 fbf4 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1a4:	2800      	cmp	r0, #0
    a1a6:	d108      	bne.n	a1ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c6>
    a1a8:	6860      	ldr	r0, [r4, #4]
    a1aa:	2108      	movs	r1, #8
    a1ac:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    a1b0:	2100      	movs	r1, #0
    a1b2:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    a1b6:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    a1ba:	bd10      	pop	{r4, pc}
    a1bc:	20000104 	.word	0x20000104
    a1c0:	b570      	push	{r4, r5, r6, lr}
    a1c2:	4c0e      	ldr	r4, [pc, #56]	; (a1fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1708>)
    a1c4:	2300      	movs	r3, #0
    a1c6:	4619      	mov	r1, r3
    a1c8:	6860      	ldr	r0, [r4, #4]
    a1ca:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a1ce:	3078      	adds	r0, #120	; 0x78
    a1d0:	f003 fbdc 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1d4:	2500      	movs	r5, #0
    a1d6:	b110      	cbz	r0, a1de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16ea>
    a1d8:	6860      	ldr	r0, [r4, #4]
    a1da:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    a1de:	6860      	ldr	r0, [r4, #4]
    a1e0:	2300      	movs	r3, #0
    a1e2:	4619      	mov	r1, r3
    a1e4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a1e8:	3078      	adds	r0, #120	; 0x78
    a1ea:	f003 fbcf 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1ee:	2800      	cmp	r0, #0
    a1f0:	d002      	beq.n	a1f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1704>
    a1f2:	6860      	ldr	r0, [r4, #4]
    a1f4:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a1f8:	bd70      	pop	{r4, r5, r6, pc}
    a1fa:	0000      	.short	0x0000
    a1fc:	20000104 	.word	0x20000104
    a200:	b570      	push	{r4, r5, r6, lr}
    a202:	4d16      	ldr	r5, [pc, #88]	; (a25c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1768>)
    a204:	f04f 0400 	mov.w	r4, #0
    a208:	6868      	ldr	r0, [r5, #4]
    a20a:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    a20e:	0789      	lsls	r1, r1, #30
    a210:	d411      	bmi.n	a236 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1742>
    a212:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a216:	2300      	movs	r3, #0
    a218:	4619      	mov	r1, r3
    a21a:	3078      	adds	r0, #120	; 0x78
    a21c:	f003 fbb6 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a220:	b120      	cbz	r0, a22c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1738>
    a222:	6869      	ldr	r1, [r5, #4]
    a224:	2001      	movs	r0, #1
    a226:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a22a:	e008      	b.n	a23e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x174a>
    a22c:	f240 612b 	movw	r1, #1579	; 0x62b
    a230:	2036      	movs	r0, #54	; 0x36
    a232:	f7f9 fd5f 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a236:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    a23a:	f880 4158 	strb.w	r4, [r0, #344]	; 0x158
    a23e:	6868      	ldr	r0, [r5, #4]
    a240:	2300      	movs	r3, #0
    a242:	4619      	mov	r1, r3
    a244:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a248:	3078      	adds	r0, #120	; 0x78
    a24a:	f003 fb9f 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a24e:	2800      	cmp	r0, #0
    a250:	d002      	beq.n	a258 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1764>
    a252:	6868      	ldr	r0, [r5, #4]
    a254:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    a258:	bd70      	pop	{r4, r5, r6, pc}
    a25a:	0000      	.short	0x0000
    a25c:	20000104 	.word	0x20000104
    a260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a262:	4d4c      	ldr	r5, [pc, #304]	; (a394 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a0>)
    a264:	4607      	mov	r7, r0
    a266:	460e      	mov	r6, r1
    a268:	6868      	ldr	r0, [r5, #4]
    a26a:	f100 0478 	add.w	r4, r0, #120	; 0x78
    a26e:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    a272:	f88d 0000 	strb.w	r0, [sp]
    a276:	9800      	ldr	r0, [sp, #0]
    a278:	9000      	str	r0, [sp, #0]
    a27a:	f89d 0000 	ldrb.w	r0, [sp]
    a27e:	b930      	cbnz	r0, a28e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x179a>
    a280:	7c22      	ldrb	r2, [r4, #16]
    a282:	2300      	movs	r3, #0
    a284:	2101      	movs	r1, #1
    a286:	4620      	mov	r0, r4
    a288:	f003 fb80 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a28c:	b110      	cbz	r0, a294 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17a0>
    a28e:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    a290:	1c40      	adds	r0, r0, #1
    a292:	8760      	strh	r0, [r4, #58]	; 0x3a
    a294:	2001      	movs	r0, #1
    a296:	213d      	movs	r1, #61	; 0x3d
    a298:	bbf7      	cbnz	r7, a318 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1824>
    a29a:	782a      	ldrb	r2, [r5, #0]
    a29c:	2a02      	cmp	r2, #2
    a29e:	d006      	beq.n	a2ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17ba>
    a2a0:	2a01      	cmp	r2, #1
    a2a2:	d006      	beq.n	a2b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17be>
    a2a4:	b1c6      	cbz	r6, a2d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e4>
    a2a6:	06f2      	lsls	r2, r6, #27
    a2a8:	d507      	bpl.n	a2ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17c6>
    a2aa:	211e      	movs	r1, #30
    a2ac:	e043      	b.n	a336 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a2ae:	2116      	movs	r1, #22
    a2b0:	e041      	b.n	a336 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a2b2:	6869      	ldr	r1, [r5, #4]
    a2b4:	f891 112c 	ldrb.w	r1, [r1, #300]	; 0x12c
    a2b8:	e03d      	b.n	a336 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a2ba:	0732      	lsls	r2, r6, #28
    a2bc:	d43b      	bmi.n	a336 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a2be:	07b1      	lsls	r1, r6, #30
    a2c0:	d001      	beq.n	a2c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17d2>
    a2c2:	212a      	movs	r1, #42	; 0x2a
    a2c4:	e037      	b.n	a336 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a2c6:	06b1      	lsls	r1, r6, #26
    a2c8:	d404      	bmi.n	a2d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e0>
    a2ca:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    a2ce:	2036      	movs	r0, #54	; 0x36
    a2d0:	f7f9 fd10 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2d4:	2123      	movs	r1, #35	; 0x23
    a2d6:	e02e      	b.n	a336 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a2d8:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    a2dc:	b129      	cbz	r1, a2ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17f6>
    a2de:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    a2e0:	1c4a      	adds	r2, r1, #1
    a2e2:	87a2      	strh	r2, [r4, #60]	; 0x3c
    a2e4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a2e6:	4291      	cmp	r1, r2
    a2e8:	d21d      	bcs.n	a326 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a2ea:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    a2ee:	b139      	cbz	r1, a300 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x180c>
    a2f0:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    a2f4:	1c4a      	adds	r2, r1, #1
    a2f6:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    a2fa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a2fc:	4291      	cmp	r1, r2
    a2fe:	d212      	bcs.n	a326 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a300:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    a302:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    a304:	428a      	cmp	r2, r1
    a306:	d30b      	bcc.n	a320 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x182c>
    a308:	686b      	ldr	r3, [r5, #4]
    a30a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    a30e:	f88d 3000 	strb.w	r3, [sp]
    a312:	9b00      	ldr	r3, [sp, #0]
    a314:	9300      	str	r3, [sp, #0]
    a316:	e000      	b.n	a31a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1826>
    a318:	e00d      	b.n	a336 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a31a:	f89d 3000 	ldrb.w	r3, [sp]
    a31e:	b913      	cbnz	r3, a326 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a320:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    a322:	429a      	cmp	r2, r3
    a324:	d301      	bcc.n	a32a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1836>
    a326:	2122      	movs	r1, #34	; 0x22
    a328:	e005      	b.n	a336 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a32a:	7c62      	ldrb	r2, [r4, #17]
    a32c:	b1f2      	cbz	r2, a36c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1878>
    a32e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    a330:	428a      	cmp	r2, r1
    a332:	d304      	bcc.n	a33e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    a334:	2108      	movs	r1, #8
    a336:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    a33a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    a33e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    a342:	f88d 0000 	strb.w	r0, [sp]
    a346:	9800      	ldr	r0, [sp, #0]
    a348:	9000      	str	r0, [sp, #0]
    a34a:	f89d 0000 	ldrb.w	r0, [sp]
    a34e:	b1d8      	cbz	r0, a388 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1894>
    a350:	2000      	movs	r0, #0
    a352:	7360      	strb	r0, [r4, #13]
    a354:	73a0      	strb	r0, [r4, #14]
    a356:	7460      	strb	r0, [r4, #17]
    a358:	2102      	movs	r1, #2
    a35a:	6868      	ldr	r0, [r5, #4]
    a35c:	f7fd fb8e 	bl	7a7c <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a360:	6868      	ldr	r0, [r5, #4]
    a362:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    a366:	2901      	cmp	r1, #1
    a368:	d005      	beq.n	a376 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1882>
    a36a:	e009      	b.n	a380 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x188c>
    a36c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    a36e:	2906      	cmp	r1, #6
    a370:	d3e5      	bcc.n	a33e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    a372:	213e      	movs	r1, #62	; 0x3e
    a374:	e7df      	b.n	a336 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a376:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    a37a:	7801      	ldrb	r1, [r0, #0]
    a37c:	1e49      	subs	r1, r1, #1
    a37e:	7001      	strb	r1, [r0, #0]
    a380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a384:	f000 b8ea 	b.w	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a388:	6868      	ldr	r0, [r5, #4]
    a38a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a38e:	2100      	movs	r1, #0
    a390:	f7fd bb74 	b.w	7a7c <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a394:	20000104 	.word	0x20000104
    a398:	4804      	ldr	r0, [pc, #16]	; (a3ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18b8>)
    a39a:	b510      	push	{r4, lr}
    a39c:	6840      	ldr	r0, [r0, #4]
    a39e:	8800      	ldrh	r0, [r0, #0]
    a3a0:	f7fa f8a6 	bl	44f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a3a8:	f003 b83a 	b.w	d420 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a3ac:	20000104 	.word	0x20000104
    a3b0:	4a19      	ldr	r2, [pc, #100]	; (a418 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1924>)
    a3b2:	2901      	cmp	r1, #1
    a3b4:	6852      	ldr	r2, [r2, #4]
    a3b6:	d010      	beq.n	a3da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e6>
    a3b8:	2100      	movs	r1, #0
    a3ba:	b1c8      	cbz	r0, a3f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fc>
    a3bc:	2801      	cmp	r0, #1
    a3be:	d022      	beq.n	a406 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1912>
    a3c0:	2803      	cmp	r0, #3
    a3c2:	d109      	bne.n	a3d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a3c4:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    a3c8:	2813      	cmp	r0, #19
    a3ca:	d005      	beq.n	a3d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a3cc:	2816      	cmp	r0, #22
    a3ce:	d003      	beq.n	a3d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a3d0:	2818      	cmp	r0, #24
    a3d2:	d001      	beq.n	a3d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a3d4:	f882 115a 	strb.w	r1, [r2, #346]	; 0x15a
    a3d8:	4770      	bx	lr
    a3da:	f892 00fc 	ldrb.w	r0, [r2, #252]	; 0xfc
    a3de:	2801      	cmp	r0, #1
    a3e0:	d0fa      	beq.n	a3d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a3e2:	bf00      	nop
    a3e4:	f8d2 0128 	ldr.w	r0, [r2, #296]	; 0x128
    a3e8:	7801      	ldrb	r1, [r0, #0]
    a3ea:	1e49      	subs	r1, r1, #1
    a3ec:	7001      	strb	r1, [r0, #0]
    a3ee:	4770      	bx	lr
    a3f0:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    a3f4:	f8b2 3146 	ldrh.w	r3, [r2, #326]	; 0x146
    a3f8:	1ac0      	subs	r0, r0, r3
    a3fa:	b200      	sxth	r0, r0
    a3fc:	2800      	cmp	r0, #0
    a3fe:	dbf6      	blt.n	a3ee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fa>
    a400:	f882 1144 	strb.w	r1, [r2, #324]	; 0x144
    a404:	4770      	bx	lr
    a406:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    a40a:	f8b2 1130 	ldrh.w	r1, [r2, #304]	; 0x130
    a40e:	1a40      	subs	r0, r0, r1
    a410:	b200      	sxth	r0, r0
    a412:	2800      	cmp	r0, #0
    a414:	dae6      	bge.n	a3e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18f0>
    a416:	4770      	bx	lr
    a418:	20000104 	.word	0x20000104

0000a41c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    a41c:	b510      	push	{r4, lr}
    a41e:	6941      	ldr	r1, [r0, #20]
    a420:	b119      	cbz	r1, a42a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    a422:	6842      	ldr	r2, [r0, #4]
    a424:	684b      	ldr	r3, [r1, #4]
    a426:	429a      	cmp	r2, r3
    a428:	d203      	bcs.n	a432 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    a42a:	21c1      	movs	r1, #193	; 0xc1
    a42c:	2037      	movs	r0, #55	; 0x37
    a42e:	f7f9 fc61 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a432:	6902      	ldr	r2, [r0, #16]
    a434:	610a      	str	r2, [r1, #16]
    a436:	68c3      	ldr	r3, [r0, #12]
    a438:	60cb      	str	r3, [r1, #12]
    a43a:	b10a      	cbz	r2, a440 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    a43c:	60d1      	str	r1, [r2, #12]
    a43e:	e001      	b.n	a444 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    a440:	4a06      	ldr	r2, [pc, #24]	; (a45c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    a442:	6011      	str	r1, [r2, #0]
    a444:	68ca      	ldr	r2, [r1, #12]
    a446:	b132      	cbz	r2, a456 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    a448:	6111      	str	r1, [r2, #16]
    a44a:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
    a44e:	4410      	add	r0, r2
    a450:	684a      	ldr	r2, [r1, #4]
    a452:	1a80      	subs	r0, r0, r2
    a454:	e000      	b.n	a458 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    a456:	2000      	movs	r0, #0
    a458:	6088      	str	r0, [r1, #8]
    a45a:	bd10      	pop	{r4, pc}
    a45c:	200001dc 	.word	0x200001dc

0000a460 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    a460:	b510      	push	{r4, lr}
    a462:	2200      	movs	r2, #0
    a464:	6101      	str	r1, [r0, #16]
    a466:	b189      	cbz	r1, a48c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    a468:	68cb      	ldr	r3, [r1, #12]
    a46a:	60c8      	str	r0, [r1, #12]
    a46c:	60c3      	str	r3, [r0, #12]
    a46e:	b103      	cbz	r3, a472 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    a470:	6118      	str	r0, [r3, #16]
    a472:	6901      	ldr	r1, [r0, #16]
    a474:	6082      	str	r2, [r0, #8]
    a476:	2900      	cmp	r1, #0
    a478:	d00f      	beq.n	a49a <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    a47a:	688b      	ldr	r3, [r1, #8]
    a47c:	b163      	cbz	r3, a498 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    a47e:	6844      	ldr	r4, [r0, #4]
    a480:	42a3      	cmp	r3, r4
    a482:	d207      	bcs.n	a494 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    a484:	212a      	movs	r1, #42	; 0x2a
    a486:	2037      	movs	r0, #55	; 0x37
    a488:	f7f9 fc34 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a48c:	4903      	ldr	r1, [pc, #12]	; (a49c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    a48e:	60c2      	str	r2, [r0, #12]
    a490:	6008      	str	r0, [r1, #0]
    a492:	e7ee      	b.n	a472 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    a494:	1b1b      	subs	r3, r3, r4
    a496:	6083      	str	r3, [r0, #8]
    a498:	608a      	str	r2, [r1, #8]
    a49a:	bd10      	pop	{r4, pc}
    a49c:	200001dc 	.word	0x200001dc

0000a4a0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    a4a0:	6901      	ldr	r1, [r0, #16]
    a4a2:	b149      	cbz	r1, a4b8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    a4a4:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    a4a8:	441a      	add	r2, r3
    a4aa:	688b      	ldr	r3, [r1, #8]
    a4ac:	441a      	add	r2, r3
    a4ae:	608a      	str	r2, [r1, #8]
    a4b0:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    a4b4:	60d1      	str	r1, [r2, #12]
    a4b6:	e002      	b.n	a4be <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    a4b8:	4a06      	ldr	r2, [pc, #24]	; (a4d4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    a4ba:	68c1      	ldr	r1, [r0, #12]
    a4bc:	6011      	str	r1, [r2, #0]
    a4be:	e9d0 1003 	ldrd	r1, r0, [r0, #12]
    a4c2:	b109      	cbz	r1, a4c8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    a4c4:	6108      	str	r0, [r1, #16]
    a4c6:	4770      	bx	lr
    a4c8:	2800      	cmp	r0, #0
    a4ca:	d0fc      	beq.n	a4c6 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    a4cc:	2100      	movs	r1, #0
    a4ce:	6081      	str	r1, [r0, #8]
    a4d0:	4770      	bx	lr
    a4d2:	0000      	.short	0x0000
    a4d4:	200001dc 	.word	0x200001dc

0000a4d8 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    a4d8:	b510      	push	{r4, lr}
    a4da:	4604      	mov	r4, r0
    a4dc:	490a      	ldr	r1, [pc, #40]	; (a508 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    a4de:	2000      	movs	r0, #0
    a4e0:	4602      	mov	r2, r0
    a4e2:	6809      	ldr	r1, [r1, #0]
    a4e4:	1e43      	subs	r3, r0, #1
    a4e6:	e008      	b.n	a4fa <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    a4e8:	688a      	ldr	r2, [r1, #8]
    a4ea:	42a2      	cmp	r2, r4
    a4ec:	d303      	bcc.n	a4f6 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    a4ee:	429a      	cmp	r2, r3
    a4f0:	d201      	bcs.n	a4f6 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    a4f2:	4613      	mov	r3, r2
    a4f4:	4608      	mov	r0, r1
    a4f6:	460a      	mov	r2, r1
    a4f8:	68c9      	ldr	r1, [r1, #12]
    a4fa:	2900      	cmp	r1, #0
    a4fc:	d1f4      	bne.n	a4e8 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    a4fe:	2800      	cmp	r0, #0
    a500:	d100      	bne.n	a504 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    a502:	4610      	mov	r0, r2
    a504:	bd10      	pop	{r4, pc}
    a506:	0000      	.short	0x0000
    a508:	200001dc 	.word	0x200001dc

0000a50c <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    a50c:	4801      	ldr	r0, [pc, #4]	; (a514 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    a50e:	6800      	ldr	r0, [r0, #0]
    a510:	4770      	bx	lr
    a512:	0000      	.short	0x0000
    a514:	200001dc 	.word	0x200001dc

0000a518 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    a518:	4804      	ldr	r0, [pc, #16]	; (a52c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    a51a:	6801      	ldr	r1, [r0, #0]
    a51c:	2000      	movs	r0, #0
    a51e:	e001      	b.n	a524 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    a520:	4608      	mov	r0, r1
    a522:	68c9      	ldr	r1, [r1, #12]
    a524:	2900      	cmp	r1, #0
    a526:	d1fb      	bne.n	a520 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    a528:	4770      	bx	lr
    a52a:	0000      	.short	0x0000
    a52c:	200001dc 	.word	0x200001dc

0000a530 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    a530:	4801      	ldr	r0, [pc, #4]	; (a538 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    a532:	2100      	movs	r1, #0
    a534:	6001      	str	r1, [r0, #0]
    a536:	4770      	bx	lr
    a538:	200001dc 	.word	0x200001dc

0000a53c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    a53c:	4903      	ldr	r1, [pc, #12]	; (a54c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    a53e:	2000      	movs	r0, #0
    a540:	6809      	ldr	r1, [r1, #0]
    a542:	2900      	cmp	r1, #0
    a544:	d000      	beq.n	a548 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    a546:	200c      	movs	r0, #12
    a548:	4770      	bx	lr
    a54a:	0000      	.short	0x0000
    a54c:	200001dc 	.word	0x200001dc

0000a550 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    a550:	4901      	ldr	r1, [pc, #4]	; (a558 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    a552:	7008      	strb	r0, [r1, #0]
    a554:	4770      	bx	lr
    a556:	0000      	.short	0x0000
    a558:	20000296 	.word	0x20000296

0000a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    a55c:	4801      	ldr	r0, [pc, #4]	; (a564 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    a55e:	7800      	ldrb	r0, [r0, #0]
    a560:	f7f9 b9bc 	b.w	38dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a564:	20000296 	.word	0x20000296

0000a568 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    a568:	b500      	push	{lr}
    a56a:	7941      	ldrb	r1, [r0, #5]
    a56c:	b095      	sub	sp, #84	; 0x54
    a56e:	b141      	cbz	r1, a582 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a570:	2901      	cmp	r1, #1
    a572:	d006      	beq.n	a582 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a574:	2902      	cmp	r1, #2
    a576:	d004      	beq.n	a582 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a578:	2903      	cmp	r1, #3
    a57a:	d002      	beq.n	a582 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a57c:	2012      	movs	r0, #18
    a57e:	b015      	add	sp, #84	; 0x54
    a580:	bd00      	pop	{pc}
    a582:	7901      	ldrb	r1, [r0, #4]
    a584:	f88d 1000 	strb.w	r1, [sp]
    a588:	7b01      	ldrb	r1, [r0, #12]
    a58a:	f88d 1001 	strb.w	r1, [sp, #1]
    a58e:	7942      	ldrb	r2, [r0, #5]
    a590:	2100      	movs	r1, #0
    a592:	2301      	movs	r3, #1
    a594:	b3e2      	cbz	r2, a610 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xa8>
    a596:	2a02      	cmp	r2, #2
    a598:	d03b      	beq.n	a612 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    a59a:	f88d 3002 	strb.w	r3, [sp, #2]
    a59e:	bf00      	nop
    a5a0:	f8d0 2006 	ldr.w	r2, [r0, #6]
    a5a4:	f8cd 2003 	str.w	r2, [sp, #3]
    a5a8:	8942      	ldrh	r2, [r0, #10]
    a5aa:	f8ad 2007 	strh.w	r2, [sp, #7]
    a5ae:	f88d 3009 	strb.w	r3, [sp, #9]
    a5b2:	f830 2b01 	ldrh.w	r2, [r0], #1
    a5b6:	f240 2371 	movw	r3, #625	; 0x271
    a5ba:	435a      	muls	r2, r3
    a5bc:	9203      	str	r2, [sp, #12]
    a5be:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    a5c2:	435a      	muls	r2, r3
    a5c4:	9206      	str	r2, [sp, #24]
    a5c6:	8982      	ldrh	r2, [r0, #12]
    a5c8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    a5cc:	89c2      	ldrh	r2, [r0, #14]
    a5ce:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    a5d2:	8a02      	ldrh	r2, [r0, #16]
    a5d4:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    a5d8:	8a42      	ldrh	r2, [r0, #18]
    a5da:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    a5de:	8a82      	ldrh	r2, [r0, #20]
    a5e0:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    a5e4:	8ac0      	ldrh	r0, [r0, #22]
    a5e6:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    a5ea:	2007      	movs	r0, #7
    a5ec:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    a5f0:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    a5f4:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    a5f8:	9806      	ldr	r0, [sp, #24]
    a5fa:	f000 fbd7 	bl	adac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>
    a5fe:	b158      	cbz	r0, a618 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    a600:	9803      	ldr	r0, [sp, #12]
    a602:	f000 fbc7 	bl	ad94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    a606:	b138      	cbz	r0, a618 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    a608:	4668      	mov	r0, sp
    a60a:	f000 f8cb 	bl	a7a4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    a60e:	e7b6      	b.n	a57e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    a610:	e7ff      	b.n	a612 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    a612:	f88d 1002 	strb.w	r1, [sp, #2]
    a616:	e7c3      	b.n	a5a0 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    a618:	2030      	movs	r0, #48	; 0x30
    a61a:	e7b0      	b.n	a57e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

0000a61c <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    a61c:	b538      	push	{r3, r4, r5, lr}
    a61e:	4c14      	ldr	r4, [pc, #80]	; (a670 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x54>)
    a620:	7860      	ldrb	r0, [r4, #1]
    a622:	b970      	cbnz	r0, a642 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    a624:	f7fd f9e6 	bl	79f4 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
    a628:	2805      	cmp	r0, #5
    a62a:	d005      	beq.n	a638 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x1c>
    a62c:	f7fb ff36 	bl	649c <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    a630:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    a634:	39ff      	subs	r1, #255	; 0xff
    a636:	d004      	beq.n	a642 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    a638:	4668      	mov	r0, sp
    a63a:	f7fd f93b 	bl	78b4 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q>
    a63e:	b110      	cbz	r0, a646 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x2a>
    a640:	e014      	b.n	a66c <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x50>
    a642:	200c      	movs	r0, #12
    a644:	bd38      	pop	{r3, r4, r5, pc}
    a646:	9800      	ldr	r0, [sp, #0]
    a648:	8800      	ldrh	r0, [r0, #0]
    a64a:	f003 f85b 	bl	d704 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    a64e:	9800      	ldr	r0, [sp, #0]
    a650:	2100      	movs	r1, #0
    a652:	8800      	ldrh	r0, [r0, #0]
    a654:	f7f9 fdcc 	bl	41f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a658:	b120      	cbz	r0, a664 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x48>
    a65a:	f640 7172 	movw	r1, #3954	; 0xf72
    a65e:	2039      	movs	r0, #57	; 0x39
    a660:	f7f9 fb48 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a664:	2001      	movs	r0, #1
    a666:	7060      	strb	r0, [r4, #1]
    a668:	f7ff ff78 	bl	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a66c:	2000      	movs	r0, #0
    a66e:	bd38      	pop	{r3, r4, r5, pc}
    a670:	20000f00 	.word	0x20000f00

0000a674 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a674:	4903      	ldr	r1, [pc, #12]	; (a684 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a676:	888a      	ldrh	r2, [r1, #4]
    a678:	8002      	strh	r2, [r0, #0]
    a67a:	7889      	ldrb	r1, [r1, #2]
    a67c:	7081      	strb	r1, [r0, #2]
    a67e:	2000      	movs	r0, #0
    a680:	4770      	bx	lr
    a682:	0000      	.short	0x0000
    a684:	20000f00 	.word	0x20000f00

0000a688 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    a688:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a68a:	460c      	mov	r4, r1
    a68c:	4605      	mov	r5, r0
    a68e:	8800      	ldrh	r0, [r0, #0]
    a690:	4669      	mov	r1, sp
    a692:	f003 f952 	bl	d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a696:	0001      	movs	r1, r0
    a698:	f04f 0000 	mov.w	r0, #0
    a69c:	d005      	beq.n	a6aa <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    a69e:	f8c4 0002 	str.w	r0, [r4, #2]
    a6a2:	71a0      	strb	r0, [r4, #6]
    a6a4:	8020      	strh	r0, [r4, #0]
    a6a6:	2002      	movs	r0, #2
    a6a8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a6aa:	9901      	ldr	r1, [sp, #4]
    a6ac:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    a6b0:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    a6b4:	f8d1 2016 	ldr.w	r2, [r1, #22]
    a6b8:	f8c4 2002 	str.w	r2, [r4, #2]
    a6bc:	7e8a      	ldrb	r2, [r1, #26]
    a6be:	71a2      	strb	r2, [r4, #6]
    a6c0:	882a      	ldrh	r2, [r5, #0]
    a6c2:	8022      	strh	r2, [r4, #0]
    a6c4:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    a6c8:	f88d 2008 	strb.w	r2, [sp, #8]
    a6cc:	9a02      	ldr	r2, [sp, #8]
    a6ce:	9202      	str	r2, [sp, #8]
    a6d0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    a6d4:	2a00      	cmp	r2, #0
    a6d6:	d1eb      	bne.n	a6b0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    a6d8:	2000      	movs	r0, #0
    a6da:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000a6dc <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    a6dc:	b51c      	push	{r2, r3, r4, lr}
    a6de:	8800      	ldrh	r0, [r0, #0]
    a6e0:	4669      	mov	r1, sp
    a6e2:	f003 f92a 	bl	d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a6e6:	2800      	cmp	r0, #0
    a6e8:	d106      	bne.n	a6f8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1c>
    a6ea:	f89d 0000 	ldrb.w	r0, [sp]
    a6ee:	b120      	cbz	r0, a6fa <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1e>
    a6f0:	480b      	ldr	r0, [pc, #44]	; (a720 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x44>)
    a6f2:	7800      	ldrb	r0, [r0, #0]
    a6f4:	b190      	cbz	r0, a71c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x40>
    a6f6:	2002      	movs	r0, #2
    a6f8:	bd1c      	pop	{r2, r3, r4, pc}
    a6fa:	9801      	ldr	r0, [sp, #4]
    a6fc:	f004 fec3 	bl	f486 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    a700:	2800      	cmp	r0, #0
    a702:	d0f8      	beq.n	a6f6 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1a>
    a704:	9801      	ldr	r0, [sp, #4]
    a706:	f890 0159 	ldrb.w	r0, [r0, #345]	; 0x159
    a70a:	b108      	cbz	r0, a710 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x34>
    a70c:	203a      	movs	r0, #58	; 0x3a
    a70e:	bd1c      	pop	{r2, r3, r4, pc}
    a710:	9901      	ldr	r1, [sp, #4]
    a712:	2001      	movs	r0, #1
    a714:	f881 0159 	strb.w	r0, [r1, #345]	; 0x159
    a718:	2000      	movs	r0, #0
    a71a:	bd1c      	pop	{r2, r3, r4, pc}
    a71c:	2011      	movs	r0, #17
    a71e:	bd1c      	pop	{r2, r3, r4, pc}
    a720:	200001e0 	.word	0x200001e0

0000a724 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    a724:	b510      	push	{r4, lr}
    a726:	4604      	mov	r4, r0
    a728:	f004 fea4 	bl	f474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    a72c:	b130      	cbz	r0, a73c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    a72e:	4804      	ldr	r0, [pc, #16]	; (a740 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    a730:	8881      	ldrh	r1, [r0, #4]
    a732:	8021      	strh	r1, [r4, #0]
    a734:	88c0      	ldrh	r0, [r0, #6]
    a736:	8060      	strh	r0, [r4, #2]
    a738:	2000      	movs	r0, #0
    a73a:	bd10      	pop	{r4, pc}
    a73c:	2001      	movs	r0, #1
    a73e:	bd10      	pop	{r4, pc}
    a740:	200001ee 	.word	0x200001ee

0000a744 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    a744:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a746:	4605      	mov	r5, r0
    a748:	f000 fc2a 	bl	afa0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a74c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a750:	b310      	cbz	r0, a798 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    a752:	2400      	movs	r4, #0
    a754:	a802      	add	r0, sp, #8
    a756:	f88d 4004 	strb.w	r4, [sp, #4]
    a75a:	f88d 4008 	strb.w	r4, [sp, #8]
    a75e:	9000      	str	r0, [sp, #0]
    a760:	78aa      	ldrb	r2, [r5, #2]
    a762:	7869      	ldrb	r1, [r5, #1]
    a764:	7828      	ldrb	r0, [r5, #0]
    a766:	ab01      	add	r3, sp, #4
    a768:	f004 ff2a 	bl	f5c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    a76c:	2800      	cmp	r0, #0
    a76e:	d112      	bne.n	a796 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    a770:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a774:	f004 fca1 	bl	f0ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    a778:	b180      	cbz	r0, a79c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a77a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a77e:	f004 fc9c 	bl	f0ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    a782:	b158      	cbz	r0, a79c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a784:	4806      	ldr	r0, [pc, #24]	; (a7a0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    a786:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a78a:	7481      	strb	r1, [r0, #18]
    a78c:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a790:	74c1      	strb	r1, [r0, #19]
    a792:	8284      	strh	r4, [r0, #20]
    a794:	2000      	movs	r0, #0
    a796:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a798:	2001      	movs	r0, #1
    a79a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a79c:	2011      	movs	r0, #17
    a79e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a7a0:	20000f00 	.word	0x20000f00

0000a7a4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    a7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7a8:	a1a2      	add	r1, pc, #648	; (adr r1, aa34 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x290>)
    a7aa:	4605      	mov	r5, r0
    a7ac:	e9d1 8700 	ldrd	r8, r7, [r1]
    a7b0:	7a40      	ldrb	r0, [r0, #9]
    a7b2:	b087      	sub	sp, #28
    a7b4:	0781      	lsls	r1, r0, #30
    a7b6:	d502      	bpl.n	a7be <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1a>
    a7b8:	f040 0001 	orr.w	r0, r0, #1
    a7bc:	7268      	strb	r0, [r5, #9]
    a7be:	4628      	mov	r0, r5
    a7c0:	f004 fcda 	bl	f178 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x156>
    a7c4:	2800      	cmp	r0, #0
    a7c6:	d10c      	bne.n	a7e2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a7c8:	f004 fe71 	bl	f4ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    a7cc:	b940      	cbnz	r0, a7e0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    a7ce:	4e9b      	ldr	r6, [pc, #620]	; (aa3c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x298>)
    a7d0:	7870      	ldrb	r0, [r6, #1]
    a7d2:	b928      	cbnz	r0, a7e0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    a7d4:	f7fb fe62 	bl	649c <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    a7d8:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    a7dc:	39ff      	subs	r1, #255	; 0xff
    a7de:	d003      	beq.n	a7e8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x44>
    a7e0:	200c      	movs	r0, #12
    a7e2:	b007      	add	sp, #28
    a7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7e8:	7828      	ldrb	r0, [r5, #0]
    a7ea:	f04f 0b00 	mov.w	fp, #0
    a7ee:	f04f 0a01 	mov.w	sl, #1
    a7f2:	b9e8      	cbnz	r0, a830 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8c>
    a7f4:	78a8      	ldrb	r0, [r5, #2]
    a7f6:	9000      	str	r0, [sp, #0]
    a7f8:	f105 0903 	add.w	r9, r5, #3
    a7fc:	a902      	add	r1, sp, #8
    a7fe:	2000      	movs	r0, #0
    a800:	f002 ff26 	bl	d650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    a804:	b178      	cbz	r0, a826 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x82>
    a806:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    a80a:	e10e      	b.n	aa2a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x286>
    a80c:	9c04      	ldr	r4, [sp, #16]
    a80e:	9800      	ldr	r0, [sp, #0]
    a810:	f004 f890 	bl	e934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    a814:	78a1      	ldrb	r1, [r4, #2]
    a816:	4288      	cmp	r0, r1
    a818:	d105      	bne.n	a826 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x82>
    a81a:	2206      	movs	r2, #6
    a81c:	4649      	mov	r1, r9
    a81e:	1ce0      	adds	r0, r4, #3
    a820:	f001 fe5e 	bl	c4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    a824:	b320      	cbz	r0, a870 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xcc>
    a826:	a802      	add	r0, sp, #8
    a828:	f7f9 fc94 	bl	4154 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a82c:	2800      	cmp	r0, #0
    a82e:	d0ed      	beq.n	a80c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x68>
    a830:	2103      	movs	r1, #3
    a832:	f105 0018 	add.w	r0, r5, #24
    a836:	f000 fac5 	bl	adc4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x160>
    a83a:	2200      	movs	r2, #0
    a83c:	4611      	mov	r1, r2
    a83e:	a801      	add	r0, sp, #4
    a840:	f7f9 fcae 	bl	41a0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a844:	0004      	movs	r4, r0
    a846:	d015      	beq.n	a874 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd0>
    a848:	2100      	movs	r1, #0
    a84a:	f7fb f953 	bl	5af4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    a84e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a852:	8020      	strh	r0, [r4, #0]
    a854:	487a      	ldr	r0, [pc, #488]	; (aa40 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x29c>)
    a856:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    a85a:	f004 fe0b 	bl	f474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    a85e:	2800      	cmp	r0, #0
    a860:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a864:	d008      	beq.n	a878 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd4>
    a866:	88b1      	ldrh	r1, [r6, #4]
    a868:	88f2      	ldrh	r2, [r6, #6]
    a86a:	84c1      	strh	r1, [r0, #38]	; 0x26
    a86c:	8502      	strh	r2, [r0, #40]	; 0x28
    a86e:	e006      	b.n	a87e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xda>
    a870:	200b      	movs	r0, #11
    a872:	e7b6      	b.n	a7e2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a874:	2009      	movs	r0, #9
    a876:	e7b4      	b.n	a7e2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a878:	221b      	movs	r2, #27
    a87a:	84c2      	strh	r2, [r0, #38]	; 0x26
    a87c:	8502      	strh	r2, [r0, #40]	; 0x28
    a87e:	78f1      	ldrb	r1, [r6, #3]
    a880:	9100      	str	r1, [sp, #0]
    a882:	46b1      	mov	r9, r6
    a884:	78b3      	ldrb	r3, [r6, #2]
    a886:	88f2      	ldrh	r2, [r6, #6]
    a888:	88b1      	ldrh	r1, [r6, #4]
    a88a:	8820      	ldrh	r0, [r4, #0]
    a88c:	f7f9 fd6a 	bl	4364 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a890:	b110      	cbz	r0, a898 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf4>
    a892:	f640 618b 	movw	r1, #3723	; 0xe8b
    a896:	e0c8      	b.n	aa2a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x286>
    a898:	8820      	ldrh	r0, [r4, #0]
    a89a:	f7fb fd53 	bl	6344 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    a89e:	6120      	str	r0, [r4, #16]
    a8a0:	a068      	add	r0, pc, #416	; (adr r0, aa44 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    a8a2:	f104 0618 	add.w	r6, r4, #24
    a8a6:	6800      	ldr	r0, [r0, #0]
    a8a8:	9000      	str	r0, [sp, #0]
    a8aa:	2103      	movs	r1, #3
    a8ac:	4668      	mov	r0, sp
    a8ae:	f7f9 fabd 	bl	3e2c <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    a8b2:	2000      	movs	r0, #0
    a8b4:	4669      	mov	r1, sp
    a8b6:	5c0a      	ldrb	r2, [r1, r0]
    a8b8:	5432      	strb	r2, [r6, r0]
    a8ba:	1c40      	adds	r0, r0, #1
    a8bc:	b2c0      	uxtb	r0, r0
    a8be:	2803      	cmp	r0, #3
    a8c0:	d3f9      	bcc.n	a8b6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x112>
    a8c2:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
    a8c4:	f003 f845 	bl	d952 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a8c8:	60e0      	str	r0, [r4, #12]
    a8ca:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    a8cc:	82a0      	strh	r0, [r4, #20]
    a8ce:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
    a8d0:	82e0      	strh	r0, [r4, #22]
    a8d2:	7a68      	ldrb	r0, [r5, #9]
    a8d4:	f004 fbd0 	bl	f078 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    a8d8:	f8d9 1008 	ldr.w	r1, [r9, #8]
    a8dc:	464e      	mov	r6, r9
    a8de:	4620      	mov	r0, r4
    a8e0:	62e1      	str	r1, [r4, #44]	; 0x2c
    a8e2:	f003 fe49 	bl	e578 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI>
    a8e6:	f8c4 808e 	str.w	r8, [r4, #142]	; 0x8e
    a8ea:	46d1      	mov	r9, sl
    a8ec:	4650      	mov	r0, sl
    a8ee:	f884 7092 	strb.w	r7, [r4, #146]	; 0x92
    a8f2:	f884 012e 	strb.w	r0, [r4, #302]	; 0x12e
    a8f6:	4852      	ldr	r0, [pc, #328]	; (aa40 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x29c>)
    a8f8:	3808      	subs	r0, #8
    a8fa:	6843      	ldr	r3, [r0, #4]
    a8fc:	b123      	cbz	r3, a908 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x164>
    a8fe:	2201      	movs	r2, #1
    a900:	f504 7199 	add.w	r1, r4, #306	; 0x132
    a904:	4620      	mov	r0, r4
    a906:	4798      	blx	r3
    a908:	8821      	ldrh	r1, [r4, #0]
    a90a:	f8ad 1008 	strh.w	r1, [sp, #8]
    a90e:	7cb1      	ldrb	r1, [r6, #18]
    a910:	f88d 100a 	strb.w	r1, [sp, #10]
    a914:	7cf1      	ldrb	r1, [r6, #19]
    a916:	f88d 100b 	strb.w	r1, [sp, #11]
    a91a:	8ab1      	ldrh	r1, [r6, #20]
    a91c:	f8ad 100c 	strh.w	r1, [sp, #12]
    a920:	a905      	add	r1, sp, #20
    a922:	9100      	str	r1, [sp, #0]
    a924:	2000      	movs	r0, #0
    a926:	ab04      	add	r3, sp, #16
    a928:	aa02      	add	r2, sp, #8
    a92a:	4621      	mov	r1, r4
    a92c:	f004 fd63 	bl	f3f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d4>
    a930:	0006      	movs	r6, r0
    a932:	d10f      	bne.n	a954 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1b0>
    a934:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a938:	f88d 0018 	strb.w	r0, [sp, #24]
    a93c:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a940:	f88d 0019 	strb.w	r0, [sp, #25]
    a944:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a948:	f8ad 001a 	strh.w	r0, [sp, #26]
    a94c:	a906      	add	r1, sp, #24
    a94e:	4620      	mov	r0, r4
    a950:	f003 f8bc 	bl	dacc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a954:	46d8      	mov	r8, fp
    a956:	f88d b000 	strb.w	fp, [sp]
    a95a:	2101      	movs	r1, #1
    a95c:	4668      	mov	r0, sp
    a95e:	f7f9 fa65 	bl	3e2c <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    a962:	f89d 0000 	ldrb.w	r0, [sp]
    a966:	f000 0107 	and.w	r1, r0, #7
    a96a:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    a96e:	4411      	add	r1, r2
    a970:	f3c0 1040 	ubfx	r0, r0, #5, #1
    a974:	4408      	add	r0, r1
    a976:	f88d 0000 	strb.w	r0, [sp]
    a97a:	1d40      	adds	r0, r0, #5
    a97c:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    a980:	2809      	cmp	r0, #9
    a982:	d202      	bcs.n	a98a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1e6>
    a984:	3008      	adds	r0, #8
    a986:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    a98a:	2101      	movs	r1, #1
    a98c:	4620      	mov	r0, r4
    a98e:	f7fb f8b1 	bl	5af4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    a992:	7868      	ldrb	r0, [r5, #1]
    a994:	f7fb fe56 	bl	6644 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    a998:	bbee      	cbnz	r6, aa16 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    a99a:	78a9      	ldrb	r1, [r5, #2]
    a99c:	7828      	ldrb	r0, [r5, #0]
    a99e:	1cea      	adds	r2, r5, #3
    a9a0:	f7fb fdfa 	bl	6598 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    a9a4:	b148      	cbz	r0, a9ba <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x216>
    a9a6:	f7fb fd21 	bl	63ec <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    a9aa:	78a9      	ldrb	r1, [r5, #2]
    a9ac:	7828      	ldrb	r0, [r5, #0]
    a9ae:	1cea      	adds	r2, r5, #3
    a9b0:	f7fb fe16 	bl	65e0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    a9b4:	0006      	movs	r6, r0
    a9b6:	d002      	beq.n	a9be <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x21a>
    a9b8:	e02d      	b.n	aa16 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    a9ba:	2612      	movs	r6, #18
    a9bc:	e02b      	b.n	aa16 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    a9be:	78a8      	ldrb	r0, [r5, #2]
    a9c0:	f003 ffb8 	bl	e934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    a9c4:	4602      	mov	r2, r0
    a9c6:	1ceb      	adds	r3, r5, #3
    a9c8:	4621      	mov	r1, r4
    a9ca:	2003      	movs	r0, #3
    a9cc:	f7fb fd50 	bl	6470 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    a9d0:	0006      	movs	r6, r0
    a9d2:	d120      	bne.n	aa16 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    a9d4:	464f      	mov	r7, r9
    a9d6:	4648      	mov	r0, r9
    a9d8:	f7fb fda8 	bl	652c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    a9dc:	0006      	movs	r6, r0
    a9de:	d11a      	bne.n	aa16 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    a9e0:	f88d 8008 	strb.w	r8, [sp, #8]
    a9e4:	7a68      	ldrb	r0, [r5, #9]
    a9e6:	07c0      	lsls	r0, r0, #31
    a9e8:	d005      	beq.n	a9f6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x252>
    a9ea:	68e8      	ldr	r0, [r5, #12]
    a9ec:	9003      	str	r0, [sp, #12]
    a9ee:	69a8      	ldr	r0, [r5, #24]
    a9f0:	9004      	str	r0, [sp, #16]
    a9f2:	f88d 7008 	strb.w	r7, [sp, #8]
    a9f6:	a802      	add	r0, sp, #8
    a9f8:	f7fd f802 	bl	7a00 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>
    a9fc:	4606      	mov	r6, r0
    a9fe:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
    aa02:	f7fb fe93 	bl	672c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    aa06:	b936      	cbnz	r6, aa16 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    aa08:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    aa0c:	4620      	mov	r0, r4
    aa0e:	f7fc ff0d 	bl	782c <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ>
    aa12:	0006      	movs	r6, r0
    aa14:	d00c      	beq.n	aa30 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    aa16:	8820      	ldrh	r0, [r4, #0]
    aa18:	f002 fe74 	bl	d704 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    aa1c:	8820      	ldrh	r0, [r4, #0]
    aa1e:	2100      	movs	r1, #0
    aa20:	f7f9 fbe6 	bl	41f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    aa24:	b120      	cbz	r0, aa30 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    aa26:	f640 7152 	movw	r1, #3922	; 0xf52
    aa2a:	2039      	movs	r0, #57	; 0x39
    aa2c:	f7f9 f962 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa30:	4630      	mov	r0, r6
    aa32:	e6d6      	b.n	a7e2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    aa34:	ffffffff 	.word	0xffffffff
    aa38:	0000001f 	.word	0x0000001f
    aa3c:	20000f00 	.word	0x20000f00
    aa40:	200001e8 	.word	0x200001e8
    aa44:	00332211 	.word	0x00332211

0000aa48 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    aa48:	7801      	ldrb	r1, [r0, #0]
    aa4a:	b179      	cbz	r1, aa6c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    aa4c:	7841      	ldrb	r1, [r0, #1]
    aa4e:	b169      	cbz	r1, aa6c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    aa50:	8841      	ldrh	r1, [r0, #2]
    aa52:	291b      	cmp	r1, #27
    aa54:	d30a      	bcc.n	aa6c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    aa56:	8881      	ldrh	r1, [r0, #4]
    aa58:	291b      	cmp	r1, #27
    aa5a:	d307      	bcc.n	aa6c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    aa5c:	4904      	ldr	r1, [pc, #16]	; (aa70 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    aa5e:	6802      	ldr	r2, [r0, #0]
    aa60:	f8c1 2002 	str.w	r2, [r1, #2]
    aa64:	8880      	ldrh	r0, [r0, #4]
    aa66:	80c8      	strh	r0, [r1, #6]
    aa68:	2000      	movs	r0, #0
    aa6a:	4770      	bx	lr
    aa6c:	2012      	movs	r0, #18
    aa6e:	4770      	bx	lr
    aa70:	20000f00 	.word	0x20000f00

0000aa74 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    aa74:	6800      	ldr	r0, [r0, #0]
    aa76:	f240 41e2 	movw	r1, #1250	; 0x4e2
    aa7a:	4288      	cmp	r0, r1
    aa7c:	d303      	bcc.n	aa86 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    aa7e:	4903      	ldr	r1, [pc, #12]	; (aa8c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    aa80:	6088      	str	r0, [r1, #8]
    aa82:	2000      	movs	r0, #0
    aa84:	4770      	bx	lr
    aa86:	2012      	movs	r0, #18
    aa88:	4770      	bx	lr
    aa8a:	0000      	.short	0x0000
    aa8c:	20000f00 	.word	0x20000f00

0000aa90 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    aa90:	b510      	push	{r4, lr}
    aa92:	b086      	sub	sp, #24
    aa94:	4604      	mov	r4, r0
    aa96:	f004 fbe6 	bl	f266 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x244>
    aa9a:	2800      	cmp	r0, #0
    aa9c:	d103      	bne.n	aaa6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    aa9e:	f004 fd06 	bl	f4ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    aaa2:	b110      	cbz	r0, aaaa <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    aaa4:	200c      	movs	r0, #12
    aaa6:	b006      	add	sp, #24
    aaa8:	bd10      	pop	{r4, pc}
    aaaa:	2102      	movs	r1, #2
    aaac:	f104 0010 	add.w	r0, r4, #16
    aab0:	f000 f988 	bl	adc4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x160>
    aab4:	78a0      	ldrb	r0, [r4, #2]
    aab6:	f88d 0008 	strb.w	r0, [sp, #8]
    aaba:	78a0      	ldrb	r0, [r4, #2]
    aabc:	f88d 0000 	strb.w	r0, [sp]
    aac0:	7860      	ldrb	r0, [r4, #1]
    aac2:	f88d 0003 	strb.w	r0, [sp, #3]
    aac6:	7820      	ldrb	r0, [r4, #0]
    aac8:	f88d 0002 	strb.w	r0, [sp, #2]
    aacc:	7e20      	ldrb	r0, [r4, #24]
    aace:	f88d 0004 	strb.w	r0, [sp, #4]
    aad2:	78a0      	ldrb	r0, [r4, #2]
    aad4:	07c0      	lsls	r0, r0, #31
    aad6:	d00b      	beq.n	aaf0 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    aad8:	78e0      	ldrb	r0, [r4, #3]
    aada:	2801      	cmp	r0, #1
    aadc:	d011      	beq.n	ab02 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    aade:	b190      	cbz	r0, ab06 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    aae0:	f05f 0000 	movs.w	r0, #0
    aae4:	f88d 0001 	strb.w	r0, [sp, #1]
    aae8:	68a0      	ldr	r0, [r4, #8]
    aaea:	9003      	str	r0, [sp, #12]
    aaec:	6920      	ldr	r0, [r4, #16]
    aaee:	9004      	str	r0, [sp, #16]
    aaf0:	a802      	add	r0, sp, #8
    aaf2:	f7fc ff85 	bl	7a00 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>
    aaf6:	2800      	cmp	r0, #0
    aaf8:	d1d5      	bne.n	aaa6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    aafa:	4668      	mov	r0, sp
    aafc:	f7fb fe1e 	bl	673c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    ab00:	e7d1      	b.n	aaa6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    ab02:	2002      	movs	r0, #2
    ab04:	e7ee      	b.n	aae4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    ab06:	2001      	movs	r0, #1
    ab08:	e7ec      	b.n	aae4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

0000ab0c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    ab0c:	4a03      	ldr	r2, [pc, #12]	; (ab1c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    ab0e:	e9d2 1200 	ldrd	r1, r2, [r2]
    ab12:	6001      	str	r1, [r0, #0]
    ab14:	6042      	str	r2, [r0, #4]
    ab16:	2000      	movs	r0, #0
    ab18:	4770      	bx	lr
    ab1a:	0000      	.short	0x0000
    ab1c:	0000ae50 	.word	0x0000ae50

0000ab20 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    ab20:	b510      	push	{r4, lr}
    ab22:	2005      	movs	r0, #5
    ab24:	f000 fa32 	bl	af8c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    ab28:	f7fd fe14 	bl	8754 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    ab2c:	4902      	ldr	r1, [pc, #8]	; (ab38 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    ab2e:	4801      	ldr	r0, [pc, #4]	; (ab34 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    ab30:	6048      	str	r0, [r1, #4]
    ab32:	bd10      	pop	{r4, pc}
    ab34:	0000ac99 	.word	0x0000ac99
    ab38:	200001e0 	.word	0x200001e0

0000ab3c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    ab3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ab40:	b086      	sub	sp, #24
    ab42:	468a      	mov	sl, r1
    ab44:	4606      	mov	r6, r0
    ab46:	8800      	ldrh	r0, [r0, #0]
    ab48:	a901      	add	r1, sp, #4
    ab4a:	f002 fef6 	bl	d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ab4e:	2800      	cmp	r0, #0
    ab50:	d139      	bne.n	abc6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    ab52:	9802      	ldr	r0, [sp, #8]
    ab54:	f04f 0801 	mov.w	r8, #1
    ab58:	4601      	mov	r1, r0
    ab5a:	4689      	mov	r9, r1
    ab5c:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    ab60:	f88d 1000 	strb.w	r1, [sp]
    ab64:	9900      	ldr	r1, [sp, #0]
    ab66:	9100      	str	r1, [sp, #0]
    ab68:	f89d 5000 	ldrb.w	r5, [sp]
    ab6c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ab70:	3078      	adds	r0, #120	; 0x78
    ab72:	2921      	cmp	r1, #33	; 0x21
    ab74:	d100      	bne.n	ab78 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    ab76:	b13d      	cbz	r5, ab88 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    ab78:	2400      	movs	r4, #0
    ab7a:	304e      	adds	r0, #78	; 0x4e
    ab7c:	2108      	movs	r1, #8
    ab7e:	4607      	mov	r7, r0
    ab80:	f003 fece 	bl	e920 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    ab84:	b110      	cbz	r0, ab8c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    ab86:	e007      	b.n	ab98 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ab88:	2401      	movs	r4, #1
    ab8a:	e7f6      	b.n	ab7a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    ab8c:	210b      	movs	r1, #11
    ab8e:	4638      	mov	r0, r7
    ab90:	f003 fec6 	bl	e920 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    ab94:	b900      	cbnz	r0, ab98 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ab96:	b1ac      	cbz	r4, abc4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    ab98:	a804      	add	r0, sp, #16
    ab9a:	9000      	str	r0, [sp, #0]
    ab9c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    aba0:	ab03      	add	r3, sp, #12
    aba2:	4632      	mov	r2, r6
    aba4:	4649      	mov	r1, r9
    aba6:	f004 fc26 	bl	f3f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d4>
    abaa:	0007      	movs	r7, r0
    abac:	d10b      	bne.n	abc6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    abae:	f89d 0004 	ldrb.w	r0, [sp, #4]
    abb2:	9c02      	ldr	r4, [sp, #8]
    abb4:	b150      	cbz	r0, abcc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x90>
    abb6:	f504 74df 	add.w	r4, r4, #446	; 0x1be
    abba:	bf00      	nop
    abbc:	f884 8001 	strb.w	r8, [r4, #1]
    abc0:	b94d      	cbnz	r5, abd6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
    abc2:	e006      	b.n	abd2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x96>
    abc4:	201a      	movs	r0, #26
    abc6:	b006      	add	sp, #24
    abc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    abcc:	f504 749f 	add.w	r4, r4, #318	; 0x13e
    abd0:	e7f4      	b.n	abbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x80>
    abd2:	7820      	ldrb	r0, [r4, #0]
    abd4:	b108      	cbz	r0, abda <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
    abd6:	273a      	movs	r7, #58	; 0x3a
    abd8:	e012      	b.n	ac00 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
    abda:	f884 a000 	strb.w	sl, [r4]
    abde:	f89d 000c 	ldrb.w	r0, [sp, #12]
    abe2:	70a0      	strb	r0, [r4, #2]
    abe4:	f89d 1010 	ldrb.w	r1, [sp, #16]
    abe8:	70e1      	strb	r1, [r4, #3]
    abea:	f88d 0000 	strb.w	r0, [sp]
    abee:	f88d 1001 	strb.w	r1, [sp, #1]
    abf2:	88b0      	ldrh	r0, [r6, #4]
    abf4:	f8ad 0002 	strh.w	r0, [sp, #2]
    abf8:	4669      	mov	r1, sp
    abfa:	4648      	mov	r0, r9
    abfc:	f002 ff66 	bl	dacc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ac00:	2000      	movs	r0, #0
    ac02:	7060      	strb	r0, [r4, #1]
    ac04:	4638      	mov	r0, r7
    ac06:	e7de      	b.n	abc6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>

0000ac08 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    ac08:	b510      	push	{r4, lr}
    ac0a:	f002 fd8f 	bl	d72c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    ac0e:	f7fa fd17 	bl	5640 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    ac12:	f000 f9d5 	bl	afc0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    ac16:	4811      	ldr	r0, [pc, #68]	; (ac5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>)
    ac18:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ac1c:	4b10      	ldr	r3, [pc, #64]	; (ac60 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    ac1e:	81c1      	strh	r1, [r0, #14]
    ac20:	8201      	strh	r1, [r0, #16]
    ac22:	2100      	movs	r1, #0
    ac24:	75c1      	strb	r1, [r0, #23]
    ac26:	8301      	strh	r1, [r0, #24]
    ac28:	8001      	strh	r1, [r0, #0]
    ac2a:	221b      	movs	r2, #27
    ac2c:	801a      	strh	r2, [r3, #0]
    ac2e:	f44f 74a4 	mov.w	r4, #328	; 0x148
    ac32:	805c      	strh	r4, [r3, #2]
    ac34:	809a      	strh	r2, [r3, #4]
    ac36:	80dc      	strh	r4, [r3, #6]
    ac38:	7481      	strb	r1, [r0, #18]
    ac3a:	74c1      	strb	r1, [r0, #19]
    ac3c:	2303      	movs	r3, #3
    ac3e:	7083      	strb	r3, [r0, #2]
    ac40:	2302      	movs	r3, #2
    ac42:	70c3      	strb	r3, [r0, #3]
    ac44:	8082      	strh	r2, [r0, #4]
    ac46:	80c2      	strh	r2, [r0, #6]
    ac48:	f640 62a6 	movw	r2, #3750	; 0xea6
    ac4c:	6082      	str	r2, [r0, #8]
    ac4e:	4a04      	ldr	r2, [pc, #16]	; (ac60 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    ac50:	1f92      	subs	r2, r2, #6
    ac52:	7011      	strb	r1, [r2, #0]
    ac54:	7581      	strb	r1, [r0, #22]
    ac56:	7301      	strb	r1, [r0, #12]
    ac58:	bd10      	pop	{r4, pc}
    ac5a:	0000      	.short	0x0000
    ac5c:	20000f00 	.word	0x20000f00
    ac60:	200001ee 	.word	0x200001ee

0000ac64 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    ac64:	b510      	push	{r4, lr}
    ac66:	b158      	cbz	r0, ac80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    ac68:	490a      	ldr	r1, [pc, #40]	; (ac94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    ac6a:	780a      	ldrb	r2, [r1, #0]
    ac6c:	b16a      	cbz	r2, ac8a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    ac6e:	2200      	movs	r2, #0
    ac70:	7042      	strb	r2, [r0, #1]
    ac72:	2303      	movs	r3, #3
    ac74:	7003      	strb	r3, [r0, #0]
    ac76:	2301      	movs	r3, #1
    ac78:	7103      	strb	r3, [r0, #4]
    ac7a:	700a      	strb	r2, [r1, #0]
    ac7c:	4618      	mov	r0, r3
    ac7e:	bd10      	pop	{r4, pc}
    ac80:	f641 1146 	movw	r1, #6470	; 0x1946
    ac84:	2039      	movs	r0, #57	; 0x39
    ac86:	f7f9 f835 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac8e:	f7fb b881 	b.w	5d94 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    ac92:	0000      	.short	0x0000
    ac94:	20000f00 	.word	0x20000f00
    ac98:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac9c:	4692      	mov	sl, r2
    ac9e:	460f      	mov	r7, r1
    aca0:	4681      	mov	r9, r0
    aca2:	f004 fbe7 	bl	f474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    aca6:	2800      	cmp	r0, #0
    aca8:	d063      	beq.n	ad72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    acaa:	4933      	ldr	r1, [pc, #204]	; (ad78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    acac:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    acb0:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    acb4:	8808      	ldrh	r0, [r1, #0]
    acb6:	4290      	cmp	r0, r2
    acb8:	d300      	bcc.n	acbc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    acba:	4610      	mov	r0, r2
    acbc:	4680      	mov	r8, r0
    acbe:	8888      	ldrh	r0, [r1, #4]
    acc0:	42b0      	cmp	r0, r6
    acc2:	d200      	bcs.n	acc6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    acc4:	4606      	mov	r6, r0
    acc6:	884c      	ldrh	r4, [r1, #2]
    acc8:	f640 0048 	movw	r0, #2120	; 0x848
    accc:	4284      	cmp	r4, r0
    acce:	d300      	bcc.n	acd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    acd0:	4604      	mov	r4, r0
    acd2:	88cd      	ldrh	r5, [r1, #6]
    acd4:	4285      	cmp	r5, r0
    acd6:	d300      	bcc.n	acda <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    acd8:	4605      	mov	r5, r0
    acda:	4284      	cmp	r4, r0
    acdc:	d300      	bcc.n	ace0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    acde:	4604      	mov	r4, r0
    ace0:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ace4:	2e1b      	cmp	r6, #27
    ace6:	d001      	beq.n	acec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    ace8:	428d      	cmp	r5, r1
    acea:	d104      	bne.n	acf6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    acec:	f1b8 0f1b 	cmp.w	r8, #27
    acf0:	d03f      	beq.n	ad72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    acf2:	428c      	cmp	r4, r1
    acf4:	d03d      	beq.n	ad72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    acf6:	466a      	mov	r2, sp
    acf8:	4651      	mov	r1, sl
    acfa:	4648      	mov	r0, r9
    acfc:	f004 fb3e 	bl	f37c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    ad00:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    ad04:	4641      	mov	r1, r8
    ad06:	4540      	cmp	r0, r8
    ad08:	d900      	bls.n	ad0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    ad0a:	4608      	mov	r0, r1
    ad0c:	80f8      	strh	r0, [r7, #6]
    ad0e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    ad12:	42a1      	cmp	r1, r4
    ad14:	d800      	bhi.n	ad18 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    ad16:	460c      	mov	r4, r1
    ad18:	813c      	strh	r4, [r7, #8]
    ad1a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    ad1e:	42b1      	cmp	r1, r6
    ad20:	d800      	bhi.n	ad24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    ad22:	460e      	mov	r6, r1
    ad24:	807e      	strh	r6, [r7, #2]
    ad26:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ad2a:	42a9      	cmp	r1, r5
    ad2c:	d900      	bls.n	ad30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    ad2e:	4629      	mov	r1, r5
    ad30:	80b9      	strh	r1, [r7, #4]
    ad32:	2201      	movs	r2, #1
    ad34:	703a      	strb	r2, [r7, #0]
    ad36:	381b      	subs	r0, #27
    ad38:	28e0      	cmp	r0, #224	; 0xe0
    ad3a:	d902      	bls.n	ad42 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    ad3c:	f640 4172 	movw	r1, #3186	; 0xc72
    ad40:	e014      	b.n	ad6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    ad42:	3e1b      	subs	r6, #27
    ad44:	2ee0      	cmp	r6, #224	; 0xe0
    ad46:	d902      	bls.n	ad4e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    ad48:	f640 4174 	movw	r1, #3188	; 0xc74
    ad4c:	e00e      	b.n	ad6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    ad4e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    ad52:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    ad56:	4284      	cmp	r4, r0
    ad58:	d902      	bls.n	ad60 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    ad5a:	f640 4176 	movw	r1, #3190	; 0xc76
    ad5e:	e005      	b.n	ad6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    ad60:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    ad64:	4281      	cmp	r1, r0
    ad66:	d904      	bls.n	ad72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    ad68:	f640 4178 	movw	r1, #3192	; 0xc78
    ad6c:	2039      	movs	r0, #57	; 0x39
    ad6e:	f7f8 ffc1 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad72:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad76:	0000      	.short	0x0000
    ad78:	200001ee 	.word	0x200001ee
    ad7c:	4904      	ldr	r1, [pc, #16]	; (ad90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12c>)
    ad7e:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    ad82:	4288      	cmp	r0, r1
    ad84:	d301      	bcc.n	ad8a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    ad86:	2000      	movs	r0, #0
    ad88:	4770      	bx	lr
    ad8a:	2001      	movs	r0, #1
    ad8c:	4770      	bx	lr
    ad8e:	0000      	.short	0x0000
    ad90:	0270f3cc 	.word	0x0270f3cc
    ad94:	4904      	ldr	r1, [pc, #16]	; (ada8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x144>)
    ad96:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    ad9a:	4288      	cmp	r0, r1
    ad9c:	d301      	bcc.n	ada2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    ad9e:	2000      	movs	r0, #0
    ada0:	4770      	bx	lr
    ada2:	2001      	movs	r0, #1
    ada4:	4770      	bx	lr
    ada6:	0000      	.short	0x0000
    ada8:	009c363d 	.word	0x009c363d
    adac:	4904      	ldr	r1, [pc, #16]	; (adc0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>)
    adae:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    adb2:	4288      	cmp	r0, r1
    adb4:	d301      	bcc.n	adba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    adb6:	2000      	movs	r0, #0
    adb8:	4770      	bx	lr
    adba:	2001      	movs	r0, #1
    adbc:	4770      	bx	lr
    adbe:	0000      	.short	0x0000
    adc0:	009c363d 	.word	0x009c363d
    adc4:	b530      	push	{r4, r5, lr}
    adc6:	2200      	movs	r2, #0
    adc8:	4d07      	ldr	r5, [pc, #28]	; (ade8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    adca:	e009      	b.n	ade0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    adcc:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    add0:	462b      	mov	r3, r5
    add2:	429c      	cmp	r4, r3
    add4:	d800      	bhi.n	add8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x174>
    add6:	4623      	mov	r3, r4
    add8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    addc:	1c52      	adds	r2, r2, #1
    adde:	b2d2      	uxtb	r2, r2
    ade0:	428a      	cmp	r2, r1
    ade2:	d3f3      	bcc.n	adcc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x168>
    ade4:	bd30      	pop	{r4, r5, pc}
    ade6:	0000      	.short	0x0000
    ade8:	00f42400 	.word	0x00f42400
    adec:	4a09      	ldr	r2, [pc, #36]	; (ae14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>)
    adee:	4290      	cmp	r0, r2
    adf0:	d80b      	bhi.n	ae0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a6>
    adf2:	2901      	cmp	r1, #1
    adf4:	d002      	beq.n	adfc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    adf6:	2904      	cmp	r1, #4
    adf8:	d003      	beq.n	ae02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    adfa:	e008      	b.n	ae0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1aa>
    adfc:	f240 7153 	movw	r1, #1875	; 0x753
    ae00:	e001      	b.n	ae06 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a2>
    ae02:	f640 11c4 	movw	r1, #2500	; 0x9c4
    ae06:	4288      	cmp	r0, r1
    ae08:	d201      	bcs.n	ae0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1aa>
    ae0a:	2000      	movs	r0, #0
    ae0c:	4770      	bx	lr
    ae0e:	2001      	movs	r0, #1
    ae10:	4770      	bx	lr
    ae12:	0000      	.short	0x0000
    ae14:	0270fd8f 	.word	0x0270fd8f
    ae18:	b510      	push	{r4, lr}
    ae1a:	4604      	mov	r4, r0
    ae1c:	88c1      	ldrh	r1, [r0, #6]
    ae1e:	8880      	ldrh	r0, [r0, #4]
    ae20:	f004 f960 	bl	f0e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    ae24:	2800      	cmp	r0, #0
    ae26:	d10f      	bne.n	ae48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e4>
    ae28:	8861      	ldrh	r1, [r4, #2]
    ae2a:	8820      	ldrh	r0, [r4, #0]
    ae2c:	f004 f95a 	bl	f0e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    ae30:	2800      	cmp	r0, #0
    ae32:	d109      	bne.n	ae48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e4>
    ae34:	4805      	ldr	r0, [pc, #20]	; (ae4c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e8>)
    ae36:	88a1      	ldrh	r1, [r4, #4]
    ae38:	8081      	strh	r1, [r0, #4]
    ae3a:	8821      	ldrh	r1, [r4, #0]
    ae3c:	8001      	strh	r1, [r0, #0]
    ae3e:	88e1      	ldrh	r1, [r4, #6]
    ae40:	80c1      	strh	r1, [r0, #6]
    ae42:	8861      	ldrh	r1, [r4, #2]
    ae44:	8041      	strh	r1, [r0, #2]
    ae46:	2000      	movs	r0, #0
    ae48:	bd10      	pop	{r4, pc}
    ae4a:	0000      	.short	0x0000
    ae4c:	200001ee 	.word	0x200001ee
    ae50:	0b12b00b 	.word	0x0b12b00b
    ae54:	12b00059 	.word	0x12b00059
    ae58:	05060708 	.word	0x05060708
    ae5c:	00020304 	.word	0x00020304
    ae60:	f0f4f8fc 	.word	0xf0f4f8fc
    ae64:	0304d8ec 	.word	0x0304d8ec
    ae68:	f4f8fc00 	.word	0xf4f8fc00
    ae6c:	00d8ecf0 	.word	0x00d8ecf0

0000ae70 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    ae70:	b510      	push	{r4, lr}
    ae72:	460c      	mov	r4, r1
    ae74:	f7ff fb6c 	bl	a550 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    ae78:	4804      	ldr	r0, [pc, #16]	; (ae8c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    ae7a:	6004      	str	r4, [r0, #0]
    ae7c:	6840      	ldr	r0, [r0, #4]
    ae7e:	f004 fbce 	bl	f61e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    ae82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae86:	f004 b8c2 	b.w	f00e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    ae8a:	0000      	.short	0x0000
    ae8c:	200001f8 	.word	0x200001f8

0000ae90 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    ae90:	b510      	push	{r4, lr}
    ae92:	4c07      	ldr	r4, [pc, #28]	; (aeb0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    ae94:	68a0      	ldr	r0, [r4, #8]
    ae96:	f004 fbc2 	bl	f61e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    ae9a:	68e0      	ldr	r0, [r4, #12]
    ae9c:	f004 fbbf 	bl	f61e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    aea0:	f002 fc44 	bl	d72c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    aea4:	f7fa fbcc 	bl	5640 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    aea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aeac:	f7ff beac 	b.w	ac08 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    aeb0:	200001f8 	.word	0x200001f8

0000aeb4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    aeb4:	b500      	push	{lr}
    aeb6:	4905      	ldr	r1, [pc, #20]	; (aecc <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    aeb8:	4805      	ldr	r0, [pc, #20]	; (aed0 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    aeba:	f004 fba3 	bl	f604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    aebe:	4804      	ldr	r0, [pc, #16]	; (aed0 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    aec0:	4904      	ldr	r1, [pc, #16]	; (aed4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    aec2:	1d00      	adds	r0, r0, #4
    aec4:	f85d eb04 	ldr.w	lr, [sp], #4
    aec8:	f004 bb9c 	b.w	f604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    aecc:	20000238 	.word	0x20000238
    aed0:	200001fc 	.word	0x200001fc
    aed4:	20000240 	.word	0x20000240

0000aed8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    aed8:	b500      	push	{lr}
    aeda:	4908      	ldr	r1, [pc, #32]	; (aefc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    aedc:	4808      	ldr	r0, [pc, #32]	; (af00 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    aede:	f004 fb91 	bl	f604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    aee2:	4807      	ldr	r0, [pc, #28]	; (af00 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    aee4:	4907      	ldr	r1, [pc, #28]	; (af04 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    aee6:	1d00      	adds	r0, r0, #4
    aee8:	f004 fb8c 	bl	f604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    aeec:	4804      	ldr	r0, [pc, #16]	; (af00 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    aeee:	4906      	ldr	r1, [pc, #24]	; (af08 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    aef0:	3008      	adds	r0, #8
    aef2:	f85d eb04 	ldr.w	lr, [sp], #4
    aef6:	f004 bb85 	b.w	f604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    aefa:	0000      	.short	0x0000
    aefc:	20000228 	.word	0x20000228
    af00:	200001fc 	.word	0x200001fc
    af04:	20000230 	.word	0x20000230
    af08:	20000220 	.word	0x20000220
    af0c:	b510      	push	{r4, lr}
    af0e:	f002 fbfb 	bl	d708 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    af12:	4809      	ldr	r0, [pc, #36]	; (af38 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x60>)
    af14:	f7f9 fda0 	bl	4a58 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    af18:	2000      	movs	r0, #0
    af1a:	f7f9 f8b3 	bl	4084 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    af1e:	4908      	ldr	r1, [pc, #32]	; (af40 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x68>)
    af20:	4806      	ldr	r0, [pc, #24]	; (af3c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x64>)
    af22:	6008      	str	r0, [r1, #0]
    af24:	f7fd fd62 	bl	89ec <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    af28:	4907      	ldr	r1, [pc, #28]	; (af48 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x70>)
    af2a:	4806      	ldr	r0, [pc, #24]	; (af44 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x6c>)
    af2c:	6008      	str	r0, [r1, #0]
    af2e:	4908      	ldr	r1, [pc, #32]	; (af50 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x78>)
    af30:	4806      	ldr	r0, [pc, #24]	; (af4c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x74>)
    af32:	6008      	str	r0, [r1, #0]
    af34:	bd10      	pop	{r4, pc}
    af36:	0000      	.short	0x0000
    af38:	20001245 	.word	0x20001245
    af3c:	00004a05 	.word	0x00004a05
    af40:	2000021c 	.word	0x2000021c
    af44:	00008785 	.word	0x00008785
    af48:	20000210 	.word	0x20000210
    af4c:	00005e39 	.word	0x00005e39
    af50:	2000020c 	.word	0x2000020c
    af54:	b510      	push	{r4, lr}
    af56:	f7fb fb6d 	bl	6634 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    af5a:	f7ff fae9 	bl	a530 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    af5e:	f7fc fc47 	bl	77f0 <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ>
    af62:	4805      	ldr	r0, [pc, #20]	; (af78 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa0>)
    af64:	f7fb fb02 	bl	656c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    af68:	4905      	ldr	r1, [pc, #20]	; (af80 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa8>)
    af6a:	4804      	ldr	r0, [pc, #16]	; (af7c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa4>)
    af6c:	6008      	str	r0, [r1, #0]
    af6e:	4906      	ldr	r1, [pc, #24]	; (af88 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xb0>)
    af70:	4804      	ldr	r0, [pc, #16]	; (af84 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xac>)
    af72:	6008      	str	r0, [r1, #0]
    af74:	bd10      	pop	{r4, pc}
    af76:	0000      	.short	0x0000
    af78:	20001245 	.word	0x20001245
    af7c:	000064c1 	.word	0x000064c1
    af80:	20000214 	.word	0x20000214
    af84:	00005f75 	.word	0x00005f75
    af88:	20000218 	.word	0x20000218

0000af8c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    af8c:	2101      	movs	r1, #1
    af8e:	4081      	lsls	r1, r0
    af90:	4802      	ldr	r0, [pc, #8]	; (af9c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    af92:	6802      	ldr	r2, [r0, #0]
    af94:	4311      	orrs	r1, r2
    af96:	6001      	str	r1, [r0, #0]
    af98:	4770      	bx	lr
    af9a:	0000      	.short	0x0000
    af9c:	20000248 	.word	0x20000248

0000afa0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    afa0:	4801      	ldr	r0, [pc, #4]	; (afa8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    afa2:	6800      	ldr	r0, [r0, #0]
    afa4:	4770      	bx	lr
    afa6:	0000      	.short	0x0000
    afa8:	20000248 	.word	0x20000248

0000afac <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    afac:	4803      	ldr	r0, [pc, #12]	; (afbc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    afae:	8800      	ldrh	r0, [r0, #0]
    afb0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    afb4:	0040      	lsls	r0, r0, #1
    afb6:	1c40      	adds	r0, r0, #1
    afb8:	4770      	bx	lr
    afba:	0000      	.short	0x0000
    afbc:	20000248 	.word	0x20000248

0000afc0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    afc0:	b510      	push	{r4, lr}
    afc2:	f7f8 faf5 	bl	35b0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    afc6:	2200      	movs	r2, #0
    afc8:	4b08      	ldr	r3, [pc, #32]	; (afec <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    afca:	4611      	mov	r1, r2
    afcc:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    afd0:	4284      	cmp	r4, r0
    afd2:	d303      	bcc.n	afdc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    afd4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    afd8:	7882      	ldrb	r2, [r0, #2]
    afda:	e003      	b.n	afe4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    afdc:	1c49      	adds	r1, r1, #1
    afde:	b2c9      	uxtb	r1, r1
    afe0:	290c      	cmp	r1, #12
    afe2:	d3f3      	bcc.n	afcc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    afe4:	4802      	ldr	r0, [pc, #8]	; (aff0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    afe6:	7002      	strb	r2, [r0, #0]
    afe8:	bd10      	pop	{r4, pc}
    afea:	0000      	.short	0x0000
    afec:	0000f68a 	.word	0x0000f68a
    aff0:	20000297 	.word	0x20000297

0000aff4 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    aff4:	4801      	ldr	r0, [pc, #4]	; (affc <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    aff6:	7800      	ldrb	r0, [r0, #0]
    aff8:	4770      	bx	lr
    affa:	0000      	.short	0x0000
    affc:	20000297 	.word	0x20000297

0000b000 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b000:	b570      	push	{r4, r5, r6, lr}
    b002:	4605      	mov	r5, r0
    b004:	4616      	mov	r6, r2
    b006:	460c      	mov	r4, r1
    b008:	2002      	movs	r0, #2
    b00a:	f000 f9f9 	bl	b400 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b00e:	4906      	ldr	r1, [pc, #24]	; (b028 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b010:	2001      	movs	r0, #1
    b012:	1ef6      	subs	r6, r6, #3
    b014:	7008      	strb	r0, [r1, #0]
    b016:	4805      	ldr	r0, [pc, #20]	; (b02c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b018:	6006      	str	r6, [r0, #0]
    b01a:	4804      	ldr	r0, [pc, #16]	; (b02c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b01c:	3808      	subs	r0, #8
    b01e:	6005      	str	r5, [r0, #0]
    b020:	1f00      	subs	r0, r0, #4
    b022:	6004      	str	r4, [r0, #0]
    b024:	bd70      	pop	{r4, r5, r6, pc}
    b026:	0000      	.short	0x0000
    b028:	20000298 	.word	0x20000298
    b02c:	4000f510 	.word	0x4000f510

0000b030 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b030:	b510      	push	{r4, lr}
    b032:	4c0c      	ldr	r4, [pc, #48]	; (b064 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b034:	7820      	ldrb	r0, [r4, #0]
    b036:	b180      	cbz	r0, b05a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b038:	490b      	ldr	r1, [pc, #44]	; (b068 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b03a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b03e:	6008      	str	r0, [r1, #0]
    b040:	f000 f86a 	bl	b118 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b044:	2100      	movs	r1, #0
    b046:	b120      	cbz	r0, b052 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b048:	2001      	movs	r0, #1
    b04a:	7060      	strb	r0, [r4, #1]
    b04c:	4807      	ldr	r0, [pc, #28]	; (b06c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b04e:	6800      	ldr	r0, [r0, #0]
    b050:	e001      	b.n	b056 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b052:	7061      	strb	r1, [r4, #1]
    b054:	2010      	movs	r0, #16
    b056:	70a0      	strb	r0, [r4, #2]
    b058:	7021      	strb	r1, [r4, #0]
    b05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b05e:	2000      	movs	r0, #0
    b060:	f000 b9ce 	b.w	b400 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b064:	20000298 	.word	0x20000298
    b068:	4001f508 	.word	0x4001f508
    b06c:	4000f400 	.word	0x4000f400

0000b070 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b070:	b510      	push	{r4, lr}
    b072:	2002      	movs	r0, #2
    b074:	f000 f9c4 	bl	b400 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b078:	4904      	ldr	r1, [pc, #16]	; (b08c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b07a:	2001      	movs	r0, #1
    b07c:	7008      	strb	r0, [r1, #0]
    b07e:	f000 f859 	bl	b134 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b082:	4903      	ldr	r1, [pc, #12]	; (b090 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b084:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b088:	6008      	str	r0, [r1, #0]
    b08a:	bd10      	pop	{r4, pc}
    b08c:	20000298 	.word	0x20000298
    b090:	4001f504 	.word	0x4001f504

0000b094 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b094:	4803      	ldr	r0, [pc, #12]	; (b0a4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b096:	2100      	movs	r1, #0
    b098:	7001      	strb	r1, [r0, #0]
    b09a:	7041      	strb	r1, [r0, #1]
    b09c:	2110      	movs	r1, #16
    b09e:	7081      	strb	r1, [r0, #2]
    b0a0:	4770      	bx	lr
    b0a2:	0000      	.short	0x0000
    b0a4:	20000298 	.word	0x20000298

0000b0a8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b0a8:	4807      	ldr	r0, [pc, #28]	; (b0c8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b0aa:	b510      	push	{r4, lr}
    b0ac:	7801      	ldrb	r1, [r0, #0]
    b0ae:	b141      	cbz	r1, b0c2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b0b0:	f000 f832 	bl	b118 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b0b4:	b118      	cbz	r0, b0be <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b0b6:	4805      	ldr	r0, [pc, #20]	; (b0cc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b0b8:	6800      	ldr	r0, [r0, #0]
    b0ba:	b2c0      	uxtb	r0, r0
    b0bc:	bd10      	pop	{r4, pc}
    b0be:	2010      	movs	r0, #16
    b0c0:	bd10      	pop	{r4, pc}
    b0c2:	7880      	ldrb	r0, [r0, #2]
    b0c4:	bd10      	pop	{r4, pc}
    b0c6:	0000      	.short	0x0000
    b0c8:	20000298 	.word	0x20000298
    b0cc:	4000f400 	.word	0x4000f400

0000b0d0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b0d0:	4808      	ldr	r0, [pc, #32]	; (b0f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b0d2:	b510      	push	{r4, lr}
    b0d4:	7801      	ldrb	r1, [r0, #0]
    b0d6:	b159      	cbz	r1, b0f0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b0d8:	4807      	ldr	r0, [pc, #28]	; (b0f8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b0da:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b0de:	b128      	cbz	r0, b0ec <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b0e0:	f000 f80c 	bl	b0fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b0e4:	2800      	cmp	r0, #0
    b0e6:	d000      	beq.n	b0ea <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b0e8:	2001      	movs	r0, #1
    b0ea:	bd10      	pop	{r4, pc}
    b0ec:	2002      	movs	r0, #2
    b0ee:	bd10      	pop	{r4, pc}
    b0f0:	7840      	ldrb	r0, [r0, #1]
    b0f2:	bd10      	pop	{r4, pc}
    b0f4:	20000298 	.word	0x20000298
    b0f8:	4000f000 	.word	0x4000f000
    b0fc:	4805      	ldr	r0, [pc, #20]	; (b114 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b0fe:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b102:	b111      	cbz	r1, b10a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b104:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b108:	b108      	cbz	r0, b10e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b10a:	2000      	movs	r0, #0
    b10c:	4770      	bx	lr
    b10e:	2001      	movs	r0, #1
    b110:	4770      	bx	lr
    b112:	0000      	.short	0x0000
    b114:	4000f000 	.word	0x4000f000
    b118:	4805      	ldr	r0, [pc, #20]	; (b130 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b11a:	b510      	push	{r4, lr}
    b11c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b120:	b120      	cbz	r0, b12c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b122:	f7ff ffeb 	bl	b0fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b126:	b108      	cbz	r0, b12c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b128:	2001      	movs	r0, #1
    b12a:	bd10      	pop	{r4, pc}
    b12c:	2000      	movs	r0, #0
    b12e:	bd10      	pop	{r4, pc}
    b130:	4000f000 	.word	0x4000f000
    b134:	4804      	ldr	r0, [pc, #16]	; (b148 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b136:	2100      	movs	r1, #0
    b138:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b13c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b140:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b144:	4770      	bx	lr
    b146:	0000      	.short	0x0000
    b148:	4000f000 	.word	0x4000f000

0000b14c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    b14c:	4a08      	ldr	r2, [pc, #32]	; (b170 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    b14e:	b510      	push	{r4, lr}
    b150:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b154:	4907      	ldr	r1, [pc, #28]	; (b174 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    b156:	4610      	mov	r0, r2
    b158:	f7f8 fc6c 	bl	3a34 <mpsl_fem_lna_configuration_set>
    b15c:	2800      	cmp	r0, #0
    b15e:	d005      	beq.n	b16c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b160:	1c40      	adds	r0, r0, #1
    b162:	d003      	beq.n	b16c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b164:	217d      	movs	r1, #125	; 0x7d
    b166:	2040      	movs	r0, #64	; 0x40
    b168:	f7f8 fdc4 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b16c:	bd10      	pop	{r4, pc}
    b16e:	0000      	.short	0x0000
    b170:	2000024c 	.word	0x2000024c
    b174:	0000b1a4 	.word	0x0000b1a4

0000b178 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    b178:	4a08      	ldr	r2, [pc, #32]	; (b19c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    b17a:	b510      	push	{r4, lr}
    b17c:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b180:	4907      	ldr	r1, [pc, #28]	; (b1a0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    b182:	4610      	mov	r0, r2
    b184:	f7f8 fc62 	bl	3a4c <mpsl_fem_pa_configuration_set>
    b188:	2800      	cmp	r0, #0
    b18a:	d005      	beq.n	b198 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b18c:	1c40      	adds	r0, r0, #1
    b18e:	d003      	beq.n	b198 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b190:	2172      	movs	r1, #114	; 0x72
    b192:	2040      	movs	r0, #64	; 0x40
    b194:	f7f8 fdae 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b198:	bd10      	pop	{r4, pc}
    b19a:	0000      	.short	0x0000
    b19c:	2000024c 	.word	0x2000024c
    b1a0:	0000b1a4 	.word	0x0000b1a4
    b1a4:	00000001 	.word	0x00000001
    b1a8:	40001110 	.word	0x40001110
	...

0000b1bc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    b1bc:	4a07      	ldr	r2, [pc, #28]	; (b1dc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    b1be:	b510      	push	{r4, lr}
    b1c0:	7853      	ldrb	r3, [r2, #1]
    b1c2:	b133      	cbz	r3, b1d2 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    b1c4:	4b06      	ldr	r3, [pc, #24]	; (b1e0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    b1c6:	6019      	str	r1, [r3, #0]
    b1c8:	1d19      	adds	r1, r3, #4
    b1ca:	6008      	str	r0, [r1, #0]
    b1cc:	2001      	movs	r0, #1
    b1ce:	7090      	strb	r0, [r2, #2]
    b1d0:	bd10      	pop	{r4, pc}
    b1d2:	21ba      	movs	r1, #186	; 0xba
    b1d4:	203c      	movs	r0, #60	; 0x3c
    b1d6:	f7f8 fd8d 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1da:	0000      	.short	0x0000
    b1dc:	2000029b 	.word	0x2000029b
    b1e0:	4000f50c 	.word	0x4000f50c

0000b1e4 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    b1e4:	4809      	ldr	r0, [pc, #36]	; (b20c <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    b1e6:	b510      	push	{r4, lr}
    b1e8:	7801      	ldrb	r1, [r0, #0]
    b1ea:	b151      	cbz	r1, b202 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b1ec:	7880      	ldrb	r0, [r0, #2]
    b1ee:	b140      	cbz	r0, b202 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b1f0:	4907      	ldr	r1, [pc, #28]	; (b210 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    b1f2:	2000      	movs	r0, #0
    b1f4:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b1f8:	4906      	ldr	r1, [pc, #24]	; (b214 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    b1fa:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    b1fe:	6008      	str	r0, [r1, #0]
    b200:	bd10      	pop	{r4, pc}
    b202:	21e1      	movs	r1, #225	; 0xe1
    b204:	203c      	movs	r0, #60	; 0x3c
    b206:	f7f8 fd75 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b20a:	0000      	.short	0x0000
    b20c:	2000029b 	.word	0x2000029b
    b210:	4000f000 	.word	0x4000f000
    b214:	4001f504 	.word	0x4001f504

0000b218 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b218:	b570      	push	{r4, r5, r6, lr}
    b21a:	4c0b      	ldr	r4, [pc, #44]	; (b248 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    b21c:	2500      	movs	r5, #0
    b21e:	7820      	ldrb	r0, [r4, #0]
    b220:	b158      	cbz	r0, b23a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    b222:	f000 f8e5 	bl	b3f0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b226:	4809      	ldr	r0, [pc, #36]	; (b24c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    b228:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b22c:	b118      	cbz	r0, b236 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    b22e:	4808      	ldr	r0, [pc, #32]	; (b250 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    b230:	6800      	ldr	r0, [r0, #0]
    b232:	70e0      	strb	r0, [r4, #3]
    b234:	e000      	b.n	b238 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    b236:	70e5      	strb	r5, [r4, #3]
    b238:	7025      	strb	r5, [r4, #0]
    b23a:	2000      	movs	r0, #0
    b23c:	f000 f8e0 	bl	b400 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b240:	7065      	strb	r5, [r4, #1]
    b242:	70a5      	strb	r5, [r4, #2]
    b244:	bd70      	pop	{r4, r5, r6, pc}
    b246:	0000      	.short	0x0000
    b248:	2000029b 	.word	0x2000029b
    b24c:	4000f000 	.word	0x4000f000
    b250:	4000f400 	.word	0x4000f400

0000b254 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    b254:	480d      	ldr	r0, [pc, #52]	; (b28c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    b256:	b510      	push	{r4, lr}
    b258:	7801      	ldrb	r1, [r0, #0]
    b25a:	b191      	cbz	r1, b282 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b25c:	7880      	ldrb	r0, [r0, #2]
    b25e:	b180      	cbz	r0, b282 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b260:	490b      	ldr	r1, [pc, #44]	; (b290 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    b262:	2000      	movs	r0, #0
    b264:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b268:	4a0a      	ldr	r2, [pc, #40]	; (b294 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b26a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b26e:	6010      	str	r0, [r2, #0]
    b270:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    b274:	2a01      	cmp	r2, #1
    b276:	d103      	bne.n	b280 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    b278:	604a      	str	r2, [r1, #4]
    b27a:	4906      	ldr	r1, [pc, #24]	; (b294 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b27c:	1d09      	adds	r1, r1, #4
    b27e:	6008      	str	r0, [r1, #0]
    b280:	bd10      	pop	{r4, pc}
    b282:	21d1      	movs	r1, #209	; 0xd1
    b284:	203c      	movs	r0, #60	; 0x3c
    b286:	f7f8 fd35 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b28a:	0000      	.short	0x0000
    b28c:	2000029b 	.word	0x2000029b
    b290:	4000f000 	.word	0x4000f000
    b294:	4001f504 	.word	0x4001f504

0000b298 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b298:	4803      	ldr	r0, [pc, #12]	; (b2a8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    b29a:	2100      	movs	r1, #0
    b29c:	7001      	strb	r1, [r0, #0]
    b29e:	7041      	strb	r1, [r0, #1]
    b2a0:	7081      	strb	r1, [r0, #2]
    b2a2:	70c1      	strb	r1, [r0, #3]
    b2a4:	4770      	bx	lr
    b2a6:	0000      	.short	0x0000
    b2a8:	2000029b 	.word	0x2000029b

0000b2ac <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    b2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2b0:	4605      	mov	r5, r0
    b2b2:	461c      	mov	r4, r3
    b2b4:	4690      	mov	r8, r2
    b2b6:	460f      	mov	r7, r1
    b2b8:	2001      	movs	r0, #1
    b2ba:	f000 f8a1 	bl	b400 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b2be:	4e12      	ldr	r6, [pc, #72]	; (b308 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    b2c0:	4812      	ldr	r0, [pc, #72]	; (b30c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b2c2:	7134      	strb	r4, [r6, #4]
    b2c4:	6007      	str	r7, [r0, #0]
    b2c6:	4911      	ldr	r1, [pc, #68]	; (b30c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b2c8:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    b2cc:	1f09      	subs	r1, r1, #4
    b2ce:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    b2d2:	6008      	str	r0, [r1, #0]
    b2d4:	f001 f8c4 	bl	c460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b2d8:	b938      	cbnz	r0, b2ea <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    b2da:	480c      	ldr	r0, [pc, #48]	; (b30c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b2dc:	3010      	adds	r0, #16
    b2de:	6801      	ldr	r1, [r0, #0]
    b2e0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b2e4:	ea41 0108 	orr.w	r1, r1, r8
    b2e8:	6001      	str	r1, [r0, #0]
    b2ea:	f000 f881 	bl	b3f0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b2ee:	b93d      	cbnz	r5, b300 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    b2f0:	4808      	ldr	r0, [pc, #32]	; (b314 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    b2f2:	4a07      	ldr	r2, [pc, #28]	; (b310 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b2f4:	4906      	ldr	r1, [pc, #24]	; (b310 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b2f6:	3afc      	subs	r2, #252	; 0xfc
    b2f8:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b2fc:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    b300:	2001      	movs	r0, #1
    b302:	7070      	strb	r0, [r6, #1]
    b304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b308:	2000029b 	.word	0x2000029b
    b30c:	4000f508 	.word	0x4000f508
    b310:	4000f100 	.word	0x4000f100
    b314:	4001f088 	.word	0x4001f088

0000b318 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    b318:	4808      	ldr	r0, [pc, #32]	; (b33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    b31a:	b510      	push	{r4, lr}
    b31c:	7841      	ldrb	r1, [r0, #1]
    b31e:	b149      	cbz	r1, b334 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    b320:	2101      	movs	r1, #1
    b322:	7001      	strb	r1, [r0, #0]
    b324:	4806      	ldr	r0, [pc, #24]	; (b340 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    b326:	2200      	movs	r2, #0
    b328:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    b32c:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    b330:	6001      	str	r1, [r0, #0]
    b332:	bd10      	pop	{r4, pc}
    b334:	21c5      	movs	r1, #197	; 0xc5
    b336:	203c      	movs	r0, #60	; 0x3c
    b338:	f7f8 fcdc 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b33c:	2000029b 	.word	0x2000029b
    b340:	4000f000 	.word	0x4000f000

0000b344 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b344:	4806      	ldr	r0, [pc, #24]	; (b360 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    b346:	7801      	ldrb	r1, [r0, #0]
    b348:	b141      	cbz	r1, b35c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    b34a:	4806      	ldr	r0, [pc, #24]	; (b364 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    b34c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b350:	2800      	cmp	r0, #0
    b352:	d002      	beq.n	b35a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    b354:	4804      	ldr	r0, [pc, #16]	; (b368 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    b356:	6800      	ldr	r0, [r0, #0]
    b358:	b2c0      	uxtb	r0, r0
    b35a:	4770      	bx	lr
    b35c:	78c0      	ldrb	r0, [r0, #3]
    b35e:	4770      	bx	lr
    b360:	2000029b 	.word	0x2000029b
    b364:	4000f000 	.word	0x4000f000
    b368:	4000f400 	.word	0x4000f400

0000b36c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b36c:	4901      	ldr	r1, [pc, #4]	; (b374 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b36e:	2001      	movs	r0, #1
    b370:	6088      	str	r0, [r1, #8]
    b372:	4770      	bx	lr
    b374:	4000f000 	.word	0x4000f000

0000b378 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b37c:	2800      	cmp	r0, #0
    b37e:	d02e      	beq.n	b3de <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b380:	4818      	ldr	r0, [pc, #96]	; (b3e4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    b382:	7800      	ldrb	r0, [r0, #0]
    b384:	b1b0      	cbz	r0, b3b4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    b386:	4d18      	ldr	r5, [pc, #96]	; (b3e8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    b388:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b38c:	2800      	cmp	r0, #0
    b38e:	d126      	bne.n	b3de <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b390:	2702      	movs	r7, #2
    b392:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    b396:	4c15      	ldr	r4, [pc, #84]	; (b3ec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b398:	6820      	ldr	r0, [r4, #0]
    b39a:	43c0      	mvns	r0, r0
    b39c:	f340 1600 	sbfx	r6, r0, #4, #1
    b3a0:	6820      	ldr	r0, [r4, #0]
    b3a2:	f040 0010 	orr.w	r0, r0, #16
    b3a6:	6020      	str	r0, [r4, #0]
    b3a8:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    b3ac:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b3b0:	1c76      	adds	r6, r6, #1
    b3b2:	e009      	b.n	b3c8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    b3b4:	f240 1153 	movw	r1, #339	; 0x153
    b3b8:	203c      	movs	r0, #60	; 0x3c
    b3ba:	f7f8 fc9b 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3be:	bf00      	nop
    b3c0:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    b3c4:	f7f8 fae0 	bl	3988 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b3c8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b3cc:	2800      	cmp	r0, #0
    b3ce:	d0f7      	beq.n	b3c0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    b3d0:	b91e      	cbnz	r6, b3da <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b3d2:	6820      	ldr	r0, [r4, #0]
    b3d4:	f020 0010 	bic.w	r0, r0, #16
    b3d8:	6020      	str	r0, [r4, #0]
    b3da:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    b3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b3e2:	0000      	.short	0x0000
    b3e4:	2000029b 	.word	0x2000029b
    b3e8:	4000f000 	.word	0x4000f000
    b3ec:	e000ed10 	.word	0xe000ed10
    b3f0:	4902      	ldr	r1, [pc, #8]	; (b3fc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    b3f2:	4801      	ldr	r0, [pc, #4]	; (b3f8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    b3f4:	6008      	str	r0, [r1, #0]
    b3f6:	4770      	bx	lr
    b3f8:	02020000 	.word	0x02020000
    b3fc:	4001f508 	.word	0x4001f508

0000b400 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b400:	b510      	push	{r4, lr}
    b402:	4604      	mov	r4, r0
    b404:	f000 f822 	bl	b44c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    b408:	2c00      	cmp	r4, #0
    b40a:	d017      	beq.n	b43c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    b40c:	4a0c      	ldr	r2, [pc, #48]	; (b440 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b40e:	480c      	ldr	r0, [pc, #48]	; (b440 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b410:	490c      	ldr	r1, [pc, #48]	; (b444 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b412:	3214      	adds	r2, #20
    b414:	4b0c      	ldr	r3, [pc, #48]	; (b448 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    b416:	2c01      	cmp	r4, #1
    b418:	d005      	beq.n	b426 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    b41a:	2c02      	cmp	r4, #2
    b41c:	d008      	beq.n	b430 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    b41e:	2183      	movs	r1, #131	; 0x83
    b420:	203d      	movs	r0, #61	; 0x3d
    b422:	f7f8 fc67 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b426:	2402      	movs	r4, #2
    b428:	6004      	str	r4, [r0, #0]
    b42a:	6011      	str	r1, [r2, #0]
    b42c:	0620      	lsls	r0, r4, #24
    b42e:	e004      	b.n	b43a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    b430:	2403      	movs	r4, #3
    b432:	6004      	str	r4, [r0, #0]
    b434:	6011      	str	r1, [r2, #0]
    b436:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b43a:	6018      	str	r0, [r3, #0]
    b43c:	bd10      	pop	{r4, pc}
    b43e:	0000      	.short	0x0000
    b440:	4000f500 	.word	0x4000f500
    b444:	20001347 	.word	0x20001347
    b448:	4001f504 	.word	0x4001f504
    b44c:	4804      	ldr	r0, [pc, #16]	; (b460 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b44e:	2100      	movs	r1, #0
    b450:	6001      	str	r1, [r0, #0]
    b452:	6001      	str	r1, [r0, #0]
    b454:	4903      	ldr	r1, [pc, #12]	; (b464 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b456:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    b45a:	6008      	str	r0, [r1, #0]
    b45c:	4770      	bx	lr
    b45e:	0000      	.short	0x0000
    b460:	4000f500 	.word	0x4000f500
    b464:	4001f508 	.word	0x4001f508

0000b468 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b468:	4805      	ldr	r0, [pc, #20]	; (b480 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b46a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b46e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b472:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b476:	4903      	ldr	r1, [pc, #12]	; (b484 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    b478:	2000      	movs	r0, #0
    b47a:	6008      	str	r0, [r1, #0]
    b47c:	4770      	bx	lr
    b47e:	0000      	.short	0x0000
    b480:	40001000 	.word	0x40001000
    b484:	40001560 	.word	0x40001560

0000b488 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b488:	4904      	ldr	r1, [pc, #16]	; (b49c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b48a:	6008      	str	r0, [r1, #0]
    b48c:	4804      	ldr	r0, [pc, #16]	; (b4a0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    b48e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b492:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    b496:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b49a:	4770      	bx	lr
    b49c:	40001560 	.word	0x40001560
    b4a0:	40001000 	.word	0x40001000

0000b4a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4a6:	4c1e      	ldr	r4, [pc, #120]	; (b520 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    b4a8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b4ac:	2710      	movs	r7, #16
    b4ae:	f3c0 1600 	ubfx	r6, r0, #4, #1
    b4b2:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    b4b6:	2002      	movs	r0, #2
    b4b8:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b4bc:	4819      	ldr	r0, [pc, #100]	; (b524 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    b4be:	2500      	movs	r5, #0
    b4c0:	491a      	ldr	r1, [pc, #104]	; (b52c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    b4c2:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b4c6:	4818      	ldr	r0, [pc, #96]	; (b528 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    b4c8:	6008      	str	r0, [r1, #0]
    b4ca:	4819      	ldr	r0, [pc, #100]	; (b530 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    b4cc:	6800      	ldr	r0, [r0, #0]
    b4ce:	b1b0      	cbz	r0, b4fe <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    b4d0:	20ff      	movs	r0, #255	; 0xff
    b4d2:	f88d 0000 	strb.w	r0, [sp]
    b4d6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b4da:	2001      	movs	r0, #1
    b4dc:	6120      	str	r0, [r4, #16]
    b4de:	e004      	b.n	b4ea <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    b4e0:	f89d 0000 	ldrb.w	r0, [sp]
    b4e4:	1e40      	subs	r0, r0, #1
    b4e6:	f88d 0000 	strb.w	r0, [sp]
    b4ea:	f89d 0000 	ldrb.w	r0, [sp]
    b4ee:	b118      	cbz	r0, b4f8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    b4f0:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    b4f4:	2800      	cmp	r0, #0
    b4f6:	d0f3      	beq.n	b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    b4f8:	f89d 0000 	ldrb.w	r0, [sp]
    b4fc:	b150      	cbz	r0, b514 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    b4fe:	f000 fc6f 	bl	bde0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    b502:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b506:	f000 fde7 	bl	c0d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    b50a:	2e00      	cmp	r6, #0
    b50c:	d001      	beq.n	b512 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b50e:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    b512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b514:	f240 71a3 	movw	r1, #1955	; 0x7a3
    b518:	203e      	movs	r0, #62	; 0x3e
    b51a:	f7f8 fbeb 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b51e:	0000      	.short	0x0000
    b520:	40001000 	.word	0x40001000
    b524:	20001004 	.word	0x20001004
    b528:	0c0e0000 	.word	0x0c0e0000
    b52c:	4001f508 	.word	0x4001f508
    b530:	40001550 	.word	0x40001550

0000b534 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b538:	4c1f      	ldr	r4, [pc, #124]	; (b5b8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    b53a:	4607      	mov	r7, r0
    b53c:	4688      	mov	r8, r1
    b53e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b542:	07c1      	lsls	r1, r0, #31
    b544:	d018      	beq.n	b578 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    b546:	4a1d      	ldr	r2, [pc, #116]	; (b5bc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    b548:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b54c:	6011      	str	r1, [r2, #0]
    b54e:	4d1c      	ldr	r5, [pc, #112]	; (b5c0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    b550:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    b554:	f041 0101 	orr.w	r1, r1, #1
    b558:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    b55c:	f040 0002 	orr.w	r0, r0, #2
    b560:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b564:	4640      	mov	r0, r8
    b566:	f000 fe1b 	bl	c1a0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b56a:	f000 fbe7 	bl	bd3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b56e:	2601      	movs	r6, #1
    b570:	b13f      	cbz	r7, b582 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    b572:	2f01      	cmp	r7, #1
    b574:	d00e      	beq.n	b594 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    b576:	e016      	b.n	b5a6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b578:	f240 612d 	movw	r1, #1581	; 0x62d
    b57c:	203e      	movs	r0, #62	; 0x3e
    b57e:	f7f8 fbb9 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b582:	4640      	mov	r0, r8
    b584:	f000 fbfa 	bl	bd7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    b588:	4640      	mov	r0, r8
    b58a:	f000 fbbb 	bl	bd04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b58e:	7266      	strb	r6, [r4, #9]
    b590:	602e      	str	r6, [r5, #0]
    b592:	e008      	b.n	b5a6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b594:	f000 fc1a 	bl	bdcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    b598:	f000 fd68 	bl	c06c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    b59c:	2002      	movs	r0, #2
    b59e:	7260      	strb	r0, [r4, #9]
    b5a0:	f000 fc90 	bl	bec4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    b5a4:	606e      	str	r6, [r5, #4]
    b5a6:	4807      	ldr	r0, [pc, #28]	; (b5c4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    b5a8:	64c6      	str	r6, [r0, #76]	; 0x4c
    b5aa:	4807      	ldr	r0, [pc, #28]	; (b5c8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b5ac:	6801      	ldr	r1, [r0, #0]
    b5ae:	4638      	mov	r0, r7
    b5b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b5b4:	f004 b920 	b.w	f7f8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b5b8:	20001004 	.word	0x20001004
    b5bc:	4001f504 	.word	0x4001f504
    b5c0:	40001000 	.word	0x40001000
    b5c4:	40008000 	.word	0x40008000
    b5c8:	4000854c 	.word	0x4000854c

0000b5cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5d0:	4d35      	ldr	r5, [pc, #212]	; (b6a8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    b5d2:	4606      	mov	r6, r0
    b5d4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b5d8:	4689      	mov	r9, r1
    b5da:	6028      	str	r0, [r5, #0]
    b5dc:	4c33      	ldr	r4, [pc, #204]	; (b6ac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    b5de:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b5e2:	f040 0002 	orr.w	r0, r0, #2
    b5e6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b5ea:	4608      	mov	r0, r1
    b5ec:	f000 fdd8 	bl	c1a0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b5f0:	f000 fba4 	bl	bd3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b5f4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6b0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    b5f8:	2700      	movs	r7, #0
    b5fa:	b116      	cbz	r6, b602 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b5fc:	2e01      	cmp	r6, #1
    b5fe:	d027      	beq.n	b650 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b600:	e03f      	b.n	b682 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b602:	4648      	mov	r0, r9
    b604:	f000 fbba 	bl	bd7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    b608:	79e0      	ldrb	r0, [r4, #7]
    b60a:	2801      	cmp	r0, #1
    b60c:	d105      	bne.n	b61a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b60e:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b612:	f041 0108 	orr.w	r1, r1, #8
    b616:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b61a:	4648      	mov	r0, r9
    b61c:	f000 fb72 	bl	bd04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b620:	2001      	movs	r0, #1
    b622:	7260      	strb	r0, [r4, #9]
    b624:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b626:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b62a:	62a0      	str	r0, [r4, #40]	; 0x28
    b62c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b630:	6028      	str	r0, [r5, #0]
    b632:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b636:	f1b9 0f02 	cmp.w	r9, #2
    b63a:	d007      	beq.n	b64c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    b63c:	f640 0034 	movw	r0, #2100	; 0x834
    b640:	f649 72ec 	movw	r2, #40940	; 0x9fec
    b644:	4410      	add	r0, r2
    b646:	fbb0 f7f1 	udiv	r7, r0, r1
    b64a:	e01a      	b.n	b682 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b64c:	4608      	mov	r0, r1
    b64e:	e7f7      	b.n	b640 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    b650:	f000 fbbc 	bl	bdcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    b654:	f000 fd0a 	bl	c06c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    b658:	79e0      	ldrb	r0, [r4, #7]
    b65a:	2801      	cmp	r0, #1
    b65c:	d105      	bne.n	b66a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    b65e:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b662:	f041 0104 	orr.w	r1, r1, #4
    b666:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b66a:	2002      	movs	r0, #2
    b66c:	7260      	strb	r0, [r4, #9]
    b66e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b670:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b674:	62a0      	str	r0, [r4, #40]	; 0x28
    b676:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b67a:	6028      	str	r0, [r5, #0]
    b67c:	2729      	movs	r7, #41	; 0x29
    b67e:	f000 fc21 	bl	bec4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    b682:	f000 fc0b 	bl	be9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    b686:	f000 fdc5 	bl	c214 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    b68a:	6800      	ldr	r0, [r0, #0]
    b68c:	2801      	cmp	r0, #1
    b68e:	d006      	beq.n	b69e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    b690:	2100      	movs	r1, #0
    b692:	4630      	mov	r0, r6
    b694:	f004 f8b0 	bl	f7f8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b698:	4638      	mov	r0, r7
    b69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b69e:	f7ff ff01 	bl	b4a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b6a2:	2000      	movs	r0, #0
    b6a4:	e7f9      	b.n	b69a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    b6a6:	0000      	.short	0x0000
    b6a8:	4001f504 	.word	0x4001f504
    b6ac:	20001004 	.word	0x20001004
    b6b0:	40001000 	.word	0x40001000

0000b6b4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b6b4:	b510      	push	{r4, lr}
    b6b6:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    b6b8:	4901      	ldr	r1, [pc, #4]	; (b6c0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b6ba:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    b6be:	bd10      	pop	{r4, pc}
    b6c0:	20000ff4 	.word	0x20000ff4

0000b6c4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b6c4:	b570      	push	{r4, r5, r6, lr}
    b6c6:	4c10      	ldr	r4, [pc, #64]	; (b708 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b6c8:	4606      	mov	r6, r0
    b6ca:	2002      	movs	r0, #2
    b6cc:	7320      	strb	r0, [r4, #12]
    b6ce:	2596      	movs	r5, #150	; 0x96
    b6d0:	f000 f856 	bl	b780 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b6d4:	4602      	mov	r2, r0
    b6d6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    b6da:	f894 1020 	ldrb.w	r1, [r4, #32]
    b6de:	2801      	cmp	r0, #1
    b6e0:	d00d      	beq.n	b6fe <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    b6e2:	4628      	mov	r0, r5
    b6e4:	f004 f8a0 	bl	f828 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b6e8:	4908      	ldr	r1, [pc, #32]	; (b70c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    b6ea:	6120      	str	r0, [r4, #16]
    b6ec:	2000      	movs	r0, #0
    b6ee:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b6f2:	6921      	ldr	r1, [r4, #16]
    b6f4:	69e0      	ldr	r0, [r4, #28]
    b6f6:	4408      	add	r0, r1
    b6f8:	4905      	ldr	r1, [pc, #20]	; (b710 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b6fa:	6008      	str	r0, [r1, #0]
    b6fc:	bd70      	pop	{r4, r5, r6, pc}
    b6fe:	4633      	mov	r3, r6
    b700:	4628      	mov	r0, r5
    b702:	f004 f8ad 	bl	f860 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b706:	e7ef      	b.n	b6e8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    b708:	20001004 	.word	0x20001004
    b70c:	40008000 	.word	0x40008000
    b710:	40008544 	.word	0x40008544

0000b714 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b718:	2238      	movs	r2, #56	; 0x38
    b71a:	2100      	movs	r1, #0
    b71c:	4813      	ldr	r0, [pc, #76]	; (b76c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b71e:	f000 ff6b 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b722:	f000 fcd9 	bl	c0d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    b726:	f000 fe70 	bl	c40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b72a:	4d11      	ldr	r5, [pc, #68]	; (b770 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b72c:	4e10      	ldr	r6, [pc, #64]	; (b770 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b72e:	2400      	movs	r4, #0
    b730:	4f0f      	ldr	r7, [pc, #60]	; (b770 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b732:	3508      	adds	r5, #8
    b734:	3610      	adds	r6, #16
    b736:	b928      	cbnz	r0, b744 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b738:	f000 fe7e 	bl	c438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b73c:	b910      	cbnz	r0, b744 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b73e:	f000 fe85 	bl	c44c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b742:	b108      	cbz	r0, b748 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    b744:	2224      	movs	r2, #36	; 0x24
    b746:	e006      	b.n	b756 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b748:	f000 fec0 	bl	c4cc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b74c:	b910      	cbnz	r0, b754 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    b74e:	f000 feb3 	bl	c4b8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b752:	b140      	cbz	r0, b766 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    b754:	2240      	movs	r2, #64	; 0x40
    b756:	21ff      	movs	r1, #255	; 0xff
    b758:	4638      	mov	r0, r7
    b75a:	f000 ff4d 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b75e:	602c      	str	r4, [r5, #0]
    b760:	6034      	str	r4, [r6, #0]
    b762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b766:	2238      	movs	r2, #56	; 0x38
    b768:	e7f5      	b.n	b756 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b76a:	0000      	.short	0x0000
    b76c:	20001004 	.word	0x20001004
    b770:	40000e00 	.word	0x40000e00

0000b774 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    b774:	4801      	ldr	r0, [pc, #4]	; (b77c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    b776:	69c0      	ldr	r0, [r0, #28]
    b778:	4770      	bx	lr
    b77a:	0000      	.short	0x0000
    b77c:	20001004 	.word	0x20001004

0000b780 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    b780:	4814      	ldr	r0, [pc, #80]	; (b7d4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    b782:	b510      	push	{r4, lr}
    b784:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    b788:	7a40      	ldrb	r0, [r0, #9]
    b78a:	b141      	cbz	r1, b79e <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    b78c:	2902      	cmp	r1, #2
    b78e:	d00b      	beq.n	b7a8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b790:	2802      	cmp	r0, #2
    b792:	d009      	beq.n	b7a8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b794:	2901      	cmp	r1, #1
    b796:	d00b      	beq.n	b7b0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b798:	2801      	cmp	r0, #1
    b79a:	d009      	beq.n	b7b0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b79c:	e015      	b.n	b7ca <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    b79e:	2800      	cmp	r0, #0
    b7a0:	d1f6      	bne.n	b790 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    b7a2:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    b7a6:	e00d      	b.n	b7c4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    b7a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b7ac:	f000 bc10 	b.w	bfd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    b7b0:	4809      	ldr	r0, [pc, #36]	; (b7d8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    b7b2:	6800      	ldr	r0, [r0, #0]
    b7b4:	f000 000f 	and.w	r0, r0, #15
    b7b8:	2803      	cmp	r0, #3
    b7ba:	d006      	beq.n	b7ca <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    b7bc:	2804      	cmp	r0, #4
    b7be:	d006      	beq.n	b7ce <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    b7c0:	f240 11e7 	movw	r1, #487	; 0x1e7
    b7c4:	203e      	movs	r0, #62	; 0x3e
    b7c6:	f7f8 fa95 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7ca:	2001      	movs	r0, #1
    b7cc:	bd10      	pop	{r4, pc}
    b7ce:	2002      	movs	r0, #2
    b7d0:	bd10      	pop	{r4, pc}
    b7d2:	0000      	.short	0x0000
    b7d4:	20001004 	.word	0x20001004
    b7d8:	40001510 	.word	0x40001510

0000b7dc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b7dc:	b510      	push	{r4, lr}
    b7de:	f000 fc61 	bl	c0a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    b7e2:	f7ff fe5f 	bl	b4a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b7e6:	f003 ff9d 	bl	f724 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    b7ea:	480f      	ldr	r0, [pc, #60]	; (b828 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    b7ec:	4a0f      	ldr	r2, [pc, #60]	; (b82c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    b7ee:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b7f0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b7f4:	6011      	str	r1, [r2, #0]
    b7f6:	2400      	movs	r4, #0
    b7f8:	6284      	str	r4, [r0, #40]	; 0x28
    b7fa:	7304      	strb	r4, [r0, #12]
    b7fc:	61c4      	str	r4, [r0, #28]
    b7fe:	6184      	str	r4, [r0, #24]
    b800:	f000 fc50 	bl	c0a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    b804:	480a      	ldr	r0, [pc, #40]	; (b830 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    b806:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    b80a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    b80e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    b812:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    b816:	2001      	movs	r0, #1
    b818:	f003 ffbd 	bl	f796 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b820:	2001      	movs	r0, #1
    b822:	f003 bfab 	b.w	f77c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b826:	0000      	.short	0x0000
    b828:	20001004 	.word	0x20001004
    b82c:	4001f508 	.word	0x4001f508
    b830:	40008000 	.word	0x40008000

0000b834 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b838:	2001      	movs	r0, #1
    b83a:	f003 ffac 	bl	f796 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b83e:	4838      	ldr	r0, [pc, #224]	; (b920 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b840:	2400      	movs	r4, #0
    b842:	6004      	str	r4, [r0, #0]
    b844:	2601      	movs	r6, #1
    b846:	6006      	str	r6, [r0, #0]
    b848:	f000 fe16 	bl	c478 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b84c:	4d35      	ldr	r5, [pc, #212]	; (b924 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b84e:	b118      	cbz	r0, b858 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x24>
    b850:	6828      	ldr	r0, [r5, #0]
    b852:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b856:	6028      	str	r0, [r5, #0]
    b858:	f000 fe02 	bl	c460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b85c:	b128      	cbz	r0, b86a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x36>
    b85e:	6828      	ldr	r0, [r5, #0]
    b860:	4931      	ldr	r1, [pc, #196]	; (b928 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    b862:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b866:	4308      	orrs	r0, r1
    b868:	6028      	str	r0, [r5, #0]
    b86a:	f000 fe15 	bl	c498 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b86e:	b138      	cbz	r0, b880 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4c>
    b870:	482c      	ldr	r0, [pc, #176]	; (b924 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b872:	1d00      	adds	r0, r0, #4
    b874:	6801      	ldr	r1, [r0, #0]
    b876:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b87a:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    b87e:	6001      	str	r1, [r0, #0]
    b880:	4928      	ldr	r1, [pc, #160]	; (b924 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b882:	482a      	ldr	r0, [pc, #168]	; (b92c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b884:	313c      	adds	r1, #60	; 0x3c
    b886:	6008      	str	r0, [r1, #0]
    b888:	f7f8 f8ec 	bl	3a64 <mpsl_fem_device_config_254_apply_get>
    b88c:	b140      	cbz	r0, b8a0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    b88e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b892:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    b896:	1c41      	adds	r1, r0, #1
    b898:	d002      	beq.n	b8a0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    b89a:	4922      	ldr	r1, [pc, #136]	; (b924 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b89c:	3110      	adds	r1, #16
    b89e:	6008      	str	r0, [r1, #0]
    b8a0:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    b8a4:	6e00      	ldr	r0, [r0, #96]	; 0x60
    b8a6:	1c41      	adds	r1, r0, #1
    b8a8:	d004      	beq.n	b8b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x80>
    b8aa:	4921      	ldr	r1, [pc, #132]	; (b930 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b8ac:	680a      	ldr	r2, [r1, #0]
    b8ae:	f360 4217 	bfi	r2, r0, #16, #8
    b8b2:	600a      	str	r2, [r1, #0]
    b8b4:	491e      	ldr	r1, [pc, #120]	; (b930 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b8b6:	f240 605b 	movw	r0, #1627	; 0x65b
    b8ba:	3954      	subs	r1, #84	; 0x54
    b8bc:	6008      	str	r0, [r1, #0]
    b8be:	1f09      	subs	r1, r1, #4
    b8c0:	f240 1003 	movw	r0, #259	; 0x103
    b8c4:	6008      	str	r0, [r1, #0]
    b8c6:	1f08      	subs	r0, r1, #4
    b8c8:	6006      	str	r6, [r0, #0]
    b8ca:	2001      	movs	r0, #1
    b8cc:	f000 fc68 	bl	c1a0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b8d0:	4917      	ldr	r1, [pc, #92]	; (b930 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b8d2:	f240 1001 	movw	r0, #257	; 0x101
    b8d6:	31c4      	adds	r1, #196	; 0xc4
    b8d8:	6008      	str	r0, [r1, #0]
    b8da:	4e16      	ldr	r6, [pc, #88]	; (b934 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    b8dc:	2502      	movs	r5, #2
    b8de:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    b8e2:	4916      	ldr	r1, [pc, #88]	; (b93c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    b8e4:	4814      	ldr	r0, [pc, #80]	; (b938 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    b8e6:	6008      	str	r0, [r1, #0]
    b8e8:	4815      	ldr	r0, [pc, #84]	; (b940 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    b8ea:	4f16      	ldr	r7, [pc, #88]	; (b944 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    b8ec:	f506 7600 	add.w	r6, r6, #512	; 0x200
    b8f0:	8604      	strh	r4, [r0, #48]	; 0x30
    b8f2:	3010      	adds	r0, #16
    b8f4:	61c4      	str	r4, [r0, #28]
    b8f6:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
    b8fa:	703c      	strb	r4, [r7, #0]
    b8fc:	2001      	movs	r0, #1
    b8fe:	f003 ff3d 	bl	f77c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b902:	2010      	movs	r0, #16
    b904:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    b908:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b90c:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    b910:	6878      	ldr	r0, [r7, #4]
    b912:	2800      	cmp	r0, #0
    b914:	d002      	beq.n	b91c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>
    b916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b91a:	4700      	bx	r0
    b91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b920:	40001ffc 	.word	0x40001ffc
    b924:	4000173c 	.word	0x4000173c
    b928:	80000096 	.word	0x80000096
    b92c:	8900002c 	.word	0x8900002c
    b930:	4000158c 	.word	0x4000158c
    b934:	40001000 	.word	0x40001000
    b938:	0c0e0000 	.word	0x0c0e0000
    b93c:	4001f508 	.word	0x4001f508
    b940:	20000ff4 	.word	0x20000ff4
    b944:	20000264 	.word	0x20000264

0000b948 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    b948:	4901      	ldr	r1, [pc, #4]	; (b950 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    b94a:	7508      	strb	r0, [r1, #20]
    b94c:	4770      	bx	lr
    b94e:	0000      	.short	0x0000
    b950:	20001004 	.word	0x20001004

0000b954 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b954:	4904      	ldr	r1, [pc, #16]	; (b968 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    b956:	6008      	str	r0, [r1, #0]
    b958:	4804      	ldr	r0, [pc, #16]	; (b96c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    b95a:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    b95e:	f041 0101 	orr.w	r1, r1, #1
    b962:	7001      	strb	r1, [r0, #0]
    b964:	f000 ba62 	b.w	be2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    b968:	40001504 	.word	0x40001504
    b96c:	20001004 	.word	0x20001004

0000b970 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b974:	4e35      	ldr	r6, [pc, #212]	; (ba4c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    b976:	4607      	mov	r7, r0
    b978:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b97c:	468a      	mov	sl, r1
    b97e:	4614      	mov	r4, r2
    b980:	6030      	str	r0, [r6, #0]
    b982:	4610      	mov	r0, r2
    b984:	f000 fc0c 	bl	c1a0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b988:	f000 f9d8 	bl	bd3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b98c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; ba50 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    b990:	4d30      	ldr	r5, [pc, #192]	; (ba54 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    b992:	f04f 0801 	mov.w	r8, #1
    b996:	b127      	cbz	r7, b9a2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    b998:	2f01      	cmp	r7, #1
    b99a:	d01d      	beq.n	b9d8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    b99c:	f240 7122 	movw	r1, #1826	; 0x722
    b9a0:	e04a      	b.n	ba38 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    b9a2:	4620      	mov	r0, r4
    b9a4:	f000 f9ea 	bl	bd7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    b9a8:	4620      	mov	r0, r4
    b9aa:	f000 f9ab 	bl	bd04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b9ae:	2c02      	cmp	r4, #2
    b9b0:	d00f      	beq.n	b9d2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    b9b2:	f640 0034 	movw	r0, #2100	; 0x834
    b9b6:	bf00      	nop
    b9b8:	f649 51f8 	movw	r1, #40440	; 0x9df8
    b9bc:	4401      	add	r1, r0
    b9be:	4650      	mov	r0, sl
    b9c0:	f000 fb92 	bl	c0e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    b9c4:	4604      	mov	r4, r0
    b9c6:	4648      	mov	r0, r9
    b9c8:	f000 fb7a 	bl	c0c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    b9cc:	f885 8009 	strb.w	r8, [r5, #9]
    b9d0:	e014      	b.n	b9fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    b9d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b9d6:	e7ef      	b.n	b9b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    b9d8:	f000 f9f8 	bl	bdcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    b9dc:	f000 fb46 	bl	c06c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    b9e0:	f000 fa70 	bl	bec4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    b9e4:	f649 71ba 	movw	r1, #40890	; 0x9fba
    b9e8:	4650      	mov	r0, sl
    b9ea:	f000 fb7d 	bl	c0e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    b9ee:	4604      	mov	r4, r0
    b9f0:	4817      	ldr	r0, [pc, #92]	; (ba50 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    b9f2:	1d00      	adds	r0, r0, #4
    b9f4:	f000 fb64 	bl	c0c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    b9f8:	2002      	movs	r0, #2
    b9fa:	7268      	strb	r0, [r5, #9]
    b9fc:	4816      	ldr	r0, [pc, #88]	; (ba58 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    b9fe:	6004      	str	r4, [r0, #0]
    ba00:	4917      	ldr	r1, [pc, #92]	; (ba60 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    ba02:	4816      	ldr	r0, [pc, #88]	; (ba5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    ba04:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    ba08:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    ba0a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    ba0e:	62a8      	str	r0, [r5, #40]	; 0x28
    ba10:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ba14:	6030      	str	r0, [r6, #0]
    ba16:	2110      	movs	r1, #16
    ba18:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    ba1c:	1200      	asrs	r0, r0, #8
    ba1e:	6030      	str	r0, [r6, #0]
    ba20:	f000 fa3c 	bl	be9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    ba24:	490f      	ldr	r1, [pc, #60]	; (ba64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    ba26:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    ba2a:	480b      	ldr	r0, [pc, #44]	; (ba58 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ba2c:	300c      	adds	r0, #12
    ba2e:	6800      	ldr	r0, [r0, #0]
    ba30:	42a0      	cmp	r0, r4
    ba32:	d304      	bcc.n	ba3e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    ba34:	f240 7149 	movw	r1, #1865	; 0x749
    ba38:	203e      	movs	r0, #62	; 0x3e
    ba3a:	f7f8 f95b 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba3e:	4621      	mov	r1, r4
    ba40:	4638      	mov	r0, r7
    ba42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba46:	f003 bed7 	b.w	f7f8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ba4a:	0000      	.short	0x0000
    ba4c:	4001f504 	.word	0x4001f504
    ba50:	40001000 	.word	0x40001000
    ba54:	20001004 	.word	0x20001004
    ba58:	40008540 	.word	0x40008540
    ba5c:	40008140 	.word	0x40008140
    ba60:	4001f098 	.word	0x4001f098
    ba64:	40008000 	.word	0x40008000

0000ba68 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    ba68:	4b0d      	ldr	r3, [pc, #52]	; (baa0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    ba6a:	b510      	push	{r4, lr}
    ba6c:	71d8      	strb	r0, [r3, #7]
    ba6e:	729a      	strb	r2, [r3, #10]
    ba70:	b151      	cbz	r1, ba88 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    ba72:	2002      	movs	r0, #2
    ba74:	7218      	strb	r0, [r3, #8]
    ba76:	2801      	cmp	r0, #1
    ba78:	d008      	beq.n	ba8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    ba7a:	2802      	cmp	r0, #2
    ba7c:	d00f      	beq.n	ba9e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    ba7e:	f640 112a 	movw	r1, #2346	; 0x92a
    ba82:	203e      	movs	r0, #62	; 0x3e
    ba84:	f7f8 f936 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba88:	2001      	movs	r0, #1
    ba8a:	e7f3      	b.n	ba74 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    ba8c:	7a58      	ldrb	r0, [r3, #9]
    ba8e:	2802      	cmp	r0, #2
    ba90:	d105      	bne.n	ba9e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    ba92:	f000 f99b 	bl	bdcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    ba96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ba9a:	f000 bae7 	b.w	c06c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    ba9e:	bd10      	pop	{r4, pc}
    baa0:	20001004 	.word	0x20001004

0000baa4 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    baa4:	4901      	ldr	r1, [pc, #4]	; (baac <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0x8>)
    baa6:	2000      	movs	r0, #0
    baa8:	6008      	str	r0, [r1, #0]
    baaa:	4770      	bx	lr
    baac:	40008540 	.word	0x40008540

0000bab0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    bab0:	490a      	ldr	r1, [pc, #40]	; (badc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    bab2:	b508      	push	{r3, lr}
    bab4:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    bab8:	2a01      	cmp	r2, #1
    baba:	d001      	beq.n	bac0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    babc:	2000      	movs	r0, #0
    babe:	bd08      	pop	{r3, pc}
    bac0:	4a07      	ldr	r2, [pc, #28]	; (bae0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    bac2:	6812      	ldr	r2, [r2, #0]
    bac4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    bac8:	4252      	negs	r2, r2
    baca:	7002      	strb	r2, [r0, #0]
    bacc:	2000      	movs	r0, #0
    bace:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    bad2:	4804      	ldr	r0, [pc, #16]	; (bae4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    bad4:	6800      	ldr	r0, [r0, #0]
    bad6:	9000      	str	r0, [sp, #0]
    bad8:	2001      	movs	r0, #1
    bada:	bd08      	pop	{r3, pc}
    badc:	40001000 	.word	0x40001000
    bae0:	40001548 	.word	0x40001548
    bae4:	4000111c 	.word	0x4000111c

0000bae8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    bae8:	4a03      	ldr	r2, [pc, #12]	; (baf8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    baea:	0e01      	lsrs	r1, r0, #24
    baec:	6011      	str	r1, [r2, #0]
    baee:	4902      	ldr	r1, [pc, #8]	; (baf8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    baf0:	0200      	lsls	r0, r0, #8
    baf2:	3908      	subs	r1, #8
    baf4:	6008      	str	r0, [r1, #0]
    baf6:	4770      	bx	lr
    baf8:	40001524 	.word	0x40001524

0000bafc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    bafc:	6800      	ldr	r0, [r0, #0]
    bafe:	4902      	ldr	r1, [pc, #8]	; (bb08 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    bb00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bb04:	6008      	str	r0, [r1, #0]
    bb06:	4770      	bx	lr
    bb08:	4000153c 	.word	0x4000153c

0000bb0c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    bb0c:	b510      	push	{r4, lr}
    bb0e:	f000 fb23 	bl	c158 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    bb12:	4806      	ldr	r0, [pc, #24]	; (bb2c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    bb14:	6800      	ldr	r0, [r0, #0]
    bb16:	2803      	cmp	r0, #3
    bb18:	d001      	beq.n	bb1e <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    bb1a:	280b      	cmp	r0, #11
    bb1c:	d104      	bne.n	bb28 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    bb1e:	f240 218a 	movw	r1, #650	; 0x28a
    bb22:	203e      	movs	r0, #62	; 0x3e
    bb24:	f7f8 f8e6 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb28:	bd10      	pop	{r4, pc}
    bb2a:	0000      	.short	0x0000
    bb2c:	40001550 	.word	0x40001550

0000bb30 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    bb30:	4901      	ldr	r1, [pc, #4]	; (bb38 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bb32:	7548      	strb	r0, [r1, #21]
    bb34:	4770      	bx	lr
    bb36:	0000      	.short	0x0000
    bb38:	20001004 	.word	0x20001004

0000bb3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb40:	4d51      	ldr	r5, [pc, #324]	; (bc88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    bb42:	2701      	movs	r7, #1
    bb44:	64ef      	str	r7, [r5, #76]	; 0x4c
    bb46:	4851      	ldr	r0, [pc, #324]	; (bc8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bb48:	f8d0 9000 	ldr.w	r9, [r0]
    bb4c:	4850      	ldr	r0, [pc, #320]	; (bc90 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bb4e:	6800      	ldr	r0, [r0, #0]
    bb50:	4c50      	ldr	r4, [pc, #320]	; (bc94 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bb52:	e9c4 090c 	strd	r0, r9, [r4, #48]	; 0x30
    bb56:	f000 f943 	bl	bde0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    bb5a:	494f      	ldr	r1, [pc, #316]	; (bc98 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bb5c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bb5e:	6008      	str	r0, [r1, #0]
    bb60:	f8df a138 	ldr.w	sl, [pc, #312]	; bc9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    bb64:	2600      	movs	r6, #0
    bb66:	62a6      	str	r6, [r4, #40]	; 0x28
    bb68:	f8da 1200 	ldr.w	r1, [sl, #512]	; 0x200
    bb6c:	f240 121d 	movw	r2, #285	; 0x11d
    bb70:	4391      	bics	r1, r2
    bb72:	f8ca 1200 	str.w	r1, [sl, #512]	; 0x200
    bb76:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    bb7a:	f8da 010c 	ldr.w	r0, [sl, #268]	; 0x10c
    bb7e:	b900      	cbnz	r0, bb82 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46>
    bb80:	64af      	str	r7, [r5, #72]	; 0x48
    bb82:	f000 f9b1 	bl	bee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    bb86:	4605      	mov	r5, r0
    bb88:	4840      	ldr	r0, [pc, #256]	; (bc8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bb8a:	1f00      	subs	r0, r0, #4
    bb8c:	6800      	ldr	r0, [r0, #0]
    bb8e:	61e0      	str	r0, [r4, #28]
    bb90:	f7ff fdf6 	bl	b780 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    bb94:	f884 0020 	strb.w	r0, [r4, #32]
    bb98:	7a60      	ldrb	r0, [r4, #9]
    bb9a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    bb9e:	61a6      	str	r6, [r4, #24]
    bba0:	4e3f      	ldr	r6, [pc, #252]	; (bca0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    bba2:	07a8      	lsls	r0, r5, #30
    bba4:	d501      	bpl.n	bbaa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6e>
    bba6:	6830      	ldr	r0, [r6, #0]
    bba8:	61a0      	str	r0, [r4, #24]
    bbaa:	0728      	lsls	r0, r5, #28
    bbac:	d501      	bpl.n	bbb2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x76>
    bbae:	6830      	ldr	r0, [r6, #0]
    bbb0:	61a0      	str	r0, [r4, #24]
    bbb2:	f04f 0800 	mov.w	r8, #0
    bbb6:	4649      	mov	r1, r9
    bbb8:	4628      	mov	r0, r5
    bbba:	f000 fa1d 	bl	bff8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    bbbe:	b918      	cbnz	r0, bbc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    bbc0:	f8ca 7010 	str.w	r7, [sl, #16]
    bbc4:	f04f 0801 	mov.w	r8, #1
    bbc8:	4f32      	ldr	r7, [pc, #200]	; (bc94 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bbca:	07e8      	lsls	r0, r5, #31
    bbcc:	f1a7 0710 	sub.w	r7, r7, #16
    bbd0:	d002      	beq.n	bbd8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9c>
    bbd2:	6838      	ldr	r0, [r7, #0]
    bbd4:	4780      	blx	r0
    bbd6:	e031      	b.n	bc3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    bbd8:	07a8      	lsls	r0, r5, #30
    bbda:	d526      	bpl.n	bc2a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xee>
    bbdc:	0768      	lsls	r0, r5, #29
    bbde:	d41e      	bmi.n	bc1e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bbe0:	f000 fc5a 	bl	c498 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bbe4:	b9d8      	cbnz	r0, bc1e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bbe6:	f000 fc47 	bl	c478 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bbea:	b9c0      	cbnz	r0, bc1e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bbec:	482d      	ldr	r0, [pc, #180]	; (bca4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    bbee:	6800      	ldr	r0, [r0, #0]
    bbf0:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    bbf4:	f3c0 6300 	ubfx	r3, r0, #24, #1
    bbf8:	f000 020f 	and.w	r2, r0, #15
    bbfc:	f3c0 1103 	ubfx	r1, r0, #4, #4
    bc00:	f3c0 2003 	ubfx	r0, r0, #8, #4
    bc04:	b15b      	cbz	r3, bc1e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bc06:	b10a      	cbz	r2, bc0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    bc08:	b101      	cbz	r1, bc0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    bc0a:	b940      	cbnz	r0, bc1e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bc0c:	4825      	ldr	r0, [pc, #148]	; (bca4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    bc0e:	1d00      	adds	r0, r0, #4
    bc10:	6800      	ldr	r0, [r0, #0]
    bc12:	b120      	cbz	r0, bc1e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bc14:	f1bc 0f03 	cmp.w	ip, #3
    bc18:	d201      	bcs.n	bc1e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bc1a:	f045 0504 	orr.w	r5, r5, #4
    bc1e:	f345 0080 	sbfx	r0, r5, #2, #1
    bc22:	4641      	mov	r1, r8
    bc24:	1c40      	adds	r0, r0, #1
    bc26:	687a      	ldr	r2, [r7, #4]
    bc28:	e007      	b.n	bc3a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfe>
    bc2a:	f015 0f28 	tst.w	r5, #40	; 0x28
    bc2e:	d005      	beq.n	bc3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    bc30:	f345 1140 	sbfx	r1, r5, #5, #1
    bc34:	68ba      	ldr	r2, [r7, #8]
    bc36:	4640      	mov	r0, r8
    bc38:	1c49      	adds	r1, r1, #1
    bc3a:	4790      	blx	r2
    bc3c:	06e8      	lsls	r0, r5, #27
    bc3e:	d501      	bpl.n	bc44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    bc40:	68f8      	ldr	r0, [r7, #12]
    bc42:	4780      	blx	r0
    bc44:	7a60      	ldrb	r0, [r4, #9]
    bc46:	2802      	cmp	r0, #2
    bc48:	d11b      	bne.n	bc82 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    bc4a:	7b20      	ldrb	r0, [r4, #12]
    bc4c:	2800      	cmp	r0, #0
    bc4e:	d018      	beq.n	bc82 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    bc50:	2802      	cmp	r0, #2
    bc52:	d004      	beq.n	bc5e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    bc54:	2801      	cmp	r0, #1
    bc56:	d006      	beq.n	bc66 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    bc58:	f640 3103 	movw	r1, #2819	; 0xb03
    bc5c:	e009      	b.n	bc72 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x136>
    bc5e:	6921      	ldr	r1, [r4, #16]
    bc60:	69e0      	ldr	r0, [r4, #28]
    bc62:	4408      	add	r0, r1
    bc64:	e008      	b.n	bc78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    bc66:	69e1      	ldr	r1, [r4, #28]
    bc68:	6920      	ldr	r0, [r4, #16]
    bc6a:	4288      	cmp	r0, r1
    bc6c:	d804      	bhi.n	bc78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    bc6e:	f640 3104 	movw	r1, #2820	; 0xb04
    bc72:	203e      	movs	r0, #62	; 0x3e
    bc74:	f7f8 f83e 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc78:	6030      	str	r0, [r6, #0]
    bc7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc7e:	f000 ba03 	b.w	c088 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>
    bc82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bc86:	0000      	.short	0x0000
    bc88:	40008000 	.word	0x40008000
    bc8c:	4000854c 	.word	0x4000854c
    bc90:	4000b504 	.word	0x4000b504
    bc94:	20001004 	.word	0x20001004
    bc98:	4001f508 	.word	0x4001f508
    bc9c:	40001000 	.word	0x40001000
    bca0:	40008544 	.word	0x40008544
    bca4:	40001450 	.word	0x40001450

0000bca8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    bca8:	b570      	push	{r4, r5, r6, lr}
    bcaa:	4b11      	ldr	r3, [pc, #68]	; (bcf0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    bcac:	888c      	ldrh	r4, [r1, #4]
    bcae:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    bcb2:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    bcb6:	780c      	ldrb	r4, [r1, #0]
    bcb8:	f8d1 1001 	ldr.w	r1, [r1, #1]
    bcbc:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    bcc0:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    bcc4:	4d0b      	ldr	r5, [pc, #44]	; (bcf4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    bcc6:	6829      	ldr	r1, [r5, #0]
    bcc8:	f100 0608 	add.w	r6, r0, #8
    bccc:	2401      	movs	r4, #1
    bcce:	fa04 f306 	lsl.w	r3, r4, r6
    bcd2:	b132      	cbz	r2, bce2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    bcd4:	2a01      	cmp	r2, #1
    bcd6:	d006      	beq.n	bce6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    bcd8:	f240 41c1 	movw	r1, #1217	; 0x4c1
    bcdc:	203e      	movs	r0, #62	; 0x3e
    bcde:	f7f8 f809 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bce2:	4399      	bics	r1, r3
    bce4:	e000      	b.n	bce8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    bce6:	4319      	orrs	r1, r3
    bce8:	4084      	lsls	r4, r0
    bcea:	430c      	orrs	r4, r1
    bcec:	602c      	str	r4, [r5, #0]
    bcee:	bd70      	pop	{r4, r5, r6, pc}
    bcf0:	40001000 	.word	0x40001000
    bcf4:	40001640 	.word	0x40001640

0000bcf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    bcf8:	4901      	ldr	r1, [pc, #4]	; (bd00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    bcfa:	2001      	movs	r0, #1
    bcfc:	7008      	strb	r0, [r1, #0]
    bcfe:	4770      	bx	lr
    bd00:	20000264 	.word	0x20000264
    bd04:	b510      	push	{r4, lr}
    bd06:	4604      	mov	r4, r0
    bd08:	f000 fbc6 	bl	c498 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bd0c:	2800      	cmp	r0, #0
    bd0e:	d00e      	beq.n	bd2e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    bd10:	4a09      	ldr	r2, [pc, #36]	; (bd38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    bd12:	6811      	ldr	r1, [r2, #0]
    bd14:	0650      	lsls	r0, r2, #25
    bd16:	2c02      	cmp	r4, #2
    bd18:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    bd1c:	d008      	beq.n	bd30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    bd1e:	f3c0 2006 	ubfx	r0, r0, #8, #7
    bd22:	bf00      	nop
    bd24:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    bd28:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    bd2c:	6010      	str	r0, [r2, #0]
    bd2e:	bd10      	pop	{r4, pc}
    bd30:	f3c0 6006 	ubfx	r0, r0, #24, #7
    bd34:	e7f6      	b.n	bd24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    bd36:	0000      	.short	0x0000
    bd38:	40001588 	.word	0x40001588
    bd3c:	480d      	ldr	r0, [pc, #52]	; (bd74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>)
    bd3e:	7d40      	ldrb	r0, [r0, #21]
    bd40:	2825      	cmp	r0, #37	; 0x25
    bd42:	d007      	beq.n	bd54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x5c>
    bd44:	2826      	cmp	r0, #38	; 0x26
    bd46:	d007      	beq.n	bd58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x60>
    bd48:	2827      	cmp	r0, #39	; 0x27
    bd4a:	d007      	beq.n	bd5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x64>
    bd4c:	280a      	cmp	r0, #10
    bd4e:	d807      	bhi.n	bd60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    bd50:	2204      	movs	r2, #4
    bd52:	e006      	b.n	bd62 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6a>
    bd54:	2102      	movs	r1, #2
    bd56:	e007      	b.n	bd68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    bd58:	211a      	movs	r1, #26
    bd5a:	e005      	b.n	bd68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    bd5c:	2150      	movs	r1, #80	; 0x50
    bd5e:	e003      	b.n	bd68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    bd60:	2206      	movs	r2, #6
    bd62:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    bd66:	b2c9      	uxtb	r1, r1
    bd68:	4a03      	ldr	r2, [pc, #12]	; (bd78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    bd6a:	6011      	str	r1, [r2, #0]
    bd6c:	4902      	ldr	r1, [pc, #8]	; (bd78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    bd6e:	314c      	adds	r1, #76	; 0x4c
    bd70:	6008      	str	r0, [r1, #0]
    bd72:	4770      	bx	lr
    bd74:	20001004 	.word	0x20001004
    bd78:	40001508 	.word	0x40001508
    bd7c:	4912      	ldr	r1, [pc, #72]	; (bdc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>)
    bd7e:	b508      	push	{r3, lr}
    bd80:	f991 2014 	ldrsb.w	r2, [r1, #20]
    bd84:	7d49      	ldrb	r1, [r1, #21]
    bd86:	2801      	cmp	r0, #1
    bd88:	d00a      	beq.n	bda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa8>
    bd8a:	2802      	cmp	r0, #2
    bd8c:	d00a      	beq.n	bda4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xac>
    bd8e:	2804      	cmp	r0, #4
    bd90:	d00a      	beq.n	bda8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb0>
    bd92:	2808      	cmp	r0, #8
    bd94:	d00a      	beq.n	bdac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    bd96:	f240 31da 	movw	r1, #986	; 0x3da
    bd9a:	2006      	movs	r0, #6
    bd9c:	f7f7 ffaa 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bda0:	2000      	movs	r0, #0
    bda2:	e004      	b.n	bdae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    bda4:	2001      	movs	r0, #1
    bda6:	e002      	b.n	bdae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    bda8:	2003      	movs	r0, #3
    bdaa:	e000      	b.n	bdae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    bdac:	2002      	movs	r0, #2
    bdae:	466b      	mov	r3, sp
    bdb0:	f7f4 fb0e 	bl	3d0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    bdb4:	b118      	cbz	r0, bdbe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    bdb6:	f240 41f3 	movw	r1, #1267	; 0x4f3
    bdba:	203e      	movs	r0, #62	; 0x3e
    bdbc:	e7ee      	b.n	bd9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    bdbe:	f99d 0000 	ldrsb.w	r0, [sp]
    bdc2:	f000 f9e7 	bl	c194 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    bdc6:	bd08      	pop	{r3, pc}
    bdc8:	20001004 	.word	0x20001004
    bdcc:	4803      	ldr	r0, [pc, #12]	; (bddc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe4>)
    bdce:	7a01      	ldrb	r1, [r0, #8]
    bdd0:	2901      	cmp	r1, #1
    bdd2:	d102      	bne.n	bdda <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe2>
    bdd4:	7a80      	ldrb	r0, [r0, #10]
    bdd6:	f7ff bfd1 	b.w	bd7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    bdda:	4770      	bx	lr
    bddc:	20001004 	.word	0x20001004
    bde0:	4805      	ldr	r0, [pc, #20]	; (bdf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x100>)
    bde2:	7a40      	ldrb	r0, [r0, #9]
    bde4:	2801      	cmp	r0, #1
    bde6:	d003      	beq.n	bdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf8>
    bde8:	2802      	cmp	r0, #2
    bdea:	d103      	bne.n	bdf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xfc>
    bdec:	f003 bc82 	b.w	f6f4 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    bdf0:	f003 bc8c 	b.w	f70c <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    bdf4:	4770      	bx	lr
    bdf6:	0000      	.short	0x0000
    bdf8:	20001004 	.word	0x20001004
    bdfc:	4809      	ldr	r0, [pc, #36]	; (be24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12c>)
    bdfe:	b508      	push	{r3, lr}
    be00:	2100      	movs	r1, #0
    be02:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    be06:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    be0a:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    be0e:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    be12:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    be16:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    be1a:	4803      	ldr	r0, [pc, #12]	; (be28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x130>)
    be1c:	6800      	ldr	r0, [r0, #0]
    be1e:	9000      	str	r0, [sp, #0]
    be20:	bd08      	pop	{r3, pc}
    be22:	0000      	.short	0x0000
    be24:	40001000 	.word	0x40001000
    be28:	40001118 	.word	0x40001118
    be2c:	4816      	ldr	r0, [pc, #88]	; (be88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>)
    be2e:	b510      	push	{r4, lr}
    be30:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    be34:	07c1      	lsls	r1, r0, #31
    be36:	d026      	beq.n	be86 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    be38:	0781      	lsls	r1, r0, #30
    be3a:	d513      	bpl.n	be64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    be3c:	4813      	ldr	r0, [pc, #76]	; (be8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    be3e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    be42:	f041 0101 	orr.w	r1, r1, #1
    be46:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    be4a:	4811      	ldr	r0, [pc, #68]	; (be90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x198>)
    be4c:	6800      	ldr	r0, [r0, #0]
    be4e:	280b      	cmp	r0, #11
    be50:	d005      	beq.n	be5e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    be52:	280a      	cmp	r0, #10
    be54:	d003      	beq.n	be5e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    be56:	2803      	cmp	r0, #3
    be58:	d001      	beq.n	be5e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    be5a:	2802      	cmp	r0, #2
    be5c:	d113      	bne.n	be86 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    be5e:	f240 5123 	movw	r1, #1315	; 0x523
    be62:	e00d      	b.n	be80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    be64:	0740      	lsls	r0, r0, #29
    be66:	d50e      	bpl.n	be86 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    be68:	4808      	ldr	r0, [pc, #32]	; (be8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    be6a:	490a      	ldr	r1, [pc, #40]	; (be94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x19c>)
    be6c:	3008      	adds	r0, #8
    be6e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    be72:	4809      	ldr	r0, [pc, #36]	; (be98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a0>)
    be74:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    be78:	2801      	cmp	r0, #1
    be7a:	d104      	bne.n	be86 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    be7c:	f240 512a 	movw	r1, #1322	; 0x52a
    be80:	203e      	movs	r0, #62	; 0x3e
    be82:	f7f7 ff37 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be86:	bd10      	pop	{r4, pc}
    be88:	20001004 	.word	0x20001004
    be8c:	40001000 	.word	0x40001000
    be90:	40001550 	.word	0x40001550
    be94:	4001f098 	.word	0x4001f098
    be98:	40008000 	.word	0x40008000
    be9c:	4808      	ldr	r0, [pc, #32]	; (bec0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c8>)
    be9e:	4601      	mov	r1, r0
    bea0:	79c2      	ldrb	r2, [r0, #7]
    bea2:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    bea6:	b112      	cbz	r2, beae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b6>
    bea8:	2a01      	cmp	r2, #1
    beaa:	d003      	beq.n	beb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    beac:	e006      	b.n	bebc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    beae:	f041 0102 	orr.w	r1, r1, #2
    beb2:	e001      	b.n	beb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    beb4:	f041 0104 	orr.w	r1, r1, #4
    beb8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    bebc:	f7ff bfb6 	b.w	be2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    bec0:	20001004 	.word	0x20001004
    bec4:	b510      	push	{r4, lr}
    bec6:	f000 fae7 	bl	c498 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    beca:	2800      	cmp	r0, #0
    becc:	d108      	bne.n	bee0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    bece:	f000 fad3 	bl	c478 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bed2:	2800      	cmp	r0, #0
    bed4:	d104      	bne.n	bee0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    bed6:	4803      	ldr	r0, [pc, #12]	; (bee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ec>)
    bed8:	6801      	ldr	r1, [r0, #0]
    beda:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    bede:	6001      	str	r1, [r0, #0]
    bee0:	bd10      	pop	{r4, pc}
    bee2:	0000      	.short	0x0000
    bee4:	40001568 	.word	0x40001568
    bee8:	b538      	push	{r3, r4, r5, lr}
    beea:	4d32      	ldr	r5, [pc, #200]	; (bfb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2bc>)
    beec:	2400      	movs	r4, #0
    beee:	7b28      	ldrb	r0, [r5, #12]
    bef0:	b120      	cbz	r0, befc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    bef2:	4831      	ldr	r0, [pc, #196]	; (bfb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c0>)
    bef4:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    bef8:	2801      	cmp	r0, #1
    befa:	d007      	beq.n	bf0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x214>
    befc:	2200      	movs	r2, #0
    befe:	7a69      	ldrb	r1, [r5, #9]
    bf00:	482e      	ldr	r0, [pc, #184]	; (bfbc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>)
    bf02:	2901      	cmp	r1, #1
    bf04:	d004      	beq.n	bf10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x218>
    bf06:	2902      	cmp	r1, #2
    bf08:	d00a      	beq.n	bf20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x228>
    bf0a:	e019      	b.n	bf40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    bf0c:	2201      	movs	r2, #1
    bf0e:	e7f6      	b.n	befe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x206>
    bf10:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    bf14:	2901      	cmp	r1, #1
    bf16:	d001      	beq.n	bf1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    bf18:	2400      	movs	r4, #0
    bf1a:	e011      	b.n	bf40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    bf1c:	2408      	movs	r4, #8
    bf1e:	e00f      	b.n	bf40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    bf20:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    bf24:	2901      	cmp	r1, #1
    bf26:	d006      	beq.n	bf36 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    bf28:	2100      	movs	r1, #0
    bf2a:	4b25      	ldr	r3, [pc, #148]	; (bfc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    bf2c:	681b      	ldr	r3, [r3, #0]
    bf2e:	2b01      	cmp	r3, #1
    bf30:	d003      	beq.n	bf3a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x242>
    bf32:	2404      	movs	r4, #4
    bf34:	e002      	b.n	bf3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    bf36:	2102      	movs	r1, #2
    bf38:	e7f7      	b.n	bf2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x232>
    bf3a:	2400      	movs	r4, #0
    bf3c:	430c      	orrs	r4, r1
    bf3e:	4314      	orrs	r4, r2
    bf40:	f014 0f0b 	tst.w	r4, #11
    bf44:	d105      	bne.n	bf52 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x25a>
    bf46:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    bf4a:	2901      	cmp	r1, #1
    bf4c:	d029      	beq.n	bfa2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2aa>
    bf4e:	2100      	movs	r1, #0
    bf50:	430c      	orrs	r4, r1
    bf52:	491c      	ldr	r1, [pc, #112]	; (bfc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>)
    bf54:	7809      	ldrb	r1, [r1, #0]
    bf56:	b1d1      	cbz	r1, bf8e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x296>
    bf58:	491b      	ldr	r1, [pc, #108]	; (bfc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>)
    bf5a:	6809      	ldr	r1, [r1, #0]
    bf5c:	f011 0fff 	tst.w	r1, #255	; 0xff
    bf60:	d003      	beq.n	bf6a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x272>
    bf62:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    bf66:	2a01      	cmp	r2, #1
    bf68:	d000      	beq.n	bf6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>
    bf6a:	2200      	movs	r2, #0
    bf6c:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
    bf70:	f011 0fff 	tst.w	r1, #255	; 0xff
    bf74:	d003      	beq.n	bf7e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x286>
    bf76:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    bf7a:	2801      	cmp	r0, #1
    bf7c:	d000      	beq.n	bf80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x288>
    bf7e:	2000      	movs	r0, #0
    bf80:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    bf84:	480e      	ldr	r0, [pc, #56]	; (bfc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    bf86:	3010      	adds	r0, #16
    bf88:	6800      	ldr	r0, [r0, #0]
    bf8a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    bf8e:	f7ff ff35 	bl	bdfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>
    bf92:	06e0      	lsls	r0, r4, #27
    bf94:	d509      	bpl.n	bfaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    bf96:	0720      	lsls	r0, r4, #28
    bf98:	d407      	bmi.n	bfaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    bf9a:	7a68      	ldrb	r0, [r5, #9]
    bf9c:	2801      	cmp	r0, #1
    bf9e:	d002      	beq.n	bfa6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ae>
    bfa0:	e003      	b.n	bfaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    bfa2:	2110      	movs	r1, #16
    bfa4:	e7d4      	b.n	bf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x258>
    bfa6:	f044 0420 	orr.w	r4, r4, #32
    bfaa:	4808      	ldr	r0, [pc, #32]	; (bfcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d4>)
    bfac:	6800      	ldr	r0, [r0, #0]
    bfae:	9000      	str	r0, [sp, #0]
    bfb0:	4620      	mov	r0, r4
    bfb2:	bd38      	pop	{r3, r4, r5, pc}
    bfb4:	20001004 	.word	0x20001004
    bfb8:	40008000 	.word	0x40008000
    bfbc:	40001000 	.word	0x40001000
    bfc0:	40001400 	.word	0x40001400
    bfc4:	20000264 	.word	0x20000264
    bfc8:	40001640 	.word	0x40001640
    bfcc:	40008144 	.word	0x40008144
    bfd0:	4808      	ldr	r0, [pc, #32]	; (bff4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    bfd2:	b510      	push	{r4, lr}
    bfd4:	6800      	ldr	r0, [r0, #0]
    bfd6:	f000 000f 	and.w	r0, r0, #15
    bfda:	2803      	cmp	r0, #3
    bfdc:	d006      	beq.n	bfec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    bfde:	2804      	cmp	r0, #4
    bfe0:	d006      	beq.n	bff0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f8>
    bfe2:	f240 2112 	movw	r1, #530	; 0x212
    bfe6:	203e      	movs	r0, #62	; 0x3e
    bfe8:	f7f7 fe84 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfec:	2001      	movs	r0, #1
    bfee:	bd10      	pop	{r4, pc}
    bff0:	2002      	movs	r0, #2
    bff2:	bd10      	pop	{r4, pc}
    bff4:	40001510 	.word	0x40001510
    bff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bffc:	4c19      	ldr	r4, [pc, #100]	; (c064 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36c>)
    bffe:	460d      	mov	r5, r1
    c000:	7a21      	ldrb	r1, [r4, #8]
    c002:	b129      	cbz	r1, c010 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>
    c004:	f010 0f11 	tst.w	r0, #17
    c008:	d00b      	beq.n	c022 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x32a>
    c00a:	f7ff fa4b 	bl	b4a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c00e:	e027      	b.n	c060 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    c010:	4915      	ldr	r1, [pc, #84]	; (c068 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x370>)
    c012:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c016:	6008      	str	r0, [r1, #0]
    c018:	f000 f85e 	bl	c0d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c01c:	2000      	movs	r0, #0
    c01e:	7320      	strb	r0, [r4, #12]
    c020:	e01e      	b.n	c060 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    c022:	2901      	cmp	r1, #1
    c024:	d001      	beq.n	c02a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x332>
    c026:	2601      	movs	r6, #1
    c028:	e000      	b.n	c02c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    c02a:	2600      	movs	r6, #0
    c02c:	79e0      	ldrb	r0, [r4, #7]
    c02e:	2801      	cmp	r0, #1
    c030:	d00e      	beq.n	c050 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    c032:	2700      	movs	r7, #0
    c034:	f000 f850 	bl	c0d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c038:	2196      	movs	r1, #150	; 0x96
    c03a:	4630      	mov	r0, r6
    c03c:	f000 f862 	bl	c104 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40c>
    c040:	4601      	mov	r1, r0
    c042:	b14f      	cbz	r7, c058 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x360>
    c044:	353b      	adds	r5, #59	; 0x3b
    c046:	428d      	cmp	r5, r1
    c048:	d904      	bls.n	c054 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    c04a:	2000      	movs	r0, #0
    c04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c050:	2701      	movs	r7, #1
    c052:	e7ef      	b.n	c034 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>
    c054:	2001      	movs	r0, #1
    c056:	71e0      	strb	r0, [r4, #7]
    c058:	7aa2      	ldrb	r2, [r4, #10]
    c05a:	4630      	mov	r0, r6
    c05c:	f7ff fc88 	bl	b970 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c060:	2001      	movs	r0, #1
    c062:	e7f3      	b.n	c04c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    c064:	20001004 	.word	0x20001004
    c068:	4001f508 	.word	0x4001f508
    c06c:	4805      	ldr	r0, [pc, #20]	; (c084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    c06e:	2100      	movs	r1, #0
    c070:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    c074:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c078:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c07c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c080:	4770      	bx	lr
    c082:	0000      	.short	0x0000
    c084:	40001000 	.word	0x40001000
    c088:	4804      	ldr	r0, [pc, #16]	; (c09c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    c08a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c08c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c090:	6281      	str	r1, [r0, #40]	; 0x28
    c092:	4903      	ldr	r1, [pc, #12]	; (c0a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>)
    c094:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c098:	6008      	str	r0, [r1, #0]
    c09a:	4770      	bx	lr
    c09c:	20001004 	.word	0x20001004
    c0a0:	4001f504 	.word	0x4001f504
    c0a4:	4905      	ldr	r1, [pc, #20]	; (c0bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    c0a6:	2000      	movs	r0, #0
    c0a8:	6008      	str	r0, [r1, #0]
    c0aa:	1f09      	subs	r1, r1, #4
    c0ac:	6008      	str	r0, [r1, #0]
    c0ae:	1f09      	subs	r1, r1, #4
    c0b0:	6008      	str	r0, [r1, #0]
    c0b2:	4902      	ldr	r1, [pc, #8]	; (c0bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    c0b4:	1d09      	adds	r1, r1, #4
    c0b6:	6008      	str	r0, [r1, #0]
    c0b8:	4770      	bx	lr
    c0ba:	0000      	.short	0x0000
    c0bc:	40008548 	.word	0x40008548
    c0c0:	4903      	ldr	r1, [pc, #12]	; (c0d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d8>)
    c0c2:	79c9      	ldrb	r1, [r1, #7]
    c0c4:	2900      	cmp	r1, #0
    c0c6:	d102      	bne.n	c0ce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d6>
    c0c8:	4902      	ldr	r1, [pc, #8]	; (c0d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    c0ca:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c0ce:	4770      	bx	lr
    c0d0:	20001004 	.word	0x20001004
    c0d4:	4001f098 	.word	0x4001f098
    c0d8:	4802      	ldr	r0, [pc, #8]	; (c0e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c0da:	2100      	movs	r1, #0
    c0dc:	71c1      	strb	r1, [r0, #7]
    c0de:	7201      	strb	r1, [r0, #8]
    c0e0:	7241      	strb	r1, [r0, #9]
    c0e2:	4770      	bx	lr
    c0e4:	20001004 	.word	0x20001004
    c0e8:	4a05      	ldr	r2, [pc, #20]	; (c100 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>)
    c0ea:	79d2      	ldrb	r2, [r2, #7]
    c0ec:	2a01      	cmp	r2, #1
    c0ee:	d006      	beq.n	c0fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    c0f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c0f4:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c0f8:	fbb1 f1f2 	udiv	r1, r1, r2
    c0fc:	1a40      	subs	r0, r0, r1
    c0fe:	4770      	bx	lr
    c100:	20001004 	.word	0x20001004
    c104:	b570      	push	{r4, r5, r6, lr}
    c106:	4c13      	ldr	r4, [pc, #76]	; (c154 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>)
    c108:	4603      	mov	r3, r0
    c10a:	460d      	mov	r5, r1
    c10c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c110:	2000      	movs	r0, #0
    c112:	b15a      	cbz	r2, c12c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    c114:	4621      	mov	r1, r4
    c116:	f891 1020 	ldrb.w	r1, [r1, #32]
    c11a:	b163      	cbz	r3, c136 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x43e>
    c11c:	2b01      	cmp	r3, #1
    c11e:	d111      	bne.n	c144 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>
    c120:	2a01      	cmp	r2, #1
    c122:	4628      	mov	r0, r5
    c124:	d012      	beq.n	c14c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c126:	f003 fbbf 	bl	f8a8 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c12a:	e009      	b.n	c140 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c12c:	f240 7166 	movw	r1, #1894	; 0x766
    c130:	203e      	movs	r0, #62	; 0x3e
    c132:	f7f7 fddf 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c136:	2a01      	cmp	r2, #1
    c138:	4628      	mov	r0, r5
    c13a:	d004      	beq.n	c146 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44e>
    c13c:	f003 fbc2 	bl	f8c4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c140:	69e1      	ldr	r1, [r4, #28]
    c142:	4408      	add	r0, r1
    c144:	bd70      	pop	{r4, r5, r6, pc}
    c146:	f003 fbd7 	bl	f8f8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c14a:	e7f9      	b.n	c140 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c14c:	f003 fbc5 	bl	f8da <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c150:	e7f6      	b.n	c140 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c152:	0000      	.short	0x0000
    c154:	20001004 	.word	0x20001004
    c158:	b510      	push	{r4, lr}
    c15a:	2200      	movs	r2, #0
    c15c:	2901      	cmp	r1, #1
    c15e:	d008      	beq.n	c172 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47a>
    c160:	2902      	cmp	r1, #2
    c162:	d004      	beq.n	c16e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    c164:	f240 2169 	movw	r1, #617	; 0x269
    c168:	203e      	movs	r0, #62	; 0x3e
    c16a:	f7f7 fdc3 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c16e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c172:	4905      	ldr	r1, [pc, #20]	; (c188 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x490>)
    c174:	430a      	orrs	r2, r1
    c176:	4905      	ldr	r1, [pc, #20]	; (c18c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    c178:	600a      	str	r2, [r1, #0]
    c17a:	4905      	ldr	r1, [pc, #20]	; (c190 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x498>)
    c17c:	4308      	orrs	r0, r1
    c17e:	4903      	ldr	r1, [pc, #12]	; (c18c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    c180:	1d09      	adds	r1, r1, #4
    c182:	6008      	str	r0, [r1, #0]
    c184:	bd10      	pop	{r4, pc}
    c186:	0000      	.short	0x0000
    c188:	00100108 	.word	0x00100108
    c18c:	40001514 	.word	0x40001514
    c190:	02030000 	.word	0x02030000

0000c194 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c194:	4901      	ldr	r1, [pc, #4]	; (c19c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c196:	b2c0      	uxtb	r0, r0
    c198:	6008      	str	r0, [r1, #0]
    c19a:	4770      	bx	lr
    c19c:	4000150c 	.word	0x4000150c

0000c1a0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    c1a0:	b510      	push	{r4, lr}
    c1a2:	4907      	ldr	r1, [pc, #28]	; (c1c0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    c1a4:	2801      	cmp	r0, #1
    c1a6:	d005      	beq.n	c1b4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    c1a8:	2802      	cmp	r0, #2
    c1aa:	d005      	beq.n	c1b8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    c1ac:	218b      	movs	r1, #139	; 0x8b
    c1ae:	203f      	movs	r0, #63	; 0x3f
    c1b0:	f7f7 fda0 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1b4:	2003      	movs	r0, #3
    c1b6:	e000      	b.n	c1ba <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    c1b8:	2004      	movs	r0, #4
    c1ba:	6008      	str	r0, [r1, #0]
    c1bc:	bd10      	pop	{r4, pc}
    c1be:	0000      	.short	0x0000
    c1c0:	40001510 	.word	0x40001510

0000c1c4 <strcmp>:
    c1c4:	f810 2b01 	ldrb.w	r2, [r0], #1
    c1c8:	f811 3b01 	ldrb.w	r3, [r1], #1
    c1cc:	2a01      	cmp	r2, #1
    c1ce:	bf28      	it	cs
    c1d0:	429a      	cmpcs	r2, r3
    c1d2:	d0f7      	beq.n	c1c4 <strcmp>
    c1d4:	1ad0      	subs	r0, r2, r3
    c1d6:	4770      	bx	lr

0000c1d8 <strlen>:
    c1d8:	4603      	mov	r3, r0
    c1da:	f813 2b01 	ldrb.w	r2, [r3], #1
    c1de:	2a00      	cmp	r2, #0
    c1e0:	d1fb      	bne.n	c1da <strlen+0x2>
    c1e2:	1a18      	subs	r0, r3, r0
    c1e4:	3801      	subs	r0, #1
    c1e6:	4770      	bx	lr

0000c1e8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    c1e8:	4770      	bx	lr
    c1ea:	2100      	movs	r1, #0
    c1ec:	7081      	strb	r1, [r0, #2]
    c1ee:	7001      	strb	r1, [r0, #0]
    c1f0:	7041      	strb	r1, [r0, #1]
    c1f2:	4770      	bx	lr

0000c1f4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c1f4:	b570      	push	{r4, r5, r6, lr}
    c1f6:	f7f4 f905 	bl	404 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c1fa:	4605      	mov	r5, r0
    c1fc:	2400      	movs	r4, #0
    c1fe:	e006      	b.n	c20e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c200:	4620      	mov	r0, r4
    c202:	f7f4 f905 	bl	410 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c206:	f7ff fff0 	bl	c1ea <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    c20a:	1c64      	adds	r4, r4, #1
    c20c:	b2e4      	uxtb	r4, r4
    c20e:	42ac      	cmp	r4, r5
    c210:	d3f6      	bcc.n	c200 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c212:	bd70      	pop	{r4, r5, r6, pc}

0000c214 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    c214:	2000      	movs	r0, #0
    c216:	f7f6 beed 	b.w	2ff4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000c21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    c21a:	b510      	push	{r4, lr}
    c21c:	f7f6 fbd6 	bl	29cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    c220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c224:	f000 b800 	b.w	c228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000c228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c228:	0a41      	lsrs	r1, r0, #9
    c22a:	f643 5209 	movw	r2, #15625	; 0x3d09
    c22e:	4351      	muls	r1, r2
    c230:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c234:	fb10 f002 	smulbb	r0, r0, r2
    c238:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c23c:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c240:	4770      	bx	lr

0000c242 <MPSL_IRQ_RADIO_Handler>:
    c242:	f7f5 b9f3 	b.w	162c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    c246:	2800      	cmp	r0, #0
    c248:	db09      	blt.n	c25e <MPSL_IRQ_RADIO_Handler+0x1c>
    c24a:	f000 021f 	and.w	r2, r0, #31
    c24e:	2101      	movs	r1, #1
    c250:	4091      	lsls	r1, r2
    c252:	0940      	lsrs	r0, r0, #5
    c254:	0080      	lsls	r0, r0, #2
    c256:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c25a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c25e:	4770      	bx	lr
    c260:	2800      	cmp	r0, #0
    c262:	db0d      	blt.n	c280 <MPSL_IRQ_RADIO_Handler+0x3e>
    c264:	f000 021f 	and.w	r2, r0, #31
    c268:	2101      	movs	r1, #1
    c26a:	4091      	lsls	r1, r2
    c26c:	0940      	lsrs	r0, r0, #5
    c26e:	0080      	lsls	r0, r0, #2
    c270:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c274:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c278:	f3bf 8f4f 	dsb	sy
    c27c:	f3bf 8f6f 	isb	sy
    c280:	4770      	bx	lr

0000c282 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c282:	b570      	push	{r4, r5, r6, lr}
    c284:	4602      	mov	r2, r0
    c286:	2000      	movs	r0, #0
    c288:	2900      	cmp	r1, #0
    c28a:	d01d      	beq.n	c2c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c28c:	fba2 0101 	umull	r0, r1, r2, r1
    c290:	0a40      	lsrs	r0, r0, #9
    c292:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c296:	0a49      	lsrs	r1, r1, #9
    c298:	1c40      	adds	r0, r0, #1
    c29a:	f141 0100 	adc.w	r1, r1, #0
    c29e:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c2a2:	1883      	adds	r3, r0, r2
    c2a4:	f141 0100 	adc.w	r1, r1, #0
    c2a8:	1c5b      	adds	r3, r3, #1
    c2aa:	f141 0400 	adc.w	r4, r1, #0
    c2ae:	2100      	movs	r1, #0
    c2b0:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c2b4:	41a1      	sbcs	r1, r4
    c2b6:	d203      	bcs.n	c2c0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c2b8:	2171      	movs	r1, #113	; 0x71
    c2ba:	206d      	movs	r0, #109	; 0x6d
    c2bc:	f7f7 fa3e 	bl	373c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c2c0:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c2c4:	fbb0 f0f2 	udiv	r0, r0, r2
    c2c8:	bd70      	pop	{r4, r5, r6, pc}
    c2ca:	5840      	ldr	r0, [r0, r1]
    c2cc:	2800      	cmp	r0, #0
    c2ce:	d000      	beq.n	c2d2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c2d0:	2001      	movs	r0, #1
    c2d2:	4770      	bx	lr
    c2d4:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c2d8:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c2dc:	f002 0201 	and.w	r2, r2, #1
    c2e0:	03c0      	lsls	r0, r0, #15
    c2e2:	d503      	bpl.n	c2ec <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c2e4:	428a      	cmp	r2, r1
    c2e6:	d101      	bne.n	c2ec <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c2e8:	2001      	movs	r0, #1
    c2ea:	4770      	bx	lr
    c2ec:	2000      	movs	r0, #0
    c2ee:	4770      	bx	lr

0000c2f0 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c2f0:	b510      	push	{r4, lr}
    c2f2:	2101      	movs	r1, #1
    c2f4:	0788      	lsls	r0, r1, #30
    c2f6:	f7f7 f9df 	bl	36b8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c2fa:	2800      	cmp	r0, #0
    c2fc:	d000      	beq.n	c300 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c2fe:	2001      	movs	r0, #1
    c300:	bd10      	pop	{r4, pc}

0000c302 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c302:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c306:	2101      	movs	r1, #1
    c308:	6001      	str	r1, [r0, #0]
    c30a:	4770      	bx	lr

0000c30c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c30c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c310:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c314:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c318:	f002 0203 	and.w	r2, r2, #3
    c31c:	03c9      	lsls	r1, r1, #15
    c31e:	d503      	bpl.n	c328 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c320:	4282      	cmp	r2, r0
    c322:	d101      	bne.n	c328 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c324:	2001      	movs	r0, #1
    c326:	4770      	bx	lr
    c328:	2000      	movs	r0, #0
    c32a:	4770      	bx	lr

0000c32c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c32c:	b510      	push	{r4, lr}
    c32e:	2100      	movs	r1, #0
    c330:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c334:	f7f7 f9c0 	bl	36b8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c338:	2800      	cmp	r0, #0
    c33a:	d000      	beq.n	c33e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c33c:	2001      	movs	r0, #1
    c33e:	bd10      	pop	{r4, pc}
    c340:	2800      	cmp	r0, #0
    c342:	db09      	blt.n	c358 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c344:	f000 021f 	and.w	r2, r0, #31
    c348:	2101      	movs	r1, #1
    c34a:	4091      	lsls	r1, r2
    c34c:	0940      	lsrs	r0, r0, #5
    c34e:	0080      	lsls	r0, r0, #2
    c350:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c354:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c358:	4770      	bx	lr
    c35a:	2800      	cmp	r0, #0
    c35c:	db0d      	blt.n	c37a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c35e:	f000 021f 	and.w	r2, r0, #31
    c362:	2101      	movs	r1, #1
    c364:	4091      	lsls	r1, r2
    c366:	0940      	lsrs	r0, r0, #5
    c368:	0080      	lsls	r0, r0, #2
    c36a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c36e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c372:	f3bf 8f4f 	dsb	sy
    c376:	f3bf 8f6f 	isb	sy
    c37a:	4770      	bx	lr
    c37c:	00021000 	.word	0x00021000
    c380:	000000fa 	.word	0x000000fa
    c384:	71a053fe 	.word	0x71a053fe
    c388:	1095eb1b 	.word	0x1095eb1b
    c38c:	c946cf33 	.word	0xc946cf33
    c390:	5ebe9563 	.word	0x5ebe9563
    c394:	736e3829 	.word	0x736e3829
    c398:	2800      	cmp	r0, #0
    c39a:	db09      	blt.n	c3b0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c39c:	f000 021f 	and.w	r2, r0, #31
    c3a0:	2101      	movs	r1, #1
    c3a2:	4091      	lsls	r1, r2
    c3a4:	0940      	lsrs	r0, r0, #5
    c3a6:	0080      	lsls	r0, r0, #2
    c3a8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c3ac:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c3b0:	4770      	bx	lr

0000c3b2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c3b2:	f3ef 8110 	mrs	r1, PRIMASK
    c3b6:	b672      	cpsid	i
    c3b8:	7802      	ldrb	r2, [r0, #0]
    c3ba:	2a01      	cmp	r2, #1
    c3bc:	d001      	beq.n	c3c2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c3be:	2201      	movs	r2, #1
    c3c0:	e000      	b.n	c3c4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c3c2:	2200      	movs	r2, #0
    c3c4:	2301      	movs	r3, #1
    c3c6:	7003      	strb	r3, [r0, #0]
    c3c8:	b901      	cbnz	r1, c3cc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c3ca:	b662      	cpsie	i
    c3cc:	b10a      	cbz	r2, c3d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c3ce:	2000      	movs	r0, #0
    c3d0:	4770      	bx	lr
    c3d2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c3d6:	4770      	bx	lr

0000c3d8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c3d8:	2100      	movs	r1, #0
    c3da:	7001      	strb	r1, [r0, #0]
    c3dc:	4608      	mov	r0, r1
    c3de:	4770      	bx	lr

0000c3e0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c3e0:	f3ef 8110 	mrs	r1, PRIMASK
    c3e4:	b672      	cpsid	i
    c3e6:	2200      	movs	r2, #0
    c3e8:	7002      	strb	r2, [r0, #0]
    c3ea:	b901      	cbnz	r1, c3ee <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c3ec:	b662      	cpsie	i
    c3ee:	2000      	movs	r0, #0
    c3f0:	4770      	bx	lr

0000c3f2 <mpsl_low_priority_process>:
    c3f2:	f7f7 ba8f 	b.w	3914 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c3f6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c3f6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3fa:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c3fe:	280f      	cmp	r0, #15
    c400:	d001      	beq.n	c406 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c402:	2000      	movs	r0, #0
    c404:	4770      	bx	lr
    c406:	2001      	movs	r0, #1
    c408:	4770      	bx	lr

0000c40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c40a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c40e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c412:	280a      	cmp	r0, #10
    c414:	d001      	beq.n	c41a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c416:	2000      	movs	r0, #0
    c418:	4770      	bx	lr
    c41a:	2001      	movs	r0, #1
    c41c:	4770      	bx	lr

0000c41e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c41e:	b500      	push	{lr}
    c420:	f7ff fff3 	bl	c40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c424:	b120      	cbz	r0, c430 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c426:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c42a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c42e:	b108      	cbz	r0, c434 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c430:	2000      	movs	r0, #0
    c432:	bd00      	pop	{pc}
    c434:	2001      	movs	r0, #1
    c436:	bd00      	pop	{pc}

0000c438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c438:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c43c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c440:	280e      	cmp	r0, #14
    c442:	d001      	beq.n	c448 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c444:	2000      	movs	r0, #0
    c446:	4770      	bx	lr
    c448:	2001      	movs	r0, #1
    c44a:	4770      	bx	lr

0000c44c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c44c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c450:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c454:	2810      	cmp	r0, #16
    c456:	d001      	beq.n	c45c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c458:	2000      	movs	r0, #0
    c45a:	4770      	bx	lr
    c45c:	2001      	movs	r0, #1
    c45e:	4770      	bx	lr

0000c460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c460:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c464:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c468:	2806      	cmp	r0, #6
    c46a:	d003      	beq.n	c474 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c46c:	1c40      	adds	r0, r0, #1
    c46e:	d001      	beq.n	c474 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c470:	2000      	movs	r0, #0
    c472:	4770      	bx	lr
    c474:	2001      	movs	r0, #1
    c476:	4770      	bx	lr

0000c478 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c478:	b500      	push	{lr}
    c47a:	f7ff fff1 	bl	c460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c47e:	b148      	cbz	r0, c494 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c480:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c484:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c488:	2806      	cmp	r0, #6
    c48a:	d303      	bcc.n	c494 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c48c:	1c40      	adds	r0, r0, #1
    c48e:	d001      	beq.n	c494 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c490:	2001      	movs	r0, #1
    c492:	bd00      	pop	{pc}
    c494:	2000      	movs	r0, #0
    c496:	bd00      	pop	{pc}

0000c498 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c498:	b500      	push	{lr}
    c49a:	f7ff ffe1 	bl	c460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c49e:	b138      	cbz	r0, c4b0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c4a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4a4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c4a8:	2806      	cmp	r0, #6
    c4aa:	d303      	bcc.n	c4b4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c4ac:	1c40      	adds	r0, r0, #1
    c4ae:	d001      	beq.n	c4b4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c4b0:	2000      	movs	r0, #0
    c4b2:	bd00      	pop	{pc}
    c4b4:	2001      	movs	r0, #1
    c4b6:	bd00      	pop	{pc}

0000c4b8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c4b8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4bc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4c0:	280d      	cmp	r0, #13
    c4c2:	d001      	beq.n	c4c8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c4c4:	2000      	movs	r0, #0
    c4c6:	4770      	bx	lr
    c4c8:	2001      	movs	r0, #1
    c4ca:	4770      	bx	lr

0000c4cc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c4cc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4d0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4d4:	2808      	cmp	r0, #8
    c4d6:	d001      	beq.n	c4dc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c4d8:	2000      	movs	r0, #0
    c4da:	4770      	bx	lr
    c4dc:	2001      	movs	r0, #1
    c4de:	4770      	bx	lr

0000c4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    c4e0:	2a00      	cmp	r2, #0
    c4e2:	bf04      	itt	eq
    c4e4:	2000      	moveq	r0, #0
    c4e6:	4770      	bxeq	lr
    c4e8:	1e52      	subs	r2, r2, #1
    c4ea:	d007      	beq.n	c4fc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    c4ec:	7803      	ldrb	r3, [r0, #0]
    c4ee:	f891 c000 	ldrb.w	ip, [r1]
    c4f2:	4563      	cmp	r3, ip
    c4f4:	bf04      	itt	eq
    c4f6:	1c40      	addeq	r0, r0, #1
    c4f8:	1c49      	addeq	r1, r1, #1
    c4fa:	d0f5      	beq.n	c4e8 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    c4fc:	7800      	ldrb	r0, [r0, #0]
    c4fe:	7809      	ldrb	r1, [r1, #0]
    c500:	1a40      	subs	r0, r0, r1
    c502:	4770      	bx	lr

0000c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c504:	b4f0      	push	{r4, r5, r6, r7}
    c506:	ea80 0c01 	eor.w	ip, r0, r1
    c50a:	4603      	mov	r3, r0
    c50c:	f01c 0f03 	tst.w	ip, #3
    c510:	d13c      	bne.n	c58c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c512:	f013 0f03 	tst.w	r3, #3
    c516:	d00b      	beq.n	c530 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c518:	2a00      	cmp	r2, #0
    c51a:	bf04      	itt	eq
    c51c:	bcf0      	popeq	{r4, r5, r6, r7}
    c51e:	4770      	bxeq	lr
    c520:	f811 cb01 	ldrb.w	ip, [r1], #1
    c524:	f803 cb01 	strb.w	ip, [r3], #1
    c528:	1e52      	subs	r2, r2, #1
    c52a:	f013 0f03 	tst.w	r3, #3
    c52e:	d1f3      	bne.n	c518 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c530:	2a03      	cmp	r2, #3
    c532:	d94f      	bls.n	c5d4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c534:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c538:	d24c      	bcs.n	c5d4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c53a:	f1c2 0c00 	rsb	ip, r2, #0
    c53e:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c542:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c546:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c54a:	f1cc 0c00 	rsb	ip, ip, #0
    c54e:	f1bc 0f00 	cmp.w	ip, #0
    c552:	dd1b      	ble.n	c58c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c554:	1f0d      	subs	r5, r1, #4
    c556:	1f1c      	subs	r4, r3, #4
    c558:	f01c 0f01 	tst.w	ip, #1
    c55c:	d003      	beq.n	c566 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c55e:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c562:	f844 6f04 	str.w	r6, [r4, #4]!
    c566:	ea5f 066c 	movs.w	r6, ip, asr #1
    c56a:	d007      	beq.n	c57c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c56c:	686f      	ldr	r7, [r5, #4]
    c56e:	6067      	str	r7, [r4, #4]
    c570:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c574:	f844 7f08 	str.w	r7, [r4, #8]!
    c578:	1e76      	subs	r6, r6, #1
    c57a:	d1f7      	bne.n	c56c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c57c:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c580:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c584:	f1cc 0c00 	rsb	ip, ip, #0
    c588:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c58c:	2a00      	cmp	r2, #0
    c58e:	bf04      	itt	eq
    c590:	bcf0      	popeq	{r4, r5, r6, r7}
    c592:	4770      	bxeq	lr
    c594:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c598:	d226      	bcs.n	c5e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c59a:	2a00      	cmp	r2, #0
    c59c:	bfdc      	itt	le
    c59e:	bcf0      	pople	{r4, r5, r6, r7}
    c5a0:	4770      	bxle	lr
    c5a2:	1e49      	subs	r1, r1, #1
    c5a4:	1e5b      	subs	r3, r3, #1
    c5a6:	f012 0f01 	tst.w	r2, #1
    c5aa:	d003      	beq.n	c5b4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c5ac:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c5b0:	f803 cf01 	strb.w	ip, [r3, #1]!
    c5b4:	1052      	asrs	r2, r2, #1
    c5b6:	bf04      	itt	eq
    c5b8:	bcf0      	popeq	{r4, r5, r6, r7}
    c5ba:	4770      	bxeq	lr
    c5bc:	f891 c001 	ldrb.w	ip, [r1, #1]
    c5c0:	f883 c001 	strb.w	ip, [r3, #1]
    c5c4:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c5c8:	f803 cf02 	strb.w	ip, [r3, #2]!
    c5cc:	1e52      	subs	r2, r2, #1
    c5ce:	d1f5      	bne.n	c5bc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c5d0:	bcf0      	pop	{r4, r5, r6, r7}
    c5d2:	4770      	bx	lr
    c5d4:	2a04      	cmp	r2, #4
    c5d6:	d3d9      	bcc.n	c58c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c5d8:	f851 cb04 	ldr.w	ip, [r1], #4
    c5dc:	1f12      	subs	r2, r2, #4
    c5de:	f843 cb04 	str.w	ip, [r3], #4
    c5e2:	2a04      	cmp	r2, #4
    c5e4:	d2f8      	bcs.n	c5d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c5e6:	e7d1      	b.n	c58c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c5e8:	f811 cb01 	ldrb.w	ip, [r1], #1
    c5ec:	f803 cb01 	strb.w	ip, [r3], #1
    c5f0:	1e52      	subs	r2, r2, #1
    c5f2:	d1f9      	bne.n	c5e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c5f4:	bcf0      	pop	{r4, r5, r6, r7}
    c5f6:	4770      	bx	lr

0000c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c5f8:	b470      	push	{r4, r5, r6}
    c5fa:	4603      	mov	r3, r0
    c5fc:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c600:	f010 0f03 	tst.w	r0, #3
    c604:	d009      	beq.n	c61a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c606:	2a00      	cmp	r2, #0
    c608:	bf04      	itt	eq
    c60a:	bc70      	popeq	{r4, r5, r6}
    c60c:	4770      	bxeq	lr
    c60e:	f803 cb01 	strb.w	ip, [r3], #1
    c612:	1e52      	subs	r2, r2, #1
    c614:	f013 0f03 	tst.w	r3, #3
    c618:	d1f5      	bne.n	c606 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c61a:	b2c9      	uxtb	r1, r1
    c61c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c620:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c624:	2a03      	cmp	r2, #3
    c626:	d939      	bls.n	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c628:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c62c:	d236      	bcs.n	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c62e:	4251      	negs	r1, r2
    c630:	17cc      	asrs	r4, r1, #31
    c632:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c636:	1089      	asrs	r1, r1, #2
    c638:	424e      	negs	r6, r1
    c63a:	2e00      	cmp	r6, #0
    c63c:	dd11      	ble.n	c662 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c63e:	1f19      	subs	r1, r3, #4
    c640:	f016 0f01 	tst.w	r6, #1
    c644:	bf18      	it	ne
    c646:	f841 5f04 	strne.w	r5, [r1, #4]!
    c64a:	1074      	asrs	r4, r6, #1
    c64c:	d004      	beq.n	c658 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c64e:	604d      	str	r5, [r1, #4]
    c650:	f841 5f08 	str.w	r5, [r1, #8]!
    c654:	1e64      	subs	r4, r4, #1
    c656:	d1fa      	bne.n	c64e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c658:	4271      	negs	r1, r6
    c65a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c65e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c662:	2a00      	cmp	r2, #0
    c664:	bf04      	itt	eq
    c666:	bc70      	popeq	{r4, r5, r6}
    c668:	4770      	bxeq	lr
    c66a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c66e:	d21d      	bcs.n	c6ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c670:	2a00      	cmp	r2, #0
    c672:	bfdc      	itt	le
    c674:	bc70      	pople	{r4, r5, r6}
    c676:	4770      	bxle	lr
    c678:	1e59      	subs	r1, r3, #1
    c67a:	f012 0f01 	tst.w	r2, #1
    c67e:	bf18      	it	ne
    c680:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c684:	1052      	asrs	r2, r2, #1
    c686:	bf04      	itt	eq
    c688:	bc70      	popeq	{r4, r5, r6}
    c68a:	4770      	bxeq	lr
    c68c:	f881 c001 	strb.w	ip, [r1, #1]
    c690:	f801 cf02 	strb.w	ip, [r1, #2]!
    c694:	1e52      	subs	r2, r2, #1
    c696:	d1f9      	bne.n	c68c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c698:	bc70      	pop	{r4, r5, r6}
    c69a:	4770      	bx	lr
    c69c:	2a04      	cmp	r2, #4
    c69e:	d3e0      	bcc.n	c662 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c6a0:	1f12      	subs	r2, r2, #4
    c6a2:	f843 5b04 	str.w	r5, [r3], #4
    c6a6:	2a04      	cmp	r2, #4
    c6a8:	d2fa      	bcs.n	c6a0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c6aa:	e7da      	b.n	c662 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c6ac:	f803 cb01 	strb.w	ip, [r3], #1
    c6b0:	1e52      	subs	r2, r2, #1
    c6b2:	d1fb      	bne.n	c6ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c6b4:	bc70      	pop	{r4, r5, r6}
    c6b6:	4770      	bx	lr
    c6b8:	f04f 30ff 	mov.w	r0, #4294967295
    c6bc:	4770      	bx	lr
    c6be:	2000      	movs	r0, #0
    c6c0:	4770      	bx	lr
    c6c2:	2000      	movs	r0, #0
    c6c4:	4770      	bx	lr
    c6c6:	f04f 30ff 	mov.w	r0, #4294967295
    c6ca:	4770      	bx	lr
    c6cc:	4770      	bx	lr
    c6ce:	4770      	bx	lr
    c6d0:	2000      	movs	r0, #0
    c6d2:	4770      	bx	lr
    c6d4:	f04f 30ff 	mov.w	r0, #4294967295
    c6d8:	4770      	bx	lr
    c6da:	f04f 30ff 	mov.w	r0, #4294967295
    c6de:	4770      	bx	lr
    c6e0:	2100      	movs	r1, #0
    c6e2:	7001      	strb	r1, [r0, #0]
    c6e4:	4770      	bx	lr
    c6e6:	f04f 30ff 	mov.w	r0, #4294967295
    c6ea:	4770      	bx	lr
    c6ec:	f04f 30ff 	mov.w	r0, #4294967295
    c6f0:	4770      	bx	lr
    c6f2:	2000      	movs	r0, #0
    c6f4:	4770      	bx	lr
    c6f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c6fa:	4606      	mov	r6, r0
    c6fc:	460c      	mov	r4, r1
    c6fe:	7808      	ldrb	r0, [r1, #0]
    c700:	7849      	ldrb	r1, [r1, #1]
    c702:	2700      	movs	r7, #0
    c704:	4408      	add	r0, r1
    c706:	4691      	mov	r9, r2
    c708:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c70c:	463d      	mov	r5, r7
    c70e:	e00e      	b.n	c72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    c710:	7a23      	ldrb	r3, [r4, #8]
    c712:	2b02      	cmp	r3, #2
    c714:	d200      	bcs.n	c718 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x120>
    c716:	2302      	movs	r3, #2
    c718:	79e2      	ldrb	r2, [r4, #7]
    c71a:	2a03      	cmp	r2, #3
    c71c:	d200      	bcs.n	c720 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x128>
    c71e:	2203      	movs	r2, #3
    c720:	79a1      	ldrb	r1, [r4, #6]
    c722:	7960      	ldrb	r0, [r4, #5]
    c724:	f000 ffaf 	bl	d686 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c728:	1c6d      	adds	r5, r5, #1
    c72a:	4407      	add	r7, r0
    c72c:	b2ed      	uxtb	r5, r5
    c72e:	4545      	cmp	r5, r8
    c730:	d3ee      	bcc.n	c710 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    c732:	6830      	ldr	r0, [r6, #0]
    c734:	1cc0      	adds	r0, r0, #3
    c736:	f020 0003 	bic.w	r0, r0, #3
    c73a:	6030      	str	r0, [r6, #0]
    c73c:	f1b9 0f00 	cmp.w	r9, #0
    c740:	d000      	beq.n	c744 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14c>
    c742:	2000      	movs	r0, #0
    c744:	463a      	mov	r2, r7
    c746:	4641      	mov	r1, r8
    c748:	f7f7 fe8a 	bl	4460 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c74c:	6831      	ldr	r1, [r6, #0]
    c74e:	4408      	add	r0, r1
    c750:	6030      	str	r0, [r6, #0]
    c752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c756 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c756:	2000      	movs	r0, #0
    c758:	4770      	bx	lr

0000c75a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c75a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c75c:	4604      	mov	r4, r0
    c75e:	1d01      	adds	r1, r0, #4
    c760:	4668      	mov	r0, sp
    c762:	f7f9 fc45 	bl	5ff0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c766:	2800      	cmp	r0, #0
    c768:	d004      	beq.n	c774 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c76a:	4669      	mov	r1, sp
    c76c:	4620      	mov	r0, r4
    c76e:	f000 f848 	bl	c802 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c772:	2001      	movs	r0, #1
    c774:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c776 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c776:	b50e      	push	{r1, r2, r3, lr}
    c778:	4601      	mov	r1, r0
    c77a:	4668      	mov	r0, sp
    c77c:	f000 f827 	bl	c7ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c780:	4668      	mov	r0, sp
    c782:	f7f9 fc5f 	bl	6044 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c786:	bd0e      	pop	{r1, r2, r3, pc}

0000c788 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c788:	b510      	push	{r4, lr}
    c78a:	4604      	mov	r4, r0
    c78c:	4620      	mov	r0, r4
    c78e:	f7f7 fba7 	bl	3ee0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c792:	2800      	cmp	r0, #0
    c794:	d006      	beq.n	c7a4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c796:	78a1      	ldrb	r1, [r4, #2]
    c798:	7820      	ldrb	r0, [r4, #0]
    c79a:	f000 f804 	bl	c7a6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    c79e:	2800      	cmp	r0, #0
    c7a0:	d0f4      	beq.n	c78c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    c7a2:	2001      	movs	r0, #1
    c7a4:	bd10      	pop	{r4, pc}
    c7a6:	b570      	push	{r4, r5, r6, lr}
    c7a8:	460c      	mov	r4, r1
    c7aa:	4605      	mov	r5, r0
    c7ac:	f7f7 fbf4 	bl	3f98 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c7b0:	2800      	cmp	r0, #0
    c7b2:	d002      	beq.n	c7ba <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    c7b4:	2d3e      	cmp	r5, #62	; 0x3e
    c7b6:	d001      	beq.n	c7bc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    c7b8:	2001      	movs	r0, #1
    c7ba:	bd70      	pop	{r4, r5, r6, pc}
    c7bc:	2c12      	cmp	r4, #18
    c7be:	d004      	beq.n	c7ca <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    c7c0:	4620      	mov	r0, r4
    c7c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c7c6:	f7f7 bc03 	b.w	3fd0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c7ca:	2000      	movs	r0, #0
    c7cc:	bd70      	pop	{r4, r5, r6, pc}

0000c7ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c7ce:	880a      	ldrh	r2, [r1, #0]
    c7d0:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c7d4:	8002      	strh	r2, [r0, #0]
    c7d6:	884a      	ldrh	r2, [r1, #2]
    c7d8:	8042      	strh	r2, [r0, #2]
    c7da:	784a      	ldrb	r2, [r1, #1]
    c7dc:	0993      	lsrs	r3, r2, #6
    c7de:	2200      	movs	r2, #0
    c7e0:	7142      	strb	r2, [r0, #5]
    c7e2:	784b      	ldrb	r3, [r1, #1]
    c7e4:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c7e8:	b11b      	cbz	r3, c7f2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c7ea:	2b01      	cmp	r3, #1
    c7ec:	d005      	beq.n	c7fa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c7ee:	2b02      	cmp	r3, #2
    c7f0:	d005      	beq.n	c7fe <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c7f2:	7102      	strb	r2, [r0, #4]
    c7f4:	1d09      	adds	r1, r1, #4
    c7f6:	6081      	str	r1, [r0, #8]
    c7f8:	4770      	bx	lr
    c7fa:	2201      	movs	r2, #1
    c7fc:	e7f9      	b.n	c7f2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c7fe:	2202      	movs	r2, #2
    c800:	e7f7      	b.n	c7f2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c802 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c802:	b510      	push	{r4, lr}
    c804:	460c      	mov	r4, r1
    c806:	7809      	ldrb	r1, [r1, #0]
    c808:	7001      	strb	r1, [r0, #0]
    c80a:	7841      	ldrb	r1, [r0, #1]
    c80c:	f021 010f 	bic.w	r1, r1, #15
    c810:	7041      	strb	r1, [r0, #1]
    c812:	8822      	ldrh	r2, [r4, #0]
    c814:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c818:	4311      	orrs	r1, r2
    c81a:	7041      	strb	r1, [r0, #1]
    c81c:	78a2      	ldrb	r2, [r4, #2]
    c81e:	7082      	strb	r2, [r0, #2]
    c820:	8862      	ldrh	r2, [r4, #2]
    c822:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    c826:	0a12      	lsrs	r2, r2, #8
    c828:	70c2      	strb	r2, [r0, #3]
    c82a:	7041      	strb	r1, [r0, #1]
    c82c:	7922      	ldrb	r2, [r4, #4]
    c82e:	f002 0203 	and.w	r2, r2, #3
    c832:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c836:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    c83a:	7041      	strb	r1, [r0, #1]
    c83c:	7962      	ldrb	r2, [r4, #5]
    c83e:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c842:	7041      	strb	r1, [r0, #1]
    c844:	68a1      	ldr	r1, [r4, #8]
    c846:	1d02      	adds	r2, r0, #4
    c848:	4291      	cmp	r1, r2
    c84a:	d006      	beq.n	c85a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    c84c:	8862      	ldrh	r2, [r4, #2]
    c84e:	2afb      	cmp	r2, #251	; 0xfb
    c850:	d300      	bcc.n	c854 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    c852:	22fb      	movs	r2, #251	; 0xfb
    c854:	1d00      	adds	r0, r0, #4
    c856:	f7ff fe55 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c85a:	78a0      	ldrb	r0, [r4, #2]
    c85c:	1d00      	adds	r0, r0, #4
    c85e:	b2c0      	uxtb	r0, r0
    c860:	bd10      	pop	{r4, pc}

0000c862 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c862:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c866:	4604      	mov	r4, r0
    c868:	f891 c000 	ldrb.w	ip, [r1]
    c86c:	2000      	movs	r0, #0
    c86e:	270c      	movs	r7, #12
    c870:	223e      	movs	r2, #62	; 0x3e
    c872:	2612      	movs	r6, #18
    c874:	25ff      	movs	r5, #255	; 0xff
    c876:	f04f 0b14 	mov.w	fp, #20
    c87a:	f04f 0e13 	mov.w	lr, #19
    c87e:	f04f 0a05 	mov.w	sl, #5
    c882:	f104 030d 	add.w	r3, r4, #13
    c886:	f04f 0911 	mov.w	r9, #17
    c88a:	f1bc 0f20 	cmp.w	ip, #32
    c88e:	d272      	bcs.n	c976 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c890:	e8df f00c 	tbb	[pc, ip]
    c894:	29271071 	.word	0x29271071
    c898:	a46dfc2e 	.word	0xa46dfc2e
    c89c:	fbdac0ae 	.word	0xfbdac0ae
    c8a0:	f7f8f9fa 	.word	0xf7f8f9fa
    c8a4:	507171f6 	.word	0x507171f6
    c8a8:	f3f4f572 	.word	0xf3f4f572
    c8ac:	eff0f1f2 	.word	0xeff0f1f2
    c8b0:	ec71edee 	.word	0xec71edee
    c8b4:	7027      	strb	r7, [r4, #0]
    c8b6:	7908      	ldrb	r0, [r1, #4]
    c8b8:	70a0      	strb	r0, [r4, #2]
    c8ba:	7948      	ldrb	r0, [r1, #5]
    c8bc:	70e0      	strb	r0, [r4, #3]
    c8be:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c8c2:	0a00      	lsrs	r0, r0, #8
    c8c4:	7120      	strb	r0, [r4, #4]
    c8c6:	79c8      	ldrb	r0, [r1, #7]
    c8c8:	7160      	strb	r0, [r4, #5]
    c8ca:	7a08      	ldrb	r0, [r1, #8]
    c8cc:	71a0      	strb	r0, [r4, #6]
    c8ce:	8908      	ldrh	r0, [r1, #8]
    c8d0:	0a00      	lsrs	r0, r0, #8
    c8d2:	71e0      	strb	r0, [r4, #7]
    c8d4:	7a88      	ldrb	r0, [r1, #10]
    c8d6:	7220      	strb	r0, [r4, #8]
    c8d8:	8948      	ldrh	r0, [r1, #10]
    c8da:	0a00      	lsrs	r0, r0, #8
    c8dc:	7260      	strb	r0, [r4, #9]
    c8de:	2008      	movs	r0, #8
    c8e0:	e154      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    c8e2:	2010      	movs	r0, #16
    c8e4:	e000      	b.n	c8e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    c8e6:	201a      	movs	r0, #26
    c8e8:	7020      	strb	r0, [r4, #0]
    c8ea:	7908      	ldrb	r0, [r1, #4]
    c8ec:	70a0      	strb	r0, [r4, #2]
    c8ee:	e154      	b.n	cb9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    c8f0:	7022      	strb	r2, [r4, #0]
    c8f2:	2002      	movs	r0, #2
    c8f4:	70a0      	strb	r0, [r4, #2]
    c8f6:	7908      	ldrb	r0, [r1, #4]
    c8f8:	70e0      	strb	r0, [r4, #3]
    c8fa:	7b88      	ldrb	r0, [r1, #14]
    c8fc:	7120      	strb	r0, [r4, #4]
    c8fe:	7948      	ldrb	r0, [r1, #5]
    c900:	7160      	strb	r0, [r4, #5]
    c902:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c906:	f8c4 0006 	str.w	r0, [r4, #6]
    c90a:	8948      	ldrh	r0, [r1, #10]
    c90c:	8160      	strh	r0, [r4, #10]
    c90e:	7b08      	ldrb	r0, [r1, #12]
    c910:	7320      	strb	r0, [r4, #12]
    c912:	7b0e      	ldrb	r6, [r1, #12]
    c914:	1d0d      	adds	r5, r1, #4
    c916:	2e1f      	cmp	r6, #31
    c918:	d300      	bcc.n	c91c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    c91a:	261f      	movs	r6, #31
    c91c:	4618      	mov	r0, r3
    c91e:	4632      	mov	r2, r6
    c920:	f105 010b 	add.w	r1, r5, #11
    c924:	f7ff fdee 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c928:	360d      	adds	r6, #13
    c92a:	7a69      	ldrb	r1, [r5, #9]
    c92c:	55a1      	strb	r1, [r4, r6]
    c92e:	1e76      	subs	r6, r6, #1
    c930:	b2f0      	uxtb	r0, r6
    c932:	e129      	b.n	cb88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    c934:	7022      	strb	r2, [r4, #0]
    c936:	200b      	movs	r0, #11
    c938:	70a0      	strb	r0, [r4, #2]
    c93a:	7908      	ldrb	r0, [r1, #4]
    c93c:	70e0      	strb	r0, [r4, #3]
    c93e:	7948      	ldrb	r0, [r1, #5]
    c940:	7120      	strb	r0, [r4, #4]
    c942:	7988      	ldrb	r0, [r1, #6]
    c944:	7160      	strb	r0, [r4, #5]
    c946:	f8d1 0007 	ldr.w	r0, [r1, #7]
    c94a:	f8c4 0006 	str.w	r0, [r4, #6]
    c94e:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    c952:	8160      	strh	r0, [r4, #10]
    c954:	7b48      	ldrb	r0, [r1, #13]
    c956:	7320      	strb	r0, [r4, #12]
    c958:	f8d1 000e 	ldr.w	r0, [r1, #14]
    c95c:	f8c4 000d 	str.w	r0, [r4, #13]
    c960:	8a48      	ldrh	r0, [r1, #18]
    c962:	f8a4 0011 	strh.w	r0, [r4, #17]
    c966:	7d08      	ldrb	r0, [r1, #20]
    c968:	74e0      	strb	r0, [r4, #19]
    c96a:	4630      	mov	r0, r6
    c96c:	e10e      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    c96e:	4620      	mov	r0, r4
    c970:	f000 f98d 	bl	cc8e <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    c974:	e108      	b.n	cb88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    c976:	e10b      	b.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    c978:	7022      	strb	r2, [r4, #0]
    c97a:	200a      	movs	r0, #10
    c97c:	70a0      	strb	r0, [r4, #2]
    c97e:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c982:	70e0      	strb	r0, [r4, #3]
    c984:	7888      	ldrb	r0, [r1, #2]
    c986:	7120      	strb	r0, [r4, #4]
    c988:	8848      	ldrh	r0, [r1, #2]
    c98a:	0a00      	lsrs	r0, r0, #8
    c98c:	7160      	strb	r0, [r4, #5]
    c98e:	7908      	ldrb	r0, [r1, #4]
    c990:	71a0      	strb	r0, [r4, #6]
    c992:	7948      	ldrb	r0, [r1, #5]
    c994:	71e0      	strb	r0, [r4, #7]
    c996:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c99a:	60a0      	str	r0, [r4, #8]
    c99c:	8948      	ldrh	r0, [r1, #10]
    c99e:	81a0      	strh	r0, [r4, #12]
    c9a0:	68c8      	ldr	r0, [r1, #12]
    c9a2:	f8c4 000e 	str.w	r0, [r4, #14]
    c9a6:	8a08      	ldrh	r0, [r1, #16]
    c9a8:	8260      	strh	r0, [r4, #18]
    c9aa:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c9ae:	6160      	str	r0, [r4, #20]
    c9b0:	8ac8      	ldrh	r0, [r1, #22]
    c9b2:	8320      	strh	r0, [r4, #24]
    c9b4:	7e08      	ldrb	r0, [r1, #24]
    c9b6:	76a0      	strb	r0, [r4, #26]
    c9b8:	8b08      	ldrh	r0, [r1, #24]
    c9ba:	0a00      	lsrs	r0, r0, #8
    c9bc:	76e0      	strb	r0, [r4, #27]
    c9be:	7e88      	ldrb	r0, [r1, #26]
    c9c0:	7720      	strb	r0, [r4, #28]
    c9c2:	8b48      	ldrh	r0, [r1, #26]
    c9c4:	0a00      	lsrs	r0, r0, #8
    c9c6:	7760      	strb	r0, [r4, #29]
    c9c8:	7f08      	ldrb	r0, [r1, #28]
    c9ca:	77a0      	strb	r0, [r4, #30]
    c9cc:	8b88      	ldrh	r0, [r1, #28]
    c9ce:	0a00      	lsrs	r0, r0, #8
    c9d0:	77e0      	strb	r0, [r4, #31]
    c9d2:	7f88      	ldrb	r0, [r1, #30]
    c9d4:	f884 0020 	strb.w	r0, [r4, #32]
    c9d8:	201f      	movs	r0, #31
    c9da:	e0d7      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    c9dc:	7022      	strb	r2, [r4, #0]
    c9de:	f884 b002 	strb.w	fp, [r4, #2]
    c9e2:	7908      	ldrb	r0, [r1, #4]
    c9e4:	70e0      	strb	r0, [r4, #3]
    c9e6:	8888      	ldrh	r0, [r1, #4]
    c9e8:	0a00      	lsrs	r0, r0, #8
    c9ea:	7120      	strb	r0, [r4, #4]
    c9ec:	7988      	ldrb	r0, [r1, #6]
    c9ee:	e0ed      	b.n	cbcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    c9f0:	7022      	strb	r2, [r4, #0]
    c9f2:	2004      	movs	r0, #4
    c9f4:	70a0      	strb	r0, [r4, #2]
    c9f6:	7908      	ldrb	r0, [r1, #4]
    c9f8:	70e0      	strb	r0, [r4, #3]
    c9fa:	7988      	ldrb	r0, [r1, #6]
    c9fc:	7120      	strb	r0, [r4, #4]
    c9fe:	88c8      	ldrh	r0, [r1, #6]
    ca00:	0a00      	lsrs	r0, r0, #8
    ca02:	7160      	strb	r0, [r4, #5]
    ca04:	6888      	ldr	r0, [r1, #8]
    ca06:	f8c4 0006 	str.w	r0, [r4, #6]
    ca0a:	68c8      	ldr	r0, [r1, #12]
    ca0c:	f8c4 000a 	str.w	r0, [r4, #10]
    ca10:	200c      	movs	r0, #12
    ca12:	e0bb      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ca14:	7022      	strb	r2, [r4, #0]
    ca16:	2003      	movs	r0, #3
    ca18:	70a0      	strb	r0, [r4, #2]
    ca1a:	7908      	ldrb	r0, [r1, #4]
    ca1c:	70e0      	strb	r0, [r4, #3]
    ca1e:	7988      	ldrb	r0, [r1, #6]
    ca20:	7120      	strb	r0, [r4, #4]
    ca22:	88c8      	ldrh	r0, [r1, #6]
    ca24:	0a00      	lsrs	r0, r0, #8
    ca26:	7160      	strb	r0, [r4, #5]
    ca28:	7a08      	ldrb	r0, [r1, #8]
    ca2a:	71a0      	strb	r0, [r4, #6]
    ca2c:	8908      	ldrh	r0, [r1, #8]
    ca2e:	0a00      	lsrs	r0, r0, #8
    ca30:	71e0      	strb	r0, [r4, #7]
    ca32:	7a88      	ldrb	r0, [r1, #10]
    ca34:	7220      	strb	r0, [r4, #8]
    ca36:	8948      	ldrh	r0, [r1, #10]
    ca38:	0a00      	lsrs	r0, r0, #8
    ca3a:	7260      	strb	r0, [r4, #9]
    ca3c:	7b08      	ldrb	r0, [r1, #12]
    ca3e:	72a0      	strb	r0, [r4, #10]
    ca40:	8988      	ldrh	r0, [r1, #12]
    ca42:	0a00      	lsrs	r0, r0, #8
    ca44:	72e0      	strb	r0, [r4, #11]
    ca46:	e120      	b.n	cc8a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    ca48:	7022      	strb	r2, [r4, #0]
    ca4a:	f884 a002 	strb.w	sl, [r4, #2]
    ca4e:	7908      	ldrb	r0, [r1, #4]
    ca50:	70e0      	strb	r0, [r4, #3]
    ca52:	8888      	ldrh	r0, [r1, #4]
    ca54:	0a00      	lsrs	r0, r0, #8
    ca56:	7120      	strb	r0, [r4, #4]
    ca58:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ca5c:	f8c4 0005 	str.w	r0, [r4, #5]
    ca60:	f8d1 000a 	ldr.w	r0, [r1, #10]
    ca64:	f8c4 0009 	str.w	r0, [r4, #9]
    ca68:	89c8      	ldrh	r0, [r1, #14]
    ca6a:	e010      	b.n	ca8e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    ca6c:	e0fa      	b.n	cc64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    ca6e:	e0ce      	b.n	cc0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    ca70:	e0af      	b.n	cbd2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    ca72:	e0da      	b.n	cc2a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    ca74:	e0e8      	b.n	cc48 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    ca76:	e0a1      	b.n	cbbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    ca78:	e08c      	b.n	cb94 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    ca7a:	e090      	b.n	cb9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    ca7c:	e033      	b.n	cae6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    ca7e:	e02f      	b.n	cae0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    ca80:	e043      	b.n	cb0a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    ca82:	e03d      	b.n	cb00 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    ca84:	e021      	b.n	caca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    ca86:	e015      	b.n	cab4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    ca88:	e008      	b.n	ca9c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    ca8a:	e004      	b.n	ca96 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    ca8c:	e046      	b.n	cb1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    ca8e:	f8a4 000d 	strh.w	r0, [r4, #13]
    ca92:	200d      	movs	r0, #13
    ca94:	e07a      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ca96:	f884 9000 	strb.w	r9, [r4]
    ca9a:	e038      	b.n	cb0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    ca9c:	f884 a000 	strb.w	sl, [r4]
    caa0:	7908      	ldrb	r0, [r1, #4]
    caa2:	70a0      	strb	r0, [r4, #2]
    caa4:	7948      	ldrb	r0, [r1, #5]
    caa6:	70e0      	strb	r0, [r4, #3]
    caa8:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    caac:	0a00      	lsrs	r0, r0, #8
    caae:	7120      	strb	r0, [r4, #4]
    cab0:	79c8      	ldrb	r0, [r1, #7]
    cab2:	e08b      	b.n	cbcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cab4:	2008      	movs	r0, #8
    cab6:	7020      	strb	r0, [r4, #0]
    cab8:	7908      	ldrb	r0, [r1, #4]
    caba:	70a0      	strb	r0, [r4, #2]
    cabc:	7988      	ldrb	r0, [r1, #6]
    cabe:	70e0      	strb	r0, [r4, #3]
    cac0:	88c8      	ldrh	r0, [r1, #6]
    cac2:	0a00      	lsrs	r0, r0, #8
    cac4:	7120      	strb	r0, [r4, #4]
    cac6:	7a08      	ldrb	r0, [r1, #8]
    cac8:	e080      	b.n	cbcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    caca:	2030      	movs	r0, #48	; 0x30
    cacc:	7020      	strb	r0, [r4, #0]
    cace:	7908      	ldrb	r0, [r1, #4]
    cad0:	70a0      	strb	r0, [r4, #2]
    cad2:	7988      	ldrb	r0, [r1, #6]
    cad4:	70e0      	strb	r0, [r4, #3]
    cad6:	88c8      	ldrh	r0, [r1, #6]
    cad8:	0a00      	lsrs	r0, r0, #8
    cada:	7120      	strb	r0, [r4, #4]
    cadc:	2003      	movs	r0, #3
    cade:	e055      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cae0:	7022      	strb	r2, [r4, #0]
    cae2:	2007      	movs	r0, #7
    cae4:	e077      	b.n	cbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    cae6:	7022      	strb	r2, [r4, #0]
    cae8:	70a7      	strb	r7, [r4, #2]
    caea:	7908      	ldrb	r0, [r1, #4]
    caec:	70e0      	strb	r0, [r4, #3]
    caee:	7988      	ldrb	r0, [r1, #6]
    caf0:	7120      	strb	r0, [r4, #4]
    caf2:	88c8      	ldrh	r0, [r1, #6]
    caf4:	0a00      	lsrs	r0, r0, #8
    caf6:	7160      	strb	r0, [r4, #5]
    caf8:	7a08      	ldrb	r0, [r1, #8]
    cafa:	71a0      	strb	r0, [r4, #6]
    cafc:	7a48      	ldrb	r0, [r1, #9]
    cafe:	e05a      	b.n	cbb6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    cb00:	4620      	mov	r0, r4
    cb02:	1d09      	adds	r1, r1, #4
    cb04:	f7f7 fa1a 	bl	3f3c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    cb08:	e03e      	b.n	cb88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    cb0a:	2057      	movs	r0, #87	; 0x57
    cb0c:	7020      	strb	r0, [r4, #0]
    cb0e:	7908      	ldrb	r0, [r1, #4]
    cb10:	70a0      	strb	r0, [r4, #2]
    cb12:	8888      	ldrh	r0, [r1, #4]
    cb14:	0a00      	lsrs	r0, r0, #8
    cb16:	70e0      	strb	r0, [r4, #3]
    cb18:	2002      	movs	r0, #2
    cb1a:	e037      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cb1c:	7022      	strb	r2, [r4, #0]
    cb1e:	220d      	movs	r2, #13
    cb20:	70a2      	strb	r2, [r4, #2]
    cb22:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cb26:	70e2      	strb	r2, [r4, #3]
    cb28:	894a      	ldrh	r2, [r1, #10]
    cb2a:	80a2      	strh	r2, [r4, #4]
    cb2c:	784a      	ldrb	r2, [r1, #1]
    cb2e:	71a2      	strb	r2, [r4, #6]
    cb30:	f8d1 2002 	ldr.w	r2, [r1, #2]
    cb34:	f8c4 2007 	str.w	r2, [r4, #7]
    cb38:	88ca      	ldrh	r2, [r1, #6]
    cb3a:	f8a4 200b 	strh.w	r2, [r4, #11]
    cb3e:	7b0a      	ldrb	r2, [r1, #12]
    cb40:	4620      	mov	r0, r4
    cb42:	7362      	strb	r2, [r4, #13]
    cb44:	7b4a      	ldrb	r2, [r1, #13]
    cb46:	7382      	strb	r2, [r0, #14]
    cb48:	7b8a      	ldrb	r2, [r1, #14]
    cb4a:	73c2      	strb	r2, [r0, #15]
    cb4c:	7e8a      	ldrb	r2, [r1, #26]
    cb4e:	7402      	strb	r2, [r0, #16]
    cb50:	7a4a      	ldrb	r2, [r1, #9]
    cb52:	7442      	strb	r2, [r0, #17]
    cb54:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    cb58:	f8ad 2000 	strh.w	r2, [sp]
    cb5c:	8242      	strh	r2, [r0, #18]
    cb5e:	7cca      	ldrb	r2, [r1, #19]
    cb60:	7502      	strb	r2, [r0, #20]
    cb62:	694a      	ldr	r2, [r1, #20]
    cb64:	f8c0 2015 	str.w	r2, [r0, #21]
    cb68:	8b0a      	ldrh	r2, [r1, #24]
    cb6a:	f8a0 2019 	strh.w	r2, [r0, #25]
    cb6e:	7a0a      	ldrb	r2, [r1, #8]
    cb70:	76c2      	strb	r2, [r0, #27]
    cb72:	7a0d      	ldrb	r5, [r1, #8]
    cb74:	2de5      	cmp	r5, #229	; 0xe5
    cb76:	d300      	bcc.n	cb7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x318>
    cb78:	25e5      	movs	r5, #229	; 0xe5
    cb7a:	462a      	mov	r2, r5
    cb7c:	301c      	adds	r0, #28
    cb7e:	311c      	adds	r1, #28
    cb80:	f7ff fcc0 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cb84:	351a      	adds	r5, #26
    cb86:	b2e8      	uxtb	r0, r5
    cb88:	2800      	cmp	r0, #0
    cb8a:	d001      	beq.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    cb8c:	7060      	strb	r0, [r4, #1]
    cb8e:	1c80      	adds	r0, r0, #2
    cb90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb94:	7022      	strb	r2, [r4, #0]
    cb96:	f884 9002 	strb.w	r9, [r4, #2]
    cb9a:	2001      	movs	r0, #1
    cb9c:	e7f6      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cb9e:	7022      	strb	r2, [r4, #0]
    cba0:	70a6      	strb	r6, [r4, #2]
    cba2:	7908      	ldrb	r0, [r1, #4]
    cba4:	70e0      	strb	r0, [r4, #3]
    cba6:	7948      	ldrb	r0, [r1, #5]
    cba8:	7120      	strb	r0, [r4, #4]
    cbaa:	7988      	ldrb	r0, [r1, #6]
    cbac:	7160      	strb	r0, [r4, #5]
    cbae:	88c8      	ldrh	r0, [r1, #6]
    cbb0:	0a00      	lsrs	r0, r0, #8
    cbb2:	71a0      	strb	r0, [r4, #6]
    cbb4:	7a08      	ldrb	r0, [r1, #8]
    cbb6:	71e0      	strb	r0, [r4, #7]
    cbb8:	2006      	movs	r0, #6
    cbba:	e7e7      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cbbc:	7025      	strb	r5, [r4, #0]
    cbbe:	20a1      	movs	r0, #161	; 0xa1
    cbc0:	70a0      	strb	r0, [r4, #2]
    cbc2:	7908      	ldrb	r0, [r1, #4]
    cbc4:	70e0      	strb	r0, [r4, #3]
    cbc6:	7948      	ldrb	r0, [r1, #5]
    cbc8:	7120      	strb	r0, [r4, #4]
    cbca:	2000      	movs	r0, #0
    cbcc:	7160      	strb	r0, [r4, #5]
    cbce:	2004      	movs	r0, #4
    cbd0:	e7dc      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cbd2:	7025      	strb	r5, [r4, #0]
    cbd4:	20a2      	movs	r0, #162	; 0xa2
    cbd6:	70a0      	strb	r0, [r4, #2]
    cbd8:	7908      	ldrb	r0, [r1, #4]
    cbda:	70e0      	strb	r0, [r4, #3]
    cbdc:	8888      	ldrh	r0, [r1, #4]
    cbde:	0a00      	lsrs	r0, r0, #8
    cbe0:	7120      	strb	r0, [r4, #4]
    cbe2:	7988      	ldrb	r0, [r1, #6]
    cbe4:	7160      	strb	r0, [r4, #5]
    cbe6:	88c8      	ldrh	r0, [r1, #6]
    cbe8:	0a00      	lsrs	r0, r0, #8
    cbea:	71a0      	strb	r0, [r4, #6]
    cbec:	7a08      	ldrb	r0, [r1, #8]
    cbee:	71e0      	strb	r0, [r4, #7]
    cbf0:	8908      	ldrh	r0, [r1, #8]
    cbf2:	0a00      	lsrs	r0, r0, #8
    cbf4:	7220      	strb	r0, [r4, #8]
    cbf6:	7a88      	ldrb	r0, [r1, #10]
    cbf8:	7260      	strb	r0, [r4, #9]
    cbfa:	8948      	ldrh	r0, [r1, #10]
    cbfc:	0a00      	lsrs	r0, r0, #8
    cbfe:	72a0      	strb	r0, [r4, #10]
    cc00:	7b08      	ldrb	r0, [r1, #12]
    cc02:	72e0      	strb	r0, [r4, #11]
    cc04:	8988      	ldrh	r0, [r1, #12]
    cc06:	0a00      	lsrs	r0, r0, #8
    cc08:	7320      	strb	r0, [r4, #12]
    cc0a:	200b      	movs	r0, #11
    cc0c:	e7be      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc0e:	7025      	strb	r5, [r4, #0]
    cc10:	20a3      	movs	r0, #163	; 0xa3
    cc12:	70a0      	strb	r0, [r4, #2]
    cc14:	7908      	ldrb	r0, [r1, #4]
    cc16:	70e0      	strb	r0, [r4, #3]
    cc18:	8888      	ldrh	r0, [r1, #4]
    cc1a:	0a00      	lsrs	r0, r0, #8
    cc1c:	7120      	strb	r0, [r4, #4]
    cc1e:	7988      	ldrb	r0, [r1, #6]
    cc20:	7160      	strb	r0, [r4, #5]
    cc22:	79c8      	ldrb	r0, [r1, #7]
    cc24:	71a0      	strb	r0, [r4, #6]
    cc26:	2005      	movs	r0, #5
    cc28:	e7b0      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc2a:	7022      	strb	r2, [r4, #0]
    cc2c:	f884 e002 	strb.w	lr, [r4, #2]
    cc30:	7908      	ldrb	r0, [r1, #4]
    cc32:	70e0      	strb	r0, [r4, #3]
    cc34:	7948      	ldrb	r0, [r1, #5]
    cc36:	7120      	strb	r0, [r4, #4]
    cc38:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cc3c:	f8c4 0005 	str.w	r0, [r4, #5]
    cc40:	8948      	ldrh	r0, [r1, #10]
    cc42:	f8a4 0009 	strh.w	r0, [r4, #9]
    cc46:	e020      	b.n	cc8a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    cc48:	7025      	strb	r5, [r4, #0]
    cc4a:	20a4      	movs	r0, #164	; 0xa4
    cc4c:	70a0      	strb	r0, [r4, #2]
    cc4e:	7908      	ldrb	r0, [r1, #4]
    cc50:	70e0      	strb	r0, [r4, #3]
    cc52:	8888      	ldrh	r0, [r1, #4]
    cc54:	0a00      	lsrs	r0, r0, #8
    cc56:	7120      	strb	r0, [r4, #4]
    cc58:	7988      	ldrb	r0, [r1, #6]
    cc5a:	7160      	strb	r0, [r4, #5]
    cc5c:	79c8      	ldrb	r0, [r1, #7]
    cc5e:	71a0      	strb	r0, [r4, #6]
    cc60:	2007      	movs	r0, #7
    cc62:	e793      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc64:	7025      	strb	r5, [r4, #0]
    cc66:	2080      	movs	r0, #128	; 0x80
    cc68:	70a0      	strb	r0, [r4, #2]
    cc6a:	888a      	ldrh	r2, [r1, #4]
    cc6c:	f8a4 2003 	strh.w	r2, [r4, #3]
    cc70:	88ca      	ldrh	r2, [r1, #6]
    cc72:	f8a4 2005 	strh.w	r2, [r4, #5]
    cc76:	7a0a      	ldrb	r2, [r1, #8]
    cc78:	71e2      	strb	r2, [r4, #7]
    cc7a:	7a4a      	ldrb	r2, [r1, #9]
    cc7c:	8122      	strh	r2, [r4, #8]
    cc7e:	7a8a      	ldrb	r2, [r1, #10]
    cc80:	72a2      	strb	r2, [r4, #10]
    cc82:	7ac9      	ldrb	r1, [r1, #11]
    cc84:	f001 0101 	and.w	r1, r1, #1
    cc88:	72e1      	strb	r1, [r4, #11]
    cc8a:	200a      	movs	r0, #10
    cc8c:	e77e      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>

0000cc8e <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    cc8e:	223e      	movs	r2, #62	; 0x3e
    cc90:	7002      	strb	r2, [r0, #0]
    cc92:	2201      	movs	r2, #1
    cc94:	7082      	strb	r2, [r0, #2]
    cc96:	790a      	ldrb	r2, [r1, #4]
    cc98:	70c2      	strb	r2, [r0, #3]
    cc9a:	798a      	ldrb	r2, [r1, #6]
    cc9c:	7102      	strb	r2, [r0, #4]
    cc9e:	88ca      	ldrh	r2, [r1, #6]
    cca0:	0a12      	lsrs	r2, r2, #8
    cca2:	7142      	strb	r2, [r0, #5]
    cca4:	7a0a      	ldrb	r2, [r1, #8]
    cca6:	7182      	strb	r2, [r0, #6]
    cca8:	7a4a      	ldrb	r2, [r1, #9]
    ccaa:	71c2      	strb	r2, [r0, #7]
    ccac:	f8d1 200a 	ldr.w	r2, [r1, #10]
    ccb0:	6082      	str	r2, [r0, #8]
    ccb2:	89ca      	ldrh	r2, [r1, #14]
    ccb4:	8182      	strh	r2, [r0, #12]
    ccb6:	7c0a      	ldrb	r2, [r1, #16]
    ccb8:	7382      	strb	r2, [r0, #14]
    ccba:	8a0a      	ldrh	r2, [r1, #16]
    ccbc:	0a12      	lsrs	r2, r2, #8
    ccbe:	73c2      	strb	r2, [r0, #15]
    ccc0:	7c8a      	ldrb	r2, [r1, #18]
    ccc2:	7402      	strb	r2, [r0, #16]
    ccc4:	8a4a      	ldrh	r2, [r1, #18]
    ccc6:	0a12      	lsrs	r2, r2, #8
    ccc8:	7442      	strb	r2, [r0, #17]
    ccca:	7d0a      	ldrb	r2, [r1, #20]
    cccc:	7482      	strb	r2, [r0, #18]
    ccce:	8a8a      	ldrh	r2, [r1, #20]
    ccd0:	0a12      	lsrs	r2, r2, #8
    ccd2:	74c2      	strb	r2, [r0, #19]
    ccd4:	7d89      	ldrb	r1, [r1, #22]
    ccd6:	7501      	strb	r1, [r0, #20]
    ccd8:	2013      	movs	r0, #19
    ccda:	4770      	bx	lr

0000ccdc <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    ccdc:	223e      	movs	r2, #62	; 0x3e
    ccde:	7002      	strb	r2, [r0, #0]
    cce0:	2201      	movs	r2, #1
    cce2:	7082      	strb	r2, [r0, #2]
    cce4:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cce8:	70c2      	strb	r2, [r0, #3]
    ccea:	788a      	ldrb	r2, [r1, #2]
    ccec:	7102      	strb	r2, [r0, #4]
    ccee:	884a      	ldrh	r2, [r1, #2]
    ccf0:	0a12      	lsrs	r2, r2, #8
    ccf2:	7142      	strb	r2, [r0, #5]
    ccf4:	790a      	ldrb	r2, [r1, #4]
    ccf6:	7182      	strb	r2, [r0, #6]
    ccf8:	794a      	ldrb	r2, [r1, #5]
    ccfa:	71c2      	strb	r2, [r0, #7]
    ccfc:	f8d1 2006 	ldr.w	r2, [r1, #6]
    cd00:	6082      	str	r2, [r0, #8]
    cd02:	894a      	ldrh	r2, [r1, #10]
    cd04:	8182      	strh	r2, [r0, #12]
    cd06:	7e0a      	ldrb	r2, [r1, #24]
    cd08:	7382      	strb	r2, [r0, #14]
    cd0a:	8b0a      	ldrh	r2, [r1, #24]
    cd0c:	0a12      	lsrs	r2, r2, #8
    cd0e:	73c2      	strb	r2, [r0, #15]
    cd10:	7e8a      	ldrb	r2, [r1, #26]
    cd12:	7402      	strb	r2, [r0, #16]
    cd14:	8b4a      	ldrh	r2, [r1, #26]
    cd16:	0a12      	lsrs	r2, r2, #8
    cd18:	7442      	strb	r2, [r0, #17]
    cd1a:	7f0a      	ldrb	r2, [r1, #28]
    cd1c:	7482      	strb	r2, [r0, #18]
    cd1e:	8b8a      	ldrh	r2, [r1, #28]
    cd20:	0a12      	lsrs	r2, r2, #8
    cd22:	74c2      	strb	r2, [r0, #19]
    cd24:	7f89      	ldrb	r1, [r1, #30]
    cd26:	7501      	strb	r1, [r0, #20]
    cd28:	2113      	movs	r1, #19
    cd2a:	7041      	strb	r1, [r0, #1]
    cd2c:	4608      	mov	r0, r1
    cd2e:	4770      	bx	lr

0000cd30 <sdc_hci_data_get>:
    cd30:	b510      	push	{r4, lr}
    cd32:	b120      	cbz	r0, cd3e <sdc_hci_data_get+0xe>
    cd34:	f7ff fd11 	bl	c75a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    cd38:	b120      	cbz	r0, cd44 <sdc_hci_data_get+0x14>
    cd3a:	2000      	movs	r0, #0
    cd3c:	bd10      	pop	{r4, pc}
    cd3e:	f06f 0015 	mvn.w	r0, #21
    cd42:	bd10      	pop	{r4, pc}
    cd44:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cd48:	bd10      	pop	{r4, pc}

0000cd4a <sdc_hci_data_put>:
    cd4a:	b510      	push	{r4, lr}
    cd4c:	f06f 0415 	mvn.w	r4, #21
    cd50:	b120      	cbz	r0, cd5c <sdc_hci_data_put+0x12>
    cd52:	f7ff fd10 	bl	c776 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cd56:	b108      	cbz	r0, cd5c <sdc_hci_data_put+0x12>
    cd58:	2000      	movs	r0, #0
    cd5a:	bd10      	pop	{r4, pc}
    cd5c:	4620      	mov	r0, r4
    cd5e:	bd10      	pop	{r4, pc}

0000cd60 <sdc_hci_evt_get>:
    cd60:	b510      	push	{r4, lr}
    cd62:	b120      	cbz	r0, cd6e <sdc_hci_evt_get+0xe>
    cd64:	f7ff fd10 	bl	c788 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    cd68:	b120      	cbz	r0, cd74 <sdc_hci_evt_get+0x14>
    cd6a:	2000      	movs	r0, #0
    cd6c:	bd10      	pop	{r4, pc}
    cd6e:	f06f 0015 	mvn.w	r0, #21
    cd72:	bd10      	pop	{r4, pc}
    cd74:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cd78:	bd10      	pop	{r4, pc}

0000cd7a <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cd7a:	f002 b8cb 	b.w	ef14 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cd7e <sdc_hci_cmd_cb_read_transmit_power_level>:
    cd7e:	f002 b90a 	b.w	ef96 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cd82 <sdc_hci_cmd_cb_set_event_mask>:
    cd82:	b510      	push	{r4, lr}
    cd84:	f7f7 f938 	bl	3ff8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cd88:	2000      	movs	r0, #0
    cd8a:	bd10      	pop	{r4, pc}

0000cd8c <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cd8c:	b510      	push	{r4, lr}
    cd8e:	f7f7 f941 	bl	4014 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    cd92:	2000      	movs	r0, #0
    cd94:	bd10      	pop	{r4, pc}

0000cd96 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    cd96:	f002 b91a 	b.w	efce <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000cd9a <sdc_hci_cmd_vs_conn_event_extend>:
    cd9a:	b508      	push	{r3, lr}
    cd9c:	7800      	ldrb	r0, [r0, #0]
    cd9e:	f88d 0000 	strb.w	r0, [sp]
    cda2:	4668      	mov	r0, sp
    cda4:	f002 f888 	bl	eeb8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    cda8:	bd08      	pop	{r3, pc}

0000cdaa <sdc_hci_cmd_vs_conn_update>:
    cdaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    cdac:	2100      	movs	r1, #0
    cdae:	9100      	str	r1, [sp, #0]
    cdb0:	9101      	str	r1, [sp, #4]
    cdb2:	9102      	str	r1, [sp, #8]
    cdb4:	9103      	str	r1, [sp, #12]
    cdb6:	f8d0 1002 	ldr.w	r1, [r0, #2]
    cdba:	f641 524c 	movw	r2, #7500	; 0x1d4c
    cdbe:	4291      	cmp	r1, r2
    cdc0:	d304      	bcc.n	cdcc <sdc_hci_cmd_vs_conn_update+0x22>
    cdc2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    cdc6:	fbb1 f1f2 	udiv	r1, r1, r2
    cdca:	e005      	b.n	cdd8 <sdc_hci_cmd_vs_conn_update+0x2e>
    cdcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cdd0:	fbb1 f1f2 	udiv	r1, r1, r2
    cdd4:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    cdd8:	8802      	ldrh	r2, [r0, #0]
    cdda:	b289      	uxth	r1, r1
    cddc:	f8ad 2000 	strh.w	r2, [sp]
    cde0:	f8ad 1002 	strh.w	r1, [sp, #2]
    cde4:	f8ad 1004 	strh.w	r1, [sp, #4]
    cde8:	88c1      	ldrh	r1, [r0, #6]
    cdea:	f8ad 1006 	strh.w	r1, [sp, #6]
    cdee:	8900      	ldrh	r0, [r0, #8]
    cdf0:	f8ad 0008 	strh.w	r0, [sp, #8]
    cdf4:	4668      	mov	r0, sp
    cdf6:	f001 fe3e 	bl	ea76 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    cdfa:	b004      	add	sp, #16
    cdfc:	bd10      	pop	{r4, pc}

0000cdfe <sdc_hci_cmd_vs_event_length_set>:
    cdfe:	f7fd be39 	b.w	aa74 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000ce02 <sdc_hci_cmd_vs_llpm_mode_set>:
    ce02:	2001      	movs	r0, #1
    ce04:	4770      	bx	lr

0000ce06 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    ce06:	7800      	ldrb	r0, [r0, #0]
    ce08:	b100      	cbz	r0, ce0c <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    ce0a:	2001      	movs	r0, #1
    ce0c:	f002 b82c 	b.w	ee68 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000ce10 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    ce10:	b570      	push	{r4, r5, r6, lr}
    ce12:	4605      	mov	r5, r0
    ce14:	2210      	movs	r2, #16
    ce16:	2100      	movs	r1, #0
    ce18:	f7ff fbee 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ce1c:	2210      	movs	r2, #16
    ce1e:	2100      	movs	r1, #0
    ce20:	f105 0010 	add.w	r0, r5, #16
    ce24:	f7ff fbe8 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ce28:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    ce2c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    ce30:	1c40      	adds	r0, r0, #1
    ce32:	d10b      	bne.n	ce4c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    ce34:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    ce38:	1c40      	adds	r0, r0, #1
    ce3a:	d107      	bne.n	ce4c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    ce3c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    ce40:	1c40      	adds	r0, r0, #1
    ce42:	d103      	bne.n	ce4c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    ce44:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    ce48:	1c40      	adds	r0, r0, #1
    ce4a:	d00b      	beq.n	ce64 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    ce4c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    ce50:	6128      	str	r0, [r5, #16]
    ce52:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    ce56:	6168      	str	r0, [r5, #20]
    ce58:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    ce5c:	61a8      	str	r0, [r5, #24]
    ce5e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    ce62:	61e8      	str	r0, [r5, #28]
    ce64:	2000      	movs	r0, #0
    ce66:	f7f7 fdb7 	bl	49d8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    ce6a:	b918      	cbnz	r0, ce74 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    ce6c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    ce70:	07c0      	lsls	r0, r0, #31
    ce72:	d118      	bne.n	cea6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    ce74:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    ce78:	1c40      	adds	r0, r0, #1
    ce7a:	d10b      	bne.n	ce94 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    ce7c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    ce80:	1c40      	adds	r0, r0, #1
    ce82:	d107      	bne.n	ce94 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    ce84:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ce88:	1c40      	adds	r0, r0, #1
    ce8a:	d103      	bne.n	ce94 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    ce8c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    ce90:	1c40      	adds	r0, r0, #1
    ce92:	d008      	beq.n	cea6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    ce94:	f854 0f90 	ldr.w	r0, [r4, #144]!
    ce98:	6028      	str	r0, [r5, #0]
    ce9a:	6860      	ldr	r0, [r4, #4]
    ce9c:	6068      	str	r0, [r5, #4]
    ce9e:	68a0      	ldr	r0, [r4, #8]
    cea0:	60a8      	str	r0, [r5, #8]
    cea2:	68e0      	ldr	r0, [r4, #12]
    cea4:	60e8      	str	r0, [r5, #12]
    cea6:	2000      	movs	r0, #0
    cea8:	bd70      	pop	{r4, r5, r6, pc}

0000ceaa <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    ceaa:	b570      	push	{r4, r5, r6, lr}
    ceac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    ceb0:	4604      	mov	r4, r0
    ceb2:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    ceb6:	1c40      	adds	r0, r0, #1
    ceb8:	d105      	bne.n	cec6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    ceba:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    cebe:	43c0      	mvns	r0, r0
    cec0:	0400      	lsls	r0, r0, #16
    cec2:	0c00      	lsrs	r0, r0, #16
    cec4:	d03a      	beq.n	cf3c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    cec6:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    ceca:	07c0      	lsls	r0, r0, #31
    cecc:	d036      	beq.n	cf3c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    cece:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    ced2:	f8c4 0001 	str.w	r0, [r4, #1]
    ced6:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    ceda:	f8a4 0005 	strh.w	r0, [r4, #5]
    cede:	79a0      	ldrb	r0, [r4, #6]
    cee0:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    cee4:	71a0      	strb	r0, [r4, #6]
    cee6:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    ceea:	1c40      	adds	r0, r0, #1
    ceec:	d00f      	beq.n	cf0e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    ceee:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    cef2:	1c40      	adds	r0, r0, #1
    cef4:	d00b      	beq.n	cf0e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cef6:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    cefa:	1c40      	adds	r0, r0, #1
    cefc:	d007      	beq.n	cf0e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cefe:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    cf02:	1c40      	adds	r0, r0, #1
    cf04:	d003      	beq.n	cf0e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cf06:	2000      	movs	r0, #0
    cf08:	f7f7 fd66 	bl	49d8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cf0c:	b140      	cbz	r0, cf20 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    cf0e:	2210      	movs	r2, #16
    cf10:	2100      	movs	r1, #0
    cf12:	1de0      	adds	r0, r4, #7
    cf14:	f7ff fb70 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cf18:	2001      	movs	r0, #1
    cf1a:	7020      	strb	r0, [r4, #0]
    cf1c:	2000      	movs	r0, #0
    cf1e:	bd70      	pop	{r4, r5, r6, pc}
    cf20:	f855 0f90 	ldr.w	r0, [r5, #144]!
    cf24:	f8c4 0007 	str.w	r0, [r4, #7]
    cf28:	6868      	ldr	r0, [r5, #4]
    cf2a:	f8c4 000b 	str.w	r0, [r4, #11]
    cf2e:	68a8      	ldr	r0, [r5, #8]
    cf30:	f8c4 000f 	str.w	r0, [r4, #15]
    cf34:	68e8      	ldr	r0, [r5, #12]
    cf36:	f8c4 0013 	str.w	r0, [r4, #19]
    cf3a:	e7ed      	b.n	cf18 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    cf3c:	2000      	movs	r0, #0
    cf3e:	e7ec      	b.n	cf1a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000cf40 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    cf40:	f001 bfac 	b.w	ee9c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000cf44 <sdc_hci_cmd_ip_read_bd_addr>:
    cf44:	f001 bff7 	b.w	ef36 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000cf48 <sdc_hci_cmd_ip_read_local_version_information>:
    cf48:	f7fd bde0 	b.w	ab0c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000cf4c <sdc_hci_cmd_le_add_device_to_resolving_list>:
    cf4c:	f001 bd4a 	b.w	e9e4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000cf50 <sdc_hci_cmd_le_add_device_to_white_list>:
    cf50:	f001 bd63 	b.w	ea1a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000cf54 <sdc_hci_cmd_le_clear_resolving_list>:
    cf54:	f001 bd78 	b.w	ea48 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000cf58 <sdc_hci_cmd_le_clear_white_list>:
    cf58:	f001 bd83 	b.w	ea62 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000cf5c <sdc_hci_cmd_le_conn_update>:
    cf5c:	f001 bd8b 	b.w	ea76 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000cf60 <sdc_hci_cmd_le_create_conn>:
    cf60:	f7fd bb02 	b.w	a568 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000cf64 <sdc_hci_cmd_le_create_conn_cancel>:
    cf64:	f7fd bb5a 	b.w	a61c <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000cf68 <sdc_hci_cmd_le_enable_encryption>:
    cf68:	f001 bf35 	b.w	edd6 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000cf6c <sdc_hci_cmd_le_encrypt>:
    cf6c:	f001 bdc5 	b.w	eafa <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000cf70 <sdc_hci_cmd_le_rand>:
    cf70:	f001 bdcc 	b.w	eb0c <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000cf74 <sdc_hci_cmd_le_read_buffer_size>:
    cf74:	f7fd bb7e 	b.w	a674 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000cf78 <sdc_hci_cmd_le_read_channel_map>:
    cf78:	f7fd bb86 	b.w	a688 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000cf7c <sdc_hci_cmd_le_read_max_data_length>:
    cf7c:	f001 bdcc 	b.w	eb18 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000cf80 <sdc_hci_cmd_le_read_phy>:
    cf80:	f001 bdda 	b.w	eb38 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000cf84 <sdc_hci_cmd_le_read_remote_features>:
    cf84:	f7fd bbaa 	b.w	a6dc <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000cf88 <sdc_hci_cmd_le_read_resolving_list_size>:
    cf88:	f001 be01 	b.w	eb8e <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000cf8c <sdc_hci_cmd_le_read_suggested_default_data_length>:
    cf8c:	f7fd bbca 	b.w	a724 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000cf90 <sdc_hci_cmd_le_read_transmit_power>:
    cf90:	f001 be01 	b.w	eb96 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000cf94 <sdc_hci_cmd_le_read_white_list_size>:
    cf94:	f001 be08 	b.w	eba8 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000cf98 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    cf98:	f001 be0a 	b.w	ebb0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000cf9c <sdc_hci_cmd_le_remove_device_from_white_list>:
    cf9c:	f001 be21 	b.w	ebe2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000cfa0 <sdc_hci_cmd_le_set_address_resolution_enable>:
    cfa0:	f001 be34 	b.w	ec0c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000cfa4 <sdc_hci_cmd_le_set_data_length>:
    cfa4:	f001 be40 	b.w	ec28 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000cfa8 <sdc_hci_cmd_le_set_default_phy>:
    cfa8:	f7fd bbcc 	b.w	a744 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000cfac <sdc_hci_cmd_le_set_event_mask>:
    cfac:	b510      	push	{r4, lr}
    cfae:	f7f7 f81d 	bl	3fec <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    cfb2:	2000      	movs	r0, #0
    cfb4:	bd10      	pop	{r4, pc}

0000cfb6 <sdc_hci_cmd_le_set_host_channel_classification>:
    cfb6:	f001 be5e 	b.w	ec76 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000cfba <sdc_hci_cmd_le_set_phy>:
    cfba:	f001 be7c 	b.w	ecb6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000cfbe <sdc_hci_cmd_le_set_privacy_mode>:
    cfbe:	f001 be9a 	b.w	ecf6 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000cfc2 <sdc_hci_cmd_le_set_random_address>:
    cfc2:	f001 beae 	b.w	ed22 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000cfc6 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    cfc6:	f001 beba 	b.w	ed3e <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000cfca <sdc_hci_cmd_le_set_scan_enable>:
    cfca:	f001 bec1 	b.w	ed50 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000cfce <sdc_hci_cmd_le_set_scan_params>:
    cfce:	f001 bed5 	b.w	ed7c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000cfd2 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    cfd2:	f001 bf32 	b.w	ee3a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000cfd6 <sdc_hci_cmd_lc_disconnect>:
    cfd6:	f001 bcb4 	b.w	e942 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000cfda <sdc_hci_cmd_lc_read_remote_version_information>:
    cfda:	f001 bfb8 	b.w	ef4e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    cfde:	b570      	push	{r4, r5, r6, lr}
    cfe0:	880b      	ldrh	r3, [r1, #0]
    cfe2:	7f04      	ldrb	r4, [r0, #28]
    cfe4:	f100 0524 	add.w	r5, r0, #36	; 0x24
    cfe8:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    cfec:	8802      	ldrh	r2, [r0, #0]
    cfee:	4435      	add	r5, r6
    cff0:	1da4      	adds	r4, r4, #6
    cff2:	882d      	ldrh	r5, [r5, #0]
    cff4:	4422      	add	r2, r4
    cff6:	b292      	uxth	r2, r2
    cff8:	4425      	add	r5, r4
    cffa:	1e54      	subs	r4, r2, #1
    cffc:	442c      	add	r4, r5
    cffe:	fb94 f4f2 	sdiv	r4, r4, r2
    d002:	fb02 6204 	mla	r2, r2, r4, r6
    d006:	8840      	ldrh	r0, [r0, #2]
    d008:	b292      	uxth	r2, r2
    d00a:	4290      	cmp	r0, r2
    d00c:	d903      	bls.n	d016 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d00e:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d012:	4310      	orrs	r0, r2
    d014:	e002      	b.n	d01c <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d016:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d01a:	4398      	bics	r0, r3
    d01c:	8008      	strh	r0, [r1, #0]
    d01e:	bd70      	pop	{r4, r5, r6, pc}
    d020:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    d024:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d028:	429a      	cmp	r2, r3
    d02a:	d107      	bne.n	d03c <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d02c:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d030:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d034:	4288      	cmp	r0, r1
    d036:	d001      	beq.n	d03c <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d038:	2001      	movs	r0, #1
    d03a:	4770      	bx	lr
    d03c:	2000      	movs	r0, #0
    d03e:	4770      	bx	lr

0000d040 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    d040:	b570      	push	{r4, r5, r6, lr}
    d042:	7f00      	ldrb	r0, [r0, #28]
    d044:	461c      	mov	r4, r3
    d046:	1d80      	adds	r0, r0, #6
    d048:	4408      	add	r0, r1
    d04a:	4613      	mov	r3, r2
    d04c:	8809      	ldrh	r1, [r1, #0]
    d04e:	9a04      	ldr	r2, [sp, #16]
    d050:	1cc9      	adds	r1, r1, #3
    d052:	b289      	uxth	r1, r1
    d054:	1915      	adds	r5, r2, r4
    d056:	1ec0      	subs	r0, r0, #3
    d058:	428d      	cmp	r5, r1
    d05a:	d805      	bhi.n	d068 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    d05c:	1881      	adds	r1, r0, r2
    d05e:	4622      	mov	r2, r4
    d060:	4618      	mov	r0, r3
    d062:	f7ff fa4f 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d066:	e000      	b.n	d06a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    d068:	2400      	movs	r4, #0
    d06a:	4620      	mov	r0, r4
    d06c:	bd70      	pop	{r4, r5, r6, pc}

0000d06e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    d06e:	b570      	push	{r4, r5, r6, lr}
    d070:	7f00      	ldrb	r0, [r0, #28]
    d072:	461c      	mov	r4, r3
    d074:	1d80      	adds	r0, r0, #6
    d076:	4408      	add	r0, r1
    d078:	4613      	mov	r3, r2
    d07a:	8809      	ldrh	r1, [r1, #0]
    d07c:	9a04      	ldr	r2, [sp, #16]
    d07e:	1cc9      	adds	r1, r1, #3
    d080:	b289      	uxth	r1, r1
    d082:	1915      	adds	r5, r2, r4
    d084:	1ec0      	subs	r0, r0, #3
    d086:	428d      	cmp	r5, r1
    d088:	d805      	bhi.n	d096 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    d08a:	4410      	add	r0, r2
    d08c:	4622      	mov	r2, r4
    d08e:	4619      	mov	r1, r3
    d090:	f7ff fa38 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d094:	e000      	b.n	d098 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    d096:	2400      	movs	r4, #0
    d098:	4620      	mov	r0, r4
    d09a:	bd70      	pop	{r4, r5, r6, pc}

0000d09c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d09c:	8881      	ldrh	r1, [r0, #4]
    d09e:	88c0      	ldrh	r0, [r0, #6]
    d0a0:	4288      	cmp	r0, r1
    d0a2:	d101      	bne.n	d0a8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d0a4:	2001      	movs	r0, #1
    d0a6:	4770      	bx	lr
    d0a8:	2000      	movs	r0, #0
    d0aa:	4770      	bx	lr

0000d0ac <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d0ac:	8881      	ldrh	r1, [r0, #4]
    d0ae:	8900      	ldrh	r0, [r0, #8]
    d0b0:	4288      	cmp	r0, r1
    d0b2:	d101      	bne.n	d0b8 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    d0b4:	2001      	movs	r0, #1
    d0b6:	4770      	bx	lr
    d0b8:	2000      	movs	r0, #0
    d0ba:	4770      	bx	lr

0000d0bc <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d0bc:	b570      	push	{r4, r5, r6, lr}
    d0be:	4604      	mov	r4, r0
    d0c0:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d0c4:	8880      	ldrh	r0, [r0, #4]
    d0c6:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d0ca:	4401      	add	r1, r0
    d0cc:	8a20      	ldrh	r0, [r4, #16]
    d0ce:	2800      	cmp	r0, #0
    d0d0:	d01a      	beq.n	d108 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d0d2:	89a2      	ldrh	r2, [r4, #12]
    d0d4:	2500      	movs	r5, #0
    d0d6:	4410      	add	r0, r2
    d0d8:	b280      	uxth	r0, r0
    d0da:	81a0      	strh	r0, [r4, #12]
    d0dc:	880a      	ldrh	r2, [r1, #0]
    d0de:	4290      	cmp	r0, r2
    d0e0:	d905      	bls.n	d0ee <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    d0e2:	f240 1163 	movw	r1, #355	; 0x163
    d0e6:	f04f 0014 	mov.w	r0, #20
    d0ea:	f7f6 fe03 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0ee:	d109      	bne.n	d104 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d0f0:	69a0      	ldr	r0, [r4, #24]
    d0f2:	b108      	cbz	r0, d0f8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    d0f4:	7f40      	ldrb	r0, [r0, #29]
    d0f6:	7088      	strb	r0, [r1, #2]
    d0f8:	f104 0104 	add.w	r1, r4, #4
    d0fc:	4620      	mov	r0, r4
    d0fe:	f7ff ff6e 	bl	cfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d102:	81a5      	strh	r5, [r4, #12]
    d104:	8225      	strh	r5, [r4, #16]
    d106:	2001      	movs	r0, #1
    d108:	bd70      	pop	{r4, r5, r6, pc}

0000d10a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d10a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d10c:	4604      	mov	r4, r0
    d10e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    d112:	88c0      	ldrh	r0, [r0, #6]
    d114:	460e      	mov	r6, r1
    d116:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d11a:	8a60      	ldrh	r0, [r4, #18]
    d11c:	19d9      	adds	r1, r3, r7
    d11e:	b108      	cbz	r0, d124 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    d120:	42b0      	cmp	r0, r6
    d122:	d201      	bcs.n	d128 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    d124:	2000      	movs	r0, #0
    d126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d128:	89e0      	ldrh	r0, [r4, #14]
    d12a:	2500      	movs	r5, #0
    d12c:	b140      	cbz	r0, d140 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    d12e:	f8b1 c000 	ldrh.w	ip, [r1]
    d132:	4560      	cmp	r0, ip
    d134:	d008      	beq.n	d148 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d136:	f240 214b 	movw	r1, #587	; 0x24b
    d13a:	2014      	movs	r0, #20
    d13c:	f7f6 fdda 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d140:	7f60      	ldrb	r0, [r4, #29]
    d142:	7088      	strb	r0, [r1, #2]
    d144:	800d      	strh	r5, [r1, #0]
    d146:	e00e      	b.n	d166 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d148:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d14c:	4418      	add	r0, r3
    d14e:	f10c 0c06 	add.w	ip, ip, #6
    d152:	44bc      	add	ip, r7
    d154:	4460      	add	r0, ip
    d156:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d15a:	f820 cc03 	strh.w	ip, [r0, #-3]
    d15e:	f894 c020 	ldrb.w	ip, [r4, #32]
    d162:	f800 cc01 	strb.w	ip, [r0, #-1]
    d166:	89e0      	ldrh	r0, [r4, #14]
    d168:	4430      	add	r0, r6
    d16a:	81e0      	strh	r0, [r4, #14]
    d16c:	8808      	ldrh	r0, [r1, #0]
    d16e:	4430      	add	r0, r6
    d170:	8008      	strh	r0, [r1, #0]
    d172:	b19a      	cbz	r2, d19c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    d174:	1da1      	adds	r1, r4, #6
    d176:	4620      	mov	r0, r4
    d178:	f7ff ff31 	bl	cfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d17c:	81e5      	strh	r5, [r4, #14]
    d17e:	7f60      	ldrb	r0, [r4, #29]
    d180:	1c40      	adds	r0, r0, #1
    d182:	7760      	strb	r0, [r4, #29]
    d184:	7da0      	ldrb	r0, [r4, #22]
    d186:	f88d 0000 	strb.w	r0, [sp]
    d18a:	9800      	ldr	r0, [sp, #0]
    d18c:	9000      	str	r0, [sp, #0]
    d18e:	f89d 0000 	ldrb.w	r0, [sp]
    d192:	b178      	cbz	r0, d1b4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d194:	88e0      	ldrh	r0, [r4, #6]
    d196:	82a0      	strh	r0, [r4, #20]
    d198:	75a5      	strb	r5, [r4, #22]
    d19a:	e00b      	b.n	d1b4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d19c:	7f20      	ldrb	r0, [r4, #28]
    d19e:	89e1      	ldrh	r1, [r4, #14]
    d1a0:	1d80      	adds	r0, r0, #6
    d1a2:	4438      	add	r0, r7
    d1a4:	4419      	add	r1, r3
    d1a6:	4408      	add	r0, r1
    d1a8:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d1ac:	83e1      	strh	r1, [r4, #30]
    d1ae:	7880      	ldrb	r0, [r0, #2]
    d1b0:	f884 0020 	strb.w	r0, [r4, #32]
    d1b4:	8265      	strh	r5, [r4, #18]
    d1b6:	2001      	movs	r0, #1
    d1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d1ba <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d1ba:	1cc0      	adds	r0, r0, #3
    d1bc:	4770      	bx	lr

0000d1be <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d1be:	b510      	push	{r4, lr}
    d1c0:	88c2      	ldrh	r2, [r0, #6]
    d1c2:	8943      	ldrh	r3, [r0, #10]
    d1c4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
    d1c8:	f423 4400 	bic.w	r4, r3, #32768	; 0x8000
    d1cc:	1a61      	subs	r1, r4, r1
    d1ce:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d1d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d1d6:	429a      	cmp	r2, r3
    d1d8:	d101      	bne.n	d1de <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d1da:	8842      	ldrh	r2, [r0, #2]
    d1dc:	4411      	add	r1, r2
    d1de:	7f02      	ldrb	r2, [r0, #28]
    d1e0:	8800      	ldrh	r0, [r0, #0]
    d1e2:	4410      	add	r0, r2
    d1e4:	1d80      	adds	r0, r0, #6
    d1e6:	b280      	uxth	r0, r0
    d1e8:	fb91 f0f0 	sdiv	r0, r1, r0
    d1ec:	b280      	uxth	r0, r0
    d1ee:	bd10      	pop	{r4, pc}

0000d1f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d1f0:	b510      	push	{r4, lr}
    d1f2:	4604      	mov	r4, r0
    d1f4:	88c0      	ldrh	r0, [r0, #6]
    d1f6:	88a1      	ldrh	r1, [r4, #4]
    d1f8:	4281      	cmp	r1, r0
    d1fa:	d007      	beq.n	d20c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d1fc:	89a0      	ldrh	r0, [r4, #12]
    d1fe:	b928      	cbnz	r0, d20c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d200:	8a20      	ldrh	r0, [r4, #16]
    d202:	b918      	cbnz	r0, d20c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d204:	88a0      	ldrh	r0, [r4, #4]
    d206:	8aa1      	ldrh	r1, [r4, #20]
    d208:	4288      	cmp	r0, r1
    d20a:	d101      	bne.n	d210 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    d20c:	2000      	movs	r0, #0
    d20e:	bd10      	pop	{r4, pc}
    d210:	1d21      	adds	r1, r4, #4
    d212:	4620      	mov	r0, r4
    d214:	f7ff fee3 	bl	cfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d218:	2000      	movs	r0, #0
    d21a:	8220      	strh	r0, [r4, #16]
    d21c:	2001      	movs	r0, #1
    d21e:	bd10      	pop	{r4, pc}

0000d220 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d220:	b510      	push	{r4, lr}
    d222:	4604      	mov	r4, r0
    d224:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d228:	88c0      	ldrh	r0, [r0, #6]
    d22a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d22e:	4402      	add	r2, r0
    d230:	8820      	ldrh	r0, [r4, #0]
    d232:	2845      	cmp	r0, #69	; 0x45
    d234:	d200      	bcs.n	d238 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d236:	2045      	movs	r0, #69	; 0x45
    d238:	4288      	cmp	r0, r1
    d23a:	d204      	bcs.n	d246 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d23c:	f240 1119 	movw	r1, #281	; 0x119
    d240:	2014      	movs	r0, #20
    d242:	f7f6 fd57 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d246:	7de0      	ldrb	r0, [r4, #23]
    d248:	2800      	cmp	r0, #0
    d24a:	d003      	beq.n	d254 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d24c:	8810      	ldrh	r0, [r2, #0]
    d24e:	4288      	cmp	r0, r1
    d250:	d201      	bcs.n	d256 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d252:	2000      	movs	r0, #0
    d254:	bd10      	pop	{r4, pc}
    d256:	8011      	strh	r1, [r2, #0]
    d258:	1da1      	adds	r1, r4, #6
    d25a:	4620      	mov	r0, r4
    d25c:	f7ff febf 	bl	cfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d260:	2000      	movs	r0, #0
    d262:	75e0      	strb	r0, [r4, #23]
    d264:	2001      	movs	r0, #1
    d266:	bd10      	pop	{r4, pc}

0000d268 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    d268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d26c:	8941      	ldrh	r1, [r0, #10]
    d26e:	8886      	ldrh	r6, [r0, #4]
    d270:	4604      	mov	r4, r0
    d272:	2500      	movs	r5, #0
    d274:	f100 070a 	add.w	r7, r0, #10
    d278:	e006      	b.n	d288 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    d27a:	4639      	mov	r1, r7
    d27c:	4620      	mov	r0, r4
    d27e:	f7ff feae 	bl	cfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d282:	1c6d      	adds	r5, r5, #1
    d284:	8961      	ldrh	r1, [r4, #10]
    d286:	b2ad      	uxth	r5, r5
    d288:	42b1      	cmp	r1, r6
    d28a:	d1f6      	bne.n	d27a <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    d28c:	4628      	mov	r0, r5
    d28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d292 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d292:	b530      	push	{r4, r5, lr}
    d294:	88c4      	ldrh	r4, [r0, #6]
    d296:	8881      	ldrh	r1, [r0, #4]
    d298:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d29c:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d2a0:	4413      	add	r3, r2
    d2a2:	8882      	ldrh	r2, [r0, #4]
    d2a4:	8a85      	ldrh	r5, [r0, #20]
    d2a6:	42aa      	cmp	r2, r5
    d2a8:	d012      	beq.n	d2d0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d2aa:	42a1      	cmp	r1, r4
    d2ac:	d010      	beq.n	d2d0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d2ae:	8981      	ldrh	r1, [r0, #12]
    d2b0:	b971      	cbnz	r1, d2d0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d2b2:	6982      	ldr	r2, [r0, #24]
    d2b4:	b172      	cbz	r2, d2d4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d2b6:	4610      	mov	r0, r2
    d2b8:	f7ff fef8 	bl	d0ac <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    d2bc:	b950      	cbnz	r0, d2d4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d2be:	8910      	ldrh	r0, [r2, #8]
    d2c0:	3224      	adds	r2, #36	; 0x24
    d2c2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d2c6:	4410      	add	r0, r2
    d2c8:	7899      	ldrb	r1, [r3, #2]
    d2ca:	7880      	ldrb	r0, [r0, #2]
    d2cc:	4288      	cmp	r0, r1
    d2ce:	d101      	bne.n	d2d4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d2d0:	2000      	movs	r0, #0
    d2d2:	bd30      	pop	{r4, r5, pc}
    d2d4:	4618      	mov	r0, r3
    d2d6:	bd30      	pop	{r4, r5, pc}

0000d2d8 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d2d8:	8803      	ldrh	r3, [r0, #0]
    d2da:	2b45      	cmp	r3, #69	; 0x45
    d2dc:	d200      	bcs.n	d2e0 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d2de:	2345      	movs	r3, #69	; 0x45
    d2e0:	8013      	strh	r3, [r2, #0]
    d2e2:	88c2      	ldrh	r2, [r0, #6]
    d2e4:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    d2e8:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d2ec:	441a      	add	r2, r3
    d2ee:	600a      	str	r2, [r1, #0]
    d2f0:	89c0      	ldrh	r0, [r0, #14]
    d2f2:	4770      	bx	lr

0000d2f4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d2f4:	7f00      	ldrb	r0, [r0, #28]
    d2f6:	1d80      	adds	r0, r0, #6
    d2f8:	4408      	add	r0, r1
    d2fa:	1ec0      	subs	r0, r0, #3
    d2fc:	6010      	str	r0, [r2, #0]
    d2fe:	8808      	ldrh	r0, [r1, #0]
    d300:	4770      	bx	lr

0000d302 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d306:	460e      	mov	r6, r1
    d308:	88c1      	ldrh	r1, [r0, #6]
    d30a:	8902      	ldrh	r2, [r0, #8]
    d30c:	4604      	mov	r4, r0
    d30e:	f100 0824 	add.w	r8, r0, #36	; 0x24
    d312:	8800      	ldrh	r0, [r0, #0]
    d314:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    d318:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    d31c:	2845      	cmp	r0, #69	; 0x45
    d31e:	d200      	bcs.n	d322 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d320:	2045      	movs	r0, #69	; 0x45
    d322:	42b0      	cmp	r0, r6
    d324:	d203      	bcs.n	d32e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d326:	21db      	movs	r1, #219	; 0xdb
    d328:	2014      	movs	r0, #20
    d32a:	f7f6 fce3 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d32e:	4610      	mov	r0, r2
    d330:	f7ff fe76 	bl	d020 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d334:	b110      	cbz	r0, d33c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d336:	2000      	movs	r0, #0
    d338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d33c:	42af      	cmp	r7, r5
    d33e:	d908      	bls.n	d352 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d340:	7f21      	ldrb	r1, [r4, #28]
    d342:	1b78      	subs	r0, r7, r5
    d344:	1a40      	subs	r0, r0, r1
    d346:	1f80      	subs	r0, r0, #6
    d348:	4286      	cmp	r6, r0
    d34a:	dd02      	ble.n	d352 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d34c:	2000      	movs	r0, #0
    d34e:	75e0      	strb	r0, [r4, #23]
    d350:	e7f1      	b.n	d336 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d352:	eb08 0005 	add.w	r0, r8, r5
    d356:	2101      	movs	r1, #1
    d358:	8006      	strh	r6, [r0, #0]
    d35a:	75e1      	strb	r1, [r4, #23]
    d35c:	e7ec      	b.n	d338 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d35e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d35e:	b538      	push	{r3, r4, r5, lr}
    d360:	88c4      	ldrh	r4, [r0, #6]
    d362:	8881      	ldrh	r1, [r0, #4]
    d364:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d368:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d36c:	441a      	add	r2, r3
    d36e:	42a1      	cmp	r1, r4
    d370:	d010      	beq.n	d394 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d372:	8983      	ldrh	r3, [r0, #12]
    d374:	8a05      	ldrh	r5, [r0, #16]
    d376:	8812      	ldrh	r2, [r2, #0]
    d378:	442b      	add	r3, r5
    d37a:	4293      	cmp	r3, r2
    d37c:	d308      	bcc.n	d390 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d37e:	f8ad 1000 	strh.w	r1, [sp]
    d382:	4669      	mov	r1, sp
    d384:	f7ff fe2b 	bl	cfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d388:	f8bd 0000 	ldrh.w	r0, [sp]
    d38c:	42a0      	cmp	r0, r4
    d38e:	d001      	beq.n	d394 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d390:	2001      	movs	r0, #1
    d392:	bd38      	pop	{r3, r4, r5, pc}
    d394:	2000      	movs	r0, #0
    d396:	bd38      	pop	{r3, r4, r5, pc}

0000d398 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d398:	b570      	push	{r4, r5, r6, lr}
    d39a:	88c6      	ldrh	r6, [r0, #6]
    d39c:	8885      	ldrh	r5, [r0, #4]
    d39e:	4603      	mov	r3, r0
    d3a0:	f100 0424 	add.w	r4, r0, #36	; 0x24
    d3a4:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    d3a8:	4420      	add	r0, r4
    d3aa:	42b5      	cmp	r5, r6
    d3ac:	d102      	bne.n	d3b4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d3ae:	2000      	movs	r0, #0
    d3b0:	8218      	strh	r0, [r3, #16]
    d3b2:	bd70      	pop	{r4, r5, r6, pc}
    d3b4:	8804      	ldrh	r4, [r0, #0]
    d3b6:	899d      	ldrh	r5, [r3, #12]
    d3b8:	7f1e      	ldrb	r6, [r3, #28]
    d3ba:	1b64      	subs	r4, r4, r5
    d3bc:	4435      	add	r5, r6
    d3be:	4428      	add	r0, r5
    d3c0:	880d      	ldrh	r5, [r1, #0]
    d3c2:	b2a4      	uxth	r4, r4
    d3c4:	1cc0      	adds	r0, r0, #3
    d3c6:	42a5      	cmp	r5, r4
    d3c8:	d900      	bls.n	d3cc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d3ca:	800c      	strh	r4, [r1, #0]
    d3cc:	899c      	ldrh	r4, [r3, #12]
    d3ce:	b124      	cbz	r4, d3da <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d3d0:	2400      	movs	r4, #0
    d3d2:	7014      	strb	r4, [r2, #0]
    d3d4:	8809      	ldrh	r1, [r1, #0]
    d3d6:	8219      	strh	r1, [r3, #16]
    d3d8:	bd70      	pop	{r4, r5, r6, pc}
    d3da:	2401      	movs	r4, #1
    d3dc:	e7f9      	b.n	d3d2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d3de <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    d3de:	b508      	push	{r3, lr}
    d3e0:	8a81      	ldrh	r1, [r0, #20]
    d3e2:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d3e6:	3aff      	subs	r2, #255	; 0xff
    d3e8:	d008      	beq.n	d3fc <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    d3ea:	7d82      	ldrb	r2, [r0, #22]
    d3ec:	f88d 2000 	strb.w	r2, [sp]
    d3f0:	9a00      	ldr	r2, [sp, #0]
    d3f2:	9200      	str	r2, [sp, #0]
    d3f4:	f89d 2000 	ldrb.w	r2, [sp]
    d3f8:	b952      	cbnz	r2, d410 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d3fa:	e004      	b.n	d406 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    d3fc:	f44f 7162 	mov.w	r1, #904	; 0x388
    d400:	2014      	movs	r0, #20
    d402:	f7f6 fc77 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d406:	8880      	ldrh	r0, [r0, #4]
    d408:	4281      	cmp	r1, r0
    d40a:	d101      	bne.n	d410 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d40c:	2000      	movs	r0, #0
    d40e:	bd08      	pop	{r3, pc}
    d410:	2001      	movs	r0, #1
    d412:	bd08      	pop	{r3, pc}

0000d414 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    d414:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d418:	8281      	strh	r1, [r0, #20]
    d41a:	2100      	movs	r1, #0
    d41c:	7581      	strb	r1, [r0, #22]
    d41e:	4770      	bx	lr

0000d420 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    d420:	b510      	push	{r4, lr}
    d422:	8a81      	ldrh	r1, [r0, #20]
    d424:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d428:	3aff      	subs	r2, #255	; 0xff
    d42a:	d004      	beq.n	d436 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    d42c:	f44f 7159 	mov.w	r1, #868	; 0x364
    d430:	2014      	movs	r0, #20
    d432:	f7f6 fc5f 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d436:	88c1      	ldrh	r1, [r0, #6]
    d438:	8281      	strh	r1, [r0, #20]
    d43a:	89c1      	ldrh	r1, [r0, #14]
    d43c:	b109      	cbz	r1, d442 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    d43e:	2101      	movs	r1, #1
    d440:	e000      	b.n	d444 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    d442:	2100      	movs	r1, #0
    d444:	7581      	strb	r1, [r0, #22]
    d446:	bd10      	pop	{r4, pc}

0000d448 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d44c:	461d      	mov	r5, r3
    d44e:	4616      	mov	r6, r2
    d450:	9f06      	ldr	r7, [sp, #24]
    d452:	460b      	mov	r3, r1
    d454:	4604      	mov	r4, r0
    d456:	463a      	mov	r2, r7
    d458:	4629      	mov	r1, r5
    d45a:	4630      	mov	r0, r6
    d45c:	f000 f84f 	bl	d4fe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d460:	4283      	cmp	r3, r0
    d462:	d201      	bcs.n	d468 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d464:	21a8      	movs	r1, #168	; 0xa8
    d466:	e018      	b.n	d49a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d468:	1ce0      	adds	r0, r4, #3
    d46a:	f020 0103 	bic.w	r1, r0, #3
    d46e:	4620      	mov	r0, r4
    d470:	42a1      	cmp	r1, r4
    d472:	d001      	beq.n	d478 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    d474:	21a9      	movs	r1, #169	; 0xa9
    d476:	e010      	b.n	d49a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d478:	2224      	movs	r2, #36	; 0x24
    d47a:	2100      	movs	r1, #0
    d47c:	f7ff f8bc 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d480:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d484:	82a0      	strh	r0, [r4, #20]
    d486:	19a8      	adds	r0, r5, r6
    d488:	1d80      	adds	r0, r0, #6
    d48a:	4378      	muls	r0, r7
    d48c:	b280      	uxth	r0, r0
    d48e:	7725      	strb	r5, [r4, #28]
    d490:	8060      	strh	r0, [r4, #2]
    d492:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d496:	d903      	bls.n	d4a0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    d498:	21af      	movs	r1, #175	; 0xaf
    d49a:	2014      	movs	r0, #20
    d49c:	f7f6 fc2a 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4a0:	8026      	strh	r6, [r4, #0]
    d4a2:	2000      	movs	r0, #0
    d4a4:	7760      	strb	r0, [r4, #29]
    d4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d4aa <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    d4aa:	6181      	str	r1, [r0, #24]
    d4ac:	6188      	str	r0, [r1, #24]
    d4ae:	4770      	bx	lr

0000d4b0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4b4:	460b      	mov	r3, r1
    d4b6:	4604      	mov	r4, r0
    d4b8:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d4bc:	8905      	ldrh	r5, [r0, #8]
    d4be:	8946      	ldrh	r6, [r0, #10]
    d4c0:	8880      	ldrh	r0, [r0, #4]
    d4c2:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    d4c6:	4439      	add	r1, r7
    d4c8:	460f      	mov	r7, r1
    d4ca:	4285      	cmp	r5, r0
    d4cc:	d102      	bne.n	d4d4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    d4ce:	2000      	movs	r0, #0
    d4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4d4:	b10a      	cbz	r2, d4da <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    d4d6:	1cc8      	adds	r0, r1, #3
    d4d8:	6010      	str	r0, [r2, #0]
    d4da:	b123      	cbz	r3, d4e6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    d4dc:	7f22      	ldrb	r2, [r4, #28]
    d4de:	1cf9      	adds	r1, r7, #3
    d4e0:	4618      	mov	r0, r3
    d4e2:	f7ff f80f 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d4e6:	883f      	ldrh	r7, [r7, #0]
    d4e8:	f104 0108 	add.w	r1, r4, #8
    d4ec:	4620      	mov	r0, r4
    d4ee:	f7ff fd76 	bl	cfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d4f2:	42b5      	cmp	r5, r6
    d4f4:	d101      	bne.n	d4fa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    d4f6:	8920      	ldrh	r0, [r4, #8]
    d4f8:	8160      	strh	r0, [r4, #10]
    d4fa:	4638      	mov	r0, r7
    d4fc:	e7e8      	b.n	d4d0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000d4fe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d4fe:	4401      	add	r1, r0
    d500:	1d89      	adds	r1, r1, #6
    d502:	4351      	muls	r1, r2
    d504:	b28a      	uxth	r2, r1
    d506:	2100      	movs	r1, #0
    d508:	2845      	cmp	r0, #69	; 0x45
    d50a:	d201      	bcs.n	d510 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    d50c:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    d510:	3224      	adds	r2, #36	; 0x24
    d512:	1850      	adds	r0, r2, r1
    d514:	b280      	uxth	r0, r0
    d516:	4770      	bx	lr

0000d518 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d51c:	4688      	mov	r8, r1
    d51e:	88c1      	ldrh	r1, [r0, #6]
    d520:	4604      	mov	r4, r0
    d522:	8900      	ldrh	r0, [r0, #8]
    d524:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    d528:	f104 0524 	add.w	r5, r4, #36	; 0x24
    d52c:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d530:	eb05 0906 	add.w	r9, r5, r6
    d534:	f7ff fd74 	bl	d020 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d538:	2200      	movs	r2, #0
    d53a:	b998      	cbnz	r0, d564 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d53c:	8820      	ldrh	r0, [r4, #0]
    d53e:	2845      	cmp	r0, #69	; 0x45
    d540:	d200      	bcs.n	d544 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d542:	2045      	movs	r0, #69	; 0x45
    d544:	42b7      	cmp	r7, r6
    d546:	d906      	bls.n	d556 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d548:	7f23      	ldrb	r3, [r4, #28]
    d54a:	1bb9      	subs	r1, r7, r6
    d54c:	1ac9      	subs	r1, r1, r3
    d54e:	1f89      	subs	r1, r1, #6
    d550:	4281      	cmp	r1, r0
    d552:	da00      	bge.n	d556 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d554:	4608      	mov	r0, r1
    d556:	89e1      	ldrh	r1, [r4, #14]
    d558:	b111      	cbz	r1, d560 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d55a:	f8b9 3000 	ldrh.w	r3, [r9]
    d55e:	1ac0      	subs	r0, r0, r3
    d560:	4540      	cmp	r0, r8
    d562:	da03      	bge.n	d56c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d564:	8262      	strh	r2, [r4, #18]
    d566:	2000      	movs	r0, #0
    d568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d56c:	7f20      	ldrb	r0, [r4, #28]
    d56e:	4429      	add	r1, r5
    d570:	1d80      	adds	r0, r0, #6
    d572:	4430      	add	r0, r6
    d574:	4408      	add	r0, r1
    d576:	f8a4 8012 	strh.w	r8, [r4, #18]
    d57a:	1ec0      	subs	r0, r0, #3
    d57c:	e7f4      	b.n	d568 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d57e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d57e:	2100      	movs	r1, #0
    d580:	81c1      	strh	r1, [r0, #14]
    d582:	8241      	strh	r1, [r0, #18]
    d584:	7581      	strb	r1, [r0, #22]
    d586:	4770      	bx	lr

0000d588 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d588:	b570      	push	{r4, r5, r6, lr}
    d58a:	2300      	movs	r3, #0
    d58c:	2908      	cmp	r1, #8
    d58e:	d204      	bcs.n	d59a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    d590:	f240 11cb 	movw	r1, #459	; 0x1cb
    d594:	2015      	movs	r0, #21
    d596:	f7f6 fbad 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d59a:	6802      	ldr	r2, [r0, #0]
    d59c:	b90a      	cbnz	r2, d5a2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d59e:	e01e      	b.n	d5de <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d5a0:	4610      	mov	r0, r2
    d5a2:	6802      	ldr	r2, [r0, #0]
    d5a4:	8893      	ldrh	r3, [r2, #4]
    d5a6:	428b      	cmp	r3, r1
    d5a8:	d002      	beq.n	d5b0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    d5aa:	6813      	ldr	r3, [r2, #0]
    d5ac:	2b00      	cmp	r3, #0
    d5ae:	d1f7      	bne.n	d5a0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    d5b0:	8894      	ldrh	r4, [r2, #4]
    d5b2:	4613      	mov	r3, r2
    d5b4:	428c      	cmp	r4, r1
    d5b6:	d101      	bne.n	d5bc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    d5b8:	6811      	ldr	r1, [r2, #0]
    d5ba:	e00d      	b.n	d5d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    d5bc:	f101 0508 	add.w	r5, r1, #8
    d5c0:	b2ae      	uxth	r6, r5
    d5c2:	2500      	movs	r5, #0
    d5c4:	42b4      	cmp	r4, r6
    d5c6:	d309      	bcc.n	d5dc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    d5c8:	1a64      	subs	r4, r4, r1
    d5ca:	4411      	add	r1, r2
    d5cc:	600d      	str	r5, [r1, #0]
    d5ce:	808c      	strh	r4, [r1, #4]
    d5d0:	6802      	ldr	r2, [r0, #0]
    d5d2:	6812      	ldr	r2, [r2, #0]
    d5d4:	6002      	str	r2, [r0, #0]
    d5d6:	600a      	str	r2, [r1, #0]
    d5d8:	6001      	str	r1, [r0, #0]
    d5da:	e000      	b.n	d5de <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d5dc:	2300      	movs	r3, #0
    d5de:	4618      	mov	r0, r3
    d5e0:	bd70      	pop	{r4, r5, r6, pc}

0000d5e2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d5e2:	b510      	push	{r4, lr}
    d5e4:	000c      	movs	r4, r1
    d5e6:	d006      	beq.n	d5f6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    d5e8:	2c08      	cmp	r4, #8
    d5ea:	d209      	bcs.n	d600 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    d5ec:	f240 1195 	movw	r1, #405	; 0x195
    d5f0:	2015      	movs	r0, #21
    d5f2:	f7f6 fb7f 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5f6:	b108      	cbz	r0, d5fc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d5f8:	2100      	movs	r1, #0
    d5fa:	6001      	str	r1, [r0, #0]
    d5fc:	2000      	movs	r0, #0
    d5fe:	bd10      	pop	{r4, pc}
    d600:	b118      	cbz	r0, d60a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    d602:	b2a1      	uxth	r1, r4
    d604:	6800      	ldr	r0, [r0, #0]
    d606:	f000 f814 	bl	d632 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d60a:	1d20      	adds	r0, r4, #4
    d60c:	bd10      	pop	{r4, pc}

0000d60e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d60e:	2100      	movs	r1, #0
    d610:	6802      	ldr	r2, [r0, #0]
    d612:	e003      	b.n	d61c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d614:	8893      	ldrh	r3, [r2, #4]
    d616:	6812      	ldr	r2, [r2, #0]
    d618:	4419      	add	r1, r3
    d61a:	b289      	uxth	r1, r1
    d61c:	2a00      	cmp	r2, #0
    d61e:	d1f9      	bne.n	d614 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d620:	f000 b807 	b.w	d632 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d624 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d624:	2300      	movs	r3, #0
    d626:	600b      	str	r3, [r1, #0]
    d628:	808a      	strh	r2, [r1, #4]
    d62a:	6802      	ldr	r2, [r0, #0]
    d62c:	600a      	str	r2, [r1, #0]
    d62e:	6001      	str	r1, [r0, #0]
    d630:	4770      	bx	lr
    d632:	2300      	movs	r3, #0
    d634:	6043      	str	r3, [r0, #4]
    d636:	1d02      	adds	r2, r0, #4
    d638:	8101      	strh	r1, [r0, #8]
    d63a:	6002      	str	r2, [r0, #0]
    d63c:	4770      	bx	lr

0000d63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d63e:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d642:	3aff      	subs	r2, #255	; 0xff
    d644:	d000      	beq.n	d648 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    d646:	b109      	cbz	r1, d64c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    d648:	2000      	movs	r0, #0
    d64a:	4770      	bx	lr
    d64c:	f7f6 be32 	b.w	42b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>

0000d650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    d650:	b570      	push	{r4, r5, r6, lr}
    d652:	4605      	mov	r5, r0
    d654:	460c      	mov	r4, r1
    d656:	4608      	mov	r0, r1
    d658:	f000 f84f 	bl	d6fa <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    d65c:	b108      	cbz	r0, d662 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    d65e:	2010      	movs	r0, #16
    d660:	bd70      	pop	{r4, r5, r6, pc}
    d662:	b10d      	cbz	r5, d668 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x18>
    d664:	2007      	movs	r0, #7
    d666:	bd70      	pop	{r4, r5, r6, pc}
    d668:	7025      	strb	r5, [r4, #0]
    d66a:	2000      	movs	r0, #0
    d66c:	8060      	strh	r0, [r4, #2]
    d66e:	bd70      	pop	{r4, r5, r6, pc}
    d670:	b510      	push	{r4, lr}
    d672:	4604      	mov	r4, r0
    d674:	f7f6 fe6a 	bl	434c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    d678:	42a0      	cmp	r0, r4
    d67a:	d901      	bls.n	d680 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x30>
    d67c:	2001      	movs	r0, #1
    d67e:	bd10      	pop	{r4, pc}
    d680:	2000      	movs	r0, #0
    d682:	bd10      	pop	{r4, pc}
    d684:	4770      	bx	lr

0000d686 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d686:	b570      	push	{r4, r5, r6, lr}
    d688:	460e      	mov	r6, r1
    d68a:	461d      	mov	r5, r3
    d68c:	4611      	mov	r1, r2
    d68e:	f000 f811 	bl	d6b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    d692:	4604      	mov	r4, r0
    d694:	4629      	mov	r1, r5
    d696:	4630      	mov	r0, r6
    d698:	f000 f803 	bl	d6a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    d69c:	4420      	add	r0, r4
    d69e:	1d00      	adds	r0, r0, #4
    d6a0:	bd70      	pop	{r4, r5, r6, pc}
    d6a2:	b510      	push	{r4, lr}
    d6a4:	460a      	mov	r2, r1
    d6a6:	2101      	movs	r1, #1
    d6a8:	f7ff ff29 	bl	d4fe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d6ac:	1cc0      	adds	r0, r0, #3
    d6ae:	f020 0003 	bic.w	r0, r0, #3
    d6b2:	bd10      	pop	{r4, pc}
    d6b4:	b510      	push	{r4, lr}
    d6b6:	460a      	mov	r2, r1
    d6b8:	2101      	movs	r1, #1
    d6ba:	f7ff ff20 	bl	d4fe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d6be:	1cc0      	adds	r0, r0, #3
    d6c0:	f020 0003 	bic.w	r0, r0, #3
    d6c4:	bd10      	pop	{r4, pc}
    d6c6:	2800      	cmp	r0, #0
    d6c8:	db09      	blt.n	d6de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    d6ca:	f000 021f 	and.w	r2, r0, #31
    d6ce:	2101      	movs	r1, #1
    d6d0:	4091      	lsls	r1, r2
    d6d2:	0940      	lsrs	r0, r0, #5
    d6d4:	0080      	lsls	r0, r0, #2
    d6d6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d6da:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d6de:	4770      	bx	lr

0000d6e0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d6e0:	f7f6 bffa 	b.w	46d8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000d6e4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    d6e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d6e8:	2000      	movs	r0, #0
    d6ea:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d6ee:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d6f2:	2001      	movs	r0, #1
    d6f4:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d6f8:	4770      	bx	lr

0000d6fa <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    d6fa:	b108      	cbz	r0, d700 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    d6fc:	2000      	movs	r0, #0
    d6fe:	4770      	bx	lr
    d700:	2001      	movs	r0, #1
    d702:	4770      	bx	lr

0000d704 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d704:	f7f7 b92e 	b.w	4964 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d708 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d708:	f7f7 b91c 	b.w	4944 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d70c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d70c:	b510      	push	{r4, lr}
    d70e:	2900      	cmp	r1, #0
    d710:	4604      	mov	r4, r0
    d712:	f04f 0106 	mov.w	r1, #6
    d716:	d002      	beq.n	d71e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d718:	f7f6 fb7a 	bl	3e10 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d71c:	e001      	b.n	d722 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d71e:	f7f6 fb93 	bl	3e48 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d722:	7960      	ldrb	r0, [r4, #5]
    d724:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d728:	7160      	strb	r0, [r4, #5]
    d72a:	bd10      	pop	{r4, pc}

0000d72c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d72c:	4770      	bx	lr

0000d72e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d72e:	b530      	push	{r4, r5, lr}
    d730:	460c      	mov	r4, r1
    d732:	4605      	mov	r5, r0
    d734:	b08d      	sub	sp, #52	; 0x34
    d736:	f04f 0103 	mov.w	r1, #3
    d73a:	f104 0003 	add.w	r0, r4, #3
    d73e:	b112      	cbz	r2, d746 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d740:	f7f6 fb66 	bl	3e10 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d744:	e001      	b.n	d74a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d746:	f7f6 fb7f 	bl	3e48 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d74a:	7960      	ldrb	r0, [r4, #5]
    d74c:	220d      	movs	r2, #13
    d74e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d752:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d756:	7160      	strb	r0, [r4, #5]
    d758:	2100      	movs	r1, #0
    d75a:	a804      	add	r0, sp, #16
    d75c:	f7fe ff4c 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d760:	78e0      	ldrb	r0, [r4, #3]
    d762:	f88d 001f 	strb.w	r0, [sp, #31]
    d766:	7920      	ldrb	r0, [r4, #4]
    d768:	f88d 001e 	strb.w	r0, [sp, #30]
    d76c:	7960      	ldrb	r0, [r4, #5]
    d76e:	f88d 001d 	strb.w	r0, [sp, #29]
    d772:	2210      	movs	r2, #16
    d774:	4629      	mov	r1, r5
    d776:	4668      	mov	r0, sp
    d778:	f7fe fec4 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d77c:	4668      	mov	r0, sp
    d77e:	f7ff ffaf 	bl	d6e0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d782:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d786:	7020      	strb	r0, [r4, #0]
    d788:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d78c:	7060      	strb	r0, [r4, #1]
    d78e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d792:	70a0      	strb	r0, [r4, #2]
    d794:	b00d      	add	sp, #52	; 0x34
    d796:	bd30      	pop	{r4, r5, pc}

0000d798 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    d798:	b530      	push	{r4, r5, lr}
    d79a:	b08d      	sub	sp, #52	; 0x34
    d79c:	460c      	mov	r4, r1
    d79e:	4605      	mov	r5, r0
    d7a0:	220d      	movs	r2, #13
    d7a2:	2100      	movs	r1, #0
    d7a4:	a804      	add	r0, sp, #16
    d7a6:	f7fe ff27 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d7aa:	78e0      	ldrb	r0, [r4, #3]
    d7ac:	f88d 001f 	strb.w	r0, [sp, #31]
    d7b0:	7920      	ldrb	r0, [r4, #4]
    d7b2:	f88d 001e 	strb.w	r0, [sp, #30]
    d7b6:	7960      	ldrb	r0, [r4, #5]
    d7b8:	f88d 001d 	strb.w	r0, [sp, #29]
    d7bc:	2210      	movs	r2, #16
    d7be:	4629      	mov	r1, r5
    d7c0:	4668      	mov	r0, sp
    d7c2:	f7fe fe9f 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d7c6:	4668      	mov	r0, sp
    d7c8:	f7ff ff8a 	bl	d6e0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d7cc:	7820      	ldrb	r0, [r4, #0]
    d7ce:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    d7d2:	4288      	cmp	r0, r1
    d7d4:	d10c      	bne.n	d7f0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d7d6:	7860      	ldrb	r0, [r4, #1]
    d7d8:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    d7dc:	4288      	cmp	r0, r1
    d7de:	d107      	bne.n	d7f0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d7e0:	78a0      	ldrb	r0, [r4, #2]
    d7e2:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    d7e6:	4288      	cmp	r0, r1
    d7e8:	d102      	bne.n	d7f0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d7ea:	2001      	movs	r0, #1
    d7ec:	b00d      	add	sp, #52	; 0x34
    d7ee:	bd30      	pop	{r4, r5, pc}
    d7f0:	2000      	movs	r0, #0
    d7f2:	e7fb      	b.n	d7ec <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000d7f4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d7f4:	f7f7 bc84 	b.w	5100 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    d7f8:	b510      	push	{r4, lr}
    d7fa:	2801      	cmp	r0, #1
    d7fc:	d008      	beq.n	d810 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    d7fe:	2802      	cmp	r0, #2
    d800:	d004      	beq.n	d80c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    d802:	f240 319a 	movw	r1, #922	; 0x39a
    d806:	2006      	movs	r0, #6
    d808:	f7f6 fa74 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d80c:	2001      	movs	r0, #1
    d80e:	bd10      	pop	{r4, pc}
    d810:	2000      	movs	r0, #0
    d812:	bd10      	pop	{r4, pc}
    d814:	2900      	cmp	r1, #0
    d816:	d004      	beq.n	d822 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    d818:	2801      	cmp	r0, #1
    d81a:	d003      	beq.n	d824 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d81c:	2901      	cmp	r1, #1
    d81e:	d001      	beq.n	d824 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d820:	2002      	movs	r0, #2
    d822:	4770      	bx	lr
    d824:	2001      	movs	r0, #1
    d826:	4770      	bx	lr
    d828:	f7ff bdb6 	b.w	d398 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d82c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d82c:	2101      	movs	r1, #1
    d82e:	f7f8 b87b 	b.w	5928 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d832 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d832:	b510      	push	{r4, lr}
    d834:	f001 ff4c 	bl	f6d0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d838:	b118      	cbz	r0, d842 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d83a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d83e:	f7fd bc33 	b.w	b0a8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d842:	20ff      	movs	r0, #255	; 0xff
    d844:	bd10      	pop	{r4, pc}

0000d846 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d846:	b510      	push	{r4, lr}
    d848:	f7f8 f8b6 	bl	59b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d84c:	2810      	cmp	r0, #16
    d84e:	d003      	beq.n	d858 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d850:	f7f8 f882 	bl	5958 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d854:	2810      	cmp	r0, #16
    d856:	d100      	bne.n	d85a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d858:	2008      	movs	r0, #8
    d85a:	bd10      	pop	{r4, pc}

0000d85c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    d85c:	b510      	push	{r4, lr}
    d85e:	f7f8 f8ab 	bl	59b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d862:	2810      	cmp	r0, #16
    d864:	d007      	beq.n	d876 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d866:	f7f8 f877 	bl	5958 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d86a:	2810      	cmp	r0, #16
    d86c:	d003      	beq.n	d876 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d86e:	f7f8 f8eb 	bl	5a48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    d872:	2001      	movs	r0, #1
    d874:	bd10      	pop	{r4, pc}
    d876:	2000      	movs	r0, #0
    d878:	bd10      	pop	{r4, pc}

0000d87a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d87a:	b510      	push	{r4, lr}
    d87c:	f7f8 f89c 	bl	59b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d880:	2810      	cmp	r0, #16
    d882:	d003      	beq.n	d88c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d884:	f7f8 f928 	bl	5ad8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    d888:	2001      	movs	r0, #1
    d88a:	bd10      	pop	{r4, pc}
    d88c:	2000      	movs	r0, #0
    d88e:	bd10      	pop	{r4, pc}

0000d890 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d890:	b570      	push	{r4, r5, r6, lr}
    d892:	460e      	mov	r6, r1
    d894:	b08c      	sub	sp, #48	; 0x30
    d896:	4614      	mov	r4, r2
    d898:	4601      	mov	r1, r0
    d89a:	461d      	mov	r5, r3
    d89c:	2210      	movs	r2, #16
    d89e:	4668      	mov	r0, sp
    d8a0:	f000 f9a0 	bl	dbe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d8a4:	2210      	movs	r2, #16
    d8a6:	4631      	mov	r1, r6
    d8a8:	a804      	add	r0, sp, #16
    d8aa:	f000 f99b 	bl	dbe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d8ae:	4668      	mov	r0, sp
    d8b0:	f7ff ff16 	bl	d6e0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d8b4:	a908      	add	r1, sp, #32
    d8b6:	f04f 0210 	mov.w	r2, #16
    d8ba:	4628      	mov	r0, r5
    d8bc:	b11c      	cbz	r4, d8c6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d8be:	f000 f991 	bl	dbe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d8c2:	b00c      	add	sp, #48	; 0x30
    d8c4:	bd70      	pop	{r4, r5, r6, pc}
    d8c6:	f7fe fe1d 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d8ca:	e7fa      	b.n	d8c2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    d8cc:	0781      	lsls	r1, r0, #30
    d8ce:	d501      	bpl.n	d8d4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    d8d0:	2002      	movs	r0, #2
    d8d2:	4770      	bx	lr
    d8d4:	07c0      	lsls	r0, r0, #31
    d8d6:	d0fc      	beq.n	d8d2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    d8d8:	2001      	movs	r0, #1
    d8da:	4770      	bx	lr

0000d8dc <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    d8dc:	b530      	push	{r4, r5, lr}
    d8de:	7901      	ldrb	r1, [r0, #4]
    d8e0:	0949      	lsrs	r1, r1, #5
    d8e2:	d128      	bne.n	d936 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x5a>
    d8e4:	2200      	movs	r2, #0
    d8e6:	4611      	mov	r1, r2
    d8e8:	5c44      	ldrb	r4, [r0, r1]
    d8ea:	1c49      	adds	r1, r1, #1
    d8ec:	f004 0301 	and.w	r3, r4, #1
    d8f0:	0864      	lsrs	r4, r4, #1
    d8f2:	f004 0501 	and.w	r5, r4, #1
    d8f6:	442b      	add	r3, r5
    d8f8:	0864      	lsrs	r4, r4, #1
    d8fa:	f004 0501 	and.w	r5, r4, #1
    d8fe:	441d      	add	r5, r3
    d900:	0863      	lsrs	r3, r4, #1
    d902:	f003 0401 	and.w	r4, r3, #1
    d906:	442c      	add	r4, r5
    d908:	085b      	lsrs	r3, r3, #1
    d90a:	f003 0501 	and.w	r5, r3, #1
    d90e:	442c      	add	r4, r5
    d910:	085b      	lsrs	r3, r3, #1
    d912:	f003 0501 	and.w	r5, r3, #1
    d916:	085b      	lsrs	r3, r3, #1
    d918:	442c      	add	r4, r5
    d91a:	f003 0501 	and.w	r5, r3, #1
    d91e:	442c      	add	r4, r5
    d920:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    d924:	441a      	add	r2, r3
    d926:	b2c9      	uxtb	r1, r1
    d928:	b2d2      	uxtb	r2, r2
    d92a:	2905      	cmp	r1, #5
    d92c:	d3dc      	bcc.n	d8e8 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xc>
    d92e:	2a01      	cmp	r2, #1
    d930:	d901      	bls.n	d936 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x5a>
    d932:	2001      	movs	r0, #1
    d934:	bd30      	pop	{r4, r5, pc}
    d936:	2000      	movs	r0, #0
    d938:	bd30      	pop	{r4, r5, pc}

0000d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d93a:	b510      	push	{r4, lr}
    d93c:	460c      	mov	r4, r1
    d93e:	2100      	movs	r1, #0
    d940:	f7ff fe7d 	bl	d63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d944:	6060      	str	r0, [r4, #4]
    d946:	b110      	cbz	r0, d94e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    d948:	2000      	movs	r0, #0
    d94a:	7020      	strb	r0, [r4, #0]
    d94c:	bd10      	pop	{r4, pc}
    d94e:	2002      	movs	r0, #2
    d950:	bd10      	pop	{r4, pc}

0000d952 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d952:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d956:	4348      	muls	r0, r1
    d958:	4770      	bx	lr

0000d95a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d95a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d95e:	fbb0 f0f1 	udiv	r0, r0, r1
    d962:	b280      	uxth	r0, r0
    d964:	4770      	bx	lr

0000d966 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d966:	b570      	push	{r4, r5, r6, lr}
    d968:	4604      	mov	r4, r0
    d96a:	4290      	cmp	r0, r2
    d96c:	d20b      	bcs.n	d986 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d96e:	1b10      	subs	r0, r2, r4
    d970:	2864      	cmp	r0, #100	; 0x64
    d972:	d200      	bcs.n	d976 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d974:	2064      	movs	r0, #100	; 0x64
    d976:	1825      	adds	r5, r4, r0
    d978:	428d      	cmp	r5, r1
    d97a:	d803      	bhi.n	d984 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d97c:	2104      	movs	r1, #4
    d97e:	f7f3 fccf 	bl	1320 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d982:	b108      	cbz	r0, d988 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d984:	4620      	mov	r0, r4
    d986:	bd70      	pop	{r4, r5, r6, pc}
    d988:	4628      	mov	r0, r5
    d98a:	bd70      	pop	{r4, r5, r6, pc}

0000d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d98c:	b510      	push	{r4, lr}
    d98e:	f1a2 030f 	sub.w	r3, r2, #15
    d992:	290c      	cmp	r1, #12
    d994:	d24f      	bcs.n	da36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d996:	e8df f001 	tbb	[pc, r1]
    d99a:	0806      	.short	0x0806
    d99c:	1815120d 	.word	0x1815120d
    d9a0:	4c322f27 	.word	0x4c322f27
    d9a4:	3d35      	.short	0x3d35
    d9a6:	b3a2      	cbz	r2, da12 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x86>
    d9a8:	e045      	b.n	da36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9aa:	2a07      	cmp	r2, #7
    d9ac:	d045      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9ae:	2a08      	cmp	r2, #8
    d9b0:	d043      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9b2:	e040      	b.n	da36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9b4:	2a0c      	cmp	r2, #12
    d9b6:	d040      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9b8:	2a0b      	cmp	r2, #11
    d9ba:	d03e      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9bc:	e03b      	b.n	da36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9be:	2a0d      	cmp	r2, #13
    d9c0:	d03b      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9c2:	e038      	b.n	da36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9c4:	2b0c      	cmp	r3, #12
    d9c6:	d938      	bls.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9c8:	e035      	b.n	da36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9ca:	2a12      	cmp	r2, #18
    d9cc:	d035      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9ce:	2a11      	cmp	r2, #17
    d9d0:	d033      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9d2:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    d9d6:	b120      	cbz	r0, d9e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x56>
    d9d8:	2a12      	cmp	r2, #18
    d9da:	d32c      	bcc.n	da36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9dc:	2a1a      	cmp	r2, #26
    d9de:	d92c      	bls.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9e0:	e029      	b.n	da36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9e2:	2a16      	cmp	r2, #22
    d9e4:	d2fa      	bcs.n	d9dc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x50>
    d9e6:	e026      	b.n	da36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9e8:	2b03      	cmp	r3, #3
    d9ea:	d926      	bls.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9ec:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    d9f0:	b308      	cbz	r0, da36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9f2:	2a1b      	cmp	r2, #27
    d9f4:	d921      	bls.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9f6:	e01e      	b.n	da36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9f8:	2a04      	cmp	r2, #4
    d9fa:	d01e      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9fc:	e01b      	b.n	da36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9fe:	2a01      	cmp	r2, #1
    da00:	d01b      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da02:	e018      	b.n	da36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da04:	2a1c      	cmp	r2, #28
    da06:	d018      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da08:	2a1d      	cmp	r2, #29
    da0a:	d016      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da0c:	2a1e      	cmp	r2, #30
    da0e:	d014      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da10:	e011      	b.n	da36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da12:	e012      	b.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da14:	2a1f      	cmp	r2, #31
    da16:	d010      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da18:	2a20      	cmp	r2, #32
    da1a:	d00e      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da1c:	2a21      	cmp	r2, #33	; 0x21
    da1e:	d00c      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da20:	2a22      	cmp	r2, #34	; 0x22
    da22:	d00a      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da24:	2a23      	cmp	r2, #35	; 0x23
    da26:	d008      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da28:	2a24      	cmp	r2, #36	; 0x24
    da2a:	d006      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da2c:	2a26      	cmp	r2, #38	; 0x26
    da2e:	d004      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da30:	e001      	b.n	da36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da32:	2a05      	cmp	r2, #5
    da34:	d001      	beq.n	da3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da36:	2000      	movs	r0, #0
    da38:	bd10      	pop	{r4, pc}
    da3a:	2001      	movs	r0, #1
    da3c:	bd10      	pop	{r4, pc}

0000da3e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    da3e:	280c      	cmp	r0, #12
    da40:	d013      	beq.n	da6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da42:	280b      	cmp	r0, #11
    da44:	d011      	beq.n	da6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da46:	280d      	cmp	r0, #13
    da48:	d00f      	beq.n	da6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da4a:	281f      	cmp	r0, #31
    da4c:	d00d      	beq.n	da6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da4e:	2820      	cmp	r0, #32
    da50:	d00b      	beq.n	da6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da52:	2821      	cmp	r0, #33	; 0x21
    da54:	d009      	beq.n	da6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da56:	2822      	cmp	r0, #34	; 0x22
    da58:	d007      	beq.n	da6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da5a:	2823      	cmp	r0, #35	; 0x23
    da5c:	d005      	beq.n	da6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da5e:	2824      	cmp	r0, #36	; 0x24
    da60:	d003      	beq.n	da6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da62:	2826      	cmp	r0, #38	; 0x26
    da64:	d001      	beq.n	da6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da66:	2000      	movs	r0, #0
    da68:	4770      	bx	lr
    da6a:	2001      	movs	r0, #1
    da6c:	4770      	bx	lr

0000da6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    da6e:	f011 0f0c 	tst.w	r1, #12
    da72:	d016      	beq.n	daa2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    da74:	074a      	lsls	r2, r1, #29
    da76:	f44f 7116 	mov.w	r1, #600	; 0x258
    da7a:	2a00      	cmp	r2, #0
    da7c:	da02      	bge.n	da84 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    da7e:	f04f 0210 	mov.w	r2, #16
    da82:	e001      	b.n	da88 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    da84:	f04f 0240 	mov.w	r2, #64	; 0x40
    da88:	da01      	bge.n	da8e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    da8a:	f04f 0196 	mov.w	r1, #150	; 0x96
    da8e:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    da92:	eba0 0301 	sub.w	r3, r0, r1
    da96:	4288      	cmp	r0, r1
    da98:	d910      	bls.n	dabc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    da9a:	fb93 f0f2 	sdiv	r0, r3, r2
    da9e:	b280      	uxth	r0, r0
    daa0:	4770      	bx	lr
    daa2:	2902      	cmp	r1, #2
    daa4:	d002      	beq.n	daac <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    daa6:	2870      	cmp	r0, #112	; 0x70
    daa8:	d80a      	bhi.n	dac0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    daaa:	e007      	b.n	dabc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    daac:	283c      	cmp	r0, #60	; 0x3c
    daae:	d905      	bls.n	dabc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dab0:	383c      	subs	r0, #60	; 0x3c
    dab2:	17c1      	asrs	r1, r0, #31
    dab4:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    dab8:	1080      	asrs	r0, r0, #2
    daba:	e7f0      	b.n	da9e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    dabc:	2000      	movs	r0, #0
    dabe:	e7ee      	b.n	da9e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    dac0:	3870      	subs	r0, #112	; 0x70
    dac2:	17c1      	asrs	r1, r0, #31
    dac4:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    dac8:	10c0      	asrs	r0, r0, #3
    daca:	e7e8      	b.n	da9e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000dacc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    dacc:	6809      	ldr	r1, [r1, #0]
    dace:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    dad2:	4770      	bx	lr

0000dad4 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    dad4:	2801      	cmp	r0, #1
    dad6:	d002      	beq.n	dade <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dad8:	2802      	cmp	r0, #2
    dada:	d000      	beq.n	dade <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dadc:	2000      	movs	r0, #0
    dade:	4770      	bx	lr

0000dae0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    dae0:	b510      	push	{r4, lr}
    dae2:	f640 12c4 	movw	r2, #2500	; 0x9c4
    dae6:	2901      	cmp	r1, #1
    dae8:	d006      	beq.n	daf8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    daea:	2902      	cmp	r1, #2
    daec:	d005      	beq.n	dafa <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    daee:	f240 31c6 	movw	r1, #966	; 0x3c6
    daf2:	2029      	movs	r0, #41	; 0x29
    daf4:	f7f6 f8fe 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daf8:	b108      	cbz	r0, dafe <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    dafa:	4610      	mov	r0, r2
    dafc:	bd10      	pop	{r4, pc}
    dafe:	f240 40e2 	movw	r0, #1250	; 0x4e2
    db02:	bd10      	pop	{r4, pc}

0000db04 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    db04:	b530      	push	{r4, r5, lr}
    db06:	242a      	movs	r4, #42	; 0x2a
    db08:	2523      	movs	r5, #35	; 0x23
    db0a:	2a16      	cmp	r2, #22
    db0c:	d105      	bne.n	db1a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x16>
    db0e:	280c      	cmp	r0, #12
    db10:	d007      	beq.n	db22 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    db12:	280d      	cmp	r0, #13
    db14:	d005      	beq.n	db22 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    db16:	281f      	cmp	r0, #31
    db18:	d005      	beq.n	db26 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    db1a:	b171      	cbz	r1, db3a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    db1c:	2a16      	cmp	r2, #22
    db1e:	d10c      	bne.n	db3a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    db20:	e004      	b.n	db2c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x28>
    db22:	701c      	strb	r4, [r3, #0]
    db24:	e000      	b.n	db28 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x24>
    db26:	701d      	strb	r5, [r3, #0]
    db28:	2001      	movs	r0, #1
    db2a:	bd30      	pop	{r4, r5, pc}
    db2c:	7808      	ldrb	r0, [r1, #0]
    db2e:	2801      	cmp	r0, #1
    db30:	d0f7      	beq.n	db22 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    db32:	2800      	cmp	r0, #0
    db34:	d0f5      	beq.n	db22 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    db36:	2816      	cmp	r0, #22
    db38:	d0f5      	beq.n	db26 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    db3a:	2000      	movs	r0, #0
    db3c:	bd30      	pop	{r4, r5, pc}

0000db3e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    db3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db40:	b2cf      	uxtb	r7, r1
    db42:	4606      	mov	r6, r0
    db44:	f3c1 2407 	ubfx	r4, r1, #8, #8
    db48:	4621      	mov	r1, r4
    db4a:	4638      	mov	r0, r7
    db4c:	f000 f8ca 	bl	dce4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    db50:	b2f5      	uxtb	r5, r6
    db52:	f3c6 2607 	ubfx	r6, r6, #8, #8
    db56:	b920      	cbnz	r0, db62 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    db58:	4631      	mov	r1, r6
    db5a:	4628      	mov	r0, r5
    db5c:	f000 f8c2 	bl	dce4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    db60:	b140      	cbz	r0, db74 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    db62:	4027      	ands	r7, r4
    db64:	4035      	ands	r5, r6
    db66:	403d      	ands	r5, r7
    db68:	4644      	mov	r4, r8
    db6a:	f365 0407 	bfi	r4, r5, #0, #8
    db6e:	f365 240f 	bfi	r4, r5, #8, #8
    db72:	e006      	b.n	db82 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    db74:	4025      	ands	r5, r4
    db76:	4644      	mov	r4, r8
    db78:	f365 0407 	bfi	r4, r5, #0, #8
    db7c:	403e      	ands	r6, r7
    db7e:	f366 240f 	bfi	r4, r6, #8, #8
    db82:	b2e0      	uxtb	r0, r4
    db84:	f7ff fea2 	bl	d8cc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    db88:	f88d 0000 	strb.w	r0, [sp]
    db8c:	f3c4 2007 	ubfx	r0, r4, #8, #8
    db90:	f7ff fe9c 	bl	d8cc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    db94:	f88d 0001 	strb.w	r0, [sp, #1]
    db98:	f8bd 0000 	ldrh.w	r0, [sp]
    db9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000db9e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    db9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dba2:	460c      	mov	r4, r1
    dba4:	4605      	mov	r5, r0
    dba6:	68c6      	ldr	r6, [r0, #12]
    dba8:	f7f4 f814 	bl	1bd4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dbac:	b198      	cbz	r0, dbd6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    dbae:	b1bc      	cbz	r4, dbe0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dbb0:	4630      	mov	r0, r6
    dbb2:	68e9      	ldr	r1, [r5, #12]
    dbb4:	f7f3 fd02 	bl	15bc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    dbb8:	2800      	cmp	r0, #0
    dbba:	dd11      	ble.n	dbe0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dbbc:	4420      	add	r0, r4
    dbbe:	1e40      	subs	r0, r0, #1
    dbc0:	fbb0 f7f4 	udiv	r7, r0, r4
    dbc4:	fb07 f104 	mul.w	r1, r7, r4
    dbc8:	4630      	mov	r0, r6
    dbca:	f7f3 fcc5 	bl	1558 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    dbce:	60e8      	str	r0, [r5, #12]
    dbd0:	4638      	mov	r0, r7
    dbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbd6:	f240 214b 	movw	r1, #587	; 0x24b
    dbda:	2029      	movs	r0, #41	; 0x29
    dbdc:	f7f6 f88a 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbe0:	2000      	movs	r0, #0
    dbe2:	e7f6      	b.n	dbd2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000dbe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dbe4:	b530      	push	{r4, r5, lr}
    dbe6:	4613      	mov	r3, r2
    dbe8:	e006      	b.n	dbf8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    dbea:	18cc      	adds	r4, r1, r3
    dbec:	1ad5      	subs	r5, r2, r3
    dbee:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    dbf2:	1e5b      	subs	r3, r3, #1
    dbf4:	5544      	strb	r4, [r0, r5]
    dbf6:	b2db      	uxtb	r3, r3
    dbf8:	2b00      	cmp	r3, #0
    dbfa:	d1f6      	bne.n	dbea <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dbfc:	bd30      	pop	{r4, r5, pc}

0000dbfe <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    dbfe:	b538      	push	{r3, r4, r5, lr}
    dc00:	4605      	mov	r5, r0
    dc02:	460c      	mov	r4, r1
    dc04:	4668      	mov	r0, sp
    dc06:	f7fd ff53 	bl	bab0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    dc0a:	b310      	cbz	r0, dc52 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    dc0c:	f99d 0000 	ldrsb.w	r0, [sp]
    dc10:	7260      	strb	r0, [r4, #9]
    dc12:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    dc16:	72a1      	strb	r1, [r4, #10]
    dc18:	f994 100b 	ldrsb.w	r1, [r4, #11]
    dc1c:	2200      	movs	r2, #0
    dc1e:	1a41      	subs	r1, r0, r1
    dc20:	d500      	bpl.n	dc24 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    dc22:	4249      	negs	r1, r1
    dc24:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    dc28:	428b      	cmp	r3, r1
    dc2a:	dc10      	bgt.n	dc4e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dc2c:	2bff      	cmp	r3, #255	; 0xff
    dc2e:	d00e      	beq.n	dc4e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dc30:	7b21      	ldrb	r1, [r4, #12]
    dc32:	1c49      	adds	r1, r1, #1
    dc34:	b2c9      	uxtb	r1, r1
    dc36:	7321      	strb	r1, [r4, #12]
    dc38:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    dc3c:	4299      	cmp	r1, r3
    dc3e:	d802      	bhi.n	dc46 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    dc40:	7ae1      	ldrb	r1, [r4, #11]
    dc42:	297f      	cmp	r1, #127	; 0x7f
    dc44:	d103      	bne.n	dc4e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dc46:	72e0      	strb	r0, [r4, #11]
    dc48:	2000      	movs	r0, #0
    dc4a:	7320      	strb	r0, [r4, #12]
    dc4c:	2201      	movs	r2, #1
    dc4e:	4610      	mov	r0, r2
    dc50:	bd38      	pop	{r3, r4, r5, pc}
    dc52:	207f      	movs	r0, #127	; 0x7f
    dc54:	7260      	strb	r0, [r4, #9]
    dc56:	2000      	movs	r0, #0
    dc58:	bd38      	pop	{r3, r4, r5, pc}

0000dc5a <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    dc5a:	2300      	movs	r3, #0
    dc5c:	6283      	str	r3, [r0, #40]	; 0x28
    dc5e:	8602      	strh	r2, [r0, #48]	; 0x30
    dc60:	f240 2371 	movw	r3, #625	; 0x271
    dc64:	435a      	muls	r2, r3
    dc66:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    dc6a:	1e52      	subs	r2, r2, #1
    dc6c:	fbb2 f1f1 	udiv	r1, r2, r1
    dc70:	62c1      	str	r1, [r0, #44]	; 0x2c
    dc72:	4770      	bx	lr

0000dc74 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    dc74:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dc78:	4348      	muls	r0, r1
    dc7a:	4770      	bx	lr

0000dc7c <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    dc7c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dc80:	fbb0 f0f1 	udiv	r0, r0, r1
    dc84:	b280      	uxth	r0, r0
    dc86:	4770      	bx	lr

0000dc88 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    dc88:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dc8c:	fb10 f001 	smulbb	r0, r0, r1
    dc90:	4770      	bx	lr

0000dc92 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    dc92:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dc96:	fbb0 f0f1 	udiv	r0, r0, r1
    dc9a:	b2c0      	uxtb	r0, r0
    dc9c:	4770      	bx	lr

0000dc9e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    dc9e:	b510      	push	{r4, lr}
    dca0:	2300      	movs	r3, #0
    dca2:	461a      	mov	r2, r3
    dca4:	e003      	b.n	dcae <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    dca6:	5c84      	ldrb	r4, [r0, r2]
    dca8:	4323      	orrs	r3, r4
    dcaa:	1c52      	adds	r2, r2, #1
    dcac:	b2d2      	uxtb	r2, r2
    dcae:	428a      	cmp	r2, r1
    dcb0:	d3f9      	bcc.n	dca6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    dcb2:	b10b      	cbz	r3, dcb8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    dcb4:	2000      	movs	r0, #0
    dcb6:	bd10      	pop	{r4, pc}
    dcb8:	2001      	movs	r0, #1
    dcba:	bd10      	pop	{r4, pc}
    dcbc:	b510      	push	{r4, lr}
    dcbe:	4604      	mov	r4, r0
    dcc0:	f7fd f96e 	bl	afa0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    dcc4:	f644 112b 	movw	r1, #18731	; 0x492b
    dcc8:	4008      	ands	r0, r1
    dcca:	2101      	movs	r1, #1
    dccc:	7561      	strb	r1, [r4, #21]
    dcce:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    dcd2:	0a00      	lsrs	r0, r0, #8
    dcd4:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
    dcd8:	20fe      	movs	r0, #254	; 0xfe
    dcda:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    dcde:	207f      	movs	r0, #127	; 0x7f
    dce0:	7260      	strb	r0, [r4, #9]
    dce2:	bd10      	pop	{r4, pc}
    dce4:	2801      	cmp	r0, #1
    dce6:	d002      	beq.n	dcee <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x50>
    dce8:	2802      	cmp	r0, #2
    dcea:	d003      	beq.n	dcf4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x56>
    dcec:	e004      	b.n	dcf8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    dcee:	2901      	cmp	r1, #1
    dcf0:	d004      	beq.n	dcfc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    dcf2:	e001      	b.n	dcf8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    dcf4:	2902      	cmp	r1, #2
    dcf6:	d001      	beq.n	dcfc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    dcf8:	2000      	movs	r0, #0
    dcfa:	4770      	bx	lr
    dcfc:	2001      	movs	r0, #1
    dcfe:	4770      	bx	lr

0000dd00 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    dd00:	b510      	push	{r4, lr}
    dd02:	4604      	mov	r4, r0
    dd04:	f890 0020 	ldrb.w	r0, [r0, #32]
    dd08:	b108      	cbz	r0, dd0e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    dd0a:	2825      	cmp	r0, #37	; 0x25
    dd0c:	d901      	bls.n	dd12 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    dd0e:	2012      	movs	r0, #18
    dd10:	bd10      	pop	{r4, pc}
    dd12:	b12a      	cbz	r2, dd20 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    dd14:	7d60      	ldrb	r0, [r4, #21]
    dd16:	b128      	cbz	r0, dd24 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    dd18:	2801      	cmp	r0, #1
    dd1a:	d009      	beq.n	dd30 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    dd1c:	201f      	movs	r0, #31
    dd1e:	bd10      	pop	{r4, pc}
    dd20:	2000      	movs	r0, #0
    dd22:	bd10      	pop	{r4, pc}
    dd24:	4620      	mov	r0, r4
    dd26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd2a:	4611      	mov	r1, r2
    dd2c:	f7f7 bfca 	b.w	5cc4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    dd30:	88a2      	ldrh	r2, [r4, #4]
    dd32:	6909      	ldr	r1, [r1, #16]
    dd34:	f104 0015 	add.w	r0, r4, #21
    dd38:	f7f7 ff70 	bl	5c1c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    dd3c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    dd40:	e7ee      	b.n	dd20 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000dd42 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    dd42:	b530      	push	{r4, r5, lr}
    dd44:	1c42      	adds	r2, r0, #1
    dd46:	428a      	cmp	r2, r1
    dd48:	d004      	beq.n	dd54 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    dd4a:	680a      	ldr	r2, [r1, #0]
    dd4c:	f8c0 2001 	str.w	r2, [r0, #1]
    dd50:	7909      	ldrb	r1, [r1, #4]
    dd52:	7141      	strb	r1, [r0, #5]
    dd54:	7941      	ldrb	r1, [r0, #5]
    dd56:	f001 011f 	and.w	r1, r1, #31
    dd5a:	7141      	strb	r1, [r0, #5]
    dd5c:	2100      	movs	r1, #0
    dd5e:	72c1      	strb	r1, [r0, #11]
    dd60:	1843      	adds	r3, r0, r1
    dd62:	1c49      	adds	r1, r1, #1
    dd64:	785c      	ldrb	r4, [r3, #1]
    dd66:	b2c9      	uxtb	r1, r1
    dd68:	f004 0201 	and.w	r2, r4, #1
    dd6c:	0864      	lsrs	r4, r4, #1
    dd6e:	f004 0501 	and.w	r5, r4, #1
    dd72:	4415      	add	r5, r2
    dd74:	0862      	lsrs	r2, r4, #1
    dd76:	f002 0401 	and.w	r4, r2, #1
    dd7a:	442c      	add	r4, r5
    dd7c:	0852      	lsrs	r2, r2, #1
    dd7e:	f002 0501 	and.w	r5, r2, #1
    dd82:	442c      	add	r4, r5
    dd84:	0852      	lsrs	r2, r2, #1
    dd86:	f002 0501 	and.w	r5, r2, #1
    dd8a:	442c      	add	r4, r5
    dd8c:	0852      	lsrs	r2, r2, #1
    dd8e:	f002 0501 	and.w	r5, r2, #1
    dd92:	442c      	add	r4, r5
    dd94:	0852      	lsrs	r2, r2, #1
    dd96:	f002 0501 	and.w	r5, r2, #1
    dd9a:	442c      	add	r4, r5
    dd9c:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    dda0:	719a      	strb	r2, [r3, #6]
    dda2:	7ac3      	ldrb	r3, [r0, #11]
    dda4:	2905      	cmp	r1, #5
    dda6:	441a      	add	r2, r3
    dda8:	72c2      	strb	r2, [r0, #11]
    ddaa:	d3d9      	bcc.n	dd60 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    ddac:	bd30      	pop	{r4, r5, pc}

0000ddae <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>:
    ddae:	68c0      	ldr	r0, [r0, #12]
    ddb0:	6008      	str	r0, [r1, #0]
    ddb2:	4770      	bx	lr

0000ddb4 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>:
    ddb4:	6842      	ldr	r2, [r0, #4]
    ddb6:	600a      	str	r2, [r1, #0]
    ddb8:	6880      	ldr	r0, [r0, #8]
    ddba:	6048      	str	r0, [r1, #4]
    ddbc:	4770      	bx	lr

0000ddbe <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    ddbe:	6842      	ldr	r2, [r0, #4]
    ddc0:	600a      	str	r2, [r1, #0]
    ddc2:	6880      	ldr	r0, [r0, #8]
    ddc4:	6048      	str	r0, [r1, #4]
    ddc6:	4770      	bx	lr

0000ddc8 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    ddc8:	7800      	ldrb	r0, [r0, #0]
    ddca:	f000 0003 	and.w	r0, r0, #3
    ddce:	4770      	bx	lr

0000ddd0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    ddd0:	8880      	ldrh	r0, [r0, #4]
    ddd2:	4770      	bx	lr

0000ddd4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    ddd4:	88c0      	ldrh	r0, [r0, #6]
    ddd6:	4770      	bx	lr

0000ddd8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    ddd8:	8900      	ldrh	r0, [r0, #8]
    ddda:	4770      	bx	lr

0000dddc <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    dddc:	8940      	ldrh	r0, [r0, #10]
    ddde:	4770      	bx	lr

0000dde0 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    dde0:	7900      	ldrb	r0, [r0, #4]
    dde2:	4770      	bx	lr

0000dde4 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    dde4:	7900      	ldrb	r0, [r0, #4]
    dde6:	4770      	bx	lr

0000dde8 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    dde8:	8901      	ldrh	r1, [r0, #8]
    ddea:	291b      	cmp	r1, #27
    ddec:	d30c      	bcc.n	de08 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ddee:	8941      	ldrh	r1, [r0, #10]
    ddf0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    ddf4:	4291      	cmp	r1, r2
    ddf6:	d307      	bcc.n	de08 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ddf8:	8881      	ldrh	r1, [r0, #4]
    ddfa:	291b      	cmp	r1, #27
    ddfc:	d304      	bcc.n	de08 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ddfe:	88c0      	ldrh	r0, [r0, #6]
    de00:	4290      	cmp	r0, r2
    de02:	d301      	bcc.n	de08 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    de04:	2001      	movs	r0, #1
    de06:	4770      	bx	lr
    de08:	2000      	movs	r0, #0
    de0a:	4770      	bx	lr

0000de0c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    de0c:	b510      	push	{r4, lr}
    de0e:	29fb      	cmp	r1, #251	; 0xfb
    de10:	d904      	bls.n	de1c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    de12:	f44f 61af 	mov.w	r1, #1400	; 0x578
    de16:	202a      	movs	r0, #42	; 0x2a
    de18:	f7f5 ff6c 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de1c:	7041      	strb	r1, [r0, #1]
    de1e:	bd10      	pop	{r4, pc}

0000de20 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    de20:	7901      	ldrb	r1, [r0, #4]
    de22:	0749      	lsls	r1, r1, #29
    de24:	d004      	beq.n	de30 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    de26:	7940      	ldrb	r0, [r0, #5]
    de28:	0740      	lsls	r0, r0, #29
    de2a:	d001      	beq.n	de30 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    de2c:	2001      	movs	r0, #1
    de2e:	4770      	bx	lr
    de30:	2000      	movs	r0, #0
    de32:	4770      	bx	lr

0000de34 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
    de34:	7901      	ldrb	r1, [r0, #4]
    de36:	0749      	lsls	r1, r1, #29
    de38:	d004      	beq.n	de44 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    de3a:	7940      	ldrb	r0, [r0, #5]
    de3c:	0740      	lsls	r0, r0, #29
    de3e:	d001      	beq.n	de44 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    de40:	2001      	movs	r0, #1
    de42:	4770      	bx	lr
    de44:	2000      	movs	r0, #0
    de46:	4770      	bx	lr

0000de48 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    de48:	7900      	ldrb	r0, [r0, #4]
    de4a:	4770      	bx	lr

0000de4c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    de4c:	7940      	ldrb	r0, [r0, #5]
    de4e:	4770      	bx	lr

0000de50 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    de50:	7101      	strb	r1, [r0, #4]
    de52:	4770      	bx	lr

0000de54 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    de54:	7141      	strb	r1, [r0, #5]
    de56:	4770      	bx	lr

0000de58 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
    de58:	680a      	ldr	r2, [r1, #0]
    de5a:	6042      	str	r2, [r0, #4]
    de5c:	7909      	ldrb	r1, [r1, #4]
    de5e:	7201      	strb	r1, [r0, #8]
    de60:	4770      	bx	lr

0000de62 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
    de62:	72c1      	strb	r1, [r0, #11]
    de64:	0a09      	lsrs	r1, r1, #8
    de66:	7301      	strb	r1, [r0, #12]
    de68:	4770      	bx	lr

0000de6a <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
    de6a:	8809      	ldrh	r1, [r1, #0]
    de6c:	8181      	strh	r1, [r0, #12]
    de6e:	4770      	bx	lr

0000de70 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
    de70:	6809      	ldr	r1, [r1, #0]
    de72:	f8c0 1016 	str.w	r1, [r0, #22]
    de76:	4770      	bx	lr

0000de78 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
    de78:	680a      	ldr	r2, [r1, #0]
    de7a:	6042      	str	r2, [r0, #4]
    de7c:	6849      	ldr	r1, [r1, #4]
    de7e:	6081      	str	r1, [r0, #8]
    de80:	4770      	bx	lr

0000de82 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
    de82:	680a      	ldr	r2, [r1, #0]
    de84:	f840 2f0e 	str.w	r2, [r0, #14]!
    de88:	6849      	ldr	r1, [r1, #4]
    de8a:	6041      	str	r1, [r0, #4]
    de8c:	4770      	bx	lr

0000de8e <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    de8e:	680a      	ldr	r2, [r1, #0]
    de90:	6042      	str	r2, [r0, #4]
    de92:	6849      	ldr	r1, [r1, #4]
    de94:	6081      	str	r1, [r0, #8]
    de96:	4770      	bx	lr

0000de98 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    de98:	7802      	ldrb	r2, [r0, #0]
    de9a:	f001 0103 	and.w	r1, r1, #3
    de9e:	f022 0203 	bic.w	r2, r2, #3
    dea2:	430a      	orrs	r2, r1
    dea4:	7002      	strb	r2, [r0, #0]
    dea6:	4770      	bx	lr

0000dea8 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
    dea8:	7101      	strb	r1, [r0, #4]
    deaa:	4770      	bx	lr

0000deac <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    deac:	7101      	strb	r1, [r0, #4]
    deae:	0a09      	lsrs	r1, r1, #8
    deb0:	7141      	strb	r1, [r0, #5]
    deb2:	4770      	bx	lr

0000deb4 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    deb4:	7181      	strb	r1, [r0, #6]
    deb6:	0a09      	lsrs	r1, r1, #8
    deb8:	71c1      	strb	r1, [r0, #7]
    deba:	4770      	bx	lr

0000debc <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    debc:	7201      	strb	r1, [r0, #8]
    debe:	0a09      	lsrs	r1, r1, #8
    dec0:	7241      	strb	r1, [r0, #9]
    dec2:	4770      	bx	lr

0000dec4 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    dec4:	7281      	strb	r1, [r0, #10]
    dec6:	0a09      	lsrs	r1, r1, #8
    dec8:	72c1      	strb	r1, [r0, #11]
    deca:	4770      	bx	lr

0000decc <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
    decc:	7181      	strb	r1, [r0, #6]
    dece:	0a09      	lsrs	r1, r1, #8
    ded0:	71c1      	strb	r1, [r0, #7]
    ded2:	4770      	bx	lr

0000ded4 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
    ded4:	7141      	strb	r1, [r0, #5]
    ded6:	4770      	bx	lr

0000ded8 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    ded8:	7841      	ldrb	r1, [r0, #1]
    deda:	7800      	ldrb	r0, [r0, #0]
    dedc:	f010 000f 	ands.w	r0, r0, #15
    dee0:	d005      	beq.n	deee <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    dee2:	2801      	cmp	r0, #1
    dee4:	d007      	beq.n	def6 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x1e>
    dee6:	2802      	cmp	r0, #2
    dee8:	d001      	beq.n	deee <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    deea:	2806      	cmp	r0, #6
    deec:	d105      	bne.n	defa <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    deee:	1f89      	subs	r1, r1, #6
    def0:	291f      	cmp	r1, #31
    def2:	d904      	bls.n	defe <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    def4:	e001      	b.n	defa <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    def6:	290c      	cmp	r1, #12
    def8:	d001      	beq.n	defe <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    defa:	2000      	movs	r0, #0
    defc:	4770      	bx	lr
    defe:	2001      	movs	r0, #1
    df00:	4770      	bx	lr

0000df02 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    df02:	7800      	ldrb	r0, [r0, #0]
    df04:	09c0      	lsrs	r0, r0, #7
    df06:	4770      	bx	lr

0000df08 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
    df08:	f850 2f03 	ldr.w	r2, [r0, #3]!
    df0c:	600a      	str	r2, [r1, #0]
    df0e:	8880      	ldrh	r0, [r0, #4]
    df10:	8088      	strh	r0, [r1, #4]
    df12:	4770      	bx	lr

0000df14 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    df14:	7800      	ldrb	r0, [r0, #0]
    df16:	f3c0 1080 	ubfx	r0, r0, #6, #1
    df1a:	4770      	bx	lr

0000df1c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    df1c:	7801      	ldrb	r1, [r0, #0]
    df1e:	f001 010f 	and.w	r1, r1, #15
    df22:	2904      	cmp	r1, #4
    df24:	d105      	bne.n	df32 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    df26:	7840      	ldrb	r0, [r0, #1]
    df28:	1f80      	subs	r0, r0, #6
    df2a:	281f      	cmp	r0, #31
    df2c:	d801      	bhi.n	df32 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    df2e:	2001      	movs	r0, #1
    df30:	4770      	bx	lr
    df32:	2000      	movs	r0, #0
    df34:	4770      	bx	lr

0000df36 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    df36:	b510      	push	{r4, lr}
    df38:	7802      	ldrb	r2, [r0, #0]
    df3a:	f001 030f 	and.w	r3, r1, #15
    df3e:	f022 020f 	bic.w	r2, r2, #15
    df42:	431a      	orrs	r2, r3
    df44:	7002      	strb	r2, [r0, #0]
    df46:	2907      	cmp	r1, #7
    df48:	d20c      	bcs.n	df64 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    df4a:	e8df f001 	tbb	[pc, r1]
    df4e:	0604      	.short	0x0604
    df50:	08040604 	.word	0x08040604
    df54:	0004      	.short	0x0004
    df56:	2106      	movs	r1, #6
    df58:	e002      	b.n	df60 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    df5a:	210c      	movs	r1, #12
    df5c:	e000      	b.n	df60 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    df5e:	2122      	movs	r1, #34	; 0x22
    df60:	7041      	strb	r1, [r0, #1]
    df62:	bd10      	pop	{r4, pc}
    df64:	216e      	movs	r1, #110	; 0x6e
    df66:	202a      	movs	r0, #42	; 0x2a
    df68:	f7f5 fec4 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000df6c <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    df6c:	680a      	ldr	r2, [r1, #0]
    df6e:	f840 2f09 	str.w	r2, [r0, #9]!
    df72:	8889      	ldrh	r1, [r1, #4]
    df74:	8081      	strh	r1, [r0, #4]
    df76:	4770      	bx	lr

0000df78 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    df78:	7802      	ldrb	r2, [r0, #0]
    df7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    df7e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    df82:	7002      	strb	r2, [r0, #0]
    df84:	4770      	bx	lr

0000df86 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    df86:	680a      	ldr	r2, [r1, #0]
    df88:	f840 2f03 	str.w	r2, [r0, #3]!
    df8c:	8889      	ldrh	r1, [r1, #4]
    df8e:	8081      	strh	r1, [r0, #4]
    df90:	4770      	bx	lr

0000df92 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    df92:	7802      	ldrb	r2, [r0, #0]
    df94:	2340      	movs	r3, #64	; 0x40
    df96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    df9a:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    df9e:	430a      	orrs	r2, r1
    dfa0:	7002      	strb	r2, [r0, #0]
    dfa2:	4770      	bx	lr

0000dfa4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    dfa4:	2101      	movs	r1, #1
    dfa6:	f000 b847 	b.w	e038 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    dfaa:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    dfae:	460e      	mov	r6, r1
    dfb0:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    dfb4:	4617      	mov	r7, r2
    dfb6:	39ff      	subs	r1, #255	; 0xff
    dfb8:	d014      	beq.n	dfe4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x40>
    dfba:	8030      	strh	r0, [r6, #0]
    dfbc:	2100      	movs	r1, #0
    dfbe:	7171      	strb	r1, [r6, #5]
    dfc0:	f7f6 fa96 	bl	44f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    dfc4:	4604      	mov	r4, r0
    dfc6:	f7ff f964 	bl	d292 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    dfca:	0005      	movs	r5, r0
    dfcc:	d00a      	beq.n	dfe4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x40>
    dfce:	4620      	mov	r0, r4
    dfd0:	4629      	mov	r1, r5
    dfd2:	aa01      	add	r2, sp, #4
    dfd4:	f7ff f98e 	bl	d2f4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    dfd8:	8070      	strh	r0, [r6, #2]
    dfda:	b130      	cbz	r0, dfea <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x46>
    dfdc:	28fb      	cmp	r0, #251	; 0xfb
    dfde:	d906      	bls.n	dfee <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x4a>
    dfe0:	21c9      	movs	r1, #201	; 0xc9
    dfe2:	e026      	b.n	e032 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    dfe4:	2000      	movs	r0, #0
    dfe6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    dfea:	21c8      	movs	r1, #200	; 0xc8
    dfec:	e021      	b.n	e032 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    dfee:	9801      	ldr	r0, [sp, #4]
    dff0:	f7ff feea 	bl	ddc8 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    dff4:	2801      	cmp	r0, #1
    dff6:	d003      	beq.n	e000 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x5c>
    dff8:	2802      	cmp	r0, #2
    dffa:	d001      	beq.n	e000 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x5c>
    dffc:	21d8      	movs	r1, #216	; 0xd8
    dffe:	e018      	b.n	e032 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    e000:	7130      	strb	r0, [r6, #4]
    e002:	4629      	mov	r1, r5
    e004:	8873      	ldrh	r3, [r6, #2]
    e006:	2503      	movs	r5, #3
    e008:	4620      	mov	r0, r4
    e00a:	463a      	mov	r2, r7
    e00c:	9500      	str	r5, [sp, #0]
    e00e:	f7ff f817 	bl	d040 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    e012:	4620      	mov	r0, r4
    e014:	60b7      	str	r7, [r6, #8]
    e016:	f7ff f8eb 	bl	d1f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e01a:	b138      	cbz	r0, e02c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x88>
    e01c:	2100      	movs	r1, #0
    e01e:	4620      	mov	r0, r4
    e020:	460a      	mov	r2, r1
    e022:	f7ff fa45 	bl	d4b0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e026:	b118      	cbz	r0, e030 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8c>
    e028:	2001      	movs	r0, #1
    e02a:	e7dc      	b.n	dfe6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x42>
    e02c:	21e8      	movs	r1, #232	; 0xe8
    e02e:	e000      	b.n	e032 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    e030:	21ed      	movs	r1, #237	; 0xed
    e032:	202b      	movs	r0, #43	; 0x2b
    e034:	f7f5 fe5e 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e038:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e03c:	4604      	mov	r4, r0
    e03e:	460e      	mov	r6, r1
    e040:	2000      	movs	r0, #0
    e042:	f7f6 f83b 	bl	40bc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e046:	4605      	mov	r5, r0
    e048:	2000      	movs	r0, #0
    e04a:	b906      	cbnz	r6, e04e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xaa>
    e04c:	2001      	movs	r0, #1
    e04e:	2600      	movs	r6, #0
    e050:	46b0      	mov	r8, r6
    e052:	182f      	adds	r7, r5, r0
    e054:	e017      	b.n	e086 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xe2>
    e056:	8820      	ldrh	r0, [r4, #0]
    e058:	1c40      	adds	r0, r0, #1
    e05a:	b280      	uxth	r0, r0
    e05c:	8020      	strh	r0, [r4, #0]
    e05e:	42b8      	cmp	r0, r7
    e060:	d302      	bcc.n	e068 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xc4>
    e062:	4640      	mov	r0, r8
    e064:	f8a4 8000 	strh.w	r8, [r4]
    e068:	b280      	uxth	r0, r0
    e06a:	42a8      	cmp	r0, r5
    e06c:	d304      	bcc.n	e078 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd4>
    e06e:	42b8      	cmp	r0, r7
    e070:	d202      	bcs.n	e078 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd4>
    e072:	2000      	movs	r0, #0
    e074:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e078:	4669      	mov	r1, sp
    e07a:	f7ff fc5e 	bl	d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e07e:	2800      	cmp	r0, #0
    e080:	d0f8      	beq.n	e074 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd0>
    e082:	1c76      	adds	r6, r6, #1
    e084:	b2f6      	uxtb	r6, r6
    e086:	42b7      	cmp	r7, r6
    e088:	d8e5      	bhi.n	e056 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xb2>
    e08a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e08e:	8020      	strh	r0, [r4, #0]
    e090:	2012      	movs	r0, #18
    e092:	e7ef      	b.n	e074 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd0>

0000e094 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e094:	b570      	push	{r4, r5, r6, lr}
    e096:	8050      	strh	r0, [r2, #2]
    e098:	890c      	ldrh	r4, [r1, #8]
    e09a:	8094      	strh	r4, [r2, #4]
    e09c:	898b      	ldrh	r3, [r1, #12]
    e09e:	80d3      	strh	r3, [r2, #6]
    e0a0:	8948      	ldrh	r0, [r1, #10]
    e0a2:	8110      	strh	r0, [r2, #8]
    e0a4:	89cd      	ldrh	r5, [r1, #14]
    e0a6:	8155      	strh	r5, [r2, #10]
    e0a8:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    e0aa:	42ae      	cmp	r6, r5
    e0ac:	d108      	bne.n	e0c0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e0ae:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    e0b0:	4285      	cmp	r5, r0
    e0b2:	d105      	bne.n	e0c0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e0b4:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    e0b6:	429d      	cmp	r5, r3
    e0b8:	d102      	bne.n	e0c0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e0ba:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    e0bc:	42a3      	cmp	r3, r4
    e0be:	d001      	beq.n	e0c4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    e0c0:	2301      	movs	r3, #1
    e0c2:	e000      	b.n	e0c6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e0c4:	2300      	movs	r3, #0
    e0c6:	7313      	strb	r3, [r2, #12]
    e0c8:	8548      	strh	r0, [r1, #42]	; 0x2a
    e0ca:	8950      	ldrh	r0, [r2, #10]
    e0cc:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e0ce:	8890      	ldrh	r0, [r2, #4]
    e0d0:	8588      	strh	r0, [r1, #44]	; 0x2c
    e0d2:	88d0      	ldrh	r0, [r2, #6]
    e0d4:	8608      	strh	r0, [r1, #48]	; 0x30
    e0d6:	2001      	movs	r0, #1
    e0d8:	7010      	strb	r0, [r2, #0]
    e0da:	bd70      	pop	{r4, r5, r6, pc}

0000e0dc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e0dc:	b510      	push	{r4, lr}
    e0de:	888c      	ldrh	r4, [r1, #4]
    e0e0:	890a      	ldrh	r2, [r1, #8]
    e0e2:	884b      	ldrh	r3, [r1, #2]
    e0e4:	88c9      	ldrh	r1, [r1, #6]
    e0e6:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e0ea:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e0ee:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e0f2:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e0f6:	bd10      	pop	{r4, pc}

0000e0f8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e0f8:	b570      	push	{r4, r5, r6, lr}
    e0fa:	4615      	mov	r5, r2
    e0fc:	460c      	mov	r4, r1
    e0fe:	f000 f8c7 	bl	e290 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e102:	3096      	adds	r0, #150	; 0x96
    e104:	4428      	add	r0, r5
    e106:	42a0      	cmp	r0, r4
    e108:	d801      	bhi.n	e10e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e10a:	1a20      	subs	r0, r4, r0
    e10c:	bd70      	pop	{r4, r5, r6, pc}
    e10e:	2000      	movs	r0, #0
    e110:	bd70      	pop	{r4, r5, r6, pc}

0000e112 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e112:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e116:	4604      	mov	r4, r0
    e118:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e11a:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e11c:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e120:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e124:	4285      	cmp	r5, r0
    e126:	d300      	bcc.n	e12a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e128:	4605      	mov	r5, r0
    e12a:	4620      	mov	r0, r4
    e12c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e130:	f000 f89e 	bl	e270 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e134:	4601      	mov	r1, r0
    e136:	86e5      	strh	r5, [r4, #54]	; 0x36
    e138:	8761      	strh	r1, [r4, #58]	; 0x3a
    e13a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e13c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e140:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e142:	4680      	mov	r8, r0
    e144:	42aa      	cmp	r2, r5
    e146:	d200      	bcs.n	e14a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e148:	462a      	mov	r2, r5
    e14a:	428b      	cmp	r3, r1
    e14c:	d200      	bcs.n	e150 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e14e:	460b      	mov	r3, r1
    e150:	8202      	strh	r2, [r0, #16]
    e152:	f8a8 3012 	strh.w	r3, [r8, #18]
    e156:	42bd      	cmp	r5, r7
    e158:	d101      	bne.n	e15e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e15a:	42b1      	cmp	r1, r6
    e15c:	d001      	beq.n	e162 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e15e:	2001      	movs	r0, #1
    e160:	e000      	b.n	e164 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e162:	2000      	movs	r0, #0
    e164:	4681      	mov	r9, r0
    e166:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e16a:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e16e:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e170:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e172:	4285      	cmp	r5, r0
    e174:	d300      	bcc.n	e178 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e176:	4605      	mov	r5, r0
    e178:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e17c:	4620      	mov	r0, r4
    e17e:	f000 f87f 	bl	e280 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e182:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e186:	2902      	cmp	r1, #2
    e188:	d108      	bne.n	e19c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e18a:	42af      	cmp	r7, r5
    e18c:	d200      	bcs.n	e190 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e18e:	463d      	mov	r5, r7
    e190:	4286      	cmp	r6, r0
    e192:	d200      	bcs.n	e196 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e194:	4630      	mov	r0, r6
    e196:	2100      	movs	r1, #0
    e198:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e19c:	f8a8 5008 	strh.w	r5, [r8, #8]
    e1a0:	f8a8 000c 	strh.w	r0, [r8, #12]
    e1a4:	42bd      	cmp	r5, r7
    e1a6:	d101      	bne.n	e1ac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e1a8:	42b0      	cmp	r0, r6
    e1aa:	d001      	beq.n	e1b0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e1ac:	2001      	movs	r0, #1
    e1ae:	e000      	b.n	e1b2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e1b0:	2000      	movs	r0, #0
    e1b2:	ea40 0009 	orr.w	r0, r0, r9
    e1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e1ba <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e1ba:	6840      	ldr	r0, [r0, #4]
    e1bc:	4770      	bx	lr

0000e1be <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1c2:	4616      	mov	r6, r2
    e1c4:	460f      	mov	r7, r1
    e1c6:	4604      	mov	r4, r0
    e1c8:	f000 f862 	bl	e290 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e1cc:	4605      	mov	r5, r0
    e1ce:	463a      	mov	r2, r7
    e1d0:	68e1      	ldr	r1, [r4, #12]
    e1d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e1d4:	f000 f847 	bl	e266 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e1d8:	19a9      	adds	r1, r5, r6
    e1da:	4281      	cmp	r1, r0
    e1dc:	d300      	bcc.n	e1e0 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e1de:	4608      	mov	r0, r1
    e1e0:	6320      	str	r0, [r4, #48]	; 0x30
    e1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e1e6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e1e6:	221b      	movs	r2, #27
    e1e8:	8402      	strh	r2, [r0, #32]
    e1ea:	8382      	strh	r2, [r0, #28]
    e1ec:	82c2      	strh	r2, [r0, #22]
    e1ee:	8282      	strh	r2, [r0, #20]
    e1f0:	8142      	strh	r2, [r0, #10]
    e1f2:	8202      	strh	r2, [r0, #16]
    e1f4:	8102      	strh	r2, [r0, #8]
    e1f6:	8542      	strh	r2, [r0, #42]	; 0x2a
    e1f8:	8582      	strh	r2, [r0, #44]	; 0x2c
    e1fa:	8482      	strh	r2, [r0, #36]	; 0x24
    e1fc:	2900      	cmp	r1, #0
    e1fe:	d10a      	bne.n	e216 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e200:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e204:	8441      	strh	r1, [r0, #34]	; 0x22
    e206:	83c1      	strh	r1, [r0, #30]
    e208:	8341      	strh	r1, [r0, #26]
    e20a:	8301      	strh	r1, [r0, #24]
    e20c:	81c1      	strh	r1, [r0, #14]
    e20e:	8241      	strh	r1, [r0, #18]
    e210:	8181      	strh	r1, [r0, #12]
    e212:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e214:	8601      	strh	r1, [r0, #48]	; 0x30
    e216:	4770      	bx	lr

0000e218 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e218:	6800      	ldr	r0, [r0, #0]
    e21a:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e21e:	4290      	cmp	r0, r2
    e220:	d903      	bls.n	e22a <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e222:	1a40      	subs	r0, r0, r1
    e224:	389c      	subs	r0, #156	; 0x9c
    e226:	0840      	lsrs	r0, r0, #1
    e228:	4770      	bx	lr
    e22a:	2000      	movs	r0, #0
    e22c:	4770      	bx	lr

0000e22e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e22e:	b510      	push	{r4, lr}
    e230:	9c02      	ldr	r4, [sp, #8]
    e232:	8281      	strh	r1, [r0, #20]
    e234:	82c2      	strh	r2, [r0, #22]
    e236:	8303      	strh	r3, [r0, #24]
    e238:	8344      	strh	r4, [r0, #26]
    e23a:	bd10      	pop	{r4, pc}

0000e23c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e23c:	8050      	strh	r0, [r2, #2]
    e23e:	8a88      	ldrh	r0, [r1, #20]
    e240:	8090      	strh	r0, [r2, #4]
    e242:	8ac8      	ldrh	r0, [r1, #22]
    e244:	80d0      	strh	r0, [r2, #6]
    e246:	8b08      	ldrh	r0, [r1, #24]
    e248:	8110      	strh	r0, [r2, #8]
    e24a:	8b48      	ldrh	r0, [r1, #26]
    e24c:	8150      	strh	r0, [r2, #10]
    e24e:	2001      	movs	r0, #1
    e250:	7010      	strb	r0, [r2, #0]
    e252:	4770      	bx	lr
    e254:	2902      	cmp	r1, #2
    e256:	d003      	beq.n	e260 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    e258:	00c0      	lsls	r0, r0, #3
    e25a:	3070      	adds	r0, #112	; 0x70
    e25c:	b280      	uxth	r0, r0
    e25e:	4770      	bx	lr
    e260:	0080      	lsls	r0, r0, #2
    e262:	303c      	adds	r0, #60	; 0x3c
    e264:	e7fa      	b.n	e25c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    e266:	4288      	cmp	r0, r1
    e268:	d300      	bcc.n	e26c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    e26a:	4608      	mov	r0, r1
    e26c:	1a80      	subs	r0, r0, r2
    e26e:	4770      	bx	lr
    e270:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e274:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e278:	4281      	cmp	r1, r0
    e27a:	d200      	bcs.n	e27e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    e27c:	4608      	mov	r0, r1
    e27e:	4770      	bx	lr
    e280:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e284:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e288:	4281      	cmp	r1, r0
    e28a:	d200      	bcs.n	e28e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    e28c:	4608      	mov	r0, r1
    e28e:	4770      	bx	lr
    e290:	2196      	movs	r1, #150	; 0x96
    e292:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e296:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e29a:	f000 b800 	b.w	e29e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    e29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2a2:	460d      	mov	r5, r1
    e2a4:	4606      	mov	r6, r0
    e2a6:	4698      	mov	r8, r3
    e2a8:	4617      	mov	r7, r2
    e2aa:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e2ac:	4611      	mov	r1, r2
    e2ae:	f7ff ffd1 	bl	e254 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e2b2:	4604      	mov	r4, r0
    e2b4:	4639      	mov	r1, r7
    e2b6:	4630      	mov	r0, r6
    e2b8:	f7ff ffe2 	bl	e280 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e2bc:	42a0      	cmp	r0, r4
    e2be:	d200      	bcs.n	e2c2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    e2c0:	4604      	mov	r4, r0
    e2c2:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e2c4:	4641      	mov	r1, r8
    e2c6:	f7ff ffc5 	bl	e254 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e2ca:	4607      	mov	r7, r0
    e2cc:	4641      	mov	r1, r8
    e2ce:	4630      	mov	r0, r6
    e2d0:	f7ff ffce 	bl	e270 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e2d4:	42b8      	cmp	r0, r7
    e2d6:	d300      	bcc.n	e2da <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    e2d8:	4638      	mov	r0, r7
    e2da:	4420      	add	r0, r4
    e2dc:	4428      	add	r0, r5
    e2de:	1d80      	adds	r0, r0, #6
    e2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e2e4:	2801      	cmp	r0, #1
    e2e6:	d102      	bne.n	e2ee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    e2e8:	7948      	ldrb	r0, [r1, #5]
    e2ea:	0980      	lsrs	r0, r0, #6
    e2ec:	d001      	beq.n	e2f2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    e2ee:	2000      	movs	r0, #0
    e2f0:	4770      	bx	lr
    e2f2:	2001      	movs	r0, #1
    e2f4:	4770      	bx	lr
    e2f6:	2801      	cmp	r0, #1
    e2f8:	d106      	bne.n	e308 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    e2fa:	7948      	ldrb	r0, [r1, #5]
    e2fc:	2101      	movs	r1, #1
    e2fe:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e302:	d101      	bne.n	e308 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    e304:	2001      	movs	r0, #1
    e306:	4770      	bx	lr
    e308:	2000      	movs	r0, #0
    e30a:	4770      	bx	lr
    e30c:	b118      	cbz	r0, e316 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xda>
    e30e:	2802      	cmp	r0, #2
    e310:	d001      	beq.n	e316 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xda>
    e312:	2001      	movs	r0, #1
    e314:	4770      	bx	lr
    e316:	2000      	movs	r0, #0
    e318:	4770      	bx	lr
    e31a:	2802      	cmp	r0, #2
    e31c:	d003      	beq.n	e326 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xea>
    e31e:	2803      	cmp	r0, #3
    e320:	d001      	beq.n	e326 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xea>
    e322:	2000      	movs	r0, #0
    e324:	4770      	bx	lr
    e326:	2001      	movs	r0, #1
    e328:	4770      	bx	lr

0000e32a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    e32a:	f7f9 b86b 	b.w	7404 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x404>
    e32e:	b510      	push	{r4, lr}
    e330:	f7f8 feb6 	bl	70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    e334:	f7f8 fa76 	bl	6824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e338:	f7fd f8b4 	bl	b4a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e33c:	2005      	movs	r0, #5
    e33e:	bd10      	pop	{r4, pc}
    e340:	b510      	push	{r4, lr}
    e342:	f7f8 fead 	bl	70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    e346:	f7fd f8ad 	bl	b4a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e34a:	2005      	movs	r0, #5
    e34c:	bd10      	pop	{r4, pc}
    e34e:	b530      	push	{r4, r5, lr}
    e350:	b089      	sub	sp, #36	; 0x24
    e352:	4605      	mov	r5, r0
    e354:	f7f8 fea4 	bl	70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    e358:	7828      	ldrb	r0, [r5, #0]
    e35a:	4669      	mov	r1, sp
    e35c:	f000 040f 	and.w	r4, r0, #15
    e360:	4622      	mov	r2, r4
    e362:	4628      	mov	r0, r5
    e364:	f7f9 fa0c 	bl	7780 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e368:	2200      	movs	r2, #0
    e36a:	4621      	mov	r1, r4
    e36c:	4668      	mov	r0, sp
    e36e:	f7f8 fad9 	bl	6924 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13c>
    e372:	4602      	mov	r2, r0
    e374:	4621      	mov	r1, r4
    e376:	4668      	mov	r0, sp
    e378:	f7f8 fe10 	bl	6f9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7b4>
    e37c:	4604      	mov	r4, r0
    e37e:	f7f8 fa51 	bl	6824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e382:	b009      	add	sp, #36	; 0x24
    e384:	4620      	mov	r0, r4
    e386:	bd30      	pop	{r4, r5, pc}
    e388:	f240 21c5 	movw	r1, #709	; 0x2c5
    e38c:	2032      	movs	r0, #50	; 0x32
    e38e:	f7f5 fcb1 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e392:	b510      	push	{r4, lr}
    e394:	f7f8 fe84 	bl	70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    e398:	f7fd f884 	bl	b4a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e3a0:	f7f9 b848 	b.w	7434 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x434>
    e3a4:	f7f9 b82e 	b.w	7404 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x404>
    e3a8:	f7ff b8b6 	b.w	d518 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>

0000e3ac <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>:
    e3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3ae:	b08b      	sub	sp, #44	; 0x2c
    e3b0:	4607      	mov	r7, r0
    e3b2:	f7f6 f8d1 	bl	4558 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e3b6:	4604      	mov	r4, r0
    e3b8:	f7fe ff6b 	bl	d292 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e3bc:	0005      	movs	r5, r0
    e3be:	d00c      	beq.n	e3da <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x2e>
    e3c0:	4620      	mov	r0, r4
    e3c2:	4629      	mov	r1, r5
    e3c4:	466a      	mov	r2, sp
    e3c6:	f7fe ff95 	bl	d2f4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e3ca:	4606      	mov	r6, r0
    e3cc:	f7f6 f8be 	bl	454c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e3d0:	42b0      	cmp	r0, r6
    e3d2:	d005      	beq.n	e3e0 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x34>
    e3d4:	f44f 7197 	mov.w	r1, #302	; 0x12e
    e3d8:	e033      	b.n	e442 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x96>
    e3da:	2000      	movs	r0, #0
    e3dc:	b00b      	add	sp, #44	; 0x2c
    e3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3e0:	a901      	add	r1, sp, #4
    e3e2:	9800      	ldr	r0, [sp, #0]
    e3e4:	f000 f8b4 	bl	e550 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    e3e8:	1d3e      	adds	r6, r7, #4
    e3ea:	4628      	mov	r0, r5
    e3ec:	f7fe fee5 	bl	d1ba <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e3f0:	4605      	mov	r5, r0
    e3f2:	4601      	mov	r1, r0
    e3f4:	221c      	movs	r2, #28
    e3f6:	4630      	mov	r0, r6
    e3f8:	f7fe f884 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e3fc:	7aa8      	ldrb	r0, [r5, #10]
    e3fe:	f04f 0500 	mov.w	r5, #0
    e402:	06c1      	lsls	r1, r0, #27
    e404:	d50d      	bpl.n	e422 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    e406:	0740      	lsls	r0, r0, #29
    e408:	d40a      	bmi.n	e420 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x74>
    e40a:	f89d 2014 	ldrb.w	r2, [sp, #20]
    e40e:	f106 001c 	add.w	r0, r6, #28
    e412:	9904      	ldr	r1, [sp, #16]
    e414:	f7fe f876 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e418:	f89d 0014 	ldrb.w	r0, [sp, #20]
    e41c:	7230      	strb	r0, [r6, #8]
    e41e:	e000      	b.n	e422 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    e420:	7235      	strb	r5, [r6, #8]
    e422:	707d      	strb	r5, [r7, #1]
    e424:	2005      	movs	r0, #5
    e426:	7038      	strb	r0, [r7, #0]
    e428:	4620      	mov	r0, r4
    e42a:	f7fe fee1 	bl	d1f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e42e:	b130      	cbz	r0, e43e <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x92>
    e430:	2100      	movs	r1, #0
    e432:	4620      	mov	r0, r4
    e434:	460a      	mov	r2, r1
    e436:	f7ff f83b 	bl	d4b0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e43a:	2001      	movs	r0, #1
    e43c:	e7ce      	b.n	e3dc <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x30>
    e43e:	f240 1171 	movw	r1, #369	; 0x171
    e442:	2033      	movs	r0, #51	; 0x33
    e444:	f7f5 fc56 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e448 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    e448:	b510      	push	{r4, lr}
    e44a:	f7f6 f885 	bl	4558 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e44e:	f000 f874 	bl	e53a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    e452:	4604      	mov	r4, r0
    e454:	221c      	movs	r2, #28
    e456:	2100      	movs	r1, #0
    e458:	f7fe f8ce 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e45c:	207f      	movs	r0, #127	; 0x7f
    e45e:	76a0      	strb	r0, [r4, #26]
    e460:	21ff      	movs	r1, #255	; 0xff
    e462:	73a1      	strb	r1, [r4, #14]
    e464:	7061      	strb	r1, [r4, #1]
    e466:	74e1      	strb	r1, [r4, #19]
    e468:	7aa0      	ldrb	r0, [r4, #10]
    e46a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    e46e:	3020      	adds	r0, #32
    e470:	72a0      	strb	r0, [r4, #10]
    e472:	bd10      	pop	{r4, pc}

0000e474 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>:
    e474:	f7ff bfe8 	b.w	e448 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>

0000e478 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    e478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e47c:	461e      	mov	r6, r3
    e47e:	4617      	mov	r7, r2
    e480:	4689      	mov	r9, r1
    e482:	4682      	mov	sl, r0
    e484:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e488:	f7f6 f866 	bl	4558 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e48c:	4604      	mov	r4, r0
    e48e:	f7fe fe96 	bl	d1be <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e492:	2801      	cmp	r0, #1
    e494:	d034      	beq.n	e500 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    e496:	4620      	mov	r0, r4
    e498:	f000 f84f 	bl	e53a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    e49c:	4604      	mov	r4, r0
    e49e:	221c      	movs	r2, #28
    e4a0:	2100      	movs	r1, #0
    e4a2:	f7fe f8a9 	bl	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e4a6:	2501      	movs	r5, #1
    e4a8:	7025      	strb	r5, [r4, #0]
    e4aa:	1c63      	adds	r3, r4, #1
    e4ac:	1ca2      	adds	r2, r4, #2
    e4ae:	4649      	mov	r1, r9
    e4b0:	4650      	mov	r0, sl
    e4b2:	f000 f827 	bl	e504 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    e4b6:	f884 8009 	strb.w	r8, [r4, #9]
    e4ba:	7aa0      	ldrb	r0, [r4, #10]
    e4bc:	21ff      	movs	r1, #255	; 0xff
    e4be:	f367 0000 	bfi	r0, r7, #0, #1
    e4c2:	f040 001a 	orr.w	r0, r0, #26
    e4c6:	72a0      	strb	r0, [r4, #10]
    e4c8:	7325      	strb	r5, [r4, #12]
    e4ca:	2000      	movs	r0, #0
    e4cc:	7360      	strb	r0, [r4, #13]
    e4ce:	73a1      	strb	r1, [r4, #14]
    e4d0:	74e1      	strb	r1, [r4, #19]
    e4d2:	207f      	movs	r0, #127	; 0x7f
    e4d4:	76a0      	strb	r0, [r4, #26]
    e4d6:	76e6      	strb	r6, [r4, #27]
    e4d8:	f7f6 f838 	bl	454c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e4dc:	4604      	mov	r4, r0
    e4de:	f7f6 f83b 	bl	4558 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e4e2:	2201      	movs	r2, #1
    e4e4:	4621      	mov	r1, r4
    e4e6:	f000 f831 	bl	e54c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    e4ea:	b120      	cbz	r0, e4f6 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x7e>
    e4ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e4f0:	2005      	movs	r0, #5
    e4f2:	f7f9 bb2d 	b.w	7b50 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    e4f6:	f240 21c7 	movw	r1, #711	; 0x2c7
    e4fa:	2033      	movs	r0, #51	; 0x33
    e4fc:	f7f5 fbfa 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e504:	b510      	push	{r4, lr}
    e506:	461c      	mov	r4, r3
    e508:	460b      	mov	r3, r1
    e50a:	29ff      	cmp	r1, #255	; 0xff
    e50c:	d00d      	beq.n	e52a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xb2>
    e50e:	4621      	mov	r1, r4
    e510:	4618      	mov	r0, r3
    e512:	f7f7 f8bb 	bl	568c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    e516:	b120      	cbz	r0, e522 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xaa>
    e518:	7820      	ldrb	r0, [r4, #0]
    e51a:	f040 0002 	orr.w	r0, r0, #2
    e51e:	7020      	strb	r0, [r4, #0]
    e520:	bd10      	pop	{r4, pc}
    e522:	2150      	movs	r1, #80	; 0x50
    e524:	2033      	movs	r0, #51	; 0x33
    e526:	f7f5 fbe5 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e52a:	7c41      	ldrb	r1, [r0, #17]
    e52c:	7021      	strb	r1, [r4, #0]
    e52e:	6840      	ldr	r0, [r0, #4]
    e530:	6801      	ldr	r1, [r0, #0]
    e532:	6011      	str	r1, [r2, #0]
    e534:	8880      	ldrh	r0, [r0, #4]
    e536:	8090      	strh	r0, [r2, #4]
    e538:	bd10      	pop	{r4, pc}
    e53a:	b51c      	push	{r2, r3, r4, lr}
    e53c:	4669      	mov	r1, sp
    e53e:	aa01      	add	r2, sp, #4
    e540:	f7fe feca 	bl	d2d8 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    e544:	9800      	ldr	r0, [sp, #0]
    e546:	f7fe fe38 	bl	d1ba <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e54a:	bd1c      	pop	{r2, r3, r4, pc}
    e54c:	f7fe bddd 	b.w	d10a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000e550 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    e550:	7802      	ldrb	r2, [r0, #0]
    e552:	f002 020f 	and.w	r2, r2, #15
    e556:	f7f9 b913 	b.w	7780 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e55a:	2800      	cmp	r0, #0
    e55c:	db04      	blt.n	e568 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x18>
    e55e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e562:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    e566:	e005      	b.n	e574 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x24>
    e568:	f000 000f 	and.w	r0, r0, #15
    e56c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e570:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
    e574:	0940      	lsrs	r0, r0, #5
    e576:	4770      	bx	lr

0000e578 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI>:
    e578:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    e57c:	4770      	bx	lr
    e57e:	6940      	ldr	r0, [r0, #20]
    e580:	2800      	cmp	r0, #0
    e582:	d000      	beq.n	e586 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xe>
    e584:	2001      	movs	r0, #1
    e586:	4770      	bx	lr
    e588:	b510      	push	{r4, lr}
    e58a:	2808      	cmp	r0, #8
    e58c:	d00a      	beq.n	e5a4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x2c>
    e58e:	2804      	cmp	r0, #4
    e590:	d00a      	beq.n	e5a8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x30>
    e592:	2802      	cmp	r0, #2
    e594:	d00a      	beq.n	e5ac <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x34>
    e596:	2108      	movs	r1, #8
    e598:	2801      	cmp	r0, #1
    e59a:	d009      	beq.n	e5b0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x38>
    e59c:	21d9      	movs	r1, #217	; 0xd9
    e59e:	2005      	movs	r0, #5
    e5a0:	f7f5 fba8 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5a4:	2140      	movs	r1, #64	; 0x40
    e5a6:	e7f7      	b.n	e598 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    e5a8:	2110      	movs	r1, #16
    e5aa:	e7f5      	b.n	e598 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    e5ac:	2104      	movs	r1, #4
    e5ae:	e7f3      	b.n	e598 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    e5b0:	222a      	movs	r2, #42	; 0x2a
    e5b2:	2028      	movs	r0, #40	; 0x28
    e5b4:	fb11 0002 	smlabb	r0, r1, r2, r0
    e5b8:	b280      	uxth	r0, r0
    e5ba:	bd10      	pop	{r4, pc}
    e5bc:	2000      	movs	r0, #0
    e5be:	4770      	bx	lr
    e5c0:	b570      	push	{r4, r5, r6, lr}
    e5c2:	4604      	mov	r4, r0
    e5c4:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    e5c8:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    e5cc:	f000 f80c 	bl	e5e8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x70>
    e5d0:	4605      	mov	r5, r0
    e5d2:	f000 f857 	bl	e684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    e5d6:	4601      	mov	r1, r0
    e5d8:	462a      	mov	r2, r5
    e5da:	4620      	mov	r0, r4
    e5dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e5e0:	f7ff bded 	b.w	e1be <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e5e4:	f7f3 b928 	b.w	1838 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e5e8:	b510      	push	{r4, lr}
    e5ea:	4604      	mov	r4, r0
    e5ec:	4608      	mov	r0, r1
    e5ee:	f001 f8f1 	bl	f7d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e5f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e5f6:	2c02      	cmp	r4, #2
    e5f8:	d00a      	beq.n	e610 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x98>
    e5fa:	f640 0234 	movw	r2, #2100	; 0x834
    e5fe:	4410      	add	r0, r2
    e600:	f24a 5295 	movw	r2, #42389	; 0xa595
    e604:	4410      	add	r0, r2
    e606:	fbb0 f0f1 	udiv	r0, r0, r1
    e60a:	f500 709b 	add.w	r0, r0, #310	; 0x136
    e60e:	bd10      	pop	{r4, pc}
    e610:	460a      	mov	r2, r1
    e612:	e7f4      	b.n	e5fe <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x86>
    e614:	b510      	push	{r4, lr}
    e616:	4604      	mov	r4, r0
    e618:	2000      	movs	r0, #0
    e61a:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    e61e:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    e622:	f7f3 fd55 	bl	20d0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e626:	b140      	cbz	r0, e63a <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xc2>
    e628:	2020      	movs	r0, #32
    e62a:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    e62e:	f504 7084 	add.w	r0, r4, #264	; 0x108
    e632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e636:	f7fb bf33 	b.w	a4a0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    e63a:	f240 5139 	movw	r1, #1337	; 0x539
    e63e:	2035      	movs	r0, #53	; 0x35
    e640:	f7f5 fb58 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e646:	4613      	mov	r3, r2
    e648:	460a      	mov	r2, r1
    e64a:	4604      	mov	r4, r0
    e64c:	4601      	mov	r1, r0
    e64e:	4668      	mov	r0, sp
    e650:	f7f9 fd40 	bl	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
    e654:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    e658:	4669      	mov	r1, sp
    e65a:	f7ff ffc3 	bl	e5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    e65e:	2800      	cmp	r0, #0
    e660:	d104      	bne.n	e66c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf4>
    e662:	f640 2139 	movw	r1, #2617	; 0xa39
    e666:	2035      	movs	r0, #53	; 0x35
    e668:	f7f5 fb44 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e66c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    e66e:	b510      	push	{r4, lr}
    e670:	245b      	movs	r4, #91	; 0x5b
    e672:	f001 f86d 	bl	f750 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    e676:	b910      	cbnz	r0, e67e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x106>
    e678:	f001 f860 	bl	f73c <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    e67c:	b100      	cbz	r0, e680 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x108>
    e67e:	2462      	movs	r4, #98	; 0x62
    e680:	4620      	mov	r0, r4
    e682:	bd10      	pop	{r4, pc}
    e684:	b510      	push	{r4, lr}
    e686:	f7ff fff2 	bl	e66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    e68a:	3065      	adds	r0, #101	; 0x65
    e68c:	b280      	uxth	r0, r0
    e68e:	bd10      	pop	{r4, pc}
    e690:	b510      	push	{r4, lr}
    e692:	f7ff ffec 	bl	e66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    e696:	30fb      	adds	r0, #251	; 0xfb
    e698:	b280      	uxth	r0, r0
    e69a:	bd10      	pop	{r4, pc}
    e69c:	b1d0      	cbz	r0, e6d4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x15c>
    e69e:	2908      	cmp	r1, #8
    e6a0:	d011      	beq.n	e6c6 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x14e>
    e6a2:	2904      	cmp	r1, #4
    e6a4:	d00b      	beq.n	e6be <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x146>
    e6a6:	2000      	movs	r0, #0
    e6a8:	2902      	cmp	r1, #2
    e6aa:	d010      	beq.n	e6ce <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x156>
    e6ac:	2108      	movs	r1, #8
    e6ae:	3028      	adds	r0, #40	; 0x28
    e6b0:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
    e6b4:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    e6b8:	4408      	add	r0, r1
    e6ba:	3098      	adds	r0, #152	; 0x98
    e6bc:	4770      	bx	lr
    e6be:	f44f 70bf 	mov.w	r0, #382	; 0x17e
    e6c2:	2110      	movs	r1, #16
    e6c4:	e7f4      	b.n	e6b0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    e6c6:	f44f 70c8 	mov.w	r0, #400	; 0x190
    e6ca:	2140      	movs	r1, #64	; 0x40
    e6cc:	e7f0      	b.n	e6b0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    e6ce:	2104      	movs	r1, #4
    e6d0:	3018      	adds	r0, #24
    e6d2:	e7ed      	b.n	e6b0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    e6d4:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    e6d8:	4770      	bx	lr
    e6da:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e6de:	f001 0307 	and.w	r3, r1, #7
    e6e2:	7802      	ldrb	r2, [r0, #0]
    e6e4:	2101      	movs	r1, #1
    e6e6:	4099      	lsls	r1, r3
    e6e8:	438a      	bics	r2, r1
    e6ea:	7002      	strb	r2, [r0, #0]
    e6ec:	4770      	bx	lr

0000e6ee <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    e6ee:	f7f5 be8b 	b.w	4408 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000e6f2 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    e6f2:	2000      	movs	r0, #0
    e6f4:	4770      	bx	lr

0000e6f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    e6f6:	b538      	push	{r3, r4, r5, lr}
    e6f8:	460d      	mov	r5, r1
    e6fa:	4604      	mov	r4, r0
    e6fc:	e050      	b.n	e7a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa>
    e6fe:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    e702:	1c40      	adds	r0, r0, #1
    e704:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    e708:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    e70c:	1c40      	adds	r0, r0, #1
    e70e:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
    e712:	4620      	mov	r0, r4
    e714:	f000 f8e1 	bl	e8da <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    e718:	b198      	cbz	r0, e742 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    e71a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    e71e:	1c40      	adds	r0, r0, #1
    e720:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    e724:	4620      	mov	r0, r4
    e726:	f000 f86e 	bl	e806 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    e72a:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    e72e:	4288      	cmp	r0, r1
    e730:	d307      	bcc.n	e742 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    e732:	2000      	movs	r0, #0
    e734:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    e738:	2001      	movs	r0, #1
    e73a:	f884 018e 	strb.w	r0, [r4, #398]	; 0x18e
    e73e:	f7fb ff0d 	bl	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e742:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    e746:	b120      	cbz	r0, e752 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c>
    e748:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
    e74c:	1c40      	adds	r0, r0, #1
    e74e:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
    e752:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    e756:	b120      	cbz	r0, e762 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c>
    e758:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
    e75c:	1c40      	adds	r0, r0, #1
    e75e:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    e762:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
    e766:	f88d 0000 	strb.w	r0, [sp]
    e76a:	9800      	ldr	r0, [sp, #0]
    e76c:	9000      	str	r0, [sp, #0]
    e76e:	f89d 0000 	ldrb.w	r0, [sp]
    e772:	b940      	cbnz	r0, e786 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90>
    e774:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    e778:	2300      	movs	r3, #0
    e77a:	2101      	movs	r1, #1
    e77c:	f104 0078 	add.w	r0, r4, #120	; 0x78
    e780:	f7ff f904 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e784:	b120      	cbz	r0, e790 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9a>
    e786:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	; 0xb2
    e78a:	1c40      	adds	r0, r0, #1
    e78c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
    e790:	4620      	mov	r0, r4
    e792:	f000 f847 	bl	e824 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    e796:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    e79a:	1c40      	adds	r0, r0, #1
    e79c:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    e7a0:	1e6d      	subs	r5, r5, #1
    e7a2:	b2ad      	uxth	r5, r5
    e7a4:	d2ab      	bcs.n	e6fe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8>
    e7a6:	bd38      	pop	{r3, r4, r5, pc}

0000e7a8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    e7a8:	b510      	push	{r4, lr}
    e7aa:	f7fa fde5 	bl	9378 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    e7ae:	b128      	cbz	r0, e7bc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    e7b0:	2000      	movs	r0, #0
    e7b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7b6:	4601      	mov	r1, r0
    e7b8:	f7fa bd8a 	b.w	92d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    e7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7c0:	f7f6 bac2 	b.w	4d48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    e7c4:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    e7c8:	28fe      	cmp	r0, #254	; 0xfe
    e7ca:	d001      	beq.n	e7d0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    e7cc:	2001      	movs	r0, #1
    e7ce:	4770      	bx	lr
    e7d0:	2000      	movs	r0, #0
    e7d2:	4770      	bx	lr
    e7d4:	b510      	push	{r4, lr}
    e7d6:	2801      	cmp	r0, #1
    e7d8:	d006      	beq.n	e7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    e7da:	2802      	cmp	r0, #2
    e7dc:	d004      	beq.n	e7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    e7de:	f240 2163 	movw	r1, #611	; 0x263
    e7e2:	2006      	movs	r0, #6
    e7e4:	f7f5 fa86 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7e8:	bd10      	pop	{r4, pc}
    e7ea:	2801      	cmp	r0, #1
    e7ec:	d002      	beq.n	e7f4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    e7ee:	2802      	cmp	r0, #2
    e7f0:	d105      	bne.n	e7fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    e7f2:	e002      	b.n	e7fa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    e7f4:	2901      	cmp	r1, #1
    e7f6:	d004      	beq.n	e802 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    e7f8:	e001      	b.n	e7fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    e7fa:	2902      	cmp	r1, #2
    e7fc:	d001      	beq.n	e802 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    e7fe:	2000      	movs	r0, #0
    e800:	4770      	bx	lr
    e802:	2001      	movs	r0, #1
    e804:	4770      	bx	lr
    e806:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    e80a:	428a      	cmp	r2, r1
    e80c:	d301      	bcc.n	e812 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    e80e:	1a51      	subs	r1, r2, r1
    e810:	e000      	b.n	e814 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    e812:	2100      	movs	r1, #0
    e814:	8a82      	ldrh	r2, [r0, #20]
    e816:	1d52      	adds	r2, r2, #5
    e818:	428a      	cmp	r2, r1
    e81a:	d302      	bcc.n	e822 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    e81c:	2101      	movs	r1, #1
    e81e:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac
    e822:	4770      	bx	lr
    e824:	b570      	push	{r4, r5, r6, lr}
    e826:	4604      	mov	r4, r0
    e828:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    e82c:	2500      	movs	r5, #0
    e82e:	2601      	movs	r6, #1
    e830:	280c      	cmp	r0, #12
    e832:	d02c      	beq.n	e88e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe6>
    e834:	280d      	cmp	r0, #13
    e836:	d129      	bne.n	e88c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    e838:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    e83c:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    e840:	1c40      	adds	r0, r0, #1
    e842:	4288      	cmp	r0, r1
    e844:	d122      	bne.n	e88c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    e846:	8820      	ldrh	r0, [r4, #0]
    e848:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    e84c:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    e850:	f7ff f883 	bl	d95a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    e854:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    e858:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    e85c:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    e860:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    e864:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    e868:	f884 51c8 	strb.w	r5, [r4, #456]	; 0x1c8
    e86c:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    e870:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    e874:	2102      	movs	r1, #2
    e876:	4620      	mov	r0, r4
    e878:	f7f7 f93c 	bl	5af4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    e87c:	f7fb fe6e 	bl	a55c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e880:	2103      	movs	r1, #3
    e882:	4620      	mov	r0, r4
    e884:	f7f9 f8fa 	bl	7a7c <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    e888:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    e88c:	bd70      	pop	{r4, r5, r6, pc}
    e88e:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    e892:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    e896:	1c40      	adds	r0, r0, #1
    e898:	4288      	cmp	r0, r1
    e89a:	d1f7      	bne.n	e88c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    e89c:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    e8a0:	f8d0 1001 	ldr.w	r1, [r0, #1]
    e8a4:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    e8a8:	7940      	ldrb	r0, [r0, #5]
    e8aa:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    e8ae:	2103      	movs	r1, #3
    e8b0:	4620      	mov	r0, r4
    e8b2:	f7f7 f91f 	bl	5af4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    e8b6:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    e8ba:	7800      	ldrb	r0, [r0, #0]
    e8bc:	b140      	cbz	r0, e8d0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x128>
    e8be:	2101      	movs	r1, #1
    e8c0:	20fe      	movs	r0, #254	; 0xfe
    e8c2:	f7fb fd75 	bl	a3b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    e8c6:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    e8ca:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    e8ce:	bd70      	pop	{r4, r5, r6, pc}
    e8d0:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    e8d4:	2036      	movs	r0, #54	; 0x36
    e8d6:	f7f5 fa0d 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8da:	b510      	push	{r4, lr}
    e8dc:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    e8e0:	b941      	cbnz	r1, e8f4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14c>
    e8e2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    e8e6:	2300      	movs	r3, #0
    e8e8:	2106      	movs	r1, #6
    e8ea:	3078      	adds	r0, #120	; 0x78
    e8ec:	f7ff f84e 	bl	d98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e8f0:	2800      	cmp	r0, #0
    e8f2:	d000      	beq.n	e8f6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
    e8f4:	2001      	movs	r0, #1
    e8f6:	bd10      	pop	{r4, pc}

0000e8f8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    e8f8:	b510      	push	{r4, lr}
    e8fa:	460c      	mov	r4, r1
    e8fc:	4601      	mov	r1, r0
    e8fe:	4610      	mov	r0, r2
    e900:	f7f2 fe5c 	bl	15bc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e904:	2800      	cmp	r0, #0
    e906:	da06      	bge.n	e916 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x1e>
    e908:	1a21      	subs	r1, r4, r0
    e90a:	1e49      	subs	r1, r1, #1
    e90c:	fbb1 f1f4 	udiv	r1, r1, r4
    e910:	fb01 0004 	mla	r0, r1, r4, r0
    e914:	bd10      	pop	{r4, pc}
    e916:	fb90 f1f4 	sdiv	r1, r0, r4
    e91a:	fb01 0014 	mls	r0, r1, r4, r0
    e91e:	bd10      	pop	{r4, pc}
    e920:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e924:	f001 0107 	and.w	r1, r1, #7
    e928:	7800      	ldrb	r0, [r0, #0]
    e92a:	2201      	movs	r2, #1
    e92c:	408a      	lsls	r2, r1
    e92e:	4010      	ands	r0, r2
    e930:	40c8      	lsrs	r0, r1
    e932:	4770      	bx	lr
    e934:	b118      	cbz	r0, e93e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    e936:	2802      	cmp	r0, #2
    e938:	d001      	beq.n	e93e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    e93a:	2001      	movs	r0, #1
    e93c:	4770      	bx	lr
    e93e:	2000      	movs	r0, #0
    e940:	4770      	bx	lr

0000e942 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    e942:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    e944:	7881      	ldrb	r1, [r0, #2]
    e946:	4604      	mov	r4, r0
    e948:	291a      	cmp	r1, #26
    e94a:	d025      	beq.n	e998 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    e94c:	dc0e      	bgt.n	e96c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    e94e:	2916      	cmp	r1, #22
    e950:	d22d      	bcs.n	e9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e952:	e8df f001 	tbb	[pc, r1]
    e956:	2c2c      	.short	0x2c2c
    e958:	212c2c2c 	.word	0x212c2c2c
    e95c:	2c2c2c2c 	.word	0x2c2c2c2c
    e960:	2c2c2c2c 	.word	0x2c2c2c2c
    e964:	2c2c2c2c 	.word	0x2c2c2c2c
    e968:	2121212c 	.word	0x2121212c
    e96c:	292a      	cmp	r1, #42	; 0x2a
    e96e:	d01e      	beq.n	e9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e970:	dc0b      	bgt.n	e98a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    e972:	f1a1 011e 	sub.w	r1, r1, #30
    e976:	290c      	cmp	r1, #12
    e978:	d219      	bcs.n	e9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e97a:	e8df f001 	tbb	[pc, r1]
    e97e:	1818      	.short	0x1818
    e980:	18181818 	.word	0x18181818
    e984:	18181818 	.word	0x18181818
    e988:	0d18      	.short	0x0d18
    e98a:	393a      	subs	r1, #58	; 0x3a
    e98c:	2904      	cmp	r1, #4
    e98e:	d20e      	bcs.n	e9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e990:	e8df f001 	tbb	[pc, r1]
    e994:	020d020d 	.word	0x020d020d
    e998:	8820      	ldrh	r0, [r4, #0]
    e99a:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    e99e:	d206      	bcs.n	e9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e9a0:	2701      	movs	r7, #1
    e9a2:	4669      	mov	r1, sp
    e9a4:	f7fe ffc9 	bl	d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e9a8:	b118      	cbz	r0, e9b2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e9aa:	2002      	movs	r0, #2
    e9ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e9ae:	2012      	movs	r0, #18
    e9b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e9b2:	9d01      	ldr	r5, [sp, #4]
    e9b4:	4668      	mov	r0, sp
    e9b6:	462e      	mov	r6, r5
    e9b8:	f505 759e 	add.w	r5, r5, #316	; 0x13c
    e9bc:	f206 163d 	addw	r6, r6, #317	; 0x13d
    e9c0:	f000 fd5e 	bl	f480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x45e>
    e9c4:	b138      	cbz	r0, e9d6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    e9c6:	7828      	ldrb	r0, [r5, #0]
    e9c8:	f88d 0008 	strb.w	r0, [sp, #8]
    e9cc:	9802      	ldr	r0, [sp, #8]
    e9ce:	9002      	str	r0, [sp, #8]
    e9d0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    e9d4:	b108      	cbz	r0, e9da <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    e9d6:	200c      	movs	r0, #12
    e9d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e9da:	702f      	strb	r7, [r5, #0]
    e9dc:	78a0      	ldrb	r0, [r4, #2]
    e9de:	7030      	strb	r0, [r6, #0]
    e9e0:	2000      	movs	r0, #0
    e9e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000e9e4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    e9e4:	b510      	push	{r4, lr}
    e9e6:	4604      	mov	r4, r0
    e9e8:	7800      	ldrb	r0, [r0, #0]
    e9ea:	b118      	cbz	r0, e9f4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e9ec:	2801      	cmp	r0, #1
    e9ee:	d001      	beq.n	e9f4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e9f0:	2012      	movs	r0, #18
    e9f2:	bd10      	pop	{r4, pc}
    e9f4:	f000 fcf8 	bl	f3e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    e9f8:	b120      	cbz	r0, ea04 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e9fa:	f7f6 fe41 	bl	5680 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e9fe:	b108      	cbz	r0, ea04 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    ea00:	200c      	movs	r0, #12
    ea02:	bd10      	pop	{r4, pc}
    ea04:	7820      	ldrb	r0, [r4, #0]
    ea06:	f7ff ff95 	bl	e934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ea0a:	1de2      	adds	r2, r4, #7
    ea0c:	f104 0317 	add.w	r3, r4, #23
    ea10:	1c61      	adds	r1, r4, #1
    ea12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea16:	f7f6 be65 	b.w	56e4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000ea1a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    ea1a:	b510      	push	{r4, lr}
    ea1c:	4604      	mov	r4, r0
    ea1e:	f000 fde6 	bl	f5ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    ea22:	b108      	cbz	r0, ea28 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    ea24:	200c      	movs	r0, #12
    ea26:	bd10      	pop	{r4, pc}
    ea28:	7820      	ldrb	r0, [r4, #0]
    ea2a:	b118      	cbz	r0, ea34 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ea2c:	2801      	cmp	r0, #1
    ea2e:	d001      	beq.n	ea34 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ea30:	2012      	movs	r0, #18
    ea32:	bd10      	pop	{r4, pc}
    ea34:	f7ff ff7e 	bl	e934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ea38:	1c61      	adds	r1, r4, #1
    ea3a:	f7f6 fef7 	bl	582c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    ea3e:	b108      	cbz	r0, ea44 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    ea40:	2000      	movs	r0, #0
    ea42:	bd10      	pop	{r4, pc}
    ea44:	2007      	movs	r0, #7
    ea46:	bd10      	pop	{r4, pc}

0000ea48 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    ea48:	b510      	push	{r4, lr}
    ea4a:	f000 fccd 	bl	f3e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ea4e:	b120      	cbz	r0, ea5a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ea50:	f7f6 fe16 	bl	5680 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ea54:	b108      	cbz	r0, ea5a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ea56:	200c      	movs	r0, #12
    ea58:	bd10      	pop	{r4, pc}
    ea5a:	f7f6 fe89 	bl	5770 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    ea5e:	2000      	movs	r0, #0
    ea60:	bd10      	pop	{r4, pc}

0000ea62 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    ea62:	b510      	push	{r4, lr}
    ea64:	f000 fdc3 	bl	f5ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    ea68:	b108      	cbz	r0, ea6e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    ea6a:	200c      	movs	r0, #12
    ea6c:	bd10      	pop	{r4, pc}
    ea6e:	f7f6 ff05 	bl	587c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    ea72:	2000      	movs	r0, #0
    ea74:	bd10      	pop	{r4, pc}

0000ea76 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    ea76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea78:	4605      	mov	r5, r0
    ea7a:	f000 fad2 	bl	f022 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    ea7e:	2800      	cmp	r0, #0
    ea80:	d112      	bne.n	eaa8 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x32>
    ea82:	8828      	ldrh	r0, [r5, #0]
    ea84:	2100      	movs	r1, #0
    ea86:	f7fe fdda 	bl	d63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ea8a:	0004      	movs	r4, r0
    ea8c:	d00d      	beq.n	eaaa <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    ea8e:	f000 fcfa 	bl	f486 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    ea92:	b150      	cbz	r0, eaaa <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    ea94:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    ea98:	f88d 0000 	strb.w	r0, [sp]
    ea9c:	9800      	ldr	r0, [sp, #0]
    ea9e:	9000      	str	r0, [sp, #0]
    eaa0:	f89d 0000 	ldrb.w	r0, [sp]
    eaa4:	b118      	cbz	r0, eaae <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    eaa6:	203a      	movs	r0, #58	; 0x3a
    eaa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eaaa:	2002      	movs	r0, #2
    eaac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eaae:	88a8      	ldrh	r0, [r5, #4]
    eab0:	f7fe ff4f 	bl	d952 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    eab4:	4606      	mov	r6, r0
    eab6:	4601      	mov	r1, r0
    eab8:	2008      	movs	r0, #8
    eaba:	f7ff f8e5 	bl	dc88 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    eabe:	4601      	mov	r1, r0
    eac0:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    eac4:	4281      	cmp	r1, r0
    eac6:	d301      	bcc.n	eacc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x56>
    eac8:	42b0      	cmp	r0, r6
    eaca:	d301      	bcc.n	ead0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x5a>
    eacc:	2012      	movs	r0, #18
    eace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ead0:	4631      	mov	r1, r6
    ead2:	2005      	movs	r0, #5
    ead4:	f7ff f8d8 	bl	dc88 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    ead8:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
    eadc:	2000      	movs	r0, #0
    eade:	e9c4 0653 	strd	r0, r6, [r4, #332]	; 0x14c
    eae2:	88e8      	ldrh	r0, [r5, #6]
    eae4:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    eae8:	8928      	ldrh	r0, [r5, #8]
    eaea:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    eaee:	f504 74a2 	add.w	r4, r4, #324	; 0x144
    eaf2:	2001      	movs	r0, #1
    eaf4:	7020      	strb	r0, [r4, #0]
    eaf6:	2000      	movs	r0, #0
    eaf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000eafa <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    eafa:	b510      	push	{r4, lr}
    eafc:	460b      	mov	r3, r1
    eafe:	2201      	movs	r2, #1
    eb00:	f100 0110 	add.w	r1, r0, #16
    eb04:	f7fe fec4 	bl	d890 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    eb08:	2000      	movs	r0, #0
    eb0a:	bd10      	pop	{r4, pc}

0000eb0c <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    eb0c:	b510      	push	{r4, lr}
    eb0e:	2108      	movs	r1, #8
    eb10:	f7f5 f99a 	bl	3e48 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    eb14:	2000      	movs	r0, #0
    eb16:	bd10      	pop	{r4, pc}

0000eb18 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    eb18:	b510      	push	{r4, lr}
    eb1a:	4604      	mov	r4, r0
    eb1c:	f000 fcaa 	bl	f474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    eb20:	b140      	cbz	r0, eb34 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    eb22:	20fb      	movs	r0, #251	; 0xfb
    eb24:	8020      	strh	r0, [r4, #0]
    eb26:	f640 0148 	movw	r1, #2120	; 0x848
    eb2a:	8061      	strh	r1, [r4, #2]
    eb2c:	80a0      	strh	r0, [r4, #4]
    eb2e:	80e1      	strh	r1, [r4, #6]
    eb30:	2000      	movs	r0, #0
    eb32:	bd10      	pop	{r4, pc}
    eb34:	2001      	movs	r0, #1
    eb36:	bd10      	pop	{r4, pc}

0000eb38 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    eb38:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    eb3a:	460d      	mov	r5, r1
    eb3c:	4606      	mov	r6, r0
    eb3e:	f7fc fa2f 	bl	afa0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    eb42:	f3c0 2000 	ubfx	r0, r0, #8, #1
    eb46:	b300      	cbz	r0, eb8a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    eb48:	8830      	ldrh	r0, [r6, #0]
    eb4a:	4669      	mov	r1, sp
    eb4c:	f7fe fef5 	bl	d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    eb50:	2800      	cmp	r0, #0
    eb52:	d119      	bne.n	eb88 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    eb54:	9c01      	ldr	r4, [sp, #4]
    eb56:	2700      	movs	r7, #0
    eb58:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    eb5c:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    eb60:	f000 fa94 	bl	f08c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    eb64:	70a8      	strb	r0, [r5, #2]
    eb66:	7860      	ldrb	r0, [r4, #1]
    eb68:	f000 fa90 	bl	f08c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    eb6c:	70e8      	strb	r0, [r5, #3]
    eb6e:	78a0      	ldrb	r0, [r4, #2]
    eb70:	f88d 0008 	strb.w	r0, [sp, #8]
    eb74:	9802      	ldr	r0, [sp, #8]
    eb76:	9002      	str	r0, [sp, #8]
    eb78:	f89d 0008 	ldrb.w	r0, [sp, #8]
    eb7c:	3c6a      	subs	r4, #106	; 0x6a
    eb7e:	2800      	cmp	r0, #0
    eb80:	d1ea      	bne.n	eb58 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    eb82:	8830      	ldrh	r0, [r6, #0]
    eb84:	8028      	strh	r0, [r5, #0]
    eb86:	2000      	movs	r0, #0
    eb88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eb8a:	2001      	movs	r0, #1
    eb8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000eb8e <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    eb8e:	2108      	movs	r1, #8
    eb90:	7001      	strb	r1, [r0, #0]
    eb92:	2000      	movs	r0, #0
    eb94:	4770      	bx	lr

0000eb96 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    eb96:	b510      	push	{r4, lr}
    eb98:	4604      	mov	r4, r0
    eb9a:	20d8      	movs	r0, #216	; 0xd8
    eb9c:	7020      	strb	r0, [r4, #0]
    eb9e:	f000 fc4a 	bl	f436 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x414>
    eba2:	7060      	strb	r0, [r4, #1]
    eba4:	2000      	movs	r0, #0
    eba6:	bd10      	pop	{r4, pc}

0000eba8 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    eba8:	2108      	movs	r1, #8
    ebaa:	7001      	strb	r1, [r0, #0]
    ebac:	2000      	movs	r0, #0
    ebae:	4770      	bx	lr

0000ebb0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    ebb0:	b510      	push	{r4, lr}
    ebb2:	4604      	mov	r4, r0
    ebb4:	7800      	ldrb	r0, [r0, #0]
    ebb6:	b108      	cbz	r0, ebbc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    ebb8:	2801      	cmp	r0, #1
    ebba:	d110      	bne.n	ebde <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ebbc:	f000 fc14 	bl	f3e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ebc0:	b120      	cbz	r0, ebcc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ebc2:	f7f6 fd5d 	bl	5680 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ebc6:	b108      	cbz	r0, ebcc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ebc8:	200c      	movs	r0, #12
    ebca:	bd10      	pop	{r4, pc}
    ebcc:	7820      	ldrb	r0, [r4, #0]
    ebce:	f7ff feb1 	bl	e934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ebd2:	1c61      	adds	r1, r4, #1
    ebd4:	f7fe fe42 	bl	d85c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    ebd8:	b108      	cbz	r0, ebde <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ebda:	2000      	movs	r0, #0
    ebdc:	bd10      	pop	{r4, pc}
    ebde:	2012      	movs	r0, #18
    ebe0:	bd10      	pop	{r4, pc}

0000ebe2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    ebe2:	b510      	push	{r4, lr}
    ebe4:	4604      	mov	r4, r0
    ebe6:	f000 fd02 	bl	f5ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    ebea:	b108      	cbz	r0, ebf0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    ebec:	200c      	movs	r0, #12
    ebee:	bd10      	pop	{r4, pc}
    ebf0:	7820      	ldrb	r0, [r4, #0]
    ebf2:	b108      	cbz	r0, ebf8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    ebf4:	2801      	cmp	r0, #1
    ebf6:	d107      	bne.n	ec08 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ebf8:	f7ff fe9c 	bl	e934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ebfc:	1c61      	adds	r1, r4, #1
    ebfe:	f7fe fe3c 	bl	d87a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    ec02:	b108      	cbz	r0, ec08 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ec04:	2000      	movs	r0, #0
    ec06:	bd10      	pop	{r4, pc}
    ec08:	2012      	movs	r0, #18
    ec0a:	bd10      	pop	{r4, pc}

0000ec0c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    ec0c:	b510      	push	{r4, lr}
    ec0e:	4604      	mov	r4, r0
    ec10:	f000 fbea 	bl	f3e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ec14:	b108      	cbz	r0, ec1a <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    ec16:	200c      	movs	r0, #12
    ec18:	bd10      	pop	{r4, pc}
    ec1a:	7820      	ldrb	r0, [r4, #0]
    ec1c:	f000 0001 	and.w	r0, r0, #1
    ec20:	f7f6 fd28 	bl	5674 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    ec24:	2000      	movs	r0, #0
    ec26:	bd10      	pop	{r4, pc}

0000ec28 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    ec28:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ec2a:	460d      	mov	r5, r1
    ec2c:	4604      	mov	r4, r0
    ec2e:	f000 fc21 	bl	f474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    ec32:	b130      	cbz	r0, ec42 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    ec34:	88a2      	ldrh	r2, [r4, #4]
    ec36:	f244 2090 	movw	r0, #17040	; 0x4290
    ec3a:	4282      	cmp	r2, r0
    ec3c:	d903      	bls.n	ec46 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    ec3e:	2012      	movs	r0, #18
    ec40:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ec42:	2001      	movs	r0, #1
    ec44:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ec46:	f640 0048 	movw	r0, #2120	; 0x848
    ec4a:	4282      	cmp	r2, r0
    ec4c:	d300      	bcc.n	ec50 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    ec4e:	4602      	mov	r2, r0
    ec50:	8820      	ldrh	r0, [r4, #0]
    ec52:	f8ad 0000 	strh.w	r0, [sp]
    ec56:	8860      	ldrh	r0, [r4, #2]
    ec58:	f8ad 0002 	strh.w	r0, [sp, #2]
    ec5c:	f8ad 2004 	strh.w	r2, [sp, #4]
    ec60:	8860      	ldrh	r0, [r4, #2]
    ec62:	f8ad 0006 	strh.w	r0, [sp, #6]
    ec66:	f8ad 2008 	strh.w	r2, [sp, #8]
    ec6a:	8820      	ldrh	r0, [r4, #0]
    ec6c:	8028      	strh	r0, [r5, #0]
    ec6e:	4668      	mov	r0, sp
    ec70:	f000 fc28 	bl	f4c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    ec74:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ec76 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    ec76:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ec78:	4604      	mov	r4, r0
    ec7a:	f7fe fe2f 	bl	d8dc <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    ec7e:	b160      	cbz	r0, ec9a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x24>
    ec80:	4620      	mov	r0, r4
    ec82:	f7f6 ffbd 	bl	5c00 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    ec86:	4669      	mov	r1, sp
    ec88:	2000      	movs	r0, #0
    ec8a:	f7fe fce1 	bl	d650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    ec8e:	b150      	cbz	r0, eca6 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x30>
    ec90:	f640 71f7 	movw	r1, #4087	; 0xff7
    ec94:	2039      	movs	r0, #57	; 0x39
    ec96:	f7f5 f82d 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec9a:	2012      	movs	r0, #18
    ec9c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ec9e:	9802      	ldr	r0, [sp, #8]
    eca0:	f880 412e 	strb.w	r4, [r0, #302]	; 0x12e
    eca4:	e000      	b.n	eca8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x32>
    eca6:	2401      	movs	r4, #1
    eca8:	4668      	mov	r0, sp
    ecaa:	f7f5 fa53 	bl	4154 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ecae:	2800      	cmp	r0, #0
    ecb0:	d0f5      	beq.n	ec9e <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    ecb2:	2000      	movs	r0, #0
    ecb4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ecb6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    ecb6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ecb8:	4604      	mov	r4, r0
    ecba:	f7fc f971 	bl	afa0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ecbe:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ecc2:	b1b0      	cbz	r0, ecf2 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    ecc4:	f10d 0007 	add.w	r0, sp, #7
    ecc8:	9000      	str	r0, [sp, #0]
    ecca:	7922      	ldrb	r2, [r4, #4]
    eccc:	78e1      	ldrb	r1, [r4, #3]
    ecce:	78a0      	ldrb	r0, [r4, #2]
    ecd0:	f10d 0306 	add.w	r3, sp, #6
    ecd4:	f000 fc74 	bl	f5c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    ecd8:	2800      	cmp	r0, #0
    ecda:	d109      	bne.n	ecf0 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    ecdc:	8820      	ldrh	r0, [r4, #0]
    ecde:	f8ad 0004 	strh.w	r0, [sp, #4]
    ece2:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    ece6:	f8ad 0008 	strh.w	r0, [sp, #8]
    ecea:	a801      	add	r0, sp, #4
    ecec:	f000 f8f8 	bl	eee0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    ecf0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ecf2:	2001      	movs	r0, #1
    ecf4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ecf6 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    ecf6:	b510      	push	{r4, lr}
    ecf8:	4604      	mov	r4, r0
    ecfa:	f000 fb75 	bl	f3e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ecfe:	b120      	cbz	r0, ed0a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ed00:	f7f6 fcbe 	bl	5680 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ed04:	b108      	cbz	r0, ed0a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ed06:	200c      	movs	r0, #12
    ed08:	bd10      	pop	{r4, pc}
    ed0a:	7820      	ldrb	r0, [r4, #0]
    ed0c:	f7ff fe12 	bl	e934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ed10:	79e2      	ldrb	r2, [r4, #7]
    ed12:	1c61      	adds	r1, r4, #1
    ed14:	f7f6 fc4e 	bl	55b4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    ed18:	b108      	cbz	r0, ed1e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    ed1a:	2000      	movs	r0, #0
    ed1c:	bd10      	pop	{r4, pc}
    ed1e:	2002      	movs	r0, #2
    ed20:	bd10      	pop	{r4, pc}

0000ed22 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    ed22:	b510      	push	{r4, lr}
    ed24:	4604      	mov	r4, r0
    ed26:	2001      	movs	r0, #1
    ed28:	f000 f9bb 	bl	f0a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    ed2c:	b128      	cbz	r0, ed3a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    ed2e:	4621      	mov	r1, r4
    ed30:	2001      	movs	r0, #1
    ed32:	f7f5 fe3d 	bl	49b0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ed36:	2000      	movs	r0, #0
    ed38:	bd10      	pop	{r4, pc}
    ed3a:	200c      	movs	r0, #12
    ed3c:	bd10      	pop	{r4, pc}

0000ed3e <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    ed3e:	b510      	push	{r4, lr}
    ed40:	8800      	ldrh	r0, [r0, #0]
    ed42:	f7f6 fd2b 	bl	579c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    ed46:	b108      	cbz	r0, ed4c <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    ed48:	2000      	movs	r0, #0
    ed4a:	bd10      	pop	{r4, pc}
    ed4c:	2030      	movs	r0, #48	; 0x30
    ed4e:	bd10      	pop	{r4, pc}

0000ed50 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    ed50:	b51c      	push	{r2, r3, r4, lr}
    ed52:	7801      	ldrb	r1, [r0, #0]
    ed54:	f88d 1000 	strb.w	r1, [sp]
    ed58:	7840      	ldrb	r0, [r0, #1]
    ed5a:	f88d 0001 	strb.w	r0, [sp, #1]
    ed5e:	2000      	movs	r0, #0
    ed60:	f8ad 0002 	strh.w	r0, [sp, #2]
    ed64:	f8ad 0004 	strh.w	r0, [sp, #4]
    ed68:	4601      	mov	r1, r0
    ed6a:	4668      	mov	r0, sp
    ed6c:	f000 f9e4 	bl	f138 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x116>
    ed70:	2800      	cmp	r0, #0
    ed72:	d102      	bne.n	ed7a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    ed74:	4668      	mov	r0, sp
    ed76:	f000 f9c3 	bl	f100 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xde>
    ed7a:	bd1c      	pop	{r2, r3, r4, pc}

0000ed7c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    ed7c:	b500      	push	{lr}
    ed7e:	b087      	sub	sp, #28
    ed80:	7941      	ldrb	r1, [r0, #5]
    ed82:	f88d 1000 	strb.w	r1, [sp]
    ed86:	7981      	ldrb	r1, [r0, #6]
    ed88:	f88d 1001 	strb.w	r1, [sp, #1]
    ed8c:	2101      	movs	r1, #1
    ed8e:	f88d 1002 	strb.w	r1, [sp, #2]
    ed92:	7801      	ldrb	r1, [r0, #0]
    ed94:	f88d 1003 	strb.w	r1, [sp, #3]
    ed98:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    ed9c:	f240 2271 	movw	r2, #625	; 0x271
    eda0:	4351      	muls	r1, r2
    eda2:	9102      	str	r1, [sp, #8]
    eda4:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    eda8:	4350      	muls	r0, r2
    edaa:	9004      	str	r0, [sp, #16]
    edac:	2007      	movs	r0, #7
    edae:	f88d 0018 	strb.w	r0, [sp, #24]
    edb2:	2000      	movs	r0, #0
    edb4:	f88d 0019 	strb.w	r0, [sp, #25]
    edb8:	9804      	ldr	r0, [sp, #16]
    edba:	f7fb fff7 	bl	adac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>
    edbe:	b140      	cbz	r0, edd2 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    edc0:	9802      	ldr	r0, [sp, #8]
    edc2:	f7fb ffe7 	bl	ad94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    edc6:	b120      	cbz	r0, edd2 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    edc8:	4668      	mov	r0, sp
    edca:	f7fb fe61 	bl	aa90 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    edce:	b007      	add	sp, #28
    edd0:	bd00      	pop	{pc}
    edd2:	2030      	movs	r0, #48	; 0x30
    edd4:	e7fb      	b.n	edce <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000edd6 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    edd6:	b570      	push	{r4, r5, r6, lr}
    edd8:	4605      	mov	r5, r0
    edda:	8800      	ldrh	r0, [r0, #0]
    eddc:	2100      	movs	r1, #0
    edde:	f7fe fc2e 	bl	d63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ede2:	0004      	movs	r4, r0
    ede4:	d007      	beq.n	edf6 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    ede6:	f000 fb4e 	bl	f486 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    edea:	b120      	cbz	r0, edf6 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    edec:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
    edf0:	b118      	cbz	r0, edfa <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    edf2:	203a      	movs	r0, #58	; 0x3a
    edf4:	bd70      	pop	{r4, r5, r6, pc}
    edf6:	2002      	movs	r0, #2
    edf8:	bd70      	pop	{r4, r5, r6, pc}
    edfa:	2100      	movs	r1, #0
    edfc:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
    ee00:	f7ff fd8e 	bl	e920 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    ee04:	2801      	cmp	r0, #1
    ee06:	d001      	beq.n	ee0c <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    ee08:	201a      	movs	r0, #26
    ee0a:	bd70      	pop	{r4, r5, r6, pc}
    ee0c:	f8d5 1002 	ldr.w	r1, [r5, #2]
    ee10:	f8c4 115b 	str.w	r1, [r4, #347]	; 0x15b
    ee14:	f8d5 1006 	ldr.w	r1, [r5, #6]
    ee18:	f8c4 115f 	str.w	r1, [r4, #351]	; 0x15f
    ee1c:	8969      	ldrh	r1, [r5, #10]
    ee1e:	f8a4 1163 	strh.w	r1, [r4, #355]	; 0x163
    ee22:	2210      	movs	r2, #16
    ee24:	f105 010c 	add.w	r1, r5, #12
    ee28:	f204 1065 	addw	r0, r4, #357	; 0x165
    ee2c:	f7fd fb6a 	bl	c504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ee30:	2001      	movs	r0, #1
    ee32:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
    ee36:	2000      	movs	r0, #0
    ee38:	bd70      	pop	{r4, r5, r6, pc}

0000ee3a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    ee3a:	b51c      	push	{r2, r3, r4, lr}
    ee3c:	4604      	mov	r4, r0
    ee3e:	f000 fb19 	bl	f474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    ee42:	b178      	cbz	r0, ee64 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    ee44:	8820      	ldrh	r0, [r4, #0]
    ee46:	f8ad 0000 	strh.w	r0, [sp]
    ee4a:	8860      	ldrh	r0, [r4, #2]
    ee4c:	f8ad 0002 	strh.w	r0, [sp, #2]
    ee50:	8820      	ldrh	r0, [r4, #0]
    ee52:	f8ad 0004 	strh.w	r0, [sp, #4]
    ee56:	8860      	ldrh	r0, [r4, #2]
    ee58:	f8ad 0006 	strh.w	r0, [sp, #6]
    ee5c:	4668      	mov	r0, sp
    ee5e:	f7fb ffdb 	bl	ae18 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>
    ee62:	bd1c      	pop	{r2, r3, r4, pc}
    ee64:	2001      	movs	r0, #1
    ee66:	bd1c      	pop	{r2, r3, r4, pc}

0000ee68 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    ee68:	b510      	push	{r4, lr}
    ee6a:	f7f5 fdc5 	bl	49f8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    ee6e:	2000      	movs	r0, #0
    ee70:	bd10      	pop	{r4, pc}

0000ee72 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    ee72:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ee74:	460c      	mov	r4, r1
    ee76:	4605      	mov	r5, r0
    ee78:	f000 fafc 	bl	f474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    ee7c:	b160      	cbz	r0, ee98 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    ee7e:	4669      	mov	r1, sp
    ee80:	4628      	mov	r0, r5
    ee82:	f7fe fd5a 	bl	d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ee86:	2800      	cmp	r0, #0
    ee88:	d105      	bne.n	ee96 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    ee8a:	2101      	movs	r1, #1
    ee8c:	4622      	mov	r2, r4
    ee8e:	9801      	ldr	r0, [sp, #4]
    ee90:	f000 fa74 	bl	f37c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    ee94:	2000      	movs	r0, #0
    ee96:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ee98:	2001      	movs	r0, #1
    ee9a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ee9c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    ee9c:	b510      	push	{r4, lr}
    ee9e:	4604      	mov	r4, r0
    eea0:	2000      	movs	r0, #0
    eea2:	f000 f8fe 	bl	f0a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    eea6:	b128      	cbz	r0, eeb4 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    eea8:	4621      	mov	r1, r4
    eeaa:	2000      	movs	r0, #0
    eeac:	f7f5 fd80 	bl	49b0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    eeb0:	2000      	movs	r0, #0
    eeb2:	bd10      	pop	{r4, pc}
    eeb4:	200c      	movs	r0, #12
    eeb6:	bd10      	pop	{r4, pc}

0000eeb8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    eeb8:	b510      	push	{r4, lr}
    eeba:	7800      	ldrb	r0, [r0, #0]
    eebc:	f000 0001 	and.w	r0, r0, #1
    eec0:	f7f8 fd00 	bl	78c4 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>
    eec4:	2000      	movs	r0, #0
    eec6:	bd10      	pop	{r4, pc}

0000eec8 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    eec8:	b510      	push	{r4, lr}
    eeca:	4604      	mov	r4, r0
    eecc:	f000 fad2 	bl	f474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    eed0:	b120      	cbz	r0, eedc <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    eed2:	4620      	mov	r0, r4
    eed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eed8:	f000 baf4 	b.w	f4c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    eedc:	2001      	movs	r0, #1
    eede:	bd10      	pop	{r4, pc}

0000eee0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    eee0:	b510      	push	{r4, lr}
    eee2:	4604      	mov	r4, r0
    eee4:	8880      	ldrh	r0, [r0, #4]
    eee6:	b128      	cbz	r0, eef4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    eee8:	2801      	cmp	r0, #1
    eeea:	d003      	beq.n	eef4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    eeec:	2802      	cmp	r0, #2
    eeee:	d001      	beq.n	eef4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    eef0:	2012      	movs	r0, #18
    eef2:	bd10      	pop	{r4, pc}
    eef4:	78e0      	ldrb	r0, [r4, #3]
    eef6:	f000 f8e0 	bl	f0ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    eefa:	b148      	cbz	r0, ef10 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    eefc:	78a0      	ldrb	r0, [r4, #2]
    eefe:	f000 f8dc 	bl	f0ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    ef02:	b128      	cbz	r0, ef10 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    ef04:	4620      	mov	r0, r4
    ef06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef0a:	2101      	movs	r1, #1
    ef0c:	f7fb be16 	b.w	ab3c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    ef10:	2011      	movs	r0, #17
    ef12:	bd10      	pop	{r4, pc}

0000ef14 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    ef14:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef16:	460c      	mov	r4, r1
    ef18:	4605      	mov	r5, r0
    ef1a:	8800      	ldrh	r0, [r0, #0]
    ef1c:	4669      	mov	r1, sp
    ef1e:	f7fe fd0c 	bl	d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef22:	2800      	cmp	r0, #0
    ef24:	d106      	bne.n	ef34 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    ef26:	9801      	ldr	r0, [sp, #4]
    ef28:	8829      	ldrh	r1, [r5, #0]
    ef2a:	8021      	strh	r1, [r4, #0]
    ef2c:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
    ef30:	8060      	strh	r0, [r4, #2]
    ef32:	2000      	movs	r0, #0
    ef34:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ef36 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    ef36:	b510      	push	{r4, lr}
    ef38:	4604      	mov	r4, r0
    ef3a:	4601      	mov	r1, r0
    ef3c:	2000      	movs	r0, #0
    ef3e:	f7f5 fd1f 	bl	4980 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    ef42:	b910      	cbnz	r0, ef4a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    ef44:	2000      	movs	r0, #0
    ef46:	6020      	str	r0, [r4, #0]
    ef48:	80a0      	strh	r0, [r4, #4]
    ef4a:	2000      	movs	r0, #0
    ef4c:	bd10      	pop	{r4, pc}

0000ef4e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    ef4e:	b51c      	push	{r2, r3, r4, lr}
    ef50:	8800      	ldrh	r0, [r0, #0]
    ef52:	4669      	mov	r1, sp
    ef54:	f7fe fcf1 	bl	d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef58:	b968      	cbnz	r0, ef76 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    ef5a:	4668      	mov	r0, sp
    ef5c:	f000 fa90 	bl	f480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x45e>
    ef60:	b148      	cbz	r0, ef76 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    ef62:	9801      	ldr	r0, [sp, #4]
    ef64:	2201      	movs	r2, #1
    ef66:	4601      	mov	r1, r0
    ef68:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
    ef6c:	3078      	adds	r0, #120	; 0x78
    ef6e:	f501 71ac 	add.w	r1, r1, #344	; 0x158
    ef72:	b92b      	cbnz	r3, ef80 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    ef74:	e001      	b.n	ef7a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    ef76:	2002      	movs	r0, #2
    ef78:	bd1c      	pop	{r2, r3, r4, pc}
    ef7a:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
    ef7e:	b10b      	cbz	r3, ef84 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x36>
    ef80:	203a      	movs	r0, #58	; 0x3a
    ef82:	bd1c      	pop	{r2, r3, r4, pc}
    ef84:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    ef88:	079b      	lsls	r3, r3, #30
    ef8a:	d100      	bne.n	ef8e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x40>
    ef8c:	700a      	strb	r2, [r1, #0]
    ef8e:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
    ef92:	2000      	movs	r0, #0
    ef94:	bd1c      	pop	{r2, r3, r4, pc}

0000ef96 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    ef96:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef98:	460c      	mov	r4, r1
    ef9a:	4605      	mov	r5, r0
    ef9c:	8800      	ldrh	r0, [r0, #0]
    ef9e:	4669      	mov	r1, sp
    efa0:	f7fe fccb 	bl	d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    efa4:	b108      	cbz	r0, efaa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    efa6:	2002      	movs	r0, #2
    efa8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    efaa:	78a8      	ldrb	r0, [r5, #2]
    efac:	b130      	cbz	r0, efbc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    efae:	f000 fa42 	bl	f436 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x414>
    efb2:	70a0      	strb	r0, [r4, #2]
    efb4:	8828      	ldrh	r0, [r5, #0]
    efb6:	8020      	strh	r0, [r4, #0]
    efb8:	2000      	movs	r0, #0
    efba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    efbc:	9801      	ldr	r0, [sp, #4]
    efbe:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    efc2:	e7f6      	b.n	efb2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000efc4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    efc4:	b510      	push	{r4, lr}
    efc6:	f7fb ff63 	bl	ae90 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    efca:	2000      	movs	r0, #0
    efcc:	bd10      	pop	{r4, pc}

0000efce <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    efce:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    efd2:	4604      	mov	r4, r0
    efd4:	8840      	ldrh	r0, [r0, #2]
    efd6:	460d      	mov	r5, r1
    efd8:	b1b8      	cbz	r0, f00a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    efda:	8820      	ldrh	r0, [r4, #0]
    efdc:	4669      	mov	r1, sp
    efde:	f7fe fcac 	bl	d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    efe2:	2800      	cmp	r0, #0
    efe4:	d10f      	bne.n	f006 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    efe6:	8820      	ldrh	r0, [r4, #0]
    efe8:	8028      	strh	r0, [r5, #0]
    efea:	9e01      	ldr	r6, [sp, #4]
    efec:	f106 050c 	add.w	r5, r6, #12
    eff0:	3678      	adds	r6, #120	; 0x78
    eff2:	682f      	ldr	r7, [r5, #0]
    eff4:	8862      	ldrh	r2, [r4, #2]
    eff6:	4639      	mov	r1, r7
    eff8:	4630      	mov	r0, r6
    effa:	f7fe fe2e 	bl	dc5a <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    effe:	6828      	ldr	r0, [r5, #0]
    f000:	42b8      	cmp	r0, r7
    f002:	d1f6      	bne.n	eff2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    f004:	2000      	movs	r0, #0
    f006:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f00a:	2012      	movs	r0, #18
    f00c:	e7fb      	b.n	f006 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000f00e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    f00e:	f7fb bdfb 	b.w	ac08 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000f012 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f012:	b510      	push	{r4, lr}
    f014:	2008      	movs	r0, #8
    f016:	f7fb ffb9 	bl	af8c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f01a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f01e:	f7f9 bd51 	b.w	8ac4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

0000f022 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    f022:	b510      	push	{r4, lr}
    f024:	4604      	mov	r4, r0
    f026:	2000      	movs	r0, #0
    f028:	8822      	ldrh	r2, [r4, #0]
    f02a:	b086      	sub	sp, #24
    f02c:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    f030:	39ff      	subs	r1, #255	; 0xff
    f032:	d008      	beq.n	f046 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    f034:	a903      	add	r1, sp, #12
    f036:	4610      	mov	r0, r2
    f038:	f7fe fc7f 	bl	d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f03c:	b110      	cbz	r0, f044 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    f03e:	2002      	movs	r0, #2
    f040:	b006      	add	sp, #24
    f042:	bd10      	pop	{r4, pc}
    f044:	9804      	ldr	r0, [sp, #16]
    f046:	8921      	ldrh	r1, [r4, #8]
    f048:	89a3      	ldrh	r3, [r4, #12]
    f04a:	8962      	ldrh	r2, [r4, #10]
    f04c:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    f050:	88e3      	ldrh	r3, [r4, #6]
    f052:	88a2      	ldrh	r2, [r4, #4]
    f054:	8861      	ldrh	r1, [r4, #2]
    f056:	f000 f966 	bl	f326 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    f05a:	b108      	cbz	r0, f060 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    f05c:	2000      	movs	r0, #0
    f05e:	e7ef      	b.n	f040 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    f060:	2030      	movs	r0, #48	; 0x30
    f062:	e7ed      	b.n	f040 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    f064:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f068:	4288      	cmp	r0, r1
    f06a:	d303      	bcc.n	f074 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
    f06c:	f640 0148 	movw	r1, #2120	; 0x848
    f070:	4288      	cmp	r0, r1
    f072:	d300      	bcc.n	f076 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
    f074:	4608      	mov	r0, r1
    f076:	4770      	bx	lr
    f078:	07c1      	lsls	r1, r0, #31
    f07a:	d001      	beq.n	f080 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
    f07c:	2001      	movs	r0, #1
    f07e:	4770      	bx	lr
    f080:	0780      	lsls	r0, r0, #30
    f082:	d501      	bpl.n	f088 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
    f084:	2002      	movs	r0, #2
    f086:	4770      	bx	lr
    f088:	2000      	movs	r0, #0
    f08a:	4770      	bx	lr
    f08c:	b510      	push	{r4, lr}
    f08e:	2801      	cmp	r0, #1
    f090:	d006      	beq.n	f0a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    f092:	2802      	cmp	r0, #2
    f094:	d004      	beq.n	f0a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    f096:	f240 2163 	movw	r1, #611	; 0x263
    f09a:	2006      	movs	r0, #6
    f09c:	f7f4 fe2a 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0a0:	bd10      	pop	{r4, pc}
    f0a2:	b510      	push	{r4, lr}
    f0a4:	f000 fa03 	bl	f4ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f0a8:	b128      	cbz	r0, f0b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
    f0aa:	f7f7 fb95 	bl	67d8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    f0ae:	2801      	cmp	r0, #1
    f0b0:	d001      	beq.n	f0b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
    f0b2:	2000      	movs	r0, #0
    f0b4:	bd10      	pop	{r4, pc}
    f0b6:	2001      	movs	r0, #1
    f0b8:	bd10      	pop	{r4, pc}
    f0ba:	b510      	push	{r4, lr}
    f0bc:	0004      	movs	r4, r0
    f0be:	d005      	beq.n	f0cc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    f0c0:	f7fb ff74 	bl	afac <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f0c4:	4384      	bics	r4, r0
    f0c6:	d001      	beq.n	f0cc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    f0c8:	2000      	movs	r0, #0
    f0ca:	bd10      	pop	{r4, pc}
    f0cc:	2001      	movs	r0, #1
    f0ce:	bd10      	pop	{r4, pc}
    f0d0:	28fb      	cmp	r0, #251	; 0xfb
    f0d2:	d803      	bhi.n	f0dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xba>
    f0d4:	f640 0048 	movw	r0, #2120	; 0x848
    f0d8:	4281      	cmp	r1, r0
    f0da:	d901      	bls.n	f0e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xbe>
    f0dc:	2011      	movs	r0, #17
    f0de:	4770      	bx	lr
    f0e0:	2000      	movs	r0, #0
    f0e2:	4770      	bx	lr
    f0e4:	381b      	subs	r0, #27
    f0e6:	28e1      	cmp	r0, #225	; 0xe1
    f0e8:	d206      	bcs.n	f0f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
    f0ea:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f0ee:	d303      	bcc.n	f0f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
    f0f0:	f244 2090 	movw	r0, #17040	; 0x4290
    f0f4:	4281      	cmp	r1, r0
    f0f6:	d901      	bls.n	f0fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xda>
    f0f8:	2012      	movs	r0, #18
    f0fa:	4770      	bx	lr
    f0fc:	2000      	movs	r0, #0
    f0fe:	4770      	bx	lr
    f100:	b510      	push	{r4, lr}
    f102:	4604      	mov	r4, r0
    f104:	7800      	ldrb	r0, [r0, #0]
    f106:	2801      	cmp	r0, #1
    f108:	d009      	beq.n	f11e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfc>
    f10a:	f7f8 fc73 	bl	79f4 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
    f10e:	2805      	cmp	r0, #5
    f110:	d003      	beq.n	f11a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf8>
    f112:	f7f8 fc39 	bl	7988 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
    f116:	2800      	cmp	r0, #0
    f118:	d000      	beq.n	f11c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfa>
    f11a:	200c      	movs	r0, #12
    f11c:	bd10      	pop	{r4, pc}
    f11e:	f7f7 fae9 	bl	66f4 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    f122:	b138      	cbz	r0, f134 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x112>
    f124:	f7f7 f962 	bl	63ec <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    f128:	88a1      	ldrh	r1, [r4, #4]
    f12a:	8860      	ldrh	r0, [r4, #2]
    f12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f130:	f7f8 bbee 	b.w	7910 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA>
    f134:	2012      	movs	r0, #18
    f136:	bd10      	pop	{r4, pc}
    f138:	7802      	ldrb	r2, [r0, #0]
    f13a:	2a01      	cmp	r2, #1
    f13c:	d001      	beq.n	f142 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x120>
    f13e:	b1ba      	cbz	r2, f170 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f140:	e018      	b.n	f174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f142:	7842      	ldrb	r2, [r0, #1]
    f144:	b13a      	cbz	r2, f156 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
    f146:	2a01      	cmp	r2, #1
    f148:	d005      	beq.n	f156 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
    f14a:	2a02      	cmp	r2, #2
    f14c:	d112      	bne.n	f174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f14e:	b189      	cbz	r1, f174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f150:	8881      	ldrh	r1, [r0, #4]
    f152:	b179      	cbz	r1, f174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f154:	e000      	b.n	f158 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x136>
    f156:	b159      	cbz	r1, f170 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f158:	8841      	ldrh	r1, [r0, #2]
    f15a:	b149      	cbz	r1, f170 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f15c:	8880      	ldrh	r0, [r0, #4]
    f15e:	b138      	cbz	r0, f170 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f160:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f164:	0049      	lsls	r1, r1, #1
    f166:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f16a:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    f16e:	d201      	bcs.n	f174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f170:	2000      	movs	r0, #0
    f172:	4770      	bx	lr
    f174:	2012      	movs	r0, #18
    f176:	4770      	bx	lr
    f178:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    f17c:	7a45      	ldrb	r5, [r0, #9]
    f17e:	4604      	mov	r4, r0
    f180:	0768      	lsls	r0, r5, #29
    f182:	d06c      	beq.n	f25e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f184:	08e8      	lsrs	r0, r5, #3
    f186:	d16a      	bne.n	f25e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f188:	2d02      	cmp	r5, #2
    f18a:	d068      	beq.n	f25e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f18c:	f7fb ff0e 	bl	afac <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f190:	ea25 0000 	bic.w	r0, r5, r0
    f194:	0740      	lsls	r0, r0, #29
    f196:	d102      	bne.n	f19e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17c>
    f198:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    f19c:	b110      	cbz	r0, f1a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x182>
    f19e:	2011      	movs	r0, #17
    f1a0:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    f1a4:	2d01      	cmp	r5, #1
    f1a6:	d15a      	bne.n	f25e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f1a8:	27ff      	movs	r7, #255	; 0xff
    f1aa:	2101      	movs	r1, #1
    f1ac:	69a0      	ldr	r0, [r4, #24]
    f1ae:	f7fb fe1d 	bl	adec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
    f1b2:	b3e8      	cbz	r0, f230 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
    f1b4:	46a8      	mov	r8, r5
    f1b6:	2600      	movs	r6, #0
    f1b8:	4635      	mov	r5, r6
    f1ba:	42bd      	cmp	r5, r7
    f1bc:	d02f      	beq.n	f21e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
    f1be:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    f1c2:	6988      	ldr	r0, [r1, #24]
    f1c4:	68c9      	ldr	r1, [r1, #12]
    f1c6:	4288      	cmp	r0, r1
    f1c8:	d849      	bhi.n	f25e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f1ca:	4406      	add	r6, r0
    f1cc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    f1d0:	4681      	mov	r9, r0
    f1d2:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
    f1d4:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    f1d8:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    f1da:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    f1de:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    f1e0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    f1e2:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    f1e4:	2000      	movs	r0, #0
    f1e6:	f000 f89e 	bl	f326 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    f1ea:	b308      	cbz	r0, f230 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
    f1ec:	b1bd      	cbz	r5, f21e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
    f1ee:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
    f1f2:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
    f1f6:	4281      	cmp	r1, r0
    f1f8:	d131      	bne.n	f25e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f1fa:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
    f1fe:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
    f202:	4281      	cmp	r1, r0
    f204:	d12b      	bne.n	f25e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f206:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
    f20a:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
    f20e:	4281      	cmp	r1, r0
    f210:	d125      	bne.n	f25e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f212:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
    f216:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
    f21a:	4281      	cmp	r1, r0
    f21c:	d11f      	bne.n	f25e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f21e:	1c6d      	adds	r5, r5, #1
    f220:	b2ed      	uxtb	r5, r5
    f222:	4545      	cmp	r5, r8
    f224:	d3c9      	bcc.n	f1ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x198>
    f226:	68e0      	ldr	r0, [r4, #12]
    f228:	42b0      	cmp	r0, r6
    f22a:	d318      	bcc.n	f25e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f22c:	7820      	ldrb	r0, [r4, #0]
    f22e:	e000      	b.n	f232 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
    f230:	e003      	b.n	f23a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x218>
    f232:	b120      	cbz	r0, f23e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21c>
    f234:	2801      	cmp	r0, #1
    f236:	d112      	bne.n	f25e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f238:	e004      	b.n	f244 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
    f23a:	2030      	movs	r0, #48	; 0x30
    f23c:	e7b0      	b.n	f1a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f23e:	78a0      	ldrb	r0, [r4, #2]
    f240:	2800      	cmp	r0, #0
    f242:	d1f7      	bne.n	f234 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x212>
    f244:	7860      	ldrb	r0, [r4, #1]
    f246:	b128      	cbz	r0, f254 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f248:	2801      	cmp	r0, #1
    f24a:	d003      	beq.n	f254 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f24c:	2802      	cmp	r0, #2
    f24e:	d001      	beq.n	f254 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f250:	2803      	cmp	r0, #3
    f252:	d104      	bne.n	f25e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f254:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    f258:	b108      	cbz	r0, f25e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f25a:	2807      	cmp	r0, #7
    f25c:	d901      	bls.n	f262 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
    f25e:	2012      	movs	r0, #18
    f260:	e79e      	b.n	f1a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f262:	2000      	movs	r0, #0
    f264:	e79c      	b.n	f1a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f266:	b570      	push	{r4, r5, r6, lr}
    f268:	4604      	mov	r4, r0
    f26a:	7800      	ldrb	r0, [r0, #0]
    f26c:	2500      	movs	r5, #0
    f26e:	2801      	cmp	r0, #1
    f270:	d004      	beq.n	f27c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f272:	b118      	cbz	r0, f27c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f274:	2802      	cmp	r0, #2
    f276:	d001      	beq.n	f27c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f278:	2803      	cmp	r0, #3
    f27a:	d139      	bne.n	f2f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f27c:	7860      	ldrb	r0, [r4, #1]
    f27e:	b128      	cbz	r0, f28c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f280:	2801      	cmp	r0, #1
    f282:	d003      	beq.n	f28c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f284:	2802      	cmp	r0, #2
    f286:	d001      	beq.n	f28c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f288:	2803      	cmp	r0, #3
    f28a:	d131      	bne.n	f2f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f28c:	7e60      	ldrb	r0, [r4, #25]
    f28e:	b948      	cbnz	r0, f2a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
    f290:	78a0      	ldrb	r0, [r4, #2]
    f292:	2801      	cmp	r0, #1
    f294:	d12c      	bne.n	f2f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f296:	f7fb fe89 	bl	afac <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f29a:	4601      	mov	r1, r0
    f29c:	78a0      	ldrb	r0, [r4, #2]
    f29e:	ea30 0101 	bics.w	r1, r0, r1
    f2a2:	d001      	beq.n	f2a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
    f2a4:	2011      	movs	r0, #17
    f2a6:	bd70      	pop	{r4, r5, r6, pc}
    f2a8:	07c0      	lsls	r0, r0, #31
    f2aa:	d006      	beq.n	f2ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
    f2ac:	78e0      	ldrb	r0, [r4, #3]
    f2ae:	2301      	movs	r3, #1
    f2b0:	6922      	ldr	r2, [r4, #16]
    f2b2:	68a1      	ldr	r1, [r4, #8]
    f2b4:	f000 f820 	bl	f2f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f2b8:	4605      	mov	r5, r0
    f2ba:	78a0      	ldrb	r0, [r4, #2]
    f2bc:	0780      	lsls	r0, r0, #30
    f2be:	d506      	bpl.n	f2ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ac>
    f2c0:	78e0      	ldrb	r0, [r4, #3]
    f2c2:	2302      	movs	r3, #2
    f2c4:	6922      	ldr	r2, [r4, #16]
    f2c6:	68a1      	ldr	r1, [r4, #8]
    f2c8:	f000 f816 	bl	f2f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f2cc:	4305      	orrs	r5, r0
    f2ce:	78a0      	ldrb	r0, [r4, #2]
    f2d0:	0740      	lsls	r0, r0, #29
    f2d2:	d506      	bpl.n	f2e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c0>
    f2d4:	78e0      	ldrb	r0, [r4, #3]
    f2d6:	2304      	movs	r3, #4
    f2d8:	6922      	ldr	r2, [r4, #16]
    f2da:	68a1      	ldr	r1, [r4, #8]
    f2dc:	f000 f80c 	bl	f2f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f2e0:	4305      	orrs	r5, r0
    f2e2:	b10d      	cbz	r5, f2e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
    f2e4:	4628      	mov	r0, r5
    f2e6:	bd70      	pop	{r4, r5, r6, pc}
    f2e8:	7e20      	ldrb	r0, [r4, #24]
    f2ea:	b108      	cbz	r0, f2f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f2ec:	2807      	cmp	r0, #7
    f2ee:	d901      	bls.n	f2f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
    f2f0:	2012      	movs	r0, #18
    f2f2:	bd70      	pop	{r4, r5, r6, pc}
    f2f4:	2000      	movs	r0, #0
    f2f6:	bd70      	pop	{r4, r5, r6, pc}
    f2f8:	b570      	push	{r4, r5, r6, lr}
    f2fa:	4614      	mov	r4, r2
    f2fc:	460d      	mov	r5, r1
    f2fe:	b108      	cbz	r0, f304 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e2>
    f300:	2801      	cmp	r0, #1
    f302:	d10a      	bne.n	f31a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f8>
    f304:	4619      	mov	r1, r3
    f306:	4610      	mov	r0, r2
    f308:	f7fb fd70 	bl	adec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
    f30c:	b138      	cbz	r0, f31e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
    f30e:	4628      	mov	r0, r5
    f310:	f7fb fd34 	bl	ad7c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    f314:	b118      	cbz	r0, f31e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
    f316:	42ac      	cmp	r4, r5
    f318:	d903      	bls.n	f322 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
    f31a:	2012      	movs	r0, #18
    f31c:	bd70      	pop	{r4, r5, r6, pc}
    f31e:	2030      	movs	r0, #48	; 0x30
    f320:	bd70      	pop	{r4, r5, r6, pc}
    f322:	2000      	movs	r0, #0
    f324:	bd70      	pop	{r4, r5, r6, pc}
    f326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f32a:	461d      	mov	r5, r3
    f32c:	4610      	mov	r0, r2
    f32e:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    f332:	1f8b      	subs	r3, r1, #6
    f334:	f640 427a 	movw	r2, #3194	; 0xc7a
    f338:	9e08      	ldr	r6, [sp, #32]
    f33a:	4293      	cmp	r3, r2
    f33c:	d81c      	bhi.n	f378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f33e:	1f83      	subs	r3, r0, #6
    f340:	4293      	cmp	r3, r2
    f342:	d819      	bhi.n	f378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f344:	4281      	cmp	r1, r0
    f346:	d817      	bhi.n	f378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f348:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    f34c:	d214      	bcs.n	f378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f34e:	f1a4 010a 	sub.w	r1, r4, #10
    f352:	1f12      	subs	r2, r2, #4
    f354:	4291      	cmp	r1, r2
    f356:	d80f      	bhi.n	f378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f358:	f7fe fafb 	bl	d952 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    f35c:	1c6d      	adds	r5, r5, #1
    f35e:	4368      	muls	r0, r5
    f360:	f240 2171 	movw	r1, #625	; 0x271
    f364:	0040      	lsls	r0, r0, #1
    f366:	434c      	muls	r4, r1
    f368:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    f36c:	d204      	bcs.n	f378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f36e:	42b7      	cmp	r7, r6
    f370:	d802      	bhi.n	f378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f372:	2001      	movs	r0, #1
    f374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f378:	2000      	movs	r0, #0
    f37a:	e7fb      	b.n	f374 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x352>
    f37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f380:	4606      	mov	r6, r0
    f382:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    f386:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    f38a:	4615      	mov	r5, r2
    f38c:	302c      	adds	r0, #44	; 0x2c
    f38e:	f7f8 fa9f 	bl	78d0 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>
    f392:	4680      	mov	r8, r0
    f394:	2102      	movs	r1, #2
    f396:	f7fe fb6a 	bl	da6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f39a:	4287      	cmp	r7, r0
    f39c:	d200      	bcs.n	f3a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
    f39e:	4638      	mov	r0, r7
    f3a0:	4607      	mov	r7, r0
    f3a2:	2102      	movs	r1, #2
    f3a4:	4640      	mov	r0, r8
    f3a6:	f7fe fb62 	bl	da6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f3aa:	4284      	cmp	r4, r0
    f3ac:	d200      	bcs.n	f3b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
    f3ae:	4620      	mov	r0, r4
    f3b0:	8831      	ldrh	r1, [r6, #0]
    f3b2:	8029      	strh	r1, [r5, #0]
    f3b4:	2f1b      	cmp	r7, #27
    f3b6:	d913      	bls.n	f3e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
    f3b8:	2ffb      	cmp	r7, #251	; 0xfb
    f3ba:	d300      	bcc.n	f3be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
    f3bc:	27fb      	movs	r7, #251	; 0xfb
    f3be:	806f      	strh	r7, [r5, #2]
    f3c0:	281b      	cmp	r0, #27
    f3c2:	d90f      	bls.n	f3e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c2>
    f3c4:	28fb      	cmp	r0, #251	; 0xfb
    f3c6:	d300      	bcc.n	f3ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    f3c8:	20fb      	movs	r0, #251	; 0xfb
    f3ca:	80e8      	strh	r0, [r5, #6]
    f3cc:	4640      	mov	r0, r8
    f3ce:	f7ff fe49 	bl	f064 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    f3d2:	80a8      	strh	r0, [r5, #4]
    f3d4:	4640      	mov	r0, r8
    f3d6:	f7ff fe45 	bl	f064 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    f3da:	8128      	strh	r0, [r5, #8]
    f3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f3e0:	271b      	movs	r7, #27
    f3e2:	e7ec      	b.n	f3be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
    f3e4:	201b      	movs	r0, #27
    f3e6:	e7f0      	b.n	f3ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    f3e8:	b510      	push	{r4, lr}
    f3ea:	f000 f860 	bl	f4ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f3ee:	2800      	cmp	r0, #0
    f3f0:	d000      	beq.n	f3f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d2>
    f3f2:	2001      	movs	r0, #1
    f3f4:	bd10      	pop	{r4, pc}
    f3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3fa:	7890      	ldrb	r0, [r2, #2]
    f3fc:	9e06      	ldr	r6, [sp, #24]
    f3fe:	461d      	mov	r5, r3
    f400:	4614      	mov	r4, r2
    f402:	b908      	cbnz	r0, f408 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e6>
    f404:	f7fb fdd2 	bl	afac <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f408:	78e4      	ldrb	r4, [r4, #3]
    f40a:	4607      	mov	r7, r0
    f40c:	b914      	cbnz	r4, f414 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3f2>
    f40e:	f7fb fdcd 	bl	afac <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f412:	4604      	mov	r4, r0
    f414:	b16f      	cbz	r7, f432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
    f416:	b164      	cbz	r4, f432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
    f418:	4638      	mov	r0, r7
    f41a:	f7ff fe2d 	bl	f078 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    f41e:	4620      	mov	r0, r4
    f420:	f7ff fe2a 	bl	f078 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    f424:	b12f      	cbz	r7, f432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
    f426:	b124      	cbz	r4, f432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
    f428:	702f      	strb	r7, [r5, #0]
    f42a:	7034      	strb	r4, [r6, #0]
    f42c:	2000      	movs	r0, #0
    f42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f432:	2009      	movs	r0, #9
    f434:	e7fb      	b.n	f42e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x40c>
    f436:	b510      	push	{r4, lr}
    f438:	f7fd f808 	bl	c44c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    f43c:	b928      	cbnz	r0, f44a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x428>
    f43e:	f7fd f83b 	bl	c4b8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    f442:	b910      	cbnz	r0, f44a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x428>
    f444:	f7fd f842 	bl	c4cc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f448:	b108      	cbz	r0, f44e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42c>
    f44a:	2008      	movs	r0, #8
    f44c:	bd10      	pop	{r4, pc}
    f44e:	f7fc ffd2 	bl	c3f6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    f452:	b940      	cbnz	r0, f466 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f454:	f7fc ffd9 	bl	c40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    f458:	b928      	cbnz	r0, f466 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f45a:	f7fc ffed 	bl	c438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    f45e:	b910      	cbnz	r0, f466 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f460:	f7fc fffe 	bl	c460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f464:	b108      	cbz	r0, f46a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x448>
    f466:	2004      	movs	r0, #4
    f468:	bd10      	pop	{r4, pc}
    f46a:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    f46e:	2039      	movs	r0, #57	; 0x39
    f470:	f7f4 fc40 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f474:	b510      	push	{r4, lr}
    f476:	f7fb fd93 	bl	afa0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f47a:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f47e:	bd10      	pop	{r4, pc}
    f480:	6840      	ldr	r0, [r0, #4]
    f482:	f000 b800 	b.w	f486 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    f486:	b508      	push	{r3, lr}
    f488:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    f48c:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
    f490:	f88d 0000 	strb.w	r0, [sp]
    f494:	9800      	ldr	r0, [sp, #0]
    f496:	9000      	str	r0, [sp, #0]
    f498:	f89d 0000 	ldrb.w	r0, [sp]
    f49c:	1e40      	subs	r0, r0, #1
    f49e:	4208      	tst	r0, r1
    f4a0:	d003      	beq.n	f4aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x488>
    f4a2:	2904      	cmp	r1, #4
    f4a4:	d001      	beq.n	f4aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x488>
    f4a6:	2001      	movs	r0, #1
    f4a8:	bd08      	pop	{r3, pc}
    f4aa:	2000      	movs	r0, #0
    f4ac:	bd08      	pop	{r3, pc}
    f4ae:	b510      	push	{r4, lr}
    f4b0:	f7f8 faa0 	bl	79f4 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
    f4b4:	2804      	cmp	r0, #4
    f4b6:	d003      	beq.n	f4c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
    f4b8:	2805      	cmp	r0, #5
    f4ba:	d001      	beq.n	f4c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
    f4bc:	2000      	movs	r0, #0
    f4be:	bd10      	pop	{r4, pc}
    f4c0:	2001      	movs	r0, #1
    f4c2:	bd10      	pop	{r4, pc}
    f4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4c6:	b089      	sub	sp, #36	; 0x24
    f4c8:	4604      	mov	r4, r0
    f4ca:	8800      	ldrh	r0, [r0, #0]
    f4cc:	a906      	add	r1, sp, #24
    f4ce:	f7fe fa34 	bl	d93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f4d2:	2800      	cmp	r0, #0
    f4d4:	d143      	bne.n	f55e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f4d6:	9807      	ldr	r0, [sp, #28]
    f4d8:	2601      	movs	r6, #1
    f4da:	f890 119e 	ldrb.w	r1, [r0, #414]	; 0x19e
    f4de:	f88d 1008 	strb.w	r1, [sp, #8]
    f4e2:	9902      	ldr	r1, [sp, #8]
    f4e4:	9102      	str	r1, [sp, #8]
    f4e6:	f89d 1008 	ldrb.w	r1, [sp, #8]
    f4ea:	f88d 100c 	strb.w	r1, [sp, #12]
    f4ee:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    f4f2:	3078      	adds	r0, #120	; 0x78
    f4f4:	291d      	cmp	r1, #29
    f4f6:	d102      	bne.n	f4fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4dc>
    f4f8:	f89d 100c 	ldrb.w	r1, [sp, #12]
    f4fc:	b141      	cbz	r1, f510 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ee>
    f4fe:	2100      	movs	r1, #0
    f500:	f88d 1004 	strb.w	r1, [sp, #4]
    f504:	2105      	movs	r1, #5
    f506:	304e      	adds	r0, #78	; 0x4e
    f508:	f7ff fa0a 	bl	e920 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    f50c:	b110      	cbz	r0, f514 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f2>
    f50e:	e004      	b.n	f51a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f8>
    f510:	2101      	movs	r1, #1
    f512:	e7f5      	b.n	f500 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
    f514:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f518:	b300      	cbz	r0, f55c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53a>
    f51a:	8921      	ldrh	r1, [r4, #8]
    f51c:	88e0      	ldrh	r0, [r4, #6]
    f51e:	f7ff fde1 	bl	f0e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    f522:	2800      	cmp	r0, #0
    f524:	d11b      	bne.n	f55e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f526:	88a1      	ldrh	r1, [r4, #4]
    f528:	8860      	ldrh	r0, [r4, #2]
    f52a:	f7ff fddb 	bl	f0e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    f52e:	2800      	cmp	r0, #0
    f530:	d115      	bne.n	f55e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f532:	8921      	ldrh	r1, [r4, #8]
    f534:	88e0      	ldrh	r0, [r4, #6]
    f536:	f7ff fdcb 	bl	f0d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    f53a:	2800      	cmp	r0, #0
    f53c:	d10f      	bne.n	f55e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f53e:	88a1      	ldrh	r1, [r4, #4]
    f540:	8860      	ldrh	r0, [r4, #2]
    f542:	f7ff fdc5 	bl	f0d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    f546:	0007      	movs	r7, r0
    f548:	d109      	bne.n	f55e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f54a:	9807      	ldr	r0, [sp, #28]
    f54c:	f500 7599 	add.w	r5, r0, #306	; 0x132
    f550:	706e      	strb	r6, [r5, #1]
    f552:	f89d 100c 	ldrb.w	r1, [sp, #12]
    f556:	b121      	cbz	r1, f562 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x540>
    f558:	273a      	movs	r7, #58	; 0x3a
    f55a:	e02d      	b.n	f5b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x596>
    f55c:	201a      	movs	r0, #26
    f55e:	b009      	add	sp, #36	; 0x24
    f560:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f562:	4631      	mov	r1, r6
    f564:	aa03      	add	r2, sp, #12
    f566:	f7ff ff09 	bl	f37c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    f56a:	8861      	ldrh	r1, [r4, #2]
    f56c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    f570:	4281      	cmp	r1, r0
    f572:	d200      	bcs.n	f576 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x554>
    f574:	4608      	mov	r0, r1
    f576:	80e8      	strh	r0, [r5, #6]
    f578:	88a1      	ldrh	r1, [r4, #4]
    f57a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    f57e:	4281      	cmp	r1, r0
    f580:	d200      	bcs.n	f584 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x562>
    f582:	4608      	mov	r0, r1
    f584:	8128      	strh	r0, [r5, #8]
    f586:	88e2      	ldrh	r2, [r4, #6]
    f588:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    f58c:	428a      	cmp	r2, r1
    f58e:	d200      	bcs.n	f592 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x570>
    f590:	4611      	mov	r1, r2
    f592:	8069      	strh	r1, [r5, #2]
    f594:	8922      	ldrh	r2, [r4, #8]
    f596:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    f59a:	428a      	cmp	r2, r1
    f59c:	d200      	bcs.n	f5a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x57e>
    f59e:	4611      	mov	r1, r2
    f5a0:	f640 0248 	movw	r2, #2120	; 0x848
    f5a4:	80a9      	strh	r1, [r5, #4]
    f5a6:	4291      	cmp	r1, r2
    f5a8:	d300      	bcc.n	f5ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x58a>
    f5aa:	4611      	mov	r1, r2
    f5ac:	80a9      	strh	r1, [r5, #4]
    f5ae:	4290      	cmp	r0, r2
    f5b0:	d200      	bcs.n	f5b4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x592>
    f5b2:	4602      	mov	r2, r0
    f5b4:	812a      	strh	r2, [r5, #8]
    f5b6:	702e      	strb	r6, [r5, #0]
    f5b8:	2000      	movs	r0, #0
    f5ba:	7068      	strb	r0, [r5, #1]
    f5bc:	4638      	mov	r0, r7
    f5be:	e7ce      	b.n	f55e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f5c0:	b530      	push	{r4, r5, lr}
    f5c2:	f340 0400 	sbfx	r4, r0, #0, #1
    f5c6:	f340 0040 	sbfx	r0, r0, #1, #1
    f5ca:	1c40      	adds	r0, r0, #1
    f5cc:	9d03      	ldr	r5, [sp, #12]
    f5ce:	1c64      	adds	r4, r4, #1
    f5d0:	d000      	beq.n	f5d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b2>
    f5d2:	b119      	cbz	r1, f5dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
    f5d4:	b100      	cbz	r0, f5d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b6>
    f5d6:	b10a      	cbz	r2, f5dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
    f5d8:	b91c      	cbnz	r4, f5e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c0>
    f5da:	e001      	b.n	f5e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5be>
    f5dc:	2011      	movs	r0, #17
    f5de:	bd30      	pop	{r4, r5, pc}
    f5e0:	2100      	movs	r1, #0
    f5e2:	7019      	strb	r1, [r3, #0]
    f5e4:	b900      	cbnz	r0, f5e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c6>
    f5e6:	2200      	movs	r2, #0
    f5e8:	702a      	strb	r2, [r5, #0]
    f5ea:	2000      	movs	r0, #0
    f5ec:	bd30      	pop	{r4, r5, pc}
    f5ee:	b510      	push	{r4, lr}
    f5f0:	f7ff ff5d 	bl	f4ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f5f4:	b120      	cbz	r0, f600 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
    f5f6:	f7f7 f8f7 	bl	67e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
    f5fa:	b108      	cbz	r0, f600 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
    f5fc:	2001      	movs	r0, #1
    f5fe:	bd10      	pop	{r4, pc}
    f600:	2000      	movs	r0, #0
    f602:	bd10      	pop	{r4, pc}

0000f604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    f604:	6802      	ldr	r2, [r0, #0]
    f606:	b912      	cbnz	r2, f60e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    f608:	6001      	str	r1, [r0, #0]
    f60a:	4770      	bx	lr
    f60c:	4602      	mov	r2, r0
    f60e:	6850      	ldr	r0, [r2, #4]
    f610:	b108      	cbz	r0, f616 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    f612:	428a      	cmp	r2, r1
    f614:	d1fa      	bne.n	f60c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    f616:	428a      	cmp	r2, r1
    f618:	d0f7      	beq.n	f60a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    f61a:	6051      	str	r1, [r2, #4]
    f61c:	4770      	bx	lr
    f61e:	b510      	push	{r4, lr}
    f620:	4604      	mov	r4, r0
    f622:	e002      	b.n	f62a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    f624:	6820      	ldr	r0, [r4, #0]
    f626:	4780      	blx	r0
    f628:	6864      	ldr	r4, [r4, #4]
    f62a:	2c00      	cmp	r4, #0
    f62c:	d1fa      	bne.n	f624 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x20>
    f62e:	bd10      	pop	{r4, pc}
    f630:	b510      	push	{r4, lr}
    f632:	2000      	movs	r0, #0
    f634:	f7f4 fd26 	bl	4084 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    f638:	f7f4 ff46 	bl	44c8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    f63c:	f7f5 f982 	bl	4944 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    f640:	f7f5 fb74 	bl	4d2c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    f644:	2800      	cmp	r0, #0
    f646:	d003      	beq.n	f650 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4c>
    f648:	21d0      	movs	r1, #208	; 0xd0
    f64a:	2001      	movs	r0, #1
    f64c:	f7f4 fb52 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f650:	bd10      	pop	{r4, pc}
    f652:	b510      	push	{r4, lr}
    f654:	f000 f80a 	bl	f66c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    f658:	f7ff f84b 	bl	e6f2 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
    f65c:	2800      	cmp	r0, #0
    f65e:	d004      	beq.n	f66a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
    f660:	f240 1155 	movw	r1, #341	; 0x155
    f664:	2001      	movs	r0, #1
    f666:	f7f4 fb45 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f66a:	bd10      	pop	{r4, pc}
    f66c:	b510      	push	{r4, lr}
    f66e:	f7f8 f943 	bl	78f8 <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>
    f672:	b120      	cbz	r0, f67e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x7a>
    f674:	f240 113b 	movw	r1, #315	; 0x13b
    f678:	2001      	movs	r0, #1
    f67a:	f7f4 fb3b 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f67e:	f7f7 f803 	bl	6688 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    f682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f686:	f7fa bf59 	b.w	a53c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
    f68a:	0001      	.short	0x0001
    f68c:	0002000b 	.word	0x0002000b
    f690:	0005000a 	.word	0x0005000a
    f694:	000a0009 	.word	0x000a0009
    f698:	00140008 	.word	0x00140008
    f69c:	001e0007 	.word	0x001e0007
    f6a0:	00320006 	.word	0x00320006
    f6a4:	004b0005 	.word	0x004b0005
    f6a8:	00640004 	.word	0x00640004
    f6ac:	00960003 	.word	0x00960003
    f6b0:	00fa0002 	.word	0x00fa0002
    f6b4:	01f40001 	.word	0x01f40001
	...

0000f6ba <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    f6ba:	b510      	push	{r4, lr}
    f6bc:	f7fc f82a 	bl	b714 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    f6c0:	f000 f850 	bl	f764 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    f6c4:	f7fb fce6 	bl	b094 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    f6c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6cc:	f7fb bde4 	b.w	b298 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000f6d0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    f6d0:	b510      	push	{r4, lr}
    f6d2:	24c8      	movs	r4, #200	; 0xc8
    f6d4:	1e64      	subs	r4, r4, #1
    f6d6:	b2e4      	uxtb	r4, r4
    f6d8:	f7fb fcfa 	bl	b0d0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    f6dc:	2802      	cmp	r0, #2
    f6de:	d003      	beq.n	f6e8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    f6e0:	2801      	cmp	r0, #1
    f6e2:	d000      	beq.n	f6e6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    f6e4:	2000      	movs	r0, #0
    f6e6:	bd10      	pop	{r4, pc}
    f6e8:	2c00      	cmp	r4, #0
    f6ea:	d1f3      	bne.n	f6d4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    f6ec:	2193      	movs	r1, #147	; 0x93
    f6ee:	203b      	movs	r0, #59	; 0x3b
    f6f0:	f7f4 fb00 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f6f4 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    f6f4:	b510      	push	{r4, lr}
    f6f6:	f7f4 f997 	bl	3a28 <mpsl_fem_lna_configuration_clear>
    f6fa:	2800      	cmp	r0, #0
    f6fc:	d005      	beq.n	f70a <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f6fe:	1c40      	adds	r0, r0, #1
    f700:	d003      	beq.n	f70a <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f702:	2150      	movs	r1, #80	; 0x50
    f704:	2040      	movs	r0, #64	; 0x40
    f706:	f7f4 faf5 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f70a:	bd10      	pop	{r4, pc}

0000f70c <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    f70c:	b510      	push	{r4, lr}
    f70e:	f7f4 f997 	bl	3a40 <mpsl_fem_pa_configuration_clear>
    f712:	2800      	cmp	r0, #0
    f714:	d005      	beq.n	f722 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f716:	1c40      	adds	r0, r0, #1
    f718:	d003      	beq.n	f722 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f71a:	2149      	movs	r1, #73	; 0x49
    f71c:	2040      	movs	r0, #64	; 0x40
    f71e:	f7f4 fae9 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f722:	bd10      	pop	{r4, pc}

0000f724 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    f724:	b510      	push	{r4, lr}
    f726:	f7f4 f979 	bl	3a1c <mpsl_fem_disable>
    f72a:	2800      	cmp	r0, #0
    f72c:	d005      	beq.n	f73a <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f72e:	1c40      	adds	r0, r0, #1
    f730:	d003      	beq.n	f73a <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f732:	2157      	movs	r1, #87	; 0x57
    f734:	2040      	movs	r0, #64	; 0x40
    f736:	f7f4 fadd 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f73a:	bd10      	pop	{r4, pc}

0000f73c <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    f73c:	b510      	push	{r4, lr}
    f73e:	2100      	movs	r1, #0
    f740:	4608      	mov	r0, r1
    f742:	f7f4 f977 	bl	3a34 <mpsl_fem_lna_configuration_set>
    f746:	b108      	cbz	r0, f74c <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    f748:	2000      	movs	r0, #0
    f74a:	bd10      	pop	{r4, pc}
    f74c:	2001      	movs	r0, #1
    f74e:	bd10      	pop	{r4, pc}

0000f750 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    f750:	b508      	push	{r3, lr}
    f752:	4668      	mov	r0, sp
    f754:	f7f4 f980 	bl	3a58 <mpsl_fem_pa_is_configured>
    f758:	f89d 0000 	ldrb.w	r0, [sp]
    f75c:	2800      	cmp	r0, #0
    f75e:	d000      	beq.n	f762 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    f760:	2001      	movs	r0, #1
    f762:	bd08      	pop	{r3, pc}

0000f764 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    f764:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f768:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f76c:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    f770:	f3bf 8f4f 	dsb	sy
    f774:	f3bf 8f6f 	isb	sy
    f778:	f7fb be68 	b.w	b44c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    f77c:	2800      	cmp	r0, #0
    f77e:	db09      	blt.n	f794 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    f780:	f000 021f 	and.w	r2, r0, #31
    f784:	2101      	movs	r1, #1
    f786:	4091      	lsls	r1, r2
    f788:	0940      	lsrs	r0, r0, #5
    f78a:	0080      	lsls	r0, r0, #2
    f78c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f790:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f794:	4770      	bx	lr
    f796:	2800      	cmp	r0, #0
    f798:	db0d      	blt.n	f7b6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    f79a:	f000 021f 	and.w	r2, r0, #31
    f79e:	2101      	movs	r1, #1
    f7a0:	4091      	lsls	r1, r2
    f7a2:	0940      	lsrs	r0, r0, #5
    f7a4:	0080      	lsls	r0, r0, #2
    f7a6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f7aa:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    f7ae:	f3bf 8f4f 	dsb	sy
    f7b2:	f3bf 8f6f 	isb	sy
    f7b6:	4770      	bx	lr

0000f7b8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    f7b8:	b510      	push	{r4, lr}
    f7ba:	2801      	cmp	r0, #1
    f7bc:	d006      	beq.n	f7cc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    f7be:	2802      	cmp	r0, #2
    f7c0:	d006      	beq.n	f7d0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    f7c2:	f640 3164 	movw	r1, #2916	; 0xb64
    f7c6:	203e      	movs	r0, #62	; 0x3e
    f7c8:	f7f4 fa94 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7cc:	2028      	movs	r0, #40	; 0x28
    f7ce:	bd10      	pop	{r4, pc}
    f7d0:	2018      	movs	r0, #24
    f7d2:	bd10      	pop	{r4, pc}

0000f7d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    f7d4:	b510      	push	{r4, lr}
    f7d6:	2801      	cmp	r0, #1
    f7d8:	d006      	beq.n	f7e8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    f7da:	2802      	cmp	r0, #2
    f7dc:	d007      	beq.n	f7ee <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    f7de:	f640 3178 	movw	r1, #2936	; 0xb78
    f7e2:	203e      	movs	r0, #62	; 0x3e
    f7e4:	f7f4 fa86 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7e8:	f641 6014 	movw	r0, #7700	; 0x1e14
    f7ec:	bd10      	pop	{r4, pc}
    f7ee:	f241 1030 	movw	r0, #4400	; 0x1130
    f7f2:	bd10      	pop	{r4, pc}

0000f7f4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    f7f4:	f7fc bcb0 	b.w	c158 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    f7f8:	b510      	push	{r4, lr}
    f7fa:	460a      	mov	r2, r1
    f7fc:	b130      	cbz	r0, f80c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    f7fe:	2801      	cmp	r0, #1
    f800:	d00b      	beq.n	f81a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    f802:	f240 6127 	movw	r1, #1575	; 0x627
    f806:	203e      	movs	r0, #62	; 0x3e
    f808:	f7f4 fa74 	bl	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f810:	f102 0128 	add.w	r1, r2, #40	; 0x28
    f814:	4610      	mov	r0, r2
    f816:	f7fb bcaf 	b.w	b178 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    f81a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f81e:	f102 0129 	add.w	r1, r2, #41	; 0x29
    f822:	4610      	mov	r0, r2
    f824:	f7fb bc92 	b.w	b14c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0000f828 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    f828:	b570      	push	{r4, r5, r6, lr}
    f82a:	4605      	mov	r5, r0
    f82c:	4614      	mov	r4, r2
    f82e:	4608      	mov	r0, r1
    f830:	f7ff ffd0 	bl	f7d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f834:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    f838:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    f83c:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    f840:	4620      	mov	r0, r4
    f842:	f7ff ffc7 	bl	f7d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f846:	4428      	add	r0, r5
    f848:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f84c:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    f850:	fbb0 f5f1 	udiv	r5, r0, r1
    f854:	4620      	mov	r0, r4
    f856:	f7ff ffaf 	bl	f7b8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f85a:	4428      	add	r0, r5
    f85c:	1d40      	adds	r0, r0, #5
    f85e:	bd70      	pop	{r4, r5, r6, pc}

0000f860 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    f860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f864:	4607      	mov	r7, r0
    f866:	461d      	mov	r5, r3
    f868:	460e      	mov	r6, r1
    f86a:	4614      	mov	r4, r2
    f86c:	4610      	mov	r0, r2
    f86e:	f7ff ffb1 	bl	f7d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f872:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    f876:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    f87a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    f87e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f882:	2e02      	cmp	r6, #2
    f884:	d00e      	beq.n	f8a4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    f886:	f240 52dc 	movw	r2, #1500	; 0x5dc
    f88a:	4411      	add	r1, r2
    f88c:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    f890:	fbb1 f6f0 	udiv	r6, r1, r0
    f894:	4620      	mov	r0, r4
    f896:	f7ff ff8f 	bl	f7b8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f89a:	4430      	add	r0, r6
    f89c:	4428      	add	r0, r5
    f89e:	1d40      	adds	r0, r0, #5
    f8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f8a4:	4602      	mov	r2, r0
    f8a6:	e7f0      	b.n	f88a <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000f8a8 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    f8a8:	b510      	push	{r4, lr}
    f8aa:	4604      	mov	r4, r0
    f8ac:	4608      	mov	r0, r1
    f8ae:	f7ff ff91 	bl	f7d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f8b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f8b6:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f8ba:	fbb0 f0f1 	udiv	r0, r0, r1
    f8be:	1a20      	subs	r0, r4, r0
    f8c0:	1e80      	subs	r0, r0, #2
    f8c2:	bd10      	pop	{r4, pc}

0000f8c4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    f8c4:	b510      	push	{r4, lr}
    f8c6:	4604      	mov	r4, r0
    f8c8:	4608      	mov	r0, r1
    f8ca:	f7ff ff83 	bl	f7d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f8ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f8d2:	fbb0 f0f1 	udiv	r0, r0, r1
    f8d6:	1a20      	subs	r0, r4, r0
    f8d8:	bd10      	pop	{r4, pc}

0000f8da <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    f8da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f8de:	2902      	cmp	r1, #2
    f8e0:	d008      	beq.n	f8f4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    f8e2:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f8e6:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    f8ea:	fbb1 f1f2 	udiv	r1, r1, r2
    f8ee:	4408      	add	r0, r1
    f8f0:	1e80      	subs	r0, r0, #2
    f8f2:	4770      	bx	lr
    f8f4:	4611      	mov	r1, r2
    f8f6:	e7f6      	b.n	f8e6 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000f8f8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    f8f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f8fc:	2902      	cmp	r1, #2
    f8fe:	d007      	beq.n	f910 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    f900:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f904:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    f908:	fbb1 f1f2 	udiv	r1, r1, r2
    f90c:	4408      	add	r0, r1
    f90e:	4770      	bx	lr
    f910:	4611      	mov	r1, r2
    f912:	e7f7      	b.n	f904 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    f914:	1702080c 	.word	0x1702080c
    f918:	0201010d 	.word	0x0201010d
    f91c:	01010909 	.word	0x01010909
    f920:	18090206 	.word	0x18090206
    f924:	01010318 	.word	0x01010318
    f928:	03030909 	.word	0x03030909
    f92c:	05          	.byte	0x05
    f92d:	55          	.byte	0x55
    f92e:	5555      	.short	0x5555
    f930:	2625      	.short	0x2625
    f932:	27          	.byte	0x27
    f933:	01          	.byte	0x01
    f934:	0103      	.short	0x0103
    f936:	01          	.byte	0x01
    f937:	01          	.byte	0x01

0000f938 <scan_connecting_error>:


//Scanning error
void scan_connecting_error(struct bt_scan_device_info *device_info)
{
	printk("Connection to peer failed!\n");
    f938:	4801      	ldr	r0, [pc, #4]	; (f940 <scan_connecting_error+0x8>)
    f93a:	f00d b832 	b.w	1c9a2 <printk>
    f93e:	bf00      	nop
    f940:	0001fd70 	.word	0x0001fd70

0000f944 <ble_ready>:
//Declaring callback functions for the scan filter
BT_SCAN_CB_INIT(scan_cb, scan_filter_match, NULL, scan_connecting_error, NULL);

//Callback function after enabling bluetooth
static void ble_ready(int err)
{
    f944:	b530      	push	{r4, r5, lr}
	printk("Bluetooth ready\n");
    f946:	481e      	ldr	r0, [pc, #120]	; (f9c0 <ble_ready+0x7c>)
{
    f948:	b08b      	sub	sp, #44	; 0x2c
	printk("Bluetooth ready\n");
    f94a:	f00d f82a 	bl	1c9a2 <printk>
	struct bt_le_scan_param scan_param = {
    f94e:	ab05      	add	r3, sp, #20
    f950:	2214      	movs	r2, #20
    f952:	2100      	movs	r1, #0
    f954:	4618      	mov	r0, r3
    f956:	f00f fe3a 	bl	1f5ce <memset>
    f95a:	2401      	movs	r4, #1
    f95c:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
    f960:	e9cd 4206 	strd	r4, r2, [sp, #24]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    f964:	4a17      	ldr	r2, [pc, #92]	; (f9c4 <ble_ready+0x80>)
	struct bt_scan_init_param scan_init = {
    f966:	9002      	str	r0, [sp, #8]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    f968:	6851      	ldr	r1, [r2, #4]
    f96a:	6810      	ldr	r0, [r2, #0]
	struct bt_scan_init_param scan_init = {
    f96c:	f8cd d010 	str.w	sp, [sp, #16]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    f970:	466b      	mov	r3, sp
    f972:	c303      	stmia	r3!, {r0, r1}
	struct bt_scan_init_param scan_init = {
    f974:	2500      	movs	r5, #0
	bt_scan_init(&scan_init);
    f976:	4618      	mov	r0, r3
	struct bt_scan_init_param scan_init = {
    f978:	f88d 500c 	strb.w	r5, [sp, #12]
	bt_scan_init(&scan_init);
    f97c:	f001 fb92 	bl	110a4 <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
    f980:	4811      	ldr	r0, [pc, #68]	; (f9c8 <ble_ready+0x84>)
    f982:	f001 fa57 	bl	10e34 <bt_scan_cb_register>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_NAME, target);
    f986:	4911      	ldr	r1, [pc, #68]	; (f9cc <ble_ready+0x88>)
    f988:	4628      	mov	r0, r5
    f98a:	f001 fa63 	bl	10e54 <bt_scan_filter_add>
	if (err) {
    f98e:	4601      	mov	r1, r0
    f990:	b120      	cbz	r0, f99c <ble_ready+0x58>
		printk("Scanning filters cannot be set\n");
    f992:	480f      	ldr	r0, [pc, #60]	; (f9d0 <ble_ready+0x8c>)
	printk("Scanning...\n");
    f994:	f00d f805 	bl	1c9a2 <printk>
	start_scan();
}
    f998:	b00b      	add	sp, #44	; 0x2c
    f99a:	bd30      	pop	{r4, r5, pc}
	err = bt_scan_filter_enable(BT_SCAN_NAME_FILTER, false);
    f99c:	4620      	mov	r0, r4
    f99e:	f001 faa7 	bl	10ef0 <bt_scan_filter_enable>
	if (err) {
    f9a2:	b110      	cbz	r0, f9aa <ble_ready+0x66>
		printk("Filters cannot be turned on\n");
    f9a4:	480b      	ldr	r0, [pc, #44]	; (f9d4 <ble_ready+0x90>)
    f9a6:	f00c fffc 	bl	1c9a2 <printk>
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_PASSIVE);
    f9aa:	2000      	movs	r0, #0
    f9ac:	f001 fbb4 	bl	11118 <bt_scan_start>
	if (err) {
    f9b0:	4601      	mov	r1, r0
    f9b2:	b110      	cbz	r0, f9ba <ble_ready+0x76>
		printk("Scanning failed to start, err %d\n", err);
    f9b4:	4808      	ldr	r0, [pc, #32]	; (f9d8 <ble_ready+0x94>)
    f9b6:	f00c fff4 	bl	1c9a2 <printk>
	printk("Scanning...\n");
    f9ba:	4808      	ldr	r0, [pc, #32]	; (f9dc <ble_ready+0x98>)
    f9bc:	e7ea      	b.n	f994 <ble_ready+0x50>
    f9be:	bf00      	nop
    f9c0:	0001fd8c 	.word	0x0001fd8c
    f9c4:	0001f91c 	.word	0x0001f91c
    f9c8:	20000410 	.word	0x20000410
    f9cc:	0001fd9d 	.word	0x0001fd9d
    f9d0:	0001fda6 	.word	0x0001fda6
    f9d4:	0001fdc6 	.word	0x0001fdc6
    f9d8:	0001fde3 	.word	0x0001fde3
    f9dc:	0001fe05 	.word	0x0001fe05

0000f9e0 <scan_filter_match>:
{
    f9e0:	b570      	push	{r4, r5, r6, lr}
	int rssival = device_info->recv_info->rssi;
    f9e2:	6803      	ldr	r3, [r0, #0]
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    f9e4:	681c      	ldr	r4, [r3, #0]
	int rssival = device_info->recv_info->rssi;
    f9e6:	f993 6005 	ldrsb.w	r6, [r3, #5]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    f9ea:	7823      	ldrb	r3, [r4, #0]
{
    f9ec:	b092      	sub	sp, #72	; 0x48
    f9ee:	ad07      	add	r5, sp, #28
    f9f0:	2b03      	cmp	r3, #3
    f9f2:	d825      	bhi.n	fa40 <scan_filter_match+0x60>
    f9f4:	e8df f003 	tbb	[pc, r3]
    f9f8:	22201e02 	.word	0x22201e02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    f9fc:	4913      	ldr	r1, [pc, #76]	; (fa4c <scan_filter_match+0x6c>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    f9fe:	4628      	mov	r0, r5
    fa00:	f00f fded 	bl	1f5de <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    fa04:	79a3      	ldrb	r3, [r4, #6]
    fa06:	9505      	str	r5, [sp, #20]
    fa08:	7862      	ldrb	r2, [r4, #1]
    fa0a:	9204      	str	r2, [sp, #16]
    fa0c:	78a2      	ldrb	r2, [r4, #2]
    fa0e:	9203      	str	r2, [sp, #12]
    fa10:	78e2      	ldrb	r2, [r4, #3]
    fa12:	9202      	str	r2, [sp, #8]
    fa14:	7922      	ldrb	r2, [r4, #4]
    fa16:	9201      	str	r2, [sp, #4]
    fa18:	7962      	ldrb	r2, [r4, #5]
    fa1a:	9200      	str	r2, [sp, #0]
    fa1c:	211e      	movs	r1, #30
    fa1e:	4a0c      	ldr	r2, [pc, #48]	; (fa50 <scan_filter_match+0x70>)
    fa20:	a80a      	add	r0, sp, #40	; 0x28
    fa22:	f00c ffcb 	bl	1c9bc <snprintk>
	printk("Device found: %s, rssi = %i\n", addr,rssival);
    fa26:	480b      	ldr	r0, [pc, #44]	; (fa54 <scan_filter_match+0x74>)
    fa28:	4632      	mov	r2, r6
    fa2a:	a90a      	add	r1, sp, #40	; 0x28
    fa2c:	f00c ffb9 	bl	1c9a2 <printk>
}
    fa30:	b012      	add	sp, #72	; 0x48
    fa32:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    fa34:	4908      	ldr	r1, [pc, #32]	; (fa58 <scan_filter_match+0x78>)
    fa36:	e7e2      	b.n	f9fe <scan_filter_match+0x1e>
		strcpy(type, "public-id");
    fa38:	4908      	ldr	r1, [pc, #32]	; (fa5c <scan_filter_match+0x7c>)
    fa3a:	e7e0      	b.n	f9fe <scan_filter_match+0x1e>
		strcpy(type, "random-id");
    fa3c:	4908      	ldr	r1, [pc, #32]	; (fa60 <scan_filter_match+0x80>)
    fa3e:	e7de      	b.n	f9fe <scan_filter_match+0x1e>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    fa40:	4a08      	ldr	r2, [pc, #32]	; (fa64 <scan_filter_match+0x84>)
    fa42:	210a      	movs	r1, #10
    fa44:	4628      	mov	r0, r5
    fa46:	f00c ffb9 	bl	1c9bc <snprintk>
		break;
    fa4a:	e7db      	b.n	fa04 <scan_filter_match+0x24>
    fa4c:	0001fe12 	.word	0x0001fe12
    fa50:	0001fe3b 	.word	0x0001fe3b
    fa54:	0001fe5e 	.word	0x0001fe5e
    fa58:	0001fe19 	.word	0x0001fe19
    fa5c:	0001fe20 	.word	0x0001fe20
    fa60:	0001fe2a 	.word	0x0001fe2a
    fa64:	0001fe34 	.word	0x0001fe34

0000fa68 <main>:


//Main
void main(void)
{
    fa68:	b508      	push	{r3, lr}
	int err;

	printk("Bluetooth initialized\n");
    fa6a:	4804      	ldr	r0, [pc, #16]	; (fa7c <main+0x14>)
    fa6c:	f00c ff99 	bl	1c9a2 <printk>

	err = bt_enable(ble_ready);
    fa70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = bt_enable(ble_ready);
    fa74:	4802      	ldr	r0, [pc, #8]	; (fa80 <main+0x18>)
    fa76:	f003 b8d7 	b.w	12c28 <bt_enable>
    fa7a:	bf00      	nop
    fa7c:	0001fe7b 	.word	0x0001fe7b
    fa80:	0000f945 	.word	0x0000f945

0000fa84 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    fa84:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    fa86:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    fa8a:	2b02      	cmp	r3, #2
{
    fa8c:	b570      	push	{r4, r5, r6, lr}
    fa8e:	4604      	mov	r4, r0
    fa90:	460e      	mov	r6, r1
	notify->result = res;
    fa92:	6081      	str	r1, [r0, #8]
	switch (method) {
    fa94:	d010      	beq.n	fab8 <sys_notify_finalize+0x34>
    fa96:	2b03      	cmp	r3, #3
    fa98:	d004      	beq.n	faa4 <sys_notify_finalize+0x20>
    fa9a:	2b01      	cmp	r3, #1
    fa9c:	d10f      	bne.n	fabe <sys_notify_finalize+0x3a>
    fa9e:	2500      	movs	r5, #0
    faa0:	4628      	mov	r0, r5
    faa2:	e001      	b.n	faa8 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    faa4:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    faa6:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    faa8:	2300      	movs	r3, #0
    faaa:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    faac:	b110      	cbz	r0, fab4 <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    faae:	4631      	mov	r1, r6
    fab0:	f00c feaa 	bl	1c808 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    fab4:	4628      	mov	r0, r5
    fab6:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
    fab8:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    faba:	2500      	movs	r5, #0
		break;
    fabc:	e7f4      	b.n	faa8 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    fabe:	4a06      	ldr	r2, [pc, #24]	; (fad8 <sys_notify_finalize+0x54>)
    fac0:	4906      	ldr	r1, [pc, #24]	; (fadc <sys_notify_finalize+0x58>)
    fac2:	4807      	ldr	r0, [pc, #28]	; (fae0 <sys_notify_finalize+0x5c>)
    fac4:	2345      	movs	r3, #69	; 0x45
    fac6:	f00c ff6c 	bl	1c9a2 <printk>
    faca:	4803      	ldr	r0, [pc, #12]	; (fad8 <sys_notify_finalize+0x54>)
    facc:	2145      	movs	r1, #69	; 0x45
    face:	f00d f9c2 	bl	1ce56 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    fad2:	2500      	movs	r5, #0
    fad4:	e7e7      	b.n	faa6 <sys_notify_finalize+0x22>
    fad6:	bf00      	nop
    fad8:	0001fe92 	.word	0x0001fe92
    fadc:	00021b83 	.word	0x00021b83
    fae0:	0001feb5 	.word	0x0001feb5

0000fae4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    fae4:	680b      	ldr	r3, [r1, #0]
    fae6:	3301      	adds	r3, #1
    fae8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    faea:	4b01      	ldr	r3, [pc, #4]	; (faf0 <char_out+0xc>)
    faec:	681b      	ldr	r3, [r3, #0]
    faee:	4718      	bx	r3
    faf0:	20000418 	.word	0x20000418

0000faf4 <__printk_hook_install>:
	_char_out = fn;
    faf4:	4b01      	ldr	r3, [pc, #4]	; (fafc <__printk_hook_install+0x8>)
    faf6:	6018      	str	r0, [r3, #0]
}
    faf8:	4770      	bx	lr
    fafa:	bf00      	nop
    fafc:	20000418 	.word	0x20000418

0000fb00 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    fb00:	b507      	push	{r0, r1, r2, lr}
    fb02:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    fb04:	2100      	movs	r1, #0
{
    fb06:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    fb08:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    fb0a:	4803      	ldr	r0, [pc, #12]	; (fb18 <vprintk+0x18>)
    fb0c:	a901      	add	r1, sp, #4
    fb0e:	f000 fcc7 	bl	104a0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    fb12:	b003      	add	sp, #12
    fb14:	f85d fb04 	ldr.w	pc, [sp], #4
    fb18:	0000fae5 	.word	0x0000fae5

0000fb1c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    fb1c:	b530      	push	{r4, r5, lr}
    fb1e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    fb20:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    fb24:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    fb26:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    fb28:	a901      	add	r1, sp, #4
    fb2a:	4805      	ldr	r0, [pc, #20]	; (fb40 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    fb2c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    fb2e:	f000 fcb7 	bl	104a0 <cbvprintf>

	if (ctx.count < ctx.max) {
    fb32:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    fb36:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    fb38:	bfb8      	it	lt
    fb3a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    fb3c:	b005      	add	sp, #20
    fb3e:	bd30      	pop	{r4, r5, pc}
    fb40:	0001c97d 	.word	0x0001c97d

0000fb44 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    fb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fb48:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    fb4c:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    fb4e:	f019 0f08 	tst.w	r9, #8
{
    fb52:	4604      	mov	r4, r0
    fb54:	9203      	str	r2, [sp, #12]
	if (processing) {
    fb56:	d022      	beq.n	fb9e <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    fb58:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    fb5a:	bf0c      	ite	eq
    fb5c:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    fb60:	f049 0920 	orrne.w	r9, r9, #32
    fb64:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    fb68:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fb6a:	4620      	mov	r0, r4
    fb6c:	f009 fc46 	bl	193fc <z_spin_unlock_valid>
    fb70:	b968      	cbnz	r0, fb8e <process_event+0x4a>
    fb72:	4a9f      	ldr	r2, [pc, #636]	; (fdf0 <process_event+0x2ac>)
    fb74:	499f      	ldr	r1, [pc, #636]	; (fdf4 <process_event+0x2b0>)
    fb76:	48a0      	ldr	r0, [pc, #640]	; (fdf8 <process_event+0x2b4>)
    fb78:	23ac      	movs	r3, #172	; 0xac
    fb7a:	f00c ff12 	bl	1c9a2 <printk>
    fb7e:	489f      	ldr	r0, [pc, #636]	; (fdfc <process_event+0x2b8>)
    fb80:	4621      	mov	r1, r4
    fb82:	f00c ff0e 	bl	1c9a2 <printk>
    fb86:	489a      	ldr	r0, [pc, #616]	; (fdf0 <process_event+0x2ac>)
    fb88:	21ac      	movs	r1, #172	; 0xac
    fb8a:	f00d f964 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    fb8e:	9b03      	ldr	r3, [sp, #12]
    fb90:	f383 8811 	msr	BASEPRI, r3
    fb94:	f3bf 8f6f 	isb	sy
}
    fb98:	b005      	add	sp, #20
    fb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    fb9e:	4f98      	ldr	r7, [pc, #608]	; (fe00 <process_event+0x2bc>)
    fba0:	f8df 8254 	ldr.w	r8, [pc, #596]	; fdf8 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fba4:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    fba8:	2902      	cmp	r1, #2
    fbaa:	d106      	bne.n	fbba <process_event+0x76>
			evt = process_recheck(mgr);
    fbac:	4620      	mov	r0, r4
    fbae:	f00c ff12 	bl	1c9d6 <process_recheck>
		if (evt == EVT_NOP) {
    fbb2:	2800      	cmp	r0, #0
    fbb4:	d0d8      	beq.n	fb68 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    fbb6:	2801      	cmp	r0, #1
    fbb8:	d168      	bne.n	fc8c <process_event+0x148>
			res = mgr->last_res;
    fbba:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fbbe:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    fbc0:	f1bb 0f00 	cmp.w	fp, #0
    fbc4:	da0a      	bge.n	fbdc <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    fbc6:	2600      	movs	r6, #0
		*clients = mgr->clients;
    fbc8:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fbca:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    fbce:	e9c4 6600 	strd	r6, r6, [r4]
    fbd2:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    fbd6:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    fbd8:	9601      	str	r6, [sp, #4]
    fbda:	e027      	b.n	fc2c <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fbdc:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    fbe0:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    fbe2:	2901      	cmp	r1, #1
    fbe4:	d834      	bhi.n	fc50 <process_event+0x10c>
	list->head = NULL;
    fbe6:	2100      	movs	r1, #0
    fbe8:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    fbec:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    fbee:	6825      	ldr	r5, [r4, #0]
    fbf0:	b29b      	uxth	r3, r3
	list->tail = NULL;
    fbf2:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    fbf6:	d10c      	bne.n	fc12 <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    fbf8:	428d      	cmp	r5, r1
    fbfa:	462a      	mov	r2, r5
    fbfc:	bf38      	it	cc
    fbfe:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    fc00:	b12a      	cbz	r2, fc0e <process_event+0xca>
				mgr->refs += 1U;
    fc02:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fc04:	6812      	ldr	r2, [r2, #0]
    fc06:	3101      	adds	r1, #1
    fc08:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    fc0a:	2a00      	cmp	r2, #0
    fc0c:	d1f8      	bne.n	fc00 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fc0e:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    fc12:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    fc14:	4620      	mov	r0, r4
    fc16:	f00c fede 	bl	1c9d6 <process_recheck>
    fc1a:	4606      	mov	r6, r0
    fc1c:	2800      	cmp	r0, #0
    fc1e:	d0db      	beq.n	fbd8 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    fc20:	8ba3      	ldrh	r3, [r4, #28]
    fc22:	f043 0320 	orr.w	r3, r3, #32
    fc26:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    fc28:	2300      	movs	r3, #0
    fc2a:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    fc2c:	8ba3      	ldrh	r3, [r4, #28]
    fc2e:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    fc32:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    fc34:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    fc36:	d003      	beq.n	fc40 <process_event+0xfc>
		if (do_monitors
    fc38:	68a2      	ldr	r2, [r4, #8]
    fc3a:	2a00      	cmp	r2, #0
    fc3c:	f040 80f0 	bne.w	fe20 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
    fc40:	b91d      	cbnz	r5, fc4a <process_event+0x106>
		    || (transit != NULL)) {
    fc42:	9a01      	ldr	r2, [sp, #4]
    fc44:	2a00      	cmp	r2, #0
    fc46:	f000 8136 	beq.w	feb6 <process_event+0x372>
    fc4a:	f04f 0900 	mov.w	r9, #0
    fc4e:	e0e9      	b.n	fe24 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    fc50:	2a04      	cmp	r2, #4
    fc52:	d10e      	bne.n	fc72 <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fc54:	f023 0307 	bic.w	r3, r3, #7
    fc58:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    fc5a:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    fc5c:	4620      	mov	r0, r4
    fc5e:	f00c feba 	bl	1c9d6 <process_recheck>
    fc62:	4605      	mov	r5, r0
    fc64:	b118      	cbz	r0, fc6e <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    fc66:	f042 0220 	orr.w	r2, r2, #32
    fc6a:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    fc6c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    fc6e:	9501      	str	r5, [sp, #4]
    fc70:	e7dc      	b.n	fc2c <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    fc72:	4640      	mov	r0, r8
    fc74:	4963      	ldr	r1, [pc, #396]	; (fe04 <process_event+0x2c0>)
    fc76:	f240 131b 	movw	r3, #283	; 0x11b
    fc7a:	463a      	mov	r2, r7
    fc7c:	f00c fe91 	bl	1c9a2 <printk>
    fc80:	f240 111b 	movw	r1, #283	; 0x11b
    fc84:	4638      	mov	r0, r7
    fc86:	f00d f8e6 	bl	1ce56 <assert_post_action>
    fc8a:	e7ef      	b.n	fc6c <process_event+0x128>
		} else if (evt == EVT_START) {
    fc8c:	2803      	cmp	r0, #3
    fc8e:	d135      	bne.n	fcfc <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    fc90:	f1b9 0f00 	cmp.w	r9, #0
    fc94:	d00b      	beq.n	fcae <process_event+0x16a>
    fc96:	495c      	ldr	r1, [pc, #368]	; (fe08 <process_event+0x2c4>)
    fc98:	4640      	mov	r0, r8
    fc9a:	f44f 73ab 	mov.w	r3, #342	; 0x156
    fc9e:	463a      	mov	r2, r7
    fca0:	f00c fe7f 	bl	1c9a2 <printk>
    fca4:	f44f 71ab 	mov.w	r1, #342	; 0x156
    fca8:	4638      	mov	r0, r7
    fcaa:	f00d f8d4 	bl	1ce56 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    fcae:	6823      	ldr	r3, [r4, #0]
    fcb0:	b95b      	cbnz	r3, fcca <process_event+0x186>
    fcb2:	4956      	ldr	r1, [pc, #344]	; (fe0c <process_event+0x2c8>)
    fcb4:	4640      	mov	r0, r8
    fcb6:	f240 1357 	movw	r3, #343	; 0x157
    fcba:	463a      	mov	r2, r7
    fcbc:	f00c fe71 	bl	1c9a2 <printk>
    fcc0:	f240 1157 	movw	r1, #343	; 0x157
    fcc4:	4638      	mov	r0, r7
    fcc6:	f00d f8c6 	bl	1ce56 <assert_post_action>
			transit = mgr->transitions->start;
    fcca:	6923      	ldr	r3, [r4, #16]
    fccc:	681b      	ldr	r3, [r3, #0]
    fcce:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    fcd0:	b95b      	cbnz	r3, fcea <process_event+0x1a6>
    fcd2:	494f      	ldr	r1, [pc, #316]	; (fe10 <process_event+0x2cc>)
    fcd4:	4640      	mov	r0, r8
    fcd6:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    fcda:	463a      	mov	r2, r7
    fcdc:	f00c fe61 	bl	1c9a2 <printk>
    fce0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    fce4:	4638      	mov	r0, r7
    fce6:	f00d f8b6 	bl	1ce56 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fcea:	8ba3      	ldrh	r3, [r4, #28]
    fcec:	f023 0307 	bic.w	r3, r3, #7
    fcf0:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    fcf4:	83a3      	strh	r3, [r4, #28]
}
    fcf6:	2500      	movs	r5, #0
		res = 0;
    fcf8:	46ab      	mov	fp, r5
}
    fcfa:	e797      	b.n	fc2c <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    fcfc:	2804      	cmp	r0, #4
    fcfe:	d132      	bne.n	fd66 <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    fd00:	f1b9 0f02 	cmp.w	r9, #2
    fd04:	d00b      	beq.n	fd1e <process_event+0x1da>
    fd06:	4943      	ldr	r1, [pc, #268]	; (fe14 <process_event+0x2d0>)
    fd08:	4640      	mov	r0, r8
    fd0a:	f240 135d 	movw	r3, #349	; 0x15d
    fd0e:	463a      	mov	r2, r7
    fd10:	f00c fe47 	bl	1c9a2 <printk>
    fd14:	f240 115d 	movw	r1, #349	; 0x15d
    fd18:	4638      	mov	r0, r7
    fd1a:	f00d f89c 	bl	1ce56 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    fd1e:	8be3      	ldrh	r3, [r4, #30]
    fd20:	b15b      	cbz	r3, fd3a <process_event+0x1f6>
    fd22:	493d      	ldr	r1, [pc, #244]	; (fe18 <process_event+0x2d4>)
    fd24:	4640      	mov	r0, r8
    fd26:	f44f 73af 	mov.w	r3, #350	; 0x15e
    fd2a:	463a      	mov	r2, r7
    fd2c:	f00c fe39 	bl	1c9a2 <printk>
    fd30:	f44f 71af 	mov.w	r1, #350	; 0x15e
    fd34:	4638      	mov	r0, r7
    fd36:	f00d f88e 	bl	1ce56 <assert_post_action>
			transit = mgr->transitions->stop;
    fd3a:	6923      	ldr	r3, [r4, #16]
    fd3c:	685b      	ldr	r3, [r3, #4]
    fd3e:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    fd40:	b95b      	cbnz	r3, fd5a <process_event+0x216>
    fd42:	4933      	ldr	r1, [pc, #204]	; (fe10 <process_event+0x2cc>)
    fd44:	4640      	mov	r0, r8
    fd46:	f240 1361 	movw	r3, #353	; 0x161
    fd4a:	463a      	mov	r2, r7
    fd4c:	f00c fe29 	bl	1c9a2 <printk>
    fd50:	f240 1161 	movw	r1, #353	; 0x161
    fd54:	4638      	mov	r0, r7
    fd56:	f00d f87e 	bl	1ce56 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fd5a:	8ba3      	ldrh	r3, [r4, #28]
    fd5c:	f023 0307 	bic.w	r3, r3, #7
    fd60:	f043 0304 	orr.w	r3, r3, #4
    fd64:	e7c6      	b.n	fcf4 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    fd66:	2805      	cmp	r0, #5
    fd68:	d132      	bne.n	fdd0 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    fd6a:	f1b9 0f01 	cmp.w	r9, #1
    fd6e:	d00b      	beq.n	fd88 <process_event+0x244>
    fd70:	492a      	ldr	r1, [pc, #168]	; (fe1c <process_event+0x2d8>)
    fd72:	4640      	mov	r0, r8
    fd74:	f44f 73b2 	mov.w	r3, #356	; 0x164
    fd78:	463a      	mov	r2, r7
    fd7a:	f00c fe12 	bl	1c9a2 <printk>
    fd7e:	f44f 71b2 	mov.w	r1, #356	; 0x164
    fd82:	4638      	mov	r0, r7
    fd84:	f00d f867 	bl	1ce56 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    fd88:	6823      	ldr	r3, [r4, #0]
    fd8a:	b95b      	cbnz	r3, fda4 <process_event+0x260>
    fd8c:	491f      	ldr	r1, [pc, #124]	; (fe0c <process_event+0x2c8>)
    fd8e:	4640      	mov	r0, r8
    fd90:	f240 1365 	movw	r3, #357	; 0x165
    fd94:	463a      	mov	r2, r7
    fd96:	f00c fe04 	bl	1c9a2 <printk>
    fd9a:	f240 1165 	movw	r1, #357	; 0x165
    fd9e:	4638      	mov	r0, r7
    fda0:	f00d f859 	bl	1ce56 <assert_post_action>
			transit = mgr->transitions->reset;
    fda4:	6923      	ldr	r3, [r4, #16]
    fda6:	689b      	ldr	r3, [r3, #8]
    fda8:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    fdaa:	b95b      	cbnz	r3, fdc4 <process_event+0x280>
    fdac:	4918      	ldr	r1, [pc, #96]	; (fe10 <process_event+0x2cc>)
    fdae:	4640      	mov	r0, r8
    fdb0:	f44f 73b4 	mov.w	r3, #360	; 0x168
    fdb4:	463a      	mov	r2, r7
    fdb6:	f00c fdf4 	bl	1c9a2 <printk>
    fdba:	f44f 71b4 	mov.w	r1, #360	; 0x168
    fdbe:	4638      	mov	r0, r7
    fdc0:	f00d f849 	bl	1ce56 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fdc4:	8ba3      	ldrh	r3, [r4, #28]
    fdc6:	f023 0307 	bic.w	r3, r3, #7
    fdca:	f043 0305 	orr.w	r3, r3, #5
    fdce:	e791      	b.n	fcf4 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    fdd0:	490c      	ldr	r1, [pc, #48]	; (fe04 <process_event+0x2c0>)
    fdd2:	f240 136b 	movw	r3, #363	; 0x16b
    fdd6:	463a      	mov	r2, r7
    fdd8:	4640      	mov	r0, r8
    fdda:	f00c fde2 	bl	1c9a2 <printk>
    fdde:	2500      	movs	r5, #0
    fde0:	f240 116b 	movw	r1, #363	; 0x16b
    fde4:	4638      	mov	r0, r7
    fde6:	f00d f836 	bl	1ce56 <assert_post_action>
		onoff_transition_fn transit = NULL;
    fdea:	9501      	str	r5, [sp, #4]
    fdec:	e784      	b.n	fcf8 <process_event+0x1b4>
    fdee:	bf00      	nop
    fdf0:	0001ff75 	.word	0x0001ff75
    fdf4:	0001ff9b 	.word	0x0001ff9b
    fdf8:	0001feb5 	.word	0x0001feb5
    fdfc:	0001ffb2 	.word	0x0001ffb2
    fe00:	0001fed2 	.word	0x0001fed2
    fe04:	00021b83 	.word	0x00021b83
    fe08:	0001fef4 	.word	0x0001fef4
    fe0c:	0001ff00 	.word	0x0001ff00
    fe10:	0001ff23 	.word	0x0001ff23
    fe14:	0001ff3a 	.word	0x0001ff3a
    fe18:	0001ff50 	.word	0x0001ff50
    fe1c:	0001ff5f 	.word	0x0001ff5f
				   && !sys_slist_is_empty(&mgr->monitors);
    fe20:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    fe24:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    fe28:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    fe2c:	83a3      	strh	r3, [r4, #28]
    fe2e:	4650      	mov	r0, sl
    fe30:	f009 fae4 	bl	193fc <z_spin_unlock_valid>
    fe34:	b968      	cbnz	r0, fe52 <process_event+0x30e>
    fe36:	4a3a      	ldr	r2, [pc, #232]	; (ff20 <process_event+0x3dc>)
    fe38:	493a      	ldr	r1, [pc, #232]	; (ff24 <process_event+0x3e0>)
    fe3a:	23ac      	movs	r3, #172	; 0xac
    fe3c:	4640      	mov	r0, r8
    fe3e:	f00c fdb0 	bl	1c9a2 <printk>
    fe42:	4839      	ldr	r0, [pc, #228]	; (ff28 <process_event+0x3e4>)
    fe44:	4651      	mov	r1, sl
    fe46:	f00c fdac 	bl	1c9a2 <printk>
    fe4a:	4835      	ldr	r0, [pc, #212]	; (ff20 <process_event+0x3dc>)
    fe4c:	21ac      	movs	r1, #172	; 0xac
    fe4e:	f00d f802 	bl	1ce56 <assert_post_action>
    fe52:	9b03      	ldr	r3, [sp, #12]
    fe54:	f383 8811 	msr	BASEPRI, r3
    fe58:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    fe5c:	f1b9 0f00 	cmp.w	r9, #0
    fe60:	d138      	bne.n	fed4 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
    fe62:	2d00      	cmp	r5, #0
    fe64:	d14b      	bne.n	fefe <process_event+0x3ba>
			if (transit != NULL) {
    fe66:	9b01      	ldr	r3, [sp, #4]
    fe68:	b113      	cbz	r3, fe70 <process_event+0x32c>
				transit(mgr, transition_complete);
    fe6a:	4930      	ldr	r1, [pc, #192]	; (ff2c <process_event+0x3e8>)
    fe6c:	4620      	mov	r0, r4
    fe6e:	4798      	blx	r3
	__asm__ volatile(
    fe70:	f04f 0340 	mov.w	r3, #64	; 0x40
    fe74:	f3ef 8b11 	mrs	fp, BASEPRI
    fe78:	f383 8812 	msr	BASEPRI_MAX, r3
    fe7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fe80:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    fe82:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fe86:	f009 faab 	bl	193e0 <z_spin_lock_valid>
    fe8a:	b968      	cbnz	r0, fea8 <process_event+0x364>
    fe8c:	4a24      	ldr	r2, [pc, #144]	; (ff20 <process_event+0x3dc>)
    fe8e:	4928      	ldr	r1, [pc, #160]	; (ff30 <process_event+0x3ec>)
    fe90:	2381      	movs	r3, #129	; 0x81
    fe92:	4640      	mov	r0, r8
    fe94:	f00c fd85 	bl	1c9a2 <printk>
    fe98:	4826      	ldr	r0, [pc, #152]	; (ff34 <process_event+0x3f0>)
    fe9a:	4651      	mov	r1, sl
    fe9c:	f00c fd81 	bl	1c9a2 <printk>
    fea0:	481f      	ldr	r0, [pc, #124]	; (ff20 <process_event+0x3dc>)
    fea2:	2181      	movs	r1, #129	; 0x81
    fea4:	f00c ffd7 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
    fea8:	4650      	mov	r0, sl
    feaa:	f009 fab7 	bl	1941c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    feae:	8ba3      	ldrh	r3, [r4, #28]
    feb0:	f023 0308 	bic.w	r3, r3, #8
    feb4:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    feb6:	8ba3      	ldrh	r3, [r4, #28]
    feb8:	06da      	lsls	r2, r3, #27
    feba:	d528      	bpl.n	ff0e <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    febc:	f023 0310 	bic.w	r3, r3, #16
    fec0:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    fec2:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    fec4:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    fec8:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    fecc:	2900      	cmp	r1, #0
    fece:	f47f ae6b 	bne.w	fba8 <process_event+0x64>
out:
    fed2:	e649      	b.n	fb68 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    fed4:	68a1      	ldr	r1, [r4, #8]
    fed6:	2900      	cmp	r1, #0
    fed8:	d0c3      	beq.n	fe62 <process_event+0x31e>
	return node->next;
    feda:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    fedc:	9a02      	ldr	r2, [sp, #8]
    fede:	2b00      	cmp	r3, #0
    fee0:	bf38      	it	cc
    fee2:	2300      	movcc	r3, #0
    fee4:	4699      	mov	r9, r3
    fee6:	684b      	ldr	r3, [r1, #4]
    fee8:	4620      	mov	r0, r4
    feea:	461e      	mov	r6, r3
    feec:	465b      	mov	r3, fp
    feee:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    fef0:	f1b9 0f00 	cmp.w	r9, #0
    fef4:	d0b5      	beq.n	fe62 <process_event+0x31e>
    fef6:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fefa:	4649      	mov	r1, r9
    fefc:	e7ee      	b.n	fedc <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fefe:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    ff00:	9a02      	ldr	r2, [sp, #8]
    ff02:	682d      	ldr	r5, [r5, #0]
    ff04:	465b      	mov	r3, fp
    ff06:	4620      	mov	r0, r4
    ff08:	f00c fd81 	bl	1ca0e <notify_one>
    ff0c:	e7a9      	b.n	fe62 <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    ff0e:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    ff12:	bf1e      	ittt	ne
    ff14:	f023 0320 	bicne.w	r3, r3, #32
    ff18:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    ff1a:	2102      	movne	r1, #2
    ff1c:	e7d2      	b.n	fec4 <process_event+0x380>
    ff1e:	bf00      	nop
    ff20:	0001ff75 	.word	0x0001ff75
    ff24:	0001ff9b 	.word	0x0001ff9b
    ff28:	0001ffb2 	.word	0x0001ffb2
    ff2c:	0000ff39 	.word	0x0000ff39
    ff30:	0001ffc7 	.word	0x0001ffc7
    ff34:	0001ffdc 	.word	0x0001ffdc

0000ff38 <transition_complete>:
{
    ff38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ff3a:	4604      	mov	r4, r0
    ff3c:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    ff3e:	f100 0614 	add.w	r6, r0, #20
    ff42:	f04f 0340 	mov.w	r3, #64	; 0x40
    ff46:	f3ef 8711 	mrs	r7, BASEPRI
    ff4a:	f383 8812 	msr	BASEPRI_MAX, r3
    ff4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ff52:	4630      	mov	r0, r6
    ff54:	f009 fa44 	bl	193e0 <z_spin_lock_valid>
    ff58:	b968      	cbnz	r0, ff76 <transition_complete+0x3e>
    ff5a:	4a0c      	ldr	r2, [pc, #48]	; (ff8c <transition_complete+0x54>)
    ff5c:	490c      	ldr	r1, [pc, #48]	; (ff90 <transition_complete+0x58>)
    ff5e:	480d      	ldr	r0, [pc, #52]	; (ff94 <transition_complete+0x5c>)
    ff60:	2381      	movs	r3, #129	; 0x81
    ff62:	f00c fd1e 	bl	1c9a2 <printk>
    ff66:	480c      	ldr	r0, [pc, #48]	; (ff98 <transition_complete+0x60>)
    ff68:	4631      	mov	r1, r6
    ff6a:	f00c fd1a 	bl	1c9a2 <printk>
    ff6e:	4807      	ldr	r0, [pc, #28]	; (ff8c <transition_complete+0x54>)
    ff70:	2181      	movs	r1, #129	; 0x81
    ff72:	f00c ff70 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
    ff76:	4630      	mov	r0, r6
    ff78:	f009 fa50 	bl	1941c <z_spin_lock_set_owner>
	mgr->last_res = res;
    ff7c:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    ff7e:	463a      	mov	r2, r7
    ff80:	4620      	mov	r0, r4
    ff82:	2101      	movs	r1, #1
}
    ff84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    ff88:	f7ff bddc 	b.w	fb44 <process_event>
    ff8c:	0001ff75 	.word	0x0001ff75
    ff90:	0001ffc7 	.word	0x0001ffc7
    ff94:	0001feb5 	.word	0x0001feb5
    ff98:	0001ffdc 	.word	0x0001ffdc

0000ff9c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    ff9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ffa0:	4604      	mov	r4, r0
    ffa2:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    ffa4:	f00c fd49 	bl	1ca3a <validate_args>

	if (rv < 0) {
    ffa8:	1e05      	subs	r5, r0, #0
    ffaa:	db5e      	blt.n	1006a <CONFIG_PM_SRAM_SIZE+0x6a>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    ffac:	f104 0914 	add.w	r9, r4, #20
    ffb0:	f04f 0340 	mov.w	r3, #64	; 0x40
    ffb4:	f3ef 8a11 	mrs	sl, BASEPRI
    ffb8:	f383 8812 	msr	BASEPRI_MAX, r3
    ffbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ffc0:	4648      	mov	r0, r9
    ffc2:	f009 fa0d 	bl	193e0 <z_spin_lock_valid>
    ffc6:	b968      	cbnz	r0, ffe4 <onoff_request+0x48>
    ffc8:	4a38      	ldr	r2, [pc, #224]	; (100ac <CONFIG_PM_SRAM_SIZE+0xac>)
    ffca:	4939      	ldr	r1, [pc, #228]	; (100b0 <CONFIG_PM_SRAM_SIZE+0xb0>)
    ffcc:	4839      	ldr	r0, [pc, #228]	; (100b4 <CONFIG_PM_SRAM_SIZE+0xb4>)
    ffce:	2381      	movs	r3, #129	; 0x81
    ffd0:	f00c fce7 	bl	1c9a2 <printk>
    ffd4:	4838      	ldr	r0, [pc, #224]	; (100b8 <CONFIG_PM_SRAM_SIZE+0xb8>)
    ffd6:	4649      	mov	r1, r9
    ffd8:	f00c fce3 	bl	1c9a2 <printk>
    ffdc:	4833      	ldr	r0, [pc, #204]	; (100ac <CONFIG_PM_SRAM_SIZE+0xac>)
    ffde:	2181      	movs	r1, #129	; 0x81
    ffe0:	f00c ff39 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
    ffe4:	4648      	mov	r0, r9
    ffe6:	f009 fa19 	bl	1941c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    ffea:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ffec:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    ffee:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fff2:	428b      	cmp	r3, r1
    fff4:	f002 0607 	and.w	r6, r2, #7
    fff8:	d050      	beq.n	1009c <CONFIG_PM_SRAM_SIZE+0x9c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    fffa:	2e02      	cmp	r6, #2
    fffc:	d124      	bne.n	10048 <CONFIG_PM_SRAM_SIZE+0x48>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    fffe:	3301      	adds	r3, #1
   10000:	83e3      	strh	r3, [r4, #30]
	rv = state;
   10002:	4635      	mov	r5, r6
		notify = true;
   10004:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10008:	4648      	mov	r0, r9
   1000a:	f009 f9f7 	bl	193fc <z_spin_unlock_valid>
   1000e:	b968      	cbnz	r0, 1002c <CONFIG_PM_SRAM_SIZE+0x2c>
   10010:	4a26      	ldr	r2, [pc, #152]	; (100ac <CONFIG_PM_SRAM_SIZE+0xac>)
   10012:	492a      	ldr	r1, [pc, #168]	; (100bc <CONFIG_PM_SRAM_SIZE+0xbc>)
   10014:	4827      	ldr	r0, [pc, #156]	; (100b4 <CONFIG_PM_SRAM_SIZE+0xb4>)
   10016:	23ac      	movs	r3, #172	; 0xac
   10018:	f00c fcc3 	bl	1c9a2 <printk>
   1001c:	4828      	ldr	r0, [pc, #160]	; (100c0 <CONFIG_PM_SRAM_SIZE+0xc0>)
   1001e:	4649      	mov	r1, r9
   10020:	f00c fcbf 	bl	1c9a2 <printk>
   10024:	4821      	ldr	r0, [pc, #132]	; (100ac <CONFIG_PM_SRAM_SIZE+0xac>)
   10026:	21ac      	movs	r1, #172	; 0xac
   10028:	f00c ff15 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1002c:	f38a 8811 	msr	BASEPRI, sl
   10030:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   10034:	f1b8 0f00 	cmp.w	r8, #0
   10038:	d017      	beq.n	1006a <CONFIG_PM_SRAM_SIZE+0x6a>
			notify_one(mgr, cli, state, 0);
   1003a:	2300      	movs	r3, #0
   1003c:	4632      	mov	r2, r6
   1003e:	4639      	mov	r1, r7
   10040:	4620      	mov	r0, r4
   10042:	f00c fce4 	bl	1ca0e <notify_one>
   10046:	e010      	b.n	1006a <CONFIG_PM_SRAM_SIZE+0x6a>
	} else if ((state == ONOFF_STATE_OFF)
   10048:	0793      	lsls	r3, r2, #30
   1004a:	d001      	beq.n	10050 <CONFIG_PM_SRAM_SIZE+0x50>
		   || (state == ONOFF_STATE_TO_ON)) {
   1004c:	2e06      	cmp	r6, #6
   1004e:	d10f      	bne.n	10070 <CONFIG_PM_SRAM_SIZE+0x70>
	parent->next = child;
   10050:	2300      	movs	r3, #0
   10052:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   10054:	6863      	ldr	r3, [r4, #4]
   10056:	b9f3      	cbnz	r3, 10096 <CONFIG_PM_SRAM_SIZE+0x96>
	list->head = node;
   10058:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   1005c:	4635      	mov	r5, r6
   1005e:	b9fe      	cbnz	r6, 100a0 <CONFIG_PM_SRAM_SIZE+0xa0>
		process_event(mgr, EVT_RECHECK, key);
   10060:	4652      	mov	r2, sl
   10062:	2102      	movs	r1, #2
   10064:	4620      	mov	r0, r4
   10066:	f7ff fd6d 	bl	fb44 <process_event>
		}
	}

	return rv;
}
   1006a:	4628      	mov	r0, r5
   1006c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   10070:	2e05      	cmp	r6, #5
   10072:	d018      	beq.n	100a6 <CONFIG_PM_SRAM_SIZE+0xa6>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   10074:	2e01      	cmp	r6, #1
   10076:	d00b      	beq.n	10090 <CONFIG_PM_SRAM_SIZE+0x90>
   10078:	4912      	ldr	r1, [pc, #72]	; (100c4 <CONFIG_PM_SRAM_SIZE+0xc4>)
   1007a:	480e      	ldr	r0, [pc, #56]	; (100b4 <CONFIG_PM_SRAM_SIZE+0xb4>)
   1007c:	4a12      	ldr	r2, [pc, #72]	; (100c8 <CONFIG_PM_SRAM_SIZE+0xc8>)
   1007e:	f240 13c9 	movw	r3, #457	; 0x1c9
   10082:	f00c fc8e 	bl	1c9a2 <printk>
   10086:	4810      	ldr	r0, [pc, #64]	; (100c8 <CONFIG_PM_SRAM_SIZE+0xc8>)
   10088:	f240 11c9 	movw	r1, #457	; 0x1c9
   1008c:	f00c fee3 	bl	1ce56 <assert_post_action>
		rv = -EIO;
   10090:	f06f 0504 	mvn.w	r5, #4
   10094:	e004      	b.n	100a0 <CONFIG_PM_SRAM_SIZE+0xa0>
	parent->next = child;
   10096:	601f      	str	r7, [r3, #0]
	list->tail = node;
   10098:	6067      	str	r7, [r4, #4]
}
   1009a:	e7df      	b.n	1005c <CONFIG_PM_SRAM_SIZE+0x5c>
		rv = -EAGAIN;
   1009c:	f06f 050a 	mvn.w	r5, #10
   100a0:	f04f 0800 	mov.w	r8, #0
   100a4:	e7b0      	b.n	10008 <CONFIG_PM_SRAM_SIZE+0x8>
		rv = -ENOTSUP;
   100a6:	f06f 0585 	mvn.w	r5, #133	; 0x85
   100aa:	e7f9      	b.n	100a0 <CONFIG_PM_SRAM_SIZE+0xa0>
   100ac:	0001ff75 	.word	0x0001ff75
   100b0:	0001ffc7 	.word	0x0001ffc7
   100b4:	0001feb5 	.word	0x0001feb5
   100b8:	0001ffdc 	.word	0x0001ffdc
   100bc:	0001ff9b 	.word	0x0001ff9b
   100c0:	0001ffb2 	.word	0x0001ffb2
   100c4:	0001ff5f 	.word	0x0001ff5f
   100c8:	0001fed2 	.word	0x0001fed2

000100cc <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   100cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   100ce:	460e      	mov	r6, r1
   100d0:	2900      	cmp	r1, #0
   100d2:	d043      	beq.n	1015c <sys_heap_free+0x90>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   100d4:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   100d6:	68ab      	ldr	r3, [r5, #8]
   100d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   100dc:	bf2c      	ite	cs
   100de:	2408      	movcs	r4, #8
   100e0:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   100e2:	1b0c      	subs	r4, r1, r4
   100e4:	1b64      	subs	r4, r4, r5
   100e6:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   100e8:	2201      	movs	r2, #1
   100ea:	4621      	mov	r1, r4
   100ec:	4628      	mov	r0, r5
   100ee:	f00c fcd0 	bl	1ca92 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   100f2:	07c3      	lsls	r3, r0, #31
   100f4:	d40d      	bmi.n	10112 <sys_heap_free+0x46>
   100f6:	4a1a      	ldr	r2, [pc, #104]	; (10160 <sys_heap_free+0x94>)
   100f8:	491a      	ldr	r1, [pc, #104]	; (10164 <sys_heap_free+0x98>)
   100fa:	481b      	ldr	r0, [pc, #108]	; (10168 <sys_heap_free+0x9c>)
   100fc:	239a      	movs	r3, #154	; 0x9a
   100fe:	f00c fc50 	bl	1c9a2 <printk>
   10102:	481a      	ldr	r0, [pc, #104]	; (1016c <sys_heap_free+0xa0>)
   10104:	4631      	mov	r1, r6
   10106:	f00c fc4c 	bl	1c9a2 <printk>
   1010a:	4815      	ldr	r0, [pc, #84]	; (10160 <sys_heap_free+0x94>)
   1010c:	219a      	movs	r1, #154	; 0x9a
   1010e:	f00c fea2 	bl	1ce56 <assert_post_action>
	return c + chunk_size(h, c);
   10112:	4621      	mov	r1, r4
   10114:	4628      	mov	r0, r5
   10116:	f00c fcd2 	bl	1cabe <chunk_size>
   1011a:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   1011c:	4639      	mov	r1, r7
   1011e:	2200      	movs	r2, #0
   10120:	4628      	mov	r0, r5
   10122:	f00c fcb6 	bl	1ca92 <chunk_field>
   10126:	1a3f      	subs	r7, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   10128:	42bc      	cmp	r4, r7
   1012a:	d00d      	beq.n	10148 <sys_heap_free+0x7c>
   1012c:	4a0c      	ldr	r2, [pc, #48]	; (10160 <sys_heap_free+0x94>)
   1012e:	4910      	ldr	r1, [pc, #64]	; (10170 <sys_heap_free+0xa4>)
   10130:	480d      	ldr	r0, [pc, #52]	; (10168 <sys_heap_free+0x9c>)
   10132:	23a2      	movs	r3, #162	; 0xa2
   10134:	f00c fc35 	bl	1c9a2 <printk>
   10138:	480e      	ldr	r0, [pc, #56]	; (10174 <sys_heap_free+0xa8>)
   1013a:	4631      	mov	r1, r6
   1013c:	f00c fc31 	bl	1c9a2 <printk>
   10140:	4807      	ldr	r0, [pc, #28]	; (10160 <sys_heap_free+0x94>)
   10142:	21a2      	movs	r1, #162	; 0xa2
   10144:	f00c fe87 	bl	1ce56 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   10148:	4621      	mov	r1, r4
   1014a:	4628      	mov	r0, r5
   1014c:	2200      	movs	r2, #0
   1014e:	f00c fcbc 	bl	1caca <set_chunk_used>
	free_chunk(h, c);
   10152:	4621      	mov	r1, r4
}
   10154:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
   10158:	f00c bdf2 	b.w	1cd40 <free_chunk>
}
   1015c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1015e:	bf00      	nop
   10160:	0001fff4 	.word	0x0001fff4
   10164:	00020015 	.word	0x00020015
   10168:	0001feb5 	.word	0x0001feb5
   1016c:	00020026 	.word	0x00020026
   10170:	0002005e 	.word	0x0002005e
   10174:	00020084 	.word	0x00020084

00010178 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   10178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;
   1017c:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1017e:	68b3      	ldr	r3, [r6, #8]
{
   10180:	4614      	mov	r4, r2
	return big_heap(h) ? 8 : 4;
   10182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	rew = align & -align;
   10186:	f1c1 0200 	rsb	r2, r1, #0
   1018a:	ea02 0701 	and.w	r7, r2, r1
   1018e:	bf2c      	ite	cs
   10190:	2508      	movcs	r5, #8
   10192:	2504      	movcc	r5, #4
	if (align != rew) {
   10194:	ea31 0202 	bics.w	r2, r1, r2
   10198:	d01e      	beq.n	101d8 <sys_heap_aligned_alloc+0x60>
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1019a:	42bd      	cmp	r5, r7
   1019c:	bf28      	it	cs
   1019e:	463d      	movcs	r5, r7
   101a0:	46b9      	mov	r9, r7
		align -= rew;
   101a2:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   101a4:	f107 3aff 	add.w	sl, r7, #4294967295
   101a8:	ea1a 0f07 	tst.w	sl, r7
   101ac:	d00e      	beq.n	101cc <sys_heap_aligned_alloc+0x54>
   101ae:	4936      	ldr	r1, [pc, #216]	; (10288 <sys_heap_aligned_alloc+0x110>)
   101b0:	4a36      	ldr	r2, [pc, #216]	; (1028c <sys_heap_aligned_alloc+0x114>)
   101b2:	4837      	ldr	r0, [pc, #220]	; (10290 <sys_heap_aligned_alloc+0x118>)
   101b4:	f240 130d 	movw	r3, #269	; 0x10d
   101b8:	f00c fbf3 	bl	1c9a2 <printk>
   101bc:	4835      	ldr	r0, [pc, #212]	; (10294 <sys_heap_aligned_alloc+0x11c>)
   101be:	f00c fbf0 	bl	1c9a2 <printk>
   101c2:	4832      	ldr	r0, [pc, #200]	; (1028c <sys_heap_aligned_alloc+0x114>)
   101c4:	f240 110d 	movw	r1, #269	; 0x10d
   101c8:	f00c fe45 	bl	1ce56 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   101cc:	b974      	cbnz	r4, 101ec <sys_heap_aligned_alloc+0x74>
		return NULL;
   101ce:	f04f 0900 	mov.w	r9, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   101d2:	4648      	mov	r0, r9
   101d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   101d8:	42a9      	cmp	r1, r5
   101da:	d804      	bhi.n	101e6 <sys_heap_aligned_alloc+0x6e>
			return sys_heap_alloc(heap, bytes);
   101dc:	4621      	mov	r1, r4
}
   101de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   101e2:	f00c bdef 	b.w	1cdc4 <sys_heap_alloc>
		rew = 0;
   101e6:	f04f 0900 	mov.w	r9, #0
   101ea:	e7db      	b.n	101a4 <sys_heap_aligned_alloc+0x2c>
	if (bytes == 0 || size_too_big(h, bytes)) {
   101ec:	68b3      	ldr	r3, [r6, #8]
   101ee:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   101f2:	d9ec      	bls.n	101ce <sys_heap_aligned_alloc+0x56>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   101f4:	1939      	adds	r1, r7, r4
   101f6:	1b49      	subs	r1, r1, r5
   101f8:	4630      	mov	r0, r6
   101fa:	f00c fc82 	bl	1cb02 <bytes_to_chunksz>
   101fe:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   10200:	4630      	mov	r0, r6
   10202:	f00c fd08 	bl	1cc16 <alloc_chunk>
	if (c0 == 0) {
   10206:	4680      	mov	r8, r0
   10208:	2800      	cmp	r0, #0
   1020a:	d0e0      	beq.n	101ce <sys_heap_aligned_alloc+0x56>
	return big_heap(h) ? 8 : 4;
   1020c:	68b3      	ldr	r3, [r6, #8]
   1020e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10212:	bf2c      	ite	cs
   10214:	2308      	movcs	r3, #8
   10216:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   10218:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   1021c:	441d      	add	r5, r3
   1021e:	4435      	add	r5, r6
   10220:	4455      	add	r5, sl
   10222:	427f      	negs	r7, r7
   10224:	402f      	ands	r7, r5
   10226:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1022a:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1022c:	eba9 0303 	sub.w	r3, r9, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10230:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10232:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10234:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   10238:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1023a:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1023e:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   10242:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   10246:	d208      	bcs.n	1025a <sys_heap_aligned_alloc+0xe2>
		split_chunks(h, c0, c);
   10248:	4601      	mov	r1, r0
   1024a:	463a      	mov	r2, r7
   1024c:	4630      	mov	r0, r6
   1024e:	f00c fc8c 	bl	1cb6a <split_chunks>
		free_list_add(h, c0);
   10252:	4641      	mov	r1, r8
   10254:	4630      	mov	r0, r6
   10256:	f00c fd17 	bl	1cc88 <free_list_add>
	return c + chunk_size(h, c);
   1025a:	4639      	mov	r1, r7
   1025c:	4630      	mov	r0, r6
   1025e:	f00c fc2e 	bl	1cabe <chunk_size>
   10262:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   10264:	4284      	cmp	r4, r0
   10266:	d208      	bcs.n	1027a <sys_heap_aligned_alloc+0x102>
		split_chunks(h, c, c_end);
   10268:	4639      	mov	r1, r7
   1026a:	4630      	mov	r0, r6
   1026c:	4622      	mov	r2, r4
   1026e:	f00c fc7c 	bl	1cb6a <split_chunks>
		free_list_add(h, c_end);
   10272:	4621      	mov	r1, r4
   10274:	4630      	mov	r0, r6
   10276:	f00c fd07 	bl	1cc88 <free_list_add>
	set_chunk_used(h, c, true);
   1027a:	2201      	movs	r2, #1
   1027c:	4639      	mov	r1, r7
   1027e:	4630      	mov	r0, r6
   10280:	f00c fc23 	bl	1caca <set_chunk_used>
	return mem;
   10284:	e7a5      	b.n	101d2 <sys_heap_aligned_alloc+0x5a>
   10286:	bf00      	nop
   10288:	000200c0 	.word	0x000200c0
   1028c:	0001fff4 	.word	0x0001fff4
   10290:	0001feb5 	.word	0x0001feb5
   10294:	000200db 	.word	0x000200db

00010298 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   10298:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1029c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1029e:	4607      	mov	r7, r0
   102a0:	460d      	mov	r5, r1
   102a2:	4616      	mov	r6, r2
   102a4:	d212      	bcs.n	102cc <sys_heap_init+0x34>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   102a6:	2a04      	cmp	r2, #4
   102a8:	d80e      	bhi.n	102c8 <sys_heap_init+0x30>
   102aa:	4944      	ldr	r1, [pc, #272]	; (103bc <sys_heap_init+0x124>)
   102ac:	4a44      	ldr	r2, [pc, #272]	; (103c0 <sys_heap_init+0x128>)
   102ae:	4845      	ldr	r0, [pc, #276]	; (103c4 <sys_heap_init+0x12c>)
   102b0:	f44f 73c1 	mov.w	r3, #386	; 0x182
   102b4:	f00c fb75 	bl	1c9a2 <printk>
   102b8:	4843      	ldr	r0, [pc, #268]	; (103c8 <sys_heap_init+0x130>)
   102ba:	f00c fb72 	bl	1c9a2 <printk>
   102be:	4840      	ldr	r0, [pc, #256]	; (103c0 <sys_heap_init+0x128>)
   102c0:	f44f 71c1 	mov.w	r1, #386	; 0x182
   102c4:	f00c fdc7 	bl	1ce56 <assert_post_action>
   102c8:	2204      	movs	r2, #4
   102ca:	e000      	b.n	102ce <sys_heap_init+0x36>
   102cc:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
   102ce:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   102d0:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   102d2:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   102d4:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   102d8:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   102dc:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   102de:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   102e0:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   102e4:	d80e      	bhi.n	10304 <sys_heap_init+0x6c>
   102e6:	4939      	ldr	r1, [pc, #228]	; (103cc <sys_heap_init+0x134>)
   102e8:	4a35      	ldr	r2, [pc, #212]	; (103c0 <sys_heap_init+0x128>)
   102ea:	4836      	ldr	r0, [pc, #216]	; (103c4 <sys_heap_init+0x12c>)
   102ec:	f240 138b 	movw	r3, #395	; 0x18b
   102f0:	f00c fb57 	bl	1c9a2 <printk>
   102f4:	4834      	ldr	r0, [pc, #208]	; (103c8 <sys_heap_init+0x130>)
   102f6:	f00c fb54 	bl	1c9a2 <printk>
   102fa:	4831      	ldr	r0, [pc, #196]	; (103c0 <sys_heap_init+0x128>)
   102fc:	f240 118b 	movw	r1, #395	; 0x18b
   10300:	f00c fda9 	bl	1ce56 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   10304:	2300      	movs	r3, #0
	heap->heap = h;
   10306:	603c      	str	r4, [r7, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   10308:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   1030a:	60e3      	str	r3, [r4, #12]
	h->end_chunk = heap_sz;
   1030c:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1030e:	4620      	mov	r0, r4
   10310:	f00c fc01 	bl	1cb16 <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline chunksz_t min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   10314:	2101      	movs	r1, #1
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   10316:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   10318:	1c47      	adds	r7, r0, #1
   1031a:	4620      	mov	r0, r4
   1031c:	f00c fbf1 	bl	1cb02 <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10320:	351b      	adds	r5, #27
   10322:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   10324:	4428      	add	r0, r5
   10326:	42b0      	cmp	r0, r6
   10328:	d90e      	bls.n	10348 <sys_heap_init+0xb0>
   1032a:	4929      	ldr	r1, [pc, #164]	; (103d0 <sys_heap_init+0x138>)
   1032c:	4a24      	ldr	r2, [pc, #144]	; (103c0 <sys_heap_init+0x128>)
   1032e:	4825      	ldr	r0, [pc, #148]	; (103c4 <sys_heap_init+0x12c>)
   10330:	f44f 73cb 	mov.w	r3, #406	; 0x196
   10334:	f00c fb35 	bl	1c9a2 <printk>
   10338:	4823      	ldr	r0, [pc, #140]	; (103c8 <sys_heap_init+0x130>)
   1033a:	f00c fb32 	bl	1c9a2 <printk>
   1033e:	4820      	ldr	r0, [pc, #128]	; (103c0 <sys_heap_init+0x128>)
   10340:	f44f 71cb 	mov.w	r1, #406	; 0x196
   10344:	f00c fd87 	bl	1ce56 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   10348:	2300      	movs	r3, #0
   1034a:	f104 0210 	add.w	r2, r4, #16

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   1034e:	4619      	mov	r1, r3
	for (int i = 0; i < nb_buckets; i++) {
   10350:	42bb      	cmp	r3, r7
   10352:	db2f      	blt.n	103b4 <sys_heap_init+0x11c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   10354:	462a      	mov	r2, r5
   10356:	4620      	mov	r0, r4
   10358:	2100      	movs	r1, #0
   1035a:	f00c fbce 	bl	1cafa <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1035e:	2300      	movs	r3, #0
   10360:	461a      	mov	r2, r3
   10362:	4619      	mov	r1, r3
   10364:	4620      	mov	r0, r4
   10366:	f00c fb9f 	bl	1caa8 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1036a:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   1036c:	4620      	mov	r0, r4
   1036e:	2201      	movs	r2, #1
   10370:	2100      	movs	r1, #0
   10372:	f00c fbaa 	bl	1caca <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   10376:	463a      	mov	r2, r7
   10378:	4629      	mov	r1, r5
   1037a:	f00c fbbe 	bl	1cafa <set_chunk_size>
   1037e:	462b      	mov	r3, r5
   10380:	4629      	mov	r1, r5
   10382:	4620      	mov	r0, r4
   10384:	2200      	movs	r2, #0
   10386:	f00c fb8f 	bl	1caa8 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1038a:	4631      	mov	r1, r6
   1038c:	4620      	mov	r0, r4
   1038e:	2200      	movs	r2, #0
   10390:	f00c fbb3 	bl	1cafa <set_chunk_size>
   10394:	463b      	mov	r3, r7
   10396:	4631      	mov	r1, r6
   10398:	4620      	mov	r0, r4
   1039a:	2200      	movs	r2, #0
   1039c:	f00c fb84 	bl	1caa8 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   103a0:	4631      	mov	r1, r6
   103a2:	4620      	mov	r0, r4
   103a4:	2201      	movs	r2, #1
   103a6:	f00c fb90 	bl	1caca <set_chunk_used>

	free_list_add(h, chunk0_size);
   103aa:	4629      	mov	r1, r5
}
   103ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   103b0:	f00c bc6a 	b.w	1cc88 <free_list_add>
		h->buckets[i].next = 0;
   103b4:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   103b8:	3301      	adds	r3, #1
   103ba:	e7c9      	b.n	10350 <sys_heap_init+0xb8>
   103bc:	000200f8 	.word	0x000200f8
   103c0:	0001fff4 	.word	0x0001fff4
   103c4:	0001feb5 	.word	0x0001feb5
   103c8:	00020119 	.word	0x00020119
   103cc:	00020132 	.word	0x00020132
   103d0:	0002015b 	.word	0x0002015b

000103d4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   103d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
   103d6:	4e09      	ldr	r6, [pc, #36]	; (103fc <extract_decimal+0x28>)
   103d8:	6801      	ldr	r1, [r0, #0]
{
   103da:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
   103dc:	270a      	movs	r7, #10
	size_t val = 0;
   103de:	2000      	movs	r0, #0
   103e0:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
   103e2:	3101      	adds	r1, #1
   103e4:	7823      	ldrb	r3, [r4, #0]
   103e6:	5d9d      	ldrb	r5, [r3, r6]
   103e8:	076d      	lsls	r5, r5, #29
   103ea:	d401      	bmi.n	103f0 <extract_decimal+0x1c>
	}
	*str = sp;
   103ec:	6014      	str	r4, [r2, #0]
	return val;
}
   103ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   103f0:	fb07 3300 	mla	r3, r7, r0, r3
   103f4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   103f8:	e7f2      	b.n	103e0 <extract_decimal+0xc>
   103fa:	bf00      	nop
   103fc:	00021be1 	.word	0x00021be1

00010400 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   10400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10404:	4614      	mov	r4, r2
   10406:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   10408:	78d3      	ldrb	r3, [r2, #3]
   1040a:	4a24      	ldr	r2, [pc, #144]	; (1049c <encode_uint+0x9c>)
   1040c:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
   10410:	2b6f      	cmp	r3, #111	; 0x6f
   10412:	f00a 0203 	and.w	r2, sl, #3
{
   10416:	4606      	mov	r6, r0
   10418:	460f      	mov	r7, r1
   1041a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1041c:	d02d      	beq.n	1047a <encode_uint+0x7a>
   1041e:	d828      	bhi.n	10472 <encode_uint+0x72>
		return 16;
   10420:	2b58      	cmp	r3, #88	; 0x58
   10422:	bf14      	ite	ne
   10424:	250a      	movne	r5, #10
   10426:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   10428:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   1042c:	46aa      	mov	sl, r5
   1042e:	f04f 0b00 	mov.w	fp, #0
   10432:	4652      	mov	r2, sl
   10434:	465b      	mov	r3, fp
   10436:	4630      	mov	r0, r6
   10438:	4639      	mov	r1, r7
   1043a:	f7ef fe4f 	bl	dc <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   1043e:	2a09      	cmp	r2, #9
   10440:	b2d3      	uxtb	r3, r2
   10442:	d81f      	bhi.n	10484 <encode_uint+0x84>
   10444:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   10446:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10448:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1044a:	bf08      	it	eq
   1044c:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1044e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   10452:	d301      	bcc.n	10458 <encode_uint+0x58>
   10454:	45c8      	cmp	r8, r9
   10456:	d812      	bhi.n	1047e <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   10458:	7823      	ldrb	r3, [r4, #0]
   1045a:	069b      	lsls	r3, r3, #26
   1045c:	d505      	bpl.n	1046a <encode_uint+0x6a>
		if (radix == 8) {
   1045e:	2d08      	cmp	r5, #8
   10460:	d116      	bne.n	10490 <encode_uint+0x90>
			conv->altform_0 = true;
   10462:	78a3      	ldrb	r3, [r4, #2]
   10464:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   10468:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
   1046a:	4640      	mov	r0, r8
   1046c:	b003      	add	sp, #12
   1046e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   10472:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   10476:	2b70      	cmp	r3, #112	; 0x70
   10478:	e7d3      	b.n	10422 <encode_uint+0x22>
	switch (specifier) {
   1047a:	2508      	movs	r5, #8
   1047c:	e7d4      	b.n	10428 <encode_uint+0x28>
		value /= radix;
   1047e:	4606      	mov	r6, r0
   10480:	460f      	mov	r7, r1
   10482:	e7d6      	b.n	10432 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10484:	9a01      	ldr	r2, [sp, #4]
   10486:	2a01      	cmp	r2, #1
   10488:	bf0c      	ite	eq
   1048a:	3337      	addeq	r3, #55	; 0x37
   1048c:	3357      	addne	r3, #87	; 0x57
   1048e:	e7da      	b.n	10446 <encode_uint+0x46>
		} else if (radix == 16) {
   10490:	2d10      	cmp	r5, #16
   10492:	d1ea      	bne.n	1046a <encode_uint+0x6a>
			conv->altform_0c = true;
   10494:	78a3      	ldrb	r3, [r4, #2]
   10496:	f043 0310 	orr.w	r3, r3, #16
   1049a:	e7e5      	b.n	10468 <encode_uint+0x68>
   1049c:	00021be1 	.word	0x00021be1

000104a0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   104a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104a4:	4682      	mov	sl, r0
   104a6:	b093      	sub	sp, #76	; 0x4c
   104a8:	468b      	mov	fp, r1
   104aa:	4691      	mov	r9, r2
   104ac:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   104ae:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   104b0:	f899 0000 	ldrb.w	r0, [r9]
   104b4:	b908      	cbnz	r0, 104ba <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   104b6:	4628      	mov	r0, r5
   104b8:	e33a      	b.n	10b30 <cbvprintf+0x690>
		if (*fp != '%') {
   104ba:	f109 0301 	add.w	r3, r9, #1
   104be:	2825      	cmp	r0, #37	; 0x25
   104c0:	9302      	str	r3, [sp, #8]
   104c2:	d006      	beq.n	104d2 <cbvprintf+0x32>
			OUTC('%');
   104c4:	4659      	mov	r1, fp
   104c6:	47d0      	blx	sl
   104c8:	2800      	cmp	r0, #0
   104ca:	f2c0 8331 	blt.w	10b30 <cbvprintf+0x690>
   104ce:	3501      	adds	r5, #1
			break;
   104d0:	e1f1      	b.n	108b6 <cbvprintf+0x416>
		} state = {
   104d2:	2218      	movs	r2, #24
   104d4:	2100      	movs	r1, #0
   104d6:	a80c      	add	r0, sp, #48	; 0x30
   104d8:	f00f f879 	bl	1f5ce <memset>
	if (*sp == '%') {
   104dc:	f899 3001 	ldrb.w	r3, [r9, #1]
   104e0:	2b25      	cmp	r3, #37	; 0x25
   104e2:	d059      	beq.n	10598 <cbvprintf+0xf8>
   104e4:	9a02      	ldr	r2, [sp, #8]
   104e6:	4616      	mov	r6, r2
		switch (*sp) {
   104e8:	f812 3b01 	ldrb.w	r3, [r2], #1
   104ec:	2b2b      	cmp	r3, #43	; 0x2b
   104ee:	f000 808b 	beq.w	10608 <cbvprintf+0x168>
   104f2:	d879      	bhi.n	105e8 <cbvprintf+0x148>
   104f4:	2b20      	cmp	r3, #32
   104f6:	f000 808c 	beq.w	10612 <cbvprintf+0x172>
   104fa:	2b23      	cmp	r3, #35	; 0x23
   104fc:	f000 808e 	beq.w	1061c <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
   10500:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10504:	f003 0244 	and.w	r2, r3, #68	; 0x44
   10508:	2a44      	cmp	r2, #68	; 0x44
   1050a:	d103      	bne.n	10514 <cbvprintf+0x74>
		conv->flag_zero = false;
   1050c:	f36f 1386 	bfc	r3, #6, #1
   10510:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   10514:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10518:	9605      	str	r6, [sp, #20]
   1051a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1051e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   10522:	7833      	ldrb	r3, [r6, #0]
   10524:	2b2a      	cmp	r3, #42	; 0x2a
   10526:	d17e      	bne.n	10626 <cbvprintf+0x186>
		conv->width_star = true;
   10528:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1052c:	f043 0301 	orr.w	r3, r3, #1
   10530:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   10534:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   10536:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   10538:	781a      	ldrb	r2, [r3, #0]
   1053a:	2a2e      	cmp	r2, #46	; 0x2e
   1053c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   10540:	bf0c      	ite	eq
   10542:	2101      	moveq	r1, #1
   10544:	2100      	movne	r1, #0
   10546:	f361 0241 	bfi	r2, r1, #1, #1
   1054a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   1054e:	d10b      	bne.n	10568 <cbvprintf+0xc8>
	++sp;
   10550:	1c5a      	adds	r2, r3, #1
   10552:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   10554:	785a      	ldrb	r2, [r3, #1]
   10556:	2a2a      	cmp	r2, #42	; 0x2a
   10558:	d17b      	bne.n	10652 <cbvprintf+0x1b2>
		conv->prec_star = true;
   1055a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1055e:	f042 0204 	orr.w	r2, r2, #4
   10562:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   10566:	3302      	adds	r3, #2
	switch (*sp) {
   10568:	4619      	mov	r1, r3
   1056a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1056e:	286c      	cmp	r0, #108	; 0x6c
   10570:	f000 80b6 	beq.w	106e0 <cbvprintf+0x240>
   10574:	d87d      	bhi.n	10672 <cbvprintf+0x1d2>
   10576:	2868      	cmp	r0, #104	; 0x68
   10578:	f000 8084 	beq.w	10684 <cbvprintf+0x1e4>
   1057c:	286a      	cmp	r0, #106	; 0x6a
   1057e:	f000 80b9 	beq.w	106f4 <cbvprintf+0x254>
   10582:	284c      	cmp	r0, #76	; 0x4c
   10584:	f000 80bd 	beq.w	10702 <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
   10588:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1058c:	f36f 02c6 	bfc	r2, #3, #4
   10590:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   10594:	4619      	mov	r1, r3
   10596:	e080      	b.n	1069a <cbvprintf+0x1fa>
		conv->specifier = *sp++;
   10598:	f109 0202 	add.w	r2, r9, #2
   1059c:	9202      	str	r2, [sp, #8]
   1059e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   105a2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   105a6:	07d9      	lsls	r1, r3, #31
   105a8:	f140 8149 	bpl.w	1083e <cbvprintf+0x39e>
			width = va_arg(ap, int);
   105ac:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   105b0:	f1b8 0f00 	cmp.w	r8, #0
   105b4:	da07      	bge.n	105c6 <cbvprintf+0x126>
				conv->flag_dash = true;
   105b6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   105ba:	f042 0204 	orr.w	r2, r2, #4
   105be:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
   105c2:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   105c6:	075a      	lsls	r2, r3, #29
   105c8:	f140 8142 	bpl.w	10850 <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
   105cc:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   105d0:	2f00      	cmp	r7, #0
   105d2:	f280 8141 	bge.w	10858 <cbvprintf+0x3b8>
				conv->prec_present = false;
   105d6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   105da:	f36f 0341 	bfc	r3, #1, #1
   105de:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   105e2:	f04f 37ff 	mov.w	r7, #4294967295
   105e6:	e137      	b.n	10858 <cbvprintf+0x3b8>
		switch (*sp) {
   105e8:	2b2d      	cmp	r3, #45	; 0x2d
   105ea:	d006      	beq.n	105fa <cbvprintf+0x15a>
   105ec:	2b30      	cmp	r3, #48	; 0x30
   105ee:	d187      	bne.n	10500 <cbvprintf+0x60>
			conv->flag_zero = true;
   105f0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   105f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   105f8:	e003      	b.n	10602 <cbvprintf+0x162>
			conv->flag_dash = true;
   105fa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   105fe:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   10602:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   10606:	e76e      	b.n	104e6 <cbvprintf+0x46>
			conv->flag_plus = true;
   10608:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1060c:	f043 0308 	orr.w	r3, r3, #8
   10610:	e7f7      	b.n	10602 <cbvprintf+0x162>
			conv->flag_space = true;
   10612:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10616:	f043 0310 	orr.w	r3, r3, #16
   1061a:	e7f2      	b.n	10602 <cbvprintf+0x162>
			conv->flag_hash = true;
   1061c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10620:	f043 0320 	orr.w	r3, r3, #32
   10624:	e7ed      	b.n	10602 <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
   10626:	a805      	add	r0, sp, #20
   10628:	f7ff fed4 	bl	103d4 <extract_decimal>
	if (sp != wp) {
   1062c:	9b05      	ldr	r3, [sp, #20]
   1062e:	42b3      	cmp	r3, r6
   10630:	d081      	beq.n	10536 <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
   10632:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   10636:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   10638:	f3c1 0240 	ubfx	r2, r1, #1, #1
   1063c:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   10640:	0052      	lsls	r2, r2, #1
   10642:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10646:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   1064a:	430a      	orrs	r2, r1
   1064c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   10650:	e771      	b.n	10536 <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
   10652:	a805      	add	r0, sp, #20
   10654:	f7ff febe 	bl	103d4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   10658:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   1065c:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   1065e:	f3c3 0240 	ubfx	r2, r3, #1, #1
   10662:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   10666:	f360 0341 	bfi	r3, r0, #1, #1
   1066a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   1066e:	9b05      	ldr	r3, [sp, #20]
   10670:	e77a      	b.n	10568 <cbvprintf+0xc8>
	switch (*sp) {
   10672:	2874      	cmp	r0, #116	; 0x74
   10674:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   10678:	d040      	beq.n	106fc <cbvprintf+0x25c>
   1067a:	287a      	cmp	r0, #122	; 0x7a
   1067c:	d184      	bne.n	10588 <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
   1067e:	4613      	mov	r3, r2
   10680:	2206      	movs	r2, #6
   10682:	e028      	b.n	106d6 <cbvprintf+0x236>
		if (*++sp == 'h') {
   10684:	785a      	ldrb	r2, [r3, #1]
   10686:	2a68      	cmp	r2, #104	; 0x68
   10688:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1068c:	d121      	bne.n	106d2 <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
   1068e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   10690:	f361 02c6 	bfi	r2, r1, #3, #4
   10694:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   10698:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   1069a:	460b      	mov	r3, r1
   1069c:	f813 2b01 	ldrb.w	r2, [r3], #1
   106a0:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
   106a2:	2a78      	cmp	r2, #120	; 0x78
   106a4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
   106a8:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   106ac:	f200 80bf 	bhi.w	1082e <cbvprintf+0x38e>
   106b0:	2a57      	cmp	r2, #87	; 0x57
   106b2:	d833      	bhi.n	1071c <cbvprintf+0x27c>
   106b4:	2a41      	cmp	r2, #65	; 0x41
   106b6:	d003      	beq.n	106c0 <cbvprintf+0x220>
   106b8:	3a45      	subs	r2, #69	; 0x45
   106ba:	2a02      	cmp	r2, #2
   106bc:	f200 80b7 	bhi.w	1082e <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
   106c0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   106c4:	2204      	movs	r2, #4
   106c6:	f362 0302 	bfi	r3, r2, #0, #3
   106ca:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
   106ce:	2301      	movs	r3, #1
			break;
   106d0:	e084      	b.n	107dc <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
   106d2:	4613      	mov	r3, r2
   106d4:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   106d6:	f362 03c6 	bfi	r3, r2, #3, #4
   106da:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   106de:	e7dc      	b.n	1069a <cbvprintf+0x1fa>
		if (*++sp == 'l') {
   106e0:	785a      	ldrb	r2, [r3, #1]
   106e2:	2a6c      	cmp	r2, #108	; 0x6c
   106e4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   106e8:	d101      	bne.n	106ee <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
   106ea:	2104      	movs	r1, #4
   106ec:	e7d0      	b.n	10690 <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
   106ee:	4613      	mov	r3, r2
   106f0:	2203      	movs	r2, #3
   106f2:	e7f0      	b.n	106d6 <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
   106f4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   106f8:	2205      	movs	r2, #5
   106fa:	e7ec      	b.n	106d6 <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
   106fc:	4613      	mov	r3, r2
   106fe:	2207      	movs	r2, #7
   10700:	e7e9      	b.n	106d6 <cbvprintf+0x236>
		conv->unsupported = true;
   10702:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   10706:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1070a:	f023 0302 	bic.w	r3, r3, #2
   1070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   10712:	f043 0302 	orr.w	r3, r3, #2
   10716:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   1071a:	e7be      	b.n	1069a <cbvprintf+0x1fa>
   1071c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   10720:	2920      	cmp	r1, #32
   10722:	f200 8084 	bhi.w	1082e <cbvprintf+0x38e>
   10726:	a001      	add	r0, pc, #4	; (adr r0, 1072c <cbvprintf+0x28c>)
   10728:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1072c:	000107f1 	.word	0x000107f1
   10730:	0001082f 	.word	0x0001082f
   10734:	0001082f 	.word	0x0001082f
   10738:	0001082f 	.word	0x0001082f
   1073c:	0001082f 	.word	0x0001082f
   10740:	0001082f 	.word	0x0001082f
   10744:	0001082f 	.word	0x0001082f
   10748:	0001082f 	.word	0x0001082f
   1074c:	0001082f 	.word	0x0001082f
   10750:	000106c1 	.word	0x000106c1
   10754:	0001082f 	.word	0x0001082f
   10758:	000107f1 	.word	0x000107f1
   1075c:	000107b1 	.word	0x000107b1
   10760:	000106c1 	.word	0x000106c1
   10764:	000106c1 	.word	0x000106c1
   10768:	000106c1 	.word	0x000106c1
   1076c:	0001082f 	.word	0x0001082f
   10770:	000107b1 	.word	0x000107b1
   10774:	0001082f 	.word	0x0001082f
   10778:	0001082f 	.word	0x0001082f
   1077c:	0001082f 	.word	0x0001082f
   10780:	0001082f 	.word	0x0001082f
   10784:	000107f9 	.word	0x000107f9
   10788:	000107f1 	.word	0x000107f1
   1078c:	00010815 	.word	0x00010815
   10790:	0001082f 	.word	0x0001082f
   10794:	0001082f 	.word	0x0001082f
   10798:	00010815 	.word	0x00010815
   1079c:	0001082f 	.word	0x0001082f
   107a0:	000107f1 	.word	0x000107f1
   107a4:	0001082f 	.word	0x0001082f
   107a8:	0001082f 	.word	0x0001082f
   107ac:	000107f1 	.word	0x000107f1
		conv->specifier_cat = SPECIFIER_SINT;
   107b0:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   107b4:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   107b6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   107ba:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   107be:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   107c0:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
   107c4:	bf02      	ittt	eq
   107c6:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   107ca:	f041 0101 	orreq.w	r1, r1, #1
   107ce:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   107d2:	2a63      	cmp	r2, #99	; 0x63
   107d4:	d131      	bne.n	1083a <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   107d6:	3b00      	subs	r3, #0
   107d8:	bf18      	it	ne
   107da:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   107dc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   107e0:	f3c2 0140 	ubfx	r1, r2, #1, #1
   107e4:	430b      	orrs	r3, r1
   107e6:	f363 0241 	bfi	r2, r3, #1, #1
   107ea:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   107ee:	e6d8      	b.n	105a2 <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
   107f0:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   107f4:	2002      	movs	r0, #2
   107f6:	e7de      	b.n	107b6 <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
   107f8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   107fc:	f003 0378 	and.w	r3, r3, #120	; 0x78
   10800:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   10804:	2103      	movs	r1, #3
   10806:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1080a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   1080c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   10810:	4143      	adcs	r3, r0
   10812:	e7e3      	b.n	107dc <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
   10814:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   10818:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   1081a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1081e:	f361 0202 	bfi	r2, r1, #0, #3
   10822:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   10826:	bf14      	ite	ne
   10828:	2301      	movne	r3, #1
   1082a:	2300      	moveq	r3, #0
   1082c:	e7d6      	b.n	107dc <cbvprintf+0x33c>
		conv->invalid = true;
   1082e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10832:	f043 0301 	orr.w	r3, r3, #1
   10836:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
   1083a:	2300      	movs	r3, #0
   1083c:	e7ce      	b.n	107dc <cbvprintf+0x33c>
		} else if (conv->width_present) {
   1083e:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   10842:	2a00      	cmp	r2, #0
			width = conv->width_value;
   10844:	bfb4      	ite	lt
   10846:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
   1084a:	f04f 38ff 	movge.w	r8, #4294967295
   1084e:	e6ba      	b.n	105c6 <cbvprintf+0x126>
		} else if (conv->prec_present) {
   10850:	079f      	lsls	r7, r3, #30
   10852:	f57f aec6 	bpl.w	105e2 <cbvprintf+0x142>
			precision = conv->prec_value;
   10856:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
   10858:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
   1085c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1085e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
   10862:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
   10866:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1086a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1086c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   10870:	d137      	bne.n	108e2 <cbvprintf+0x442>
			switch (length_mod) {
   10872:	1ecb      	subs	r3, r1, #3
   10874:	2b04      	cmp	r3, #4
   10876:	d821      	bhi.n	108bc <cbvprintf+0x41c>
   10878:	e8df f003 	tbb	[pc, r3]
   1087c:	20070703 	.word	0x20070703
   10880:	20          	.byte	0x20
   10881:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   10882:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   10886:	17d3      	asrs	r3, r2, #31
   10888:	e004      	b.n	10894 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
   1088a:	3407      	adds	r4, #7
   1088c:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   10890:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   10894:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   10898:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1089c:	f013 0603 	ands.w	r6, r3, #3
   108a0:	d055      	beq.n	1094e <cbvprintf+0x4ae>
			OUTS(sp, fp);
   108a2:	9b02      	ldr	r3, [sp, #8]
   108a4:	464a      	mov	r2, r9
   108a6:	4659      	mov	r1, fp
   108a8:	4650      	mov	r0, sl
   108aa:	f00c fabe 	bl	1ce2a <outs>
   108ae:	2800      	cmp	r0, #0
   108b0:	f2c0 813e 	blt.w	10b30 <cbvprintf+0x690>
   108b4:	4405      	add	r5, r0
			OUTS(bps, bpe);
   108b6:	f8dd 9008 	ldr.w	r9, [sp, #8]
   108ba:	e5f9      	b.n	104b0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   108bc:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   108c0:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   108c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
   108c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   108ca:	d105      	bne.n	108d8 <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
   108cc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   108d0:	930c      	str	r3, [sp, #48]	; 0x30
   108d2:	2300      	movs	r3, #0
   108d4:	930d      	str	r3, [sp, #52]	; 0x34
   108d6:	e7df      	b.n	10898 <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
   108d8:	2902      	cmp	r1, #2
   108da:	d1dd      	bne.n	10898 <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
   108dc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
   108e0:	e7d1      	b.n	10886 <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   108e2:	2b02      	cmp	r3, #2
   108e4:	d123      	bne.n	1092e <cbvprintf+0x48e>
			switch (length_mod) {
   108e6:	1ecb      	subs	r3, r1, #3
   108e8:	2b04      	cmp	r3, #4
   108ea:	d813      	bhi.n	10914 <cbvprintf+0x474>
   108ec:	e8df f003 	tbb	[pc, r3]
   108f0:	120a0a03 	.word	0x120a0a03
   108f4:	12          	.byte	0x12
   108f5:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   108f6:	6822      	ldr	r2, [r4, #0]
   108f8:	920c      	str	r2, [sp, #48]	; 0x30
   108fa:	2300      	movs	r3, #0
   108fc:	1d20      	adds	r0, r4, #4
   108fe:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   10900:	4604      	mov	r4, r0
   10902:	e7c9      	b.n	10898 <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
   10904:	3407      	adds	r4, #7
   10906:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   1090a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   1090e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   10912:	e7f5      	b.n	10900 <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
   10914:	f854 3b04 	ldr.w	r3, [r4], #4
   10918:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   1091a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   1091c:	f04f 0300 	mov.w	r3, #0
   10920:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   10922:	d0d3      	beq.n	108cc <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
   10924:	2902      	cmp	r1, #2
   10926:	d1b7      	bne.n	10898 <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
   10928:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1092c:	e7d0      	b.n	108d0 <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   1092e:	2b04      	cmp	r3, #4
   10930:	d107      	bne.n	10942 <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
   10932:	3407      	adds	r4, #7
   10934:	f024 0407 	bic.w	r4, r4, #7
   10938:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   1093c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   10940:	e7aa      	b.n	10898 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
   10942:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   10944:	bf04      	itt	eq
   10946:	f854 3b04 	ldreq.w	r3, [r4], #4
   1094a:	930c      	streq	r3, [sp, #48]	; 0x30
   1094c:	e7a4      	b.n	10898 <cbvprintf+0x3f8>
		switch (conv->specifier) {
   1094e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   10952:	2878      	cmp	r0, #120	; 0x78
   10954:	d8af      	bhi.n	108b6 <cbvprintf+0x416>
   10956:	2862      	cmp	r0, #98	; 0x62
   10958:	d820      	bhi.n	1099c <cbvprintf+0x4fc>
   1095a:	2825      	cmp	r0, #37	; 0x25
   1095c:	f43f adb2 	beq.w	104c4 <cbvprintf+0x24>
   10960:	2858      	cmp	r0, #88	; 0x58
   10962:	d1a8      	bne.n	108b6 <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
   10964:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   10968:	9300      	str	r3, [sp, #0]
   1096a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1096e:	ab06      	add	r3, sp, #24
   10970:	aa0e      	add	r2, sp, #56	; 0x38
   10972:	f7ff fd45 	bl	10400 <encode_uint>
   10976:	4681      	mov	r9, r0
			if (precision >= 0) {
   10978:	2f00      	cmp	r7, #0
   1097a:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1097e:	db0b      	blt.n	10998 <cbvprintf+0x4f8>
				conv->flag_zero = false;
   10980:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   10984:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   10988:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1098c:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   1098e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   10992:	d901      	bls.n	10998 <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
   10994:	1aff      	subs	r7, r7, r3
   10996:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   10998:	4607      	mov	r7, r0
   1099a:	e03c      	b.n	10a16 <cbvprintf+0x576>
   1099c:	3863      	subs	r0, #99	; 0x63
   1099e:	2815      	cmp	r0, #21
   109a0:	d889      	bhi.n	108b6 <cbvprintf+0x416>
   109a2:	a201      	add	r2, pc, #4	; (adr r2, 109a8 <cbvprintf+0x508>)
   109a4:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   109a8:	00010a27 	.word	0x00010a27
   109ac:	00010a89 	.word	0x00010a89
   109b0:	000108b7 	.word	0x000108b7
   109b4:	000108b7 	.word	0x000108b7
   109b8:	000108b7 	.word	0x000108b7
   109bc:	000108b7 	.word	0x000108b7
   109c0:	00010a89 	.word	0x00010a89
   109c4:	000108b7 	.word	0x000108b7
   109c8:	000108b7 	.word	0x000108b7
   109cc:	000108b7 	.word	0x000108b7
   109d0:	000108b7 	.word	0x000108b7
   109d4:	00010ae7 	.word	0x00010ae7
   109d8:	00010ab5 	.word	0x00010ab5
   109dc:	00010ab9 	.word	0x00010ab9
   109e0:	000108b7 	.word	0x000108b7
   109e4:	000108b7 	.word	0x000108b7
   109e8:	00010a01 	.word	0x00010a01
   109ec:	000108b7 	.word	0x000108b7
   109f0:	00010ab5 	.word	0x00010ab5
   109f4:	000108b7 	.word	0x000108b7
   109f8:	000108b7 	.word	0x000108b7
   109fc:	00010ab5 	.word	0x00010ab5
			if (precision >= 0) {
   10a00:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   10a02:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   10a06:	db0a      	blt.n	10a1e <cbvprintf+0x57e>
				len = strnlen(bps, precision);
   10a08:	4639      	mov	r1, r7
   10a0a:	4648      	mov	r0, r9
   10a0c:	f00e fe01 	bl	1f612 <strnlen>
			bpe = bps + len;
   10a10:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
   10a14:	2600      	movs	r6, #0
		if (bps == NULL) {
   10a16:	f1b9 0f00 	cmp.w	r9, #0
   10a1a:	d10c      	bne.n	10a36 <cbvprintf+0x596>
   10a1c:	e74b      	b.n	108b6 <cbvprintf+0x416>
				len = strlen(bps);
   10a1e:	4648      	mov	r0, r9
   10a20:	f7fb fbda 	bl	c1d8 <strlen>
   10a24:	e7f4      	b.n	10a10 <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   10a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10a28:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
   10a2c:	2600      	movs	r6, #0
			bpe = buf + 1;
   10a2e:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
   10a32:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   10a36:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   10a3a:	b106      	cbz	r6, 10a3e <cbvprintf+0x59e>
			nj_len += 1U;
   10a3c:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   10a3e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   10a42:	06d0      	lsls	r0, r2, #27
   10a44:	d569      	bpl.n	10b1a <cbvprintf+0x67a>
			nj_len += 2U;
   10a46:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   10a48:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   10a4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   10a4c:	bf48      	it	mi
   10a4e:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   10a50:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   10a52:	bf48      	it	mi
   10a54:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   10a56:	f1b8 0f00 	cmp.w	r8, #0
   10a5a:	dd76      	ble.n	10b4a <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
   10a5c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   10a60:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   10a64:	f3c2 0380 	ubfx	r3, r2, #2, #1
   10a68:	9303      	str	r3, [sp, #12]
   10a6a:	0753      	lsls	r3, r2, #29
   10a6c:	d46d      	bmi.n	10b4a <cbvprintf+0x6aa>
				if (conv->flag_zero) {
   10a6e:	0650      	lsls	r0, r2, #25
   10a70:	d561      	bpl.n	10b36 <cbvprintf+0x696>
					if (sign != 0) {
   10a72:	b13e      	cbz	r6, 10a84 <cbvprintf+0x5e4>
						OUTC(sign);
   10a74:	4659      	mov	r1, fp
   10a76:	4630      	mov	r0, r6
   10a78:	47d0      	blx	sl
   10a7a:	2800      	cmp	r0, #0
   10a7c:	db58      	blt.n	10b30 <cbvprintf+0x690>
						sign = 0;
   10a7e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   10a80:	3501      	adds	r5, #1
						sign = 0;
   10a82:	461e      	mov	r6, r3
					pad = '0';
   10a84:	2330      	movs	r3, #48	; 0x30
   10a86:	e057      	b.n	10b38 <cbvprintf+0x698>
			if (conv->flag_plus) {
   10a88:	071e      	lsls	r6, r3, #28
   10a8a:	d411      	bmi.n	10ab0 <cbvprintf+0x610>
				sign = ' ';
   10a8c:	f013 0610 	ands.w	r6, r3, #16
   10a90:	bf18      	it	ne
   10a92:	2620      	movne	r6, #32
			sint = value->sint;
   10a94:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   10a98:	2a00      	cmp	r2, #0
   10a9a:	f173 0100 	sbcs.w	r1, r3, #0
   10a9e:	f6bf af61 	bge.w	10964 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
   10aa2:	4252      	negs	r2, r2
   10aa4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10aa8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
   10aac:	262d      	movs	r6, #45	; 0x2d
   10aae:	e759      	b.n	10964 <cbvprintf+0x4c4>
				sign = '+';
   10ab0:	262b      	movs	r6, #43	; 0x2b
   10ab2:	e7ef      	b.n	10a94 <cbvprintf+0x5f4>
		switch (conv->specifier) {
   10ab4:	2600      	movs	r6, #0
   10ab6:	e755      	b.n	10964 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
   10ab8:	980c      	ldr	r0, [sp, #48]	; 0x30
   10aba:	b348      	cbz	r0, 10b10 <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10abc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   10ac0:	9300      	str	r3, [sp, #0]
   10ac2:	aa0e      	add	r2, sp, #56	; 0x38
   10ac4:	ab06      	add	r3, sp, #24
   10ac6:	2100      	movs	r1, #0
   10ac8:	f7ff fc9a 	bl	10400 <encode_uint>
				conv->altform_0c = true;
   10acc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   10ad0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   10ad4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   10ad8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10adc:	4681      	mov	r9, r0
				conv->altform_0c = true;
   10ade:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
   10ae2:	2600      	movs	r6, #0
				goto prec_int_pad0;
   10ae4:	e748      	b.n	10978 <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
   10ae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   10ae8:	2907      	cmp	r1, #7
   10aea:	f63f aee4 	bhi.w	108b6 <cbvprintf+0x416>
   10aee:	e8df f001 	tbb	[pc, r1]
   10af2:	040d      	.short	0x040d
   10af4:	08080d06 	.word	0x08080d06
   10af8:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   10afa:	701d      	strb	r5, [r3, #0]
		break;
   10afc:	e6db      	b.n	108b6 <cbvprintf+0x416>
		*(short *)dp = (short)count;
   10afe:	801d      	strh	r5, [r3, #0]
		break;
   10b00:	e6d9      	b.n	108b6 <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
   10b02:	4628      	mov	r0, r5
   10b04:	17e9      	asrs	r1, r5, #31
   10b06:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   10b0a:	e6d4      	b.n	108b6 <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   10b0c:	601d      	str	r5, [r3, #0]
		break;
   10b0e:	e6d2      	b.n	108b6 <cbvprintf+0x416>
			bpe = bps + 5;
   10b10:	4f2e      	ldr	r7, [pc, #184]	; (10bcc <cbvprintf+0x72c>)
   10b12:	4606      	mov	r6, r0
			bps = "(nil)";
   10b14:	f1a7 0905 	sub.w	r9, r7, #5
   10b18:	e78d      	b.n	10a36 <cbvprintf+0x596>
		} else if (conv->altform_0) {
   10b1a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   10b1c:	bf48      	it	mi
   10b1e:	3301      	addmi	r3, #1
   10b20:	e792      	b.n	10a48 <cbvprintf+0x5a8>
					OUTC(pad);
   10b22:	4618      	mov	r0, r3
   10b24:	4659      	mov	r1, fp
   10b26:	9303      	str	r3, [sp, #12]
   10b28:	47d0      	blx	sl
   10b2a:	2800      	cmp	r0, #0
   10b2c:	9b03      	ldr	r3, [sp, #12]
   10b2e:	da04      	bge.n	10b3a <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
   10b30:	b013      	add	sp, #76	; 0x4c
   10b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   10b36:	2320      	movs	r3, #32
   10b38:	4445      	add	r5, r8
   10b3a:	4642      	mov	r2, r8
				while (width-- > 0) {
   10b3c:	2a00      	cmp	r2, #0
   10b3e:	eba5 0108 	sub.w	r1, r5, r8
   10b42:	f108 38ff 	add.w	r8, r8, #4294967295
   10b46:	dcec      	bgt.n	10b22 <cbvprintf+0x682>
   10b48:	460d      	mov	r5, r1
		if (sign != 0) {
   10b4a:	b12e      	cbz	r6, 10b58 <cbvprintf+0x6b8>
			OUTC(sign);
   10b4c:	4659      	mov	r1, fp
   10b4e:	4630      	mov	r0, r6
   10b50:	47d0      	blx	sl
   10b52:	2800      	cmp	r0, #0
   10b54:	dbec      	blt.n	10b30 <cbvprintf+0x690>
   10b56:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   10b58:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   10b5c:	06d9      	lsls	r1, r3, #27
   10b5e:	d401      	bmi.n	10b64 <cbvprintf+0x6c4>
   10b60:	071a      	lsls	r2, r3, #28
   10b62:	d505      	bpl.n	10b70 <cbvprintf+0x6d0>
				OUTC('0');
   10b64:	4659      	mov	r1, fp
   10b66:	2030      	movs	r0, #48	; 0x30
   10b68:	47d0      	blx	sl
   10b6a:	2800      	cmp	r0, #0
   10b6c:	dbe0      	blt.n	10b30 <cbvprintf+0x690>
   10b6e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   10b70:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   10b74:	06db      	lsls	r3, r3, #27
   10b76:	d506      	bpl.n	10b86 <cbvprintf+0x6e6>
				OUTC(conv->specifier);
   10b78:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   10b7c:	4659      	mov	r1, fp
   10b7e:	47d0      	blx	sl
   10b80:	2800      	cmp	r0, #0
   10b82:	dbd5      	blt.n	10b30 <cbvprintf+0x690>
   10b84:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   10b86:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   10b88:	442e      	add	r6, r5
   10b8a:	1b73      	subs	r3, r6, r5
   10b8c:	2b00      	cmp	r3, #0
   10b8e:	dc15      	bgt.n	10bbc <cbvprintf+0x71c>
			OUTS(bps, bpe);
   10b90:	463b      	mov	r3, r7
   10b92:	464a      	mov	r2, r9
   10b94:	4659      	mov	r1, fp
   10b96:	4650      	mov	r0, sl
   10b98:	f00c f947 	bl	1ce2a <outs>
   10b9c:	2800      	cmp	r0, #0
   10b9e:	dbc7      	blt.n	10b30 <cbvprintf+0x690>
   10ba0:	4405      	add	r5, r0
		while (width > 0) {
   10ba2:	44a8      	add	r8, r5
   10ba4:	eba8 0305 	sub.w	r3, r8, r5
   10ba8:	2b00      	cmp	r3, #0
   10baa:	f77f ae84 	ble.w	108b6 <cbvprintf+0x416>
			OUTC(' ');
   10bae:	4659      	mov	r1, fp
   10bb0:	2020      	movs	r0, #32
   10bb2:	47d0      	blx	sl
   10bb4:	2800      	cmp	r0, #0
   10bb6:	dbbb      	blt.n	10b30 <cbvprintf+0x690>
   10bb8:	3501      	adds	r5, #1
			--width;
   10bba:	e7f3      	b.n	10ba4 <cbvprintf+0x704>
				OUTC('0');
   10bbc:	4659      	mov	r1, fp
   10bbe:	2030      	movs	r0, #48	; 0x30
   10bc0:	47d0      	blx	sl
   10bc2:	2800      	cmp	r0, #0
   10bc4:	dbb4      	blt.n	10b30 <cbvprintf+0x690>
   10bc6:	3501      	adds	r5, #1
   10bc8:	e7df      	b.n	10b8a <cbvprintf+0x6ea>
   10bca:	bf00      	nop
   10bcc:	0002018b 	.word	0x0002018b

00010bd0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10bd2:	4605      	mov	r5, r0
	__asm__ volatile(
   10bd4:	f04f 0340 	mov.w	r3, #64	; 0x40
   10bd8:	f3ef 8611 	mrs	r6, BASEPRI
   10bdc:	f383 8812 	msr	BASEPRI_MAX, r3
   10be0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10be4:	481e      	ldr	r0, [pc, #120]	; (10c60 <pm_state_notify+0x90>)
   10be6:	f008 fbfb 	bl	193e0 <z_spin_lock_valid>
   10bea:	b968      	cbnz	r0, 10c08 <pm_state_notify+0x38>
   10bec:	4a1d      	ldr	r2, [pc, #116]	; (10c64 <pm_state_notify+0x94>)
   10bee:	491e      	ldr	r1, [pc, #120]	; (10c68 <pm_state_notify+0x98>)
   10bf0:	481e      	ldr	r0, [pc, #120]	; (10c6c <pm_state_notify+0x9c>)
   10bf2:	2381      	movs	r3, #129	; 0x81
   10bf4:	f00b fed5 	bl	1c9a2 <printk>
   10bf8:	4919      	ldr	r1, [pc, #100]	; (10c60 <pm_state_notify+0x90>)
   10bfa:	481d      	ldr	r0, [pc, #116]	; (10c70 <pm_state_notify+0xa0>)
   10bfc:	f00b fed1 	bl	1c9a2 <printk>
   10c00:	4818      	ldr	r0, [pc, #96]	; (10c64 <pm_state_notify+0x94>)
   10c02:	2181      	movs	r1, #129	; 0x81
   10c04:	f00c f927 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   10c08:	4815      	ldr	r0, [pc, #84]	; (10c60 <pm_state_notify+0x90>)
   10c0a:	f008 fc07 	bl	1941c <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10c0e:	4b19      	ldr	r3, [pc, #100]	; (10c74 <pm_state_notify+0xa4>)
   10c10:	681c      	ldr	r4, [r3, #0]
   10c12:	2c00      	cmp	r4, #0
   10c14:	bf38      	it	cc
   10c16:	2400      	movcc	r4, #0
   10c18:	b15c      	cbz	r4, 10c32 <pm_state_notify+0x62>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   10c1a:	4f17      	ldr	r7, [pc, #92]	; (10c78 <pm_state_notify+0xa8>)
			callback = notifier->state_exit;
   10c1c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   10c20:	2d00      	cmp	r5, #0
   10c22:	bf08      	it	eq
   10c24:	4613      	moveq	r3, r2
		if (callback) {
   10c26:	b10b      	cbz	r3, 10c2c <pm_state_notify+0x5c>
			callback(z_power_state.state);
   10c28:	7838      	ldrb	r0, [r7, #0]
   10c2a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10c2c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10c2e:	2c00      	cmp	r4, #0
   10c30:	d1f4      	bne.n	10c1c <pm_state_notify+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10c32:	480b      	ldr	r0, [pc, #44]	; (10c60 <pm_state_notify+0x90>)
   10c34:	f008 fbe2 	bl	193fc <z_spin_unlock_valid>
   10c38:	b968      	cbnz	r0, 10c56 <pm_state_notify+0x86>
   10c3a:	4a0a      	ldr	r2, [pc, #40]	; (10c64 <pm_state_notify+0x94>)
   10c3c:	490f      	ldr	r1, [pc, #60]	; (10c7c <pm_state_notify+0xac>)
   10c3e:	480b      	ldr	r0, [pc, #44]	; (10c6c <pm_state_notify+0x9c>)
   10c40:	23ac      	movs	r3, #172	; 0xac
   10c42:	f00b feae 	bl	1c9a2 <printk>
   10c46:	4906      	ldr	r1, [pc, #24]	; (10c60 <pm_state_notify+0x90>)
   10c48:	480d      	ldr	r0, [pc, #52]	; (10c80 <pm_state_notify+0xb0>)
   10c4a:	f00b feaa 	bl	1c9a2 <printk>
   10c4e:	4805      	ldr	r0, [pc, #20]	; (10c64 <pm_state_notify+0x94>)
   10c50:	21ac      	movs	r1, #172	; 0xac
   10c52:	f00c f900 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   10c56:	f386 8811 	msr	BASEPRI, r6
   10c5a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   10c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10c60:	20001b88 	.word	0x20001b88
   10c64:	0001ff75 	.word	0x0001ff75
   10c68:	0001ffc7 	.word	0x0001ffc7
   10c6c:	0001feb5 	.word	0x0001feb5
   10c70:	0001ffdc 	.word	0x0001ffdc
   10c74:	20001b8c 	.word	0x20001b8c
   10c78:	20001b94 	.word	0x20001b94
   10c7c:	0001ff9b 	.word	0x0001ff9b
   10c80:	0001ffb2 	.word	0x0001ffb2

00010c84 <pm_system_resume>:

void pm_system_resume(void)
{
   10c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   10c86:	4b0f      	ldr	r3, [pc, #60]	; (10cc4 <pm_system_resume+0x40>)
   10c88:	681a      	ldr	r2, [r3, #0]
   10c8a:	b9ba      	cbnz	r2, 10cbc <pm_system_resume+0x38>
		post_ops_done = 1;
   10c8c:	2201      	movs	r2, #1
   10c8e:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   10c90:	4a0d      	ldr	r2, [pc, #52]	; (10cc8 <pm_system_resume+0x44>)
   10c92:	ca07      	ldmia	r2, {r0, r1, r2}
   10c94:	ab01      	add	r3, sp, #4
   10c96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   10c9a:	4a0c      	ldr	r2, [pc, #48]	; (10ccc <pm_system_resume+0x48>)
   10c9c:	b14a      	cbz	r2, 10cb2 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
   10c9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   10ca2:	f00c fae3 	bl	1d26c <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   10ca6:	2000      	movs	r0, #0
	}
}
   10ca8:	b005      	add	sp, #20
   10caa:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
   10cae:	f7ff bf8f 	b.w	10bd0 <pm_state_notify>
   10cb2:	f382 8811 	msr	BASEPRI, r2
   10cb6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10cba:	e7f4      	b.n	10ca6 <pm_system_resume+0x22>
}
   10cbc:	b005      	add	sp, #20
   10cbe:	f85d fb04 	ldr.w	pc, [sp], #4
   10cc2:	bf00      	nop
   10cc4:	2000041c 	.word	0x2000041c
   10cc8:	20001b94 	.word	0x20001b94
   10ccc:	0001d26d 	.word	0x0001d26d

00010cd0 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   10cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cd2:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   10cd4:	466e      	mov	r6, sp
   10cd6:	4601      	mov	r1, r0
{
   10cd8:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   10cda:	4630      	mov	r0, r6
   10cdc:	f00c f8c3 	bl	1ce66 <pm_policy_next_state>
   10ce0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10ce4:	4c1f      	ldr	r4, [pc, #124]	; (10d64 <pm_system_suspend+0x94>)
   10ce6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   10cea:	7820      	ldrb	r0, [r4, #0]
   10cec:	2800      	cmp	r0, #0
   10cee:	d037      	beq.n	10d60 <pm_system_suspend+0x90>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   10cf0:	4b1d      	ldr	r3, [pc, #116]	; (10d68 <pm_system_suspend+0x98>)
   10cf2:	2000      	movs	r0, #0
   10cf4:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   10cf6:	1c6b      	adds	r3, r5, #1
   10cf8:	d01d      	beq.n	10d36 <pm_system_suspend+0x66>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
   10cfa:	4291      	cmp	r1, r2
   10cfc:	d20c      	bcs.n	10d18 <pm_system_suspend+0x48>
   10cfe:	491b      	ldr	r1, [pc, #108]	; (10d6c <pm_system_suspend+0x9c>)
   10d00:	4a1b      	ldr	r2, [pc, #108]	; (10d70 <pm_system_suspend+0xa0>)
   10d02:	481c      	ldr	r0, [pc, #112]	; (10d74 <pm_system_suspend+0xa4>)
   10d04:	23ca      	movs	r3, #202	; 0xca
   10d06:	f00b fe4c 	bl	1c9a2 <printk>
   10d0a:	481b      	ldr	r0, [pc, #108]	; (10d78 <pm_system_suspend+0xa8>)
   10d0c:	f00b fe49 	bl	1c9a2 <printk>
   10d10:	4817      	ldr	r0, [pc, #92]	; (10d70 <pm_system_suspend+0xa0>)
   10d12:	21ca      	movs	r1, #202	; 0xca
   10d14:	f00c f89f 	bl	1ce56 <assert_post_action>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   10d18:	68a7      	ldr	r7, [r4, #8]
   10d1a:	4818      	ldr	r0, [pc, #96]	; (10d7c <pm_system_suspend+0xac>)
   10d1c:	4a18      	ldr	r2, [pc, #96]	; (10d80 <pm_system_suspend+0xb0>)
   10d1e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   10d22:	2100      	movs	r1, #0
   10d24:	2300      	movs	r3, #0
   10d26:	fbe6 0107 	umlal	r0, r1, r6, r7
   10d2a:	f7ef f9d7 	bl	dc <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   10d2e:	2101      	movs	r1, #1
   10d30:	1a28      	subs	r0, r5, r0
   10d32:	f00b f83b 	bl	1bdac <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10d36:	f009 fd8b 	bl	1a850 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   10d3a:	2001      	movs	r0, #1
   10d3c:	f7ff ff48 	bl	10bd0 <pm_state_notify>
	pm_state_set(z_power_state);
   10d40:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   10d44:	ab05      	add	r3, sp, #20
   10d46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   10d4a:	4a0e      	ldr	r2, [pc, #56]	; (10d84 <pm_system_suspend+0xb4>)
   10d4c:	b11a      	cbz	r2, 10d56 <pm_system_suspend+0x86>
		pm_power_state_set(info);
   10d4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   10d52:	f00c fa78 	bl	1d246 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   10d56:	f7ff ff95 	bl	10c84 <pm_system_resume>
	k_sched_unlock();
   10d5a:	f00a fabd 	bl	1b2d8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   10d5e:	7820      	ldrb	r0, [r4, #0]
}
   10d60:	b009      	add	sp, #36	; 0x24
   10d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d64:	20001b94 	.word	0x20001b94
   10d68:	2000041c 	.word	0x2000041c
   10d6c:	00020202 	.word	0x00020202
   10d70:	0002018c 	.word	0x0002018c
   10d74:	0001feb5 	.word	0x0001feb5
   10d78:	00020242 	.word	0x00020242
   10d7c:	000f423f 	.word	0x000f423f
   10d80:	000f4240 	.word	0x000f4240
   10d84:	0001d247 	.word	0x0001d247

00010d88 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
   10d88:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   10d8a:	4d06      	ldr	r5, [pc, #24]	; (10da4 <scan_default_param_set+0x1c>)
   10d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   10d8e:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   10d90:	ac01      	add	r4, sp, #4
   10d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
   10d94:	ae01      	add	r6, sp, #4
   10d96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10d98:	4c03      	ldr	r4, [pc, #12]	; (10da8 <scan_default_param_set+0x20>)
   10d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10d9c:	682b      	ldr	r3, [r5, #0]
   10d9e:	6023      	str	r3, [r4, #0]
}
   10da0:	b006      	add	sp, #24
   10da2:	bd70      	pop	{r4, r5, r6, pc}
   10da4:	0001f8c0 	.word	0x0001f8c0
   10da8:	20001bd8 	.word	0x20001bd8

00010dac <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
   10dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
   10db0:	7803      	ldrb	r3, [r0, #0]
   10db2:	2b09      	cmp	r3, #9
{
   10db4:	4605      	mov	r5, r0
   10db6:	460c      	mov	r4, r1
	switch (data->type) {
   10db8:	d11c      	bne.n	10df4 <adv_data_found+0x48>
	return CONFIG_BT_SCAN_NAME_CNT && bt_scan.scan_filters.name.enabled;
   10dba:	4e11      	ldr	r6, [pc, #68]	; (10e00 <adv_data_found+0x54>)
	if (is_name_filter_enabled()) {
   10dbc:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   10dc0:	b1c3      	cbz	r3, 10df4 <adv_data_found+0x48>
	uint8_t counter = bt_scan.scan_filters.name.cnt;
   10dc2:	f896 a020 	ldrb.w	sl, [r6, #32]
	uint8_t data_len = data->data_len;
   10dc6:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
   10dca:	2700      	movs	r7, #0
   10dcc:	4557      	cmp	r7, sl
   10dce:	d211      	bcs.n	10df4 <adv_data_found+0x48>
		if (adv_name_cmp(data->data,
   10dd0:	eb06 1947 	add.w	r9, r6, r7, lsl #5
	return strncmp(target_name, data, data_len) == 0;
   10dd4:	6869      	ldr	r1, [r5, #4]
   10dd6:	4642      	mov	r2, r8
   10dd8:	4648      	mov	r0, r9
   10dda:	f00e fc08 	bl	1f5ee <strncmp>
		if (adv_name_cmp(data->data,
   10dde:	b960      	cbnz	r0, 10dfa <adv_data_found+0x4e>
			control->filter_match_cnt++;
   10de0:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
   10de2:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
   10de6:	3301      	adds	r3, #1
   10de8:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
   10dea:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
   10dec:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
   10df0:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
   10df2:	70a3      	strb	r3, [r4, #2]
	default:
		break;
	}

	return true;
}
   10df4:	2001      	movs	r0, #1
   10df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < counter; i++) {
   10dfa:	3701      	adds	r7, #1
   10dfc:	e7e6      	b.n	10dcc <adv_data_found+0x20>
   10dfe:	bf00      	nop
   10e00:	20001ba0 	.word	0x20001ba0

00010e04 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   10e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10e06:	4b0a      	ldr	r3, [pc, #40]	; (10e30 <notify_filter_matched.constprop.0+0x2c>)
   10e08:	681c      	ldr	r4, [r3, #0]
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   10e0a:	4605      	mov	r5, r0
   10e0c:	460e      	mov	r6, r1
   10e0e:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10e10:	b10c      	cbz	r4, 10e16 <notify_filter_matched.constprop.0+0x12>
   10e12:	3c04      	subs	r4, #4
   10e14:	b904      	cbnz	r4, 10e18 <notify_filter_matched.constprop.0+0x14>
}
   10e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
   10e18:	6823      	ldr	r3, [r4, #0]
   10e1a:	681b      	ldr	r3, [r3, #0]
   10e1c:	b11b      	cbz	r3, 10e26 <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
   10e1e:	463a      	mov	r2, r7
   10e20:	4631      	mov	r1, r6
   10e22:	4628      	mov	r0, r5
   10e24:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   10e26:	1d23      	adds	r3, r4, #4
   10e28:	d0f5      	beq.n	10e16 <notify_filter_matched.constprop.0+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10e2a:	6864      	ldr	r4, [r4, #4]
   10e2c:	e7f0      	b.n	10e10 <notify_filter_matched.constprop.0+0xc>
   10e2e:	bf00      	nop
   10e30:	20001bf4 	.word	0x20001bf4

00010e34 <bt_scan_cb_register>:
	if (!cb) {
   10e34:	b150      	cbz	r0, 10e4c <bt_scan_cb_register+0x18>
	parent->next = child;
   10e36:	2300      	movs	r3, #0
   10e38:	6043      	str	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   10e3a:	4b05      	ldr	r3, [pc, #20]	; (10e50 <bt_scan_cb_register+0x1c>)
   10e3c:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&callback_list, &cb->node);
   10e3e:	1d02      	adds	r2, r0, #4
   10e40:	b911      	cbnz	r1, 10e48 <bt_scan_cb_register+0x14>
	list->head = node;
   10e42:	e9c3 2200 	strd	r2, r2, [r3]
}
   10e46:	4770      	bx	lr
	parent->next = child;
   10e48:	600a      	str	r2, [r1, #0]
	list->tail = node;
   10e4a:	605a      	str	r2, [r3, #4]
}
   10e4c:	4770      	bx	lr
   10e4e:	bf00      	nop
   10e50:	20001bf4 	.word	0x20001bf4

00010e54 <bt_scan_filter_add>:
{
   10e54:	b570      	push	{r4, r5, r6, lr}
   10e56:	4604      	mov	r4, r0
	if (!data) {
   10e58:	460d      	mov	r5, r1
   10e5a:	b379      	cbz	r1, 10ebc <bt_scan_filter_add+0x68>
	return z_impl_k_mutex_lock(mutex, timeout);
   10e5c:	4819      	ldr	r0, [pc, #100]	; (10ec4 <bt_scan_filter_add+0x70>)
   10e5e:	f04f 32ff 	mov.w	r2, #4294967295
   10e62:	f04f 33ff 	mov.w	r3, #4294967295
   10e66:	f008 fb0d 	bl	19484 <z_impl_k_mutex_lock>
	switch (type) {
   10e6a:	b15c      	cbz	r4, 10e84 <bt_scan_filter_add+0x30>
   10e6c:	3c01      	subs	r4, #1
   10e6e:	2c04      	cmp	r4, #4
   10e70:	bf94      	ite	ls
   10e72:	f06f 040b 	mvnls.w	r4, #11
   10e76:	f06f 0415 	mvnhi.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
   10e7a:	4812      	ldr	r0, [pc, #72]	; (10ec4 <bt_scan_filter_add+0x70>)
   10e7c:	f008 fc02 	bl	19684 <z_impl_k_mutex_unlock>
}
   10e80:	4620      	mov	r0, r4
   10e82:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t counter = bt_scan.scan_filters.name.cnt;
   10e84:	4e10      	ldr	r6, [pc, #64]	; (10ec8 <bt_scan_filter_add+0x74>)
	if (counter >= CONFIG_BT_SCAN_NAME_CNT) {
   10e86:	f896 4020 	ldrb.w	r4, [r6, #32]
   10e8a:	b98c      	cbnz	r4, 10eb0 <bt_scan_filter_add+0x5c>
	name_len = strlen(name);
   10e8c:	4628      	mov	r0, r5
   10e8e:	f7fb f9a3 	bl	c1d8 <strlen>
	if ((name_len == 0) || (name_len > CONFIG_BT_SCAN_NAME_MAX_LEN)) {
   10e92:	1e43      	subs	r3, r0, #1
   10e94:	2b1f      	cmp	r3, #31
	name_len = strlen(name);
   10e96:	4602      	mov	r2, r0
	if ((name_len == 0) || (name_len > CONFIG_BT_SCAN_NAME_MAX_LEN)) {
   10e98:	d80d      	bhi.n	10eb6 <bt_scan_filter_add+0x62>
	memcpy(bt_scan.scan_filters.name.target_name[counter],
   10e9a:	2354      	movs	r3, #84	; 0x54
   10e9c:	4629      	mov	r1, r5
   10e9e:	4630      	mov	r0, r6
   10ea0:	f00e fb82 	bl	1f5a8 <__memcpy_chk>
	bt_scan.scan_filters.name.cnt++;
   10ea4:	f896 3020 	ldrb.w	r3, [r6, #32]
   10ea8:	3301      	adds	r3, #1
   10eaa:	f886 3020 	strb.w	r3, [r6, #32]
	return 0;
   10eae:	e7e4      	b.n	10e7a <bt_scan_filter_add+0x26>
		return -ENOMEM;
   10eb0:	f06f 040b 	mvn.w	r4, #11
   10eb4:	e7e1      	b.n	10e7a <bt_scan_filter_add+0x26>
		return -EINVAL;
   10eb6:	f06f 0415 	mvn.w	r4, #21
   10eba:	e7de      	b.n	10e7a <bt_scan_filter_add+0x26>
		return -EINVAL;
   10ebc:	f06f 0415 	mvn.w	r4, #21
   10ec0:	e7de      	b.n	10e80 <bt_scan_filter_add+0x2c>
   10ec2:	bf00      	nop
   10ec4:	200005e0 	.word	0x200005e0
   10ec8:	20001ba0 	.word	0x20001ba0

00010ecc <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
   10ecc:	4b07      	ldr	r3, [pc, #28]	; (10eec <bt_scan_filter_disable+0x20>)
   10ece:	2200      	movs	r2, #0
   10ed0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.short_name.enabled = false;
   10ed4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	bt_scan.scan_filters.addr.enabled = false;
   10ed8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.uuid.enabled = false;
   10edc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	bt_scan.scan_filters.appearance.enabled = false;
   10ee0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	bt_scan.scan_filters.manufacturer_data.enabled = false;
   10ee4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
   10ee8:	4770      	bx	lr
   10eea:	bf00      	nop
   10eec:	20001ba0 	.word	0x20001ba0

00010ef0 <bt_scan_filter_enable>:
{
   10ef0:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
   10ef2:	0683      	lsls	r3, r0, #26
   10ef4:	d025      	beq.n	10f42 <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
   10ef6:	f7ff ffe9 	bl	10ecc <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
   10efa:	4b13      	ldr	r3, [pc, #76]	; (10f48 <bt_scan_filter_enable+0x58>)
   10efc:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
   10f00:	bf1c      	itt	ne
   10f02:	2201      	movne	r2, #1
   10f04:	f883 2025 	strbne.w	r2, [r3, #37]	; 0x25
	if (mode & BT_SCAN_NAME_FILTER) {
   10f08:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
   10f0a:	bf44      	itt	mi
   10f0c:	2201      	movmi	r2, #1
   10f0e:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
   10f12:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
   10f14:	bf44      	itt	mi
   10f16:	2201      	movmi	r2, #1
   10f18:	f883 2023 	strbmi.w	r2, [r3, #35]	; 0x23
	if (mode & BT_SCAN_UUID_FILTER) {
   10f1c:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
   10f1e:	bf44      	itt	mi
   10f20:	2201      	movmi	r2, #1
   10f22:	f883 2029 	strbmi.w	r2, [r3, #41]	; 0x29
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
   10f26:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
   10f28:	bf44      	itt	mi
   10f2a:	2201      	movmi	r2, #1
   10f2c:	f883 202d 	strbmi.w	r2, [r3, #45]	; 0x2d
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
   10f30:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
   10f32:	bf44      	itt	mi
   10f34:	2201      	movmi	r2, #1
   10f36:	f883 202f 	strbmi.w	r2, [r3, #47]	; 0x2f
	filters->all_mode = match_all;
   10f3a:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
	return 0;
   10f3e:	2000      	movs	r0, #0
}
   10f40:	bd08      	pop	{r3, pc}
		return -EINVAL;
   10f42:	f06f 0015 	mvn.w	r0, #21
   10f46:	e7fb      	b.n	10f40 <bt_scan_filter_enable+0x50>
   10f48:	20001ba0 	.word	0x20001ba0

00010f4c <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
   10f4c:	b570      	push	{r4, r5, r6, lr}
   10f4e:	b086      	sub	sp, #24
   10f50:	460e      	mov	r6, r1
   10f52:	4605      	mov	r5, r0
	bt_scan_stop();
   10f54:	f00b ff8c 	bl	1ce70 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
   10f58:	4b18      	ldr	r3, [pc, #96]	; (10fbc <scan_connect_with_target.part.0+0x70>)
   10f5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   10f5c:	ac02      	add	r4, sp, #8
   10f5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
   10f62:	ab01      	add	r3, sp, #4
   10f64:	4621      	mov	r1, r4
   10f66:	4a16      	ldr	r2, [pc, #88]	; (10fc0 <scan_connect_with_target.part.0+0x74>)
   10f68:	4630      	mov	r0, r6
   10f6a:	f002 ff2f 	bl	13dcc <bt_conn_le_create>
	if (err) {
   10f6e:	4b15      	ldr	r3, [pc, #84]	; (10fc4 <scan_connect_with_target.part.0+0x78>)
   10f70:	3508      	adds	r5, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10f72:	681c      	ldr	r4, [r3, #0]
	if (err) {
   10f74:	b168      	cbz	r0, 10f92 <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10f76:	b10c      	cbz	r4, 10f7c <scan_connect_with_target.part.0+0x30>
   10f78:	3c04      	subs	r4, #4
   10f7a:	b90c      	cbnz	r4, 10f80 <scan_connect_with_target.part.0+0x34>
}
   10f7c:	b006      	add	sp, #24
   10f7e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
   10f80:	6823      	ldr	r3, [r4, #0]
   10f82:	689b      	ldr	r3, [r3, #8]
   10f84:	b10b      	cbz	r3, 10f8a <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
   10f86:	4628      	mov	r0, r5
   10f88:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   10f8a:	1d22      	adds	r2, r4, #4
   10f8c:	d0f6      	beq.n	10f7c <scan_connect_with_target.part.0+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10f8e:	6864      	ldr	r4, [r4, #4]
   10f90:	e7f1      	b.n	10f76 <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10f92:	b91c      	cbnz	r4, 10f9c <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
   10f94:	9801      	ldr	r0, [sp, #4]
   10f96:	f002 fcaf 	bl	138f8 <bt_conn_unref>
   10f9a:	e7ef      	b.n	10f7c <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
   10f9c:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10f9e:	3c04      	subs	r4, #4
   10fa0:	2c00      	cmp	r4, #0
   10fa2:	d0f7      	beq.n	10f94 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
   10fa4:	6823      	ldr	r3, [r4, #0]
   10fa6:	68db      	ldr	r3, [r3, #12]
   10fa8:	b113      	cbz	r3, 10fb0 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
   10faa:	4631      	mov	r1, r6
   10fac:	4628      	mov	r0, r5
   10fae:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   10fb0:	1d23      	adds	r3, r4, #4
   10fb2:	d0ef      	beq.n	10f94 <scan_connect_with_target.part.0+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10fb4:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10fb6:	2c00      	cmp	r4, #0
   10fb8:	d1f1      	bne.n	10f9e <scan_connect_with_target.part.0+0x52>
   10fba:	e7eb      	b.n	10f94 <scan_connect_with_target.part.0+0x48>
   10fbc:	0001f8d4 	.word	0x0001f8d4
   10fc0:	20001bec 	.word	0x20001bec
   10fc4:	20001bf4 	.word	0x20001bf4

00010fc8 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
   10fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   10fcc:	4f31      	ldr	r7, [pc, #196]	; (11094 <scan_recv+0xcc>)
{
   10fce:	b094      	sub	sp, #80	; 0x50
	memset(&scan_control, 0, sizeof(scan_control));
   10fd0:	2250      	movs	r2, #80	; 0x50
{
   10fd2:	4605      	mov	r5, r0
   10fd4:	460c      	mov	r4, r1
	memset(&scan_control, 0, sizeof(scan_control));
   10fd6:	4668      	mov	r0, sp
   10fd8:	2100      	movs	r1, #0
   10fda:	f00e faf8 	bl	1f5ce <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   10fde:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
   10fe2:	f88d 2003 	strb.w	r2, [sp, #3]
	control->filter_cnt = 0;
   10fe6:	2200      	movs	r2, #0
   10fe8:	f88d 2000 	strb.w	r2, [sp]
	if (is_name_filter_enabled()) {
   10fec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   10ff0:	b112      	cbz	r2, 10ff8 <scan_recv+0x30>
		control->filter_cnt++;
   10ff2:	2301      	movs	r3, #1
   10ff4:	f88d 3000 	strb.w	r3, [sp]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
   10ff8:	7a2b      	ldrb	r3, [r5, #8]
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
   10ffa:	4620      	mov	r0, r4
   10ffc:	f003 0301 	and.w	r3, r3, #1
   11000:	f88d 3004 	strb.w	r3, [sp, #4]
   11004:	f00d ffe7 	bl	1efd6 <net_buf_simple_headroom>

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
   11008:	4923      	ldr	r1, [pc, #140]	; (11098 <scan_recv+0xd0>)
	state->len = buf->len;
   1100a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
   1100e:	4606      	mov	r6, r0
   11010:	466a      	mov	r2, sp
   11012:	4620      	mov	r0, r4
   11014:	f00c fc39 	bl	1d88a <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
   11018:	4b20      	ldr	r3, [pc, #128]	; (1109c <scan_recv+0xd4>)
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
   1101a:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
   1101c:	f8a4 8004 	strh.w	r8, [r4, #4]
	scan_control.device_info.adv_data = ad;
   11020:	e9cd 3403 	strd	r3, r4, [sp, #12]
	if (control->all_mode &&
   11024:	f89d 3003 	ldrb.w	r3, [sp, #3]
	scan_control.device_info.recv_info = info;
   11028:	9502      	str	r5, [sp, #8]
	buf->data = buf->__buf + state->offset;
   1102a:	fa10 f686 	uxtah	r6, r0, r6
   1102e:	6026      	str	r6, [r4, #0]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
   11030:	682c      	ldr	r4, [r5, #0]
	if (control->all_mode &&
   11032:	b1ab      	cbz	r3, 11060 <scan_recv+0x98>
   11034:	f89d 2001 	ldrb.w	r2, [sp, #1]
   11038:	f89d 3000 	ldrb.w	r3, [sp]
   1103c:	429a      	cmp	r2, r3
   1103e:	d113      	bne.n	11068 <scan_recv+0xa0>
		notify_filter_matched(&control->device_info,
   11040:	f89d 2004 	ldrb.w	r2, [sp, #4]
   11044:	a905      	add	r1, sp, #20
   11046:	a802      	add	r0, sp, #8
   11048:	f7ff fedc 	bl	10e04 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
   1104c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   11050:	b11b      	cbz	r3, 1105a <scan_recv+0x92>
   11052:	4621      	mov	r1, r4
   11054:	4668      	mov	r0, sp
   11056:	f7ff ff79 	bl	10f4c <scan_connect_with_target.part.0>
}
   1105a:	b014      	add	sp, #80	; 0x50
   1105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if ((!control->all_mode) && control->filter_match) {
   11060:	f89d 3002 	ldrb.w	r3, [sp, #2]
   11064:	2b00      	cmp	r3, #0
   11066:	d1eb      	bne.n	11040 <scan_recv+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11068:	4b0d      	ldr	r3, [pc, #52]	; (110a0 <scan_recv+0xd8>)
   1106a:	681c      	ldr	r4, [r3, #0]
   1106c:	2c00      	cmp	r4, #0
   1106e:	d0f4      	beq.n	1105a <scan_recv+0x92>
		notify_filter_no_match(&control->device_info,
   11070:	f89d 5004 	ldrb.w	r5, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11074:	3c04      	subs	r4, #4
   11076:	2c00      	cmp	r4, #0
   11078:	d0ef      	beq.n	1105a <scan_recv+0x92>
		if (cb->cb_addr->filter_no_match) {
   1107a:	6823      	ldr	r3, [r4, #0]
   1107c:	685b      	ldr	r3, [r3, #4]
   1107e:	b113      	cbz	r3, 11086 <scan_recv+0xbe>
			cb->cb_addr->filter_no_match(device_info, connectable);
   11080:	4629      	mov	r1, r5
   11082:	a802      	add	r0, sp, #8
   11084:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   11086:	1d23      	adds	r3, r4, #4
   11088:	d0e7      	beq.n	1105a <scan_recv+0x92>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1108a:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1108c:	2c00      	cmp	r4, #0
   1108e:	d1f1      	bne.n	11074 <scan_recv+0xac>
   11090:	e7e3      	b.n	1105a <scan_recv+0x92>
   11092:	bf00      	nop
   11094:	20001ba0 	.word	0x20001ba0
   11098:	00010dad 	.word	0x00010dad
   1109c:	20001bec 	.word	0x20001bec
   110a0:	20001bf4 	.word	0x20001bf4

000110a4 <bt_scan_init>:
{
   110a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   110a6:	4c18      	ldr	r4, [pc, #96]	; (11108 <bt_scan_init+0x64>)
{
   110a8:	4605      	mov	r5, r0
	bt_le_scan_cb_register(&scan_cb);
   110aa:	4818      	ldr	r0, [pc, #96]	; (1110c <bt_scan_init+0x68>)
   110ac:	f002 fa34 	bl	13518 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   110b0:	2234      	movs	r2, #52	; 0x34
   110b2:	2100      	movs	r1, #0
   110b4:	4620      	mov	r0, r4
   110b6:	f00e fa8a 	bl	1f5ce <memset>
	if (init) {
   110ba:	4627      	mov	r7, r4
   110bc:	b1d5      	cbz	r5, 110f4 <bt_scan_init+0x50>
		bt_scan.connect_if_match = init->connect_if_match;
   110be:	792b      	ldrb	r3, [r5, #4]
   110c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (init->scan_param) {
   110c4:	682c      	ldr	r4, [r5, #0]
   110c6:	b164      	cbz	r4, 110e2 <bt_scan_init+0x3e>
			bt_scan.scan_param = *init->scan_param;
   110c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   110ca:	f107 0638 	add.w	r6, r7, #56	; 0x38
   110ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   110d0:	6823      	ldr	r3, [r4, #0]
   110d2:	6033      	str	r3, [r6, #0]
		if (init->conn_param) {
   110d4:	68aa      	ldr	r2, [r5, #8]
   110d6:	b13a      	cbz	r2, 110e8 <bt_scan_init+0x44>
			bt_scan.conn_param = *init->conn_param;
   110d8:	4b0d      	ldr	r3, [pc, #52]	; (11110 <bt_scan_init+0x6c>)
   110da:	6810      	ldr	r0, [r2, #0]
   110dc:	6851      	ldr	r1, [r2, #4]
   110de:	c303      	stmia	r3!, {r0, r1}
}
   110e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			scan_default_param_set();
   110e2:	f7ff fe51 	bl	10d88 <scan_default_param_set>
   110e6:	e7f5      	b.n	110d4 <bt_scan_init+0x30>
	bt_scan.conn_param = *conn_param;
   110e8:	490a      	ldr	r1, [pc, #40]	; (11114 <bt_scan_init+0x70>)
   110ea:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   110ee:	e9c7 1313 	strd	r1, r3, [r7, #76]	; 0x4c
}
   110f2:	e7f5      	b.n	110e0 <bt_scan_init+0x3c>
		scan_default_param_set();
   110f4:	f7ff fe48 	bl	10d88 <scan_default_param_set>
	bt_scan.conn_param = *conn_param;
   110f8:	4a06      	ldr	r2, [pc, #24]	; (11114 <bt_scan_init+0x70>)
		bt_scan.connect_if_match = false;
   110fa:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
	bt_scan.conn_param = *conn_param;
   110fe:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   11102:	e9c4 2313 	strd	r2, r3, [r4, #76]	; 0x4c
}
   11106:	e7eb      	b.n	110e0 <bt_scan_init+0x3c>
   11108:	20001ba0 	.word	0x20001ba0
   1110c:	20000420 	.word	0x20000420
   11110:	20001bec 	.word	0x20001bec
   11114:	00280018 	.word	0x00280018

00011118 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
   11118:	b108      	cbz	r0, 1111e <bt_scan_start+0x6>
   1111a:	2801      	cmp	r0, #1
   1111c:	d106      	bne.n	1112c <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   1111e:	4b05      	ldr	r3, [pc, #20]	; (11134 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   11120:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   11122:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   11126:	4804      	ldr	r0, [pc, #16]	; (11138 <bt_scan_start+0x20>)
   11128:	f002 b960 	b.w	133ec <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   1112c:	f06f 0015 	mvn.w	r0, #21
   11130:	4770      	bx	lr
   11132:	bf00      	nop
   11134:	20001ba0 	.word	0x20001ba0
   11138:	20001bd8 	.word	0x20001bd8

0001113c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   1113c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   1113e:	4e26      	ldr	r6, [pc, #152]	; (111d8 <tc_aes128_set_encrypt_key+0x9c>)
{
   11140:	4607      	mov	r7, r0
   11142:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   11144:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   11146:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   11148:	ad01      	add	r5, sp, #4
   1114a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1114c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1114e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11150:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   11154:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   11158:	4638      	mov	r0, r7
   1115a:	2f00      	cmp	r7, #0
   1115c:	d038      	beq.n	111d0 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   1115e:	2c00      	cmp	r4, #0
   11160:	d038      	beq.n	111d4 <tc_aes128_set_encrypt_key+0x98>
   11162:	1f38      	subs	r0, r7, #4
   11164:	4621      	mov	r1, r4
   11166:	4602      	mov	r2, r0
   11168:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1116a:	784b      	ldrb	r3, [r1, #1]
   1116c:	780d      	ldrb	r5, [r1, #0]
   1116e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   11170:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   11174:	78cd      	ldrb	r5, [r1, #3]
   11176:	432b      	orrs	r3, r5
   11178:	788d      	ldrb	r5, [r1, #2]
   1117a:	3104      	adds	r1, #4
   1117c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   11180:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   11182:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   11186:	d1f0      	bne.n	1116a <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   11188:	4c14      	ldr	r4, [pc, #80]	; (111dc <tc_aes128_set_encrypt_key+0xa0>)
   1118a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   1118c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1118e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   11190:	d116      	bne.n	111c0 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   11192:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11196:	5ca5      	ldrb	r5, [r4, r2]
   11198:	0e1a      	lsrs	r2, r3, #24
   1119a:	5ca2      	ldrb	r2, [r4, r2]
   1119c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   111a0:	f3c3 2507 	ubfx	r5, r3, #8, #8
   111a4:	b2db      	uxtb	r3, r3
   111a6:	5d65      	ldrb	r5, [r4, r5]
   111a8:	5ce3      	ldrb	r3, [r4, r3]
   111aa:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   111ae:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   111b2:	ad0c      	add	r5, sp, #48	; 0x30
   111b4:	f021 0303 	bic.w	r3, r1, #3
   111b8:	442b      	add	r3, r5
   111ba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   111be:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   111c0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   111c4:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   111c6:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   111c8:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   111ca:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   111cc:	d1de      	bne.n	1118c <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   111ce:	2001      	movs	r0, #1
}
   111d0:	b00d      	add	sp, #52	; 0x34
   111d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   111d4:	4620      	mov	r0, r4
   111d6:	e7fb      	b.n	111d0 <tc_aes128_set_encrypt_key+0x94>
   111d8:	0001f8e4 	.word	0x0001f8e4
   111dc:	00020267 	.word	0x00020267

000111e0 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   111e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   111e4:	4615      	mov	r5, r2
   111e6:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   111e8:	4606      	mov	r6, r0
   111ea:	2800      	cmp	r0, #0
   111ec:	d058      	beq.n	112a0 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   111ee:	2900      	cmp	r1, #0
   111f0:	d059      	beq.n	112a6 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   111f2:	2a00      	cmp	r2, #0
   111f4:	d059      	beq.n	112aa <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   111f6:	2310      	movs	r3, #16
   111f8:	460a      	mov	r2, r1
   111fa:	4668      	mov	r0, sp
   111fc:	4619      	mov	r1, r3
   111fe:	f00b fe39 	bl	1ce74 <_copy>
	add_round_key(state, s->words);
   11202:	4629      	mov	r1, r5
   11204:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   11206:	4c2a      	ldr	r4, [pc, #168]	; (112b0 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   11208:	f00b fe4c 	bl	1cea4 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1120c:	f105 0710 	add.w	r7, r5, #16
   11210:	46a1      	mov	r9, r4
   11212:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   11214:	46e8      	mov	r8, sp
{
   11216:	466a      	mov	r2, sp
   11218:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   1121a:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1121c:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   1121e:	5c61      	ldrb	r1, [r4, r1]
   11220:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   11224:	d1f9      	bne.n	1121a <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   11226:	4668      	mov	r0, sp
   11228:	f00b fe81 	bl	1cf2e <shift_rows>
	mult_row_column(t, s);
   1122c:	4669      	mov	r1, sp
   1122e:	a804      	add	r0, sp, #16
   11230:	f00b feb6 	bl	1cfa0 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   11234:	a901      	add	r1, sp, #4
   11236:	a805      	add	r0, sp, #20
   11238:	f00b feb2 	bl	1cfa0 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1123c:	a902      	add	r1, sp, #8
   1123e:	a806      	add	r0, sp, #24
   11240:	f00b feae 	bl	1cfa0 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   11244:	a903      	add	r1, sp, #12
   11246:	a807      	add	r0, sp, #28
   11248:	f00b feaa 	bl	1cfa0 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1124c:	2310      	movs	r3, #16
   1124e:	4619      	mov	r1, r3
   11250:	eb0d 0203 	add.w	r2, sp, r3
   11254:	4668      	mov	r0, sp
   11256:	f00b fe0d 	bl	1ce74 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1125a:	4639      	mov	r1, r7
   1125c:	4668      	mov	r0, sp
   1125e:	3710      	adds	r7, #16
   11260:	f00b fe20 	bl	1cea4 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   11264:	42af      	cmp	r7, r5
   11266:	d1d5      	bne.n	11214 <tc_aes_encrypt+0x34>
   11268:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   1126a:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   1126e:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   11270:	f819 3003 	ldrb.w	r3, [r9, r3]
   11274:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   11278:	d1f7      	bne.n	1126a <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   1127a:	4668      	mov	r0, sp
   1127c:	f00b fe57 	bl	1cf2e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   11280:	4629      	mov	r1, r5
   11282:	4668      	mov	r0, sp
   11284:	f00b fe0e 	bl	1cea4 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   11288:	2310      	movs	r3, #16
   1128a:	4619      	mov	r1, r3
   1128c:	466a      	mov	r2, sp
   1128e:	4630      	mov	r0, r6
   11290:	f00b fdf0 	bl	1ce74 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   11294:	4668      	mov	r0, sp
   11296:	2210      	movs	r2, #16
   11298:	4621      	mov	r1, r4
   1129a:	f00b fdf8 	bl	1ce8e <_set>

	return TC_CRYPTO_SUCCESS;
   1129e:	2001      	movs	r0, #1
}
   112a0:	b009      	add	sp, #36	; 0x24
   112a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   112a6:	4608      	mov	r0, r1
   112a8:	e7fa      	b.n	112a0 <tc_aes_encrypt+0xc0>
   112aa:	4610      	mov	r0, r2
   112ac:	e7f8      	b.n	112a0 <tc_aes_encrypt+0xc0>
   112ae:	bf00      	nop
   112b0:	00020267 	.word	0x00020267

000112b4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   112b4:	4901      	ldr	r1, [pc, #4]	; (112bc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   112b6:	2210      	movs	r2, #16
	str	r2, [r1]
   112b8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   112ba:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   112bc:	e000ed10 	.word	0xe000ed10

000112c0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   112c0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   112c2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   112c4:	f380 8811 	msr	BASEPRI, r0
	isb
   112c8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   112cc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   112d0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   112d2:	b662      	cpsie	i
	isb
   112d4:	f3bf 8f6f 	isb	sy

	bx	lr
   112d8:	4770      	bx	lr
   112da:	bf00      	nop

000112dc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   112dc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   112de:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   112e0:	f381 8811 	msr	BASEPRI, r1

	wfe
   112e4:	bf20      	wfe

	msr	BASEPRI, r0
   112e6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   112ea:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   112ec:	4770      	bx	lr
   112ee:	bf00      	nop

000112f0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   112f0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   112f2:	2b00      	cmp	r3, #0
   112f4:	db08      	blt.n	11308 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   112f6:	2201      	movs	r2, #1
   112f8:	f000 001f 	and.w	r0, r0, #31
   112fc:	fa02 f000 	lsl.w	r0, r2, r0
   11300:	095b      	lsrs	r3, r3, #5
   11302:	4a02      	ldr	r2, [pc, #8]	; (1130c <arch_irq_enable+0x1c>)
   11304:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   11308:	4770      	bx	lr
   1130a:	bf00      	nop
   1130c:	e000e100 	.word	0xe000e100

00011310 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   11310:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   11312:	2b00      	cmp	r3, #0
   11314:	db0d      	blt.n	11332 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11316:	2201      	movs	r2, #1
   11318:	095b      	lsrs	r3, r3, #5
   1131a:	f000 001f 	and.w	r0, r0, #31
   1131e:	fa02 f000 	lsl.w	r0, r2, r0
   11322:	3320      	adds	r3, #32
   11324:	4a03      	ldr	r2, [pc, #12]	; (11334 <arch_irq_disable+0x24>)
   11326:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1132a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1132e:	f3bf 8f6f 	isb	sy
}
   11332:	4770      	bx	lr
   11334:	e000e100 	.word	0xe000e100

00011338 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   11338:	4b05      	ldr	r3, [pc, #20]	; (11350 <arch_irq_is_enabled+0x18>)
   1133a:	0942      	lsrs	r2, r0, #5
   1133c:	f000 001f 	and.w	r0, r0, #31
   11340:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11344:	2301      	movs	r3, #1
   11346:	fa03 f000 	lsl.w	r0, r3, r0
}
   1134a:	4010      	ands	r0, r2
   1134c:	4770      	bx	lr
   1134e:	bf00      	nop
   11350:	e000e100 	.word	0xe000e100

00011354 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   11354:	07d3      	lsls	r3, r2, #31
{
   11356:	b570      	push	{r4, r5, r6, lr}
   11358:	4605      	mov	r5, r0
   1135a:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1135c:	d425      	bmi.n	113aa <z_arm_irq_priority_set+0x56>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   1135e:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   11360:	2c07      	cmp	r4, #7
   11362:	d90f      	bls.n	11384 <z_arm_irq_priority_set+0x30>
   11364:	4a12      	ldr	r2, [pc, #72]	; (113b0 <z_arm_irq_priority_set+0x5c>)
   11366:	4913      	ldr	r1, [pc, #76]	; (113b4 <z_arm_irq_priority_set+0x60>)
   11368:	4813      	ldr	r0, [pc, #76]	; (113b8 <z_arm_irq_priority_set+0x64>)
   1136a:	2358      	movs	r3, #88	; 0x58
   1136c:	f00b fb19 	bl	1c9a2 <printk>
   11370:	4812      	ldr	r0, [pc, #72]	; (113bc <z_arm_irq_priority_set+0x68>)
   11372:	4631      	mov	r1, r6
   11374:	2306      	movs	r3, #6
   11376:	462a      	mov	r2, r5
   11378:	f00b fb13 	bl	1c9a2 <printk>
   1137c:	480c      	ldr	r0, [pc, #48]	; (113b0 <z_arm_irq_priority_set+0x5c>)
   1137e:	2158      	movs	r1, #88	; 0x58
   11380:	f00b fd69 	bl	1ce56 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   11384:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   11386:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11388:	bfac      	ite	ge
   1138a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1138e:	4b0c      	ldrlt	r3, [pc, #48]	; (113c0 <z_arm_irq_priority_set+0x6c>)
   11390:	ea4f 1444 	mov.w	r4, r4, lsl #5
   11394:	bfb8      	it	lt
   11396:	f005 050f 	andlt.w	r5, r5, #15
   1139a:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1139c:	bfaa      	itet	ge
   1139e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   113a2:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   113a4:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   113a8:	bd70      	pop	{r4, r5, r6, pc}
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   113aa:	2400      	movs	r4, #0
   113ac:	e7ea      	b.n	11384 <z_arm_irq_priority_set+0x30>
   113ae:	bf00      	nop
   113b0:	00020367 	.word	0x00020367
   113b4:	0002039d 	.word	0x0002039d
   113b8:	0001feb5 	.word	0x0001feb5
   113bc:	000203b8 	.word	0x000203b8
   113c0:	e000ed14 	.word	0xe000ed14

000113c4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   113c4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   113c6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   113c8:	4b04      	ldr	r3, [pc, #16]	; (113dc <_arch_isr_direct_pm+0x18>)
   113ca:	6998      	ldr	r0, [r3, #24]
   113cc:	b118      	cbz	r0, 113d6 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   113ce:	2200      	movs	r2, #0
   113d0:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit(idle_val);
   113d2:	f00d ff8b 	bl	1f2ec <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   113d6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   113d8:	bd08      	pop	{r3, pc}
   113da:	bf00      	nop
   113dc:	20001eb4 	.word	0x20001eb4

000113e0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   113e0:	bf30      	wfi
    b z_SysNmiOnReset
   113e2:	f7ff bffd 	b.w	113e0 <z_SysNmiOnReset>
   113e6:	bf00      	nop

000113e8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   113e8:	4a0b      	ldr	r2, [pc, #44]	; (11418 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   113ea:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   113ec:	4b0b      	ldr	r3, [pc, #44]	; (1141c <z_arm_prep_c+0x34>)
   113ee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   113f2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   113f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   113f8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   113fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11400:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   11404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   11408:	f007 fbf0 	bl	18bec <z_bss_zero>
	z_data_copy();
   1140c:	f00a fafa 	bl	1ba04 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   11410:	f000 fa2c 	bl	1186c <z_arm_interrupt_init>
	z_cstart();
   11414:	f007 fbf4 	bl	18c00 <z_cstart>
   11418:	00000000 	.word	0x00000000
   1141c:	e000ed00 	.word	0xe000ed00

00011420 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   11420:	4a09      	ldr	r2, [pc, #36]	; (11448 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   11422:	490a      	ldr	r1, [pc, #40]	; (1144c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   11424:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   11426:	6809      	ldr	r1, [r1, #0]
   11428:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1142a:	4909      	ldr	r1, [pc, #36]	; (11450 <arch_swap+0x30>)
	_current->arch.basepri = key;
   1142c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1142e:	684b      	ldr	r3, [r1, #4]
   11430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11434:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   11436:	2300      	movs	r3, #0
   11438:	f383 8811 	msr	BASEPRI, r3
   1143c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   11440:	6893      	ldr	r3, [r2, #8]
}
   11442:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   11444:	4770      	bx	lr
   11446:	bf00      	nop
   11448:	20001eb4 	.word	0x20001eb4
   1144c:	0001fd6c 	.word	0x0001fd6c
   11450:	e000ed00 	.word	0xe000ed00

00011454 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11454:	4912      	ldr	r1, [pc, #72]	; (114a0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   11456:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   11458:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1145c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1145e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   11462:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11466:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   11468:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1146c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   11470:	4f0c      	ldr	r7, [pc, #48]	; (114a4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   11472:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   11476:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   11478:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1147a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1147c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1147e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   11480:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   11482:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   11486:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   11488:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1148a:	f000 fa85 	bl	11998 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1148e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   11492:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   11496:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1149a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1149e:	4770      	bx	lr
    ldr r1, =_kernel
   114a0:	20001eb4 	.word	0x20001eb4
    ldr v4, =_SCS_ICSR
   114a4:	e000ed04 	.word	0xe000ed04

000114a8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   114a8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   114ac:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   114ae:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   114b2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   114b6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   114b8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   114bc:	2902      	cmp	r1, #2
    beq _oops
   114be:	d0ff      	beq.n	114c0 <_oops>

000114c0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   114c0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   114c2:	f00b feae 	bl	1d222 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   114c6:	bd01      	pop	{r0, pc}

000114c8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   114c8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   114cc:	9b00      	ldr	r3, [sp, #0]
   114ce:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   114d2:	490a      	ldr	r1, [pc, #40]	; (114fc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   114d4:	9b01      	ldr	r3, [sp, #4]
   114d6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   114da:	9b02      	ldr	r3, [sp, #8]
   114dc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   114e0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   114e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   114e8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   114ec:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   114f0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   114f2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   114f4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   114f6:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   114f8:	4770      	bx	lr
   114fa:	bf00      	nop
   114fc:	0001ca7f 	.word	0x0001ca7f

00011500 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   11500:	4a0b      	ldr	r2, [pc, #44]	; (11530 <z_check_thread_stack_fail+0x30>)
{
   11502:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   11504:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   11506:	b190      	cbz	r0, 1152e <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   11508:	f113 0f16 	cmn.w	r3, #22
   1150c:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1150e:	d005      	beq.n	1151c <z_check_thread_stack_fail+0x1c>
   11510:	f1a0 0220 	sub.w	r2, r0, #32
   11514:	429a      	cmp	r2, r3
   11516:	d806      	bhi.n	11526 <z_check_thread_stack_fail+0x26>
   11518:	4283      	cmp	r3, r0
   1151a:	d204      	bcs.n	11526 <z_check_thread_stack_fail+0x26>
   1151c:	4281      	cmp	r1, r0
   1151e:	bf2c      	ite	cs
   11520:	2100      	movcs	r1, #0
   11522:	2101      	movcc	r1, #1
   11524:	e000      	b.n	11528 <z_check_thread_stack_fail+0x28>
   11526:	2100      	movs	r1, #0
   11528:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   1152a:	bf08      	it	eq
   1152c:	2000      	moveq	r0, #0
}
   1152e:	4770      	bx	lr
   11530:	20001eb4 	.word	0x20001eb4

00011534 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   11534:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   11536:	4b09      	ldr	r3, [pc, #36]	; (1155c <arch_switch_to_main_thread+0x28>)
   11538:	6098      	str	r0, [r3, #8]
{
   1153a:	460d      	mov	r5, r1
   1153c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1153e:	f000 fa2b 	bl	11998 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   11542:	4620      	mov	r0, r4
   11544:	f385 8809 	msr	PSP, r5
   11548:	2100      	movs	r1, #0
   1154a:	b663      	cpsie	if
   1154c:	f381 8811 	msr	BASEPRI, r1
   11550:	f3bf 8f6f 	isb	sy
   11554:	2200      	movs	r2, #0
   11556:	2300      	movs	r3, #0
   11558:	f00b fa91 	bl	1ca7e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1155c:	20001eb4 	.word	0x20001eb4

00011560 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   11560:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   11562:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   11564:	4a0b      	ldr	r2, [pc, #44]	; (11594 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   11566:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   11568:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1156a:	bf1e      	ittt	ne
	movne	r1, #0
   1156c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1156e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   11570:	f00d febc 	blne	1f2ec <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   11574:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   11576:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1157a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1157e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   11582:	4905      	ldr	r1, [pc, #20]	; (11598 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   11584:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   11586:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   11588:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1158a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1158e:	4903      	ldr	r1, [pc, #12]	; (1159c <_isr_wrapper+0x3c>)
	bx r1
   11590:	4708      	bx	r1
   11592:	0000      	.short	0x0000
	ldr r2, =_kernel
   11594:	20001eb4 	.word	0x20001eb4
	ldr r1, =_sw_isr_table
   11598:	0001f728 	.word	0x0001f728
	ldr r1, =z_arm_int_exit
   1159c:	000115a1 	.word	0x000115a1

000115a0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   115a0:	4b04      	ldr	r3, [pc, #16]	; (115b4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   115a2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   115a4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   115a6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   115a8:	d003      	beq.n	115b2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   115aa:	4903      	ldr	r1, [pc, #12]	; (115b8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   115ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   115b0:	600a      	str	r2, [r1, #0]

000115b2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   115b2:	4770      	bx	lr
	ldr r3, =_kernel
   115b4:	20001eb4 	.word	0x20001eb4
	ldr r1, =_SCS_ICSR
   115b8:	e000ed04 	.word	0xe000ed04

000115bc <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   115bc:	4b23      	ldr	r3, [pc, #140]	; (1164c <mem_manage_fault+0x90>)
{
   115be:	b570      	push	{r4, r5, r6, lr}
   115c0:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   115c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   115c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   115c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   115c8:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   115ca:	0790      	lsls	r0, r2, #30
   115cc:	d51a      	bpl.n	11604 <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   115ce:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   115d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   115d2:	0612      	lsls	r2, r2, #24
   115d4:	d516      	bpl.n	11604 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   115d6:	b119      	cbz	r1, 115e0 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   115d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   115da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   115de:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   115e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   115e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   115e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   115e6:	06d6      	lsls	r6, r2, #27
   115e8:	d40f      	bmi.n	1160a <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   115ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   115ec:	0799      	lsls	r1, r3, #30
   115ee:	d40c      	bmi.n	1160a <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   115f0:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   115f2:	4a16      	ldr	r2, [pc, #88]	; (1164c <mem_manage_fault+0x90>)
   115f4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   115f6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   115fa:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   115fc:	2300      	movs	r3, #0
   115fe:	702b      	strb	r3, [r5, #0]

	return reason;
}
   11600:	4620      	mov	r0, r4
   11602:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
   11604:	f06f 0015 	mvn.w	r0, #21
   11608:	e7ea      	b.n	115e0 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1160a:	4e10      	ldr	r6, [pc, #64]	; (1164c <mem_manage_fault+0x90>)
   1160c:	6873      	ldr	r3, [r6, #4]
   1160e:	051a      	lsls	r2, r3, #20
   11610:	d5ee      	bpl.n	115f0 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   11612:	4621      	mov	r1, r4
   11614:	f7ff ff74 	bl	11500 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   11618:	4604      	mov	r4, r0
   1161a:	b118      	cbz	r0, 11624 <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1161c:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   11620:	2402      	movs	r4, #2
   11622:	e7e6      	b.n	115f2 <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   11624:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   11626:	06db      	lsls	r3, r3, #27
   11628:	d5e2      	bpl.n	115f0 <mem_manage_fault+0x34>
   1162a:	4a09      	ldr	r2, [pc, #36]	; (11650 <mem_manage_fault+0x94>)
   1162c:	4909      	ldr	r1, [pc, #36]	; (11654 <mem_manage_fault+0x98>)
   1162e:	480a      	ldr	r0, [pc, #40]	; (11658 <mem_manage_fault+0x9c>)
   11630:	f240 1349 	movw	r3, #329	; 0x149
   11634:	f00b f9b5 	bl	1c9a2 <printk>
   11638:	4808      	ldr	r0, [pc, #32]	; (1165c <mem_manage_fault+0xa0>)
   1163a:	f00b f9b2 	bl	1c9a2 <printk>
   1163e:	4804      	ldr	r0, [pc, #16]	; (11650 <mem_manage_fault+0x94>)
   11640:	f240 1149 	movw	r1, #329	; 0x149
   11644:	f00b fc07 	bl	1ce56 <assert_post_action>
   11648:	e7d3      	b.n	115f2 <mem_manage_fault+0x36>
   1164a:	bf00      	nop
   1164c:	e000ed00 	.word	0xe000ed00
   11650:	000203f8 	.word	0x000203f8
   11654:	00020432 	.word	0x00020432
   11658:	0001feb5 	.word	0x0001feb5
   1165c:	0002047c 	.word	0x0002047c

00011660 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   11660:	4b0d      	ldr	r3, [pc, #52]	; (11698 <bus_fault.isra.0+0x38>)
   11662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   11664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   11666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11668:	0592      	lsls	r2, r2, #22
   1166a:	d508      	bpl.n	1167e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1166c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1166e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11670:	0412      	lsls	r2, r2, #16
   11672:	d504      	bpl.n	1167e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   11674:	b118      	cbz	r0, 1167e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   11676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11678:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1167c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1167e:	4b06      	ldr	r3, [pc, #24]	; (11698 <bus_fault.isra.0+0x38>)
   11680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   11682:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11684:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11686:	bf58      	it	pl
   11688:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1168a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   1168c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1168e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   11692:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11694:	7008      	strb	r0, [r1, #0]

	return reason;
}
   11696:	4770      	bx	lr
   11698:	e000ed00 	.word	0xe000ed00

0001169c <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1169c:	4b07      	ldr	r3, [pc, #28]	; (116bc <usage_fault.isra.0+0x20>)
   1169e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   116a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   116a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   116a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   116a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   116a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   116aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   116ac:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   116b0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   116b4:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   116b6:	2000      	movs	r0, #0
   116b8:	4770      	bx	lr
   116ba:	bf00      	nop
   116bc:	e000ed00 	.word	0xe000ed00

000116c0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   116c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   116c2:	4b57      	ldr	r3, [pc, #348]	; (11820 <z_arm_fault+0x160>)
   116c4:	685c      	ldr	r4, [r3, #4]
{
   116c6:	b08b      	sub	sp, #44	; 0x2c
   116c8:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   116ca:	f3c4 0408 	ubfx	r4, r4, #0, #9
   116ce:	2600      	movs	r6, #0
   116d0:	f386 8811 	msr	BASEPRI, r6
   116d4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   116d8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   116dc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   116e0:	d108      	bne.n	116f4 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   116e2:	f002 030c 	and.w	r3, r2, #12
   116e6:	2b08      	cmp	r3, #8
   116e8:	d004      	beq.n	116f4 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   116ea:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
   116ec:	bf5c      	itt	pl
   116ee:	4605      	movpl	r5, r0
			*nested_exc = true;
   116f0:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   116f2:	b97d      	cbnz	r5, 11714 <z_arm_fault+0x54>
   116f4:	4a4b      	ldr	r2, [pc, #300]	; (11824 <z_arm_fault+0x164>)
   116f6:	494c      	ldr	r1, [pc, #304]	; (11828 <z_arm_fault+0x168>)
   116f8:	484c      	ldr	r0, [pc, #304]	; (1182c <z_arm_fault+0x16c>)
   116fa:	f240 33f2 	movw	r3, #1010	; 0x3f2
   116fe:	f00b f950 	bl	1c9a2 <printk>
   11702:	484b      	ldr	r0, [pc, #300]	; (11830 <z_arm_fault+0x170>)
   11704:	f00b f94d 	bl	1c9a2 <printk>
   11708:	4846      	ldr	r0, [pc, #280]	; (11824 <z_arm_fault+0x164>)
   1170a:	f240 31f2 	movw	r1, #1010	; 0x3f2
   1170e:	f00b fba2 	bl	1ce56 <assert_post_action>
   11712:	2500      	movs	r5, #0
	*recoverable = false;
   11714:	2300      	movs	r3, #0
   11716:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   1171a:	1ee3      	subs	r3, r4, #3
   1171c:	2b03      	cmp	r3, #3
   1171e:	d878      	bhi.n	11812 <z_arm_fault+0x152>
   11720:	e8df f003 	tbb	[pc, r3]
   11724:	4f736f02 	.word	0x4f736f02
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11728:	4b3d      	ldr	r3, [pc, #244]	; (11820 <z_arm_fault+0x160>)
   1172a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1172c:	f014 0402 	ands.w	r4, r4, #2
   11730:	d16f      	bne.n	11812 <z_arm_fault+0x152>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   11732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   11734:	2a00      	cmp	r2, #0
   11736:	db18      	blt.n	1176a <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1173a:	005b      	lsls	r3, r3, #1
   1173c:	d554      	bpl.n	117e8 <z_arm_fault+0x128>
	uint16_t fault_insn = *(ret_addr - 1);
   1173e:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   11740:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   11744:	f64d 7302 	movw	r3, #57090	; 0xdf02
   11748:	429a      	cmp	r2, r3
   1174a:	d00d      	beq.n	11768 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
   1174c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   11750:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   11754:	781b      	ldrb	r3, [r3, #0]
   11756:	b33b      	cbz	r3, 117a8 <z_arm_fault+0xe8>
			reason = mem_manage_fault(esf, 1, recoverable);
   11758:	f10d 0207 	add.w	r2, sp, #7
   1175c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   1175e:	4628      	mov	r0, r5
   11760:	f7ff ff2c 	bl	115bc <mem_manage_fault>
		reason = usage_fault(esf);
   11764:	4604      	mov	r4, r0
		break;
   11766:	e000      	b.n	1176a <z_arm_fault+0xaa>
			reason = esf->basic.r0;
   11768:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1176a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1176e:	b9cb      	cbnz	r3, 117a4 <z_arm_fault+0xe4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11770:	aa02      	add	r2, sp, #8
   11772:	f105 0720 	add.w	r7, r5, #32
   11776:	6828      	ldr	r0, [r5, #0]
   11778:	6869      	ldr	r1, [r5, #4]
   1177a:	4613      	mov	r3, r2
   1177c:	c303      	stmia	r3!, {r0, r1}
   1177e:	3508      	adds	r5, #8
   11780:	42bd      	cmp	r5, r7
   11782:	461a      	mov	r2, r3
   11784:	d1f7      	bne.n	11776 <z_arm_fault+0xb6>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   11786:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11788:	2e00      	cmp	r6, #0
   1178a:	d044      	beq.n	11816 <z_arm_fault+0x156>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1178c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   11790:	b922      	cbnz	r2, 1179c <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   11792:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   11796:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1179a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1179c:	a902      	add	r1, sp, #8
   1179e:	4620      	mov	r0, r4
   117a0:	f00b fd3d 	bl	1d21e <z_arm_fatal_error>
}
   117a4:	b00b      	add	sp, #44	; 0x2c
   117a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   117a8:	4b22      	ldr	r3, [pc, #136]	; (11834 <z_arm_fault+0x174>)
   117aa:	781b      	ldrb	r3, [r3, #0]
   117ac:	b12b      	cbz	r3, 117ba <z_arm_fault+0xfa>
			reason = bus_fault(esf, 1, recoverable);
   117ae:	f10d 0107 	add.w	r1, sp, #7
   117b2:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   117b4:	f7ff ff54 	bl	11660 <bus_fault.isra.0>
   117b8:	e7d4      	b.n	11764 <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
   117ba:	4b1f      	ldr	r3, [pc, #124]	; (11838 <z_arm_fault+0x178>)
   117bc:	881b      	ldrh	r3, [r3, #0]
   117be:	b29b      	uxth	r3, r3
   117c0:	b113      	cbz	r3, 117c8 <z_arm_fault+0x108>
		reason = usage_fault(esf);
   117c2:	f7ff ff6b 	bl	1169c <usage_fault.isra.0>
   117c6:	e7cd      	b.n	11764 <z_arm_fault+0xa4>
			__ASSERT(0,
   117c8:	491c      	ldr	r1, [pc, #112]	; (1183c <z_arm_fault+0x17c>)
   117ca:	4a16      	ldr	r2, [pc, #88]	; (11824 <z_arm_fault+0x164>)
   117cc:	4817      	ldr	r0, [pc, #92]	; (1182c <z_arm_fault+0x16c>)
   117ce:	f240 23c3 	movw	r3, #707	; 0x2c3
   117d2:	f00b f8e6 	bl	1c9a2 <printk>
   117d6:	481a      	ldr	r0, [pc, #104]	; (11840 <z_arm_fault+0x180>)
   117d8:	f00b f8e3 	bl	1c9a2 <printk>
   117dc:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
   117e0:	4810      	ldr	r0, [pc, #64]	; (11824 <z_arm_fault+0x164>)
   117e2:	f00b fb38 	bl	1ce56 <assert_post_action>
   117e6:	e7c0      	b.n	1176a <z_arm_fault+0xaa>
   117e8:	4914      	ldr	r1, [pc, #80]	; (1183c <z_arm_fault+0x17c>)
   117ea:	4a0e      	ldr	r2, [pc, #56]	; (11824 <z_arm_fault+0x164>)
   117ec:	480f      	ldr	r0, [pc, #60]	; (1182c <z_arm_fault+0x16c>)
   117ee:	f240 23c7 	movw	r3, #711	; 0x2c7
   117f2:	f00b f8d6 	bl	1c9a2 <printk>
   117f6:	4813      	ldr	r0, [pc, #76]	; (11844 <z_arm_fault+0x184>)
   117f8:	f00b f8d3 	bl	1c9a2 <printk>
   117fc:	f240 21c7 	movw	r1, #711	; 0x2c7
   11800:	e7ee      	b.n	117e0 <z_arm_fault+0x120>
		reason = mem_manage_fault(esf, 0, recoverable);
   11802:	f10d 0207 	add.w	r2, sp, #7
   11806:	2100      	movs	r1, #0
   11808:	e7a9      	b.n	1175e <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
   1180a:	f10d 0107 	add.w	r1, sp, #7
   1180e:	2000      	movs	r0, #0
   11810:	e7d0      	b.n	117b4 <z_arm_fault+0xf4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   11812:	2400      	movs	r4, #0
   11814:	e7a9      	b.n	1176a <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11816:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1181a:	f023 0301 	bic.w	r3, r3, #1
   1181e:	e7bc      	b.n	1179a <z_arm_fault+0xda>
   11820:	e000ed00 	.word	0xe000ed00
   11824:	000203f8 	.word	0x000203f8
   11828:	0002049f 	.word	0x0002049f
   1182c:	0001feb5 	.word	0x0001feb5
   11830:	000204b2 	.word	0x000204b2
   11834:	e000ed29 	.word	0xe000ed29
   11838:	e000ed2a 	.word	0xe000ed2a
   1183c:	00021b83 	.word	0x00021b83
   11840:	000204f0 	.word	0x000204f0
   11844:	00020514 	.word	0x00020514

00011848 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11848:	4a02      	ldr	r2, [pc, #8]	; (11854 <z_arm_fault_init+0xc>)
   1184a:	6953      	ldr	r3, [r2, #20]
   1184c:	f043 0310 	orr.w	r3, r3, #16
   11850:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   11852:	4770      	bx	lr
   11854:	e000ed00 	.word	0xe000ed00

00011858 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   11858:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1185c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11860:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11862:	4672      	mov	r2, lr
	bl z_arm_fault
   11864:	f7ff ff2c 	bl	116c0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   11868:	bd01      	pop	{r0, pc}
   1186a:	bf00      	nop

0001186c <z_arm_interrupt_init>:
   1186c:	4804      	ldr	r0, [pc, #16]	; (11880 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1186e:	2300      	movs	r3, #0
   11870:	2140      	movs	r1, #64	; 0x40
   11872:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11874:	3301      	adds	r3, #1
   11876:	2b27      	cmp	r3, #39	; 0x27
   11878:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1187c:	d1f9      	bne.n	11872 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1187e:	4770      	bx	lr
   11880:	e000e100 	.word	0xe000e100

00011884 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   11884:	2000      	movs	r0, #0
    msr CONTROL, r0
   11886:	f380 8814 	msr	CONTROL, r0
    isb
   1188a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1188e:	f00d fecd 	bl	1f62c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   11892:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   11894:	490d      	ldr	r1, [pc, #52]	; (118cc <__start+0x48>)
    str r0, [r1]
   11896:	6008      	str	r0, [r1, #0]
    dsb
   11898:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1189c:	480c      	ldr	r0, [pc, #48]	; (118d0 <__start+0x4c>)
    msr msp, r0
   1189e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   118a2:	f000 f829 	bl	118f8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   118a6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   118a8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   118ac:	4809      	ldr	r0, [pc, #36]	; (118d4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   118ae:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   118b2:	1840      	adds	r0, r0, r1
    msr PSP, r0
   118b4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   118b8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   118bc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   118be:	4308      	orrs	r0, r1
    msr CONTROL, r0
   118c0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   118c4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   118c8:	f7ff fd8e 	bl	113e8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   118cc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   118d0:	20003ee0 	.word	0x20003ee0
    ldr r0, =z_interrupt_stacks
   118d4:	20004060 	.word	0x20004060

000118d8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   118d8:	4a06      	ldr	r2, [pc, #24]	; (118f4 <z_arm_clear_arm_mpu_config+0x1c>)
   118da:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   118dc:	2300      	movs	r3, #0
	int num_regions =
   118de:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   118e2:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   118e4:	428b      	cmp	r3, r1
   118e6:	d100      	bne.n	118ea <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   118e8:	4770      	bx	lr
  MPU->RNR = rnr;
   118ea:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   118ec:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   118ee:	3301      	adds	r3, #1
   118f0:	e7f8      	b.n	118e4 <z_arm_clear_arm_mpu_config+0xc>
   118f2:	bf00      	nop
   118f4:	e000ed90 	.word	0xe000ed90

000118f8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   118f8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   118fa:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   118fc:	2300      	movs	r3, #0
   118fe:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   11902:	f7ff ffe9 	bl	118d8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   11906:	4b14      	ldr	r3, [pc, #80]	; (11958 <z_arm_init_arch_hw_at_boot+0x60>)
   11908:	f04f 32ff 	mov.w	r2, #4294967295
   1190c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   11910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   11914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   11918:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   1191c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   11920:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   11924:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   11928:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1192c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   11930:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   11934:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   11938:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   1193c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   11940:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   11944:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   11948:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   1194c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1194e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11952:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   11956:	bd08      	pop	{r3, pc}
   11958:	e000e100 	.word	0xe000e100

0001195c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1195c:	4b06      	ldr	r3, [pc, #24]	; (11978 <z_impl_k_thread_abort+0x1c>)
   1195e:	689b      	ldr	r3, [r3, #8]
   11960:	4283      	cmp	r3, r0
   11962:	d107      	bne.n	11974 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11964:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11968:	b123      	cbz	r3, 11974 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1196a:	4a04      	ldr	r2, [pc, #16]	; (1197c <z_impl_k_thread_abort+0x20>)
   1196c:	6853      	ldr	r3, [r2, #4]
   1196e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11972:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   11974:	f009 bf28 	b.w	1b7c8 <z_thread_abort>
   11978:	20001eb4 	.word	0x20001eb4
   1197c:	e000ed00 	.word	0xe000ed00

00011980 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11980:	4b02      	ldr	r3, [pc, #8]	; (1198c <z_arm_configure_static_mpu_regions+0xc>)
   11982:	4a03      	ldr	r2, [pc, #12]	; (11990 <z_arm_configure_static_mpu_regions+0x10>)
   11984:	4803      	ldr	r0, [pc, #12]	; (11994 <z_arm_configure_static_mpu_regions+0x14>)
   11986:	2101      	movs	r1, #1
   11988:	f000 b868 	b.w	11a5c <arm_core_mpu_configure_static_mpu_regions>
   1198c:	20010000 	.word	0x20010000
   11990:	20000000 	.word	0x20000000
   11994:	0001f948 	.word	0x0001f948

00011998 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   11998:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   1199a:	4b05      	ldr	r3, [pc, #20]	; (119b0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   1199c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   1199e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   119a0:	4a04      	ldr	r2, [pc, #16]	; (119b4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   119a2:	2120      	movs	r1, #32
   119a4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   119a8:	4618      	mov	r0, r3
   119aa:	2101      	movs	r1, #1
   119ac:	f000 b87e 	b.w	11aac <arm_core_mpu_configure_dynamic_mpu_regions>
   119b0:	20001bfc 	.word	0x20001bfc
   119b4:	150b0000 	.word	0x150b0000

000119b8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   119b8:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   119ba:	4f1e      	ldr	r7, [pc, #120]	; (11a34 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   119bc:	2600      	movs	r6, #0
   119be:	428e      	cmp	r6, r1
   119c0:	db01      	blt.n	119c6 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   119c2:	4610      	mov	r0, r2
   119c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   119c6:	6844      	ldr	r4, [r0, #4]
   119c8:	b384      	cbz	r4, 11a2c <mpu_configure_regions+0x74>
		if (do_sanity_check &&
   119ca:	b153      	cbz	r3, 119e2 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   119cc:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   119d0:	ea14 0f0c 	tst.w	r4, ip
   119d4:	d118      	bne.n	11a08 <mpu_configure_regions+0x50>
		&&
   119d6:	2c1f      	cmp	r4, #31
   119d8:	d916      	bls.n	11a08 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   119da:	6805      	ldr	r5, [r0, #0]
		&&
   119dc:	ea1c 0f05 	tst.w	ip, r5
   119e0:	d112      	bne.n	11a08 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   119e2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   119e4:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   119e6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   119ea:	b2d2      	uxtb	r2, r2
   119ec:	d90f      	bls.n	11a0e <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   119ee:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   119f2:	d80e      	bhi.n	11a12 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   119f4:	3c01      	subs	r4, #1
   119f6:	fab4 f484 	clz	r4, r4
   119fa:	f1c4 041f 	rsb	r4, r4, #31
   119fe:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   11a00:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   11a02:	ea4c 0404 	orr.w	r4, ip, r4
   11a06:	d906      	bls.n	11a16 <mpu_configure_regions+0x5e>
			return -EINVAL;
   11a08:	f06f 0215 	mvn.w	r2, #21
   11a0c:	e7d9      	b.n	119c2 <mpu_configure_regions+0xa>
		return REGION_32B;
   11a0e:	2408      	movs	r4, #8
   11a10:	e7f6      	b.n	11a00 <mpu_configure_regions+0x48>
		return REGION_4G;
   11a12:	243e      	movs	r4, #62	; 0x3e
   11a14:	e7f4      	b.n	11a00 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11a16:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   11a1a:	4315      	orrs	r5, r2
   11a1c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11a20:	f044 0401 	orr.w	r4, r4, #1
   11a24:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11a26:	60fd      	str	r5, [r7, #12]
		reg_index++;
   11a28:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11a2a:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
   11a2c:	3601      	adds	r6, #1
   11a2e:	300c      	adds	r0, #12
   11a30:	e7c5      	b.n	119be <mpu_configure_regions+0x6>
   11a32:	bf00      	nop
   11a34:	e000ed90 	.word	0xe000ed90

00011a38 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11a38:	4b03      	ldr	r3, [pc, #12]	; (11a48 <arm_core_mpu_enable+0x10>)
   11a3a:	2205      	movs	r2, #5
   11a3c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   11a3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11a42:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11a46:	4770      	bx	lr
   11a48:	e000ed90 	.word	0xe000ed90

00011a4c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   11a4c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11a50:	4b01      	ldr	r3, [pc, #4]	; (11a58 <arm_core_mpu_disable+0xc>)
   11a52:	2200      	movs	r2, #0
   11a54:	605a      	str	r2, [r3, #4]
}
   11a56:	4770      	bx	lr
   11a58:	e000ed90 	.word	0xe000ed90

00011a5c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   11a5c:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11a5e:	4d0e      	ldr	r5, [pc, #56]	; (11a98 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   11a60:	2301      	movs	r3, #1
   11a62:	782a      	ldrb	r2, [r5, #0]
   11a64:	460c      	mov	r4, r1
   11a66:	f7ff ffa7 	bl	119b8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11a6a:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   11a6c:	3016      	adds	r0, #22
   11a6e:	d111      	bne.n	11a94 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   11a70:	f240 1311 	movw	r3, #273	; 0x111
   11a74:	4a09      	ldr	r2, [pc, #36]	; (11a9c <arm_core_mpu_configure_static_mpu_regions+0x40>)
   11a76:	490a      	ldr	r1, [pc, #40]	; (11aa0 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   11a78:	480a      	ldr	r0, [pc, #40]	; (11aa4 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   11a7a:	f00a ff92 	bl	1c9a2 <printk>
   11a7e:	4621      	mov	r1, r4
   11a80:	4809      	ldr	r0, [pc, #36]	; (11aa8 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
   11a82:	f00a ff8e 	bl	1c9a2 <printk>
			regions_num);
	}
}
   11a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   11a8a:	4804      	ldr	r0, [pc, #16]	; (11a9c <arm_core_mpu_configure_static_mpu_regions+0x40>)
   11a8c:	f240 1111 	movw	r1, #273	; 0x111
   11a90:	f00b b9e1 	b.w	1ce56 <assert_post_action>
}
   11a94:	bd38      	pop	{r3, r4, r5, pc}
   11a96:	bf00      	nop
   11a98:	20001f1c 	.word	0x20001f1c
   11a9c:	00020544 	.word	0x00020544
   11aa0:	00021b83 	.word	0x00021b83
   11aa4:	0001feb5 	.word	0x0001feb5
   11aa8:	0002057b 	.word	0x0002057b

00011aac <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   11aac:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   11aae:	4a12      	ldr	r2, [pc, #72]	; (11af8 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   11ab0:	2300      	movs	r3, #0
   11ab2:	7812      	ldrb	r2, [r2, #0]
   11ab4:	460c      	mov	r4, r1
   11ab6:	f7ff ff7f 	bl	119b8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   11aba:	f110 0f16 	cmn.w	r0, #22
   11abe:	d008      	beq.n	11ad2 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
   11ac0:	4b0e      	ldr	r3, [pc, #56]	; (11afc <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
   11ac2:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   11ac4:	2807      	cmp	r0, #7
   11ac6:	dd00      	ble.n	11aca <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   11ac8:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
   11aca:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   11acc:	611a      	str	r2, [r3, #16]
   11ace:	3001      	adds	r0, #1
   11ad0:	e7f8      	b.n	11ac4 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   11ad2:	4a0b      	ldr	r2, [pc, #44]	; (11b00 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   11ad4:	490b      	ldr	r1, [pc, #44]	; (11b04 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   11ad6:	480c      	ldr	r0, [pc, #48]	; (11b08 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   11ad8:	f44f 7398 	mov.w	r3, #304	; 0x130
   11adc:	f00a ff61 	bl	1c9a2 <printk>
   11ae0:	4621      	mov	r1, r4
   11ae2:	480a      	ldr	r0, [pc, #40]	; (11b0c <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   11ae4:	f00a ff5d 	bl	1c9a2 <printk>
}
   11ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   11aec:	4804      	ldr	r0, [pc, #16]	; (11b00 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   11aee:	f44f 7198 	mov.w	r1, #304	; 0x130
   11af2:	f00b b9b0 	b.w	1ce56 <assert_post_action>
   11af6:	bf00      	nop
   11af8:	20001f1c 	.word	0x20001f1c
   11afc:	e000ed90 	.word	0xe000ed90
   11b00:	00020544 	.word	0x00020544
   11b04:	00021b83 	.word	0x00021b83
   11b08:	0001feb5 	.word	0x0001feb5
   11b0c:	000205a7 	.word	0x000205a7

00011b10 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   11b10:	4925      	ldr	r1, [pc, #148]	; (11ba8 <z_arm_mpu_init+0x98>)
{
   11b12:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   11b14:	680c      	ldr	r4, [r1, #0]
   11b16:	2c08      	cmp	r4, #8
   11b18:	d913      	bls.n	11b42 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   11b1a:	f44f 73a4 	mov.w	r3, #328	; 0x148
   11b1e:	4a23      	ldr	r2, [pc, #140]	; (11bac <z_arm_mpu_init+0x9c>)
   11b20:	4923      	ldr	r1, [pc, #140]	; (11bb0 <z_arm_mpu_init+0xa0>)
   11b22:	4824      	ldr	r0, [pc, #144]	; (11bb4 <z_arm_mpu_init+0xa4>)
   11b24:	f00a ff3d 	bl	1c9a2 <printk>
   11b28:	4823      	ldr	r0, [pc, #140]	; (11bb8 <z_arm_mpu_init+0xa8>)
   11b2a:	2208      	movs	r2, #8
   11b2c:	4621      	mov	r1, r4
   11b2e:	f00a ff38 	bl	1c9a2 <printk>
   11b32:	481e      	ldr	r0, [pc, #120]	; (11bac <z_arm_mpu_init+0x9c>)
   11b34:	f44f 71a4 	mov.w	r1, #328	; 0x148
   11b38:	f00b f98d 	bl	1ce56 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   11b3c:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   11b40:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   11b42:	f7ff ff83 	bl	11a4c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11b46:	6848      	ldr	r0, [r1, #4]
   11b48:	491c      	ldr	r1, [pc, #112]	; (11bbc <z_arm_mpu_init+0xac>)
   11b4a:	2200      	movs	r2, #0
   11b4c:	4294      	cmp	r4, r2
   11b4e:	f100 000c 	add.w	r0, r0, #12
   11b52:	d119      	bne.n	11b88 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
   11b54:	4b1a      	ldr	r3, [pc, #104]	; (11bc0 <z_arm_mpu_init+0xb0>)
   11b56:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   11b58:	f7ff ff6e 	bl	11a38 <arm_core_mpu_enable>
	__ASSERT(
   11b5c:	680b      	ldr	r3, [r1, #0]
   11b5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   11b62:	2b08      	cmp	r3, #8
   11b64:	d00e      	beq.n	11b84 <z_arm_mpu_init+0x74>
   11b66:	4917      	ldr	r1, [pc, #92]	; (11bc4 <z_arm_mpu_init+0xb4>)
   11b68:	4a10      	ldr	r2, [pc, #64]	; (11bac <z_arm_mpu_init+0x9c>)
   11b6a:	4812      	ldr	r0, [pc, #72]	; (11bb4 <z_arm_mpu_init+0xa4>)
   11b6c:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   11b70:	f00a ff17 	bl	1c9a2 <printk>
   11b74:	4814      	ldr	r0, [pc, #80]	; (11bc8 <z_arm_mpu_init+0xb8>)
   11b76:	f00a ff14 	bl	1c9a2 <printk>
   11b7a:	480c      	ldr	r0, [pc, #48]	; (11bac <z_arm_mpu_init+0x9c>)
   11b7c:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   11b80:	f00b f969 	bl	1ce56 <assert_post_action>
	return 0;
   11b84:	2000      	movs	r0, #0
   11b86:	e7db      	b.n	11b40 <z_arm_mpu_init+0x30>
   11b88:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11b8a:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   11b8e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   11b92:	4313      	orrs	r3, r2
   11b94:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11b98:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11b9a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   11b9e:	f043 0301 	orr.w	r3, r3, #1
   11ba2:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11ba4:	3201      	adds	r2, #1
   11ba6:	e7d1      	b.n	11b4c <z_arm_mpu_init+0x3c>
   11ba8:	0001f954 	.word	0x0001f954
   11bac:	00020544 	.word	0x00020544
   11bb0:	00021b83 	.word	0x00021b83
   11bb4:	0001feb5 	.word	0x0001feb5
   11bb8:	000205d4 	.word	0x000205d4
   11bbc:	e000ed90 	.word	0xe000ed90
   11bc0:	20001f1c 	.word	0x20001f1c
   11bc4:	00020608 	.word	0x00020608
   11bc8:	00020658 	.word	0x00020658

00011bcc <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   11bcc:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   11bce:	4b0b      	ldr	r3, [pc, #44]	; (11bfc <malloc_prepare+0x30>)
   11bd0:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   11bd4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   11bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   11bdc:	d20c      	bcs.n	11bf8 <malloc_prepare+0x2c>
   11bde:	4908      	ldr	r1, [pc, #32]	; (11c00 <malloc_prepare+0x34>)
   11be0:	4a08      	ldr	r2, [pc, #32]	; (11c04 <malloc_prepare+0x38>)
   11be2:	4809      	ldr	r0, [pc, #36]	; (11c08 <malloc_prepare+0x3c>)
   11be4:	2380      	movs	r3, #128	; 0x80
   11be6:	f00a fedc 	bl	1c9a2 <printk>
   11bea:	4808      	ldr	r0, [pc, #32]	; (11c0c <malloc_prepare+0x40>)
   11bec:	f00a fed9 	bl	1c9a2 <printk>
   11bf0:	4804      	ldr	r0, [pc, #16]	; (11c04 <malloc_prepare+0x38>)
   11bf2:	2180      	movs	r1, #128	; 0x80
   11bf4:	f00b f92f 	bl	1ce56 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   11bf8:	2000      	movs	r0, #0
   11bfa:	bd08      	pop	{r3, pc}
   11bfc:	200058c1 	.word	0x200058c1
   11c00:	000206a9 	.word	0x000206a9
   11c04:	00020679 	.word	0x00020679
   11c08:	0001feb5 	.word	0x0001feb5
   11c0c:	000206ef 	.word	0x000206ef

00011c10 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   11c10:	4b01      	ldr	r3, [pc, #4]	; (11c18 <__stdout_hook_install+0x8>)
   11c12:	6018      	str	r0, [r3, #0]
}
   11c14:	4770      	bx	lr
   11c16:	bf00      	nop
   11c18:	2000042c 	.word	0x2000042c

00011c1c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   11c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c1e:	4f0a      	ldr	r7, [pc, #40]	; (11c48 <z_impl_zephyr_write_stdout+0x2c>)
   11c20:	460d      	mov	r5, r1
   11c22:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   11c24:	f1c0 0401 	rsb	r4, r0, #1
   11c28:	19a3      	adds	r3, r4, r6
   11c2a:	429d      	cmp	r5, r3
   11c2c:	dc01      	bgt.n	11c32 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   11c2e:	4628      	mov	r0, r5
   11c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   11c32:	7873      	ldrb	r3, [r6, #1]
   11c34:	2b0a      	cmp	r3, #10
   11c36:	d102      	bne.n	11c3e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   11c38:	683b      	ldr	r3, [r7, #0]
   11c3a:	200d      	movs	r0, #13
   11c3c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   11c3e:	683b      	ldr	r3, [r7, #0]
   11c40:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   11c44:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   11c46:	e7ef      	b.n	11c28 <z_impl_zephyr_write_stdout+0xc>
   11c48:	2000042c 	.word	0x2000042c

00011c4c <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   11c4c:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   11c4e:	211d      	movs	r1, #29
   11c50:	4804      	ldr	r0, [pc, #16]	; (11c64 <__chk_fail+0x18>)
   11c52:	f7ff ffe3 	bl	11c1c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   11c56:	4040      	eors	r0, r0
   11c58:	f380 8811 	msr	BASEPRI, r0
   11c5c:	f04f 0003 	mov.w	r0, #3
   11c60:	df02      	svc	2
	CODE_UNREACHABLE;
   11c62:	bf00      	nop
   11c64:	00020776 	.word	0x00020776

00011c68 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   11c68:	f04f 0340 	mov.w	r3, #64	; 0x40
   11c6c:	f3ef 8211 	mrs	r2, BASEPRI
   11c70:	f383 8812 	msr	BASEPRI_MAX, r3
   11c74:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   11c78:	4906      	ldr	r1, [pc, #24]	; (11c94 <nordicsemi_nrf52_init+0x2c>)
   11c7a:	2301      	movs	r3, #1
   11c7c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   11c80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   11c84:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   11c88:	f382 8811 	msr	BASEPRI, r2
   11c8c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   11c90:	2000      	movs	r0, #0
   11c92:	4770      	bx	lr
   11c94:	4001e000 	.word	0x4001e000

00011c98 <sys_arch_reboot>:
    *p_gpregret = val;
   11c98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11c9c:	b2c0      	uxtb	r0, r0
   11c9e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   11ca2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11ca6:	4905      	ldr	r1, [pc, #20]	; (11cbc <sys_arch_reboot+0x24>)
   11ca8:	4b05      	ldr	r3, [pc, #20]	; (11cc0 <sys_arch_reboot+0x28>)
   11caa:	68ca      	ldr	r2, [r1, #12]
   11cac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11cb0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11cb2:	60cb      	str	r3, [r1, #12]
   11cb4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   11cb8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11cba:	e7fd      	b.n	11cb8 <sys_arch_reboot+0x20>
   11cbc:	e000ed00 	.word	0xe000ed00
   11cc0:	05fa0004 	.word	0x05fa0004

00011cc4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   11cc4:	b120      	cbz	r0, 11cd0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   11cc6:	4b03      	ldr	r3, [pc, #12]	; (11cd4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   11cc8:	0180      	lsls	r0, r0, #6
   11cca:	f043 0301 	orr.w	r3, r3, #1
   11cce:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   11cd0:	4770      	bx	lr
   11cd2:	bf00      	nop
   11cd4:	0001f930 	.word	0x0001f930

00011cd8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   11cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11cda:	460b      	mov	r3, r1
	switch (src->type) {
   11cdc:	7801      	ldrb	r1, [r0, #0]
   11cde:	2901      	cmp	r1, #1
{
   11ce0:	4602      	mov	r2, r0
	switch (src->type) {
   11ce2:	d015      	beq.n	11d10 <uuid_to_uuid128+0x38>
   11ce4:	2902      	cmp	r1, #2
   11ce6:	d02b      	beq.n	11d40 <uuid_to_uuid128+0x68>
   11ce8:	b989      	cbnz	r1, 11d0e <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   11cea:	4c1c      	ldr	r4, [pc, #112]	; (11d5c <uuid_to_uuid128+0x84>)
   11cec:	461d      	mov	r5, r3
   11cee:	f104 0710 	add.w	r7, r4, #16
   11cf2:	6820      	ldr	r0, [r4, #0]
   11cf4:	6861      	ldr	r1, [r4, #4]
   11cf6:	462e      	mov	r6, r5
   11cf8:	c603      	stmia	r6!, {r0, r1}
   11cfa:	3408      	adds	r4, #8
   11cfc:	42bc      	cmp	r4, r7
   11cfe:	4635      	mov	r5, r6
   11d00:	d1f7      	bne.n	11cf2 <uuid_to_uuid128+0x1a>
		sys_put_le16(BT_UUID_16(src)->val,
   11d02:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
   11d04:	7821      	ldrb	r1, [r4, #0]
   11d06:	7031      	strb	r1, [r6, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   11d08:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   11d0a:	0a12      	lsrs	r2, r2, #8
   11d0c:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   11d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
   11d10:	4c12      	ldr	r4, [pc, #72]	; (11d5c <uuid_to_uuid128+0x84>)
   11d12:	461d      	mov	r5, r3
   11d14:	f104 0710 	add.w	r7, r4, #16
   11d18:	6820      	ldr	r0, [r4, #0]
   11d1a:	6861      	ldr	r1, [r4, #4]
   11d1c:	462e      	mov	r6, r5
   11d1e:	c603      	stmia	r6!, {r0, r1}
   11d20:	3408      	adds	r4, #8
   11d22:	42bc      	cmp	r4, r7
   11d24:	4635      	mov	r5, r6
   11d26:	d1f7      	bne.n	11d18 <uuid_to_uuid128+0x40>
		sys_put_le32(BT_UUID_32(src)->val,
   11d28:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
   11d2a:	7821      	ldrb	r1, [r4, #0]
   11d2c:	7031      	strb	r1, [r6, #0]
   11d2e:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
   11d32:	735a      	strb	r2, [r3, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   11d34:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   11d36:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   11d38:	0a12      	lsrs	r2, r2, #8
   11d3a:	7399      	strb	r1, [r3, #14]
   11d3c:	741a      	strb	r2, [r3, #16]
}
   11d3e:	e7e6      	b.n	11d0e <uuid_to_uuid128+0x36>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11d40:	f100 0510 	add.w	r5, r0, #16
   11d44:	6810      	ldr	r0, [r2, #0]
   11d46:	6851      	ldr	r1, [r2, #4]
   11d48:	461c      	mov	r4, r3
   11d4a:	c403      	stmia	r4!, {r0, r1}
   11d4c:	3208      	adds	r2, #8
   11d4e:	42aa      	cmp	r2, r5
   11d50:	4623      	mov	r3, r4
   11d52:	d1f7      	bne.n	11d44 <uuid_to_uuid128+0x6c>
   11d54:	7812      	ldrb	r2, [r2, #0]
   11d56:	7022      	strb	r2, [r4, #0]
   11d58:	e7d9      	b.n	11d0e <uuid_to_uuid128+0x36>
   11d5a:	bf00      	nop
   11d5c:	000207a3 	.word	0x000207a3

00011d60 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   11d60:	b570      	push	{r4, r5, r6, lr}
   11d62:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11d64:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   11d68:	2b01      	cmp	r3, #1
{
   11d6a:	4605      	mov	r5, r0
   11d6c:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11d6e:	d00e      	beq.n	11d8e <bt_buf_get_rx+0x2e>
   11d70:	2805      	cmp	r0, #5
   11d72:	d00c      	beq.n	11d8e <bt_buf_get_rx+0x2e>
   11d74:	490d      	ldr	r1, [pc, #52]	; (11dac <bt_buf_get_rx+0x4c>)
   11d76:	4a0e      	ldr	r2, [pc, #56]	; (11db0 <bt_buf_get_rx+0x50>)
   11d78:	480e      	ldr	r0, [pc, #56]	; (11db4 <bt_buf_get_rx+0x54>)
   11d7a:	2342      	movs	r3, #66	; 0x42
   11d7c:	f00a fe11 	bl	1c9a2 <printk>
   11d80:	480d      	ldr	r0, [pc, #52]	; (11db8 <bt_buf_get_rx+0x58>)
   11d82:	f00a fe0e 	bl	1c9a2 <printk>
   11d86:	480a      	ldr	r0, [pc, #40]	; (11db0 <bt_buf_get_rx+0x50>)
   11d88:	2142      	movs	r1, #66	; 0x42
   11d8a:	f00b f864 	bl	1ce56 <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   11d8e:	4623      	mov	r3, r4
   11d90:	480a      	ldr	r0, [pc, #40]	; (11dbc <bt_buf_get_rx+0x5c>)
   11d92:	4632      	mov	r2, r6
   11d94:	f00d f904 	bl	1efa0 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   11d98:	4604      	mov	r4, r0
   11d9a:	b120      	cbz	r0, 11da6 <bt_buf_get_rx+0x46>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   11d9c:	2100      	movs	r1, #0
   11d9e:	3008      	adds	r0, #8
   11da0:	f004 f974 	bl	1608c <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11da4:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   11da6:	4620      	mov	r0, r4
   11da8:	bd70      	pop	{r4, r5, r6, pc}
   11daa:	bf00      	nop
   11dac:	000207e3 	.word	0x000207e3
   11db0:	000207b4 	.word	0x000207b4
   11db4:	0001feb5 	.word	0x0001feb5
   11db8:	00020828 	.word	0x00020828
   11dbc:	200006f0 	.word	0x200006f0

00011dc0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   11dc0:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   11dc2:	490b      	ldr	r1, [pc, #44]	; (11df0 <bt_buf_get_cmd_complete+0x30>)
{
   11dc4:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   11dc6:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
   11dca:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   11dcc:	b920      	cbnz	r0, 11dd8 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   11dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11dd2:	2001      	movs	r0, #1
   11dd4:	f7ff bfc4 	b.w	11d60 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   11dd8:	f004 f9fc 	bl	161d4 <net_buf_ref>
   11ddc:	2301      	movs	r3, #1
		buf->len = 0U;
   11dde:	2100      	movs	r1, #0
   11de0:	7503      	strb	r3, [r0, #20]
   11de2:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   11de4:	4604      	mov	r4, r0
   11de6:	3008      	adds	r0, #8
   11de8:	f004 f950 	bl	1608c <net_buf_simple_reserve>
}
   11dec:	4620      	mov	r0, r4
   11dee:	bd10      	pop	{r4, pc}
   11df0:	200002a0 	.word	0x200002a0

00011df4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   11df4:	b570      	push	{r4, r5, r6, lr}
   11df6:	4604      	mov	r4, r0
	switch (evt) {
   11df8:	2c0f      	cmp	r4, #15
{
   11dfa:	460d      	mov	r5, r1
   11dfc:	4610      	mov	r0, r2
   11dfe:	4619      	mov	r1, r3
	switch (evt) {
   11e00:	d805      	bhi.n	11e0e <bt_buf_get_evt+0x1a>
   11e02:	2c0d      	cmp	r4, #13
   11e04:	d912      	bls.n	11e2c <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   11e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   11e0a:	f7ff bfd9 	b.w	11dc0 <bt_buf_get_cmd_complete>
	switch (evt) {
   11e0e:	2c13      	cmp	r4, #19
   11e10:	d10c      	bne.n	11e2c <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   11e12:	480b      	ldr	r0, [pc, #44]	; (11e40 <bt_buf_get_evt+0x4c>)
   11e14:	f00d f8c4 	bl	1efa0 <net_buf_alloc_fixed>
			if (buf) {
   11e18:	4604      	mov	r4, r0
   11e1a:	b128      	cbz	r0, 11e28 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   11e1c:	2100      	movs	r1, #0
   11e1e:	3008      	adds	r0, #8
   11e20:	f004 f934 	bl	1608c <net_buf_simple_reserve>
   11e24:	2301      	movs	r3, #1
   11e26:	7523      	strb	r3, [r4, #20]
}
   11e28:	4620      	mov	r0, r4
   11e2a:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   11e2c:	4602      	mov	r2, r0
   11e2e:	460b      	mov	r3, r1
		if (discardable) {
   11e30:	b10d      	cbz	r5, 11e36 <bt_buf_get_evt+0x42>
   11e32:	4804      	ldr	r0, [pc, #16]	; (11e44 <bt_buf_get_evt+0x50>)
   11e34:	e7ee      	b.n	11e14 <bt_buf_get_evt+0x20>
}
   11e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11e3a:	2001      	movs	r0, #1
   11e3c:	f7ff bf90 	b.w	11d60 <bt_buf_get_rx>
   11e40:	2000071c 	.word	0x2000071c
   11e44:	2000066c 	.word	0x2000066c

00011e48 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   11e48:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   11e4a:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   11e4c:	781a      	ldrb	r2, [r3, #0]
   11e4e:	b972      	cbnz	r2, 11e6e <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11e50:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   11e54:	4620      	mov	r0, r4
   11e56:	f001 fd79 	bl	1394c <bt_conn_lookup_handle>
	if (!conn) {
   11e5a:	4605      	mov	r5, r0
   11e5c:	b940      	cbnz	r0, 11e70 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   11e5e:	4b08      	ldr	r3, [pc, #32]	; (11e80 <hci_disconn_complete_prio+0x38>)
   11e60:	881a      	ldrh	r2, [r3, #0]
   11e62:	b922      	cbnz	r2, 11e6e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   11e64:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   11e68:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   11e6c:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   11e6e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   11e70:	2101      	movs	r1, #1
   11e72:	f001 fd77 	bl	13964 <bt_conn_set_state>
	bt_conn_unref(conn);
   11e76:	4628      	mov	r0, r5
}
   11e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   11e7c:	f001 bd3c 	b.w	138f8 <bt_conn_unref>
   11e80:	20001f0c 	.word	0x20001f0c

00011e84 <hci_le_meta_event>:
		      sizeof(struct bt_hci_evt_le_connectionless_iq_report)),
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
};

static void hci_le_meta_event(struct net_buf *buf)
{
   11e84:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   11e86:	2101      	movs	r1, #1
   11e88:	4604      	mov	r4, r0
   11e8a:	3008      	adds	r0, #8
   11e8c:	f004 fa6a 	bl	16364 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   11e90:	4621      	mov	r1, r4
   11e92:	4a03      	ldr	r2, [pc, #12]	; (11ea0 <hci_le_meta_event+0x1c>)
   11e94:	7800      	ldrb	r0, [r0, #0]
}
   11e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   11e9a:	2308      	movs	r3, #8
   11e9c:	f00b ba68 	b.w	1d370 <handle_event>
   11ea0:	0001f9a4 	.word	0x0001f9a4

00011ea4 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   11ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   11ea8:	4f3b      	ldr	r7, [pc, #236]	; (11f98 <hci_rx_thread+0xf4>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   11eaa:	f8df 8100 	ldr.w	r8, [pc, #256]	; 11fac <hci_rx_thread+0x108>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   11eae:	4e3b      	ldr	r6, [pc, #236]	; (11f9c <hci_rx_thread+0xf8>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   11eb0:	f04f 33ff 	mov.w	r3, #4294967295
   11eb4:	f04f 32ff 	mov.w	r2, #4294967295
   11eb8:	4638      	mov	r0, r7
   11eba:	f004 f8b3 	bl	16024 <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   11ebe:	7d03      	ldrb	r3, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   11ec0:	2b01      	cmp	r3, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   11ec2:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   11ec4:	d039      	beq.n	11f3a <hci_rx_thread+0x96>
   11ec6:	2b03      	cmp	r3, #3
   11ec8:	d120      	bne.n	11f0c <hci_rx_thread+0x68>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   11eca:	8983      	ldrh	r3, [r0, #12]
   11ecc:	2b03      	cmp	r3, #3
   11ece:	d80c      	bhi.n	11eea <hci_rx_thread+0x46>
   11ed0:	4933      	ldr	r1, [pc, #204]	; (11fa0 <hci_rx_thread+0xfc>)
   11ed2:	4834      	ldr	r0, [pc, #208]	; (11fa4 <hci_rx_thread+0x100>)
   11ed4:	f44f 73db 	mov.w	r3, #438	; 0x1b6
   11ed8:	4632      	mov	r2, r6
   11eda:	f00a fd62 	bl	1c9a2 <printk>
   11ede:	4040      	eors	r0, r0
   11ee0:	f380 8811 	msr	BASEPRI, r0
   11ee4:	f04f 0003 	mov.w	r0, #3
   11ee8:	df02      	svc	2
   11eea:	2104      	movs	r1, #4
   11eec:	f104 0008 	add.w	r0, r4, #8
   11ef0:	f004 fa38 	bl	16364 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   11ef4:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   11ef6:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   11ef8:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   11efc:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   11efe:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   11f00:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   11f04:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   11f06:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   11f08:	d003      	beq.n	11f12 <hci_rx_thread+0x6e>
	net_buf_unref(buf);
   11f0a:	4620      	mov	r0, r4
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   11f0c:	f004 f91c 	bl	16148 <net_buf_unref>
			break;
   11f10:	e010      	b.n	11f34 <hci_rx_thread+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   11f12:	f001 fd1b 	bl	1394c <bt_conn_lookup_handle>
	if (!conn) {
   11f16:	4605      	mov	r5, r0
   11f18:	2800      	cmp	r0, #0
   11f1a:	d0f6      	beq.n	11f0a <hci_rx_thread+0x66>
	acl(buf)->index = bt_conn_index(conn);
   11f1c:	f001 fdec 	bl	13af8 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   11f20:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   11f24:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   11f26:	4621      	mov	r1, r4
   11f28:	4628      	mov	r0, r5
   11f2a:	f00b fd49 	bl	1d9c0 <bt_conn_recv>
	bt_conn_unref(conn);
   11f2e:	4628      	mov	r0, r5
   11f30:	f001 fce2 	bl	138f8 <bt_conn_unref>
	z_impl_k_yield();
   11f34:	f009 faa8 	bl	1b488 <z_impl_k_yield>
	while (1) {
   11f38:	e7ba      	b.n	11eb0 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   11f3a:	8983      	ldrh	r3, [r0, #12]
   11f3c:	2b01      	cmp	r3, #1
   11f3e:	d80c      	bhi.n	11f5a <hci_rx_thread+0xb6>
   11f40:	4917      	ldr	r1, [pc, #92]	; (11fa0 <hci_rx_thread+0xfc>)
   11f42:	4818      	ldr	r0, [pc, #96]	; (11fa4 <hci_rx_thread+0x100>)
   11f44:	f640 130d 	movw	r3, #2317	; 0x90d
   11f48:	4632      	mov	r2, r6
   11f4a:	f00a fd2a 	bl	1c9a2 <printk>
   11f4e:	4040      	eors	r0, r0
   11f50:	f380 8811 	msr	BASEPRI, r0
   11f54:	f04f 0003 	mov.w	r0, #3
   11f58:	df02      	svc	2
   11f5a:	2102      	movs	r1, #2
   11f5c:	f104 0008 	add.w	r0, r4, #8
   11f60:	f004 fa00 	bl	16364 <net_buf_simple_pull_mem>
   11f64:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   11f66:	7800      	ldrb	r0, [r0, #0]
   11f68:	f00b f9f0 	bl	1d34c <bt_hci_evt_get_flags>
   11f6c:	0783      	lsls	r3, r0, #30
   11f6e:	d40c      	bmi.n	11f8a <hci_rx_thread+0xe6>
   11f70:	490d      	ldr	r1, [pc, #52]	; (11fa8 <hci_rx_thread+0x104>)
   11f72:	480c      	ldr	r0, [pc, #48]	; (11fa4 <hci_rx_thread+0x100>)
   11f74:	f640 1311 	movw	r3, #2321	; 0x911
   11f78:	4632      	mov	r2, r6
   11f7a:	f00a fd12 	bl	1c9a2 <printk>
   11f7e:	4040      	eors	r0, r0
   11f80:	f380 8811 	msr	BASEPRI, r0
   11f84:	f04f 0003 	mov.w	r0, #3
   11f88:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   11f8a:	7828      	ldrb	r0, [r5, #0]
   11f8c:	2304      	movs	r3, #4
   11f8e:	4642      	mov	r2, r8
   11f90:	4621      	mov	r1, r4
   11f92:	f00b f9ed 	bl	1d370 <handle_event>
   11f96:	e7b8      	b.n	11f0a <hci_rx_thread+0x66>
   11f98:	200003d4 	.word	0x200003d4
   11f9c:	00020848 	.word	0x00020848
   11fa0:	0002087c 	.word	0x0002087c
   11fa4:	0001feb5 	.word	0x0001feb5
   11fa8:	00020895 	.word	0x00020895
   11fac:	0001f9f4 	.word	0x0001f9f4

00011fb0 <hci_cmd_done>:
{
   11fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11fb2:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   11fb4:	7990      	ldrb	r0, [r2, #6]
{
   11fb6:	460e      	mov	r6, r1
   11fb8:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   11fba:	f003 ff25 	bl	15e08 <net_buf_pool_get>
   11fbe:	4b30      	ldr	r3, [pc, #192]	; (12080 <hci_cmd_done+0xd0>)
   11fc0:	4283      	cmp	r3, r0
   11fc2:	d15b      	bne.n	1207c <hci_cmd_done+0xcc>
	if (cmd(buf)->opcode != opcode) {
   11fc4:	4620      	mov	r0, r4
   11fc6:	f003 ff27 	bl	15e18 <net_buf_id>
   11fca:	4d2e      	ldr	r5, [pc, #184]	; (12084 <hci_cmd_done+0xd4>)
   11fcc:	230c      	movs	r3, #12
   11fce:	fb03 5300 	mla	r3, r3, r0, r5
   11fd2:	885b      	ldrh	r3, [r3, #2]
   11fd4:	42bb      	cmp	r3, r7
   11fd6:	d151      	bne.n	1207c <hci_cmd_done+0xcc>
	if (bt_dev.sent_cmd) {
   11fd8:	4f2b      	ldr	r7, [pc, #172]	; (12088 <hci_cmd_done+0xd8>)
   11fda:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   11fde:	b120      	cbz	r0, 11fea <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   11fe0:	f004 f8b2 	bl	16148 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   11fe4:	2300      	movs	r3, #0
   11fe6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   11fea:	4620      	mov	r0, r4
   11fec:	f003 ff14 	bl	15e18 <net_buf_id>
   11ff0:	270c      	movs	r7, #12
   11ff2:	fb07 5000 	mla	r0, r7, r0, r5
   11ff6:	6843      	ldr	r3, [r0, #4]
   11ff8:	b1e3      	cbz	r3, 12034 <hci_cmd_done+0x84>
   11ffa:	b9de      	cbnz	r6, 12034 <hci_cmd_done+0x84>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   11ffc:	4620      	mov	r0, r4
   11ffe:	f003 ff0b 	bl	15e18 <net_buf_id>
   12002:	fb07 5000 	mla	r0, r7, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12006:	2201      	movs	r2, #1
   12008:	6840      	ldr	r0, [r0, #4]
   1200a:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
   1200e:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   12010:	f001 071f 	and.w	r7, r1, #31
   12014:	40ba      	lsls	r2, r7
	if (val) {
   12016:	0949      	lsrs	r1, r1, #5
   12018:	b318      	cbz	r0, 12062 <hci_cmd_done+0xb2>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1201a:	f3bf 8f5b 	dmb	ish
   1201e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12022:	e853 1f00 	ldrex	r1, [r3]
   12026:	4311      	orrs	r1, r2
   12028:	e843 1000 	strex	r0, r1, [r3]
   1202c:	2800      	cmp	r0, #0
   1202e:	d1f8      	bne.n	12022 <hci_cmd_done+0x72>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12030:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
   12034:	4620      	mov	r0, r4
   12036:	f003 feef 	bl	15e18 <net_buf_id>
   1203a:	270c      	movs	r7, #12
   1203c:	fb07 5000 	mla	r0, r7, r0, r5
   12040:	6883      	ldr	r3, [r0, #8]
   12042:	b1db      	cbz	r3, 1207c <hci_cmd_done+0xcc>
		cmd(buf)->status = status;
   12044:	4620      	mov	r0, r4
   12046:	f003 fee7 	bl	15e18 <net_buf_id>
   1204a:	4378      	muls	r0, r7
   1204c:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   1204e:	4620      	mov	r0, r4
   12050:	f003 fee2 	bl	15e18 <net_buf_id>
   12054:	fb07 5500 	mla	r5, r7, r0, r5
   12058:	68a8      	ldr	r0, [r5, #8]
}
   1205a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   1205e:	f007 bd3d 	b.w	19adc <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12062:	43d2      	mvns	r2, r2
   12064:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12068:	f3bf 8f5b 	dmb	ish
   1206c:	e853 1f00 	ldrex	r1, [r3]
   12070:	4011      	ands	r1, r2
   12072:	e843 1000 	strex	r0, r1, [r3]
   12076:	2800      	cmp	r0, #0
   12078:	d0da      	beq.n	12030 <hci_cmd_done+0x80>
   1207a:	e7f7      	b.n	1206c <hci_cmd_done+0xbc>
   1207c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1207e:	bf00      	nop
   12080:	200006c4 	.word	0x200006c4
   12084:	20001c08 	.word	0x20001c08
   12088:	200002a0 	.word	0x200002a0

0001208c <hci_cmd_status>:
{
   1208c:	b538      	push	{r3, r4, r5, lr}
   1208e:	2104      	movs	r1, #4
   12090:	4604      	mov	r4, r0
   12092:	3008      	adds	r0, #8
   12094:	f004 f966 	bl	16364 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   12098:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1209a:	7801      	ldrb	r1, [r0, #0]
   1209c:	8840      	ldrh	r0, [r0, #2]
   1209e:	4622      	mov	r2, r4
   120a0:	f7ff ff86 	bl	11fb0 <hci_cmd_done>
	if (ncmd) {
   120a4:	b125      	cbz	r5, 120b0 <hci_cmd_status+0x24>
   120a6:	4803      	ldr	r0, [pc, #12]	; (120b4 <hci_cmd_status+0x28>)
}
   120a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   120ac:	f007 bd16 	b.w	19adc <z_impl_k_sem_give>
   120b0:	bd38      	pop	{r3, r4, r5, pc}
   120b2:	bf00      	nop
   120b4:	200003b8 	.word	0x200003b8

000120b8 <hci_cmd_complete>:
{
   120b8:	b538      	push	{r3, r4, r5, lr}
   120ba:	2103      	movs	r1, #3
   120bc:	4604      	mov	r4, r0
   120be:	3008      	adds	r0, #8
   120c0:	f004 f950 	bl	16364 <net_buf_simple_pull_mem>
	status = buf->data[0];
   120c4:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   120c6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   120c8:	7819      	ldrb	r1, [r3, #0]
   120ca:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   120ce:	4622      	mov	r2, r4
   120d0:	f7ff ff6e 	bl	11fb0 <hci_cmd_done>
	if (ncmd) {
   120d4:	b125      	cbz	r5, 120e0 <hci_cmd_complete+0x28>
   120d6:	4803      	ldr	r0, [pc, #12]	; (120e4 <hci_cmd_complete+0x2c>)
}
   120d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   120dc:	f007 bcfe 	b.w	19adc <z_impl_k_sem_give>
   120e0:	bd38      	pop	{r3, r4, r5, pc}
   120e2:	bf00      	nop
   120e4:	200003b8 	.word	0x200003b8

000120e8 <bt_hci_cmd_state_set_init>:
{
   120e8:	b510      	push	{r4, lr}
	state->bit = bit;
   120ea:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   120ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
   120f2:	720b      	strb	r3, [r1, #8]
{
   120f4:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   120f6:	f003 fe8f 	bl	15e18 <net_buf_id>
   120fa:	4b03      	ldr	r3, [pc, #12]	; (12108 <bt_hci_cmd_state_set_init+0x20>)
   120fc:	220c      	movs	r2, #12
   120fe:	fb02 3000 	mla	r0, r2, r0, r3
   12102:	6044      	str	r4, [r0, #4]
}
   12104:	bd10      	pop	{r4, pc}
   12106:	bf00      	nop
   12108:	20001c08 	.word	0x20001c08

0001210c <bt_hci_cmd_create>:
{
   1210c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   12110:	f04f 32ff 	mov.w	r2, #4294967295
   12114:	4605      	mov	r5, r0
   12116:	f04f 33ff 	mov.w	r3, #4294967295
   1211a:	481b      	ldr	r0, [pc, #108]	; (12188 <bt_hci_cmd_create+0x7c>)
   1211c:	460e      	mov	r6, r1
   1211e:	f00c ff3f 	bl	1efa0 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   12122:	4604      	mov	r4, r0
   12124:	b948      	cbnz	r0, 1213a <bt_hci_cmd_create+0x2e>
   12126:	4919      	ldr	r1, [pc, #100]	; (1218c <bt_hci_cmd_create+0x80>)
   12128:	4819      	ldr	r0, [pc, #100]	; (12190 <bt_hci_cmd_create+0x84>)
   1212a:	4a1a      	ldr	r2, [pc, #104]	; (12194 <bt_hci_cmd_create+0x88>)
   1212c:	23e9      	movs	r3, #233	; 0xe9
   1212e:	f00a fc38 	bl	1c9a2 <printk>
   12132:	4818      	ldr	r0, [pc, #96]	; (12194 <bt_hci_cmd_create+0x88>)
   12134:	21e9      	movs	r1, #233	; 0xe9
   12136:	f00a fe8e 	bl	1ce56 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   1213a:	f104 0b08 	add.w	fp, r4, #8
   1213e:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   12140:	2700      	movs	r7, #0
   12142:	4658      	mov	r0, fp
   12144:	f003 ffa2 	bl	1608c <net_buf_simple_reserve>
   12148:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   1214a:	4620      	mov	r0, r4
   1214c:	f003 fe64 	bl	15e18 <net_buf_id>
   12150:	f8df 8044 	ldr.w	r8, [pc, #68]	; 12198 <bt_hci_cmd_create+0x8c>
   12154:	f04f 0a0c 	mov.w	sl, #12
   12158:	fb0a 8000 	mla	r0, sl, r0, r8
   1215c:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   1215e:	4620      	mov	r0, r4
   12160:	f003 fe5a 	bl	15e18 <net_buf_id>
   12164:	fb0a 8000 	mla	r0, sl, r0, r8
   12168:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   1216a:	4620      	mov	r0, r4
   1216c:	f003 fe54 	bl	15e18 <net_buf_id>
   12170:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   12174:	2103      	movs	r1, #3
   12176:	6047      	str	r7, [r0, #4]
   12178:	4658      	mov	r0, fp
   1217a:	f004 f915 	bl	163a8 <net_buf_simple_add>
	hdr->param_len = param_len;
   1217e:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   12180:	8005      	strh	r5, [r0, #0]
}
   12182:	4620      	mov	r0, r4
   12184:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12188:	200006c4 	.word	0x200006c4
   1218c:	000208c3 	.word	0x000208c3
   12190:	0001feb5 	.word	0x0001feb5
   12194:	00020848 	.word	0x00020848
   12198:	20001c08 	.word	0x20001c08

0001219c <bt_hci_cmd_send_sync>:
{
   1219c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1219e:	4615      	mov	r5, r2
   121a0:	b087      	sub	sp, #28
	if (!buf) {
   121a2:	460c      	mov	r4, r1
   121a4:	b921      	cbnz	r1, 121b0 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   121a6:	f7ff ffb1 	bl	1210c <bt_hci_cmd_create>
		if (!buf) {
   121aa:	4604      	mov	r4, r0
   121ac:	2800      	cmp	r0, #0
   121ae:	d048      	beq.n	12242 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   121b0:	2201      	movs	r2, #1
   121b2:	2100      	movs	r1, #0
   121b4:	4668      	mov	r0, sp
   121b6:	f00d f8ce 	bl	1f356 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   121ba:	4620      	mov	r0, r4
   121bc:	f003 fe2c 	bl	15e18 <net_buf_id>
   121c0:	4e21      	ldr	r6, [pc, #132]	; (12248 <bt_hci_cmd_send_sync+0xac>)
   121c2:	230c      	movs	r3, #12
   121c4:	fb03 6000 	mla	r0, r3, r0, r6
   121c8:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   121cc:	4620      	mov	r0, r4
   121ce:	f004 f801 	bl	161d4 <net_buf_ref>
   121d2:	4601      	mov	r1, r0
   121d4:	481d      	ldr	r0, [pc, #116]	; (1224c <bt_hci_cmd_send_sync+0xb0>)
   121d6:	f003 ff83 	bl	160e0 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   121da:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   121de:	2300      	movs	r3, #0
   121e0:	4668      	mov	r0, sp
   121e2:	f007 fcbf 	bl	19b64 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   121e6:	4607      	mov	r7, r0
   121e8:	b180      	cbz	r0, 1220c <bt_hci_cmd_send_sync+0x70>
   121ea:	4a19      	ldr	r2, [pc, #100]	; (12250 <bt_hci_cmd_send_sync+0xb4>)
   121ec:	4919      	ldr	r1, [pc, #100]	; (12254 <bt_hci_cmd_send_sync+0xb8>)
   121ee:	481a      	ldr	r0, [pc, #104]	; (12258 <bt_hci_cmd_send_sync+0xbc>)
   121f0:	f44f 7399 	mov.w	r3, #306	; 0x132
   121f4:	f00a fbd5 	bl	1c9a2 <printk>
   121f8:	4818      	ldr	r0, [pc, #96]	; (1225c <bt_hci_cmd_send_sync+0xc0>)
   121fa:	4639      	mov	r1, r7
   121fc:	f00a fbd1 	bl	1c9a2 <printk>
   12200:	4040      	eors	r0, r0
   12202:	f380 8811 	msr	BASEPRI, r0
   12206:	f04f 0003 	mov.w	r0, #3
   1220a:	df02      	svc	2
	status = cmd(buf)->status;
   1220c:	4620      	mov	r0, r4
   1220e:	f003 fe03 	bl	15e18 <net_buf_id>
   12212:	230c      	movs	r3, #12
   12214:	4343      	muls	r3, r0
   12216:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   12218:	b156      	cbz	r6, 12230 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   1221a:	4620      	mov	r0, r4
   1221c:	f003 ff94 	bl	16148 <net_buf_unref>
			return -EIO;
   12220:	2e09      	cmp	r6, #9
   12222:	bf0c      	ite	eq
   12224:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   12228:	f06f 0004 	mvnne.w	r0, #4
}
   1222c:	b007      	add	sp, #28
   1222e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   12230:	b115      	cbz	r5, 12238 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   12232:	602c      	str	r4, [r5, #0]
	return 0;
   12234:	4630      	mov	r0, r6
   12236:	e7f9      	b.n	1222c <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   12238:	4620      	mov	r0, r4
   1223a:	f003 ff85 	bl	16148 <net_buf_unref>
	return 0;
   1223e:	4628      	mov	r0, r5
   12240:	e7f4      	b.n	1222c <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   12242:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12246:	e7f1      	b.n	1222c <bt_hci_cmd_send_sync+0x90>
   12248:	20001c08 	.word	0x20001c08
   1224c:	200003f0 	.word	0x200003f0
   12250:	00020848 	.word	0x00020848
   12254:	000208c7 	.word	0x000208c7
   12258:	0001feb5 	.word	0x0001feb5
   1225c:	000208d0 	.word	0x000208d0

00012260 <hci_init>:
{
   12260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   12262:	4d41      	ldr	r5, [pc, #260]	; (12368 <hci_init+0x108>)
   12264:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   12268:	6899      	ldr	r1, [r3, #8]
   1226a:	f011 0101 	ands.w	r1, r1, #1
   1226e:	d123      	bne.n	122b8 <hci_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   12270:	aa01      	add	r2, sp, #4
   12272:	f640 4003 	movw	r0, #3075	; 0xc03
   12276:	f7ff ff91 	bl	1219c <bt_hci_cmd_send_sync>
		if (err) {
   1227a:	4604      	mov	r4, r0
   1227c:	2800      	cmp	r0, #0
   1227e:	d170      	bne.n	12362 <hci_init+0x102>
		hci_reset_complete(rsp);
   12280:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
   12282:	689b      	ldr	r3, [r3, #8]
	if (status) {
   12284:	781b      	ldrb	r3, [r3, #0]
   12286:	b9a3      	cbnz	r3, 122b2 <hci_init+0x52>
		bt_scan_reset();
   12288:	f000 ff7a 	bl	13180 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1228c:	f3bf 8f5b 	dmb	ish
   12290:	462b      	mov	r3, r5
   12292:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   12296:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1229a:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1229e:	f3bf 8f5b 	dmb	ish
   122a2:	e853 1f00 	ldrex	r1, [r3]
   122a6:	e843 2000 	strex	r0, r2, [r3]
   122aa:	2800      	cmp	r0, #0
   122ac:	d1f9      	bne.n	122a2 <hci_init+0x42>
   122ae:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   122b2:	9801      	ldr	r0, [sp, #4]
   122b4:	f003 ff48 	bl	16148 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   122b8:	aa01      	add	r2, sp, #4
   122ba:	2100      	movs	r1, #0
   122bc:	f241 0003 	movw	r0, #4099	; 0x1003
   122c0:	f7ff ff6c 	bl	1219c <bt_hci_cmd_send_sync>
	if (err) {
   122c4:	4604      	mov	r4, r0
   122c6:	2800      	cmp	r0, #0
   122c8:	d14b      	bne.n	12362 <hci_init+0x102>
	read_local_features_complete(rsp);
   122ca:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   122cc:	4e27      	ldr	r6, [pc, #156]	; (1236c <hci_init+0x10c>)
   122ce:	6893      	ldr	r3, [r2, #8]
   122d0:	f853 0f01 	ldr.w	r0, [r3, #1]!
   122d4:	6859      	ldr	r1, [r3, #4]
   122d6:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   122d8:	4610      	mov	r0, r2
   122da:	f003 ff35 	bl	16148 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   122de:	4621      	mov	r1, r4
   122e0:	aa01      	add	r2, sp, #4
   122e2:	f241 0001 	movw	r0, #4097	; 0x1001
   122e6:	f7ff ff59 	bl	1219c <bt_hci_cmd_send_sync>
	if (err) {
   122ea:	4604      	mov	r4, r0
   122ec:	2800      	cmp	r0, #0
   122ee:	d138      	bne.n	12362 <hci_init+0x102>
	read_local_ver_complete(rsp);
   122f0:	9801      	ldr	r0, [sp, #4]
   122f2:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   122f4:	785a      	ldrb	r2, [r3, #1]
   122f6:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   122fa:	78d9      	ldrb	r1, [r3, #3]
   122fc:	789a      	ldrb	r2, [r3, #2]
   122fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12302:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   12306:	791a      	ldrb	r2, [r3, #4]
   12308:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   1230c:	7a19      	ldrb	r1, [r3, #8]
   1230e:	79da      	ldrb	r2, [r3, #7]
   12310:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12314:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   12318:	795a      	ldrb	r2, [r3, #5]
   1231a:	799b      	ldrb	r3, [r3, #6]
   1231c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   12320:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   12324:	f003 ff10 	bl	16148 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   12328:	4621      	mov	r1, r4
   1232a:	aa01      	add	r2, sp, #4
   1232c:	f241 0002 	movw	r0, #4098	; 0x1002
   12330:	f7ff ff34 	bl	1219c <bt_hci_cmd_send_sync>
	if (err) {
   12334:	4604      	mov	r4, r0
   12336:	b9a0      	cbnz	r0, 12362 <hci_init+0x102>
	read_supported_commands_complete(rsp);
   12338:	9f01      	ldr	r7, [sp, #4]
   1233a:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   1233c:	1c53      	adds	r3, r2, #1
   1233e:	3241      	adds	r2, #65	; 0x41
   12340:	6818      	ldr	r0, [r3, #0]
   12342:	6859      	ldr	r1, [r3, #4]
   12344:	4634      	mov	r4, r6
   12346:	c403      	stmia	r4!, {r0, r1}
   12348:	3308      	adds	r3, #8
   1234a:	4293      	cmp	r3, r2
   1234c:	4626      	mov	r6, r4
   1234e:	d1f7      	bne.n	12340 <hci_init+0xe0>
	net_buf_unref(rsp);
   12350:	4638      	mov	r0, r7
   12352:	f003 fef9 	bl	16148 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   12356:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   1235a:	065e      	lsls	r6, r3, #25
   1235c:	d408      	bmi.n	12370 <hci_init+0x110>
		return -ENODEV;
   1235e:	f06f 0412 	mvn.w	r4, #18
}
   12362:	4620      	mov	r0, r4
   12364:	b003      	add	sp, #12
   12366:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12368:	200002a0 	.word	0x200002a0
   1236c:	20000310 	.word	0x20000310
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   12370:	aa01      	add	r2, sp, #4
   12372:	2100      	movs	r1, #0
   12374:	f242 0003 	movw	r0, #8195	; 0x2003
   12378:	f7ff ff10 	bl	1219c <bt_hci_cmd_send_sync>
	if (err) {
   1237c:	4604      	mov	r4, r0
   1237e:	2800      	cmp	r0, #0
   12380:	d1ef      	bne.n	12362 <hci_init+0x102>
	read_le_features_complete(rsp);
   12382:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   12384:	4e95      	ldr	r6, [pc, #596]	; (125dc <hci_init+0x37c>)
   12386:	6893      	ldr	r3, [r2, #8]
   12388:	f853 0f01 	ldr.w	r0, [r3, #1]!
   1238c:	6859      	ldr	r1, [r3, #4]
   1238e:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   12390:	4610      	mov	r0, r2
   12392:	f003 fed9 	bl	16148 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   12396:	4621      	mov	r1, r4
   12398:	aa01      	add	r2, sp, #4
   1239a:	f242 0002 	movw	r0, #8194	; 0x2002
   1239e:	f7ff fefd 	bl	1219c <bt_hci_cmd_send_sync>
		if (err) {
   123a2:	4604      	mov	r4, r0
   123a4:	2800      	cmp	r0, #0
   123a6:	d1dc      	bne.n	12362 <hci_init+0x102>
		le_read_buffer_size_complete(rsp);
   123a8:	9b01      	ldr	r3, [sp, #4]
   123aa:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   123ac:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   123b0:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   123b4:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   123b6:	b129      	cbz	r1, 123c4 <hci_init+0x164>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   123b8:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   123ba:	4611      	mov	r1, r2
   123bc:	f106 0028 	add.w	r0, r6, #40	; 0x28
   123c0:	f00c ffc9 	bl	1f356 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   123c4:	9801      	ldr	r0, [sp, #4]
   123c6:	f003 febf 	bl	16148 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   123ca:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   123ce:	f016 0620 	ands.w	r6, r6, #32
   123d2:	f000 80e7 	beq.w	125a4 <hci_init+0x344>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   123d6:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   123da:	071c      	lsls	r4, r3, #28
   123dc:	d511      	bpl.n	12402 <hci_init+0x1a2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   123de:	aa01      	add	r2, sp, #4
   123e0:	2100      	movs	r1, #0
   123e2:	f242 001c 	movw	r0, #8220	; 0x201c
   123e6:	f7ff fed9 	bl	1219c <bt_hci_cmd_send_sync>
		if (err) {
   123ea:	4604      	mov	r4, r0
   123ec:	2800      	cmp	r0, #0
   123ee:	d1b8      	bne.n	12362 <hci_init+0x102>
		le_read_supp_states_complete(rsp);
   123f0:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   123f2:	6883      	ldr	r3, [r0, #8]
   123f4:	f853 2f01 	ldr.w	r2, [r3, #1]!
   123f8:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   123fa:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   123fe:	f003 fea3 	bl	16148 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   12402:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   12406:	0698      	lsls	r0, r3, #26
   12408:	d523      	bpl.n	12452 <hci_init+0x1f2>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1240a:	f10d 0102 	add.w	r1, sp, #2
   1240e:	4668      	mov	r0, sp
   12410:	f00b f8a5 	bl	1d55e <hci_le_read_max_data_len>
		if (err) {
   12414:	4604      	mov	r4, r0
   12416:	2800      	cmp	r0, #0
   12418:	d1a3      	bne.n	12362 <hci_init+0x102>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1241a:	2104      	movs	r1, #4
   1241c:	f242 0024 	movw	r0, #8228	; 0x2024
   12420:	f7ff fe74 	bl	1210c <bt_hci_cmd_create>
		if (!buf) {
   12424:	4606      	mov	r6, r0
   12426:	2800      	cmp	r0, #0
   12428:	f000 80c3 	beq.w	125b2 <hci_init+0x352>
   1242c:	2104      	movs	r1, #4
   1242e:	3008      	adds	r0, #8
   12430:	f003 ffba 	bl	163a8 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   12434:	f8bd 3000 	ldrh.w	r3, [sp]
   12438:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1243a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1243e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   12440:	4622      	mov	r2, r4
   12442:	4631      	mov	r1, r6
   12444:	f242 0024 	movw	r0, #8228	; 0x2024
   12448:	f7ff fea8 	bl	1219c <bt_hci_cmd_send_sync>
		if (err) {
   1244c:	4604      	mov	r4, r0
   1244e:	2800      	cmp	r0, #0
   12450:	d187      	bne.n	12362 <hci_init+0x102>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   12452:	2108      	movs	r1, #8
   12454:	f242 0001 	movw	r0, #8193	; 0x2001
   12458:	f7ff fe58 	bl	1210c <bt_hci_cmd_create>
	if (!buf) {
   1245c:	4604      	mov	r4, r0
   1245e:	2800      	cmp	r0, #0
   12460:	f000 80a7 	beq.w	125b2 <hci_init+0x352>
   12464:	2108      	movs	r1, #8
   12466:	4408      	add	r0, r1
   12468:	f003 ff9e 	bl	163a8 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1246c:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   12470:	f012 0f02 	tst.w	r2, #2
   12474:	bf14      	ite	ne
   12476:	232f      	movne	r3, #47	; 0x2f
   12478:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1247a:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1247c:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   12480:	bf48      	it	mi
   12482:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   12486:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1248a:	bf18      	it	ne
   1248c:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   12490:	2200      	movs	r2, #0
   12492:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   12494:	f3c3 2307 	ubfx	r3, r3, #8, #8
   12498:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1249a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1249c:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   1249e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   124a0:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   124a2:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   124a4:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   124a6:	4621      	mov	r1, r4
   124a8:	f242 0001 	movw	r0, #8193	; 0x2001
   124ac:	f7ff fe76 	bl	1219c <bt_hci_cmd_send_sync>
	if (err) {
   124b0:	4604      	mov	r4, r0
   124b2:	2800      	cmp	r0, #0
   124b4:	f47f af55 	bne.w	12362 <hci_init+0x102>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   124b8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   124bc:	069a      	lsls	r2, r3, #26
   124be:	d41e      	bmi.n	124fe <hci_init+0x29e>
	if (bt_dev.le.acl_mtu) {
   124c0:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   124c4:	b9d9      	cbnz	r1, 124fe <hci_init+0x29e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   124c6:	aa01      	add	r2, sp, #4
   124c8:	f241 0005 	movw	r0, #4101	; 0x1005
   124cc:	f7ff fe66 	bl	1219c <bt_hci_cmd_send_sync>
	if (err) {
   124d0:	4604      	mov	r4, r0
   124d2:	2800      	cmp	r0, #0
   124d4:	f47f af45 	bne.w	12362 <hci_init+0x102>
	if (bt_dev.le.acl_mtu) {
   124d8:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   124dc:	b963      	cbnz	r3, 124f8 <hci_init+0x298>
	read_buffer_size_complete(rsp);
   124de:	9b01      	ldr	r3, [sp, #4]
   124e0:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   124e2:	785a      	ldrb	r2, [r3, #1]
   124e4:	7899      	ldrb	r1, [r3, #2]
   124e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   124ea:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   124ee:	889a      	ldrh	r2, [r3, #4]
   124f0:	483b      	ldr	r0, [pc, #236]	; (125e0 <hci_init+0x380>)
   124f2:	4611      	mov	r1, r2
   124f4:	f00c ff2f 	bl	1f356 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   124f8:	9801      	ldr	r0, [sp, #4]
   124fa:	f003 fe25 	bl	16148 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   124fe:	2108      	movs	r1, #8
   12500:	f640 4001 	movw	r0, #3073	; 0xc01
   12504:	f7ff fe02 	bl	1210c <bt_hci_cmd_create>
	if (!buf) {
   12508:	4604      	mov	r4, r0
   1250a:	2800      	cmp	r0, #0
   1250c:	d051      	beq.n	125b2 <hci_init+0x352>
   1250e:	2108      	movs	r1, #8
   12510:	4408      	add	r0, r1
   12512:	f003 ff49 	bl	163a8 <net_buf_simple_add>
	dst[0] = val;
   12516:	2310      	movs	r3, #16
   12518:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1251a:	2388      	movs	r3, #136	; 0x88
   1251c:	7043      	strb	r3, [r0, #1]
   1251e:	2302      	movs	r3, #2
	dst[0] = val;
   12520:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   12522:	70c3      	strb	r3, [r0, #3]
   12524:	2320      	movs	r3, #32
	dst[0] = val;
   12526:	7082      	strb	r2, [r0, #2]
   12528:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1252a:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1252c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1252e:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   12530:	4621      	mov	r1, r4
   12532:	f640 4001 	movw	r0, #3073	; 0xc01
   12536:	f7ff fe31 	bl	1219c <bt_hci_cmd_send_sync>
	if (err) {
   1253a:	4604      	mov	r4, r0
   1253c:	2800      	cmp	r0, #0
   1253e:	f47f af10 	bne.w	12362 <hci_init+0x102>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   12542:	4601      	mov	r1, r0
   12544:	aa01      	add	r2, sp, #4
   12546:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1254a:	f7ff fe27 	bl	1219c <bt_hci_cmd_send_sync>
	if (err) {
   1254e:	4604      	mov	r4, r0
   12550:	bb20      	cbnz	r0, 1259c <hci_init+0x33c>
	net_buf_unref(rsp);
   12552:	9801      	ldr	r0, [sp, #4]
   12554:	f003 fdf8 	bl	16148 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   12558:	4621      	mov	r1, r4
   1255a:	aa01      	add	r2, sp, #4
   1255c:	f64f 4002 	movw	r0, #64514	; 0xfc02
   12560:	f7ff fe1c 	bl	1219c <bt_hci_cmd_send_sync>
	if (err) {
   12564:	4604      	mov	r4, r0
   12566:	b9c8      	cbnz	r0, 1259c <hci_init+0x33c>
	rp.cmds = (void *)rsp->data;
   12568:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   1256a:	6883      	ldr	r3, [r0, #8]
   1256c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   12570:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
   12574:	f003 fde8 	bl	16148 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   12578:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   1257c:	075b      	lsls	r3, r3, #29
   1257e:	d50d      	bpl.n	1259c <hci_init+0x33c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   12580:	aa01      	add	r2, sp, #4
   12582:	4621      	mov	r1, r4
   12584:	f64f 4003 	movw	r0, #64515	; 0xfc03
   12588:	f7ff fe08 	bl	1219c <bt_hci_cmd_send_sync>
		if (err) {
   1258c:	b930      	cbnz	r0, 1259c <hci_init+0x33c>
		rp.feat = (void *)rsp->data;
   1258e:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   12590:	6883      	ldr	r3, [r0, #8]
   12592:	785b      	ldrb	r3, [r3, #1]
   12594:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
   12598:	f003 fdd6 	bl	16148 <net_buf_unref>
	err = bt_id_init();
   1259c:	f000 fd50 	bl	13040 <bt_id_init>
   125a0:	4604      	mov	r4, r0
	if (err) {
   125a2:	e6de      	b.n	12362 <hci_init+0x102>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   125a4:	2102      	movs	r1, #2
   125a6:	f640 406d 	movw	r0, #3181	; 0xc6d
   125aa:	f7ff fdaf 	bl	1210c <bt_hci_cmd_create>
		if (!buf) {
   125ae:	4604      	mov	r4, r0
   125b0:	b910      	cbnz	r0, 125b8 <hci_init+0x358>
		return -ENOBUFS;
   125b2:	f06f 0468 	mvn.w	r4, #104	; 0x68
   125b6:	e6d4      	b.n	12362 <hci_init+0x102>
   125b8:	2102      	movs	r1, #2
   125ba:	3008      	adds	r0, #8
   125bc:	f003 fef4 	bl	163a8 <net_buf_simple_add>
		cp_le->le = 0x01;
   125c0:	2301      	movs	r3, #1
   125c2:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   125c4:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   125c6:	4621      	mov	r1, r4
   125c8:	4632      	mov	r2, r6
   125ca:	f640 406d 	movw	r0, #3181	; 0xc6d
   125ce:	f7ff fde5 	bl	1219c <bt_hci_cmd_send_sync>
		if (err) {
   125d2:	4604      	mov	r4, r0
   125d4:	2800      	cmp	r0, #0
   125d6:	f43f aefe 	beq.w	123d6 <hci_init+0x176>
   125da:	e6c2      	b.n	12362 <hci_init+0x102>
   125dc:	20000370 	.word	0x20000370
   125e0:	200003a0 	.word	0x200003a0

000125e4 <bt_le_create_conn_legacy>:
{
   125e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   125e6:	b085      	sub	sp, #20
   125e8:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   125ea:	f10d 0103 	add.w	r1, sp, #3
   125ee:	2000      	movs	r0, #0
   125f0:	f000 fd06 	bl	13000 <bt_id_set_create_conn_own_addr>
	if (err) {
   125f4:	4604      	mov	r4, r0
   125f6:	2800      	cmp	r0, #0
   125f8:	d145      	bne.n	12686 <bt_le_create_conn_legacy+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   125fa:	2119      	movs	r1, #25
   125fc:	f242 000d 	movw	r0, #8205	; 0x200d
   12600:	f7ff fd84 	bl	1210c <bt_hci_cmd_create>
	if (!buf) {
   12604:	4607      	mov	r7, r0
   12606:	2800      	cmp	r0, #0
   12608:	d040      	beq.n	1268c <bt_le_create_conn_legacy+0xa8>
   1260a:	2119      	movs	r1, #25
   1260c:	3008      	adds	r0, #8
   1260e:	f003 fecb 	bl	163a8 <net_buf_simple_add>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   12612:	2219      	movs	r2, #25
   12614:	4605      	mov	r5, r0
   12616:	4621      	mov	r1, r4
   12618:	f00c ffd9 	bl	1f5ce <memset>
	cp->own_addr_type = own_addr_type;
   1261c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12620:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   12622:	f106 0190 	add.w	r1, r6, #144	; 0x90
   12626:	1d68      	adds	r0, r5, #5
   12628:	f00a fec6 	bl	1d3b8 <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   1262c:	4b19      	ldr	r3, [pc, #100]	; (12694 <bt_le_create_conn_legacy+0xb0>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   1262e:	712c      	strb	r4, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   12630:	899a      	ldrh	r2, [r3, #12]
   12632:	802a      	strh	r2, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   12634:	89da      	ldrh	r2, [r3, #14]
   12636:	806a      	strh	r2, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   12638:	f8b6 20a8 	ldrh.w	r2, [r6, #168]	; 0xa8
   1263c:	f8a5 200d 	strh.w	r2, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   12640:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
   12644:	f8a5 200f 	strh.w	r2, [r5, #15]
	state->target = target;
   12648:	33cc      	adds	r3, #204	; 0xcc
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   1264a:	f8b6 20ac 	ldrh.w	r2, [r6, #172]	; 0xac
   1264e:	f8a5 2011 	strh.w	r2, [r5, #17]
	state->target = target;
   12652:	9301      	str	r3, [sp, #4]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   12654:	f8b6 20ae 	ldrh.w	r2, [r6, #174]	; 0xae
   12658:	f8a5 2013 	strh.w	r2, [r5, #19]
	state->bit = bit;
   1265c:	230b      	movs	r3, #11
   1265e:	9302      	str	r3, [sp, #8]
	cmd(buf)->state = state;
   12660:	4638      	mov	r0, r7
	state->val = val;
   12662:	2301      	movs	r3, #1
   12664:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = state;
   12668:	f003 fbd6 	bl	15e18 <net_buf_id>
   1266c:	4b0a      	ldr	r3, [pc, #40]	; (12698 <bt_le_create_conn_legacy+0xb4>)
   1266e:	220c      	movs	r2, #12
   12670:	fb02 3300 	mla	r3, r2, r0, r3
   12674:	aa01      	add	r2, sp, #4
   12676:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   12678:	4639      	mov	r1, r7
   1267a:	4622      	mov	r2, r4
   1267c:	f242 000d 	movw	r0, #8205	; 0x200d
   12680:	f7ff fd8c 	bl	1219c <bt_hci_cmd_send_sync>
   12684:	4604      	mov	r4, r0
}
   12686:	4620      	mov	r0, r4
   12688:	b005      	add	sp, #20
   1268a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1268c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   12690:	e7f9      	b.n	12686 <bt_le_create_conn_legacy+0xa2>
   12692:	bf00      	nop
   12694:	200002a0 	.word	0x200002a0
   12698:	20001c08 	.word	0x20001c08

0001269c <bt_le_create_conn_cancel>:
{
   1269c:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   1269e:	2100      	movs	r1, #0
{
   126a0:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   126a2:	f242 000e 	movw	r0, #8206	; 0x200e
   126a6:	f7ff fd31 	bl	1210c <bt_hci_cmd_create>
	state->target = target;
   126aa:	4b0c      	ldr	r3, [pc, #48]	; (126dc <bt_le_create_conn_cancel+0x40>)
   126ac:	9301      	str	r3, [sp, #4]
	state->val = val;
   126ae:	2500      	movs	r5, #0
	state->bit = bit;
   126b0:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   126b2:	4604      	mov	r4, r0
	state->bit = bit;
   126b4:	9302      	str	r3, [sp, #8]
	state->val = val;
   126b6:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = state;
   126ba:	f003 fbad 	bl	15e18 <net_buf_id>
   126be:	4b08      	ldr	r3, [pc, #32]	; (126e0 <bt_le_create_conn_cancel+0x44>)
   126c0:	220c      	movs	r2, #12
   126c2:	fb02 3000 	mla	r0, r2, r0, r3
   126c6:	ab01      	add	r3, sp, #4
   126c8:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   126ca:	462a      	mov	r2, r5
   126cc:	4621      	mov	r1, r4
   126ce:	f242 000e 	movw	r0, #8206	; 0x200e
   126d2:	f7ff fd63 	bl	1219c <bt_hci_cmd_send_sync>
}
   126d6:	b005      	add	sp, #20
   126d8:	bd30      	pop	{r4, r5, pc}
   126da:	bf00      	nop
   126dc:	2000036c 	.word	0x2000036c
   126e0:	20001c08 	.word	0x20001c08

000126e4 <bt_send>:
	return bt_dev.drv->send(buf);
   126e4:	4b02      	ldr	r3, [pc, #8]	; (126f0 <bt_send+0xc>)
   126e6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   126ea:	691b      	ldr	r3, [r3, #16]
   126ec:	4718      	bx	r3
   126ee:	bf00      	nop
   126f0:	200002a0 	.word	0x200002a0

000126f4 <bt_hci_cmd_send>:
{
   126f4:	b538      	push	{r3, r4, r5, lr}
   126f6:	4605      	mov	r5, r0
	if (!buf) {
   126f8:	460c      	mov	r4, r1
   126fa:	b919      	cbnz	r1, 12704 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   126fc:	f7ff fd06 	bl	1210c <bt_hci_cmd_create>
		if (!buf) {
   12700:	4604      	mov	r4, r0
   12702:	b198      	cbz	r0, 1272c <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   12704:	f640 4335 	movw	r3, #3125	; 0xc35
   12708:	429d      	cmp	r5, r3
   1270a:	d109      	bne.n	12720 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
   1270c:	4620      	mov	r0, r4
   1270e:	f7ff ffe9 	bl	126e4 <bt_send>
		if (err) {
   12712:	4605      	mov	r5, r0
   12714:	b110      	cbz	r0, 1271c <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   12716:	4620      	mov	r0, r4
   12718:	f003 fd16 	bl	16148 <net_buf_unref>
}
   1271c:	4628      	mov	r0, r5
   1271e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   12720:	4804      	ldr	r0, [pc, #16]	; (12734 <bt_hci_cmd_send+0x40>)
   12722:	4621      	mov	r1, r4
   12724:	f003 fcdc 	bl	160e0 <net_buf_put>
	return 0;
   12728:	2500      	movs	r5, #0
   1272a:	e7f7      	b.n	1271c <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   1272c:	f06f 0568 	mvn.w	r5, #104	; 0x68
   12730:	e7f4      	b.n	1271c <bt_hci_cmd_send+0x28>
   12732:	bf00      	nop
   12734:	200003f0 	.word	0x200003f0

00012738 <conn_auto_initiate>:
{
   12738:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1273a:	7a83      	ldrb	r3, [r0, #10]
   1273c:	2b07      	cmp	r3, #7
{
   1273e:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   12740:	d121      	bne.n	12786 <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12742:	f3bf 8f5b 	dmb	ish
   12746:	6843      	ldr	r3, [r0, #4]
   12748:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1274c:	049b      	lsls	r3, r3, #18
   1274e:	f100 0604 	add.w	r6, r0, #4
   12752:	d41a      	bmi.n	1278a <conn_auto_initiate+0x52>
   12754:	78c3      	ldrb	r3, [r0, #3]
   12756:	b123      	cbz	r3, 12762 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   12758:	4b29      	ldr	r3, [pc, #164]	; (12800 <conn_auto_initiate+0xc8>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1275a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1275e:	071d      	lsls	r5, r3, #28
   12760:	d513      	bpl.n	1278a <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   12762:	2102      	movs	r1, #2
   12764:	f242 0016 	movw	r0, #8214	; 0x2016
   12768:	f7ff fcd0 	bl	1210c <bt_hci_cmd_create>
	if (!buf) {
   1276c:	4605      	mov	r5, r0
   1276e:	b160      	cbz	r0, 1278a <conn_auto_initiate+0x52>
   12770:	2102      	movs	r1, #2
   12772:	3008      	adds	r0, #8
   12774:	f003 fe18 	bl	163a8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   12778:	8823      	ldrh	r3, [r4, #0]
   1277a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   1277c:	4629      	mov	r1, r5
   1277e:	f242 0016 	movw	r0, #8214	; 0x2016
   12782:	f7ff ffb7 	bl	126f4 <bt_hci_cmd_send>
}
   12786:	b004      	add	sp, #16
   12788:	bd70      	pop	{r4, r5, r6, pc}
   1278a:	f3bf 8f5b 	dmb	ish
   1278e:	6863      	ldr	r3, [r4, #4]
   12790:	4d1b      	ldr	r5, [pc, #108]	; (12800 <conn_auto_initiate+0xc8>)
   12792:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   12796:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1279a:	f3c3 3100 	ubfx	r1, r3, #12, #1
   1279e:	d117      	bne.n	127d0 <conn_auto_initiate+0x98>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   127a0:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   127a4:	07d8      	lsls	r0, r3, #31
   127a6:	d513      	bpl.n	127d0 <conn_auto_initiate+0x98>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   127a8:	2302      	movs	r3, #2
   127aa:	9100      	str	r1, [sp, #0]
   127ac:	461a      	mov	r2, r3
   127ae:	4620      	mov	r0, r4
   127b0:	f00a ff47 	bl	1d642 <bt_le_set_phy>
		if (!err) {
   127b4:	b960      	cbnz	r0, 127d0 <conn_auto_initiate+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   127b6:	f3bf 8f5b 	dmb	ish
   127ba:	e856 3f00 	ldrex	r3, [r6]
   127be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   127c2:	e846 3200 	strex	r2, r3, [r6]
   127c6:	2a00      	cmp	r2, #0
   127c8:	d1f7      	bne.n	127ba <conn_auto_initiate+0x82>
   127ca:	f3bf 8f5b 	dmb	ish
			return;
   127ce:	e7da      	b.n	12786 <conn_auto_initiate+0x4e>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   127d0:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   127d4:	069a      	lsls	r2, r3, #26
   127d6:	d5d6      	bpl.n	12786 <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   127d8:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   127dc:	689b      	ldr	r3, [r3, #8]
   127de:	079b      	lsls	r3, r3, #30
   127e0:	d5d1      	bpl.n	12786 <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   127e2:	f10d 010e 	add.w	r1, sp, #14
   127e6:	a803      	add	r0, sp, #12
   127e8:	f00a feb9 	bl	1d55e <hci_le_read_max_data_len>
			if (!err) {
   127ec:	2800      	cmp	r0, #0
   127ee:	d1ca      	bne.n	12786 <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   127f0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   127f4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   127f8:	4620      	mov	r0, r4
   127fa:	f00a ff05 	bl	1d608 <bt_le_set_data_len>
		}
   127fe:	e7c2      	b.n	12786 <conn_auto_initiate+0x4e>
   12800:	200002a0 	.word	0x200002a0

00012804 <bt_hci_le_enh_conn_complete>:
{
   12804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12808:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   1280c:	4a5e      	ldr	r2, [pc, #376]	; (12988 <bt_hci_le_enh_conn_complete+0x184>)
	if (evt->status) {
   1280e:	7806      	ldrb	r6, [r0, #0]
		if (disconnected_handles[i] == handle) {
   12810:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   12812:	ea6f 5308 	mvn.w	r3, r8, lsl #20
   12816:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   1281a:	b29b      	uxth	r3, r3
   1281c:	4299      	cmp	r1, r3
   1281e:	f04f 0700 	mov.w	r7, #0
			disconnected_handles[i] = 0;
   12822:	bf08      	it	eq
   12824:	8017      	strheq	r7, [r2, #0]
{
   12826:	b085      	sub	sp, #20
   12828:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1282a:	fa1f f988 	uxth.w	r9, r8
			return true;
   1282e:	bf08      	it	eq
   12830:	2701      	moveq	r7, #1
	if (evt->status) {
   12832:	b306      	cbz	r6, 12876 <bt_hci_le_enh_conn_complete+0x72>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12834:	2e02      	cmp	r6, #2
   12836:	d11b      	bne.n	12870 <bt_hci_le_enh_conn_complete+0x6c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   12838:	2100      	movs	r1, #0
   1283a:	2206      	movs	r2, #6
   1283c:	4608      	mov	r0, r1
   1283e:	f001 faa3 	bl	13d88 <bt_conn_lookup_state_le>
	if (!conn) {
   12842:	4604      	mov	r4, r0
   12844:	b188      	cbz	r0, 1286a <bt_hci_le_enh_conn_complete+0x66>
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   12846:	7246      	strb	r6, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12848:	2100      	movs	r1, #0
   1284a:	f001 f88b 	bl	13964 <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1284e:	f3bf 8f5b 	dmb	ish
   12852:	6863      	ldr	r3, [r4, #4]
   12854:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   12858:	07db      	lsls	r3, r3, #31
   1285a:	d503      	bpl.n	12864 <bt_hci_le_enh_conn_complete+0x60>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1285c:	4631      	mov	r1, r6
   1285e:	4620      	mov	r0, r4
   12860:	f001 f880 	bl	13964 <bt_conn_set_state>
	bt_conn_unref(conn);
   12864:	4620      	mov	r0, r4
   12866:	f001 f847 	bl	138f8 <bt_conn_unref>
			bt_le_scan_update(false);
   1286a:	2000      	movs	r0, #0
   1286c:	f000 fc8e 	bl	1318c <bt_le_scan_update>
}
   12870:	b005      	add	sp, #20
   12872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12876:	7903      	ldrb	r3, [r0, #4]
   12878:	3b02      	subs	r3, #2
   1287a:	2b01      	cmp	r3, #1
   1287c:	f100 0404 	add.w	r4, r0, #4
   12880:	d82d      	bhi.n	128de <bt_hci_le_enh_conn_complete+0xda>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12882:	4621      	mov	r1, r4
   12884:	a802      	add	r0, sp, #8
   12886:	f00a fd97 	bl	1d3b8 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1288a:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   1288e:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12892:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12894:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12898:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   1289c:	f00a fd93 	bl	1d3c6 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   128a0:	2301      	movs	r3, #1
   128a2:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   128a6:	78e8      	ldrb	r0, [r5, #3]
   128a8:	b9a0      	cbnz	r0, 128d4 <bt_hci_le_enh_conn_complete+0xd0>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   128aa:	2206      	movs	r2, #6
   128ac:	a902      	add	r1, sp, #8
   128ae:	f001 fa6b 	bl	13d88 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   128b2:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   128b4:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   128b6:	b963      	cbnz	r3, 128d2 <bt_hci_le_enh_conn_complete+0xce>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   128b8:	f3bf 8f5b 	dmb	ish
   128bc:	4b33      	ldr	r3, [pc, #204]	; (1298c <bt_hci_le_enh_conn_complete+0x188>)
   128be:	e853 2f00 	ldrex	r2, [r3]
   128c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   128c6:	e843 2100 	strex	r1, r2, [r3]
   128ca:	2900      	cmp	r1, #0
   128cc:	d1f7      	bne.n	128be <bt_hci_le_enh_conn_complete+0xba>
   128ce:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   128d2:	b9bc      	cbnz	r4, 12904 <bt_hci_le_enh_conn_complete+0x100>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   128d4:	211f      	movs	r1, #31
   128d6:	4648      	mov	r0, r9
   128d8:	f00a fe5b 	bl	1d592 <bt_hci_disconnect>
		return;
   128dc:	e7c8      	b.n	12870 <bt_hci_le_enh_conn_complete+0x6c>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   128de:	78c3      	ldrb	r3, [r0, #3]
   128e0:	2b01      	cmp	r3, #1
   128e2:	bf04      	itt	eq
   128e4:	4b2a      	ldreq	r3, [pc, #168]	; (12990 <bt_hci_le_enh_conn_complete+0x18c>)
   128e6:	f893 6067 	ldrbeq.w	r6, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   128ea:	4621      	mov	r1, r4
   128ec:	4630      	mov	r0, r6
   128ee:	f00a ffff 	bl	1d8f0 <bt_lookup_id_addr>
   128f2:	4601      	mov	r1, r0
   128f4:	a802      	add	r0, sp, #8
   128f6:	f00a fd5f 	bl	1d3b8 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   128fa:	4621      	mov	r1, r4
   128fc:	4668      	mov	r0, sp
   128fe:	f00a fd5b 	bl	1d3b8 <bt_addr_le_copy>
   12902:	e7d0      	b.n	128a6 <bt_hci_le_enh_conn_complete+0xa2>
	conn->handle = handle;
   12904:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   12906:	a902      	add	r1, sp, #8
	conn->handle = handle;
   12908:	f820 8b90 	strh.w	r8, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1290c:	f00a fd54 	bl	1d3b8 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   12910:	7e2a      	ldrb	r2, [r5, #24]
   12912:	7deb      	ldrb	r3, [r5, #23]
   12914:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12918:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1291c:	7eaa      	ldrb	r2, [r5, #26]
   1291e:	7e6b      	ldrb	r3, [r5, #25]
   12920:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12924:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12928:	7f2a      	ldrb	r2, [r5, #28]
   1292a:	7eeb      	ldrb	r3, [r5, #27]
   1292c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12930:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   12934:	78eb      	ldrb	r3, [r5, #3]
   12936:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   12938:	2200      	movs	r2, #0
   1293a:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1293c:	b96b      	cbnz	r3, 1295a <bt_hci_le_enh_conn_complete+0x156>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   1293e:	4669      	mov	r1, sp
   12940:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   12944:	f00a fd38 	bl	1d3b8 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   12948:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   1294a:	4b11      	ldr	r3, [pc, #68]	; (12990 <bt_hci_le_enh_conn_complete+0x18c>)
					&bt_dev.id_addr[conn->id]);
   1294c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   12950:	4419      	add	r1, r3
   12952:	f104 0097 	add.w	r0, r4, #151	; 0x97
   12956:	f00a fd2f 	bl	1d3b8 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1295a:	2107      	movs	r1, #7
   1295c:	4620      	mov	r0, r4
   1295e:	f001 f801 	bl	13964 <bt_conn_set_state>
	if (is_disconnected) {
   12962:	b11f      	cbz	r7, 1296c <bt_hci_le_enh_conn_complete+0x168>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12964:	2101      	movs	r1, #1
   12966:	4620      	mov	r0, r4
   12968:	f000 fffc 	bl	13964 <bt_conn_set_state>
	bt_conn_connected(conn);
   1296c:	4620      	mov	r0, r4
   1296e:	f00b f8b4 	bl	1dada <bt_conn_connected>
	conn_auto_initiate(conn);
   12972:	4620      	mov	r0, r4
   12974:	f7ff fee0 	bl	12738 <conn_auto_initiate>
	bt_conn_unref(conn);
   12978:	4620      	mov	r0, r4
   1297a:	f000 ffbd 	bl	138f8 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1297e:	78e3      	ldrb	r3, [r4, #3]
   12980:	2b00      	cmp	r3, #0
   12982:	f47f af75 	bne.w	12870 <bt_hci_le_enh_conn_complete+0x6c>
   12986:	e770      	b.n	1286a <bt_hci_le_enh_conn_complete+0x66>
   12988:	20001f0c 	.word	0x20001f0c
   1298c:	2000036c 	.word	0x2000036c
   12990:	200002a0 	.word	0x200002a0

00012994 <hci_tx_thread>:
{
   12994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   12998:	f8df 810c 	ldr.w	r8, [pc, #268]	; 12aa8 <hci_tx_thread+0x114>
		BT_ASSERT(err == 0);
   1299c:	f8df a120 	ldr.w	sl, [pc, #288]	; 12ac0 <hci_tx_thread+0x12c>
		events[0].state = K_POLL_STATE_NOT_READY;
   129a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   129a4:	483f      	ldr	r0, [pc, #252]	; (12aa4 <hci_tx_thread+0x110>)
		events[0].state = K_POLL_STATE_NOT_READY;
   129a6:	f36f 3352 	bfc	r3, #13, #6
   129aa:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   129ae:	f000 ff65 	bl	1387c <bt_conn_prepare_events>
   129b2:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   129b4:	483c      	ldr	r0, [pc, #240]	; (12aa8 <hci_tx_thread+0x114>)
   129b6:	f04f 32ff 	mov.w	r2, #4294967295
   129ba:	f04f 33ff 	mov.w	r3, #4294967295
   129be:	4629      	mov	r1, r5
   129c0:	f009 fe14 	bl	1c5ec <z_impl_k_poll>
		BT_ASSERT(err == 0);
   129c4:	b160      	cbz	r0, 129e0 <hci_tx_thread+0x4c>
   129c6:	4939      	ldr	r1, [pc, #228]	; (12aac <hci_tx_thread+0x118>)
   129c8:	4839      	ldr	r0, [pc, #228]	; (12ab0 <hci_tx_thread+0x11c>)
   129ca:	f640 1389 	movw	r3, #2441	; 0x989
   129ce:	4652      	mov	r2, sl
   129d0:	f009 ffe7 	bl	1c9a2 <printk>
   129d4:	4040      	eors	r0, r0
   129d6:	f380 8811 	msr	BASEPRI, r0
   129da:	f04f 0003 	mov.w	r0, #3
   129de:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   129e0:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 12ac4 <hci_tx_thread+0x130>
{
   129e4:	4e30      	ldr	r6, [pc, #192]	; (12aa8 <hci_tx_thread+0x114>)
	return z_impl_k_sem_take(sem, timeout);
   129e6:	f5a9 77a8 	sub.w	r7, r9, #336	; 0x150
   129ea:	f1a9 0b38 	sub.w	fp, r9, #56	; 0x38
	for (; count; ev++, count--) {
   129ee:	b915      	cbnz	r5, 129f6 <hci_tx_thread+0x62>
	z_impl_k_yield();
   129f0:	f008 fd4a 	bl	1b488 <z_impl_k_yield>
	while (1) {
   129f4:	e7d4      	b.n	129a0 <hci_tx_thread+0xc>
		switch (ev->state) {
   129f6:	68f3      	ldr	r3, [r6, #12]
   129f8:	f3c3 3345 	ubfx	r3, r3, #13, #6
   129fc:	2b04      	cmp	r3, #4
   129fe:	d147      	bne.n	12a90 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   12a00:	7b33      	ldrb	r3, [r6, #12]
   12a02:	2b00      	cmp	r3, #0
   12a04:	d147      	bne.n	12a96 <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   12a06:	2200      	movs	r2, #0
   12a08:	2300      	movs	r3, #0
   12a0a:	4648      	mov	r0, r9
   12a0c:	f003 fb0a 	bl	16024 <net_buf_get>
	BT_ASSERT(buf);
   12a10:	4604      	mov	r4, r0
   12a12:	b960      	cbnz	r0, 12a2e <hci_tx_thread+0x9a>
   12a14:	4927      	ldr	r1, [pc, #156]	; (12ab4 <hci_tx_thread+0x120>)
   12a16:	4826      	ldr	r0, [pc, #152]	; (12ab0 <hci_tx_thread+0x11c>)
   12a18:	f44f 6312 	mov.w	r3, #2336	; 0x920
   12a1c:	4652      	mov	r2, sl
   12a1e:	f009 ffc0 	bl	1c9a2 <printk>
   12a22:	4040      	eors	r0, r0
   12a24:	f380 8811 	msr	BASEPRI, r0
   12a28:	f04f 0003 	mov.w	r0, #3
   12a2c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   12a2e:	f04f 32ff 	mov.w	r2, #4294967295
   12a32:	f04f 33ff 	mov.w	r3, #4294967295
   12a36:	4658      	mov	r0, fp
   12a38:	f007 f894 	bl	19b64 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   12a3c:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   12a40:	b120      	cbz	r0, 12a4c <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   12a42:	f003 fb81 	bl	16148 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12a46:	2300      	movs	r3, #0
   12a48:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   12a4c:	4620      	mov	r0, r4
   12a4e:	f003 fbc1 	bl	161d4 <net_buf_ref>
   12a52:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
   12a56:	4620      	mov	r0, r4
   12a58:	f7ff fe44 	bl	126e4 <bt_send>
	if (err) {
   12a5c:	b1c0      	cbz	r0, 12a90 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
   12a5e:	4816      	ldr	r0, [pc, #88]	; (12ab8 <hci_tx_thread+0x124>)
   12a60:	f007 f83c 	bl	19adc <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   12a64:	4620      	mov	r0, r4
   12a66:	f003 f9d7 	bl	15e18 <net_buf_id>
   12a6a:	4b14      	ldr	r3, [pc, #80]	; (12abc <hci_tx_thread+0x128>)
   12a6c:	220c      	movs	r2, #12
   12a6e:	fb02 3000 	mla	r0, r2, r0, r3
   12a72:	211f      	movs	r1, #31
   12a74:	8840      	ldrh	r0, [r0, #2]
   12a76:	4622      	mov	r2, r4
   12a78:	f7ff fa9a 	bl	11fb0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   12a7c:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   12a80:	f003 fb62 	bl	16148 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12a84:	2300      	movs	r3, #0
		net_buf_unref(buf);
   12a86:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   12a88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
   12a8c:	f003 fb5c 	bl	16148 <net_buf_unref>
	for (; count; ev++, count--) {
   12a90:	3614      	adds	r6, #20
   12a92:	3d01      	subs	r5, #1
   12a94:	e7ab      	b.n	129ee <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   12a96:	2b01      	cmp	r3, #1
   12a98:	d1fa      	bne.n	12a90 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
   12a9a:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   12a9c:	3838      	subs	r0, #56	; 0x38
   12a9e:	f001 fb0d 	bl	140bc <bt_conn_process_tx>
   12aa2:	e7f5      	b.n	12a90 <hci_tx_thread+0xfc>
   12aa4:	20000444 	.word	0x20000444
   12aa8:	20000430 	.word	0x20000430
   12aac:	000208c7 	.word	0x000208c7
   12ab0:	0001feb5 	.word	0x0001feb5
   12ab4:	000208c3 	.word	0x000208c3
   12ab8:	200003b8 	.word	0x200003b8
   12abc:	20001c08 	.word	0x20001c08
   12ac0:	00020848 	.word	0x00020848
   12ac4:	200003f0 	.word	0x200003f0

00012ac8 <hci_event_prio>:
{
   12ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12acc:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   12ace:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   12ad2:	4630      	mov	r0, r6
   12ad4:	f00c fa7f 	bl	1efd6 <net_buf_simple_headroom>
	state->len = buf->len;
   12ad8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12adc:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   12ae0:	4605      	mov	r5, r0
   12ae2:	d80c      	bhi.n	12afe <hci_event_prio+0x36>
   12ae4:	4a1c      	ldr	r2, [pc, #112]	; (12b58 <hci_event_prio+0x90>)
   12ae6:	491d      	ldr	r1, [pc, #116]	; (12b5c <hci_event_prio+0x94>)
   12ae8:	481d      	ldr	r0, [pc, #116]	; (12b60 <hci_event_prio+0x98>)
   12aea:	f640 5315 	movw	r3, #3349	; 0xd15
   12aee:	f009 ff58 	bl	1c9a2 <printk>
   12af2:	4040      	eors	r0, r0
   12af4:	f380 8811 	msr	BASEPRI, r0
   12af8:	f04f 0003 	mov.w	r0, #3
   12afc:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   12afe:	2102      	movs	r1, #2
   12b00:	4630      	mov	r0, r6
   12b02:	f003 fc2f 	bl	16364 <net_buf_simple_pull_mem>
   12b06:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12b08:	7800      	ldrb	r0, [r0, #0]
   12b0a:	f00a fc1f 	bl	1d34c <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   12b0e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12b10:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   12b12:	d40c      	bmi.n	12b2e <hci_event_prio+0x66>
   12b14:	4a10      	ldr	r2, [pc, #64]	; (12b58 <hci_event_prio+0x90>)
   12b16:	4913      	ldr	r1, [pc, #76]	; (12b64 <hci_event_prio+0x9c>)
   12b18:	4811      	ldr	r0, [pc, #68]	; (12b60 <hci_event_prio+0x98>)
   12b1a:	f640 5319 	movw	r3, #3353	; 0xd19
   12b1e:	f009 ff40 	bl	1c9a2 <printk>
   12b22:	4040      	eors	r0, r0
   12b24:	f380 8811 	msr	BASEPRI, r0
   12b28:	f04f 0003 	mov.w	r0, #3
   12b2c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   12b2e:	2305      	movs	r3, #5
   12b30:	4a0d      	ldr	r2, [pc, #52]	; (12b68 <hci_event_prio+0xa0>)
   12b32:	7838      	ldrb	r0, [r7, #0]
   12b34:	4621      	mov	r1, r4
   12b36:	f00a fc1b 	bl	1d370 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   12b3a:	07b3      	lsls	r3, r6, #30
   12b3c:	d507      	bpl.n	12b4e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   12b3e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   12b40:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   12b44:	fa10 f585 	uxtah	r5, r0, r5
   12b48:	60a5      	str	r5, [r4, #8]
}
   12b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   12b4e:	4620      	mov	r0, r4
}
   12b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   12b54:	f003 baf8 	b.w	16148 <net_buf_unref>
   12b58:	00020848 	.word	0x00020848
   12b5c:	0002087c 	.word	0x0002087c
   12b60:	0001feb5 	.word	0x0001feb5
   12b64:	000208f0 	.word	0x000208f0
   12b68:	0001fa14 	.word	0x0001fa14

00012b6c <bt_recv>:
{
   12b6c:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12b6e:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   12b70:	2b01      	cmp	r3, #1
{
   12b72:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   12b74:	d007      	beq.n	12b86 <bt_recv+0x1a>
   12b76:	2b03      	cmp	r3, #3
   12b78:	d113      	bne.n	12ba2 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   12b7a:	480c      	ldr	r0, [pc, #48]	; (12bac <bt_recv+0x40>)
   12b7c:	4629      	mov	r1, r5
   12b7e:	f003 faaf 	bl	160e0 <net_buf_put>
		return 0;
   12b82:	2000      	movs	r0, #0
   12b84:	e00c      	b.n	12ba0 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12b86:	6883      	ldr	r3, [r0, #8]
   12b88:	7818      	ldrb	r0, [r3, #0]
   12b8a:	f00a fbdf 	bl	1d34c <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   12b8e:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12b90:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   12b92:	d502      	bpl.n	12b9a <bt_recv+0x2e>
			hci_event_prio(buf);
   12b94:	4628      	mov	r0, r5
   12b96:	f7ff ff97 	bl	12ac8 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   12b9a:	f014 0002 	ands.w	r0, r4, #2
   12b9e:	d1ec      	bne.n	12b7a <bt_recv+0xe>
}
   12ba0:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   12ba2:	f003 fad1 	bl	16148 <net_buf_unref>
		return -EINVAL;
   12ba6:	f06f 0015 	mvn.w	r0, #21
   12baa:	e7f9      	b.n	12ba0 <bt_recv+0x34>
   12bac:	200003d4 	.word	0x200003d4

00012bb0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   12bb0:	4a08      	ldr	r2, [pc, #32]	; (12bd4 <bt_hci_driver_register+0x24>)
{
   12bb2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   12bb4:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   12bb8:	b930      	cbnz	r0, 12bc8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   12bba:	68d9      	ldr	r1, [r3, #12]
   12bbc:	b139      	cbz	r1, 12bce <bt_hci_driver_register+0x1e>
   12bbe:	6919      	ldr	r1, [r3, #16]
   12bc0:	b129      	cbz	r1, 12bce <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   12bc2:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	return 0;
   12bc6:	4770      	bx	lr
		return -EALREADY;
   12bc8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12bcc:	4770      	bx	lr
		return -EINVAL;
   12bce:	f06f 0015 	mvn.w	r0, #21
}
   12bd2:	4770      	bx	lr
   12bd4:	200002a0 	.word	0x200002a0

00012bd8 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12bd8:	4b07      	ldr	r3, [pc, #28]	; (12bf8 <bt_finalize_init+0x20>)
   12bda:	f3bf 8f5b 	dmb	ish
   12bde:	e853 2f00 	ldrex	r2, [r3]
   12be2:	f042 0202 	orr.w	r2, r2, #2
   12be6:	e843 2100 	strex	r1, r2, [r3]
   12bea:	2900      	cmp	r1, #0
   12bec:	d1f7      	bne.n	12bde <bt_finalize_init+0x6>
   12bee:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   12bf2:	2000      	movs	r0, #0
   12bf4:	f000 baca 	b.w	1318c <bt_le_scan_update>
   12bf8:	2000036c 	.word	0x2000036c

00012bfc <init_work>:
{
   12bfc:	b510      	push	{r4, lr}
	err = hci_init();
   12bfe:	f7ff fb2f 	bl	12260 <hci_init>
	if (err) {
   12c02:	4604      	mov	r4, r0
   12c04:	b928      	cbnz	r0, 12c12 <init_work+0x16>
		err = bt_conn_init();
   12c06:	f001 fac1 	bl	1418c <bt_conn_init>
		if (err) {
   12c0a:	4604      	mov	r4, r0
   12c0c:	b908      	cbnz	r0, 12c12 <init_work+0x16>
	bt_finalize_init();
   12c0e:	f7ff ffe3 	bl	12bd8 <bt_finalize_init>
	if (ready_cb) {
   12c12:	4b04      	ldr	r3, [pc, #16]	; (12c24 <init_work+0x28>)
   12c14:	681b      	ldr	r3, [r3, #0]
   12c16:	b11b      	cbz	r3, 12c20 <init_work+0x24>
		ready_cb(err);
   12c18:	4620      	mov	r0, r4
}
   12c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   12c1e:	4718      	bx	r3
}
   12c20:	bd10      	pop	{r4, pc}
   12c22:	bf00      	nop
   12c24:	20001c20 	.word	0x20001c20

00012c28 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   12c28:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   12c2c:	4d32      	ldr	r5, [pc, #200]	; (12cf8 <bt_enable+0xd0>)
   12c2e:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
{
   12c32:	b088      	sub	sp, #32
   12c34:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   12c36:	2b00      	cmp	r3, #0
   12c38:	d058      	beq.n	12cec <bt_enable+0xc4>
   12c3a:	f3bf 8f5b 	dmb	ish
   12c3e:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   12c42:	e853 4f00 	ldrex	r4, [r3]
   12c46:	f044 0201 	orr.w	r2, r4, #1
   12c4a:	e843 2100 	strex	r1, r2, [r3]
   12c4e:	2900      	cmp	r1, #0
   12c50:	d1f7      	bne.n	12c42 <bt_enable+0x1a>
   12c52:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   12c56:	f014 0401 	ands.w	r4, r4, #1
   12c5a:	d14a      	bne.n	12cf2 <bt_enable+0xca>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   12c5c:	4b27      	ldr	r3, [pc, #156]	; (12cfc <bt_enable+0xd4>)
   12c5e:	f04f 0800 	mov.w	r8, #0
   12c62:	601e      	str	r6, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   12c64:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12c68:	f06f 0308 	mvn.w	r3, #8
   12c6c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   12c70:	e9cd 8906 	strd	r8, r9, [sp, #24]
   12c74:	e9cd 4400 	strd	r4, r4, [sp]
   12c78:	4b21      	ldr	r3, [pc, #132]	; (12d00 <bt_enable+0xd8>)
   12c7a:	4922      	ldr	r1, [pc, #136]	; (12d04 <bt_enable+0xdc>)
   12c7c:	9404      	str	r4, [sp, #16]
   12c7e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   12c82:	4821      	ldr	r0, [pc, #132]	; (12d08 <bt_enable+0xe0>)
   12c84:	f006 face 	bl	19224 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12c88:	4920      	ldr	r1, [pc, #128]	; (12d0c <bt_enable+0xe4>)
   12c8a:	481f      	ldr	r0, [pc, #124]	; (12d08 <bt_enable+0xe0>)
   12c8c:	f00c fb29 	bl	1f2e2 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12c90:	f06f 0307 	mvn.w	r3, #7
   12c94:	e9cd 4302 	strd	r4, r3, [sp, #8]
   12c98:	e9cd 8906 	strd	r8, r9, [sp, #24]
   12c9c:	e9cd 4400 	strd	r4, r4, [sp]
   12ca0:	4b1b      	ldr	r3, [pc, #108]	; (12d10 <bt_enable+0xe8>)
   12ca2:	491c      	ldr	r1, [pc, #112]	; (12d14 <bt_enable+0xec>)
   12ca4:	9404      	str	r4, [sp, #16]
   12ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12caa:	481b      	ldr	r0, [pc, #108]	; (12d18 <bt_enable+0xf0>)
   12cac:	f006 faba 	bl	19224 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12cb0:	491a      	ldr	r1, [pc, #104]	; (12d1c <bt_enable+0xf4>)
   12cb2:	4819      	ldr	r0, [pc, #100]	; (12d18 <bt_enable+0xf0>)
   12cb4:	f00c fb15 	bl	1f2e2 <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   12cb8:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   12cbc:	68db      	ldr	r3, [r3, #12]
   12cbe:	4798      	blx	r3
	if (err) {
   12cc0:	4604      	mov	r4, r0
   12cc2:	b950      	cbnz	r0, 12cda <bt_enable+0xb2>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   12cc4:	b96e      	cbnz	r6, 12ce2 <bt_enable+0xba>
	err = hci_init();
   12cc6:	f7ff facb 	bl	12260 <hci_init>
	if (err) {
   12cca:	4604      	mov	r4, r0
   12ccc:	b928      	cbnz	r0, 12cda <bt_enable+0xb2>
		err = bt_conn_init();
   12cce:	f001 fa5d 	bl	1418c <bt_conn_init>
		if (err) {
   12cd2:	4604      	mov	r4, r0
   12cd4:	b908      	cbnz	r0, 12cda <bt_enable+0xb2>
	bt_finalize_init();
   12cd6:	f7ff ff7f 	bl	12bd8 <bt_finalize_init>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   12cda:	4620      	mov	r0, r4
   12cdc:	b008      	add	sp, #32
   12cde:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	k_work_submit(&bt_dev.init);
   12ce2:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   12ce6:	f007 fa59 	bl	1a19c <k_work_submit>
	return 0;
   12cea:	e7f6      	b.n	12cda <bt_enable+0xb2>
		return -ENODEV;
   12cec:	f06f 0412 	mvn.w	r4, #18
   12cf0:	e7f3      	b.n	12cda <bt_enable+0xb2>
		return -EALREADY;
   12cf2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   12cf6:	e7f0      	b.n	12cda <bt_enable+0xb2>
   12cf8:	200002a0 	.word	0x200002a0
   12cfc:	20001c20 	.word	0x20001c20
   12d00:	00012995 	.word	0x00012995
   12d04:	20002c80 	.word	0x20002c80
   12d08:	200014d8 	.word	0x200014d8
   12d0c:	00020909 	.word	0x00020909
   12d10:	00011ea5 	.word	0x00011ea5
   12d14:	20002860 	.word	0x20002860
   12d18:	20001458 	.word	0x20001458
   12d1c:	0002090f 	.word	0x0002090f

00012d20 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   12d20:	4800      	ldr	r0, [pc, #0]	; (12d24 <bt_get_name+0x4>)
   12d22:	4770      	bx	lr
   12d24:	00020915 	.word	0x00020915

00012d28 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   12d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   12d2a:	4f0b      	ldr	r7, [pc, #44]	; (12d58 <id_find+0x30>)
{
   12d2c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   12d2e:	2500      	movs	r5, #0
   12d30:	79fb      	ldrb	r3, [r7, #7]
   12d32:	b2ec      	uxtb	r4, r5
   12d34:	42a3      	cmp	r3, r4
   12d36:	d802      	bhi.n	12d3e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   12d38:	f06f 0401 	mvn.w	r4, #1
   12d3c:	e009      	b.n	12d52 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   12d3e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   12d42:	2207      	movs	r2, #7
   12d44:	4439      	add	r1, r7
   12d46:	4630      	mov	r0, r6
   12d48:	f00c fc12 	bl	1f570 <memcmp>
   12d4c:	3501      	adds	r5, #1
   12d4e:	2800      	cmp	r0, #0
   12d50:	d1ee      	bne.n	12d30 <id_find+0x8>
}
   12d52:	4620      	mov	r0, r4
   12d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12d56:	bf00      	nop
   12d58:	200002a0 	.word	0x200002a0

00012d5c <set_random_address>:
{
   12d5c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   12d5e:	2206      	movs	r2, #6
   12d60:	4913      	ldr	r1, [pc, #76]	; (12db0 <set_random_address+0x54>)
   12d62:	4605      	mov	r5, r0
   12d64:	f00c fc04 	bl	1f570 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   12d68:	4602      	mov	r2, r0
   12d6a:	b1d8      	cbz	r0, 12da4 <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   12d6c:	2106      	movs	r1, #6
   12d6e:	f242 0005 	movw	r0, #8197	; 0x2005
   12d72:	f7ff f9cb 	bl	1210c <bt_hci_cmd_create>
	if (!buf) {
   12d76:	4604      	mov	r4, r0
   12d78:	b1b0      	cbz	r0, 12da8 <set_random_address+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   12d7a:	2206      	movs	r2, #6
   12d7c:	4629      	mov	r1, r5
   12d7e:	3008      	adds	r0, #8
   12d80:	f00c f935 	bl	1efee <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   12d84:	2200      	movs	r2, #0
   12d86:	4621      	mov	r1, r4
   12d88:	f242 0005 	movw	r0, #8197	; 0x2005
   12d8c:	f7ff fa06 	bl	1219c <bt_hci_cmd_send_sync>
	if (err) {
   12d90:	4602      	mov	r2, r0
   12d92:	b938      	cbnz	r0, 12da4 <set_random_address+0x48>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   12d94:	4629      	mov	r1, r5
   12d96:	4806      	ldr	r0, [pc, #24]	; (12db0 <set_random_address+0x54>)
   12d98:	f00a fd9e 	bl	1d8d8 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   12d9c:	4b05      	ldr	r3, [pc, #20]	; (12db4 <set_random_address+0x58>)
   12d9e:	2101      	movs	r1, #1
   12da0:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
}
   12da4:	4610      	mov	r0, r2
   12da6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   12da8:	f06f 0268 	mvn.w	r2, #104	; 0x68
   12dac:	e7fa      	b.n	12da4 <set_random_address+0x48>
   12dae:	bf00      	nop
   12db0:	20000301 	.word	0x20000301
   12db4:	200002a0 	.word	0x200002a0

00012db8 <id_create.isra.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   12db8:	b530      	push	{r4, r5, lr}
   12dba:	4604      	mov	r4, r0
   12dbc:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   12dbe:	460d      	mov	r5, r1
   12dc0:	b199      	cbz	r1, 12dea <id_create.isra.0+0x32>
   12dc2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   12dc4:	2207      	movs	r2, #7
   12dc6:	a902      	add	r1, sp, #8
   12dc8:	4628      	mov	r0, r5
   12dca:	9302      	str	r3, [sp, #8]
   12dcc:	f8cd 300b 	str.w	r3, [sp, #11]
   12dd0:	f00c fbce 	bl	1f570 <memcmp>
   12dd4:	b148      	cbz	r0, 12dea <id_create.isra.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   12dd6:	4810      	ldr	r0, [pc, #64]	; (12e18 <id_create.isra.0+0x60>)
   12dd8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   12ddc:	4629      	mov	r1, r5
   12dde:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   12de0:	f00a fd7f 	bl	1d8e2 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   12de4:	2000      	movs	r0, #0
}
   12de6:	b005      	add	sp, #20
   12de8:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   12dea:	4668      	mov	r0, sp
   12dec:	f00a faa0 	bl	1d330 <bt_addr_le_create_static>
			if (err) {
   12df0:	2800      	cmp	r0, #0
   12df2:	d1f8      	bne.n	12de6 <id_create.isra.0+0x2e>
		} while (id_find(&new_addr) >= 0);
   12df4:	4668      	mov	r0, sp
   12df6:	f7ff ff97 	bl	12d28 <id_find>
   12dfa:	2800      	cmp	r0, #0
   12dfc:	daf5      	bge.n	12dea <id_create.isra.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   12dfe:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   12e02:	4c05      	ldr	r4, [pc, #20]	; (12e18 <id_create.isra.0+0x60>)
   12e04:	4669      	mov	r1, sp
   12e06:	4420      	add	r0, r4
   12e08:	f00a fd6b 	bl	1d8e2 <bt_addr_le_copy>
		if (addr) {
   12e0c:	2d00      	cmp	r5, #0
   12e0e:	d0e9      	beq.n	12de4 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   12e10:	4601      	mov	r1, r0
   12e12:	4628      	mov	r0, r5
   12e14:	e7e4      	b.n	12de0 <id_create.isra.0+0x28>
   12e16:	bf00      	nop
   12e18:	200002a0 	.word	0x200002a0

00012e1c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   12e1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12e1e:	460e      	mov	r6, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   12e20:	4604      	mov	r4, r0
   12e22:	b918      	cbnz	r0, 12e2c <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   12e24:	b1ee      	cbz	r6, 12e62 <bt_id_create+0x46>
		return -EINVAL;
   12e26:	f06f 0015 	mvn.w	r0, #21
   12e2a:	e018      	b.n	12e5e <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   12e2c:	2300      	movs	r3, #0
   12e2e:	2207      	movs	r2, #7
   12e30:	4669      	mov	r1, sp
   12e32:	9300      	str	r3, [sp, #0]
   12e34:	f8cd 3003 	str.w	r3, [sp, #3]
   12e38:	f00c fb9a 	bl	1f570 <memcmp>
   12e3c:	2800      	cmp	r0, #0
   12e3e:	d0f1      	beq.n	12e24 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   12e40:	7823      	ldrb	r3, [r4, #0]
   12e42:	2b01      	cmp	r3, #1
   12e44:	d1ef      	bne.n	12e26 <bt_id_create+0xa>
   12e46:	79a3      	ldrb	r3, [r4, #6]
   12e48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12e4c:	2bc0      	cmp	r3, #192	; 0xc0
   12e4e:	d1ea      	bne.n	12e26 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   12e50:	4620      	mov	r0, r4
   12e52:	f7ff ff69 	bl	12d28 <id_find>
   12e56:	2800      	cmp	r0, #0
   12e58:	dbe4      	blt.n	12e24 <bt_id_create+0x8>
			return -EALREADY;
   12e5a:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   12e5e:	b002      	add	sp, #8
   12e60:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   12e62:	4d13      	ldr	r5, [pc, #76]	; (12eb0 <bt_id_create+0x94>)
   12e64:	79eb      	ldrb	r3, [r5, #7]
   12e66:	2b01      	cmp	r3, #1
   12e68:	d01e      	beq.n	12ea8 <bt_id_create+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12e6a:	f3bf 8f5b 	dmb	ish
   12e6e:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   12e72:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   12e76:	07db      	lsls	r3, r3, #31
   12e78:	d40b      	bmi.n	12e92 <bt_id_create+0x76>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   12e7a:	2c00      	cmp	r4, #0
   12e7c:	d0d3      	beq.n	12e26 <bt_id_create+0xa>
   12e7e:	2207      	movs	r2, #7
   12e80:	4669      	mov	r1, sp
   12e82:	4620      	mov	r0, r4
   12e84:	9600      	str	r6, [sp, #0]
   12e86:	f8cd 6003 	str.w	r6, [sp, #3]
   12e8a:	f00c fb71 	bl	1f570 <memcmp>
   12e8e:	2800      	cmp	r0, #0
   12e90:	d0c9      	beq.n	12e26 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   12e92:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   12e94:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
   12e96:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
   12e98:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
   12e9a:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
   12e9c:	f7ff ff8c 	bl	12db8 <id_create.isra.0>
	new_id = bt_dev.id_count++;
   12ea0:	2800      	cmp	r0, #0
   12ea2:	bf08      	it	eq
   12ea4:	4630      	moveq	r0, r6
   12ea6:	e7da      	b.n	12e5e <bt_id_create+0x42>
		return -ENOMEM;
   12ea8:	f06f 000b 	mvn.w	r0, #11
   12eac:	e7d7      	b.n	12e5e <bt_id_create+0x42>
   12eae:	bf00      	nop
   12eb0:	200002a0 	.word	0x200002a0

00012eb4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   12eb4:	b570      	push	{r4, r5, r6, lr}
   12eb6:	b086      	sub	sp, #24
   12eb8:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   12eba:	aa01      	add	r2, sp, #4
   12ebc:	2100      	movs	r1, #0
   12ebe:	f241 0009 	movw	r0, #4105	; 0x1009
   12ec2:	f7ff f96b 	bl	1219c <bt_hci_cmd_send_sync>
	if (err) {
   12ec6:	4604      	mov	r4, r0
   12ec8:	b970      	cbnz	r0, 12ee8 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   12eca:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   12ecc:	9002      	str	r0, [sp, #8]
   12ece:	689d      	ldr	r5, [r3, #8]
   12ed0:	f8ad 000c 	strh.w	r0, [sp, #12]
   12ed4:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   12ed6:	2206      	movs	r2, #6
   12ed8:	a902      	add	r1, sp, #8
   12eda:	4628      	mov	r0, r5
   12edc:	f00c fb48 	bl	1f570 <memcmp>
   12ee0:	b920      	cbnz	r0, 12eec <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   12ee2:	9801      	ldr	r0, [sp, #4]
   12ee4:	f003 f930 	bl	16148 <net_buf_unref>
		return 0U;
   12ee8:	2000      	movs	r0, #0
   12eea:	e015      	b.n	12f18 <bt_id_read_public_addr+0x64>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   12eec:	4b0b      	ldr	r3, [pc, #44]	; (12f1c <bt_id_read_public_addr+0x68>)
   12eee:	6818      	ldr	r0, [r3, #0]
   12ef0:	9004      	str	r0, [sp, #16]
   12ef2:	889b      	ldrh	r3, [r3, #4]
   12ef4:	f8ad 3014 	strh.w	r3, [sp, #20]
   12ef8:	2206      	movs	r2, #6
   12efa:	a904      	add	r1, sp, #16
   12efc:	4628      	mov	r0, r5
   12efe:	f00c fb37 	bl	1f570 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   12f02:	2800      	cmp	r0, #0
   12f04:	d0ed      	beq.n	12ee2 <bt_id_read_public_addr+0x2e>
		return 0U;
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
   12f06:	4629      	mov	r1, r5
   12f08:	1c70      	adds	r0, r6, #1
   12f0a:	f00a fce5 	bl	1d8d8 <bt_addr_copy>
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   12f0e:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   12f10:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   12f12:	f003 f919 	bl	16148 <net_buf_unref>
	return 1U;
   12f16:	2001      	movs	r0, #1
}
   12f18:	b006      	add	sp, #24
   12f1a:	bd70      	pop	{r4, r5, r6, pc}
   12f1c:	0001f924 	.word	0x0001f924

00012f20 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   12f20:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   12f22:	4668      	mov	r0, sp
   12f24:	f7ff ffc6 	bl	12eb4 <bt_id_read_public_addr>
   12f28:	4b04      	ldr	r3, [pc, #16]	; (12f3c <bt_setup_public_id_addr+0x1c>)
   12f2a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   12f2c:	b118      	cbz	r0, 12f36 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   12f2e:	4669      	mov	r1, sp
   12f30:	2000      	movs	r0, #0
   12f32:	f7ff ff41 	bl	12db8 <id_create.isra.0>
}
   12f36:	b003      	add	sp, #12
   12f38:	f85d fb04 	ldr.w	pc, [sp], #4
   12f3c:	200002a0 	.word	0x200002a0

00012f40 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   12f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   12f42:	4b18      	ldr	r3, [pc, #96]	; (12fa4 <bt_read_static_addr+0x64>)
   12f44:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   12f48:	f014 0401 	ands.w	r4, r4, #1
{
   12f4c:	4605      	mov	r5, r0
   12f4e:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   12f50:	d015      	beq.n	12f7e <bt_read_static_addr+0x3e>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   12f52:	aa01      	add	r2, sp, #4
   12f54:	2100      	movs	r1, #0
   12f56:	f64f 4009 	movw	r0, #64521	; 0xfc09
   12f5a:	f7ff f91f 	bl	1219c <bt_hci_cmd_send_sync>
	if (err) {
   12f5e:	4603      	mov	r3, r0
   12f60:	b9e8      	cbnz	r0, 12f9e <bt_read_static_addr+0x5e>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   12f62:	9801      	ldr	r0, [sp, #4]
   12f64:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   12f66:	7854      	ldrb	r4, [r2, #1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12f68:	f04f 0c16 	mov.w	ip, #22
   12f6c:	42b4      	cmp	r4, r6
   12f6e:	bf28      	it	cs
   12f70:	4634      	movcs	r4, r6
   12f72:	eb02 070c 	add.w	r7, r2, ip
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   12f76:	42a3      	cmp	r3, r4
   12f78:	db04      	blt.n	12f84 <bt_read_static_addr+0x44>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
   12f7a:	f003 f8e5 	bl	16148 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   12f7e:	4620      	mov	r0, r4
   12f80:	b003      	add	sp, #12
   12f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f84:	1c96      	adds	r6, r2, #2
   12f86:	fb0c 5103 	mla	r1, ip, r3, r5
   12f8a:	f856 eb04 	ldr.w	lr, [r6], #4
   12f8e:	f841 eb04 	str.w	lr, [r1], #4
   12f92:	42be      	cmp	r6, r7
   12f94:	d1f9      	bne.n	12f8a <bt_read_static_addr+0x4a>
   12f96:	883e      	ldrh	r6, [r7, #0]
   12f98:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
   12f9a:	3301      	adds	r3, #1
   12f9c:	e7eb      	b.n	12f76 <bt_read_static_addr+0x36>
		return 0;
   12f9e:	2400      	movs	r4, #0
   12fa0:	e7ed      	b.n	12f7e <bt_read_static_addr+0x3e>
   12fa2:	bf00      	nop
   12fa4:	200002a0 	.word	0x200002a0

00012fa8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   12fa8:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   12faa:	4d14      	ldr	r5, [pc, #80]	; (12ffc <bt_setup_random_id_addr+0x54>)
   12fac:	79ec      	ldrb	r4, [r5, #7]
{
   12fae:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   12fb0:	b92c      	cbnz	r4, 12fbe <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   12fb2:	2101      	movs	r1, #1
   12fb4:	a802      	add	r0, sp, #8
   12fb6:	f7ff ffc3 	bl	12f40 <bt_read_static_addr>
   12fba:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   12fbc:	b9b0      	cbnz	r0, 12fec <bt_setup_random_id_addr+0x44>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   12fbe:	2100      	movs	r1, #0
   12fc0:	4608      	mov	r0, r1
   12fc2:	f7ff ff2b 	bl	12e1c <bt_id_create>
   12fc6:	e00f      	b.n	12fe8 <bt_setup_random_id_addr+0x40>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   12fc8:	ab02      	add	r3, sp, #8
   12fca:	fb06 3102 	mla	r1, r6, r2, r3
   12fce:	f10d 0001 	add.w	r0, sp, #1
   12fd2:	f00a fc81 	bl	1d8d8 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   12fd6:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   12fd8:	4669      	mov	r1, sp
   12fda:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   12fdc:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   12fe0:	f7ff feea 	bl	12db8 <id_create.isra.0>
				if (err) {
   12fe4:	3401      	adds	r4, #1
   12fe6:	b110      	cbz	r0, 12fee <bt_setup_random_id_addr+0x46>
}
   12fe8:	b008      	add	sp, #32
   12fea:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   12fec:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   12fee:	79eb      	ldrb	r3, [r5, #7]
   12ff0:	b2e2      	uxtb	r2, r4
   12ff2:	4293      	cmp	r3, r2
   12ff4:	d8e8      	bhi.n	12fc8 <bt_setup_random_id_addr+0x20>
			return 0;
   12ff6:	2000      	movs	r0, #0
   12ff8:	e7f6      	b.n	12fe8 <bt_setup_random_id_addr+0x40>
   12ffa:	bf00      	nop
   12ffc:	200002a0 	.word	0x200002a0

00013000 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   13000:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   13002:	4c07      	ldr	r4, [pc, #28]	; (13020 <bt_id_set_create_conn_own_addr+0x20>)
   13004:	7823      	ldrb	r3, [r4, #0]
   13006:	2b01      	cmp	r3, #1
{
   13008:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
   1300a:	d003      	beq.n	13014 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   1300c:	7823      	ldrb	r3, [r4, #0]
   1300e:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   13010:	2000      	movs	r0, #0
}
   13012:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   13014:	1c60      	adds	r0, r4, #1
   13016:	f7ff fea1 	bl	12d5c <set_random_address>
			if (err) {
   1301a:	2800      	cmp	r0, #0
   1301c:	d0f6      	beq.n	1300c <bt_id_set_create_conn_own_addr+0xc>
   1301e:	e7f8      	b.n	13012 <bt_id_set_create_conn_own_addr+0x12>
   13020:	200002a0 	.word	0x200002a0

00013024 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   13024:	b510      	push	{r4, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   13026:	4b05      	ldr	r3, [pc, #20]	; (1303c <bt_id_set_scan_own_addr+0x18>)
   13028:	781b      	ldrb	r3, [r3, #0]
   1302a:	700b      	strb	r3, [r1, #0]
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   1302c:	2000      	movs	r0, #0
{
   1302e:	460c      	mov	r4, r1
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   13030:	f00a fc60 	bl	1d8f4 <bt_id_set_private_addr>
			if (err) {
   13034:	b908      	cbnz	r0, 1303a <bt_id_set_scan_own_addr+0x16>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   13036:	2301      	movs	r3, #1
   13038:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
   1303a:	bd10      	pop	{r4, pc}
   1303c:	200002a0 	.word	0x200002a0

00013040 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   13040:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   13042:	4c0a      	ldr	r4, [pc, #40]	; (1306c <bt_id_init+0x2c>)
   13044:	79e3      	ldrb	r3, [r4, #7]
   13046:	b10b      	cbz	r3, 1304c <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   13048:	2000      	movs	r0, #0
}
   1304a:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   1304c:	f7ff ff68 	bl	12f20 <bt_setup_public_id_addr>
		if (err) {
   13050:	2800      	cmp	r0, #0
   13052:	d1fa      	bne.n	1304a <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   13054:	79e3      	ldrb	r3, [r4, #7]
   13056:	2b00      	cmp	r3, #0
   13058:	d1f6      	bne.n	13048 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   1305a:	f7ff ffa5 	bl	12fa8 <bt_setup_random_id_addr>
		if (err) {
   1305e:	2800      	cmp	r0, #0
   13060:	d1f3      	bne.n	1304a <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   13062:	1c60      	adds	r0, r4, #1
}
   13064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
   13068:	f7ff be78 	b.w	12d5c <set_random_address>
   1306c:	200002a0 	.word	0x200002a0

00013070 <atomic_get.constprop.0>:
   13070:	4b03      	ldr	r3, [pc, #12]	; (13080 <atomic_get.constprop.0+0x10>)
   13072:	f3bf 8f5b 	dmb	ish
   13076:	6818      	ldr	r0, [r3, #0]
   13078:	f3bf 8f5b 	dmb	ish
}
   1307c:	4770      	bx	lr
   1307e:	bf00      	nop
   13080:	2000036c 	.word	0x2000036c

00013084 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   13084:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   13086:	2102      	movs	r1, #2
{
   13088:	b087      	sub	sp, #28
   1308a:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   1308c:	f242 000c 	movw	r0, #8204	; 0x200c
   13090:	f7ff f83c 	bl	1210c <bt_hci_cmd_create>
	if (!buf) {
   13094:	4605      	mov	r5, r0
   13096:	b308      	cbz	r0, 130dc <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
   13098:	2102      	movs	r1, #2
   1309a:	3008      	adds	r0, #8
   1309c:	f003 f984 	bl	163a8 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   130a0:	2c01      	cmp	r4, #1
   130a2:	4602      	mov	r2, r0
   130a4:	d117      	bne.n	130d6 <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   130a6:	f7ff ffe3 	bl	13070 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   130aa:	f3c0 2000 	ubfx	r0, r0, #8, #1
   130ae:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   130b0:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   130b2:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   130b4:	425c      	negs	r4, r3
   130b6:	415c      	adcs	r4, r3
   130b8:	4a0a      	ldr	r2, [pc, #40]	; (130e4 <bt_le_scan_set_enable_legacy+0x60>)
   130ba:	9400      	str	r4, [sp, #0]
   130bc:	a903      	add	r1, sp, #12
   130be:	4628      	mov	r0, r5
   130c0:	2305      	movs	r3, #5
   130c2:	f7ff f811 	bl	120e8 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   130c6:	2200      	movs	r2, #0
   130c8:	4629      	mov	r1, r5
   130ca:	f242 000c 	movw	r0, #8204	; 0x200c
   130ce:	f7ff f865 	bl	1219c <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   130d2:	b007      	add	sp, #28
   130d4:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   130d6:	2300      	movs	r3, #0
   130d8:	7043      	strb	r3, [r0, #1]
   130da:	e7e9      	b.n	130b0 <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
   130dc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   130e0:	e7f7      	b.n	130d2 <bt_le_scan_set_enable_legacy+0x4e>
   130e2:	bf00      	nop
   130e4:	2000036c 	.word	0x2000036c

000130e8 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   130e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   130ea:	2300      	movs	r3, #0
   130ec:	f88d 3005 	strb.w	r3, [sp, #5]

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   130f0:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   130f4:	1e43      	subs	r3, r0, #1
	set_param.scan_type = scan_type;
   130f6:	f88d 0000 	strb.w	r0, [sp]
{
   130fa:	4605      	mov	r5, r0
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   130fc:	4258      	negs	r0, r3
	set_param.interval = sys_cpu_to_le16(interval);
   130fe:	f8ad 1001 	strh.w	r1, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   13102:	4158      	adcs	r0, r3
   13104:	f10d 0105 	add.w	r1, sp, #5
	set_param.window = sys_cpu_to_le16(window);
   13108:	f8ad 2003 	strh.w	r2, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1310c:	f7ff ff8a 	bl	13024 <bt_id_set_scan_own_addr>
	if (err) {
   13110:	4604      	mov	r4, r0
   13112:	bb38      	cbnz	r0, 13164 <start_le_scan_legacy+0x7c>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   13114:	2107      	movs	r1, #7
   13116:	f242 000b 	movw	r0, #8203	; 0x200b
   1311a:	f7fe fff7 	bl	1210c <bt_hci_cmd_create>
	if (!buf) {
   1311e:	4606      	mov	r6, r0
   13120:	b348      	cbz	r0, 13176 <start_le_scan_legacy+0x8e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13122:	2207      	movs	r2, #7
   13124:	4669      	mov	r1, sp
   13126:	3008      	adds	r0, #8
   13128:	f00b ff61 	bl	1efee <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   1312c:	4622      	mov	r2, r4
   1312e:	4631      	mov	r1, r6
   13130:	f242 000b 	movw	r0, #8203	; 0x200b
   13134:	f7ff f832 	bl	1219c <bt_hci_cmd_send_sync>
	if (err) {
   13138:	4604      	mov	r4, r0
   1313a:	b998      	cbnz	r0, 13164 <start_le_scan_legacy+0x7c>
	return bt_le_scan_set_enable_legacy(enable);
   1313c:	2001      	movs	r0, #1
   1313e:	f7ff ffa1 	bl	13084 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   13142:	4604      	mov	r4, r0
   13144:	b970      	cbnz	r0, 13164 <start_le_scan_legacy+0x7c>
	if (val) {
   13146:	2d01      	cmp	r5, #1
   13148:	d10f      	bne.n	1316a <start_le_scan_legacy+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1314a:	f3bf 8f5b 	dmb	ish
   1314e:	4b0b      	ldr	r3, [pc, #44]	; (1317c <start_le_scan_legacy+0x94>)
   13150:	e853 2f00 	ldrex	r2, [r3]
   13154:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13158:	e843 2100 	strex	r1, r2, [r3]
   1315c:	2900      	cmp	r1, #0
   1315e:	d1f7      	bne.n	13150 <start_le_scan_legacy+0x68>
   13160:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   13164:	4620      	mov	r0, r4
   13166:	b002      	add	sp, #8
   13168:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1316a:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1316e:	4803      	ldr	r0, [pc, #12]	; (1317c <start_le_scan_legacy+0x94>)
   13170:	f00a fbd4 	bl	1d91c <atomic_and>
   13174:	e7f6      	b.n	13164 <start_le_scan_legacy+0x7c>
		return -ENOBUFS;
   13176:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1317a:	e7f3      	b.n	13164 <start_le_scan_legacy+0x7c>
   1317c:	2000036c 	.word	0x2000036c

00013180 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   13180:	4b01      	ldr	r3, [pc, #4]	; (13188 <bt_scan_reset+0x8>)
   13182:	2200      	movs	r2, #0
   13184:	601a      	str	r2, [r3, #0]
}
   13186:	4770      	bx	lr
   13188:	20001c2c 	.word	0x20001c2c

0001318c <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   1318c:	b538      	push	{r3, r4, r5, lr}
   1318e:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13190:	f7ff ff6e 	bl	13070 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   13194:	0641      	lsls	r1, r0, #25
   13196:	f3c0 1280 	ubfx	r2, r0, #6, #1
   1319a:	d501      	bpl.n	131a0 <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
   1319c:	2000      	movs	r0, #0
   1319e:	e031      	b.n	13204 <bt_le_scan_update+0x78>
   131a0:	f7ff ff66 	bl	13070 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   131a4:	0683      	lsls	r3, r0, #26
   131a6:	d428      	bmi.n	131fa <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   131a8:	2100      	movs	r1, #0
   131aa:	2206      	movs	r2, #6
   131ac:	4608      	mov	r0, r1
   131ae:	f000 fdeb 	bl	13d88 <bt_conn_lookup_state_le>
		if (conn) {
   131b2:	4604      	mov	r4, r0
   131b4:	bb38      	cbnz	r0, 13206 <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   131b6:	2202      	movs	r2, #2
   131b8:	4601      	mov	r1, r0
   131ba:	f000 fde5 	bl	13d88 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
   131be:	2800      	cmp	r0, #0
   131c0:	d0ec      	beq.n	1319c <bt_le_scan_update+0x10>
   131c2:	f3bf 8f5b 	dmb	ish
   131c6:	4b11      	ldr	r3, [pc, #68]	; (1320c <bt_le_scan_update+0x80>)
   131c8:	e853 2f00 	ldrex	r2, [r3]
   131cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   131d0:	e843 2100 	strex	r1, r2, [r3]
   131d4:	2900      	cmp	r1, #0
   131d6:	d1f7      	bne.n	131c8 <bt_le_scan_update+0x3c>
   131d8:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   131dc:	f000 fb8c 	bl	138f8 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   131e0:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   131e2:	4620      	mov	r0, r4
   131e4:	bf18      	it	ne
   131e6:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   131e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   131ec:	bf0a      	itet	eq
   131ee:	2212      	moveq	r2, #18
   131f0:	2160      	movne	r1, #96	; 0x60
   131f2:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   131f6:	f7ff bf77 	b.w	130e8 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   131fa:	4610      	mov	r0, r2
   131fc:	f7ff ff42 	bl	13084 <bt_le_scan_set_enable_legacy>
		if (err) {
   13200:	2800      	cmp	r0, #0
   13202:	d0d1      	beq.n	131a8 <bt_le_scan_update+0x1c>
}
   13204:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   13206:	f000 fb77 	bl	138f8 <bt_conn_unref>
   1320a:	e7c7      	b.n	1319c <bt_le_scan_update+0x10>
   1320c:	2000036c 	.word	0x2000036c

00013210 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   13210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   13214:	f100 0708 	add.w	r7, r0, #8
   13218:	b08d      	sub	sp, #52	; 0x34
   1321a:	4604      	mov	r4, r0
   1321c:	4638      	mov	r0, r7
   1321e:	f00b feca 	bl	1efb6 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   13222:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 133e8 <bt_hci_le_adv_report+0x1d8>
   13226:	9001      	str	r0, [sp, #4]
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   13228:	9b01      	ldr	r3, [sp, #4]
   1322a:	b913      	cbnz	r3, 13232 <bt_hci_le_adv_report+0x22>

		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   1322c:	b00d      	add	sp, #52	; 0x34
   1322e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
   13232:	89a3      	ldrh	r3, [r4, #12]
   13234:	2b08      	cmp	r3, #8
   13236:	d9f9      	bls.n	1322c <bt_hci_le_adv_report+0x1c>
	return net_buf_simple_pull_mem(&buf->b, len);
   13238:	2109      	movs	r1, #9
   1323a:	4638      	mov	r0, r7
   1323c:	f003 f892 	bl	16364 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
   13240:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   13244:	237f      	movs	r3, #127	; 0x7f
   13246:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
   1324a:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   1324e:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   13250:	7a5b      	ldrb	r3, [r3, #9]
   13252:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
   13256:	23ff      	movs	r3, #255	; 0xff
   13258:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
   1325c:	2300      	movs	r3, #0
   1325e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   13262:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
   13266:	7802      	ldrb	r2, [r0, #0]
   13268:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1326c:	2a04      	cmp	r2, #4
   1326e:	bf9c      	itt	ls
   13270:	4b5b      	ldrls	r3, [pc, #364]	; (133e0 <bt_hci_le_adv_report+0x1d0>)
   13272:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props(evt->evt_type);
   13274:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   13278:	4606      	mov	r6, r0
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
   1327a:	f100 0801 	add.w	r8, r0, #1
   1327e:	f7ff fef7 	bl	13070 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   13282:	0645      	lsls	r5, r0, #25
   13284:	d50d      	bpl.n	132a2 <bt_hci_le_adv_report+0x92>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   13286:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1328a:	0758      	lsls	r0, r3, #29
   1328c:	d509      	bpl.n	132a2 <bt_hci_le_adv_report+0x92>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   1328e:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
   13290:	4638      	mov	r0, r7
   13292:	3101      	adds	r1, #1
   13294:	f003 f846 	bl	16324 <net_buf_simple_pull>
   13298:	9b01      	ldr	r3, [sp, #4]
   1329a:	1e58      	subs	r0, r3, #1
   1329c:	b2c3      	uxtb	r3, r0
   1329e:	9301      	str	r3, [sp, #4]
   132a0:	e7c2      	b.n	13228 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   132a2:	7873      	ldrb	r3, [r6, #1]
   132a4:	1e9a      	subs	r2, r3, #2
   132a6:	2a01      	cmp	r2, #1
   132a8:	d84e      	bhi.n	13348 <bt_hci_le_adv_report+0x138>
		bt_addr_le_copy(&id_addr, addr);
   132aa:	4641      	mov	r1, r8
   132ac:	a804      	add	r0, sp, #16
   132ae:	f00a fb44 	bl	1d93a <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   132b2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   132b6:	3b02      	subs	r3, #2
   132b8:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
   132bc:	ab04      	add	r3, sp, #16
   132be:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
   132c0:	f8da 3000 	ldr.w	r3, [sl]
   132c4:	b1b3      	cbz	r3, 132f4 <bt_hci_le_adv_report+0xe4>
	state->offset = net_buf_simple_headroom(buf);
   132c6:	4638      	mov	r0, r7
   132c8:	f00b fe85 	bl	1efd6 <net_buf_simple_headroom>
	state->len = buf->len;
   132cc:	89a3      	ldrh	r3, [r4, #12]
   132ce:	9302      	str	r3, [sp, #8]
	state->offset = net_buf_simple_headroom(buf);
   132d0:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
   132d2:	463b      	mov	r3, r7
   132d4:	a804      	add	r0, sp, #16
   132d6:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   132da:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
   132de:	f8da 5000 	ldr.w	r5, [sl]
		buf->len = len;
   132e2:	f8a4 900c 	strh.w	r9, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
   132e6:	47a8      	blx	r5
	buf->data = buf->__buf + state->offset;
   132e8:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   132ea:	9b02      	ldr	r3, [sp, #8]
   132ec:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   132ee:	fa10 f08b 	uxtah	r0, r0, fp
   132f2:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   132f4:	4b3b      	ldr	r3, [pc, #236]	; (133e4 <bt_hci_le_adv_report+0x1d4>)
   132f6:	681b      	ldr	r3, [r3, #0]
   132f8:	2b00      	cmp	r3, #0
   132fa:	d036      	beq.n	1336a <bt_hci_le_adv_report+0x15a>
   132fc:	f1b3 0208 	subs.w	r2, r3, #8
   13300:	d033      	beq.n	1336a <bt_hci_le_adv_report+0x15a>
   13302:	681d      	ldr	r5, [r3, #0]
   13304:	b105      	cbz	r5, 13308 <bt_hci_le_adv_report+0xf8>
   13306:	3d08      	subs	r5, #8
		if (listener->recv) {
   13308:	6813      	ldr	r3, [r2, #0]
   1330a:	9203      	str	r2, [sp, #12]
   1330c:	b193      	cbz	r3, 13334 <bt_hci_le_adv_report+0x124>
	state->offset = net_buf_simple_headroom(buf);
   1330e:	4638      	mov	r0, r7
   13310:	f00b fe61 	bl	1efd6 <net_buf_simple_headroom>
			listener->recv(info, &buf->b);
   13314:	9a03      	ldr	r2, [sp, #12]
	state->len = buf->len;
   13316:	89a3      	ldrh	r3, [r4, #12]
   13318:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
   1331a:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1331e:	4683      	mov	fp, r0
			listener->recv(info, &buf->b);
   13320:	4639      	mov	r1, r7
   13322:	a808      	add	r0, sp, #32
	state->len = buf->len;
   13324:	9302      	str	r3, [sp, #8]
   13326:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   13328:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1332a:	9b02      	ldr	r3, [sp, #8]
   1332c:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1332e:	fa10 f08b 	uxtah	r0, r0, fp
   13332:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   13334:	b1cd      	cbz	r5, 1336a <bt_hci_le_adv_report+0x15a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13336:	f115 0308 	adds.w	r3, r5, #8
   1333a:	d002      	beq.n	13342 <bt_hci_le_adv_report+0x132>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1333c:	68ab      	ldr	r3, [r5, #8]
   1333e:	b103      	cbz	r3, 13342 <bt_hci_le_adv_report+0x132>
   13340:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
   13342:	462a      	mov	r2, r5
   13344:	461d      	mov	r5, r3
   13346:	e7df      	b.n	13308 <bt_hci_le_adv_report+0xf8>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   13348:	2bff      	cmp	r3, #255	; 0xff
   1334a:	d108      	bne.n	1335e <bt_hci_le_adv_report+0x14e>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   1334c:	2300      	movs	r3, #0
   1334e:	9306      	str	r3, [sp, #24]
   13350:	a906      	add	r1, sp, #24
   13352:	f8cd 301b 	str.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
   13356:	a804      	add	r0, sp, #16
   13358:	f00a faef 	bl	1d93a <bt_addr_le_copy>
   1335c:	e7ae      	b.n	132bc <bt_hci_le_adv_report+0xac>
   1335e:	4641      	mov	r1, r8
   13360:	2000      	movs	r0, #0
   13362:	f00a fac5 	bl	1d8f0 <bt_lookup_id_addr>
   13366:	4601      	mov	r1, r0
   13368:	e7f5      	b.n	13356 <bt_hci_le_adv_report+0x146>
	check_pending_conn(&id_addr, addr, info->adv_props);
   1336a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   1336e:	f7ff fe7f 	bl	13070 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   13372:	0641      	lsls	r1, r0, #25
   13374:	f3c0 1580 	ubfx	r5, r0, #6, #1
   13378:	d489      	bmi.n	1328e <bt_hci_le_adv_report+0x7e>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   1337a:	07d2      	lsls	r2, r2, #31
   1337c:	d587      	bpl.n	1328e <bt_hci_le_adv_report+0x7e>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   1337e:	2202      	movs	r2, #2
   13380:	a904      	add	r1, sp, #16
   13382:	4628      	mov	r0, r5
   13384:	f000 fd00 	bl	13d88 <bt_conn_lookup_state_le>
	if (!conn) {
   13388:	4681      	mov	r9, r0
   1338a:	2800      	cmp	r0, #0
   1338c:	f43f af7f 	beq.w	1328e <bt_hci_le_adv_report+0x7e>
   13390:	f7ff fe6e 	bl	13070 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   13394:	0683      	lsls	r3, r0, #26
   13396:	d410      	bmi.n	133ba <bt_hci_le_adv_report+0x1aa>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
   13398:	f109 009e 	add.w	r0, r9, #158	; 0x9e
   1339c:	4641      	mov	r1, r8
   1339e:	f00a facc 	bl	1d93a <bt_addr_le_copy>
	if (bt_le_create_conn(conn)) {
   133a2:	4648      	mov	r0, r9
   133a4:	f00a f8f3 	bl	1d58e <bt_le_create_conn>
   133a8:	b960      	cbnz	r0, 133c4 <bt_hci_le_adv_report+0x1b4>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   133aa:	4648      	mov	r0, r9
   133ac:	2106      	movs	r1, #6
   133ae:	f000 fad9 	bl	13964 <bt_conn_set_state>
	bt_conn_unref(conn);
   133b2:	4648      	mov	r0, r9
   133b4:	f000 faa0 	bl	138f8 <bt_conn_unref>
	return;
   133b8:	e769      	b.n	1328e <bt_hci_le_adv_report+0x7e>
	return bt_le_scan_set_enable_legacy(enable);
   133ba:	4628      	mov	r0, r5
   133bc:	f7ff fe62 	bl	13084 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   133c0:	2800      	cmp	r0, #0
   133c2:	d0e9      	beq.n	13398 <bt_hci_le_adv_report+0x188>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   133c4:	231f      	movs	r3, #31
   133c6:	f889 3009 	strb.w	r3, [r9, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   133ca:	2100      	movs	r1, #0
   133cc:	4648      	mov	r0, r9
   133ce:	f000 fac9 	bl	13964 <bt_conn_set_state>
	bt_conn_unref(conn);
   133d2:	4648      	mov	r0, r9
   133d4:	f000 fa90 	bl	138f8 <bt_conn_unref>
	bt_le_scan_update(false);
   133d8:	2000      	movs	r0, #0
   133da:	f7ff fed7 	bl	1318c <bt_le_scan_update>
   133de:	e756      	b.n	1328e <bt_hci_le_adv_report+0x7e>
   133e0:	0002091c 	.word	0x0002091c
   133e4:	20001c24 	.word	0x20001c24
   133e8:	20001c2c 	.word	0x20001c2c

000133ec <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   133ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   133f0:	4605      	mov	r5, r0
   133f2:	460f      	mov	r7, r1
   133f4:	f7ff fe3c 	bl	13070 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   133f8:	0780      	lsls	r0, r0, #30
   133fa:	d56f      	bpl.n	134dc <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   133fc:	782a      	ldrb	r2, [r5, #0]
   133fe:	2a01      	cmp	r2, #1
   13400:	d904      	bls.n	1340c <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   13402:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   13406:	4620      	mov	r0, r4
   13408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   1340c:	686b      	ldr	r3, [r5, #4]
   1340e:	f033 030f 	bics.w	r3, r3, #15
   13412:	d1f6      	bne.n	13402 <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   13414:	8928      	ldrh	r0, [r5, #8]
   13416:	1f03      	subs	r3, r0, #4
   13418:	b29b      	uxth	r3, r3
   1341a:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   1341e:	42a3      	cmp	r3, r4
   13420:	d8ef      	bhi.n	13402 <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   13422:	8969      	ldrh	r1, [r5, #10]
   13424:	1f0b      	subs	r3, r1, #4
   13426:	b29b      	uxth	r3, r3
   13428:	42a3      	cmp	r3, r4
   1342a:	d8ea      	bhi.n	13402 <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   1342c:	4288      	cmp	r0, r1
   1342e:	d3e8      	bcc.n	13402 <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
   13430:	b99a      	cbnz	r2, 1345a <bt_le_scan_start+0x6e>
   13432:	f3bf 8f5b 	dmb	ish
   13436:	4e2b      	ldr	r6, [pc, #172]	; (134e4 <bt_le_scan_start+0xf8>)
   13438:	e856 0f00 	ldrex	r0, [r6]
   1343c:	f040 0340 	orr.w	r3, r0, #64	; 0x40
   13440:	e846 3200 	strex	r2, r3, [r6]
   13444:	2a00      	cmp	r2, #0
   13446:	d1f7      	bne.n	13438 <bt_le_scan_start+0x4c>
   13448:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1344c:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   13450:	46b0      	mov	r8, r6
   13452:	d007      	beq.n	13464 <bt_le_scan_start+0x78>
		return -EALREADY;
   13454:	f06f 0477 	mvn.w	r4, #119	; 0x77
   13458:	e7d5      	b.n	13406 <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
   1345a:	f00a fa5d 	bl	1d918 <bt_id_scan_random_addr_check>
   1345e:	2800      	cmp	r0, #0
   13460:	d1e7      	bne.n	13432 <bt_le_scan_start+0x46>
   13462:	e7ce      	b.n	13402 <bt_le_scan_start+0x16>
   13464:	f7ff fe04 	bl	13070 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   13468:	0681      	lsls	r1, r0, #26
   1346a:	d50a      	bpl.n	13482 <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
   1346c:	4610      	mov	r0, r2
   1346e:	f7ff fe09 	bl	13084 <bt_le_scan_set_enable_legacy>
		if (err) {
   13472:	4604      	mov	r4, r0
   13474:	b128      	cbz	r0, 13482 <bt_le_scan_start+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13476:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1347a:	4630      	mov	r0, r6
   1347c:	f00a fa4e 	bl	1d91c <atomic_and>
		return err;
   13480:	e7c1      	b.n	13406 <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   13482:	686b      	ldr	r3, [r5, #4]
	if (val) {
   13484:	07db      	lsls	r3, r3, #31
   13486:	d515      	bpl.n	134b4 <bt_le_scan_start+0xc8>
   13488:	f3bf 8f5b 	dmb	ish
   1348c:	e858 3f00 	ldrex	r3, [r8]
   13490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13494:	e848 3200 	strex	r2, r3, [r8]
   13498:	2a00      	cmp	r2, #0
   1349a:	d1f7      	bne.n	1348c <bt_le_scan_start+0xa0>
   1349c:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   134a0:	89ab      	ldrh	r3, [r5, #12]
   134a2:	b16b      	cbz	r3, 134c0 <bt_le_scan_start+0xd4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   134a4:	480f      	ldr	r0, [pc, #60]	; (134e4 <bt_le_scan_start+0xf8>)
   134a6:	f06f 0140 	mvn.w	r1, #64	; 0x40
   134aa:	f00a fa37 	bl	1d91c <atomic_and>
			return -ENOTSUP;
   134ae:	f06f 0485 	mvn.w	r4, #133	; 0x85
   134b2:	e7a8      	b.n	13406 <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   134b4:	f46f 7180 	mvn.w	r1, #256	; 0x100
   134b8:	480a      	ldr	r0, [pc, #40]	; (134e4 <bt_le_scan_start+0xf8>)
   134ba:	f00a fa2f 	bl	1d91c <atomic_and>
   134be:	e7ef      	b.n	134a0 <bt_le_scan_start+0xb4>
		err = start_le_scan_legacy(param->type, param->interval,
   134c0:	896a      	ldrh	r2, [r5, #10]
   134c2:	8929      	ldrh	r1, [r5, #8]
   134c4:	7828      	ldrb	r0, [r5, #0]
   134c6:	f7ff fe0f 	bl	130e8 <start_le_scan_legacy>
	if (err) {
   134ca:	4604      	mov	r4, r0
   134cc:	b118      	cbz	r0, 134d6 <bt_le_scan_start+0xea>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   134ce:	4805      	ldr	r0, [pc, #20]	; (134e4 <bt_le_scan_start+0xf8>)
   134d0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   134d4:	e7d2      	b.n	1347c <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
   134d6:	4b04      	ldr	r3, [pc, #16]	; (134e8 <bt_le_scan_start+0xfc>)
   134d8:	601f      	str	r7, [r3, #0]
	return 0;
   134da:	e794      	b.n	13406 <bt_le_scan_start+0x1a>
		return -EAGAIN;
   134dc:	f06f 040a 	mvn.w	r4, #10
   134e0:	e791      	b.n	13406 <bt_le_scan_start+0x1a>
   134e2:	bf00      	nop
   134e4:	2000036c 	.word	0x2000036c
   134e8:	20001c2c 	.word	0x20001c2c

000134ec <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   134ec:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   134ee:	4808      	ldr	r0, [pc, #32]	; (13510 <bt_le_scan_stop+0x24>)
   134f0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   134f4:	f00a fa12 	bl	1d91c <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   134f8:	0643      	lsls	r3, r0, #25
   134fa:	d506      	bpl.n	1350a <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   134fc:	4b05      	ldr	r3, [pc, #20]	; (13514 <bt_le_scan_stop+0x28>)
   134fe:	2000      	movs	r0, #0
   13500:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   13502:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   13506:	f7ff be41 	b.w	1318c <bt_le_scan_update>
}
   1350a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1350e:	bd08      	pop	{r3, pc}
   13510:	2000036c 	.word	0x2000036c
   13514:	20001c2c 	.word	0x20001c2c

00013518 <bt_le_scan_cb_register>:
	parent->next = child;
   13518:	2300      	movs	r3, #0
   1351a:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1351c:	4b05      	ldr	r3, [pc, #20]	; (13534 <bt_le_scan_cb_register+0x1c>)
   1351e:	6859      	ldr	r1, [r3, #4]

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   13520:	f100 0208 	add.w	r2, r0, #8
   13524:	b911      	cbnz	r1, 1352c <bt_le_scan_cb_register+0x14>
	list->head = node;
   13526:	e9c3 2200 	strd	r2, r2, [r3]
}
   1352a:	4770      	bx	lr
	parent->next = child;
   1352c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1352e:	605a      	str	r2, [r3, #4]
}
   13530:	4770      	bx	lr
   13532:	bf00      	nop
   13534:	20001c24 	.word	0x20001c24

00013538 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   13538:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1353a:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   1353e:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   13540:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   13542:	4801      	ldr	r0, [pc, #4]	; (13548 <tx_free+0x10>)
   13544:	f00b bef2 	b.w	1f32c <k_queue_append>
   13548:	20000624 	.word	0x20000624

0001354c <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1354c:	4b19      	ldr	r3, [pc, #100]	; (135b4 <notify_connected+0x68>)
{
   1354e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   13552:	681d      	ldr	r5, [r3, #0]
{
   13554:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   13556:	b9ed      	cbnz	r5, 13594 <notify_connected+0x48>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13558:	4e17      	ldr	r6, [pc, #92]	; (135b8 <notify_connected+0x6c>)
   1355a:	4d18      	ldr	r5, [pc, #96]	; (135bc <notify_connected+0x70>)
   1355c:	4f18      	ldr	r7, [pc, #96]	; (135c0 <notify_connected+0x74>)
   1355e:	46b0      	mov	r8, r6
   13560:	42b5      	cmp	r5, r6
   13562:	d90e      	bls.n	13582 <notify_connected+0x36>
   13564:	4917      	ldr	r1, [pc, #92]	; (135c4 <notify_connected+0x78>)
   13566:	4818      	ldr	r0, [pc, #96]	; (135c8 <notify_connected+0x7c>)
   13568:	f240 43fd 	movw	r3, #1277	; 0x4fd
   1356c:	463a      	mov	r2, r7
   1356e:	f009 fa18 	bl	1c9a2 <printk>
   13572:	4816      	ldr	r0, [pc, #88]	; (135cc <notify_connected+0x80>)
   13574:	f009 fa15 	bl	1c9a2 <printk>
   13578:	f240 41fd 	movw	r1, #1277	; 0x4fd
   1357c:	4638      	mov	r0, r7
   1357e:	f009 fc6a 	bl	1ce56 <assert_post_action>
   13582:	4545      	cmp	r5, r8
   13584:	d30d      	bcc.n	135a2 <notify_connected+0x56>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   13586:	7a63      	ldrb	r3, [r4, #9]
   13588:	b993      	cbnz	r3, 135b0 <notify_connected+0x64>
		bt_gatt_connected(conn);
   1358a:	4620      	mov	r0, r4
	}
}
   1358c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_gatt_connected(conn);
   13590:	f002 bb4e 	b.w	15c30 <bt_gatt_connected>
		if (cb->connected) {
   13594:	682b      	ldr	r3, [r5, #0]
   13596:	b113      	cbz	r3, 1359e <notify_connected+0x52>
			cb->connected(conn, conn->err);
   13598:	7a61      	ldrb	r1, [r4, #9]
   1359a:	4620      	mov	r0, r4
   1359c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1359e:	692d      	ldr	r5, [r5, #16]
   135a0:	e7d9      	b.n	13556 <notify_connected+0xa>
		if (cb->connected) {
   135a2:	682b      	ldr	r3, [r5, #0]
   135a4:	b113      	cbz	r3, 135ac <notify_connected+0x60>
			cb->connected(conn, conn->err);
   135a6:	7a61      	ldrb	r1, [r4, #9]
   135a8:	4620      	mov	r0, r4
   135aa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   135ac:	3514      	adds	r5, #20
   135ae:	e7d7      	b.n	13560 <notify_connected+0x14>
}
   135b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   135b4:	20001c30 	.word	0x20001c30
   135b8:	0001f884 	.word	0x0001f884
   135bc:	0001f884 	.word	0x0001f884
   135c0:	00020921 	.word	0x00020921
   135c4:	00020951 	.word	0x00020951
   135c8:	0001feb5 	.word	0x0001feb5
   135cc:	0002096c 	.word	0x0002096c

000135d0 <send_frag>:
{
   135d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   135d4:	694d      	ldr	r5, [r1, #20]
{
   135d6:	4604      	mov	r4, r0
   135d8:	460e      	mov	r6, r1
   135da:	4691      	mov	r9, r2
   135dc:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   135de:	f04f 33ff 	mov.w	r3, #4294967295
   135e2:	4847      	ldr	r0, [pc, #284]	; (13700 <send_frag+0x130>)
   135e4:	f04f 32ff 	mov.w	r2, #4294967295
   135e8:	f006 fabc 	bl	19b64 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   135ec:	7aa3      	ldrb	r3, [r4, #10]
   135ee:	2b07      	cmp	r3, #7
   135f0:	d146      	bne.n	13680 <send_frag+0xb0>
	__asm__ volatile(
   135f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   135f6:	f3ef 8211 	mrs	r2, BASEPRI
   135fa:	f383 8812 	msr	BASEPRI_MAX, r3
   135fe:	f3bf 8f6f 	isb	sy
	if (tx) {
   13602:	2d00      	cmp	r5, #0
   13604:	d04e      	beq.n	136a4 <send_frag+0xd4>
	parent->next = child;
   13606:	2300      	movs	r3, #0
   13608:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   1360a:	69a3      	ldr	r3, [r4, #24]
   1360c:	2b00      	cmp	r3, #0
   1360e:	d146      	bne.n	1369e <send_frag+0xce>
	list->head = node;
   13610:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   13614:	f382 8811 	msr	BASEPRI, r2
   13618:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1361c:	2104      	movs	r1, #4
   1361e:	f106 0008 	add.w	r0, r6, #8
   13622:	f002 fe5d 	bl	162e0 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   13626:	8823      	ldrh	r3, [r4, #0]
   13628:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   1362c:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   13630:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   13632:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   13636:	3b04      	subs	r3, #4
   13638:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1363a:	2302      	movs	r3, #2
   1363c:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   1363e:	4630      	mov	r0, r6
   13640:	f7ff f850 	bl	126e4 <bt_send>
	if (err) {
   13644:	2800      	cmp	r0, #0
   13646:	d058      	beq.n	136fa <send_frag+0x12a>
	__asm__ volatile(
   13648:	f04f 0340 	mov.w	r3, #64	; 0x40
   1364c:	f3ef 8911 	mrs	r9, BASEPRI
   13650:	f383 8812 	msr	BASEPRI_MAX, r3
   13654:	f3bf 8f6f 	isb	sy
		if (tx) {
   13658:	2d00      	cmp	r5, #0
   1365a:	d039      	beq.n	136d0 <send_frag+0x100>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1365c:	6963      	ldr	r3, [r4, #20]
   1365e:	2200      	movs	r2, #0
   13660:	b153      	cbz	r3, 13678 <send_frag+0xa8>
   13662:	429d      	cmp	r5, r3
   13664:	d131      	bne.n	136ca <send_frag+0xfa>
Z_GENLIST_REMOVE(slist, snode)
   13666:	682b      	ldr	r3, [r5, #0]
   13668:	bb4a      	cbnz	r2, 136be <send_frag+0xee>
   1366a:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   1366c:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   1366e:	4295      	cmp	r5, r2
   13670:	d100      	bne.n	13674 <send_frag+0xa4>
	list->tail = node;
   13672:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   13674:	2300      	movs	r3, #0
   13676:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   13678:	f389 8811 	msr	BASEPRI, r9
   1367c:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   13680:	481f      	ldr	r0, [pc, #124]	; (13700 <send_frag+0x130>)
   13682:	f006 fa2b 	bl	19adc <z_impl_k_sem_give>
	if (tx) {
   13686:	b115      	cbz	r5, 1368e <send_frag+0xbe>
		tx_free(tx);
   13688:	4628      	mov	r0, r5
   1368a:	f7ff ff55 	bl	13538 <tx_free>
	if (always_consume) {
   1368e:	b11f      	cbz	r7, 13698 <send_frag+0xc8>
		net_buf_unref(buf);
   13690:	4630      	mov	r0, r6
   13692:	f002 fd59 	bl	16148 <net_buf_unref>
	return false;
   13696:	2700      	movs	r7, #0
}
   13698:	4638      	mov	r0, r7
   1369a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1369e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   136a0:	61a5      	str	r5, [r4, #24]
}
   136a2:	e7b7      	b.n	13614 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   136a4:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   136a6:	b133      	cbz	r3, 136b6 <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
   136a8:	f103 080c 	add.w	r8, r3, #12
   136ac:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   136ae:	3301      	adds	r3, #1
   136b0:	f8c8 3000 	str.w	r3, [r8]
   136b4:	e7ae      	b.n	13614 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   136b6:	69e3      	ldr	r3, [r4, #28]
   136b8:	f104 081c 	add.w	r8, r4, #28
   136bc:	e7f7      	b.n	136ae <send_frag+0xde>
	parent->next = child;
   136be:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   136c0:	69a3      	ldr	r3, [r4, #24]
   136c2:	429d      	cmp	r5, r3
	list->tail = node;
   136c4:	bf08      	it	eq
   136c6:	61a2      	streq	r2, [r4, #24]
}
   136c8:	e7d4      	b.n	13674 <send_frag+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   136ca:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   136cc:	681b      	ldr	r3, [r3, #0]
   136ce:	e7c7      	b.n	13660 <send_frag+0x90>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   136d0:	f8d8 3000 	ldr.w	r3, [r8]
   136d4:	b95b      	cbnz	r3, 136ee <send_frag+0x11e>
   136d6:	490b      	ldr	r1, [pc, #44]	; (13704 <send_frag+0x134>)
   136d8:	480b      	ldr	r0, [pc, #44]	; (13708 <send_frag+0x138>)
   136da:	4a0c      	ldr	r2, [pc, #48]	; (1370c <send_frag+0x13c>)
   136dc:	f240 2307 	movw	r3, #519	; 0x207
   136e0:	f009 f95f 	bl	1c9a2 <printk>
   136e4:	4809      	ldr	r0, [pc, #36]	; (1370c <send_frag+0x13c>)
   136e6:	f240 2107 	movw	r1, #519	; 0x207
   136ea:	f009 fbb4 	bl	1ce56 <assert_post_action>
			(*pending_no_cb)--;
   136ee:	f8d8 3000 	ldr.w	r3, [r8]
   136f2:	3b01      	subs	r3, #1
   136f4:	f8c8 3000 	str.w	r3, [r8]
   136f8:	e7be      	b.n	13678 <send_frag+0xa8>
	return true;
   136fa:	2701      	movs	r7, #1
   136fc:	e7cc      	b.n	13698 <send_frag+0xc8>
   136fe:	bf00      	nop
   13700:	200003a0 	.word	0x200003a0
   13704:	0002098b 	.word	0x0002098b
   13708:	0001feb5 	.word	0x0001feb5
   1370c:	00020921 	.word	0x00020921

00013710 <bt_conn_get_pkts>:
}
   13710:	4800      	ldr	r0, [pc, #0]	; (13714 <bt_conn_get_pkts+0x4>)
   13712:	4770      	bx	lr
   13714:	200003a0 	.word	0x200003a0

00013718 <bt_conn_new>:
{
   13718:	b538      	push	{r3, r4, r5, lr}
   1371a:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1371c:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1371e:	2501      	movs	r5, #1
   13720:	428b      	cmp	r3, r1
   13722:	d102      	bne.n	1372a <bt_conn_new+0x12>
		return NULL;
   13724:	2400      	movs	r4, #0
}
   13726:	4620      	mov	r0, r4
   13728:	bd38      	pop	{r3, r4, r5, pc}
   1372a:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   1372e:	f3bf 8f5b 	dmb	ish
   13732:	e852 0f00 	ldrex	r0, [r2]
   13736:	2800      	cmp	r0, #0
   13738:	d104      	bne.n	13744 <bt_conn_new+0x2c>
   1373a:	e842 5c00 	strex	ip, r5, [r2]
   1373e:	f1bc 0f00 	cmp.w	ip, #0
   13742:	d1f6      	bne.n	13732 <bt_conn_new+0x1a>
   13744:	f3bf 8f5b 	dmb	ish
   13748:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1374c:	d002      	beq.n	13754 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   1374e:	3301      	adds	r3, #1
   13750:	4604      	mov	r4, r0
   13752:	e7e5      	b.n	13720 <bt_conn_new+0x8>
	if (!conn) {
   13754:	2c00      	cmp	r4, #0
   13756:	d0e6      	beq.n	13726 <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   13758:	22c0      	movs	r2, #192	; 0xc0
   1375a:	2100      	movs	r1, #0
   1375c:	4620      	mov	r0, r4
   1375e:	f00b ff36 	bl	1f5ce <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   13762:	f104 0060 	add.w	r0, r4, #96	; 0x60
   13766:	4904      	ldr	r1, [pc, #16]	; (13778 <bt_conn_new+0x60>)
   13768:	f006 fd90 	bl	1a28c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1376c:	4903      	ldr	r1, [pc, #12]	; (1377c <bt_conn_new+0x64>)
   1376e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   13772:	f006 fc87 	bl	1a084 <k_work_init>
	return conn;
   13776:	e7d6      	b.n	13726 <bt_conn_new+0xe>
   13778:	00013f51 	.word	0x00013f51
   1377c:	0001d9a9 	.word	0x0001d9a9

00013780 <conn_cleanup>:
{
   13780:	b570      	push	{r4, r5, r6, lr}
   13782:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   13784:	f100 0638 	add.w	r6, r0, #56	; 0x38
   13788:	2200      	movs	r2, #0
   1378a:	2300      	movs	r3, #0
   1378c:	4630      	mov	r0, r6
   1378e:	f002 fc49 	bl	16024 <net_buf_get>
   13792:	4605      	mov	r5, r0
   13794:	bb48      	cbnz	r0, 137ea <conn_cleanup+0x6a>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   13796:	6963      	ldr	r3, [r4, #20]
   13798:	b173      	cbz	r3, 137b8 <conn_cleanup+0x38>
   1379a:	4918      	ldr	r1, [pc, #96]	; (137fc <conn_cleanup+0x7c>)
   1379c:	4a18      	ldr	r2, [pc, #96]	; (13800 <conn_cleanup+0x80>)
   1379e:	4819      	ldr	r0, [pc, #100]	; (13804 <conn_cleanup+0x84>)
   137a0:	f240 238a 	movw	r3, #650	; 0x28a
   137a4:	f009 f8fd 	bl	1c9a2 <printk>
   137a8:	4817      	ldr	r0, [pc, #92]	; (13808 <conn_cleanup+0x88>)
   137aa:	f009 f8fa 	bl	1c9a2 <printk>
   137ae:	4814      	ldr	r0, [pc, #80]	; (13800 <conn_cleanup+0x80>)
   137b0:	f240 218a 	movw	r1, #650	; 0x28a
   137b4:	f009 fb4f 	bl	1ce56 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   137b8:	69e3      	ldr	r3, [r4, #28]
   137ba:	b15b      	cbz	r3, 137d4 <conn_cleanup+0x54>
   137bc:	4913      	ldr	r1, [pc, #76]	; (1380c <conn_cleanup+0x8c>)
   137be:	4811      	ldr	r0, [pc, #68]	; (13804 <conn_cleanup+0x84>)
   137c0:	4a0f      	ldr	r2, [pc, #60]	; (13800 <conn_cleanup+0x80>)
   137c2:	f240 238b 	movw	r3, #651	; 0x28b
   137c6:	f009 f8ec 	bl	1c9a2 <printk>
   137ca:	480d      	ldr	r0, [pc, #52]	; (13800 <conn_cleanup+0x80>)
   137cc:	f240 218b 	movw	r1, #651	; 0x28b
   137d0:	f009 fb41 	bl	1ce56 <assert_post_action>
	bt_conn_reset_rx_state(conn);
   137d4:	4620      	mov	r0, r4
   137d6:	f00a f8ea 	bl	1d9ae <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   137da:	f104 0060 	add.w	r0, r4, #96	; 0x60
   137de:	2200      	movs	r2, #0
}
   137e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   137e4:	2300      	movs	r3, #0
   137e6:	f006 be75 	b.w	1a4d4 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   137ea:	6968      	ldr	r0, [r5, #20]
   137ec:	b108      	cbz	r0, 137f2 <conn_cleanup+0x72>
			tx_free(tx_data(buf)->tx);
   137ee:	f7ff fea3 	bl	13538 <tx_free>
		net_buf_unref(buf);
   137f2:	4628      	mov	r0, r5
   137f4:	f002 fca8 	bl	16148 <net_buf_unref>
   137f8:	e7c6      	b.n	13788 <conn_cleanup+0x8>
   137fa:	bf00      	nop
   137fc:	0002099e 	.word	0x0002099e
   13800:	00020921 	.word	0x00020921
   13804:	0001feb5 	.word	0x0001feb5
   13808:	000209c4 	.word	0x000209c4
   1380c:	000209d9 	.word	0x000209d9

00013810 <bt_conn_send_cb>:
{
   13810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13812:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   13814:	7a83      	ldrb	r3, [r0, #10]
   13816:	2b07      	cmp	r3, #7
{
   13818:	4604      	mov	r4, r0
   1381a:	460d      	mov	r5, r1
   1381c:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1381e:	d114      	bne.n	1384a <bt_conn_send_cb+0x3a>
	if (cb) {
   13820:	b312      	cbz	r2, 13868 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   13822:	f007 ffbb 	bl	1b79c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   13826:	4b13      	ldr	r3, [pc, #76]	; (13874 <bt_conn_send_cb+0x64>)
   13828:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1382a:	4813      	ldr	r0, [pc, #76]	; (13878 <bt_conn_send_cb+0x68>)
   1382c:	bf07      	ittee	eq
   1382e:	2200      	moveq	r2, #0
   13830:	2300      	moveq	r3, #0
   13832:	f04f 32ff 	movne.w	r2, #4294967295
   13836:	f04f 33ff 	movne.w	r3, #4294967295
   1383a:	f006 f8e3 	bl	19a04 <z_impl_k_queue_get>
		if (!tx) {
   1383e:	b1a8      	cbz	r0, 1386c <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   13840:	7aa3      	ldrb	r3, [r4, #10]
   13842:	2b07      	cmp	r3, #7
   13844:	d004      	beq.n	13850 <bt_conn_send_cb+0x40>
			tx_free(tx);
   13846:	f7ff fe77 	bl	13538 <tx_free>
		return -ENOTCONN;
   1384a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1384e:	e00a      	b.n	13866 <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
   13850:	2300      	movs	r3, #0
		tx->user_data = user_data;
   13852:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   13856:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   13858:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   1385a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1385e:	4629      	mov	r1, r5
   13860:	f002 fc3e 	bl	160e0 <net_buf_put>
	return 0;
   13864:	2000      	movs	r0, #0
}
   13866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
   13868:	614a      	str	r2, [r1, #20]
   1386a:	e7f6      	b.n	1385a <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
   1386c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13870:	e7f9      	b.n	13866 <bt_conn_send_cb+0x56>
   13872:	bf00      	nop
   13874:	20001ae0 	.word	0x20001ae0
   13878:	20000624 	.word	0x20000624

0001387c <bt_conn_prepare_events>:
{
   1387c:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   1387e:	4b1b      	ldr	r3, [pc, #108]	; (138ec <bt_conn_prepare_events+0x70>)
   13880:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   13882:	2101      	movs	r1, #1
{
   13884:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
   13886:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   13888:	f008 fe62 	bl	1c550 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   1388c:	4b18      	ldr	r3, [pc, #96]	; (138f0 <bt_conn_prepare_events+0x74>)
   1388e:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
   13892:	f00a f859 	bl	1d948 <atomic_get>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   13896:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
   1389a:	4619      	mov	r1, r3
   1389c:	b908      	cbnz	r0, 138a2 <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
   1389e:	2001      	movs	r0, #1
}
   138a0:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   138a2:	7a9a      	ldrb	r2, [r3, #10]
   138a4:	b99a      	cbnz	r2, 138ce <bt_conn_prepare_events+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   138a6:	f3bf 8f5b 	dmb	ish
   138aa:	1d1a      	adds	r2, r3, #4
   138ac:	e852 0f00 	ldrex	r0, [r2]
   138b0:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
   138b4:	e842 ce00 	strex	lr, ip, [r2]
   138b8:	f1be 0f00 	cmp.w	lr, #0
   138bc:	d1f6      	bne.n	138ac <bt_conn_prepare_events+0x30>
   138be:	f3bf 8f5b 	dmb	ish
   138c2:	0642      	lsls	r2, r0, #25
   138c4:	d503      	bpl.n	138ce <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   138c6:	4618      	mov	r0, r3
   138c8:	f7ff ff5a 	bl	13780 <conn_cleanup>
   138cc:	e7e7      	b.n	1389e <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   138ce:	7a8b      	ldrb	r3, [r1, #10]
   138d0:	2b07      	cmp	r3, #7
   138d2:	d1e4      	bne.n	1389e <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   138d4:	4b07      	ldr	r3, [pc, #28]	; (138f4 <bt_conn_prepare_events+0x78>)
   138d6:	4628      	mov	r0, r5
   138d8:	2200      	movs	r2, #0
   138da:	2104      	movs	r1, #4
   138dc:	f008 fe38 	bl	1c550 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   138e0:	2301      	movs	r3, #1
   138e2:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   138e6:	2002      	movs	r0, #2
	return ev_count;
   138e8:	e7da      	b.n	138a0 <bt_conn_prepare_events+0x24>
   138ea:	bf00      	nop
   138ec:	2000046c 	.word	0x2000046c
   138f0:	20001558 	.word	0x20001558
   138f4:	20001590 	.word	0x20001590

000138f8 <bt_conn_unref>:
{
   138f8:	b508      	push	{r3, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   138fa:	30c0      	adds	r0, #192	; 0xc0
   138fc:	f3bf 8f5b 	dmb	ish
   13900:	e850 3f00 	ldrex	r3, [r0]
   13904:	1e5a      	subs	r2, r3, #1
   13906:	e840 2100 	strex	r1, r2, [r0]
   1390a:	2900      	cmp	r1, #0
   1390c:	d1f8      	bne.n	13900 <bt_conn_unref+0x8>
   1390e:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   13912:	2b00      	cmp	r3, #0
   13914:	dc10      	bgt.n	13938 <bt_conn_unref+0x40>
   13916:	4909      	ldr	r1, [pc, #36]	; (1393c <bt_conn_unref+0x44>)
   13918:	4a09      	ldr	r2, [pc, #36]	; (13940 <bt_conn_unref+0x48>)
   1391a:	480a      	ldr	r0, [pc, #40]	; (13944 <bt_conn_unref+0x4c>)
   1391c:	f240 4346 	movw	r3, #1094	; 0x446
   13920:	f009 f83f 	bl	1c9a2 <printk>
   13924:	4808      	ldr	r0, [pc, #32]	; (13948 <bt_conn_unref+0x50>)
   13926:	f009 f83c 	bl	1c9a2 <printk>
}
   1392a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(old > 0, "Conn reference counter is 0");
   1392e:	4804      	ldr	r0, [pc, #16]	; (13940 <bt_conn_unref+0x48>)
   13930:	f240 4146 	movw	r1, #1094	; 0x446
   13934:	f009 ba8f 	b.w	1ce56 <assert_post_action>
}
   13938:	bd08      	pop	{r3, pc}
   1393a:	bf00      	nop
   1393c:	000209f2 	.word	0x000209f2
   13940:	00020921 	.word	0x00020921
   13944:	0001feb5 	.word	0x0001feb5
   13948:	000209fa 	.word	0x000209fa

0001394c <bt_conn_lookup_handle>:
{
   1394c:	4602      	mov	r2, r0
   1394e:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   13950:	2101      	movs	r1, #1
   13952:	4803      	ldr	r0, [pc, #12]	; (13960 <bt_conn_lookup_handle+0x14>)
   13954:	f00a f89f 	bl	1da96 <conn_lookup_handle>
}
   13958:	2800      	cmp	r0, #0
   1395a:	bf38      	it	cc
   1395c:	2000      	movcc	r0, #0
   1395e:	bd08      	pop	{r3, pc}
   13960:	20001558 	.word	0x20001558

00013964 <bt_conn_set_state>:
{
   13964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   13968:	7a85      	ldrb	r5, [r0, #10]
   1396a:	428d      	cmp	r5, r1
{
   1396c:	4604      	mov	r4, r0
	if (conn->state == state) {
   1396e:	d03e      	beq.n	139ee <bt_conn_set_state+0x8a>
	conn->state = state;
   13970:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   13972:	b155      	cbz	r5, 1398a <bt_conn_set_state+0x26>
   13974:	2d06      	cmp	r5, #6
   13976:	d00e      	beq.n	13996 <bt_conn_set_state+0x32>
	switch (conn->state) {
   13978:	7aa3      	ldrb	r3, [r4, #10]
   1397a:	2b07      	cmp	r3, #7
   1397c:	d837      	bhi.n	139ee <bt_conn_set_state+0x8a>
   1397e:	e8df f003 	tbb	[pc, r3]
   13982:	1138      	.short	0x1138
   13984:	36363636 	.word	0x36363636
   13988:	2877      	.short	0x2877
		if (conn->type != BT_CONN_TYPE_ISO) {
   1398a:	7883      	ldrb	r3, [r0, #2]
   1398c:	2b08      	cmp	r3, #8
   1398e:	d0f3      	beq.n	13978 <bt_conn_set_state+0x14>
			bt_conn_ref(conn);
   13990:	f00a f866 	bl	1da60 <bt_conn_ref>
   13994:	e7f0      	b.n	13978 <bt_conn_set_state+0x14>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13996:	7883      	ldrb	r3, [r0, #2]
   13998:	2b01      	cmp	r3, #1
   1399a:	d1ed      	bne.n	13978 <bt_conn_set_state+0x14>
			k_work_cancel_delayable(&conn->deferred_work);
   1399c:	3060      	adds	r0, #96	; 0x60
   1399e:	f006 fd9f 	bl	1a4e0 <k_work_cancel_delayable>
   139a2:	e7e9      	b.n	13978 <bt_conn_set_state+0x14>
	z_impl_k_sem_give(sem);
   139a4:	4d51      	ldr	r5, [pc, #324]	; (13aec <bt_conn_set_state+0x188>)
		tx->pending_no_cb = 0U;
   139a6:	2600      	movs	r6, #0
	__asm__ volatile(
   139a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   139ac:	f3ef 8211 	mrs	r2, BASEPRI
   139b0:	f383 8812 	msr	BASEPRI_MAX, r3
   139b4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   139b8:	69e3      	ldr	r3, [r4, #28]
   139ba:	2b00      	cmp	r3, #0
   139bc:	d075      	beq.n	13aaa <bt_conn_set_state+0x146>
			conn->pending_no_cb--;
   139be:	3b01      	subs	r3, #1
   139c0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   139c2:	f382 8811 	msr	BASEPRI, r2
   139c6:	f3bf 8f6f 	isb	sy
   139ca:	4628      	mov	r0, r5
   139cc:	f006 f886 	bl	19adc <z_impl_k_sem_give>
}
   139d0:	e7ea      	b.n	139a8 <bt_conn_set_state+0x44>
		if (conn->type == BT_CONN_TYPE_SCO) {
   139d2:	78a3      	ldrb	r3, [r4, #2]
   139d4:	2b04      	cmp	r3, #4
   139d6:	d00a      	beq.n	139ee <bt_conn_set_state+0x8a>
	z_impl_k_queue_init(queue);
   139d8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   139dc:	f00b fc99 	bl	1f312 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   139e0:	4843      	ldr	r0, [pc, #268]	; (13af0 <bt_conn_set_state+0x18c>)
   139e2:	2100      	movs	r1, #0
   139e4:	f008 ff10 	bl	1c808 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   139e8:	2300      	movs	r3, #0
	list->tail = NULL;
   139ea:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
}
   139ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   139f2:	78a3      	ldrb	r3, [r4, #2]
   139f4:	2b04      	cmp	r3, #4
   139f6:	d104      	bne.n	13a02 <bt_conn_set_state+0x9e>
			bt_conn_unref(conn);
   139f8:	4620      	mov	r0, r4
}
   139fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
   139fe:	f7ff bf7b 	b.w	138f8 <bt_conn_unref>
		switch (old_state) {
   13a02:	3d01      	subs	r5, #1
   13a04:	2d05      	cmp	r5, #5
   13a06:	d8f2      	bhi.n	139ee <bt_conn_set_state+0x8a>
   13a08:	a301      	add	r3, pc, #4	; (adr r3, 13a10 <bt_conn_set_state+0xac>)
   13a0a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   13a0e:	bf00      	nop
   13a10:	00013a29 	.word	0x00013a29
   13a14:	00013a63 	.word	0x00013a63
   13a18:	000139f9 	.word	0x000139f9
   13a1c:	000139f9 	.word	0x000139f9
   13a20:	00013a63 	.word	0x00013a63
   13a24:	00013a63 	.word	0x00013a63
			tx_notify(conn);
   13a28:	4620      	mov	r0, r4
   13a2a:	f009 ff9a 	bl	1d962 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   13a2e:	78a3      	ldrb	r3, [r4, #2]
   13a30:	2b01      	cmp	r3, #1
   13a32:	d103      	bne.n	13a3c <bt_conn_set_state+0xd8>
				k_work_cancel_delayable(&conn->deferred_work);
   13a34:	f104 0060 	add.w	r0, r4, #96	; 0x60
   13a38:	f006 fd52 	bl	1a4e0 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13a3c:	f3bf 8f5b 	dmb	ish
   13a40:	3404      	adds	r4, #4
   13a42:	e854 3f00 	ldrex	r3, [r4]
   13a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13a4a:	e844 3200 	strex	r2, r3, [r4]
   13a4e:	2a00      	cmp	r2, #0
   13a50:	d1f7      	bne.n	13a42 <bt_conn_set_state+0xde>
   13a52:	f3bf 8f5b 	dmb	ish
   13a56:	4826      	ldr	r0, [pc, #152]	; (13af0 <bt_conn_set_state+0x18c>)
}
   13a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13a5c:	2100      	movs	r1, #0
   13a5e:	f008 bed3 	b.w	1c808 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   13a62:	7a63      	ldrb	r3, [r4, #9]
   13a64:	2b00      	cmp	r3, #0
   13a66:	d0c7      	beq.n	139f8 <bt_conn_set_state+0x94>
				notify_connected(conn);
   13a68:	4620      	mov	r0, r4
   13a6a:	f7ff fd6f 	bl	1354c <notify_connected>
   13a6e:	e7c3      	b.n	139f8 <bt_conn_set_state+0x94>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13a70:	78a3      	ldrb	r3, [r4, #2]
   13a72:	2b01      	cmp	r3, #1
   13a74:	d1bb      	bne.n	139ee <bt_conn_set_state+0x8a>
					K_MSEC(10 * bt_dev.create_param.timeout));
   13a76:	4b1f      	ldr	r3, [pc, #124]	; (13af4 <bt_conn_set_state+0x190>)
   13a78:	8a9b      	ldrh	r3, [r3, #20]
   13a7a:	210a      	movs	r1, #10
   13a7c:	4359      	muls	r1, r3
		} else {
			return (t * to_hz + off) / from_hz;
   13a7e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   13a82:	f240 36e7 	movw	r6, #999	; 0x3e7
   13a86:	2700      	movs	r7, #0
   13a88:	fbc0 6701 	smlal	r6, r7, r0, r1
   13a8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13a90:	2300      	movs	r3, #0
   13a92:	4630      	mov	r0, r6
   13a94:	4639      	mov	r1, r7
   13a96:	f7ec fb21 	bl	dc <__aeabi_uldivmod>
   13a9a:	4602      	mov	r2, r0
   13a9c:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   13a9e:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   13aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_schedule(&conn->deferred_work,
   13aa6:	f006 bc99 	b.w	1a3dc <k_work_schedule>
Z_GENLIST_IS_EMPTY(slist)
   13aaa:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   13aac:	b128      	cbz	r0, 13aba <bt_conn_set_state+0x156>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13aae:	69a1      	ldr	r1, [r4, #24]
   13ab0:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   13ab2:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13ab4:	4288      	cmp	r0, r1
	list->tail = node;
   13ab6:	bf08      	it	eq
   13ab8:	61a3      	streq	r3, [r4, #24]
   13aba:	f382 8811 	msr	BASEPRI, r2
   13abe:	f3bf 8f6f 	isb	sy
		if (!node) {
   13ac2:	2800      	cmp	r0, #0
   13ac4:	d093      	beq.n	139ee <bt_conn_set_state+0x8a>
	__asm__ volatile(
   13ac6:	f04f 0240 	mov.w	r2, #64	; 0x40
   13aca:	f3ef 8311 	mrs	r3, BASEPRI
   13ace:	f382 8812 	msr	BASEPRI_MAX, r2
   13ad2:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   13ad6:	68c2      	ldr	r2, [r0, #12]
   13ad8:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   13ada:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   13adc:	f383 8811 	msr	BASEPRI, r3
   13ae0:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   13ae4:	f7ff fd28 	bl	13538 <tx_free>
   13ae8:	e76f      	b.n	139ca <bt_conn_set_state+0x66>
   13aea:	bf00      	nop
   13aec:	200003a0 	.word	0x200003a0
   13af0:	2000046c 	.word	0x2000046c
   13af4:	200002a0 	.word	0x200002a0

00013af8 <bt_conn_index>:
		index = conn - acl_conns;
   13af8:	4a0c      	ldr	r2, [pc, #48]	; (13b2c <bt_conn_index+0x34>)
{
   13afa:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   13afc:	1a84      	subs	r4, r0, r2
   13afe:	10e3      	asrs	r3, r4, #3
   13b00:	4c0b      	ldr	r4, [pc, #44]	; (13b30 <bt_conn_index+0x38>)
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   13b02:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   13b04:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   13b08:	d00e      	beq.n	13b28 <bt_conn_index+0x30>
   13b0a:	490a      	ldr	r1, [pc, #40]	; (13b34 <bt_conn_index+0x3c>)
   13b0c:	4a0a      	ldr	r2, [pc, #40]	; (13b38 <bt_conn_index+0x40>)
   13b0e:	480b      	ldr	r0, [pc, #44]	; (13b3c <bt_conn_index+0x44>)
   13b10:	f240 4364 	movw	r3, #1124	; 0x464
   13b14:	f008 ff45 	bl	1c9a2 <printk>
   13b18:	4809      	ldr	r0, [pc, #36]	; (13b40 <bt_conn_index+0x48>)
   13b1a:	f008 ff42 	bl	1c9a2 <printk>
   13b1e:	4806      	ldr	r0, [pc, #24]	; (13b38 <bt_conn_index+0x40>)
   13b20:	f240 4164 	movw	r1, #1124	; 0x464
   13b24:	f009 f997 	bl	1ce56 <assert_post_action>
}
   13b28:	b2e0      	uxtb	r0, r4
   13b2a:	bd10      	pop	{r4, pc}
   13b2c:	20001558 	.word	0x20001558
   13b30:	c28f5c29 	.word	0xc28f5c29
   13b34:	00020a18 	.word	0x00020a18
   13b38:	00020921 	.word	0x00020921
   13b3c:	0001feb5 	.word	0x0001feb5
   13b40:	00020adf 	.word	0x00020adf

00013b44 <bt_conn_create_pdu_timeout>:
{
   13b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b46:	4604      	mov	r4, r0
   13b48:	460d      	mov	r5, r1
   13b4a:	4617      	mov	r7, r2
   13b4c:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   13b4e:	f00b fbc2 	bl	1f2d6 <k_is_in_isr>
   13b52:	b158      	cbz	r0, 13b6c <bt_conn_create_pdu_timeout+0x28>
   13b54:	490d      	ldr	r1, [pc, #52]	; (13b8c <bt_conn_create_pdu_timeout+0x48>)
   13b56:	480e      	ldr	r0, [pc, #56]	; (13b90 <bt_conn_create_pdu_timeout+0x4c>)
   13b58:	4a0e      	ldr	r2, [pc, #56]	; (13b94 <bt_conn_create_pdu_timeout+0x50>)
   13b5a:	f44f 6390 	mov.w	r3, #1152	; 0x480
   13b5e:	f008 ff20 	bl	1c9a2 <printk>
   13b62:	480c      	ldr	r0, [pc, #48]	; (13b94 <bt_conn_create_pdu_timeout+0x50>)
   13b64:	f44f 6190 	mov.w	r1, #1152	; 0x480
   13b68:	f009 f975 	bl	1ce56 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   13b6c:	480a      	ldr	r0, [pc, #40]	; (13b98 <bt_conn_create_pdu_timeout+0x54>)
   13b6e:	463a      	mov	r2, r7
   13b70:	2c00      	cmp	r4, #0
   13b72:	bf18      	it	ne
   13b74:	4620      	movne	r0, r4
   13b76:	4633      	mov	r3, r6
   13b78:	f00b fa12 	bl	1efa0 <net_buf_alloc_fixed>
	if (!buf) {
   13b7c:	4604      	mov	r4, r0
   13b7e:	b118      	cbz	r0, 13b88 <bt_conn_create_pdu_timeout+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
   13b80:	1d29      	adds	r1, r5, #4
   13b82:	3008      	adds	r0, #8
   13b84:	f002 fa82 	bl	1608c <net_buf_simple_reserve>
}
   13b88:	4620      	mov	r0, r4
   13b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13b8c:	00020af9 	.word	0x00020af9
   13b90:	0001feb5 	.word	0x0001feb5
   13b94:	00020921 	.word	0x00020921
   13b98:	20000640 	.word	0x20000640

00013b9c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   13b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   13ba0:	1d03      	adds	r3, r0, #4
{
   13ba2:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13ba4:	4618      	mov	r0, r3
   13ba6:	f009 fecf 	bl	1d948 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   13baa:	0582      	lsls	r2, r0, #22
   13bac:	d519      	bpl.n	13be2 <notify_le_param_updated+0x46>
	    conn->le.interval >= conn->le.interval_min &&
   13bae:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   13bb2:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
   13bb6:	4291      	cmp	r1, r2
   13bb8:	d813      	bhi.n	13be2 <notify_le_param_updated+0x46>
	    conn->le.interval >= conn->le.interval_min &&
   13bba:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   13bbe:	4291      	cmp	r1, r2
   13bc0:	d30f      	bcc.n	13be2 <notify_le_param_updated+0x46>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   13bc2:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
   13bc6:	4291      	cmp	r1, r2
   13bc8:	d10b      	bne.n	13be2 <notify_le_param_updated+0x46>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13bca:	f3bf 8f5b 	dmb	ish
   13bce:	e853 2f00 	ldrex	r2, [r3]
   13bd2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   13bd6:	e843 2100 	strex	r1, r2, [r3]
   13bda:	2900      	cmp	r1, #0
   13bdc:	d1f7      	bne.n	13bce <notify_le_param_updated+0x32>
   13bde:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   13be2:	4b1b      	ldr	r3, [pc, #108]	; (13c50 <notify_le_param_updated+0xb4>)
   13be4:	681d      	ldr	r5, [r3, #0]
   13be6:	b9c5      	cbnz	r5, 13c1a <notify_le_param_updated+0x7e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13be8:	4e1a      	ldr	r6, [pc, #104]	; (13c54 <notify_le_param_updated+0xb8>)
   13bea:	4d1b      	ldr	r5, [pc, #108]	; (13c58 <notify_le_param_updated+0xbc>)
   13bec:	4f1b      	ldr	r7, [pc, #108]	; (13c5c <notify_le_param_updated+0xc0>)
   13bee:	46b1      	mov	r9, r6
   13bf0:	42b5      	cmp	r5, r6
   13bf2:	d90e      	bls.n	13c12 <notify_le_param_updated+0x76>
   13bf4:	491a      	ldr	r1, [pc, #104]	; (13c60 <notify_le_param_updated+0xc4>)
   13bf6:	481b      	ldr	r0, [pc, #108]	; (13c64 <notify_le_param_updated+0xc8>)
   13bf8:	f240 534b 	movw	r3, #1355	; 0x54b
   13bfc:	463a      	mov	r2, r7
   13bfe:	f008 fed0 	bl	1c9a2 <printk>
   13c02:	4819      	ldr	r0, [pc, #100]	; (13c68 <notify_le_param_updated+0xcc>)
   13c04:	f008 fecd 	bl	1c9a2 <printk>
   13c08:	f240 514b 	movw	r1, #1355	; 0x54b
   13c0c:	4638      	mov	r0, r7
   13c0e:	f009 f922 	bl	1ce56 <assert_post_action>
   13c12:	454d      	cmp	r5, r9
   13c14:	d30d      	bcc.n	13c32 <notify_le_param_updated+0x96>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   13c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (cb->le_param_updated) {
   13c1a:	68ee      	ldr	r6, [r5, #12]
   13c1c:	b13e      	cbz	r6, 13c2e <notify_le_param_updated+0x92>
			cb->le_param_updated(conn, conn->le.interval,
   13c1e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   13c22:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   13c26:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   13c2a:	4620      	mov	r0, r4
   13c2c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   13c2e:	692d      	ldr	r5, [r5, #16]
   13c30:	e7d9      	b.n	13be6 <notify_le_param_updated+0x4a>
		if (cb->le_param_updated) {
   13c32:	f8d5 800c 	ldr.w	r8, [r5, #12]
   13c36:	f1b8 0f00 	cmp.w	r8, #0
   13c3a:	d007      	beq.n	13c4c <notify_le_param_updated+0xb0>
			cb->le_param_updated(conn, conn->le.interval,
   13c3c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   13c40:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   13c44:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   13c48:	4620      	mov	r0, r4
   13c4a:	47c0      	blx	r8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13c4c:	3514      	adds	r5, #20
   13c4e:	e7cf      	b.n	13bf0 <notify_le_param_updated+0x54>
   13c50:	20001c30 	.word	0x20001c30
   13c54:	0001f884 	.word	0x0001f884
   13c58:	0001f884 	.word	0x0001f884
   13c5c:	00020921 	.word	0x00020921
   13c60:	00020951 	.word	0x00020951
   13c64:	0001feb5 	.word	0x0001feb5
   13c68:	0002096c 	.word	0x0002096c

00013c6c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   13c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13c70:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   13c72:	4608      	mov	r0, r1
{
   13c74:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   13c76:	f009 fca7 	bl	1d5c8 <bt_le_conn_params_valid>
   13c7a:	4605      	mov	r5, r0
   13c7c:	b918      	cbnz	r0, 13c86 <le_param_req+0x1a>
		return false;
   13c7e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   13c80:	4628      	mov	r0, r5
   13c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   13c86:	4b1d      	ldr	r3, [pc, #116]	; (13cfc <le_param_req+0x90>)
   13c88:	681e      	ldr	r6, [r3, #0]
   13c8a:	b9e6      	cbnz	r6, 13cc6 <le_param_req+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13c8c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 13d10 <le_param_req+0xa4>
   13c90:	4e1b      	ldr	r6, [pc, #108]	; (13d00 <le_param_req+0x94>)
   13c92:	f8df 9080 	ldr.w	r9, [pc, #128]	; 13d14 <le_param_req+0xa8>
   13c96:	46c2      	mov	sl, r8
   13c98:	4546      	cmp	r6, r8
   13c9a:	d90e      	bls.n	13cba <le_param_req+0x4e>
   13c9c:	4919      	ldr	r1, [pc, #100]	; (13d04 <le_param_req+0x98>)
   13c9e:	481a      	ldr	r0, [pc, #104]	; (13d08 <le_param_req+0x9c>)
   13ca0:	f240 5393 	movw	r3, #1427	; 0x593
   13ca4:	464a      	mov	r2, r9
   13ca6:	f008 fe7c 	bl	1c9a2 <printk>
   13caa:	4818      	ldr	r0, [pc, #96]	; (13d0c <le_param_req+0xa0>)
   13cac:	f008 fe79 	bl	1c9a2 <printk>
   13cb0:	f240 5193 	movw	r1, #1427	; 0x593
   13cb4:	4648      	mov	r0, r9
   13cb6:	f009 f8ce 	bl	1ce56 <assert_post_action>
   13cba:	4556      	cmp	r6, sl
   13cbc:	d2e0      	bcs.n	13c80 <le_param_req+0x14>
		if (!cb->le_param_req) {
   13cbe:	68b3      	ldr	r3, [r6, #8]
   13cc0:	b983      	cbnz	r3, 13ce4 <le_param_req+0x78>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13cc2:	3614      	adds	r6, #20
   13cc4:	e7e8      	b.n	13c98 <le_param_req+0x2c>
		if (!cb->le_param_req) {
   13cc6:	68b3      	ldr	r3, [r6, #8]
   13cc8:	b90b      	cbnz	r3, 13cce <le_param_req+0x62>
	for (cb = callback_list; cb; cb = cb->_next) {
   13cca:	6936      	ldr	r6, [r6, #16]
   13ccc:	e7dd      	b.n	13c8a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   13cce:	4621      	mov	r1, r4
   13cd0:	4638      	mov	r0, r7
   13cd2:	4798      	blx	r3
   13cd4:	2800      	cmp	r0, #0
   13cd6:	d0d2      	beq.n	13c7e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   13cd8:	4620      	mov	r0, r4
   13cda:	f009 fc75 	bl	1d5c8 <bt_le_conn_params_valid>
   13cde:	2800      	cmp	r0, #0
   13ce0:	d1f3      	bne.n	13cca <le_param_req+0x5e>
   13ce2:	e7cc      	b.n	13c7e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   13ce4:	4621      	mov	r1, r4
   13ce6:	4638      	mov	r0, r7
   13ce8:	4798      	blx	r3
   13cea:	2800      	cmp	r0, #0
   13cec:	d0c7      	beq.n	13c7e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   13cee:	4620      	mov	r0, r4
   13cf0:	f009 fc6a 	bl	1d5c8 <bt_le_conn_params_valid>
   13cf4:	2800      	cmp	r0, #0
   13cf6:	d1e4      	bne.n	13cc2 <le_param_req+0x56>
   13cf8:	e7c1      	b.n	13c7e <le_param_req+0x12>
   13cfa:	bf00      	nop
   13cfc:	20001c30 	.word	0x20001c30
   13d00:	0001f884 	.word	0x0001f884
   13d04:	00020951 	.word	0x00020951
   13d08:	0001feb5 	.word	0x0001feb5
   13d0c:	0002096c 	.word	0x0002096c
   13d10:	0001f884 	.word	0x0001f884
   13d14:	00020921 	.word	0x00020921

00013d18 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   13d18:	b538      	push	{r3, r4, r5, lr}
   13d1a:	4605      	mov	r5, r0
   13d1c:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   13d1e:	4809      	ldr	r0, [pc, #36]	; (13d44 <bt_conn_add_le+0x2c>)
   13d20:	2101      	movs	r1, #1
   13d22:	f7ff fcf9 	bl	13718 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   13d26:	4602      	mov	r2, r0
   13d28:	b148      	cbz	r0, 13d3e <bt_conn_add_le+0x26>
		return NULL;
	}

	conn->id = id;
   13d2a:	7205      	strb	r5, [r0, #8]
	bt_addr_le_copy(&conn->le.dst, peer);
   13d2c:	4621      	mov	r1, r4
   13d2e:	3090      	adds	r0, #144	; 0x90
   13d30:	f009 fe10 	bl	1d954 <bt_addr_le_copy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   13d34:	2301      	movs	r3, #1
   13d36:	7093      	strb	r3, [r2, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   13d38:	4b03      	ldr	r3, [pc, #12]	; (13d48 <bt_conn_add_le+0x30>)
   13d3a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   13d3e:	4610      	mov	r0, r2
   13d40:	bd38      	pop	{r3, r4, r5, pc}
   13d42:	bf00      	nop
   13d44:	20001558 	.word	0x20001558
   13d48:	00280018 	.word	0x00280018

00013d4c <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   13d4c:	b570      	push	{r4, r5, r6, lr}
   13d4e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13d50:	480c      	ldr	r0, [pc, #48]	; (13d84 <bt_conn_lookup_addr_le+0x38>)
{
   13d52:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13d54:	f009 fe84 	bl	1da60 <bt_conn_ref>

		if (!conn) {
   13d58:	4604      	mov	r4, r0
   13d5a:	b128      	cbz	r0, 13d68 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   13d5c:	7883      	ldrb	r3, [r0, #2]
   13d5e:	2b01      	cmp	r3, #1
   13d60:	d004      	beq.n	13d6c <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   13d62:	f7ff fdc9 	bl	138f8 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   13d66:	2400      	movs	r4, #0
}
   13d68:	4620      	mov	r0, r4
   13d6a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   13d6c:	4629      	mov	r1, r5
   13d6e:	4632      	mov	r2, r6
   13d70:	f009 febe 	bl	1daf0 <bt_conn_is_peer_addr_le>
   13d74:	4605      	mov	r5, r0
   13d76:	2800      	cmp	r0, #0
   13d78:	d1f6      	bne.n	13d68 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   13d7a:	4620      	mov	r0, r4
   13d7c:	f7ff fdbc 	bl	138f8 <bt_conn_unref>
	return NULL;
   13d80:	462c      	mov	r4, r5
			continue;
   13d82:	e7f1      	b.n	13d68 <bt_conn_lookup_addr_le+0x1c>
   13d84:	20001558 	.word	0x20001558

00013d88 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   13d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13d8a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13d8c:	480e      	ldr	r0, [pc, #56]	; (13dc8 <bt_conn_lookup_state_le+0x40>)
{
   13d8e:	460e      	mov	r6, r1
   13d90:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13d92:	f009 fe65 	bl	1da60 <bt_conn_ref>

		if (!conn) {
   13d96:	4604      	mov	r4, r0
   13d98:	b1a0      	cbz	r0, 13dc4 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   13d9a:	7883      	ldrb	r3, [r0, #2]
   13d9c:	2b01      	cmp	r3, #1
   13d9e:	d003      	beq.n	13da8 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   13da0:	f7ff fdaa 	bl	138f8 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   13da4:	2400      	movs	r4, #0
			continue;
   13da6:	e00d      	b.n	13dc4 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   13da8:	b136      	cbz	r6, 13db8 <bt_conn_lookup_state_le+0x30>
   13daa:	4632      	mov	r2, r6
   13dac:	4629      	mov	r1, r5
   13dae:	f009 fe9f 	bl	1daf0 <bt_conn_is_peer_addr_le>
   13db2:	b908      	cbnz	r0, 13db8 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   13db4:	4620      	mov	r0, r4
   13db6:	e7f3      	b.n	13da0 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   13db8:	7aa3      	ldrb	r3, [r4, #10]
   13dba:	42bb      	cmp	r3, r7
   13dbc:	d1fa      	bne.n	13db4 <bt_conn_lookup_state_le+0x2c>
   13dbe:	7a23      	ldrb	r3, [r4, #8]
   13dc0:	42ab      	cmp	r3, r5
   13dc2:	d1f7      	bne.n	13db4 <bt_conn_lookup_state_le+0x2c>
}
   13dc4:	4620      	mov	r0, r4
   13dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13dc8:	20001558 	.word	0x20001558

00013dcc <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   13dcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13dd0:	4604      	mov	r4, r0
   13dd2:	4843      	ldr	r0, [pc, #268]	; (13ee0 <bt_conn_le_create+0x114>)
   13dd4:	460e      	mov	r6, r1
   13dd6:	4615      	mov	r5, r2
   13dd8:	461f      	mov	r7, r3
   13dda:	f009 fdb5 	bl	1d948 <atomic_get>
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13dde:	0781      	lsls	r1, r0, #30
   13de0:	d405      	bmi.n	13dee <bt_conn_le_create+0x22>
		return -EAGAIN;
   13de2:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   13de6:	4628      	mov	r0, r5
   13de8:	b002      	add	sp, #8
   13dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   13dee:	4610      	mov	r0, r2
   13df0:	f009 fbea 	bl	1d5c8 <bt_le_conn_params_valid>
   13df4:	b910      	cbnz	r0, 13dfc <bt_conn_le_create+0x30>
		return -EINVAL;
   13df6:	f06f 0515 	mvn.w	r5, #21
   13dfa:	e7f4      	b.n	13de6 <bt_conn_le_create+0x1a>
   13dfc:	4838      	ldr	r0, [pc, #224]	; (13ee0 <bt_conn_le_create+0x114>)
   13dfe:	f009 fda3 	bl	1d948 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   13e02:	0642      	lsls	r2, r0, #25
   13e04:	d4ed      	bmi.n	13de2 <bt_conn_le_create+0x16>
   13e06:	4836      	ldr	r0, [pc, #216]	; (13ee0 <bt_conn_le_create+0x114>)
   13e08:	f009 fd9e 	bl	1d948 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   13e0c:	0503      	lsls	r3, r0, #20
   13e0e:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   13e12:	d45e      	bmi.n	13ed2 <bt_conn_le_create+0x106>
	if (!bt_id_scan_random_addr_check()) {
   13e14:	f009 fd80 	bl	1d918 <bt_id_scan_random_addr_check>
   13e18:	2800      	cmp	r0, #0
   13e1a:	d0ec      	beq.n	13df6 <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   13e1c:	4621      	mov	r1, r4
   13e1e:	4640      	mov	r0, r8
   13e20:	f009 fe86 	bl	1db30 <bt_conn_exists_le>
   13e24:	2800      	cmp	r0, #0
   13e26:	d1e6      	bne.n	13df6 <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   13e28:	7823      	ldrb	r3, [r4, #0]
   13e2a:	3b02      	subs	r3, #2
   13e2c:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&dst, peer);
   13e2e:	4621      	mov	r1, r4
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   13e30:	d846      	bhi.n	13ec0 <bt_conn_le_create+0xf4>
		bt_addr_le_copy(&dst, peer);
   13e32:	4668      	mov	r0, sp
   13e34:	f009 fd8e 	bl	1d954 <bt_addr_le_copy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   13e38:	f89d 3000 	ldrb.w	r3, [sp]
   13e3c:	3b02      	subs	r3, #2
   13e3e:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   13e42:	4669      	mov	r1, sp
   13e44:	2000      	movs	r0, #0
   13e46:	f7ff ff67 	bl	13d18 <bt_conn_add_le>
	if (!conn) {
   13e4a:	4604      	mov	r4, r0
   13e4c:	2800      	cmp	r0, #0
   13e4e:	d043      	beq.n	13ed8 <bt_conn_le_create+0x10c>
	conn->le.interval_min = param->interval_min;
   13e50:	882b      	ldrh	r3, [r5, #0]
   13e52:	f8a0 30a8 	strh.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   13e56:	886b      	ldrh	r3, [r5, #2]
   13e58:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
	conn->le.latency = param->latency;
   13e5c:	88ab      	ldrh	r3, [r5, #4]
   13e5e:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
	conn->le.timeout = param->timeout;
   13e62:	88eb      	ldrh	r3, [r5, #6]
   13e64:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
	bt_dev.create_param = *param;
   13e68:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   13e6c:	4d1d      	ldr	r5, [pc, #116]	; (13ee4 <bt_conn_le_create+0x118>)
   13e6e:	f105 0c08 	add.w	ip, r5, #8
   13e72:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   13e76:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   13e78:	2b00      	cmp	r3, #0
   13e7a:	bf08      	it	eq
   13e7c:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   13e80:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   13e82:	8a2b      	ldrh	r3, [r5, #16]
   13e84:	462a      	mov	r2, r5
	bt_dev.create_param.interval_coded =
   13e86:	b903      	cbnz	r3, 13e8a <bt_conn_le_create+0xbe>
   13e88:	89ab      	ldrh	r3, [r5, #12]
   13e8a:	8213      	strh	r3, [r2, #16]
		(bt_dev.create_param.window_coded != 0) ?
   13e8c:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
   13e8e:	b903      	cbnz	r3, 13e92 <bt_conn_le_create+0xc6>
   13e90:	89d3      	ldrh	r3, [r2, #14]
   13e92:	8253      	strh	r3, [r2, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   13e94:	2106      	movs	r1, #6
   13e96:	4620      	mov	r0, r4
   13e98:	f7ff fd64 	bl	13964 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   13e9c:	4620      	mov	r0, r4
   13e9e:	f009 fb76 	bl	1d58e <bt_le_create_conn>
	if (err) {
   13ea2:	4605      	mov	r5, r0
   13ea4:	b198      	cbz	r0, 13ece <bt_conn_le_create+0x102>
		conn->err = 0;
   13ea6:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13ea8:	4631      	mov	r1, r6
   13eaa:	4620      	mov	r0, r4
		conn->err = 0;
   13eac:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13eae:	f7ff fd59 	bl	13964 <bt_conn_set_state>
		bt_conn_unref(conn);
   13eb2:	4620      	mov	r0, r4
   13eb4:	f7ff fd20 	bl	138f8 <bt_conn_unref>
		bt_le_scan_update(false);
   13eb8:	4630      	mov	r0, r6
   13eba:	f7ff f967 	bl	1318c <bt_le_scan_update>
		return err;
   13ebe:	e792      	b.n	13de6 <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   13ec0:	f009 fd16 	bl	1d8f0 <bt_lookup_id_addr>
   13ec4:	4601      	mov	r1, r0
   13ec6:	4668      	mov	r0, sp
   13ec8:	f009 fd44 	bl	1d954 <bt_addr_le_copy>
   13ecc:	e7b9      	b.n	13e42 <bt_conn_le_create+0x76>
	*ret_conn = conn;
   13ece:	603c      	str	r4, [r7, #0]
	return 0;
   13ed0:	e789      	b.n	13de6 <bt_conn_le_create+0x1a>
		return -EALREADY;
   13ed2:	f06f 0577 	mvn.w	r5, #119	; 0x77
   13ed6:	e786      	b.n	13de6 <bt_conn_le_create+0x1a>
		return -ENOMEM;
   13ed8:	f06f 050b 	mvn.w	r5, #11
   13edc:	e783      	b.n	13de6 <bt_conn_le_create+0x1a>
   13ede:	bf00      	nop
   13ee0:	2000036c 	.word	0x2000036c
   13ee4:	200002a0 	.word	0x200002a0

00013ee8 <send_conn_le_param_update>:
{
   13ee8:	b538      	push	{r3, r4, r5, lr}
   13eea:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   13eec:	4608      	mov	r0, r1
{
   13eee:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   13ef0:	f009 fb6a 	bl	1d5c8 <bt_le_conn_params_valid>
   13ef4:	b338      	cbz	r0, 13f46 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   13ef6:	4b15      	ldr	r3, [pc, #84]	; (13f4c <send_conn_le_param_update+0x64>)
   13ef8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   13efc:	0799      	lsls	r1, r3, #30
   13efe:	d407      	bmi.n	13f10 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   13f00:	78e3      	ldrb	r3, [r4, #3]
   13f02:	b173      	cbz	r3, 13f22 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   13f04:	4629      	mov	r1, r5
   13f06:	4620      	mov	r0, r4
}
   13f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   13f0c:	f000 b9f6 	b.w	142fc <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   13f10:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   13f14:	079a      	lsls	r2, r3, #30
   13f16:	d5f3      	bpl.n	13f00 <send_conn_le_param_update+0x18>
   13f18:	1d20      	adds	r0, r4, #4
   13f1a:	f009 fd15 	bl	1d948 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   13f1e:	0543      	lsls	r3, r0, #21
   13f20:	d4ee      	bmi.n	13f00 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   13f22:	4629      	mov	r1, r5
   13f24:	4620      	mov	r0, r4
   13f26:	f009 fe0b 	bl	1db40 <bt_conn_le_conn_update>
		if (rc == 0) {
   13f2a:	b958      	cbnz	r0, 13f44 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   13f2c:	882b      	ldrh	r3, [r5, #0]
   13f2e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   13f32:	886b      	ldrh	r3, [r5, #2]
   13f34:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   13f38:	88ab      	ldrh	r3, [r5, #4]
   13f3a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   13f3e:	88eb      	ldrh	r3, [r5, #6]
   13f40:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   13f44:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   13f46:	f06f 0015 	mvn.w	r0, #21
   13f4a:	e7fb      	b.n	13f44 <send_conn_le_param_update+0x5c>
   13f4c:	200002a0 	.word	0x200002a0

00013f50 <deferred_work>:
{
   13f50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   13f54:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   13f58:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   13f5a:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   13f5e:	2b00      	cmp	r3, #0
   13f60:	d133      	bne.n	13fca <deferred_work+0x7a>
		bt_l2cap_disconnected(conn);
   13f62:	4630      	mov	r0, r6
   13f64:	f009 fe71 	bl	1dc4a <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   13f68:	4b2f      	ldr	r3, [pc, #188]	; (14028 <deferred_work+0xd8>)
   13f6a:	681d      	ldr	r5, [r3, #0]
   13f6c:	b9ed      	cbnz	r5, 13faa <deferred_work+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13f6e:	4f2f      	ldr	r7, [pc, #188]	; (1402c <deferred_work+0xdc>)
   13f70:	4d2f      	ldr	r5, [pc, #188]	; (14030 <deferred_work+0xe0>)
   13f72:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 14040 <deferred_work+0xf0>
   13f76:	46b9      	mov	r9, r7
   13f78:	42bd      	cmp	r5, r7
   13f7a:	d90e      	bls.n	13f9a <deferred_work+0x4a>
   13f7c:	492d      	ldr	r1, [pc, #180]	; (14034 <deferred_work+0xe4>)
   13f7e:	482e      	ldr	r0, [pc, #184]	; (14038 <deferred_work+0xe8>)
   13f80:	f240 5312 	movw	r3, #1298	; 0x512
   13f84:	4642      	mov	r2, r8
   13f86:	f008 fd0c 	bl	1c9a2 <printk>
   13f8a:	482c      	ldr	r0, [pc, #176]	; (1403c <deferred_work+0xec>)
   13f8c:	f008 fd09 	bl	1c9a2 <printk>
   13f90:	f240 5112 	movw	r1, #1298	; 0x512
   13f94:	4640      	mov	r0, r8
   13f96:	f008 ff5e 	bl	1ce56 <assert_post_action>
   13f9a:	454d      	cmp	r5, r9
   13f9c:	d30d      	bcc.n	13fba <deferred_work+0x6a>
		bt_conn_unref(conn);
   13f9e:	4630      	mov	r0, r6
   13fa0:	f7ff fcaa 	bl	138f8 <bt_conn_unref>
}
   13fa4:	b003      	add	sp, #12
   13fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (cb->disconnected) {
   13faa:	686b      	ldr	r3, [r5, #4]
   13fac:	b11b      	cbz	r3, 13fb6 <deferred_work+0x66>
			cb->disconnected(conn, conn->err);
   13fae:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   13fb2:	4630      	mov	r0, r6
   13fb4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   13fb6:	692d      	ldr	r5, [r5, #16]
   13fb8:	e7d8      	b.n	13f6c <deferred_work+0x1c>
		if (cb->disconnected) {
   13fba:	686b      	ldr	r3, [r5, #4]
   13fbc:	b11b      	cbz	r3, 13fc6 <deferred_work+0x76>
			cb->disconnected(conn, conn->err);
   13fbe:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   13fc2:	4630      	mov	r0, r6
   13fc4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13fc6:	3514      	adds	r5, #20
   13fc8:	e7d6      	b.n	13f78 <deferred_work+0x28>
	if (conn->type != BT_CONN_TYPE_LE) {
   13fca:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   13fce:	2b01      	cmp	r3, #1
   13fd0:	d1e8      	bne.n	13fa4 <deferred_work+0x54>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13fd2:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   13fd6:	b913      	cbnz	r3, 13fde <deferred_work+0x8e>
		bt_le_create_conn_cancel();
   13fd8:	f7fe fb60 	bl	1269c <bt_le_create_conn_cancel>
		return;
   13fdc:	e7e2      	b.n	13fa4 <deferred_work+0x54>
	if (atomic_test_and_clear_bit(conn->flags,
   13fde:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
   13fe2:	f3bf 8f5b 	dmb	ish
   13fe6:	e855 3f00 	ldrex	r3, [r5]
   13fea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   13fee:	e845 2100 	strex	r1, r2, [r5]
   13ff2:	2900      	cmp	r1, #0
   13ff4:	d1f7      	bne.n	13fe6 <deferred_work+0x96>
   13ff6:	f3bf 8f5b 	dmb	ish
   13ffa:	059b      	lsls	r3, r3, #22
   13ffc:	d507      	bpl.n	1400e <deferred_work+0xbe>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   13ffe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   14000:	9300      	str	r3, [sp, #0]
		send_conn_le_param_update(conn, param);
   14002:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   14004:	6d23      	ldr	r3, [r4, #80]	; 0x50
   14006:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   14008:	4630      	mov	r0, r6
   1400a:	f7ff ff6d 	bl	13ee8 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1400e:	f3bf 8f5b 	dmb	ish
   14012:	e855 3f00 	ldrex	r3, [r5]
   14016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1401a:	e845 3200 	strex	r2, r3, [r5]
   1401e:	2a00      	cmp	r2, #0
   14020:	d1f7      	bne.n	14012 <deferred_work+0xc2>
   14022:	f3bf 8f5b 	dmb	ish
   14026:	e7bd      	b.n	13fa4 <deferred_work+0x54>
   14028:	20001c30 	.word	0x20001c30
   1402c:	0001f884 	.word	0x0001f884
   14030:	0001f884 	.word	0x0001f884
   14034:	00020951 	.word	0x00020951
   14038:	0001feb5 	.word	0x0001feb5
   1403c:	0002096c 	.word	0x0002096c
   14040:	00020921 	.word	0x00020921

00014044 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   14044:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   14046:	4801      	ldr	r0, [pc, #4]	; (1404c <bt_conn_create_frag_timeout+0x8>)
   14048:	f7ff bd7c 	b.w	13b44 <bt_conn_create_pdu_timeout>
   1404c:	20000698 	.word	0x20000698

00014050 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   14050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14054:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   14056:	f04f 33ff 	mov.w	r3, #4294967295
   1405a:	f04f 32ff 	mov.w	r2, #4294967295
   1405e:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   14060:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   14062:	f7ff ffef 	bl	14044 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   14066:	7833      	ldrb	r3, [r6, #0]
   14068:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   1406a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1406c:	f04f 0600 	mov.w	r6, #0
   14070:	d005      	beq.n	1407e <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   14072:	f002 f869 	bl	16148 <net_buf_unref>
		return NULL;
   14076:	4635      	mov	r5, r6
}
   14078:	4628      	mov	r0, r5
   1407a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1407e:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   14080:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   14084:	4e0c      	ldr	r6, [pc, #48]	; (140b8 <create_frag.isra.0+0x68>)
   14086:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   14088:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   1408c:	f00a ffa7 	bl	1efde <net_buf_simple_tailroom>
   14090:	4580      	cmp	r8, r0
   14092:	d20c      	bcs.n	140ae <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   14094:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14098:	f854 1f08 	ldr.w	r1, [r4, #8]!
   1409c:	4632      	mov	r2, r6
   1409e:	4638      	mov	r0, r7
   140a0:	f00a ffa5 	bl	1efee <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   140a4:	4631      	mov	r1, r6
   140a6:	4620      	mov	r0, r4
   140a8:	f002 f93c 	bl	16324 <net_buf_simple_pull>
   140ac:	e7e4      	b.n	14078 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   140ae:	4638      	mov	r0, r7
   140b0:	f00a ff95 	bl	1efde <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   140b4:	b286      	uxth	r6, r0
   140b6:	e7ef      	b.n	14098 <create_frag.isra.0+0x48>
   140b8:	200002a0 	.word	0x200002a0

000140bc <bt_conn_process_tx>:
{
   140bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   140be:	7a83      	ldrb	r3, [r0, #10]
{
   140c0:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   140c2:	b993      	cbnz	r3, 140ea <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   140c4:	f3bf 8f5b 	dmb	ish
   140c8:	1d03      	adds	r3, r0, #4
   140ca:	e853 2f00 	ldrex	r2, [r3]
   140ce:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   140d2:	e843 1400 	strex	r4, r1, [r3]
   140d6:	2c00      	cmp	r4, #0
   140d8:	d1f7      	bne.n	140ca <bt_conn_process_tx+0xe>
   140da:	f3bf 8f5b 	dmb	ish
   140de:	0653      	lsls	r3, r2, #25
   140e0:	d503      	bpl.n	140ea <bt_conn_process_tx+0x2e>
}
   140e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   140e6:	f7ff bb4b 	b.w	13780 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   140ea:	2200      	movs	r2, #0
   140ec:	2300      	movs	r3, #0
   140ee:	f105 0038 	add.w	r0, r5, #56	; 0x38
   140f2:	f001 ff97 	bl	16024 <net_buf_get>
	BT_ASSERT(buf);
   140f6:	4604      	mov	r4, r0
   140f8:	b960      	cbnz	r0, 14114 <bt_conn_process_tx+0x58>
   140fa:	4a20      	ldr	r2, [pc, #128]	; (1417c <bt_conn_process_tx+0xc0>)
   140fc:	4920      	ldr	r1, [pc, #128]	; (14180 <bt_conn_process_tx+0xc4>)
   140fe:	4821      	ldr	r0, [pc, #132]	; (14184 <bt_conn_process_tx+0xc8>)
   14100:	f240 23df 	movw	r3, #735	; 0x2df
   14104:	f008 fc4d 	bl	1c9a2 <printk>
   14108:	4040      	eors	r0, r0
   1410a:	f380 8811 	msr	BASEPRI, r0
   1410e:	f04f 0003 	mov.w	r0, #3
   14112:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   14114:	4f1c      	ldr	r7, [pc, #112]	; (14188 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   14116:	89a1      	ldrh	r1, [r4, #12]
   14118:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
   1411c:	4291      	cmp	r1, r2
   1411e:	d807      	bhi.n	14130 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   14120:	2300      	movs	r3, #0
   14122:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   14124:	4621      	mov	r1, r4
   14126:	4628      	mov	r0, r5
   14128:	f7ff fa52 	bl	135d0 <send_frag>
	if (!send_buf(conn, buf)) {
   1412c:	b140      	cbz	r0, 14140 <bt_conn_process_tx+0x84>
}
   1412e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   14130:	f105 060a 	add.w	r6, r5, #10
   14134:	4621      	mov	r1, r4
   14136:	4630      	mov	r0, r6
   14138:	f7ff ff8a 	bl	14050 <create_frag.isra.0>
	if (!frag) {
   1413c:	4601      	mov	r1, r0
   1413e:	b920      	cbnz	r0, 1414a <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   14140:	4620      	mov	r0, r4
}
   14142:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   14146:	f001 bfff 	b.w	16148 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1414a:	2301      	movs	r3, #1
   1414c:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1414e:	4628      	mov	r0, r5
   14150:	f7ff fa3e 	bl	135d0 <send_frag>
   14154:	2800      	cmp	r0, #0
   14156:	d0f3      	beq.n	14140 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   14158:	89a2      	ldrh	r2, [r4, #12]
   1415a:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
   1415e:	429a      	cmp	r2, r3
   14160:	d802      	bhi.n	14168 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   14162:	2300      	movs	r3, #0
   14164:	2203      	movs	r2, #3
   14166:	e7dd      	b.n	14124 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   14168:	4621      	mov	r1, r4
   1416a:	4630      	mov	r0, r6
   1416c:	f7ff ff70 	bl	14050 <create_frag.isra.0>
		if (!frag) {
   14170:	4601      	mov	r1, r0
   14172:	2800      	cmp	r0, #0
   14174:	d0e4      	beq.n	14140 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   14176:	2301      	movs	r3, #1
   14178:	461a      	mov	r2, r3
   1417a:	e7e8      	b.n	1414e <bt_conn_process_tx+0x92>
   1417c:	00020921 	.word	0x00020921
   14180:	000208c3 	.word	0x000208c3
   14184:	0001feb5 	.word	0x0001feb5
   14188:	200002a0 	.word	0x200002a0

0001418c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1418c:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1418e:	4914      	ldr	r1, [pc, #80]	; (141e0 <bt_conn_init+0x54>)
   14190:	4814      	ldr	r0, [pc, #80]	; (141e4 <bt_conn_init+0x58>)
   14192:	f00b f8cb 	bl	1f32c <k_queue_append>
   14196:	4914      	ldr	r1, [pc, #80]	; (141e8 <bt_conn_init+0x5c>)
   14198:	4812      	ldr	r0, [pc, #72]	; (141e4 <bt_conn_init+0x58>)
   1419a:	f00b f8c7 	bl	1f32c <k_queue_append>
   1419e:	4913      	ldr	r1, [pc, #76]	; (141ec <bt_conn_init+0x60>)
   141a0:	4810      	ldr	r0, [pc, #64]	; (141e4 <bt_conn_init+0x58>)
   141a2:	f00b f8c3 	bl	1f32c <k_queue_append>
	}

	bt_att_init();
   141a6:	f00a fa5e 	bl	1e666 <bt_att_init>

	err = bt_smp_init();
   141aa:	f00a fef6 	bl	1ef9a <bt_smp_init>
	if (err) {
   141ae:	4605      	mov	r5, r0
   141b0:	b998      	cbnz	r0, 141da <bt_conn_init+0x4e>
		return err;
	}

	bt_l2cap_init();
   141b2:	f009 fe3c 	bl	1de2e <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   141b6:	480e      	ldr	r0, [pc, #56]	; (141f0 <bt_conn_init+0x64>)
   141b8:	f009 fc52 	bl	1da60 <bt_conn_ref>

			if (!conn) {
   141bc:	4604      	mov	r4, r0
   141be:	b160      	cbz	r0, 141da <bt_conn_init+0x4e>
   141c0:	3004      	adds	r0, #4
   141c2:	f009 fbc1 	bl	1d948 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   141c6:	07c3      	lsls	r3, r0, #31
   141c8:	d504      	bpl.n	141d4 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   141ca:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   141cc:	2102      	movs	r1, #2
   141ce:	4620      	mov	r0, r4
   141d0:	f7ff fbc8 	bl	13964 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   141d4:	4620      	mov	r0, r4
   141d6:	f7ff fb8f 	bl	138f8 <bt_conn_unref>
		}
	}

	return 0;
}
   141da:	4628      	mov	r0, r5
   141dc:	bd38      	pop	{r3, r4, r5, pc}
   141de:	bf00      	nop
   141e0:	20001c34 	.word	0x20001c34
   141e4:	20000624 	.word	0x20000624
   141e8:	20001c44 	.word	0x20001c44
   141ec:	20001c54 	.word	0x20001c54
   141f0:	20001558 	.word	0x20001558

000141f4 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   141f4:	4b04      	ldr	r3, [pc, #16]	; (14208 <l2cap_accept+0x14>)
   141f6:	6818      	ldr	r0, [r3, #0]
   141f8:	b918      	cbnz	r0, 14202 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   141fa:	4a04      	ldr	r2, [pc, #16]	; (1420c <l2cap_accept+0x18>)
   141fc:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   141fe:	600b      	str	r3, [r1, #0]

		return 0;
   14200:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   14202:	f06f 000b 	mvn.w	r0, #11
}
   14206:	4770      	bx	lr
   14208:	20001620 	.word	0x20001620
   1420c:	0001fa5c 	.word	0x0001fa5c

00014210 <bt_l2cap_connected>:
{
   14210:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14214:	4f32      	ldr	r7, [pc, #200]	; (142e0 <bt_l2cap_connected+0xd0>)
   14216:	4e33      	ldr	r6, [pc, #204]	; (142e4 <bt_l2cap_connected+0xd4>)
   14218:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 142f8 <bt_l2cap_connected+0xe8>
{
   1421c:	4604      	mov	r4, r0
   1421e:	46b9      	mov	r9, r7
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14220:	42be      	cmp	r6, r7
   14222:	d90e      	bls.n	14242 <bt_l2cap_connected+0x32>
   14224:	4930      	ldr	r1, [pc, #192]	; (142e8 <bt_l2cap_connected+0xd8>)
   14226:	4831      	ldr	r0, [pc, #196]	; (142ec <bt_l2cap_connected+0xdc>)
   14228:	f240 1365 	movw	r3, #357	; 0x165
   1422c:	4642      	mov	r2, r8
   1422e:	f008 fbb8 	bl	1c9a2 <printk>
   14232:	482f      	ldr	r0, [pc, #188]	; (142f0 <bt_l2cap_connected+0xe0>)
   14234:	f008 fbb5 	bl	1c9a2 <printk>
   14238:	f240 1165 	movw	r1, #357	; 0x165
   1423c:	4640      	mov	r0, r8
   1423e:	f008 fe0a 	bl	1ce56 <assert_post_action>
   14242:	454e      	cmp	r6, r9
   14244:	d302      	bcc.n	1424c <bt_l2cap_connected+0x3c>
}
   14246:	b002      	add	sp, #8
   14248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1424c:	6873      	ldr	r3, [r6, #4]
   1424e:	a901      	add	r1, sp, #4
   14250:	4620      	mov	r0, r4
   14252:	4798      	blx	r3
   14254:	2800      	cmp	r0, #0
   14256:	db3d      	blt.n	142d4 <bt_l2cap_connected+0xc4>
		ch = BT_L2CAP_LE_CHAN(chan);
   14258:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   1425a:	8833      	ldrh	r3, [r6, #0]
   1425c:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   14260:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   14264:	4923      	ldr	r1, [pc, #140]	; (142f4 <bt_l2cap_connected+0xe4>)
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   14266:	f8d6 a008 	ldr.w	sl, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1426a:	f105 0010 	add.w	r0, r5, #16
   1426e:	f006 f80d 	bl	1a28c <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14272:	f3bf 8f5b 	dmb	ish
   14276:	f105 0368 	add.w	r3, r5, #104	; 0x68
   1427a:	2200      	movs	r2, #0
   1427c:	e853 1f00 	ldrex	r1, [r3]
   14280:	e843 2000 	strex	r0, r2, [r3]
   14284:	2800      	cmp	r0, #0
   14286:	d1f9      	bne.n	1427c <bt_l2cap_connected+0x6c>
   14288:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   1428c:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   1428e:	6da2      	ldr	r2, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   14290:	f105 0308 	add.w	r3, r5, #8
   14294:	bb02      	cbnz	r2, 142d8 <bt_l2cap_connected+0xc8>
	list->head = node;
   14296:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (chan->ops->connected) {
   1429a:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   1429c:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   1429e:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   142a0:	f8c5 a00c 	str.w	sl, [r5, #12]
		if (chan->ops->connected) {
   142a4:	681b      	ldr	r3, [r3, #0]
   142a6:	b103      	cbz	r3, 142aa <bt_l2cap_connected+0x9a>
			chan->ops->connected(chan);
   142a8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   142aa:	9b01      	ldr	r3, [sp, #4]
   142ac:	f3bf 8f5b 	dmb	ish
   142b0:	3368      	adds	r3, #104	; 0x68
   142b2:	e853 2f00 	ldrex	r2, [r3]
   142b6:	f042 0201 	orr.w	r2, r2, #1
   142ba:	e843 2100 	strex	r1, r2, [r3]
   142be:	2900      	cmp	r1, #0
   142c0:	d1f7      	bne.n	142b2 <bt_l2cap_connected+0xa2>
   142c2:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   142c6:	9801      	ldr	r0, [sp, #4]
   142c8:	6843      	ldr	r3, [r0, #4]
   142ca:	699b      	ldr	r3, [r3, #24]
   142cc:	b113      	cbz	r3, 142d4 <bt_l2cap_connected+0xc4>
			chan->ops->status(chan, chan->status);
   142ce:	f100 0168 	add.w	r1, r0, #104	; 0x68
   142d2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   142d4:	360c      	adds	r6, #12
   142d6:	e7a3      	b.n	14220 <bt_l2cap_connected+0x10>
	parent->next = child;
   142d8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   142da:	65a3      	str	r3, [r4, #88]	; 0x58
}
   142dc:	e7dd      	b.n	1429a <bt_l2cap_connected+0x8a>
   142de:	bf00      	nop
   142e0:	0001f884 	.word	0x0001f884
   142e4:	0001f860 	.word	0x0001f860
   142e8:	00020b39 	.word	0x00020b39
   142ec:	0001feb5 	.word	0x0001feb5
   142f0:	0002096c 	.word	0x0002096c
   142f4:	0001dc33 	.word	0x0001dc33
   142f8:	00020b08 	.word	0x00020b08

000142fc <bt_l2cap_update_conn_param>:
{
   142fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   142fe:	4b17      	ldr	r3, [pc, #92]	; (1435c <bt_l2cap_update_conn_param+0x60>)
   14300:	781a      	ldrb	r2, [r3, #0]
   14302:	3201      	adds	r2, #1
	if (!ident) {
   14304:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   14308:	bf08      	it	eq
   1430a:	2201      	moveq	r2, #1
   1430c:	701a      	strb	r2, [r3, #0]
{
   1430e:	4606      	mov	r6, r0
   14310:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   14312:	2208      	movs	r2, #8
   14314:	7819      	ldrb	r1, [r3, #0]
   14316:	2012      	movs	r0, #18
   14318:	f009 fc3e 	bl	1db98 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1431c:	4604      	mov	r4, r0
   1431e:	b1d0      	cbz	r0, 14356 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   14320:	2108      	movs	r1, #8
   14322:	4408      	add	r0, r1
   14324:	f002 f840 	bl	163a8 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   14328:	882b      	ldrh	r3, [r5, #0]
   1432a:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1432c:	886b      	ldrh	r3, [r5, #2]
   1432e:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   14330:	88ab      	ldrh	r3, [r5, #4]
   14332:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   14334:	88eb      	ldrh	r3, [r5, #6]
   14336:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   14338:	2300      	movs	r3, #0
   1433a:	9300      	str	r3, [sp, #0]
   1433c:	4622      	mov	r2, r4
   1433e:	2105      	movs	r1, #5
   14340:	4630      	mov	r0, r6
   14342:	f009 fc9b 	bl	1dc7c <bt_l2cap_send_cb>
	if (err) {
   14346:	4605      	mov	r5, r0
   14348:	b110      	cbz	r0, 14350 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1434a:	4620      	mov	r0, r4
   1434c:	f001 fefc 	bl	16148 <net_buf_unref>
}
   14350:	4628      	mov	r0, r5
   14352:	b002      	add	sp, #8
   14354:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   14356:	f06f 050b 	mvn.w	r5, #11
   1435a:	e7f9      	b.n	14350 <bt_l2cap_update_conn_param+0x54>
   1435c:	20001f1d 	.word	0x20001f1d

00014360 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   14360:	4b02      	ldr	r3, [pc, #8]	; (1436c <att_cfm_sent+0xc>)
   14362:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   14366:	f009 bd90 	b.w	1de8a <att_sent>
   1436a:	bf00      	nop
   1436c:	0001e36f 	.word	0x0001e36f

00014370 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   14370:	4b02      	ldr	r3, [pc, #8]	; (1437c <att_rsp_sent+0xc>)
   14372:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   14376:	f009 bd88 	b.w	1de8a <att_sent>
   1437a:	bf00      	nop
   1437c:	0001e38b 	.word	0x0001e38b

00014380 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   14380:	4b02      	ldr	r3, [pc, #8]	; (1438c <att_req_sent+0xc>)
   14382:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   14386:	f009 bd80 	b.w	1de8a <att_sent>
   1438a:	bf00      	nop
   1438c:	0001e2b3 	.word	0x0001e2b3

00014390 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   14390:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   14392:	3808      	subs	r0, #8
   14394:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   14396:	a901      	add	r1, sp, #4
   14398:	4802      	ldr	r0, [pc, #8]	; (143a4 <bt_att_released+0x14>)
   1439a:	f004 fe7b 	bl	19094 <k_mem_slab_free>
}
   1439e:	b003      	add	sp, #12
   143a0:	f85d fb04 	ldr.w	pc, [sp], #4
   143a4:	2000058c 	.word	0x2000058c

000143a8 <read_group_cb>:
{
   143a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   143ac:	4606      	mov	r6, r0
   143ae:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   143b0:	f04f 0800 	mov.w	r8, #0
   143b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   143b8:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   143ba:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   143bc:	f88d 8008 	strb.w	r8, [sp, #8]
   143c0:	a902      	add	r1, sp, #8
{
   143c2:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   143c4:	f8ad 300a 	strh.w	r3, [sp, #10]
   143c8:	f008 ff5b 	bl	1d282 <bt_uuid_cmp>
   143cc:	b1a0      	cbz	r0, 143f8 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   143ce:	f642 0301 	movw	r3, #10241	; 0x2801
   143d2:	6830      	ldr	r0, [r6, #0]
   143d4:	f88d 800c 	strb.w	r8, [sp, #12]
   143d8:	a903      	add	r1, sp, #12
   143da:	f8ad 300e 	strh.w	r3, [sp, #14]
   143de:	f008 ff50 	bl	1d282 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   143e2:	b148      	cbz	r0, 143f8 <read_group_cb+0x50>
		if (data->group &&
   143e4:	6923      	ldr	r3, [r4, #16]
   143e6:	b11b      	cbz	r3, 143f0 <read_group_cb+0x48>
   143e8:	885a      	ldrh	r2, [r3, #2]
   143ea:	42aa      	cmp	r2, r5
   143ec:	d200      	bcs.n	143f0 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   143ee:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   143f0:	2001      	movs	r0, #1
}
   143f2:	b004      	add	sp, #16
   143f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   143f8:	6861      	ldr	r1, [r4, #4]
   143fa:	6830      	ldr	r0, [r6, #0]
   143fc:	f008 ff41 	bl	1d282 <bt_uuid_cmp>
   14400:	b110      	cbz	r0, 14408 <read_group_cb+0x60>
		data->group = NULL;
   14402:	2300      	movs	r3, #0
   14404:	6123      	str	r3, [r4, #16]
   14406:	e7f3      	b.n	143f0 <read_group_cb+0x48>
	if (data->rsp->len &&
   14408:	68e3      	ldr	r3, [r4, #12]
   1440a:	68a0      	ldr	r0, [r4, #8]
   1440c:	781a      	ldrb	r2, [r3, #0]
   1440e:	b13a      	cbz	r2, 14420 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   14410:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   14414:	8981      	ldrh	r1, [r0, #12]
   14416:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   14418:	4293      	cmp	r3, r2
   1441a:	da01      	bge.n	14420 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   1441c:	2000      	movs	r0, #0
   1441e:	e7e8      	b.n	143f2 <read_group_cb+0x4a>
   14420:	2104      	movs	r1, #4
   14422:	3008      	adds	r0, #8
   14424:	f001 ffc0 	bl	163a8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14428:	4b09      	ldr	r3, [pc, #36]	; (14450 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1442a:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1442c:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1442e:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   14430:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14432:	4631      	mov	r1, r6
   14434:	9300      	str	r3, [sp, #0]
   14436:	9401      	str	r4, [sp, #4]
   14438:	2300      	movs	r3, #0
   1443a:	4638      	mov	r0, r7
   1443c:	f009 fdc9 	bl	1dfd2 <att_chan_read>
	if (read < 0) {
   14440:	2800      	cmp	r0, #0
   14442:	dbeb      	blt.n	1441c <read_group_cb+0x74>
	if (!data->group) {
   14444:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   14446:	3800      	subs	r0, #0
   14448:	bf18      	it	ne
   1444a:	2001      	movne	r0, #1
   1444c:	e7d1      	b.n	143f2 <read_group_cb+0x4a>
   1444e:	bf00      	nop
   14450:	0001e211 	.word	0x0001e211

00014454 <read_type_cb>:
{
   14454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   14458:	f8d2 8000 	ldr.w	r8, [r2]
{
   1445c:	4606      	mov	r6, r0
   1445e:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14460:	6800      	ldr	r0, [r0, #0]
   14462:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   14464:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   14468:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1446a:	f008 ff0a 	bl	1d282 <bt_uuid_cmp>
   1446e:	4607      	mov	r7, r0
   14470:	2800      	cmp	r0, #0
   14472:	d13e      	bne.n	144f2 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   14474:	4628      	mov	r0, r5
   14476:	2215      	movs	r2, #21
   14478:	4631      	mov	r1, r6
   1447a:	f00a fc68 	bl	1ed4e <bt_gatt_check_perm>
   1447e:	4605      	mov	r5, r0
   14480:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   14482:	b148      	cbz	r0, 14498 <read_type_cb+0x44>
		if (data->rsp->len) {
   14484:	68e3      	ldr	r3, [r4, #12]
   14486:	781b      	ldrb	r3, [r3, #0]
   14488:	b923      	cbnz	r3, 14494 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1448a:	2500      	movs	r5, #0
}
   1448c:	4628      	mov	r0, r5
   1448e:	b003      	add	sp, #12
   14490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   14494:	7527      	strb	r7, [r4, #20]
   14496:	e7f8      	b.n	1448a <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   14498:	68a0      	ldr	r0, [r4, #8]
   1449a:	f001 feb5 	bl	16208 <net_buf_frag_last>
   1449e:	2102      	movs	r1, #2
   144a0:	3008      	adds	r0, #8
   144a2:	f001 ff81 	bl	163a8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   144a6:	4b14      	ldr	r3, [pc, #80]	; (144f8 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   144a8:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   144aa:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   144ac:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   144b0:	4631      	mov	r1, r6
   144b2:	9300      	str	r3, [sp, #0]
   144b4:	9401      	str	r4, [sp, #4]
   144b6:	462b      	mov	r3, r5
   144b8:	4640      	mov	r0, r8
   144ba:	f009 fd8a 	bl	1dfd2 <att_chan_read>
	if (read < 0) {
   144be:	2800      	cmp	r0, #0
   144c0:	da07      	bge.n	144d2 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   144c2:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   144c6:	bf26      	itte	cs
   144c8:	4240      	negcs	r0, r0
   144ca:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   144cc:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   144ce:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   144d0:	e7dc      	b.n	1448c <read_type_cb+0x38>
	if (!data->item) {
   144d2:	6923      	ldr	r3, [r4, #16]
   144d4:	2b00      	cmp	r3, #0
   144d6:	d0d8      	beq.n	1448a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   144d8:	68a0      	ldr	r0, [r4, #8]
   144da:	f009 fcce 	bl	1de7a <net_buf_frags_len>
   144de:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   144e2:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   144e4:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   144e6:	7818      	ldrb	r0, [r3, #0]
   144e8:	4285      	cmp	r5, r0
   144ea:	bf94      	ite	ls
   144ec:	2500      	movls	r5, #0
   144ee:	2501      	movhi	r5, #1
   144f0:	e7cc      	b.n	1448c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   144f2:	2501      	movs	r5, #1
   144f4:	e7ca      	b.n	1448c <read_type_cb+0x38>
   144f6:	bf00      	nop
   144f8:	0001de97 	.word	0x0001de97

000144fc <chan_send>:
{
   144fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   14500:	688b      	ldr	r3, [r1, #8]
   14502:	781b      	ldrb	r3, [r3, #0]
   14504:	2bd2      	cmp	r3, #210	; 0xd2
{
   14506:	4606      	mov	r6, r0
   14508:	460c      	mov	r4, r1
   1450a:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1450c:	d10c      	bne.n	14528 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   1450e:	6803      	ldr	r3, [r0, #0]
   14510:	6818      	ldr	r0, [r3, #0]
   14512:	f00a fd3f 	bl	1ef94 <bt_smp_sign>
		if (err) {
   14516:	4605      	mov	r5, r0
   14518:	b130      	cbz	r0, 14528 <chan_send+0x2c>
			net_buf_unref(buf);
   1451a:	4620      	mov	r0, r4
   1451c:	f001 fe14 	bl	16148 <net_buf_unref>
}
   14520:	4628      	mov	r0, r5
   14522:	b003      	add	sp, #12
   14524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   14528:	f104 0008 	add.w	r0, r4, #8
   1452c:	f00a fd53 	bl	1efd6 <net_buf_simple_headroom>
	state->len = buf->len;
   14530:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   14534:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   14536:	b957      	cbnz	r7, 1454e <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
   14538:	68a3      	ldr	r3, [r4, #8]
   1453a:	7818      	ldrb	r0, [r3, #0]
   1453c:	f009 fcbd 	bl	1deba <att_op_get_type>
   14540:	3801      	subs	r0, #1
   14542:	b2c0      	uxtb	r0, r0
   14544:	2804      	cmp	r0, #4
   14546:	bf9c      	itt	ls
   14548:	4b13      	ldrls	r3, [pc, #76]	; (14598 <chan_send+0x9c>)
   1454a:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1454e:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   14550:	f8c6 7150 	str.w	r7, [r6, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   14554:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   14556:	4b11      	ldr	r3, [pc, #68]	; (1459c <chan_send+0xa0>)
   14558:	429f      	cmp	r7, r3
   1455a:	d018      	beq.n	1458e <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
   1455c:	4b10      	ldr	r3, [pc, #64]	; (145a0 <chan_send+0xa4>)
   1455e:	429f      	cmp	r7, r3
   14560:	d017      	beq.n	14592 <chan_send+0x96>
		return att_sent;
   14562:	4910      	ldr	r1, [pc, #64]	; (145a4 <chan_send+0xa8>)
   14564:	4b10      	ldr	r3, [pc, #64]	; (145a8 <chan_send+0xac>)
   14566:	4a11      	ldr	r2, [pc, #68]	; (145ac <chan_send+0xb0>)
   14568:	428f      	cmp	r7, r1
   1456a:	bf18      	it	ne
   1456c:	4613      	movne	r3, r2
			       &chan->chan.chan);
   1456e:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   14570:	9600      	str	r6, [sp, #0]
   14572:	4622      	mov	r2, r4
   14574:	2104      	movs	r1, #4
   14576:	f009 fb81 	bl	1dc7c <bt_l2cap_send_cb>
	if (err) {
   1457a:	4605      	mov	r5, r0
   1457c:	2800      	cmp	r0, #0
   1457e:	d0cf      	beq.n	14520 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   14580:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   14582:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   14586:	fa10 f088 	uxtah	r0, r0, r8
   1458a:	60a0      	str	r0, [r4, #8]
}
   1458c:	e7c8      	b.n	14520 <chan_send+0x24>
		return att_rsp_sent;
   1458e:	4b08      	ldr	r3, [pc, #32]	; (145b0 <chan_send+0xb4>)
   14590:	e7ed      	b.n	1456e <chan_send+0x72>
		return att_cfm_sent;
   14592:	4b08      	ldr	r3, [pc, #32]	; (145b4 <chan_send+0xb8>)
   14594:	e7eb      	b.n	1456e <chan_send+0x72>
   14596:	bf00      	nop
   14598:	0001fa80 	.word	0x0001fa80
   1459c:	0001e38b 	.word	0x0001e38b
   145a0:	0001e36f 	.word	0x0001e36f
   145a4:	0001e2b3 	.word	0x0001e2b3
   145a8:	00014381 	.word	0x00014381
   145ac:	0001de8b 	.word	0x0001de8b
   145b0:	00014371 	.word	0x00014371
   145b4:	00014361 	.word	0x00014361

000145b8 <bt_att_chan_req_send>:
{
   145b8:	b538      	push	{r3, r4, r5, lr}
   145ba:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   145bc:	4604      	mov	r4, r0
   145be:	b958      	cbnz	r0, 145d8 <bt_att_chan_req_send+0x20>
   145c0:	491d      	ldr	r1, [pc, #116]	; (14638 <bt_att_chan_req_send+0x80>)
   145c2:	481e      	ldr	r0, [pc, #120]	; (1463c <bt_att_chan_req_send+0x84>)
   145c4:	4a1e      	ldr	r2, [pc, #120]	; (14640 <bt_att_chan_req_send+0x88>)
   145c6:	f240 2332 	movw	r3, #562	; 0x232
   145ca:	f008 f9ea 	bl	1c9a2 <printk>
   145ce:	481c      	ldr	r0, [pc, #112]	; (14640 <bt_att_chan_req_send+0x88>)
   145d0:	f240 2132 	movw	r1, #562	; 0x232
   145d4:	f008 fc3f 	bl	1ce56 <assert_post_action>
	__ASSERT_NO_MSG(req);
   145d8:	b95d      	cbnz	r5, 145f2 <bt_att_chan_req_send+0x3a>
   145da:	491a      	ldr	r1, [pc, #104]	; (14644 <bt_att_chan_req_send+0x8c>)
   145dc:	4817      	ldr	r0, [pc, #92]	; (1463c <bt_att_chan_req_send+0x84>)
   145de:	4a18      	ldr	r2, [pc, #96]	; (14640 <bt_att_chan_req_send+0x88>)
   145e0:	f240 2333 	movw	r3, #563	; 0x233
   145e4:	f008 f9dd 	bl	1c9a2 <printk>
   145e8:	4815      	ldr	r0, [pc, #84]	; (14640 <bt_att_chan_req_send+0x88>)
   145ea:	f240 2133 	movw	r1, #563	; 0x233
   145ee:	f008 fc32 	bl	1ce56 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   145f2:	686b      	ldr	r3, [r5, #4]
   145f4:	b95b      	cbnz	r3, 1460e <bt_att_chan_req_send+0x56>
   145f6:	4914      	ldr	r1, [pc, #80]	; (14648 <bt_att_chan_req_send+0x90>)
   145f8:	4810      	ldr	r0, [pc, #64]	; (1463c <bt_att_chan_req_send+0x84>)
   145fa:	4a11      	ldr	r2, [pc, #68]	; (14640 <bt_att_chan_req_send+0x88>)
   145fc:	f44f 730d 	mov.w	r3, #564	; 0x234
   14600:	f008 f9cf 	bl	1c9a2 <printk>
   14604:	480e      	ldr	r0, [pc, #56]	; (14640 <bt_att_chan_req_send+0x88>)
   14606:	f44f 710d 	mov.w	r1, #564	; 0x234
   1460a:	f008 fc24 	bl	1ce56 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   1460e:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   14612:	b15b      	cbz	r3, 1462c <bt_att_chan_req_send+0x74>
   14614:	490d      	ldr	r1, [pc, #52]	; (1464c <bt_att_chan_req_send+0x94>)
   14616:	4809      	ldr	r0, [pc, #36]	; (1463c <bt_att_chan_req_send+0x84>)
   14618:	4a09      	ldr	r2, [pc, #36]	; (14640 <bt_att_chan_req_send+0x88>)
   1461a:	f240 2335 	movw	r3, #565	; 0x235
   1461e:	f008 f9c0 	bl	1c9a2 <printk>
   14622:	4807      	ldr	r0, [pc, #28]	; (14640 <bt_att_chan_req_send+0x88>)
   14624:	f240 2135 	movw	r1, #565	; 0x235
   14628:	f008 fc15 	bl	1ce56 <assert_post_action>
	return chan_req_send(chan, req);
   1462c:	4629      	mov	r1, r5
   1462e:	4620      	mov	r0, r4
}
   14630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return chan_req_send(chan, req);
   14634:	f009 bdfc 	b.w	1e230 <chan_req_send>
   14638:	00020b8f 	.word	0x00020b8f
   1463c:	0001feb5 	.word	0x0001feb5
   14640:	00020b60 	.word	0x00020b60
   14644:	00020ba5 	.word	0x00020ba5
   14648:	00020b94 	.word	0x00020b94
   1464c:	00020b9e 	.word	0x00020b9e

00014650 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   14650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   14652:	2300      	movs	r3, #0
{
   14654:	4607      	mov	r7, r0
   14656:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   14658:	481f      	ldr	r0, [pc, #124]	; (146d8 <bt_att_accept+0x88>)
   1465a:	2200      	movs	r2, #0
   1465c:	4669      	mov	r1, sp
   1465e:	f004 fcad 	bl	18fbc <k_mem_slab_alloc>
   14662:	4604      	mov	r4, r0
   14664:	b120      	cbz	r0, 14670 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   14666:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1466a:	4620      	mov	r0, r4
   1466c:	b003      	add	sp, #12
   1466e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14670:	4601      	mov	r1, r0
   14672:	2230      	movs	r2, #48	; 0x30
   14674:	9800      	ldr	r0, [sp, #0]
   14676:	f00a ffaa 	bl	1f5ce <memset>
	att->conn = conn;
   1467a:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1467c:	4817      	ldr	r0, [pc, #92]	; (146dc <bt_att_accept+0x8c>)
	list->tail = NULL;
   1467e:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   14680:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   14684:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   14688:	2200      	movs	r2, #0
   1468a:	2300      	movs	r3, #0
   1468c:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1468e:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   14690:	f004 fc94 	bl	18fbc <k_mem_slab_alloc>
   14694:	4604      	mov	r4, r0
   14696:	2800      	cmp	r0, #0
   14698:	d1e5      	bne.n	14666 <bt_att_accept+0x16>
   1469a:	4601      	mov	r1, r0
   1469c:	f44f 72ac 	mov.w	r2, #344	; 0x158
   146a0:	9801      	ldr	r0, [sp, #4]
   146a2:	f00a ff94 	bl	1f5ce <memset>
	chan->chan.chan.ops = &ops;
   146a6:	9801      	ldr	r0, [sp, #4]
   146a8:	4b0d      	ldr	r3, [pc, #52]	; (146e0 <bt_att_accept+0x90>)
   146aa:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   146ac:	f500 7080 	add.w	r0, r0, #256	; 0x100
   146b0:	f00a fe2f 	bl	1f312 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   146b4:	9b01      	ldr	r3, [sp, #4]
   146b6:	f3bf 8f5b 	dmb	ish
   146ba:	33f8      	adds	r3, #248	; 0xf8
   146bc:	e853 2f00 	ldrex	r2, [r3]
   146c0:	e843 4100 	strex	r1, r4, [r3]
   146c4:	2900      	cmp	r1, #0
   146c6:	d1f9      	bne.n	146bc <bt_att_accept+0x6c>
   146c8:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   146cc:	9b01      	ldr	r3, [sp, #4]
   146ce:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   146d2:	6033      	str	r3, [r6, #0]
	return 0;
   146d4:	e7c9      	b.n	1466a <bt_att_accept+0x1a>
   146d6:	bf00      	nop
   146d8:	2000056c 	.word	0x2000056c
   146dc:	2000058c 	.word	0x2000058c
   146e0:	2000047c 	.word	0x2000047c

000146e4 <bt_att_connected>:
{
   146e4:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   146e6:	2104      	movs	r1, #4
{
   146e8:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   146ea:	6800      	ldr	r0, [r0, #0]
   146ec:	f009 fb64 	bl	1ddb8 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   146f0:	4605      	mov	r5, r0
   146f2:	b970      	cbnz	r0, 14712 <bt_att_connected+0x2e>
   146f4:	491c      	ldr	r1, [pc, #112]	; (14768 <bt_att_connected+0x84>)
   146f6:	4a1d      	ldr	r2, [pc, #116]	; (1476c <bt_att_connected+0x88>)
   146f8:	481d      	ldr	r0, [pc, #116]	; (14770 <bt_att_connected+0x8c>)
   146fa:	f640 2329 	movw	r3, #2601	; 0xa29
   146fe:	f008 f950 	bl	1c9a2 <printk>
   14702:	481c      	ldr	r0, [pc, #112]	; (14774 <bt_att_connected+0x90>)
   14704:	f008 f94d 	bl	1c9a2 <printk>
   14708:	4818      	ldr	r0, [pc, #96]	; (1476c <bt_att_connected+0x88>)
   1470a:	f640 2129 	movw	r1, #2601	; 0xa29
   1470e:	f008 fba2 	bl	1ce56 <assert_post_action>
	struct bt_att *att = att_chan->att;
   14712:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   14716:	6aab      	ldr	r3, [r5, #40]	; 0x28
	att_chan = ATT_CHAN(chan);
   14718:	f1a4 0608 	sub.w	r6, r4, #8
	if (sys_slist_is_empty(&att->chans)) {
   1471c:	b91b      	cbnz	r3, 14726 <bt_att_connected+0x42>
   1471e:	f105 000c 	add.w	r0, r5, #12
   14722:	f00a fdf6 	bl	1f312 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   14726:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	parent->next = child;
   14728:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
Z_GENLIST_PREPEND(slist, snode)
   1472c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   1472e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
	list->head = node;
   14732:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   14734:	b902      	cbnz	r2, 14738 <bt_att_connected+0x54>
	list->tail = node;
   14736:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14738:	f3bf 8f5b 	dmb	ish
   1473c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   14740:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   14744:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   14746:	bf58      	it	pl
   14748:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   1474a:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1474c:	bf5c      	itt	pl
   1474e:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   14752:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   14756:	f009 fbf6 	bl	1df46 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1475a:	f504 708c 	add.w	r0, r4, #280	; 0x118
   1475e:	4906      	ldr	r1, [pc, #24]	; (14778 <bt_att_connected+0x94>)
}
   14760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   14764:	f005 bd92 	b.w	1a28c <k_work_init_delayable>
   14768:	00020b8f 	.word	0x00020b8f
   1476c:	00020b60 	.word	0x00020b60
   14770:	0001feb5 	.word	0x0001feb5
   14774:	00020ba9 	.word	0x00020ba9
   14778:	0001e6d1 	.word	0x0001e6d1

0001477c <att_write_cmd>:
{
   1477c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1477e:	4604      	mov	r4, r0
   14780:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   14782:	f101 0008 	add.w	r0, r1, #8
   14786:	460d      	mov	r5, r1
   14788:	f00a fc1d 	bl	1efc6 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1478c:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1478e:	68af      	ldr	r7, [r5, #8]
   14790:	89ad      	ldrh	r5, [r5, #12]
   14792:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   14794:	2100      	movs	r1, #0
   14796:	6818      	ldr	r0, [r3, #0]
   14798:	f00a fba4 	bl	1eee4 <bt_gatt_change_aware>
   1479c:	b328      	cbz	r0, 147ea <att_write_cmd+0x6e>
	if (!handle) {
   1479e:	b336      	cbz	r6, 147ee <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
   147a0:	2214      	movs	r2, #20
   147a2:	2100      	movs	r1, #0
   147a4:	a801      	add	r0, sp, #4
   147a6:	f00a ff12 	bl	1f5ce <memset>
	data.conn = chan->att->conn;
   147aa:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   147ac:	4a11      	ldr	r2, [pc, #68]	; (147f4 <att_write_cmd+0x78>)
	data.conn = chan->att->conn;
   147ae:	681b      	ldr	r3, [r3, #0]
   147b0:	9300      	str	r3, [sp, #0]
	data.req = req;
   147b2:	2300      	movs	r3, #0
   147b4:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   147b8:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   147bc:	2301      	movs	r3, #1
   147be:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   147c2:	4631      	mov	r1, r6
   147c4:	466b      	mov	r3, sp
   147c6:	4630      	mov	r0, r6
	data.value = value;
   147c8:	9703      	str	r7, [sp, #12]
	data.len = len;
   147ca:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   147ce:	f009 fbf5 	bl	1dfbc <bt_gatt_foreach_attr>
	if (data.err) {
   147d2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   147d6:	b92b      	cbnz	r3, 147e4 <att_write_cmd+0x68>
	if (data.buf) {
   147d8:	9901      	ldr	r1, [sp, #4]
   147da:	b119      	cbz	r1, 147e4 <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   147dc:	4a06      	ldr	r2, [pc, #24]	; (147f8 <att_write_cmd+0x7c>)
   147de:	4620      	mov	r0, r4
   147e0:	f009 fd59 	bl	1e296 <bt_att_chan_send_rsp>
   147e4:	2000      	movs	r0, #0
}
   147e6:	b007      	add	sp, #28
   147e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   147ea:	2012      	movs	r0, #18
   147ec:	e7fb      	b.n	147e6 <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
   147ee:	2001      	movs	r0, #1
   147f0:	e7f9      	b.n	147e6 <att_write_cmd+0x6a>
   147f2:	bf00      	nop
   147f4:	0001e473 	.word	0x0001e473
   147f8:	0001e38b 	.word	0x0001e38b

000147fc <att_indicate>:
{
   147fc:	b570      	push	{r4, r5, r6, lr}
   147fe:	4604      	mov	r4, r0
   14800:	f101 0008 	add.w	r0, r1, #8
   14804:	460d      	mov	r5, r1
   14806:	f00a fbde 	bl	1efc6 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1480a:	6826      	ldr	r6, [r4, #0]
   1480c:	89ab      	ldrh	r3, [r5, #12]
   1480e:	68aa      	ldr	r2, [r5, #8]
   14810:	4601      	mov	r1, r0
   14812:	6830      	ldr	r0, [r6, #0]
   14814:	f00a faf1 	bl	1edfa <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   14818:	211e      	movs	r1, #30
   1481a:	2200      	movs	r2, #0
   1481c:	4620      	mov	r0, r4
   1481e:	f009 febd 	bl	1e59c <bt_att_chan_create_pdu>
	if (!buf) {
   14822:	4601      	mov	r1, r0
   14824:	b118      	cbz	r0, 1482e <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   14826:	4a03      	ldr	r2, [pc, #12]	; (14834 <att_indicate+0x38>)
   14828:	4620      	mov	r0, r4
   1482a:	f009 fd34 	bl	1e296 <bt_att_chan_send_rsp>
}
   1482e:	2000      	movs	r0, #0
   14830:	bd70      	pop	{r4, r5, r6, pc}
   14832:	bf00      	nop
   14834:	0001e36f 	.word	0x0001e36f

00014838 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   14838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1483c:	4688      	mov	r8, r1
   1483e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   14840:	2101      	movs	r1, #1
   14842:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   14844:	4605      	mov	r5, r0
   14846:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   14848:	f009 fea8 	bl	1e59c <bt_att_chan_create_pdu>
	if (!buf) {
   1484c:	4604      	mov	r4, r0
   1484e:	b178      	cbz	r0, 14870 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   14850:	2104      	movs	r1, #4
   14852:	3008      	adds	r0, #8
   14854:	f001 fda8 	bl	163a8 <net_buf_simple_add>
	rsp->request = req;
   14858:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1485c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1485e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   14862:	4621      	mov	r1, r4
   14864:	4628      	mov	r0, r5
   14866:	4a03      	ldr	r2, [pc, #12]	; (14874 <send_err_rsp.part.0+0x3c>)
}
   14868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1486c:	f009 bd13 	b.w	1e296 <bt_att_chan_send_rsp>
}
   14870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14874:	0001e38b 	.word	0x0001e38b

00014878 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   14878:	898b      	ldrh	r3, [r1, #12]
{
   1487a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1487e:	4604      	mov	r4, r0
   14880:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   14882:	2b00      	cmp	r3, #0
   14884:	d05e      	beq.n	14944 <bt_att_recv+0xcc>
	return net_buf_simple_pull_mem(&buf->b, len);
   14886:	2101      	movs	r1, #1
   14888:	f105 0008 	add.w	r0, r5, #8
   1488c:	f001 fd6a 	bl	16364 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   14890:	f854 3c08 	ldr.w	r3, [r4, #-8]
   14894:	4607      	mov	r7, r0
   14896:	2b00      	cmp	r3, #0
   14898:	d054      	beq.n	14944 <bt_att_recv+0xcc>
		if (hdr->code == handlers[i].op) {
   1489a:	4a2e      	ldr	r2, [pc, #184]	; (14954 <bt_att_recv+0xdc>)
   1489c:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1489e:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   148a2:	2300      	movs	r3, #0
   148a4:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   148a6:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   148aa:	4288      	cmp	r0, r1
   148ac:	d11a      	bne.n	148e4 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
   148ae:	00d9      	lsls	r1, r3, #3
   148b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   148b4:	f893 8002 	ldrb.w	r8, [r3, #2]
   148b8:	f1b8 0f01 	cmp.w	r8, #1
   148bc:	d020      	beq.n	14900 <bt_att_recv+0x88>
		} else if (handler->type == ATT_INDICATION &&
   148be:	f1b8 0f05 	cmp.w	r8, #5
   148c2:	d12d      	bne.n	14920 <bt_att_recv+0xa8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   148c4:	f3bf 8f5b 	dmb	ish
   148c8:	34f0      	adds	r4, #240	; 0xf0
   148ca:	e854 2f00 	ldrex	r2, [r4]
   148ce:	f042 0302 	orr.w	r3, r2, #2
   148d2:	e844 3000 	strex	r0, r3, [r4]
   148d6:	2800      	cmp	r0, #0
   148d8:	d1f7      	bne.n	148ca <bt_att_recv+0x52>
   148da:	f3bf 8f5b 	dmb	ish
   148de:	f012 0f02 	tst.w	r2, #2
   148e2:	e01c      	b.n	1491e <bt_att_recv+0xa6>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   148e4:	3301      	adds	r3, #1
   148e6:	2b1c      	cmp	r3, #28
   148e8:	d1dd      	bne.n	148a6 <bt_att_recv+0x2e>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   148ea:	4608      	mov	r0, r1
   148ec:	f009 fae5 	bl	1deba <att_op_get_type>
   148f0:	b340      	cbz	r0, 14944 <bt_att_recv+0xcc>
	if (!req) {
   148f2:	b339      	cbz	r1, 14944 <bt_att_recv+0xcc>
   148f4:	2306      	movs	r3, #6
   148f6:	2200      	movs	r2, #0
   148f8:	4630      	mov	r0, r6
   148fa:	f7ff ff9d 	bl	14838 <send_err_rsp.part.0>
   148fe:	e021      	b.n	14944 <bt_att_recv+0xcc>
   14900:	34f0      	adds	r4, #240	; 0xf0
   14902:	f3bf 8f5b 	dmb	ish
   14906:	e854 3f00 	ldrex	r3, [r4]
   1490a:	f043 0201 	orr.w	r2, r3, #1
   1490e:	e844 2000 	strex	r0, r2, [r4]
   14912:	2800      	cmp	r0, #0
   14914:	d1f7      	bne.n	14906 <bt_att_recv+0x8e>
   14916:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   1491a:	f013 0f01 	tst.w	r3, #1
   1491e:	d111      	bne.n	14944 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
   14920:	eb0c 0301 	add.w	r3, ip, r1
   14924:	89a9      	ldrh	r1, [r5, #12]
   14926:	785a      	ldrb	r2, [r3, #1]
   14928:	4291      	cmp	r1, r2
   1492a:	d30e      	bcc.n	1494a <bt_att_recv+0xd2>
		err = handler->func(att_chan, buf);
   1492c:	685b      	ldr	r3, [r3, #4]
   1492e:	4629      	mov	r1, r5
   14930:	4630      	mov	r0, r6
   14932:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   14934:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   14938:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1493a:	d103      	bne.n	14944 <bt_att_recv+0xcc>
   1493c:	b110      	cbz	r0, 14944 <bt_att_recv+0xcc>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1493e:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   14940:	2900      	cmp	r1, #0
   14942:	d1d8      	bne.n	148f6 <bt_att_recv+0x7e>
}
   14944:	2000      	movs	r0, #0
   14946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   1494a:	f1b8 0f01 	cmp.w	r8, #1
   1494e:	d1f9      	bne.n	14944 <bt_att_recv+0xcc>
		err = BT_ATT_ERR_INVALID_PDU;
   14950:	2304      	movs	r3, #4
   14952:	e7f4      	b.n	1493e <bt_att_recv+0xc6>
   14954:	0001fa94 	.word	0x0001fa94

00014958 <att_write_req>:
{
   14958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1495c:	4604      	mov	r4, r0
   1495e:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   14960:	f101 0008 	add.w	r0, r1, #8
   14964:	460d      	mov	r5, r1
   14966:	f00a fb2e 	bl	1efc6 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1496a:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   1496c:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   14970:	89ad      	ldrh	r5, [r5, #12]
   14972:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   14974:	2101      	movs	r1, #1
   14976:	6818      	ldr	r0, [r3, #0]
   14978:	f00a fab4 	bl	1eee4 <bt_gatt_change_aware>
   1497c:	2800      	cmp	r0, #0
   1497e:	d040      	beq.n	14a02 <att_write_req+0xaa>
	if (!handle) {
   14980:	2e00      	cmp	r6, #0
   14982:	d040      	beq.n	14a06 <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
   14984:	2218      	movs	r2, #24
   14986:	2100      	movs	r1, #0
   14988:	4668      	mov	r0, sp
   1498a:	f00a fe20 	bl	1f5ce <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1498e:	2200      	movs	r2, #0
   14990:	2113      	movs	r1, #19
   14992:	4620      	mov	r0, r4
   14994:	f009 fe02 	bl	1e59c <bt_att_chan_create_pdu>
   14998:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1499a:	b380      	cbz	r0, 149fe <att_write_req+0xa6>
	data.conn = chan->att->conn;
   1499c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1499e:	4a1b      	ldr	r2, [pc, #108]	; (14a0c <att_write_req+0xb4>)
	data.conn = chan->att->conn;
   149a0:	681b      	ldr	r3, [r3, #0]
   149a2:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   149a4:	2301      	movs	r3, #1
   149a6:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   149aa:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   149ae:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   149b0:	466b      	mov	r3, sp
   149b2:	4631      	mov	r1, r6
   149b4:	4630      	mov	r0, r6
	data.len = len;
   149b6:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   149ba:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   149be:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   149c2:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   149c6:	f009 faf9 	bl	1dfbc <bt_gatt_foreach_attr>
	if (data.err) {
   149ca:	f89d 5014 	ldrb.w	r5, [sp, #20]
   149ce:	b175      	cbz	r5, 149ee <att_write_req+0x96>
			net_buf_unref(data.buf);
   149d0:	9801      	ldr	r0, [sp, #4]
   149d2:	f001 fbb9 	bl	16148 <net_buf_unref>
	if (!req) {
   149d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   149da:	4632      	mov	r2, r6
   149dc:	4641      	mov	r1, r8
   149de:	4620      	mov	r0, r4
   149e0:	f7ff ff2a 	bl	14838 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   149e4:	463d      	mov	r5, r7
}
   149e6:	4628      	mov	r0, r5
   149e8:	b007      	add	sp, #28
   149ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   149ee:	9901      	ldr	r1, [sp, #4]
   149f0:	2900      	cmp	r1, #0
   149f2:	d0f8      	beq.n	149e6 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   149f4:	4a06      	ldr	r2, [pc, #24]	; (14a10 <att_write_req+0xb8>)
   149f6:	4620      	mov	r0, r4
   149f8:	f009 fc4d 	bl	1e296 <bt_att_chan_send_rsp>
   149fc:	e7f3      	b.n	149e6 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   149fe:	250e      	movs	r5, #14
   14a00:	e7f1      	b.n	149e6 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14a02:	2512      	movs	r5, #18
   14a04:	e7ef      	b.n	149e6 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   14a06:	2501      	movs	r5, #1
   14a08:	e7ed      	b.n	149e6 <att_write_req+0x8e>
   14a0a:	bf00      	nop
   14a0c:	0001e473 	.word	0x0001e473
   14a10:	0001e38b 	.word	0x0001e38b

00014a14 <att_read_group_req>:
{
   14a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   14a18:	7b0c      	ldrb	r4, [r1, #12]
   14a1a:	3c04      	subs	r4, #4
   14a1c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   14a1e:	2c02      	cmp	r4, #2
{
   14a20:	4605      	mov	r5, r0
   14a22:	b08c      	sub	sp, #48	; 0x30
   14a24:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   14a26:	d001      	beq.n	14a2c <att_read_group_req+0x18>
   14a28:	2c10      	cmp	r4, #16
   14a2a:	d16f      	bne.n	14b0c <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
   14a2c:	2104      	movs	r1, #4
   14a2e:	3008      	adds	r0, #8
   14a30:	f001 fc98 	bl	16364 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14a34:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   14a38:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   14a3a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14a3c:	1d01      	adds	r1, r0, #4
   14a3e:	4622      	mov	r2, r4
   14a40:	4640      	mov	r0, r8
   14a42:	f008 fc48 	bl	1d2d6 <bt_uuid_create>
   14a46:	2800      	cmp	r0, #0
   14a48:	d062      	beq.n	14b10 <att_read_group_req+0xfc>
	if (!start || !end) {
   14a4a:	2e00      	cmp	r6, #0
   14a4c:	d03a      	beq.n	14ac4 <att_read_group_req+0xb0>
   14a4e:	2400      	movs	r4, #0
   14a50:	2f00      	cmp	r7, #0
   14a52:	d036      	beq.n	14ac2 <att_read_group_req+0xae>
	if (start > end) {
   14a54:	42be      	cmp	r6, r7
   14a56:	d835      	bhi.n	14ac4 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   14a58:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14a5c:	a901      	add	r1, sp, #4
   14a5e:	4640      	mov	r0, r8
   14a60:	f88d 4004 	strb.w	r4, [sp, #4]
   14a64:	f8ad 3006 	strh.w	r3, [sp, #6]
   14a68:	f008 fc0b 	bl	1d282 <bt_uuid_cmp>
   14a6c:	2800      	cmp	r0, #0
   14a6e:	d134      	bne.n	14ada <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   14a70:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   14a72:	2214      	movs	r2, #20
   14a74:	2100      	movs	r1, #0
   14a76:	a807      	add	r0, sp, #28
   14a78:	f00a fda9 	bl	1f5ce <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   14a7c:	2201      	movs	r2, #1
   14a7e:	2111      	movs	r1, #17
   14a80:	4620      	mov	r0, r4
   14a82:	f009 fdb0 	bl	1e5e6 <bt_att_create_pdu>
   14a86:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   14a88:	2800      	cmp	r0, #0
   14a8a:	d041      	beq.n	14b10 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   14a8c:	2101      	movs	r1, #1
   14a8e:	3008      	adds	r0, #8
	data.uuid = uuid;
   14a90:	e9cd 5807 	strd	r5, r8, [sp, #28]
   14a94:	f001 fc88 	bl	163a8 <net_buf_simple_add>
	data.rsp->len = 0U;
   14a98:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   14a9c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   14a9e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   14aa0:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   14aa4:	4a1b      	ldr	r2, [pc, #108]	; (14b14 <att_read_group_req+0x100>)
	data.group = NULL;
   14aa6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   14aaa:	4639      	mov	r1, r7
   14aac:	4630      	mov	r0, r6
   14aae:	f009 fa85 	bl	1dfbc <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   14ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14ab4:	781c      	ldrb	r4, [r3, #0]
   14ab6:	bb1c      	cbnz	r4, 14b00 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   14ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
   14aba:	f001 fb45 	bl	16148 <net_buf_unref>
	if (!req) {
   14abe:	230a      	movs	r3, #10
   14ac0:	e018      	b.n	14af4 <att_read_group_req+0xe0>
			*err = 0U;
   14ac2:	463e      	mov	r6, r7
	if (!req) {
   14ac4:	2301      	movs	r3, #1
   14ac6:	4632      	mov	r2, r6
   14ac8:	2110      	movs	r1, #16
   14aca:	4628      	mov	r0, r5
   14acc:	f7ff feb4 	bl	14838 <send_err_rsp.part.0>
		return 0;
   14ad0:	2400      	movs	r4, #0
}
   14ad2:	4620      	mov	r0, r4
   14ad4:	b00c      	add	sp, #48	; 0x30
   14ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   14ada:	f642 0301 	movw	r3, #10241	; 0x2801
   14ade:	a907      	add	r1, sp, #28
   14ae0:	4640      	mov	r0, r8
   14ae2:	f88d 401c 	strb.w	r4, [sp, #28]
   14ae6:	f8ad 301e 	strh.w	r3, [sp, #30]
   14aea:	f008 fbca 	bl	1d282 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   14aee:	2800      	cmp	r0, #0
   14af0:	d0be      	beq.n	14a70 <att_read_group_req+0x5c>
	if (!req) {
   14af2:	2310      	movs	r3, #16
   14af4:	4632      	mov	r2, r6
   14af6:	2110      	movs	r1, #16
   14af8:	4628      	mov	r0, r5
   14afa:	f7ff fe9d 	bl	14838 <send_err_rsp.part.0>
		return 0;
   14afe:	e7e8      	b.n	14ad2 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14b00:	4a05      	ldr	r2, [pc, #20]	; (14b18 <att_read_group_req+0x104>)
   14b02:	9909      	ldr	r1, [sp, #36]	; 0x24
   14b04:	4628      	mov	r0, r5
   14b06:	f009 fbc6 	bl	1e296 <bt_att_chan_send_rsp>
	return 0;
   14b0a:	e7e1      	b.n	14ad0 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   14b0c:	2404      	movs	r4, #4
   14b0e:	e7e0      	b.n	14ad2 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   14b10:	240e      	movs	r4, #14
   14b12:	e7de      	b.n	14ad2 <att_read_group_req+0xbe>
   14b14:	000143a9 	.word	0x000143a9
   14b18:	0001e38b 	.word	0x0001e38b

00014b1c <att_read_mult_req>:
{
   14b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   14b20:	6886      	ldr	r6, [r0, #8]
{
   14b22:	b085      	sub	sp, #20
   14b24:	4604      	mov	r4, r0
   14b26:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   14b28:	4630      	mov	r0, r6
   14b2a:	2101      	movs	r1, #1
   14b2c:	f00a f9da 	bl	1eee4 <bt_gatt_change_aware>
   14b30:	2800      	cmp	r0, #0
   14b32:	d038      	beq.n	14ba6 <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   14b34:	2210      	movs	r2, #16
   14b36:	2100      	movs	r1, #0
   14b38:	4668      	mov	r0, sp
   14b3a:	f00a fd48 	bl	1f5ce <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   14b3e:	2200      	movs	r2, #0
   14b40:	210f      	movs	r1, #15
   14b42:	4630      	mov	r0, r6
   14b44:	f009 fd4f 	bl	1e5e6 <bt_att_create_pdu>
   14b48:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   14b4a:	b370      	cbz	r0, 14baa <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14b4c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 14bb4 <att_read_mult_req+0x98>
	data.chan = chan;
   14b50:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   14b52:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   14b56:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   14b5a:	89ab      	ldrh	r3, [r5, #12]
   14b5c:	2b01      	cmp	r3, #1
   14b5e:	d805      	bhi.n	14b6c <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14b60:	4a13      	ldr	r2, [pc, #76]	; (14bb0 <att_read_mult_req+0x94>)
   14b62:	9902      	ldr	r1, [sp, #8]
   14b64:	4620      	mov	r0, r4
   14b66:	f009 fb96 	bl	1e296 <bt_att_chan_send_rsp>
   14b6a:	e018      	b.n	14b9e <att_read_mult_req+0x82>
   14b6c:	4638      	mov	r0, r7
   14b6e:	f00a fa2a 	bl	1efc6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14b72:	466b      	mov	r3, sp
   14b74:	464a      	mov	r2, r9
   14b76:	4601      	mov	r1, r0
   14b78:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   14b7a:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14b7e:	f009 fa1d 	bl	1dfbc <bt_gatt_foreach_attr>
		if (data.err) {
   14b82:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14b86:	2b00      	cmp	r3, #0
   14b88:	d0e7      	beq.n	14b5a <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
   14b8a:	9802      	ldr	r0, [sp, #8]
   14b8c:	f001 fadc 	bl	16148 <net_buf_unref>
	if (!req) {
   14b90:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14b94:	4632      	mov	r2, r6
   14b96:	210e      	movs	r1, #14
   14b98:	4620      	mov	r0, r4
   14b9a:	f7ff fe4d 	bl	14838 <send_err_rsp.part.0>
	return 0;
   14b9e:	2000      	movs	r0, #0
}
   14ba0:	b005      	add	sp, #20
   14ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14ba6:	2012      	movs	r0, #18
   14ba8:	e7fa      	b.n	14ba0 <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
   14baa:	200e      	movs	r0, #14
   14bac:	e7f8      	b.n	14ba0 <att_read_mult_req+0x84>
   14bae:	bf00      	nop
   14bb0:	0001e38b 	.word	0x0001e38b
   14bb4:	0001e549 	.word	0x0001e549

00014bb8 <att_read_rsp>:
{
   14bb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   14bbc:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   14bc0:	4605      	mov	r5, r0
   14bc2:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   14bc4:	4640      	mov	r0, r8
   14bc6:	2101      	movs	r1, #1
{
   14bc8:	4614      	mov	r4, r2
   14bca:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   14bcc:	f00a f98a 	bl	1eee4 <bt_gatt_change_aware>
   14bd0:	b390      	cbz	r0, 14c38 <att_read_rsp+0x80>
	if (!handle) {
   14bd2:	b39e      	cbz	r6, 14c3c <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   14bd4:	2210      	movs	r2, #16
   14bd6:	2100      	movs	r1, #0
   14bd8:	4668      	mov	r0, sp
   14bda:	f00a fcf8 	bl	1f5ce <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   14bde:	2200      	movs	r2, #0
   14be0:	4621      	mov	r1, r4
   14be2:	4640      	mov	r0, r8
   14be4:	f009 fcff 	bl	1e5e6 <bt_att_create_pdu>
   14be8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   14bea:	b348      	cbz	r0, 14c40 <att_read_rsp+0x88>
	data.offset = offset;
   14bec:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   14bf0:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   14bf4:	2301      	movs	r3, #1
   14bf6:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14bfa:	4a12      	ldr	r2, [pc, #72]	; (14c44 <att_read_rsp+0x8c>)
	data.chan = chan;
   14bfc:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14bfe:	466b      	mov	r3, sp
   14c00:	4631      	mov	r1, r6
   14c02:	4630      	mov	r0, r6
   14c04:	f009 f9da 	bl	1dfbc <bt_gatt_foreach_attr>
	if (data.err) {
   14c08:	f89d 400c 	ldrb.w	r4, [sp, #12]
   14c0c:	b174      	cbz	r4, 14c2c <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   14c0e:	9802      	ldr	r0, [sp, #8]
   14c10:	f001 fa9a 	bl	16148 <net_buf_unref>
	if (!req) {
   14c14:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14c18:	4632      	mov	r2, r6
   14c1a:	4639      	mov	r1, r7
   14c1c:	4628      	mov	r0, r5
   14c1e:	f7ff fe0b 	bl	14838 <send_err_rsp.part.0>
		return 0;
   14c22:	2400      	movs	r4, #0
}
   14c24:	4620      	mov	r0, r4
   14c26:	b004      	add	sp, #16
   14c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14c2c:	4a06      	ldr	r2, [pc, #24]	; (14c48 <att_read_rsp+0x90>)
   14c2e:	9902      	ldr	r1, [sp, #8]
   14c30:	4628      	mov	r0, r5
   14c32:	f009 fb30 	bl	1e296 <bt_att_chan_send_rsp>
	return 0;
   14c36:	e7f5      	b.n	14c24 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14c38:	2412      	movs	r4, #18
   14c3a:	e7f3      	b.n	14c24 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   14c3c:	2401      	movs	r4, #1
   14c3e:	e7f1      	b.n	14c24 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   14c40:	240e      	movs	r4, #14
   14c42:	e7ef      	b.n	14c24 <att_read_rsp+0x6c>
   14c44:	0001e549 	.word	0x0001e549
   14c48:	0001e38b 	.word	0x0001e38b

00014c4c <att_read_type_req>:
{
   14c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   14c50:	7b0c      	ldrb	r4, [r1, #12]
   14c52:	3c04      	subs	r4, #4
   14c54:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   14c56:	2c02      	cmp	r4, #2
{
   14c58:	4605      	mov	r5, r0
   14c5a:	b08c      	sub	sp, #48	; 0x30
   14c5c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   14c5e:	d001      	beq.n	14c64 <att_read_type_req+0x18>
   14c60:	2c10      	cmp	r4, #16
   14c62:	d150      	bne.n	14d06 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   14c64:	2104      	movs	r1, #4
   14c66:	3008      	adds	r0, #8
   14c68:	f001 fb7c 	bl	16364 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14c6c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   14c70:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   14c72:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14c74:	1d01      	adds	r1, r0, #4
   14c76:	4622      	mov	r2, r4
   14c78:	4640      	mov	r0, r8
   14c7a:	f008 fb2c 	bl	1d2d6 <bt_uuid_create>
   14c7e:	b188      	cbz	r0, 14ca4 <att_read_type_req+0x58>
	if (!start || !end) {
   14c80:	b19e      	cbz	r6, 14caa <att_read_type_req+0x5e>
   14c82:	b18f      	cbz	r7, 14ca8 <att_read_type_req+0x5c>
	if (start > end) {
   14c84:	42b7      	cmp	r7, r6
   14c86:	d310      	bcc.n	14caa <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   14c88:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   14c8a:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   14c8c:	2100      	movs	r1, #0
   14c8e:	eb0d 0002 	add.w	r0, sp, r2
   14c92:	f00a fc9c 	bl	1f5ce <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   14c96:	2201      	movs	r2, #1
   14c98:	2109      	movs	r1, #9
   14c9a:	4620      	mov	r0, r4
   14c9c:	f009 fca3 	bl	1e5e6 <bt_att_create_pdu>
   14ca0:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   14ca2:	b968      	cbnz	r0, 14cc0 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   14ca4:	240e      	movs	r4, #14
   14ca6:	e007      	b.n	14cb8 <att_read_type_req+0x6c>
			*err = 0U;
   14ca8:	463e      	mov	r6, r7
	if (!req) {
   14caa:	2301      	movs	r3, #1
   14cac:	4632      	mov	r2, r6
   14cae:	2108      	movs	r1, #8
   14cb0:	4628      	mov	r0, r5
   14cb2:	f7ff fdc1 	bl	14838 <send_err_rsp.part.0>
		return 0;
   14cb6:	2400      	movs	r4, #0
}
   14cb8:	4620      	mov	r0, r4
   14cba:	b00c      	add	sp, #48	; 0x30
   14cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   14cc0:	2101      	movs	r1, #1
   14cc2:	3008      	adds	r0, #8
	data.uuid = uuid;
   14cc4:	e9cd 5806 	strd	r5, r8, [sp, #24]
   14cc8:	f001 fb6e 	bl	163a8 <net_buf_simple_add>
	data.rsp->len = 0U;
   14ccc:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   14cd0:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   14cd2:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   14cd4:	4a0d      	ldr	r2, [pc, #52]	; (14d0c <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
   14cd6:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   14cda:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   14cdc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   14ce0:	4630      	mov	r0, r6
   14ce2:	ab06      	add	r3, sp, #24
   14ce4:	f009 f96a 	bl	1dfbc <bt_gatt_foreach_attr>
	if (data.err) {
   14ce8:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   14cec:	b12c      	cbz	r4, 14cfa <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   14cee:	9808      	ldr	r0, [sp, #32]
   14cf0:	f001 fa2a 	bl	16148 <net_buf_unref>
	if (!req) {
   14cf4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   14cf8:	e7d8      	b.n	14cac <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14cfa:	4a05      	ldr	r2, [pc, #20]	; (14d10 <att_read_type_req+0xc4>)
   14cfc:	9908      	ldr	r1, [sp, #32]
   14cfe:	4628      	mov	r0, r5
   14d00:	f009 fac9 	bl	1e296 <bt_att_chan_send_rsp>
	return 0;
   14d04:	e7d8      	b.n	14cb8 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   14d06:	2404      	movs	r4, #4
   14d08:	e7d6      	b.n	14cb8 <att_read_type_req+0x6c>
   14d0a:	bf00      	nop
   14d0c:	00014455 	.word	0x00014455
   14d10:	0001e38b 	.word	0x0001e38b

00014d14 <att_find_type_req>:
{
   14d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14d18:	4688      	mov	r8, r1
   14d1a:	b086      	sub	sp, #24
   14d1c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   14d1e:	2106      	movs	r1, #6
   14d20:	f108 0008 	add.w	r0, r8, #8
   14d24:	f001 fb1e 	bl	16364 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   14d28:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   14d2a:	b317      	cbz	r7, 14d72 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   14d2c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   14d30:	f1b9 0f00 	cmp.w	r9, #0
   14d34:	d01c      	beq.n	14d70 <att_find_type_req+0x5c>
	if (start > end) {
   14d36:	454f      	cmp	r7, r9
   14d38:	d81b      	bhi.n	14d72 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   14d3a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   14d3c:	f8ad 3002 	strh.w	r3, [sp, #2]
   14d40:	2400      	movs	r4, #0
   14d42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14d46:	a901      	add	r1, sp, #4
   14d48:	4668      	mov	r0, sp
	value = buf->data;
   14d4a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   14d4e:	f88d 4000 	strb.w	r4, [sp]
   14d52:	f88d 4004 	strb.w	r4, [sp, #4]
   14d56:	f8ad 3006 	strh.w	r3, [sp, #6]
   14d5a:	f008 fa92 	bl	1d282 <bt_uuid_cmp>
   14d5e:	4606      	mov	r6, r0
   14d60:	b190      	cbz	r0, 14d88 <att_find_type_req+0x74>
	if (!req) {
   14d62:	230a      	movs	r3, #10
   14d64:	463a      	mov	r2, r7
   14d66:	2106      	movs	r1, #6
   14d68:	4628      	mov	r0, r5
   14d6a:	f7ff fd65 	bl	14838 <send_err_rsp.part.0>
		return 0;
   14d6e:	e007      	b.n	14d80 <att_find_type_req+0x6c>
			*err = 0U;
   14d70:	464f      	mov	r7, r9
	if (!req) {
   14d72:	2301      	movs	r3, #1
   14d74:	463a      	mov	r2, r7
   14d76:	2106      	movs	r1, #6
   14d78:	4628      	mov	r0, r5
   14d7a:	f7ff fd5d 	bl	14838 <send_err_rsp.part.0>
		return 0;
   14d7e:	2400      	movs	r4, #0
}
   14d80:	4620      	mov	r0, r4
   14d82:	b006      	add	sp, #24
   14d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   14d88:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   14d8c:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   14d90:	4601      	mov	r1, r0
   14d92:	2214      	movs	r2, #20
   14d94:	a801      	add	r0, sp, #4
   14d96:	f00a fc1a 	bl	1f5ce <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   14d9a:	4632      	mov	r2, r6
   14d9c:	2107      	movs	r1, #7
   14d9e:	4640      	mov	r0, r8
   14da0:	f009 fc21 	bl	1e5e6 <bt_att_create_pdu>
   14da4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   14da6:	b1e0      	cbz	r0, 14de2 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   14da8:	230a      	movs	r3, #10
   14daa:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   14dae:	4a0e      	ldr	r2, [pc, #56]	; (14de8 <att_find_type_req+0xd4>)
	data.value_len = value_len;
   14db0:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   14db4:	ab01      	add	r3, sp, #4
   14db6:	4649      	mov	r1, r9
   14db8:	4638      	mov	r0, r7
	data.value = value;
   14dba:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   14dbe:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   14dc0:	f009 f8fc 	bl	1dfbc <bt_gatt_foreach_attr>
	if (data.err) {
   14dc4:	f89d 4015 	ldrb.w	r4, [sp, #21]
   14dc8:	b12c      	cbz	r4, 14dd6 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   14dca:	9802      	ldr	r0, [sp, #8]
   14dcc:	f001 f9bc 	bl	16148 <net_buf_unref>
	if (!req) {
   14dd0:	f89d 3015 	ldrb.w	r3, [sp, #21]
   14dd4:	e7ce      	b.n	14d74 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14dd6:	4a05      	ldr	r2, [pc, #20]	; (14dec <att_find_type_req+0xd8>)
   14dd8:	9902      	ldr	r1, [sp, #8]
   14dda:	4628      	mov	r0, r5
   14ddc:	f009 fa5b 	bl	1e296 <bt_att_chan_send_rsp>
	return 0;
   14de0:	e7ce      	b.n	14d80 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   14de2:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   14de4:	e7cc      	b.n	14d80 <att_find_type_req+0x6c>
   14de6:	bf00      	nop
   14de8:	0001e0e9 	.word	0x0001e0e9
   14dec:	0001e38b 	.word	0x0001e38b

00014df0 <att_find_info_req>:
{
   14df0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   14df2:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   14df4:	881e      	ldrh	r6, [r3, #0]
{
   14df6:	b085      	sub	sp, #20
   14df8:	4605      	mov	r5, r0
	if (!start || !end) {
   14dfa:	b19e      	cbz	r6, 14e24 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   14dfc:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   14dfe:	b184      	cbz	r4, 14e22 <att_find_info_req+0x32>
	if (start > end) {
   14e00:	42b4      	cmp	r4, r6
   14e02:	d30f      	bcc.n	14e24 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   14e04:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   14e06:	2210      	movs	r2, #16
   14e08:	2100      	movs	r1, #0
   14e0a:	4668      	mov	r0, sp
   14e0c:	f00a fbdf 	bl	1f5ce <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   14e10:	2200      	movs	r2, #0
   14e12:	2105      	movs	r1, #5
   14e14:	4638      	mov	r0, r7
   14e16:	f009 fbe6 	bl	1e5e6 <bt_att_create_pdu>
   14e1a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   14e1c:	b958      	cbnz	r0, 14e36 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   14e1e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   14e20:	e007      	b.n	14e32 <att_find_info_req+0x42>
			*err = 0U;
   14e22:	4626      	mov	r6, r4
	if (!req) {
   14e24:	2301      	movs	r3, #1
   14e26:	4632      	mov	r2, r6
   14e28:	2104      	movs	r1, #4
   14e2a:	4628      	mov	r0, r5
   14e2c:	f7ff fd04 	bl	14838 <send_err_rsp.part.0>
	return 0;
   14e30:	2000      	movs	r0, #0
}
   14e32:	b005      	add	sp, #20
   14e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   14e36:	4621      	mov	r1, r4
   14e38:	4a09      	ldr	r2, [pc, #36]	; (14e60 <att_find_info_req+0x70>)
	data.chan = chan;
   14e3a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   14e3c:	466b      	mov	r3, sp
   14e3e:	4630      	mov	r0, r6
   14e40:	f009 f8bc 	bl	1dfbc <bt_gatt_foreach_attr>
	if (!data.rsp) {
   14e44:	9c02      	ldr	r4, [sp, #8]
   14e46:	b924      	cbnz	r4, 14e52 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   14e48:	9801      	ldr	r0, [sp, #4]
   14e4a:	f001 f97d 	bl	16148 <net_buf_unref>
	if (!req) {
   14e4e:	230a      	movs	r3, #10
   14e50:	e7e9      	b.n	14e26 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14e52:	4a04      	ldr	r2, [pc, #16]	; (14e64 <att_find_info_req+0x74>)
   14e54:	9901      	ldr	r1, [sp, #4]
   14e56:	4628      	mov	r0, r5
   14e58:	f009 fa1d 	bl	1e296 <bt_att_chan_send_rsp>
   14e5c:	e7e8      	b.n	14e30 <att_find_info_req+0x40>
   14e5e:	bf00      	nop
   14e60:	0001e2c9 	.word	0x0001e2c9
   14e64:	0001e38b 	.word	0x0001e38b

00014e68 <att_mtu_req>:
{
   14e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   14e6a:	6803      	ldr	r3, [r0, #0]
{
   14e6c:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   14e6e:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14e70:	f3bf 8f5b 	dmb	ish
   14e74:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   14e78:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   14e7c:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   14e80:	071b      	lsls	r3, r3, #28
   14e82:	d41e      	bmi.n	14ec2 <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
   14e84:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   14e86:	881b      	ldrh	r3, [r3, #0]
   14e88:	2b16      	cmp	r3, #22
   14e8a:	d91c      	bls.n	14ec6 <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   14e8c:	2202      	movs	r2, #2
   14e8e:	2103      	movs	r1, #3
   14e90:	f009 fba9 	bl	1e5e6 <bt_att_create_pdu>
	if (!pdu) {
   14e94:	4606      	mov	r6, r0
   14e96:	b1c0      	cbz	r0, 14eca <att_mtu_req+0x62>
	return net_buf_simple_add(&buf->b, len);
   14e98:	2102      	movs	r1, #2
   14e9a:	3008      	adds	r0, #8
   14e9c:	f001 fa84 	bl	163a8 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   14ea0:	2717      	movs	r7, #23
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   14ea2:	4a0b      	ldr	r2, [pc, #44]	; (14ed0 <att_mtu_req+0x68>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   14ea4:	7007      	strb	r7, [r0, #0]
   14ea6:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   14ea8:	4631      	mov	r1, r6
   14eaa:	4620      	mov	r0, r4
   14eac:	f009 f9f3 	bl	1e296 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   14eb0:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   14eb2:	f8a4 707a 	strh.w	r7, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   14eb6:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   14eba:	f009 f844 	bl	1df46 <att_chan_mtu_updated>
	return 0;
   14ebe:	4628      	mov	r0, r5
}
   14ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   14ec2:	2006      	movs	r0, #6
   14ec4:	e7fc      	b.n	14ec0 <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
   14ec6:	2004      	movs	r0, #4
   14ec8:	e7fa      	b.n	14ec0 <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
   14eca:	200e      	movs	r0, #14
   14ecc:	e7f8      	b.n	14ec0 <att_mtu_req+0x58>
   14ece:	bf00      	nop
   14ed0:	0001e38b 	.word	0x0001e38b

00014ed4 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   14ed4:	b513      	push	{r0, r1, r4, lr}
   14ed6:	4602      	mov	r2, r0
   14ed8:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   14eda:	4808      	ldr	r0, [pc, #32]	; (14efc <bt_att_req_alloc+0x28>)
   14edc:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   14ede:	2400      	movs	r4, #0
   14ee0:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   14ee2:	f004 f86b 	bl	18fbc <k_mem_slab_alloc>
   14ee6:	4601      	mov	r1, r0
   14ee8:	b930      	cbnz	r0, 14ef8 <bt_att_req_alloc+0x24>
   14eea:	9801      	ldr	r0, [sp, #4]
   14eec:	2210      	movs	r2, #16
   14eee:	f00a fb6e 	bl	1f5ce <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
   14ef2:	9801      	ldr	r0, [sp, #4]
}
   14ef4:	b002      	add	sp, #8
   14ef6:	bd10      	pop	{r4, pc}
		return NULL;
   14ef8:	4620      	mov	r0, r4
   14efa:	e7fb      	b.n	14ef4 <bt_att_req_alloc+0x20>
   14efc:	200005ac 	.word	0x200005ac

00014f00 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   14f00:	b507      	push	{r0, r1, r2, lr}
   14f02:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   14f04:	6880      	ldr	r0, [r0, #8]
   14f06:	b120      	cbz	r0, 14f12 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   14f08:	f001 f91e 	bl	16148 <net_buf_unref>
		req->buf = NULL;
   14f0c:	9b01      	ldr	r3, [sp, #4]
   14f0e:	2200      	movs	r2, #0
   14f10:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   14f12:	4803      	ldr	r0, [pc, #12]	; (14f20 <bt_att_req_free+0x20>)
   14f14:	a901      	add	r1, sp, #4
   14f16:	f004 f8bd 	bl	19094 <k_mem_slab_free>
}
   14f1a:	b003      	add	sp, #12
   14f1c:	f85d fb04 	ldr.w	pc, [sp], #4
   14f20:	200005ac 	.word	0x200005ac

00014f24 <att_handle_rsp>:
{
   14f24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   14f28:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   14f2a:	f500 7090 	add.w	r0, r0, #288	; 0x120
{
   14f2e:	4688      	mov	r8, r1
   14f30:	4691      	mov	r9, r2
   14f32:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   14f34:	f005 fad4 	bl	1a4e0 <k_work_cancel_delayable>
	if (!chan->req) {
   14f38:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
   14f3c:	2600      	movs	r6, #0
   14f3e:	b1f0      	cbz	r0, 14f7e <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   14f40:	4b10      	ldr	r3, [pc, #64]	; (14f84 <att_handle_rsp+0x60>)
   14f42:	4298      	cmp	r0, r3
   14f44:	d112      	bne.n	14f6c <att_handle_rsp+0x48>
		chan->req = NULL;
   14f46:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
	bt_att_func_t func = NULL;
   14f4a:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   14f4c:	6820      	ldr	r0, [r4, #0]
   14f4e:	f009 fa64 	bl	1e41a <att_req_send_process>
	if (func) {
   14f52:	b13d      	cbz	r5, 14f64 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   14f54:	6820      	ldr	r0, [r4, #0]
   14f56:	f8cd a000 	str.w	sl, [sp]
   14f5a:	6800      	ldr	r0, [r0, #0]
   14f5c:	464b      	mov	r3, r9
   14f5e:	4642      	mov	r2, r8
   14f60:	4639      	mov	r1, r7
   14f62:	47a8      	blx	r5
}
   14f64:	2000      	movs	r0, #0
   14f66:	b002      	add	sp, #8
   14f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   14f6c:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   14f6e:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   14f70:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   14f74:	f7ff ffc4 	bl	14f00 <bt_att_req_free>
	chan->req = NULL;
   14f78:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
   14f7c:	e7e6      	b.n	14f4c <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
   14f7e:	4605      	mov	r5, r0
   14f80:	e7e4      	b.n	14f4c <att_handle_rsp+0x28>
   14f82:	bf00      	nop
   14f84:	20001c64 	.word	0x20001c64

00014f88 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   14f88:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   14f8c:	b143      	cbz	r3, 14fa0 <att_error_rsp+0x18>
   14f8e:	4a05      	ldr	r2, [pc, #20]	; (14fa4 <att_error_rsp+0x1c>)
   14f90:	4293      	cmp	r3, r2
   14f92:	d005      	beq.n	14fa0 <att_error_rsp+0x18>
	err = rsp->error;
   14f94:	688b      	ldr	r3, [r1, #8]
   14f96:	78db      	ldrb	r3, [r3, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   14f98:	2200      	movs	r2, #0
   14f9a:	4611      	mov	r1, r2
   14f9c:	f7ff bfc2 	b.w	14f24 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   14fa0:	230e      	movs	r3, #14
   14fa2:	e7f9      	b.n	14f98 <att_error_rsp+0x10>
   14fa4:	20001c64 	.word	0x20001c64

00014fa8 <bt_att_disconnected>:
{
   14fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   14faa:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   14fae:	b085      	sub	sp, #20
   14fb0:	4604      	mov	r4, r0
	if (!att_chan->att) {
   14fb2:	b385      	cbz	r5, 15016 <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   14fb4:	f500 71a6 	add.w	r1, r0, #332	; 0x14c
   14fb8:	f105 0028 	add.w	r0, r5, #40	; 0x28
   14fbc:	f008 ff42 	bl	1de44 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   14fc0:	f1a4 0608 	sub.w	r6, r4, #8
   14fc4:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
   14fc8:	2200      	movs	r2, #0
   14fca:	2300      	movs	r3, #0
   14fcc:	4638      	mov	r0, r7
   14fce:	f001 f829 	bl	16024 <net_buf_get>
   14fd2:	4602      	mov	r2, r0
   14fd4:	bb08      	cbnz	r0, 1501a <bt_att_disconnected+0x72>
	if (chan->req) {
   14fd6:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   14fda:	b123      	cbz	r3, 14fe6 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   14fdc:	4601      	mov	r1, r0
   14fde:	230e      	movs	r3, #14
   14fe0:	4630      	mov	r0, r6
   14fe2:	f7ff ff9f 	bl	14f24 <att_handle_rsp>
	chan->att = NULL;
   14fe6:	2300      	movs	r3, #0
   14fe8:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   14fec:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14fee:	b993      	cbnz	r3, 15016 <bt_att_disconnected+0x6e>
	att_reset(att);
   14ff0:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   14ff2:	9803      	ldr	r0, [sp, #12]
   14ff4:	2200      	movs	r2, #0
   14ff6:	2300      	movs	r3, #0
   14ff8:	300c      	adds	r0, #12
   14ffa:	f001 f813 	bl	16024 <net_buf_get>
   14ffe:	b978      	cbnz	r0, 15020 <bt_att_disconnected+0x78>
	att->conn = NULL;
   15000:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   15002:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
   15004:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   15006:	b976      	cbnz	r6, 15026 <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
   15008:	4813      	ldr	r0, [pc, #76]	; (15058 <bt_att_disconnected+0xb0>)
   1500a:	a903      	add	r1, sp, #12
   1500c:	f004 f842 	bl	19094 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   15010:	6820      	ldr	r0, [r4, #0]
   15012:	f000 fe7f 	bl	15d14 <bt_gatt_disconnected>
}
   15016:	b005      	add	sp, #20
   15018:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   1501a:	f001 f895 	bl	16148 <net_buf_unref>
   1501e:	e7d3      	b.n	14fc8 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   15020:	f001 f892 	bl	16148 <net_buf_unref>
   15024:	e7e5      	b.n	14ff2 <bt_att_disconnected+0x4a>
	return node->next;
   15026:	6835      	ldr	r5, [r6, #0]
   15028:	2d00      	cmp	r5, #0
   1502a:	bf38      	it	cc
   1502c:	2500      	movcc	r5, #0
		if (req->func) {
   1502e:	6877      	ldr	r7, [r6, #4]
   15030:	b137      	cbz	r7, 15040 <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   15032:	68f3      	ldr	r3, [r6, #12]
   15034:	9300      	str	r3, [sp, #0]
   15036:	2300      	movs	r3, #0
   15038:	461a      	mov	r2, r3
   1503a:	210e      	movs	r1, #14
   1503c:	4618      	mov	r0, r3
   1503e:	47b8      	blx	r7
		bt_att_req_free(req);
   15040:	4630      	mov	r0, r6
   15042:	f7ff ff5d 	bl	14f00 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   15046:	2d00      	cmp	r5, #0
   15048:	d0de      	beq.n	15008 <bt_att_disconnected+0x60>
   1504a:	682b      	ldr	r3, [r5, #0]
   1504c:	2b00      	cmp	r3, #0
   1504e:	bf38      	it	cc
   15050:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15052:	462e      	mov	r6, r5
   15054:	461d      	mov	r5, r3
   15056:	e7ea      	b.n	1502e <bt_att_disconnected+0x86>
   15058:	2000056c 	.word	0x2000056c

0001505c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1505c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15060:	460c      	mov	r4, r1
   15062:	4617      	mov	r7, r2
   15064:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   15066:	4605      	mov	r5, r0
   15068:	b958      	cbnz	r0, 15082 <bt_att_send+0x26>
   1506a:	492f      	ldr	r1, [pc, #188]	; (15128 <bt_att_send+0xcc>)
   1506c:	482f      	ldr	r0, [pc, #188]	; (1512c <bt_att_send+0xd0>)
   1506e:	4a30      	ldr	r2, [pc, #192]	; (15130 <bt_att_send+0xd4>)
   15070:	f640 33f2 	movw	r3, #3058	; 0xbf2
   15074:	f007 fc95 	bl	1c9a2 <printk>
   15078:	482d      	ldr	r0, [pc, #180]	; (15130 <bt_att_send+0xd4>)
   1507a:	f640 31f2 	movw	r1, #3058	; 0xbf2
   1507e:	f007 feea 	bl	1ce56 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   15082:	b95c      	cbnz	r4, 1509c <bt_att_send+0x40>
   15084:	492b      	ldr	r1, [pc, #172]	; (15134 <bt_att_send+0xd8>)
   15086:	4829      	ldr	r0, [pc, #164]	; (1512c <bt_att_send+0xd0>)
   15088:	4a29      	ldr	r2, [pc, #164]	; (15130 <bt_att_send+0xd4>)
   1508a:	f640 33f3 	movw	r3, #3059	; 0xbf3
   1508e:	f007 fc88 	bl	1c9a2 <printk>
   15092:	4827      	ldr	r0, [pc, #156]	; (15130 <bt_att_send+0xd4>)
   15094:	f640 31f3 	movw	r1, #3059	; 0xbf3
   15098:	f007 fedd 	bl	1ce56 <assert_post_action>

	att = att_get(conn);
   1509c:	4628      	mov	r0, r5
   1509e:	f009 f982 	bl	1e3a6 <att_get>
	if (!att) {
   150a2:	4606      	mov	r6, r0
   150a4:	b938      	cbnz	r0, 150b6 <bt_att_send+0x5a>
		net_buf_unref(buf);
   150a6:	4620      	mov	r0, r4
   150a8:	f001 f84e 	bl	16148 <net_buf_unref>
		return -ENOTCONN;
   150ac:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   150b0:	b002      	add	sp, #8
   150b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   150b6:	b147      	cbz	r7, 150ca <bt_att_send+0x6e>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   150b8:	f8cd 8000 	str.w	r8, [sp]
   150bc:	463b      	mov	r3, r7
   150be:	4622      	mov	r2, r4
   150c0:	2104      	movs	r1, #4
   150c2:	4628      	mov	r0, r5
   150c4:	f008 fdda 	bl	1dc7c <bt_l2cap_send_cb>
   150c8:	e7f2      	b.n	150b0 <bt_att_send+0x54>
	net_buf_put(&att->tx_queue, buf);
   150ca:	f100 070c 	add.w	r7, r0, #12
   150ce:	4621      	mov	r1, r4
   150d0:	4638      	mov	r0, r7
   150d2:	f001 f805 	bl	160e0 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   150d6:	2200      	movs	r2, #0
   150d8:	2300      	movs	r3, #0
   150da:	4638      	mov	r0, r7
   150dc:	f000 ffa2 	bl	16024 <net_buf_get>
	if (!buf) {
   150e0:	4605      	mov	r5, r0
   150e2:	b908      	cbnz	r0, 150e8 <bt_att_send+0x8c>
	return 0;
   150e4:	2000      	movs	r0, #0
   150e6:	e7e3      	b.n	150b0 <bt_att_send+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   150e8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   150ea:	b1c3      	cbz	r3, 1511e <bt_att_send+0xc2>
   150ec:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   150f0:	d015      	beq.n	1511e <bt_att_send+0xc2>
   150f2:	681c      	ldr	r4, [r3, #0]
   150f4:	b10c      	cbz	r4, 150fa <bt_att_send+0x9e>
   150f6:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
	return chan_send(chan, buf, cb);
   150fa:	2200      	movs	r2, #0
   150fc:	4629      	mov	r1, r5
   150fe:	f7ff f9fd 	bl	144fc <chan_send>
		if (err >= 0) {
   15102:	2800      	cmp	r0, #0
   15104:	daee      	bge.n	150e4 <bt_att_send+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15106:	b154      	cbz	r4, 1511e <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15108:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   1510c:	d004      	beq.n	15118 <bt_att_send+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1510e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   15112:	b10b      	cbz	r3, 15118 <bt_att_send+0xbc>
   15114:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   15118:	4620      	mov	r0, r4
   1511a:	461c      	mov	r4, r3
   1511c:	e7ed      	b.n	150fa <bt_att_send+0x9e>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1511e:	4629      	mov	r1, r5
   15120:	4638      	mov	r0, r7
   15122:	f00a f90e 	bl	1f342 <k_queue_prepend>
   15126:	e7dd      	b.n	150e4 <bt_att_send+0x88>
   15128:	00020bc0 	.word	0x00020bc0
   1512c:	0001feb5 	.word	0x0001feb5
   15130:	00020b60 	.word	0x00020b60
   15134:	000208c3 	.word	0x000208c3

00015138 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   15138:	b538      	push	{r3, r4, r5, lr}
   1513a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1513c:	4605      	mov	r5, r0
   1513e:	b958      	cbnz	r0, 15158 <bt_att_req_send+0x20>
   15140:	4916      	ldr	r1, [pc, #88]	; (1519c <bt_att_req_send+0x64>)
   15142:	4817      	ldr	r0, [pc, #92]	; (151a0 <bt_att_req_send+0x68>)
   15144:	4a17      	ldr	r2, [pc, #92]	; (151a4 <bt_att_req_send+0x6c>)
   15146:	f640 430f 	movw	r3, #3087	; 0xc0f
   1514a:	f007 fc2a 	bl	1c9a2 <printk>
   1514e:	4815      	ldr	r0, [pc, #84]	; (151a4 <bt_att_req_send+0x6c>)
   15150:	f640 410f 	movw	r1, #3087	; 0xc0f
   15154:	f007 fe7f 	bl	1ce56 <assert_post_action>
	__ASSERT_NO_MSG(req);
   15158:	b95c      	cbnz	r4, 15172 <bt_att_req_send+0x3a>
   1515a:	4913      	ldr	r1, [pc, #76]	; (151a8 <bt_att_req_send+0x70>)
   1515c:	4810      	ldr	r0, [pc, #64]	; (151a0 <bt_att_req_send+0x68>)
   1515e:	4a11      	ldr	r2, [pc, #68]	; (151a4 <bt_att_req_send+0x6c>)
   15160:	f44f 6341 	mov.w	r3, #3088	; 0xc10
   15164:	f007 fc1d 	bl	1c9a2 <printk>
   15168:	480e      	ldr	r0, [pc, #56]	; (151a4 <bt_att_req_send+0x6c>)
   1516a:	f44f 6141 	mov.w	r1, #3088	; 0xc10
   1516e:	f007 fe72 	bl	1ce56 <assert_post_action>

	att = att_get(conn);
   15172:	4628      	mov	r0, r5
   15174:	f009 f917 	bl	1e3a6 <att_get>
	if (!att) {
   15178:	b160      	cbz	r0, 15194 <bt_att_req_send+0x5c>
	parent->next = child;
   1517a:	2300      	movs	r3, #0
   1517c:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1517e:	6883      	ldr	r3, [r0, #8]
   15180:	b92b      	cbnz	r3, 1518e <bt_att_req_send+0x56>
	list->head = node;
   15182:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   15186:	f009 f948 	bl	1e41a <att_req_send_process>

	return 0;
   1518a:	2000      	movs	r0, #0
}
   1518c:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   1518e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   15190:	6084      	str	r4, [r0, #8]
}
   15192:	e7f8      	b.n	15186 <bt_att_req_send+0x4e>
		return -ENOTCONN;
   15194:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15198:	e7f8      	b.n	1518c <bt_att_req_send+0x54>
   1519a:	bf00      	nop
   1519c:	00020bc0 	.word	0x00020bc0
   151a0:	0001feb5 	.word	0x0001feb5
   151a4:	00020b60 	.word	0x00020b60
   151a8:	00020ba5 	.word	0x00020ba5

000151ac <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   151ac:	b510      	push	{r4, lr}
   151ae:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   151b0:	b348      	cbz	r0, 15206 <bt_att_req_cancel+0x5a>
   151b2:	b341      	cbz	r1, 15206 <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
   151b4:	f009 f8f7 	bl	1e3a6 <att_get>
	if (!att) {
   151b8:	b328      	cbz	r0, 15206 <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   151ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
   151bc:	b15b      	cbz	r3, 151d6 <bt_att_req_cancel+0x2a>
   151be:	f5b3 71aa 	subs.w	r1, r3, #340	; 0x154
   151c2:	d008      	beq.n	151d6 <bt_att_req_cancel+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   151c4:	681b      	ldr	r3, [r3, #0]
   151c6:	b10b      	cbz	r3, 151cc <bt_att_req_cancel+0x20>
   151c8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
	if (chan->req != req) {
   151cc:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   151d0:	4294      	cmp	r4, r2
   151d2:	d005      	beq.n	151e0 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   151d4:	b963      	cbnz	r3, 151f0 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   151d6:	4621      	mov	r1, r4
   151d8:	3004      	adds	r0, #4
   151da:	f008 fe33 	bl	1de44 <sys_slist_find_and_remove>
   151de:	e002      	b.n	151e6 <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
   151e0:	4b09      	ldr	r3, [pc, #36]	; (15208 <bt_att_req_cancel+0x5c>)
   151e2:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc

	bt_att_req_free(req);
   151e6:	4620      	mov	r0, r4
}
   151e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   151ec:	f7ff be88 	b.w	14f00 <bt_att_req_free>
Z_GENLIST_PEEK_NEXT(slist, snode)
   151f0:	f513 72aa 	adds.w	r2, r3, #340	; 0x154
   151f4:	d004      	beq.n	15200 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   151f6:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   151fa:	b10a      	cbz	r2, 15200 <bt_att_req_cancel+0x54>
   151fc:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
{
   15200:	4619      	mov	r1, r3
   15202:	4613      	mov	r3, r2
   15204:	e7e2      	b.n	151cc <bt_att_req_cancel+0x20>
}
   15206:	bd10      	pop	{r4, pc}
   15208:	20001c64 	.word	0x20001c64

0001520c <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1520c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1520e:	4d0d      	ldr	r5, [pc, #52]	; (15244 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   15210:	4604      	mov	r4, r0
   15212:	b960      	cbnz	r0, 1522e <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   15214:	9000      	str	r0, [sp, #0]
   15216:	4669      	mov	r1, sp
   15218:	f8cd 0003 	str.w	r0, [sp, #3]
   1521c:	1c68      	adds	r0, r5, #1
   1521e:	f009 fad2 	bl	1e7c6 <bt_addr_le_cmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   15222:	2800      	cmp	r0, #0
   15224:	bf08      	it	eq
   15226:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   15228:	4620      	mov	r0, r4
   1522a:	b003      	add	sp, #12
   1522c:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1522e:	462a      	mov	r2, r5
   15230:	f812 1b01 	ldrb.w	r1, [r2], #1
   15234:	f008 fc5c 	bl	1daf0 <bt_conn_is_peer_addr_le>
   15238:	2800      	cmp	r0, #0
	return NULL;
   1523a:	bf14      	ite	ne
   1523c:	462c      	movne	r4, r5
   1523e:	2400      	moveq	r4, #0
   15240:	e7f2      	b.n	15228 <find_cf_cfg+0x1c>
   15242:	bf00      	nop
   15244:	20001c7c 	.word	0x20001c7c

00015248 <find_sc_cfg>:
{
   15248:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1524a:	4c06      	ldr	r4, [pc, #24]	; (15264 <find_sc_cfg+0x1c>)
   1524c:	7823      	ldrb	r3, [r4, #0]
   1524e:	4283      	cmp	r3, r0
   15250:	d103      	bne.n	1525a <find_sc_cfg+0x12>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   15252:	1c60      	adds	r0, r4, #1
   15254:	f009 fab7 	bl	1e7c6 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   15258:	b108      	cbz	r0, 1525e <find_sc_cfg+0x16>
	return NULL;
   1525a:	2000      	movs	r0, #0
}
   1525c:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1525e:	4620      	mov	r0, r4
   15260:	e7fc      	b.n	1525c <find_sc_cfg+0x14>
   15262:	bf00      	nop
   15264:	20001f10 	.word	0x20001f10

00015268 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
   15268:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1526a:	4d0d      	ldr	r5, [pc, #52]	; (152a0 <gatt_sub_find+0x38>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
   1526c:	4604      	mov	r4, r0
   1526e:	b960      	cbnz	r0, 1528a <gatt_sub_find+0x22>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   15270:	9000      	str	r0, [sp, #0]
   15272:	4669      	mov	r1, sp
   15274:	f8cd 0003 	str.w	r0, [sp, #3]
   15278:	1c68      	adds	r0, r5, #1
   1527a:	f009 faa4 	bl	1e7c6 <bt_addr_le_cmp>
		struct gatt_sub *sub = &subscriptions[i];
   1527e:	2800      	cmp	r0, #0
   15280:	bf08      	it	eq
   15282:	462c      	moveq	r4, r5
			return sub;
		}
	}

	return NULL;
}
   15284:	4620      	mov	r0, r4
   15286:	b003      	add	sp, #12
   15288:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1528a:	462a      	mov	r2, r5
   1528c:	f812 1b01 	ldrb.w	r1, [r2], #1
   15290:	f008 fc2e 	bl	1daf0 <bt_conn_is_peer_addr_le>
   15294:	2800      	cmp	r0, #0
	return NULL;
   15296:	bf14      	ite	ne
   15298:	462c      	movne	r4, r5
   1529a:	2400      	moveq	r4, #0
   1529c:	e7f2      	b.n	15284 <gatt_sub_find+0x1c>
   1529e:	bf00      	nop
   152a0:	20001cac 	.word	0x20001cac

000152a4 <gatt_sub_free>:
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   152a4:	6883      	ldr	r3, [r0, #8]
{
   152a6:	b513      	push	{r0, r1, r4, lr}
   152a8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   152aa:	b15b      	cbz	r3, 152c4 <gatt_sub_free+0x20>
   152ac:	490a      	ldr	r1, [pc, #40]	; (152d8 <gatt_sub_free+0x34>)
   152ae:	480b      	ldr	r0, [pc, #44]	; (152dc <gatt_sub_free+0x38>)
   152b0:	4a0b      	ldr	r2, [pc, #44]	; (152e0 <gatt_sub_free+0x3c>)
   152b2:	f640 239c 	movw	r3, #2716	; 0xa9c
   152b6:	f007 fb74 	bl	1c9a2 <printk>
   152ba:	4809      	ldr	r0, [pc, #36]	; (152e0 <gatt_sub_free+0x3c>)
   152bc:	f640 219c 	movw	r1, #2716	; 0xa9c
   152c0:	f007 fdc9 	bl	1ce56 <assert_post_action>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   152c4:	2300      	movs	r3, #0
   152c6:	4669      	mov	r1, sp
   152c8:	1c60      	adds	r0, r4, #1
   152ca:	9300      	str	r3, [sp, #0]
   152cc:	f8cd 3003 	str.w	r3, [sp, #3]
   152d0:	f009 fa94 	bl	1e7fc <bt_addr_le_copy>
}
   152d4:	b002      	add	sp, #8
   152d6:	bd10      	pop	{r4, pc}
   152d8:	00020bf5 	.word	0x00020bf5
   152dc:	0001feb5 	.word	0x0001feb5
   152e0:	00020bc5 	.word	0x00020bc5

000152e4 <sc_indicate_rsp>:
{
   152e4:	b510      	push	{r4, lr}
   152e6:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   152e8:	4814      	ldr	r0, [pc, #80]	; (1533c <sc_indicate_rsp+0x58>)
   152ea:	f3bf 8f5b 	dmb	ish
   152ee:	f100 0350 	add.w	r3, r0, #80	; 0x50
   152f2:	e853 2f00 	ldrex	r2, [r3]
   152f6:	f022 0202 	bic.w	r2, r2, #2
   152fa:	e843 2100 	strex	r1, r2, [r3]
   152fe:	2900      	cmp	r1, #0
   15300:	d1f7      	bne.n	152f2 <sc_indicate_rsp+0xe>
   15302:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15306:	f3bf 8f5b 	dmb	ish
   1530a:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1530c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   15310:	07da      	lsls	r2, r3, #31
   15312:	d504      	bpl.n	1531e <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   15314:	2200      	movs	r2, #0
   15316:	2300      	movs	r3, #0
   15318:	3020      	adds	r0, #32
   1531a:	f005 f8db 	bl	1a4d4 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   1531e:	4620      	mov	r0, r4
   15320:	f7ff ff74 	bl	1520c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   15324:	b140      	cbz	r0, 15338 <sc_indicate_rsp+0x54>
   15326:	7a03      	ldrb	r3, [r0, #8]
   15328:	07db      	lsls	r3, r3, #31
   1532a:	d505      	bpl.n	15338 <sc_indicate_rsp+0x54>
}
   1532c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   15330:	2100      	movs	r1, #0
   15332:	300c      	adds	r0, #12
   15334:	f009 bbc6 	b.w	1eac4 <atomic_set_bit>
}
   15338:	bd10      	pop	{r4, pc}
   1533a:	bf00      	nop
   1533c:	20001778 	.word	0x20001778

00015340 <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
   15340:	b507      	push	{r0, r1, r2, lr}
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   15342:	2312      	movs	r3, #18
{
   15344:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   15346:	2104      	movs	r1, #4
   15348:	e9cd 3100 	strd	r3, r1, [sp]
   1534c:	4b03      	ldr	r3, [pc, #12]	; (1535c <gatt_write_ccc+0x1c>)
   1534e:	4904      	ldr	r1, [pc, #16]	; (15360 <gatt_write_ccc+0x20>)
   15350:	f009 fc75 	bl	1ec3e <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len);
}
   15354:	b003      	add	sp, #12
   15356:	f85d fb04 	ldr.w	pc, [sp], #4
   1535a:	bf00      	nop
   1535c:	0001ea8b 	.word	0x0001ea8b
   15360:	0001ebc9 	.word	0x0001ebc9

00015364 <disconnected_cb>:
{
   15364:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   15368:	4b23      	ldr	r3, [pc, #140]	; (153f8 <disconnected_cb+0x94>)
{
   1536a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1536c:	6882      	ldr	r2, [r0, #8]
   1536e:	429a      	cmp	r2, r3
{
   15370:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   15372:	d102      	bne.n	1537a <disconnected_cb+0x16>
	ccc = attr->user_data;
   15374:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   15376:	8963      	ldrh	r3, [r4, #10]
   15378:	bb03      	cbnz	r3, 153bc <disconnected_cb+0x58>
}
   1537a:	2001      	movs	r0, #1
   1537c:	b002      	add	sp, #8
   1537e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15382:	f105 0890 	add.w	r8, r5, #144	; 0x90
   15386:	7a28      	ldrb	r0, [r5, #8]
   15388:	4641      	mov	r1, r8
   1538a:	f008 fa7c 	bl	1d886 <bt_addr_le_is_bonded>
   1538e:	b980      	cbnz	r0, 153b2 <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
   15390:	4b1a      	ldr	r3, [pc, #104]	; (153fc <disconnected_cb+0x98>)
   15392:	429c      	cmp	r4, r3
   15394:	d102      	bne.n	1539c <disconnected_cb+0x38>
					sc_clear(conn);
   15396:	4628      	mov	r0, r5
   15398:	f009 fabc 	bl	1e914 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1539c:	2200      	movs	r2, #0
   1539e:	4669      	mov	r1, sp
   153a0:	4630      	mov	r0, r6
   153a2:	9200      	str	r2, [sp, #0]
   153a4:	f8cd 2003 	str.w	r2, [sp, #3]
   153a8:	f009 fa28 	bl	1e7fc <bt_addr_le_copy>
	cfg->id = 0U;
   153ac:	7022      	strb	r2, [r4, #0]
	cfg->value = 0U;
   153ae:	8122      	strh	r2, [r4, #8]
	if (!value_used) {
   153b0:	e019      	b.n	153e6 <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   153b2:	4641      	mov	r1, r8
   153b4:	4630      	mov	r0, r6
   153b6:	f009 fa21 	bl	1e7fc <bt_addr_le_copy>
	if (!value_used) {
   153ba:	e014      	b.n	153e6 <disconnected_cb+0x82>
		if (!cfg->value) {
   153bc:	8923      	ldrh	r3, [r4, #8]
   153be:	b193      	cbz	r3, 153e6 <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   153c0:	4626      	mov	r6, r4
   153c2:	4628      	mov	r0, r5
   153c4:	f816 1b01 	ldrb.w	r1, [r6], #1
   153c8:	4632      	mov	r2, r6
   153ca:	f008 fb91 	bl	1daf0 <bt_conn_is_peer_addr_le>
   153ce:	2800      	cmp	r0, #0
   153d0:	d1d7      	bne.n	15382 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   153d2:	7820      	ldrb	r0, [r4, #0]
   153d4:	4631      	mov	r1, r6
   153d6:	f7fe fcb9 	bl	13d4c <bt_conn_lookup_addr_le>
			if (tmp) {
   153da:	b120      	cbz	r0, 153e6 <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   153dc:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   153de:	f7fe fa8b 	bl	138f8 <bt_conn_unref>
	if (!value_used) {
   153e2:	2d07      	cmp	r5, #7
   153e4:	d0c9      	beq.n	1537a <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   153e6:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   153e8:	2100      	movs	r1, #0
   153ea:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   153ec:	2b00      	cmp	r3, #0
   153ee:	d0c4      	beq.n	1537a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   153f0:	4638      	mov	r0, r7
   153f2:	4798      	blx	r3
   153f4:	e7c1      	b.n	1537a <disconnected_cb+0x16>
   153f6:	bf00      	nop
   153f8:	0001e859 	.word	0x0001e859
   153fc:	200004c8 	.word	0x200004c8

00015400 <bt_gatt_init>:
{
   15400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15402:	4b28      	ldr	r3, [pc, #160]	; (154a4 <bt_gatt_init+0xa4>)
   15404:	f3bf 8f5b 	dmb	ish
   15408:	2201      	movs	r2, #1
   1540a:	e853 1f00 	ldrex	r1, [r3]
   1540e:	2900      	cmp	r1, #0
   15410:	d103      	bne.n	1541a <bt_gatt_init+0x1a>
   15412:	e843 2000 	strex	r0, r2, [r3]
   15416:	2800      	cmp	r0, #0
   15418:	d1f7      	bne.n	1540a <bt_gatt_init+0xa>
   1541a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1541e:	d140      	bne.n	154a2 <bt_gatt_init+0xa2>
   15420:	f3bf 8f5b 	dmb	ish
   15424:	4b20      	ldr	r3, [pc, #128]	; (154a8 <bt_gatt_init+0xa8>)
   15426:	e853 1f00 	ldrex	r1, [r3]
   1542a:	2900      	cmp	r1, #0
   1542c:	d103      	bne.n	15436 <bt_gatt_init+0x36>
   1542e:	e843 2000 	strex	r0, r2, [r3]
   15432:	2800      	cmp	r0, #0
   15434:	d1f7      	bne.n	15426 <bt_gatt_init+0x26>
   15436:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1543a:	d02d      	beq.n	15498 <bt_gatt_init+0x98>
	list->head = NULL;
   1543c:	4b1b      	ldr	r3, [pc, #108]	; (154ac <bt_gatt_init+0xac>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1543e:	491c      	ldr	r1, [pc, #112]	; (154b0 <bt_gatt_init+0xb0>)
   15440:	481c      	ldr	r0, [pc, #112]	; (154b4 <bt_gatt_init+0xb4>)
   15442:	2200      	movs	r2, #0
	list->tail = NULL;
   15444:	e9c3 2200 	strd	r2, r2, [r3]
   15448:	f004 ff20 	bl	1a28c <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1544c:	2300      	movs	r3, #0
   1544e:	4819      	ldr	r0, [pc, #100]	; (154b4 <bt_gatt_init+0xb4>)
   15450:	f44f 72a4 	mov.w	r2, #328	; 0x148
   15454:	f004 ffc2 	bl	1a3dc <k_work_schedule>
}
   15458:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1545c:	4916      	ldr	r1, [pc, #88]	; (154b8 <bt_gatt_init+0xb8>)
   1545e:	4817      	ldr	r0, [pc, #92]	; (154bc <bt_gatt_init+0xbc>)
   15460:	f004 bf14 	b.w	1a28c <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   15464:	4a16      	ldr	r2, [pc, #88]	; (154c0 <bt_gatt_init+0xc0>)
   15466:	6863      	ldr	r3, [r4, #4]
   15468:	8811      	ldrh	r1, [r2, #0]
   1546a:	440b      	add	r3, r1
   1546c:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1546e:	3408      	adds	r4, #8
   15470:	42ac      	cmp	r4, r5
   15472:	d90e      	bls.n	15492 <bt_gatt_init+0x92>
   15474:	4913      	ldr	r1, [pc, #76]	; (154c4 <bt_gatt_init+0xc4>)
   15476:	4814      	ldr	r0, [pc, #80]	; (154c8 <bt_gatt_init+0xc8>)
   15478:	f240 434e 	movw	r3, #1102	; 0x44e
   1547c:	4632      	mov	r2, r6
   1547e:	f007 fa90 	bl	1c9a2 <printk>
   15482:	4812      	ldr	r0, [pc, #72]	; (154cc <bt_gatt_init+0xcc>)
   15484:	f007 fa8d 	bl	1c9a2 <printk>
   15488:	f240 414e 	movw	r1, #1102	; 0x44e
   1548c:	4630      	mov	r0, r6
   1548e:	f007 fce2 	bl	1ce56 <assert_post_action>
   15492:	42bc      	cmp	r4, r7
   15494:	d3e6      	bcc.n	15464 <bt_gatt_init+0x64>
   15496:	e7d1      	b.n	1543c <bt_gatt_init+0x3c>
   15498:	4d0d      	ldr	r5, [pc, #52]	; (154d0 <bt_gatt_init+0xd0>)
   1549a:	4c0e      	ldr	r4, [pc, #56]	; (154d4 <bt_gatt_init+0xd4>)
   1549c:	4e0e      	ldr	r6, [pc, #56]	; (154d8 <bt_gatt_init+0xd8>)
   1549e:	462f      	mov	r7, r5
   154a0:	e7e6      	b.n	15470 <bt_gatt_init+0x70>
}
   154a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   154a4:	20001c8c 	.word	0x20001c8c
   154a8:	20001ca8 	.word	0x20001ca8
   154ac:	20001c74 	.word	0x20001c74
   154b0:	0001ed4b 	.word	0x0001ed4b
   154b4:	20001720 	.word	0x20001720
   154b8:	000158b9 	.word	0x000158b9
   154bc:	20001798 	.word	0x20001798
   154c0:	20001f0e 	.word	0x20001f0e
   154c4:	00020c13 	.word	0x00020c13
   154c8:	0001feb5 	.word	0x0001feb5
   154cc:	0002096c 	.word	0x0002096c
   154d0:	0001f894 	.word	0x0001f894
   154d4:	0001f884 	.word	0x0001f884
   154d8:	00020bc5 	.word	0x00020bc5

000154dc <bt_gatt_attr_get_handle>:
{
   154dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
   154e0:	4604      	mov	r4, r0
   154e2:	b910      	cbnz	r0, 154ea <bt_gatt_attr_get_handle+0xe>
		return 0;
   154e4:	2000      	movs	r0, #0
}
   154e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
   154ea:	8a00      	ldrh	r0, [r0, #16]
   154ec:	2800      	cmp	r0, #0
   154ee:	d1fa      	bne.n	154e6 <bt_gatt_attr_get_handle+0xa>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   154f0:	4f1a      	ldr	r7, [pc, #104]	; (1555c <bt_gatt_attr_get_handle+0x80>)
   154f2:	4d1b      	ldr	r5, [pc, #108]	; (15560 <bt_gatt_attr_get_handle+0x84>)
   154f4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 15570 <bt_gatt_attr_get_handle+0x94>
	uint16_t handle = 1;
   154f8:	2601      	movs	r6, #1
   154fa:	46b8      	mov	r8, r7
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   154fc:	42bd      	cmp	r5, r7
   154fe:	d90e      	bls.n	1551e <bt_gatt_attr_get_handle+0x42>
   15500:	4918      	ldr	r1, [pc, #96]	; (15564 <bt_gatt_attr_get_handle+0x88>)
   15502:	4819      	ldr	r0, [pc, #100]	; (15568 <bt_gatt_attr_get_handle+0x8c>)
   15504:	f240 5377 	movw	r3, #1399	; 0x577
   15508:	464a      	mov	r2, r9
   1550a:	f007 fa4a 	bl	1c9a2 <printk>
   1550e:	4817      	ldr	r0, [pc, #92]	; (1556c <bt_gatt_attr_get_handle+0x90>)
   15510:	f007 fa47 	bl	1c9a2 <printk>
   15514:	f240 5177 	movw	r1, #1399	; 0x577
   15518:	4648      	mov	r0, r9
   1551a:	f007 fc9c 	bl	1ce56 <assert_post_action>
   1551e:	4545      	cmp	r5, r8
   15520:	d2e0      	bcs.n	154e4 <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
   15522:	e9d5 ec00 	ldrd	lr, ip, [r5]
   15526:	4574      	cmp	r4, lr
   15528:	d305      	bcc.n	15536 <bt_gatt_attr_get_handle+0x5a>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1552a:	2114      	movs	r1, #20
   1552c:	fb01 e30c 	mla	r3, r1, ip, lr
   15530:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   15532:	429c      	cmp	r4, r3
   15534:	d90f      	bls.n	15556 <bt_gatt_attr_get_handle+0x7a>
			handle += static_svc->attr_count;
   15536:	eb06 030c 	add.w	r3, r6, ip
   1553a:	b298      	uxth	r0, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1553c:	3508      	adds	r5, #8
   1553e:	4606      	mov	r6, r0
   15540:	e7dc      	b.n	154fc <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
   15542:	fb01 e302 	mla	r3, r1, r2, lr
   15546:	429c      	cmp	r4, r3
   15548:	d0cd      	beq.n	154e6 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1554a:	3201      	adds	r2, #1
   1554c:	18b3      	adds	r3, r6, r2
   1554e:	4562      	cmp	r2, ip
   15550:	b298      	uxth	r0, r3
   15552:	d1f6      	bne.n	15542 <bt_gatt_attr_get_handle+0x66>
   15554:	e7f2      	b.n	1553c <bt_gatt_attr_get_handle+0x60>
   15556:	2200      	movs	r2, #0
   15558:	e7f8      	b.n	1554c <bt_gatt_attr_get_handle+0x70>
   1555a:	bf00      	nop
   1555c:	0001f894 	.word	0x0001f894
   15560:	0001f884 	.word	0x0001f884
   15564:	00020c0c 	.word	0x00020c0c
   15568:	0001feb5 	.word	0x0001feb5
   1556c:	0002096c 	.word	0x0002096c
   15570:	00020bc5 	.word	0x00020bc5

00015574 <bt_gatt_foreach_attr_type>:
{
   15574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15578:	b085      	sub	sp, #20
   1557a:	4607      	mov	r7, r0
   1557c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
   15580:	9301      	str	r3, [sp, #4]
		num_matches = UINT16_MAX;
   15582:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15586:	2d00      	cmp	r5, #0
   15588:	bf08      	it	eq
   1558a:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1558c:	4b2d      	ldr	r3, [pc, #180]	; (15644 <bt_gatt_foreach_attr_type+0xd0>)
{
   1558e:	9102      	str	r1, [sp, #8]
	if (start_handle <= last_static_handle) {
   15590:	881b      	ldrh	r3, [r3, #0]
   15592:	4283      	cmp	r3, r0
{
   15594:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   15596:	d24e      	bcs.n	15636 <bt_gatt_foreach_attr_type+0xc2>
}
   15598:	b005      	add	sp, #20
   1559a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1559e:	6873      	ldr	r3, [r6, #4]
   155a0:	4423      	add	r3, r4
   155a2:	42bb      	cmp	r3, r7
   155a4:	d244      	bcs.n	15630 <bt_gatt_foreach_attr_type+0xbc>
				handle += static_svc->attr_count;
   155a6:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   155a8:	3608      	adds	r6, #8
   155aa:	4556      	cmp	r6, sl
   155ac:	d90e      	bls.n	155cc <bt_gatt_foreach_attr_type+0x58>
   155ae:	4926      	ldr	r1, [pc, #152]	; (15648 <bt_gatt_foreach_attr_type+0xd4>)
   155b0:	4826      	ldr	r0, [pc, #152]	; (1564c <bt_gatt_foreach_attr_type+0xd8>)
   155b2:	f240 633b 	movw	r3, #1595	; 0x63b
   155b6:	465a      	mov	r2, fp
   155b8:	f007 f9f3 	bl	1c9a2 <printk>
   155bc:	4824      	ldr	r0, [pc, #144]	; (15650 <bt_gatt_foreach_attr_type+0xdc>)
   155be:	f007 f9f0 	bl	1c9a2 <printk>
   155c2:	f240 613b 	movw	r1, #1595	; 0x63b
   155c6:	4658      	mov	r0, fp
   155c8:	f007 fc45 	bl	1ce56 <assert_post_action>
   155cc:	4b21      	ldr	r3, [pc, #132]	; (15654 <bt_gatt_foreach_attr_type+0xe0>)
   155ce:	429e      	cmp	r6, r3
   155d0:	d3e5      	bcc.n	1559e <bt_gatt_foreach_attr_type+0x2a>
   155d2:	e7e1      	b.n	15598 <bt_gatt_foreach_attr_type+0x24>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   155d4:	5889      	ldr	r1, [r1, r2]
   155d6:	9303      	str	r3, [sp, #12]
   155d8:	4640      	mov	r0, r8
   155da:	f007 fe52 	bl	1d282 <bt_uuid_cmp>
   155de:	9b03      	ldr	r3, [sp, #12]
   155e0:	b198      	cbz	r0, 1560a <bt_gatt_foreach_attr_type+0x96>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   155e2:	3401      	adds	r4, #1
   155e4:	f109 0901 	add.w	r9, r9, #1
   155e8:	b2a4      	uxth	r4, r4
   155ea:	6873      	ldr	r3, [r6, #4]
   155ec:	454b      	cmp	r3, r9
   155ee:	d9db      	bls.n	155a8 <bt_gatt_foreach_attr_type+0x34>
	if (handle > end_handle) {
   155f0:	9b02      	ldr	r3, [sp, #8]
   155f2:	429c      	cmp	r4, r3
   155f4:	d8d0      	bhi.n	15598 <bt_gatt_foreach_attr_type+0x24>
	if (handle < start_handle) {
   155f6:	42bc      	cmp	r4, r7
   155f8:	d3f3      	bcc.n	155e2 <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   155fa:	2314      	movs	r3, #20
   155fc:	6831      	ldr	r1, [r6, #0]
   155fe:	fb03 f209 	mul.w	r2, r3, r9
   15602:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   15604:	f1b8 0f00 	cmp.w	r8, #0
   15608:	d1e4      	bne.n	155d4 <bt_gatt_foreach_attr_type+0x60>
	if (attr_data && attr_data != attr->user_data) {
   1560a:	9a01      	ldr	r2, [sp, #4]
   1560c:	b95a      	cbnz	r2, 15626 <bt_gatt_foreach_attr_type+0xb2>
	*num_matches -= 1;
   1560e:	3d01      	subs	r5, #1
   15610:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   15612:	4618      	mov	r0, r3
   15614:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15618:	4621      	mov	r1, r4
   1561a:	4798      	blx	r3
	if (!*num_matches) {
   1561c:	2d00      	cmp	r5, #0
   1561e:	d0bb      	beq.n	15598 <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   15620:	2800      	cmp	r0, #0
   15622:	d1de      	bne.n	155e2 <bt_gatt_foreach_attr_type+0x6e>
   15624:	e7b8      	b.n	15598 <bt_gatt_foreach_attr_type+0x24>
	if (attr_data && attr_data != attr->user_data) {
   15626:	68da      	ldr	r2, [r3, #12]
   15628:	9901      	ldr	r1, [sp, #4]
   1562a:	4291      	cmp	r1, r2
   1562c:	d1d9      	bne.n	155e2 <bt_gatt_foreach_attr_type+0x6e>
   1562e:	e7ee      	b.n	1560e <bt_gatt_foreach_attr_type+0x9a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   15630:	f04f 0900 	mov.w	r9, #0
   15634:	e7d9      	b.n	155ea <bt_gatt_foreach_attr_type+0x76>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15636:	4e08      	ldr	r6, [pc, #32]	; (15658 <bt_gatt_foreach_attr_type+0xe4>)
   15638:	f8df a018 	ldr.w	sl, [pc, #24]	; 15654 <bt_gatt_foreach_attr_type+0xe0>
   1563c:	f8df b01c 	ldr.w	fp, [pc, #28]	; 1565c <bt_gatt_foreach_attr_type+0xe8>
		uint16_t handle = 1;
   15640:	2401      	movs	r4, #1
   15642:	e7b2      	b.n	155aa <bt_gatt_foreach_attr_type+0x36>
   15644:	20001f0e 	.word	0x20001f0e
   15648:	00020c0c 	.word	0x00020c0c
   1564c:	0001feb5 	.word	0x0001feb5
   15650:	0002096c 	.word	0x0002096c
   15654:	0001f894 	.word	0x0001f894
   15658:	0001f884 	.word	0x0001f884
   1565c:	00020bc5 	.word	0x00020bc5

00015660 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   15660:	b510      	push	{r4, lr}
   15662:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   15664:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   15666:	aa1c      	add	r2, sp, #112	; 0x70
   15668:	4669      	mov	r1, sp
   1566a:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1566c:	e9cd 3300 	strd	r3, r3, [sp]
   15670:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   15674:	f007 fd07 	bl	1d086 <tc_cmac_setup>
   15678:	b320      	cbz	r0, 156c4 <db_hash_gen.isra.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1567a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1567e:	2001      	movs	r0, #1
   15680:	4a11      	ldr	r2, [pc, #68]	; (156c8 <db_hash_gen.isra.0+0x68>)
   15682:	ab04      	add	r3, sp, #16
   15684:	f009 fb56 	bl	1ed34 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   15688:	4810      	ldr	r0, [pc, #64]	; (156cc <db_hash_gen.isra.0+0x6c>)
   1568a:	a904      	add	r1, sp, #16
   1568c:	f007 fd92 	bl	1d1b4 <tc_cmac_final>
   15690:	b1c0      	cbz	r0, 156c4 <db_hash_gen.isra.0+0x64>
   15692:	4b0e      	ldr	r3, [pc, #56]	; (156cc <db_hash_gen.isra.0+0x6c>)
   15694:	2208      	movs	r2, #8
   15696:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1569a:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1569c:	780c      	ldrb	r4, [r1, #0]
   1569e:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   156a2:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   156a4:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   156a8:	d1f7      	bne.n	1569a <db_hash_gen.isra.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   156aa:	f3bf 8f5b 	dmb	ish
   156ae:	4b08      	ldr	r3, [pc, #32]	; (156d0 <db_hash_gen.isra.0+0x70>)
   156b0:	e853 2f00 	ldrex	r2, [r3]
   156b4:	f042 0204 	orr.w	r2, r2, #4
   156b8:	e843 2100 	strex	r1, r2, [r3]
   156bc:	2900      	cmp	r1, #0
   156be:	d1f7      	bne.n	156b0 <db_hash_gen.isra.0+0x50>
   156c0:	f3bf 8f5b 	dmb	ish
}
   156c4:	b048      	add	sp, #288	; 0x120
   156c6:	bd10      	pop	{r4, pc}
   156c8:	0001e71b 	.word	0x0001e71b
   156cc:	20001710 	.word	0x20001710
   156d0:	200017c8 	.word	0x200017c8

000156d4 <gatt_indicate>:
{
   156d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   156d8:	4615      	mov	r5, r2
   156da:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   156dc:	2214      	movs	r2, #20
   156de:	6869      	ldr	r1, [r5, #4]
{
   156e0:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   156e2:	f009 fb34 	bl	1ed4e <bt_gatt_check_perm>
   156e6:	2800      	cmp	r0, #0
   156e8:	d139      	bne.n	1575e <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   156ea:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   156ee:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   156f0:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   156f2:	f7ff fbef 	bl	14ed4 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   156f6:	3602      	adds	r6, #2
	if (!req) {
   156f8:	4604      	mov	r4, r0
   156fa:	b920      	cbnz	r0, 15706 <gatt_indicate+0x32>
		return -ENOMEM;
   156fc:	f06f 050b 	mvn.w	r5, #11
}
   15700:	4628      	mov	r0, r5
   15702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   15706:	4b17      	ldr	r3, [pc, #92]	; (15764 <gatt_indicate+0x90>)
   15708:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1570a:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1570c:	4632      	mov	r2, r6
   1570e:	211d      	movs	r1, #29
   15710:	4640      	mov	r0, r8
   15712:	f008 ff68 	bl	1e5e6 <bt_att_create_pdu>
	if (!buf) {
   15716:	4606      	mov	r6, r0
   15718:	b918      	cbnz	r0, 15722 <gatt_indicate+0x4e>
		bt_att_req_free(req);
   1571a:	4620      	mov	r0, r4
   1571c:	f7ff fbf0 	bl	14f00 <bt_att_req_free>
   15720:	e7ec      	b.n	156fc <gatt_indicate+0x28>
   15722:	f100 0a08 	add.w	sl, r0, #8
   15726:	2102      	movs	r1, #2
   15728:	4650      	mov	r0, sl
   1572a:	f000 fe3d 	bl	163a8 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1572e:	4607      	mov	r7, r0
   15730:	8aa9      	ldrh	r1, [r5, #20]
   15732:	f827 9b02 	strh.w	r9, [r7], #2
   15736:	4650      	mov	r0, sl
   15738:	f000 fe36 	bl	163a8 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1573c:	8aaa      	ldrh	r2, [r5, #20]
   1573e:	6929      	ldr	r1, [r5, #16]
   15740:	4638      	mov	r0, r7
   15742:	f009 ff23 	bl	1f58c <memcpy>
	req->buf = buf;
   15746:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   15748:	4621      	mov	r1, r4
   1574a:	4640      	mov	r0, r8
   1574c:	f7ff fcf4 	bl	15138 <bt_att_req_send>
	if (err) {
   15750:	4605      	mov	r5, r0
   15752:	2800      	cmp	r0, #0
   15754:	d0d4      	beq.n	15700 <gatt_indicate+0x2c>
		bt_att_req_free(req);
   15756:	4620      	mov	r0, r4
   15758:	f7ff fbd2 	bl	14f00 <bt_att_req_free>
   1575c:	e7d0      	b.n	15700 <gatt_indicate+0x2c>
		return -EPERM;
   1575e:	f04f 35ff 	mov.w	r5, #4294967295
   15762:	e7cd      	b.n	15700 <gatt_indicate+0x2c>
   15764:	0001e6ed 	.word	0x0001e6ed

00015768 <bt_gatt_indicate>:
{
   15768:	b530      	push	{r4, r5, lr}
   1576a:	4605      	mov	r5, r0
   1576c:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1576e:	460c      	mov	r4, r1
   15770:	b971      	cbnz	r1, 15790 <bt_gatt_indicate+0x28>
   15772:	4949      	ldr	r1, [pc, #292]	; (15898 <bt_gatt_indicate+0x130>)
   15774:	4a49      	ldr	r2, [pc, #292]	; (1589c <bt_gatt_indicate+0x134>)
   15776:	484a      	ldr	r0, [pc, #296]	; (158a0 <bt_gatt_indicate+0x138>)
   15778:	f640 1338 	movw	r3, #2360	; 0x938
   1577c:	f007 f911 	bl	1c9a2 <printk>
   15780:	4848      	ldr	r0, [pc, #288]	; (158a4 <bt_gatt_indicate+0x13c>)
   15782:	f007 f90e 	bl	1c9a2 <printk>
   15786:	4845      	ldr	r0, [pc, #276]	; (1589c <bt_gatt_indicate+0x134>)
   15788:	f640 1138 	movw	r1, #2360	; 0x938
   1578c:	f007 fb63 	bl	1ce56 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   15790:	6863      	ldr	r3, [r4, #4]
   15792:	b983      	cbnz	r3, 157b6 <bt_gatt_indicate+0x4e>
   15794:	6823      	ldr	r3, [r4, #0]
   15796:	b973      	cbnz	r3, 157b6 <bt_gatt_indicate+0x4e>
   15798:	4943      	ldr	r1, [pc, #268]	; (158a8 <bt_gatt_indicate+0x140>)
   1579a:	4a40      	ldr	r2, [pc, #256]	; (1589c <bt_gatt_indicate+0x134>)
   1579c:	4840      	ldr	r0, [pc, #256]	; (158a0 <bt_gatt_indicate+0x138>)
   1579e:	f640 1339 	movw	r3, #2361	; 0x939
   157a2:	f007 f8fe 	bl	1c9a2 <printk>
   157a6:	483f      	ldr	r0, [pc, #252]	; (158a4 <bt_gatt_indicate+0x13c>)
   157a8:	f007 f8fb 	bl	1c9a2 <printk>
   157ac:	483b      	ldr	r0, [pc, #236]	; (1589c <bt_gatt_indicate+0x134>)
   157ae:	f640 1139 	movw	r1, #2361	; 0x939
   157b2:	f007 fb50 	bl	1ce56 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   157b6:	f3bf 8f5b 	dmb	ish
   157ba:	4b3c      	ldr	r3, [pc, #240]	; (158ac <bt_gatt_indicate+0x144>)
   157bc:	681b      	ldr	r3, [r3, #0]
   157be:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   157c2:	079a      	lsls	r2, r3, #30
   157c4:	d561      	bpl.n	1588a <bt_gatt_indicate+0x122>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   157c6:	b115      	cbz	r5, 157ce <bt_gatt_indicate+0x66>
   157c8:	7aab      	ldrb	r3, [r5, #10]
   157ca:	2b07      	cmp	r3, #7
   157cc:	d160      	bne.n	15890 <bt_gatt_indicate+0x128>
	data.attr = params->attr;
   157ce:	6860      	ldr	r0, [r4, #4]
   157d0:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   157d2:	f7ff fe83 	bl	154dc <bt_gatt_attr_get_handle>
	if (params->uuid) {
   157d6:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   157d8:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   157dc:	b33a      	cbz	r2, 1582e <bt_gatt_indicate+0xc6>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   157de:	a905      	add	r1, sp, #20
   157e0:	9102      	str	r1, [sp, #8]
   157e2:	4933      	ldr	r1, [pc, #204]	; (158b0 <bt_gatt_indicate+0x148>)
   157e4:	9101      	str	r1, [sp, #4]
   157e6:	2101      	movs	r1, #1
	found->attr = NULL;
   157e8:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   157ea:	9100      	str	r1, [sp, #0]
   157ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   157f0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   157f2:	f7ff febf 	bl	15574 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   157f6:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   157f8:	b91b      	cbnz	r3, 15802 <bt_gatt_indicate+0x9a>
			return -ENOENT;
   157fa:	f06f 0001 	mvn.w	r0, #1
}
   157fe:	b00b      	add	sp, #44	; 0x2c
   15800:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   15802:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   15804:	9b05      	ldr	r3, [sp, #20]
   15806:	6818      	ldr	r0, [r3, #0]
   15808:	2300      	movs	r3, #0
   1580a:	f88d 3010 	strb.w	r3, [sp, #16]
   1580e:	a904      	add	r1, sp, #16
   15810:	f642 0303 	movw	r3, #10243	; 0x2803
   15814:	f8ad 3012 	strh.w	r3, [sp, #18]
   15818:	f007 fd33 	bl	1d282 <bt_uuid_cmp>
   1581c:	b970      	cbnz	r0, 1583c <bt_gatt_indicate+0xd4>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1581e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   15820:	68c3      	ldr	r3, [r0, #12]
   15822:	799b      	ldrb	r3, [r3, #6]
   15824:	069b      	lsls	r3, r3, #26
   15826:	d405      	bmi.n	15834 <bt_gatt_indicate+0xcc>
			return -EINVAL;
   15828:	f06f 0015 	mvn.w	r0, #21
   1582c:	e7e7      	b.n	157fe <bt_gatt_indicate+0x96>
		if (!data.handle) {
   1582e:	2800      	cmp	r0, #0
   15830:	d1e8      	bne.n	15804 <bt_gatt_indicate+0x9c>
   15832:	e7e2      	b.n	157fa <bt_gatt_indicate+0x92>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   15834:	f009 fa37 	bl	1eca6 <bt_gatt_attr_value_handle>
   15838:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1583c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   15840:	b13d      	cbz	r5, 15852 <bt_gatt_indicate+0xea>
		params->_ref = 1;
   15842:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   15844:	4601      	mov	r1, r0
		params->_ref = 1;
   15846:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   15848:	4622      	mov	r2, r4
   1584a:	4628      	mov	r0, r5
   1584c:	f7ff ff42 	bl	156d4 <gatt_indicate>
   15850:	e7d5      	b.n	157fe <bt_gatt_indicate+0x96>
	data.err = -ENOTCONN;
   15852:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   15856:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   15858:	2302      	movs	r3, #2
   1585a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1585e:	f642 1302 	movw	r3, #10498	; 0x2902
   15862:	f8ad 3012 	strh.w	r3, [sp, #18]
   15866:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   15868:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1586a:	9302      	str	r3, [sp, #8]
   1586c:	4b11      	ldr	r3, [pc, #68]	; (158b4 <bt_gatt_indicate+0x14c>)
   1586e:	9301      	str	r3, [sp, #4]
   15870:	2301      	movs	r3, #1
   15872:	9300      	str	r3, [sp, #0]
   15874:	aa04      	add	r2, sp, #16
   15876:	462b      	mov	r3, r5
   15878:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1587c:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1587e:	f88d 5010 	strb.w	r5, [sp, #16]
   15882:	f7ff fe77 	bl	15574 <bt_gatt_foreach_attr_type>
	return data.err;
   15886:	9807      	ldr	r0, [sp, #28]
   15888:	e7b9      	b.n	157fe <bt_gatt_indicate+0x96>
		return -EAGAIN;
   1588a:	f06f 000a 	mvn.w	r0, #10
   1588e:	e7b6      	b.n	157fe <bt_gatt_indicate+0x96>
		return -ENOTCONN;
   15890:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15894:	e7b3      	b.n	157fe <bt_gatt_indicate+0x96>
   15896:	bf00      	nop
   15898:	00020c3b 	.word	0x00020c3b
   1589c:	00020bc5 	.word	0x00020bc5
   158a0:	0001feb5 	.word	0x0001feb5
   158a4:	00020c42 	.word	0x00020c42
   158a8:	00020c58 	.word	0x00020c58
   158ac:	2000036c 	.word	0x2000036c
   158b0:	0001e713 	.word	0x0001e713
   158b4:	0001595d 	.word	0x0001595d

000158b8 <sc_process>:
{
   158b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   158ba:	f3bf 8f5b 	dmb	ish
   158be:	6b03      	ldr	r3, [r0, #48]	; 0x30
   158c0:	f3bf 8f5b 	dmb	ish
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   158c4:	079b      	lsls	r3, r3, #30
{
   158c6:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   158c8:	f100 0530 	add.w	r5, r0, #48	; 0x30
   158cc:	d50e      	bpl.n	158ec <sc_process+0x34>
   158ce:	491d      	ldr	r1, [pc, #116]	; (15944 <sc_process+0x8c>)
   158d0:	4a1d      	ldr	r2, [pc, #116]	; (15948 <sc_process+0x90>)
   158d2:	481e      	ldr	r0, [pc, #120]	; (1594c <sc_process+0x94>)
   158d4:	f44f 7379 	mov.w	r3, #996	; 0x3e4
   158d8:	f007 f863 	bl	1c9a2 <printk>
   158dc:	481c      	ldr	r0, [pc, #112]	; (15950 <sc_process+0x98>)
   158de:	f007 f860 	bl	1c9a2 <printk>
   158e2:	4819      	ldr	r0, [pc, #100]	; (15948 <sc_process+0x90>)
   158e4:	f44f 7179 	mov.w	r1, #996	; 0x3e4
   158e8:	f007 fab5 	bl	1ce56 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   158ec:	f854 3c08 	ldr.w	r3, [r4, #-8]
   158f0:	9301      	str	r3, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   158f2:	f3bf 8f5b 	dmb	ish
   158f6:	e855 3f00 	ldrex	r3, [r5]
   158fa:	f023 0301 	bic.w	r3, r3, #1
   158fe:	e845 3200 	strex	r2, r3, [r5]
   15902:	2a00      	cmp	r2, #0
   15904:	d1f7      	bne.n	158f6 <sc_process+0x3e>
   15906:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1590a:	4b12      	ldr	r3, [pc, #72]	; (15954 <sc_process+0x9c>)
   1590c:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   15910:	4b11      	ldr	r3, [pc, #68]	; (15958 <sc_process+0xa0>)
   15912:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   15916:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   15918:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1591a:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1591e:	2304      	movs	r3, #4
	sc->start = 0U;
   15920:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   15924:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   15928:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1592c:	f1a4 0120 	sub.w	r1, r4, #32
   15930:	f7ff ff1a 	bl	15768 <bt_gatt_indicate>
   15934:	b918      	cbnz	r0, 1593e <sc_process+0x86>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   15936:	2101      	movs	r1, #1
   15938:	4628      	mov	r0, r5
   1593a:	f009 f8c3 	bl	1eac4 <atomic_set_bit>
}
   1593e:	b003      	add	sp, #12
   15940:	bd30      	pop	{r4, r5, pc}
   15942:	bf00      	nop
   15944:	00020c75 	.word	0x00020c75
   15948:	00020bc5 	.word	0x00020bc5
   1594c:	0001feb5 	.word	0x0001feb5
   15950:	00020ca6 	.word	0x00020ca6
   15954:	0001fb9c 	.word	0x0001fb9c
   15958:	000152e5 	.word	0x000152e5

0001595c <notify_cb>:
{
   1595c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1595e:	4b32      	ldr	r3, [pc, #200]	; (15a28 <notify_cb+0xcc>)
{
   15960:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   15962:	6882      	ldr	r2, [r0, #8]
   15964:	429a      	cmp	r2, r3
{
   15966:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   15968:	d12d      	bne.n	159c6 <notify_cb+0x6a>
	ccc = attr->user_data;
   1596a:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1596c:	4b2f      	ldr	r3, [pc, #188]	; (15a2c <notify_cb+0xd0>)
   1596e:	429f      	cmp	r7, r3
   15970:	d119      	bne.n	159a6 <notify_cb+0x4a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   15972:	4d2f      	ldr	r5, [pc, #188]	; (15a30 <notify_cb+0xd4>)
   15974:	2300      	movs	r3, #0
   15976:	4669      	mov	r1, sp
   15978:	1c68      	adds	r0, r5, #1
   1597a:	9300      	str	r3, [sp, #0]
   1597c:	f8cd 3003 	str.w	r3, [sp, #3]
   15980:	f008 ff21 	bl	1e7c6 <bt_addr_le_cmp>
   15984:	b178      	cbz	r0, 159a6 <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   15986:	4629      	mov	r1, r5
   15988:	2207      	movs	r2, #7
   1598a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1598e:	f7fe f9fb 	bl	13d88 <bt_conn_lookup_state_le>
			if (!conn) {
   15992:	b9e0      	cbnz	r0, 159ce <notify_cb+0x72>
				sc = (struct sc_data *)data->ind_params->data;
   15994:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   15996:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   15998:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1599a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1599e:	8853      	ldrh	r3, [r2, #2]
   159a0:	8812      	ldrh	r2, [r2, #0]
   159a2:	f008 ff32 	bl	1e80a <sc_save>
		if (cfg->value != data->type) {
   159a6:	893a      	ldrh	r2, [r7, #8]
   159a8:	89a3      	ldrh	r3, [r4, #12]
   159aa:	429a      	cmp	r2, r3
   159ac:	d10b      	bne.n	159c6 <notify_cb+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   159ae:	4639      	mov	r1, r7
   159b0:	f811 0b01 	ldrb.w	r0, [r1], #1
   159b4:	f7fe f9ca 	bl	13d4c <bt_conn_lookup_addr_le>
		if (!conn) {
   159b8:	4605      	mov	r5, r0
   159ba:	b120      	cbz	r0, 159c6 <notify_cb+0x6a>
		if (conn->state != BT_CONN_CONNECTED) {
   159bc:	7a83      	ldrb	r3, [r0, #10]
   159be:	2b07      	cmp	r3, #7
   159c0:	d008      	beq.n	159d4 <notify_cb+0x78>
			bt_conn_unref(conn);
   159c2:	f7fd ff99 	bl	138f8 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   159c6:	2701      	movs	r7, #1
}
   159c8:	4638      	mov	r0, r7
   159ca:	b003      	add	sp, #12
   159cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   159ce:	f7fd ff93 	bl	138f8 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   159d2:	e7e8      	b.n	159a6 <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   159d4:	697b      	ldr	r3, [r7, #20]
   159d6:	b123      	cbz	r3, 159e2 <notify_cb+0x86>
   159d8:	4631      	mov	r1, r6
   159da:	4798      	blx	r3
   159dc:	b908      	cbnz	r0, 159e2 <notify_cb+0x86>
			bt_conn_unref(conn);
   159de:	4628      	mov	r0, r5
   159e0:	e7ef      	b.n	159c2 <notify_cb+0x66>
		if (bt_gatt_check_perm(conn, attr,
   159e2:	2214      	movs	r2, #20
   159e4:	4631      	mov	r1, r6
   159e6:	4628      	mov	r0, r5
   159e8:	f009 f9b1 	bl	1ed4e <bt_gatt_check_perm>
   159ec:	4607      	mov	r7, r0
   159ee:	2800      	cmp	r0, #0
   159f0:	d1e9      	bne.n	159c6 <notify_cb+0x6a>
		if (data->type == BT_GATT_CCC_INDICATE) {
   159f2:	89a3      	ldrh	r3, [r4, #12]
   159f4:	88a1      	ldrh	r1, [r4, #4]
   159f6:	6922      	ldr	r2, [r4, #16]
   159f8:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   159fa:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   159fc:	d10f      	bne.n	15a1e <notify_cb+0xc2>
			err = gatt_indicate(conn, data->handle,
   159fe:	f7ff fe69 	bl	156d4 <gatt_indicate>
			if (err == 0) {
   15a02:	4606      	mov	r6, r0
   15a04:	b918      	cbnz	r0, 15a0e <notify_cb+0xb2>
				data->ind_params->_ref++;
   15a06:	6922      	ldr	r2, [r4, #16]
   15a08:	7d93      	ldrb	r3, [r2, #22]
   15a0a:	3301      	adds	r3, #1
   15a0c:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   15a0e:	4628      	mov	r0, r5
   15a10:	f7fd ff72 	bl	138f8 <bt_conn_unref>
		if (err < 0) {
   15a14:	2e00      	cmp	r6, #0
   15a16:	dbd7      	blt.n	159c8 <notify_cb+0x6c>
		data->err = 0;
   15a18:	2300      	movs	r3, #0
   15a1a:	60a3      	str	r3, [r4, #8]
   15a1c:	e7d3      	b.n	159c6 <notify_cb+0x6a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   15a1e:	f009 f9b9 	bl	1ed94 <gatt_notify>
   15a22:	4606      	mov	r6, r0
   15a24:	e7f3      	b.n	15a0e <notify_cb+0xb2>
   15a26:	bf00      	nop
   15a28:	0001e859 	.word	0x0001e859
   15a2c:	200004c8 	.word	0x200004c8
   15a30:	20001f10 	.word	0x20001f10

00015a34 <update_ccc>:
{
   15a34:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   15a36:	4b26      	ldr	r3, [pc, #152]	; (15ad0 <update_ccc+0x9c>)
	struct bt_conn *conn = data->conn;
   15a38:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   15a3a:	6882      	ldr	r2, [r0, #8]
   15a3c:	429a      	cmp	r2, r3
{
   15a3e:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   15a40:	d142      	bne.n	15ac8 <update_ccc+0x94>
	ccc = attr->user_data;
   15a42:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   15a44:	8933      	ldrh	r3, [r6, #8]
   15a46:	2b00      	cmp	r3, #0
   15a48:	d03e      	beq.n	15ac8 <update_ccc+0x94>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   15a4a:	4632      	mov	r2, r6
   15a4c:	4628      	mov	r0, r5
   15a4e:	f812 1b01 	ldrb.w	r1, [r2], #1
   15a52:	f008 f84d 	bl	1daf0 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   15a56:	2800      	cmp	r0, #0
   15a58:	d036      	beq.n	15ac8 <update_ccc+0x94>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   15a5a:	222a      	movs	r2, #42	; 0x2a
   15a5c:	4621      	mov	r1, r4
   15a5e:	4628      	mov	r0, r5
   15a60:	f009 f975 	bl	1ed4e <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   15a64:	2803      	cmp	r0, #3
   15a66:	d02f      	beq.n	15ac8 <update_ccc+0x94>
		gatt_ccc_changed(attr, ccc);
   15a68:	4631      	mov	r1, r6
   15a6a:	4620      	mov	r0, r4
   15a6c:	f008 fe34 	bl	1e6d8 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   15a70:	4b18      	ldr	r3, [pc, #96]	; (15ad4 <update_ccc+0xa0>)
   15a72:	429e      	cmp	r6, r3
   15a74:	d128      	bne.n	15ac8 <update_ccc+0x94>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   15a76:	7a28      	ldrb	r0, [r5, #8]
   15a78:	f105 0190 	add.w	r1, r5, #144	; 0x90
   15a7c:	f7ff fbe4 	bl	15248 <find_sc_cfg>
	if (!cfg) {
   15a80:	4604      	mov	r4, r0
   15a82:	b308      	cbz	r0, 15ac8 <update_ccc+0x94>
	if (!(cfg->data.start || cfg->data.end)) {
   15a84:	8902      	ldrh	r2, [r0, #8]
   15a86:	8943      	ldrh	r3, [r0, #10]
   15a88:	ea53 0102 	orrs.w	r1, r3, r2
   15a8c:	d01c      	beq.n	15ac8 <update_ccc+0x94>
	index = bt_conn_index(conn);
   15a8e:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   15a90:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   15a94:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   15a98:	f7fe f82e 	bl	13af8 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   15a9c:	490e      	ldr	r1, [pc, #56]	; (15ad8 <update_ccc+0xa4>)
   15a9e:	4a0f      	ldr	r2, [pc, #60]	; (15adc <update_ccc+0xa8>)
   15aa0:	2318      	movs	r3, #24
   15aa2:	fb03 1300 	mla	r3, r3, r0, r1
   15aa6:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   15aa8:	4a0d      	ldr	r2, [pc, #52]	; (15ae0 <update_ccc+0xac>)
   15aaa:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   15aac:	aa01      	add	r2, sp, #4
   15aae:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   15ab0:	2204      	movs	r2, #4
   15ab2:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   15ab4:	b203      	sxth	r3, r0
   15ab6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15aba:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   15abe:	4628      	mov	r0, r5
   15ac0:	f7ff fe52 	bl	15768 <bt_gatt_indicate>
__ssp_bos_icheck3(memset, void *, int)
   15ac4:	2300      	movs	r3, #0
   15ac6:	60a3      	str	r3, [r4, #8]
}
   15ac8:	2001      	movs	r0, #1
   15aca:	b002      	add	sp, #8
   15acc:	bd70      	pop	{r4, r5, r6, pc}
   15ace:	bf00      	nop
   15ad0:	0001e859 	.word	0x0001e859
   15ad4:	200004c8 	.word	0x200004c8
   15ad8:	20001c90 	.word	0x20001c90
   15adc:	0001fb9c 	.word	0x0001fb9c
   15ae0:	0001eae1 	.word	0x0001eae1

00015ae4 <bt_gatt_unsubscribe>:
	return 0;
}

int bt_gatt_unsubscribe(struct bt_conn *conn,
			struct bt_gatt_subscribe_params *params)
{
   15ae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ae8:	460d      	mov	r5, r1
	struct gatt_sub *sub;
	struct bt_gatt_subscribe_params *tmp, *next;
	bool has_subscription = false, found = false;
	sys_snode_t *prev = NULL;

	__ASSERT(conn, "invalid parameters\n");
   15aea:	4607      	mov	r7, r0
   15aec:	b970      	cbnz	r0, 15b0c <bt_gatt_unsubscribe+0x28>
   15aee:	494b      	ldr	r1, [pc, #300]	; (15c1c <bt_gatt_unsubscribe+0x138>)
   15af0:	4a4b      	ldr	r2, [pc, #300]	; (15c20 <bt_gatt_unsubscribe+0x13c>)
   15af2:	484c      	ldr	r0, [pc, #304]	; (15c24 <bt_gatt_unsubscribe+0x140>)
   15af4:	f241 13e3 	movw	r3, #4579	; 0x11e3
   15af8:	f006 ff53 	bl	1c9a2 <printk>
   15afc:	484a      	ldr	r0, [pc, #296]	; (15c28 <bt_gatt_unsubscribe+0x144>)
   15afe:	f006 ff50 	bl	1c9a2 <printk>
   15b02:	4847      	ldr	r0, [pc, #284]	; (15c20 <bt_gatt_unsubscribe+0x13c>)
   15b04:	f241 11e3 	movw	r1, #4579	; 0x11e3
   15b08:	f007 f9a5 	bl	1ce56 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   15b0c:	b975      	cbnz	r5, 15b2c <bt_gatt_unsubscribe+0x48>
   15b0e:	4947      	ldr	r1, [pc, #284]	; (15c2c <bt_gatt_unsubscribe+0x148>)
   15b10:	4a43      	ldr	r2, [pc, #268]	; (15c20 <bt_gatt_unsubscribe+0x13c>)
   15b12:	4844      	ldr	r0, [pc, #272]	; (15c24 <bt_gatt_unsubscribe+0x140>)
   15b14:	f241 13e4 	movw	r3, #4580	; 0x11e4
   15b18:	f006 ff43 	bl	1c9a2 <printk>
   15b1c:	4842      	ldr	r0, [pc, #264]	; (15c28 <bt_gatt_unsubscribe+0x144>)
   15b1e:	f006 ff40 	bl	1c9a2 <printk>
   15b22:	483f      	ldr	r0, [pc, #252]	; (15c20 <bt_gatt_unsubscribe+0x13c>)
   15b24:	f241 11e4 	movw	r1, #4580	; 0x11e4
   15b28:	f007 f995 	bl	1ce56 <assert_post_action>

	if (conn->state != BT_CONN_CONNECTED) {
   15b2c:	7abb      	ldrb	r3, [r7, #10]
   15b2e:	2b07      	cmp	r3, #7
   15b30:	d170      	bne.n	15c14 <bt_gatt_unsubscribe+0x130>
		return -ENOTCONN;
	}

	sub = gatt_sub_find(conn);
   15b32:	4638      	mov	r0, r7
   15b34:	f7ff fb98 	bl	15268 <gatt_sub_find>
	if (!sub) {
   15b38:	4606      	mov	r6, r0
   15b3a:	b918      	cbnz	r0, 15b44 <bt_gatt_unsubscribe+0x60>
		return -EINVAL;
   15b3c:	f06f 0015 	mvn.w	r0, #21
	}

	params->value = 0x0000;

	return gatt_write_ccc(conn, params);
}
   15b40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15b44:	6884      	ldr	r4, [r0, #8]
   15b46:	b1f4      	cbz	r4, 15b86 <bt_gatt_unsubscribe+0xa2>
   15b48:	f1b4 0314 	subs.w	r3, r4, #20
   15b4c:	d01d      	beq.n	15b8a <bt_gatt_unsubscribe+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15b4e:	6824      	ldr	r4, [r4, #0]
   15b50:	b104      	cbz	r4, 15b54 <bt_gatt_unsubscribe+0x70>
   15b52:	3c14      	subs	r4, #20
   15b54:	f04f 0800 	mov.w	r8, #0
   15b58:	46c2      	mov	sl, r8
   15b5a:	46c1      	mov	r9, r8
	parent->next = child;
   15b5c:	46c3      	mov	fp, r8
   15b5e:	b9b3      	cbnz	r3, 15b8e <bt_gatt_unsubscribe+0xaa>
	if (!found) {
   15b60:	f1ba 0f00 	cmp.w	sl, #0
   15b64:	d0ea      	beq.n	15b3c <bt_gatt_unsubscribe+0x58>
	if (gatt_sub_is_empty(sub)) {
   15b66:	68b3      	ldr	r3, [r6, #8]
   15b68:	b913      	cbnz	r3, 15b70 <bt_gatt_unsubscribe+0x8c>
		gatt_sub_free(sub);
   15b6a:	4630      	mov	r0, r6
   15b6c:	f7ff fb9a 	bl	152a4 <gatt_sub_free>
	if (has_subscription) {
   15b70:	f1b9 0f00 	cmp.w	r9, #0
   15b74:	d046      	beq.n	15c04 <bt_gatt_unsubscribe+0x120>
		params->notify(conn, params, NULL, 0);
   15b76:	2300      	movs	r3, #0
   15b78:	682c      	ldr	r4, [r5, #0]
   15b7a:	461a      	mov	r2, r3
   15b7c:	4629      	mov	r1, r5
   15b7e:	4638      	mov	r0, r7
   15b80:	47a0      	blx	r4
		return 0;
   15b82:	2000      	movs	r0, #0
   15b84:	e7dc      	b.n	15b40 <bt_gatt_unsubscribe+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15b86:	4623      	mov	r3, r4
   15b88:	e7e4      	b.n	15b54 <bt_gatt_unsubscribe+0x70>
   15b8a:	461c      	mov	r4, r3
   15b8c:	e7e2      	b.n	15b54 <bt_gatt_unsubscribe+0x70>
		if (params == tmp) {
   15b8e:	42ab      	cmp	r3, r5
   15b90:	f103 0114 	add.w	r1, r3, #20
   15b94:	d129      	bne.n	15bea <bt_gatt_unsubscribe+0x106>
Z_GENLIST_REMOVE(slist, snode)
   15b96:	6958      	ldr	r0, [r3, #20]
   15b98:	f1b8 0f00 	cmp.w	r8, #0
   15b9c:	d11d      	bne.n	15bda <bt_gatt_unsubscribe+0xf6>
   15b9e:	68f2      	ldr	r2, [r6, #12]
	list->head = node;
   15ba0:	60b0      	str	r0, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   15ba2:	4291      	cmp	r1, r2
   15ba4:	d100      	bne.n	15ba8 <bt_gatt_unsubscribe+0xc4>
	list->tail = node;
   15ba6:	60f0      	str	r0, [r6, #12]
	parent->next = child;
   15ba8:	f8c3 b014 	str.w	fp, [r3, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15bac:	f3bf 8f5b 	dmb	ish
   15bb0:	692b      	ldr	r3, [r5, #16]
   15bb2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15bb6:	f3c3 0a80 	ubfx	sl, r3, #2, #1
			if (atomic_test_bit(params->flags,
   15bba:	075b      	lsls	r3, r3, #29
   15bbc:	d51d      	bpl.n	15bfa <bt_gatt_unsubscribe+0x116>

void bt_gatt_cancel(struct bt_conn *conn, void *params)
{
	bt_att_req_cancel(conn, params);
   15bbe:	4629      	mov	r1, r5
   15bc0:	4638      	mov	r0, r7
   15bc2:	f7ff faf3 	bl	151ac <bt_att_req_cancel>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15bc6:	b1dc      	cbz	r4, 15c00 <bt_gatt_unsubscribe+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15bc8:	f114 0214 	adds.w	r2, r4, #20
   15bcc:	d002      	beq.n	15bd4 <bt_gatt_unsubscribe+0xf0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15bce:	6962      	ldr	r2, [r4, #20]
   15bd0:	b102      	cbz	r2, 15bd4 <bt_gatt_unsubscribe+0xf0>
   15bd2:	3a14      	subs	r2, #20
   15bd4:	4623      	mov	r3, r4
   15bd6:	4614      	mov	r4, r2
   15bd8:	e7c1      	b.n	15b5e <bt_gatt_unsubscribe+0x7a>
	parent->next = child;
   15bda:	f8c8 0000 	str.w	r0, [r8]
Z_GENLIST_REMOVE(slist, snode)
   15bde:	68f2      	ldr	r2, [r6, #12]
   15be0:	4291      	cmp	r1, r2
	list->tail = node;
   15be2:	bf08      	it	eq
   15be4:	f8c6 800c 	streq.w	r8, [r6, #12]
}
   15be8:	e7de      	b.n	15ba8 <bt_gatt_unsubscribe+0xc4>
		if (tmp->value_handle == params->value_handle) {
   15bea:	891a      	ldrh	r2, [r3, #8]
   15bec:	892b      	ldrh	r3, [r5, #8]
   15bee:	4688      	mov	r8, r1
   15bf0:	429a      	cmp	r2, r3
   15bf2:	bf08      	it	eq
   15bf4:	f04f 0901 	moveq.w	r9, #1
   15bf8:	e7e5      	b.n	15bc6 <bt_gatt_unsubscribe+0xe2>
			found = true;
   15bfa:	f04f 0a01 	mov.w	sl, #1
   15bfe:	e7e2      	b.n	15bc6 <bt_gatt_unsubscribe+0xe2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15c00:	4622      	mov	r2, r4
   15c02:	e7e7      	b.n	15bd4 <bt_gatt_unsubscribe+0xf0>
	params->value = 0x0000;
   15c04:	f8a5 900c 	strh.w	r9, [r5, #12]
	return gatt_write_ccc(conn, params);
   15c08:	4629      	mov	r1, r5
   15c0a:	4638      	mov	r0, r7
}
   15c0c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params);
   15c10:	f7ff bb96 	b.w	15340 <gatt_write_ccc>
		return -ENOTCONN;
   15c14:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15c18:	e792      	b.n	15b40 <bt_gatt_unsubscribe+0x5c>
   15c1a:	bf00      	nop
   15c1c:	00020bc0 	.word	0x00020bc0
   15c20:	00020bc5 	.word	0x00020bc5
   15c24:	0001feb5 	.word	0x0001feb5
   15c28:	00020c42 	.word	0x00020c42
   15c2c:	00020c3b 	.word	0x00020c3b

00015c30 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   15c30:	b573      	push	{r0, r1, r4, r5, r6, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   15c32:	4a17      	ldr	r2, [pc, #92]	; (15c90 <bt_gatt_connected+0x60>)
	data.conn = conn;
   15c34:	9000      	str	r0, [sp, #0]
{
   15c36:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   15c38:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   15c3a:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   15c3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   15c40:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   15c44:	f009 f876 	bl	1ed34 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   15c48:	4628      	mov	r0, r5
   15c4a:	f7ff fb0d 	bl	15268 <gatt_sub_find>
	if (!sub) {
   15c4e:	b128      	cbz	r0, 15c5c <bt_gatt_connected+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   15c50:	6884      	ldr	r4, [r0, #8]
   15c52:	b11c      	cbz	r4, 15c5c <bt_gatt_connected+0x2c>
   15c54:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   15c56:	f105 0690 	add.w	r6, r5, #144	; 0x90
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   15c5a:	b90c      	cbnz	r4, 15c60 <bt_gatt_connected+0x30>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   15c5c:	b002      	add	sp, #8
   15c5e:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   15c60:	7a28      	ldrb	r0, [r5, #8]
   15c62:	4631      	mov	r1, r6
   15c64:	f007 fe0f 	bl	1d886 <bt_addr_le_is_bonded>
   15c68:	b150      	cbz	r0, 15c80 <bt_gatt_connected+0x50>
   15c6a:	f3bf 8f5b 	dmb	ish
   15c6e:	6923      	ldr	r3, [r4, #16]
   15c70:	f3bf 8f5b 	dmb	ish
   15c74:	079b      	lsls	r3, r3, #30
   15c76:	d403      	bmi.n	15c80 <bt_gatt_connected+0x50>
			gatt_write_ccc(conn, params);
   15c78:	4621      	mov	r1, r4
   15c7a:	4628      	mov	r0, r5
   15c7c:	f7ff fb60 	bl	15340 <gatt_write_ccc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15c80:	f114 0f14 	cmn.w	r4, #20
   15c84:	d0ea      	beq.n	15c5c <bt_gatt_connected+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15c86:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   15c88:	2c00      	cmp	r4, #0
   15c8a:	d0e7      	beq.n	15c5c <bt_gatt_connected+0x2c>
   15c8c:	3c14      	subs	r4, #20
   15c8e:	e7e4      	b.n	15c5a <bt_gatt_connected+0x2a>
   15c90:	00015a35 	.word	0x00015a35

00015c94 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   15c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15c96:	4b09      	ldr	r3, [pc, #36]	; (15cbc <bt_gatt_att_max_mtu_changed+0x28>)
   15c98:	681c      	ldr	r4, [r3, #0]
{
   15c9a:	4605      	mov	r5, r0
   15c9c:	460e      	mov	r6, r1
   15c9e:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15ca0:	b10c      	cbz	r4, 15ca6 <bt_gatt_att_max_mtu_changed+0x12>
   15ca2:	3c04      	subs	r4, #4
   15ca4:	b904      	cbnz	r4, 15ca8 <bt_gatt_att_max_mtu_changed+0x14>
		if (cb->att_mtu_updated) {
			cb->att_mtu_updated(conn, tx, rx);
		}
	}
}
   15ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   15ca8:	6823      	ldr	r3, [r4, #0]
   15caa:	b11b      	cbz	r3, 15cb4 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   15cac:	463a      	mov	r2, r7
   15cae:	4631      	mov	r1, r6
   15cb0:	4628      	mov	r0, r5
   15cb2:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   15cb4:	1d23      	adds	r3, r4, #4
   15cb6:	d0f6      	beq.n	15ca6 <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15cb8:	6864      	ldr	r4, [r4, #4]
   15cba:	e7f1      	b.n	15ca0 <bt_gatt_att_max_mtu_changed+0xc>
   15cbc:	20001c74 	.word	0x20001c74

00015cc0 <db_hash_read>:
{
   15cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   15cc4:	4910      	ldr	r1, [pc, #64]	; (15d08 <db_hash_read+0x48>)
{
   15cc6:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   15cca:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   15ccc:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   15cd0:	461d      	mov	r5, r3
   15cd2:	4614      	mov	r4, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   15cd4:	f004 fc62 	bl	1a59c <k_work_cancel_delayable_sync>
   15cd8:	f3bf 8f5b 	dmb	ish
   15cdc:	4b0b      	ldr	r3, [pc, #44]	; (15d0c <db_hash_read+0x4c>)
   15cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   15ce0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   15ce4:	075b      	lsls	r3, r3, #29
   15ce6:	d401      	bmi.n	15cec <db_hash_read+0x2c>
		db_hash_gen(true);
   15ce8:	f7ff fcba 	bl	15660 <db_hash_gen.isra.0>
	(void)bt_gatt_change_aware(conn, true);
   15cec:	2101      	movs	r1, #1
   15cee:	4630      	mov	r0, r6
   15cf0:	f009 f8f8 	bl	1eee4 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   15cf4:	2310      	movs	r3, #16
   15cf6:	9306      	str	r3, [sp, #24]
   15cf8:	463a      	mov	r2, r7
   15cfa:	4629      	mov	r1, r5
   15cfc:	4620      	mov	r0, r4
   15cfe:	4b04      	ldr	r3, [pc, #16]	; (15d10 <db_hash_read+0x50>)
}
   15d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   15d04:	f008 be27 	b.w	1e956 <bt_gatt_attr_read.constprop.0>
   15d08:	20001750 	.word	0x20001750
   15d0c:	20001778 	.word	0x20001778
   15d10:	20001710 	.word	0x20001710

00015d14 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   15d14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   15d18:	4a33      	ldr	r2, [pc, #204]	; (15de8 <bt_gatt_disconnected+0xd4>)
   15d1a:	4603      	mov	r3, r0
{
   15d1c:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   15d1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15d22:	2001      	movs	r0, #1
   15d24:	f009 f806 	bl	1ed34 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   15d28:	4620      	mov	r0, r4
   15d2a:	f7ff fa9d 	bl	15268 <gatt_sub_find>
	if (!sub) {
   15d2e:	4606      	mov	r6, r0
   15d30:	b3a8      	cbz	r0, 15d9e <bt_gatt_disconnected+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   15d32:	6883      	ldr	r3, [r0, #8]
   15d34:	b39b      	cbz	r3, 15d9e <bt_gatt_disconnected+0x8a>
   15d36:	f1b3 0714 	subs.w	r7, r3, #20
   15d3a:	d030      	beq.n	15d9e <bt_gatt_disconnected+0x8a>
   15d3c:	681d      	ldr	r5, [r3, #0]
   15d3e:	b105      	cbz	r5, 15d42 <bt_gatt_disconnected+0x2e>
   15d40:	3d14      	subs	r5, #20
{
   15d42:	f04f 0b00 	mov.w	fp, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   15d46:	f104 0890 	add.w	r8, r4, #144	; 0x90
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   15d4a:	f106 0901 	add.w	r9, r6, #1
			params->value = 0U;
   15d4e:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   15d50:	7a20      	ldrb	r0, [r4, #8]
   15d52:	4641      	mov	r1, r8
   15d54:	f007 fd97 	bl	1d886 <bt_addr_le_is_bonded>
   15d58:	b988      	cbnz	r0, 15d7e <bt_gatt_disconnected+0x6a>
			params->value = 0U;
   15d5a:	f8a7 a00c 	strh.w	sl, [r7, #12]
			gatt_sub_remove(conn, sub, prev, params);
   15d5e:	463b      	mov	r3, r7
   15d60:	465a      	mov	r2, fp
   15d62:	4631      	mov	r1, r6
   15d64:	4620      	mov	r0, r4
   15d66:	f008 ff0f 	bl	1eb88 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   15d6a:	b1c5      	cbz	r5, 15d9e <bt_gatt_disconnected+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15d6c:	f115 0114 	adds.w	r1, r5, #20
   15d70:	d002      	beq.n	15d78 <bt_gatt_disconnected+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15d72:	6969      	ldr	r1, [r5, #20]
   15d74:	b101      	cbz	r1, 15d78 <bt_gatt_disconnected+0x64>
   15d76:	3914      	subs	r1, #20
{
   15d78:	462f      	mov	r7, r5
   15d7a:	460d      	mov	r5, r1
   15d7c:	e7e8      	b.n	15d50 <bt_gatt_disconnected+0x3c>
   15d7e:	f3bf 8f5b 	dmb	ish
   15d82:	693b      	ldr	r3, [r7, #16]
   15d84:	f3bf 8f5b 	dmb	ish
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   15d88:	07db      	lsls	r3, r3, #31
   15d8a:	d4e6      	bmi.n	15d5a <bt_gatt_disconnected+0x46>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   15d8c:	7873      	ldrb	r3, [r6, #1]
   15d8e:	b11b      	cbz	r3, 15d98 <bt_gatt_disconnected+0x84>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   15d90:	4641      	mov	r1, r8
   15d92:	4648      	mov	r0, r9
   15d94:	f008 fd32 	bl	1e7fc <bt_addr_le_copy>
			prev = &params->node;
   15d98:	f107 0b14 	add.w	fp, r7, #20
   15d9c:	e7e5      	b.n	15d6a <bt_gatt_disconnected+0x56>
	cfg = find_cf_cfg(conn);
   15d9e:	4620      	mov	r0, r4
   15da0:	f7ff fa34 	bl	1520c <find_cf_cfg>
	if (!cfg) {
   15da4:	4605      	mov	r5, r0
   15da6:	b1e0      	cbz	r0, 15de2 <bt_gatt_disconnected+0xce>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15da8:	f104 0690 	add.w	r6, r4, #144	; 0x90
   15dac:	7a20      	ldrb	r0, [r4, #8]
   15dae:	4631      	mov	r1, r6
   15db0:	f007 fd69 	bl	1d886 <bt_addr_le_is_bonded>
   15db4:	b920      	cbnz	r0, 15dc0 <bt_gatt_disconnected+0xac>
		clear_cf_cfg(cfg);
   15db6:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   15db8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   15dbc:	f008 be4d 	b.w	1ea5a <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   15dc0:	1c68      	adds	r0, r5, #1
   15dc2:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15dc4:	350c      	adds	r5, #12
   15dc6:	f008 fd19 	bl	1e7fc <bt_addr_le_copy>
   15dca:	f3bf 8f5b 	dmb	ish
   15dce:	e855 3f00 	ldrex	r3, [r5]
   15dd2:	f023 0302 	bic.w	r3, r3, #2
   15dd6:	e845 3200 	strex	r2, r3, [r5]
   15dda:	2a00      	cmp	r2, #0
   15ddc:	d1f7      	bne.n	15dce <bt_gatt_disconnected+0xba>
   15dde:	f3bf 8f5b 	dmb	ish
}
   15de2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15de6:	bf00      	nop
   15de8:	00015365 	.word	0x00015365

00015dec <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   15dec:	4b04      	ldr	r3, [pc, #16]	; (15e00 <bt_smp_accept+0x14>)
   15dee:	6818      	ldr	r0, [r3, #0]
   15df0:	b918      	cbnz	r0, 15dfa <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
   15df2:	4a04      	ldr	r2, [pc, #16]	; (15e04 <bt_smp_accept+0x18>)
   15df4:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   15df6:	600b      	str	r3, [r1, #0]

		return 0;
   15df8:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   15dfa:	f06f 000b 	mvn.w	r0, #11
}
   15dfe:	4770      	bx	lr
   15e00:	200017d0 	.word	0x200017d0
   15e04:	0001fc78 	.word	0x0001fc78

00015e08 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   15e08:	4b02      	ldr	r3, [pc, #8]	; (15e14 <net_buf_pool_get+0xc>)
   15e0a:	222c      	movs	r2, #44	; 0x2c
   15e0c:	fb02 3000 	mla	r0, r2, r0, r3
   15e10:	4770      	bx	lr
   15e12:	bf00      	nop
   15e14:	20000640 	.word	0x20000640

00015e18 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15e18:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   15e1a:	4a05      	ldr	r2, [pc, #20]	; (15e30 <net_buf_id+0x18>)
   15e1c:	212c      	movs	r1, #44	; 0x2c
   15e1e:	fb01 2303 	mla	r3, r1, r3, r2
   15e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15e24:	1ac0      	subs	r0, r0, r3
}
   15e26:	4b03      	ldr	r3, [pc, #12]	; (15e34 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   15e28:	10c0      	asrs	r0, r0, #3
}
   15e2a:	4358      	muls	r0, r3
   15e2c:	4770      	bx	lr
   15e2e:	bf00      	nop
   15e30:	20000640 	.word	0x20000640
   15e34:	aaaaaaab 	.word	0xaaaaaaab

00015e38 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   15e38:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15e3a:	4a0a      	ldr	r2, [pc, #40]	; (15e64 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15e3c:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15e3e:	242c      	movs	r4, #44	; 0x2c
   15e40:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   15e44:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15e48:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   15e4a:	6823      	ldr	r3, [r4, #0]
   15e4c:	429a      	cmp	r2, r3
   15e4e:	bf94      	ite	ls
   15e50:	600a      	strls	r2, [r1, #0]
   15e52:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   15e54:	f7ff ffe0 	bl	15e18 <net_buf_id>
   15e58:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   15e5c:	fb02 3000 	mla	r0, r2, r0, r3
   15e60:	bd10      	pop	{r4, pc}
   15e62:	bf00      	nop
   15e64:	20000640 	.word	0x20000640

00015e68 <net_buf_reset>:
{
   15e68:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   15e6a:	7943      	ldrb	r3, [r0, #5]
{
   15e6c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   15e6e:	b14b      	cbz	r3, 15e84 <net_buf_reset+0x1c>
   15e70:	490d      	ldr	r1, [pc, #52]	; (15ea8 <net_buf_reset+0x40>)
   15e72:	480e      	ldr	r0, [pc, #56]	; (15eac <net_buf_reset+0x44>)
   15e74:	4a0e      	ldr	r2, [pc, #56]	; (15eb0 <net_buf_reset+0x48>)
   15e76:	234f      	movs	r3, #79	; 0x4f
   15e78:	f006 fd93 	bl	1c9a2 <printk>
   15e7c:	480c      	ldr	r0, [pc, #48]	; (15eb0 <net_buf_reset+0x48>)
   15e7e:	214f      	movs	r1, #79	; 0x4f
   15e80:	f006 ffe9 	bl	1ce56 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   15e84:	6823      	ldr	r3, [r4, #0]
   15e86:	b14b      	cbz	r3, 15e9c <net_buf_reset+0x34>
   15e88:	490a      	ldr	r1, [pc, #40]	; (15eb4 <net_buf_reset+0x4c>)
   15e8a:	4808      	ldr	r0, [pc, #32]	; (15eac <net_buf_reset+0x44>)
   15e8c:	4a08      	ldr	r2, [pc, #32]	; (15eb0 <net_buf_reset+0x48>)
   15e8e:	2350      	movs	r3, #80	; 0x50
   15e90:	f006 fd87 	bl	1c9a2 <printk>
   15e94:	4806      	ldr	r0, [pc, #24]	; (15eb0 <net_buf_reset+0x48>)
   15e96:	2150      	movs	r1, #80	; 0x50
   15e98:	f006 ffdd 	bl	1ce56 <assert_post_action>
	buf->len  = 0U;
   15e9c:	2300      	movs	r3, #0
   15e9e:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   15ea0:	6923      	ldr	r3, [r4, #16]
   15ea2:	60a3      	str	r3, [r4, #8]
}
   15ea4:	bd10      	pop	{r4, pc}
   15ea6:	bf00      	nop
   15ea8:	00020cff 	.word	0x00020cff
   15eac:	0001feb5 	.word	0x0001feb5
   15eb0:	00020cdb 	.word	0x00020cdb
   15eb4:	00020d10 	.word	0x00020d10

00015eb8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   15eb8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   15ebc:	4605      	mov	r5, r0
   15ebe:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   15ec0:	4610      	mov	r0, r2
   15ec2:	4619      	mov	r1, r3
{
   15ec4:	4616      	mov	r6, r2
   15ec6:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   15ec8:	f009 fade 	bl	1f488 <sys_clock_timeout_end_calc>
   15ecc:	4680      	mov	r8, r0
   15ece:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   15ed0:	b94d      	cbnz	r5, 15ee6 <net_buf_alloc_len+0x2e>
   15ed2:	494d      	ldr	r1, [pc, #308]	; (16008 <net_buf_alloc_len+0x150>)
   15ed4:	484d      	ldr	r0, [pc, #308]	; (1600c <net_buf_alloc_len+0x154>)
   15ed6:	4a4e      	ldr	r2, [pc, #312]	; (16010 <net_buf_alloc_len+0x158>)
   15ed8:	23ed      	movs	r3, #237	; 0xed
   15eda:	f006 fd62 	bl	1c9a2 <printk>
   15ede:	484c      	ldr	r0, [pc, #304]	; (16010 <net_buf_alloc_len+0x158>)
   15ee0:	21ed      	movs	r1, #237	; 0xed
   15ee2:	f006 ffb8 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   15ee6:	f04f 0340 	mov.w	r3, #64	; 0x40
   15eea:	f3ef 8a11 	mrs	sl, BASEPRI
   15eee:	f383 8812 	msr	BASEPRI_MAX, r3
   15ef2:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   15ef6:	8beb      	ldrh	r3, [r5, #30]
   15ef8:	2b00      	cmp	r3, #0
   15efa:	d055      	beq.n	15fa8 <net_buf_alloc_len+0xf0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   15efc:	8baa      	ldrh	r2, [r5, #28]
   15efe:	429a      	cmp	r2, r3
   15f00:	d93e      	bls.n	15f80 <net_buf_alloc_len+0xc8>
	return z_impl_k_queue_get(queue, timeout);
   15f02:	2200      	movs	r2, #0
   15f04:	2300      	movs	r3, #0
   15f06:	4628      	mov	r0, r5
   15f08:	f003 fd7c 	bl	19a04 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   15f0c:	4604      	mov	r4, r0
   15f0e:	2800      	cmp	r0, #0
   15f10:	d036      	beq.n	15f80 <net_buf_alloc_len+0xc8>
	__asm__ volatile(
   15f12:	f38a 8811 	msr	BASEPRI, sl
   15f16:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   15f1a:	f8dd a004 	ldr.w	sl, [sp, #4]
   15f1e:	f1ba 0f00 	cmp.w	sl, #0
   15f22:	d06d      	beq.n	16000 <net_buf_alloc_len+0x148>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   15f24:	ea56 0307 	orrs.w	r3, r6, r7
   15f28:	d010      	beq.n	15f4c <net_buf_alloc_len+0x94>
   15f2a:	1c7b      	adds	r3, r7, #1
   15f2c:	bf08      	it	eq
   15f2e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   15f32:	d00b      	beq.n	15f4c <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   15f34:	f006 f856 	bl	1bfe4 <sys_clock_tick_get>
   15f38:	ebb8 0600 	subs.w	r6, r8, r0
   15f3c:	eb69 0701 	sbc.w	r7, r9, r1
   15f40:	2e00      	cmp	r6, #0
   15f42:	f177 0300 	sbcs.w	r3, r7, #0
   15f46:	bfbc      	itt	lt
   15f48:	2600      	movlt	r6, #0
   15f4a:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15f4c:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   15f4e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 16014 <net_buf_alloc_len+0x15c>
   15f52:	f04f 092c 	mov.w	r9, #44	; 0x2c
   15f56:	fb09 8303 	mla	r3, r9, r3, r8
   15f5a:	4632      	mov	r2, r6
   15f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15f5e:	681b      	ldr	r3, [r3, #0]
   15f60:	a901      	add	r1, sp, #4
   15f62:	681d      	ldr	r5, [r3, #0]
   15f64:	4620      	mov	r0, r4
   15f66:	463b      	mov	r3, r7
   15f68:	47a8      	blx	r5
   15f6a:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   15f6c:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   15f6e:	bb58      	cbnz	r0, 15fc8 <net_buf_alloc_len+0x110>
	k_lifo_put(&pool->free, buf);
   15f70:	79a0      	ldrb	r0, [r4, #6]
   15f72:	4621      	mov	r1, r4
   15f74:	fb00 8009 	mla	r0, r0, r9, r8
   15f78:	f009 f9e3 	bl	1f342 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   15f7c:	462c      	mov	r4, r5
}
   15f7e:	e01f      	b.n	15fc0 <net_buf_alloc_len+0x108>
		uninit_count = pool->uninit_count--;
   15f80:	8be8      	ldrh	r0, [r5, #30]
   15f82:	1e43      	subs	r3, r0, #1
   15f84:	83eb      	strh	r3, [r5, #30]
   15f86:	f38a 8811 	msr	BASEPRI, sl
   15f8a:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   15f8e:	8bac      	ldrh	r4, [r5, #28]
   15f90:	1a24      	subs	r4, r4, r0
   15f92:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   15f94:	2318      	movs	r3, #24
   15f96:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   15f9a:	481e      	ldr	r0, [pc, #120]	; (16014 <net_buf_alloc_len+0x15c>)
   15f9c:	4b1e      	ldr	r3, [pc, #120]	; (16018 <net_buf_alloc_len+0x160>)
   15f9e:	1a2d      	subs	r5, r5, r0
   15fa0:	10ad      	asrs	r5, r5, #2
   15fa2:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   15fa4:	71a5      	strb	r5, [r4, #6]
		goto success;
   15fa6:	e7b8      	b.n	15f1a <net_buf_alloc_len+0x62>
   15fa8:	f38a 8811 	msr	BASEPRI, sl
   15fac:	f3bf 8f6f 	isb	sy
   15fb0:	4632      	mov	r2, r6
   15fb2:	463b      	mov	r3, r7
   15fb4:	4628      	mov	r0, r5
   15fb6:	f003 fd25 	bl	19a04 <z_impl_k_queue_get>
	if (!buf) {
   15fba:	4604      	mov	r4, r0
   15fbc:	2800      	cmp	r0, #0
   15fbe:	d1ac      	bne.n	15f1a <net_buf_alloc_len+0x62>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   15fc0:	4620      	mov	r0, r4
   15fc2:	b002      	add	sp, #8
   15fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
   15fc8:	9b01      	ldr	r3, [sp, #4]
   15fca:	459a      	cmp	sl, r3
   15fcc:	d90e      	bls.n	15fec <net_buf_alloc_len+0x134>
   15fce:	4913      	ldr	r1, [pc, #76]	; (1601c <net_buf_alloc_len+0x164>)
   15fd0:	4a0f      	ldr	r2, [pc, #60]	; (16010 <net_buf_alloc_len+0x158>)
   15fd2:	480e      	ldr	r0, [pc, #56]	; (1600c <net_buf_alloc_len+0x154>)
   15fd4:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   15fd8:	f006 fce3 	bl	1c9a2 <printk>
   15fdc:	4810      	ldr	r0, [pc, #64]	; (16020 <net_buf_alloc_len+0x168>)
   15fde:	f006 fce0 	bl	1c9a2 <printk>
   15fe2:	480b      	ldr	r0, [pc, #44]	; (16010 <net_buf_alloc_len+0x158>)
   15fe4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   15fe8:	f006 ff35 	bl	1ce56 <assert_post_action>
	buf->frags = NULL;
   15fec:	2300      	movs	r3, #0
   15fee:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   15ff0:	2301      	movs	r3, #1
   15ff2:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   15ff4:	9b01      	ldr	r3, [sp, #4]
   15ff6:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   15ff8:	4620      	mov	r0, r4
   15ffa:	f7ff ff35 	bl	15e68 <net_buf_reset>
	return buf;
   15ffe:	e7df      	b.n	15fc0 <net_buf_alloc_len+0x108>
		buf->__buf = NULL;
   16000:	f8c4 a010 	str.w	sl, [r4, #16]
   16004:	e7f2      	b.n	15fec <net_buf_alloc_len+0x134>
   16006:	bf00      	nop
   16008:	00020d2a 	.word	0x00020d2a
   1600c:	0001feb5 	.word	0x0001feb5
   16010:	00020cdb 	.word	0x00020cdb
   16014:	20000640 	.word	0x20000640
   16018:	ba2e8ba3 	.word	0xba2e8ba3
   1601c:	00020d2f 	.word	0x00020d2f
   16020:	00020d40 	.word	0x00020d40

00016024 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   16024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16028:	4606      	mov	r6, r0
   1602a:	f003 fceb 	bl	19a04 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1602e:	4605      	mov	r5, r0
   16030:	b150      	cbz	r0, 16048 <net_buf_get+0x24>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   16032:	4f13      	ldr	r7, [pc, #76]	; (16080 <net_buf_get+0x5c>)
   16034:	f8df 804c 	ldr.w	r8, [pc, #76]	; 16084 <net_buf_get+0x60>
   16038:	f8df 904c 	ldr.w	r9, [pc, #76]	; 16088 <net_buf_get+0x64>
   1603c:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1603e:	7963      	ldrb	r3, [r4, #5]
   16040:	f013 0301 	ands.w	r3, r3, #1
   16044:	d103      	bne.n	1604e <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   16046:	6023      	str	r3, [r4, #0]

	return buf;
}
   16048:	4628      	mov	r0, r5
   1604a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1604e:	2200      	movs	r2, #0
   16050:	2300      	movs	r3, #0
   16052:	4630      	mov	r0, r6
   16054:	f003 fcd6 	bl	19a04 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   16058:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1605a:	b958      	cbnz	r0, 16074 <net_buf_get+0x50>
   1605c:	4641      	mov	r1, r8
   1605e:	4648      	mov	r0, r9
   16060:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   16064:	463a      	mov	r2, r7
   16066:	f006 fc9c 	bl	1c9a2 <printk>
   1606a:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1606e:	4638      	mov	r0, r7
   16070:	f006 fef1 	bl	1ce56 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   16074:	7963      	ldrb	r3, [r4, #5]
   16076:	f023 0301 	bic.w	r3, r3, #1
   1607a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1607c:	6824      	ldr	r4, [r4, #0]
   1607e:	e7de      	b.n	1603e <net_buf_get+0x1a>
   16080:	00020cdb 	.word	0x00020cdb
   16084:	00020d43 	.word	0x00020d43
   16088:	0001feb5 	.word	0x0001feb5

0001608c <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1608c:	b538      	push	{r3, r4, r5, lr}
   1608e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   16090:	4604      	mov	r4, r0
   16092:	b958      	cbnz	r0, 160ac <net_buf_simple_reserve+0x20>
   16094:	490e      	ldr	r1, [pc, #56]	; (160d0 <net_buf_simple_reserve+0x44>)
   16096:	480f      	ldr	r0, [pc, #60]	; (160d4 <net_buf_simple_reserve+0x48>)
   16098:	4a0f      	ldr	r2, [pc, #60]	; (160d8 <net_buf_simple_reserve+0x4c>)
   1609a:	f240 13bd 	movw	r3, #445	; 0x1bd
   1609e:	f006 fc80 	bl	1c9a2 <printk>
   160a2:	480d      	ldr	r0, [pc, #52]	; (160d8 <net_buf_simple_reserve+0x4c>)
   160a4:	f240 11bd 	movw	r1, #445	; 0x1bd
   160a8:	f006 fed5 	bl	1ce56 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   160ac:	88a3      	ldrh	r3, [r4, #4]
   160ae:	b15b      	cbz	r3, 160c8 <net_buf_simple_reserve+0x3c>
   160b0:	490a      	ldr	r1, [pc, #40]	; (160dc <net_buf_simple_reserve+0x50>)
   160b2:	4808      	ldr	r0, [pc, #32]	; (160d4 <net_buf_simple_reserve+0x48>)
   160b4:	4a08      	ldr	r2, [pc, #32]	; (160d8 <net_buf_simple_reserve+0x4c>)
   160b6:	f44f 73df 	mov.w	r3, #446	; 0x1be
   160ba:	f006 fc72 	bl	1c9a2 <printk>
   160be:	4806      	ldr	r0, [pc, #24]	; (160d8 <net_buf_simple_reserve+0x4c>)
   160c0:	f44f 71df 	mov.w	r1, #446	; 0x1be
   160c4:	f006 fec7 	bl	1ce56 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   160c8:	68a3      	ldr	r3, [r4, #8]
   160ca:	442b      	add	r3, r5
   160cc:	6023      	str	r3, [r4, #0]
}
   160ce:	bd38      	pop	{r3, r4, r5, pc}
   160d0:	000208c3 	.word	0x000208c3
   160d4:	0001feb5 	.word	0x0001feb5
   160d8:	00020cdb 	.word	0x00020cdb
   160dc:	00020d4f 	.word	0x00020d4f

000160e0 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   160e0:	b538      	push	{r3, r4, r5, lr}
   160e2:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   160e4:	4605      	mov	r5, r0
   160e6:	b958      	cbnz	r0, 16100 <net_buf_put+0x20>
   160e8:	4913      	ldr	r1, [pc, #76]	; (16138 <net_buf_put+0x58>)
   160ea:	4814      	ldr	r0, [pc, #80]	; (1613c <net_buf_put+0x5c>)
   160ec:	4a14      	ldr	r2, [pc, #80]	; (16140 <net_buf_put+0x60>)
   160ee:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
   160f2:	f006 fc56 	bl	1c9a2 <printk>
   160f6:	4812      	ldr	r0, [pc, #72]	; (16140 <net_buf_put+0x60>)
   160f8:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
   160fc:	f006 feab 	bl	1ce56 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   16100:	b95c      	cbnz	r4, 1611a <net_buf_put+0x3a>
   16102:	4910      	ldr	r1, [pc, #64]	; (16144 <net_buf_put+0x64>)
   16104:	480d      	ldr	r0, [pc, #52]	; (1613c <net_buf_put+0x5c>)
   16106:	4a0e      	ldr	r2, [pc, #56]	; (16140 <net_buf_put+0x60>)
   16108:	f240 13fb 	movw	r3, #507	; 0x1fb
   1610c:	f006 fc49 	bl	1c9a2 <printk>
   16110:	480b      	ldr	r0, [pc, #44]	; (16140 <net_buf_put+0x60>)
   16112:	f240 11fb 	movw	r1, #507	; 0x1fb
   16116:	f006 fe9e 	bl	1ce56 <assert_post_action>
{
   1611a:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1611c:	6811      	ldr	r1, [r2, #0]
   1611e:	b929      	cbnz	r1, 1612c <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   16120:	4621      	mov	r1, r4
   16122:	4628      	mov	r0, r5
}
   16124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   16128:	f003 bc0e 	b.w	19948 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1612c:	7953      	ldrb	r3, [r2, #5]
   1612e:	f043 0301 	orr.w	r3, r3, #1
   16132:	7153      	strb	r3, [r2, #5]
   16134:	460a      	mov	r2, r1
   16136:	e7f1      	b.n	1611c <net_buf_put+0x3c>
   16138:	00020d5e 	.word	0x00020d5e
   1613c:	0001feb5 	.word	0x0001feb5
   16140:	00020cdb 	.word	0x00020cdb
   16144:	000208c3 	.word	0x000208c3

00016148 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   16148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1614c:	4605      	mov	r5, r0
   1614e:	b328      	cbz	r0, 1619c <net_buf_unref+0x54>
   16150:	4e1c      	ldr	r6, [pc, #112]	; (161c4 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   16152:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   16154:	f04f 082c 	mov.w	r8, #44	; 0x2c
		struct net_buf *frags = buf->frags;
   16158:	462c      	mov	r4, r5
   1615a:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1615c:	7923      	ldrb	r3, [r4, #4]
   1615e:	3b01      	subs	r3, #1
   16160:	b2db      	uxtb	r3, r3
   16162:	7123      	strb	r3, [r4, #4]
   16164:	b9c3      	cbnz	r3, 16198 <net_buf_unref+0x50>
		if (buf->__buf) {
   16166:	6921      	ldr	r1, [r4, #16]
   16168:	b159      	cbz	r1, 16182 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1616a:	7963      	ldrb	r3, [r4, #5]
   1616c:	079b      	lsls	r3, r3, #30
   1616e:	d407      	bmi.n	16180 <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
   16170:	79a3      	ldrb	r3, [r4, #6]
   16172:	fb08 6303 	mla	r3, r8, r3, r6
   16176:	4620      	mov	r0, r4
   16178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1617a:	681b      	ldr	r3, [r3, #0]
   1617c:	689b      	ldr	r3, [r3, #8]
   1617e:	4798      	blx	r3
			buf->__buf = NULL;
   16180:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   16182:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   16184:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   16186:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1618a:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1618c:	6a1b      	ldr	r3, [r3, #32]
   1618e:	b19b      	cbz	r3, 161b8 <net_buf_unref+0x70>
			pool->destroy(buf);
   16190:	4620      	mov	r0, r4
   16192:	4798      	blx	r3
	while (buf) {
   16194:	2d00      	cmp	r5, #0
   16196:	d1df      	bne.n	16158 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   16198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1619c:	490a      	ldr	r1, [pc, #40]	; (161c8 <net_buf_unref+0x80>)
   1619e:	480b      	ldr	r0, [pc, #44]	; (161cc <net_buf_unref+0x84>)
   161a0:	4a0b      	ldr	r2, [pc, #44]	; (161d0 <net_buf_unref+0x88>)
   161a2:	f240 230a 	movw	r3, #522	; 0x20a
   161a6:	f006 fbfc 	bl	1c9a2 <printk>
}
   161aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   161ae:	4808      	ldr	r0, [pc, #32]	; (161d0 <net_buf_unref+0x88>)
   161b0:	f240 210a 	movw	r1, #522	; 0x20a
   161b4:	f006 be4f 	b.w	1ce56 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   161b8:	4621      	mov	r1, r4
   161ba:	fb00 6008 	mla	r0, r0, r8, r6
   161be:	f009 f8c0 	bl	1f342 <k_queue_prepend>
}
   161c2:	e7e7      	b.n	16194 <net_buf_unref+0x4c>
   161c4:	20000640 	.word	0x20000640
   161c8:	000208c3 	.word	0x000208c3
   161cc:	0001feb5 	.word	0x0001feb5
   161d0:	00020cdb 	.word	0x00020cdb

000161d4 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   161d4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   161d6:	4604      	mov	r4, r0
   161d8:	b958      	cbnz	r0, 161f2 <net_buf_ref+0x1e>
   161da:	4908      	ldr	r1, [pc, #32]	; (161fc <net_buf_ref+0x28>)
   161dc:	4808      	ldr	r0, [pc, #32]	; (16200 <net_buf_ref+0x2c>)
   161de:	4a09      	ldr	r2, [pc, #36]	; (16204 <net_buf_ref+0x30>)
   161e0:	f240 2339 	movw	r3, #569	; 0x239
   161e4:	f006 fbdd 	bl	1c9a2 <printk>
   161e8:	4806      	ldr	r0, [pc, #24]	; (16204 <net_buf_ref+0x30>)
   161ea:	f240 2139 	movw	r1, #569	; 0x239
   161ee:	f006 fe32 	bl	1ce56 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   161f2:	7923      	ldrb	r3, [r4, #4]
   161f4:	3301      	adds	r3, #1
   161f6:	7123      	strb	r3, [r4, #4]
	return buf;
}
   161f8:	4620      	mov	r0, r4
   161fa:	bd10      	pop	{r4, pc}
   161fc:	000208c3 	.word	0x000208c3
   16200:	0001feb5 	.word	0x0001feb5
   16204:	00020cdb 	.word	0x00020cdb

00016208 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   16208:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1620a:	4604      	mov	r4, r0
   1620c:	b958      	cbnz	r0, 16226 <net_buf_frag_last+0x1e>
   1620e:	4908      	ldr	r1, [pc, #32]	; (16230 <net_buf_frag_last+0x28>)
   16210:	4808      	ldr	r0, [pc, #32]	; (16234 <net_buf_frag_last+0x2c>)
   16212:	4a09      	ldr	r2, [pc, #36]	; (16238 <net_buf_frag_last+0x30>)
   16214:	f240 2376 	movw	r3, #630	; 0x276
   16218:	f006 fbc3 	bl	1c9a2 <printk>
   1621c:	4806      	ldr	r0, [pc, #24]	; (16238 <net_buf_frag_last+0x30>)
   1621e:	f240 2176 	movw	r1, #630	; 0x276
   16222:	f006 fe18 	bl	1ce56 <assert_post_action>

	while (buf->frags) {
   16226:	4620      	mov	r0, r4
   16228:	6824      	ldr	r4, [r4, #0]
   1622a:	2c00      	cmp	r4, #0
   1622c:	d1fb      	bne.n	16226 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1622e:	bd10      	pop	{r4, pc}
   16230:	000208c3 	.word	0x000208c3
   16234:	0001feb5 	.word	0x0001feb5
   16238:	00020cdb 	.word	0x00020cdb

0001623c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1623c:	b538      	push	{r3, r4, r5, lr}
   1623e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   16240:	4604      	mov	r4, r0
   16242:	b958      	cbnz	r0, 1625c <net_buf_frag_insert+0x20>
   16244:	4910      	ldr	r1, [pc, #64]	; (16288 <net_buf_frag_insert+0x4c>)
   16246:	4811      	ldr	r0, [pc, #68]	; (1628c <net_buf_frag_insert+0x50>)
   16248:	4a11      	ldr	r2, [pc, #68]	; (16290 <net_buf_frag_insert+0x54>)
   1624a:	f240 2381 	movw	r3, #641	; 0x281
   1624e:	f006 fba8 	bl	1c9a2 <printk>
   16252:	480f      	ldr	r0, [pc, #60]	; (16290 <net_buf_frag_insert+0x54>)
   16254:	f240 2181 	movw	r1, #641	; 0x281
   16258:	f006 fdfd 	bl	1ce56 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1625c:	b95d      	cbnz	r5, 16276 <net_buf_frag_insert+0x3a>
   1625e:	490d      	ldr	r1, [pc, #52]	; (16294 <net_buf_frag_insert+0x58>)
   16260:	480a      	ldr	r0, [pc, #40]	; (1628c <net_buf_frag_insert+0x50>)
   16262:	4a0b      	ldr	r2, [pc, #44]	; (16290 <net_buf_frag_insert+0x54>)
   16264:	f240 2382 	movw	r3, #642	; 0x282
   16268:	f006 fb9b 	bl	1c9a2 <printk>
   1626c:	4808      	ldr	r0, [pc, #32]	; (16290 <net_buf_frag_insert+0x54>)
   1626e:	f240 2182 	movw	r1, #642	; 0x282
   16272:	f006 fdf0 	bl	1ce56 <assert_post_action>

	if (parent->frags) {
   16276:	6823      	ldr	r3, [r4, #0]
   16278:	b123      	cbz	r3, 16284 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
   1627a:	4628      	mov	r0, r5
   1627c:	f7ff ffc4 	bl	16208 <net_buf_frag_last>
   16280:	6823      	ldr	r3, [r4, #0]
   16282:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   16284:	6025      	str	r5, [r4, #0]
}
   16286:	bd38      	pop	{r3, r4, r5, pc}
   16288:	00020d63 	.word	0x00020d63
   1628c:	0001feb5 	.word	0x0001feb5
   16290:	00020cdb 	.word	0x00020cdb
   16294:	00020d6a 	.word	0x00020d6a

00016298 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   16298:	b538      	push	{r3, r4, r5, lr}
   1629a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1629c:	460d      	mov	r5, r1
   1629e:	b959      	cbnz	r1, 162b8 <net_buf_frag_add+0x20>
   162a0:	490c      	ldr	r1, [pc, #48]	; (162d4 <net_buf_frag_add+0x3c>)
   162a2:	480d      	ldr	r0, [pc, #52]	; (162d8 <net_buf_frag_add+0x40>)
   162a4:	4a0d      	ldr	r2, [pc, #52]	; (162dc <net_buf_frag_add+0x44>)
   162a6:	f240 238d 	movw	r3, #653	; 0x28d
   162aa:	f006 fb7a 	bl	1c9a2 <printk>
   162ae:	480b      	ldr	r0, [pc, #44]	; (162dc <net_buf_frag_add+0x44>)
   162b0:	f240 218d 	movw	r1, #653	; 0x28d
   162b4:	f006 fdcf 	bl	1ce56 <assert_post_action>

	if (!head) {
   162b8:	b924      	cbnz	r4, 162c4 <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
   162ba:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   162bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   162c0:	f7ff bf88 	b.w	161d4 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   162c4:	4620      	mov	r0, r4
   162c6:	f7ff ff9f 	bl	16208 <net_buf_frag_last>
   162ca:	4629      	mov	r1, r5
   162cc:	f7ff ffb6 	bl	1623c <net_buf_frag_insert>
}
   162d0:	4620      	mov	r0, r4
   162d2:	bd38      	pop	{r3, r4, r5, pc}
   162d4:	00020d6a 	.word	0x00020d6a
   162d8:	0001feb5 	.word	0x0001feb5
   162dc:	00020cdb 	.word	0x00020cdb

000162e0 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   162e0:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   162e2:	6882      	ldr	r2, [r0, #8]
   162e4:	6803      	ldr	r3, [r0, #0]
   162e6:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   162e8:	4299      	cmp	r1, r3
{
   162ea:	4604      	mov	r4, r0
   162ec:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   162ee:	d90b      	bls.n	16308 <net_buf_simple_push+0x28>
   162f0:	4909      	ldr	r1, [pc, #36]	; (16318 <net_buf_simple_push+0x38>)
   162f2:	480a      	ldr	r0, [pc, #40]	; (1631c <net_buf_simple_push+0x3c>)
   162f4:	4a0a      	ldr	r2, [pc, #40]	; (16320 <net_buf_simple_push+0x40>)
   162f6:	f240 4311 	movw	r3, #1041	; 0x411
   162fa:	f006 fb52 	bl	1c9a2 <printk>
   162fe:	4808      	ldr	r0, [pc, #32]	; (16320 <net_buf_simple_push+0x40>)
   16300:	f240 4111 	movw	r1, #1041	; 0x411
   16304:	f006 fda7 	bl	1ce56 <assert_post_action>
	buf->data -= len;
   16308:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1630a:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   1630c:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1630e:	440d      	add	r5, r1
	buf->data -= len;
   16310:	6020      	str	r0, [r4, #0]
	buf->len += len;
   16312:	80a5      	strh	r5, [r4, #4]
}
   16314:	bd38      	pop	{r3, r4, r5, pc}
   16316:	bf00      	nop
   16318:	00020d7f 	.word	0x00020d7f
   1631c:	0001feb5 	.word	0x0001feb5
   16320:	00020cdb 	.word	0x00020cdb

00016324 <net_buf_simple_pull>:
{
   16324:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   16326:	8883      	ldrh	r3, [r0, #4]
   16328:	428b      	cmp	r3, r1
{
   1632a:	4604      	mov	r4, r0
   1632c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1632e:	d20b      	bcs.n	16348 <net_buf_simple_pull+0x24>
   16330:	4909      	ldr	r1, [pc, #36]	; (16358 <net_buf_simple_pull+0x34>)
   16332:	480a      	ldr	r0, [pc, #40]	; (1635c <net_buf_simple_pull+0x38>)
   16334:	4a0a      	ldr	r2, [pc, #40]	; (16360 <net_buf_simple_pull+0x3c>)
   16336:	f240 4371 	movw	r3, #1137	; 0x471
   1633a:	f006 fb32 	bl	1c9a2 <printk>
   1633e:	4808      	ldr	r0, [pc, #32]	; (16360 <net_buf_simple_pull+0x3c>)
   16340:	f240 4171 	movw	r1, #1137	; 0x471
   16344:	f006 fd87 	bl	1ce56 <assert_post_action>
	buf->len -= len;
   16348:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1634a:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1634c:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1634e:	4428      	add	r0, r5
	buf->len -= len;
   16350:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   16352:	6020      	str	r0, [r4, #0]
}
   16354:	bd38      	pop	{r3, r4, r5, pc}
   16356:	bf00      	nop
   16358:	00020d6f 	.word	0x00020d6f
   1635c:	0001feb5 	.word	0x0001feb5
   16360:	00020cdb 	.word	0x00020cdb

00016364 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   16364:	8883      	ldrh	r3, [r0, #4]
   16366:	428b      	cmp	r3, r1
{
   16368:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   1636a:	6806      	ldr	r6, [r0, #0]
{
   1636c:	4604      	mov	r4, r0
   1636e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   16370:	d20b      	bcs.n	1638a <net_buf_simple_pull_mem+0x26>
   16372:	490a      	ldr	r1, [pc, #40]	; (1639c <net_buf_simple_pull_mem+0x38>)
   16374:	480a      	ldr	r0, [pc, #40]	; (163a0 <net_buf_simple_pull_mem+0x3c>)
   16376:	4a0b      	ldr	r2, [pc, #44]	; (163a4 <net_buf_simple_pull_mem+0x40>)
   16378:	f240 437d 	movw	r3, #1149	; 0x47d
   1637c:	f006 fb11 	bl	1c9a2 <printk>
   16380:	4808      	ldr	r0, [pc, #32]	; (163a4 <net_buf_simple_pull_mem+0x40>)
   16382:	f240 417d 	movw	r1, #1149	; 0x47d
   16386:	f006 fd66 	bl	1ce56 <assert_post_action>
	buf->len -= len;
   1638a:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1638c:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1638e:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   16390:	4429      	add	r1, r5
	buf->len -= len;
   16392:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   16394:	6021      	str	r1, [r4, #0]
}
   16396:	4630      	mov	r0, r6
   16398:	bd70      	pop	{r4, r5, r6, pc}
   1639a:	bf00      	nop
   1639c:	00020d6f 	.word	0x00020d6f
   163a0:	0001feb5 	.word	0x0001feb5
   163a4:	00020cdb 	.word	0x00020cdb

000163a8 <net_buf_simple_add>:
{
   163a8:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   163aa:	6803      	ldr	r3, [r0, #0]
   163ac:	8886      	ldrh	r6, [r0, #4]
   163ae:	4604      	mov	r4, r0
   163b0:	460d      	mov	r5, r1
   163b2:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   163b4:	f008 fe13 	bl	1efde <net_buf_simple_tailroom>
   163b8:	4288      	cmp	r0, r1
   163ba:	d20b      	bcs.n	163d4 <net_buf_simple_add+0x2c>
   163bc:	4908      	ldr	r1, [pc, #32]	; (163e0 <net_buf_simple_add+0x38>)
   163be:	4809      	ldr	r0, [pc, #36]	; (163e4 <net_buf_simple_add+0x3c>)
   163c0:	4a09      	ldr	r2, [pc, #36]	; (163e8 <net_buf_simple_add+0x40>)
   163c2:	f240 3322 	movw	r3, #802	; 0x322
   163c6:	f006 faec 	bl	1c9a2 <printk>
   163ca:	4807      	ldr	r0, [pc, #28]	; (163e8 <net_buf_simple_add+0x40>)
   163cc:	f240 3122 	movw	r1, #802	; 0x322
   163d0:	f006 fd41 	bl	1ce56 <assert_post_action>
	buf->len += len;
   163d4:	88a1      	ldrh	r1, [r4, #4]
   163d6:	440d      	add	r5, r1
   163d8:	80a5      	strh	r5, [r4, #4]
}
   163da:	4630      	mov	r0, r6
   163dc:	bd70      	pop	{r4, r5, r6, pc}
   163de:	bf00      	nop
   163e0:	00020da3 	.word	0x00020da3
   163e4:	0001feb5 	.word	0x0001feb5
   163e8:	00020cdb 	.word	0x00020cdb

000163ec <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   163ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   163f0:	4c10      	ldr	r4, [pc, #64]	; (16434 <onoff_start+0x48>)
   163f2:	1b07      	subs	r7, r0, r4
   163f4:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   163f8:	f04f 080c 	mov.w	r8, #12
   163fc:	fb08 f807 	mul.w	r8, r8, r7
{
   16400:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   16402:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
   16406:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   16408:	4420      	add	r0, r4
   1640a:	2140      	movs	r1, #64	; 0x40
   1640c:	f008 fe04 	bl	1f018 <set_starting_state>
	if (err < 0) {
   16410:	1e01      	subs	r1, r0, #0
   16412:	db09      	blt.n	16428 <onoff_start+0x3c>
	subdata->cb = cb;
   16414:	4b08      	ldr	r3, [pc, #32]	; (16438 <onoff_start+0x4c>)
   16416:	4444      	add	r4, r8
	subdata->user_data = user_data;
   16418:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   1641c:	4b07      	ldr	r3, [pc, #28]	; (1643c <onoff_start+0x50>)
   1641e:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   16422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   16426:	4718      	bx	r3
		notify(mgr, err);
   16428:	4630      	mov	r0, r6
   1642a:	462b      	mov	r3, r5
}
   1642c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   16430:	4718      	bx	r3
   16432:	bf00      	nop
   16434:	20001ccc 	.word	0x20001ccc
   16438:	0001f07b 	.word	0x0001f07b
   1643c:	0001fcbc 	.word	0x0001fcbc

00016440 <get_status>:
{
   16440:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   16442:	b2cc      	uxtb	r4, r1
   16444:	2c01      	cmp	r4, #1
{
   16446:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   16448:	d909      	bls.n	1645e <get_status+0x1e>
   1644a:	4909      	ldr	r1, [pc, #36]	; (16470 <get_status+0x30>)
   1644c:	4809      	ldr	r0, [pc, #36]	; (16474 <get_status+0x34>)
   1644e:	4a0a      	ldr	r2, [pc, #40]	; (16478 <get_status+0x38>)
   16450:	237e      	movs	r3, #126	; 0x7e
   16452:	f006 faa6 	bl	1c9a2 <printk>
   16456:	4808      	ldr	r0, [pc, #32]	; (16478 <get_status+0x38>)
   16458:	217e      	movs	r1, #126	; 0x7e
   1645a:	f006 fcfc 	bl	1ce56 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1645e:	692b      	ldr	r3, [r5, #16]
   16460:	210c      	movs	r1, #12
   16462:	fb04 3401 	mla	r4, r4, r1, r3
   16466:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   16468:	f000 0007 	and.w	r0, r0, #7
   1646c:	bd38      	pop	{r3, r4, r5, pc}
   1646e:	bf00      	nop
   16470:	00020e04 	.word	0x00020e04
   16474:	0001feb5 	.word	0x0001feb5
   16478:	00020dc7 	.word	0x00020dc7

0001647c <stop>:
{
   1647c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1647e:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   16480:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   16482:	6907      	ldr	r7, [r0, #16]
{
   16484:	4605      	mov	r5, r0
   16486:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   16488:	d90b      	bls.n	164a2 <stop+0x26>
   1648a:	4918      	ldr	r1, [pc, #96]	; (164ec <stop+0x70>)
   1648c:	4818      	ldr	r0, [pc, #96]	; (164f0 <stop+0x74>)
   1648e:	4a19      	ldr	r2, [pc, #100]	; (164f4 <stop+0x78>)
   16490:	f240 1353 	movw	r3, #339	; 0x153
   16494:	f006 fa85 	bl	1c9a2 <printk>
   16498:	4816      	ldr	r0, [pc, #88]	; (164f4 <stop+0x78>)
   1649a:	f240 1153 	movw	r1, #339	; 0x153
   1649e:	f006 fcda 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   164a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   164a6:	f3ef 8211 	mrs	r2, BASEPRI
   164aa:	f383 8812 	msr	BASEPRI_MAX, r3
   164ae:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   164b2:	230c      	movs	r3, #12
   164b4:	fb03 7104 	mla	r1, r3, r4, r7
   164b8:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   164ba:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   164be:	d001      	beq.n	164c4 <stop+0x48>
   164c0:	428e      	cmp	r6, r1
   164c2:	d110      	bne.n	164e6 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   164c4:	fb03 7304 	mla	r3, r3, r4, r7
   164c8:	2101      	movs	r1, #1
   164ca:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
   164cc:	2000      	movs	r0, #0
	__asm__ volatile(
   164ce:	f382 8811 	msr	BASEPRI, r2
   164d2:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   164d6:	b928      	cbnz	r0, 164e4 <stop+0x68>
	get_sub_config(dev, type)->stop();
   164d8:	6869      	ldr	r1, [r5, #4]
   164da:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   164de:	6863      	ldr	r3, [r4, #4]
   164e0:	4798      	blx	r3
	return 0;
   164e2:	2000      	movs	r0, #0
}
   164e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   164e6:	f04f 30ff 	mov.w	r0, #4294967295
   164ea:	e7f0      	b.n	164ce <stop+0x52>
   164ec:	00020e04 	.word	0x00020e04
   164f0:	0001feb5 	.word	0x0001feb5
   164f4:	00020dc7 	.word	0x00020dc7

000164f8 <onoff_stop>:
{
   164f8:	b570      	push	{r4, r5, r6, lr}
   164fa:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   164fc:	4906      	ldr	r1, [pc, #24]	; (16518 <onoff_stop+0x20>)
   164fe:	1a41      	subs	r1, r0, r1
{
   16500:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   16502:	1149      	asrs	r1, r1, #5
   16504:	4805      	ldr	r0, [pc, #20]	; (1651c <onoff_stop+0x24>)
   16506:	2240      	movs	r2, #64	; 0x40
   16508:	f7ff ffb8 	bl	1647c <stop>
	notify(mgr, res);
   1650c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1650e:	4601      	mov	r1, r0
	notify(mgr, res);
   16510:	4620      	mov	r0, r4
}
   16512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   16516:	4718      	bx	r3
   16518:	20001ccc 	.word	0x20001ccc
   1651c:	0001f6b0 	.word	0x0001f6b0

00016520 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   16520:	2200      	movs	r2, #0
{
   16522:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   16524:	2101      	movs	r1, #1
{
   16526:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   16528:	4610      	mov	r0, r2
   1652a:	f7fa ff13 	bl	11354 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1652e:	2000      	movs	r0, #0
   16530:	f7fa fede 	bl	112f0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   16534:	480f      	ldr	r0, [pc, #60]	; (16574 <clk_init+0x54>)
   16536:	f002 f85f 	bl	185f8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1653a:	4b0f      	ldr	r3, [pc, #60]	; (16578 <clk_init+0x58>)
   1653c:	4298      	cmp	r0, r3
   1653e:	d115      	bne.n	1656c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   16540:	f008 fea9 	bl	1f296 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   16544:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   16546:	490d      	ldr	r1, [pc, #52]	; (1657c <clk_init+0x5c>)
   16548:	4630      	mov	r0, r6
   1654a:	f006 fa85 	bl	1ca58 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1654e:	2800      	cmp	r0, #0
   16550:	db0b      	blt.n	1656a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   16552:	2501      	movs	r5, #1
   16554:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   16556:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   16558:	4908      	ldr	r1, [pc, #32]	; (1657c <clk_init+0x5c>)
   1655a:	f104 0020 	add.w	r0, r4, #32
   1655e:	f006 fa7b 	bl	1ca58 <onoff_manager_init>
		if (err < 0) {
   16562:	2800      	cmp	r0, #0
   16564:	db01      	blt.n	1656a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   16566:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   16568:	2000      	movs	r0, #0
}
   1656a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1656c:	f06f 0004 	mvn.w	r0, #4
   16570:	e7fb      	b.n	1656a <clk_init+0x4a>
   16572:	bf00      	nop
   16574:	000165b5 	.word	0x000165b5
   16578:	0bad0000 	.word	0x0bad0000
   1657c:	0001fccc 	.word	0x0001fccc

00016580 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   16580:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   16582:	230c      	movs	r3, #12
   16584:	4809      	ldr	r0, [pc, #36]	; (165ac <clkstarted_handle.constprop.0+0x2c>)
   16586:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   16588:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1658a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1658c:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   16590:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   16592:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   16594:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   16596:	4418      	add	r0, r3
   16598:	f008 fd5c 	bl	1f054 <set_on_state>
	if (callback) {
   1659c:	b12d      	cbz	r5, 165aa <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1659e:	4632      	mov	r2, r6
   165a0:	462b      	mov	r3, r5
   165a2:	4803      	ldr	r0, [pc, #12]	; (165b0 <clkstarted_handle.constprop.0+0x30>)
}
   165a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   165a8:	4718      	bx	r3
}
   165aa:	bd70      	pop	{r4, r5, r6, pc}
   165ac:	20001ccc 	.word	0x20001ccc
   165b0:	0001f6b0 	.word	0x0001f6b0

000165b4 <clock_event_handler>:
	switch (event) {
   165b4:	2801      	cmp	r0, #1
{
   165b6:	b508      	push	{r3, lr}
	switch (event) {
   165b8:	d006      	beq.n	165c8 <clock_event_handler+0x14>
   165ba:	2803      	cmp	r0, #3
   165bc:	d008      	beq.n	165d0 <clock_event_handler+0x1c>
   165be:	b9a8      	cbnz	r0, 165ec <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   165c0:	4b10      	ldr	r3, [pc, #64]	; (16604 <clock_event_handler+0x50>)
   165c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   165c4:	075b      	lsls	r3, r3, #29
   165c6:	d11b      	bne.n	16600 <clock_event_handler+0x4c>
}
   165c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   165cc:	f7ff bfd8 	b.w	16580 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   165d0:	490d      	ldr	r1, [pc, #52]	; (16608 <clock_event_handler+0x54>)
   165d2:	4a0e      	ldr	r2, [pc, #56]	; (1660c <clock_event_handler+0x58>)
   165d4:	480e      	ldr	r0, [pc, #56]	; (16610 <clock_event_handler+0x5c>)
   165d6:	f240 2366 	movw	r3, #614	; 0x266
   165da:	f006 f9e2 	bl	1c9a2 <printk>
   165de:	f240 2166 	movw	r1, #614	; 0x266
}
   165e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   165e6:	4809      	ldr	r0, [pc, #36]	; (1660c <clock_event_handler+0x58>)
   165e8:	f006 bc35 	b.w	1ce56 <assert_post_action>
   165ec:	4906      	ldr	r1, [pc, #24]	; (16608 <clock_event_handler+0x54>)
   165ee:	4a07      	ldr	r2, [pc, #28]	; (1660c <clock_event_handler+0x58>)
   165f0:	4807      	ldr	r0, [pc, #28]	; (16610 <clock_event_handler+0x5c>)
   165f2:	f240 236a 	movw	r3, #618	; 0x26a
   165f6:	f006 f9d4 	bl	1c9a2 <printk>
   165fa:	f240 216a 	movw	r1, #618	; 0x26a
   165fe:	e7f0      	b.n	165e2 <clock_event_handler+0x2e>
}
   16600:	bd08      	pop	{r3, pc}
   16602:	bf00      	nop
   16604:	20001ccc 	.word	0x20001ccc
   16608:	00021b83 	.word	0x00021b83
   1660c:	00020dc7 	.word	0x00020dc7
   16610:	0001feb5 	.word	0x0001feb5

00016614 <generic_hfclk_start>:
{
   16614:	b508      	push	{r3, lr}
	__asm__ volatile(
   16616:	f04f 0340 	mov.w	r3, #64	; 0x40
   1661a:	f3ef 8111 	mrs	r1, BASEPRI
   1661e:	f383 8812 	msr	BASEPRI_MAX, r3
   16622:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   16626:	4a12      	ldr	r2, [pc, #72]	; (16670 <generic_hfclk_start+0x5c>)
   16628:	6813      	ldr	r3, [r2, #0]
   1662a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1662e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   16632:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   16634:	d00c      	beq.n	16650 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16636:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1663a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1663e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   16642:	f013 0301 	ands.w	r3, r3, #1
   16646:	d003      	beq.n	16650 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   16648:	480a      	ldr	r0, [pc, #40]	; (16674 <generic_hfclk_start+0x60>)
   1664a:	f008 fd03 	bl	1f054 <set_on_state>
			already_started = true;
   1664e:	2301      	movs	r3, #1
	__asm__ volatile(
   16650:	f381 8811 	msr	BASEPRI, r1
   16654:	f3bf 8f6f 	isb	sy
	if (already_started) {
   16658:	b123      	cbz	r3, 16664 <generic_hfclk_start+0x50>
}
   1665a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1665e:	2000      	movs	r0, #0
   16660:	f7ff bf8e 	b.w	16580 <clkstarted_handle.constprop.0>
}
   16664:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   16668:	2001      	movs	r0, #1
   1666a:	f001 bf7b 	b.w	18564 <nrfx_clock_start>
   1666e:	bf00      	nop
   16670:	20001d24 	.word	0x20001d24
   16674:	20001d14 	.word	0x20001d14

00016678 <lfclk_start>:
{
   16678:	b510      	push	{r4, lr}
	if (!once) {
   1667a:	4c07      	ldr	r4, [pc, #28]	; (16698 <lfclk_start+0x20>)
   1667c:	7823      	ldrb	r3, [r4, #0]
   1667e:	b92b      	cbnz	r3, 1668c <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   16680:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   16684:	f008 fefc 	bl	1f480 <z_impl_k_busy_wait>
		once = true;
   16688:	2301      	movs	r3, #1
   1668a:	7023      	strb	r3, [r4, #0]
}
   1668c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   16690:	2000      	movs	r0, #0
   16692:	f001 bf67 	b.w	18564 <nrfx_clock_start>
   16696:	bf00      	nop
   16698:	20001f1e 	.word	0x20001f1e

0001669c <generic_hfclk_stop>:
   1669c:	4b09      	ldr	r3, [pc, #36]	; (166c4 <generic_hfclk_stop+0x28>)
   1669e:	f3bf 8f5b 	dmb	ish
   166a2:	e853 2f00 	ldrex	r2, [r3]
   166a6:	f022 0102 	bic.w	r1, r2, #2
   166aa:	e843 1000 	strex	r0, r1, [r3]
   166ae:	2800      	cmp	r0, #0
   166b0:	d1f7      	bne.n	166a2 <generic_hfclk_stop+0x6>
   166b2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   166b6:	07d3      	lsls	r3, r2, #31
   166b8:	d402      	bmi.n	166c0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   166ba:	2001      	movs	r0, #1
   166bc:	f001 bf7c 	b.w	185b8 <nrfx_clock_stop>
}
   166c0:	4770      	bx	lr
   166c2:	bf00      	nop
   166c4:	20001d24 	.word	0x20001d24

000166c8 <api_blocking_start>:
{
   166c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   166ca:	2200      	movs	r2, #0
   166cc:	2301      	movs	r3, #1
   166ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
   166d2:	ab04      	add	r3, sp, #16
   166d4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   166d8:	4a09      	ldr	r2, [pc, #36]	; (16700 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   166da:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   166de:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   166e0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   166e4:	f008 fcd8 	bl	1f098 <api_start>
	if (err < 0) {
   166e8:	2800      	cmp	r0, #0
   166ea:	db05      	blt.n	166f8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   166ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   166f0:	2300      	movs	r3, #0
   166f2:	4668      	mov	r0, sp
   166f4:	f003 fa36 	bl	19b64 <z_impl_k_sem_take>
}
   166f8:	b007      	add	sp, #28
   166fa:	f85d fb04 	ldr.w	pc, [sp], #4
   166fe:	bf00      	nop
   16700:	0001f093 	.word	0x0001f093

00016704 <z_nrf_clock_control_lf_on>:
{
   16704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16708:	4949      	ldr	r1, [pc, #292]	; (16830 <z_nrf_clock_control_lf_on+0x12c>)
   1670a:	f3bf 8f5b 	dmb	ish
   1670e:	4605      	mov	r5, r0
   16710:	2201      	movs	r2, #1
   16712:	e851 3f00 	ldrex	r3, [r1]
   16716:	e841 2000 	strex	r0, r2, [r1]
   1671a:	2800      	cmp	r0, #0
   1671c:	d1f9      	bne.n	16712 <z_nrf_clock_control_lf_on+0xe>
   1671e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   16722:	b9a3      	cbnz	r3, 1674e <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   16724:	4943      	ldr	r1, [pc, #268]	; (16834 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
   16726:	4844      	ldr	r0, [pc, #272]	; (16838 <z_nrf_clock_control_lf_on+0x134>)
   16728:	604b      	str	r3, [r1, #4]
   1672a:	60cb      	str	r3, [r1, #12]
   1672c:	608a      	str	r2, [r1, #8]
   1672e:	f7f9 fc35 	bl	ff9c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   16732:	2800      	cmp	r0, #0
   16734:	da0b      	bge.n	1674e <z_nrf_clock_control_lf_on+0x4a>
   16736:	4941      	ldr	r1, [pc, #260]	; (1683c <z_nrf_clock_control_lf_on+0x138>)
   16738:	4841      	ldr	r0, [pc, #260]	; (16840 <z_nrf_clock_control_lf_on+0x13c>)
   1673a:	4a42      	ldr	r2, [pc, #264]	; (16844 <z_nrf_clock_control_lf_on+0x140>)
   1673c:	f240 2326 	movw	r3, #550	; 0x226
   16740:	f006 f92f 	bl	1c9a2 <printk>
   16744:	483f      	ldr	r0, [pc, #252]	; (16844 <z_nrf_clock_control_lf_on+0x140>)
   16746:	f240 2126 	movw	r1, #550	; 0x226
   1674a:	f006 fb84 	bl	1ce56 <assert_post_action>
	switch (start_mode) {
   1674e:	b3ad      	cbz	r5, 167bc <z_nrf_clock_control_lf_on+0xb8>
   16750:	1e6b      	subs	r3, r5, #1
   16752:	2b01      	cmp	r3, #1
   16754:	d856      	bhi.n	16804 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   16756:	2d01      	cmp	r5, #1
   16758:	d107      	bne.n	1676a <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1675a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1675e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   16762:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   16766:	2b01      	cmp	r3, #1
   16768:	d028      	beq.n	167bc <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1676a:	f008 fdb4 	bl	1f2d6 <k_is_in_isr>
   1676e:	4604      	mov	r4, r0
   16770:	b918      	cbnz	r0, 1677a <z_nrf_clock_control_lf_on+0x76>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   16772:	4b35      	ldr	r3, [pc, #212]	; (16848 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
   16774:	781b      	ldrb	r3, [r3, #0]
   16776:	2b00      	cmp	r3, #0
   16778:	d152      	bne.n	16820 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
   1677a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1677e:	f3ef 8611 	mrs	r6, BASEPRI
   16782:	f383 8812 	msr	BASEPRI_MAX, r3
   16786:	f3bf 8f6f 	isb	sy
   1678a:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1678c:	4f2f      	ldr	r7, [pc, #188]	; (1684c <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1678e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 16854 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16792:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 16858 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16796:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1679a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1679e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   167a2:	03d2      	lsls	r2, r2, #15
   167a4:	d50c      	bpl.n	167c0 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   167a6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   167aa:	2b01      	cmp	r3, #1
   167ac:	d001      	beq.n	167b2 <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   167ae:	2d01      	cmp	r5, #1
   167b0:	d106      	bne.n	167c0 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
   167b2:	b30c      	cbz	r4, 167f8 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
   167b4:	f386 8811 	msr	BASEPRI, r6
   167b8:	f3bf 8f6f 	isb	sy
}
   167bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   167c0:	b1ac      	cbz	r4, 167ee <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   167c2:	4630      	mov	r0, r6
   167c4:	f7fa fd8a 	bl	112dc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   167c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   167cc:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   167d0:	2b00      	cmp	r3, #0
   167d2:	d1e0      	bne.n	16796 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   167d4:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   167d6:	2900      	cmp	r1, #0
   167d8:	d0dd      	beq.n	16796 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   167da:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   167dc:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   167de:	2301      	movs	r3, #1
   167e0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   167e4:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   167e8:	f8c9 3000 	str.w	r3, [r9]
}
   167ec:	e7d3      	b.n	16796 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
   167ee:	2100      	movs	r1, #0
   167f0:	2021      	movs	r0, #33	; 0x21
   167f2:	f004 ff9b 	bl	1b72c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   167f6:	e7e7      	b.n	167c8 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
   167f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   167fc:	2202      	movs	r2, #2
   167fe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   16802:	e7db      	b.n	167bc <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
   16804:	4912      	ldr	r1, [pc, #72]	; (16850 <z_nrf_clock_control_lf_on+0x14c>)
   16806:	480e      	ldr	r0, [pc, #56]	; (16840 <z_nrf_clock_control_lf_on+0x13c>)
   16808:	4a0e      	ldr	r2, [pc, #56]	; (16844 <z_nrf_clock_control_lf_on+0x140>)
   1680a:	f44f 730e 	mov.w	r3, #568	; 0x238
   1680e:	f006 f8c8 	bl	1c9a2 <printk>
}
   16812:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   16816:	480b      	ldr	r0, [pc, #44]	; (16844 <z_nrf_clock_control_lf_on+0x140>)
   16818:	f44f 710e 	mov.w	r1, #568	; 0x238
   1681c:	f006 bb1b 	b.w	1ce56 <assert_post_action>
    p_reg->INTENCLR = mask;
   16820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16824:	2202      	movs	r2, #2
   16826:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1682a:	4606      	mov	r6, r0
}
   1682c:	e7ae      	b.n	1678c <z_nrf_clock_control_lf_on+0x88>
   1682e:	bf00      	nop
   16830:	20001d28 	.word	0x20001d28
   16834:	20001cbc 	.word	0x20001cbc
   16838:	20001cec 	.word	0x20001cec
   1683c:	00020e28 	.word	0x00020e28
   16840:	0001feb5 	.word	0x0001feb5
   16844:	00020dc7 	.word	0x00020dc7
   16848:	20002843 	.word	0x20002843
   1684c:	40000104 	.word	0x40000104
   16850:	00021b83 	.word	0x00021b83
   16854:	e000e100 	.word	0xe000e100
   16858:	40000008 	.word	0x40000008

0001685c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1685c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1685e:	4b08      	ldr	r3, [pc, #32]	; (16880 <uart_console_init+0x24>)
   16860:	4808      	ldr	r0, [pc, #32]	; (16884 <uart_console_init+0x28>)
   16862:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   16864:	f008 fd25 	bl	1f2b2 <z_device_ready>
   16868:	b138      	cbz	r0, 1687a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   1686a:	4807      	ldr	r0, [pc, #28]	; (16888 <uart_console_init+0x2c>)
   1686c:	f7fb f9d0 	bl	11c10 <__stdout_hook_install>
	__printk_hook_install(console_out);
   16870:	4805      	ldr	r0, [pc, #20]	; (16888 <uart_console_init+0x2c>)
   16872:	f7f9 f93f 	bl	faf4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   16876:	2000      	movs	r0, #0
}
   16878:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1687a:	f06f 0012 	mvn.w	r0, #18
   1687e:	e7fb      	b.n	16878 <uart_console_init+0x1c>
   16880:	20001d2c 	.word	0x20001d2c
   16884:	0001f6c8 	.word	0x0001f6c8
   16888:	0001688d 	.word	0x0001688d

0001688c <console_out>:
	if ('\n' == c) {
   1688c:	280a      	cmp	r0, #10
{
   1688e:	b538      	push	{r3, r4, r5, lr}
   16890:	4d07      	ldr	r5, [pc, #28]	; (168b0 <console_out+0x24>)
   16892:	4604      	mov	r4, r0
	if ('\n' == c) {
   16894:	d104      	bne.n	168a0 <console_out+0x14>
   16896:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   16898:	6883      	ldr	r3, [r0, #8]
   1689a:	210d      	movs	r1, #13
   1689c:	685b      	ldr	r3, [r3, #4]
   1689e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   168a0:	6828      	ldr	r0, [r5, #0]
   168a2:	6883      	ldr	r3, [r0, #8]
   168a4:	b2e1      	uxtb	r1, r4
   168a6:	685b      	ldr	r3, [r3, #4]
   168a8:	4798      	blx	r3
}
   168aa:	4620      	mov	r0, r4
   168ac:	bd38      	pop	{r3, r4, r5, pc}
   168ae:	bf00      	nop
   168b0:	20001d2c 	.word	0x20001d2c

000168b4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   168b4:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   168b6:	6905      	ldr	r5, [r0, #16]
{
   168b8:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   168ba:	460c      	mov	r4, r1
   168bc:	b961      	cbnz	r1, 168d8 <gpio_nrfx_manage_callback+0x24>
   168be:	4922      	ldr	r1, [pc, #136]	; (16948 <gpio_nrfx_manage_callback+0x94>)
   168c0:	4a22      	ldr	r2, [pc, #136]	; (1694c <gpio_nrfx_manage_callback+0x98>)
   168c2:	4823      	ldr	r0, [pc, #140]	; (16950 <gpio_nrfx_manage_callback+0x9c>)
   168c4:	2324      	movs	r3, #36	; 0x24
   168c6:	f006 f86c 	bl	1c9a2 <printk>
   168ca:	4822      	ldr	r0, [pc, #136]	; (16954 <gpio_nrfx_manage_callback+0xa0>)
   168cc:	f006 f869 	bl	1c9a2 <printk>
   168d0:	481e      	ldr	r0, [pc, #120]	; (1694c <gpio_nrfx_manage_callback+0x98>)
   168d2:	2124      	movs	r1, #36	; 0x24
   168d4:	f006 fabf 	bl	1ce56 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   168d8:	6863      	ldr	r3, [r4, #4]
   168da:	b963      	cbnz	r3, 168f6 <gpio_nrfx_manage_callback+0x42>
   168dc:	491e      	ldr	r1, [pc, #120]	; (16958 <gpio_nrfx_manage_callback+0xa4>)
   168de:	4a1b      	ldr	r2, [pc, #108]	; (1694c <gpio_nrfx_manage_callback+0x98>)
   168e0:	481b      	ldr	r0, [pc, #108]	; (16950 <gpio_nrfx_manage_callback+0x9c>)
   168e2:	2325      	movs	r3, #37	; 0x25
   168e4:	f006 f85d 	bl	1c9a2 <printk>
   168e8:	481c      	ldr	r0, [pc, #112]	; (1695c <gpio_nrfx_manage_callback+0xa8>)
   168ea:	f006 f85a 	bl	1c9a2 <printk>
   168ee:	4817      	ldr	r0, [pc, #92]	; (1694c <gpio_nrfx_manage_callback+0x98>)
   168f0:	2125      	movs	r1, #37	; 0x25
   168f2:	f006 fab0 	bl	1ce56 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   168f6:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   168f8:	b15b      	cbz	r3, 16912 <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   168fa:	2200      	movs	r2, #0
   168fc:	429c      	cmp	r4, r3
   168fe:	d113      	bne.n	16928 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   16900:	6823      	ldr	r3, [r4, #0]
   16902:	b95a      	cbnz	r2, 1691c <gpio_nrfx_manage_callback+0x68>
   16904:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   16906:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   16908:	4294      	cmp	r4, r2
   1690a:	d100      	bne.n	1690e <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   1690c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1690e:	2300      	movs	r3, #0
   16910:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   16912:	b976      	cbnz	r6, 16932 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   16914:	2000      	movs	r0, #0
				     callback, set);
}
   16916:	bd70      	pop	{r4, r5, r6, pc}
   16918:	460b      	mov	r3, r1
   1691a:	e7ef      	b.n	168fc <gpio_nrfx_manage_callback+0x48>
   1691c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1691e:	68ab      	ldr	r3, [r5, #8]
   16920:	429c      	cmp	r4, r3
	list->tail = node;
   16922:	bf08      	it	eq
   16924:	60aa      	streq	r2, [r5, #8]
}
   16926:	e7f2      	b.n	1690e <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16928:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1692a:	461a      	mov	r2, r3
   1692c:	2900      	cmp	r1, #0
   1692e:	d1f3      	bne.n	16918 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   16930:	b13e      	cbz	r6, 16942 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   16932:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   16934:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   16936:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   16938:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1693a:	2800      	cmp	r0, #0
   1693c:	d1ea      	bne.n	16914 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1693e:	60ac      	str	r4, [r5, #8]
}
   16940:	e7e9      	b.n	16916 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   16942:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   16946:	e7e6      	b.n	16916 <gpio_nrfx_manage_callback+0x62>
   16948:	00020e64 	.word	0x00020e64
   1694c:	00020e37 	.word	0x00020e37
   16950:	0001feb5 	.word	0x0001feb5
   16954:	00020e6d 	.word	0x00020e6d
   16958:	00020e7c 	.word	0x00020e7c
   1695c:	00020e8e 	.word	0x00020e8e

00016960 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16960:	6803      	ldr	r3, [r0, #0]
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   16962:	095a      	lsrs	r2, r3, #5
   16964:	bf0c      	ite	eq
   16966:	f04f 32ff 	moveq.w	r2, #4294967295
   1696a:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   1696c:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
   16970:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16974:	07db      	lsls	r3, r3, #31
{
   16976:	b510      	push	{r4, lr}
   16978:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1697a:	d40b      	bmi.n	16994 <nrf_gpio_pin_port_decode+0x34>
   1697c:	4910      	ldr	r1, [pc, #64]	; (169c0 <nrf_gpio_pin_port_decode+0x60>)
   1697e:	4811      	ldr	r0, [pc, #68]	; (169c4 <nrf_gpio_pin_port_decode+0x64>)
   16980:	4a11      	ldr	r2, [pc, #68]	; (169c8 <nrf_gpio_pin_port_decode+0x68>)
   16982:	f44f 7305 	mov.w	r3, #532	; 0x214
   16986:	f006 f80c 	bl	1c9a2 <printk>
   1698a:	480f      	ldr	r0, [pc, #60]	; (169c8 <nrf_gpio_pin_port_decode+0x68>)
   1698c:	f44f 7105 	mov.w	r1, #532	; 0x214
   16990:	f006 fa61 	bl	1ce56 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   16994:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   16996:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1699a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1699c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1699e:	d00b      	beq.n	169b8 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   169a0:	490a      	ldr	r1, [pc, #40]	; (169cc <nrf_gpio_pin_port_decode+0x6c>)
   169a2:	4808      	ldr	r0, [pc, #32]	; (169c4 <nrf_gpio_pin_port_decode+0x64>)
   169a4:	4a08      	ldr	r2, [pc, #32]	; (169c8 <nrf_gpio_pin_port_decode+0x68>)
   169a6:	f240 2319 	movw	r3, #537	; 0x219
   169aa:	f005 fffa 	bl	1c9a2 <printk>
   169ae:	4806      	ldr	r0, [pc, #24]	; (169c8 <nrf_gpio_pin_port_decode+0x68>)
   169b0:	f240 2119 	movw	r1, #537	; 0x219
   169b4:	f006 fa4f 	bl	1ce56 <assert_post_action>
}
   169b8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   169bc:	bd10      	pop	{r4, pc}
   169be:	bf00      	nop
   169c0:	00020ed8 	.word	0x00020ed8
   169c4:	0001feb5 	.word	0x0001feb5
   169c8:	00020ea5 	.word	0x00020ea5
   169cc:	00021b83 	.word	0x00021b83

000169d0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   169d0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   169d2:	4b09      	ldr	r3, [pc, #36]	; (169f8 <gpio_nrfx_init+0x28>)
   169d4:	781a      	ldrb	r2, [r3, #0]
   169d6:	b96a      	cbnz	r2, 169f4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   169d8:	2101      	movs	r1, #1
   169da:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   169dc:	2006      	movs	r0, #6
   169de:	2105      	movs	r1, #5
   169e0:	f7fa fcb8 	bl	11354 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   169e4:	2006      	movs	r0, #6
   169e6:	f7fa fc83 	bl	112f0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   169ea:	4b04      	ldr	r3, [pc, #16]	; (169fc <gpio_nrfx_init+0x2c>)
   169ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   169f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   169f4:	2000      	movs	r0, #0
   169f6:	bd08      	pop	{r3, pc}
   169f8:	20001f1f 	.word	0x20001f1f
   169fc:	40006000 	.word	0x40006000

00016a00 <gpio_nrfx_pin_interrupt_configure>:
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   16a00:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   16a04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   16a08:	6904      	ldr	r4, [r0, #16]
{
   16a0a:	4607      	mov	r7, r0
   16a0c:	460e      	mov	r6, r1
   16a0e:	4690      	mov	r8, r2
   16a10:	4699      	mov	r9, r3
   16a12:	f001 051f 	and.w	r5, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   16a16:	f040 80ab 	bne.w	16b70 <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   16a1a:	6843      	ldr	r3, [r0, #4]
   16a1c:	7a1b      	ldrb	r3, [r3, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16a1e:	a801      	add	r0, sp, #4
   16a20:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   16a24:	9301      	str	r3, [sp, #4]
   16a26:	f7ff ff9b 	bl	16960 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   16a2a:	9b01      	ldr	r3, [sp, #4]
   16a2c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   16a30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   16a34:	07d8      	lsls	r0, r3, #31
   16a36:	f100 80bb 	bmi.w	16bb0 <gpio_nrfx_pin_interrupt_configure+0x1b0>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   16a3a:	68e3      	ldr	r3, [r4, #12]
   16a3c:	2101      	movs	r1, #1
   16a3e:	40b1      	lsls	r1, r6
   16a40:	4319      	orrs	r1, r3
   16a42:	6963      	ldr	r3, [r4, #20]
   16a44:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   16a46:	2101      	movs	r1, #1
   16a48:	40b1      	lsls	r1, r6
   16a4a:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   16a4e:	bf0c      	ite	eq
   16a50:	430b      	orreq	r3, r1
   16a52:	438b      	bicne	r3, r1
   16a54:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   16a56:	69a3      	ldr	r3, [r4, #24]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   16a58:	4a57      	ldr	r2, [pc, #348]	; (16bb8 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
	struct gpio_nrfx_data *data = get_port_data(port);
   16a5a:	f8d7 8010 	ldr.w	r8, [r7, #16]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   16a5e:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   16a62:	bf0c      	ite	eq
   16a64:	430b      	orreq	r3, r1
   16a66:	438b      	bicne	r3, r1
   16a68:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   16a6a:	6923      	ldr	r3, [r4, #16]
   16a6c:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   16a70:	bf0c      	ite	eq
   16a72:	4319      	orreq	r1, r3
   16a74:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16a78:	687b      	ldr	r3, [r7, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   16a7a:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16a7c:	7a1b      	ldrb	r3, [r3, #8]
   16a7e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   16a82:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16a86:	2000      	movs	r0, #0
   16a88:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16a8a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   16a8e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   16a92:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   16a96:	428d      	cmp	r5, r1
   16a98:	d175      	bne.n	16b86 <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   16a9a:	fa23 f100 	lsr.w	r1, r3, r0
   16a9e:	07c9      	lsls	r1, r1, #31
   16aa0:	d571      	bpl.n	16b86 <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   16aa2:	0083      	lsls	r3, r0, #2
   16aa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16aa8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   16aac:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   16ab0:	f021 0101 	bic.w	r1, r1, #1
   16ab4:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   16ab8:	2301      	movs	r3, #1
   16aba:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   16abc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   16ac0:	b2c0      	uxtb	r0, r0
   16ac2:	f001 ff05 	bl	188d0 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   16ac6:	4628      	mov	r0, r5
   16ac8:	2100      	movs	r1, #0
   16aca:	f008 fb27 	bl	1f11c <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   16ace:	f8d8 000c 	ldr.w	r0, [r8, #12]
   16ad2:	40f0      	lsrs	r0, r6
   16ad4:	f010 0001 	ands.w	r0, r0, #1
   16ad8:	d047      	beq.n	16b6a <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   16ada:	f8d8 0014 	ldr.w	r0, [r8, #20]
   16ade:	40f0      	lsrs	r0, r6
   16ae0:	f010 0401 	ands.w	r4, r0, #1
   16ae4:	d057      	beq.n	16b96 <gpio_nrfx_pin_interrupt_configure+0x196>
				if (data->double_edge & BIT(pin)) {
   16ae6:	f8d8 3018 	ldr.w	r3, [r8, #24]
   16aea:	40f3      	lsrs	r3, r6
   16aec:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   16aee:	bf5f      	itttt	pl
   16af0:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   16af4:	fa21 f606 	lsrpl.w	r6, r1, r6
   16af8:	f006 0601 	andpl.w	r6, r6, #1
   16afc:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   16b00:	a801      	add	r0, sp, #4
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   16b02:	bf54      	ite	pl
   16b04:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   16b06:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   16b08:	f001 ff04 	bl	18914 <nrfx_gpiote_channel_alloc>
   16b0c:	4b2b      	ldr	r3, [pc, #172]	; (16bbc <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   16b0e:	4298      	cmp	r0, r3
   16b10:	d13e      	bne.n	16b90 <gpio_nrfx_pin_interrupt_configure+0x190>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   16b12:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16b16:	008b      	lsls	r3, r1, #2
   16b18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16b1c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16b20:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16b22:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16b26:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   16b2a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   16b2e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16b32:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16b36:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
   16b3a:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   16b3c:	008a      	lsls	r2, r1, #2
   16b3e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16b42:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16b46:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16b4a:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16b4c:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16b50:	6010      	str	r0, [r2, #0]
   16b52:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   16b54:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16b58:	f042 0201 	orr.w	r2, r2, #1
   16b5c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   16b60:	4a15      	ldr	r2, [pc, #84]	; (16bb8 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   16b62:	2301      	movs	r3, #1
   16b64:	408b      	lsls	r3, r1
   16b66:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16b6a:	b003      	add	sp, #12
   16b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   16b70:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   16b74:	f47f af61 	bne.w	16a3a <gpio_nrfx_pin_interrupt_configure+0x3a>
   16b78:	2101      	movs	r1, #1
   16b7a:	fa01 f306 	lsl.w	r3, r1, r6
   16b7e:	68e1      	ldr	r1, [r4, #12]
   16b80:	ea21 0103 	bic.w	r1, r1, r3
   16b84:	e75d      	b.n	16a42 <gpio_nrfx_pin_interrupt_configure+0x42>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16b86:	3001      	adds	r0, #1
   16b88:	2808      	cmp	r0, #8
   16b8a:	f47f af7e 	bne.w	16a8a <gpio_nrfx_pin_interrupt_configure+0x8a>
   16b8e:	e79a      	b.n	16ac6 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   16b90:	f06f 0012 	mvn.w	r0, #18
   16b94:	e7e9      	b.n	16b6a <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   16b96:	f8d8 1010 	ldr.w	r1, [r8, #16]
   16b9a:	40f1      	lsrs	r1, r6
   16b9c:	f001 0101 	and.w	r1, r1, #1
   16ba0:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   16ba4:	4628      	mov	r0, r5
   16ba6:	b2c9      	uxtb	r1, r1
   16ba8:	f008 fab8 	bl	1f11c <nrf_gpio_cfg_sense_set>
	int res = 0;
   16bac:	4620      	mov	r0, r4
   16bae:	e7dc      	b.n	16b6a <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   16bb0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16bb4:	e7d9      	b.n	16b6a <gpio_nrfx_pin_interrupt_configure+0x16a>
   16bb6:	bf00      	nop
   16bb8:	40006000 	.word	0x40006000
   16bbc:	0bad0000 	.word	0x0bad0000

00016bc0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16bc0:	4b2e      	ldr	r3, [pc, #184]	; (16c7c <gpio_nrfx_config+0xbc>)
{
   16bc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16bc4:	4c2e      	ldr	r4, [pc, #184]	; (16c80 <gpio_nrfx_config+0xc0>)
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   16bc6:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16bc8:	4013      	ands	r3, r2
   16bca:	42a3      	cmp	r3, r4
   16bcc:	d045      	beq.n	16c5a <gpio_nrfx_config+0x9a>
   16bce:	d80e      	bhi.n	16bee <gpio_nrfx_config+0x2e>
   16bd0:	2b06      	cmp	r3, #6
   16bd2:	d044      	beq.n	16c5e <gpio_nrfx_config+0x9e>
   16bd4:	d806      	bhi.n	16be4 <gpio_nrfx_config+0x24>
   16bd6:	2b00      	cmp	r3, #0
   16bd8:	d041      	beq.n	16c5e <gpio_nrfx_config+0x9e>
   16bda:	2b02      	cmp	r3, #2
   16bdc:	d041      	beq.n	16c62 <gpio_nrfx_config+0xa2>
   16bde:	f06f 0015 	mvn.w	r0, #21
   16be2:	e038      	b.n	16c56 <gpio_nrfx_config+0x96>
   16be4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   16be8:	d1f9      	bne.n	16bde <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   16bea:	2401      	movs	r4, #1
   16bec:	e009      	b.n	16c02 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16bee:	4c25      	ldr	r4, [pc, #148]	; (16c84 <gpio_nrfx_config+0xc4>)
   16bf0:	42a3      	cmp	r3, r4
   16bf2:	d038      	beq.n	16c66 <gpio_nrfx_config+0xa6>
   16bf4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   16bf8:	d037      	beq.n	16c6a <gpio_nrfx_config+0xaa>
   16bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   16bfe:	d1ee      	bne.n	16bde <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   16c00:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   16c02:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   16c04:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_NOPULL;
   16c08:	bf54      	ite	pl
   16c0a:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   16c0e:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   16c10:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   16c14:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   16c16:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   16c1a:	d507      	bpl.n	16c2c <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   16c1c:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   16c1e:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   16c22:	d524      	bpl.n	16c6e <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
   16c24:	2301      	movs	r3, #1
   16c26:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   16c28:	f8cc 3508 	str.w	r3, [ip, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   16c2c:	7a03      	ldrb	r3, [r0, #8]
   16c2e:	f001 011f 	and.w	r1, r1, #31
   16c32:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16c36:	a801      	add	r0, sp, #4
   16c38:	9101      	str	r1, [sp, #4]
   16c3a:	f7ff fe91 	bl	16960 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   16c3e:	9a01      	ldr	r2, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16c40:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   16c44:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   16c48:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16c4c:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   16c50:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   16c54:	2000      	movs	r0, #0
}
   16c56:	b003      	add	sp, #12
   16c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   16c5a:	2407      	movs	r4, #7
   16c5c:	e7d1      	b.n	16c02 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16c5e:	461c      	mov	r4, r3
   16c60:	e7cf      	b.n	16c02 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   16c62:	2404      	movs	r4, #4
   16c64:	e7cd      	b.n	16c02 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   16c66:	2405      	movs	r4, #5
   16c68:	e7cb      	b.n	16c02 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   16c6a:	2403      	movs	r4, #3
   16c6c:	e7c9      	b.n	16c02 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   16c6e:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   16c70:	bf42      	ittt	mi
   16c72:	2301      	movmi	r3, #1
   16c74:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   16c76:	f8cc 350c 	strmi.w	r3, [ip, #1292]	; 0x50c
}
   16c7a:	e7d7      	b.n	16c2c <gpio_nrfx_config+0x6c>
   16c7c:	00f00006 	.word	0x00f00006
   16c80:	00100006 	.word	0x00100006
   16c84:	00400002 	.word	0x00400002

00016c88 <gpiote_event_handler>:
{
   16c88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16c8c:	4d54      	ldr	r5, [pc, #336]	; (16de0 <gpiote_event_handler+0x158>)
   16c8e:	682f      	ldr	r7, [r5, #0]
	if (port_event) {
   16c90:	2f00      	cmp	r7, #0
   16c92:	d062      	beq.n	16d5a <gpiote_event_handler+0xd2>
	uint32_t out = data->pin_int_en;
   16c94:	4b53      	ldr	r3, [pc, #332]	; (16de4 <gpiote_event_handler+0x15c>)
	out &= ~data->trig_edge & ~data->double_edge;
   16c96:	e9d3 2005 	ldrd	r2, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
   16c9a:	68d9      	ldr	r1, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   16c9c:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   16c9e:	4302      	orrs	r2, r0
   16ca0:	ea21 0902 	bic.w	r9, r1, r2
    return p_reg->IN;
   16ca4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
	uint32_t check_pins = level_pins;
   16ca8:	464e      	mov	r6, r9
   16caa:	f8d2 4510 	ldr.w	r4, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   16cae:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   16cb0:	ea29 0404 	bic.w	r4, r9, r4
	uint32_t bit = 1U << pin;
   16cb4:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   16cb8:	f04f 0a00 	mov.w	sl, #0
	while (check_pins) {
   16cbc:	bb86      	cbnz	r6, 16d20 <gpiote_event_handler+0x98>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16cbe:	602e      	str	r6, [r5, #0]
   16cc0:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   16cc2:	4849      	ldr	r0, [pc, #292]	; (16de8 <gpiote_event_handler+0x160>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   16cc4:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   16cc6:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16cc8:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
   16cca:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   16cce:	fa05 f103 	lsl.w	r1, r5, r3
   16cd2:	4211      	tst	r1, r2
   16cd4:	d011      	beq.n	16cfa <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16cd6:	009a      	lsls	r2, r3, #2
   16cd8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16cdc:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   16ce0:	6811      	ldr	r1, [r2, #0]
   16ce2:	b151      	cbz	r1, 16cfa <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16ce4:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   16ce8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16cec:	6016      	str	r6, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16cee:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   16cf2:	fa05 f101 	lsl.w	r1, r5, r1
   16cf6:	6812      	ldr	r2, [r2, #0]
   16cf8:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16cfa:	3301      	adds	r3, #1
   16cfc:	2b08      	cmp	r3, #8
   16cfe:	d1e4      	bne.n	16cca <gpiote_event_handler+0x42>
	if (fired_triggers[0]) {
   16d00:	bb6c      	cbnz	r4, 16d5e <gpiote_event_handler+0xd6>
	if (port_event) {
   16d02:	b157      	cbz	r7, 16d1a <gpiote_event_handler+0x92>
	uint32_t out = data->pin_int_en;
   16d04:	4d37      	ldr	r5, [pc, #220]	; (16de4 <gpiote_event_handler+0x15c>)
	out &= ~data->trig_edge & ~data->double_edge;
   16d06:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
	uint32_t out = data->pin_int_en;
   16d0a:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   16d0c:	430a      	orrs	r2, r1
   16d0e:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t bit = 1U << pin;
   16d12:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   16d14:	2700      	movs	r7, #0
	while (level_pins) {
   16d16:	2c00      	cmp	r4, #0
   16d18:	d150      	bne.n	16dbc <gpiote_event_handler+0x134>
}
   16d1a:	b003      	add	sp, #12
   16d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   16d20:	ea18 0f06 	tst.w	r8, r6
   16d24:	d014      	beq.n	16d50 <gpiote_event_handler+0xc8>
			if (!(level_pins & bit)) {
   16d26:	ea18 0f09 	tst.w	r8, r9
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16d2a:	f00a 0b1f 	and.w	fp, sl, #31
			if (!(level_pins & bit)) {
   16d2e:	d109      	bne.n	16d44 <gpiote_event_handler+0xbc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16d30:	a801      	add	r0, sp, #4
   16d32:	f8cd b004 	str.w	fp, [sp, #4]
   16d36:	f7ff fe13 	bl	16960 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   16d3a:	9b01      	ldr	r3, [sp, #4]
   16d3c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   16d40:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   16d44:	2100      	movs	r1, #0
   16d46:	4658      	mov	r0, fp
   16d48:	f008 f9e8 	bl	1f11c <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   16d4c:	ea26 0608 	bic.w	r6, r6, r8
		++pin;
   16d50:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   16d54:	ea4f 0848 	mov.w	r8, r8, lsl #1
   16d58:	e7b0      	b.n	16cbc <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   16d5a:	463c      	mov	r4, r7
   16d5c:	e7b1      	b.n	16cc2 <gpiote_event_handler+0x3a>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16d5e:	4b21      	ldr	r3, [pc, #132]	; (16de4 <gpiote_event_handler+0x15c>)
   16d60:	685d      	ldr	r5, [r3, #4]
   16d62:	2d00      	cmp	r5, #0
   16d64:	d0cd      	beq.n	16d02 <gpiote_event_handler+0x7a>
	return node->next;
   16d66:	682e      	ldr	r6, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   16d68:	f8df 9088 	ldr.w	r9, [pc, #136]	; 16df4 <gpiote_event_handler+0x16c>
			__ASSERT(cb->handler, "No callback handler!");
   16d6c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 16df8 <gpiote_event_handler+0x170>
   16d70:	f8df a088 	ldr.w	sl, [pc, #136]	; 16dfc <gpiote_event_handler+0x174>
   16d74:	2e00      	cmp	r6, #0
   16d76:	bf38      	it	cc
   16d78:	2600      	movcc	r6, #0
		if (cb->pin_mask & pins) {
   16d7a:	68ab      	ldr	r3, [r5, #8]
   16d7c:	421c      	tst	r4, r3
   16d7e:	d014      	beq.n	16daa <gpiote_event_handler+0x122>
			__ASSERT(cb->handler, "No callback handler!");
   16d80:	686b      	ldr	r3, [r5, #4]
   16d82:	b963      	cbnz	r3, 16d9e <gpiote_event_handler+0x116>
   16d84:	4651      	mov	r1, sl
   16d86:	4819      	ldr	r0, [pc, #100]	; (16dec <gpiote_event_handler+0x164>)
   16d88:	2345      	movs	r3, #69	; 0x45
   16d8a:	4642      	mov	r2, r8
   16d8c:	f005 fe09 	bl	1c9a2 <printk>
   16d90:	4817      	ldr	r0, [pc, #92]	; (16df0 <gpiote_event_handler+0x168>)
   16d92:	f005 fe06 	bl	1c9a2 <printk>
   16d96:	2145      	movs	r1, #69	; 0x45
   16d98:	4640      	mov	r0, r8
   16d9a:	f006 f85c 	bl	1ce56 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   16d9e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   16da2:	4629      	mov	r1, r5
   16da4:	4022      	ands	r2, r4
   16da6:	4648      	mov	r0, r9
   16da8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16daa:	2e00      	cmp	r6, #0
   16dac:	d0a9      	beq.n	16d02 <gpiote_event_handler+0x7a>
   16dae:	6833      	ldr	r3, [r6, #0]
   16db0:	2b00      	cmp	r3, #0
   16db2:	bf38      	it	cc
   16db4:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16db6:	4635      	mov	r5, r6
   16db8:	461e      	mov	r6, r3
   16dba:	e7de      	b.n	16d7a <gpiote_event_handler+0xf2>
		if (level_pins & bit) {
   16dbc:	4226      	tst	r6, r4
   16dbe:	d00c      	beq.n	16dda <gpiote_event_handler+0x152>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   16dc0:	6929      	ldr	r1, [r5, #16]
   16dc2:	40f9      	lsrs	r1, r7
   16dc4:	f001 0101 	and.w	r1, r1, #1
   16dc8:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   16dcc:	b2c9      	uxtb	r1, r1
   16dce:	f007 001f 	and.w	r0, r7, #31
   16dd2:	f008 f9a3 	bl	1f11c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   16dd6:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   16dda:	3701      	adds	r7, #1
		bit <<= 1;
   16ddc:	0076      	lsls	r6, r6, #1
   16dde:	e79a      	b.n	16d16 <gpiote_event_handler+0x8e>
   16de0:	4000617c 	.word	0x4000617c
   16de4:	20001d30 	.word	0x20001d30
   16de8:	40006000 	.word	0x40006000
   16dec:	0001feb5 	.word	0x0001feb5
   16df0:	00020e8e 	.word	0x00020e8e
   16df4:	0001f710 	.word	0x0001f710
   16df8:	00020e37 	.word	0x00020e37
   16dfc:	00020efb 	.word	0x00020efb

00016e00 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   16e00:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   16e02:	794b      	ldrb	r3, [r1, #5]
   16e04:	2b01      	cmp	r3, #1
   16e06:	d124      	bne.n	16e52 <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   16e08:	798b      	ldrb	r3, [r1, #6]
   16e0a:	2b03      	cmp	r3, #3
   16e0c:	d121      	bne.n	16e52 <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   16e0e:	79ca      	ldrb	r2, [r1, #7]
   16e10:	b12a      	cbz	r2, 16e1e <uarte_nrfx_configure+0x1e>
   16e12:	2a01      	cmp	r2, #1
   16e14:	d11d      	bne.n	16e52 <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   16e16:	6843      	ldr	r3, [r0, #4]
   16e18:	685b      	ldr	r3, [r3, #4]
   16e1a:	079b      	lsls	r3, r3, #30
   16e1c:	d019      	beq.n	16e52 <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   16e1e:	790c      	ldrb	r4, [r1, #4]
   16e20:	b114      	cbz	r4, 16e28 <uarte_nrfx_configure+0x28>
   16e22:	2c02      	cmp	r4, #2
   16e24:	d115      	bne.n	16e52 <uarte_nrfx_configure+0x52>
   16e26:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   16e28:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   16e2a:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   16e2c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   16e30:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   16e32:	d062      	beq.n	16efa <uarte_nrfx_configure+0xfa>
   16e34:	d82b      	bhi.n	16e8e <uarte_nrfx_configure+0x8e>
   16e36:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16e3a:	d061      	beq.n	16f00 <uarte_nrfx_configure+0x100>
   16e3c:	d814      	bhi.n	16e68 <uarte_nrfx_configure+0x68>
   16e3e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   16e42:	d05f      	beq.n	16f04 <uarte_nrfx_configure+0x104>
   16e44:	d808      	bhi.n	16e58 <uarte_nrfx_configure+0x58>
   16e46:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16e4a:	d05e      	beq.n	16f0a <uarte_nrfx_configure+0x10a>
   16e4c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   16e50:	d05e      	beq.n	16f10 <uarte_nrfx_configure+0x110>
   16e52:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16e56:	e04f      	b.n	16ef8 <uarte_nrfx_configure+0xf8>
   16e58:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   16e5c:	d05b      	beq.n	16f16 <uarte_nrfx_configure+0x116>
   16e5e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   16e62:	d1f6      	bne.n	16e52 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   16e64:	4b36      	ldr	r3, [pc, #216]	; (16f40 <uarte_nrfx_configure+0x140>)
   16e66:	e03c      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   16e68:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   16e6c:	d056      	beq.n	16f1c <uarte_nrfx_configure+0x11c>
   16e6e:	d807      	bhi.n	16e80 <uarte_nrfx_configure+0x80>
   16e70:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   16e74:	d054      	beq.n	16f20 <uarte_nrfx_configure+0x120>
   16e76:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   16e7a:	d1ea      	bne.n	16e52 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   16e7c:	4b31      	ldr	r3, [pc, #196]	; (16f44 <uarte_nrfx_configure+0x144>)
   16e7e:	e030      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   16e80:	f647 2612 	movw	r6, #31250	; 0x7a12
   16e84:	42b3      	cmp	r3, r6
   16e86:	d1e4      	bne.n	16e52 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   16e88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   16e8c:	e029      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   16e8e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   16e92:	d047      	beq.n	16f24 <uarte_nrfx_configure+0x124>
   16e94:	d813      	bhi.n	16ebe <uarte_nrfx_configure+0xbe>
   16e96:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   16e9a:	d046      	beq.n	16f2a <uarte_nrfx_configure+0x12a>
   16e9c:	d809      	bhi.n	16eb2 <uarte_nrfx_configure+0xb2>
   16e9e:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   16ea2:	42b3      	cmp	r3, r6
   16ea4:	d043      	beq.n	16f2e <uarte_nrfx_configure+0x12e>
   16ea6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   16eaa:	d1d2      	bne.n	16e52 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   16eac:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   16eb0:	e017      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   16eb2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   16eb6:	d1cc      	bne.n	16e52 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   16eb8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   16ebc:	e011      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   16ebe:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   16ec2:	d037      	beq.n	16f34 <uarte_nrfx_configure+0x134>
   16ec4:	d808      	bhi.n	16ed8 <uarte_nrfx_configure+0xd8>
   16ec6:	4e20      	ldr	r6, [pc, #128]	; (16f48 <uarte_nrfx_configure+0x148>)
   16ec8:	42b3      	cmp	r3, r6
   16eca:	d036      	beq.n	16f3a <uarte_nrfx_configure+0x13a>
   16ecc:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   16ed0:	d1bf      	bne.n	16e52 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   16ed2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   16ed6:	e004      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   16ed8:	4e1c      	ldr	r6, [pc, #112]	; (16f4c <uarte_nrfx_configure+0x14c>)
   16eda:	42b3      	cmp	r3, r6
   16edc:	d1b9      	bne.n	16e52 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   16ede:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   16ee2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   16ee6:	6903      	ldr	r3, [r0, #16]
   16ee8:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   16eea:	4322      	orrs	r2, r4
   16eec:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   16eee:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   16ef2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   16ef6:	2000      	movs	r0, #0
}
   16ef8:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   16efa:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   16efe:	e7f0      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   16f00:	4b13      	ldr	r3, [pc, #76]	; (16f50 <uarte_nrfx_configure+0x150>)
   16f02:	e7ee      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   16f04:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   16f08:	e7eb      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = 0x00014000;
   16f0a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   16f0e:	e7e8      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   16f10:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   16f14:	e7e5      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   16f16:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   16f1a:	e7e2      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   16f1c:	4b0d      	ldr	r3, [pc, #52]	; (16f54 <uarte_nrfx_configure+0x154>)
   16f1e:	e7e0      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   16f20:	4b0d      	ldr	r3, [pc, #52]	; (16f58 <uarte_nrfx_configure+0x158>)
   16f22:	e7de      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   16f24:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   16f28:	e7db      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   16f2a:	4b0c      	ldr	r3, [pc, #48]	; (16f5c <uarte_nrfx_configure+0x15c>)
   16f2c:	e7d9      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   16f2e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   16f32:	e7d6      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   16f34:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   16f38:	e7d3      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   16f3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   16f3e:	e7d0      	b.n	16ee2 <uarte_nrfx_configure+0xe2>
   16f40:	0013b000 	.word	0x0013b000
   16f44:	004ea000 	.word	0x004ea000
   16f48:	0003d090 	.word	0x0003d090
   16f4c:	000f4240 	.word	0x000f4240
   16f50:	00275000 	.word	0x00275000
   16f54:	0075c000 	.word	0x0075c000
   16f58:	003af000 	.word	0x003af000
   16f5c:	013a9000 	.word	0x013a9000

00016f60 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16f60:	6803      	ldr	r3, [r0, #0]
    switch (port)
   16f62:	095a      	lsrs	r2, r3, #5
   16f64:	bf0c      	ite	eq
   16f66:	f04f 32ff 	moveq.w	r2, #4294967295
   16f6a:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   16f6c:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   16f70:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16f74:	07db      	lsls	r3, r3, #31
{
   16f76:	b510      	push	{r4, lr}
   16f78:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16f7a:	d40b      	bmi.n	16f94 <nrf_gpio_pin_port_decode+0x34>
   16f7c:	4910      	ldr	r1, [pc, #64]	; (16fc0 <nrf_gpio_pin_port_decode+0x60>)
   16f7e:	4811      	ldr	r0, [pc, #68]	; (16fc4 <nrf_gpio_pin_port_decode+0x64>)
   16f80:	4a11      	ldr	r2, [pc, #68]	; (16fc8 <nrf_gpio_pin_port_decode+0x68>)
   16f82:	f44f 7305 	mov.w	r3, #532	; 0x214
   16f86:	f005 fd0c 	bl	1c9a2 <printk>
   16f8a:	480f      	ldr	r0, [pc, #60]	; (16fc8 <nrf_gpio_pin_port_decode+0x68>)
   16f8c:	f44f 7105 	mov.w	r1, #532	; 0x214
   16f90:	f005 ff61 	bl	1ce56 <assert_post_action>
    uint32_t pin_number = *p_pin;
   16f94:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   16f96:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16f9a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   16f9c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16f9e:	d00b      	beq.n	16fb8 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   16fa0:	490a      	ldr	r1, [pc, #40]	; (16fcc <nrf_gpio_pin_port_decode+0x6c>)
   16fa2:	4808      	ldr	r0, [pc, #32]	; (16fc4 <nrf_gpio_pin_port_decode+0x64>)
   16fa4:	4a08      	ldr	r2, [pc, #32]	; (16fc8 <nrf_gpio_pin_port_decode+0x68>)
   16fa6:	f240 2319 	movw	r3, #537	; 0x219
   16faa:	f005 fcfa 	bl	1c9a2 <printk>
   16fae:	4806      	ldr	r0, [pc, #24]	; (16fc8 <nrf_gpio_pin_port_decode+0x68>)
   16fb0:	f240 2119 	movw	r1, #537	; 0x219
   16fb4:	f005 ff4f 	bl	1ce56 <assert_post_action>
}
   16fb8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   16fbc:	bd10      	pop	{r4, pc}
   16fbe:	bf00      	nop
   16fc0:	00020ed8 	.word	0x00020ed8
   16fc4:	0001feb5 	.word	0x0001feb5
   16fc8:	00020ea5 	.word	0x00020ea5
   16fcc:	00021b83 	.word	0x00021b83

00016fd0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   16fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   16fd2:	6906      	ldr	r6, [r0, #16]
{
   16fd4:	4605      	mov	r5, r0
   16fd6:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   16fd8:	f008 f97d 	bl	1f2d6 <k_is_in_isr>
   16fdc:	b910      	cbnz	r0, 16fe4 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   16fde:	4b2c      	ldr	r3, [pc, #176]	; (17090 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   16fe0:	781b      	ldrb	r3, [r3, #0]
   16fe2:	b983      	cbnz	r3, 17006 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   16fe4:	f04f 0340 	mov.w	r3, #64	; 0x40
   16fe8:	f3ef 8411 	mrs	r4, BASEPRI
   16fec:	f383 8812 	msr	BASEPRI_MAX, r3
   16ff0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   16ff4:	4628      	mov	r0, r5
   16ff6:	f008 f8ed 	bl	1f1d4 <is_tx_ready>
   16ffa:	bb28      	cbnz	r0, 17048 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   16ffc:	f384 8811 	msr	BASEPRI, r4
   17000:	f3bf 8f6f 	isb	sy
}
   17004:	e7ee      	b.n	16fe4 <uarte_nrfx_poll_out+0x14>
{
   17006:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   17008:	4628      	mov	r0, r5
   1700a:	f008 f8e3 	bl	1f1d4 <is_tx_ready>
   1700e:	b970      	cbnz	r0, 1702e <uarte_nrfx_poll_out+0x5e>
   17010:	2001      	movs	r0, #1
   17012:	f008 f944 	bl	1f29e <nrfx_busy_wait>
   17016:	3c01      	subs	r4, #1
   17018:	d1f6      	bne.n	17008 <uarte_nrfx_poll_out+0x38>
   1701a:	2100      	movs	r1, #0
   1701c:	2021      	movs	r0, #33	; 0x21
   1701e:	f004 fb85 	bl	1b72c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   17022:	e7f0      	b.n	17006 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   17024:	f384 8811 	msr	BASEPRI, r4
   17028:	f3bf 8f6f 	isb	sy
}
   1702c:	e7f5      	b.n	1701a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1702e:	f04f 0340 	mov.w	r3, #64	; 0x40
   17032:	f3ef 8411 	mrs	r4, BASEPRI
   17036:	f383 8812 	msr	BASEPRI_MAX, r3
   1703a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1703e:	4628      	mov	r0, r5
   17040:	f008 f8c8 	bl	1f1d4 <is_tx_ready>
   17044:	2800      	cmp	r0, #0
   17046:	d0ed      	beq.n	17024 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   17048:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1704c:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   1704e:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   17050:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   17052:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   17056:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1705a:	2200      	movs	r2, #0
   1705c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   17060:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   17064:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   17068:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1706c:	684a      	ldr	r2, [r1, #4]
   1706e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   17070:	bf41      	itttt	mi
   17072:	2208      	movmi	r2, #8
   17074:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   17078:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   1707c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17080:	2201      	movs	r2, #1
   17082:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   17084:	f384 8811 	msr	BASEPRI, r4
   17088:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
   1708c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1708e:	bf00      	nop
   17090:	20002843 	.word	0x20002843

00017094 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   17094:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17098:	2200      	movs	r2, #0
   1709a:	2101      	movs	r1, #1
   1709c:	4607      	mov	r7, r0
   1709e:	2002      	movs	r0, #2
   170a0:	f7fa f958 	bl	11354 <z_arm_irq_priority_set>
   170a4:	2002      	movs	r0, #2
   170a6:	f7fa f923 	bl	112f0 <arch_irq_enable>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   170aa:	687d      	ldr	r5, [r7, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   170ac:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   170ae:	682c      	ldr	r4, [r5, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   170b0:	2300      	movs	r3, #0
   170b2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   170b6:	a801      	add	r0, sp, #4
   170b8:	68ab      	ldr	r3, [r5, #8]
	data->dev = dev;
   170ba:	6037      	str	r7, [r6, #0]
        nrf_gpio_pin_set(pin_number);
   170bc:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   170be:	f7ff ff4f 	bl	16f60 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   170c2:	9a01      	ldr	r2, [sp, #4]
   170c4:	2301      	movs	r3, #1
   170c6:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   170c8:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   170cc:	68ab      	ldr	r3, [r5, #8]
   170ce:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   170d0:	a801      	add	r0, sp, #4
   170d2:	f7ff ff45 	bl	16f60 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   170d6:	9b01      	ldr	r3, [sp, #4]
   170d8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   170dc:	2203      	movs	r2, #3
   170de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   170e2:	68eb      	ldr	r3, [r5, #12]
   170e4:	1c59      	adds	r1, r3, #1
   170e6:	d00c      	beq.n	17102 <uarte_0_init+0x6e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   170e8:	a801      	add	r0, sp, #4
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
   170ea:	f895 8018 	ldrb.w	r8, [r5, #24]
    nrf_gpio_cfg(
   170ee:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   170f0:	f7ff ff36 	bl	16f60 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   170f4:	9b01      	ldr	r3, [sp, #4]
   170f6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   170fa:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   170fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
   17102:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
   17106:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1710a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1710e:	692b      	ldr	r3, [r5, #16]
   17110:	1c5a      	adds	r2, r3, #1
   17112:	d00c      	beq.n	1712e <uarte_0_init+0x9a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17114:	a801      	add	r0, sp, #4
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
   17116:	f895 8019 	ldrb.w	r8, [r5, #25]
    nrf_gpio_cfg(
   1711a:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1711c:	f7ff ff20 	bl	16f60 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   17120:	9b01      	ldr	r3, [sp, #4]
   17122:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   17126:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1712a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1712e:	696b      	ldr	r3, [r5, #20]
   17130:	1c58      	adds	r0, r3, #1
   17132:	d013      	beq.n	1715c <uarte_0_init+0xc8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17134:	a801      	add	r0, sp, #4
   17136:	9301      	str	r3, [sp, #4]
   17138:	f7ff ff12 	bl	16f60 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1713c:	9a01      	ldr	r2, [sp, #4]
   1713e:	2301      	movs	r3, #1
   17140:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   17142:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   17146:	696b      	ldr	r3, [r5, #20]
   17148:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1714a:	a801      	add	r0, sp, #4
   1714c:	f7ff ff08 	bl	16f60 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   17150:	9b01      	ldr	r3, [sp, #4]
   17152:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17156:	2203      	movs	r2, #3
   17158:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
   1715c:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   17160:	6939      	ldr	r1, [r7, #16]
    p_reg->PSEL.RTS = pselrts;
   17162:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   17166:	4638      	mov	r0, r7
    p_reg->PSEL.CTS = pselcts;
   17168:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1716c:	3104      	adds	r1, #4
   1716e:	f7ff fe47 	bl	16e00 <uarte_nrfx_configure>
	if (err) {
   17172:	4607      	mov	r7, r0
   17174:	2800      	cmp	r0, #0
   17176:	d145      	bne.n	17204 <uarte_0_init+0x170>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   17178:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1717a:	0719      	lsls	r1, r3, #28
   1717c:	d519      	bpl.n	171b2 <uarte_0_init+0x11e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1717e:	f106 0012 	add.w	r0, r6, #18
   17182:	f001 fbff 	bl	18984 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   17186:	4b23      	ldr	r3, [pc, #140]	; (17214 <uarte_0_init+0x180>)
   17188:	4298      	cmp	r0, r3
   1718a:	d13f      	bne.n	1720c <uarte_0_init+0x178>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1718c:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1718e:	00c3      	lsls	r3, r0, #3
   17190:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17194:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   17198:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1719c:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   171a0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   171a4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   171a8:	4a1b      	ldr	r2, [pc, #108]	; (17218 <uarte_0_init+0x184>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   171aa:	2301      	movs	r3, #1
   171ac:	4083      	lsls	r3, r0
   171ae:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   171b2:	2308      	movs	r3, #8
   171b4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   171b8:	68eb      	ldr	r3, [r5, #12]
   171ba:	3301      	adds	r3, #1
   171bc:	d00c      	beq.n	171d8 <uarte_0_init+0x144>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   171be:	2300      	movs	r3, #0
   171c0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   171c4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   171c8:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   171cc:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   171d0:	2301      	movs	r3, #1
   171d2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   171d6:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   171d8:	686b      	ldr	r3, [r5, #4]
   171da:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   171dc:	bf5c      	itt	pl
   171de:	f44f 7280 	movpl.w	r2, #256	; 0x100
   171e2:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   171e6:	06db      	lsls	r3, r3, #27
   171e8:	bf44      	itt	mi
   171ea:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   171ee:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   171f2:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
   171f4:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   171f6:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   171fa:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   171fe:	2301      	movs	r3, #1
   17200:	60a3      	str	r3, [r4, #8]
   17202:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   17204:	4638      	mov	r0, r7
   17206:	b002      	add	sp, #8
   17208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
   1720c:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   17210:	e7f8      	b.n	17204 <uarte_0_init+0x170>
   17212:	bf00      	nop
   17214:	0bad0000 	.word	0x0bad0000
   17218:	4001f000 	.word	0x4001f000

0001721c <random_byte_get>:
	__asm__ volatile(
   1721c:	f04f 0340 	mov.w	r3, #64	; 0x40
   17220:	f3ef 8211 	mrs	r2, BASEPRI
   17224:	f383 8812 	msr	BASEPRI_MAX, r3
   17228:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1722c:	4b08      	ldr	r3, [pc, #32]	; (17250 <random_byte_get+0x34>)
   1722e:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   17230:	b159      	cbz	r1, 1724a <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   17232:	4908      	ldr	r1, [pc, #32]	; (17254 <random_byte_get+0x38>)
   17234:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17238:	2100      	movs	r1, #0
   1723a:	6019      	str	r1, [r3, #0]
   1723c:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1723e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   17240:	f382 8811 	msr	BASEPRI, r2
   17244:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   17248:	4770      	bx	lr
	int retval = -EAGAIN;
   1724a:	f06f 000a 	mvn.w	r0, #10
   1724e:	e7f7      	b.n	17240 <random_byte_get+0x24>
   17250:	4000d100 	.word	0x4000d100
   17254:	4000d000 	.word	0x4000d000

00017258 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   17258:	b5f0      	push	{r4, r5, r6, r7, lr}
   1725a:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1725c:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1725e:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   17260:	f04f 0540 	mov.w	r5, #64	; 0x40
   17264:	f3ef 8011 	mrs	r0, BASEPRI
   17268:	f385 8812 	msr	BASEPRI_MAX, r5
   1726c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   17270:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   17272:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   17276:	1ba4      	subs	r4, r4, r6
   17278:	403c      	ands	r4, r7
	if (available < len) {
   1727a:	42a2      	cmp	r2, r4
		len = available;
   1727c:	bf88      	it	hi
   1727e:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   17280:	eb06 0c02 	add.w	ip, r6, r2
   17284:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   17288:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1728a:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1728e:	f380 8811 	msr	BASEPRI, r0
   17292:	f3bf 8f6f 	isb	sy
   17296:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   17298:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1729a:	4282      	cmp	r2, r0
   1729c:	d119      	bne.n	172d2 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1729e:	4576      	cmp	r6, lr
   172a0:	d10d      	bne.n	172be <rng_pool_get+0x66>
	__asm__ volatile(
   172a2:	f04f 0540 	mov.w	r5, #64	; 0x40
   172a6:	f3ef 8211 	mrs	r2, BASEPRI
   172aa:	f385 8812 	msr	BASEPRI_MAX, r5
   172ae:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   172b2:	781d      	ldrb	r5, [r3, #0]
   172b4:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   172b6:	f382 8811 	msr	BASEPRI, r2
   172ba:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   172be:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   172c0:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   172c2:	b288      	uxth	r0, r1
	available = available - len;
   172c4:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   172c6:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   172c8:	bf22      	ittt	cs
   172ca:	4b06      	ldrcs	r3, [pc, #24]	; (172e4 <rng_pool_get+0x8c>)
   172cc:	2201      	movcs	r2, #1
   172ce:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   172d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   172d2:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   172d6:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   172d8:	f89c c005 	ldrb.w	ip, [ip, #5]
   172dc:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   172e0:	403d      	ands	r5, r7
   172e2:	e7da      	b.n	1729a <rng_pool_get+0x42>
   172e4:	4000d000 	.word	0x4000d000

000172e8 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   172e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   172ec:	4614      	mov	r4, r2
   172ee:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   172f0:	6902      	ldr	r2, [r0, #16]
   172f2:	4b2c      	ldr	r3, [pc, #176]	; (173a4 <entropy_nrf5_get_entropy_isr+0xbc>)
   172f4:	429a      	cmp	r2, r3
{
   172f6:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   172f8:	d00b      	beq.n	17312 <entropy_nrf5_get_entropy_isr+0x2a>
   172fa:	492b      	ldr	r1, [pc, #172]	; (173a8 <entropy_nrf5_get_entropy_isr+0xc0>)
   172fc:	482b      	ldr	r0, [pc, #172]	; (173ac <entropy_nrf5_get_entropy_isr+0xc4>)
   172fe:	4a2c      	ldr	r2, [pc, #176]	; (173b0 <entropy_nrf5_get_entropy_isr+0xc8>)
   17300:	f44f 7384 	mov.w	r3, #264	; 0x108
   17304:	f005 fb4d 	bl	1c9a2 <printk>
   17308:	4829      	ldr	r0, [pc, #164]	; (173b0 <entropy_nrf5_get_entropy_isr+0xc8>)
   1730a:	f44f 7184 	mov.w	r1, #264	; 0x108
   1730e:	f005 fda2 	bl	1ce56 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   17312:	43eb      	mvns	r3, r5
   17314:	f013 0501 	ands.w	r5, r3, #1
   17318:	d006      	beq.n	17328 <entropy_nrf5_get_entropy_isr+0x40>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1731a:	4826      	ldr	r0, [pc, #152]	; (173b4 <entropy_nrf5_get_entropy_isr+0xcc>)
   1731c:	4622      	mov	r2, r4
   1731e:	4631      	mov	r1, r6
   17320:	f7ff ff9a 	bl	17258 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   17324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   17328:	2c00      	cmp	r4, #0
   1732a:	d033      	beq.n	17394 <entropy_nrf5_get_entropy_isr+0xac>
	__asm__ volatile(
   1732c:	f04f 0340 	mov.w	r3, #64	; 0x40
   17330:	f3ef 8811 	mrs	r8, BASEPRI
   17334:	f383 8812 	msr	BASEPRI_MAX, r3
   17338:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1733c:	200d      	movs	r0, #13
   1733e:	f7f9 fffb 	bl	11338 <arch_irq_is_enabled>
   17342:	4607      	mov	r7, r0
		irq_disable(IRQN);
   17344:	200d      	movs	r0, #13
   17346:	f7f9 ffe3 	bl	11310 <arch_irq_disable>
	__asm__ volatile(
   1734a:	f388 8811 	msr	BASEPRI, r8
   1734e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17352:	4a19      	ldr	r2, [pc, #100]	; (173b8 <entropy_nrf5_get_entropy_isr+0xd0>)
   17354:	6015      	str	r5, [r2, #0]
   17356:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   17358:	4b18      	ldr	r3, [pc, #96]	; (173bc <entropy_nrf5_get_entropy_isr+0xd4>)
   1735a:	2101      	movs	r1, #1
   1735c:	6019      	str	r1, [r3, #0]
   1735e:	4918      	ldr	r1, [pc, #96]	; (173c0 <entropy_nrf5_get_entropy_isr+0xd8>)
   17360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   17364:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   17368:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1736a:	4691      	mov	r9, r2
   1736c:	468a      	mov	sl, r1
   1736e:	4698      	mov	r8, r3
   17370:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   17374:	b183      	cbz	r3, 17398 <entropy_nrf5_get_entropy_isr+0xb0>
			byte = random_byte_get();
   17376:	f7ff ff51 	bl	1721c <random_byte_get>
			if (byte < 0) {
   1737a:	1e03      	subs	r3, r0, #0
   1737c:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   17380:	dbf6      	blt.n	17370 <entropy_nrf5_get_entropy_isr+0x88>
   17382:	3d01      	subs	r5, #1
   17384:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   17386:	5573      	strb	r3, [r6, r5]
		} while (len);
   17388:	2d00      	cmp	r5, #0
   1738a:	d1f1      	bne.n	17370 <entropy_nrf5_get_entropy_isr+0x88>
		if (irq_enabled) {
   1738c:	b117      	cbz	r7, 17394 <entropy_nrf5_get_entropy_isr+0xac>
			irq_enable(IRQN);
   1738e:	200d      	movs	r0, #13
   17390:	f7f9 ffae 	bl	112f0 <arch_irq_enable>
	return cnt;
   17394:	4620      	mov	r0, r4
   17396:	e7c5      	b.n	17324 <entropy_nrf5_get_entropy_isr+0x3c>
   17398:	f3bf 8f4f 	dsb	sy
				__WFE();
   1739c:	bf20      	wfe
				__SEV();
   1739e:	bf40      	sev
				__WFE();
   173a0:	bf20      	wfe
   173a2:	e7e5      	b.n	17370 <entropy_nrf5_get_entropy_isr+0x88>
   173a4:	20001d4c 	.word	0x20001d4c
   173a8:	00020f47 	.word	0x00020f47
   173ac:	0001feb5 	.word	0x0001feb5
   173b0:	00020f15 	.word	0x00020f15
   173b4:	20001d7c 	.word	0x20001d7c
   173b8:	4000d100 	.word	0x4000d100
   173bc:	4000d000 	.word	0x4000d000
   173c0:	e000e100 	.word	0xe000e100

000173c4 <entropy_nrf5_get_entropy>:
{
   173c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   173c8:	4b1a      	ldr	r3, [pc, #104]	; (17434 <entropy_nrf5_get_entropy+0x70>)
{
   173ca:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   173cc:	6902      	ldr	r2, [r0, #16]
   173ce:	429a      	cmp	r2, r3
{
   173d0:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   173d2:	d009      	beq.n	173e8 <entropy_nrf5_get_entropy+0x24>
   173d4:	4918      	ldr	r1, [pc, #96]	; (17438 <entropy_nrf5_get_entropy+0x74>)
   173d6:	4819      	ldr	r0, [pc, #100]	; (1743c <entropy_nrf5_get_entropy+0x78>)
   173d8:	4a19      	ldr	r2, [pc, #100]	; (17440 <entropy_nrf5_get_entropy+0x7c>)
   173da:	23ea      	movs	r3, #234	; 0xea
   173dc:	f005 fae1 	bl	1c9a2 <printk>
   173e0:	4817      	ldr	r0, [pc, #92]	; (17440 <entropy_nrf5_get_entropy+0x7c>)
   173e2:	21ea      	movs	r1, #234	; 0xea
   173e4:	f005 fd37 	bl	1ce56 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   173e8:	4e12      	ldr	r6, [pc, #72]	; (17434 <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   173ea:	f106 0745 	add.w	r7, r6, #69	; 0x45
   173ee:	f106 0818 	add.w	r8, r6, #24
	while (len) {
   173f2:	b914      	cbnz	r4, 173fa <entropy_nrf5_get_entropy+0x36>
}
   173f4:	4620      	mov	r0, r4
   173f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   173fa:	f04f 33ff 	mov.w	r3, #4294967295
   173fe:	f04f 32ff 	mov.w	r2, #4294967295
   17402:	4630      	mov	r0, r6
   17404:	f002 fbae 	bl	19b64 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   17408:	4622      	mov	r2, r4
   1740a:	4649      	mov	r1, r9
   1740c:	4638      	mov	r0, r7
   1740e:	f7ff ff23 	bl	17258 <rng_pool_get>
   17412:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   17414:	4630      	mov	r0, r6
   17416:	f002 fb61 	bl	19adc <z_impl_k_sem_give>
		if (bytes == 0U) {
   1741a:	b93d      	cbnz	r5, 1742c <entropy_nrf5_get_entropy+0x68>
	return z_impl_k_sem_take(sem, timeout);
   1741c:	f04f 32ff 	mov.w	r2, #4294967295
   17420:	f04f 33ff 	mov.w	r3, #4294967295
   17424:	4640      	mov	r0, r8
   17426:	f002 fb9d 	bl	19b64 <z_impl_k_sem_take>
			continue;
   1742a:	e7e2      	b.n	173f2 <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   1742c:	1b64      	subs	r4, r4, r5
   1742e:	b2a4      	uxth	r4, r4
		buf += bytes;
   17430:	44a9      	add	r9, r5
   17432:	e7de      	b.n	173f2 <entropy_nrf5_get_entropy+0x2e>
   17434:	20001d4c 	.word	0x20001d4c
   17438:	00020f47 	.word	0x00020f47
   1743c:	0001feb5 	.word	0x0001feb5
   17440:	00020f15 	.word	0x00020f15

00017444 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   17444:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   17446:	4c20      	ldr	r4, [pc, #128]	; (174c8 <entropy_nrf5_init+0x84>)
   17448:	6903      	ldr	r3, [r0, #16]
   1744a:	42a3      	cmp	r3, r4
   1744c:	d00b      	beq.n	17466 <entropy_nrf5_init+0x22>
   1744e:	491f      	ldr	r1, [pc, #124]	; (174cc <entropy_nrf5_init+0x88>)
   17450:	481f      	ldr	r0, [pc, #124]	; (174d0 <entropy_nrf5_init+0x8c>)
   17452:	4a20      	ldr	r2, [pc, #128]	; (174d4 <entropy_nrf5_init+0x90>)
   17454:	f240 1357 	movw	r3, #343	; 0x157
   17458:	f005 faa3 	bl	1c9a2 <printk>
   1745c:	481d      	ldr	r0, [pc, #116]	; (174d4 <entropy_nrf5_init+0x90>)
   1745e:	f240 1157 	movw	r1, #343	; 0x157
   17462:	f005 fcf8 	bl	1ce56 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   17466:	2201      	movs	r2, #1
   17468:	4611      	mov	r1, r2
   1746a:	4817      	ldr	r0, [pc, #92]	; (174c8 <entropy_nrf5_init+0x84>)
   1746c:	f007 ff73 	bl	1f356 <z_impl_k_sem_init>
   17470:	2201      	movs	r2, #1
   17472:	2100      	movs	r1, #0
   17474:	4818      	ldr	r0, [pc, #96]	; (174d8 <entropy_nrf5_init+0x94>)
   17476:	f007 ff6e 	bl	1f356 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1747a:	f240 4307 	movw	r3, #1031	; 0x407
   1747e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   17482:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   17486:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   17488:	230c      	movs	r3, #12
   1748a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1748e:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   17490:	4b12      	ldr	r3, [pc, #72]	; (174dc <entropy_nrf5_init+0x98>)
   17492:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   17496:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1749a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1749e:	f022 0201 	bic.w	r2, r2, #1
   174a2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   174a6:	4a0e      	ldr	r2, [pc, #56]	; (174e0 <entropy_nrf5_init+0x9c>)
    p_reg->INTENSET = mask;
   174a8:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   174aa:	6015      	str	r5, [r2, #0]
   174ac:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   174ae:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   174b2:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   174b4:	6019      	str	r1, [r3, #0]
   174b6:	200d      	movs	r0, #13
   174b8:	f7f9 ff4c 	bl	11354 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   174bc:	200d      	movs	r0, #13
   174be:	f7f9 ff17 	bl	112f0 <arch_irq_enable>

	return 0;
}
   174c2:	4628      	mov	r0, r5
   174c4:	bd38      	pop	{r3, r4, r5, pc}
   174c6:	bf00      	nop
   174c8:	20001d4c 	.word	0x20001d4c
   174cc:	00020f47 	.word	0x00020f47
   174d0:	0001feb5 	.word	0x0001feb5
   174d4:	00020f15 	.word	0x00020f15
   174d8:	20001d64 	.word	0x20001d64
   174dc:	4000d000 	.word	0x4000d000
   174e0:	4000d100 	.word	0x4000d100

000174e4 <isr>:
{
   174e4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   174e6:	f7ff fe99 	bl	1721c <random_byte_get>
	if (byte < 0) {
   174ea:	2800      	cmp	r0, #0
   174ec:	db20      	blt.n	17530 <isr+0x4c>
	uint8_t last  = rngp->last;
   174ee:	4b17      	ldr	r3, [pc, #92]	; (1754c <isr+0x68>)
   174f0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   174f4:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   174f8:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   174fc:	1a51      	subs	r1, r2, r1
   174fe:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   17502:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   17504:	d10d      	bne.n	17522 <isr+0x3e>
	uint8_t last  = rngp->last;
   17506:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1750a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1750e:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   17512:	1a51      	subs	r1, r2, r1
   17514:	ea34 0101 	bics.w	r1, r4, r1
   17518:	d10b      	bne.n	17532 <isr+0x4e>
   1751a:	4b0d      	ldr	r3, [pc, #52]	; (17550 <isr+0x6c>)
   1751c:	2201      	movs	r2, #1
   1751e:	601a      	str	r2, [r3, #0]
}
   17520:	e00e      	b.n	17540 <isr+0x5c>
	rngp->buffer[last] = byte;
   17522:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   17524:	3201      	adds	r2, #1
   17526:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   17528:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1752c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   17530:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   17532:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   17534:	3201      	adds	r2, #1
   17536:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   17538:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1753c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   17540:	4804      	ldr	r0, [pc, #16]	; (17554 <isr+0x70>)
}
   17542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17546:	f002 bac9 	b.w	19adc <z_impl_k_sem_give>
   1754a:	bf00      	nop
   1754c:	20001d4c 	.word	0x20001d4c
   17550:	4000d004 	.word	0x4000d004
   17554:	20001d64 	.word	0x20001d64

00017558 <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
   17558:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   1755a:	4c06      	ldr	r4, [pc, #24]	; (17574 <sys_clock_isr+0x1c>)
   1755c:	4906      	ldr	r1, [pc, #24]	; (17578 <sys_clock_isr+0x20>)
   1755e:	4807      	ldr	r0, [pc, #28]	; (1757c <sys_clock_isr+0x24>)
   17560:	4622      	mov	r2, r4
   17562:	2317      	movs	r3, #23
   17564:	f005 fa1d 	bl	1c9a2 <printk>
   17568:	4620      	mov	r0, r4
   1756a:	2117      	movs	r1, #23
}
   1756c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   17570:	f005 bc71 	b.w	1ce56 <assert_post_action>
   17574:	00020f8f 	.word	0x00020f8f
   17578:	00021b83 	.word	0x00021b83
   1757c:	0001feb5 	.word	0x0001feb5

00017580 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   17580:	4919      	ldr	r1, [pc, #100]	; (175e8 <sys_clock_timeout_handler+0x68>)
{
   17582:	b570      	push	{r4, r5, r6, lr}
   17584:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   17586:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1758a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1758c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   17590:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   17594:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   17596:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1759a:	f04f 0500 	mov.w	r5, #0
   1759e:	d20a      	bcs.n	175b6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   175a0:	4b12      	ldr	r3, [pc, #72]	; (175ec <sys_clock_timeout_handler+0x6c>)
   175a2:	6819      	ldr	r1, [r3, #0]
   175a4:	060a      	lsls	r2, r1, #24
   175a6:	0a0b      	lsrs	r3, r1, #8
   175a8:	1992      	adds	r2, r2, r6
   175aa:	4911      	ldr	r1, [pc, #68]	; (175f0 <sys_clock_timeout_handler+0x70>)
   175ac:	f143 0300 	adc.w	r3, r3, #0
   175b0:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   175b4:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   175b6:	f004 fc49 	bl	1be4c <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   175ba:	00a3      	lsls	r3, r4, #2
   175bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   175c0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   175c4:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   175c8:	42b2      	cmp	r2, r6
   175ca:	d10b      	bne.n	175e4 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   175cc:	b91d      	cbnz	r5, 175d6 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   175ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   175d2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   175d6:	4b07      	ldr	r3, [pc, #28]	; (175f4 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   175d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   175dc:	fa00 f404 	lsl.w	r4, r0, r4
   175e0:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   175e4:	bd70      	pop	{r4, r5, r6, pc}
   175e6:	bf00      	nop
   175e8:	200018d8 	.word	0x200018d8
   175ec:	20001da8 	.word	0x20001da8
   175f0:	200018c0 	.word	0x200018c0
   175f4:	40011000 	.word	0x40011000

000175f8 <compare_int_lock>:
{
   175f8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   175fa:	2301      	movs	r3, #1
   175fc:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   175fe:	4a11      	ldr	r2, [pc, #68]	; (17644 <compare_int_lock+0x4c>)
   17600:	f3bf 8f5b 	dmb	ish
   17604:	43dc      	mvns	r4, r3
   17606:	e852 1f00 	ldrex	r1, [r2]
   1760a:	ea01 0c04 	and.w	ip, r1, r4
   1760e:	e842 ce00 	strex	lr, ip, [r2]
   17612:	f1be 0f00 	cmp.w	lr, #0
   17616:	d1f6      	bne.n	17606 <compare_int_lock+0xe>
   17618:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1761c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17620:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   17624:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17628:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1762c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   17630:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   17634:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   17638:	420b      	tst	r3, r1
}
   1763a:	bf14      	ite	ne
   1763c:	2001      	movne	r0, #1
   1763e:	2000      	moveq	r0, #0
   17640:	bd10      	pop	{r4, pc}
   17642:	bf00      	nop
   17644:	20001da4 	.word	0x20001da4

00017648 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   17648:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1764a:	4a12      	ldr	r2, [pc, #72]	; (17694 <compare_int_unlock.part.0+0x4c>)
   1764c:	f3bf 8f5b 	dmb	ish
   17650:	4083      	lsls	r3, r0
   17652:	e852 1f00 	ldrex	r1, [r2]
   17656:	4319      	orrs	r1, r3
   17658:	e842 1c00 	strex	ip, r1, [r2]
   1765c:	f1bc 0f00 	cmp.w	ip, #0
   17660:	d1f7      	bne.n	17652 <compare_int_unlock.part.0+0xa>
   17662:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   17666:	4a0c      	ldr	r2, [pc, #48]	; (17698 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1766c:	4083      	lsls	r3, r0
   1766e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17672:	4b0a      	ldr	r3, [pc, #40]	; (1769c <compare_int_unlock.part.0+0x54>)
   17674:	f3bf 8f5b 	dmb	ish
   17678:	681b      	ldr	r3, [r3, #0]
   1767a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1767e:	fa23 f000 	lsr.w	r0, r3, r0
   17682:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17684:	bf42      	ittt	mi
   17686:	4b06      	ldrmi	r3, [pc, #24]	; (176a0 <compare_int_unlock.part.0+0x58>)
   17688:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1768c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   17690:	4770      	bx	lr
   17692:	bf00      	nop
   17694:	20001da4 	.word	0x20001da4
   17698:	40011000 	.word	0x40011000
   1769c:	20001da0 	.word	0x20001da0
   176a0:	e000e100 	.word	0xe000e100

000176a4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   176a4:	4b0d      	ldr	r3, [pc, #52]	; (176dc <z_nrf_rtc_timer_read+0x38>)
   176a6:	681b      	ldr	r3, [r3, #0]
   176a8:	0a19      	lsrs	r1, r3, #8
   176aa:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   176ac:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   176b0:	4b0b      	ldr	r3, [pc, #44]	; (176e0 <z_nrf_rtc_timer_read+0x3c>)
   176b2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   176b6:	18c0      	adds	r0, r0, r3
   176b8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   176bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   176c0:	d20a      	bcs.n	176d8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   176c2:	4b08      	ldr	r3, [pc, #32]	; (176e4 <z_nrf_rtc_timer_read+0x40>)
   176c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   176c8:	4299      	cmp	r1, r3
   176ca:	bf08      	it	eq
   176cc:	4290      	cmpeq	r0, r2
   176ce:	d203      	bcs.n	176d8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   176d0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   176d4:	f141 0100 	adc.w	r1, r1, #0
}
   176d8:	4770      	bx	lr
   176da:	bf00      	nop
   176dc:	20001da8 	.word	0x20001da8
   176e0:	40011000 	.word	0x40011000
   176e4:	200018c0 	.word	0x200018c0

000176e8 <compare_set>:
{
   176e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176ec:	b085      	sub	sp, #20
   176ee:	4616      	mov	r6, r2
   176f0:	461f      	mov	r7, r3
   176f2:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   176f4:	f7ff ff80 	bl	175f8 <compare_int_lock>
   176f8:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   176fa:	f7ff ffd3 	bl	176a4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   176fe:	42b9      	cmp	r1, r7
   17700:	bf08      	it	eq
   17702:	42b0      	cmpeq	r0, r6
   17704:	d27f      	bcs.n	17806 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
   17706:	ebb6 0800 	subs.w	r8, r6, r0
   1770a:	eb67 0901 	sbc.w	r9, r7, r1
   1770e:	2300      	movs	r3, #0
   17710:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   17714:	454b      	cmp	r3, r9
   17716:	bf08      	it	eq
   17718:	4542      	cmpeq	r2, r8
   1771a:	f0c0 8085 	bcc.w	17828 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   1771e:	4b44      	ldr	r3, [pc, #272]	; (17830 <compare_set+0x148>)
   17720:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   17724:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   17728:	429f      	cmp	r7, r3
   1772a:	bf08      	it	eq
   1772c:	4296      	cmpeq	r6, r2
   1772e:	d054      	beq.n	177da <compare_set+0xf2>
   17730:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17734:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   17738:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1773c:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17740:	fa0b f205 	lsl.w	r2, fp, r5
   17744:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   17748:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1774c:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17750:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
   17752:	4a38      	ldr	r2, [pc, #224]	; (17834 <compare_set+0x14c>)
    return p_reg->CC[ch];
   17754:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   17758:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1775c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   17760:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   17764:	461c      	mov	r4, r3
   17766:	4693      	mov	fp, r2
     return p_reg->COUNTER;
   17768:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1776c:	eba0 000a 	sub.w	r0, r0, sl
   17770:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   17774:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   17778:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1777a:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   1777e:	d105      	bne.n	1778c <compare_set+0xa4>
   17780:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   17782:	2013      	movs	r0, #19
   17784:	f007 fe7c 	bl	1f480 <z_impl_k_busy_wait>
   17788:	4a2a      	ldr	r2, [pc, #168]	; (17834 <compare_set+0x14c>)
   1778a:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   1778c:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1778e:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   17792:	eba4 000c 	sub.w	r0, r4, ip
   17796:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1779a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1779e:	bf88      	it	hi
   177a0:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   177a2:	2000      	movs	r0, #0
   177a4:	f8c8 0000 	str.w	r0, [r8]
   177a8:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   177ac:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   177b0:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   177b4:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   177b8:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   177bc:	4582      	cmp	sl, r0
   177be:	d006      	beq.n	177ce <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   177c0:	1a20      	subs	r0, r4, r0
   177c2:	3802      	subs	r0, #2
   177c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   177c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   177cc:	d819      	bhi.n	17802 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
   177ce:	1ae4      	subs	r4, r4, r3
   177d0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   177d4:	1932      	adds	r2, r6, r4
   177d6:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   177da:	4c15      	ldr	r4, [pc, #84]	; (17830 <compare_set+0x148>)
   177dc:	0129      	lsls	r1, r5, #4
   177de:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   177e2:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   177e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
   177e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
   177ea:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
   177ec:	6043      	str	r3, [r0, #4]
	return ret;
   177ee:	2400      	movs	r4, #0
	if (key) {
   177f0:	9b01      	ldr	r3, [sp, #4]
   177f2:	b113      	cbz	r3, 177fa <compare_set+0x112>
   177f4:	4628      	mov	r0, r5
   177f6:	f7ff ff27 	bl	17648 <compare_int_unlock.part.0>
}
   177fa:	4620      	mov	r0, r4
   177fc:	b005      	add	sp, #20
   177fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17802:	4620      	mov	r0, r4
   17804:	e7b0      	b.n	17768 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   17806:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17808:	4a0b      	ldr	r2, [pc, #44]	; (17838 <compare_set+0x150>)
   1780a:	f3bf 8f5b 	dmb	ish
   1780e:	40ab      	lsls	r3, r5
   17810:	e852 1f00 	ldrex	r1, [r2]
   17814:	4319      	orrs	r1, r3
   17816:	e842 1000 	strex	r0, r1, [r2]
   1781a:	2800      	cmp	r0, #0
   1781c:	d1f8      	bne.n	17810 <compare_set+0x128>
   1781e:	f3bf 8f5b 	dmb	ish
   17822:	4632      	mov	r2, r6
   17824:	463b      	mov	r3, r7
   17826:	e7d8      	b.n	177da <compare_set+0xf2>
			return -EINVAL;
   17828:	f06f 0415 	mvn.w	r4, #21
   1782c:	e7e0      	b.n	177f0 <compare_set+0x108>
   1782e:	bf00      	nop
   17830:	200018c8 	.word	0x200018c8
   17834:	40011000 	.word	0x40011000
   17838:	20001da0 	.word	0x20001da0

0001783c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1783c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return p_reg->INTENSET & mask;
   17840:	4c2a      	ldr	r4, [pc, #168]	; (178ec <rtc_nrf_isr+0xb0>)
   17842:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   17846:	0799      	lsls	r1, r3, #30
   17848:	d509      	bpl.n	1785e <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1784a:	4b29      	ldr	r3, [pc, #164]	; (178f0 <rtc_nrf_isr+0xb4>)
   1784c:	681a      	ldr	r2, [r3, #0]
   1784e:	b132      	cbz	r2, 1785e <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   17850:	2200      	movs	r2, #0
   17852:	601a      	str	r2, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   17854:	4a27      	ldr	r2, [pc, #156]	; (178f4 <rtc_nrf_isr+0xb8>)
   17856:	681b      	ldr	r3, [r3, #0]
   17858:	6813      	ldr	r3, [r2, #0]
   1785a:	3301      	adds	r3, #1
   1785c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1785e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   17862:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   17864:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   17868:	03d2      	lsls	r2, r2, #15
   1786a:	d52c      	bpl.n	178c6 <rtc_nrf_isr+0x8a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1786c:	f3bf 8f5b 	dmb	ish
   17870:	4a21      	ldr	r2, [pc, #132]	; (178f8 <rtc_nrf_isr+0xbc>)
   17872:	e852 1f00 	ldrex	r1, [r2]
   17876:	f021 0001 	bic.w	r0, r1, #1
   1787a:	e842 0500 	strex	r5, r0, [r2]
   1787e:	2d00      	cmp	r5, #0
   17880:	d1f7      	bne.n	17872 <rtc_nrf_isr+0x36>
   17882:	f3bf 8f5b 	dmb	ish
   17886:	4a1d      	ldr	r2, [pc, #116]	; (178fc <rtc_nrf_isr+0xc0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   17888:	b909      	cbnz	r1, 1788e <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1788a:	6811      	ldr	r1, [r2, #0]
		if (result) {
   1788c:	b1d9      	cbz	r1, 178c6 <rtc_nrf_isr+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1788e:	2500      	movs	r5, #0
   17890:	6015      	str	r5, [r2, #0]
   17892:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17894:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   17898:	f7ff ff04 	bl	176a4 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1789c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   178a0:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   178a2:	4b17      	ldr	r3, [pc, #92]	; (17900 <rtc_nrf_isr+0xc4>)
   178a4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   178a8:	4549      	cmp	r1, r9
   178aa:	bf08      	it	eq
   178ac:	4540      	cmpeq	r0, r8
   178ae:	d20f      	bcs.n	178d0 <rtc_nrf_isr+0x94>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   178b0:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   178b2:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   178b6:	b141      	cbz	r1, 178ca <rtc_nrf_isr+0x8e>
			handler(chan, expire_time, user_context);
   178b8:	f8cd a000 	str.w	sl, [sp]
   178bc:	4642      	mov	r2, r8
   178be:	464b      	mov	r3, r9
   178c0:	2000      	movs	r0, #0
   178c2:	4788      	blx	r1
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   178c4:	e001      	b.n	178ca <rtc_nrf_isr+0x8e>
   178c6:	f383 8810 	msr	PRIMASK, r3
		process_channel(chan);
	}
}
   178ca:	b002      	add	sp, #8
   178cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   178d0:	f04f 36ff 	mov.w	r6, #4294967295
   178d4:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
   178d8:	e9d3 1a00 	ldrd	r1, sl, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   178dc:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
   178e0:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   178e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   178e6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   178ea:	e7e2      	b.n	178b2 <rtc_nrf_isr+0x76>
   178ec:	40011000 	.word	0x40011000
   178f0:	40011104 	.word	0x40011104
   178f4:	20001da8 	.word	0x20001da8
   178f8:	20001da0 	.word	0x20001da0
   178fc:	40011140 	.word	0x40011140
   17900:	200018c8 	.word	0x200018c8

00017904 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   17904:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   17906:	4b1a      	ldr	r3, [pc, #104]	; (17970 <sys_clock_driver_init+0x6c>)
    p_reg->PRESCALER = val;
   17908:	4d1a      	ldr	r5, [pc, #104]	; (17974 <sys_clock_driver_init+0x70>)
   1790a:	2400      	movs	r4, #0
   1790c:	f04f 30ff 	mov.w	r0, #4294967295
   17910:	f04f 31ff 	mov.w	r1, #4294967295
   17914:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   17918:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1791c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   17920:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17924:	4b14      	ldr	r3, [pc, #80]	; (17978 <sys_clock_driver_init+0x74>)
   17926:	2602      	movs	r6, #2
   17928:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1792c:	2101      	movs	r1, #1
   1792e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   17932:	2011      	movs	r0, #17
   17934:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   17938:	4622      	mov	r2, r4
   1793a:	f7f9 fd0b 	bl	11354 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1793e:	2011      	movs	r0, #17
   17940:	f7f9 fcd6 	bl	112f0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   17944:	4a0d      	ldr	r2, [pc, #52]	; (1797c <sys_clock_driver_init+0x78>)
    p_reg->INTENSET = mask;
   17946:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1794a:	2301      	movs	r3, #1
   1794c:	6013      	str	r3, [r2, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1794e:	4a0c      	ldr	r2, [pc, #48]	; (17980 <sys_clock_driver_init+0x7c>)
   17950:	602b      	str	r3, [r5, #0]
   17952:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   17954:	4b0b      	ldr	r3, [pc, #44]	; (17984 <sys_clock_driver_init+0x80>)
   17956:	4a0c      	ldr	r2, [pc, #48]	; (17988 <sys_clock_driver_init+0x84>)
   17958:	9300      	str	r3, [sp, #0]
   1795a:	9401      	str	r4, [sp, #4]
   1795c:	2300      	movs	r3, #0
   1795e:	4620      	mov	r0, r4
   17960:	f7ff fec2 	bl	176e8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   17964:	4630      	mov	r0, r6
   17966:	f7fe fecd 	bl	16704 <z_nrf_clock_control_lf_on>

	return 0;
}
   1796a:	4620      	mov	r0, r4
   1796c:	b002      	add	sp, #8
   1796e:	bd70      	pop	{r4, r5, r6, pc}
   17970:	200018c8 	.word	0x200018c8
   17974:	40011000 	.word	0x40011000
   17978:	e000e100 	.word	0xe000e100
   1797c:	40011008 	.word	0x40011008
   17980:	20001da4 	.word	0x20001da4
   17984:	00017581 	.word	0x00017581
   17988:	007fffff 	.word	0x007fffff

0001798c <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1798c:	4b14      	ldr	r3, [pc, #80]	; (179e0 <sys_clock_set_timeout+0x54>)
{
   1798e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   17990:	f1b0 3fff 	cmp.w	r0, #4294967295
   17994:	bf08      	it	eq
   17996:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   17998:	1e44      	subs	r4, r0, #1
   1799a:	2c00      	cmp	r4, #0
   1799c:	dd1e      	ble.n	179dc <sys_clock_set_timeout+0x50>
   1799e:	429c      	cmp	r4, r3
   179a0:	bfa8      	it	ge
   179a2:	461c      	movge	r4, r3

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   179a4:	f7ff fe7e 	bl	176a4 <z_nrf_rtc_timer_read>
   179a8:	4b0e      	ldr	r3, [pc, #56]	; (179e4 <sys_clock_set_timeout+0x58>)
		cyc = MAX_CYCLES;
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   179aa:	490f      	ldr	r1, [pc, #60]	; (179e8 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   179ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   179b0:	1a80      	subs	r0, r0, r2
		ticks = 0;
   179b2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   179b6:	bf28      	it	cs
   179b8:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   179ba:	3001      	adds	r0, #1
   179bc:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   179be:	4808      	ldr	r0, [pc, #32]	; (179e0 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   179c0:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   179c2:	4284      	cmp	r4, r0
   179c4:	bf28      	it	cs
   179c6:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   179c8:	1912      	adds	r2, r2, r4
   179ca:	f04f 0000 	mov.w	r0, #0
   179ce:	9001      	str	r0, [sp, #4]
   179d0:	f143 0300 	adc.w	r3, r3, #0
   179d4:	f7ff fe88 	bl	176e8 <compare_set>
}
   179d8:	b002      	add	sp, #8
   179da:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   179dc:	2400      	movs	r4, #0
   179de:	e7e1      	b.n	179a4 <sys_clock_set_timeout+0x18>
   179e0:	007fffff 	.word	0x007fffff
   179e4:	200018d8 	.word	0x200018d8
   179e8:	00017581 	.word	0x00017581

000179ec <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
   179ec:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   179ee:	f7ff fe59 	bl	176a4 <z_nrf_rtc_timer_read>
   179f2:	4b02      	ldr	r3, [pc, #8]	; (179fc <sys_clock_elapsed+0x10>)
   179f4:	681b      	ldr	r3, [r3, #0]
}
   179f6:	1ac0      	subs	r0, r0, r3
   179f8:	bd08      	pop	{r3, pc}
   179fa:	bf00      	nop
   179fc:	200018d8 	.word	0x200018d8

00017a00 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   17a00:	4602      	mov	r2, r0
   17a02:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   17a04:	4801      	ldr	r0, [pc, #4]	; (17a0c <multithreading_lock_acquire+0xc>)
   17a06:	f001 bd3d 	b.w	19484 <z_impl_k_mutex_lock>
   17a0a:	bf00      	nop
   17a0c:	200005cc 	.word	0x200005cc

00017a10 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   17a10:	4801      	ldr	r0, [pc, #4]	; (17a18 <multithreading_lock_release+0x8>)
   17a12:	f001 be37 	b.w	19684 <z_impl_k_mutex_unlock>
   17a16:	bf00      	nop
   17a18:	200005cc 	.word	0x200005cc

00017a1c <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   17a1c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   17a1e:	4804      	ldr	r0, [pc, #16]	; (17a30 <hci_driver_init+0x14>)
   17a20:	f7fb f8c6 	bl	12bb0 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   17a24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   17a28:	4802      	ldr	r0, [pc, #8]	; (17a34 <hci_driver_init+0x18>)
   17a2a:	f7ec b917 	b.w	3c5c <sdc_init>
   17a2e:	bf00      	nop
   17a30:	0001fd40 	.word	0x0001fd40
   17a34:	0001f225 	.word	0x0001f225

00017a38 <rand_prio_low_vector_get_blocking>:
{
   17a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   17a3a:	4b16      	ldr	r3, [pc, #88]	; (17a94 <rand_prio_low_vector_get_blocking+0x5c>)
{
   17a3c:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   17a3e:	681e      	ldr	r6, [r3, #0]
   17a40:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   17a42:	68b7      	ldr	r7, [r6, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   17a44:	683b      	ldr	r3, [r7, #0]
   17a46:	b963      	cbnz	r3, 17a62 <rand_prio_low_vector_get_blocking+0x2a>
   17a48:	4913      	ldr	r1, [pc, #76]	; (17a98 <rand_prio_low_vector_get_blocking+0x60>)
   17a4a:	4a14      	ldr	r2, [pc, #80]	; (17a9c <rand_prio_low_vector_get_blocking+0x64>)
   17a4c:	4814      	ldr	r0, [pc, #80]	; (17aa0 <rand_prio_low_vector_get_blocking+0x68>)
   17a4e:	234b      	movs	r3, #75	; 0x4b
   17a50:	f004 ffa7 	bl	1c9a2 <printk>
   17a54:	4813      	ldr	r0, [pc, #76]	; (17aa4 <rand_prio_low_vector_get_blocking+0x6c>)
   17a56:	f004 ffa4 	bl	1c9a2 <printk>
   17a5a:	4810      	ldr	r0, [pc, #64]	; (17a9c <rand_prio_low_vector_get_blocking+0x64>)
   17a5c:	214b      	movs	r1, #75	; 0x4b
   17a5e:	f005 f9fa 	bl	1ce56 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   17a62:	683b      	ldr	r3, [r7, #0]
   17a64:	462a      	mov	r2, r5
   17a66:	4621      	mov	r1, r4
   17a68:	4630      	mov	r0, r6
   17a6a:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   17a6c:	b180      	cbz	r0, 17a90 <rand_prio_low_vector_get_blocking+0x58>
   17a6e:	490e      	ldr	r1, [pc, #56]	; (17aa8 <rand_prio_low_vector_get_blocking+0x70>)
   17a70:	4a0e      	ldr	r2, [pc, #56]	; (17aac <rand_prio_low_vector_get_blocking+0x74>)
   17a72:	480b      	ldr	r0, [pc, #44]	; (17aa0 <rand_prio_low_vector_get_blocking+0x68>)
   17a74:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   17a78:	f004 ff93 	bl	1c9a2 <printk>
   17a7c:	480c      	ldr	r0, [pc, #48]	; (17ab0 <rand_prio_low_vector_get_blocking+0x78>)
   17a7e:	f004 ff90 	bl	1c9a2 <printk>
}
   17a82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   17a86:	4809      	ldr	r0, [pc, #36]	; (17aac <rand_prio_low_vector_get_blocking+0x74>)
   17a88:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
   17a8c:	f005 b9e3 	b.w	1ce56 <assert_post_action>
}
   17a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17a92:	bf00      	nop
   17a94:	20001dac 	.word	0x20001dac
   17a98:	00020ff8 	.word	0x00020ff8
   17a9c:	00020fcb 	.word	0x00020fcb
   17aa0:	0001feb5 	.word	0x0001feb5
   17aa4:	00021018 	.word	0x00021018
   17aa8:	000208c7 	.word	0x000208c7
   17aac:	0002103e 	.word	0x0002103e
   17ab0:	00021077 	.word	0x00021077

00017ab4 <rand_prio_high_vector_get>:
{
   17ab4:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   17ab6:	4b11      	ldr	r3, [pc, #68]	; (17afc <rand_prio_high_vector_get+0x48>)
{
   17ab8:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   17aba:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   17abc:	6883      	ldr	r3, [r0, #8]
   17abe:	685d      	ldr	r5, [r3, #4]
   17ac0:	460a      	mov	r2, r1
   17ac2:	b1bd      	cbz	r5, 17af4 <rand_prio_high_vector_get+0x40>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   17ac4:	4621      	mov	r1, r4
   17ac6:	2300      	movs	r3, #0
   17ac8:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   17aca:	1e04      	subs	r4, r0, #0
   17acc:	da0e      	bge.n	17aec <rand_prio_high_vector_get+0x38>
   17ace:	490c      	ldr	r1, [pc, #48]	; (17b00 <rand_prio_high_vector_get+0x4c>)
   17ad0:	4a0c      	ldr	r2, [pc, #48]	; (17b04 <rand_prio_high_vector_get+0x50>)
   17ad2:	480d      	ldr	r0, [pc, #52]	; (17b08 <rand_prio_high_vector_get+0x54>)
   17ad4:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   17ad8:	f004 ff63 	bl	1c9a2 <printk>
   17adc:	480b      	ldr	r0, [pc, #44]	; (17b0c <rand_prio_high_vector_get+0x58>)
   17ade:	f004 ff60 	bl	1c9a2 <printk>
   17ae2:	4808      	ldr	r0, [pc, #32]	; (17b04 <rand_prio_high_vector_get+0x50>)
   17ae4:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
   17ae8:	f005 f9b5 	bl	1ce56 <assert_post_action>
	return ret >= 0 ? ret : 0;
   17aec:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   17af0:	b2c0      	uxtb	r0, r0
   17af2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   17af4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17af8:	e7e9      	b.n	17ace <rand_prio_high_vector_get+0x1a>
   17afa:	bf00      	nop
   17afc:	20001dac 	.word	0x20001dac
   17b00:	000210b1 	.word	0x000210b1
   17b04:	0002103e 	.word	0x0002103e
   17b08:	0001feb5 	.word	0x0001feb5
   17b0c:	000210ba 	.word	0x000210ba

00017b10 <hci_driver_open>:
{
   17b10:	b530      	push	{r4, r5, lr}
   17b12:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17b14:	2200      	movs	r2, #0
   17b16:	2300      	movs	r3, #0
   17b18:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17b1c:	2300      	movs	r3, #0
   17b1e:	f06f 0209 	mvn.w	r2, #9
   17b22:	e9cd 2303 	strd	r2, r3, [sp, #12]
   17b26:	e9cd 3301 	strd	r3, r3, [sp, #4]
   17b2a:	9300      	str	r3, [sp, #0]
   17b2c:	4946      	ldr	r1, [pc, #280]	; (17c48 <hci_driver_open+0x138>)
   17b2e:	4b47      	ldr	r3, [pc, #284]	; (17c4c <hci_driver_open+0x13c>)
   17b30:	4847      	ldr	r0, [pc, #284]	; (17c50 <hci_driver_open+0x140>)
   17b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17b36:	f001 fb75 	bl	19224 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   17b3a:	4946      	ldr	r1, [pc, #280]	; (17c54 <hci_driver_open+0x144>)
   17b3c:	4844      	ldr	r0, [pc, #272]	; (17c50 <hci_driver_open+0x140>)
   17b3e:	f007 fbd0 	bl	1f2e2 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   17b42:	a80b      	add	r0, sp, #44	; 0x2c
   17b44:	f7eb fffa 	bl	3b3c <sdc_build_revision_get>
			err = sdc_support_scan();
   17b48:	f7ec f938 	bl	3dbc <sdc_support_scan>
			if (err) {
   17b4c:	b110      	cbz	r0, 17b54 <hci_driver_open+0x44>
		return -err;
   17b4e:	2086      	movs	r0, #134	; 0x86
}
   17b50:	b011      	add	sp, #68	; 0x44
   17b52:	bd30      	pop	{r4, r5, pc}
		err = sdc_support_master();
   17b54:	f7ec f922 	bl	3d9c <sdc_support_master>
		if (err) {
   17b58:	2800      	cmp	r0, #0
   17b5a:	d1f8      	bne.n	17b4e <hci_driver_open+0x3e>
		err = sdc_support_dle();
   17b5c:	f7ec f8fe 	bl	3d5c <sdc_support_dle>
		if (err) {
   17b60:	2800      	cmp	r0, #0
   17b62:	d1f4      	bne.n	17b4e <hci_driver_open+0x3e>
		err = sdc_support_le_2m_phy();
   17b64:	f7ec f90a 	bl	3d7c <sdc_support_le_2m_phy>
		if (err) {
   17b68:	4605      	mov	r5, r0
   17b6a:	2800      	cmp	r0, #0
   17b6c:	d1ef      	bne.n	17b4e <hci_driver_open+0x3e>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17b6e:	ac08      	add	r4, sp, #32
	cfg.master_count.count = SDC_MASTER_COUNT;
   17b70:	2101      	movs	r1, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17b72:	4622      	mov	r2, r4
	cfg.master_count.count = SDC_MASTER_COUNT;
   17b74:	f88d 1020 	strb.w	r1, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17b78:	f7eb ffee 	bl	3b58 <sdc_cfg_set>
	if (required_memory < 0) {
   17b7c:	2800      	cmp	r0, #0
   17b7e:	dbe7      	blt.n	17b50 <hci_driver_open+0x40>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17b80:	4622      	mov	r2, r4
   17b82:	2102      	movs	r1, #2
   17b84:	4628      	mov	r0, r5
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   17b86:	f88d 5020 	strb.w	r5, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17b8a:	f7eb ffe5 	bl	3b58 <sdc_cfg_set>
	if (required_memory < 0) {
   17b8e:	2800      	cmp	r0, #0
   17b90:	dbde      	blt.n	17b50 <hci_driver_open+0x40>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   17b92:	4b31      	ldr	r3, [pc, #196]	; (17c58 <hci_driver_open+0x148>)
   17b94:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17b96:	4622      	mov	r2, r4
   17b98:	2103      	movs	r1, #3
   17b9a:	4628      	mov	r0, r5
   17b9c:	f7eb ffdc 	bl	3b58 <sdc_cfg_set>
	if (required_memory < 0) {
   17ba0:	2800      	cmp	r0, #0
   17ba2:	dbd5      	blt.n	17b50 <hci_driver_open+0x40>
	cfg.event_length.event_length_us =
   17ba4:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17ba8:	4622      	mov	r2, r4
   17baa:	2104      	movs	r1, #4
   17bac:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   17bae:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17bb0:	f7eb ffd2 	bl	3b58 <sdc_cfg_set>
	if (required_memory < 0) {
   17bb4:	2800      	cmp	r0, #0
   17bb6:	dbcb      	blt.n	17b50 <hci_driver_open+0x40>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17bb8:	4622      	mov	r2, r4
   17bba:	2105      	movs	r1, #5
   17bbc:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   17bbe:	f88d 5020 	strb.w	r5, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17bc2:	f7eb ffc9 	bl	3b58 <sdc_cfg_set>
	if (required_memory < 0) {
   17bc6:	2800      	cmp	r0, #0
   17bc8:	dbc2      	blt.n	17b50 <hci_driver_open+0x40>
		cfg.scan_buffer_cfg.count = CONFIG_SDC_SCAN_BUFFER_COUNT;
   17bca:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17bcc:	4622      	mov	r2, r4
   17bce:	2106      	movs	r1, #6
   17bd0:	4628      	mov	r0, r5
		cfg.scan_buffer_cfg.count = CONFIG_SDC_SCAN_BUFFER_COUNT;
   17bd2:	f88d 3020 	strb.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17bd6:	f7eb ffbf 	bl	3b58 <sdc_cfg_set>
		if (required_memory < 0) {
   17bda:	2800      	cmp	r0, #0
   17bdc:	dbb8      	blt.n	17b50 <hci_driver_open+0x40>
	if (required_memory > sizeof(sdc_mempool)) {
   17bde:	f240 4386 	movw	r3, #1158	; 0x486
   17be2:	4298      	cmp	r0, r3
   17be4:	dd08      	ble.n	17bf8 <hci_driver_open+0xe8>
		k_panic();
   17be6:	4040      	eors	r0, r0
   17be8:	f380 8811 	msr	BASEPRI, r0
   17bec:	f04f 0004 	mov.w	r0, #4
   17bf0:	df02      	svc	2
		return -ENOMEM;
   17bf2:	f06f 000b 	mvn.w	r0, #11
   17bf6:	e7ab      	b.n	17b50 <hci_driver_open+0x40>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   17bf8:	4818      	ldr	r0, [pc, #96]	; (17c5c <hci_driver_open+0x14c>)
   17bfa:	f000 ff53 	bl	18aa4 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   17bfe:	4b18      	ldr	r3, [pc, #96]	; (17c60 <hci_driver_open+0x150>)
   17c00:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   17c02:	b1e8      	cbz	r0, 17c40 <hci_driver_open+0x130>
	sdc_rand_source_t rand_functions = {
   17c04:	4b17      	ldr	r3, [pc, #92]	; (17c64 <hci_driver_open+0x154>)
   17c06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   17c0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   17c0e:	4620      	mov	r0, r4
   17c10:	f7ec f936 	bl	3e80 <sdc_rand_source_register>
	if (err) {
   17c14:	b988      	cbnz	r0, 17c3a <hci_driver_open+0x12a>
	err = MULTITHREADING_LOCK_ACQUIRE();
   17c16:	f04f 30ff 	mov.w	r0, #4294967295
   17c1a:	f04f 31ff 	mov.w	r1, #4294967295
   17c1e:	f7ff feef 	bl	17a00 <multithreading_lock_acquire>
	if (!err) {
   17c22:	4604      	mov	r4, r0
   17c24:	b930      	cbnz	r0, 17c34 <hci_driver_open+0x124>
		err = sdc_enable(host_signal, sdc_mempool);
   17c26:	4910      	ldr	r1, [pc, #64]	; (17c68 <hci_driver_open+0x158>)
   17c28:	4810      	ldr	r0, [pc, #64]	; (17c6c <hci_driver_open+0x15c>)
   17c2a:	f7eb ffef 	bl	3c0c <sdc_enable>
   17c2e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   17c30:	f7ff feee 	bl	17a10 <multithreading_lock_release>
	if (err < 0) {
   17c34:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   17c38:	e78a      	b.n	17b50 <hci_driver_open+0x40>
		return -EINVAL;
   17c3a:	f06f 0015 	mvn.w	r0, #21
   17c3e:	e787      	b.n	17b50 <hci_driver_open+0x40>
		return -ENODEV;
   17c40:	f06f 0012 	mvn.w	r0, #18
   17c44:	e784      	b.n	17b50 <hci_driver_open+0x40>
   17c46:	bf00      	nop
   17c48:	200032a0 	.word	0x200032a0
   17c4c:	00017c71 	.word	0x00017c71
   17c50:	200018e0 	.word	0x200018e0
   17c54:	000210fe 	.word	0x000210fe
   17c58:	02031b1b 	.word	0x02031b1b
   17c5c:	00020f8b 	.word	0x00020f8b
   17c60:	20001dac 	.word	0x20001dac
   17c64:	0001f910 	.word	0x0001f910
   17c68:	20001f66 	.word	0x20001f66
   17c6c:	00017d51 	.word	0x00017d51

00017c70 <recv_thread>:
{
   17c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool received_data = false;
   17c72:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   17c74:	4f34      	ldr	r7, [pc, #208]	; (17d48 <recv_thread+0xd8>)
		errcode = hci_internal_evt_get(p_hci_buffer);
   17c76:	4c35      	ldr	r4, [pc, #212]	; (17d4c <recv_thread+0xdc>)
	bool received_evt = false;
   17c78:	462e      	mov	r6, r5
		if (!received_evt && !received_data) {
   17c7a:	b93e      	cbnz	r6, 17c8c <recv_thread+0x1c>
   17c7c:	b935      	cbnz	r5, 17c8c <recv_thread+0x1c>
   17c7e:	f04f 32ff 	mov.w	r2, #4294967295
   17c82:	f04f 33ff 	mov.w	r3, #4294967295
   17c86:	4638      	mov	r0, r7
   17c88:	f001 ff6c 	bl	19b64 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   17c8c:	f04f 30ff 	mov.w	r0, #4294967295
   17c90:	f04f 31ff 	mov.w	r1, #4294967295
   17c94:	f7ff feb4 	bl	17a00 <multithreading_lock_acquire>
	if (!errcode) {
   17c98:	b158      	cbz	r0, 17cb2 <recv_thread+0x42>
		return false;
   17c9a:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   17c9c:	f04f 30ff 	mov.w	r0, #4294967295
   17ca0:	f04f 31ff 	mov.w	r1, #4294967295
   17ca4:	f7ff feac 	bl	17a00 <multithreading_lock_acquire>
	if (!errcode) {
   17ca8:	b380      	cbz	r0, 17d0c <recv_thread+0x9c>
		return false;
   17caa:	2500      	movs	r5, #0
	z_impl_k_yield();
   17cac:	f003 fbec 	bl	1b488 <z_impl_k_yield>
}
   17cb0:	e7e3      	b.n	17c7a <recv_thread+0xa>
		errcode = hci_internal_evt_get(p_hci_buffer);
   17cb2:	4826      	ldr	r0, [pc, #152]	; (17d4c <recv_thread+0xdc>)
   17cb4:	f000 fb86 	bl	183c4 <hci_internal_evt_get>
   17cb8:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   17cba:	f7ff fea9 	bl	17a10 <multithreading_lock_release>
	if (errcode) {
   17cbe:	2d00      	cmp	r5, #0
   17cc0:	d1eb      	bne.n	17c9a <recv_thread+0x2a>
	switch (hdr->evt) {
   17cc2:	7820      	ldrb	r0, [r4, #0]
   17cc4:	283e      	cmp	r0, #62	; 0x3e
   17cc6:	d007      	beq.n	17cd8 <recv_thread+0x68>
   17cc8:	28ff      	cmp	r0, #255	; 0xff
   17cca:	d01c      	beq.n	17d06 <recv_thread+0x96>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   17ccc:	f04f 32ff 	mov.w	r2, #4294967295
   17cd0:	f04f 33ff 	mov.w	r3, #4294967295
   17cd4:	2100      	movs	r1, #0
   17cd6:	e007      	b.n	17ce8 <recv_thread+0x78>
		switch (me->subevent) {
   17cd8:	78a3      	ldrb	r3, [r4, #2]
   17cda:	2b02      	cmp	r3, #2
   17cdc:	d001      	beq.n	17ce2 <recv_thread+0x72>
   17cde:	2b0d      	cmp	r3, #13
		switch (subevent) {
   17ce0:	d1f4      	bne.n	17ccc <recv_thread+0x5c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   17ce2:	2200      	movs	r2, #0
   17ce4:	2300      	movs	r3, #0
   17ce6:	2101      	movs	r1, #1
   17ce8:	f7fa f884 	bl	11df4 <bt_buf_get_evt>
	if (!evt_buf) {
   17cec:	4605      	mov	r5, r0
   17cee:	b140      	cbz	r0, 17d02 <recv_thread+0x92>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   17cf0:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17cf2:	4621      	mov	r1, r4
   17cf4:	3202      	adds	r2, #2
   17cf6:	3008      	adds	r0, #8
   17cf8:	f007 f979 	bl	1efee <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   17cfc:	4628      	mov	r0, r5
   17cfe:	f7fa ff35 	bl	12b6c <bt_recv>
	return true;
   17d02:	2601      	movs	r6, #1
   17d04:	e7ca      	b.n	17c9c <recv_thread+0x2c>
		switch (subevent) {
   17d06:	78a3      	ldrb	r3, [r4, #2]
   17d08:	2b80      	cmp	r3, #128	; 0x80
   17d0a:	e7e9      	b.n	17ce0 <recv_thread+0x70>
		errcode = sdc_hci_data_get(p_hci_buffer);
   17d0c:	480f      	ldr	r0, [pc, #60]	; (17d4c <recv_thread+0xdc>)
   17d0e:	f7f5 f80f 	bl	cd30 <sdc_hci_data_get>
   17d12:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   17d14:	f7ff fe7c 	bl	17a10 <multithreading_lock_release>
	if (errcode) {
   17d18:	2d00      	cmp	r5, #0
   17d1a:	d1c6      	bne.n	17caa <recv_thread+0x3a>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   17d1c:	f04f 32ff 	mov.w	r2, #4294967295
   17d20:	f04f 33ff 	mov.w	r3, #4294967295
   17d24:	2003      	movs	r0, #3
   17d26:	f7fa f81b 	bl	11d60 <bt_buf_get_rx>
	if (!data_buf) {
   17d2a:	4605      	mov	r5, r0
   17d2c:	b908      	cbnz	r0, 17d32 <recv_thread+0xc2>
	return true;
   17d2e:	2501      	movs	r5, #1
   17d30:	e7bc      	b.n	17cac <recv_thread+0x3c>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   17d32:	8862      	ldrh	r2, [r4, #2]
   17d34:	4621      	mov	r1, r4
   17d36:	3204      	adds	r2, #4
   17d38:	3008      	adds	r0, #8
   17d3a:	f007 f958 	bl	1efee <net_buf_simple_add_mem>
	bt_recv(data_buf);
   17d3e:	4628      	mov	r0, r5
   17d40:	f7fa ff14 	bl	12b6c <bt_recv>
   17d44:	e7f3      	b.n	17d2e <recv_thread+0xbe>
   17d46:	bf00      	nop
   17d48:	200005f4 	.word	0x200005f4
   17d4c:	20001f20 	.word	0x20001f20

00017d50 <host_signal>:
	z_impl_k_sem_give(sem);
   17d50:	4801      	ldr	r0, [pc, #4]	; (17d58 <host_signal+0x8>)
   17d52:	f001 bec3 	b.w	19adc <z_impl_k_sem_give>
   17d56:	bf00      	nop
   17d58:	200005f4 	.word	0x200005f4

00017d5c <hci_driver_send>:
{
   17d5c:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   17d5e:	8983      	ldrh	r3, [r0, #12]
{
   17d60:	4605      	mov	r5, r0
	if (!buf->len) {
   17d62:	b383      	cbz	r3, 17dc6 <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   17d64:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   17d66:	b1ab      	cbz	r3, 17d94 <hci_driver_send+0x38>
   17d68:	2b02      	cmp	r3, #2
   17d6a:	d12c      	bne.n	17dc6 <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   17d6c:	f04f 30ff 	mov.w	r0, #4294967295
   17d70:	f04f 31ff 	mov.w	r1, #4294967295
   17d74:	f7ff fe44 	bl	17a00 <multithreading_lock_acquire>
	if (!errcode) {
   17d78:	4604      	mov	r4, r0
   17d7a:	b948      	cbnz	r0, 17d90 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   17d7c:	68a8      	ldr	r0, [r5, #8]
   17d7e:	f7f4 ffe4 	bl	cd4a <sdc_hci_data_put>
   17d82:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   17d84:	f7ff fe44 	bl	17a10 <multithreading_lock_release>
		if (errcode) {
   17d88:	b1c4      	cbz	r4, 17dbc <hci_driver_send+0x60>
   17d8a:	4810      	ldr	r0, [pc, #64]	; (17dcc <hci_driver_send+0x70>)
   17d8c:	f001 fea6 	bl	19adc <z_impl_k_sem_give>
}
   17d90:	4620      	mov	r0, r4
   17d92:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   17d94:	f04f 30ff 	mov.w	r0, #4294967295
   17d98:	f04f 31ff 	mov.w	r1, #4294967295
   17d9c:	f7ff fe30 	bl	17a00 <multithreading_lock_acquire>
	if (!errcode) {
   17da0:	4604      	mov	r4, r0
   17da2:	2800      	cmp	r0, #0
   17da4:	d1f4      	bne.n	17d90 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   17da6:	68a8      	ldr	r0, [r5, #8]
   17da8:	f000 f840 	bl	17e2c <hci_internal_cmd_put>
   17dac:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   17dae:	f7ff fe2f 	bl	17a10 <multithreading_lock_release>
	if (errcode) {
   17db2:	2c00      	cmp	r4, #0
   17db4:	d1ec      	bne.n	17d90 <hci_driver_send+0x34>
   17db6:	4805      	ldr	r0, [pc, #20]	; (17dcc <hci_driver_send+0x70>)
   17db8:	f001 fe90 	bl	19adc <z_impl_k_sem_give>
		net_buf_unref(buf);
   17dbc:	4628      	mov	r0, r5
   17dbe:	f7fe f9c3 	bl	16148 <net_buf_unref>
   17dc2:	2400      	movs	r4, #0
   17dc4:	e7e4      	b.n	17d90 <hci_driver_send+0x34>
	switch (type) {
   17dc6:	f06f 0415 	mvn.w	r4, #21
   17dca:	e7e1      	b.n	17d90 <hci_driver_send+0x34>
   17dcc:	200005f4 	.word	0x200005f4

00017dd0 <rand_prio_low_vector_get>:
{
   17dd0:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   17dd2:	4b11      	ldr	r3, [pc, #68]	; (17e18 <rand_prio_low_vector_get+0x48>)
{
   17dd4:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   17dd6:	6818      	ldr	r0, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
   17dd8:	6883      	ldr	r3, [r0, #8]
   17dda:	685d      	ldr	r5, [r3, #4]
   17ddc:	460a      	mov	r2, r1
   17dde:	b1bd      	cbz	r5, 17e10 <rand_prio_low_vector_get+0x40>
	return api->get_entropy_isr(dev, buffer, length, flags);
   17de0:	4621      	mov	r1, r4
   17de2:	2300      	movs	r3, #0
   17de4:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   17de6:	1e04      	subs	r4, r0, #0
   17de8:	da0e      	bge.n	17e08 <rand_prio_low_vector_get+0x38>
   17dea:	490c      	ldr	r1, [pc, #48]	; (17e1c <rand_prio_low_vector_get+0x4c>)
   17dec:	4a0c      	ldr	r2, [pc, #48]	; (17e20 <rand_prio_low_vector_get+0x50>)
   17dee:	480d      	ldr	r0, [pc, #52]	; (17e24 <rand_prio_low_vector_get+0x54>)
   17df0:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
   17df4:	f004 fdd5 	bl	1c9a2 <printk>
   17df8:	480b      	ldr	r0, [pc, #44]	; (17e28 <rand_prio_low_vector_get+0x58>)
   17dfa:	f004 fdd2 	bl	1c9a2 <printk>
   17dfe:	4808      	ldr	r0, [pc, #32]	; (17e20 <rand_prio_low_vector_get+0x50>)
   17e00:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
   17e04:	f005 f827 	bl	1ce56 <assert_post_action>
	return ret >= 0 ? ret : 0;
   17e08:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   17e0c:	b2c0      	uxtb	r0, r0
   17e0e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   17e10:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17e14:	e7e9      	b.n	17dea <rand_prio_low_vector_get+0x1a>
   17e16:	bf00      	nop
   17e18:	20001dac 	.word	0x20001dac
   17e1c:	000210b1 	.word	0x000210b1
   17e20:	0002103e 	.word	0x0002103e
   17e24:	0001feb5 	.word	0x0001feb5
   17e28:	00021105 	.word	0x00021105

00017e2c <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   17e2c:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   17e2e:	4cd7      	ldr	r4, [pc, #860]	; (1818c <hci_internal_cmd_put+0x360>)
   17e30:	7823      	ldrb	r3, [r4, #0]
   17e32:	2b00      	cmp	r3, #0
   17e34:	f040 82b0 	bne.w	18398 <hci_internal_cmd_put+0x56c>
	return ((uint16_t)src[1] << 8) | src[0];
   17e38:	7843      	ldrb	r3, [r0, #1]
   17e3a:	7805      	ldrb	r5, [r0, #0]
   17e3c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   17e40:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   17e44:	b22e      	sxth	r6, r5
   17e46:	ea4f 2395 	mov.w	r3, r5, lsr #10
   17e4a:	d209      	bcs.n	17e60 <hci_internal_cmd_put+0x34>
   17e4c:	b15b      	cbz	r3, 17e66 <hci_internal_cmd_put+0x3a>
   17e4e:	3b01      	subs	r3, #1
   17e50:	2b07      	cmp	r3, #7
   17e52:	d808      	bhi.n	17e66 <hci_internal_cmd_put+0x3a>
   17e54:	e8df f003 	tbb	[pc, r3]
   17e58:	5c28070a 	.word	0x5c28070a
   17e5c:	d0070707 	.word	0xd0070707
   17e60:	2b3f      	cmp	r3, #63	; 0x3f
   17e62:	f000 81fc 	beq.w	1825e <hci_internal_cmd_put+0x432>
   17e66:	2104      	movs	r1, #4
   17e68:	2001      	movs	r0, #1
   17e6a:	e233      	b.n	182d4 <hci_internal_cmd_put+0x4a8>
	switch (opcode)	{
   17e6c:	f240 4306 	movw	r3, #1030	; 0x406
   17e70:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   17e72:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   17e76:	d005      	beq.n	17e84 <hci_internal_cmd_put+0x58>
   17e78:	f240 431d 	movw	r3, #1053	; 0x41d
   17e7c:	429e      	cmp	r6, r3
   17e7e:	d010      	beq.n	17ea2 <hci_internal_cmd_put+0x76>
	switch (opcode)	{
   17e80:	2001      	movs	r0, #1
   17e82:	e001      	b.n	17e88 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   17e84:	f7f5 f8a7 	bl	cfd6 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   17e88:	230f      	movs	r3, #15
   17e8a:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   17e8c:	2304      	movs	r3, #4
   17e8e:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   17e90:	2301      	movs	r3, #1
	evt_data->status = status_code;
   17e92:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   17e94:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   17e96:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   17e9a:	2301      	movs	r3, #1
   17e9c:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   17e9e:	2000      	movs	r0, #0
}
   17ea0:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   17ea2:	f7f5 f89a 	bl	cfda <sdc_hci_cmd_lc_read_remote_version_information>
   17ea6:	e7ef      	b.n	17e88 <hci_internal_cmd_put+0x5c>
	switch (opcode)	{
   17ea8:	f640 4363 	movw	r3, #3171	; 0xc63
   17eac:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   17eae:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   17eb2:	d025      	beq.n	17f00 <hci_internal_cmd_put+0xd4>
   17eb4:	dc0f      	bgt.n	17ed6 <hci_internal_cmd_put+0xaa>
   17eb6:	f640 4303 	movw	r3, #3075	; 0xc03
   17eba:	429e      	cmp	r6, r3
   17ebc:	d018      	beq.n	17ef0 <hci_internal_cmd_put+0xc4>
   17ebe:	f640 432d 	movw	r3, #3117	; 0xc2d
   17ec2:	429e      	cmp	r6, r3
   17ec4:	d017      	beq.n	17ef6 <hci_internal_cmd_put+0xca>
   17ec6:	f640 4301 	movw	r3, #3073	; 0xc01
   17eca:	429e      	cmp	r6, r3
   17ecc:	d1d8      	bne.n	17e80 <hci_internal_cmd_put+0x54>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   17ece:	f7f4 ff58 	bl	cd82 <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   17ed2:	2104      	movs	r1, #4
   17ed4:	e08d      	b.n	17ff2 <hci_internal_cmd_put+0x1c6>
	switch (opcode)	{
   17ed6:	f640 437b 	movw	r3, #3195	; 0xc7b
   17eda:	429e      	cmp	r6, r3
   17edc:	d013      	beq.n	17f06 <hci_internal_cmd_put+0xda>
   17ede:	f640 437c 	movw	r3, #3196	; 0xc7c
   17ee2:	429e      	cmp	r6, r3
   17ee4:	d1cc      	bne.n	17e80 <hci_internal_cmd_put+0x54>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   17ee6:	49aa      	ldr	r1, [pc, #680]	; (18190 <hci_internal_cmd_put+0x364>)
   17ee8:	f7f4 ff55 	bl	cd96 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   17eec:	2106      	movs	r1, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   17eee:	e080      	b.n	17ff2 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_cb_reset();
   17ef0:	f7ec f8a4 	bl	403c <sdc_hci_cmd_cb_reset>
   17ef4:	e7ed      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   17ef6:	49a6      	ldr	r1, [pc, #664]	; (18190 <hci_internal_cmd_put+0x364>)
   17ef8:	f7f4 ff41 	bl	cd7e <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   17efc:	2107      	movs	r1, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   17efe:	e078      	b.n	17ff2 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   17f00:	f7f4 ff44 	bl	cd8c <sdc_hci_cmd_cb_set_event_mask_page_2>
   17f04:	e7e5      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   17f06:	49a2      	ldr	r1, [pc, #648]	; (18190 <hci_internal_cmd_put+0x364>)
   17f08:	f7f4 ff37 	bl	cd7a <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   17f0c:	2108      	movs	r1, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   17f0e:	e070      	b.n	17ff2 <hci_internal_cmd_put+0x1c6>
	switch (opcode)	{
   17f10:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   17f14:	3e01      	subs	r6, #1
   17f16:	2e08      	cmp	r6, #8
   17f18:	d8b2      	bhi.n	17e80 <hci_internal_cmd_put+0x54>
   17f1a:	a301      	add	r3, pc, #4	; (adr r3, 17f20 <hci_internal_cmd_put+0xf4>)
   17f1c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   17f20:	00017f45 	.word	0x00017f45
   17f24:	00017f4f 	.word	0x00017f4f
   17f28:	00017fc3 	.word	0x00017fc3
   17f2c:	00017e81 	.word	0x00017e81
   17f30:	00017e81 	.word	0x00017e81
   17f34:	00017e81 	.word	0x00017e81
   17f38:	00017e81 	.word	0x00017e81
   17f3c:	00017e81 	.word	0x00017e81
   17f40:	00017feb 	.word	0x00017feb
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   17f44:	4892      	ldr	r0, [pc, #584]	; (18190 <hci_internal_cmd_put+0x364>)
   17f46:	f7f4 ffff 	bl	cf48 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   17f4a:	210c      	movs	r1, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   17f4c:	e051      	b.n	17ff2 <hci_internal_cmd_put+0x1c6>
	memset(cmds, 0, sizeof(*cmds));
   17f4e:	4890      	ldr	r0, [pc, #576]	; (18190 <hci_internal_cmd_put+0x364>)
   17f50:	222e      	movs	r2, #46	; 0x2e
   17f52:	2100      	movs	r1, #0
   17f54:	f007 fb3b 	bl	1f5ce <memset>
	cmds->hci_disconnect = 1;
   17f58:	2320      	movs	r3, #32
   17f5a:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   17f5c:	2380      	movs	r3, #128	; 0x80
   17f5e:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   17f60:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   17f64:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   17f66:	2304      	movs	r3, #4
   17f68:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   17f6a:	2328      	movs	r3, #40	; 0x28
   17f6c:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   17f6e:	2302      	movs	r3, #2
   17f70:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   17f72:	2304      	movs	r3, #4
   17f74:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   17f76:	2317      	movs	r3, #23
   17f78:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_parameters = 1;
   17f7c:	f06f 0303 	mvn.w	r3, #3
   17f80:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   17f84:	23ff      	movs	r3, #255	; 0xff
   17f86:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   17f8a:	2379      	movs	r3, #121	; 0x79
   17f8c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   17f90:	2330      	movs	r3, #48	; 0x30
   17f92:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   17f96:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   17f9a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   17f9e:	2379      	movs	r3, #121	; 0x79
   17fa0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   17fa4:	f06f 0301 	mvn.w	r3, #1
   17fa8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   17fac:	2301      	movs	r3, #1
   17fae:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   17fb2:	2380      	movs	r3, #128	; 0x80
   17fb4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   17fb8:	2304      	movs	r3, #4
   17fba:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->read_supported_vs_commands = 1;
   17fbe:	2144      	movs	r1, #68	; 0x44
   17fc0:	e118      	b.n	181f4 <hci_internal_cmd_put+0x3c8>
	memset(features, 0, sizeof(*features));
   17fc2:	4b73      	ldr	r3, [pc, #460]	; (18190 <hci_internal_cmd_put+0x364>)
   17fc4:	2000      	movs	r0, #0
   17fc6:	f8c4 0007 	str.w	r0, [r4, #7]
   17fca:	6058      	str	r0, [r3, #4]
	features->bdedr_not_supported = 1;
   17fcc:	7ae3      	ldrb	r3, [r4, #11]
   17fce:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   17fd2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   17fd6:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   17fd8:	210c      	movs	r1, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   17fda:	230e      	movs	r3, #14
   17fdc:	7063      	strb	r3, [r4, #1]
	evt_data->ncmd = 1;
   17fde:	2301      	movs	r3, #1
	evt_hdr->len = param_length;
   17fe0:	70a1      	strb	r1, [r4, #2]
	evt_data->ncmd = 1;
   17fe2:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   17fe4:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   17fe6:	71a0      	strb	r0, [r4, #6]
}
   17fe8:	e757      	b.n	17e9a <hci_internal_cmd_put+0x6e>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   17fea:	4869      	ldr	r0, [pc, #420]	; (18190 <hci_internal_cmd_put+0x364>)
   17fec:	f7f4 ffaa 	bl	cf44 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   17ff0:	210a      	movs	r1, #10
	if (!command_generates_command_complete_event(opcode) ||
   17ff2:	2801      	cmp	r0, #1
   17ff4:	d1f1      	bne.n	17fda <hci_internal_cmd_put+0x1ae>
   17ff6:	e747      	b.n	17e88 <hci_internal_cmd_put+0x5c>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   17ff8:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   17ffc:	3e01      	subs	r6, #1
   17ffe:	3003      	adds	r0, #3
	switch (opcode)	{
   18000:	2e4d      	cmp	r6, #77	; 0x4d
   18002:	f63f af3d 	bhi.w	17e80 <hci_internal_cmd_put+0x54>
   18006:	a301      	add	r3, pc, #4	; (adr r3, 1800c <hci_internal_cmd_put+0x1e0>)
   18008:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1800c:	00018145 	.word	0x00018145
   18010:	0001814b 	.word	0x0001814b
   18014:	00018153 	.word	0x00018153
   18018:	00017e81 	.word	0x00017e81
   1801c:	00018173 	.word	0x00018173
   18020:	00017e81 	.word	0x00017e81
   18024:	00017e81 	.word	0x00017e81
   18028:	00017e81 	.word	0x00017e81
   1802c:	00017e81 	.word	0x00017e81
   18030:	00017e81 	.word	0x00017e81
   18034:	00018179 	.word	0x00018179
   18038:	0001817f 	.word	0x0001817f
   1803c:	00018185 	.word	0x00018185
   18040:	00018195 	.word	0x00018195
   18044:	0001819b 	.word	0x0001819b
   18048:	000181a5 	.word	0x000181a5
   1804c:	000181ab 	.word	0x000181ab
   18050:	000181b1 	.word	0x000181b1
   18054:	000181b7 	.word	0x000181b7
   18058:	000181bd 	.word	0x000181bd
   1805c:	000181c3 	.word	0x000181c3
   18060:	000181cd 	.word	0x000181cd
   18064:	000181d3 	.word	0x000181d3
   18068:	000181dd 	.word	0x000181dd
   1806c:	000181e5 	.word	0x000181e5
   18070:	00017e81 	.word	0x00017e81
   18074:	00017e81 	.word	0x00017e81
   18078:	000181eb 	.word	0x000181eb
   1807c:	00017e81 	.word	0x00017e81
   18080:	00017e81 	.word	0x00017e81
   18084:	00017e81 	.word	0x00017e81
   18088:	00017e81 	.word	0x00017e81
   1808c:	00017e81 	.word	0x00017e81
   18090:	000181f9 	.word	0x000181f9
   18094:	00018201 	.word	0x00018201
   18098:	00018209 	.word	0x00018209
   1809c:	00017e81 	.word	0x00017e81
   180a0:	00017e81 	.word	0x00017e81
   180a4:	0001820f 	.word	0x0001820f
   180a8:	00018215 	.word	0x00018215
   180ac:	0001821b 	.word	0x0001821b
   180b0:	00018221 	.word	0x00018221
   180b4:	00017e81 	.word	0x00017e81
   180b8:	00017e81 	.word	0x00017e81
   180bc:	00018229 	.word	0x00018229
   180c0:	0001822f 	.word	0x0001822f
   180c4:	00018235 	.word	0x00018235
   180c8:	0001823d 	.word	0x0001823d
   180cc:	00018245 	.word	0x00018245
   180d0:	0001824b 	.word	0x0001824b
   180d4:	00017e81 	.word	0x00017e81
   180d8:	00017e81 	.word	0x00017e81
   180dc:	00017e81 	.word	0x00017e81
   180e0:	00017e81 	.word	0x00017e81
   180e4:	00017e81 	.word	0x00017e81
   180e8:	00017e81 	.word	0x00017e81
   180ec:	00017e81 	.word	0x00017e81
   180f0:	00017e81 	.word	0x00017e81
   180f4:	00017e81 	.word	0x00017e81
   180f8:	00017e81 	.word	0x00017e81
   180fc:	00017e81 	.word	0x00017e81
   18100:	00017e81 	.word	0x00017e81
   18104:	00017e81 	.word	0x00017e81
   18108:	00017e81 	.word	0x00017e81
   1810c:	00017e81 	.word	0x00017e81
   18110:	00017e81 	.word	0x00017e81
   18114:	00017e81 	.word	0x00017e81
   18118:	00017e81 	.word	0x00017e81
   1811c:	00017e81 	.word	0x00017e81
   18120:	00017e81 	.word	0x00017e81
   18124:	00017e81 	.word	0x00017e81
   18128:	00017e81 	.word	0x00017e81
   1812c:	00017e81 	.word	0x00017e81
   18130:	00017e81 	.word	0x00017e81
   18134:	00018251 	.word	0x00018251
   18138:	00017e81 	.word	0x00017e81
   1813c:	00017e81 	.word	0x00017e81
   18140:	00018259 	.word	0x00018259
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   18144:	f7f4 ff32 	bl	cfac <sdc_hci_cmd_le_set_event_mask>
   18148:	e6c3      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1814a:	4811      	ldr	r0, [pc, #68]	; (18190 <hci_internal_cmd_put+0x364>)
   1814c:	f7f4 ff12 	bl	cf74 <sdc_hci_cmd_le_read_buffer_size>
   18150:	e6d4      	b.n	17efc <hci_internal_cmd_put+0xd0>
	memset(features, 0, sizeof(*features));
   18152:	4b0f      	ldr	r3, [pc, #60]	; (18190 <hci_internal_cmd_put+0x364>)
   18154:	2000      	movs	r0, #0
   18156:	f8c4 0007 	str.w	r0, [r4, #7]
   1815a:	7118      	strb	r0, [r3, #4]
	features->le_encryption = 1;
   1815c:	79e3      	ldrb	r3, [r4, #7]
   1815e:	f063 030a 	orn	r3, r3, #10
   18162:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   18164:	7a23      	ldrb	r3, [r4, #8]
   18166:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1816a:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1816e:	7223      	strb	r3, [r4, #8]
   18170:	e732      	b.n	17fd8 <hci_internal_cmd_put+0x1ac>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   18172:	f7f4 ff26 	bl	cfc2 <sdc_hci_cmd_le_set_random_address>
   18176:	e6ac      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   18178:	f7f4 ff29 	bl	cfce <sdc_hci_cmd_le_set_scan_params>
   1817c:	e6a9      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   1817e:	f7f4 ff24 	bl	cfca <sdc_hci_cmd_le_set_scan_enable>
   18182:	e6a6      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   18184:	f7f4 feec 	bl	cf60 <sdc_hci_cmd_le_create_conn>
   18188:	e67e      	b.n	17e88 <hci_internal_cmd_put+0x5c>
   1818a:	bf00      	nop
   1818c:	200023ec 	.word	0x200023ec
   18190:	200023f3 	.word	0x200023f3
		return sdc_hci_cmd_le_create_conn_cancel();
   18194:	f7f4 fee6 	bl	cf64 <sdc_hci_cmd_le_create_conn_cancel>
   18198:	e69b      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   1819a:	4889      	ldr	r0, [pc, #548]	; (183c0 <hci_internal_cmd_put+0x594>)
   1819c:	f7f4 fefa 	bl	cf94 <sdc_hci_cmd_le_read_white_list_size>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   181a0:	2105      	movs	r1, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   181a2:	e726      	b.n	17ff2 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_clear_white_list();
   181a4:	f7f4 fed8 	bl	cf58 <sdc_hci_cmd_le_clear_white_list>
   181a8:	e693      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   181aa:	f7f4 fed1 	bl	cf50 <sdc_hci_cmd_le_add_device_to_white_list>
   181ae:	e690      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   181b0:	f7f4 fef4 	bl	cf9c <sdc_hci_cmd_le_remove_device_from_white_list>
   181b4:	e68d      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   181b6:	f7f4 fed1 	bl	cf5c <sdc_hci_cmd_le_conn_update>
   181ba:	e665      	b.n	17e88 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   181bc:	f7f4 fefb 	bl	cfb6 <sdc_hci_cmd_le_set_host_channel_classification>
   181c0:	e687      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   181c2:	497f      	ldr	r1, [pc, #508]	; (183c0 <hci_internal_cmd_put+0x594>)
   181c4:	f7f4 fed8 	bl	cf78 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   181c8:	210b      	movs	r1, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   181ca:	e712      	b.n	17ff2 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   181cc:	f7f4 feda 	bl	cf84 <sdc_hci_cmd_le_read_remote_features>
   181d0:	e65a      	b.n	17e88 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   181d2:	497b      	ldr	r1, [pc, #492]	; (183c0 <hci_internal_cmd_put+0x594>)
   181d4:	f7f4 feca 	bl	cf6c <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   181d8:	2114      	movs	r1, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   181da:	e70a      	b.n	17ff2 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   181dc:	4878      	ldr	r0, [pc, #480]	; (183c0 <hci_internal_cmd_put+0x594>)
   181de:	f7f4 fec7 	bl	cf70 <sdc_hci_cmd_le_rand>
   181e2:	e6b2      	b.n	17f4a <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   181e4:	f7f4 fec0 	bl	cf68 <sdc_hci_cmd_le_enable_encryption>
   181e8:	e64e      	b.n	17e88 <hci_internal_cmd_put+0x5c>
	*buf = states1;
   181ea:	2370      	movs	r3, #112	; 0x70
   181ec:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   181ee:	2340      	movs	r3, #64	; 0x40
   181f0:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   181f2:	210c      	movs	r1, #12
	cmds->read_supported_vs_commands = 1;
   181f4:	2000      	movs	r0, #0
   181f6:	e6f0      	b.n	17fda <hci_internal_cmd_put+0x1ae>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   181f8:	4971      	ldr	r1, [pc, #452]	; (183c0 <hci_internal_cmd_put+0x594>)
   181fa:	f7f4 fed3 	bl	cfa4 <sdc_hci_cmd_le_set_data_length>
   181fe:	e675      	b.n	17eec <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   18200:	486f      	ldr	r0, [pc, #444]	; (183c0 <hci_internal_cmd_put+0x594>)
   18202:	f7f4 fec3 	bl	cf8c <sdc_hci_cmd_le_read_suggested_default_data_length>
   18206:	e681      	b.n	17f0c <hci_internal_cmd_put+0xe0>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   18208:	f7f4 fee3 	bl	cfd2 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1820c:	e661      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1820e:	f7f4 fe9d 	bl	cf4c <sdc_hci_cmd_le_add_device_to_resolving_list>
   18212:	e65e      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   18214:	f7f4 fec0 	bl	cf98 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   18218:	e65b      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_clear_resolving_list();
   1821a:	f7f4 fe9b 	bl	cf54 <sdc_hci_cmd_le_clear_resolving_list>
   1821e:	e658      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   18220:	4867      	ldr	r0, [pc, #412]	; (183c0 <hci_internal_cmd_put+0x594>)
   18222:	f7f4 feb1 	bl	cf88 <sdc_hci_cmd_le_read_resolving_list_size>
   18226:	e7bb      	b.n	181a0 <hci_internal_cmd_put+0x374>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   18228:	f7f4 feba 	bl	cfa0 <sdc_hci_cmd_le_set_address_resolution_enable>
   1822c:	e651      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1822e:	f7f4 feca 	bl	cfc6 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   18232:	e64e      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   18234:	4862      	ldr	r0, [pc, #392]	; (183c0 <hci_internal_cmd_put+0x594>)
   18236:	f7f4 fea1 	bl	cf7c <sdc_hci_cmd_le_read_max_data_length>
   1823a:	e686      	b.n	17f4a <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1823c:	4960      	ldr	r1, [pc, #384]	; (183c0 <hci_internal_cmd_put+0x594>)
   1823e:	f7f4 fe9f 	bl	cf80 <sdc_hci_cmd_le_read_phy>
   18242:	e663      	b.n	17f0c <hci_internal_cmd_put+0xe0>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   18244:	f7f4 feb0 	bl	cfa8 <sdc_hci_cmd_le_set_default_phy>
   18248:	e643      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1824a:	f7f4 feb6 	bl	cfba <sdc_hci_cmd_le_set_phy>
   1824e:	e61b      	b.n	17e88 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   18250:	485b      	ldr	r0, [pc, #364]	; (183c0 <hci_internal_cmd_put+0x594>)
   18252:	f7f4 fe9d 	bl	cf90 <sdc_hci_cmd_le_read_transmit_power>
   18256:	e649      	b.n	17eec <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   18258:	f7f4 feb1 	bl	cfbe <sdc_hci_cmd_le_set_privacy_mode>
   1825c:	e639      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
	switch (opcode)	{
   1825e:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   18262:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18264:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   18268:	d820      	bhi.n	182ac <hci_internal_cmd_put+0x480>
   1826a:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1826e:	f43f ae07 	beq.w	17e80 <hci_internal_cmd_put+0x54>
   18272:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   18276:	3b01      	subs	r3, #1
   18278:	2b09      	cmp	r3, #9
   1827a:	f63f ae01 	bhi.w	17e80 <hci_internal_cmd_put+0x54>
   1827e:	a201      	add	r2, pc, #4	; (adr r2, 18284 <hci_internal_cmd_put+0x458>)
   18280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18284:	000182cd 	.word	0x000182cd
   18288:	000182fb 	.word	0x000182fb
   1828c:	00017e81 	.word	0x00017e81
   18290:	00017e81 	.word	0x00017e81
   18294:	00017e81 	.word	0x00017e81
   18298:	0001833b 	.word	0x0001833b
   1829c:	00017e81 	.word	0x00017e81
   182a0:	00017e81 	.word	0x00017e81
   182a4:	00018327 	.word	0x00018327
   182a8:	00018331 	.word	0x00018331
   182ac:	f505 7340 	add.w	r3, r5, #768	; 0x300
   182b0:	b29b      	uxth	r3, r3
   182b2:	2b05      	cmp	r3, #5
   182b4:	f63f ade4 	bhi.w	17e80 <hci_internal_cmd_put+0x54>
   182b8:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   182bc:	2b05      	cmp	r3, #5
   182be:	f63f addf 	bhi.w	17e80 <hci_internal_cmd_put+0x54>
   182c2:	e8df f003 	tbb	[pc, r3]
   182c6:	413e      	.short	0x413e
   182c8:	4d4a4744 	.word	0x4d4a4744
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   182cc:	483c      	ldr	r0, [pc, #240]	; (183c0 <hci_internal_cmd_put+0x594>)
   182ce:	f7eb fec9 	bl	4064 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   182d2:	2110      	movs	r1, #16
	switch (hci_opcode) {
   182d4:	f242 0319 	movw	r3, #8217	; 0x2019
   182d8:	429e      	cmp	r6, r3
   182da:	dc51      	bgt.n	18380 <hci_internal_cmd_put+0x554>
   182dc:	f242 030c 	movw	r3, #8204	; 0x200c
   182e0:	429e      	cmp	r6, r3
   182e2:	dc40      	bgt.n	18366 <hci_internal_cmd_put+0x53a>
   182e4:	f240 4306 	movw	r3, #1030	; 0x406
   182e8:	429e      	cmp	r6, r3
   182ea:	f43f adcd 	beq.w	17e88 <hci_internal_cmd_put+0x5c>
   182ee:	f240 431d 	movw	r3, #1053	; 0x41d
   182f2:	429e      	cmp	r6, r3
   182f4:	f43f adc8 	beq.w	17e88 <hci_internal_cmd_put+0x5c>
   182f8:	e67b      	b.n	17ff2 <hci_internal_cmd_put+0x1c6>
	memset(cmds, 0, sizeof(*cmds));
   182fa:	2000      	movs	r0, #0
   182fc:	f8a4 0007 	strh.w	r0, [r4, #7]
	cmds->read_version_info = 1;
   18300:	79e3      	ldrb	r3, [r4, #7]
   18302:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   18306:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1830a:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1830c:	7a23      	ldrb	r3, [r4, #8]
   1830e:	f023 0307 	bic.w	r3, r3, #7
   18312:	f043 0307 	orr.w	r3, r3, #7
   18316:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   18318:	f242 0319 	movw	r3, #8217	; 0x2019
   1831c:	429e      	cmp	r6, r3
   1831e:	dd3e      	ble.n	1839e <hci_internal_cmd_put+0x572>
   18320:	f242 0332 	movw	r3, #8242	; 0x2032
   18324:	e046      	b.n	183b4 <hci_internal_cmd_put+0x588>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   18326:	4826      	ldr	r0, [pc, #152]	; (183c0 <hci_internal_cmd_put+0x594>)
   18328:	f7f4 fdbf 	bl	ceaa <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1832c:	211b      	movs	r1, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1832e:	e7d1      	b.n	182d4 <hci_internal_cmd_put+0x4a8>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   18330:	4823      	ldr	r0, [pc, #140]	; (183c0 <hci_internal_cmd_put+0x594>)
   18332:	f7f4 fd6d 	bl	ce10 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   18336:	2124      	movs	r1, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   18338:	e7cc      	b.n	182d4 <hci_internal_cmd_put+0x4a8>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1833a:	f7f4 fe01 	bl	cf40 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1833e:	2104      	movs	r1, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   18340:	e7c8      	b.n	182d4 <hci_internal_cmd_put+0x4a8>
	cmds->read_supported_vs_commands = 1;
   18342:	233f      	movs	r3, #63	; 0x3f
   18344:	71e3      	strb	r3, [r4, #7]
   18346:	e63a      	b.n	17fbe <hci_internal_cmd_put+0x192>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   18348:	f7f4 fd5b 	bl	ce02 <sdc_hci_cmd_vs_llpm_mode_set>
   1834c:	e5c1      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1834e:	f7f4 fd2c 	bl	cdaa <sdc_hci_cmd_vs_conn_update>
   18352:	e5be      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   18354:	f7f4 fd21 	bl	cd9a <sdc_hci_cmd_vs_conn_event_extend>
   18358:	e5bb      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1835a:	f7f4 fd54 	bl	ce06 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1835e:	e5b8      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   18360:	f7f4 fd4d 	bl	cdfe <sdc_hci_cmd_vs_event_length_set>
   18364:	e5b5      	b.n	17ed2 <hci_internal_cmd_put+0xa6>
   18366:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   1836a:	3b0d      	subs	r3, #13
   1836c:	2201      	movs	r2, #1
   1836e:	b29b      	uxth	r3, r3
   18370:	fa02 f303 	lsl.w	r3, r2, r3
   18374:	f241 2241 	movw	r2, #4673	; 0x1241
   18378:	4213      	tst	r3, r2
   1837a:	f43f ae3a 	beq.w	17ff2 <hci_internal_cmd_put+0x1c6>
   1837e:	e583      	b.n	17e88 <hci_internal_cmd_put+0x5c>
	switch (hci_opcode) {
   18380:	f242 0332 	movw	r3, #8242	; 0x2032
   18384:	429e      	cmp	r6, r3
   18386:	f43f ad7f 	beq.w	17e88 <hci_internal_cmd_put+0x5c>
   1838a:	f5a5 5301 	sub.w	r3, r5, #8256	; 0x2040
   1838e:	3b03      	subs	r3, #3
   18390:	2b01      	cmp	r3, #1
   18392:	f67f ad79 	bls.w	17e88 <hci_internal_cmd_put+0x5c>
   18396:	e62c      	b.n	17ff2 <hci_internal_cmd_put+0x1c6>
		return -NRF_EPERM;
   18398:	f04f 30ff 	mov.w	r0, #4294967295
   1839c:	e580      	b.n	17ea0 <hci_internal_cmd_put+0x74>
	switch (hci_opcode) {
   1839e:	f242 030c 	movw	r3, #8204	; 0x200c
   183a2:	429e      	cmp	r6, r3
   183a4:	dc09      	bgt.n	183ba <hci_internal_cmd_put+0x58e>
   183a6:	f240 4306 	movw	r3, #1030	; 0x406
   183aa:	429e      	cmp	r6, r3
   183ac:	f43f ad6c 	beq.w	17e88 <hci_internal_cmd_put+0x5c>
   183b0:	f240 431d 	movw	r3, #1053	; 0x41d
   183b4:	429e      	cmp	r6, r3
   183b6:	f43f ad67 	beq.w	17e88 <hci_internal_cmd_put+0x5c>
   183ba:	2144      	movs	r1, #68	; 0x44
   183bc:	e60d      	b.n	17fda <hci_internal_cmd_put+0x1ae>
   183be:	bf00      	nop
   183c0:	200023f3 	.word	0x200023f3

000183c4 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   183c4:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   183c6:	4c07      	ldr	r4, [pc, #28]	; (183e4 <hci_internal_evt_get+0x20>)
   183c8:	7823      	ldrb	r3, [r4, #0]
   183ca:	b13b      	cbz	r3, 183dc <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
   183cc:	78a2      	ldrb	r2, [r4, #2]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   183ce:	1c61      	adds	r1, r4, #1
   183d0:	3202      	adds	r2, #2
   183d2:	f007 f8db 	bl	1f58c <memcpy>
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   183d6:	2000      	movs	r0, #0
   183d8:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   183da:	bd10      	pop	{r4, pc}
   183dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   183e0:	f7f4 bcbe 	b.w	cd60 <sdc_hci_evt_get>
   183e4:	200023ec 	.word	0x200023ec

000183e8 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   183e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   183ec:	4e14      	ldr	r6, [pc, #80]	; (18440 <bt_rand+0x58>)
   183ee:	6833      	ldr	r3, [r6, #0]
{
   183f0:	4605      	mov	r5, r0
   183f2:	460c      	mov	r4, r1
   183f4:	4637      	mov	r7, r6
	if (unlikely(!dev)) {
   183f6:	b1c3      	cbz	r3, 1842a <bt_rand+0x42>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   183f8:	683e      	ldr	r6, [r7, #0]
   183fa:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   183fc:	68b7      	ldr	r7, [r6, #8]
	__ASSERT(api->get_entropy != NULL,
   183fe:	683b      	ldr	r3, [r7, #0]
   18400:	b963      	cbnz	r3, 1841c <bt_rand+0x34>
   18402:	4910      	ldr	r1, [pc, #64]	; (18444 <bt_rand+0x5c>)
   18404:	4a10      	ldr	r2, [pc, #64]	; (18448 <bt_rand+0x60>)
   18406:	4811      	ldr	r0, [pc, #68]	; (1844c <bt_rand+0x64>)
   18408:	234b      	movs	r3, #75	; 0x4b
   1840a:	f004 faca 	bl	1c9a2 <printk>
   1840e:	4810      	ldr	r0, [pc, #64]	; (18450 <bt_rand+0x68>)
   18410:	f004 fac7 	bl	1c9a2 <printk>
   18414:	480c      	ldr	r0, [pc, #48]	; (18448 <bt_rand+0x60>)
   18416:	214b      	movs	r1, #75	; 0x4b
   18418:	f004 fd1d 	bl	1ce56 <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   1841c:	683b      	ldr	r3, [r7, #0]
   1841e:	4622      	mov	r2, r4
   18420:	4629      	mov	r1, r5
   18422:	4630      	mov	r0, r6
}
   18424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18428:	4718      	bx	r3
   1842a:	480a      	ldr	r0, [pc, #40]	; (18454 <bt_rand+0x6c>)
   1842c:	f000 fb3a 	bl	18aa4 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   18430:	6030      	str	r0, [r6, #0]
		if (!dev) {
   18432:	2800      	cmp	r0, #0
   18434:	d1e0      	bne.n	183f8 <bt_rand+0x10>
}
   18436:	f06f 0012 	mvn.w	r0, #18
   1843a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1843e:	bf00      	nop
   18440:	20001db0 	.word	0x20001db0
   18444:	00020ff8 	.word	0x00020ff8
   18448:	00020fcb 	.word	0x00020fcb
   1844c:	0001feb5 	.word	0x0001feb5
   18450:	00021018 	.word	0x00021018
   18454:	00020f8b 	.word	0x00020f8b

00018458 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   18458:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1845a:	2332      	movs	r3, #50	; 0x32
   1845c:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   18460:	4a10      	ldr	r2, [pc, #64]	; (184a4 <mpsl_lib_init+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   18462:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   18464:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   18466:	2119      	movs	r1, #25
   18468:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1846a:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1846e:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   18472:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   18476:	f7eb f985 	bl	3784 <mpsl_init>
	if (err) {
   1847a:	4604      	mov	r4, r0
   1847c:	b970      	cbnz	r0, 1849c <mpsl_lib_init+0x44>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1847e:	4601      	mov	r1, r0
   18480:	462a      	mov	r2, r5
   18482:	2008      	movs	r0, #8
   18484:	f7f8 ff66 	bl	11354 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   18488:	462a      	mov	r2, r5
   1848a:	4621      	mov	r1, r4
   1848c:	200b      	movs	r0, #11
   1848e:	f7f8 ff61 	bl	11354 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   18492:	462a      	mov	r2, r5
   18494:	4621      	mov	r1, r4
   18496:	4628      	mov	r0, r5
   18498:	f7f8 ff5c 	bl	11354 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1849c:	4620      	mov	r0, r4
   1849e:	b003      	add	sp, #12
   184a0:	bd30      	pop	{r4, r5, pc}
   184a2:	bf00      	nop
   184a4:	0001f233 	.word	0x0001f233

000184a8 <mpsl_low_prio_irq_handler>:
   184a8:	4801      	ldr	r0, [pc, #4]	; (184b0 <mpsl_low_prio_irq_handler+0x8>)
   184aa:	f001 bb17 	b.w	19adc <z_impl_k_sem_give>
   184ae:	bf00      	nop
   184b0:	2000060c 	.word	0x2000060c

000184b4 <signal_thread>:
{
   184b4:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
   184b6:	4d0f      	ldr	r5, [pc, #60]	; (184f4 <signal_thread+0x40>)
		__ASSERT_NO_MSG(errcode == 0);
   184b8:	4c0f      	ldr	r4, [pc, #60]	; (184f8 <signal_thread+0x44>)
   184ba:	f04f 32ff 	mov.w	r2, #4294967295
   184be:	f04f 33ff 	mov.w	r3, #4294967295
   184c2:	4628      	mov	r0, r5
   184c4:	f001 fb4e 	bl	19b64 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   184c8:	f04f 30ff 	mov.w	r0, #4294967295
   184cc:	f04f 31ff 	mov.w	r1, #4294967295
   184d0:	f7ff fa96 	bl	17a00 <multithreading_lock_acquire>
		__ASSERT_NO_MSG(errcode == 0);
   184d4:	b148      	cbz	r0, 184ea <signal_thread+0x36>
   184d6:	4909      	ldr	r1, [pc, #36]	; (184fc <signal_thread+0x48>)
   184d8:	4809      	ldr	r0, [pc, #36]	; (18500 <signal_thread+0x4c>)
   184da:	2346      	movs	r3, #70	; 0x46
   184dc:	4622      	mov	r2, r4
   184de:	f004 fa60 	bl	1c9a2 <printk>
   184e2:	2146      	movs	r1, #70	; 0x46
   184e4:	4620      	mov	r0, r4
   184e6:	f004 fcb6 	bl	1ce56 <assert_post_action>
		mpsl_low_priority_process();
   184ea:	f7f3 ff82 	bl	c3f2 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   184ee:	f7ff fa8f 	bl	17a10 <multithreading_lock_release>
	while (true) {
   184f2:	e7e2      	b.n	184ba <signal_thread+0x6>
   184f4:	2000060c 	.word	0x2000060c
   184f8:	00021212 	.word	0x00021212
   184fc:	0002123f 	.word	0x0002123f
   18500:	0001feb5 	.word	0x0001feb5

00018504 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   18504:	b530      	push	{r4, r5, lr}
   18506:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18508:	4d0f      	ldr	r5, [pc, #60]	; (18548 <mpsl_signal_thread_init+0x44>)
   1850a:	4910      	ldr	r1, [pc, #64]	; (1854c <mpsl_signal_thread_init+0x48>)
   1850c:	2200      	movs	r2, #0
   1850e:	2300      	movs	r3, #0
   18510:	e9cd 2306 	strd	r2, r3, [sp, #24]
   18514:	2400      	movs	r4, #0
   18516:	f06f 0309 	mvn.w	r3, #9
   1851a:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1851e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   18522:	4b0b      	ldr	r3, [pc, #44]	; (18550 <mpsl_signal_thread_init+0x4c>)
   18524:	9400      	str	r4, [sp, #0]
   18526:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1852a:	4628      	mov	r0, r5
   1852c:	f000 fe7a 	bl	19224 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   18530:	4908      	ldr	r1, [pc, #32]	; (18554 <mpsl_signal_thread_init+0x50>)
   18532:	4628      	mov	r0, r5
   18534:	f006 fed5 	bl	1f2e2 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   18538:	4622      	mov	r2, r4
   1853a:	2104      	movs	r1, #4
   1853c:	2019      	movs	r0, #25
   1853e:	f7f8 ff09 	bl	11354 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   18542:	4620      	mov	r0, r4
   18544:	b009      	add	sp, #36	; 0x24
   18546:	bd30      	pop	{r4, r5, pc}
   18548:	20001960 	.word	0x20001960
   1854c:	200036c0 	.word	0x200036c0
   18550:	000184b5 	.word	0x000184b5
   18554:	0002124c 	.word	0x0002124c

00018558 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   18558:	4b01      	ldr	r3, [pc, #4]	; (18560 <mpsl_hfclk_callback+0x8>)
   1855a:	2000      	movs	r0, #0
   1855c:	681b      	ldr	r3, [r3, #0]
   1855e:	4718      	bx	r3
   18560:	20001db4 	.word	0x20001db4

00018564 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   18564:	b510      	push	{r4, lr}
	switch (domain) {
   18566:	b130      	cbz	r0, 18576 <nrfx_clock_start+0x12>
   18568:	2801      	cmp	r0, #1
   1856a:	d10a      	bne.n	18582 <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1856c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   18570:	480b      	ldr	r0, [pc, #44]	; (185a0 <nrfx_clock_start+0x3c>)
   18572:	f7ea bf85 	b.w	3480 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   18576:	4b0b      	ldr	r3, [pc, #44]	; (185a4 <nrfx_clock_start+0x40>)
}
   18578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1857c:	681b      	ldr	r3, [r3, #0]
   1857e:	2001      	movs	r0, #1
   18580:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   18582:	4909      	ldr	r1, [pc, #36]	; (185a8 <nrfx_clock_start+0x44>)
   18584:	4a09      	ldr	r2, [pc, #36]	; (185ac <nrfx_clock_start+0x48>)
   18586:	480a      	ldr	r0, [pc, #40]	; (185b0 <nrfx_clock_start+0x4c>)
   18588:	231c      	movs	r3, #28
   1858a:	f004 fa0a 	bl	1c9a2 <printk>
   1858e:	4809      	ldr	r0, [pc, #36]	; (185b4 <nrfx_clock_start+0x50>)
   18590:	f004 fa07 	bl	1c9a2 <printk>
}
   18594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Not supported");
   18598:	4804      	ldr	r0, [pc, #16]	; (185ac <nrfx_clock_start+0x48>)
   1859a:	211c      	movs	r1, #28
   1859c:	f004 bc5b 	b.w	1ce56 <assert_post_action>
   185a0:	00018559 	.word	0x00018559
   185a4:	20001db4 	.word	0x20001db4
   185a8:	00021b83 	.word	0x00021b83
   185ac:	00021258 	.word	0x00021258
   185b0:	0001feb5 	.word	0x0001feb5
   185b4:	00021295 	.word	0x00021295

000185b8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   185b8:	b508      	push	{r3, lr}
	switch (domain) {
   185ba:	b1a0      	cbz	r0, 185e6 <nrfx_clock_stop+0x2e>
   185bc:	2801      	cmp	r0, #1
   185be:	d103      	bne.n	185c8 <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   185c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   185c4:	f7ea bf4e 	b.w	3464 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   185c8:	4907      	ldr	r1, [pc, #28]	; (185e8 <nrfx_clock_stop+0x30>)
   185ca:	4a08      	ldr	r2, [pc, #32]	; (185ec <nrfx_clock_stop+0x34>)
   185cc:	4808      	ldr	r0, [pc, #32]	; (185f0 <nrfx_clock_stop+0x38>)
   185ce:	232a      	movs	r3, #42	; 0x2a
   185d0:	f004 f9e7 	bl	1c9a2 <printk>
   185d4:	4807      	ldr	r0, [pc, #28]	; (185f4 <nrfx_clock_stop+0x3c>)
   185d6:	f004 f9e4 	bl	1c9a2 <printk>
}
   185da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Not supported");
   185de:	4803      	ldr	r0, [pc, #12]	; (185ec <nrfx_clock_stop+0x34>)
   185e0:	212a      	movs	r1, #42	; 0x2a
   185e2:	f004 bc38 	b.w	1ce56 <assert_post_action>
}
   185e6:	bd08      	pop	{r3, pc}
   185e8:	00021b83 	.word	0x00021b83
   185ec:	00021258 	.word	0x00021258
   185f0:	0001feb5 	.word	0x0001feb5
   185f4:	00021295 	.word	0x00021295

000185f8 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   185f8:	4b01      	ldr	r3, [pc, #4]	; (18600 <nrfx_clock_init+0x8>)
   185fa:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   185fc:	4801      	ldr	r0, [pc, #4]	; (18604 <nrfx_clock_init+0xc>)
   185fe:	4770      	bx	lr
   18600:	20001db4 	.word	0x20001db4
   18604:	0bad0000 	.word	0x0bad0000

00018608 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   18608:	4b04      	ldr	r3, [pc, #16]	; (1861c <nrf52_errata_108+0x14>)
   1860a:	6818      	ldr	r0, [r3, #0]
   1860c:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1860e:	bf04      	itt	eq
   18610:	4b03      	ldreq	r3, [pc, #12]	; (18620 <nrf52_errata_108+0x18>)
   18612:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   18614:	1f83      	subs	r3, r0, #6
   18616:	4258      	negs	r0, r3
   18618:	4158      	adcs	r0, r3
   1861a:	4770      	bx	lr
   1861c:	10000130 	.word	0x10000130
   18620:	f0000fe0 	.word	0xf0000fe0

00018624 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18624:	4b07      	ldr	r3, [pc, #28]	; (18644 <nrf52_errata_16+0x20>)
   18626:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18628:	2b06      	cmp	r3, #6
   1862a:	d109      	bne.n	18640 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1862c:	4b06      	ldr	r3, [pc, #24]	; (18648 <nrf52_errata_16+0x24>)
   1862e:	681b      	ldr	r3, [r3, #0]
   18630:	f3c3 1303 	ubfx	r3, r3, #4, #4
   18634:	3b03      	subs	r3, #3
   18636:	2b04      	cmp	r3, #4
   18638:	d802      	bhi.n	18640 <nrf52_errata_16+0x1c>
   1863a:	4a04      	ldr	r2, [pc, #16]	; (1864c <nrf52_errata_16+0x28>)
   1863c:	5cd0      	ldrb	r0, [r2, r3]
   1863e:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   18640:	2000      	movs	r0, #0
    #endif
}
   18642:	4770      	bx	lr
   18644:	f0000fe0 	.word	0xf0000fe0
   18648:	f0000fe8 	.word	0xf0000fe8
   1864c:	000212b4 	.word	0x000212b4

00018650 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   18650:	4a02      	ldr	r2, [pc, #8]	; (1865c <nvmc_wait+0xc>)
   18652:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   18656:	2b00      	cmp	r3, #0
   18658:	d0fb      	beq.n	18652 <nvmc_wait+0x2>
}
   1865a:	4770      	bx	lr
   1865c:	4001e000 	.word	0x4001e000

00018660 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   18660:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   18662:	f7ff ffd1 	bl	18608 <nrf52_errata_108>
   18666:	b128      	cbz	r0, 18674 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   18668:	4b81      	ldr	r3, [pc, #516]	; (18870 <SystemInit+0x210>)
   1866a:	4a82      	ldr	r2, [pc, #520]	; (18874 <SystemInit+0x214>)
   1866c:	681b      	ldr	r3, [r3, #0]
   1866e:	f3c3 2304 	ubfx	r3, r3, #8, #5
   18672:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   18674:	f7ff ffd6 	bl	18624 <nrf52_errata_16>
   18678:	b110      	cbz	r0, 18680 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1867a:	4b7f      	ldr	r3, [pc, #508]	; (18878 <SystemInit+0x218>)
   1867c:	4a7f      	ldr	r2, [pc, #508]	; (1887c <SystemInit+0x21c>)
   1867e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   18680:	f7ff ffc2 	bl	18608 <nrf52_errata_108>
   18684:	b128      	cbz	r0, 18692 <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   18686:	4b7e      	ldr	r3, [pc, #504]	; (18880 <SystemInit+0x220>)
   18688:	4a7e      	ldr	r2, [pc, #504]	; (18884 <SystemInit+0x224>)
   1868a:	681b      	ldr	r3, [r3, #0]
   1868c:	f3c3 3342 	ubfx	r3, r3, #13, #3
   18690:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   18692:	f7ff ffc7 	bl	18624 <nrf52_errata_16>
   18696:	b120      	cbz	r0, 186a2 <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   18698:	4a7b      	ldr	r2, [pc, #492]	; (18888 <SystemInit+0x228>)
   1869a:	68d3      	ldr	r3, [r2, #12]
   1869c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   186a0:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   186a2:	f7ff ffb1 	bl	18608 <nrf52_errata_108>
   186a6:	b140      	cbz	r0, 186ba <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   186a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   186ac:	2200      	movs	r2, #0
   186ae:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   186b2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   186b6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   186ba:	f7ff ffb3 	bl	18624 <nrf52_errata_16>
   186be:	b110      	cbz	r0, 186c6 <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   186c0:	4b72      	ldr	r3, [pc, #456]	; (1888c <SystemInit+0x22c>)
   186c2:	2203      	movs	r2, #3
   186c4:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   186c6:	f7ff ffad 	bl	18624 <nrf52_errata_16>
   186ca:	b140      	cbz	r0, 186de <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   186cc:	4b70      	ldr	r3, [pc, #448]	; (18890 <SystemInit+0x230>)
   186ce:	2205      	movs	r2, #5
   186d0:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   186d2:	2201      	movs	r2, #1
   186d4:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   186d6:	2200      	movs	r2, #0
   186d8:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   186da:	223f      	movs	r2, #63	; 0x3f
   186dc:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   186de:	4b6d      	ldr	r3, [pc, #436]	; (18894 <SystemInit+0x234>)
   186e0:	681a      	ldr	r2, [r3, #0]
   186e2:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   186e4:	bf0b      	itete	eq
   186e6:	4b6c      	ldreq	r3, [pc, #432]	; (18898 <SystemInit+0x238>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   186e8:	4b6c      	ldrne	r3, [pc, #432]	; (1889c <SystemInit+0x23c>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   186ea:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   186ec:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   186ee:	bf02      	ittt	eq
   186f0:	3308      	addeq	r3, #8
   186f2:	681b      	ldreq	r3, [r3, #0]
   186f4:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   186f8:	2a06      	cmp	r2, #6
   186fa:	d14d      	bne.n	18798 <SystemInit+0x138>
            {
                switch(var2)
   186fc:	3b03      	subs	r3, #3
   186fe:	2b04      	cmp	r3, #4
   18700:	d803      	bhi.n	1870a <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   18702:	4a67      	ldr	r2, [pc, #412]	; (188a0 <SystemInit+0x240>)
   18704:	5cd3      	ldrb	r3, [r2, r3]
   18706:	2b00      	cmp	r3, #0
   18708:	d046      	beq.n	18798 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1870a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1870e:	4b65      	ldr	r3, [pc, #404]	; (188a4 <SystemInit+0x244>)
   18710:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   18714:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   18718:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1871c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   18720:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   18724:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   18728:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1872c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   18730:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   18734:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   18738:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1873c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   18740:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   18744:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   18748:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1874c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   18750:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   18754:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   18758:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1875c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   18760:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   18764:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   18768:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1876c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   18770:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   18774:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   18778:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1877c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   18780:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   18784:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   18788:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1878c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   18790:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   18794:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   18798:	f7ff ff36 	bl	18608 <nrf52_errata_108>
   1879c:	b128      	cbz	r0, 187aa <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1879e:	4b42      	ldr	r3, [pc, #264]	; (188a8 <SystemInit+0x248>)
   187a0:	4a42      	ldr	r2, [pc, #264]	; (188ac <SystemInit+0x24c>)
   187a2:	681b      	ldr	r3, [r3, #0]
   187a4:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   187a8:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   187aa:	f7ff ff2d 	bl	18608 <nrf52_errata_108>
   187ae:	b148      	cbz	r0, 187c4 <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   187b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   187b4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   187b8:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   187ba:	bf44      	itt	mi
   187bc:	f06f 0201 	mvnmi.w	r2, #1
   187c0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   187c4:	4b33      	ldr	r3, [pc, #204]	; (18894 <SystemInit+0x234>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   187c6:	681b      	ldr	r3, [r3, #0]
   187c8:	2b06      	cmp	r3, #6
   187ca:	d120      	bne.n	1880e <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   187cc:	4b33      	ldr	r3, [pc, #204]	; (1889c <SystemInit+0x23c>)
   187ce:	681b      	ldr	r3, [r3, #0]
   187d0:	3b03      	subs	r3, #3
   187d2:	2b04      	cmp	r3, #4
   187d4:	d802      	bhi.n	187dc <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   187d6:	4a36      	ldr	r2, [pc, #216]	; (188b0 <SystemInit+0x250>)
   187d8:	5cd3      	ldrb	r3, [r2, r3]
   187da:	b143      	cbz	r3, 187ee <SystemInit+0x18e>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   187dc:	4a35      	ldr	r2, [pc, #212]	; (188b4 <SystemInit+0x254>)
   187de:	6813      	ldr	r3, [r2, #0]
   187e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   187e4:	6013      	str	r3, [r2, #0]
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   187e6:	4b2b      	ldr	r3, [pc, #172]	; (18894 <SystemInit+0x234>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   187e8:	681b      	ldr	r3, [r3, #0]
   187ea:	2b06      	cmp	r3, #6
   187ec:	d10f      	bne.n	1880e <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   187ee:	4b2b      	ldr	r3, [pc, #172]	; (1889c <SystemInit+0x23c>)
   187f0:	681b      	ldr	r3, [r3, #0]
   187f2:	3b03      	subs	r3, #3
   187f4:	2b04      	cmp	r3, #4
   187f6:	d802      	bhi.n	187fe <SystemInit+0x19e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   187f8:	4a2f      	ldr	r2, [pc, #188]	; (188b8 <SystemInit+0x258>)
   187fa:	5cd3      	ldrb	r3, [r2, r3]
   187fc:	b13b      	cbz	r3, 1880e <SystemInit+0x1ae>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   187fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   18802:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   18806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1880a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1880e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   18812:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   18816:	2a00      	cmp	r2, #0
   18818:	db03      	blt.n	18822 <SystemInit+0x1c2>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1881a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1881e:	2b00      	cmp	r3, #0
   18820:	da22      	bge.n	18868 <SystemInit+0x208>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   18822:	4926      	ldr	r1, [pc, #152]	; (188bc <SystemInit+0x25c>)
   18824:	2301      	movs	r3, #1
   18826:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1882a:	f7ff ff11 	bl	18650 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1882e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   18832:	2415      	movs	r4, #21
   18834:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   18838:	f7ff ff0a 	bl	18650 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1883c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   18840:	f7ff ff06 	bl	18650 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   18844:	2300      	movs	r3, #0
   18846:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1884a:	f7ff ff01 	bl	18650 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1884e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   18852:	491b      	ldr	r1, [pc, #108]	; (188c0 <SystemInit+0x260>)
   18854:	4b1b      	ldr	r3, [pc, #108]	; (188c4 <SystemInit+0x264>)
   18856:	68ca      	ldr	r2, [r1, #12]
   18858:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1885c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1885e:	60cb      	str	r3, [r1, #12]
   18860:	f3bf 8f4f 	dsb	sy
    __NOP();
   18864:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   18866:	e7fd      	b.n	18864 <SystemInit+0x204>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   18868:	4b17      	ldr	r3, [pc, #92]	; (188c8 <SystemInit+0x268>)
   1886a:	4a18      	ldr	r2, [pc, #96]	; (188cc <SystemInit+0x26c>)
   1886c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1886e:	bd10      	pop	{r4, pc}
   18870:	10000324 	.word	0x10000324
   18874:	40013540 	.word	0x40013540
   18878:	4007c074 	.word	0x4007c074
   1887c:	baadf00d 	.word	0xbaadf00d
   18880:	10000244 	.word	0x10000244
   18884:	4000053c 	.word	0x4000053c
   18888:	e000edf0 	.word	0xe000edf0
   1888c:	400005a0 	.word	0x400005a0
   18890:	40005610 	.word	0x40005610
   18894:	10000130 	.word	0x10000130
   18898:	f0000fe0 	.word	0xf0000fe0
   1889c:	10000134 	.word	0x10000134
   188a0:	000212a5 	.word	0x000212a5
   188a4:	4000c000 	.word	0x4000c000
   188a8:	10000258 	.word	0x10000258
   188ac:	40000ee4 	.word	0x40000ee4
   188b0:	000212aa 	.word	0x000212aa
   188b4:	4000173c 	.word	0x4000173c
   188b8:	000212af 	.word	0x000212af
   188bc:	4001e000 	.word	0x4001e000
   188c0:	e000ed00 	.word	0xe000ed00
   188c4:	05fa0004 	.word	0x05fa0004
   188c8:	200004f4 	.word	0x200004f4
   188cc:	03d09000 	.word	0x03d09000

000188d0 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   188d0:	2301      	movs	r3, #1
   188d2:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   188d6:	f010 0fff 	tst.w	r0, #255	; 0xff
   188da:	d012      	beq.n	18902 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   188dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   188e0:	f3ef 8111 	mrs	r1, BASEPRI
   188e4:	f383 8812 	msr	BASEPRI_MAX, r3
   188e8:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   188ec:	4a06      	ldr	r2, [pc, #24]	; (18908 <nrfx_gpiote_channel_free+0x38>)
   188ee:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   188f0:	ea23 0000 	bic.w	r0, r3, r0
   188f4:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   188f6:	f381 8811 	msr	BASEPRI, r1
   188fa:	f3bf 8f6f 	isb	sy
   188fe:	4803      	ldr	r0, [pc, #12]	; (1890c <nrfx_gpiote_channel_free+0x3c>)
   18900:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   18902:	4803      	ldr	r0, [pc, #12]	; (18910 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18904:	4770      	bx	lr
   18906:	bf00      	nop
   18908:	20001db8 	.word	0x20001db8
   1890c:	0bad0000 	.word	0x0bad0000
   18910:	0bad0004 	.word	0x0bad0004

00018914 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   18914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18918:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1891a:	f8df e060 	ldr.w	lr, [pc, #96]	; 1897c <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1891e:	4816      	ldr	r0, [pc, #88]	; (18978 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   18920:	f8df 805c 	ldr.w	r8, [pc, #92]	; 18980 <nrfx_gpiote_channel_alloc+0x6c>
{
   18924:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   18926:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   18928:	2601      	movs	r6, #1
   1892a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1892c:	f04f 0140 	mov.w	r1, #64	; 0x40
   18930:	f3ef 8c11 	mrs	ip, BASEPRI
   18934:	f381 8812 	msr	BASEPRI_MAX, r1
   18938:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1893c:	fa22 f103 	lsr.w	r1, r2, r3
   18940:	07c9      	lsls	r1, r1, #31
   18942:	d50a      	bpl.n	1895a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   18944:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   18948:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1894c:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   1894e:	bf01      	itttt	eq
   18950:	4339      	orreq	r1, r7
   18952:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
   18956:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   18958:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1895a:	f38c 8811 	msr	BASEPRI, ip
   1895e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   18962:	4540      	cmp	r0, r8
   18964:	d005      	beq.n	18972 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   18966:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1896a:	439a      	bics	r2, r3
   1896c:	f104 0401 	add.w	r4, r4, #1
   18970:	d1db      	bne.n	1892a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18976:	bf00      	nop
   18978:	0bad0002 	.word	0x0bad0002
   1897c:	20001db8 	.word	0x20001db8
   18980:	0bad0000 	.word	0x0bad0000

00018984 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   18984:	4b18      	ldr	r3, [pc, #96]	; (189e8 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   18986:	f8df c06c 	ldr.w	ip, [pc, #108]	; 189f4 <nrfx_ppi_channel_alloc+0x70>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1898a:	681b      	ldr	r3, [r3, #0]
{
   1898c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   18990:	43db      	mvns	r3, r3
{
   18992:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   18994:	4f15      	ldr	r7, [pc, #84]	; (189ec <nrfx_ppi_channel_alloc+0x68>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   18996:	4816      	ldr	r0, [pc, #88]	; (189f0 <nrfx_ppi_channel_alloc+0x6c>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   18998:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1899c:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   1899e:	f04f 0e01 	mov.w	lr, #1
   189a2:	b2e6      	uxtb	r6, r4
   189a4:	b90b      	cbnz	r3, 189aa <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   189a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   189aa:	f04f 0240 	mov.w	r2, #64	; 0x40
   189ae:	f3ef 8811 	mrs	r8, BASEPRI
   189b2:	f382 8812 	msr	BASEPRI_MAX, r2
   189b6:	f3bf 8f6f 	isb	sy
   189ba:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   189be:	421a      	tst	r2, r3
   189c0:	d006      	beq.n	189d0 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   189c2:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   189c4:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   189c6:	bf01      	itttt	eq
   189c8:	4311      	orreq	r1, r2
   189ca:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   189cc:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   189ce:	4660      	moveq	r0, ip
	__asm__ volatile(
   189d0:	f388 8811 	msr	BASEPRI, r8
   189d4:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   189d8:	4560      	cmp	r0, ip
   189da:	f104 0401 	add.w	r4, r4, #1
   189de:	d0e2      	beq.n	189a6 <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   189e0:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   189e4:	e7dd      	b.n	189a2 <nrfx_ppi_channel_alloc+0x1e>
   189e6:	bf00      	nop
   189e8:	0001fd54 	.word	0x0001fd54
   189ec:	20001e08 	.word	0x20001e08
   189f0:	0bad0002 	.word	0x0bad0002
   189f4:	0bad0000 	.word	0x0bad0000

000189f8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   189f8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   189fa:	4c14      	ldr	r4, [pc, #80]	; (18a4c <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   189fc:	4a14      	ldr	r2, [pc, #80]	; (18a50 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   189fe:	4915      	ldr	r1, [pc, #84]	; (18a54 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   18a00:	2303      	movs	r3, #3
   18a02:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   18a04:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   18a06:	4b14      	ldr	r3, [pc, #80]	; (18a58 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   18a08:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   18a0a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   18a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   18a10:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   18a12:	2300      	movs	r3, #0
   18a14:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   18a16:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   18a18:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   18a1a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   18a1c:	4a0f      	ldr	r2, [pc, #60]	; (18a5c <_DoInit+0x64>)
   18a1e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   18a20:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   18a22:	2210      	movs	r2, #16
   18a24:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   18a26:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   18a28:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   18a2a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   18a2c:	f006 fdd7 	bl	1f5de <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   18a30:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   18a34:	490a      	ldr	r1, [pc, #40]	; (18a60 <_DoInit+0x68>)
   18a36:	4620      	mov	r0, r4
   18a38:	f006 fdd1 	bl	1f5de <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   18a3c:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   18a40:	2320      	movs	r3, #32
   18a42:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   18a44:	f3bf 8f5f 	dmb	sy
}
   18a48:	bd10      	pop	{r4, pc}
   18a4a:	bf00      	nop
   18a4c:	20001e0c 	.word	0x20001e0c
   18a50:	000212b9 	.word	0x000212b9
   18a54:	000212c2 	.word	0x000212c2
   18a58:	20002443 	.word	0x20002443
   18a5c:	20002433 	.word	0x20002433
   18a60:	000212c6 	.word	0x000212c6

00018a64 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18a64:	4b0e      	ldr	r3, [pc, #56]	; (18aa0 <z_sys_init_run_level+0x3c>)
{
   18a66:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18a68:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   18a6c:	3001      	adds	r0, #1
   18a6e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   18a72:	42a6      	cmp	r6, r4
   18a74:	d800      	bhi.n	18a78 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   18a76:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   18a78:	e9d4 3500 	ldrd	r3, r5, [r4]
   18a7c:	4628      	mov	r0, r5
   18a7e:	4798      	blx	r3
		if (dev != NULL) {
   18a80:	b165      	cbz	r5, 18a9c <z_sys_init_run_level+0x38>
			if (rc != 0) {
   18a82:	68eb      	ldr	r3, [r5, #12]
   18a84:	b130      	cbz	r0, 18a94 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   18a86:	2800      	cmp	r0, #0
   18a88:	bfb8      	it	lt
   18a8a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   18a8c:	28ff      	cmp	r0, #255	; 0xff
   18a8e:	bfa8      	it	ge
   18a90:	20ff      	movge	r0, #255	; 0xff
   18a92:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   18a94:	785a      	ldrb	r2, [r3, #1]
   18a96:	f042 0201 	orr.w	r2, r2, #1
   18a9a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18a9c:	3408      	adds	r4, #8
   18a9e:	e7e8      	b.n	18a72 <z_sys_init_run_level+0xe>
   18aa0:	0001fd58 	.word	0x0001fd58

00018aa4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   18aa4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   18aa6:	4605      	mov	r5, r0
   18aa8:	b910      	cbnz	r0, 18ab0 <z_impl_device_get_binding+0xc>
		return NULL;
   18aaa:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   18aac:	4620      	mov	r0, r4
   18aae:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   18ab0:	7803      	ldrb	r3, [r0, #0]
   18ab2:	2b00      	cmp	r3, #0
   18ab4:	d0f9      	beq.n	18aaa <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   18ab6:	4a0f      	ldr	r2, [pc, #60]	; (18af4 <z_impl_device_get_binding+0x50>)
   18ab8:	4c0f      	ldr	r4, [pc, #60]	; (18af8 <z_impl_device_get_binding+0x54>)
   18aba:	4616      	mov	r6, r2
   18abc:	4294      	cmp	r4, r2
   18abe:	d108      	bne.n	18ad2 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   18ac0:	4c0d      	ldr	r4, [pc, #52]	; (18af8 <z_impl_device_get_binding+0x54>)
   18ac2:	42b4      	cmp	r4, r6
   18ac4:	d0f1      	beq.n	18aaa <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   18ac6:	4620      	mov	r0, r4
   18ac8:	f006 fbf3 	bl	1f2b2 <z_device_ready>
   18acc:	b950      	cbnz	r0, 18ae4 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   18ace:	3418      	adds	r4, #24
   18ad0:	e7f7      	b.n	18ac2 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   18ad2:	4620      	mov	r0, r4
   18ad4:	f006 fbed 	bl	1f2b2 <z_device_ready>
   18ad8:	b110      	cbz	r0, 18ae0 <z_impl_device_get_binding+0x3c>
   18ada:	6823      	ldr	r3, [r4, #0]
   18adc:	42ab      	cmp	r3, r5
   18ade:	d0e5      	beq.n	18aac <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   18ae0:	3418      	adds	r4, #24
   18ae2:	e7eb      	b.n	18abc <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   18ae4:	6821      	ldr	r1, [r4, #0]
   18ae6:	4628      	mov	r0, r5
   18ae8:	f7f3 fb6c 	bl	c1c4 <strcmp>
   18aec:	2800      	cmp	r0, #0
   18aee:	d1ee      	bne.n	18ace <z_impl_device_get_binding+0x2a>
   18af0:	e7dc      	b.n	18aac <z_impl_device_get_binding+0x8>
   18af2:	bf00      	nop
   18af4:	0001f728 	.word	0x0001f728
   18af8:	0001f6b0 	.word	0x0001f6b0

00018afc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   18afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18afe:	4604      	mov	r4, r0
   18b00:	460e      	mov	r6, r1
	__asm__ volatile(
   18b02:	f04f 0340 	mov.w	r3, #64	; 0x40
   18b06:	f3ef 8711 	mrs	r7, BASEPRI
   18b0a:	f383 8812 	msr	BASEPRI_MAX, r3
   18b0e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   18b12:	f002 fe43 	bl	1b79c <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   18b16:	4631      	mov	r1, r6
   18b18:	4605      	mov	r5, r0
   18b1a:	4620      	mov	r0, r4
   18b1c:	f006 fb7e 	bl	1f21c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   18b20:	2c04      	cmp	r4, #4
   18b22:	d10c      	bne.n	18b3e <z_fatal_error+0x42>
   18b24:	490a      	ldr	r1, [pc, #40]	; (18b50 <z_fatal_error+0x54>)
   18b26:	4a0b      	ldr	r2, [pc, #44]	; (18b54 <z_fatal_error+0x58>)
   18b28:	480b      	ldr	r0, [pc, #44]	; (18b58 <z_fatal_error+0x5c>)
   18b2a:	238f      	movs	r3, #143	; 0x8f
   18b2c:	f003 ff39 	bl	1c9a2 <printk>
   18b30:	480a      	ldr	r0, [pc, #40]	; (18b5c <z_fatal_error+0x60>)
   18b32:	f003 ff36 	bl	1c9a2 <printk>
   18b36:	4807      	ldr	r0, [pc, #28]	; (18b54 <z_fatal_error+0x58>)
   18b38:	218f      	movs	r1, #143	; 0x8f
   18b3a:	f004 f98c 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   18b3e:	f387 8811 	msr	BASEPRI, r7
   18b42:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   18b46:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   18b48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   18b4c:	f7f8 bf06 	b.w	1195c <z_impl_k_thread_abort>
   18b50:	000212ef 	.word	0x000212ef
   18b54:	000212cd 	.word	0x000212cd
   18b58:	0001feb5 	.word	0x0001feb5
   18b5c:	0002130c 	.word	0x0002130c

00018b60 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   18b60:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   18b62:	2300      	movs	r3, #0
{
   18b64:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   18b66:	2201      	movs	r2, #1
   18b68:	e9cd 2304 	strd	r2, r3, [sp, #16]
   18b6c:	220f      	movs	r2, #15
   18b6e:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
   18b72:	4c0d      	ldr	r4, [pc, #52]	; (18ba8 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   18b74:	4a0d      	ldr	r2, [pc, #52]	; (18bac <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   18b76:	9301      	str	r3, [sp, #4]
   18b78:	490d      	ldr	r1, [pc, #52]	; (18bb0 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   18b7a:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
   18b7c:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   18b80:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   18b84:	f44f 75b0 	mov.w	r5, #352	; 0x160
   18b88:	9300      	str	r3, [sp, #0]
   18b8a:	fb05 1100 	mla	r1, r5, r0, r1
   18b8e:	4b09      	ldr	r3, [pc, #36]	; (18bb4 <init_idle_thread+0x54>)
   18b90:	f44f 72a0 	mov.w	r2, #320	; 0x140
   18b94:	4620      	mov	r0, r4
   18b96:	f000 fae1 	bl	1915c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18b9a:	7b63      	ldrb	r3, [r4, #13]
   18b9c:	f023 0304 	bic.w	r3, r3, #4
   18ba0:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   18ba2:	b007      	add	sp, #28
   18ba4:	bd30      	pop	{r4, r5, pc}
   18ba6:	bf00      	nop
   18ba8:	200019e0 	.word	0x200019e0
   18bac:	20001eb4 	.word	0x20001eb4
   18bb0:	20003f00 	.word	0x20003f00
   18bb4:	0001942d 	.word	0x0001942d

00018bb8 <bg_thread_main>:
{
   18bb8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   18bba:	4b0a      	ldr	r3, [pc, #40]	; (18be4 <bg_thread_main+0x2c>)
   18bbc:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   18bbe:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   18bc0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   18bc2:	f7ff ff4f 	bl	18a64 <z_sys_init_run_level>
	boot_banner();
   18bc6:	f003 feb7 	bl	1c938 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   18bca:	2003      	movs	r0, #3
   18bcc:	f7ff ff4a 	bl	18a64 <z_sys_init_run_level>
	z_init_static_threads();
   18bd0:	f000 fb76 	bl	192c0 <z_init_static_threads>
	main();
   18bd4:	f7f6 ff48 	bl	fa68 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   18bd8:	4a03      	ldr	r2, [pc, #12]	; (18be8 <bg_thread_main+0x30>)
   18bda:	7b13      	ldrb	r3, [r2, #12]
   18bdc:	f023 0301 	bic.w	r3, r3, #1
   18be0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   18be2:	bd08      	pop	{r3, pc}
   18be4:	20002843 	.word	0x20002843
   18be8:	20001a60 	.word	0x20001a60

00018bec <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   18bec:	4802      	ldr	r0, [pc, #8]	; (18bf8 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   18bee:	4a03      	ldr	r2, [pc, #12]	; (18bfc <z_bss_zero+0x10>)
   18bf0:	2100      	movs	r1, #0
   18bf2:	1a12      	subs	r2, r2, r0
   18bf4:	f006 bceb 	b.w	1f5ce <memset>
   18bf8:	20000748 	.word	0x20000748
   18bfc:	20002844 	.word	0x20002844

00018c00 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   18c00:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   18c02:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 18ce0 <z_cstart+0xe0>
   18c06:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   18c08:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   18c0c:	4d2e      	ldr	r5, [pc, #184]	; (18cc8 <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   18c0e:	4e2f      	ldr	r6, [pc, #188]	; (18ccc <z_cstart+0xcc>)
   18c10:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18c12:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 18ce4 <z_cstart+0xe4>
   18c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   18c1a:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18c1c:	23e0      	movs	r3, #224	; 0xe0
   18c1e:	2400      	movs	r4, #0
   18c20:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   18c24:	2320      	movs	r3, #32
   18c26:	77eb      	strb	r3, [r5, #31]
   18c28:	762c      	strb	r4, [r5, #24]
   18c2a:	766c      	strb	r4, [r5, #25]
   18c2c:	76ac      	strb	r4, [r5, #26]
   18c2e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   18c32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   18c34:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   18c38:	626b      	str	r3, [r5, #36]	; 0x24
   18c3a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   18c3e:	f7f8 fe03 	bl	11848 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   18c42:	f7f8 fb37 	bl	112b4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   18c46:	f04f 33ff 	mov.w	r3, #4294967295
   18c4a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   18c4c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   18c4e:	f7f8 ff5f 	bl	11b10 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   18c52:	f7f8 fe95 	bl	11980 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   18c56:	f240 1301 	movw	r3, #257	; 0x101
   18c5a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   18c5e:	ab06      	add	r3, sp, #24
   18c60:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   18c62:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   18c66:	f006 fb23 	bl	1f2b0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   18c6a:	4620      	mov	r0, r4
   18c6c:	f7ff fefa 	bl	18a64 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   18c70:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   18c72:	4d17      	ldr	r5, [pc, #92]	; (18cd0 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   18c74:	f7ff fef6 	bl	18a64 <z_sys_init_run_level>
	z_sched_init();
   18c78:	f002 fbfa 	bl	1b470 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18c7c:	4b15      	ldr	r3, [pc, #84]	; (18cd4 <z_cstart+0xd4>)
   18c7e:	9305      	str	r3, [sp, #20]
   18c80:	2301      	movs	r3, #1
   18c82:	4915      	ldr	r1, [pc, #84]	; (18cd8 <z_cstart+0xd8>)
   18c84:	9400      	str	r4, [sp, #0]
   18c86:	e9cd 4303 	strd	r4, r3, [sp, #12]
   18c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18c8e:	464b      	mov	r3, r9
   18c90:	e9cd 4401 	strd	r4, r4, [sp, #4]
   18c94:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   18c96:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18c98:	f000 fa60 	bl	1915c <z_setup_new_thread>
   18c9c:	7b6a      	ldrb	r2, [r5, #13]
   18c9e:	f022 0204 	bic.w	r2, r2, #4
   18ca2:	736a      	strb	r2, [r5, #13]
   18ca4:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
   18ca6:	4628      	mov	r0, r5
   18ca8:	f002 f82e 	bl	1ad08 <z_ready_thread>
		init_idle_thread(i);
   18cac:	4620      	mov	r0, r4
   18cae:	f7ff ff57 	bl	18b60 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   18cb2:	4b0a      	ldr	r3, [pc, #40]	; (18cdc <z_cstart+0xdc>)
   18cb4:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   18cb6:	464a      	mov	r2, r9
   18cb8:	4639      	mov	r1, r7
   18cba:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   18cbc:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   18cbe:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   18cc2:	f7f8 fc37 	bl	11534 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   18cc6:	bf00      	nop
   18cc8:	e000ed00 	.word	0xe000ed00
   18ccc:	20001eb4 	.word	0x20001eb4
   18cd0:	20001a60 	.word	0x20001a60
   18cd4:	00021341 	.word	0x00021341
   18cd8:	20003ae0 	.word	0x20003ae0
   18cdc:	200019e0 	.word	0x200019e0
   18ce0:	20004880 	.word	0x20004880
   18ce4:	00018bb9 	.word	0x00018bb9

00018ce8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   18ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   18cea:	4d0f      	ldr	r5, [pc, #60]	; (18d28 <statics_init+0x40>)
   18cec:	4c0f      	ldr	r4, [pc, #60]	; (18d2c <statics_init+0x44>)
   18cee:	4e10      	ldr	r6, [pc, #64]	; (18d30 <statics_init+0x48>)
   18cf0:	462f      	mov	r7, r5
   18cf2:	42ac      	cmp	r4, r5
   18cf4:	d90c      	bls.n	18d10 <statics_init+0x28>
   18cf6:	490f      	ldr	r1, [pc, #60]	; (18d34 <statics_init+0x4c>)
   18cf8:	480f      	ldr	r0, [pc, #60]	; (18d38 <statics_init+0x50>)
   18cfa:	2318      	movs	r3, #24
   18cfc:	4632      	mov	r2, r6
   18cfe:	f003 fe50 	bl	1c9a2 <printk>
   18d02:	480e      	ldr	r0, [pc, #56]	; (18d3c <statics_init+0x54>)
   18d04:	f003 fe4d 	bl	1c9a2 <printk>
   18d08:	2118      	movs	r1, #24
   18d0a:	4630      	mov	r0, r6
   18d0c:	f004 f8a3 	bl	1ce56 <assert_post_action>
   18d10:	42bc      	cmp	r4, r7
   18d12:	d301      	bcc.n	18d18 <statics_init+0x30>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   18d14:	2000      	movs	r0, #0
   18d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   18d18:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   18d1c:	4620      	mov	r0, r4
   18d1e:	f006 fad2 	bl	1f2c6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   18d22:	3418      	adds	r4, #24
   18d24:	e7e5      	b.n	18cf2 <statics_init+0xa>
   18d26:	bf00      	nop
   18d28:	200005cc 	.word	0x200005cc
   18d2c:	200005cc 	.word	0x200005cc
   18d30:	00021346 	.word	0x00021346
   18d34:	00021368 	.word	0x00021368
   18d38:	0001feb5 	.word	0x0001feb5
   18d3c:	0002096c 	.word	0x0002096c

00018d40 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   18d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d44:	b087      	sub	sp, #28
   18d46:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   18d4a:	4606      	mov	r6, r0
   18d4c:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18d4e:	4640      	mov	r0, r8
   18d50:	4649      	mov	r1, r9
{
   18d52:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18d54:	f006 fb98 	bl	1f488 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   18d58:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18d5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   18d60:	f04f 0340 	mov.w	r3, #64	; 0x40
   18d64:	f3ef 8511 	mrs	r5, BASEPRI
   18d68:	f383 8812 	msr	BASEPRI_MAX, r3
   18d6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18d70:	4620      	mov	r0, r4
   18d72:	f000 fb35 	bl	193e0 <z_spin_lock_valid>
   18d76:	b968      	cbnz	r0, 18d94 <k_heap_aligned_alloc+0x54>
   18d78:	4a3f      	ldr	r2, [pc, #252]	; (18e78 <k_heap_aligned_alloc+0x138>)
   18d7a:	4940      	ldr	r1, [pc, #256]	; (18e7c <k_heap_aligned_alloc+0x13c>)
   18d7c:	4840      	ldr	r0, [pc, #256]	; (18e80 <k_heap_aligned_alloc+0x140>)
   18d7e:	2381      	movs	r3, #129	; 0x81
   18d80:	f003 fe0f 	bl	1c9a2 <printk>
   18d84:	483f      	ldr	r0, [pc, #252]	; (18e84 <k_heap_aligned_alloc+0x144>)
   18d86:	4621      	mov	r1, r4
   18d88:	f003 fe0b 	bl	1c9a2 <printk>
   18d8c:	483a      	ldr	r0, [pc, #232]	; (18e78 <k_heap_aligned_alloc+0x138>)
   18d8e:	2181      	movs	r1, #129	; 0x81
   18d90:	f004 f861 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   18d94:	4620      	mov	r0, r4
   18d96:	f000 fb41 	bl	1941c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   18d9a:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   18d9e:	b17b      	cbz	r3, 18dc0 <k_heap_aligned_alloc+0x80>
   18da0:	ea58 0309 	orrs.w	r3, r8, r9
   18da4:	d00c      	beq.n	18dc0 <k_heap_aligned_alloc+0x80>
   18da6:	4938      	ldr	r1, [pc, #224]	; (18e88 <k_heap_aligned_alloc+0x148>)
   18da8:	4a38      	ldr	r2, [pc, #224]	; (18e8c <k_heap_aligned_alloc+0x14c>)
   18daa:	4835      	ldr	r0, [pc, #212]	; (18e80 <k_heap_aligned_alloc+0x140>)
   18dac:	2349      	movs	r3, #73	; 0x49
   18dae:	f003 fdf8 	bl	1c9a2 <printk>
   18db2:	4837      	ldr	r0, [pc, #220]	; (18e90 <k_heap_aligned_alloc+0x150>)
   18db4:	f003 fdf5 	bl	1c9a2 <printk>
   18db8:	4834      	ldr	r0, [pc, #208]	; (18e8c <k_heap_aligned_alloc+0x14c>)
   18dba:	2149      	movs	r1, #73	; 0x49
   18dbc:	f004 f84b 	bl	1ce56 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18dc0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 18e78 <k_heap_aligned_alloc+0x138>
   18dc4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 18e7c <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   18dc8:	4652      	mov	r2, sl
   18dca:	4659      	mov	r1, fp
   18dcc:	4630      	mov	r0, r6
   18dce:	f7f7 f9d3 	bl	10178 <sys_heap_aligned_alloc>
   18dd2:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
   18dd4:	f003 f906 	bl	1bfe4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   18dd8:	b1cf      	cbz	r7, 18e0e <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18dda:	4620      	mov	r0, r4
   18ddc:	f000 fb0e 	bl	193fc <z_spin_unlock_valid>
   18de0:	b968      	cbnz	r0, 18dfe <k_heap_aligned_alloc+0xbe>
   18de2:	4a25      	ldr	r2, [pc, #148]	; (18e78 <k_heap_aligned_alloc+0x138>)
   18de4:	492b      	ldr	r1, [pc, #172]	; (18e94 <k_heap_aligned_alloc+0x154>)
   18de6:	4826      	ldr	r0, [pc, #152]	; (18e80 <k_heap_aligned_alloc+0x140>)
   18de8:	23ac      	movs	r3, #172	; 0xac
   18dea:	f003 fdda 	bl	1c9a2 <printk>
   18dee:	482a      	ldr	r0, [pc, #168]	; (18e98 <k_heap_aligned_alloc+0x158>)
   18df0:	4621      	mov	r1, r4
   18df2:	f003 fdd6 	bl	1c9a2 <printk>
   18df6:	4820      	ldr	r0, [pc, #128]	; (18e78 <k_heap_aligned_alloc+0x138>)
   18df8:	21ac      	movs	r1, #172	; 0xac
   18dfa:	f004 f82c 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   18dfe:	f385 8811 	msr	BASEPRI, r5
   18e02:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   18e06:	4638      	mov	r0, r7
   18e08:	b007      	add	sp, #28
   18e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   18e0e:	9b04      	ldr	r3, [sp, #16]
   18e10:	1a1b      	subs	r3, r3, r0
   18e12:	9302      	str	r3, [sp, #8]
   18e14:	9b05      	ldr	r3, [sp, #20]
   18e16:	eb63 0301 	sbc.w	r3, r3, r1
   18e1a:	9303      	str	r3, [sp, #12]
   18e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18e20:	2a01      	cmp	r2, #1
   18e22:	f173 0300 	sbcs.w	r3, r3, #0
   18e26:	dbd8      	blt.n	18dda <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   18e28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18e2c:	4629      	mov	r1, r5
   18e2e:	e9cd 2300 	strd	r2, r3, [sp]
   18e32:	4620      	mov	r0, r4
   18e34:	f106 020c 	add.w	r2, r6, #12
   18e38:	f002 f918 	bl	1b06c <z_pend_curr>
	__asm__ volatile(
   18e3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18e40:	f3ef 8511 	mrs	r5, BASEPRI
   18e44:	f383 8812 	msr	BASEPRI_MAX, r3
   18e48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18e4c:	4620      	mov	r0, r4
   18e4e:	f000 fac7 	bl	193e0 <z_spin_lock_valid>
   18e52:	b968      	cbnz	r0, 18e70 <k_heap_aligned_alloc+0x130>
   18e54:	480a      	ldr	r0, [pc, #40]	; (18e80 <k_heap_aligned_alloc+0x140>)
   18e56:	2381      	movs	r3, #129	; 0x81
   18e58:	4642      	mov	r2, r8
   18e5a:	4649      	mov	r1, r9
   18e5c:	f003 fda1 	bl	1c9a2 <printk>
   18e60:	4808      	ldr	r0, [pc, #32]	; (18e84 <k_heap_aligned_alloc+0x144>)
   18e62:	4621      	mov	r1, r4
   18e64:	f003 fd9d 	bl	1c9a2 <printk>
   18e68:	2181      	movs	r1, #129	; 0x81
   18e6a:	4640      	mov	r0, r8
   18e6c:	f003 fff3 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   18e70:	4620      	mov	r0, r4
   18e72:	f000 fad3 	bl	1941c <z_spin_lock_set_owner>
	return k;
   18e76:	e7a7      	b.n	18dc8 <k_heap_aligned_alloc+0x88>
   18e78:	0001ff75 	.word	0x0001ff75
   18e7c:	0001ffc7 	.word	0x0001ffc7
   18e80:	0001feb5 	.word	0x0001feb5
   18e84:	0001ffdc 	.word	0x0001ffdc
   18e88:	0002137e 	.word	0x0002137e
   18e8c:	00021346 	.word	0x00021346
   18e90:	00020d40 	.word	0x00020d40
   18e94:	0001ff9b 	.word	0x0001ff9b
   18e98:	0001ffb2 	.word	0x0001ffb2

00018e9c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   18e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18e9e:	4605      	mov	r5, r0
   18ea0:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   18ea2:	f100 0414 	add.w	r4, r0, #20
   18ea6:	f04f 0340 	mov.w	r3, #64	; 0x40
   18eaa:	f3ef 8711 	mrs	r7, BASEPRI
   18eae:	f383 8812 	msr	BASEPRI_MAX, r3
   18eb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18eb6:	4620      	mov	r0, r4
   18eb8:	f000 fa92 	bl	193e0 <z_spin_lock_valid>
   18ebc:	b968      	cbnz	r0, 18eda <k_heap_free+0x3e>
   18ebe:	4a1b      	ldr	r2, [pc, #108]	; (18f2c <k_heap_free+0x90>)
   18ec0:	491b      	ldr	r1, [pc, #108]	; (18f30 <k_heap_free+0x94>)
   18ec2:	481c      	ldr	r0, [pc, #112]	; (18f34 <k_heap_free+0x98>)
   18ec4:	2381      	movs	r3, #129	; 0x81
   18ec6:	f003 fd6c 	bl	1c9a2 <printk>
   18eca:	481b      	ldr	r0, [pc, #108]	; (18f38 <k_heap_free+0x9c>)
   18ecc:	4621      	mov	r1, r4
   18ece:	f003 fd68 	bl	1c9a2 <printk>
   18ed2:	4816      	ldr	r0, [pc, #88]	; (18f2c <k_heap_free+0x90>)
   18ed4:	2181      	movs	r1, #129	; 0x81
   18ed6:	f003 ffbe 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   18eda:	4620      	mov	r0, r4
   18edc:	f000 fa9e 	bl	1941c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   18ee0:	4628      	mov	r0, r5
   18ee2:	4631      	mov	r1, r6
   18ee4:	f7f7 f8f2 	bl	100cc <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   18ee8:	f105 000c 	add.w	r0, r5, #12
   18eec:	f006 fab4 	bl	1f458 <z_unpend_all>
   18ef0:	b128      	cbz	r0, 18efe <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   18ef2:	4639      	mov	r1, r7
   18ef4:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   18ef6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   18efa:	f001 bc65 	b.w	1a7c8 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18efe:	4620      	mov	r0, r4
   18f00:	f000 fa7c 	bl	193fc <z_spin_unlock_valid>
   18f04:	b968      	cbnz	r0, 18f22 <k_heap_free+0x86>
   18f06:	4a09      	ldr	r2, [pc, #36]	; (18f2c <k_heap_free+0x90>)
   18f08:	490c      	ldr	r1, [pc, #48]	; (18f3c <k_heap_free+0xa0>)
   18f0a:	480a      	ldr	r0, [pc, #40]	; (18f34 <k_heap_free+0x98>)
   18f0c:	23ac      	movs	r3, #172	; 0xac
   18f0e:	f003 fd48 	bl	1c9a2 <printk>
   18f12:	480b      	ldr	r0, [pc, #44]	; (18f40 <k_heap_free+0xa4>)
   18f14:	4621      	mov	r1, r4
   18f16:	f003 fd44 	bl	1c9a2 <printk>
   18f1a:	4804      	ldr	r0, [pc, #16]	; (18f2c <k_heap_free+0x90>)
   18f1c:	21ac      	movs	r1, #172	; 0xac
   18f1e:	f003 ff9a 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   18f22:	f387 8811 	msr	BASEPRI, r7
   18f26:	f3bf 8f6f 	isb	sy
}
   18f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18f2c:	0001ff75 	.word	0x0001ff75
   18f30:	0001ffc7 	.word	0x0001ffc7
   18f34:	0001feb5 	.word	0x0001feb5
   18f38:	0001ffdc 	.word	0x0001ffdc
   18f3c:	0001ff9b 	.word	0x0001ff9b
   18f40:	0001ffb2 	.word	0x0001ffb2

00018f44 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   18f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18f48:	4d16      	ldr	r5, [pc, #88]	; (18fa4 <init_mem_slab_module+0x60>)
   18f4a:	4c17      	ldr	r4, [pc, #92]	; (18fa8 <init_mem_slab_module+0x64>)
   18f4c:	4e17      	ldr	r6, [pc, #92]	; (18fac <init_mem_slab_module+0x68>)
   18f4e:	46a8      	mov	r8, r5
   18f50:	42ac      	cmp	r4, r5
   18f52:	d90c      	bls.n	18f6e <init_mem_slab_module+0x2a>
   18f54:	4916      	ldr	r1, [pc, #88]	; (18fb0 <init_mem_slab_module+0x6c>)
   18f56:	4817      	ldr	r0, [pc, #92]	; (18fb4 <init_mem_slab_module+0x70>)
   18f58:	233c      	movs	r3, #60	; 0x3c
   18f5a:	4632      	mov	r2, r6
   18f5c:	f003 fd21 	bl	1c9a2 <printk>
   18f60:	4815      	ldr	r0, [pc, #84]	; (18fb8 <init_mem_slab_module+0x74>)
   18f62:	f003 fd1e 	bl	1c9a2 <printk>
   18f66:	213c      	movs	r1, #60	; 0x3c
   18f68:	4630      	mov	r0, r6
   18f6a:	f003 ff74 	bl	1ce56 <assert_post_action>
   18f6e:	4544      	cmp	r4, r8
   18f70:	d302      	bcc.n	18f78 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
   18f72:	2000      	movs	r0, #0
	return rc;
}
   18f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   18f78:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   18f7c:	ea41 0302 	orr.w	r3, r1, r2
   18f80:	f013 0303 	ands.w	r3, r3, #3
   18f84:	d10b      	bne.n	18f9e <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   18f86:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   18f88:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   18f8a:	4283      	cmp	r3, r0
   18f8c:	d101      	bne.n	18f92 <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18f8e:	3420      	adds	r4, #32
   18f90:	e7de      	b.n	18f50 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   18f92:	69a7      	ldr	r7, [r4, #24]
   18f94:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   18f96:	3301      	adds	r3, #1
		slab->free_list = p;
   18f98:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
   18f9a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   18f9c:	e7f5      	b.n	18f8a <init_mem_slab_module+0x46>
		return -EINVAL;
   18f9e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   18fa2:	e7e7      	b.n	18f74 <init_mem_slab_module+0x30>
   18fa4:	200005cc 	.word	0x200005cc
   18fa8:	2000056c 	.word	0x2000056c
   18fac:	000213c3 	.word	0x000213c3
   18fb0:	000213e8 	.word	0x000213e8
   18fb4:	0001feb5 	.word	0x0001feb5
   18fb8:	0002096c 	.word	0x0002096c

00018fbc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   18fbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18fc0:	4604      	mov	r4, r0
   18fc2:	460e      	mov	r6, r1
   18fc4:	4690      	mov	r8, r2
   18fc6:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   18fc8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   18fcc:	f04f 0340 	mov.w	r3, #64	; 0x40
   18fd0:	f3ef 8711 	mrs	r7, BASEPRI
   18fd4:	f383 8812 	msr	BASEPRI_MAX, r3
   18fd8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18fdc:	4628      	mov	r0, r5
   18fde:	f000 f9ff 	bl	193e0 <z_spin_lock_valid>
   18fe2:	b968      	cbnz	r0, 19000 <k_mem_slab_alloc+0x44>
   18fe4:	4a24      	ldr	r2, [pc, #144]	; (19078 <k_mem_slab_alloc+0xbc>)
   18fe6:	4925      	ldr	r1, [pc, #148]	; (1907c <k_mem_slab_alloc+0xc0>)
   18fe8:	4825      	ldr	r0, [pc, #148]	; (19080 <k_mem_slab_alloc+0xc4>)
   18fea:	2381      	movs	r3, #129	; 0x81
   18fec:	f003 fcd9 	bl	1c9a2 <printk>
   18ff0:	4824      	ldr	r0, [pc, #144]	; (19084 <k_mem_slab_alloc+0xc8>)
   18ff2:	4629      	mov	r1, r5
   18ff4:	f003 fcd5 	bl	1c9a2 <printk>
   18ff8:	481f      	ldr	r0, [pc, #124]	; (19078 <k_mem_slab_alloc+0xbc>)
   18ffa:	2181      	movs	r1, #129	; 0x81
   18ffc:	f003 ff2b 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   19000:	4628      	mov	r0, r5
   19002:	f000 fa0b 	bl	1941c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   19006:	69a3      	ldr	r3, [r4, #24]
   19008:	b1eb      	cbz	r3, 19046 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
   1900a:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   1900c:	681b      	ldr	r3, [r3, #0]
   1900e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   19010:	69e3      	ldr	r3, [r4, #28]
   19012:	3301      	adds	r3, #1
   19014:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   19016:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19018:	4628      	mov	r0, r5
   1901a:	f000 f9ef 	bl	193fc <z_spin_unlock_valid>
   1901e:	b968      	cbnz	r0, 1903c <k_mem_slab_alloc+0x80>
   19020:	4a15      	ldr	r2, [pc, #84]	; (19078 <k_mem_slab_alloc+0xbc>)
   19022:	4919      	ldr	r1, [pc, #100]	; (19088 <k_mem_slab_alloc+0xcc>)
   19024:	4816      	ldr	r0, [pc, #88]	; (19080 <k_mem_slab_alloc+0xc4>)
   19026:	23ac      	movs	r3, #172	; 0xac
   19028:	f003 fcbb 	bl	1c9a2 <printk>
   1902c:	4817      	ldr	r0, [pc, #92]	; (1908c <k_mem_slab_alloc+0xd0>)
   1902e:	4629      	mov	r1, r5
   19030:	f003 fcb7 	bl	1c9a2 <printk>
   19034:	4810      	ldr	r0, [pc, #64]	; (19078 <k_mem_slab_alloc+0xbc>)
   19036:	21ac      	movs	r1, #172	; 0xac
   19038:	f003 ff0d 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1903c:	f387 8811 	msr	BASEPRI, r7
   19040:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   19044:	e013      	b.n	1906e <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   19046:	ea58 0209 	orrs.w	r2, r8, r9
   1904a:	d103      	bne.n	19054 <k_mem_slab_alloc+0x98>
		*mem = NULL;
   1904c:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   1904e:	f06f 040b 	mvn.w	r4, #11
   19052:	e7e1      	b.n	19018 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   19054:	4622      	mov	r2, r4
   19056:	e9cd 8900 	strd	r8, r9, [sp]
   1905a:	4639      	mov	r1, r7
   1905c:	4628      	mov	r0, r5
   1905e:	f002 f805 	bl	1b06c <z_pend_curr>
		if (result == 0) {
   19062:	4604      	mov	r4, r0
   19064:	b918      	cbnz	r0, 1906e <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
   19066:	4b0a      	ldr	r3, [pc, #40]	; (19090 <k_mem_slab_alloc+0xd4>)
   19068:	689b      	ldr	r3, [r3, #8]
   1906a:	695b      	ldr	r3, [r3, #20]
   1906c:	6033      	str	r3, [r6, #0]
}
   1906e:	4620      	mov	r0, r4
   19070:	b003      	add	sp, #12
   19072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19076:	bf00      	nop
   19078:	0001ff75 	.word	0x0001ff75
   1907c:	0001ffc7 	.word	0x0001ffc7
   19080:	0001feb5 	.word	0x0001feb5
   19084:	0001ffdc 	.word	0x0001ffdc
   19088:	0001ff9b 	.word	0x0001ff9b
   1908c:	0001ffb2 	.word	0x0001ffb2
   19090:	20001eb4 	.word	0x20001eb4

00019094 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   19094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19098:	4604      	mov	r4, r0
   1909a:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1909c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   190a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   190a4:	f3ef 8711 	mrs	r7, BASEPRI
   190a8:	f383 8812 	msr	BASEPRI_MAX, r3
   190ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   190b0:	4628      	mov	r0, r5
   190b2:	f000 f995 	bl	193e0 <z_spin_lock_valid>
   190b6:	b968      	cbnz	r0, 190d4 <k_mem_slab_free+0x40>
   190b8:	4a22      	ldr	r2, [pc, #136]	; (19144 <k_mem_slab_free+0xb0>)
   190ba:	4923      	ldr	r1, [pc, #140]	; (19148 <k_mem_slab_free+0xb4>)
   190bc:	4823      	ldr	r0, [pc, #140]	; (1914c <k_mem_slab_free+0xb8>)
   190be:	2381      	movs	r3, #129	; 0x81
   190c0:	f003 fc6f 	bl	1c9a2 <printk>
   190c4:	4822      	ldr	r0, [pc, #136]	; (19150 <k_mem_slab_free+0xbc>)
   190c6:	4629      	mov	r1, r5
   190c8:	f003 fc6b 	bl	1c9a2 <printk>
   190cc:	481d      	ldr	r0, [pc, #116]	; (19144 <k_mem_slab_free+0xb0>)
   190ce:	2181      	movs	r1, #129	; 0x81
   190d0:	f003 fec1 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   190d4:	4628      	mov	r0, r5
   190d6:	f000 f9a1 	bl	1941c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   190da:	f8d4 8018 	ldr.w	r8, [r4, #24]
   190de:	f1b8 0f00 	cmp.w	r8, #0
   190e2:	d10f      	bne.n	19104 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   190e4:	4620      	mov	r0, r4
   190e6:	f002 f973 	bl	1b3d0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   190ea:	b158      	cbz	r0, 19104 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   190ec:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   190ee:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   190f0:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   190f4:	f001 fe08 	bl	1ad08 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   190f8:	4639      	mov	r1, r7
   190fa:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   190fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   19100:	f001 bb62 	b.w	1a7c8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   19104:	6833      	ldr	r3, [r6, #0]
   19106:	69a2      	ldr	r2, [r4, #24]
   19108:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1910a:	6833      	ldr	r3, [r6, #0]
   1910c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   1910e:	69e3      	ldr	r3, [r4, #28]
   19110:	3b01      	subs	r3, #1
   19112:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19114:	4628      	mov	r0, r5
   19116:	f000 f971 	bl	193fc <z_spin_unlock_valid>
   1911a:	b968      	cbnz	r0, 19138 <k_mem_slab_free+0xa4>
   1911c:	4a09      	ldr	r2, [pc, #36]	; (19144 <k_mem_slab_free+0xb0>)
   1911e:	490d      	ldr	r1, [pc, #52]	; (19154 <k_mem_slab_free+0xc0>)
   19120:	480a      	ldr	r0, [pc, #40]	; (1914c <k_mem_slab_free+0xb8>)
   19122:	23ac      	movs	r3, #172	; 0xac
   19124:	f003 fc3d 	bl	1c9a2 <printk>
   19128:	480b      	ldr	r0, [pc, #44]	; (19158 <k_mem_slab_free+0xc4>)
   1912a:	4629      	mov	r1, r5
   1912c:	f003 fc39 	bl	1c9a2 <printk>
   19130:	4804      	ldr	r0, [pc, #16]	; (19144 <k_mem_slab_free+0xb0>)
   19132:	21ac      	movs	r1, #172	; 0xac
   19134:	f003 fe8f 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   19138:	f387 8811 	msr	BASEPRI, r7
   1913c:	f3bf 8f6f 	isb	sy
}
   19140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19144:	0001ff75 	.word	0x0001ff75
   19148:	0001ffc7 	.word	0x0001ffc7
   1914c:	0001feb5 	.word	0x0001feb5
   19150:	0001ffdc 	.word	0x0001ffdc
   19154:	0001ff9b 	.word	0x0001ff9b
   19158:	0001ffb2 	.word	0x0001ffb2

0001915c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1915c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19160:	b085      	sub	sp, #20
   19162:	4604      	mov	r4, r0
   19164:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   19168:	f1b8 0f0f 	cmp.w	r8, #15
{
   1916c:	460f      	mov	r7, r1
   1916e:	4615      	mov	r5, r2
   19170:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   19172:	d132      	bne.n	191da <z_setup_new_thread+0x7e>
   19174:	4b25      	ldr	r3, [pc, #148]	; (1920c <z_setup_new_thread+0xb0>)
   19176:	4599      	cmp	r9, r3
   19178:	d133      	bne.n	191e2 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1917a:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1917e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   19182:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19184:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19186:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   19188:	2304      	movs	r3, #4
   1918a:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1918c:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   19190:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
   19194:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19198:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
   1919a:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1919e:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   191a0:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   191a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   191a6:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
   191a8:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   191aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   191ac:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   191ae:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   191b0:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   191b2:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   191b6:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   191b8:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   191ba:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   191bc:	4642      	mov	r2, r8
   191be:	4639      	mov	r1, r7
   191c0:	4620      	mov	r0, r4
   191c2:	f7f8 f981 	bl	114c8 <arch_new_thread>
	if (!_current) {
   191c6:	4b12      	ldr	r3, [pc, #72]	; (19210 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
   191c8:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   191ca:	689b      	ldr	r3, [r3, #8]
   191cc:	b103      	cbz	r3, 191d0 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
   191ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   191d0:	6763      	str	r3, [r4, #116]	; 0x74
}
   191d2:	4640      	mov	r0, r8
   191d4:	b005      	add	sp, #20
   191d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   191da:	f108 0310 	add.w	r3, r8, #16
   191de:	2b1e      	cmp	r3, #30
   191e0:	d9cb      	bls.n	1917a <z_setup_new_thread+0x1e>
   191e2:	4a0c      	ldr	r2, [pc, #48]	; (19214 <z_setup_new_thread+0xb8>)
   191e4:	490c      	ldr	r1, [pc, #48]	; (19218 <z_setup_new_thread+0xbc>)
   191e6:	480d      	ldr	r0, [pc, #52]	; (1921c <z_setup_new_thread+0xc0>)
   191e8:	f240 2305 	movw	r3, #517	; 0x205
   191ec:	f003 fbd9 	bl	1c9a2 <printk>
   191f0:	4641      	mov	r1, r8
   191f2:	480b      	ldr	r0, [pc, #44]	; (19220 <z_setup_new_thread+0xc4>)
   191f4:	f06f 030f 	mvn.w	r3, #15
   191f8:	220e      	movs	r2, #14
   191fa:	f003 fbd2 	bl	1c9a2 <printk>
   191fe:	4805      	ldr	r0, [pc, #20]	; (19214 <z_setup_new_thread+0xb8>)
   19200:	f240 2105 	movw	r1, #517	; 0x205
   19204:	f003 fe27 	bl	1ce56 <assert_post_action>
   19208:	e7b7      	b.n	1917a <z_setup_new_thread+0x1e>
   1920a:	bf00      	nop
   1920c:	0001942d 	.word	0x0001942d
   19210:	20001eb4 	.word	0x20001eb4
   19214:	00021405 	.word	0x00021405
   19218:	00021428 	.word	0x00021428
   1921c:	0001feb5 	.word	0x0001feb5
   19220:	000214a8 	.word	0x000214a8

00019224 <z_impl_k_thread_create>:
{
   19224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19228:	b087      	sub	sp, #28
   1922a:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   1922e:	4604      	mov	r4, r0
   19230:	460d      	mov	r5, r1
   19232:	4690      	mov	r8, r2
   19234:	4699      	mov	r9, r3
   19236:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1923a:	b173      	cbz	r3, 1925a <z_impl_k_thread_create+0x36>
   1923c:	491b      	ldr	r1, [pc, #108]	; (192ac <z_impl_k_thread_create+0x88>)
   1923e:	4a1c      	ldr	r2, [pc, #112]	; (192b0 <z_impl_k_thread_create+0x8c>)
   19240:	481c      	ldr	r0, [pc, #112]	; (192b4 <z_impl_k_thread_create+0x90>)
   19242:	f240 236e 	movw	r3, #622	; 0x26e
   19246:	f003 fbac 	bl	1c9a2 <printk>
   1924a:	481b      	ldr	r0, [pc, #108]	; (192b8 <z_impl_k_thread_create+0x94>)
   1924c:	f003 fba9 	bl	1c9a2 <printk>
   19250:	4817      	ldr	r0, [pc, #92]	; (192b0 <z_impl_k_thread_create+0x8c>)
   19252:	f240 216e 	movw	r1, #622	; 0x26e
   19256:	f003 fdfe 	bl	1ce56 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1925a:	2300      	movs	r3, #0
   1925c:	9305      	str	r3, [sp, #20]
   1925e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19260:	9304      	str	r3, [sp, #16]
   19262:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19264:	9303      	str	r3, [sp, #12]
   19266:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19268:	9302      	str	r3, [sp, #8]
   1926a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1926c:	9301      	str	r3, [sp, #4]
   1926e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19270:	9300      	str	r3, [sp, #0]
   19272:	4642      	mov	r2, r8
   19274:	464b      	mov	r3, r9
   19276:	4629      	mov	r1, r5
   19278:	4620      	mov	r0, r4
   1927a:	f7ff ff6f 	bl	1915c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1927e:	1c7b      	adds	r3, r7, #1
   19280:	bf08      	it	eq
   19282:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   19286:	d005      	beq.n	19294 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19288:	ea56 0307 	orrs.w	r3, r6, r7
   1928c:	d106      	bne.n	1929c <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   1928e:	4620      	mov	r0, r4
   19290:	f001 fd82 	bl	1ad98 <z_sched_start>
}
   19294:	4620      	mov	r0, r4
   19296:	b007      	add	sp, #28
   19298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1929c:	4907      	ldr	r1, [pc, #28]	; (192bc <z_impl_k_thread_create+0x98>)
   1929e:	4632      	mov	r2, r6
   192a0:	463b      	mov	r3, r7
   192a2:	f104 0018 	add.w	r0, r4, #24
   192a6:	f002 fc17 	bl	1bad8 <z_add_timeout>
   192aa:	e7f3      	b.n	19294 <z_impl_k_thread_create+0x70>
   192ac:	000214d9 	.word	0x000214d9
   192b0:	00021405 	.word	0x00021405
   192b4:	0001feb5 	.word	0x0001feb5
   192b8:	000214eb 	.word	0x000214eb
   192bc:	0001ae41 	.word	0x0001ae41

000192c0 <z_init_static_threads>:
{
   192c0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   192c4:	4f3f      	ldr	r7, [pc, #252]	; (193c4 <z_init_static_threads+0x104>)
   192c6:	4d40      	ldr	r5, [pc, #256]	; (193c8 <z_init_static_threads+0x108>)
   192c8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 193d8 <z_init_static_threads+0x118>
{
   192cc:	b086      	sub	sp, #24
   192ce:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   192d0:	42bd      	cmp	r5, r7
   192d2:	d90e      	bls.n	192f2 <z_init_static_threads+0x32>
   192d4:	493d      	ldr	r1, [pc, #244]	; (193cc <z_init_static_threads+0x10c>)
   192d6:	483e      	ldr	r0, [pc, #248]	; (193d0 <z_init_static_threads+0x110>)
   192d8:	f240 23d5 	movw	r3, #725	; 0x2d5
   192dc:	4642      	mov	r2, r8
   192de:	f003 fb60 	bl	1c9a2 <printk>
   192e2:	483c      	ldr	r0, [pc, #240]	; (193d4 <z_init_static_threads+0x114>)
   192e4:	f003 fb5d 	bl	1c9a2 <printk>
   192e8:	f240 21d5 	movw	r1, #725	; 0x2d5
   192ec:	4640      	mov	r0, r8
   192ee:	f003 fdb2 	bl	1ce56 <assert_post_action>
   192f2:	42b5      	cmp	r5, r6
   192f4:	f105 0430 	add.w	r4, r5, #48	; 0x30
   192f8:	d31f      	bcc.n	1933a <z_init_static_threads+0x7a>
	k_sched_lock();
   192fa:	f001 faa9 	bl	1a850 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   192fe:	4c32      	ldr	r4, [pc, #200]	; (193c8 <z_init_static_threads+0x108>)
   19300:	4d35      	ldr	r5, [pc, #212]	; (193d8 <z_init_static_threads+0x118>)
   19302:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 193cc <z_init_static_threads+0x10c>
   19306:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 193d0 <z_init_static_threads+0x110>
   1930a:	42b4      	cmp	r4, r6
   1930c:	d90e      	bls.n	1932c <z_init_static_threads+0x6c>
   1930e:	4641      	mov	r1, r8
   19310:	f44f 733d 	mov.w	r3, #756	; 0x2f4
   19314:	462a      	mov	r2, r5
   19316:	4648      	mov	r0, r9
   19318:	f003 fb43 	bl	1c9a2 <printk>
   1931c:	482d      	ldr	r0, [pc, #180]	; (193d4 <z_init_static_threads+0x114>)
   1931e:	f003 fb40 	bl	1c9a2 <printk>
   19322:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   19326:	4628      	mov	r0, r5
   19328:	f003 fd95 	bl	1ce56 <assert_post_action>
   1932c:	42b4      	cmp	r4, r6
   1932e:	d321      	bcc.n	19374 <z_init_static_threads+0xb4>
}
   19330:	b006      	add	sp, #24
   19332:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   19336:	f001 bfcf 	b.w	1b2d8 <k_sched_unlock>
		z_setup_new_thread(
   1933a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1933e:	9305      	str	r3, [sp, #20]
   19340:	f854 3c10 	ldr.w	r3, [r4, #-16]
   19344:	9304      	str	r3, [sp, #16]
   19346:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1934a:	9303      	str	r3, [sp, #12]
   1934c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   19350:	9302      	str	r3, [sp, #8]
   19352:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   19356:	9301      	str	r3, [sp, #4]
   19358:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1935c:	9300      	str	r3, [sp, #0]
   1935e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   19362:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   19366:	f7ff fef9 	bl	1915c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1936a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1936e:	655d      	str	r5, [r3, #84]	; 0x54
   19370:	4625      	mov	r5, r4
   19372:	e7ad      	b.n	192d0 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   19374:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19376:	1c4b      	adds	r3, r1, #1
   19378:	d014      	beq.n	193a4 <z_init_static_threads+0xe4>
   1937a:	f240 32e7 	movw	r2, #999	; 0x3e7
   1937e:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
   19380:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   19384:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   19388:	4693      	mov	fp, r2
   1938a:	469c      	mov	ip, r3
   1938c:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19390:	459c      	cmp	ip, r3
   19392:	bf08      	it	eq
   19394:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
   19396:	6827      	ldr	r7, [r4, #0]
   19398:	4658      	mov	r0, fp
   1939a:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1939c:	d104      	bne.n	193a8 <z_init_static_threads+0xe8>
	z_sched_start(thread);
   1939e:	4638      	mov	r0, r7
   193a0:	f001 fcfa 	bl	1ad98 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   193a4:	3430      	adds	r4, #48	; 0x30
   193a6:	e7b0      	b.n	1930a <z_init_static_threads+0x4a>
   193a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   193ac:	2300      	movs	r3, #0
   193ae:	f7e6 fe95 	bl	dc <__aeabi_uldivmod>
   193b2:	4602      	mov	r2, r0
   193b4:	460b      	mov	r3, r1
   193b6:	f107 0018 	add.w	r0, r7, #24
   193ba:	4908      	ldr	r1, [pc, #32]	; (193dc <z_init_static_threads+0x11c>)
   193bc:	f002 fb8c 	bl	1bad8 <z_add_timeout>
   193c0:	e7f0      	b.n	193a4 <z_init_static_threads+0xe4>
   193c2:	bf00      	nop
   193c4:	2000056c 	.word	0x2000056c
   193c8:	2000056c 	.word	0x2000056c
   193cc:	00021510 	.word	0x00021510
   193d0:	0001feb5 	.word	0x0001feb5
   193d4:	0002096c 	.word	0x0002096c
   193d8:	00021405 	.word	0x00021405
   193dc:	0001ae41 	.word	0x0001ae41

000193e0 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   193e0:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   193e2:	b138      	cbz	r0, 193f4 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   193e4:	4b04      	ldr	r3, [pc, #16]	; (193f8 <z_spin_lock_valid+0x18>)
   193e6:	7d1b      	ldrb	r3, [r3, #20]
   193e8:	f000 0003 	and.w	r0, r0, #3
   193ec:	1ac0      	subs	r0, r0, r3
   193ee:	bf18      	it	ne
   193f0:	2001      	movne	r0, #1
   193f2:	4770      	bx	lr
			return false;
		}
	}
	return true;
   193f4:	2001      	movs	r0, #1
}
   193f6:	4770      	bx	lr
   193f8:	20001eb4 	.word	0x20001eb4

000193fc <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   193fc:	4906      	ldr	r1, [pc, #24]	; (19418 <z_spin_unlock_valid+0x1c>)
{
   193fe:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   19400:	688a      	ldr	r2, [r1, #8]
   19402:	7d08      	ldrb	r0, [r1, #20]
   19404:	6819      	ldr	r1, [r3, #0]
   19406:	4302      	orrs	r2, r0
   19408:	4291      	cmp	r1, r2
   1940a:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   1940e:	bf04      	itt	eq
   19410:	6018      	streq	r0, [r3, #0]
	return true;
   19412:	2001      	moveq	r0, #1
}
   19414:	4770      	bx	lr
   19416:	bf00      	nop
   19418:	20001eb4 	.word	0x20001eb4

0001941c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1941c:	4a02      	ldr	r2, [pc, #8]	; (19428 <z_spin_lock_set_owner+0xc>)
   1941e:	7d11      	ldrb	r1, [r2, #20]
   19420:	6893      	ldr	r3, [r2, #8]
   19422:	430b      	orrs	r3, r1
   19424:	6003      	str	r3, [r0, #0]
}
   19426:	4770      	bx	lr
   19428:	20001eb4 	.word	0x20001eb4

0001942c <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1942c:	4c11      	ldr	r4, [pc, #68]	; (19474 <idle+0x48>)
   1942e:	68a2      	ldr	r2, [r4, #8]
   19430:	f992 200e 	ldrsb.w	r2, [r2, #14]
   19434:	2a00      	cmp	r2, #0
{
   19436:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   19438:	da09      	bge.n	1944e <idle+0x22>
   1943a:	490f      	ldr	r1, [pc, #60]	; (19478 <idle+0x4c>)
   1943c:	480f      	ldr	r0, [pc, #60]	; (1947c <idle+0x50>)
   1943e:	4a10      	ldr	r2, [pc, #64]	; (19480 <idle+0x54>)
   19440:	2346      	movs	r3, #70	; 0x46
   19442:	f003 faae 	bl	1c9a2 <printk>
   19446:	480e      	ldr	r0, [pc, #56]	; (19480 <idle+0x54>)
   19448:	2146      	movs	r1, #70	; 0x46
   1944a:	f003 fd04 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1944e:	f04f 0240 	mov.w	r2, #64	; 0x40
   19452:	f3ef 8311 	mrs	r3, BASEPRI
   19456:	f382 8812 	msr	BASEPRI_MAX, r2
   1945a:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1945e:	f002 fc5d 	bl	1bd1c <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   19462:	61a0      	str	r0, [r4, #24]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   19464:	f7f7 fc34 	bl	10cd0 <pm_system_suspend>
   19468:	2800      	cmp	r0, #0
   1946a:	d1f0      	bne.n	1944e <idle+0x22>
	arch_cpu_idle();
   1946c:	f7f7 ff28 	bl	112c0 <arch_cpu_idle>
}
   19470:	e7ed      	b.n	1944e <idle+0x22>
   19472:	bf00      	nop
   19474:	20001eb4 	.word	0x20001eb4
   19478:	0002155e 	.word	0x0002155e
   1947c:	0001feb5 	.word	0x0001feb5
   19480:	0002153d 	.word	0x0002153d

00019484 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   19484:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19488:	4604      	mov	r4, r0
   1948a:	4616      	mov	r6, r2
   1948c:	461f      	mov	r7, r3
   1948e:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   19492:	b163      	cbz	r3, 194ae <z_impl_k_mutex_lock+0x2a>
   19494:	4970      	ldr	r1, [pc, #448]	; (19658 <z_impl_k_mutex_lock+0x1d4>)
   19496:	4a71      	ldr	r2, [pc, #452]	; (1965c <z_impl_k_mutex_lock+0x1d8>)
   19498:	4871      	ldr	r0, [pc, #452]	; (19660 <z_impl_k_mutex_lock+0x1dc>)
   1949a:	2365      	movs	r3, #101	; 0x65
   1949c:	f003 fa81 	bl	1c9a2 <printk>
   194a0:	4870      	ldr	r0, [pc, #448]	; (19664 <z_impl_k_mutex_lock+0x1e0>)
   194a2:	f003 fa7e 	bl	1c9a2 <printk>
   194a6:	486d      	ldr	r0, [pc, #436]	; (1965c <z_impl_k_mutex_lock+0x1d8>)
   194a8:	2165      	movs	r1, #101	; 0x65
   194aa:	f003 fcd4 	bl	1ce56 <assert_post_action>
   194ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   194b2:	f3ef 8811 	mrs	r8, BASEPRI
   194b6:	f383 8812 	msr	BASEPRI_MAX, r3
   194ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   194be:	486a      	ldr	r0, [pc, #424]	; (19668 <z_impl_k_mutex_lock+0x1e4>)
   194c0:	f7ff ff8e 	bl	193e0 <z_spin_lock_valid>
   194c4:	b968      	cbnz	r0, 194e2 <z_impl_k_mutex_lock+0x5e>
   194c6:	4a69      	ldr	r2, [pc, #420]	; (1966c <z_impl_k_mutex_lock+0x1e8>)
   194c8:	4969      	ldr	r1, [pc, #420]	; (19670 <z_impl_k_mutex_lock+0x1ec>)
   194ca:	4865      	ldr	r0, [pc, #404]	; (19660 <z_impl_k_mutex_lock+0x1dc>)
   194cc:	2381      	movs	r3, #129	; 0x81
   194ce:	f003 fa68 	bl	1c9a2 <printk>
   194d2:	4965      	ldr	r1, [pc, #404]	; (19668 <z_impl_k_mutex_lock+0x1e4>)
   194d4:	4867      	ldr	r0, [pc, #412]	; (19674 <z_impl_k_mutex_lock+0x1f0>)
   194d6:	f003 fa64 	bl	1c9a2 <printk>
   194da:	4864      	ldr	r0, [pc, #400]	; (1966c <z_impl_k_mutex_lock+0x1e8>)
   194dc:	2181      	movs	r1, #129	; 0x81
   194de:	f003 fcba 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   194e2:	4861      	ldr	r0, [pc, #388]	; (19668 <z_impl_k_mutex_lock+0x1e4>)
   194e4:	f7ff ff9a 	bl	1941c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   194e8:	68e3      	ldr	r3, [r4, #12]
   194ea:	4a63      	ldr	r2, [pc, #396]	; (19678 <z_impl_k_mutex_lock+0x1f4>)
   194ec:	b1fb      	cbz	r3, 1952e <z_impl_k_mutex_lock+0xaa>
   194ee:	68a0      	ldr	r0, [r4, #8]
   194f0:	6891      	ldr	r1, [r2, #8]
   194f2:	4288      	cmp	r0, r1
   194f4:	d03d      	beq.n	19572 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   194f6:	ea56 0307 	orrs.w	r3, r6, r7
   194fa:	d13c      	bne.n	19576 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   194fc:	485a      	ldr	r0, [pc, #360]	; (19668 <z_impl_k_mutex_lock+0x1e4>)
   194fe:	f7ff ff7d 	bl	193fc <z_spin_unlock_valid>
   19502:	b968      	cbnz	r0, 19520 <z_impl_k_mutex_lock+0x9c>
   19504:	4a59      	ldr	r2, [pc, #356]	; (1966c <z_impl_k_mutex_lock+0x1e8>)
   19506:	495d      	ldr	r1, [pc, #372]	; (1967c <z_impl_k_mutex_lock+0x1f8>)
   19508:	4855      	ldr	r0, [pc, #340]	; (19660 <z_impl_k_mutex_lock+0x1dc>)
   1950a:	23ac      	movs	r3, #172	; 0xac
   1950c:	f003 fa49 	bl	1c9a2 <printk>
   19510:	4955      	ldr	r1, [pc, #340]	; (19668 <z_impl_k_mutex_lock+0x1e4>)
   19512:	485b      	ldr	r0, [pc, #364]	; (19680 <z_impl_k_mutex_lock+0x1fc>)
   19514:	f003 fa45 	bl	1c9a2 <printk>
   19518:	4854      	ldr	r0, [pc, #336]	; (1966c <z_impl_k_mutex_lock+0x1e8>)
   1951a:	21ac      	movs	r1, #172	; 0xac
   1951c:	f003 fc9b 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   19520:	f388 8811 	msr	BASEPRI, r8
   19524:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   19528:	f06f 000f 	mvn.w	r0, #15
   1952c:	e01e      	b.n	1956c <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1952e:	6891      	ldr	r1, [r2, #8]
   19530:	f991 100e 	ldrsb.w	r1, [r1, #14]
   19534:	484c      	ldr	r0, [pc, #304]	; (19668 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   19536:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   19538:	3301      	adds	r3, #1
   1953a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1953c:	6893      	ldr	r3, [r2, #8]
   1953e:	60a3      	str	r3, [r4, #8]
   19540:	f7ff ff5c 	bl	193fc <z_spin_unlock_valid>
   19544:	b968      	cbnz	r0, 19562 <z_impl_k_mutex_lock+0xde>
   19546:	4a49      	ldr	r2, [pc, #292]	; (1966c <z_impl_k_mutex_lock+0x1e8>)
   19548:	494c      	ldr	r1, [pc, #304]	; (1967c <z_impl_k_mutex_lock+0x1f8>)
   1954a:	4845      	ldr	r0, [pc, #276]	; (19660 <z_impl_k_mutex_lock+0x1dc>)
   1954c:	23ac      	movs	r3, #172	; 0xac
   1954e:	f003 fa28 	bl	1c9a2 <printk>
   19552:	4945      	ldr	r1, [pc, #276]	; (19668 <z_impl_k_mutex_lock+0x1e4>)
   19554:	484a      	ldr	r0, [pc, #296]	; (19680 <z_impl_k_mutex_lock+0x1fc>)
   19556:	f003 fa24 	bl	1c9a2 <printk>
   1955a:	4844      	ldr	r0, [pc, #272]	; (1966c <z_impl_k_mutex_lock+0x1e8>)
   1955c:	21ac      	movs	r1, #172	; 0xac
   1955e:	f003 fc7a 	bl	1ce56 <assert_post_action>
   19562:	f388 8811 	msr	BASEPRI, r8
   19566:	f3bf 8f6f 	isb	sy
		return 0;
   1956a:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1956c:	b002      	add	sp, #8
   1956e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   19572:	6921      	ldr	r1, [r4, #16]
   19574:	e7de      	b.n	19534 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   19576:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1957a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   1957e:	4299      	cmp	r1, r3
   19580:	bfa8      	it	ge
   19582:	4619      	movge	r1, r3
   19584:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   19588:	4291      	cmp	r1, r2
   1958a:	bfb8      	it	lt
   1958c:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1958e:	428b      	cmp	r3, r1
   19590:	dd44      	ble.n	1961c <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
   19592:	f001 fd9b 	bl	1b0cc <z_set_prio>
   19596:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   19598:	e9cd 6700 	strd	r6, r7, [sp]
   1959c:	4832      	ldr	r0, [pc, #200]	; (19668 <z_impl_k_mutex_lock+0x1e4>)
   1959e:	4622      	mov	r2, r4
   195a0:	4641      	mov	r1, r8
   195a2:	f001 fd63 	bl	1b06c <z_pend_curr>
	if (got_mutex == 0) {
   195a6:	2800      	cmp	r0, #0
   195a8:	d0e0      	beq.n	1956c <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   195aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   195ae:	f3ef 8611 	mrs	r6, BASEPRI
   195b2:	f383 8812 	msr	BASEPRI_MAX, r3
   195b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   195ba:	482b      	ldr	r0, [pc, #172]	; (19668 <z_impl_k_mutex_lock+0x1e4>)
   195bc:	f7ff ff10 	bl	193e0 <z_spin_lock_valid>
   195c0:	b968      	cbnz	r0, 195de <z_impl_k_mutex_lock+0x15a>
   195c2:	4a2a      	ldr	r2, [pc, #168]	; (1966c <z_impl_k_mutex_lock+0x1e8>)
   195c4:	492a      	ldr	r1, [pc, #168]	; (19670 <z_impl_k_mutex_lock+0x1ec>)
   195c6:	4826      	ldr	r0, [pc, #152]	; (19660 <z_impl_k_mutex_lock+0x1dc>)
   195c8:	2381      	movs	r3, #129	; 0x81
   195ca:	f003 f9ea 	bl	1c9a2 <printk>
   195ce:	4926      	ldr	r1, [pc, #152]	; (19668 <z_impl_k_mutex_lock+0x1e4>)
   195d0:	4828      	ldr	r0, [pc, #160]	; (19674 <z_impl_k_mutex_lock+0x1f0>)
   195d2:	f003 f9e6 	bl	1c9a2 <printk>
   195d6:	4825      	ldr	r0, [pc, #148]	; (1966c <z_impl_k_mutex_lock+0x1e8>)
   195d8:	2181      	movs	r1, #129	; 0x81
   195da:	f003 fc3c 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   195de:	4822      	ldr	r0, [pc, #136]	; (19668 <z_impl_k_mutex_lock+0x1e4>)
   195e0:	f7ff ff1c 	bl	1941c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   195e4:	6823      	ldr	r3, [r4, #0]
   195e6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   195e8:	429c      	cmp	r4, r3
   195ea:	d00a      	beq.n	19602 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   195ec:	b14b      	cbz	r3, 19602 <z_impl_k_mutex_lock+0x17e>
   195ee:	f993 300e 	ldrsb.w	r3, [r3, #14]
   195f2:	4299      	cmp	r1, r3
   195f4:	bfa8      	it	ge
   195f6:	4619      	movge	r1, r3
   195f8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   195fc:	4299      	cmp	r1, r3
   195fe:	bfb8      	it	lt
   19600:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   19602:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   19604:	f990 300e 	ldrsb.w	r3, [r0, #14]
   19608:	4299      	cmp	r1, r3
   1960a:	d109      	bne.n	19620 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
   1960c:	b16d      	cbz	r5, 1962a <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
   1960e:	4816      	ldr	r0, [pc, #88]	; (19668 <z_impl_k_mutex_lock+0x1e4>)
   19610:	4631      	mov	r1, r6
   19612:	f001 f8d9 	bl	1a7c8 <z_reschedule>
	return -EAGAIN;
   19616:	f06f 000a 	mvn.w	r0, #10
   1961a:	e7a7      	b.n	1956c <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   1961c:	2500      	movs	r5, #0
   1961e:	e7bb      	b.n	19598 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
   19620:	f001 fd54 	bl	1b0cc <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   19624:	2800      	cmp	r0, #0
   19626:	d1f2      	bne.n	1960e <z_impl_k_mutex_lock+0x18a>
   19628:	e7f0      	b.n	1960c <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1962a:	480f      	ldr	r0, [pc, #60]	; (19668 <z_impl_k_mutex_lock+0x1e4>)
   1962c:	f7ff fee6 	bl	193fc <z_spin_unlock_valid>
   19630:	b968      	cbnz	r0, 1964e <z_impl_k_mutex_lock+0x1ca>
   19632:	4a0e      	ldr	r2, [pc, #56]	; (1966c <z_impl_k_mutex_lock+0x1e8>)
   19634:	4911      	ldr	r1, [pc, #68]	; (1967c <z_impl_k_mutex_lock+0x1f8>)
   19636:	480a      	ldr	r0, [pc, #40]	; (19660 <z_impl_k_mutex_lock+0x1dc>)
   19638:	23ac      	movs	r3, #172	; 0xac
   1963a:	f003 f9b2 	bl	1c9a2 <printk>
   1963e:	490a      	ldr	r1, [pc, #40]	; (19668 <z_impl_k_mutex_lock+0x1e4>)
   19640:	480f      	ldr	r0, [pc, #60]	; (19680 <z_impl_k_mutex_lock+0x1fc>)
   19642:	f003 f9ae 	bl	1c9a2 <printk>
   19646:	4809      	ldr	r0, [pc, #36]	; (1966c <z_impl_k_mutex_lock+0x1e8>)
   19648:	21ac      	movs	r1, #172	; 0xac
   1964a:	f003 fc04 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1964e:	f386 8811 	msr	BASEPRI, r6
   19652:	f3bf 8f6f 	isb	sy
   19656:	e7de      	b.n	19616 <z_impl_k_mutex_lock+0x192>
   19658:	000214d9 	.word	0x000214d9
   1965c:	00021586 	.word	0x00021586
   19660:	0001feb5 	.word	0x0001feb5
   19664:	000215a8 	.word	0x000215a8
   19668:	20001edc 	.word	0x20001edc
   1966c:	0001ff75 	.word	0x0001ff75
   19670:	0001ffc7 	.word	0x0001ffc7
   19674:	0001ffdc 	.word	0x0001ffdc
   19678:	20001eb4 	.word	0x20001eb4
   1967c:	0001ff9b 	.word	0x0001ff9b
   19680:	0001ffb2 	.word	0x0001ffb2

00019684 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   19684:	b538      	push	{r3, r4, r5, lr}
   19686:	4604      	mov	r4, r0
   19688:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1968c:	b163      	cbz	r3, 196a8 <z_impl_k_mutex_unlock+0x24>
   1968e:	4952      	ldr	r1, [pc, #328]	; (197d8 <z_impl_k_mutex_unlock+0x154>)
   19690:	4a52      	ldr	r2, [pc, #328]	; (197dc <z_impl_k_mutex_unlock+0x158>)
   19692:	4853      	ldr	r0, [pc, #332]	; (197e0 <z_impl_k_mutex_unlock+0x15c>)
   19694:	23c7      	movs	r3, #199	; 0xc7
   19696:	f003 f984 	bl	1c9a2 <printk>
   1969a:	4852      	ldr	r0, [pc, #328]	; (197e4 <z_impl_k_mutex_unlock+0x160>)
   1969c:	f003 f981 	bl	1c9a2 <printk>
   196a0:	484e      	ldr	r0, [pc, #312]	; (197dc <z_impl_k_mutex_unlock+0x158>)
   196a2:	21c7      	movs	r1, #199	; 0xc7
   196a4:	f003 fbd7 	bl	1ce56 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   196a8:	68a3      	ldr	r3, [r4, #8]
   196aa:	2b00      	cmp	r3, #0
   196ac:	f000 808d 	beq.w	197ca <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   196b0:	4d4d      	ldr	r5, [pc, #308]	; (197e8 <z_impl_k_mutex_unlock+0x164>)
   196b2:	68aa      	ldr	r2, [r5, #8]
   196b4:	4293      	cmp	r3, r2
   196b6:	f040 808b 	bne.w	197d0 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   196ba:	68e3      	ldr	r3, [r4, #12]
   196bc:	b94b      	cbnz	r3, 196d2 <z_impl_k_mutex_unlock+0x4e>
   196be:	494b      	ldr	r1, [pc, #300]	; (197ec <z_impl_k_mutex_unlock+0x168>)
   196c0:	4847      	ldr	r0, [pc, #284]	; (197e0 <z_impl_k_mutex_unlock+0x15c>)
   196c2:	4a46      	ldr	r2, [pc, #280]	; (197dc <z_impl_k_mutex_unlock+0x158>)
   196c4:	23df      	movs	r3, #223	; 0xdf
   196c6:	f003 f96c 	bl	1c9a2 <printk>
   196ca:	4844      	ldr	r0, [pc, #272]	; (197dc <z_impl_k_mutex_unlock+0x158>)
   196cc:	21df      	movs	r1, #223	; 0xdf
   196ce:	f003 fbc2 	bl	1ce56 <assert_post_action>
   196d2:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   196d6:	b163      	cbz	r3, 196f2 <z_impl_k_mutex_unlock+0x6e>
   196d8:	493f      	ldr	r1, [pc, #252]	; (197d8 <z_impl_k_mutex_unlock+0x154>)
   196da:	4a45      	ldr	r2, [pc, #276]	; (197f0 <z_impl_k_mutex_unlock+0x16c>)
   196dc:	4840      	ldr	r0, [pc, #256]	; (197e0 <z_impl_k_mutex_unlock+0x15c>)
   196de:	23fd      	movs	r3, #253	; 0xfd
   196e0:	f003 f95f 	bl	1c9a2 <printk>
   196e4:	4843      	ldr	r0, [pc, #268]	; (197f4 <z_impl_k_mutex_unlock+0x170>)
   196e6:	f003 f95c 	bl	1c9a2 <printk>
   196ea:	4841      	ldr	r0, [pc, #260]	; (197f0 <z_impl_k_mutex_unlock+0x16c>)
   196ec:	21fd      	movs	r1, #253	; 0xfd
   196ee:	f003 fbb2 	bl	1ce56 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   196f2:	68ab      	ldr	r3, [r5, #8]
   196f4:	7bdb      	ldrb	r3, [r3, #15]
   196f6:	2b01      	cmp	r3, #1
   196f8:	d10c      	bne.n	19714 <z_impl_k_mutex_unlock+0x90>
   196fa:	493f      	ldr	r1, [pc, #252]	; (197f8 <z_impl_k_mutex_unlock+0x174>)
   196fc:	4a3c      	ldr	r2, [pc, #240]	; (197f0 <z_impl_k_mutex_unlock+0x16c>)
   196fe:	4838      	ldr	r0, [pc, #224]	; (197e0 <z_impl_k_mutex_unlock+0x15c>)
   19700:	23fe      	movs	r3, #254	; 0xfe
   19702:	f003 f94e 	bl	1c9a2 <printk>
   19706:	483b      	ldr	r0, [pc, #236]	; (197f4 <z_impl_k_mutex_unlock+0x170>)
   19708:	f003 f94b 	bl	1c9a2 <printk>
   1970c:	4838      	ldr	r0, [pc, #224]	; (197f0 <z_impl_k_mutex_unlock+0x16c>)
   1970e:	21fe      	movs	r1, #254	; 0xfe
   19710:	f003 fba1 	bl	1ce56 <assert_post_action>

	--_current->base.sched_locked;
   19714:	68aa      	ldr	r2, [r5, #8]
   19716:	7bd3      	ldrb	r3, [r2, #15]
   19718:	3b01      	subs	r3, #1
   1971a:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1971c:	68e3      	ldr	r3, [r4, #12]
   1971e:	2b01      	cmp	r3, #1
   19720:	d905      	bls.n	1972e <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
   19722:	3b01      	subs	r3, #1
   19724:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   19726:	f001 fdd7 	bl	1b2d8 <k_sched_unlock>

	return 0;
   1972a:	2000      	movs	r0, #0
}
   1972c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1972e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19732:	f3ef 8511 	mrs	r5, BASEPRI
   19736:	f383 8812 	msr	BASEPRI_MAX, r3
   1973a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1973e:	482f      	ldr	r0, [pc, #188]	; (197fc <z_impl_k_mutex_unlock+0x178>)
   19740:	f7ff fe4e 	bl	193e0 <z_spin_lock_valid>
   19744:	b968      	cbnz	r0, 19762 <z_impl_k_mutex_unlock+0xde>
   19746:	4a2e      	ldr	r2, [pc, #184]	; (19800 <z_impl_k_mutex_unlock+0x17c>)
   19748:	492e      	ldr	r1, [pc, #184]	; (19804 <z_impl_k_mutex_unlock+0x180>)
   1974a:	4825      	ldr	r0, [pc, #148]	; (197e0 <z_impl_k_mutex_unlock+0x15c>)
   1974c:	2381      	movs	r3, #129	; 0x81
   1974e:	f003 f928 	bl	1c9a2 <printk>
   19752:	492a      	ldr	r1, [pc, #168]	; (197fc <z_impl_k_mutex_unlock+0x178>)
   19754:	482c      	ldr	r0, [pc, #176]	; (19808 <z_impl_k_mutex_unlock+0x184>)
   19756:	f003 f924 	bl	1c9a2 <printk>
   1975a:	4829      	ldr	r0, [pc, #164]	; (19800 <z_impl_k_mutex_unlock+0x17c>)
   1975c:	2181      	movs	r1, #129	; 0x81
   1975e:	f003 fb7a 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   19762:	4826      	ldr	r0, [pc, #152]	; (197fc <z_impl_k_mutex_unlock+0x178>)
   19764:	f7ff fe5a 	bl	1941c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   19768:	68a0      	ldr	r0, [r4, #8]
   1976a:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   1976c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   19770:	4299      	cmp	r1, r3
   19772:	d001      	beq.n	19778 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
   19774:	f001 fcaa 	bl	1b0cc <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   19778:	4620      	mov	r0, r4
   1977a:	f001 fe29 	bl	1b3d0 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1977e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   19780:	b158      	cbz	r0, 1979a <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
   19782:	f990 200e 	ldrsb.w	r2, [r0, #14]
   19786:	6122      	str	r2, [r4, #16]
   19788:	2200      	movs	r2, #0
   1978a:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1978c:	f001 fabc 	bl	1ad08 <z_ready_thread>
		z_reschedule(&lock, key);
   19790:	481a      	ldr	r0, [pc, #104]	; (197fc <z_impl_k_mutex_unlock+0x178>)
   19792:	4629      	mov	r1, r5
   19794:	f001 f818 	bl	1a7c8 <z_reschedule>
   19798:	e7c5      	b.n	19726 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
   1979a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1979c:	4817      	ldr	r0, [pc, #92]	; (197fc <z_impl_k_mutex_unlock+0x178>)
   1979e:	f7ff fe2d 	bl	193fc <z_spin_unlock_valid>
   197a2:	b968      	cbnz	r0, 197c0 <z_impl_k_mutex_unlock+0x13c>
   197a4:	4a16      	ldr	r2, [pc, #88]	; (19800 <z_impl_k_mutex_unlock+0x17c>)
   197a6:	4919      	ldr	r1, [pc, #100]	; (1980c <z_impl_k_mutex_unlock+0x188>)
   197a8:	480d      	ldr	r0, [pc, #52]	; (197e0 <z_impl_k_mutex_unlock+0x15c>)
   197aa:	23ac      	movs	r3, #172	; 0xac
   197ac:	f003 f8f9 	bl	1c9a2 <printk>
   197b0:	4912      	ldr	r1, [pc, #72]	; (197fc <z_impl_k_mutex_unlock+0x178>)
   197b2:	4817      	ldr	r0, [pc, #92]	; (19810 <z_impl_k_mutex_unlock+0x18c>)
   197b4:	f003 f8f5 	bl	1c9a2 <printk>
   197b8:	4811      	ldr	r0, [pc, #68]	; (19800 <z_impl_k_mutex_unlock+0x17c>)
   197ba:	21ac      	movs	r1, #172	; 0xac
   197bc:	f003 fb4b 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   197c0:	f385 8811 	msr	BASEPRI, r5
   197c4:	f3bf 8f6f 	isb	sy
   197c8:	e7ad      	b.n	19726 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
   197ca:	f06f 0015 	mvn.w	r0, #21
   197ce:	e7ad      	b.n	1972c <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
   197d0:	f04f 30ff 	mov.w	r0, #4294967295
   197d4:	e7aa      	b.n	1972c <z_impl_k_mutex_unlock+0xa8>
   197d6:	bf00      	nop
   197d8:	000214d9 	.word	0x000214d9
   197dc:	00021586 	.word	0x00021586
   197e0:	0001feb5 	.word	0x0001feb5
   197e4:	000215a8 	.word	0x000215a8
   197e8:	20001eb4 	.word	0x20001eb4
   197ec:	000215cd 	.word	0x000215cd
   197f0:	000215e4 	.word	0x000215e4
   197f4:	00020d40 	.word	0x00020d40
   197f8:	0002160f 	.word	0x0002160f
   197fc:	20001edc 	.word	0x20001edc
   19800:	0001ff75 	.word	0x0001ff75
   19804:	0001ffc7 	.word	0x0001ffc7
   19808:	0001ffdc 	.word	0x0001ffdc
   1980c:	0001ff9b 	.word	0x0001ff9b
   19810:	0001ffb2 	.word	0x0001ffb2

00019814 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   19814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19818:	4604      	mov	r4, r0
   1981a:	f89d a020 	ldrb.w	sl, [sp, #32]
   1981e:	460e      	mov	r6, r1
   19820:	4690      	mov	r8, r2
   19822:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   19824:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   19828:	f04f 0340 	mov.w	r3, #64	; 0x40
   1982c:	f3ef 8711 	mrs	r7, BASEPRI
   19830:	f383 8812 	msr	BASEPRI_MAX, r3
   19834:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19838:	4628      	mov	r0, r5
   1983a:	f7ff fdd1 	bl	193e0 <z_spin_lock_valid>
   1983e:	b968      	cbnz	r0, 1985c <queue_insert+0x48>
   19840:	4a3b      	ldr	r2, [pc, #236]	; (19930 <queue_insert+0x11c>)
   19842:	493c      	ldr	r1, [pc, #240]	; (19934 <queue_insert+0x120>)
   19844:	483c      	ldr	r0, [pc, #240]	; (19938 <queue_insert+0x124>)
   19846:	2381      	movs	r3, #129	; 0x81
   19848:	f003 f8ab 	bl	1c9a2 <printk>
   1984c:	483b      	ldr	r0, [pc, #236]	; (1993c <queue_insert+0x128>)
   1984e:	4629      	mov	r1, r5
   19850:	f003 f8a7 	bl	1c9a2 <printk>
   19854:	4836      	ldr	r0, [pc, #216]	; (19930 <queue_insert+0x11c>)
   19856:	2181      	movs	r1, #129	; 0x81
   19858:	f003 fafd 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1985c:	4628      	mov	r0, r5
   1985e:	f7ff fddd 	bl	1941c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   19862:	f1ba 0f00 	cmp.w	sl, #0
   19866:	d000      	beq.n	1986a <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
   19868:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1986a:	f104 000c 	add.w	r0, r4, #12
   1986e:	f001 fdaf 	bl	1b3d0 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   19872:	b158      	cbz	r0, 1988c <queue_insert+0x78>
   19874:	2400      	movs	r4, #0
   19876:	67c4      	str	r4, [r0, #124]	; 0x7c
   19878:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1987c:	f001 fa44 	bl	1ad08 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   19880:	4628      	mov	r0, r5
   19882:	4639      	mov	r1, r7
   19884:	f000 ffa0 	bl	1a7c8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   19888:	2000      	movs	r0, #0
   1988a:	e01e      	b.n	198ca <queue_insert+0xb6>
	if (alloc) {
   1988c:	f1b9 0f00 	cmp.w	r9, #0
   19890:	d02d      	beq.n	198ee <queue_insert+0xda>
	return z_thread_aligned_alloc(0, size);
   19892:	2108      	movs	r1, #8
   19894:	f003 f814 	bl	1c8c0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   19898:	b9c8      	cbnz	r0, 198ce <queue_insert+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1989a:	4628      	mov	r0, r5
   1989c:	f7ff fdae 	bl	193fc <z_spin_unlock_valid>
   198a0:	b968      	cbnz	r0, 198be <queue_insert+0xaa>
   198a2:	4a23      	ldr	r2, [pc, #140]	; (19930 <queue_insert+0x11c>)
   198a4:	4926      	ldr	r1, [pc, #152]	; (19940 <queue_insert+0x12c>)
   198a6:	4824      	ldr	r0, [pc, #144]	; (19938 <queue_insert+0x124>)
   198a8:	23ac      	movs	r3, #172	; 0xac
   198aa:	f003 f87a 	bl	1c9a2 <printk>
   198ae:	4825      	ldr	r0, [pc, #148]	; (19944 <queue_insert+0x130>)
   198b0:	4629      	mov	r1, r5
   198b2:	f003 f876 	bl	1c9a2 <printk>
   198b6:	481e      	ldr	r0, [pc, #120]	; (19930 <queue_insert+0x11c>)
   198b8:	21ac      	movs	r1, #172	; 0xac
   198ba:	f003 facc 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   198be:	f387 8811 	msr	BASEPRI, r7
   198c2:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   198c6:	f06f 000b 	mvn.w	r0, #11
}
   198ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   198ce:	2301      	movs	r3, #1
		anode->data = data;
   198d0:	f8c0 8004 	str.w	r8, [r0, #4]
   198d4:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   198d6:	6803      	ldr	r3, [r0, #0]
   198d8:	f003 0303 	and.w	r3, r3, #3
   198dc:	b95e      	cbnz	r6, 198f6 <queue_insert+0xe2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   198de:	6822      	ldr	r2, [r4, #0]
   198e0:	4313      	orrs	r3, r2
   198e2:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   198e4:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   198e6:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   198e8:	b973      	cbnz	r3, 19908 <queue_insert+0xf4>
	list->tail = node;
   198ea:	6060      	str	r0, [r4, #4]
}
   198ec:	e00c      	b.n	19908 <queue_insert+0xf4>
	node->next_and_flags = flags;
   198ee:	f8c8 9000 	str.w	r9, [r8]
}
   198f2:	4640      	mov	r0, r8
   198f4:	e7ef      	b.n	198d6 <queue_insert+0xc2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   198f6:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   198f8:	f032 0203 	bics.w	r2, r2, #3
   198fc:	d110      	bne.n	19920 <queue_insert+0x10c>
Z_GENLIST_APPEND(sflist, sfnode)
   198fe:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19900:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   19902:	b93a      	cbnz	r2, 19914 <queue_insert+0x100>
	list->head = node;
   19904:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   19908:	2104      	movs	r1, #4
   1990a:	f104 0014 	add.w	r0, r4, #20
   1990e:	f005 fe19 	bl	1f544 <z_handle_obj_poll_events>
   19912:	e7b5      	b.n	19880 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19914:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19916:	f003 0303 	and.w	r3, r3, #3
   1991a:	4303      	orrs	r3, r0
   1991c:	6013      	str	r3, [r2, #0]
   1991e:	e7e4      	b.n	198ea <queue_insert+0xd6>
   19920:	4313      	orrs	r3, r2
   19922:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19924:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19926:	f003 0303 	and.w	r3, r3, #3
   1992a:	4303      	orrs	r3, r0
   1992c:	6033      	str	r3, [r6, #0]
}
   1992e:	e7eb      	b.n	19908 <queue_insert+0xf4>
   19930:	0001ff75 	.word	0x0001ff75
   19934:	0001ffc7 	.word	0x0001ffc7
   19938:	0001feb5 	.word	0x0001feb5
   1993c:	0001ffdc 	.word	0x0001ffdc
   19940:	0001ff9b 	.word	0x0001ff9b
   19944:	0001ffb2 	.word	0x0001ffb2

00019948 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   19948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1994c:	4605      	mov	r5, r0
   1994e:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   19950:	460c      	mov	r4, r1
   19952:	2900      	cmp	r1, #0
   19954:	d04a      	beq.n	199ec <k_queue_append_list+0xa4>
   19956:	2a00      	cmp	r2, #0
   19958:	d048      	beq.n	199ec <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1995a:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1995e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19962:	f3ef 8911 	mrs	r9, BASEPRI
   19966:	f383 8812 	msr	BASEPRI_MAX, r3
   1996a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1996e:	4630      	mov	r0, r6
   19970:	f7ff fd36 	bl	193e0 <z_spin_lock_valid>
   19974:	b968      	cbnz	r0, 19992 <k_queue_append_list+0x4a>
   19976:	4a1f      	ldr	r2, [pc, #124]	; (199f4 <k_queue_append_list+0xac>)
   19978:	491f      	ldr	r1, [pc, #124]	; (199f8 <k_queue_append_list+0xb0>)
   1997a:	4820      	ldr	r0, [pc, #128]	; (199fc <k_queue_append_list+0xb4>)
   1997c:	2381      	movs	r3, #129	; 0x81
   1997e:	f003 f810 	bl	1c9a2 <printk>
   19982:	481f      	ldr	r0, [pc, #124]	; (19a00 <k_queue_append_list+0xb8>)
   19984:	4631      	mov	r1, r6
   19986:	f003 f80c 	bl	1c9a2 <printk>
   1998a:	481a      	ldr	r0, [pc, #104]	; (199f4 <k_queue_append_list+0xac>)
   1998c:	2181      	movs	r1, #129	; 0x81
   1998e:	f003 fa62 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   19992:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   19994:	f105 080c 	add.w	r8, r5, #12
   19998:	f7ff fd40 	bl	1941c <z_spin_lock_set_owner>
   1999c:	4640      	mov	r0, r8
   1999e:	f001 fd17 	bl	1b3d0 <z_unpend_first_thread>
   199a2:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   199a6:	b920      	cbnz	r0, 199b2 <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   199a8:	686b      	ldr	r3, [r5, #4]
   199aa:	b9cb      	cbnz	r3, 199e0 <k_queue_append_list+0x98>
	list->head = node;
   199ac:	602c      	str	r4, [r5, #0]
	list->tail = node;
   199ae:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   199b0:	e00a      	b.n	199c8 <k_queue_append_list+0x80>
	thread->base.swap_data = data;
   199b2:	6144      	str	r4, [r0, #20]
   199b4:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   199b8:	f001 f9a6 	bl	1ad08 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   199bc:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   199be:	4640      	mov	r0, r8
   199c0:	f001 fd06 	bl	1b3d0 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   199c4:	2c00      	cmp	r4, #0
   199c6:	d1ee      	bne.n	199a6 <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
   199c8:	2104      	movs	r1, #4
   199ca:	f105 0014 	add.w	r0, r5, #20
   199ce:	f005 fdb9 	bl	1f544 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   199d2:	4630      	mov	r0, r6
   199d4:	4649      	mov	r1, r9
   199d6:	f000 fef7 	bl	1a7c8 <z_reschedule>
	return 0;
   199da:	2000      	movs	r0, #0
}
   199dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   199e0:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   199e2:	f001 0103 	and.w	r1, r1, #3
   199e6:	430c      	orrs	r4, r1
   199e8:	601c      	str	r4, [r3, #0]
}
   199ea:	e7e0      	b.n	199ae <k_queue_append_list+0x66>
		return -EINVAL;
   199ec:	f06f 0015 	mvn.w	r0, #21
   199f0:	e7f4      	b.n	199dc <k_queue_append_list+0x94>
   199f2:	bf00      	nop
   199f4:	0001ff75 	.word	0x0001ff75
   199f8:	0001ffc7 	.word	0x0001ffc7
   199fc:	0001feb5 	.word	0x0001feb5
   19a00:	0001ffdc 	.word	0x0001ffdc

00019a04 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   19a04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   19a08:	4606      	mov	r6, r0
   19a0a:	4690      	mov	r8, r2
   19a0c:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   19a0e:	f100 0508 	add.w	r5, r0, #8
   19a12:	f04f 0340 	mov.w	r3, #64	; 0x40
   19a16:	f3ef 8711 	mrs	r7, BASEPRI
   19a1a:	f383 8812 	msr	BASEPRI_MAX, r3
   19a1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19a22:	4628      	mov	r0, r5
   19a24:	f7ff fcdc 	bl	193e0 <z_spin_lock_valid>
   19a28:	b968      	cbnz	r0, 19a46 <z_impl_k_queue_get+0x42>
   19a2a:	4a25      	ldr	r2, [pc, #148]	; (19ac0 <z_impl_k_queue_get+0xbc>)
   19a2c:	4925      	ldr	r1, [pc, #148]	; (19ac4 <z_impl_k_queue_get+0xc0>)
   19a2e:	4826      	ldr	r0, [pc, #152]	; (19ac8 <z_impl_k_queue_get+0xc4>)
   19a30:	2381      	movs	r3, #129	; 0x81
   19a32:	f002 ffb6 	bl	1c9a2 <printk>
   19a36:	4825      	ldr	r0, [pc, #148]	; (19acc <z_impl_k_queue_get+0xc8>)
   19a38:	4629      	mov	r1, r5
   19a3a:	f002 ffb2 	bl	1c9a2 <printk>
   19a3e:	4820      	ldr	r0, [pc, #128]	; (19ac0 <z_impl_k_queue_get+0xbc>)
   19a40:	2181      	movs	r1, #129	; 0x81
   19a42:	f003 fa08 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   19a46:	4628      	mov	r0, r5
   19a48:	f7ff fce8 	bl	1941c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   19a4c:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   19a4e:	b334      	cbz	r4, 19a9e <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19a50:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   19a52:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19a54:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   19a58:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   19a5a:	4620      	mov	r0, r4
	list->head = node;
   19a5c:	6033      	str	r3, [r6, #0]
	list->tail = node;
   19a5e:	bf08      	it	eq
   19a60:	6073      	streq	r3, [r6, #4]
   19a62:	2101      	movs	r1, #1
   19a64:	f005 fc49 	bl	1f2fa <z_queue_node_peek>
   19a68:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19a6a:	4628      	mov	r0, r5
   19a6c:	f7ff fcc6 	bl	193fc <z_spin_unlock_valid>
   19a70:	b968      	cbnz	r0, 19a8e <z_impl_k_queue_get+0x8a>
   19a72:	4a13      	ldr	r2, [pc, #76]	; (19ac0 <z_impl_k_queue_get+0xbc>)
   19a74:	4916      	ldr	r1, [pc, #88]	; (19ad0 <z_impl_k_queue_get+0xcc>)
   19a76:	4814      	ldr	r0, [pc, #80]	; (19ac8 <z_impl_k_queue_get+0xc4>)
   19a78:	23ac      	movs	r3, #172	; 0xac
   19a7a:	f002 ff92 	bl	1c9a2 <printk>
   19a7e:	4815      	ldr	r0, [pc, #84]	; (19ad4 <z_impl_k_queue_get+0xd0>)
   19a80:	4629      	mov	r1, r5
   19a82:	f002 ff8e 	bl	1c9a2 <printk>
   19a86:	480e      	ldr	r0, [pc, #56]	; (19ac0 <z_impl_k_queue_get+0xbc>)
   19a88:	21ac      	movs	r1, #172	; 0xac
   19a8a:	f003 f9e4 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   19a8e:	f387 8811 	msr	BASEPRI, r7
   19a92:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   19a96:	4620      	mov	r0, r4
   19a98:	b003      	add	sp, #12
   19a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19a9e:	ea58 0309 	orrs.w	r3, r8, r9
   19aa2:	d0e2      	beq.n	19a6a <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   19aa4:	e9cd 8900 	strd	r8, r9, [sp]
   19aa8:	f106 020c 	add.w	r2, r6, #12
   19aac:	4639      	mov	r1, r7
   19aae:	4628      	mov	r0, r5
   19ab0:	f001 fadc 	bl	1b06c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   19ab4:	2800      	cmp	r0, #0
   19ab6:	d1ee      	bne.n	19a96 <z_impl_k_queue_get+0x92>
   19ab8:	4b07      	ldr	r3, [pc, #28]	; (19ad8 <z_impl_k_queue_get+0xd4>)
   19aba:	689b      	ldr	r3, [r3, #8]
   19abc:	695c      	ldr	r4, [r3, #20]
   19abe:	e7ea      	b.n	19a96 <z_impl_k_queue_get+0x92>
   19ac0:	0001ff75 	.word	0x0001ff75
   19ac4:	0001ffc7 	.word	0x0001ffc7
   19ac8:	0001feb5 	.word	0x0001feb5
   19acc:	0001ffdc 	.word	0x0001ffdc
   19ad0:	0001ff9b 	.word	0x0001ff9b
   19ad4:	0001ffb2 	.word	0x0001ffb2
   19ad8:	20001eb4 	.word	0x20001eb4

00019adc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   19adc:	b538      	push	{r3, r4, r5, lr}
   19ade:	4604      	mov	r4, r0
	__asm__ volatile(
   19ae0:	f04f 0340 	mov.w	r3, #64	; 0x40
   19ae4:	f3ef 8511 	mrs	r5, BASEPRI
   19ae8:	f383 8812 	msr	BASEPRI_MAX, r3
   19aec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19af0:	4817      	ldr	r0, [pc, #92]	; (19b50 <z_impl_k_sem_give+0x74>)
   19af2:	f7ff fc75 	bl	193e0 <z_spin_lock_valid>
   19af6:	b968      	cbnz	r0, 19b14 <z_impl_k_sem_give+0x38>
   19af8:	4a16      	ldr	r2, [pc, #88]	; (19b54 <z_impl_k_sem_give+0x78>)
   19afa:	4917      	ldr	r1, [pc, #92]	; (19b58 <z_impl_k_sem_give+0x7c>)
   19afc:	4817      	ldr	r0, [pc, #92]	; (19b5c <z_impl_k_sem_give+0x80>)
   19afe:	2381      	movs	r3, #129	; 0x81
   19b00:	f002 ff4f 	bl	1c9a2 <printk>
   19b04:	4912      	ldr	r1, [pc, #72]	; (19b50 <z_impl_k_sem_give+0x74>)
   19b06:	4816      	ldr	r0, [pc, #88]	; (19b60 <z_impl_k_sem_give+0x84>)
   19b08:	f002 ff4b 	bl	1c9a2 <printk>
   19b0c:	4811      	ldr	r0, [pc, #68]	; (19b54 <z_impl_k_sem_give+0x78>)
   19b0e:	2181      	movs	r1, #129	; 0x81
   19b10:	f003 f9a1 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   19b14:	480e      	ldr	r0, [pc, #56]	; (19b50 <z_impl_k_sem_give+0x74>)
   19b16:	f7ff fc81 	bl	1941c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   19b1a:	4620      	mov	r0, r4
   19b1c:	f001 fc58 	bl	1b3d0 <z_unpend_first_thread>

	if (thread != NULL) {
   19b20:	b148      	cbz	r0, 19b36 <z_impl_k_sem_give+0x5a>
   19b22:	2200      	movs	r2, #0
   19b24:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   19b26:	f001 f8ef 	bl	1ad08 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   19b2a:	4629      	mov	r1, r5
   19b2c:	4808      	ldr	r0, [pc, #32]	; (19b50 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   19b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   19b32:	f000 be49 	b.w	1a7c8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   19b36:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   19b3a:	429a      	cmp	r2, r3
   19b3c:	bf18      	it	ne
   19b3e:	3301      	addne	r3, #1
   19b40:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   19b42:	2102      	movs	r1, #2
   19b44:	f104 0010 	add.w	r0, r4, #16
   19b48:	f005 fcfc 	bl	1f544 <z_handle_obj_poll_events>
}
   19b4c:	e7ed      	b.n	19b2a <z_impl_k_sem_give+0x4e>
   19b4e:	bf00      	nop
   19b50:	20001ee0 	.word	0x20001ee0
   19b54:	0001ff75 	.word	0x0001ff75
   19b58:	0001ffc7 	.word	0x0001ffc7
   19b5c:	0001feb5 	.word	0x0001feb5
   19b60:	0001ffdc 	.word	0x0001ffdc

00019b64 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   19b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19b66:	4604      	mov	r4, r0
   19b68:	4616      	mov	r6, r2
   19b6a:	461f      	mov	r7, r3
   19b6c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   19b70:	b17b      	cbz	r3, 19b92 <z_impl_k_sem_take+0x2e>
   19b72:	ea56 0307 	orrs.w	r3, r6, r7
   19b76:	d00c      	beq.n	19b92 <z_impl_k_sem_take+0x2e>
   19b78:	4935      	ldr	r1, [pc, #212]	; (19c50 <z_impl_k_sem_take+0xec>)
   19b7a:	4a36      	ldr	r2, [pc, #216]	; (19c54 <z_impl_k_sem_take+0xf0>)
   19b7c:	4836      	ldr	r0, [pc, #216]	; (19c58 <z_impl_k_sem_take+0xf4>)
   19b7e:	2379      	movs	r3, #121	; 0x79
   19b80:	f002 ff0f 	bl	1c9a2 <printk>
   19b84:	4835      	ldr	r0, [pc, #212]	; (19c5c <z_impl_k_sem_take+0xf8>)
   19b86:	f002 ff0c 	bl	1c9a2 <printk>
   19b8a:	4832      	ldr	r0, [pc, #200]	; (19c54 <z_impl_k_sem_take+0xf0>)
   19b8c:	2179      	movs	r1, #121	; 0x79
   19b8e:	f003 f962 	bl	1ce56 <assert_post_action>
   19b92:	f04f 0340 	mov.w	r3, #64	; 0x40
   19b96:	f3ef 8511 	mrs	r5, BASEPRI
   19b9a:	f383 8812 	msr	BASEPRI_MAX, r3
   19b9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19ba2:	482f      	ldr	r0, [pc, #188]	; (19c60 <z_impl_k_sem_take+0xfc>)
   19ba4:	f7ff fc1c 	bl	193e0 <z_spin_lock_valid>
   19ba8:	b968      	cbnz	r0, 19bc6 <z_impl_k_sem_take+0x62>
   19baa:	4a2e      	ldr	r2, [pc, #184]	; (19c64 <z_impl_k_sem_take+0x100>)
   19bac:	492e      	ldr	r1, [pc, #184]	; (19c68 <z_impl_k_sem_take+0x104>)
   19bae:	482a      	ldr	r0, [pc, #168]	; (19c58 <z_impl_k_sem_take+0xf4>)
   19bb0:	2381      	movs	r3, #129	; 0x81
   19bb2:	f002 fef6 	bl	1c9a2 <printk>
   19bb6:	492a      	ldr	r1, [pc, #168]	; (19c60 <z_impl_k_sem_take+0xfc>)
   19bb8:	482c      	ldr	r0, [pc, #176]	; (19c6c <z_impl_k_sem_take+0x108>)
   19bba:	f002 fef2 	bl	1c9a2 <printk>
   19bbe:	4829      	ldr	r0, [pc, #164]	; (19c64 <z_impl_k_sem_take+0x100>)
   19bc0:	2181      	movs	r1, #129	; 0x81
   19bc2:	f003 f948 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   19bc6:	4826      	ldr	r0, [pc, #152]	; (19c60 <z_impl_k_sem_take+0xfc>)
   19bc8:	f7ff fc28 	bl	1941c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   19bcc:	68a3      	ldr	r3, [r4, #8]
   19bce:	b1d3      	cbz	r3, 19c06 <z_impl_k_sem_take+0xa2>
		sem->count--;
   19bd0:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19bd2:	4823      	ldr	r0, [pc, #140]	; (19c60 <z_impl_k_sem_take+0xfc>)
   19bd4:	60a3      	str	r3, [r4, #8]
   19bd6:	f7ff fc11 	bl	193fc <z_spin_unlock_valid>
   19bda:	b968      	cbnz	r0, 19bf8 <z_impl_k_sem_take+0x94>
   19bdc:	4a21      	ldr	r2, [pc, #132]	; (19c64 <z_impl_k_sem_take+0x100>)
   19bde:	4924      	ldr	r1, [pc, #144]	; (19c70 <z_impl_k_sem_take+0x10c>)
   19be0:	481d      	ldr	r0, [pc, #116]	; (19c58 <z_impl_k_sem_take+0xf4>)
   19be2:	23ac      	movs	r3, #172	; 0xac
   19be4:	f002 fedd 	bl	1c9a2 <printk>
   19be8:	491d      	ldr	r1, [pc, #116]	; (19c60 <z_impl_k_sem_take+0xfc>)
   19bea:	4822      	ldr	r0, [pc, #136]	; (19c74 <z_impl_k_sem_take+0x110>)
   19bec:	f002 fed9 	bl	1c9a2 <printk>
   19bf0:	481c      	ldr	r0, [pc, #112]	; (19c64 <z_impl_k_sem_take+0x100>)
   19bf2:	21ac      	movs	r1, #172	; 0xac
   19bf4:	f003 f92f 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   19bf8:	f385 8811 	msr	BASEPRI, r5
   19bfc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   19c00:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   19c02:	b003      	add	sp, #12
   19c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19c06:	ea56 0307 	orrs.w	r3, r6, r7
   19c0a:	d118      	bne.n	19c3e <z_impl_k_sem_take+0xda>
   19c0c:	4814      	ldr	r0, [pc, #80]	; (19c60 <z_impl_k_sem_take+0xfc>)
   19c0e:	f7ff fbf5 	bl	193fc <z_spin_unlock_valid>
   19c12:	b968      	cbnz	r0, 19c30 <z_impl_k_sem_take+0xcc>
   19c14:	4a13      	ldr	r2, [pc, #76]	; (19c64 <z_impl_k_sem_take+0x100>)
   19c16:	4916      	ldr	r1, [pc, #88]	; (19c70 <z_impl_k_sem_take+0x10c>)
   19c18:	480f      	ldr	r0, [pc, #60]	; (19c58 <z_impl_k_sem_take+0xf4>)
   19c1a:	23ac      	movs	r3, #172	; 0xac
   19c1c:	f002 fec1 	bl	1c9a2 <printk>
   19c20:	490f      	ldr	r1, [pc, #60]	; (19c60 <z_impl_k_sem_take+0xfc>)
   19c22:	4814      	ldr	r0, [pc, #80]	; (19c74 <z_impl_k_sem_take+0x110>)
   19c24:	f002 febd 	bl	1c9a2 <printk>
   19c28:	480e      	ldr	r0, [pc, #56]	; (19c64 <z_impl_k_sem_take+0x100>)
   19c2a:	21ac      	movs	r1, #172	; 0xac
   19c2c:	f003 f913 	bl	1ce56 <assert_post_action>
   19c30:	f385 8811 	msr	BASEPRI, r5
   19c34:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   19c38:	f06f 000f 	mvn.w	r0, #15
   19c3c:	e7e1      	b.n	19c02 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   19c3e:	e9cd 6700 	strd	r6, r7, [sp]
   19c42:	4622      	mov	r2, r4
   19c44:	4629      	mov	r1, r5
   19c46:	4806      	ldr	r0, [pc, #24]	; (19c60 <z_impl_k_sem_take+0xfc>)
   19c48:	f001 fa10 	bl	1b06c <z_pend_curr>
	return ret;
   19c4c:	e7d9      	b.n	19c02 <z_impl_k_sem_take+0x9e>
   19c4e:	bf00      	nop
   19c50:	00021660 	.word	0x00021660
   19c54:	00021640 	.word	0x00021640
   19c58:	0001feb5 	.word	0x0001feb5
   19c5c:	00020d40 	.word	0x00020d40
   19c60:	20001ee0 	.word	0x20001ee0
   19c64:	0001ff75 	.word	0x0001ff75
   19c68:	0001ffc7 	.word	0x0001ffc7
   19c6c:	0001ffdc 	.word	0x0001ffdc
   19c70:	0001ff9b 	.word	0x0001ff9b
   19c74:	0001ffb2 	.word	0x0001ffb2

00019c78 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   19c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   19c7a:	4b09      	ldr	r3, [pc, #36]	; (19ca0 <k_sys_work_q_init+0x28>)
   19c7c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   19c7e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   19c80:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   19c82:	9300      	str	r3, [sp, #0]
   19c84:	4907      	ldr	r1, [pc, #28]	; (19ca4 <k_sys_work_q_init+0x2c>)
   19c86:	4808      	ldr	r0, [pc, #32]	; (19ca8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   19c88:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   19c8c:	f04f 33ff 	mov.w	r3, #4294967295
   19c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19c94:	f000 fa88 	bl	1a1a8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   19c98:	4620      	mov	r0, r4
   19c9a:	b004      	add	sp, #16
   19c9c:	bd10      	pop	{r4, pc}
   19c9e:	bf00      	nop
   19ca0:	000216ad 	.word	0x000216ad
   19ca4:	20004880 	.word	0x20004880
   19ca8:	20001ae0 	.word	0x20001ae0

00019cac <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   19cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19cb0:	4e7e      	ldr	r6, [pc, #504]	; (19eac <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   19cb2:	4f7f      	ldr	r7, [pc, #508]	; (19eb0 <work_queue_main+0x204>)
{
   19cb4:	b085      	sub	sp, #20
   19cb6:	4604      	mov	r4, r0
	__asm__ volatile(
   19cb8:	f04f 0340 	mov.w	r3, #64	; 0x40
   19cbc:	f3ef 8811 	mrs	r8, BASEPRI
   19cc0:	f383 8812 	msr	BASEPRI_MAX, r3
   19cc4:	f3bf 8f6f 	isb	sy
   19cc8:	4630      	mov	r0, r6
   19cca:	f7ff fb89 	bl	193e0 <z_spin_lock_valid>
   19cce:	b968      	cbnz	r0, 19cec <work_queue_main+0x40>
   19cd0:	4a78      	ldr	r2, [pc, #480]	; (19eb4 <work_queue_main+0x208>)
   19cd2:	4979      	ldr	r1, [pc, #484]	; (19eb8 <work_queue_main+0x20c>)
   19cd4:	4879      	ldr	r0, [pc, #484]	; (19ebc <work_queue_main+0x210>)
   19cd6:	2381      	movs	r3, #129	; 0x81
   19cd8:	f002 fe63 	bl	1c9a2 <printk>
   19cdc:	4878      	ldr	r0, [pc, #480]	; (19ec0 <work_queue_main+0x214>)
   19cde:	4631      	mov	r1, r6
   19ce0:	f002 fe5f 	bl	1c9a2 <printk>
   19ce4:	4873      	ldr	r0, [pc, #460]	; (19eb4 <work_queue_main+0x208>)
   19ce6:	2181      	movs	r1, #129	; 0x81
   19ce8:	f003 f8b5 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   19cec:	4630      	mov	r0, r6
   19cee:	f7ff fb95 	bl	1941c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   19cf2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   19cf6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   19cfa:	b9ad      	cbnz	r5, 19d28 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
   19cfc:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   19d00:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   19d02:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   19d06:	f100 8092 	bmi.w	19e2e <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   19d0a:	2300      	movs	r3, #0
   19d0c:	9302      	str	r3, [sp, #8]
   19d0e:	f04f 32ff 	mov.w	r2, #4294967295
   19d12:	f04f 33ff 	mov.w	r3, #4294967295
   19d16:	e9cd 2300 	strd	r2, r3, [sp]
   19d1a:	4641      	mov	r1, r8
   19d1c:	f104 0288 	add.w	r2, r4, #136	; 0x88
   19d20:	4630      	mov	r0, r6
   19d22:	f001 fe5d 	bl	1b9e0 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   19d26:	e7c7      	b.n	19cb8 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19d28:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   19d2c:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   19d2e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19d32:	428d      	cmp	r5, r1
   19d34:	d101      	bne.n	19d3a <work_queue_main+0x8e>
	list->tail = node;
   19d36:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   19d3a:	f043 0302 	orr.w	r3, r3, #2
   19d3e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   19d42:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   19d44:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   19d48:	f023 0304 	bic.w	r3, r3, #4
   19d4c:	f043 0301 	orr.w	r3, r3, #1
   19d50:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19d52:	4630      	mov	r0, r6
   19d54:	f7ff fb52 	bl	193fc <z_spin_unlock_valid>
   19d58:	b968      	cbnz	r0, 19d76 <work_queue_main+0xca>
   19d5a:	4a56      	ldr	r2, [pc, #344]	; (19eb4 <work_queue_main+0x208>)
   19d5c:	4959      	ldr	r1, [pc, #356]	; (19ec4 <work_queue_main+0x218>)
   19d5e:	4857      	ldr	r0, [pc, #348]	; (19ebc <work_queue_main+0x210>)
   19d60:	23ac      	movs	r3, #172	; 0xac
   19d62:	f002 fe1e 	bl	1c9a2 <printk>
   19d66:	4858      	ldr	r0, [pc, #352]	; (19ec8 <work_queue_main+0x21c>)
   19d68:	4631      	mov	r1, r6
   19d6a:	f002 fe1a 	bl	1c9a2 <printk>
   19d6e:	4851      	ldr	r0, [pc, #324]	; (19eb4 <work_queue_main+0x208>)
   19d70:	21ac      	movs	r1, #172	; 0xac
   19d72:	f003 f870 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   19d76:	f388 8811 	msr	BASEPRI, r8
   19d7a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
   19d7e:	f1b9 0f00 	cmp.w	r9, #0
   19d82:	d10b      	bne.n	19d9c <work_queue_main+0xf0>
   19d84:	4951      	ldr	r1, [pc, #324]	; (19ecc <work_queue_main+0x220>)
   19d86:	484d      	ldr	r0, [pc, #308]	; (19ebc <work_queue_main+0x210>)
   19d88:	4a51      	ldr	r2, [pc, #324]	; (19ed0 <work_queue_main+0x224>)
   19d8a:	f240 238a 	movw	r3, #650	; 0x28a
   19d8e:	f002 fe08 	bl	1c9a2 <printk>
   19d92:	484f      	ldr	r0, [pc, #316]	; (19ed0 <work_queue_main+0x224>)
   19d94:	f240 218a 	movw	r1, #650	; 0x28a
   19d98:	f003 f85d 	bl	1ce56 <assert_post_action>
			handler(work);
   19d9c:	4628      	mov	r0, r5
   19d9e:	47c8      	blx	r9
	__asm__ volatile(
   19da0:	f04f 0340 	mov.w	r3, #64	; 0x40
   19da4:	f3ef 8a11 	mrs	sl, BASEPRI
   19da8:	f383 8812 	msr	BASEPRI_MAX, r3
   19dac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19db0:	4630      	mov	r0, r6
   19db2:	f7ff fb15 	bl	193e0 <z_spin_lock_valid>
   19db6:	b968      	cbnz	r0, 19dd4 <work_queue_main+0x128>
   19db8:	4a3e      	ldr	r2, [pc, #248]	; (19eb4 <work_queue_main+0x208>)
   19dba:	493f      	ldr	r1, [pc, #252]	; (19eb8 <work_queue_main+0x20c>)
   19dbc:	483f      	ldr	r0, [pc, #252]	; (19ebc <work_queue_main+0x210>)
   19dbe:	2381      	movs	r3, #129	; 0x81
   19dc0:	f002 fdef 	bl	1c9a2 <printk>
   19dc4:	483e      	ldr	r0, [pc, #248]	; (19ec0 <work_queue_main+0x214>)
   19dc6:	4631      	mov	r1, r6
   19dc8:	f002 fdeb 	bl	1c9a2 <printk>
   19dcc:	4839      	ldr	r0, [pc, #228]	; (19eb4 <work_queue_main+0x208>)
   19dce:	2181      	movs	r1, #129	; 0x81
   19dd0:	f003 f841 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   19dd4:	4630      	mov	r0, r6
   19dd6:	f7ff fb21 	bl	1941c <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   19dda:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19ddc:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   19dde:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19de2:	d42e      	bmi.n	19e42 <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
   19de4:	60ea      	str	r2, [r5, #12]
   19de6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   19dea:	f023 0302 	bic.w	r3, r3, #2
   19dee:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19df2:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   19df4:	f3c3 2500 	ubfx	r5, r3, #8, #1
   19df8:	f7ff fb00 	bl	193fc <z_spin_unlock_valid>
   19dfc:	b968      	cbnz	r0, 19e1a <work_queue_main+0x16e>
   19dfe:	4a2d      	ldr	r2, [pc, #180]	; (19eb4 <work_queue_main+0x208>)
   19e00:	4930      	ldr	r1, [pc, #192]	; (19ec4 <work_queue_main+0x218>)
   19e02:	482e      	ldr	r0, [pc, #184]	; (19ebc <work_queue_main+0x210>)
   19e04:	23ac      	movs	r3, #172	; 0xac
   19e06:	f002 fdcc 	bl	1c9a2 <printk>
   19e0a:	482f      	ldr	r0, [pc, #188]	; (19ec8 <work_queue_main+0x21c>)
   19e0c:	4631      	mov	r1, r6
   19e0e:	f002 fdc8 	bl	1c9a2 <printk>
   19e12:	4828      	ldr	r0, [pc, #160]	; (19eb4 <work_queue_main+0x208>)
   19e14:	21ac      	movs	r1, #172	; 0xac
   19e16:	f003 f81e 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   19e1a:	f38a 8811 	msr	BASEPRI, sl
   19e1e:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   19e22:	2d00      	cmp	r5, #0
   19e24:	f47f af48 	bne.w	19cb8 <work_queue_main+0xc>
	z_impl_k_yield();
   19e28:	f001 fb2e 	bl	1b488 <z_impl_k_yield>
}
   19e2c:	e744      	b.n	19cb8 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   19e2e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   19e32:	2200      	movs	r2, #0
   19e34:	2101      	movs	r1, #1
   19e36:	4628      	mov	r0, r5
   19e38:	f001 fd7a 	bl	1b930 <z_sched_wake>
   19e3c:	2800      	cmp	r0, #0
   19e3e:	d1f8      	bne.n	19e32 <work_queue_main+0x186>
   19e40:	e763      	b.n	19d0a <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   19e42:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   19e44:	f023 0303 	bic.w	r3, r3, #3
   19e48:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   19e4a:	2800      	cmp	r0, #0
   19e4c:	d0cb      	beq.n	19de6 <work_queue_main+0x13a>
	return node->next;
   19e4e:	6803      	ldr	r3, [r0, #0]
   19e50:	2b00      	cmp	r3, #0
   19e52:	bf38      	it	cc
   19e54:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19e56:	f04f 0900 	mov.w	r9, #0
   19e5a:	4698      	mov	r8, r3
	parent->next = child;
   19e5c:	46cb      	mov	fp, r9
		if (wc->work == work) {
   19e5e:	6843      	ldr	r3, [r0, #4]
   19e60:	429d      	cmp	r5, r3
   19e62:	4602      	mov	r2, r0
   19e64:	d10d      	bne.n	19e82 <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
   19e66:	6802      	ldr	r2, [r0, #0]
   19e68:	f1b9 0f00 	cmp.w	r9, #0
   19e6c:	d115      	bne.n	19e9a <work_queue_main+0x1ee>
   19e6e:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   19e70:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   19e72:	4283      	cmp	r3, r0
   19e74:	d100      	bne.n	19e78 <work_queue_main+0x1cc>
	list->tail = node;
   19e76:	607a      	str	r2, [r7, #4]
	parent->next = child;
   19e78:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   19e7c:	f7ff fe2e 	bl	19adc <z_impl_k_sem_give>
}
   19e80:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   19e82:	f1b8 0f00 	cmp.w	r8, #0
   19e86:	d0ae      	beq.n	19de6 <work_queue_main+0x13a>
	return node->next;
   19e88:	f8d8 3000 	ldr.w	r3, [r8]
   19e8c:	2b00      	cmp	r3, #0
   19e8e:	bf38      	it	cc
   19e90:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19e92:	4640      	mov	r0, r8
   19e94:	4691      	mov	r9, r2
   19e96:	4698      	mov	r8, r3
   19e98:	e7e1      	b.n	19e5e <work_queue_main+0x1b2>
	parent->next = child;
   19e9a:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   19e9e:	687b      	ldr	r3, [r7, #4]
   19ea0:	4283      	cmp	r3, r0
	list->tail = node;
   19ea2:	bf08      	it	eq
   19ea4:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   19ea8:	e7e6      	b.n	19e78 <work_queue_main+0x1cc>
   19eaa:	bf00      	nop
   19eac:	20001ee4 	.word	0x20001ee4
   19eb0:	20001ee8 	.word	0x20001ee8
   19eb4:	0001ff75 	.word	0x0001ff75
   19eb8:	0001ffc7 	.word	0x0001ffc7
   19ebc:	0001feb5 	.word	0x0001feb5
   19ec0:	0001ffdc 	.word	0x0001ffdc
   19ec4:	0001ff9b 	.word	0x0001ff9b
   19ec8:	0001ffb2 	.word	0x0001ffb2
   19ecc:	000216d7 	.word	0x000216d7
   19ed0:	000216b6 	.word	0x000216b6

00019ed4 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   19ed4:	68c3      	ldr	r3, [r0, #12]
{
   19ed6:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   19ed8:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   19edc:	079b      	lsls	r3, r3, #30
{
   19ede:	4605      	mov	r5, r0
   19ee0:	460c      	mov	r4, r1
	if (ret) {
   19ee2:	d50d      	bpl.n	19f00 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   19ee4:	2201      	movs	r2, #1
   19ee6:	2100      	movs	r1, #0
   19ee8:	f104 0008 	add.w	r0, r4, #8
   19eec:	f005 fa33 	bl	1f356 <z_impl_k_sem_init>
	parent->next = child;
   19ef0:	2300      	movs	r3, #0
   19ef2:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   19ef4:	4b05      	ldr	r3, [pc, #20]	; (19f0c <cancel_sync_locked+0x38>)
	canceler->work = work;
   19ef6:	6065      	str	r5, [r4, #4]
   19ef8:	685a      	ldr	r2, [r3, #4]
   19efa:	b91a      	cbnz	r2, 19f04 <cancel_sync_locked+0x30>
	list->head = node;
   19efc:	e9c3 4400 	strd	r4, r4, [r3]
}
   19f00:	4630      	mov	r0, r6
   19f02:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   19f04:	6014      	str	r4, [r2, #0]
	list->tail = node;
   19f06:	605c      	str	r4, [r3, #4]
}
   19f08:	e7fa      	b.n	19f00 <cancel_sync_locked+0x2c>
   19f0a:	bf00      	nop
   19f0c:	20001ee8 	.word	0x20001ee8

00019f10 <submit_to_queue_locked>:
{
   19f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19f12:	68c3      	ldr	r3, [r0, #12]
   19f14:	079a      	lsls	r2, r3, #30
{
   19f16:	4604      	mov	r4, r0
   19f18:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19f1a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   19f1e:	d42b      	bmi.n	19f78 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   19f20:	075f      	lsls	r7, r3, #29
   19f22:	d42b      	bmi.n	19f7c <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
   19f24:	680a      	ldr	r2, [r1, #0]
   19f26:	b90a      	cbnz	r2, 19f2c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   19f28:	6882      	ldr	r2, [r0, #8]
   19f2a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   19f2c:	07d8      	lsls	r0, r3, #31
   19f2e:	d528      	bpl.n	19f82 <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
   19f30:	68a3      	ldr	r3, [r4, #8]
   19f32:	b95b      	cbnz	r3, 19f4c <submit_to_queue_locked+0x3c>
   19f34:	4924      	ldr	r1, [pc, #144]	; (19fc8 <submit_to_queue_locked+0xb8>)
   19f36:	4825      	ldr	r0, [pc, #148]	; (19fcc <submit_to_queue_locked+0xbc>)
   19f38:	4a25      	ldr	r2, [pc, #148]	; (19fd0 <submit_to_queue_locked+0xc0>)
   19f3a:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   19f3e:	f002 fd30 	bl	1c9a2 <printk>
   19f42:	4823      	ldr	r0, [pc, #140]	; (19fd0 <submit_to_queue_locked+0xc0>)
   19f44:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   19f48:	f002 ff85 	bl	1ce56 <assert_post_action>
			*queuep = work->queue;
   19f4c:	68a3      	ldr	r3, [r4, #8]
   19f4e:	6033      	str	r3, [r6, #0]
			ret = 2;
   19f50:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
   19f52:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   19f54:	b38f      	cbz	r7, 19fba <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   19f56:	4b1f      	ldr	r3, [pc, #124]	; (19fd4 <submit_to_queue_locked+0xc4>)
   19f58:	689b      	ldr	r3, [r3, #8]
   19f5a:	42bb      	cmp	r3, r7
   19f5c:	d113      	bne.n	19f86 <submit_to_queue_locked+0x76>
   19f5e:	f005 f9ba 	bl	1f2d6 <k_is_in_isr>
   19f62:	f080 0001 	eor.w	r0, r0, #1
   19f66:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   19f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   19f6c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   19f6e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   19f72:	d525      	bpl.n	19fc0 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
   19f74:	b14a      	cbz	r2, 19f8a <submit_to_queue_locked+0x7a>
   19f76:	b950      	cbnz	r0, 19f8e <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   19f78:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   19f7c:	2300      	movs	r3, #0
   19f7e:	6033      	str	r3, [r6, #0]
	return ret;
   19f80:	e015      	b.n	19fae <submit_to_queue_locked+0x9e>
		ret = 1;
   19f82:	2501      	movs	r5, #1
   19f84:	e7e5      	b.n	19f52 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   19f86:	2000      	movs	r0, #0
   19f88:	e7ee      	b.n	19f68 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
   19f8a:	071b      	lsls	r3, r3, #28
   19f8c:	d4f4      	bmi.n	19f78 <submit_to_queue_locked+0x68>
	parent->next = child;
   19f8e:	2300      	movs	r3, #0
   19f90:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   19f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   19f96:	b963      	cbnz	r3, 19fb2 <submit_to_queue_locked+0xa2>
	list->head = node;
   19f98:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   19f9c:	4638      	mov	r0, r7
   19f9e:	f005 f9ea 	bl	1f376 <notify_queue_locked>
	*flagp |= BIT(bit);
   19fa2:	68e3      	ldr	r3, [r4, #12]
   19fa4:	f043 0304 	orr.w	r3, r3, #4
   19fa8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   19faa:	6833      	ldr	r3, [r6, #0]
   19fac:	60a3      	str	r3, [r4, #8]
}
   19fae:	4628      	mov	r0, r5
   19fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   19fb2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19fb4:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   19fb8:	e7f0      	b.n	19f9c <submit_to_queue_locked+0x8c>
		return -EINVAL;
   19fba:	f06f 0515 	mvn.w	r5, #21
   19fbe:	e7dd      	b.n	19f7c <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
   19fc0:	f06f 0512 	mvn.w	r5, #18
   19fc4:	e7da      	b.n	19f7c <submit_to_queue_locked+0x6c>
   19fc6:	bf00      	nop
   19fc8:	000216ee 	.word	0x000216ee
   19fcc:	0001feb5 	.word	0x0001feb5
   19fd0:	000216b6 	.word	0x000216b6
   19fd4:	20001eb4 	.word	0x20001eb4

00019fd8 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   19fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19fda:	4604      	mov	r4, r0
	__asm__ volatile(
   19fdc:	f04f 0340 	mov.w	r3, #64	; 0x40
   19fe0:	f3ef 8511 	mrs	r5, BASEPRI
   19fe4:	f383 8812 	msr	BASEPRI_MAX, r3
   19fe8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19fec:	481e      	ldr	r0, [pc, #120]	; (1a068 <work_timeout+0x90>)
   19fee:	f7ff f9f7 	bl	193e0 <z_spin_lock_valid>
   19ff2:	b968      	cbnz	r0, 1a010 <work_timeout+0x38>
   19ff4:	4a1d      	ldr	r2, [pc, #116]	; (1a06c <work_timeout+0x94>)
   19ff6:	491e      	ldr	r1, [pc, #120]	; (1a070 <work_timeout+0x98>)
   19ff8:	481e      	ldr	r0, [pc, #120]	; (1a074 <work_timeout+0x9c>)
   19ffa:	2381      	movs	r3, #129	; 0x81
   19ffc:	f002 fcd1 	bl	1c9a2 <printk>
   1a000:	4919      	ldr	r1, [pc, #100]	; (1a068 <work_timeout+0x90>)
   1a002:	481d      	ldr	r0, [pc, #116]	; (1a078 <work_timeout+0xa0>)
   1a004:	f002 fccd 	bl	1c9a2 <printk>
   1a008:	4818      	ldr	r0, [pc, #96]	; (1a06c <work_timeout+0x94>)
   1a00a:	2181      	movs	r1, #129	; 0x81
   1a00c:	f002 ff23 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a010:	4815      	ldr	r0, [pc, #84]	; (1a068 <work_timeout+0x90>)
   1a012:	f7ff fa03 	bl	1941c <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   1a016:	2300      	movs	r3, #0
   1a018:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   1a01a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   1a01e:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1a022:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   1a024:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1a028:	d506      	bpl.n	1a038 <work_timeout+0x60>
		queue = dw->queue;
   1a02a:	69a3      	ldr	r3, [r4, #24]
   1a02c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1a02e:	a901      	add	r1, sp, #4
   1a030:	f1a4 0010 	sub.w	r0, r4, #16
   1a034:	f7ff ff6c 	bl	19f10 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a038:	480b      	ldr	r0, [pc, #44]	; (1a068 <work_timeout+0x90>)
   1a03a:	f7ff f9df 	bl	193fc <z_spin_unlock_valid>
   1a03e:	b968      	cbnz	r0, 1a05c <work_timeout+0x84>
   1a040:	4a0a      	ldr	r2, [pc, #40]	; (1a06c <work_timeout+0x94>)
   1a042:	490e      	ldr	r1, [pc, #56]	; (1a07c <work_timeout+0xa4>)
   1a044:	480b      	ldr	r0, [pc, #44]	; (1a074 <work_timeout+0x9c>)
   1a046:	23ac      	movs	r3, #172	; 0xac
   1a048:	f002 fcab 	bl	1c9a2 <printk>
   1a04c:	4906      	ldr	r1, [pc, #24]	; (1a068 <work_timeout+0x90>)
   1a04e:	480c      	ldr	r0, [pc, #48]	; (1a080 <work_timeout+0xa8>)
   1a050:	f002 fca7 	bl	1c9a2 <printk>
   1a054:	4805      	ldr	r0, [pc, #20]	; (1a06c <work_timeout+0x94>)
   1a056:	21ac      	movs	r1, #172	; 0xac
   1a058:	f002 fefd 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1a05c:	f385 8811 	msr	BASEPRI, r5
   1a060:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   1a064:	b003      	add	sp, #12
   1a066:	bd30      	pop	{r4, r5, pc}
   1a068:	20001ee4 	.word	0x20001ee4
   1a06c:	0001ff75 	.word	0x0001ff75
   1a070:	0001ffc7 	.word	0x0001ffc7
   1a074:	0001feb5 	.word	0x0001feb5
   1a078:	0001ffdc 	.word	0x0001ffdc
   1a07c:	0001ff9b 	.word	0x0001ff9b
   1a080:	0001ffb2 	.word	0x0001ffb2

0001a084 <k_work_init>:
{
   1a084:	b538      	push	{r3, r4, r5, lr}
   1a086:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   1a088:	4604      	mov	r4, r0
   1a08a:	b948      	cbnz	r0, 1a0a0 <k_work_init+0x1c>
   1a08c:	490d      	ldr	r1, [pc, #52]	; (1a0c4 <k_work_init+0x40>)
   1a08e:	480e      	ldr	r0, [pc, #56]	; (1a0c8 <k_work_init+0x44>)
   1a090:	4a0e      	ldr	r2, [pc, #56]	; (1a0cc <k_work_init+0x48>)
   1a092:	2389      	movs	r3, #137	; 0x89
   1a094:	f002 fc85 	bl	1c9a2 <printk>
   1a098:	480c      	ldr	r0, [pc, #48]	; (1a0cc <k_work_init+0x48>)
   1a09a:	2189      	movs	r1, #137	; 0x89
   1a09c:	f002 fedb 	bl	1ce56 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   1a0a0:	b94d      	cbnz	r5, 1a0b6 <k_work_init+0x32>
   1a0a2:	490b      	ldr	r1, [pc, #44]	; (1a0d0 <k_work_init+0x4c>)
   1a0a4:	4808      	ldr	r0, [pc, #32]	; (1a0c8 <k_work_init+0x44>)
   1a0a6:	4a09      	ldr	r2, [pc, #36]	; (1a0cc <k_work_init+0x48>)
   1a0a8:	238a      	movs	r3, #138	; 0x8a
   1a0aa:	f002 fc7a 	bl	1c9a2 <printk>
   1a0ae:	4807      	ldr	r0, [pc, #28]	; (1a0cc <k_work_init+0x48>)
   1a0b0:	218a      	movs	r1, #138	; 0x8a
   1a0b2:	f002 fed0 	bl	1ce56 <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1a0b6:	2210      	movs	r2, #16
   1a0b8:	2100      	movs	r1, #0
   1a0ba:	4620      	mov	r0, r4
   1a0bc:	f005 fa87 	bl	1f5ce <memset>
   1a0c0:	6065      	str	r5, [r4, #4]
}
   1a0c2:	bd38      	pop	{r3, r4, r5, pc}
   1a0c4:	0002178d 	.word	0x0002178d
   1a0c8:	0001feb5 	.word	0x0001feb5
   1a0cc:	000216b6 	.word	0x000216b6
   1a0d0:	000216d7 	.word	0x000216d7

0001a0d4 <k_work_submit_to_queue>:
{
   1a0d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   1a0d6:	460c      	mov	r4, r1
{
   1a0d8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   1a0da:	b959      	cbnz	r1, 1a0f4 <k_work_submit_to_queue+0x20>
   1a0dc:	4926      	ldr	r1, [pc, #152]	; (1a178 <k_work_submit_to_queue+0xa4>)
   1a0de:	4827      	ldr	r0, [pc, #156]	; (1a17c <k_work_submit_to_queue+0xa8>)
   1a0e0:	4a27      	ldr	r2, [pc, #156]	; (1a180 <k_work_submit_to_queue+0xac>)
   1a0e2:	f240 1369 	movw	r3, #361	; 0x169
   1a0e6:	f002 fc5c 	bl	1c9a2 <printk>
   1a0ea:	4825      	ldr	r0, [pc, #148]	; (1a180 <k_work_submit_to_queue+0xac>)
   1a0ec:	f240 1169 	movw	r1, #361	; 0x169
   1a0f0:	f002 feb1 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1a0f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a0f8:	f3ef 8511 	mrs	r5, BASEPRI
   1a0fc:	f383 8812 	msr	BASEPRI_MAX, r3
   1a100:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a104:	481f      	ldr	r0, [pc, #124]	; (1a184 <k_work_submit_to_queue+0xb0>)
   1a106:	f7ff f96b 	bl	193e0 <z_spin_lock_valid>
   1a10a:	b968      	cbnz	r0, 1a128 <k_work_submit_to_queue+0x54>
   1a10c:	4a1e      	ldr	r2, [pc, #120]	; (1a188 <k_work_submit_to_queue+0xb4>)
   1a10e:	491f      	ldr	r1, [pc, #124]	; (1a18c <k_work_submit_to_queue+0xb8>)
   1a110:	481a      	ldr	r0, [pc, #104]	; (1a17c <k_work_submit_to_queue+0xa8>)
   1a112:	2381      	movs	r3, #129	; 0x81
   1a114:	f002 fc45 	bl	1c9a2 <printk>
   1a118:	491a      	ldr	r1, [pc, #104]	; (1a184 <k_work_submit_to_queue+0xb0>)
   1a11a:	481d      	ldr	r0, [pc, #116]	; (1a190 <k_work_submit_to_queue+0xbc>)
   1a11c:	f002 fc41 	bl	1c9a2 <printk>
   1a120:	4819      	ldr	r0, [pc, #100]	; (1a188 <k_work_submit_to_queue+0xb4>)
   1a122:	2181      	movs	r1, #129	; 0x81
   1a124:	f002 fe97 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a128:	4816      	ldr	r0, [pc, #88]	; (1a184 <k_work_submit_to_queue+0xb0>)
   1a12a:	f7ff f977 	bl	1941c <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   1a12e:	4620      	mov	r0, r4
   1a130:	a901      	add	r1, sp, #4
   1a132:	f7ff feed 	bl	19f10 <submit_to_queue_locked>
   1a136:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a138:	4812      	ldr	r0, [pc, #72]	; (1a184 <k_work_submit_to_queue+0xb0>)
   1a13a:	f7ff f95f 	bl	193fc <z_spin_unlock_valid>
   1a13e:	b968      	cbnz	r0, 1a15c <k_work_submit_to_queue+0x88>
   1a140:	4a11      	ldr	r2, [pc, #68]	; (1a188 <k_work_submit_to_queue+0xb4>)
   1a142:	4914      	ldr	r1, [pc, #80]	; (1a194 <k_work_submit_to_queue+0xc0>)
   1a144:	480d      	ldr	r0, [pc, #52]	; (1a17c <k_work_submit_to_queue+0xa8>)
   1a146:	23ac      	movs	r3, #172	; 0xac
   1a148:	f002 fc2b 	bl	1c9a2 <printk>
   1a14c:	490d      	ldr	r1, [pc, #52]	; (1a184 <k_work_submit_to_queue+0xb0>)
   1a14e:	4812      	ldr	r0, [pc, #72]	; (1a198 <k_work_submit_to_queue+0xc4>)
   1a150:	f002 fc27 	bl	1c9a2 <printk>
   1a154:	480c      	ldr	r0, [pc, #48]	; (1a188 <k_work_submit_to_queue+0xb4>)
   1a156:	21ac      	movs	r1, #172	; 0xac
   1a158:	f002 fe7d 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1a15c:	f385 8811 	msr	BASEPRI, r5
   1a160:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1a164:	2c00      	cmp	r4, #0
   1a166:	dd04      	ble.n	1a172 <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
   1a168:	f001 fb1e 	bl	1b7a8 <z_impl_k_is_preempt_thread>
   1a16c:	b108      	cbz	r0, 1a172 <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
   1a16e:	f001 f98b 	bl	1b488 <z_impl_k_yield>
}
   1a172:	4620      	mov	r0, r4
   1a174:	b003      	add	sp, #12
   1a176:	bd30      	pop	{r4, r5, pc}
   1a178:	0002178d 	.word	0x0002178d
   1a17c:	0001feb5 	.word	0x0001feb5
   1a180:	000216b6 	.word	0x000216b6
   1a184:	20001ee4 	.word	0x20001ee4
   1a188:	0001ff75 	.word	0x0001ff75
   1a18c:	0001ffc7 	.word	0x0001ffc7
   1a190:	0001ffdc 	.word	0x0001ffdc
   1a194:	0001ff9b 	.word	0x0001ff9b
   1a198:	0001ffb2 	.word	0x0001ffb2

0001a19c <k_work_submit>:
{
   1a19c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1a19e:	4801      	ldr	r0, [pc, #4]	; (1a1a4 <k_work_submit+0x8>)
   1a1a0:	f7ff bf98 	b.w	1a0d4 <k_work_submit_to_queue>
   1a1a4:	20001ae0 	.word	0x20001ae0

0001a1a8 <k_work_queue_start>:
{
   1a1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a1ac:	b088      	sub	sp, #32
   1a1ae:	460e      	mov	r6, r1
   1a1b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1a1b2:	4617      	mov	r7, r2
   1a1b4:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   1a1b6:	4604      	mov	r4, r0
   1a1b8:	b958      	cbnz	r0, 1a1d2 <k_work_queue_start+0x2a>
   1a1ba:	492e      	ldr	r1, [pc, #184]	; (1a274 <k_work_queue_start+0xcc>)
   1a1bc:	482e      	ldr	r0, [pc, #184]	; (1a278 <k_work_queue_start+0xd0>)
   1a1be:	4a2f      	ldr	r2, [pc, #188]	; (1a27c <k_work_queue_start+0xd4>)
   1a1c0:	f44f 732e 	mov.w	r3, #696	; 0x2b8
   1a1c4:	f002 fbed 	bl	1c9a2 <printk>
   1a1c8:	482c      	ldr	r0, [pc, #176]	; (1a27c <k_work_queue_start+0xd4>)
   1a1ca:	f44f 712e 	mov.w	r1, #696	; 0x2b8
   1a1ce:	f002 fe42 	bl	1ce56 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   1a1d2:	b95e      	cbnz	r6, 1a1ec <k_work_queue_start+0x44>
   1a1d4:	492a      	ldr	r1, [pc, #168]	; (1a280 <k_work_queue_start+0xd8>)
   1a1d6:	4828      	ldr	r0, [pc, #160]	; (1a278 <k_work_queue_start+0xd0>)
   1a1d8:	4a28      	ldr	r2, [pc, #160]	; (1a27c <k_work_queue_start+0xd4>)
   1a1da:	f240 23b9 	movw	r3, #697	; 0x2b9
   1a1de:	f002 fbe0 	bl	1c9a2 <printk>
   1a1e2:	4826      	ldr	r0, [pc, #152]	; (1a27c <k_work_queue_start+0xd4>)
   1a1e4:	f240 21b9 	movw	r1, #697	; 0x2b9
   1a1e8:	f002 fe35 	bl	1ce56 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   1a1ec:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   1a1f0:	07db      	lsls	r3, r3, #31
   1a1f2:	d50b      	bpl.n	1a20c <k_work_queue_start+0x64>
   1a1f4:	4923      	ldr	r1, [pc, #140]	; (1a284 <k_work_queue_start+0xdc>)
   1a1f6:	4820      	ldr	r0, [pc, #128]	; (1a278 <k_work_queue_start+0xd0>)
   1a1f8:	4a20      	ldr	r2, [pc, #128]	; (1a27c <k_work_queue_start+0xd4>)
   1a1fa:	f240 23ba 	movw	r3, #698	; 0x2ba
   1a1fe:	f002 fbd0 	bl	1c9a2 <printk>
   1a202:	481e      	ldr	r0, [pc, #120]	; (1a27c <k_work_queue_start+0xd4>)
   1a204:	f240 21ba 	movw	r1, #698	; 0x2ba
   1a208:	f002 fe25 	bl	1ce56 <assert_post_action>
	list->head = NULL;
   1a20c:	2300      	movs	r3, #0
	list->tail = NULL;
   1a20e:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   1a212:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1a216:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   1a21a:	f104 0390 	add.w	r3, r4, #144	; 0x90
   1a21e:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   1a222:	b32d      	cbz	r5, 1a270 <k_work_queue_start+0xc8>
   1a224:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1a226:	2b00      	cmp	r3, #0
   1a228:	f240 1101 	movw	r1, #257	; 0x101
   1a22c:	bf08      	it	eq
   1a22e:	2101      	moveq	r1, #1
	*flagp = flags;
   1a230:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a234:	f04f 32ff 	mov.w	r2, #4294967295
   1a238:	f04f 33ff 	mov.w	r3, #4294967295
   1a23c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a240:	2200      	movs	r2, #0
   1a242:	e9cd 8203 	strd	r8, r2, [sp, #12]
   1a246:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1a24a:	4b0f      	ldr	r3, [pc, #60]	; (1a288 <k_work_queue_start+0xe0>)
   1a24c:	9400      	str	r4, [sp, #0]
   1a24e:	463a      	mov	r2, r7
   1a250:	4631      	mov	r1, r6
   1a252:	4620      	mov	r0, r4
   1a254:	f7fe ffe6 	bl	19224 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1a258:	b125      	cbz	r5, 1a264 <k_work_queue_start+0xbc>
   1a25a:	6829      	ldr	r1, [r5, #0]
   1a25c:	b111      	cbz	r1, 1a264 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
   1a25e:	4620      	mov	r0, r4
   1a260:	f005 f83f 	bl	1f2e2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1a264:	4620      	mov	r0, r4
}
   1a266:	b008      	add	sp, #32
   1a268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a26c:	f005 b83c 	b.w	1f2e8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1a270:	2101      	movs	r1, #1
   1a272:	e7dd      	b.n	1a230 <k_work_queue_start+0x88>
   1a274:	0002174c 	.word	0x0002174c
   1a278:	0001feb5 	.word	0x0001feb5
   1a27c:	000216b6 	.word	0x000216b6
   1a280:	00021752 	.word	0x00021752
   1a284:	00021758 	.word	0x00021758
   1a288:	00019cad 	.word	0x00019cad

0001a28c <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   1a28c:	b538      	push	{r3, r4, r5, lr}
   1a28e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1a290:	4604      	mov	r4, r0
   1a292:	b958      	cbnz	r0, 1a2ac <k_work_init_delayable+0x20>
   1a294:	4911      	ldr	r1, [pc, #68]	; (1a2dc <k_work_init_delayable+0x50>)
   1a296:	4812      	ldr	r0, [pc, #72]	; (1a2e0 <k_work_init_delayable+0x54>)
   1a298:	4a12      	ldr	r2, [pc, #72]	; (1a2e4 <k_work_init_delayable+0x58>)
   1a29a:	f44f 734c 	mov.w	r3, #816	; 0x330
   1a29e:	f002 fb80 	bl	1c9a2 <printk>
   1a2a2:	4810      	ldr	r0, [pc, #64]	; (1a2e4 <k_work_init_delayable+0x58>)
   1a2a4:	f44f 714c 	mov.w	r1, #816	; 0x330
   1a2a8:	f002 fdd5 	bl	1ce56 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   1a2ac:	b95d      	cbnz	r5, 1a2c6 <k_work_init_delayable+0x3a>
   1a2ae:	490e      	ldr	r1, [pc, #56]	; (1a2e8 <k_work_init_delayable+0x5c>)
   1a2b0:	480b      	ldr	r0, [pc, #44]	; (1a2e0 <k_work_init_delayable+0x54>)
   1a2b2:	4a0c      	ldr	r2, [pc, #48]	; (1a2e4 <k_work_init_delayable+0x58>)
   1a2b4:	f240 3331 	movw	r3, #817	; 0x331
   1a2b8:	f002 fb73 	bl	1c9a2 <printk>
   1a2bc:	4809      	ldr	r0, [pc, #36]	; (1a2e4 <k_work_init_delayable+0x58>)
   1a2be:	f240 3131 	movw	r1, #817	; 0x331
   1a2c2:	f002 fdc8 	bl	1ce56 <assert_post_action>

	*dwork = (struct k_work_delayable){
   1a2c6:	2230      	movs	r2, #48	; 0x30
   1a2c8:	2100      	movs	r1, #0
   1a2ca:	4620      	mov	r0, r4
   1a2cc:	f005 f97f 	bl	1f5ce <memset>
   1a2d0:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a2d4:	6065      	str	r5, [r4, #4]
   1a2d6:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   1a2d8:	bd38      	pop	{r3, r4, r5, pc}
   1a2da:	bf00      	nop
   1a2dc:	0002178c 	.word	0x0002178c
   1a2e0:	0001feb5 	.word	0x0001feb5
   1a2e4:	000216b6 	.word	0x000216b6
   1a2e8:	000216d7 	.word	0x000216d7

0001a2ec <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1a2ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a2ee:	4616      	mov	r6, r2
   1a2f0:	9001      	str	r0, [sp, #4]
   1a2f2:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1a2f4:	460c      	mov	r4, r1
   1a2f6:	b959      	cbnz	r1, 1a310 <k_work_schedule_for_queue+0x24>
   1a2f8:	492e      	ldr	r1, [pc, #184]	; (1a3b4 <k_work_schedule_for_queue+0xc8>)
   1a2fa:	482f      	ldr	r0, [pc, #188]	; (1a3b8 <k_work_schedule_for_queue+0xcc>)
   1a2fc:	4a2f      	ldr	r2, [pc, #188]	; (1a3bc <k_work_schedule_for_queue+0xd0>)
   1a2fe:	f240 33a7 	movw	r3, #935	; 0x3a7
   1a302:	f002 fb4e 	bl	1c9a2 <printk>
   1a306:	482d      	ldr	r0, [pc, #180]	; (1a3bc <k_work_schedule_for_queue+0xd0>)
   1a308:	f240 31a7 	movw	r1, #935	; 0x3a7
   1a30c:	f002 fda3 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1a310:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a314:	f3ef 8511 	mrs	r5, BASEPRI
   1a318:	f383 8812 	msr	BASEPRI_MAX, r3
   1a31c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a320:	4827      	ldr	r0, [pc, #156]	; (1a3c0 <k_work_schedule_for_queue+0xd4>)
   1a322:	f7ff f85d 	bl	193e0 <z_spin_lock_valid>
   1a326:	b968      	cbnz	r0, 1a344 <k_work_schedule_for_queue+0x58>
   1a328:	4a26      	ldr	r2, [pc, #152]	; (1a3c4 <k_work_schedule_for_queue+0xd8>)
   1a32a:	4927      	ldr	r1, [pc, #156]	; (1a3c8 <k_work_schedule_for_queue+0xdc>)
   1a32c:	4822      	ldr	r0, [pc, #136]	; (1a3b8 <k_work_schedule_for_queue+0xcc>)
   1a32e:	2381      	movs	r3, #129	; 0x81
   1a330:	f002 fb37 	bl	1c9a2 <printk>
   1a334:	4922      	ldr	r1, [pc, #136]	; (1a3c0 <k_work_schedule_for_queue+0xd4>)
   1a336:	4825      	ldr	r0, [pc, #148]	; (1a3cc <k_work_schedule_for_queue+0xe0>)
   1a338:	f002 fb33 	bl	1c9a2 <printk>
   1a33c:	4821      	ldr	r0, [pc, #132]	; (1a3c4 <k_work_schedule_for_queue+0xd8>)
   1a33e:	2181      	movs	r1, #129	; 0x81
   1a340:	f002 fd89 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a344:	481e      	ldr	r0, [pc, #120]	; (1a3c0 <k_work_schedule_for_queue+0xd4>)
   1a346:	f7ff f869 	bl	1941c <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   1a34a:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1a34c:	f013 0f0e 	tst.w	r3, #14
   1a350:	d12e      	bne.n	1a3b0 <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a352:	ea56 0207 	orrs.w	r2, r6, r7
   1a356:	d11d      	bne.n	1a394 <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
   1a358:	4620      	mov	r0, r4
   1a35a:	a901      	add	r1, sp, #4
   1a35c:	f7ff fdd8 	bl	19f10 <submit_to_queue_locked>
   1a360:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a362:	4817      	ldr	r0, [pc, #92]	; (1a3c0 <k_work_schedule_for_queue+0xd4>)
   1a364:	f7ff f84a 	bl	193fc <z_spin_unlock_valid>
   1a368:	b968      	cbnz	r0, 1a386 <k_work_schedule_for_queue+0x9a>
   1a36a:	4a16      	ldr	r2, [pc, #88]	; (1a3c4 <k_work_schedule_for_queue+0xd8>)
   1a36c:	4918      	ldr	r1, [pc, #96]	; (1a3d0 <k_work_schedule_for_queue+0xe4>)
   1a36e:	4812      	ldr	r0, [pc, #72]	; (1a3b8 <k_work_schedule_for_queue+0xcc>)
   1a370:	23ac      	movs	r3, #172	; 0xac
   1a372:	f002 fb16 	bl	1c9a2 <printk>
   1a376:	4912      	ldr	r1, [pc, #72]	; (1a3c0 <k_work_schedule_for_queue+0xd4>)
   1a378:	4816      	ldr	r0, [pc, #88]	; (1a3d4 <k_work_schedule_for_queue+0xe8>)
   1a37a:	f002 fb12 	bl	1c9a2 <printk>
   1a37e:	4811      	ldr	r0, [pc, #68]	; (1a3c4 <k_work_schedule_for_queue+0xd8>)
   1a380:	21ac      	movs	r1, #172	; 0xac
   1a382:	f002 fd68 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1a386:	f385 8811 	msr	BASEPRI, r5
   1a38a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1a38e:	4620      	mov	r0, r4
   1a390:	b003      	add	sp, #12
   1a392:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1a394:	f043 0308 	orr.w	r3, r3, #8
   1a398:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1a39a:	9b01      	ldr	r3, [sp, #4]
   1a39c:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1a39e:	f104 0010 	add.w	r0, r4, #16
   1a3a2:	490d      	ldr	r1, [pc, #52]	; (1a3d8 <k_work_schedule_for_queue+0xec>)
   1a3a4:	4632      	mov	r2, r6
   1a3a6:	463b      	mov	r3, r7
   1a3a8:	f001 fb96 	bl	1bad8 <z_add_timeout>
	return ret;
   1a3ac:	2401      	movs	r4, #1
   1a3ae:	e7d8      	b.n	1a362 <k_work_schedule_for_queue+0x76>
	int ret = 0;
   1a3b0:	2400      	movs	r4, #0
   1a3b2:	e7d6      	b.n	1a362 <k_work_schedule_for_queue+0x76>
   1a3b4:	0002178c 	.word	0x0002178c
   1a3b8:	0001feb5 	.word	0x0001feb5
   1a3bc:	000216b6 	.word	0x000216b6
   1a3c0:	20001ee4 	.word	0x20001ee4
   1a3c4:	0001ff75 	.word	0x0001ff75
   1a3c8:	0001ffc7 	.word	0x0001ffc7
   1a3cc:	0001ffdc 	.word	0x0001ffdc
   1a3d0:	0001ff9b 	.word	0x0001ff9b
   1a3d4:	0001ffb2 	.word	0x0001ffb2
   1a3d8:	00019fd9 	.word	0x00019fd9

0001a3dc <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1a3dc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1a3de:	4801      	ldr	r0, [pc, #4]	; (1a3e4 <k_work_schedule+0x8>)
   1a3e0:	f7ff bf84 	b.w	1a2ec <k_work_schedule_for_queue>
   1a3e4:	20001ae0 	.word	0x20001ae0

0001a3e8 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1a3e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a3ea:	4616      	mov	r6, r2
   1a3ec:	9001      	str	r0, [sp, #4]
   1a3ee:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1a3f0:	460c      	mov	r4, r1
   1a3f2:	b959      	cbnz	r1, 1a40c <k_work_reschedule_for_queue+0x24>
   1a3f4:	492d      	ldr	r1, [pc, #180]	; (1a4ac <k_work_reschedule_for_queue+0xc4>)
   1a3f6:	482e      	ldr	r0, [pc, #184]	; (1a4b0 <k_work_reschedule_for_queue+0xc8>)
   1a3f8:	4a2e      	ldr	r2, [pc, #184]	; (1a4b4 <k_work_reschedule_for_queue+0xcc>)
   1a3fa:	f240 33cb 	movw	r3, #971	; 0x3cb
   1a3fe:	f002 fad0 	bl	1c9a2 <printk>
   1a402:	482c      	ldr	r0, [pc, #176]	; (1a4b4 <k_work_reschedule_for_queue+0xcc>)
   1a404:	f240 31cb 	movw	r1, #971	; 0x3cb
   1a408:	f002 fd25 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1a40c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a410:	f3ef 8511 	mrs	r5, BASEPRI
   1a414:	f383 8812 	msr	BASEPRI_MAX, r3
   1a418:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a41c:	4826      	ldr	r0, [pc, #152]	; (1a4b8 <k_work_reschedule_for_queue+0xd0>)
   1a41e:	f7fe ffdf 	bl	193e0 <z_spin_lock_valid>
   1a422:	b968      	cbnz	r0, 1a440 <k_work_reschedule_for_queue+0x58>
   1a424:	4a25      	ldr	r2, [pc, #148]	; (1a4bc <k_work_reschedule_for_queue+0xd4>)
   1a426:	4926      	ldr	r1, [pc, #152]	; (1a4c0 <k_work_reschedule_for_queue+0xd8>)
   1a428:	4821      	ldr	r0, [pc, #132]	; (1a4b0 <k_work_reschedule_for_queue+0xc8>)
   1a42a:	2381      	movs	r3, #129	; 0x81
   1a42c:	f002 fab9 	bl	1c9a2 <printk>
   1a430:	4921      	ldr	r1, [pc, #132]	; (1a4b8 <k_work_reschedule_for_queue+0xd0>)
   1a432:	4824      	ldr	r0, [pc, #144]	; (1a4c4 <k_work_reschedule_for_queue+0xdc>)
   1a434:	f002 fab5 	bl	1c9a2 <printk>
   1a438:	4820      	ldr	r0, [pc, #128]	; (1a4bc <k_work_reschedule_for_queue+0xd4>)
   1a43a:	2181      	movs	r1, #129	; 0x81
   1a43c:	f002 fd0b 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a440:	481d      	ldr	r0, [pc, #116]	; (1a4b8 <k_work_reschedule_for_queue+0xd0>)
   1a442:	f7fe ffeb 	bl	1941c <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1a446:	4620      	mov	r0, r4
   1a448:	f004 ff9c 	bl	1f384 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a44c:	ea56 0307 	orrs.w	r3, r6, r7
   1a450:	d11d      	bne.n	1a48e <k_work_reschedule_for_queue+0xa6>
		return submit_to_queue_locked(work, queuep);
   1a452:	4620      	mov	r0, r4
   1a454:	a901      	add	r1, sp, #4
   1a456:	f7ff fd5b 	bl	19f10 <submit_to_queue_locked>
   1a45a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a45c:	4816      	ldr	r0, [pc, #88]	; (1a4b8 <k_work_reschedule_for_queue+0xd0>)
   1a45e:	f7fe ffcd 	bl	193fc <z_spin_unlock_valid>
   1a462:	b968      	cbnz	r0, 1a480 <k_work_reschedule_for_queue+0x98>
   1a464:	4a15      	ldr	r2, [pc, #84]	; (1a4bc <k_work_reschedule_for_queue+0xd4>)
   1a466:	4918      	ldr	r1, [pc, #96]	; (1a4c8 <k_work_reschedule_for_queue+0xe0>)
   1a468:	4811      	ldr	r0, [pc, #68]	; (1a4b0 <k_work_reschedule_for_queue+0xc8>)
   1a46a:	23ac      	movs	r3, #172	; 0xac
   1a46c:	f002 fa99 	bl	1c9a2 <printk>
   1a470:	4911      	ldr	r1, [pc, #68]	; (1a4b8 <k_work_reschedule_for_queue+0xd0>)
   1a472:	4816      	ldr	r0, [pc, #88]	; (1a4cc <k_work_reschedule_for_queue+0xe4>)
   1a474:	f002 fa95 	bl	1c9a2 <printk>
   1a478:	4810      	ldr	r0, [pc, #64]	; (1a4bc <k_work_reschedule_for_queue+0xd4>)
   1a47a:	21ac      	movs	r1, #172	; 0xac
   1a47c:	f002 fceb 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1a480:	f385 8811 	msr	BASEPRI, r5
   1a484:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1a488:	4620      	mov	r0, r4
   1a48a:	b003      	add	sp, #12
   1a48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1a48e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1a490:	490f      	ldr	r1, [pc, #60]	; (1a4d0 <k_work_reschedule_for_queue+0xe8>)
	*flagp |= BIT(bit);
   1a492:	f043 0308 	orr.w	r3, r3, #8
   1a496:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1a498:	9b01      	ldr	r3, [sp, #4]
   1a49a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1a49c:	f104 0010 	add.w	r0, r4, #16
   1a4a0:	4632      	mov	r2, r6
   1a4a2:	463b      	mov	r3, r7
   1a4a4:	f001 fb18 	bl	1bad8 <z_add_timeout>
	return ret;
   1a4a8:	2401      	movs	r4, #1
   1a4aa:	e7d7      	b.n	1a45c <k_work_reschedule_for_queue+0x74>
   1a4ac:	0002178c 	.word	0x0002178c
   1a4b0:	0001feb5 	.word	0x0001feb5
   1a4b4:	000216b6 	.word	0x000216b6
   1a4b8:	20001ee4 	.word	0x20001ee4
   1a4bc:	0001ff75 	.word	0x0001ff75
   1a4c0:	0001ffc7 	.word	0x0001ffc7
   1a4c4:	0001ffdc 	.word	0x0001ffdc
   1a4c8:	0001ff9b 	.word	0x0001ff9b
   1a4cc:	0001ffb2 	.word	0x0001ffb2
   1a4d0:	00019fd9 	.word	0x00019fd9

0001a4d4 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1a4d4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1a4d6:	4801      	ldr	r0, [pc, #4]	; (1a4dc <k_work_reschedule+0x8>)
   1a4d8:	f7ff bf86 	b.w	1a3e8 <k_work_reschedule_for_queue>
   1a4dc:	20001ae0 	.word	0x20001ae0

0001a4e0 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1a4e0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   1a4e2:	4604      	mov	r4, r0
   1a4e4:	b958      	cbnz	r0, 1a4fe <k_work_cancel_delayable+0x1e>
   1a4e6:	4924      	ldr	r1, [pc, #144]	; (1a578 <k_work_cancel_delayable+0x98>)
   1a4e8:	4824      	ldr	r0, [pc, #144]	; (1a57c <k_work_cancel_delayable+0x9c>)
   1a4ea:	4a25      	ldr	r2, [pc, #148]	; (1a580 <k_work_cancel_delayable+0xa0>)
   1a4ec:	f240 33ed 	movw	r3, #1005	; 0x3ed
   1a4f0:	f002 fa57 	bl	1c9a2 <printk>
   1a4f4:	4822      	ldr	r0, [pc, #136]	; (1a580 <k_work_cancel_delayable+0xa0>)
   1a4f6:	f240 31ed 	movw	r1, #1005	; 0x3ed
   1a4fa:	f002 fcac 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1a4fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a502:	f3ef 8511 	mrs	r5, BASEPRI
   1a506:	f383 8812 	msr	BASEPRI_MAX, r3
   1a50a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a50e:	481d      	ldr	r0, [pc, #116]	; (1a584 <k_work_cancel_delayable+0xa4>)
   1a510:	f7fe ff66 	bl	193e0 <z_spin_lock_valid>
   1a514:	b968      	cbnz	r0, 1a532 <k_work_cancel_delayable+0x52>
   1a516:	4a1c      	ldr	r2, [pc, #112]	; (1a588 <k_work_cancel_delayable+0xa8>)
   1a518:	491c      	ldr	r1, [pc, #112]	; (1a58c <k_work_cancel_delayable+0xac>)
   1a51a:	4818      	ldr	r0, [pc, #96]	; (1a57c <k_work_cancel_delayable+0x9c>)
   1a51c:	2381      	movs	r3, #129	; 0x81
   1a51e:	f002 fa40 	bl	1c9a2 <printk>
   1a522:	4918      	ldr	r1, [pc, #96]	; (1a584 <k_work_cancel_delayable+0xa4>)
   1a524:	481a      	ldr	r0, [pc, #104]	; (1a590 <k_work_cancel_delayable+0xb0>)
   1a526:	f002 fa3c 	bl	1c9a2 <printk>
   1a52a:	4817      	ldr	r0, [pc, #92]	; (1a588 <k_work_cancel_delayable+0xa8>)
   1a52c:	2181      	movs	r1, #129	; 0x81
   1a52e:	f002 fc92 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a532:	4814      	ldr	r0, [pc, #80]	; (1a584 <k_work_cancel_delayable+0xa4>)
   1a534:	f7fe ff72 	bl	1941c <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   1a538:	4620      	mov	r0, r4
   1a53a:	f004 ff23 	bl	1f384 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1a53e:	4620      	mov	r0, r4
   1a540:	f004 ff2e 	bl	1f3a0 <cancel_async_locked>
   1a544:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a546:	480f      	ldr	r0, [pc, #60]	; (1a584 <k_work_cancel_delayable+0xa4>)
   1a548:	f7fe ff58 	bl	193fc <z_spin_unlock_valid>
   1a54c:	b968      	cbnz	r0, 1a56a <k_work_cancel_delayable+0x8a>
   1a54e:	4a0e      	ldr	r2, [pc, #56]	; (1a588 <k_work_cancel_delayable+0xa8>)
   1a550:	4910      	ldr	r1, [pc, #64]	; (1a594 <k_work_cancel_delayable+0xb4>)
   1a552:	480a      	ldr	r0, [pc, #40]	; (1a57c <k_work_cancel_delayable+0x9c>)
   1a554:	23ac      	movs	r3, #172	; 0xac
   1a556:	f002 fa24 	bl	1c9a2 <printk>
   1a55a:	490a      	ldr	r1, [pc, #40]	; (1a584 <k_work_cancel_delayable+0xa4>)
   1a55c:	480e      	ldr	r0, [pc, #56]	; (1a598 <k_work_cancel_delayable+0xb8>)
   1a55e:	f002 fa20 	bl	1c9a2 <printk>
   1a562:	4809      	ldr	r0, [pc, #36]	; (1a588 <k_work_cancel_delayable+0xa8>)
   1a564:	21ac      	movs	r1, #172	; 0xac
   1a566:	f002 fc76 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1a56a:	f385 8811 	msr	BASEPRI, r5
   1a56e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1a572:	4620      	mov	r0, r4
   1a574:	bd38      	pop	{r3, r4, r5, pc}
   1a576:	bf00      	nop
   1a578:	0002178c 	.word	0x0002178c
   1a57c:	0001feb5 	.word	0x0001feb5
   1a580:	000216b6 	.word	0x000216b6
   1a584:	20001ee4 	.word	0x20001ee4
   1a588:	0001ff75 	.word	0x0001ff75
   1a58c:	0001ffc7 	.word	0x0001ffc7
   1a590:	0001ffdc 	.word	0x0001ffdc
   1a594:	0001ff9b 	.word	0x0001ff9b
   1a598:	0001ffb2 	.word	0x0001ffb2

0001a59c <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1a59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a5a0:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1a5a2:	4605      	mov	r5, r0
   1a5a4:	b958      	cbnz	r0, 1a5be <k_work_cancel_delayable_sync+0x22>
   1a5a6:	493f      	ldr	r1, [pc, #252]	; (1a6a4 <k_work_cancel_delayable_sync+0x108>)
   1a5a8:	483f      	ldr	r0, [pc, #252]	; (1a6a8 <k_work_cancel_delayable_sync+0x10c>)
   1a5aa:	4a40      	ldr	r2, [pc, #256]	; (1a6ac <k_work_cancel_delayable_sync+0x110>)
   1a5ac:	f240 33fe 	movw	r3, #1022	; 0x3fe
   1a5b0:	f002 f9f7 	bl	1c9a2 <printk>
   1a5b4:	483d      	ldr	r0, [pc, #244]	; (1a6ac <k_work_cancel_delayable_sync+0x110>)
   1a5b6:	f240 31fe 	movw	r1, #1022	; 0x3fe
   1a5ba:	f002 fc4c 	bl	1ce56 <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   1a5be:	b95e      	cbnz	r6, 1a5d8 <k_work_cancel_delayable_sync+0x3c>
   1a5c0:	493b      	ldr	r1, [pc, #236]	; (1a6b0 <k_work_cancel_delayable_sync+0x114>)
   1a5c2:	4839      	ldr	r0, [pc, #228]	; (1a6a8 <k_work_cancel_delayable_sync+0x10c>)
   1a5c4:	4a39      	ldr	r2, [pc, #228]	; (1a6ac <k_work_cancel_delayable_sync+0x110>)
   1a5c6:	f240 33ff 	movw	r3, #1023	; 0x3ff
   1a5ca:	f002 f9ea 	bl	1c9a2 <printk>
   1a5ce:	4837      	ldr	r0, [pc, #220]	; (1a6ac <k_work_cancel_delayable_sync+0x110>)
   1a5d0:	f240 31ff 	movw	r1, #1023	; 0x3ff
   1a5d4:	f002 fc3f 	bl	1ce56 <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   1a5d8:	f004 fe7d 	bl	1f2d6 <k_is_in_isr>
   1a5dc:	b158      	cbz	r0, 1a5f6 <k_work_cancel_delayable_sync+0x5a>
   1a5de:	4935      	ldr	r1, [pc, #212]	; (1a6b4 <k_work_cancel_delayable_sync+0x118>)
   1a5e0:	4831      	ldr	r0, [pc, #196]	; (1a6a8 <k_work_cancel_delayable_sync+0x10c>)
   1a5e2:	4a32      	ldr	r2, [pc, #200]	; (1a6ac <k_work_cancel_delayable_sync+0x110>)
   1a5e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1a5e8:	f002 f9db 	bl	1c9a2 <printk>
   1a5ec:	482f      	ldr	r0, [pc, #188]	; (1a6ac <k_work_cancel_delayable_sync+0x110>)
   1a5ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1a5f2:	f002 fc30 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1a5f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a5fa:	f3ef 8811 	mrs	r8, BASEPRI
   1a5fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1a602:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a606:	482c      	ldr	r0, [pc, #176]	; (1a6b8 <k_work_cancel_delayable_sync+0x11c>)
   1a608:	f7fe feea 	bl	193e0 <z_spin_lock_valid>
   1a60c:	b968      	cbnz	r0, 1a62a <k_work_cancel_delayable_sync+0x8e>
   1a60e:	4a2b      	ldr	r2, [pc, #172]	; (1a6bc <k_work_cancel_delayable_sync+0x120>)
   1a610:	492b      	ldr	r1, [pc, #172]	; (1a6c0 <k_work_cancel_delayable_sync+0x124>)
   1a612:	4825      	ldr	r0, [pc, #148]	; (1a6a8 <k_work_cancel_delayable_sync+0x10c>)
   1a614:	2381      	movs	r3, #129	; 0x81
   1a616:	f002 f9c4 	bl	1c9a2 <printk>
   1a61a:	4927      	ldr	r1, [pc, #156]	; (1a6b8 <k_work_cancel_delayable_sync+0x11c>)
   1a61c:	4829      	ldr	r0, [pc, #164]	; (1a6c4 <k_work_cancel_delayable_sync+0x128>)
   1a61e:	f002 f9c0 	bl	1c9a2 <printk>
   1a622:	4826      	ldr	r0, [pc, #152]	; (1a6bc <k_work_cancel_delayable_sync+0x120>)
   1a624:	2181      	movs	r1, #129	; 0x81
   1a626:	f002 fc16 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a62a:	4823      	ldr	r0, [pc, #140]	; (1a6b8 <k_work_cancel_delayable_sync+0x11c>)
   1a62c:	f7fe fef6 	bl	1941c <z_spin_lock_set_owner>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a630:	f3bf 8f5b 	dmb	ish
   1a634:	68ec      	ldr	r4, [r5, #12]
   1a636:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   1a63a:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1a63e:	2c00      	cmp	r4, #0
   1a640:	bf14      	ite	ne
   1a642:	2701      	movne	r7, #1
   1a644:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   1a646:	d00a      	beq.n	1a65e <k_work_cancel_delayable_sync+0xc2>
	(void)unschedule_locked(dwork);
   1a648:	4628      	mov	r0, r5
   1a64a:	f004 fe9b 	bl	1f384 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1a64e:	4628      	mov	r0, r5
   1a650:	f004 fea6 	bl	1f3a0 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1a654:	4631      	mov	r1, r6
   1a656:	4628      	mov	r0, r5
   1a658:	f7ff fc3c 	bl	19ed4 <cancel_sync_locked>
   1a65c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a65e:	4816      	ldr	r0, [pc, #88]	; (1a6b8 <k_work_cancel_delayable_sync+0x11c>)
   1a660:	f7fe fecc 	bl	193fc <z_spin_unlock_valid>
   1a664:	b968      	cbnz	r0, 1a682 <k_work_cancel_delayable_sync+0xe6>
   1a666:	4a15      	ldr	r2, [pc, #84]	; (1a6bc <k_work_cancel_delayable_sync+0x120>)
   1a668:	4917      	ldr	r1, [pc, #92]	; (1a6c8 <k_work_cancel_delayable_sync+0x12c>)
   1a66a:	480f      	ldr	r0, [pc, #60]	; (1a6a8 <k_work_cancel_delayable_sync+0x10c>)
   1a66c:	23ac      	movs	r3, #172	; 0xac
   1a66e:	f002 f998 	bl	1c9a2 <printk>
   1a672:	4911      	ldr	r1, [pc, #68]	; (1a6b8 <k_work_cancel_delayable_sync+0x11c>)
   1a674:	4815      	ldr	r0, [pc, #84]	; (1a6cc <k_work_cancel_delayable_sync+0x130>)
   1a676:	f002 f994 	bl	1c9a2 <printk>
   1a67a:	4810      	ldr	r0, [pc, #64]	; (1a6bc <k_work_cancel_delayable_sync+0x120>)
   1a67c:	21ac      	movs	r1, #172	; 0xac
   1a67e:	f002 fbea 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1a682:	f388 8811 	msr	BASEPRI, r8
   1a686:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1a68a:	b13c      	cbz	r4, 1a69c <k_work_cancel_delayable_sync+0x100>
	return z_impl_k_sem_take(sem, timeout);
   1a68c:	f04f 32ff 	mov.w	r2, #4294967295
   1a690:	f04f 33ff 	mov.w	r3, #4294967295
   1a694:	f106 0008 	add.w	r0, r6, #8
   1a698:	f7ff fa64 	bl	19b64 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1a69c:	4638      	mov	r0, r7
   1a69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a6a2:	bf00      	nop
   1a6a4:	0002178c 	.word	0x0002178c
   1a6a8:	0001feb5 	.word	0x0001feb5
   1a6ac:	000216b6 	.word	0x000216b6
   1a6b0:	00021738 	.word	0x00021738
   1a6b4:	00020af9 	.word	0x00020af9
   1a6b8:	20001ee4 	.word	0x20001ee4
   1a6bc:	0001ff75 	.word	0x0001ff75
   1a6c0:	0001ffc7 	.word	0x0001ffc7
   1a6c4:	0001ffdc 	.word	0x0001ffdc
   1a6c8:	0001ff9b 	.word	0x0001ff9b
   1a6cc:	0001ffb2 	.word	0x0001ffb2

0001a6d0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1a6d0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1a6d2:	4c08      	ldr	r4, [pc, #32]	; (1a6f4 <z_reset_time_slice+0x24>)
   1a6d4:	6823      	ldr	r3, [r4, #0]
   1a6d6:	b15b      	cbz	r3, 1a6f0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1a6d8:	f7fd f988 	bl	179ec <sys_clock_elapsed>
   1a6dc:	4603      	mov	r3, r0
   1a6de:	6820      	ldr	r0, [r4, #0]
   1a6e0:	4a05      	ldr	r2, [pc, #20]	; (1a6f8 <z_reset_time_slice+0x28>)
   1a6e2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1a6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1a6e8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1a6ea:	2100      	movs	r1, #0
   1a6ec:	f001 bb5e 	b.w	1bdac <z_set_timeout_expiry>
}
   1a6f0:	bd10      	pop	{r4, pc}
   1a6f2:	bf00      	nop
   1a6f4:	20001efc 	.word	0x20001efc
   1a6f8:	20001eb4 	.word	0x20001eb4

0001a6fc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a6fe:	4604      	mov	r4, r0
   1a700:	460d      	mov	r5, r1
	__asm__ volatile(
   1a702:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a706:	f3ef 8611 	mrs	r6, BASEPRI
   1a70a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a70e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a712:	4823      	ldr	r0, [pc, #140]	; (1a7a0 <k_sched_time_slice_set+0xa4>)
   1a714:	f7fe fe64 	bl	193e0 <z_spin_lock_valid>
   1a718:	b968      	cbnz	r0, 1a736 <k_sched_time_slice_set+0x3a>
   1a71a:	4a22      	ldr	r2, [pc, #136]	; (1a7a4 <k_sched_time_slice_set+0xa8>)
   1a71c:	4922      	ldr	r1, [pc, #136]	; (1a7a8 <k_sched_time_slice_set+0xac>)
   1a71e:	4823      	ldr	r0, [pc, #140]	; (1a7ac <k_sched_time_slice_set+0xb0>)
   1a720:	2381      	movs	r3, #129	; 0x81
   1a722:	f002 f93e 	bl	1c9a2 <printk>
   1a726:	491e      	ldr	r1, [pc, #120]	; (1a7a0 <k_sched_time_slice_set+0xa4>)
   1a728:	4821      	ldr	r0, [pc, #132]	; (1a7b0 <k_sched_time_slice_set+0xb4>)
   1a72a:	f002 f93a 	bl	1c9a2 <printk>
   1a72e:	481d      	ldr	r0, [pc, #116]	; (1a7a4 <k_sched_time_slice_set+0xa8>)
   1a730:	2181      	movs	r1, #129	; 0x81
   1a732:	f002 fb90 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a736:	481a      	ldr	r0, [pc, #104]	; (1a7a0 <k_sched_time_slice_set+0xa4>)
   1a738:	f7fe fe70 	bl	1941c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1a73c:	4b1d      	ldr	r3, [pc, #116]	; (1a7b4 <k_sched_time_slice_set+0xb8>)
   1a73e:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1a740:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1a744:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a748:	2100      	movs	r1, #0
   1a74a:	611a      	str	r2, [r3, #16]
   1a74c:	fbe7 0104 	umlal	r0, r1, r7, r4
   1a750:	2300      	movs	r3, #0
   1a752:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a756:	f7e5 fcc1 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1a75a:	2c00      	cmp	r4, #0
   1a75c:	4b16      	ldr	r3, [pc, #88]	; (1a7b8 <k_sched_time_slice_set+0xbc>)
   1a75e:	dc1b      	bgt.n	1a798 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1a760:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1a762:	4b16      	ldr	r3, [pc, #88]	; (1a7bc <k_sched_time_slice_set+0xc0>)
   1a764:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1a766:	f7ff ffb3 	bl	1a6d0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a76a:	480d      	ldr	r0, [pc, #52]	; (1a7a0 <k_sched_time_slice_set+0xa4>)
   1a76c:	f7fe fe46 	bl	193fc <z_spin_unlock_valid>
   1a770:	b968      	cbnz	r0, 1a78e <k_sched_time_slice_set+0x92>
   1a772:	4a0c      	ldr	r2, [pc, #48]	; (1a7a4 <k_sched_time_slice_set+0xa8>)
   1a774:	4912      	ldr	r1, [pc, #72]	; (1a7c0 <k_sched_time_slice_set+0xc4>)
   1a776:	480d      	ldr	r0, [pc, #52]	; (1a7ac <k_sched_time_slice_set+0xb0>)
   1a778:	23ac      	movs	r3, #172	; 0xac
   1a77a:	f002 f912 	bl	1c9a2 <printk>
   1a77e:	4908      	ldr	r1, [pc, #32]	; (1a7a0 <k_sched_time_slice_set+0xa4>)
   1a780:	4810      	ldr	r0, [pc, #64]	; (1a7c4 <k_sched_time_slice_set+0xc8>)
   1a782:	f002 f90e 	bl	1c9a2 <printk>
   1a786:	4807      	ldr	r0, [pc, #28]	; (1a7a4 <k_sched_time_slice_set+0xa8>)
   1a788:	21ac      	movs	r1, #172	; 0xac
   1a78a:	f002 fb64 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1a78e:	f386 8811 	msr	BASEPRI, r6
   1a792:	f3bf 8f6f 	isb	sy
	}
}
   1a796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1a798:	2802      	cmp	r0, #2
   1a79a:	bfb8      	it	lt
   1a79c:	2002      	movlt	r0, #2
   1a79e:	e7df      	b.n	1a760 <k_sched_time_slice_set+0x64>
   1a7a0:	20001ef4 	.word	0x20001ef4
   1a7a4:	0001ff75 	.word	0x0001ff75
   1a7a8:	0001ffc7 	.word	0x0001ffc7
   1a7ac:	0001feb5 	.word	0x0001feb5
   1a7b0:	0001ffdc 	.word	0x0001ffdc
   1a7b4:	20001eb4 	.word	0x20001eb4
   1a7b8:	20001efc 	.word	0x20001efc
   1a7bc:	20001ef8 	.word	0x20001ef8
   1a7c0:	0001ff9b 	.word	0x0001ff9b
   1a7c4:	0001ffb2 	.word	0x0001ffb2

0001a7c8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1a7c8:	b538      	push	{r3, r4, r5, lr}
   1a7ca:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1a7cc:	460d      	mov	r5, r1
   1a7ce:	b9e9      	cbnz	r1, 1a80c <z_reschedule+0x44>
   1a7d0:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
   1a7d4:	b9d3      	cbnz	r3, 1a80c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   1a7d6:	4b19      	ldr	r3, [pc, #100]	; (1a83c <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   1a7d8:	69da      	ldr	r2, [r3, #28]
   1a7da:	689b      	ldr	r3, [r3, #8]
   1a7dc:	429a      	cmp	r2, r3
   1a7de:	d015      	beq.n	1a80c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a7e0:	f7fe fe0c 	bl	193fc <z_spin_unlock_valid>
   1a7e4:	b968      	cbnz	r0, 1a802 <z_reschedule+0x3a>
   1a7e6:	4a16      	ldr	r2, [pc, #88]	; (1a840 <z_reschedule+0x78>)
   1a7e8:	4916      	ldr	r1, [pc, #88]	; (1a844 <z_reschedule+0x7c>)
   1a7ea:	4817      	ldr	r0, [pc, #92]	; (1a848 <z_reschedule+0x80>)
   1a7ec:	23c3      	movs	r3, #195	; 0xc3
   1a7ee:	f002 f8d8 	bl	1c9a2 <printk>
   1a7f2:	4816      	ldr	r0, [pc, #88]	; (1a84c <z_reschedule+0x84>)
   1a7f4:	4621      	mov	r1, r4
   1a7f6:	f002 f8d4 	bl	1c9a2 <printk>
   1a7fa:	4811      	ldr	r0, [pc, #68]	; (1a840 <z_reschedule+0x78>)
   1a7fc:	21c3      	movs	r1, #195	; 0xc3
   1a7fe:	f002 fb2a 	bl	1ce56 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1a802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   1a806:	2000      	movs	r0, #0
   1a808:	f7f6 be0a 	b.w	11420 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a80c:	4620      	mov	r0, r4
   1a80e:	f7fe fdf5 	bl	193fc <z_spin_unlock_valid>
   1a812:	b968      	cbnz	r0, 1a830 <z_reschedule+0x68>
   1a814:	4a0a      	ldr	r2, [pc, #40]	; (1a840 <z_reschedule+0x78>)
   1a816:	490b      	ldr	r1, [pc, #44]	; (1a844 <z_reschedule+0x7c>)
   1a818:	480b      	ldr	r0, [pc, #44]	; (1a848 <z_reschedule+0x80>)
   1a81a:	23ac      	movs	r3, #172	; 0xac
   1a81c:	f002 f8c1 	bl	1c9a2 <printk>
   1a820:	480a      	ldr	r0, [pc, #40]	; (1a84c <z_reschedule+0x84>)
   1a822:	4621      	mov	r1, r4
   1a824:	f002 f8bd 	bl	1c9a2 <printk>
   1a828:	4805      	ldr	r0, [pc, #20]	; (1a840 <z_reschedule+0x78>)
   1a82a:	21ac      	movs	r1, #172	; 0xac
   1a82c:	f002 fb13 	bl	1ce56 <assert_post_action>
   1a830:	f385 8811 	msr	BASEPRI, r5
   1a834:	f3bf 8f6f 	isb	sy
   1a838:	bd38      	pop	{r3, r4, r5, pc}
   1a83a:	bf00      	nop
   1a83c:	20001eb4 	.word	0x20001eb4
   1a840:	0001ff75 	.word	0x0001ff75
   1a844:	0001ff9b 	.word	0x0001ff9b
   1a848:	0001feb5 	.word	0x0001feb5
   1a84c:	0001ffb2 	.word	0x0001ffb2

0001a850 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   1a850:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1a852:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a856:	f3ef 8511 	mrs	r5, BASEPRI
   1a85a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a85e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a862:	4829      	ldr	r0, [pc, #164]	; (1a908 <k_sched_lock+0xb8>)
   1a864:	f7fe fdbc 	bl	193e0 <z_spin_lock_valid>
   1a868:	b968      	cbnz	r0, 1a886 <k_sched_lock+0x36>
   1a86a:	4a28      	ldr	r2, [pc, #160]	; (1a90c <k_sched_lock+0xbc>)
   1a86c:	4928      	ldr	r1, [pc, #160]	; (1a910 <k_sched_lock+0xc0>)
   1a86e:	4829      	ldr	r0, [pc, #164]	; (1a914 <k_sched_lock+0xc4>)
   1a870:	2381      	movs	r3, #129	; 0x81
   1a872:	f002 f896 	bl	1c9a2 <printk>
   1a876:	4924      	ldr	r1, [pc, #144]	; (1a908 <k_sched_lock+0xb8>)
   1a878:	4827      	ldr	r0, [pc, #156]	; (1a918 <k_sched_lock+0xc8>)
   1a87a:	f002 f892 	bl	1c9a2 <printk>
   1a87e:	4823      	ldr	r0, [pc, #140]	; (1a90c <k_sched_lock+0xbc>)
   1a880:	2181      	movs	r1, #129	; 0x81
   1a882:	f002 fae8 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a886:	4820      	ldr	r0, [pc, #128]	; (1a908 <k_sched_lock+0xb8>)
   1a888:	f7fe fdc8 	bl	1941c <z_spin_lock_set_owner>
   1a88c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1a890:	b163      	cbz	r3, 1a8ac <k_sched_lock+0x5c>
   1a892:	4922      	ldr	r1, [pc, #136]	; (1a91c <k_sched_lock+0xcc>)
   1a894:	4a22      	ldr	r2, [pc, #136]	; (1a920 <k_sched_lock+0xd0>)
   1a896:	481f      	ldr	r0, [pc, #124]	; (1a914 <k_sched_lock+0xc4>)
   1a898:	23fd      	movs	r3, #253	; 0xfd
   1a89a:	f002 f882 	bl	1c9a2 <printk>
   1a89e:	4821      	ldr	r0, [pc, #132]	; (1a924 <k_sched_lock+0xd4>)
   1a8a0:	f002 f87f 	bl	1c9a2 <printk>
   1a8a4:	481e      	ldr	r0, [pc, #120]	; (1a920 <k_sched_lock+0xd0>)
   1a8a6:	21fd      	movs	r1, #253	; 0xfd
   1a8a8:	f002 fad5 	bl	1ce56 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   1a8ac:	4c1e      	ldr	r4, [pc, #120]	; (1a928 <k_sched_lock+0xd8>)
   1a8ae:	68a2      	ldr	r2, [r4, #8]
   1a8b0:	7bd2      	ldrb	r2, [r2, #15]
   1a8b2:	2a01      	cmp	r2, #1
   1a8b4:	d10c      	bne.n	1a8d0 <k_sched_lock+0x80>
   1a8b6:	491d      	ldr	r1, [pc, #116]	; (1a92c <k_sched_lock+0xdc>)
   1a8b8:	4a19      	ldr	r2, [pc, #100]	; (1a920 <k_sched_lock+0xd0>)
   1a8ba:	4816      	ldr	r0, [pc, #88]	; (1a914 <k_sched_lock+0xc4>)
   1a8bc:	23fe      	movs	r3, #254	; 0xfe
   1a8be:	f002 f870 	bl	1c9a2 <printk>
   1a8c2:	4818      	ldr	r0, [pc, #96]	; (1a924 <k_sched_lock+0xd4>)
   1a8c4:	f002 f86d 	bl	1c9a2 <printk>
   1a8c8:	4815      	ldr	r0, [pc, #84]	; (1a920 <k_sched_lock+0xd0>)
   1a8ca:	21fe      	movs	r1, #254	; 0xfe
   1a8cc:	f002 fac3 	bl	1ce56 <assert_post_action>
	--_current->base.sched_locked;
   1a8d0:	68a2      	ldr	r2, [r4, #8]
   1a8d2:	7bd3      	ldrb	r3, [r2, #15]
   1a8d4:	3b01      	subs	r3, #1
   1a8d6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a8d8:	480b      	ldr	r0, [pc, #44]	; (1a908 <k_sched_lock+0xb8>)
   1a8da:	f7fe fd8f 	bl	193fc <z_spin_unlock_valid>
   1a8de:	b968      	cbnz	r0, 1a8fc <k_sched_lock+0xac>
   1a8e0:	4a0a      	ldr	r2, [pc, #40]	; (1a90c <k_sched_lock+0xbc>)
   1a8e2:	4913      	ldr	r1, [pc, #76]	; (1a930 <k_sched_lock+0xe0>)
   1a8e4:	480b      	ldr	r0, [pc, #44]	; (1a914 <k_sched_lock+0xc4>)
   1a8e6:	23ac      	movs	r3, #172	; 0xac
   1a8e8:	f002 f85b 	bl	1c9a2 <printk>
   1a8ec:	4906      	ldr	r1, [pc, #24]	; (1a908 <k_sched_lock+0xb8>)
   1a8ee:	4811      	ldr	r0, [pc, #68]	; (1a934 <k_sched_lock+0xe4>)
   1a8f0:	f002 f857 	bl	1c9a2 <printk>
   1a8f4:	4805      	ldr	r0, [pc, #20]	; (1a90c <k_sched_lock+0xbc>)
   1a8f6:	21ac      	movs	r1, #172	; 0xac
   1a8f8:	f002 faad 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1a8fc:	f385 8811 	msr	BASEPRI, r5
   1a900:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1a904:	bd38      	pop	{r3, r4, r5, pc}
   1a906:	bf00      	nop
   1a908:	20001ef4 	.word	0x20001ef4
   1a90c:	0001ff75 	.word	0x0001ff75
   1a910:	0001ffc7 	.word	0x0001ffc7
   1a914:	0001feb5 	.word	0x0001feb5
   1a918:	0001ffdc 	.word	0x0001ffdc
   1a91c:	000214d9 	.word	0x000214d9
   1a920:	000215e4 	.word	0x000215e4
   1a924:	00020d40 	.word	0x00020d40
   1a928:	20001eb4 	.word	0x20001eb4
   1a92c:	0002160f 	.word	0x0002160f
   1a930:	0001ff9b 	.word	0x0001ff9b
   1a934:	0001ffb2 	.word	0x0001ffb2

0001a938 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1a938:	4b0c      	ldr	r3, [pc, #48]	; (1a96c <z_priq_dumb_remove+0x34>)
   1a93a:	4299      	cmp	r1, r3
{
   1a93c:	b510      	push	{r4, lr}
   1a93e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1a940:	d10b      	bne.n	1a95a <z_priq_dumb_remove+0x22>
   1a942:	490b      	ldr	r1, [pc, #44]	; (1a970 <z_priq_dumb_remove+0x38>)
   1a944:	480b      	ldr	r0, [pc, #44]	; (1a974 <z_priq_dumb_remove+0x3c>)
   1a946:	4a0c      	ldr	r2, [pc, #48]	; (1a978 <z_priq_dumb_remove+0x40>)
   1a948:	f240 33b5 	movw	r3, #949	; 0x3b5
   1a94c:	f002 f829 	bl	1c9a2 <printk>
   1a950:	4809      	ldr	r0, [pc, #36]	; (1a978 <z_priq_dumb_remove+0x40>)
   1a952:	f240 31b5 	movw	r1, #949	; 0x3b5
   1a956:	f002 fa7e 	bl	1ce56 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   1a95a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   1a95e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1a960:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a962:	2300      	movs	r3, #0
	node->prev = NULL;
   1a964:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1a968:	bd10      	pop	{r4, pc}
   1a96a:	bf00      	nop
   1a96c:	200019e0 	.word	0x200019e0
   1a970:	000217c3 	.word	0x000217c3
   1a974:	0001feb5 	.word	0x0001feb5
   1a978:	000217a1 	.word	0x000217a1

0001a97c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   1a97c:	6883      	ldr	r3, [r0, #8]
{
   1a97e:	b510      	push	{r4, lr}
   1a980:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   1a982:	b95b      	cbnz	r3, 1a99c <unpend_thread_no_timeout+0x20>
   1a984:	490b      	ldr	r1, [pc, #44]	; (1a9b4 <unpend_thread_no_timeout+0x38>)
   1a986:	480c      	ldr	r0, [pc, #48]	; (1a9b8 <unpend_thread_no_timeout+0x3c>)
   1a988:	4a0c      	ldr	r2, [pc, #48]	; (1a9bc <unpend_thread_no_timeout+0x40>)
   1a98a:	f240 2353 	movw	r3, #595	; 0x253
   1a98e:	f002 f808 	bl	1c9a2 <printk>
   1a992:	480a      	ldr	r0, [pc, #40]	; (1a9bc <unpend_thread_no_timeout+0x40>)
   1a994:	f240 2153 	movw	r1, #595	; 0x253
   1a998:	f002 fa5d 	bl	1ce56 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1a99c:	68a0      	ldr	r0, [r4, #8]
   1a99e:	4621      	mov	r1, r4
   1a9a0:	f7ff ffca 	bl	1a938 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1a9a4:	7b63      	ldrb	r3, [r4, #13]
   1a9a6:	f023 0302 	bic.w	r3, r3, #2
   1a9aa:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1a9ac:	2300      	movs	r3, #0
   1a9ae:	60a3      	str	r3, [r4, #8]
}
   1a9b0:	bd10      	pop	{r4, pc}
   1a9b2:	bf00      	nop
   1a9b4:	000217e4 	.word	0x000217e4
   1a9b8:	0001feb5 	.word	0x0001feb5
   1a9bc:	000217a1 	.word	0x000217a1

0001a9c0 <z_unpend_thread>:
{
   1a9c0:	b538      	push	{r3, r4, r5, lr}
   1a9c2:	4604      	mov	r4, r0
	__asm__ volatile(
   1a9c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a9c8:	f3ef 8511 	mrs	r5, BASEPRI
   1a9cc:	f383 8812 	msr	BASEPRI_MAX, r3
   1a9d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a9d4:	4819      	ldr	r0, [pc, #100]	; (1aa3c <z_unpend_thread+0x7c>)
   1a9d6:	f7fe fd03 	bl	193e0 <z_spin_lock_valid>
   1a9da:	b968      	cbnz	r0, 1a9f8 <z_unpend_thread+0x38>
   1a9dc:	4a18      	ldr	r2, [pc, #96]	; (1aa40 <z_unpend_thread+0x80>)
   1a9de:	4919      	ldr	r1, [pc, #100]	; (1aa44 <z_unpend_thread+0x84>)
   1a9e0:	4819      	ldr	r0, [pc, #100]	; (1aa48 <z_unpend_thread+0x88>)
   1a9e2:	2381      	movs	r3, #129	; 0x81
   1a9e4:	f001 ffdd 	bl	1c9a2 <printk>
   1a9e8:	4914      	ldr	r1, [pc, #80]	; (1aa3c <z_unpend_thread+0x7c>)
   1a9ea:	4818      	ldr	r0, [pc, #96]	; (1aa4c <z_unpend_thread+0x8c>)
   1a9ec:	f001 ffd9 	bl	1c9a2 <printk>
   1a9f0:	4813      	ldr	r0, [pc, #76]	; (1aa40 <z_unpend_thread+0x80>)
   1a9f2:	2181      	movs	r1, #129	; 0x81
   1a9f4:	f002 fa2f 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a9f8:	4810      	ldr	r0, [pc, #64]	; (1aa3c <z_unpend_thread+0x7c>)
   1a9fa:	f7fe fd0f 	bl	1941c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1a9fe:	4620      	mov	r0, r4
   1aa00:	f7ff ffbc 	bl	1a97c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aa04:	480d      	ldr	r0, [pc, #52]	; (1aa3c <z_unpend_thread+0x7c>)
   1aa06:	f7fe fcf9 	bl	193fc <z_spin_unlock_valid>
   1aa0a:	b968      	cbnz	r0, 1aa28 <z_unpend_thread+0x68>
   1aa0c:	4a0c      	ldr	r2, [pc, #48]	; (1aa40 <z_unpend_thread+0x80>)
   1aa0e:	4910      	ldr	r1, [pc, #64]	; (1aa50 <z_unpend_thread+0x90>)
   1aa10:	480d      	ldr	r0, [pc, #52]	; (1aa48 <z_unpend_thread+0x88>)
   1aa12:	23ac      	movs	r3, #172	; 0xac
   1aa14:	f001 ffc5 	bl	1c9a2 <printk>
   1aa18:	4908      	ldr	r1, [pc, #32]	; (1aa3c <z_unpend_thread+0x7c>)
   1aa1a:	480e      	ldr	r0, [pc, #56]	; (1aa54 <z_unpend_thread+0x94>)
   1aa1c:	f001 ffc1 	bl	1c9a2 <printk>
   1aa20:	4807      	ldr	r0, [pc, #28]	; (1aa40 <z_unpend_thread+0x80>)
   1aa22:	21ac      	movs	r1, #172	; 0xac
   1aa24:	f002 fa17 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1aa28:	f385 8811 	msr	BASEPRI, r5
   1aa2c:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1aa30:	f104 0018 	add.w	r0, r4, #24
}
   1aa34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1aa38:	f001 b922 	b.w	1bc80 <z_abort_timeout>
   1aa3c:	20001ef4 	.word	0x20001ef4
   1aa40:	0001ff75 	.word	0x0001ff75
   1aa44:	0001ffc7 	.word	0x0001ffc7
   1aa48:	0001feb5 	.word	0x0001feb5
   1aa4c:	0001ffdc 	.word	0x0001ffdc
   1aa50:	0001ff9b 	.word	0x0001ff9b
   1aa54:	0001ffb2 	.word	0x0001ffb2

0001aa58 <update_cache>:
{
   1aa58:	b538      	push	{r3, r4, r5, lr}
   1aa5a:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1aa5c:	4814      	ldr	r0, [pc, #80]	; (1aab0 <update_cache+0x58>)
   1aa5e:	4d15      	ldr	r5, [pc, #84]	; (1aab4 <update_cache+0x5c>)
   1aa60:	f004 fcf0 	bl	1f444 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1aa64:	4604      	mov	r4, r0
   1aa66:	b900      	cbnz	r0, 1aa6a <update_cache+0x12>
   1aa68:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   1aa6a:	b9ca      	cbnz	r2, 1aaa0 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   1aa6c:	68ab      	ldr	r3, [r5, #8]
   1aa6e:	b963      	cbnz	r3, 1aa8a <update_cache+0x32>
   1aa70:	4911      	ldr	r1, [pc, #68]	; (1aab8 <update_cache+0x60>)
   1aa72:	4a12      	ldr	r2, [pc, #72]	; (1aabc <update_cache+0x64>)
   1aa74:	4812      	ldr	r0, [pc, #72]	; (1aac0 <update_cache+0x68>)
   1aa76:	2381      	movs	r3, #129	; 0x81
   1aa78:	f001 ff93 	bl	1c9a2 <printk>
   1aa7c:	4811      	ldr	r0, [pc, #68]	; (1aac4 <update_cache+0x6c>)
   1aa7e:	f001 ff90 	bl	1c9a2 <printk>
   1aa82:	480e      	ldr	r0, [pc, #56]	; (1aabc <update_cache+0x64>)
   1aa84:	2181      	movs	r1, #129	; 0x81
   1aa86:	f002 f9e6 	bl	1ce56 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1aa8a:	68ab      	ldr	r3, [r5, #8]
   1aa8c:	7b5a      	ldrb	r2, [r3, #13]
   1aa8e:	06d2      	lsls	r2, r2, #27
   1aa90:	d106      	bne.n	1aaa0 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1aa92:	69a2      	ldr	r2, [r4, #24]
   1aa94:	b922      	cbnz	r2, 1aaa0 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
   1aa96:	89da      	ldrh	r2, [r3, #14]
   1aa98:	2a7f      	cmp	r2, #127	; 0x7f
   1aa9a:	d901      	bls.n	1aaa0 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
   1aa9c:	61eb      	str	r3, [r5, #28]
}
   1aa9e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1aaa0:	68ab      	ldr	r3, [r5, #8]
   1aaa2:	42a3      	cmp	r3, r4
   1aaa4:	d001      	beq.n	1aaaa <update_cache+0x52>
			z_reset_time_slice();
   1aaa6:	f7ff fe13 	bl	1a6d0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1aaaa:	61ec      	str	r4, [r5, #28]
}
   1aaac:	e7f7      	b.n	1aa9e <update_cache+0x46>
   1aaae:	bf00      	nop
   1aab0:	20001ed4 	.word	0x20001ed4
   1aab4:	20001eb4 	.word	0x20001eb4
   1aab8:	000217fb 	.word	0x000217fb
   1aabc:	000217a1 	.word	0x000217a1
   1aac0:	0001feb5 	.word	0x0001feb5
   1aac4:	00020d40 	.word	0x00020d40

0001aac8 <move_thread_to_end_of_prio_q>:
{
   1aac8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1aaca:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1aace:	7b43      	ldrb	r3, [r0, #13]
   1aad0:	2a00      	cmp	r2, #0
{
   1aad2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1aad4:	da06      	bge.n	1aae4 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1aad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1aada:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   1aadc:	4601      	mov	r1, r0
   1aade:	481f      	ldr	r0, [pc, #124]	; (1ab5c <move_thread_to_end_of_prio_q+0x94>)
   1aae0:	f7ff ff2a 	bl	1a938 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1aae4:	7b63      	ldrb	r3, [r4, #13]
   1aae6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1aaea:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1aaec:	4b1c      	ldr	r3, [pc, #112]	; (1ab60 <move_thread_to_end_of_prio_q+0x98>)
   1aaee:	429c      	cmp	r4, r3
   1aaf0:	d109      	bne.n	1ab06 <move_thread_to_end_of_prio_q+0x3e>
   1aaf2:	491c      	ldr	r1, [pc, #112]	; (1ab64 <move_thread_to_end_of_prio_q+0x9c>)
   1aaf4:	481c      	ldr	r0, [pc, #112]	; (1ab68 <move_thread_to_end_of_prio_q+0xa0>)
   1aaf6:	4a1d      	ldr	r2, [pc, #116]	; (1ab6c <move_thread_to_end_of_prio_q+0xa4>)
   1aaf8:	23b1      	movs	r3, #177	; 0xb1
   1aafa:	f001 ff52 	bl	1c9a2 <printk>
   1aafe:	481b      	ldr	r0, [pc, #108]	; (1ab6c <move_thread_to_end_of_prio_q+0xa4>)
   1ab00:	21b1      	movs	r1, #177	; 0xb1
   1ab02:	f002 f9a8 	bl	1ce56 <assert_post_action>
	return list->head == list;
   1ab06:	4a1a      	ldr	r2, [pc, #104]	; (1ab70 <move_thread_to_end_of_prio_q+0xa8>)
   1ab08:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ab0a:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
   1ab0c:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ab10:	428b      	cmp	r3, r1
   1ab12:	bf08      	it	eq
   1ab14:	2300      	moveq	r3, #0
   1ab16:	2b00      	cmp	r3, #0
   1ab18:	bf38      	it	cc
   1ab1a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ab1c:	b1cb      	cbz	r3, 1ab52 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
   1ab1e:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1ab22:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1ab26:	4286      	cmp	r6, r0
   1ab28:	d00f      	beq.n	1ab4a <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
   1ab2a:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ab2c:	2800      	cmp	r0, #0
   1ab2e:	dd0c      	ble.n	1ab4a <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   1ab30:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1ab32:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1ab36:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1ab38:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   1ab3a:	6890      	ldr	r0, [r2, #8]
   1ab3c:	1b03      	subs	r3, r0, r4
   1ab3e:	4258      	negs	r0, r3
}
   1ab40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1ab44:	4158      	adcs	r0, r3
   1ab46:	f7ff bf87 	b.w	1aa58 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1ab4a:	42ab      	cmp	r3, r5
   1ab4c:	d001      	beq.n	1ab52 <move_thread_to_end_of_prio_q+0x8a>
   1ab4e:	681b      	ldr	r3, [r3, #0]
   1ab50:	e7e4      	b.n	1ab1c <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
   1ab52:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   1ab56:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1ab58:	6254      	str	r4, [r2, #36]	; 0x24
}
   1ab5a:	e7ee      	b.n	1ab3a <move_thread_to_end_of_prio_q+0x72>
   1ab5c:	20001ed4 	.word	0x20001ed4
   1ab60:	200019e0 	.word	0x200019e0
   1ab64:	000217c3 	.word	0x000217c3
   1ab68:	0001feb5 	.word	0x0001feb5
   1ab6c:	000217a1 	.word	0x000217a1
   1ab70:	20001eb4 	.word	0x20001eb4

0001ab74 <z_time_slice>:
{
   1ab74:	b570      	push	{r4, r5, r6, lr}
   1ab76:	4604      	mov	r4, r0
	__asm__ volatile(
   1ab78:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ab7c:	f3ef 8511 	mrs	r5, BASEPRI
   1ab80:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ab88:	482a      	ldr	r0, [pc, #168]	; (1ac34 <z_time_slice+0xc0>)
   1ab8a:	f7fe fc29 	bl	193e0 <z_spin_lock_valid>
   1ab8e:	b968      	cbnz	r0, 1abac <z_time_slice+0x38>
   1ab90:	4a29      	ldr	r2, [pc, #164]	; (1ac38 <z_time_slice+0xc4>)
   1ab92:	492a      	ldr	r1, [pc, #168]	; (1ac3c <z_time_slice+0xc8>)
   1ab94:	482a      	ldr	r0, [pc, #168]	; (1ac40 <z_time_slice+0xcc>)
   1ab96:	2381      	movs	r3, #129	; 0x81
   1ab98:	f001 ff03 	bl	1c9a2 <printk>
   1ab9c:	4925      	ldr	r1, [pc, #148]	; (1ac34 <z_time_slice+0xc0>)
   1ab9e:	4829      	ldr	r0, [pc, #164]	; (1ac44 <z_time_slice+0xd0>)
   1aba0:	f001 feff 	bl	1c9a2 <printk>
   1aba4:	4824      	ldr	r0, [pc, #144]	; (1ac38 <z_time_slice+0xc4>)
   1aba6:	2181      	movs	r1, #129	; 0x81
   1aba8:	f002 f955 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1abac:	4821      	ldr	r0, [pc, #132]	; (1ac34 <z_time_slice+0xc0>)
   1abae:	f7fe fc35 	bl	1941c <z_spin_lock_set_owner>
	if (pending_current == _current) {
   1abb2:	4b25      	ldr	r3, [pc, #148]	; (1ac48 <z_time_slice+0xd4>)
   1abb4:	4a25      	ldr	r2, [pc, #148]	; (1ac4c <z_time_slice+0xd8>)
   1abb6:	6898      	ldr	r0, [r3, #8]
   1abb8:	6811      	ldr	r1, [r2, #0]
   1abba:	4288      	cmp	r0, r1
   1abbc:	4619      	mov	r1, r3
   1abbe:	d118      	bne.n	1abf2 <z_time_slice+0x7e>
			z_reset_time_slice();
   1abc0:	f7ff fd86 	bl	1a6d0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1abc4:	481b      	ldr	r0, [pc, #108]	; (1ac34 <z_time_slice+0xc0>)
   1abc6:	f7fe fc19 	bl	193fc <z_spin_unlock_valid>
   1abca:	b968      	cbnz	r0, 1abe8 <z_time_slice+0x74>
   1abcc:	4a1a      	ldr	r2, [pc, #104]	; (1ac38 <z_time_slice+0xc4>)
   1abce:	4920      	ldr	r1, [pc, #128]	; (1ac50 <z_time_slice+0xdc>)
   1abd0:	481b      	ldr	r0, [pc, #108]	; (1ac40 <z_time_slice+0xcc>)
   1abd2:	23ac      	movs	r3, #172	; 0xac
   1abd4:	f001 fee5 	bl	1c9a2 <printk>
   1abd8:	4916      	ldr	r1, [pc, #88]	; (1ac34 <z_time_slice+0xc0>)
   1abda:	481e      	ldr	r0, [pc, #120]	; (1ac54 <z_time_slice+0xe0>)
   1abdc:	f001 fee1 	bl	1c9a2 <printk>
   1abe0:	4815      	ldr	r0, [pc, #84]	; (1ac38 <z_time_slice+0xc4>)
   1abe2:	21ac      	movs	r1, #172	; 0xac
   1abe4:	f002 f937 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1abe8:	f385 8811 	msr	BASEPRI, r5
   1abec:	f3bf 8f6f 	isb	sy
}
   1abf0:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1abf2:	2600      	movs	r6, #0
   1abf4:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1abf6:	4a18      	ldr	r2, [pc, #96]	; (1ac58 <z_time_slice+0xe4>)
   1abf8:	6812      	ldr	r2, [r2, #0]
   1abfa:	b1ba      	cbz	r2, 1ac2c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   1abfc:	89c2      	ldrh	r2, [r0, #14]
   1abfe:	2a7f      	cmp	r2, #127	; 0x7f
   1ac00:	d814      	bhi.n	1ac2c <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   1ac02:	7b42      	ldrb	r2, [r0, #13]
   1ac04:	06d2      	lsls	r2, r2, #27
   1ac06:	d111      	bne.n	1ac2c <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1ac08:	4a14      	ldr	r2, [pc, #80]	; (1ac5c <z_time_slice+0xe8>)
   1ac0a:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1ac0e:	6812      	ldr	r2, [r2, #0]
   1ac10:	4296      	cmp	r6, r2
   1ac12:	db0b      	blt.n	1ac2c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   1ac14:	4a12      	ldr	r2, [pc, #72]	; (1ac60 <z_time_slice+0xec>)
   1ac16:	4290      	cmp	r0, r2
   1ac18:	d008      	beq.n	1ac2c <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   1ac1a:	691a      	ldr	r2, [r3, #16]
   1ac1c:	42a2      	cmp	r2, r4
   1ac1e:	dc02      	bgt.n	1ac26 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   1ac20:	f7ff ff52 	bl	1aac8 <move_thread_to_end_of_prio_q>
   1ac24:	e7cc      	b.n	1abc0 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   1ac26:	1b12      	subs	r2, r2, r4
   1ac28:	611a      	str	r2, [r3, #16]
   1ac2a:	e7cb      	b.n	1abc4 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   1ac2c:	2300      	movs	r3, #0
   1ac2e:	610b      	str	r3, [r1, #16]
   1ac30:	e7c8      	b.n	1abc4 <z_time_slice+0x50>
   1ac32:	bf00      	nop
   1ac34:	20001ef4 	.word	0x20001ef4
   1ac38:	0001ff75 	.word	0x0001ff75
   1ac3c:	0001ffc7 	.word	0x0001ffc7
   1ac40:	0001feb5 	.word	0x0001feb5
   1ac44:	0001ffdc 	.word	0x0001ffdc
   1ac48:	20001eb4 	.word	0x20001eb4
   1ac4c:	20001ef0 	.word	0x20001ef0
   1ac50:	0001ff9b 	.word	0x0001ff9b
   1ac54:	0001ffb2 	.word	0x0001ffb2
   1ac58:	20001efc 	.word	0x20001efc
   1ac5c:	20001ef8 	.word	0x20001ef8
   1ac60:	200019e0 	.word	0x200019e0

0001ac64 <ready_thread>:
{
   1ac64:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1ac66:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1ac6a:	7b43      	ldrb	r3, [r0, #13]
   1ac6c:	2a00      	cmp	r2, #0
{
   1ac6e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1ac70:	db3e      	blt.n	1acf0 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ac72:	06da      	lsls	r2, r3, #27
   1ac74:	d13c      	bne.n	1acf0 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
   1ac76:	6985      	ldr	r5, [r0, #24]
   1ac78:	2d00      	cmp	r5, #0
   1ac7a:	d139      	bne.n	1acf0 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
   1ac7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ac80:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1ac82:	4b1c      	ldr	r3, [pc, #112]	; (1acf4 <ready_thread+0x90>)
   1ac84:	4298      	cmp	r0, r3
   1ac86:	d109      	bne.n	1ac9c <ready_thread+0x38>
   1ac88:	491b      	ldr	r1, [pc, #108]	; (1acf8 <ready_thread+0x94>)
   1ac8a:	481c      	ldr	r0, [pc, #112]	; (1acfc <ready_thread+0x98>)
   1ac8c:	4a1c      	ldr	r2, [pc, #112]	; (1ad00 <ready_thread+0x9c>)
   1ac8e:	23b1      	movs	r3, #177	; 0xb1
   1ac90:	f001 fe87 	bl	1c9a2 <printk>
   1ac94:	481a      	ldr	r0, [pc, #104]	; (1ad00 <ready_thread+0x9c>)
   1ac96:	21b1      	movs	r1, #177	; 0xb1
   1ac98:	f002 f8dd 	bl	1ce56 <assert_post_action>
	return list->head == list;
   1ac9c:	4919      	ldr	r1, [pc, #100]	; (1ad04 <ready_thread+0xa0>)
   1ac9e:	460b      	mov	r3, r1
   1aca0:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aca4:	4298      	cmp	r0, r3
   1aca6:	bf18      	it	ne
   1aca8:	4605      	movne	r5, r0
   1acaa:	2d00      	cmp	r5, #0
   1acac:	461a      	mov	r2, r3
   1acae:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1acb0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   1acb2:	bf38      	it	cc
   1acb4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1acb6:	b1b3      	cbz	r3, 1ace6 <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
   1acb8:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1acbc:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1acc0:	4286      	cmp	r6, r0
   1acc2:	d00c      	beq.n	1acde <ready_thread+0x7a>
		return b2 - b1;
   1acc4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1acc6:	2800      	cmp	r0, #0
   1acc8:	dd09      	ble.n	1acde <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
   1acca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1accc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1acd0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1acd2:	605c      	str	r4, [r3, #4]
}
   1acd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   1acd8:	2000      	movs	r0, #0
   1acda:	f7ff bebd 	b.w	1aa58 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1acde:	42ab      	cmp	r3, r5
   1ace0:	d001      	beq.n	1ace6 <ready_thread+0x82>
   1ace2:	681b      	ldr	r3, [r3, #0]
   1ace4:	e7e7      	b.n	1acb6 <ready_thread+0x52>
	node->prev = tail;
   1ace6:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   1acea:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1acec:	624c      	str	r4, [r1, #36]	; 0x24
}
   1acee:	e7f1      	b.n	1acd4 <ready_thread+0x70>
}
   1acf0:	bd70      	pop	{r4, r5, r6, pc}
   1acf2:	bf00      	nop
   1acf4:	200019e0 	.word	0x200019e0
   1acf8:	000217c3 	.word	0x000217c3
   1acfc:	0001feb5 	.word	0x0001feb5
   1ad00:	000217a1 	.word	0x000217a1
   1ad04:	20001eb4 	.word	0x20001eb4

0001ad08 <z_ready_thread>:
{
   1ad08:	b538      	push	{r3, r4, r5, lr}
   1ad0a:	4604      	mov	r4, r0
	__asm__ volatile(
   1ad0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ad10:	f3ef 8511 	mrs	r5, BASEPRI
   1ad14:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ad1c:	4817      	ldr	r0, [pc, #92]	; (1ad7c <z_ready_thread+0x74>)
   1ad1e:	f7fe fb5f 	bl	193e0 <z_spin_lock_valid>
   1ad22:	b968      	cbnz	r0, 1ad40 <z_ready_thread+0x38>
   1ad24:	4a16      	ldr	r2, [pc, #88]	; (1ad80 <z_ready_thread+0x78>)
   1ad26:	4917      	ldr	r1, [pc, #92]	; (1ad84 <z_ready_thread+0x7c>)
   1ad28:	4817      	ldr	r0, [pc, #92]	; (1ad88 <z_ready_thread+0x80>)
   1ad2a:	2381      	movs	r3, #129	; 0x81
   1ad2c:	f001 fe39 	bl	1c9a2 <printk>
   1ad30:	4912      	ldr	r1, [pc, #72]	; (1ad7c <z_ready_thread+0x74>)
   1ad32:	4816      	ldr	r0, [pc, #88]	; (1ad8c <z_ready_thread+0x84>)
   1ad34:	f001 fe35 	bl	1c9a2 <printk>
   1ad38:	4811      	ldr	r0, [pc, #68]	; (1ad80 <z_ready_thread+0x78>)
   1ad3a:	2181      	movs	r1, #129	; 0x81
   1ad3c:	f002 f88b 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ad40:	480e      	ldr	r0, [pc, #56]	; (1ad7c <z_ready_thread+0x74>)
   1ad42:	f7fe fb6b 	bl	1941c <z_spin_lock_set_owner>
			ready_thread(thread);
   1ad46:	4620      	mov	r0, r4
   1ad48:	f7ff ff8c 	bl	1ac64 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ad4c:	480b      	ldr	r0, [pc, #44]	; (1ad7c <z_ready_thread+0x74>)
   1ad4e:	f7fe fb55 	bl	193fc <z_spin_unlock_valid>
   1ad52:	b968      	cbnz	r0, 1ad70 <z_ready_thread+0x68>
   1ad54:	4a0a      	ldr	r2, [pc, #40]	; (1ad80 <z_ready_thread+0x78>)
   1ad56:	490e      	ldr	r1, [pc, #56]	; (1ad90 <z_ready_thread+0x88>)
   1ad58:	480b      	ldr	r0, [pc, #44]	; (1ad88 <z_ready_thread+0x80>)
   1ad5a:	23ac      	movs	r3, #172	; 0xac
   1ad5c:	f001 fe21 	bl	1c9a2 <printk>
   1ad60:	4906      	ldr	r1, [pc, #24]	; (1ad7c <z_ready_thread+0x74>)
   1ad62:	480c      	ldr	r0, [pc, #48]	; (1ad94 <z_ready_thread+0x8c>)
   1ad64:	f001 fe1d 	bl	1c9a2 <printk>
   1ad68:	4805      	ldr	r0, [pc, #20]	; (1ad80 <z_ready_thread+0x78>)
   1ad6a:	21ac      	movs	r1, #172	; 0xac
   1ad6c:	f002 f873 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1ad70:	f385 8811 	msr	BASEPRI, r5
   1ad74:	f3bf 8f6f 	isb	sy
}
   1ad78:	bd38      	pop	{r3, r4, r5, pc}
   1ad7a:	bf00      	nop
   1ad7c:	20001ef4 	.word	0x20001ef4
   1ad80:	0001ff75 	.word	0x0001ff75
   1ad84:	0001ffc7 	.word	0x0001ffc7
   1ad88:	0001feb5 	.word	0x0001feb5
   1ad8c:	0001ffdc 	.word	0x0001ffdc
   1ad90:	0001ff9b 	.word	0x0001ff9b
   1ad94:	0001ffb2 	.word	0x0001ffb2

0001ad98 <z_sched_start>:
{
   1ad98:	b538      	push	{r3, r4, r5, lr}
   1ad9a:	4604      	mov	r4, r0
	__asm__ volatile(
   1ad9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ada0:	f3ef 8511 	mrs	r5, BASEPRI
   1ada4:	f383 8812 	msr	BASEPRI_MAX, r3
   1ada8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1adac:	481d      	ldr	r0, [pc, #116]	; (1ae24 <z_sched_start+0x8c>)
   1adae:	f7fe fb17 	bl	193e0 <z_spin_lock_valid>
   1adb2:	b968      	cbnz	r0, 1add0 <z_sched_start+0x38>
   1adb4:	4a1c      	ldr	r2, [pc, #112]	; (1ae28 <z_sched_start+0x90>)
   1adb6:	491d      	ldr	r1, [pc, #116]	; (1ae2c <z_sched_start+0x94>)
   1adb8:	481d      	ldr	r0, [pc, #116]	; (1ae30 <z_sched_start+0x98>)
   1adba:	2381      	movs	r3, #129	; 0x81
   1adbc:	f001 fdf1 	bl	1c9a2 <printk>
   1adc0:	4918      	ldr	r1, [pc, #96]	; (1ae24 <z_sched_start+0x8c>)
   1adc2:	481c      	ldr	r0, [pc, #112]	; (1ae34 <z_sched_start+0x9c>)
   1adc4:	f001 fded 	bl	1c9a2 <printk>
   1adc8:	4817      	ldr	r0, [pc, #92]	; (1ae28 <z_sched_start+0x90>)
   1adca:	2181      	movs	r1, #129	; 0x81
   1adcc:	f002 f843 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1add0:	4814      	ldr	r0, [pc, #80]	; (1ae24 <z_sched_start+0x8c>)
   1add2:	f7fe fb23 	bl	1941c <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   1add6:	7b63      	ldrb	r3, [r4, #13]
   1add8:	075a      	lsls	r2, r3, #29
   1adda:	d416      	bmi.n	1ae0a <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1addc:	4811      	ldr	r0, [pc, #68]	; (1ae24 <z_sched_start+0x8c>)
   1adde:	f7fe fb0d 	bl	193fc <z_spin_unlock_valid>
   1ade2:	b968      	cbnz	r0, 1ae00 <z_sched_start+0x68>
   1ade4:	4a10      	ldr	r2, [pc, #64]	; (1ae28 <z_sched_start+0x90>)
   1ade6:	4914      	ldr	r1, [pc, #80]	; (1ae38 <z_sched_start+0xa0>)
   1ade8:	4811      	ldr	r0, [pc, #68]	; (1ae30 <z_sched_start+0x98>)
   1adea:	23ac      	movs	r3, #172	; 0xac
   1adec:	f001 fdd9 	bl	1c9a2 <printk>
   1adf0:	490c      	ldr	r1, [pc, #48]	; (1ae24 <z_sched_start+0x8c>)
   1adf2:	4812      	ldr	r0, [pc, #72]	; (1ae3c <z_sched_start+0xa4>)
   1adf4:	f001 fdd5 	bl	1c9a2 <printk>
   1adf8:	480b      	ldr	r0, [pc, #44]	; (1ae28 <z_sched_start+0x90>)
   1adfa:	21ac      	movs	r1, #172	; 0xac
   1adfc:	f002 f82b 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1ae00:	f385 8811 	msr	BASEPRI, r5
   1ae04:	f3bf 8f6f 	isb	sy
}
   1ae08:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ae0a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   1ae0e:	4620      	mov	r0, r4
   1ae10:	7363      	strb	r3, [r4, #13]
   1ae12:	f7ff ff27 	bl	1ac64 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1ae16:	4629      	mov	r1, r5
   1ae18:	4802      	ldr	r0, [pc, #8]	; (1ae24 <z_sched_start+0x8c>)
}
   1ae1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   1ae1e:	f7ff bcd3 	b.w	1a7c8 <z_reschedule>
   1ae22:	bf00      	nop
   1ae24:	20001ef4 	.word	0x20001ef4
   1ae28:	0001ff75 	.word	0x0001ff75
   1ae2c:	0001ffc7 	.word	0x0001ffc7
   1ae30:	0001feb5 	.word	0x0001feb5
   1ae34:	0001ffdc 	.word	0x0001ffdc
   1ae38:	0001ff9b 	.word	0x0001ff9b
   1ae3c:	0001ffb2 	.word	0x0001ffb2

0001ae40 <z_thread_timeout>:
{
   1ae40:	b570      	push	{r4, r5, r6, lr}
   1ae42:	4604      	mov	r4, r0
	__asm__ volatile(
   1ae44:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ae48:	f3ef 8611 	mrs	r6, BASEPRI
   1ae4c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ae54:	4820      	ldr	r0, [pc, #128]	; (1aed8 <z_thread_timeout+0x98>)
   1ae56:	f7fe fac3 	bl	193e0 <z_spin_lock_valid>
   1ae5a:	b968      	cbnz	r0, 1ae78 <z_thread_timeout+0x38>
   1ae5c:	4a1f      	ldr	r2, [pc, #124]	; (1aedc <z_thread_timeout+0x9c>)
   1ae5e:	4920      	ldr	r1, [pc, #128]	; (1aee0 <z_thread_timeout+0xa0>)
   1ae60:	4820      	ldr	r0, [pc, #128]	; (1aee4 <z_thread_timeout+0xa4>)
   1ae62:	2381      	movs	r3, #129	; 0x81
   1ae64:	f001 fd9d 	bl	1c9a2 <printk>
   1ae68:	491b      	ldr	r1, [pc, #108]	; (1aed8 <z_thread_timeout+0x98>)
   1ae6a:	481f      	ldr	r0, [pc, #124]	; (1aee8 <z_thread_timeout+0xa8>)
   1ae6c:	f001 fd99 	bl	1c9a2 <printk>
   1ae70:	481a      	ldr	r0, [pc, #104]	; (1aedc <z_thread_timeout+0x9c>)
   1ae72:	2181      	movs	r1, #129	; 0x81
   1ae74:	f001 ffef 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ae78:	4817      	ldr	r0, [pc, #92]	; (1aed8 <z_thread_timeout+0x98>)
   1ae7a:	f7fe facf 	bl	1941c <z_spin_lock_set_owner>
		if (!killed) {
   1ae7e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1ae82:	f013 0f28 	tst.w	r3, #40	; 0x28
   1ae86:	d110      	bne.n	1aeaa <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   1ae88:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1ae8c:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   1ae90:	b113      	cbz	r3, 1ae98 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   1ae92:	4628      	mov	r0, r5
   1ae94:	f7ff fd72 	bl	1a97c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1ae98:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1ae9c:	f023 0314 	bic.w	r3, r3, #20
   1aea0:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   1aea4:	4628      	mov	r0, r5
   1aea6:	f7ff fedd 	bl	1ac64 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aeaa:	480b      	ldr	r0, [pc, #44]	; (1aed8 <z_thread_timeout+0x98>)
   1aeac:	f7fe faa6 	bl	193fc <z_spin_unlock_valid>
   1aeb0:	b968      	cbnz	r0, 1aece <z_thread_timeout+0x8e>
   1aeb2:	4a0a      	ldr	r2, [pc, #40]	; (1aedc <z_thread_timeout+0x9c>)
   1aeb4:	490d      	ldr	r1, [pc, #52]	; (1aeec <z_thread_timeout+0xac>)
   1aeb6:	480b      	ldr	r0, [pc, #44]	; (1aee4 <z_thread_timeout+0xa4>)
   1aeb8:	23ac      	movs	r3, #172	; 0xac
   1aeba:	f001 fd72 	bl	1c9a2 <printk>
   1aebe:	4906      	ldr	r1, [pc, #24]	; (1aed8 <z_thread_timeout+0x98>)
   1aec0:	480b      	ldr	r0, [pc, #44]	; (1aef0 <z_thread_timeout+0xb0>)
   1aec2:	f001 fd6e 	bl	1c9a2 <printk>
   1aec6:	4805      	ldr	r0, [pc, #20]	; (1aedc <z_thread_timeout+0x9c>)
   1aec8:	21ac      	movs	r1, #172	; 0xac
   1aeca:	f001 ffc4 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1aece:	f386 8811 	msr	BASEPRI, r6
   1aed2:	f3bf 8f6f 	isb	sy
}
   1aed6:	bd70      	pop	{r4, r5, r6, pc}
   1aed8:	20001ef4 	.word	0x20001ef4
   1aedc:	0001ff75 	.word	0x0001ff75
   1aee0:	0001ffc7 	.word	0x0001ffc7
   1aee4:	0001feb5 	.word	0x0001feb5
   1aee8:	0001ffdc 	.word	0x0001ffdc
   1aeec:	0001ff9b 	.word	0x0001ff9b
   1aef0:	0001ffb2 	.word	0x0001ffb2

0001aef4 <unready_thread>:
{
   1aef4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1aef6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1aefa:	7b43      	ldrb	r3, [r0, #13]
   1aefc:	2a00      	cmp	r2, #0
{
   1aefe:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1af00:	da06      	bge.n	1af10 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1af02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1af06:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   1af08:	4601      	mov	r1, r0
   1af0a:	4806      	ldr	r0, [pc, #24]	; (1af24 <unready_thread+0x30>)
   1af0c:	f7ff fd14 	bl	1a938 <z_priq_dumb_remove>
	update_cache(thread == _current);
   1af10:	4b05      	ldr	r3, [pc, #20]	; (1af28 <unready_thread+0x34>)
   1af12:	6898      	ldr	r0, [r3, #8]
   1af14:	1b03      	subs	r3, r0, r4
   1af16:	4258      	negs	r0, r3
}
   1af18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   1af1c:	4158      	adcs	r0, r3
   1af1e:	f7ff bd9b 	b.w	1aa58 <update_cache>
   1af22:	bf00      	nop
   1af24:	20001ed4 	.word	0x20001ed4
   1af28:	20001eb4 	.word	0x20001eb4

0001af2c <add_to_waitq_locked>:
{
   1af2c:	b538      	push	{r3, r4, r5, lr}
   1af2e:	4604      	mov	r4, r0
   1af30:	460d      	mov	r5, r1
	unready_thread(thread);
   1af32:	f7ff ffdf 	bl	1aef4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1af36:	7b63      	ldrb	r3, [r4, #13]
   1af38:	f043 0302 	orr.w	r3, r3, #2
   1af3c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1af3e:	b31d      	cbz	r5, 1af88 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1af40:	4b17      	ldr	r3, [pc, #92]	; (1afa0 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   1af42:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1af44:	429c      	cmp	r4, r3
   1af46:	d109      	bne.n	1af5c <add_to_waitq_locked+0x30>
   1af48:	4916      	ldr	r1, [pc, #88]	; (1afa4 <add_to_waitq_locked+0x78>)
   1af4a:	4817      	ldr	r0, [pc, #92]	; (1afa8 <add_to_waitq_locked+0x7c>)
   1af4c:	4a17      	ldr	r2, [pc, #92]	; (1afac <add_to_waitq_locked+0x80>)
   1af4e:	23b1      	movs	r3, #177	; 0xb1
   1af50:	f001 fd27 	bl	1c9a2 <printk>
   1af54:	4815      	ldr	r0, [pc, #84]	; (1afac <add_to_waitq_locked+0x80>)
   1af56:	21b1      	movs	r1, #177	; 0xb1
   1af58:	f001 ff7d 	bl	1ce56 <assert_post_action>
	return list->head == list;
   1af5c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1af5e:	429d      	cmp	r5, r3
   1af60:	bf08      	it	eq
   1af62:	2300      	moveq	r3, #0
   1af64:	2b00      	cmp	r3, #0
   1af66:	bf38      	it	cc
   1af68:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1af6a:	b19b      	cbz	r3, 1af94 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
   1af6c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1af70:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1af74:	4291      	cmp	r1, r2
   1af76:	d008      	beq.n	1af8a <add_to_waitq_locked+0x5e>
		return b2 - b1;
   1af78:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1af7a:	2a00      	cmp	r2, #0
   1af7c:	dd05      	ble.n	1af8a <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
   1af7e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1af80:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1af84:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1af86:	605c      	str	r4, [r3, #4]
}
   1af88:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1af8a:	686a      	ldr	r2, [r5, #4]
   1af8c:	4293      	cmp	r3, r2
   1af8e:	d001      	beq.n	1af94 <add_to_waitq_locked+0x68>
   1af90:	681b      	ldr	r3, [r3, #0]
   1af92:	e7ea      	b.n	1af6a <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
   1af94:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1af96:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1af9a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1af9c:	606c      	str	r4, [r5, #4]
   1af9e:	e7f3      	b.n	1af88 <add_to_waitq_locked+0x5c>
   1afa0:	200019e0 	.word	0x200019e0
   1afa4:	000217c3 	.word	0x000217c3
   1afa8:	0001feb5 	.word	0x0001feb5
   1afac:	000217a1 	.word	0x000217a1

0001afb0 <pend>:
{
   1afb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afb4:	4604      	mov	r4, r0
   1afb6:	460d      	mov	r5, r1
   1afb8:	4616      	mov	r6, r2
   1afba:	461f      	mov	r7, r3
	__asm__ volatile(
   1afbc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1afc0:	f3ef 8811 	mrs	r8, BASEPRI
   1afc4:	f383 8812 	msr	BASEPRI_MAX, r3
   1afc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1afcc:	481f      	ldr	r0, [pc, #124]	; (1b04c <pend+0x9c>)
   1afce:	f7fe fa07 	bl	193e0 <z_spin_lock_valid>
   1afd2:	b968      	cbnz	r0, 1aff0 <pend+0x40>
   1afd4:	4a1e      	ldr	r2, [pc, #120]	; (1b050 <pend+0xa0>)
   1afd6:	491f      	ldr	r1, [pc, #124]	; (1b054 <pend+0xa4>)
   1afd8:	481f      	ldr	r0, [pc, #124]	; (1b058 <pend+0xa8>)
   1afda:	2381      	movs	r3, #129	; 0x81
   1afdc:	f001 fce1 	bl	1c9a2 <printk>
   1afe0:	491a      	ldr	r1, [pc, #104]	; (1b04c <pend+0x9c>)
   1afe2:	481e      	ldr	r0, [pc, #120]	; (1b05c <pend+0xac>)
   1afe4:	f001 fcdd 	bl	1c9a2 <printk>
   1afe8:	4819      	ldr	r0, [pc, #100]	; (1b050 <pend+0xa0>)
   1afea:	2181      	movs	r1, #129	; 0x81
   1afec:	f001 ff33 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1aff0:	4816      	ldr	r0, [pc, #88]	; (1b04c <pend+0x9c>)
   1aff2:	f7fe fa13 	bl	1941c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   1aff6:	4620      	mov	r0, r4
   1aff8:	4629      	mov	r1, r5
   1affa:	f7ff ff97 	bl	1af2c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1affe:	4813      	ldr	r0, [pc, #76]	; (1b04c <pend+0x9c>)
   1b000:	f7fe f9fc 	bl	193fc <z_spin_unlock_valid>
   1b004:	b968      	cbnz	r0, 1b022 <pend+0x72>
   1b006:	4a12      	ldr	r2, [pc, #72]	; (1b050 <pend+0xa0>)
   1b008:	4915      	ldr	r1, [pc, #84]	; (1b060 <pend+0xb0>)
   1b00a:	4813      	ldr	r0, [pc, #76]	; (1b058 <pend+0xa8>)
   1b00c:	23ac      	movs	r3, #172	; 0xac
   1b00e:	f001 fcc8 	bl	1c9a2 <printk>
   1b012:	490e      	ldr	r1, [pc, #56]	; (1b04c <pend+0x9c>)
   1b014:	4813      	ldr	r0, [pc, #76]	; (1b064 <pend+0xb4>)
   1b016:	f001 fcc4 	bl	1c9a2 <printk>
   1b01a:	480d      	ldr	r0, [pc, #52]	; (1b050 <pend+0xa0>)
   1b01c:	21ac      	movs	r1, #172	; 0xac
   1b01e:	f001 ff1a 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1b022:	f388 8811 	msr	BASEPRI, r8
   1b026:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b02a:	1c7b      	adds	r3, r7, #1
   1b02c:	bf08      	it	eq
   1b02e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1b032:	d008      	beq.n	1b046 <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b034:	4632      	mov	r2, r6
   1b036:	463b      	mov	r3, r7
   1b038:	f104 0018 	add.w	r0, r4, #24
   1b03c:	490a      	ldr	r1, [pc, #40]	; (1b068 <pend+0xb8>)
}
   1b03e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b042:	f000 bd49 	b.w	1bad8 <z_add_timeout>
   1b046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b04a:	bf00      	nop
   1b04c:	20001ef4 	.word	0x20001ef4
   1b050:	0001ff75 	.word	0x0001ff75
   1b054:	0001ffc7 	.word	0x0001ffc7
   1b058:	0001feb5 	.word	0x0001feb5
   1b05c:	0001ffdc 	.word	0x0001ffdc
   1b060:	0001ff9b 	.word	0x0001ff9b
   1b064:	0001ffb2 	.word	0x0001ffb2
   1b068:	0001ae41 	.word	0x0001ae41

0001b06c <z_pend_curr>:
{
   1b06c:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   1b06e:	4b11      	ldr	r3, [pc, #68]	; (1b0b4 <z_pend_curr+0x48>)
{
   1b070:	4604      	mov	r4, r0
	pending_current = _current;
   1b072:	6898      	ldr	r0, [r3, #8]
   1b074:	4b10      	ldr	r3, [pc, #64]	; (1b0b8 <z_pend_curr+0x4c>)
{
   1b076:	460d      	mov	r5, r1
	pending_current = _current;
   1b078:	6018      	str	r0, [r3, #0]
{
   1b07a:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1b07c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b080:	f7ff ff96 	bl	1afb0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b084:	4620      	mov	r0, r4
   1b086:	f7fe f9b9 	bl	193fc <z_spin_unlock_valid>
   1b08a:	b968      	cbnz	r0, 1b0a8 <z_pend_curr+0x3c>
   1b08c:	4a0b      	ldr	r2, [pc, #44]	; (1b0bc <z_pend_curr+0x50>)
   1b08e:	490c      	ldr	r1, [pc, #48]	; (1b0c0 <z_pend_curr+0x54>)
   1b090:	480c      	ldr	r0, [pc, #48]	; (1b0c4 <z_pend_curr+0x58>)
   1b092:	23c3      	movs	r3, #195	; 0xc3
   1b094:	f001 fc85 	bl	1c9a2 <printk>
   1b098:	480b      	ldr	r0, [pc, #44]	; (1b0c8 <z_pend_curr+0x5c>)
   1b09a:	4621      	mov	r1, r4
   1b09c:	f001 fc81 	bl	1c9a2 <printk>
   1b0a0:	4806      	ldr	r0, [pc, #24]	; (1b0bc <z_pend_curr+0x50>)
   1b0a2:	21c3      	movs	r1, #195	; 0xc3
   1b0a4:	f001 fed7 	bl	1ce56 <assert_post_action>
   1b0a8:	4628      	mov	r0, r5
}
   1b0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b0ae:	f7f6 b9b7 	b.w	11420 <arch_swap>
   1b0b2:	bf00      	nop
   1b0b4:	20001eb4 	.word	0x20001eb4
   1b0b8:	20001ef0 	.word	0x20001ef0
   1b0bc:	0001ff75 	.word	0x0001ff75
   1b0c0:	0001ff9b 	.word	0x0001ff9b
   1b0c4:	0001feb5 	.word	0x0001feb5
   1b0c8:	0001ffb2 	.word	0x0001ffb2

0001b0cc <z_set_prio>:
{
   1b0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b0ce:	4604      	mov	r4, r0
   1b0d0:	460e      	mov	r6, r1
	__asm__ volatile(
   1b0d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b0d6:	f3ef 8711 	mrs	r7, BASEPRI
   1b0da:	f383 8812 	msr	BASEPRI_MAX, r3
   1b0de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b0e2:	483c      	ldr	r0, [pc, #240]	; (1b1d4 <z_set_prio+0x108>)
   1b0e4:	f7fe f97c 	bl	193e0 <z_spin_lock_valid>
   1b0e8:	b968      	cbnz	r0, 1b106 <z_set_prio+0x3a>
   1b0ea:	4a3b      	ldr	r2, [pc, #236]	; (1b1d8 <z_set_prio+0x10c>)
   1b0ec:	493b      	ldr	r1, [pc, #236]	; (1b1dc <z_set_prio+0x110>)
   1b0ee:	483c      	ldr	r0, [pc, #240]	; (1b1e0 <z_set_prio+0x114>)
   1b0f0:	2381      	movs	r3, #129	; 0x81
   1b0f2:	f001 fc56 	bl	1c9a2 <printk>
   1b0f6:	4937      	ldr	r1, [pc, #220]	; (1b1d4 <z_set_prio+0x108>)
   1b0f8:	483a      	ldr	r0, [pc, #232]	; (1b1e4 <z_set_prio+0x118>)
   1b0fa:	f001 fc52 	bl	1c9a2 <printk>
   1b0fe:	4836      	ldr	r0, [pc, #216]	; (1b1d8 <z_set_prio+0x10c>)
   1b100:	2181      	movs	r1, #129	; 0x81
   1b102:	f001 fea8 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b106:	4833      	ldr	r0, [pc, #204]	; (1b1d4 <z_set_prio+0x108>)
   1b108:	f7fe f988 	bl	1941c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b10c:	7b63      	ldrb	r3, [r4, #13]
   1b10e:	06da      	lsls	r2, r3, #27
   1b110:	b276      	sxtb	r6, r6
   1b112:	d15c      	bne.n	1b1ce <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
   1b114:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   1b116:	2d00      	cmp	r5, #0
   1b118:	d159      	bne.n	1b1ce <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b11a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b11e:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   1b120:	4831      	ldr	r0, [pc, #196]	; (1b1e8 <z_set_prio+0x11c>)
   1b122:	4621      	mov	r1, r4
   1b124:	f7ff fc08 	bl	1a938 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b128:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   1b12a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b12c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b130:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b132:	4b2e      	ldr	r3, [pc, #184]	; (1b1ec <z_set_prio+0x120>)
   1b134:	429c      	cmp	r4, r3
   1b136:	d109      	bne.n	1b14c <z_set_prio+0x80>
   1b138:	492d      	ldr	r1, [pc, #180]	; (1b1f0 <z_set_prio+0x124>)
   1b13a:	4829      	ldr	r0, [pc, #164]	; (1b1e0 <z_set_prio+0x114>)
   1b13c:	4a2d      	ldr	r2, [pc, #180]	; (1b1f4 <z_set_prio+0x128>)
   1b13e:	23b1      	movs	r3, #177	; 0xb1
   1b140:	f001 fc2f 	bl	1c9a2 <printk>
   1b144:	482b      	ldr	r0, [pc, #172]	; (1b1f4 <z_set_prio+0x128>)
   1b146:	21b1      	movs	r1, #177	; 0xb1
   1b148:	f001 fe85 	bl	1ce56 <assert_post_action>
	return list->head == list;
   1b14c:	492a      	ldr	r1, [pc, #168]	; (1b1f8 <z_set_prio+0x12c>)
   1b14e:	460b      	mov	r3, r1
   1b150:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b154:	4298      	cmp	r0, r3
   1b156:	bf18      	it	ne
   1b158:	4605      	movne	r5, r0
   1b15a:	2d00      	cmp	r5, #0
   1b15c:	461a      	mov	r2, r3
   1b15e:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b160:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   1b162:	bf38      	it	cc
   1b164:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b166:	b36b      	cbz	r3, 1b1c4 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
   1b168:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1b16c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1b170:	4286      	cmp	r6, r0
   1b172:	d023      	beq.n	1b1bc <z_set_prio+0xf0>
		return b2 - b1;
   1b174:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b176:	2800      	cmp	r0, #0
   1b178:	dd20      	ble.n	1b1bc <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
   1b17a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b17c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1b180:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b182:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1b184:	2001      	movs	r0, #1
   1b186:	f7ff fc67 	bl	1aa58 <update_cache>
   1b18a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b18c:	4811      	ldr	r0, [pc, #68]	; (1b1d4 <z_set_prio+0x108>)
   1b18e:	f7fe f935 	bl	193fc <z_spin_unlock_valid>
   1b192:	b968      	cbnz	r0, 1b1b0 <z_set_prio+0xe4>
   1b194:	4a10      	ldr	r2, [pc, #64]	; (1b1d8 <z_set_prio+0x10c>)
   1b196:	4919      	ldr	r1, [pc, #100]	; (1b1fc <z_set_prio+0x130>)
   1b198:	4811      	ldr	r0, [pc, #68]	; (1b1e0 <z_set_prio+0x114>)
   1b19a:	23ac      	movs	r3, #172	; 0xac
   1b19c:	f001 fc01 	bl	1c9a2 <printk>
   1b1a0:	490c      	ldr	r1, [pc, #48]	; (1b1d4 <z_set_prio+0x108>)
   1b1a2:	4817      	ldr	r0, [pc, #92]	; (1b200 <z_set_prio+0x134>)
   1b1a4:	f001 fbfd 	bl	1c9a2 <printk>
   1b1a8:	480b      	ldr	r0, [pc, #44]	; (1b1d8 <z_set_prio+0x10c>)
   1b1aa:	21ac      	movs	r1, #172	; 0xac
   1b1ac:	f001 fe53 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1b1b0:	f387 8811 	msr	BASEPRI, r7
   1b1b4:	f3bf 8f6f 	isb	sy
}
   1b1b8:	4620      	mov	r0, r4
   1b1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b1bc:	42ab      	cmp	r3, r5
   1b1be:	d001      	beq.n	1b1c4 <z_set_prio+0xf8>
   1b1c0:	681b      	ldr	r3, [r3, #0]
   1b1c2:	e7d0      	b.n	1b166 <z_set_prio+0x9a>
	node->prev = tail;
   1b1c4:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   1b1c8:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1b1ca:	624c      	str	r4, [r1, #36]	; 0x24
}
   1b1cc:	e7da      	b.n	1b184 <z_set_prio+0xb8>
			thread->base.prio = prio;
   1b1ce:	73a6      	strb	r6, [r4, #14]
   1b1d0:	2400      	movs	r4, #0
   1b1d2:	e7db      	b.n	1b18c <z_set_prio+0xc0>
   1b1d4:	20001ef4 	.word	0x20001ef4
   1b1d8:	0001ff75 	.word	0x0001ff75
   1b1dc:	0001ffc7 	.word	0x0001ffc7
   1b1e0:	0001feb5 	.word	0x0001feb5
   1b1e4:	0001ffdc 	.word	0x0001ffdc
   1b1e8:	20001ed4 	.word	0x20001ed4
   1b1ec:	200019e0 	.word	0x200019e0
   1b1f0:	000217c3 	.word	0x000217c3
   1b1f4:	000217a1 	.word	0x000217a1
   1b1f8:	20001eb4 	.word	0x20001eb4
   1b1fc:	0001ff9b 	.word	0x0001ff9b
   1b200:	0001ffb2 	.word	0x0001ffb2

0001b204 <z_impl_k_thread_suspend>:
{
   1b204:	b570      	push	{r4, r5, r6, lr}
   1b206:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   1b208:	3018      	adds	r0, #24
   1b20a:	f000 fd39 	bl	1bc80 <z_abort_timeout>
	__asm__ volatile(
   1b20e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b212:	f3ef 8611 	mrs	r6, BASEPRI
   1b216:	f383 8812 	msr	BASEPRI_MAX, r3
   1b21a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b21e:	4825      	ldr	r0, [pc, #148]	; (1b2b4 <z_impl_k_thread_suspend+0xb0>)
   1b220:	f7fe f8de 	bl	193e0 <z_spin_lock_valid>
   1b224:	b968      	cbnz	r0, 1b242 <z_impl_k_thread_suspend+0x3e>
   1b226:	4a24      	ldr	r2, [pc, #144]	; (1b2b8 <z_impl_k_thread_suspend+0xb4>)
   1b228:	4924      	ldr	r1, [pc, #144]	; (1b2bc <z_impl_k_thread_suspend+0xb8>)
   1b22a:	4825      	ldr	r0, [pc, #148]	; (1b2c0 <z_impl_k_thread_suspend+0xbc>)
   1b22c:	2381      	movs	r3, #129	; 0x81
   1b22e:	f001 fbb8 	bl	1c9a2 <printk>
   1b232:	4920      	ldr	r1, [pc, #128]	; (1b2b4 <z_impl_k_thread_suspend+0xb0>)
   1b234:	4823      	ldr	r0, [pc, #140]	; (1b2c4 <z_impl_k_thread_suspend+0xc0>)
   1b236:	f001 fbb4 	bl	1c9a2 <printk>
   1b23a:	481f      	ldr	r0, [pc, #124]	; (1b2b8 <z_impl_k_thread_suspend+0xb4>)
   1b23c:	2181      	movs	r1, #129	; 0x81
   1b23e:	f001 fe0a 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b242:	481c      	ldr	r0, [pc, #112]	; (1b2b4 <z_impl_k_thread_suspend+0xb0>)
   1b244:	f7fe f8ea 	bl	1941c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1b248:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1b24c:	7b63      	ldrb	r3, [r4, #13]
   1b24e:	2a00      	cmp	r2, #0
   1b250:	da06      	bge.n	1b260 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   1b256:	481c      	ldr	r0, [pc, #112]	; (1b2c8 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b258:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   1b25a:	4621      	mov	r1, r4
   1b25c:	f7ff fb6c 	bl	1a938 <z_priq_dumb_remove>
		update_cache(thread == _current);
   1b260:	4d1a      	ldr	r5, [pc, #104]	; (1b2cc <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b262:	7b63      	ldrb	r3, [r4, #13]
   1b264:	68a8      	ldr	r0, [r5, #8]
   1b266:	f043 0310 	orr.w	r3, r3, #16
   1b26a:	7363      	strb	r3, [r4, #13]
   1b26c:	1b03      	subs	r3, r0, r4
   1b26e:	4258      	negs	r0, r3
   1b270:	4158      	adcs	r0, r3
   1b272:	f7ff fbf1 	bl	1aa58 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b276:	480f      	ldr	r0, [pc, #60]	; (1b2b4 <z_impl_k_thread_suspend+0xb0>)
   1b278:	f7fe f8c0 	bl	193fc <z_spin_unlock_valid>
   1b27c:	b968      	cbnz	r0, 1b29a <z_impl_k_thread_suspend+0x96>
   1b27e:	4a0e      	ldr	r2, [pc, #56]	; (1b2b8 <z_impl_k_thread_suspend+0xb4>)
   1b280:	4913      	ldr	r1, [pc, #76]	; (1b2d0 <z_impl_k_thread_suspend+0xcc>)
   1b282:	480f      	ldr	r0, [pc, #60]	; (1b2c0 <z_impl_k_thread_suspend+0xbc>)
   1b284:	23ac      	movs	r3, #172	; 0xac
   1b286:	f001 fb8c 	bl	1c9a2 <printk>
   1b28a:	490a      	ldr	r1, [pc, #40]	; (1b2b4 <z_impl_k_thread_suspend+0xb0>)
   1b28c:	4811      	ldr	r0, [pc, #68]	; (1b2d4 <z_impl_k_thread_suspend+0xd0>)
   1b28e:	f001 fb88 	bl	1c9a2 <printk>
   1b292:	4809      	ldr	r0, [pc, #36]	; (1b2b8 <z_impl_k_thread_suspend+0xb4>)
   1b294:	21ac      	movs	r1, #172	; 0xac
   1b296:	f001 fdde 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1b29a:	f386 8811 	msr	BASEPRI, r6
   1b29e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1b2a2:	68ab      	ldr	r3, [r5, #8]
   1b2a4:	42a3      	cmp	r3, r4
   1b2a6:	d103      	bne.n	1b2b0 <z_impl_k_thread_suspend+0xac>
}
   1b2a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1b2ac:	f004 b8c0 	b.w	1f430 <z_reschedule_unlocked>
}
   1b2b0:	bd70      	pop	{r4, r5, r6, pc}
   1b2b2:	bf00      	nop
   1b2b4:	20001ef4 	.word	0x20001ef4
   1b2b8:	0001ff75 	.word	0x0001ff75
   1b2bc:	0001ffc7 	.word	0x0001ffc7
   1b2c0:	0001feb5 	.word	0x0001feb5
   1b2c4:	0001ffdc 	.word	0x0001ffdc
   1b2c8:	20001ed4 	.word	0x20001ed4
   1b2cc:	20001eb4 	.word	0x20001eb4
   1b2d0:	0001ff9b 	.word	0x0001ff9b
   1b2d4:	0001ffb2 	.word	0x0001ffb2

0001b2d8 <k_sched_unlock>:
{
   1b2d8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1b2da:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b2de:	f3ef 8511 	mrs	r5, BASEPRI
   1b2e2:	f383 8812 	msr	BASEPRI_MAX, r3
   1b2e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b2ea:	482d      	ldr	r0, [pc, #180]	; (1b3a0 <k_sched_unlock+0xc8>)
   1b2ec:	f7fe f878 	bl	193e0 <z_spin_lock_valid>
   1b2f0:	b968      	cbnz	r0, 1b30e <k_sched_unlock+0x36>
   1b2f2:	4a2c      	ldr	r2, [pc, #176]	; (1b3a4 <k_sched_unlock+0xcc>)
   1b2f4:	492c      	ldr	r1, [pc, #176]	; (1b3a8 <k_sched_unlock+0xd0>)
   1b2f6:	482d      	ldr	r0, [pc, #180]	; (1b3ac <k_sched_unlock+0xd4>)
   1b2f8:	2381      	movs	r3, #129	; 0x81
   1b2fa:	f001 fb52 	bl	1c9a2 <printk>
   1b2fe:	4928      	ldr	r1, [pc, #160]	; (1b3a0 <k_sched_unlock+0xc8>)
   1b300:	482b      	ldr	r0, [pc, #172]	; (1b3b0 <k_sched_unlock+0xd8>)
   1b302:	f001 fb4e 	bl	1c9a2 <printk>
   1b306:	4827      	ldr	r0, [pc, #156]	; (1b3a4 <k_sched_unlock+0xcc>)
   1b308:	2181      	movs	r1, #129	; 0x81
   1b30a:	f001 fda4 	bl	1ce56 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   1b30e:	4c29      	ldr	r4, [pc, #164]	; (1b3b4 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   1b310:	4823      	ldr	r0, [pc, #140]	; (1b3a0 <k_sched_unlock+0xc8>)
   1b312:	f7fe f883 	bl	1941c <z_spin_lock_set_owner>
   1b316:	68a2      	ldr	r2, [r4, #8]
   1b318:	7bd2      	ldrb	r2, [r2, #15]
   1b31a:	b972      	cbnz	r2, 1b33a <k_sched_unlock+0x62>
   1b31c:	4926      	ldr	r1, [pc, #152]	; (1b3b8 <k_sched_unlock+0xe0>)
   1b31e:	4a27      	ldr	r2, [pc, #156]	; (1b3bc <k_sched_unlock+0xe4>)
   1b320:	4822      	ldr	r0, [pc, #136]	; (1b3ac <k_sched_unlock+0xd4>)
   1b322:	f240 3355 	movw	r3, #853	; 0x355
   1b326:	f001 fb3c 	bl	1c9a2 <printk>
   1b32a:	4825      	ldr	r0, [pc, #148]	; (1b3c0 <k_sched_unlock+0xe8>)
   1b32c:	f001 fb39 	bl	1c9a2 <printk>
   1b330:	4822      	ldr	r0, [pc, #136]	; (1b3bc <k_sched_unlock+0xe4>)
   1b332:	f240 3155 	movw	r1, #853	; 0x355
   1b336:	f001 fd8e 	bl	1ce56 <assert_post_action>
   1b33a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   1b33e:	b173      	cbz	r3, 1b35e <k_sched_unlock+0x86>
   1b340:	4920      	ldr	r1, [pc, #128]	; (1b3c4 <k_sched_unlock+0xec>)
   1b342:	4a1e      	ldr	r2, [pc, #120]	; (1b3bc <k_sched_unlock+0xe4>)
   1b344:	4819      	ldr	r0, [pc, #100]	; (1b3ac <k_sched_unlock+0xd4>)
   1b346:	f240 3356 	movw	r3, #854	; 0x356
   1b34a:	f001 fb2a 	bl	1c9a2 <printk>
   1b34e:	481c      	ldr	r0, [pc, #112]	; (1b3c0 <k_sched_unlock+0xe8>)
   1b350:	f001 fb27 	bl	1c9a2 <printk>
   1b354:	4819      	ldr	r0, [pc, #100]	; (1b3bc <k_sched_unlock+0xe4>)
   1b356:	f240 3156 	movw	r1, #854	; 0x356
   1b35a:	f001 fd7c 	bl	1ce56 <assert_post_action>
		++_current->base.sched_locked;
   1b35e:	68a2      	ldr	r2, [r4, #8]
   1b360:	7bd3      	ldrb	r3, [r2, #15]
   1b362:	3301      	adds	r3, #1
		update_cache(0);
   1b364:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1b366:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b368:	f7ff fb76 	bl	1aa58 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b36c:	480c      	ldr	r0, [pc, #48]	; (1b3a0 <k_sched_unlock+0xc8>)
   1b36e:	f7fe f845 	bl	193fc <z_spin_unlock_valid>
   1b372:	b968      	cbnz	r0, 1b390 <k_sched_unlock+0xb8>
   1b374:	4a0b      	ldr	r2, [pc, #44]	; (1b3a4 <k_sched_unlock+0xcc>)
   1b376:	4914      	ldr	r1, [pc, #80]	; (1b3c8 <k_sched_unlock+0xf0>)
   1b378:	480c      	ldr	r0, [pc, #48]	; (1b3ac <k_sched_unlock+0xd4>)
   1b37a:	23ac      	movs	r3, #172	; 0xac
   1b37c:	f001 fb11 	bl	1c9a2 <printk>
   1b380:	4907      	ldr	r1, [pc, #28]	; (1b3a0 <k_sched_unlock+0xc8>)
   1b382:	4812      	ldr	r0, [pc, #72]	; (1b3cc <k_sched_unlock+0xf4>)
   1b384:	f001 fb0d 	bl	1c9a2 <printk>
   1b388:	4806      	ldr	r0, [pc, #24]	; (1b3a4 <k_sched_unlock+0xcc>)
   1b38a:	21ac      	movs	r1, #172	; 0xac
   1b38c:	f001 fd63 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1b390:	f385 8811 	msr	BASEPRI, r5
   1b394:	f3bf 8f6f 	isb	sy
}
   1b398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   1b39c:	f004 b848 	b.w	1f430 <z_reschedule_unlocked>
   1b3a0:	20001ef4 	.word	0x20001ef4
   1b3a4:	0001ff75 	.word	0x0001ff75
   1b3a8:	0001ffc7 	.word	0x0001ffc7
   1b3ac:	0001feb5 	.word	0x0001feb5
   1b3b0:	0001ffdc 	.word	0x0001ffdc
   1b3b4:	20001eb4 	.word	0x20001eb4
   1b3b8:	00021822 	.word	0x00021822
   1b3bc:	000217a1 	.word	0x000217a1
   1b3c0:	00020d40 	.word	0x00020d40
   1b3c4:	000214d9 	.word	0x000214d9
   1b3c8:	0001ff9b 	.word	0x0001ff9b
   1b3cc:	0001ffb2 	.word	0x0001ffb2

0001b3d0 <z_unpend_first_thread>:
{
   1b3d0:	b538      	push	{r3, r4, r5, lr}
   1b3d2:	4604      	mov	r4, r0
	__asm__ volatile(
   1b3d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b3d8:	f3ef 8511 	mrs	r5, BASEPRI
   1b3dc:	f383 8812 	msr	BASEPRI_MAX, r3
   1b3e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b3e4:	481b      	ldr	r0, [pc, #108]	; (1b454 <z_unpend_first_thread+0x84>)
   1b3e6:	f7fd fffb 	bl	193e0 <z_spin_lock_valid>
   1b3ea:	b968      	cbnz	r0, 1b408 <z_unpend_first_thread+0x38>
   1b3ec:	4a1a      	ldr	r2, [pc, #104]	; (1b458 <z_unpend_first_thread+0x88>)
   1b3ee:	491b      	ldr	r1, [pc, #108]	; (1b45c <z_unpend_first_thread+0x8c>)
   1b3f0:	481b      	ldr	r0, [pc, #108]	; (1b460 <z_unpend_first_thread+0x90>)
   1b3f2:	2381      	movs	r3, #129	; 0x81
   1b3f4:	f001 fad5 	bl	1c9a2 <printk>
   1b3f8:	4916      	ldr	r1, [pc, #88]	; (1b454 <z_unpend_first_thread+0x84>)
   1b3fa:	481a      	ldr	r0, [pc, #104]	; (1b464 <z_unpend_first_thread+0x94>)
   1b3fc:	f001 fad1 	bl	1c9a2 <printk>
   1b400:	4815      	ldr	r0, [pc, #84]	; (1b458 <z_unpend_first_thread+0x88>)
   1b402:	2181      	movs	r1, #129	; 0x81
   1b404:	f001 fd27 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b408:	4812      	ldr	r0, [pc, #72]	; (1b454 <z_unpend_first_thread+0x84>)
   1b40a:	f7fe f807 	bl	1941c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   1b40e:	4620      	mov	r0, r4
   1b410:	f004 f818 	bl	1f444 <z_priq_dumb_best>
		if (thread != NULL) {
   1b414:	4604      	mov	r4, r0
   1b416:	b128      	cbz	r0, 1b424 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   1b418:	f7ff fab0 	bl	1a97c <unpend_thread_no_timeout>
   1b41c:	f104 0018 	add.w	r0, r4, #24
   1b420:	f000 fc2e 	bl	1bc80 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b424:	480b      	ldr	r0, [pc, #44]	; (1b454 <z_unpend_first_thread+0x84>)
   1b426:	f7fd ffe9 	bl	193fc <z_spin_unlock_valid>
   1b42a:	b968      	cbnz	r0, 1b448 <z_unpend_first_thread+0x78>
   1b42c:	4a0a      	ldr	r2, [pc, #40]	; (1b458 <z_unpend_first_thread+0x88>)
   1b42e:	490e      	ldr	r1, [pc, #56]	; (1b468 <z_unpend_first_thread+0x98>)
   1b430:	480b      	ldr	r0, [pc, #44]	; (1b460 <z_unpend_first_thread+0x90>)
   1b432:	23ac      	movs	r3, #172	; 0xac
   1b434:	f001 fab5 	bl	1c9a2 <printk>
   1b438:	4906      	ldr	r1, [pc, #24]	; (1b454 <z_unpend_first_thread+0x84>)
   1b43a:	480c      	ldr	r0, [pc, #48]	; (1b46c <z_unpend_first_thread+0x9c>)
   1b43c:	f001 fab1 	bl	1c9a2 <printk>
   1b440:	4805      	ldr	r0, [pc, #20]	; (1b458 <z_unpend_first_thread+0x88>)
   1b442:	21ac      	movs	r1, #172	; 0xac
   1b444:	f001 fd07 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1b448:	f385 8811 	msr	BASEPRI, r5
   1b44c:	f3bf 8f6f 	isb	sy
}
   1b450:	4620      	mov	r0, r4
   1b452:	bd38      	pop	{r3, r4, r5, pc}
   1b454:	20001ef4 	.word	0x20001ef4
   1b458:	0001ff75 	.word	0x0001ff75
   1b45c:	0001ffc7 	.word	0x0001ffc7
   1b460:	0001feb5 	.word	0x0001feb5
   1b464:	0001ffdc 	.word	0x0001ffdc
   1b468:	0001ff9b 	.word	0x0001ff9b
   1b46c:	0001ffb2 	.word	0x0001ffb2

0001b470 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1b470:	4b04      	ldr	r3, [pc, #16]	; (1b484 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b472:	2100      	movs	r1, #0
   1b474:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1b478:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1b47c:	4608      	mov	r0, r1
   1b47e:	f7ff b93d 	b.w	1a6fc <k_sched_time_slice_set>
   1b482:	bf00      	nop
   1b484:	20001eb4 	.word	0x20001eb4

0001b488 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1b488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b48a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1b48e:	b173      	cbz	r3, 1b4ae <z_impl_k_yield+0x26>
   1b490:	4941      	ldr	r1, [pc, #260]	; (1b598 <z_impl_k_yield+0x110>)
   1b492:	4a42      	ldr	r2, [pc, #264]	; (1b59c <z_impl_k_yield+0x114>)
   1b494:	4842      	ldr	r0, [pc, #264]	; (1b5a0 <z_impl_k_yield+0x118>)
   1b496:	f240 43a1 	movw	r3, #1185	; 0x4a1
   1b49a:	f001 fa82 	bl	1c9a2 <printk>
   1b49e:	4841      	ldr	r0, [pc, #260]	; (1b5a4 <z_impl_k_yield+0x11c>)
   1b4a0:	f001 fa7f 	bl	1c9a2 <printk>
   1b4a4:	483d      	ldr	r0, [pc, #244]	; (1b59c <z_impl_k_yield+0x114>)
   1b4a6:	f240 41a1 	movw	r1, #1185	; 0x4a1
   1b4aa:	f001 fcd4 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1b4ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b4b2:	f3ef 8611 	mrs	r6, BASEPRI
   1b4b6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b4ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b4be:	483a      	ldr	r0, [pc, #232]	; (1b5a8 <z_impl_k_yield+0x120>)
   1b4c0:	f7fd ff8e 	bl	193e0 <z_spin_lock_valid>
   1b4c4:	b968      	cbnz	r0, 1b4e2 <z_impl_k_yield+0x5a>
   1b4c6:	4a39      	ldr	r2, [pc, #228]	; (1b5ac <z_impl_k_yield+0x124>)
   1b4c8:	4939      	ldr	r1, [pc, #228]	; (1b5b0 <z_impl_k_yield+0x128>)
   1b4ca:	4835      	ldr	r0, [pc, #212]	; (1b5a0 <z_impl_k_yield+0x118>)
   1b4cc:	2381      	movs	r3, #129	; 0x81
   1b4ce:	f001 fa68 	bl	1c9a2 <printk>
   1b4d2:	4935      	ldr	r1, [pc, #212]	; (1b5a8 <z_impl_k_yield+0x120>)
   1b4d4:	4837      	ldr	r0, [pc, #220]	; (1b5b4 <z_impl_k_yield+0x12c>)
   1b4d6:	f001 fa64 	bl	1c9a2 <printk>
   1b4da:	4834      	ldr	r0, [pc, #208]	; (1b5ac <z_impl_k_yield+0x124>)
   1b4dc:	2181      	movs	r1, #129	; 0x81
   1b4de:	f001 fcba 	bl	1ce56 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   1b4e2:	4d35      	ldr	r5, [pc, #212]	; (1b5b8 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
   1b4e4:	4830      	ldr	r0, [pc, #192]	; (1b5a8 <z_impl_k_yield+0x120>)
   1b4e6:	f7fd ff99 	bl	1941c <z_spin_lock_set_owner>
   1b4ea:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b4ec:	7b4b      	ldrb	r3, [r1, #13]
   1b4ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b4f2:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   1b4f4:	f105 0020 	add.w	r0, r5, #32
   1b4f8:	f7ff fa1e 	bl	1a938 <z_priq_dumb_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   1b4fc:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b4fe:	7b63      	ldrb	r3, [r4, #13]
   1b500:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b504:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b506:	4b2d      	ldr	r3, [pc, #180]	; (1b5bc <z_impl_k_yield+0x134>)
   1b508:	429c      	cmp	r4, r3
   1b50a:	d109      	bne.n	1b520 <z_impl_k_yield+0x98>
   1b50c:	492c      	ldr	r1, [pc, #176]	; (1b5c0 <z_impl_k_yield+0x138>)
   1b50e:	4824      	ldr	r0, [pc, #144]	; (1b5a0 <z_impl_k_yield+0x118>)
   1b510:	4a22      	ldr	r2, [pc, #136]	; (1b59c <z_impl_k_yield+0x114>)
   1b512:	23b1      	movs	r3, #177	; 0xb1
   1b514:	f001 fa45 	bl	1c9a2 <printk>
   1b518:	4820      	ldr	r0, [pc, #128]	; (1b59c <z_impl_k_yield+0x114>)
   1b51a:	21b1      	movs	r1, #177	; 0xb1
   1b51c:	f001 fc9b 	bl	1ce56 <assert_post_action>
	return list->head == list;
   1b520:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b522:	4828      	ldr	r0, [pc, #160]	; (1b5c4 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b524:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b526:	4283      	cmp	r3, r0
   1b528:	bf08      	it	eq
   1b52a:	2300      	moveq	r3, #0
   1b52c:	2b00      	cmp	r3, #0
   1b52e:	bf38      	it	cc
   1b530:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b532:	b35b      	cbz	r3, 1b58c <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
   1b534:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1b538:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1b53c:	4297      	cmp	r7, r2
   1b53e:	d021      	beq.n	1b584 <z_impl_k_yield+0xfc>
		return b2 - b1;
   1b540:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b542:	2a00      	cmp	r2, #0
   1b544:	dd1e      	ble.n	1b584 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
   1b546:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b548:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1b54c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b54e:	605c      	str	r4, [r3, #4]
	update_cache(1);
   1b550:	2001      	movs	r0, #1
   1b552:	f7ff fa81 	bl	1aa58 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b556:	4814      	ldr	r0, [pc, #80]	; (1b5a8 <z_impl_k_yield+0x120>)
   1b558:	f7fd ff50 	bl	193fc <z_spin_unlock_valid>
   1b55c:	b968      	cbnz	r0, 1b57a <z_impl_k_yield+0xf2>
   1b55e:	4a13      	ldr	r2, [pc, #76]	; (1b5ac <z_impl_k_yield+0x124>)
   1b560:	4919      	ldr	r1, [pc, #100]	; (1b5c8 <z_impl_k_yield+0x140>)
   1b562:	480f      	ldr	r0, [pc, #60]	; (1b5a0 <z_impl_k_yield+0x118>)
   1b564:	23c3      	movs	r3, #195	; 0xc3
   1b566:	f001 fa1c 	bl	1c9a2 <printk>
   1b56a:	490f      	ldr	r1, [pc, #60]	; (1b5a8 <z_impl_k_yield+0x120>)
   1b56c:	4817      	ldr	r0, [pc, #92]	; (1b5cc <z_impl_k_yield+0x144>)
   1b56e:	f001 fa18 	bl	1c9a2 <printk>
   1b572:	480e      	ldr	r0, [pc, #56]	; (1b5ac <z_impl_k_yield+0x124>)
   1b574:	21c3      	movs	r1, #195	; 0xc3
   1b576:	f001 fc6e 	bl	1ce56 <assert_post_action>
   1b57a:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   1b57c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b580:	f7f5 bf4e 	b.w	11420 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1b584:	428b      	cmp	r3, r1
   1b586:	d001      	beq.n	1b58c <z_impl_k_yield+0x104>
   1b588:	681b      	ldr	r3, [r3, #0]
   1b58a:	e7d2      	b.n	1b532 <z_impl_k_yield+0xaa>
	node->prev = tail;
   1b58c:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   1b590:	600c      	str	r4, [r1, #0]
	list->tail = node;
   1b592:	626c      	str	r4, [r5, #36]	; 0x24
}
   1b594:	e7dc      	b.n	1b550 <z_impl_k_yield+0xc8>
   1b596:	bf00      	nop
   1b598:	000214d9 	.word	0x000214d9
   1b59c:	000217a1 	.word	0x000217a1
   1b5a0:	0001feb5 	.word	0x0001feb5
   1b5a4:	00020d40 	.word	0x00020d40
   1b5a8:	20001ef4 	.word	0x20001ef4
   1b5ac:	0001ff75 	.word	0x0001ff75
   1b5b0:	0001ffc7 	.word	0x0001ffc7
   1b5b4:	0001ffdc 	.word	0x0001ffdc
   1b5b8:	20001eb4 	.word	0x20001eb4
   1b5bc:	200019e0 	.word	0x200019e0
   1b5c0:	000217c3 	.word	0x000217c3
   1b5c4:	20001ed4 	.word	0x20001ed4
   1b5c8:	0001ff9b 	.word	0x0001ff9b
   1b5cc:	0001ffb2 	.word	0x0001ffb2

0001b5d0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1b5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b5d4:	4604      	mov	r4, r0
   1b5d6:	460d      	mov	r5, r1
   1b5d8:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1b5dc:	b173      	cbz	r3, 1b5fc <z_tick_sleep+0x2c>
   1b5de:	4945      	ldr	r1, [pc, #276]	; (1b6f4 <z_tick_sleep+0x124>)
   1b5e0:	4a45      	ldr	r2, [pc, #276]	; (1b6f8 <z_tick_sleep+0x128>)
   1b5e2:	4846      	ldr	r0, [pc, #280]	; (1b6fc <z_tick_sleep+0x12c>)
   1b5e4:	f240 43be 	movw	r3, #1214	; 0x4be
   1b5e8:	f001 f9db 	bl	1c9a2 <printk>
   1b5ec:	4844      	ldr	r0, [pc, #272]	; (1b700 <z_tick_sleep+0x130>)
   1b5ee:	f001 f9d8 	bl	1c9a2 <printk>
   1b5f2:	4841      	ldr	r0, [pc, #260]	; (1b6f8 <z_tick_sleep+0x128>)
   1b5f4:	f240 41be 	movw	r1, #1214	; 0x4be
   1b5f8:	f001 fc2d 	bl	1ce56 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1b5fc:	ea54 0305 	orrs.w	r3, r4, r5
   1b600:	d104      	bne.n	1b60c <z_tick_sleep+0x3c>
	z_impl_k_yield();
   1b602:	f7ff ff41 	bl	1b488 <z_impl_k_yield>
		k_yield();
		return 0;
   1b606:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1b608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   1b60c:	f06f 0301 	mvn.w	r3, #1
   1b610:	1b1e      	subs	r6, r3, r4
   1b612:	f04f 33ff 	mov.w	r3, #4294967295
   1b616:	eb63 0705 	sbc.w	r7, r3, r5
   1b61a:	2e01      	cmp	r6, #1
   1b61c:	f177 0300 	sbcs.w	r3, r7, #0
   1b620:	da64      	bge.n	1b6ec <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1b622:	f003 ff29 	bl	1f478 <sys_clock_tick_get_32>
   1b626:	1906      	adds	r6, r0, r4
   1b628:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b62c:	f3ef 8811 	mrs	r8, BASEPRI
   1b630:	f383 8812 	msr	BASEPRI_MAX, r3
   1b634:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b638:	4832      	ldr	r0, [pc, #200]	; (1b704 <z_tick_sleep+0x134>)
   1b63a:	f7fd fed1 	bl	193e0 <z_spin_lock_valid>
   1b63e:	b968      	cbnz	r0, 1b65c <z_tick_sleep+0x8c>
   1b640:	4a31      	ldr	r2, [pc, #196]	; (1b708 <z_tick_sleep+0x138>)
   1b642:	4932      	ldr	r1, [pc, #200]	; (1b70c <z_tick_sleep+0x13c>)
   1b644:	482d      	ldr	r0, [pc, #180]	; (1b6fc <z_tick_sleep+0x12c>)
   1b646:	2381      	movs	r3, #129	; 0x81
   1b648:	f001 f9ab 	bl	1c9a2 <printk>
   1b64c:	492d      	ldr	r1, [pc, #180]	; (1b704 <z_tick_sleep+0x134>)
   1b64e:	4830      	ldr	r0, [pc, #192]	; (1b710 <z_tick_sleep+0x140>)
   1b650:	f001 f9a7 	bl	1c9a2 <printk>
   1b654:	482c      	ldr	r0, [pc, #176]	; (1b708 <z_tick_sleep+0x138>)
   1b656:	2181      	movs	r1, #129	; 0x81
   1b658:	f001 fbfd 	bl	1ce56 <assert_post_action>
	pending_current = _current;
   1b65c:	4f2d      	ldr	r7, [pc, #180]	; (1b714 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
   1b65e:	4829      	ldr	r0, [pc, #164]	; (1b704 <z_tick_sleep+0x134>)
   1b660:	f7fd fedc 	bl	1941c <z_spin_lock_set_owner>
   1b664:	4b2c      	ldr	r3, [pc, #176]	; (1b718 <z_tick_sleep+0x148>)
   1b666:	68b8      	ldr	r0, [r7, #8]
   1b668:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1b66a:	f7ff fc43 	bl	1aef4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1b66e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b670:	492a      	ldr	r1, [pc, #168]	; (1b71c <z_tick_sleep+0x14c>)
   1b672:	4622      	mov	r2, r4
   1b674:	462b      	mov	r3, r5
   1b676:	3018      	adds	r0, #24
   1b678:	f000 fa2e 	bl	1bad8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1b67c:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b67e:	4821      	ldr	r0, [pc, #132]	; (1b704 <z_tick_sleep+0x134>)
   1b680:	7b53      	ldrb	r3, [r2, #13]
   1b682:	f043 0310 	orr.w	r3, r3, #16
   1b686:	7353      	strb	r3, [r2, #13]
   1b688:	f7fd feb8 	bl	193fc <z_spin_unlock_valid>
   1b68c:	b968      	cbnz	r0, 1b6aa <z_tick_sleep+0xda>
   1b68e:	4a1e      	ldr	r2, [pc, #120]	; (1b708 <z_tick_sleep+0x138>)
   1b690:	4923      	ldr	r1, [pc, #140]	; (1b720 <z_tick_sleep+0x150>)
   1b692:	481a      	ldr	r0, [pc, #104]	; (1b6fc <z_tick_sleep+0x12c>)
   1b694:	23c3      	movs	r3, #195	; 0xc3
   1b696:	f001 f984 	bl	1c9a2 <printk>
   1b69a:	491a      	ldr	r1, [pc, #104]	; (1b704 <z_tick_sleep+0x134>)
   1b69c:	4821      	ldr	r0, [pc, #132]	; (1b724 <z_tick_sleep+0x154>)
   1b69e:	f001 f980 	bl	1c9a2 <printk>
   1b6a2:	4819      	ldr	r0, [pc, #100]	; (1b708 <z_tick_sleep+0x138>)
   1b6a4:	21c3      	movs	r1, #195	; 0xc3
   1b6a6:	f001 fbd6 	bl	1ce56 <assert_post_action>
   1b6aa:	4640      	mov	r0, r8
   1b6ac:	f7f5 feb8 	bl	11420 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1b6b0:	68bb      	ldr	r3, [r7, #8]
   1b6b2:	7b5b      	ldrb	r3, [r3, #13]
   1b6b4:	06db      	lsls	r3, r3, #27
   1b6b6:	d50e      	bpl.n	1b6d6 <z_tick_sleep+0x106>
   1b6b8:	491b      	ldr	r1, [pc, #108]	; (1b728 <z_tick_sleep+0x158>)
   1b6ba:	4a0f      	ldr	r2, [pc, #60]	; (1b6f8 <z_tick_sleep+0x128>)
   1b6bc:	480f      	ldr	r0, [pc, #60]	; (1b6fc <z_tick_sleep+0x12c>)
   1b6be:	f240 43df 	movw	r3, #1247	; 0x4df
   1b6c2:	f001 f96e 	bl	1c9a2 <printk>
   1b6c6:	480e      	ldr	r0, [pc, #56]	; (1b700 <z_tick_sleep+0x130>)
   1b6c8:	f001 f96b 	bl	1c9a2 <printk>
   1b6cc:	480a      	ldr	r0, [pc, #40]	; (1b6f8 <z_tick_sleep+0x128>)
   1b6ce:	f240 41df 	movw	r1, #1247	; 0x4df
   1b6d2:	f001 fbc0 	bl	1ce56 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1b6d6:	f003 fecf 	bl	1f478 <sys_clock_tick_get_32>
   1b6da:	1a30      	subs	r0, r6, r0
   1b6dc:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
   1b6e0:	2801      	cmp	r0, #1
   1b6e2:	f171 0300 	sbcs.w	r3, r1, #0
   1b6e6:	bfb8      	it	lt
   1b6e8:	2000      	movlt	r0, #0
   1b6ea:	e78d      	b.n	1b608 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1b6ec:	f06f 0601 	mvn.w	r6, #1
   1b6f0:	1b36      	subs	r6, r6, r4
   1b6f2:	e799      	b.n	1b628 <z_tick_sleep+0x58>
   1b6f4:	000214d9 	.word	0x000214d9
   1b6f8:	000217a1 	.word	0x000217a1
   1b6fc:	0001feb5 	.word	0x0001feb5
   1b700:	00020d40 	.word	0x00020d40
   1b704:	20001ef4 	.word	0x20001ef4
   1b708:	0001ff75 	.word	0x0001ff75
   1b70c:	0001ffc7 	.word	0x0001ffc7
   1b710:	0001ffdc 	.word	0x0001ffdc
   1b714:	20001eb4 	.word	0x20001eb4
   1b718:	20001ef0 	.word	0x20001ef0
   1b71c:	0001ae41 	.word	0x0001ae41
   1b720:	0001ff9b 	.word	0x0001ff9b
   1b724:	0001ffb2 	.word	0x0001ffb2
   1b728:	00021853 	.word	0x00021853

0001b72c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1b72c:	b538      	push	{r3, r4, r5, lr}
   1b72e:	4604      	mov	r4, r0
   1b730:	460d      	mov	r5, r1
   1b732:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1b736:	b173      	cbz	r3, 1b756 <z_impl_k_sleep+0x2a>
   1b738:	4913      	ldr	r1, [pc, #76]	; (1b788 <z_impl_k_sleep+0x5c>)
   1b73a:	4a14      	ldr	r2, [pc, #80]	; (1b78c <z_impl_k_sleep+0x60>)
   1b73c:	4814      	ldr	r0, [pc, #80]	; (1b790 <z_impl_k_sleep+0x64>)
   1b73e:	f240 43ee 	movw	r3, #1262	; 0x4ee
   1b742:	f001 f92e 	bl	1c9a2 <printk>
   1b746:	4813      	ldr	r0, [pc, #76]	; (1b794 <z_impl_k_sleep+0x68>)
   1b748:	f001 f92b 	bl	1c9a2 <printk>
   1b74c:	480f      	ldr	r0, [pc, #60]	; (1b78c <z_impl_k_sleep+0x60>)
   1b74e:	f240 41ee 	movw	r1, #1262	; 0x4ee
   1b752:	f001 fb80 	bl	1ce56 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b756:	1c6b      	adds	r3, r5, #1
   1b758:	bf08      	it	eq
   1b75a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1b75e:	d106      	bne.n	1b76e <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   1b760:	4b0d      	ldr	r3, [pc, #52]	; (1b798 <z_impl_k_sleep+0x6c>)
   1b762:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b764:	f7ff fd4e 	bl	1b204 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1b768:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1b76c:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   1b76e:	4620      	mov	r0, r4
   1b770:	4629      	mov	r1, r5
   1b772:	f7ff ff2d 	bl	1b5d0 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1b776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b77a:	fb80 3403 	smull	r3, r4, r0, r3
   1b77e:	0bd8      	lsrs	r0, r3, #15
   1b780:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   1b784:	e7f2      	b.n	1b76c <z_impl_k_sleep+0x40>
   1b786:	bf00      	nop
   1b788:	000214d9 	.word	0x000214d9
   1b78c:	000217a1 	.word	0x000217a1
   1b790:	0001feb5 	.word	0x0001feb5
   1b794:	00020d40 	.word	0x00020d40
   1b798:	20001eb4 	.word	0x20001eb4

0001b79c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1b79c:	4b01      	ldr	r3, [pc, #4]	; (1b7a4 <z_impl_z_current_get+0x8>)
   1b79e:	6898      	ldr	r0, [r3, #8]
   1b7a0:	4770      	bx	lr
   1b7a2:	bf00      	nop
   1b7a4:	20001eb4 	.word	0x20001eb4

0001b7a8 <z_impl_k_is_preempt_thread>:
   1b7a8:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1b7ac:	b93b      	cbnz	r3, 1b7be <z_impl_k_is_preempt_thread+0x16>
   1b7ae:	4b05      	ldr	r3, [pc, #20]	; (1b7c4 <z_impl_k_is_preempt_thread+0x1c>)
   1b7b0:	689b      	ldr	r3, [r3, #8]
   1b7b2:	89d8      	ldrh	r0, [r3, #14]
   1b7b4:	287f      	cmp	r0, #127	; 0x7f
   1b7b6:	bf8c      	ite	hi
   1b7b8:	2000      	movhi	r0, #0
   1b7ba:	2001      	movls	r0, #1
   1b7bc:	4770      	bx	lr
   1b7be:	2000      	movs	r0, #0
}
   1b7c0:	4770      	bx	lr
   1b7c2:	bf00      	nop
   1b7c4:	20001eb4 	.word	0x20001eb4

0001b7c8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1b7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b7cc:	4604      	mov	r4, r0
   1b7ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b7d2:	f3ef 8611 	mrs	r6, BASEPRI
   1b7d6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b7de:	4848      	ldr	r0, [pc, #288]	; (1b900 <z_thread_abort+0x138>)
   1b7e0:	f7fd fdfe 	bl	193e0 <z_spin_lock_valid>
   1b7e4:	b968      	cbnz	r0, 1b802 <z_thread_abort+0x3a>
   1b7e6:	4a47      	ldr	r2, [pc, #284]	; (1b904 <z_thread_abort+0x13c>)
   1b7e8:	4947      	ldr	r1, [pc, #284]	; (1b908 <z_thread_abort+0x140>)
   1b7ea:	4848      	ldr	r0, [pc, #288]	; (1b90c <z_thread_abort+0x144>)
   1b7ec:	2381      	movs	r3, #129	; 0x81
   1b7ee:	f001 f8d8 	bl	1c9a2 <printk>
   1b7f2:	4943      	ldr	r1, [pc, #268]	; (1b900 <z_thread_abort+0x138>)
   1b7f4:	4846      	ldr	r0, [pc, #280]	; (1b910 <z_thread_abort+0x148>)
   1b7f6:	f001 f8d4 	bl	1c9a2 <printk>
   1b7fa:	4842      	ldr	r0, [pc, #264]	; (1b904 <z_thread_abort+0x13c>)
   1b7fc:	2181      	movs	r1, #129	; 0x81
   1b7fe:	f001 fb2a 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b802:	483f      	ldr	r0, [pc, #252]	; (1b900 <z_thread_abort+0x138>)
   1b804:	f7fd fe0a 	bl	1941c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1b808:	7b63      	ldrb	r3, [r4, #13]
   1b80a:	071a      	lsls	r2, r3, #28
   1b80c:	d517      	bpl.n	1b83e <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b80e:	483c      	ldr	r0, [pc, #240]	; (1b900 <z_thread_abort+0x138>)
   1b810:	f7fd fdf4 	bl	193fc <z_spin_unlock_valid>
   1b814:	b968      	cbnz	r0, 1b832 <z_thread_abort+0x6a>
   1b816:	4a3b      	ldr	r2, [pc, #236]	; (1b904 <z_thread_abort+0x13c>)
   1b818:	493e      	ldr	r1, [pc, #248]	; (1b914 <z_thread_abort+0x14c>)
   1b81a:	483c      	ldr	r0, [pc, #240]	; (1b90c <z_thread_abort+0x144>)
   1b81c:	23ac      	movs	r3, #172	; 0xac
   1b81e:	f001 f8c0 	bl	1c9a2 <printk>
   1b822:	4937      	ldr	r1, [pc, #220]	; (1b900 <z_thread_abort+0x138>)
   1b824:	483c      	ldr	r0, [pc, #240]	; (1b918 <z_thread_abort+0x150>)
   1b826:	f001 f8bc 	bl	1c9a2 <printk>
   1b82a:	4836      	ldr	r0, [pc, #216]	; (1b904 <z_thread_abort+0x13c>)
   1b82c:	21ac      	movs	r1, #172	; 0xac
   1b82e:	f001 fb12 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1b832:	f386 8811 	msr	BASEPRI, r6
   1b836:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1b83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1b83e:	f023 0220 	bic.w	r2, r3, #32
   1b842:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1b846:	09d2      	lsrs	r2, r2, #7
   1b848:	d142      	bne.n	1b8d0 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1b84a:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   1b84c:	68a3      	ldr	r3, [r4, #8]
   1b84e:	b113      	cbz	r3, 1b856 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   1b850:	4620      	mov	r0, r4
   1b852:	f7ff f893 	bl	1a97c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1b856:	f104 0018 	add.w	r0, r4, #24
   1b85a:	f000 fa11 	bl	1bc80 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1b85e:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1b862:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1b866:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b868:	42bd      	cmp	r5, r7
   1b86a:	d001      	beq.n	1b870 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1b86c:	2d00      	cmp	r5, #0
   1b86e:	d139      	bne.n	1b8e4 <z_thread_abort+0x11c>
		update_cache(1);
   1b870:	2001      	movs	r0, #1
   1b872:	f7ff f8f1 	bl	1aa58 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1b876:	4b29      	ldr	r3, [pc, #164]	; (1b91c <z_thread_abort+0x154>)
   1b878:	689b      	ldr	r3, [r3, #8]
   1b87a:	42a3      	cmp	r3, r4
   1b87c:	d1c7      	bne.n	1b80e <z_thread_abort+0x46>
   1b87e:	f3ef 8305 	mrs	r3, IPSR
   1b882:	2b00      	cmp	r3, #0
   1b884:	d1c3      	bne.n	1b80e <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b886:	481e      	ldr	r0, [pc, #120]	; (1b900 <z_thread_abort+0x138>)
   1b888:	f7fd fdb8 	bl	193fc <z_spin_unlock_valid>
   1b88c:	b968      	cbnz	r0, 1b8aa <z_thread_abort+0xe2>
   1b88e:	4a1d      	ldr	r2, [pc, #116]	; (1b904 <z_thread_abort+0x13c>)
   1b890:	4920      	ldr	r1, [pc, #128]	; (1b914 <z_thread_abort+0x14c>)
   1b892:	481e      	ldr	r0, [pc, #120]	; (1b90c <z_thread_abort+0x144>)
   1b894:	23c3      	movs	r3, #195	; 0xc3
   1b896:	f001 f884 	bl	1c9a2 <printk>
   1b89a:	4919      	ldr	r1, [pc, #100]	; (1b900 <z_thread_abort+0x138>)
   1b89c:	481e      	ldr	r0, [pc, #120]	; (1b918 <z_thread_abort+0x150>)
   1b89e:	f001 f880 	bl	1c9a2 <printk>
   1b8a2:	4818      	ldr	r0, [pc, #96]	; (1b904 <z_thread_abort+0x13c>)
   1b8a4:	21c3      	movs	r1, #195	; 0xc3
   1b8a6:	f001 fad6 	bl	1ce56 <assert_post_action>
   1b8aa:	4630      	mov	r0, r6
   1b8ac:	f7f5 fdb8 	bl	11420 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   1b8b0:	4a1b      	ldr	r2, [pc, #108]	; (1b920 <z_thread_abort+0x158>)
   1b8b2:	491c      	ldr	r1, [pc, #112]	; (1b924 <z_thread_abort+0x15c>)
   1b8b4:	4815      	ldr	r0, [pc, #84]	; (1b90c <z_thread_abort+0x144>)
   1b8b6:	f240 6309 	movw	r3, #1545	; 0x609
   1b8ba:	f001 f872 	bl	1c9a2 <printk>
   1b8be:	481a      	ldr	r0, [pc, #104]	; (1b928 <z_thread_abort+0x160>)
   1b8c0:	f001 f86f 	bl	1c9a2 <printk>
   1b8c4:	4816      	ldr	r0, [pc, #88]	; (1b920 <z_thread_abort+0x158>)
   1b8c6:	f240 6109 	movw	r1, #1545	; 0x609
   1b8ca:	f001 fac4 	bl	1ce56 <assert_post_action>
   1b8ce:	e79e      	b.n	1b80e <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b8d0:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1b8d4:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
   1b8d8:	4814      	ldr	r0, [pc, #80]	; (1b92c <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b8da:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   1b8dc:	4621      	mov	r1, r4
   1b8de:	f7ff f82b 	bl	1a938 <z_priq_dumb_remove>
}
   1b8e2:	e7b3      	b.n	1b84c <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   1b8e4:	4628      	mov	r0, r5
   1b8e6:	f7ff f849 	bl	1a97c <unpend_thread_no_timeout>
   1b8ea:	f105 0018 	add.w	r0, r5, #24
   1b8ee:	f000 f9c7 	bl	1bc80 <z_abort_timeout>
   1b8f2:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1b8f6:	4628      	mov	r0, r5
   1b8f8:	f7ff f9b4 	bl	1ac64 <ready_thread>
   1b8fc:	e7b3      	b.n	1b866 <z_thread_abort+0x9e>
   1b8fe:	bf00      	nop
   1b900:	20001ef4 	.word	0x20001ef4
   1b904:	0001ff75 	.word	0x0001ff75
   1b908:	0001ffc7 	.word	0x0001ffc7
   1b90c:	0001feb5 	.word	0x0001feb5
   1b910:	0001ffdc 	.word	0x0001ffdc
   1b914:	0001ff9b 	.word	0x0001ff9b
   1b918:	0001ffb2 	.word	0x0001ffb2
   1b91c:	20001eb4 	.word	0x20001eb4
   1b920:	000217a1 	.word	0x000217a1
   1b924:	00021b83 	.word	0x00021b83
   1b928:	00021893 	.word	0x00021893
   1b92c:	20001ed4 	.word	0x20001ed4

0001b930 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   1b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b932:	4604      	mov	r4, r0
   1b934:	460e      	mov	r6, r1
   1b936:	4615      	mov	r5, r2
	__asm__ volatile(
   1b938:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b93c:	f3ef 8711 	mrs	r7, BASEPRI
   1b940:	f383 8812 	msr	BASEPRI_MAX, r3
   1b944:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b948:	481e      	ldr	r0, [pc, #120]	; (1b9c4 <z_sched_wake+0x94>)
   1b94a:	f7fd fd49 	bl	193e0 <z_spin_lock_valid>
   1b94e:	b968      	cbnz	r0, 1b96c <z_sched_wake+0x3c>
   1b950:	4a1d      	ldr	r2, [pc, #116]	; (1b9c8 <z_sched_wake+0x98>)
   1b952:	491e      	ldr	r1, [pc, #120]	; (1b9cc <z_sched_wake+0x9c>)
   1b954:	481e      	ldr	r0, [pc, #120]	; (1b9d0 <z_sched_wake+0xa0>)
   1b956:	2381      	movs	r3, #129	; 0x81
   1b958:	f001 f823 	bl	1c9a2 <printk>
   1b95c:	4919      	ldr	r1, [pc, #100]	; (1b9c4 <z_sched_wake+0x94>)
   1b95e:	481d      	ldr	r0, [pc, #116]	; (1b9d4 <z_sched_wake+0xa4>)
   1b960:	f001 f81f 	bl	1c9a2 <printk>
   1b964:	4818      	ldr	r0, [pc, #96]	; (1b9c8 <z_sched_wake+0x98>)
   1b966:	2181      	movs	r1, #129	; 0x81
   1b968:	f001 fa75 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b96c:	4815      	ldr	r0, [pc, #84]	; (1b9c4 <z_sched_wake+0x94>)
   1b96e:	f7fd fd55 	bl	1941c <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   1b972:	4620      	mov	r0, r4
   1b974:	f003 fd66 	bl	1f444 <z_priq_dumb_best>

		if (thread != NULL) {
   1b978:	4604      	mov	r4, r0
   1b97a:	b158      	cbz	r0, 1b994 <z_sched_wake+0x64>
   1b97c:	67c6      	str	r6, [r0, #124]	; 0x7c
   1b97e:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   1b980:	f7fe fffc 	bl	1a97c <unpend_thread_no_timeout>
   1b984:	f104 0018 	add.w	r0, r4, #24
   1b988:	f000 f97a 	bl	1bc80 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   1b98c:	4620      	mov	r0, r4
   1b98e:	f7ff f969 	bl	1ac64 <ready_thread>
			ret = true;
   1b992:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b994:	480b      	ldr	r0, [pc, #44]	; (1b9c4 <z_sched_wake+0x94>)
   1b996:	f7fd fd31 	bl	193fc <z_spin_unlock_valid>
   1b99a:	b968      	cbnz	r0, 1b9b8 <z_sched_wake+0x88>
   1b99c:	4a0a      	ldr	r2, [pc, #40]	; (1b9c8 <z_sched_wake+0x98>)
   1b99e:	490e      	ldr	r1, [pc, #56]	; (1b9d8 <z_sched_wake+0xa8>)
   1b9a0:	480b      	ldr	r0, [pc, #44]	; (1b9d0 <z_sched_wake+0xa0>)
   1b9a2:	23ac      	movs	r3, #172	; 0xac
   1b9a4:	f000 fffd 	bl	1c9a2 <printk>
   1b9a8:	4906      	ldr	r1, [pc, #24]	; (1b9c4 <z_sched_wake+0x94>)
   1b9aa:	480c      	ldr	r0, [pc, #48]	; (1b9dc <z_sched_wake+0xac>)
   1b9ac:	f000 fff9 	bl	1c9a2 <printk>
   1b9b0:	4805      	ldr	r0, [pc, #20]	; (1b9c8 <z_sched_wake+0x98>)
   1b9b2:	21ac      	movs	r1, #172	; 0xac
   1b9b4:	f001 fa4f 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1b9b8:	f387 8811 	msr	BASEPRI, r7
   1b9bc:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1b9c0:	4620      	mov	r0, r4
   1b9c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b9c4:	20001ef4 	.word	0x20001ef4
   1b9c8:	0001ff75 	.word	0x0001ff75
   1b9cc:	0001ffc7 	.word	0x0001ffc7
   1b9d0:	0001feb5 	.word	0x0001feb5
   1b9d4:	0001ffdc 	.word	0x0001ffdc
   1b9d8:	0001ff9b 	.word	0x0001ff9b
   1b9dc:	0001ffb2 	.word	0x0001ffb2

0001b9e0 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1b9e0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1b9e2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1b9e6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1b9e8:	e9cd 6700 	strd	r6, r7, [sp]
   1b9ec:	f7ff fb3e 	bl	1b06c <z_pend_curr>

	if (data != NULL) {
   1b9f0:	b11c      	cbz	r4, 1b9fa <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1b9f2:	4b03      	ldr	r3, [pc, #12]	; (1ba00 <z_sched_wait+0x20>)
   1b9f4:	689b      	ldr	r3, [r3, #8]
   1b9f6:	695b      	ldr	r3, [r3, #20]
   1b9f8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1b9fa:	b002      	add	sp, #8
   1b9fc:	bdd0      	pop	{r4, r6, r7, pc}
   1b9fe:	bf00      	nop
   1ba00:	20001eb4 	.word	0x20001eb4

0001ba04 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1ba04:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ba06:	4806      	ldr	r0, [pc, #24]	; (1ba20 <z_data_copy+0x1c>)
   1ba08:	4a06      	ldr	r2, [pc, #24]	; (1ba24 <z_data_copy+0x20>)
   1ba0a:	4907      	ldr	r1, [pc, #28]	; (1ba28 <z_data_copy+0x24>)
   1ba0c:	1a12      	subs	r2, r2, r0
   1ba0e:	f003 fdbd 	bl	1f58c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1ba12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1ba16:	4a05      	ldr	r2, [pc, #20]	; (1ba2c <z_data_copy+0x28>)
   1ba18:	4905      	ldr	r1, [pc, #20]	; (1ba30 <z_data_copy+0x2c>)
   1ba1a:	4806      	ldr	r0, [pc, #24]	; (1ba34 <z_data_copy+0x30>)
   1ba1c:	f003 bdb6 	b.w	1f58c <memcpy>
   1ba20:	20000000 	.word	0x20000000
   1ba24:	20000748 	.word	0x20000748
   1ba28:	00021ce4 	.word	0x00021ce4
   1ba2c:	00000000 	.word	0x00000000
   1ba30:	00021ce4 	.word	0x00021ce4
   1ba34:	20000000 	.word	0x20000000

0001ba38 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1ba38:	4b03      	ldr	r3, [pc, #12]	; (1ba48 <elapsed+0x10>)
   1ba3a:	681b      	ldr	r3, [r3, #0]
   1ba3c:	b90b      	cbnz	r3, 1ba42 <elapsed+0xa>
   1ba3e:	f7fb bfd5 	b.w	179ec <sys_clock_elapsed>
}
   1ba42:	2000      	movs	r0, #0
   1ba44:	4770      	bx	lr
   1ba46:	bf00      	nop
   1ba48:	20001f00 	.word	0x20001f00

0001ba4c <next_timeout>:

static int32_t next_timeout(void)
{
   1ba4c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1ba4e:	4b13      	ldr	r3, [pc, #76]	; (1ba9c <next_timeout+0x50>)
   1ba50:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba52:	429c      	cmp	r4, r3
   1ba54:	bf08      	it	eq
   1ba56:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1ba58:	f7ff ffee 	bl	1ba38 <elapsed>
   1ba5c:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1ba5e:	b1bc      	cbz	r4, 1ba90 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1ba60:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1ba64:	1b40      	subs	r0, r0, r5
   1ba66:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1ba6a:	2801      	cmp	r0, #1
   1ba6c:	f171 0300 	sbcs.w	r3, r1, #0
   1ba70:	db11      	blt.n	1ba96 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1ba72:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1ba76:	2300      	movs	r3, #0
   1ba78:	4282      	cmp	r2, r0
   1ba7a:	eb73 0401 	sbcs.w	r4, r3, r1
   1ba7e:	da00      	bge.n	1ba82 <next_timeout+0x36>
   1ba80:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1ba82:	4b07      	ldr	r3, [pc, #28]	; (1baa0 <next_timeout+0x54>)
   1ba84:	691b      	ldr	r3, [r3, #16]
   1ba86:	b113      	cbz	r3, 1ba8e <next_timeout+0x42>
   1ba88:	4298      	cmp	r0, r3
   1ba8a:	bfa8      	it	ge
   1ba8c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1ba8e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1ba90:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ba94:	e7f5      	b.n	1ba82 <next_timeout+0x36>
   1ba96:	2000      	movs	r0, #0
   1ba98:	e7f3      	b.n	1ba82 <next_timeout+0x36>
   1ba9a:	bf00      	nop
   1ba9c:	200004f8 	.word	0x200004f8
   1baa0:	20001eb4 	.word	0x20001eb4

0001baa4 <remove_timeout>:
{
   1baa4:	b530      	push	{r4, r5, lr}
   1baa6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1baa8:	b168      	cbz	r0, 1bac6 <remove_timeout+0x22>
   1baaa:	4a0a      	ldr	r2, [pc, #40]	; (1bad4 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1baac:	6852      	ldr	r2, [r2, #4]
   1baae:	4290      	cmp	r0, r2
   1bab0:	d009      	beq.n	1bac6 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1bab2:	b143      	cbz	r3, 1bac6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1bab4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1bab8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1babc:	1912      	adds	r2, r2, r4
   1babe:	eb45 0101 	adc.w	r1, r5, r1
   1bac2:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   1bac6:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   1bac8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1baca:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bacc:	2300      	movs	r3, #0
	node->prev = NULL;
   1bace:	e9c0 3300 	strd	r3, r3, [r0]
}
   1bad2:	bd30      	pop	{r4, r5, pc}
   1bad4:	200004f8 	.word	0x200004f8

0001bad8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1bad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1badc:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bade:	1c6b      	adds	r3, r5, #1
   1bae0:	bf08      	it	eq
   1bae2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1bae6:	4682      	mov	sl, r0
   1bae8:	468b      	mov	fp, r1
   1baea:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1baec:	f000 80aa 	beq.w	1bc44 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1baf0:	6803      	ldr	r3, [r0, #0]
   1baf2:	b163      	cbz	r3, 1bb0e <z_add_timeout+0x36>
   1baf4:	4955      	ldr	r1, [pc, #340]	; (1bc4c <z_add_timeout+0x174>)
   1baf6:	4a56      	ldr	r2, [pc, #344]	; (1bc50 <z_add_timeout+0x178>)
   1baf8:	4856      	ldr	r0, [pc, #344]	; (1bc54 <z_add_timeout+0x17c>)
   1bafa:	235d      	movs	r3, #93	; 0x5d
   1bafc:	f000 ff51 	bl	1c9a2 <printk>
   1bb00:	4855      	ldr	r0, [pc, #340]	; (1bc58 <z_add_timeout+0x180>)
   1bb02:	f000 ff4e 	bl	1c9a2 <printk>
   1bb06:	4852      	ldr	r0, [pc, #328]	; (1bc50 <z_add_timeout+0x178>)
   1bb08:	215d      	movs	r1, #93	; 0x5d
   1bb0a:	f001 f9a4 	bl	1ce56 <assert_post_action>
	to->fn = fn;
   1bb0e:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   1bb12:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bb16:	f3ef 8b11 	mrs	fp, BASEPRI
   1bb1a:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bb22:	484e      	ldr	r0, [pc, #312]	; (1bc5c <z_add_timeout+0x184>)
   1bb24:	f7fd fc5c 	bl	193e0 <z_spin_lock_valid>
   1bb28:	b968      	cbnz	r0, 1bb46 <z_add_timeout+0x6e>
   1bb2a:	4a4d      	ldr	r2, [pc, #308]	; (1bc60 <z_add_timeout+0x188>)
   1bb2c:	494d      	ldr	r1, [pc, #308]	; (1bc64 <z_add_timeout+0x18c>)
   1bb2e:	4849      	ldr	r0, [pc, #292]	; (1bc54 <z_add_timeout+0x17c>)
   1bb30:	2381      	movs	r3, #129	; 0x81
   1bb32:	f000 ff36 	bl	1c9a2 <printk>
   1bb36:	4949      	ldr	r1, [pc, #292]	; (1bc5c <z_add_timeout+0x184>)
   1bb38:	484b      	ldr	r0, [pc, #300]	; (1bc68 <z_add_timeout+0x190>)
   1bb3a:	f000 ff32 	bl	1c9a2 <printk>
   1bb3e:	4848      	ldr	r0, [pc, #288]	; (1bc60 <z_add_timeout+0x188>)
   1bb40:	2181      	movs	r1, #129	; 0x81
   1bb42:	f001 f988 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bb46:	4845      	ldr	r0, [pc, #276]	; (1bc5c <z_add_timeout+0x184>)
   1bb48:	f7fd fc68 	bl	1941c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1bb4c:	f06f 0301 	mvn.w	r3, #1
   1bb50:	ebb3 0804 	subs.w	r8, r3, r4
   1bb54:	f04f 32ff 	mov.w	r2, #4294967295
   1bb58:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1bb5c:	f1b8 0f00 	cmp.w	r8, #0
   1bb60:	f179 0100 	sbcs.w	r1, r9, #0
   1bb64:	db1c      	blt.n	1bba0 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1bb66:	4841      	ldr	r0, [pc, #260]	; (1bc6c <z_add_timeout+0x194>)
   1bb68:	e9d0 1000 	ldrd	r1, r0, [r0]
   1bb6c:	1a5b      	subs	r3, r3, r1
   1bb6e:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   1bb72:	1b1e      	subs	r6, r3, r4
   1bb74:	eb62 0705 	sbc.w	r7, r2, r5
   1bb78:	2e01      	cmp	r6, #1
   1bb7a:	f177 0300 	sbcs.w	r3, r7, #0
   1bb7e:	bfbc      	itt	lt
   1bb80:	2601      	movlt	r6, #1
   1bb82:	2700      	movlt	r7, #0
   1bb84:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   1bb88:	4a39      	ldr	r2, [pc, #228]	; (1bc70 <z_add_timeout+0x198>)
   1bb8a:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb8e:	4293      	cmp	r3, r2
   1bb90:	d11d      	bne.n	1bbce <z_add_timeout+0xf6>
	node->prev = tail;
   1bb92:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   1bb96:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   1bb9a:	f8c2 a004 	str.w	sl, [r2, #4]
}
   1bb9e:	e02c      	b.n	1bbfa <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1bba0:	f7ff ff4a 	bl	1ba38 <elapsed>
   1bba4:	1c63      	adds	r3, r4, #1
   1bba6:	9300      	str	r3, [sp, #0]
   1bba8:	f145 0300 	adc.w	r3, r5, #0
   1bbac:	9301      	str	r3, [sp, #4]
   1bbae:	e9dd 2300 	ldrd	r2, r3, [sp]
   1bbb2:	1812      	adds	r2, r2, r0
   1bbb4:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   1bbb8:	e9ca 2304 	strd	r2, r3, [sl, #16]
   1bbbc:	e7e4      	b.n	1bb88 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1bbbe:	1be0      	subs	r0, r4, r7
   1bbc0:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   1bbc4:	42b3      	cmp	r3, r6
   1bbc6:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1bbca:	d0e2      	beq.n	1bb92 <z_add_timeout+0xba>
   1bbcc:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1bbce:	2b00      	cmp	r3, #0
   1bbd0:	d0df      	beq.n	1bb92 <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   1bbd2:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   1bbd6:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1bbda:	42bc      	cmp	r4, r7
   1bbdc:	eb75 0108 	sbcs.w	r1, r5, r8
   1bbe0:	daed      	bge.n	1bbbe <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
   1bbe2:	1b38      	subs	r0, r7, r4
   1bbe4:	eb68 0105 	sbc.w	r1, r8, r5
   1bbe8:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1bbec:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1bbee:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   1bbf2:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1bbf6:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   1bbfa:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bbfc:	4293      	cmp	r3, r2
   1bbfe:	d00b      	beq.n	1bc18 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1bc00:	459a      	cmp	sl, r3
   1bc02:	d109      	bne.n	1bc18 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1bc04:	f7ff ff22 	bl	1ba4c <next_timeout>

			if (next_time == 0 ||
   1bc08:	b118      	cbz	r0, 1bc12 <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
   1bc0a:	4b1a      	ldr	r3, [pc, #104]	; (1bc74 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
   1bc0c:	691b      	ldr	r3, [r3, #16]
   1bc0e:	4283      	cmp	r3, r0
   1bc10:	d002      	beq.n	1bc18 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
   1bc12:	2100      	movs	r1, #0
   1bc14:	f7fb feba 	bl	1798c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bc18:	4810      	ldr	r0, [pc, #64]	; (1bc5c <z_add_timeout+0x184>)
   1bc1a:	f7fd fbef 	bl	193fc <z_spin_unlock_valid>
   1bc1e:	b968      	cbnz	r0, 1bc3c <z_add_timeout+0x164>
   1bc20:	4a0f      	ldr	r2, [pc, #60]	; (1bc60 <z_add_timeout+0x188>)
   1bc22:	4915      	ldr	r1, [pc, #84]	; (1bc78 <z_add_timeout+0x1a0>)
   1bc24:	480b      	ldr	r0, [pc, #44]	; (1bc54 <z_add_timeout+0x17c>)
   1bc26:	23ac      	movs	r3, #172	; 0xac
   1bc28:	f000 febb 	bl	1c9a2 <printk>
   1bc2c:	490b      	ldr	r1, [pc, #44]	; (1bc5c <z_add_timeout+0x184>)
   1bc2e:	4813      	ldr	r0, [pc, #76]	; (1bc7c <z_add_timeout+0x1a4>)
   1bc30:	f000 feb7 	bl	1c9a2 <printk>
   1bc34:	480a      	ldr	r0, [pc, #40]	; (1bc60 <z_add_timeout+0x188>)
   1bc36:	21ac      	movs	r1, #172	; 0xac
   1bc38:	f001 f90d 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1bc3c:	f38b 8811 	msr	BASEPRI, fp
   1bc40:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1bc44:	b003      	add	sp, #12
   1bc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc4a:	bf00      	nop
   1bc4c:	000218d9 	.word	0x000218d9
   1bc50:	000218b5 	.word	0x000218b5
   1bc54:	0001feb5 	.word	0x0001feb5
   1bc58:	00020d40 	.word	0x00020d40
   1bc5c:	20001f04 	.word	0x20001f04
   1bc60:	0001ff75 	.word	0x0001ff75
   1bc64:	0001ffc7 	.word	0x0001ffc7
   1bc68:	0001ffdc 	.word	0x0001ffdc
   1bc6c:	20001b80 	.word	0x20001b80
   1bc70:	200004f8 	.word	0x200004f8
   1bc74:	20001eb4 	.word	0x20001eb4
   1bc78:	0001ff9b 	.word	0x0001ff9b
   1bc7c:	0001ffb2 	.word	0x0001ffb2

0001bc80 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   1bc80:	b538      	push	{r3, r4, r5, lr}
   1bc82:	4604      	mov	r4, r0
	__asm__ volatile(
   1bc84:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bc88:	f3ef 8511 	mrs	r5, BASEPRI
   1bc8c:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bc94:	481a      	ldr	r0, [pc, #104]	; (1bd00 <z_abort_timeout+0x80>)
   1bc96:	f7fd fba3 	bl	193e0 <z_spin_lock_valid>
   1bc9a:	b968      	cbnz	r0, 1bcb8 <z_abort_timeout+0x38>
   1bc9c:	4a19      	ldr	r2, [pc, #100]	; (1bd04 <z_abort_timeout+0x84>)
   1bc9e:	491a      	ldr	r1, [pc, #104]	; (1bd08 <z_abort_timeout+0x88>)
   1bca0:	481a      	ldr	r0, [pc, #104]	; (1bd0c <z_abort_timeout+0x8c>)
   1bca2:	2381      	movs	r3, #129	; 0x81
   1bca4:	f000 fe7d 	bl	1c9a2 <printk>
   1bca8:	4915      	ldr	r1, [pc, #84]	; (1bd00 <z_abort_timeout+0x80>)
   1bcaa:	4819      	ldr	r0, [pc, #100]	; (1bd10 <z_abort_timeout+0x90>)
   1bcac:	f000 fe79 	bl	1c9a2 <printk>
   1bcb0:	4814      	ldr	r0, [pc, #80]	; (1bd04 <z_abort_timeout+0x84>)
   1bcb2:	2181      	movs	r1, #129	; 0x81
   1bcb4:	f001 f8cf 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bcb8:	4811      	ldr	r0, [pc, #68]	; (1bd00 <z_abort_timeout+0x80>)
   1bcba:	f7fd fbaf 	bl	1941c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   1bcbe:	6823      	ldr	r3, [r4, #0]
   1bcc0:	b1db      	cbz	r3, 1bcfa <z_abort_timeout+0x7a>
			remove_timeout(to);
   1bcc2:	4620      	mov	r0, r4
   1bcc4:	f7ff feee 	bl	1baa4 <remove_timeout>
			ret = 0;
   1bcc8:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bcca:	480d      	ldr	r0, [pc, #52]	; (1bd00 <z_abort_timeout+0x80>)
   1bccc:	f7fd fb96 	bl	193fc <z_spin_unlock_valid>
   1bcd0:	b968      	cbnz	r0, 1bcee <z_abort_timeout+0x6e>
   1bcd2:	4a0c      	ldr	r2, [pc, #48]	; (1bd04 <z_abort_timeout+0x84>)
   1bcd4:	490f      	ldr	r1, [pc, #60]	; (1bd14 <z_abort_timeout+0x94>)
   1bcd6:	480d      	ldr	r0, [pc, #52]	; (1bd0c <z_abort_timeout+0x8c>)
   1bcd8:	23ac      	movs	r3, #172	; 0xac
   1bcda:	f000 fe62 	bl	1c9a2 <printk>
   1bcde:	4908      	ldr	r1, [pc, #32]	; (1bd00 <z_abort_timeout+0x80>)
   1bce0:	480d      	ldr	r0, [pc, #52]	; (1bd18 <z_abort_timeout+0x98>)
   1bce2:	f000 fe5e 	bl	1c9a2 <printk>
   1bce6:	4807      	ldr	r0, [pc, #28]	; (1bd04 <z_abort_timeout+0x84>)
   1bce8:	21ac      	movs	r1, #172	; 0xac
   1bcea:	f001 f8b4 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1bcee:	f385 8811 	msr	BASEPRI, r5
   1bcf2:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1bcf6:	4620      	mov	r0, r4
   1bcf8:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   1bcfa:	f06f 0415 	mvn.w	r4, #21
   1bcfe:	e7e4      	b.n	1bcca <z_abort_timeout+0x4a>
   1bd00:	20001f04 	.word	0x20001f04
   1bd04:	0001ff75 	.word	0x0001ff75
   1bd08:	0001ffc7 	.word	0x0001ffc7
   1bd0c:	0001feb5 	.word	0x0001feb5
   1bd10:	0001ffdc 	.word	0x0001ffdc
   1bd14:	0001ff9b 	.word	0x0001ff9b
   1bd18:	0001ffb2 	.word	0x0001ffb2

0001bd1c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   1bd1c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1bd1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bd22:	f3ef 8511 	mrs	r5, BASEPRI
   1bd26:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bd2e:	4818      	ldr	r0, [pc, #96]	; (1bd90 <z_get_next_timeout_expiry+0x74>)
   1bd30:	f7fd fb56 	bl	193e0 <z_spin_lock_valid>
   1bd34:	b968      	cbnz	r0, 1bd52 <z_get_next_timeout_expiry+0x36>
   1bd36:	4a17      	ldr	r2, [pc, #92]	; (1bd94 <z_get_next_timeout_expiry+0x78>)
   1bd38:	4917      	ldr	r1, [pc, #92]	; (1bd98 <z_get_next_timeout_expiry+0x7c>)
   1bd3a:	4818      	ldr	r0, [pc, #96]	; (1bd9c <z_get_next_timeout_expiry+0x80>)
   1bd3c:	2381      	movs	r3, #129	; 0x81
   1bd3e:	f000 fe30 	bl	1c9a2 <printk>
   1bd42:	4913      	ldr	r1, [pc, #76]	; (1bd90 <z_get_next_timeout_expiry+0x74>)
   1bd44:	4816      	ldr	r0, [pc, #88]	; (1bda0 <z_get_next_timeout_expiry+0x84>)
   1bd46:	f000 fe2c 	bl	1c9a2 <printk>
   1bd4a:	4812      	ldr	r0, [pc, #72]	; (1bd94 <z_get_next_timeout_expiry+0x78>)
   1bd4c:	2181      	movs	r1, #129	; 0x81
   1bd4e:	f001 f882 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bd52:	480f      	ldr	r0, [pc, #60]	; (1bd90 <z_get_next_timeout_expiry+0x74>)
   1bd54:	f7fd fb62 	bl	1941c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1bd58:	f7ff fe78 	bl	1ba4c <next_timeout>
   1bd5c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bd5e:	480c      	ldr	r0, [pc, #48]	; (1bd90 <z_get_next_timeout_expiry+0x74>)
   1bd60:	f7fd fb4c 	bl	193fc <z_spin_unlock_valid>
   1bd64:	b968      	cbnz	r0, 1bd82 <z_get_next_timeout_expiry+0x66>
   1bd66:	4a0b      	ldr	r2, [pc, #44]	; (1bd94 <z_get_next_timeout_expiry+0x78>)
   1bd68:	490e      	ldr	r1, [pc, #56]	; (1bda4 <z_get_next_timeout_expiry+0x88>)
   1bd6a:	480c      	ldr	r0, [pc, #48]	; (1bd9c <z_get_next_timeout_expiry+0x80>)
   1bd6c:	23ac      	movs	r3, #172	; 0xac
   1bd6e:	f000 fe18 	bl	1c9a2 <printk>
   1bd72:	4907      	ldr	r1, [pc, #28]	; (1bd90 <z_get_next_timeout_expiry+0x74>)
   1bd74:	480c      	ldr	r0, [pc, #48]	; (1bda8 <z_get_next_timeout_expiry+0x8c>)
   1bd76:	f000 fe14 	bl	1c9a2 <printk>
   1bd7a:	4806      	ldr	r0, [pc, #24]	; (1bd94 <z_get_next_timeout_expiry+0x78>)
   1bd7c:	21ac      	movs	r1, #172	; 0xac
   1bd7e:	f001 f86a 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1bd82:	f385 8811 	msr	BASEPRI, r5
   1bd86:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1bd8a:	4620      	mov	r0, r4
   1bd8c:	bd38      	pop	{r3, r4, r5, pc}
   1bd8e:	bf00      	nop
   1bd90:	20001f04 	.word	0x20001f04
   1bd94:	0001ff75 	.word	0x0001ff75
   1bd98:	0001ffc7 	.word	0x0001ffc7
   1bd9c:	0001feb5 	.word	0x0001feb5
   1bda0:	0001ffdc 	.word	0x0001ffdc
   1bda4:	0001ff9b 	.word	0x0001ff9b
   1bda8:	0001ffb2 	.word	0x0001ffb2

0001bdac <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   1bdac:	b570      	push	{r4, r5, r6, lr}
   1bdae:	4604      	mov	r4, r0
   1bdb0:	460d      	mov	r5, r1
	__asm__ volatile(
   1bdb2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bdb6:	f3ef 8611 	mrs	r6, BASEPRI
   1bdba:	f383 8812 	msr	BASEPRI_MAX, r3
   1bdbe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bdc2:	481b      	ldr	r0, [pc, #108]	; (1be30 <z_set_timeout_expiry+0x84>)
   1bdc4:	f7fd fb0c 	bl	193e0 <z_spin_lock_valid>
   1bdc8:	b968      	cbnz	r0, 1bde6 <z_set_timeout_expiry+0x3a>
   1bdca:	4a1a      	ldr	r2, [pc, #104]	; (1be34 <z_set_timeout_expiry+0x88>)
   1bdcc:	491a      	ldr	r1, [pc, #104]	; (1be38 <z_set_timeout_expiry+0x8c>)
   1bdce:	481b      	ldr	r0, [pc, #108]	; (1be3c <z_set_timeout_expiry+0x90>)
   1bdd0:	2381      	movs	r3, #129	; 0x81
   1bdd2:	f000 fde6 	bl	1c9a2 <printk>
   1bdd6:	4916      	ldr	r1, [pc, #88]	; (1be30 <z_set_timeout_expiry+0x84>)
   1bdd8:	4819      	ldr	r0, [pc, #100]	; (1be40 <z_set_timeout_expiry+0x94>)
   1bdda:	f000 fde2 	bl	1c9a2 <printk>
   1bdde:	4815      	ldr	r0, [pc, #84]	; (1be34 <z_set_timeout_expiry+0x88>)
   1bde0:	2181      	movs	r1, #129	; 0x81
   1bde2:	f001 f838 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bde6:	4812      	ldr	r0, [pc, #72]	; (1be30 <z_set_timeout_expiry+0x84>)
   1bde8:	f7fd fb18 	bl	1941c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   1bdec:	f7ff fe2e 	bl	1ba4c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1bdf0:	2801      	cmp	r0, #1
   1bdf2:	dd05      	ble.n	1be00 <z_set_timeout_expiry+0x54>
   1bdf4:	42a0      	cmp	r0, r4
   1bdf6:	db03      	blt.n	1be00 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1bdf8:	4629      	mov	r1, r5
   1bdfa:	4620      	mov	r0, r4
   1bdfc:	f7fb fdc6 	bl	1798c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1be00:	480b      	ldr	r0, [pc, #44]	; (1be30 <z_set_timeout_expiry+0x84>)
   1be02:	f7fd fafb 	bl	193fc <z_spin_unlock_valid>
   1be06:	b968      	cbnz	r0, 1be24 <z_set_timeout_expiry+0x78>
   1be08:	4a0a      	ldr	r2, [pc, #40]	; (1be34 <z_set_timeout_expiry+0x88>)
   1be0a:	490e      	ldr	r1, [pc, #56]	; (1be44 <z_set_timeout_expiry+0x98>)
   1be0c:	480b      	ldr	r0, [pc, #44]	; (1be3c <z_set_timeout_expiry+0x90>)
   1be0e:	23ac      	movs	r3, #172	; 0xac
   1be10:	f000 fdc7 	bl	1c9a2 <printk>
   1be14:	4906      	ldr	r1, [pc, #24]	; (1be30 <z_set_timeout_expiry+0x84>)
   1be16:	480c      	ldr	r0, [pc, #48]	; (1be48 <z_set_timeout_expiry+0x9c>)
   1be18:	f000 fdc3 	bl	1c9a2 <printk>
   1be1c:	4805      	ldr	r0, [pc, #20]	; (1be34 <z_set_timeout_expiry+0x88>)
   1be1e:	21ac      	movs	r1, #172	; 0xac
   1be20:	f001 f819 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1be24:	f386 8811 	msr	BASEPRI, r6
   1be28:	f3bf 8f6f 	isb	sy
		}
	}
}
   1be2c:	bd70      	pop	{r4, r5, r6, pc}
   1be2e:	bf00      	nop
   1be30:	20001f04 	.word	0x20001f04
   1be34:	0001ff75 	.word	0x0001ff75
   1be38:	0001ffc7 	.word	0x0001ffc7
   1be3c:	0001feb5 	.word	0x0001feb5
   1be40:	0001ffdc 	.word	0x0001ffdc
   1be44:	0001ff9b 	.word	0x0001ff9b
   1be48:	0001ffb2 	.word	0x0001ffb2

0001be4c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   1be4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be50:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1be52:	f7fe fe8f 	bl	1ab74 <z_time_slice>
	__asm__ volatile(
   1be56:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be5a:	f3ef 8711 	mrs	r7, BASEPRI
   1be5e:	f383 8812 	msr	BASEPRI_MAX, r3
   1be62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1be66:	4855      	ldr	r0, [pc, #340]	; (1bfbc <sys_clock_announce+0x170>)
   1be68:	f7fd faba 	bl	193e0 <z_spin_lock_valid>
   1be6c:	b968      	cbnz	r0, 1be8a <sys_clock_announce+0x3e>
   1be6e:	4a54      	ldr	r2, [pc, #336]	; (1bfc0 <sys_clock_announce+0x174>)
   1be70:	4954      	ldr	r1, [pc, #336]	; (1bfc4 <sys_clock_announce+0x178>)
   1be72:	4855      	ldr	r0, [pc, #340]	; (1bfc8 <sys_clock_announce+0x17c>)
   1be74:	2381      	movs	r3, #129	; 0x81
   1be76:	f000 fd94 	bl	1c9a2 <printk>
   1be7a:	4950      	ldr	r1, [pc, #320]	; (1bfbc <sys_clock_announce+0x170>)
   1be7c:	4853      	ldr	r0, [pc, #332]	; (1bfcc <sys_clock_announce+0x180>)
   1be7e:	f000 fd90 	bl	1c9a2 <printk>
   1be82:	484f      	ldr	r0, [pc, #316]	; (1bfc0 <sys_clock_announce+0x174>)
   1be84:	2181      	movs	r1, #129	; 0x81
   1be86:	f000 ffe6 	bl	1ce56 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1be8a:	4d51      	ldr	r5, [pc, #324]	; (1bfd0 <sys_clock_announce+0x184>)
   1be8c:	4e51      	ldr	r6, [pc, #324]	; (1bfd4 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
   1be8e:	484b      	ldr	r0, [pc, #300]	; (1bfbc <sys_clock_announce+0x170>)
	return list->head == list;
   1be90:	f8df a14c 	ldr.w	sl, [pc, #332]	; 1bfe0 <sys_clock_announce+0x194>
   1be94:	f7fd fac2 	bl	1941c <z_spin_lock_set_owner>
   1be98:	46b3      	mov	fp, r6
   1be9a:	602c      	str	r4, [r5, #0]
   1be9c:	e9d6 2300 	ldrd	r2, r3, [r6]
   1bea0:	f8d5 c000 	ldr.w	ip, [r5]
   1bea4:	f8da 4000 	ldr.w	r4, [sl]
   1bea8:	e9cd 2300 	strd	r2, r3, [sp]
   1beac:	4662      	mov	r2, ip
   1beae:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1beb0:	4554      	cmp	r4, sl
   1beb2:	46e0      	mov	r8, ip
   1beb4:	4699      	mov	r9, r3
   1beb6:	d00c      	beq.n	1bed2 <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1beb8:	b15c      	cbz	r4, 1bed2 <sys_clock_announce+0x86>
   1beba:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1bebe:	458c      	cmp	ip, r1
   1bec0:	eb79 0302 	sbcs.w	r3, r9, r2
   1bec4:	da2e      	bge.n	1bf24 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1bec6:	ebb1 000c 	subs.w	r0, r1, ip
   1beca:	eb62 0109 	sbc.w	r1, r2, r9
   1bece:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   1bed2:	9a00      	ldr	r2, [sp, #0]
   1bed4:	9901      	ldr	r1, [sp, #4]
   1bed6:	eb18 0202 	adds.w	r2, r8, r2
   1beda:	464b      	mov	r3, r9
   1bedc:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
   1bee0:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1bee2:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   1bee6:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1bee8:	f7ff fdb0 	bl	1ba4c <next_timeout>
   1beec:	4621      	mov	r1, r4
   1beee:	f7fb fd4d 	bl	1798c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bef2:	4832      	ldr	r0, [pc, #200]	; (1bfbc <sys_clock_announce+0x170>)
   1bef4:	f7fd fa82 	bl	193fc <z_spin_unlock_valid>
   1bef8:	b968      	cbnz	r0, 1bf16 <sys_clock_announce+0xca>
   1befa:	4a31      	ldr	r2, [pc, #196]	; (1bfc0 <sys_clock_announce+0x174>)
   1befc:	4936      	ldr	r1, [pc, #216]	; (1bfd8 <sys_clock_announce+0x18c>)
   1befe:	4832      	ldr	r0, [pc, #200]	; (1bfc8 <sys_clock_announce+0x17c>)
   1bf00:	23ac      	movs	r3, #172	; 0xac
   1bf02:	f000 fd4e 	bl	1c9a2 <printk>
   1bf06:	492d      	ldr	r1, [pc, #180]	; (1bfbc <sys_clock_announce+0x170>)
   1bf08:	4834      	ldr	r0, [pc, #208]	; (1bfdc <sys_clock_announce+0x190>)
   1bf0a:	f000 fd4a 	bl	1c9a2 <printk>
   1bf0e:	482c      	ldr	r0, [pc, #176]	; (1bfc0 <sys_clock_announce+0x174>)
   1bf10:	21ac      	movs	r1, #172	; 0xac
   1bf12:	f000 ffa0 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1bf16:	f387 8811 	msr	BASEPRI, r7
   1bf1a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1bf1e:	b003      	add	sp, #12
   1bf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1bf24:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
   1bf28:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   1bf2c:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
   1bf30:	f04f 0200 	mov.w	r2, #0
   1bf34:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1bf38:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   1bf3c:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   1bf3e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1bf42:	4620      	mov	r0, r4
		curr_tick += dt;
   1bf44:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   1bf48:	f7ff fdac 	bl	1baa4 <remove_timeout>
   1bf4c:	481b      	ldr	r0, [pc, #108]	; (1bfbc <sys_clock_announce+0x170>)
   1bf4e:	f7fd fa55 	bl	193fc <z_spin_unlock_valid>
   1bf52:	b968      	cbnz	r0, 1bf70 <sys_clock_announce+0x124>
   1bf54:	4a1a      	ldr	r2, [pc, #104]	; (1bfc0 <sys_clock_announce+0x174>)
   1bf56:	4920      	ldr	r1, [pc, #128]	; (1bfd8 <sys_clock_announce+0x18c>)
   1bf58:	481b      	ldr	r0, [pc, #108]	; (1bfc8 <sys_clock_announce+0x17c>)
   1bf5a:	23ac      	movs	r3, #172	; 0xac
   1bf5c:	f000 fd21 	bl	1c9a2 <printk>
   1bf60:	4916      	ldr	r1, [pc, #88]	; (1bfbc <sys_clock_announce+0x170>)
   1bf62:	481e      	ldr	r0, [pc, #120]	; (1bfdc <sys_clock_announce+0x190>)
   1bf64:	f000 fd1d 	bl	1c9a2 <printk>
   1bf68:	4815      	ldr	r0, [pc, #84]	; (1bfc0 <sys_clock_announce+0x174>)
   1bf6a:	21ac      	movs	r1, #172	; 0xac
   1bf6c:	f000 ff73 	bl	1ce56 <assert_post_action>
   1bf70:	f387 8811 	msr	BASEPRI, r7
   1bf74:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1bf78:	68a3      	ldr	r3, [r4, #8]
   1bf7a:	4620      	mov	r0, r4
   1bf7c:	4798      	blx	r3
	__asm__ volatile(
   1bf7e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bf82:	f3ef 8711 	mrs	r7, BASEPRI
   1bf86:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bf8e:	480b      	ldr	r0, [pc, #44]	; (1bfbc <sys_clock_announce+0x170>)
   1bf90:	f7fd fa26 	bl	193e0 <z_spin_lock_valid>
   1bf94:	b968      	cbnz	r0, 1bfb2 <sys_clock_announce+0x166>
   1bf96:	4a0a      	ldr	r2, [pc, #40]	; (1bfc0 <sys_clock_announce+0x174>)
   1bf98:	490a      	ldr	r1, [pc, #40]	; (1bfc4 <sys_clock_announce+0x178>)
   1bf9a:	480b      	ldr	r0, [pc, #44]	; (1bfc8 <sys_clock_announce+0x17c>)
   1bf9c:	2381      	movs	r3, #129	; 0x81
   1bf9e:	f000 fd00 	bl	1c9a2 <printk>
   1bfa2:	4906      	ldr	r1, [pc, #24]	; (1bfbc <sys_clock_announce+0x170>)
   1bfa4:	4809      	ldr	r0, [pc, #36]	; (1bfcc <sys_clock_announce+0x180>)
   1bfa6:	f000 fcfc 	bl	1c9a2 <printk>
   1bfaa:	4805      	ldr	r0, [pc, #20]	; (1bfc0 <sys_clock_announce+0x174>)
   1bfac:	2181      	movs	r1, #129	; 0x81
   1bfae:	f000 ff52 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bfb2:	4802      	ldr	r0, [pc, #8]	; (1bfbc <sys_clock_announce+0x170>)
   1bfb4:	f7fd fa32 	bl	1941c <z_spin_lock_set_owner>
	return k;
   1bfb8:	e770      	b.n	1be9c <sys_clock_announce+0x50>
   1bfba:	bf00      	nop
   1bfbc:	20001f04 	.word	0x20001f04
   1bfc0:	0001ff75 	.word	0x0001ff75
   1bfc4:	0001ffc7 	.word	0x0001ffc7
   1bfc8:	0001feb5 	.word	0x0001feb5
   1bfcc:	0001ffdc 	.word	0x0001ffdc
   1bfd0:	20001f00 	.word	0x20001f00
   1bfd4:	20001b80 	.word	0x20001b80
   1bfd8:	0001ff9b 	.word	0x0001ff9b
   1bfdc:	0001ffb2 	.word	0x0001ffb2
   1bfe0:	200004f8 	.word	0x200004f8

0001bfe4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1bfe4:	b570      	push	{r4, r5, r6, lr}
   1bfe6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bfea:	f3ef 8611 	mrs	r6, BASEPRI
   1bfee:	f383 8812 	msr	BASEPRI_MAX, r3
   1bff2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bff6:	481b      	ldr	r0, [pc, #108]	; (1c064 <sys_clock_tick_get+0x80>)
   1bff8:	f7fd f9f2 	bl	193e0 <z_spin_lock_valid>
   1bffc:	b968      	cbnz	r0, 1c01a <sys_clock_tick_get+0x36>
   1bffe:	4a1a      	ldr	r2, [pc, #104]	; (1c068 <sys_clock_tick_get+0x84>)
   1c000:	491a      	ldr	r1, [pc, #104]	; (1c06c <sys_clock_tick_get+0x88>)
   1c002:	481b      	ldr	r0, [pc, #108]	; (1c070 <sys_clock_tick_get+0x8c>)
   1c004:	2381      	movs	r3, #129	; 0x81
   1c006:	f000 fccc 	bl	1c9a2 <printk>
   1c00a:	4916      	ldr	r1, [pc, #88]	; (1c064 <sys_clock_tick_get+0x80>)
   1c00c:	4819      	ldr	r0, [pc, #100]	; (1c074 <sys_clock_tick_get+0x90>)
   1c00e:	f000 fcc8 	bl	1c9a2 <printk>
   1c012:	4815      	ldr	r0, [pc, #84]	; (1c068 <sys_clock_tick_get+0x84>)
   1c014:	2181      	movs	r1, #129	; 0x81
   1c016:	f000 ff1e 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c01a:	4812      	ldr	r0, [pc, #72]	; (1c064 <sys_clock_tick_get+0x80>)
   1c01c:	f7fd f9fe 	bl	1941c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1c020:	f7fb fce4 	bl	179ec <sys_clock_elapsed>
   1c024:	4b14      	ldr	r3, [pc, #80]	; (1c078 <sys_clock_tick_get+0x94>)
   1c026:	e9d3 4500 	ldrd	r4, r5, [r3]
   1c02a:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c02c:	480d      	ldr	r0, [pc, #52]	; (1c064 <sys_clock_tick_get+0x80>)
   1c02e:	f145 0500 	adc.w	r5, r5, #0
   1c032:	f7fd f9e3 	bl	193fc <z_spin_unlock_valid>
   1c036:	b968      	cbnz	r0, 1c054 <sys_clock_tick_get+0x70>
   1c038:	4a0b      	ldr	r2, [pc, #44]	; (1c068 <sys_clock_tick_get+0x84>)
   1c03a:	4910      	ldr	r1, [pc, #64]	; (1c07c <sys_clock_tick_get+0x98>)
   1c03c:	480c      	ldr	r0, [pc, #48]	; (1c070 <sys_clock_tick_get+0x8c>)
   1c03e:	23ac      	movs	r3, #172	; 0xac
   1c040:	f000 fcaf 	bl	1c9a2 <printk>
   1c044:	4907      	ldr	r1, [pc, #28]	; (1c064 <sys_clock_tick_get+0x80>)
   1c046:	480e      	ldr	r0, [pc, #56]	; (1c080 <sys_clock_tick_get+0x9c>)
   1c048:	f000 fcab 	bl	1c9a2 <printk>
   1c04c:	4806      	ldr	r0, [pc, #24]	; (1c068 <sys_clock_tick_get+0x84>)
   1c04e:	21ac      	movs	r1, #172	; 0xac
   1c050:	f000 ff01 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1c054:	f386 8811 	msr	BASEPRI, r6
   1c058:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1c05c:	4620      	mov	r0, r4
   1c05e:	4629      	mov	r1, r5
   1c060:	bd70      	pop	{r4, r5, r6, pc}
   1c062:	bf00      	nop
   1c064:	20001f04 	.word	0x20001f04
   1c068:	0001ff75 	.word	0x0001ff75
   1c06c:	0001ffc7 	.word	0x0001ffc7
   1c070:	0001feb5 	.word	0x0001feb5
   1c074:	0001ffdc 	.word	0x0001ffdc
   1c078:	20001b80 	.word	0x20001b80
   1c07c:	0001ff9b 	.word	0x0001ff9b
   1c080:	0001ffb2 	.word	0x0001ffb2

0001c084 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   1c084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c088:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   1c08a:	4d53      	ldr	r5, [pc, #332]	; (1c1d8 <clear_event_registrations+0x154>)
   1c08c:	f8df 918c 	ldr.w	r9, [pc, #396]	; 1c21c <clear_event_registrations+0x198>
   1c090:	4e52      	ldr	r6, [pc, #328]	; (1c1dc <clear_event_registrations+0x158>)
{
   1c092:	4680      	mov	r8, r0
   1c094:	4617      	mov	r7, r2
	while (num_events--) {
   1c096:	fb04 0401 	mla	r4, r4, r1, r0
   1c09a:	45a0      	cmp	r8, r4
   1c09c:	d101      	bne.n	1c0a2 <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   1c09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   1c0a2:	2300      	movs	r3, #0
   1c0a4:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1c0a8:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1c0ac:	f003 031f 	and.w	r3, r3, #31
   1c0b0:	2b08      	cmp	r3, #8
   1c0b2:	d84f      	bhi.n	1c154 <clear_event_registrations+0xd0>
   1c0b4:	e8df f003 	tbb	[pc, r3]
   1c0b8:	4e05305b 	.word	0x4e05305b
   1c0bc:	4e4e4e21 	.word	0x4e4e4e21
   1c0c0:	3f          	.byte	0x3f
   1c0c1:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1c0c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c0c6:	b963      	cbnz	r3, 1c0e2 <clear_event_registrations+0x5e>
   1c0c8:	4945      	ldr	r1, [pc, #276]	; (1c1e0 <clear_event_registrations+0x15c>)
   1c0ca:	23a9      	movs	r3, #169	; 0xa9
   1c0cc:	462a      	mov	r2, r5
   1c0ce:	4630      	mov	r0, r6
   1c0d0:	f000 fc67 	bl	1c9a2 <printk>
   1c0d4:	4843      	ldr	r0, [pc, #268]	; (1c1e4 <clear_event_registrations+0x160>)
   1c0d6:	f000 fc64 	bl	1c9a2 <printk>
   1c0da:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1c0dc:	4628      	mov	r0, r5
   1c0de:	f000 feba 	bl	1ce56 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1c0e2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1c0e6:	2b00      	cmp	r3, #0
   1c0e8:	d041      	beq.n	1c16e <clear_event_registrations+0xea>
	sys_dnode_t *const prev = node->prev;
   1c0ea:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   1c0ee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c0f0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c0f2:	2300      	movs	r3, #0
	node->prev = NULL;
   1c0f4:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   1c0f8:	e039      	b.n	1c16e <clear_event_registrations+0xea>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1c0fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c0fe:	2b00      	cmp	r3, #0
   1c100:	d1ef      	bne.n	1c0e2 <clear_event_registrations+0x5e>
   1c102:	4939      	ldr	r1, [pc, #228]	; (1c1e8 <clear_event_registrations+0x164>)
   1c104:	23ad      	movs	r3, #173	; 0xad
   1c106:	462a      	mov	r2, r5
   1c108:	4630      	mov	r0, r6
   1c10a:	f000 fc4a 	bl	1c9a2 <printk>
   1c10e:	4837      	ldr	r0, [pc, #220]	; (1c1ec <clear_event_registrations+0x168>)
   1c110:	f000 fc47 	bl	1c9a2 <printk>
   1c114:	21ad      	movs	r1, #173	; 0xad
   1c116:	e7e1      	b.n	1c0dc <clear_event_registrations+0x58>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c118:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c11c:	2b00      	cmp	r3, #0
   1c11e:	d1e0      	bne.n	1c0e2 <clear_event_registrations+0x5e>
   1c120:	4933      	ldr	r1, [pc, #204]	; (1c1f0 <clear_event_registrations+0x16c>)
   1c122:	23b1      	movs	r3, #177	; 0xb1
   1c124:	462a      	mov	r2, r5
   1c126:	4630      	mov	r0, r6
   1c128:	f000 fc3b 	bl	1c9a2 <printk>
   1c12c:	4831      	ldr	r0, [pc, #196]	; (1c1f4 <clear_event_registrations+0x170>)
   1c12e:	f000 fc38 	bl	1c9a2 <printk>
   1c132:	21b1      	movs	r1, #177	; 0xb1
   1c134:	e7d2      	b.n	1c0dc <clear_event_registrations+0x58>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1c136:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c13a:	2b00      	cmp	r3, #0
   1c13c:	d1d1      	bne.n	1c0e2 <clear_event_registrations+0x5e>
   1c13e:	492e      	ldr	r1, [pc, #184]	; (1c1f8 <clear_event_registrations+0x174>)
   1c140:	23b5      	movs	r3, #181	; 0xb5
   1c142:	462a      	mov	r2, r5
   1c144:	4630      	mov	r0, r6
   1c146:	f000 fc2c 	bl	1c9a2 <printk>
   1c14a:	482c      	ldr	r0, [pc, #176]	; (1c1fc <clear_event_registrations+0x178>)
   1c14c:	f000 fc29 	bl	1c9a2 <printk>
   1c150:	21b5      	movs	r1, #181	; 0xb5
   1c152:	e7c3      	b.n	1c0dc <clear_event_registrations+0x58>
		__ASSERT(false, "invalid event type\n");
   1c154:	4649      	mov	r1, r9
   1c156:	23bc      	movs	r3, #188	; 0xbc
   1c158:	462a      	mov	r2, r5
   1c15a:	4630      	mov	r0, r6
   1c15c:	f000 fc21 	bl	1c9a2 <printk>
   1c160:	4827      	ldr	r0, [pc, #156]	; (1c200 <clear_event_registrations+0x17c>)
   1c162:	f000 fc1e 	bl	1c9a2 <printk>
   1c166:	21bc      	movs	r1, #188	; 0xbc
   1c168:	4628      	mov	r0, r5
   1c16a:	f000 fe74 	bl	1ce56 <assert_post_action>
   1c16e:	4825      	ldr	r0, [pc, #148]	; (1c204 <clear_event_registrations+0x180>)
   1c170:	f7fd f944 	bl	193fc <z_spin_unlock_valid>
   1c174:	b968      	cbnz	r0, 1c192 <clear_event_registrations+0x10e>
   1c176:	4a24      	ldr	r2, [pc, #144]	; (1c208 <clear_event_registrations+0x184>)
   1c178:	4924      	ldr	r1, [pc, #144]	; (1c20c <clear_event_registrations+0x188>)
   1c17a:	23ac      	movs	r3, #172	; 0xac
   1c17c:	4630      	mov	r0, r6
   1c17e:	f000 fc10 	bl	1c9a2 <printk>
   1c182:	4920      	ldr	r1, [pc, #128]	; (1c204 <clear_event_registrations+0x180>)
   1c184:	4822      	ldr	r0, [pc, #136]	; (1c210 <clear_event_registrations+0x18c>)
   1c186:	f000 fc0c 	bl	1c9a2 <printk>
   1c18a:	481f      	ldr	r0, [pc, #124]	; (1c208 <clear_event_registrations+0x184>)
   1c18c:	21ac      	movs	r1, #172	; 0xac
   1c18e:	f000 fe62 	bl	1ce56 <assert_post_action>
   1c192:	f387 8811 	msr	BASEPRI, r7
   1c196:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c19a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c19e:	f3ef 8711 	mrs	r7, BASEPRI
   1c1a2:	f383 8812 	msr	BASEPRI_MAX, r3
   1c1a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c1aa:	4816      	ldr	r0, [pc, #88]	; (1c204 <clear_event_registrations+0x180>)
   1c1ac:	f7fd f918 	bl	193e0 <z_spin_lock_valid>
   1c1b0:	b968      	cbnz	r0, 1c1ce <clear_event_registrations+0x14a>
   1c1b2:	4a15      	ldr	r2, [pc, #84]	; (1c208 <clear_event_registrations+0x184>)
   1c1b4:	4917      	ldr	r1, [pc, #92]	; (1c214 <clear_event_registrations+0x190>)
   1c1b6:	2381      	movs	r3, #129	; 0x81
   1c1b8:	4630      	mov	r0, r6
   1c1ba:	f000 fbf2 	bl	1c9a2 <printk>
   1c1be:	4911      	ldr	r1, [pc, #68]	; (1c204 <clear_event_registrations+0x180>)
   1c1c0:	4815      	ldr	r0, [pc, #84]	; (1c218 <clear_event_registrations+0x194>)
   1c1c2:	f000 fbee 	bl	1c9a2 <printk>
   1c1c6:	4810      	ldr	r0, [pc, #64]	; (1c208 <clear_event_registrations+0x184>)
   1c1c8:	2181      	movs	r1, #129	; 0x81
   1c1ca:	f000 fe44 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c1ce:	480d      	ldr	r0, [pc, #52]	; (1c204 <clear_event_registrations+0x180>)
   1c1d0:	f7fd f924 	bl	1941c <z_spin_lock_set_owner>
	return k;
   1c1d4:	3c14      	subs	r4, #20
   1c1d6:	e760      	b.n	1c09a <clear_event_registrations+0x16>
   1c1d8:	000218f9 	.word	0x000218f9
   1c1dc:	0001feb5 	.word	0x0001feb5
   1c1e0:	0002191a 	.word	0x0002191a
   1c1e4:	00021934 	.word	0x00021934
   1c1e8:	00021949 	.word	0x00021949
   1c1ec:	00021965 	.word	0x00021965
   1c1f0:	00021976 	.word	0x00021976
   1c1f4:	00021993 	.word	0x00021993
   1c1f8:	000219aa 	.word	0x000219aa
   1c1fc:	000219c5 	.word	0x000219c5
   1c200:	000219de 	.word	0x000219de
   1c204:	20001f08 	.word	0x20001f08
   1c208:	0001ff75 	.word	0x0001ff75
   1c20c:	0001ff9b 	.word	0x0001ff9b
   1c210:	0001ffb2 	.word	0x0001ffb2
   1c214:	0001ffc7 	.word	0x0001ffc7
   1c218:	0001ffdc 	.word	0x0001ffdc
   1c21c:	00021b83 	.word	0x00021b83

0001c220 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   1c220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   1c224:	2700      	movs	r7, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c226:	4e7c      	ldr	r6, [pc, #496]	; (1c418 <register_events+0x1f8>)
   1c228:	f8df 8230 	ldr.w	r8, [pc, #560]	; 1c45c <register_events+0x23c>
   1c22c:	f8df a230 	ldr.w	sl, [pc, #560]	; 1c460 <register_events+0x240>
{
   1c230:	9100      	str	r1, [sp, #0]
   1c232:	4615      	mov	r5, r2
   1c234:	9301      	str	r3, [sp, #4]
   1c236:	4604      	mov	r4, r0
	int events_registered = 0;
   1c238:	46b9      	mov	r9, r7
	for (int ii = 0; ii < num_events; ii++) {
   1c23a:	9b00      	ldr	r3, [sp, #0]
   1c23c:	429f      	cmp	r7, r3
   1c23e:	db03      	blt.n	1c248 <register_events+0x28>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   1c240:	4648      	mov	r0, r9
   1c242:	b003      	add	sp, #12
   1c244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c248:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c24c:	f3ef 8b11 	mrs	fp, BASEPRI
   1c250:	f383 8812 	msr	BASEPRI_MAX, r3
   1c254:	f3bf 8f6f 	isb	sy
   1c258:	4630      	mov	r0, r6
   1c25a:	f7fd f8c1 	bl	193e0 <z_spin_lock_valid>
   1c25e:	b968      	cbnz	r0, 1c27c <register_events+0x5c>
   1c260:	486e      	ldr	r0, [pc, #440]	; (1c41c <register_events+0x1fc>)
   1c262:	2381      	movs	r3, #129	; 0x81
   1c264:	4642      	mov	r2, r8
   1c266:	4651      	mov	r1, sl
   1c268:	f000 fb9b 	bl	1c9a2 <printk>
   1c26c:	486c      	ldr	r0, [pc, #432]	; (1c420 <register_events+0x200>)
   1c26e:	4631      	mov	r1, r6
   1c270:	f000 fb97 	bl	1c9a2 <printk>
   1c274:	2181      	movs	r1, #129	; 0x81
   1c276:	4640      	mov	r0, r8
   1c278:	f000 fded 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c27c:	4630      	mov	r0, r6
   1c27e:	f7fd f8cd 	bl	1941c <z_spin_lock_set_owner>
	switch (event->type) {
   1c282:	7b63      	ldrb	r3, [r4, #13]
   1c284:	f003 031f 	and.w	r3, r3, #31
   1c288:	2b08      	cmp	r3, #8
   1c28a:	d84f      	bhi.n	1c32c <register_events+0x10c>
   1c28c:	e8df f003 	tbb	[pc, r3]
   1c290:	4e054230 	.word	0x4e054230
   1c294:	4e4e4e2c 	.word	0x4e4e4e2c
   1c298:	48          	.byte	0x48
   1c299:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1c29a:	6923      	ldr	r3, [r4, #16]
   1c29c:	689b      	ldr	r3, [r3, #8]
   1c29e:	b33b      	cbz	r3, 1c2f0 <register_events+0xd0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1c2a0:	2302      	movs	r3, #2
	event->state |= state;
   1c2a2:	68e2      	ldr	r2, [r4, #12]
   1c2a4:	f3c2 3045 	ubfx	r0, r2, #13, #6
   1c2a8:	4303      	orrs	r3, r0
	event->poller = NULL;
   1c2aa:	2100      	movs	r1, #0
	event->state |= state;
   1c2ac:	f363 3252 	bfi	r2, r3, #13, #6
	event->poller = NULL;
   1c2b0:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   1c2b2:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1c2b4:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c2b6:	4630      	mov	r0, r6
   1c2b8:	f7fd f8a0 	bl	193fc <z_spin_unlock_valid>
   1c2bc:	b968      	cbnz	r0, 1c2da <register_events+0xba>
   1c2be:	4959      	ldr	r1, [pc, #356]	; (1c424 <register_events+0x204>)
   1c2c0:	4856      	ldr	r0, [pc, #344]	; (1c41c <register_events+0x1fc>)
   1c2c2:	23ac      	movs	r3, #172	; 0xac
   1c2c4:	4642      	mov	r2, r8
   1c2c6:	f000 fb6c 	bl	1c9a2 <printk>
   1c2ca:	4857      	ldr	r0, [pc, #348]	; (1c428 <register_events+0x208>)
   1c2cc:	4631      	mov	r1, r6
   1c2ce:	f000 fb68 	bl	1c9a2 <printk>
   1c2d2:	21ac      	movs	r1, #172	; 0xac
   1c2d4:	4640      	mov	r0, r8
   1c2d6:	f000 fdbe 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1c2da:	f38b 8811 	msr	BASEPRI, fp
   1c2de:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1c2e2:	3701      	adds	r7, #1
   1c2e4:	3414      	adds	r4, #20
   1c2e6:	e7a8      	b.n	1c23a <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   1c2e8:	6923      	ldr	r3, [r4, #16]
   1c2ea:	681b      	ldr	r3, [r3, #0]
   1c2ec:	2b00      	cmp	r3, #0
   1c2ee:	d12e      	bne.n	1c34e <register_events+0x12e>
		} else if (!just_check && poller->is_polling) {
   1c2f0:	9b01      	ldr	r3, [sp, #4]
   1c2f2:	2b00      	cmp	r3, #0
   1c2f4:	d1df      	bne.n	1c2b6 <register_events+0x96>
   1c2f6:	782b      	ldrb	r3, [r5, #0]
   1c2f8:	2b00      	cmp	r3, #0
   1c2fa:	d0dc      	beq.n	1c2b6 <register_events+0x96>
	switch (event->type) {
   1c2fc:	7b63      	ldrb	r3, [r4, #13]
   1c2fe:	f003 031f 	and.w	r3, r3, #31
   1c302:	2b08      	cmp	r3, #8
   1c304:	d879      	bhi.n	1c3fa <register_events+0x1da>
   1c306:	e8df f003 	tbb	[pc, r3]
   1c30a:	5139      	.short	0x5139
   1c30c:	783d7824 	.word	0x783d7824
   1c310:	7878      	.short	0x7878
   1c312:	64          	.byte	0x64
   1c313:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1c314:	6923      	ldr	r3, [r4, #16]
   1c316:	689b      	ldr	r3, [r3, #8]
   1c318:	2b00      	cmp	r3, #0
   1c31a:	d0e9      	beq.n	1c2f0 <register_events+0xd0>
			*state = K_POLL_STATE_SIGNALED;
   1c31c:	2301      	movs	r3, #1
   1c31e:	e7c0      	b.n	1c2a2 <register_events+0x82>
		if (event->msgq->used_msgs > 0) {
   1c320:	6923      	ldr	r3, [r4, #16]
   1c322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c324:	2b00      	cmp	r3, #0
   1c326:	d0e3      	beq.n	1c2f0 <register_events+0xd0>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1c328:	2310      	movs	r3, #16
   1c32a:	e7ba      	b.n	1c2a2 <register_events+0x82>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1c32c:	4a3f      	ldr	r2, [pc, #252]	; (1c42c <register_events+0x20c>)
   1c32e:	4940      	ldr	r1, [pc, #256]	; (1c430 <register_events+0x210>)
   1c330:	483a      	ldr	r0, [pc, #232]	; (1c41c <register_events+0x1fc>)
   1c332:	235c      	movs	r3, #92	; 0x5c
   1c334:	f000 fb35 	bl	1c9a2 <printk>
   1c338:	7b61      	ldrb	r1, [r4, #13]
   1c33a:	483e      	ldr	r0, [pc, #248]	; (1c434 <register_events+0x214>)
   1c33c:	f001 011f 	and.w	r1, r1, #31
   1c340:	f000 fb2f 	bl	1c9a2 <printk>
   1c344:	4839      	ldr	r0, [pc, #228]	; (1c42c <register_events+0x20c>)
   1c346:	215c      	movs	r1, #92	; 0x5c
   1c348:	f000 fd85 	bl	1ce56 <assert_post_action>
		break;
   1c34c:	e7d0      	b.n	1c2f0 <register_events+0xd0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1c34e:	2304      	movs	r3, #4
   1c350:	e7a7      	b.n	1c2a2 <register_events+0x82>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1c352:	6923      	ldr	r3, [r4, #16]
   1c354:	b963      	cbnz	r3, 1c370 <register_events+0x150>
   1c356:	4938      	ldr	r1, [pc, #224]	; (1c438 <register_events+0x218>)
   1c358:	4a34      	ldr	r2, [pc, #208]	; (1c42c <register_events+0x20c>)
   1c35a:	4830      	ldr	r0, [pc, #192]	; (1c41c <register_events+0x1fc>)
   1c35c:	2386      	movs	r3, #134	; 0x86
   1c35e:	f000 fb20 	bl	1c9a2 <printk>
   1c362:	4836      	ldr	r0, [pc, #216]	; (1c43c <register_events+0x21c>)
   1c364:	f000 fb1d 	bl	1c9a2 <printk>
   1c368:	4830      	ldr	r0, [pc, #192]	; (1c42c <register_events+0x20c>)
   1c36a:	2186      	movs	r1, #134	; 0x86
   1c36c:	f000 fd73 	bl	1ce56 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   1c370:	6920      	ldr	r0, [r4, #16]
   1c372:	462a      	mov	r2, r5
   1c374:	4621      	mov	r1, r4
   1c376:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   1c378:	f003 f8af 	bl	1f4da <add_event>
	event->poller = poller;
   1c37c:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   1c37e:	f109 0901 	add.w	r9, r9, #1
   1c382:	e798      	b.n	1c2b6 <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1c384:	6923      	ldr	r3, [r4, #16]
   1c386:	b963      	cbnz	r3, 1c3a2 <register_events+0x182>
   1c388:	492d      	ldr	r1, [pc, #180]	; (1c440 <register_events+0x220>)
   1c38a:	4a28      	ldr	r2, [pc, #160]	; (1c42c <register_events+0x20c>)
   1c38c:	4823      	ldr	r0, [pc, #140]	; (1c41c <register_events+0x1fc>)
   1c38e:	238a      	movs	r3, #138	; 0x8a
   1c390:	f000 fb07 	bl	1c9a2 <printk>
   1c394:	482b      	ldr	r0, [pc, #172]	; (1c444 <register_events+0x224>)
   1c396:	f000 fb04 	bl	1c9a2 <printk>
   1c39a:	4824      	ldr	r0, [pc, #144]	; (1c42c <register_events+0x20c>)
   1c39c:	218a      	movs	r1, #138	; 0x8a
   1c39e:	f000 fd5a 	bl	1ce56 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   1c3a2:	6920      	ldr	r0, [r4, #16]
   1c3a4:	462a      	mov	r2, r5
   1c3a6:	4621      	mov	r1, r4
   1c3a8:	3014      	adds	r0, #20
   1c3aa:	e7e5      	b.n	1c378 <register_events+0x158>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c3ac:	6923      	ldr	r3, [r4, #16]
   1c3ae:	b963      	cbnz	r3, 1c3ca <register_events+0x1aa>
   1c3b0:	4925      	ldr	r1, [pc, #148]	; (1c448 <register_events+0x228>)
   1c3b2:	4a1e      	ldr	r2, [pc, #120]	; (1c42c <register_events+0x20c>)
   1c3b4:	4819      	ldr	r0, [pc, #100]	; (1c41c <register_events+0x1fc>)
   1c3b6:	238e      	movs	r3, #142	; 0x8e
   1c3b8:	f000 faf3 	bl	1c9a2 <printk>
   1c3bc:	4823      	ldr	r0, [pc, #140]	; (1c44c <register_events+0x22c>)
   1c3be:	f000 faf0 	bl	1c9a2 <printk>
   1c3c2:	481a      	ldr	r0, [pc, #104]	; (1c42c <register_events+0x20c>)
   1c3c4:	218e      	movs	r1, #142	; 0x8e
   1c3c6:	f000 fd46 	bl	1ce56 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   1c3ca:	6920      	ldr	r0, [r4, #16]
   1c3cc:	462a      	mov	r2, r5
   1c3ce:	4621      	mov	r1, r4
   1c3d0:	e7d2      	b.n	1c378 <register_events+0x158>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1c3d2:	6923      	ldr	r3, [r4, #16]
   1c3d4:	b963      	cbnz	r3, 1c3f0 <register_events+0x1d0>
   1c3d6:	491e      	ldr	r1, [pc, #120]	; (1c450 <register_events+0x230>)
   1c3d8:	4a14      	ldr	r2, [pc, #80]	; (1c42c <register_events+0x20c>)
   1c3da:	4810      	ldr	r0, [pc, #64]	; (1c41c <register_events+0x1fc>)
   1c3dc:	2392      	movs	r3, #146	; 0x92
   1c3de:	f000 fae0 	bl	1c9a2 <printk>
   1c3e2:	481c      	ldr	r0, [pc, #112]	; (1c454 <register_events+0x234>)
   1c3e4:	f000 fadd 	bl	1c9a2 <printk>
   1c3e8:	4810      	ldr	r0, [pc, #64]	; (1c42c <register_events+0x20c>)
   1c3ea:	2192      	movs	r1, #146	; 0x92
   1c3ec:	f000 fd33 	bl	1ce56 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   1c3f0:	6920      	ldr	r0, [r4, #16]
   1c3f2:	462a      	mov	r2, r5
   1c3f4:	4621      	mov	r1, r4
   1c3f6:	3028      	adds	r0, #40	; 0x28
   1c3f8:	e7be      	b.n	1c378 <register_events+0x158>
		__ASSERT(false, "invalid event type\n");
   1c3fa:	4a0c      	ldr	r2, [pc, #48]	; (1c42c <register_events+0x20c>)
   1c3fc:	490c      	ldr	r1, [pc, #48]	; (1c430 <register_events+0x210>)
   1c3fe:	4807      	ldr	r0, [pc, #28]	; (1c41c <register_events+0x1fc>)
   1c400:	2399      	movs	r3, #153	; 0x99
   1c402:	f000 face 	bl	1c9a2 <printk>
   1c406:	4814      	ldr	r0, [pc, #80]	; (1c458 <register_events+0x238>)
   1c408:	f000 facb 	bl	1c9a2 <printk>
   1c40c:	4807      	ldr	r0, [pc, #28]	; (1c42c <register_events+0x20c>)
   1c40e:	2199      	movs	r1, #153	; 0x99
   1c410:	f000 fd21 	bl	1ce56 <assert_post_action>
		break;
   1c414:	e7b2      	b.n	1c37c <register_events+0x15c>
   1c416:	bf00      	nop
   1c418:	20001f08 	.word	0x20001f08
   1c41c:	0001feb5 	.word	0x0001feb5
   1c420:	0001ffdc 	.word	0x0001ffdc
   1c424:	0001ff9b 	.word	0x0001ff9b
   1c428:	0001ffb2 	.word	0x0001ffb2
   1c42c:	000218f9 	.word	0x000218f9
   1c430:	00021b83 	.word	0x00021b83
   1c434:	000219f4 	.word	0x000219f4
   1c438:	0002191a 	.word	0x0002191a
   1c43c:	00021934 	.word	0x00021934
   1c440:	00021949 	.word	0x00021949
   1c444:	00021965 	.word	0x00021965
   1c448:	00021976 	.word	0x00021976
   1c44c:	00021993 	.word	0x00021993
   1c450:	000219aa 	.word	0x000219aa
   1c454:	000219c5 	.word	0x000219c5
   1c458:	000219de 	.word	0x000219de
   1c45c:	0001ff75 	.word	0x0001ff75
   1c460:	0001ffc7 	.word	0x0001ffc7

0001c464 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   1c464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1c468:	6884      	ldr	r4, [r0, #8]
{
   1c46a:	4605      	mov	r5, r0
   1c46c:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
   1c46e:	b1d4      	cbz	r4, 1c4a6 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
   1c470:	7863      	ldrb	r3, [r4, #1]
   1c472:	2b01      	cmp	r3, #1
   1c474:	d14b      	bne.n	1c50e <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   1c476:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
   1c47a:	d10e      	bne.n	1c49a <signal_poll_event+0x36>
   1c47c:	4a30      	ldr	r2, [pc, #192]	; (1c540 <signal_poll_event+0xdc>)
   1c47e:	4931      	ldr	r1, [pc, #196]	; (1c544 <signal_poll_event+0xe0>)
   1c480:	4831      	ldr	r0, [pc, #196]	; (1c548 <signal_poll_event+0xe4>)
   1c482:	23f9      	movs	r3, #249	; 0xf9
   1c484:	f000 fa8d 	bl	1c9a2 <printk>
   1c488:	4830      	ldr	r0, [pc, #192]	; (1c54c <signal_poll_event+0xe8>)
   1c48a:	f000 fa8a 	bl	1c9a2 <printk>
   1c48e:	482c      	ldr	r0, [pc, #176]	; (1c540 <signal_poll_event+0xdc>)
   1c490:	21f9      	movs	r1, #249	; 0xf9
   1c492:	f000 fce0 	bl	1ce56 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   1c496:	7b7b      	ldrb	r3, [r7, #13]
   1c498:	deff      	udf	#255	; 0xff
   1c49a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1c49e:	f013 0302 	ands.w	r3, r3, #2
   1c4a2:	d10a      	bne.n	1c4ba <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
   1c4a4:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1c4a6:	68eb      	ldr	r3, [r5, #12]
   1c4a8:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1c4ac:	430e      	orrs	r6, r1
	event->poller = NULL;
   1c4ae:	2000      	movs	r0, #0
	event->state |= state;
   1c4b0:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1c4b4:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1c4b6:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1c4b8:	e00d      	b.n	1c4d6 <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
   1c4ba:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1c4be:	f04f 31ff 	mov.w	r1, #4294967295
   1c4c2:	f06f 0001 	mvn.w	r0, #1
   1c4c6:	428b      	cmp	r3, r1
   1c4c8:	bf08      	it	eq
   1c4ca:	4282      	cmpeq	r2, r0
   1c4cc:	d105      	bne.n	1c4da <signal_poll_event+0x76>
		poller->is_polling = false;
   1c4ce:	2300      	movs	r3, #0
   1c4d0:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1c4d2:	f06f 000a 	mvn.w	r0, #10
}
   1c4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   1c4da:	4638      	mov	r0, r7
   1c4dc:	f7fe fa70 	bl	1a9c0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1c4e0:	2e08      	cmp	r6, #8
   1c4e2:	bf0c      	ite	eq
   1c4e4:	f06f 0303 	mvneq.w	r3, #3
   1c4e8:	2300      	movne	r3, #0
   1c4ea:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1c4ec:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1c4f0:	06db      	lsls	r3, r3, #27
   1c4f2:	d104      	bne.n	1c4fe <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
   1c4f4:	f854 8c48 	ldr.w	r8, [r4, #-72]
   1c4f8:	f1b8 0f00 	cmp.w	r8, #0
   1c4fc:	d001      	beq.n	1c502 <signal_poll_event+0x9e>
		poller->is_polling = false;
   1c4fe:	2300      	movs	r3, #0
   1c500:	e7d0      	b.n	1c4a4 <signal_poll_event+0x40>
	z_ready_thread(thread);
   1c502:	4638      	mov	r0, r7
   1c504:	f7fe fc00 	bl	1ad08 <z_ready_thread>
		poller->is_polling = false;
   1c508:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1c50c:	e7cb      	b.n	1c4a6 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
   1c50e:	2b02      	cmp	r3, #2
   1c510:	d1f5      	bne.n	1c4fe <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1c512:	7823      	ldrb	r3, [r4, #0]
   1c514:	2b00      	cmp	r3, #0
   1c516:	d0c6      	beq.n	1c4a6 <signal_poll_event+0x42>
   1c518:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1c51c:	b177      	cbz	r7, 1c53c <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   1c51e:	f1a4 0914 	sub.w	r9, r4, #20
   1c522:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
   1c526:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1c52a:	f7ff fba9 	bl	1bc80 <z_abort_timeout>
		twork->poll_result = 0;
   1c52e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1c532:	4649      	mov	r1, r9
   1c534:	4638      	mov	r0, r7
   1c536:	f7fd fdcd 	bl	1a0d4 <k_work_submit_to_queue>
   1c53a:	e7e5      	b.n	1c508 <signal_poll_event+0xa4>
		poller->is_polling = false;
   1c53c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1c53e:	e7b2      	b.n	1c4a6 <signal_poll_event+0x42>
   1c540:	000218f9 	.word	0x000218f9
   1c544:	00021a11 	.word	0x00021a11
   1c548:	0001feb5 	.word	0x0001feb5
   1c54c:	00021a27 	.word	0x00021a27

0001c550 <k_poll_event_init>:
{
   1c550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c552:	4605      	mov	r5, r0
   1c554:	460f      	mov	r7, r1
   1c556:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1c558:	4614      	mov	r4, r2
   1c55a:	b162      	cbz	r2, 1c576 <k_poll_event_init+0x26>
   1c55c:	491b      	ldr	r1, [pc, #108]	; (1c5cc <k_poll_event_init+0x7c>)
   1c55e:	4a1c      	ldr	r2, [pc, #112]	; (1c5d0 <k_poll_event_init+0x80>)
   1c560:	481c      	ldr	r0, [pc, #112]	; (1c5d4 <k_poll_event_init+0x84>)
   1c562:	232d      	movs	r3, #45	; 0x2d
   1c564:	f000 fa1d 	bl	1c9a2 <printk>
   1c568:	481b      	ldr	r0, [pc, #108]	; (1c5d8 <k_poll_event_init+0x88>)
   1c56a:	f000 fa1a 	bl	1c9a2 <printk>
   1c56e:	4818      	ldr	r0, [pc, #96]	; (1c5d0 <k_poll_event_init+0x80>)
   1c570:	212d      	movs	r1, #45	; 0x2d
   1c572:	f000 fc70 	bl	1ce56 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1c576:	2f1f      	cmp	r7, #31
   1c578:	d90c      	bls.n	1c594 <k_poll_event_init+0x44>
   1c57a:	4918      	ldr	r1, [pc, #96]	; (1c5dc <k_poll_event_init+0x8c>)
   1c57c:	4a14      	ldr	r2, [pc, #80]	; (1c5d0 <k_poll_event_init+0x80>)
   1c57e:	4815      	ldr	r0, [pc, #84]	; (1c5d4 <k_poll_event_init+0x84>)
   1c580:	232f      	movs	r3, #47	; 0x2f
   1c582:	f000 fa0e 	bl	1c9a2 <printk>
   1c586:	4816      	ldr	r0, [pc, #88]	; (1c5e0 <k_poll_event_init+0x90>)
   1c588:	f000 fa0b 	bl	1c9a2 <printk>
   1c58c:	4810      	ldr	r0, [pc, #64]	; (1c5d0 <k_poll_event_init+0x80>)
   1c58e:	212f      	movs	r1, #47	; 0x2f
   1c590:	f000 fc61 	bl	1ce56 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   1c594:	b966      	cbnz	r6, 1c5b0 <k_poll_event_init+0x60>
   1c596:	4913      	ldr	r1, [pc, #76]	; (1c5e4 <k_poll_event_init+0x94>)
   1c598:	4a0d      	ldr	r2, [pc, #52]	; (1c5d0 <k_poll_event_init+0x80>)
   1c59a:	480e      	ldr	r0, [pc, #56]	; (1c5d4 <k_poll_event_init+0x84>)
   1c59c:	2330      	movs	r3, #48	; 0x30
   1c59e:	f000 fa00 	bl	1c9a2 <printk>
   1c5a2:	4811      	ldr	r0, [pc, #68]	; (1c5e8 <k_poll_event_init+0x98>)
   1c5a4:	f000 f9fd 	bl	1c9a2 <printk>
   1c5a8:	4809      	ldr	r0, [pc, #36]	; (1c5d0 <k_poll_event_init+0x80>)
   1c5aa:	2130      	movs	r1, #48	; 0x30
   1c5ac:	f000 fc53 	bl	1ce56 <assert_post_action>
	event->poller = NULL;
   1c5b0:	2300      	movs	r3, #0
	event->type = type;
   1c5b2:	04e4      	lsls	r4, r4, #19
   1c5b4:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   1c5b6:	60ab      	str	r3, [r5, #8]
	event->type = type;
   1c5b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
   1c5bc:	7b2b      	ldrb	r3, [r5, #12]
   1c5be:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   1c5c2:	433c      	orrs	r4, r7
   1c5c4:	431c      	orrs	r4, r3
	event->obj = obj;
   1c5c6:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   1c5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c5cc:	00021a46 	.word	0x00021a46
   1c5d0:	000218f9 	.word	0x000218f9
   1c5d4:	0001feb5 	.word	0x0001feb5
   1c5d8:	00021a66 	.word	0x00021a66
   1c5dc:	00021a8c 	.word	0x00021a8c
   1c5e0:	00021ab0 	.word	0x00021ab0
   1c5e4:	00021ac0 	.word	0x00021ac0
   1c5e8:	00021ad3 	.word	0x00021ad3

0001c5ec <z_impl_k_poll>:
{
   1c5ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1c5f0:	461f      	mov	r7, r3
	struct z_poller *poller = &_current->poller;
   1c5f2:	4b75      	ldr	r3, [pc, #468]	; (1c7c8 <z_impl_k_poll+0x1dc>)
   1c5f4:	689d      	ldr	r5, [r3, #8]
	poller->is_polling = true;
   1c5f6:	2301      	movs	r3, #1
{
   1c5f8:	4604      	mov	r4, r0
   1c5fa:	4688      	mov	r8, r1
   1c5fc:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   1c5fe:	f105 0960 	add.w	r9, r5, #96	; 0x60
	poller->is_polling = true;
   1c602:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   1c606:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
   1c60a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1c60e:	b173      	cbz	r3, 1c62e <z_impl_k_poll+0x42>
   1c610:	496e      	ldr	r1, [pc, #440]	; (1c7cc <z_impl_k_poll+0x1e0>)
   1c612:	4a6f      	ldr	r2, [pc, #444]	; (1c7d0 <z_impl_k_poll+0x1e4>)
   1c614:	486f      	ldr	r0, [pc, #444]	; (1c7d4 <z_impl_k_poll+0x1e8>)
   1c616:	f44f 738d 	mov.w	r3, #282	; 0x11a
   1c61a:	f000 f9c2 	bl	1c9a2 <printk>
   1c61e:	486e      	ldr	r0, [pc, #440]	; (1c7d8 <z_impl_k_poll+0x1ec>)
   1c620:	f000 f9bf 	bl	1c9a2 <printk>
   1c624:	486a      	ldr	r0, [pc, #424]	; (1c7d0 <z_impl_k_poll+0x1e4>)
   1c626:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1c62a:	f000 fc14 	bl	1ce56 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   1c62e:	b974      	cbnz	r4, 1c64e <z_impl_k_poll+0x62>
   1c630:	496a      	ldr	r1, [pc, #424]	; (1c7dc <z_impl_k_poll+0x1f0>)
   1c632:	4a67      	ldr	r2, [pc, #412]	; (1c7d0 <z_impl_k_poll+0x1e4>)
   1c634:	4867      	ldr	r0, [pc, #412]	; (1c7d4 <z_impl_k_poll+0x1e8>)
   1c636:	f240 131b 	movw	r3, #283	; 0x11b
   1c63a:	f000 f9b2 	bl	1c9a2 <printk>
   1c63e:	4868      	ldr	r0, [pc, #416]	; (1c7e0 <z_impl_k_poll+0x1f4>)
   1c640:	f000 f9af 	bl	1c9a2 <printk>
   1c644:	4862      	ldr	r0, [pc, #392]	; (1c7d0 <z_impl_k_poll+0x1e4>)
   1c646:	f240 111b 	movw	r1, #283	; 0x11b
   1c64a:	f000 fc04 	bl	1ce56 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1c64e:	f1b8 0f00 	cmp.w	r8, #0
   1c652:	da0e      	bge.n	1c672 <z_impl_k_poll+0x86>
   1c654:	4963      	ldr	r1, [pc, #396]	; (1c7e4 <z_impl_k_poll+0x1f8>)
   1c656:	4a5e      	ldr	r2, [pc, #376]	; (1c7d0 <z_impl_k_poll+0x1e4>)
   1c658:	485e      	ldr	r0, [pc, #376]	; (1c7d4 <z_impl_k_poll+0x1e8>)
   1c65a:	f44f 738e 	mov.w	r3, #284	; 0x11c
   1c65e:	f000 f9a0 	bl	1c9a2 <printk>
   1c662:	4861      	ldr	r0, [pc, #388]	; (1c7e8 <z_impl_k_poll+0x1fc>)
   1c664:	f000 f99d 	bl	1c9a2 <printk>
   1c668:	4859      	ldr	r0, [pc, #356]	; (1c7d0 <z_impl_k_poll+0x1e4>)
   1c66a:	f44f 718e 	mov.w	r1, #284	; 0x11c
   1c66e:	f000 fbf2 	bl	1ce56 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   1c672:	ea56 0307 	orrs.w	r3, r6, r7
   1c676:	bf0c      	ite	eq
   1c678:	2301      	moveq	r3, #1
   1c67a:	2300      	movne	r3, #0
   1c67c:	4641      	mov	r1, r8
   1c67e:	464a      	mov	r2, r9
   1c680:	4620      	mov	r0, r4
   1c682:	f7ff fdcd 	bl	1c220 <register_events>
   1c686:	4680      	mov	r8, r0
	__asm__ volatile(
   1c688:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c68c:	f3ef 8911 	mrs	r9, BASEPRI
   1c690:	f383 8812 	msr	BASEPRI_MAX, r3
   1c694:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c698:	4854      	ldr	r0, [pc, #336]	; (1c7ec <z_impl_k_poll+0x200>)
   1c69a:	f7fc fea1 	bl	193e0 <z_spin_lock_valid>
   1c69e:	b968      	cbnz	r0, 1c6bc <z_impl_k_poll+0xd0>
   1c6a0:	4a53      	ldr	r2, [pc, #332]	; (1c7f0 <z_impl_k_poll+0x204>)
   1c6a2:	4954      	ldr	r1, [pc, #336]	; (1c7f4 <z_impl_k_poll+0x208>)
   1c6a4:	484b      	ldr	r0, [pc, #300]	; (1c7d4 <z_impl_k_poll+0x1e8>)
   1c6a6:	2381      	movs	r3, #129	; 0x81
   1c6a8:	f000 f97b 	bl	1c9a2 <printk>
   1c6ac:	494f      	ldr	r1, [pc, #316]	; (1c7ec <z_impl_k_poll+0x200>)
   1c6ae:	4852      	ldr	r0, [pc, #328]	; (1c7f8 <z_impl_k_poll+0x20c>)
   1c6b0:	f000 f977 	bl	1c9a2 <printk>
   1c6b4:	484e      	ldr	r0, [pc, #312]	; (1c7f0 <z_impl_k_poll+0x204>)
   1c6b6:	2181      	movs	r1, #129	; 0x81
   1c6b8:	f000 fbcd 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c6bc:	484b      	ldr	r0, [pc, #300]	; (1c7ec <z_impl_k_poll+0x200>)
   1c6be:	f7fc fead 	bl	1941c <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   1c6c2:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   1c6c6:	b9fb      	cbnz	r3, 1c708 <z_impl_k_poll+0x11c>
		clear_event_registrations(events, events_registered, key);
   1c6c8:	4620      	mov	r0, r4
   1c6ca:	464a      	mov	r2, r9
   1c6cc:	4641      	mov	r1, r8
   1c6ce:	f7ff fcd9 	bl	1c084 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c6d2:	4846      	ldr	r0, [pc, #280]	; (1c7ec <z_impl_k_poll+0x200>)
   1c6d4:	f7fc fe92 	bl	193fc <z_spin_unlock_valid>
   1c6d8:	b968      	cbnz	r0, 1c6f6 <z_impl_k_poll+0x10a>
   1c6da:	4a45      	ldr	r2, [pc, #276]	; (1c7f0 <z_impl_k_poll+0x204>)
   1c6dc:	4947      	ldr	r1, [pc, #284]	; (1c7fc <z_impl_k_poll+0x210>)
   1c6de:	483d      	ldr	r0, [pc, #244]	; (1c7d4 <z_impl_k_poll+0x1e8>)
   1c6e0:	23ac      	movs	r3, #172	; 0xac
   1c6e2:	f000 f95e 	bl	1c9a2 <printk>
   1c6e6:	4941      	ldr	r1, [pc, #260]	; (1c7ec <z_impl_k_poll+0x200>)
   1c6e8:	4845      	ldr	r0, [pc, #276]	; (1c800 <z_impl_k_poll+0x214>)
   1c6ea:	f000 f95a 	bl	1c9a2 <printk>
   1c6ee:	4840      	ldr	r0, [pc, #256]	; (1c7f0 <z_impl_k_poll+0x204>)
   1c6f0:	21ac      	movs	r1, #172	; 0xac
   1c6f2:	f000 fbb0 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1c6f6:	f389 8811 	msr	BASEPRI, r9
   1c6fa:	f3bf 8f6f 	isb	sy
		return 0;
   1c6fe:	2500      	movs	r5, #0
}
   1c700:	4628      	mov	r0, r5
   1c702:	b003      	add	sp, #12
   1c704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   1c708:	2300      	movs	r3, #0
   1c70a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c70e:	ea56 0307 	orrs.w	r3, r6, r7
   1c712:	d118      	bne.n	1c746 <z_impl_k_poll+0x15a>
   1c714:	4835      	ldr	r0, [pc, #212]	; (1c7ec <z_impl_k_poll+0x200>)
   1c716:	f7fc fe71 	bl	193fc <z_spin_unlock_valid>
   1c71a:	b968      	cbnz	r0, 1c738 <z_impl_k_poll+0x14c>
   1c71c:	4a34      	ldr	r2, [pc, #208]	; (1c7f0 <z_impl_k_poll+0x204>)
   1c71e:	4937      	ldr	r1, [pc, #220]	; (1c7fc <z_impl_k_poll+0x210>)
   1c720:	482c      	ldr	r0, [pc, #176]	; (1c7d4 <z_impl_k_poll+0x1e8>)
   1c722:	23ac      	movs	r3, #172	; 0xac
   1c724:	f000 f93d 	bl	1c9a2 <printk>
   1c728:	4930      	ldr	r1, [pc, #192]	; (1c7ec <z_impl_k_poll+0x200>)
   1c72a:	4835      	ldr	r0, [pc, #212]	; (1c800 <z_impl_k_poll+0x214>)
   1c72c:	f000 f939 	bl	1c9a2 <printk>
   1c730:	482f      	ldr	r0, [pc, #188]	; (1c7f0 <z_impl_k_poll+0x204>)
   1c732:	21ac      	movs	r1, #172	; 0xac
   1c734:	f000 fb8f 	bl	1ce56 <assert_post_action>
   1c738:	f389 8811 	msr	BASEPRI, r9
   1c73c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c740:	f06f 050a 	mvn.w	r5, #10
   1c744:	e7dc      	b.n	1c700 <z_impl_k_poll+0x114>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c746:	e9cd 6700 	strd	r6, r7, [sp]
   1c74a:	4a2e      	ldr	r2, [pc, #184]	; (1c804 <z_impl_k_poll+0x218>)
   1c74c:	4827      	ldr	r0, [pc, #156]	; (1c7ec <z_impl_k_poll+0x200>)
   1c74e:	4649      	mov	r1, r9
   1c750:	f7fe fc8c 	bl	1b06c <z_pend_curr>
   1c754:	4605      	mov	r5, r0
	__asm__ volatile(
   1c756:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c75a:	f3ef 8611 	mrs	r6, BASEPRI
   1c75e:	f383 8812 	msr	BASEPRI_MAX, r3
   1c762:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c766:	4821      	ldr	r0, [pc, #132]	; (1c7ec <z_impl_k_poll+0x200>)
   1c768:	f7fc fe3a 	bl	193e0 <z_spin_lock_valid>
   1c76c:	b968      	cbnz	r0, 1c78a <z_impl_k_poll+0x19e>
   1c76e:	4a20      	ldr	r2, [pc, #128]	; (1c7f0 <z_impl_k_poll+0x204>)
   1c770:	4920      	ldr	r1, [pc, #128]	; (1c7f4 <z_impl_k_poll+0x208>)
   1c772:	4818      	ldr	r0, [pc, #96]	; (1c7d4 <z_impl_k_poll+0x1e8>)
   1c774:	2381      	movs	r3, #129	; 0x81
   1c776:	f000 f914 	bl	1c9a2 <printk>
   1c77a:	491c      	ldr	r1, [pc, #112]	; (1c7ec <z_impl_k_poll+0x200>)
   1c77c:	481e      	ldr	r0, [pc, #120]	; (1c7f8 <z_impl_k_poll+0x20c>)
   1c77e:	f000 f910 	bl	1c9a2 <printk>
   1c782:	481b      	ldr	r0, [pc, #108]	; (1c7f0 <z_impl_k_poll+0x204>)
   1c784:	2181      	movs	r1, #129	; 0x81
   1c786:	f000 fb66 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c78a:	4818      	ldr	r0, [pc, #96]	; (1c7ec <z_impl_k_poll+0x200>)
   1c78c:	f7fc fe46 	bl	1941c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1c790:	4620      	mov	r0, r4
   1c792:	4632      	mov	r2, r6
   1c794:	4641      	mov	r1, r8
   1c796:	f7ff fc75 	bl	1c084 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c79a:	4814      	ldr	r0, [pc, #80]	; (1c7ec <z_impl_k_poll+0x200>)
   1c79c:	f7fc fe2e 	bl	193fc <z_spin_unlock_valid>
   1c7a0:	b968      	cbnz	r0, 1c7be <z_impl_k_poll+0x1d2>
   1c7a2:	4a13      	ldr	r2, [pc, #76]	; (1c7f0 <z_impl_k_poll+0x204>)
   1c7a4:	4915      	ldr	r1, [pc, #84]	; (1c7fc <z_impl_k_poll+0x210>)
   1c7a6:	480b      	ldr	r0, [pc, #44]	; (1c7d4 <z_impl_k_poll+0x1e8>)
   1c7a8:	23ac      	movs	r3, #172	; 0xac
   1c7aa:	f000 f8fa 	bl	1c9a2 <printk>
   1c7ae:	490f      	ldr	r1, [pc, #60]	; (1c7ec <z_impl_k_poll+0x200>)
   1c7b0:	4813      	ldr	r0, [pc, #76]	; (1c800 <z_impl_k_poll+0x214>)
   1c7b2:	f000 f8f6 	bl	1c9a2 <printk>
   1c7b6:	480e      	ldr	r0, [pc, #56]	; (1c7f0 <z_impl_k_poll+0x204>)
   1c7b8:	21ac      	movs	r1, #172	; 0xac
   1c7ba:	f000 fb4c 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1c7be:	f386 8811 	msr	BASEPRI, r6
   1c7c2:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1c7c6:	e79b      	b.n	1c700 <z_impl_k_poll+0x114>
   1c7c8:	20001eb4 	.word	0x20001eb4
   1c7cc:	000214d9 	.word	0x000214d9
   1c7d0:	000218f9 	.word	0x000218f9
   1c7d4:	0001feb5 	.word	0x0001feb5
   1c7d8:	00020d40 	.word	0x00020d40
   1c7dc:	00021aed 	.word	0x00021aed
   1c7e0:	00021b03 	.word	0x00021b03
   1c7e4:	00021b12 	.word	0x00021b12
   1c7e8:	00021b22 	.word	0x00021b22
   1c7ec:	20001f08 	.word	0x20001f08
   1c7f0:	0001ff75 	.word	0x0001ff75
   1c7f4:	0001ffc7 	.word	0x0001ffc7
   1c7f8:	0001ffdc 	.word	0x0001ffdc
   1c7fc:	0001ff9b 	.word	0x0001ff9b
   1c800:	0001ffb2 	.word	0x0001ffb2
   1c804:	20000500 	.word	0x20000500

0001c808 <z_impl_k_poll_signal_raise>:
{
   1c808:	b570      	push	{r4, r5, r6, lr}
   1c80a:	4604      	mov	r4, r0
   1c80c:	460d      	mov	r5, r1
	__asm__ volatile(
   1c80e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c812:	f3ef 8611 	mrs	r6, BASEPRI
   1c816:	f383 8812 	msr	BASEPRI_MAX, r3
   1c81a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c81e:	4821      	ldr	r0, [pc, #132]	; (1c8a4 <z_impl_k_poll_signal_raise+0x9c>)
   1c820:	f7fc fdde 	bl	193e0 <z_spin_lock_valid>
   1c824:	b968      	cbnz	r0, 1c842 <z_impl_k_poll_signal_raise+0x3a>
   1c826:	4a20      	ldr	r2, [pc, #128]	; (1c8a8 <z_impl_k_poll_signal_raise+0xa0>)
   1c828:	4920      	ldr	r1, [pc, #128]	; (1c8ac <z_impl_k_poll_signal_raise+0xa4>)
   1c82a:	4821      	ldr	r0, [pc, #132]	; (1c8b0 <z_impl_k_poll_signal_raise+0xa8>)
   1c82c:	2381      	movs	r3, #129	; 0x81
   1c82e:	f000 f8b8 	bl	1c9a2 <printk>
   1c832:	491c      	ldr	r1, [pc, #112]	; (1c8a4 <z_impl_k_poll_signal_raise+0x9c>)
   1c834:	481f      	ldr	r0, [pc, #124]	; (1c8b4 <z_impl_k_poll_signal_raise+0xac>)
   1c836:	f000 f8b4 	bl	1c9a2 <printk>
   1c83a:	481b      	ldr	r0, [pc, #108]	; (1c8a8 <z_impl_k_poll_signal_raise+0xa0>)
   1c83c:	2181      	movs	r1, #129	; 0x81
   1c83e:	f000 fb0a 	bl	1ce56 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c842:	4818      	ldr	r0, [pc, #96]	; (1c8a4 <z_impl_k_poll_signal_raise+0x9c>)
   1c844:	f7fc fdea 	bl	1941c <z_spin_lock_set_owner>
	return list->head == list;
   1c848:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   1c84a:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   1c84c:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c84e:	4284      	cmp	r4, r0
   1c850:	60a1      	str	r1, [r4, #8]
   1c852:	d117      	bne.n	1c884 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c854:	4813      	ldr	r0, [pc, #76]	; (1c8a4 <z_impl_k_poll_signal_raise+0x9c>)
   1c856:	f7fc fdd1 	bl	193fc <z_spin_unlock_valid>
   1c85a:	b968      	cbnz	r0, 1c878 <z_impl_k_poll_signal_raise+0x70>
   1c85c:	4a12      	ldr	r2, [pc, #72]	; (1c8a8 <z_impl_k_poll_signal_raise+0xa0>)
   1c85e:	4916      	ldr	r1, [pc, #88]	; (1c8b8 <z_impl_k_poll_signal_raise+0xb0>)
   1c860:	4813      	ldr	r0, [pc, #76]	; (1c8b0 <z_impl_k_poll_signal_raise+0xa8>)
   1c862:	23ac      	movs	r3, #172	; 0xac
   1c864:	f000 f89d 	bl	1c9a2 <printk>
   1c868:	490e      	ldr	r1, [pc, #56]	; (1c8a4 <z_impl_k_poll_signal_raise+0x9c>)
   1c86a:	4814      	ldr	r0, [pc, #80]	; (1c8bc <z_impl_k_poll_signal_raise+0xb4>)
   1c86c:	f000 f899 	bl	1c9a2 <printk>
   1c870:	480d      	ldr	r0, [pc, #52]	; (1c8a8 <z_impl_k_poll_signal_raise+0xa0>)
   1c872:	21ac      	movs	r1, #172	; 0xac
   1c874:	f000 faef 	bl	1ce56 <assert_post_action>
	__asm__ volatile(
   1c878:	f386 8811 	msr	BASEPRI, r6
   1c87c:	f3bf 8f6f 	isb	sy
		return 0;
   1c880:	2400      	movs	r4, #0
   1c882:	e00d      	b.n	1c8a0 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
   1c884:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1c888:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c88a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c88c:	2300      	movs	r3, #0
	node->prev = NULL;
   1c88e:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c892:	f7ff fde7 	bl	1c464 <signal_poll_event>
	z_reschedule(&lock, key);
   1c896:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c898:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1c89a:	4802      	ldr	r0, [pc, #8]	; (1c8a4 <z_impl_k_poll_signal_raise+0x9c>)
   1c89c:	f7fd ff94 	bl	1a7c8 <z_reschedule>
}
   1c8a0:	4620      	mov	r0, r4
   1c8a2:	bd70      	pop	{r4, r5, r6, pc}
   1c8a4:	20001f08 	.word	0x20001f08
   1c8a8:	0001ff75 	.word	0x0001ff75
   1c8ac:	0001ffc7 	.word	0x0001ffc7
   1c8b0:	0001feb5 	.word	0x0001feb5
   1c8b4:	0001ffdc 	.word	0x0001ffdc
   1c8b8:	0001ff9b 	.word	0x0001ff9b
   1c8bc:	0001ffb2 	.word	0x0001ffb2

0001c8c0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1c8c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c8c2:	4606      	mov	r6, r0
   1c8c4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1c8c6:	f002 fd06 	bl	1f2d6 <k_is_in_isr>
   1c8ca:	b980      	cbnz	r0, 1c8ee <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1c8cc:	4b15      	ldr	r3, [pc, #84]	; (1c924 <z_thread_aligned_alloc+0x64>)
   1c8ce:	689b      	ldr	r3, [r3, #8]
   1c8d0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1c8d2:	b31c      	cbz	r4, 1c91c <z_thread_aligned_alloc+0x5c>
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   1c8d4:	2204      	movs	r2, #4
   1c8d6:	18aa      	adds	r2, r5, r2
   1c8d8:	d209      	bcs.n	1c8ee <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1c8da:	2000      	movs	r0, #0
   1c8dc:	2100      	movs	r1, #0
   1c8de:	e9cd 0100 	strd	r0, r1, [sp]
   1c8e2:	f046 0104 	orr.w	r1, r6, #4
   1c8e6:	4620      	mov	r0, r4
   1c8e8:	f7fc fa2a 	bl	18d40 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1c8ec:	b908      	cbnz	r0, 1c8f2 <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1c8ee:	2400      	movs	r4, #0
	}

	return ret;
   1c8f0:	e014      	b.n	1c91c <z_thread_aligned_alloc+0x5c>
	*heap_ref = heap;
   1c8f2:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1c8f4:	1d04      	adds	r4, r0, #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   1c8f6:	b18e      	cbz	r6, 1c91c <z_thread_aligned_alloc+0x5c>
   1c8f8:	1e73      	subs	r3, r6, #1
   1c8fa:	421c      	tst	r4, r3
   1c8fc:	d00e      	beq.n	1c91c <z_thread_aligned_alloc+0x5c>
   1c8fe:	4a0a      	ldr	r2, [pc, #40]	; (1c928 <z_thread_aligned_alloc+0x68>)
   1c900:	490a      	ldr	r1, [pc, #40]	; (1c92c <z_thread_aligned_alloc+0x6c>)
   1c902:	480b      	ldr	r0, [pc, #44]	; (1c930 <z_thread_aligned_alloc+0x70>)
   1c904:	2325      	movs	r3, #37	; 0x25
   1c906:	f000 f84c 	bl	1c9a2 <printk>
   1c90a:	480a      	ldr	r0, [pc, #40]	; (1c934 <z_thread_aligned_alloc+0x74>)
   1c90c:	4621      	mov	r1, r4
   1c90e:	4632      	mov	r2, r6
   1c910:	f000 f847 	bl	1c9a2 <printk>
   1c914:	4804      	ldr	r0, [pc, #16]	; (1c928 <z_thread_aligned_alloc+0x68>)
   1c916:	2125      	movs	r1, #37	; 0x25
   1c918:	f000 fa9d 	bl	1ce56 <assert_post_action>
}
   1c91c:	4620      	mov	r0, r4
   1c91e:	b002      	add	sp, #8
   1c920:	bd70      	pop	{r4, r5, r6, pc}
   1c922:	bf00      	nop
   1c924:	20001eb4 	.word	0x20001eb4
   1c928:	00021b2f 	.word	0x00021b2f
   1c92c:	00021b53 	.word	0x00021b53
   1c930:	0001feb5 	.word	0x0001feb5
   1c934:	00021b85 	.word	0x00021b85

0001c938 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1c938:	4a02      	ldr	r2, [pc, #8]	; (1c944 <boot_banner+0xc>)
   1c93a:	4903      	ldr	r1, [pc, #12]	; (1c948 <boot_banner+0x10>)
   1c93c:	4803      	ldr	r0, [pc, #12]	; (1c94c <boot_banner+0x14>)
   1c93e:	f000 b830 	b.w	1c9a2 <printk>
   1c942:	bf00      	nop
   1c944:	00020d42 	.word	0x00020d42
   1c948:	00021bad 	.word	0x00021bad
   1c94c:	00021bb9 	.word	0x00021bb9

0001c950 <sys_notify_validate>:
	if (notify == NULL) {
   1c950:	4603      	mov	r3, r0
   1c952:	b140      	cbz	r0, 1c966 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c954:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c956:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1c95a:	2a02      	cmp	r2, #2
   1c95c:	d006      	beq.n	1c96c <sys_notify_validate+0x1c>
   1c95e:	2a03      	cmp	r2, #3
   1c960:	d004      	beq.n	1c96c <sys_notify_validate+0x1c>
   1c962:	2a01      	cmp	r2, #1
   1c964:	d005      	beq.n	1c972 <sys_notify_validate+0x22>
		return -EINVAL;
   1c966:	f06f 0015 	mvn.w	r0, #21
}
   1c96a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1c96c:	681a      	ldr	r2, [r3, #0]
   1c96e:	2a00      	cmp	r2, #0
   1c970:	d0f9      	beq.n	1c966 <sys_notify_validate+0x16>
		notify->result = 0;
   1c972:	2000      	movs	r0, #0
   1c974:	6098      	str	r0, [r3, #8]
   1c976:	4770      	bx	lr

0001c978 <arch_printk_char_out>:
}
   1c978:	2000      	movs	r0, #0
   1c97a:	4770      	bx	lr

0001c97c <str_out>:
{
   1c97c:	b530      	push	{r4, r5, lr}
   1c97e:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c980:	680c      	ldr	r4, [r1, #0]
   1c982:	1c55      	adds	r5, r2, #1
   1c984:	b114      	cbz	r4, 1c98c <str_out+0x10>
   1c986:	684b      	ldr	r3, [r1, #4]
   1c988:	4293      	cmp	r3, r2
   1c98a:	dc01      	bgt.n	1c990 <str_out+0x14>
		ctx->count++;
   1c98c:	608d      	str	r5, [r1, #8]
}
   1c98e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1c990:	3b01      	subs	r3, #1
   1c992:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1c994:	bf08      	it	eq
   1c996:	2200      	moveq	r2, #0
   1c998:	608d      	str	r5, [r1, #8]
   1c99a:	bf0c      	ite	eq
   1c99c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1c99e:	54a0      	strbne	r0, [r4, r2]
   1c9a0:	e7f5      	b.n	1c98e <str_out+0x12>

0001c9a2 <printk>:
{
   1c9a2:	b40f      	push	{r0, r1, r2, r3}
   1c9a4:	b507      	push	{r0, r1, r2, lr}
   1c9a6:	a904      	add	r1, sp, #16
   1c9a8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1c9ac:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1c9ae:	f7f3 f8a7 	bl	fb00 <vprintk>
}
   1c9b2:	b003      	add	sp, #12
   1c9b4:	f85d eb04 	ldr.w	lr, [sp], #4
   1c9b8:	b004      	add	sp, #16
   1c9ba:	4770      	bx	lr

0001c9bc <snprintk>:
{
   1c9bc:	b40c      	push	{r2, r3}
   1c9be:	b507      	push	{r0, r1, r2, lr}
   1c9c0:	ab04      	add	r3, sp, #16
   1c9c2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1c9c6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1c9c8:	f7f3 f8a8 	bl	fb1c <vsnprintk>
}
   1c9cc:	b003      	add	sp, #12
   1c9ce:	f85d eb04 	ldr.w	lr, [sp], #4
   1c9d2:	b002      	add	sp, #8
   1c9d4:	4770      	bx	lr

0001c9d6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c9d6:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1c9d8:	f013 0307 	ands.w	r3, r3, #7
   1c9dc:	d105      	bne.n	1c9ea <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1c9de:	6803      	ldr	r3, [r0, #0]
   1c9e0:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1c9e2:	bf0c      	ite	eq
   1c9e4:	2000      	moveq	r0, #0
   1c9e6:	2003      	movne	r0, #3
   1c9e8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1c9ea:	2b02      	cmp	r3, #2
   1c9ec:	d105      	bne.n	1c9fa <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1c9ee:	8bc3      	ldrh	r3, [r0, #30]
   1c9f0:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1c9f2:	bf14      	ite	ne
   1c9f4:	2000      	movne	r0, #0
   1c9f6:	2004      	moveq	r0, #4
   1c9f8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1c9fa:	2b01      	cmp	r3, #1
   1c9fc:	d105      	bne.n	1ca0a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1c9fe:	6803      	ldr	r3, [r0, #0]
   1ca00:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1ca02:	bf0c      	ite	eq
   1ca04:	2000      	moveq	r0, #0
   1ca06:	2005      	movne	r0, #5
   1ca08:	4770      	bx	lr
	int evt = EVT_NOP;
   1ca0a:	2000      	movs	r0, #0
}
   1ca0c:	4770      	bx	lr

0001ca0e <notify_one>:
{
   1ca0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca12:	460d      	mov	r5, r1
   1ca14:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1ca16:	4619      	mov	r1, r3
   1ca18:	1d28      	adds	r0, r5, #4
{
   1ca1a:	4690      	mov	r8, r2
   1ca1c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1ca1e:	f7f3 f831 	bl	fa84 <sys_notify_finalize>
	if (cb) {
   1ca22:	4604      	mov	r4, r0
   1ca24:	b138      	cbz	r0, 1ca36 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1ca26:	4633      	mov	r3, r6
   1ca28:	4642      	mov	r2, r8
   1ca2a:	4629      	mov	r1, r5
   1ca2c:	4638      	mov	r0, r7
   1ca2e:	46a4      	mov	ip, r4
}
   1ca30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1ca34:	4760      	bx	ip
}
   1ca36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ca3a <validate_args>:
{
   1ca3a:	b510      	push	{r4, lr}
   1ca3c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1ca3e:	b140      	cbz	r0, 1ca52 <validate_args+0x18>
   1ca40:	b139      	cbz	r1, 1ca52 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1ca42:	1d08      	adds	r0, r1, #4
   1ca44:	f7ff ff84 	bl	1c950 <sys_notify_validate>
	if ((rv == 0)
   1ca48:	b928      	cbnz	r0, 1ca56 <validate_args+0x1c>
	    && ((cli->notify.flags
   1ca4a:	68a3      	ldr	r3, [r4, #8]
   1ca4c:	f033 0303 	bics.w	r3, r3, #3
   1ca50:	d001      	beq.n	1ca56 <validate_args+0x1c>
		rv = -EINVAL;
   1ca52:	f06f 0015 	mvn.w	r0, #21
}
   1ca56:	bd10      	pop	{r4, pc}

0001ca58 <onoff_manager_init>:
{
   1ca58:	b538      	push	{r3, r4, r5, lr}
   1ca5a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1ca5c:	4605      	mov	r5, r0
   1ca5e:	b158      	cbz	r0, 1ca78 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1ca60:	b151      	cbz	r1, 1ca78 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1ca62:	680b      	ldr	r3, [r1, #0]
   1ca64:	b143      	cbz	r3, 1ca78 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1ca66:	684b      	ldr	r3, [r1, #4]
   1ca68:	b133      	cbz	r3, 1ca78 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1ca6a:	2220      	movs	r2, #32
   1ca6c:	2100      	movs	r1, #0
   1ca6e:	f002 fdae 	bl	1f5ce <memset>
   1ca72:	612c      	str	r4, [r5, #16]
	return 0;
   1ca74:	2000      	movs	r0, #0
}
   1ca76:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1ca78:	f06f 0015 	mvn.w	r0, #21
   1ca7c:	e7fb      	b.n	1ca76 <onoff_manager_init+0x1e>

0001ca7e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1ca7e:	4604      	mov	r4, r0
   1ca80:	b508      	push	{r3, lr}
   1ca82:	4608      	mov	r0, r1
   1ca84:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1ca86:	461a      	mov	r2, r3
   1ca88:	47a0      	blx	r4
	return z_impl_z_current_get();
   1ca8a:	f7fe fe87 	bl	1b79c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1ca8e:	f7f4 ff65 	bl	1195c <z_impl_k_thread_abort>

0001ca92 <chunk_field>:
	if (big_heap(h)) {
   1ca92:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1ca94:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1ca98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1ca9c:	bf2c      	ite	cs
   1ca9e:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   1caa2:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   1caa6:	4770      	bx	lr

0001caa8 <chunk_set>:
	void *cmem = &buf[c];
   1caa8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1caac:	6880      	ldr	r0, [r0, #8]
   1caae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   1cab2:	bf2c      	ite	cs
   1cab4:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1cab8:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   1cabc:	4770      	bx	lr

0001cabe <chunk_size>:
{
   1cabe:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1cac0:	2201      	movs	r2, #1
   1cac2:	f7ff ffe6 	bl	1ca92 <chunk_field>
}
   1cac6:	0840      	lsrs	r0, r0, #1
   1cac8:	bd08      	pop	{r3, pc}

0001caca <set_chunk_used>:
	if (big_heap(h)) {
   1caca:	6883      	ldr	r3, [r0, #8]
   1cacc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1cad0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1cad4:	d308      	bcc.n	1cae8 <set_chunk_used+0x1e>
		if (used) {
   1cad6:	684b      	ldr	r3, [r1, #4]
   1cad8:	b11a      	cbz	r2, 1cae2 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1cada:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1cade:	604b      	str	r3, [r1, #4]
   1cae0:	4770      	bx	lr
   1cae2:	f023 0301 	bic.w	r3, r3, #1
   1cae6:	e7fa      	b.n	1cade <set_chunk_used+0x14>
		if (used) {
   1cae8:	884b      	ldrh	r3, [r1, #2]
   1caea:	b11a      	cbz	r2, 1caf4 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1caec:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1caf0:	804b      	strh	r3, [r1, #2]
}
   1caf2:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1caf4:	f023 0301 	bic.w	r3, r3, #1
   1caf8:	e7fa      	b.n	1caf0 <set_chunk_used+0x26>

0001cafa <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1cafa:	0053      	lsls	r3, r2, #1
   1cafc:	2201      	movs	r2, #1
   1cafe:	f7ff bfd3 	b.w	1caa8 <chunk_set>

0001cb02 <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   1cb02:	6883      	ldr	r3, [r0, #8]
   1cb04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cb08:	bf2c      	ite	cs
   1cb0a:	2008      	movcs	r0, #8
   1cb0c:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1cb0e:	3107      	adds	r1, #7
   1cb10:	4408      	add	r0, r1
}
   1cb12:	08c0      	lsrs	r0, r0, #3
   1cb14:	4770      	bx	lr

0001cb16 <bucket_idx>:
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
   1cb16:	460a      	mov	r2, r1
   1cb18:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   1cb1a:	2101      	movs	r1, #1
   1cb1c:	f7ff fff1 	bl	1cb02 <bytes_to_chunksz>
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1cb20:	3201      	adds	r2, #1
   1cb22:	1a12      	subs	r2, r2, r0
	return 31 - __builtin_clz(usable_sz);
   1cb24:	fab2 f082 	clz	r0, r2
}
   1cb28:	f1c0 001f 	rsb	r0, r0, #31
   1cb2c:	bd08      	pop	{r3, pc}

0001cb2e <merge_chunks>:
{
   1cb2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb32:	4616      	mov	r6, r2
   1cb34:	4604      	mov	r4, r0
   1cb36:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1cb38:	f7ff ffc1 	bl	1cabe <chunk_size>
   1cb3c:	4631      	mov	r1, r6
   1cb3e:	4605      	mov	r5, r0
   1cb40:	4620      	mov	r0, r4
   1cb42:	f7ff ffbc 	bl	1cabe <chunk_size>
   1cb46:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1cb48:	462a      	mov	r2, r5
   1cb4a:	4639      	mov	r1, r7
   1cb4c:	4620      	mov	r0, r4
   1cb4e:	f7ff ffd4 	bl	1cafa <set_chunk_size>
	return c + chunk_size(h, c);
   1cb52:	4631      	mov	r1, r6
   1cb54:	4620      	mov	r0, r4
   1cb56:	f7ff ffb2 	bl	1cabe <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1cb5a:	462b      	mov	r3, r5
   1cb5c:	1831      	adds	r1, r6, r0
   1cb5e:	2200      	movs	r2, #0
   1cb60:	4620      	mov	r0, r4
}
   1cb62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cb66:	f7ff bf9f 	b.w	1caa8 <chunk_set>

0001cb6a <split_chunks>:
{
   1cb6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb6e:	4614      	mov	r4, r2
   1cb70:	4605      	mov	r5, r0
   1cb72:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1cb74:	f7ff ffa3 	bl	1cabe <chunk_size>
	chunksz_t lsz = rc - lc;
   1cb78:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   1cb7c:	1b37      	subs	r7, r6, r4
   1cb7e:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1cb80:	4642      	mov	r2, r8
   1cb82:	4631      	mov	r1, r6
   1cb84:	4628      	mov	r0, r5
   1cb86:	f7ff ffb8 	bl	1cafa <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1cb8a:	463a      	mov	r2, r7
   1cb8c:	4621      	mov	r1, r4
   1cb8e:	4628      	mov	r0, r5
   1cb90:	f7ff ffb3 	bl	1cafa <set_chunk_size>
   1cb94:	4643      	mov	r3, r8
   1cb96:	2200      	movs	r2, #0
   1cb98:	4621      	mov	r1, r4
   1cb9a:	4628      	mov	r0, r5
   1cb9c:	f7ff ff84 	bl	1caa8 <chunk_set>
	return c + chunk_size(h, c);
   1cba0:	4621      	mov	r1, r4
   1cba2:	4628      	mov	r0, r5
   1cba4:	f7ff ff8b 	bl	1cabe <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1cba8:	463b      	mov	r3, r7
   1cbaa:	1821      	adds	r1, r4, r0
   1cbac:	2200      	movs	r2, #0
   1cbae:	4628      	mov	r0, r5
}
   1cbb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cbb4:	f7ff bf78 	b.w	1caa8 <chunk_set>

0001cbb8 <free_list_remove_bidx>:
{
   1cbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cbbc:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1cbbe:	2203      	movs	r2, #3
   1cbc0:	460e      	mov	r6, r1
   1cbc2:	4604      	mov	r4, r0
   1cbc4:	f7ff ff65 	bl	1ca92 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1cbc8:	4286      	cmp	r6, r0
   1cbca:	4605      	mov	r5, r0
   1cbcc:	f107 0804 	add.w	r8, r7, #4
   1cbd0:	d10b      	bne.n	1cbea <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1cbd2:	2301      	movs	r3, #1
   1cbd4:	fa03 f707 	lsl.w	r7, r3, r7
   1cbd8:	68e3      	ldr	r3, [r4, #12]
   1cbda:	ea23 0307 	bic.w	r3, r3, r7
   1cbde:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1cbe0:	2300      	movs	r3, #0
   1cbe2:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1cbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1cbea:	4631      	mov	r1, r6
   1cbec:	2202      	movs	r2, #2
   1cbee:	4620      	mov	r0, r4
   1cbf0:	f7ff ff4f 	bl	1ca92 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1cbf4:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1cbf6:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1cbf8:	4601      	mov	r1, r0
		b->next = second;
   1cbfa:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1cbfe:	4620      	mov	r0, r4
   1cc00:	2203      	movs	r2, #3
   1cc02:	f7ff ff51 	bl	1caa8 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1cc06:	4633      	mov	r3, r6
   1cc08:	4629      	mov	r1, r5
   1cc0a:	4620      	mov	r0, r4
   1cc0c:	2202      	movs	r2, #2
}
   1cc0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cc12:	f7ff bf49 	b.w	1caa8 <chunk_set>

0001cc16 <alloc_chunk>:
{
   1cc16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cc1a:	4605      	mov	r5, r0
   1cc1c:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1cc1e:	f7ff ff7a 	bl	1cb16 <bucket_idx>
   1cc22:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   1cc26:	4606      	mov	r6, r0
	if (b->next) {
   1cc28:	f8da 9010 	ldr.w	r9, [sl, #16]
   1cc2c:	f1b9 0f00 	cmp.w	r9, #0
   1cc30:	d01b      	beq.n	1cc6a <alloc_chunk+0x54>
   1cc32:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1cc34:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1cc38:	4628      	mov	r0, r5
   1cc3a:	4621      	mov	r1, r4
   1cc3c:	f7ff ff3f 	bl	1cabe <chunk_size>
   1cc40:	4540      	cmp	r0, r8
   1cc42:	d307      	bcc.n	1cc54 <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   1cc44:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
   1cc46:	4621      	mov	r1, r4
   1cc48:	4628      	mov	r0, r5
   1cc4a:	f7ff ffb5 	bl	1cbb8 <free_list_remove_bidx>
}
   1cc4e:	4620      	mov	r0, r4
   1cc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   1cc54:	2203      	movs	r2, #3
   1cc56:	4621      	mov	r1, r4
   1cc58:	4628      	mov	r0, r5
   1cc5a:	f7ff ff1a 	bl	1ca92 <chunk_field>
		} while (--i && b->next != first);
   1cc5e:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1cc60:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1cc64:	d001      	beq.n	1cc6a <alloc_chunk+0x54>
   1cc66:	4581      	cmp	r9, r0
   1cc68:	d1e4      	bne.n	1cc34 <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1cc6a:	68e9      	ldr	r1, [r5, #12]
   1cc6c:	3601      	adds	r6, #1
   1cc6e:	f04f 34ff 	mov.w	r4, #4294967295
   1cc72:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   1cc74:	400c      	ands	r4, r1
   1cc76:	d0ea      	beq.n	1cc4e <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   1cc78:	fa94 f2a4 	rbit	r2, r4
   1cc7c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1cc80:	1d13      	adds	r3, r2, #4
   1cc82:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   1cc86:	e7de      	b.n	1cc46 <alloc_chunk+0x30>

0001cc88 <free_list_add>:
{
   1cc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc8c:	4604      	mov	r4, r0
   1cc8e:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1cc90:	f7ff ff15 	bl	1cabe <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1cc94:	68a3      	ldr	r3, [r4, #8]
   1cc96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cc9a:	4601      	mov	r1, r0
   1cc9c:	d301      	bcc.n	1cca2 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1cc9e:	2801      	cmp	r0, #1
   1cca0:	d035      	beq.n	1cd0e <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1cca2:	4620      	mov	r0, r4
   1cca4:	f7ff ff37 	bl	1cb16 <bucket_idx>
	if (b->next == 0U) {
   1cca8:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1ccac:	6916      	ldr	r6, [r2, #16]
   1ccae:	b99e      	cbnz	r6, 1ccd8 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1ccb0:	2301      	movs	r3, #1
   1ccb2:	fa03 f000 	lsl.w	r0, r3, r0
   1ccb6:	68e3      	ldr	r3, [r4, #12]
   1ccb8:	4303      	orrs	r3, r0
   1ccba:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1ccbc:	4629      	mov	r1, r5
		b->next = c;
   1ccbe:	6115      	str	r5, [r2, #16]
   1ccc0:	462b      	mov	r3, r5
   1ccc2:	2202      	movs	r2, #2
   1ccc4:	4620      	mov	r0, r4
   1ccc6:	f7ff feef 	bl	1caa8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1ccca:	2203      	movs	r2, #3
   1cccc:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1ccce:	4620      	mov	r0, r4
}
   1ccd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ccd4:	f7ff bee8 	b.w	1caa8 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1ccd8:	2202      	movs	r2, #2
   1ccda:	4631      	mov	r1, r6
   1ccdc:	4620      	mov	r0, r4
   1ccde:	f7ff fed8 	bl	1ca92 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1cce2:	2202      	movs	r2, #2
   1cce4:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1cce6:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1cce8:	4629      	mov	r1, r5
   1ccea:	4620      	mov	r0, r4
   1ccec:	f7ff fedc 	bl	1caa8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1ccf0:	4633      	mov	r3, r6
   1ccf2:	2203      	movs	r2, #3
   1ccf4:	4629      	mov	r1, r5
   1ccf6:	4620      	mov	r0, r4
   1ccf8:	f7ff fed6 	bl	1caa8 <chunk_set>
   1ccfc:	2203      	movs	r2, #3
   1ccfe:	4639      	mov	r1, r7
   1cd00:	462b      	mov	r3, r5
   1cd02:	4620      	mov	r0, r4
   1cd04:	f7ff fed0 	bl	1caa8 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1cd08:	2202      	movs	r2, #2
   1cd0a:	4631      	mov	r1, r6
   1cd0c:	e7df      	b.n	1ccce <free_list_add+0x46>
   1cd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cd12 <free_list_remove>:
{
   1cd12:	b538      	push	{r3, r4, r5, lr}
   1cd14:	4604      	mov	r4, r0
   1cd16:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1cd18:	f7ff fed1 	bl	1cabe <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1cd1c:	68a3      	ldr	r3, [r4, #8]
   1cd1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cd22:	4601      	mov	r1, r0
   1cd24:	d301      	bcc.n	1cd2a <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1cd26:	2801      	cmp	r0, #1
   1cd28:	d009      	beq.n	1cd3e <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1cd2a:	4620      	mov	r0, r4
   1cd2c:	f7ff fef3 	bl	1cb16 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1cd30:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1cd32:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1cd34:	4620      	mov	r0, r4
}
   1cd36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1cd3a:	f7ff bf3d 	b.w	1cbb8 <free_list_remove_bidx>
}
   1cd3e:	bd38      	pop	{r3, r4, r5, pc}

0001cd40 <free_chunk>:
{
   1cd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd42:	460c      	mov	r4, r1
   1cd44:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1cd46:	f7ff feba 	bl	1cabe <chunk_size>
   1cd4a:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1cd4c:	2201      	movs	r2, #1
   1cd4e:	4631      	mov	r1, r6
   1cd50:	4628      	mov	r0, r5
   1cd52:	f7ff fe9e 	bl	1ca92 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1cd56:	07c3      	lsls	r3, r0, #31
   1cd58:	d40c      	bmi.n	1cd74 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1cd5a:	4631      	mov	r1, r6
   1cd5c:	4628      	mov	r0, r5
   1cd5e:	f7ff ffd8 	bl	1cd12 <free_list_remove>
	return c + chunk_size(h, c);
   1cd62:	4621      	mov	r1, r4
   1cd64:	4628      	mov	r0, r5
   1cd66:	f7ff feaa 	bl	1cabe <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1cd6a:	4621      	mov	r1, r4
   1cd6c:	1822      	adds	r2, r4, r0
   1cd6e:	4628      	mov	r0, r5
   1cd70:	f7ff fedd 	bl	1cb2e <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1cd74:	2200      	movs	r2, #0
   1cd76:	4621      	mov	r1, r4
   1cd78:	4628      	mov	r0, r5
   1cd7a:	f7ff fe8a 	bl	1ca92 <chunk_field>
   1cd7e:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1cd80:	2201      	movs	r2, #1
   1cd82:	4639      	mov	r1, r7
   1cd84:	4628      	mov	r0, r5
   1cd86:	f7ff fe84 	bl	1ca92 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1cd8a:	f010 0601 	ands.w	r6, r0, #1
   1cd8e:	d113      	bne.n	1cdb8 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1cd90:	4639      	mov	r1, r7
   1cd92:	4628      	mov	r0, r5
   1cd94:	f7ff ffbd 	bl	1cd12 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1cd98:	4621      	mov	r1, r4
   1cd9a:	4632      	mov	r2, r6
   1cd9c:	4628      	mov	r0, r5
   1cd9e:	f7ff fe78 	bl	1ca92 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1cda2:	4622      	mov	r2, r4
   1cda4:	1a21      	subs	r1, r4, r0
   1cda6:	4628      	mov	r0, r5
   1cda8:	f7ff fec1 	bl	1cb2e <merge_chunks>
   1cdac:	4621      	mov	r1, r4
   1cdae:	4632      	mov	r2, r6
   1cdb0:	4628      	mov	r0, r5
   1cdb2:	f7ff fe6e 	bl	1ca92 <chunk_field>
   1cdb6:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1cdb8:	4621      	mov	r1, r4
   1cdba:	4628      	mov	r0, r5
}
   1cdbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1cdc0:	f7ff bf62 	b.w	1cc88 <free_list_add>

0001cdc4 <sys_heap_alloc>:
{
   1cdc4:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1cdc6:	6804      	ldr	r4, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1cdc8:	b909      	cbnz	r1, 1cdce <sys_heap_alloc+0xa>
		return NULL;
   1cdca:	2000      	movs	r0, #0
}
   1cdcc:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1cdce:	68a2      	ldr	r2, [r4, #8]
   1cdd0:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   1cdd4:	d9f9      	bls.n	1cdca <sys_heap_alloc+0x6>
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   1cdd6:	4620      	mov	r0, r4
   1cdd8:	f7ff fe93 	bl	1cb02 <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1cddc:	4601      	mov	r1, r0
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   1cdde:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1cde0:	4620      	mov	r0, r4
   1cde2:	f7ff ff18 	bl	1cc16 <alloc_chunk>
	if (c == 0U) {
   1cde6:	4605      	mov	r5, r0
   1cde8:	2800      	cmp	r0, #0
   1cdea:	d0ee      	beq.n	1cdca <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1cdec:	4601      	mov	r1, r0
   1cdee:	4620      	mov	r0, r4
   1cdf0:	f7ff fe65 	bl	1cabe <chunk_size>
   1cdf4:	42b0      	cmp	r0, r6
   1cdf6:	d909      	bls.n	1ce0c <sys_heap_alloc+0x48>
		split_chunks(h, c, c + chunk_sz);
   1cdf8:	442e      	add	r6, r5
   1cdfa:	4629      	mov	r1, r5
   1cdfc:	4620      	mov	r0, r4
   1cdfe:	4632      	mov	r2, r6
   1ce00:	f7ff feb3 	bl	1cb6a <split_chunks>
		free_list_add(h, c + chunk_sz);
   1ce04:	4631      	mov	r1, r6
   1ce06:	4620      	mov	r0, r4
   1ce08:	f7ff ff3e 	bl	1cc88 <free_list_add>
	set_chunk_used(h, c, true);
   1ce0c:	4620      	mov	r0, r4
   1ce0e:	2201      	movs	r2, #1
   1ce10:	4629      	mov	r1, r5
   1ce12:	f7ff fe5a 	bl	1caca <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1ce16:	68a3      	ldr	r3, [r4, #8]
   1ce18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ce1c:	bf2c      	ite	cs
   1ce1e:	2008      	movcs	r0, #8
   1ce20:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1ce22:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   1ce26:	4420      	add	r0, r4
	return chunk_mem(h, c);
   1ce28:	e7d0      	b.n	1cdcc <sys_heap_alloc+0x8>

0001ce2a <outs>:
{
   1ce2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce2e:	4607      	mov	r7, r0
   1ce30:	4688      	mov	r8, r1
   1ce32:	4615      	mov	r5, r2
   1ce34:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1ce36:	4614      	mov	r4, r2
   1ce38:	42b4      	cmp	r4, r6
   1ce3a:	eba4 0005 	sub.w	r0, r4, r5
   1ce3e:	d302      	bcc.n	1ce46 <outs+0x1c>
   1ce40:	b93e      	cbnz	r6, 1ce52 <outs+0x28>
   1ce42:	7823      	ldrb	r3, [r4, #0]
   1ce44:	b12b      	cbz	r3, 1ce52 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1ce46:	f814 0b01 	ldrb.w	r0, [r4], #1
   1ce4a:	4641      	mov	r1, r8
   1ce4c:	47b8      	blx	r7
		if (rc < 0) {
   1ce4e:	2800      	cmp	r0, #0
   1ce50:	daf2      	bge.n	1ce38 <outs+0xe>
}
   1ce52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ce56 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1ce56:	4040      	eors	r0, r0
   1ce58:	f380 8811 	msr	BASEPRI, r0
   1ce5c:	f04f 0004 	mov.w	r0, #4
   1ce60:	df02      	svc	2
}
   1ce62:	4770      	bx	lr

0001ce64 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1ce64:	4770      	bx	lr

0001ce66 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1ce66:	2200      	movs	r2, #0
   1ce68:	e9c0 2200 	strd	r2, r2, [r0]
   1ce6c:	6082      	str	r2, [r0, #8]
}
   1ce6e:	4770      	bx	lr

0001ce70 <bt_scan_stop>:
	return bt_le_scan_stop();
   1ce70:	f7f6 bb3c 	b.w	134ec <bt_le_scan_stop>

0001ce74 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1ce74:	b538      	push	{r3, r4, r5, lr}
   1ce76:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1ce78:	42ab      	cmp	r3, r5
{
   1ce7a:	4611      	mov	r1, r2
   1ce7c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1ce7e:	d804      	bhi.n	1ce8a <_copy+0x16>
   1ce80:	461a      	mov	r2, r3
   1ce82:	f002 fb83 	bl	1f58c <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1ce86:	4620      	mov	r0, r4
   1ce88:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1ce8a:	2400      	movs	r4, #0
   1ce8c:	e7fb      	b.n	1ce86 <_copy+0x12>

0001ce8e <_set>:
__ssp_bos_icheck3(memset, void *, int)
   1ce8e:	f002 bb9e 	b.w	1f5ce <memset>

0001ce92 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1ce92:	09c3      	lsrs	r3, r0, #7
   1ce94:	005a      	lsls	r2, r3, #1
   1ce96:	4413      	add	r3, r2
   1ce98:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1ce9c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1cea0:	b2c0      	uxtb	r0, r0
   1cea2:	4770      	bx	lr

0001cea4 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1cea4:	78cb      	ldrb	r3, [r1, #3]
   1cea6:	7802      	ldrb	r2, [r0, #0]
   1cea8:	4053      	eors	r3, r2
   1ceaa:	7003      	strb	r3, [r0, #0]
   1ceac:	884b      	ldrh	r3, [r1, #2]
   1ceae:	7842      	ldrb	r2, [r0, #1]
   1ceb0:	4053      	eors	r3, r2
   1ceb2:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1ceb4:	680a      	ldr	r2, [r1, #0]
   1ceb6:	7883      	ldrb	r3, [r0, #2]
   1ceb8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1cebc:	7083      	strb	r3, [r0, #2]
   1cebe:	680a      	ldr	r2, [r1, #0]
   1cec0:	78c3      	ldrb	r3, [r0, #3]
   1cec2:	4053      	eors	r3, r2
   1cec4:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1cec6:	79cb      	ldrb	r3, [r1, #7]
   1cec8:	7902      	ldrb	r2, [r0, #4]
   1ceca:	4053      	eors	r3, r2
   1cecc:	7103      	strb	r3, [r0, #4]
   1cece:	88cb      	ldrh	r3, [r1, #6]
   1ced0:	7942      	ldrb	r2, [r0, #5]
   1ced2:	4053      	eors	r3, r2
   1ced4:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1ced6:	684a      	ldr	r2, [r1, #4]
   1ced8:	7983      	ldrb	r3, [r0, #6]
   1ceda:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1cede:	7183      	strb	r3, [r0, #6]
   1cee0:	684a      	ldr	r2, [r1, #4]
   1cee2:	79c3      	ldrb	r3, [r0, #7]
   1cee4:	4053      	eors	r3, r2
   1cee6:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1cee8:	7acb      	ldrb	r3, [r1, #11]
   1ceea:	7a02      	ldrb	r2, [r0, #8]
   1ceec:	4053      	eors	r3, r2
   1ceee:	7203      	strb	r3, [r0, #8]
   1cef0:	7a42      	ldrb	r2, [r0, #9]
   1cef2:	894b      	ldrh	r3, [r1, #10]
   1cef4:	4053      	eors	r3, r2
   1cef6:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1cef8:	688a      	ldr	r2, [r1, #8]
   1cefa:	7a83      	ldrb	r3, [r0, #10]
   1cefc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1cf00:	7283      	strb	r3, [r0, #10]
   1cf02:	688a      	ldr	r2, [r1, #8]
   1cf04:	7ac3      	ldrb	r3, [r0, #11]
   1cf06:	4053      	eors	r3, r2
   1cf08:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1cf0a:	7bcb      	ldrb	r3, [r1, #15]
   1cf0c:	7b02      	ldrb	r2, [r0, #12]
   1cf0e:	4053      	eors	r3, r2
   1cf10:	7303      	strb	r3, [r0, #12]
   1cf12:	89cb      	ldrh	r3, [r1, #14]
   1cf14:	7b42      	ldrb	r2, [r0, #13]
   1cf16:	4053      	eors	r3, r2
   1cf18:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1cf1a:	68ca      	ldr	r2, [r1, #12]
   1cf1c:	7b83      	ldrb	r3, [r0, #14]
   1cf1e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1cf22:	7383      	strb	r3, [r0, #14]
   1cf24:	68ca      	ldr	r2, [r1, #12]
   1cf26:	7bc3      	ldrb	r3, [r0, #15]
   1cf28:	4053      	eors	r3, r2
   1cf2a:	73c3      	strb	r3, [r0, #15]
}
   1cf2c:	4770      	bx	lr

0001cf2e <shift_rows>:
{
   1cf2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1cf30:	7802      	ldrb	r2, [r0, #0]
   1cf32:	f88d 2000 	strb.w	r2, [sp]
   1cf36:	7942      	ldrb	r2, [r0, #5]
   1cf38:	f88d 2001 	strb.w	r2, [sp, #1]
   1cf3c:	7a82      	ldrb	r2, [r0, #10]
   1cf3e:	f88d 2002 	strb.w	r2, [sp, #2]
   1cf42:	7bc2      	ldrb	r2, [r0, #15]
   1cf44:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1cf48:	7902      	ldrb	r2, [r0, #4]
   1cf4a:	f88d 2004 	strb.w	r2, [sp, #4]
   1cf4e:	7a42      	ldrb	r2, [r0, #9]
   1cf50:	f88d 2005 	strb.w	r2, [sp, #5]
   1cf54:	7b82      	ldrb	r2, [r0, #14]
   1cf56:	f88d 2006 	strb.w	r2, [sp, #6]
   1cf5a:	78c2      	ldrb	r2, [r0, #3]
   1cf5c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1cf60:	7a02      	ldrb	r2, [r0, #8]
   1cf62:	f88d 2008 	strb.w	r2, [sp, #8]
   1cf66:	7b42      	ldrb	r2, [r0, #13]
   1cf68:	f88d 2009 	strb.w	r2, [sp, #9]
   1cf6c:	7882      	ldrb	r2, [r0, #2]
   1cf6e:	f88d 200a 	strb.w	r2, [sp, #10]
   1cf72:	79c2      	ldrb	r2, [r0, #7]
   1cf74:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1cf78:	7b02      	ldrb	r2, [r0, #12]
   1cf7a:	f88d 200c 	strb.w	r2, [sp, #12]
   1cf7e:	7842      	ldrb	r2, [r0, #1]
   1cf80:	7ac3      	ldrb	r3, [r0, #11]
   1cf82:	f88d 200d 	strb.w	r2, [sp, #13]
   1cf86:	7982      	ldrb	r2, [r0, #6]
   1cf88:	f88d 200e 	strb.w	r2, [sp, #14]
   1cf8c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1cf90:	2310      	movs	r3, #16
   1cf92:	466a      	mov	r2, sp
   1cf94:	4619      	mov	r1, r3
   1cf96:	f7ff ff6d 	bl	1ce74 <_copy>
}
   1cf9a:	b005      	add	sp, #20
   1cf9c:	f85d fb04 	ldr.w	pc, [sp], #4

0001cfa0 <mult_row_column>:
{
   1cfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cfa2:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1cfa4:	7808      	ldrb	r0, [r1, #0]
{
   1cfa6:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1cfa8:	f7ff ff73 	bl	1ce92 <_double_byte>
   1cfac:	4605      	mov	r5, r0
   1cfae:	7860      	ldrb	r0, [r4, #1]
   1cfb0:	f7ff ff6f 	bl	1ce92 <_double_byte>
   1cfb4:	78a2      	ldrb	r2, [r4, #2]
   1cfb6:	7863      	ldrb	r3, [r4, #1]
   1cfb8:	4053      	eors	r3, r2
   1cfba:	78e2      	ldrb	r2, [r4, #3]
   1cfbc:	4053      	eors	r3, r2
   1cfbe:	405d      	eors	r5, r3
   1cfc0:	4045      	eors	r5, r0
   1cfc2:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1cfc4:	7860      	ldrb	r0, [r4, #1]
   1cfc6:	7827      	ldrb	r7, [r4, #0]
   1cfc8:	f7ff ff63 	bl	1ce92 <_double_byte>
   1cfcc:	4605      	mov	r5, r0
   1cfce:	78a0      	ldrb	r0, [r4, #2]
   1cfd0:	f7ff ff5f 	bl	1ce92 <_double_byte>
   1cfd4:	78a3      	ldrb	r3, [r4, #2]
   1cfd6:	405f      	eors	r7, r3
   1cfd8:	78e3      	ldrb	r3, [r4, #3]
   1cfda:	405f      	eors	r7, r3
   1cfdc:	407d      	eors	r5, r7
   1cfde:	4045      	eors	r5, r0
   1cfe0:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1cfe2:	78a0      	ldrb	r0, [r4, #2]
   1cfe4:	7865      	ldrb	r5, [r4, #1]
   1cfe6:	7827      	ldrb	r7, [r4, #0]
   1cfe8:	f7ff ff53 	bl	1ce92 <_double_byte>
   1cfec:	406f      	eors	r7, r5
   1cfee:	4605      	mov	r5, r0
   1cff0:	78e0      	ldrb	r0, [r4, #3]
   1cff2:	f7ff ff4e 	bl	1ce92 <_double_byte>
   1cff6:	78e3      	ldrb	r3, [r4, #3]
   1cff8:	405f      	eors	r7, r3
   1cffa:	407d      	eors	r5, r7
   1cffc:	4045      	eors	r5, r0
   1cffe:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1d000:	7820      	ldrb	r0, [r4, #0]
   1d002:	f7ff ff46 	bl	1ce92 <_double_byte>
   1d006:	7863      	ldrb	r3, [r4, #1]
   1d008:	7825      	ldrb	r5, [r4, #0]
   1d00a:	405d      	eors	r5, r3
   1d00c:	78a3      	ldrb	r3, [r4, #2]
   1d00e:	405d      	eors	r5, r3
   1d010:	4045      	eors	r5, r0
   1d012:	78e0      	ldrb	r0, [r4, #3]
   1d014:	f7ff ff3d 	bl	1ce92 <_double_byte>
   1d018:	b2ed      	uxtb	r5, r5
   1d01a:	4045      	eors	r5, r0
   1d01c:	70f5      	strb	r5, [r6, #3]
}
   1d01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d020 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1d020:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d022:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1d024:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d026:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1d02a:	2b00      	cmp	r3, #0
   1d02c:	bfb4      	ite	lt
   1d02e:	2387      	movlt	r3, #135	; 0x87
   1d030:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1d032:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1d036:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1d03a:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1d03c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1d040:	d002      	beq.n	1d048 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1d042:	7813      	ldrb	r3, [r2, #0]
   1d044:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1d046:	e7f4      	b.n	1d032 <gf_double+0x12>
	}
}
   1d048:	bd10      	pop	{r4, pc}

0001d04a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1d04a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1d04c:	b120      	cbz	r0, 1d058 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1d04e:	2258      	movs	r2, #88	; 0x58
   1d050:	2100      	movs	r1, #0
   1d052:	f7ff ff1c 	bl	1ce8e <_set>
   1d056:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d058:	bd08      	pop	{r3, pc}

0001d05a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1d05a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d05c:	4604      	mov	r4, r0
   1d05e:	b188      	cbz	r0, 1d084 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d060:	2210      	movs	r2, #16
   1d062:	2100      	movs	r1, #0
   1d064:	f7ff ff13 	bl	1ce8e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1d068:	2210      	movs	r2, #16
   1d06a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d06e:	2100      	movs	r1, #0
   1d070:	f7ff ff0d 	bl	1ce8e <_set>
	s->leftover_offset = 0;
   1d074:	2300      	movs	r3, #0
   1d076:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1d078:	2200      	movs	r2, #0
   1d07a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d07e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1d082:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d084:	bd10      	pop	{r4, pc}

0001d086 <tc_cmac_setup>:
{
   1d086:	b570      	push	{r4, r5, r6, lr}
   1d088:	460d      	mov	r5, r1
   1d08a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1d08c:	4604      	mov	r4, r0
   1d08e:	b310      	cbz	r0, 1d0d6 <tc_cmac_setup+0x50>
   1d090:	b311      	cbz	r1, 1d0d8 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1d092:	2258      	movs	r2, #88	; 0x58
   1d094:	2100      	movs	r1, #0
   1d096:	f7ff fefa 	bl	1ce8e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1d09a:	4629      	mov	r1, r5
	s->sched = sched;
   1d09c:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1d09e:	4630      	mov	r0, r6
   1d0a0:	f7f4 f84c 	bl	1113c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d0a4:	2210      	movs	r2, #16
   1d0a6:	2100      	movs	r1, #0
   1d0a8:	4620      	mov	r0, r4
   1d0aa:	f7ff fef0 	bl	1ce8e <_set>
	gf_double (s->K1, s->iv);
   1d0ae:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d0b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d0b4:	4621      	mov	r1, r4
   1d0b6:	4620      	mov	r0, r4
   1d0b8:	f7f4 f892 	bl	111e0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1d0bc:	4621      	mov	r1, r4
   1d0be:	4628      	mov	r0, r5
   1d0c0:	f7ff ffae 	bl	1d020 <gf_double>
	gf_double (s->K2, s->K1);
   1d0c4:	4629      	mov	r1, r5
   1d0c6:	f104 0020 	add.w	r0, r4, #32
   1d0ca:	f7ff ffa9 	bl	1d020 <gf_double>
	tc_cmac_init(s);
   1d0ce:	4620      	mov	r0, r4
   1d0d0:	f7ff ffc3 	bl	1d05a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1d0d4:	2001      	movs	r0, #1
}
   1d0d6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1d0d8:	4608      	mov	r0, r1
   1d0da:	e7fc      	b.n	1d0d6 <tc_cmac_setup+0x50>

0001d0dc <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1d0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d0e0:	460d      	mov	r5, r1
   1d0e2:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d0e4:	4604      	mov	r4, r0
   1d0e6:	2800      	cmp	r0, #0
   1d0e8:	d062      	beq.n	1d1b0 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1d0ea:	b912      	cbnz	r2, 1d0f2 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1d0ec:	2001      	movs	r0, #1
}
   1d0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1d0f2:	2900      	cmp	r1, #0
   1d0f4:	d05c      	beq.n	1d1b0 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1d0f6:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1d0fa:	ea50 0301 	orrs.w	r3, r0, r1
   1d0fe:	d057      	beq.n	1d1b0 <tc_cmac_update+0xd4>
	s->countdown--;
   1d100:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   1d104:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1d108:	f141 33ff 	adc.w	r3, r1, #4294967295
   1d10c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1d110:	f1b8 0f00 	cmp.w	r8, #0
   1d114:	d02a      	beq.n	1d16c <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1d116:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1d11a:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1d11e:	42be      	cmp	r6, r7
   1d120:	4420      	add	r0, r4
   1d122:	d208      	bcs.n	1d136 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d124:	462a      	mov	r2, r5
   1d126:	4633      	mov	r3, r6
   1d128:	4631      	mov	r1, r6
   1d12a:	f7ff fea3 	bl	1ce74 <_copy>
			s->leftover_offset += data_length;
   1d12e:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1d130:	4432      	add	r2, r6
   1d132:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1d134:	e7da      	b.n	1d0ec <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1d136:	463b      	mov	r3, r7
   1d138:	462a      	mov	r2, r5
   1d13a:	4639      	mov	r1, r7
   1d13c:	f7ff fe9a 	bl	1ce74 <_copy>
		data_length -= remaining_space;
   1d140:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1d142:	2300      	movs	r3, #0
   1d144:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1d146:	4446      	add	r6, r8
		data += remaining_space;
   1d148:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d14a:	1e63      	subs	r3, r4, #1
   1d14c:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1d150:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d154:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d158:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1d15a:	ea82 0200 	eor.w	r2, r2, r0
   1d15e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d160:	d1f6      	bne.n	1d150 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d162:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d164:	4621      	mov	r1, r4
   1d166:	4620      	mov	r0, r4
   1d168:	f7f4 f83a 	bl	111e0 <tc_aes_encrypt>
   1d16c:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1d170:	2e10      	cmp	r6, #16
   1d172:	d80a      	bhi.n	1d18a <tc_cmac_update+0xae>
	if (data_length > 0) {
   1d174:	2e00      	cmp	r6, #0
   1d176:	d0b9      	beq.n	1d0ec <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1d178:	4633      	mov	r3, r6
   1d17a:	462a      	mov	r2, r5
   1d17c:	4631      	mov	r1, r6
   1d17e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d182:	f7ff fe77 	bl	1ce74 <_copy>
		s->leftover_offset = data_length;
   1d186:	6466      	str	r6, [r4, #68]	; 0x44
   1d188:	e7b0      	b.n	1d0ec <tc_cmac_update+0x10>
   1d18a:	1e63      	subs	r3, r4, #1
   1d18c:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1d18e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d192:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d196:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1d198:	ea82 0200 	eor.w	r2, r2, r0
   1d19c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d19e:	d1f6      	bne.n	1d18e <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d1a0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d1a2:	4621      	mov	r1, r4
   1d1a4:	4620      	mov	r0, r4
   1d1a6:	f7f4 f81b 	bl	111e0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1d1aa:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1d1ac:	3e10      	subs	r6, #16
   1d1ae:	e7df      	b.n	1d170 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1d1b0:	2000      	movs	r0, #0
   1d1b2:	e79c      	b.n	1d0ee <tc_cmac_update+0x12>

0001d1b4 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1d1b4:	b570      	push	{r4, r5, r6, lr}
   1d1b6:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1d1b8:	4605      	mov	r5, r0
   1d1ba:	b1e8      	cbz	r0, 1d1f8 <tc_cmac_final+0x44>
   1d1bc:	b369      	cbz	r1, 1d21a <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1d1be:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1d1c0:	2a10      	cmp	r2, #16
   1d1c2:	d11a      	bne.n	1d1fa <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1d1c4:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d1c6:	1e63      	subs	r3, r4, #1
   1d1c8:	3901      	subs	r1, #1
   1d1ca:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1d1ce:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d1d2:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1d1d6:	4072      	eors	r2, r6
   1d1d8:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d1dc:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1d1de:	ea82 0206 	eor.w	r2, r2, r6
   1d1e2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d1e4:	d1f3      	bne.n	1d1ce <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1d1e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d1e8:	4621      	mov	r1, r4
   1d1ea:	4628      	mov	r0, r5
   1d1ec:	f7f3 fff8 	bl	111e0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1d1f0:	4620      	mov	r0, r4
   1d1f2:	f7ff ff2a 	bl	1d04a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1d1f6:	2001      	movs	r0, #1
}
   1d1f8:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1d1fa:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1d1fe:	2100      	movs	r1, #0
   1d200:	f1c2 0210 	rsb	r2, r2, #16
   1d204:	4420      	add	r0, r4
   1d206:	f7ff fe42 	bl	1ce8e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1d20a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1d20c:	4423      	add	r3, r4
   1d20e:	2280      	movs	r2, #128	; 0x80
   1d210:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1d214:	f104 0120 	add.w	r1, r4, #32
   1d218:	e7d5      	b.n	1d1c6 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1d21a:	4608      	mov	r0, r1
   1d21c:	e7ec      	b.n	1d1f8 <tc_cmac_final+0x44>

0001d21e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1d21e:	f7fb bc6d 	b.w	18afc <z_fatal_error>

0001d222 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1d222:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1d224:	6800      	ldr	r0, [r0, #0]
   1d226:	f7fb bc69 	b.w	18afc <z_fatal_error>

0001d22a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1d22a:	2100      	movs	r1, #0
   1d22c:	2001      	movs	r0, #1
   1d22e:	f7ff bff6 	b.w	1d21e <z_arm_fatal_error>

0001d232 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1d232:	b508      	push	{r3, lr}
	handler();
   1d234:	f7f4 f8d4 	bl	113e0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1d238:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1d23c:	f7f4 b9b0 	b.w	115a0 <z_arm_exc_exit>

0001d240 <_stdout_hook_default>:
}
   1d240:	f04f 30ff 	mov.w	r0, #4294967295
   1d244:	4770      	bx	lr

0001d246 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1d246:	b084      	sub	sp, #16
   1d248:	ab04      	add	r3, sp, #16
   1d24a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1d24e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1d252:	2b06      	cmp	r3, #6
   1d254:	d108      	bne.n	1d268 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1d256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d25a:	2201      	movs	r2, #1
   1d25c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1d260:	f3bf 8f4f 	dsb	sy
        __WFE();
   1d264:	bf20      	wfe
    while (true)
   1d266:	e7fd      	b.n	1d264 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1d268:	b004      	add	sp, #16
   1d26a:	4770      	bx	lr

0001d26c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1d26c:	b084      	sub	sp, #16
   1d26e:	ab04      	add	r3, sp, #16
   1d270:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1d274:	2300      	movs	r3, #0
   1d276:	f383 8811 	msr	BASEPRI, r3
   1d27a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1d27e:	b004      	add	sp, #16
   1d280:	4770      	bx	lr

0001d282 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1d282:	b510      	push	{r4, lr}
   1d284:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1d286:	7801      	ldrb	r1, [r0, #0]
   1d288:	7822      	ldrb	r2, [r4, #0]
   1d28a:	428a      	cmp	r2, r1
{
   1d28c:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1d28e:	d00e      	beq.n	1d2ae <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1d290:	4669      	mov	r1, sp
   1d292:	f7f4 fd21 	bl	11cd8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1d296:	a905      	add	r1, sp, #20
   1d298:	4620      	mov	r0, r4
   1d29a:	f7f4 fd1d 	bl	11cd8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1d29e:	2210      	movs	r2, #16
   1d2a0:	f10d 0115 	add.w	r1, sp, #21
   1d2a4:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1d2a8:	f002 f962 	bl	1f570 <memcmp>
   1d2ac:	e007      	b.n	1d2be <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   1d2ae:	2a01      	cmp	r2, #1
   1d2b0:	d007      	beq.n	1d2c2 <bt_uuid_cmp+0x40>
   1d2b2:	2a02      	cmp	r2, #2
   1d2b4:	d008      	beq.n	1d2c8 <bt_uuid_cmp+0x46>
   1d2b6:	b95a      	cbnz	r2, 1d2d0 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1d2b8:	8840      	ldrh	r0, [r0, #2]
   1d2ba:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1d2bc:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   1d2be:	b00a      	add	sp, #40	; 0x28
   1d2c0:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1d2c2:	6840      	ldr	r0, [r0, #4]
   1d2c4:	6863      	ldr	r3, [r4, #4]
   1d2c6:	e7f9      	b.n	1d2bc <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1d2c8:	2210      	movs	r2, #16
   1d2ca:	1c61      	adds	r1, r4, #1
   1d2cc:	3001      	adds	r0, #1
   1d2ce:	e7eb      	b.n	1d2a8 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   1d2d0:	f06f 0015 	mvn.w	r0, #21
   1d2d4:	e7f3      	b.n	1d2be <bt_uuid_cmp+0x3c>

0001d2d6 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1d2d6:	2a04      	cmp	r2, #4
{
   1d2d8:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   1d2da:	d00d      	beq.n	1d2f8 <bt_uuid_create+0x22>
   1d2dc:	2a10      	cmp	r2, #16
   1d2de:	d019      	beq.n	1d314 <bt_uuid_create+0x3e>
   1d2e0:	2a02      	cmp	r2, #2
   1d2e2:	f04f 0300 	mov.w	r3, #0
   1d2e6:	d121      	bne.n	1d32c <bt_uuid_create+0x56>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1d2e8:	7003      	strb	r3, [r0, #0]
   1d2ea:	784a      	ldrb	r2, [r1, #1]
   1d2ec:	780b      	ldrb	r3, [r1, #0]
   1d2ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1d2f2:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1d2f4:	2001      	movs	r0, #1
}
   1d2f6:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1d2f8:	2301      	movs	r3, #1
   1d2fa:	7003      	strb	r3, [r0, #0]
   1d2fc:	788a      	ldrb	r2, [r1, #2]
   1d2fe:	78cc      	ldrb	r4, [r1, #3]
   1d300:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1d302:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1d306:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1d308:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1d30c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1d310:	6042      	str	r2, [r0, #4]
		break;
   1d312:	e7ef      	b.n	1d2f4 <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   1d314:	2302      	movs	r3, #2
   1d316:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d31a:	f101 0310 	add.w	r3, r1, #16
   1d31e:	f851 2b04 	ldr.w	r2, [r1], #4
   1d322:	f840 2b04 	str.w	r2, [r0], #4
   1d326:	4299      	cmp	r1, r3
   1d328:	d1f9      	bne.n	1d31e <bt_uuid_create+0x48>
   1d32a:	e7e3      	b.n	1d2f4 <bt_uuid_create+0x1e>
	switch (data_len) {
   1d32c:	4618      	mov	r0, r3
   1d32e:	e7e2      	b.n	1d2f6 <bt_uuid_create+0x20>

0001d330 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1d330:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1d332:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1d334:	2106      	movs	r1, #6
{
   1d336:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1d338:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1d33c:	f7fb f854 	bl	183e8 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1d340:	b918      	cbnz	r0, 1d34a <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1d342:	79a3      	ldrb	r3, [r4, #6]
   1d344:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1d348:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1d34a:	bd10      	pop	{r4, pc}

0001d34c <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1d34c:	280f      	cmp	r0, #15
   1d34e:	d806      	bhi.n	1d35e <bt_hci_evt_get_flags+0x12>
   1d350:	280d      	cmp	r0, #13
   1d352:	d80b      	bhi.n	1d36c <bt_hci_evt_get_flags+0x20>
   1d354:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1d356:	bf14      	ite	ne
   1d358:	2002      	movne	r0, #2
   1d35a:	2003      	moveq	r0, #3
   1d35c:	4770      	bx	lr
	switch (evt) {
   1d35e:	2813      	cmp	r0, #19
   1d360:	d004      	beq.n	1d36c <bt_hci_evt_get_flags+0x20>
   1d362:	281a      	cmp	r0, #26
   1d364:	bf14      	ite	ne
   1d366:	2002      	movne	r0, #2
   1d368:	2001      	moveq	r0, #1
   1d36a:	4770      	bx	lr
   1d36c:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1d36e:	4770      	bx	lr

0001d370 <handle_event>:
{
   1d370:	b410      	push	{r4}
   1d372:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1d376:	4604      	mov	r4, r0
   1d378:	4608      	mov	r0, r1
		if (handler->event != event) {
   1d37a:	7811      	ldrb	r1, [r2, #0]
   1d37c:	42a1      	cmp	r1, r4
   1d37e:	d004      	beq.n	1d38a <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   1d380:	3208      	adds	r2, #8
   1d382:	429a      	cmp	r2, r3
   1d384:	d1f9      	bne.n	1d37a <handle_event+0xa>
}
   1d386:	bc10      	pop	{r4}
   1d388:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   1d38a:	8981      	ldrh	r1, [r0, #12]
   1d38c:	7853      	ldrb	r3, [r2, #1]
   1d38e:	4299      	cmp	r1, r3
   1d390:	d3f9      	bcc.n	1d386 <handle_event+0x16>
		handler->handler(buf);
   1d392:	6853      	ldr	r3, [r2, #4]
}
   1d394:	bc10      	pop	{r4}
		handler->handler(buf);
   1d396:	4718      	bx	r3

0001d398 <hci_data_buf_overflow>:
}
   1d398:	4770      	bx	lr

0001d39a <le_data_len_change>:
{
   1d39a:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1d39c:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1d39e:	8818      	ldrh	r0, [r3, #0]
   1d3a0:	f7f6 fad4 	bl	1394c <bt_conn_lookup_handle>
	if (!conn) {
   1d3a4:	b118      	cbz	r0, 1d3ae <le_data_len_change+0x14>
}
   1d3a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1d3aa:	f7f6 baa5 	b.w	138f8 <bt_conn_unref>
}
   1d3ae:	bd08      	pop	{r3, pc}

0001d3b0 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   1d3b0:	2101      	movs	r1, #1
   1d3b2:	3008      	adds	r0, #8
   1d3b4:	f7f8 bfd6 	b.w	16364 <net_buf_simple_pull_mem>

0001d3b8 <bt_addr_le_copy>:
   1d3b8:	680b      	ldr	r3, [r1, #0]
   1d3ba:	6003      	str	r3, [r0, #0]
   1d3bc:	888b      	ldrh	r3, [r1, #4]
   1d3be:	8083      	strh	r3, [r0, #4]
   1d3c0:	798b      	ldrb	r3, [r1, #6]
   1d3c2:	7183      	strb	r3, [r0, #6]
}
   1d3c4:	4770      	bx	lr

0001d3c6 <bt_addr_copy>:
   1d3c6:	680b      	ldr	r3, [r1, #0]
   1d3c8:	6003      	str	r3, [r0, #0]
   1d3ca:	888b      	ldrh	r3, [r1, #4]
   1d3cc:	8083      	strh	r3, [r0, #4]
}
   1d3ce:	4770      	bx	lr

0001d3d0 <hci_vendor_event>:
   1d3d0:	4770      	bx	lr

0001d3d2 <hci_num_completed_packets>:
{
   1d3d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   1d3d6:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1d3d8:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   1d3da:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   1d3dc:	783b      	ldrb	r3, [r7, #0]
   1d3de:	429d      	cmp	r5, r3
   1d3e0:	db01      	blt.n	1d3e6 <hci_num_completed_packets+0x14>
}
   1d3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1d3e6:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   1d3ea:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1d3ee:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1d3f2:	f7f6 faab 	bl	1394c <bt_conn_lookup_handle>
		if (!conn) {
   1d3f6:	4604      	mov	r4, r0
   1d3f8:	b350      	cbz	r0, 1d450 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   1d3fa:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   1d3fe:	b326      	cbz	r6, 1d44a <hci_num_completed_packets+0x78>
	__asm__ volatile(
   1d400:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d404:	f3ef 8211 	mrs	r2, BASEPRI
   1d408:	f383 8812 	msr	BASEPRI_MAX, r3
   1d40c:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1d410:	69e3      	ldr	r3, [r4, #28]
   1d412:	b16b      	cbz	r3, 1d430 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   1d414:	3b01      	subs	r3, #1
   1d416:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1d418:	f382 8811 	msr	BASEPRI, r2
   1d41c:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1d420:	4620      	mov	r0, r4
   1d422:	f7f6 f975 	bl	13710 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   1d426:	3e01      	subs	r6, #1
   1d428:	f7fc fb58 	bl	19adc <z_impl_k_sem_give>
   1d42c:	b2b6      	uxth	r6, r6
   1d42e:	e7e6      	b.n	1d3fe <hci_num_completed_packets+0x2c>
Z_GENLIST_IS_EMPTY(slist)
   1d430:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1d432:	b12b      	cbz	r3, 1d440 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d434:	69a1      	ldr	r1, [r4, #24]
   1d436:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   1d438:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d43a:	428b      	cmp	r3, r1
	list->tail = node;
   1d43c:	bf08      	it	eq
   1d43e:	61a0      	streq	r0, [r4, #24]
   1d440:	f382 8811 	msr	BASEPRI, r2
   1d444:	f3bf 8f6f 	isb	sy
			if (!node) {
   1d448:	b923      	cbnz	r3, 1d454 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   1d44a:	4620      	mov	r0, r4
   1d44c:	f7f6 fa54 	bl	138f8 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   1d450:	3501      	adds	r5, #1
   1d452:	e7c3      	b.n	1d3dc <hci_num_completed_packets+0xa>
	__asm__ volatile(
   1d454:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d458:	f3ef 8111 	mrs	r1, BASEPRI
   1d45c:	f382 8812 	msr	BASEPRI_MAX, r2
   1d460:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1d464:	68da      	ldr	r2, [r3, #12]
   1d466:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   1d468:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   1d46c:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   1d46e:	f8c3 800c 	str.w	r8, [r3, #12]
   1d472:	b94a      	cbnz	r2, 1d488 <hci_num_completed_packets+0xb6>
	list->head = node;
   1d474:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1d478:	f381 8811 	msr	BASEPRI, r1
   1d47c:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1d480:	4648      	mov	r0, r9
   1d482:	f7fc fe8b 	bl	1a19c <k_work_submit>
   1d486:	e7cb      	b.n	1d420 <hci_num_completed_packets+0x4e>
	parent->next = child;
   1d488:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1d48a:	6263      	str	r3, [r4, #36]	; 0x24
}
   1d48c:	e7f4      	b.n	1d478 <hci_num_completed_packets+0xa6>

0001d48e <hci_disconn_complete>:
{
   1d48e:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1d490:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1d492:	7835      	ldrb	r5, [r6, #0]
   1d494:	bb0d      	cbnz	r5, 1d4da <hci_disconn_complete+0x4c>
	conn = bt_conn_lookup_handle(handle);
   1d496:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   1d49a:	f7f6 fa57 	bl	1394c <bt_conn_lookup_handle>
	if (!conn) {
   1d49e:	4604      	mov	r4, r0
   1d4a0:	b1d8      	cbz	r0, 1d4da <hci_disconn_complete+0x4c>
	conn->err = evt->reason;
   1d4a2:	78f3      	ldrb	r3, [r6, #3]
   1d4a4:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1d4a6:	4629      	mov	r1, r5
   1d4a8:	f7f6 fa5c 	bl	13964 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   1d4ac:	78a3      	ldrb	r3, [r4, #2]
   1d4ae:	2b01      	cmp	r3, #1
   1d4b0:	d004      	beq.n	1d4bc <hci_disconn_complete+0x2e>
	bt_conn_unref(conn);
   1d4b2:	4620      	mov	r0, r4
}
   1d4b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1d4b8:	f7f6 ba1e 	b.w	138f8 <bt_conn_unref>
   1d4bc:	f3bf 8f5b 	dmb	ish
   1d4c0:	6863      	ldr	r3, [r4, #4]
   1d4c2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   1d4c6:	07db      	lsls	r3, r3, #31
   1d4c8:	d5f3      	bpl.n	1d4b2 <hci_disconn_complete+0x24>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1d4ca:	4620      	mov	r0, r4
   1d4cc:	2102      	movs	r1, #2
   1d4ce:	f7f6 fa49 	bl	13964 <bt_conn_set_state>
		bt_le_scan_update(false);
   1d4d2:	4628      	mov	r0, r5
   1d4d4:	f7f5 fe5a 	bl	1318c <bt_le_scan_update>
   1d4d8:	e7eb      	b.n	1d4b2 <hci_disconn_complete+0x24>
}
   1d4da:	bd70      	pop	{r4, r5, r6, pc}

0001d4dc <le_conn_update_complete>:
{
   1d4dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1d4de:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1d4e0:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1d4e4:	f7f6 fa32 	bl	1394c <bt_conn_lookup_handle>
	if (!conn) {
   1d4e8:	4604      	mov	r4, r0
   1d4ea:	b1c0      	cbz	r0, 1d51e <le_conn_update_complete+0x42>
	if (!evt->status) {
   1d4ec:	782b      	ldrb	r3, [r5, #0]
   1d4ee:	b9c3      	cbnz	r3, 1d522 <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1d4f0:	792a      	ldrb	r2, [r5, #4]
   1d4f2:	78eb      	ldrb	r3, [r5, #3]
   1d4f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d4f8:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1d4fc:	79aa      	ldrb	r2, [r5, #6]
   1d4fe:	796b      	ldrb	r3, [r5, #5]
   1d500:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d504:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1d508:	79eb      	ldrb	r3, [r5, #7]
   1d50a:	7a2a      	ldrb	r2, [r5, #8]
   1d50c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d510:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   1d514:	f7f6 fb42 	bl	13b9c <notify_le_param_updated>
	bt_conn_unref(conn);
   1d518:	4620      	mov	r0, r4
   1d51a:	f7f6 f9ed 	bl	138f8 <bt_conn_unref>
}
   1d51e:	b003      	add	sp, #12
   1d520:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1d522:	2b1a      	cmp	r3, #26
   1d524:	d1f8      	bne.n	1d518 <le_conn_update_complete+0x3c>
   1d526:	78c3      	ldrb	r3, [r0, #3]
   1d528:	2b01      	cmp	r3, #1
   1d52a:	d1f5      	bne.n	1d518 <le_conn_update_complete+0x3c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d52c:	f3bf 8f5b 	dmb	ish
   1d530:	1d03      	adds	r3, r0, #4
   1d532:	e853 2f00 	ldrex	r2, [r3]
   1d536:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   1d53a:	e843 1500 	strex	r5, r1, [r3]
   1d53e:	2d00      	cmp	r5, #0
   1d540:	d1f7      	bne.n	1d532 <le_conn_update_complete+0x56>
   1d542:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1d546:	0553      	lsls	r3, r2, #21
   1d548:	d4e6      	bmi.n	1d518 <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   1d54a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1d54e:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   1d550:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   1d552:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   1d556:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1d558:	f7f6 fed0 	bl	142fc <bt_l2cap_update_conn_param>
   1d55c:	e7dc      	b.n	1d518 <le_conn_update_complete+0x3c>

0001d55e <hci_le_read_max_data_len>:
{
   1d55e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d560:	4606      	mov	r6, r0
   1d562:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1d564:	aa01      	add	r2, sp, #4
   1d566:	2100      	movs	r1, #0
   1d568:	f242 002f 	movw	r0, #8239	; 0x202f
   1d56c:	f7f4 fe16 	bl	1219c <bt_hci_cmd_send_sync>
	if (err) {
   1d570:	4604      	mov	r4, r0
   1d572:	b948      	cbnz	r0, 1d588 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   1d574:	9801      	ldr	r0, [sp, #4]
   1d576:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1d578:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1d57c:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1d57e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1d582:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1d584:	f7f8 fde0 	bl	16148 <net_buf_unref>
}
   1d588:	4620      	mov	r0, r4
   1d58a:	b002      	add	sp, #8
   1d58c:	bd70      	pop	{r4, r5, r6, pc}

0001d58e <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1d58e:	f7f5 b829 	b.w	125e4 <bt_le_create_conn_legacy>

0001d592 <bt_hci_disconnect>:
{
   1d592:	b570      	push	{r4, r5, r6, lr}
   1d594:	4606      	mov	r6, r0
   1d596:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1d598:	f240 4006 	movw	r0, #1030	; 0x406
   1d59c:	2103      	movs	r1, #3
   1d59e:	f7f4 fdb5 	bl	1210c <bt_hci_cmd_create>
	if (!buf) {
   1d5a2:	4604      	mov	r4, r0
   1d5a4:	b168      	cbz	r0, 1d5c2 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1d5a6:	2103      	movs	r1, #3
   1d5a8:	3008      	adds	r0, #8
   1d5aa:	f7f8 fefd 	bl	163a8 <net_buf_simple_add>
	disconn->reason = reason;
   1d5ae:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1d5b0:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1d5b2:	4621      	mov	r1, r4
   1d5b4:	2200      	movs	r2, #0
}
   1d5b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1d5ba:	f240 4006 	movw	r0, #1030	; 0x406
   1d5be:	f7f4 bded 	b.w	1219c <bt_hci_cmd_send_sync>
}
   1d5c2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d5c6:	bd70      	pop	{r4, r5, r6, pc}

0001d5c8 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1d5c8:	8802      	ldrh	r2, [r0, #0]
   1d5ca:	8843      	ldrh	r3, [r0, #2]
   1d5cc:	429a      	cmp	r2, r3
{
   1d5ce:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1d5d0:	d818      	bhi.n	1d604 <bt_le_conn_params_valid+0x3c>
   1d5d2:	2a05      	cmp	r2, #5
   1d5d4:	d916      	bls.n	1d604 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1d5d6:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1d5da:	d813      	bhi.n	1d604 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1d5dc:	8884      	ldrh	r4, [r0, #4]
   1d5de:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1d5e2:	d20f      	bcs.n	1d604 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1d5e4:	88c1      	ldrh	r1, [r0, #6]
   1d5e6:	f1a1 020a 	sub.w	r2, r1, #10
   1d5ea:	b292      	uxth	r2, r2
   1d5ec:	f640 4076 	movw	r0, #3190	; 0xc76
   1d5f0:	4282      	cmp	r2, r0
   1d5f2:	d807      	bhi.n	1d604 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   1d5f4:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1d5f8:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1d5fc:	bf34      	ite	cc
   1d5fe:	2001      	movcc	r0, #1
   1d600:	2000      	movcs	r0, #0
}
   1d602:	bd10      	pop	{r4, pc}
		return false;
   1d604:	2000      	movs	r0, #0
   1d606:	e7fc      	b.n	1d602 <bt_le_conn_params_valid+0x3a>

0001d608 <bt_le_set_data_len>:
{
   1d608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d60a:	4607      	mov	r7, r0
   1d60c:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1d60e:	f242 0022 	movw	r0, #8226	; 0x2022
   1d612:	2106      	movs	r1, #6
{
   1d614:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1d616:	f7f4 fd79 	bl	1210c <bt_hci_cmd_create>
	if (!buf) {
   1d61a:	4604      	mov	r4, r0
   1d61c:	b170      	cbz	r0, 1d63c <bt_le_set_data_len+0x34>
   1d61e:	2106      	movs	r1, #6
   1d620:	3008      	adds	r0, #8
   1d622:	f7f8 fec1 	bl	163a8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1d626:	883b      	ldrh	r3, [r7, #0]
   1d628:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1d62a:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1d62c:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1d62e:	4621      	mov	r1, r4
   1d630:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1d634:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1d638:	f7f5 b85c 	b.w	126f4 <bt_hci_cmd_send>
}
   1d63c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d642 <bt_le_set_phy>:
{
   1d642:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d646:	4680      	mov	r8, r0
   1d648:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1d64a:	f242 0032 	movw	r0, #8242	; 0x2032
   1d64e:	2107      	movs	r1, #7
{
   1d650:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1d654:	4616      	mov	r6, r2
   1d656:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1d658:	f7f4 fd58 	bl	1210c <bt_hci_cmd_create>
	if (!buf) {
   1d65c:	4604      	mov	r4, r0
   1d65e:	b190      	cbz	r0, 1d686 <bt_le_set_phy+0x44>
   1d660:	2107      	movs	r1, #7
   1d662:	3008      	adds	r0, #8
   1d664:	f7f8 fea0 	bl	163a8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1d668:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1d66c:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1d66e:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1d670:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1d672:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1d674:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1d678:	4621      	mov	r1, r4
   1d67a:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1d67e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1d682:	f7f5 b837 	b.w	126f4 <bt_hci_cmd_send>
}
   1d686:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d68e <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1d68e:	6880      	ldr	r0, [r0, #8]
   1d690:	f7f5 b8b8 	b.w	12804 <bt_hci_le_enh_conn_complete>

0001d694 <le_legacy_conn_complete>:
{
   1d694:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1d696:	6881      	ldr	r1, [r0, #8]
{
   1d698:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   1d69a:	780b      	ldrb	r3, [r1, #0]
   1d69c:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1d6a0:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1d6a4:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1d6a8:	78cb      	ldrb	r3, [r1, #3]
   1d6aa:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1d6ae:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1d6b2:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1d6b6:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1d6ba:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1d6be:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1d6c2:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1d6c6:	7c4b      	ldrb	r3, [r1, #17]
   1d6c8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1d6cc:	a803      	add	r0, sp, #12
   1d6ce:	3104      	adds	r1, #4
   1d6d0:	f7ff fe72 	bl	1d3b8 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1d6d4:	2200      	movs	r2, #0
   1d6d6:	4669      	mov	r1, sp
   1d6d8:	f10d 0013 	add.w	r0, sp, #19
   1d6dc:	9200      	str	r2, [sp, #0]
   1d6de:	f8ad 2004 	strh.w	r2, [sp, #4]
   1d6e2:	f7ff fe70 	bl	1d3c6 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1d6e6:	4669      	mov	r1, sp
   1d6e8:	f10d 0019 	add.w	r0, sp, #25
   1d6ec:	9200      	str	r2, [sp, #0]
   1d6ee:	f8ad 2004 	strh.w	r2, [sp, #4]
   1d6f2:	f7ff fe68 	bl	1d3c6 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   1d6f6:	a802      	add	r0, sp, #8
   1d6f8:	f7f5 f884 	bl	12804 <bt_hci_le_enh_conn_complete>
}
   1d6fc:	b00b      	add	sp, #44	; 0x2c
   1d6fe:	f85d fb04 	ldr.w	pc, [sp], #4

0001d702 <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1d702:	6883      	ldr	r3, [r0, #8]
{
   1d704:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_handle(handle);
   1d706:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1d70a:	f7f6 f91f 	bl	1394c <bt_conn_lookup_handle>
	if (!conn) {
   1d70e:	4604      	mov	r4, r0
   1d710:	b310      	cbz	r0, 1d758 <le_phy_update_complete+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d712:	f3bf 8f5b 	dmb	ish
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1d716:	1d03      	adds	r3, r0, #4
   1d718:	e853 2f00 	ldrex	r2, [r3]
   1d71c:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   1d720:	e843 1c00 	strex	ip, r1, [r3]
   1d724:	f1bc 0f00 	cmp.w	ip, #0
   1d728:	d1f6      	bne.n	1d718 <le_phy_update_complete+0x16>
   1d72a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1d72e:	0612      	lsls	r2, r2, #24
   1d730:	d50d      	bpl.n	1d74e <le_phy_update_complete+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d732:	f3bf 8f5b 	dmb	ish
   1d736:	e853 2f00 	ldrex	r2, [r3]
   1d73a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   1d73e:	e843 2100 	strex	r1, r2, [r3]
   1d742:	2900      	cmp	r1, #0
   1d744:	d1f7      	bne.n	1d736 <le_phy_update_complete+0x34>
   1d746:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   1d74a:	f7f4 fff5 	bl	12738 <conn_auto_initiate>
	bt_conn_unref(conn);
   1d74e:	4620      	mov	r0, r4
}
   1d750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1d754:	f7f6 b8d0 	b.w	138f8 <bt_conn_unref>
}
   1d758:	bd10      	pop	{r4, pc}

0001d75a <le_remote_feat_complete>:
{
   1d75a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1d75c:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1d75e:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1d762:	f7f6 f8f3 	bl	1394c <bt_conn_lookup_handle>
	if (!conn) {
   1d766:	4604      	mov	r4, r0
   1d768:	b1e8      	cbz	r0, 1d7a6 <le_remote_feat_complete+0x4c>
	if (!evt->status) {
   1d76a:	782b      	ldrb	r3, [r5, #0]
   1d76c:	b933      	cbnz	r3, 1d77c <le_remote_feat_complete+0x22>
   1d76e:	f855 3f03 	ldr.w	r3, [r5, #3]!
   1d772:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
   1d776:	686b      	ldr	r3, [r5, #4]
   1d778:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
   1d77c:	1d23      	adds	r3, r4, #4
   1d77e:	f3bf 8f5b 	dmb	ish
   1d782:	e853 2f00 	ldrex	r2, [r3]
   1d786:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1d78a:	e843 2100 	strex	r1, r2, [r3]
   1d78e:	2900      	cmp	r1, #0
   1d790:	d1f7      	bne.n	1d782 <le_remote_feat_complete+0x28>
   1d792:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   1d796:	4620      	mov	r0, r4
   1d798:	f7f4 ffce 	bl	12738 <conn_auto_initiate>
	bt_conn_unref(conn);
   1d79c:	4620      	mov	r0, r4
}
   1d79e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1d7a2:	f7f6 b8a9 	b.w	138f8 <bt_conn_unref>
}
   1d7a6:	bd38      	pop	{r3, r4, r5, pc}

0001d7a8 <le_conn_param_neg_reply>:
{
   1d7a8:	b570      	push	{r4, r5, r6, lr}
   1d7aa:	4606      	mov	r6, r0
   1d7ac:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1d7ae:	f242 0021 	movw	r0, #8225	; 0x2021
   1d7b2:	2103      	movs	r1, #3
   1d7b4:	f7f4 fcaa 	bl	1210c <bt_hci_cmd_create>
	if (!buf) {
   1d7b8:	4604      	mov	r4, r0
   1d7ba:	b160      	cbz	r0, 1d7d6 <le_conn_param_neg_reply+0x2e>
   1d7bc:	2103      	movs	r1, #3
   1d7be:	3008      	adds	r0, #8
   1d7c0:	f7f8 fdf2 	bl	163a8 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1d7c4:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1d7c6:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1d7c8:	4621      	mov	r1, r4
   1d7ca:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1d7ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1d7d2:	f7f4 bf8f 	b.w	126f4 <bt_hci_cmd_send>
}
   1d7d6:	bd70      	pop	{r4, r5, r6, pc}

0001d7d8 <le_conn_param_req>:
{
   1d7d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1d7da:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1d7dc:	78d9      	ldrb	r1, [r3, #3]
   1d7de:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1d7e0:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1d7e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d7e6:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1d7ea:	7959      	ldrb	r1, [r3, #5]
   1d7ec:	791a      	ldrb	r2, [r3, #4]
   1d7ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d7f2:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1d7f6:	799a      	ldrb	r2, [r3, #6]
   1d7f8:	79d9      	ldrb	r1, [r3, #7]
   1d7fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d7fe:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1d802:	7a1a      	ldrb	r2, [r3, #8]
   1d804:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1d806:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1d808:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1d80c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1d80e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1d812:	f7f6 f89b 	bl	1394c <bt_conn_lookup_handle>
	if (!conn) {
   1d816:	4606      	mov	r6, r0
   1d818:	b928      	cbnz	r0, 1d826 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1d81a:	2102      	movs	r1, #2
   1d81c:	4620      	mov	r0, r4
   1d81e:	f7ff ffc3 	bl	1d7a8 <le_conn_param_neg_reply>
}
   1d822:	b003      	add	sp, #12
   1d824:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1d826:	4669      	mov	r1, sp
   1d828:	f7f6 fa20 	bl	13c6c <le_param_req>
   1d82c:	b938      	cbnz	r0, 1d83e <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1d82e:	211e      	movs	r1, #30
   1d830:	4620      	mov	r0, r4
   1d832:	f7ff ffb9 	bl	1d7a8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1d836:	4630      	mov	r0, r6
   1d838:	f7f6 f85e 	bl	138f8 <bt_conn_unref>
   1d83c:	e7f1      	b.n	1d822 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1d83e:	210e      	movs	r1, #14
   1d840:	f242 0020 	movw	r0, #8224	; 0x2020
   1d844:	f7f4 fc62 	bl	1210c <bt_hci_cmd_create>
	if (!buf) {
   1d848:	4605      	mov	r5, r0
   1d84a:	2800      	cmp	r0, #0
   1d84c:	d0f3      	beq.n	1d836 <le_conn_param_req+0x5e>
   1d84e:	210e      	movs	r1, #14
   1d850:	3008      	adds	r0, #8
   1d852:	f7f8 fda9 	bl	163a8 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1d856:	220e      	movs	r2, #14
   1d858:	4604      	mov	r4, r0
   1d85a:	2100      	movs	r1, #0
   1d85c:	f001 feb7 	bl	1f5ce <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1d860:	f8bd 3000 	ldrh.w	r3, [sp]
   1d864:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1d866:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1d86a:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1d86c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1d870:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1d872:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1d876:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1d878:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1d87a:	4629      	mov	r1, r5
   1d87c:	f242 0020 	movw	r0, #8224	; 0x2020
   1d880:	f7f4 ff38 	bl	126f4 <bt_hci_cmd_send>
   1d884:	e7d7      	b.n	1d836 <le_conn_param_req+0x5e>

0001d886 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1d886:	2000      	movs	r0, #0
   1d888:	4770      	bx	lr

0001d88a <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   1d88a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d88c:	4604      	mov	r4, r0
   1d88e:	460e      	mov	r6, r1
   1d890:	4617      	mov	r7, r2
	while (ad->len > 1) {
   1d892:	88a3      	ldrh	r3, [r4, #4]
   1d894:	2b01      	cmp	r3, #1
   1d896:	d801      	bhi.n	1d89c <bt_data_parse+0x12>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   1d898:	b003      	add	sp, #12
   1d89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
   1d89c:	4620      	mov	r0, r4
   1d89e:	f001 fb8a 	bl	1efb6 <net_buf_simple_pull_u8>
		if (len == 0U) {
   1d8a2:	4605      	mov	r5, r0
   1d8a4:	2800      	cmp	r0, #0
   1d8a6:	d0f7      	beq.n	1d898 <bt_data_parse+0xe>
		if (len > ad->len) {
   1d8a8:	88a2      	ldrh	r2, [r4, #4]
   1d8aa:	b283      	uxth	r3, r0
   1d8ac:	429a      	cmp	r2, r3
   1d8ae:	d3f3      	bcc.n	1d898 <bt_data_parse+0xe>
		data.type = net_buf_simple_pull_u8(ad);
   1d8b0:	4620      	mov	r0, r4
   1d8b2:	f001 fb80 	bl	1efb6 <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   1d8b6:	3d01      	subs	r5, #1
		data.data = ad->data;
   1d8b8:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   1d8ba:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
   1d8be:	4639      	mov	r1, r7
   1d8c0:	4668      	mov	r0, sp
		data.data_len = len - 1;
   1d8c2:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   1d8c6:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   1d8c8:	47b0      	blx	r6
   1d8ca:	2800      	cmp	r0, #0
   1d8cc:	d0e4      	beq.n	1d898 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
   1d8ce:	4629      	mov	r1, r5
   1d8d0:	4620      	mov	r0, r4
   1d8d2:	f7f8 fd27 	bl	16324 <net_buf_simple_pull>
   1d8d6:	e7dc      	b.n	1d892 <bt_data_parse+0x8>

0001d8d8 <bt_addr_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d8d8:	680b      	ldr	r3, [r1, #0]
   1d8da:	6003      	str	r3, [r0, #0]
   1d8dc:	888b      	ldrh	r3, [r1, #4]
   1d8de:	8083      	strh	r3, [r0, #4]
   1d8e0:	4770      	bx	lr

0001d8e2 <bt_addr_le_copy>:
   1d8e2:	680b      	ldr	r3, [r1, #0]
   1d8e4:	6003      	str	r3, [r0, #0]
   1d8e6:	888b      	ldrh	r3, [r1, #4]
   1d8e8:	8083      	strh	r3, [r0, #4]
   1d8ea:	798b      	ldrb	r3, [r1, #6]
   1d8ec:	7183      	strb	r3, [r0, #6]
}
   1d8ee:	4770      	bx	lr

0001d8f0 <bt_lookup_id_addr>:
}
   1d8f0:	4608      	mov	r0, r1
   1d8f2:	4770      	bx	lr

0001d8f4 <bt_id_set_private_addr>:
{
   1d8f4:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1d8f6:	2106      	movs	r1, #6
   1d8f8:	4668      	mov	r0, sp
   1d8fa:	f7fa fd75 	bl	183e8 <bt_rand>
	if (err) {
   1d8fe:	b940      	cbnz	r0, 1d912 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1d900:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1d904:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1d906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1d90a:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1d90e:	f7f5 fa25 	bl	12d5c <set_random_address>
}
   1d912:	b003      	add	sp, #12
   1d914:	f85d fb04 	ldr.w	pc, [sp], #4

0001d918 <bt_id_scan_random_addr_check>:
}
   1d918:	2001      	movs	r0, #1
   1d91a:	4770      	bx	lr

0001d91c <atomic_and>:
{
   1d91c:	4603      	mov	r3, r0
}
   1d91e:	f3bf 8f5b 	dmb	ish
   1d922:	e853 0f00 	ldrex	r0, [r3]
   1d926:	ea00 0201 	and.w	r2, r0, r1
   1d92a:	e843 2c00 	strex	ip, r2, [r3]
   1d92e:	f1bc 0f00 	cmp.w	ip, #0
   1d932:	d1f6      	bne.n	1d922 <atomic_and+0x6>
   1d934:	f3bf 8f5b 	dmb	ish
   1d938:	4770      	bx	lr

0001d93a <bt_addr_le_copy>:
   1d93a:	680b      	ldr	r3, [r1, #0]
   1d93c:	6003      	str	r3, [r0, #0]
   1d93e:	888b      	ldrh	r3, [r1, #4]
   1d940:	8083      	strh	r3, [r0, #4]
   1d942:	798b      	ldrb	r3, [r1, #6]
   1d944:	7183      	strb	r3, [r0, #6]
   1d946:	4770      	bx	lr

0001d948 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d948:	f3bf 8f5b 	dmb	ish
   1d94c:	6800      	ldr	r0, [r0, #0]
   1d94e:	f3bf 8f5b 	dmb	ish
}
   1d952:	4770      	bx	lr

0001d954 <bt_addr_le_copy>:
   1d954:	680b      	ldr	r3, [r1, #0]
   1d956:	6003      	str	r3, [r0, #0]
   1d958:	888b      	ldrh	r3, [r1, #4]
   1d95a:	8083      	strh	r3, [r0, #4]
   1d95c:	798b      	ldrb	r3, [r1, #6]
   1d95e:	7183      	strb	r3, [r0, #6]
   1d960:	4770      	bx	lr

0001d962 <tx_notify>:
{
   1d962:	b570      	push	{r4, r5, r6, lr}
   1d964:	4604      	mov	r4, r0
	__asm__ volatile(
   1d966:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d96a:	f3ef 8311 	mrs	r3, BASEPRI
   1d96e:	f382 8812 	msr	BASEPRI_MAX, r2
   1d972:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1d976:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1d978:	b920      	cbnz	r0, 1d984 <tx_notify+0x22>
	__asm__ volatile(
   1d97a:	f383 8811 	msr	BASEPRI, r3
   1d97e:	f3bf 8f6f 	isb	sy
}
   1d982:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d984:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d986:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1d988:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d98a:	4288      	cmp	r0, r1
	list->tail = node;
   1d98c:	bf08      	it	eq
   1d98e:	6262      	streq	r2, [r4, #36]	; 0x24
   1d990:	f383 8811 	msr	BASEPRI, r3
   1d994:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1d998:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1d99c:	f7f5 fdcc 	bl	13538 <tx_free>
		cb(conn, user_data);
   1d9a0:	4631      	mov	r1, r6
   1d9a2:	4620      	mov	r0, r4
   1d9a4:	47a8      	blx	r5
	while (1) {
   1d9a6:	e7de      	b.n	1d966 <tx_notify+0x4>

0001d9a8 <tx_complete_work>:
	tx_notify(conn);
   1d9a8:	3828      	subs	r0, #40	; 0x28
   1d9aa:	f7ff bfda 	b.w	1d962 <tx_notify>

0001d9ae <bt_conn_reset_rx_state>:
{
   1d9ae:	b510      	push	{r4, lr}
   1d9b0:	4604      	mov	r4, r0
	if (!conn->rx) {
   1d9b2:	6900      	ldr	r0, [r0, #16]
   1d9b4:	b118      	cbz	r0, 1d9be <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1d9b6:	f7f8 fbc7 	bl	16148 <net_buf_unref>
	conn->rx = NULL;
   1d9ba:	2300      	movs	r3, #0
   1d9bc:	6123      	str	r3, [r4, #16]
}
   1d9be:	bd10      	pop	{r4, pc}

0001d9c0 <bt_conn_recv>:
{
   1d9c0:	b570      	push	{r4, r5, r6, lr}
   1d9c2:	4616      	mov	r6, r2
   1d9c4:	4604      	mov	r4, r0
   1d9c6:	460d      	mov	r5, r1
	tx_notify(conn);
   1d9c8:	f7ff ffcb 	bl	1d962 <tx_notify>
	switch (flags) {
   1d9cc:	2e01      	cmp	r6, #1
   1d9ce:	d01a      	beq.n	1da06 <bt_conn_recv+0x46>
   1d9d0:	2e02      	cmp	r6, #2
   1d9d2:	d11a      	bne.n	1da0a <bt_conn_recv+0x4a>
		if (conn->rx) {
   1d9d4:	6923      	ldr	r3, [r4, #16]
   1d9d6:	b113      	cbz	r3, 1d9de <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1d9d8:	4620      	mov	r0, r4
   1d9da:	f7ff ffe8 	bl	1d9ae <bt_conn_reset_rx_state>
		conn->rx = buf;
   1d9de:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1d9e0:	6921      	ldr	r1, [r4, #16]
   1d9e2:	898a      	ldrh	r2, [r1, #12]
   1d9e4:	2a01      	cmp	r2, #1
   1d9e6:	d93a      	bls.n	1da5e <bt_conn_recv+0x9e>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1d9e8:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1d9ea:	7845      	ldrb	r5, [r0, #1]
   1d9ec:	7803      	ldrb	r3, [r0, #0]
   1d9ee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1d9f2:	3304      	adds	r3, #4
   1d9f4:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1d9f6:	429a      	cmp	r2, r3
   1d9f8:	d331      	bcc.n	1da5e <bt_conn_recv+0x9e>
	if (conn->rx->len > acl_total_len) {
   1d9fa:	d928      	bls.n	1da4e <bt_conn_recv+0x8e>
		bt_conn_reset_rx_state(conn);
   1d9fc:	4620      	mov	r0, r4
}
   1d9fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1da02:	f7ff bfd4 	b.w	1d9ae <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1da06:	6920      	ldr	r0, [r4, #16]
   1da08:	b918      	cbnz	r0, 1da12 <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   1da0a:	4620      	mov	r0, r4
   1da0c:	f7ff ffcf 	bl	1d9ae <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1da10:	e001      	b.n	1da16 <bt_conn_recv+0x56>
		if (!buf->len) {
   1da12:	89ae      	ldrh	r6, [r5, #12]
   1da14:	b926      	cbnz	r6, 1da20 <bt_conn_recv+0x60>
			net_buf_unref(buf);
   1da16:	4628      	mov	r0, r5
}
   1da18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1da1c:	f7f8 bb94 	b.w	16148 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   1da20:	3008      	adds	r0, #8
   1da22:	f001 fadc 	bl	1efde <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1da26:	4286      	cmp	r6, r0
   1da28:	d907      	bls.n	1da3a <bt_conn_recv+0x7a>
			bt_l2cap_recv(conn, conn->rx, false);
   1da2a:	6921      	ldr	r1, [r4, #16]
   1da2c:	2200      	movs	r2, #0
   1da2e:	4620      	mov	r0, r4
   1da30:	f000 f9e2 	bl	1ddf8 <bt_l2cap_recv>
			conn->rx = NULL;
   1da34:	2300      	movs	r3, #0
   1da36:	6123      	str	r3, [r4, #16]
   1da38:	e7ed      	b.n	1da16 <bt_conn_recv+0x56>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1da3a:	6920      	ldr	r0, [r4, #16]
   1da3c:	89aa      	ldrh	r2, [r5, #12]
   1da3e:	68a9      	ldr	r1, [r5, #8]
   1da40:	3008      	adds	r0, #8
   1da42:	f001 fad4 	bl	1efee <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1da46:	4628      	mov	r0, r5
   1da48:	f7f8 fb7e 	bl	16148 <net_buf_unref>
		break;
   1da4c:	e7c8      	b.n	1d9e0 <bt_conn_recv+0x20>
	conn->rx = NULL;
   1da4e:	2300      	movs	r3, #0
   1da50:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1da52:	4620      	mov	r0, r4
   1da54:	2201      	movs	r2, #1
}
   1da56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   1da5a:	f000 b9cd 	b.w	1ddf8 <bt_l2cap_recv>
}
   1da5e:	bd70      	pop	{r4, r5, r6, pc}

0001da60 <bt_conn_ref>:
{
   1da60:	b510      	push	{r4, lr}
   1da62:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   1da64:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   1da68:	4610      	mov	r0, r2
   1da6a:	f7ff ff6d 	bl	1d948 <atomic_get>
		if (!old) {
   1da6e:	b180      	cbz	r0, 1da92 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1da70:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1da74:	1c41      	adds	r1, r0, #1
   1da76:	e852 4f00 	ldrex	r4, [r2]
   1da7a:	4284      	cmp	r4, r0
   1da7c:	d104      	bne.n	1da88 <bt_conn_ref+0x28>
   1da7e:	e842 1c00 	strex	ip, r1, [r2]
   1da82:	f1bc 0f00 	cmp.w	ip, #0
   1da86:	d1f6      	bne.n	1da76 <bt_conn_ref+0x16>
   1da88:	f3bf 8f5b 	dmb	ish
   1da8c:	d1ec      	bne.n	1da68 <bt_conn_ref+0x8>
}
   1da8e:	4618      	mov	r0, r3
   1da90:	bd10      	pop	{r4, pc}
			return NULL;
   1da92:	4603      	mov	r3, r0
   1da94:	e7fb      	b.n	1da8e <bt_conn_ref+0x2e>

0001da96 <conn_lookup_handle>:
{
   1da96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1da9a:	4607      	mov	r7, r0
   1da9c:	460e      	mov	r6, r1
   1da9e:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1daa0:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1daa2:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   1daa6:	42b4      	cmp	r4, r6
   1daa8:	d103      	bne.n	1dab2 <conn_lookup_handle+0x1c>
	return NULL;
   1daaa:	2300      	movs	r3, #0
}
   1daac:	4618      	mov	r0, r3
   1daae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1dab2:	fb09 7004 	mla	r0, r9, r4, r7
   1dab6:	f7ff ffd3 	bl	1da60 <bt_conn_ref>
   1daba:	4603      	mov	r3, r0
		if (!conn) {
   1dabc:	b158      	cbz	r0, 1dad6 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1dabe:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1dac0:	2d01      	cmp	r5, #1
   1dac2:	d002      	beq.n	1daca <conn_lookup_handle+0x34>
   1dac4:	3d07      	subs	r5, #7
   1dac6:	2d01      	cmp	r5, #1
   1dac8:	d803      	bhi.n	1dad2 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1daca:	881a      	ldrh	r2, [r3, #0]
   1dacc:	4542      	cmp	r2, r8
   1dace:	d0ed      	beq.n	1daac <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1dad0:	4618      	mov	r0, r3
   1dad2:	f7f5 ff11 	bl	138f8 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1dad6:	3401      	adds	r4, #1
   1dad8:	e7e5      	b.n	1daa6 <conn_lookup_handle+0x10>

0001dada <bt_conn_connected>:
{
   1dada:	b510      	push	{r4, lr}
   1dadc:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1dade:	f7f6 fb97 	bl	14210 <bt_l2cap_connected>
	notify_connected(conn);
   1dae2:	4620      	mov	r0, r4
}
   1dae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1dae8:	f7f5 bd30 	b.w	1354c <notify_connected>

0001daec <bt_conn_get_security>:
}
   1daec:	2001      	movs	r0, #1
   1daee:	4770      	bx	lr

0001daf0 <bt_conn_is_peer_addr_le>:
{
   1daf0:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1daf2:	7a03      	ldrb	r3, [r0, #8]
   1daf4:	428b      	cmp	r3, r1
{
   1daf6:	4604      	mov	r4, r0
   1daf8:	4615      	mov	r5, r2
	if (id != conn->id) {
   1dafa:	d115      	bne.n	1db28 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1dafc:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1db00:	2207      	movs	r2, #7
   1db02:	4628      	mov	r0, r5
   1db04:	f001 fd34 	bl	1f570 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1db08:	b180      	cbz	r0, 1db2c <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1db0a:	78e3      	ldrb	r3, [r4, #3]
   1db0c:	2207      	movs	r2, #7
   1db0e:	b943      	cbnz	r3, 1db22 <bt_conn_is_peer_addr_le+0x32>
   1db10:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   1db14:	4628      	mov	r0, r5
   1db16:	f001 fd2b 	bl	1f570 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1db1a:	fab0 f080 	clz	r0, r0
   1db1e:	0940      	lsrs	r0, r0, #5
}
   1db20:	bd38      	pop	{r3, r4, r5, pc}
   1db22:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1db26:	e7f5      	b.n	1db14 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1db28:	2000      	movs	r0, #0
   1db2a:	e7f9      	b.n	1db20 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1db2c:	2001      	movs	r0, #1
   1db2e:	e7f7      	b.n	1db20 <bt_conn_is_peer_addr_le+0x30>

0001db30 <bt_conn_exists_le>:
{
   1db30:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1db32:	f7f6 f90b 	bl	13d4c <bt_conn_lookup_addr_le>
	if (conn) {
   1db36:	b110      	cbz	r0, 1db3e <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   1db38:	f7f5 fede 	bl	138f8 <bt_conn_unref>
		return true;
   1db3c:	2001      	movs	r0, #1
}
   1db3e:	bd08      	pop	{r3, pc}

0001db40 <bt_conn_le_conn_update>:
{
   1db40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db42:	4607      	mov	r7, r0
   1db44:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1db46:	f242 0013 	movw	r0, #8211	; 0x2013
   1db4a:	210e      	movs	r1, #14
   1db4c:	f7f4 fade 	bl	1210c <bt_hci_cmd_create>
	if (!buf) {
   1db50:	4606      	mov	r6, r0
   1db52:	b1d0      	cbz	r0, 1db8a <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1db54:	210e      	movs	r1, #14
   1db56:	3008      	adds	r0, #8
   1db58:	f7f8 fc26 	bl	163a8 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1db5c:	220e      	movs	r2, #14
   1db5e:	4604      	mov	r4, r0
   1db60:	2100      	movs	r1, #0
   1db62:	f001 fd34 	bl	1f5ce <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1db66:	883b      	ldrh	r3, [r7, #0]
   1db68:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1db6a:	882b      	ldrh	r3, [r5, #0]
   1db6c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1db6e:	886b      	ldrh	r3, [r5, #2]
   1db70:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1db72:	88ab      	ldrh	r3, [r5, #4]
   1db74:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1db76:	88eb      	ldrh	r3, [r5, #6]
   1db78:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1db7a:	4631      	mov	r1, r6
   1db7c:	2200      	movs	r2, #0
}
   1db7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1db82:	f242 0013 	movw	r0, #8211	; 0x2013
   1db86:	f7f4 bb09 	b.w	1219c <bt_hci_cmd_send_sync>
}
   1db8a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1db8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001db90 <l2cap_connected>:
}
   1db90:	4770      	bx	lr

0001db92 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1db92:	3010      	adds	r0, #16
   1db94:	f7fc bca4 	b.w	1a4e0 <k_work_cancel_delayable>

0001db98 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1db98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db9a:	4607      	mov	r7, r0
   1db9c:	460e      	mov	r6, r1
   1db9e:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1dba0:	2300      	movs	r3, #0
   1dba2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1dba6:	2104      	movs	r1, #4
   1dba8:	2000      	movs	r0, #0
   1dbaa:	f7f5 ffcb 	bl	13b44 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1dbae:	4604      	mov	r4, r0
   1dbb0:	b130      	cbz	r0, 1dbc0 <l2cap_create_le_sig_pdu.isra.0+0x28>
   1dbb2:	2104      	movs	r1, #4
   1dbb4:	3008      	adds	r0, #8
   1dbb6:	f7f8 fbf7 	bl	163a8 <net_buf_simple_add>
	hdr->code = code;
   1dbba:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1dbbc:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1dbbe:	8045      	strh	r5, [r0, #2]
}
   1dbc0:	4620      	mov	r0, r4
   1dbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dbc4 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1dbc4:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   1dbc6:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1dbc8:	b17b      	cbz	r3, 1dbea <bt_l2cap_chan_remove+0x26>
   1dbca:	3b08      	subs	r3, #8
   1dbcc:	2200      	movs	r2, #0
   1dbce:	b163      	cbz	r3, 1dbea <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1dbd0:	428b      	cmp	r3, r1
   1dbd2:	f103 0408 	add.w	r4, r3, #8
   1dbd6:	d10f      	bne.n	1dbf8 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1dbd8:	688b      	ldr	r3, [r1, #8]
   1dbda:	b93a      	cbnz	r2, 1dbec <bt_l2cap_chan_remove+0x28>
   1dbdc:	6d82      	ldr	r2, [r0, #88]	; 0x58
	list->head = node;
   1dbde:	6543      	str	r3, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1dbe0:	4294      	cmp	r4, r2
   1dbe2:	d100      	bne.n	1dbe6 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1dbe4:	6583      	str	r3, [r0, #88]	; 0x58
	parent->next = child;
   1dbe6:	2300      	movs	r3, #0
   1dbe8:	608b      	str	r3, [r1, #8]
}
   1dbea:	bd10      	pop	{r4, pc}
   1dbec:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dbee:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1dbf0:	429c      	cmp	r4, r3
	list->tail = node;
   1dbf2:	bf08      	it	eq
   1dbf4:	6582      	streq	r2, [r0, #88]	; 0x58
}
   1dbf6:	e7f6      	b.n	1dbe6 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dbf8:	2c00      	cmp	r4, #0
   1dbfa:	d0f6      	beq.n	1dbea <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dbfc:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1dbfe:	2b00      	cmp	r3, #0
   1dc00:	d0f3      	beq.n	1dbea <bt_l2cap_chan_remove+0x26>
   1dc02:	3b08      	subs	r3, #8
   1dc04:	4622      	mov	r2, r4
   1dc06:	e7e2      	b.n	1dbce <bt_l2cap_chan_remove+0xa>

0001dc08 <bt_l2cap_chan_del>:
{
   1dc08:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1dc0a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1dc0e:	4604      	mov	r4, r0
	if (!chan->conn) {
   1dc10:	b123      	cbz	r3, 1dc1c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1dc12:	686b      	ldr	r3, [r5, #4]
   1dc14:	b103      	cbz	r3, 1dc18 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1dc16:	4798      	blx	r3
	chan->conn = NULL;
   1dc18:	2300      	movs	r3, #0
   1dc1a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1dc1c:	68e3      	ldr	r3, [r4, #12]
   1dc1e:	b10b      	cbz	r3, 1dc24 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1dc20:	4620      	mov	r0, r4
   1dc22:	4798      	blx	r3
	if (ops->released) {
   1dc24:	69eb      	ldr	r3, [r5, #28]
   1dc26:	b11b      	cbz	r3, 1dc30 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1dc28:	4620      	mov	r0, r4
}
   1dc2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1dc2e:	4718      	bx	r3
}
   1dc30:	bd70      	pop	{r4, r5, r6, pc}

0001dc32 <l2cap_rtx_timeout>:
{
   1dc32:	b508      	push	{r3, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   1dc34:	f1a0 0110 	sub.w	r1, r0, #16
   1dc38:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1dc3c:	f7ff ffc2 	bl	1dbc4 <bt_l2cap_chan_remove>
}
   1dc40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_l2cap_chan_del(&chan->chan);
   1dc44:	4608      	mov	r0, r1
   1dc46:	f7ff bfdf 	b.w	1dc08 <bt_l2cap_chan_del>

0001dc4a <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1dc4a:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   1dc4c:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1dc4e:	b18b      	cbz	r3, 1dc74 <bt_l2cap_disconnected+0x2a>
   1dc50:	f1b3 0008 	subs.w	r0, r3, #8
   1dc54:	d00e      	beq.n	1dc74 <bt_l2cap_disconnected+0x2a>
   1dc56:	681c      	ldr	r4, [r3, #0]
   1dc58:	b104      	cbz	r4, 1dc5c <bt_l2cap_disconnected+0x12>
   1dc5a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1dc5c:	f7ff ffd4 	bl	1dc08 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1dc60:	b144      	cbz	r4, 1dc74 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dc62:	f114 0308 	adds.w	r3, r4, #8
   1dc66:	d002      	beq.n	1dc6e <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dc68:	68a3      	ldr	r3, [r4, #8]
   1dc6a:	b103      	cbz	r3, 1dc6e <bt_l2cap_disconnected+0x24>
   1dc6c:	3b08      	subs	r3, #8
{
   1dc6e:	4620      	mov	r0, r4
   1dc70:	461c      	mov	r4, r3
   1dc72:	e7f3      	b.n	1dc5c <bt_l2cap_disconnected+0x12>
}
   1dc74:	bd10      	pop	{r4, pc}

0001dc76 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1dc76:	3104      	adds	r1, #4
   1dc78:	f7f5 bf64 	b.w	13b44 <bt_conn_create_pdu_timeout>

0001dc7c <bt_l2cap_send_cb>:
{
   1dc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc80:	4614      	mov	r4, r2
   1dc82:	4605      	mov	r5, r0
   1dc84:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1dc86:	f102 0008 	add.w	r0, r2, #8
   1dc8a:	2104      	movs	r1, #4
   1dc8c:	461e      	mov	r6, r3
   1dc8e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1dc92:	f7f8 fb25 	bl	162e0 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1dc96:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1dc98:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1dc9a:	3a04      	subs	r2, #4
   1dc9c:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1dc9e:	4643      	mov	r3, r8
   1dca0:	4632      	mov	r2, r6
   1dca2:	4621      	mov	r1, r4
   1dca4:	4628      	mov	r0, r5
}
   1dca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1dcaa:	f7f5 bdb1 	b.w	13810 <bt_conn_send_cb>

0001dcae <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1dcae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1dcb0:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1dcb2:	2202      	movs	r2, #2
   1dcb4:	2001      	movs	r0, #1
   1dcb6:	f7ff ff6f 	bl	1db98 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1dcba:	4604      	mov	r4, r0
   1dcbc:	b198      	cbz	r0, 1dce6 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   1dcbe:	2102      	movs	r1, #2
   1dcc0:	3008      	adds	r0, #8
   1dcc2:	f7f8 fb71 	bl	163a8 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1dcc6:	2300      	movs	r3, #0
   1dcc8:	7003      	strb	r3, [r0, #0]
   1dcca:	7043      	strb	r3, [r0, #1]
   1dccc:	4622      	mov	r2, r4
   1dcce:	9300      	str	r3, [sp, #0]
   1dcd0:	2105      	movs	r1, #5
   1dcd2:	4628      	mov	r0, r5
   1dcd4:	f7ff ffd2 	bl	1dc7c <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1dcd8:	b128      	cbz	r0, 1dce6 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   1dcda:	4620      	mov	r0, r4
}
   1dcdc:	b003      	add	sp, #12
   1dcde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1dce2:	f7f8 ba31 	b.w	16148 <net_buf_unref>
}
   1dce6:	b003      	add	sp, #12
   1dce8:	bd30      	pop	{r4, r5, pc}

0001dcea <l2cap_recv>:
{
   1dcea:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1dcec:	898b      	ldrh	r3, [r1, #12]
   1dcee:	2b03      	cmp	r3, #3
{
   1dcf0:	b085      	sub	sp, #20
   1dcf2:	4605      	mov	r5, r0
   1dcf4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1dcf6:	d911      	bls.n	1dd1c <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   1dcf8:	2104      	movs	r1, #4
   1dcfa:	f104 0008 	add.w	r0, r4, #8
   1dcfe:	f7f8 fb31 	bl	16364 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1dd02:	89a3      	ldrh	r3, [r4, #12]
   1dd04:	8842      	ldrh	r2, [r0, #2]
   1dd06:	429a      	cmp	r2, r3
   1dd08:	d108      	bne.n	1dd1c <l2cap_recv+0x32>
	if (!hdr->ident) {
   1dd0a:	7841      	ldrb	r1, [r0, #1]
   1dd0c:	b131      	cbz	r1, 1dd1c <l2cap_recv+0x32>
	switch (hdr->code) {
   1dd0e:	7803      	ldrb	r3, [r0, #0]
   1dd10:	2b12      	cmp	r3, #18
   1dd12:	d006      	beq.n	1dd22 <l2cap_recv+0x38>
   1dd14:	2b13      	cmp	r3, #19
   1dd16:	d001      	beq.n	1dd1c <l2cap_recv+0x32>
   1dd18:	2b01      	cmp	r3, #1
   1dd1a:	d14b      	bne.n	1ddb4 <l2cap_recv+0xca>
}
   1dd1c:	2000      	movs	r0, #0
   1dd1e:	b005      	add	sp, #20
   1dd20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
   1dd22:	2a07      	cmp	r2, #7
   1dd24:	d9fa      	bls.n	1dd1c <l2cap_recv+0x32>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   1dd26:	682d      	ldr	r5, [r5, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   1dd28:	78ef      	ldrb	r7, [r5, #3]
   1dd2a:	b11f      	cbz	r7, 1dd34 <l2cap_recv+0x4a>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1dd2c:	4628      	mov	r0, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   1dd2e:	f7ff ffbe 	bl	1dcae <l2cap_send_reject.constprop.0>
		break;
   1dd32:	e7f3      	b.n	1dd1c <l2cap_recv+0x32>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1dd34:	68a2      	ldr	r2, [r4, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1dd36:	7850      	ldrb	r0, [r2, #1]
   1dd38:	7813      	ldrb	r3, [r2, #0]
   1dd3a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1dd3e:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   1dd42:	78d0      	ldrb	r0, [r2, #3]
   1dd44:	7893      	ldrb	r3, [r2, #2]
   1dd46:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1dd4a:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   1dd4e:	7950      	ldrb	r0, [r2, #5]
   1dd50:	7913      	ldrb	r3, [r2, #4]
   1dd52:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1dd56:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1dd5a:	7993      	ldrb	r3, [r2, #6]
   1dd5c:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1dd5e:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   1dd60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1dd64:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   1dd66:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1dd6a:	f7ff ff15 	bl	1db98 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1dd6e:	4604      	mov	r4, r0
   1dd70:	2800      	cmp	r0, #0
   1dd72:	d0d3      	beq.n	1dd1c <l2cap_recv+0x32>
	accepted = le_param_req(conn, &param);
   1dd74:	a902      	add	r1, sp, #8
   1dd76:	4628      	mov	r0, r5
   1dd78:	f7f5 ff78 	bl	13c6c <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   1dd7c:	2102      	movs	r1, #2
   1dd7e:	4606      	mov	r6, r0
   1dd80:	f104 0008 	add.w	r0, r4, #8
   1dd84:	f7f8 fb10 	bl	163a8 <net_buf_simple_add>
	if (accepted) {
   1dd88:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1dd8c:	b2db      	uxtb	r3, r3
   1dd8e:	8003      	strh	r3, [r0, #0]
   1dd90:	4622      	mov	r2, r4
   1dd92:	9700      	str	r7, [sp, #0]
   1dd94:	463b      	mov	r3, r7
   1dd96:	2105      	movs	r1, #5
   1dd98:	4628      	mov	r0, r5
   1dd9a:	f7ff ff6f 	bl	1dc7c <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1dd9e:	b110      	cbz	r0, 1dda6 <l2cap_recv+0xbc>
		net_buf_unref(buf);
   1dda0:	4620      	mov	r0, r4
   1dda2:	f7f8 f9d1 	bl	16148 <net_buf_unref>
	if (accepted) {
   1dda6:	2e00      	cmp	r6, #0
   1dda8:	d0b8      	beq.n	1dd1c <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
   1ddaa:	a902      	add	r1, sp, #8
   1ddac:	4628      	mov	r0, r5
   1ddae:	f7ff fec7 	bl	1db40 <bt_conn_le_conn_update>
   1ddb2:	e7b3      	b.n	1dd1c <l2cap_recv+0x32>
		l2cap_send_reject(chan->conn, hdr->ident,
   1ddb4:	6828      	ldr	r0, [r5, #0]
   1ddb6:	e7ba      	b.n	1dd2e <l2cap_recv+0x44>

0001ddb8 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ddb8:	6d40      	ldr	r0, [r0, #84]	; 0x54
   1ddba:	b160      	cbz	r0, 1ddd6 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1ddbc:	3808      	subs	r0, #8
   1ddbe:	b900      	cbnz	r0, 1ddc2 <bt_l2cap_le_lookup_tx_cid+0xa>
   1ddc0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1ddc2:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   1ddc6:	428b      	cmp	r3, r1
   1ddc8:	d005      	beq.n	1ddd6 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ddca:	f110 0308 	adds.w	r3, r0, #8
   1ddce:	d001      	beq.n	1ddd4 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ddd0:	6880      	ldr	r0, [r0, #8]
   1ddd2:	e7f2      	b.n	1ddba <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1ddd4:	4618      	mov	r0, r3
}
   1ddd6:	4770      	bx	lr

0001ddd8 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ddd8:	6d40      	ldr	r0, [r0, #84]	; 0x54
   1ddda:	b160      	cbz	r0, 1ddf6 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1dddc:	3808      	subs	r0, #8
   1ddde:	b900      	cbnz	r0, 1dde2 <bt_l2cap_le_lookup_rx_cid+0xa>
   1dde0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1dde2:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   1dde6:	428b      	cmp	r3, r1
   1dde8:	d005      	beq.n	1ddf6 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ddea:	f110 0308 	adds.w	r3, r0, #8
   1ddee:	d001      	beq.n	1ddf4 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ddf0:	6880      	ldr	r0, [r0, #8]
   1ddf2:	e7f2      	b.n	1ddda <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1ddf4:	4618      	mov	r0, r3
}
   1ddf6:	4770      	bx	lr

0001ddf8 <bt_l2cap_recv>:
{
   1ddf8:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1ddfa:	898b      	ldrh	r3, [r1, #12]
   1ddfc:	2b03      	cmp	r3, #3
{
   1ddfe:	4605      	mov	r5, r0
   1de00:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1de02:	d804      	bhi.n	1de0e <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1de04:	4620      	mov	r0, r4
}
   1de06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1de0a:	f7f8 b99d 	b.w	16148 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1de0e:	2104      	movs	r1, #4
   1de10:	f104 0008 	add.w	r0, r4, #8
   1de14:	f7f8 faa6 	bl	16364 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1de18:	8841      	ldrh	r1, [r0, #2]
   1de1a:	4628      	mov	r0, r5
   1de1c:	f7ff ffdc 	bl	1ddd8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1de20:	2800      	cmp	r0, #0
   1de22:	d0ef      	beq.n	1de04 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1de24:	6843      	ldr	r3, [r0, #4]
   1de26:	4621      	mov	r1, r4
   1de28:	691b      	ldr	r3, [r3, #16]
   1de2a:	4798      	blx	r3
   1de2c:	e7ea      	b.n	1de04 <bt_l2cap_recv+0xc>

0001de2e <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1de2e:	4770      	bx	lr

0001de30 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1de30:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   1de32:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1de34:	b128      	cbz	r0, 1de42 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1de36:	6859      	ldr	r1, [r3, #4]
   1de38:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1de3a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1de3c:	4288      	cmp	r0, r1
	list->tail = node;
   1de3e:	bf08      	it	eq
   1de40:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1de42:	4770      	bx	lr

0001de44 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1de44:	4603      	mov	r3, r0
   1de46:	6800      	ldr	r0, [r0, #0]
   1de48:	2200      	movs	r2, #0
   1de4a:	b900      	cbnz	r0, 1de4e <sys_slist_find_and_remove+0xa>
   1de4c:	4770      	bx	lr
   1de4e:	4288      	cmp	r0, r1
   1de50:	d110      	bne.n	1de74 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   1de52:	6808      	ldr	r0, [r1, #0]
   1de54:	b942      	cbnz	r2, 1de68 <sys_slist_find_and_remove+0x24>
   1de56:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1de58:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1de5a:	4291      	cmp	r1, r2
   1de5c:	d100      	bne.n	1de60 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1de5e:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1de60:	2300      	movs	r3, #0
   1de62:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1de64:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   1de66:	4770      	bx	lr
	parent->next = child;
   1de68:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1de6a:	6858      	ldr	r0, [r3, #4]
   1de6c:	4281      	cmp	r1, r0
	list->tail = node;
   1de6e:	bf08      	it	eq
   1de70:	605a      	streq	r2, [r3, #4]
}
   1de72:	e7f5      	b.n	1de60 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1de74:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1de76:	6800      	ldr	r0, [r0, #0]
   1de78:	e7e7      	b.n	1de4a <sys_slist_find_and_remove+0x6>

0001de7a <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1de7a:	4603      	mov	r3, r0
	size_t bytes = 0;
   1de7c:	2000      	movs	r0, #0

	while (buf) {
   1de7e:	b903      	cbnz	r3, 1de82 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1de80:	4770      	bx	lr
		bytes += buf->len;
   1de82:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1de84:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1de86:	4410      	add	r0, r2
		buf = buf->frags;
   1de88:	e7f9      	b.n	1de7e <net_buf_frags_len+0x4>

0001de8a <att_sent>:
	if (chan->ops->sent) {
   1de8a:	684b      	ldr	r3, [r1, #4]
   1de8c:	695b      	ldr	r3, [r3, #20]
{
   1de8e:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1de90:	b103      	cbz	r3, 1de94 <att_sent+0xa>
		chan->ops->sent(chan);
   1de92:	4718      	bx	r3
}
   1de94:	4770      	bx	lr

0001de96 <attr_read_type_cb>:
{
   1de96:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1de98:	68d4      	ldr	r4, [r2, #12]
   1de9a:	7823      	ldrb	r3, [r4, #0]
   1de9c:	3102      	adds	r1, #2
   1de9e:	b913      	cbnz	r3, 1dea6 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1dea0:	7021      	strb	r1, [r4, #0]
	return true;
   1dea2:	2001      	movs	r0, #1
   1dea4:	e006      	b.n	1deb4 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1dea6:	428b      	cmp	r3, r1
   1dea8:	d0fb      	beq.n	1dea2 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1deaa:	8983      	ldrh	r3, [r0, #12]
   1deac:	3b02      	subs	r3, #2
   1deae:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1deb0:	2000      	movs	r0, #0
   1deb2:	6110      	str	r0, [r2, #16]
}
   1deb4:	bd10      	pop	{r4, pc}

0001deb6 <att_prepare_write_req>:
}
   1deb6:	2006      	movs	r0, #6
   1deb8:	4770      	bx	lr

0001deba <att_op_get_type>:
	switch (op) {
   1deba:	281e      	cmp	r0, #30
   1debc:	d816      	bhi.n	1deec <att_op_get_type+0x32>
   1debe:	b308      	cbz	r0, 1df04 <att_op_get_type+0x4a>
   1dec0:	1e43      	subs	r3, r0, #1
   1dec2:	2b1d      	cmp	r3, #29
   1dec4:	d81e      	bhi.n	1df04 <att_op_get_type+0x4a>
   1dec6:	e8df f003 	tbb	[pc, r3]
   1deca:	2317      	.short	0x2317
   1decc:	23172317 	.word	0x23172317
   1ded0:	23172317 	.word	0x23172317
   1ded4:	23172317 	.word	0x23172317
   1ded8:	23172317 	.word	0x23172317
   1dedc:	231d1d17 	.word	0x231d1d17
   1dee0:	1d172317 	.word	0x1d172317
   1dee4:	0f1b1d19 	.word	0x0f1b1d19
   1dee8:	2004      	movs	r0, #4
   1deea:	4770      	bx	lr
   1deec:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1def0:	2b52      	cmp	r3, #82	; 0x52
   1def2:	d107      	bne.n	1df04 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1def4:	2000      	movs	r0, #0
}
   1def6:	4770      	bx	lr
		return ATT_RESPONSE;
   1def8:	2002      	movs	r0, #2
   1defa:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1defc:	2003      	movs	r0, #3
   1defe:	4770      	bx	lr
		return ATT_INDICATION;
   1df00:	2005      	movs	r0, #5
   1df02:	4770      	bx	lr
		return ATT_COMMAND;
   1df04:	f010 0f40 	tst.w	r0, #64	; 0x40
   1df08:	bf0c      	ite	eq
   1df0a:	2006      	moveq	r0, #6
   1df0c:	2000      	movne	r0, #0
   1df0e:	4770      	bx	lr
		return ATT_REQUEST;
   1df10:	2001      	movs	r0, #1
   1df12:	4770      	bx	lr

0001df14 <att_notify_mult>:
{
   1df14:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1df16:	6803      	ldr	r3, [r0, #0]
   1df18:	898a      	ldrh	r2, [r1, #12]
   1df1a:	6818      	ldr	r0, [r3, #0]
   1df1c:	6889      	ldr	r1, [r1, #8]
   1df1e:	f000 ff97 	bl	1ee50 <bt_gatt_mult_notification>
}
   1df22:	2000      	movs	r0, #0
   1df24:	bd08      	pop	{r3, pc}

0001df26 <att_notify>:
{
   1df26:	b538      	push	{r3, r4, r5, lr}
   1df28:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1df2a:	f101 0008 	add.w	r0, r1, #8
   1df2e:	460c      	mov	r4, r1
   1df30:	f001 f849 	bl	1efc6 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1df34:	682d      	ldr	r5, [r5, #0]
   1df36:	89a3      	ldrh	r3, [r4, #12]
   1df38:	68a2      	ldr	r2, [r4, #8]
   1df3a:	4601      	mov	r1, r0
   1df3c:	6828      	ldr	r0, [r5, #0]
   1df3e:	f000 ff5c 	bl	1edfa <bt_gatt_notification>
}
   1df42:	2000      	movs	r0, #0
   1df44:	bd38      	pop	{r3, r4, r5, pc}

0001df46 <att_chan_mtu_updated>:
{
   1df46:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1df48:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1df4a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   1df4c:	b30a      	cbz	r2, 1df92 <att_chan_mtu_updated+0x4c>
   1df4e:	f5b2 74aa 	subs.w	r4, r2, #340	; 0x154
   1df52:	d01d      	beq.n	1df90 <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1df54:	6813      	ldr	r3, [r2, #0]
   1df56:	b10b      	cbz	r3, 1df5c <att_chan_mtu_updated+0x16>
   1df58:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   1df5c:	2200      	movs	r2, #0
   1df5e:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   1df60:	42a0      	cmp	r0, r4
   1df62:	d009      	beq.n	1df78 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1df64:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1df68:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1df6c:	42a9      	cmp	r1, r5
   1df6e:	bf38      	it	cc
   1df70:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1df72:	42a2      	cmp	r2, r4
   1df74:	bf38      	it	cc
   1df76:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1df78:	b163      	cbz	r3, 1df94 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1df7a:	f513 75aa 	adds.w	r5, r3, #340	; 0x154
   1df7e:	d004      	beq.n	1df8a <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1df80:	f8d3 5154 	ldr.w	r5, [r3, #340]	; 0x154
   1df84:	b10d      	cbz	r5, 1df8a <att_chan_mtu_updated+0x44>
   1df86:	f5a5 75aa 	sub.w	r5, r5, #340	; 0x154
{
   1df8a:	461c      	mov	r4, r3
   1df8c:	462b      	mov	r3, r5
   1df8e:	e7e7      	b.n	1df60 <att_chan_mtu_updated+0x1a>
   1df90:	4622      	mov	r2, r4
   1df92:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1df94:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   1df98:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   1df9c:	428b      	cmp	r3, r1
   1df9e:	d801      	bhi.n	1dfa4 <att_chan_mtu_updated+0x5e>
   1dfa0:	4290      	cmp	r0, r2
   1dfa2:	d909      	bls.n	1dfb8 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1dfa4:	4282      	cmp	r2, r0
   1dfa6:	bf38      	it	cc
   1dfa8:	4602      	movcc	r2, r0
   1dfaa:	4299      	cmp	r1, r3
   1dfac:	6830      	ldr	r0, [r6, #0]
   1dfae:	bf38      	it	cc
   1dfb0:	4619      	movcc	r1, r3
}
   1dfb2:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1dfb4:	f7f7 be6e 	b.w	15c94 <bt_gatt_att_max_mtu_changed>
}
   1dfb8:	bc70      	pop	{r4, r5, r6}
   1dfba:	4770      	bx	lr

0001dfbc <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1dfbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1dfbe:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1dfc2:	2300      	movs	r3, #0
   1dfc4:	9300      	str	r3, [sp, #0]
   1dfc6:	461a      	mov	r2, r3
   1dfc8:	f7f7 fad4 	bl	15574 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1dfcc:	b005      	add	sp, #20
   1dfce:	f85d fb04 	ldr.w	pc, [sp], #4

0001dfd2 <att_chan_read>:
{
   1dfd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfd6:	4680      	mov	r8, r0
   1dfd8:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1dfda:	4610      	mov	r0, r2
{
   1dfdc:	4699      	mov	r9, r3
   1dfde:	468b      	mov	fp, r1
   1dfe0:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1dfe2:	f7ff ff4a 	bl	1de7a <net_buf_frags_len>
   1dfe6:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   1dfea:	4283      	cmp	r3, r0
   1dfec:	d97a      	bls.n	1e0e4 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1dfee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1dff2:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1dff4:	4630      	mov	r0, r6
   1dff6:	f7f8 f907 	bl	16208 <net_buf_frag_last>
	size_t len, total = 0;
   1dffa:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1dffe:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e000:	4630      	mov	r0, r6
   1e002:	f7ff ff3a 	bl	1de7a <net_buf_frags_len>
   1e006:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   1e00a:	f105 0708 	add.w	r7, r5, #8
   1e00e:	1a24      	subs	r4, r4, r0
   1e010:	4638      	mov	r0, r7
   1e012:	f000 ffe4 	bl	1efde <net_buf_simple_tailroom>
   1e016:	4284      	cmp	r4, r0
   1e018:	d211      	bcs.n	1e03e <att_chan_read+0x6c>
   1e01a:	4630      	mov	r0, r6
   1e01c:	f7ff ff2d 	bl	1de7a <net_buf_frags_len>
   1e020:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1e024:	1a24      	subs	r4, r4, r0
		if (!len) {
   1e026:	bb34      	cbnz	r4, 1e076 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1e028:	79b0      	ldrb	r0, [r6, #6]
   1e02a:	f7f7 feed 	bl	15e08 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1e02e:	2200      	movs	r2, #0
   1e030:	2300      	movs	r3, #0
   1e032:	f000 ffb5 	bl	1efa0 <net_buf_alloc_fixed>
			if (!frag) {
   1e036:	4605      	mov	r5, r0
   1e038:	b930      	cbnz	r0, 1e048 <att_chan_read+0x76>
	return total;
   1e03a:	4657      	mov	r7, sl
   1e03c:	e02c      	b.n	1e098 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1e03e:	4638      	mov	r0, r7
   1e040:	f000 ffcd 	bl	1efde <net_buf_simple_tailroom>
   1e044:	4604      	mov	r4, r0
   1e046:	e7ee      	b.n	1e026 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1e048:	4601      	mov	r1, r0
   1e04a:	4630      	mov	r0, r6
   1e04c:	f7f8 f924 	bl	16298 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e050:	4630      	mov	r0, r6
   1e052:	f7ff ff12 	bl	1de7a <net_buf_frags_len>
   1e056:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1e05a:	f105 0708 	add.w	r7, r5, #8
   1e05e:	1a24      	subs	r4, r4, r0
   1e060:	4638      	mov	r0, r7
   1e062:	f000 ffbc 	bl	1efde <net_buf_simple_tailroom>
   1e066:	4284      	cmp	r4, r0
   1e068:	d21a      	bcs.n	1e0a0 <att_chan_read+0xce>
   1e06a:	4630      	mov	r0, r6
   1e06c:	f7ff ff05 	bl	1de7a <net_buf_frags_len>
   1e070:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1e074:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1e076:	68a9      	ldr	r1, [r5, #8]
   1e078:	89aa      	ldrh	r2, [r5, #12]
   1e07a:	f8db 7004 	ldr.w	r7, [fp, #4]
   1e07e:	9803      	ldr	r0, [sp, #12]
   1e080:	f8cd 9000 	str.w	r9, [sp]
   1e084:	440a      	add	r2, r1
   1e086:	b2a3      	uxth	r3, r4
   1e088:	4659      	mov	r1, fp
   1e08a:	47b8      	blx	r7
		if (read < 0) {
   1e08c:	1e07      	subs	r7, r0, #0
   1e08e:	da0c      	bge.n	1e0aa <att_chan_read+0xd8>
				return total;
   1e090:	f1ba 0f00 	cmp.w	sl, #0
   1e094:	bf18      	it	ne
   1e096:	4657      	movne	r7, sl
}
   1e098:	4638      	mov	r0, r7
   1e09a:	b005      	add	sp, #20
   1e09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0a0:	4638      	mov	r0, r7
   1e0a2:	f000 ff9c 	bl	1efde <net_buf_simple_tailroom>
   1e0a6:	4604      	mov	r4, r0
   1e0a8:	e7e5      	b.n	1e076 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1e0aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e0ac:	b993      	cbnz	r3, 1e0d4 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1e0ae:	4639      	mov	r1, r7
   1e0b0:	f105 0008 	add.w	r0, r5, #8
   1e0b4:	f7f8 f978 	bl	163a8 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e0b8:	4630      	mov	r0, r6
   1e0ba:	f7ff fede 	bl	1de7a <net_buf_frags_len>
   1e0be:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   1e0c2:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e0c4:	4283      	cmp	r3, r0
		total += read;
   1e0c6:	44ba      	add	sl, r7
		offset += read;
   1e0c8:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e0cc:	d9b5      	bls.n	1e03a <att_chan_read+0x68>
   1e0ce:	42a7      	cmp	r7, r4
   1e0d0:	d096      	beq.n	1e000 <att_chan_read+0x2e>
   1e0d2:	e7b2      	b.n	1e03a <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1e0d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e0d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e0d8:	4639      	mov	r1, r7
   1e0da:	4628      	mov	r0, r5
   1e0dc:	4798      	blx	r3
   1e0de:	2800      	cmp	r0, #0
   1e0e0:	d1e5      	bne.n	1e0ae <att_chan_read+0xdc>
   1e0e2:	e7aa      	b.n	1e03a <att_chan_read+0x68>
		return 0;
   1e0e4:	2700      	movs	r7, #0
   1e0e6:	e7d7      	b.n	1e098 <att_chan_read+0xc6>

0001e0e8 <find_type_cb>:
{
   1e0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1e0ec:	f8d2 9000 	ldr.w	r9, [r2]
{
   1e0f0:	b091      	sub	sp, #68	; 0x44
   1e0f2:	4607      	mov	r7, r0
   1e0f4:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1e0f6:	2500      	movs	r5, #0
   1e0f8:	f642 0301 	movw	r3, #10241	; 0x2801
   1e0fc:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1e0fe:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1e102:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1e106:	a90b      	add	r1, sp, #44	; 0x2c
{
   1e108:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1e10a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1e10e:	f7ff f8b8 	bl	1d282 <bt_uuid_cmp>
   1e112:	2800      	cmp	r0, #0
   1e114:	d079      	beq.n	1e20a <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1e116:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1e11a:	6838      	ldr	r0, [r7, #0]
   1e11c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1e120:	a90b      	add	r1, sp, #44	; 0x2c
   1e122:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1e126:	f7ff f8ac 	bl	1d282 <bt_uuid_cmp>
   1e12a:	b138      	cbz	r0, 1e13c <find_type_cb+0x54>
		if (data->group &&
   1e12c:	68a3      	ldr	r3, [r4, #8]
   1e12e:	b11b      	cbz	r3, 1e138 <find_type_cb+0x50>
   1e130:	885a      	ldrh	r2, [r3, #2]
   1e132:	42b2      	cmp	r2, r6
   1e134:	d200      	bcs.n	1e138 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1e136:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1e138:	2001      	movs	r0, #1
   1e13a:	e009      	b.n	1e150 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1e13c:	6861      	ldr	r1, [r4, #4]
   1e13e:	4608      	mov	r0, r1
   1e140:	f7ff fe9b 	bl	1de7a <net_buf_frags_len>
   1e144:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   1e148:	1a1b      	subs	r3, r3, r0
   1e14a:	2b03      	cmp	r3, #3
   1e14c:	d803      	bhi.n	1e156 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1e14e:	2000      	movs	r0, #0
}
   1e150:	b011      	add	sp, #68	; 0x44
   1e152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1e156:	4608      	mov	r0, r1
   1e158:	f7f8 f856 	bl	16208 <net_buf_frag_last>
   1e15c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1e15e:	6860      	ldr	r0, [r4, #4]
   1e160:	f7ff fe8b 	bl	1de7a <net_buf_frags_len>
   1e164:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   1e168:	f105 0b08 	add.w	fp, r5, #8
   1e16c:	ebaa 0a00 	sub.w	sl, sl, r0
   1e170:	4658      	mov	r0, fp
   1e172:	f000 ff34 	bl	1efde <net_buf_simple_tailroom>
   1e176:	4582      	cmp	sl, r0
   1e178:	d23f      	bcs.n	1e1fa <find_type_cb+0x112>
   1e17a:	6860      	ldr	r0, [r4, #4]
   1e17c:	f7ff fe7d 	bl	1de7a <net_buf_frags_len>
   1e180:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   1e184:	1a18      	subs	r0, r3, r0
	if (!len) {
   1e186:	b970      	cbnz	r0, 1e1a6 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1e188:	6863      	ldr	r3, [r4, #4]
   1e18a:	7998      	ldrb	r0, [r3, #6]
   1e18c:	f7f7 fe3c 	bl	15e08 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1e190:	2200      	movs	r2, #0
   1e192:	2300      	movs	r3, #0
   1e194:	f000 ff04 	bl	1efa0 <net_buf_alloc_fixed>
		if (!frag) {
   1e198:	4605      	mov	r5, r0
   1e19a:	2800      	cmp	r0, #0
   1e19c:	d0d7      	beq.n	1e14e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1e19e:	4601      	mov	r1, r0
   1e1a0:	6860      	ldr	r0, [r4, #4]
   1e1a2:	f7f8 f879 	bl	16298 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1e1a6:	2300      	movs	r3, #0
   1e1a8:	9300      	str	r3, [sp, #0]
   1e1aa:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1e1ae:	4639      	mov	r1, r7
   1e1b0:	2310      	movs	r3, #16
   1e1b2:	aa02      	add	r2, sp, #8
   1e1b4:	4640      	mov	r0, r8
   1e1b6:	47c8      	blx	r9
	if (read < 0) {
   1e1b8:	1e07      	subs	r7, r0, #0
   1e1ba:	db26      	blt.n	1e20a <find_type_cb+0x122>
	if (read != data->value_len) {
   1e1bc:	7c22      	ldrb	r2, [r4, #16]
   1e1be:	68e0      	ldr	r0, [r4, #12]
   1e1c0:	42ba      	cmp	r2, r7
   1e1c2:	d01e      	beq.n	1e202 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1e1c4:	4601      	mov	r1, r0
   1e1c6:	a80b      	add	r0, sp, #44	; 0x2c
   1e1c8:	f7ff f885 	bl	1d2d6 <bt_uuid_create>
   1e1cc:	b1e8      	cbz	r0, 1e20a <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1e1ce:	b2fa      	uxtb	r2, r7
   1e1d0:	a902      	add	r1, sp, #8
   1e1d2:	a806      	add	r0, sp, #24
   1e1d4:	f7ff f87f 	bl	1d2d6 <bt_uuid_create>
   1e1d8:	b1b8      	cbz	r0, 1e20a <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1e1da:	a906      	add	r1, sp, #24
   1e1dc:	a80b      	add	r0, sp, #44	; 0x2c
   1e1de:	f7ff f850 	bl	1d282 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1e1e2:	b990      	cbnz	r0, 1e20a <find_type_cb+0x122>
	data->err = 0x00;
   1e1e4:	2300      	movs	r3, #0
   1e1e6:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1e1e8:	2104      	movs	r1, #4
   1e1ea:	f105 0008 	add.w	r0, r5, #8
   1e1ee:	f7f8 f8db 	bl	163a8 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1e1f2:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1e1f4:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1e1f6:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1e1f8:	e79e      	b.n	1e138 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1e1fa:	4658      	mov	r0, fp
   1e1fc:	f000 feef 	bl	1efde <net_buf_simple_tailroom>
   1e200:	e7c1      	b.n	1e186 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   1e202:	a902      	add	r1, sp, #8
   1e204:	f001 f9b4 	bl	1f570 <memcmp>
   1e208:	e7eb      	b.n	1e1e2 <find_type_cb+0xfa>
	data->group = NULL;
   1e20a:	2300      	movs	r3, #0
   1e20c:	60a3      	str	r3, [r4, #8]
   1e20e:	e793      	b.n	1e138 <find_type_cb+0x50>

0001e210 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1e210:	68d0      	ldr	r0, [r2, #12]
   1e212:	7803      	ldrb	r3, [r0, #0]
   1e214:	3104      	adds	r1, #4
   1e216:	b913      	cbnz	r3, 1e21e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1e218:	7001      	strb	r1, [r0, #0]
	return true;
   1e21a:	2001      	movs	r0, #1
}
   1e21c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1e21e:	428b      	cmp	r3, r1
   1e220:	d0fb      	beq.n	1e21a <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1e222:	6891      	ldr	r1, [r2, #8]
   1e224:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1e226:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1e228:	3b04      	subs	r3, #4
   1e22a:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1e22c:	6110      	str	r0, [r2, #16]
		return false;
   1e22e:	4770      	bx	lr

0001e230 <chan_req_send>:
{
   1e230:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e232:	688e      	ldr	r6, [r1, #8]
{
   1e234:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e236:	4630      	mov	r0, r6
{
   1e238:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e23a:	f7ff fe1e 	bl	1de7a <net_buf_frags_len>
   1e23e:	f8b5 308a 	ldrh.w	r3, [r5, #138]	; 0x8a
   1e242:	4283      	cmp	r3, r0
   1e244:	d30a      	bcc.n	1e25c <chan_req_send+0x2c>
	req->buf = NULL;
   1e246:	2200      	movs	r2, #0
	chan->req = req;
   1e248:	f8c5 10fc 	str.w	r1, [r5, #252]	; 0xfc
	err = chan_send(chan, buf, NULL);
   1e24c:	4628      	mov	r0, r5
	req->buf = NULL;
   1e24e:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   1e250:	4631      	mov	r1, r6
   1e252:	f7f6 f953 	bl	144fc <chan_send>
	if (err) {
   1e256:	b100      	cbz	r0, 1e25a <chan_req_send+0x2a>
		req->buf = buf;
   1e258:	60a6      	str	r6, [r4, #8]
}
   1e25a:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1e25c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1e260:	e7fb      	b.n	1e25a <chan_req_send+0x2a>

0001e262 <process_queue>:
{
   1e262:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1e264:	2200      	movs	r2, #0
{
   1e266:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1e268:	2300      	movs	r3, #0
   1e26a:	4608      	mov	r0, r1
{
   1e26c:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1e26e:	f7f7 fed9 	bl	16024 <net_buf_get>
	if (buf) {
   1e272:	4605      	mov	r5, r0
   1e274:	b160      	cbz	r0, 1e290 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1e276:	4601      	mov	r1, r0
   1e278:	2200      	movs	r2, #0
   1e27a:	4620      	mov	r0, r4
   1e27c:	f7f6 f93e 	bl	144fc <chan_send>
		if (err) {
   1e280:	4604      	mov	r4, r0
   1e282:	b118      	cbz	r0, 1e28c <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1e284:	4629      	mov	r1, r5
   1e286:	4630      	mov	r0, r6
   1e288:	f001 f85b 	bl	1f342 <k_queue_prepend>
}
   1e28c:	4620      	mov	r0, r4
   1e28e:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1e290:	f06f 0401 	mvn.w	r4, #1
   1e294:	e7fa      	b.n	1e28c <process_queue+0x2a>

0001e296 <bt_att_chan_send_rsp>:
{
   1e296:	b538      	push	{r3, r4, r5, lr}
   1e298:	4604      	mov	r4, r0
   1e29a:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   1e29c:	f7f6 f92e 	bl	144fc <chan_send>
	if (err) {
   1e2a0:	b130      	cbz	r0, 1e2b0 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1e2a2:	4629      	mov	r1, r5
   1e2a4:	f504 7080 	add.w	r0, r4, #256	; 0x100
}
   1e2a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1e2ac:	f7f7 bf18 	b.w	160e0 <net_buf_put>
}
   1e2b0:	bd38      	pop	{r3, r4, r5, pc}

0001e2b2 <chan_req_sent>:
	if (chan->req) {
   1e2b2:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   1e2b6:	b133      	cbz	r3, 1e2c6 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1e2b8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1e2bc:	2300      	movs	r3, #0
   1e2be:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1e2c2:	f7fc b907 	b.w	1a4d4 <k_work_reschedule>
}
   1e2c6:	4770      	bx	lr

0001e2c8 <find_info_cb>:
{
   1e2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1e2ca:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1e2cc:	6816      	ldr	r6, [r2, #0]
{
   1e2ce:	4605      	mov	r5, r0
   1e2d0:	460f      	mov	r7, r1
   1e2d2:	4614      	mov	r4, r2
	if (!data->rsp) {
   1e2d4:	b963      	cbnz	r3, 1e2f0 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1e2d6:	6850      	ldr	r0, [r2, #4]
   1e2d8:	2101      	movs	r1, #1
   1e2da:	3008      	adds	r0, #8
   1e2dc:	f7f8 f864 	bl	163a8 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1e2e0:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1e2e2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1e2e4:	781b      	ldrb	r3, [r3, #0]
   1e2e6:	2b00      	cmp	r3, #0
   1e2e8:	bf0c      	ite	eq
   1e2ea:	2301      	moveq	r3, #1
   1e2ec:	2302      	movne	r3, #2
   1e2ee:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1e2f0:	68a3      	ldr	r3, [r4, #8]
   1e2f2:	781b      	ldrb	r3, [r3, #0]
   1e2f4:	2b01      	cmp	r3, #1
   1e2f6:	d003      	beq.n	1e300 <find_info_cb+0x38>
   1e2f8:	2b02      	cmp	r3, #2
   1e2fa:	d019      	beq.n	1e330 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1e2fc:	2000      	movs	r0, #0
   1e2fe:	e016      	b.n	1e32e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1e300:	682b      	ldr	r3, [r5, #0]
   1e302:	781b      	ldrb	r3, [r3, #0]
   1e304:	2b00      	cmp	r3, #0
   1e306:	d1f9      	bne.n	1e2fc <find_info_cb+0x34>
   1e308:	6860      	ldr	r0, [r4, #4]
   1e30a:	2104      	movs	r1, #4
   1e30c:	3008      	adds	r0, #8
   1e30e:	f7f8 f84b 	bl	163a8 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1e312:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1e314:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1e316:	885b      	ldrh	r3, [r3, #2]
   1e318:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1e31a:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1e31c:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1e31e:	899b      	ldrh	r3, [r3, #12]
   1e320:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   1e324:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1e326:	2804      	cmp	r0, #4
   1e328:	bf94      	ite	ls
   1e32a:	2000      	movls	r0, #0
   1e32c:	2001      	movhi	r0, #1
}
   1e32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1e330:	682b      	ldr	r3, [r5, #0]
   1e332:	781b      	ldrb	r3, [r3, #0]
   1e334:	2b02      	cmp	r3, #2
   1e336:	d1e1      	bne.n	1e2fc <find_info_cb+0x34>
   1e338:	6860      	ldr	r0, [r4, #4]
   1e33a:	2112      	movs	r1, #18
   1e33c:	3008      	adds	r0, #8
   1e33e:	f7f8 f833 	bl	163a8 <net_buf_simple_add>
   1e342:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e344:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1e346:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1e348:	f823 7b02 	strh.w	r7, [r3], #2
   1e34c:	1c51      	adds	r1, r2, #1
   1e34e:	3211      	adds	r2, #17
   1e350:	f851 0b04 	ldr.w	r0, [r1], #4
   1e354:	f843 0b04 	str.w	r0, [r3], #4
   1e358:	4291      	cmp	r1, r2
   1e35a:	d1f9      	bne.n	1e350 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   1e35c:	6863      	ldr	r3, [r4, #4]
   1e35e:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   1e362:	899b      	ldrh	r3, [r3, #12]
   1e364:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1e366:	2812      	cmp	r0, #18
   1e368:	e7de      	b.n	1e328 <find_info_cb+0x60>

0001e36a <att_exec_write_req>:
   1e36a:	2006      	movs	r0, #6
   1e36c:	4770      	bx	lr

0001e36e <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e36e:	30f8      	adds	r0, #248	; 0xf8
   1e370:	f3bf 8f5b 	dmb	ish
   1e374:	e850 3f00 	ldrex	r3, [r0]
   1e378:	f023 0302 	bic.w	r3, r3, #2
   1e37c:	e840 3200 	strex	r2, r3, [r0]
   1e380:	2a00      	cmp	r2, #0
   1e382:	d1f7      	bne.n	1e374 <chan_cfm_sent+0x6>
   1e384:	f3bf 8f5b 	dmb	ish
}
   1e388:	4770      	bx	lr

0001e38a <chan_rsp_sent>:
   1e38a:	30f8      	adds	r0, #248	; 0xf8
   1e38c:	f3bf 8f5b 	dmb	ish
   1e390:	e850 3f00 	ldrex	r3, [r0]
   1e394:	f023 0301 	bic.w	r3, r3, #1
   1e398:	e840 3200 	strex	r2, r3, [r0]
   1e39c:	2a00      	cmp	r2, #0
   1e39e:	d1f7      	bne.n	1e390 <chan_rsp_sent+0x6>
   1e3a0:	f3bf 8f5b 	dmb	ish
}
   1e3a4:	4770      	bx	lr

0001e3a6 <att_get>:
{
   1e3a6:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1e3a8:	7a83      	ldrb	r3, [r0, #10]
   1e3aa:	2b07      	cmp	r3, #7
   1e3ac:	d001      	beq.n	1e3b2 <att_get+0xc>
		return NULL;
   1e3ae:	2000      	movs	r0, #0
}
   1e3b0:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1e3b2:	2104      	movs	r1, #4
   1e3b4:	f7ff fd10 	bl	1ddd8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1e3b8:	2800      	cmp	r0, #0
   1e3ba:	d0f8      	beq.n	1e3ae <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e3bc:	f3bf 8f5b 	dmb	ish
   1e3c0:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   1e3c4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1e3c8:	075b      	lsls	r3, r3, #29
   1e3ca:	d4f0      	bmi.n	1e3ae <att_get+0x8>
	return att_chan->att;
   1e3cc:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1e3d0:	e7ee      	b.n	1e3b0 <att_get+0xa>

0001e3d2 <bt_att_status>:
{
   1e3d2:	b538      	push	{r3, r4, r5, lr}
   1e3d4:	f3bf 8f5b 	dmb	ish
   1e3d8:	680b      	ldr	r3, [r1, #0]
   1e3da:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1e3de:	07db      	lsls	r3, r3, #31
{
   1e3e0:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1e3e2:	d519      	bpl.n	1e418 <bt_att_status+0x46>
	if (!chan->att) {
   1e3e4:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1e3e8:	b1b0      	cbz	r0, 1e418 <bt_att_status+0x46>
	if (chan->req) {
   1e3ea:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   1e3ee:	b99b      	cbnz	r3, 1e418 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1e3f0:	3004      	adds	r0, #4
   1e3f2:	f7ff fd1d 	bl	1de30 <sys_slist_get>
	if (!node) {
   1e3f6:	4604      	mov	r4, r0
   1e3f8:	b170      	cbz	r0, 1e418 <bt_att_status+0x46>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e3fa:	4601      	mov	r1, r0
   1e3fc:	f1a5 0008 	sub.w	r0, r5, #8
   1e400:	f7f6 f8da 	bl	145b8 <bt_att_chan_req_send>
   1e404:	2800      	cmp	r0, #0
   1e406:	da07      	bge.n	1e418 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1e408:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   1e40c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1e40e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e410:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1e412:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e414:	b902      	cbnz	r2, 1e418 <bt_att_status+0x46>
	list->tail = node;
   1e416:	609c      	str	r4, [r3, #8]
}
   1e418:	bd38      	pop	{r3, r4, r5, pc}

0001e41a <att_req_send_process>:
{
   1e41a:	b570      	push	{r4, r5, r6, lr}
   1e41c:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1e41e:	3004      	adds	r0, #4
   1e420:	f7ff fd06 	bl	1de30 <sys_slist_get>
	if (!node) {
   1e424:	4606      	mov	r6, r0
   1e426:	b1c0      	cbz	r0, 1e45a <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e428:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e42a:	b153      	cbz	r3, 1e442 <att_req_send_process+0x28>
   1e42c:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1e430:	d007      	beq.n	1e442 <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e432:	681c      	ldr	r4, [r3, #0]
   1e434:	b10c      	cbz	r4, 1e43a <att_req_send_process+0x20>
   1e436:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
		if (!chan->req) {
   1e43a:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   1e43e:	b13b      	cbz	r3, 1e450 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e440:	b964      	cbnz	r4, 1e45c <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   1e442:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1e444:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e446:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1e448:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e44a:	b933      	cbnz	r3, 1e45a <att_req_send_process+0x40>
	list->tail = node;
   1e44c:	60ae      	str	r6, [r5, #8]
}
   1e44e:	e004      	b.n	1e45a <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e450:	4631      	mov	r1, r6
   1e452:	f7f6 f8b1 	bl	145b8 <bt_att_chan_req_send>
   1e456:	2800      	cmp	r0, #0
   1e458:	dbf2      	blt.n	1e440 <att_req_send_process+0x26>
}
   1e45a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e45c:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   1e460:	d004      	beq.n	1e46c <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e462:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e466:	b10b      	cbz	r3, 1e46c <att_req_send_process+0x52>
   1e468:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   1e46c:	4620      	mov	r0, r4
   1e46e:	461c      	mov	r4, r3
   1e470:	e7e3      	b.n	1e43a <att_req_send_process+0x20>

0001e472 <write_cb>:
{
   1e472:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e474:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e476:	4601      	mov	r1, r0
{
   1e478:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e47a:	222a      	movs	r2, #42	; 0x2a
   1e47c:	6820      	ldr	r0, [r4, #0]
   1e47e:	f000 fc66 	bl	1ed4e <bt_gatt_check_perm>
   1e482:	4605      	mov	r5, r0
   1e484:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1e486:	bb00      	cbnz	r0, 1e4ca <write_cb+0x58>
	if (!data->req) {
   1e488:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1e48a:	68b7      	ldr	r7, [r6, #8]
   1e48c:	68e2      	ldr	r2, [r4, #12]
   1e48e:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   1e490:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1e492:	bf14      	ite	ne
   1e494:	2300      	movne	r3, #0
   1e496:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1e498:	9301      	str	r3, [sp, #4]
   1e49a:	8a63      	ldrh	r3, [r4, #18]
   1e49c:	9300      	str	r3, [sp, #0]
   1e49e:	4631      	mov	r1, r6
   1e4a0:	8a23      	ldrh	r3, [r4, #16]
   1e4a2:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1e4a4:	1e03      	subs	r3, r0, #0
   1e4a6:	db05      	blt.n	1e4b4 <write_cb+0x42>
   1e4a8:	8a22      	ldrh	r2, [r4, #16]
   1e4aa:	4293      	cmp	r3, r2
   1e4ac:	d10b      	bne.n	1e4c6 <write_cb+0x54>
	data->err = 0U;
   1e4ae:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1e4b0:	2501      	movs	r5, #1
   1e4b2:	e005      	b.n	1e4c0 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1e4b4:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1e4b8:	d305      	bcc.n	1e4c6 <write_cb+0x54>
		return -err;
   1e4ba:	425b      	negs	r3, r3
   1e4bc:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1e4be:	7523      	strb	r3, [r4, #20]
}
   1e4c0:	4628      	mov	r0, r5
   1e4c2:	b003      	add	sp, #12
   1e4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1e4c6:	230e      	movs	r3, #14
   1e4c8:	e7f9      	b.n	1e4be <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1e4ca:	2500      	movs	r5, #0
   1e4cc:	e7f8      	b.n	1e4c0 <write_cb+0x4e>

0001e4ce <bt_att_sent>:
{
   1e4ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1e4d0:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
	struct bt_att *att = chan->att;
   1e4d4:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   1e4d8:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1e4da:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1e4de:	b10b      	cbz	r3, 1e4e4 <bt_att_sent+0x16>
		chan->sent(chan);
   1e4e0:	4638      	mov	r0, r7
   1e4e2:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e4e4:	f3bf 8f5b 	dmb	ish
   1e4e8:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   1e4ec:	e853 2f00 	ldrex	r2, [r3]
   1e4f0:	f022 0210 	bic.w	r2, r2, #16
   1e4f4:	e843 2100 	strex	r1, r2, [r3]
   1e4f8:	2900      	cmp	r1, #0
   1e4fa:	d1f7      	bne.n	1e4ec <bt_att_sent+0x1e>
   1e4fc:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1e500:	b30c      	cbz	r4, 1e546 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1e502:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   1e506:	b98b      	cbnz	r3, 1e52c <bt_att_sent+0x5e>
   1e508:	6863      	ldr	r3, [r4, #4]
   1e50a:	b17b      	cbz	r3, 1e52c <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1e50c:	1d20      	adds	r0, r4, #4
   1e50e:	f7ff fc8f 	bl	1de30 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e512:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1e514:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e516:	4638      	mov	r0, r7
   1e518:	f7ff fe8a 	bl	1e230 <chan_req_send>
   1e51c:	2800      	cmp	r0, #0
   1e51e:	da12      	bge.n	1e546 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   1e520:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1e522:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e524:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1e526:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e528:	b903      	cbnz	r3, 1e52c <bt_att_sent+0x5e>
	list->tail = node;
   1e52a:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1e52c:	f105 01f8 	add.w	r1, r5, #248	; 0xf8
   1e530:	4638      	mov	r0, r7
   1e532:	f7ff fe96 	bl	1e262 <process_queue>
	if (!err) {
   1e536:	b130      	cbz	r0, 1e546 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   1e538:	f104 010c 	add.w	r1, r4, #12
   1e53c:	4638      	mov	r0, r7
}
   1e53e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1e542:	f7ff be8e 	b.w	1e262 <process_queue>
}
   1e546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e548 <read_cb>:
{
   1e548:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1e54c:	f8d2 8000 	ldr.w	r8, [r2]
{
   1e550:	4606      	mov	r6, r0
	data->err = 0x00;
   1e552:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1e554:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1e558:	7317      	strb	r7, [r2, #12]
{
   1e55a:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1e55c:	4631      	mov	r1, r6
   1e55e:	2215      	movs	r2, #21
   1e560:	f000 fbf5 	bl	1ed4e <bt_gatt_check_perm>
   1e564:	4604      	mov	r4, r0
   1e566:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1e568:	b9a0      	cbnz	r0, 1e594 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1e56a:	e9cd 0000 	strd	r0, r0, [sp]
   1e56e:	88ab      	ldrh	r3, [r5, #4]
   1e570:	68aa      	ldr	r2, [r5, #8]
   1e572:	4631      	mov	r1, r6
   1e574:	4640      	mov	r0, r8
   1e576:	f7ff fd2c 	bl	1dfd2 <att_chan_read>
	if (ret < 0) {
   1e57a:	1e03      	subs	r3, r0, #0
   1e57c:	da0c      	bge.n	1e598 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1e57e:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1e582:	bf26      	itte	cs
   1e584:	425b      	negcs	r3, r3
   1e586:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1e588:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1e58a:	732b      	strb	r3, [r5, #12]
}
   1e58c:	4620      	mov	r0, r4
   1e58e:	b002      	add	sp, #8
   1e590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1e594:	463c      	mov	r4, r7
   1e596:	e7f9      	b.n	1e58c <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1e598:	2401      	movs	r4, #1
   1e59a:	e7f7      	b.n	1e58c <read_cb+0x44>

0001e59c <bt_att_chan_create_pdu>:
{
   1e59c:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1e59e:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   1e5a2:	3201      	adds	r2, #1
   1e5a4:	429a      	cmp	r2, r3
{
   1e5a6:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1e5a8:	d81b      	bhi.n	1e5e2 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   1e5aa:	4608      	mov	r0, r1
   1e5ac:	f7ff fc85 	bl	1deba <att_op_get_type>
   1e5b0:	2802      	cmp	r0, #2
   1e5b2:	d001      	beq.n	1e5b8 <bt_att_chan_create_pdu+0x1c>
   1e5b4:	2804      	cmp	r0, #4
   1e5b6:	d10f      	bne.n	1e5d8 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1e5b8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1e5bc:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1e5be:	2100      	movs	r1, #0
   1e5c0:	4608      	mov	r0, r1
   1e5c2:	f7ff fb58 	bl	1dc76 <bt_l2cap_create_pdu_timeout>
   1e5c6:	4604      	mov	r4, r0
	if (!buf) {
   1e5c8:	b120      	cbz	r0, 1e5d4 <bt_att_chan_create_pdu+0x38>
   1e5ca:	2101      	movs	r1, #1
   1e5cc:	3008      	adds	r0, #8
   1e5ce:	f7f7 feeb 	bl	163a8 <net_buf_simple_add>
	hdr->code = op;
   1e5d2:	7005      	strb	r5, [r0, #0]
}
   1e5d4:	4620      	mov	r0, r4
   1e5d6:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   1e5d8:	f04f 32ff 	mov.w	r2, #4294967295
   1e5dc:	f04f 33ff 	mov.w	r3, #4294967295
   1e5e0:	e7ed      	b.n	1e5be <bt_att_chan_create_pdu+0x22>
		return NULL;
   1e5e2:	2400      	movs	r4, #0
   1e5e4:	e7f6      	b.n	1e5d4 <bt_att_chan_create_pdu+0x38>

0001e5e6 <bt_att_create_pdu>:
{
   1e5e6:	b570      	push	{r4, r5, r6, lr}
   1e5e8:	460e      	mov	r6, r1
   1e5ea:	4615      	mov	r5, r2
	att = att_get(conn);
   1e5ec:	f7ff fedb 	bl	1e3a6 <att_get>
	if (!att) {
   1e5f0:	b170      	cbz	r0, 1e610 <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e5f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1e5f4:	b163      	cbz	r3, 1e610 <bt_att_create_pdu+0x2a>
   1e5f6:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1e5fa:	d009      	beq.n	1e610 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e5fc:	681b      	ldr	r3, [r3, #0]
   1e5fe:	b10b      	cbz	r3, 1e604 <bt_att_create_pdu+0x1e>
   1e600:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1e604:	1c6a      	adds	r2, r5, #1
   1e606:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   1e60a:	428a      	cmp	r2, r1
   1e60c:	d902      	bls.n	1e614 <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e60e:	b93b      	cbnz	r3, 1e620 <bt_att_create_pdu+0x3a>
}
   1e610:	2000      	movs	r0, #0
   1e612:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1e614:	462a      	mov	r2, r5
   1e616:	4631      	mov	r1, r6
}
   1e618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1e61c:	f7ff bfbe 	b.w	1e59c <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e620:	f513 74aa 	adds.w	r4, r3, #340	; 0x154
   1e624:	d004      	beq.n	1e630 <bt_att_create_pdu+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e626:	f8d3 4154 	ldr.w	r4, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e62a:	b10c      	cbz	r4, 1e630 <bt_att_create_pdu+0x4a>
   1e62c:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
{
   1e630:	4618      	mov	r0, r3
   1e632:	4623      	mov	r3, r4
   1e634:	e7e7      	b.n	1e606 <bt_att_create_pdu+0x20>

0001e636 <att_read_blob_req>:
{
   1e636:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1e638:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1e63a:	8813      	ldrh	r3, [r2, #0]
   1e63c:	8852      	ldrh	r2, [r2, #2]
   1e63e:	9200      	str	r2, [sp, #0]
   1e640:	210c      	movs	r1, #12
   1e642:	220d      	movs	r2, #13
   1e644:	f7f6 fab8 	bl	14bb8 <att_read_rsp>
}
   1e648:	b003      	add	sp, #12
   1e64a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e64e <att_read_req>:
{
   1e64e:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1e650:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1e652:	2200      	movs	r2, #0
   1e654:	881b      	ldrh	r3, [r3, #0]
   1e656:	9200      	str	r2, [sp, #0]
   1e658:	210a      	movs	r1, #10
   1e65a:	220b      	movs	r2, #11
   1e65c:	f7f6 faac 	bl	14bb8 <att_read_rsp>
}
   1e660:	b003      	add	sp, #12
   1e662:	f85d fb04 	ldr.w	pc, [sp], #4

0001e666 <bt_att_init>:
	bt_gatt_init();
   1e666:	f7f6 becb 	b.w	15400 <bt_gatt_init>

0001e66a <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1e66a:	898a      	ldrh	r2, [r1, #12]
   1e66c:	6889      	ldr	r1, [r1, #8]
   1e66e:	2300      	movs	r3, #0
   1e670:	f7f6 bc58 	b.w	14f24 <att_handle_rsp>

0001e674 <att_handle_find_type_rsp>:
   1e674:	f7ff bff9 	b.w	1e66a <att_handle_find_info_rsp>

0001e678 <att_handle_read_type_rsp>:
   1e678:	f7ff bff7 	b.w	1e66a <att_handle_find_info_rsp>

0001e67c <att_handle_read_rsp>:
   1e67c:	f7ff bff5 	b.w	1e66a <att_handle_find_info_rsp>

0001e680 <att_handle_read_blob_rsp>:
   1e680:	f7ff bff3 	b.w	1e66a <att_handle_find_info_rsp>

0001e684 <att_handle_read_mult_rsp>:
   1e684:	f7ff bff1 	b.w	1e66a <att_handle_find_info_rsp>

0001e688 <att_handle_read_group_rsp>:
   1e688:	f7ff bfef 	b.w	1e66a <att_handle_find_info_rsp>

0001e68c <att_handle_write_rsp>:
   1e68c:	f7ff bfed 	b.w	1e66a <att_handle_find_info_rsp>

0001e690 <att_handle_prepare_write_rsp>:
   1e690:	f7ff bfeb 	b.w	1e66a <att_handle_find_info_rsp>

0001e694 <att_handle_exec_write_rsp>:
   1e694:	f7ff bfe9 	b.w	1e66a <att_handle_find_info_rsp>

0001e698 <att_confirm>:
   1e698:	f7ff bfe7 	b.w	1e66a <att_handle_find_info_rsp>

0001e69c <att_mtu_rsp>:
{
   1e69c:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   1e69e:	688e      	ldr	r6, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1e6a0:	8833      	ldrh	r3, [r6, #0]
   1e6a2:	2b16      	cmp	r3, #22
{
   1e6a4:	4604      	mov	r4, r0
   1e6a6:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1e6a8:	d806      	bhi.n	1e6b8 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1e6aa:	2200      	movs	r2, #0
   1e6ac:	2304      	movs	r3, #4
   1e6ae:	4611      	mov	r1, r2
}
   1e6b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1e6b4:	f7f6 bc36 	b.w	14f24 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1e6b8:	2317      	movs	r3, #23
   1e6ba:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1e6be:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   1e6c2:	f7ff fc40 	bl	1df46 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1e6c6:	89aa      	ldrh	r2, [r5, #12]
   1e6c8:	2300      	movs	r3, #0
   1e6ca:	4631      	mov	r1, r6
   1e6cc:	4620      	mov	r0, r4
   1e6ce:	e7ef      	b.n	1e6b0 <att_mtu_rsp+0x14>

0001e6d0 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   1e6d0:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
   1e6d4:	f7f6 bc68 	b.w	14fa8 <bt_att_disconnected>

0001e6d8 <gatt_ccc_changed>:
{
   1e6d8:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1e6da:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1e6dc:	895a      	ldrh	r2, [r3, #10]
   1e6de:	428a      	cmp	r2, r1
   1e6e0:	d003      	beq.n	1e6ea <gatt_ccc_changed+0x12>
		ccc->value = value;
   1e6e2:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1e6e4:	68db      	ldr	r3, [r3, #12]
   1e6e6:	b103      	cbz	r3, 1e6ea <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1e6e8:	4718      	bx	r3
}
   1e6ea:	4770      	bx	lr

0001e6ec <gatt_indicate_rsp>:
{
   1e6ec:	b510      	push	{r4, lr}
   1e6ee:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1e6f0:	68a3      	ldr	r3, [r4, #8]
{
   1e6f2:	460a      	mov	r2, r1
	if (params->func) {
   1e6f4:	b10b      	cbz	r3, 1e6fa <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1e6f6:	4621      	mov	r1, r4
   1e6f8:	4798      	blx	r3
	params->_ref--;
   1e6fa:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1e6fc:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1e6fe:	3b01      	subs	r3, #1
   1e700:	b2db      	uxtb	r3, r3
   1e702:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1e704:	b122      	cbz	r2, 1e710 <gatt_indicate_rsp+0x24>
   1e706:	b91b      	cbnz	r3, 1e710 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1e708:	4620      	mov	r0, r4
}
   1e70a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1e70e:	4710      	bx	r2
}
   1e710:	bd10      	pop	{r4, pc}

0001e712 <match_uuid>:
	data->attr = attr;
   1e712:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1e714:	8091      	strh	r1, [r2, #4]
}
   1e716:	2000      	movs	r0, #0
   1e718:	4770      	bx	lr

0001e71a <gen_hash_m>:
{
   1e71a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1e71c:	6807      	ldr	r7, [r0, #0]
   1e71e:	783d      	ldrb	r5, [r7, #0]
{
   1e720:	b089      	sub	sp, #36	; 0x24
   1e722:	4606      	mov	r6, r0
   1e724:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1e726:	b10d      	cbz	r5, 1e72c <gen_hash_m+0x12>
	switch (u16->val) {
   1e728:	2501      	movs	r5, #1
   1e72a:	e014      	b.n	1e756 <gen_hash_m+0x3c>
   1e72c:	887b      	ldrh	r3, [r7, #2]
   1e72e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1e732:	d004      	beq.n	1e73e <gen_hash_m+0x24>
   1e734:	d812      	bhi.n	1e75c <gen_hash_m+0x42>
   1e736:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1e73a:	2b03      	cmp	r3, #3
   1e73c:	d8f4      	bhi.n	1e728 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1e73e:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1e742:	2202      	movs	r2, #2
   1e744:	f10d 010e 	add.w	r1, sp, #14
   1e748:	4620      	mov	r0, r4
   1e74a:	f7fe fcc7 	bl	1d0dc <tc_cmac_update>
   1e74e:	b9e0      	cbnz	r0, 1e78a <gen_hash_m+0x70>
			state->err = -EINVAL;
   1e750:	f06f 0315 	mvn.w	r3, #21
   1e754:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1e756:	4628      	mov	r0, r5
   1e758:	b009      	add	sp, #36	; 0x24
   1e75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1e75c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1e760:	33ff      	adds	r3, #255	; 0xff
   1e762:	b29b      	uxth	r3, r3
   1e764:	2b04      	cmp	r3, #4
   1e766:	d8df      	bhi.n	1e728 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1e768:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1e76c:	2202      	movs	r2, #2
   1e76e:	f10d 010e 	add.w	r1, sp, #14
   1e772:	4620      	mov	r0, r4
   1e774:	f7fe fcb2 	bl	1d0dc <tc_cmac_update>
   1e778:	2800      	cmp	r0, #0
   1e77a:	d0e9      	beq.n	1e750 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1e77c:	887b      	ldrh	r3, [r7, #2]
   1e77e:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1e782:	2202      	movs	r2, #2
   1e784:	f10d 010e 	add.w	r1, sp, #14
   1e788:	e017      	b.n	1e7ba <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1e78a:	887b      	ldrh	r3, [r7, #2]
   1e78c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1e790:	2202      	movs	r2, #2
   1e792:	f10d 010e 	add.w	r1, sp, #14
   1e796:	4620      	mov	r0, r4
   1e798:	f7fe fca0 	bl	1d0dc <tc_cmac_update>
   1e79c:	2800      	cmp	r0, #0
   1e79e:	d0d7      	beq.n	1e750 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1e7a0:	2000      	movs	r0, #0
   1e7a2:	2310      	movs	r3, #16
   1e7a4:	eb0d 0203 	add.w	r2, sp, r3
   1e7a8:	6877      	ldr	r7, [r6, #4]
   1e7aa:	9000      	str	r0, [sp, #0]
   1e7ac:	4631      	mov	r1, r6
   1e7ae:	47b8      	blx	r7
		if (len < 0) {
   1e7b0:	1e02      	subs	r2, r0, #0
   1e7b2:	da01      	bge.n	1e7b8 <gen_hash_m+0x9e>
			state->err = len;
   1e7b4:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1e7b6:	e7ce      	b.n	1e756 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1e7b8:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1e7ba:	4620      	mov	r0, r4
   1e7bc:	f7fe fc8e 	bl	1d0dc <tc_cmac_update>
   1e7c0:	2800      	cmp	r0, #0
   1e7c2:	d1b1      	bne.n	1e728 <gen_hash_m+0xe>
   1e7c4:	e7c4      	b.n	1e750 <gen_hash_m+0x36>

0001e7c6 <bt_addr_le_cmp>:
   1e7c6:	2207      	movs	r2, #7
   1e7c8:	f000 bed2 	b.w	1f570 <memcmp>

0001e7cc <find_ccc_cfg>:
{
   1e7cc:	b513      	push	{r0, r1, r4, lr}
   1e7ce:	1c4a      	adds	r2, r1, #1
   1e7d0:	460c      	mov	r4, r1
		if (conn) {
   1e7d2:	b140      	cbz	r0, 1e7e6 <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1e7d4:	7809      	ldrb	r1, [r1, #0]
   1e7d6:	f7ff f98b 	bl	1daf0 <bt_conn_is_peer_addr_le>
   1e7da:	2800      	cmp	r0, #0
	return NULL;
   1e7dc:	bf08      	it	eq
   1e7de:	2400      	moveq	r4, #0
}
   1e7e0:	4620      	mov	r0, r4
   1e7e2:	b002      	add	sp, #8
   1e7e4:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1e7e6:	9000      	str	r0, [sp, #0]
   1e7e8:	4669      	mov	r1, sp
   1e7ea:	f8cd 0003 	str.w	r0, [sp, #3]
   1e7ee:	4610      	mov	r0, r2
   1e7f0:	f7ff ffe9 	bl	1e7c6 <bt_addr_le_cmp>
   1e7f4:	2800      	cmp	r0, #0
	return NULL;
   1e7f6:	bf18      	it	ne
   1e7f8:	2400      	movne	r4, #0
   1e7fa:	e7f1      	b.n	1e7e0 <find_ccc_cfg+0x14>

0001e7fc <bt_addr_le_copy>:
   1e7fc:	680b      	ldr	r3, [r1, #0]
   1e7fe:	6003      	str	r3, [r0, #0]
   1e800:	888b      	ldrh	r3, [r1, #4]
   1e802:	8083      	strh	r3, [r0, #4]
   1e804:	798b      	ldrb	r3, [r1, #6]
   1e806:	7183      	strb	r3, [r0, #6]
}
   1e808:	4770      	bx	lr

0001e80a <sc_save>:
{
   1e80a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e80e:	4680      	mov	r8, r0
   1e810:	460f      	mov	r7, r1
   1e812:	4616      	mov	r6, r2
   1e814:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1e816:	f7f6 fd17 	bl	15248 <find_sc_cfg>
	if (!cfg) {
   1e81a:	4604      	mov	r4, r0
   1e81c:	b960      	cbnz	r0, 1e838 <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1e81e:	4669      	mov	r1, sp
   1e820:	9000      	str	r0, [sp, #0]
   1e822:	f8cd 0003 	str.w	r0, [sp, #3]
   1e826:	f7f6 fd0f 	bl	15248 <find_sc_cfg>
		if (!cfg) {
   1e82a:	4604      	mov	r4, r0
   1e82c:	b178      	cbz	r0, 1e84e <sc_save+0x44>
		cfg->id = id;
   1e82e:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1e832:	4639      	mov	r1, r7
   1e834:	f7ff ffe2 	bl	1e7fc <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1e838:	8922      	ldrh	r2, [r4, #8]
   1e83a:	8963      	ldrh	r3, [r4, #10]
   1e83c:	b91a      	cbnz	r2, 1e846 <sc_save+0x3c>
   1e83e:	b923      	cbnz	r3, 1e84a <sc_save+0x40>
		cfg->data.start = start;
   1e840:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1e842:	8165      	strh	r5, [r4, #10]
   1e844:	e003      	b.n	1e84e <sc_save+0x44>
	if (new_start >= *start && new_end <= *end) {
   1e846:	4296      	cmp	r6, r2
   1e848:	d304      	bcc.n	1e854 <sc_save+0x4a>
   1e84a:	429d      	cmp	r5, r3
   1e84c:	d8f9      	bhi.n	1e842 <sc_save+0x38>
}
   1e84e:	b002      	add	sp, #8
   1e850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   1e854:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1e856:	e7f8      	b.n	1e84a <sc_save+0x40>

0001e858 <bt_gatt_attr_write_ccc>:
{
   1e858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1e85c:	461f      	mov	r7, r3
   1e85e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1e862:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1e866:	4606      	mov	r6, r0
   1e868:	4688      	mov	r8, r1
	if (offset) {
   1e86a:	2b00      	cmp	r3, #0
   1e86c:	d144      	bne.n	1e8f8 <bt_gatt_attr_write_ccc+0xa0>
	if (!len || len > sizeof(uint16_t)) {
   1e86e:	1e7b      	subs	r3, r7, #1
   1e870:	2b01      	cmp	r3, #1
   1e872:	d844      	bhi.n	1e8fe <bt_gatt_attr_write_ccc+0xa6>
	if (len < sizeof(uint16_t)) {
   1e874:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1e876:	7815      	ldrb	r5, [r2, #0]
   1e878:	bf18      	it	ne
   1e87a:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1e87c:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1e87e:	bf0c      	ite	eq
   1e880:	b2ad      	uxtheq	r5, r5
   1e882:	ea45 2502 	orrne.w	r5, r5, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1e886:	f7ff ffa1 	bl	1e7cc <find_ccc_cfg>
	if (!cfg) {
   1e88a:	4604      	mov	r4, r0
   1e88c:	b980      	cbnz	r0, 1e8b0 <bt_gatt_attr_write_ccc+0x58>
		if (!value) {
   1e88e:	b91d      	cbnz	r5, 1e898 <bt_gatt_attr_write_ccc+0x40>
			return len;
   1e890:	4638      	mov	r0, r7
}
   1e892:	b003      	add	sp, #12
   1e894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1e898:	4649      	mov	r1, r9
   1e89a:	f7ff ff97 	bl	1e7cc <find_ccc_cfg>
		if (!cfg) {
   1e89e:	4604      	mov	r4, r0
   1e8a0:	b380      	cbz	r0, 1e904 <bt_gatt_attr_write_ccc+0xac>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1e8a2:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1e8a6:	3001      	adds	r0, #1
   1e8a8:	f7ff ffa8 	bl	1e7fc <bt_addr_le_copy>
		cfg->id = conn->id;
   1e8ac:	7a33      	ldrb	r3, [r6, #8]
   1e8ae:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1e8b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1e8b4:	b9a3      	cbnz	r3, 1e8e0 <bt_gatt_attr_write_ccc+0x88>
	if (cfg->value != ccc->value) {
   1e8b6:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1e8ba:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1e8bc:	42ab      	cmp	r3, r5
   1e8be:	d003      	beq.n	1e8c8 <bt_gatt_attr_write_ccc+0x70>
		gatt_ccc_changed(attr, ccc);
   1e8c0:	4649      	mov	r1, r9
   1e8c2:	4640      	mov	r0, r8
   1e8c4:	f7ff ff08 	bl	1e6d8 <gatt_ccc_changed>
	if (!value) {
   1e8c8:	2d00      	cmp	r5, #0
   1e8ca:	d1e1      	bne.n	1e890 <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1e8cc:	4669      	mov	r1, sp
   1e8ce:	1c60      	adds	r0, r4, #1
   1e8d0:	9500      	str	r5, [sp, #0]
   1e8d2:	f8cd 5003 	str.w	r5, [sp, #3]
   1e8d6:	f7ff ff91 	bl	1e7fc <bt_addr_le_copy>
	cfg->id = 0U;
   1e8da:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1e8dc:	8125      	strh	r5, [r4, #8]
}
   1e8de:	e7d7      	b.n	1e890 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1e8e0:	462a      	mov	r2, r5
   1e8e2:	4641      	mov	r1, r8
   1e8e4:	4630      	mov	r0, r6
   1e8e6:	4798      	blx	r3
		if (write < 0) {
   1e8e8:	2800      	cmp	r0, #0
   1e8ea:	dbd2      	blt.n	1e892 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1e8ec:	3801      	subs	r0, #1
   1e8ee:	2801      	cmp	r0, #1
   1e8f0:	d9e1      	bls.n	1e8b6 <bt_gatt_attr_write_ccc+0x5e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1e8f2:	f06f 000d 	mvn.w	r0, #13
   1e8f6:	e7cc      	b.n	1e892 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1e8f8:	f06f 0006 	mvn.w	r0, #6
   1e8fc:	e7c9      	b.n	1e892 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1e8fe:	f06f 000c 	mvn.w	r0, #12
   1e902:	e7c6      	b.n	1e892 <bt_gatt_attr_write_ccc+0x3a>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1e904:	f06f 0010 	mvn.w	r0, #16
   1e908:	e7c3      	b.n	1e892 <bt_gatt_attr_write_ccc+0x3a>

0001e90a <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   1e90a:	2300      	movs	r3, #0
   1e90c:	6003      	str	r3, [r0, #0]
   1e90e:	6043      	str	r3, [r0, #4]
   1e910:	6083      	str	r3, [r0, #8]
}
   1e912:	4770      	bx	lr

0001e914 <sc_clear>:
{
   1e914:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1e916:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   1e91a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1e91c:	4629      	mov	r1, r5
   1e91e:	7a00      	ldrb	r0, [r0, #8]
   1e920:	f7fe ffb1 	bl	1d886 <bt_addr_le_is_bonded>
   1e924:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1e926:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1e928:	f7f6 fc8e 	bl	15248 <find_sc_cfg>
		if (cfg) {
   1e92c:	b118      	cbz	r0, 1e936 <sc_clear+0x22>
}
   1e92e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   1e932:	f7ff bfea 	b.w	1e90a <clear_sc_cfg>
}
   1e936:	bd38      	pop	{r3, r4, r5, pc}

0001e938 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1e938:	2a02      	cmp	r2, #2
{
   1e93a:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1e93c:	d108      	bne.n	1e950 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1e93e:	2300      	movs	r3, #0
   1e940:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1e944:	461a      	mov	r2, r3
   1e946:	7a00      	ldrb	r0, [r0, #8]
   1e948:	f7ff ff5f 	bl	1e80a <sc_save>
}
   1e94c:	2002      	movs	r0, #2
   1e94e:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1e950:	f7ff ffe0 	bl	1e914 <sc_clear>
   1e954:	e7fa      	b.n	1e94c <sc_ccc_cfg_write+0x14>

0001e956 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   1e956:	b538      	push	{r3, r4, r5, lr}
   1e958:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   1e95c:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   1e95e:	460c      	mov	r4, r1
   1e960:	4611      	mov	r1, r2
	if (offset > value_len) {
   1e962:	d30a      	bcc.n	1e97a <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   1e964:	1aad      	subs	r5, r5, r2
   1e966:	42a5      	cmp	r5, r4
   1e968:	bfa8      	it	ge
   1e96a:	4625      	movge	r5, r4
   1e96c:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e96e:	462a      	mov	r2, r5
   1e970:	4419      	add	r1, r3
   1e972:	f000 fe0b 	bl	1f58c <memcpy>
}
   1e976:	4628      	mov	r0, r5
   1e978:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1e97a:	f06f 0506 	mvn.w	r5, #6
   1e97e:	e7fa      	b.n	1e976 <bt_gatt_attr_read.constprop.0+0x20>

0001e980 <bt_gatt_attr_read_ccc>:
{
   1e980:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1e982:	68c9      	ldr	r1, [r1, #12]
{
   1e984:	b085      	sub	sp, #20
   1e986:	4614      	mov	r4, r2
   1e988:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   1e98a:	f7ff ff1f 	bl	1e7cc <find_ccc_cfg>
	if (cfg) {
   1e98e:	b100      	cbz	r0, 1e992 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   1e990:	8900      	ldrh	r0, [r0, #8]
   1e992:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1e996:	2302      	movs	r3, #2
   1e998:	9300      	str	r3, [sp, #0]
   1e99a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1e99e:	f10d 030e 	add.w	r3, sp, #14
   1e9a2:	4629      	mov	r1, r5
   1e9a4:	4620      	mov	r0, r4
   1e9a6:	f7ff ffd6 	bl	1e956 <bt_gatt_attr_read.constprop.0>
}
   1e9aa:	b005      	add	sp, #20
   1e9ac:	bd30      	pop	{r4, r5, pc}

0001e9ae <bt_gatt_attr_read_service>:
{
   1e9ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1e9b0:	460c      	mov	r4, r1
   1e9b2:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   1e9b4:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   1e9b6:	781c      	ldrb	r4, [r3, #0]
{
   1e9b8:	4610      	mov	r0, r2
   1e9ba:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1e9be:	b954      	cbnz	r4, 1e9d6 <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1e9c0:	885b      	ldrh	r3, [r3, #2]
   1e9c2:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1e9c6:	2302      	movs	r3, #2
   1e9c8:	9300      	str	r3, [sp, #0]
   1e9ca:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1e9ce:	f7ff ffc2 	bl	1e956 <bt_gatt_attr_read.constprop.0>
}
   1e9d2:	b004      	add	sp, #16
   1e9d4:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1e9d6:	2410      	movs	r4, #16
   1e9d8:	9400      	str	r4, [sp, #0]
   1e9da:	3301      	adds	r3, #1
   1e9dc:	e7f7      	b.n	1e9ce <bt_gatt_attr_read_service+0x20>

0001e9de <cf_read>:
{
   1e9de:	b530      	push	{r4, r5, lr}
   1e9e0:	b085      	sub	sp, #20
   1e9e2:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   1e9e4:	2300      	movs	r3, #0
{
   1e9e6:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   1e9e8:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   1e9ec:	f7f6 fc0e 	bl	1520c <find_cf_cfg>
	if (cfg) {
   1e9f0:	b110      	cbz	r0, 1e9f8 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   1e9f2:	7a03      	ldrb	r3, [r0, #8]
   1e9f4:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1e9f8:	2301      	movs	r3, #1
   1e9fa:	9300      	str	r3, [sp, #0]
   1e9fc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1ea00:	ab03      	add	r3, sp, #12
   1ea02:	4629      	mov	r1, r5
   1ea04:	4620      	mov	r0, r4
   1ea06:	f7ff ffa6 	bl	1e956 <bt_gatt_attr_read.constprop.0>
}
   1ea0a:	b005      	add	sp, #20
   1ea0c:	bd30      	pop	{r4, r5, pc}

0001ea0e <read_name>:
{
   1ea0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea12:	4614      	mov	r4, r2
   1ea14:	461d      	mov	r5, r3
   1ea16:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   1ea1a:	f7f4 f981 	bl	12d20 <bt_get_name>
   1ea1e:	4606      	mov	r6, r0
				 strlen(name));
   1ea20:	f7ed fbda 	bl	c1d8 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1ea24:	b280      	uxth	r0, r0
   1ea26:	9006      	str	r0, [sp, #24]
   1ea28:	4633      	mov	r3, r6
   1ea2a:	463a      	mov	r2, r7
   1ea2c:	4629      	mov	r1, r5
   1ea2e:	4620      	mov	r0, r4
}
   1ea30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1ea34:	f7ff bf8f 	b.w	1e956 <bt_gatt_attr_read.constprop.0>

0001ea38 <read_appearance>:
{
   1ea38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1ea3a:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1ea3c:	2300      	movs	r3, #0
   1ea3e:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1ea42:	2302      	movs	r3, #2
   1ea44:	9300      	str	r3, [sp, #0]
{
   1ea46:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1ea48:	f10d 030e 	add.w	r3, sp, #14
   1ea4c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1ea50:	f7ff ff81 	bl	1e956 <bt_gatt_attr_read.constprop.0>
}
   1ea54:	b005      	add	sp, #20
   1ea56:	f85d fb04 	ldr.w	pc, [sp], #4

0001ea5a <clear_cf_cfg>:
{
   1ea5a:	b513      	push	{r0, r1, r4, lr}
   1ea5c:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ea5e:	2400      	movs	r4, #0
   1ea60:	4669      	mov	r1, sp
   1ea62:	3001      	adds	r0, #1
   1ea64:	9400      	str	r4, [sp, #0]
   1ea66:	f8cd 4003 	str.w	r4, [sp, #3]
   1ea6a:	f7ff fec7 	bl	1e7fc <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   1ea6e:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ea70:	320c      	adds	r2, #12
   1ea72:	f3bf 8f5b 	dmb	ish
   1ea76:	e852 3f00 	ldrex	r3, [r2]
   1ea7a:	e842 4100 	strex	r1, r4, [r2]
   1ea7e:	2900      	cmp	r1, #0
   1ea80:	d1f9      	bne.n	1ea76 <clear_cf_cfg+0x1c>
   1ea82:	f3bf 8f5b 	dmb	ish
}
   1ea86:	b002      	add	sp, #8
   1ea88:	bd10      	pop	{r4, pc}

0001ea8a <gatt_write_ccc_buf>:
{
   1ea8a:	b538      	push	{r3, r4, r5, lr}
   1ea8c:	f100 0508 	add.w	r5, r0, #8
   1ea90:	2102      	movs	r1, #2
   1ea92:	4628      	mov	r0, r5
   1ea94:	4614      	mov	r4, r2
   1ea96:	f7f7 fc87 	bl	163a8 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   1ea9a:	8963      	ldrh	r3, [r4, #10]
	net_buf_simple_add_le16(&buf->b, val);
   1ea9c:	89a1      	ldrh	r1, [r4, #12]
   1ea9e:	8003      	strh	r3, [r0, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1eaa0:	3410      	adds	r4, #16
   1eaa2:	4628      	mov	r0, r5
   1eaa4:	f000 faaf 	bl	1f006 <net_buf_simple_add_le16>
   1eaa8:	f3bf 8f5b 	dmb	ish
   1eaac:	e854 3f00 	ldrex	r3, [r4]
   1eab0:	f043 0304 	orr.w	r3, r3, #4
   1eab4:	e844 3200 	strex	r2, r3, [r4]
   1eab8:	2a00      	cmp	r2, #0
   1eaba:	d1f7      	bne.n	1eaac <gatt_write_ccc_buf+0x22>
   1eabc:	f3bf 8f5b 	dmb	ish
}
   1eac0:	2000      	movs	r0, #0
   1eac2:	bd38      	pop	{r3, r4, r5, pc}

0001eac4 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1eac4:	2301      	movs	r3, #1
   1eac6:	408b      	lsls	r3, r1
   1eac8:	f3bf 8f5b 	dmb	ish
   1eacc:	e850 2f00 	ldrex	r2, [r0]
   1ead0:	431a      	orrs	r2, r3
   1ead2:	e840 2100 	strex	r1, r2, [r0]
   1ead6:	2900      	cmp	r1, #0
   1ead8:	d1f8      	bne.n	1eacc <atomic_set_bit+0x8>
   1eada:	f3bf 8f5b 	dmb	ish
}
   1eade:	4770      	bx	lr

0001eae0 <sc_restore_rsp>:
{
   1eae0:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1eae2:	f7f6 fb93 	bl	1520c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1eae6:	b140      	cbz	r0, 1eafa <sc_restore_rsp+0x1a>
   1eae8:	7a03      	ldrb	r3, [r0, #8]
   1eaea:	07db      	lsls	r3, r3, #31
   1eaec:	d505      	bpl.n	1eafa <sc_restore_rsp+0x1a>
}
   1eaee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1eaf2:	2100      	movs	r1, #0
   1eaf4:	300c      	adds	r0, #12
   1eaf6:	f7ff bfe5 	b.w	1eac4 <atomic_set_bit>
}
   1eafa:	bd08      	pop	{r3, pc}

0001eafc <cf_write>:
{
   1eafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb00:	4698      	mov	r8, r3
   1eb02:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1eb06:	2b01      	cmp	r3, #1
{
   1eb08:	4606      	mov	r6, r0
   1eb0a:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1eb0c:	d830      	bhi.n	1eb70 <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   1eb0e:	4443      	add	r3, r8
   1eb10:	2b01      	cmp	r3, #1
   1eb12:	4645      	mov	r5, r8
   1eb14:	dc2f      	bgt.n	1eb76 <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   1eb16:	f7f6 fb79 	bl	1520c <find_cf_cfg>
	if (!cfg) {
   1eb1a:	4604      	mov	r4, r0
   1eb1c:	b918      	cbnz	r0, 1eb26 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1eb1e:	f7f6 fb75 	bl	1520c <find_cf_cfg>
	if (!cfg) {
   1eb22:	4604      	mov	r4, r0
   1eb24:	b350      	cbz	r0, 1eb7c <cf_write+0x80>
{
   1eb26:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1eb28:	f1b8 0f00 	cmp.w	r8, #0
   1eb2c:	d10e      	bne.n	1eb4c <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1eb2e:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1eb32:	1c60      	adds	r0, r4, #1
   1eb34:	f7ff fe62 	bl	1e7fc <bt_addr_le_copy>
	cfg->id = conn->id;
   1eb38:	4620      	mov	r0, r4
   1eb3a:	7a33      	ldrb	r3, [r6, #8]
   1eb3c:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1eb40:	2100      	movs	r1, #0
   1eb42:	f7ff ffbf 	bl	1eac4 <atomic_set_bit>
}
   1eb46:	4628      	mov	r0, r5
   1eb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1eb4c:	7a20      	ldrb	r0, [r4, #8]
   1eb4e:	fa20 f301 	lsr.w	r3, r0, r1
   1eb52:	07da      	lsls	r2, r3, #31
   1eb54:	d503      	bpl.n	1eb5e <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   1eb56:	783b      	ldrb	r3, [r7, #0]
   1eb58:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1eb5a:	07db      	lsls	r3, r3, #31
   1eb5c:	d511      	bpl.n	1eb82 <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1eb5e:	3101      	adds	r1, #1
   1eb60:	2903      	cmp	r1, #3
   1eb62:	d1e1      	bne.n	1eb28 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1eb64:	783b      	ldrb	r3, [r7, #0]
   1eb66:	f003 0307 	and.w	r3, r3, #7
   1eb6a:	4318      	orrs	r0, r3
   1eb6c:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1eb6e:	e7de      	b.n	1eb2e <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1eb70:	f06f 0506 	mvn.w	r5, #6
   1eb74:	e7e7      	b.n	1eb46 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1eb76:	f06f 050c 	mvn.w	r5, #12
   1eb7a:	e7e4      	b.n	1eb46 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1eb7c:	f06f 0510 	mvn.w	r5, #16
   1eb80:	e7e1      	b.n	1eb46 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1eb82:	f06f 0512 	mvn.w	r5, #18
   1eb86:	e7de      	b.n	1eb46 <cf_write+0x4a>

0001eb88 <gatt_sub_remove>:
{
   1eb88:	b538      	push	{r3, r4, r5, lr}
   1eb8a:	460c      	mov	r4, r1
	if (params) {
   1eb8c:	4619      	mov	r1, r3
   1eb8e:	b16b      	cbz	r3, 1ebac <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1eb90:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   1eb94:	695b      	ldr	r3, [r3, #20]
   1eb96:	b982      	cbnz	r2, 1ebba <gatt_sub_remove+0x32>
   1eb98:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   1eb9a:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1eb9c:	4295      	cmp	r5, r2
   1eb9e:	d100      	bne.n	1eba2 <gatt_sub_remove+0x1a>
	list->tail = node;
   1eba0:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1eba2:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1eba4:	680d      	ldr	r5, [r1, #0]
   1eba6:	614b      	str	r3, [r1, #20]
   1eba8:	461a      	mov	r2, r3
   1ebaa:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   1ebac:	68a3      	ldr	r3, [r4, #8]
   1ebae:	b953      	cbnz	r3, 1ebc6 <gatt_sub_remove+0x3e>
		gatt_sub_free(sub);
   1ebb0:	4620      	mov	r0, r4
}
   1ebb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gatt_sub_free(sub);
   1ebb6:	f7f6 bb75 	b.w	152a4 <gatt_sub_free>
   1ebba:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ebbc:	68e3      	ldr	r3, [r4, #12]
   1ebbe:	429d      	cmp	r5, r3
	list->tail = node;
   1ebc0:	bf08      	it	eq
   1ebc2:	60e2      	streq	r2, [r4, #12]
}
   1ebc4:	e7ed      	b.n	1eba2 <gatt_sub_remove+0x1a>
}
   1ebc6:	bd38      	pop	{r3, r4, r5, pc}

0001ebc8 <gatt_write_ccc_rsp>:
{
   1ebc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ebcc:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ebce:	f3bf 8f5b 	dmb	ish
   1ebd2:	4606      	mov	r6, r0
   1ebd4:	460d      	mov	r5, r1
   1ebd6:	f104 0310 	add.w	r3, r4, #16
   1ebda:	e853 2f00 	ldrex	r2, [r3]
   1ebde:	f022 0204 	bic.w	r2, r2, #4
   1ebe2:	e843 2100 	strex	r1, r2, [r3]
   1ebe6:	2900      	cmp	r1, #0
   1ebe8:	d1f7      	bne.n	1ebda <gatt_write_ccc_rsp+0x12>
   1ebea:	f3bf 8f5b 	dmb	ish
	if (err) {
   1ebee:	b1dd      	cbz	r5, 1ec28 <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   1ebf0:	f7f6 fb3a 	bl	15268 <gatt_sub_find>
		if (!sub) {
   1ebf4:	4601      	mov	r1, r0
   1ebf6:	b300      	cbz	r0, 1ec3a <gatt_write_ccc_rsp+0x72>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   1ebf8:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ebfa:	b143      	cbz	r3, 1ec0e <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ebfc:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1ebfe:	f104 0014 	add.w	r0, r4, #20
   1ec02:	4283      	cmp	r3, r0
   1ec04:	d10b      	bne.n	1ec1e <gatt_write_ccc_rsp+0x56>
				gatt_sub_remove(conn, sub, tmp, params);
   1ec06:	4623      	mov	r3, r4
   1ec08:	4630      	mov	r0, r6
   1ec0a:	f7ff ffbd 	bl	1eb88 <gatt_sub_remove>
	if (params->write) {
   1ec0e:	6863      	ldr	r3, [r4, #4]
   1ec10:	b19b      	cbz	r3, 1ec3a <gatt_write_ccc_rsp+0x72>
		params->write(conn, err, NULL);
   1ec12:	4629      	mov	r1, r5
   1ec14:	4630      	mov	r0, r6
   1ec16:	2200      	movs	r2, #0
}
   1ec18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1ec1c:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ec1e:	2a00      	cmp	r2, #0
   1ec20:	d0f5      	beq.n	1ec0e <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ec22:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ec24:	6812      	ldr	r2, [r2, #0]
   1ec26:	e7ec      	b.n	1ec02 <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   1ec28:	89a3      	ldrh	r3, [r4, #12]
   1ec2a:	2b00      	cmp	r3, #0
   1ec2c:	d1ef      	bne.n	1ec0e <gatt_write_ccc_rsp+0x46>
		params->notify(conn, params, NULL, 0);
   1ec2e:	6827      	ldr	r7, [r4, #0]
   1ec30:	462b      	mov	r3, r5
   1ec32:	462a      	mov	r2, r5
   1ec34:	4621      	mov	r1, r4
   1ec36:	47b8      	blx	r7
   1ec38:	e7e9      	b.n	1ec0e <gatt_write_ccc_rsp+0x46>
}
   1ec3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ec3e <gatt_req_send>:
{
   1ec3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ec42:	4606      	mov	r6, r0
   1ec44:	4688      	mov	r8, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1ec46:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1ec4a:	2100      	movs	r1, #0
{
   1ec4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1ec50:	4614      	mov	r4, r2
   1ec52:	461f      	mov	r7, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1ec54:	f7f6 f93e 	bl	14ed4 <bt_att_req_alloc>
	if (!req) {
   1ec58:	4605      	mov	r5, r0
   1ec5a:	b920      	cbnz	r0, 1ec66 <gatt_req_send+0x28>
		return -ENOMEM;
   1ec5c:	f06f 040b 	mvn.w	r4, #11
}
   1ec60:	4620      	mov	r0, r4
   1ec62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	req->func = func;
   1ec66:	f8c0 8004 	str.w	r8, [r0, #4]
	req->user_data = params;
   1ec6a:	60c4      	str	r4, [r0, #12]
	buf = bt_att_create_pdu(conn, op, len);
   1ec6c:	f89d 1020 	ldrb.w	r1, [sp, #32]
   1ec70:	464a      	mov	r2, r9
   1ec72:	4630      	mov	r0, r6
   1ec74:	f7ff fcb7 	bl	1e5e6 <bt_att_create_pdu>
	if (!buf) {
   1ec78:	b918      	cbnz	r0, 1ec82 <gatt_req_send+0x44>
		bt_att_req_free(req);
   1ec7a:	4628      	mov	r0, r5
   1ec7c:	f7f6 f940 	bl	14f00 <bt_att_req_free>
   1ec80:	e7ec      	b.n	1ec5c <gatt_req_send+0x1e>
	err = encode(buf, len, params);
   1ec82:	4622      	mov	r2, r4
	req->buf = buf;
   1ec84:	60a8      	str	r0, [r5, #8]
	err = encode(buf, len, params);
   1ec86:	4649      	mov	r1, r9
   1ec88:	47b8      	blx	r7
	if (err) {
   1ec8a:	4604      	mov	r4, r0
   1ec8c:	b118      	cbz	r0, 1ec96 <gatt_req_send+0x58>
		bt_att_req_free(req);
   1ec8e:	4628      	mov	r0, r5
   1ec90:	f7f6 f936 	bl	14f00 <bt_att_req_free>
   1ec94:	e7e4      	b.n	1ec60 <gatt_req_send+0x22>
	err = bt_att_req_send(conn, req);
   1ec96:	4629      	mov	r1, r5
   1ec98:	4630      	mov	r0, r6
   1ec9a:	f7f6 fa4d 	bl	15138 <bt_att_req_send>
	if (err) {
   1ec9e:	4604      	mov	r4, r0
   1eca0:	2800      	cmp	r0, #0
   1eca2:	d0dd      	beq.n	1ec60 <gatt_req_send+0x22>
   1eca4:	e7f3      	b.n	1ec8e <gatt_req_send+0x50>

0001eca6 <bt_gatt_attr_value_handle>:
{
   1eca6:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1eca8:	4604      	mov	r4, r0
   1ecaa:	b910      	cbnz	r0, 1ecb2 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1ecac:	2000      	movs	r0, #0
}
   1ecae:	b002      	add	sp, #8
   1ecb0:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1ecb2:	2300      	movs	r3, #0
   1ecb4:	f88d 3004 	strb.w	r3, [sp, #4]
   1ecb8:	6800      	ldr	r0, [r0, #0]
   1ecba:	f642 0303 	movw	r3, #10243	; 0x2803
   1ecbe:	a901      	add	r1, sp, #4
   1ecc0:	f8ad 3006 	strh.w	r3, [sp, #6]
   1ecc4:	f7fe fadd 	bl	1d282 <bt_uuid_cmp>
   1ecc8:	2800      	cmp	r0, #0
   1ecca:	d1ef      	bne.n	1ecac <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1eccc:	68e3      	ldr	r3, [r4, #12]
   1ecce:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1ecd0:	2800      	cmp	r0, #0
   1ecd2:	d1ec      	bne.n	1ecae <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1ecd4:	4620      	mov	r0, r4
   1ecd6:	f7f6 fc01 	bl	154dc <bt_gatt_attr_get_handle>
   1ecda:	3001      	adds	r0, #1
   1ecdc:	b280      	uxth	r0, r0
	return handle;
   1ecde:	e7e6      	b.n	1ecae <bt_gatt_attr_value_handle+0x8>

0001ece0 <bt_gatt_attr_read_chrc>:
{
   1ece0:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1ece2:	68ce      	ldr	r6, [r1, #12]
{
   1ece4:	b088      	sub	sp, #32
   1ece6:	4608      	mov	r0, r1
   1ece8:	461d      	mov	r5, r3
	pdu.properties = chrc->properties;
   1ecea:	79b3      	ldrb	r3, [r6, #6]
   1ecec:	f88d 300c 	strb.w	r3, [sp, #12]
{
   1ecf0:	4614      	mov	r4, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1ecf2:	f7ff ffd8 	bl	1eca6 <bt_gatt_attr_value_handle>
   1ecf6:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1ecfa:	6830      	ldr	r0, [r6, #0]
   1ecfc:	7803      	ldrb	r3, [r0, #0]
   1ecfe:	b96b      	cbnz	r3, 1ed1c <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1ed00:	8843      	ldrh	r3, [r0, #2]
   1ed02:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   1ed06:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1ed08:	9300      	str	r3, [sp, #0]
   1ed0a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   1ed0e:	ab03      	add	r3, sp, #12
   1ed10:	4629      	mov	r1, r5
   1ed12:	4620      	mov	r0, r4
   1ed14:	f7ff fe1f 	bl	1e956 <bt_gatt_attr_read.constprop.0>
}
   1ed18:	b008      	add	sp, #32
   1ed1a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1ed1c:	1c43      	adds	r3, r0, #1
   1ed1e:	f10d 020f 	add.w	r2, sp, #15
   1ed22:	3011      	adds	r0, #17
   1ed24:	f853 1b04 	ldr.w	r1, [r3], #4
   1ed28:	f842 1b04 	str.w	r1, [r2], #4
   1ed2c:	4283      	cmp	r3, r0
   1ed2e:	d1f9      	bne.n	1ed24 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   1ed30:	2313      	movs	r3, #19
   1ed32:	e7e9      	b.n	1ed08 <bt_gatt_attr_read_chrc+0x28>

0001ed34 <bt_gatt_foreach_attr>:
{
   1ed34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ed36:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ed3a:	2300      	movs	r3, #0
   1ed3c:	9300      	str	r3, [sp, #0]
   1ed3e:	461a      	mov	r2, r3
   1ed40:	f7f6 fc18 	bl	15574 <bt_gatt_foreach_attr_type>
}
   1ed44:	b005      	add	sp, #20
   1ed46:	f85d fb04 	ldr.w	pc, [sp], #4

0001ed4a <db_hash_process>:
	db_hash_gen(true);
   1ed4a:	f7f6 bc89 	b.w	15660 <db_hash_gen.isra.0>

0001ed4e <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1ed4e:	07d3      	lsls	r3, r2, #31
{
   1ed50:	b510      	push	{r4, lr}
   1ed52:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1ed54:	d504      	bpl.n	1ed60 <bt_gatt_check_perm+0x12>
   1ed56:	f014 0f15 	tst.w	r4, #21
   1ed5a:	d017      	beq.n	1ed8c <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1ed5c:	684b      	ldr	r3, [r1, #4]
   1ed5e:	b1ab      	cbz	r3, 1ed8c <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1ed60:	0793      	lsls	r3, r2, #30
   1ed62:	d504      	bpl.n	1ed6e <bt_gatt_check_perm+0x20>
   1ed64:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1ed68:	d012      	beq.n	1ed90 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1ed6a:	688b      	ldr	r3, [r1, #8]
   1ed6c:	b183      	cbz	r3, 1ed90 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1ed6e:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1ed70:	f014 0f30 	tst.w	r4, #48	; 0x30
   1ed74:	d104      	bne.n	1ed80 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1ed76:	f014 000c 	ands.w	r0, r4, #12
   1ed7a:	bf18      	it	ne
   1ed7c:	200f      	movne	r0, #15
}
   1ed7e:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1ed80:	f7fe feb4 	bl	1daec <bt_conn_get_security>
   1ed84:	2802      	cmp	r0, #2
   1ed86:	d8f6      	bhi.n	1ed76 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1ed88:	2005      	movs	r0, #5
   1ed8a:	e7f8      	b.n	1ed7e <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1ed8c:	2002      	movs	r0, #2
   1ed8e:	e7f6      	b.n	1ed7e <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1ed90:	2003      	movs	r0, #3
   1ed92:	e7f4      	b.n	1ed7e <bt_gatt_check_perm+0x30>

0001ed94 <gatt_notify>:
{
   1ed94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ed98:	4614      	mov	r4, r2
   1ed9a:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1ed9c:	2214      	movs	r2, #20
   1ed9e:	6861      	ldr	r1, [r4, #4]
{
   1eda0:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1eda2:	f7ff ffd4 	bl	1ed4e <bt_gatt_check_perm>
   1eda6:	bb08      	cbnz	r0, 1edec <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   1eda8:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1edaa:	211b      	movs	r1, #27
   1edac:	3202      	adds	r2, #2
   1edae:	4638      	mov	r0, r7
   1edb0:	f7ff fc19 	bl	1e5e6 <bt_att_create_pdu>
	if (!buf) {
   1edb4:	4605      	mov	r5, r0
   1edb6:	b1e8      	cbz	r0, 1edf4 <gatt_notify+0x60>
	return net_buf_simple_add(&buf->b, len);
   1edb8:	f100 0908 	add.w	r9, r0, #8
   1edbc:	2102      	movs	r1, #2
   1edbe:	4648      	mov	r0, r9
   1edc0:	f7f7 faf2 	bl	163a8 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1edc4:	4606      	mov	r6, r0
   1edc6:	89a1      	ldrh	r1, [r4, #12]
   1edc8:	f826 8b02 	strh.w	r8, [r6], #2
   1edcc:	4648      	mov	r0, r9
   1edce:	f7f7 faeb 	bl	163a8 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1edd2:	89a2      	ldrh	r2, [r4, #12]
   1edd4:	68a1      	ldr	r1, [r4, #8]
   1edd6:	4630      	mov	r0, r6
   1edd8:	f000 fbd8 	bl	1f58c <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1eddc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1ede0:	4629      	mov	r1, r5
   1ede2:	4638      	mov	r0, r7
}
   1ede4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1ede8:	f7f6 b938 	b.w	1505c <bt_att_send>
		return -EPERM;
   1edec:	f04f 30ff 	mov.w	r0, #4294967295
}
   1edf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   1edf4:	f06f 000b 	mvn.w	r0, #11
   1edf8:	e7fa      	b.n	1edf0 <gatt_notify+0x5c>

0001edfa <bt_gatt_notification>:
{
   1edfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1edfe:	4607      	mov	r7, r0
   1ee00:	4688      	mov	r8, r1
   1ee02:	4691      	mov	r9, r2
   1ee04:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1ee06:	f7f6 fa2f 	bl	15268 <gatt_sub_find>
	if (!sub) {
   1ee0a:	b1f8      	cbz	r0, 1ee4c <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1ee0c:	6883      	ldr	r3, [r0, #8]
   1ee0e:	b1eb      	cbz	r3, 1ee4c <bt_gatt_notification+0x52>
   1ee10:	f1b3 0614 	subs.w	r6, r3, #20
   1ee14:	d01a      	beq.n	1ee4c <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ee16:	681c      	ldr	r4, [r3, #0]
   1ee18:	b104      	cbz	r4, 1ee1c <bt_gatt_notification+0x22>
   1ee1a:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1ee1c:	8933      	ldrh	r3, [r6, #8]
   1ee1e:	4543      	cmp	r3, r8
   1ee20:	d10a      	bne.n	1ee38 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1ee22:	6835      	ldr	r5, [r6, #0]
   1ee24:	4653      	mov	r3, sl
   1ee26:	464a      	mov	r2, r9
   1ee28:	4631      	mov	r1, r6
   1ee2a:	4638      	mov	r0, r7
   1ee2c:	47a8      	blx	r5
   1ee2e:	b918      	cbnz	r0, 1ee38 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1ee30:	4631      	mov	r1, r6
   1ee32:	4638      	mov	r0, r7
   1ee34:	f7f6 fe56 	bl	15ae4 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1ee38:	b144      	cbz	r4, 1ee4c <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ee3a:	f114 0514 	adds.w	r5, r4, #20
   1ee3e:	d002      	beq.n	1ee46 <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ee40:	6965      	ldr	r5, [r4, #20]
   1ee42:	b105      	cbz	r5, 1ee46 <bt_gatt_notification+0x4c>
   1ee44:	3d14      	subs	r5, #20
{
   1ee46:	4626      	mov	r6, r4
   1ee48:	462c      	mov	r4, r5
   1ee4a:	e7e7      	b.n	1ee1c <bt_gatt_notification+0x22>
}
   1ee4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ee50 <bt_gatt_mult_notification>:
{
   1ee50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee54:	b085      	sub	sp, #20
   1ee56:	4681      	mov	r9, r0
   1ee58:	460c      	mov	r4, r1
   1ee5a:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   1ee5c:	f7f6 fa04 	bl	15268 <gatt_sub_find>
	if (!sub) {
   1ee60:	4607      	mov	r7, r0
   1ee62:	b140      	cbz	r0, 1ee76 <bt_gatt_mult_notification+0x26>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1ee64:	462a      	mov	r2, r5
   1ee66:	4621      	mov	r1, r4
   1ee68:	a801      	add	r0, sp, #4
   1ee6a:	f000 f89e 	bl	1efaa <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1ee6e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1ee72:	2b04      	cmp	r3, #4
   1ee74:	d802      	bhi.n	1ee7c <bt_gatt_mult_notification+0x2c>
}
   1ee76:	b005      	add	sp, #20
   1ee78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1ee7c:	2104      	movs	r1, #4
   1ee7e:	eb0d 0001 	add.w	r0, sp, r1
   1ee82:	f7f7 fa6f 	bl	16364 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   1ee86:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   1ee8a:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		if (len > buf.len) {
   1ee8e:	455b      	cmp	r3, fp
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1ee90:	4605      	mov	r5, r0
		if (len > buf.len) {
   1ee92:	d3f0      	bcc.n	1ee76 <bt_gatt_mult_notification+0x26>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1ee94:	68bb      	ldr	r3, [r7, #8]
   1ee96:	b303      	cbz	r3, 1eeda <bt_gatt_mult_notification+0x8a>
   1ee98:	f1b3 0614 	subs.w	r6, r3, #20
   1ee9c:	d01d      	beq.n	1eeda <bt_gatt_mult_notification+0x8a>
   1ee9e:	681c      	ldr	r4, [r3, #0]
   1eea0:	b104      	cbz	r4, 1eea4 <bt_gatt_mult_notification+0x54>
   1eea2:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   1eea4:	46a8      	mov	r8, r5
   1eea6:	f838 ab04 	ldrh.w	sl, [r8], #4
			if (handle != params->value_handle) {
   1eeaa:	8933      	ldrh	r3, [r6, #8]
   1eeac:	4553      	cmp	r3, sl
   1eeae:	d10a      	bne.n	1eec6 <bt_gatt_mult_notification+0x76>
			if (params->notify(conn, params, nfy->value, len) ==
   1eeb0:	6835      	ldr	r5, [r6, #0]
   1eeb2:	465b      	mov	r3, fp
   1eeb4:	4642      	mov	r2, r8
   1eeb6:	4631      	mov	r1, r6
   1eeb8:	4648      	mov	r0, r9
   1eeba:	47a8      	blx	r5
   1eebc:	b918      	cbnz	r0, 1eec6 <bt_gatt_mult_notification+0x76>
				bt_gatt_unsubscribe(conn, params);
   1eebe:	4631      	mov	r1, r6
   1eec0:	4648      	mov	r0, r9
   1eec2:	f7f6 fe0f 	bl	15ae4 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1eec6:	b144      	cbz	r4, 1eeda <bt_gatt_mult_notification+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1eec8:	f114 0214 	adds.w	r2, r4, #20
   1eecc:	d002      	beq.n	1eed4 <bt_gatt_mult_notification+0x84>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1eece:	6962      	ldr	r2, [r4, #20]
   1eed0:	b102      	cbz	r2, 1eed4 <bt_gatt_mult_notification+0x84>
   1eed2:	3a14      	subs	r2, #20
{
   1eed4:	4626      	mov	r6, r4
   1eed6:	4614      	mov	r4, r2
   1eed8:	e7e7      	b.n	1eeaa <bt_gatt_mult_notification+0x5a>
		net_buf_simple_pull_mem(&buf, len);
   1eeda:	4659      	mov	r1, fp
   1eedc:	a801      	add	r0, sp, #4
   1eede:	f7f7 fa41 	bl	16364 <net_buf_simple_pull_mem>
   1eee2:	e7c4      	b.n	1ee6e <bt_gatt_mult_notification+0x1e>

0001eee4 <bt_gatt_change_aware>:
{
   1eee4:	b510      	push	{r4, lr}
   1eee6:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1eee8:	f7f6 f990 	bl	1520c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1eeec:	4603      	mov	r3, r0
   1eeee:	b910      	cbnz	r0, 1eef6 <bt_gatt_change_aware+0x12>
		return true;
   1eef0:	2401      	movs	r4, #1
}
   1eef2:	4620      	mov	r0, r4
   1eef4:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1eef6:	7a02      	ldrb	r2, [r0, #8]
   1eef8:	07d2      	lsls	r2, r2, #31
   1eefa:	d5f9      	bpl.n	1eef0 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1eefc:	f3bf 8f5b 	dmb	ish
   1ef00:	68d9      	ldr	r1, [r3, #12]
   1ef02:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1ef06:	f011 0101 	ands.w	r1, r1, #1
   1ef0a:	f100 000c 	add.w	r0, r0, #12
   1ef0e:	d1ef      	bne.n	1eef0 <bt_gatt_change_aware+0xc>
	if (!req) {
   1ef10:	2c00      	cmp	r4, #0
   1ef12:	d0ee      	beq.n	1eef2 <bt_gatt_change_aware+0xe>
   1ef14:	f3bf 8f5b 	dmb	ish
   1ef18:	68db      	ldr	r3, [r3, #12]
   1ef1a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ef1e:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1ef22:	079b      	lsls	r3, r3, #30
   1ef24:	d50e      	bpl.n	1ef44 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ef26:	f3bf 8f5b 	dmb	ish
   1ef2a:	e850 3f00 	ldrex	r3, [r0]
   1ef2e:	f023 0302 	bic.w	r3, r3, #2
   1ef32:	e840 3200 	strex	r2, r3, [r0]
   1ef36:	2a00      	cmp	r2, #0
   1ef38:	d1f7      	bne.n	1ef2a <bt_gatt_change_aware+0x46>
   1ef3a:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1ef3e:	f7ff fdc1 	bl	1eac4 <atomic_set_bit>
	return false;
   1ef42:	e7d6      	b.n	1eef2 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1ef44:	2101      	movs	r1, #1
   1ef46:	e7fa      	b.n	1ef3e <bt_gatt_change_aware+0x5a>

0001ef48 <bt_smp_recv>:
{
   1ef48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1ef4a:	2100      	movs	r1, #0
   1ef4c:	f04f 32ff 	mov.w	r2, #4294967295
   1ef50:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1ef54:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1ef56:	4608      	mov	r0, r1
   1ef58:	f7fe fe8d 	bl	1dc76 <bt_l2cap_create_pdu_timeout>
   1ef5c:	f100 0608 	add.w	r6, r0, #8
   1ef60:	4604      	mov	r4, r0
   1ef62:	2101      	movs	r1, #1
   1ef64:	4630      	mov	r0, r6
   1ef66:	f7f7 fa1f 	bl	163a8 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1ef6a:	2505      	movs	r5, #5
   1ef6c:	7005      	strb	r5, [r0, #0]
   1ef6e:	2101      	movs	r1, #1
   1ef70:	4630      	mov	r0, r6
   1ef72:	f7f7 fa19 	bl	163a8 <net_buf_simple_add>
   1ef76:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1ef78:	7005      	strb	r5, [r0, #0]
   1ef7a:	4622      	mov	r2, r4
   1ef7c:	9300      	str	r3, [sp, #0]
   1ef7e:	2106      	movs	r1, #6
   1ef80:	4638      	mov	r0, r7
   1ef82:	f7fe fe7b 	bl	1dc7c <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1ef86:	b110      	cbz	r0, 1ef8e <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1ef88:	4620      	mov	r0, r4
   1ef8a:	f7f7 f8dd 	bl	16148 <net_buf_unref>
}
   1ef8e:	2000      	movs	r0, #0
   1ef90:	b003      	add	sp, #12
   1ef92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ef94 <bt_smp_sign>:
   1ef94:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ef98:	4770      	bx	lr

0001ef9a <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1ef9a:	2000      	movs	r0, #0
   1ef9c:	4770      	bx	lr

0001ef9e <fixed_data_unref>:
}
   1ef9e:	4770      	bx	lr

0001efa0 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1efa0:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1efa2:	6849      	ldr	r1, [r1, #4]
   1efa4:	6809      	ldr	r1, [r1, #0]
   1efa6:	f7f6 bf87 	b.w	15eb8 <net_buf_alloc_len>

0001efaa <net_buf_simple_init_with_data>:
	buf->size  = size;
   1efaa:	b292      	uxth	r2, r2
	buf->__buf = data;
   1efac:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1efae:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1efb0:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1efb2:	8082      	strh	r2, [r0, #4]
}
   1efb4:	4770      	bx	lr

0001efb6 <net_buf_simple_pull_u8>:
{
   1efb6:	b510      	push	{r4, lr}
	val = buf->data[0];
   1efb8:	6803      	ldr	r3, [r0, #0]
   1efba:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1efbc:	2101      	movs	r1, #1
   1efbe:	f7f7 f9b1 	bl	16324 <net_buf_simple_pull>
}
   1efc2:	4620      	mov	r0, r4
   1efc4:	bd10      	pop	{r4, pc}

0001efc6 <net_buf_simple_pull_le16>:
{
   1efc6:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1efc8:	6803      	ldr	r3, [r0, #0]
   1efca:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1efcc:	2102      	movs	r1, #2
   1efce:	f7f7 f9a9 	bl	16324 <net_buf_simple_pull>
}
   1efd2:	4620      	mov	r0, r4
   1efd4:	bd10      	pop	{r4, pc}

0001efd6 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1efd6:	6802      	ldr	r2, [r0, #0]
   1efd8:	6880      	ldr	r0, [r0, #8]
}
   1efda:	1a10      	subs	r0, r2, r0
   1efdc:	4770      	bx	lr

0001efde <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1efde:	8883      	ldrh	r3, [r0, #4]
   1efe0:	88c2      	ldrh	r2, [r0, #6]
   1efe2:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1efe4:	6803      	ldr	r3, [r0, #0]
   1efe6:	6880      	ldr	r0, [r0, #8]
   1efe8:	1a18      	subs	r0, r3, r0
}
   1efea:	1a10      	subs	r0, r2, r0
   1efec:	4770      	bx	lr

0001efee <net_buf_simple_add_mem>:
{
   1efee:	b538      	push	{r3, r4, r5, lr}
   1eff0:	460d      	mov	r5, r1
   1eff2:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1eff4:	4611      	mov	r1, r2
   1eff6:	f7f7 f9d7 	bl	163a8 <net_buf_simple_add>
   1effa:	4622      	mov	r2, r4
   1effc:	4629      	mov	r1, r5
}
   1effe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f002:	f000 bac3 	b.w	1f58c <memcpy>

0001f006 <net_buf_simple_add_le16>:
{
   1f006:	b510      	push	{r4, lr}
   1f008:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   1f00a:	2102      	movs	r1, #2
   1f00c:	f7f7 f9cc 	bl	163a8 <net_buf_simple_add>
	dst[0] = val;
   1f010:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1f012:	0a24      	lsrs	r4, r4, #8
   1f014:	7044      	strb	r4, [r0, #1]
}
   1f016:	bd10      	pop	{r4, pc}

0001f018 <set_starting_state>:
{
   1f018:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f01a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f01e:	f3ef 8211 	mrs	r2, BASEPRI
   1f022:	f383 8812 	msr	BASEPRI_MAX, r3
   1f026:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1f02a:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1f02c:	f003 0407 	and.w	r4, r3, #7
   1f030:	2c01      	cmp	r4, #1
   1f032:	d106      	bne.n	1f042 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1f034:	6001      	str	r1, [r0, #0]
	int err = 0;
   1f036:	2000      	movs	r0, #0
	__asm__ volatile(
   1f038:	f382 8811 	msr	BASEPRI, r2
   1f03c:	f3bf 8f6f 	isb	sy
}
   1f040:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1f042:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1f046:	428b      	cmp	r3, r1
		err = -EALREADY;
   1f048:	bf14      	ite	ne
   1f04a:	f04f 30ff 	movne.w	r0, #4294967295
   1f04e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1f052:	e7f1      	b.n	1f038 <set_starting_state+0x20>

0001f054 <set_on_state>:
	__asm__ volatile(
   1f054:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f058:	f3ef 8211 	mrs	r2, BASEPRI
   1f05c:	f383 8812 	msr	BASEPRI_MAX, r3
   1f060:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1f064:	6803      	ldr	r3, [r0, #0]
   1f066:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f06a:	f043 0302 	orr.w	r3, r3, #2
   1f06e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1f070:	f382 8811 	msr	BASEPRI, r2
   1f074:	f3bf 8f6f 	isb	sy
}
   1f078:	4770      	bx	lr

0001f07a <onoff_started_callback>:
	return &data->mgr[type];
   1f07a:	6900      	ldr	r0, [r0, #16]
   1f07c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1f07e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1f082:	2100      	movs	r1, #0
   1f084:	4710      	bx	r2

0001f086 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1f086:	2000      	movs	r0, #0
   1f088:	f7f9 ba96 	b.w	185b8 <nrfx_clock_stop>

0001f08c <api_stop>:
	return stop(dev, subsys, CTX_API);
   1f08c:	2280      	movs	r2, #128	; 0x80
   1f08e:	f7f7 b9f5 	b.w	1647c <stop>

0001f092 <blocking_start_callback>:
{
   1f092:	4610      	mov	r0, r2
   1f094:	f7fa bd22 	b.w	19adc <z_impl_k_sem_give>

0001f098 <api_start>:
{
   1f098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f09c:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   1f09e:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1f0a0:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   1f0a2:	436f      	muls	r7, r5
{
   1f0a4:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1f0a6:	f107 0048 	add.w	r0, r7, #72	; 0x48
   1f0aa:	2180      	movs	r1, #128	; 0x80
   1f0ac:	4420      	add	r0, r4
{
   1f0ae:	4690      	mov	r8, r2
   1f0b0:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   1f0b2:	f7ff ffb1 	bl	1f018 <set_starting_state>
	if (err < 0) {
   1f0b6:	2800      	cmp	r0, #0
   1f0b8:	db07      	blt.n	1f0ca <api_start+0x32>
	subdata->cb = cb;
   1f0ba:	443c      	add	r4, r7
	subdata->user_data = user_data;
   1f0bc:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   1f0c0:	6873      	ldr	r3, [r6, #4]
   1f0c2:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   1f0c6:	4798      	blx	r3
	return 0;
   1f0c8:	2000      	movs	r0, #0
}
   1f0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f0ce <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f0ce:	6843      	ldr	r3, [r0, #4]
   1f0d0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1f0d2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1f0d6:	600b      	str	r3, [r1, #0]
}
   1f0d8:	2000      	movs	r0, #0
   1f0da:	4770      	bx	lr

0001f0dc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f0dc:	6843      	ldr	r3, [r0, #4]
   1f0de:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1f0e0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1f0e4:	4042      	eors	r2, r0
   1f0e6:	400a      	ands	r2, r1
   1f0e8:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1f0ea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1f0ee:	2000      	movs	r0, #0
   1f0f0:	4770      	bx	lr

0001f0f2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f0f2:	6843      	ldr	r3, [r0, #4]
   1f0f4:	685b      	ldr	r3, [r3, #4]
}
   1f0f6:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1f0f8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1f0fc:	4770      	bx	lr

0001f0fe <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f0fe:	6843      	ldr	r3, [r0, #4]
   1f100:	685b      	ldr	r3, [r3, #4]
}
   1f102:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1f104:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1f108:	4770      	bx	lr

0001f10a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f10a:	6843      	ldr	r3, [r0, #4]
   1f10c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1f10e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1f112:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1f114:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1f118:	2000      	movs	r0, #0
   1f11a:	4770      	bx	lr

0001f11c <nrf_gpio_cfg_sense_set>:
{
   1f11c:	b513      	push	{r0, r1, r4, lr}
   1f11e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f120:	a801      	add	r0, sp, #4
{
   1f122:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f124:	f7f7 fc1c 	bl	16960 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1f128:	9b01      	ldr	r3, [sp, #4]
   1f12a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1f12e:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1f132:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1f136:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   1f13a:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1f13e:	b002      	add	sp, #8
   1f140:	bd10      	pop	{r4, pc}

0001f142 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1f142:	6843      	ldr	r3, [r0, #4]
   1f144:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1f146:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1f14a:	05d1      	lsls	r1, r2, #23
   1f14c:	d518      	bpl.n	1f180 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f14e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1f152:	b1aa      	cbz	r2, 1f180 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1f154:	f04f 0140 	mov.w	r1, #64	; 0x40
   1f158:	f3ef 8211 	mrs	r2, BASEPRI
   1f15c:	f381 8812 	msr	BASEPRI_MAX, r1
   1f160:	f3bf 8f6f 	isb	sy
   1f164:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1f168:	b131      	cbz	r1, 1f178 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f16a:	2100      	movs	r1, #0
   1f16c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1f170:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f174:	2101      	movs	r1, #1
   1f176:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1f178:	f382 8811 	msr	BASEPRI, r2
   1f17c:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1f180:	6842      	ldr	r2, [r0, #4]
   1f182:	6852      	ldr	r2, [r2, #4]
   1f184:	06d2      	lsls	r2, r2, #27
   1f186:	d515      	bpl.n	1f1b4 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   1f188:	f04f 0140 	mov.w	r1, #64	; 0x40
   1f18c:	f3ef 8211 	mrs	r2, BASEPRI
   1f190:	f381 8812 	msr	BASEPRI_MAX, r1
   1f194:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f198:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1f19c:	b111      	cbz	r1, 1f1a4 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1f19e:	2100      	movs	r1, #0
   1f1a0:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1f1a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1f1a8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1f1ac:	f382 8811 	msr	BASEPRI, r2
   1f1b0:	f3bf 8f6f 	isb	sy
}
   1f1b4:	4770      	bx	lr

0001f1b6 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1f1b6:	6902      	ldr	r2, [r0, #16]
{
   1f1b8:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1f1ba:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1f1be:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1f1c2:	2000      	movs	r0, #0
   1f1c4:	4770      	bx	lr

0001f1c6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1f1c6:	6843      	ldr	r3, [r0, #4]
   1f1c8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1f1ca:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1f1ce:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1f1d2:	4770      	bx	lr

0001f1d4 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1f1d4:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1f1d6:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f1d8:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1f1dc:	b940      	cbnz	r0, 1f1f0 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1f1de:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1f1e0:	0712      	lsls	r2, r2, #28
   1f1e2:	d406      	bmi.n	1f1f2 <is_tx_ready+0x1e>
   1f1e4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1f1e8:	3800      	subs	r0, #0
   1f1ea:	bf18      	it	ne
   1f1ec:	2001      	movne	r0, #1
   1f1ee:	4770      	bx	lr
   1f1f0:	2001      	movs	r0, #1
}
   1f1f2:	4770      	bx	lr

0001f1f4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1f1f4:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1f1f6:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1f1f8:	681b      	ldr	r3, [r3, #0]
   1f1fa:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f1fe:	b148      	cbz	r0, 1f214 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1f200:	7c52      	ldrb	r2, [r2, #17]
   1f202:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f204:	2000      	movs	r0, #0
   1f206:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1f20a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f20e:	2201      	movs	r2, #1
   1f210:	601a      	str	r2, [r3, #0]
	return 0;
   1f212:	4770      	bx	lr
		return -1;
   1f214:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f218:	4770      	bx	lr

0001f21a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1f21a:	4770      	bx	lr

0001f21c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1f21c:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   1f21e:	2000      	movs	r0, #0
   1f220:	f7f2 fd3a 	bl	11c98 <sys_arch_reboot>

0001f224 <sdc_assertion_handler>:
	k_oops();
   1f224:	4040      	eors	r0, r0
   1f226:	f380 8811 	msr	BASEPRI, r0
   1f22a:	f04f 0003 	mov.w	r0, #3
   1f22e:	df02      	svc	2
}
   1f230:	4770      	bx	lr

0001f232 <m_assert_handler>:
	k_oops();
   1f232:	4040      	eors	r0, r0
   1f234:	f380 8811 	msr	BASEPRI, r0
   1f238:	f04f 0003 	mov.w	r0, #3
   1f23c:	df02      	svc	2
}
   1f23e:	4770      	bx	lr

0001f240 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1f240:	4668      	mov	r0, sp
   1f242:	f020 0107 	bic.w	r1, r0, #7
   1f246:	468d      	mov	sp, r1
   1f248:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1f24a:	f7e3 fb15 	bl	2878 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1f24e:	f7f2 f8b9 	bl	113c4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1f252:	f7f2 f9a5 	bl	115a0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1f256:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1f25a:	4685      	mov	sp, r0
   1f25c:	4770      	bx	lr

0001f25e <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1f25e:	4668      	mov	r0, sp
   1f260:	f020 0107 	bic.w	r1, r0, #7
   1f264:	468d      	mov	sp, r1
   1f266:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1f268:	f7e3 fa88 	bl	277c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1f26c:	f7f2 f8aa 	bl	113c4 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1f270:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1f274:	4685      	mov	sp, r0
   1f276:	4770      	bx	lr

0001f278 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1f278:	4668      	mov	r0, sp
   1f27a:	f020 0107 	bic.w	r1, r0, #7
   1f27e:	468d      	mov	sp, r1
   1f280:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1f282:	f7ec ffde 	bl	c242 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1f286:	f7f2 f89d 	bl	113c4 <_arch_isr_direct_pm>
   1f28a:	f7f2 f989 	bl	115a0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1f28e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1f292:	4685      	mov	sp, r0
   1f294:	4770      	bx	lr

0001f296 <nrfx_clock_enable>:
}
   1f296:	4770      	bx	lr

0001f298 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   1f298:	f7e3 bf02 	b.w	30a0 <MPSL_IRQ_CLOCK_Handler>

0001f29c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1f29c:	4700      	bx	r0

0001f29e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1f29e:	f000 b8ef 	b.w	1f480 <z_impl_k_busy_wait>

0001f2a2 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1f2a2:	f7f9 bba9 	b.w	189f8 <_DoInit>

0001f2a6 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1f2a6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1f2a8:	f7ff fffb 	bl	1f2a2 <SEGGER_RTT_Init>

	return 0;
}
   1f2ac:	2000      	movs	r0, #0
   1f2ae:	bd08      	pop	{r3, pc}

0001f2b0 <z_device_state_init>:
}
   1f2b0:	4770      	bx	lr

0001f2b2 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1f2b2:	b138      	cbz	r0, 1f2c4 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1f2b4:	68c3      	ldr	r3, [r0, #12]
   1f2b6:	8818      	ldrh	r0, [r3, #0]
   1f2b8:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1f2bc:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1f2c0:	4258      	negs	r0, r3
   1f2c2:	4158      	adcs	r0, r3
}
   1f2c4:	4770      	bx	lr

0001f2c6 <k_heap_init>:
{
   1f2c6:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1f2c8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1f2cc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1f2d0:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1f2d2:	f7f0 bfe1 	b.w	10298 <sys_heap_init>

0001f2d6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1f2d6:	f3ef 8005 	mrs	r0, IPSR
}
   1f2da:	3800      	subs	r0, #0
   1f2dc:	bf18      	it	ne
   1f2de:	2001      	movne	r0, #1
   1f2e0:	4770      	bx	lr

0001f2e2 <z_impl_k_thread_name_set>:
}
   1f2e2:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1f2e6:	4770      	bx	lr

0001f2e8 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1f2e8:	f7fb bd56 	b.w	1ad98 <z_sched_start>

0001f2ec <z_pm_save_idle_exit>:
{
   1f2ec:	b508      	push	{r3, lr}
	pm_system_resume();
   1f2ee:	f7f1 fcc9 	bl	10c84 <pm_system_resume>
}
   1f2f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1f2f6:	f7ff bf90 	b.w	1f21a <sys_clock_idle_exit>

0001f2fa <z_queue_node_peek>:
{
   1f2fa:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1f2fc:	4604      	mov	r4, r0
   1f2fe:	b130      	cbz	r0, 1f30e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f300:	6802      	ldr	r2, [r0, #0]
   1f302:	0793      	lsls	r3, r2, #30
   1f304:	d003      	beq.n	1f30e <z_queue_node_peek+0x14>
		ret = anode->data;
   1f306:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1f308:	b109      	cbz	r1, 1f30e <z_queue_node_peek+0x14>
			k_free(anode);
   1f30a:	f000 f929 	bl	1f560 <k_free>
}
   1f30e:	4620      	mov	r0, r4
   1f310:	bd10      	pop	{r4, pc}

0001f312 <z_impl_k_queue_init>:
	list->head = NULL;
   1f312:	2300      	movs	r3, #0
	list->tail = NULL;
   1f314:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1f318:	6083      	str	r3, [r0, #8]
   1f31a:	f100 030c 	add.w	r3, r0, #12
   1f31e:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1f322:	f100 0314 	add.w	r3, r0, #20
   1f326:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   1f32a:	4770      	bx	lr

0001f32c <k_queue_append>:
{
   1f32c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1f32e:	2301      	movs	r3, #1
   1f330:	9300      	str	r3, [sp, #0]
   1f332:	2300      	movs	r3, #0
{
   1f334:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1f336:	4619      	mov	r1, r3
   1f338:	f7fa fa6c 	bl	19814 <queue_insert>
}
   1f33c:	b003      	add	sp, #12
   1f33e:	f85d fb04 	ldr.w	pc, [sp], #4

0001f342 <k_queue_prepend>:
{
   1f342:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1f344:	2300      	movs	r3, #0
{
   1f346:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1f348:	9300      	str	r3, [sp, #0]
   1f34a:	4619      	mov	r1, r3
   1f34c:	f7fa fa62 	bl	19814 <queue_insert>
}
   1f350:	b003      	add	sp, #12
   1f352:	f85d fb04 	ldr.w	pc, [sp], #4

0001f356 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1f356:	b15a      	cbz	r2, 1f370 <z_impl_k_sem_init+0x1a>
   1f358:	428a      	cmp	r2, r1
   1f35a:	d309      	bcc.n	1f370 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1f35c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1f360:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1f364:	e9c0 0000 	strd	r0, r0, [r0]
   1f368:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1f36c:	2000      	movs	r0, #0
   1f36e:	4770      	bx	lr
		return -EINVAL;
   1f370:	f06f 0015 	mvn.w	r0, #21
}
   1f374:	4770      	bx	lr

0001f376 <notify_queue_locked>:
	if (queue != NULL) {
   1f376:	b120      	cbz	r0, 1f382 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1f378:	2200      	movs	r2, #0
   1f37a:	4611      	mov	r1, r2
   1f37c:	3088      	adds	r0, #136	; 0x88
   1f37e:	f7fc bad7 	b.w	1b930 <z_sched_wake>
}
   1f382:	4770      	bx	lr

0001f384 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   1f384:	68c3      	ldr	r3, [r0, #12]
{
   1f386:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   1f388:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   1f38c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1f390:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   1f392:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1f394:	d502      	bpl.n	1f39c <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1f396:	3010      	adds	r0, #16
   1f398:	f7fc fc72 	bl	1bc80 <z_abort_timeout>
}
   1f39c:	4620      	mov	r0, r4
   1f39e:	bd10      	pop	{r4, pc}

0001f3a0 <cancel_async_locked>:
{
   1f3a0:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f3a2:	68c0      	ldr	r0, [r0, #12]
{
   1f3a4:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f3a6:	0784      	lsls	r4, r0, #30
   1f3a8:	f3c0 0140 	ubfx	r1, r0, #1, #1
   1f3ac:	d416      	bmi.n	1f3dc <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   1f3ae:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1f3b2:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   1f3b4:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   1f3b6:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1f3b8:	d510      	bpl.n	1f3dc <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f3ba:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   1f3be:	b168      	cbz	r0, 1f3dc <cancel_async_locked+0x3c>
   1f3c0:	4283      	cmp	r3, r0
   1f3c2:	d11d      	bne.n	1f400 <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   1f3c4:	6818      	ldr	r0, [r3, #0]
   1f3c6:	b999      	cbnz	r1, 1f3f0 <cancel_async_locked+0x50>
   1f3c8:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   1f3cc:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1f3d0:	428b      	cmp	r3, r1
   1f3d2:	d101      	bne.n	1f3d8 <cancel_async_locked+0x38>
	list->tail = node;
   1f3d4:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   1f3d8:	2200      	movs	r2, #0
   1f3da:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   1f3dc:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   1f3de:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   1f3e2:	bf1e      	ittt	ne
   1f3e4:	f042 0202 	orrne.w	r2, r2, #2
   1f3e8:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1f3ea:	f002 000f 	andne.w	r0, r2, #15
}
   1f3ee:	bd10      	pop	{r4, pc}
   1f3f0:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f3f2:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   1f3f6:	4283      	cmp	r3, r0
	list->tail = node;
   1f3f8:	bf08      	it	eq
   1f3fa:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   1f3fe:	e7eb      	b.n	1f3d8 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f400:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f402:	6800      	ldr	r0, [r0, #0]
   1f404:	e7db      	b.n	1f3be <cancel_async_locked+0x1e>

0001f406 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1f406:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1f40a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1f40e:	4283      	cmp	r3, r0
		return b2 - b1;
   1f410:	bf14      	ite	ne
   1f412:	1ac0      	subne	r0, r0, r3
	return 0;
   1f414:	2000      	moveq	r0, #0
}
   1f416:	4770      	bx	lr

0001f418 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1f418:	4603      	mov	r3, r0
   1f41a:	b920      	cbnz	r0, 1f426 <z_reschedule_irqlock+0xe>
   1f41c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1f420:	b90a      	cbnz	r2, 1f426 <z_reschedule_irqlock+0xe>
   1f422:	f7f1 bffd 	b.w	11420 <arch_swap>
   1f426:	f383 8811 	msr	BASEPRI, r3
   1f42a:	f3bf 8f6f 	isb	sy
}
   1f42e:	4770      	bx	lr

0001f430 <z_reschedule_unlocked>:
	__asm__ volatile(
   1f430:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f434:	f3ef 8011 	mrs	r0, BASEPRI
   1f438:	f383 8812 	msr	BASEPRI_MAX, r3
   1f43c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1f440:	f7ff bfea 	b.w	1f418 <z_reschedule_irqlock>

0001f444 <z_priq_dumb_best>:
{
   1f444:	4603      	mov	r3, r0
	return list->head == list;
   1f446:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f448:	4283      	cmp	r3, r0
   1f44a:	d003      	beq.n	1f454 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1f44c:	2800      	cmp	r0, #0
   1f44e:	bf38      	it	cc
   1f450:	2000      	movcc	r0, #0
   1f452:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1f454:	2000      	movs	r0, #0
}
   1f456:	4770      	bx	lr

0001f458 <z_unpend_all>:
{
   1f458:	b538      	push	{r3, r4, r5, lr}
   1f45a:	4605      	mov	r5, r0
	int need_sched = 0;
   1f45c:	2000      	movs	r0, #0
	return list->head == list;
   1f45e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f460:	42a5      	cmp	r5, r4
   1f462:	d000      	beq.n	1f466 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1f464:	b904      	cbnz	r4, 1f468 <z_unpend_all+0x10>
}
   1f466:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1f468:	4620      	mov	r0, r4
   1f46a:	f7fb faa9 	bl	1a9c0 <z_unpend_thread>
		z_ready_thread(thread);
   1f46e:	4620      	mov	r0, r4
   1f470:	f7fb fc4a 	bl	1ad08 <z_ready_thread>
		need_sched = 1;
   1f474:	2001      	movs	r0, #1
   1f476:	e7f2      	b.n	1f45e <z_unpend_all+0x6>

0001f478 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1f478:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1f47a:	f7fc fdb3 	bl	1bfe4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1f47e:	bd08      	pop	{r3, pc}

0001f480 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1f480:	b108      	cbz	r0, 1f486 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1f482:	f7f2 bc1f 	b.w	11cc4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1f486:	4770      	bx	lr

0001f488 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   1f488:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f48a:	1c4b      	adds	r3, r1, #1
   1f48c:	bf08      	it	eq
   1f48e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1f492:	4604      	mov	r4, r0
   1f494:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f496:	d013      	beq.n	1f4c0 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f498:	ea54 0105 	orrs.w	r1, r4, r5
   1f49c:	d103      	bne.n	1f4a6 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1f49e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1f4a2:	f7fc bd9f 	b.w	1bfe4 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1f4a6:	f06f 0101 	mvn.w	r1, #1
   1f4aa:	1a0a      	subs	r2, r1, r0
   1f4ac:	f04f 31ff 	mov.w	r1, #4294967295
   1f4b0:	eb61 0305 	sbc.w	r3, r1, r5
   1f4b4:	2a00      	cmp	r2, #0
   1f4b6:	f173 0100 	sbcs.w	r1, r3, #0
   1f4ba:	db02      	blt.n	1f4c2 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   1f4bc:	4610      	mov	r0, r2
   1f4be:	4619      	mov	r1, r3
}
   1f4c0:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   1f4c2:	f7fc fd8f 	bl	1bfe4 <sys_clock_tick_get>
   1f4c6:	2c01      	cmp	r4, #1
   1f4c8:	f175 0300 	sbcs.w	r3, r5, #0
   1f4cc:	bfbc      	itt	lt
   1f4ce:	2401      	movlt	r4, #1
   1f4d0:	2500      	movlt	r5, #0
   1f4d2:	1820      	adds	r0, r4, r0
   1f4d4:	eb45 0101 	adc.w	r1, r5, r1
   1f4d8:	e7f2      	b.n	1f4c0 <sys_clock_timeout_end_calc+0x38>

0001f4da <add_event>:
{
   1f4da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f4dc:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1f4de:	e9d0 2300 	ldrd	r2, r3, [r0]
   1f4e2:	4290      	cmp	r0, r2
   1f4e4:	4604      	mov	r4, r0
   1f4e6:	460d      	mov	r5, r1
   1f4e8:	d105      	bne.n	1f4f6 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   1f4ea:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1f4ec:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1f4f0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1f4f2:	6065      	str	r5, [r4, #4]
}
   1f4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1f4f6:	2b00      	cmp	r3, #0
   1f4f8:	d0f7      	beq.n	1f4ea <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1f4fa:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1f4fc:	b100      	cbz	r0, 1f500 <add_event+0x26>
   1f4fe:	3860      	subs	r0, #96	; 0x60
   1f500:	b107      	cbz	r7, 1f504 <add_event+0x2a>
   1f502:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1f504:	4639      	mov	r1, r7
   1f506:	f7ff ff7e 	bl	1f406 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1f50a:	2800      	cmp	r0, #0
   1f50c:	dced      	bgt.n	1f4ea <add_event+0x10>
	return list->head == list;
   1f50e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f510:	42b4      	cmp	r4, r6
   1f512:	d0ea      	beq.n	1f4ea <add_event+0x10>
   1f514:	2e00      	cmp	r6, #0
   1f516:	bf38      	it	cc
   1f518:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1f51a:	2e00      	cmp	r6, #0
   1f51c:	d0e5      	beq.n	1f4ea <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   1f51e:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1f520:	b101      	cbz	r1, 1f524 <add_event+0x4a>
   1f522:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1f524:	4638      	mov	r0, r7
   1f526:	f7ff ff6e 	bl	1f406 <z_sched_prio_cmp>
   1f52a:	2800      	cmp	r0, #0
   1f52c:	dd05      	ble.n	1f53a <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   1f52e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1f530:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1f534:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1f536:	6075      	str	r5, [r6, #4]
			return;
   1f538:	e7dc      	b.n	1f4f4 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   1f53a:	6863      	ldr	r3, [r4, #4]
   1f53c:	42b3      	cmp	r3, r6
   1f53e:	d0d4      	beq.n	1f4ea <add_event+0x10>
   1f540:	6836      	ldr	r6, [r6, #0]
   1f542:	e7ea      	b.n	1f51a <add_event+0x40>

0001f544 <z_handle_obj_poll_events>:
{
   1f544:	4603      	mov	r3, r0
	return list->head == list;
   1f546:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1f548:	4283      	cmp	r3, r0
   1f54a:	d008      	beq.n	1f55e <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1f54c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1f550:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f552:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f554:	2300      	movs	r3, #0
	node->prev = NULL;
   1f556:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1f55a:	f7fc bf83 	b.w	1c464 <signal_poll_event>
}
   1f55e:	4770      	bx	lr

0001f560 <k_free>:
	if (ptr != NULL) {
   1f560:	b120      	cbz	r0, 1f56c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1f562:	1f01      	subs	r1, r0, #4
   1f564:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1f568:	f7f9 bc98 	b.w	18e9c <k_heap_free>
}
   1f56c:	4770      	bx	lr

0001f56e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1f56e:	4770      	bx	lr

0001f570 <memcmp>:
   1f570:	b530      	push	{r4, r5, lr}
   1f572:	3901      	subs	r1, #1
   1f574:	2400      	movs	r4, #0
   1f576:	42a2      	cmp	r2, r4
   1f578:	d101      	bne.n	1f57e <memcmp+0xe>
   1f57a:	2000      	movs	r0, #0
   1f57c:	e005      	b.n	1f58a <memcmp+0x1a>
   1f57e:	5d03      	ldrb	r3, [r0, r4]
   1f580:	3401      	adds	r4, #1
   1f582:	5d0d      	ldrb	r5, [r1, r4]
   1f584:	42ab      	cmp	r3, r5
   1f586:	d0f6      	beq.n	1f576 <memcmp+0x6>
   1f588:	1b58      	subs	r0, r3, r5
   1f58a:	bd30      	pop	{r4, r5, pc}

0001f58c <memcpy>:
   1f58c:	440a      	add	r2, r1
   1f58e:	4291      	cmp	r1, r2
   1f590:	f100 33ff 	add.w	r3, r0, #4294967295
   1f594:	d100      	bne.n	1f598 <memcpy+0xc>
   1f596:	4770      	bx	lr
   1f598:	b510      	push	{r4, lr}
   1f59a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1f59e:	f803 4f01 	strb.w	r4, [r3, #1]!
   1f5a2:	4291      	cmp	r1, r2
   1f5a4:	d1f9      	bne.n	1f59a <memcpy+0xe>
   1f5a6:	bd10      	pop	{r4, pc}

0001f5a8 <__memcpy_chk>:
   1f5a8:	429a      	cmp	r2, r3
   1f5aa:	b508      	push	{r3, lr}
   1f5ac:	d901      	bls.n	1f5b2 <__memcpy_chk+0xa>
   1f5ae:	f7f2 fb4d 	bl	11c4c <__chk_fail>
   1f5b2:	4281      	cmp	r1, r0
   1f5b4:	d804      	bhi.n	1f5c0 <__memcpy_chk+0x18>
   1f5b6:	188b      	adds	r3, r1, r2
   1f5b8:	4298      	cmp	r0, r3
   1f5ba:	d3f8      	bcc.n	1f5ae <__memcpy_chk+0x6>
   1f5bc:	4281      	cmp	r1, r0
   1f5be:	d102      	bne.n	1f5c6 <__memcpy_chk+0x1e>
   1f5c0:	1883      	adds	r3, r0, r2
   1f5c2:	4299      	cmp	r1, r3
   1f5c4:	d3f3      	bcc.n	1f5ae <__memcpy_chk+0x6>
   1f5c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1f5ca:	f7ff bfdf 	b.w	1f58c <memcpy>

0001f5ce <memset>:
   1f5ce:	4402      	add	r2, r0
   1f5d0:	4603      	mov	r3, r0
   1f5d2:	4293      	cmp	r3, r2
   1f5d4:	d100      	bne.n	1f5d8 <memset+0xa>
   1f5d6:	4770      	bx	lr
   1f5d8:	f803 1b01 	strb.w	r1, [r3], #1
   1f5dc:	e7f9      	b.n	1f5d2 <memset+0x4>

0001f5de <strcpy>:
   1f5de:	4603      	mov	r3, r0
   1f5e0:	f811 2b01 	ldrb.w	r2, [r1], #1
   1f5e4:	f803 2b01 	strb.w	r2, [r3], #1
   1f5e8:	2a00      	cmp	r2, #0
   1f5ea:	d1f9      	bne.n	1f5e0 <strcpy+0x2>
   1f5ec:	4770      	bx	lr

0001f5ee <strncmp>:
   1f5ee:	b510      	push	{r4, lr}
   1f5f0:	b16a      	cbz	r2, 1f60e <strncmp+0x20>
   1f5f2:	3901      	subs	r1, #1
   1f5f4:	1884      	adds	r4, r0, r2
   1f5f6:	f810 3b01 	ldrb.w	r3, [r0], #1
   1f5fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1f5fe:	4293      	cmp	r3, r2
   1f600:	d103      	bne.n	1f60a <strncmp+0x1c>
   1f602:	42a0      	cmp	r0, r4
   1f604:	d001      	beq.n	1f60a <strncmp+0x1c>
   1f606:	2b00      	cmp	r3, #0
   1f608:	d1f5      	bne.n	1f5f6 <strncmp+0x8>
   1f60a:	1a98      	subs	r0, r3, r2
   1f60c:	bd10      	pop	{r4, pc}
   1f60e:	4610      	mov	r0, r2
   1f610:	e7fc      	b.n	1f60c <strncmp+0x1e>

0001f612 <strnlen>:
   1f612:	b510      	push	{r4, lr}
   1f614:	4602      	mov	r2, r0
   1f616:	4401      	add	r1, r0
   1f618:	428a      	cmp	r2, r1
   1f61a:	4613      	mov	r3, r2
   1f61c:	d101      	bne.n	1f622 <strnlen+0x10>
   1f61e:	1a18      	subs	r0, r3, r0
   1f620:	bd10      	pop	{r4, pc}
   1f622:	781c      	ldrb	r4, [r3, #0]
   1f624:	3201      	adds	r2, #1
   1f626:	2c00      	cmp	r4, #0
   1f628:	d1f6      	bne.n	1f618 <strnlen+0x6>
   1f62a:	e7f8      	b.n	1f61e <strnlen+0xc>

0001f62c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1f62c:	f7f9 b818 	b.w	18660 <SystemInit>
