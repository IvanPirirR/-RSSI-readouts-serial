
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20004080 	.word	0x20004080
}
   4:	00011b75 	.word	0x00011b75
   8:	0001e045 	.word	0x0001e045
   c:	00011b49 	.word	0x00011b49
  10:	00011b49 	.word	0x00011b49
  14:	00011b49 	.word	0x00011b49
  18:	00011b49 	.word	0x00011b49
	...
  2c:	00011799 	.word	0x00011799
  30:	00011b49 	.word	0x00011b49
  34:	00000000 	.word	0x00000000
  38:	00011745 	.word	0x00011745
  3c:	00017a3d 	.word	0x00017a3d

00000040 <_irq_vector_table>:
  40:	00011851 00020705 00011851 00011851     Q.......Q...Q...
  50:	00011851 00011851 00011851 00011851     Q...Q...Q...Q...
  60:	000206cd 00011851 00011851 000206eb     ....Q...Q.......
  70:	00011851 00011851 00011851 00011851     Q...Q...Q...Q...
  80:	00011851 00011851 00011851 00011851     Q...Q...Q...Q...
  90:	00011851 00011851 00011851 00011851     Q...Q...Q...Q...
  a0:	00011851 00011851 00011851 00011851     Q...Q...Q...Q...
  b0:	00011851 00011851 00011851 00011851     Q...Q...Q...Q...
  c0:	00011851 00011851 00011851 00011851     Q...Q...Q...Q...
  d0:	00011851 00011851 00011851              Q...Q...Q...

Disassembly of section text:

000000e0 <memchr>:
      e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
      e4:	2a10      	cmp	r2, #16
      e6:	db2b      	blt.n	140 <CONFIG_IDLE_STACK_SIZE>
      e8:	f010 0f07 	tst.w	r0, #7
      ec:	d008      	beq.n	100 <CONFIG_KOBJECT_TEXT_AREA>
      ee:	f810 3b01 	ldrb.w	r3, [r0], #1
      f2:	3a01      	subs	r2, #1
      f4:	428b      	cmp	r3, r1
      f6:	d02d      	beq.n	154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
      f8:	f010 0f07 	tst.w	r0, #7
      fc:	b342      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
      fe:	d1f6      	bne.n	ee <memchr+0xe>
     100:	b4f0      	push	{r4, r5, r6, r7}
     102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     10a:	f022 0407 	bic.w	r4, r2, #7
     10e:	f07f 0700 	mvns.w	r7, #0
     112:	2300      	movs	r3, #0
     114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     118:	3c08      	subs	r4, #8
     11a:	ea85 0501 	eor.w	r5, r5, r1
     11e:	ea86 0601 	eor.w	r6, r6, r1
     122:	fa85 f547 	uadd8	r5, r5, r7
     126:	faa3 f587 	sel	r5, r3, r7
     12a:	fa86 f647 	uadd8	r6, r6, r7
     12e:	faa5 f687 	sel	r6, r5, r7
     132:	b98e      	cbnz	r6, 158 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xe>
     134:	d1ee      	bne.n	114 <CONFIG_KOBJECT_TEXT_AREA+0x14>
     136:	bcf0      	pop	{r4, r5, r6, r7}
     138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     13c:	f002 0207 	and.w	r2, r2, #7
     140:	b132      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
     142:	f810 3b01 	ldrb.w	r3, [r0], #1
     146:	3a01      	subs	r2, #1
     148:	ea83 0301 	eor.w	r3, r3, r1
     14c:	b113      	cbz	r3, 154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
     14e:	d1f8      	bne.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     150:	2000      	movs	r0, #0
     152:	4770      	bx	lr
     154:	3801      	subs	r0, #1
     156:	4770      	bx	lr
     158:	2d00      	cmp	r5, #0
     15a:	bf06      	itte	eq
     15c:	4635      	moveq	r5, r6
     15e:	3803      	subeq	r0, #3
     160:	3807      	subne	r0, #7
     162:	f015 0f01 	tst.w	r5, #1
     166:	d107      	bne.n	178 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2e>
     168:	3001      	adds	r0, #1
     16a:	f415 7f80 	tst.w	r5, #256	; 0x100
     16e:	bf02      	ittt	eq
     170:	3001      	addeq	r0, #1
     172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     176:	3001      	addeq	r0, #1
     178:	bcf0      	pop	{r4, r5, r6, r7}
     17a:	3801      	subs	r0, #1
     17c:	4770      	bx	lr
     17e:	bf00      	nop

00000180 <__aeabi_uldivmod>:
     180:	b953      	cbnz	r3, 198 <__aeabi_uldivmod+0x18>
     182:	b94a      	cbnz	r2, 198 <__aeabi_uldivmod+0x18>
     184:	2900      	cmp	r1, #0
     186:	bf08      	it	eq
     188:	2800      	cmpeq	r0, #0
     18a:	bf1c      	itt	ne
     18c:	f04f 31ff 	movne.w	r1, #4294967295
     190:	f04f 30ff 	movne.w	r0, #4294967295
     194:	f000 b96c 	b.w	470 <__aeabi_idiv0>
     198:	f1ad 0c08 	sub.w	ip, sp, #8
     19c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1a0:	f000 f806 	bl	1b0 <__udivmoddi4>
     1a4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1ac:	b004      	add	sp, #16
     1ae:	4770      	bx	lr

000001b0 <__udivmoddi4>:
     1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1b4:	9e08      	ldr	r6, [sp, #32]
     1b6:	460d      	mov	r5, r1
     1b8:	4604      	mov	r4, r0
     1ba:	468e      	mov	lr, r1
     1bc:	2b00      	cmp	r3, #0
     1be:	f040 8082 	bne.w	2c6 <CONFIG_FLASH_SIZE+0xc6>
     1c2:	428a      	cmp	r2, r1
     1c4:	4617      	mov	r7, r2
     1c6:	d946      	bls.n	256 <CONFIG_FLASH_SIZE+0x56>
     1c8:	fab2 f282 	clz	r2, r2
     1cc:	b14a      	cbz	r2, 1e2 <__udivmoddi4+0x32>
     1ce:	f1c2 0120 	rsb	r1, r2, #32
     1d2:	fa05 f302 	lsl.w	r3, r5, r2
     1d6:	fa20 f101 	lsr.w	r1, r0, r1
     1da:	4097      	lsls	r7, r2
     1dc:	ea41 0e03 	orr.w	lr, r1, r3
     1e0:	4094      	lsls	r4, r2
     1e2:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1e6:	0c23      	lsrs	r3, r4, #16
     1e8:	fbbe fcf8 	udiv	ip, lr, r8
     1ec:	b2b9      	uxth	r1, r7
     1ee:	fb08 ee1c 	mls	lr, r8, ip, lr
     1f2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     1f6:	fb0c f001 	mul.w	r0, ip, r1
     1fa:	4298      	cmp	r0, r3
     1fc:	d90a      	bls.n	214 <CONFIG_FLASH_SIZE+0x14>
     1fe:	18fb      	adds	r3, r7, r3
     200:	f10c 35ff 	add.w	r5, ip, #4294967295
     204:	f080 8116 	bcs.w	434 <CONFIG_BT_RX_STACK_SIZE+0x34>
     208:	4298      	cmp	r0, r3
     20a:	f240 8113 	bls.w	434 <CONFIG_BT_RX_STACK_SIZE+0x34>
     20e:	f1ac 0c02 	sub.w	ip, ip, #2
     212:	443b      	add	r3, r7
     214:	1a1b      	subs	r3, r3, r0
     216:	b2a4      	uxth	r4, r4
     218:	fbb3 f0f8 	udiv	r0, r3, r8
     21c:	fb08 3310 	mls	r3, r8, r0, r3
     220:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     224:	fb00 f101 	mul.w	r1, r0, r1
     228:	42a1      	cmp	r1, r4
     22a:	d909      	bls.n	240 <CONFIG_FLASH_SIZE+0x40>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	f080 8101 	bcs.w	438 <CONFIG_BT_RX_STACK_SIZE+0x38>
     236:	42a1      	cmp	r1, r4
     238:	f240 80fe 	bls.w	438 <CONFIG_BT_RX_STACK_SIZE+0x38>
     23c:	3802      	subs	r0, #2
     23e:	443c      	add	r4, r7
     240:	1a64      	subs	r4, r4, r1
     242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     246:	2100      	movs	r1, #0
     248:	b11e      	cbz	r6, 252 <CONFIG_FLASH_SIZE+0x52>
     24a:	40d4      	lsrs	r4, r2
     24c:	2300      	movs	r3, #0
     24e:	e9c6 4300 	strd	r4, r3, [r6]
     252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     256:	b902      	cbnz	r2, 25a <CONFIG_FLASH_SIZE+0x5a>
     258:	deff      	udf	#255	; 0xff
     25a:	fab2 f282 	clz	r2, r2
     25e:	2a00      	cmp	r2, #0
     260:	d14f      	bne.n	302 <CONFIG_FLASH_SIZE+0x102>
     262:	1bcb      	subs	r3, r1, r7
     264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     268:	fa1f f887 	uxth.w	r8, r7
     26c:	2101      	movs	r1, #1
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
     272:	0c25      	lsrs	r5, r4, #16
     274:	fb0e 331c 	mls	r3, lr, ip, r3
     278:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     27c:	fb08 f30c 	mul.w	r3, r8, ip
     280:	42ab      	cmp	r3, r5
     282:	d907      	bls.n	294 <CONFIG_FLASH_SIZE+0x94>
     284:	197d      	adds	r5, r7, r5
     286:	f10c 30ff 	add.w	r0, ip, #4294967295
     28a:	d202      	bcs.n	292 <CONFIG_FLASH_SIZE+0x92>
     28c:	42ab      	cmp	r3, r5
     28e:	f200 80e7 	bhi.w	460 <CONFIG_BT_RX_STACK_SIZE+0x60>
     292:	4684      	mov	ip, r0
     294:	1aed      	subs	r5, r5, r3
     296:	b2a3      	uxth	r3, r4
     298:	fbb5 f0fe 	udiv	r0, r5, lr
     29c:	fb0e 5510 	mls	r5, lr, r0, r5
     2a0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     2a4:	fb08 f800 	mul.w	r8, r8, r0
     2a8:	45a0      	cmp	r8, r4
     2aa:	d907      	bls.n	2bc <CONFIG_FLASH_SIZE+0xbc>
     2ac:	193c      	adds	r4, r7, r4
     2ae:	f100 33ff 	add.w	r3, r0, #4294967295
     2b2:	d202      	bcs.n	2ba <CONFIG_FLASH_SIZE+0xba>
     2b4:	45a0      	cmp	r8, r4
     2b6:	f200 80d7 	bhi.w	468 <CONFIG_BT_RX_STACK_SIZE+0x68>
     2ba:	4618      	mov	r0, r3
     2bc:	eba4 0408 	sub.w	r4, r4, r8
     2c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     2c4:	e7c0      	b.n	248 <CONFIG_FLASH_SIZE+0x48>
     2c6:	428b      	cmp	r3, r1
     2c8:	d908      	bls.n	2dc <CONFIG_FLASH_SIZE+0xdc>
     2ca:	2e00      	cmp	r6, #0
     2cc:	f000 80af 	beq.w	42e <CONFIG_BT_RX_STACK_SIZE+0x2e>
     2d0:	2100      	movs	r1, #0
     2d2:	e9c6 0500 	strd	r0, r5, [r6]
     2d6:	4608      	mov	r0, r1
     2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2dc:	fab3 f183 	clz	r1, r3
     2e0:	2900      	cmp	r1, #0
     2e2:	d14b      	bne.n	37c <CONFIG_FLASH_SIZE+0x17c>
     2e4:	42ab      	cmp	r3, r5
     2e6:	d302      	bcc.n	2ee <CONFIG_FLASH_SIZE+0xee>
     2e8:	4282      	cmp	r2, r0
     2ea:	f200 80b7 	bhi.w	45c <CONFIG_BT_RX_STACK_SIZE+0x5c>
     2ee:	1a84      	subs	r4, r0, r2
     2f0:	eb65 0303 	sbc.w	r3, r5, r3
     2f4:	2001      	movs	r0, #1
     2f6:	469e      	mov	lr, r3
     2f8:	2e00      	cmp	r6, #0
     2fa:	d0aa      	beq.n	252 <CONFIG_FLASH_SIZE+0x52>
     2fc:	e9c6 4e00 	strd	r4, lr, [r6]
     300:	e7a7      	b.n	252 <CONFIG_FLASH_SIZE+0x52>
     302:	f1c2 0c20 	rsb	ip, r2, #32
     306:	fa01 f302 	lsl.w	r3, r1, r2
     30a:	4097      	lsls	r7, r2
     30c:	fa20 f00c 	lsr.w	r0, r0, ip
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa21 fc0c 	lsr.w	ip, r1, ip
     318:	4318      	orrs	r0, r3
     31a:	fbbc f1fe 	udiv	r1, ip, lr
     31e:	0c05      	lsrs	r5, r0, #16
     320:	fb0e cc11 	mls	ip, lr, r1, ip
     324:	fa1f f887 	uxth.w	r8, r7
     328:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     32c:	fb01 f308 	mul.w	r3, r1, r8
     330:	42ab      	cmp	r3, r5
     332:	fa04 f402 	lsl.w	r4, r4, r2
     336:	d909      	bls.n	34c <CONFIG_FLASH_SIZE+0x14c>
     338:	197d      	adds	r5, r7, r5
     33a:	f101 3cff 	add.w	ip, r1, #4294967295
     33e:	f080 808b 	bcs.w	458 <CONFIG_BT_RX_STACK_SIZE+0x58>
     342:	42ab      	cmp	r3, r5
     344:	f240 8088 	bls.w	458 <CONFIG_BT_RX_STACK_SIZE+0x58>
     348:	3902      	subs	r1, #2
     34a:	443d      	add	r5, r7
     34c:	1aeb      	subs	r3, r5, r3
     34e:	b285      	uxth	r5, r0
     350:	fbb3 f0fe 	udiv	r0, r3, lr
     354:	fb0e 3310 	mls	r3, lr, r0, r3
     358:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     35c:	fb00 f308 	mul.w	r3, r0, r8
     360:	42ab      	cmp	r3, r5
     362:	d907      	bls.n	374 <CONFIG_FLASH_SIZE+0x174>
     364:	197d      	adds	r5, r7, r5
     366:	f100 3cff 	add.w	ip, r0, #4294967295
     36a:	d271      	bcs.n	450 <CONFIG_BT_RX_STACK_SIZE+0x50>
     36c:	42ab      	cmp	r3, r5
     36e:	d96f      	bls.n	450 <CONFIG_BT_RX_STACK_SIZE+0x50>
     370:	3802      	subs	r0, #2
     372:	443d      	add	r5, r7
     374:	1aeb      	subs	r3, r5, r3
     376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     37a:	e778      	b.n	26e <CONFIG_FLASH_SIZE+0x6e>
     37c:	f1c1 0c20 	rsb	ip, r1, #32
     380:	408b      	lsls	r3, r1
     382:	fa22 f70c 	lsr.w	r7, r2, ip
     386:	431f      	orrs	r7, r3
     388:	fa20 f40c 	lsr.w	r4, r0, ip
     38c:	fa05 f301 	lsl.w	r3, r5, r1
     390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     394:	fa25 f50c 	lsr.w	r5, r5, ip
     398:	431c      	orrs	r4, r3
     39a:	0c23      	lsrs	r3, r4, #16
     39c:	fbb5 f9fe 	udiv	r9, r5, lr
     3a0:	fa1f f887 	uxth.w	r8, r7
     3a4:	fb0e 5519 	mls	r5, lr, r9, r5
     3a8:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     3ac:	fb09 fa08 	mul.w	sl, r9, r8
     3b0:	45aa      	cmp	sl, r5
     3b2:	fa02 f201 	lsl.w	r2, r2, r1
     3b6:	fa00 f301 	lsl.w	r3, r0, r1
     3ba:	d908      	bls.n	3ce <CONFIG_FLASH_SIZE+0x1ce>
     3bc:	197d      	adds	r5, r7, r5
     3be:	f109 30ff 	add.w	r0, r9, #4294967295
     3c2:	d247      	bcs.n	454 <CONFIG_BT_RX_STACK_SIZE+0x54>
     3c4:	45aa      	cmp	sl, r5
     3c6:	d945      	bls.n	454 <CONFIG_BT_RX_STACK_SIZE+0x54>
     3c8:	f1a9 0902 	sub.w	r9, r9, #2
     3cc:	443d      	add	r5, r7
     3ce:	eba5 050a 	sub.w	r5, r5, sl
     3d2:	b2a4      	uxth	r4, r4
     3d4:	fbb5 f0fe 	udiv	r0, r5, lr
     3d8:	fb0e 5510 	mls	r5, lr, r0, r5
     3dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     3e0:	fb00 f808 	mul.w	r8, r0, r8
     3e4:	45a0      	cmp	r8, r4
     3e6:	d907      	bls.n	3f8 <CONFIG_FLASH_SIZE+0x1f8>
     3e8:	193c      	adds	r4, r7, r4
     3ea:	f100 35ff 	add.w	r5, r0, #4294967295
     3ee:	d22d      	bcs.n	44c <CONFIG_BT_RX_STACK_SIZE+0x4c>
     3f0:	45a0      	cmp	r8, r4
     3f2:	d92b      	bls.n	44c <CONFIG_BT_RX_STACK_SIZE+0x4c>
     3f4:	3802      	subs	r0, #2
     3f6:	443c      	add	r4, r7
     3f8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     3fc:	eba4 0408 	sub.w	r4, r4, r8
     400:	fba0 8902 	umull	r8, r9, r0, r2
     404:	454c      	cmp	r4, r9
     406:	46c6      	mov	lr, r8
     408:	464d      	mov	r5, r9
     40a:	d319      	bcc.n	440 <CONFIG_BT_RX_STACK_SIZE+0x40>
     40c:	d016      	beq.n	43c <CONFIG_BT_RX_STACK_SIZE+0x3c>
     40e:	b15e      	cbz	r6, 428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     410:	ebb3 020e 	subs.w	r2, r3, lr
     414:	eb64 0405 	sbc.w	r4, r4, r5
     418:	fa04 fc0c 	lsl.w	ip, r4, ip
     41c:	40ca      	lsrs	r2, r1
     41e:	ea4c 0202 	orr.w	r2, ip, r2
     422:	40cc      	lsrs	r4, r1
     424:	e9c6 2400 	strd	r2, r4, [r6]
     428:	2100      	movs	r1, #0
     42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     42e:	4631      	mov	r1, r6
     430:	4630      	mov	r0, r6
     432:	e70e      	b.n	252 <CONFIG_FLASH_SIZE+0x52>
     434:	46ac      	mov	ip, r5
     436:	e6ed      	b.n	214 <CONFIG_FLASH_SIZE+0x14>
     438:	4618      	mov	r0, r3
     43a:	e701      	b.n	240 <CONFIG_FLASH_SIZE+0x40>
     43c:	4543      	cmp	r3, r8
     43e:	d2e6      	bcs.n	40e <CONFIG_BT_RX_STACK_SIZE+0xe>
     440:	ebb8 0e02 	subs.w	lr, r8, r2
     444:	eb69 0507 	sbc.w	r5, r9, r7
     448:	3801      	subs	r0, #1
     44a:	e7e0      	b.n	40e <CONFIG_BT_RX_STACK_SIZE+0xe>
     44c:	4628      	mov	r0, r5
     44e:	e7d3      	b.n	3f8 <CONFIG_FLASH_SIZE+0x1f8>
     450:	4660      	mov	r0, ip
     452:	e78f      	b.n	374 <CONFIG_FLASH_SIZE+0x174>
     454:	4681      	mov	r9, r0
     456:	e7ba      	b.n	3ce <CONFIG_FLASH_SIZE+0x1ce>
     458:	4661      	mov	r1, ip
     45a:	e777      	b.n	34c <CONFIG_FLASH_SIZE+0x14c>
     45c:	4608      	mov	r0, r1
     45e:	e74b      	b.n	2f8 <CONFIG_FLASH_SIZE+0xf8>
     460:	f1ac 0c02 	sub.w	ip, ip, #2
     464:	443d      	add	r5, r7
     466:	e715      	b.n	294 <CONFIG_FLASH_SIZE+0x94>
     468:	3802      	subs	r0, #2
     46a:	443c      	add	r4, r7
     46c:	e726      	b.n	2bc <CONFIG_FLASH_SIZE+0xbc>
     46e:	bf00      	nop

00000470 <__aeabi_idiv0>:
     470:	4770      	bx	lr
     472:	bf00      	nop

00000474 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     476:	4615      	mov	r5, r2
     478:	4a0a      	ldr	r2, [pc, #40]	; (4a4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x30>)
     47a:	461c      	mov	r4, r3
     47c:	6856      	ldr	r6, [r2, #4]
     47e:	b12e      	cbz	r6, 48c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
     480:	b001      	add	sp, #4
     482:	462a      	mov	r2, r5
     484:	46b4      	mov	ip, r6
     486:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     48a:	4760      	bx	ip
     48c:	2000      	movs	r0, #0
     48e:	f88d 0000 	strb.w	r0, [sp]
     492:	4668      	mov	r0, sp
     494:	f00b fefa 	bl	c28c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     498:	f89d 0000 	ldrb.w	r0, [sp]
     49c:	1a28      	subs	r0, r5, r0
     49e:	7020      	strb	r0, [r4, #0]
     4a0:	2000      	movs	r0, #0
     4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4a4:	20000000 	.word	0x20000000

000004a8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     4a8:	4801      	ldr	r0, [pc, #4]	; (4b0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     4aa:	7800      	ldrb	r0, [r0, #0]
     4ac:	4770      	bx	lr
     4ae:	0000      	.short	0x0000
     4b0:	20000008 	.word	0x20000008

000004b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     4b4:	4905      	ldr	r1, [pc, #20]	; (4cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     4b6:	780a      	ldrb	r2, [r1, #0]
     4b8:	4290      	cmp	r0, r2
     4ba:	d301      	bcc.n	4c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     4bc:	2000      	movs	r0, #0
     4be:	4770      	bx	lr
     4c0:	6849      	ldr	r1, [r1, #4]
     4c2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     4c6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     4ca:	4770      	bx	lr
     4cc:	20000008 	.word	0x20000008
     4d0:	b570      	push	{r4, r5, r6, lr}
     4d2:	4605      	mov	r5, r0
     4d4:	2a20      	cmp	r2, #32
     4d6:	d027      	beq.n	528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>
     4d8:	4819      	ldr	r0, [pc, #100]	; (540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>)
     4da:	4c1a      	ldr	r4, [pc, #104]	; (544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>)
     4dc:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     4e0:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     4e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     4e8:	2920      	cmp	r1, #32
     4ea:	d022      	beq.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     4ec:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     4f0:	7840      	ldrb	r0, [r0, #1]
     4f2:	784c      	ldrb	r4, [r1, #1]
     4f4:	7048      	strb	r0, [r1, #1]
     4f6:	4620      	mov	r0, r4
     4f8:	4601      	mov	r1, r0
     4fa:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     4fe:	4291      	cmp	r1, r2
     500:	7005      	strb	r5, [r0, #0]
     502:	7840      	ldrb	r0, [r0, #1]
     504:	d1f8      	bne.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     506:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     50a:	2a20      	cmp	r2, #32
     50c:	bf1a      	itte	ne
     50e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     512:	7054      	strbne	r4, [r2, #1]
     514:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     518:	2220      	movs	r2, #32
     51a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     51e:	f88c 2001 	strb.w	r2, [ip, #1]
     522:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     526:	bd70      	pop	{r4, r5, r6, pc}
     528:	f240 217e 	movw	r1, #638	; 0x27e
     52c:	2070      	movs	r0, #112	; 0x70
     52e:	f003 f957 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     532:	f893 4020 	ldrb.w	r4, [r3, #32]
     536:	7840      	ldrb	r0, [r0, #1]
     538:	f883 0020 	strb.w	r0, [r3, #32]
     53c:	e7db      	b.n	4f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe>
     53e:	0000      	.short	0x0000
     540:	20000c44 	.word	0x20000c44
     544:	20000cc4 	.word	0x20000cc4
     548:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     54c:	b085      	sub	sp, #20
     54e:	4615      	mov	r5, r2
     550:	460c      	mov	r4, r1
     552:	f002 f91b 	bl	278c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     556:	4428      	add	r0, r5
     558:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     55c:	9002      	str	r0, [sp, #8]
     55e:	6821      	ldr	r1, [r4, #0]
     560:	1a08      	subs	r0, r1, r0
     562:	0200      	lsls	r0, r0, #8
     564:	17c1      	asrs	r1, r0, #31
     566:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     56a:	1200      	asrs	r0, r0, #8
     56c:	2800      	cmp	r0, #0
     56e:	f300 80d5 	bgt.w	71c <CONFIG_BT_HCI_TX_STACK_SIZE+0x11c>
     572:	48ac      	ldr	r0, [pc, #688]	; (824 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x24>)
     574:	9f08      	ldr	r7, [sp, #32]
     576:	4eac      	ldr	r6, [pc, #688]	; (828 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x28>)
     578:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     57c:	9003      	str	r0, [sp, #12]
     57e:	f890 5020 	ldrb.w	r5, [r0, #32]
     582:	2020      	movs	r0, #32
     584:	46e9      	mov	r9, sp
     586:	f10d 0804 	add.w	r8, sp, #4
     58a:	f88d 0000 	strb.w	r0, [sp]
     58e:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     592:	2d20      	cmp	r5, #32
     594:	bf18      	it	ne
     596:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     59a:	d025      	beq.n	5e8 <__data_size+0x28>
     59c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     5a0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     5a4:	6822      	ldr	r2, [r4, #0]
     5a6:	68c1      	ldr	r1, [r0, #12]
     5a8:	1a51      	subs	r1, r2, r1
     5aa:	0209      	lsls	r1, r1, #8
     5ac:	17ca      	asrs	r2, r1, #31
     5ae:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     5b2:	3008      	adds	r0, #8
     5b4:	1209      	asrs	r1, r1, #8
     5b6:	d417      	bmi.n	5e8 <__data_size+0x28>
     5b8:	8961      	ldrh	r1, [r4, #10]
     5ba:	b171      	cbz	r1, 5da <__data_size+0x1a>
     5bc:	8941      	ldrh	r1, [r0, #10]
     5be:	b961      	cbnz	r1, 5da <__data_size+0x1a>
     5c0:	f000 fdba 	bl	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
     5c4:	f002 f8e2 	bl	278c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     5c8:	6821      	ldr	r1, [r4, #0]
     5ca:	1a08      	subs	r0, r1, r0
     5cc:	0200      	lsls	r0, r0, #8
     5ce:	17c1      	asrs	r1, r0, #31
     5d0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     5d4:	1200      	asrs	r0, r0, #8
     5d6:	2833      	cmp	r0, #51	; 0x33
     5d8:	db06      	blt.n	5e8 <__data_size+0x28>
     5da:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     5de:	f889 5000 	strb.w	r5, [r9]
     5e2:	7845      	ldrb	r5, [r0, #1]
     5e4:	2d20      	cmp	r5, #32
     5e6:	d1d9      	bne.n	59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>
     5e8:	f899 0000 	ldrb.w	r0, [r9]
     5ec:	f888 0000 	strb.w	r0, [r8]
     5f0:	46a1      	mov	r9, r4
     5f2:	2d20      	cmp	r5, #32
     5f4:	bf1c      	itt	ne
     5f6:	488d      	ldrne	r0, [pc, #564]	; (82c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2c>)
     5f8:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     5fc:	f000 810e 	beq.w	81c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1c>
     600:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     604:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     608:	f8d9 2004 	ldr.w	r2, [r9, #4]
     60c:	f8da 1008 	ldr.w	r1, [sl, #8]
     610:	4648      	mov	r0, r9
     612:	1a89      	subs	r1, r1, r2
     614:	0209      	lsls	r1, r1, #8
     616:	17ca      	asrs	r2, r1, #31
     618:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     61c:	f10a 0708 	add.w	r7, sl, #8
     620:	1209      	asrs	r1, r1, #8
     622:	d415      	bmi.n	650 <CONFIG_BT_HCI_TX_STACK_SIZE+0x50>
     624:	8979      	ldrh	r1, [r7, #10]
     626:	2900      	cmp	r1, #0
     628:	f000 80f8 	beq.w	81c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1c>
     62c:	8941      	ldrh	r1, [r0, #10]
     62e:	2900      	cmp	r1, #0
     630:	f040 80f4 	bne.w	81c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1c>
     634:	f000 fd80 	bl	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
     638:	f002 f8a8 	bl	278c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     63c:	6839      	ldr	r1, [r7, #0]
     63e:	1a08      	subs	r0, r1, r0
     640:	0200      	lsls	r0, r0, #8
     642:	17c1      	asrs	r1, r0, #31
     644:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     648:	1200      	asrs	r0, r0, #8
     64a:	2833      	cmp	r0, #51	; 0x33
     64c:	f280 80e6 	bge.w	81c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1c>
     650:	f888 5000 	strb.w	r5, [r8]
     654:	f89a 1014 	ldrb.w	r1, [sl, #20]
     658:	f899 000c 	ldrb.w	r0, [r9, #12]
     65c:	4281      	cmp	r1, r0
     65e:	d906      	bls.n	66e <CONFIG_BT_HCI_TX_STACK_SIZE+0x6e>
     660:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     664:	7845      	ldrb	r5, [r0, #1]
     666:	2d20      	cmp	r5, #32
     668:	d1ca      	bne.n	600 <CONFIG_BT_HCI_TX_STACK_SIZE>
     66a:	f000 b8d7 	b.w	81c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1c>
     66e:	f89d 0004 	ldrb.w	r0, [sp, #4]
     672:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     676:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     67a:	8a68      	ldrh	r0, [r5, #18]
     67c:	68ef      	ldr	r7, [r5, #12]
     67e:	2800      	cmp	r0, #0
     680:	d143      	bne.n	70a <CONFIG_BT_HCI_TX_STACK_SIZE+0x10a>
     682:	8960      	ldrh	r0, [r4, #10]
     684:	b3e8      	cbz	r0, 702 <CONFIG_BT_HCI_TX_STACK_SIZE+0x102>
     686:	68a8      	ldr	r0, [r5, #8]
     688:	f00b fe20 	bl	c2cc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     68c:	8a69      	ldrh	r1, [r5, #18]
     68e:	7c2a      	ldrb	r2, [r5, #16]
     690:	4b67      	ldr	r3, [pc, #412]	; (830 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30>)
     692:	4411      	add	r1, r2
     694:	1c49      	adds	r1, r1, #1
     696:	1842      	adds	r2, r0, r1
     698:	4298      	cmp	r0, r3
     69a:	d904      	bls.n	6a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa6>
     69c:	f240 6109 	movw	r1, #1545	; 0x609
     6a0:	2070      	movs	r0, #112	; 0x70
     6a2:	f003 f89d 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     6a6:	4863      	ldr	r0, [pc, #396]	; (834 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x34>)
     6a8:	4281      	cmp	r1, r0
     6aa:	dd04      	ble.n	6b6 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb6>
     6ac:	f240 610a 	movw	r1, #1546	; 0x60a
     6b0:	2070      	movs	r0, #112	; 0x70
     6b2:	f003 f895 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     6b6:	4860      	ldr	r0, [pc, #384]	; (838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>)
     6b8:	4281      	cmp	r1, r0
     6ba:	da04      	bge.n	6c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc6>
     6bc:	f240 610b 	movw	r1, #1547	; 0x60b
     6c0:	2070      	movs	r0, #112	; 0x70
     6c2:	f003 f88d 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     6c6:	485d      	ldr	r0, [pc, #372]	; (83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>)
     6c8:	4290      	cmp	r0, r2
     6ca:	bfdc      	itt	le
     6cc:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
     6d0:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
     6d4:	dd05      	ble.n	6e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe2>
     6d6:	2a00      	cmp	r2, #0
     6d8:	bfbc      	itt	lt
     6da:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
     6de:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
     6e2:	4610      	mov	r0, r2
     6e4:	f002 f852 	bl	278c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     6e8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     6ec:	1a78      	subs	r0, r7, r1
     6ee:	0200      	lsls	r0, r0, #8
     6f0:	17c2      	asrs	r2, r0, #31
     6f2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     6f6:	1200      	asrs	r0, r0, #8
     6f8:	2833      	cmp	r0, #51	; 0x33
     6fa:	bfb8      	it	lt
     6fc:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
     700:	e000      	b.n	704 <CONFIG_BT_HCI_TX_STACK_SIZE+0x104>
     702:	e002      	b.n	70a <CONFIG_BT_HCI_TX_STACK_SIZE+0x10a>
     704:	bfb8      	it	lt
     706:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     70a:	9802      	ldr	r0, [sp, #8]
     70c:	1a38      	subs	r0, r7, r0
     70e:	0200      	lsls	r0, r0, #8
     710:	17c1      	asrs	r1, r0, #31
     712:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     716:	1200      	asrs	r0, r0, #8
     718:	2800      	cmp	r0, #0
     71a:	dd03      	ble.n	724 <CONFIG_BT_HCI_TX_STACK_SIZE+0x124>
     71c:	b009      	add	sp, #36	; 0x24
     71e:	2000      	movs	r0, #0
     720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     724:	e9d4 1000 	ldrd	r1, r0, [r4]
     728:	1a40      	subs	r0, r0, r1
     72a:	4438      	add	r0, r7
     72c:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     730:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     734:	e9c4 1000 	strd	r1, r0, [r4]
     738:	9803      	ldr	r0, [sp, #12]
     73a:	f8dd 8020 	ldr.w	r8, [sp, #32]
     73e:	466f      	mov	r7, sp
     740:	f890 5020 	ldrb.w	r5, [r0, #32]
     744:	2020      	movs	r0, #32
     746:	f10d 0a04 	add.w	sl, sp, #4
     74a:	f88d 0000 	strb.w	r0, [sp]
     74e:	2d20      	cmp	r5, #32
     750:	bf1c      	itt	ne
     752:	4836      	ldrne	r0, [pc, #216]	; (82c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2c>)
     754:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     758:	d025      	beq.n	7a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a6>
     75a:	bf00      	nop
     75c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     760:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     764:	6822      	ldr	r2, [r4, #0]
     766:	68c1      	ldr	r1, [r0, #12]
     768:	1a51      	subs	r1, r2, r1
     76a:	0209      	lsls	r1, r1, #8
     76c:	17ca      	asrs	r2, r1, #31
     76e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     772:	3008      	adds	r0, #8
     774:	1209      	asrs	r1, r1, #8
     776:	d416      	bmi.n	7a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a6>
     778:	8961      	ldrh	r1, [r4, #10]
     77a:	b171      	cbz	r1, 79a <CONFIG_BT_HCI_TX_STACK_SIZE+0x19a>
     77c:	8941      	ldrh	r1, [r0, #10]
     77e:	b961      	cbnz	r1, 79a <CONFIG_BT_HCI_TX_STACK_SIZE+0x19a>
     780:	f000 fcda 	bl	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
     784:	f002 f802 	bl	278c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     788:	6821      	ldr	r1, [r4, #0]
     78a:	1a08      	subs	r0, r1, r0
     78c:	0200      	lsls	r0, r0, #8
     78e:	17c1      	asrs	r1, r0, #31
     790:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     794:	1200      	asrs	r0, r0, #8
     796:	2833      	cmp	r0, #51	; 0x33
     798:	db05      	blt.n	7a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a6>
     79a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     79e:	703d      	strb	r5, [r7, #0]
     7a0:	7845      	ldrb	r5, [r0, #1]
     7a2:	2d20      	cmp	r5, #32
     7a4:	d1da      	bne.n	75c <CONFIG_BT_HCI_TX_STACK_SIZE+0x15c>
     7a6:	7838      	ldrb	r0, [r7, #0]
     7a8:	f88a 0000 	strb.w	r0, [sl]
     7ac:	4627      	mov	r7, r4
     7ae:	2d20      	cmp	r5, #32
     7b0:	bf1c      	itt	ne
     7b2:	481e      	ldrne	r0, [pc, #120]	; (82c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2c>)
     7b4:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     7b8:	d030      	beq.n	81c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1c>
     7ba:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     7be:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     7c2:	6879      	ldr	r1, [r7, #4]
     7c4:	f8d9 2008 	ldr.w	r2, [r9, #8]
     7c8:	4638      	mov	r0, r7
     7ca:	1a51      	subs	r1, r2, r1
     7cc:	0209      	lsls	r1, r1, #8
     7ce:	17ca      	asrs	r2, r1, #31
     7d0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     7d4:	f109 0808 	add.w	r8, r9, #8
     7d8:	1209      	asrs	r1, r1, #8
     7da:	d412      	bmi.n	802 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2>
     7dc:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     7e0:	b1e1      	cbz	r1, 81c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1c>
     7e2:	8941      	ldrh	r1, [r0, #10]
     7e4:	b9d1      	cbnz	r1, 81c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1c>
     7e6:	f000 fca7 	bl	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
     7ea:	f001 ffcf 	bl	278c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     7ee:	f8d8 1000 	ldr.w	r1, [r8]
     7f2:	1a08      	subs	r0, r1, r0
     7f4:	0200      	lsls	r0, r0, #8
     7f6:	17c1      	asrs	r1, r0, #31
     7f8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     7fc:	1200      	asrs	r0, r0, #8
     7fe:	2833      	cmp	r0, #51	; 0x33
     800:	da0c      	bge.n	81c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1c>
     802:	f88a 5000 	strb.w	r5, [sl]
     806:	f899 0014 	ldrb.w	r0, [r9, #20]
     80a:	7b39      	ldrb	r1, [r7, #12]
     80c:	4288      	cmp	r0, r1
     80e:	f67f af2e 	bls.w	66e <CONFIG_BT_HCI_TX_STACK_SIZE+0x6e>
     812:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     816:	7845      	ldrb	r5, [r0, #1]
     818:	2d20      	cmp	r5, #32
     81a:	d1ce      	bne.n	7ba <CONFIG_BT_HCI_TX_STACK_SIZE+0x1ba>
     81c:	b009      	add	sp, #36	; 0x24
     81e:	2001      	movs	r0, #1
     820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     824:	20000cc4 	.word	0x20000cc4
     828:	20000944 	.word	0x20000944
     82c:	20000c44 	.word	0x20000c44
     830:	1e847fff 	.word	0x1e847fff
     834:	07a12000 	.word	0x07a12000
     838:	f85ee000 	.word	0xf85ee000
     83c:	1e848000 	.word	0x1e848000
     840:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     844:	4604      	mov	r4, r0
     846:	483c      	ldr	r0, [pc, #240]	; (938 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x138>)
     848:	460e      	mov	r6, r1
     84a:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     84e:	4f3b      	ldr	r7, [pc, #236]	; (93c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x13c>)
     850:	f890 5020 	ldrb.w	r5, [r0, #32]
     854:	2020      	movs	r0, #32
     856:	4698      	mov	r8, r3
     858:	4692      	mov	sl, r2
     85a:	7010      	strb	r0, [r2, #0]
     85c:	f507 7940 	add.w	r9, r7, #768	; 0x300
     860:	2d20      	cmp	r5, #32
     862:	bf18      	it	ne
     864:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     868:	d028      	beq.n	8bc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xbc>
     86a:	bf00      	nop
     86c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     870:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     874:	f100 0108 	add.w	r1, r0, #8
     878:	68c0      	ldr	r0, [r0, #12]
     87a:	6822      	ldr	r2, [r4, #0]
     87c:	1a10      	subs	r0, r2, r0
     87e:	0200      	lsls	r0, r0, #8
     880:	17c2      	asrs	r2, r0, #31
     882:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     886:	1200      	asrs	r0, r0, #8
     888:	d418      	bmi.n	8bc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xbc>
     88a:	8960      	ldrh	r0, [r4, #10]
     88c:	b178      	cbz	r0, 8ae <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xae>
     88e:	8948      	ldrh	r0, [r1, #10]
     890:	b968      	cbnz	r0, 8ae <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xae>
     892:	4608      	mov	r0, r1
     894:	f000 fc50 	bl	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
     898:	f001 ff78 	bl	278c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     89c:	6821      	ldr	r1, [r4, #0]
     89e:	1a08      	subs	r0, r1, r0
     8a0:	0200      	lsls	r0, r0, #8
     8a2:	17c1      	asrs	r1, r0, #31
     8a4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     8a8:	1200      	asrs	r0, r0, #8
     8aa:	2833      	cmp	r0, #51	; 0x33
     8ac:	db06      	blt.n	8bc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xbc>
     8ae:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     8b2:	f88a 5000 	strb.w	r5, [sl]
     8b6:	7845      	ldrb	r5, [r0, #1]
     8b8:	2d20      	cmp	r5, #32
     8ba:	d1d7      	bne.n	86c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6c>
     8bc:	f89a 0000 	ldrb.w	r0, [sl]
     8c0:	f888 0000 	strb.w	r0, [r8]
     8c4:	2d20      	cmp	r5, #32
     8c6:	bf18      	it	ne
     8c8:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     8cc:	d030      	beq.n	930 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x130>
     8ce:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     8d2:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     8d6:	6861      	ldr	r1, [r4, #4]
     8d8:	f8d9 2008 	ldr.w	r2, [r9, #8]
     8dc:	4620      	mov	r0, r4
     8de:	1a51      	subs	r1, r2, r1
     8e0:	0209      	lsls	r1, r1, #8
     8e2:	17ca      	asrs	r2, r1, #31
     8e4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     8e8:	f109 0608 	add.w	r6, r9, #8
     8ec:	1209      	asrs	r1, r1, #8
     8ee:	d410      	bmi.n	912 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x112>
     8f0:	8971      	ldrh	r1, [r6, #10]
     8f2:	b1e9      	cbz	r1, 930 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x130>
     8f4:	8941      	ldrh	r1, [r0, #10]
     8f6:	b9d9      	cbnz	r1, 930 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x130>
     8f8:	f000 fc1e 	bl	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
     8fc:	f001 ff46 	bl	278c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     900:	6831      	ldr	r1, [r6, #0]
     902:	1a08      	subs	r0, r1, r0
     904:	0200      	lsls	r0, r0, #8
     906:	17c1      	asrs	r1, r0, #31
     908:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     90c:	1200      	asrs	r0, r0, #8
     90e:	2833      	cmp	r0, #51	; 0x33
     910:	da0e      	bge.n	930 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x130>
     912:	f888 5000 	strb.w	r5, [r8]
     916:	f899 0014 	ldrb.w	r0, [r9, #20]
     91a:	7b21      	ldrb	r1, [r4, #12]
     91c:	4288      	cmp	r0, r1
     91e:	d802      	bhi.n	926 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x126>
     920:	2000      	movs	r0, #0
     922:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     926:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     92a:	7845      	ldrb	r5, [r0, #1]
     92c:	2d20      	cmp	r5, #32
     92e:	d1ce      	bne.n	8ce <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xce>
     930:	2001      	movs	r0, #1
     932:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     936:	0000      	.short	0x0000
     938:	20000cc4 	.word	0x20000cc4
     93c:	20000944 	.word	0x20000944
     940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     944:	f04f 0800 	mov.w	r8, #0
     948:	b098      	sub	sp, #96	; 0x60
     94a:	4616      	mov	r6, r2
     94c:	460d      	mov	r5, r1
     94e:	46c3      	mov	fp, r8
     950:	f002 f994 	bl	2c7c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     954:	4604      	mov	r4, r0
     956:	2d01      	cmp	r5, #1
     958:	bf18      	it	ne
     95a:	2d02      	cmpne	r5, #2
     95c:	d005      	beq.n	96a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16a>
     95e:	f640 1194 	movw	r1, #2452	; 0x994
     962:	f04f 0070 	mov.w	r0, #112	; 0x70
     966:	f002 ff3b 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     96a:	49fd      	ldr	r1, [pc, #1012]	; (d60 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x560>)
     96c:	2001      	movs	r0, #1
     96e:	6008      	str	r0, [r1, #0]
     970:	49fc      	ldr	r1, [pc, #1008]	; (d64 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x564>)
     972:	6889      	ldr	r1, [r1, #8]
     974:	6008      	str	r0, [r1, #0]
     976:	2000      	movs	r0, #0
     978:	900c      	str	r0, [sp, #48]	; 0x30
     97a:	1e40      	subs	r0, r0, #1
     97c:	900e      	str	r0, [sp, #56]	; 0x38
     97e:	49fa      	ldr	r1, [pc, #1000]	; (d68 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x568>)
     980:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     984:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     988:	3308      	adds	r3, #8
     98a:	af0f      	add	r7, sp, #60	; 0x3c
     98c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     98e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     992:	a80f      	add	r0, sp, #60	; 0x3c
     994:	f000 fbd0 	bl	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
     998:	900d      	str	r0, [sp, #52]	; 0x34
     99a:	48f3      	ldr	r0, [pc, #972]	; (d68 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x568>)
     99c:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     9a0:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     9a4:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     9a8:	f1b9 0f00 	cmp.w	r9, #0
     9ac:	bf14      	ite	ne
     9ae:	f04f 0a01 	movne.w	sl, #1
     9b2:	f04f 0a00 	moveq.w	sl, #0
     9b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
     9b8:	9014      	str	r0, [sp, #80]	; 0x50
     9ba:	f1ba 0f00 	cmp.w	sl, #0
     9be:	d009      	beq.n	9d4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1d4>
     9c0:	48ea      	ldr	r0, [pc, #936]	; (d6c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x56c>)
     9c2:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     9c6:	b928      	cbnz	r0, 9d4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1d4>
     9c8:	f002 fea6 	bl	3718 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     9cc:	2800      	cmp	r0, #0
     9ce:	bf08      	it	eq
     9d0:	2701      	moveq	r7, #1
     9d2:	d000      	beq.n	9d6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1d6>
     9d4:	2700      	movs	r7, #0
     9d6:	48e6      	ldr	r0, [pc, #920]	; (d70 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x570>)
     9d8:	2200      	movs	r2, #0
     9da:	9215      	str	r2, [sp, #84]	; 0x54
     9dc:	7800      	ldrb	r0, [r0, #0]
     9de:	4616      	mov	r6, r2
     9e0:	2801      	cmp	r0, #1
     9e2:	bf18      	it	ne
     9e4:	2803      	cmpne	r0, #3
     9e6:	d140      	bne.n	a6a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x26a>
     9e8:	48e1      	ldr	r0, [pc, #900]	; (d70 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x570>)
     9ea:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     9ee:	eba8 0009 	sub.w	r0, r8, r9
     9f2:	9015      	str	r0, [sp, #84]	; 0x54
     9f4:	45c8      	cmp	r8, r9
     9f6:	d938      	bls.n	a6a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x26a>
     9f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     9fa:	ea6f 0108 	mvn.w	r1, r8
     9fe:	f8df e374 	ldr.w	lr, [pc, #884]	; d74 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x574>
     a02:	1858      	adds	r0, r3, r1
     a04:	f10d 0c0c 	add.w	ip, sp, #12
     a08:	aa17      	add	r2, sp, #92	; 0x5c
     a0a:	4573      	cmp	r3, lr
     a0c:	d904      	bls.n	a18 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x218>
     a0e:	f240 6109 	movw	r1, #1545	; 0x609
     a12:	2070      	movs	r0, #112	; 0x70
     a14:	f002 fee4 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a18:	4bd7      	ldr	r3, [pc, #860]	; (d78 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x578>)
     a1a:	4299      	cmp	r1, r3
     a1c:	dd04      	ble.n	a28 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x228>
     a1e:	f240 610a 	movw	r1, #1546	; 0x60a
     a22:	2070      	movs	r0, #112	; 0x70
     a24:	f002 fedc 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a28:	4bd4      	ldr	r3, [pc, #848]	; (d7c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x57c>)
     a2a:	4299      	cmp	r1, r3
     a2c:	da04      	bge.n	a38 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x238>
     a2e:	f240 610b 	movw	r1, #1547	; 0x60b
     a32:	2070      	movs	r0, #112	; 0x70
     a34:	f002 fed4 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a38:	49d1      	ldr	r1, [pc, #836]	; (d80 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x580>)
     a3a:	4281      	cmp	r1, r0
     a3c:	bfdc      	itt	le
     a3e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     a42:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     a46:	dd05      	ble.n	a54 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x254>
     a48:	2800      	cmp	r0, #0
     a4a:	bfbc      	itt	lt
     a4c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     a50:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     a54:	4661      	mov	r1, ip
     a56:	f001 feb5 	bl	27c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     a5a:	9803      	ldr	r0, [sp, #12]
     a5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
     a5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a62:	9003      	str	r0, [sp, #12]
     a64:	1a08      	subs	r0, r1, r0
     a66:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     a6a:	2f00      	cmp	r7, #0
     a6c:	bf18      	it	ne
     a6e:	2632      	movne	r6, #50	; 0x32
     a70:	d104      	bne.n	a7c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x27c>
     a72:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     a76:	2800      	cmp	r0, #0
     a78:	bf18      	it	ne
     a7a:	2602      	movne	r6, #2
     a7c:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     a80:	d008      	beq.n	a94 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x294>
     a82:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a84:	1b00      	subs	r0, r0, r4
     a86:	0200      	lsls	r0, r0, #8
     a88:	17c1      	asrs	r1, r0, #31
     a8a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a8e:	1200      	asrs	r0, r0, #8
     a90:	2801      	cmp	r0, #1
     a92:	da02      	bge.n	a9a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x29a>
     a94:	2104      	movs	r1, #4
     a96:	9818      	ldr	r0, [sp, #96]	; 0x60
     a98:	e00b      	b.n	ab2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2b2>
     a9a:	b147      	cbz	r7, aae <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2ae>
     a9c:	48b3      	ldr	r0, [pc, #716]	; (d6c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x56c>)
     a9e:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     aa2:	b120      	cbz	r0, aae <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2ae>
     aa4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     aa8:	1c06      	adds	r6, r0, #0
     aaa:	bf18      	it	ne
     aac:	2602      	movne	r6, #2
     aae:	4620      	mov	r0, r4
     ab0:	2101      	movs	r1, #1
     ab2:	f1b9 0f00 	cmp.w	r9, #0
     ab6:	d002      	beq.n	abe <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2be>
     ab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
     aba:	2b1e      	cmp	r3, #30
     abc:	da02      	bge.n	ac4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2c4>
     abe:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     ac2:	b113      	cbz	r3, aca <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2ca>
     ac4:	f04f 0b01 	mov.w	fp, #1
     ac8:	1e49      	subs	r1, r1, #1
     aca:	198b      	adds	r3, r1, r6
     acc:	49a8      	ldr	r1, [pc, #672]	; (d70 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x570>)
     ace:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     ad2:	7809      	ldrb	r1, [r1, #0]
     ad4:	9115      	str	r1, [sp, #84]	; 0x54
     ad6:	990f      	ldr	r1, [sp, #60]	; 0x3c
     ad8:	1a89      	subs	r1, r1, r2
     ada:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
     ade:	ebac 0100 	sub.w	r1, ip, r0
     ae2:	0209      	lsls	r1, r1, #8
     ae4:	17ce      	asrs	r6, r1, #31
     ae6:	eb01 6116 	add.w	r1, r1, r6, lsr #24
     aea:	1209      	asrs	r1, r1, #8
     aec:	4299      	cmp	r1, r3
     aee:	db18      	blt.n	b22 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x322>
     af0:	2a00      	cmp	r2, #0
     af2:	bf18      	it	ne
     af4:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     af8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     afa:	9705      	str	r7, [sp, #20]
     afc:	2700      	movs	r7, #0
     afe:	f001 ffb7 	bl	2a70 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     b02:	1a30      	subs	r0, r6, r0
     b04:	0200      	lsls	r0, r0, #8
     b06:	17c1      	asrs	r1, r0, #31
     b08:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b0c:	1200      	asrs	r0, r0, #8
     b0e:	283e      	cmp	r0, #62	; 0x3e
     b10:	da3f      	bge.n	b92 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x392>
     b12:	2d01      	cmp	r5, #1
     b14:	d020      	beq.n	b58 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x358>
     b16:	1e70      	subs	r0, r6, #1
     b18:	9905      	ldr	r1, [sp, #20]
     b1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b1e:	b319      	cbz	r1, b68 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x368>
     b20:	e02d      	b.n	b7e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x37e>
     b22:	b182      	cbz	r2, b46 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x346>
     b24:	f1be 0f00 	cmp.w	lr, #0
     b28:	bf04      	itt	eq
     b2a:	9915      	ldreq	r1, [sp, #84]	; 0x54
     b2c:	2903      	cmpeq	r1, #3
     b2e:	d00a      	beq.n	b46 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x346>
     b30:	b927      	cbnz	r7, b3c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x33c>
     b32:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     b36:	2900      	cmp	r1, #0
     b38:	bf18      	it	ne
     b3a:	1e9b      	subne	r3, r3, #2
     b3c:	2200      	movs	r2, #0
     b3e:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     b42:	4690      	mov	r8, r2
     b44:	e7c7      	b.n	ad6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2d6>
     b46:	bb07      	cbnz	r7, b8a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38a>
     b48:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     b4c:	b1e9      	cbz	r1, b8a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38a>
     b4e:	2100      	movs	r1, #0
     b50:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
     b54:	1e9b      	subs	r3, r3, #2
     b56:	e7be      	b.n	ad6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2d6>
     b58:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b5c:	d120      	bne.n	ba0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3a0>
     b5e:	f640 110d 	movw	r1, #2317	; 0x90d
     b62:	2070      	movs	r0, #112	; 0x70
     b64:	f002 fe3c 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b68:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b6c:	d007      	beq.n	b7e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x37e>
     b6e:	1a21      	subs	r1, r4, r0
     b70:	0209      	lsls	r1, r1, #8
     b72:	17ca      	asrs	r2, r1, #31
     b74:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     b78:	1209      	asrs	r1, r1, #8
     b7a:	2904      	cmp	r1, #4
     b7c:	dd03      	ble.n	b86 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x386>
     b7e:	4604      	mov	r4, r0
     b80:	f001 ff7c 	bl	2a7c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b84:	e00c      	b.n	ba0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3a0>
     b86:	2900      	cmp	r1, #0
     b88:	dd0a      	ble.n	ba0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3a0>
     b8a:	b01b      	add	sp, #108	; 0x6c
     b8c:	2000      	movs	r0, #0
     b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b92:	1e70      	subs	r0, r6, #1
     b94:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     b98:	4620      	mov	r0, r4
     b9a:	f001 ff6f 	bl	2a7c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b9e:	4657      	mov	r7, sl
     ba0:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     ba4:	d028      	beq.n	bf8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3f8>
     ba6:	980f      	ldr	r0, [sp, #60]	; 0x3c
     ba8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
     bac:	1b00      	subs	r0, r0, r4
     bae:	f08b 0301 	eor.w	r3, fp, #1
     bb2:	4a74      	ldr	r2, [pc, #464]	; (d84 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x584>)
     bb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     bb8:	ebac 0c04 	sub.w	ip, ip, r4
     bbc:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     bc0:	4283      	cmp	r3, r0
     bc2:	bf98      	it	ls
     bc4:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     bc8:	d2df      	bcs.n	b8a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38a>
     bca:	4562      	cmp	r2, ip
     bcc:	d3dd      	bcc.n	b8a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38a>
     bce:	4620      	mov	r0, r4
     bd0:	f00b fb7c 	bl	c2cc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     bd4:	4967      	ldr	r1, [pc, #412]	; (d74 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x574>)
     bd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     bd8:	1c4b      	adds	r3, r1, #1
     bda:	1a16      	subs	r6, r2, r0
     bdc:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     be0:	bf24      	itt	cs
     be2:	eba0 0c02 	subcs.w	ip, r0, r2
     be6:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     bea:	d310      	bcc.n	c0e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x40e>
     bec:	42b1      	cmp	r1, r6
     bee:	d208      	bcs.n	c02 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x402>
     bf0:	1a08      	subs	r0, r1, r0
     bf2:	4410      	add	r0, r2
     bf4:	1c46      	adds	r6, r0, #1
     bf6:	e00a      	b.n	c0e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x40e>
     bf8:	f640 212c 	movw	r1, #2604	; 0xa2c
     bfc:	2070      	movs	r0, #112	; 0x70
     bfe:	f002 fdef 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c02:	4561      	cmp	r1, ip
     c04:	d22c      	bcs.n	c60 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x460>
     c06:	1a89      	subs	r1, r1, r2
     c08:	4408      	add	r0, r1
     c0a:	1c40      	adds	r0, r0, #1
     c0c:	4246      	negs	r6, r0
     c0e:	4857      	ldr	r0, [pc, #348]	; (d6c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x56c>)
     c10:	7f80      	ldrb	r0, [r0, #30]
     c12:	b350      	cbz	r0, c6a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x46a>
     c14:	4628      	mov	r0, r5
     c16:	4645      	mov	r5, r8
     c18:	f04f 0b00 	mov.w	fp, #0
     c1c:	46d8      	mov	r8, fp
     c1e:	2801      	cmp	r0, #1
     c20:	d005      	beq.n	c2e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x42e>
     c22:	2002      	movs	r0, #2
     c24:	f002 f972 	bl	2f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c28:	2001      	movs	r0, #1
     c2a:	f002 f96f 	bl	2f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c2e:	45a9      	cmp	r9, r5
     c30:	d22c      	bcs.n	c8c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x48c>
     c32:	eba6 0105 	sub.w	r1, r6, r5
     c36:	f04f 0301 	mov.w	r3, #1
     c3a:	f04f 0203 	mov.w	r2, #3
     c3e:	f04f 0002 	mov.w	r0, #2
     c42:	f002 f89b 	bl	2d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c46:	2800      	cmp	r0, #0
     c48:	bf08      	it	eq
     c4a:	f04f 0801 	moveq.w	r8, #1
     c4e:	f1b9 0f00 	cmp.w	r9, #0
     c52:	d035      	beq.n	cc0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c0>
     c54:	2301      	movs	r3, #1
     c56:	eba6 0109 	sub.w	r1, r6, r9
     c5a:	2203      	movs	r2, #3
     c5c:	4618      	mov	r0, r3
     c5e:	e023      	b.n	ca8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4a8>
     c60:	f640 310c 	movw	r1, #2828	; 0xb0c
     c64:	2070      	movs	r0, #112	; 0x70
     c66:	f002 fdbb 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c6a:	45c1      	cmp	r9, r8
     c6c:	bf34      	ite	cc
     c6e:	4640      	movcc	r0, r8
     c70:	4648      	movcs	r0, r9
     c72:	f1bb 0f00 	cmp.w	fp, #0
     c76:	bf14      	ite	ne
     c78:	2100      	movne	r1, #0
     c7a:	211e      	moveq	r1, #30
     c7c:	4408      	add	r0, r1
     c7e:	42b0      	cmp	r0, r6
     c80:	dbc8      	blt.n	c14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x414>
     c82:	f640 213f 	movw	r1, #2623	; 0xa3f
     c86:	2070      	movs	r0, #112	; 0x70
     c88:	f002 fdaa 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c8c:	d910      	bls.n	cb0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4b0>
     c8e:	2301      	movs	r3, #1
     c90:	eba6 0109 	sub.w	r1, r6, r9
     c94:	2203      	movs	r2, #3
     c96:	4618      	mov	r0, r3
     c98:	f002 f870 	bl	2d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c9c:	b328      	cbz	r0, cea <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ea>
     c9e:	b17d      	cbz	r5, cc0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c0>
     ca0:	1b71      	subs	r1, r6, r5
     ca2:	2301      	movs	r3, #1
     ca4:	2203      	movs	r2, #3
     ca6:	2002      	movs	r0, #2
     ca8:	f002 f868 	bl	2d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cac:	b1e8      	cbz	r0, cea <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ea>
     cae:	e007      	b.n	cc0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c0>
     cb0:	ea55 0009 	orrs.w	r0, r5, r9
     cb4:	d004      	beq.n	cc0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c0>
     cb6:	f640 1177 	movw	r1, #2423	; 0x977
     cba:	2070      	movs	r0, #112	; 0x70
     cbc:	f002 fd90 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cc0:	2301      	movs	r3, #1
     cc2:	2203      	movs	r2, #3
     cc4:	4631      	mov	r1, r6
     cc6:	2000      	movs	r0, #0
     cc8:	f002 f858 	bl	2d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     ccc:	b168      	cbz	r0, cea <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ea>
     cce:	2501      	movs	r5, #1
     cd0:	f1b8 0f00 	cmp.w	r8, #0
     cd4:	d003      	beq.n	cde <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4de>
     cd6:	9814      	ldr	r0, [sp, #80]	; 0x50
     cd8:	900f      	str	r0, [sp, #60]	; 0x3c
     cda:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     cde:	f8df 80a8 	ldr.w	r8, [pc, #168]	; d88 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x588>
     ce2:	f1ba 0f00 	cmp.w	sl, #0
     ce6:	d10e      	bne.n	d06 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x506>
     ce8:	e009      	b.n	cfe <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4fe>
     cea:	2002      	movs	r0, #2
     cec:	f002 f90e 	bl	2f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     cf0:	2001      	movs	r0, #1
     cf2:	f002 f90b 	bl	2f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     cf6:	b01b      	add	sp, #108	; 0x6c
     cf8:	2000      	movs	r0, #0
     cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cfe:	481b      	ldr	r0, [pc, #108]	; (d6c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x56c>)
     d00:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     d04:	b100      	cbz	r0, d08 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x508>
     d06:	b34f      	cbz	r7, d5c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x55c>
     d08:	f8df a060 	ldr.w	sl, [pc, #96]	; d6c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x56c>
     d0c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     d10:	b118      	cbz	r0, d1a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x51a>
     d12:	f002 fbc9 	bl	34a8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     d16:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     d1a:	b307      	cbz	r7, d5e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x55e>
     d1c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     d20:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     d24:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d28:	f8c8 0000 	str.w	r0, [r8]
     d2c:	2300      	movs	r3, #0
     d2e:	2203      	movs	r2, #3
     d30:	2005      	movs	r0, #5
     d32:	f002 f823 	bl	2d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d36:	b368      	cbz	r0, d94 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x594>
     d38:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     d3c:	2005      	movs	r0, #5
     d3e:	f002 f9ab 	bl	3098 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     d42:	4912      	ldr	r1, [pc, #72]	; (d8c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x58c>)
     d44:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     d48:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     d4c:	4910      	ldr	r1, [pc, #64]	; (d90 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x590>)
     d4e:	12e0      	asrs	r0, r4, #11
     d50:	6008      	str	r0, [r1, #0]
     d52:	4c06      	ldr	r4, [pc, #24]	; (d6c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x56c>)
     d54:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     d58:	b3f0      	cbz	r0, dd8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d8>
     d5a:	e05b      	b.n	e14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x614>
     d5c:	e01b      	b.n	d96 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x596>
     d5e:	e01f      	b.n	da0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5a0>
     d60:	40000508 	.word	0x40000508
     d64:	20000010 	.word	0x20000010
     d68:	20000944 	.word	0x20000944
     d6c:	20000cc4 	.word	0x20000cc4
     d70:	20000012 	.word	0x20000012
     d74:	1e847fff 	.word	0x1e847fff
     d78:	07a12000 	.word	0x07a12000
     d7c:	f85ee000 	.word	0xf85ee000
     d80:	1e848000 	.word	0x1e848000
     d84:	003fffff 	.word	0x003fffff
     d88:	4001f508 	.word	0x4001f508
     d8c:	4001f098 	.word	0x4001f098
     d90:	4001f504 	.word	0x4001f504
     d94:	e035      	b.n	e02 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x602>
     d96:	f8df a0b8 	ldr.w	sl, [pc, #184]	; e50 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x650>
     d9a:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     d9e:	b358      	cbz	r0, df8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5f8>
     da0:	4c2b      	ldr	r4, [pc, #172]	; (e50 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x650>)
     da2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     da6:	b150      	cbz	r0, dbe <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5be>
     da8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     dac:	f8c8 0000 	str.w	r0, [r8]
     db0:	2005      	movs	r0, #5
     db2:	f002 f8ab 	bl	2f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     db6:	f002 fbdf 	bl	3578 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     dba:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     dbe:	ac0c      	add	r4, sp, #48	; 0x30
     dc0:	4824      	ldr	r0, [pc, #144]	; (e54 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x654>)
     dc2:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     dc6:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     dca:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     dce:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     dd2:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     dd6:	e000      	b.n	dda <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5da>
     dd8:	e018      	b.n	e0c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x60c>
     dda:	ac10      	add	r4, sp, #64	; 0x40
     ddc:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     de0:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     de4:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     de8:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     dec:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     df0:	b01b      	add	sp, #108	; 0x6c
     df2:	2001      	movs	r0, #1
     df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     df8:	f002 fb72 	bl	34e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     dfc:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     e00:	e78b      	b.n	d1a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x51a>
     e02:	f240 313e 	movw	r1, #830	; 0x33e
     e06:	2070      	movs	r0, #112	; 0x70
     e08:	f002 fcea 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e0c:	f002 fba6 	bl	355c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     e10:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     e14:	eba6 0009 	sub.w	r0, r6, r9
     e18:	f1a0 0119 	sub.w	r1, r0, #25
     e1c:	2900      	cmp	r1, #0
     e1e:	dc04      	bgt.n	e2a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x62a>
     e20:	f640 2169 	movw	r1, #2665	; 0xa69
     e24:	2070      	movs	r0, #112	; 0x70
     e26:	f002 fcdb 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e2a:	2203      	movs	r2, #3
     e2c:	2301      	movs	r3, #1
     e2e:	4610      	mov	r0, r2
     e30:	f001 ffa4 	bl	2d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     e34:	b138      	cbz	r0, e46 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x646>
     e36:	4808      	ldr	r0, [pc, #32]	; (e58 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x658>)
     e38:	6880      	ldr	r0, [r0, #8]
     e3a:	f8c0 b000 	str.w	fp, [r0]
     e3e:	4807      	ldr	r0, [pc, #28]	; (e5c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x65c>)
     e40:	f8c0 b000 	str.w	fp, [r0]
     e44:	e7bb      	b.n	dbe <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5be>
     e46:	f640 2174 	movw	r1, #2676	; 0xa74
     e4a:	2070      	movs	r0, #112	; 0x70
     e4c:	f002 fcc8 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e50:	20000cc4 	.word	0x20000cc4
     e54:	20000944 	.word	0x20000944
     e58:	20000010 	.word	0x20000010
     e5c:	40000508 	.word	0x40000508
     e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     e64:	4606      	mov	r6, r0
     e66:	b083      	sub	sp, #12
     e68:	7808      	ldrb	r0, [r1, #0]
     e6a:	7390      	strb	r0, [r2, #14]
     e6c:	7acf      	ldrb	r7, [r1, #11]
     e6e:	7357      	strb	r7, [r2, #13]
     e70:	7a88      	ldrb	r0, [r1, #10]
     e72:	7310      	strb	r0, [r2, #12]
     e74:	8908      	ldrh	r0, [r1, #8]
     e76:	4614      	mov	r4, r2
     e78:	8150      	strh	r0, [r2, #10]
     e7a:	460d      	mov	r5, r1
     e7c:	780a      	ldrb	r2, [r1, #0]
     e7e:	495f      	ldr	r1, [pc, #380]	; (ffc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7fc>)
     e80:	4699      	mov	r9, r3
     e82:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     e86:	424b      	negs	r3, r1
     e88:	f1ac 0801 	sub.w	r8, ip, #1
     e8c:	b15a      	cbz	r2, ea6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6a6>
     e8e:	43c0      	mvns	r0, r0
     e90:	f8d5 8004 	ldr.w	r8, [r5, #4]
     e94:	f104 0208 	add.w	r2, r4, #8
     e98:	4288      	cmp	r0, r1
     e9a:	dd3d      	ble.n	f18 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x718>
     e9c:	f240 610a 	movw	r1, #1546	; 0x60a
     ea0:	2070      	movs	r0, #112	; 0x70
     ea2:	f002 fc9d 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ea6:	68ee      	ldr	r6, [r5, #12]
     ea8:	686d      	ldr	r5, [r5, #4]
     eaa:	ea6f 0900 	mvn.w	r9, r0
     eae:	f104 0208 	add.w	r2, r4, #8
     eb2:	eb06 0009 	add.w	r0, r6, r9
     eb6:	4546      	cmp	r6, r8
     eb8:	d904      	bls.n	ec4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6c4>
     eba:	f240 6109 	movw	r1, #1545	; 0x609
     ebe:	2070      	movs	r0, #112	; 0x70
     ec0:	f002 fc8e 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ec4:	4589      	cmp	r9, r1
     ec6:	dce9      	bgt.n	e9c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x69c>
     ec8:	4599      	cmp	r9, r3
     eca:	db28      	blt.n	f1e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x71e>
     ecc:	4584      	cmp	ip, r0
     ece:	bfdc      	itt	le
     ed0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     ed4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     ed8:	dd05      	ble.n	ee6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6e6>
     eda:	2800      	cmp	r0, #0
     edc:	bfbc      	itt	lt
     ede:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     ee2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     ee6:	4621      	mov	r1, r4
     ee8:	f001 fc6c 	bl	27c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     eec:	6820      	ldr	r0, [r4, #0]
     eee:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ef2:	1970      	adds	r0, r6, r5
     ef4:	1c40      	adds	r0, r0, #1
     ef6:	6021      	str	r1, [r4, #0]
     ef8:	2f00      	cmp	r7, #0
     efa:	bf08      	it	eq
     efc:	307a      	addeq	r0, #122	; 0x7a
     efe:	d003      	beq.n	f08 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x708>
     f00:	2f01      	cmp	r7, #1
     f02:	bf08      	it	eq
     f04:	3044      	addeq	r0, #68	; 0x44
     f06:	d12d      	bne.n	f64 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x764>
     f08:	f001 fc40 	bl	278c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f10:	6060      	str	r0, [r4, #4]
     f12:	b003      	add	sp, #12
     f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f18:	4601      	mov	r1, r0
     f1a:	4298      	cmp	r0, r3
     f1c:	da04      	bge.n	f28 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x728>
     f1e:	f240 610b 	movw	r1, #1547	; 0x60b
     f22:	2070      	movs	r0, #112	; 0x70
     f24:	f002 fc5c 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f28:	4584      	cmp	ip, r0
     f2a:	bfdc      	itt	le
     f2c:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     f30:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     f34:	dd05      	ble.n	f42 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x742>
     f36:	2800      	cmp	r0, #0
     f38:	bfbc      	itt	lt
     f3a:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     f3e:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     f42:	4621      	mov	r1, r4
     f44:	f001 fc3e 	bl	27c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     f48:	6820      	ldr	r0, [r4, #0]
     f4a:	2f00      	cmp	r7, #0
     f4c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     f50:	f108 0001 	add.w	r0, r8, #1
     f54:	6021      	str	r1, [r4, #0]
     f56:	bf08      	it	eq
     f58:	307a      	addeq	r0, #122	; 0x7a
     f5a:	d008      	beq.n	f6e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x76e>
     f5c:	2f01      	cmp	r7, #1
     f5e:	bf08      	it	eq
     f60:	3044      	addeq	r0, #68	; 0x44
     f62:	d004      	beq.n	f6e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x76e>
     f64:	f240 61b1 	movw	r1, #1713	; 0x6b1
     f68:	2070      	movs	r0, #112	; 0x70
     f6a:	f002 fc39 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f6e:	f001 fc0d 	bl	278c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f72:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     f76:	6061      	str	r1, [r4, #4]
     f78:	8960      	ldrh	r0, [r4, #10]
     f7a:	aa01      	add	r2, sp, #4
     f7c:	4669      	mov	r1, sp
     f7e:	f001 fc21 	bl	27c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     f82:	481f      	ldr	r0, [pc, #124]	; (1000 <CONFIG_FPROTECT_BLOCK_SIZE>)
     f84:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
     f88:	2920      	cmp	r1, #32
     f8a:	d023      	beq.n	fd4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7d4>
     f8c:	6900      	ldr	r0, [r0, #16]
     f8e:	1d40      	adds	r0, r0, #5
     f90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f94:	e9d4 2100 	ldrd	r2, r1, [r4]
     f98:	1a89      	subs	r1, r1, r2
     f9a:	6020      	str	r0, [r4, #0]
     f9c:	4408      	add	r0, r1
     f9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     fa2:	6060      	str	r0, [r4, #4]
     fa4:	464b      	mov	r3, r9
     fa6:	4632      	mov	r2, r6
     fa8:	4621      	mov	r1, r4
     faa:	68e8      	ldr	r0, [r5, #12]
     fac:	f7ff facc 	bl	548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>
     fb0:	2800      	cmp	r0, #0
     fb2:	bf1c      	itt	ne
     fb4:	b003      	addne	sp, #12
     fb6:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     fba:	e9d4 1000 	ldrd	r1, r0, [r4]
     fbe:	1a40      	subs	r0, r0, r1
     fc0:	4430      	add	r0, r6
     fc2:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
     fc6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     fca:	e9c4 1000 	strd	r1, r0, [r4]
     fce:	b003      	add	sp, #12
     fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     fd4:	8960      	ldrh	r0, [r4, #10]
     fd6:	f106 0709 	add.w	r7, r6, #9
     fda:	b120      	cbz	r0, fe6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7e6>
     fdc:	f002 fb9c 	bl	3718 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     fe0:	2800      	cmp	r0, #0
     fe2:	bf08      	it	eq
     fe4:	3732      	addeq	r7, #50	; 0x32
     fe6:	4807      	ldr	r0, [pc, #28]	; (1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
     fe8:	7841      	ldrb	r1, [r0, #1]
     fea:	9800      	ldr	r0, [sp, #0]
     fec:	4281      	cmp	r1, r0
     fee:	bf84      	itt	hi
     ff0:	1a08      	subhi	r0, r1, r0
     ff2:	4407      	addhi	r7, r0
     ff4:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
     ff8:	e7cc      	b.n	f94 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x794>
     ffa:	0000      	.short	0x0000
     ffc:	07a12000 	.word	0x07a12000
    1000:	20000cc4 	.word	0x20000cc4
    1004:	20000012 	.word	0x20000012
    1008:	b510      	push	{r4, lr}
    100a:	4c15      	ldr	r4, [pc, #84]	; (1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>)
    100c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1010:	2820      	cmp	r0, #32
    1012:	bf18      	it	ne
    1014:	bd10      	popne	{r4, pc}
    1016:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    101a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    101e:	f890 1020 	ldrb.w	r1, [r0, #32]
    1022:	2920      	cmp	r1, #32
    1024:	d017      	beq.n	1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
    1026:	f8df c03c 	ldr.w	ip, [pc, #60]	; 1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
    102a:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    102e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    1032:	785b      	ldrb	r3, [r3, #1]
    1034:	f880 3020 	strb.w	r3, [r0, #32]
    1038:	2301      	movs	r3, #1
    103a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    103e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    1042:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    1046:	2002      	movs	r0, #2
    1048:	f000 f8b0 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    104c:	2000      	movs	r0, #0
    104e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    1052:	77a0      	strb	r0, [r4, #30]
    1054:	bd10      	pop	{r4, pc}
    1056:	f240 318b 	movw	r1, #907	; 0x38b
    105a:	2070      	movs	r0, #112	; 0x70
    105c:	f002 fbc0 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1060:	20000cc4 	.word	0x20000cc4
    1064:	20000c44 	.word	0x20000c44
    1068:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    106c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>
    1070:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1074:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1078:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    107c:	2c20      	cmp	r4, #32
    107e:	bf08      	it	eq
    1080:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1084:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    1088:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>
    108c:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1090:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1094:	2607      	movs	r6, #7
    1096:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    109a:	2801      	cmp	r0, #1
    109c:	d00e      	beq.n	10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
    109e:	2804      	cmp	r0, #4
    10a0:	bf08      	it	eq
    10a2:	2602      	moveq	r6, #2
    10a4:	d00a      	beq.n	10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
    10a6:	2805      	cmp	r0, #5
    10a8:	bf0c      	ite	eq
    10aa:	2603      	moveq	r6, #3
    10ac:	2806      	cmpne	r0, #6
    10ae:	d005      	beq.n	10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
    10b0:	f640 01d9 	movw	r1, #2265	; 0x8d9
    10b4:	f04f 0070 	mov.w	r0, #112	; 0x70
    10b8:	f002 fb92 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10bc:	f1bb 0f00 	cmp.w	fp, #0
    10c0:	bf18      	it	ne
    10c2:	f3af 8000 	nopne.w
    10c6:	f3ef 8010 	mrs	r0, PRIMASK
    10ca:	b672      	cpsid	i
    10cc:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    10d0:	784a      	ldrb	r2, [r1, #1]
    10d2:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    10d6:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    10da:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    10de:	42a2      	cmp	r2, r4
    10e0:	bf04      	itt	eq
    10e2:	2220      	moveq	r2, #32
    10e4:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    10e8:	b1b8      	cbz	r0, 111a <CONFIG_FPROTECT_BLOCK_SIZE+0x11a>
    10ea:	462a      	mov	r2, r5
    10ec:	4621      	mov	r1, r4
    10ee:	2001      	movs	r0, #1
    10f0:	f000 f85c 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    10f4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    10f8:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    10fc:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1100:	6840      	ldr	r0, [r0, #4]
    1102:	4631      	mov	r1, r6
    1104:	4790      	blx	r2
    1106:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    110a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    110e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1112:	2c20      	cmp	r4, #32
    1114:	d1bc      	bne.n	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
    1116:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    111a:	4806      	ldr	r0, [pc, #24]	; (1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>)
    111c:	2800      	cmp	r0, #0
    111e:	bf18      	it	ne
    1120:	f3af 8000 	nopne.w
    1124:	b662      	cpsie	i
    1126:	e7e0      	b.n	10ea <CONFIG_FPROTECT_BLOCK_SIZE+0xea>
    1128:	20000cc4 	.word	0x20000cc4
    112c:	00000000 	.word	0x00000000
    1130:	20000c44 	.word	0x20000c44
    1134:	00000000 	.word	0x00000000
    1138:	b510      	push	{r4, lr}
    113a:	4604      	mov	r4, r0
    113c:	6800      	ldr	r0, [r0, #0]
    113e:	f00b f8c5 	bl	c2cc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1142:	4602      	mov	r2, r0
    1144:	8960      	ldrh	r0, [r4, #10]
    1146:	7a21      	ldrb	r1, [r4, #8]
    1148:	4b14      	ldr	r3, [pc, #80]	; (119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>)
    114a:	4408      	add	r0, r1
    114c:	1c41      	adds	r1, r0, #1
    114e:	1850      	adds	r0, r2, r1
    1150:	429a      	cmp	r2, r3
    1152:	d904      	bls.n	115e <CONFIG_FPROTECT_BLOCK_SIZE+0x15e>
    1154:	f240 6109 	movw	r1, #1545	; 0x609
    1158:	2070      	movs	r0, #112	; 0x70
    115a:	f002 fb41 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    115e:	4a10      	ldr	r2, [pc, #64]	; (11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>)
    1160:	4291      	cmp	r1, r2
    1162:	dd04      	ble.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    1164:	f240 610a 	movw	r1, #1546	; 0x60a
    1168:	2070      	movs	r0, #112	; 0x70
    116a:	f002 fb39 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    116e:	4a0d      	ldr	r2, [pc, #52]	; (11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>)
    1170:	4291      	cmp	r1, r2
    1172:	da04      	bge.n	117e <CONFIG_FPROTECT_BLOCK_SIZE+0x17e>
    1174:	f240 610b 	movw	r1, #1547	; 0x60b
    1178:	2070      	movs	r0, #112	; 0x70
    117a:	f002 fb31 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    117e:	490a      	ldr	r1, [pc, #40]	; (11a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>)
    1180:	4281      	cmp	r1, r0
    1182:	bfde      	ittt	le
    1184:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1188:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    118c:	bd10      	pople	{r4, pc}
    118e:	2800      	cmp	r0, #0
    1190:	bfbc      	itt	lt
    1192:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1196:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    119a:	bd10      	pop	{r4, pc}
    119c:	1e847fff 	.word	0x1e847fff
    11a0:	07a12000 	.word	0x07a12000
    11a4:	f85ee000 	.word	0xf85ee000
    11a8:	1e848000 	.word	0x1e848000
    11ac:	f8df c054 	ldr.w	ip, [pc, #84]	; 1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    11b0:	b510      	push	{r4, lr}
    11b2:	2300      	movs	r3, #0
    11b4:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    11b8:	2807      	cmp	r0, #7
    11ba:	d21e      	bcs.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
    11bc:	e8df f000 	tbb	[pc, r0]
    11c0:	05050505 	.word	0x05050505
    11c4:	00040404 	.word	0x00040404
    11c8:	2301      	movs	r3, #1
    11ca:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    11ce:	2b00      	cmp	r3, #0
    11d0:	bf08      	it	eq
    11d2:	bd10      	popeq	{r4, pc}
    11d4:	480c      	ldr	r0, [pc, #48]	; (1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>)
    11d6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    11da:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    11de:	2820      	cmp	r0, #32
    11e0:	bf0e      	itee	eq
    11e2:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    11e6:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    11ea:	7041      	strbne	r1, [r0, #1]
    11ec:	2020      	movs	r0, #32
    11ee:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    11f2:	7058      	strb	r0, [r3, #1]
    11f4:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    11f8:	bd10      	pop	{r4, pc}
    11fa:	f44f 7115 	mov.w	r1, #596	; 0x254
    11fe:	2070      	movs	r0, #112	; 0x70
    1200:	f002 faee 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1204:	20000c44 	.word	0x20000c44
    1208:	20000cc4 	.word	0x20000cc4
    120c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1210:	b083      	sub	sp, #12
    1212:	485c      	ldr	r0, [pc, #368]	; (1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>)
    1214:	9904      	ldr	r1, [sp, #16]
    1216:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    121a:	9001      	str	r0, [sp, #4]
    121c:	f890 4020 	ldrb.w	r4, [r0, #32]
    1220:	9803      	ldr	r0, [sp, #12]
    1222:	4625      	mov	r5, r4
    1224:	2801      	cmp	r0, #1
    1226:	bf18      	it	ne
    1228:	2802      	cmpne	r0, #2
    122a:	d005      	beq.n	1238 <CONFIG_FPROTECT_BLOCK_SIZE+0x238>
    122c:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    1230:	f04f 0070 	mov.w	r0, #112	; 0x70
    1234:	f002 fad4 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1238:	2700      	movs	r7, #0
    123a:	2d20      	cmp	r5, #32
    123c:	d04a      	beq.n	12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>
    123e:	4851      	ldr	r0, [pc, #324]	; (1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>)
    1240:	9100      	str	r1, [sp, #0]
    1242:	2600      	movs	r6, #0
    1244:	7f80      	ldrb	r0, [r0, #30]
    1246:	2800      	cmp	r0, #0
    1248:	bf08      	it	eq
    124a:	2602      	moveq	r6, #2
    124c:	f001 fc10 	bl	2a70 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1250:	f8df a138 	ldr.w	sl, [pc, #312]	; 138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>
    1254:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1258:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    125c:	f8df 9128 	ldr.w	r9, [pc, #296]	; 1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>
    1260:	688a      	ldr	r2, [r1, #8]
    1262:	68c9      	ldr	r1, [r1, #12]
    1264:	1a12      	subs	r2, r2, r0
    1266:	1a09      	subs	r1, r1, r0
    1268:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    126c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1270:	4296      	cmp	r6, r2
    1272:	bf98      	it	ls
    1274:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    1278:	d201      	bcs.n	127e <CONFIG_FPROTECT_BLOCK_SIZE+0x27e>
    127a:	4589      	cmp	r9, r1
    127c:	d228      	bcs.n	12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>
    127e:	4a44      	ldr	r2, [pc, #272]	; (1390 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8>)
    1280:	9900      	ldr	r1, [sp, #0]
    1282:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    1286:	4622      	mov	r2, r4
    1288:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    128c:	784c      	ldrb	r4, [r1, #1]
    128e:	2c20      	cmp	r4, #32
    1290:	d016      	beq.n	12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>
    1292:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1296:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    129a:	f8dc 8008 	ldr.w	r8, [ip, #8]
    129e:	f8dc c00c 	ldr.w	ip, [ip, #12]
    12a2:	eba8 0800 	sub.w	r8, r8, r0
    12a6:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    12aa:	ebac 0100 	sub.w	r1, ip, r0
    12ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    12b2:	4546      	cmp	r6, r8
    12b4:	bf98      	it	ls
    12b6:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    12ba:	d2e4      	bcs.n	1286 <CONFIG_FPROTECT_BLOCK_SIZE+0x286>
    12bc:	4589      	cmp	r9, r1
    12be:	d3e2      	bcc.n	1286 <CONFIG_FPROTECT_BLOCK_SIZE+0x286>
    12c0:	2a20      	cmp	r2, #32
    12c2:	d005      	beq.n	12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>
    12c4:	2120      	movs	r1, #32
    12c6:	2004      	movs	r0, #4
    12c8:	9b00      	ldr	r3, [sp, #0]
    12ca:	f7ff f901 	bl	4d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    12ce:	4604      	mov	r4, r0
    12d0:	42ac      	cmp	r4, r5
    12d2:	d115      	bne.n	1300 <CONFIG_FPROTECT_BLOCK_SIZE+0x300>
    12d4:	482f      	ldr	r0, [pc, #188]	; (1394 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc>)
    12d6:	2800      	cmp	r0, #0
    12d8:	bf18      	it	ne
    12da:	f3af 8000 	nopne.w
    12de:	f001 fbc7 	bl	2a70 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    12e2:	4c28      	ldr	r4, [pc, #160]	; (1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>)
    12e4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    12e8:	2920      	cmp	r1, #32
    12ea:	d00d      	beq.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
    12ec:	68e1      	ldr	r1, [r4, #12]
    12ee:	1c82      	adds	r2, r0, #2
    12f0:	1a51      	subs	r1, r2, r1
    12f2:	0209      	lsls	r1, r1, #8
    12f4:	17ca      	asrs	r2, r1, #31
    12f6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    12fa:	1209      	asrs	r1, r1, #8
    12fc:	2900      	cmp	r1, #0
    12fe:	dd03      	ble.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
    1300:	b005      	add	sp, #20
    1302:	2000      	movs	r0, #0
    1304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1308:	2d20      	cmp	r5, #32
    130a:	d00d      	beq.n	1328 <CONFIG_FPROTECT_BLOCK_SIZE+0x328>
    130c:	462a      	mov	r2, r5
    130e:	9903      	ldr	r1, [sp, #12]
    1310:	f7ff fb16 	bl	940 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x140>
    1314:	b358      	cbz	r0, 136e <CONFIG_FPROTECT_BLOCK_SIZE+0x36e>
    1316:	9801      	ldr	r0, [sp, #4]
    1318:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    131c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1320:	b005      	add	sp, #20
    1322:	2001      	movs	r0, #1
    1324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1328:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    132c:	b118      	cbz	r0, 1336 <CONFIG_FPROTECT_BLOCK_SIZE+0x336>
    132e:	f002 f8bb 	bl	34a8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1332:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    1336:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    133a:	b150      	cbz	r0, 1352 <CONFIG_FPROTECT_BLOCK_SIZE+0x352>
    133c:	4916      	ldr	r1, [pc, #88]	; (1398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10>)
    133e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1342:	6008      	str	r0, [r1, #0]
    1344:	2005      	movs	r0, #5
    1346:	f001 fde1 	bl	2f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    134a:	f002 f915 	bl	3578 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    134e:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    1352:	2004      	movs	r0, #4
    1354:	f001 fdda 	bl	2f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1358:	f001 fe40 	bl	2fdc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    135c:	2020      	movs	r0, #32
    135e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    1362:	480e      	ldr	r0, [pc, #56]	; (139c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14>)
    1364:	6880      	ldr	r0, [r0, #8]
    1366:	6007      	str	r7, [r0, #0]
    1368:	480d      	ldr	r0, [pc, #52]	; (13a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18>)
    136a:	6007      	str	r7, [r0, #0]
    136c:	e7d8      	b.n	1320 <CONFIG_FPROTECT_BLOCK_SIZE+0x320>
    136e:	462a      	mov	r2, r5
    1370:	2120      	movs	r1, #32
    1372:	2004      	movs	r0, #4
    1374:	9b04      	ldr	r3, [sp, #16]
    1376:	f7ff f8ab 	bl	4d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    137a:	b005      	add	sp, #20
    137c:	2000      	movs	r0, #0
    137e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1382:	0000      	.short	0x0000
    1384:	20000cc4 	.word	0x20000cc4
    1388:	003fffff 	.word	0x003fffff
    138c:	20000944 	.word	0x20000944
    1390:	20000c44 	.word	0x20000c44
    1394:	00000000 	.word	0x00000000
    1398:	4001f508 	.word	0x4001f508
    139c:	20000010 	.word	0x20000010
    13a0:	40000508 	.word	0x40000508

000013a4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    13a4:	4906      	ldr	r1, [pc, #24]	; (13c0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    13a6:	b510      	push	{r4, lr}
    13a8:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    13ac:	2a20      	cmp	r2, #32
    13ae:	bf1c      	itt	ne
    13b0:	7788      	strbne	r0, [r1, #30]
    13b2:	bd10      	popne	{r4, pc}
    13b4:	f240 31ea 	movw	r1, #1002	; 0x3ea
    13b8:	2070      	movs	r0, #112	; 0x70
    13ba:	f002 fa11 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13be:	0000      	.short	0x0000
    13c0:	20000cc4 	.word	0x20000cc4

000013c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    13c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13c8:	4e5b      	ldr	r6, [pc, #364]	; (1538 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    13ca:	4681      	mov	r9, r0
    13cc:	b085      	sub	sp, #20
    13ce:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    13d2:	468a      	mov	sl, r1
    13d4:	2820      	cmp	r0, #32
    13d6:	d04d      	beq.n	1474 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    13d8:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    13dc:	f106 040c 	add.w	r4, r6, #12
    13e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    13e4:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    13e8:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    13ec:	2020      	movs	r0, #32
    13ee:	f88d 0000 	strb.w	r0, [sp]
    13f2:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    13f6:	aa03      	add	r2, sp, #12
    13f8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    13fc:	a901      	add	r1, sp, #4
    13fe:	f890 5020 	ldrb.w	r5, [r0, #32]
    1402:	6930      	ldr	r0, [r6, #16]
    1404:	9002      	str	r0, [sp, #8]
    1406:	6830      	ldr	r0, [r6, #0]
    1408:	4448      	add	r0, r9
    140a:	f001 f9db 	bl	27c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    140e:	68f8      	ldr	r0, [r7, #12]
    1410:	9901      	ldr	r1, [sp, #4]
    1412:	4a4a      	ldr	r2, [pc, #296]	; (153c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    1414:	4408      	add	r0, r1
    1416:	f1a9 0164 	sub.w	r1, r9, #100	; 0x64
    141a:	4291      	cmp	r1, r2
    141c:	d82f      	bhi.n	147e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    141e:	68b9      	ldr	r1, [r7, #8]
    1420:	1a41      	subs	r1, r0, r1
    1422:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1426:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    142a:	d228      	bcs.n	147e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    142c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1430:	6060      	str	r0, [r4, #4]
    1432:	4630      	mov	r0, r6
    1434:	f884 a00c 	strb.w	sl, [r4, #12]
    1438:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    143c:	46ea      	mov	sl, sp
    143e:	2d20      	cmp	r5, #32
    1440:	bf1c      	itt	ne
    1442:	493f      	ldrne	r1, [pc, #252]	; (1540 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1444:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1448:	d03c      	beq.n	14c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    144a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    144e:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1452:	6860      	ldr	r0, [r4, #4]
    1454:	68ba      	ldr	r2, [r7, #8]
    1456:	4621      	mov	r1, r4
    1458:	1a10      	subs	r0, r2, r0
    145a:	0200      	lsls	r0, r0, #8
    145c:	17c2      	asrs	r2, r0, #31
    145e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1462:	f107 0608 	add.w	r6, r7, #8
    1466:	1200      	asrs	r0, r0, #8
    1468:	d41b      	bmi.n	14a2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    146a:	8970      	ldrh	r0, [r6, #10]
    146c:	b350      	cbz	r0, 14c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    146e:	8948      	ldrh	r0, [r1, #10]
    1470:	b148      	cbz	r0, 1486 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    1472:	e027      	b.n	14c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1474:	f640 317b 	movw	r1, #2939	; 0xb7b
    1478:	2070      	movs	r0, #112	; 0x70
    147a:	f002 f9b1 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    147e:	b005      	add	sp, #20
    1480:	2001      	movs	r0, #1
    1482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1486:	4620      	mov	r0, r4
    1488:	f7ff fe56 	bl	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
    148c:	f001 f97e 	bl	278c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1490:	6831      	ldr	r1, [r6, #0]
    1492:	1a08      	subs	r0, r1, r0
    1494:	0200      	lsls	r0, r0, #8
    1496:	17c1      	asrs	r1, r0, #31
    1498:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    149c:	1200      	asrs	r0, r0, #8
    149e:	2833      	cmp	r0, #51	; 0x33
    14a0:	da10      	bge.n	14c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14a2:	f88a 5000 	strb.w	r5, [sl]
    14a6:	7d39      	ldrb	r1, [r7, #20]
    14a8:	7b20      	ldrb	r0, [r4, #12]
    14aa:	4281      	cmp	r1, r0
    14ac:	d805      	bhi.n	14ba <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    14ae:	9802      	ldr	r0, [sp, #8]
    14b0:	6060      	str	r0, [r4, #4]
    14b2:	b005      	add	sp, #20
    14b4:	2002      	movs	r0, #2
    14b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14ba:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    14be:	7845      	ldrb	r5, [r0, #1]
    14c0:	2d20      	cmp	r5, #32
    14c2:	d1c2      	bne.n	144a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    14c4:	2005      	movs	r0, #5
    14c6:	f001 fd21 	bl	2f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    14ca:	4c1b      	ldr	r4, [pc, #108]	; (1538 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    14cc:	f04f 30ff 	mov.w	r0, #4294967295
    14d0:	60a0      	str	r0, [r4, #8]
    14d2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    14d6:	f89d 2000 	ldrb.w	r2, [sp]
    14da:	2120      	movs	r1, #32
    14dc:	2a20      	cmp	r2, #32
    14de:	bf13      	iteet	ne
    14e0:	2005      	movne	r0, #5
    14e2:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    14e6:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    14ea:	f7fe fff1 	blne	4d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    14ee:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    14f2:	4913      	ldr	r1, [pc, #76]	; (1540 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    14f4:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    14f8:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    14fc:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1500:	7048      	strb	r0, [r1, #1]
    1502:	6820      	ldr	r0, [r4, #0]
    1504:	4448      	add	r0, r9
    1506:	6020      	str	r0, [r4, #0]
    1508:	2001      	movs	r0, #1
    150a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    150e:	7e60      	ldrb	r0, [r4, #25]
    1510:	2801      	cmp	r0, #1
    1512:	d105      	bne.n	1520 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    1514:	6920      	ldr	r0, [r4, #16]
    1516:	1e40      	subs	r0, r0, #1
    1518:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    151c:	f001 fb48 	bl	2bb0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1520:	f89d 0000 	ldrb.w	r0, [sp]
    1524:	2820      	cmp	r0, #32
    1526:	d003      	beq.n	1530 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    1528:	4806      	ldr	r0, [pc, #24]	; (1544 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    152a:	7840      	ldrb	r0, [r0, #1]
    152c:	f002 fa28 	bl	3980 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1530:	b005      	add	sp, #20
    1532:	2000      	movs	r0, #0
    1534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1538:	20000cc4 	.word	0x20000cc4
    153c:	07a11f9c 	.word	0x07a11f9c
    1540:	20000c44 	.word	0x20000c44
    1544:	20000010 	.word	0x20000010

00001548 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    1548:	b570      	push	{r4, r5, r6, lr}
    154a:	4a23      	ldr	r2, [pc, #140]	; (15d8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    154c:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    1550:	2920      	cmp	r1, #32
    1552:	d039      	beq.n	15c8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    1554:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    1558:	f5a2 7360 	sub.w	r3, r2, #896	; 0x380
    155c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1560:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    1564:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    1568:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
    156c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    1570:	f891 1020 	ldrb.w	r1, [r1, #32]
    1574:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    1578:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    157c:	2920      	cmp	r1, #32
    157e:	d028      	beq.n	15d2 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    1580:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    1584:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    1588:	7d2d      	ldrb	r5, [r5, #20]
    158a:	4285      	cmp	r5, r0
    158c:	bf84      	itt	hi
    158e:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    1592:	7849      	ldrbhi	r1, [r1, #1]
    1594:	d8f2      	bhi.n	157c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x34>
    1596:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    159a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    159e:	f8dc 000c 	ldr.w	r0, [ip, #12]
    15a2:	6889      	ldr	r1, [r1, #8]
    15a4:	6814      	ldr	r4, [r2, #0]
    15a6:	1a08      	subs	r0, r1, r0
    15a8:	0200      	lsls	r0, r0, #8
    15aa:	17c1      	asrs	r1, r0, #31
    15ac:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    15b0:	1200      	asrs	r0, r0, #8
    15b2:	d407      	bmi.n	15c4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    15b4:	f00a fe8a 	bl	c2cc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    15b8:	f104 0164 	add.w	r1, r4, #100	; 0x64
    15bc:	4288      	cmp	r0, r1
    15be:	bf24      	itt	cs
    15c0:	1b00      	subcs	r0, r0, r4
    15c2:	bd70      	popcs	{r4, r5, r6, pc}
    15c4:	2000      	movs	r0, #0
    15c6:	bd70      	pop	{r4, r5, r6, pc}
    15c8:	f640 314d 	movw	r1, #2893	; 0xb4d
    15cc:	2070      	movs	r0, #112	; 0x70
    15ce:	f002 f907 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15d2:	f04f 30ff 	mov.w	r0, #4294967295
    15d6:	bd70      	pop	{r4, r5, r6, pc}
    15d8:	20000cc4 	.word	0x20000cc4

000015dc <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    15dc:	4806      	ldr	r0, [pc, #24]	; (15f8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    15de:	b510      	push	{r4, lr}
    15e0:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    15e4:	2920      	cmp	r1, #32
    15e6:	bf1c      	itt	ne
    15e8:	7e00      	ldrbne	r0, [r0, #24]
    15ea:	bd10      	popne	{r4, pc}
    15ec:	f640 3174 	movw	r1, #2932	; 0xb74
    15f0:	2070      	movs	r0, #112	; 0x70
    15f2:	f002 f8f5 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15f6:	0000      	.short	0x0000
    15f8:	20000cc4 	.word	0x20000cc4

000015fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    15fc:	4602      	mov	r2, r0
    15fe:	4b14      	ldr	r3, [pc, #80]	; (1650 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    1600:	b510      	push	{r4, lr}
    1602:	4408      	add	r0, r1
    1604:	429a      	cmp	r2, r3
    1606:	d904      	bls.n	1612 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    1608:	f240 6109 	movw	r1, #1545	; 0x609
    160c:	2070      	movs	r0, #112	; 0x70
    160e:	f002 f8e7 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1612:	4a10      	ldr	r2, [pc, #64]	; (1654 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    1614:	4291      	cmp	r1, r2
    1616:	dd04      	ble.n	1622 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    1618:	f240 610a 	movw	r1, #1546	; 0x60a
    161c:	2070      	movs	r0, #112	; 0x70
    161e:	f002 f8df 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1622:	4a0d      	ldr	r2, [pc, #52]	; (1658 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1624:	4291      	cmp	r1, r2
    1626:	da04      	bge.n	1632 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    1628:	f240 610b 	movw	r1, #1547	; 0x60b
    162c:	2070      	movs	r0, #112	; 0x70
    162e:	f002 f8d7 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1632:	490a      	ldr	r1, [pc, #40]	; (165c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1634:	4281      	cmp	r1, r0
    1636:	bfde      	ittt	le
    1638:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    163c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1640:	bd10      	pople	{r4, pc}
    1642:	2800      	cmp	r0, #0
    1644:	bfbc      	itt	lt
    1646:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    164a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    164e:	bd10      	pop	{r4, pc}
    1650:	1e847fff 	.word	0x1e847fff
    1654:	07a12000 	.word	0x07a12000
    1658:	f85ee000 	.word	0xf85ee000
    165c:	1e848000 	.word	0x1e848000

00001660 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1660:	4a10      	ldr	r2, [pc, #64]	; (16a4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1662:	1a0b      	subs	r3, r1, r0
    1664:	f102 0c01 	add.w	ip, r2, #1
    1668:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    166c:	bf3c      	itt	cc
    166e:	4618      	movcc	r0, r3
    1670:	4770      	bxcc	lr
    1672:	b510      	push	{r4, lr}
    1674:	1a44      	subs	r4, r0, r1
    1676:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    167a:	bf3c      	itt	cc
    167c:	4618      	movcc	r0, r3
    167e:	bd10      	popcc	{r4, pc}
    1680:	429a      	cmp	r2, r3
    1682:	d203      	bcs.n	168c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1684:	1a10      	subs	r0, r2, r0
    1686:	4408      	add	r0, r1
    1688:	1c40      	adds	r0, r0, #1
    168a:	bd10      	pop	{r4, pc}
    168c:	42a2      	cmp	r2, r4
    168e:	d204      	bcs.n	169a <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1690:	1a51      	subs	r1, r2, r1
    1692:	4408      	add	r0, r1
    1694:	1c40      	adds	r0, r0, #1
    1696:	4240      	negs	r0, r0
    1698:	bd10      	pop	{r4, pc}
    169a:	f640 310c 	movw	r1, #2828	; 0xb0c
    169e:	2070      	movs	r0, #112	; 0x70
    16a0:	f002 f89e 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16a4:	1e847fff 	.word	0x1e847fff

000016a8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    16a8:	4907      	ldr	r1, [pc, #28]	; (16c8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    16aa:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    16ae:	4282      	cmp	r2, r0
    16b0:	bf04      	itt	eq
    16b2:	6848      	ldreq	r0, [r1, #4]
    16b4:	4770      	bxeq	lr
    16b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    16ba:	4904      	ldr	r1, [pc, #16]	; (16cc <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    16bc:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    16c0:	3008      	adds	r0, #8
    16c2:	f7ff bd39 	b.w	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
    16c6:	0000      	.short	0x0000
    16c8:	20000cc4 	.word	0x20000cc4
    16cc:	20000944 	.word	0x20000944

000016d0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    16d0:	490e      	ldr	r1, [pc, #56]	; (170c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    16d2:	b510      	push	{r4, lr}
    16d4:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    16d8:	2820      	cmp	r0, #32
    16da:	d012      	beq.n	1702 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    16dc:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    16e0:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    16e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    16e8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    16ec:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    16f0:	6840      	ldr	r0, [r0, #4]
    16f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    16f6:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    16fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    16fe:	2104      	movs	r1, #4
    1700:	4710      	bx	r2
    1702:	f640 01bc 	movw	r1, #2236	; 0x8bc
    1706:	2070      	movs	r0, #112	; 0x70
    1708:	f002 f86a 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    170c:	20000cc4 	.word	0x20000cc4

00001710 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1712:	4d6d      	ldr	r5, [pc, #436]	; (18c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1714:	496d      	ldr	r1, [pc, #436]	; (18cc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    1716:	2601      	movs	r6, #1
    1718:	f505 7460 	add.w	r4, r5, #896	; 0x380
    171c:	2808      	cmp	r0, #8
    171e:	d273      	bcs.n	1808 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    1720:	e8df f000 	tbb	[pc, r0]
    1724:	af9d6704 	.word	0xaf9d6704
    1728:	b9b444cd 	.word	0xb9b444cd
    172c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1730:	b918      	cbnz	r0, 173a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1732:	f001 fed5 	bl	34e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1736:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    173a:	8ae0      	ldrh	r0, [r4, #22]
    173c:	b110      	cbz	r0, 1744 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    173e:	f001 ffeb 	bl	3718 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1742:	b188      	cbz	r0, 1768 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1744:	f7ff fc60 	bl	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
    1748:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    174c:	68a1      	ldr	r1, [r4, #8]
    174e:	f1b1 3fff 	cmp.w	r1, #4294967295
    1752:	d005      	beq.n	1760 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1754:	2301      	movs	r3, #1
    1756:	2203      	movs	r2, #3
    1758:	2005      	movs	r0, #5
    175a:	f001 fb0f 	bl	2d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    175e:	b140      	cbz	r0, 1772 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1760:	7e60      	ldrb	r0, [r4, #25]
    1762:	2801      	cmp	r0, #1
    1764:	d110      	bne.n	1788 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    1766:	e009      	b.n	177c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1768:	f44f 6107 	mov.w	r1, #2160	; 0x870
    176c:	2070      	movs	r0, #112	; 0x70
    176e:	f002 f837 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1772:	f640 0175 	movw	r1, #2165	; 0x875
    1776:	2070      	movs	r0, #112	; 0x70
    1778:	f002 f832 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    177c:	6920      	ldr	r0, [r4, #16]
    177e:	1e40      	subs	r0, r0, #1
    1780:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1784:	f001 fa14 	bl	2bb0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1788:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    178c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1790:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1794:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1798:	6840      	ldr	r0, [r0, #4]
    179a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    179e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    17a2:	b001      	add	sp, #4
    17a4:	2101      	movs	r1, #1
    17a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    17aa:	4710      	bx	r2
    17ac:	f7ff fc2c 	bl	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
    17b0:	f04f 30ff 	mov.w	r0, #4294967295
    17b4:	60a0      	str	r0, [r4, #8]
    17b6:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    17ba:	f88d 0000 	strb.w	r0, [sp]
    17be:	f89d 0000 	ldrb.w	r0, [sp]
    17c2:	b188      	cbz	r0, 17e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    17c4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    17c8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    17cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    17d0:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    17d4:	6840      	ldr	r0, [r0, #4]
    17d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    17da:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    17de:	b001      	add	sp, #4
    17e0:	2106      	movs	r1, #6
    17e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    17e6:	4710      	bx	r2
    17e8:	f640 0186 	movw	r1, #2182	; 0x886
    17ec:	2070      	movs	r0, #112	; 0x70
    17ee:	f001 fff7 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17f2:	f7ff fc09 	bl	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
    17f6:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    17fa:	f001 ff8d 	bl	3718 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    17fe:	b120      	cbz	r0, 180a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    1800:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1804:	b130      	cbz	r0, 1814 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    1806:	e009      	b.n	181c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    1808:	e059      	b.n	18be <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    180a:	f640 0196 	movw	r1, #2198	; 0x896
    180e:	2070      	movs	r0, #112	; 0x70
    1810:	f001 ffe6 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1814:	f001 fe64 	bl	34e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1818:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    181c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1820:	b158      	cbz	r0, 183a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    1822:	492b      	ldr	r1, [pc, #172]	; (18d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    1824:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1828:	6008      	str	r0, [r1, #0]
    182a:	2005      	movs	r0, #5
    182c:	f001 fb6e 	bl	2f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1830:	f001 fea2 	bl	3578 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1834:	2000      	movs	r0, #0
    1836:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    183a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    183e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1842:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1846:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    184a:	6840      	ldr	r0, [r0, #4]
    184c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1850:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1854:	b001      	add	sp, #4
    1856:	2100      	movs	r1, #0
    1858:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    185c:	4710      	bx	r2
    185e:	f001 fc07 	bl	3070 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1862:	8ae0      	ldrh	r0, [r4, #22]
    1864:	b110      	cbz	r0, 186c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    1866:	f001 ff57 	bl	3718 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    186a:	b128      	cbz	r0, 1878 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    186c:	4819      	ldr	r0, [pc, #100]	; (18d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    186e:	7800      	ldrb	r0, [r0, #0]
    1870:	2803      	cmp	r0, #3
    1872:	bf08      	it	eq
    1874:	7766      	strbeq	r6, [r4, #29]
    1876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1878:	f640 01a1 	movw	r1, #2209	; 0x8a1
    187c:	2070      	movs	r0, #112	; 0x70
    187e:	f001 ffaf 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1882:	4815      	ldr	r0, [pc, #84]	; (18d8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    1884:	6006      	str	r6, [r0, #0]
    1886:	6888      	ldr	r0, [r1, #8]
    1888:	6006      	str	r6, [r0, #0]
    188a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    188c:	7808      	ldrb	r0, [r1, #0]
    188e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1892:	f002 b875 	b.w	3980 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1896:	f7ff fbb7 	bl	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
    189a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    189e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    18a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    18a6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    18aa:	6840      	ldr	r0, [r0, #4]
    18ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    18b0:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    18b4:	b001      	add	sp, #4
    18b6:	2105      	movs	r1, #5
    18b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    18bc:	4710      	bx	r2
    18be:	f640 01b4 	movw	r1, #2228	; 0x8b4
    18c2:	2070      	movs	r0, #112	; 0x70
    18c4:	f001 ff8c 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18c8:	20000944 	.word	0x20000944
    18cc:	20000010 	.word	0x20000010
    18d0:	4001f508 	.word	0x4001f508
    18d4:	20000012 	.word	0x20000012
    18d8:	40000508 	.word	0x40000508

000018dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    18dc:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18e0:	4682      	mov	sl, r0
    18e2:	48dc      	ldr	r0, [pc, #880]	; (1c54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    18e4:	b08b      	sub	sp, #44	; 0x2c
    18e6:	6800      	ldr	r0, [r0, #0]
    18e8:	4ddb      	ldr	r5, [pc, #876]	; (1c58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    18ea:	05c0      	lsls	r0, r0, #23
    18ec:	0dc0      	lsrs	r0, r0, #23
    18ee:	d00e      	beq.n	190e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    18f0:	3810      	subs	r0, #16
    18f2:	b240      	sxtb	r0, r0
    18f4:	2800      	cmp	r0, #0
    18f6:	bfb8      	it	lt
    18f8:	f000 000f 	andlt.w	r0, r0, #15
    18fc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1900:	bfac      	ite	ge
    1902:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1906:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    190a:	0940      	lsrs	r0, r0, #5
    190c:	d00d      	beq.n	192a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    190e:	980c      	ldr	r0, [sp, #48]	; 0x30
    1910:	f04f 0b00 	mov.w	fp, #0
    1914:	7800      	ldrb	r0, [r0, #0]
    1916:	2800      	cmp	r0, #0
    1918:	bf18      	it	ne
    191a:	2801      	cmpne	r0, #1
    191c:	d018      	beq.n	1950 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    191e:	f240 714f 	movw	r1, #1871	; 0x74f
    1922:	f04f 0070 	mov.w	r0, #112	; 0x70
    1926:	f001 ff5b 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    192a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    192e:	f04f 0b01 	mov.w	fp, #1
    1932:	2820      	cmp	r0, #32
    1934:	d007      	beq.n	1946 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1936:	980c      	ldr	r0, [sp, #48]	; 0x30
    1938:	7800      	ldrb	r0, [r0, #0]
    193a:	b148      	cbz	r0, 1950 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    193c:	f240 714b 	movw	r1, #1867	; 0x74b
    1940:	2070      	movs	r0, #112	; 0x70
    1942:	f001 ff4d 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1946:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    194a:	2070      	movs	r0, #112	; 0x70
    194c:	f001 ff48 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1950:	4cc2      	ldr	r4, [pc, #776]	; (1c5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    1952:	b124      	cbz	r4, 195e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1954:	2100      	movs	r1, #0
    1956:	f240 7052 	movw	r0, #1874	; 0x752
    195a:	f3af 8000 	nop.w
    195e:	49c0      	ldr	r1, [pc, #768]	; (1c60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    1960:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    1964:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1968:	f04f 0801 	mov.w	r8, #1
    196c:	9000      	str	r0, [sp, #0]
    196e:	b124      	cbz	r4, 197a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    1970:	2100      	movs	r1, #0
    1972:	f240 705a 	movw	r0, #1882	; 0x75a
    1976:	f3af 8000 	nop.w
    197a:	f1b8 0f00 	cmp.w	r8, #0
    197e:	d009      	beq.n	1994 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    1980:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    1984:	f04f 0900 	mov.w	r9, #0
    1988:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    198c:	f1bb 0f00 	cmp.w	fp, #0
    1990:	d007      	beq.n	19a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    1992:	e032      	b.n	19fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    1994:	48b3      	ldr	r0, [pc, #716]	; (1c64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1996:	2800      	cmp	r0, #0
    1998:	bf18      	it	ne
    199a:	f3af 8000 	nopne.w
    199e:	b662      	cpsie	i
    19a0:	e7ee      	b.n	1980 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    19a2:	4637      	mov	r7, r6
    19a4:	2001      	movs	r0, #1
    19a6:	ea20 0607 	bic.w	r6, r0, r7
    19aa:	48af      	ldr	r0, [pc, #700]	; (1c68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    19ac:	2240      	movs	r2, #64	; 0x40
    19ae:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    19b2:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    19b6:	f00a fdf7 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    19ba:	b124      	cbz	r4, 19c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    19bc:	2100      	movs	r1, #0
    19be:	f240 50cd 	movw	r0, #1485	; 0x5cd
    19c2:	f3af 8000 	nop.w
    19c6:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    19ca:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    19ce:	6a09      	ldr	r1, [r1, #32]
    19d0:	6201      	str	r1, [r0, #32]
    19d2:	b124      	cbz	r4, 19de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    19d4:	2100      	movs	r1, #0
    19d6:	f240 50d1 	movw	r0, #1489	; 0x5d1
    19da:	f3af 8000 	nop.w
    19de:	b124      	cbz	r4, 19ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    19e0:	2100      	movs	r1, #0
    19e2:	f240 7064 	movw	r0, #1892	; 0x764
    19e6:	f3af 8000 	nop.w
    19ea:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    19ee:	f88d 0004 	strb.w	r0, [sp, #4]
    19f2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    19f6:	2800      	cmp	r0, #0
    19f8:	d1b9      	bne.n	196e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    19fa:	b124      	cbz	r4, 1a06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    19fc:	2100      	movs	r1, #0
    19fe:	f240 706e 	movw	r0, #1902	; 0x76e
    1a02:	f3af 8000 	nop.w
    1a06:	f001 f833 	bl	2a70 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1a0a:	4680      	mov	r8, r0
    1a0c:	4633      	mov	r3, r6
    1a0e:	aa06      	add	r2, sp, #24
    1a10:	990c      	ldr	r1, [sp, #48]	; 0x30
    1a12:	f7ff fa25 	bl	e60 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x660>
    1a16:	b124      	cbz	r4, 1a22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    1a18:	2100      	movs	r1, #0
    1a1a:	f240 7075 	movw	r0, #1909	; 0x775
    1a1e:	f3af 8000 	nop.w
    1a22:	4991      	ldr	r1, [pc, #580]	; (1c68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1a24:	a806      	add	r0, sp, #24
    1a26:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    1a2a:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    1a2e:	2901      	cmp	r1, #1
    1a30:	bf18      	it	ne
    1a32:	2902      	cmpne	r1, #2
    1a34:	d13c      	bne.n	1ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1a36:	9906      	ldr	r1, [sp, #24]
    1a38:	9b07      	ldr	r3, [sp, #28]
    1a3a:	eba1 0108 	sub.w	r1, r1, r8
    1a3e:	4a8b      	ldr	r2, [pc, #556]	; (1c6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    1a40:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1a44:	eba3 0308 	sub.w	r3, r3, r8
    1a48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1a4c:	2902      	cmp	r1, #2
    1a4e:	d371      	bcc.n	1b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a50:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1a54:	d26e      	bcs.n	1b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a56:	429a      	cmp	r2, r3
    1a58:	d36c      	bcc.n	1b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a5a:	f04f 0901 	mov.w	r9, #1
    1a5e:	ab01      	add	r3, sp, #4
    1a60:	aa05      	add	r2, sp, #20
    1a62:	4631      	mov	r1, r6
    1a64:	f7fe feec 	bl	840 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x40>
    1a68:	2800      	cmp	r0, #0
    1a6a:	d06b      	beq.n	1b44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    1a6c:	f89d 1014 	ldrb.w	r1, [sp, #20]
    1a70:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1a74:	4633      	mov	r3, r6
    1a76:	428a      	cmp	r2, r1
    1a78:	d068      	beq.n	1b4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    1a7a:	2005      	movs	r0, #5
    1a7c:	f7fe fd28 	bl	4d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1a80:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    1a84:	7048      	strb	r0, [r1, #1]
    1a86:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1a8a:	2820      	cmp	r0, #32
    1a8c:	bf03      	ittte	eq
    1a8e:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1a92:	f880 a020 	strbeq.w	sl, [r0, #32]
    1a96:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    1a9a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1a9e:	bf18      	it	ne
    1aa0:	f880 a001 	strbne.w	sl, [r0, #1]
    1aa4:	4632      	mov	r2, r6
    1aa6:	4651      	mov	r1, sl
    1aa8:	f05f 0003 	movs.w	r0, #3
    1aac:	f7ff fb7e 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    1ab0:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1ab4:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1ab8:	f88d 0004 	strb.w	r0, [sp, #4]
    1abc:	f89d 7004 	ldrb.w	r7, [sp, #4]
    1ac0:	b124      	cbz	r4, 1acc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    1ac2:	2100      	movs	r1, #0
    1ac4:	f240 707c 	movw	r0, #1916	; 0x77c
    1ac8:	f3af 8000 	nop.w
    1acc:	4868      	ldr	r0, [pc, #416]	; (1c70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    1ace:	2800      	cmp	r0, #0
    1ad0:	bf18      	it	ne
    1ad2:	f3af 8000 	nopne.w
    1ad6:	f3ef 8810 	mrs	r8, PRIMASK
    1ada:	b672      	cpsid	i
    1adc:	b124      	cbz	r4, 1ae8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    1ade:	2100      	movs	r1, #0
    1ae0:	f240 7082 	movw	r0, #1922	; 0x782
    1ae4:	f3af 8000 	nop.w
    1ae8:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1aec:	f88d 0004 	strb.w	r0, [sp, #4]
    1af0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1af4:	2800      	cmp	r0, #0
    1af6:	f47f af3a 	bne.w	196e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1afa:	b124      	cbz	r4, 1b06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    1afc:	2100      	movs	r1, #0
    1afe:	f240 708a 	movw	r0, #1930	; 0x78a
    1b02:	f3af 8000 	nop.w
    1b06:	f10d 0e18 	add.w	lr, sp, #24
    1b0a:	9800      	ldr	r0, [sp, #0]
    1b0c:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    1b10:	f100 0008 	add.w	r0, r0, #8
    1b14:	f1b9 0f00 	cmp.w	r9, #0
    1b18:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1b1c:	d044      	beq.n	1ba8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1b1e:	b124      	cbz	r4, 1b2a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    1b20:	2100      	movs	r1, #0
    1b22:	f240 7097 	movw	r0, #1943	; 0x797
    1b26:	f3af 8000 	nop.w
    1b2a:	f1bb 0f00 	cmp.w	fp, #0
    1b2e:	d12c      	bne.n	1b8a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b30:	e016      	b.n	1b60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    1b32:	e7ff      	b.n	1b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1b34:	4632      	mov	r2, r6
    1b36:	4651      	mov	r1, sl
    1b38:	2004      	movs	r0, #4
    1b3a:	f7ff fb37 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    1b3e:	f04f 0901 	mov.w	r9, #1
    1b42:	e7b5      	b.n	1ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1b44:	4632      	mov	r2, r6
    1b46:	4651      	mov	r1, sl
    1b48:	2004      	movs	r0, #4
    1b4a:	e7af      	b.n	1aac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    1b4c:	2920      	cmp	r1, #32
    1b4e:	bf19      	ittee	ne
    1b50:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1b54:	7840      	ldrbne	r0, [r0, #1]
    1b56:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1b5a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1b5e:	e78f      	b.n	1a80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    1b60:	b19f      	cbz	r7, 1b8a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b62:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1b66:	2820      	cmp	r0, #32
    1b68:	d10f      	bne.n	1b8a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b6a:	b124      	cbz	r4, 1b76 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    1b6c:	2100      	movs	r1, #0
    1b6e:	f240 709c 	movw	r0, #1948	; 0x79c
    1b72:	f3af 8000 	nop.w
    1b76:	4631      	mov	r1, r6
    1b78:	2002      	movs	r0, #2
    1b7a:	f7ff fb47 	bl	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
    1b7e:	b920      	cbnz	r0, 1b8a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b80:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b82:	7800      	ldrb	r0, [r0, #0]
    1b84:	b3f0      	cbz	r0, 1c04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    1b86:	2801      	cmp	r0, #1
    1b88:	d04c      	beq.n	1c24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    1b8a:	b124      	cbz	r4, 1b96 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    1b8c:	2100      	movs	r1, #0
    1b8e:	f240 70b9 	movw	r0, #1977	; 0x7b9
    1b92:	f3af 8000 	nop.w
    1b96:	f1bb 0f00 	cmp.w	fp, #0
    1b9a:	bf18      	it	ne
    1b9c:	2001      	movne	r0, #1
    1b9e:	d04a      	beq.n	1c36 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    1ba0:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1ba4:	f04f 0901 	mov.w	r9, #1
    1ba8:	b124      	cbz	r4, 1bb4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    1baa:	2100      	movs	r1, #0
    1bac:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1bb0:	f3af 8000 	nop.w
    1bb4:	f1b8 0f00 	cmp.w	r8, #0
    1bb8:	d045      	beq.n	1c46 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1bba:	b124      	cbz	r4, 1bc6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    1bbc:	2100      	movs	r1, #0
    1bbe:	f240 70ce 	movw	r0, #1998	; 0x7ce
    1bc2:	f3af 8000 	nop.w
    1bc6:	f1b9 0f00 	cmp.w	r9, #0
    1bca:	d011      	beq.n	1bf0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1bcc:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1bd0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1bd4:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1bd8:	2820      	cmp	r0, #32
    1bda:	d009      	beq.n	1bf0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1bdc:	b124      	cbz	r4, 1be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    1bde:	2100      	movs	r1, #0
    1be0:	f240 70d5 	movw	r0, #2005	; 0x7d5
    1be4:	f3af 8000 	nop.w
    1be8:	4822      	ldr	r0, [pc, #136]	; (1c74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    1bea:	7840      	ldrb	r0, [r0, #1]
    1bec:	f001 fec8 	bl	3980 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1bf0:	b124      	cbz	r4, 1bfc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    1bf2:	2100      	movs	r1, #0
    1bf4:	f240 70da 	movw	r0, #2010	; 0x7da
    1bf8:	f3af 8000 	nop.w
    1bfc:	b00d      	add	sp, #52	; 0x34
    1bfe:	4648      	mov	r0, r9
    1c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c04:	e7ff      	b.n	1c06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    1c06:	b124      	cbz	r4, 1c12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    1c08:	2100      	movs	r1, #0
    1c0a:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1c0e:	f3af 8000 	nop.w
    1c12:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1c16:	4651      	mov	r1, sl
    1c18:	2004      	movs	r0, #4
    1c1a:	f7ff fac7 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    1c1e:	f04f 0901 	mov.w	r9, #1
    1c22:	e7c1      	b.n	1ba8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1c24:	2c00      	cmp	r4, #0
    1c26:	f43f aea2 	beq.w	196e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1c2a:	2100      	movs	r1, #0
    1c2c:	f240 70af 	movw	r0, #1967	; 0x7af
    1c30:	f3af 8000 	nop.w
    1c34:	e69b      	b.n	196e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1c36:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    1c3a:	2001      	movs	r0, #1
    1c3c:	ea20 0101 	bic.w	r1, r0, r1
    1c40:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    1c44:	e7ac      	b.n	1ba0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    1c46:	4807      	ldr	r0, [pc, #28]	; (1c64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1c48:	2800      	cmp	r0, #0
    1c4a:	bf18      	it	ne
    1c4c:	f3af 8000 	nopne.w
    1c50:	b662      	cpsie	i
    1c52:	e7b2      	b.n	1bba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    1c54:	e000ed04 	.word	0xe000ed04
    1c58:	20000cc4 	.word	0x20000cc4
    1c5c:	00000000 	.word	0x00000000
    1c60:	20000944 	.word	0x20000944
    1c64:	00000000 	.word	0x00000000
    1c68:	20000c44 	.word	0x20000c44
    1c6c:	003fffff 	.word	0x003fffff
    1c70:	00000000 	.word	0x00000000
    1c74:	20000010 	.word	0x20000010

00001c78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1c78:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c7c:	48a5      	ldr	r0, [pc, #660]	; (1f14 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c8>)
    1c7e:	b08c      	sub	sp, #48	; 0x30
    1c80:	6800      	ldr	r0, [r0, #0]
    1c82:	05c0      	lsls	r0, r0, #23
    1c84:	0dc0      	lsrs	r0, r0, #23
    1c86:	d011      	beq.n	1cac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1c88:	3810      	subs	r0, #16
    1c8a:	b240      	sxtb	r0, r0
    1c8c:	2800      	cmp	r0, #0
    1c8e:	bfb8      	it	lt
    1c90:	f000 000f 	andlt.w	r0, r0, #15
    1c94:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1c98:	bfac      	ite	ge
    1c9a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1c9e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1ca2:	0940      	lsrs	r0, r0, #5
    1ca4:	bf08      	it	eq
    1ca6:	f04f 0901 	moveq.w	r9, #1
    1caa:	d001      	beq.n	1cb0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1cac:	f04f 0900 	mov.w	r9, #0
    1cb0:	980c      	ldr	r0, [sp, #48]	; 0x30
    1cb2:	7800      	ldrb	r0, [r0, #0]
    1cb4:	2800      	cmp	r0, #0
    1cb6:	f04f 0000 	mov.w	r0, #0
    1cba:	bf1c      	itt	ne
    1cbc:	b00d      	addne	sp, #52	; 0x34
    1cbe:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cc2:	f8df a254 	ldr.w	sl, [pc, #596]	; 1f18 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>
    1cc6:	4d95      	ldr	r5, [pc, #596]	; (1f1c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d0>)
    1cc8:	4c95      	ldr	r4, [pc, #596]	; (1f20 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>)
    1cca:	f04f 0b00 	mov.w	fp, #0
    1cce:	900b      	str	r0, [sp, #44]	; 0x2c
    1cd0:	b125      	cbz	r5, 1cdc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1cd2:	2100      	movs	r1, #0
    1cd4:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    1cd8:	f3af 8000 	nop.w
    1cdc:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1ce0:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1ce4:	f04f 0800 	mov.w	r8, #0
    1ce8:	b125      	cbz	r5, 1cf4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    1cea:	2100      	movs	r1, #0
    1cec:	f240 605d 	movw	r0, #1629	; 0x65d
    1cf0:	f3af 8000 	nop.w
    1cf4:	f1b9 0f00 	cmp.w	r9, #0
    1cf8:	d11d      	bne.n	1d36 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1cfa:	4637      	mov	r7, r6
    1cfc:	2001      	movs	r0, #1
    1cfe:	ea20 0607 	bic.w	r6, r0, r7
    1d02:	4888      	ldr	r0, [pc, #544]	; (1f24 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d8>)
    1d04:	2240      	movs	r2, #64	; 0x40
    1d06:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1d0a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1d0e:	f00a fc4b 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1d12:	b125      	cbz	r5, 1d1e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    1d14:	2100      	movs	r1, #0
    1d16:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1d1a:	f3af 8000 	nop.w
    1d1e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1d22:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1d26:	6a09      	ldr	r1, [r1, #32]
    1d28:	6201      	str	r1, [r0, #32]
    1d2a:	b125      	cbz	r5, 1d36 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1d2c:	2100      	movs	r1, #0
    1d2e:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1d32:	f3af 8000 	nop.w
    1d36:	b125      	cbz	r5, 1d42 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    1d38:	2100      	movs	r1, #0
    1d3a:	f240 6065 	movw	r0, #1637	; 0x665
    1d3e:	f3af 8000 	nop.w
    1d42:	f000 fe95 	bl	2a70 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1d46:	4607      	mov	r7, r0
    1d48:	4633      	mov	r3, r6
    1d4a:	466a      	mov	r2, sp
    1d4c:	990c      	ldr	r1, [sp, #48]	; 0x30
    1d4e:	f7ff f887 	bl	e60 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x660>
    1d52:	b125      	cbz	r5, 1d5e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12>
    1d54:	2100      	movs	r1, #0
    1d56:	f240 606b 	movw	r0, #1643	; 0x66b
    1d5a:	f3af 8000 	nop.w
    1d5e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1d62:	2820      	cmp	r0, #32
    1d64:	d014      	beq.n	1d90 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x44>
    1d66:	6920      	ldr	r0, [r4, #16]
    1d68:	9900      	ldr	r1, [sp, #0]
    1d6a:	1a09      	subs	r1, r1, r0
    1d6c:	0209      	lsls	r1, r1, #8
    1d6e:	17ca      	asrs	r2, r1, #31
    1d70:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1d74:	1209      	asrs	r1, r1, #8
    1d76:	d50b      	bpl.n	1d90 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x44>
    1d78:	e9dd 2100 	ldrd	r2, r1, [sp]
    1d7c:	1a89      	subs	r1, r1, r2
    1d7e:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1d82:	4408      	add	r0, r1
    1d84:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d88:	e9cd 2000 	strd	r2, r0, [sp]
    1d8c:	f04f 0801 	mov.w	r8, #1
    1d90:	b14d      	cbz	r5, 1da6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a>
    1d92:	2100      	movs	r1, #0
    1d94:	f240 6075 	movw	r0, #1653	; 0x675
    1d98:	f3af 8000 	nop.w
    1d9c:	2100      	movs	r1, #0
    1d9e:	f240 607b 	movw	r0, #1659	; 0x67b
    1da2:	f3af 8000 	nop.w
    1da6:	9800      	ldr	r0, [sp, #0]
    1da8:	9901      	ldr	r1, [sp, #4]
    1daa:	1bc0      	subs	r0, r0, r7
    1dac:	1bc9      	subs	r1, r1, r7
    1dae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1db2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1db6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1dba:	d205      	bcs.n	1dc8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1dbc:	458a      	cmp	sl, r1
    1dbe:	d303      	bcc.n	1dc8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1dc0:	f1b9 0f00 	cmp.w	r9, #0
    1dc4:	d10c      	bne.n	1de0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    1dc6:	e003      	b.n	1dd0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>
    1dc8:	f1b9 0f00 	cmp.w	r9, #0
    1dcc:	d038      	beq.n	1e40 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf4>
    1dce:	e094      	b.n	1efa <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ae>
    1dd0:	4633      	mov	r3, r6
    1dd2:	463a      	mov	r2, r7
    1dd4:	4669      	mov	r1, sp
    1dd6:	4854      	ldr	r0, [pc, #336]	; (1f28 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1dc>)
    1dd8:	f7fe fbb6 	bl	548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>
    1ddc:	ea48 0800 	orr.w	r8, r8, r0
    1de0:	f1b8 0f00 	cmp.w	r8, #0
    1de4:	d022      	beq.n	1e2c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>
    1de6:	9800      	ldr	r0, [sp, #0]
    1de8:	f00a fa70 	bl	c2cc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1dec:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1df0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1df4:	4b4d      	ldr	r3, [pc, #308]	; (1f2c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>)
    1df6:	4411      	add	r1, r2
    1df8:	1c49      	adds	r1, r1, #1
    1dfa:	1842      	adds	r2, r0, r1
    1dfc:	4298      	cmp	r0, r3
    1dfe:	d841      	bhi.n	1e84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>
    1e00:	4849      	ldr	r0, [pc, #292]	; (1f28 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1dc>)
    1e02:	4281      	cmp	r1, r0
    1e04:	dc5a      	bgt.n	1ebc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x170>
    1e06:	4240      	negs	r0, r0
    1e08:	4281      	cmp	r1, r0
    1e0a:	db5f      	blt.n	1ecc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x180>
    1e0c:	1c58      	adds	r0, r3, #1
    1e0e:	4290      	cmp	r0, r2
    1e10:	bfdc      	itt	le
    1e12:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1e16:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1e1a:	dd05      	ble.n	1e28 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1e1c:	2a00      	cmp	r2, #0
    1e1e:	bfbc      	itt	lt
    1e20:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1e24:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1e28:	980c      	ldr	r0, [sp, #48]	; 0x30
    1e2a:	60c2      	str	r2, [r0, #12]
    1e2c:	2001      	movs	r0, #1
    1e2e:	900b      	str	r0, [sp, #44]	; 0x2c
    1e30:	2d00      	cmp	r5, #0
    1e32:	d062      	beq.n	1efa <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ae>
    1e34:	2100      	movs	r1, #0
    1e36:	f240 608e 	movw	r0, #1678	; 0x68e
    1e3a:	f3af 8000 	nop.w
    1e3e:	e05c      	b.n	1efa <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ae>
    1e40:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1e44:	aa08      	add	r2, sp, #32
    1e46:	a907      	add	r1, sp, #28
    1e48:	f000 fcbc 	bl	27c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1e4c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1e50:	2820      	cmp	r0, #32
    1e52:	d01c      	beq.n	1e8e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x142>
    1e54:	6920      	ldr	r0, [r4, #16]
    1e56:	1d40      	adds	r0, r0, #5
    1e58:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e5c:	e9dd 2100 	ldrd	r2, r1, [sp]
    1e60:	1a89      	subs	r1, r1, r2
    1e62:	4401      	add	r1, r0
    1e64:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e68:	e9cd 0100 	strd	r0, r1, [sp]
    1e6c:	f00a fa2e 	bl	c2cc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1e70:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1e74:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1e78:	4b2c      	ldr	r3, [pc, #176]	; (1f2c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>)
    1e7a:	4411      	add	r1, r2
    1e7c:	1c4a      	adds	r2, r1, #1
    1e7e:	1881      	adds	r1, r0, r2
    1e80:	4298      	cmp	r0, r3
    1e82:	d918      	bls.n	1eb6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16a>
    1e84:	f240 6109 	movw	r1, #1545	; 0x609
    1e88:	2070      	movs	r0, #112	; 0x70
    1e8a:	f001 fca9 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e8e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1e92:	f107 0609 	add.w	r6, r7, #9
    1e96:	b120      	cbz	r0, 1ea2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x156>
    1e98:	f001 fc3e 	bl	3718 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1e9c:	2800      	cmp	r0, #0
    1e9e:	bf08      	it	eq
    1ea0:	3632      	addeq	r6, #50	; 0x32
    1ea2:	4823      	ldr	r0, [pc, #140]	; (1f30 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>)
    1ea4:	7841      	ldrb	r1, [r0, #1]
    1ea6:	9807      	ldr	r0, [sp, #28]
    1ea8:	4281      	cmp	r1, r0
    1eaa:	bf84      	itt	hi
    1eac:	1a08      	subhi	r0, r1, r0
    1eae:	4406      	addhi	r6, r0
    1eb0:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1eb4:	e7d2      	b.n	1e5c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>
    1eb6:	481c      	ldr	r0, [pc, #112]	; (1f28 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1dc>)
    1eb8:	4282      	cmp	r2, r0
    1eba:	dd04      	ble.n	1ec6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17a>
    1ebc:	f240 610a 	movw	r1, #1546	; 0x60a
    1ec0:	2070      	movs	r0, #112	; 0x70
    1ec2:	f001 fc8d 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ec6:	481b      	ldr	r0, [pc, #108]	; (1f34 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e8>)
    1ec8:	4282      	cmp	r2, r0
    1eca:	da04      	bge.n	1ed6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18a>
    1ecc:	f240 610b 	movw	r1, #1547	; 0x60b
    1ed0:	2070      	movs	r0, #112	; 0x70
    1ed2:	f001 fc85 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ed6:	4818      	ldr	r0, [pc, #96]	; (1f38 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ec>)
    1ed8:	4288      	cmp	r0, r1
    1eda:	bfdc      	itt	le
    1edc:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    1ee0:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    1ee4:	dd05      	ble.n	1ef2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a6>
    1ee6:	2900      	cmp	r1, #0
    1ee8:	bfbc      	itt	lt
    1eea:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    1eee:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    1ef2:	980c      	ldr	r0, [sp, #48]	; 0x30
    1ef4:	60c1      	str	r1, [r0, #12]
    1ef6:	2001      	movs	r0, #1
    1ef8:	900b      	str	r0, [sp, #44]	; 0x2c
    1efa:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1efe:	f88d 0010 	strb.w	r0, [sp, #16]
    1f02:	f89d 0010 	ldrb.w	r0, [sp, #16]
    1f06:	2800      	cmp	r0, #0
    1f08:	f47f aee2 	bne.w	1cd0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1f0c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1f0e:	b00d      	add	sp, #52	; 0x34
    1f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f14:	e000ed04 	.word	0xe000ed04
    1f18:	003fffff 	.word	0x003fffff
    1f1c:	00000000 	.word	0x00000000
    1f20:	20000cc4 	.word	0x20000cc4
    1f24:	20000c44 	.word	0x20000c44
    1f28:	07a12000 	.word	0x07a12000
    1f2c:	1e847fff 	.word	0x1e847fff
    1f30:	20000012 	.word	0x20000012
    1f34:	f85ee000 	.word	0xf85ee000
    1f38:	1e848000 	.word	0x1e848000

00001f3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1f3c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f40:	4d88      	ldr	r5, [pc, #544]	; (2164 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    1f42:	b08c      	sub	sp, #48	; 0x30
    1f44:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1f48:	2000      	movs	r0, #0
    1f4a:	9009      	str	r0, [sp, #36]	; 0x24
    1f4c:	2001      	movs	r0, #1
    1f4e:	4c86      	ldr	r4, [pc, #536]	; (2168 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    1f50:	f04f 0900 	mov.w	r9, #0
    1f54:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1f58:	4680      	mov	r8, r0
    1f5a:	9008      	str	r0, [sp, #32]
    1f5c:	b124      	cbz	r4, 1f68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1f5e:	2100      	movs	r1, #0
    1f60:	f240 70e9 	movw	r0, #2025	; 0x7e9
    1f64:	f3af 8000 	nop.w
    1f68:	9808      	ldr	r0, [sp, #32]
    1f6a:	2800      	cmp	r0, #0
    1f6c:	d037      	beq.n	1fde <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    1f6e:	bf00      	nop
    1f70:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1f74:	b124      	cbz	r4, 1f80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    1f76:	2100      	movs	r1, #0
    1f78:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1f7c:	f3af 8000 	nop.w
    1f80:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    1f84:	2240      	movs	r2, #64	; 0x40
    1f86:	ea28 060a 	bic.w	r6, r8, sl
    1f8a:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1f8e:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    1f92:	4683      	mov	fp, r0
    1f94:	f00a fb08 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f98:	b124      	cbz	r4, 1fa4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    1f9a:	2100      	movs	r1, #0
    1f9c:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1fa0:	f3af 8000 	nop.w
    1fa4:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1fa8:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    1fac:	9000      	str	r0, [sp, #0]
    1fae:	6a09      	ldr	r1, [r1, #32]
    1fb0:	6201      	str	r1, [r0, #32]
    1fb2:	b124      	cbz	r4, 1fbe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    1fb4:	2100      	movs	r1, #0
    1fb6:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1fba:	f3af 8000 	nop.w
    1fbe:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1fc2:	f88d 0008 	strb.w	r0, [sp, #8]
    1fc6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1fca:	b178      	cbz	r0, 1fec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    1fcc:	2c00      	cmp	r4, #0
    1fce:	bf1c      	itt	ne
    1fd0:	2100      	movne	r1, #0
    1fd2:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    1fd6:	d0c1      	beq.n	1f5c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1fd8:	f3af 8000 	nop.w
    1fdc:	e7be      	b.n	1f5c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1fde:	4863      	ldr	r0, [pc, #396]	; (216c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    1fe0:	2800      	cmp	r0, #0
    1fe2:	bf18      	it	ne
    1fe4:	f3af 8000 	nopne.w
    1fe8:	b662      	cpsie	i
    1fea:	e7c1      	b.n	1f70 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    1fec:	b124      	cbz	r4, 1ff8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    1fee:	2100      	movs	r1, #0
    1ff0:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    1ff4:	f3af 8000 	nop.w
    1ff8:	980c      	ldr	r0, [sp, #48]	; 0x30
    1ffa:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    1ffe:	2803      	cmp	r0, #3
    2000:	d172      	bne.n	20e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    2002:	f8dd a000 	ldr.w	sl, [sp]
    2006:	f8cd a018 	str.w	sl, [sp, #24]
    200a:	990c      	ldr	r1, [sp, #48]	; 0x30
    200c:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2010:	4288      	cmp	r0, r1
    2012:	bf14      	ite	ne
    2014:	f04f 0b00 	movne.w	fp, #0
    2018:	f04f 0b01 	moveq.w	fp, #1
    201c:	f10a 0c20 	add.w	ip, sl, #32
    2020:	4686      	mov	lr, r0
    2022:	2220      	movs	r2, #32
    2024:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    2028:	e003      	b.n	2032 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    202a:	4602      	mov	r2, r0
    202c:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2030:	7840      	ldrb	r0, [r0, #1]
    2032:	4288      	cmp	r0, r1
    2034:	d002      	beq.n	203c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    2036:	2820      	cmp	r0, #32
    2038:	d00a      	beq.n	2050 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    203a:	e7f6      	b.n	202a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    203c:	2820      	cmp	r0, #32
    203e:	d007      	beq.n	2050 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    2040:	4586      	cmp	lr, r0
    2042:	d107      	bne.n	2054 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    2044:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    2048:	7840      	ldrb	r0, [r0, #1]
    204a:	f88c 0000 	strb.w	r0, [ip]
    204e:	e007      	b.n	2060 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    2050:	4648      	mov	r0, r9
    2052:	e00c      	b.n	206e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    2054:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2058:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    205c:	7840      	ldrb	r0, [r0, #1]
    205e:	7048      	strb	r0, [r1, #1]
    2060:	b124      	cbz	r4, 206c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    2062:	2100      	movs	r1, #0
    2064:	f240 5037 	movw	r0, #1335	; 0x537
    2068:	f3af 8000 	nop.w
    206c:	4640      	mov	r0, r8
    206e:	ea10 0f0b 	tst.w	r0, fp
    2072:	bf18      	it	ne
    2074:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    2078:	2800      	cmp	r0, #0
    207a:	d052      	beq.n	2122 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    207c:	b124      	cbz	r4, 2088 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    207e:	2100      	movs	r1, #0
    2080:	f240 70fd 	movw	r0, #2045	; 0x7fd
    2084:	f3af 8000 	nop.w
    2088:	4632      	mov	r2, r6
    208a:	2001      	movs	r0, #1
    208c:	990c      	ldr	r1, [sp, #48]	; 0x30
    208e:	f7ff f88d 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    2092:	9806      	ldr	r0, [sp, #24]
    2094:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2098:	f88d 0008 	strb.w	r0, [sp, #8]
    209c:	f89d a008 	ldrb.w	sl, [sp, #8]
    20a0:	b124      	cbz	r4, 20ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    20a2:	2100      	movs	r1, #0
    20a4:	f640 0008 	movw	r0, #2056	; 0x808
    20a8:	f3af 8000 	nop.w
    20ac:	4830      	ldr	r0, [pc, #192]	; (2170 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    20ae:	2800      	cmp	r0, #0
    20b0:	bf18      	it	ne
    20b2:	f3af 8000 	nopne.w
    20b6:	f3ef 8010 	mrs	r0, PRIMASK
    20ba:	b672      	cpsid	i
    20bc:	9008      	str	r0, [sp, #32]
    20be:	b124      	cbz	r4, 20ca <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    20c0:	2100      	movs	r1, #0
    20c2:	f640 000d 	movw	r0, #2061	; 0x80d
    20c6:	f3af 8000 	nop.w
    20ca:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    20ce:	f88d 0008 	strb.w	r0, [sp, #8]
    20d2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    20d6:	b140      	cbz	r0, 20ea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    20d8:	2c00      	cmp	r4, #0
    20da:	bf1c      	itt	ne
    20dc:	2100      	movne	r1, #0
    20de:	f640 0011 	movwne	r0, #2065	; 0x811
    20e2:	f43f af3b 	beq.w	1f5c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    20e6:	e777      	b.n	1fd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    20e8:	e01b      	b.n	2122 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    20ea:	f1ba 0f00 	cmp.w	sl, #0
    20ee:	d008      	beq.n	2102 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    20f0:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    20f4:	2820      	cmp	r0, #32
    20f6:	d104      	bne.n	2102 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    20f8:	4631      	mov	r1, r6
    20fa:	2002      	movs	r0, #2
    20fc:	f7ff f886 	bl	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
    2100:	b308      	cbz	r0, 2146 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    2102:	b124      	cbz	r4, 210e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2104:	2100      	movs	r1, #0
    2106:	f640 0025 	movw	r0, #2085	; 0x825
    210a:	f3af 8000 	nop.w
    210e:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2112:	ea28 0000 	bic.w	r0, r8, r0
    2116:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    211a:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    211e:	2001      	movs	r0, #1
    2120:	9009      	str	r0, [sp, #36]	; 0x24
    2122:	b124      	cbz	r4, 212e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2124:	2100      	movs	r1, #0
    2126:	f640 002e 	movw	r0, #2094	; 0x82e
    212a:	f3af 8000 	nop.w
    212e:	9808      	ldr	r0, [sp, #32]
    2130:	b188      	cbz	r0, 2156 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    2132:	b124      	cbz	r4, 213e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    2134:	2100      	movs	r1, #0
    2136:	f640 0032 	movw	r0, #2098	; 0x832
    213a:	f3af 8000 	nop.w
    213e:	9809      	ldr	r0, [sp, #36]	; 0x24
    2140:	b00d      	add	sp, #52	; 0x34
    2142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2146:	2c00      	cmp	r4, #0
    2148:	d0f1      	beq.n	212e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    214a:	2100      	movs	r1, #0
    214c:	f44f 6002 	mov.w	r0, #2080	; 0x820
    2150:	f3af 8000 	nop.w
    2154:	e7e6      	b.n	2124 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    2156:	4805      	ldr	r0, [pc, #20]	; (216c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2158:	2800      	cmp	r0, #0
    215a:	bf18      	it	ne
    215c:	f3af 8000 	nopne.w
    2160:	b662      	cpsie	i
    2162:	e7e6      	b.n	2132 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    2164:	20000cc4 	.word	0x20000cc4
	...

00002174 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2174:	b510      	push	{r4, lr}
    2176:	2820      	cmp	r0, #32
    2178:	d211      	bcs.n	219e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    217a:	490e      	ldr	r1, [pc, #56]	; (21b4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    217c:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2180:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2184:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2188:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    218c:	b13b      	cbz	r3, 219e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    218e:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2192:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    2196:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    219a:	2a01      	cmp	r2, #1
    219c:	d001      	beq.n	21a2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    219e:	2000      	movs	r0, #0
    21a0:	bd10      	pop	{r4, pc}
    21a2:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    21a6:	4601      	mov	r1, r0
    21a8:	2000      	movs	r0, #0
    21aa:	f7fe ffff 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    21ae:	2001      	movs	r0, #1
    21b0:	bd10      	pop	{r4, pc}
    21b2:	0000      	.short	0x0000
    21b4:	20000cc4 	.word	0x20000cc4

000021b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    21b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21bc:	4e80      	ldr	r6, [pc, #512]	; (23c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    21be:	4680      	mov	r8, r0
    21c0:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    21c4:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    21c8:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    21cc:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    21d0:	2800      	cmp	r0, #0
    21d2:	d068      	beq.n	22a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    21d4:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    21d8:	4d7a      	ldr	r5, [pc, #488]	; (23c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    21da:	b125      	cbz	r5, 21e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    21dc:	2100      	movs	r1, #0
    21de:	f640 30c1 	movw	r0, #3009	; 0xbc1
    21e2:	f3af 8000 	nop.w
    21e6:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    21ea:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    21ee:	2801      	cmp	r0, #1
    21f0:	d018      	beq.n	2224 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    21f2:	b2c0      	uxtb	r0, r0
    21f4:	2804      	cmp	r0, #4
    21f6:	bf1c      	itt	ne
    21f8:	2805      	cmpne	r0, #5
    21fa:	2806      	cmpne	r0, #6
    21fc:	d058      	beq.n	22b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    21fe:	b12d      	cbz	r5, 220c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2200:	f04f 0100 	mov.w	r1, #0
    2204:	f640 30cd 	movw	r0, #3021	; 0xbcd
    2208:	f3af 8000 	nop.w
    220c:	f001 fc0e 	bl	3a2c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2210:	b125      	cbz	r5, 221c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2212:	2100      	movs	r1, #0
    2214:	f640 30d1 	movw	r0, #3025	; 0xbd1
    2218:	f3af 8000 	nop.w
    221c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2220:	2801      	cmp	r0, #1
    2222:	d1e6      	bne.n	21f2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2224:	2401      	movs	r4, #1
    2226:	b125      	cbz	r5, 2232 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2228:	2100      	movs	r1, #0
    222a:	f640 30d8 	movw	r0, #3032	; 0xbd8
    222e:	f3af 8000 	nop.w
    2232:	2c00      	cmp	r4, #0
    2234:	d042      	beq.n	22bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    2236:	2000      	movs	r0, #0
    2238:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    223c:	b125      	cbz	r5, 2248 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    223e:	2100      	movs	r1, #0
    2240:	f640 30dd 	movw	r0, #3037	; 0xbdd
    2244:	f3af 8000 	nop.w
    2248:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    224c:	2001      	movs	r0, #1
    224e:	ea20 090b 	bic.w	r9, r0, fp
    2252:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2256:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    225a:	2240      	movs	r2, #64	; 0x40
    225c:	f00a f9a4 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2260:	b125      	cbz	r5, 226c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    2262:	2100      	movs	r1, #0
    2264:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2268:	f3af 8000 	nop.w
    226c:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    2270:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    2274:	6a00      	ldr	r0, [r0, #32]
    2276:	f8ca 0020 	str.w	r0, [sl, #32]
    227a:	b125      	cbz	r5, 2286 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    227c:	2100      	movs	r1, #0
    227e:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2282:	f3af 8000 	nop.w
    2286:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    228a:	f88d 0000 	strb.w	r0, [sp]
    228e:	f89d 0000 	ldrb.w	r0, [sp]
    2292:	b1d0      	cbz	r0, 22ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    2294:	2d00      	cmp	r5, #0
    2296:	bf1c      	itt	ne
    2298:	2100      	movne	r1, #0
    229a:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    229e:	d0c2      	beq.n	2226 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    22a0:	f3af 8000 	nop.w
    22a4:	e7bf      	b.n	2226 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    22a6:	f640 31b8 	movw	r1, #3000	; 0xbb8
    22aa:	2070      	movs	r0, #112	; 0x70
    22ac:	f001 fa98 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22b0:	464a      	mov	r2, r9
    22b2:	4641      	mov	r1, r8
    22b4:	2001      	movs	r0, #1
    22b6:	f7fe ff79 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    22ba:	e7a9      	b.n	2210 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    22bc:	4842      	ldr	r0, [pc, #264]	; (23c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    22be:	2800      	cmp	r0, #0
    22c0:	bf18      	it	ne
    22c2:	f3af 8000 	nopne.w
    22c6:	b662      	cpsie	i
    22c8:	e7b5      	b.n	2236 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    22ca:	b125      	cbz	r5, 22d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    22cc:	2100      	movs	r1, #0
    22ce:	f640 30e7 	movw	r0, #3047	; 0xbe7
    22d2:	f3af 8000 	nop.w
    22d6:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    22da:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    22de:	4614      	mov	r4, r2
    22e0:	f04f 0b20 	mov.w	fp, #32
    22e4:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    22e8:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    22ec:	e003      	b.n	22f6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    22ee:	46a3      	mov	fp, r4
    22f0:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    22f4:	785c      	ldrb	r4, [r3, #1]
    22f6:	4544      	cmp	r4, r8
    22f8:	d002      	beq.n	2300 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    22fa:	2c20      	cmp	r4, #32
    22fc:	d02b      	beq.n	2356 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    22fe:	e7f6      	b.n	22ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    2300:	2c20      	cmp	r4, #32
    2302:	d028      	beq.n	2356 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2304:	42a2      	cmp	r2, r4
    2306:	d104      	bne.n	2312 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    2308:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    230c:	7840      	ldrb	r0, [r0, #1]
    230e:	7008      	strb	r0, [r1, #0]
    2310:	e005      	b.n	231e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    2312:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    2316:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    231a:	7849      	ldrb	r1, [r1, #1]
    231c:	7041      	strb	r1, [r0, #1]
    231e:	f1ba 0f00 	cmp.w	sl, #0
    2322:	d011      	beq.n	2348 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2324:	b125      	cbz	r5, 2330 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    2326:	2100      	movs	r1, #0
    2328:	f240 502f 	movw	r0, #1327	; 0x52f
    232c:	f3af 8000 	nop.w
    2330:	f89a 0000 	ldrb.w	r0, [sl]
    2334:	42a0      	cmp	r0, r4
    2336:	d107      	bne.n	2348 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2338:	b125      	cbz	r5, 2344 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    233a:	2100      	movs	r1, #0
    233c:	f240 5032 	movw	r0, #1330	; 0x532
    2340:	f3af 8000 	nop.w
    2344:	f88a b000 	strb.w	fp, [sl]
    2348:	b15d      	cbz	r5, 2362 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    234a:	2100      	movs	r1, #0
    234c:	f240 5037 	movw	r0, #1335	; 0x537
    2350:	f3af 8000 	nop.w
    2354:	e000      	b.n	2358 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    2356:	b125      	cbz	r5, 2362 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    2358:	2100      	movs	r1, #0
    235a:	f640 30eb 	movw	r0, #3051	; 0xbeb
    235e:	f3af 8000 	nop.w
    2362:	481a      	ldr	r0, [pc, #104]	; (23cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    2364:	2800      	cmp	r0, #0
    2366:	bf18      	it	ne
    2368:	f3af 8000 	nopne.w
    236c:	f3ef 8410 	mrs	r4, PRIMASK
    2370:	b672      	cpsid	i
    2372:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2376:	f88d 0000 	strb.w	r0, [sp]
    237a:	f89d 0000 	ldrb.w	r0, [sp]
    237e:	b138      	cbz	r0, 2390 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    2380:	2d00      	cmp	r5, #0
    2382:	bf1c      	itt	ne
    2384:	2100      	movne	r1, #0
    2386:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    238a:	f43f af4c 	beq.w	2226 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    238e:	e787      	b.n	22a0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2390:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    2394:	2001      	movs	r0, #1
    2396:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    239a:	b154      	cbz	r4, 23b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    239c:	2d00      	cmp	r5, #0
    239e:	bf08      	it	eq
    23a0:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23a4:	2100      	movs	r1, #0
    23a6:	f640 30fe 	movw	r0, #3070	; 0xbfe
    23aa:	f3af 8000 	nop.w
    23ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23b2:	4805      	ldr	r0, [pc, #20]	; (23c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    23b4:	2800      	cmp	r0, #0
    23b6:	bf18      	it	ne
    23b8:	f3af 8000 	nopne.w
    23bc:	b662      	cpsie	i
    23be:	e7ed      	b.n	239c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    23c0:	20000cc4 	.word	0x20000cc4
	...

000023d0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    23d0:	b570      	push	{r4, r5, r6, lr}
    23d2:	460d      	mov	r5, r1
    23d4:	4606      	mov	r6, r0
    23d6:	f001 f98d 	bl	36f4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    23da:	480f      	ldr	r0, [pc, #60]	; (2418 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    23dc:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    23e0:	2400      	movs	r4, #0
    23e2:	3880      	subs	r0, #128	; 0x80
    23e4:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    23e8:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    23ec:	b129      	cbz	r1, 23fa <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    23ee:	1c61      	adds	r1, r4, #1
    23f0:	b2cc      	uxtb	r4, r1
    23f2:	2c20      	cmp	r4, #32
    23f4:	d3f8      	bcc.n	23e8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    23f6:	2020      	movs	r0, #32
    23f8:	bd70      	pop	{r4, r5, r6, pc}
    23fa:	4808      	ldr	r0, [pc, #32]	; (241c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    23fc:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2400:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2404:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    2408:	4621      	mov	r1, r4
    240a:	6045      	str	r5, [r0, #4]
    240c:	2001      	movs	r0, #1
    240e:	f7fe fecd 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    2412:	4620      	mov	r0, r4
    2414:	bd70      	pop	{r4, r5, r6, pc}
    2416:	0000      	.short	0x0000
    2418:	20000cc4 	.word	0x20000cc4
    241c:	20000944 	.word	0x20000944

00002420 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2424:	b083      	sub	sp, #12
    2426:	f000 fb23 	bl	2a70 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    242a:	4605      	mov	r5, r0
    242c:	f000 fdd6 	bl	2fdc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2430:	4c67      	ldr	r4, [pc, #412]	; (25d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    2432:	68a0      	ldr	r0, [r4, #8]
    2434:	f1b0 3fff 	cmp.w	r0, #4294967295
    2438:	bf1c      	itt	ne
    243a:	f04f 30ff 	movne.w	r0, #4294967295
    243e:	60a0      	strne	r0, [r4, #8]
    2440:	7fa0      	ldrb	r0, [r4, #30]
    2442:	f8df b190 	ldr.w	fp, [pc, #400]	; 25d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    2446:	b9a8      	cbnz	r0, 2474 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    2448:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    244c:	1a08      	subs	r0, r1, r0
    244e:	0200      	lsls	r0, r0, #8
    2450:	17c1      	asrs	r1, r0, #31
    2452:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2456:	1200      	asrs	r0, r0, #8
    2458:	f44f 710c 	mov.w	r1, #560	; 0x230
    245c:	f009 ff63 	bl	c326 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2460:	6921      	ldr	r1, [r4, #16]
    2462:	4408      	add	r0, r1
    2464:	1a28      	subs	r0, r5, r0
    2466:	0200      	lsls	r0, r0, #8
    2468:	17c1      	asrs	r1, r0, #31
    246a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    246e:	1200      	asrs	r0, r0, #8
    2470:	0fc0      	lsrs	r0, r0, #31
    2472:	d013      	beq.n	249c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    2474:	7e60      	ldrb	r0, [r4, #25]
    2476:	b328      	cbz	r0, 24c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2478:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    247c:	f88d 0000 	strb.w	r0, [sp]
    2480:	f89d 0000 	ldrb.w	r0, [sp]
    2484:	b1f0      	cbz	r0, 24c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2486:	f000 fbff 	bl	2c88 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    248a:	bf00      	nop
    248c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2490:	b1f0      	cbz	r0, 24d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    2492:	f240 4147 	movw	r1, #1095	; 0x447
    2496:	2070      	movs	r0, #112	; 0x70
    2498:	f001 f9a2 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    249c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24a0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    24a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    24a8:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    24ac:	6840      	ldr	r0, [r0, #4]
    24ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    24b2:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    24b6:	2108      	movs	r1, #8
    24b8:	4790      	blx	r2
    24ba:	f44f 6186 	mov.w	r1, #1072	; 0x430
    24be:	2070      	movs	r0, #112	; 0x70
    24c0:	f001 f98e 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24c4:	1ce8      	adds	r0, r5, #3
    24c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24ca:	f000 fad7 	bl	2a7c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    24ce:	e7dd      	b.n	248c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    24d0:	f04f 0a01 	mov.w	sl, #1
    24d4:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    24d8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24dc:	2820      	cmp	r0, #32
    24de:	d024      	beq.n	252a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    24e0:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    24e4:	2020      	movs	r0, #32
    24e6:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    24ea:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    24ee:	2600      	movs	r6, #0
    24f0:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    24f4:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    24f8:	4837      	ldr	r0, [pc, #220]	; (25d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    24fa:	6026      	str	r6, [r4, #0]
    24fc:	7800      	ldrb	r0, [r0, #0]
    24fe:	2802      	cmp	r0, #2
    2500:	bf16      	itet	ne
    2502:	2803      	cmpne	r0, #3
    2504:	2001      	moveq	r0, #1
    2506:	2000      	movne	r0, #0
    2508:	7720      	strb	r0, [r4, #28]
    250a:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    250e:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2512:	f899 0020 	ldrb.w	r0, [r9, #32]
    2516:	2820      	cmp	r0, #32
    2518:	d031      	beq.n	257e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    251a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    251e:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2522:	7d81      	ldrb	r1, [r0, #22]
    2524:	2901      	cmp	r1, #1
    2526:	d005      	beq.n	2534 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    2528:	e029      	b.n	257e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    252a:	f240 414a 	movw	r1, #1098	; 0x44a
    252e:	2070      	movs	r0, #112	; 0x70
    2530:	f001 f956 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2534:	46ab      	mov	fp, r5
    2536:	f100 0508 	add.w	r5, r0, #8
    253a:	8a40      	ldrh	r0, [r0, #18]
    253c:	aa01      	add	r2, sp, #4
    253e:	4669      	mov	r1, sp
    2540:	f000 f940 	bl	27c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2544:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2548:	2820      	cmp	r0, #32
    254a:	d004      	beq.n	2556 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    254c:	6920      	ldr	r0, [r4, #16]
    254e:	1d40      	adds	r0, r0, #5
    2550:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2554:	e00b      	b.n	256e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    2556:	8968      	ldrh	r0, [r5, #10]
    2558:	f10b 0b09 	add.w	fp, fp, #9
    255c:	b128      	cbz	r0, 256a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    255e:	f001 f8db 	bl	3718 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2562:	2800      	cmp	r0, #0
    2564:	bf08      	it	eq
    2566:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    256a:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    256e:	e9d5 2100 	ldrd	r2, r1, [r5]
    2572:	1a89      	subs	r1, r1, r2
    2574:	6028      	str	r0, [r5, #0]
    2576:	4408      	add	r0, r1
    2578:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    257c:	6068      	str	r0, [r5, #4]
    257e:	4639      	mov	r1, r7
    2580:	2001      	movs	r0, #1
    2582:	f7fe fe43 	bl	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
    2586:	2800      	cmp	r0, #0
    2588:	d0f9      	beq.n	257e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    258a:	4814      	ldr	r0, [pc, #80]	; (25dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    258c:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    2590:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2594:	2802      	cmp	r0, #2
    2596:	d104      	bne.n	25a2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    2598:	463a      	mov	r2, r7
    259a:	4641      	mov	r1, r8
    259c:	2006      	movs	r0, #6
    259e:	f7fe fe05 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    25a2:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    25a6:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    25aa:	2820      	cmp	r0, #32
    25ac:	d003      	beq.n	25b6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    25ae:	480c      	ldr	r0, [pc, #48]	; (25e0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    25b0:	7840      	ldrb	r0, [r0, #1]
    25b2:	f001 f9e5 	bl	3980 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    25b6:	7f20      	ldrb	r0, [r4, #28]
    25b8:	2800      	cmp	r0, #0
    25ba:	bf04      	itt	eq
    25bc:	b003      	addeq	sp, #12
    25be:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25c2:	f000 fd55 	bl	3070 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    25c6:	7726      	strb	r6, [r4, #28]
    25c8:	7766      	strb	r6, [r4, #29]
    25ca:	b003      	add	sp, #12
    25cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25d0:	20000cc4 	.word	0x20000cc4
    25d4:	20000944 	.word	0x20000944
    25d8:	20000012 	.word	0x20000012
    25dc:	20000c44 	.word	0x20000c44
    25e0:	20000010 	.word	0x20000010

000025e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    25e4:	b510      	push	{r4, lr}
    25e6:	4c32      	ldr	r4, [pc, #200]	; (26b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    25e8:	b082      	sub	sp, #8
    25ea:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    25ee:	2920      	cmp	r1, #32
    25f0:	d008      	beq.n	2604 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    25f2:	68a1      	ldr	r1, [r4, #8]
    25f4:	f1b1 3fff 	cmp.w	r1, #4294967295
    25f8:	d009      	beq.n	260e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    25fa:	f640 21e9 	movw	r1, #2793	; 0xae9
    25fe:	2070      	movs	r0, #112	; 0x70
    2600:	f001 f8ee 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2604:	f640 21e8 	movw	r1, #2792	; 0xae8
    2608:	2070      	movs	r0, #112	; 0x70
    260a:	f001 f8e9 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    260e:	6862      	ldr	r2, [r4, #4]
    2610:	4601      	mov	r1, r0
    2612:	4b28      	ldr	r3, [pc, #160]	; (26b4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2614:	1850      	adds	r0, r2, r1
    2616:	429a      	cmp	r2, r3
    2618:	d904      	bls.n	2624 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    261a:	f240 6109 	movw	r1, #1545	; 0x609
    261e:	2070      	movs	r0, #112	; 0x70
    2620:	f001 f8de 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2624:	4a24      	ldr	r2, [pc, #144]	; (26b8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2626:	4291      	cmp	r1, r2
    2628:	dd04      	ble.n	2634 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    262a:	f240 610a 	movw	r1, #1546	; 0x60a
    262e:	2070      	movs	r0, #112	; 0x70
    2630:	f001 f8d6 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2634:	4a21      	ldr	r2, [pc, #132]	; (26bc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2636:	4291      	cmp	r1, r2
    2638:	da04      	bge.n	2644 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    263a:	f240 610b 	movw	r1, #1547	; 0x60b
    263e:	2070      	movs	r0, #112	; 0x70
    2640:	f001 f8ce 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2644:	491e      	ldr	r1, [pc, #120]	; (26c0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    2646:	4281      	cmp	r1, r0
    2648:	bfdc      	itt	le
    264a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    264e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2652:	dd05      	ble.n	2660 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2654:	2800      	cmp	r0, #0
    2656:	bfbc      	itt	lt
    2658:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    265c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2660:	aa01      	add	r2, sp, #4
    2662:	4669      	mov	r1, sp
    2664:	f000 f8ae 	bl	27c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2668:	f89d 0004 	ldrb.w	r0, [sp, #4]
    266c:	280f      	cmp	r0, #15
    266e:	bf8c      	ite	hi
    2670:	2001      	movhi	r0, #1
    2672:	2000      	movls	r0, #0
    2674:	9900      	ldr	r1, [sp, #0]
    2676:	4408      	add	r0, r1
    2678:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    267c:	60a1      	str	r1, [r4, #8]
    267e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2682:	f88d 0000 	strb.w	r0, [sp]
    2686:	f89d 0000 	ldrb.w	r0, [sp]
    268a:	2800      	cmp	r0, #0
    268c:	bf04      	itt	eq
    268e:	b002      	addeq	sp, #8
    2690:	bd10      	popeq	{r4, pc}
    2692:	2301      	movs	r3, #1
    2694:	2203      	movs	r2, #3
    2696:	2005      	movs	r0, #5
    2698:	f000 fb70 	bl	2d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    269c:	2800      	cmp	r0, #0
    269e:	bf1c      	itt	ne
    26a0:	b002      	addne	sp, #8
    26a2:	bd10      	popne	{r4, pc}
    26a4:	f640 21f1 	movw	r1, #2801	; 0xaf1
    26a8:	2070      	movs	r0, #112	; 0x70
    26aa:	f001 f899 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26ae:	0000      	.short	0x0000
    26b0:	20000cc4 	.word	0x20000cc4
    26b4:	1e847fff 	.word	0x1e847fff
    26b8:	07a12000 	.word	0x07a12000
    26bc:	f85ee000 	.word	0xf85ee000
    26c0:	1e848000 	.word	0x1e848000

000026c4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    26c4:	b570      	push	{r4, r5, r6, lr}
    26c6:	4c1e      	ldr	r4, [pc, #120]	; (2740 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    26c8:	2120      	movs	r1, #32
    26ca:	f884 1020 	strb.w	r1, [r4, #32]
    26ce:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    26d2:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    26d6:	2000      	movs	r0, #0
    26d8:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    26dc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    26e0:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    26e4:	1e42      	subs	r2, r0, #1
    26e6:	60a2      	str	r2, [r4, #8]
    26e8:	6020      	str	r0, [r4, #0]
    26ea:	77a0      	strb	r0, [r4, #30]
    26ec:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    26f0:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    26f4:	7720      	strb	r0, [r4, #28]
    26f6:	7760      	strb	r0, [r4, #29]
    26f8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    26fc:	4911      	ldr	r1, [pc, #68]	; (2744 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    26fe:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2702:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2706:	7008      	strb	r0, [r1, #0]
    2708:	7048      	strb	r0, [r1, #1]
    270a:	8048      	strh	r0, [r1, #2]
    270c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2710:	2210      	movs	r2, #16
    2712:	7088      	strb	r0, [r1, #2]
    2714:	f801 0f04 	strb.w	r0, [r1, #4]!
    2718:	1e52      	subs	r2, r2, #1
    271a:	d1fa      	bne.n	2712 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    271c:	4d0a      	ldr	r5, [pc, #40]	; (2748 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    271e:	2601      	movs	r6, #1
    2720:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2724:	20ff      	movs	r0, #255	; 0xff
    2726:	7028      	strb	r0, [r5, #0]
    2728:	4808      	ldr	r0, [pc, #32]	; (274c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    272a:	f001 f90b 	bl	3944 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    272e:	7068      	strb	r0, [r5, #1]
    2730:	f001 f966 	bl	3a00 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2734:	60a8      	str	r0, [r5, #8]
    2736:	f000 fcc9 	bl	30cc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    273a:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    273e:	bd70      	pop	{r4, r5, r6, pc}
    2740:	20000cc4 	.word	0x20000cc4
    2744:	20000012 	.word	0x20000012
    2748:	20000010 	.word	0x20000010
    274c:	00001069 	.word	0x00001069

00002750 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    2750:	b570      	push	{r4, r5, r6, lr}
    2752:	4605      	mov	r5, r0
    2754:	2001      	movs	r0, #1
    2756:	fa00 f405 	lsl.w	r4, r0, r5
    275a:	460e      	mov	r6, r1
    275c:	2a00      	cmp	r2, #0
    275e:	bf08      	it	eq
    2760:	4808      	ldreq	r0, [pc, #32]	; (2784 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    2762:	d00c      	beq.n	277e <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    2764:	2000      	movs	r0, #0
    2766:	f000 fc97 	bl	3098 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    276a:	00e9      	lsls	r1, r5, #3
    276c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2770:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    2774:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    2778:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    277c:	4802      	ldr	r0, [pc, #8]	; (2788 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    277e:	6004      	str	r4, [r0, #0]
    2780:	bd70      	pop	{r4, r5, r6, pc}
    2782:	0000      	.short	0x0000
    2784:	4001f508 	.word	0x4001f508
    2788:	4001f504 	.word	0x4001f504

0000278c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    278c:	0b41      	lsrs	r1, r0, #13
    278e:	f248 6237 	movw	r2, #34359	; 0x8637
    2792:	4351      	muls	r1, r2
    2794:	0c0a      	lsrs	r2, r1, #16
    2796:	4b09      	ldr	r3, [pc, #36]	; (27bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2798:	0251      	lsls	r1, r2, #9
    279a:	fb02 0203 	mla	r2, r2, r3, r0
    279e:	4808      	ldr	r0, [pc, #32]	; (27c0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    27a0:	4350      	muls	r0, r2
    27a2:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    27a6:	306e      	adds	r0, #110	; 0x6e
    27a8:	0d40      	lsrs	r0, r0, #21
    27aa:	425b      	negs	r3, r3
    27ac:	fb10 f303 	smulbb	r3, r0, r3
    27b0:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    27b4:	bf88      	it	hi
    27b6:	1c49      	addhi	r1, r1, #1
    27b8:	4408      	add	r0, r1
    27ba:	4770      	bx	lr
    27bc:	ffffc2f7 	.word	0xffffc2f7
    27c0:	00010c6f 	.word	0x00010c6f

000027c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    27c4:	0b43      	lsrs	r3, r0, #13
    27c6:	f248 6c37 	movw	ip, #34359	; 0x8637
    27ca:	fb03 f30c 	mul.w	r3, r3, ip
    27ce:	b430      	push	{r4, r5}
    27d0:	0c1b      	lsrs	r3, r3, #16
    27d2:	f8df c044 	ldr.w	ip, [pc, #68]	; 2818 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    27d6:	025c      	lsls	r4, r3, #9
    27d8:	fb03 030c 	mla	r3, r3, ip, r0
    27dc:	480f      	ldr	r0, [pc, #60]	; (281c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    27de:	4358      	muls	r0, r3
    27e0:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    27e4:	eb04 000c 	add.w	r0, r4, ip
    27e8:	f643 5409 	movw	r4, #15625	; 0x3d09
    27ec:	fb1c f404 	smulbb	r4, ip, r4
    27f0:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    27f4:	f643 5508 	movw	r5, #15624	; 0x3d08
    27f8:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    27fc:	442c      	add	r4, r5
    27fe:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2802:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2806:	bf84      	itt	hi
    2808:	f04f 0c00 	movhi.w	ip, #0
    280c:	1c40      	addhi	r0, r0, #1
    280e:	6008      	str	r0, [r1, #0]
    2810:	f882 c000 	strb.w	ip, [r2]
    2814:	bc30      	pop	{r4, r5}
    2816:	4770      	bx	lr
    2818:	ffffc2f7 	.word	0xffffc2f7
    281c:	00010c6f 	.word	0x00010c6f

00002820 <MPSL_IRQ_RTC0_Handler>:
    2820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2824:	4c38      	ldr	r4, [pc, #224]	; (2908 <MPSL_IRQ_RTC0_Handler+0xe8>)
    2826:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    282a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 290c <MPSL_IRQ_RTC0_Handler+0xec>
    282e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2832:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2836:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    283a:	f04f 0500 	mov.w	r5, #0
    283e:	bf1c      	itt	ne
    2840:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    2844:	2800      	cmpne	r0, #0
    2846:	d017      	beq.n	2878 <MPSL_IRQ_RTC0_Handler+0x58>
    2848:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    284c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2850:	482f      	ldr	r0, [pc, #188]	; (2910 <MPSL_IRQ_RTC0_Handler+0xf0>)
    2852:	6800      	ldr	r0, [r0, #0]
    2854:	f8d8 1000 	ldr.w	r1, [r8]
    2858:	eba0 0001 	sub.w	r0, r0, r1
    285c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2860:	2802      	cmp	r0, #2
    2862:	d302      	bcc.n	286a <MPSL_IRQ_RTC0_Handler+0x4a>
    2864:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2868:	d306      	bcc.n	2878 <MPSL_IRQ_RTC0_Handler+0x58>
    286a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    286e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2872:	2004      	movs	r0, #4
    2874:	f7fe ff4c 	bl	1710 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2878:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    287c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2880:	bf1c      	itt	ne
    2882:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    2886:	2800      	cmpne	r0, #0
    2888:	d017      	beq.n	28ba <MPSL_IRQ_RTC0_Handler+0x9a>
    288a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    288e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2892:	4820      	ldr	r0, [pc, #128]	; (2914 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2894:	6800      	ldr	r0, [r0, #0]
    2896:	f8d8 1000 	ldr.w	r1, [r8]
    289a:	eba0 0001 	sub.w	r0, r0, r1
    289e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28a2:	2802      	cmp	r0, #2
    28a4:	d302      	bcc.n	28ac <MPSL_IRQ_RTC0_Handler+0x8c>
    28a6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    28aa:	d306      	bcc.n	28ba <MPSL_IRQ_RTC0_Handler+0x9a>
    28ac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    28b0:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    28b4:	2005      	movs	r0, #5
    28b6:	f7fe ff2b 	bl	1710 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28ba:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28be:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    28c2:	bf1a      	itte	ne
    28c4:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    28c8:	2800      	cmpne	r0, #0
    28ca:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    28ce:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    28d2:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    28d6:	4810      	ldr	r0, [pc, #64]	; (2918 <MPSL_IRQ_RTC0_Handler+0xf8>)
    28d8:	6800      	ldr	r0, [r0, #0]
    28da:	f8d8 1000 	ldr.w	r1, [r8]
    28de:	eba0 0001 	sub.w	r0, r0, r1
    28e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28e6:	2802      	cmp	r0, #2
    28e8:	d304      	bcc.n	28f4 <MPSL_IRQ_RTC0_Handler+0xd4>
    28ea:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    28ee:	bf38      	it	cc
    28f0:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    28f4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    28f8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    28fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2900:	2006      	movs	r0, #6
    2902:	f7fe bf05 	b.w	1710 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2906:	0000      	.short	0x0000
    2908:	4000b000 	.word	0x4000b000
    290c:	4000b504 	.word	0x4000b504
    2910:	4000b540 	.word	0x4000b540
    2914:	4000b544 	.word	0x4000b544
    2918:	4000b548 	.word	0x4000b548

0000291c <MPSL_IRQ_TIMER0_Handler>:
    291c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2920:	4d3a      	ldr	r5, [pc, #232]	; (2a0c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2922:	7828      	ldrb	r0, [r5, #0]
    2924:	2804      	cmp	r0, #4
    2926:	d06c      	beq.n	2a02 <MPSL_IRQ_TIMER0_Handler+0xe6>
    2928:	1ce8      	adds	r0, r5, #3
    292a:	2201      	movs	r2, #1
    292c:	7801      	ldrb	r1, [r0, #0]
    292e:	b159      	cbz	r1, 2948 <MPSL_IRQ_TIMER0_Handler+0x2c>
    2930:	2901      	cmp	r1, #1
    2932:	bf08      	it	eq
    2934:	706a      	strbeq	r2, [r5, #1]
    2936:	d002      	beq.n	293e <MPSL_IRQ_TIMER0_Handler+0x22>
    2938:	7869      	ldrb	r1, [r5, #1]
    293a:	2900      	cmp	r1, #0
    293c:	d05c      	beq.n	29f8 <MPSL_IRQ_TIMER0_Handler+0xdc>
    293e:	2102      	movs	r1, #2
    2940:	7001      	strb	r1, [r0, #0]
    2942:	7840      	ldrb	r0, [r0, #1]
    2944:	f000 fae2 	bl	2f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2948:	4c31      	ldr	r4, [pc, #196]	; (2a10 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    294a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    294e:	f04f 0800 	mov.w	r8, #0
    2952:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    2956:	f44f 7680 	mov.w	r6, #256	; 0x100
    295a:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    295e:	bf1c      	itt	ne
    2960:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    2964:	2800      	cmpne	r0, #0
    2966:	d008      	beq.n	297a <MPSL_IRQ_TIMER0_Handler+0x5e>
    2968:	f04f 0003 	mov.w	r0, #3
    296c:	f000 face 	bl	2f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2970:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2974:	2003      	movs	r0, #3
    2976:	f7fe fecb 	bl	1710 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    297a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    297e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2982:	bf1c      	itt	ne
    2984:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2988:	2800      	cmpne	r0, #0
    298a:	d008      	beq.n	299e <MPSL_IRQ_TIMER0_Handler+0x82>
    298c:	f04f 0002 	mov.w	r0, #2
    2990:	f000 fabc 	bl	2f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2994:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2998:	2002      	movs	r0, #2
    299a:	f7fe feb9 	bl	1710 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    299e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    29a2:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    29a6:	bf1c      	itt	ne
    29a8:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    29ac:	2800      	cmpne	r0, #0
    29ae:	d008      	beq.n	29c2 <MPSL_IRQ_TIMER0_Handler+0xa6>
    29b0:	f04f 0001 	mov.w	r0, #1
    29b4:	f000 faaa 	bl	2f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29b8:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    29bc:	2001      	movs	r0, #1
    29be:	f7fe fea7 	bl	1710 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29c2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    29c6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    29ca:	bf1a      	itte	ne
    29cc:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    29d0:	2800      	cmpne	r0, #0
    29d2:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    29d6:	f04f 0000 	mov.w	r0, #0
    29da:	f000 fa97 	bl	2f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29de:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    29e2:	2004      	movs	r0, #4
    29e4:	7028      	strb	r0, [r5, #0]
    29e6:	f8c5 8008 	str.w	r8, [r5, #8]
    29ea:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    29ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    29f2:	2000      	movs	r0, #0
    29f4:	f7fe be8c 	b.w	1710 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29f8:	f44f 715a 	mov.w	r1, #872	; 0x368
    29fc:	206c      	movs	r0, #108	; 0x6c
    29fe:	f000 feef 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2a06:	2007      	movs	r0, #7
    2a08:	f7fe be82 	b.w	1710 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2a0c:	2000001c 	.word	0x2000001c
    2a10:	40008000 	.word	0x40008000
    2a14:	2201      	movs	r2, #1
    2a16:	0213      	lsls	r3, r2, #8
    2a18:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2a1c:	2000      	movs	r0, #0
    2a1e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    2a22:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    2a26:	f3bf 8f4f 	dsb	sy
    2a2a:	f3bf 8f6f 	isb	sy
    2a2e:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    2a32:	490c      	ldr	r1, [pc, #48]	; (2a64 <MPSL_IRQ_TIMER0_Handler+0x148>)
    2a34:	604a      	str	r2, [r1, #4]
    2a36:	1e43      	subs	r3, r0, #1
    2a38:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2a3c:	4b0a      	ldr	r3, [pc, #40]	; (2a68 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    2a3e:	6018      	str	r0, [r3, #0]
    2a40:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2a44:	1d1b      	adds	r3, r3, #4
    2a46:	6018      	str	r0, [r3, #0]
    2a48:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2a4c:	1d1b      	adds	r3, r3, #4
    2a4e:	6018      	str	r0, [r3, #0]
    2a50:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2a54:	1d1b      	adds	r3, r3, #4
    2a56:	6018      	str	r0, [r3, #0]
    2a58:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2a5c:	610a      	str	r2, [r1, #16]
    2a5e:	4903      	ldr	r1, [pc, #12]	; (2a6c <MPSL_IRQ_TIMER0_Handler+0x150>)
    2a60:	7048      	strb	r0, [r1, #1]
    2a62:	4770      	bx	lr
    2a64:	40008000 	.word	0x40008000
    2a68:	40008540 	.word	0x40008540
    2a6c:	2000001c 	.word	0x2000001c

00002a70 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2a70:	4801      	ldr	r0, [pc, #4]	; (2a78 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2a72:	6800      	ldr	r0, [r0, #0]
    2a74:	4770      	bx	lr
    2a76:	0000      	.short	0x0000
    2a78:	4000b504 	.word	0x4000b504

00002a7c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2a7c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2a80:	4e41      	ldr	r6, [pc, #260]	; (2b88 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    2a82:	4604      	mov	r4, r0
    2a84:	1ef7      	subs	r7, r6, #3
    2a86:	f896 c000 	ldrb.w	ip, [r6]
    2a8a:	68f8      	ldr	r0, [r7, #12]
    2a8c:	f1bc 0f01 	cmp.w	ip, #1
    2a90:	bf04      	itt	eq
    2a92:	42a0      	cmpeq	r0, r4
    2a94:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2a98:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    2a9c:	4a3b      	ldr	r2, [pc, #236]	; (2b8c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    2a9e:	6011      	str	r1, [r2, #0]
    2aa0:	493b      	ldr	r1, [pc, #236]	; (2b90 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    2aa2:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2aa6:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2aaa:	4a3a      	ldr	r2, [pc, #232]	; (2b94 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    2aac:	f04f 0500 	mov.w	r5, #0
    2ab0:	f1bc 0f00 	cmp.w	ip, #0
    2ab4:	d057      	beq.n	2b66 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    2ab6:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2aba:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2abe:	6015      	str	r5, [r2, #0]
    2ac0:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2ac4:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    2ac8:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2acc:	f04f 0801 	mov.w	r8, #1
    2ad0:	2a00      	cmp	r2, #0
    2ad2:	bf04      	itt	eq
    2ad4:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    2ad8:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    2adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2ae0:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2ae4:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2ae8:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2aec:	4a2a      	ldr	r2, [pc, #168]	; (2b98 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    2aee:	f8d2 a000 	ldr.w	sl, [r2]
    2af2:	eba4 0a0a 	sub.w	sl, r4, sl
    2af6:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    2afa:	f1bb 0f02 	cmp.w	fp, #2
    2afe:	d33c      	bcc.n	2b7a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2b00:	f04f 0a02 	mov.w	sl, #2
    2b04:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    2b08:	d237      	bcs.n	2b7a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2b0a:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2b0e:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2b12:	f1bc 0f00 	cmp.w	ip, #0
    2b16:	d005      	beq.n	2b24 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    2b18:	6811      	ldr	r1, [r2, #0]
    2b1a:	1a41      	subs	r1, r0, r1
    2b1c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2b20:	2902      	cmp	r1, #2
    2b22:	d3f9      	bcc.n	2b18 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2b24:	f8c7 8008 	str.w	r8, [r7, #8]
    2b28:	703d      	strb	r5, [r7, #0]
    2b2a:	f7ff ff73 	bl	2a14 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2b2e:	481b      	ldr	r0, [pc, #108]	; (2b9c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2b30:	6005      	str	r5, [r0, #0]
    2b32:	1d00      	adds	r0, r0, #4
    2b34:	f8c0 a000 	str.w	sl, [r0]
    2b38:	4919      	ldr	r1, [pc, #100]	; (2ba0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2b3a:	2004      	movs	r0, #4
    2b3c:	6008      	str	r0, [r1, #0]
    2b3e:	4919      	ldr	r1, [pc, #100]	; (2ba4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2b40:	f8c1 800c 	str.w	r8, [r1, #12]
    2b44:	68ba      	ldr	r2, [r7, #8]
    2b46:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    2b4a:	0181      	lsls	r1, r0, #6
    2b4c:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    2b50:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    2b54:	4a14      	ldr	r2, [pc, #80]	; (2ba8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2b56:	0741      	lsls	r1, r0, #29
    2b58:	6011      	str	r1, [r2, #0]
    2b5a:	60fc      	str	r4, [r7, #12]
    2b5c:	7070      	strb	r0, [r6, #1]
    2b5e:	f886 8000 	strb.w	r8, [r6]
    2b62:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2b66:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2b6a:	4b10      	ldr	r3, [pc, #64]	; (2bac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2b6c:	601d      	str	r5, [r3, #0]
    2b6e:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2b72:	6015      	str	r5, [r2, #0]
    2b74:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2b78:	e7a4      	b.n	2ac4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    2b7a:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    2b7e:	f240 11f1 	movw	r1, #497	; 0x1f1
    2b82:	206c      	movs	r0, #108	; 0x6c
    2b84:	f000 fe2c 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b88:	2000001f 	.word	0x2000001f
    2b8c:	4001f508 	.word	0x4001f508
    2b90:	4000b000 	.word	0x4000b000
    2b94:	4000b544 	.word	0x4000b544
    2b98:	4000b504 	.word	0x4000b504
    2b9c:	40008504 	.word	0x40008504
    2ba0:	40008510 	.word	0x40008510
    2ba4:	40008000 	.word	0x40008000
    2ba8:	4001f504 	.word	0x4001f504
    2bac:	4000b540 	.word	0x4000b540

00002bb0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bb4:	4c2b      	ldr	r4, [pc, #172]	; (2c64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2bb6:	68e1      	ldr	r1, [r4, #12]
    2bb8:	4281      	cmp	r1, r0
    2bba:	bf14      	ite	ne
    2bbc:	2201      	movne	r2, #1
    2bbe:	2200      	moveq	r2, #0
    2bc0:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2c68 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2bc4:	f89c 7000 	ldrb.w	r7, [ip]
    2bc8:	2f02      	cmp	r7, #2
    2bca:	d002      	beq.n	2bd2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    2bcc:	2a00      	cmp	r2, #0
    2bce:	d038      	beq.n	2c42 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2bd0:	e003      	b.n	2bda <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    2bd2:	2a00      	cmp	r2, #0
    2bd4:	bf08      	it	eq
    2bd6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bda:	7862      	ldrb	r2, [r4, #1]
    2bdc:	b382      	cbz	r2, 2c40 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    2bde:	4b23      	ldr	r3, [pc, #140]	; (2c6c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2be0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2be4:	601a      	str	r2, [r3, #0]
    2be6:	4b22      	ldr	r3, [pc, #136]	; (2c70 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2be8:	1395      	asrs	r5, r2, #14
    2bea:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    2bee:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2bf2:	2600      	movs	r6, #0
    2bf4:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2bf8:	4a1e      	ldr	r2, [pc, #120]	; (2c74 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2bfa:	f8d2 8000 	ldr.w	r8, [r2]
    2bfe:	eba0 0808 	sub.w	r8, r0, r8
    2c02:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2c06:	f1b8 0f02 	cmp.w	r8, #2
    2c0a:	d324      	bcc.n	2c56 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2c0c:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2c10:	d221      	bcs.n	2c56 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2c12:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2c16:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2c1a:	b12f      	cbz	r7, 2c28 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2c1c:	6813      	ldr	r3, [r2, #0]
    2c1e:	1acb      	subs	r3, r1, r3
    2c20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2c24:	2b02      	cmp	r3, #2
    2c26:	d3f9      	bcc.n	2c1c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2c28:	4b13      	ldr	r3, [pc, #76]	; (2c78 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2c2a:	2102      	movs	r1, #2
    2c2c:	074a      	lsls	r2, r1, #29
    2c2e:	601a      	str	r2, [r3, #0]
    2c30:	60e0      	str	r0, [r4, #12]
    2c32:	2004      	movs	r0, #4
    2c34:	f88c 0001 	strb.w	r0, [ip, #1]
    2c38:	f88c 1000 	strb.w	r1, [ip]
    2c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c40:	e004      	b.n	2c4c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2c42:	f240 11ff 	movw	r1, #511	; 0x1ff
    2c46:	206c      	movs	r0, #108	; 0x6c
    2c48:	f000 fdca 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c4c:	f240 2103 	movw	r1, #515	; 0x203
    2c50:	206c      	movs	r0, #108	; 0x6c
    2c52:	f000 fdc5 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c56:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2c5a:	f240 210f 	movw	r1, #527	; 0x20f
    2c5e:	206c      	movs	r0, #108	; 0x6c
    2c60:	f000 fdbe 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c64:	2000001c 	.word	0x2000001c
    2c68:	2000001f 	.word	0x2000001f
    2c6c:	4001f508 	.word	0x4001f508
    2c70:	4000b000 	.word	0x4000b000
    2c74:	4000b504 	.word	0x4000b504
    2c78:	4001f504 	.word	0x4001f504

00002c7c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2c7c:	4801      	ldr	r0, [pc, #4]	; (2c84 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2c7e:	68c0      	ldr	r0, [r0, #12]
    2c80:	4770      	bx	lr
    2c82:	0000      	.short	0x0000
    2c84:	2000001c 	.word	0x2000001c

00002c88 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c8c:	4833      	ldr	r0, [pc, #204]	; (2d5c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2c8e:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2c92:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2c96:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2d60 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2c9a:	4a32      	ldr	r2, [pc, #200]	; (2d64 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2c9c:	2100      	movs	r1, #0
    2c9e:	f89c 3000 	ldrb.w	r3, [ip]
    2ca2:	b163      	cbz	r3, 2cbe <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2ca4:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2ca8:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2cac:	6011      	str	r1, [r2, #0]
    2cae:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2cb2:	bf00      	nop
    2cb4:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2cb8:	2201      	movs	r2, #1
    2cba:	b980      	cbnz	r0, 2cde <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2cbc:	e009      	b.n	2cd2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2cbe:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2cc2:	4c29      	ldr	r4, [pc, #164]	; (2d68 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2cc4:	6021      	str	r1, [r4, #0]
    2cc6:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2cca:	6011      	str	r1, [r2, #0]
    2ccc:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2cd0:	e7f0      	b.n	2cb4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2cd2:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2cd6:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2cda:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2cde:	2b02      	cmp	r3, #2
    2ce0:	d004      	beq.n	2cec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2ce2:	f240 211b 	movw	r1, #539	; 0x21b
    2ce6:	206c      	movs	r0, #108	; 0x6c
    2ce8:	f000 fd7a 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cec:	4e1f      	ldr	r6, [pc, #124]	; (2d6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2cee:	6830      	ldr	r0, [r6, #0]
    2cf0:	4c1f      	ldr	r4, [pc, #124]	; (2d70 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2cf2:	1cc0      	adds	r0, r0, #3
    2cf4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cf8:	68e3      	ldr	r3, [r4, #12]
    2cfa:	4d1e      	ldr	r5, [pc, #120]	; (2d74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2cfc:	4298      	cmp	r0, r3
    2cfe:	d00b      	beq.n	2d18 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2d00:	6837      	ldr	r7, [r6, #0]
    2d02:	1bdf      	subs	r7, r3, r7
    2d04:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2d08:	2f04      	cmp	r7, #4
    2d0a:	d305      	bcc.n	2d18 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2d0c:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2d10:	d202      	bcs.n	2d18 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2d12:	f7ff feb3 	bl	2a7c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2d16:	e01b      	b.n	2d50 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2d18:	6830      	ldr	r0, [r6, #0]
    2d1a:	1a18      	subs	r0, r3, r0
    2d1c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d20:	2802      	cmp	r0, #2
    2d22:	d313      	bcc.n	2d4c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2d24:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2d28:	d210      	bcs.n	2d4c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2d2a:	4b13      	ldr	r3, [pc, #76]	; (2d78 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2d2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2d30:	6018      	str	r0, [r3, #0]
    2d32:	60a2      	str	r2, [r4, #8]
    2d34:	7021      	strb	r1, [r4, #0]
    2d36:	606a      	str	r2, [r5, #4]
    2d38:	60ea      	str	r2, [r5, #12]
    2d3a:	0040      	lsls	r0, r0, #1
    2d3c:	1f19      	subs	r1, r3, #4
    2d3e:	6008      	str	r0, [r1, #0]
    2d40:	2004      	movs	r0, #4
    2d42:	f88c 0001 	strb.w	r0, [ip, #1]
    2d46:	f88c 2000 	strb.w	r2, [ip]
    2d4a:	e001      	b.n	2d50 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2d4c:	60a2      	str	r2, [r4, #8]
    2d4e:	7021      	strb	r1, [r4, #0]
    2d50:	68a0      	ldr	r0, [r4, #8]
    2d52:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d5a:	0000      	.short	0x0000
    2d5c:	4000b000 	.word	0x4000b000
    2d60:	2000001f 	.word	0x2000001f
    2d64:	4000b544 	.word	0x4000b544
    2d68:	4000b540 	.word	0x4000b540
    2d6c:	4000b504 	.word	0x4000b504
    2d70:	2000001c 	.word	0x2000001c
    2d74:	40008000 	.word	0x40008000
    2d78:	4001f508 	.word	0x4001f508

00002d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d80:	f8df c174 	ldr.w	ip, [pc, #372]	; 2ef8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2d84:	2701      	movs	r7, #1
    2d86:	f04f 0800 	mov.w	r8, #0
    2d8a:	f89c 5000 	ldrb.w	r5, [ip]
    2d8e:	f89c c001 	ldrb.w	ip, [ip, #1]
    2d92:	2807      	cmp	r0, #7
    2d94:	d27e      	bcs.n	2e94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2d96:	e8df f000 	tbb	[pc, r0]
    2d9a:	0404      	.short	0x0404
    2d9c:	6a6a0404 	.word	0x6a6a0404
    2da0:	006a      	.short	0x006a
    2da2:	4c56      	ldr	r4, [pc, #344]	; (2efc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2da4:	68e6      	ldr	r6, [r4, #12]
    2da6:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2daa:	bf04      	itt	eq
    2dac:	7864      	ldrbeq	r4, [r4, #1]
    2dae:	2c00      	cmpeq	r4, #0
    2db0:	d002      	beq.n	2db8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2db2:	2d02      	cmp	r5, #2
    2db4:	d005      	beq.n	2dc2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2db6:	e03c      	b.n	2e32 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2db8:	f240 214e 	movw	r1, #590	; 0x24e
    2dbc:	206c      	movs	r0, #108	; 0x6c
    2dbe:	f000 fd0f 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dc2:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2dc6:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2dca:	f1ac 0404 	sub.w	r4, ip, #4
    2dce:	0624      	lsls	r4, r4, #24
    2dd0:	0da4      	lsrs	r4, r4, #22
    2dd2:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2dd6:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2dda:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2dde:	2400      	movs	r4, #0
    2de0:	2d01      	cmp	r5, #1
    2de2:	d002      	beq.n	2dea <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2de4:	2d02      	cmp	r5, #2
    2de6:	d011      	beq.n	2e0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2de8:	e020      	b.n	2e2c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2dea:	f1bc 0f04 	cmp.w	ip, #4
    2dee:	d205      	bcs.n	2dfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2df0:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2df4:	f1ba 0f00 	cmp.w	sl, #0
    2df8:	d118      	bne.n	2e2c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2dfa:	e004      	b.n	2e06 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2dfc:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2e00:	f1ba 0f00 	cmp.w	sl, #0
    2e04:	d112      	bne.n	2e2c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2e06:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2e0a:	e00f      	b.n	2e2c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2e0c:	f1bc 0f04 	cmp.w	ip, #4
    2e10:	d205      	bcs.n	2e1e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2e12:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2e16:	f1ba 0f00 	cmp.w	sl, #0
    2e1a:	d107      	bne.n	2e2c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2e1c:	e004      	b.n	2e28 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2e1e:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2e22:	f1ba 0f00 	cmp.w	sl, #0
    2e26:	d101      	bne.n	2e2c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2e28:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2e2c:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2e30:	d1d5      	bne.n	2dde <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2e32:	4c33      	ldr	r4, [pc, #204]	; (2f00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2e34:	f100 0c10 	add.w	ip, r0, #16
    2e38:	fa07 fc0c 	lsl.w	ip, r7, ip
    2e3c:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2e40:	0080      	lsls	r0, r0, #2
    2e42:	4420      	add	r0, r4
    2e44:	b152      	cbz	r2, 2e5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2e46:	6407      	str	r7, [r0, #64]	; 0x40
    2e48:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2e4c:	1b8d      	subs	r5, r1, r6
    2e4e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2e52:	42aa      	cmp	r2, r5
    2e54:	bf98      	it	ls
    2e56:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2e5a:	d243      	bcs.n	2ee4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2e5c:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e60:	2b01      	cmp	r3, #1
    2e62:	bf08      	it	eq
    2e64:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2e68:	2001      	movs	r0, #1
    2e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e6e:	b135      	cbz	r5, 2e7e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2e70:	4584      	cmp	ip, r0
    2e72:	d104      	bne.n	2e7e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2e74:	f240 2171 	movw	r1, #625	; 0x271
    2e78:	206c      	movs	r0, #108	; 0x6c
    2e7a:	f000 fcb1 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e7e:	1f00      	subs	r0, r0, #4
    2e80:	b2c0      	uxtb	r0, r0
    2e82:	2b01      	cmp	r3, #1
    2e84:	bf0c      	ite	eq
    2e86:	2401      	moveq	r4, #1
    2e88:	2400      	movne	r4, #0
    2e8a:	2803      	cmp	r0, #3
    2e8c:	d306      	bcc.n	2e9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2e8e:	f240 114b 	movw	r1, #331	; 0x14b
    2e92:	e000      	b.n	2e96 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2e94:	e02b      	b.n	2eee <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2e96:	206c      	movs	r0, #108	; 0x6c
    2e98:	f000 fca2 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e9c:	f8df c064 	ldr.w	ip, [pc, #100]	; 2f04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2ea0:	f100 0310 	add.w	r3, r0, #16
    2ea4:	fa07 f303 	lsl.w	r3, r7, r3
    2ea8:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2eac:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2eb0:	0080      	lsls	r0, r0, #2
    2eb2:	4460      	add	r0, ip
    2eb4:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2eb8:	b14a      	cbz	r2, 2ece <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2eba:	4d13      	ldr	r5, [pc, #76]	; (2f08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2ebc:	682e      	ldr	r6, [r5, #0]
    2ebe:	1b8d      	subs	r5, r1, r6
    2ec0:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2ec4:	42aa      	cmp	r2, r5
    2ec6:	bf98      	it	ls
    2ec8:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2ecc:	d20a      	bcs.n	2ee4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2ece:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2ed2:	2c00      	cmp	r4, #0
    2ed4:	bf18      	it	ne
    2ed6:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2eda:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2ede:	2001      	movs	r0, #1
    2ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ee4:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2ee8:	2000      	movs	r0, #0
    2eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2eee:	f240 2176 	movw	r1, #630	; 0x276
    2ef2:	206c      	movs	r0, #108	; 0x6c
    2ef4:	f000 fc74 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ef8:	2000001f 	.word	0x2000001f
    2efc:	2000001c 	.word	0x2000001c
    2f00:	40008000 	.word	0x40008000
    2f04:	4000b000 	.word	0x4000b000
    2f08:	4000b504 	.word	0x4000b504

00002f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f0e:	2701      	movs	r7, #1
    2f10:	2400      	movs	r4, #0
    2f12:	2807      	cmp	r0, #7
    2f14:	d24c      	bcs.n	2fb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    2f16:	e8df f000 	tbb	[pc, r0]
    2f1a:	0404      	.short	0x0404
    2f1c:	16160404 	.word	0x16160404
    2f20:	0016      	.short	0x0016
    2f22:	4a26      	ldr	r2, [pc, #152]	; (2fbc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2f24:	f100 0110 	add.w	r1, r0, #16
    2f28:	fa07 f101 	lsl.w	r1, r7, r1
    2f2c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2f30:	0081      	lsls	r1, r0, #2
    2f32:	4411      	add	r1, r2
    2f34:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2f38:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2f3c:	4920      	ldr	r1, [pc, #128]	; (2fc0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2f3e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2f42:	9000      	str	r0, [sp, #0]
    2f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f46:	4d1f      	ldr	r5, [pc, #124]	; (2fc4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    2f48:	1f01      	subs	r1, r0, #4
    2f4a:	b2ce      	uxtb	r6, r1
    2f4c:	7829      	ldrb	r1, [r5, #0]
    2f4e:	b179      	cbz	r1, 2f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2f50:	786a      	ldrb	r2, [r5, #1]
    2f52:	4282      	cmp	r2, r0
    2f54:	d10c      	bne.n	2f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2f56:	4a1c      	ldr	r2, [pc, #112]	; (2fc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    2f58:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2f5c:	6010      	str	r0, [r2, #0]
    2f5e:	2901      	cmp	r1, #1
    2f60:	bf08      	it	eq
    2f62:	f7ff fd57 	bleq	2a14 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2f66:	702c      	strb	r4, [r5, #0]
    2f68:	4918      	ldr	r1, [pc, #96]	; (2fcc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2f6a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2f6e:	60c8      	str	r0, [r1, #12]
    2f70:	f106 0010 	add.w	r0, r6, #16
    2f74:	fa07 f100 	lsl.w	r1, r7, r0
    2f78:	4815      	ldr	r0, [pc, #84]	; (2fd0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2f7a:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2f7e:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2f82:	00b0      	lsls	r0, r6, #2
    2f84:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2f88:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2f8c:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    2f90:	4a10      	ldr	r2, [pc, #64]	; (2fd4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2f92:	6812      	ldr	r2, [r2, #0]
    2f94:	1a89      	subs	r1, r1, r2
    2f96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2f9a:	2902      	cmp	r1, #2
    2f9c:	bf24      	itt	cs
    2f9e:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    2fa2:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    2fa6:	480c      	ldr	r0, [pc, #48]	; (2fd8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2fa8:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2fac:	9000      	str	r0, [sp, #0]
    2fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fb0:	f240 21ef 	movw	r1, #751	; 0x2ef
    2fb4:	206c      	movs	r0, #108	; 0x6c
    2fb6:	f000 fc13 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2fba:	0000      	.short	0x0000
    2fbc:	40008000 	.word	0x40008000
    2fc0:	40008140 	.word	0x40008140
    2fc4:	2000001f 	.word	0x2000001f
    2fc8:	4001f508 	.word	0x4001f508
    2fcc:	2000001c 	.word	0x2000001c
    2fd0:	4000b000 	.word	0x4000b000
    2fd4:	4000b504 	.word	0x4000b504
    2fd8:	4000b140 	.word	0x4000b140

00002fdc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2fdc:	491e      	ldr	r1, [pc, #120]	; (3058 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    2fde:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2fe2:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2fe6:	481d      	ldr	r0, [pc, #116]	; (305c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    2fe8:	4a1d      	ldr	r2, [pc, #116]	; (3060 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2fea:	f890 c000 	ldrb.w	ip, [r0]
    2fee:	2000      	movs	r0, #0
    2ff0:	f1bc 0f00 	cmp.w	ip, #0
    2ff4:	d00a      	beq.n	300c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    2ff6:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2ffa:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2ffe:	6010      	str	r0, [r2, #0]
    3000:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3004:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    3008:	b981      	cbnz	r1, 302c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    300a:	e009      	b.n	3020 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    300c:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3010:	4b14      	ldr	r3, [pc, #80]	; (3064 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    3012:	6018      	str	r0, [r3, #0]
    3014:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3018:	6010      	str	r0, [r2, #0]
    301a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    301e:	e7f1      	b.n	3004 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3020:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3024:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3028:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    302c:	490e      	ldr	r1, [pc, #56]	; (3068 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    302e:	f04f 32ff 	mov.w	r2, #4294967295
    3032:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3036:	4a0d      	ldr	r2, [pc, #52]	; (306c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    3038:	6010      	str	r0, [r2, #0]
    303a:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    303e:	1d12      	adds	r2, r2, #4
    3040:	6010      	str	r0, [r2, #0]
    3042:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3046:	1d12      	adds	r2, r2, #4
    3048:	6010      	str	r0, [r2, #0]
    304a:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    304e:	1d12      	adds	r2, r2, #4
    3050:	6010      	str	r0, [r2, #0]
    3052:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    3056:	4770      	bx	lr
    3058:	4000b000 	.word	0x4000b000
    305c:	2000001f 	.word	0x2000001f
    3060:	4000b544 	.word	0x4000b544
    3064:	4000b540 	.word	0x4000b540
    3068:	40008000 	.word	0x40008000
    306c:	40008540 	.word	0x40008540

00003070 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3070:	4808      	ldr	r0, [pc, #32]	; (3094 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3072:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3076:	2800      	cmp	r0, #0
    3078:	bfb8      	it	lt
    307a:	4770      	bxlt	lr
    307c:	f000 011f 	and.w	r1, r0, #31
    3080:	2201      	movs	r2, #1
    3082:	fa02 f101 	lsl.w	r1, r2, r1
    3086:	0940      	lsrs	r0, r0, #5
    3088:	0080      	lsls	r0, r0, #2
    308a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    308e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3092:	4770      	bx	lr
    3094:	2000001c 	.word	0x2000001c

00003098 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3098:	b510      	push	{r4, lr}
    309a:	2807      	cmp	r0, #7
    309c:	d20d      	bcs.n	30ba <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    309e:	e8df f000 	tbb	[pc, r0]
    30a2:	0404      	.short	0x0404
    30a4:	06060404 	.word	0x06060404
    30a8:	0006      	.short	0x0006
    30aa:	4906      	ldr	r1, [pc, #24]	; (30c4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    30ac:	e002      	b.n	30b4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    30ae:	1f00      	subs	r0, r0, #4
    30b0:	4905      	ldr	r1, [pc, #20]	; (30c8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    30b2:	b2c0      	uxtb	r0, r0
    30b4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    30b8:	bd10      	pop	{r4, pc}
    30ba:	f240 219a 	movw	r1, #666	; 0x29a
    30be:	206c      	movs	r0, #108	; 0x6c
    30c0:	f000 fb8e 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30c4:	40008140 	.word	0x40008140
    30c8:	4000b140 	.word	0x4000b140

000030cc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    30cc:	b570      	push	{r4, r5, r6, lr}
    30ce:	4819      	ldr	r0, [pc, #100]	; (3134 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    30d0:	2400      	movs	r4, #0
    30d2:	2104      	movs	r1, #4
    30d4:	7004      	strb	r4, [r0, #0]
    30d6:	1ec0      	subs	r0, r0, #3
    30d8:	7001      	strb	r1, [r0, #0]
    30da:	0589      	lsls	r1, r1, #22
    30dc:	60c1      	str	r1, [r0, #12]
    30de:	f7ff fc99 	bl	2a14 <MPSL_IRQ_TIMER0_Handler+0xf8>
    30e2:	2501      	movs	r5, #1
    30e4:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    30e8:	02eb      	lsls	r3, r5, #11
    30ea:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    30ee:	f3bf 8f4f 	dsb	sy
    30f2:	f3bf 8f6f 	isb	sy
    30f6:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    30fa:	4a0f      	ldr	r2, [pc, #60]	; (3138 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    30fc:	6055      	str	r5, [r2, #4]
    30fe:	6095      	str	r5, [r2, #8]
    3100:	480e      	ldr	r0, [pc, #56]	; (313c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    3102:	6801      	ldr	r1, [r0, #0]
    3104:	2900      	cmp	r1, #0
    3106:	d1fc      	bne.n	3102 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    3108:	1e48      	subs	r0, r1, #1
    310a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    310e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    3112:	480b      	ldr	r0, [pc, #44]	; (3140 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    3114:	6004      	str	r4, [r0, #0]
    3116:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    311a:	1d00      	adds	r0, r0, #4
    311c:	6004      	str	r4, [r0, #0]
    311e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3122:	1d00      	adds	r0, r0, #4
    3124:	6004      	str	r4, [r0, #0]
    3126:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    312a:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    312e:	6015      	str	r5, [r2, #0]
    3130:	bd70      	pop	{r4, r5, r6, pc}
    3132:	0000      	.short	0x0000
    3134:	2000001f 	.word	0x2000001f
    3138:	4000b000 	.word	0x4000b000
    313c:	4000b504 	.word	0x4000b504
    3140:	4000b540 	.word	0x4000b540

00003144 <MPSL_IRQ_CLOCK_Handler>:
    3144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3148:	4c16      	ldr	r4, [pc, #88]	; (31a4 <MPSL_IRQ_CLOCK_Handler+0x60>)
    314a:	7a60      	ldrb	r0, [r4, #9]
    314c:	2800      	cmp	r0, #0
    314e:	d027      	beq.n	31a0 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3150:	f44f 7180 	mov.w	r1, #256	; 0x100
    3154:	058d      	lsls	r5, r1, #22
    3156:	4628      	mov	r0, r5
    3158:	f009 f909 	bl	c36e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    315c:	4680      	mov	r8, r0
    315e:	f44f 7182 	mov.w	r1, #260	; 0x104
    3162:	4628      	mov	r0, r5
    3164:	f009 f903 	bl	c36e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3168:	2600      	movs	r6, #0
    316a:	4607      	mov	r7, r0
    316c:	f1b8 0f00 	cmp.w	r8, #0
    3170:	d009      	beq.n	3186 <MPSL_IRQ_CLOCK_Handler+0x42>
    3172:	2001      	movs	r0, #1
    3174:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3178:	7920      	ldrb	r0, [r4, #4]
    317a:	b120      	cbz	r0, 3186 <MPSL_IRQ_CLOCK_Handler+0x42>
    317c:	7126      	strb	r6, [r4, #4]
    317e:	69e0      	ldr	r0, [r4, #28]
    3180:	b108      	cbz	r0, 3186 <MPSL_IRQ_CLOCK_Handler+0x42>
    3182:	4780      	blx	r0
    3184:	61e6      	str	r6, [r4, #28]
    3186:	b137      	cbz	r7, 3196 <MPSL_IRQ_CLOCK_Handler+0x52>
    3188:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    318c:	2002      	movs	r0, #2
    318e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3192:	f000 fa6d 	bl	3670 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3196:	4640      	mov	r0, r8
    3198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    319c:	f000 b85a 	b.w	3254 <MPSL_IRQ_CLOCK_Handler+0x110>
    31a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31a4:	2000002c 	.word	0x2000002c
    31a8:	b510      	push	{r4, lr}
    31aa:	f009 f98a 	bl	c4c2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    31ae:	b930      	cbnz	r0, 31be <MPSL_IRQ_CLOCK_Handler+0x7a>
    31b0:	f009 f9a8 	bl	c504 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    31b4:	b918      	cbnz	r0, 31be <MPSL_IRQ_CLOCK_Handler+0x7a>
    31b6:	f009 f9db 	bl	c570 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    31ba:	2800      	cmp	r0, #0
    31bc:	d002      	beq.n	31c4 <MPSL_IRQ_CLOCK_Handler+0x80>
    31be:	4902      	ldr	r1, [pc, #8]	; (31c8 <MPSL_IRQ_CLOCK_Handler+0x84>)
    31c0:	2002      	movs	r0, #2
    31c2:	6008      	str	r0, [r1, #0]
    31c4:	bd10      	pop	{r4, pc}
    31c6:	0000      	.short	0x0000
    31c8:	40000c34 	.word	0x40000c34
    31cc:	b570      	push	{r4, r5, r6, lr}
    31ce:	f000 f987 	bl	34e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    31d2:	f000 faa1 	bl	3718 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    31d6:	4c09      	ldr	r4, [pc, #36]	; (31fc <MPSL_IRQ_CLOCK_Handler+0xb8>)
    31d8:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    31dc:	b130      	cbz	r0, 31ec <MPSL_IRQ_CLOCK_Handler+0xa8>
    31de:	f7ff ffe3 	bl	31a8 <MPSL_IRQ_CLOCK_Handler+0x64>
    31e2:	2001      	movs	r0, #1
    31e4:	6128      	str	r0, [r5, #16]
    31e6:	2004      	movs	r0, #4
    31e8:	72a0      	strb	r0, [r4, #10]
    31ea:	e004      	b.n	31f6 <MPSL_IRQ_CLOCK_Handler+0xb2>
    31ec:	2003      	movs	r0, #3
    31ee:	72a0      	strb	r0, [r4, #10]
    31f0:	2001      	movs	r0, #1
    31f2:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    31f6:	2000      	movs	r0, #0
    31f8:	71e0      	strb	r0, [r4, #7]
    31fa:	bd70      	pop	{r4, r5, r6, pc}
    31fc:	2000002c 	.word	0x2000002c
    3200:	b570      	push	{r4, r5, r6, lr}
    3202:	4c13      	ldr	r4, [pc, #76]	; (3250 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3204:	79a0      	ldrb	r0, [r4, #6]
    3206:	b1f0      	cbz	r0, 3246 <MPSL_IRQ_CLOCK_Handler+0x102>
    3208:	2801      	cmp	r0, #1
    320a:	d003      	beq.n	3214 <MPSL_IRQ_CLOCK_Handler+0xd0>
    320c:	79e1      	ldrb	r1, [r4, #7]
    320e:	1e40      	subs	r0, r0, #1
    3210:	4281      	cmp	r1, r0
    3212:	da18      	bge.n	3246 <MPSL_IRQ_CLOCK_Handler+0x102>
    3214:	f000 fa80 	bl	3718 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3218:	4605      	mov	r5, r0
    321a:	f000 fb51 	bl	38c0 <mpsl_temperature_get>
    321e:	79a1      	ldrb	r1, [r4, #6]
    3220:	2901      	cmp	r1, #1
    3222:	d902      	bls.n	322a <MPSL_IRQ_CLOCK_Handler+0xe6>
    3224:	79e1      	ldrb	r1, [r4, #7]
    3226:	1c49      	adds	r1, r1, #1
    3228:	71e1      	strb	r1, [r4, #7]
    322a:	b10d      	cbz	r5, 3230 <MPSL_IRQ_CLOCK_Handler+0xec>
    322c:	6961      	ldr	r1, [r4, #20]
    322e:	e000      	b.n	3232 <MPSL_IRQ_CLOCK_Handler+0xee>
    3230:	6921      	ldr	r1, [r4, #16]
    3232:	1a41      	subs	r1, r0, r1
    3234:	2902      	cmp	r1, #2
    3236:	da02      	bge.n	323e <MPSL_IRQ_CLOCK_Handler+0xfa>
    3238:	f111 0f02 	cmn.w	r1, #2
    323c:	dc07      	bgt.n	324e <MPSL_IRQ_CLOCK_Handler+0x10a>
    323e:	b10d      	cbz	r5, 3244 <MPSL_IRQ_CLOCK_Handler+0x100>
    3240:	6160      	str	r0, [r4, #20]
    3242:	e000      	b.n	3246 <MPSL_IRQ_CLOCK_Handler+0x102>
    3244:	6120      	str	r0, [r4, #16]
    3246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    324a:	f7ff bfbf 	b.w	31cc <MPSL_IRQ_CLOCK_Handler+0x88>
    324e:	bd70      	pop	{r4, r5, r6, pc}
    3250:	2000002c 	.word	0x2000002c
    3254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3258:	4606      	mov	r6, r0
    325a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    325e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3262:	4628      	mov	r0, r5
    3264:	f009 f883 	bl	c36e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3268:	4680      	mov	r8, r0
    326a:	f44f 7188 	mov.w	r1, #272	; 0x110
    326e:	4628      	mov	r0, r5
    3270:	f009 f87d 	bl	c36e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3274:	4c27      	ldr	r4, [pc, #156]	; (3314 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3276:	4682      	mov	sl, r0
    3278:	7827      	ldrb	r7, [r4, #0]
    327a:	f104 0008 	add.w	r0, r4, #8
    327e:	f009 f8ea 	bl	c456 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3282:	b110      	cbz	r0, 328a <MPSL_IRQ_CLOCK_Handler+0x146>
    3284:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3288:	e016      	b.n	32b8 <MPSL_IRQ_CLOCK_Handler+0x174>
    328a:	f04f 0901 	mov.w	r9, #1
    328e:	b146      	cbz	r6, 32a2 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3290:	7aa0      	ldrb	r0, [r4, #10]
    3292:	2803      	cmp	r0, #3
    3294:	d105      	bne.n	32a2 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3296:	2004      	movs	r0, #4
    3298:	72a0      	strb	r0, [r4, #10]
    329a:	f7ff ff85 	bl	31a8 <MPSL_IRQ_CLOCK_Handler+0x64>
    329e:	f8c5 9010 	str.w	r9, [r5, #16]
    32a2:	2600      	movs	r6, #0
    32a4:	f1b8 0f00 	cmp.w	r8, #0
    32a8:	d018      	beq.n	32dc <MPSL_IRQ_CLOCK_Handler+0x198>
    32aa:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    32ae:	7aa0      	ldrb	r0, [r4, #10]
    32b0:	2804      	cmp	r0, #4
    32b2:	d004      	beq.n	32be <MPSL_IRQ_CLOCK_Handler+0x17a>
    32b4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    32b8:	206d      	movs	r0, #109	; 0x6d
    32ba:	f000 fa91 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32be:	f009 f900 	bl	c4c2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    32c2:	b928      	cbnz	r0, 32d0 <MPSL_IRQ_CLOCK_Handler+0x18c>
    32c4:	f009 f91e 	bl	c504 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    32c8:	b910      	cbnz	r0, 32d0 <MPSL_IRQ_CLOCK_Handler+0x18c>
    32ca:	f009 f951 	bl	c570 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    32ce:	b108      	cbz	r0, 32d4 <MPSL_IRQ_CLOCK_Handler+0x190>
    32d0:	4811      	ldr	r0, [pc, #68]	; (3318 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    32d2:	6006      	str	r6, [r0, #0]
    32d4:	2002      	movs	r0, #2
    32d6:	72a0      	strb	r0, [r4, #10]
    32d8:	f000 f8e6 	bl	34a8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    32dc:	f1ba 0f00 	cmp.w	sl, #0
    32e0:	d008      	beq.n	32f4 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    32e2:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    32e6:	7aa0      	ldrb	r0, [r4, #10]
    32e8:	2802      	cmp	r0, #2
    32ea:	d101      	bne.n	32f0 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    32ec:	f7ff ff88 	bl	3200 <MPSL_IRQ_CLOCK_Handler+0xbc>
    32f0:	f8c5 9014 	str.w	r9, [r5, #20]
    32f4:	b13f      	cbz	r7, 3306 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    32f6:	7026      	strb	r6, [r4, #0]
    32f8:	7aa0      	ldrb	r0, [r4, #10]
    32fa:	2802      	cmp	r0, #2
    32fc:	d101      	bne.n	3302 <MPSL_IRQ_CLOCK_Handler+0x1be>
    32fe:	f7ff ff65 	bl	31cc <MPSL_IRQ_CLOCK_Handler+0x88>
    3302:	f000 f8d1 	bl	34a8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3306:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    330a:	4802      	ldr	r0, [pc, #8]	; (3314 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    330c:	3008      	adds	r0, #8
    330e:	f009 b8b9 	b.w	c484 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3312:	0000      	.short	0x0000
    3314:	2000002c 	.word	0x2000002c
    3318:	40000c34 	.word	0x40000c34
    331c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3320:	4c5c      	ldr	r4, [pc, #368]	; (3494 <MPSL_IRQ_CLOCK_Handler+0x350>)
    3322:	f04f 0800 	mov.w	r8, #0
    3326:	4606      	mov	r6, r0
    3328:	f8c4 8018 	str.w	r8, [r4, #24]
    332c:	7843      	ldrb	r3, [r0, #1]
    332e:	7882      	ldrb	r2, [r0, #2]
    3330:	7800      	ldrb	r0, [r0, #0]
    3332:	72e0      	strb	r0, [r4, #11]
    3334:	7163      	strb	r3, [r4, #5]
    3336:	2701      	movs	r7, #1
    3338:	71a2      	strb	r2, [r4, #6]
    333a:	07bd      	lsls	r5, r7, #30
    333c:	f884 8007 	strb.w	r8, [r4, #7]
    3340:	2805      	cmp	r0, #5
    3342:	d224      	bcs.n	338e <MPSL_IRQ_CLOCK_Handler+0x24a>
    3344:	e8df f000 	tbb	[pc, r0]
    3348:	1f05030f 	.word	0x1f05030f
    334c:	0021      	.short	0x0021
    334e:	61a7      	str	r7, [r4, #24]
    3350:	e009      	b.n	3366 <MPSL_IRQ_CLOCK_Handler+0x222>
    3352:	f000 f8c5 	bl	34e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3356:	2101      	movs	r1, #1
    3358:	4628      	mov	r0, r5
    335a:	f009 f80d 	bl	c378 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    335e:	2800      	cmp	r0, #0
    3360:	d0f9      	beq.n	3356 <MPSL_IRQ_CLOCK_Handler+0x212>
    3362:	2002      	movs	r0, #2
    3364:	61a0      	str	r0, [r4, #24]
    3366:	f009 f833 	bl	c3d0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    336a:	b1b0      	cbz	r0, 339a <MPSL_IRQ_CLOCK_Handler+0x256>
    336c:	f000 f9ee 	bl	374c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3370:	7e21      	ldrb	r1, [r4, #24]
    3372:	f001 0103 	and.w	r1, r1, #3
    3376:	4288      	cmp	r0, r1
    3378:	d10f      	bne.n	339a <MPSL_IRQ_CLOCK_Handler+0x256>
    337a:	79b0      	ldrb	r0, [r6, #6]
    337c:	b150      	cbz	r0, 3394 <MPSL_IRQ_CLOCK_Handler+0x250>
    337e:	2002      	movs	r0, #2
    3380:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3384:	e06a      	b.n	345c <MPSL_IRQ_CLOCK_Handler+0x318>
    3386:	4844      	ldr	r0, [pc, #272]	; (3498 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3388:	e7ec      	b.n	3364 <MPSL_IRQ_CLOCK_Handler+0x220>
    338a:	4844      	ldr	r0, [pc, #272]	; (349c <MPSL_IRQ_CLOCK_Handler+0x358>)
    338c:	e7ea      	b.n	3364 <MPSL_IRQ_CLOCK_Handler+0x220>
    338e:	f44f 714c 	mov.w	r1, #816	; 0x330
    3392:	e049      	b.n	3428 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3394:	f000 f9ae 	bl	36f4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3398:	e060      	b.n	345c <MPSL_IRQ_CLOCK_Handler+0x318>
    339a:	60ef      	str	r7, [r5, #12]
    339c:	f44f 7a82 	mov.w	sl, #260	; 0x104
    33a0:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    33a4:	69a0      	ldr	r0, [r4, #24]
    33a6:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    33aa:	f009 f876 	bl	c49a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    33ae:	b940      	cbnz	r0, 33c2 <MPSL_IRQ_CLOCK_Handler+0x27e>
    33b0:	f009 f87d 	bl	c4ae <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    33b4:	b928      	cbnz	r0, 33c2 <MPSL_IRQ_CLOCK_Handler+0x27e>
    33b6:	f009 f891 	bl	c4dc <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    33ba:	b910      	cbnz	r0, 33c2 <MPSL_IRQ_CLOCK_Handler+0x27e>
    33bc:	f009 f8a2 	bl	c504 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    33c0:	b138      	cbz	r0, 33d2 <MPSL_IRQ_CLOCK_Handler+0x28e>
    33c2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    33c6:	4836      	ldr	r0, [pc, #216]	; (34a0 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    33c8:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    33cc:	f3c1 3142 	ubfx	r1, r1, #13, #3
    33d0:	6001      	str	r1, [r0, #0]
    33d2:	f009 f862 	bl	c49a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    33d6:	b940      	cbnz	r0, 33ea <MPSL_IRQ_CLOCK_Handler+0x2a6>
    33d8:	f009 f869 	bl	c4ae <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    33dc:	b928      	cbnz	r0, 33ea <MPSL_IRQ_CLOCK_Handler+0x2a6>
    33de:	f009 f87d 	bl	c4dc <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    33e2:	b910      	cbnz	r0, 33ea <MPSL_IRQ_CLOCK_Handler+0x2a6>
    33e4:	f009 f88e 	bl	c504 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    33e8:	b110      	cbz	r0, 33f0 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    33ea:	482d      	ldr	r0, [pc, #180]	; (34a0 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    33ec:	3010      	adds	r0, #16
    33ee:	6007      	str	r7, [r0, #0]
    33f0:	60af      	str	r7, [r5, #8]
    33f2:	2002      	movs	r0, #2
    33f4:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    33f8:	79b0      	ldrb	r0, [r6, #6]
    33fa:	bb78      	cbnz	r0, 345c <MPSL_IRQ_CLOCK_Handler+0x318>
    33fc:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3400:	f010 0f02 	tst.w	r0, #2
    3404:	d00e      	beq.n	3424 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    3406:	f8df 909c 	ldr.w	r9, [pc, #156]	; 34a4 <MPSL_IRQ_CLOCK_Handler+0x360>
    340a:	f8d9 1000 	ldr.w	r1, [r9]
    340e:	43c9      	mvns	r1, r1
    3410:	f341 1700 	sbfx	r7, r1, #4, #1
    3414:	f8d9 1000 	ldr.w	r1, [r9]
    3418:	f041 0110 	orr.w	r1, r1, #16
    341c:	f8c9 1000 	str.w	r1, [r9]
    3420:	1c7f      	adds	r7, r7, #1
    3422:	e007      	b.n	3434 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3424:	f240 21f1 	movw	r1, #753	; 0x2f1
    3428:	206d      	movs	r0, #109	; 0x6d
    342a:	f000 f9d9 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    342e:	bf00      	nop
    3430:	f000 fafc 	bl	3a2c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3434:	4651      	mov	r1, sl
    3436:	4628      	mov	r0, r5
    3438:	f008 ff99 	bl	c36e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    343c:	2800      	cmp	r0, #0
    343e:	d0f7      	beq.n	3430 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    3440:	f000 f958 	bl	36f4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3444:	b92f      	cbnz	r7, 3452 <MPSL_IRQ_CLOCK_Handler+0x30e>
    3446:	f8d9 1000 	ldr.w	r1, [r9]
    344a:	f021 0110 	bic.w	r1, r1, #16
    344e:	f8c9 1000 	str.w	r1, [r9]
    3452:	2002      	movs	r0, #2
    3454:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3458:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    345c:	79a0      	ldrb	r0, [r4, #6]
    345e:	b170      	cbz	r0, 347e <MPSL_IRQ_CLOCK_Handler+0x33a>
    3460:	7830      	ldrb	r0, [r6, #0]
    3462:	b960      	cbnz	r0, 347e <MPSL_IRQ_CLOCK_Handler+0x33a>
    3464:	f000 f958 	bl	3718 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3468:	4606      	mov	r6, r0
    346a:	f000 fa29 	bl	38c0 <mpsl_temperature_get>
    346e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3472:	b116      	cbz	r6, 347a <MPSL_IRQ_CLOCK_Handler+0x336>
    3474:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3478:	e001      	b.n	347e <MPSL_IRQ_CLOCK_Handler+0x33a>
    347a:	e9c4 0204 	strd	r0, r2, [r4, #16]
    347e:	2101      	movs	r1, #1
    3480:	4628      	mov	r0, r5
    3482:	f008 ff79 	bl	c378 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3486:	b108      	cbz	r0, 348c <MPSL_IRQ_CLOCK_Handler+0x348>
    3488:	f000 f940 	bl	370c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    348c:	f884 800a 	strb.w	r8, [r4, #10]
    3490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3494:	2000002c 	.word	0x2000002c
    3498:	00020001 	.word	0x00020001
    349c:	00030001 	.word	0x00030001
    34a0:	4000053c 	.word	0x4000053c
    34a4:	e000ed10 	.word	0xe000ed10

000034a8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    34a8:	b510      	push	{r4, lr}
    34aa:	f3ef 8410 	mrs	r4, PRIMASK
    34ae:	b672      	cpsid	i
    34b0:	480a      	ldr	r0, [pc, #40]	; (34dc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    34b2:	7841      	ldrb	r1, [r0, #1]
    34b4:	b129      	cbz	r1, 34c2 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    34b6:	7841      	ldrb	r1, [r0, #1]
    34b8:	1e49      	subs	r1, r1, #1
    34ba:	7041      	strb	r1, [r0, #1]
    34bc:	7841      	ldrb	r1, [r0, #1]
    34be:	b129      	cbz	r1, 34cc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    34c0:	e008      	b.n	34d4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    34c2:	f240 110d 	movw	r1, #269	; 0x10d
    34c6:	206d      	movs	r0, #109	; 0x6d
    34c8:	f000 f98a 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34cc:	7880      	ldrb	r0, [r0, #2]
    34ce:	b908      	cbnz	r0, 34d4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    34d0:	f000 f930 	bl	3734 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    34d4:	2c00      	cmp	r4, #0
    34d6:	d100      	bne.n	34da <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    34d8:	b662      	cpsie	i
    34da:	bd10      	pop	{r4, pc}
    34dc:	2000002c 	.word	0x2000002c

000034e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    34e0:	b510      	push	{r4, lr}
    34e2:	f3ef 8410 	mrs	r4, PRIMASK
    34e6:	b672      	cpsid	i
    34e8:	4806      	ldr	r0, [pc, #24]	; (3504 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    34ea:	7841      	ldrb	r1, [r0, #1]
    34ec:	1c49      	adds	r1, r1, #1
    34ee:	7041      	strb	r1, [r0, #1]
    34f0:	7840      	ldrb	r0, [r0, #1]
    34f2:	2801      	cmp	r0, #1
    34f4:	d101      	bne.n	34fa <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    34f6:	f008 ff56 	bl	c3a6 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    34fa:	2c00      	cmp	r4, #0
    34fc:	d100      	bne.n	3500 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    34fe:	b662      	cpsie	i
    3500:	bd10      	pop	{r4, pc}
    3502:	0000      	.short	0x0000
    3504:	2000002c 	.word	0x2000002c

00003508 <mpsl_clock_hfclk_release>:
    3508:	4805      	ldr	r0, [pc, #20]	; (3520 <mpsl_clock_hfclk_release+0x18>)
    350a:	b510      	push	{r4, lr}
    350c:	78c1      	ldrb	r1, [r0, #3]
    350e:	b121      	cbz	r1, 351a <mpsl_clock_hfclk_release+0x12>
    3510:	2100      	movs	r1, #0
    3512:	7101      	strb	r1, [r0, #4]
    3514:	70c1      	strb	r1, [r0, #3]
    3516:	f7ff ffc7 	bl	34a8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    351a:	2000      	movs	r0, #0
    351c:	bd10      	pop	{r4, pc}
    351e:	0000      	.short	0x0000
    3520:	2000002c 	.word	0x2000002c

00003524 <mpsl_clock_hfclk_request>:
    3524:	b570      	push	{r4, r5, r6, lr}
    3526:	4c0c      	ldr	r4, [pc, #48]	; (3558 <mpsl_clock_hfclk_request+0x34>)
    3528:	78e1      	ldrb	r1, [r4, #3]
    352a:	b961      	cbnz	r1, 3546 <mpsl_clock_hfclk_request+0x22>
    352c:	2501      	movs	r5, #1
    352e:	70e5      	strb	r5, [r4, #3]
    3530:	61e0      	str	r0, [r4, #28]
    3532:	f7ff ffd5 	bl	34e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3536:	f000 f8ef 	bl	3718 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    353a:	b130      	cbz	r0, 354a <mpsl_clock_hfclk_request+0x26>
    353c:	69e0      	ldr	r0, [r4, #28]
    353e:	b110      	cbz	r0, 3546 <mpsl_clock_hfclk_request+0x22>
    3540:	4780      	blx	r0
    3542:	2000      	movs	r0, #0
    3544:	61e0      	str	r0, [r4, #28]
    3546:	2000      	movs	r0, #0
    3548:	bd70      	pop	{r4, r5, r6, pc}
    354a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    354e:	7125      	strb	r5, [r4, #4]
    3550:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3554:	e7f7      	b.n	3546 <mpsl_clock_hfclk_request+0x22>
    3556:	0000      	.short	0x0000
    3558:	2000002c 	.word	0x2000002c

0000355c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    355c:	f3ef 8010 	mrs	r0, PRIMASK
    3560:	b672      	cpsid	i
    3562:	4904      	ldr	r1, [pc, #16]	; (3574 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3564:	788a      	ldrb	r2, [r1, #2]
    3566:	1c52      	adds	r2, r2, #1
    3568:	708a      	strb	r2, [r1, #2]
    356a:	2800      	cmp	r0, #0
    356c:	d100      	bne.n	3570 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    356e:	b662      	cpsie	i
    3570:	4770      	bx	lr
    3572:	0000      	.short	0x0000
    3574:	2000002c 	.word	0x2000002c

00003578 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3578:	b510      	push	{r4, lr}
    357a:	f3ef 8410 	mrs	r4, PRIMASK
    357e:	b672      	cpsid	i
    3580:	480a      	ldr	r0, [pc, #40]	; (35ac <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    3582:	7881      	ldrb	r1, [r0, #2]
    3584:	b129      	cbz	r1, 3592 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3586:	7881      	ldrb	r1, [r0, #2]
    3588:	1e49      	subs	r1, r1, #1
    358a:	7081      	strb	r1, [r0, #2]
    358c:	7841      	ldrb	r1, [r0, #1]
    358e:	b129      	cbz	r1, 359c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3590:	e008      	b.n	35a4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3592:	f240 1125 	movw	r1, #293	; 0x125
    3596:	206d      	movs	r0, #109	; 0x6d
    3598:	f000 f922 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    359c:	7880      	ldrb	r0, [r0, #2]
    359e:	b908      	cbnz	r0, 35a4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    35a0:	f000 f8c8 	bl	3734 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    35a4:	2c00      	cmp	r4, #0
    35a6:	d100      	bne.n	35aa <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    35a8:	b662      	cpsie	i
    35aa:	bd10      	pop	{r4, pc}
    35ac:	2000002c 	.word	0x2000002c

000035b0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    35b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35b4:	0004      	movs	r4, r0
    35b6:	f06f 0015 	mvn.w	r0, #21
    35ba:	d03c      	beq.n	3636 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35bc:	7821      	ldrb	r1, [r4, #0]
    35be:	2904      	cmp	r1, #4
    35c0:	d839      	bhi.n	3636 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35c2:	2900      	cmp	r1, #0
    35c4:	7861      	ldrb	r1, [r4, #1]
    35c6:	d038      	beq.n	363a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    35c8:	2900      	cmp	r1, #0
    35ca:	d134      	bne.n	3636 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35cc:	78a1      	ldrb	r1, [r4, #2]
    35ce:	2900      	cmp	r1, #0
    35d0:	d131      	bne.n	3636 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35d2:	2000      	movs	r0, #0
    35d4:	f008 fe96 	bl	c304 <MPSL_IRQ_RADIO_Handler+0x1e>
    35d8:	2000      	movs	r0, #0
    35da:	f008 fe86 	bl	c2ea <MPSL_IRQ_RADIO_Handler+0x4>
    35de:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    35e2:	f04f 31ff 	mov.w	r1, #4294967295
    35e6:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    35ea:	2600      	movs	r6, #0
    35ec:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    35f0:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    35f4:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    35f8:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    35fc:	4f14      	ldr	r7, [pc, #80]	; (3650 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    35fe:	707e      	strb	r6, [r7, #1]
    3600:	88a0      	ldrh	r0, [r4, #4]
    3602:	81b8      	strh	r0, [r7, #12]
    3604:	f008 fec6 	bl	c394 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3608:	2501      	movs	r5, #1
    360a:	b108      	cbz	r0, 3610 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    360c:	70fd      	strb	r5, [r7, #3]
    360e:	707d      	strb	r5, [r7, #1]
    3610:	2101      	movs	r1, #1
    3612:	4640      	mov	r0, r8
    3614:	f008 feb0 	bl	c378 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3618:	b108      	cbz	r0, 361e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    361a:	f000 f877 	bl	370c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    361e:	4620      	mov	r0, r4
    3620:	f7ff fe7c 	bl	331c <MPSL_IRQ_CLOCK_Handler+0x1d8>
    3624:	727d      	strb	r5, [r7, #9]
    3626:	2000      	movs	r0, #0
    3628:	f008 fe5f 	bl	c2ea <MPSL_IRQ_RADIO_Handler+0x4>
    362c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3630:	4630      	mov	r0, r6
    3632:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    3636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    363a:	2900      	cmp	r1, #0
    363c:	d0fb      	beq.n	3636 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    363e:	2920      	cmp	r1, #32
    3640:	d8f9      	bhi.n	3636 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3642:	78a1      	ldrb	r1, [r4, #2]
    3644:	2921      	cmp	r1, #33	; 0x21
    3646:	d8f6      	bhi.n	3636 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3648:	2901      	cmp	r1, #1
    364a:	d1c2      	bne.n	35d2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    364c:	e7f3      	b.n	3636 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    364e:	0000      	.short	0x0000
    3650:	2000002c 	.word	0x2000002c

00003654 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3654:	4801      	ldr	r0, [pc, #4]	; (365c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3656:	8980      	ldrh	r0, [r0, #12]
    3658:	4770      	bx	lr
    365a:	0000      	.short	0x0000
    365c:	2000002c 	.word	0x2000002c

00003660 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3660:	4802      	ldr	r0, [pc, #8]	; (366c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3662:	7a80      	ldrb	r0, [r0, #10]
    3664:	2800      	cmp	r0, #0
    3666:	d000      	beq.n	366a <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3668:	2001      	movs	r0, #1
    366a:	4770      	bx	lr
    366c:	2000002c 	.word	0x2000002c

00003670 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3672:	4d1f      	ldr	r5, [pc, #124]	; (36f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3674:	7ae8      	ldrb	r0, [r5, #11]
    3676:	2800      	cmp	r0, #0
    3678:	d10f      	bne.n	369a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    367a:	7e28      	ldrb	r0, [r5, #24]
    367c:	f000 0003 	and.w	r0, r0, #3
    3680:	f008 fe96 	bl	c3b0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3684:	2800      	cmp	r0, #0
    3686:	d008      	beq.n	369a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3688:	f3ef 8110 	mrs	r1, PRIMASK
    368c:	b672      	cpsid	i
    368e:	f7ff ffe7 	bl	3660 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3692:	b118      	cbz	r0, 369c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3694:	2900      	cmp	r1, #0
    3696:	d100      	bne.n	369a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3698:	b662      	cpsie	i
    369a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    369c:	2601      	movs	r6, #1
    369e:	72ae      	strb	r6, [r5, #10]
    36a0:	b901      	cbnz	r1, 36a4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    36a2:	b662      	cpsie	i
    36a4:	2018      	movs	r0, #24
    36a6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    36aa:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    36ae:	61a6      	str	r6, [r4, #24]
    36b0:	f44f 7020 	mov.w	r0, #640	; 0x280
    36b4:	f8ad 0000 	strh.w	r0, [sp]
    36b8:	f8bd 0000 	ldrh.w	r0, [sp]
    36bc:	1e41      	subs	r1, r0, #1
    36be:	f8ad 1000 	strh.w	r1, [sp]
    36c2:	d2f9      	bcs.n	36b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    36c4:	2700      	movs	r7, #0
    36c6:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    36ca:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    36ce:	4808      	ldr	r0, [pc, #32]	; (36f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    36d0:	3008      	adds	r0, #8
    36d2:	f008 fed3 	bl	c47c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    36d6:	702f      	strb	r7, [r5, #0]
    36d8:	f7ff fd78 	bl	31cc <MPSL_IRQ_CLOCK_Handler+0x88>
    36dc:	6166      	str	r6, [r4, #20]
    36de:	7968      	ldrb	r0, [r5, #5]
    36e0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    36e4:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    36e8:	2018      	movs	r0, #24
    36ea:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    36ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36f0:	2000002c 	.word	0x2000002c

000036f4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    36f4:	b510      	push	{r4, lr}
    36f6:	4c04      	ldr	r4, [pc, #16]	; (3708 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    36f8:	7e20      	ldrb	r0, [r4, #24]
    36fa:	f000 0003 	and.w	r0, r0, #3
    36fe:	f008 fe57 	bl	c3b0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3702:	2800      	cmp	r0, #0
    3704:	d0f8      	beq.n	36f8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3706:	bd10      	pop	{r4, pc}
    3708:	2000002c 	.word	0x2000002c

0000370c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    370c:	4901      	ldr	r1, [pc, #4]	; (3714 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    370e:	2001      	movs	r0, #1
    3710:	7008      	strb	r0, [r1, #0]
    3712:	4770      	bx	lr
    3714:	2000027c 	.word	0x2000027c

00003718 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3718:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    371c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3720:	b918      	cbnz	r0, 372a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    3722:	4803      	ldr	r0, [pc, #12]	; (3730 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3724:	7800      	ldrb	r0, [r0, #0]
    3726:	2800      	cmp	r0, #0
    3728:	d000      	beq.n	372c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    372a:	2001      	movs	r0, #1
    372c:	4770      	bx	lr
    372e:	0000      	.short	0x0000
    3730:	2000027c 	.word	0x2000027c

00003734 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3734:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3738:	2101      	movs	r1, #1
    373a:	6041      	str	r1, [r0, #4]
    373c:	2100      	movs	r1, #0
    373e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3742:	4801      	ldr	r0, [pc, #4]	; (3748 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3744:	7001      	strb	r1, [r0, #0]
    3746:	4770      	bx	lr
    3748:	2000027c 	.word	0x2000027c

0000374c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    374c:	4802      	ldr	r0, [pc, #8]	; (3758 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    374e:	6800      	ldr	r0, [r0, #0]
    3750:	f000 0003 	and.w	r0, r0, #3
    3754:	4770      	bx	lr
    3756:	0000      	.short	0x0000
    3758:	4000041c 	.word	0x4000041c
    375c:	b510      	push	{r4, lr}
    375e:	b131      	cbz	r1, 376e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3760:	2901      	cmp	r1, #1
    3762:	d007      	beq.n	3774 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3764:	f240 3102 	movw	r1, #770	; 0x302
    3768:	a005      	add	r0, pc, #20	; (adr r0, 3780 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    376a:	f000 f80f 	bl	378c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    376e:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3772:	e001      	b.n	3778 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3774:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3778:	f000 0001 	and.w	r0, r0, #1
    377c:	bd10      	pop	{r4, pc}
    377e:	0000      	.short	0x0000
    3780:	5f66726e 	.word	0x5f66726e
    3784:	636f6c63 	.word	0x636f6c63
    3788:	00682e6b 	.word	0x00682e6b

0000378c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    378c:	4a02      	ldr	r2, [pc, #8]	; (3798 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    378e:	6852      	ldr	r2, [r2, #4]
    3790:	b102      	cbz	r2, 3794 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3792:	4710      	bx	r2
    3794:	e7fe      	b.n	3794 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3796:	0000      	.short	0x0000
    3798:	2000004c 	.word	0x2000004c
    379c:	4806      	ldr	r0, [pc, #24]	; (37b8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    379e:	b510      	push	{r4, lr}
    37a0:	2100      	movs	r1, #0
    37a2:	6001      	str	r1, [r0, #0]
    37a4:	2101      	movs	r1, #1
    37a6:	6001      	str	r1, [r0, #0]
    37a8:	4608      	mov	r0, r1
    37aa:	f008 fe28 	bl	c3fe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    37ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    37b2:	2001      	movs	r0, #1
    37b4:	f008 be16 	b.w	c3e4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    37b8:	40001ffc 	.word	0x40001ffc
    37bc:	4807      	ldr	r0, [pc, #28]	; (37dc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    37be:	b510      	push	{r4, lr}
    37c0:	2101      	movs	r1, #1
    37c2:	6041      	str	r1, [r0, #4]
    37c4:	1e89      	subs	r1, r1, #2
    37c6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    37ca:	200c      	movs	r0, #12
    37cc:	f008 fe17 	bl	c3fe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    37d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    37d4:	200c      	movs	r0, #12
    37d6:	f008 be05 	b.w	c3e4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    37da:	0000      	.short	0x0000
    37dc:	4000c000 	.word	0x4000c000

000037e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    37e0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    37e2:	4a10      	ldr	r2, [pc, #64]	; (3824 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    37e4:	6855      	ldr	r5, [r2, #4]
    37e6:	b1e5      	cbz	r5, 3822 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    37e8:	2200      	movs	r2, #0
    37ea:	4603      	mov	r3, r0
    37ec:	466e      	mov	r6, sp
    37ee:	240a      	movs	r4, #10
    37f0:	e003      	b.n	37fa <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    37f2:	fbb0 f0f4 	udiv	r0, r0, r4
    37f6:	1c52      	adds	r2, r2, #1
    37f8:	b2d2      	uxtb	r2, r2
    37fa:	2800      	cmp	r0, #0
    37fc:	d1f9      	bne.n	37f2 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    37fe:	54b0      	strb	r0, [r6, r2]
    3800:	e00a      	b.n	3818 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3802:	bf00      	nop
    3804:	fbb3 f0f4 	udiv	r0, r3, r4
    3808:	fb04 3010 	mls	r0, r4, r0, r3
    380c:	fbb3 f3f4 	udiv	r3, r3, r4
    3810:	1e52      	subs	r2, r2, #1
    3812:	b2d2      	uxtb	r2, r2
    3814:	3030      	adds	r0, #48	; 0x30
    3816:	54b0      	strb	r0, [r6, r2]
    3818:	2a00      	cmp	r2, #0
    381a:	d1f3      	bne.n	3804 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    381c:	4630      	mov	r0, r6
    381e:	47a8      	blx	r5
    3820:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3822:	e7fe      	b.n	3822 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3824:	2000004c 	.word	0x2000004c

00003828 <mpsl_init>:
    3828:	b570      	push	{r4, r5, r6, lr}
    382a:	4c17      	ldr	r4, [pc, #92]	; (3888 <mpsl_init+0x60>)
    382c:	4606      	mov	r6, r0
    382e:	460d      	mov	r5, r1
    3830:	7860      	ldrb	r0, [r4, #1]
    3832:	b110      	cbz	r0, 383a <mpsl_init+0x12>
    3834:	f04f 30ff 	mov.w	r0, #4294967295
    3838:	bd70      	pop	{r4, r5, r6, pc}
    383a:	b906      	cbnz	r6, 383e <mpsl_init+0x16>
    383c:	4e13      	ldr	r6, [pc, #76]	; (388c <mpsl_init+0x64>)
    383e:	6062      	str	r2, [r4, #4]
    3840:	7025      	strb	r5, [r4, #0]
    3842:	f7ff ffab 	bl	379c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    3846:	f7ff ffb9 	bl	37bc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    384a:	4630      	mov	r0, r6
    384c:	f7ff feb0 	bl	35b0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3850:	0006      	movs	r6, r0
    3852:	d1f1      	bne.n	3838 <mpsl_init+0x10>
    3854:	f7fe ff36 	bl	26c4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3858:	f7ff ff0a 	bl	3670 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    385c:	f008 fd1c 	bl	c298 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3860:	4628      	mov	r0, r5
    3862:	f008 fdbf 	bl	c3e4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3866:	2001      	movs	r0, #1
    3868:	2d00      	cmp	r5, #0
    386a:	db09      	blt.n	3880 <mpsl_init+0x58>
    386c:	f005 011f 	and.w	r1, r5, #31
    3870:	fa00 f101 	lsl.w	r1, r0, r1
    3874:	096a      	lsrs	r2, r5, #5
    3876:	0092      	lsls	r2, r2, #2
    3878:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    387c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3880:	7060      	strb	r0, [r4, #1]
    3882:	4630      	mov	r0, r6
    3884:	bd70      	pop	{r4, r5, r6, pc}
    3886:	0000      	.short	0x0000
    3888:	2000004c 	.word	0x2000004c
    388c:	0000c420 	.word	0x0000c420

00003890 <mpsl_is_initialized>:
    3890:	4801      	ldr	r0, [pc, #4]	; (3898 <mpsl_is_initialized+0x8>)
    3892:	7840      	ldrb	r0, [r0, #1]
    3894:	4770      	bx	lr
    3896:	0000      	.short	0x0000
    3898:	2000004c 	.word	0x2000004c

0000389c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    389c:	4807      	ldr	r0, [pc, #28]	; (38bc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    389e:	f990 0000 	ldrsb.w	r0, [r0]
    38a2:	2800      	cmp	r0, #0
    38a4:	db09      	blt.n	38ba <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    38a6:	f000 021f 	and.w	r2, r0, #31
    38aa:	2101      	movs	r1, #1
    38ac:	4091      	lsls	r1, r2
    38ae:	0940      	lsrs	r0, r0, #5
    38b0:	0080      	lsls	r0, r0, #2
    38b2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    38b6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    38ba:	4770      	bx	lr
    38bc:	2000004c 	.word	0x2000004c

000038c0 <mpsl_temperature_get>:
    38c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38c4:	2601      	movs	r6, #1
    38c6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    38ca:	0331      	lsls	r1, r6, #12
    38cc:	f04f 0800 	mov.w	r8, #0
    38d0:	4640      	mov	r0, r8
    38d2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    38d6:	f3bf 8f4f 	dsb	sy
    38da:	f3bf 8f6f 	isb	sy
    38de:	4c16      	ldr	r4, [pc, #88]	; (3938 <mpsl_temperature_get+0x78>)
    38e0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    38e4:	200c      	movs	r0, #12
    38e6:	f008 fda9 	bl	c43c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    38ea:	4d14      	ldr	r5, [pc, #80]	; (393c <mpsl_temperature_get+0x7c>)
    38ec:	6828      	ldr	r0, [r5, #0]
    38ee:	43c0      	mvns	r0, r0
    38f0:	f340 1700 	sbfx	r7, r0, #4, #1
    38f4:	6828      	ldr	r0, [r5, #0]
    38f6:	f040 0010 	orr.w	r0, r0, #16
    38fa:	6028      	str	r0, [r5, #0]
    38fc:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3900:	6026      	str	r6, [r4, #0]
    3902:	1c7f      	adds	r7, r7, #1
    3904:	e002      	b.n	390c <mpsl_temperature_get+0x4c>
    3906:	bf00      	nop
    3908:	f000 f890 	bl	3a2c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    390c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3910:	2800      	cmp	r0, #0
    3912:	d0f9      	beq.n	3908 <mpsl_temperature_get+0x48>
    3914:	b91f      	cbnz	r7, 391e <mpsl_temperature_get+0x5e>
    3916:	6828      	ldr	r0, [r5, #0]
    3918:	f020 0010 	bic.w	r0, r0, #16
    391c:	6028      	str	r0, [r5, #0]
    391e:	4808      	ldr	r0, [pc, #32]	; (3940 <mpsl_temperature_get+0x80>)
    3920:	6805      	ldr	r5, [r0, #0]
    3922:	6066      	str	r6, [r4, #4]
    3924:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3928:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    392c:	200c      	movs	r0, #12
    392e:	f008 fd85 	bl	c43c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3932:	4628      	mov	r0, r5
    3934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3938:	4000c000 	.word	0x4000c000
    393c:	e000ed10 	.word	0xe000ed10
    3940:	4000c508 	.word	0x4000c508

00003944 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3944:	b510      	push	{r4, lr}
    3946:	4602      	mov	r2, r0
    3948:	2005      	movs	r0, #5
    394a:	490c      	ldr	r1, [pc, #48]	; (397c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    394c:	e004      	b.n	3958 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    394e:	bf00      	nop
    3950:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3954:	791b      	ldrb	r3, [r3, #4]
    3956:	b133      	cbz	r3, 3966 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3958:	1e40      	subs	r0, r0, #1
    395a:	b2c0      	uxtb	r0, r0
    395c:	d2f8      	bcs.n	3950 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    395e:	214b      	movs	r1, #75	; 0x4b
    3960:	2069      	movs	r0, #105	; 0x69
    3962:	f7ff ff3d 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3966:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    396a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    396e:	2200      	movs	r2, #0
    3970:	714a      	strb	r2, [r1, #5]
    3972:	718a      	strb	r2, [r1, #6]
    3974:	2201      	movs	r2, #1
    3976:	710a      	strb	r2, [r1, #4]
    3978:	bd10      	pop	{r4, pc}
    397a:	0000      	.short	0x0000
    397c:	20000cf8 	.word	0x20000cf8

00003980 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3980:	b510      	push	{r4, lr}
    3982:	2805      	cmp	r0, #5
    3984:	d301      	bcc.n	398a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3986:	215a      	movs	r1, #90	; 0x5a
    3988:	e006      	b.n	3998 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    398a:	490a      	ldr	r1, [pc, #40]	; (39b4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    398c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3990:	7901      	ldrb	r1, [r0, #4]
    3992:	2901      	cmp	r1, #1
    3994:	d003      	beq.n	399e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3996:	215b      	movs	r1, #91	; 0x5b
    3998:	2069      	movs	r0, #105	; 0x69
    399a:	f7ff ff21 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    399e:	7941      	ldrb	r1, [r0, #5]
    39a0:	7982      	ldrb	r2, [r0, #6]
    39a2:	1c49      	adds	r1, r1, #1
    39a4:	b2c9      	uxtb	r1, r1
    39a6:	428a      	cmp	r2, r1
    39a8:	d000      	beq.n	39ac <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    39aa:	7141      	strb	r1, [r0, #5]
    39ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    39b0:	f7ff bf74 	b.w	389c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    39b4:	20000cf8 	.word	0x20000cf8

000039b8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    39b8:	b570      	push	{r4, r5, r6, lr}
    39ba:	2505      	movs	r5, #5
    39bc:	4e0e      	ldr	r6, [pc, #56]	; (39f8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    39be:	4c0f      	ldr	r4, [pc, #60]	; (39fc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    39c0:	e016      	b.n	39f0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    39c2:	7821      	ldrb	r1, [r4, #0]
    39c4:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    39c8:	7902      	ldrb	r2, [r0, #4]
    39ca:	2a01      	cmp	r2, #1
    39cc:	d108      	bne.n	39e0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    39ce:	7942      	ldrb	r2, [r0, #5]
    39d0:	7983      	ldrb	r3, [r0, #6]
    39d2:	429a      	cmp	r2, r3
    39d4:	d004      	beq.n	39e0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    39d6:	7942      	ldrb	r2, [r0, #5]
    39d8:	7182      	strb	r2, [r0, #6]
    39da:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    39de:	4780      	blx	r0
    39e0:	7820      	ldrb	r0, [r4, #0]
    39e2:	1c40      	adds	r0, r0, #1
    39e4:	b2c0      	uxtb	r0, r0
    39e6:	7020      	strb	r0, [r4, #0]
    39e8:	2805      	cmp	r0, #5
    39ea:	d301      	bcc.n	39f0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    39ec:	2000      	movs	r0, #0
    39ee:	7020      	strb	r0, [r4, #0]
    39f0:	1e6d      	subs	r5, r5, #1
    39f2:	b2ed      	uxtb	r5, r5
    39f4:	d2e5      	bcs.n	39c2 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    39f6:	bd70      	pop	{r4, r5, r6, pc}
    39f8:	20000cf8 	.word	0x20000cf8
    39fc:	2000027d 	.word	0x2000027d

00003a00 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    3a00:	b500      	push	{lr}
    3a02:	f008 fd4a 	bl	c49a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3a06:	b940      	cbnz	r0, 3a1a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a08:	f008 fd51 	bl	c4ae <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3a0c:	b928      	cbnz	r0, 3a1a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a0e:	f008 fd65 	bl	c4dc <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3a12:	b910      	cbnz	r0, 3a1a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a14:	f008 fd76 	bl	c504 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a18:	b108      	cbz	r0, 3a1e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3a1a:	4802      	ldr	r0, [pc, #8]	; (3a24 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3a1c:	bd00      	pop	{pc}
    3a1e:	4802      	ldr	r0, [pc, #8]	; (3a28 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3a20:	bd00      	pop	{pc}
    3a22:	0000      	.short	0x0000
    3a24:	4000050c 	.word	0x4000050c
    3a28:	4001e700 	.word	0x4001e700

00003a2c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3a2c:	b510      	push	{r4, lr}
    3a2e:	f008 fd69 	bl	c504 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a32:	b330      	cbz	r0, 3a82 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3a34:	f3ef 8010 	mrs	r0, PRIMASK
    3a38:	b1c8      	cbz	r0, 3a6e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3a3a:	2100      	movs	r1, #0
    3a3c:	b672      	cpsid	i
    3a3e:	4812      	ldr	r0, [pc, #72]	; (3a88 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3a40:	6802      	ldr	r2, [r0, #0]
    3a42:	6803      	ldr	r3, [r0, #0]
    3a44:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3a48:	f043 0310 	orr.w	r3, r3, #16
    3a4c:	6003      	str	r3, [r0, #0]
    3a4e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3a52:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3a56:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3a5a:	431c      	orrs	r4, r3
    3a5c:	d000      	beq.n	3a60 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3a5e:	bf40      	sev
    3a60:	bf20      	wfe
    3a62:	bf00      	nop
    3a64:	bf00      	nop
    3a66:	bf00      	nop
    3a68:	bf00      	nop
    3a6a:	b112      	cbz	r2, 3a72 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3a6c:	e005      	b.n	3a7a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3a6e:	2101      	movs	r1, #1
    3a70:	e7e4      	b.n	3a3c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3a72:	6802      	ldr	r2, [r0, #0]
    3a74:	f022 0210 	bic.w	r2, r2, #16
    3a78:	6002      	str	r2, [r0, #0]
    3a7a:	2900      	cmp	r1, #0
    3a7c:	d000      	beq.n	3a80 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3a7e:	b662      	cpsie	i
    3a80:	bd10      	pop	{r4, pc}
    3a82:	bf20      	wfe
    3a84:	bd10      	pop	{r4, pc}
    3a86:	0000      	.short	0x0000
    3a88:	e000ed10 	.word	0xe000ed10

00003a8c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3a8c:	0000c775 0000c791 0000c77f 0000c78b     u...............
    3a9c:	0000c779 0000c773 0000c771 0000c797     y...s...q.......
    3aac:	0000c785 0000c76b 0000c763 0000c767     ....k...c...g...
    3abc:	0000c75d                                ]...

00003ac0 <mpsl_fem_disable>:
    3ac0:	4801      	ldr	r0, [pc, #4]	; (3ac8 <mpsl_fem_disable+0x8>)
    3ac2:	6800      	ldr	r0, [r0, #0]
    3ac4:	6800      	ldr	r0, [r0, #0]
    3ac6:	4700      	bx	r0
    3ac8:	20000054 	.word	0x20000054

00003acc <mpsl_fem_lna_configuration_clear>:
    3acc:	4801      	ldr	r0, [pc, #4]	; (3ad4 <mpsl_fem_lna_configuration_clear+0x8>)
    3ace:	6800      	ldr	r0, [r0, #0]
    3ad0:	6900      	ldr	r0, [r0, #16]
    3ad2:	4700      	bx	r0
    3ad4:	20000054 	.word	0x20000054

00003ad8 <mpsl_fem_lna_configuration_set>:
    3ad8:	4a01      	ldr	r2, [pc, #4]	; (3ae0 <mpsl_fem_lna_configuration_set+0x8>)
    3ada:	6812      	ldr	r2, [r2, #0]
    3adc:	6892      	ldr	r2, [r2, #8]
    3ade:	4710      	bx	r2
    3ae0:	20000054 	.word	0x20000054

00003ae4 <mpsl_fem_pa_configuration_clear>:
    3ae4:	4801      	ldr	r0, [pc, #4]	; (3aec <mpsl_fem_pa_configuration_clear+0x8>)
    3ae6:	6800      	ldr	r0, [r0, #0]
    3ae8:	68c0      	ldr	r0, [r0, #12]
    3aea:	4700      	bx	r0
    3aec:	20000054 	.word	0x20000054

00003af0 <mpsl_fem_pa_configuration_set>:
    3af0:	4a01      	ldr	r2, [pc, #4]	; (3af8 <mpsl_fem_pa_configuration_set+0x8>)
    3af2:	6812      	ldr	r2, [r2, #0]
    3af4:	6852      	ldr	r2, [r2, #4]
    3af6:	4710      	bx	r2
    3af8:	20000054 	.word	0x20000054

00003afc <mpsl_fem_pa_is_configured>:
    3afc:	4901      	ldr	r1, [pc, #4]	; (3b04 <mpsl_fem_pa_is_configured+0x8>)
    3afe:	6809      	ldr	r1, [r1, #0]
    3b00:	6a09      	ldr	r1, [r1, #32]
    3b02:	4708      	bx	r1
    3b04:	20000054 	.word	0x20000054

00003b08 <mpsl_fem_device_config_254_apply_get>:
    3b08:	4801      	ldr	r0, [pc, #4]	; (3b10 <mpsl_fem_device_config_254_apply_get+0x8>)
    3b0a:	7800      	ldrb	r0, [r0, #0]
    3b0c:	4770      	bx	lr
    3b0e:	0000      	.short	0x0000
    3b10:	2000027e 	.word	0x2000027e
    3b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3b16:	4c17      	ldr	r4, [pc, #92]	; (3b74 <mpsl_fem_device_config_254_apply_get+0x6c>)
    3b18:	7a20      	ldrb	r0, [r4, #8]
    3b1a:	2802      	cmp	r0, #2
    3b1c:	d200      	bcs.n	3b20 <mpsl_fem_device_config_254_apply_get+0x18>
    3b1e:	2002      	movs	r0, #2
    3b20:	f88d 0001 	strb.w	r0, [sp, #1]
    3b24:	79e0      	ldrb	r0, [r4, #7]
    3b26:	2803      	cmp	r0, #3
    3b28:	d200      	bcs.n	3b2c <mpsl_fem_device_config_254_apply_get+0x24>
    3b2a:	2003      	movs	r0, #3
    3b2c:	f88d 0000 	strb.w	r0, [sp]
    3b30:	79a0      	ldrb	r0, [r4, #6]
    3b32:	f8ad 0004 	strh.w	r0, [sp, #4]
    3b36:	7960      	ldrb	r0, [r4, #5]
    3b38:	f8ad 0002 	strh.w	r0, [sp, #2]
    3b3c:	4668      	mov	r0, sp
    3b3e:	f006 ffd5 	bl	aaec <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3b42:	b108      	cbz	r0, 3b48 <mpsl_fem_device_config_254_apply_get+0x40>
    3b44:	2180      	movs	r1, #128	; 0x80
    3b46:	e010      	b.n	3b6a <mpsl_fem_device_config_254_apply_get+0x62>
    3b48:	68e0      	ldr	r0, [r4, #12]
    3b4a:	9002      	str	r0, [sp, #8]
    3b4c:	a802      	add	r0, sp, #8
    3b4e:	f006 ffe3 	bl	ab18 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3b52:	b108      	cbz	r0, 3b58 <mpsl_fem_device_config_254_apply_get+0x50>
    3b54:	2184      	movs	r1, #132	; 0x84
    3b56:	e008      	b.n	3b6a <mpsl_fem_device_config_254_apply_get+0x62>
    3b58:	4807      	ldr	r0, [pc, #28]	; (3b78 <mpsl_fem_device_config_254_apply_get+0x70>)
    3b5a:	6800      	ldr	r0, [r0, #0]
    3b5c:	9003      	str	r0, [sp, #12]
    3b5e:	a803      	add	r0, sp, #12
    3b60:	f00b f9fc 	bl	ef5c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3b64:	2800      	cmp	r0, #0
    3b66:	d003      	beq.n	3b70 <mpsl_fem_device_config_254_apply_get+0x68>
    3b68:	2188      	movs	r1, #136	; 0x88
    3b6a:	2003      	movs	r0, #3
    3b6c:	f000 f914 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b70:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3b72:	0000      	.short	0x0000
    3b74:	20000d20 	.word	0x20000d20
    3b78:	00003e84 	.word	0x00003e84
    3b7c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3b7e:	4604      	mov	r4, r0
    3b80:	460e      	mov	r6, r1
    3b82:	f100 0003 	add.w	r0, r0, #3
    3b86:	f020 0003 	bic.w	r0, r0, #3
    3b8a:	f04f 0100 	mov.w	r1, #0
    3b8e:	e9cd 0100 	strd	r0, r1, [sp]
    3b92:	7831      	ldrb	r1, [r6, #0]
    3b94:	0015      	movs	r5, r2
    3b96:	f88d 1005 	strb.w	r1, [sp, #5]
    3b9a:	d000      	beq.n	3b9e <mpsl_fem_device_config_254_apply_get+0x96>
    3b9c:	2000      	movs	r0, #0
    3b9e:	a901      	add	r1, sp, #4
    3ba0:	f000 faea 	bl	4178 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    3ba4:	9900      	ldr	r1, [sp, #0]
    3ba6:	4408      	add	r0, r1
    3ba8:	490c      	ldr	r1, [pc, #48]	; (3bdc <mpsl_fem_device_config_254_apply_get+0xd4>)
    3baa:	9000      	str	r0, [sp, #0]
    3bac:	78c9      	ldrb	r1, [r1, #3]
    3bae:	b149      	cbz	r1, 3bc4 <mpsl_fem_device_config_254_apply_get+0xbc>
    3bb0:	7c31      	ldrb	r1, [r6, #16]
    3bb2:	b139      	cbz	r1, 3bc4 <mpsl_fem_device_config_254_apply_get+0xbc>
    3bb4:	2225      	movs	r2, #37	; 0x25
    3bb6:	b105      	cbz	r5, 3bba <mpsl_fem_device_config_254_apply_get+0xb2>
    3bb8:	2000      	movs	r0, #0
    3bba:	f000 fd25 	bl	4608 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    3bbe:	9900      	ldr	r1, [sp, #0]
    3bc0:	4408      	add	r0, r1
    3bc2:	9000      	str	r0, [sp, #0]
    3bc4:	462a      	mov	r2, r5
    3bc6:	4631      	mov	r1, r6
    3bc8:	4668      	mov	r0, sp
    3bca:	f008 fde6 	bl	c79a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3bce:	9800      	ldr	r0, [sp, #0]
    3bd0:	1dc0      	adds	r0, r0, #7
    3bd2:	f020 0007 	bic.w	r0, r0, #7
    3bd6:	9000      	str	r0, [sp, #0]
    3bd8:	1b00      	subs	r0, r0, r4
    3bda:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3bdc:	20000058 	.word	0x20000058

00003be0 <sdc_build_revision_get>:
    3be0:	b510      	push	{r4, lr}
    3be2:	b128      	cbz	r0, 3bf0 <sdc_build_revision_get+0x10>
    3be4:	2214      	movs	r2, #20
    3be6:	4904      	ldr	r1, [pc, #16]	; (3bf8 <sdc_build_revision_get+0x18>)
    3be8:	f008 fcde 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3bec:	2000      	movs	r0, #0
    3bee:	bd10      	pop	{r4, pc}
    3bf0:	f06f 0015 	mvn.w	r0, #21
    3bf4:	bd10      	pop	{r4, pc}
    3bf6:	0000      	.short	0x0000
    3bf8:	00003ea0 	.word	0x00003ea0

00003bfc <sdc_cfg_set>:
    3bfc:	b570      	push	{r4, r5, r6, lr}
    3bfe:	0003      	movs	r3, r0
    3c00:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    3c04:	d103      	bne.n	3c0e <sdc_cfg_set+0x12>
    3c06:	4c28      	ldr	r4, [pc, #160]	; (3ca8 <sdc_cfg_set+0xac>)
    3c08:	7863      	ldrb	r3, [r4, #1]
    3c0a:	b10b      	cbz	r3, 3c10 <sdc_cfg_set+0x14>
    3c0c:	1180      	asrs	r0, r0, #6
    3c0e:	bd70      	pop	{r4, r5, r6, pc}
    3c10:	b319      	cbz	r1, 3c5a <sdc_cfg_set+0x5e>
    3c12:	f06f 0515 	mvn.w	r5, #21
    3c16:	b38a      	cbz	r2, 3c7c <sdc_cfg_set+0x80>
    3c18:	4b24      	ldr	r3, [pc, #144]	; (3cac <sdc_cfg_set+0xb0>)
    3c1a:	290b      	cmp	r1, #11
    3c1c:	d23e      	bcs.n	3c9c <sdc_cfg_set+0xa0>
    3c1e:	e8df f001 	tbb	[pc, r1]
    3c22:	063d      	.short	0x063d
    3c24:	13100c09 	.word	0x13100c09
    3c28:	2818251d 	.word	0x2818251d
    3c2c:	002e      	.short	0x002e
    3c2e:	7810      	ldrb	r0, [r2, #0]
    3c30:	7018      	strb	r0, [r3, #0]
    3c32:	e028      	b.n	3c86 <sdc_cfg_set+0x8a>
    3c34:	7810      	ldrb	r0, [r2, #0]
    3c36:	7058      	strb	r0, [r3, #1]
    3c38:	e025      	b.n	3c86 <sdc_cfg_set+0x8a>
    3c3a:	6810      	ldr	r0, [r2, #0]
    3c3c:	f8c3 0005 	str.w	r0, [r3, #5]
    3c40:	e021      	b.n	3c86 <sdc_cfg_set+0x8a>
    3c42:	6810      	ldr	r0, [r2, #0]
    3c44:	60d8      	str	r0, [r3, #12]
    3c46:	e01e      	b.n	3c86 <sdc_cfg_set+0x8a>
    3c48:	7811      	ldrb	r1, [r2, #0]
    3c4a:	2900      	cmp	r1, #0
    3c4c:	d1df      	bne.n	3c0e <sdc_cfg_set+0x12>
    3c4e:	7099      	strb	r1, [r3, #2]
    3c50:	e019      	b.n	3c86 <sdc_cfg_set+0x8a>
    3c52:	7811      	ldrb	r1, [r2, #0]
    3c54:	2900      	cmp	r1, #0
    3c56:	d1da      	bne.n	3c0e <sdc_cfg_set+0x12>
    3c58:	70d9      	strb	r1, [r3, #3]
    3c5a:	e014      	b.n	3c86 <sdc_cfg_set+0x8a>
    3c5c:	78e0      	ldrb	r0, [r4, #3]
    3c5e:	b110      	cbz	r0, 3c66 <sdc_cfg_set+0x6a>
    3c60:	7810      	ldrb	r0, [r2, #0]
    3c62:	2802      	cmp	r0, #2
    3c64:	d31a      	bcc.n	3c9c <sdc_cfg_set+0xa0>
    3c66:	7810      	ldrb	r0, [r2, #0]
    3c68:	7418      	strb	r0, [r3, #16]
    3c6a:	e00c      	b.n	3c86 <sdc_cfg_set+0x8a>
    3c6c:	8810      	ldrh	r0, [r2, #0]
    3c6e:	8258      	strh	r0, [r3, #18]
    3c70:	e009      	b.n	3c86 <sdc_cfg_set+0x8a>
    3c72:	7811      	ldrb	r1, [r2, #0]
    3c74:	2900      	cmp	r1, #0
    3c76:	d1ca      	bne.n	3c0e <sdc_cfg_set+0x12>
    3c78:	7119      	strb	r1, [r3, #4]
    3c7a:	e004      	b.n	3c86 <sdc_cfg_set+0x8a>
    3c7c:	e00e      	b.n	3c9c <sdc_cfg_set+0xa0>
    3c7e:	7810      	ldrb	r0, [r2, #0]
    3c80:	2802      	cmp	r0, #2
    3c82:	d30b      	bcc.n	3c9c <sdc_cfg_set+0xa0>
    3c84:	7518      	strb	r0, [r3, #20]
    3c86:	2201      	movs	r2, #1
    3c88:	4908      	ldr	r1, [pc, #32]	; (3cac <sdc_cfg_set+0xb0>)
    3c8a:	2000      	movs	r0, #0
    3c8c:	f7ff ff76 	bl	3b7c <mpsl_fem_device_config_254_apply_get+0x74>
    3c90:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3c94:	db04      	blt.n	3ca0 <sdc_cfg_set+0xa4>
    3c96:	f06f 000b 	mvn.w	r0, #11
    3c9a:	bd70      	pop	{r4, r5, r6, pc}
    3c9c:	4628      	mov	r0, r5
    3c9e:	bd70      	pop	{r4, r5, r6, pc}
    3ca0:	2101      	movs	r1, #1
    3ca2:	70a1      	strb	r1, [r4, #2]
    3ca4:	bd70      	pop	{r4, r5, r6, pc}
    3ca6:	0000      	.short	0x0000
    3ca8:	20000058 	.word	0x20000058
    3cac:	20000d20 	.word	0x20000d20

00003cb0 <sdc_enable>:
    3cb0:	b570      	push	{r4, r5, r6, lr}
    3cb2:	460c      	mov	r4, r1
    3cb4:	0005      	movs	r5, r0
    3cb6:	d019      	beq.n	3cec <sdc_enable+0x3c>
    3cb8:	b1c4      	cbz	r4, 3cec <sdc_enable+0x3c>
    3cba:	f000 f925 	bl	3f08 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3cbe:	b1c0      	cbz	r0, 3cf2 <sdc_enable+0x42>
    3cc0:	4628      	mov	r0, r5
    3cc2:	f7ff fe3f 	bl	3944 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3cc6:	4d0c      	ldr	r5, [pc, #48]	; (3cf8 <sdc_enable+0x48>)
    3cc8:	2200      	movs	r2, #0
    3cca:	490c      	ldr	r1, [pc, #48]	; (3cfc <sdc_enable+0x4c>)
    3ccc:	7028      	strb	r0, [r5, #0]
    3cce:	4620      	mov	r0, r4
    3cd0:	f7ff ff54 	bl	3b7c <mpsl_fem_device_config_254_apply_get+0x74>
    3cd4:	f00b fd43 	bl	f75e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3cd8:	2100      	movs	r1, #0
    3cda:	7828      	ldrb	r0, [r5, #0]
    3cdc:	f007 f91a 	bl	af14 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3ce0:	f7ff ff18 	bl	3b14 <mpsl_fem_device_config_254_apply_get+0xc>
    3ce4:	2001      	movs	r0, #1
    3ce6:	7068      	strb	r0, [r5, #1]
    3ce8:	2000      	movs	r0, #0
    3cea:	bd70      	pop	{r4, r5, r6, pc}
    3cec:	f06f 0015 	mvn.w	r0, #21
    3cf0:	bd70      	pop	{r4, r5, r6, pc}
    3cf2:	f04f 30ff 	mov.w	r0, #4294967295
    3cf6:	bd70      	pop	{r4, r5, r6, pc}
    3cf8:	20000058 	.word	0x20000058
    3cfc:	20000d20 	.word	0x20000d20

00003d00 <sdc_init>:
    3d00:	b530      	push	{r4, r5, lr}
    3d02:	b087      	sub	sp, #28
    3d04:	0005      	movs	r5, r0
    3d06:	d00c      	beq.n	3d22 <sdc_init+0x22>
    3d08:	f7ff fdc2 	bl	3890 <mpsl_is_initialized>
    3d0c:	f04f 34ff 	mov.w	r4, #4294967295
    3d10:	b120      	cbz	r0, 3d1c <sdc_init+0x1c>
    3d12:	f7ff fc9f 	bl	3654 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3d16:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3d1a:	d905      	bls.n	3d28 <sdc_init+0x28>
    3d1c:	4620      	mov	r0, r4
    3d1e:	b007      	add	sp, #28
    3d20:	bd30      	pop	{r4, r5, pc}
    3d22:	f06f 0015 	mvn.w	r0, #21
    3d26:	e7fa      	b.n	3d1e <sdc_init+0x1e>
    3d28:	4c15      	ldr	r4, [pc, #84]	; (3d80 <sdc_init+0x80>)
    3d2a:	4816      	ldr	r0, [pc, #88]	; (3d84 <sdc_init+0x84>)
    3d2c:	6065      	str	r5, [r4, #4]
    3d2e:	f000 f9e5 	bl	40fc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3d32:	2000      	movs	r0, #0
    3d34:	7060      	strb	r0, [r4, #1]
    3d36:	70a0      	strb	r0, [r4, #2]
    3d38:	70e0      	strb	r0, [r4, #3]
    3d3a:	4601      	mov	r1, r0
    3d3c:	2218      	movs	r2, #24
    3d3e:	4668      	mov	r0, sp
    3d40:	f008 fcac 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3d44:	2218      	movs	r2, #24
    3d46:	4910      	ldr	r1, [pc, #64]	; (3d88 <sdc_init+0x88>)
    3d48:	4668      	mov	r0, sp
    3d4a:	f008 fc2d 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3d4e:	2218      	movs	r2, #24
    3d50:	4669      	mov	r1, sp
    3d52:	480e      	ldr	r0, [pc, #56]	; (3d8c <sdc_init+0x8c>)
    3d54:	f008 fc28 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3d58:	f3ef 8410 	mrs	r4, PRIMASK
    3d5c:	b672      	cpsid	i
    3d5e:	480c      	ldr	r0, [pc, #48]	; (3d90 <sdc_init+0x90>)
    3d60:	f06f 010c 	mvn.w	r1, #12
    3d64:	f000 fcf2 	bl	474c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3d68:	480a      	ldr	r0, [pc, #40]	; (3d94 <sdc_init+0x94>)
    3d6a:	f000 fdb3 	bl	48d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3d6e:	b118      	cbz	r0, 3d78 <sdc_init+0x78>
    3d70:	2196      	movs	r1, #150	; 0x96
    3d72:	2003      	movs	r0, #3
    3d74:	f000 f810 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d78:	b904      	cbnz	r4, 3d7c <sdc_init+0x7c>
    3d7a:	b662      	cpsie	i
    3d7c:	2000      	movs	r0, #0
    3d7e:	e7ce      	b.n	3d1e <sdc_init+0x1e>
    3d80:	20000058 	.word	0x20000058
    3d84:	00003b15 	.word	0x00003b15
    3d88:	00003e88 	.word	0x00003e88
    3d8c:	20000d20 	.word	0x20000d20
    3d90:	4000c000 	.word	0x4000c000
    3d94:	00003f35 	.word	0x00003f35

00003d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3d98:	b50e      	push	{r1, r2, r3, lr}
    3d9a:	b672      	cpsid	i
    3d9c:	4a15      	ldr	r2, [pc, #84]	; (3df4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3d9e:	6855      	ldr	r5, [r2, #4]
    3da0:	b1d5      	cbz	r5, 3dd8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3da2:	2200      	movs	r2, #0
    3da4:	4603      	mov	r3, r0
    3da6:	466e      	mov	r6, sp
    3da8:	240a      	movs	r4, #10
    3daa:	e003      	b.n	3db4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3dac:	fbb0 f0f4 	udiv	r0, r0, r4
    3db0:	1c52      	adds	r2, r2, #1
    3db2:	b2d2      	uxtb	r2, r2
    3db4:	2800      	cmp	r0, #0
    3db6:	d1f9      	bne.n	3dac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3db8:	54b0      	strb	r0, [r6, r2]
    3dba:	e009      	b.n	3dd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3dbc:	fbb3 f0f4 	udiv	r0, r3, r4
    3dc0:	fb04 3010 	mls	r0, r4, r0, r3
    3dc4:	fbb3 f3f4 	udiv	r3, r3, r4
    3dc8:	1e52      	subs	r2, r2, #1
    3dca:	b2d2      	uxtb	r2, r2
    3dcc:	3030      	adds	r0, #48	; 0x30
    3dce:	54b0      	strb	r0, [r6, r2]
    3dd0:	2a00      	cmp	r2, #0
    3dd2:	d1f3      	bne.n	3dbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3dd4:	4630      	mov	r0, r6
    3dd6:	47a8      	blx	r5
    3dd8:	f3bf 8f4f 	dsb	sy
    3ddc:	4806      	ldr	r0, [pc, #24]	; (3df8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3dde:	6801      	ldr	r1, [r0, #0]
    3de0:	4a06      	ldr	r2, [pc, #24]	; (3dfc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3de2:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3de6:	4311      	orrs	r1, r2
    3de8:	6001      	str	r1, [r0, #0]
    3dea:	f3bf 8f4f 	dsb	sy
    3dee:	bf00      	nop
    3df0:	e7fd      	b.n	3dee <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3df2:	0000      	.short	0x0000
    3df4:	20000058 	.word	0x20000058
    3df8:	e000ed0c 	.word	0xe000ed0c
    3dfc:	05fa0004 	.word	0x05fa0004

00003e00 <sdc_support_dle>:
    3e00:	4806      	ldr	r0, [pc, #24]	; (3e1c <sdc_support_dle+0x1c>)
    3e02:	b510      	push	{r4, lr}
    3e04:	7881      	ldrb	r1, [r0, #2]
    3e06:	7840      	ldrb	r0, [r0, #1]
    3e08:	4301      	orrs	r1, r0
    3e0a:	d002      	beq.n	3e12 <sdc_support_dle+0x12>
    3e0c:	f04f 30ff 	mov.w	r0, #4294967295
    3e10:	bd10      	pop	{r4, pc}
    3e12:	f006 fed7 	bl	abc4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3e16:	2000      	movs	r0, #0
    3e18:	bd10      	pop	{r4, pc}
    3e1a:	0000      	.short	0x0000
    3e1c:	20000058 	.word	0x20000058

00003e20 <sdc_support_le_2m_phy>:
    3e20:	4806      	ldr	r0, [pc, #24]	; (3e3c <sdc_support_le_2m_phy+0x1c>)
    3e22:	b510      	push	{r4, lr}
    3e24:	7881      	ldrb	r1, [r0, #2]
    3e26:	7840      	ldrb	r0, [r0, #1]
    3e28:	4301      	orrs	r1, r0
    3e2a:	d002      	beq.n	3e32 <sdc_support_le_2m_phy+0x12>
    3e2c:	f04f 30ff 	mov.w	r0, #4294967295
    3e30:	bd10      	pop	{r4, pc}
    3e32:	f00b f940 	bl	f0b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3e36:	2000      	movs	r0, #0
    3e38:	bd10      	pop	{r4, pc}
    3e3a:	0000      	.short	0x0000
    3e3c:	20000058 	.word	0x20000058

00003e40 <sdc_support_master>:
    3e40:	4806      	ldr	r0, [pc, #24]	; (3e5c <sdc_support_master+0x1c>)
    3e42:	b510      	push	{r4, lr}
    3e44:	7881      	ldrb	r1, [r0, #2]
    3e46:	7840      	ldrb	r0, [r0, #1]
    3e48:	4301      	orrs	r1, r0
    3e4a:	d002      	beq.n	3e52 <sdc_support_master+0x12>
    3e4c:	f04f 30ff 	mov.w	r0, #4294967295
    3e50:	bd10      	pop	{r4, pc}
    3e52:	f007 f893 	bl	af7c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
    3e56:	2000      	movs	r0, #0
    3e58:	bd10      	pop	{r4, pc}
    3e5a:	0000      	.short	0x0000
    3e5c:	20000058 	.word	0x20000058

00003e60 <sdc_support_scan>:
    3e60:	4807      	ldr	r0, [pc, #28]	; (3e80 <sdc_support_scan+0x20>)
    3e62:	b510      	push	{r4, lr}
    3e64:	7881      	ldrb	r1, [r0, #2]
    3e66:	7842      	ldrb	r2, [r0, #1]
    3e68:	4311      	orrs	r1, r2
    3e6a:	d002      	beq.n	3e72 <sdc_support_scan+0x12>
    3e6c:	f04f 30ff 	mov.w	r0, #4294967295
    3e70:	bd10      	pop	{r4, pc}
    3e72:	2101      	movs	r1, #1
    3e74:	70c1      	strb	r1, [r0, #3]
    3e76:	f007 f86f 	bl	af58 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
    3e7a:	2000      	movs	r0, #0
    3e7c:	bd10      	pop	{r4, pc}
    3e7e:	0000      	.short	0x0000
    3e80:	20000058 	.word	0x20000058
    3e84:	00000001 	.word	0x00000001
    3e88:	00010101 	.word	0x00010101
    3e8c:	031b1b00 	.word	0x031b1b00
    3e90:	00000002 	.word	0x00000002
    3e94:	00001d4c 	.word	0x00001d4c
    3e98:	001f0003 	.word	0x001f0003
    3e9c:	00000000 	.word	0x00000000
    3ea0:	d64ec0df 	.word	0xd64ec0df
    3ea4:	09667c1f 	.word	0x09667c1f
    3ea8:	a02bf50a 	.word	0xa02bf50a
    3eac:	6443f298 	.word	0x6443f298
    3eb0:	2aa6c562 	.word	0x2aa6c562

00003eb4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3eb4:	4a05      	ldr	r2, [pc, #20]	; (3ecc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3eb6:	b510      	push	{r4, lr}
    3eb8:	6852      	ldr	r2, [r2, #4]
    3eba:	b112      	cbz	r2, 3ec2 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ec0:	4710      	bx	r2
    3ec2:	2183      	movs	r1, #131	; 0x83
    3ec4:	2004      	movs	r0, #4
    3ec6:	f7ff ff67 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3eca:	0000      	.short	0x0000
    3ecc:	20000d38 	.word	0x20000d38

00003ed0 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3ed0:	4a05      	ldr	r2, [pc, #20]	; (3ee8 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3ed2:	b510      	push	{r4, lr}
    3ed4:	6812      	ldr	r2, [r2, #0]
    3ed6:	b112      	cbz	r2, 3ede <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    3ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3edc:	4710      	bx	r2
    3ede:	217d      	movs	r1, #125	; 0x7d
    3ee0:	2004      	movs	r0, #4
    3ee2:	f7ff ff59 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ee6:	0000      	.short	0x0000
    3ee8:	20000d38 	.word	0x20000d38

00003eec <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3eec:	4a05      	ldr	r2, [pc, #20]	; (3f04 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3eee:	b510      	push	{r4, lr}
    3ef0:	6892      	ldr	r2, [r2, #8]
    3ef2:	b112      	cbz	r2, 3efa <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ef8:	4710      	bx	r2
    3efa:	2189      	movs	r1, #137	; 0x89
    3efc:	2004      	movs	r0, #4
    3efe:	f7ff ff4b 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f02:	0000      	.short	0x0000
    3f04:	20000d38 	.word	0x20000d38

00003f08 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3f08:	4805      	ldr	r0, [pc, #20]	; (3f20 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3f0a:	6801      	ldr	r1, [r0, #0]
    3f0c:	b129      	cbz	r1, 3f1a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3f0e:	6841      	ldr	r1, [r0, #4]
    3f10:	b119      	cbz	r1, 3f1a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3f12:	6880      	ldr	r0, [r0, #8]
    3f14:	b108      	cbz	r0, 3f1a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3f16:	2001      	movs	r0, #1
    3f18:	4770      	bx	lr
    3f1a:	2000      	movs	r0, #0
    3f1c:	4770      	bx	lr
    3f1e:	0000      	.short	0x0000
    3f20:	20000d38 	.word	0x20000d38

00003f24 <sdc_rand_source_register>:
    3f24:	4902      	ldr	r1, [pc, #8]	; (3f30 <sdc_rand_source_register+0xc>)
    3f26:	c80d      	ldmia	r0, {r0, r2, r3}
    3f28:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3f2c:	2000      	movs	r0, #0
    3f2e:	4770      	bx	lr
    3f30:	20000d38 	.word	0x20000d38

00003f34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f36:	4c12      	ldr	r4, [pc, #72]	; (3f80 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3f38:	2600      	movs	r6, #0
    3f3a:	6825      	ldr	r5, [r4, #0]
    3f3c:	e011      	b.n	3f62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3f3e:	9800      	ldr	r0, [sp, #0]
    3f40:	2802      	cmp	r0, #2
    3f42:	d002      	beq.n	3f4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3f44:	2803      	cmp	r0, #3
    3f46:	d10c      	bne.n	3f62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3f48:	e006      	b.n	3f58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3f4a:	6820      	ldr	r0, [r4, #0]
    3f4c:	b110      	cbz	r0, 3f54 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3f4e:	2000      	movs	r0, #0
    3f50:	6026      	str	r6, [r4, #0]
    3f52:	e005      	b.n	3f60 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3f54:	2128      	movs	r1, #40	; 0x28
    3f56:	e00c      	b.n	3f72 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3f58:	6820      	ldr	r0, [r4, #0]
    3f5a:	b168      	cbz	r0, 3f78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3f5c:	2001      	movs	r0, #1
    3f5e:	6026      	str	r6, [r4, #0]
    3f60:	47a8      	blx	r5
    3f62:	4668      	mov	r0, sp
    3f64:	f000 fc88 	bl	4878 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3f68:	2800      	cmp	r0, #0
    3f6a:	d0e8      	beq.n	3f3e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3f6c:	2805      	cmp	r0, #5
    3f6e:	d005      	beq.n	3f7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3f70:	2135      	movs	r1, #53	; 0x35
    3f72:	2004      	movs	r0, #4
    3f74:	f7ff ff10 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f78:	212d      	movs	r1, #45	; 0x2d
    3f7a:	e7fa      	b.n	3f72 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f7e:	0000      	.short	0x0000
    3f80:	20000060 	.word	0x20000060
    3f84:	b570      	push	{r4, r5, r6, lr}
    3f86:	4c14      	ldr	r4, [pc, #80]	; (3fd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>)
    3f88:	4605      	mov	r5, r0
    3f8a:	7820      	ldrb	r0, [r4, #0]
    3f8c:	b140      	cbz	r0, 3fa0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    3f8e:	78a2      	ldrb	r2, [r4, #2]
    3f90:	1c61      	adds	r1, r4, #1
    3f92:	4628      	mov	r0, r5
    3f94:	1c92      	adds	r2, r2, #2
    3f96:	f008 fb07 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3f9a:	2000      	movs	r0, #0
    3f9c:	7020      	strb	r0, [r4, #0]
    3f9e:	e013      	b.n	3fc8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    3fa0:	480e      	ldr	r0, [pc, #56]	; (3fdc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3fa2:	f006 feb1 	bl	ad08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3fa6:	2800      	cmp	r0, #0
    3fa8:	d00f      	beq.n	3fca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    3faa:	480c      	ldr	r0, [pc, #48]	; (3fdc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3fac:	7800      	ldrb	r0, [r0, #0]
    3fae:	2814      	cmp	r0, #20
    3fb0:	d104      	bne.n	3fbc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    3fb2:	210a      	movs	r1, #10
    3fb4:	203e      	movs	r0, #62	; 0x3e
    3fb6:	f008 fc48 	bl	c84a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3fba:	b138      	cbz	r0, 3fcc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x98>
    3fbc:	4907      	ldr	r1, [pc, #28]	; (3fdc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3fbe:	4628      	mov	r0, r5
    3fc0:	f008 fca1 	bl	c906 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3fc4:	2800      	cmp	r0, #0
    3fc6:	d000      	beq.n	3fca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    3fc8:	2001      	movs	r0, #1
    3fca:	bd70      	pop	{r4, r5, r6, pc}
    3fcc:	4903      	ldr	r1, [pc, #12]	; (3fdc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3fce:	4628      	mov	r0, r5
    3fd0:	f008 fed6 	bl	cd80 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3fd4:	e7f8      	b.n	3fc8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    3fd6:	0000      	.short	0x0000
    3fd8:	20000e4c 	.word	0x20000e4c
    3fdc:	20000d44 	.word	0x20000d44
    3fe0:	b570      	push	{r4, r5, r6, lr}
    3fe2:	780a      	ldrb	r2, [r1, #0]
    3fe4:	7082      	strb	r2, [r0, #2]
    3fe6:	b33a      	cbz	r2, 4038 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    3fe8:	2a01      	cmp	r2, #1
    3fea:	d825      	bhi.n	4038 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    3fec:	2313      	movs	r3, #19
    3fee:	7003      	strb	r3, [r0, #0]
    3ff0:	2300      	movs	r3, #0
    3ff2:	e00a      	b.n	400a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd6>
    3ff4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3ff8:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3ffc:	78a6      	ldrb	r6, [r4, #2]
    3ffe:	70ee      	strb	r6, [r5, #3]
    4000:	8864      	ldrh	r4, [r4, #2]
    4002:	0a24      	lsrs	r4, r4, #8
    4004:	1c5b      	adds	r3, r3, #1
    4006:	712c      	strb	r4, [r5, #4]
    4008:	b2db      	uxtb	r3, r3
    400a:	4293      	cmp	r3, r2
    400c:	d3f2      	bcc.n	3ff4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xc0>
    400e:	2300      	movs	r3, #0
    4010:	e00b      	b.n	402a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf6>
    4012:	bf00      	nop
    4014:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4018:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    401c:	792e      	ldrb	r6, [r5, #4]
    401e:	7166      	strb	r6, [r4, #5]
    4020:	88ad      	ldrh	r5, [r5, #4]
    4022:	0a2d      	lsrs	r5, r5, #8
    4024:	1c5b      	adds	r3, r3, #1
    4026:	71a5      	strb	r5, [r4, #6]
    4028:	b2db      	uxtb	r3, r3
    402a:	4293      	cmp	r3, r2
    402c:	d3f2      	bcc.n	4014 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xe0>
    402e:	2101      	movs	r1, #1
    4030:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4034:	b2c0      	uxtb	r0, r0
    4036:	bd70      	pop	{r4, r5, r6, pc}
    4038:	2000      	movs	r0, #0
    403a:	bd70      	pop	{r4, r5, r6, pc}

0000403c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    403c:	2101      	movs	r1, #1
    403e:	4a0c      	ldr	r2, [pc, #48]	; (4070 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4040:	2840      	cmp	r0, #64	; 0x40
    4042:	d20c      	bcs.n	405e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4044:	2820      	cmp	r0, #32
    4046:	d803      	bhi.n	4050 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4048:	1e40      	subs	r0, r0, #1
    404a:	4081      	lsls	r1, r0
    404c:	6810      	ldr	r0, [r2, #0]
    404e:	e002      	b.n	4056 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4050:	3821      	subs	r0, #33	; 0x21
    4052:	4081      	lsls	r1, r0
    4054:	6850      	ldr	r0, [r2, #4]
    4056:	4201      	tst	r1, r0
    4058:	d107      	bne.n	406a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    405a:	2000      	movs	r0, #0
    405c:	4770      	bx	lr
    405e:	28ff      	cmp	r0, #255	; 0xff
    4060:	d003      	beq.n	406a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4062:	3840      	subs	r0, #64	; 0x40
    4064:	4081      	lsls	r1, r0
    4066:	6890      	ldr	r0, [r2, #8]
    4068:	e7f5      	b.n	4056 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    406a:	2001      	movs	r0, #1
    406c:	4770      	bx	lr
    406e:	0000      	.short	0x0000
    4070:	20000064 	.word	0x20000064

00004074 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4074:	2101      	movs	r1, #1
    4076:	1e40      	subs	r0, r0, #1
    4078:	4081      	lsls	r1, r0
    407a:	4804      	ldr	r0, [pc, #16]	; (408c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    407c:	68c0      	ldr	r0, [r0, #12]
    407e:	4201      	tst	r1, r0
    4080:	d001      	beq.n	4086 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    4082:	2001      	movs	r0, #1
    4084:	4770      	bx	lr
    4086:	2000      	movs	r0, #0
    4088:	4770      	bx	lr
    408a:	0000      	.short	0x0000
    408c:	20000064 	.word	0x20000064

00004090 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4090:	4901      	ldr	r1, [pc, #4]	; (4098 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4092:	6800      	ldr	r0, [r0, #0]
    4094:	60c8      	str	r0, [r1, #12]
    4096:	4770      	bx	lr
    4098:	20000064 	.word	0x20000064

0000409c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    409c:	4904      	ldr	r1, [pc, #16]	; (40b0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    409e:	6802      	ldr	r2, [r0, #0]
    40a0:	6840      	ldr	r0, [r0, #4]
    40a2:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    40a6:	600a      	str	r2, [r1, #0]
    40a8:	4a02      	ldr	r2, [pc, #8]	; (40b4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    40aa:	4310      	orrs	r0, r2
    40ac:	6048      	str	r0, [r1, #4]
    40ae:	4770      	bx	lr
    40b0:	20000064 	.word	0x20000064
    40b4:	024007f8 	.word	0x024007f8

000040b8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    40b8:	4901      	ldr	r1, [pc, #4]	; (40c0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    40ba:	6800      	ldr	r0, [r0, #0]
    40bc:	6088      	str	r0, [r1, #8]
    40be:	4770      	bx	lr
    40c0:	20000064 	.word	0x20000064

000040c4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    40c4:	4805      	ldr	r0, [pc, #20]	; (40dc <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    40c6:	f04f 31ff 	mov.w	r1, #4294967295
    40ca:	6001      	str	r1, [r0, #0]
    40cc:	0cc9      	lsrs	r1, r1, #19
    40ce:	6041      	str	r1, [r0, #4]
    40d0:	2100      	movs	r1, #0
    40d2:	6081      	str	r1, [r0, #8]
    40d4:	211f      	movs	r1, #31
    40d6:	60c1      	str	r1, [r0, #12]
    40d8:	4770      	bx	lr
    40da:	0000      	.short	0x0000
    40dc:	20000064 	.word	0x20000064

000040e0 <sdc_hci_cmd_cb_reset>:
    40e0:	b510      	push	{r4, lr}
    40e2:	f7ff ffef 	bl	40c4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    40e6:	f00a ffbf 	bl	f068 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    40ea:	4604      	mov	r4, r0
    40ec:	4802      	ldr	r0, [pc, #8]	; (40f8 <sdc_hci_cmd_cb_reset+0x18>)
    40ee:	6800      	ldr	r0, [r0, #0]
    40f0:	b100      	cbz	r0, 40f4 <sdc_hci_cmd_cb_reset+0x14>
    40f2:	4780      	blx	r0
    40f4:	4620      	mov	r0, r4
    40f6:	bd10      	pop	{r4, pc}
    40f8:	20000074 	.word	0x20000074

000040fc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    40fc:	4901      	ldr	r1, [pc, #4]	; (4104 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    40fe:	6008      	str	r0, [r1, #0]
    4100:	4770      	bx	lr
    4102:	0000      	.short	0x0000
    4104:	20000074 	.word	0x20000074

00004108 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4108:	2102      	movs	r1, #2
    410a:	8001      	strh	r1, [r0, #0]
    410c:	8041      	strh	r1, [r0, #2]
    410e:	2100      	movs	r1, #0
    4110:	7101      	strb	r1, [r0, #4]
    4112:	21df      	movs	r1, #223	; 0xdf
    4114:	7141      	strb	r1, [r0, #5]
    4116:	f644 61c0 	movw	r1, #20160	; 0x4ec0
    411a:	80c1      	strh	r1, [r0, #6]
    411c:	4901      	ldr	r1, [pc, #4]	; (4124 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    411e:	6081      	str	r1, [r0, #8]
    4120:	2000      	movs	r0, #0
    4122:	4770      	bx	lr
    4124:	667c1fd6 	.word	0x667c1fd6

00004128 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    4128:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    412a:	4604      	mov	r4, r0
    412c:	4669      	mov	r1, sp
    412e:	f009 fae1 	bl	d6f4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    4132:	b170      	cbz	r0, 4152 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4134:	f240 215a 	movw	r1, #602	; 0x25a
    4138:	e008      	b.n	414c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    413a:	bf00      	nop
    413c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4140:	4621      	mov	r1, r4
    4142:	f000 f8a7 	bl	4294 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4146:	b120      	cbz	r0, 4152 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4148:	f240 215f 	movw	r1, #607	; 0x25f
    414c:	2017      	movs	r0, #23
    414e:	f7ff fe23 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4152:	4668      	mov	r0, sp
    4154:	f000 f850 	bl	41f8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4158:	2800      	cmp	r0, #0
    415a:	d0ef      	beq.n	413c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    415c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004160 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4160:	b510      	push	{r4, lr}
    4162:	b120      	cbz	r0, 416e <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0xe>
    4164:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    4168:	2017      	movs	r0, #23
    416a:	f7ff fe15 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    416e:	4801      	ldr	r0, [pc, #4]	; (4174 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x14>)
    4170:	7800      	ldrb	r0, [r0, #0]
    4172:	bd10      	pop	{r4, pc}
    4174:	20000f50 	.word	0x20000f50

00004178 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    417a:	4605      	mov	r5, r0
    417c:	7808      	ldrb	r0, [r1, #0]
    417e:	784a      	ldrb	r2, [r1, #1]
    4180:	4290      	cmp	r0, r2
    4182:	d902      	bls.n	418a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
    4184:	f240 1163 	movw	r1, #355	; 0x163
    4188:	e00a      	b.n	41a0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    418a:	9500      	str	r5, [sp, #0]
    418c:	b15d      	cbz	r5, 41a6 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    418e:	2600      	movs	r6, #0
    4190:	1ce8      	adds	r0, r5, #3
    4192:	784c      	ldrb	r4, [r1, #1]
    4194:	f020 0003 	bic.w	r0, r0, #3
    4198:	42a8      	cmp	r0, r5
    419a:	d006      	beq.n	41aa <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x32>
    419c:	f240 1179 	movw	r1, #377	; 0x179
    41a0:	2017      	movs	r0, #23
    41a2:	f7ff fdf9 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41a6:	2601      	movs	r6, #1
    41a8:	e7f2      	b.n	4190 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
    41aa:	4f12      	ldr	r7, [pc, #72]	; (41f4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    41ac:	4631      	mov	r1, r6
    41ae:	4668      	mov	r0, sp
    41b0:	703c      	strb	r4, [r7, #0]
    41b2:	f000 f8e1 	bl	4378 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe4>
    41b6:	2000      	movs	r0, #0
    41b8:	4603      	mov	r3, r0
    41ba:	9900      	ldr	r1, [sp, #0]
    41bc:	1cc9      	adds	r1, r1, #3
    41be:	f021 0103 	bic.w	r1, r1, #3
    41c2:	9100      	str	r1, [sp, #0]
    41c4:	b966      	cbnz	r6, 41e0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    41c6:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    41ca:	6091      	str	r1, [r2, #8]
    41cc:	2100      	movs	r1, #0
    41ce:	e005      	b.n	41dc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    41d0:	f8d2 c008 	ldr.w	ip, [r2, #8]
    41d4:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    41d8:	1c49      	adds	r1, r1, #1
    41da:	b2c9      	uxtb	r1, r1
    41dc:	42a1      	cmp	r1, r4
    41de:	d3f7      	bcc.n	41d0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    41e0:	9900      	ldr	r1, [sp, #0]
    41e2:	1c40      	adds	r0, r0, #1
    41e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    41e8:	9100      	str	r1, [sp, #0]
    41ea:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    41ee:	d0e4      	beq.n	41ba <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    41f0:	1b48      	subs	r0, r1, r5
    41f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41f4:	20000f50 	.word	0x20000f50

000041f8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    41f8:	b570      	push	{r4, r5, r6, lr}
    41fa:	4604      	mov	r4, r0
    41fc:	f009 facf 	bl	d79e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4200:	b108      	cbz	r0, 4206 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    4202:	2010      	movs	r0, #16
    4204:	bd70      	pop	{r4, r5, r6, pc}
    4206:	7825      	ldrb	r5, [r4, #0]
    4208:	f000 f8f2 	bl	43f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    420c:	4602      	mov	r2, r0
    420e:	480c      	ldr	r0, [pc, #48]	; (4240 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4210:	8861      	ldrh	r1, [r4, #2]
    4212:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4216:	e00e      	b.n	4236 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4218:	6883      	ldr	r3, [r0, #8]
    421a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    421e:	b143      	cbz	r3, 4232 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4220:	1c4a      	adds	r2, r1, #1
    4222:	8062      	strh	r2, [r4, #2]
    4224:	80a1      	strh	r1, [r4, #4]
    4226:	6880      	ldr	r0, [r0, #8]
    4228:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    422c:	60a0      	str	r0, [r4, #8]
    422e:	2000      	movs	r0, #0
    4230:	bd70      	pop	{r4, r5, r6, pc}
    4232:	1c49      	adds	r1, r1, #1
    4234:	b289      	uxth	r1, r1
    4236:	4291      	cmp	r1, r2
    4238:	d3ee      	bcc.n	4218 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    423a:	8061      	strh	r1, [r4, #2]
    423c:	2005      	movs	r0, #5
    423e:	bd70      	pop	{r4, r5, r6, pc}
    4240:	20000f50 	.word	0x20000f50

00004244 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4248:	b949      	cbnz	r1, 425e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    424a:	4c11      	ldr	r4, [pc, #68]	; (4290 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    424c:	2700      	movs	r7, #0
    424e:	463b      	mov	r3, r7
    4250:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4254:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4258:	f814 c001 	ldrb.w	ip, [r4, r1]
    425c:	e00d      	b.n	427a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    425e:	2000      	movs	r0, #0
    4260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4264:	19dc      	adds	r4, r3, r7
    4266:	f8d5 e008 	ldr.w	lr, [r5, #8]
    426a:	b2a4      	uxth	r4, r4
    426c:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4270:	f1be 0f00 	cmp.w	lr, #0
    4274:	d004      	beq.n	4280 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    4276:	1c5b      	adds	r3, r3, #1
    4278:	b29b      	uxth	r3, r3
    427a:	459c      	cmp	ip, r3
    427c:	d8f2      	bhi.n	4264 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    427e:	4634      	mov	r4, r6
    4280:	8004      	strh	r4, [r0, #0]
    4282:	4620      	mov	r0, r4
    4284:	42b4      	cmp	r4, r6
    4286:	d0ea      	beq.n	425e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    4288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    428c:	f000 b82c 	b.w	42e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
    4290:	20000f50 	.word	0x20000f50

00004294 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4294:	b570      	push	{r4, r5, r6, lr}
    4296:	4606      	mov	r6, r0
    4298:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    429c:	f243 0502 	movw	r5, #12290	; 0x3002
    42a0:	38ff      	subs	r0, #255	; 0xff
    42a2:	d01a      	beq.n	42da <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    42a4:	b109      	cbz	r1, 42aa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
    42a6:	2007      	movs	r0, #7
    42a8:	bd70      	pop	{r4, r5, r6, pc}
    42aa:	4630      	mov	r0, r6
    42ac:	f000 f854 	bl	4358 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    42b0:	0004      	movs	r4, r0
    42b2:	d012      	beq.n	42da <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    42b4:	480a      	ldr	r0, [pc, #40]	; (42e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
    42b6:	4621      	mov	r1, r4
    42b8:	6802      	ldr	r2, [r0, #0]
    42ba:	4630      	mov	r0, r6
    42bc:	4790      	blx	r2
    42be:	4d09      	ldr	r5, [pc, #36]	; (42e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
    42c0:	2000      	movs	r0, #0
    42c2:	68a9      	ldr	r1, [r5, #8]
    42c4:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
    42c8:	f000 f888 	bl	43dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    42cc:	4602      	mov	r2, r0
    42ce:	4621      	mov	r1, r4
    42d0:	6868      	ldr	r0, [r5, #4]
    42d2:	f009 f9f9 	bl	d6c8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    42d6:	2000      	movs	r0, #0
    42d8:	bd70      	pop	{r4, r5, r6, pc}
    42da:	4628      	mov	r0, r5
    42dc:	bd70      	pop	{r4, r5, r6, pc}
    42de:	0000      	.short	0x0000
    42e0:	00004404 	.word	0x00004404
    42e4:	20000f50 	.word	0x20000f50
    42e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42ec:	4690      	mov	r8, r2
    42ee:	460e      	mov	r6, r1
    42f0:	4607      	mov	r7, r0
    42f2:	f009 fa0f 	bl	d714 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    42f6:	b148      	cbz	r0, 430c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
    42f8:	4815      	ldr	r0, [pc, #84]	; (4350 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbc>)
    42fa:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    42fe:	68a8      	ldr	r0, [r5, #8]
    4300:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4304:	b128      	cbz	r0, 4312 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
    4306:	f44f 719d 	mov.w	r1, #314	; 0x13a
    430a:	e014      	b.n	4336 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    430c:	f240 1139 	movw	r1, #313	; 0x139
    4310:	e011      	b.n	4336 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    4312:	6868      	ldr	r0, [r5, #4]
    4314:	2800      	cmp	r0, #0
    4316:	d018      	beq.n	434a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb6>
    4318:	4630      	mov	r0, r6
    431a:	f000 f85f 	bl	43dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    431e:	4601      	mov	r1, r0
    4320:	6868      	ldr	r0, [r5, #4]
    4322:	f009 f983 	bl	d62c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4326:	0004      	movs	r4, r0
    4328:	d00e      	beq.n	4348 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    432a:	68a8      	ldr	r0, [r5, #8]
    432c:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    4330:	b126      	cbz	r6, 433c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa8>
    4332:	f240 1145 	movw	r1, #325	; 0x145
    4336:	2017      	movs	r0, #23
    4338:	f7ff fd2e 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    433c:	4805      	ldr	r0, [pc, #20]	; (4354 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
    433e:	4642      	mov	r2, r8
    4340:	4621      	mov	r1, r4
    4342:	6803      	ldr	r3, [r0, #0]
    4344:	4638      	mov	r0, r7
    4346:	4798      	blx	r3
    4348:	4620      	mov	r0, r4
    434a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    434e:	0000      	.short	0x0000
    4350:	20000f50 	.word	0x20000f50
    4354:	00004400 	.word	0x00004400
    4358:	b570      	push	{r4, r5, r6, lr}
    435a:	460c      	mov	r4, r1
    435c:	4605      	mov	r5, r0
    435e:	f009 f9d9 	bl	d714 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    4362:	2800      	cmp	r0, #0
    4364:	d005      	beq.n	4372 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xde>
    4366:	4803      	ldr	r0, [pc, #12]	; (4374 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>)
    4368:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    436c:	6880      	ldr	r0, [r0, #8]
    436e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4372:	bd70      	pop	{r4, r5, r6, pc}
    4374:	20000f50 	.word	0x20000f50
    4378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    437c:	4e16      	ldr	r6, [pc, #88]	; (43d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>)
    437e:	4688      	mov	r8, r1
    4380:	4605      	mov	r5, r0
    4382:	2400      	movs	r4, #0
    4384:	6828      	ldr	r0, [r5, #0]
    4386:	1cc0      	adds	r0, r0, #3
    4388:	f020 0003 	bic.w	r0, r0, #3
    438c:	6028      	str	r0, [r5, #0]
    438e:	4620      	mov	r0, r4
    4390:	f000 f824 	bl	43dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    4394:	5d31      	ldrb	r1, [r6, r4]
    4396:	4348      	muls	r0, r1
    4398:	f1b8 0f00 	cmp.w	r8, #0
    439c:	d001      	beq.n	43a2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10e>
    439e:	2200      	movs	r2, #0
    43a0:	e000      	b.n	43a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
    43a2:	682a      	ldr	r2, [r5, #0]
    43a4:	4601      	mov	r1, r0
    43a6:	9200      	str	r2, [sp, #0]
    43a8:	b132      	cbz	r2, 43b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    43aa:	2700      	movs	r7, #0
    43ac:	ea4f 000d 	mov.w	r0, sp
    43b0:	f009 f969 	bl	d686 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    43b4:	b11f      	cbz	r7, 43be <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    43b6:	e006      	b.n	43c6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    43b8:	2701      	movs	r7, #1
    43ba:	2000      	movs	r0, #0
    43bc:	e7f8      	b.n	43b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11c>
    43be:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    43c2:	9a00      	ldr	r2, [sp, #0]
    43c4:	604a      	str	r2, [r1, #4]
    43c6:	6829      	ldr	r1, [r5, #0]
    43c8:	1c64      	adds	r4, r4, #1
    43ca:	4408      	add	r0, r1
    43cc:	6028      	str	r0, [r5, #0]
    43ce:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    43d2:	d0d7      	beq.n	4384 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf0>
    43d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    43d8:	20000f50 	.word	0x20000f50
    43dc:	4903      	ldr	r1, [pc, #12]	; (43ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    43de:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    43e2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    43e6:	1cc0      	adds	r0, r0, #3
    43e8:	4008      	ands	r0, r1
    43ea:	4770      	bx	lr
    43ec:	000043fc 	.word	0x000043fc
    43f0:	4801      	ldr	r0, [pc, #4]	; (43f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>)
    43f2:	7800      	ldrb	r0, [r0, #0]
    43f4:	4770      	bx	lr
    43f6:	0000      	.short	0x0000
    43f8:	20000f50 	.word	0x20000f50
    43fc:	000001e0 	.word	0x000001e0
    4400:	0000d729 	.word	0x0000d729
    4404:	0000e793 	.word	0x0000e793

00004408 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4408:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    440c:	4c26      	ldr	r4, [pc, #152]	; (44a8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    440e:	4680      	mov	r8, r0
    4410:	b081      	sub	sp, #4
    4412:	6820      	ldr	r0, [r4, #0]
    4414:	469a      	mov	sl, r3
    4416:	4693      	mov	fp, r2
    4418:	b158      	cbz	r0, 4432 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    441a:	7a02      	ldrb	r2, [r0, #8]
    441c:	4542      	cmp	r2, r8
    441e:	d903      	bls.n	4428 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4420:	6841      	ldr	r1, [r0, #4]
    4422:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    4426:	b140      	cbz	r0, 443a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4428:	f243 0002 	movw	r0, #12290	; 0x3002
    442c:	b005      	add	sp, #20
    442e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4432:	21a5      	movs	r1, #165	; 0xa5
    4434:	2018      	movs	r0, #24
    4436:	f7ff fcaf 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    443a:	4619      	mov	r1, r3
    443c:	9802      	ldr	r0, [sp, #8]
    443e:	f009 f98b 	bl	d758 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    4442:	b286      	uxth	r6, r0
    4444:	4658      	mov	r0, fp
    4446:	990e      	ldr	r1, [sp, #56]	; 0x38
    4448:	f009 f97d 	bl	d746 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    444c:	b285      	uxth	r5, r0
    444e:	1970      	adds	r0, r6, r5
    4450:	1d00      	adds	r0, r0, #4
    4452:	b287      	uxth	r7, r0
    4454:	6820      	ldr	r0, [r4, #0]
    4456:	46a1      	mov	r9, r4
    4458:	4639      	mov	r1, r7
    445a:	6800      	ldr	r0, [r0, #0]
    445c:	f009 f8e6 	bl	d62c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4460:	0004      	movs	r4, r0
    4462:	d01f      	beq.n	44a4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    4464:	8067      	strh	r7, [r4, #2]
    4466:	8025      	strh	r5, [r4, #0]
    4468:	4629      	mov	r1, r5
    446a:	1d20      	adds	r0, r4, #4
    446c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    446e:	4607      	mov	r7, r0
    4470:	465a      	mov	r2, fp
    4472:	2301      	movs	r3, #1
    4474:	9500      	str	r5, [sp, #0]
    4476:	f009 f839 	bl	d4ec <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    447a:	8820      	ldrh	r0, [r4, #0]
    447c:	4631      	mov	r1, r6
    447e:	4438      	add	r0, r7
    4480:	2301      	movs	r3, #1
    4482:	9a02      	ldr	r2, [sp, #8]
    4484:	f8cd a000 	str.w	sl, [sp]
    4488:	f009 f830 	bl	d4ec <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    448c:	8820      	ldrh	r0, [r4, #0]
    448e:	19c1      	adds	r1, r0, r7
    4490:	4638      	mov	r0, r7
    4492:	f009 f85c 	bl	d54e <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    4496:	f8d9 0000 	ldr.w	r0, [r9]
    449a:	6841      	ldr	r1, [r0, #4]
    449c:	2000      	movs	r0, #0
    449e:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    44a2:	e7c3      	b.n	442c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    44a4:	2004      	movs	r0, #4
    44a6:	e7c1      	b.n	442c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    44a8:	20000078 	.word	0x20000078

000044ac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    44ac:	b570      	push	{r4, r5, r6, lr}
    44ae:	4c14      	ldr	r4, [pc, #80]	; (4500 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    44b0:	6823      	ldr	r3, [r4, #0]
    44b2:	b18b      	cbz	r3, 44d8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    44b4:	7a19      	ldrb	r1, [r3, #8]
    44b6:	4281      	cmp	r1, r0
    44b8:	d912      	bls.n	44e0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    44ba:	685a      	ldr	r2, [r3, #4]
    44bc:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    44c0:	b171      	cbz	r1, 44e0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    44c2:	2500      	movs	r5, #0
    44c4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    44c8:	884a      	ldrh	r2, [r1, #2]
    44ca:	6818      	ldr	r0, [r3, #0]
    44cc:	f009 f8fc 	bl	d6c8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    44d0:	6821      	ldr	r1, [r4, #0]
    44d2:	2000      	movs	r0, #0
    44d4:	7a0a      	ldrb	r2, [r1, #8]
    44d6:	e00c      	b.n	44f2 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    44d8:	21c8      	movs	r1, #200	; 0xc8
    44da:	2018      	movs	r0, #24
    44dc:	f7ff fc5c 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44e0:	f243 0002 	movw	r0, #12290	; 0x3002
    44e4:	bd70      	pop	{r4, r5, r6, pc}
    44e6:	684b      	ldr	r3, [r1, #4]
    44e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    44ec:	b933      	cbnz	r3, 44fc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    44ee:	1c40      	adds	r0, r0, #1
    44f0:	b2c0      	uxtb	r0, r0
    44f2:	4282      	cmp	r2, r0
    44f4:	d8f7      	bhi.n	44e6 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    44f6:	6808      	ldr	r0, [r1, #0]
    44f8:	f009 f8db 	bl	d6b2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    44fc:	2000      	movs	r0, #0
    44fe:	bd70      	pop	{r4, r5, r6, pc}
    4500:	20000078 	.word	0x20000078

00004504 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4508:	460d      	mov	r5, r1
    450a:	0004      	movs	r4, r0
    450c:	4690      	mov	r8, r2
    450e:	f04f 0600 	mov.w	r6, #0
    4512:	d009      	beq.n	4528 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4514:	2700      	movs	r7, #0
    4516:	1ce0      	adds	r0, r4, #3
    4518:	f020 0003 	bic.w	r0, r0, #3
    451c:	42a0      	cmp	r0, r4
    451e:	d005      	beq.n	452c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4520:	2186      	movs	r1, #134	; 0x86
    4522:	2018      	movs	r0, #24
    4524:	f7ff fc38 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4528:	2701      	movs	r7, #1
    452a:	e7f4      	b.n	4516 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    452c:	b1cd      	cbz	r5, 4562 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    452e:	4611      	mov	r1, r2
    4530:	2000      	movs	r0, #0
    4532:	f009 f8a8 	bl	d686 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4536:	300c      	adds	r0, #12
    4538:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    453c:	b98f      	cbnz	r7, 4562 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    453e:	4f0a      	ldr	r7, [pc, #40]	; (4568 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4540:	f104 000c 	add.w	r0, r4, #12
    4544:	00aa      	lsls	r2, r5, #2
    4546:	603c      	str	r4, [r7, #0]
    4548:	7225      	strb	r5, [r4, #8]
    454a:	6060      	str	r0, [r4, #4]
    454c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4550:	6020      	str	r0, [r4, #0]
    4552:	2100      	movs	r1, #0
    4554:	6860      	ldr	r0, [r4, #4]
    4556:	f008 f8a1 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    455a:	4641      	mov	r1, r8
    455c:	6838      	ldr	r0, [r7, #0]
    455e:	f009 f892 	bl	d686 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4562:	4630      	mov	r0, r6
    4564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4568:	20000078 	.word	0x20000078

0000456c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    456c:	b570      	push	{r4, r5, r6, lr}
    456e:	4d08      	ldr	r5, [pc, #32]	; (4590 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4570:	6828      	ldr	r0, [r5, #0]
    4572:	2800      	cmp	r0, #0
    4574:	d00a      	beq.n	458c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    4576:	2400      	movs	r4, #0
    4578:	e004      	b.n	4584 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    457a:	4620      	mov	r0, r4
    457c:	f7ff ff96 	bl	44ac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4580:	1c64      	adds	r4, r4, #1
    4582:	b2e4      	uxtb	r4, r4
    4584:	6828      	ldr	r0, [r5, #0]
    4586:	7a00      	ldrb	r0, [r0, #8]
    4588:	42a0      	cmp	r0, r4
    458a:	d8f6      	bhi.n	457a <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    458c:	bd70      	pop	{r4, r5, r6, pc}
    458e:	0000      	.short	0x0000
    4590:	20000078 	.word	0x20000078

00004594 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4594:	4909      	ldr	r1, [pc, #36]	; (45bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4596:	b510      	push	{r4, lr}
    4598:	4602      	mov	r2, r0
    459a:	6809      	ldr	r1, [r1, #0]
    459c:	2000      	movs	r0, #0
    459e:	b149      	cbz	r1, 45b4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    45a0:	7a0b      	ldrb	r3, [r1, #8]
    45a2:	4293      	cmp	r3, r2
    45a4:	d905      	bls.n	45b2 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    45a6:	6849      	ldr	r1, [r1, #4]
    45a8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    45ac:	2900      	cmp	r1, #0
    45ae:	d000      	beq.n	45b2 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    45b0:	1d08      	adds	r0, r1, #4
    45b2:	bd10      	pop	{r4, pc}
    45b4:	21ee      	movs	r1, #238	; 0xee
    45b6:	2018      	movs	r0, #24
    45b8:	f7ff fbee 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45bc:	20000078 	.word	0x20000078

000045c0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    45c0:	490a      	ldr	r1, [pc, #40]	; (45ec <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    45c2:	b510      	push	{r4, lr}
    45c4:	4602      	mov	r2, r0
    45c6:	6809      	ldr	r1, [r1, #0]
    45c8:	2000      	movs	r0, #0
    45ca:	b159      	cbz	r1, 45e4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    45cc:	7a0b      	ldrb	r3, [r1, #8]
    45ce:	4293      	cmp	r3, r2
    45d0:	d907      	bls.n	45e2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    45d2:	6849      	ldr	r1, [r1, #4]
    45d4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    45d8:	2900      	cmp	r1, #0
    45da:	d002      	beq.n	45e2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    45dc:	f831 0b04 	ldrh.w	r0, [r1], #4
    45e0:	4408      	add	r0, r1
    45e2:	bd10      	pop	{r4, pc}
    45e4:	21fc      	movs	r1, #252	; 0xfc
    45e6:	2018      	movs	r0, #24
    45e8:	f7ff fbd6 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45ec:	20000078 	.word	0x20000078

000045f0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    45f0:	4801      	ldr	r0, [pc, #4]	; (45f8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    45f2:	7840      	ldrb	r0, [r0, #1]
    45f4:	4770      	bx	lr
    45f6:	0000      	.short	0x0000
    45f8:	2000007c 	.word	0x2000007c

000045fc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    45fc:	4801      	ldr	r0, [pc, #4]	; (4604 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    45fe:	6840      	ldr	r0, [r0, #4]
    4600:	4770      	bx	lr
    4602:	0000      	.short	0x0000
    4604:	2000007c 	.word	0x2000007c

00004608 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    4608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    460c:	460c      	mov	r4, r1
    460e:	4607      	mov	r7, r0
    4610:	4616      	mov	r6, r2
    4612:	211c      	movs	r1, #28
    4614:	4610      	mov	r0, r2
    4616:	460d      	mov	r5, r1
    4618:	4622      	mov	r2, r4
    461a:	f008 ffc2 	bl	d5a2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    461e:	4680      	mov	r8, r0
    4620:	b157      	cbz	r7, 4638 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    4622:	4638      	mov	r0, r7
    4624:	4641      	mov	r1, r8
    4626:	4632      	mov	r2, r6
    4628:	462b      	mov	r3, r5
    462a:	9400      	str	r4, [sp, #0]
    462c:	f008 ff5e 	bl	d4ec <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4630:	4803      	ldr	r0, [pc, #12]	; (4640 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    4632:	6047      	str	r7, [r0, #4]
    4634:	7004      	strb	r4, [r0, #0]
    4636:	7046      	strb	r6, [r0, #1]
    4638:	4640      	mov	r0, r8
    463a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    463e:	0000      	.short	0x0000
    4640:	2000007c 	.word	0x2000007c

00004644 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    4644:	4802      	ldr	r0, [pc, #8]	; (4650 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    4646:	7842      	ldrb	r2, [r0, #1]
    4648:	7801      	ldrb	r1, [r0, #0]
    464a:	6840      	ldr	r0, [r0, #4]
    464c:	f7ff bfdc 	b.w	4608 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4650:	2000007c 	.word	0x2000007c
    4654:	4909      	ldr	r1, [pc, #36]	; (467c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x38>)
    4656:	b510      	push	{r4, lr}
    4658:	4807      	ldr	r0, [pc, #28]	; (4678 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x34>)
    465a:	6008      	str	r0, [r1, #0]
    465c:	4b08      	ldr	r3, [pc, #32]	; (4680 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x3c>)
    465e:	2011      	movs	r0, #17
    4660:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4664:	2200      	movs	r2, #0
    4666:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    466a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    466e:	1c40      	adds	r0, r0, #1
    4670:	b2c0      	uxtb	r0, r0
    4672:	2814      	cmp	r0, #20
    4674:	d3f4      	bcc.n	4660 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x1c>
    4676:	bd10      	pop	{r4, pc}
    4678:	fffe0000 	.word	0xfffe0000
    467c:	4001f508 	.word	0x4001f508
    4680:	4001f000 	.word	0x4001f000
    4684:	b570      	push	{r4, r5, r6, lr}
    4686:	2420      	movs	r4, #32
    4688:	2100      	movs	r1, #0
    468a:	2301      	movs	r3, #1
    468c:	fa20 f201 	lsr.w	r2, r0, r1
    4690:	07d2      	lsls	r2, r2, #31
    4692:	d020      	beq.n	46d6 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    4694:	b24a      	sxtb	r2, r1
    4696:	2a00      	cmp	r2, #0
    4698:	db10      	blt.n	46bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x78>
    469a:	bf00      	nop
    469c:	ea4f 1652 	mov.w	r6, r2, lsr #5
    46a0:	ea4f 0686 	mov.w	r6, r6, lsl #2
    46a4:	f002 051f 	and.w	r5, r2, #31
    46a8:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    46ac:	fa03 f505 	lsl.w	r5, r3, r5
    46b0:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    46b4:	f3bf 8f4f 	dsb	sy
    46b8:	f3bf 8f6f 	isb	sy
    46bc:	db0b      	blt.n	46d6 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    46be:	f002 051f 	and.w	r5, r2, #31
    46c2:	ea4f 1252 	mov.w	r2, r2, lsr #5
    46c6:	ea4f 0282 	mov.w	r2, r2, lsl #2
    46ca:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    46ce:	fa03 f505 	lsl.w	r5, r3, r5
    46d2:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    46d6:	f101 0101 	add.w	r1, r1, #1
    46da:	42a1      	cmp	r1, r4
    46dc:	d3d6      	bcc.n	468c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>
    46de:	bd70      	pop	{r4, r5, r6, pc}
    46e0:	b570      	push	{r4, r5, r6, lr}
    46e2:	0042      	lsls	r2, r0, #1
    46e4:	f04f 0100 	mov.w	r1, #0
    46e8:	d501      	bpl.n	46ee <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xaa>
    46ea:	4a14      	ldr	r2, [pc, #80]	; (473c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xf8>)
    46ec:	6011      	str	r1, [r2, #0]
    46ee:	f3c0 3280 	ubfx	r2, r0, #14, #1
    46f2:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    46f6:	429a      	cmp	r2, r3
    46f8:	d003      	beq.n	4702 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xbe>
    46fa:	2166      	movs	r1, #102	; 0x66
    46fc:	201b      	movs	r0, #27
    46fe:	f7ff fb4b 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4702:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    4706:	d014      	beq.n	4732 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xee>
    4708:	4a0d      	ldr	r2, [pc, #52]	; (4740 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xfc>)
    470a:	2001      	movs	r0, #1
    470c:	6050      	str	r0, [r2, #4]
    470e:	1e83      	subs	r3, r0, #2
    4710:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4714:	4a0b      	ldr	r2, [pc, #44]	; (4744 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x100>)
    4716:	6090      	str	r0, [r2, #8]
    4718:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    471c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4720:	4c09      	ldr	r4, [pc, #36]	; (4748 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x104>)
    4722:	6021      	str	r1, [r4, #0]
    4724:	1d25      	adds	r5, r4, #4
    4726:	6028      	str	r0, [r5, #0]
    4728:	6090      	str	r0, [r2, #8]
    472a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    472e:	6021      	str	r1, [r4, #0]
    4730:	6028      	str	r0, [r5, #0]
    4732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4736:	f7ff bf8d 	b.w	4654 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    473a:	0000      	.short	0x0000
    473c:	4001e504 	.word	0x4001e504
    4740:	4000e000 	.word	0x4000e000
    4744:	4000f000 	.word	0x4000f000
    4748:	4000f500 	.word	0x4000f500

0000474c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    474c:	b570      	push	{r4, r5, r6, lr}
    474e:	4c0a      	ldr	r4, [pc, #40]	; (4778 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    4750:	460d      	mov	r5, r1
    4752:	6020      	str	r0, [r4, #0]
    4754:	f7ff ffc4 	bl	46e0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x9c>
    4758:	6820      	ldr	r0, [r4, #0]
    475a:	f7ff ff93 	bl	4684 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x40>
    475e:	f000 f877 	bl	4850 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4762:	f7ff ff77 	bl	4654 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    4766:	f009 f80f 	bl	d788 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    476a:	4628      	mov	r0, r5
    476c:	f000 f8aa 	bl	48c4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4774:	f000 b8c2 	b.w	48fc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4778:	20000084 	.word	0x20000084

0000477c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    477c:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4780:	4e2f      	ldr	r6, [pc, #188]	; (4840 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    4782:	4683      	mov	fp, r0
    4784:	6830      	ldr	r0, [r6, #0]
    4786:	9001      	str	r0, [sp, #4]
    4788:	2701      	movs	r7, #1
    478a:	482e      	ldr	r0, [pc, #184]	; (4844 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    478c:	f007 fe63 	bl	c456 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4790:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4844 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    4794:	b920      	cbnz	r0, 47a0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    4796:	2700      	movs	r7, #0
    4798:	f108 0001 	add.w	r0, r8, #1
    479c:	f007 fe72 	bl	c484 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    47a0:	4c29      	ldr	r4, [pc, #164]	; (4848 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    47a2:	2500      	movs	r5, #0
    47a4:	f04f 0903 	mov.w	r9, #3
    47a8:	2001      	movs	r0, #1
    47aa:	6060      	str	r0, [r4, #4]
    47ac:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    47b0:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    47b4:	f8c6 b000 	str.w	fp, [r6]
    47b8:	6020      	str	r0, [r4, #0]
    47ba:	f8df a090 	ldr.w	sl, [pc, #144]	; 484c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    47be:	e017      	b.n	47f0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    47c0:	f8da 0000 	ldr.w	r0, [sl]
    47c4:	06c0      	lsls	r0, r0, #27
    47c6:	d513      	bpl.n	47f0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    47c8:	200e      	movs	r0, #14
    47ca:	f008 ffce 	bl	d76a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    47ce:	f3ef 8010 	mrs	r0, PRIMASK
    47d2:	9000      	str	r0, [sp, #0]
    47d4:	b672      	cpsid	i
    47d6:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    47da:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    47de:	b920      	cbnz	r0, 47ea <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    47e0:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    47e4:	b908      	cbnz	r0, 47ea <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    47e6:	f7ff f921 	bl	3a2c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    47ea:	9800      	ldr	r0, [sp, #0]
    47ec:	b900      	cbnz	r0, 47f0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    47ee:	b662      	cpsie	i
    47f0:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    47f4:	b918      	cbnz	r0, 47fe <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    47f6:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    47fa:	2800      	cmp	r0, #0
    47fc:	d0e0      	beq.n	47c0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    47fe:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4802:	2800      	cmp	r0, #0
    4804:	d1d0      	bne.n	47a8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    4806:	b137      	cbz	r7, 4816 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    4808:	9801      	ldr	r0, [sp, #4]
    480a:	6030      	str	r0, [r6, #0]
    480c:	f108 0001 	add.w	r0, r8, #1
    4810:	f007 fe21 	bl	c456 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4814:	e011      	b.n	483a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    4816:	f108 0001 	add.w	r0, r8, #1
    481a:	f007 fe1c 	bl	c456 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    481e:	2800      	cmp	r0, #0
    4820:	d1ba      	bne.n	4798 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4822:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    4826:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    482a:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    482e:	200e      	movs	r0, #14
    4830:	f008 ff9b 	bl	d76a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4834:	4803      	ldr	r0, [pc, #12]	; (4844 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    4836:	f007 fe25 	bl	c484 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    483a:	2000      	movs	r0, #0
    483c:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4840:	4000e504 	.word	0x4000e504
    4844:	2000027f 	.word	0x2000027f
    4848:	4000e000 	.word	0x4000e000
    484c:	e000ed10 	.word	0xe000ed10

00004850 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4850:	b510      	push	{r4, lr}
    4852:	4808      	ldr	r0, [pc, #32]	; (4874 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4854:	f007 fe12 	bl	c47c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4858:	b108      	cbz	r0, 485e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    485a:	2124      	movs	r1, #36	; 0x24
    485c:	e006      	b.n	486c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    485e:	4805      	ldr	r0, [pc, #20]	; (4874 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4860:	1c40      	adds	r0, r0, #1
    4862:	f007 fe0b 	bl	c47c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4866:	2800      	cmp	r0, #0
    4868:	d003      	beq.n	4872 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    486a:	2128      	movs	r1, #40	; 0x28
    486c:	201d      	movs	r0, #29
    486e:	f7ff fa93 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4872:	bd10      	pop	{r4, pc}
    4874:	2000027f 	.word	0x2000027f

00004878 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4878:	b570      	push	{r4, r5, r6, lr}
    487a:	4911      	ldr	r1, [pc, #68]	; (48c0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    487c:	680a      	ldr	r2, [r1, #0]
    487e:	b1ea      	cbz	r2, 48bc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4880:	2300      	movs	r3, #0
    4882:	461d      	mov	r5, r3
    4884:	2401      	movs	r4, #1
    4886:	684a      	ldr	r2, [r1, #4]
    4888:	1c52      	adds	r2, r2, #1
    488a:	604a      	str	r2, [r1, #4]
    488c:	2a0c      	cmp	r2, #12
    488e:	d300      	bcc.n	4892 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4890:	604d      	str	r5, [r1, #4]
    4892:	790e      	ldrb	r6, [r1, #4]
    4894:	fa04 f206 	lsl.w	r2, r4, r6
    4898:	680e      	ldr	r6, [r1, #0]
    489a:	4216      	tst	r6, r2
    489c:	d00b      	beq.n	48b6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    489e:	f3ef 8310 	mrs	r3, PRIMASK
    48a2:	b672      	cpsid	i
    48a4:	680c      	ldr	r4, [r1, #0]
    48a6:	4394      	bics	r4, r2
    48a8:	600c      	str	r4, [r1, #0]
    48aa:	b903      	cbnz	r3, 48ae <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    48ac:	b662      	cpsie	i
    48ae:	6849      	ldr	r1, [r1, #4]
    48b0:	6001      	str	r1, [r0, #0]
    48b2:	2000      	movs	r0, #0
    48b4:	bd70      	pop	{r4, r5, r6, pc}
    48b6:	1c5b      	adds	r3, r3, #1
    48b8:	2b0c      	cmp	r3, #12
    48ba:	d3e4      	bcc.n	4886 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    48bc:	2005      	movs	r0, #5
    48be:	bd70      	pop	{r4, r5, r6, pc}
    48c0:	20000088 	.word	0x20000088

000048c4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    48c4:	4802      	ldr	r0, [pc, #8]	; (48d0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    48c6:	2100      	movs	r1, #0
    48c8:	6001      	str	r1, [r0, #0]
    48ca:	6041      	str	r1, [r0, #4]
    48cc:	4770      	bx	lr
    48ce:	0000      	.short	0x0000
    48d0:	20000088 	.word	0x20000088

000048d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    48d4:	b510      	push	{r4, lr}
    48d6:	4c08      	ldr	r4, [pc, #32]	; (48f8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    48d8:	7861      	ldrb	r1, [r4, #1]
    48da:	b109      	cbz	r1, 48e0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    48dc:	200f      	movs	r0, #15
    48de:	bd10      	pop	{r4, pc}
    48e0:	f7ff f830 	bl	3944 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    48e4:	7020      	strb	r0, [r4, #0]
    48e6:	28ff      	cmp	r0, #255	; 0xff
    48e8:	d001      	beq.n	48ee <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    48ea:	2000      	movs	r0, #0
    48ec:	bd10      	pop	{r4, pc}
    48ee:	2176      	movs	r1, #118	; 0x76
    48f0:	201f      	movs	r0, #31
    48f2:	f7ff fa51 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48f6:	0000      	.short	0x0000
    48f8:	20000090 	.word	0x20000090

000048fc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    48fc:	4901      	ldr	r1, [pc, #4]	; (4904 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    48fe:	2000      	movs	r0, #0
    4900:	7048      	strb	r0, [r1, #1]
    4902:	4770      	bx	lr
    4904:	20000090 	.word	0x20000090

00004908 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4908:	4806      	ldr	r0, [pc, #24]	; (4924 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    490a:	4a07      	ldr	r2, [pc, #28]	; (4928 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    490c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    490e:	8852      	ldrh	r2, [r2, #2]
    4910:	4291      	cmp	r1, r2
    4912:	d104      	bne.n	491e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4914:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4918:	b108      	cbz	r0, 491e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    491a:	2000      	movs	r0, #0
    491c:	4770      	bx	lr
    491e:	2001      	movs	r0, #1
    4920:	4770      	bx	lr
    4922:	0000      	.short	0x0000
    4924:	200010d4 	.word	0x200010d4
    4928:	2000026c 	.word	0x2000026c

0000492c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    492c:	4901      	ldr	r1, [pc, #4]	; (4934 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    492e:	8048      	strh	r0, [r1, #2]
    4930:	4770      	bx	lr
    4932:	0000      	.short	0x0000
    4934:	2000026c 	.word	0x2000026c

00004938 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4938:	4808      	ldr	r0, [pc, #32]	; (495c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    493a:	4a09      	ldr	r2, [pc, #36]	; (4960 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    493c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    493e:	8852      	ldrh	r2, [r2, #2]
    4940:	4291      	cmp	r1, r2
    4942:	d109      	bne.n	4958 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4944:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4948:	8481      	strh	r1, [r0, #36]	; 0x24
    494a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    494e:	b119      	cbz	r1, 4958 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4950:	2100      	movs	r1, #0
    4952:	7001      	strb	r1, [r0, #0]
    4954:	2001      	movs	r0, #1
    4956:	4770      	bx	lr
    4958:	2000      	movs	r0, #0
    495a:	4770      	bx	lr
    495c:	200010d4 	.word	0x200010d4
    4960:	2000026c 	.word	0x2000026c

00004964 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4964:	4807      	ldr	r0, [pc, #28]	; (4984 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4966:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    496a:	2901      	cmp	r1, #1
    496c:	d007      	beq.n	497e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    496e:	2101      	movs	r1, #1
    4970:	7001      	strb	r1, [r0, #0]
    4972:	4805      	ldr	r0, [pc, #20]	; (4988 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4974:	4903      	ldr	r1, [pc, #12]	; (4984 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4976:	8800      	ldrh	r0, [r0, #0]
    4978:	8488      	strh	r0, [r1, #36]	; 0x24
    497a:	2001      	movs	r0, #1
    497c:	4770      	bx	lr
    497e:	2000      	movs	r0, #0
    4980:	4770      	bx	lr
    4982:	0000      	.short	0x0000
    4984:	200010d4 	.word	0x200010d4
    4988:	2000026c 	.word	0x2000026c

0000498c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    498c:	4906      	ldr	r1, [pc, #24]	; (49a8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    498e:	4b07      	ldr	r3, [pc, #28]	; (49ac <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4990:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4992:	885b      	ldrh	r3, [r3, #2]
    4994:	429a      	cmp	r2, r3
    4996:	d105      	bne.n	49a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4998:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    499c:	b112      	cbz	r2, 49a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    499e:	6001      	str	r1, [r0, #0]
    49a0:	2001      	movs	r0, #1
    49a2:	4770      	bx	lr
    49a4:	2000      	movs	r0, #0
    49a6:	4770      	bx	lr
    49a8:	200010d4 	.word	0x200010d4
    49ac:	2000026c 	.word	0x2000026c

000049b0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    49b0:	4909      	ldr	r1, [pc, #36]	; (49d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    49b2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    49b4:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    49b8:	3bff      	subs	r3, #255	; 0xff
    49ba:	d002      	beq.n	49c2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    49bc:	2100      	movs	r1, #0
    49be:	6001      	str	r1, [r0, #0]
    49c0:	e007      	b.n	49d2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    49c2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    49c6:	4904      	ldr	r1, [pc, #16]	; (49d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    49c8:	2a01      	cmp	r2, #1
    49ca:	d002      	beq.n	49d2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    49cc:	6001      	str	r1, [r0, #0]
    49ce:	2001      	movs	r0, #1
    49d0:	4770      	bx	lr
    49d2:	2000      	movs	r0, #0
    49d4:	4770      	bx	lr
    49d6:	0000      	.short	0x0000
    49d8:	200010d4 	.word	0x200010d4

000049dc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    49dc:	4901      	ldr	r1, [pc, #4]	; (49e4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    49de:	8008      	strh	r0, [r1, #0]
    49e0:	4770      	bx	lr
    49e2:	0000      	.short	0x0000
    49e4:	2000026c 	.word	0x2000026c

000049e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    49e8:	4905      	ldr	r1, [pc, #20]	; (4a00 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    49ea:	2000      	movs	r0, #0
    49ec:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    49f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    49f4:	8488      	strh	r0, [r1, #36]	; 0x24
    49f6:	4903      	ldr	r1, [pc, #12]	; (4a04 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    49f8:	8008      	strh	r0, [r1, #0]
    49fa:	8048      	strh	r0, [r1, #2]
    49fc:	4770      	bx	lr
    49fe:	0000      	.short	0x0000
    4a00:	200010d4 	.word	0x200010d4
    4a04:	2000026c 	.word	0x2000026c
    4a08:	4905      	ldr	r1, [pc, #20]	; (4a20 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4a0a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4a0c:	4282      	cmp	r2, r0
    4a0e:	d105      	bne.n	4a1c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4a10:	2000      	movs	r0, #0
    4a12:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4a16:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4a1a:	8488      	strh	r0, [r1, #36]	; 0x24
    4a1c:	4770      	bx	lr
    4a1e:	0000      	.short	0x0000
    4a20:	200010d4 	.word	0x200010d4

00004a24 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4a24:	4a0a      	ldr	r2, [pc, #40]	; (4a50 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4a26:	b110      	cbz	r0, 4a2e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4a28:	2801      	cmp	r0, #1
    4a2a:	d007      	beq.n	4a3c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4a2c:	e00e      	b.n	4a4c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a2e:	7850      	ldrb	r0, [r2, #1]
    4a30:	b160      	cbz	r0, 4a4c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a32:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4a36:	6008      	str	r0, [r1, #0]
    4a38:	88d0      	ldrh	r0, [r2, #6]
    4a3a:	e004      	b.n	4a46 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4a3c:	7810      	ldrb	r0, [r2, #0]
    4a3e:	b128      	cbz	r0, 4a4c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a40:	6890      	ldr	r0, [r2, #8]
    4a42:	6008      	str	r0, [r1, #0]
    4a44:	8990      	ldrh	r0, [r2, #12]
    4a46:	8088      	strh	r0, [r1, #4]
    4a48:	2001      	movs	r0, #1
    4a4a:	4770      	bx	lr
    4a4c:	2000      	movs	r0, #0
    4a4e:	4770      	bx	lr
    4a50:	20000281 	.word	0x20000281

00004a54 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4a54:	4a08      	ldr	r2, [pc, #32]	; (4a78 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4a56:	2301      	movs	r3, #1
    4a58:	b138      	cbz	r0, 4a6a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4a5a:	2801      	cmp	r0, #1
    4a5c:	d104      	bne.n	4a68 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4a5e:	7013      	strb	r3, [r2, #0]
    4a60:	6808      	ldr	r0, [r1, #0]
    4a62:	6090      	str	r0, [r2, #8]
    4a64:	8888      	ldrh	r0, [r1, #4]
    4a66:	8190      	strh	r0, [r2, #12]
    4a68:	4770      	bx	lr
    4a6a:	7053      	strb	r3, [r2, #1]
    4a6c:	6808      	ldr	r0, [r1, #0]
    4a6e:	f8c2 0002 	str.w	r0, [r2, #2]
    4a72:	8888      	ldrh	r0, [r1, #4]
    4a74:	80d0      	strh	r0, [r2, #6]
    4a76:	4770      	bx	lr
    4a78:	20000281 	.word	0x20000281

00004a7c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4a7c:	4906      	ldr	r1, [pc, #24]	; (4a98 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4a7e:	b110      	cbz	r0, 4a86 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4a80:	2801      	cmp	r0, #1
    4a82:	d002      	beq.n	4a8a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4a84:	e005      	b.n	4a92 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4a86:	7848      	ldrb	r0, [r1, #1]
    4a88:	e000      	b.n	4a8c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4a8a:	7808      	ldrb	r0, [r1, #0]
    4a8c:	b108      	cbz	r0, 4a92 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4a8e:	2001      	movs	r0, #1
    4a90:	4770      	bx	lr
    4a92:	2000      	movs	r0, #0
    4a94:	4770      	bx	lr
    4a96:	0000      	.short	0x0000
    4a98:	20000281 	.word	0x20000281

00004a9c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4a9c:	4901      	ldr	r1, [pc, #4]	; (4aa4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4a9e:	7448      	strb	r0, [r1, #17]
    4aa0:	4770      	bx	lr
    4aa2:	0000      	.short	0x0000
    4aa4:	20000932 	.word	0x20000932

00004aa8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4aa8:	b578      	push	{r3, r4, r5, r6, lr}
    4aaa:	4913      	ldr	r1, [pc, #76]	; (4af8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    4aac:	7c4a      	ldrb	r2, [r1, #17]
    4aae:	b30a      	cbz	r2, 4af4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4ab0:	7c0a      	ldrb	r2, [r1, #16]
    4ab2:	f88d 2000 	strb.w	r2, [sp]
    4ab6:	9a00      	ldr	r2, [sp, #0]
    4ab8:	9200      	str	r2, [sp, #0]
    4aba:	f89d 2000 	ldrb.w	r2, [sp]
    4abe:	b1ca      	cbz	r2, 4af4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4ac0:	2300      	movs	r3, #0
    4ac2:	f101 0210 	add.w	r2, r1, #16
    4ac6:	241f      	movs	r4, #31
    4ac8:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    4acc:	7c0e      	ldrb	r6, [r1, #16]
    4ace:	f88d 6000 	strb.w	r6, [sp]
    4ad2:	9e00      	ldr	r6, [sp, #0]
    4ad4:	9600      	str	r6, [sp, #0]
    4ad6:	f89d 6000 	ldrb.w	r6, [sp]
    4ada:	b14e      	cbz	r6, 4af0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    4adc:	7013      	strb	r3, [r2, #0]
    4ade:	7043      	strb	r3, [r0, #1]
    4ae0:	7004      	strb	r4, [r0, #0]
    4ae2:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4ae6:	6046      	str	r6, [r0, #4]
    4ae8:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4aec:	6086      	str	r6, [r0, #8]
    4aee:	e7ed      	b.n	4acc <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4af0:	2001      	movs	r0, #1
    4af2:	bd78      	pop	{r3, r4, r5, r6, pc}
    4af4:	2000      	movs	r0, #0
    4af6:	bd78      	pop	{r3, r4, r5, r6, pc}
    4af8:	20000932 	.word	0x20000932

00004afc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4afc:	b510      	push	{r4, lr}
    4afe:	4604      	mov	r4, r0
    4b00:	f000 f966 	bl	4dd0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4b04:	b118      	cbz	r0, 4b0e <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    4b06:	21bd      	movs	r1, #189	; 0xbd
    4b08:	2027      	movs	r0, #39	; 0x27
    4b0a:	f7ff f945 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b0e:	4803      	ldr	r0, [pc, #12]	; (4b1c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    4b10:	2101      	movs	r1, #1
    4b12:	f009 fa13 	bl	df3c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4b16:	4802      	ldr	r0, [pc, #8]	; (4b20 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4b18:	62c4      	str	r4, [r0, #44]	; 0x2c
    4b1a:	bd10      	pop	{r4, pc}
    4b1c:	20000910 	.word	0x20000910
    4b20:	200000ac 	.word	0x200000ac

00004b24 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4b24:	4901      	ldr	r1, [pc, #4]	; (4b2c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4b26:	2001      	movs	r0, #1
    4b28:	7188      	strb	r0, [r1, #6]
    4b2a:	4770      	bx	lr
    4b2c:	200000ac 	.word	0x200000ac

00004b30 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4b30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b34:	4d6b      	ldr	r5, [pc, #428]	; (4ce4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b4>)
    4b36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4b38:	782e      	ldrb	r6, [r5, #0]
    4b3a:	bbee      	cbnz	r6, 4bb8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4b3c:	b3e2      	cbz	r2, 4bb8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4b3e:	b3db      	cbz	r3, 4bb8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4b40:	b3d4      	cbz	r4, 4bb8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4b42:	f105 0614 	add.w	r6, r5, #20
    4b46:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4b4a:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    4b4e:	2700      	movs	r7, #0
    4b50:	71af      	strb	r7, [r5, #6]
    4b52:	716f      	strb	r7, [r5, #5]
    4b54:	70ef      	strb	r7, [r5, #3]
    4b56:	70af      	strb	r7, [r5, #2]
    4b58:	712f      	strb	r7, [r5, #4]
    4b5a:	81af      	strh	r7, [r5, #12]
    4b5c:	81ef      	strh	r7, [r5, #14]
    4b5e:	f000 f97b 	bl	4e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4b62:	4606      	mov	r6, r0
    4b64:	f000 f972 	bl	4e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4b68:	4604      	mov	r4, r0
    4b6a:	f006 feb5 	bl	b8d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4b6e:	f006 fba5 	bl	b2bc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4b72:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    4b76:	f006 ff39 	bl	b9ec <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4b7a:	f104 0018 	add.w	r0, r4, #24
    4b7e:	f007 f80f 	bl	bba0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4b82:	6920      	ldr	r0, [r4, #16]
    4b84:	f007 f802 	bl	bb8c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4b88:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    4b8c:	f007 f822 	bl	bbd4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4b90:	f04f 0b01 	mov.w	fp, #1
    4b94:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    4b98:	2000      	movs	r0, #0
    4b9a:	f006 fd69 	bl	b670 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4b9e:	2800      	cmp	r0, #0
    4ba0:	d07e      	beq.n	4ca0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>
    4ba2:	4851      	ldr	r0, [pc, #324]	; (4ce8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b8>)
    4ba4:	f006 fdd8 	bl	b758 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4ba8:	8820      	ldrh	r0, [r4, #0]
    4baa:	f7ff fd09 	bl	45c0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4bae:	6328      	str	r0, [r5, #48]	; 0x30
    4bb0:	8820      	ldrh	r0, [r4, #0]
    4bb2:	f7ff fcef 	bl	4594 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4bb6:	e000      	b.n	4bba <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    4bb8:	e00a      	b.n	4bd0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa0>
    4bba:	6368      	str	r0, [r5, #52]	; 0x34
    4bbc:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    4bc0:	f88d 0000 	strb.w	r0, [sp]
    4bc4:	9800      	ldr	r0, [sp, #0]
    4bc6:	9000      	str	r0, [sp, #0]
    4bc8:	f89d 0000 	ldrb.w	r0, [sp]
    4bcc:	b118      	cbz	r0, 4bd6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa6>
    4bce:	e012      	b.n	4bf6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4bd0:	f44f 718a 	mov.w	r1, #276	; 0x114
    4bd4:	e082      	b.n	4cdc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>
    4bd6:	6f20      	ldr	r0, [r4, #112]	; 0x70
    4bd8:	b168      	cbz	r0, 4bf6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4bda:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    4bdc:	88b1      	ldrh	r1, [r6, #4]
    4bde:	4288      	cmp	r0, r1
    4be0:	d109      	bne.n	4bf6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4be2:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    4be6:	2201      	movs	r2, #1
    4be8:	4408      	add	r0, r1
    4bea:	8670      	strh	r0, [r6, #50]	; 0x32
    4bec:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    4bf0:	6f21      	ldr	r1, [r4, #112]	; 0x70
    4bf2:	f7fd fdad 	bl	2750 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4bf6:	f106 0168 	add.w	r1, r6, #104	; 0x68
    4bfa:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 4cec <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>
    4bfe:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4c02:	f109 0808 	add.w	r8, r9, #8
    4c06:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4c0a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    4c0c:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    4c10:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    4c12:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    4c16:	f000 f98d 	bl	4f34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>
    4c1a:	4601      	mov	r1, r0
    4c1c:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    4c1e:	46ba      	mov	sl, r7
    4c20:	f008 ff77 	bl	db12 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4c24:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    4c26:	4281      	cmp	r1, r0
    4c28:	d200      	bcs.n	4c2c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    4c2a:	4608      	mov	r0, r1
    4c2c:	7228      	strb	r0, [r5, #8]
    4c2e:	46a8      	mov	r8, r5
    4c30:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4c34:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    4c36:	7cf7      	ldrb	r7, [r6, #19]
    4c38:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    4c3a:	2908      	cmp	r1, #8
    4c3c:	d100      	bne.n	4c40 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    4c3e:	2104      	movs	r1, #4
    4c40:	f008 ff67 	bl	db12 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4c44:	b90f      	cbnz	r7, 4c4a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11a>
    4c46:	1d00      	adds	r0, r0, #4
    4c48:	b280      	uxth	r0, r0
    4c4a:	4285      	cmp	r5, r0
    4c4c:	d200      	bcs.n	4c50 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    4c4e:	4628      	mov	r0, r5
    4c50:	b2c0      	uxtb	r0, r0
    4c52:	f888 0009 	strb.w	r0, [r8, #9]
    4c56:	7cf2      	ldrb	r2, [r6, #19]
    4c58:	b102      	cbz	r2, 4c5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12c>
    4c5a:	2204      	movs	r2, #4
    4c5c:	4410      	add	r0, r2
    4c5e:	b2c0      	uxtb	r0, r0
    4c60:	f888 0007 	strb.w	r0, [r8, #7]
    4c64:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    4c68:	1d09      	adds	r1, r1, #4
    4c6a:	4281      	cmp	r1, r0
    4c6c:	d202      	bcs.n	4c74 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x144>
    4c6e:	f240 119f 	movw	r1, #415	; 0x19f
    4c72:	e033      	b.n	4cdc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>
    4c74:	7cb0      	ldrb	r0, [r6, #18]
    4c76:	b1b0      	cbz	r0, 4ca6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    4c78:	481c      	ldr	r0, [pc, #112]	; (4cec <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    4c7a:	3008      	adds	r0, #8
    4c7c:	f880 b018 	strb.w	fp, [r0, #24]
    4c80:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    4c84:	e9c0 1204 	strd	r1, r2, [r0, #16]
    4c88:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4c8c:	f008 fe06 	bl	d89c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4c90:	4916      	ldr	r1, [pc, #88]	; (4cec <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    4c92:	4603      	mov	r3, r0
    4c94:	22fb      	movs	r2, #251	; 0xfb
    4c96:	3108      	adds	r1, #8
    4c98:	2000      	movs	r0, #0
    4c9a:	f006 fb59 	bl	b350 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    4c9e:	e000      	b.n	4ca2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    4ca0:	e018      	b.n	4cd4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>
    4ca2:	f006 fb8b 	bl	b3bc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    4ca6:	2001      	movs	r0, #1
    4ca8:	f000 fb94 	bl	53d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    4cac:	4810      	ldr	r0, [pc, #64]	; (4cf0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1c0>)
    4cae:	6800      	ldr	r0, [r0, #0]
    4cb0:	2803      	cmp	r0, #3
    4cb2:	d011      	beq.n	4cd8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    4cb4:	280b      	cmp	r0, #11
    4cb6:	d00f      	beq.n	4cd8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    4cb8:	4648      	mov	r0, r9
    4cba:	f840 af52 	str.w	sl, [r0, #82]!
    4cbe:	f8c0 a004 	str.w	sl, [r0, #4]
    4cc2:	480a      	ldr	r0, [pc, #40]	; (4cec <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    4cc4:	88b1      	ldrh	r1, [r6, #4]
    4cc6:	3052      	adds	r0, #82	; 0x52
    4cc8:	8041      	strh	r1, [r0, #2]
    4cca:	8821      	ldrh	r1, [r4, #0]
    4ccc:	8001      	strh	r1, [r0, #0]
    4cce:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    4cd2:	7101      	strb	r1, [r0, #4]
    4cd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4cd8:	f240 11c7 	movw	r1, #455	; 0x1c7
    4cdc:	2027      	movs	r0, #39	; 0x27
    4cde:	f7ff f85b 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ce2:	0000      	.short	0x0000
    4ce4:	200000ac 	.word	0x200000ac
    4ce8:	00005558 	.word	0x00005558
    4cec:	200008e0 	.word	0x200008e0
    4cf0:	40001550 	.word	0x40001550

00004cf4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4cf8:	4605      	mov	r5, r0
    4cfa:	f000 f8ad 	bl	4e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4cfe:	4e33      	ldr	r6, [pc, #204]	; (4dcc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4d00:	4604      	mov	r4, r0
    4d02:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4d04:	7847      	ldrb	r7, [r0, #1]
    4d06:	b10d      	cbz	r5, 4d0c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4d08:	2d01      	cmp	r5, #1
    4d0a:	d103      	bne.n	4d14 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4d0c:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4d0e:	f007 fd74 	bl	c7fa <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4d12:	7070      	strb	r0, [r6, #1]
    4d14:	7870      	ldrb	r0, [r6, #1]
    4d16:	f04f 0800 	mov.w	r8, #0
    4d1a:	f04f 0901 	mov.w	r9, #1
    4d1e:	b150      	cbz	r0, 4d36 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4d20:	2801      	cmp	r0, #1
    4d22:	d01a      	beq.n	4d5a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4d24:	2802      	cmp	r0, #2
    4d26:	d034      	beq.n	4d92 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4d28:	2803      	cmp	r0, #3
    4d2a:	d048      	beq.n	4dbe <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    4d2c:	f240 4114 	movw	r1, #1044	; 0x414
    4d30:	2027      	movs	r0, #39	; 0x27
    4d32:	f7ff f831 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d36:	2d01      	cmp	r5, #1
    4d38:	d032      	beq.n	4da0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4d3a:	f000 f8e7 	bl	4f0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4d3e:	4639      	mov	r1, r7
    4d40:	2201      	movs	r2, #1
    4d42:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d44:	f008 fa33 	bl	d1ae <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4d48:	e028      	b.n	4d9c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4d4a:	bf00      	nop
    4d4c:	f884 8008 	strb.w	r8, [r4, #8]
    4d50:	e031      	b.n	4db6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d52:	bf00      	nop
    4d54:	f884 9008 	strb.w	r9, [r4, #8]
    4d58:	e02d      	b.n	4db6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d5a:	2d01      	cmp	r5, #1
    4d5c:	d008      	beq.n	4d70 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4d5e:	f000 f8d5 	bl	4f0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4d62:	4639      	mov	r1, r7
    4d64:	2200      	movs	r2, #0
    4d66:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d68:	f008 fa21 	bl	d1ae <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4d6c:	2d02      	cmp	r5, #2
    4d6e:	d00b      	beq.n	4d88 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d70:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    4d74:	1c40      	adds	r0, r0, #1
    4d76:	f141 0100 	adc.w	r1, r1, #0
    4d7a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    4d7e:	7a20      	ldrb	r0, [r4, #8]
    4d80:	2801      	cmp	r0, #1
    4d82:	d003      	beq.n	4d8c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4d84:	f884 9008 	strb.w	r9, [r4, #8]
    4d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d8c:	f884 8008 	strb.w	r8, [r4, #8]
    4d90:	e7fa      	b.n	4d88 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d92:	2d01      	cmp	r5, #1
    4d94:	d004      	beq.n	4da0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4d96:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d98:	f008 fc43 	bl	d622 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4d9c:	2d02      	cmp	r5, #2
    4d9e:	d0f3      	beq.n	4d88 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4da0:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    4da4:	1c40      	adds	r0, r0, #1
    4da6:	f141 0100 	adc.w	r1, r1, #0
    4daa:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    4dae:	7a20      	ldrb	r0, [r4, #8]
    4db0:	2801      	cmp	r0, #1
    4db2:	d1cf      	bne.n	4d54 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4db4:	e7ca      	b.n	4d4c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4db6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4dba:	f005 bc21 	b.w	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4dbe:	2d01      	cmp	r5, #1
    4dc0:	d0e2      	beq.n	4d88 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4dc2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4dc4:	f008 fc2d 	bl	d622 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4dc8:	e7f5      	b.n	4db6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4dca:	0000      	.short	0x0000
    4dcc:	200000ac 	.word	0x200000ac

00004dd0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4dd0:	4804      	ldr	r0, [pc, #16]	; (4de4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4dd2:	7800      	ldrb	r0, [r0, #0]
    4dd4:	b108      	cbz	r0, 4dda <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4dd6:	200c      	movs	r0, #12
    4dd8:	4770      	bx	lr
    4dda:	4903      	ldr	r1, [pc, #12]	; (4de8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4ddc:	2000      	movs	r0, #0
    4dde:	7448      	strb	r0, [r1, #17]
    4de0:	4770      	bx	lr
    4de2:	0000      	.short	0x0000
    4de4:	200000ac 	.word	0x200000ac
    4de8:	20000932 	.word	0x20000932

00004dec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4dec:	4812      	ldr	r0, [pc, #72]	; (4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    4dee:	b508      	push	{r3, lr}
    4df0:	7801      	ldrb	r1, [r0, #0]
    4df2:	b139      	cbz	r1, 4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    4df4:	7800      	ldrb	r0, [r0, #0]
    4df6:	2801      	cmp	r0, #1
    4df8:	d006      	beq.n	4e08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4dfa:	f240 11df 	movw	r1, #479	; 0x1df
    4dfe:	2027      	movs	r0, #39	; 0x27
    4e00:	f7fe ffca 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e04:	f000 f9ce 	bl	51a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    4e08:	f000 f820 	bl	4e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4e0c:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    4e10:	f88d 1000 	strb.w	r1, [sp]
    4e14:	9900      	ldr	r1, [sp, #0]
    4e16:	9100      	str	r1, [sp, #0]
    4e18:	f89d 1000 	ldrb.w	r1, [sp]
    4e1c:	2900      	cmp	r1, #0
    4e1e:	d10a      	bne.n	4e36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    4e20:	6f01      	ldr	r1, [r0, #112]	; 0x70
    4e22:	2900      	cmp	r1, #0
    4e24:	d007      	beq.n	4e36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    4e26:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    4e2a:	2200      	movs	r2, #0
    4e2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4e30:	4611      	mov	r1, r2
    4e32:	f7fd bc8d 	b.w	2750 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4e36:	bd08      	pop	{r3, pc}
    4e38:	200000ac 	.word	0x200000ac
    4e3c:	4a02      	ldr	r2, [pc, #8]	; (4e48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4e3e:	8993      	ldrh	r3, [r2, #12]
    4e40:	4303      	orrs	r3, r0
    4e42:	8193      	strh	r3, [r2, #12]
    4e44:	6952      	ldr	r2, [r2, #20]
    4e46:	4710      	bx	r2
    4e48:	200000ac 	.word	0x200000ac
    4e4c:	4801      	ldr	r0, [pc, #4]	; (4e54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4e4e:	6840      	ldr	r0, [r0, #4]
    4e50:	4770      	bx	lr
    4e52:	0000      	.short	0x0000
    4e54:	200000e4 	.word	0x200000e4
    4e58:	4801      	ldr	r0, [pc, #4]	; (4e60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    4e5a:	6840      	ldr	r0, [r0, #4]
    4e5c:	3078      	adds	r0, #120	; 0x78
    4e5e:	4770      	bx	lr
    4e60:	200000e4 	.word	0x200000e4
    4e64:	4a01      	ldr	r2, [pc, #4]	; (4e6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    4e66:	2100      	movs	r1, #0
    4e68:	6952      	ldr	r2, [r2, #20]
    4e6a:	4710      	bx	r2
    4e6c:	200000ac 	.word	0x200000ac
    4e70:	b570      	push	{r4, r5, r6, lr}
    4e72:	f7ff fff1 	bl	4e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4e76:	4604      	mov	r4, r0
    4e78:	f7ff ffe8 	bl	4e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4e7c:	4605      	mov	r5, r0
    4e7e:	4621      	mov	r1, r4
    4e80:	f008 ff0f 	bl	dca2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    4e84:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    4e88:	2901      	cmp	r1, #1
    4e8a:	d114      	bne.n	4eb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    4e8c:	2800      	cmp	r0, #0
    4e8e:	d012      	beq.n	4eb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    4e90:	4909      	ldr	r1, [pc, #36]	; (4eb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>)
    4e92:	2001      	movs	r0, #1
    4e94:	684a      	ldr	r2, [r1, #4]
    4e96:	8829      	ldrh	r1, [r5, #0]
    4e98:	f8a2 118a 	strh.w	r1, [r2, #394]	; 0x18a
    4e9c:	7a61      	ldrb	r1, [r4, #9]
    4e9e:	f882 118c 	strb.w	r1, [r2, #396]	; 0x18c
    4ea2:	7aa1      	ldrb	r1, [r4, #10]
    4ea4:	f882 118d 	strb.w	r1, [r2, #397]	; 0x18d
    4ea8:	f502 72c4 	add.w	r2, r2, #392	; 0x188
    4eac:	7010      	strb	r0, [r2, #0]
    4eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4eb2:	f005 bba5 	b.w	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4eb6:	bd70      	pop	{r4, r5, r6, pc}
    4eb8:	200000e4 	.word	0x200000e4
    4ebc:	b570      	push	{r4, r5, r6, lr}
    4ebe:	4605      	mov	r5, r0
    4ec0:	2901      	cmp	r1, #1
    4ec2:	d81c      	bhi.n	4efe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4ec4:	4c10      	ldr	r4, [pc, #64]	; (4f08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>)
    4ec6:	69a1      	ldr	r1, [r4, #24]
    4ec8:	4788      	blx	r1
    4eca:	b1c0      	cbz	r0, 4efe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4ecc:	7960      	ldrb	r0, [r4, #5]
    4ece:	b9b0      	cbnz	r0, 4efe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4ed0:	2d01      	cmp	r5, #1
    4ed2:	d116      	bne.n	4f02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    4ed4:	f104 0010 	add.w	r0, r4, #16
    4ed8:	7800      	ldrb	r0, [r0, #0]
    4eda:	06c1      	lsls	r1, r0, #27
    4edc:	d405      	bmi.n	4eea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    4ede:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4ee0:	7809      	ldrb	r1, [r1, #0]
    4ee2:	06c9      	lsls	r1, r1, #27
    4ee4:	d401      	bmi.n	4eea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    4ee6:	2101      	movs	r1, #1
    4ee8:	e000      	b.n	4eec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    4eea:	2100      	movs	r1, #0
    4eec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4eee:	b91a      	cbnz	r2, 4ef8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    4ef0:	8962      	ldrh	r2, [r4, #10]
    4ef2:	b10a      	cbz	r2, 4ef8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    4ef4:	06c0      	lsls	r0, r0, #27
    4ef6:	d502      	bpl.n	4efe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4ef8:	89a0      	ldrh	r0, [r4, #12]
    4efa:	4301      	orrs	r1, r0
    4efc:	d001      	beq.n	4f02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    4efe:	2001      	movs	r0, #1
    4f00:	bd70      	pop	{r4, r5, r6, pc}
    4f02:	2000      	movs	r0, #0
    4f04:	bd70      	pop	{r4, r5, r6, pc}
    4f06:	0000      	.short	0x0000
    4f08:	200000ac 	.word	0x200000ac
    4f0c:	b510      	push	{r4, lr}
    4f0e:	4c08      	ldr	r4, [pc, #32]	; (4f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>)
    4f10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4f12:	b138      	cbz	r0, 4f24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    4f14:	8962      	ldrh	r2, [r4, #10]
    4f16:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4f18:	1cd2      	adds	r2, r2, #3
    4f1a:	f007 fb45 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4f1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4f20:	6260      	str	r0, [r4, #36]	; 0x24
    4f22:	bd10      	pop	{r4, pc}
    4f24:	f240 415a 	movw	r1, #1114	; 0x45a
    4f28:	2027      	movs	r0, #39	; 0x27
    4f2a:	f7fe ff35 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f2e:	0000      	.short	0x0000
    4f30:	200000ac 	.word	0x200000ac
    4f34:	b510      	push	{r4, lr}
    4f36:	f7ff ff89 	bl	4e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4f3a:	4604      	mov	r4, r0
    4f3c:	f7ff ff8c 	bl	4e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4f40:	7b41      	ldrb	r1, [r0, #13]
    4f42:	4a0a      	ldr	r2, [pc, #40]	; (4f6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>)
    4f44:	2924      	cmp	r1, #36	; 0x24
    4f46:	d008      	beq.n	4f5a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    4f48:	7b80      	ldrb	r0, [r0, #14]
    4f4a:	2824      	cmp	r0, #36	; 0x24
    4f4c:	d005      	beq.n	4f5a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    4f4e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4f52:	2804      	cmp	r0, #4
    4f54:	d100      	bne.n	4f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4f56:	2008      	movs	r0, #8
    4f58:	bd10      	pop	{r4, pc}
    4f5a:	6850      	ldr	r0, [r2, #4]
    4f5c:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    4f60:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f68:	f008 bca6 	b.w	d8b8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    4f6c:	200000e4 	.word	0x200000e4
    4f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f74:	4689      	mov	r9, r1
    4f76:	4606      	mov	r6, r0
    4f78:	f7ff ff6e 	bl	4e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4f7c:	4c58      	ldr	r4, [pc, #352]	; (50e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>)
    4f7e:	2700      	movs	r7, #0
    4f80:	4605      	mov	r5, r0
    4f82:	f88d 7000 	strb.w	r7, [sp]
    4f86:	7820      	ldrb	r0, [r4, #0]
    4f88:	2802      	cmp	r0, #2
    4f8a:	d004      	beq.n	4f96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    4f8c:	f240 41b9 	movw	r1, #1209	; 0x4b9
    4f90:	2027      	movs	r0, #39	; 0x27
    4f92:	f7fe ff01 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f96:	7ba0      	ldrb	r0, [r4, #14]
    4f98:	0640      	lsls	r0, r0, #25
    4f9a:	d406      	bmi.n	4faa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    4f9c:	2040      	movs	r0, #64	; 0x40
    4f9e:	f7ff ff61 	bl	4e64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    4fa2:	89e0      	ldrh	r0, [r4, #14]
    4fa4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    4fa8:	81e0      	strh	r0, [r4, #14]
    4faa:	7ce8      	ldrb	r0, [r5, #19]
    4fac:	f04f 0801 	mov.w	r8, #1
    4fb0:	b3c6      	cbz	r6, 5024 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x238>
    4fb2:	f006 fa33 	bl	b41c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    4fb6:	f006 fa17 	bl	b3e8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    4fba:	b968      	cbnz	r0, 4fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4fbc:	7ce8      	ldrb	r0, [r5, #19]
    4fbe:	b158      	cbz	r0, 4fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4fc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4fc2:	7841      	ldrb	r1, [r0, #1]
    4fc4:	b141      	cbz	r1, 4fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4fc6:	7800      	ldrb	r0, [r0, #0]
    4fc8:	7a29      	ldrb	r1, [r5, #8]
    4fca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4fce:	4288      	cmp	r0, r1
    4fd0:	d102      	bne.n	4fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4fd2:	f884 8002 	strb.w	r8, [r4, #2]
    4fd6:	e064      	b.n	50a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    4fd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4fda:	7841      	ldrb	r1, [r0, #1]
    4fdc:	8161      	strh	r1, [r4, #10]
    4fde:	b121      	cbz	r1, 4fea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fe>
    4fe0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4fe2:	f008 faeb 	bl	d5bc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    4fe6:	62a0      	str	r0, [r4, #40]	; 0x28
    4fe8:	e000      	b.n	4fec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x200>
    4fea:	62a7      	str	r7, [r4, #40]	; 0x28
    4fec:	89e0      	ldrh	r0, [r4, #14]
    4fee:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4ff2:	81e0      	strh	r0, [r4, #14]
    4ff4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4ff6:	79e9      	ldrb	r1, [r5, #7]
    4ff8:	7800      	ldrb	r0, [r0, #0]
    4ffa:	f3c0 0080 	ubfx	r0, r0, #2, #1
    4ffe:	4288      	cmp	r0, r1
    5000:	d005      	beq.n	500e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x222>
    5002:	f000 f963 	bl	52cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    5006:	89e0      	ldrh	r0, [r4, #14]
    5008:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    500c:	81e0      	strh	r0, [r4, #14]
    500e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5010:	7a29      	ldrb	r1, [r5, #8]
    5012:	7800      	ldrb	r0, [r0, #0]
    5014:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5018:	4288      	cmp	r0, r1
    501a:	d10e      	bne.n	503a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    501c:	4668      	mov	r0, sp
    501e:	f000 f917 	bl	5250 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    5022:	e00a      	b.n	503a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    5024:	e7ff      	b.n	5026 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    5026:	b108      	cbz	r0, 502c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x240>
    5028:	f006 f9f2 	bl	b410 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    502c:	78e0      	ldrb	r0, [r4, #3]
    502e:	1c40      	adds	r0, r0, #1
    5030:	70e0      	strb	r0, [r4, #3]
    5032:	89e0      	ldrh	r0, [r4, #14]
    5034:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5038:	81e0      	strh	r0, [r4, #14]
    503a:	7ca8      	ldrb	r0, [r5, #18]
    503c:	b1a0      	cbz	r0, 5068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    503e:	f7ff ff05 	bl	4e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5042:	4928      	ldr	r1, [pc, #160]	; (50e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5044:	f881 8018 	strb.w	r8, [r1, #24]
    5048:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    504c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5050:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5054:	f008 fc22 	bl	d89c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5058:	4603      	mov	r3, r0
    505a:	22fb      	movs	r2, #251	; 0xfb
    505c:	4921      	ldr	r1, [pc, #132]	; (50e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    505e:	2000      	movs	r0, #0
    5060:	f006 f976 	bl	b350 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5064:	f006 f9aa 	bl	b3bc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5068:	4d1e      	ldr	r5, [pc, #120]	; (50e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    506a:	354a      	adds	r5, #74	; 0x4a
    506c:	f1b9 0f00 	cmp.w	r9, #0
    5070:	d104      	bne.n	507c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x290>
    5072:	78e1      	ldrb	r1, [r4, #3]
    5074:	2001      	movs	r0, #1
    5076:	f7ff ff21 	bl	4ebc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    507a:	b1b0      	cbz	r0, 50aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    507c:	f006 fd64 	bl	bb48 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5080:	f89d 0000 	ldrb.w	r0, [sp]
    5084:	b110      	cbz	r0, 508c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a0>
    5086:	2000      	movs	r0, #0
    5088:	f7ff fe34 	bl	4cf4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    508c:	b136      	cbz	r6, 509c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    508e:	70e7      	strb	r7, [r4, #3]
    5090:	7968      	ldrb	r0, [r5, #5]
    5092:	1c40      	adds	r0, r0, #1
    5094:	7168      	strb	r0, [r5, #5]
    5096:	f7ff feeb 	bl	4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    509a:	e002      	b.n	50a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    509c:	79a8      	ldrb	r0, [r5, #6]
    509e:	1c40      	adds	r0, r0, #1
    50a0:	71a8      	strb	r0, [r5, #6]
    50a2:	f000 f87f 	bl	51a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    50a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    50aa:	f89d 0000 	ldrb.w	r0, [sp]
    50ae:	b110      	cbz	r0, 50b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    50b0:	2001      	movs	r0, #1
    50b2:	f7ff fe1f 	bl	4cf4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    50b6:	2000      	movs	r0, #0
    50b8:	f000 f98c 	bl	53d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    50bc:	f89d 0000 	ldrb.w	r0, [sp]
    50c0:	b110      	cbz	r0, 50c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>
    50c2:	2002      	movs	r0, #2
    50c4:	f7ff fe16 	bl	4cf4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    50c8:	b136      	cbz	r6, 50d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    50ca:	70e7      	strb	r7, [r4, #3]
    50cc:	7968      	ldrb	r0, [r5, #5]
    50ce:	1c40      	adds	r0, r0, #1
    50d0:	7168      	strb	r0, [r5, #5]
    50d2:	f7ff fecd 	bl	4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    50d6:	e7e6      	b.n	50a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    50d8:	79a8      	ldrb	r0, [r5, #6]
    50da:	1c40      	adds	r0, r0, #1
    50dc:	71a8      	strb	r0, [r5, #6]
    50de:	e7e2      	b.n	50a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    50e0:	200000ac 	.word	0x200000ac
    50e4:	200008e8 	.word	0x200008e8
    50e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    50ec:	4688      	mov	r8, r1
    50ee:	4681      	mov	r9, r0
    50f0:	f7ff feb2 	bl	4e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    50f4:	4d29      	ldr	r5, [pc, #164]	; (519c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    50f6:	4604      	mov	r4, r0
    50f8:	7828      	ldrb	r0, [r5, #0]
    50fa:	2801      	cmp	r0, #1
    50fc:	d004      	beq.n	5108 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    50fe:	f240 4169 	movw	r1, #1129	; 0x469
    5102:	2027      	movs	r0, #39	; 0x27
    5104:	f7fe fe48 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5108:	7860      	ldrb	r0, [r4, #1]
    510a:	2600      	movs	r6, #0
    510c:	2701      	movs	r7, #1
    510e:	b120      	cbz	r0, 511a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x32e>
    5110:	7066      	strb	r6, [r4, #1]
    5112:	2100      	movs	r1, #0
    5114:	2004      	movs	r0, #4
    5116:	f7ff fe91 	bl	4e3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    511a:	6a29      	ldr	r1, [r5, #32]
    511c:	7808      	ldrb	r0, [r1, #0]
    511e:	43c0      	mvns	r0, r0
    5120:	0780      	lsls	r0, r0, #30
    5122:	d109      	bne.n	5138 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    5124:	79a0      	ldrb	r0, [r4, #6]
    5126:	bb88      	cbnz	r0, 518c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    5128:	2002      	movs	r0, #2
    512a:	f7ff fe87 	bl	4e3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    512e:	6a28      	ldr	r0, [r5, #32]
    5130:	7800      	ldrb	r0, [r0, #0]
    5132:	43c0      	mvns	r0, r0
    5134:	0780      	lsls	r0, r0, #30
    5136:	d029      	beq.n	518c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    5138:	6a28      	ldr	r0, [r5, #32]
    513a:	7840      	ldrb	r0, [r0, #1]
    513c:	b110      	cbz	r0, 5144 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    513e:	2002      	movs	r0, #2
    5140:	71a0      	strb	r0, [r4, #6]
    5142:	e000      	b.n	5146 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    5144:	71a7      	strb	r7, [r4, #6]
    5146:	7ce0      	ldrb	r0, [r4, #19]
    5148:	b1a0      	cbz	r0, 5174 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    514a:	f7ff fe7f 	bl	4e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    514e:	4914      	ldr	r1, [pc, #80]	; (51a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5150:	7a6d      	ldrb	r5, [r5, #9]
    5152:	760e      	strb	r6, [r1, #24]
    5154:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    5158:	e9c1 2304 	strd	r2, r3, [r1, #16]
    515c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5160:	f008 fb9c 	bl	d89c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5164:	4603      	mov	r3, r0
    5166:	462a      	mov	r2, r5
    5168:	490d      	ldr	r1, [pc, #52]	; (51a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    516a:	2001      	movs	r0, #1
    516c:	f006 f8f0 	bl	b350 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5170:	f006 f924 	bl	b3bc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5174:	ea38 0009 	bics.w	r0, r8, r9
    5178:	d004      	beq.n	5184 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    517a:	2100      	movs	r1, #0
    517c:	4608      	mov	r0, r1
    517e:	f7ff fe9d 	bl	4ebc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    5182:	b128      	cbz	r0, 5190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
    5184:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5188:	f000 b80c 	b.w	51a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    518c:	2003      	movs	r0, #3
    518e:	e7d7      	b.n	5140 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    5190:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5194:	2000      	movs	r0, #0
    5196:	f000 b8df 	b.w	5358 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56c>
    519a:	0000      	.short	0x0000
    519c:	200000ac 	.word	0x200000ac
    51a0:	200008e8 	.word	0x200008e8
    51a4:	b510      	push	{r4, lr}
    51a6:	f006 f9cf 	bl	b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    51aa:	f006 f887 	bl	b2bc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    51ae:	4c0d      	ldr	r4, [pc, #52]	; (51e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    51b0:	89e0      	ldrh	r0, [r4, #14]
    51b2:	f7ff fe57 	bl	4e64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    51b6:	69e2      	ldr	r2, [r4, #28]
    51b8:	7961      	ldrb	r1, [r4, #5]
    51ba:	78a0      	ldrb	r0, [r4, #2]
    51bc:	4790      	blx	r2
    51be:	480a      	ldr	r0, [pc, #40]	; (51e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    51c0:	7c40      	ldrb	r0, [r0, #17]
    51c2:	b158      	cbz	r0, 51dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    51c4:	4808      	ldr	r0, [pc, #32]	; (51e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    51c6:	3852      	subs	r0, #82	; 0x52
    51c8:	f850 1f52 	ldr.w	r1, [r0, #82]!
    51cc:	6081      	str	r1, [r0, #8]
    51ce:	6841      	ldr	r1, [r0, #4]
    51d0:	60c1      	str	r1, [r0, #12]
    51d2:	4805      	ldr	r0, [pc, #20]	; (51e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    51d4:	2101      	movs	r1, #1
    51d6:	7401      	strb	r1, [r0, #16]
    51d8:	f005 fa12 	bl	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    51dc:	2000      	movs	r0, #0
    51de:	7020      	strb	r0, [r4, #0]
    51e0:	bd10      	pop	{r4, pc}
    51e2:	0000      	.short	0x0000
    51e4:	200000ac 	.word	0x200000ac
    51e8:	20000932 	.word	0x20000932
    51ec:	4808      	ldr	r0, [pc, #32]	; (5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    51ee:	b510      	push	{r4, lr}
    51f0:	7800      	ldrb	r0, [r0, #0]
    51f2:	2802      	cmp	r0, #2
    51f4:	d004      	beq.n	5200 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    51f6:	f240 2117 	movw	r1, #535	; 0x217
    51fa:	2027      	movs	r0, #39	; 0x27
    51fc:	f7fe fdcc 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5200:	4904      	ldr	r1, [pc, #16]	; (5214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x428>)
    5202:	2001      	movs	r0, #1
    5204:	71c8      	strb	r0, [r1, #7]
    5206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    520a:	f7ff bfcb 	b.w	51a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    520e:	0000      	.short	0x0000
    5210:	200000ac 	.word	0x200000ac
    5214:	20000932 	.word	0x20000932
    5218:	b430      	push	{r4, r5}
    521a:	4b0c      	ldr	r3, [pc, #48]	; (524c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>)
    521c:	b942      	cbnz	r2, 5230 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    521e:	79da      	ldrb	r2, [r3, #7]
    5220:	2aff      	cmp	r2, #255	; 0xff
    5222:	d105      	bne.n	5230 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    5224:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5228:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    522c:	42a2      	cmp	r2, r4
    522e:	d00b      	beq.n	5248 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    5230:	b131      	cbz	r1, 5240 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>
    5232:	79da      	ldrb	r2, [r3, #7]
    5234:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5238:	bc30      	pop	{r4, r5}
    523a:	4610      	mov	r0, r2
    523c:	f006 bcb8 	b.w	bbb0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5240:	22ff      	movs	r2, #255	; 0xff
    5242:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    5246:	e7f7      	b.n	5238 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    5248:	bc30      	pop	{r4, r5}
    524a:	4770      	bx	lr
    524c:	200000ac 	.word	0x200000ac
    5250:	b570      	push	{r4, r5, r6, lr}
    5252:	4606      	mov	r6, r0
    5254:	f7ff fe00 	bl	4e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5258:	4a1b      	ldr	r2, [pc, #108]	; (52c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>)
    525a:	4604      	mov	r4, r0
    525c:	2501      	movs	r5, #1
    525e:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5260:	7808      	ldrb	r0, [r1, #0]
    5262:	f000 0003 	and.w	r0, r0, #3
    5266:	2801      	cmp	r0, #1
    5268:	d00c      	beq.n	5284 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    526a:	2802      	cmp	r0, #2
    526c:	d00a      	beq.n	5284 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    526e:	2803      	cmp	r0, #3
    5270:	d121      	bne.n	52b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5272:	7065      	strb	r5, [r4, #1]
    5274:	89d0      	ldrh	r0, [r2, #14]
    5276:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    527a:	81d0      	strh	r0, [r2, #14]
    527c:	2001      	movs	r0, #1
    527e:	f7ff fddd 	bl	4e3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5282:	e018      	b.n	52b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5284:	7848      	ldrb	r0, [r1, #1]
    5286:	b1b0      	cbz	r0, 52b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5288:	89d1      	ldrh	r1, [r2, #14]
    528a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    528e:	81d1      	strh	r1, [r2, #14]
    5290:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5292:	2900      	cmp	r1, #0
    5294:	d009      	beq.n	52aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    5296:	28fb      	cmp	r0, #251	; 0xfb
    5298:	d808      	bhi.n	52ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>
    529a:	7990      	ldrb	r0, [r2, #6]
    529c:	b120      	cbz	r0, 52a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>
    529e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    52a2:	2020      	movs	r0, #32
    52a4:	f7ff bdde 	b.w	4e64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    52a8:	7035      	strb	r5, [r6, #0]
    52aa:	bd70      	pop	{r4, r5, r6, pc}
    52ac:	7950      	ldrb	r0, [r2, #5]
    52ae:	f040 0010 	orr.w	r0, r0, #16
    52b2:	7150      	strb	r0, [r2, #5]
    52b4:	bd70      	pop	{r4, r5, r6, pc}
    52b6:	7a20      	ldrb	r0, [r4, #8]
    52b8:	2801      	cmp	r0, #1
    52ba:	d001      	beq.n	52c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
    52bc:	7225      	strb	r5, [r4, #8]
    52be:	bd70      	pop	{r4, r5, r6, pc}
    52c0:	2000      	movs	r0, #0
    52c2:	7220      	strb	r0, [r4, #8]
    52c4:	bd70      	pop	{r4, r5, r6, pc}
    52c6:	0000      	.short	0x0000
    52c8:	200000ac 	.word	0x200000ac
    52cc:	b570      	push	{r4, r5, r6, lr}
    52ce:	f7ff fdc3 	bl	4e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    52d2:	4604      	mov	r4, r0
    52d4:	7980      	ldrb	r0, [r0, #6]
    52d6:	2800      	cmp	r0, #0
    52d8:	d027      	beq.n	532a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53e>
    52da:	2802      	cmp	r0, #2
    52dc:	d10d      	bne.n	52fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50e>
    52de:	4818      	ldr	r0, [pc, #96]	; (5340 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x554>)
    52e0:	6b00      	ldr	r0, [r0, #48]	; 0x30
    52e2:	f007 ff3d 	bl	d160 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    52e6:	b308      	cbz	r0, 532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    52e8:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    52ec:	1c40      	adds	r0, r0, #1
    52ee:	f141 0100 	adc.w	r1, r1, #0
    52f2:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    52f6:	f005 f983 	bl	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    52fa:	2500      	movs	r5, #0
    52fc:	71a5      	strb	r5, [r4, #6]
    52fe:	78a0      	ldrb	r0, [r4, #2]
    5300:	2601      	movs	r6, #1
    5302:	b170      	cbz	r0, 5322 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    5304:	70a5      	strb	r5, [r4, #2]
    5306:	f7ff fb17 	bl	4938 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    530a:	b190      	cbz	r0, 5332 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x546>
    530c:	2100      	movs	r1, #0
    530e:	2008      	movs	r0, #8
    5310:	f7ff fd94 	bl	4e3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5314:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5318:	1c40      	adds	r0, r0, #1
    531a:	f141 0100 	adc.w	r1, r1, #0
    531e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5322:	79e0      	ldrb	r0, [r4, #7]
    5324:	2801      	cmp	r0, #1
    5326:	d009      	beq.n	533c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x550>
    5328:	71e6      	strb	r6, [r4, #7]
    532a:	bd70      	pop	{r4, r5, r6, pc}
    532c:	f240 31af 	movw	r1, #943	; 0x3af
    5330:	e001      	b.n	5336 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    5332:	f240 31c7 	movw	r1, #967	; 0x3c7
    5336:	2027      	movs	r0, #39	; 0x27
    5338:	f7fe fd2e 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    533c:	71e5      	strb	r5, [r4, #7]
    533e:	bd70      	pop	{r4, r5, r6, pc}
    5340:	200000ac 	.word	0x200000ac
    5344:	4803      	ldr	r0, [pc, #12]	; (5354 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>)
    5346:	7800      	ldrb	r0, [r0, #0]
    5348:	2800      	cmp	r0, #0
    534a:	d001      	beq.n	5350 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    534c:	f7ff bf2a 	b.w	51a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5350:	4770      	bx	lr
    5352:	0000      	.short	0x0000
    5354:	200000ac 	.word	0x200000ac
    5358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    535c:	4607      	mov	r7, r0
    535e:	f7ff fd75 	bl	4e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5362:	4680      	mov	r8, r0
    5364:	f7ff fd78 	bl	4e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5368:	4c17      	ldr	r4, [pc, #92]	; (53c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>)
    536a:	4605      	mov	r5, r0
    536c:	463a      	mov	r2, r7
    536e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5370:	6260      	str	r0, [r4, #36]	; 0x24
    5372:	2101      	movs	r1, #1
    5374:	4640      	mov	r0, r8
    5376:	f7ff ff4f 	bl	5218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    537a:	7ce8      	ldrb	r0, [r5, #19]
    537c:	2600      	movs	r6, #0
    537e:	b178      	cbz	r0, 53a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    5380:	4812      	ldr	r0, [pc, #72]	; (53cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    5382:	f006 fb39 	bl	b9f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5386:	4812      	ldr	r0, [pc, #72]	; (53d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    5388:	7606      	strb	r6, [r0, #24]
    538a:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    538e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5392:	490e      	ldr	r1, [pc, #56]	; (53cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    5394:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5396:	f005 ff63 	bl	b260 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    539a:	f005 ff75 	bl	b288 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    539e:	e004      	b.n	53aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    53a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    53a2:	f006 fb29 	bl	b9f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    53a6:	f005 ff89 	bl	b2bc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    53aa:	b917      	cbnz	r7, 53b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c6>
    53ac:	4630      	mov	r0, r6
    53ae:	f006 f9db 	bl	b768 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    53b2:	2100      	movs	r1, #0
    53b4:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    53b8:	4608      	mov	r0, r1
    53ba:	f006 fba7 	bl	bb0c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    53be:	2002      	movs	r0, #2
    53c0:	7020      	strb	r0, [r4, #0]
    53c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53c6:	0000      	.short	0x0000
    53c8:	200000ac 	.word	0x200000ac
    53cc:	200007e0 	.word	0x200007e0
    53d0:	200008e8 	.word	0x200008e8
    53d4:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    53d8:	4604      	mov	r4, r0
    53da:	f7ff fd3d 	bl	4e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    53de:	4605      	mov	r5, r0
    53e0:	f7ff fd34 	bl	4e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    53e4:	4606      	mov	r6, r0
    53e6:	f8df 9164 	ldr.w	r9, [pc, #356]	; 554c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    53ea:	4622      	mov	r2, r4
    53ec:	2100      	movs	r1, #0
    53ee:	f7ff ff13 	bl	5218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    53f2:	79a8      	ldrb	r0, [r5, #6]
    53f4:	f04f 0800 	mov.w	r8, #0
    53f8:	2701      	movs	r7, #1
    53fa:	f1a9 0420 	sub.w	r4, r9, #32
    53fe:	b140      	cbz	r0, 5412 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x626>
    5400:	2801      	cmp	r0, #1
    5402:	d01f      	beq.n	5444 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    5404:	2802      	cmp	r0, #2
    5406:	d030      	beq.n	546a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67e>
    5408:	2803      	cmp	r0, #3
    540a:	d03c      	beq.n	5486 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    540c:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    5410:	e058      	b.n	54c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    5412:	7a20      	ldrb	r0, [r4, #8]
    5414:	2150      	movs	r1, #80	; 0x50
    5416:	f8ad 0004 	strh.w	r0, [sp, #4]
    541a:	5388      	strh	r0, [r1, r6]
    541c:	4648      	mov	r0, r9
    541e:	f7ff fab5 	bl	498c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5422:	b128      	cbz	r0, 5430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    5424:	2080      	movs	r0, #128	; 0x80
    5426:	6a21      	ldr	r1, [r4, #32]
    5428:	f7ff fd08 	bl	4e3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    542c:	70af      	strb	r7, [r5, #2]
    542e:	e02e      	b.n	548e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5430:	466a      	mov	r2, sp
    5432:	a901      	add	r1, sp, #4
    5434:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5436:	f008 fa49 	bl	d8cc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    543a:	6220      	str	r0, [r4, #32]
    543c:	b110      	cbz	r0, 5444 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    543e:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
    5442:	b111      	cbz	r1, 544a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    5444:	4842      	ldr	r0, [pc, #264]	; (5550 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    5446:	6220      	str	r0, [r4, #32]
    5448:	e021      	b.n	548e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    544a:	f89d 1000 	ldrb.w	r1, [sp]
    544e:	b931      	cbnz	r1, 545e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x672>
    5450:	f8a0 8000 	strh.w	r8, [r0]
    5454:	f880 8002 	strb.w	r8, [r0, #2]
    5458:	2101      	movs	r1, #1
    545a:	f008 fd6f 	bl	df3c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    545e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5462:	6a20      	ldr	r0, [r4, #32]
    5464:	f008 fd24 	bl	deb0 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5468:	e011      	b.n	548e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    546a:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    546e:	f8ad 0004 	strh.w	r0, [sp, #4]
    5472:	466a      	mov	r2, sp
    5474:	a901      	add	r1, sp, #4
    5476:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5478:	f008 fa28 	bl	d8cc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    547c:	6220      	str	r0, [r4, #32]
    547e:	b930      	cbnz	r0, 548e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5480:	f240 21a5 	movw	r1, #677	; 0x2a5
    5484:	e01e      	b.n	54c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    5486:	4648      	mov	r0, r9
    5488:	f7ff fa80 	bl	498c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    548c:	b1c0      	cbz	r0, 54c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    548e:	6a20      	ldr	r0, [r4, #32]
    5490:	2308      	movs	r3, #8
    5492:	7801      	ldrb	r1, [r0, #0]
    5494:	f021 0108 	bic.w	r1, r1, #8
    5498:	7001      	strb	r1, [r0, #0]
    549a:	79ea      	ldrb	r2, [r5, #7]
    549c:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    54a0:	4311      	orrs	r1, r2
    54a2:	f021 0104 	bic.w	r1, r1, #4
    54a6:	7001      	strb	r1, [r0, #0]
    54a8:	7a2a      	ldrb	r2, [r5, #8]
    54aa:	2304      	movs	r3, #4
    54ac:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    54b0:	4311      	orrs	r1, r2
    54b2:	f021 0110 	bic.w	r1, r1, #16
    54b6:	7001      	strb	r1, [r0, #0]
    54b8:	43c9      	mvns	r1, r1
    54ba:	0789      	lsls	r1, r1, #30
    54bc:	d005      	beq.n	54ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6de>
    54be:	e007      	b.n	54d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    54c0:	f240 21ae 	movw	r1, #686	; 0x2ae
    54c4:	2027      	movs	r0, #39	; 0x27
    54c6:	f7fe fc67 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54ca:	78c0      	ldrb	r0, [r0, #3]
    54cc:	2802      	cmp	r0, #2
    54ce:	d00f      	beq.n	54f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    54d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    54d2:	f007 ff96 	bl	d402 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    54d6:	b108      	cbz	r0, 54dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    54d8:	2101      	movs	r1, #1
    54da:	e00a      	b.n	54f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    54dc:	6a20      	ldr	r0, [r4, #32]
    54de:	7800      	ldrb	r0, [r0, #0]
    54e0:	43c0      	mvns	r0, r0
    54e2:	0780      	lsls	r0, r0, #30
    54e4:	d004      	beq.n	54f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    54e6:	f7ff fa0f 	bl	4908 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    54ea:	f080 0101 	eor.w	r1, r0, #1
    54ee:	e000      	b.n	54f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    54f0:	2100      	movs	r1, #0
    54f2:	6a20      	ldr	r0, [r4, #32]
    54f4:	7802      	ldrb	r2, [r0, #0]
    54f6:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    54fa:	7001      	strb	r1, [r0, #0]
    54fc:	7ca9      	ldrb	r1, [r5, #18]
    54fe:	b191      	cbz	r1, 5526 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    5500:	7841      	ldrb	r1, [r0, #1]
    5502:	b181      	cbz	r1, 5526 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    5504:	4813      	ldr	r0, [pc, #76]	; (5554 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    5506:	f006 fa77 	bl	b9f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    550a:	4811      	ldr	r0, [pc, #68]	; (5550 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    550c:	3828      	subs	r0, #40	; 0x28
    550e:	7607      	strb	r7, [r0, #24]
    5510:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    5514:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5518:	480e      	ldr	r0, [pc, #56]	; (5554 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    551a:	6a21      	ldr	r1, [r4, #32]
    551c:	f005 fea0 	bl	b260 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    5520:	f005 feea 	bl	b2f8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    5524:	e003      	b.n	552e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    5526:	f006 fa67 	bl	b9f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    552a:	f005 fec7 	bl	b2bc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    552e:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    5532:	2101      	movs	r1, #1
    5534:	2000      	movs	r0, #0
    5536:	f006 fae9 	bl	bb0c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    553a:	7127      	strb	r7, [r4, #4]
    553c:	6a20      	ldr	r0, [r4, #32]
    553e:	8801      	ldrh	r1, [r0, #0]
    5540:	8221      	strh	r1, [r4, #16]
    5542:	7880      	ldrb	r0, [r0, #2]
    5544:	74a0      	strb	r0, [r4, #18]
    5546:	7027      	strb	r7, [r4, #0]
    5548:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    554c:	200000cc 	.word	0x200000cc
    5550:	20000910 	.word	0x20000910
    5554:	200007e0 	.word	0x200007e0
    5558:	000051ed 	.word	0x000051ed
    555c:	00004f71 	.word	0x00004f71
    5560:	000050e9 	.word	0x000050e9
    5564:	00005345 	.word	0x00005345

00005568 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5568:	4800      	ldr	r0, [pc, #0]	; (556c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    556a:	4770      	bx	lr
    556c:	200012cd 	.word	0x200012cd

00005570 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    5570:	b570      	push	{r4, r5, r6, lr}
    5572:	2600      	movs	r6, #0
    5574:	4635      	mov	r5, r6
    5576:	4c0f      	ldr	r4, [pc, #60]	; (55b4 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    5578:	e018      	b.n	55ac <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    557a:	1960      	adds	r0, r4, r5
    557c:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5580:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5584:	2a01      	cmp	r2, #1
    5586:	d002      	beq.n	558e <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    5588:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    558c:	b160      	cbz	r0, 55a8 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    558e:	480a      	ldr	r0, [pc, #40]	; (55b8 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    5590:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    5594:	1c73      	adds	r3, r6, #1
    5596:	5585      	strb	r5, [r0, r6]
    5598:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    559c:	4630      	mov	r0, r6
    559e:	b2de      	uxtb	r6, r3
    55a0:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    55a4:	f006 fbd2 	bl	bd4c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    55a8:	1c6d      	adds	r5, r5, #1
    55aa:	b2ed      	uxtb	r5, r5
    55ac:	78a0      	ldrb	r0, [r4, #2]
    55ae:	42a8      	cmp	r0, r5
    55b0:	d8e3      	bhi.n	557a <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    55b2:	bd70      	pop	{r4, r5, r6, pc}
    55b4:	200010fa 	.word	0x200010fa
    55b8:	20000274 	.word	0x20000274

000055bc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    55bc:	4904      	ldr	r1, [pc, #16]	; (55d0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    55be:	788a      	ldrb	r2, [r1, #2]
    55c0:	4282      	cmp	r2, r0
    55c2:	d903      	bls.n	55cc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    55c4:	4408      	add	r0, r1
    55c6:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    55ca:	4770      	bx	lr
    55cc:	2000      	movs	r0, #0
    55ce:	4770      	bx	lr
    55d0:	200010fa 	.word	0x200010fa

000055d4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    55d4:	4904      	ldr	r1, [pc, #16]	; (55e8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    55d6:	788a      	ldrb	r2, [r1, #2]
    55d8:	4282      	cmp	r2, r0
    55da:	d903      	bls.n	55e4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    55dc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    55e0:	3083      	adds	r0, #131	; 0x83
    55e2:	4770      	bx	lr
    55e4:	2000      	movs	r0, #0
    55e6:	4770      	bx	lr
    55e8:	200010fa 	.word	0x200010fa

000055ec <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    55ec:	4a05      	ldr	r2, [pc, #20]	; (5604 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    55ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    55f2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    55f6:	6802      	ldr	r2, [r0, #0]
    55f8:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    55fc:	8880      	ldrh	r0, [r0, #4]
    55fe:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5602:	4770      	bx	lr
    5604:	200010fa 	.word	0x200010fa

00005608 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    5608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    560c:	4607      	mov	r7, r0
    560e:	2400      	movs	r4, #0
    5610:	4d10      	ldr	r5, [pc, #64]	; (5654 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    5612:	e019      	b.n	5648 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    5614:	4620      	mov	r0, r4
    5616:	f7ff ffdd 	bl	55d4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    561a:	0003      	movs	r3, r0
    561c:	d012      	beq.n	5644 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    561e:	1928      	adds	r0, r5, r4
    5620:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5624:	b970      	cbnz	r0, 5644 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    5626:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    562a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    562e:	f206 160b 	addw	r6, r6, #267	; 0x10b
    5632:	463a      	mov	r2, r7
    5634:	4631      	mov	r1, r6
    5636:	4618      	mov	r0, r3
    5638:	f008 f8cb 	bl	d7d2 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    563c:	4630      	mov	r0, r6
    563e:	4621      	mov	r1, r4
    5640:	f7ff ffd4 	bl	55ec <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    5644:	1c64      	adds	r4, r4, #1
    5646:	b2e4      	uxtb	r4, r4
    5648:	78a8      	ldrb	r0, [r5, #2]
    564a:	42a0      	cmp	r0, r4
    564c:	d8e2      	bhi.n	5614 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    564e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5652:	0000      	.short	0x0000
    5654:	200010fa 	.word	0x200010fa

00005658 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    565c:	460e      	mov	r6, r1
    565e:	4607      	mov	r7, r0
    5660:	4615      	mov	r5, r2
    5662:	2106      	movs	r1, #6
    5664:	4630      	mov	r0, r6
    5666:	f008 fb6c 	bl	dd42 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    566a:	4c0d      	ldr	r4, [pc, #52]	; (56a0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    566c:	b160      	cbz	r0, 5688 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    566e:	2000      	movs	r0, #0
    5670:	e004      	b.n	567c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    5672:	1821      	adds	r1, r4, r0
    5674:	1c40      	adds	r0, r0, #1
    5676:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    567a:	b2c0      	uxtb	r0, r0
    567c:	78a1      	ldrb	r1, [r4, #2]
    567e:	4281      	cmp	r1, r0
    5680:	d8f7      	bhi.n	5672 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    5682:	2001      	movs	r0, #1
    5684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5688:	4631      	mov	r1, r6
    568a:	4638      	mov	r0, r7
    568c:	f008 f92d 	bl	d8ea <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    5690:	2808      	cmp	r0, #8
    5692:	d003      	beq.n	569c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    5694:	4420      	add	r0, r4
    5696:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    569a:	e7f2      	b.n	5682 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    569c:	2000      	movs	r0, #0
    569e:	e7f1      	b.n	5684 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    56a0:	200010fa 	.word	0x200010fa

000056a4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    56a4:	4904      	ldr	r1, [pc, #16]	; (56b8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    56a6:	788a      	ldrb	r2, [r1, #2]
    56a8:	4282      	cmp	r2, r0
    56aa:	d903      	bls.n	56b4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    56ac:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    56b0:	1cc0      	adds	r0, r0, #3
    56b2:	4770      	bx	lr
    56b4:	2000      	movs	r0, #0
    56b6:	4770      	bx	lr
    56b8:	200010fa 	.word	0x200010fa

000056bc <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    56bc:	4908      	ldr	r1, [pc, #32]	; (56e0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    56be:	788a      	ldrb	r2, [r1, #2]
    56c0:	4282      	cmp	r2, r0
    56c2:	d903      	bls.n	56cc <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    56c4:	180a      	adds	r2, r1, r0
    56c6:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    56ca:	b10a      	cbz	r2, 56d0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    56cc:	2000      	movs	r0, #0
    56ce:	4770      	bx	lr
    56d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    56d4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    56d8:	f200 100b 	addw	r0, r0, #267	; 0x10b
    56dc:	4770      	bx	lr
    56de:	0000      	.short	0x0000
    56e0:	200010fa 	.word	0x200010fa

000056e4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    56e4:	b510      	push	{r4, lr}
    56e6:	f240 12d3 	movw	r2, #467	; 0x1d3
    56ea:	2100      	movs	r1, #0
    56ec:	4808      	ldr	r0, [pc, #32]	; (5710 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    56ee:	f006 ffd5 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    56f2:	2208      	movs	r2, #8
    56f4:	21ff      	movs	r1, #255	; 0xff
    56f6:	4807      	ldr	r0, [pc, #28]	; (5714 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    56f8:	f006 ffd0 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    56fc:	4805      	ldr	r0, [pc, #20]	; (5714 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    56fe:	2100      	movs	r1, #0
    5700:	1f00      	subs	r0, r0, #4
    5702:	7001      	strb	r1, [r0, #0]
    5704:	7041      	strb	r1, [r0, #1]
    5706:	f44f 7161 	mov.w	r1, #900	; 0x384
    570a:	8041      	strh	r1, [r0, #2]
    570c:	bd10      	pop	{r4, pc}
    570e:	0000      	.short	0x0000
    5710:	200010fa 	.word	0x200010fa
    5714:	20000274 	.word	0x20000274

00005718 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5718:	4901      	ldr	r1, [pc, #4]	; (5720 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    571a:	7008      	strb	r0, [r1, #0]
    571c:	4770      	bx	lr
    571e:	0000      	.short	0x0000
    5720:	20000270 	.word	0x20000270

00005724 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5724:	4801      	ldr	r0, [pc, #4]	; (572c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5726:	7800      	ldrb	r0, [r0, #0]
    5728:	4770      	bx	lr
    572a:	0000      	.short	0x0000
    572c:	20000270 	.word	0x20000270

00005730 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5730:	4b0b      	ldr	r3, [pc, #44]	; (5760 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5732:	b510      	push	{r4, lr}
    5734:	789c      	ldrb	r4, [r3, #2]
    5736:	4284      	cmp	r4, r0
    5738:	d90f      	bls.n	575a <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    573a:	4418      	add	r0, r3
    573c:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5740:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5744:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5748:	700b      	strb	r3, [r1, #0]
    574a:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    574e:	6011      	str	r1, [r2, #0]
    5750:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5754:	8090      	strh	r0, [r2, #4]
    5756:	2001      	movs	r0, #1
    5758:	bd10      	pop	{r4, pc}
    575a:	2000      	movs	r0, #0
    575c:	bd10      	pop	{r4, pc}
    575e:	0000      	.short	0x0000
    5760:	200010fa 	.word	0x200010fa

00005764 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5764:	4907      	ldr	r1, [pc, #28]	; (5784 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5766:	788a      	ldrb	r2, [r1, #2]
    5768:	4282      	cmp	r2, r0
    576a:	d909      	bls.n	5780 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    576c:	4408      	add	r0, r1
    576e:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5772:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5776:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    577a:	f000 0001 	and.w	r0, r0, #1
    577e:	4770      	bx	lr
    5780:	2000      	movs	r0, #0
    5782:	4770      	bx	lr
    5784:	200010fa 	.word	0x200010fa

00005788 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    578c:	4698      	mov	r8, r3
    578e:	4691      	mov	r9, r2
    5790:	460c      	mov	r4, r1
    5792:	4605      	mov	r5, r0
    5794:	f000 f962 	bl	5a5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5798:	4606      	mov	r6, r0
    579a:	2810      	cmp	r0, #16
    579c:	d006      	beq.n	57ac <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    579e:	f000 f92d 	bl	59fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    57a2:	2810      	cmp	r0, #16
    57a4:	d002      	beq.n	57ac <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    57a6:	2012      	movs	r0, #18
    57a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    57ac:	4f18      	ldr	r7, [pc, #96]	; (5810 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    57ae:	78b8      	ldrb	r0, [r7, #2]
    57b0:	2808      	cmp	r0, #8
    57b2:	d22a      	bcs.n	580a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    57b4:	2e10      	cmp	r6, #16
    57b6:	d105      	bne.n	57c4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    57b8:	2200      	movs	r2, #0
    57ba:	4621      	mov	r1, r4
    57bc:	4628      	mov	r0, r5
    57be:	f000 f931 	bl	5a24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    57c2:	4606      	mov	r6, r0
    57c4:	78bc      	ldrb	r4, [r7, #2]
    57c6:	2210      	movs	r2, #16
    57c8:	1c60      	adds	r0, r4, #1
    57ca:	70b8      	strb	r0, [r7, #2]
    57cc:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    57d0:	1ce8      	adds	r0, r5, #3
    57d2:	4649      	mov	r1, r9
    57d4:	f008 fa58 	bl	dc88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    57d8:	f105 0083 	add.w	r0, r5, #131	; 0x83
    57dc:	2210      	movs	r2, #16
    57de:	4641      	mov	r1, r8
    57e0:	f008 fa52 	bl	dc88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    57e4:	2110      	movs	r1, #16
    57e6:	4640      	mov	r0, r8
    57e8:	f008 faab 	bl	dd42 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    57ec:	443c      	add	r4, r7
    57ee:	2110      	movs	r1, #16
    57f0:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    57f4:	4648      	mov	r0, r9
    57f6:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    57fa:	f008 faa2 	bl	dd42 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    57fe:	77e0      	strb	r0, [r4, #31]
    5800:	f804 6c29 	strb.w	r6, [r4, #-41]
    5804:	2000      	movs	r0, #0
    5806:	73e0      	strb	r0, [r4, #15]
    5808:	e7ce      	b.n	57a8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    580a:	2007      	movs	r0, #7
    580c:	e7cc      	b.n	57a8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    580e:	0000      	.short	0x0000
    5810:	200010fa 	.word	0x200010fa

00005814 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5814:	4806      	ldr	r0, [pc, #24]	; (5830 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5816:	b510      	push	{r4, lr}
    5818:	7880      	ldrb	r0, [r0, #2]
    581a:	1e40      	subs	r0, r0, #1
    581c:	b244      	sxtb	r4, r0
    581e:	e004      	b.n	582a <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    5820:	b2e0      	uxtb	r0, r4
    5822:	f000 f963 	bl	5aec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    5826:	1e64      	subs	r4, r4, #1
    5828:	b264      	sxtb	r4, r4
    582a:	2c00      	cmp	r4, #0
    582c:	daf8      	bge.n	5820 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    582e:	bd10      	pop	{r4, pc}
    5830:	200010fa 	.word	0x200010fa

00005834 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5834:	4801      	ldr	r0, [pc, #4]	; (583c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5836:	8840      	ldrh	r0, [r0, #2]
    5838:	4770      	bx	lr
    583a:	0000      	.short	0x0000
    583c:	20000270 	.word	0x20000270

00005840 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    5840:	b138      	cbz	r0, 5852 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5842:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5846:	4288      	cmp	r0, r1
    5848:	d803      	bhi.n	5852 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    584a:	4903      	ldr	r1, [pc, #12]	; (5858 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    584c:	8048      	strh	r0, [r1, #2]
    584e:	2001      	movs	r0, #1
    5850:	4770      	bx	lr
    5852:	2000      	movs	r0, #0
    5854:	4770      	bx	lr
    5856:	0000      	.short	0x0000
    5858:	20000270 	.word	0x20000270

0000585c <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY>:
    585c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5860:	2501      	movs	r5, #1
    5862:	461f      	mov	r7, r3
    5864:	4691      	mov	r9, r2
    5866:	462c      	mov	r4, r5
    5868:	2600      	movs	r6, #0
    586a:	f000 f8f7 	bl	5a5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    586e:	2810      	cmp	r0, #16
    5870:	d023      	beq.n	58ba <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    5872:	f8df 8058 	ldr.w	r8, [pc, #88]	; 58cc <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x70>
    5876:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    587a:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    587e:	f001 0601 	and.w	r6, r1, #1
    5882:	f000 f8bb 	bl	59fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5886:	4603      	mov	r3, r0
    5888:	2810      	cmp	r0, #16
    588a:	d016      	beq.n	58ba <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    588c:	b107      	cbz	r7, 5890 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x34>
    588e:	703b      	strb	r3, [r7, #0]
    5890:	4618      	mov	r0, r3
    5892:	f7ff ff07 	bl	56a4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5896:	b180      	cbz	r0, 58ba <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    5898:	f898 1002 	ldrb.w	r1, [r8, #2]
    589c:	4640      	mov	r0, r8
    589e:	4299      	cmp	r1, r3
    58a0:	d903      	bls.n	58aa <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x4e>
    58a2:	18c1      	adds	r1, r0, r3
    58a4:	f891 414b 	ldrb.w	r4, [r1, #331]	; 0x14b
    58a8:	e000      	b.n	58ac <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x50>
    58aa:	2400      	movs	r4, #0
    58ac:	eb08 0003 	add.w	r0, r8, r3
    58b0:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    58b4:	2801      	cmp	r0, #1
    58b6:	d006      	beq.n	58c6 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x6a>
    58b8:	2500      	movs	r5, #0
    58ba:	ea49 0006 	orr.w	r0, r9, r6
    58be:	4325      	orrs	r5, r4
    58c0:	4028      	ands	r0, r5
    58c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    58c6:	2501      	movs	r5, #1
    58c8:	e7f7      	b.n	58ba <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    58ca:	0000      	.short	0x0000
    58cc:	200010fa 	.word	0x200010fa

000058d0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    58d0:	b570      	push	{r4, r5, r6, lr}
    58d2:	460d      	mov	r5, r1
    58d4:	4606      	mov	r6, r0
    58d6:	f000 f8c1 	bl	5a5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    58da:	4c10      	ldr	r4, [pc, #64]	; (591c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    58dc:	2810      	cmp	r0, #16
    58de:	d007      	beq.n	58f0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    58e0:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    58e4:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    58e8:	07c9      	lsls	r1, r1, #31
    58ea:	d001      	beq.n	58f0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    58ec:	2001      	movs	r0, #1
    58ee:	bd70      	pop	{r4, r5, r6, pc}
    58f0:	7861      	ldrb	r1, [r4, #1]
    58f2:	2908      	cmp	r1, #8
    58f4:	d210      	bcs.n	5918 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    58f6:	2810      	cmp	r0, #16
    58f8:	d008      	beq.n	590c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    58fa:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    58fe:	2101      	movs	r1, #1
    5900:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5904:	7860      	ldrb	r0, [r4, #1]
    5906:	1c40      	adds	r0, r0, #1
    5908:	7060      	strb	r0, [r4, #1]
    590a:	e7ef      	b.n	58ec <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    590c:	2201      	movs	r2, #1
    590e:	4629      	mov	r1, r5
    5910:	4630      	mov	r0, r6
    5912:	f000 f887 	bl	5a24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5916:	e7f5      	b.n	5904 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5918:	2000      	movs	r0, #0
    591a:	bd70      	pop	{r4, r5, r6, pc}
    591c:	200010fa 	.word	0x200010fa

00005920 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5920:	b570      	push	{r4, r5, r6, lr}
    5922:	4d0b      	ldr	r5, [pc, #44]	; (5950 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5924:	7828      	ldrb	r0, [r5, #0]
    5926:	1e40      	subs	r0, r0, #1
    5928:	b244      	sxtb	r4, r0
    592a:	e00a      	b.n	5942 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    592c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5930:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5934:	07c0      	lsls	r0, r0, #31
    5936:	d002      	beq.n	593e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5938:	b2e0      	uxtb	r0, r4
    593a:	f000 f91f 	bl	5b7c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    593e:	1e64      	subs	r4, r4, #1
    5940:	b264      	sxtb	r4, r4
    5942:	2c00      	cmp	r4, #0
    5944:	daf2      	bge.n	592c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    5946:	4903      	ldr	r1, [pc, #12]	; (5954 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5948:	2000      	movs	r0, #0
    594a:	7048      	strb	r0, [r1, #1]
    594c:	bd70      	pop	{r4, r5, r6, pc}
    594e:	0000      	.short	0x0000
    5950:	200010fa 	.word	0x200010fa
    5954:	20000270 	.word	0x20000270

00005958 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    595c:	2400      	movs	r4, #0
    595e:	4625      	mov	r5, r4
    5960:	4e18      	ldr	r6, [pc, #96]	; (59c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5962:	e029      	b.n	59b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5964:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5968:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    596c:	07c0      	lsls	r0, r0, #31
    596e:	d021      	beq.n	59b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5970:	4628      	mov	r0, r5
    5972:	f000 f843 	bl	59fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5976:	4603      	mov	r3, r0
    5978:	f7ff fe94 	bl	56a4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    597c:	4601      	mov	r1, r0
    597e:	2000      	movs	r0, #0
    5980:	2b10      	cmp	r3, #16
    5982:	d009      	beq.n	5998 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5984:	18f2      	adds	r2, r6, r3
    5986:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    598a:	f1bc 0f01 	cmp.w	ip, #1
    598e:	d002      	beq.n	5996 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5990:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5994:	b102      	cbz	r2, 5998 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5996:	2001      	movs	r0, #1
    5998:	1e40      	subs	r0, r0, #1
    599a:	4201      	tst	r1, r0
    599c:	d10a      	bne.n	59b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    599e:	480a      	ldr	r0, [pc, #40]	; (59c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    59a0:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    59a4:	5503      	strb	r3, [r0, r4]
    59a6:	4620      	mov	r0, r4
    59a8:	1c64      	adds	r4, r4, #1
    59aa:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    59ae:	b2e4      	uxtb	r4, r4
    59b0:	f006 f9cc 	bl	bd4c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    59b4:	1c6d      	adds	r5, r5, #1
    59b6:	b2ed      	uxtb	r5, r5
    59b8:	7830      	ldrb	r0, [r6, #0]
    59ba:	42a8      	cmp	r0, r5
    59bc:	d8d2      	bhi.n	5964 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    59be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59c2:	0000      	.short	0x0000
    59c4:	200010fa 	.word	0x200010fa
    59c8:	20000274 	.word	0x20000274
    59cc:	4602      	mov	r2, r0
    59ce:	4809      	ldr	r0, [pc, #36]	; (59f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    59d0:	b510      	push	{r4, lr}
    59d2:	7800      	ldrb	r0, [r0, #0]
    59d4:	460b      	mov	r3, r1
    59d6:	b158      	cbz	r0, 59f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    59d8:	4807      	ldr	r0, [pc, #28]	; (59f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    59da:	7881      	ldrb	r1, [r0, #2]
    59dc:	b141      	cbz	r1, 59f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    59de:	b10b      	cbz	r3, 59e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    59e0:	1cc0      	adds	r0, r0, #3
    59e2:	e001      	b.n	59e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    59e4:	4804      	ldr	r0, [pc, #16]	; (59f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    59e6:	3083      	adds	r0, #131	; 0x83
    59e8:	f005 fb5c 	bl	b0a4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    59ec:	2001      	movs	r0, #1
    59ee:	bd10      	pop	{r4, pc}
    59f0:	2000      	movs	r0, #0
    59f2:	bd10      	pop	{r4, pc}
    59f4:	20000270 	.word	0x20000270
    59f8:	200010fa 	.word	0x200010fa
    59fc:	4908      	ldr	r1, [pc, #32]	; (5a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    59fe:	b510      	push	{r4, lr}
    5a00:	4603      	mov	r3, r0
    5a02:	2000      	movs	r0, #0
    5a04:	788a      	ldrb	r2, [r1, #2]
    5a06:	e006      	b.n	5a16 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    5a08:	180c      	adds	r4, r1, r0
    5a0a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    5a0e:	429c      	cmp	r4, r3
    5a10:	d004      	beq.n	5a1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    5a12:	1c40      	adds	r0, r0, #1
    5a14:	b2c0      	uxtb	r0, r0
    5a16:	4282      	cmp	r2, r0
    5a18:	d8f6      	bhi.n	5a08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    5a1a:	2010      	movs	r0, #16
    5a1c:	bd10      	pop	{r4, pc}
    5a1e:	0000      	.short	0x0000
    5a20:	200010fa 	.word	0x200010fa
    5a24:	b570      	push	{r4, r5, r6, lr}
    5a26:	4b0c      	ldr	r3, [pc, #48]	; (5a58 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    5a28:	4604      	mov	r4, r0
    5a2a:	7818      	ldrb	r0, [r3, #0]
    5a2c:	1c45      	adds	r5, r0, #1
    5a2e:	701d      	strb	r5, [r3, #0]
    5a30:	2810      	cmp	r0, #16
    5a32:	d303      	bcc.n	5a3c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    5a34:	2146      	movs	r1, #70	; 0x46
    5a36:	2028      	movs	r0, #40	; 0x28
    5a38:	f7fe f9ae 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a3c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5a40:	680d      	ldr	r5, [r1, #0]
    5a42:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    5a46:	8889      	ldrh	r1, [r1, #4]
    5a48:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5a4c:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5a50:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5a54:	bd70      	pop	{r4, r5, r6, pc}
    5a56:	0000      	.short	0x0000
    5a58:	200010fa 	.word	0x200010fa
    5a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a60:	460f      	mov	r7, r1
    5a62:	4606      	mov	r6, r0
    5a64:	2400      	movs	r4, #0
    5a66:	4d0d      	ldr	r5, [pc, #52]	; (5a9c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    5a68:	e00f      	b.n	5a8a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    5a6a:	bf00      	nop
    5a6c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5a70:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5a74:	42b1      	cmp	r1, r6
    5a76:	d106      	bne.n	5a86 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    5a78:	2206      	movs	r2, #6
    5a7a:	4639      	mov	r1, r7
    5a7c:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5a80:	f006 fd80 	bl	c584 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5a84:	b138      	cbz	r0, 5a96 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    5a86:	1c64      	adds	r4, r4, #1
    5a88:	b2e4      	uxtb	r4, r4
    5a8a:	7828      	ldrb	r0, [r5, #0]
    5a8c:	42a0      	cmp	r0, r4
    5a8e:	d8ed      	bhi.n	5a6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    5a90:	2010      	movs	r0, #16
    5a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a96:	4620      	mov	r0, r4
    5a98:	e7fb      	b.n	5a92 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    5a9a:	0000      	.short	0x0000
    5a9c:	200010fa 	.word	0x200010fa
    5aa0:	b570      	push	{r4, r5, r6, lr}
    5aa2:	4605      	mov	r5, r0
    5aa4:	f7ff ffaa 	bl	59fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5aa8:	2810      	cmp	r0, #16
    5aaa:	d11c      	bne.n	5ae6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5aac:	4c0e      	ldr	r4, [pc, #56]	; (5ae8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    5aae:	7820      	ldrb	r0, [r4, #0]
    5ab0:	1e40      	subs	r0, r0, #1
    5ab2:	b2c0      	uxtb	r0, r0
    5ab4:	7020      	strb	r0, [r4, #0]
    5ab6:	42a8      	cmp	r0, r5
    5ab8:	d015      	beq.n	5ae6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5aba:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5abe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5ac2:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5ac6:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5aca:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5ace:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5ad2:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5ad6:	7820      	ldrb	r0, [r4, #0]
    5ad8:	f7ff ff90 	bl	59fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5adc:	2810      	cmp	r0, #16
    5ade:	d002      	beq.n	5ae6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5ae0:	4420      	add	r0, r4
    5ae2:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5ae6:	bd70      	pop	{r4, r5, r6, pc}
    5ae8:	200010fa 	.word	0x200010fa
    5aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5af0:	4c21      	ldr	r4, [pc, #132]	; (5b78 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    5af2:	4606      	mov	r6, r0
    5af4:	19a7      	adds	r7, r4, r6
    5af6:	78a0      	ldrb	r0, [r4, #2]
    5af8:	1e40      	subs	r0, r0, #1
    5afa:	b2c5      	uxtb	r5, r0
    5afc:	70a5      	strb	r5, [r4, #2]
    5afe:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5b02:	42ae      	cmp	r6, r5
    5b04:	d02a      	beq.n	5b5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    5b06:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5b0a:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5b0e:	f10a 0103 	add.w	r1, sl, #3
    5b12:	f109 0003 	add.w	r0, r9, #3
    5b16:	2210      	movs	r2, #16
    5b18:	f006 fd46 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5b1c:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5b20:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5b24:	2210      	movs	r2, #16
    5b26:	f006 fd3f 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5b2a:	1960      	adds	r0, r4, r5
    5b2c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5b30:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5b34:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5b38:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5b3c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5b40:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5b44:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5b48:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5b4c:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5b50:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5b54:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5b58:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5b5c:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5b60:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5b64:	07c0      	lsls	r0, r0, #31
    5b66:	d104      	bne.n	5b72 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    5b68:	4640      	mov	r0, r8
    5b6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b6e:	f7ff bf97 	b.w	5aa0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b76:	0000      	.short	0x0000
    5b78:	200010fa 	.word	0x200010fa
    5b7c:	4905      	ldr	r1, [pc, #20]	; (5b94 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    5b7e:	784a      	ldrb	r2, [r1, #1]
    5b80:	1e52      	subs	r2, r2, #1
    5b82:	704a      	strb	r2, [r1, #1]
    5b84:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5b88:	2200      	movs	r2, #0
    5b8a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5b8e:	f7ff bf87 	b.w	5aa0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5b92:	0000      	.short	0x0000
    5b94:	200010fa 	.word	0x200010fa

00005b98 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    5b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b9c:	4604      	mov	r4, r0
    5b9e:	f100 0778 	add.w	r7, r0, #120	; 0x78
    5ba2:	b171      	cbz	r1, 5bc2 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    5ba4:	f104 068e 	add.w	r6, r4, #142	; 0x8e
    5ba8:	1e75      	subs	r5, r6, #1
    5baa:	2901      	cmp	r1, #1
    5bac:	d016      	beq.n	5bdc <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    5bae:	2902      	cmp	r1, #2
    5bb0:	d025      	beq.n	5bfe <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    5bb2:	2903      	cmp	r1, #3
    5bb4:	d110      	bne.n	5bd8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    5bb6:	4631      	mov	r1, r6
    5bb8:	4628      	mov	r0, r5
    5bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5bbe:	f008 b912 	b.w	dde6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5bc2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    5bc6:	2100      	movs	r1, #0
    5bc8:	f006 fd68 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5bcc:	4638      	mov	r0, r7
    5bce:	f008 f8c7 	bl	dd60 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    5bd2:	2020      	movs	r0, #32
    5bd4:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    5bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5bdc:	68e1      	ldr	r1, [r4, #12]
    5bde:	480d      	ldr	r0, [pc, #52]	; (5c14 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    5be0:	460a      	mov	r2, r1
    5be2:	4408      	add	r0, r1
    5be4:	fbb0 f0f1 	udiv	r0, r0, r1
    5be8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    5bec:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5bf0:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    5bf4:	8ae3      	ldrh	r3, [r4, #22]
    5bf6:	4638      	mov	r0, r7
    5bf8:	f000 f80e 	bl	5c18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    5bfc:	e7db      	b.n	5bb6 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    5bfe:	68c1      	ldr	r1, [r0, #12]
    5c00:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
    5c04:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    5c08:	4638      	mov	r0, r7
    5c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5c0e:	f000 b803 	b.w	5c18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    5c12:	0000      	.short	0x0000
    5c14:	01c9c37f 	.word	0x01c9c37f
    5c18:	b530      	push	{r4, r5, lr}
    5c1a:	2400      	movs	r4, #0
    5c1c:	86c4      	strh	r4, [r0, #54]	; 0x36
    5c1e:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
    5c20:	4d13      	ldr	r5, [pc, #76]	; (5c70 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd8>)
    5c22:	434c      	muls	r4, r1
    5c24:	fbb4 f4f2 	udiv	r4, r4, r2
    5c28:	8744      	strh	r4, [r0, #58]	; 0x3a
    5c2a:	f242 7410 	movw	r4, #10000	; 0x2710
    5c2e:	4363      	muls	r3, r4
    5c30:	fbb3 f3f2 	udiv	r3, r3, r2
    5c34:	1c5b      	adds	r3, r3, #1
    5c36:	b29b      	uxth	r3, r3
    5c38:	fb03 f402 	mul.w	r4, r3, r2
    5c3c:	8703      	strh	r3, [r0, #56]	; 0x38
    5c3e:	42ac      	cmp	r4, r5
    5c40:	d901      	bls.n	5c46 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xae>
    5c42:	1e5b      	subs	r3, r3, #1
    5c44:	8703      	strh	r3, [r0, #56]	; 0x38
    5c46:	4b0b      	ldr	r3, [pc, #44]	; (5c74 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xdc>)
    5c48:	f240 2471 	movw	r4, #625	; 0x271
    5c4c:	fbb3 f3f2 	udiv	r3, r3, r2
    5c50:	1c5b      	adds	r3, r3, #1
    5c52:	87c3      	strh	r3, [r0, #62]	; 0x3e
    5c54:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    5c56:	4363      	muls	r3, r4
    5c58:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5c5c:	1e5b      	subs	r3, r3, #1
    5c5e:	fbb3 f3f2 	udiv	r3, r3, r2
    5c62:	62c3      	str	r3, [r0, #44]	; 0x2c
    5c64:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5c66:	434b      	muls	r3, r1
    5c68:	fbb3 f1f2 	udiv	r1, r3, r2
    5c6c:	6281      	str	r1, [r0, #40]	; 0x28
    5c6e:	bd30      	pop	{r4, r5, pc}
    5c70:	01e84800 	.word	0x01e84800
    5c74:	02625a00 	.word	0x02625a00

00005c78 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    5c78:	4909      	ldr	r1, [pc, #36]	; (5ca0 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    5c7a:	b508      	push	{r3, lr}
    5c7c:	7809      	ldrb	r1, [r1, #0]
    5c7e:	f88d 1000 	strb.w	r1, [sp]
    5c82:	9900      	ldr	r1, [sp, #0]
    5c84:	9100      	str	r1, [sp, #0]
    5c86:	f89d 1000 	ldrb.w	r1, [sp]
    5c8a:	b109      	cbz	r1, 5c90 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    5c8c:	2000      	movs	r0, #0
    5c8e:	bd08      	pop	{r3, pc}
    5c90:	4903      	ldr	r1, [pc, #12]	; (5ca0 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    5c92:	f8d1 2001 	ldr.w	r2, [r1, #1]
    5c96:	6002      	str	r2, [r0, #0]
    5c98:	7949      	ldrb	r1, [r1, #5]
    5c9a:	7101      	strb	r1, [r0, #4]
    5c9c:	2001      	movs	r0, #1
    5c9e:	bd08      	pop	{r3, pc}
    5ca0:	2000028f 	.word	0x2000028f

00005ca4 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    5ca4:	4905      	ldr	r1, [pc, #20]	; (5cbc <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    5ca6:	2201      	movs	r2, #1
    5ca8:	700a      	strb	r2, [r1, #0]
    5caa:	460a      	mov	r2, r1
    5cac:	6803      	ldr	r3, [r0, #0]
    5cae:	f8c2 3001 	str.w	r3, [r2, #1]
    5cb2:	7900      	ldrb	r0, [r0, #4]
    5cb4:	7150      	strb	r0, [r2, #5]
    5cb6:	2000      	movs	r0, #0
    5cb8:	7008      	strb	r0, [r1, #0]
    5cba:	4770      	bx	lr
    5cbc:	2000028f 	.word	0x2000028f

00005cc0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    5cc0:	b570      	push	{r4, r5, r6, lr}
    5cc2:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    5cc6:	b28b      	uxth	r3, r1
    5cc8:	7ac5      	ldrb	r5, [r0, #11]
    5cca:	ea83 0102 	eor.w	r1, r3, r2
    5cce:	2200      	movs	r2, #0
    5cd0:	b2cc      	uxtb	r4, r1
    5cd2:	0a09      	lsrs	r1, r1, #8
    5cd4:	fa94 f4a4 	rbit	r4, r4
    5cd8:	fa91 f1a1 	rbit	r1, r1
    5cdc:	0e24      	lsrs	r4, r4, #24
    5cde:	0e09      	lsrs	r1, r1, #24
    5ce0:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    5ce4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    5ce8:	1c52      	adds	r2, r2, #1
    5cea:	4419      	add	r1, r3
    5cec:	b2d2      	uxtb	r2, r2
    5cee:	b289      	uxth	r1, r1
    5cf0:	2a03      	cmp	r2, #3
    5cf2:	d3ed      	bcc.n	5cd0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    5cf4:	4059      	eors	r1, r3
    5cf6:	2225      	movs	r2, #37	; 0x25
    5cf8:	fbb1 f3f2 	udiv	r3, r1, r2
    5cfc:	fb02 1213 	mls	r2, r2, r3, r1
    5d00:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    5d04:	f002 0607 	and.w	r6, r2, #7
    5d08:	785b      	ldrb	r3, [r3, #1]
    5d0a:	2401      	movs	r4, #1
    5d0c:	fa04 f606 	lsl.w	r6, r4, r6
    5d10:	4233      	tst	r3, r6
    5d12:	d001      	beq.n	5d18 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    5d14:	4610      	mov	r0, r2
    5d16:	bd70      	pop	{r4, r5, r6, pc}
    5d18:	434d      	muls	r5, r1
    5d1a:	0c29      	lsrs	r1, r5, #16
    5d1c:	1c49      	adds	r1, r1, #1
    5d1e:	b2c9      	uxtb	r1, r1
    5d20:	2200      	movs	r2, #0
    5d22:	1885      	adds	r5, r0, r2
    5d24:	79ab      	ldrb	r3, [r5, #6]
    5d26:	428b      	cmp	r3, r1
    5d28:	d312      	bcc.n	5d50 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    5d2a:	f895 5001 	ldrb.w	r5, [r5, #1]
    5d2e:	2300      	movs	r3, #0
    5d30:	fa04 f603 	lsl.w	r6, r4, r3
    5d34:	4235      	tst	r5, r6
    5d36:	d001      	beq.n	5d3c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    5d38:	1e49      	subs	r1, r1, #1
    5d3a:	b2c9      	uxtb	r1, r1
    5d3c:	b121      	cbz	r1, 5d48 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    5d3e:	1c5b      	adds	r3, r3, #1
    5d40:	b2db      	uxtb	r3, r3
    5d42:	2b08      	cmp	r3, #8
    5d44:	d3f4      	bcc.n	5d30 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    5d46:	e005      	b.n	5d54 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    5d48:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    5d4c:	b2c0      	uxtb	r0, r0
    5d4e:	bd70      	pop	{r4, r5, r6, pc}
    5d50:	1ac9      	subs	r1, r1, r3
    5d52:	b2c9      	uxtb	r1, r1
    5d54:	1c52      	adds	r2, r2, #1
    5d56:	b2d2      	uxtb	r2, r2
    5d58:	2a05      	cmp	r2, #5
    5d5a:	d3e2      	bcc.n	5d22 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    5d5c:	f240 110d 	movw	r1, #269	; 0x10d
    5d60:	2046      	movs	r0, #70	; 0x46
    5d62:	f7fe f819 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d66:	0000      	movs	r0, r0
    5d68:	b570      	push	{r4, r5, r6, lr}
    5d6a:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    5d6e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    5d72:	2401      	movs	r4, #1
    5d74:	fb03 2101 	mla	r1, r3, r1, r2
    5d78:	2225      	movs	r2, #37	; 0x25
    5d7a:	fbb1 f3f2 	udiv	r3, r1, r2
    5d7e:	fb02 1113 	mls	r1, r2, r3, r1
    5d82:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    5d86:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    5d8a:	f001 0307 	and.w	r3, r1, #7
    5d8e:	7d92      	ldrb	r2, [r2, #22]
    5d90:	fa04 f303 	lsl.w	r3, r4, r3
    5d94:	421a      	tst	r2, r3
    5d96:	d003      	beq.n	5da0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    5d98:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    5d9c:	2000      	movs	r0, #0
    5d9e:	bd70      	pop	{r4, r5, r6, pc}
    5da0:	f890 2020 	ldrb.w	r2, [r0, #32]
    5da4:	fbb1 f3f2 	udiv	r3, r1, r2
    5da8:	fb02 1113 	mls	r1, r2, r3, r1
    5dac:	1c49      	adds	r1, r1, #1
    5dae:	b2c9      	uxtb	r1, r1
    5db0:	2300      	movs	r3, #0
    5db2:	18c5      	adds	r5, r0, r3
    5db4:	7eea      	ldrb	r2, [r5, #27]
    5db6:	428a      	cmp	r2, r1
    5db8:	d311      	bcc.n	5dde <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    5dba:	f895 5016 	ldrb.w	r5, [r5, #22]
    5dbe:	2200      	movs	r2, #0
    5dc0:	fa04 f602 	lsl.w	r6, r4, r2
    5dc4:	4235      	tst	r5, r6
    5dc6:	d001      	beq.n	5dcc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    5dc8:	1e49      	subs	r1, r1, #1
    5dca:	b2c9      	uxtb	r1, r1
    5dcc:	b121      	cbz	r1, 5dd8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    5dce:	1c52      	adds	r2, r2, #1
    5dd0:	b2d2      	uxtb	r2, r2
    5dd2:	2a08      	cmp	r2, #8
    5dd4:	d3f4      	bcc.n	5dc0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    5dd6:	e004      	b.n	5de2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    5dd8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5ddc:	e7dc      	b.n	5d98 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    5dde:	1a89      	subs	r1, r1, r2
    5de0:	b2c9      	uxtb	r1, r1
    5de2:	1c5b      	adds	r3, r3, #1
    5de4:	b2db      	uxtb	r3, r3
    5de6:	2b05      	cmp	r3, #5
    5de8:	d3e3      	bcc.n	5db2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    5dea:	201f      	movs	r0, #31
    5dec:	bd70      	pop	{r4, r5, r6, pc}
	...

00005df0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5df0:	7841      	ldrb	r1, [r0, #1]
    5df2:	b141      	cbz	r1, 5e06 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5df4:	78c0      	ldrb	r0, [r0, #3]
    5df6:	2819      	cmp	r0, #25
    5df8:	d203      	bcs.n	5e02 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5dfa:	4a04      	ldr	r2, [pc, #16]	; (5e0c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5dfc:	5c10      	ldrb	r0, [r2, r0]
    5dfe:	4288      	cmp	r0, r1
    5e00:	d101      	bne.n	5e06 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5e02:	2001      	movs	r0, #1
    5e04:	4770      	bx	lr
    5e06:	2000      	movs	r0, #0
    5e08:	4770      	bx	lr
    5e0a:	0000      	.short	0x0000
    5e0c:	0000f9b8 	.word	0x0000f9b8

00005e10 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5e10:	b510      	push	{r4, lr}
    5e12:	2201      	movs	r2, #1
    5e14:	70c1      	strb	r1, [r0, #3]
    5e16:	2919      	cmp	r1, #25
    5e18:	d202      	bcs.n	5e20 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5e1a:	4a06      	ldr	r2, [pc, #24]	; (5e34 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5e1c:	5c52      	ldrb	r2, [r2, r1]
    5e1e:	e006      	b.n	5e2e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5e20:	29ff      	cmp	r1, #255	; 0xff
    5e22:	d004      	beq.n	5e2e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5e24:	f240 31d5 	movw	r1, #981	; 0x3d5
    5e28:	202a      	movs	r0, #42	; 0x2a
    5e2a:	f7fd ffb5 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e2e:	7042      	strb	r2, [r0, #1]
    5e30:	bd10      	pop	{r4, pc}
    5e32:	0000      	.short	0x0000
    5e34:	0000f9b8 	.word	0x0000f9b8

00005e38 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    5e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e3c:	ea5f 0900 	movs.w	r9, r0
    5e40:	d006      	beq.n	5e50 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    5e42:	4c21      	ldr	r4, [pc, #132]	; (5ec8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    5e44:	f104 0010 	add.w	r0, r4, #16
    5e48:	7b61      	ldrb	r1, [r4, #13]
    5e4a:	4682      	mov	sl, r0
    5e4c:	b119      	cbz	r1, 5e56 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    5e4e:	e00b      	b.n	5e68 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5e50:	f240 3193 	movw	r1, #915	; 0x393
    5e54:	e005      	b.n	5e62 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    5e56:	2100      	movs	r1, #0
    5e58:	f008 f940 	bl	e0dc <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    5e5c:	b120      	cbz	r0, 5e68 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5e5e:	f240 3196 	movw	r1, #918	; 0x396
    5e62:	202b      	movs	r0, #43	; 0x2b
    5e64:	f7fd ff98 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e68:	8a26      	ldrh	r6, [r4, #16]
    5e6a:	2000      	movs	r0, #0
    5e6c:	f7fe f978 	bl	4160 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    5e70:	4f16      	ldr	r7, [pc, #88]	; (5ecc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    5e72:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5ed0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    5e76:	4605      	mov	r5, r0
    5e78:	6839      	ldr	r1, [r7, #0]
    5e7a:	b129      	cbz	r1, 5e88 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x50>
    5e7c:	8a20      	ldrh	r0, [r4, #16]
    5e7e:	42a8      	cmp	r0, r5
    5e80:	d102      	bne.n	5e88 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x50>
    5e82:	4648      	mov	r0, r9
    5e84:	4788      	blx	r1
    5e86:	e005      	b.n	5e94 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5e88:	f8d8 2000 	ldr.w	r2, [r8]
    5e8c:	b11a      	cbz	r2, 5e96 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5e>
    5e8e:	8a20      	ldrh	r0, [r4, #16]
    5e90:	4649      	mov	r1, r9
    5e92:	4790      	blx	r2
    5e94:	b998      	cbnz	r0, 5ebe <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    5e96:	2100      	movs	r1, #0
    5e98:	4650      	mov	r0, sl
    5e9a:	f008 f91f 	bl	e0dc <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    5e9e:	b910      	cbnz	r0, 5ea6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6e>
    5ea0:	8a20      	ldrh	r0, [r4, #16]
    5ea2:	42b0      	cmp	r0, r6
    5ea4:	d1e8      	bne.n	5e78 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    5ea6:	480b      	ldr	r0, [pc, #44]	; (5ed4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    5ea8:	6801      	ldr	r1, [r0, #0]
    5eaa:	b111      	cbz	r1, 5eb2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    5eac:	4648      	mov	r0, r9
    5eae:	4788      	blx	r1
    5eb0:	b928      	cbnz	r0, 5ebe <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    5eb2:	4809      	ldr	r0, [pc, #36]	; (5ed8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xa0>)
    5eb4:	6801      	ldr	r1, [r0, #0]
    5eb6:	b129      	cbz	r1, 5ec4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5eb8:	4648      	mov	r0, r9
    5eba:	4788      	blx	r1
    5ebc:	b110      	cbz	r0, 5ec4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5ebe:	2001      	movs	r0, #1
    5ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ec4:	2000      	movs	r0, #0
    5ec6:	e7fb      	b.n	5ec0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    5ec8:	20000f98 	.word	0x20000f98
    5ecc:	20000218 	.word	0x20000218
    5ed0:	2000020c 	.word	0x2000020c
    5ed4:	2000021c 	.word	0x2000021c
    5ed8:	20000208 	.word	0x20000208

00005edc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    5edc:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ee0:	b087      	sub	sp, #28
    5ee2:	460c      	mov	r4, r1
    5ee4:	a902      	add	r1, sp, #8
    5ee6:	9807      	ldr	r0, [sp, #28]
    5ee8:	f007 fd79 	bl	d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5eec:	2800      	cmp	r0, #0
    5eee:	d17d      	bne.n	5fec <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5ef0:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6014 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x138>
    5ef4:	f04f 0801 	mov.w	r8, #1
    5ef8:	4682      	mov	sl, r0
    5efa:	9803      	ldr	r0, [sp, #12]
    5efc:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    5f00:	2800      	cmp	r0, #0
    5f02:	d00c      	beq.n	5f1e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5f04:	f8d9 2000 	ldr.w	r2, [r9]
    5f08:	b162      	cbz	r2, 5f24 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5f0a:	4621      	mov	r1, r4
    5f0c:	9807      	ldr	r0, [sp, #28]
    5f0e:	4790      	blx	r2
    5f10:	b140      	cbz	r0, 5f24 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5f12:	4620      	mov	r0, r4
    5f14:	f000 f9c0 	bl	6298 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1b0>
    5f18:	2800      	cmp	r0, #0
    5f1a:	d1ee      	bne.n	5efa <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    5f1c:	2001      	movs	r0, #1
    5f1e:	b009      	add	sp, #36	; 0x24
    5f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f24:	9d03      	ldr	r5, [sp, #12]
    5f26:	f895 0120 	ldrb.w	r0, [r5, #288]	; 0x120
    5f2a:	3578      	adds	r5, #120	; 0x78
    5f2c:	b950      	cbnz	r0, 5f44 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5f2e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    5f32:	f88d 0004 	strb.w	r0, [sp, #4]
    5f36:	9801      	ldr	r0, [sp, #4]
    5f38:	9001      	str	r0, [sp, #4]
    5f3a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5f3e:	b108      	cbz	r0, 5f44 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5f40:	2001      	movs	r0, #1
    5f42:	e000      	b.n	5f46 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    5f44:	2000      	movs	r0, #0
    5f46:	4683      	mov	fp, r0
    5f48:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
    5f4c:	b1c0      	cbz	r0, 5f80 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    5f4e:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
    5f52:	0780      	lsls	r0, r0, #30
    5f54:	d514      	bpl.n	5f80 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    5f56:	f884 a001 	strb.w	sl, [r4, #1]
    5f5a:	f884 8000 	strb.w	r8, [r4]
    5f5e:	f884 a004 	strb.w	sl, [r4, #4]
    5f62:	9907      	ldr	r1, [sp, #28]
    5f64:	f8a4 1005 	strh.w	r1, [r4, #5]
    5f68:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
    5f6c:	71e1      	strb	r1, [r4, #7]
    5f6e:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    5f72:	8121      	strh	r1, [r4, #8]
    5f74:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    5f78:	8161      	strh	r1, [r4, #10]
    5f7a:	f885 a047 	strb.w	sl, [r5, #71]	; 0x47
    5f7e:	e7c8      	b.n	5f12 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5f80:	9807      	ldr	r0, [sp, #28]
    5f82:	f7fe fb1d 	bl	45c0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5f86:	0007      	movs	r7, r0
    5f88:	d00d      	beq.n	5fa6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xca>
    5f8a:	f007 f9bf 	bl	d30c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    5f8e:	0006      	movs	r6, r0
    5f90:	d015      	beq.n	5fbe <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe2>
    5f92:	f884 a001 	strb.w	sl, [r4, #1]
    5f96:	200f      	movs	r0, #15
    5f98:	7020      	strb	r0, [r4, #0]
    5f9a:	9807      	ldr	r0, [sp, #28]
    5f9c:	80e0      	strh	r0, [r4, #6]
    5f9e:	8126      	strh	r6, [r4, #8]
    5fa0:	f884 8004 	strb.w	r8, [r4, #4]
    5fa4:	e007      	b.n	5fb6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xda>
    5fa6:	f240 213a 	movw	r1, #570	; 0x23a
    5faa:	e02d      	b.n	6008 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    5fac:	2100      	movs	r1, #0
    5fae:	4638      	mov	r0, r7
    5fb0:	460a      	mov	r2, r1
    5fb2:	f007 facf 	bl	d554 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    5fb6:	1e76      	subs	r6, r6, #1
    5fb8:	b2b6      	uxth	r6, r6
    5fba:	d2f7      	bcs.n	5fac <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd0>
    5fbc:	e7a9      	b.n	5f12 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5fbe:	9807      	ldr	r0, [sp, #28]
    5fc0:	f7fe fae8 	bl	4594 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5fc4:	b1f0      	cbz	r0, 6004 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x128>
    5fc6:	f1bb 0f00 	cmp.w	fp, #0
    5fca:	d020      	beq.n	600e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    5fcc:	f007 f8b8 	bl	d140 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5fd0:	b160      	cbz	r0, 5fec <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5fd2:	9807      	ldr	r0, [sp, #28]
    5fd4:	f007 fbe8 	bl	d7a8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5fd8:	2100      	movs	r1, #0
    5fda:	9807      	ldr	r0, [sp, #28]
    5fdc:	f7fe f95a 	bl	4294 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5fe0:	f884 a001 	strb.w	sl, [r4, #1]
    5fe4:	210c      	movs	r1, #12
    5fe6:	4650      	mov	r0, sl
    5fe8:	7021      	strb	r1, [r4, #0]
    5fea:	e000      	b.n	5fee <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    5fec:	e00f      	b.n	600e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    5fee:	f884 a004 	strb.w	sl, [r4, #4]
    5ff2:	9907      	ldr	r1, [sp, #28]
    5ff4:	f8a4 1005 	strh.w	r1, [r4, #5]
    5ff8:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    5ffc:	71e1      	strb	r1, [r4, #7]
    5ffe:	3524      	adds	r5, #36	; 0x24
    6000:	7028      	strb	r0, [r5, #0]
    6002:	e786      	b.n	5f12 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6004:	f44f 7116 	mov.w	r1, #600	; 0x258
    6008:	202b      	movs	r0, #43	; 0x2b
    600a:	f7fd fec5 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    600e:	2000      	movs	r0, #0
    6010:	e785      	b.n	5f1e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6012:	0000      	.short	0x0000
    6014:	20000210 	.word	0x20000210

00006018 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI>:
    6018:	b570      	push	{r4, r5, r6, lr}
    601a:	4604      	mov	r4, r0
    601c:	481b      	ldr	r0, [pc, #108]	; (608c <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x74>)
    601e:	6801      	ldr	r1, [r0, #0]
    6020:	b319      	cbz	r1, 606a <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x52>
    6022:	4620      	mov	r0, r4
    6024:	4788      	blx	r1
    6026:	b300      	cbz	r0, 606a <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x52>
    6028:	7820      	ldrb	r0, [r4, #0]
    602a:	2818      	cmp	r0, #24
    602c:	d002      	beq.n	6034 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x1c>
    602e:	2805      	cmp	r0, #5
    6030:	d016      	beq.n	6060 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x48>
    6032:	e018      	b.n	6066 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    6034:	7920      	ldrb	r0, [r4, #4]
    6036:	2801      	cmp	r0, #1
    6038:	d115      	bne.n	6066 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    603a:	88e0      	ldrh	r0, [r4, #6]
    603c:	2100      	movs	r1, #0
    603e:	f007 fb50 	bl	d6e2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6042:	0004      	movs	r4, r0
    6044:	d00f      	beq.n	6066 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    6046:	8820      	ldrh	r0, [r4, #0]
    6048:	f007 fbae 	bl	d7a8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    604c:	8820      	ldrh	r0, [r4, #0]
    604e:	2100      	movs	r1, #0
    6050:	f7fe f920 	bl	4294 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6054:	b138      	cbz	r0, 6066 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    6056:	f240 2192 	movw	r1, #658	; 0x292
    605a:	202b      	movs	r0, #43	; 0x2b
    605c:	f7fd fe9c 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6060:	4620      	mov	r0, r4
    6062:	f000 f85b 	bl	611c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    6066:	2001      	movs	r0, #1
    6068:	bd70      	pop	{r4, r5, r6, pc}
    606a:	4d09      	ldr	r5, [pc, #36]	; (6090 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x78>)
    606c:	7868      	ldrb	r0, [r5, #1]
    606e:	2800      	cmp	r0, #0
    6070:	d0fa      	beq.n	6068 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x50>
    6072:	2600      	movs	r6, #0
    6074:	7066      	strb	r6, [r4, #1]
    6076:	2014      	movs	r0, #20
    6078:	7020      	strb	r0, [r4, #0]
    607a:	2220      	movs	r2, #32
    607c:	4631      	mov	r1, r6
    607e:	1d20      	adds	r0, r4, #4
    6080:	f006 fb0c 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6084:	2002      	movs	r0, #2
    6086:	7120      	strb	r0, [r4, #4]
    6088:	706e      	strb	r6, [r5, #1]
    608a:	e7ec      	b.n	6066 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    608c:	20000214 	.word	0x20000214
    6090:	20000f98 	.word	0x20000f98

00006094 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6098:	4c12      	ldr	r4, [pc, #72]	; (60e4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    609a:	4607      	mov	r7, r0
    609c:	460e      	mov	r6, r1
    609e:	7de0      	ldrb	r0, [r4, #23]
    60a0:	b110      	cbz	r0, 60a8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    60a2:	8b20      	ldrh	r0, [r4, #24]
    60a4:	2800      	cmp	r0, #0
    60a6:	d012      	beq.n	60ce <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    60a8:	480e      	ldr	r0, [pc, #56]	; (60e4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    60aa:	300e      	adds	r0, #14
    60ac:	4680      	mov	r8, r0
    60ae:	f007 ffcb 	bl	e048 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    60b2:	b9a8      	cbnz	r0, 60e0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    60b4:	89e5      	ldrh	r5, [r4, #14]
    60b6:	89e0      	ldrh	r0, [r4, #14]
    60b8:	4632      	mov	r2, r6
    60ba:	4639      	mov	r1, r7
    60bc:	f007 ffc7 	bl	e04e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x6>
    60c0:	b138      	cbz	r0, 60d2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    60c2:	7de0      	ldrb	r0, [r4, #23]
    60c4:	b110      	cbz	r0, 60cc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    60c6:	8b20      	ldrh	r0, [r4, #24]
    60c8:	1e40      	subs	r0, r0, #1
    60ca:	8320      	strh	r0, [r4, #24]
    60cc:	2001      	movs	r0, #1
    60ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    60d2:	4640      	mov	r0, r8
    60d4:	f007 ffb8 	bl	e048 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    60d8:	b910      	cbnz	r0, 60e0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    60da:	89e0      	ldrh	r0, [r4, #14]
    60dc:	42a8      	cmp	r0, r5
    60de:	d1ea      	bne.n	60b6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    60e0:	2000      	movs	r0, #0
    60e2:	e7f4      	b.n	60ce <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    60e4:	20000f98 	.word	0x20000f98

000060e8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    60e8:	b510      	push	{r4, lr}
    60ea:	7901      	ldrb	r1, [r0, #4]
    60ec:	b119      	cbz	r1, 60f6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    60ee:	2901      	cmp	r1, #1
    60f0:	d006      	beq.n	6100 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    60f2:	2000      	movs	r0, #0
    60f4:	bd10      	pop	{r4, pc}
    60f6:	8842      	ldrh	r2, [r0, #2]
    60f8:	6883      	ldr	r3, [r0, #8]
    60fa:	8800      	ldrh	r0, [r0, #0]
    60fc:	2102      	movs	r1, #2
    60fe:	e003      	b.n	6108 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    6100:	8842      	ldrh	r2, [r0, #2]
    6102:	6883      	ldr	r3, [r0, #8]
    6104:	8800      	ldrh	r0, [r0, #0]
    6106:	2101      	movs	r1, #1
    6108:	f000 f878 	bl	61fc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x114>
    610c:	b910      	cbnz	r0, 6114 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    610e:	4902      	ldr	r1, [pc, #8]	; (6118 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    6110:	2001      	movs	r0, #1
    6112:	7008      	strb	r0, [r1, #0]
    6114:	2001      	movs	r0, #1
    6116:	bd10      	pop	{r4, pc}
    6118:	20000f98 	.word	0x20000f98
    611c:	b570      	push	{r4, r5, r6, lr}
    611e:	4604      	mov	r4, r0
    6120:	7800      	ldrb	r0, [r0, #0]
    6122:	2805      	cmp	r0, #5
    6124:	d002      	beq.n	612c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x44>
    6126:	f240 1187 	movw	r1, #391	; 0x187
    612a:	e059      	b.n	61e0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    612c:	7ba0      	ldrb	r0, [r4, #14]
    612e:	06c0      	lsls	r0, r0, #27
    6130:	d402      	bmi.n	6138 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x50>
    6132:	f44f 71c4 	mov.w	r1, #392	; 0x188
    6136:	e053      	b.n	61e0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    6138:	221c      	movs	r2, #28
    613a:	1d21      	adds	r1, r4, #4
    613c:	482e      	ldr	r0, [pc, #184]	; (61f8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    613e:	f006 fa33 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6142:	482d      	ldr	r0, [pc, #180]	; (61f8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    6144:	7b22      	ldrb	r2, [r4, #12]
    6146:	f104 0120 	add.w	r1, r4, #32
    614a:	301c      	adds	r0, #28
    614c:	f006 fa2c 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6150:	4829      	ldr	r0, [pc, #164]	; (61f8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    6152:	f04f 0201 	mov.w	r2, #1
    6156:	7a81      	ldrb	r1, [r0, #10]
    6158:	0749      	lsls	r1, r1, #29
    615a:	d502      	bpl.n	6162 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7a>
    615c:	7cc1      	ldrb	r1, [r0, #19]
    615e:	29fe      	cmp	r1, #254	; 0xfe
    6160:	d00c      	beq.n	617c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x94>
    6162:	2304      	movs	r3, #4
    6164:	7023      	strb	r3, [r4, #0]
    6166:	6801      	ldr	r1, [r0, #0]
    6168:	6061      	str	r1, [r4, #4]
    616a:	6841      	ldr	r1, [r0, #4]
    616c:	60a1      	str	r1, [r4, #8]
    616e:	8901      	ldrh	r1, [r0, #8]
    6170:	81a1      	strh	r1, [r4, #12]
    6172:	7a81      	ldrb	r1, [r0, #10]
    6174:	070d      	lsls	r5, r1, #28
    6176:	d519      	bpl.n	61ac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    6178:	73a3      	strb	r3, [r4, #14]
    617a:	e02c      	b.n	61d6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    617c:	2113      	movs	r1, #19
    617e:	7021      	strb	r1, [r4, #0]
    6180:	7801      	ldrb	r1, [r0, #0]
    6182:	7121      	strb	r1, [r4, #4]
    6184:	7162      	strb	r2, [r4, #5]
    6186:	7841      	ldrb	r1, [r0, #1]
    6188:	71a1      	strb	r1, [r4, #6]
    618a:	f8d0 1002 	ldr.w	r1, [r0, #2]
    618e:	f8c4 1007 	str.w	r1, [r4, #7]
    6192:	88c1      	ldrh	r1, [r0, #6]
    6194:	f8a4 100b 	strh.w	r1, [r4, #11]
    6198:	21fe      	movs	r1, #254	; 0xfe
    619a:	7361      	strb	r1, [r4, #13]
    619c:	6941      	ldr	r1, [r0, #20]
    619e:	f8c4 100e 	str.w	r1, [r4, #14]
    61a2:	8b01      	ldrh	r1, [r0, #24]
    61a4:	8261      	strh	r1, [r4, #18]
    61a6:	7a40      	ldrb	r0, [r0, #9]
    61a8:	7520      	strb	r0, [r4, #20]
    61aa:	bd70      	pop	{r4, r5, r6, pc}
    61ac:	07cb      	lsls	r3, r1, #31
    61ae:	d003      	beq.n	61b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    61b0:	078b      	lsls	r3, r1, #30
    61b2:	d501      	bpl.n	61b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    61b4:	2100      	movs	r1, #0
    61b6:	e00d      	b.n	61d4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    61b8:	074b      	lsls	r3, r1, #29
    61ba:	d501      	bpl.n	61c0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd8>
    61bc:	73a2      	strb	r2, [r4, #14]
    61be:	e00a      	b.n	61d6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    61c0:	07ca      	lsls	r2, r1, #31
    61c2:	d002      	beq.n	61ca <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe2>
    61c4:	f240 11cf 	movw	r1, #463	; 0x1cf
    61c8:	e00a      	b.n	61e0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    61ca:	0789      	lsls	r1, r1, #30
    61cc:	d501      	bpl.n	61d2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xea>
    61ce:	2102      	movs	r1, #2
    61d0:	e000      	b.n	61d4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    61d2:	2103      	movs	r1, #3
    61d4:	73a1      	strb	r1, [r4, #14]
    61d6:	7a02      	ldrb	r2, [r0, #8]
    61d8:	2a1f      	cmp	r2, #31
    61da:	d904      	bls.n	61e6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfe>
    61dc:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    61e0:	202b      	movs	r0, #43	; 0x2b
    61e2:	f7fd fdd9 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61e6:	f104 000f 	add.w	r0, r4, #15
    61ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    61ee:	4902      	ldr	r1, [pc, #8]	; (61f8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    61f0:	311c      	adds	r1, #28
    61f2:	f006 b9d9 	b.w	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    61f6:	0000      	.short	0x0000
    61f8:	20000f5c 	.word	0x20000f5c
    61fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6200:	468a      	mov	sl, r1
    6202:	4699      	mov	r9, r3
    6204:	4615      	mov	r5, r2
    6206:	4604      	mov	r4, r0
    6208:	a901      	add	r1, sp, #4
    620a:	f007 fbe8 	bl	d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    620e:	bbd8      	cbnz	r0, 6288 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a0>
    6210:	9f02      	ldr	r7, [sp, #8]
    6212:	2001      	movs	r0, #1
    6214:	3778      	adds	r7, #120	; 0x78
    6216:	b18d      	cbz	r5, 623c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x154>
    6218:	4620      	mov	r0, r4
    621a:	f7fe f9d1 	bl	45c0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    621e:	0004      	movs	r4, r0
    6220:	d00e      	beq.n	6240 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x158>
    6222:	4629      	mov	r1, r5
    6224:	f007 f8bf 	bl	d3a6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6228:	0006      	movs	r6, r0
    622a:	d003      	beq.n	6234 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14c>
    622c:	4819      	ldr	r0, [pc, #100]	; (6294 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1ac>)
    622e:	8880      	ldrh	r0, [r0, #4]
    6230:	42a8      	cmp	r0, r5
    6232:	d207      	bcs.n	6244 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x15c>
    6234:	2000      	movs	r0, #0
    6236:	b004      	add	sp, #16
    6238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    623c:	7538      	strb	r0, [r7, #20]
    623e:	e023      	b.n	6288 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a0>
    6240:	2189      	movs	r1, #137	; 0x89
    6242:	e024      	b.n	628e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a6>
    6244:	4620      	mov	r0, r4
    6246:	4631      	mov	r1, r6
    6248:	aa03      	add	r2, sp, #12
    624a:	f007 f8a5 	bl	d398 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    624e:	9803      	ldr	r0, [sp, #12]
    6250:	f04f 0800 	mov.w	r8, #0
    6254:	f8a0 8000 	strh.w	r8, [r0]
    6258:	f880 8002 	strb.w	r8, [r0, #2]
    625c:	7d39      	ldrb	r1, [r7, #20]
    625e:	b109      	cbz	r1, 6264 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17c>
    6260:	f04f 0a02 	mov.w	sl, #2
    6264:	4651      	mov	r1, sl
    6266:	f007 fe69 	bl	df3c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    626a:	4631      	mov	r1, r6
    626c:	2603      	movs	r6, #3
    626e:	4620      	mov	r0, r4
    6270:	464a      	mov	r2, r9
    6272:	462b      	mov	r3, r5
    6274:	9600      	str	r6, [sp, #0]
    6276:	f006 ff4c 	bl	d112 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    627a:	4620      	mov	r0, r4
    627c:	4629      	mov	r1, r5
    627e:	f007 f821 	bl	d2c4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6282:	b118      	cbz	r0, 628c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a4>
    6284:	f887 8014 	strb.w	r8, [r7, #20]
    6288:	2001      	movs	r0, #1
    628a:	e7d4      	b.n	6236 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14e>
    628c:	219f      	movs	r1, #159	; 0x9f
    628e:	202b      	movs	r0, #43	; 0x2b
    6290:	f7fd fd82 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6294:	20000f98 	.word	0x20000f98
    6298:	b510      	push	{r4, lr}
    629a:	492c      	ldr	r1, [pc, #176]	; (634c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>)
    629c:	b086      	sub	sp, #24
    629e:	7d8a      	ldrb	r2, [r1, #22]
    62a0:	7801      	ldrb	r1, [r0, #0]
    62a2:	07d3      	lsls	r3, r2, #31
    62a4:	d101      	bne.n	62aa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1c2>
    62a6:	291d      	cmp	r1, #29
    62a8:	d004      	beq.n	62b4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1cc>
    62aa:	291c      	cmp	r1, #28
    62ac:	d01e      	beq.n	62ec <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x204>
    62ae:	2915      	cmp	r1, #21
    62b0:	d045      	beq.n	633e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x256>
    62b2:	e049      	b.n	6348 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    62b4:	8880      	ldrh	r0, [r0, #4]
    62b6:	f8ad 0000 	strh.w	r0, [sp]
    62ba:	a902      	add	r1, sp, #8
    62bc:	f007 fb8f 	bl	d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    62c0:	b108      	cbz	r0, 62c6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1de>
    62c2:	2158      	movs	r1, #88	; 0x58
    62c4:	e035      	b.n	6332 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    62c6:	9803      	ldr	r0, [sp, #12]
    62c8:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    62cc:	f88d 1002 	strb.w	r1, [sp, #2]
    62d0:	7841      	ldrb	r1, [r0, #1]
    62d2:	f88d 1003 	strb.w	r1, [sp, #3]
    62d6:	8840      	ldrh	r0, [r0, #2]
    62d8:	f8ad 0004 	strh.w	r0, [sp, #4]
    62dc:	2102      	movs	r1, #2
    62de:	4668      	mov	r0, sp
    62e0:	f004 fc7e 	bl	abe0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    62e4:	b340      	cbz	r0, 6338 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    62e6:	f240 114d 	movw	r1, #333	; 0x14d
    62ea:	e022      	b.n	6332 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    62ec:	0791      	lsls	r1, r2, #30
    62ee:	d42b      	bmi.n	6348 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    62f0:	8884      	ldrh	r4, [r0, #4]
    62f2:	a903      	add	r1, sp, #12
    62f4:	4620      	mov	r0, r4
    62f6:	f008 fe0e 	bl	ef16 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    62fa:	b110      	cbz	r0, 6302 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x21a>
    62fc:	f44f 71aa 	mov.w	r1, #340	; 0x154
    6300:	e017      	b.n	6332 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    6302:	f8ad 4000 	strh.w	r4, [sp]
    6306:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    630a:	f8ad 0002 	strh.w	r0, [sp, #2]
    630e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6312:	f8ad 0004 	strh.w	r0, [sp, #4]
    6316:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    631a:	f8ad 0006 	strh.w	r0, [sp, #6]
    631e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6322:	f8ad 0008 	strh.w	r0, [sp, #8]
    6326:	4668      	mov	r0, sp
    6328:	f008 fe20 	bl	ef6c <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    632c:	b120      	cbz	r0, 6338 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    632e:	f240 115d 	movw	r1, #349	; 0x15d
    6332:	202b      	movs	r0, #43	; 0x2b
    6334:	f7fd fd30 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6338:	2001      	movs	r0, #1
    633a:	b006      	add	sp, #24
    633c:	bd10      	pop	{r4, pc}
    633e:	0751      	lsls	r1, r2, #29
    6340:	d402      	bmi.n	6348 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    6342:	7b80      	ldrb	r0, [r0, #14]
    6344:	07c0      	lsls	r0, r0, #31
    6346:	d0f7      	beq.n	6338 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    6348:	2000      	movs	r0, #0
    634a:	e7f6      	b.n	633a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x252>
    634c:	20000f98 	.word	0x20000f98

00006350 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q>:
    6350:	b510      	push	{r4, lr}
    6352:	4603      	mov	r3, r0
    6354:	4907      	ldr	r1, [pc, #28]	; (6374 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0x24>)
    6356:	4c08      	ldr	r4, [pc, #32]	; (6378 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0x28>)
    6358:	2001      	movs	r0, #1
    635a:	780a      	ldrb	r2, [r1, #0]
    635c:	1c52      	adds	r2, r2, #1
    635e:	f002 021f 	and.w	r2, r2, #31
    6362:	700a      	strb	r2, [r1, #0]
    6364:	fa00 f202 	lsl.w	r2, r0, r2
    6368:	4222      	tst	r2, r4
    636a:	d0f6      	beq.n	635a <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0xa>
    636c:	7809      	ldrb	r1, [r1, #0]
    636e:	4088      	lsls	r0, r1
    6370:	4058      	eors	r0, r3
    6372:	bd10      	pop	{r4, pc}
    6374:	20000295 	.word	0x20000295
    6378:	abd7aeaa 	.word	0xabd7aeaa

0000637c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    637c:	b5f0      	push	{r4, r5, r6, r7, lr}
    637e:	f06f 021f 	mvn.w	r2, #31
    6382:	0c01      	lsrs	r1, r0, #16
    6384:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    6388:	251f      	movs	r5, #31
    638a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    638e:	3854      	subs	r0, #84	; 0x54
    6390:	d00d      	beq.n	63ae <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6392:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6396:	3855      	subs	r0, #85	; 0x55
    6398:	d009      	beq.n	63ae <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    639a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    639e:	38aa      	subs	r0, #170	; 0xaa
    63a0:	d005      	beq.n	63ae <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    63a2:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    63a6:	38aa      	subs	r0, #170	; 0xaa
    63a8:	d001      	beq.n	63ae <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    63aa:	2001      	movs	r0, #1
    63ac:	e000      	b.n	63b0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    63ae:	2000      	movs	r0, #0
    63b0:	2200      	movs	r2, #0
    63b2:	4613      	mov	r3, r2
    63b4:	ea4f 0402 	mov.w	r4, r2
    63b8:	ea82 0701 	eor.w	r7, r2, r1
    63bc:	43ff      	mvns	r7, r7
    63be:	431f      	orrs	r7, r3
    63c0:	1c7f      	adds	r7, r7, #1
    63c2:	d00f      	beq.n	63e4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    63c4:	f006 0701 	and.w	r7, r6, #1
    63c8:	0852      	lsrs	r2, r2, #1
    63ca:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    63ce:	f005 0701 	and.w	r7, r5, #1
    63d2:	085b      	lsrs	r3, r3, #1
    63d4:	0876      	lsrs	r6, r6, #1
    63d6:	086d      	lsrs	r5, r5, #1
    63d8:	1c64      	adds	r4, r4, #1
    63da:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    63de:	2c16      	cmp	r4, #22
    63e0:	d3ea      	bcc.n	63b8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    63e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63e4:	2000      	movs	r0, #0
    63e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000063e8 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    63e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    63ec:	2500      	movs	r5, #0
    63ee:	f8df 808c 	ldr.w	r8, [pc, #140]	; 647c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x94>
    63f2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 6480 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x98>
    63f6:	4607      	mov	r7, r0
    63f8:	260a      	movs	r6, #10
    63fa:	2104      	movs	r1, #4
    63fc:	4668      	mov	r0, sp
    63fe:	f7fd fd75 	bl	3eec <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    6402:	9800      	ldr	r0, [sp, #0]
    6404:	ea00 0008 	and.w	r0, r0, r8
    6408:	ea40 0009 	orr.w	r0, r0, r9
    640c:	9000      	str	r0, [sp, #0]
    640e:	2000      	movs	r0, #0
    6410:	f7fd fea6 	bl	4160 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6414:	4604      	mov	r4, r0
    6416:	e019      	b.n	644c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x64>
    6418:	a901      	add	r1, sp, #4
    641a:	2000      	movs	r0, #0
    641c:	f007 f96a 	bl	d6f4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    6420:	e00e      	b.n	6440 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    6422:	bf00      	nop
    6424:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    6428:	42b8      	cmp	r0, r7
    642a:	d009      	beq.n	6440 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    642c:	9803      	ldr	r0, [sp, #12]
    642e:	9900      	ldr	r1, [sp, #0]
    6430:	6900      	ldr	r0, [r0, #16]
    6432:	4288      	cmp	r0, r1
    6434:	d104      	bne.n	6440 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    6436:	4608      	mov	r0, r1
    6438:	f7ff ff8a 	bl	6350 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q>
    643c:	9000      	str	r0, [sp, #0]
    643e:	e004      	b.n	644a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x62>
    6440:	a801      	add	r0, sp, #4
    6442:	f7fd fed9 	bl	41f8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6446:	0005      	movs	r5, r0
    6448:	d0ec      	beq.n	6424 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3c>
    644a:	1e64      	subs	r4, r4, #1
    644c:	2c00      	cmp	r4, #0
    644e:	dd01      	ble.n	6454 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x6c>
    6450:	2d00      	cmp	r5, #0
    6452:	d0e1      	beq.n	6418 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x30>
    6454:	2000      	movs	r0, #0
    6456:	f7fd fe83 	bl	4160 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    645a:	b100      	cbz	r0, 645e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x76>
    645c:	b155      	cbz	r5, 6474 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x8c>
    645e:	9800      	ldr	r0, [sp, #0]
    6460:	f7ff ff8c 	bl	637c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    6464:	1e76      	subs	r6, r6, #1
    6466:	d001      	beq.n	646c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x84>
    6468:	2800      	cmp	r0, #0
    646a:	d0c6      	beq.n	63fa <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x12>
    646c:	9800      	ldr	r0, [sp, #0]
    646e:	b004      	add	sp, #16
    6470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6474:	2152      	movs	r1, #82	; 0x52
    6476:	200f      	movs	r0, #15
    6478:	f7fd fc8e 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    647c:	abd7aeaa 	.word	0xabd7aeaa
    6480:	10204115 	.word	0x10204115

00006484 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    6484:	4801      	ldr	r0, [pc, #4]	; (648c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    6486:	6840      	ldr	r0, [r0, #4]
    6488:	3080      	adds	r0, #128	; 0x80
    648a:	4770      	bx	lr
    648c:	200000ec 	.word	0x200000ec

00006490 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    6490:	b510      	push	{r4, lr}
    6492:	4c1f      	ldr	r4, [pc, #124]	; (6510 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x80>)
    6494:	6860      	ldr	r0, [r4, #4]
    6496:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    649a:	f007 ff89 	bl	e3b0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    649e:	6861      	ldr	r1, [r4, #4]
    64a0:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    64a4:	3132      	adds	r1, #50	; 0x32
    64a6:	f7fe fabd 	bl	4a24 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    64aa:	6860      	ldr	r0, [r4, #4]
    64ac:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    64b0:	f007 ff85 	bl	e3be <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    64b4:	6861      	ldr	r1, [r4, #4]
    64b6:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
    64ba:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    64be:	3132      	adds	r1, #50	; 0x32
    64c0:	f007 ff62 	bl	e388 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    64c4:	b930      	cbnz	r0, 64d4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    64c6:	6861      	ldr	r1, [r4, #4]
    64c8:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    64cc:	3132      	adds	r1, #50	; 0x32
    64ce:	f007 ff64 	bl	e39a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    64d2:	b108      	cbz	r0, 64d8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    64d4:	2101      	movs	r1, #1
    64d6:	e000      	b.n	64da <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    64d8:	2100      	movs	r1, #0
    64da:	6860      	ldr	r0, [r4, #4]
    64dc:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
    64e0:	b919      	cbnz	r1, 64ea <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    64e2:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
    64e6:	2900      	cmp	r1, #0
    64e8:	d010      	beq.n	650c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7c>
    64ea:	2100      	movs	r1, #0
    64ec:	6781      	str	r1, [r0, #120]	; 0x78
    64ee:	f005 fee6 	bl	c2be <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    64f2:	6861      	ldr	r1, [r4, #4]
    64f4:	6448      	str	r0, [r1, #68]	; 0x44
    64f6:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    64fa:	b110      	cbz	r0, 6502 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x72>
    64fc:	2000      	movs	r0, #0
    64fe:	f7ff f883 	bl	5608 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    6502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6506:	2000      	movs	r0, #0
    6508:	f000 bddc 	b.w	70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    650c:	bd10      	pop	{r4, pc}
    650e:	0000      	.short	0x0000
    6510:	200000ec 	.word	0x200000ec

00006514 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    6514:	b510      	push	{r4, lr}
    6516:	4c09      	ldr	r4, [pc, #36]	; (653c <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x28>)
    6518:	2803      	cmp	r0, #3
    651a:	6864      	ldr	r4, [r4, #4]
    651c:	d109      	bne.n	6532 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    651e:	63e1      	str	r1, [r4, #60]	; 0x3c
    6520:	b13b      	cbz	r3, 6532 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    6522:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    6526:	6819      	ldr	r1, [r3, #0]
    6528:	f8c4 104d 	str.w	r1, [r4, #77]	; 0x4d
    652c:	8899      	ldrh	r1, [r3, #4]
    652e:	f8a4 1051 	strh.w	r1, [r4, #81]	; 0x51
    6532:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    6536:	2000      	movs	r0, #0
    6538:	bd10      	pop	{r4, pc}
    653a:	0000      	.short	0x0000
    653c:	200000ec 	.word	0x200000ec

00006540 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    6540:	4807      	ldr	r0, [pc, #28]	; (6560 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x20>)
    6542:	b508      	push	{r3, lr}
    6544:	6840      	ldr	r0, [r0, #4]
    6546:	7801      	ldrb	r1, [r0, #0]
    6548:	f88d 1000 	strb.w	r1, [sp]
    654c:	9900      	ldr	r1, [sp, #0]
    654e:	9100      	str	r1, [sp, #0]
    6550:	f89d 1000 	ldrb.w	r1, [sp]
    6554:	b109      	cbz	r1, 655a <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x1a>
    6556:	8880      	ldrh	r0, [r0, #4]
    6558:	bd08      	pop	{r3, pc}
    655a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    655e:	bd08      	pop	{r3, pc}
    6560:	200000ec 	.word	0x200000ec

00006564 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q>:
    6564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6566:	4604      	mov	r4, r0
    6568:	f007 ff72 	bl	e450 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>
    656c:	bb48      	cbnz	r0, 65c2 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    656e:	4e17      	ldr	r6, [pc, #92]	; (65cc <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x68>)
    6570:	6870      	ldr	r0, [r6, #4]
    6572:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    6576:	f88d 1000 	strb.w	r1, [sp]
    657a:	9900      	ldr	r1, [sp, #0]
    657c:	9100      	str	r1, [sp, #0]
    657e:	f89d 1000 	ldrb.w	r1, [sp]
    6582:	2500      	movs	r5, #0
    6584:	b139      	cbz	r1, 6596 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x32>
    6586:	7065      	strb	r5, [r4, #1]
    6588:	2107      	movs	r1, #7
    658a:	7021      	strb	r1, [r4, #0]
    658c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    658e:	6061      	str	r1, [r4, #4]
    6590:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
    6594:	e015      	b.n	65c2 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    6596:	4620      	mov	r0, r4
    6598:	f000 f9d0 	bl	693c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    659c:	b988      	cbnz	r0, 65c2 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    659e:	6870      	ldr	r0, [r6, #4]
    65a0:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
    65a4:	f88d 1000 	strb.w	r1, [sp]
    65a8:	9900      	ldr	r1, [sp, #0]
    65aa:	9100      	str	r1, [sp, #0]
    65ac:	f89d 1000 	ldrb.w	r1, [sp]
    65b0:	b149      	cbz	r1, 65c6 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x62>
    65b2:	7065      	strb	r5, [r4, #1]
    65b4:	2118      	movs	r1, #24
    65b6:	7021      	strb	r1, [r4, #0]
    65b8:	f8d0 102a 	ldr.w	r1, [r0, #42]	; 0x2a
    65bc:	6061      	str	r1, [r4, #4]
    65be:	300a      	adds	r0, #10
    65c0:	7785      	strb	r5, [r0, #30]
    65c2:	2001      	movs	r0, #1
    65c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    65c6:	2000      	movs	r0, #0
    65c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    65ca:	0000      	.short	0x0000
    65cc:	200000ec 	.word	0x200000ec

000065d0 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    65d0:	4902      	ldr	r1, [pc, #8]	; (65dc <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    65d2:	6849      	ldr	r1, [r1, #4]
    65d4:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
    65d8:	2000      	movs	r0, #0
    65da:	4770      	bx	lr
    65dc:	200000ec 	.word	0x200000ec

000065e0 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    65e0:	4809      	ldr	r0, [pc, #36]	; (6608 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x28>)
    65e2:	6841      	ldr	r1, [r0, #4]
    65e4:	6d48      	ldr	r0, [r1, #84]	; 0x54
    65e6:	b168      	cbz	r0, 6604 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x24>
    65e8:	f101 0059 	add.w	r0, r1, #89	; 0x59
    65ec:	2201      	movs	r2, #1
    65ee:	7002      	strb	r2, [r0, #0]
    65f0:	2300      	movs	r3, #0
    65f2:	654b      	str	r3, [r1, #84]	; 0x54
    65f4:	7003      	strb	r3, [r0, #0]
    65f6:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    65fa:	4082      	lsls	r2, r0
    65fc:	4803      	ldr	r0, [pc, #12]	; (660c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    65fe:	6002      	str	r2, [r0, #0]
    6600:	2000      	movs	r0, #0
    6602:	4770      	bx	lr
    6604:	200c      	movs	r0, #12
    6606:	4770      	bx	lr
    6608:	200000ec 	.word	0x200000ec
    660c:	4001f508 	.word	0x4001f508

00006610 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    6610:	4909      	ldr	r1, [pc, #36]	; (6638 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x28>)
    6612:	b510      	push	{r4, lr}
    6614:	6088      	str	r0, [r1, #8]
    6616:	68c8      	ldr	r0, [r1, #12]
    6618:	b150      	cbz	r0, 6630 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x20>
    661a:	f000 ff55 	bl	74c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c8>
    661e:	f000 f885 	bl	672c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    6622:	2800      	cmp	r0, #0
    6624:	d007      	beq.n	6636 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x26>
    6626:	f640 0169 	movw	r1, #2153	; 0x869
    662a:	2032      	movs	r0, #50	; 0x32
    662c:	f7fd fbb4 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6630:	f640 0165 	movw	r1, #2149	; 0x865
    6634:	e7f9      	b.n	662a <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x1a>
    6636:	bd10      	pop	{r4, pc}
    6638:	200000ec 	.word	0x200000ec

0000663c <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    663c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6640:	4c0f      	ldr	r4, [pc, #60]	; (6680 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    6642:	4605      	mov	r5, r0
    6644:	4616      	mov	r6, r2
    6646:	6860      	ldr	r0, [r4, #4]
    6648:	460f      	mov	r7, r1
    664a:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    664e:	f007 feb6 	bl	e3be <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    6652:	b158      	cbz	r0, 666c <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    6654:	b955      	cbnz	r5, 666c <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    6656:	4638      	mov	r0, r7
    6658:	f007 feaa 	bl	e3b0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    665c:	4631      	mov	r1, r6
    665e:	f007 f944 	bl	d8ea <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6662:	2808      	cmp	r0, #8
    6664:	d002      	beq.n	666c <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    6666:	2001      	movs	r0, #1
    6668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    666c:	6860      	ldr	r0, [r4, #4]
    666e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    6672:	f007 fe9d 	bl	e3b0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    6676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    667a:	f7fe b9ff 	b.w	4a7c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    667e:	0000      	.short	0x0000
    6680:	200000ec 	.word	0x200000ec

00006684 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    6684:	b570      	push	{r4, r5, r6, lr}
    6686:	4c13      	ldr	r4, [pc, #76]	; (66d4 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    6688:	4615      	mov	r5, r2
    668a:	460e      	mov	r6, r1
    668c:	2800      	cmp	r0, #0
    668e:	d016      	beq.n	66be <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    6690:	f04f 0200 	mov.w	r2, #0
    6694:	6861      	ldr	r1, [r4, #4]
    6696:	f801 2f39 	strb.w	r2, [r1, #57]!
    669a:	7248      	strb	r0, [r1, #9]
    669c:	f04f 0008 	mov.w	r0, #8
    66a0:	f881 002e 	strb.w	r0, [r1, #46]	; 0x2e
    66a4:	d114      	bne.n	66d0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    66a6:	4630      	mov	r0, r6
    66a8:	f007 fe82 	bl	e3b0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    66ac:	4629      	mov	r1, r5
    66ae:	f007 f91c 	bl	d8ea <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    66b2:	6861      	ldr	r1, [r4, #4]
    66b4:	2808      	cmp	r0, #8
    66b6:	f881 0067 	strb.w	r0, [r1, #103]	; 0x67
    66ba:	d003      	beq.n	66c4 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    66bc:	e008      	b.n	66d0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    66be:	f04f 0201 	mov.w	r2, #1
    66c2:	e7e7      	b.n	6694 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    66c4:	4630      	mov	r0, r6
    66c6:	f007 fe7a 	bl	e3be <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    66ca:	b108      	cbz	r0, 66d0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    66cc:	2012      	movs	r0, #18
    66ce:	bd70      	pop	{r4, r5, r6, pc}
    66d0:	2000      	movs	r0, #0
    66d2:	bd70      	pop	{r4, r5, r6, pc}
    66d4:	200000ec 	.word	0x200000ec

000066d8 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    66d8:	4902      	ldr	r1, [pc, #8]	; (66e4 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    66da:	4801      	ldr	r0, [pc, #4]	; (66e0 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    66dc:	60c8      	str	r0, [r1, #12]
    66de:	4770      	bx	lr
    66e0:	0000770c 	.word	0x0000770c
    66e4:	200000ec 	.word	0x200000ec

000066e8 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    66e8:	4902      	ldr	r1, [pc, #8]	; (66f4 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    66ea:	6849      	ldr	r1, [r1, #4]
    66ec:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    66f0:	4770      	bx	lr
    66f2:	0000      	.short	0x0000
    66f4:	200000ec 	.word	0x200000ec

000066f8 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    66f8:	b570      	push	{r4, r5, r6, lr}
    66fa:	4605      	mov	r5, r0
    66fc:	f7fd ff78 	bl	45f0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    6700:	4604      	mov	r4, r0
    6702:	f7fd ff7b 	bl	45fc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    6706:	4621      	mov	r1, r4
    6708:	f007 fea0 	bl	e44c <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    670c:	0001      	movs	r1, r0
    670e:	d006      	beq.n	671e <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    6710:	4805      	ldr	r0, [pc, #20]	; (6728 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    6712:	68c0      	ldr	r0, [r0, #12]
    6714:	6802      	ldr	r2, [r0, #0]
    6716:	4628      	mov	r0, r5
    6718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    671c:	4710      	bx	r2
    671e:	f640 1161 	movw	r1, #2401	; 0x961
    6722:	2032      	movs	r0, #50	; 0x32
    6724:	f7fd fb38 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6728:	200000ec 	.word	0x200000ec

0000672c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    672c:	b570      	push	{r4, r5, r6, lr}
    672e:	4d19      	ldr	r5, [pc, #100]	; (6794 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    6730:	6868      	ldr	r0, [r5, #4]
    6732:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    6736:	2901      	cmp	r1, #1
    6738:	d004      	beq.n	6744 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    673a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    673e:	b108      	cbz	r0, 6744 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    6740:	200c      	movs	r0, #12
    6742:	bd70      	pop	{r4, r5, r6, pc}
    6744:	f7fd ff7e 	bl	4644 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    6748:	f007 fee6 	bl	e518 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>
    674c:	6868      	ldr	r0, [r5, #4]
    674e:	2400      	movs	r4, #0
    6750:	7004      	strb	r4, [r0, #0]
    6752:	f100 0122 	add.w	r1, r0, #34	; 0x22
    6756:	700c      	strb	r4, [r1, #0]
    6758:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    675c:	f000 f8b4 	bl	68c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    6760:	6868      	ldr	r0, [r5, #4]
    6762:	2201      	movs	r2, #1
    6764:	2107      	movs	r1, #7
    6766:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
    676a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    676e:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    6772:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
    6776:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
    677a:	f880 407d 	strb.w	r4, [r0, #125]	; 0x7d
    677e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    6782:	f100 0159 	add.w	r1, r0, #89	; 0x59
    6786:	700a      	strb	r2, [r1, #0]
    6788:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    678c:	6544      	str	r4, [r0, #84]	; 0x54
    678e:	700c      	strb	r4, [r1, #0]
    6790:	2000      	movs	r0, #0
    6792:	bd70      	pop	{r4, r5, r6, pc}
    6794:	200000ec 	.word	0x200000ec

00006798 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    6798:	4805      	ldr	r0, [pc, #20]	; (67b0 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    679a:	b510      	push	{r4, lr}
    679c:	6840      	ldr	r0, [r0, #4]
    679e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    67a2:	f007 fe05 	bl	e3b0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    67a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67aa:	f7fe b967 	b.w	4a7c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    67ae:	0000      	.short	0x0000
    67b0:	200000ec 	.word	0x200000ec

000067b4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    67b4:	b140      	cbz	r0, 67c8 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    67b6:	2802      	cmp	r0, #2
    67b8:	d006      	beq.n	67c8 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    67ba:	2200      	movs	r2, #0
    67bc:	4903      	ldr	r1, [pc, #12]	; (67cc <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    67be:	6849      	ldr	r1, [r1, #4]
    67c0:	f801 2f39 	strb.w	r2, [r1, #57]!
    67c4:	7208      	strb	r0, [r1, #8]
    67c6:	4770      	bx	lr
    67c8:	2201      	movs	r2, #1
    67ca:	e7f7      	b.n	67bc <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    67cc:	200000ec 	.word	0x200000ec

000067d0 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    67d0:	4902      	ldr	r1, [pc, #8]	; (67dc <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    67d2:	6849      	ldr	r1, [r1, #4]
    67d4:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    67d8:	4770      	bx	lr
    67da:	0000      	.short	0x0000
    67dc:	200000ec 	.word	0x200000ec

000067e0 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    67e0:	b510      	push	{r4, lr}
    67e2:	4604      	mov	r4, r0
    67e4:	7800      	ldrb	r0, [r0, #0]
    67e6:	07c0      	lsls	r0, r0, #31
    67e8:	d007      	beq.n	67fa <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x1a>
    67ea:	2300      	movs	r3, #0
    67ec:	7860      	ldrb	r0, [r4, #1]
    67ee:	461a      	mov	r2, r3
    67f0:	4619      	mov	r1, r3
    67f2:	f7ff fe8f 	bl	6514 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    67f6:	2800      	cmp	r0, #0
    67f8:	d10c      	bne.n	6814 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>
    67fa:	4b07      	ldr	r3, [pc, #28]	; (6818 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x38>)
    67fc:	78a0      	ldrb	r0, [r4, #2]
    67fe:	6859      	ldr	r1, [r3, #4]
    6800:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    6804:	78e0      	ldrb	r0, [r4, #3]
    6806:	f7ff ffd5 	bl	67b4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    680a:	6859      	ldr	r1, [r3, #4]
    680c:	7920      	ldrb	r0, [r4, #4]
    680e:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    6812:	2000      	movs	r0, #0
    6814:	bd10      	pop	{r4, pc}
    6816:	0000      	.short	0x0000
    6818:	200000ec 	.word	0x200000ec

0000681c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    681c:	4801      	ldr	r0, [pc, #4]	; (6824 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    681e:	68c0      	ldr	r0, [r0, #12]
    6820:	6840      	ldr	r0, [r0, #4]
    6822:	4700      	bx	r0
    6824:	200000ec 	.word	0x200000ec

00006828 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    6828:	b510      	push	{r4, lr}
    682a:	2000      	movs	r0, #0
    682c:	f000 fc70 	bl	7110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>
    6830:	f000 f84a 	bl	68c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    6834:	f000 fe48 	bl	74c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c8>
    6838:	4803      	ldr	r0, [pc, #12]	; (6848 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x20>)
    683a:	6840      	ldr	r0, [r0, #4]
    683c:	2100      	movs	r1, #0
    683e:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    6842:	4608      	mov	r0, r1
    6844:	bd10      	pop	{r4, pc}
    6846:	0000      	.short	0x0000
    6848:	200000ec 	.word	0x200000ec

0000684c <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    684c:	b510      	push	{r4, lr}
    684e:	f000 f951 	bl	6af4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    6852:	4909      	ldr	r1, [pc, #36]	; (6878 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x2c>)
    6854:	2201      	movs	r2, #1
    6856:	b130      	cbz	r0, 6866 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1a>
    6858:	6848      	ldr	r0, [r1, #4]
    685a:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
    685e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    6860:	881b      	ldrh	r3, [r3, #0]
    6862:	8583      	strh	r3, [r0, #44]	; 0x2c
    6864:	e004      	b.n	6870 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x24>
    6866:	684b      	ldr	r3, [r1, #4]
    6868:	2000      	movs	r0, #0
    686a:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
    686e:	8598      	strh	r0, [r3, #44]	; 0x2c
    6870:	6848      	ldr	r0, [r1, #4]
    6872:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    6876:	bd10      	pop	{r4, pc}
    6878:	200000ec 	.word	0x200000ec

0000687c <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    687c:	4802      	ldr	r0, [pc, #8]	; (6888 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    687e:	6840      	ldr	r0, [r0, #4]
    6880:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6884:	4770      	bx	lr
    6886:	0000      	.short	0x0000
    6888:	200000ec 	.word	0x200000ec

0000688c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    688c:	b510      	push	{r4, lr}
    688e:	f000 f931 	bl	6af4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    6892:	490c      	ldr	r1, [pc, #48]	; (68c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    6894:	b128      	cbz	r0, 68a2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    6896:	6848      	ldr	r0, [r1, #4]
    6898:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
    689c:	2801      	cmp	r0, #1
    689e:	d00e      	beq.n	68be <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    68a0:	e00c      	b.n	68bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    68a2:	6849      	ldr	r1, [r1, #4]
    68a4:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    68a8:	2801      	cmp	r0, #1
    68aa:	d001      	beq.n	68b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    68ac:	2802      	cmp	r0, #2
    68ae:	d105      	bne.n	68bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    68b0:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    68b4:	2801      	cmp	r0, #1
    68b6:	d003      	beq.n	68c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    68b8:	2803      	cmp	r0, #3
    68ba:	d001      	beq.n	68c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    68bc:	2000      	movs	r0, #0
    68be:	bd10      	pop	{r4, pc}
    68c0:	2001      	movs	r0, #1
    68c2:	bd10      	pop	{r4, pc}
    68c4:	200000ec 	.word	0x200000ec
    68c8:	b510      	push	{r4, lr}
    68ca:	4c07      	ldr	r4, [pc, #28]	; (68e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    68cc:	6860      	ldr	r0, [r4, #4]
    68ce:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    68d2:	2800      	cmp	r0, #0
    68d4:	d007      	beq.n	68e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    68d6:	f004 fe19 	bl	b50c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    68da:	f004 fbfb 	bl	b0d4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    68de:	6861      	ldr	r1, [r4, #4]
    68e0:	2000      	movs	r0, #0
    68e2:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    68e6:	bd10      	pop	{r4, pc}
    68e8:	200000ec 	.word	0x200000ec
    68ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68f0:	4d10      	ldr	r5, [pc, #64]	; (6934 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    68f2:	4606      	mov	r6, r0
    68f4:	460f      	mov	r7, r1
    68f6:	6868      	ldr	r0, [r5, #4]
    68f8:	490f      	ldr	r1, [pc, #60]	; (6938 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    68fa:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    68fe:	5c0c      	ldrb	r4, [r1, r0]
    6900:	4620      	mov	r0, r4
    6902:	f005 f967 	bl	bbd4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    6906:	6868      	ldr	r0, [r5, #4]
    6908:	2101      	movs	r1, #1
    690a:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74
    690e:	2025      	movs	r0, #37	; 0x25
    6910:	f008 ffc2 	bl	f898 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    6914:	4638      	mov	r0, r7
    6916:	f005 f86f 	bl	b9f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    691a:	f04f 0101 	mov.w	r1, #1
    691e:	4608      	mov	r0, r1
    6920:	b126      	cbz	r6, 692c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    6922:	f004 fea5 	bl	b670 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6926:	b918      	cbnz	r0, 6930 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    6928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    692c:	f004 fe54 	bl	b5d8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6930:	2001      	movs	r0, #1
    6932:	e7f9      	b.n	6928 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    6934:	200000ec 	.word	0x200000ec
    6938:	0000f9d4 	.word	0x0000f9d4
    693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    693e:	4e20      	ldr	r6, [pc, #128]	; (69c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
    6940:	4604      	mov	r4, r0
    6942:	6870      	ldr	r0, [r6, #4]
    6944:	7801      	ldrb	r1, [r0, #0]
    6946:	f88d 1000 	strb.w	r1, [sp]
    694a:	9900      	ldr	r1, [sp, #0]
    694c:	9100      	str	r1, [sp, #0]
    694e:	f89d 1000 	ldrb.w	r1, [sp]
    6952:	b389      	cbz	r1, 69b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
    6954:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6956:	6882      	ldr	r2, [r0, #8]
    6958:	f841 2f03 	str.w	r2, [r1, #3]!
    695c:	8982      	ldrh	r2, [r0, #12]
    695e:	808a      	strh	r2, [r1, #4]
    6960:	79c0      	ldrb	r0, [r0, #7]
    6962:	f007 fd25 	bl	e3b0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    6966:	6871      	ldr	r1, [r6, #4]
    6968:	2500      	movs	r5, #0
    696a:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    696c:	1c89      	adds	r1, r1, #2
    696e:	7090      	strb	r0, [r2, #2]
    6970:	7065      	strb	r5, [r4, #1]
    6972:	2014      	movs	r0, #20
    6974:	7020      	strb	r0, [r4, #0]
    6976:	2220      	movs	r2, #32
    6978:	1d20      	adds	r0, r4, #4
    697a:	f005 fe15 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    697e:	4a11      	ldr	r2, [pc, #68]	; (69c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>)
    6980:	7225      	strb	r5, [r4, #8]
    6982:	2301      	movs	r3, #1
    6984:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    6986:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    698a:	6871      	ldr	r1, [r6, #4]
    698c:	700d      	strb	r5, [r1, #0]
    698e:	f101 0028 	add.w	r0, r1, #40	; 0x28
    6992:	7005      	strb	r5, [r0, #0]
    6994:	88e0      	ldrh	r0, [r4, #6]
    6996:	8490      	strh	r0, [r2, #36]	; 0x24
    6998:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    699a:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    699e:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
    69a2:	4610      	mov	r0, r2
    69a4:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    69a8:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    69aa:	8800      	ldrh	r0, [r0, #0]
    69ac:	f7fd fdf2 	bl	4594 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    69b0:	f006 fd82 	bl	d4b8 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    69b4:	2001      	movs	r0, #1
    69b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69b8:	e7ff      	b.n	69ba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e>
    69ba:	2000      	movs	r0, #0
    69bc:	e7fb      	b.n	69b6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12a>
    69be:	0000      	.short	0x0000
    69c0:	200000ec 	.word	0x200000ec
    69c4:	20000fb4 	.word	0x20000fb4
    69c8:	b570      	push	{r4, r5, r6, lr}
    69ca:	4c1d      	ldr	r4, [pc, #116]	; (6a40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b4>)
    69cc:	4605      	mov	r5, r0
    69ce:	2907      	cmp	r1, #7
    69d0:	6860      	ldr	r0, [r4, #4]
    69d2:	f890 6039 	ldrb.w	r6, [r0, #57]	; 0x39
    69d6:	d301      	bcc.n	69dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x150>
    69d8:	2000      	movs	r0, #0
    69da:	bd70      	pop	{r4, r5, r6, pc}
    69dc:	7c68      	ldrb	r0, [r5, #17]
    69de:	6869      	ldr	r1, [r5, #4]
    69e0:	f007 fcdb 	bl	e39a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    69e4:	6861      	ldr	r1, [r4, #4]
    69e6:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    69ea:	b141      	cbz	r1, 69fe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x172>
    69ec:	b138      	cbz	r0, 69fe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x172>
    69ee:	f006 ff72 	bl	d8d6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    69f2:	4601      	mov	r1, r0
    69f4:	6860      	ldr	r0, [r4, #4]
    69f6:	f800 1f64 	strb.w	r1, [r0, #100]!
    69fa:	2101      	movs	r1, #1
    69fc:	71c1      	strb	r1, [r0, #7]
    69fe:	6863      	ldr	r3, [r4, #4]
    6a00:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    6a04:	28ff      	cmp	r0, #255	; 0xff
    6a06:	d012      	beq.n	6a2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a2>
    6a08:	f883 0065 	strb.w	r0, [r3, #101]	; 0x65
    6a0c:	f7fe feaa 	bl	5764 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6a10:	4330      	orrs	r0, r6
    6a12:	6869      	ldr	r1, [r5, #4]
    6a14:	2900      	cmp	r1, #0
    6a16:	d0e0      	beq.n	69da <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x14e>
    6a18:	6861      	ldr	r1, [r4, #4]
    6a1a:	7c6a      	ldrb	r2, [r5, #17]
    6a1c:	f881 2075 	strb.w	r2, [r1, #117]	; 0x75
    6a20:	686a      	ldr	r2, [r5, #4]
    6a22:	6813      	ldr	r3, [r2, #0]
    6a24:	f841 3f6e 	str.w	r3, [r1, #110]!
    6a28:	8892      	ldrh	r2, [r2, #4]
    6a2a:	808a      	strh	r2, [r1, #4]
    6a2c:	bd70      	pop	{r4, r5, r6, pc}
    6a2e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
    6a32:	7c68      	ldrb	r0, [r5, #17]
    6a34:	3364      	adds	r3, #100	; 0x64
    6a36:	6869      	ldr	r1, [r5, #4]
    6a38:	f7fe ff10 	bl	585c <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY>
    6a3c:	e7e9      	b.n	6a12 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x186>
    6a3e:	0000      	.short	0x0000
    6a40:	200000ec 	.word	0x200000ec
    6a44:	b510      	push	{r4, lr}
    6a46:	4915      	ldr	r1, [pc, #84]	; (6a9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x210>)
    6a48:	6842      	ldr	r2, [r0, #4]
    6a4a:	6849      	ldr	r1, [r1, #4]
    6a4c:	7813      	ldrb	r3, [r2, #0]
    6a4e:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
    6a52:	42a3      	cmp	r3, r4
    6a54:	d11f      	bne.n	6a96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    6a56:	7853      	ldrb	r3, [r2, #1]
    6a58:	f891 406f 	ldrb.w	r4, [r1, #111]	; 0x6f
    6a5c:	42a3      	cmp	r3, r4
    6a5e:	d11a      	bne.n	6a96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    6a60:	7893      	ldrb	r3, [r2, #2]
    6a62:	f891 4070 	ldrb.w	r4, [r1, #112]	; 0x70
    6a66:	42a3      	cmp	r3, r4
    6a68:	d115      	bne.n	6a96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    6a6a:	78d3      	ldrb	r3, [r2, #3]
    6a6c:	f891 4071 	ldrb.w	r4, [r1, #113]	; 0x71
    6a70:	42a3      	cmp	r3, r4
    6a72:	d110      	bne.n	6a96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    6a74:	7913      	ldrb	r3, [r2, #4]
    6a76:	f891 4072 	ldrb.w	r4, [r1, #114]	; 0x72
    6a7a:	42a3      	cmp	r3, r4
    6a7c:	d10b      	bne.n	6a96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    6a7e:	7952      	ldrb	r2, [r2, #5]
    6a80:	f891 3073 	ldrb.w	r3, [r1, #115]	; 0x73
    6a84:	429a      	cmp	r2, r3
    6a86:	d106      	bne.n	6a96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    6a88:	7c40      	ldrb	r0, [r0, #17]
    6a8a:	f891 1075 	ldrb.w	r1, [r1, #117]	; 0x75
    6a8e:	4288      	cmp	r0, r1
    6a90:	d101      	bne.n	6a96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    6a92:	2001      	movs	r0, #1
    6a94:	bd10      	pop	{r4, pc}
    6a96:	2000      	movs	r0, #0
    6a98:	bd10      	pop	{r4, pc}
    6a9a:	0000      	.short	0x0000
    6a9c:	200000ec 	.word	0x200000ec
    6aa0:	b530      	push	{r4, r5, lr}
    6aa2:	7801      	ldrb	r1, [r0, #0]
    6aa4:	b08b      	sub	sp, #44	; 0x2c
    6aa6:	f001 040f 	and.w	r4, r1, #15
    6aaa:	4622      	mov	r2, r4
    6aac:	a901      	add	r1, sp, #4
    6aae:	f000 feb9 	bl	7824 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    6ab2:	a801      	add	r0, sp, #4
    6ab4:	f7ff ffc6 	bl	6a44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b8>
    6ab8:	4605      	mov	r5, r0
    6aba:	f004 fd45 	bl	b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6abe:	f000 fb41 	bl	7144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>
    6ac2:	2c04      	cmp	r4, #4
    6ac4:	d111      	bne.n	6aea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25e>
    6ac6:	b185      	cbz	r5, 6aea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25e>
    6ac8:	a80a      	add	r0, sp, #40	; 0x28
    6aca:	f000 fb47 	bl	715c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>
    6ace:	f99d 0028 	ldrsb.w	r0, [sp, #40]	; 0x28
    6ad2:	9000      	str	r0, [sp, #0]
    6ad4:	4806      	ldr	r0, [pc, #24]	; (6af0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x264>)
    6ad6:	6840      	ldr	r0, [r0, #4]
    6ad8:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    6adc:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    6ae0:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
    6ae4:	a801      	add	r0, sp, #4
    6ae6:	f007 fd19 	bl	e51c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    6aea:	b00b      	add	sp, #44	; 0x2c
    6aec:	2005      	movs	r0, #5
    6aee:	bd30      	pop	{r4, r5, pc}
    6af0:	200000ec 	.word	0x200000ec
    6af4:	4804      	ldr	r0, [pc, #16]	; (6b08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x27c>)
    6af6:	6840      	ldr	r0, [r0, #4]
    6af8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6afc:	2803      	cmp	r0, #3
    6afe:	d001      	beq.n	6b04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x278>
    6b00:	2000      	movs	r0, #0
    6b02:	4770      	bx	lr
    6b04:	2001      	movs	r0, #1
    6b06:	4770      	bx	lr
    6b08:	200000ec 	.word	0x200000ec
    6b0c:	4908      	ldr	r1, [pc, #32]	; (6b30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a4>)
    6b0e:	b510      	push	{r4, lr}
    6b10:	6849      	ldr	r1, [r1, #4]
    6b12:	7c83      	ldrb	r3, [r0, #18]
    6b14:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    6b18:	429a      	cmp	r2, r3
    6b1a:	d105      	bne.n	6b28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x29c>
    6b1c:	6880      	ldr	r0, [r0, #8]
    6b1e:	2206      	movs	r2, #6
    6b20:	3132      	adds	r1, #50	; 0x32
    6b22:	f005 fd2f 	bl	c584 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6b26:	b108      	cbz	r0, 6b2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a0>
    6b28:	2000      	movs	r0, #0
    6b2a:	bd10      	pop	{r4, pc}
    6b2c:	2001      	movs	r0, #1
    6b2e:	bd10      	pop	{r4, pc}
    6b30:	200000ec 	.word	0x200000ec
    6b34:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    6b36:	4c3d      	ldr	r4, [pc, #244]	; (6c2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a0>)
    6b38:	466f      	mov	r7, sp
    6b3a:	6860      	ldr	r0, [r4, #4]
    6b3c:	7801      	ldrb	r1, [r0, #0]
    6b3e:	f88d 1008 	strb.w	r1, [sp, #8]
    6b42:	9902      	ldr	r1, [sp, #8]
    6b44:	9102      	str	r1, [sp, #8]
    6b46:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6b4a:	b111      	cbz	r1, 6b52 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c6>
    6b4c:	f241 313a 	movw	r1, #4922	; 0x133a
    6b50:	e04f      	b.n	6bf2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x366>
    6b52:	2500      	movs	r5, #0
    6b54:	7085      	strb	r5, [r0, #2]
    6b56:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6b58:	880a      	ldrh	r2, [r1, #0]
    6b5a:	8082      	strh	r2, [r0, #4]
    6b5c:	68c8      	ldr	r0, [r1, #12]
    6b5e:	f006 ff4e 	bl	d9fe <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6b62:	6861      	ldr	r1, [r4, #4]
    6b64:	8348      	strh	r0, [r1, #26]
    6b66:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    6b68:	8a82      	ldrh	r2, [r0, #20]
    6b6a:	838a      	strh	r2, [r1, #28]
    6b6c:	8ac0      	ldrh	r0, [r0, #22]
    6b6e:	83c8      	strh	r0, [r1, #30]
    6b70:	f881 5020 	strb.w	r5, [r1, #32]
    6b74:	4669      	mov	r1, sp
    6b76:	68a0      	ldr	r0, [r4, #8]
    6b78:	f007 fa18 	bl	dfac <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
    6b7c:	68a0      	ldr	r0, [r4, #8]
    6b7e:	7800      	ldrb	r0, [r0, #0]
    6b80:	f3c0 1680 	ubfx	r6, r0, #6, #1
    6b84:	6860      	ldr	r0, [r4, #4]
    6b86:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6b8a:	b120      	cbz	r0, 6b96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30a>
    6b8c:	4639      	mov	r1, r7
    6b8e:	4630      	mov	r0, r6
    6b90:	f007 fc03 	bl	e39a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6b94:	b940      	cbnz	r0, 6ba8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x31c>
    6b96:	6860      	ldr	r0, [r4, #4]
    6b98:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    6b9c:	b160      	cbz	r0, 6bb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32c>
    6b9e:	4639      	mov	r1, r7
    6ba0:	4630      	mov	r0, r6
    6ba2:	f007 fbf1 	bl	e388 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    6ba6:	b138      	cbz	r0, 6bb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32c>
    6ba8:	6860      	ldr	r0, [r4, #4]
    6baa:	9900      	ldr	r1, [sp, #0]
    6bac:	f8c0 100e 	str.w	r1, [r0, #14]
    6bb0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6bb4:	8241      	strh	r1, [r0, #18]
    6bb6:	e003      	b.n	6bc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x334>
    6bb8:	6860      	ldr	r0, [r4, #4]
    6bba:	f8c0 500e 	str.w	r5, [r0, #14]
    6bbe:	8245      	strh	r5, [r0, #18]
    6bc0:	6861      	ldr	r1, [r4, #4]
    6bc2:	f891 0065 	ldrb.w	r0, [r1, #101]	; 0x65
    6bc6:	28ff      	cmp	r0, #255	; 0xff
    6bc8:	d016      	beq.n	6bf8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36c>
    6bca:	f101 0208 	add.w	r2, r1, #8
    6bce:	1dc9      	adds	r1, r1, #7
    6bd0:	f7fe fdae 	bl	5730 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6bd4:	b158      	cbz	r0, 6bee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x362>
    6bd6:	6860      	ldr	r0, [r4, #4]
    6bd8:	79c1      	ldrb	r1, [r0, #7]
    6bda:	f041 0102 	orr.w	r1, r1, #2
    6bde:	71c1      	strb	r1, [r0, #7]
    6be0:	f8d0 106e 	ldr.w	r1, [r0, #110]	; 0x6e
    6be4:	6141      	str	r1, [r0, #20]
    6be6:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
    6bea:	8301      	strh	r1, [r0, #24]
    6bec:	e00f      	b.n	6c0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x382>
    6bee:	f241 3165 	movw	r1, #4965	; 0x1365
    6bf2:	2032      	movs	r0, #50	; 0x32
    6bf4:	f7fd f8d0 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6bf8:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    6bfc:	71c8      	strb	r0, [r1, #7]
    6bfe:	f8d1 006e 	ldr.w	r0, [r1, #110]	; 0x6e
    6c02:	6088      	str	r0, [r1, #8]
    6c04:	f8b1 0072 	ldrh.w	r0, [r1, #114]	; 0x72
    6c08:	8188      	strh	r0, [r1, #12]
    6c0a:	614d      	str	r5, [r1, #20]
    6c0c:	830d      	strh	r5, [r1, #24]
    6c0e:	6860      	ldr	r0, [r4, #4]
    6c10:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    6c12:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
    6c16:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    6c1a:	2101      	movs	r1, #1
    6c1c:	7001      	strb	r1, [r0, #0]
    6c1e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6c20:	8800      	ldrh	r0, [r0, #0]
    6c22:	f7fd fcb7 	bl	4594 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6c26:	f006 fc4d 	bl	d4c4 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6c2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6c2c:	200000ec 	.word	0x200000ec
    6c30:	b570      	push	{r4, r5, r6, lr}
    6c32:	4d39      	ldr	r5, [pc, #228]	; (6d18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48c>)
    6c34:	4601      	mov	r1, r0
    6c36:	2200      	movs	r2, #0
    6c38:	e9d5 6001 	ldrd	r6, r0, [r5, #4]
    6c3c:	365c      	adds	r6, #92	; 0x5c
    6c3e:	8002      	strh	r2, [r0, #0]
    6c40:	2903      	cmp	r1, #3
    6c42:	d002      	beq.n	6c4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3be>
    6c44:	2905      	cmp	r1, #5
    6c46:	d004      	beq.n	6c52 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c6>
    6c48:	e056      	b.n	6cf8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46c>
    6c4a:	2103      	movs	r1, #3
    6c4c:	f007 f9c5 	bl	dfda <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6c50:	e052      	b.n	6cf8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46c>
    6c52:	2105      	movs	r1, #5
    6c54:	f007 f9c1 	bl	dfda <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6c58:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6c5c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6c5e:	6909      	ldr	r1, [r1, #16]
    6c60:	f844 1f0f 	str.w	r1, [r4, #15]!
    6c64:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6c66:	8b0a      	ldrh	r2, [r1, #24]
    6c68:	80a2      	strh	r2, [r4, #4]
    6c6a:	7e89      	ldrb	r1, [r1, #26]
    6c6c:	71a1      	strb	r1, [r4, #6]
    6c6e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6c70:	68c1      	ldr	r1, [r0, #12]
    6c72:	8b80      	ldrh	r0, [r0, #28]
    6c74:	f007 f85f 	bl	dd36 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    6c78:	71e0      	strb	r0, [r4, #7]
    6c7a:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6c7e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6c80:	68c1      	ldr	r1, [r0, #12]
    6c82:	6a00      	ldr	r0, [r0, #32]
    6c84:	f007 f84c 	bl	dd20 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    6c88:	75e0      	strb	r0, [r4, #23]
    6c8a:	0a00      	lsrs	r0, r0, #8
    6c8c:	7620      	strb	r0, [r4, #24]
    6c8e:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6c92:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6c94:	68c0      	ldr	r0, [r0, #12]
    6c96:	f006 feb2 	bl	d9fe <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6c9a:	7660      	strb	r0, [r4, #25]
    6c9c:	0a00      	lsrs	r0, r0, #8
    6c9e:	76a0      	strb	r0, [r4, #26]
    6ca0:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6ca4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6ca6:	8a89      	ldrh	r1, [r1, #20]
    6ca8:	76e1      	strb	r1, [r4, #27]
    6caa:	0a09      	lsrs	r1, r1, #8
    6cac:	7721      	strb	r1, [r4, #28]
    6cae:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6cb0:	8ac9      	ldrh	r1, [r1, #22]
    6cb2:	7761      	strb	r1, [r4, #29]
    6cb4:	0a09      	lsrs	r1, r1, #8
    6cb6:	77a1      	strb	r1, [r4, #30]
    6cb8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6cba:	f851 2f8e 	ldr.w	r2, [r1, #142]!
    6cbe:	f8c4 201f 	str.w	r2, [r4, #31]
    6cc2:	7909      	ldrb	r1, [r1, #4]
    6cc4:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
    6cc8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6cca:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    6cce:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    6cd2:	f001 011f 	and.w	r1, r1, #31
    6cd6:	f020 001f 	bic.w	r0, r0, #31
    6cda:	4308      	orrs	r0, r1
    6cdc:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    6ce0:	f004 f9da 	bl	b098 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    6ce4:	2807      	cmp	r0, #7
    6ce6:	d900      	bls.n	6cea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x45e>
    6ce8:	2007      	movs	r0, #7
    6cea:	f814 1f24 	ldrb.w	r1, [r4, #36]!
    6cee:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
    6cf2:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    6cf6:	7021      	strb	r1, [r4, #0]
    6cf8:	f106 0112 	add.w	r1, r6, #18
    6cfc:	68a8      	ldr	r0, [r5, #8]
    6cfe:	f007 f987 	bl	e010 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6d02:	7e71      	ldrb	r1, [r6, #25]
    6d04:	68a8      	ldr	r0, [r5, #8]
    6d06:	f007 f989 	bl	e01c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6d0a:	f000 fba5 	bl	7458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>
    6d0e:	68a8      	ldr	r0, [r5, #8]
    6d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6d14:	f004 be70 	b.w	b9f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6d18:	200000ec 	.word	0x200000ec
    6d1c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6d20:	4f65      	ldr	r7, [pc, #404]	; (6eb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62c>)
    6d22:	4604      	mov	r4, r0
    6d24:	468a      	mov	sl, r1
    6d26:	6878      	ldr	r0, [r7, #4]
    6d28:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6d2c:	b180      	cbz	r0, 6d50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>
    6d2e:	2600      	movs	r6, #0
    6d30:	2500      	movs	r5, #0
    6d32:	7ca0      	ldrb	r0, [r4, #18]
    6d34:	68a1      	ldr	r1, [r4, #8]
    6d36:	f007 fb30 	bl	e39a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6d3a:	4681      	mov	r9, r0
    6d3c:	f7ff feda 	bl	6af4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    6d40:	b140      	cbz	r0, 6d54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    6d42:	6878      	ldr	r0, [r7, #4]
    6d44:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    6d48:	b121      	cbz	r1, 6d54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    6d4a:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    6d4e:	e004      	b.n	6d5a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ce>
    6d50:	2601      	movs	r6, #1
    6d52:	e7ed      	b.n	6d30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    6d54:	6878      	ldr	r0, [r7, #4]
    6d56:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    6d5a:	4683      	mov	fp, r0
    6d5c:	f7fe fc3a 	bl	55d4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    6d60:	ea5f 0800 	movs.w	r8, r0
    6d64:	d00c      	beq.n	6d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>
    6d66:	4658      	mov	r0, fp
    6d68:	f7fe fc28 	bl	55bc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    6d6c:	b100      	cbz	r0, 6d70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4e4>
    6d6e:	2601      	movs	r6, #1
    6d70:	f1b9 0f00 	cmp.w	r9, #0
    6d74:	d004      	beq.n	6d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>
    6d76:	4640      	mov	r0, r8
    6d78:	68a1      	ldr	r1, [r4, #8]
    6d7a:	f006 fd5f 	bl	d83c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    6d7e:	4605      	mov	r5, r0
    6d80:	6878      	ldr	r0, [r7, #4]
    6d82:	46b8      	mov	r8, r7
    6d84:	f890 7031 	ldrb.w	r7, [r0, #49]	; 0x31
    6d88:	b10d      	cbz	r5, 6d8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    6d8a:	f047 0702 	orr.w	r7, r7, #2
    6d8e:	f7ff feb1 	bl	6af4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    6d92:	b3a0      	cbz	r0, 6dfe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x572>
    6d94:	6860      	ldr	r0, [r4, #4]
    6d96:	f8d8 1004 	ldr.w	r1, [r8, #4]
    6d9a:	7802      	ldrb	r2, [r0, #0]
    6d9c:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    6da0:	429a      	cmp	r2, r3
    6da2:	d11f      	bne.n	6de4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6da4:	7842      	ldrb	r2, [r0, #1]
    6da6:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    6daa:	429a      	cmp	r2, r3
    6dac:	d11a      	bne.n	6de4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6dae:	7882      	ldrb	r2, [r0, #2]
    6db0:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    6db4:	429a      	cmp	r2, r3
    6db6:	d115      	bne.n	6de4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6db8:	78c2      	ldrb	r2, [r0, #3]
    6dba:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    6dbe:	429a      	cmp	r2, r3
    6dc0:	d110      	bne.n	6de4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6dc2:	7902      	ldrb	r2, [r0, #4]
    6dc4:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    6dc8:	429a      	cmp	r2, r3
    6dca:	d10b      	bne.n	6de4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6dcc:	7940      	ldrb	r0, [r0, #5]
    6dce:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    6dd2:	4290      	cmp	r0, r2
    6dd4:	d106      	bne.n	6de4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6dd6:	7c60      	ldrb	r0, [r4, #17]
    6dd8:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
    6ddc:	4288      	cmp	r0, r1
    6dde:	d101      	bne.n	6de4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6de0:	2001      	movs	r0, #1
    6de2:	e000      	b.n	6de6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x55a>
    6de4:	2000      	movs	r0, #0
    6de6:	4f35      	ldr	r7, [pc, #212]	; (6ebc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x630>)
    6de8:	4681      	mov	r9, r0
    6dea:	f897 0064 	ldrb.w	r0, [r7, #100]	; 0x64
    6dee:	2808      	cmp	r0, #8
    6df0:	d006      	beq.n	6e00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x574>
    6df2:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
    6df6:	4288      	cmp	r0, r1
    6df8:	d102      	bne.n	6e00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x574>
    6dfa:	2001      	movs	r0, #1
    6dfc:	e001      	b.n	6e02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x576>
    6dfe:	e021      	b.n	6e44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b8>
    6e00:	2000      	movs	r0, #0
    6e02:	4680      	mov	r8, r0
    6e04:	b925      	cbnz	r5, 6e10 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x584>
    6e06:	b12e      	cbz	r6, 6e14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x588>
    6e08:	4620      	mov	r0, r4
    6e0a:	f7ff fe7f 	bl	6b0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    6e0e:	b108      	cbz	r0, 6e14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x588>
    6e10:	2001      	movs	r0, #1
    6e12:	e000      	b.n	6e16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x58a>
    6e14:	2000      	movs	r0, #0
    6e16:	f1ba 0f00 	cmp.w	sl, #0
    6e1a:	d009      	beq.n	6e30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    6e1c:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
    6e20:	2901      	cmp	r1, #1
    6e22:	d003      	beq.n	6e2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a0>
    6e24:	b921      	cbnz	r1, 6e30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    6e26:	ea59 0108 	orrs.w	r1, r9, r8
    6e2a:	d001      	beq.n	6e30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    6e2c:	2101      	movs	r1, #1
    6e2e:	e000      	b.n	6e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a6>
    6e30:	2100      	movs	r1, #0
    6e32:	4208      	tst	r0, r1
    6e34:	d003      	beq.n	6e3e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b2>
    6e36:	200c      	movs	r0, #12
    6e38:	b004      	add	sp, #16
    6e3a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6e3e:	f004 fb83 	bl	b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6e42:	e036      	b.n	6eb2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    6e44:	f004 fb80 	bl	b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6e48:	f1ba 0f00 	cmp.w	sl, #0
    6e4c:	d031      	beq.n	6eb2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    6e4e:	4620      	mov	r0, r4
    6e50:	f7ff fe5c 	bl	6b0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    6e54:	b900      	cbnz	r0, 6e58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5cc>
    6e56:	b175      	cbz	r5, 6e76 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ea>
    6e58:	a803      	add	r0, sp, #12
    6e5a:	f000 f97f 	bl	715c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>
    6e5e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6e62:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6e66:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6e6a:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6e6e:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6e72:	463b      	mov	r3, r7
    6e74:	e018      	b.n	6ea8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61c>
    6e76:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6e7a:	4645      	mov	r5, r8
    6e7c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    6e80:	2803      	cmp	r0, #3
    6e82:	d001      	beq.n	6e88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fc>
    6e84:	2802      	cmp	r0, #2
    6e86:	d114      	bne.n	6eb2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    6e88:	f1b9 0f00 	cmp.w	r9, #0
    6e8c:	d011      	beq.n	6eb2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    6e8e:	a803      	add	r0, sp, #12
    6e90:	f000 f964 	bl	715c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>
    6e94:	686a      	ldr	r2, [r5, #4]
    6e96:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6e9a:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6e9e:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6ea2:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6ea6:	23fe      	movs	r3, #254	; 0xfe
    6ea8:	2101      	movs	r1, #1
    6eaa:	4620      	mov	r0, r4
    6eac:	3232      	adds	r2, #50	; 0x32
    6eae:	f000 fc43 	bl	7738 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6eb2:	2005      	movs	r0, #5
    6eb4:	e7c0      	b.n	6e38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ac>
    6eb6:	0000      	.short	0x0000
    6eb8:	200000ec 	.word	0x200000ec
    6ebc:	20000fb4 	.word	0x20000fb4
    6ec0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6ec2:	4605      	mov	r5, r0
    6ec4:	2900      	cmp	r1, #0
    6ec6:	d06e      	beq.n	6fa6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x71a>
    6ec8:	4c3c      	ldr	r4, [pc, #240]	; (6fbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x730>)
    6eca:	6860      	ldr	r0, [r4, #4]
    6ecc:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6ed0:	2802      	cmp	r0, #2
    6ed2:	d02c      	beq.n	6f2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6a2>
    6ed4:	2801      	cmp	r0, #1
    6ed6:	d043      	beq.n	6f60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d4>
    6ed8:	f7ff fe0c 	bl	6af4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    6edc:	2800      	cmp	r0, #0
    6ede:	d067      	beq.n	6fb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x724>
    6ee0:	686a      	ldr	r2, [r5, #4]
    6ee2:	6861      	ldr	r1, [r4, #4]
    6ee4:	7810      	ldrb	r0, [r2, #0]
    6ee6:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    6eea:	4298      	cmp	r0, r3
    6eec:	d14c      	bne.n	6f88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6eee:	7850      	ldrb	r0, [r2, #1]
    6ef0:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    6ef4:	4298      	cmp	r0, r3
    6ef6:	d147      	bne.n	6f88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6ef8:	7890      	ldrb	r0, [r2, #2]
    6efa:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    6efe:	4298      	cmp	r0, r3
    6f00:	d142      	bne.n	6f88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6f02:	78d0      	ldrb	r0, [r2, #3]
    6f04:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    6f08:	4298      	cmp	r0, r3
    6f0a:	d13d      	bne.n	6f88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6f0c:	7910      	ldrb	r0, [r2, #4]
    6f0e:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    6f12:	4298      	cmp	r0, r3
    6f14:	d138      	bne.n	6f88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6f16:	7950      	ldrb	r0, [r2, #5]
    6f18:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    6f1c:	4290      	cmp	r0, r2
    6f1e:	d133      	bne.n	6f88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6f20:	7c68      	ldrb	r0, [r5, #17]
    6f22:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
    6f26:	4290      	cmp	r0, r2
    6f28:	d12e      	bne.n	6f88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6f2a:	2001      	movs	r0, #1
    6f2c:	e02d      	b.n	6f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fe>
    6f2e:	a803      	add	r0, sp, #12
    6f30:	f000 f914 	bl	715c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>
    6f34:	6862      	ldr	r2, [r4, #4]
    6f36:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6f3a:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6f3e:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6f42:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6f46:	23ff      	movs	r3, #255	; 0xff
    6f48:	2100      	movs	r1, #0
    6f4a:	4628      	mov	r0, r5
    6f4c:	3232      	adds	r2, #50	; 0x32
    6f4e:	f000 fbf3 	bl	7738 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6f52:	6861      	ldr	r1, [r4, #4]
    6f54:	2001      	movs	r0, #1
    6f56:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    6f5a:	200b      	movs	r0, #11
    6f5c:	b004      	add	sp, #16
    6f5e:	bd70      	pop	{r4, r5, r6, pc}
    6f60:	a803      	add	r0, sp, #12
    6f62:	f000 f8fb 	bl	715c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>
    6f66:	6862      	ldr	r2, [r4, #4]
    6f68:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6f6c:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6f70:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6f74:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6f78:	23ff      	movs	r3, #255	; 0xff
    6f7a:	2100      	movs	r1, #0
    6f7c:	4628      	mov	r0, r5
    6f7e:	3232      	adds	r2, #50	; 0x32
    6f80:	f000 fbda 	bl	7738 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6f84:	2005      	movs	r0, #5
    6f86:	e7e9      	b.n	6f5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>
    6f88:	2000      	movs	r0, #0
    6f8a:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    6f8e:	2901      	cmp	r1, #1
    6f90:	d00c      	beq.n	6fac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    6f92:	b958      	cbnz	r0, 6fac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    6f94:	490a      	ldr	r1, [pc, #40]	; (6fc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x734>)
    6f96:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    6f9a:	2808      	cmp	r0, #8
    6f9c:	d003      	beq.n	6fa6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x71a>
    6f9e:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
    6fa2:	4281      	cmp	r1, r0
    6fa4:	d002      	beq.n	6fac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    6fa6:	f004 facf 	bl	b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6faa:	e7eb      	b.n	6f84 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6f8>
    6fac:	200c      	movs	r0, #12
    6fae:	e7d5      	b.n	6f5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>
    6fb0:	f640 515b 	movw	r1, #3419	; 0xd5b
    6fb4:	2032      	movs	r0, #50	; 0x32
    6fb6:	f7fc feef 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fba:	0000      	.short	0x0000
    6fbc:	200000ec 	.word	0x200000ec
    6fc0:	20000fb4 	.word	0x20000fb4
    6fc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6fc6:	4605      	mov	r5, r0
    6fc8:	b139      	cbz	r1, 6fda <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x74e>
    6fca:	4c1c      	ldr	r4, [pc, #112]	; (703c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    6fcc:	6860      	ldr	r0, [r4, #4]
    6fce:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6fd2:	2802      	cmp	r0, #2
    6fd4:	d004      	beq.n	6fe0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x754>
    6fd6:	2801      	cmp	r0, #1
    6fd8:	d01b      	beq.n	7012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    6fda:	f004 fab5 	bl	b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6fde:	e02a      	b.n	7036 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36>
    6fe0:	a803      	add	r0, sp, #12
    6fe2:	f000 f8bb 	bl	715c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>
    6fe6:	6862      	ldr	r2, [r4, #4]
    6fe8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6fec:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6ff0:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6ff4:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6ff8:	23ff      	movs	r3, #255	; 0xff
    6ffa:	2106      	movs	r1, #6
    6ffc:	4628      	mov	r0, r5
    6ffe:	3232      	adds	r2, #50	; 0x32
    7000:	f000 fb9a 	bl	7738 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7004:	6862      	ldr	r2, [r4, #4]
    7006:	200b      	movs	r0, #11
    7008:	2100      	movs	r1, #0
    700a:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    700e:	b004      	add	sp, #16
    7010:	bd70      	pop	{r4, r5, r6, pc}
    7012:	a803      	add	r0, sp, #12
    7014:	f000 f8a2 	bl	715c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>
    7018:	6862      	ldr	r2, [r4, #4]
    701a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    701e:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7022:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7026:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    702a:	23ff      	movs	r3, #255	; 0xff
    702c:	2106      	movs	r1, #6
    702e:	4628      	mov	r0, r5
    7030:	3232      	adds	r2, #50	; 0x32
    7032:	f000 fb81 	bl	7738 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7036:	2005      	movs	r0, #5
    7038:	e7e9      	b.n	700e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    703a:	0000      	.short	0x0000
    703c:	200000ec 	.word	0x200000ec
    7040:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7042:	b389      	cbz	r1, 70a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>
    7044:	2901      	cmp	r1, #1
    7046:	d035      	beq.n	70b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>
    7048:	2405      	movs	r4, #5
    704a:	2902      	cmp	r1, #2
    704c:	d004      	beq.n	7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    704e:	2906      	cmp	r1, #6
    7050:	d024      	beq.n	709c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>
    7052:	f004 fa79 	bl	b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7056:	e01e      	b.n	7096 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x96>
    7058:	4605      	mov	r5, r0
    705a:	4616      	mov	r6, r2
    705c:	f004 fa74 	bl	b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7060:	b1ce      	cbz	r6, 7096 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x96>
    7062:	4e17      	ldr	r6, [pc, #92]	; (70c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>)
    7064:	6870      	ldr	r0, [r6, #4]
    7066:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    706a:	2801      	cmp	r0, #1
    706c:	d001      	beq.n	7072 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72>
    706e:	2802      	cmp	r0, #2
    7070:	d111      	bne.n	7096 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x96>
    7072:	a803      	add	r0, sp, #12
    7074:	f000 f872 	bl	715c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>
    7078:	6872      	ldr	r2, [r6, #4]
    707a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    707e:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7082:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7086:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    708a:	23ff      	movs	r3, #255	; 0xff
    708c:	2102      	movs	r1, #2
    708e:	4628      	mov	r0, r5
    7090:	3232      	adds	r2, #50	; 0x32
    7092:	f000 fb51 	bl	7738 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7096:	b004      	add	sp, #16
    7098:	4620      	mov	r0, r4
    709a:	bd70      	pop	{r4, r5, r6, pc}
    709c:	b004      	add	sp, #16
    709e:	4611      	mov	r1, r2
    70a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    70a4:	f7ff bf8e 	b.w	6fc4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    70a8:	b004      	add	sp, #16
    70aa:	4611      	mov	r1, r2
    70ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    70b0:	f7ff bf06 	b.w	6ec0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x634>
    70b4:	b004      	add	sp, #16
    70b6:	4611      	mov	r1, r2
    70b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    70bc:	f7ff be2e 	b.w	6d1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x490>
    70c0:	200000ec 	.word	0x200000ec
    70c4:	b570      	push	{r4, r5, r6, lr}
    70c6:	4c11      	ldr	r4, [pc, #68]	; (710c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>)
    70c8:	4605      	mov	r5, r0
    70ca:	6861      	ldr	r1, [r4, #4]
    70cc:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
    70d0:	2800      	cmp	r0, #0
    70d2:	d019      	beq.n	7108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    70d4:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    70d8:	2800      	cmp	r0, #0
    70da:	d015      	beq.n	7108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    70dc:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    70e0:	3132      	adds	r1, #50	; 0x32
    70e2:	f007 f95a 	bl	e39a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    70e6:	b140      	cbz	r0, 70fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfa>
    70e8:	f7fe fa3e 	bl	5568 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    70ec:	6861      	ldr	r1, [r4, #4]
    70ee:	462a      	mov	r2, r5
    70f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    70f4:	3132      	adds	r1, #50	; 0x32
    70f6:	f006 bb6c 	b.w	d7d2 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    70fa:	6860      	ldr	r0, [r4, #4]
    70fc:	4629      	mov	r1, r5
    70fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7102:	3032      	adds	r0, #50	; 0x32
    7104:	f006 bb54 	b.w	d7b0 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    7108:	bd70      	pop	{r4, r5, r6, pc}
    710a:	0000      	.short	0x0000
    710c:	200000ec 	.word	0x200000ec
    7110:	4602      	mov	r2, r0
    7112:	480b      	ldr	r0, [pc, #44]	; (7140 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x140>)
    7114:	b082      	sub	sp, #8
    7116:	6840      	ldr	r0, [r0, #4]
    7118:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    711c:	f88d 1000 	strb.w	r1, [sp]
    7120:	9900      	ldr	r1, [sp, #0]
    7122:	9100      	str	r1, [sp, #0]
    7124:	f89d 1000 	ldrb.w	r1, [sp]
    7128:	2900      	cmp	r1, #0
    712a:	d107      	bne.n	713c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>
    712c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    712e:	2900      	cmp	r1, #0
    7130:	d004      	beq.n	713c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>
    7132:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    7136:	b002      	add	sp, #8
    7138:	f7fb bb0a 	b.w	2750 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    713c:	b002      	add	sp, #8
    713e:	4770      	bx	lr
    7140:	200000ec 	.word	0x200000ec
    7144:	b510      	push	{r4, lr}
    7146:	4804      	ldr	r0, [pc, #16]	; (7158 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x158>)
    7148:	f004 fd04 	bl	bb54 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    714c:	2800      	cmp	r0, #0
    714e:	d102      	bne.n	7156 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x156>
    7150:	4901      	ldr	r1, [pc, #4]	; (7158 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x158>)
    7152:	207f      	movs	r0, #127	; 0x7f
    7154:	7008      	strb	r0, [r1, #0]
    7156:	bd10      	pop	{r4, pc}
    7158:	200000ec 	.word	0x200000ec
    715c:	4a07      	ldr	r2, [pc, #28]	; (717c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c>)
    715e:	b510      	push	{r4, lr}
    7160:	f992 1000 	ldrsb.w	r1, [r2]
    7164:	297f      	cmp	r1, #127	; 0x7f
    7166:	d003      	beq.n	7170 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x170>
    7168:	7001      	strb	r1, [r0, #0]
    716a:	207f      	movs	r0, #127	; 0x7f
    716c:	7010      	strb	r0, [r2, #0]
    716e:	bd10      	pop	{r4, pc}
    7170:	f240 3172 	movw	r1, #882	; 0x372
    7174:	2032      	movs	r0, #50	; 0x32
    7176:	f7fc fe0f 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    717a:	0000      	.short	0x0000
    717c:	200000ec 	.word	0x200000ec
    7180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7184:	4607      	mov	r7, r0
    7186:	f7fd fa33 	bl	45f0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    718a:	4604      	mov	r4, r0
    718c:	f7fd fa36 	bl	45fc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7190:	4621      	mov	r1, r4
    7192:	f007 f95b 	bl	e44c <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    7196:	0005      	movs	r5, r0
    7198:	d012      	beq.n	71c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c0>
    719a:	4c2d      	ldr	r4, [pc, #180]	; (7250 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x250>)
    719c:	6860      	ldr	r0, [r4, #4]
    719e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    71a2:	2801      	cmp	r0, #1
    71a4:	d004      	beq.n	71b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b0>
    71a6:	2802      	cmp	r0, #2
    71a8:	d002      	beq.n	71b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b0>
    71aa:	f7ff fca3 	bl	6af4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    71ae:	b150      	cbz	r0, 71c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c6>
    71b0:	f06f 0613 	mvn.w	r6, #19
    71b4:	b33f      	cbz	r7, 7206 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x206>
    71b6:	4628      	mov	r0, r5
    71b8:	f006 fee0 	bl	df7c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    71bc:	b950      	cbnz	r0, 71d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>
    71be:	e005      	b.n	71cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cc>
    71c0:	f241 310a 	movw	r1, #4874	; 0x130a
    71c4:	e03a      	b.n	723c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23c>
    71c6:	f241 3110 	movw	r1, #4880	; 0x1310
    71ca:	e037      	b.n	723c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23c>
    71cc:	4628      	mov	r0, r5
    71ce:	f006 fef7 	bl	dfc0 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    71d2:	b1c0      	cbz	r0, 7206 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x206>
    71d4:	6861      	ldr	r1, [r4, #4]
    71d6:	4628      	mov	r0, r5
    71d8:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    71dc:	2a05      	cmp	r2, #5
    71de:	d202      	bcs.n	71e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e6>
    71e0:	f241 2194 	movw	r1, #4756	; 0x1294
    71e4:	e02a      	b.n	723c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23c>
    71e6:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    71ea:	2a0b      	cmp	r2, #11
    71ec:	d302      	bcc.n	71f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f4>
    71ee:	f241 2195 	movw	r1, #4757	; 0x1295
    71f2:	e023      	b.n	723c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23c>
    71f4:	68e2      	ldr	r2, [r4, #12]
    71f6:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    71fa:	6952      	ldr	r2, [r2, #20]
    71fc:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    7200:	5851      	ldr	r1, [r2, r1]
    7202:	4788      	blx	r1
    7204:	e016      	b.n	7234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>
    7206:	6860      	ldr	r0, [r4, #4]
    7208:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    720c:	2905      	cmp	r1, #5
    720e:	d202      	bcs.n	7216 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x216>
    7210:	f44f 5198 	mov.w	r1, #4864	; 0x1300
    7214:	e012      	b.n	723c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23c>
    7216:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    721a:	290b      	cmp	r1, #11
    721c:	d302      	bcc.n	7224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x224>
    721e:	f241 3101 	movw	r1, #4865	; 0x1301
    7222:	e00b      	b.n	723c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23c>
    7224:	68e1      	ldr	r1, [r4, #12]
    7226:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    722a:	6989      	ldr	r1, [r1, #24]
    722c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    7230:	5808      	ldr	r0, [r1, r0]
    7232:	4780      	blx	r0
    7234:	280f      	cmp	r0, #15
    7236:	d304      	bcc.n	7242 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x242>
    7238:	f241 3125 	movw	r1, #4901	; 0x1325
    723c:	2032      	movs	r0, #50	; 0x32
    723e:	f7fc fdab 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7242:	68e1      	ldr	r1, [r4, #12]
    7244:	6909      	ldr	r1, [r1, #16]
    7246:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    724a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    724e:	4700      	bx	r0
    7250:	200000ec 	.word	0x200000ec
    7254:	b510      	push	{r4, lr}
    7256:	b118      	cbz	r0, 7260 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x260>
    7258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    725c:	f000 b924 	b.w	74a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    7260:	2900      	cmp	r1, #0
    7262:	d01d      	beq.n	72a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a0>
    7264:	480f      	ldr	r0, [pc, #60]	; (72a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a4>)
    7266:	6841      	ldr	r1, [r0, #4]
    7268:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    726c:	2a0b      	cmp	r2, #11
    726e:	d202      	bcs.n	7276 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x276>
    7270:	f241 31cc 	movw	r1, #5068	; 0x13cc
    7274:	e005      	b.n	7282 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x282>
    7276:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    727a:	2a0f      	cmp	r2, #15
    727c:	d304      	bcc.n	7288 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x288>
    727e:	f241 31cd 	movw	r1, #5069	; 0x13cd
    7282:	2032      	movs	r0, #50	; 0x32
    7284:	f7fc fd88 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7288:	68c0      	ldr	r0, [r0, #12]
    728a:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    728e:	6880      	ldr	r0, [r0, #8]
    7290:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    7294:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7298:	5840      	ldr	r0, [r0, r1]
    729a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    729e:	4700      	bx	r0
    72a0:	bd10      	pop	{r4, pc}
    72a2:	0000      	.short	0x0000
    72a4:	200000ec 	.word	0x200000ec
    72a8:	b510      	push	{r4, lr}
    72aa:	f7ff fb0d 	bl	68c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    72ae:	f000 f90b 	bl	74c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c8>
    72b2:	4805      	ldr	r0, [pc, #20]	; (72c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c8>)
    72b4:	6881      	ldr	r1, [r0, #8]
    72b6:	2000      	movs	r0, #0
    72b8:	f7ff fc3c 	bl	6b34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a8>
    72bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    72c0:	2003      	movs	r0, #3
    72c2:	f000 bc97 	b.w	7bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    72c6:	0000      	.short	0x0000
    72c8:	200000ec 	.word	0x200000ec
    72cc:	b510      	push	{r4, lr}
    72ce:	f7fd f98f 	bl	45f0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    72d2:	4604      	mov	r4, r0
    72d4:	f7fd f992 	bl	45fc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    72d8:	4621      	mov	r1, r4
    72da:	f007 f8b7 	bl	e44c <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    72de:	b150      	cbz	r0, 72f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f6>
    72e0:	f004 fb8a 	bl	b9f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    72e4:	2000      	movs	r0, #0
    72e6:	f004 fa3f 	bl	b768 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    72ea:	4905      	ldr	r1, [pc, #20]	; (7300 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x300>)
    72ec:	2006      	movs	r0, #6
    72ee:	6849      	ldr	r1, [r1, #4]
    72f0:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    72f4:	bd10      	pop	{r4, pc}
    72f6:	f240 41e7 	movw	r1, #1255	; 0x4e7
    72fa:	2032      	movs	r0, #50	; 0x32
    72fc:	f7fc fd4c 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7300:	200000ec 	.word	0x200000ec
    7304:	490f      	ldr	r1, [pc, #60]	; (7344 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x344>)
    7306:	b510      	push	{r4, lr}
    7308:	6848      	ldr	r0, [r1, #4]
    730a:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    730e:	2a06      	cmp	r2, #6
    7310:	d202      	bcs.n	7318 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x318>
    7312:	f241 31fa 	movw	r1, #5114	; 0x13fa
    7316:	e005      	b.n	7324 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x324>
    7318:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    731c:	2a0b      	cmp	r2, #11
    731e:	d304      	bcc.n	732a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32a>
    7320:	f241 31fb 	movw	r1, #5115	; 0x13fb
    7324:	2032      	movs	r0, #50	; 0x32
    7326:	f7fc fd37 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    732a:	68c9      	ldr	r1, [r1, #12]
    732c:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7330:	68c9      	ldr	r1, [r1, #12]
    7332:	f06f 0213 	mvn.w	r2, #19
    7336:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    733a:	5808      	ldr	r0, [r1, r0]
    733c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7340:	4700      	bx	r0
    7342:	0000      	.short	0x0000
    7344:	200000ec 	.word	0x200000ec
    7348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    734c:	4c31      	ldr	r4, [pc, #196]	; (7414 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x414>)
    734e:	4605      	mov	r5, r0
    7350:	460e      	mov	r6, r1
    7352:	6860      	ldr	r0, [r4, #4]
    7354:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7358:	b120      	cbz	r0, 7364 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x364>
    735a:	2801      	cmp	r0, #1
    735c:	d002      	beq.n	7364 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x364>
    735e:	200c      	movs	r0, #12
    7360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7364:	f004 fab8 	bl	b8d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7368:	f004 f8d0 	bl	b50c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    736c:	f003 feb2 	bl	b0d4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7370:	f004 fd14 	bl	bd9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    7374:	4828      	ldr	r0, [pc, #160]	; (7418 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x418>)
    7376:	f004 f9ef 	bl	b758 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    737a:	4828      	ldr	r0, [pc, #160]	; (741c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x41c>)
    737c:	f004 fc10 	bl	bba0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    7380:	4827      	ldr	r0, [pc, #156]	; (7420 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x420>)
    7382:	f004 fc03 	bl	bb8c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7386:	4630      	mov	r0, r6
    7388:	f004 fb36 	bl	b9f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    738c:	7968      	ldrb	r0, [r5, #5]
    738e:	b110      	cbz	r0, 7396 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x396>
    7390:	2001      	movs	r0, #1
    7392:	f7ff febd 	bl	7110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>
    7396:	7928      	ldrb	r0, [r5, #4]
    7398:	2803      	cmp	r0, #3
    739a:	d001      	beq.n	73a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a0>
    739c:	b118      	cbz	r0, 73a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a6>
    739e:	e018      	b.n	73d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d2>
    73a0:	f640 01f7 	movw	r1, #2295	; 0x8f7
    73a4:	e033      	b.n	740e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40e>
    73a6:	6861      	ldr	r1, [r4, #4]
    73a8:	2000      	movs	r0, #0
    73aa:	2503      	movs	r5, #3
    73ac:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    73b0:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    73b4:	1c52      	adds	r2, r2, #1
    73b6:	fbb2 f7f5 	udiv	r7, r2, r5
    73ba:	fb05 2217 	mls	r2, r5, r7, r2
    73be:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    73c2:	fa23 f202 	lsr.w	r2, r3, r2
    73c6:	07d2      	lsls	r2, r2, #31
    73c8:	d103      	bne.n	73d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d2>
    73ca:	1c40      	adds	r0, r0, #1
    73cc:	b2c0      	uxtb	r0, r0
    73ce:	2803      	cmp	r0, #3
    73d0:	d3ee      	bcc.n	73b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b0>
    73d2:	6860      	ldr	r0, [r4, #4]
    73d4:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
    73d8:	f004 fb08 	bl	b9ec <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    73dc:	4631      	mov	r1, r6
    73de:	2001      	movs	r0, #1
    73e0:	f7ff fa84 	bl	68ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    73e4:	2800      	cmp	r0, #0
    73e6:	d0bb      	beq.n	7360 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x360>
    73e8:	f000 f920 	bl	762c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x62c>
    73ec:	6860      	ldr	r0, [r4, #4]
    73ee:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
    73f2:	b138      	cbz	r0, 7404 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x404>
    73f4:	f7fe f8bc 	bl	5570 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    73f8:	480a      	ldr	r0, [pc, #40]	; (7424 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x424>)
    73fa:	6800      	ldr	r0, [r0, #0]
    73fc:	2803      	cmp	r0, #3
    73fe:	d004      	beq.n	740a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40a>
    7400:	2000      	movs	r0, #0
    7402:	e7ad      	b.n	7360 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x360>
    7404:	f7fe faa8 	bl	5958 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7408:	e7f6      	b.n	73f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f8>
    740a:	f640 1109 	movw	r1, #2313	; 0x909
    740e:	2032      	movs	r0, #50	; 0x32
    7410:	f7fc fcc2 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7414:	200000ec 	.word	0x200000ec
    7418:	00007728 	.word	0x00007728
    741c:	0000f9d1 	.word	0x0000f9d1
    7420:	8e89bed6 	.word	0x8e89bed6
    7424:	40001550 	.word	0x40001550
    7428:	b510      	push	{r4, lr}
    742a:	2000      	movs	r0, #0
    742c:	f7ff fe70 	bl	7110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>
    7430:	4808      	ldr	r0, [pc, #32]	; (7454 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x454>)
    7432:	6840      	ldr	r0, [r0, #4]
    7434:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7438:	b128      	cbz	r0, 7446 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x446>
    743a:	2801      	cmp	r0, #1
    743c:	d003      	beq.n	7446 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x446>
    743e:	2802      	cmp	r0, #2
    7440:	d004      	beq.n	744c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44c>
    7442:	200c      	movs	r0, #12
    7444:	bd10      	pop	{r4, pc}
    7446:	f000 f82f 	bl	74a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    744a:	e001      	b.n	7450 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x450>
    744c:	f000 f844 	bl	74d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d8>
    7450:	2000      	movs	r0, #0
    7452:	bd10      	pop	{r4, pc}
    7454:	200000ec 	.word	0x200000ec
    7458:	b570      	push	{r4, r5, r6, lr}
    745a:	4c12      	ldr	r4, [pc, #72]	; (74a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a4>)
    745c:	6860      	ldr	r0, [r4, #4]
    745e:	f100 0532 	add.w	r5, r0, #50	; 0x32
    7462:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
    7466:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    746a:	b188      	cbz	r0, 7490 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x490>
    746c:	f7ff fb42 	bl	6af4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    7470:	b130      	cbz	r0, 7480 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x480>
    7472:	6860      	ldr	r0, [r4, #4]
    7474:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    7478:	b111      	cbz	r1, 7480 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x480>
    747a:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    747e:	e002      	b.n	7486 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x486>
    7480:	6860      	ldr	r0, [r4, #4]
    7482:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    7486:	f7fe f919 	bl	56bc <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    748a:	b108      	cbz	r0, 7490 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x490>
    748c:	2601      	movs	r6, #1
    748e:	4605      	mov	r5, r0
    7490:	4629      	mov	r1, r5
    7492:	68a0      	ldr	r0, [r4, #8]
    7494:	f006 fdc9 	bl	e02a <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7498:	4631      	mov	r1, r6
    749a:	68a0      	ldr	r0, [r4, #8]
    749c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    74a0:	f006 bdc9 	b.w	e036 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    74a4:	200000ec 	.word	0x200000ec
    74a8:	b510      	push	{r4, lr}
    74aa:	f7ff fa0d 	bl	68c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    74ae:	4905      	ldr	r1, [pc, #20]	; (74c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c4>)
    74b0:	2001      	movs	r0, #1
    74b2:	6849      	ldr	r1, [r1, #4]
    74b4:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    74b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    74bc:	2000      	movs	r0, #0
    74be:	f000 bb99 	b.w	7bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    74c2:	0000      	.short	0x0000
    74c4:	200000ec 	.word	0x200000ec
    74c8:	4902      	ldr	r1, [pc, #8]	; (74d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d4>)
    74ca:	2000      	movs	r0, #0
    74cc:	6849      	ldr	r1, [r1, #4]
    74ce:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    74d2:	4770      	bx	lr
    74d4:	200000ec 	.word	0x200000ec
    74d8:	b570      	push	{r4, r5, r6, lr}
    74da:	f7fd f889 	bl	45f0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    74de:	4604      	mov	r4, r0
    74e0:	f7fd f88c 	bl	45fc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    74e4:	4621      	mov	r1, r4
    74e6:	f006 ffb1 	bl	e44c <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    74ea:	0005      	movs	r5, r0
    74ec:	d020      	beq.n	7530 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x530>
    74ee:	f006 fffd 	bl	e4ec <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    74f2:	2000      	movs	r0, #0
    74f4:	f000 fb4c 	bl	7b90 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    74f8:	b1f8      	cbz	r0, 753a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x53a>
    74fa:	4c1d      	ldr	r4, [pc, #116]	; (7570 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x570>)
    74fc:	6860      	ldr	r0, [r4, #4]
    74fe:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7502:	2802      	cmp	r0, #2
    7504:	d003      	beq.n	750e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50e>
    7506:	4629      	mov	r1, r5
    7508:	2000      	movs	r0, #0
    750a:	f7ff f9ef 	bl	68ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    750e:	1ce8      	adds	r0, r5, #3
    7510:	f006 f9de 	bl	d8d0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7514:	6861      	ldr	r1, [r4, #4]
    7516:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    751a:	b128      	cbz	r0, 7528 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x528>
    751c:	2540      	movs	r5, #64	; 0x40
    751e:	f003 fdf9 	bl	b114 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7522:	4628      	mov	r0, r5
    7524:	f004 f802 	bl	b52c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7528:	f7ff fae4 	bl	6af4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    752c:	b970      	cbnz	r0, 754c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54c>
    752e:	e008      	b.n	7542 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x542>
    7530:	f240 414a 	movw	r1, #1098	; 0x44a
    7534:	2032      	movs	r0, #50	; 0x32
    7536:	f7fc fc2f 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    753a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    753e:	f7ff bfb3 	b.w	74a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    7542:	6860      	ldr	r0, [r4, #4]
    7544:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7548:	2802      	cmp	r0, #2
    754a:	d104      	bne.n	7556 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x556>
    754c:	2100      	movs	r1, #0
    754e:	2201      	movs	r2, #1
    7550:	4608      	mov	r0, r1
    7552:	f004 fadb 	bl	bb0c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7556:	6860      	ldr	r0, [r4, #4]
    7558:	21ff      	movs	r1, #255	; 0xff
    755a:	f800 1f64 	strb.w	r1, [r0, #100]!
    755e:	7041      	strb	r1, [r0, #1]
    7560:	2100      	movs	r1, #0
    7562:	7201      	strb	r1, [r0, #8]
    7564:	71c1      	strb	r1, [r0, #7]
    7566:	7641      	strb	r1, [r0, #25]
    7568:	2105      	movs	r1, #5
    756a:	f800 1c08 	strb.w	r1, [r0, #-8]
    756e:	bd70      	pop	{r4, r5, r6, pc}
    7570:	200000ec 	.word	0x200000ec
    7574:	b570      	push	{r4, r5, r6, lr}
    7576:	f7fd f83b 	bl	45f0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    757a:	4604      	mov	r4, r0
    757c:	f7fd f83e 	bl	45fc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7580:	4621      	mov	r1, r4
    7582:	f006 ff63 	bl	e44c <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    7586:	0005      	movs	r5, r0
    7588:	d028      	beq.n	75dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5dc>
    758a:	4e19      	ldr	r6, [pc, #100]	; (75f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f0>)
    758c:	2004      	movs	r0, #4
    758e:	6874      	ldr	r4, [r6, #4]
    7590:	345c      	adds	r4, #92	; 0x5c
    7592:	f000 fafd 	bl	7b90 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7596:	b330      	cbz	r0, 75e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e6>
    7598:	200c      	movs	r0, #12
    759a:	7020      	strb	r0, [r4, #0]
    759c:	2001      	movs	r0, #1
    759e:	f000 fb29 	bl	7bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    75a2:	7828      	ldrb	r0, [r5, #0]
    75a4:	6871      	ldr	r1, [r6, #4]
    75a6:	f3c0 1040 	ubfx	r0, r0, #5, #1
    75aa:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    75ae:	2005      	movs	r0, #5
    75b0:	f7ff fb3e 	bl	6c30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    75b4:	4a0f      	ldr	r2, [pc, #60]	; (75f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f4>)
    75b6:	68b1      	ldr	r1, [r6, #8]
    75b8:	2520      	movs	r5, #32
    75ba:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    75bc:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
    75c0:	7808      	ldrb	r0, [r1, #0]
    75c2:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    75c6:	f020 0020 	bic.w	r0, r0, #32
    75ca:	4318      	orrs	r0, r3
    75cc:	7008      	strb	r0, [r1, #0]
    75ce:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    75d0:	7ea2      	ldrb	r2, [r4, #26]
    75d2:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    75d6:	4011      	ands	r1, r2
    75d8:	7001      	strb	r1, [r0, #0]
    75da:	bd70      	pop	{r4, r5, r6, pc}
    75dc:	f240 5152 	movw	r1, #1362	; 0x552
    75e0:	2032      	movs	r0, #50	; 0x32
    75e2:	f7fc fbd9 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    75ea:	f7ff bf5d 	b.w	74a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    75ee:	0000      	.short	0x0000
    75f0:	200000ec 	.word	0x200000ec
    75f4:	20000fb4 	.word	0x20000fb4
    75f8:	b510      	push	{r4, lr}
    75fa:	2003      	movs	r0, #3
    75fc:	f000 fac8 	bl	7b90 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7600:	b168      	cbz	r0, 761e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61e>
    7602:	2003      	movs	r0, #3
    7604:	f7ff fb14 	bl	6c30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    7608:	2201      	movs	r2, #1
    760a:	4611      	mov	r1, r2
    760c:	2000      	movs	r0, #0
    760e:	f004 fa7d 	bl	bb0c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7612:	4905      	ldr	r1, [pc, #20]	; (7628 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x628>)
    7614:	200b      	movs	r0, #11
    7616:	6849      	ldr	r1, [r1, #4]
    7618:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    761c:	bd10      	pop	{r4, pc}
    761e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7622:	f7ff bf41 	b.w	74a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    7626:	0000      	.short	0x0000
    7628:	200000ec 	.word	0x200000ec
    762c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7630:	4c1d      	ldr	r4, [pc, #116]	; (76a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6a8>)
    7632:	2600      	movs	r6, #0
    7634:	6860      	ldr	r0, [r4, #4]
    7636:	f880 607d 	strb.w	r6, [r0, #125]	; 0x7d
    763a:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    763e:	b911      	cbnz	r1, 7646 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x646>
    7640:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    7644:	b350      	cbz	r0, 769c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x69c>
    7646:	f004 fe3a 	bl	c2be <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    764a:	4680      	mov	r8, r0
    764c:	6860      	ldr	r0, [r4, #4]
    764e:	4641      	mov	r1, r8
    7650:	6c40      	ldr	r0, [r0, #68]	; 0x44
    7652:	f7fa f805 	bl	1660 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7656:	4f15      	ldr	r7, [pc, #84]	; (76ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ac>)
    7658:	4605      	mov	r5, r0
    765a:	fb90 f0f7 	sdiv	r0, r0, r7
    765e:	fb07 5010 	mls	r0, r7, r0, r5
    7662:	4241      	negs	r1, r0
    7664:	4640      	mov	r0, r8
    7666:	f7f9 ffc9 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    766a:	6861      	ldr	r1, [r4, #4]
    766c:	6448      	str	r0, [r1, #68]	; 0x44
    766e:	fb95 f0f7 	sdiv	r0, r5, r7
    7672:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    7674:	4410      	add	r0, r2
    7676:	6788      	str	r0, [r1, #120]	; 0x78
    7678:	f7fe f8dc 	bl	5834 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    767c:	6861      	ldr	r1, [r4, #4]
    767e:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    7680:	4290      	cmp	r0, r2
    7682:	d80b      	bhi.n	769c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x69c>
    7684:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
    7688:	678e      	str	r6, [r1, #120]	; 0x78
    768a:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    768e:	b110      	cbz	r0, 7696 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x696>
    7690:	2001      	movs	r0, #1
    7692:	f7fd ffb9 	bl	5608 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    7696:	2001      	movs	r0, #1
    7698:	f7ff fd14 	bl	70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    769c:	6861      	ldr	r1, [r4, #4]
    769e:	2002      	movs	r0, #2
    76a0:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    76a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76a8:	200000ec 	.word	0x200000ec
    76ac:	000f4240 	.word	0x000f4240
    76b0:	000074c9 	.word	0x000074c9
    76b4:	000074a9 	.word	0x000074a9
    76b8:	0000e42d 	.word	0x0000e42d
    76bc:	0000e42d 	.word	0x0000e42d
    76c0:	0000e42d 	.word	0x0000e42d
    76c4:	000074d9 	.word	0x000074d9
    76c8:	0000e42d 	.word	0x0000e42d
    76cc:	0000e42d 	.word	0x0000e42d
    76d0:	0000e42d 	.word	0x0000e42d
    76d4:	0000e42d 	.word	0x0000e42d
    76d8:	0000e42d 	.word	0x0000e42d
    76dc:	000075f9 	.word	0x000075f9
    76e0:	00007575 	.word	0x00007575
    76e4:	0000e42d 	.word	0x0000e42d
    76e8:	0000e42d 	.word	0x0000e42d
    76ec:	000072cd 	.word	0x000072cd
    76f0:	000072a9 	.word	0x000072a9
    76f4:	00000000 	.word	0x00000000
    76f8:	0000e437 	.word	0x0000e437
    76fc:	0000e3d3 	.word	0x0000e3d3
    7700:	0000e3e5 	.word	0x0000e3e5
    7704:	0000e3f3 	.word	0x0000e3f3
    7708:	00006aa1 	.word	0x00006aa1
    770c:	00007349 	.word	0x00007349
    7710:	00007429 	.word	0x00007429
    7714:	000076ec 	.word	0x000076ec
    7718:	000076f4 	.word	0x000076f4
    771c:	000076b0 	.word	0x000076b0
    7720:	00007704 	.word	0x00007704
    7724:	000076fc 	.word	0x000076fc
    7728:	00007305 	.word	0x00007305
    772c:	00007181 	.word	0x00007181
    7730:	00007255 	.word	0x00007255
    7734:	0000e449 	.word	0x0000e449

00007738 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    7738:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    773c:	461d      	mov	r5, r3
    773e:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    7742:	4616      	mov	r6, r2
    7744:	4688      	mov	r8, r1
    7746:	4681      	mov	r9, r0
    7748:	f7fc ff58 	bl	45fc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    774c:	4604      	mov	r4, r0
    774e:	f005 fd88 	bl	d262 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    7752:	2801      	cmp	r0, #1
    7754:	d063      	beq.n	781e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    7756:	4620      	mov	r0, r4
    7758:	f006 ff41 	bl	e5de <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    775c:	4604      	mov	r4, r0
    775e:	221c      	movs	r2, #28
    7760:	2100      	movs	r1, #0
    7762:	f004 ff9b 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7766:	2701      	movs	r7, #1
    7768:	7027      	strb	r7, [r4, #0]
    776a:	ea5f 0008 	movs.w	r0, r8
    776e:	d009      	beq.n	7784 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4c>
    7770:	2801      	cmp	r0, #1
    7772:	d00b      	beq.n	778c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x54>
    7774:	2802      	cmp	r0, #2
    7776:	d02d      	beq.n	77d4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9c>
    7778:	f1b8 0f06 	cmp.w	r8, #6
    777c:	d02c      	beq.n	77d8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa0>
    777e:	f240 217b 	movw	r1, #635	; 0x27b
    7782:	e049      	b.n	7818 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe0>
    7784:	7aa0      	ldrb	r0, [r4, #10]
    7786:	f040 0001 	orr.w	r0, r0, #1
    778a:	e026      	b.n	77da <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    778c:	7aa0      	ldrb	r0, [r4, #10]
    778e:	f040 0005 	orr.w	r0, r0, #5
    7792:	bf00      	nop
    7794:	f040 0010 	orr.w	r0, r0, #16
    7798:	72a0      	strb	r0, [r4, #10]
    779a:	1c63      	adds	r3, r4, #1
    779c:	1ca2      	adds	r2, r4, #2
    779e:	4648      	mov	r0, r9
    77a0:	990a      	ldr	r1, [sp, #40]	; 0x28
    77a2:	f006 ff01 	bl	e5a8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    77a6:	f884 a009 	strb.w	sl, [r4, #9]
    77aa:	7327      	strb	r7, [r4, #12]
    77ac:	2000      	movs	r0, #0
    77ae:	7360      	strb	r0, [r4, #13]
    77b0:	20ff      	movs	r0, #255	; 0xff
    77b2:	73a0      	strb	r0, [r4, #14]
    77b4:	7aa1      	ldrb	r1, [r4, #10]
    77b6:	0749      	lsls	r1, r1, #29
    77b8:	d518      	bpl.n	77ec <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb4>
    77ba:	f104 0014 	add.w	r0, r4, #20
    77be:	1e41      	subs	r1, r0, #1
    77c0:	2d02      	cmp	r5, #2
    77c2:	d00d      	beq.n	77e0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    77c4:	2d03      	cmp	r5, #3
    77c6:	d00b      	beq.n	77e0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    77c8:	f8d9 2008 	ldr.w	r2, [r9, #8]
    77cc:	6813      	ldr	r3, [r2, #0]
    77ce:	6003      	str	r3, [r0, #0]
    77d0:	8892      	ldrh	r2, [r2, #4]
    77d2:	e008      	b.n	77e6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xae>
    77d4:	7aa0      	ldrb	r0, [r4, #10]
    77d6:	e7dd      	b.n	7794 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    77d8:	7aa0      	ldrb	r0, [r4, #10]
    77da:	f040 0002 	orr.w	r0, r0, #2
    77de:	e7d9      	b.n	7794 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    77e0:	6832      	ldr	r2, [r6, #0]
    77e2:	6002      	str	r2, [r0, #0]
    77e4:	88b2      	ldrh	r2, [r6, #4]
    77e6:	8082      	strh	r2, [r0, #4]
    77e8:	700d      	strb	r5, [r1, #0]
    77ea:	e000      	b.n	77ee <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    77ec:	74e0      	strb	r0, [r4, #19]
    77ee:	207f      	movs	r0, #127	; 0x7f
    77f0:	76a0      	strb	r0, [r4, #26]
    77f2:	f884 b01b 	strb.w	fp, [r4, #27]
    77f6:	f7fc fefb 	bl	45f0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    77fa:	4604      	mov	r4, r0
    77fc:	f7fc fefe 	bl	45fc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7800:	2201      	movs	r2, #1
    7802:	4621      	mov	r1, r4
    7804:	f006 fef4 	bl	e5f0 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    7808:	b120      	cbz	r0, 7814 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xdc>
    780a:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    780e:	2005      	movs	r0, #5
    7810:	f000 b9f0 	b.w	7bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    7814:	f240 219b 	movw	r1, #667	; 0x29b
    7818:	2033      	movs	r0, #51	; 0x33
    781a:	f7fc fabd 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    781e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
	...

00007824 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    7824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7828:	4616      	mov	r6, r2
    782a:	460c      	mov	r4, r1
    782c:	4605      	mov	r5, r0
    782e:	f006 fbc3 	bl	dfb8 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    7832:	7460      	strb	r0, [r4, #17]
    7834:	4628      	mov	r0, r5
    7836:	f006 fbb6 	bl	dfa6 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    783a:	74a0      	strb	r0, [r4, #18]
    783c:	1cea      	adds	r2, r5, #3
    783e:	4b14      	ldr	r3, [pc, #80]	; (7890 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    7840:	1d90      	adds	r0, r2, #6
    7842:	2100      	movs	r1, #0
    7844:	2e07      	cmp	r6, #7
    7846:	d21f      	bcs.n	7888 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    7848:	e8df f006 	tbb	[pc, r6]
    784c:	1e110b04 	.word	0x1e110b04
    7850:	00041e13 	.word	0x00041e13
    7854:	781b      	ldrb	r3, [r3, #0]
    7856:	e00d      	b.n	7874 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    7858:	60e0      	str	r0, [r4, #12]
    785a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    785e:	60e1      	str	r1, [r4, #12]
    7860:	e7fb      	b.n	785a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    7862:	785b      	ldrb	r3, [r3, #1]
    7864:	7063      	strb	r3, [r4, #1]
    7866:	e9c4 2001 	strd	r2, r0, [r4, #4]
    786a:	7421      	strb	r1, [r4, #16]
    786c:	e7f7      	b.n	785e <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    786e:	789b      	ldrb	r3, [r3, #2]
    7870:	e000      	b.n	7874 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    7872:	78db      	ldrb	r3, [r3, #3]
    7874:	7063      	strb	r3, [r4, #1]
    7876:	e9c4 2101 	strd	r2, r1, [r4, #4]
    787a:	786a      	ldrb	r2, [r5, #1]
    787c:	1f92      	subs	r2, r2, #6
    787e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    7882:	7422      	strb	r2, [r4, #16]
    7884:	d0eb      	beq.n	785e <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    7886:	e7e7      	b.n	7858 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    7888:	7061      	strb	r1, [r4, #1]
    788a:	6061      	str	r1, [r4, #4]
    788c:	60a1      	str	r1, [r4, #8]
    788e:	e7ec      	b.n	786a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    7890:	0000f9d7 	.word	0x0000f9d7

00007894 <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ>:
    7894:	b508      	push	{r3, lr}
    7896:	2244      	movs	r2, #68	; 0x44
    7898:	2100      	movs	r1, #0
    789a:	480c      	ldr	r0, [pc, #48]	; (78cc <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ+0x38>)
    789c:	f004 fefe 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    78a0:	f7fe fdf0 	bl	6484 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    78a4:	2120      	movs	r1, #32
    78a6:	7001      	strb	r1, [r0, #0]
    78a8:	4808      	ldr	r0, [pc, #32]	; (78cc <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ+0x38>)
    78aa:	3810      	subs	r0, #16
    78ac:	2100      	movs	r1, #0
    78ae:	6001      	str	r1, [r0, #0]
    78b0:	6041      	str	r1, [r0, #4]
    78b2:	6081      	str	r1, [r0, #8]
    78b4:	60c1      	str	r1, [r0, #12]
    78b6:	f000 f871 	bl	799c <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>
    78ba:	f242 7010 	movw	r0, #10000	; 0x2710
    78be:	9000      	str	r0, [sp, #0]
    78c0:	2201      	movs	r2, #1
    78c2:	4669      	mov	r1, sp
    78c4:	1080      	asrs	r0, r0, #2
    78c6:	f000 fbb1 	bl	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
    78ca:	bd08      	pop	{r3, pc}
    78cc:	20001048 	.word	0x20001048

000078d0 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ>:
    78d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    78d4:	4c1e      	ldr	r4, [pc, #120]	; (7950 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x80>)
    78d6:	4607      	mov	r7, r0
    78d8:	460e      	mov	r6, r1
    78da:	7820      	ldrb	r0, [r4, #0]
    78dc:	b118      	cbz	r0, 78e6 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x16>
    78de:	200c      	movs	r0, #12
    78e0:	b004      	add	sp, #16
    78e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78e6:	f7fe fdcd 	bl	6484 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    78ea:	4605      	mov	r5, r0
    78ec:	61a7      	str	r7, [r4, #24]
    78ee:	f897 0120 	ldrb.w	r0, [r7, #288]	; 0x120
    78f2:	b110      	cbz	r0, 78fa <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x2a>
    78f4:	f240 4129 	movw	r1, #1065	; 0x429
    78f8:	e026      	b.n	7948 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    78fa:	2005      	movs	r0, #5
    78fc:	7020      	strb	r0, [r4, #0]
    78fe:	2000      	movs	r0, #0
    7900:	7060      	strb	r0, [r4, #1]
    7902:	7720      	strb	r0, [r4, #28]
    7904:	4630      	mov	r0, r6
    7906:	f000 f9f7 	bl	7cf8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x104>
    790a:	f000 fd27 	bl	835c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x35c>
    790e:	6320      	str	r0, [r4, #48]	; 0x30
    7910:	2100      	movs	r1, #0
    7912:	4810      	ldr	r0, [pc, #64]	; (7954 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x84>)
    7914:	f7fa fd5c 	bl	23d0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7918:	7028      	strb	r0, [r5, #0]
    791a:	2820      	cmp	r0, #32
    791c:	d00c      	beq.n	7938 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x68>
    791e:	2200      	movs	r2, #0
    7920:	2101      	movs	r1, #1
    7922:	4668      	mov	r0, sp
    7924:	f000 fdb4 	bl	8490 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x490>
    7928:	b148      	cbz	r0, 793e <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x6e>
    792a:	7828      	ldrb	r0, [r5, #0]
    792c:	4669      	mov	r1, sp
    792e:	f006 feab 	bl	e688 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    7932:	b138      	cbz	r0, 7944 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x74>
    7934:	2000      	movs	r0, #0
    7936:	e7d3      	b.n	78e0 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x10>
    7938:	f44f 6187 	mov.w	r1, #1080	; 0x438
    793c:	e004      	b.n	7948 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    793e:	f240 413b 	movw	r1, #1083	; 0x43b
    7942:	e001      	b.n	7948 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    7944:	f240 413c 	movw	r1, #1084	; 0x43c
    7948:	2035      	movs	r0, #53	; 0x35
    794a:	f7fc fa25 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    794e:	0000      	.short	0x0000
    7950:	20001048 	.word	0x20001048
    7954:	00007d95 	.word	0x00007d95

00007958 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q>:
    7958:	4902      	ldr	r1, [pc, #8]	; (7964 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q+0xc>)
    795a:	6989      	ldr	r1, [r1, #24]
    795c:	6001      	str	r1, [r0, #0]
    795e:	f000 b865 	b.w	7a2c <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
    7962:	0000      	.short	0x0000
    7964:	20001048 	.word	0x20001048

00007968 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>:
    7968:	4901      	ldr	r1, [pc, #4]	; (7970 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA+0x8>)
    796a:	7048      	strb	r0, [r1, #1]
    796c:	4770      	bx	lr
    796e:	0000      	.short	0x0000
    7970:	20001038 	.word	0x20001038

00007974 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>:
    7974:	b570      	push	{r4, r5, r6, lr}
    7976:	4605      	mov	r5, r0
    7978:	4907      	ldr	r1, [pc, #28]	; (7998 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY+0x24>)
    797a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    797e:	fbb1 f4f0 	udiv	r4, r1, r0
    7982:	f006 fed1 	bl	e728 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    7986:	1901      	adds	r1, r0, r4
    7988:	4628      	mov	r0, r5
    798a:	f501 719b 	add.w	r1, r1, #310	; 0x136
    798e:	f006 fc95 	bl	e2bc <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7992:	b280      	uxth	r0, r0
    7994:	bd70      	pop	{r4, r5, r6, pc}
    7996:	0000      	.short	0x0000
    7998:	00012105 	.word	0x00012105

0000799c <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>:
    799c:	4804      	ldr	r0, [pc, #16]	; (79b0 <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ+0x14>)
    799e:	b510      	push	{r4, lr}
    79a0:	7800      	ldrb	r0, [r0, #0]
    79a2:	b108      	cbz	r0, 79a8 <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ+0xc>
    79a4:	f000 f842 	bl	7a2c <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
    79a8:	f000 f972 	bl	7c90 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9c>
    79ac:	2000      	movs	r0, #0
    79ae:	bd10      	pop	{r4, pc}
    79b0:	20001048 	.word	0x20001048

000079b4 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA>:
    79b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    79b6:	4606      	mov	r6, r0
    79b8:	b111      	cbz	r1, 79c0 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0xc>
    79ba:	2011      	movs	r0, #17
    79bc:	b004      	add	sp, #16
    79be:	bd70      	pop	{r4, r5, r6, pc}
    79c0:	4c18      	ldr	r4, [pc, #96]	; (7a24 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x70>)
    79c2:	7820      	ldrb	r0, [r4, #0]
    79c4:	b108      	cbz	r0, 79ca <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x16>
    79c6:	200c      	movs	r0, #12
    79c8:	e7f8      	b.n	79bc <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x8>
    79ca:	f7fe fd5b 	bl	6484 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    79ce:	4605      	mov	r5, r0
    79d0:	2000      	movs	r0, #0
    79d2:	7060      	strb	r0, [r4, #1]
    79d4:	2004      	movs	r0, #4
    79d6:	7020      	strb	r0, [r4, #0]
    79d8:	4630      	mov	r0, r6
    79da:	f000 f98d 	bl	7cf8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x104>
    79de:	f000 fcbd 	bl	835c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x35c>
    79e2:	6320      	str	r0, [r4, #48]	; 0x30
    79e4:	2100      	movs	r1, #0
    79e6:	4810      	ldr	r0, [pc, #64]	; (7a28 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x74>)
    79e8:	f7fa fcf2 	bl	23d0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    79ec:	7028      	strb	r0, [r5, #0]
    79ee:	2820      	cmp	r0, #32
    79f0:	d00c      	beq.n	7a0c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x58>
    79f2:	2200      	movs	r2, #0
    79f4:	2101      	movs	r1, #1
    79f6:	4668      	mov	r0, sp
    79f8:	f000 fd4a 	bl	8490 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x490>
    79fc:	b148      	cbz	r0, 7a12 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x5e>
    79fe:	7828      	ldrb	r0, [r5, #0]
    7a00:	4669      	mov	r1, sp
    7a02:	f006 fe41 	bl	e688 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    7a06:	b138      	cbz	r0, 7a18 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x64>
    7a08:	2000      	movs	r0, #0
    7a0a:	e7d7      	b.n	79bc <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x8>
    7a0c:	f240 419f 	movw	r1, #1183	; 0x49f
    7a10:	e004      	b.n	7a1c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x68>
    7a12:	f240 41a1 	movw	r1, #1185	; 0x4a1
    7a16:	e001      	b.n	7a1c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x68>
    7a18:	f240 41a2 	movw	r1, #1186	; 0x4a2
    7a1c:	2035      	movs	r0, #53	; 0x35
    7a1e:	f7fc f9bb 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a22:	0000      	.short	0x0000
    7a24:	20001048 	.word	0x20001048
    7a28:	00007d95 	.word	0x00007d95

00007a2c <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>:
    7a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a30:	2700      	movs	r7, #0
    7a32:	f7fe fd27 	bl	6484 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7a36:	4c17      	ldr	r4, [pc, #92]	; (7a94 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x68>)
    7a38:	4605      	mov	r5, r0
    7a3a:	7820      	ldrb	r0, [r4, #0]
    7a3c:	2804      	cmp	r0, #4
    7a3e:	d005      	beq.n	7a4c <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x20>
    7a40:	7820      	ldrb	r0, [r4, #0]
    7a42:	2805      	cmp	r0, #5
    7a44:	d002      	beq.n	7a4c <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x20>
    7a46:	200c      	movs	r0, #12
    7a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a4c:	2001      	movs	r0, #1
    7a4e:	7060      	strb	r0, [r4, #1]
    7a50:	7b20      	ldrb	r0, [r4, #12]
    7a52:	b160      	cbz	r0, 7a6e <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x42>
    7a54:	f3ef 8610 	mrs	r6, PRIMASK
    7a58:	b672      	cpsid	i
    7a5a:	7b20      	ldrb	r0, [r4, #12]
    7a5c:	b128      	cbz	r0, 7a6a <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x3e>
    7a5e:	7b60      	ldrb	r0, [r4, #13]
    7a60:	b118      	cbz	r0, 7a6a <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x3e>
    7a62:	f7fe fee1 	bl	6828 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    7a66:	f000 fad1 	bl	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    7a6a:	b126      	cbz	r6, 7a76 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4a>
    7a6c:	e004      	b.n	7a78 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4c>
    7a6e:	7828      	ldrb	r0, [r5, #0]
    7a70:	f7fa fa64 	bl	1f3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    7a74:	e000      	b.n	7a78 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4c>
    7a76:	b662      	cpsie	i
    7a78:	7828      	ldrb	r0, [r5, #0]
    7a7a:	f7fa fb9d 	bl	21b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7a7e:	f000 fe37 	bl	86f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6f0>
    7a82:	2000      	movs	r0, #0
    7a84:	7060      	strb	r0, [r4, #1]
    7a86:	7f20      	ldrb	r0, [r4, #28]
    7a88:	b100      	cbz	r0, 7a8c <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x60>
    7a8a:	270c      	movs	r7, #12
    7a8c:	f000 fe5a 	bl	8744 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x744>
    7a90:	4638      	mov	r0, r7
    7a92:	e7d9      	b.n	7a48 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x1c>
    7a94:	20001048 	.word	0x20001048

00007a98 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>:
    7a98:	4801      	ldr	r0, [pc, #4]	; (7aa0 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ+0x8>)
    7a9a:	7800      	ldrb	r0, [r0, #0]
    7a9c:	4770      	bx	lr
    7a9e:	0000      	.short	0x0000
    7aa0:	20001048 	.word	0x20001048

00007aa4 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>:
    7aa4:	490c      	ldr	r1, [pc, #48]	; (7ad8 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x34>)
    7aa6:	b508      	push	{r3, lr}
    7aa8:	7809      	ldrb	r1, [r1, #0]
    7aaa:	b121      	cbz	r1, 7ab6 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x12>
    7aac:	f44f 618b 	mov.w	r1, #1112	; 0x458
    7ab0:	2035      	movs	r0, #53	; 0x35
    7ab2:	f7fc f971 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ab6:	2300      	movs	r3, #0
    7ab8:	9300      	str	r3, [sp, #0]
    7aba:	7801      	ldrb	r1, [r0, #0]
    7abc:	461a      	mov	r2, r3
    7abe:	07c9      	lsls	r1, r1, #31
    7ac0:	d003      	beq.n	7aca <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x26>
    7ac2:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    7ac6:	2201      	movs	r2, #1
    7ac8:	9000      	str	r0, [sp, #0]
    7aca:	4669      	mov	r1, sp
    7acc:	4618      	mov	r0, r3
    7ace:	f000 faad 	bl	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
    7ad2:	2000      	movs	r0, #0
    7ad4:	bd08      	pop	{r3, pc}
    7ad6:	0000      	.short	0x0000
    7ad8:	20001048 	.word	0x20001048

00007adc <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    7adc:	b570      	push	{r4, r5, r6, lr}
    7ade:	f003 fe9b 	bl	b818 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7ae2:	4c0e      	ldr	r4, [pc, #56]	; (7b1c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
    7ae4:	4606      	mov	r6, r0
    7ae6:	7860      	ldrb	r0, [r4, #1]
    7ae8:	b170      	cbz	r0, 7b08 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    7aea:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    7aee:	4632      	mov	r2, r6
    7af0:	4628      	mov	r0, r5
    7af2:	f005 ff8a 	bl	da0a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7af6:	6060      	str	r0, [r4, #4]
    7af8:	42a8      	cmp	r0, r5
    7afa:	d005      	beq.n	7b08 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    7afc:	68e1      	ldr	r1, [r4, #12]
    7afe:	1b40      	subs	r0, r0, r5
    7b00:	4408      	add	r0, r1
    7b02:	60e0      	str	r0, [r4, #12]
    7b04:	f7fa fd6e 	bl	25e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7b08:	6860      	ldr	r0, [r4, #4]
    7b0a:	42b0      	cmp	r0, r6
    7b0c:	d301      	bcc.n	7b12 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    7b0e:	7820      	ldrb	r0, [r4, #0]
    7b10:	b108      	cbz	r0, 7b16 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3a>
    7b12:	2000      	movs	r0, #0
    7b14:	bd70      	pop	{r4, r5, r6, pc}
    7b16:	2001      	movs	r0, #1
    7b18:	bd70      	pop	{r4, r5, r6, pc}
    7b1a:	0000      	.short	0x0000
    7b1c:	20001038 	.word	0x20001038

00007b20 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    7b20:	b510      	push	{r4, lr}
    7b22:	2905      	cmp	r1, #5
    7b24:	d22d      	bcs.n	7b82 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    7b26:	e8df f001 	tbb	[pc, r1]
    7b2a:	0a05      	.short	0x0a05
    7b2c:	00280e03 	.word	0x00280e03
    7b30:	2100      	movs	r1, #0
    7b32:	e000      	b.n	7b36 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    7b34:	2101      	movs	r1, #1
    7b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b3a:	f000 b9d1 	b.w	7ee0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ec>
    7b3e:	2103      	movs	r1, #3
    7b40:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    7b44:	bd10      	pop	{r4, pc}
    7b46:	4911      	ldr	r1, [pc, #68]	; (7b8c <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x6c>)
    7b48:	4604      	mov	r4, r0
    7b4a:	68c0      	ldr	r0, [r0, #12]
    7b4c:	6008      	str	r0, [r1, #0]
    7b4e:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    7b52:	6220      	str	r0, [r4, #32]
    7b54:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    7b58:	83a0      	strh	r0, [r4, #28]
    7b5a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    7b5e:	60e0      	str	r0, [r4, #12]
    7b60:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    7b64:	82a0      	strh	r0, [r4, #20]
    7b66:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    7b6a:	82e0      	strh	r0, [r4, #22]
    7b6c:	4620      	mov	r0, r4
    7b6e:	f006 fd79 	bl	e664 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    7b72:	2002      	movs	r0, #2
    7b74:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    7b78:	bd10      	pop	{r4, pc}
    7b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b7e:	f006 bd71 	b.w	e664 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    7b82:	f640 3158 	movw	r1, #2904	; 0xb58
    7b86:	2035      	movs	r0, #53	; 0x35
    7b88:	f7fc f906 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b8c:	200000fc 	.word	0x200000fc

00007b90 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    7b90:	b570      	push	{r4, r5, r6, lr}
    7b92:	4605      	mov	r5, r0
    7b94:	f003 fe40 	bl	b818 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7b98:	4604      	mov	r4, r0
    7b9a:	b155      	cbz	r5, 7bb2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x22>
    7b9c:	2d03      	cmp	r5, #3
    7b9e:	d00d      	beq.n	7bbc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x2c>
    7ba0:	2d04      	cmp	r5, #4
    7ba2:	d00e      	beq.n	7bc2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x32>
    7ba4:	2d06      	cmp	r5, #6
    7ba6:	d01e      	beq.n	7be6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x56>
    7ba8:	f240 5194 	movw	r1, #1428	; 0x594
    7bac:	2035      	movs	r0, #53	; 0x35
    7bae:	f7fc f8f3 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bb2:	2001      	movs	r0, #1
    7bb4:	f006 fd3a 	bl	e62c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    7bb8:	3098      	adds	r0, #152	; 0x98
    7bba:	e004      	b.n	7bc6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    7bbc:	f44f 7057 	mov.w	r0, #860	; 0x35c
    7bc0:	e001      	b.n	7bc6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    7bc2:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    7bc6:	4e0a      	ldr	r6, [pc, #40]	; (7bf0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x60>)
    7bc8:	1825      	adds	r5, r4, r0
    7bca:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7bcc:	38f0      	subs	r0, #240	; 0xf0
    7bce:	4285      	cmp	r5, r0
    7bd0:	d307      	bcc.n	7be2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x52>
    7bd2:	2400      	movs	r4, #0
    7bd4:	f000 fc12 	bl	83fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3fc>
    7bd8:	b140      	cbz	r0, 7bec <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    7bda:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7bdc:	38f0      	subs	r0, #240	; 0xf0
    7bde:	4285      	cmp	r5, r0
    7be0:	d203      	bcs.n	7bea <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    7be2:	2401      	movs	r4, #1
    7be4:	e002      	b.n	7bec <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    7be6:	2001      	movs	r0, #1
    7be8:	bd70      	pop	{r4, r5, r6, pc}
    7bea:	2400      	movs	r4, #0
    7bec:	4620      	mov	r0, r4
    7bee:	bd70      	pop	{r4, r5, r6, pc}
    7bf0:	20001048 	.word	0x20001048

00007bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>:
    7bf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7bf6:	2501      	movs	r5, #1
    7bf8:	4c24      	ldr	r4, [pc, #144]	; (7c8c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x98>)
    7bfa:	2806      	cmp	r0, #6
    7bfc:	d243      	bcs.n	7c86 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x92>
    7bfe:	e8df f000 	tbb	[pc, r0]
    7c02:	1903      	.short	0x1903
    7c04:	3e232319 	.word	0x3e232319
    7c08:	f002 fcfa 	bl	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7c0c:	7860      	ldrb	r0, [r4, #1]
    7c0e:	bb88      	cbnz	r0, 7c74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7c10:	2200      	movs	r2, #0
    7c12:	4611      	mov	r1, r2
    7c14:	4668      	mov	r0, sp
    7c16:	f000 fc3b 	bl	8490 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x490>
    7c1a:	b148      	cbz	r0, 7c30 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3c>
    7c1c:	f7fe fc32 	bl	6484 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7c20:	7800      	ldrb	r0, [r0, #0]
    7c22:	4669      	mov	r1, sp
    7c24:	f006 fd30 	bl	e688 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    7c28:	bb20      	cbnz	r0, 7c74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7c2a:	f640 2163 	movw	r1, #2659	; 0xa63
    7c2e:	e01c      	b.n	7c6a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7c30:	70e5      	strb	r5, [r4, #3]
    7c32:	e020      	b.n	7c76 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7c34:	2802      	cmp	r0, #2
    7c36:	d005      	beq.n	7c44 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x50>
    7c38:	2000      	movs	r0, #0
    7c3a:	b004      	add	sp, #16
    7c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c40:	f000 b96a 	b.w	7f18 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x324>
    7c44:	2001      	movs	r0, #1
    7c46:	e7f8      	b.n	7c3a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x46>
    7c48:	2804      	cmp	r0, #4
    7c4a:	d011      	beq.n	7c70 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7c>
    7c4c:	f05f 0600 	movs.w	r6, #0
    7c50:	f002 fcd6 	bl	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7c54:	7725      	strb	r5, [r4, #28]
    7c56:	7766      	strb	r6, [r4, #29]
    7c58:	69a1      	ldr	r1, [r4, #24]
    7c5a:	2000      	movs	r0, #0
    7c5c:	f881 0120 	strb.w	r0, [r1, #288]	; 0x120
    7c60:	f000 f85a 	bl	7d18 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x124>
    7c64:	b130      	cbz	r0, 7c74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7c66:	f640 3118 	movw	r1, #2840	; 0xb18
    7c6a:	2035      	movs	r0, #53	; 0x35
    7c6c:	f7fc f894 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c70:	2601      	movs	r6, #1
    7c72:	e7ed      	b.n	7c50 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c>
    7c74:	e7ff      	b.n	7c76 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7c76:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7c7a:	f000 b9c7 	b.w	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    7c7e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7c82:	f002 bcbd 	b.w	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7c86:	f640 31b2 	movw	r1, #2994	; 0xbb2
    7c8a:	e7ee      	b.n	7c6a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7c8c:	20001048 	.word	0x20001048
    7c90:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7c92:	4c18      	ldr	r4, [pc, #96]	; (7cf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x100>)
    7c94:	2001      	movs	r0, #1
    7c96:	7020      	strb	r0, [r4, #0]
    7c98:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7c9c:	e00b      	b.n	7cb6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xc2>
    7c9e:	2100      	movs	r1, #0
    7ca0:	f005 fd1f 	bl	d6e2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7ca4:	0006      	movs	r6, r0
    7ca6:	d010      	beq.n	7cca <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xd6>
    7ca8:	f896 0121 	ldrb.w	r0, [r6, #289]	; 0x121
    7cac:	f7fa fa84 	bl	21b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7cb0:	4630      	mov	r0, r6
    7cb2:	f006 fd01 	bl	e6b8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x9c>
    7cb6:	4669      	mov	r1, sp
    7cb8:	2000      	movs	r0, #0
    7cba:	f005 fd1b 	bl	d6f4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7cbe:	b180      	cbz	r0, 7ce2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    7cc0:	f240 2145 	movw	r1, #581	; 0x245
    7cc4:	2035      	movs	r0, #53	; 0x35
    7cc6:	f7fc f867 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cca:	f240 514a 	movw	r1, #1354	; 0x54a
    7cce:	e7f9      	b.n	7cc4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xd0>
    7cd0:	9802      	ldr	r0, [sp, #8]
    7cd2:	b130      	cbz	r0, 7ce2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    7cd4:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    7cd8:	b119      	cbz	r1, 7ce2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    7cda:	8800      	ldrh	r0, [r0, #0]
    7cdc:	42a8      	cmp	r0, r5
    7cde:	d1de      	bne.n	7c9e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaa>
    7ce0:	e004      	b.n	7cec <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xf8>
    7ce2:	4668      	mov	r0, sp
    7ce4:	f7fc fa88 	bl	41f8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7ce8:	2800      	cmp	r0, #0
    7cea:	d0f1      	beq.n	7cd0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xdc>
    7cec:	2000      	movs	r0, #0
    7cee:	7020      	strb	r0, [r4, #0]
    7cf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7cf2:	0000      	.short	0x0000
    7cf4:	20001038 	.word	0x20001038
    7cf8:	4906      	ldr	r1, [pc, #24]	; (7d14 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x120>)
    7cfa:	b140      	cbz	r0, 7d0e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x11a>
    7cfc:	2201      	movs	r2, #1
    7cfe:	708a      	strb	r2, [r1, #2]
    7d00:	f242 7210 	movw	r2, #10000	; 0x2710
    7d04:	4350      	muls	r0, r2
    7d06:	684a      	ldr	r2, [r1, #4]
    7d08:	4410      	add	r0, r2
    7d0a:	6208      	str	r0, [r1, #32]
    7d0c:	4770      	bx	lr
    7d0e:	2000      	movs	r0, #0
    7d10:	7088      	strb	r0, [r1, #2]
    7d12:	4770      	bx	lr
    7d14:	20001048 	.word	0x20001048
    7d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7d1a:	4c1c      	ldr	r4, [pc, #112]	; (7d8c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x198>)
    7d1c:	7820      	ldrb	r0, [r4, #0]
    7d1e:	2805      	cmp	r0, #5
    7d20:	d002      	beq.n	7d28 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x134>
    7d22:	200c      	movs	r0, #12
    7d24:	b004      	add	sp, #16
    7d26:	bd10      	pop	{r4, pc}
    7d28:	69a1      	ldr	r1, [r4, #24]
    7d2a:	b129      	cbz	r1, 7d38 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x144>
    7d2c:	f891 0120 	ldrb.w	r0, [r1, #288]	; 0x120
    7d30:	b128      	cbz	r0, 7d3e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x14a>
    7d32:	f240 5103 	movw	r1, #1283	; 0x503
    7d36:	e025      	b.n	7d84 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    7d38:	f240 5102 	movw	r1, #1282	; 0x502
    7d3c:	e022      	b.n	7d84 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    7d3e:	f891 0121 	ldrb.w	r0, [r1, #289]	; 0x121
    7d42:	2820      	cmp	r0, #32
    7d44:	d002      	beq.n	7d4c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x158>
    7d46:	f240 5105 	movw	r1, #1285	; 0x505
    7d4a:	e01b      	b.n	7d84 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    7d4c:	4810      	ldr	r0, [pc, #64]	; (7d90 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x19c>)
    7d4e:	f7fa fb3f 	bl	23d0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7d52:	69a1      	ldr	r1, [r4, #24]
    7d54:	2820      	cmp	r0, #32
    7d56:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    7d5a:	d00e      	beq.n	7d7a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x186>
    7d5c:	2300      	movs	r3, #0
    7d5e:	2201      	movs	r2, #1
    7d60:	4668      	mov	r0, sp
    7d62:	f000 fa09 	bl	8178 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x178>
    7d66:	69a0      	ldr	r0, [r4, #24]
    7d68:	4669      	mov	r1, sp
    7d6a:	f890 0121 	ldrb.w	r0, [r0, #289]	; 0x121
    7d6e:	f006 fc8b 	bl	e688 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    7d72:	b128      	cbz	r0, 7d80 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x18c>
    7d74:	2000      	movs	r0, #0
    7d76:	61a0      	str	r0, [r4, #24]
    7d78:	e7d4      	b.n	7d24 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x130>
    7d7a:	f240 5109 	movw	r1, #1289	; 0x509
    7d7e:	e001      	b.n	7d84 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    7d80:	f240 510c 	movw	r1, #1292	; 0x50c
    7d84:	2035      	movs	r0, #53	; 0x35
    7d86:	f7fc f807 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d8a:	0000      	.short	0x0000
    7d8c:	20001048 	.word	0x20001048
    7d90:	00008081 	.word	0x00008081
    7d94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7d96:	460d      	mov	r5, r1
    7d98:	2001      	movs	r0, #1
    7d9a:	f006 fc30 	bl	e5fe <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7d9e:	b2c4      	uxtb	r4, r0
    7da0:	200b      	movs	r0, #11
    7da2:	f006 fc2c 	bl	e5fe <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7da6:	b2c0      	uxtb	r0, r0
    7da8:	4284      	cmp	r4, r0
    7daa:	d002      	beq.n	7db2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1be>
    7dac:	f240 21ce 	movw	r1, #718	; 0x2ce
    7db0:	e073      	b.n	7e9a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    7db2:	f7fe fb67 	bl	6484 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7db6:	2601      	movs	r6, #1
    7db8:	4c3b      	ldr	r4, [pc, #236]	; (7ea8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b4>)
    7dba:	2d09      	cmp	r5, #9
    7dbc:	d270      	bcs.n	7ea0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ac>
    7dbe:	e8df f005 	tbb	[pc, r5]
    7dc2:	3605      	.short	0x3605
    7dc4:	6f464a4a 	.word	0x6f464a4a
    7dc8:	006a665e 	.word	0x006a665e
    7dcc:	7326      	strb	r6, [r4, #12]
    7dce:	7861      	ldrb	r1, [r4, #1]
    7dd0:	2900      	cmp	r1, #0
    7dd2:	d12b      	bne.n	7e2c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    7dd4:	7800      	ldrb	r0, [r0, #0]
    7dd6:	f7f9 fc67 	bl	16a8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    7dda:	4605      	mov	r5, r0
    7ddc:	6120      	str	r0, [r4, #16]
    7dde:	f000 fccb 	bl	8778 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x778>
    7de2:	b118      	cbz	r0, 7dec <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1f8>
    7de4:	2000      	movs	r0, #0
    7de6:	f88d 0004 	strb.w	r0, [sp, #4]
    7dea:	e001      	b.n	7df0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1fc>
    7dec:	f88d 6004 	strb.w	r6, [sp, #4]
    7df0:	4629      	mov	r1, r5
    7df2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7df4:	f7f9 fc34 	bl	1660 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7df8:	6861      	ldr	r1, [r4, #4]
    7dfa:	fbb0 f2f1 	udiv	r2, r0, r1
    7dfe:	fb01 0012 	mls	r0, r1, r2, r0
    7e02:	b150      	cbz	r0, 7e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x226>
    7e04:	f05f 0000 	movs.w	r0, #0
    7e08:	f88d 0005 	strb.w	r0, [sp, #5]
    7e0c:	4668      	mov	r0, sp
    7e0e:	f7fe fc73 	bl	66f8 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    7e12:	b120      	cbz	r0, 7e1e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x22a>
    7e14:	f44f 7142 	mov.w	r1, #776	; 0x308
    7e18:	e03f      	b.n	7e9a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    7e1a:	2001      	movs	r0, #1
    7e1c:	e7f4      	b.n	7e08 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x214>
    7e1e:	4922      	ldr	r1, [pc, #136]	; (7ea8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b4>)
    7e20:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7e22:	3910      	subs	r1, #16
    7e24:	38df      	subs	r0, #223	; 0xdf
    7e26:	60c8      	str	r0, [r1, #12]
    7e28:	f7fa fbdc 	bl	25e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7e2c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7e2e:	7860      	ldrb	r0, [r4, #1]
    7e30:	b128      	cbz	r0, 7e3e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x24a>
    7e32:	f7fe fcf9 	bl	6828 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    7e36:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7e3a:	f000 b8e7 	b.w	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    7e3e:	7366      	strb	r6, [r4, #13]
    7e40:	f7fe fcec 	bl	681c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    7e44:	2800      	cmp	r0, #0
    7e46:	d0f1      	beq.n	7e2c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    7e48:	f240 311b 	movw	r1, #795	; 0x31b
    7e4c:	e025      	b.n	7e9a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    7e4e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7e52:	f003 bec5 	b.w	bbe0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    7e56:	7805      	ldrb	r5, [r0, #0]
    7e58:	2201      	movs	r2, #1
    7e5a:	2100      	movs	r1, #0
    7e5c:	4668      	mov	r0, sp
    7e5e:	f000 fb17 	bl	8490 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x490>
    7e62:	b140      	cbz	r0, 7e76 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x282>
    7e64:	4669      	mov	r1, sp
    7e66:	4628      	mov	r0, r5
    7e68:	f006 fc0e 	bl	e688 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    7e6c:	2800      	cmp	r0, #0
    7e6e:	d1dd      	bne.n	7e2c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    7e70:	f640 217f 	movw	r1, #2687	; 0xa7f
    7e74:	e011      	b.n	7e9a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    7e76:	70e6      	strb	r6, [r4, #3]
    7e78:	f000 f818 	bl	7eac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b8>
    7e7c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7e7e:	f000 fabd 	bl	83fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3fc>
    7e82:	2800      	cmp	r0, #0
    7e84:	d1fa      	bne.n	7e7c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x288>
    7e86:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7e8a:	f006 baa0 	b.w	e3ce <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    7e8e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7e92:	f000 b80b 	b.w	7eac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b8>
    7e96:	f240 313f 	movw	r1, #831	; 0x33f
    7e9a:	2035      	movs	r0, #53	; 0x35
    7e9c:	f7fb ff7c 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ea0:	f240 3143 	movw	r1, #835	; 0x343
    7ea4:	e7f9      	b.n	7e9a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    7ea6:	0000      	.short	0x0000
    7ea8:	20001048 	.word	0x20001048
    7eac:	b510      	push	{r4, lr}
    7eae:	4c0b      	ldr	r4, [pc, #44]	; (7edc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e8>)
    7eb0:	7820      	ldrb	r0, [r4, #0]
    7eb2:	b130      	cbz	r0, 7ec2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ce>
    7eb4:	f000 fc1c 	bl	86f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6f0>
    7eb8:	78e0      	ldrb	r0, [r4, #3]
    7eba:	b158      	cbz	r0, 7ed4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e0>
    7ebc:	7f20      	ldrb	r0, [r4, #28]
    7ebe:	b128      	cbz	r0, 7ecc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2d8>
    7ec0:	e008      	b.n	7ed4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e0>
    7ec2:	f240 21ba 	movw	r1, #698	; 0x2ba
    7ec6:	2035      	movs	r0, #53	; 0x35
    7ec8:	f7fb ff66 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ecc:	f7fe fcbe 	bl	684c <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    7ed0:	f002 fb96 	bl	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ed8:	f000 bc34 	b.w	8744 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x744>
    7edc:	20001048 	.word	0x20001048
    7ee0:	b510      	push	{r4, lr}
    7ee2:	4604      	mov	r4, r0
    7ee4:	2901      	cmp	r1, #1
    7ee6:	d102      	bne.n	7eee <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2fa>
    7ee8:	480a      	ldr	r0, [pc, #40]	; (7f14 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x320>)
    7eea:	7800      	ldrb	r0, [r0, #0]
    7eec:	b140      	cbz	r0, 7f00 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x30c>
    7eee:	2004      	movs	r0, #4
    7ef0:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    7ef4:	f003 fcc4 	bl	b880 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    7ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7efc:	f7fa ba90 	b.w	2420 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    7f00:	2200      	movs	r2, #0
    7f02:	2101      	movs	r1, #1
    7f04:	4620      	mov	r0, r4
    7f06:	f006 fbef 	bl	e6e8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xcc>
    7f0a:	f834 0f7c 	ldrh.w	r0, [r4, #124]!
    7f0e:	1c40      	adds	r0, r0, #1
    7f10:	8020      	strh	r0, [r4, #0]
    7f12:	e7ef      	b.n	7ef4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x300>
    7f14:	20001038 	.word	0x20001038
    7f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f1c:	4c39      	ldr	r4, [pc, #228]	; (8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>)
    7f1e:	4682      	mov	sl, r0
    7f20:	6926      	ldr	r6, [r4, #16]
    7f22:	f003 fc79 	bl	b818 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7f26:	4605      	mov	r5, r0
    7f28:	69a0      	ldr	r0, [r4, #24]
    7f2a:	2201      	movs	r2, #1
    7f2c:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    7f30:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
    7f34:	3062      	adds	r0, #98	; 0x62
    7f36:	2101      	movs	r1, #1
    7f38:	7281      	strb	r1, [r0, #10]
    7f3a:	69a0      	ldr	r0, [r4, #24]
    7f3c:	2100      	movs	r1, #0
    7f3e:	302c      	adds	r0, #44	; 0x2c
    7f40:	f006 f9a3 	bl	e28a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7f44:	2101      	movs	r1, #1
    7f46:	2000      	movs	r0, #0
    7f48:	f006 fbfa 	bl	e740 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x124>
    7f4c:	69a7      	ldr	r7, [r4, #24]
    7f4e:	1971      	adds	r1, r6, r5
    7f50:	4408      	add	r0, r1
    7f52:	f200 49af 	addw	r9, r0, #1199	; 0x4af
    7f56:	f8d7 800c 	ldr.w	r8, [r7, #12]
    7f5a:	f002 fb29 	bl	a5b0 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    7f5e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    7f62:	4288      	cmp	r0, r1
    7f64:	d00a      	beq.n	7f7c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x388>
    7f66:	464a      	mov	r2, r9
    7f68:	4641      	mov	r1, r8
    7f6a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    7f6e:	f006 fd15 	bl	e99c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    7f72:	4540      	cmp	r0, r8
    7f74:	d903      	bls.n	7f7e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x38a>
    7f76:	f44f 61bf 	mov.w	r1, #1528	; 0x5f8
    7f7a:	e022      	b.n	7fc2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3ce>
    7f7c:	2000      	movs	r0, #0
    7f7e:	4922      	ldr	r1, [pc, #136]	; (8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>)
    7f80:	4607      	mov	r7, r0
    7f82:	6849      	ldr	r1, [r1, #4]
    7f84:	4288      	cmp	r0, r1
    7f86:	69a0      	ldr	r0, [r4, #24]
    7f88:	68c1      	ldr	r1, [r0, #12]
    7f8a:	d202      	bcs.n	7f92 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x39e>
    7f8c:	440f      	add	r7, r1
    7f8e:	6201      	str	r1, [r0, #32]
    7f90:	e008      	b.n	7fa4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3b0>
    7f92:	4638      	mov	r0, r7
    7f94:	f005 fec4 	bl	dd20 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    7f98:	69a1      	ldr	r1, [r4, #24]
    7f9a:	68c9      	ldr	r1, [r1, #12]
    7f9c:	f005 febc 	bl	dd18 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7fa0:	69a1      	ldr	r1, [r4, #24]
    7fa2:	6208      	str	r0, [r1, #32]
    7fa4:	69a0      	ldr	r0, [r4, #24]
    7fa6:	68c1      	ldr	r1, [r0, #12]
    7fa8:	2005      	movs	r0, #5
    7faa:	f005 febf 	bl	dd2c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7fae:	69a1      	ldr	r1, [r4, #24]
    7fb0:	b280      	uxth	r0, r0
    7fb2:	8388      	strh	r0, [r1, #28]
    7fb4:	69a1      	ldr	r1, [r4, #24]
    7fb6:	6a09      	ldr	r1, [r1, #32]
    7fb8:	1a79      	subs	r1, r7, r1
    7fba:	4288      	cmp	r0, r1
    7fbc:	d804      	bhi.n	7fc8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3d4>
    7fbe:	f640 21ee 	movw	r1, #2798	; 0xaee
    7fc2:	2035      	movs	r0, #53	; 0x35
    7fc4:	f7fb fee8 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fc8:	2101      	movs	r1, #1
    7fca:	4650      	mov	r0, sl
    7fcc:	f006 fbb8 	bl	e740 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x124>
    7fd0:	4428      	add	r0, r5
    7fd2:	19c5      	adds	r5, r0, r7
    7fd4:	2101      	movs	r1, #1
    7fd6:	4650      	mov	r0, sl
    7fd8:	f005 fdd4 	bl	db84 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7fdc:	4405      	add	r5, r0
    7fde:	2001      	movs	r0, #1
    7fe0:	f007 fc4a 	bl	f878 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7fe4:	f64a 2113 	movw	r1, #43539	; 0xaa13
    7fe8:	4408      	add	r0, r1
    7fea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7fee:	fbb0 f0f1 	udiv	r0, r0, r1
    7ff2:	1a29      	subs	r1, r5, r0
    7ff4:	4630      	mov	r0, r6
    7ff6:	f7f9 fb01 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7ffa:	69a1      	ldr	r1, [r4, #24]
    7ffc:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    8000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8004:	20001048 	.word	0x20001048
    8008:	200000fc 	.word	0x200000fc
    800c:	b510      	push	{r4, lr}
    800e:	4c06      	ldr	r4, [pc, #24]	; (8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>)
    8010:	7b20      	ldrb	r0, [r4, #12]
    8012:	2800      	cmp	r0, #0
    8014:	d006      	beq.n	8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>
    8016:	f003 fc33 	bl	b880 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    801a:	f7fa fa01 	bl	2420 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    801e:	2000      	movs	r0, #0
    8020:	7320      	strb	r0, [r4, #12]
    8022:	7360      	strb	r0, [r4, #13]
    8024:	bd10      	pop	{r4, pc}
    8026:	0000      	.short	0x0000
    8028:	20001048 	.word	0x20001048
    802c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8030:	4d11      	ldr	r5, [pc, #68]	; (8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>)
    8032:	4616      	mov	r6, r2
    8034:	460f      	mov	r7, r1
    8036:	2400      	movs	r4, #0
    8038:	6068      	str	r0, [r5, #4]
    803a:	f006 fb75 	bl	e728 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    803e:	f8df c03c 	ldr.w	ip, [pc, #60]	; 807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>
    8042:	2100      	movs	r1, #0
    8044:	f81c 2001 	ldrb.w	r2, [ip, r1]
    8048:	4232      	tst	r2, r6
    804a:	d007      	beq.n	805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>
    804c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    8050:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    8054:	1a1b      	subs	r3, r3, r0
    8056:	1c64      	adds	r4, r4, #1
    8058:	b2e4      	uxtb	r4, r4
    805a:	6093      	str	r3, [r2, #8]
    805c:	1c49      	adds	r1, r1, #1
    805e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    8062:	d0ef      	beq.n	8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>
    8064:	f016 0f0e 	tst.w	r6, #14
    8068:	d004      	beq.n	8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>
    806a:	f640 11b8 	movw	r1, #2488	; 0x9b8
    806e:	2035      	movs	r0, #53	; 0x35
    8070:	f7fb fe92 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8078:	20001048 	.word	0x20001048
    807c:	0000f9db 	.word	0x0000f9db
    8080:	b570      	push	{r4, r5, r6, lr}
    8082:	460d      	mov	r5, r1
    8084:	0004      	movs	r4, r0
    8086:	d00c      	beq.n	80a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2>
    8088:	2001      	movs	r0, #1
    808a:	f006 fab8 	bl	e5fe <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    808e:	b2c6      	uxtb	r6, r0
    8090:	200b      	movs	r0, #11
    8092:	f006 fab4 	bl	e5fe <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8096:	b2c0      	uxtb	r0, r0
    8098:	4286      	cmp	r6, r0
    809a:	d005      	beq.n	80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>
    809c:	f44f 711a 	mov.w	r1, #616	; 0x268
    80a0:	e061      	b.n	8166 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166>
    80a2:	f240 2165 	movw	r1, #613	; 0x265
    80a6:	e05e      	b.n	8166 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166>
    80a8:	2d09      	cmp	r5, #9
    80aa:	d25f      	bcs.n	816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>
    80ac:	e8df f005 	tbb	[pc, r5]
    80b0:	3d3d3505 	.word	0x3d3d3505
    80b4:	4b445e39 	.word	0x4b445e39
    80b8:	0059      	.short	0x0059
    80ba:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    80be:	b348      	cbz	r0, 8114 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x114>
    80c0:	4620      	mov	r0, r4
    80c2:	f000 fd69 	bl	8b98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    80c6:	f006 fb2f 	bl	e728 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    80ca:	f200 1037 	addw	r0, r0, #311	; 0x137
    80ce:	b285      	uxth	r5, r0
    80d0:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    80d4:	2128      	movs	r1, #40	; 0x28
    80d6:	f006 fac3 	bl	e660 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x44>
    80da:	182e      	adds	r6, r5, r0
    80dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    80de:	68e0      	ldr	r0, [r4, #12]
    80e0:	4288      	cmp	r0, r1
    80e2:	d200      	bcs.n	80e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe6>
    80e4:	4601      	mov	r1, r0
    80e6:	4632      	mov	r2, r6
    80e8:	4620      	mov	r0, r4
    80ea:	f006 f857 	bl	e19c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    80ee:	4d21      	ldr	r5, [pc, #132]	; (8174 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x174>)
    80f0:	4632      	mov	r2, r6
    80f2:	6068      	str	r0, [r5, #4]
    80f4:	4620      	mov	r0, r4
    80f6:	68e1      	ldr	r1, [r4, #12]
    80f8:	f006 f850 	bl	e19c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    80fc:	60a8      	str	r0, [r5, #8]
    80fe:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8102:	f006 f8ac 	bl	e25e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8106:	f5a0 7093 	sub.w	r0, r0, #294	; 0x126
    810a:	60e8      	str	r0, [r5, #12]
    810c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8110:	f7fa ba68 	b.w	25e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8114:	f240 216e 	movw	r1, #622	; 0x26e
    8118:	e025      	b.n	8166 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166>
    811a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    811e:	f006 bb95 	b.w	e84c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    8122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8126:	f003 bd5b 	b.w	bbe0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    812a:	4620      	mov	r0, r4
    812c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8130:	2201      	movs	r2, #1
    8132:	2100      	movs	r1, #0
    8134:	f006 bad8 	b.w	e6e8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xcc>
    8138:	2001      	movs	r0, #1
    813a:	f7f9 f933 	bl	13a4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    813e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8142:	f005 bba9 	b.w	d898 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    8146:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    814a:	2804      	cmp	r0, #4
    814c:	d002      	beq.n	8154 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154>
    814e:	f240 21a2 	movw	r1, #674	; 0x2a2
    8152:	e008      	b.n	8166 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166>
    8154:	4620      	mov	r0, r4
    8156:	f006 faaf 	bl	e6b8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x9c>
    815a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    815e:	f002 ba4f 	b.w	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8162:	f240 21ad 	movw	r1, #685	; 0x2ad
    8166:	2035      	movs	r0, #53	; 0x35
    8168:	f7fb fe16 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    816c:	f240 21b1 	movw	r1, #689	; 0x2b1
    8170:	e7f9      	b.n	8166 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166>
    8172:	0000      	.short	0x0000
    8174:	20001038 	.word	0x20001038
    8178:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    817c:	4605      	mov	r5, r0
    817e:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    8182:	2600      	movs	r6, #0
    8184:	f8d1 b020 	ldr.w	fp, [r1, #32]
    8188:	469a      	mov	sl, r3
    818a:	460c      	mov	r4, r1
    818c:	280d      	cmp	r0, #13
    818e:	d020      	beq.n	81d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d2>
    8190:	280c      	cmp	r0, #12
    8192:	d01e      	beq.n	81d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d2>
    8194:	2824      	cmp	r0, #36	; 0x24
    8196:	d01c      	beq.n	81d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d2>
    8198:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    819c:	2824      	cmp	r0, #36	; 0x24
    819e:	d018      	beq.n	81d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d2>
    81a0:	2000      	movs	r0, #0
    81a2:	4680      	mov	r8, r0
    81a4:	f006 fab5 	bl	e712 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    81a8:	4681      	mov	r9, r0
    81aa:	f1ba 0f00 	cmp.w	sl, #0
    81ae:	d003      	beq.n	81b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b8>
    81b0:	2101      	movs	r1, #1
    81b2:	4620      	mov	r0, r4
    81b4:	f006 faf1 	bl	e79a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    81b8:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    81bc:	2701      	movs	r7, #1
    81be:	b150      	cbz	r0, 81d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d6>
    81c0:	2801      	cmp	r0, #1
    81c2:	d01b      	beq.n	81fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1fc>
    81c4:	2802      	cmp	r0, #2
    81c6:	d011      	beq.n	81ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ec>
    81c8:	2803      	cmp	r0, #3
    81ca:	d017      	beq.n	81fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1fc>
    81cc:	f640 113b 	movw	r1, #2363	; 0x93b
    81d0:	e07b      	b.n	82ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ca>
    81d2:	2001      	movs	r0, #1
    81d4:	e7e5      	b.n	81a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2>
    81d6:	9802      	ldr	r0, [sp, #8]
    81d8:	b128      	cbz	r0, 81e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e6>
    81da:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
    81de:	4620      	mov	r0, r4
    81e0:	f006 fa40 	bl	e664 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    81e4:	e00b      	b.n	81fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1fe>
    81e6:	f640 1101 	movw	r1, #2305	; 0x901
    81ea:	e06e      	b.n	82ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ca>
    81ec:	4838      	ldr	r0, [pc, #224]	; (82d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d0>)
    81ee:	6801      	ldr	r1, [r0, #0]
    81f0:	2003      	movs	r0, #3
    81f2:	eb01 060b 	add.w	r6, r1, fp
    81f6:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    81fa:	e000      	b.n	81fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1fe>
    81fc:	68e6      	ldr	r6, [r4, #12]
    81fe:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    8202:	4631      	mov	r1, r6
    8204:	f7f9 f9fa 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8208:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    820c:	60e8      	str	r0, [r5, #12]
    820e:	2000      	movs	r0, #0
    8210:	7028      	strb	r0, [r5, #0]
    8212:	f8a5 9008 	strh.w	r9, [r5, #8]
    8216:	4620      	mov	r0, r4
    8218:	f000 fc0c 	bl	8a34 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    821c:	f1a8 0101 	sub.w	r1, r8, #1
    8220:	4208      	tst	r0, r1
    8222:	d101      	bne.n	8228 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x228>
    8224:	72af      	strb	r7, [r5, #10]
    8226:	e005      	b.n	8234 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x234>
    8228:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    822c:	2801      	cmp	r0, #1
    822e:	d017      	beq.n	8260 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x260>
    8230:	2003      	movs	r0, #3
    8232:	72a8      	strb	r0, [r5, #10]
    8234:	46b9      	mov	r9, r7
    8236:	72ef      	strb	r7, [r5, #11]
    8238:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    823c:	f006 f80f 	bl	e25e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8240:	6068      	str	r0, [r5, #4]
    8242:	f1ba 0f00 	cmp.w	sl, #0
    8246:	d03c      	beq.n	82c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c2>
    8248:	4631      	mov	r1, r6
    824a:	4628      	mov	r0, r5
    824c:	f005 fcf9 	bl	dc42 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8250:	b287      	uxth	r7, r0
    8252:	4620      	mov	r0, r4
    8254:	f000 fbee 	bl	8a34 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    8258:	f1b8 0f00 	cmp.w	r8, #0
    825c:	d002      	beq.n	8264 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x264>
    825e:	e014      	b.n	828a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28a>
    8260:	2002      	movs	r0, #2
    8262:	e7e6      	b.n	8232 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x232>
    8264:	42b8      	cmp	r0, r7
    8266:	d810      	bhi.n	828a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28a>
    8268:	4607      	mov	r7, r0
    826a:	f885 900a 	strb.w	r9, [r5, #10]
    826e:	fb06 f107 	mul.w	r1, r6, r7
    8272:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    8276:	f7f9 f9c1 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    827a:	60e8      	str	r0, [r5, #12]
    827c:	b31e      	cbz	r6, 82c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c6>
    827e:	4631      	mov	r1, r6
    8280:	4628      	mov	r0, r5
    8282:	f005 fcde 	bl	dc42 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8286:	4438      	add	r0, r7
    8288:	b287      	uxth	r7, r0
    828a:	4639      	mov	r1, r7
    828c:	4620      	mov	r0, r4
    828e:	f006 fa84 	bl	e79a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    8292:	68e8      	ldr	r0, [r5, #12]
    8294:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    8298:	6f20      	ldr	r0, [r4, #112]	; 0x70
    829a:	2800      	cmp	r0, #0
    829c:	d011      	beq.n	82c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c2>
    829e:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    82a2:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
    82a6:	1a40      	subs	r0, r0, r1
    82a8:	b202      	sxth	r2, r0
    82aa:	2a00      	cmp	r2, #0
    82ac:	dd09      	ble.n	82c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c2>
    82ae:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    82b2:	4402      	add	r2, r0
    82b4:	1e52      	subs	r2, r2, #1
    82b6:	fb92 f2f0 	sdiv	r2, r2, r0
    82ba:	b292      	uxth	r2, r2
    82bc:	fb02 1000 	mla	r0, r2, r0, r1
    82c0:	86e0      	strh	r0, [r4, #54]	; 0x36
    82c2:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    82c6:	f640 1176 	movw	r1, #2422	; 0x976
    82ca:	2035      	movs	r0, #53	; 0x35
    82cc:	f7fb fd64 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82d0:	200000fc 	.word	0x200000fc
    82d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    82d8:	460d      	mov	r5, r1
    82da:	4607      	mov	r7, r0
    82dc:	f000 fa58 	bl	8790 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x790>
    82e0:	4c1d      	ldr	r4, [pc, #116]	; (8358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x358>)
    82e2:	6861      	ldr	r1, [r4, #4]
    82e4:	f7f9 f98a 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    82e8:	4606      	mov	r6, r0
    82ea:	4601      	mov	r1, r0
    82ec:	4638      	mov	r0, r7
    82ee:	f7f9 f9b7 	bl	1660 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    82f2:	4607      	mov	r7, r0
    82f4:	f006 fa1e 	bl	e734 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x118>
    82f8:	4287      	cmp	r7, r0
    82fa:	da10      	bge.n	831e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31e>
    82fc:	6960      	ldr	r0, [r4, #20]
    82fe:	f000 fa47 	bl	8790 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x790>
    8302:	4631      	mov	r1, r6
    8304:	f7f9 f9ac 	bl	1660 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8308:	6861      	ldr	r1, [r4, #4]
    830a:	fbb0 f0f1 	udiv	r0, r0, r1
    830e:	6028      	str	r0, [r5, #0]
    8310:	6861      	ldr	r1, [r4, #4]
    8312:	b004      	add	sp, #16
    8314:	4630      	mov	r0, r6
    8316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    831a:	f7f9 b96f 	b.w	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    831e:	2000      	movs	r0, #0
    8320:	f88d 0000 	strb.w	r0, [sp]
    8324:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8326:	9001      	str	r0, [sp, #4]
    8328:	f006 f9f3 	bl	e712 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    832c:	f8ad 0008 	strh.w	r0, [sp, #8]
    8330:	2001      	movs	r0, #1
    8332:	f88d 000b 	strb.w	r0, [sp, #11]
    8336:	6960      	ldr	r0, [r4, #20]
    8338:	f000 fa2a 	bl	8790 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x790>
    833c:	9003      	str	r0, [sp, #12]
    833e:	f000 f9c1 	bl	86c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c4>
    8342:	f88d 000a 	strb.w	r0, [sp, #10]
    8346:	4668      	mov	r0, sp
    8348:	6861      	ldr	r1, [r4, #4]
    834a:	f005 fc7a 	bl	dc42 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    834e:	6028      	str	r0, [r5, #0]
    8350:	9803      	ldr	r0, [sp, #12]
    8352:	b004      	add	sp, #16
    8354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8358:	20001048 	.word	0x20001048
    835c:	b510      	push	{r4, lr}
    835e:	2400      	movs	r4, #0
    8360:	f006 f9e2 	bl	e728 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    8364:	4a06      	ldr	r2, [pc, #24]	; (8380 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x380>)
    8366:	2100      	movs	r1, #0
    8368:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    836c:	4404      	add	r4, r0
    836e:	689b      	ldr	r3, [r3, #8]
    8370:	1c49      	adds	r1, r1, #1
    8372:	441c      	add	r4, r3
    8374:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    8378:	d0f6      	beq.n	8368 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x368>
    837a:	4620      	mov	r0, r4
    837c:	bd10      	pop	{r4, pc}
    837e:	0000      	.short	0x0000
    8380:	20001048 	.word	0x20001048
    8384:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8386:	4c1b      	ldr	r4, [pc, #108]	; (83f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f4>)
    8388:	4606      	mov	r6, r0
    838a:	460d      	mov	r5, r1
    838c:	78a0      	ldrb	r0, [r4, #2]
    838e:	b360      	cbz	r0, 83ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ea>
    8390:	4919      	ldr	r1, [pc, #100]	; (83f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f8>)
    8392:	6a20      	ldr	r0, [r4, #32]
    8394:	4288      	cmp	r0, r1
    8396:	d828      	bhi.n	83ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ea>
    8398:	2000      	movs	r0, #0
    839a:	f88d 0000 	strb.w	r0, [sp]
    839e:	9501      	str	r5, [sp, #4]
    83a0:	f006 f9b7 	bl	e712 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    83a4:	f8ad 0008 	strh.w	r0, [sp, #8]
    83a8:	2001      	movs	r0, #1
    83aa:	f88d 000b 	strb.w	r0, [sp, #11]
    83ae:	f006 f9c1 	bl	e734 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x118>
    83b2:	4601      	mov	r1, r0
    83b4:	4630      	mov	r0, r6
    83b6:	f7f9 f921 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    83ba:	9003      	str	r0, [sp, #12]
    83bc:	2003      	movs	r0, #3
    83be:	f88d 000a 	strb.w	r0, [sp, #10]
    83c2:	4668      	mov	r0, sp
    83c4:	f7f9 fc58 	bl	1c78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    83c8:	4606      	mov	r6, r0
    83ca:	4629      	mov	r1, r5
    83cc:	9803      	ldr	r0, [sp, #12]
    83ce:	f7f9 f915 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    83d2:	4605      	mov	r5, r0
    83d4:	6a21      	ldr	r1, [r4, #32]
    83d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    83d8:	f7f9 f910 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    83dc:	4601      	mov	r1, r0
    83de:	b13e      	cbz	r6, 83f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f0>
    83e0:	4628      	mov	r0, r5
    83e2:	f7f9 f93d 	bl	1660 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    83e6:	2800      	cmp	r0, #0
    83e8:	db02      	blt.n	83f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f0>
    83ea:	2001      	movs	r0, #1
    83ec:	b004      	add	sp, #16
    83ee:	bd70      	pop	{r4, r5, r6, pc}
    83f0:	2000      	movs	r0, #0
    83f2:	e7fb      	b.n	83ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ec>
    83f4:	20001048 	.word	0x20001048
    83f8:	07a12000 	.word	0x07a12000
    83fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8400:	f003 ff5d 	bl	c2be <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8404:	4c21      	ldr	r4, [pc, #132]	; (848c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48c>)
    8406:	4607      	mov	r7, r0
    8408:	6920      	ldr	r0, [r4, #16]
    840a:	f000 f95b 	bl	86c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c4>
    840e:	4606      	mov	r6, r0
    8410:	f7f9 f89a 	bl	1548 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    8414:	4605      	mov	r5, r0
    8416:	2864      	cmp	r0, #100	; 0x64
    8418:	d326      	bcc.n	8468 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x468>
    841a:	1c68      	adds	r0, r5, #1
    841c:	d027      	beq.n	846e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46e>
    841e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8420:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    8422:	1948      	adds	r0, r1, r5
    8424:	4282      	cmp	r2, r0
    8426:	d800      	bhi.n	842a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42a>
    8428:	1a55      	subs	r5, r2, r1
    842a:	f06f 0138 	mvn.w	r1, #56	; 0x38
    842e:	4638      	mov	r0, r7
    8430:	f7f9 f8e4 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8434:	4629      	mov	r1, r5
    8436:	f000 f9bd 	bl	87b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b4>
    843a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    843c:	4408      	add	r0, r1
    843e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8440:	1a45      	subs	r5, r0, r1
    8442:	f241 3088 	movw	r0, #5000	; 0x1388
    8446:	4285      	cmp	r5, r0
    8448:	d900      	bls.n	844c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44c>
    844a:	4605      	mov	r5, r0
    844c:	f003 ff37 	bl	c2be <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8450:	4601      	mov	r1, r0
    8452:	4638      	mov	r0, r7
    8454:	f7f9 f904 	bl	1660 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8458:	309b      	adds	r0, #155	; 0x9b
    845a:	4285      	cmp	r5, r0
    845c:	d304      	bcc.n	8468 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x468>
    845e:	4631      	mov	r1, r6
    8460:	4628      	mov	r0, r5
    8462:	f7f8 ffaf 	bl	13c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    8466:	b120      	cbz	r0, 8472 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x472>
    8468:	2000      	movs	r0, #0
    846a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    846e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8470:	e7e5      	b.n	843e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x43e>
    8472:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8474:	4905      	ldr	r1, [pc, #20]	; (848c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48c>)
    8476:	4428      	add	r0, r5
    8478:	3910      	subs	r1, #16
    847a:	6260      	str	r0, [r4, #36]	; 0x24
    847c:	68c8      	ldr	r0, [r1, #12]
    847e:	4428      	add	r0, r5
    8480:	60c8      	str	r0, [r1, #12]
    8482:	f7fa f8af 	bl	25e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8486:	2001      	movs	r0, #1
    8488:	e7ef      	b.n	846a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46a>
    848a:	0000      	.short	0x0000
    848c:	20001048 	.word	0x20001048
    8490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8494:	b08c      	sub	sp, #48	; 0x30
    8496:	4616      	mov	r6, r2
    8498:	4607      	mov	r7, r0
    849a:	f003 ff10 	bl	c2be <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    849e:	4c87      	ldr	r4, [pc, #540]	; (86bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6bc>)
    84a0:	9002      	str	r0, [sp, #8]
    84a2:	2500      	movs	r5, #0
    84a4:	f8d4 a008 	ldr.w	sl, [r4, #8]
    84a8:	f006 f93e 	bl	e728 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    84ac:	68a1      	ldr	r1, [r4, #8]
    84ae:	4408      	add	r0, r1
    84b0:	6861      	ldr	r1, [r4, #4]
    84b2:	4288      	cmp	r0, r1
    84b4:	d101      	bne.n	84ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4ba>
    84b6:	2001      	movs	r0, #1
    84b8:	e000      	b.n	84bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4bc>
    84ba:	2000      	movs	r0, #0
    84bc:	4683      	mov	fp, r0
    84be:	980d      	ldr	r0, [sp, #52]	; 0x34
    84c0:	ea06 090b 	and.w	r9, r6, fp
    84c4:	2800      	cmp	r0, #0
    84c6:	d065      	beq.n	8594 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x594>
    84c8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    84cc:	9802      	ldr	r0, [sp, #8]
    84ce:	f7f9 f895 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    84d2:	9000      	str	r0, [sp, #0]
    84d4:	f002 f872 	bl	a5bc <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    84d8:	4680      	mov	r8, r0
    84da:	4878      	ldr	r0, [pc, #480]	; (86bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6bc>)
    84dc:	7800      	ldrb	r0, [r0, #0]
    84de:	4e77      	ldr	r6, [pc, #476]	; (86bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6bc>)
    84e0:	362c      	adds	r6, #44	; 0x2c
    84e2:	2805      	cmp	r0, #5
    84e4:	d12e      	bne.n	8544 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x544>
    84e6:	4875      	ldr	r0, [pc, #468]	; (86bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6bc>)
    84e8:	6980      	ldr	r0, [r0, #24]
    84ea:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    84ee:	f002 f845 	bl	a57c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    84f2:	4604      	mov	r4, r0
    84f4:	4540      	cmp	r0, r8
    84f6:	d009      	beq.n	850c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50c>
    84f8:	4870      	ldr	r0, [pc, #448]	; (86bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6bc>)
    84fa:	4621      	mov	r1, r4
    84fc:	6980      	ldr	r0, [r0, #24]
    84fe:	f500 7084 	add.w	r0, r0, #264	; 0x108
    8502:	f001 ffff 	bl	a504 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    8506:	2000      	movs	r0, #0
    8508:	6170      	str	r0, [r6, #20]
    850a:	e00c      	b.n	8526 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x526>
    850c:	496b      	ldr	r1, [pc, #428]	; (86bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6bc>)
    850e:	6988      	ldr	r0, [r1, #24]
    8510:	f500 7084 	add.w	r0, r0, #264	; 0x108
    8514:	6170      	str	r0, [r6, #20]
    8516:	698a      	ldr	r2, [r1, #24]
    8518:	6b08      	ldr	r0, [r1, #48]	; 0x30
    851a:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
    851e:	4290      	cmp	r0, r2
    8520:	d200      	bcs.n	8524 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x524>
    8522:	4610      	mov	r0, r2
    8524:	6308      	str	r0, [r1, #48]	; 0x30
    8526:	4865      	ldr	r0, [pc, #404]	; (86bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6bc>)
    8528:	6980      	ldr	r0, [r0, #24]
    852a:	b130      	cbz	r0, 853a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x53a>
    852c:	b144      	cbz	r4, 8540 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x540>
    852e:	e9d4 1200 	ldrd	r1, r2, [r4]
    8532:	4411      	add	r1, r2
    8534:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    8538:	e004      	b.n	8544 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x544>
    853a:	f240 51c7 	movw	r1, #1479	; 0x5c7
    853e:	e017      	b.n	8570 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x570>
    8540:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    8544:	4641      	mov	r1, r8
    8546:	4630      	mov	r0, r6
    8548:	f001 ffdc 	bl	a504 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    854c:	ea5f 0008 	movs.w	r0, r8
    8550:	f8df 8168 	ldr.w	r8, [pc, #360]	; 86bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6bc>
    8554:	9a00      	ldr	r2, [sp, #0]
    8556:	f8d8 4004 	ldr.w	r4, [r8, #4]
    855a:	d00c      	beq.n	8576 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x576>
    855c:	e9d0 1000 	ldrd	r1, r0, [r0]
    8560:	4408      	add	r0, r1
    8562:	4621      	mov	r1, r4
    8564:	f006 fa1a 	bl	e99c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    8568:	42a0      	cmp	r0, r4
    856a:	d904      	bls.n	8576 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x576>
    856c:	f240 51e5 	movw	r1, #1509	; 0x5e5
    8570:	2035      	movs	r0, #53	; 0x35
    8572:	f7fb fc11 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8576:	4601      	mov	r1, r0
    8578:	9800      	ldr	r0, [sp, #0]
    857a:	f7f9 f83f 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    857e:	4606      	mov	r6, r0
    8580:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8584:	4644      	mov	r4, r8
    8586:	4241      	negs	r1, r0
    8588:	4630      	mov	r0, r6
    858a:	f7f9 f837 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    858e:	62e0      	str	r0, [r4, #44]	; 0x2c
    8590:	2001      	movs	r0, #1
    8592:	e042      	b.n	861a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x61a>
    8594:	f1b9 0f00 	cmp.w	r9, #0
    8598:	d018      	beq.n	85cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5cc>
    859a:	2001      	movs	r0, #1
    859c:	f006 f846 	bl	e62c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    85a0:	4604      	mov	r4, r0
    85a2:	2001      	movs	r0, #1
    85a4:	f007 f968 	bl	f878 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    85a8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    85ac:	4401      	add	r1, r0
    85ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    85b2:	fbb1 f0f0 	udiv	r0, r1, r0
    85b6:	1821      	adds	r1, r4, r0
    85b8:	31f0      	adds	r1, #240	; 0xf0
    85ba:	9802      	ldr	r0, [sp, #8]
    85bc:	f7ff fee2 	bl	8384 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x384>
    85c0:	b908      	cbnz	r0, 85c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c6>
    85c2:	f04f 0a00 	mov.w	sl, #0
    85c6:	9e02      	ldr	r6, [sp, #8]
    85c8:	9508      	str	r5, [sp, #32]
    85ca:	e027      	b.n	861c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x61c>
    85cc:	b12e      	cbz	r6, 85da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5da>
    85ce:	a908      	add	r1, sp, #32
    85d0:	9802      	ldr	r0, [sp, #8]
    85d2:	f7ff fe7f 	bl	82d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d4>
    85d6:	4606      	mov	r6, r0
    85d8:	e020      	b.n	861c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x61c>
    85da:	9802      	ldr	r0, [sp, #8]
    85dc:	f000 f8d8 	bl	8790 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x790>
    85e0:	4c36      	ldr	r4, [pc, #216]	; (86bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6bc>)
    85e2:	e9d4 1a01 	ldrd	r1, sl, [r4, #4]
    85e6:	f7f9 f809 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    85ea:	4606      	mov	r6, r0
    85ec:	6920      	ldr	r0, [r4, #16]
    85ee:	f000 f8c3 	bl	8778 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x778>
    85f2:	6861      	ldr	r1, [r4, #4]
    85f4:	4348      	muls	r0, r1
    85f6:	78a1      	ldrb	r1, [r4, #2]
    85f8:	b131      	cbz	r1, 8608 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x608>
    85fa:	6a21      	ldr	r1, [r4, #32]
    85fc:	4281      	cmp	r1, r0
    85fe:	d302      	bcc.n	8606 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x606>
    8600:	1a09      	subs	r1, r1, r0
    8602:	6221      	str	r1, [r4, #32]
    8604:	e000      	b.n	8608 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x608>
    8606:	6225      	str	r5, [r4, #32]
    8608:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    860a:	4601      	mov	r1, r0
    860c:	4610      	mov	r0, r2
    860e:	f7f8 fff5 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8612:	62e0      	str	r0, [r4, #44]	; 0x2c
    8614:	4630      	mov	r0, r6
    8616:	f000 f8af 	bl	8778 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x778>
    861a:	9008      	str	r0, [sp, #32]
    861c:	2001      	movs	r0, #1
    861e:	f006 f805 	bl	e62c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    8622:	4604      	mov	r4, r0
    8624:	2001      	movs	r0, #1
    8626:	f007 f927 	bl	f878 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    862a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    862e:	4401      	add	r1, r0
    8630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8634:	fbb1 f0f0 	udiv	r0, r1, r0
    8638:	4404      	add	r4, r0
    863a:	4651      	mov	r1, sl
    863c:	4630      	mov	r0, r6
    863e:	34f0      	adds	r4, #240	; 0xf0
    8640:	f000 f8b8 	bl	87b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b4>
    8644:	491d      	ldr	r1, [pc, #116]	; (86bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6bc>)
    8646:	eb01 0285 	add.w	r2, r1, r5, lsl #2
    864a:	6892      	ldr	r2, [r2, #8]
    864c:	4282      	cmp	r2, r0
    864e:	d800      	bhi.n	8652 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x652>
    8650:	4610      	mov	r0, r2
    8652:	6288      	str	r0, [r1, #40]	; 0x28
    8654:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8656:	b102      	cbz	r2, 865a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x65a>
    8658:	610e      	str	r6, [r1, #16]
    865a:	4688      	mov	r8, r1
    865c:	614e      	str	r6, [r1, #20]
    865e:	f1bb 0f00 	cmp.w	fp, #0
    8662:	d002      	beq.n	866a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66a>
    8664:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    8668:	e001      	b.n	866e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66e>
    866a:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    866e:	f04f 0a01 	mov.w	sl, #1
    8672:	f887 a00b 	strb.w	sl, [r7, #11]
    8676:	f006 f84c 	bl	e712 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    867a:	8138      	strh	r0, [r7, #8]
    867c:	4630      	mov	r0, r6
    867e:	f000 f821 	bl	86c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c4>
    8682:	72b8      	strb	r0, [r7, #10]
    8684:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    8688:	6078      	str	r0, [r7, #4]
    868a:	f1b9 0f00 	cmp.w	r9, #0
    868e:	d008      	beq.n	86a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6a2>
    8690:	f887 a000 	strb.w	sl, [r7]
    8694:	490a      	ldr	r1, [pc, #40]	; (86c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c0>)
    8696:	9802      	ldr	r0, [sp, #8]
    8698:	f000 f88c 	bl	87b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b4>
    869c:	1b00      	subs	r0, r0, r4
    869e:	60f8      	str	r0, [r7, #12]
    86a0:	e001      	b.n	86a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6a6>
    86a2:	703d      	strb	r5, [r7, #0]
    86a4:	60fe      	str	r6, [r7, #12]
    86a6:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    86aa:	42a0      	cmp	r0, r4
    86ac:	d303      	bcc.n	86b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6b6>
    86ae:	2001      	movs	r0, #1
    86b0:	b00f      	add	sp, #60	; 0x3c
    86b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    86b6:	2000      	movs	r0, #0
    86b8:	e7fa      	b.n	86b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6b0>
    86ba:	0000      	.short	0x0000
    86bc:	20001048 	.word	0x20001048
    86c0:	07a12000 	.word	0x07a12000
    86c4:	4a09      	ldr	r2, [pc, #36]	; (86ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ec>)
    86c6:	b510      	push	{r4, lr}
    86c8:	7811      	ldrb	r1, [r2, #0]
    86ca:	2904      	cmp	r1, #4
    86cc:	d10c      	bne.n	86e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6e8>
    86ce:	6851      	ldr	r1, [r2, #4]
    86d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    86d2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    86d6:	004c      	lsls	r4, r1, #1
    86d8:	4601      	mov	r1, r0
    86da:	4610      	mov	r0, r2
    86dc:	f7f8 ffc0 	bl	1660 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    86e0:	42a0      	cmp	r0, r4
    86e2:	d201      	bcs.n	86e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6e8>
    86e4:	2003      	movs	r0, #3
    86e6:	bd10      	pop	{r4, pc}
    86e8:	2002      	movs	r0, #2
    86ea:	bd10      	pop	{r4, pc}
    86ec:	20001048 	.word	0x20001048
    86f0:	b570      	push	{r4, r5, r6, lr}
    86f2:	4d13      	ldr	r5, [pc, #76]	; (8740 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x740>)
    86f4:	7f28      	ldrb	r0, [r5, #28]
    86f6:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    86fa:	2800      	cmp	r0, #0
    86fc:	7828      	ldrb	r0, [r5, #0]
    86fe:	d00f      	beq.n	8720 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x720>
    8700:	2805      	cmp	r0, #5
    8702:	d004      	beq.n	870e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70e>
    8704:	f44f 7166 	mov.w	r1, #920	; 0x398
    8708:	2035      	movs	r0, #53	; 0x35
    870a:	f7fb fb45 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    870e:	4620      	mov	r0, r4
    8710:	f005 ff87 	bl	e622 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6>
    8714:	b178      	cbz	r0, 8736 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x736>
    8716:	4620      	mov	r0, r4
    8718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    871c:	f001 bed0 	b.w	a4c0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    8720:	2805      	cmp	r0, #5
    8722:	d108      	bne.n	8736 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x736>
    8724:	4620      	mov	r0, r4
    8726:	f005 ff7c 	bl	e622 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6>
    872a:	b920      	cbnz	r0, 8736 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x736>
    872c:	69a8      	ldr	r0, [r5, #24]
    872e:	f500 7084 	add.w	r0, r0, #264	; 0x108
    8732:	f001 ff07 	bl	a544 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    8736:	4620      	mov	r0, r4
    8738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    873c:	f001 bf02 	b.w	a544 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    8740:	20001048 	.word	0x20001048
    8744:	b510      	push	{r4, lr}
    8746:	f7fd ff4b 	bl	65e0 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    874a:	490a      	ldr	r1, [pc, #40]	; (8774 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x774>)
    874c:	2000      	movs	r0, #0
    874e:	70c8      	strb	r0, [r1, #3]
    8750:	7708      	strb	r0, [r1, #28]
    8752:	6188      	str	r0, [r1, #24]
    8754:	7008      	strb	r0, [r1, #0]
    8756:	f7fd fe95 	bl	6484 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    875a:	4604      	mov	r4, r0
    875c:	7800      	ldrb	r0, [r0, #0]
    875e:	f7f9 fd09 	bl	2174 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8762:	b110      	cbz	r0, 876a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76a>
    8764:	2020      	movs	r0, #32
    8766:	7020      	strb	r0, [r4, #0]
    8768:	bd10      	pop	{r4, pc}
    876a:	f240 5131 	movw	r1, #1329	; 0x531
    876e:	2035      	movs	r0, #53	; 0x35
    8770:	f7fb fb12 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8774:	20001048 	.word	0x20001048
    8778:	b510      	push	{r4, lr}
    877a:	4c04      	ldr	r4, [pc, #16]	; (878c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78c>)
    877c:	4601      	mov	r1, r0
    877e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8780:	f7f8 ff6e 	bl	1660 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8784:	6861      	ldr	r1, [r4, #4]
    8786:	fbb0 f0f1 	udiv	r0, r0, r1
    878a:	bd10      	pop	{r4, pc}
    878c:	20001048 	.word	0x20001048
    8790:	b510      	push	{r4, lr}
    8792:	4c07      	ldr	r4, [pc, #28]	; (87b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b0>)
    8794:	4601      	mov	r1, r0
    8796:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8798:	f7f8 ff62 	bl	1660 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    879c:	6861      	ldr	r1, [r4, #4]
    879e:	fbb0 f2f1 	udiv	r2, r0, r1
    87a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    87a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    87a8:	4351      	muls	r1, r2
    87aa:	f7f8 bf27 	b.w	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    87ae:	0000      	.short	0x0000
    87b0:	20001048 	.word	0x20001048
    87b4:	b570      	push	{r4, r5, r6, lr}
    87b6:	4605      	mov	r5, r0
    87b8:	480d      	ldr	r0, [pc, #52]	; (87f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7f0>)
    87ba:	460c      	mov	r4, r1
    87bc:	7881      	ldrb	r1, [r0, #2]
    87be:	b1a9      	cbz	r1, 87ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7ec>
    87c0:	4a0c      	ldr	r2, [pc, #48]	; (87f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7f4>)
    87c2:	6a01      	ldr	r1, [r0, #32]
    87c4:	4291      	cmp	r1, r2
    87c6:	d211      	bcs.n	87ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7ec>
    87c8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    87ca:	f7f8 ff17 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    87ce:	4606      	mov	r6, r0
    87d0:	4621      	mov	r1, r4
    87d2:	4628      	mov	r0, r5
    87d4:	f7f8 ff12 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    87d8:	4601      	mov	r1, r0
    87da:	4630      	mov	r0, r6
    87dc:	f7f8 ff40 	bl	1660 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    87e0:	2800      	cmp	r0, #0
    87e2:	dd03      	ble.n	87ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7ec>
    87e4:	1a20      	subs	r0, r4, r0
    87e6:	d500      	bpl.n	87ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7ea>
    87e8:	2000      	movs	r0, #0
    87ea:	bd70      	pop	{r4, r5, r6, pc}
    87ec:	4620      	mov	r0, r4
    87ee:	bd70      	pop	{r4, r5, r6, pc}
    87f0:	20001048 	.word	0x20001048
    87f4:	07a12000 	.word	0x07a12000

000087f8 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    87f8:	4806      	ldr	r0, [pc, #24]	; (8814 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    87fa:	4905      	ldr	r1, [pc, #20]	; (8810 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    87fc:	6501      	str	r1, [r0, #80]	; 0x50
    87fe:	4906      	ldr	r1, [pc, #24]	; (8818 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    8800:	6541      	str	r1, [r0, #84]	; 0x54
    8802:	4807      	ldr	r0, [pc, #28]	; (8820 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    8804:	4905      	ldr	r1, [pc, #20]	; (881c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    8806:	6501      	str	r1, [r0, #80]	; 0x50
    8808:	4906      	ldr	r1, [pc, #24]	; (8824 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    880a:	6541      	str	r1, [r0, #84]	; 0x54
    880c:	4770      	bx	lr
    880e:	0000      	.short	0x0000
    8810:	00009955 	.word	0x00009955
    8814:	20000114 	.word	0x20000114
    8818:	00009a21 	.word	0x00009a21
    881c:	0000a051 	.word	0x0000a051
    8820:	20000178 	.word	0x20000178
    8824:	0000a081 	.word	0x0000a081

00008828 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI>:
    8828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    882a:	460d      	mov	r5, r1
    882c:	4607      	mov	r7, r0
    882e:	2100      	movs	r1, #0
    8830:	f004 ff57 	bl	d6e2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8834:	1e04      	subs	r4, r0, #0
    8836:	d051      	beq.n	88dc <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    8838:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
    883c:	2800      	cmp	r0, #0
    883e:	d04d      	beq.n	88dc <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    8840:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    8844:	f88d 0000 	strb.w	r0, [sp]
    8848:	9800      	ldr	r0, [sp, #0]
    884a:	9000      	str	r0, [sp, #0]
    884c:	f89d 0000 	ldrb.w	r0, [sp]
    8850:	2600      	movs	r6, #0
    8852:	b158      	cbz	r0, 886c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x44>
    8854:	706e      	strb	r6, [r5, #1]
    8856:	2009      	movs	r0, #9
    8858:	7028      	strb	r0, [r5, #0]
    885a:	220a      	movs	r2, #10
    885c:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    8860:	1d28      	adds	r0, r5, #4
    8862:	f003 fea1 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8866:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    886a:	e0e1      	b.n	8a30 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    886c:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    8870:	280e      	cmp	r0, #14
    8872:	d01d      	beq.n	88b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x88>
    8874:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    8878:	280d      	cmp	r0, #13
    887a:	d027      	beq.n	88cc <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xa4>
    887c:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    8880:	f88d 0000 	strb.w	r0, [sp]
    8884:	9800      	ldr	r0, [sp, #0]
    8886:	9000      	str	r0, [sp, #0]
    8888:	f89d 0000 	ldrb.w	r0, [sp]
    888c:	b3b0      	cbz	r0, 88fc <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd4>
    888e:	706e      	strb	r6, [r5, #1]
    8890:	2008      	movs	r0, #8
    8892:	7028      	strb	r0, [r5, #0]
    8894:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    8898:	6068      	str	r0, [r5, #4]
    889a:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    889e:	60a8      	str	r0, [r5, #8]
    88a0:	f8d4 01c2 	ldr.w	r0, [r4, #450]	; 0x1c2
    88a4:	60e8      	str	r0, [r5, #12]
    88a6:	f504 74dd 	add.w	r4, r4, #442	; 0x1ba
    88aa:	f804 6c02 	strb.w	r6, [r4, #-2]
    88ae:	e0bf      	b.n	8a30 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    88b0:	8820      	ldrh	r0, [r4, #0]
    88b2:	f7fb fe6f 	bl	4594 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    88b6:	4607      	mov	r7, r0
    88b8:	f004 fde3 	bl	d482 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    88bc:	b968      	cbnz	r0, 88da <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb2>
    88be:	706e      	strb	r6, [r5, #1]
    88c0:	200e      	movs	r0, #14
    88c2:	7028      	strb	r0, [r5, #0]
    88c4:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    88c8:	6068      	str	r0, [r5, #4]
    88ca:	e011      	b.n	88f0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xc8>
    88cc:	8820      	ldrh	r0, [r4, #0]
    88ce:	f7fb fe61 	bl	4594 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    88d2:	4607      	mov	r7, r0
    88d4:	f004 fdd5 	bl	d482 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    88d8:	b108      	cbz	r0, 88de <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb6>
    88da:	2000      	movs	r0, #0
    88dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88de:	706e      	strb	r6, [r5, #1]
    88e0:	200d      	movs	r0, #13
    88e2:	7028      	strb	r0, [r5, #0]
    88e4:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    88e8:	6068      	str	r0, [r5, #4]
    88ea:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    88ee:	8128      	strh	r0, [r5, #8]
    88f0:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    88f4:	4638      	mov	r0, r7
    88f6:	f004 fddf 	bl	d4b8 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    88fa:	e099      	b.n	8a30 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    88fc:	e7ff      	b.n	88fe <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd6>
    88fe:	f894 018e 	ldrb.w	r0, [r4, #398]	; 0x18e
    8902:	f88d 0000 	strb.w	r0, [sp]
    8906:	9800      	ldr	r0, [sp, #0]
    8908:	9000      	str	r0, [sp, #0]
    890a:	f89d 0000 	ldrb.w	r0, [sp]
    890e:	b130      	cbz	r0, 891e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xf6>
    8910:	706e      	strb	r6, [r5, #1]
    8912:	2010      	movs	r0, #16
    8914:	7028      	strb	r0, [r5, #0]
    8916:	80af      	strh	r7, [r5, #4]
    8918:	f884 618e 	strb.w	r6, [r4, #398]	; 0x18e
    891c:	e088      	b.n	8a30 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    891e:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    8922:	f88d 0000 	strb.w	r0, [sp]
    8926:	9800      	ldr	r0, [sp, #0]
    8928:	9000      	str	r0, [sp, #0]
    892a:	f89d 0000 	ldrb.w	r0, [sp]
    892e:	b1c8      	cbz	r0, 8964 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x13c>
    8930:	706e      	strb	r6, [r5, #1]
    8932:	2015      	movs	r0, #21
    8934:	7028      	strb	r0, [r5, #0]
    8936:	e00a      	b.n	894e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x126>
    8938:	f884 6190 	strb.w	r6, [r4, #400]	; 0x190
    893c:	f8d4 0192 	ldr.w	r0, [r4, #402]	; 0x192
    8940:	6068      	str	r0, [r5, #4]
    8942:	f8d4 0196 	ldr.w	r0, [r4, #406]	; 0x196
    8946:	60a8      	str	r0, [r5, #8]
    8948:	f8d4 019a 	ldr.w	r0, [r4, #410]	; 0x19a
    894c:	60e8      	str	r0, [r5, #12]
    894e:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    8952:	f88d 0000 	strb.w	r0, [sp]
    8956:	9800      	ldr	r0, [sp, #0]
    8958:	9000      	str	r0, [sp, #0]
    895a:	f89d 0000 	ldrb.w	r0, [sp]
    895e:	2800      	cmp	r0, #0
    8960:	d1ea      	bne.n	8938 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x110>
    8962:	e065      	b.n	8a30 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8964:	f894 019e 	ldrb.w	r0, [r4, #414]	; 0x19e
    8968:	f88d 0000 	strb.w	r0, [sp]
    896c:	9800      	ldr	r0, [sp, #0]
    896e:	9000      	str	r0, [sp, #0]
    8970:	f89d 0000 	ldrb.w	r0, [sp]
    8974:	b158      	cbz	r0, 898e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x166>
    8976:	706e      	strb	r6, [r5, #1]
    8978:	201c      	movs	r0, #28
    897a:	7028      	strb	r0, [r5, #0]
    897c:	220a      	movs	r2, #10
    897e:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
    8982:	1d28      	adds	r0, r5, #4
    8984:	f003 fe10 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8988:	f884 619e 	strb.w	r6, [r4, #414]	; 0x19e
    898c:	e050      	b.n	8a30 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    898e:	f894 01aa 	ldrb.w	r0, [r4, #426]	; 0x1aa
    8992:	f88d 0000 	strb.w	r0, [sp]
    8996:	9800      	ldr	r0, [sp, #0]
    8998:	9000      	str	r0, [sp, #0]
    899a:	f89d 0000 	ldrb.w	r0, [sp]
    899e:	b140      	cbz	r0, 89b2 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x18a>
    89a0:	706e      	strb	r6, [r5, #1]
    89a2:	201d      	movs	r0, #29
    89a4:	7028      	strb	r0, [r5, #0]
    89a6:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    89aa:	6068      	str	r0, [r5, #4]
    89ac:	f884 61aa 	strb.w	r6, [r4, #426]	; 0x1aa
    89b0:	e03e      	b.n	8a30 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    89b2:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    89b6:	f88d 0000 	strb.w	r0, [sp]
    89ba:	9800      	ldr	r0, [sp, #0]
    89bc:	9000      	str	r0, [sp, #0]
    89be:	f89d 0000 	ldrb.w	r0, [sp]
    89c2:	b198      	cbz	r0, 89ec <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1c4>
    89c4:	706e      	strb	r6, [r5, #1]
    89c6:	201a      	movs	r0, #26
    89c8:	7028      	strb	r0, [r5, #0]
    89ca:	e004      	b.n	89d6 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1ae>
    89cc:	f884 6188 	strb.w	r6, [r4, #392]	; 0x188
    89d0:	f8d4 018a 	ldr.w	r0, [r4, #394]	; 0x18a
    89d4:	6068      	str	r0, [r5, #4]
    89d6:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    89da:	f88d 0000 	strb.w	r0, [sp]
    89de:	9800      	ldr	r0, [sp, #0]
    89e0:	9000      	str	r0, [sp, #0]
    89e2:	f89d 0000 	ldrb.w	r0, [sp]
    89e6:	2800      	cmp	r0, #0
    89e8:	d1f0      	bne.n	89cc <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1a4>
    89ea:	e021      	b.n	8a30 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    89ec:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    89f0:	f88d 0000 	strb.w	r0, [sp]
    89f4:	9800      	ldr	r0, [sp, #0]
    89f6:	9000      	str	r0, [sp, #0]
    89f8:	f89d 0000 	ldrb.w	r0, [sp]
    89fc:	2800      	cmp	r0, #0
    89fe:	f43f af6d 	beq.w	88dc <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    8a02:	706e      	strb	r6, [r5, #1]
    8a04:	2016      	movs	r0, #22
    8a06:	7028      	strb	r0, [r5, #0]
    8a08:	e008      	b.n	8a1c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1f4>
    8a0a:	bf00      	nop
    8a0c:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    8a10:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    8a14:	6068      	str	r0, [r5, #4]
    8a16:	f8b4 01b6 	ldrh.w	r0, [r4, #438]	; 0x1b6
    8a1a:	8128      	strh	r0, [r5, #8]
    8a1c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    8a20:	f88d 0000 	strb.w	r0, [sp]
    8a24:	9800      	ldr	r0, [sp, #0]
    8a26:	9000      	str	r0, [sp, #0]
    8a28:	f89d 0000 	ldrb.w	r0, [sp]
    8a2c:	2800      	cmp	r0, #0
    8a2e:	d1ed      	bne.n	8a0c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1e4>
    8a30:	2001      	movs	r0, #1
    8a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008a34 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    8a34:	b570      	push	{r4, r5, r6, lr}
    8a36:	4605      	mov	r5, r0
    8a38:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    8a3c:	f895 1089 	ldrb.w	r1, [r5, #137]	; 0x89
    8a40:	b1c9      	cbz	r1, 8a76 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    8a42:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
    8a46:	1a0c      	subs	r4, r1, r0
    8a48:	f1b4 0404 	subs.w	r4, r4, #4
    8a4c:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
    8a50:	b140      	cbz	r0, 8a64 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    8a52:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    8a56:	2300      	movs	r3, #0
    8a58:	2109      	movs	r1, #9
    8a5a:	f105 0078 	add.w	r0, r5, #120	; 0x78
    8a5e:	f004 ffe7 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8a62:	b160      	cbz	r0, 8a7e <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    8a64:	4628      	mov	r0, r5
    8a66:	f005 ff8a 	bl	e97e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    8a6a:	b138      	cbz	r0, 8a7c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    8a6c:	e9d5 1028 	ldrd	r1, r0, [r5, #160]	; 0xa0
    8a70:	1a40      	subs	r0, r0, r1
    8a72:	1f00      	subs	r0, r0, #4
    8a74:	e003      	b.n	8a7e <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    8a76:	f1c0 0402 	rsb	r4, r0, #2
    8a7a:	e7e7      	b.n	8a4c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    8a7c:	4620      	mov	r0, r4
    8a7e:	42a0      	cmp	r0, r4
    8a80:	da00      	bge.n	8a84 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    8a82:	4604      	mov	r4, r0
    8a84:	2c00      	cmp	r4, #0
    8a86:	dc01      	bgt.n	8a8c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    8a88:	2000      	movs	r0, #0
    8a8a:	bd70      	pop	{r4, r5, r6, pc}
    8a8c:	b2a0      	uxth	r0, r4
    8a8e:	bd70      	pop	{r4, r5, r6, pc}

00008a90 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    8a90:	481b      	ldr	r0, [pc, #108]	; (8b00 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x70>)
    8a92:	491a      	ldr	r1, [pc, #104]	; (8afc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x6c>)
    8a94:	6081      	str	r1, [r0, #8]
    8a96:	491b      	ldr	r1, [pc, #108]	; (8b04 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    8a98:	61c1      	str	r1, [r0, #28]
    8a9a:	491b      	ldr	r1, [pc, #108]	; (8b08 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    8a9c:	62c1      	str	r1, [r0, #44]	; 0x2c
    8a9e:	491b      	ldr	r1, [pc, #108]	; (8b0c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    8aa0:	6101      	str	r1, [r0, #16]
    8aa2:	491b      	ldr	r1, [pc, #108]	; (8b10 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    8aa4:	6141      	str	r1, [r0, #20]
    8aa6:	491b      	ldr	r1, [pc, #108]	; (8b14 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    8aa8:	6441      	str	r1, [r0, #68]	; 0x44
    8aaa:	491b      	ldr	r1, [pc, #108]	; (8b18 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    8aac:	6181      	str	r1, [r0, #24]
    8aae:	491b      	ldr	r1, [pc, #108]	; (8b1c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    8ab0:	6301      	str	r1, [r0, #48]	; 0x30
    8ab2:	491b      	ldr	r1, [pc, #108]	; (8b20 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    8ab4:	6241      	str	r1, [r0, #36]	; 0x24
    8ab6:	491b      	ldr	r1, [pc, #108]	; (8b24 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    8ab8:	64c1      	str	r1, [r0, #76]	; 0x4c
    8aba:	491b      	ldr	r1, [pc, #108]	; (8b28 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    8abc:	6481      	str	r1, [r0, #72]	; 0x48
    8abe:	491b      	ldr	r1, [pc, #108]	; (8b2c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    8ac0:	6341      	str	r1, [r0, #52]	; 0x34
    8ac2:	481c      	ldr	r0, [pc, #112]	; (8b34 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    8ac4:	491a      	ldr	r1, [pc, #104]	; (8b30 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    8ac6:	6081      	str	r1, [r0, #8]
    8ac8:	491b      	ldr	r1, [pc, #108]	; (8b38 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    8aca:	61c1      	str	r1, [r0, #28]
    8acc:	491b      	ldr	r1, [pc, #108]	; (8b3c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    8ace:	6201      	str	r1, [r0, #32]
    8ad0:	491b      	ldr	r1, [pc, #108]	; (8b40 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    8ad2:	6041      	str	r1, [r0, #4]
    8ad4:	491b      	ldr	r1, [pc, #108]	; (8b44 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    8ad6:	6001      	str	r1, [r0, #0]
    8ad8:	491b      	ldr	r1, [pc, #108]	; (8b48 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    8ada:	6281      	str	r1, [r0, #40]	; 0x28
    8adc:	491b      	ldr	r1, [pc, #108]	; (8b4c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    8ade:	62c1      	str	r1, [r0, #44]	; 0x2c
    8ae0:	491b      	ldr	r1, [pc, #108]	; (8b50 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    8ae2:	60c1      	str	r1, [r0, #12]
    8ae4:	491b      	ldr	r1, [pc, #108]	; (8b54 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    8ae6:	6181      	str	r1, [r0, #24]
    8ae8:	491b      	ldr	r1, [pc, #108]	; (8b58 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    8aea:	6301      	str	r1, [r0, #48]	; 0x30
    8aec:	491b      	ldr	r1, [pc, #108]	; (8b5c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    8aee:	6481      	str	r1, [r0, #72]	; 0x48
    8af0:	491b      	ldr	r1, [pc, #108]	; (8b60 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    8af2:	64c1      	str	r1, [r0, #76]	; 0x4c
    8af4:	491b      	ldr	r1, [pc, #108]	; (8b64 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    8af6:	6441      	str	r1, [r0, #68]	; 0x44
    8af8:	4770      	bx	lr
    8afa:	0000      	.short	0x0000
    8afc:	00009ddd 	.word	0x00009ddd
    8b00:	20000114 	.word	0x20000114
    8b04:	00009e19 	.word	0x00009e19
    8b08:	00009af1 	.word	0x00009af1
    8b0c:	00009831 	.word	0x00009831
    8b10:	00009d29 	.word	0x00009d29
    8b14:	00009c8d 	.word	0x00009c8d
    8b18:	00009d69 	.word	0x00009d69
    8b1c:	00009eb5 	.word	0x00009eb5
    8b20:	00009869 	.word	0x00009869
    8b24:	00009ac5 	.word	0x00009ac5
    8b28:	00009a91 	.word	0x00009a91
    8b2c:	00009d19 	.word	0x00009d19
    8b30:	0000a235 	.word	0x0000a235
    8b34:	20000178 	.word	0x20000178
    8b38:	0000a265 	.word	0x0000a265
    8b3c:	0000a021 	.word	0x0000a021
    8b40:	00009f85 	.word	0x00009f85
    8b44:	00009fb5 	.word	0x00009fb5
    8b48:	0000a0f1 	.word	0x0000a0f1
    8b4c:	0000a125 	.word	0x0000a125
    8b50:	00009fe5 	.word	0x00009fe5
    8b54:	0000a211 	.word	0x0000a211
    8b58:	0000a2a5 	.word	0x0000a2a5
    8b5c:	0000a0b1 	.word	0x0000a0b1
    8b60:	0000a0e1 	.word	0x0000a0e1
    8b64:	0000a1fd 	.word	0x0000a1fd

00008b68 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    8b68:	4806      	ldr	r0, [pc, #24]	; (8b84 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    8b6a:	4905      	ldr	r1, [pc, #20]	; (8b80 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    8b6c:	6581      	str	r1, [r0, #88]	; 0x58
    8b6e:	4906      	ldr	r1, [pc, #24]	; (8b88 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    8b70:	65c1      	str	r1, [r0, #92]	; 0x5c
    8b72:	4807      	ldr	r0, [pc, #28]	; (8b90 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    8b74:	4905      	ldr	r1, [pc, #20]	; (8b8c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    8b76:	6581      	str	r1, [r0, #88]	; 0x58
    8b78:	4906      	ldr	r1, [pc, #24]	; (8b94 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    8b7a:	6601      	str	r1, [r0, #96]	; 0x60
    8b7c:	4770      	bx	lr
    8b7e:	0000      	.short	0x0000
    8b80:	00009b15 	.word	0x00009b15
    8b84:	20000114 	.word	0x20000114
    8b88:	00009c25 	.word	0x00009c25
    8b8c:	0000a151 	.word	0x0000a151
    8b90:	20000178 	.word	0x20000178
    8b94:	0000a181 	.word	0x0000a181

00008b98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    8b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b9a:	4d36      	ldr	r5, [pc, #216]	; (8c74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc>)
    8b9c:	2600      	movs	r6, #0
    8b9e:	4604      	mov	r4, r0
    8ba0:	6068      	str	r0, [r5, #4]
    8ba2:	806e      	strh	r6, [r5, #2]
    8ba4:	706e      	strb	r6, [r5, #1]
    8ba6:	702e      	strb	r6, [r5, #0]
    8ba8:	8800      	ldrh	r0, [r0, #0]
    8baa:	f7fb ff17 	bl	49dc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8bae:	6868      	ldr	r0, [r5, #4]
    8bb0:	8800      	ldrh	r0, [r0, #0]
    8bb2:	f7fb febb 	bl	492c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8bb6:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    8bba:	6869      	ldr	r1, [r5, #4]
    8bbc:	1c40      	adds	r0, r0, #1
    8bbe:	b282      	uxth	r2, r0
    8bc0:	f101 0078 	add.w	r0, r1, #120	; 0x78
    8bc4:	f005 f8ee 	bl	dda4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8bc8:	b120      	cbz	r0, 8bd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c>
    8bca:	f44f 71ac 	mov.w	r1, #344	; 0x158
    8bce:	2036      	movs	r0, #54	; 0x36
    8bd0:	f7fb f8e2 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8bd4:	f8a4 6122 	strh.w	r6, [r4, #290]	; 0x122
    8bd8:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    8bdc:	4630      	mov	r0, r6
    8bde:	2924      	cmp	r1, #36	; 0x24
    8be0:	d10a      	bne.n	8bf8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8be2:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8be6:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8bea:	1a51      	subs	r1, r2, r1
    8bec:	b209      	sxth	r1, r1
    8bee:	2900      	cmp	r1, #0
    8bf0:	db02      	blt.n	8bf8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8bf2:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
    8bf6:	e00f      	b.n	8c18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x80>
    8bf8:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    8bfc:	2924      	cmp	r1, #36	; 0x24
    8bfe:	d001      	beq.n	8c04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6c>
    8c00:	2925      	cmp	r1, #37	; 0x25
    8c02:	d10c      	bne.n	8c1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8c04:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8c08:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8c0c:	1a51      	subs	r1, r2, r1
    8c0e:	b209      	sxth	r1, r1
    8c10:	2900      	cmp	r1, #0
    8c12:	db04      	blt.n	8c1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8c14:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    8c18:	f000 fd5a 	bl	96d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb38>
    8c1c:	b318      	cbz	r0, 8c66 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xce>
    8c1e:	f000 fbfd 	bl	941c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    8c22:	2800      	cmp	r0, #0
    8c24:	d125      	bne.n	8c72 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8c26:	6868      	ldr	r0, [r5, #4]
    8c28:	3078      	adds	r0, #120	; 0x78
    8c2a:	f005 fe1d 	bl	e868 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8c2e:	b120      	cbz	r0, 8c3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2>
    8c30:	6868      	ldr	r0, [r5, #4]
    8c32:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    8c36:	f000 faad 	bl	9194 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5fc>
    8c3a:	480f      	ldr	r0, [pc, #60]	; (8c78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>)
    8c3c:	9000      	str	r0, [sp, #0]
    8c3e:	4b0f      	ldr	r3, [pc, #60]	; (8c7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    8c40:	4a0f      	ldr	r2, [pc, #60]	; (8c80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    8c42:	4621      	mov	r1, r4
    8c44:	4630      	mov	r0, r6
    8c46:	f7fb ff73 	bl	4b30 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8c4a:	6868      	ldr	r0, [r5, #4]
    8c4c:	2300      	movs	r3, #0
    8c4e:	2105      	movs	r1, #5
    8c50:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8c54:	3078      	adds	r0, #120	; 0x78
    8c56:	f004 feeb 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c5a:	2800      	cmp	r0, #0
    8c5c:	d009      	beq.n	8c72 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8c5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8c62:	f7fb bf5f 	b.w	4b24 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8c66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8c6a:	2100      	movs	r1, #0
    8c6c:	4608      	mov	r0, r1
    8c6e:	f000 bb81 	b.w	9374 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    8c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c74:	20000104 	.word	0x20000104
    8c78:	00009375 	.word	0x00009375
    8c7c:	00008da5 	.word	0x00008da5
    8c80:	00009649 	.word	0x00009649
    8c84:	4411      	add	r1, r2
    8c86:	78c2      	ldrb	r2, [r0, #3]
    8c88:	480c      	ldr	r0, [pc, #48]	; (8cbc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x124>)
    8c8a:	1d89      	adds	r1, r1, #6
    8c8c:	b289      	uxth	r1, r1
    8c8e:	6840      	ldr	r0, [r0, #4]
    8c90:	2a01      	cmp	r2, #1
    8c92:	d006      	beq.n	8ca2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10a>
    8c94:	b142      	cbz	r2, 8ca8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x110>
    8c96:	2a18      	cmp	r2, #24
    8c98:	d105      	bne.n	8ca6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10e>
    8c9a:	f890 2126 	ldrb.w	r2, [r0, #294]	; 0x126
    8c9e:	b132      	cbz	r2, 8cae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x116>
    8ca0:	e009      	b.n	8cb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8ca2:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    8ca6:	4770      	bx	lr
    8ca8:	f8a0 1146 	strh.w	r1, [r0, #326]	; 0x146
    8cac:	4770      	bx	lr
    8cae:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
    8cb2:	b902      	cbnz	r2, 8cb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8cb4:	2100      	movs	r1, #0
    8cb6:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
    8cba:	4770      	bx	lr
    8cbc:	20000104 	.word	0x20000104
    8cc0:	490b      	ldr	r1, [pc, #44]	; (8cf0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x158>)
    8cc2:	78c2      	ldrb	r2, [r0, #3]
    8cc4:	6849      	ldr	r1, [r1, #4]
    8cc6:	2a01      	cmp	r2, #1
    8cc8:	d006      	beq.n	8cd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140>
    8cca:	b15a      	cbz	r2, 8ce4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14c>
    8ccc:	2a18      	cmp	r2, #24
    8cce:	d108      	bne.n	8ce2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a>
    8cd0:	f8b1 1124 	ldrh.w	r1, [r1, #292]	; 0x124
    8cd4:	f005 b94c 	b.w	df70 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    8cd8:	f8b1 1130 	ldrh.w	r1, [r1, #304]	; 0x130
    8cdc:	7241      	strb	r1, [r0, #9]
    8cde:	0a09      	lsrs	r1, r1, #8
    8ce0:	7281      	strb	r1, [r0, #10]
    8ce2:	4770      	bx	lr
    8ce4:	f8b1 1146 	ldrh.w	r1, [r1, #326]	; 0x146
    8ce8:	7341      	strb	r1, [r0, #13]
    8cea:	0a09      	lsrs	r1, r1, #8
    8cec:	7381      	strb	r1, [r0, #14]
    8cee:	4770      	bx	lr
    8cf0:	20000104 	.word	0x20000104
    8cf4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8cf6:	4c2a      	ldr	r4, [pc, #168]	; (8da0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x208>)
    8cf8:	2300      	movs	r3, #0
    8cfa:	4619      	mov	r1, r3
    8cfc:	6860      	ldr	r0, [r4, #4]
    8cfe:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8d02:	3078      	adds	r0, #120	; 0x78
    8d04:	f004 fe94 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d08:	2800      	cmp	r0, #0
    8d0a:	d048      	beq.n	8d9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8d0c:	6860      	ldr	r0, [r4, #4]
    8d0e:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    8d12:	f88d 1000 	strb.w	r1, [sp]
    8d16:	9900      	ldr	r1, [sp, #0]
    8d18:	9100      	str	r1, [sp, #0]
    8d1a:	f89d 1000 	ldrb.w	r1, [sp]
    8d1e:	2900      	cmp	r1, #0
    8d20:	d03d      	beq.n	8d9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8d22:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    8d26:	f004 fedc 	bl	dae2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8d2a:	2800      	cmp	r0, #0
    8d2c:	d137      	bne.n	8d9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8d2e:	6860      	ldr	r0, [r4, #4]
    8d30:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
    8d34:	280a      	cmp	r0, #10
    8d36:	d932      	bls.n	8d9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8d38:	4668      	mov	r0, sp
    8d3a:	f7fc ff9d 	bl	5c78 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    8d3e:	2800      	cmp	r0, #0
    8d40:	d02d      	beq.n	8d9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8d42:	6861      	ldr	r1, [r4, #4]
    8d44:	2205      	movs	r2, #5
    8d46:	4668      	mov	r0, sp
    8d48:	318e      	adds	r1, #142	; 0x8e
    8d4a:	f003 fc1b 	bl	c584 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8d4e:	2500      	movs	r5, #0
    8d50:	b310      	cbz	r0, 8d98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x200>
    8d52:	6860      	ldr	r0, [r4, #4]
    8d54:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8d58:	7808      	ldrb	r0, [r1, #0]
    8d5a:	b158      	cbz	r0, 8d74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1dc>
    8d5c:	2205      	movs	r2, #5
    8d5e:	4668      	mov	r0, sp
    8d60:	1c49      	adds	r1, r1, #1
    8d62:	f003 fc0f 	bl	c584 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8d66:	2800      	cmp	r0, #0
    8d68:	d119      	bne.n	8d9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8d6a:	6860      	ldr	r0, [r4, #4]
    8d6c:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8d70:	7800      	ldrb	r0, [r0, #0]
    8d72:	b940      	cbnz	r0, 8d86 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1ee>
    8d74:	6860      	ldr	r0, [r4, #4]
    8d76:	9900      	ldr	r1, [sp, #0]
    8d78:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8d7c:	f8c0 1001 	str.w	r1, [r0, #1]
    8d80:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8d84:	7141      	strb	r1, [r0, #5]
    8d86:	6860      	ldr	r0, [r4, #4]
    8d88:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8d8c:	7808      	ldrb	r0, [r1, #0]
    8d8e:	1c40      	adds	r0, r0, #1
    8d90:	7008      	strb	r0, [r1, #0]
    8d92:	2001      	movs	r0, #1
    8d94:	f000 fd04 	bl	97a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8d98:	6860      	ldr	r0, [r4, #4]
    8d9a:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
    8d9e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8da0:	20000104 	.word	0x20000104
    8da4:	4a0c      	ldr	r2, [pc, #48]	; (8dd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x240>)
    8da6:	7851      	ldrb	r1, [r2, #1]
    8da8:	b999      	cbnz	r1, 8dd2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8daa:	4611      	mov	r1, r2
    8dac:	2801      	cmp	r0, #1
    8dae:	6849      	ldr	r1, [r1, #4]
    8db0:	d008      	beq.n	8dc4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x22c>
    8db2:	7890      	ldrb	r0, [r2, #2]
    8db4:	0740      	lsls	r0, r0, #29
    8db6:	d503      	bpl.n	8dc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x228>
    8db8:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
    8dbc:	2807      	cmp	r0, #7
    8dbe:	d008      	beq.n	8dd2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8dc0:	2001      	movs	r0, #1
    8dc2:	4770      	bx	lr
    8dc4:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    8dc8:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    8dca:	4288      	cmp	r0, r1
    8dcc:	d801      	bhi.n	8dd2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8dce:	f7fe be85 	b.w	7adc <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    8dd2:	2000      	movs	r0, #0
    8dd4:	4770      	bx	lr
    8dd6:	0000      	.short	0x0000
    8dd8:	20000104 	.word	0x20000104
    8ddc:	b538      	push	{r3, r4, r5, lr}
    8dde:	4c87      	ldr	r4, [pc, #540]	; (8ffc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x464>)
    8de0:	6860      	ldr	r0, [r4, #4]
    8de2:	3078      	adds	r0, #120	; 0x78
    8de4:	f005 fd40 	bl	e868 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8de8:	2800      	cmp	r0, #0
    8dea:	d15b      	bne.n	8ea4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8dec:	6860      	ldr	r0, [r4, #4]
    8dee:	2300      	movs	r3, #0
    8df0:	2101      	movs	r1, #1
    8df2:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8df6:	3078      	adds	r0, #120	; 0x78
    8df8:	f004 fe1a 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8dfc:	2800      	cmp	r0, #0
    8dfe:	d151      	bne.n	8ea4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8e00:	6860      	ldr	r0, [r4, #4]
    8e02:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    8e06:	f88d 1000 	strb.w	r1, [sp]
    8e0a:	9900      	ldr	r1, [sp, #0]
    8e0c:	9100      	str	r1, [sp, #0]
    8e0e:	f89d 1000 	ldrb.w	r1, [sp]
    8e12:	b109      	cbz	r1, 8e18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x280>
    8e14:	2002      	movs	r0, #2
    8e16:	e038      	b.n	8e8a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8e18:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8e1c:	2300      	movs	r3, #0
    8e1e:	4619      	mov	r1, r3
    8e20:	3078      	adds	r0, #120	; 0x78
    8e22:	f004 fe05 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e26:	b128      	cbz	r0, 8e34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8e28:	6860      	ldr	r0, [r4, #4]
    8e2a:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    8e2e:	b108      	cbz	r0, 8e34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8e30:	2012      	movs	r0, #18
    8e32:	e02a      	b.n	8e8a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8e34:	6860      	ldr	r0, [r4, #4]
    8e36:	2500      	movs	r5, #0
    8e38:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8e3c:	2a12      	cmp	r2, #18
    8e3e:	d01d      	beq.n	8e7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e4>
    8e40:	dc04      	bgt.n	8e4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2b4>
    8e42:	2a03      	cmp	r2, #3
    8e44:	d025      	beq.n	8e92 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2fa>
    8e46:	2a11      	cmp	r2, #17
    8e48:	d104      	bne.n	8e54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2bc>
    8e4a:	e019      	b.n	8e80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e8>
    8e4c:	2a18      	cmp	r2, #24
    8e4e:	d01b      	beq.n	8e88 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f0>
    8e50:	2a23      	cmp	r2, #35	; 0x23
    8e52:	d028      	beq.n	8ea6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30e>
    8e54:	2300      	movs	r3, #0
    8e56:	2104      	movs	r1, #4
    8e58:	3078      	adds	r0, #120	; 0x78
    8e5a:	f004 fde9 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e5e:	2800      	cmp	r0, #0
    8e60:	d120      	bne.n	8ea4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8e62:	6860      	ldr	r0, [r4, #4]
    8e64:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    8e68:	2919      	cmp	r1, #25
    8e6a:	d07c      	beq.n	8f66 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3ce>
    8e6c:	dc22      	bgt.n	8eb4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31c>
    8e6e:	2901      	cmp	r1, #1
    8e70:	d02c      	beq.n	8ecc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x334>
    8e72:	2902      	cmp	r1, #2
    8e74:	d037      	beq.n	8ee6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34e>
    8e76:	2903      	cmp	r1, #3
    8e78:	d134      	bne.n	8ee4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34c>
    8e7a:	e022      	b.n	8ec2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x32a>
    8e7c:	200b      	movs	r0, #11
    8e7e:	e004      	b.n	8e8a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8e84:	f000 bba0 	b.w	95c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    8e88:	2006      	movs	r0, #6
    8e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8e8e:	f000 bc87 	b.w	97a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8e92:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    8e96:	7101      	strb	r1, [r0, #4]
    8e98:	2007      	movs	r0, #7
    8e9a:	f000 fc81 	bl	97a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8e9e:	6860      	ldr	r0, [r4, #4]
    8ea0:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    8ea4:	bd38      	pop	{r3, r4, r5, pc}
    8ea6:	2018      	movs	r0, #24
    8ea8:	f000 fc7a 	bl	97a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8eac:	6860      	ldr	r0, [r4, #4]
    8eae:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    8eb2:	bd38      	pop	{r3, r4, r5, pc}
    8eb4:	291d      	cmp	r1, #29
    8eb6:	d018      	beq.n	8eea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    8eb8:	291e      	cmp	r1, #30
    8eba:	d016      	beq.n	8eea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    8ebc:	2921      	cmp	r1, #33	; 0x21
    8ebe:	d176      	bne.n	8fae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8ec0:	e056      	b.n	8f70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d8>
    8ec2:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    8ec6:	7141      	strb	r1, [r0, #5]
    8ec8:	2007      	movs	r0, #7
    8eca:	e07e      	b.n	8fca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x432>
    8ecc:	200c      	movs	r0, #12
    8ece:	f000 fc67 	bl	97a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8ed2:	6860      	ldr	r0, [r4, #4]
    8ed4:	f820 5fba 	strh.w	r5, [r0, #186]!
    8ed8:	7981      	ldrb	r1, [r0, #6]
    8eda:	f041 0101 	orr.w	r1, r1, #1
    8ede:	7181      	strb	r1, [r0, #6]
    8ee0:	f800 5c34 	strb.w	r5, [r0, #-52]
    8ee4:	e063      	b.n	8fae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8ee6:	2013      	movs	r0, #19
    8ee8:	e037      	b.n	8f5a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c2>
    8eea:	f890 2133 	ldrb.w	r2, [r0, #307]	; 0x133
    8eee:	f88d 2000 	strb.w	r2, [sp]
    8ef2:	9a00      	ldr	r2, [sp, #0]
    8ef4:	9200      	str	r2, [sp, #0]
    8ef6:	f89d 2000 	ldrb.w	r2, [sp]
    8efa:	bbaa      	cbnz	r2, 8f68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d0>
    8efc:	f890 2132 	ldrb.w	r2, [r0, #306]	; 0x132
    8f00:	f88d 2000 	strb.w	r2, [sp]
    8f04:	9a00      	ldr	r2, [sp, #0]
    8f06:	9200      	str	r2, [sp, #0]
    8f08:	f89d 2000 	ldrb.w	r2, [sp]
    8f0c:	b1aa      	cbz	r2, 8f3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a2>
    8f0e:	2924      	cmp	r1, #36	; 0x24
    8f10:	d011      	beq.n	8f36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    8f12:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    8f16:	2924      	cmp	r1, #36	; 0x24
    8f18:	d00d      	beq.n	8f36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    8f1a:	2300      	movs	r3, #0
    8f1c:	f500 7293 	add.w	r2, r0, #294	; 0x126
    8f20:	f500 7199 	add.w	r1, r0, #306	; 0x132
    8f24:	f005 f92c 	bl	e180 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8f28:	6860      	ldr	r0, [r4, #4]
    8f2a:	211e      	movs	r1, #30
    8f2c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    8f30:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    8f34:	e003      	b.n	8f3e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a6>
    8f36:	2301      	movs	r3, #1
    8f38:	e7f0      	b.n	8f1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x384>
    8f3a:	291e      	cmp	r1, #30
    8f3c:	d137      	bne.n	8fae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8f3e:	6860      	ldr	r0, [r4, #4]
    8f40:	f005 f939 	bl	e1b6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8f44:	f000 f85c 	bl	9000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    8f48:	6861      	ldr	r1, [r4, #4]
    8f4a:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8f4e:	8bc2      	ldrh	r2, [r0, #30]
    8f50:	f821 2ffe 	strh.w	r2, [r1, #254]!
    8f54:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8f56:	8048      	strh	r0, [r1, #2]
    8f58:	2015      	movs	r0, #21
    8f5a:	f000 fc21 	bl	97a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8f5e:	6860      	ldr	r0, [r4, #4]
    8f60:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    8f64:	e001      	b.n	8f6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d2>
    8f66:	e02f      	b.n	8fc8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x430>
    8f68:	e021      	b.n	8fae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8f6a:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    8f6e:	e01e      	b.n	8fae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8f70:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    8f74:	2901      	cmp	r1, #1
    8f76:	d108      	bne.n	8f8a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3f2>
    8f78:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    8f7c:	f88d 1000 	strb.w	r1, [sp]
    8f80:	9900      	ldr	r1, [sp, #0]
    8f82:	9100      	str	r1, [sp, #0]
    8f84:	f89d 1000 	ldrb.w	r1, [sp]
    8f88:	b121      	cbz	r1, 8f94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3fc>
    8f8a:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    8f8e:	2902      	cmp	r1, #2
    8f90:	d005      	beq.n	8f9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x406>
    8f92:	e00c      	b.n	8fae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8f94:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    8f98:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    8f9c:	e002      	b.n	8fa4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x40c>
    8f9e:	f850 1f62 	ldr.w	r1, [r0, #98]!
    8fa2:	6840      	ldr	r0, [r0, #4]
    8fa4:	f000 fc1e 	bl	97e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    8fa8:	2018      	movs	r0, #24
    8faa:	f000 fbf9 	bl	97a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8fae:	6860      	ldr	r0, [r4, #4]
    8fb0:	3078      	adds	r0, #120	; 0x78
    8fb2:	f005 fc59 	bl	e868 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8fb6:	2800      	cmp	r0, #0
    8fb8:	f47f af7b 	bne.w	8eb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31a>
    8fbc:	6860      	ldr	r0, [r4, #4]
    8fbe:	3078      	adds	r0, #120	; 0x78
    8fc0:	f005 fc52 	bl	e868 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8fc4:	b128      	cbz	r0, 8fd2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x43a>
    8fc6:	e00f      	b.n	8fe8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    8fc8:	2011      	movs	r0, #17
    8fca:	f000 fbe9 	bl	97a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8fce:	6860      	ldr	r0, [r4, #4]
    8fd0:	e7c8      	b.n	8f64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3cc>
    8fd2:	6860      	ldr	r0, [r4, #4]
    8fd4:	2300      	movs	r3, #0
    8fd6:	4619      	mov	r1, r3
    8fd8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8fdc:	3078      	adds	r0, #120	; 0x78
    8fde:	f004 fd27 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fe2:	b108      	cbz	r0, 8fe8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    8fe4:	f000 fa44 	bl	9470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d8>
    8fe8:	6860      	ldr	r0, [r4, #4]
    8fea:	3078      	adds	r0, #120	; 0x78
    8fec:	f005 fc3c 	bl	e868 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8ff0:	2800      	cmp	r0, #0
    8ff2:	d1e1      	bne.n	8fb8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x420>
    8ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8ff8:	f7ff be7c 	b.w	8cf4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15c>
    8ffc:	20000104 	.word	0x20000104
    9000:	480a      	ldr	r0, [pc, #40]	; (902c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x494>)
    9002:	b510      	push	{r4, lr}
    9004:	6841      	ldr	r1, [r0, #4]
    9006:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    900a:	2801      	cmp	r0, #1
    900c:	d009      	beq.n	9022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x48a>
    900e:	8808      	ldrh	r0, [r1, #0]
    9010:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    9014:	312c      	adds	r1, #44	; 0x2c
    9016:	f005 f88f 	bl	e138 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    901a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    901e:	f001 baef 	b.w	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9022:	2002      	movs	r0, #2
    9024:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9028:	bd10      	pop	{r4, pc}
    902a:	0000      	.short	0x0000
    902c:	20000104 	.word	0x20000104
    9030:	b570      	push	{r4, r5, r6, lr}
    9032:	4c22      	ldr	r4, [pc, #136]	; (90bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x524>)
    9034:	f04f 0500 	mov.w	r5, #0
    9038:	8861      	ldrh	r1, [r4, #2]
    903a:	0748      	lsls	r0, r1, #29
    903c:	d510      	bpl.n	9060 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    903e:	6860      	ldr	r0, [r4, #4]
    9040:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9044:	2a03      	cmp	r2, #3
    9046:	d004      	beq.n	9052 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4ba>
    9048:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    904c:	2a07      	cmp	r2, #7
    904e:	d107      	bne.n	9060 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    9050:	e002      	b.n	9058 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c0>
    9052:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    9056:	e026      	b.n	90a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50e>
    9058:	2201      	movs	r2, #1
    905a:	7022      	strb	r2, [r4, #0]
    905c:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    9060:	0788      	lsls	r0, r1, #30
    9062:	d508      	bpl.n	9076 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4de>
    9064:	68a0      	ldr	r0, [r4, #8]
    9066:	78c0      	ldrb	r0, [r0, #3]
    9068:	2819      	cmp	r0, #25
    906a:	d21a      	bcs.n	90a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    906c:	4914      	ldr	r1, [pc, #80]	; (90c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x528>)
    906e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    9072:	b1b0      	cbz	r0, 90a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    9074:	4780      	blx	r0
    9076:	f000 f867 	bl	9148 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5b0>
    907a:	f000 f823 	bl	90c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x52c>
    907e:	4606      	mov	r6, r0
    9080:	7860      	ldrb	r0, [r4, #1]
    9082:	0700      	lsls	r0, r0, #28
    9084:	d515      	bpl.n	90b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    9086:	6860      	ldr	r0, [r4, #4]
    9088:	2300      	movs	r3, #0
    908a:	2105      	movs	r1, #5
    908c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9090:	3078      	adds	r0, #120	; 0x78
    9092:	f004 fccd 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9096:	b148      	cbz	r0, 90ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x514>
    9098:	6860      	ldr	r0, [r4, #4]
    909a:	2608      	movs	r6, #8
    909c:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    90a0:	e007      	b.n	90b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    90a2:	f240 61b1 	movw	r1, #1713	; 0x6b1
    90a6:	2036      	movs	r0, #54	; 0x36
    90a8:	f7fa fe76 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90ac:	2000      	movs	r0, #0
    90ae:	f7fb fe21 	bl	4cf4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    90b2:	6860      	ldr	r0, [r4, #4]
    90b4:	f005 fc08 	bl	e8c8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    90b8:	4630      	mov	r0, r6
    90ba:	bd70      	pop	{r4, r5, r6, pc}
    90bc:	20000104 	.word	0x20000104
    90c0:	20000178 	.word	0x20000178
    90c4:	b570      	push	{r4, r5, r6, lr}
    90c6:	4c1e      	ldr	r4, [pc, #120]	; (9140 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5a8>)
    90c8:	2000      	movs	r0, #0
    90ca:	78a1      	ldrb	r1, [r4, #2]
    90cc:	07c9      	lsls	r1, r1, #31
    90ce:	d01b      	beq.n	9108 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x570>
    90d0:	68e0      	ldr	r0, [r4, #12]
    90d2:	2300      	movs	r3, #0
    90d4:	2105      	movs	r1, #5
    90d6:	78c5      	ldrb	r5, [r0, #3]
    90d8:	6860      	ldr	r0, [r4, #4]
    90da:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    90de:	3078      	adds	r0, #120	; 0x78
    90e0:	f004 fca6 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    90e4:	b188      	cbz	r0, 910a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    90e6:	2d06      	cmp	r5, #6
    90e8:	d00f      	beq.n	910a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    90ea:	dc06      	bgt.n	90fa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x562>
    90ec:	2d02      	cmp	r5, #2
    90ee:	d00c      	beq.n	910a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    90f0:	2d04      	cmp	r5, #4
    90f2:	d00a      	beq.n	910a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    90f4:	2d05      	cmp	r5, #5
    90f6:	d106      	bne.n	9106 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x56e>
    90f8:	e007      	b.n	910a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    90fa:	2d0b      	cmp	r5, #11
    90fc:	d005      	beq.n	910a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    90fe:	2d0d      	cmp	r5, #13
    9100:	d003      	beq.n	910a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9102:	2d11      	cmp	r5, #17
    9104:	d001      	beq.n	910a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9106:	2008      	movs	r0, #8
    9108:	bd70      	pop	{r4, r5, r6, pc}
    910a:	68e0      	ldr	r0, [r4, #12]
    910c:	f7fc fe70 	bl	5df0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    9110:	b148      	cbz	r0, 9126 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    9112:	68e0      	ldr	r0, [r4, #12]
    9114:	78c0      	ldrb	r0, [r0, #3]
    9116:	2819      	cmp	r0, #25
    9118:	d205      	bcs.n	9126 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    911a:	490a      	ldr	r1, [pc, #40]	; (9144 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ac>)
    911c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    9120:	b108      	cbz	r0, 9126 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    9122:	4780      	blx	r0
    9124:	e002      	b.n	912c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x594>
    9126:	2000      	movs	r0, #0
    9128:	f000 fbdc 	bl	98e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    912c:	6861      	ldr	r1, [r4, #4]
    912e:	e9f1 2336 	ldrd	r2, r3, [r1, #216]!	; 0xd8
    9132:	1c52      	adds	r2, r2, #1
    9134:	f143 0300 	adc.w	r3, r3, #0
    9138:	e9c1 2300 	strd	r2, r3, [r1]
    913c:	bd70      	pop	{r4, r5, r6, pc}
    913e:	0000      	.short	0x0000
    9140:	20000104 	.word	0x20000104
    9144:	20000114 	.word	0x20000114
    9148:	b510      	push	{r4, lr}
    914a:	4c11      	ldr	r4, [pc, #68]	; (9190 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5f8>)
    914c:	78a0      	ldrb	r0, [r4, #2]
    914e:	0700      	lsls	r0, r0, #28
    9150:	d517      	bpl.n	9182 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    9152:	6860      	ldr	r0, [r4, #4]
    9154:	2100      	movs	r1, #0
    9156:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    915a:	f001 f97b 	bl	a454 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    915e:	6860      	ldr	r0, [r4, #4]
    9160:	3078      	adds	r0, #120	; 0x78
    9162:	f005 fb81 	bl	e868 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9166:	b168      	cbz	r0, 9184 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ec>
    9168:	6860      	ldr	r0, [r4, #4]
    916a:	21fe      	movs	r1, #254	; 0xfe
    916c:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    9170:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    9174:	2908      	cmp	r1, #8
    9176:	d104      	bne.n	9182 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    9178:	2102      	movs	r1, #2
    917a:	7021      	strb	r1, [r4, #0]
    917c:	2100      	movs	r1, #0
    917e:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    9182:	bd10      	pop	{r4, pc}
    9184:	f240 61bd 	movw	r1, #1725	; 0x6bd
    9188:	2036      	movs	r0, #54	; 0x36
    918a:	f7fa fe05 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    918e:	0000      	.short	0x0000
    9190:	20000104 	.word	0x20000104
    9194:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9196:	4605      	mov	r5, r0
    9198:	4668      	mov	r0, sp
    919a:	f7fb fc09 	bl	49b0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    919e:	b318      	cbz	r0, 91e8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x650>
    91a0:	2222      	movs	r2, #34	; 0x22
    91a2:	2100      	movs	r1, #0
    91a4:	9800      	ldr	r0, [sp, #0]
    91a6:	f003 fa79 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    91aa:	2103      	movs	r1, #3
    91ac:	9800      	ldr	r0, [sp, #0]
    91ae:	f004 fec5 	bl	df3c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    91b2:	9800      	ldr	r0, [sp, #0]
    91b4:	7801      	ldrb	r1, [r0, #0]
    91b6:	f021 0110 	bic.w	r1, r1, #16
    91ba:	7001      	strb	r1, [r0, #0]
    91bc:	4629      	mov	r1, r5
    91be:	f7fc fe27 	bl	5e10 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    91c2:	2100      	movs	r1, #0
    91c4:	4c6a      	ldr	r4, [pc, #424]	; (9370 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d8>)
    91c6:	2d19      	cmp	r5, #25
    91c8:	d270      	bcs.n	92ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x714>
    91ca:	e8df f005 	tbb	[pc, r5]
    91ce:	1c24      	.short	0x1c24
    91d0:	c9c94c10 	.word	0xc9c94c10
    91d4:	c97016c2 	.word	0xc97016c2
    91d8:	c964c2c2 	.word	0xc964c2c2
    91dc:	b6c9c9c9 	.word	0xb6c9c9c9
    91e0:	8181c2c2 	.word	0x8181c2c2
    91e4:	00a3c99a 	.word	0x00a3c99a
    91e8:	f640 014f 	movw	r1, #2127	; 0x84f
    91ec:	e0bd      	b.n	936a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    91ee:	6860      	ldr	r0, [r4, #4]
    91f0:	9900      	ldr	r1, [sp, #0]
    91f2:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
    91f6:	7108      	strb	r0, [r1, #4]
    91f8:	e0ab      	b.n	9352 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    91fa:	6861      	ldr	r1, [r4, #4]
    91fc:	9800      	ldr	r0, [sp, #0]
    91fe:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    9202:	7101      	strb	r1, [r0, #4]
    9204:	e0a5      	b.n	9352 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9206:	6860      	ldr	r0, [r4, #4]
    9208:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    920c:	9800      	ldr	r0, [sp, #0]
    920e:	1c49      	adds	r1, r1, #1
    9210:	f004 fe74 	bl	defc <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
    9214:	e09d      	b.n	9352 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9216:	6860      	ldr	r0, [r4, #4]
    9218:	9d00      	ldr	r5, [sp, #0]
    921a:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    921e:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    9222:	f004 fd88 	bl	dd36 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    9226:	7128      	strb	r0, [r5, #4]
    9228:	6860      	ldr	r0, [r4, #4]
    922a:	9d00      	ldr	r5, [sp, #0]
    922c:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
    9230:	c803      	ldmia	r0, {r0, r1}
    9232:	f004 fd75 	bl	dd20 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    9236:	7168      	strb	r0, [r5, #5]
    9238:	0a00      	lsrs	r0, r0, #8
    923a:	71a8      	strb	r0, [r5, #6]
    923c:	6860      	ldr	r0, [r4, #4]
    923e:	9d00      	ldr	r5, [sp, #0]
    9240:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
    9244:	f004 fbdb 	bl	d9fe <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    9248:	71e8      	strb	r0, [r5, #7]
    924a:	0a00      	lsrs	r0, r0, #8
    924c:	7228      	strb	r0, [r5, #8]
    924e:	6862      	ldr	r2, [r4, #4]
    9250:	9800      	ldr	r0, [sp, #0]
    9252:	f8b2 1154 	ldrh.w	r1, [r2, #340]	; 0x154
    9256:	7241      	strb	r1, [r0, #9]
    9258:	0a09      	lsrs	r1, r1, #8
    925a:	7281      	strb	r1, [r0, #10]
    925c:	f8b2 1156 	ldrh.w	r1, [r2, #342]	; 0x156
    9260:	f004 fe51 	bl	df06 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
    9264:	e075      	b.n	9352 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9266:	6861      	ldr	r1, [r4, #4]
    9268:	9800      	ldr	r0, [sp, #0]
    926a:	f201 115b 	addw	r1, r1, #347	; 0x15b
    926e:	f004 fe55 	bl	df1c <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
    9272:	6861      	ldr	r1, [r4, #4]
    9274:	9800      	ldr	r0, [sp, #0]
    9276:	f201 1163 	addw	r1, r1, #355	; 0x163
    927a:	f004 fe48 	bl	df0e <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
    927e:	6861      	ldr	r1, [r4, #4]
    9280:	9800      	ldr	r0, [sp, #0]
    9282:	f201 1175 	addw	r1, r1, #373	; 0x175
    9286:	f004 fe4e 	bl	df26 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
    928a:	6861      	ldr	r1, [r4, #4]
    928c:	9800      	ldr	r0, [sp, #0]
    928e:	31f0      	adds	r1, #240	; 0xf0
    9290:	f004 fe40 	bl	df14 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
    9294:	e05d      	b.n	9352 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9296:	9800      	ldr	r0, [sp, #0]
    9298:	220b      	movs	r2, #11
    929a:	7102      	strb	r2, [r0, #4]
    929c:	2259      	movs	r2, #89	; 0x59
    929e:	7142      	strb	r2, [r0, #5]
    92a0:	7181      	strb	r1, [r0, #6]
    92a2:	21b0      	movs	r1, #176	; 0xb0
    92a4:	71c1      	strb	r1, [r0, #7]
    92a6:	2112      	movs	r1, #18
    92a8:	7201      	strb	r1, [r0, #8]
    92aa:	e052      	b.n	9352 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    92ac:	e058      	b.n	9360 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7c8>
    92ae:	9101      	str	r1, [sp, #4]
    92b0:	9102      	str	r1, [sp, #8]
    92b2:	f001 fec7 	bl	b044 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    92b6:	f644 112f 	movw	r1, #18735	; 0x492f
    92ba:	4008      	ands	r0, r1
    92bc:	f88d 0004 	strb.w	r0, [sp, #4]
    92c0:	0a00      	lsrs	r0, r0, #8
    92c2:	f88d 0005 	strb.w	r0, [sp, #5]
    92c6:	a901      	add	r1, sp, #4
    92c8:	9800      	ldr	r0, [sp, #0]
    92ca:	f004 fe32 	bl	df32 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    92ce:	e040      	b.n	9352 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    92d0:	6860      	ldr	r0, [r4, #4]
    92d2:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    92d6:	9800      	ldr	r0, [sp, #0]
    92d8:	f004 fe42 	bl	df60 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    92dc:	6860      	ldr	r0, [r4, #4]
    92de:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    92e2:	9800      	ldr	r0, [sp, #0]
    92e4:	f004 fe40 	bl	df68 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    92e8:	6860      	ldr	r0, [r4, #4]
    92ea:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    92ee:	9800      	ldr	r0, [sp, #0]
    92f0:	f004 fe2e 	bl	df50 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    92f4:	6860      	ldr	r0, [r4, #4]
    92f6:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    92fa:	9800      	ldr	r0, [sp, #0]
    92fc:	f004 fe2c 	bl	df58 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9300:	e027      	b.n	9352 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9302:	6861      	ldr	r1, [r4, #4]
    9304:	9800      	ldr	r0, [sp, #0]
    9306:	f891 2140 	ldrb.w	r2, [r1, #320]	; 0x140
    930a:	7102      	strb	r2, [r0, #4]
    930c:	f891 1141 	ldrb.w	r1, [r1, #321]	; 0x141
    9310:	7141      	strb	r1, [r0, #5]
    9312:	e01e      	b.n	9352 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9314:	6860      	ldr	r0, [r4, #4]
    9316:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    931a:	f004 fc2d 	bl	db78 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    931e:	4601      	mov	r1, r0
    9320:	9800      	ldr	r0, [sp, #0]
    9322:	f004 fe29 	bl	df78 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
    9326:	6860      	ldr	r0, [r4, #4]
    9328:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    932c:	f004 fc24 	bl	db78 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    9330:	4601      	mov	r1, r0
    9332:	9800      	ldr	r0, [sp, #0]
    9334:	f004 fe0a 	bl	df4c <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    9338:	e00b      	b.n	9352 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    933a:	6860      	ldr	r0, [r4, #4]
    933c:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    9340:	9800      	ldr	r0, [sp, #0]
    9342:	f004 fdd7 	bl	def4 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    9346:	6860      	ldr	r0, [r4, #4]
    9348:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    934c:	9800      	ldr	r0, [sp, #0]
    934e:	f004 fdd3 	bl	def8 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    9352:	f7fb fb07 	bl	4964 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    9356:	b130      	cbz	r0, 9366 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ce>
    9358:	9800      	ldr	r0, [sp, #0]
    935a:	f7ff fcb1 	bl	8cc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    935e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9360:	f640 01db 	movw	r1, #2267	; 0x8db
    9364:	e001      	b.n	936a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    9366:	f640 01e1 	movw	r1, #2273	; 0x8e1
    936a:	2036      	movs	r0, #54	; 0x36
    936c:	f7fa fd14 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9370:	20000104 	.word	0x20000104
    9374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9378:	4c27      	ldr	r4, [pc, #156]	; (9418 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x880>)
    937a:	4680      	mov	r8, r0
    937c:	460d      	mov	r5, r1
    937e:	8860      	ldrh	r0, [r4, #2]
    9380:	f04f 0600 	mov.w	r6, #0
    9384:	05c1      	lsls	r1, r0, #23
    9386:	4620      	mov	r0, r4
    9388:	6840      	ldr	r0, [r0, #4]
    938a:	d502      	bpl.n	9392 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7fa>
    938c:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
    9390:	e004      	b.n	939c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x804>
    9392:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
    9396:	1c49      	adds	r1, r1, #1
    9398:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    939c:	f005 faef 	bl	e97e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    93a0:	2701      	movs	r7, #1
    93a2:	b1e0      	cbz	r0, 93de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    93a4:	8860      	ldrh	r0, [r4, #2]
    93a6:	0500      	lsls	r0, r0, #20
    93a8:	d506      	bpl.n	93b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    93aa:	6860      	ldr	r0, [r4, #4]
    93ac:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    93b0:	b111      	cbz	r1, 93b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    93b2:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    93b6:	e012      	b.n	93de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    93b8:	6860      	ldr	r0, [r4, #4]
    93ba:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    93be:	1c49      	adds	r1, r1, #1
    93c0:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    93c4:	f005 fa71 	bl	e8aa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    93c8:	6860      	ldr	r0, [r4, #4]
    93ca:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    93ce:	4291      	cmp	r1, r2
    93d0:	d305      	bcc.n	93de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    93d2:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    93d6:	f880 718e 	strb.w	r7, [r0, #398]	; 0x18e
    93da:	f001 f911 	bl	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    93de:	8860      	ldrh	r0, [r4, #2]
    93e0:	f410 7f40 	tst.w	r0, #768	; 0x300
    93e4:	d008      	beq.n	93f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    93e6:	6860      	ldr	r0, [r4, #4]
    93e8:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    93ec:	b921      	cbnz	r1, 93f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    93ee:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    93f2:	2101      	movs	r1, #1
    93f4:	f7fe fb94 	bl	7b20 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    93f8:	ea58 0005 	orrs.w	r0, r8, r5
    93fc:	d104      	bne.n	9408 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x870>
    93fe:	f7ff fe17 	bl	9030 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x498>
    9402:	4605      	mov	r5, r0
    9404:	f7ff fcea 	bl	8ddc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x244>
    9408:	4629      	mov	r1, r5
    940a:	4640      	mov	r0, r8
    940c:	f000 ff7a 	bl	a304 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x176c>
    9410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9414:	f7fb ba90 	b.w	4938 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9418:	20000104 	.word	0x20000104
    941c:	4813      	ldr	r0, [pc, #76]	; (946c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d4>)
    941e:	6840      	ldr	r0, [r0, #4]
    9420:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    9424:	b129      	cbz	r1, 9432 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x89a>
    9426:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    942a:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    942e:	4291      	cmp	r1, r2
    9430:	d215      	bcs.n	945e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    9432:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    9436:	b129      	cbz	r1, 9444 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ac>
    9438:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
    943c:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    9440:	4291      	cmp	r1, r2
    9442:	d20c      	bcs.n	945e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    9444:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    9448:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    944c:	428a      	cmp	r2, r1
    944e:	d206      	bcs.n	945e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    9450:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    9454:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    9458:	b11a      	cbz	r2, 9462 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ca>
    945a:	4288      	cmp	r0, r1
    945c:	d303      	bcc.n	9466 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ce>
    945e:	2001      	movs	r0, #1
    9460:	4770      	bx	lr
    9462:	2806      	cmp	r0, #6
    9464:	d2fb      	bcs.n	945e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    9466:	2000      	movs	r0, #0
    9468:	4770      	bx	lr
    946a:	0000      	.short	0x0000
    946c:	20000104 	.word	0x20000104
    9470:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9472:	4c54      	ldr	r4, [pc, #336]	; (95c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2c>)
    9474:	6860      	ldr	r0, [r4, #4]
    9476:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    947a:	f88d 1000 	strb.w	r1, [sp]
    947e:	9900      	ldr	r1, [sp, #0]
    9480:	9100      	str	r1, [sp, #0]
    9482:	f89d 1000 	ldrb.w	r1, [sp]
    9486:	b129      	cbz	r1, 9494 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8fc>
    9488:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    948c:	f004 fb29 	bl	dae2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9490:	2800      	cmp	r0, #0
    9492:	d00a      	beq.n	94aa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x912>
    9494:	6860      	ldr	r0, [r4, #4]
    9496:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    949a:	b181      	cbz	r1, 94be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x926>
    949c:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    94a0:	b149      	cbz	r1, 94b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x91e>
    94a2:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
    94a6:	b108      	cbz	r0, 94ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x914>
    94a8:	200a      	movs	r0, #10
    94aa:	e087      	b.n	95bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    94ac:	f44f 61e7 	mov.w	r1, #1848	; 0x738
    94b0:	2036      	movs	r0, #54	; 0x36
    94b2:	f7fa fc71 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94b6:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    94ba:	f000 b885 	b.w	95c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    94be:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
    94c2:	b109      	cbz	r1, 94c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x930>
    94c4:	2008      	movs	r0, #8
    94c6:	e079      	b.n	95bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    94c8:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    94cc:	2500      	movs	r5, #0
    94ce:	b181      	cbz	r1, 94f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x95a>
    94d0:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    94d4:	0780      	lsls	r0, r0, #30
    94d6:	d10b      	bne.n	94f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    94d8:	200c      	movs	r0, #12
    94da:	f000 f961 	bl	97a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    94de:	6860      	ldr	r0, [r4, #4]
    94e0:	2101      	movs	r1, #1
    94e2:	f820 5fb4 	strh.w	r5, [r0, #180]!
    94e6:	7101      	strb	r1, [r0, #4]
    94e8:	7b01      	ldrb	r1, [r0, #12]
    94ea:	f041 0101 	orr.w	r1, r1, #1
    94ee:	7301      	strb	r1, [r0, #12]
    94f0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    94f2:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    94f6:	f88d 1004 	strb.w	r1, [sp, #4]
    94fa:	9901      	ldr	r1, [sp, #4]
    94fc:	9101      	str	r1, [sp, #4]
    94fe:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9502:	b141      	cbz	r1, 9516 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x97e>
    9504:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    9508:	f88d 1000 	strb.w	r1, [sp]
    950c:	9900      	ldr	r1, [sp, #0]
    950e:	9100      	str	r1, [sp, #0]
    9510:	f89d 1000 	ldrb.w	r1, [sp]
    9514:	b391      	cbz	r1, 957c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9e4>
    9516:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    951a:	2901      	cmp	r1, #1
    951c:	d1e8      	bne.n	94f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    951e:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    9522:	f88d 1000 	strb.w	r1, [sp]
    9526:	9900      	ldr	r1, [sp, #0]
    9528:	9100      	str	r1, [sp, #0]
    952a:	f89d 1000 	ldrb.w	r1, [sp]
    952e:	2900      	cmp	r1, #0
    9530:	d1de      	bne.n	94f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9532:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9536:	f004 fad4 	bl	dae2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    953a:	2800      	cmp	r0, #0
    953c:	d1d8      	bne.n	94f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    953e:	6860      	ldr	r0, [r4, #4]
    9540:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    9544:	f005 f998 	bl	e878 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9548:	4605      	mov	r5, r0
    954a:	6860      	ldr	r0, [r4, #4]
    954c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    9550:	f005 f992 	bl	e878 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9554:	4606      	mov	r6, r0
    9556:	6860      	ldr	r0, [r4, #4]
    9558:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    955c:	4628      	mov	r0, r5
    955e:	f005 f996 	bl	e88e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    9562:	b350      	cbz	r0, 95ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    9564:	6860      	ldr	r0, [r4, #4]
    9566:	f890 1141 	ldrb.w	r1, [r0, #321]	; 0x141
    956a:	4630      	mov	r0, r6
    956c:	f005 f98f 	bl	e88e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    9570:	b318      	cbz	r0, 95ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    9572:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    9576:	2000      	movs	r0, #0
    9578:	f000 b8ee 	b.w	9758 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    957c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9580:	2924      	cmp	r1, #36	; 0x24
    9582:	d018      	beq.n	95b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    9584:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9588:	2924      	cmp	r1, #36	; 0x24
    958a:	d014      	beq.n	95b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    958c:	f05f 0300 	movs.w	r3, #0
    9590:	f500 7293 	add.w	r2, r0, #294	; 0x126
    9594:	f500 7199 	add.w	r1, r0, #306	; 0x132
    9598:	f004 fdf2 	bl	e180 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    959c:	6860      	ldr	r0, [r4, #4]
    959e:	4602      	mov	r2, r0
    95a0:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    95a4:	f102 012c 	add.w	r1, r2, #44	; 0x2c
    95a8:	8bc8      	ldrh	r0, [r1, #30]
    95aa:	f822 0ffe 	strh.w	r0, [r2, #254]!
    95ae:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    95b0:	8050      	strh	r0, [r2, #2]
    95b2:	2014      	movs	r0, #20
    95b4:	e002      	b.n	95bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    95b6:	2301      	movs	r3, #1
    95b8:	e7ea      	b.n	9590 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9f8>
    95ba:	2016      	movs	r0, #22
    95bc:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    95c0:	f000 b8ee 	b.w	97a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    95c4:	20000104 	.word	0x20000104
    95c8:	b510      	push	{r4, lr}
    95ca:	4c1e      	ldr	r4, [pc, #120]	; (9644 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaac>)
    95cc:	6862      	ldr	r2, [r4, #4]
    95ce:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    95d2:	2808      	cmp	r0, #8
    95d4:	d20d      	bcs.n	95f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa5a>
    95d6:	f1c0 0108 	rsb	r1, r0, #8
    95da:	4410      	add	r0, r2
    95dc:	b2c9      	uxtb	r1, r1
    95de:	f200 1075 	addw	r0, r0, #373	; 0x175
    95e2:	f7fa fc67 	bl	3eb4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    95e6:	6861      	ldr	r1, [r4, #4]
    95e8:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    95ec:	4410      	add	r0, r2
    95ee:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    95f2:	6862      	ldr	r2, [r4, #4]
    95f4:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    95f8:	3808      	subs	r0, #8
    95fa:	2804      	cmp	r0, #4
    95fc:	d20c      	bcs.n	9618 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa80>
    95fe:	f1c0 0104 	rsb	r1, r0, #4
    9602:	4410      	add	r0, r2
    9604:	b2c9      	uxtb	r1, r1
    9606:	30f0      	adds	r0, #240	; 0xf0
    9608:	f7fa fc54 	bl	3eb4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    960c:	6861      	ldr	r1, [r4, #4]
    960e:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    9612:	4410      	add	r0, r2
    9614:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    9618:	6860      	ldr	r0, [r4, #4]
    961a:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    961e:	290c      	cmp	r1, #12
    9620:	d30e      	bcc.n	9640 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaa8>
    9622:	d005      	beq.n	9630 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa98>
    9624:	f640 1131 	movw	r1, #2353	; 0x931
    9628:	f04f 0036 	mov.w	r0, #54	; 0x36
    962c:	f7fa fbb4 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9630:	2100      	movs	r1, #0
    9632:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    9636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    963a:	2003      	movs	r0, #3
    963c:	f000 b8b0 	b.w	97a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9640:	bd10      	pop	{r4, pc}
    9642:	0000      	.short	0x0000
    9644:	20000104 	.word	0x20000104
    9648:	b570      	push	{r4, r5, r6, lr}
    964a:	4b20      	ldr	r3, [pc, #128]	; (96cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb34>)
    964c:	4602      	mov	r2, r0
    964e:	460c      	mov	r4, r1
    9650:	8858      	ldrh	r0, [r3, #2]
    9652:	4310      	orrs	r0, r2
    9654:	8058      	strh	r0, [r3, #2]
    9656:	4618      	mov	r0, r3
    9658:	0791      	lsls	r1, r2, #30
    965a:	6840      	ldr	r0, [r0, #4]
    965c:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    9660:	d507      	bpl.n	9672 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xada>
    9662:	b121      	cbz	r1, 966e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xad6>
    9664:	f640 21c5 	movw	r1, #2757	; 0xac5
    9668:	2036      	movs	r0, #54	; 0x36
    966a:	f7fa fb95 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    966e:	609c      	str	r4, [r3, #8]
    9670:	e003      	b.n	967a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae2>
    9672:	b101      	cbz	r1, 9676 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xade>
    9674:	60dc      	str	r4, [r3, #12]
    9676:	0791      	lsls	r1, r2, #30
    9678:	d515      	bpl.n	96a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    967a:	78e1      	ldrb	r1, [r4, #3]
    967c:	2906      	cmp	r1, #6
    967e:	d002      	beq.n	9686 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaee>
    9680:	290b      	cmp	r1, #11
    9682:	d110      	bne.n	96a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    9684:	e008      	b.n	9698 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb00>
    9686:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    968a:	2918      	cmp	r1, #24
    968c:	d10b      	bne.n	96a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    968e:	2100      	movs	r1, #0
    9690:	e9c0 1136 	strd	r1, r1, [r0, #216]	; 0xd8
    9694:	2101      	movs	r1, #1
    9696:	e004      	b.n	96a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0a>
    9698:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    969c:	2912      	cmp	r1, #18
    969e:	d102      	bne.n	96a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    96a0:	2100      	movs	r1, #0
    96a2:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
    96a6:	0691      	lsls	r1, r2, #26
    96a8:	d501      	bpl.n	96ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb16>
    96aa:	2108      	movs	r1, #8
    96ac:	7059      	strb	r1, [r3, #1]
    96ae:	0611      	lsls	r1, r2, #24
    96b0:	d50a      	bpl.n	96c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb30>
    96b2:	8a82      	ldrh	r2, [r0, #20]
    96b4:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    96b8:	4620      	mov	r0, r4
    96ba:	f7ff fae3 	bl	8c84 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>
    96be:	4620      	mov	r0, r4
    96c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    96c4:	f7ff bafc 	b.w	8cc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    96c8:	bd70      	pop	{r4, r5, r6, pc}
    96ca:	0000      	.short	0x0000
    96cc:	20000104 	.word	0x20000104
    96d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    96d4:	4c1f      	ldr	r4, [pc, #124]	; (9754 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbbc>)
    96d6:	2501      	movs	r5, #1
    96d8:	6862      	ldr	r2, [r4, #4]
    96da:	f892 0126 	ldrb.w	r0, [r2, #294]	; 0x126
    96de:	b908      	cbnz	r0, 96e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb4c>
    96e0:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    96e4:	f892 1127 	ldrb.w	r1, [r2, #295]	; 0x127
    96e8:	b909      	cbnz	r1, 96ee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb56>
    96ea:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    96ee:	f882 006a 	strb.w	r0, [r2, #106]	; 0x6a
    96f2:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    96f6:	3262      	adds	r2, #98	; 0x62
    96f8:	2001      	movs	r0, #1
    96fa:	7290      	strb	r0, [r2, #10]
    96fc:	2000      	movs	r0, #0
    96fe:	f000 f82b 	bl	9758 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9702:	6860      	ldr	r0, [r4, #4]
    9704:	302c      	adds	r0, #44	; 0x2c
    9706:	f004 fdaa 	bl	e25e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    970a:	4606      	mov	r6, r0
    970c:	6860      	ldr	r0, [r4, #4]
    970e:	f004 fd52 	bl	e1b6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9712:	b1c0      	cbz	r0, 9746 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    9714:	6860      	ldr	r0, [r4, #4]
    9716:	302c      	adds	r0, #44	; 0x2c
    9718:	f004 fda1 	bl	e25e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    971c:	6861      	ldr	r1, [r4, #4]
    971e:	4607      	mov	r7, r0
    9720:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    9724:	8808      	ldrh	r0, [r1, #0]
    9726:	312c      	adds	r1, #44	; 0x2c
    9728:	f004 fd06 	bl	e138 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    972c:	42be      	cmp	r6, r7
    972e:	d20a      	bcs.n	9746 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    9730:	f7f7 ff54 	bl	15dc <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    9734:	4601      	mov	r1, r0
    9736:	1bb8      	subs	r0, r7, r6
    9738:	2864      	cmp	r0, #100	; 0x64
    973a:	d200      	bcs.n	973e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba6>
    973c:	2064      	movs	r0, #100	; 0x64
    973e:	f7f7 fe41 	bl	13c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9742:	b100      	cbz	r0, 9746 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    9744:	2500      	movs	r5, #0
    9746:	2104      	movs	r1, #4
    9748:	6860      	ldr	r0, [r4, #4]
    974a:	f7fe f9e9 	bl	7b20 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    974e:	4628      	mov	r0, r5
    9750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9754:	20000104 	.word	0x20000104
    9758:	b510      	push	{r4, lr}
    975a:	4c10      	ldr	r4, [pc, #64]	; (979c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc04>)
    975c:	6861      	ldr	r1, [r4, #4]
    975e:	880a      	ldrh	r2, [r1, #0]
    9760:	f8a1 21b4 	strh.w	r2, [r1, #436]	; 0x1b4
    9764:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
    9768:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    976c:	f005 f884 	bl	e878 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9770:	6861      	ldr	r1, [r4, #4]
    9772:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    9776:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    977a:	f005 f87d 	bl	e878 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    977e:	6862      	ldr	r2, [r4, #4]
    9780:	f502 71d8 	add.w	r1, r2, #432	; 0x1b0
    9784:	f882 01b7 	strb.w	r0, [r2, #439]	; 0x1b7
    9788:	2001      	movs	r0, #1
    978a:	7008      	strb	r0, [r1, #0]
    978c:	2000      	movs	r0, #0
    978e:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
    9792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9796:	f000 bf33 	b.w	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    979a:	0000      	.short	0x0000
    979c:	20000104 	.word	0x20000104
    97a0:	490f      	ldr	r1, [pc, #60]	; (97e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc48>)
    97a2:	280c      	cmp	r0, #12
    97a4:	6849      	ldr	r1, [r1, #4]
    97a6:	f881 00fc 	strb.w	r0, [r1, #252]	; 0xfc
    97aa:	d014      	beq.n	97d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    97ac:	2813      	cmp	r0, #19
    97ae:	d012      	beq.n	97d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    97b0:	2818      	cmp	r0, #24
    97b2:	d010      	beq.n	97d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    97b4:	2200      	movs	r2, #0
    97b6:	2811      	cmp	r0, #17
    97b8:	d00e      	beq.n	97d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    97ba:	2807      	cmp	r0, #7
    97bc:	d00b      	beq.n	97d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    97be:	2815      	cmp	r0, #21
    97c0:	d00a      	beq.n	97d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    97c2:	2801      	cmp	r0, #1
    97c4:	d007      	beq.n	97d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    97c6:	2800      	cmp	r0, #0
    97c8:	d005      	beq.n	97d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    97ca:	2802      	cmp	r0, #2
    97cc:	d003      	beq.n	97d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    97ce:	f821 2fb4 	strh.w	r2, [r1, #180]!
    97d2:	2001      	movs	r0, #1
    97d4:	7108      	strb	r0, [r1, #4]
    97d6:	4770      	bx	lr
    97d8:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    97dc:	4770      	bx	lr
    97de:	0000      	.short	0x0000
    97e0:	20000104 	.word	0x20000104
    97e4:	b538      	push	{r3, r4, r5, lr}
    97e6:	4c11      	ldr	r4, [pc, #68]	; (982c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc94>)
    97e8:	6862      	ldr	r2, [r4, #4]
    97ea:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    97ee:	f8ad 2000 	strh.w	r2, [sp]
    97f2:	f004 f9f6 	bl	dbe2 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    97f6:	f89d 3000 	ldrb.w	r3, [sp]
    97fa:	b2c2      	uxtb	r2, r0
    97fc:	2100      	movs	r1, #0
    97fe:	4293      	cmp	r3, r2
    9800:	d003      	beq.n	980a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc72>
    9802:	6863      	ldr	r3, [r4, #4]
    9804:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    9808:	e002      	b.n	9810 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc78>
    980a:	6862      	ldr	r2, [r4, #4]
    980c:	f882 1126 	strb.w	r1, [r2, #294]	; 0x126
    9810:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9814:	f3c0 2007 	ubfx	r0, r0, #8, #8
    9818:	4282      	cmp	r2, r0
    981a:	d003      	beq.n	9824 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc8c>
    981c:	6861      	ldr	r1, [r4, #4]
    981e:	f881 0127 	strb.w	r0, [r1, #295]	; 0x127
    9822:	bd38      	pop	{r3, r4, r5, pc}
    9824:	6860      	ldr	r0, [r4, #4]
    9826:	f880 1127 	strb.w	r1, [r0, #295]	; 0x127
    982a:	bd38      	pop	{r3, r4, r5, pc}
    982c:	20000104 	.word	0x20000104
    9830:	b510      	push	{r4, lr}
    9832:	4c0c      	ldr	r4, [pc, #48]	; (9864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xccc>)
    9834:	6861      	ldr	r1, [r4, #4]
    9836:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    983a:	2813      	cmp	r0, #19
    983c:	d001      	beq.n	9842 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcaa>
    983e:	2002      	movs	r0, #2
    9840:	bd10      	pop	{r4, pc}
    9842:	f201 117d 	addw	r1, r1, #381	; 0x17d
    9846:	68e0      	ldr	r0, [r4, #12]
    9848:	f004 fb06 	bl	de58 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>
    984c:	6861      	ldr	r1, [r4, #4]
    984e:	68e0      	ldr	r0, [r4, #12]
    9850:	31f4      	adds	r1, #244	; 0xf4
    9852:	f004 fafe 	bl	de52 <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>
    9856:	6861      	ldr	r1, [r4, #4]
    9858:	2016      	movs	r0, #22
    985a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    985e:	2000      	movs	r0, #0
    9860:	bd10      	pop	{r4, pc}
    9862:	0000      	.short	0x0000
    9864:	20000104 	.word	0x20000104
    9868:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    986a:	4c1d      	ldr	r4, [pc, #116]	; (98e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd48>)
    986c:	2300      	movs	r3, #0
    986e:	2107      	movs	r1, #7
    9870:	6860      	ldr	r0, [r4, #4]
    9872:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9876:	3078      	adds	r0, #120	; 0x78
    9878:	f004 f8da 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    987c:	b370      	cbz	r0, 98dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd44>
    987e:	4669      	mov	r1, sp
    9880:	68e0      	ldr	r0, [r4, #12]
    9882:	f004 faee 	bl	de62 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    9886:	f001 fbdd 	bl	b044 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    988a:	f644 112f 	movw	r1, #18735	; 0x492f
    988e:	4008      	ands	r0, r1
    9890:	f89d 2000 	ldrb.w	r2, [sp]
    9894:	6861      	ldr	r1, [r4, #4]
    9896:	4002      	ands	r2, r0
    9898:	2500      	movs	r5, #0
    989a:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    989e:	f89d 2001 	ldrb.w	r2, [sp, #1]
    98a2:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    98a6:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
    98aa:	f881 50b8 	strb.w	r5, [r1, #184]	; 0xb8
    98ae:	f881 5159 	strb.w	r5, [r1, #345]	; 0x159
    98b2:	8808      	ldrh	r0, [r1, #0]
    98b4:	f8a1 01bc 	strh.w	r0, [r1, #444]	; 0x1bc
    98b8:	f881 51ba 	strb.w	r5, [r1, #442]	; 0x1ba
    98bc:	9a00      	ldr	r2, [sp, #0]
    98be:	f8c1 21be 	str.w	r2, [r1, #446]	; 0x1be
    98c2:	9a01      	ldr	r2, [sp, #4]
    98c4:	f8c1 21c2 	str.w	r2, [r1, #450]	; 0x1c2
    98c8:	2001      	movs	r0, #1
    98ca:	f881 01b8 	strb.w	r0, [r1, #440]	; 0x1b8
    98ce:	f000 fe97 	bl	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    98d2:	6860      	ldr	r0, [r4, #4]
    98d4:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    98d8:	2000      	movs	r0, #0
    98da:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    98dc:	2001      	movs	r0, #1
    98de:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    98e0:	20000104 	.word	0x20000104
    98e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98e8:	4c19      	ldr	r4, [pc, #100]	; (9950 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb8>)
    98ea:	2600      	movs	r6, #0
    98ec:	2703      	movs	r7, #3
    98ee:	f8d4 c004 	ldr.w	ip, [r4, #4]
    98f2:	2501      	movs	r5, #1
    98f4:	b1a0      	cbz	r0, 9920 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd88>
    98f6:	68e0      	ldr	r0, [r4, #12]
    98f8:	78c0      	ldrb	r0, [r0, #3]
    98fa:	f88c 00fa 	strb.w	r0, [ip, #250]	; 0xfa
    98fe:	fa05 f000 	lsl.w	r0, r5, r0
    9902:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    9906:	b130      	cbz	r0, 9916 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd7e>
    9908:	f88c 7085 	strb.w	r7, [ip, #133]	; 0x85
    990c:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
    9910:	f88c 50b8 	strb.w	r5, [ip, #184]	; 0xb8
    9914:	e017      	b.n	9946 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdae>
    9916:	f240 5143 	movw	r1, #1347	; 0x543
    991a:	2036      	movs	r0, #54	; 0x36
    991c:	f7fa fa3c 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9920:	2300      	movs	r3, #0
    9922:	f89c 2086 	ldrb.w	r2, [ip, #134]	; 0x86
    9926:	4619      	mov	r1, r3
    9928:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    992c:	f004 f880 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9930:	b160      	cbz	r0, 994c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb4>
    9932:	68e0      	ldr	r0, [r4, #12]
    9934:	78c1      	ldrb	r1, [r0, #3]
    9936:	6860      	ldr	r0, [r4, #4]
    9938:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    993c:	f800 7f86 	strb.w	r7, [r0, #134]!
    9940:	8686      	strh	r6, [r0, #52]	; 0x34
    9942:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9946:	2000      	movs	r0, #0
    9948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    994c:	2001      	movs	r0, #1
    994e:	e7fb      	b.n	9948 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb0>
    9950:	20000104 	.word	0x20000104
    9954:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9958:	4c30      	ldr	r4, [pc, #192]	; (9a1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe84>)
    995a:	2300      	movs	r3, #0
    995c:	4619      	mov	r1, r3
    995e:	6860      	ldr	r0, [r4, #4]
    9960:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9964:	3078      	adds	r0, #120	; 0x78
    9966:	f004 f863 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    996a:	b308      	cbz	r0, 99b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe18>
    996c:	68e0      	ldr	r0, [r4, #12]
    996e:	f004 fa8d 	bl	de8c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9972:	b300      	cbz	r0, 99b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1e>
    9974:	68e0      	ldr	r0, [r4, #12]
    9976:	f004 fa7f 	bl	de78 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    997a:	4607      	mov	r7, r0
    997c:	68e0      	ldr	r0, [r4, #12]
    997e:	f004 fa7f 	bl	de80 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9982:	4606      	mov	r6, r0
    9984:	68e0      	ldr	r0, [r4, #12]
    9986:	f004 fa75 	bl	de74 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    998a:	4605      	mov	r5, r0
    998c:	68e0      	ldr	r0, [r4, #12]
    998e:	f004 fa75 	bl	de7c <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9992:	4601      	mov	r1, r0
    9994:	9700      	str	r7, [sp, #0]
    9996:	6860      	ldr	r0, [r4, #4]
    9998:	4633      	mov	r3, r6
    999a:	462a      	mov	r2, r5
    999c:	302c      	adds	r0, #44	; 0x2c
    999e:	f004 fc98 	bl	e2d2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    99a2:	6861      	ldr	r1, [r4, #4]
    99a4:	2501      	movs	r5, #1
    99a6:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    99aa:	281c      	cmp	r0, #28
    99ac:	d008      	beq.n	99c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe28>
    99ae:	e009      	b.n	99c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe2c>
    99b0:	2001      	movs	r0, #1
    99b2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    99b6:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    99ba:	2000      	movs	r0, #0
    99bc:	f7ff bf92 	b.w	98e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    99c0:	f881 5060 	strb.w	r5, [r1, #96]	; 0x60
    99c4:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    99c8:	2801      	cmp	r0, #1
    99ca:	d011      	beq.n	99f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    99cc:	f891 0133 	ldrb.w	r0, [r1, #307]	; 0x133
    99d0:	f88d 0004 	strb.w	r0, [sp, #4]
    99d4:	9801      	ldr	r0, [sp, #4]
    99d6:	9001      	str	r0, [sp, #4]
    99d8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    99dc:	b940      	cbnz	r0, 99f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    99de:	f891 0132 	ldrb.w	r0, [r1, #306]	; 0x132
    99e2:	f88d 0000 	strb.w	r0, [sp]
    99e6:	9800      	ldr	r0, [sp, #0]
    99e8:	9000      	str	r0, [sp, #0]
    99ea:	f89d 0000 	ldrb.w	r0, [sp]
    99ee:	b118      	cbz	r0, 99f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe60>
    99f0:	201e      	movs	r0, #30
    99f2:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    99f6:	e00a      	b.n	9a0e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe76>
    99f8:	201d      	movs	r0, #29
    99fa:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    99fe:	f501 72cf 	add.w	r2, r1, #414	; 0x19e
    9a02:	f831 0b2c 	ldrh.w	r0, [r1], #44
    9a06:	f004 fc6b 	bl	e2e0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9a0a:	f000 fdf9 	bl	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9a0e:	6860      	ldr	r0, [r4, #4]
    9a10:	2100      	movs	r1, #0
    9a12:	f820 1fba 	strh.w	r1, [r0, #186]!
    9a16:	7085      	strb	r5, [r0, #2]
    9a18:	4608      	mov	r0, r1
    9a1a:	e7ca      	b.n	99b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1a>
    9a1c:	20000104 	.word	0x20000104
    9a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a22:	4c1a      	ldr	r4, [pc, #104]	; (9a8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xef4>)
    9a24:	2300      	movs	r3, #0
    9a26:	210a      	movs	r1, #10
    9a28:	6860      	ldr	r0, [r4, #4]
    9a2a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9a2e:	3078      	adds	r0, #120	; 0x78
    9a30:	f003 fffe 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a34:	b338      	cbz	r0, 9a86 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeee>
    9a36:	68e0      	ldr	r0, [r4, #12]
    9a38:	f004 fa28 	bl	de8c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9a3c:	b1c8      	cbz	r0, 9a72 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeda>
    9a3e:	68e0      	ldr	r0, [r4, #12]
    9a40:	f004 fa1a 	bl	de78 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9a44:	4607      	mov	r7, r0
    9a46:	68e0      	ldr	r0, [r4, #12]
    9a48:	f004 fa1a 	bl	de80 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9a4c:	4606      	mov	r6, r0
    9a4e:	68e0      	ldr	r0, [r4, #12]
    9a50:	f004 fa10 	bl	de74 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9a54:	4605      	mov	r5, r0
    9a56:	68e0      	ldr	r0, [r4, #12]
    9a58:	f004 fa10 	bl	de7c <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9a5c:	4601      	mov	r1, r0
    9a5e:	9700      	str	r7, [sp, #0]
    9a60:	6860      	ldr	r0, [r4, #4]
    9a62:	4633      	mov	r3, r6
    9a64:	462a      	mov	r2, r5
    9a66:	302c      	adds	r0, #44	; 0x2c
    9a68:	f004 fc33 	bl	e2d2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9a6c:	6860      	ldr	r0, [r4, #4]
    9a6e:	f004 fba2 	bl	e1b6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9a72:	6861      	ldr	r1, [r4, #4]
    9a74:	2000      	movs	r0, #0
    9a76:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    9a7a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9a7e:	f7ff fabf 	bl	9000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    9a82:	2000      	movs	r0, #0
    9a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a86:	2001      	movs	r0, #1
    9a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a8a:	0000      	.short	0x0000
    9a8c:	20000104 	.word	0x20000104
    9a90:	b510      	push	{r4, lr}
    9a92:	4c0b      	ldr	r4, [pc, #44]	; (9ac0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf28>)
    9a94:	2300      	movs	r3, #0
    9a96:	4619      	mov	r1, r3
    9a98:	6860      	ldr	r0, [r4, #4]
    9a9a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9a9e:	3078      	adds	r0, #120	; 0x78
    9aa0:	f003 ffc6 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9aa4:	b150      	cbz	r0, 9abc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf24>
    9aa6:	6860      	ldr	r0, [r4, #4]
    9aa8:	2100      	movs	r1, #0
    9aaa:	f820 1fba 	strh.w	r1, [r0, #186]!
    9aae:	2101      	movs	r1, #1
    9ab0:	7081      	strb	r1, [r0, #2]
    9ab2:	2102      	movs	r1, #2
    9ab4:	f800 1c34 	strb.w	r1, [r0, #-52]
    9ab8:	2000      	movs	r0, #0
    9aba:	bd10      	pop	{r4, pc}
    9abc:	2001      	movs	r0, #1
    9abe:	bd10      	pop	{r4, pc}
    9ac0:	20000104 	.word	0x20000104
    9ac4:	b510      	push	{r4, lr}
    9ac6:	4c09      	ldr	r4, [pc, #36]	; (9aec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf54>)
    9ac8:	2300      	movs	r3, #0
    9aca:	2109      	movs	r1, #9
    9acc:	6860      	ldr	r0, [r4, #4]
    9ace:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9ad2:	3078      	adds	r0, #120	; 0x78
    9ad4:	f003 ffac 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ad8:	2800      	cmp	r0, #0
    9ada:	d006      	beq.n	9aea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf52>
    9adc:	6861      	ldr	r1, [r4, #4]
    9ade:	2000      	movs	r0, #0
    9ae0:	f801 0fac 	strb.w	r0, [r1, #172]!
    9ae4:	7308      	strb	r0, [r1, #12]
    9ae6:	f801 0c27 	strb.w	r0, [r1, #-39]
    9aea:	bd10      	pop	{r4, pc}
    9aec:	20000104 	.word	0x20000104
    9af0:	4807      	ldr	r0, [pc, #28]	; (9b10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf78>)
    9af2:	6840      	ldr	r0, [r0, #4]
    9af4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9af8:	290f      	cmp	r1, #15
    9afa:	d001      	beq.n	9b00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf68>
    9afc:	2002      	movs	r0, #2
    9afe:	4770      	bx	lr
    9b00:	2100      	movs	r1, #0
    9b02:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    9b06:	2112      	movs	r1, #18
    9b08:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    9b0c:	2000      	movs	r0, #0
    9b0e:	4770      	bx	lr
    9b10:	20000104 	.word	0x20000104
    9b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b16:	4c42      	ldr	r4, [pc, #264]	; (9c20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1088>)
    9b18:	2600      	movs	r6, #0
    9b1a:	b087      	sub	sp, #28
    9b1c:	6860      	ldr	r0, [r4, #4]
    9b1e:	4633      	mov	r3, r6
    9b20:	4631      	mov	r1, r6
    9b22:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9b26:	3078      	adds	r0, #120	; 0x78
    9b28:	f003 ff82 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b2c:	b180      	cbz	r0, 9b50 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfb8>
    9b2e:	6860      	ldr	r0, [r4, #4]
    9b30:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9b34:	2823      	cmp	r0, #35	; 0x23
    9b36:	d00e      	beq.n	9b56 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    9b38:	2824      	cmp	r0, #36	; 0x24
    9b3a:	d00c      	beq.n	9b56 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    9b3c:	4668      	mov	r0, sp
    9b3e:	f7fa ff25 	bl	498c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    9b42:	b150      	cbz	r0, 9b5a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc2>
    9b44:	9800      	ldr	r0, [sp, #0]
    9b46:	a901      	add	r1, sp, #4
    9b48:	78c0      	ldrb	r0, [r0, #3]
    9b4a:	f88d 0004 	strb.w	r0, [sp, #4]
    9b4e:	e005      	b.n	9b5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc4>
    9b50:	2001      	movs	r0, #1
    9b52:	b007      	add	sp, #28
    9b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b56:	2020      	movs	r0, #32
    9b58:	e7fb      	b.n	9b52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9b5a:	2100      	movs	r1, #0
    9b5c:	6860      	ldr	r0, [r4, #4]
    9b5e:	ab04      	add	r3, sp, #16
    9b60:	2216      	movs	r2, #22
    9b62:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9b66:	f004 f81f 	bl	dba8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    9b6a:	2700      	movs	r7, #0
    9b6c:	2501      	movs	r5, #1
    9b6e:	b178      	cbz	r0, 9b90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xff8>
    9b70:	6860      	ldr	r0, [r4, #4]
    9b72:	f89d 1010 	ldrb.w	r1, [sp, #16]
    9b76:	2216      	movs	r2, #22
    9b78:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
    9b7c:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
    9b80:	2119      	movs	r1, #25
    9b82:	f800 1f86 	strb.w	r1, [r0, #134]!
    9b86:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9b8a:	8687      	strh	r7, [r0, #52]	; 0x34
    9b8c:	2000      	movs	r0, #0
    9b8e:	e7e0      	b.n	9b52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9b90:	68e0      	ldr	r0, [r4, #12]
    9b92:	f004 f997 	bl	dec4 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9b96:	b1a8      	cbz	r0, 9bc4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x102c>
    9b98:	68e1      	ldr	r1, [r4, #12]
    9b9a:	7908      	ldrb	r0, [r1, #4]
    9b9c:	f000 0207 	and.w	r2, r0, #7
    9ba0:	6860      	ldr	r0, [r4, #4]
    9ba2:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    9ba6:	7949      	ldrb	r1, [r1, #5]
    9ba8:	f001 0107 	and.w	r1, r1, #7
    9bac:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    9bb0:	f890 313f 	ldrb.w	r3, [r0, #319]	; 0x13f
    9bb4:	f88d 3018 	strb.w	r3, [sp, #24]
    9bb8:	9b06      	ldr	r3, [sp, #24]
    9bba:	9301      	str	r3, [sp, #4]
    9bbc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9bc0:	bb23      	cbnz	r3, 9c0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9bc2:	e004      	b.n	9bce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1036>
    9bc4:	2000      	movs	r0, #0
    9bc6:	f7ff fe8d 	bl	98e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9bca:	4606      	mov	r6, r0
    9bcc:	e025      	b.n	9c1a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1082>
    9bce:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    9bd2:	2b01      	cmp	r3, #1
    9bd4:	d01a      	beq.n	9c0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9bd6:	f890 c06b 	ldrb.w	ip, [r0, #107]	; 0x6b
    9bda:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    9bde:	4594      	cmp	ip, r2
    9be0:	d106      	bne.n	9bf0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    9be2:	781a      	ldrb	r2, [r3, #0]
    9be4:	428a      	cmp	r2, r1
    9be6:	d103      	bne.n	9bf0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    9be8:	2102      	movs	r1, #2
    9bea:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
    9bee:	e00d      	b.n	9c0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9bf0:	f500 71d6 	add.w	r1, r0, #428	; 0x1ac
    9bf4:	8802      	ldrh	r2, [r0, #0]
    9bf6:	f821 2902 	strh.w	r2, [r1], #-2
    9bfa:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    9bfe:	710a      	strb	r2, [r1, #4]
    9c00:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    9c04:	7148      	strb	r0, [r1, #5]
    9c06:	700d      	strb	r5, [r1, #0]
    9c08:	f000 fcfa 	bl	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9c0c:	6860      	ldr	r0, [r4, #4]
    9c0e:	2121      	movs	r1, #33	; 0x21
    9c10:	f800 1f86 	strb.w	r1, [r0, #134]!
    9c14:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9c18:	8687      	strh	r7, [r0, #52]	; 0x34
    9c1a:	4630      	mov	r0, r6
    9c1c:	e799      	b.n	9b52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9c1e:	0000      	.short	0x0000
    9c20:	20000104 	.word	0x20000104
    9c24:	b570      	push	{r4, r5, r6, lr}
    9c26:	4c18      	ldr	r4, [pc, #96]	; (9c88 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10f0>)
    9c28:	6860      	ldr	r0, [r4, #4]
    9c2a:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9c2e:	281f      	cmp	r0, #31
    9c30:	d001      	beq.n	9c36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x109e>
    9c32:	2001      	movs	r0, #1
    9c34:	bd70      	pop	{r4, r5, r6, pc}
    9c36:	68e0      	ldr	r0, [r4, #12]
    9c38:	f004 f94e 	bl	ded8 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    9c3c:	b1d8      	cbz	r0, 9c76 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10de>
    9c3e:	68e0      	ldr	r0, [r4, #12]
    9c40:	2201      	movs	r2, #1
    9c42:	7901      	ldrb	r1, [r0, #4]
    9c44:	7940      	ldrb	r0, [r0, #5]
    9c46:	f001 0107 	and.w	r1, r1, #7
    9c4a:	f361 0507 	bfi	r5, r1, #0, #8
    9c4e:	4629      	mov	r1, r5
    9c50:	f000 0007 	and.w	r0, r0, #7
    9c54:	f360 210f 	bfi	r1, r0, #8, #8
    9c58:	6860      	ldr	r0, [r4, #4]
    9c5a:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
    9c5e:	2200      	movs	r2, #0
    9c60:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
    9c64:	2223      	movs	r2, #35	; 0x23
    9c66:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    9c6a:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    9c6e:	f7ff fdb9 	bl	97e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    9c72:	2000      	movs	r0, #0
    9c74:	bd70      	pop	{r4, r5, r6, pc}
    9c76:	2001      	movs	r0, #1
    9c78:	f7ff fe34 	bl	98e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9c7c:	4604      	mov	r4, r0
    9c7e:	201e      	movs	r0, #30
    9c80:	f7ff fd6a 	bl	9758 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9c84:	4620      	mov	r0, r4
    9c86:	bd70      	pop	{r4, r5, r6, pc}
    9c88:	20000104 	.word	0x20000104
    9c8c:	b570      	push	{r4, r5, r6, lr}
    9c8e:	4d07      	ldr	r5, [pc, #28]	; (9cac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1114>)
    9c90:	2400      	movs	r4, #0
    9c92:	68e8      	ldr	r0, [r5, #12]
    9c94:	f004 f92a 	bl	deec <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9c98:	2803      	cmp	r0, #3
    9c9a:	d105      	bne.n	9ca8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1110>
    9c9c:	68e8      	ldr	r0, [r5, #12]
    9c9e:	f004 f927 	bl	def0 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9ca2:	f000 f805 	bl	9cb0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    9ca6:	4604      	mov	r4, r0
    9ca8:	4620      	mov	r0, r4
    9caa:	bd70      	pop	{r4, r5, r6, pc}
    9cac:	20000104 	.word	0x20000104
    9cb0:	b570      	push	{r4, r5, r6, lr}
    9cb2:	4d18      	ldr	r5, [pc, #96]	; (9d14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x117c>)
    9cb4:	6869      	ldr	r1, [r5, #4]
    9cb6:	f891 2085 	ldrb.w	r2, [r1, #133]	; 0x85
    9cba:	2a16      	cmp	r2, #22
    9cbc:	d001      	beq.n	9cc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x112a>
    9cbe:	2a13      	cmp	r2, #19
    9cc0:	d102      	bne.n	9cc8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1130>
    9cc2:	f891 20be 	ldrb.w	r2, [r1, #190]	; 0xbe
    9cc6:	b10a      	cbz	r2, 9ccc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1134>
    9cc8:	2002      	movs	r0, #2
    9cca:	bd70      	pop	{r4, r5, r6, pc}
    9ccc:	f881 00f8 	strb.w	r0, [r1, #248]	; 0xf8
    9cd0:	2400      	movs	r4, #0
    9cd2:	f881 40bd 	strb.w	r4, [r1, #189]	; 0xbd
    9cd6:	f881 40b8 	strb.w	r4, [r1, #184]	; 0xb8
    9cda:	f891 21d2 	ldrb.w	r2, [r1, #466]	; 0x1d2
    9cde:	b122      	cbz	r2, 9cea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1152>
    9ce0:	f240 21eb 	movw	r1, #747	; 0x2eb
    9ce4:	2036      	movs	r0, #54	; 0x36
    9ce6:	f7fa f857 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cea:	880a      	ldrh	r2, [r1, #0]
    9cec:	f8a1 21d6 	strh.w	r2, [r1, #470]	; 0x1d6
    9cf0:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
    9cf4:	f881 41d8 	strb.w	r4, [r1, #472]	; 0x1d8
    9cf8:	200d      	movs	r0, #13
    9cfa:	f881 01d2 	strb.w	r0, [r1, #466]	; 0x1d2
    9cfe:	f881 415a 	strb.w	r4, [r1, #346]	; 0x15a
    9d02:	f000 fb9b 	bl	a43c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    9d06:	f000 fc7b 	bl	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9d0a:	6868      	ldr	r0, [r5, #4]
    9d0c:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    9d10:	2000      	movs	r0, #0
    9d12:	bd70      	pop	{r4, r5, r6, pc}
    9d14:	20000104 	.word	0x20000104
    9d18:	4802      	ldr	r0, [pc, #8]	; (9d24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x118c>)
    9d1a:	68c0      	ldr	r0, [r0, #12]
    9d1c:	7900      	ldrb	r0, [r0, #4]
    9d1e:	f7ff bfc7 	b.w	9cb0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    9d22:	0000      	.short	0x0000
    9d24:	20000104 	.word	0x20000104
    9d28:	b510      	push	{r4, lr}
    9d2a:	4c0e      	ldr	r4, [pc, #56]	; (9d64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11cc>)
    9d2c:	6860      	ldr	r0, [r4, #4]
    9d2e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9d32:	2916      	cmp	r1, #22
    9d34:	d001      	beq.n	9d3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11a2>
    9d36:	2002      	movs	r0, #2
    9d38:	bd10      	pop	{r4, pc}
    9d3a:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    9d3e:	f200 1175 	addw	r1, r0, #373	; 0x175
    9d42:	2200      	movs	r2, #0
    9d44:	f200 1065 	addw	r0, r0, #357	; 0x165
    9d48:	f003 fdf4 	bl	d934 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9d4c:	6860      	ldr	r0, [r4, #4]
    9d4e:	2100      	movs	r1, #0
    9d50:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    9d54:	2101      	movs	r1, #1
    9d56:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    9d5a:	2118      	movs	r1, #24
    9d5c:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    9d60:	2000      	movs	r0, #0
    9d62:	bd10      	pop	{r4, pc}
    9d64:	20000104 	.word	0x20000104
    9d68:	b570      	push	{r4, r5, r6, lr}
    9d6a:	4d1b      	ldr	r5, [pc, #108]	; (9dd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1240>)
    9d6c:	6868      	ldr	r0, [r5, #4]
    9d6e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9d72:	291a      	cmp	r1, #26
    9d74:	d001      	beq.n	9d7a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e2>
    9d76:	2002      	movs	r0, #2
    9d78:	bd70      	pop	{r4, r5, r6, pc}
    9d7a:	2400      	movs	r4, #0
    9d7c:	f880 40bd 	strb.w	r4, [r0, #189]	; 0xbd
    9d80:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    9d84:	f880 415a 	strb.w	r4, [r0, #346]	; 0x15a
    9d88:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
    9d8c:	b121      	cbz	r1, 9d98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1200>
    9d8e:	f240 3113 	movw	r1, #787	; 0x313
    9d92:	2036      	movs	r0, #54	; 0x36
    9d94:	f7fa f800 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d98:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    9d9c:	b141      	cbz	r1, 9db0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1218>
    9d9e:	f880 40be 	strb.w	r4, [r0, #190]	; 0xbe
    9da2:	8801      	ldrh	r1, [r0, #0]
    9da4:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    9da8:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    9dac:	210e      	movs	r1, #14
    9dae:	e008      	b.n	9dc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x122a>
    9db0:	8801      	ldrh	r1, [r0, #0]
    9db2:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    9db6:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    9dba:	2101      	movs	r1, #1
    9dbc:	f880 11d8 	strb.w	r1, [r0, #472]	; 0x1d8
    9dc0:	210d      	movs	r1, #13
    9dc2:	f880 11d2 	strb.w	r1, [r0, #466]	; 0x1d2
    9dc6:	f000 fb39 	bl	a43c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    9dca:	f000 fc19 	bl	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9dce:	6868      	ldr	r0, [r5, #4]
    9dd0:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    9dd4:	2000      	movs	r0, #0
    9dd6:	bd70      	pop	{r4, r5, r6, pc}
    9dd8:	20000104 	.word	0x20000104
    9ddc:	b510      	push	{r4, lr}
    9dde:	4c0d      	ldr	r4, [pc, #52]	; (9e14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x127c>)
    9de0:	2300      	movs	r3, #0
    9de2:	2101      	movs	r1, #1
    9de4:	6860      	ldr	r0, [r4, #4]
    9de6:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9dea:	3078      	adds	r0, #120	; 0x78
    9dec:	f003 fe20 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9df0:	b108      	cbz	r0, 9df6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125e>
    9df2:	2000      	movs	r0, #0
    9df4:	bd10      	pop	{r4, pc}
    9df6:	68e0      	ldr	r0, [r4, #12]
    9df8:	f004 f844 	bl	de84 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    9dfc:	6861      	ldr	r1, [r4, #4]
    9dfe:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    9e02:	2007      	movs	r0, #7
    9e04:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    9e08:	2000      	movs	r0, #0
    9e0a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    9e0e:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    9e12:	e7ee      	b.n	9df2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125a>
    9e14:	20000104 	.word	0x20000104
    9e18:	b570      	push	{r4, r5, r6, lr}
    9e1a:	4c25      	ldr	r4, [pc, #148]	; (9eb0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1318>)
    9e1c:	2600      	movs	r6, #0
    9e1e:	2109      	movs	r1, #9
    9e20:	6860      	ldr	r0, [r4, #4]
    9e22:	4633      	mov	r3, r6
    9e24:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9e28:	3078      	adds	r0, #120	; 0x78
    9e2a:	f003 fe01 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e2e:	2500      	movs	r5, #0
    9e30:	b118      	cbz	r0, 9e3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12a2>
    9e32:	68e0      	ldr	r0, [r4, #12]
    9e34:	7900      	ldrb	r0, [r0, #4]
    9e36:	2812      	cmp	r0, #18
    9e38:	d011      	beq.n	9e5e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12c6>
    9e3a:	6860      	ldr	r0, [r4, #4]
    9e3c:	210a      	movs	r1, #10
    9e3e:	2300      	movs	r3, #0
    9e40:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9e44:	3078      	adds	r0, #120	; 0x78
    9e46:	f003 fdf3 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e4a:	b118      	cbz	r0, 9e54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12bc>
    9e4c:	68e0      	ldr	r0, [r4, #12]
    9e4e:	7900      	ldrb	r0, [r0, #4]
    9e50:	2814      	cmp	r0, #20
    9e52:	d008      	beq.n	9e66 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ce>
    9e54:	68e0      	ldr	r0, [r4, #12]
    9e56:	7900      	ldrb	r0, [r0, #4]
    9e58:	2816      	cmp	r0, #22
    9e5a:	d012      	beq.n	9e82 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ea>
    9e5c:	e026      	b.n	9eac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9e5e:	f7ff fe31 	bl	9ac4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf2c>
    9e62:	4606      	mov	r6, r0
    9e64:	e022      	b.n	9eac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9e66:	6860      	ldr	r0, [r4, #4]
    9e68:	2105      	movs	r1, #5
    9e6a:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9e6e:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    9e72:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9e76:	30c6      	adds	r0, #198	; 0xc6
    9e78:	f004 fc81 	bl	e77e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    9e7c:	f7ff f8c0 	bl	9000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    9e80:	e014      	b.n	9eac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9e82:	6860      	ldr	r0, [r4, #4]
    9e84:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9e88:	291f      	cmp	r1, #31
    9e8a:	d10f      	bne.n	9eac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9e8c:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9e90:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9e94:	2108      	movs	r1, #8
    9e96:	30c6      	adds	r0, #198	; 0xc6
    9e98:	f004 fc71 	bl	e77e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    9e9c:	6860      	ldr	r0, [r4, #4]
    9e9e:	210b      	movs	r1, #11
    9ea0:	30c6      	adds	r0, #198	; 0xc6
    9ea2:	f004 fc6c 	bl	e77e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    9ea6:	201a      	movs	r0, #26
    9ea8:	f7ff fc56 	bl	9758 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9eac:	4630      	mov	r0, r6
    9eae:	bd70      	pop	{r4, r5, r6, pc}
    9eb0:	20000104 	.word	0x20000104
    9eb4:	b570      	push	{r4, r5, r6, lr}
    9eb6:	4c32      	ldr	r4, [pc, #200]	; (9f80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e8>)
    9eb8:	2300      	movs	r3, #0
    9eba:	4619      	mov	r1, r3
    9ebc:	6860      	ldr	r0, [r4, #4]
    9ebe:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9ec2:	3078      	adds	r0, #120	; 0x78
    9ec4:	f003 fdb4 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ec8:	b940      	cbnz	r0, 9edc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1344>
    9eca:	6860      	ldr	r0, [r4, #4]
    9ecc:	2300      	movs	r3, #0
    9ece:	2108      	movs	r1, #8
    9ed0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9ed4:	3078      	adds	r0, #120	; 0x78
    9ed6:	f003 fdab 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9eda:	b1f8      	cbz	r0, 9f1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1384>
    9edc:	6860      	ldr	r0, [r4, #4]
    9ede:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    9ee2:	0780      	lsls	r0, r0, #30
    9ee4:	d412      	bmi.n	9f0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1374>
    9ee6:	68e0      	ldr	r0, [r4, #12]
    9ee8:	f003 ffce 	bl	de88 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    9eec:	6861      	ldr	r1, [r4, #4]
    9eee:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
    9ef2:	68e0      	ldr	r0, [r4, #12]
    9ef4:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    9ef8:	f8a1 20c2 	strh.w	r2, [r1, #194]	; 0xc2
    9efc:	8840      	ldrh	r0, [r0, #2]
    9efe:	f8a1 00c4 	strh.w	r0, [r1, #196]	; 0xc4
    9f02:	f811 0fc0 	ldrb.w	r0, [r1, #192]!
    9f06:	f040 0002 	orr.w	r0, r0, #2
    9f0a:	7008      	strb	r0, [r1, #0]
    9f0c:	6860      	ldr	r0, [r4, #4]
    9f0e:	f04f 0500 	mov.w	r5, #0
    9f12:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    9f16:	07c9      	lsls	r1, r1, #31
    9f18:	d002      	beq.n	9f20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1388>
    9f1a:	e010      	b.n	9f3e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13a6>
    9f1c:	2001      	movs	r0, #1
    9f1e:	bd70      	pop	{r4, r5, r6, pc}
    9f20:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f24:	2300      	movs	r3, #0
    9f26:	4619      	mov	r1, r3
    9f28:	3078      	adds	r0, #120	; 0x78
    9f2a:	f003 fd81 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f2e:	b160      	cbz	r0, 9f4a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13b2>
    9f30:	6860      	ldr	r0, [r4, #4]
    9f32:	2101      	movs	r1, #1
    9f34:	f800 1f86 	strb.w	r1, [r0, #134]!
    9f38:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    9f3c:	8685      	strh	r5, [r0, #52]	; 0x34
    9f3e:	6860      	ldr	r0, [r4, #4]
    9f40:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9f44:	2901      	cmp	r1, #1
    9f46:	d005      	beq.n	9f54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13bc>
    9f48:	e00a      	b.n	9f60 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13c8>
    9f4a:	f240 314e 	movw	r1, #846	; 0x34e
    9f4e:	2036      	movs	r0, #54	; 0x36
    9f50:	f7f9 ff22 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f54:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9f58:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9f5c:	f000 fb50 	bl	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9f60:	6860      	ldr	r0, [r4, #4]
    9f62:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    9f66:	b149      	cbz	r1, 9f7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    9f68:	f880 5158 	strb.w	r5, [r0, #344]	; 0x158
    9f6c:	f000 fb48 	bl	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9f70:	6860      	ldr	r0, [r4, #4]
    9f72:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9f76:	b909      	cbnz	r1, 9f7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    9f78:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9f7c:	2000      	movs	r0, #0
    9f7e:	bd70      	pop	{r4, r5, r6, pc}
    9f80:	20000104 	.word	0x20000104
    9f84:	b510      	push	{r4, lr}
    9f86:	4c0a      	ldr	r4, [pc, #40]	; (9fb0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1418>)
    9f88:	2300      	movs	r3, #0
    9f8a:	4619      	mov	r1, r3
    9f8c:	6860      	ldr	r0, [r4, #4]
    9f8e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f92:	3078      	adds	r0, #120	; 0x78
    9f94:	f003 fd4c 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f98:	b120      	cbz	r0, 9fa4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140c>
    9f9a:	6861      	ldr	r1, [r4, #4]
    9f9c:	200c      	movs	r0, #12
    9f9e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9fa2:	bd10      	pop	{r4, pc}
    9fa4:	f240 51fa 	movw	r1, #1530	; 0x5fa
    9fa8:	2036      	movs	r0, #54	; 0x36
    9faa:	f7f9 fef5 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fae:	0000      	.short	0x0000
    9fb0:	20000104 	.word	0x20000104
    9fb4:	b510      	push	{r4, lr}
    9fb6:	4c0a      	ldr	r4, [pc, #40]	; (9fe0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1448>)
    9fb8:	2300      	movs	r3, #0
    9fba:	4619      	mov	r1, r3
    9fbc:	6860      	ldr	r0, [r4, #4]
    9fbe:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9fc2:	3078      	adds	r0, #120	; 0x78
    9fc4:	f003 fd34 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fc8:	b120      	cbz	r0, 9fd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x143c>
    9fca:	6861      	ldr	r1, [r4, #4]
    9fcc:	200d      	movs	r0, #13
    9fce:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9fd2:	bd10      	pop	{r4, pc}
    9fd4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    9fd8:	2036      	movs	r0, #54	; 0x36
    9fda:	f7f9 fedd 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fde:	0000      	.short	0x0000
    9fe0:	20000104 	.word	0x20000104
    9fe4:	b510      	push	{r4, lr}
    9fe6:	4c0d      	ldr	r4, [pc, #52]	; (a01c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1484>)
    9fe8:	2300      	movs	r3, #0
    9fea:	4619      	mov	r1, r3
    9fec:	6860      	ldr	r0, [r4, #4]
    9fee:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9ff2:	3078      	adds	r0, #120	; 0x78
    9ff4:	f003 fd1c 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ff8:	b918      	cbnz	r0, a002 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x146a>
    9ffa:	6860      	ldr	r0, [r4, #4]
    9ffc:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    a000:	b138      	cbz	r0, a012 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x147a>
    a002:	6860      	ldr	r0, [r4, #4]
    a004:	2101      	movs	r1, #1
    a006:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    a00a:	2113      	movs	r1, #19
    a00c:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a010:	bd10      	pop	{r4, pc}
    a012:	f240 6115 	movw	r1, #1557	; 0x615
    a016:	2036      	movs	r0, #54	; 0x36
    a018:	f7f9 febe 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a01c:	20000104 	.word	0x20000104
    a020:	b510      	push	{r4, lr}
    a022:	4c0a      	ldr	r4, [pc, #40]	; (a04c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14b4>)
    a024:	2300      	movs	r3, #0
    a026:	4619      	mov	r1, r3
    a028:	6860      	ldr	r0, [r4, #4]
    a02a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a02e:	3078      	adds	r0, #120	; 0x78
    a030:	f003 fcfe 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a034:	b120      	cbz	r0, a040 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a8>
    a036:	6861      	ldr	r1, [r4, #4]
    a038:	2004      	movs	r0, #4
    a03a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a03e:	bd10      	pop	{r4, pc}
    a040:	f240 51f4 	movw	r1, #1524	; 0x5f4
    a044:	2036      	movs	r0, #54	; 0x36
    a046:	f7f9 fea7 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a04a:	0000      	.short	0x0000
    a04c:	20000104 	.word	0x20000104
    a050:	b510      	push	{r4, lr}
    a052:	4c0a      	ldr	r4, [pc, #40]	; (a07c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14e4>)
    a054:	2300      	movs	r3, #0
    a056:	4619      	mov	r1, r3
    a058:	6860      	ldr	r0, [r4, #4]
    a05a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a05e:	3078      	adds	r0, #120	; 0x78
    a060:	f003 fce6 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a064:	b120      	cbz	r0, a070 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14d8>
    a066:	6861      	ldr	r1, [r4, #4]
    a068:	201c      	movs	r0, #28
    a06a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a06e:	bd10      	pop	{r4, pc}
    a070:	f240 614c 	movw	r1, #1612	; 0x64c
    a074:	2036      	movs	r0, #54	; 0x36
    a076:	f7f9 fe8f 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a07a:	0000      	.short	0x0000
    a07c:	20000104 	.word	0x20000104
    a080:	b510      	push	{r4, lr}
    a082:	4c0a      	ldr	r4, [pc, #40]	; (a0ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1514>)
    a084:	2300      	movs	r3, #0
    a086:	4619      	mov	r1, r3
    a088:	6860      	ldr	r0, [r4, #4]
    a08a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a08e:	3078      	adds	r0, #120	; 0x78
    a090:	f003 fcce 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a094:	b120      	cbz	r0, a0a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1508>
    a096:	6861      	ldr	r1, [r4, #4]
    a098:	2000      	movs	r0, #0
    a09a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a09e:	bd10      	pop	{r4, pc}
    a0a0:	f240 6153 	movw	r1, #1619	; 0x653
    a0a4:	2036      	movs	r0, #54	; 0x36
    a0a6:	f7f9 fe77 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0aa:	0000      	.short	0x0000
    a0ac:	20000104 	.word	0x20000104
    a0b0:	b510      	push	{r4, lr}
    a0b2:	4c0a      	ldr	r4, [pc, #40]	; (a0dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1544>)
    a0b4:	2300      	movs	r3, #0
    a0b6:	4619      	mov	r1, r3
    a0b8:	6860      	ldr	r0, [r4, #4]
    a0ba:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a0be:	3078      	adds	r0, #120	; 0x78
    a0c0:	f003 fcb6 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0c4:	b120      	cbz	r0, a0d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1538>
    a0c6:	6861      	ldr	r1, [r4, #4]
    a0c8:	2005      	movs	r0, #5
    a0ca:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a0ce:	bd10      	pop	{r4, pc}
    a0d0:	f240 613f 	movw	r1, #1599	; 0x63f
    a0d4:	2036      	movs	r0, #54	; 0x36
    a0d6:	f7f9 fe5f 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0da:	0000      	.short	0x0000
    a0dc:	20000104 	.word	0x20000104
    a0e0:	4902      	ldr	r1, [pc, #8]	; (a0ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1554>)
    a0e2:	2000      	movs	r0, #0
    a0e4:	6849      	ldr	r1, [r1, #4]
    a0e6:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a0ea:	4770      	bx	lr
    a0ec:	20000104 	.word	0x20000104
    a0f0:	b510      	push	{r4, lr}
    a0f2:	4c0b      	ldr	r4, [pc, #44]	; (a120 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1588>)
    a0f4:	2300      	movs	r3, #0
    a0f6:	4619      	mov	r1, r3
    a0f8:	6860      	ldr	r0, [r4, #4]
    a0fa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a0fe:	3078      	adds	r0, #120	; 0x78
    a100:	f003 fc96 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a104:	b138      	cbz	r0, a116 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x157e>
    a106:	6860      	ldr	r0, [r4, #4]
    a108:	2101      	movs	r1, #1
    a10a:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    a10e:	210f      	movs	r1, #15
    a110:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a114:	bd10      	pop	{r4, pc}
    a116:	f240 6106 	movw	r1, #1542	; 0x606
    a11a:	2036      	movs	r0, #54	; 0x36
    a11c:	f7f9 fe3c 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a120:	20000104 	.word	0x20000104
    a124:	4809      	ldr	r0, [pc, #36]	; (a14c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15b4>)
    a126:	b510      	push	{r4, lr}
    a128:	6840      	ldr	r0, [r0, #4]
    a12a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a12e:	2912      	cmp	r1, #18
    a130:	d004      	beq.n	a13c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15a4>
    a132:	f240 610e 	movw	r1, #1550	; 0x60e
    a136:	2036      	movs	r0, #54	; 0x36
    a138:	f7f9 fe2e 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a13c:	2101      	movs	r1, #1
    a13e:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a142:	2111      	movs	r1, #17
    a144:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a148:	bd10      	pop	{r4, pc}
    a14a:	0000      	.short	0x0000
    a14c:	20000104 	.word	0x20000104
    a150:	b510      	push	{r4, lr}
    a152:	4c0a      	ldr	r4, [pc, #40]	; (a17c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15e4>)
    a154:	2300      	movs	r3, #0
    a156:	4619      	mov	r1, r3
    a158:	6860      	ldr	r0, [r4, #4]
    a15a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a15e:	3078      	adds	r0, #120	; 0x78
    a160:	f003 fc66 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a164:	b120      	cbz	r0, a170 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15d8>
    a166:	6861      	ldr	r1, [r4, #4]
    a168:	201f      	movs	r0, #31
    a16a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a16e:	bd10      	pop	{r4, pc}
    a170:	f240 615c 	movw	r1, #1628	; 0x65c
    a174:	2036      	movs	r0, #54	; 0x36
    a176:	f7f9 fe0f 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a17a:	0000      	.short	0x0000
    a17c:	20000104 	.word	0x20000104
    a180:	b570      	push	{r4, r5, r6, lr}
    a182:	4c1d      	ldr	r4, [pc, #116]	; (a1f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1660>)
    a184:	6860      	ldr	r0, [r4, #4]
    a186:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    a18a:	b911      	cbnz	r1, a192 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fa>
    a18c:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    a190:	b179      	cbz	r1, a1b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161a>
    a192:	2100      	movs	r1, #0
    a194:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a198:	2224      	movs	r2, #36	; 0x24
    a19a:	2500      	movs	r5, #0
    a19c:	2b21      	cmp	r3, #33	; 0x21
    a19e:	d00a      	beq.n	a1b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161e>
    a1a0:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    a1a4:	2b23      	cmp	r3, #35	; 0x23
    a1a6:	d01a      	beq.n	a1de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1646>
    a1a8:	f44f 61d1 	mov.w	r1, #1672	; 0x688
    a1ac:	2036      	movs	r0, #54	; 0x36
    a1ae:	f7f9 fdf3 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1b2:	2101      	movs	r1, #1
    a1b4:	e7ee      	b.n	a194 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fc>
    a1b6:	b161      	cbz	r1, a1d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163a>
    a1b8:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    a1bc:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    a1c0:	2801      	cmp	r0, #1
    a1c2:	d102      	bne.n	a1ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1632>
    a1c4:	2000      	movs	r0, #0
    a1c6:	f7ff fac7 	bl	9758 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a1ca:	6860      	ldr	r0, [r4, #4]
    a1cc:	f880 513e 	strb.w	r5, [r0, #318]	; 0x13e
    a1d0:	e001      	b.n	a1d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163e>
    a1d2:	f880 2086 	strb.w	r2, [r0, #134]	; 0x86
    a1d6:	6860      	ldr	r0, [r4, #4]
    a1d8:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    a1dc:	bd70      	pop	{r4, r5, r6, pc}
    a1de:	b129      	cbz	r1, a1ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1654>
    a1e0:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a1e4:	2000      	movs	r0, #0
    a1e6:	f7ff fab7 	bl	9758 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a1ea:	e001      	b.n	a1f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1658>
    a1ec:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    a1f0:	6860      	ldr	r0, [r4, #4]
    a1f2:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a1f6:	bd70      	pop	{r4, r5, r6, pc}
    a1f8:	20000104 	.word	0x20000104
    a1fc:	4903      	ldr	r1, [pc, #12]	; (a20c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1674>)
    a1fe:	2000      	movs	r0, #0
    a200:	6849      	ldr	r1, [r1, #4]
    a202:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a206:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a20a:	4770      	bx	lr
    a20c:	20000104 	.word	0x20000104
    a210:	4807      	ldr	r0, [pc, #28]	; (a230 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1698>)
    a212:	b510      	push	{r4, lr}
    a214:	6840      	ldr	r0, [r0, #4]
    a216:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a21a:	2918      	cmp	r1, #24
    a21c:	d004      	beq.n	a228 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1690>
    a21e:	f240 611e 	movw	r1, #1566	; 0x61e
    a222:	2036      	movs	r0, #54	; 0x36
    a224:	f7f9 fdb8 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a228:	211a      	movs	r1, #26
    a22a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a22e:	bd10      	pop	{r4, pc}
    a230:	20000104 	.word	0x20000104
    a234:	b510      	push	{r4, lr}
    a236:	4c0a      	ldr	r4, [pc, #40]	; (a260 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c8>)
    a238:	2300      	movs	r3, #0
    a23a:	2101      	movs	r1, #1
    a23c:	6860      	ldr	r0, [r4, #4]
    a23e:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a242:	3078      	adds	r0, #120	; 0x78
    a244:	f003 fbf4 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a248:	2800      	cmp	r0, #0
    a24a:	d108      	bne.n	a25e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c6>
    a24c:	6860      	ldr	r0, [r4, #4]
    a24e:	2108      	movs	r1, #8
    a250:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    a254:	2100      	movs	r1, #0
    a256:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    a25a:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    a25e:	bd10      	pop	{r4, pc}
    a260:	20000104 	.word	0x20000104
    a264:	b570      	push	{r4, r5, r6, lr}
    a266:	4c0e      	ldr	r4, [pc, #56]	; (a2a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1708>)
    a268:	2300      	movs	r3, #0
    a26a:	4619      	mov	r1, r3
    a26c:	6860      	ldr	r0, [r4, #4]
    a26e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a272:	3078      	adds	r0, #120	; 0x78
    a274:	f003 fbdc 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a278:	2500      	movs	r5, #0
    a27a:	b110      	cbz	r0, a282 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16ea>
    a27c:	6860      	ldr	r0, [r4, #4]
    a27e:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    a282:	6860      	ldr	r0, [r4, #4]
    a284:	2300      	movs	r3, #0
    a286:	4619      	mov	r1, r3
    a288:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a28c:	3078      	adds	r0, #120	; 0x78
    a28e:	f003 fbcf 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a292:	2800      	cmp	r0, #0
    a294:	d002      	beq.n	a29c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1704>
    a296:	6860      	ldr	r0, [r4, #4]
    a298:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a29c:	bd70      	pop	{r4, r5, r6, pc}
    a29e:	0000      	.short	0x0000
    a2a0:	20000104 	.word	0x20000104
    a2a4:	b570      	push	{r4, r5, r6, lr}
    a2a6:	4d16      	ldr	r5, [pc, #88]	; (a300 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1768>)
    a2a8:	f04f 0400 	mov.w	r4, #0
    a2ac:	6868      	ldr	r0, [r5, #4]
    a2ae:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    a2b2:	0789      	lsls	r1, r1, #30
    a2b4:	d411      	bmi.n	a2da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1742>
    a2b6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a2ba:	2300      	movs	r3, #0
    a2bc:	4619      	mov	r1, r3
    a2be:	3078      	adds	r0, #120	; 0x78
    a2c0:	f003 fbb6 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2c4:	b120      	cbz	r0, a2d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1738>
    a2c6:	6869      	ldr	r1, [r5, #4]
    a2c8:	2001      	movs	r0, #1
    a2ca:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a2ce:	e008      	b.n	a2e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x174a>
    a2d0:	f240 612b 	movw	r1, #1579	; 0x62b
    a2d4:	2036      	movs	r0, #54	; 0x36
    a2d6:	f7f9 fd5f 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2da:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    a2de:	f880 4158 	strb.w	r4, [r0, #344]	; 0x158
    a2e2:	6868      	ldr	r0, [r5, #4]
    a2e4:	2300      	movs	r3, #0
    a2e6:	4619      	mov	r1, r3
    a2e8:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a2ec:	3078      	adds	r0, #120	; 0x78
    a2ee:	f003 fb9f 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2f2:	2800      	cmp	r0, #0
    a2f4:	d002      	beq.n	a2fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1764>
    a2f6:	6868      	ldr	r0, [r5, #4]
    a2f8:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    a2fc:	bd70      	pop	{r4, r5, r6, pc}
    a2fe:	0000      	.short	0x0000
    a300:	20000104 	.word	0x20000104
    a304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a306:	4d4c      	ldr	r5, [pc, #304]	; (a438 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a0>)
    a308:	4607      	mov	r7, r0
    a30a:	460e      	mov	r6, r1
    a30c:	6868      	ldr	r0, [r5, #4]
    a30e:	f100 0478 	add.w	r4, r0, #120	; 0x78
    a312:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    a316:	f88d 0000 	strb.w	r0, [sp]
    a31a:	9800      	ldr	r0, [sp, #0]
    a31c:	9000      	str	r0, [sp, #0]
    a31e:	f89d 0000 	ldrb.w	r0, [sp]
    a322:	b930      	cbnz	r0, a332 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x179a>
    a324:	7c22      	ldrb	r2, [r4, #16]
    a326:	2300      	movs	r3, #0
    a328:	2101      	movs	r1, #1
    a32a:	4620      	mov	r0, r4
    a32c:	f003 fb80 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a330:	b110      	cbz	r0, a338 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17a0>
    a332:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    a334:	1c40      	adds	r0, r0, #1
    a336:	8760      	strh	r0, [r4, #58]	; 0x3a
    a338:	2001      	movs	r0, #1
    a33a:	213d      	movs	r1, #61	; 0x3d
    a33c:	bbf7      	cbnz	r7, a3bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1824>
    a33e:	782a      	ldrb	r2, [r5, #0]
    a340:	2a02      	cmp	r2, #2
    a342:	d006      	beq.n	a352 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17ba>
    a344:	2a01      	cmp	r2, #1
    a346:	d006      	beq.n	a356 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17be>
    a348:	b1c6      	cbz	r6, a37c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e4>
    a34a:	06f2      	lsls	r2, r6, #27
    a34c:	d507      	bpl.n	a35e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17c6>
    a34e:	211e      	movs	r1, #30
    a350:	e043      	b.n	a3da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a352:	2116      	movs	r1, #22
    a354:	e041      	b.n	a3da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a356:	6869      	ldr	r1, [r5, #4]
    a358:	f891 112c 	ldrb.w	r1, [r1, #300]	; 0x12c
    a35c:	e03d      	b.n	a3da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a35e:	0732      	lsls	r2, r6, #28
    a360:	d43b      	bmi.n	a3da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a362:	07b1      	lsls	r1, r6, #30
    a364:	d001      	beq.n	a36a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17d2>
    a366:	212a      	movs	r1, #42	; 0x2a
    a368:	e037      	b.n	a3da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a36a:	06b1      	lsls	r1, r6, #26
    a36c:	d404      	bmi.n	a378 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e0>
    a36e:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    a372:	2036      	movs	r0, #54	; 0x36
    a374:	f7f9 fd10 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a378:	2123      	movs	r1, #35	; 0x23
    a37a:	e02e      	b.n	a3da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a37c:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    a380:	b129      	cbz	r1, a38e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17f6>
    a382:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    a384:	1c4a      	adds	r2, r1, #1
    a386:	87a2      	strh	r2, [r4, #60]	; 0x3c
    a388:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a38a:	4291      	cmp	r1, r2
    a38c:	d21d      	bcs.n	a3ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a38e:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    a392:	b139      	cbz	r1, a3a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x180c>
    a394:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    a398:	1c4a      	adds	r2, r1, #1
    a39a:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    a39e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a3a0:	4291      	cmp	r1, r2
    a3a2:	d212      	bcs.n	a3ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a3a4:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    a3a6:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    a3a8:	428a      	cmp	r2, r1
    a3aa:	d30b      	bcc.n	a3c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x182c>
    a3ac:	686b      	ldr	r3, [r5, #4]
    a3ae:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    a3b2:	f88d 3000 	strb.w	r3, [sp]
    a3b6:	9b00      	ldr	r3, [sp, #0]
    a3b8:	9300      	str	r3, [sp, #0]
    a3ba:	e000      	b.n	a3be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1826>
    a3bc:	e00d      	b.n	a3da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a3be:	f89d 3000 	ldrb.w	r3, [sp]
    a3c2:	b913      	cbnz	r3, a3ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a3c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    a3c6:	429a      	cmp	r2, r3
    a3c8:	d301      	bcc.n	a3ce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1836>
    a3ca:	2122      	movs	r1, #34	; 0x22
    a3cc:	e005      	b.n	a3da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a3ce:	7c62      	ldrb	r2, [r4, #17]
    a3d0:	b1f2      	cbz	r2, a410 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1878>
    a3d2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    a3d4:	428a      	cmp	r2, r1
    a3d6:	d304      	bcc.n	a3e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    a3d8:	2108      	movs	r1, #8
    a3da:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    a3de:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    a3e2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    a3e6:	f88d 0000 	strb.w	r0, [sp]
    a3ea:	9800      	ldr	r0, [sp, #0]
    a3ec:	9000      	str	r0, [sp, #0]
    a3ee:	f89d 0000 	ldrb.w	r0, [sp]
    a3f2:	b1d8      	cbz	r0, a42c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1894>
    a3f4:	2000      	movs	r0, #0
    a3f6:	7360      	strb	r0, [r4, #13]
    a3f8:	73a0      	strb	r0, [r4, #14]
    a3fa:	7460      	strb	r0, [r4, #17]
    a3fc:	2102      	movs	r1, #2
    a3fe:	6868      	ldr	r0, [r5, #4]
    a400:	f7fd fb8e 	bl	7b20 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a404:	6868      	ldr	r0, [r5, #4]
    a406:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    a40a:	2901      	cmp	r1, #1
    a40c:	d005      	beq.n	a41a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1882>
    a40e:	e009      	b.n	a424 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x188c>
    a410:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    a412:	2906      	cmp	r1, #6
    a414:	d3e5      	bcc.n	a3e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    a416:	213e      	movs	r1, #62	; 0x3e
    a418:	e7df      	b.n	a3da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a41a:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    a41e:	7801      	ldrb	r1, [r0, #0]
    a420:	1e49      	subs	r1, r1, #1
    a422:	7001      	strb	r1, [r0, #0]
    a424:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a428:	f000 b8ea 	b.w	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a42c:	6868      	ldr	r0, [r5, #4]
    a42e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a432:	2100      	movs	r1, #0
    a434:	f7fd bb74 	b.w	7b20 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a438:	20000104 	.word	0x20000104
    a43c:	4804      	ldr	r0, [pc, #16]	; (a450 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18b8>)
    a43e:	b510      	push	{r4, lr}
    a440:	6840      	ldr	r0, [r0, #4]
    a442:	8800      	ldrh	r0, [r0, #0]
    a444:	f7fa f8a6 	bl	4594 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a44c:	f003 b83a 	b.w	d4c4 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a450:	20000104 	.word	0x20000104
    a454:	4a19      	ldr	r2, [pc, #100]	; (a4bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1924>)
    a456:	2901      	cmp	r1, #1
    a458:	6852      	ldr	r2, [r2, #4]
    a45a:	d010      	beq.n	a47e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e6>
    a45c:	2100      	movs	r1, #0
    a45e:	b1c8      	cbz	r0, a494 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fc>
    a460:	2801      	cmp	r0, #1
    a462:	d022      	beq.n	a4aa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1912>
    a464:	2803      	cmp	r0, #3
    a466:	d109      	bne.n	a47c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a468:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    a46c:	2813      	cmp	r0, #19
    a46e:	d005      	beq.n	a47c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a470:	2816      	cmp	r0, #22
    a472:	d003      	beq.n	a47c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a474:	2818      	cmp	r0, #24
    a476:	d001      	beq.n	a47c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a478:	f882 115a 	strb.w	r1, [r2, #346]	; 0x15a
    a47c:	4770      	bx	lr
    a47e:	f892 00fc 	ldrb.w	r0, [r2, #252]	; 0xfc
    a482:	2801      	cmp	r0, #1
    a484:	d0fa      	beq.n	a47c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a486:	bf00      	nop
    a488:	f8d2 0128 	ldr.w	r0, [r2, #296]	; 0x128
    a48c:	7801      	ldrb	r1, [r0, #0]
    a48e:	1e49      	subs	r1, r1, #1
    a490:	7001      	strb	r1, [r0, #0]
    a492:	4770      	bx	lr
    a494:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    a498:	f8b2 3146 	ldrh.w	r3, [r2, #326]	; 0x146
    a49c:	1ac0      	subs	r0, r0, r3
    a49e:	b200      	sxth	r0, r0
    a4a0:	2800      	cmp	r0, #0
    a4a2:	dbf6      	blt.n	a492 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fa>
    a4a4:	f882 1144 	strb.w	r1, [r2, #324]	; 0x144
    a4a8:	4770      	bx	lr
    a4aa:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    a4ae:	f8b2 1130 	ldrh.w	r1, [r2, #304]	; 0x130
    a4b2:	1a40      	subs	r0, r0, r1
    a4b4:	b200      	sxth	r0, r0
    a4b6:	2800      	cmp	r0, #0
    a4b8:	dae6      	bge.n	a488 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18f0>
    a4ba:	4770      	bx	lr
    a4bc:	20000104 	.word	0x20000104

0000a4c0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    a4c0:	b510      	push	{r4, lr}
    a4c2:	6941      	ldr	r1, [r0, #20]
    a4c4:	b119      	cbz	r1, a4ce <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    a4c6:	6842      	ldr	r2, [r0, #4]
    a4c8:	684b      	ldr	r3, [r1, #4]
    a4ca:	429a      	cmp	r2, r3
    a4cc:	d203      	bcs.n	a4d6 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    a4ce:	21c1      	movs	r1, #193	; 0xc1
    a4d0:	2037      	movs	r0, #55	; 0x37
    a4d2:	f7f9 fc61 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4d6:	6902      	ldr	r2, [r0, #16]
    a4d8:	610a      	str	r2, [r1, #16]
    a4da:	68c3      	ldr	r3, [r0, #12]
    a4dc:	60cb      	str	r3, [r1, #12]
    a4de:	b10a      	cbz	r2, a4e4 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    a4e0:	60d1      	str	r1, [r2, #12]
    a4e2:	e001      	b.n	a4e8 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    a4e4:	4a06      	ldr	r2, [pc, #24]	; (a500 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    a4e6:	6011      	str	r1, [r2, #0]
    a4e8:	68ca      	ldr	r2, [r1, #12]
    a4ea:	b132      	cbz	r2, a4fa <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    a4ec:	6111      	str	r1, [r2, #16]
    a4ee:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
    a4f2:	4410      	add	r0, r2
    a4f4:	684a      	ldr	r2, [r1, #4]
    a4f6:	1a80      	subs	r0, r0, r2
    a4f8:	e000      	b.n	a4fc <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    a4fa:	2000      	movs	r0, #0
    a4fc:	6088      	str	r0, [r1, #8]
    a4fe:	bd10      	pop	{r4, pc}
    a500:	200001dc 	.word	0x200001dc

0000a504 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    a504:	b510      	push	{r4, lr}
    a506:	2200      	movs	r2, #0
    a508:	6101      	str	r1, [r0, #16]
    a50a:	b189      	cbz	r1, a530 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    a50c:	68cb      	ldr	r3, [r1, #12]
    a50e:	60c8      	str	r0, [r1, #12]
    a510:	60c3      	str	r3, [r0, #12]
    a512:	b103      	cbz	r3, a516 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    a514:	6118      	str	r0, [r3, #16]
    a516:	6901      	ldr	r1, [r0, #16]
    a518:	6082      	str	r2, [r0, #8]
    a51a:	2900      	cmp	r1, #0
    a51c:	d00f      	beq.n	a53e <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    a51e:	688b      	ldr	r3, [r1, #8]
    a520:	b163      	cbz	r3, a53c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    a522:	6844      	ldr	r4, [r0, #4]
    a524:	42a3      	cmp	r3, r4
    a526:	d207      	bcs.n	a538 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    a528:	212a      	movs	r1, #42	; 0x2a
    a52a:	2037      	movs	r0, #55	; 0x37
    a52c:	f7f9 fc34 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a530:	4903      	ldr	r1, [pc, #12]	; (a540 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    a532:	60c2      	str	r2, [r0, #12]
    a534:	6008      	str	r0, [r1, #0]
    a536:	e7ee      	b.n	a516 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    a538:	1b1b      	subs	r3, r3, r4
    a53a:	6083      	str	r3, [r0, #8]
    a53c:	608a      	str	r2, [r1, #8]
    a53e:	bd10      	pop	{r4, pc}
    a540:	200001dc 	.word	0x200001dc

0000a544 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    a544:	6901      	ldr	r1, [r0, #16]
    a546:	b149      	cbz	r1, a55c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    a548:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    a54c:	441a      	add	r2, r3
    a54e:	688b      	ldr	r3, [r1, #8]
    a550:	441a      	add	r2, r3
    a552:	608a      	str	r2, [r1, #8]
    a554:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    a558:	60d1      	str	r1, [r2, #12]
    a55a:	e002      	b.n	a562 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    a55c:	4a06      	ldr	r2, [pc, #24]	; (a578 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    a55e:	68c1      	ldr	r1, [r0, #12]
    a560:	6011      	str	r1, [r2, #0]
    a562:	e9d0 1003 	ldrd	r1, r0, [r0, #12]
    a566:	b109      	cbz	r1, a56c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    a568:	6108      	str	r0, [r1, #16]
    a56a:	4770      	bx	lr
    a56c:	2800      	cmp	r0, #0
    a56e:	d0fc      	beq.n	a56a <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    a570:	2100      	movs	r1, #0
    a572:	6081      	str	r1, [r0, #8]
    a574:	4770      	bx	lr
    a576:	0000      	.short	0x0000
    a578:	200001dc 	.word	0x200001dc

0000a57c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    a57c:	b510      	push	{r4, lr}
    a57e:	4604      	mov	r4, r0
    a580:	490a      	ldr	r1, [pc, #40]	; (a5ac <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    a582:	2000      	movs	r0, #0
    a584:	4602      	mov	r2, r0
    a586:	6809      	ldr	r1, [r1, #0]
    a588:	1e43      	subs	r3, r0, #1
    a58a:	e008      	b.n	a59e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    a58c:	688a      	ldr	r2, [r1, #8]
    a58e:	42a2      	cmp	r2, r4
    a590:	d303      	bcc.n	a59a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    a592:	429a      	cmp	r2, r3
    a594:	d201      	bcs.n	a59a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    a596:	4613      	mov	r3, r2
    a598:	4608      	mov	r0, r1
    a59a:	460a      	mov	r2, r1
    a59c:	68c9      	ldr	r1, [r1, #12]
    a59e:	2900      	cmp	r1, #0
    a5a0:	d1f4      	bne.n	a58c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    a5a2:	2800      	cmp	r0, #0
    a5a4:	d100      	bne.n	a5a8 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    a5a6:	4610      	mov	r0, r2
    a5a8:	bd10      	pop	{r4, pc}
    a5aa:	0000      	.short	0x0000
    a5ac:	200001dc 	.word	0x200001dc

0000a5b0 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    a5b0:	4801      	ldr	r0, [pc, #4]	; (a5b8 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    a5b2:	6800      	ldr	r0, [r0, #0]
    a5b4:	4770      	bx	lr
    a5b6:	0000      	.short	0x0000
    a5b8:	200001dc 	.word	0x200001dc

0000a5bc <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    a5bc:	4804      	ldr	r0, [pc, #16]	; (a5d0 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    a5be:	6801      	ldr	r1, [r0, #0]
    a5c0:	2000      	movs	r0, #0
    a5c2:	e001      	b.n	a5c8 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    a5c4:	4608      	mov	r0, r1
    a5c6:	68c9      	ldr	r1, [r1, #12]
    a5c8:	2900      	cmp	r1, #0
    a5ca:	d1fb      	bne.n	a5c4 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    a5cc:	4770      	bx	lr
    a5ce:	0000      	.short	0x0000
    a5d0:	200001dc 	.word	0x200001dc

0000a5d4 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    a5d4:	4801      	ldr	r0, [pc, #4]	; (a5dc <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    a5d6:	2100      	movs	r1, #0
    a5d8:	6001      	str	r1, [r0, #0]
    a5da:	4770      	bx	lr
    a5dc:	200001dc 	.word	0x200001dc

0000a5e0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    a5e0:	4903      	ldr	r1, [pc, #12]	; (a5f0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    a5e2:	2000      	movs	r0, #0
    a5e4:	6809      	ldr	r1, [r1, #0]
    a5e6:	2900      	cmp	r1, #0
    a5e8:	d000      	beq.n	a5ec <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    a5ea:	200c      	movs	r0, #12
    a5ec:	4770      	bx	lr
    a5ee:	0000      	.short	0x0000
    a5f0:	200001dc 	.word	0x200001dc

0000a5f4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    a5f4:	4901      	ldr	r1, [pc, #4]	; (a5fc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    a5f6:	7008      	strb	r0, [r1, #0]
    a5f8:	4770      	bx	lr
    a5fa:	0000      	.short	0x0000
    a5fc:	20000296 	.word	0x20000296

0000a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    a600:	4801      	ldr	r0, [pc, #4]	; (a608 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    a602:	7800      	ldrb	r0, [r0, #0]
    a604:	f7f9 b9bc 	b.w	3980 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a608:	20000296 	.word	0x20000296

0000a60c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    a60c:	b500      	push	{lr}
    a60e:	7941      	ldrb	r1, [r0, #5]
    a610:	b095      	sub	sp, #84	; 0x54
    a612:	b141      	cbz	r1, a626 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a614:	2901      	cmp	r1, #1
    a616:	d006      	beq.n	a626 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a618:	2902      	cmp	r1, #2
    a61a:	d004      	beq.n	a626 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a61c:	2903      	cmp	r1, #3
    a61e:	d002      	beq.n	a626 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a620:	2012      	movs	r0, #18
    a622:	b015      	add	sp, #84	; 0x54
    a624:	bd00      	pop	{pc}
    a626:	7901      	ldrb	r1, [r0, #4]
    a628:	f88d 1000 	strb.w	r1, [sp]
    a62c:	7b01      	ldrb	r1, [r0, #12]
    a62e:	f88d 1001 	strb.w	r1, [sp, #1]
    a632:	7942      	ldrb	r2, [r0, #5]
    a634:	2100      	movs	r1, #0
    a636:	2301      	movs	r3, #1
    a638:	b3e2      	cbz	r2, a6b4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xa8>
    a63a:	2a02      	cmp	r2, #2
    a63c:	d03b      	beq.n	a6b6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    a63e:	f88d 3002 	strb.w	r3, [sp, #2]
    a642:	bf00      	nop
    a644:	f8d0 2006 	ldr.w	r2, [r0, #6]
    a648:	f8cd 2003 	str.w	r2, [sp, #3]
    a64c:	8942      	ldrh	r2, [r0, #10]
    a64e:	f8ad 2007 	strh.w	r2, [sp, #7]
    a652:	f88d 3009 	strb.w	r3, [sp, #9]
    a656:	f830 2b01 	ldrh.w	r2, [r0], #1
    a65a:	f240 2371 	movw	r3, #625	; 0x271
    a65e:	435a      	muls	r2, r3
    a660:	9203      	str	r2, [sp, #12]
    a662:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    a666:	435a      	muls	r2, r3
    a668:	9206      	str	r2, [sp, #24]
    a66a:	8982      	ldrh	r2, [r0, #12]
    a66c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    a670:	89c2      	ldrh	r2, [r0, #14]
    a672:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    a676:	8a02      	ldrh	r2, [r0, #16]
    a678:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    a67c:	8a42      	ldrh	r2, [r0, #18]
    a67e:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    a682:	8a82      	ldrh	r2, [r0, #20]
    a684:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    a688:	8ac0      	ldrh	r0, [r0, #22]
    a68a:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    a68e:	2007      	movs	r0, #7
    a690:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    a694:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    a698:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    a69c:	9806      	ldr	r0, [sp, #24]
    a69e:	f000 fbd7 	bl	ae50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>
    a6a2:	b158      	cbz	r0, a6bc <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    a6a4:	9803      	ldr	r0, [sp, #12]
    a6a6:	f000 fbc7 	bl	ae38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    a6aa:	b138      	cbz	r0, a6bc <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    a6ac:	4668      	mov	r0, sp
    a6ae:	f000 f8cb 	bl	a848 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    a6b2:	e7b6      	b.n	a622 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    a6b4:	e7ff      	b.n	a6b6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    a6b6:	f88d 1002 	strb.w	r1, [sp, #2]
    a6ba:	e7c3      	b.n	a644 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    a6bc:	2030      	movs	r0, #48	; 0x30
    a6be:	e7b0      	b.n	a622 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

0000a6c0 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    a6c0:	b538      	push	{r3, r4, r5, lr}
    a6c2:	4c14      	ldr	r4, [pc, #80]	; (a714 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x54>)
    a6c4:	7860      	ldrb	r0, [r4, #1]
    a6c6:	b970      	cbnz	r0, a6e6 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    a6c8:	f7fd f9e6 	bl	7a98 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
    a6cc:	2805      	cmp	r0, #5
    a6ce:	d005      	beq.n	a6dc <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x1c>
    a6d0:	f7fb ff36 	bl	6540 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    a6d4:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    a6d8:	39ff      	subs	r1, #255	; 0xff
    a6da:	d004      	beq.n	a6e6 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    a6dc:	4668      	mov	r0, sp
    a6de:	f7fd f93b 	bl	7958 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q>
    a6e2:	b110      	cbz	r0, a6ea <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x2a>
    a6e4:	e014      	b.n	a710 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x50>
    a6e6:	200c      	movs	r0, #12
    a6e8:	bd38      	pop	{r3, r4, r5, pc}
    a6ea:	9800      	ldr	r0, [sp, #0]
    a6ec:	8800      	ldrh	r0, [r0, #0]
    a6ee:	f003 f85b 	bl	d7a8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    a6f2:	9800      	ldr	r0, [sp, #0]
    a6f4:	2100      	movs	r1, #0
    a6f6:	8800      	ldrh	r0, [r0, #0]
    a6f8:	f7f9 fdcc 	bl	4294 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a6fc:	b120      	cbz	r0, a708 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x48>
    a6fe:	f640 7172 	movw	r1, #3954	; 0xf72
    a702:	2039      	movs	r0, #57	; 0x39
    a704:	f7f9 fb48 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a708:	2001      	movs	r0, #1
    a70a:	7060      	strb	r0, [r4, #1]
    a70c:	f7ff ff78 	bl	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a710:	2000      	movs	r0, #0
    a712:	bd38      	pop	{r3, r4, r5, pc}
    a714:	20000f98 	.word	0x20000f98

0000a718 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a718:	4903      	ldr	r1, [pc, #12]	; (a728 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a71a:	888a      	ldrh	r2, [r1, #4]
    a71c:	8002      	strh	r2, [r0, #0]
    a71e:	7889      	ldrb	r1, [r1, #2]
    a720:	7081      	strb	r1, [r0, #2]
    a722:	2000      	movs	r0, #0
    a724:	4770      	bx	lr
    a726:	0000      	.short	0x0000
    a728:	20000f98 	.word	0x20000f98

0000a72c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    a72c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a72e:	460c      	mov	r4, r1
    a730:	4605      	mov	r5, r0
    a732:	8800      	ldrh	r0, [r0, #0]
    a734:	4669      	mov	r1, sp
    a736:	f003 f952 	bl	d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a73a:	0001      	movs	r1, r0
    a73c:	f04f 0000 	mov.w	r0, #0
    a740:	d005      	beq.n	a74e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    a742:	f8c4 0002 	str.w	r0, [r4, #2]
    a746:	71a0      	strb	r0, [r4, #6]
    a748:	8020      	strh	r0, [r4, #0]
    a74a:	2002      	movs	r0, #2
    a74c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a74e:	9901      	ldr	r1, [sp, #4]
    a750:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    a754:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    a758:	f8d1 2016 	ldr.w	r2, [r1, #22]
    a75c:	f8c4 2002 	str.w	r2, [r4, #2]
    a760:	7e8a      	ldrb	r2, [r1, #26]
    a762:	71a2      	strb	r2, [r4, #6]
    a764:	882a      	ldrh	r2, [r5, #0]
    a766:	8022      	strh	r2, [r4, #0]
    a768:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    a76c:	f88d 2008 	strb.w	r2, [sp, #8]
    a770:	9a02      	ldr	r2, [sp, #8]
    a772:	9202      	str	r2, [sp, #8]
    a774:	f89d 2008 	ldrb.w	r2, [sp, #8]
    a778:	2a00      	cmp	r2, #0
    a77a:	d1eb      	bne.n	a754 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    a77c:	2000      	movs	r0, #0
    a77e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000a780 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    a780:	b51c      	push	{r2, r3, r4, lr}
    a782:	8800      	ldrh	r0, [r0, #0]
    a784:	4669      	mov	r1, sp
    a786:	f003 f92a 	bl	d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a78a:	2800      	cmp	r0, #0
    a78c:	d106      	bne.n	a79c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1c>
    a78e:	f89d 0000 	ldrb.w	r0, [sp]
    a792:	b120      	cbz	r0, a79e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1e>
    a794:	480b      	ldr	r0, [pc, #44]	; (a7c4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x44>)
    a796:	7800      	ldrb	r0, [r0, #0]
    a798:	b190      	cbz	r0, a7c0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x40>
    a79a:	2002      	movs	r0, #2
    a79c:	bd1c      	pop	{r2, r3, r4, pc}
    a79e:	9801      	ldr	r0, [sp, #4]
    a7a0:	f004 fec3 	bl	f52a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    a7a4:	2800      	cmp	r0, #0
    a7a6:	d0f8      	beq.n	a79a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1a>
    a7a8:	9801      	ldr	r0, [sp, #4]
    a7aa:	f890 0159 	ldrb.w	r0, [r0, #345]	; 0x159
    a7ae:	b108      	cbz	r0, a7b4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x34>
    a7b0:	203a      	movs	r0, #58	; 0x3a
    a7b2:	bd1c      	pop	{r2, r3, r4, pc}
    a7b4:	9901      	ldr	r1, [sp, #4]
    a7b6:	2001      	movs	r0, #1
    a7b8:	f881 0159 	strb.w	r0, [r1, #345]	; 0x159
    a7bc:	2000      	movs	r0, #0
    a7be:	bd1c      	pop	{r2, r3, r4, pc}
    a7c0:	2011      	movs	r0, #17
    a7c2:	bd1c      	pop	{r2, r3, r4, pc}
    a7c4:	200001e0 	.word	0x200001e0

0000a7c8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    a7c8:	b510      	push	{r4, lr}
    a7ca:	4604      	mov	r4, r0
    a7cc:	f004 fea4 	bl	f518 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    a7d0:	b130      	cbz	r0, a7e0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    a7d2:	4804      	ldr	r0, [pc, #16]	; (a7e4 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    a7d4:	8881      	ldrh	r1, [r0, #4]
    a7d6:	8021      	strh	r1, [r4, #0]
    a7d8:	88c0      	ldrh	r0, [r0, #6]
    a7da:	8060      	strh	r0, [r4, #2]
    a7dc:	2000      	movs	r0, #0
    a7de:	bd10      	pop	{r4, pc}
    a7e0:	2001      	movs	r0, #1
    a7e2:	bd10      	pop	{r4, pc}
    a7e4:	200001ee 	.word	0x200001ee

0000a7e8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    a7e8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a7ea:	4605      	mov	r5, r0
    a7ec:	f000 fc2a 	bl	b044 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a7f0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a7f4:	b310      	cbz	r0, a83c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    a7f6:	2400      	movs	r4, #0
    a7f8:	a802      	add	r0, sp, #8
    a7fa:	f88d 4004 	strb.w	r4, [sp, #4]
    a7fe:	f88d 4008 	strb.w	r4, [sp, #8]
    a802:	9000      	str	r0, [sp, #0]
    a804:	78aa      	ldrb	r2, [r5, #2]
    a806:	7869      	ldrb	r1, [r5, #1]
    a808:	7828      	ldrb	r0, [r5, #0]
    a80a:	ab01      	add	r3, sp, #4
    a80c:	f004 ff2a 	bl	f664 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    a810:	2800      	cmp	r0, #0
    a812:	d112      	bne.n	a83a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    a814:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a818:	f004 fca1 	bl	f15e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    a81c:	b180      	cbz	r0, a840 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a81e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a822:	f004 fc9c 	bl	f15e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    a826:	b158      	cbz	r0, a840 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a828:	4806      	ldr	r0, [pc, #24]	; (a844 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    a82a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a82e:	7481      	strb	r1, [r0, #18]
    a830:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a834:	74c1      	strb	r1, [r0, #19]
    a836:	8284      	strh	r4, [r0, #20]
    a838:	2000      	movs	r0, #0
    a83a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a83c:	2001      	movs	r0, #1
    a83e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a840:	2011      	movs	r0, #17
    a842:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a844:	20000f98 	.word	0x20000f98

0000a848 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a84c:	a1a2      	add	r1, pc, #648	; (adr r1, aad8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x290>)
    a84e:	4605      	mov	r5, r0
    a850:	e9d1 8700 	ldrd	r8, r7, [r1]
    a854:	7a40      	ldrb	r0, [r0, #9]
    a856:	b087      	sub	sp, #28
    a858:	0781      	lsls	r1, r0, #30
    a85a:	d502      	bpl.n	a862 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1a>
    a85c:	f040 0001 	orr.w	r0, r0, #1
    a860:	7268      	strb	r0, [r5, #9]
    a862:	4628      	mov	r0, r5
    a864:	f004 fcda 	bl	f21c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x156>
    a868:	2800      	cmp	r0, #0
    a86a:	d10c      	bne.n	a886 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a86c:	f004 fe71 	bl	f552 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    a870:	b940      	cbnz	r0, a884 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    a872:	4e9b      	ldr	r6, [pc, #620]	; (aae0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x298>)
    a874:	7870      	ldrb	r0, [r6, #1]
    a876:	b928      	cbnz	r0, a884 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    a878:	f7fb fe62 	bl	6540 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    a87c:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    a880:	39ff      	subs	r1, #255	; 0xff
    a882:	d003      	beq.n	a88c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x44>
    a884:	200c      	movs	r0, #12
    a886:	b007      	add	sp, #28
    a888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a88c:	7828      	ldrb	r0, [r5, #0]
    a88e:	f04f 0b00 	mov.w	fp, #0
    a892:	f04f 0a01 	mov.w	sl, #1
    a896:	b9e8      	cbnz	r0, a8d4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8c>
    a898:	78a8      	ldrb	r0, [r5, #2]
    a89a:	9000      	str	r0, [sp, #0]
    a89c:	f105 0903 	add.w	r9, r5, #3
    a8a0:	a902      	add	r1, sp, #8
    a8a2:	2000      	movs	r0, #0
    a8a4:	f002 ff26 	bl	d6f4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    a8a8:	b178      	cbz	r0, a8ca <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x82>
    a8aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    a8ae:	e10e      	b.n	aace <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x286>
    a8b0:	9c04      	ldr	r4, [sp, #16]
    a8b2:	9800      	ldr	r0, [sp, #0]
    a8b4:	f004 f890 	bl	e9d8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    a8b8:	78a1      	ldrb	r1, [r4, #2]
    a8ba:	4288      	cmp	r0, r1
    a8bc:	d105      	bne.n	a8ca <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x82>
    a8be:	2206      	movs	r2, #6
    a8c0:	4649      	mov	r1, r9
    a8c2:	1ce0      	adds	r0, r4, #3
    a8c4:	f001 fe5e 	bl	c584 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    a8c8:	b320      	cbz	r0, a914 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xcc>
    a8ca:	a802      	add	r0, sp, #8
    a8cc:	f7f9 fc94 	bl	41f8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a8d0:	2800      	cmp	r0, #0
    a8d2:	d0ed      	beq.n	a8b0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x68>
    a8d4:	2103      	movs	r1, #3
    a8d6:	f105 0018 	add.w	r0, r5, #24
    a8da:	f000 fac5 	bl	ae68 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x160>
    a8de:	2200      	movs	r2, #0
    a8e0:	4611      	mov	r1, r2
    a8e2:	a801      	add	r0, sp, #4
    a8e4:	f7f9 fcae 	bl	4244 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a8e8:	0004      	movs	r4, r0
    a8ea:	d015      	beq.n	a918 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd0>
    a8ec:	2100      	movs	r1, #0
    a8ee:	f7fb f953 	bl	5b98 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    a8f2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a8f6:	8020      	strh	r0, [r4, #0]
    a8f8:	487a      	ldr	r0, [pc, #488]	; (aae4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x29c>)
    a8fa:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    a8fe:	f004 fe0b 	bl	f518 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    a902:	2800      	cmp	r0, #0
    a904:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a908:	d008      	beq.n	a91c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd4>
    a90a:	88b1      	ldrh	r1, [r6, #4]
    a90c:	88f2      	ldrh	r2, [r6, #6]
    a90e:	84c1      	strh	r1, [r0, #38]	; 0x26
    a910:	8502      	strh	r2, [r0, #40]	; 0x28
    a912:	e006      	b.n	a922 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xda>
    a914:	200b      	movs	r0, #11
    a916:	e7b6      	b.n	a886 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a918:	2009      	movs	r0, #9
    a91a:	e7b4      	b.n	a886 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a91c:	221b      	movs	r2, #27
    a91e:	84c2      	strh	r2, [r0, #38]	; 0x26
    a920:	8502      	strh	r2, [r0, #40]	; 0x28
    a922:	78f1      	ldrb	r1, [r6, #3]
    a924:	9100      	str	r1, [sp, #0]
    a926:	46b1      	mov	r9, r6
    a928:	78b3      	ldrb	r3, [r6, #2]
    a92a:	88f2      	ldrh	r2, [r6, #6]
    a92c:	88b1      	ldrh	r1, [r6, #4]
    a92e:	8820      	ldrh	r0, [r4, #0]
    a930:	f7f9 fd6a 	bl	4408 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a934:	b110      	cbz	r0, a93c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf4>
    a936:	f640 618b 	movw	r1, #3723	; 0xe8b
    a93a:	e0c8      	b.n	aace <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x286>
    a93c:	8820      	ldrh	r0, [r4, #0]
    a93e:	f7fb fd53 	bl	63e8 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    a942:	6120      	str	r0, [r4, #16]
    a944:	a068      	add	r0, pc, #416	; (adr r0, aae8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    a946:	f104 0618 	add.w	r6, r4, #24
    a94a:	6800      	ldr	r0, [r0, #0]
    a94c:	9000      	str	r0, [sp, #0]
    a94e:	2103      	movs	r1, #3
    a950:	4668      	mov	r0, sp
    a952:	f7f9 fabd 	bl	3ed0 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    a956:	2000      	movs	r0, #0
    a958:	4669      	mov	r1, sp
    a95a:	5c0a      	ldrb	r2, [r1, r0]
    a95c:	5432      	strb	r2, [r6, r0]
    a95e:	1c40      	adds	r0, r0, #1
    a960:	b2c0      	uxtb	r0, r0
    a962:	2803      	cmp	r0, #3
    a964:	d3f9      	bcc.n	a95a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x112>
    a966:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
    a968:	f003 f845 	bl	d9f6 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a96c:	60e0      	str	r0, [r4, #12]
    a96e:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    a970:	82a0      	strh	r0, [r4, #20]
    a972:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
    a974:	82e0      	strh	r0, [r4, #22]
    a976:	7a68      	ldrb	r0, [r5, #9]
    a978:	f004 fbd0 	bl	f11c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    a97c:	f8d9 1008 	ldr.w	r1, [r9, #8]
    a980:	464e      	mov	r6, r9
    a982:	4620      	mov	r0, r4
    a984:	62e1      	str	r1, [r4, #44]	; 0x2c
    a986:	f003 fe49 	bl	e61c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI>
    a98a:	f8c4 808e 	str.w	r8, [r4, #142]	; 0x8e
    a98e:	46d1      	mov	r9, sl
    a990:	4650      	mov	r0, sl
    a992:	f884 7092 	strb.w	r7, [r4, #146]	; 0x92
    a996:	f884 012e 	strb.w	r0, [r4, #302]	; 0x12e
    a99a:	4852      	ldr	r0, [pc, #328]	; (aae4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x29c>)
    a99c:	3808      	subs	r0, #8
    a99e:	6843      	ldr	r3, [r0, #4]
    a9a0:	b123      	cbz	r3, a9ac <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x164>
    a9a2:	2201      	movs	r2, #1
    a9a4:	f504 7199 	add.w	r1, r4, #306	; 0x132
    a9a8:	4620      	mov	r0, r4
    a9aa:	4798      	blx	r3
    a9ac:	8821      	ldrh	r1, [r4, #0]
    a9ae:	f8ad 1008 	strh.w	r1, [sp, #8]
    a9b2:	7cb1      	ldrb	r1, [r6, #18]
    a9b4:	f88d 100a 	strb.w	r1, [sp, #10]
    a9b8:	7cf1      	ldrb	r1, [r6, #19]
    a9ba:	f88d 100b 	strb.w	r1, [sp, #11]
    a9be:	8ab1      	ldrh	r1, [r6, #20]
    a9c0:	f8ad 100c 	strh.w	r1, [sp, #12]
    a9c4:	a905      	add	r1, sp, #20
    a9c6:	9100      	str	r1, [sp, #0]
    a9c8:	2000      	movs	r0, #0
    a9ca:	ab04      	add	r3, sp, #16
    a9cc:	aa02      	add	r2, sp, #8
    a9ce:	4621      	mov	r1, r4
    a9d0:	f004 fd63 	bl	f49a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d4>
    a9d4:	0006      	movs	r6, r0
    a9d6:	d10f      	bne.n	a9f8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1b0>
    a9d8:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a9dc:	f88d 0018 	strb.w	r0, [sp, #24]
    a9e0:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a9e4:	f88d 0019 	strb.w	r0, [sp, #25]
    a9e8:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a9ec:	f8ad 001a 	strh.w	r0, [sp, #26]
    a9f0:	a906      	add	r1, sp, #24
    a9f2:	4620      	mov	r0, r4
    a9f4:	f003 f8bc 	bl	db70 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a9f8:	46d8      	mov	r8, fp
    a9fa:	f88d b000 	strb.w	fp, [sp]
    a9fe:	2101      	movs	r1, #1
    aa00:	4668      	mov	r0, sp
    aa02:	f7f9 fa65 	bl	3ed0 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    aa06:	f89d 0000 	ldrb.w	r0, [sp]
    aa0a:	f000 0107 	and.w	r1, r0, #7
    aa0e:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    aa12:	4411      	add	r1, r2
    aa14:	f3c0 1040 	ubfx	r0, r0, #5, #1
    aa18:	4408      	add	r0, r1
    aa1a:	f88d 0000 	strb.w	r0, [sp]
    aa1e:	1d40      	adds	r0, r0, #5
    aa20:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    aa24:	2809      	cmp	r0, #9
    aa26:	d202      	bcs.n	aa2e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1e6>
    aa28:	3008      	adds	r0, #8
    aa2a:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    aa2e:	2101      	movs	r1, #1
    aa30:	4620      	mov	r0, r4
    aa32:	f7fb f8b1 	bl	5b98 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    aa36:	7868      	ldrb	r0, [r5, #1]
    aa38:	f7fb fe56 	bl	66e8 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    aa3c:	bbee      	cbnz	r6, aaba <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    aa3e:	78a9      	ldrb	r1, [r5, #2]
    aa40:	7828      	ldrb	r0, [r5, #0]
    aa42:	1cea      	adds	r2, r5, #3
    aa44:	f7fb fdfa 	bl	663c <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    aa48:	b148      	cbz	r0, aa5e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x216>
    aa4a:	f7fb fd21 	bl	6490 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    aa4e:	78a9      	ldrb	r1, [r5, #2]
    aa50:	7828      	ldrb	r0, [r5, #0]
    aa52:	1cea      	adds	r2, r5, #3
    aa54:	f7fb fe16 	bl	6684 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    aa58:	0006      	movs	r6, r0
    aa5a:	d002      	beq.n	aa62 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x21a>
    aa5c:	e02d      	b.n	aaba <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    aa5e:	2612      	movs	r6, #18
    aa60:	e02b      	b.n	aaba <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    aa62:	78a8      	ldrb	r0, [r5, #2]
    aa64:	f003 ffb8 	bl	e9d8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    aa68:	4602      	mov	r2, r0
    aa6a:	1ceb      	adds	r3, r5, #3
    aa6c:	4621      	mov	r1, r4
    aa6e:	2003      	movs	r0, #3
    aa70:	f7fb fd50 	bl	6514 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    aa74:	0006      	movs	r6, r0
    aa76:	d120      	bne.n	aaba <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    aa78:	464f      	mov	r7, r9
    aa7a:	4648      	mov	r0, r9
    aa7c:	f7fb fda8 	bl	65d0 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    aa80:	0006      	movs	r6, r0
    aa82:	d11a      	bne.n	aaba <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    aa84:	f88d 8008 	strb.w	r8, [sp, #8]
    aa88:	7a68      	ldrb	r0, [r5, #9]
    aa8a:	07c0      	lsls	r0, r0, #31
    aa8c:	d005      	beq.n	aa9a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x252>
    aa8e:	68e8      	ldr	r0, [r5, #12]
    aa90:	9003      	str	r0, [sp, #12]
    aa92:	69a8      	ldr	r0, [r5, #24]
    aa94:	9004      	str	r0, [sp, #16]
    aa96:	f88d 7008 	strb.w	r7, [sp, #8]
    aa9a:	a802      	add	r0, sp, #8
    aa9c:	f7fd f802 	bl	7aa4 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>
    aaa0:	4606      	mov	r6, r0
    aaa2:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
    aaa6:	f7fb fe93 	bl	67d0 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    aaaa:	b936      	cbnz	r6, aaba <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    aaac:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    aab0:	4620      	mov	r0, r4
    aab2:	f7fc ff0d 	bl	78d0 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ>
    aab6:	0006      	movs	r6, r0
    aab8:	d00c      	beq.n	aad4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    aaba:	8820      	ldrh	r0, [r4, #0]
    aabc:	f002 fe74 	bl	d7a8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    aac0:	8820      	ldrh	r0, [r4, #0]
    aac2:	2100      	movs	r1, #0
    aac4:	f7f9 fbe6 	bl	4294 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    aac8:	b120      	cbz	r0, aad4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    aaca:	f640 7152 	movw	r1, #3922	; 0xf52
    aace:	2039      	movs	r0, #57	; 0x39
    aad0:	f7f9 f962 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aad4:	4630      	mov	r0, r6
    aad6:	e6d6      	b.n	a886 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    aad8:	ffffffff 	.word	0xffffffff
    aadc:	0000001f 	.word	0x0000001f
    aae0:	20000f98 	.word	0x20000f98
    aae4:	200001e8 	.word	0x200001e8
    aae8:	00332211 	.word	0x00332211

0000aaec <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    aaec:	7801      	ldrb	r1, [r0, #0]
    aaee:	b179      	cbz	r1, ab10 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    aaf0:	7841      	ldrb	r1, [r0, #1]
    aaf2:	b169      	cbz	r1, ab10 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    aaf4:	8841      	ldrh	r1, [r0, #2]
    aaf6:	291b      	cmp	r1, #27
    aaf8:	d30a      	bcc.n	ab10 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    aafa:	8881      	ldrh	r1, [r0, #4]
    aafc:	291b      	cmp	r1, #27
    aafe:	d307      	bcc.n	ab10 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ab00:	4904      	ldr	r1, [pc, #16]	; (ab14 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    ab02:	6802      	ldr	r2, [r0, #0]
    ab04:	f8c1 2002 	str.w	r2, [r1, #2]
    ab08:	8880      	ldrh	r0, [r0, #4]
    ab0a:	80c8      	strh	r0, [r1, #6]
    ab0c:	2000      	movs	r0, #0
    ab0e:	4770      	bx	lr
    ab10:	2012      	movs	r0, #18
    ab12:	4770      	bx	lr
    ab14:	20000f98 	.word	0x20000f98

0000ab18 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    ab18:	6800      	ldr	r0, [r0, #0]
    ab1a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ab1e:	4288      	cmp	r0, r1
    ab20:	d303      	bcc.n	ab2a <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    ab22:	4903      	ldr	r1, [pc, #12]	; (ab30 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    ab24:	6088      	str	r0, [r1, #8]
    ab26:	2000      	movs	r0, #0
    ab28:	4770      	bx	lr
    ab2a:	2012      	movs	r0, #18
    ab2c:	4770      	bx	lr
    ab2e:	0000      	.short	0x0000
    ab30:	20000f98 	.word	0x20000f98

0000ab34 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    ab34:	b510      	push	{r4, lr}
    ab36:	b086      	sub	sp, #24
    ab38:	4604      	mov	r4, r0
    ab3a:	f004 fbe6 	bl	f30a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x244>
    ab3e:	2800      	cmp	r0, #0
    ab40:	d103      	bne.n	ab4a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    ab42:	f004 fd06 	bl	f552 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    ab46:	b110      	cbz	r0, ab4e <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    ab48:	200c      	movs	r0, #12
    ab4a:	b006      	add	sp, #24
    ab4c:	bd10      	pop	{r4, pc}
    ab4e:	2102      	movs	r1, #2
    ab50:	f104 0010 	add.w	r0, r4, #16
    ab54:	f000 f988 	bl	ae68 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x160>
    ab58:	78a0      	ldrb	r0, [r4, #2]
    ab5a:	f88d 0008 	strb.w	r0, [sp, #8]
    ab5e:	78a0      	ldrb	r0, [r4, #2]
    ab60:	f88d 0000 	strb.w	r0, [sp]
    ab64:	7860      	ldrb	r0, [r4, #1]
    ab66:	f88d 0003 	strb.w	r0, [sp, #3]
    ab6a:	7820      	ldrb	r0, [r4, #0]
    ab6c:	f88d 0002 	strb.w	r0, [sp, #2]
    ab70:	7e20      	ldrb	r0, [r4, #24]
    ab72:	f88d 0004 	strb.w	r0, [sp, #4]
    ab76:	78a0      	ldrb	r0, [r4, #2]
    ab78:	07c0      	lsls	r0, r0, #31
    ab7a:	d00b      	beq.n	ab94 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    ab7c:	78e0      	ldrb	r0, [r4, #3]
    ab7e:	2801      	cmp	r0, #1
    ab80:	d011      	beq.n	aba6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    ab82:	b190      	cbz	r0, abaa <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    ab84:	f05f 0000 	movs.w	r0, #0
    ab88:	f88d 0001 	strb.w	r0, [sp, #1]
    ab8c:	68a0      	ldr	r0, [r4, #8]
    ab8e:	9003      	str	r0, [sp, #12]
    ab90:	6920      	ldr	r0, [r4, #16]
    ab92:	9004      	str	r0, [sp, #16]
    ab94:	a802      	add	r0, sp, #8
    ab96:	f7fc ff85 	bl	7aa4 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>
    ab9a:	2800      	cmp	r0, #0
    ab9c:	d1d5      	bne.n	ab4a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    ab9e:	4668      	mov	r0, sp
    aba0:	f7fb fe1e 	bl	67e0 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    aba4:	e7d1      	b.n	ab4a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    aba6:	2002      	movs	r0, #2
    aba8:	e7ee      	b.n	ab88 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    abaa:	2001      	movs	r0, #1
    abac:	e7ec      	b.n	ab88 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

0000abb0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    abb0:	4a03      	ldr	r2, [pc, #12]	; (abc0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    abb2:	e9d2 1200 	ldrd	r1, r2, [r2]
    abb6:	6001      	str	r1, [r0, #0]
    abb8:	6042      	str	r2, [r0, #4]
    abba:	2000      	movs	r0, #0
    abbc:	4770      	bx	lr
    abbe:	0000      	.short	0x0000
    abc0:	0000aef4 	.word	0x0000aef4

0000abc4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    abc4:	b510      	push	{r4, lr}
    abc6:	2005      	movs	r0, #5
    abc8:	f000 fa32 	bl	b030 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    abcc:	f7fd fe14 	bl	87f8 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    abd0:	4902      	ldr	r1, [pc, #8]	; (abdc <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    abd2:	4801      	ldr	r0, [pc, #4]	; (abd8 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    abd4:	6048      	str	r0, [r1, #4]
    abd6:	bd10      	pop	{r4, pc}
    abd8:	0000ad3d 	.word	0x0000ad3d
    abdc:	200001e0 	.word	0x200001e0

0000abe0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    abe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    abe4:	b086      	sub	sp, #24
    abe6:	468a      	mov	sl, r1
    abe8:	4606      	mov	r6, r0
    abea:	8800      	ldrh	r0, [r0, #0]
    abec:	a901      	add	r1, sp, #4
    abee:	f002 fef6 	bl	d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    abf2:	2800      	cmp	r0, #0
    abf4:	d139      	bne.n	ac6a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    abf6:	9802      	ldr	r0, [sp, #8]
    abf8:	f04f 0801 	mov.w	r8, #1
    abfc:	4601      	mov	r1, r0
    abfe:	4689      	mov	r9, r1
    ac00:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    ac04:	f88d 1000 	strb.w	r1, [sp]
    ac08:	9900      	ldr	r1, [sp, #0]
    ac0a:	9100      	str	r1, [sp, #0]
    ac0c:	f89d 5000 	ldrb.w	r5, [sp]
    ac10:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ac14:	3078      	adds	r0, #120	; 0x78
    ac16:	2921      	cmp	r1, #33	; 0x21
    ac18:	d100      	bne.n	ac1c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    ac1a:	b13d      	cbz	r5, ac2c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    ac1c:	2400      	movs	r4, #0
    ac1e:	304e      	adds	r0, #78	; 0x4e
    ac20:	2108      	movs	r1, #8
    ac22:	4607      	mov	r7, r0
    ac24:	f003 fece 	bl	e9c4 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    ac28:	b110      	cbz	r0, ac30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    ac2a:	e007      	b.n	ac3c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ac2c:	2401      	movs	r4, #1
    ac2e:	e7f6      	b.n	ac1e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    ac30:	210b      	movs	r1, #11
    ac32:	4638      	mov	r0, r7
    ac34:	f003 fec6 	bl	e9c4 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    ac38:	b900      	cbnz	r0, ac3c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ac3a:	b1ac      	cbz	r4, ac68 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    ac3c:	a804      	add	r0, sp, #16
    ac3e:	9000      	str	r0, [sp, #0]
    ac40:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ac44:	ab03      	add	r3, sp, #12
    ac46:	4632      	mov	r2, r6
    ac48:	4649      	mov	r1, r9
    ac4a:	f004 fc26 	bl	f49a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d4>
    ac4e:	0007      	movs	r7, r0
    ac50:	d10b      	bne.n	ac6a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    ac52:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ac56:	9c02      	ldr	r4, [sp, #8]
    ac58:	b150      	cbz	r0, ac70 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x90>
    ac5a:	f504 74df 	add.w	r4, r4, #446	; 0x1be
    ac5e:	bf00      	nop
    ac60:	f884 8001 	strb.w	r8, [r4, #1]
    ac64:	b94d      	cbnz	r5, ac7a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
    ac66:	e006      	b.n	ac76 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x96>
    ac68:	201a      	movs	r0, #26
    ac6a:	b006      	add	sp, #24
    ac6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ac70:	f504 749f 	add.w	r4, r4, #318	; 0x13e
    ac74:	e7f4      	b.n	ac60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x80>
    ac76:	7820      	ldrb	r0, [r4, #0]
    ac78:	b108      	cbz	r0, ac7e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
    ac7a:	273a      	movs	r7, #58	; 0x3a
    ac7c:	e012      	b.n	aca4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
    ac7e:	f884 a000 	strb.w	sl, [r4]
    ac82:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ac86:	70a0      	strb	r0, [r4, #2]
    ac88:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ac8c:	70e1      	strb	r1, [r4, #3]
    ac8e:	f88d 0000 	strb.w	r0, [sp]
    ac92:	f88d 1001 	strb.w	r1, [sp, #1]
    ac96:	88b0      	ldrh	r0, [r6, #4]
    ac98:	f8ad 0002 	strh.w	r0, [sp, #2]
    ac9c:	4669      	mov	r1, sp
    ac9e:	4648      	mov	r0, r9
    aca0:	f002 ff66 	bl	db70 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    aca4:	2000      	movs	r0, #0
    aca6:	7060      	strb	r0, [r4, #1]
    aca8:	4638      	mov	r0, r7
    acaa:	e7de      	b.n	ac6a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>

0000acac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    acac:	b510      	push	{r4, lr}
    acae:	f002 fd8f 	bl	d7d0 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    acb2:	f7fa fd17 	bl	56e4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    acb6:	f000 f9d5 	bl	b064 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    acba:	4811      	ldr	r0, [pc, #68]	; (ad00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>)
    acbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    acc0:	4b10      	ldr	r3, [pc, #64]	; (ad04 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    acc2:	81c1      	strh	r1, [r0, #14]
    acc4:	8201      	strh	r1, [r0, #16]
    acc6:	2100      	movs	r1, #0
    acc8:	75c1      	strb	r1, [r0, #23]
    acca:	8301      	strh	r1, [r0, #24]
    accc:	8001      	strh	r1, [r0, #0]
    acce:	221b      	movs	r2, #27
    acd0:	801a      	strh	r2, [r3, #0]
    acd2:	f44f 74a4 	mov.w	r4, #328	; 0x148
    acd6:	805c      	strh	r4, [r3, #2]
    acd8:	809a      	strh	r2, [r3, #4]
    acda:	80dc      	strh	r4, [r3, #6]
    acdc:	7481      	strb	r1, [r0, #18]
    acde:	74c1      	strb	r1, [r0, #19]
    ace0:	2303      	movs	r3, #3
    ace2:	7083      	strb	r3, [r0, #2]
    ace4:	2302      	movs	r3, #2
    ace6:	70c3      	strb	r3, [r0, #3]
    ace8:	8082      	strh	r2, [r0, #4]
    acea:	80c2      	strh	r2, [r0, #6]
    acec:	f640 62a6 	movw	r2, #3750	; 0xea6
    acf0:	6082      	str	r2, [r0, #8]
    acf2:	4a04      	ldr	r2, [pc, #16]	; (ad04 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    acf4:	1f92      	subs	r2, r2, #6
    acf6:	7011      	strb	r1, [r2, #0]
    acf8:	7581      	strb	r1, [r0, #22]
    acfa:	7301      	strb	r1, [r0, #12]
    acfc:	bd10      	pop	{r4, pc}
    acfe:	0000      	.short	0x0000
    ad00:	20000f98 	.word	0x20000f98
    ad04:	200001ee 	.word	0x200001ee

0000ad08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    ad08:	b510      	push	{r4, lr}
    ad0a:	b158      	cbz	r0, ad24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    ad0c:	490a      	ldr	r1, [pc, #40]	; (ad38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    ad0e:	780a      	ldrb	r2, [r1, #0]
    ad10:	b16a      	cbz	r2, ad2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    ad12:	2200      	movs	r2, #0
    ad14:	7042      	strb	r2, [r0, #1]
    ad16:	2303      	movs	r3, #3
    ad18:	7003      	strb	r3, [r0, #0]
    ad1a:	2301      	movs	r3, #1
    ad1c:	7103      	strb	r3, [r0, #4]
    ad1e:	700a      	strb	r2, [r1, #0]
    ad20:	4618      	mov	r0, r3
    ad22:	bd10      	pop	{r4, pc}
    ad24:	f641 1146 	movw	r1, #6470	; 0x1946
    ad28:	2039      	movs	r0, #57	; 0x39
    ad2a:	f7f9 f835 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad32:	f7fb b881 	b.w	5e38 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    ad36:	0000      	.short	0x0000
    ad38:	20000f98 	.word	0x20000f98
    ad3c:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad40:	4692      	mov	sl, r2
    ad42:	460f      	mov	r7, r1
    ad44:	4681      	mov	r9, r0
    ad46:	f004 fbe7 	bl	f518 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    ad4a:	2800      	cmp	r0, #0
    ad4c:	d063      	beq.n	ae16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    ad4e:	4933      	ldr	r1, [pc, #204]	; (ae1c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    ad50:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    ad54:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    ad58:	8808      	ldrh	r0, [r1, #0]
    ad5a:	4290      	cmp	r0, r2
    ad5c:	d300      	bcc.n	ad60 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    ad5e:	4610      	mov	r0, r2
    ad60:	4680      	mov	r8, r0
    ad62:	8888      	ldrh	r0, [r1, #4]
    ad64:	42b0      	cmp	r0, r6
    ad66:	d200      	bcs.n	ad6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    ad68:	4606      	mov	r6, r0
    ad6a:	884c      	ldrh	r4, [r1, #2]
    ad6c:	f640 0048 	movw	r0, #2120	; 0x848
    ad70:	4284      	cmp	r4, r0
    ad72:	d300      	bcc.n	ad76 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    ad74:	4604      	mov	r4, r0
    ad76:	88cd      	ldrh	r5, [r1, #6]
    ad78:	4285      	cmp	r5, r0
    ad7a:	d300      	bcc.n	ad7e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    ad7c:	4605      	mov	r5, r0
    ad7e:	4284      	cmp	r4, r0
    ad80:	d300      	bcc.n	ad84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    ad82:	4604      	mov	r4, r0
    ad84:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ad88:	2e1b      	cmp	r6, #27
    ad8a:	d001      	beq.n	ad90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    ad8c:	428d      	cmp	r5, r1
    ad8e:	d104      	bne.n	ad9a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    ad90:	f1b8 0f1b 	cmp.w	r8, #27
    ad94:	d03f      	beq.n	ae16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    ad96:	428c      	cmp	r4, r1
    ad98:	d03d      	beq.n	ae16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    ad9a:	466a      	mov	r2, sp
    ad9c:	4651      	mov	r1, sl
    ad9e:	4648      	mov	r0, r9
    ada0:	f004 fb3e 	bl	f420 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    ada4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    ada8:	4641      	mov	r1, r8
    adaa:	4540      	cmp	r0, r8
    adac:	d900      	bls.n	adb0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    adae:	4608      	mov	r0, r1
    adb0:	80f8      	strh	r0, [r7, #6]
    adb2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    adb6:	42a1      	cmp	r1, r4
    adb8:	d800      	bhi.n	adbc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    adba:	460c      	mov	r4, r1
    adbc:	813c      	strh	r4, [r7, #8]
    adbe:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    adc2:	42b1      	cmp	r1, r6
    adc4:	d800      	bhi.n	adc8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    adc6:	460e      	mov	r6, r1
    adc8:	807e      	strh	r6, [r7, #2]
    adca:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    adce:	42a9      	cmp	r1, r5
    add0:	d900      	bls.n	add4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    add2:	4629      	mov	r1, r5
    add4:	80b9      	strh	r1, [r7, #4]
    add6:	2201      	movs	r2, #1
    add8:	703a      	strb	r2, [r7, #0]
    adda:	381b      	subs	r0, #27
    addc:	28e0      	cmp	r0, #224	; 0xe0
    adde:	d902      	bls.n	ade6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    ade0:	f640 4172 	movw	r1, #3186	; 0xc72
    ade4:	e014      	b.n	ae10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    ade6:	3e1b      	subs	r6, #27
    ade8:	2ee0      	cmp	r6, #224	; 0xe0
    adea:	d902      	bls.n	adf2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    adec:	f640 4174 	movw	r1, #3188	; 0xc74
    adf0:	e00e      	b.n	ae10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    adf2:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    adf6:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    adfa:	4284      	cmp	r4, r0
    adfc:	d902      	bls.n	ae04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    adfe:	f640 4176 	movw	r1, #3190	; 0xc76
    ae02:	e005      	b.n	ae10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    ae04:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    ae08:	4281      	cmp	r1, r0
    ae0a:	d904      	bls.n	ae16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    ae0c:	f640 4178 	movw	r1, #3192	; 0xc78
    ae10:	2039      	movs	r0, #57	; 0x39
    ae12:	f7f8 ffc1 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae16:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae1a:	0000      	.short	0x0000
    ae1c:	200001ee 	.word	0x200001ee
    ae20:	4904      	ldr	r1, [pc, #16]	; (ae34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12c>)
    ae22:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    ae26:	4288      	cmp	r0, r1
    ae28:	d301      	bcc.n	ae2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    ae2a:	2000      	movs	r0, #0
    ae2c:	4770      	bx	lr
    ae2e:	2001      	movs	r0, #1
    ae30:	4770      	bx	lr
    ae32:	0000      	.short	0x0000
    ae34:	0270f3cc 	.word	0x0270f3cc
    ae38:	4904      	ldr	r1, [pc, #16]	; (ae4c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x144>)
    ae3a:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    ae3e:	4288      	cmp	r0, r1
    ae40:	d301      	bcc.n	ae46 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    ae42:	2000      	movs	r0, #0
    ae44:	4770      	bx	lr
    ae46:	2001      	movs	r0, #1
    ae48:	4770      	bx	lr
    ae4a:	0000      	.short	0x0000
    ae4c:	009c363d 	.word	0x009c363d
    ae50:	4904      	ldr	r1, [pc, #16]	; (ae64 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>)
    ae52:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    ae56:	4288      	cmp	r0, r1
    ae58:	d301      	bcc.n	ae5e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    ae5a:	2000      	movs	r0, #0
    ae5c:	4770      	bx	lr
    ae5e:	2001      	movs	r0, #1
    ae60:	4770      	bx	lr
    ae62:	0000      	.short	0x0000
    ae64:	009c363d 	.word	0x009c363d
    ae68:	b530      	push	{r4, r5, lr}
    ae6a:	2200      	movs	r2, #0
    ae6c:	4d07      	ldr	r5, [pc, #28]	; (ae8c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    ae6e:	e009      	b.n	ae84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    ae70:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    ae74:	462b      	mov	r3, r5
    ae76:	429c      	cmp	r4, r3
    ae78:	d800      	bhi.n	ae7c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x174>
    ae7a:	4623      	mov	r3, r4
    ae7c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    ae80:	1c52      	adds	r2, r2, #1
    ae82:	b2d2      	uxtb	r2, r2
    ae84:	428a      	cmp	r2, r1
    ae86:	d3f3      	bcc.n	ae70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x168>
    ae88:	bd30      	pop	{r4, r5, pc}
    ae8a:	0000      	.short	0x0000
    ae8c:	00f42400 	.word	0x00f42400
    ae90:	4a09      	ldr	r2, [pc, #36]	; (aeb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>)
    ae92:	4290      	cmp	r0, r2
    ae94:	d80b      	bhi.n	aeae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a6>
    ae96:	2901      	cmp	r1, #1
    ae98:	d002      	beq.n	aea0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    ae9a:	2904      	cmp	r1, #4
    ae9c:	d003      	beq.n	aea6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    ae9e:	e008      	b.n	aeb2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1aa>
    aea0:	f240 7153 	movw	r1, #1875	; 0x753
    aea4:	e001      	b.n	aeaa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a2>
    aea6:	f640 11c4 	movw	r1, #2500	; 0x9c4
    aeaa:	4288      	cmp	r0, r1
    aeac:	d201      	bcs.n	aeb2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1aa>
    aeae:	2000      	movs	r0, #0
    aeb0:	4770      	bx	lr
    aeb2:	2001      	movs	r0, #1
    aeb4:	4770      	bx	lr
    aeb6:	0000      	.short	0x0000
    aeb8:	0270fd8f 	.word	0x0270fd8f
    aebc:	b510      	push	{r4, lr}
    aebe:	4604      	mov	r4, r0
    aec0:	88c1      	ldrh	r1, [r0, #6]
    aec2:	8880      	ldrh	r0, [r0, #4]
    aec4:	f004 f960 	bl	f188 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    aec8:	2800      	cmp	r0, #0
    aeca:	d10f      	bne.n	aeec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e4>
    aecc:	8861      	ldrh	r1, [r4, #2]
    aece:	8820      	ldrh	r0, [r4, #0]
    aed0:	f004 f95a 	bl	f188 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    aed4:	2800      	cmp	r0, #0
    aed6:	d109      	bne.n	aeec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e4>
    aed8:	4805      	ldr	r0, [pc, #20]	; (aef0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e8>)
    aeda:	88a1      	ldrh	r1, [r4, #4]
    aedc:	8081      	strh	r1, [r0, #4]
    aede:	8821      	ldrh	r1, [r4, #0]
    aee0:	8001      	strh	r1, [r0, #0]
    aee2:	88e1      	ldrh	r1, [r4, #6]
    aee4:	80c1      	strh	r1, [r0, #6]
    aee6:	8861      	ldrh	r1, [r4, #2]
    aee8:	8041      	strh	r1, [r0, #2]
    aeea:	2000      	movs	r0, #0
    aeec:	bd10      	pop	{r4, pc}
    aeee:	0000      	.short	0x0000
    aef0:	200001ee 	.word	0x200001ee
    aef4:	0b12b00b 	.word	0x0b12b00b
    aef8:	12b00059 	.word	0x12b00059
    aefc:	05060708 	.word	0x05060708
    af00:	00020304 	.word	0x00020304
    af04:	f0f4f8fc 	.word	0xf0f4f8fc
    af08:	0304d8ec 	.word	0x0304d8ec
    af0c:	f4f8fc00 	.word	0xf4f8fc00
    af10:	00d8ecf0 	.word	0x00d8ecf0

0000af14 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    af14:	b510      	push	{r4, lr}
    af16:	460c      	mov	r4, r1
    af18:	f7ff fb6c 	bl	a5f4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    af1c:	4804      	ldr	r0, [pc, #16]	; (af30 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    af1e:	6004      	str	r4, [r0, #0]
    af20:	6840      	ldr	r0, [r0, #4]
    af22:	f004 fbce 	bl	f6c2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    af26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af2a:	f004 b8c2 	b.w	f0b2 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    af2e:	0000      	.short	0x0000
    af30:	200001f8 	.word	0x200001f8

0000af34 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    af34:	b510      	push	{r4, lr}
    af36:	4c07      	ldr	r4, [pc, #28]	; (af54 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    af38:	68a0      	ldr	r0, [r4, #8]
    af3a:	f004 fbc2 	bl	f6c2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    af3e:	68e0      	ldr	r0, [r4, #12]
    af40:	f004 fbbf 	bl	f6c2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    af44:	f002 fc44 	bl	d7d0 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    af48:	f7fa fbcc 	bl	56e4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    af4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af50:	f7ff beac 	b.w	acac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    af54:	200001f8 	.word	0x200001f8

0000af58 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    af58:	b500      	push	{lr}
    af5a:	4905      	ldr	r1, [pc, #20]	; (af70 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    af5c:	4805      	ldr	r0, [pc, #20]	; (af74 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    af5e:	f004 fba3 	bl	f6a8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af62:	4804      	ldr	r0, [pc, #16]	; (af74 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    af64:	4904      	ldr	r1, [pc, #16]	; (af78 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    af66:	1d00      	adds	r0, r0, #4
    af68:	f85d eb04 	ldr.w	lr, [sp], #4
    af6c:	f004 bb9c 	b.w	f6a8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af70:	20000238 	.word	0x20000238
    af74:	200001fc 	.word	0x200001fc
    af78:	20000240 	.word	0x20000240

0000af7c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    af7c:	b500      	push	{lr}
    af7e:	4908      	ldr	r1, [pc, #32]	; (afa0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    af80:	4808      	ldr	r0, [pc, #32]	; (afa4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    af82:	f004 fb91 	bl	f6a8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af86:	4807      	ldr	r0, [pc, #28]	; (afa4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    af88:	4907      	ldr	r1, [pc, #28]	; (afa8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    af8a:	1d00      	adds	r0, r0, #4
    af8c:	f004 fb8c 	bl	f6a8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af90:	4804      	ldr	r0, [pc, #16]	; (afa4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    af92:	4906      	ldr	r1, [pc, #24]	; (afac <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    af94:	3008      	adds	r0, #8
    af96:	f85d eb04 	ldr.w	lr, [sp], #4
    af9a:	f004 bb85 	b.w	f6a8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af9e:	0000      	.short	0x0000
    afa0:	20000228 	.word	0x20000228
    afa4:	200001fc 	.word	0x200001fc
    afa8:	20000230 	.word	0x20000230
    afac:	20000220 	.word	0x20000220
    afb0:	b510      	push	{r4, lr}
    afb2:	f002 fbfb 	bl	d7ac <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    afb6:	4809      	ldr	r0, [pc, #36]	; (afdc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x60>)
    afb8:	f7f9 fda0 	bl	4afc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    afbc:	2000      	movs	r0, #0
    afbe:	f7f9 f8b3 	bl	4128 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    afc2:	4908      	ldr	r1, [pc, #32]	; (afe4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x68>)
    afc4:	4806      	ldr	r0, [pc, #24]	; (afe0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x64>)
    afc6:	6008      	str	r0, [r1, #0]
    afc8:	f7fd fd62 	bl	8a90 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    afcc:	4907      	ldr	r1, [pc, #28]	; (afec <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x70>)
    afce:	4806      	ldr	r0, [pc, #24]	; (afe8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x6c>)
    afd0:	6008      	str	r0, [r1, #0]
    afd2:	4908      	ldr	r1, [pc, #32]	; (aff4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x78>)
    afd4:	4806      	ldr	r0, [pc, #24]	; (aff0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x74>)
    afd6:	6008      	str	r0, [r1, #0]
    afd8:	bd10      	pop	{r4, pc}
    afda:	0000      	.short	0x0000
    afdc:	200012dd 	.word	0x200012dd
    afe0:	00004aa9 	.word	0x00004aa9
    afe4:	2000021c 	.word	0x2000021c
    afe8:	00008829 	.word	0x00008829
    afec:	20000210 	.word	0x20000210
    aff0:	00005edd 	.word	0x00005edd
    aff4:	2000020c 	.word	0x2000020c
    aff8:	b510      	push	{r4, lr}
    affa:	f7fb fb6d 	bl	66d8 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    affe:	f7ff fae9 	bl	a5d4 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    b002:	f7fc fc47 	bl	7894 <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ>
    b006:	4805      	ldr	r0, [pc, #20]	; (b01c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa0>)
    b008:	f7fb fb02 	bl	6610 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    b00c:	4905      	ldr	r1, [pc, #20]	; (b024 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa8>)
    b00e:	4804      	ldr	r0, [pc, #16]	; (b020 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa4>)
    b010:	6008      	str	r0, [r1, #0]
    b012:	4906      	ldr	r1, [pc, #24]	; (b02c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xb0>)
    b014:	4804      	ldr	r0, [pc, #16]	; (b028 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xac>)
    b016:	6008      	str	r0, [r1, #0]
    b018:	bd10      	pop	{r4, pc}
    b01a:	0000      	.short	0x0000
    b01c:	200012dd 	.word	0x200012dd
    b020:	00006565 	.word	0x00006565
    b024:	20000214 	.word	0x20000214
    b028:	00006019 	.word	0x00006019
    b02c:	20000218 	.word	0x20000218

0000b030 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b030:	2101      	movs	r1, #1
    b032:	4081      	lsls	r1, r0
    b034:	4802      	ldr	r0, [pc, #8]	; (b040 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    b036:	6802      	ldr	r2, [r0, #0]
    b038:	4311      	orrs	r1, r2
    b03a:	6001      	str	r1, [r0, #0]
    b03c:	4770      	bx	lr
    b03e:	0000      	.short	0x0000
    b040:	20000248 	.word	0x20000248

0000b044 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b044:	4801      	ldr	r0, [pc, #4]	; (b04c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b046:	6800      	ldr	r0, [r0, #0]
    b048:	4770      	bx	lr
    b04a:	0000      	.short	0x0000
    b04c:	20000248 	.word	0x20000248

0000b050 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b050:	4803      	ldr	r0, [pc, #12]	; (b060 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    b052:	8800      	ldrh	r0, [r0, #0]
    b054:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b058:	0040      	lsls	r0, r0, #1
    b05a:	1c40      	adds	r0, r0, #1
    b05c:	4770      	bx	lr
    b05e:	0000      	.short	0x0000
    b060:	20000248 	.word	0x20000248

0000b064 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b064:	b510      	push	{r4, lr}
    b066:	f7f8 faf5 	bl	3654 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b06a:	2200      	movs	r2, #0
    b06c:	4b08      	ldr	r3, [pc, #32]	; (b090 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b06e:	4611      	mov	r1, r2
    b070:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    b074:	4284      	cmp	r4, r0
    b076:	d303      	bcc.n	b080 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    b078:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    b07c:	7882      	ldrb	r2, [r0, #2]
    b07e:	e003      	b.n	b088 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b080:	1c49      	adds	r1, r1, #1
    b082:	b2c9      	uxtb	r1, r1
    b084:	290c      	cmp	r1, #12
    b086:	d3f3      	bcc.n	b070 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b088:	4802      	ldr	r0, [pc, #8]	; (b094 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b08a:	7002      	strb	r2, [r0, #0]
    b08c:	bd10      	pop	{r4, pc}
    b08e:	0000      	.short	0x0000
    b090:	0000f72e 	.word	0x0000f72e
    b094:	20000297 	.word	0x20000297

0000b098 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    b098:	4801      	ldr	r0, [pc, #4]	; (b0a0 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    b09a:	7800      	ldrb	r0, [r0, #0]
    b09c:	4770      	bx	lr
    b09e:	0000      	.short	0x0000
    b0a0:	20000297 	.word	0x20000297

0000b0a4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b0a4:	b570      	push	{r4, r5, r6, lr}
    b0a6:	4605      	mov	r5, r0
    b0a8:	4616      	mov	r6, r2
    b0aa:	460c      	mov	r4, r1
    b0ac:	2002      	movs	r0, #2
    b0ae:	f000 f9f9 	bl	b4a4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b0b2:	4906      	ldr	r1, [pc, #24]	; (b0cc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b0b4:	2001      	movs	r0, #1
    b0b6:	1ef6      	subs	r6, r6, #3
    b0b8:	7008      	strb	r0, [r1, #0]
    b0ba:	4805      	ldr	r0, [pc, #20]	; (b0d0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b0bc:	6006      	str	r6, [r0, #0]
    b0be:	4804      	ldr	r0, [pc, #16]	; (b0d0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b0c0:	3808      	subs	r0, #8
    b0c2:	6005      	str	r5, [r0, #0]
    b0c4:	1f00      	subs	r0, r0, #4
    b0c6:	6004      	str	r4, [r0, #0]
    b0c8:	bd70      	pop	{r4, r5, r6, pc}
    b0ca:	0000      	.short	0x0000
    b0cc:	20000298 	.word	0x20000298
    b0d0:	4000f510 	.word	0x4000f510

0000b0d4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b0d4:	b510      	push	{r4, lr}
    b0d6:	4c0c      	ldr	r4, [pc, #48]	; (b108 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b0d8:	7820      	ldrb	r0, [r4, #0]
    b0da:	b180      	cbz	r0, b0fe <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b0dc:	490b      	ldr	r1, [pc, #44]	; (b10c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b0de:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b0e2:	6008      	str	r0, [r1, #0]
    b0e4:	f000 f86a 	bl	b1bc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b0e8:	2100      	movs	r1, #0
    b0ea:	b120      	cbz	r0, b0f6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b0ec:	2001      	movs	r0, #1
    b0ee:	7060      	strb	r0, [r4, #1]
    b0f0:	4807      	ldr	r0, [pc, #28]	; (b110 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b0f2:	6800      	ldr	r0, [r0, #0]
    b0f4:	e001      	b.n	b0fa <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b0f6:	7061      	strb	r1, [r4, #1]
    b0f8:	2010      	movs	r0, #16
    b0fa:	70a0      	strb	r0, [r4, #2]
    b0fc:	7021      	strb	r1, [r4, #0]
    b0fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b102:	2000      	movs	r0, #0
    b104:	f000 b9ce 	b.w	b4a4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b108:	20000298 	.word	0x20000298
    b10c:	4001f508 	.word	0x4001f508
    b110:	4000f400 	.word	0x4000f400

0000b114 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b114:	b510      	push	{r4, lr}
    b116:	2002      	movs	r0, #2
    b118:	f000 f9c4 	bl	b4a4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b11c:	4904      	ldr	r1, [pc, #16]	; (b130 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b11e:	2001      	movs	r0, #1
    b120:	7008      	strb	r0, [r1, #0]
    b122:	f000 f859 	bl	b1d8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b126:	4903      	ldr	r1, [pc, #12]	; (b134 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b128:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b12c:	6008      	str	r0, [r1, #0]
    b12e:	bd10      	pop	{r4, pc}
    b130:	20000298 	.word	0x20000298
    b134:	4001f504 	.word	0x4001f504

0000b138 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b138:	4803      	ldr	r0, [pc, #12]	; (b148 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b13a:	2100      	movs	r1, #0
    b13c:	7001      	strb	r1, [r0, #0]
    b13e:	7041      	strb	r1, [r0, #1]
    b140:	2110      	movs	r1, #16
    b142:	7081      	strb	r1, [r0, #2]
    b144:	4770      	bx	lr
    b146:	0000      	.short	0x0000
    b148:	20000298 	.word	0x20000298

0000b14c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b14c:	4807      	ldr	r0, [pc, #28]	; (b16c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b14e:	b510      	push	{r4, lr}
    b150:	7801      	ldrb	r1, [r0, #0]
    b152:	b141      	cbz	r1, b166 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b154:	f000 f832 	bl	b1bc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b158:	b118      	cbz	r0, b162 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b15a:	4805      	ldr	r0, [pc, #20]	; (b170 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b15c:	6800      	ldr	r0, [r0, #0]
    b15e:	b2c0      	uxtb	r0, r0
    b160:	bd10      	pop	{r4, pc}
    b162:	2010      	movs	r0, #16
    b164:	bd10      	pop	{r4, pc}
    b166:	7880      	ldrb	r0, [r0, #2]
    b168:	bd10      	pop	{r4, pc}
    b16a:	0000      	.short	0x0000
    b16c:	20000298 	.word	0x20000298
    b170:	4000f400 	.word	0x4000f400

0000b174 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b174:	4808      	ldr	r0, [pc, #32]	; (b198 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b176:	b510      	push	{r4, lr}
    b178:	7801      	ldrb	r1, [r0, #0]
    b17a:	b159      	cbz	r1, b194 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b17c:	4807      	ldr	r0, [pc, #28]	; (b19c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b17e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b182:	b128      	cbz	r0, b190 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b184:	f000 f80c 	bl	b1a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b188:	2800      	cmp	r0, #0
    b18a:	d000      	beq.n	b18e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b18c:	2001      	movs	r0, #1
    b18e:	bd10      	pop	{r4, pc}
    b190:	2002      	movs	r0, #2
    b192:	bd10      	pop	{r4, pc}
    b194:	7840      	ldrb	r0, [r0, #1]
    b196:	bd10      	pop	{r4, pc}
    b198:	20000298 	.word	0x20000298
    b19c:	4000f000 	.word	0x4000f000
    b1a0:	4805      	ldr	r0, [pc, #20]	; (b1b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b1a2:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b1a6:	b111      	cbz	r1, b1ae <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b1a8:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b1ac:	b108      	cbz	r0, b1b2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b1ae:	2000      	movs	r0, #0
    b1b0:	4770      	bx	lr
    b1b2:	2001      	movs	r0, #1
    b1b4:	4770      	bx	lr
    b1b6:	0000      	.short	0x0000
    b1b8:	4000f000 	.word	0x4000f000
    b1bc:	4805      	ldr	r0, [pc, #20]	; (b1d4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b1be:	b510      	push	{r4, lr}
    b1c0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b1c4:	b120      	cbz	r0, b1d0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b1c6:	f7ff ffeb 	bl	b1a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b1ca:	b108      	cbz	r0, b1d0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b1cc:	2001      	movs	r0, #1
    b1ce:	bd10      	pop	{r4, pc}
    b1d0:	2000      	movs	r0, #0
    b1d2:	bd10      	pop	{r4, pc}
    b1d4:	4000f000 	.word	0x4000f000
    b1d8:	4804      	ldr	r0, [pc, #16]	; (b1ec <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b1da:	2100      	movs	r1, #0
    b1dc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b1e0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b1e4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b1e8:	4770      	bx	lr
    b1ea:	0000      	.short	0x0000
    b1ec:	4000f000 	.word	0x4000f000

0000b1f0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    b1f0:	4a08      	ldr	r2, [pc, #32]	; (b214 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    b1f2:	b510      	push	{r4, lr}
    b1f4:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b1f8:	4907      	ldr	r1, [pc, #28]	; (b218 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    b1fa:	4610      	mov	r0, r2
    b1fc:	f7f8 fc6c 	bl	3ad8 <mpsl_fem_lna_configuration_set>
    b200:	2800      	cmp	r0, #0
    b202:	d005      	beq.n	b210 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b204:	1c40      	adds	r0, r0, #1
    b206:	d003      	beq.n	b210 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b208:	217d      	movs	r1, #125	; 0x7d
    b20a:	2040      	movs	r0, #64	; 0x40
    b20c:	f7f8 fdc4 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b210:	bd10      	pop	{r4, pc}
    b212:	0000      	.short	0x0000
    b214:	2000024c 	.word	0x2000024c
    b218:	0000b248 	.word	0x0000b248

0000b21c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    b21c:	4a08      	ldr	r2, [pc, #32]	; (b240 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    b21e:	b510      	push	{r4, lr}
    b220:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b224:	4907      	ldr	r1, [pc, #28]	; (b244 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    b226:	4610      	mov	r0, r2
    b228:	f7f8 fc62 	bl	3af0 <mpsl_fem_pa_configuration_set>
    b22c:	2800      	cmp	r0, #0
    b22e:	d005      	beq.n	b23c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b230:	1c40      	adds	r0, r0, #1
    b232:	d003      	beq.n	b23c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b234:	2172      	movs	r1, #114	; 0x72
    b236:	2040      	movs	r0, #64	; 0x40
    b238:	f7f8 fdae 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b23c:	bd10      	pop	{r4, pc}
    b23e:	0000      	.short	0x0000
    b240:	2000024c 	.word	0x2000024c
    b244:	0000b248 	.word	0x0000b248
    b248:	00000001 	.word	0x00000001
    b24c:	40001110 	.word	0x40001110
	...

0000b260 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    b260:	4a07      	ldr	r2, [pc, #28]	; (b280 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    b262:	b510      	push	{r4, lr}
    b264:	7853      	ldrb	r3, [r2, #1]
    b266:	b133      	cbz	r3, b276 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    b268:	4b06      	ldr	r3, [pc, #24]	; (b284 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    b26a:	6019      	str	r1, [r3, #0]
    b26c:	1d19      	adds	r1, r3, #4
    b26e:	6008      	str	r0, [r1, #0]
    b270:	2001      	movs	r0, #1
    b272:	7090      	strb	r0, [r2, #2]
    b274:	bd10      	pop	{r4, pc}
    b276:	21ba      	movs	r1, #186	; 0xba
    b278:	203c      	movs	r0, #60	; 0x3c
    b27a:	f7f8 fd8d 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b27e:	0000      	.short	0x0000
    b280:	2000029b 	.word	0x2000029b
    b284:	4000f50c 	.word	0x4000f50c

0000b288 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    b288:	4809      	ldr	r0, [pc, #36]	; (b2b0 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    b28a:	b510      	push	{r4, lr}
    b28c:	7801      	ldrb	r1, [r0, #0]
    b28e:	b151      	cbz	r1, b2a6 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b290:	7880      	ldrb	r0, [r0, #2]
    b292:	b140      	cbz	r0, b2a6 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b294:	4907      	ldr	r1, [pc, #28]	; (b2b4 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    b296:	2000      	movs	r0, #0
    b298:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b29c:	4906      	ldr	r1, [pc, #24]	; (b2b8 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    b29e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    b2a2:	6008      	str	r0, [r1, #0]
    b2a4:	bd10      	pop	{r4, pc}
    b2a6:	21e1      	movs	r1, #225	; 0xe1
    b2a8:	203c      	movs	r0, #60	; 0x3c
    b2aa:	f7f8 fd75 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2ae:	0000      	.short	0x0000
    b2b0:	2000029b 	.word	0x2000029b
    b2b4:	4000f000 	.word	0x4000f000
    b2b8:	4001f504 	.word	0x4001f504

0000b2bc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b2bc:	b570      	push	{r4, r5, r6, lr}
    b2be:	4c0b      	ldr	r4, [pc, #44]	; (b2ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    b2c0:	2500      	movs	r5, #0
    b2c2:	7820      	ldrb	r0, [r4, #0]
    b2c4:	b158      	cbz	r0, b2de <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    b2c6:	f000 f8e5 	bl	b494 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b2ca:	4809      	ldr	r0, [pc, #36]	; (b2f0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    b2cc:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b2d0:	b118      	cbz	r0, b2da <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    b2d2:	4808      	ldr	r0, [pc, #32]	; (b2f4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    b2d4:	6800      	ldr	r0, [r0, #0]
    b2d6:	70e0      	strb	r0, [r4, #3]
    b2d8:	e000      	b.n	b2dc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    b2da:	70e5      	strb	r5, [r4, #3]
    b2dc:	7025      	strb	r5, [r4, #0]
    b2de:	2000      	movs	r0, #0
    b2e0:	f000 f8e0 	bl	b4a4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b2e4:	7065      	strb	r5, [r4, #1]
    b2e6:	70a5      	strb	r5, [r4, #2]
    b2e8:	bd70      	pop	{r4, r5, r6, pc}
    b2ea:	0000      	.short	0x0000
    b2ec:	2000029b 	.word	0x2000029b
    b2f0:	4000f000 	.word	0x4000f000
    b2f4:	4000f400 	.word	0x4000f400

0000b2f8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    b2f8:	480d      	ldr	r0, [pc, #52]	; (b330 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    b2fa:	b510      	push	{r4, lr}
    b2fc:	7801      	ldrb	r1, [r0, #0]
    b2fe:	b191      	cbz	r1, b326 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b300:	7880      	ldrb	r0, [r0, #2]
    b302:	b180      	cbz	r0, b326 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b304:	490b      	ldr	r1, [pc, #44]	; (b334 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    b306:	2000      	movs	r0, #0
    b308:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b30c:	4a0a      	ldr	r2, [pc, #40]	; (b338 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b30e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b312:	6010      	str	r0, [r2, #0]
    b314:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    b318:	2a01      	cmp	r2, #1
    b31a:	d103      	bne.n	b324 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    b31c:	604a      	str	r2, [r1, #4]
    b31e:	4906      	ldr	r1, [pc, #24]	; (b338 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b320:	1d09      	adds	r1, r1, #4
    b322:	6008      	str	r0, [r1, #0]
    b324:	bd10      	pop	{r4, pc}
    b326:	21d1      	movs	r1, #209	; 0xd1
    b328:	203c      	movs	r0, #60	; 0x3c
    b32a:	f7f8 fd35 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b32e:	0000      	.short	0x0000
    b330:	2000029b 	.word	0x2000029b
    b334:	4000f000 	.word	0x4000f000
    b338:	4001f504 	.word	0x4001f504

0000b33c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b33c:	4803      	ldr	r0, [pc, #12]	; (b34c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    b33e:	2100      	movs	r1, #0
    b340:	7001      	strb	r1, [r0, #0]
    b342:	7041      	strb	r1, [r0, #1]
    b344:	7081      	strb	r1, [r0, #2]
    b346:	70c1      	strb	r1, [r0, #3]
    b348:	4770      	bx	lr
    b34a:	0000      	.short	0x0000
    b34c:	2000029b 	.word	0x2000029b

0000b350 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    b350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b354:	4605      	mov	r5, r0
    b356:	461c      	mov	r4, r3
    b358:	4690      	mov	r8, r2
    b35a:	460f      	mov	r7, r1
    b35c:	2001      	movs	r0, #1
    b35e:	f000 f8a1 	bl	b4a4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b362:	4e12      	ldr	r6, [pc, #72]	; (b3ac <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    b364:	4812      	ldr	r0, [pc, #72]	; (b3b0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b366:	7134      	strb	r4, [r6, #4]
    b368:	6007      	str	r7, [r0, #0]
    b36a:	4911      	ldr	r1, [pc, #68]	; (b3b0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b36c:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    b370:	1f09      	subs	r1, r1, #4
    b372:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    b376:	6008      	str	r0, [r1, #0]
    b378:	f001 f8c4 	bl	c504 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b37c:	b938      	cbnz	r0, b38e <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    b37e:	480c      	ldr	r0, [pc, #48]	; (b3b0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b380:	3010      	adds	r0, #16
    b382:	6801      	ldr	r1, [r0, #0]
    b384:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b388:	ea41 0108 	orr.w	r1, r1, r8
    b38c:	6001      	str	r1, [r0, #0]
    b38e:	f000 f881 	bl	b494 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b392:	b93d      	cbnz	r5, b3a4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    b394:	4808      	ldr	r0, [pc, #32]	; (b3b8 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    b396:	4a07      	ldr	r2, [pc, #28]	; (b3b4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b398:	4906      	ldr	r1, [pc, #24]	; (b3b4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b39a:	3afc      	subs	r2, #252	; 0xfc
    b39c:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b3a0:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    b3a4:	2001      	movs	r0, #1
    b3a6:	7070      	strb	r0, [r6, #1]
    b3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b3ac:	2000029b 	.word	0x2000029b
    b3b0:	4000f508 	.word	0x4000f508
    b3b4:	4000f100 	.word	0x4000f100
    b3b8:	4001f088 	.word	0x4001f088

0000b3bc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    b3bc:	4808      	ldr	r0, [pc, #32]	; (b3e0 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    b3be:	b510      	push	{r4, lr}
    b3c0:	7841      	ldrb	r1, [r0, #1]
    b3c2:	b149      	cbz	r1, b3d8 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    b3c4:	2101      	movs	r1, #1
    b3c6:	7001      	strb	r1, [r0, #0]
    b3c8:	4806      	ldr	r0, [pc, #24]	; (b3e4 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    b3ca:	2200      	movs	r2, #0
    b3cc:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    b3d0:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    b3d4:	6001      	str	r1, [r0, #0]
    b3d6:	bd10      	pop	{r4, pc}
    b3d8:	21c5      	movs	r1, #197	; 0xc5
    b3da:	203c      	movs	r0, #60	; 0x3c
    b3dc:	f7f8 fcdc 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3e0:	2000029b 	.word	0x2000029b
    b3e4:	4000f000 	.word	0x4000f000

0000b3e8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b3e8:	4806      	ldr	r0, [pc, #24]	; (b404 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    b3ea:	7801      	ldrb	r1, [r0, #0]
    b3ec:	b141      	cbz	r1, b400 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    b3ee:	4806      	ldr	r0, [pc, #24]	; (b408 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    b3f0:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b3f4:	2800      	cmp	r0, #0
    b3f6:	d002      	beq.n	b3fe <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    b3f8:	4804      	ldr	r0, [pc, #16]	; (b40c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    b3fa:	6800      	ldr	r0, [r0, #0]
    b3fc:	b2c0      	uxtb	r0, r0
    b3fe:	4770      	bx	lr
    b400:	78c0      	ldrb	r0, [r0, #3]
    b402:	4770      	bx	lr
    b404:	2000029b 	.word	0x2000029b
    b408:	4000f000 	.word	0x4000f000
    b40c:	4000f400 	.word	0x4000f400

0000b410 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b410:	4901      	ldr	r1, [pc, #4]	; (b418 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b412:	2001      	movs	r0, #1
    b414:	6088      	str	r0, [r1, #8]
    b416:	4770      	bx	lr
    b418:	4000f000 	.word	0x4000f000

0000b41c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b420:	2800      	cmp	r0, #0
    b422:	d02e      	beq.n	b482 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b424:	4818      	ldr	r0, [pc, #96]	; (b488 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    b426:	7800      	ldrb	r0, [r0, #0]
    b428:	b1b0      	cbz	r0, b458 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    b42a:	4d18      	ldr	r5, [pc, #96]	; (b48c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    b42c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b430:	2800      	cmp	r0, #0
    b432:	d126      	bne.n	b482 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b434:	2702      	movs	r7, #2
    b436:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    b43a:	4c15      	ldr	r4, [pc, #84]	; (b490 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b43c:	6820      	ldr	r0, [r4, #0]
    b43e:	43c0      	mvns	r0, r0
    b440:	f340 1600 	sbfx	r6, r0, #4, #1
    b444:	6820      	ldr	r0, [r4, #0]
    b446:	f040 0010 	orr.w	r0, r0, #16
    b44a:	6020      	str	r0, [r4, #0]
    b44c:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    b450:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b454:	1c76      	adds	r6, r6, #1
    b456:	e009      	b.n	b46c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    b458:	f240 1153 	movw	r1, #339	; 0x153
    b45c:	203c      	movs	r0, #60	; 0x3c
    b45e:	f7f8 fc9b 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b462:	bf00      	nop
    b464:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    b468:	f7f8 fae0 	bl	3a2c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b46c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b470:	2800      	cmp	r0, #0
    b472:	d0f7      	beq.n	b464 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    b474:	b91e      	cbnz	r6, b47e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b476:	6820      	ldr	r0, [r4, #0]
    b478:	f020 0010 	bic.w	r0, r0, #16
    b47c:	6020      	str	r0, [r4, #0]
    b47e:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    b482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b486:	0000      	.short	0x0000
    b488:	2000029b 	.word	0x2000029b
    b48c:	4000f000 	.word	0x4000f000
    b490:	e000ed10 	.word	0xe000ed10
    b494:	4902      	ldr	r1, [pc, #8]	; (b4a0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    b496:	4801      	ldr	r0, [pc, #4]	; (b49c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    b498:	6008      	str	r0, [r1, #0]
    b49a:	4770      	bx	lr
    b49c:	02020000 	.word	0x02020000
    b4a0:	4001f508 	.word	0x4001f508

0000b4a4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b4a4:	b510      	push	{r4, lr}
    b4a6:	4604      	mov	r4, r0
    b4a8:	f000 f822 	bl	b4f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    b4ac:	2c00      	cmp	r4, #0
    b4ae:	d017      	beq.n	b4e0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    b4b0:	4a0c      	ldr	r2, [pc, #48]	; (b4e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b4b2:	480c      	ldr	r0, [pc, #48]	; (b4e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b4b4:	490c      	ldr	r1, [pc, #48]	; (b4e8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b4b6:	3214      	adds	r2, #20
    b4b8:	4b0c      	ldr	r3, [pc, #48]	; (b4ec <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    b4ba:	2c01      	cmp	r4, #1
    b4bc:	d005      	beq.n	b4ca <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    b4be:	2c02      	cmp	r4, #2
    b4c0:	d008      	beq.n	b4d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    b4c2:	2183      	movs	r1, #131	; 0x83
    b4c4:	203d      	movs	r0, #61	; 0x3d
    b4c6:	f7f8 fc67 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4ca:	2402      	movs	r4, #2
    b4cc:	6004      	str	r4, [r0, #0]
    b4ce:	6011      	str	r1, [r2, #0]
    b4d0:	0620      	lsls	r0, r4, #24
    b4d2:	e004      	b.n	b4de <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    b4d4:	2403      	movs	r4, #3
    b4d6:	6004      	str	r4, [r0, #0]
    b4d8:	6011      	str	r1, [r2, #0]
    b4da:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b4de:	6018      	str	r0, [r3, #0]
    b4e0:	bd10      	pop	{r4, pc}
    b4e2:	0000      	.short	0x0000
    b4e4:	4000f500 	.word	0x4000f500
    b4e8:	200013df 	.word	0x200013df
    b4ec:	4001f504 	.word	0x4001f504
    b4f0:	4804      	ldr	r0, [pc, #16]	; (b504 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b4f2:	2100      	movs	r1, #0
    b4f4:	6001      	str	r1, [r0, #0]
    b4f6:	6001      	str	r1, [r0, #0]
    b4f8:	4903      	ldr	r1, [pc, #12]	; (b508 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b4fa:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    b4fe:	6008      	str	r0, [r1, #0]
    b500:	4770      	bx	lr
    b502:	0000      	.short	0x0000
    b504:	4000f500 	.word	0x4000f500
    b508:	4001f508 	.word	0x4001f508

0000b50c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b50c:	4805      	ldr	r0, [pc, #20]	; (b524 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b50e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b512:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b516:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b51a:	4903      	ldr	r1, [pc, #12]	; (b528 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    b51c:	2000      	movs	r0, #0
    b51e:	6008      	str	r0, [r1, #0]
    b520:	4770      	bx	lr
    b522:	0000      	.short	0x0000
    b524:	40001000 	.word	0x40001000
    b528:	40001560 	.word	0x40001560

0000b52c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b52c:	4904      	ldr	r1, [pc, #16]	; (b540 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b52e:	6008      	str	r0, [r1, #0]
    b530:	4804      	ldr	r0, [pc, #16]	; (b544 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    b532:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b536:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    b53a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b53e:	4770      	bx	lr
    b540:	40001560 	.word	0x40001560
    b544:	40001000 	.word	0x40001000

0000b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b54a:	4c1e      	ldr	r4, [pc, #120]	; (b5c4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    b54c:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b550:	2710      	movs	r7, #16
    b552:	f3c0 1600 	ubfx	r6, r0, #4, #1
    b556:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    b55a:	2002      	movs	r0, #2
    b55c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b560:	4819      	ldr	r0, [pc, #100]	; (b5c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    b562:	2500      	movs	r5, #0
    b564:	491a      	ldr	r1, [pc, #104]	; (b5d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    b566:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b56a:	4818      	ldr	r0, [pc, #96]	; (b5cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    b56c:	6008      	str	r0, [r1, #0]
    b56e:	4819      	ldr	r0, [pc, #100]	; (b5d4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    b570:	6800      	ldr	r0, [r0, #0]
    b572:	b1b0      	cbz	r0, b5a2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    b574:	20ff      	movs	r0, #255	; 0xff
    b576:	f88d 0000 	strb.w	r0, [sp]
    b57a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b57e:	2001      	movs	r0, #1
    b580:	6120      	str	r0, [r4, #16]
    b582:	e004      	b.n	b58e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    b584:	f89d 0000 	ldrb.w	r0, [sp]
    b588:	1e40      	subs	r0, r0, #1
    b58a:	f88d 0000 	strb.w	r0, [sp]
    b58e:	f89d 0000 	ldrb.w	r0, [sp]
    b592:	b118      	cbz	r0, b59c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    b594:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    b598:	2800      	cmp	r0, #0
    b59a:	d0f3      	beq.n	b584 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    b59c:	f89d 0000 	ldrb.w	r0, [sp]
    b5a0:	b150      	cbz	r0, b5b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    b5a2:	f000 fc6f 	bl	be84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    b5a6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b5aa:	f000 fde7 	bl	c17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    b5ae:	2e00      	cmp	r6, #0
    b5b0:	d001      	beq.n	b5b6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b5b2:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    b5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b5b8:	f240 71a3 	movw	r1, #1955	; 0x7a3
    b5bc:	203e      	movs	r0, #62	; 0x3e
    b5be:	f7f8 fbeb 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5c2:	0000      	.short	0x0000
    b5c4:	40001000 	.word	0x40001000
    b5c8:	2000109c 	.word	0x2000109c
    b5cc:	0c0e0000 	.word	0x0c0e0000
    b5d0:	4001f508 	.word	0x4001f508
    b5d4:	40001550 	.word	0x40001550

0000b5d8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5dc:	4c1f      	ldr	r4, [pc, #124]	; (b65c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    b5de:	4607      	mov	r7, r0
    b5e0:	4688      	mov	r8, r1
    b5e2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b5e6:	07c1      	lsls	r1, r0, #31
    b5e8:	d018      	beq.n	b61c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    b5ea:	4a1d      	ldr	r2, [pc, #116]	; (b660 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    b5ec:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b5f0:	6011      	str	r1, [r2, #0]
    b5f2:	4d1c      	ldr	r5, [pc, #112]	; (b664 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    b5f4:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    b5f8:	f041 0101 	orr.w	r1, r1, #1
    b5fc:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    b600:	f040 0002 	orr.w	r0, r0, #2
    b604:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b608:	4640      	mov	r0, r8
    b60a:	f000 fe1b 	bl	c244 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b60e:	f000 fbe7 	bl	bde0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b612:	2601      	movs	r6, #1
    b614:	b13f      	cbz	r7, b626 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    b616:	2f01      	cmp	r7, #1
    b618:	d00e      	beq.n	b638 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    b61a:	e016      	b.n	b64a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b61c:	f240 612d 	movw	r1, #1581	; 0x62d
    b620:	203e      	movs	r0, #62	; 0x3e
    b622:	f7f8 fbb9 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b626:	4640      	mov	r0, r8
    b628:	f000 fbfa 	bl	be20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    b62c:	4640      	mov	r0, r8
    b62e:	f000 fbbb 	bl	bda8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b632:	7266      	strb	r6, [r4, #9]
    b634:	602e      	str	r6, [r5, #0]
    b636:	e008      	b.n	b64a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b638:	f000 fc1a 	bl	be70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    b63c:	f000 fd68 	bl	c110 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    b640:	2002      	movs	r0, #2
    b642:	7260      	strb	r0, [r4, #9]
    b644:	f000 fc90 	bl	bf68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    b648:	606e      	str	r6, [r5, #4]
    b64a:	4807      	ldr	r0, [pc, #28]	; (b668 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    b64c:	64c6      	str	r6, [r0, #76]	; 0x4c
    b64e:	4807      	ldr	r0, [pc, #28]	; (b66c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b650:	6801      	ldr	r1, [r0, #0]
    b652:	4638      	mov	r0, r7
    b654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b658:	f004 b920 	b.w	f89c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b65c:	2000109c 	.word	0x2000109c
    b660:	4001f504 	.word	0x4001f504
    b664:	40001000 	.word	0x40001000
    b668:	40008000 	.word	0x40008000
    b66c:	4000854c 	.word	0x4000854c

0000b670 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b674:	4d35      	ldr	r5, [pc, #212]	; (b74c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    b676:	4606      	mov	r6, r0
    b678:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b67c:	4689      	mov	r9, r1
    b67e:	6028      	str	r0, [r5, #0]
    b680:	4c33      	ldr	r4, [pc, #204]	; (b750 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    b682:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b686:	f040 0002 	orr.w	r0, r0, #2
    b68a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b68e:	4608      	mov	r0, r1
    b690:	f000 fdd8 	bl	c244 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b694:	f000 fba4 	bl	bde0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b698:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b754 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    b69c:	2700      	movs	r7, #0
    b69e:	b116      	cbz	r6, b6a6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b6a0:	2e01      	cmp	r6, #1
    b6a2:	d027      	beq.n	b6f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b6a4:	e03f      	b.n	b726 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b6a6:	4648      	mov	r0, r9
    b6a8:	f000 fbba 	bl	be20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    b6ac:	79e0      	ldrb	r0, [r4, #7]
    b6ae:	2801      	cmp	r0, #1
    b6b0:	d105      	bne.n	b6be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b6b2:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b6b6:	f041 0108 	orr.w	r1, r1, #8
    b6ba:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b6be:	4648      	mov	r0, r9
    b6c0:	f000 fb72 	bl	bda8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b6c4:	2001      	movs	r0, #1
    b6c6:	7260      	strb	r0, [r4, #9]
    b6c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b6ca:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b6ce:	62a0      	str	r0, [r4, #40]	; 0x28
    b6d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b6d4:	6028      	str	r0, [r5, #0]
    b6d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b6da:	f1b9 0f02 	cmp.w	r9, #2
    b6de:	d007      	beq.n	b6f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    b6e0:	f640 0034 	movw	r0, #2100	; 0x834
    b6e4:	f649 72ec 	movw	r2, #40940	; 0x9fec
    b6e8:	4410      	add	r0, r2
    b6ea:	fbb0 f7f1 	udiv	r7, r0, r1
    b6ee:	e01a      	b.n	b726 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b6f0:	4608      	mov	r0, r1
    b6f2:	e7f7      	b.n	b6e4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    b6f4:	f000 fbbc 	bl	be70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    b6f8:	f000 fd0a 	bl	c110 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    b6fc:	79e0      	ldrb	r0, [r4, #7]
    b6fe:	2801      	cmp	r0, #1
    b700:	d105      	bne.n	b70e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    b702:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b706:	f041 0104 	orr.w	r1, r1, #4
    b70a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b70e:	2002      	movs	r0, #2
    b710:	7260      	strb	r0, [r4, #9]
    b712:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b714:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b718:	62a0      	str	r0, [r4, #40]	; 0x28
    b71a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b71e:	6028      	str	r0, [r5, #0]
    b720:	2729      	movs	r7, #41	; 0x29
    b722:	f000 fc21 	bl	bf68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    b726:	f000 fc0b 	bl	bf40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    b72a:	f000 fdc5 	bl	c2b8 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    b72e:	6800      	ldr	r0, [r0, #0]
    b730:	2801      	cmp	r0, #1
    b732:	d006      	beq.n	b742 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    b734:	2100      	movs	r1, #0
    b736:	4630      	mov	r0, r6
    b738:	f004 f8b0 	bl	f89c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b73c:	4638      	mov	r0, r7
    b73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b742:	f7ff ff01 	bl	b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b746:	2000      	movs	r0, #0
    b748:	e7f9      	b.n	b73e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    b74a:	0000      	.short	0x0000
    b74c:	4001f504 	.word	0x4001f504
    b750:	2000109c 	.word	0x2000109c
    b754:	40001000 	.word	0x40001000

0000b758 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b758:	b510      	push	{r4, lr}
    b75a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    b75c:	4901      	ldr	r1, [pc, #4]	; (b764 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b75e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    b762:	bd10      	pop	{r4, pc}
    b764:	2000108c 	.word	0x2000108c

0000b768 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b768:	b570      	push	{r4, r5, r6, lr}
    b76a:	4c10      	ldr	r4, [pc, #64]	; (b7ac <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b76c:	4606      	mov	r6, r0
    b76e:	2002      	movs	r0, #2
    b770:	7320      	strb	r0, [r4, #12]
    b772:	2596      	movs	r5, #150	; 0x96
    b774:	f000 f856 	bl	b824 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b778:	4602      	mov	r2, r0
    b77a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    b77e:	f894 1020 	ldrb.w	r1, [r4, #32]
    b782:	2801      	cmp	r0, #1
    b784:	d00d      	beq.n	b7a2 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    b786:	4628      	mov	r0, r5
    b788:	f004 f8a0 	bl	f8cc <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b78c:	4908      	ldr	r1, [pc, #32]	; (b7b0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    b78e:	6120      	str	r0, [r4, #16]
    b790:	2000      	movs	r0, #0
    b792:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b796:	6921      	ldr	r1, [r4, #16]
    b798:	69e0      	ldr	r0, [r4, #28]
    b79a:	4408      	add	r0, r1
    b79c:	4905      	ldr	r1, [pc, #20]	; (b7b4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b79e:	6008      	str	r0, [r1, #0]
    b7a0:	bd70      	pop	{r4, r5, r6, pc}
    b7a2:	4633      	mov	r3, r6
    b7a4:	4628      	mov	r0, r5
    b7a6:	f004 f8ad 	bl	f904 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b7aa:	e7ef      	b.n	b78c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    b7ac:	2000109c 	.word	0x2000109c
    b7b0:	40008000 	.word	0x40008000
    b7b4:	40008544 	.word	0x40008544

0000b7b8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7bc:	2238      	movs	r2, #56	; 0x38
    b7be:	2100      	movs	r1, #0
    b7c0:	4813      	ldr	r0, [pc, #76]	; (b810 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b7c2:	f000 ff6b 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b7c6:	f000 fcd9 	bl	c17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    b7ca:	f000 fe70 	bl	c4ae <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b7ce:	4d11      	ldr	r5, [pc, #68]	; (b814 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b7d0:	4e10      	ldr	r6, [pc, #64]	; (b814 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b7d2:	2400      	movs	r4, #0
    b7d4:	4f0f      	ldr	r7, [pc, #60]	; (b814 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b7d6:	3508      	adds	r5, #8
    b7d8:	3610      	adds	r6, #16
    b7da:	b928      	cbnz	r0, b7e8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b7dc:	f000 fe7e 	bl	c4dc <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b7e0:	b910      	cbnz	r0, b7e8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b7e2:	f000 fe85 	bl	c4f0 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b7e6:	b108      	cbz	r0, b7ec <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    b7e8:	2224      	movs	r2, #36	; 0x24
    b7ea:	e006      	b.n	b7fa <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b7ec:	f000 fec0 	bl	c570 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b7f0:	b910      	cbnz	r0, b7f8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    b7f2:	f000 feb3 	bl	c55c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b7f6:	b140      	cbz	r0, b80a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    b7f8:	2240      	movs	r2, #64	; 0x40
    b7fa:	21ff      	movs	r1, #255	; 0xff
    b7fc:	4638      	mov	r0, r7
    b7fe:	f000 ff4d 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b802:	602c      	str	r4, [r5, #0]
    b804:	6034      	str	r4, [r6, #0]
    b806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b80a:	2238      	movs	r2, #56	; 0x38
    b80c:	e7f5      	b.n	b7fa <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b80e:	0000      	.short	0x0000
    b810:	2000109c 	.word	0x2000109c
    b814:	40000e00 	.word	0x40000e00

0000b818 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    b818:	4801      	ldr	r0, [pc, #4]	; (b820 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    b81a:	69c0      	ldr	r0, [r0, #28]
    b81c:	4770      	bx	lr
    b81e:	0000      	.short	0x0000
    b820:	2000109c 	.word	0x2000109c

0000b824 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    b824:	4814      	ldr	r0, [pc, #80]	; (b878 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    b826:	b510      	push	{r4, lr}
    b828:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    b82c:	7a40      	ldrb	r0, [r0, #9]
    b82e:	b141      	cbz	r1, b842 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    b830:	2902      	cmp	r1, #2
    b832:	d00b      	beq.n	b84c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b834:	2802      	cmp	r0, #2
    b836:	d009      	beq.n	b84c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b838:	2901      	cmp	r1, #1
    b83a:	d00b      	beq.n	b854 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b83c:	2801      	cmp	r0, #1
    b83e:	d009      	beq.n	b854 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b840:	e015      	b.n	b86e <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    b842:	2800      	cmp	r0, #0
    b844:	d1f6      	bne.n	b834 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    b846:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    b84a:	e00d      	b.n	b868 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    b84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b850:	f000 bc10 	b.w	c074 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    b854:	4809      	ldr	r0, [pc, #36]	; (b87c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    b856:	6800      	ldr	r0, [r0, #0]
    b858:	f000 000f 	and.w	r0, r0, #15
    b85c:	2803      	cmp	r0, #3
    b85e:	d006      	beq.n	b86e <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    b860:	2804      	cmp	r0, #4
    b862:	d006      	beq.n	b872 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    b864:	f240 11e7 	movw	r1, #487	; 0x1e7
    b868:	203e      	movs	r0, #62	; 0x3e
    b86a:	f7f8 fa95 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b86e:	2001      	movs	r0, #1
    b870:	bd10      	pop	{r4, pc}
    b872:	2002      	movs	r0, #2
    b874:	bd10      	pop	{r4, pc}
    b876:	0000      	.short	0x0000
    b878:	2000109c 	.word	0x2000109c
    b87c:	40001510 	.word	0x40001510

0000b880 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b880:	b510      	push	{r4, lr}
    b882:	f000 fc61 	bl	c148 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    b886:	f7ff fe5f 	bl	b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b88a:	f003 ff9d 	bl	f7c8 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    b88e:	480f      	ldr	r0, [pc, #60]	; (b8cc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    b890:	4a0f      	ldr	r2, [pc, #60]	; (b8d0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    b892:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b894:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b898:	6011      	str	r1, [r2, #0]
    b89a:	2400      	movs	r4, #0
    b89c:	6284      	str	r4, [r0, #40]	; 0x28
    b89e:	7304      	strb	r4, [r0, #12]
    b8a0:	61c4      	str	r4, [r0, #28]
    b8a2:	6184      	str	r4, [r0, #24]
    b8a4:	f000 fc50 	bl	c148 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    b8a8:	480a      	ldr	r0, [pc, #40]	; (b8d4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    b8aa:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    b8ae:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    b8b2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    b8b6:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    b8ba:	2001      	movs	r0, #1
    b8bc:	f003 ffbd 	bl	f83a <__kernel_ram_size+0x1a>
    b8c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b8c4:	2001      	movs	r0, #1
    b8c6:	f003 bfab 	b.w	f820 <__kernel_ram_size>
    b8ca:	0000      	.short	0x0000
    b8cc:	2000109c 	.word	0x2000109c
    b8d0:	4001f508 	.word	0x4001f508
    b8d4:	40008000 	.word	0x40008000

0000b8d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8dc:	2001      	movs	r0, #1
    b8de:	f003 ffac 	bl	f83a <__kernel_ram_size+0x1a>
    b8e2:	4838      	ldr	r0, [pc, #224]	; (b9c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b8e4:	2400      	movs	r4, #0
    b8e6:	6004      	str	r4, [r0, #0]
    b8e8:	2601      	movs	r6, #1
    b8ea:	6006      	str	r6, [r0, #0]
    b8ec:	f000 fe16 	bl	c51c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b8f0:	4d35      	ldr	r5, [pc, #212]	; (b9c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b8f2:	b118      	cbz	r0, b8fc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x24>
    b8f4:	6828      	ldr	r0, [r5, #0]
    b8f6:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b8fa:	6028      	str	r0, [r5, #0]
    b8fc:	f000 fe02 	bl	c504 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b900:	b128      	cbz	r0, b90e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x36>
    b902:	6828      	ldr	r0, [r5, #0]
    b904:	4931      	ldr	r1, [pc, #196]	; (b9cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    b906:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b90a:	4308      	orrs	r0, r1
    b90c:	6028      	str	r0, [r5, #0]
    b90e:	f000 fe15 	bl	c53c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b912:	b138      	cbz	r0, b924 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4c>
    b914:	482c      	ldr	r0, [pc, #176]	; (b9c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b916:	1d00      	adds	r0, r0, #4
    b918:	6801      	ldr	r1, [r0, #0]
    b91a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b91e:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    b922:	6001      	str	r1, [r0, #0]
    b924:	4928      	ldr	r1, [pc, #160]	; (b9c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b926:	482a      	ldr	r0, [pc, #168]	; (b9d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b928:	313c      	adds	r1, #60	; 0x3c
    b92a:	6008      	str	r0, [r1, #0]
    b92c:	f7f8 f8ec 	bl	3b08 <mpsl_fem_device_config_254_apply_get>
    b930:	b140      	cbz	r0, b944 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    b932:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b936:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    b93a:	1c41      	adds	r1, r0, #1
    b93c:	d002      	beq.n	b944 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    b93e:	4922      	ldr	r1, [pc, #136]	; (b9c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b940:	3110      	adds	r1, #16
    b942:	6008      	str	r0, [r1, #0]
    b944:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    b948:	6e00      	ldr	r0, [r0, #96]	; 0x60
    b94a:	1c41      	adds	r1, r0, #1
    b94c:	d004      	beq.n	b958 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x80>
    b94e:	4921      	ldr	r1, [pc, #132]	; (b9d4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b950:	680a      	ldr	r2, [r1, #0]
    b952:	f360 4217 	bfi	r2, r0, #16, #8
    b956:	600a      	str	r2, [r1, #0]
    b958:	491e      	ldr	r1, [pc, #120]	; (b9d4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b95a:	f240 605b 	movw	r0, #1627	; 0x65b
    b95e:	3954      	subs	r1, #84	; 0x54
    b960:	6008      	str	r0, [r1, #0]
    b962:	1f09      	subs	r1, r1, #4
    b964:	f240 1003 	movw	r0, #259	; 0x103
    b968:	6008      	str	r0, [r1, #0]
    b96a:	1f08      	subs	r0, r1, #4
    b96c:	6006      	str	r6, [r0, #0]
    b96e:	2001      	movs	r0, #1
    b970:	f000 fc68 	bl	c244 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b974:	4917      	ldr	r1, [pc, #92]	; (b9d4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b976:	f240 1001 	movw	r0, #257	; 0x101
    b97a:	31c4      	adds	r1, #196	; 0xc4
    b97c:	6008      	str	r0, [r1, #0]
    b97e:	4e16      	ldr	r6, [pc, #88]	; (b9d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    b980:	2502      	movs	r5, #2
    b982:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    b986:	4916      	ldr	r1, [pc, #88]	; (b9e0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    b988:	4814      	ldr	r0, [pc, #80]	; (b9dc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    b98a:	6008      	str	r0, [r1, #0]
    b98c:	4815      	ldr	r0, [pc, #84]	; (b9e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    b98e:	4f16      	ldr	r7, [pc, #88]	; (b9e8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    b990:	f506 7600 	add.w	r6, r6, #512	; 0x200
    b994:	8604      	strh	r4, [r0, #48]	; 0x30
    b996:	3010      	adds	r0, #16
    b998:	61c4      	str	r4, [r0, #28]
    b99a:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
    b99e:	703c      	strb	r4, [r7, #0]
    b9a0:	2001      	movs	r0, #1
    b9a2:	f003 ff3d 	bl	f820 <__kernel_ram_size>
    b9a6:	2010      	movs	r0, #16
    b9a8:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    b9ac:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b9b0:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    b9b4:	6878      	ldr	r0, [r7, #4]
    b9b6:	2800      	cmp	r0, #0
    b9b8:	d002      	beq.n	b9c0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>
    b9ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b9be:	4700      	bx	r0
    b9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b9c4:	40001ffc 	.word	0x40001ffc
    b9c8:	4000173c 	.word	0x4000173c
    b9cc:	80000096 	.word	0x80000096
    b9d0:	8900002c 	.word	0x8900002c
    b9d4:	4000158c 	.word	0x4000158c
    b9d8:	40001000 	.word	0x40001000
    b9dc:	0c0e0000 	.word	0x0c0e0000
    b9e0:	4001f508 	.word	0x4001f508
    b9e4:	2000108c 	.word	0x2000108c
    b9e8:	20000264 	.word	0x20000264

0000b9ec <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    b9ec:	4901      	ldr	r1, [pc, #4]	; (b9f4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    b9ee:	7508      	strb	r0, [r1, #20]
    b9f0:	4770      	bx	lr
    b9f2:	0000      	.short	0x0000
    b9f4:	2000109c 	.word	0x2000109c

0000b9f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b9f8:	4904      	ldr	r1, [pc, #16]	; (ba0c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    b9fa:	6008      	str	r0, [r1, #0]
    b9fc:	4804      	ldr	r0, [pc, #16]	; (ba10 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    b9fe:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    ba02:	f041 0101 	orr.w	r1, r1, #1
    ba06:	7001      	strb	r1, [r0, #0]
    ba08:	f000 ba62 	b.w	bed0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    ba0c:	40001504 	.word	0x40001504
    ba10:	2000109c 	.word	0x2000109c

0000ba14 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    ba14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba18:	4e35      	ldr	r6, [pc, #212]	; (baf0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    ba1a:	4607      	mov	r7, r0
    ba1c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    ba20:	468a      	mov	sl, r1
    ba22:	4614      	mov	r4, r2
    ba24:	6030      	str	r0, [r6, #0]
    ba26:	4610      	mov	r0, r2
    ba28:	f000 fc0c 	bl	c244 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ba2c:	f000 f9d8 	bl	bde0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    ba30:	f8df 90c0 	ldr.w	r9, [pc, #192]	; baf4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    ba34:	4d30      	ldr	r5, [pc, #192]	; (baf8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    ba36:	f04f 0801 	mov.w	r8, #1
    ba3a:	b127      	cbz	r7, ba46 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    ba3c:	2f01      	cmp	r7, #1
    ba3e:	d01d      	beq.n	ba7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    ba40:	f240 7122 	movw	r1, #1826	; 0x722
    ba44:	e04a      	b.n	badc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    ba46:	4620      	mov	r0, r4
    ba48:	f000 f9ea 	bl	be20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    ba4c:	4620      	mov	r0, r4
    ba4e:	f000 f9ab 	bl	bda8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    ba52:	2c02      	cmp	r4, #2
    ba54:	d00f      	beq.n	ba76 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    ba56:	f640 0034 	movw	r0, #2100	; 0x834
    ba5a:	bf00      	nop
    ba5c:	f649 51f8 	movw	r1, #40440	; 0x9df8
    ba60:	4401      	add	r1, r0
    ba62:	4650      	mov	r0, sl
    ba64:	f000 fb92 	bl	c18c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    ba68:	4604      	mov	r4, r0
    ba6a:	4648      	mov	r0, r9
    ba6c:	f000 fb7a 	bl	c164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    ba70:	f885 8009 	strb.w	r8, [r5, #9]
    ba74:	e014      	b.n	baa0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    ba76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ba7a:	e7ef      	b.n	ba5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    ba7c:	f000 f9f8 	bl	be70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    ba80:	f000 fb46 	bl	c110 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    ba84:	f000 fa70 	bl	bf68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    ba88:	f649 71ba 	movw	r1, #40890	; 0x9fba
    ba8c:	4650      	mov	r0, sl
    ba8e:	f000 fb7d 	bl	c18c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    ba92:	4604      	mov	r4, r0
    ba94:	4817      	ldr	r0, [pc, #92]	; (baf4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    ba96:	1d00      	adds	r0, r0, #4
    ba98:	f000 fb64 	bl	c164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    ba9c:	2002      	movs	r0, #2
    ba9e:	7268      	strb	r0, [r5, #9]
    baa0:	4816      	ldr	r0, [pc, #88]	; (bafc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    baa2:	6004      	str	r4, [r0, #0]
    baa4:	4917      	ldr	r1, [pc, #92]	; (bb04 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    baa6:	4816      	ldr	r0, [pc, #88]	; (bb00 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    baa8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    baac:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    baae:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    bab2:	62a8      	str	r0, [r5, #40]	; 0x28
    bab4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    bab8:	6030      	str	r0, [r6, #0]
    baba:	2110      	movs	r1, #16
    babc:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    bac0:	1200      	asrs	r0, r0, #8
    bac2:	6030      	str	r0, [r6, #0]
    bac4:	f000 fa3c 	bl	bf40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    bac8:	490f      	ldr	r1, [pc, #60]	; (bb08 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    baca:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    bace:	480b      	ldr	r0, [pc, #44]	; (bafc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    bad0:	300c      	adds	r0, #12
    bad2:	6800      	ldr	r0, [r0, #0]
    bad4:	42a0      	cmp	r0, r4
    bad6:	d304      	bcc.n	bae2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    bad8:	f240 7149 	movw	r1, #1865	; 0x749
    badc:	203e      	movs	r0, #62	; 0x3e
    bade:	f7f8 f95b 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bae2:	4621      	mov	r1, r4
    bae4:	4638      	mov	r0, r7
    bae6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    baea:	f003 bed7 	b.w	f89c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    baee:	0000      	.short	0x0000
    baf0:	4001f504 	.word	0x4001f504
    baf4:	40001000 	.word	0x40001000
    baf8:	2000109c 	.word	0x2000109c
    bafc:	40008540 	.word	0x40008540
    bb00:	40008140 	.word	0x40008140
    bb04:	4001f098 	.word	0x4001f098
    bb08:	40008000 	.word	0x40008000

0000bb0c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    bb0c:	4b0d      	ldr	r3, [pc, #52]	; (bb44 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    bb0e:	b510      	push	{r4, lr}
    bb10:	71d8      	strb	r0, [r3, #7]
    bb12:	729a      	strb	r2, [r3, #10]
    bb14:	b151      	cbz	r1, bb2c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    bb16:	2002      	movs	r0, #2
    bb18:	7218      	strb	r0, [r3, #8]
    bb1a:	2801      	cmp	r0, #1
    bb1c:	d008      	beq.n	bb30 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    bb1e:	2802      	cmp	r0, #2
    bb20:	d00f      	beq.n	bb42 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bb22:	f640 112a 	movw	r1, #2346	; 0x92a
    bb26:	203e      	movs	r0, #62	; 0x3e
    bb28:	f7f8 f936 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb2c:	2001      	movs	r0, #1
    bb2e:	e7f3      	b.n	bb18 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    bb30:	7a58      	ldrb	r0, [r3, #9]
    bb32:	2802      	cmp	r0, #2
    bb34:	d105      	bne.n	bb42 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bb36:	f000 f99b 	bl	be70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    bb3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bb3e:	f000 bae7 	b.w	c110 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    bb42:	bd10      	pop	{r4, pc}
    bb44:	2000109c 	.word	0x2000109c

0000bb48 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    bb48:	4901      	ldr	r1, [pc, #4]	; (bb50 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0x8>)
    bb4a:	2000      	movs	r0, #0
    bb4c:	6008      	str	r0, [r1, #0]
    bb4e:	4770      	bx	lr
    bb50:	40008540 	.word	0x40008540

0000bb54 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    bb54:	490a      	ldr	r1, [pc, #40]	; (bb80 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    bb56:	b508      	push	{r3, lr}
    bb58:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    bb5c:	2a01      	cmp	r2, #1
    bb5e:	d001      	beq.n	bb64 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    bb60:	2000      	movs	r0, #0
    bb62:	bd08      	pop	{r3, pc}
    bb64:	4a07      	ldr	r2, [pc, #28]	; (bb84 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    bb66:	6812      	ldr	r2, [r2, #0]
    bb68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    bb6c:	4252      	negs	r2, r2
    bb6e:	7002      	strb	r2, [r0, #0]
    bb70:	2000      	movs	r0, #0
    bb72:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    bb76:	4804      	ldr	r0, [pc, #16]	; (bb88 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    bb78:	6800      	ldr	r0, [r0, #0]
    bb7a:	9000      	str	r0, [sp, #0]
    bb7c:	2001      	movs	r0, #1
    bb7e:	bd08      	pop	{r3, pc}
    bb80:	40001000 	.word	0x40001000
    bb84:	40001548 	.word	0x40001548
    bb88:	4000111c 	.word	0x4000111c

0000bb8c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    bb8c:	4a03      	ldr	r2, [pc, #12]	; (bb9c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    bb8e:	0e01      	lsrs	r1, r0, #24
    bb90:	6011      	str	r1, [r2, #0]
    bb92:	4902      	ldr	r1, [pc, #8]	; (bb9c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    bb94:	0200      	lsls	r0, r0, #8
    bb96:	3908      	subs	r1, #8
    bb98:	6008      	str	r0, [r1, #0]
    bb9a:	4770      	bx	lr
    bb9c:	40001524 	.word	0x40001524

0000bba0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    bba0:	6800      	ldr	r0, [r0, #0]
    bba2:	4902      	ldr	r1, [pc, #8]	; (bbac <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    bba4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bba8:	6008      	str	r0, [r1, #0]
    bbaa:	4770      	bx	lr
    bbac:	4000153c 	.word	0x4000153c

0000bbb0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    bbb0:	b510      	push	{r4, lr}
    bbb2:	f000 fb23 	bl	c1fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    bbb6:	4806      	ldr	r0, [pc, #24]	; (bbd0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    bbb8:	6800      	ldr	r0, [r0, #0]
    bbba:	2803      	cmp	r0, #3
    bbbc:	d001      	beq.n	bbc2 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    bbbe:	280b      	cmp	r0, #11
    bbc0:	d104      	bne.n	bbcc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    bbc2:	f240 218a 	movw	r1, #650	; 0x28a
    bbc6:	203e      	movs	r0, #62	; 0x3e
    bbc8:	f7f8 f8e6 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbcc:	bd10      	pop	{r4, pc}
    bbce:	0000      	.short	0x0000
    bbd0:	40001550 	.word	0x40001550

0000bbd4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    bbd4:	4901      	ldr	r1, [pc, #4]	; (bbdc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bbd6:	7548      	strb	r0, [r1, #21]
    bbd8:	4770      	bx	lr
    bbda:	0000      	.short	0x0000
    bbdc:	2000109c 	.word	0x2000109c

0000bbe0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bbe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bbe4:	4d51      	ldr	r5, [pc, #324]	; (bd2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    bbe6:	2701      	movs	r7, #1
    bbe8:	64ef      	str	r7, [r5, #76]	; 0x4c
    bbea:	4851      	ldr	r0, [pc, #324]	; (bd30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bbec:	f8d0 9000 	ldr.w	r9, [r0]
    bbf0:	4850      	ldr	r0, [pc, #320]	; (bd34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bbf2:	6800      	ldr	r0, [r0, #0]
    bbf4:	4c50      	ldr	r4, [pc, #320]	; (bd38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bbf6:	e9c4 090c 	strd	r0, r9, [r4, #48]	; 0x30
    bbfa:	f000 f943 	bl	be84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    bbfe:	494f      	ldr	r1, [pc, #316]	; (bd3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bc00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bc02:	6008      	str	r0, [r1, #0]
    bc04:	f8df a138 	ldr.w	sl, [pc, #312]	; bd40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    bc08:	2600      	movs	r6, #0
    bc0a:	62a6      	str	r6, [r4, #40]	; 0x28
    bc0c:	f8da 1200 	ldr.w	r1, [sl, #512]	; 0x200
    bc10:	f240 121d 	movw	r2, #285	; 0x11d
    bc14:	4391      	bics	r1, r2
    bc16:	f8ca 1200 	str.w	r1, [sl, #512]	; 0x200
    bc1a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    bc1e:	f8da 010c 	ldr.w	r0, [sl, #268]	; 0x10c
    bc22:	b900      	cbnz	r0, bc26 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46>
    bc24:	64af      	str	r7, [r5, #72]	; 0x48
    bc26:	f000 f9b1 	bl	bf8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    bc2a:	4605      	mov	r5, r0
    bc2c:	4840      	ldr	r0, [pc, #256]	; (bd30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bc2e:	1f00      	subs	r0, r0, #4
    bc30:	6800      	ldr	r0, [r0, #0]
    bc32:	61e0      	str	r0, [r4, #28]
    bc34:	f7ff fdf6 	bl	b824 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    bc38:	f884 0020 	strb.w	r0, [r4, #32]
    bc3c:	7a60      	ldrb	r0, [r4, #9]
    bc3e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    bc42:	61a6      	str	r6, [r4, #24]
    bc44:	4e3f      	ldr	r6, [pc, #252]	; (bd44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    bc46:	07a8      	lsls	r0, r5, #30
    bc48:	d501      	bpl.n	bc4e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6e>
    bc4a:	6830      	ldr	r0, [r6, #0]
    bc4c:	61a0      	str	r0, [r4, #24]
    bc4e:	0728      	lsls	r0, r5, #28
    bc50:	d501      	bpl.n	bc56 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x76>
    bc52:	6830      	ldr	r0, [r6, #0]
    bc54:	61a0      	str	r0, [r4, #24]
    bc56:	f04f 0800 	mov.w	r8, #0
    bc5a:	4649      	mov	r1, r9
    bc5c:	4628      	mov	r0, r5
    bc5e:	f000 fa1d 	bl	c09c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    bc62:	b918      	cbnz	r0, bc6c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    bc64:	f8ca 7010 	str.w	r7, [sl, #16]
    bc68:	f04f 0801 	mov.w	r8, #1
    bc6c:	4f32      	ldr	r7, [pc, #200]	; (bd38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bc6e:	07e8      	lsls	r0, r5, #31
    bc70:	f1a7 0710 	sub.w	r7, r7, #16
    bc74:	d002      	beq.n	bc7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9c>
    bc76:	6838      	ldr	r0, [r7, #0]
    bc78:	4780      	blx	r0
    bc7a:	e031      	b.n	bce0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    bc7c:	07a8      	lsls	r0, r5, #30
    bc7e:	d526      	bpl.n	bcce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xee>
    bc80:	0768      	lsls	r0, r5, #29
    bc82:	d41e      	bmi.n	bcc2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bc84:	f000 fc5a 	bl	c53c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bc88:	b9d8      	cbnz	r0, bcc2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bc8a:	f000 fc47 	bl	c51c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bc8e:	b9c0      	cbnz	r0, bcc2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bc90:	482d      	ldr	r0, [pc, #180]	; (bd48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    bc92:	6800      	ldr	r0, [r0, #0]
    bc94:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    bc98:	f3c0 6300 	ubfx	r3, r0, #24, #1
    bc9c:	f000 020f 	and.w	r2, r0, #15
    bca0:	f3c0 1103 	ubfx	r1, r0, #4, #4
    bca4:	f3c0 2003 	ubfx	r0, r0, #8, #4
    bca8:	b15b      	cbz	r3, bcc2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bcaa:	b10a      	cbz	r2, bcb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    bcac:	b101      	cbz	r1, bcb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    bcae:	b940      	cbnz	r0, bcc2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bcb0:	4825      	ldr	r0, [pc, #148]	; (bd48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    bcb2:	1d00      	adds	r0, r0, #4
    bcb4:	6800      	ldr	r0, [r0, #0]
    bcb6:	b120      	cbz	r0, bcc2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bcb8:	f1bc 0f03 	cmp.w	ip, #3
    bcbc:	d201      	bcs.n	bcc2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bcbe:	f045 0504 	orr.w	r5, r5, #4
    bcc2:	f345 0080 	sbfx	r0, r5, #2, #1
    bcc6:	4641      	mov	r1, r8
    bcc8:	1c40      	adds	r0, r0, #1
    bcca:	687a      	ldr	r2, [r7, #4]
    bccc:	e007      	b.n	bcde <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfe>
    bcce:	f015 0f28 	tst.w	r5, #40	; 0x28
    bcd2:	d005      	beq.n	bce0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    bcd4:	f345 1140 	sbfx	r1, r5, #5, #1
    bcd8:	68ba      	ldr	r2, [r7, #8]
    bcda:	4640      	mov	r0, r8
    bcdc:	1c49      	adds	r1, r1, #1
    bcde:	4790      	blx	r2
    bce0:	06e8      	lsls	r0, r5, #27
    bce2:	d501      	bpl.n	bce8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    bce4:	68f8      	ldr	r0, [r7, #12]
    bce6:	4780      	blx	r0
    bce8:	7a60      	ldrb	r0, [r4, #9]
    bcea:	2802      	cmp	r0, #2
    bcec:	d11b      	bne.n	bd26 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    bcee:	7b20      	ldrb	r0, [r4, #12]
    bcf0:	2800      	cmp	r0, #0
    bcf2:	d018      	beq.n	bd26 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    bcf4:	2802      	cmp	r0, #2
    bcf6:	d004      	beq.n	bd02 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    bcf8:	2801      	cmp	r0, #1
    bcfa:	d006      	beq.n	bd0a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    bcfc:	f640 3103 	movw	r1, #2819	; 0xb03
    bd00:	e009      	b.n	bd16 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x136>
    bd02:	6921      	ldr	r1, [r4, #16]
    bd04:	69e0      	ldr	r0, [r4, #28]
    bd06:	4408      	add	r0, r1
    bd08:	e008      	b.n	bd1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    bd0a:	69e1      	ldr	r1, [r4, #28]
    bd0c:	6920      	ldr	r0, [r4, #16]
    bd0e:	4288      	cmp	r0, r1
    bd10:	d804      	bhi.n	bd1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    bd12:	f640 3104 	movw	r1, #2820	; 0xb04
    bd16:	203e      	movs	r0, #62	; 0x3e
    bd18:	f7f8 f83e 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd1c:	6030      	str	r0, [r6, #0]
    bd1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd22:	f000 ba03 	b.w	c12c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>
    bd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bd2a:	0000      	.short	0x0000
    bd2c:	40008000 	.word	0x40008000
    bd30:	4000854c 	.word	0x4000854c
    bd34:	4000b504 	.word	0x4000b504
    bd38:	2000109c 	.word	0x2000109c
    bd3c:	4001f508 	.word	0x4001f508
    bd40:	40001000 	.word	0x40001000
    bd44:	40008544 	.word	0x40008544
    bd48:	40001450 	.word	0x40001450

0000bd4c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    bd4c:	b570      	push	{r4, r5, r6, lr}
    bd4e:	4b11      	ldr	r3, [pc, #68]	; (bd94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    bd50:	888c      	ldrh	r4, [r1, #4]
    bd52:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    bd56:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    bd5a:	780c      	ldrb	r4, [r1, #0]
    bd5c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    bd60:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    bd64:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    bd68:	4d0b      	ldr	r5, [pc, #44]	; (bd98 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    bd6a:	6829      	ldr	r1, [r5, #0]
    bd6c:	f100 0608 	add.w	r6, r0, #8
    bd70:	2401      	movs	r4, #1
    bd72:	fa04 f306 	lsl.w	r3, r4, r6
    bd76:	b132      	cbz	r2, bd86 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    bd78:	2a01      	cmp	r2, #1
    bd7a:	d006      	beq.n	bd8a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    bd7c:	f240 41c1 	movw	r1, #1217	; 0x4c1
    bd80:	203e      	movs	r0, #62	; 0x3e
    bd82:	f7f8 f809 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd86:	4399      	bics	r1, r3
    bd88:	e000      	b.n	bd8c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    bd8a:	4319      	orrs	r1, r3
    bd8c:	4084      	lsls	r4, r0
    bd8e:	430c      	orrs	r4, r1
    bd90:	602c      	str	r4, [r5, #0]
    bd92:	bd70      	pop	{r4, r5, r6, pc}
    bd94:	40001000 	.word	0x40001000
    bd98:	40001640 	.word	0x40001640

0000bd9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    bd9c:	4901      	ldr	r1, [pc, #4]	; (bda4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    bd9e:	2001      	movs	r0, #1
    bda0:	7008      	strb	r0, [r1, #0]
    bda2:	4770      	bx	lr
    bda4:	20000264 	.word	0x20000264
    bda8:	b510      	push	{r4, lr}
    bdaa:	4604      	mov	r4, r0
    bdac:	f000 fbc6 	bl	c53c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bdb0:	2800      	cmp	r0, #0
    bdb2:	d00e      	beq.n	bdd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    bdb4:	4a09      	ldr	r2, [pc, #36]	; (bddc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    bdb6:	6811      	ldr	r1, [r2, #0]
    bdb8:	0650      	lsls	r0, r2, #25
    bdba:	2c02      	cmp	r4, #2
    bdbc:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    bdc0:	d008      	beq.n	bdd4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    bdc2:	f3c0 2006 	ubfx	r0, r0, #8, #7
    bdc6:	bf00      	nop
    bdc8:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    bdcc:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    bdd0:	6010      	str	r0, [r2, #0]
    bdd2:	bd10      	pop	{r4, pc}
    bdd4:	f3c0 6006 	ubfx	r0, r0, #24, #7
    bdd8:	e7f6      	b.n	bdc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    bdda:	0000      	.short	0x0000
    bddc:	40001588 	.word	0x40001588
    bde0:	480d      	ldr	r0, [pc, #52]	; (be18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>)
    bde2:	7d40      	ldrb	r0, [r0, #21]
    bde4:	2825      	cmp	r0, #37	; 0x25
    bde6:	d007      	beq.n	bdf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x5c>
    bde8:	2826      	cmp	r0, #38	; 0x26
    bdea:	d007      	beq.n	bdfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x60>
    bdec:	2827      	cmp	r0, #39	; 0x27
    bdee:	d007      	beq.n	be00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x64>
    bdf0:	280a      	cmp	r0, #10
    bdf2:	d807      	bhi.n	be04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    bdf4:	2204      	movs	r2, #4
    bdf6:	e006      	b.n	be06 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6a>
    bdf8:	2102      	movs	r1, #2
    bdfa:	e007      	b.n	be0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    bdfc:	211a      	movs	r1, #26
    bdfe:	e005      	b.n	be0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    be00:	2150      	movs	r1, #80	; 0x50
    be02:	e003      	b.n	be0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    be04:	2206      	movs	r2, #6
    be06:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    be0a:	b2c9      	uxtb	r1, r1
    be0c:	4a03      	ldr	r2, [pc, #12]	; (be1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    be0e:	6011      	str	r1, [r2, #0]
    be10:	4902      	ldr	r1, [pc, #8]	; (be1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    be12:	314c      	adds	r1, #76	; 0x4c
    be14:	6008      	str	r0, [r1, #0]
    be16:	4770      	bx	lr
    be18:	2000109c 	.word	0x2000109c
    be1c:	40001508 	.word	0x40001508
    be20:	4912      	ldr	r1, [pc, #72]	; (be6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>)
    be22:	b508      	push	{r3, lr}
    be24:	f991 2014 	ldrsb.w	r2, [r1, #20]
    be28:	7d49      	ldrb	r1, [r1, #21]
    be2a:	2801      	cmp	r0, #1
    be2c:	d00a      	beq.n	be44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa8>
    be2e:	2802      	cmp	r0, #2
    be30:	d00a      	beq.n	be48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xac>
    be32:	2804      	cmp	r0, #4
    be34:	d00a      	beq.n	be4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb0>
    be36:	2808      	cmp	r0, #8
    be38:	d00a      	beq.n	be50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    be3a:	f240 31da 	movw	r1, #986	; 0x3da
    be3e:	2006      	movs	r0, #6
    be40:	f7f7 ffaa 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be44:	2000      	movs	r0, #0
    be46:	e004      	b.n	be52 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    be48:	2001      	movs	r0, #1
    be4a:	e002      	b.n	be52 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    be4c:	2003      	movs	r0, #3
    be4e:	e000      	b.n	be52 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    be50:	2002      	movs	r0, #2
    be52:	466b      	mov	r3, sp
    be54:	f7f4 fb0e 	bl	474 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    be58:	b118      	cbz	r0, be62 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    be5a:	f240 41f3 	movw	r1, #1267	; 0x4f3
    be5e:	203e      	movs	r0, #62	; 0x3e
    be60:	e7ee      	b.n	be40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    be62:	f99d 0000 	ldrsb.w	r0, [sp]
    be66:	f000 f9e7 	bl	c238 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    be6a:	bd08      	pop	{r3, pc}
    be6c:	2000109c 	.word	0x2000109c
    be70:	4803      	ldr	r0, [pc, #12]	; (be80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe4>)
    be72:	7a01      	ldrb	r1, [r0, #8]
    be74:	2901      	cmp	r1, #1
    be76:	d102      	bne.n	be7e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe2>
    be78:	7a80      	ldrb	r0, [r0, #10]
    be7a:	f7ff bfd1 	b.w	be20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    be7e:	4770      	bx	lr
    be80:	2000109c 	.word	0x2000109c
    be84:	4805      	ldr	r0, [pc, #20]	; (be9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x100>)
    be86:	7a40      	ldrb	r0, [r0, #9]
    be88:	2801      	cmp	r0, #1
    be8a:	d003      	beq.n	be94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf8>
    be8c:	2802      	cmp	r0, #2
    be8e:	d103      	bne.n	be98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xfc>
    be90:	f003 bc82 	b.w	f798 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    be94:	f003 bc8c 	b.w	f7b0 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    be98:	4770      	bx	lr
    be9a:	0000      	.short	0x0000
    be9c:	2000109c 	.word	0x2000109c
    bea0:	4809      	ldr	r0, [pc, #36]	; (bec8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12c>)
    bea2:	b508      	push	{r3, lr}
    bea4:	2100      	movs	r1, #0
    bea6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    beaa:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    beae:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    beb2:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    beb6:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    beba:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    bebe:	4803      	ldr	r0, [pc, #12]	; (becc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x130>)
    bec0:	6800      	ldr	r0, [r0, #0]
    bec2:	9000      	str	r0, [sp, #0]
    bec4:	bd08      	pop	{r3, pc}
    bec6:	0000      	.short	0x0000
    bec8:	40001000 	.word	0x40001000
    becc:	40001118 	.word	0x40001118
    bed0:	4816      	ldr	r0, [pc, #88]	; (bf2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>)
    bed2:	b510      	push	{r4, lr}
    bed4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    bed8:	07c1      	lsls	r1, r0, #31
    beda:	d026      	beq.n	bf2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    bedc:	0781      	lsls	r1, r0, #30
    bede:	d513      	bpl.n	bf08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    bee0:	4813      	ldr	r0, [pc, #76]	; (bf30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    bee2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    bee6:	f041 0101 	orr.w	r1, r1, #1
    beea:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    beee:	4811      	ldr	r0, [pc, #68]	; (bf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x198>)
    bef0:	6800      	ldr	r0, [r0, #0]
    bef2:	280b      	cmp	r0, #11
    bef4:	d005      	beq.n	bf02 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    bef6:	280a      	cmp	r0, #10
    bef8:	d003      	beq.n	bf02 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    befa:	2803      	cmp	r0, #3
    befc:	d001      	beq.n	bf02 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    befe:	2802      	cmp	r0, #2
    bf00:	d113      	bne.n	bf2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    bf02:	f240 5123 	movw	r1, #1315	; 0x523
    bf06:	e00d      	b.n	bf24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    bf08:	0740      	lsls	r0, r0, #29
    bf0a:	d50e      	bpl.n	bf2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    bf0c:	4808      	ldr	r0, [pc, #32]	; (bf30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    bf0e:	490a      	ldr	r1, [pc, #40]	; (bf38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x19c>)
    bf10:	3008      	adds	r0, #8
    bf12:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    bf16:	4809      	ldr	r0, [pc, #36]	; (bf3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a0>)
    bf18:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    bf1c:	2801      	cmp	r0, #1
    bf1e:	d104      	bne.n	bf2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    bf20:	f240 512a 	movw	r1, #1322	; 0x52a
    bf24:	203e      	movs	r0, #62	; 0x3e
    bf26:	f7f7 ff37 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf2a:	bd10      	pop	{r4, pc}
    bf2c:	2000109c 	.word	0x2000109c
    bf30:	40001000 	.word	0x40001000
    bf34:	40001550 	.word	0x40001550
    bf38:	4001f098 	.word	0x4001f098
    bf3c:	40008000 	.word	0x40008000
    bf40:	4808      	ldr	r0, [pc, #32]	; (bf64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c8>)
    bf42:	4601      	mov	r1, r0
    bf44:	79c2      	ldrb	r2, [r0, #7]
    bf46:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    bf4a:	b112      	cbz	r2, bf52 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b6>
    bf4c:	2a01      	cmp	r2, #1
    bf4e:	d003      	beq.n	bf58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    bf50:	e006      	b.n	bf60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    bf52:	f041 0102 	orr.w	r1, r1, #2
    bf56:	e001      	b.n	bf5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    bf58:	f041 0104 	orr.w	r1, r1, #4
    bf5c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    bf60:	f7ff bfb6 	b.w	bed0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    bf64:	2000109c 	.word	0x2000109c
    bf68:	b510      	push	{r4, lr}
    bf6a:	f000 fae7 	bl	c53c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bf6e:	2800      	cmp	r0, #0
    bf70:	d108      	bne.n	bf84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    bf72:	f000 fad3 	bl	c51c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bf76:	2800      	cmp	r0, #0
    bf78:	d104      	bne.n	bf84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    bf7a:	4803      	ldr	r0, [pc, #12]	; (bf88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ec>)
    bf7c:	6801      	ldr	r1, [r0, #0]
    bf7e:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    bf82:	6001      	str	r1, [r0, #0]
    bf84:	bd10      	pop	{r4, pc}
    bf86:	0000      	.short	0x0000
    bf88:	40001568 	.word	0x40001568
    bf8c:	b538      	push	{r3, r4, r5, lr}
    bf8e:	4d32      	ldr	r5, [pc, #200]	; (c058 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2bc>)
    bf90:	2400      	movs	r4, #0
    bf92:	7b28      	ldrb	r0, [r5, #12]
    bf94:	b120      	cbz	r0, bfa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    bf96:	4831      	ldr	r0, [pc, #196]	; (c05c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c0>)
    bf98:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    bf9c:	2801      	cmp	r0, #1
    bf9e:	d007      	beq.n	bfb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x214>
    bfa0:	2200      	movs	r2, #0
    bfa2:	7a69      	ldrb	r1, [r5, #9]
    bfa4:	482e      	ldr	r0, [pc, #184]	; (c060 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>)
    bfa6:	2901      	cmp	r1, #1
    bfa8:	d004      	beq.n	bfb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x218>
    bfaa:	2902      	cmp	r1, #2
    bfac:	d00a      	beq.n	bfc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x228>
    bfae:	e019      	b.n	bfe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    bfb0:	2201      	movs	r2, #1
    bfb2:	e7f6      	b.n	bfa2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x206>
    bfb4:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    bfb8:	2901      	cmp	r1, #1
    bfba:	d001      	beq.n	bfc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    bfbc:	2400      	movs	r4, #0
    bfbe:	e011      	b.n	bfe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    bfc0:	2408      	movs	r4, #8
    bfc2:	e00f      	b.n	bfe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    bfc4:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    bfc8:	2901      	cmp	r1, #1
    bfca:	d006      	beq.n	bfda <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    bfcc:	2100      	movs	r1, #0
    bfce:	4b25      	ldr	r3, [pc, #148]	; (c064 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    bfd0:	681b      	ldr	r3, [r3, #0]
    bfd2:	2b01      	cmp	r3, #1
    bfd4:	d003      	beq.n	bfde <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x242>
    bfd6:	2404      	movs	r4, #4
    bfd8:	e002      	b.n	bfe0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    bfda:	2102      	movs	r1, #2
    bfdc:	e7f7      	b.n	bfce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x232>
    bfde:	2400      	movs	r4, #0
    bfe0:	430c      	orrs	r4, r1
    bfe2:	4314      	orrs	r4, r2
    bfe4:	f014 0f0b 	tst.w	r4, #11
    bfe8:	d105      	bne.n	bff6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x25a>
    bfea:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    bfee:	2901      	cmp	r1, #1
    bff0:	d029      	beq.n	c046 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2aa>
    bff2:	2100      	movs	r1, #0
    bff4:	430c      	orrs	r4, r1
    bff6:	491c      	ldr	r1, [pc, #112]	; (c068 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>)
    bff8:	7809      	ldrb	r1, [r1, #0]
    bffa:	b1d1      	cbz	r1, c032 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x296>
    bffc:	491b      	ldr	r1, [pc, #108]	; (c06c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>)
    bffe:	6809      	ldr	r1, [r1, #0]
    c000:	f011 0fff 	tst.w	r1, #255	; 0xff
    c004:	d003      	beq.n	c00e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x272>
    c006:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    c00a:	2a01      	cmp	r2, #1
    c00c:	d000      	beq.n	c010 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>
    c00e:	2200      	movs	r2, #0
    c010:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
    c014:	f011 0fff 	tst.w	r1, #255	; 0xff
    c018:	d003      	beq.n	c022 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x286>
    c01a:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    c01e:	2801      	cmp	r0, #1
    c020:	d000      	beq.n	c024 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x288>
    c022:	2000      	movs	r0, #0
    c024:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c028:	480e      	ldr	r0, [pc, #56]	; (c064 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    c02a:	3010      	adds	r0, #16
    c02c:	6800      	ldr	r0, [r0, #0]
    c02e:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c032:	f7ff ff35 	bl	bea0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>
    c036:	06e0      	lsls	r0, r4, #27
    c038:	d509      	bpl.n	c04e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    c03a:	0720      	lsls	r0, r4, #28
    c03c:	d407      	bmi.n	c04e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    c03e:	7a68      	ldrb	r0, [r5, #9]
    c040:	2801      	cmp	r0, #1
    c042:	d002      	beq.n	c04a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ae>
    c044:	e003      	b.n	c04e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    c046:	2110      	movs	r1, #16
    c048:	e7d4      	b.n	bff4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x258>
    c04a:	f044 0420 	orr.w	r4, r4, #32
    c04e:	4808      	ldr	r0, [pc, #32]	; (c070 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d4>)
    c050:	6800      	ldr	r0, [r0, #0]
    c052:	9000      	str	r0, [sp, #0]
    c054:	4620      	mov	r0, r4
    c056:	bd38      	pop	{r3, r4, r5, pc}
    c058:	2000109c 	.word	0x2000109c
    c05c:	40008000 	.word	0x40008000
    c060:	40001000 	.word	0x40001000
    c064:	40001400 	.word	0x40001400
    c068:	20000264 	.word	0x20000264
    c06c:	40001640 	.word	0x40001640
    c070:	40008144 	.word	0x40008144
    c074:	4808      	ldr	r0, [pc, #32]	; (c098 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    c076:	b510      	push	{r4, lr}
    c078:	6800      	ldr	r0, [r0, #0]
    c07a:	f000 000f 	and.w	r0, r0, #15
    c07e:	2803      	cmp	r0, #3
    c080:	d006      	beq.n	c090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    c082:	2804      	cmp	r0, #4
    c084:	d006      	beq.n	c094 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f8>
    c086:	f240 2112 	movw	r1, #530	; 0x212
    c08a:	203e      	movs	r0, #62	; 0x3e
    c08c:	f7f7 fe84 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c090:	2001      	movs	r0, #1
    c092:	bd10      	pop	{r4, pc}
    c094:	2002      	movs	r0, #2
    c096:	bd10      	pop	{r4, pc}
    c098:	40001510 	.word	0x40001510
    c09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0a0:	4c19      	ldr	r4, [pc, #100]	; (c108 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36c>)
    c0a2:	460d      	mov	r5, r1
    c0a4:	7a21      	ldrb	r1, [r4, #8]
    c0a6:	b129      	cbz	r1, c0b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>
    c0a8:	f010 0f11 	tst.w	r0, #17
    c0ac:	d00b      	beq.n	c0c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x32a>
    c0ae:	f7ff fa4b 	bl	b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c0b2:	e027      	b.n	c104 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    c0b4:	4915      	ldr	r1, [pc, #84]	; (c10c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x370>)
    c0b6:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c0ba:	6008      	str	r0, [r1, #0]
    c0bc:	f000 f85e 	bl	c17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c0c0:	2000      	movs	r0, #0
    c0c2:	7320      	strb	r0, [r4, #12]
    c0c4:	e01e      	b.n	c104 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    c0c6:	2901      	cmp	r1, #1
    c0c8:	d001      	beq.n	c0ce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x332>
    c0ca:	2601      	movs	r6, #1
    c0cc:	e000      	b.n	c0d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    c0ce:	2600      	movs	r6, #0
    c0d0:	79e0      	ldrb	r0, [r4, #7]
    c0d2:	2801      	cmp	r0, #1
    c0d4:	d00e      	beq.n	c0f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    c0d6:	2700      	movs	r7, #0
    c0d8:	f000 f850 	bl	c17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c0dc:	2196      	movs	r1, #150	; 0x96
    c0de:	4630      	mov	r0, r6
    c0e0:	f000 f862 	bl	c1a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40c>
    c0e4:	4601      	mov	r1, r0
    c0e6:	b14f      	cbz	r7, c0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x360>
    c0e8:	353b      	adds	r5, #59	; 0x3b
    c0ea:	428d      	cmp	r5, r1
    c0ec:	d904      	bls.n	c0f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    c0ee:	2000      	movs	r0, #0
    c0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0f4:	2701      	movs	r7, #1
    c0f6:	e7ef      	b.n	c0d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>
    c0f8:	2001      	movs	r0, #1
    c0fa:	71e0      	strb	r0, [r4, #7]
    c0fc:	7aa2      	ldrb	r2, [r4, #10]
    c0fe:	4630      	mov	r0, r6
    c100:	f7ff fc88 	bl	ba14 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c104:	2001      	movs	r0, #1
    c106:	e7f3      	b.n	c0f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    c108:	2000109c 	.word	0x2000109c
    c10c:	4001f508 	.word	0x4001f508
    c110:	4805      	ldr	r0, [pc, #20]	; (c128 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    c112:	2100      	movs	r1, #0
    c114:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    c118:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c11c:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c120:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c124:	4770      	bx	lr
    c126:	0000      	.short	0x0000
    c128:	40001000 	.word	0x40001000
    c12c:	4804      	ldr	r0, [pc, #16]	; (c140 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    c12e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c130:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c134:	6281      	str	r1, [r0, #40]	; 0x28
    c136:	4903      	ldr	r1, [pc, #12]	; (c144 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>)
    c138:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c13c:	6008      	str	r0, [r1, #0]
    c13e:	4770      	bx	lr
    c140:	2000109c 	.word	0x2000109c
    c144:	4001f504 	.word	0x4001f504
    c148:	4905      	ldr	r1, [pc, #20]	; (c160 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    c14a:	2000      	movs	r0, #0
    c14c:	6008      	str	r0, [r1, #0]
    c14e:	1f09      	subs	r1, r1, #4
    c150:	6008      	str	r0, [r1, #0]
    c152:	1f09      	subs	r1, r1, #4
    c154:	6008      	str	r0, [r1, #0]
    c156:	4902      	ldr	r1, [pc, #8]	; (c160 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    c158:	1d09      	adds	r1, r1, #4
    c15a:	6008      	str	r0, [r1, #0]
    c15c:	4770      	bx	lr
    c15e:	0000      	.short	0x0000
    c160:	40008548 	.word	0x40008548
    c164:	4903      	ldr	r1, [pc, #12]	; (c174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d8>)
    c166:	79c9      	ldrb	r1, [r1, #7]
    c168:	2900      	cmp	r1, #0
    c16a:	d102      	bne.n	c172 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d6>
    c16c:	4902      	ldr	r1, [pc, #8]	; (c178 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    c16e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c172:	4770      	bx	lr
    c174:	2000109c 	.word	0x2000109c
    c178:	4001f098 	.word	0x4001f098
    c17c:	4802      	ldr	r0, [pc, #8]	; (c188 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c17e:	2100      	movs	r1, #0
    c180:	71c1      	strb	r1, [r0, #7]
    c182:	7201      	strb	r1, [r0, #8]
    c184:	7241      	strb	r1, [r0, #9]
    c186:	4770      	bx	lr
    c188:	2000109c 	.word	0x2000109c
    c18c:	4a05      	ldr	r2, [pc, #20]	; (c1a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>)
    c18e:	79d2      	ldrb	r2, [r2, #7]
    c190:	2a01      	cmp	r2, #1
    c192:	d006      	beq.n	c1a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    c194:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c198:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c19c:	fbb1 f1f2 	udiv	r1, r1, r2
    c1a0:	1a40      	subs	r0, r0, r1
    c1a2:	4770      	bx	lr
    c1a4:	2000109c 	.word	0x2000109c
    c1a8:	b570      	push	{r4, r5, r6, lr}
    c1aa:	4c13      	ldr	r4, [pc, #76]	; (c1f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>)
    c1ac:	4603      	mov	r3, r0
    c1ae:	460d      	mov	r5, r1
    c1b0:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c1b4:	2000      	movs	r0, #0
    c1b6:	b15a      	cbz	r2, c1d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    c1b8:	4621      	mov	r1, r4
    c1ba:	f891 1020 	ldrb.w	r1, [r1, #32]
    c1be:	b163      	cbz	r3, c1da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x43e>
    c1c0:	2b01      	cmp	r3, #1
    c1c2:	d111      	bne.n	c1e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>
    c1c4:	2a01      	cmp	r2, #1
    c1c6:	4628      	mov	r0, r5
    c1c8:	d012      	beq.n	c1f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c1ca:	f003 fbbf 	bl	f94c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c1ce:	e009      	b.n	c1e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c1d0:	f240 7166 	movw	r1, #1894	; 0x766
    c1d4:	203e      	movs	r0, #62	; 0x3e
    c1d6:	f7f7 fddf 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1da:	2a01      	cmp	r2, #1
    c1dc:	4628      	mov	r0, r5
    c1de:	d004      	beq.n	c1ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44e>
    c1e0:	f003 fbc2 	bl	f968 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c1e4:	69e1      	ldr	r1, [r4, #28]
    c1e6:	4408      	add	r0, r1
    c1e8:	bd70      	pop	{r4, r5, r6, pc}
    c1ea:	f003 fbd7 	bl	f99c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c1ee:	e7f9      	b.n	c1e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c1f0:	f003 fbc5 	bl	f97e <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c1f4:	e7f6      	b.n	c1e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c1f6:	0000      	.short	0x0000
    c1f8:	2000109c 	.word	0x2000109c
    c1fc:	b510      	push	{r4, lr}
    c1fe:	2200      	movs	r2, #0
    c200:	2901      	cmp	r1, #1
    c202:	d008      	beq.n	c216 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47a>
    c204:	2902      	cmp	r1, #2
    c206:	d004      	beq.n	c212 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    c208:	f240 2169 	movw	r1, #617	; 0x269
    c20c:	203e      	movs	r0, #62	; 0x3e
    c20e:	f7f7 fdc3 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c212:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c216:	4905      	ldr	r1, [pc, #20]	; (c22c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x490>)
    c218:	430a      	orrs	r2, r1
    c21a:	4905      	ldr	r1, [pc, #20]	; (c230 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    c21c:	600a      	str	r2, [r1, #0]
    c21e:	4905      	ldr	r1, [pc, #20]	; (c234 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x498>)
    c220:	4308      	orrs	r0, r1
    c222:	4903      	ldr	r1, [pc, #12]	; (c230 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    c224:	1d09      	adds	r1, r1, #4
    c226:	6008      	str	r0, [r1, #0]
    c228:	bd10      	pop	{r4, pc}
    c22a:	0000      	.short	0x0000
    c22c:	00100108 	.word	0x00100108
    c230:	40001514 	.word	0x40001514
    c234:	02030000 	.word	0x02030000

0000c238 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c238:	4901      	ldr	r1, [pc, #4]	; (c240 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c23a:	b2c0      	uxtb	r0, r0
    c23c:	6008      	str	r0, [r1, #0]
    c23e:	4770      	bx	lr
    c240:	4000150c 	.word	0x4000150c

0000c244 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    c244:	b510      	push	{r4, lr}
    c246:	4907      	ldr	r1, [pc, #28]	; (c264 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    c248:	2801      	cmp	r0, #1
    c24a:	d005      	beq.n	c258 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    c24c:	2802      	cmp	r0, #2
    c24e:	d005      	beq.n	c25c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    c250:	218b      	movs	r1, #139	; 0x8b
    c252:	203f      	movs	r0, #63	; 0x3f
    c254:	f7f7 fda0 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c258:	2003      	movs	r0, #3
    c25a:	e000      	b.n	c25e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    c25c:	2004      	movs	r0, #4
    c25e:	6008      	str	r0, [r1, #0]
    c260:	bd10      	pop	{r4, pc}
    c262:	0000      	.short	0x0000
    c264:	40001510 	.word	0x40001510

0000c268 <strcmp>:
    c268:	f810 2b01 	ldrb.w	r2, [r0], #1
    c26c:	f811 3b01 	ldrb.w	r3, [r1], #1
    c270:	2a01      	cmp	r2, #1
    c272:	bf28      	it	cs
    c274:	429a      	cmpcs	r2, r3
    c276:	d0f7      	beq.n	c268 <strcmp>
    c278:	1ad0      	subs	r0, r2, r3
    c27a:	4770      	bx	lr

0000c27c <strlen>:
    c27c:	4603      	mov	r3, r0
    c27e:	f813 2b01 	ldrb.w	r2, [r3], #1
    c282:	2a00      	cmp	r2, #0
    c284:	d1fb      	bne.n	c27e <strlen+0x2>
    c286:	1a18      	subs	r0, r3, r0
    c288:	3801      	subs	r0, #1
    c28a:	4770      	bx	lr

0000c28c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    c28c:	4770      	bx	lr
    c28e:	2100      	movs	r1, #0
    c290:	7081      	strb	r1, [r0, #2]
    c292:	7001      	strb	r1, [r0, #0]
    c294:	7041      	strb	r1, [r0, #1]
    c296:	4770      	bx	lr

0000c298 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c298:	b570      	push	{r4, r5, r6, lr}
    c29a:	f7f4 f905 	bl	4a8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c29e:	4605      	mov	r5, r0
    c2a0:	2400      	movs	r4, #0
    c2a2:	e006      	b.n	c2b2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c2a4:	4620      	mov	r0, r4
    c2a6:	f7f4 f905 	bl	4b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c2aa:	f7ff fff0 	bl	c28e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    c2ae:	1c64      	adds	r4, r4, #1
    c2b0:	b2e4      	uxtb	r4, r4
    c2b2:	42ac      	cmp	r4, r5
    c2b4:	d3f6      	bcc.n	c2a4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c2b6:	bd70      	pop	{r4, r5, r6, pc}

0000c2b8 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    c2b8:	2000      	movs	r0, #0
    c2ba:	f7f6 beed 	b.w	3098 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000c2be <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    c2be:	b510      	push	{r4, lr}
    c2c0:	f7f6 fbd6 	bl	2a70 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    c2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2c8:	f000 b800 	b.w	c2cc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000c2cc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c2cc:	0a41      	lsrs	r1, r0, #9
    c2ce:	f643 5209 	movw	r2, #15625	; 0x3d09
    c2d2:	4351      	muls	r1, r2
    c2d4:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c2d8:	fb10 f002 	smulbb	r0, r0, r2
    c2dc:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c2e0:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c2e4:	4770      	bx	lr

0000c2e6 <MPSL_IRQ_RADIO_Handler>:
    c2e6:	f7f5 b9f3 	b.w	16d0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    c2ea:	2800      	cmp	r0, #0
    c2ec:	db09      	blt.n	c302 <MPSL_IRQ_RADIO_Handler+0x1c>
    c2ee:	f000 021f 	and.w	r2, r0, #31
    c2f2:	2101      	movs	r1, #1
    c2f4:	4091      	lsls	r1, r2
    c2f6:	0940      	lsrs	r0, r0, #5
    c2f8:	0080      	lsls	r0, r0, #2
    c2fa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c2fe:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c302:	4770      	bx	lr
    c304:	2800      	cmp	r0, #0
    c306:	db0d      	blt.n	c324 <MPSL_IRQ_RADIO_Handler+0x3e>
    c308:	f000 021f 	and.w	r2, r0, #31
    c30c:	2101      	movs	r1, #1
    c30e:	4091      	lsls	r1, r2
    c310:	0940      	lsrs	r0, r0, #5
    c312:	0080      	lsls	r0, r0, #2
    c314:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c318:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c31c:	f3bf 8f4f 	dsb	sy
    c320:	f3bf 8f6f 	isb	sy
    c324:	4770      	bx	lr

0000c326 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c326:	b570      	push	{r4, r5, r6, lr}
    c328:	4602      	mov	r2, r0
    c32a:	2000      	movs	r0, #0
    c32c:	2900      	cmp	r1, #0
    c32e:	d01d      	beq.n	c36c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c330:	fba2 0101 	umull	r0, r1, r2, r1
    c334:	0a40      	lsrs	r0, r0, #9
    c336:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c33a:	0a49      	lsrs	r1, r1, #9
    c33c:	1c40      	adds	r0, r0, #1
    c33e:	f141 0100 	adc.w	r1, r1, #0
    c342:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c346:	1883      	adds	r3, r0, r2
    c348:	f141 0100 	adc.w	r1, r1, #0
    c34c:	1c5b      	adds	r3, r3, #1
    c34e:	f141 0400 	adc.w	r4, r1, #0
    c352:	2100      	movs	r1, #0
    c354:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c358:	41a1      	sbcs	r1, r4
    c35a:	d203      	bcs.n	c364 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c35c:	2171      	movs	r1, #113	; 0x71
    c35e:	206d      	movs	r0, #109	; 0x6d
    c360:	f7f7 fa3e 	bl	37e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c364:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c368:	fbb0 f0f2 	udiv	r0, r0, r2
    c36c:	bd70      	pop	{r4, r5, r6, pc}
    c36e:	5840      	ldr	r0, [r0, r1]
    c370:	2800      	cmp	r0, #0
    c372:	d000      	beq.n	c376 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c374:	2001      	movs	r0, #1
    c376:	4770      	bx	lr
    c378:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c37c:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c380:	f002 0201 	and.w	r2, r2, #1
    c384:	03c0      	lsls	r0, r0, #15
    c386:	d503      	bpl.n	c390 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c388:	428a      	cmp	r2, r1
    c38a:	d101      	bne.n	c390 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c38c:	2001      	movs	r0, #1
    c38e:	4770      	bx	lr
    c390:	2000      	movs	r0, #0
    c392:	4770      	bx	lr

0000c394 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c394:	b510      	push	{r4, lr}
    c396:	2101      	movs	r1, #1
    c398:	0788      	lsls	r0, r1, #30
    c39a:	f7f7 f9df 	bl	375c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c39e:	2800      	cmp	r0, #0
    c3a0:	d000      	beq.n	c3a4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c3a2:	2001      	movs	r0, #1
    c3a4:	bd10      	pop	{r4, pc}

0000c3a6 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c3a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c3aa:	2101      	movs	r1, #1
    c3ac:	6001      	str	r1, [r0, #0]
    c3ae:	4770      	bx	lr

0000c3b0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c3b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c3b4:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c3b8:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c3bc:	f002 0203 	and.w	r2, r2, #3
    c3c0:	03c9      	lsls	r1, r1, #15
    c3c2:	d503      	bpl.n	c3cc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c3c4:	4282      	cmp	r2, r0
    c3c6:	d101      	bne.n	c3cc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c3c8:	2001      	movs	r0, #1
    c3ca:	4770      	bx	lr
    c3cc:	2000      	movs	r0, #0
    c3ce:	4770      	bx	lr

0000c3d0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c3d0:	b510      	push	{r4, lr}
    c3d2:	2100      	movs	r1, #0
    c3d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c3d8:	f7f7 f9c0 	bl	375c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c3dc:	2800      	cmp	r0, #0
    c3de:	d000      	beq.n	c3e2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c3e0:	2001      	movs	r0, #1
    c3e2:	bd10      	pop	{r4, pc}
    c3e4:	2800      	cmp	r0, #0
    c3e6:	db09      	blt.n	c3fc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c3e8:	f000 021f 	and.w	r2, r0, #31
    c3ec:	2101      	movs	r1, #1
    c3ee:	4091      	lsls	r1, r2
    c3f0:	0940      	lsrs	r0, r0, #5
    c3f2:	0080      	lsls	r0, r0, #2
    c3f4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c3f8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c3fc:	4770      	bx	lr
    c3fe:	2800      	cmp	r0, #0
    c400:	db0d      	blt.n	c41e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c402:	f000 021f 	and.w	r2, r0, #31
    c406:	2101      	movs	r1, #1
    c408:	4091      	lsls	r1, r2
    c40a:	0940      	lsrs	r0, r0, #5
    c40c:	0080      	lsls	r0, r0, #2
    c40e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c412:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c416:	f3bf 8f4f 	dsb	sy
    c41a:	f3bf 8f6f 	isb	sy
    c41e:	4770      	bx	lr
    c420:	00021000 	.word	0x00021000
    c424:	000000fa 	.word	0x000000fa
    c428:	71a053fe 	.word	0x71a053fe
    c42c:	1095eb1b 	.word	0x1095eb1b
    c430:	c946cf33 	.word	0xc946cf33
    c434:	5ebe9563 	.word	0x5ebe9563
    c438:	736e3829 	.word	0x736e3829
    c43c:	2800      	cmp	r0, #0
    c43e:	db09      	blt.n	c454 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c440:	f000 021f 	and.w	r2, r0, #31
    c444:	2101      	movs	r1, #1
    c446:	4091      	lsls	r1, r2
    c448:	0940      	lsrs	r0, r0, #5
    c44a:	0080      	lsls	r0, r0, #2
    c44c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c450:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c454:	4770      	bx	lr

0000c456 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c456:	f3ef 8110 	mrs	r1, PRIMASK
    c45a:	b672      	cpsid	i
    c45c:	7802      	ldrb	r2, [r0, #0]
    c45e:	2a01      	cmp	r2, #1
    c460:	d001      	beq.n	c466 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c462:	2201      	movs	r2, #1
    c464:	e000      	b.n	c468 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c466:	2200      	movs	r2, #0
    c468:	2301      	movs	r3, #1
    c46a:	7003      	strb	r3, [r0, #0]
    c46c:	b901      	cbnz	r1, c470 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c46e:	b662      	cpsie	i
    c470:	b10a      	cbz	r2, c476 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c472:	2000      	movs	r0, #0
    c474:	4770      	bx	lr
    c476:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c47a:	4770      	bx	lr

0000c47c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c47c:	2100      	movs	r1, #0
    c47e:	7001      	strb	r1, [r0, #0]
    c480:	4608      	mov	r0, r1
    c482:	4770      	bx	lr

0000c484 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c484:	f3ef 8110 	mrs	r1, PRIMASK
    c488:	b672      	cpsid	i
    c48a:	2200      	movs	r2, #0
    c48c:	7002      	strb	r2, [r0, #0]
    c48e:	b901      	cbnz	r1, c492 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c490:	b662      	cpsie	i
    c492:	2000      	movs	r0, #0
    c494:	4770      	bx	lr

0000c496 <mpsl_low_priority_process>:
    c496:	f7f7 ba8f 	b.w	39b8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c49a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c49a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c49e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4a2:	280f      	cmp	r0, #15
    c4a4:	d001      	beq.n	c4aa <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c4a6:	2000      	movs	r0, #0
    c4a8:	4770      	bx	lr
    c4aa:	2001      	movs	r0, #1
    c4ac:	4770      	bx	lr

0000c4ae <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c4ae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4b2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4b6:	280a      	cmp	r0, #10
    c4b8:	d001      	beq.n	c4be <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c4ba:	2000      	movs	r0, #0
    c4bc:	4770      	bx	lr
    c4be:	2001      	movs	r0, #1
    c4c0:	4770      	bx	lr

0000c4c2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c4c2:	b500      	push	{lr}
    c4c4:	f7ff fff3 	bl	c4ae <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c4c8:	b120      	cbz	r0, c4d4 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c4ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4ce:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c4d2:	b108      	cbz	r0, c4d8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c4d4:	2000      	movs	r0, #0
    c4d6:	bd00      	pop	{pc}
    c4d8:	2001      	movs	r0, #1
    c4da:	bd00      	pop	{pc}

0000c4dc <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c4dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4e0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4e4:	280e      	cmp	r0, #14
    c4e6:	d001      	beq.n	c4ec <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c4e8:	2000      	movs	r0, #0
    c4ea:	4770      	bx	lr
    c4ec:	2001      	movs	r0, #1
    c4ee:	4770      	bx	lr

0000c4f0 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c4f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4f4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4f8:	2810      	cmp	r0, #16
    c4fa:	d001      	beq.n	c500 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c4fc:	2000      	movs	r0, #0
    c4fe:	4770      	bx	lr
    c500:	2001      	movs	r0, #1
    c502:	4770      	bx	lr

0000c504 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c504:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c508:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c50c:	2806      	cmp	r0, #6
    c50e:	d003      	beq.n	c518 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c510:	1c40      	adds	r0, r0, #1
    c512:	d001      	beq.n	c518 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c514:	2000      	movs	r0, #0
    c516:	4770      	bx	lr
    c518:	2001      	movs	r0, #1
    c51a:	4770      	bx	lr

0000c51c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c51c:	b500      	push	{lr}
    c51e:	f7ff fff1 	bl	c504 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c522:	b148      	cbz	r0, c538 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c524:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c528:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c52c:	2806      	cmp	r0, #6
    c52e:	d303      	bcc.n	c538 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c530:	1c40      	adds	r0, r0, #1
    c532:	d001      	beq.n	c538 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c534:	2001      	movs	r0, #1
    c536:	bd00      	pop	{pc}
    c538:	2000      	movs	r0, #0
    c53a:	bd00      	pop	{pc}

0000c53c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c53c:	b500      	push	{lr}
    c53e:	f7ff ffe1 	bl	c504 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c542:	b138      	cbz	r0, c554 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c544:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c548:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c54c:	2806      	cmp	r0, #6
    c54e:	d303      	bcc.n	c558 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c550:	1c40      	adds	r0, r0, #1
    c552:	d001      	beq.n	c558 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c554:	2000      	movs	r0, #0
    c556:	bd00      	pop	{pc}
    c558:	2001      	movs	r0, #1
    c55a:	bd00      	pop	{pc}

0000c55c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c55c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c560:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c564:	280d      	cmp	r0, #13
    c566:	d001      	beq.n	c56c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c568:	2000      	movs	r0, #0
    c56a:	4770      	bx	lr
    c56c:	2001      	movs	r0, #1
    c56e:	4770      	bx	lr

0000c570 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c570:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c574:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c578:	2808      	cmp	r0, #8
    c57a:	d001      	beq.n	c580 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c57c:	2000      	movs	r0, #0
    c57e:	4770      	bx	lr
    c580:	2001      	movs	r0, #1
    c582:	4770      	bx	lr

0000c584 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    c584:	2a00      	cmp	r2, #0
    c586:	bf04      	itt	eq
    c588:	2000      	moveq	r0, #0
    c58a:	4770      	bxeq	lr
    c58c:	1e52      	subs	r2, r2, #1
    c58e:	d007      	beq.n	c5a0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    c590:	7803      	ldrb	r3, [r0, #0]
    c592:	f891 c000 	ldrb.w	ip, [r1]
    c596:	4563      	cmp	r3, ip
    c598:	bf04      	itt	eq
    c59a:	1c40      	addeq	r0, r0, #1
    c59c:	1c49      	addeq	r1, r1, #1
    c59e:	d0f5      	beq.n	c58c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    c5a0:	7800      	ldrb	r0, [r0, #0]
    c5a2:	7809      	ldrb	r1, [r1, #0]
    c5a4:	1a40      	subs	r0, r0, r1
    c5a6:	4770      	bx	lr

0000c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c5a8:	b4f0      	push	{r4, r5, r6, r7}
    c5aa:	ea80 0c01 	eor.w	ip, r0, r1
    c5ae:	4603      	mov	r3, r0
    c5b0:	f01c 0f03 	tst.w	ip, #3
    c5b4:	d13c      	bne.n	c630 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c5b6:	f013 0f03 	tst.w	r3, #3
    c5ba:	d00b      	beq.n	c5d4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c5bc:	2a00      	cmp	r2, #0
    c5be:	bf04      	itt	eq
    c5c0:	bcf0      	popeq	{r4, r5, r6, r7}
    c5c2:	4770      	bxeq	lr
    c5c4:	f811 cb01 	ldrb.w	ip, [r1], #1
    c5c8:	f803 cb01 	strb.w	ip, [r3], #1
    c5cc:	1e52      	subs	r2, r2, #1
    c5ce:	f013 0f03 	tst.w	r3, #3
    c5d2:	d1f3      	bne.n	c5bc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c5d4:	2a03      	cmp	r2, #3
    c5d6:	d94f      	bls.n	c678 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c5d8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c5dc:	d24c      	bcs.n	c678 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c5de:	f1c2 0c00 	rsb	ip, r2, #0
    c5e2:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c5e6:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c5ea:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c5ee:	f1cc 0c00 	rsb	ip, ip, #0
    c5f2:	f1bc 0f00 	cmp.w	ip, #0
    c5f6:	dd1b      	ble.n	c630 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c5f8:	1f0d      	subs	r5, r1, #4
    c5fa:	1f1c      	subs	r4, r3, #4
    c5fc:	f01c 0f01 	tst.w	ip, #1
    c600:	d003      	beq.n	c60a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c602:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c606:	f844 6f04 	str.w	r6, [r4, #4]!
    c60a:	ea5f 066c 	movs.w	r6, ip, asr #1
    c60e:	d007      	beq.n	c620 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c610:	686f      	ldr	r7, [r5, #4]
    c612:	6067      	str	r7, [r4, #4]
    c614:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c618:	f844 7f08 	str.w	r7, [r4, #8]!
    c61c:	1e76      	subs	r6, r6, #1
    c61e:	d1f7      	bne.n	c610 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c620:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c624:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c628:	f1cc 0c00 	rsb	ip, ip, #0
    c62c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c630:	2a00      	cmp	r2, #0
    c632:	bf04      	itt	eq
    c634:	bcf0      	popeq	{r4, r5, r6, r7}
    c636:	4770      	bxeq	lr
    c638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c63c:	d226      	bcs.n	c68c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c63e:	2a00      	cmp	r2, #0
    c640:	bfdc      	itt	le
    c642:	bcf0      	pople	{r4, r5, r6, r7}
    c644:	4770      	bxle	lr
    c646:	1e49      	subs	r1, r1, #1
    c648:	1e5b      	subs	r3, r3, #1
    c64a:	f012 0f01 	tst.w	r2, #1
    c64e:	d003      	beq.n	c658 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c650:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c654:	f803 cf01 	strb.w	ip, [r3, #1]!
    c658:	1052      	asrs	r2, r2, #1
    c65a:	bf04      	itt	eq
    c65c:	bcf0      	popeq	{r4, r5, r6, r7}
    c65e:	4770      	bxeq	lr
    c660:	f891 c001 	ldrb.w	ip, [r1, #1]
    c664:	f883 c001 	strb.w	ip, [r3, #1]
    c668:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c66c:	f803 cf02 	strb.w	ip, [r3, #2]!
    c670:	1e52      	subs	r2, r2, #1
    c672:	d1f5      	bne.n	c660 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c674:	bcf0      	pop	{r4, r5, r6, r7}
    c676:	4770      	bx	lr
    c678:	2a04      	cmp	r2, #4
    c67a:	d3d9      	bcc.n	c630 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c67c:	f851 cb04 	ldr.w	ip, [r1], #4
    c680:	1f12      	subs	r2, r2, #4
    c682:	f843 cb04 	str.w	ip, [r3], #4
    c686:	2a04      	cmp	r2, #4
    c688:	d2f8      	bcs.n	c67c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c68a:	e7d1      	b.n	c630 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c68c:	f811 cb01 	ldrb.w	ip, [r1], #1
    c690:	f803 cb01 	strb.w	ip, [r3], #1
    c694:	1e52      	subs	r2, r2, #1
    c696:	d1f9      	bne.n	c68c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c698:	bcf0      	pop	{r4, r5, r6, r7}
    c69a:	4770      	bx	lr

0000c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c69c:	b470      	push	{r4, r5, r6}
    c69e:	4603      	mov	r3, r0
    c6a0:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c6a4:	f010 0f03 	tst.w	r0, #3
    c6a8:	d009      	beq.n	c6be <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c6aa:	2a00      	cmp	r2, #0
    c6ac:	bf04      	itt	eq
    c6ae:	bc70      	popeq	{r4, r5, r6}
    c6b0:	4770      	bxeq	lr
    c6b2:	f803 cb01 	strb.w	ip, [r3], #1
    c6b6:	1e52      	subs	r2, r2, #1
    c6b8:	f013 0f03 	tst.w	r3, #3
    c6bc:	d1f5      	bne.n	c6aa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c6be:	b2c9      	uxtb	r1, r1
    c6c0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c6c4:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c6c8:	2a03      	cmp	r2, #3
    c6ca:	d939      	bls.n	c740 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c6cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c6d0:	d236      	bcs.n	c740 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c6d2:	4251      	negs	r1, r2
    c6d4:	17cc      	asrs	r4, r1, #31
    c6d6:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c6da:	1089      	asrs	r1, r1, #2
    c6dc:	424e      	negs	r6, r1
    c6de:	2e00      	cmp	r6, #0
    c6e0:	dd11      	ble.n	c706 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c6e2:	1f19      	subs	r1, r3, #4
    c6e4:	f016 0f01 	tst.w	r6, #1
    c6e8:	bf18      	it	ne
    c6ea:	f841 5f04 	strne.w	r5, [r1, #4]!
    c6ee:	1074      	asrs	r4, r6, #1
    c6f0:	d004      	beq.n	c6fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c6f2:	604d      	str	r5, [r1, #4]
    c6f4:	f841 5f08 	str.w	r5, [r1, #8]!
    c6f8:	1e64      	subs	r4, r4, #1
    c6fa:	d1fa      	bne.n	c6f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c6fc:	4271      	negs	r1, r6
    c6fe:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c702:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c706:	2a00      	cmp	r2, #0
    c708:	bf04      	itt	eq
    c70a:	bc70      	popeq	{r4, r5, r6}
    c70c:	4770      	bxeq	lr
    c70e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c712:	d21d      	bcs.n	c750 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c714:	2a00      	cmp	r2, #0
    c716:	bfdc      	itt	le
    c718:	bc70      	pople	{r4, r5, r6}
    c71a:	4770      	bxle	lr
    c71c:	1e59      	subs	r1, r3, #1
    c71e:	f012 0f01 	tst.w	r2, #1
    c722:	bf18      	it	ne
    c724:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c728:	1052      	asrs	r2, r2, #1
    c72a:	bf04      	itt	eq
    c72c:	bc70      	popeq	{r4, r5, r6}
    c72e:	4770      	bxeq	lr
    c730:	f881 c001 	strb.w	ip, [r1, #1]
    c734:	f801 cf02 	strb.w	ip, [r1, #2]!
    c738:	1e52      	subs	r2, r2, #1
    c73a:	d1f9      	bne.n	c730 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c73c:	bc70      	pop	{r4, r5, r6}
    c73e:	4770      	bx	lr
    c740:	2a04      	cmp	r2, #4
    c742:	d3e0      	bcc.n	c706 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c744:	1f12      	subs	r2, r2, #4
    c746:	f843 5b04 	str.w	r5, [r3], #4
    c74a:	2a04      	cmp	r2, #4
    c74c:	d2fa      	bcs.n	c744 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c74e:	e7da      	b.n	c706 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c750:	f803 cb01 	strb.w	ip, [r3], #1
    c754:	1e52      	subs	r2, r2, #1
    c756:	d1fb      	bne.n	c750 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c758:	bc70      	pop	{r4, r5, r6}
    c75a:	4770      	bx	lr
    c75c:	f04f 30ff 	mov.w	r0, #4294967295
    c760:	4770      	bx	lr
    c762:	2000      	movs	r0, #0
    c764:	4770      	bx	lr
    c766:	2000      	movs	r0, #0
    c768:	4770      	bx	lr
    c76a:	f04f 30ff 	mov.w	r0, #4294967295
    c76e:	4770      	bx	lr
    c770:	4770      	bx	lr
    c772:	4770      	bx	lr
    c774:	2000      	movs	r0, #0
    c776:	4770      	bx	lr
    c778:	f04f 30ff 	mov.w	r0, #4294967295
    c77c:	4770      	bx	lr
    c77e:	f04f 30ff 	mov.w	r0, #4294967295
    c782:	4770      	bx	lr
    c784:	2100      	movs	r1, #0
    c786:	7001      	strb	r1, [r0, #0]
    c788:	4770      	bx	lr
    c78a:	f04f 30ff 	mov.w	r0, #4294967295
    c78e:	4770      	bx	lr
    c790:	f04f 30ff 	mov.w	r0, #4294967295
    c794:	4770      	bx	lr
    c796:	2000      	movs	r0, #0
    c798:	4770      	bx	lr
    c79a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c79e:	4606      	mov	r6, r0
    c7a0:	460c      	mov	r4, r1
    c7a2:	7808      	ldrb	r0, [r1, #0]
    c7a4:	7849      	ldrb	r1, [r1, #1]
    c7a6:	2700      	movs	r7, #0
    c7a8:	4408      	add	r0, r1
    c7aa:	4691      	mov	r9, r2
    c7ac:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c7b0:	463d      	mov	r5, r7
    c7b2:	e00e      	b.n	c7d2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    c7b4:	7a23      	ldrb	r3, [r4, #8]
    c7b6:	2b02      	cmp	r3, #2
    c7b8:	d200      	bcs.n	c7bc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x120>
    c7ba:	2302      	movs	r3, #2
    c7bc:	79e2      	ldrb	r2, [r4, #7]
    c7be:	2a03      	cmp	r2, #3
    c7c0:	d200      	bcs.n	c7c4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x128>
    c7c2:	2203      	movs	r2, #3
    c7c4:	79a1      	ldrb	r1, [r4, #6]
    c7c6:	7960      	ldrb	r0, [r4, #5]
    c7c8:	f000 ffaf 	bl	d72a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c7cc:	1c6d      	adds	r5, r5, #1
    c7ce:	4407      	add	r7, r0
    c7d0:	b2ed      	uxtb	r5, r5
    c7d2:	4545      	cmp	r5, r8
    c7d4:	d3ee      	bcc.n	c7b4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    c7d6:	6830      	ldr	r0, [r6, #0]
    c7d8:	1cc0      	adds	r0, r0, #3
    c7da:	f020 0003 	bic.w	r0, r0, #3
    c7de:	6030      	str	r0, [r6, #0]
    c7e0:	f1b9 0f00 	cmp.w	r9, #0
    c7e4:	d000      	beq.n	c7e8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14c>
    c7e6:	2000      	movs	r0, #0
    c7e8:	463a      	mov	r2, r7
    c7ea:	4641      	mov	r1, r8
    c7ec:	f7f7 fe8a 	bl	4504 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c7f0:	6831      	ldr	r1, [r6, #0]
    c7f2:	4408      	add	r0, r1
    c7f4:	6030      	str	r0, [r6, #0]
    c7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c7fa <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c7fa:	2000      	movs	r0, #0
    c7fc:	4770      	bx	lr

0000c7fe <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c7fe:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c800:	4604      	mov	r4, r0
    c802:	1d01      	adds	r1, r0, #4
    c804:	4668      	mov	r0, sp
    c806:	f7f9 fc45 	bl	6094 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c80a:	2800      	cmp	r0, #0
    c80c:	d004      	beq.n	c818 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c80e:	4669      	mov	r1, sp
    c810:	4620      	mov	r0, r4
    c812:	f000 f848 	bl	c8a6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c816:	2001      	movs	r0, #1
    c818:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c81a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c81a:	b50e      	push	{r1, r2, r3, lr}
    c81c:	4601      	mov	r1, r0
    c81e:	4668      	mov	r0, sp
    c820:	f000 f827 	bl	c872 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c824:	4668      	mov	r0, sp
    c826:	f7f9 fc5f 	bl	60e8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c82a:	bd0e      	pop	{r1, r2, r3, pc}

0000c82c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c82c:	b510      	push	{r4, lr}
    c82e:	4604      	mov	r4, r0
    c830:	4620      	mov	r0, r4
    c832:	f7f7 fba7 	bl	3f84 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c836:	2800      	cmp	r0, #0
    c838:	d006      	beq.n	c848 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c83a:	78a1      	ldrb	r1, [r4, #2]
    c83c:	7820      	ldrb	r0, [r4, #0]
    c83e:	f000 f804 	bl	c84a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    c842:	2800      	cmp	r0, #0
    c844:	d0f4      	beq.n	c830 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    c846:	2001      	movs	r0, #1
    c848:	bd10      	pop	{r4, pc}
    c84a:	b570      	push	{r4, r5, r6, lr}
    c84c:	460c      	mov	r4, r1
    c84e:	4605      	mov	r5, r0
    c850:	f7f7 fbf4 	bl	403c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c854:	2800      	cmp	r0, #0
    c856:	d002      	beq.n	c85e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    c858:	2d3e      	cmp	r5, #62	; 0x3e
    c85a:	d001      	beq.n	c860 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    c85c:	2001      	movs	r0, #1
    c85e:	bd70      	pop	{r4, r5, r6, pc}
    c860:	2c12      	cmp	r4, #18
    c862:	d004      	beq.n	c86e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    c864:	4620      	mov	r0, r4
    c866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c86a:	f7f7 bc03 	b.w	4074 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c86e:	2000      	movs	r0, #0
    c870:	bd70      	pop	{r4, r5, r6, pc}

0000c872 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c872:	880a      	ldrh	r2, [r1, #0]
    c874:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c878:	8002      	strh	r2, [r0, #0]
    c87a:	884a      	ldrh	r2, [r1, #2]
    c87c:	8042      	strh	r2, [r0, #2]
    c87e:	784a      	ldrb	r2, [r1, #1]
    c880:	0993      	lsrs	r3, r2, #6
    c882:	2200      	movs	r2, #0
    c884:	7142      	strb	r2, [r0, #5]
    c886:	784b      	ldrb	r3, [r1, #1]
    c888:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c88c:	b11b      	cbz	r3, c896 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c88e:	2b01      	cmp	r3, #1
    c890:	d005      	beq.n	c89e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c892:	2b02      	cmp	r3, #2
    c894:	d005      	beq.n	c8a2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c896:	7102      	strb	r2, [r0, #4]
    c898:	1d09      	adds	r1, r1, #4
    c89a:	6081      	str	r1, [r0, #8]
    c89c:	4770      	bx	lr
    c89e:	2201      	movs	r2, #1
    c8a0:	e7f9      	b.n	c896 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c8a2:	2202      	movs	r2, #2
    c8a4:	e7f7      	b.n	c896 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c8a6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c8a6:	b510      	push	{r4, lr}
    c8a8:	460c      	mov	r4, r1
    c8aa:	7809      	ldrb	r1, [r1, #0]
    c8ac:	7001      	strb	r1, [r0, #0]
    c8ae:	7841      	ldrb	r1, [r0, #1]
    c8b0:	f021 010f 	bic.w	r1, r1, #15
    c8b4:	7041      	strb	r1, [r0, #1]
    c8b6:	8822      	ldrh	r2, [r4, #0]
    c8b8:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c8bc:	4311      	orrs	r1, r2
    c8be:	7041      	strb	r1, [r0, #1]
    c8c0:	78a2      	ldrb	r2, [r4, #2]
    c8c2:	7082      	strb	r2, [r0, #2]
    c8c4:	8862      	ldrh	r2, [r4, #2]
    c8c6:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    c8ca:	0a12      	lsrs	r2, r2, #8
    c8cc:	70c2      	strb	r2, [r0, #3]
    c8ce:	7041      	strb	r1, [r0, #1]
    c8d0:	7922      	ldrb	r2, [r4, #4]
    c8d2:	f002 0203 	and.w	r2, r2, #3
    c8d6:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c8da:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    c8de:	7041      	strb	r1, [r0, #1]
    c8e0:	7962      	ldrb	r2, [r4, #5]
    c8e2:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c8e6:	7041      	strb	r1, [r0, #1]
    c8e8:	68a1      	ldr	r1, [r4, #8]
    c8ea:	1d02      	adds	r2, r0, #4
    c8ec:	4291      	cmp	r1, r2
    c8ee:	d006      	beq.n	c8fe <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    c8f0:	8862      	ldrh	r2, [r4, #2]
    c8f2:	2afb      	cmp	r2, #251	; 0xfb
    c8f4:	d300      	bcc.n	c8f8 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    c8f6:	22fb      	movs	r2, #251	; 0xfb
    c8f8:	1d00      	adds	r0, r0, #4
    c8fa:	f7ff fe55 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c8fe:	78a0      	ldrb	r0, [r4, #2]
    c900:	1d00      	adds	r0, r0, #4
    c902:	b2c0      	uxtb	r0, r0
    c904:	bd10      	pop	{r4, pc}

0000c906 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c906:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c90a:	4604      	mov	r4, r0
    c90c:	f891 c000 	ldrb.w	ip, [r1]
    c910:	2000      	movs	r0, #0
    c912:	270c      	movs	r7, #12
    c914:	223e      	movs	r2, #62	; 0x3e
    c916:	2612      	movs	r6, #18
    c918:	25ff      	movs	r5, #255	; 0xff
    c91a:	f04f 0b14 	mov.w	fp, #20
    c91e:	f04f 0e13 	mov.w	lr, #19
    c922:	f04f 0a05 	mov.w	sl, #5
    c926:	f104 030d 	add.w	r3, r4, #13
    c92a:	f04f 0911 	mov.w	r9, #17
    c92e:	f1bc 0f20 	cmp.w	ip, #32
    c932:	d272      	bcs.n	ca1a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c934:	e8df f00c 	tbb	[pc, ip]
    c938:	29271071 	.word	0x29271071
    c93c:	a46dfc2e 	.word	0xa46dfc2e
    c940:	fbdac0ae 	.word	0xfbdac0ae
    c944:	f7f8f9fa 	.word	0xf7f8f9fa
    c948:	507171f6 	.word	0x507171f6
    c94c:	f3f4f572 	.word	0xf3f4f572
    c950:	eff0f1f2 	.word	0xeff0f1f2
    c954:	ec71edee 	.word	0xec71edee
    c958:	7027      	strb	r7, [r4, #0]
    c95a:	7908      	ldrb	r0, [r1, #4]
    c95c:	70a0      	strb	r0, [r4, #2]
    c95e:	7948      	ldrb	r0, [r1, #5]
    c960:	70e0      	strb	r0, [r4, #3]
    c962:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c966:	0a00      	lsrs	r0, r0, #8
    c968:	7120      	strb	r0, [r4, #4]
    c96a:	79c8      	ldrb	r0, [r1, #7]
    c96c:	7160      	strb	r0, [r4, #5]
    c96e:	7a08      	ldrb	r0, [r1, #8]
    c970:	71a0      	strb	r0, [r4, #6]
    c972:	8908      	ldrh	r0, [r1, #8]
    c974:	0a00      	lsrs	r0, r0, #8
    c976:	71e0      	strb	r0, [r4, #7]
    c978:	7a88      	ldrb	r0, [r1, #10]
    c97a:	7220      	strb	r0, [r4, #8]
    c97c:	8948      	ldrh	r0, [r1, #10]
    c97e:	0a00      	lsrs	r0, r0, #8
    c980:	7260      	strb	r0, [r4, #9]
    c982:	2008      	movs	r0, #8
    c984:	e154      	b.n	cc30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    c986:	2010      	movs	r0, #16
    c988:	e000      	b.n	c98c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    c98a:	201a      	movs	r0, #26
    c98c:	7020      	strb	r0, [r4, #0]
    c98e:	7908      	ldrb	r0, [r1, #4]
    c990:	70a0      	strb	r0, [r4, #2]
    c992:	e154      	b.n	cc3e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    c994:	7022      	strb	r2, [r4, #0]
    c996:	2002      	movs	r0, #2
    c998:	70a0      	strb	r0, [r4, #2]
    c99a:	7908      	ldrb	r0, [r1, #4]
    c99c:	70e0      	strb	r0, [r4, #3]
    c99e:	7b88      	ldrb	r0, [r1, #14]
    c9a0:	7120      	strb	r0, [r4, #4]
    c9a2:	7948      	ldrb	r0, [r1, #5]
    c9a4:	7160      	strb	r0, [r4, #5]
    c9a6:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c9aa:	f8c4 0006 	str.w	r0, [r4, #6]
    c9ae:	8948      	ldrh	r0, [r1, #10]
    c9b0:	8160      	strh	r0, [r4, #10]
    c9b2:	7b08      	ldrb	r0, [r1, #12]
    c9b4:	7320      	strb	r0, [r4, #12]
    c9b6:	7b0e      	ldrb	r6, [r1, #12]
    c9b8:	1d0d      	adds	r5, r1, #4
    c9ba:	2e1f      	cmp	r6, #31
    c9bc:	d300      	bcc.n	c9c0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    c9be:	261f      	movs	r6, #31
    c9c0:	4618      	mov	r0, r3
    c9c2:	4632      	mov	r2, r6
    c9c4:	f105 010b 	add.w	r1, r5, #11
    c9c8:	f7ff fdee 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c9cc:	360d      	adds	r6, #13
    c9ce:	7a69      	ldrb	r1, [r5, #9]
    c9d0:	55a1      	strb	r1, [r4, r6]
    c9d2:	1e76      	subs	r6, r6, #1
    c9d4:	b2f0      	uxtb	r0, r6
    c9d6:	e129      	b.n	cc2c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    c9d8:	7022      	strb	r2, [r4, #0]
    c9da:	200b      	movs	r0, #11
    c9dc:	70a0      	strb	r0, [r4, #2]
    c9de:	7908      	ldrb	r0, [r1, #4]
    c9e0:	70e0      	strb	r0, [r4, #3]
    c9e2:	7948      	ldrb	r0, [r1, #5]
    c9e4:	7120      	strb	r0, [r4, #4]
    c9e6:	7988      	ldrb	r0, [r1, #6]
    c9e8:	7160      	strb	r0, [r4, #5]
    c9ea:	f8d1 0007 	ldr.w	r0, [r1, #7]
    c9ee:	f8c4 0006 	str.w	r0, [r4, #6]
    c9f2:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    c9f6:	8160      	strh	r0, [r4, #10]
    c9f8:	7b48      	ldrb	r0, [r1, #13]
    c9fa:	7320      	strb	r0, [r4, #12]
    c9fc:	f8d1 000e 	ldr.w	r0, [r1, #14]
    ca00:	f8c4 000d 	str.w	r0, [r4, #13]
    ca04:	8a48      	ldrh	r0, [r1, #18]
    ca06:	f8a4 0011 	strh.w	r0, [r4, #17]
    ca0a:	7d08      	ldrb	r0, [r1, #20]
    ca0c:	74e0      	strb	r0, [r4, #19]
    ca0e:	4630      	mov	r0, r6
    ca10:	e10e      	b.n	cc30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ca12:	4620      	mov	r0, r4
    ca14:	f000 f98d 	bl	cd32 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    ca18:	e108      	b.n	cc2c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    ca1a:	e10b      	b.n	cc34 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    ca1c:	7022      	strb	r2, [r4, #0]
    ca1e:	200a      	movs	r0, #10
    ca20:	70a0      	strb	r0, [r4, #2]
    ca22:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    ca26:	70e0      	strb	r0, [r4, #3]
    ca28:	7888      	ldrb	r0, [r1, #2]
    ca2a:	7120      	strb	r0, [r4, #4]
    ca2c:	8848      	ldrh	r0, [r1, #2]
    ca2e:	0a00      	lsrs	r0, r0, #8
    ca30:	7160      	strb	r0, [r4, #5]
    ca32:	7908      	ldrb	r0, [r1, #4]
    ca34:	71a0      	strb	r0, [r4, #6]
    ca36:	7948      	ldrb	r0, [r1, #5]
    ca38:	71e0      	strb	r0, [r4, #7]
    ca3a:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ca3e:	60a0      	str	r0, [r4, #8]
    ca40:	8948      	ldrh	r0, [r1, #10]
    ca42:	81a0      	strh	r0, [r4, #12]
    ca44:	68c8      	ldr	r0, [r1, #12]
    ca46:	f8c4 000e 	str.w	r0, [r4, #14]
    ca4a:	8a08      	ldrh	r0, [r1, #16]
    ca4c:	8260      	strh	r0, [r4, #18]
    ca4e:	f8d1 0012 	ldr.w	r0, [r1, #18]
    ca52:	6160      	str	r0, [r4, #20]
    ca54:	8ac8      	ldrh	r0, [r1, #22]
    ca56:	8320      	strh	r0, [r4, #24]
    ca58:	7e08      	ldrb	r0, [r1, #24]
    ca5a:	76a0      	strb	r0, [r4, #26]
    ca5c:	8b08      	ldrh	r0, [r1, #24]
    ca5e:	0a00      	lsrs	r0, r0, #8
    ca60:	76e0      	strb	r0, [r4, #27]
    ca62:	7e88      	ldrb	r0, [r1, #26]
    ca64:	7720      	strb	r0, [r4, #28]
    ca66:	8b48      	ldrh	r0, [r1, #26]
    ca68:	0a00      	lsrs	r0, r0, #8
    ca6a:	7760      	strb	r0, [r4, #29]
    ca6c:	7f08      	ldrb	r0, [r1, #28]
    ca6e:	77a0      	strb	r0, [r4, #30]
    ca70:	8b88      	ldrh	r0, [r1, #28]
    ca72:	0a00      	lsrs	r0, r0, #8
    ca74:	77e0      	strb	r0, [r4, #31]
    ca76:	7f88      	ldrb	r0, [r1, #30]
    ca78:	f884 0020 	strb.w	r0, [r4, #32]
    ca7c:	201f      	movs	r0, #31
    ca7e:	e0d7      	b.n	cc30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ca80:	7022      	strb	r2, [r4, #0]
    ca82:	f884 b002 	strb.w	fp, [r4, #2]
    ca86:	7908      	ldrb	r0, [r1, #4]
    ca88:	70e0      	strb	r0, [r4, #3]
    ca8a:	8888      	ldrh	r0, [r1, #4]
    ca8c:	0a00      	lsrs	r0, r0, #8
    ca8e:	7120      	strb	r0, [r4, #4]
    ca90:	7988      	ldrb	r0, [r1, #6]
    ca92:	e0ed      	b.n	cc70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    ca94:	7022      	strb	r2, [r4, #0]
    ca96:	2004      	movs	r0, #4
    ca98:	70a0      	strb	r0, [r4, #2]
    ca9a:	7908      	ldrb	r0, [r1, #4]
    ca9c:	70e0      	strb	r0, [r4, #3]
    ca9e:	7988      	ldrb	r0, [r1, #6]
    caa0:	7120      	strb	r0, [r4, #4]
    caa2:	88c8      	ldrh	r0, [r1, #6]
    caa4:	0a00      	lsrs	r0, r0, #8
    caa6:	7160      	strb	r0, [r4, #5]
    caa8:	6888      	ldr	r0, [r1, #8]
    caaa:	f8c4 0006 	str.w	r0, [r4, #6]
    caae:	68c8      	ldr	r0, [r1, #12]
    cab0:	f8c4 000a 	str.w	r0, [r4, #10]
    cab4:	200c      	movs	r0, #12
    cab6:	e0bb      	b.n	cc30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cab8:	7022      	strb	r2, [r4, #0]
    caba:	2003      	movs	r0, #3
    cabc:	70a0      	strb	r0, [r4, #2]
    cabe:	7908      	ldrb	r0, [r1, #4]
    cac0:	70e0      	strb	r0, [r4, #3]
    cac2:	7988      	ldrb	r0, [r1, #6]
    cac4:	7120      	strb	r0, [r4, #4]
    cac6:	88c8      	ldrh	r0, [r1, #6]
    cac8:	0a00      	lsrs	r0, r0, #8
    caca:	7160      	strb	r0, [r4, #5]
    cacc:	7a08      	ldrb	r0, [r1, #8]
    cace:	71a0      	strb	r0, [r4, #6]
    cad0:	8908      	ldrh	r0, [r1, #8]
    cad2:	0a00      	lsrs	r0, r0, #8
    cad4:	71e0      	strb	r0, [r4, #7]
    cad6:	7a88      	ldrb	r0, [r1, #10]
    cad8:	7220      	strb	r0, [r4, #8]
    cada:	8948      	ldrh	r0, [r1, #10]
    cadc:	0a00      	lsrs	r0, r0, #8
    cade:	7260      	strb	r0, [r4, #9]
    cae0:	7b08      	ldrb	r0, [r1, #12]
    cae2:	72a0      	strb	r0, [r4, #10]
    cae4:	8988      	ldrh	r0, [r1, #12]
    cae6:	0a00      	lsrs	r0, r0, #8
    cae8:	72e0      	strb	r0, [r4, #11]
    caea:	e120      	b.n	cd2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    caec:	7022      	strb	r2, [r4, #0]
    caee:	f884 a002 	strb.w	sl, [r4, #2]
    caf2:	7908      	ldrb	r0, [r1, #4]
    caf4:	70e0      	strb	r0, [r4, #3]
    caf6:	8888      	ldrh	r0, [r1, #4]
    caf8:	0a00      	lsrs	r0, r0, #8
    cafa:	7120      	strb	r0, [r4, #4]
    cafc:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cb00:	f8c4 0005 	str.w	r0, [r4, #5]
    cb04:	f8d1 000a 	ldr.w	r0, [r1, #10]
    cb08:	f8c4 0009 	str.w	r0, [r4, #9]
    cb0c:	89c8      	ldrh	r0, [r1, #14]
    cb0e:	e010      	b.n	cb32 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    cb10:	e0fa      	b.n	cd08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    cb12:	e0ce      	b.n	ccb2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    cb14:	e0af      	b.n	cc76 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    cb16:	e0da      	b.n	ccce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    cb18:	e0e8      	b.n	ccec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    cb1a:	e0a1      	b.n	cc60 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    cb1c:	e08c      	b.n	cc38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    cb1e:	e090      	b.n	cc42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    cb20:	e033      	b.n	cb8a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    cb22:	e02f      	b.n	cb84 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    cb24:	e043      	b.n	cbae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    cb26:	e03d      	b.n	cba4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    cb28:	e021      	b.n	cb6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    cb2a:	e015      	b.n	cb58 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    cb2c:	e008      	b.n	cb40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    cb2e:	e004      	b.n	cb3a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    cb30:	e046      	b.n	cbc0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    cb32:	f8a4 000d 	strh.w	r0, [r4, #13]
    cb36:	200d      	movs	r0, #13
    cb38:	e07a      	b.n	cc30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cb3a:	f884 9000 	strb.w	r9, [r4]
    cb3e:	e038      	b.n	cbb2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    cb40:	f884 a000 	strb.w	sl, [r4]
    cb44:	7908      	ldrb	r0, [r1, #4]
    cb46:	70a0      	strb	r0, [r4, #2]
    cb48:	7948      	ldrb	r0, [r1, #5]
    cb4a:	70e0      	strb	r0, [r4, #3]
    cb4c:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cb50:	0a00      	lsrs	r0, r0, #8
    cb52:	7120      	strb	r0, [r4, #4]
    cb54:	79c8      	ldrb	r0, [r1, #7]
    cb56:	e08b      	b.n	cc70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cb58:	2008      	movs	r0, #8
    cb5a:	7020      	strb	r0, [r4, #0]
    cb5c:	7908      	ldrb	r0, [r1, #4]
    cb5e:	70a0      	strb	r0, [r4, #2]
    cb60:	7988      	ldrb	r0, [r1, #6]
    cb62:	70e0      	strb	r0, [r4, #3]
    cb64:	88c8      	ldrh	r0, [r1, #6]
    cb66:	0a00      	lsrs	r0, r0, #8
    cb68:	7120      	strb	r0, [r4, #4]
    cb6a:	7a08      	ldrb	r0, [r1, #8]
    cb6c:	e080      	b.n	cc70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cb6e:	2030      	movs	r0, #48	; 0x30
    cb70:	7020      	strb	r0, [r4, #0]
    cb72:	7908      	ldrb	r0, [r1, #4]
    cb74:	70a0      	strb	r0, [r4, #2]
    cb76:	7988      	ldrb	r0, [r1, #6]
    cb78:	70e0      	strb	r0, [r4, #3]
    cb7a:	88c8      	ldrh	r0, [r1, #6]
    cb7c:	0a00      	lsrs	r0, r0, #8
    cb7e:	7120      	strb	r0, [r4, #4]
    cb80:	2003      	movs	r0, #3
    cb82:	e055      	b.n	cc30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cb84:	7022      	strb	r2, [r4, #0]
    cb86:	2007      	movs	r0, #7
    cb88:	e077      	b.n	cc7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    cb8a:	7022      	strb	r2, [r4, #0]
    cb8c:	70a7      	strb	r7, [r4, #2]
    cb8e:	7908      	ldrb	r0, [r1, #4]
    cb90:	70e0      	strb	r0, [r4, #3]
    cb92:	7988      	ldrb	r0, [r1, #6]
    cb94:	7120      	strb	r0, [r4, #4]
    cb96:	88c8      	ldrh	r0, [r1, #6]
    cb98:	0a00      	lsrs	r0, r0, #8
    cb9a:	7160      	strb	r0, [r4, #5]
    cb9c:	7a08      	ldrb	r0, [r1, #8]
    cb9e:	71a0      	strb	r0, [r4, #6]
    cba0:	7a48      	ldrb	r0, [r1, #9]
    cba2:	e05a      	b.n	cc5a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    cba4:	4620      	mov	r0, r4
    cba6:	1d09      	adds	r1, r1, #4
    cba8:	f7f7 fa1a 	bl	3fe0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    cbac:	e03e      	b.n	cc2c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    cbae:	2057      	movs	r0, #87	; 0x57
    cbb0:	7020      	strb	r0, [r4, #0]
    cbb2:	7908      	ldrb	r0, [r1, #4]
    cbb4:	70a0      	strb	r0, [r4, #2]
    cbb6:	8888      	ldrh	r0, [r1, #4]
    cbb8:	0a00      	lsrs	r0, r0, #8
    cbba:	70e0      	strb	r0, [r4, #3]
    cbbc:	2002      	movs	r0, #2
    cbbe:	e037      	b.n	cc30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cbc0:	7022      	strb	r2, [r4, #0]
    cbc2:	220d      	movs	r2, #13
    cbc4:	70a2      	strb	r2, [r4, #2]
    cbc6:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cbca:	70e2      	strb	r2, [r4, #3]
    cbcc:	894a      	ldrh	r2, [r1, #10]
    cbce:	80a2      	strh	r2, [r4, #4]
    cbd0:	784a      	ldrb	r2, [r1, #1]
    cbd2:	71a2      	strb	r2, [r4, #6]
    cbd4:	f8d1 2002 	ldr.w	r2, [r1, #2]
    cbd8:	f8c4 2007 	str.w	r2, [r4, #7]
    cbdc:	88ca      	ldrh	r2, [r1, #6]
    cbde:	f8a4 200b 	strh.w	r2, [r4, #11]
    cbe2:	7b0a      	ldrb	r2, [r1, #12]
    cbe4:	4620      	mov	r0, r4
    cbe6:	7362      	strb	r2, [r4, #13]
    cbe8:	7b4a      	ldrb	r2, [r1, #13]
    cbea:	7382      	strb	r2, [r0, #14]
    cbec:	7b8a      	ldrb	r2, [r1, #14]
    cbee:	73c2      	strb	r2, [r0, #15]
    cbf0:	7e8a      	ldrb	r2, [r1, #26]
    cbf2:	7402      	strb	r2, [r0, #16]
    cbf4:	7a4a      	ldrb	r2, [r1, #9]
    cbf6:	7442      	strb	r2, [r0, #17]
    cbf8:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    cbfc:	f8ad 2000 	strh.w	r2, [sp]
    cc00:	8242      	strh	r2, [r0, #18]
    cc02:	7cca      	ldrb	r2, [r1, #19]
    cc04:	7502      	strb	r2, [r0, #20]
    cc06:	694a      	ldr	r2, [r1, #20]
    cc08:	f8c0 2015 	str.w	r2, [r0, #21]
    cc0c:	8b0a      	ldrh	r2, [r1, #24]
    cc0e:	f8a0 2019 	strh.w	r2, [r0, #25]
    cc12:	7a0a      	ldrb	r2, [r1, #8]
    cc14:	76c2      	strb	r2, [r0, #27]
    cc16:	7a0d      	ldrb	r5, [r1, #8]
    cc18:	2de5      	cmp	r5, #229	; 0xe5
    cc1a:	d300      	bcc.n	cc1e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x318>
    cc1c:	25e5      	movs	r5, #229	; 0xe5
    cc1e:	462a      	mov	r2, r5
    cc20:	301c      	adds	r0, #28
    cc22:	311c      	adds	r1, #28
    cc24:	f7ff fcc0 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc28:	351a      	adds	r5, #26
    cc2a:	b2e8      	uxtb	r0, r5
    cc2c:	2800      	cmp	r0, #0
    cc2e:	d001      	beq.n	cc34 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    cc30:	7060      	strb	r0, [r4, #1]
    cc32:	1c80      	adds	r0, r0, #2
    cc34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc38:	7022      	strb	r2, [r4, #0]
    cc3a:	f884 9002 	strb.w	r9, [r4, #2]
    cc3e:	2001      	movs	r0, #1
    cc40:	e7f6      	b.n	cc30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc42:	7022      	strb	r2, [r4, #0]
    cc44:	70a6      	strb	r6, [r4, #2]
    cc46:	7908      	ldrb	r0, [r1, #4]
    cc48:	70e0      	strb	r0, [r4, #3]
    cc4a:	7948      	ldrb	r0, [r1, #5]
    cc4c:	7120      	strb	r0, [r4, #4]
    cc4e:	7988      	ldrb	r0, [r1, #6]
    cc50:	7160      	strb	r0, [r4, #5]
    cc52:	88c8      	ldrh	r0, [r1, #6]
    cc54:	0a00      	lsrs	r0, r0, #8
    cc56:	71a0      	strb	r0, [r4, #6]
    cc58:	7a08      	ldrb	r0, [r1, #8]
    cc5a:	71e0      	strb	r0, [r4, #7]
    cc5c:	2006      	movs	r0, #6
    cc5e:	e7e7      	b.n	cc30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc60:	7025      	strb	r5, [r4, #0]
    cc62:	20a1      	movs	r0, #161	; 0xa1
    cc64:	70a0      	strb	r0, [r4, #2]
    cc66:	7908      	ldrb	r0, [r1, #4]
    cc68:	70e0      	strb	r0, [r4, #3]
    cc6a:	7948      	ldrb	r0, [r1, #5]
    cc6c:	7120      	strb	r0, [r4, #4]
    cc6e:	2000      	movs	r0, #0
    cc70:	7160      	strb	r0, [r4, #5]
    cc72:	2004      	movs	r0, #4
    cc74:	e7dc      	b.n	cc30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc76:	7025      	strb	r5, [r4, #0]
    cc78:	20a2      	movs	r0, #162	; 0xa2
    cc7a:	70a0      	strb	r0, [r4, #2]
    cc7c:	7908      	ldrb	r0, [r1, #4]
    cc7e:	70e0      	strb	r0, [r4, #3]
    cc80:	8888      	ldrh	r0, [r1, #4]
    cc82:	0a00      	lsrs	r0, r0, #8
    cc84:	7120      	strb	r0, [r4, #4]
    cc86:	7988      	ldrb	r0, [r1, #6]
    cc88:	7160      	strb	r0, [r4, #5]
    cc8a:	88c8      	ldrh	r0, [r1, #6]
    cc8c:	0a00      	lsrs	r0, r0, #8
    cc8e:	71a0      	strb	r0, [r4, #6]
    cc90:	7a08      	ldrb	r0, [r1, #8]
    cc92:	71e0      	strb	r0, [r4, #7]
    cc94:	8908      	ldrh	r0, [r1, #8]
    cc96:	0a00      	lsrs	r0, r0, #8
    cc98:	7220      	strb	r0, [r4, #8]
    cc9a:	7a88      	ldrb	r0, [r1, #10]
    cc9c:	7260      	strb	r0, [r4, #9]
    cc9e:	8948      	ldrh	r0, [r1, #10]
    cca0:	0a00      	lsrs	r0, r0, #8
    cca2:	72a0      	strb	r0, [r4, #10]
    cca4:	7b08      	ldrb	r0, [r1, #12]
    cca6:	72e0      	strb	r0, [r4, #11]
    cca8:	8988      	ldrh	r0, [r1, #12]
    ccaa:	0a00      	lsrs	r0, r0, #8
    ccac:	7320      	strb	r0, [r4, #12]
    ccae:	200b      	movs	r0, #11
    ccb0:	e7be      	b.n	cc30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ccb2:	7025      	strb	r5, [r4, #0]
    ccb4:	20a3      	movs	r0, #163	; 0xa3
    ccb6:	70a0      	strb	r0, [r4, #2]
    ccb8:	7908      	ldrb	r0, [r1, #4]
    ccba:	70e0      	strb	r0, [r4, #3]
    ccbc:	8888      	ldrh	r0, [r1, #4]
    ccbe:	0a00      	lsrs	r0, r0, #8
    ccc0:	7120      	strb	r0, [r4, #4]
    ccc2:	7988      	ldrb	r0, [r1, #6]
    ccc4:	7160      	strb	r0, [r4, #5]
    ccc6:	79c8      	ldrb	r0, [r1, #7]
    ccc8:	71a0      	strb	r0, [r4, #6]
    ccca:	2005      	movs	r0, #5
    cccc:	e7b0      	b.n	cc30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ccce:	7022      	strb	r2, [r4, #0]
    ccd0:	f884 e002 	strb.w	lr, [r4, #2]
    ccd4:	7908      	ldrb	r0, [r1, #4]
    ccd6:	70e0      	strb	r0, [r4, #3]
    ccd8:	7948      	ldrb	r0, [r1, #5]
    ccda:	7120      	strb	r0, [r4, #4]
    ccdc:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cce0:	f8c4 0005 	str.w	r0, [r4, #5]
    cce4:	8948      	ldrh	r0, [r1, #10]
    cce6:	f8a4 0009 	strh.w	r0, [r4, #9]
    ccea:	e020      	b.n	cd2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    ccec:	7025      	strb	r5, [r4, #0]
    ccee:	20a4      	movs	r0, #164	; 0xa4
    ccf0:	70a0      	strb	r0, [r4, #2]
    ccf2:	7908      	ldrb	r0, [r1, #4]
    ccf4:	70e0      	strb	r0, [r4, #3]
    ccf6:	8888      	ldrh	r0, [r1, #4]
    ccf8:	0a00      	lsrs	r0, r0, #8
    ccfa:	7120      	strb	r0, [r4, #4]
    ccfc:	7988      	ldrb	r0, [r1, #6]
    ccfe:	7160      	strb	r0, [r4, #5]
    cd00:	79c8      	ldrb	r0, [r1, #7]
    cd02:	71a0      	strb	r0, [r4, #6]
    cd04:	2007      	movs	r0, #7
    cd06:	e793      	b.n	cc30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cd08:	7025      	strb	r5, [r4, #0]
    cd0a:	2080      	movs	r0, #128	; 0x80
    cd0c:	70a0      	strb	r0, [r4, #2]
    cd0e:	888a      	ldrh	r2, [r1, #4]
    cd10:	f8a4 2003 	strh.w	r2, [r4, #3]
    cd14:	88ca      	ldrh	r2, [r1, #6]
    cd16:	f8a4 2005 	strh.w	r2, [r4, #5]
    cd1a:	7a0a      	ldrb	r2, [r1, #8]
    cd1c:	71e2      	strb	r2, [r4, #7]
    cd1e:	7a4a      	ldrb	r2, [r1, #9]
    cd20:	8122      	strh	r2, [r4, #8]
    cd22:	7a8a      	ldrb	r2, [r1, #10]
    cd24:	72a2      	strb	r2, [r4, #10]
    cd26:	7ac9      	ldrb	r1, [r1, #11]
    cd28:	f001 0101 	and.w	r1, r1, #1
    cd2c:	72e1      	strb	r1, [r4, #11]
    cd2e:	200a      	movs	r0, #10
    cd30:	e77e      	b.n	cc30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>

0000cd32 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    cd32:	223e      	movs	r2, #62	; 0x3e
    cd34:	7002      	strb	r2, [r0, #0]
    cd36:	2201      	movs	r2, #1
    cd38:	7082      	strb	r2, [r0, #2]
    cd3a:	790a      	ldrb	r2, [r1, #4]
    cd3c:	70c2      	strb	r2, [r0, #3]
    cd3e:	798a      	ldrb	r2, [r1, #6]
    cd40:	7102      	strb	r2, [r0, #4]
    cd42:	88ca      	ldrh	r2, [r1, #6]
    cd44:	0a12      	lsrs	r2, r2, #8
    cd46:	7142      	strb	r2, [r0, #5]
    cd48:	7a0a      	ldrb	r2, [r1, #8]
    cd4a:	7182      	strb	r2, [r0, #6]
    cd4c:	7a4a      	ldrb	r2, [r1, #9]
    cd4e:	71c2      	strb	r2, [r0, #7]
    cd50:	f8d1 200a 	ldr.w	r2, [r1, #10]
    cd54:	6082      	str	r2, [r0, #8]
    cd56:	89ca      	ldrh	r2, [r1, #14]
    cd58:	8182      	strh	r2, [r0, #12]
    cd5a:	7c0a      	ldrb	r2, [r1, #16]
    cd5c:	7382      	strb	r2, [r0, #14]
    cd5e:	8a0a      	ldrh	r2, [r1, #16]
    cd60:	0a12      	lsrs	r2, r2, #8
    cd62:	73c2      	strb	r2, [r0, #15]
    cd64:	7c8a      	ldrb	r2, [r1, #18]
    cd66:	7402      	strb	r2, [r0, #16]
    cd68:	8a4a      	ldrh	r2, [r1, #18]
    cd6a:	0a12      	lsrs	r2, r2, #8
    cd6c:	7442      	strb	r2, [r0, #17]
    cd6e:	7d0a      	ldrb	r2, [r1, #20]
    cd70:	7482      	strb	r2, [r0, #18]
    cd72:	8a8a      	ldrh	r2, [r1, #20]
    cd74:	0a12      	lsrs	r2, r2, #8
    cd76:	74c2      	strb	r2, [r0, #19]
    cd78:	7d89      	ldrb	r1, [r1, #22]
    cd7a:	7501      	strb	r1, [r0, #20]
    cd7c:	2013      	movs	r0, #19
    cd7e:	4770      	bx	lr

0000cd80 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    cd80:	223e      	movs	r2, #62	; 0x3e
    cd82:	7002      	strb	r2, [r0, #0]
    cd84:	2201      	movs	r2, #1
    cd86:	7082      	strb	r2, [r0, #2]
    cd88:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cd8c:	70c2      	strb	r2, [r0, #3]
    cd8e:	788a      	ldrb	r2, [r1, #2]
    cd90:	7102      	strb	r2, [r0, #4]
    cd92:	884a      	ldrh	r2, [r1, #2]
    cd94:	0a12      	lsrs	r2, r2, #8
    cd96:	7142      	strb	r2, [r0, #5]
    cd98:	790a      	ldrb	r2, [r1, #4]
    cd9a:	7182      	strb	r2, [r0, #6]
    cd9c:	794a      	ldrb	r2, [r1, #5]
    cd9e:	71c2      	strb	r2, [r0, #7]
    cda0:	f8d1 2006 	ldr.w	r2, [r1, #6]
    cda4:	6082      	str	r2, [r0, #8]
    cda6:	894a      	ldrh	r2, [r1, #10]
    cda8:	8182      	strh	r2, [r0, #12]
    cdaa:	7e0a      	ldrb	r2, [r1, #24]
    cdac:	7382      	strb	r2, [r0, #14]
    cdae:	8b0a      	ldrh	r2, [r1, #24]
    cdb0:	0a12      	lsrs	r2, r2, #8
    cdb2:	73c2      	strb	r2, [r0, #15]
    cdb4:	7e8a      	ldrb	r2, [r1, #26]
    cdb6:	7402      	strb	r2, [r0, #16]
    cdb8:	8b4a      	ldrh	r2, [r1, #26]
    cdba:	0a12      	lsrs	r2, r2, #8
    cdbc:	7442      	strb	r2, [r0, #17]
    cdbe:	7f0a      	ldrb	r2, [r1, #28]
    cdc0:	7482      	strb	r2, [r0, #18]
    cdc2:	8b8a      	ldrh	r2, [r1, #28]
    cdc4:	0a12      	lsrs	r2, r2, #8
    cdc6:	74c2      	strb	r2, [r0, #19]
    cdc8:	7f89      	ldrb	r1, [r1, #30]
    cdca:	7501      	strb	r1, [r0, #20]
    cdcc:	2113      	movs	r1, #19
    cdce:	7041      	strb	r1, [r0, #1]
    cdd0:	4608      	mov	r0, r1
    cdd2:	4770      	bx	lr

0000cdd4 <sdc_hci_data_get>:
    cdd4:	b510      	push	{r4, lr}
    cdd6:	b120      	cbz	r0, cde2 <sdc_hci_data_get+0xe>
    cdd8:	f7ff fd11 	bl	c7fe <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    cddc:	b120      	cbz	r0, cde8 <sdc_hci_data_get+0x14>
    cdde:	2000      	movs	r0, #0
    cde0:	bd10      	pop	{r4, pc}
    cde2:	f06f 0015 	mvn.w	r0, #21
    cde6:	bd10      	pop	{r4, pc}
    cde8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cdec:	bd10      	pop	{r4, pc}

0000cdee <sdc_hci_data_put>:
    cdee:	b510      	push	{r4, lr}
    cdf0:	f06f 0415 	mvn.w	r4, #21
    cdf4:	b120      	cbz	r0, ce00 <sdc_hci_data_put+0x12>
    cdf6:	f7ff fd10 	bl	c81a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cdfa:	b108      	cbz	r0, ce00 <sdc_hci_data_put+0x12>
    cdfc:	2000      	movs	r0, #0
    cdfe:	bd10      	pop	{r4, pc}
    ce00:	4620      	mov	r0, r4
    ce02:	bd10      	pop	{r4, pc}

0000ce04 <sdc_hci_evt_get>:
    ce04:	b510      	push	{r4, lr}
    ce06:	b120      	cbz	r0, ce12 <sdc_hci_evt_get+0xe>
    ce08:	f7ff fd10 	bl	c82c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    ce0c:	b120      	cbz	r0, ce18 <sdc_hci_evt_get+0x14>
    ce0e:	2000      	movs	r0, #0
    ce10:	bd10      	pop	{r4, pc}
    ce12:	f06f 0015 	mvn.w	r0, #21
    ce16:	bd10      	pop	{r4, pc}
    ce18:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ce1c:	bd10      	pop	{r4, pc}

0000ce1e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    ce1e:	f002 b8cb 	b.w	efb8 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000ce22 <sdc_hci_cmd_cb_read_transmit_power_level>:
    ce22:	f002 b90a 	b.w	f03a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000ce26 <sdc_hci_cmd_cb_set_event_mask>:
    ce26:	b510      	push	{r4, lr}
    ce28:	f7f7 f938 	bl	409c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    ce2c:	2000      	movs	r0, #0
    ce2e:	bd10      	pop	{r4, pc}

0000ce30 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    ce30:	b510      	push	{r4, lr}
    ce32:	f7f7 f941 	bl	40b8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    ce36:	2000      	movs	r0, #0
    ce38:	bd10      	pop	{r4, pc}

0000ce3a <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    ce3a:	f002 b91a 	b.w	f072 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000ce3e <sdc_hci_cmd_vs_conn_event_extend>:
    ce3e:	b508      	push	{r3, lr}
    ce40:	7800      	ldrb	r0, [r0, #0]
    ce42:	f88d 0000 	strb.w	r0, [sp]
    ce46:	4668      	mov	r0, sp
    ce48:	f002 f888 	bl	ef5c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    ce4c:	bd08      	pop	{r3, pc}

0000ce4e <sdc_hci_cmd_vs_conn_update>:
    ce4e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ce50:	2100      	movs	r1, #0
    ce52:	9100      	str	r1, [sp, #0]
    ce54:	9101      	str	r1, [sp, #4]
    ce56:	9102      	str	r1, [sp, #8]
    ce58:	9103      	str	r1, [sp, #12]
    ce5a:	f8d0 1002 	ldr.w	r1, [r0, #2]
    ce5e:	f641 524c 	movw	r2, #7500	; 0x1d4c
    ce62:	4291      	cmp	r1, r2
    ce64:	d304      	bcc.n	ce70 <sdc_hci_cmd_vs_conn_update+0x22>
    ce66:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ce6a:	fbb1 f1f2 	udiv	r1, r1, r2
    ce6e:	e005      	b.n	ce7c <sdc_hci_cmd_vs_conn_update+0x2e>
    ce70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ce74:	fbb1 f1f2 	udiv	r1, r1, r2
    ce78:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    ce7c:	8802      	ldrh	r2, [r0, #0]
    ce7e:	b289      	uxth	r1, r1
    ce80:	f8ad 2000 	strh.w	r2, [sp]
    ce84:	f8ad 1002 	strh.w	r1, [sp, #2]
    ce88:	f8ad 1004 	strh.w	r1, [sp, #4]
    ce8c:	88c1      	ldrh	r1, [r0, #6]
    ce8e:	f8ad 1006 	strh.w	r1, [sp, #6]
    ce92:	8900      	ldrh	r0, [r0, #8]
    ce94:	f8ad 0008 	strh.w	r0, [sp, #8]
    ce98:	4668      	mov	r0, sp
    ce9a:	f001 fe3e 	bl	eb1a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    ce9e:	b004      	add	sp, #16
    cea0:	bd10      	pop	{r4, pc}

0000cea2 <sdc_hci_cmd_vs_event_length_set>:
    cea2:	f7fd be39 	b.w	ab18 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000cea6 <sdc_hci_cmd_vs_llpm_mode_set>:
    cea6:	2001      	movs	r0, #1
    cea8:	4770      	bx	lr

0000ceaa <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    ceaa:	7800      	ldrb	r0, [r0, #0]
    ceac:	b100      	cbz	r0, ceb0 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    ceae:	2001      	movs	r0, #1
    ceb0:	f002 b82c 	b.w	ef0c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000ceb4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    ceb4:	b570      	push	{r4, r5, r6, lr}
    ceb6:	4605      	mov	r5, r0
    ceb8:	2210      	movs	r2, #16
    ceba:	2100      	movs	r1, #0
    cebc:	f7ff fbee 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cec0:	2210      	movs	r2, #16
    cec2:	2100      	movs	r1, #0
    cec4:	f105 0010 	add.w	r0, r5, #16
    cec8:	f7ff fbe8 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cecc:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    ced0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    ced4:	1c40      	adds	r0, r0, #1
    ced6:	d10b      	bne.n	cef0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    ced8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cedc:	1c40      	adds	r0, r0, #1
    cede:	d107      	bne.n	cef0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cee0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    cee4:	1c40      	adds	r0, r0, #1
    cee6:	d103      	bne.n	cef0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cee8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    ceec:	1c40      	adds	r0, r0, #1
    ceee:	d00b      	beq.n	cf08 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    cef0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    cef4:	6128      	str	r0, [r5, #16]
    cef6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cefa:	6168      	str	r0, [r5, #20]
    cefc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    cf00:	61a8      	str	r0, [r5, #24]
    cf02:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    cf06:	61e8      	str	r0, [r5, #28]
    cf08:	2000      	movs	r0, #0
    cf0a:	f7f7 fdb7 	bl	4a7c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cf0e:	b918      	cbnz	r0, cf18 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    cf10:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    cf14:	07c0      	lsls	r0, r0, #31
    cf16:	d118      	bne.n	cf4a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cf18:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    cf1c:	1c40      	adds	r0, r0, #1
    cf1e:	d10b      	bne.n	cf38 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cf20:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    cf24:	1c40      	adds	r0, r0, #1
    cf26:	d107      	bne.n	cf38 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cf28:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    cf2c:	1c40      	adds	r0, r0, #1
    cf2e:	d103      	bne.n	cf38 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cf30:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    cf34:	1c40      	adds	r0, r0, #1
    cf36:	d008      	beq.n	cf4a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cf38:	f854 0f90 	ldr.w	r0, [r4, #144]!
    cf3c:	6028      	str	r0, [r5, #0]
    cf3e:	6860      	ldr	r0, [r4, #4]
    cf40:	6068      	str	r0, [r5, #4]
    cf42:	68a0      	ldr	r0, [r4, #8]
    cf44:	60a8      	str	r0, [r5, #8]
    cf46:	68e0      	ldr	r0, [r4, #12]
    cf48:	60e8      	str	r0, [r5, #12]
    cf4a:	2000      	movs	r0, #0
    cf4c:	bd70      	pop	{r4, r5, r6, pc}

0000cf4e <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    cf4e:	b570      	push	{r4, r5, r6, lr}
    cf50:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cf54:	4604      	mov	r4, r0
    cf56:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cf5a:	1c40      	adds	r0, r0, #1
    cf5c:	d105      	bne.n	cf6a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    cf5e:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    cf62:	43c0      	mvns	r0, r0
    cf64:	0400      	lsls	r0, r0, #16
    cf66:	0c00      	lsrs	r0, r0, #16
    cf68:	d03a      	beq.n	cfe0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    cf6a:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    cf6e:	07c0      	lsls	r0, r0, #31
    cf70:	d036      	beq.n	cfe0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    cf72:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cf76:	f8c4 0001 	str.w	r0, [r4, #1]
    cf7a:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    cf7e:	f8a4 0005 	strh.w	r0, [r4, #5]
    cf82:	79a0      	ldrb	r0, [r4, #6]
    cf84:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    cf88:	71a0      	strb	r0, [r4, #6]
    cf8a:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    cf8e:	1c40      	adds	r0, r0, #1
    cf90:	d00f      	beq.n	cfb2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cf92:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    cf96:	1c40      	adds	r0, r0, #1
    cf98:	d00b      	beq.n	cfb2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cf9a:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    cf9e:	1c40      	adds	r0, r0, #1
    cfa0:	d007      	beq.n	cfb2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cfa2:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    cfa6:	1c40      	adds	r0, r0, #1
    cfa8:	d003      	beq.n	cfb2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cfaa:	2000      	movs	r0, #0
    cfac:	f7f7 fd66 	bl	4a7c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cfb0:	b140      	cbz	r0, cfc4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    cfb2:	2210      	movs	r2, #16
    cfb4:	2100      	movs	r1, #0
    cfb6:	1de0      	adds	r0, r4, #7
    cfb8:	f7ff fb70 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cfbc:	2001      	movs	r0, #1
    cfbe:	7020      	strb	r0, [r4, #0]
    cfc0:	2000      	movs	r0, #0
    cfc2:	bd70      	pop	{r4, r5, r6, pc}
    cfc4:	f855 0f90 	ldr.w	r0, [r5, #144]!
    cfc8:	f8c4 0007 	str.w	r0, [r4, #7]
    cfcc:	6868      	ldr	r0, [r5, #4]
    cfce:	f8c4 000b 	str.w	r0, [r4, #11]
    cfd2:	68a8      	ldr	r0, [r5, #8]
    cfd4:	f8c4 000f 	str.w	r0, [r4, #15]
    cfd8:	68e8      	ldr	r0, [r5, #12]
    cfda:	f8c4 0013 	str.w	r0, [r4, #19]
    cfde:	e7ed      	b.n	cfbc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    cfe0:	2000      	movs	r0, #0
    cfe2:	e7ec      	b.n	cfbe <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000cfe4 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    cfe4:	f001 bfac 	b.w	ef40 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000cfe8 <sdc_hci_cmd_ip_read_bd_addr>:
    cfe8:	f001 bff7 	b.w	efda <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000cfec <sdc_hci_cmd_ip_read_local_version_information>:
    cfec:	f7fd bde0 	b.w	abb0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000cff0 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    cff0:	f001 bd4a 	b.w	ea88 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000cff4 <sdc_hci_cmd_le_add_device_to_white_list>:
    cff4:	f001 bd63 	b.w	eabe <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000cff8 <sdc_hci_cmd_le_clear_resolving_list>:
    cff8:	f001 bd78 	b.w	eaec <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000cffc <sdc_hci_cmd_le_clear_white_list>:
    cffc:	f001 bd83 	b.w	eb06 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d000 <sdc_hci_cmd_le_conn_update>:
    d000:	f001 bd8b 	b.w	eb1a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000d004 <sdc_hci_cmd_le_create_conn>:
    d004:	f7fd bb02 	b.w	a60c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000d008 <sdc_hci_cmd_le_create_conn_cancel>:
    d008:	f7fd bb5a 	b.w	a6c0 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000d00c <sdc_hci_cmd_le_enable_encryption>:
    d00c:	f001 bf35 	b.w	ee7a <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000d010 <sdc_hci_cmd_le_encrypt>:
    d010:	f001 bdc5 	b.w	eb9e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d014 <sdc_hci_cmd_le_rand>:
    d014:	f001 bdcc 	b.w	ebb0 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d018 <sdc_hci_cmd_le_read_buffer_size>:
    d018:	f7fd bb7e 	b.w	a718 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d01c <sdc_hci_cmd_le_read_channel_map>:
    d01c:	f7fd bb86 	b.w	a72c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d020 <sdc_hci_cmd_le_read_max_data_length>:
    d020:	f001 bdcc 	b.w	ebbc <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d024 <sdc_hci_cmd_le_read_phy>:
    d024:	f001 bdda 	b.w	ebdc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d028 <sdc_hci_cmd_le_read_remote_features>:
    d028:	f7fd bbaa 	b.w	a780 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d02c <sdc_hci_cmd_le_read_resolving_list_size>:
    d02c:	f001 be01 	b.w	ec32 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d030 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d030:	f7fd bbca 	b.w	a7c8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d034 <sdc_hci_cmd_le_read_transmit_power>:
    d034:	f001 be01 	b.w	ec3a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d038 <sdc_hci_cmd_le_read_white_list_size>:
    d038:	f001 be08 	b.w	ec4c <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d03c <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d03c:	f001 be0a 	b.w	ec54 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d040 <sdc_hci_cmd_le_remove_device_from_white_list>:
    d040:	f001 be21 	b.w	ec86 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d044 <sdc_hci_cmd_le_set_address_resolution_enable>:
    d044:	f001 be34 	b.w	ecb0 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d048 <sdc_hci_cmd_le_set_data_length>:
    d048:	f001 be40 	b.w	eccc <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d04c <sdc_hci_cmd_le_set_default_phy>:
    d04c:	f7fd bbcc 	b.w	a7e8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d050 <sdc_hci_cmd_le_set_event_mask>:
    d050:	b510      	push	{r4, lr}
    d052:	f7f7 f81d 	bl	4090 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d056:	2000      	movs	r0, #0
    d058:	bd10      	pop	{r4, pc}

0000d05a <sdc_hci_cmd_le_set_host_channel_classification>:
    d05a:	f001 be5e 	b.w	ed1a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000d05e <sdc_hci_cmd_le_set_phy>:
    d05e:	f001 be7c 	b.w	ed5a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d062 <sdc_hci_cmd_le_set_privacy_mode>:
    d062:	f001 be9a 	b.w	ed9a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d066 <sdc_hci_cmd_le_set_random_address>:
    d066:	f001 beae 	b.w	edc6 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d06a <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d06a:	f001 beba 	b.w	ede2 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d06e <sdc_hci_cmd_le_set_scan_enable>:
    d06e:	f001 bec1 	b.w	edf4 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d072 <sdc_hci_cmd_le_set_scan_params>:
    d072:	f001 bed5 	b.w	ee20 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000d076 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d076:	f001 bf32 	b.w	eede <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d07a <sdc_hci_cmd_lc_disconnect>:
    d07a:	f001 bcb4 	b.w	e9e6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d07e <sdc_hci_cmd_lc_read_remote_version_information>:
    d07e:	f001 bfb8 	b.w	eff2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d082:	b570      	push	{r4, r5, r6, lr}
    d084:	880b      	ldrh	r3, [r1, #0]
    d086:	7f04      	ldrb	r4, [r0, #28]
    d088:	f100 0524 	add.w	r5, r0, #36	; 0x24
    d08c:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    d090:	8802      	ldrh	r2, [r0, #0]
    d092:	4435      	add	r5, r6
    d094:	1da4      	adds	r4, r4, #6
    d096:	882d      	ldrh	r5, [r5, #0]
    d098:	4422      	add	r2, r4
    d09a:	b292      	uxth	r2, r2
    d09c:	4425      	add	r5, r4
    d09e:	1e54      	subs	r4, r2, #1
    d0a0:	442c      	add	r4, r5
    d0a2:	fb94 f4f2 	sdiv	r4, r4, r2
    d0a6:	fb02 6204 	mla	r2, r2, r4, r6
    d0aa:	8840      	ldrh	r0, [r0, #2]
    d0ac:	b292      	uxth	r2, r2
    d0ae:	4290      	cmp	r0, r2
    d0b0:	d903      	bls.n	d0ba <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d0b2:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d0b6:	4310      	orrs	r0, r2
    d0b8:	e002      	b.n	d0c0 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d0ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d0be:	4398      	bics	r0, r3
    d0c0:	8008      	strh	r0, [r1, #0]
    d0c2:	bd70      	pop	{r4, r5, r6, pc}
    d0c4:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    d0c8:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d0cc:	429a      	cmp	r2, r3
    d0ce:	d107      	bne.n	d0e0 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d0d0:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d0d4:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d0d8:	4288      	cmp	r0, r1
    d0da:	d001      	beq.n	d0e0 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d0dc:	2001      	movs	r0, #1
    d0de:	4770      	bx	lr
    d0e0:	2000      	movs	r0, #0
    d0e2:	4770      	bx	lr

0000d0e4 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    d0e4:	b570      	push	{r4, r5, r6, lr}
    d0e6:	7f00      	ldrb	r0, [r0, #28]
    d0e8:	461c      	mov	r4, r3
    d0ea:	1d80      	adds	r0, r0, #6
    d0ec:	4408      	add	r0, r1
    d0ee:	4613      	mov	r3, r2
    d0f0:	8809      	ldrh	r1, [r1, #0]
    d0f2:	9a04      	ldr	r2, [sp, #16]
    d0f4:	1cc9      	adds	r1, r1, #3
    d0f6:	b289      	uxth	r1, r1
    d0f8:	1915      	adds	r5, r2, r4
    d0fa:	1ec0      	subs	r0, r0, #3
    d0fc:	428d      	cmp	r5, r1
    d0fe:	d805      	bhi.n	d10c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    d100:	1881      	adds	r1, r0, r2
    d102:	4622      	mov	r2, r4
    d104:	4618      	mov	r0, r3
    d106:	f7ff fa4f 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d10a:	e000      	b.n	d10e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    d10c:	2400      	movs	r4, #0
    d10e:	4620      	mov	r0, r4
    d110:	bd70      	pop	{r4, r5, r6, pc}

0000d112 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    d112:	b570      	push	{r4, r5, r6, lr}
    d114:	7f00      	ldrb	r0, [r0, #28]
    d116:	461c      	mov	r4, r3
    d118:	1d80      	adds	r0, r0, #6
    d11a:	4408      	add	r0, r1
    d11c:	4613      	mov	r3, r2
    d11e:	8809      	ldrh	r1, [r1, #0]
    d120:	9a04      	ldr	r2, [sp, #16]
    d122:	1cc9      	adds	r1, r1, #3
    d124:	b289      	uxth	r1, r1
    d126:	1915      	adds	r5, r2, r4
    d128:	1ec0      	subs	r0, r0, #3
    d12a:	428d      	cmp	r5, r1
    d12c:	d805      	bhi.n	d13a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    d12e:	4410      	add	r0, r2
    d130:	4622      	mov	r2, r4
    d132:	4619      	mov	r1, r3
    d134:	f7ff fa38 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d138:	e000      	b.n	d13c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    d13a:	2400      	movs	r4, #0
    d13c:	4620      	mov	r0, r4
    d13e:	bd70      	pop	{r4, r5, r6, pc}

0000d140 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d140:	8881      	ldrh	r1, [r0, #4]
    d142:	88c0      	ldrh	r0, [r0, #6]
    d144:	4288      	cmp	r0, r1
    d146:	d101      	bne.n	d14c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d148:	2001      	movs	r0, #1
    d14a:	4770      	bx	lr
    d14c:	2000      	movs	r0, #0
    d14e:	4770      	bx	lr

0000d150 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d150:	8881      	ldrh	r1, [r0, #4]
    d152:	8900      	ldrh	r0, [r0, #8]
    d154:	4288      	cmp	r0, r1
    d156:	d101      	bne.n	d15c <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    d158:	2001      	movs	r0, #1
    d15a:	4770      	bx	lr
    d15c:	2000      	movs	r0, #0
    d15e:	4770      	bx	lr

0000d160 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d160:	b570      	push	{r4, r5, r6, lr}
    d162:	4604      	mov	r4, r0
    d164:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d168:	8880      	ldrh	r0, [r0, #4]
    d16a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d16e:	4401      	add	r1, r0
    d170:	8a20      	ldrh	r0, [r4, #16]
    d172:	2800      	cmp	r0, #0
    d174:	d01a      	beq.n	d1ac <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d176:	89a2      	ldrh	r2, [r4, #12]
    d178:	2500      	movs	r5, #0
    d17a:	4410      	add	r0, r2
    d17c:	b280      	uxth	r0, r0
    d17e:	81a0      	strh	r0, [r4, #12]
    d180:	880a      	ldrh	r2, [r1, #0]
    d182:	4290      	cmp	r0, r2
    d184:	d905      	bls.n	d192 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    d186:	f240 1163 	movw	r1, #355	; 0x163
    d18a:	f04f 0014 	mov.w	r0, #20
    d18e:	f7f6 fe03 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d192:	d109      	bne.n	d1a8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d194:	69a0      	ldr	r0, [r4, #24]
    d196:	b108      	cbz	r0, d19c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    d198:	7f40      	ldrb	r0, [r0, #29]
    d19a:	7088      	strb	r0, [r1, #2]
    d19c:	f104 0104 	add.w	r1, r4, #4
    d1a0:	4620      	mov	r0, r4
    d1a2:	f7ff ff6e 	bl	d082 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d1a6:	81a5      	strh	r5, [r4, #12]
    d1a8:	8225      	strh	r5, [r4, #16]
    d1aa:	2001      	movs	r0, #1
    d1ac:	bd70      	pop	{r4, r5, r6, pc}

0000d1ae <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d1ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d1b0:	4604      	mov	r4, r0
    d1b2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    d1b6:	88c0      	ldrh	r0, [r0, #6]
    d1b8:	460e      	mov	r6, r1
    d1ba:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d1be:	8a60      	ldrh	r0, [r4, #18]
    d1c0:	19d9      	adds	r1, r3, r7
    d1c2:	b108      	cbz	r0, d1c8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    d1c4:	42b0      	cmp	r0, r6
    d1c6:	d201      	bcs.n	d1cc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    d1c8:	2000      	movs	r0, #0
    d1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1cc:	89e0      	ldrh	r0, [r4, #14]
    d1ce:	2500      	movs	r5, #0
    d1d0:	b140      	cbz	r0, d1e4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    d1d2:	f8b1 c000 	ldrh.w	ip, [r1]
    d1d6:	4560      	cmp	r0, ip
    d1d8:	d008      	beq.n	d1ec <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d1da:	f240 214b 	movw	r1, #587	; 0x24b
    d1de:	2014      	movs	r0, #20
    d1e0:	f7f6 fdda 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1e4:	7f60      	ldrb	r0, [r4, #29]
    d1e6:	7088      	strb	r0, [r1, #2]
    d1e8:	800d      	strh	r5, [r1, #0]
    d1ea:	e00e      	b.n	d20a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d1ec:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d1f0:	4418      	add	r0, r3
    d1f2:	f10c 0c06 	add.w	ip, ip, #6
    d1f6:	44bc      	add	ip, r7
    d1f8:	4460      	add	r0, ip
    d1fa:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d1fe:	f820 cc03 	strh.w	ip, [r0, #-3]
    d202:	f894 c020 	ldrb.w	ip, [r4, #32]
    d206:	f800 cc01 	strb.w	ip, [r0, #-1]
    d20a:	89e0      	ldrh	r0, [r4, #14]
    d20c:	4430      	add	r0, r6
    d20e:	81e0      	strh	r0, [r4, #14]
    d210:	8808      	ldrh	r0, [r1, #0]
    d212:	4430      	add	r0, r6
    d214:	8008      	strh	r0, [r1, #0]
    d216:	b19a      	cbz	r2, d240 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    d218:	1da1      	adds	r1, r4, #6
    d21a:	4620      	mov	r0, r4
    d21c:	f7ff ff31 	bl	d082 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d220:	81e5      	strh	r5, [r4, #14]
    d222:	7f60      	ldrb	r0, [r4, #29]
    d224:	1c40      	adds	r0, r0, #1
    d226:	7760      	strb	r0, [r4, #29]
    d228:	7da0      	ldrb	r0, [r4, #22]
    d22a:	f88d 0000 	strb.w	r0, [sp]
    d22e:	9800      	ldr	r0, [sp, #0]
    d230:	9000      	str	r0, [sp, #0]
    d232:	f89d 0000 	ldrb.w	r0, [sp]
    d236:	b178      	cbz	r0, d258 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d238:	88e0      	ldrh	r0, [r4, #6]
    d23a:	82a0      	strh	r0, [r4, #20]
    d23c:	75a5      	strb	r5, [r4, #22]
    d23e:	e00b      	b.n	d258 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d240:	7f20      	ldrb	r0, [r4, #28]
    d242:	89e1      	ldrh	r1, [r4, #14]
    d244:	1d80      	adds	r0, r0, #6
    d246:	4438      	add	r0, r7
    d248:	4419      	add	r1, r3
    d24a:	4408      	add	r0, r1
    d24c:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d250:	83e1      	strh	r1, [r4, #30]
    d252:	7880      	ldrb	r0, [r0, #2]
    d254:	f884 0020 	strb.w	r0, [r4, #32]
    d258:	8265      	strh	r5, [r4, #18]
    d25a:	2001      	movs	r0, #1
    d25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d25e <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d25e:	1cc0      	adds	r0, r0, #3
    d260:	4770      	bx	lr

0000d262 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d262:	b510      	push	{r4, lr}
    d264:	88c2      	ldrh	r2, [r0, #6]
    d266:	8943      	ldrh	r3, [r0, #10]
    d268:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
    d26c:	f423 4400 	bic.w	r4, r3, #32768	; 0x8000
    d270:	1a61      	subs	r1, r4, r1
    d272:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d27a:	429a      	cmp	r2, r3
    d27c:	d101      	bne.n	d282 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d27e:	8842      	ldrh	r2, [r0, #2]
    d280:	4411      	add	r1, r2
    d282:	7f02      	ldrb	r2, [r0, #28]
    d284:	8800      	ldrh	r0, [r0, #0]
    d286:	4410      	add	r0, r2
    d288:	1d80      	adds	r0, r0, #6
    d28a:	b280      	uxth	r0, r0
    d28c:	fb91 f0f0 	sdiv	r0, r1, r0
    d290:	b280      	uxth	r0, r0
    d292:	bd10      	pop	{r4, pc}

0000d294 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d294:	b510      	push	{r4, lr}
    d296:	4604      	mov	r4, r0
    d298:	88c0      	ldrh	r0, [r0, #6]
    d29a:	88a1      	ldrh	r1, [r4, #4]
    d29c:	4281      	cmp	r1, r0
    d29e:	d007      	beq.n	d2b0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d2a0:	89a0      	ldrh	r0, [r4, #12]
    d2a2:	b928      	cbnz	r0, d2b0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d2a4:	8a20      	ldrh	r0, [r4, #16]
    d2a6:	b918      	cbnz	r0, d2b0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d2a8:	88a0      	ldrh	r0, [r4, #4]
    d2aa:	8aa1      	ldrh	r1, [r4, #20]
    d2ac:	4288      	cmp	r0, r1
    d2ae:	d101      	bne.n	d2b4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    d2b0:	2000      	movs	r0, #0
    d2b2:	bd10      	pop	{r4, pc}
    d2b4:	1d21      	adds	r1, r4, #4
    d2b6:	4620      	mov	r0, r4
    d2b8:	f7ff fee3 	bl	d082 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d2bc:	2000      	movs	r0, #0
    d2be:	8220      	strh	r0, [r4, #16]
    d2c0:	2001      	movs	r0, #1
    d2c2:	bd10      	pop	{r4, pc}

0000d2c4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d2c4:	b510      	push	{r4, lr}
    d2c6:	4604      	mov	r4, r0
    d2c8:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d2cc:	88c0      	ldrh	r0, [r0, #6]
    d2ce:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d2d2:	4402      	add	r2, r0
    d2d4:	8820      	ldrh	r0, [r4, #0]
    d2d6:	2845      	cmp	r0, #69	; 0x45
    d2d8:	d200      	bcs.n	d2dc <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d2da:	2045      	movs	r0, #69	; 0x45
    d2dc:	4288      	cmp	r0, r1
    d2de:	d204      	bcs.n	d2ea <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d2e0:	f240 1119 	movw	r1, #281	; 0x119
    d2e4:	2014      	movs	r0, #20
    d2e6:	f7f6 fd57 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2ea:	7de0      	ldrb	r0, [r4, #23]
    d2ec:	2800      	cmp	r0, #0
    d2ee:	d003      	beq.n	d2f8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d2f0:	8810      	ldrh	r0, [r2, #0]
    d2f2:	4288      	cmp	r0, r1
    d2f4:	d201      	bcs.n	d2fa <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d2f6:	2000      	movs	r0, #0
    d2f8:	bd10      	pop	{r4, pc}
    d2fa:	8011      	strh	r1, [r2, #0]
    d2fc:	1da1      	adds	r1, r4, #6
    d2fe:	4620      	mov	r0, r4
    d300:	f7ff febf 	bl	d082 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d304:	2000      	movs	r0, #0
    d306:	75e0      	strb	r0, [r4, #23]
    d308:	2001      	movs	r0, #1
    d30a:	bd10      	pop	{r4, pc}

0000d30c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    d30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d310:	8941      	ldrh	r1, [r0, #10]
    d312:	8886      	ldrh	r6, [r0, #4]
    d314:	4604      	mov	r4, r0
    d316:	2500      	movs	r5, #0
    d318:	f100 070a 	add.w	r7, r0, #10
    d31c:	e006      	b.n	d32c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    d31e:	4639      	mov	r1, r7
    d320:	4620      	mov	r0, r4
    d322:	f7ff feae 	bl	d082 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d326:	1c6d      	adds	r5, r5, #1
    d328:	8961      	ldrh	r1, [r4, #10]
    d32a:	b2ad      	uxth	r5, r5
    d32c:	42b1      	cmp	r1, r6
    d32e:	d1f6      	bne.n	d31e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    d330:	4628      	mov	r0, r5
    d332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d336 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d336:	b530      	push	{r4, r5, lr}
    d338:	88c4      	ldrh	r4, [r0, #6]
    d33a:	8881      	ldrh	r1, [r0, #4]
    d33c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d340:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d344:	4413      	add	r3, r2
    d346:	8882      	ldrh	r2, [r0, #4]
    d348:	8a85      	ldrh	r5, [r0, #20]
    d34a:	42aa      	cmp	r2, r5
    d34c:	d012      	beq.n	d374 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d34e:	42a1      	cmp	r1, r4
    d350:	d010      	beq.n	d374 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d352:	8981      	ldrh	r1, [r0, #12]
    d354:	b971      	cbnz	r1, d374 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d356:	6982      	ldr	r2, [r0, #24]
    d358:	b172      	cbz	r2, d378 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d35a:	4610      	mov	r0, r2
    d35c:	f7ff fef8 	bl	d150 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    d360:	b950      	cbnz	r0, d378 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d362:	8910      	ldrh	r0, [r2, #8]
    d364:	3224      	adds	r2, #36	; 0x24
    d366:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d36a:	4410      	add	r0, r2
    d36c:	7899      	ldrb	r1, [r3, #2]
    d36e:	7880      	ldrb	r0, [r0, #2]
    d370:	4288      	cmp	r0, r1
    d372:	d101      	bne.n	d378 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d374:	2000      	movs	r0, #0
    d376:	bd30      	pop	{r4, r5, pc}
    d378:	4618      	mov	r0, r3
    d37a:	bd30      	pop	{r4, r5, pc}

0000d37c <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d37c:	8803      	ldrh	r3, [r0, #0]
    d37e:	2b45      	cmp	r3, #69	; 0x45
    d380:	d200      	bcs.n	d384 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d382:	2345      	movs	r3, #69	; 0x45
    d384:	8013      	strh	r3, [r2, #0]
    d386:	88c2      	ldrh	r2, [r0, #6]
    d388:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    d38c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d390:	441a      	add	r2, r3
    d392:	600a      	str	r2, [r1, #0]
    d394:	89c0      	ldrh	r0, [r0, #14]
    d396:	4770      	bx	lr

0000d398 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d398:	7f00      	ldrb	r0, [r0, #28]
    d39a:	1d80      	adds	r0, r0, #6
    d39c:	4408      	add	r0, r1
    d39e:	1ec0      	subs	r0, r0, #3
    d3a0:	6010      	str	r0, [r2, #0]
    d3a2:	8808      	ldrh	r0, [r1, #0]
    d3a4:	4770      	bx	lr

0000d3a6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3aa:	460e      	mov	r6, r1
    d3ac:	88c1      	ldrh	r1, [r0, #6]
    d3ae:	8902      	ldrh	r2, [r0, #8]
    d3b0:	4604      	mov	r4, r0
    d3b2:	f100 0824 	add.w	r8, r0, #36	; 0x24
    d3b6:	8800      	ldrh	r0, [r0, #0]
    d3b8:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    d3bc:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    d3c0:	2845      	cmp	r0, #69	; 0x45
    d3c2:	d200      	bcs.n	d3c6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d3c4:	2045      	movs	r0, #69	; 0x45
    d3c6:	42b0      	cmp	r0, r6
    d3c8:	d203      	bcs.n	d3d2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d3ca:	21db      	movs	r1, #219	; 0xdb
    d3cc:	2014      	movs	r0, #20
    d3ce:	f7f6 fce3 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3d2:	4610      	mov	r0, r2
    d3d4:	f7ff fe76 	bl	d0c4 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d3d8:	b110      	cbz	r0, d3e0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d3da:	2000      	movs	r0, #0
    d3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d3e0:	42af      	cmp	r7, r5
    d3e2:	d908      	bls.n	d3f6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d3e4:	7f21      	ldrb	r1, [r4, #28]
    d3e6:	1b78      	subs	r0, r7, r5
    d3e8:	1a40      	subs	r0, r0, r1
    d3ea:	1f80      	subs	r0, r0, #6
    d3ec:	4286      	cmp	r6, r0
    d3ee:	dd02      	ble.n	d3f6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d3f0:	2000      	movs	r0, #0
    d3f2:	75e0      	strb	r0, [r4, #23]
    d3f4:	e7f1      	b.n	d3da <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d3f6:	eb08 0005 	add.w	r0, r8, r5
    d3fa:	2101      	movs	r1, #1
    d3fc:	8006      	strh	r6, [r0, #0]
    d3fe:	75e1      	strb	r1, [r4, #23]
    d400:	e7ec      	b.n	d3dc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d402 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d402:	b538      	push	{r3, r4, r5, lr}
    d404:	88c4      	ldrh	r4, [r0, #6]
    d406:	8881      	ldrh	r1, [r0, #4]
    d408:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d40c:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d410:	441a      	add	r2, r3
    d412:	42a1      	cmp	r1, r4
    d414:	d010      	beq.n	d438 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d416:	8983      	ldrh	r3, [r0, #12]
    d418:	8a05      	ldrh	r5, [r0, #16]
    d41a:	8812      	ldrh	r2, [r2, #0]
    d41c:	442b      	add	r3, r5
    d41e:	4293      	cmp	r3, r2
    d420:	d308      	bcc.n	d434 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d422:	f8ad 1000 	strh.w	r1, [sp]
    d426:	4669      	mov	r1, sp
    d428:	f7ff fe2b 	bl	d082 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d42c:	f8bd 0000 	ldrh.w	r0, [sp]
    d430:	42a0      	cmp	r0, r4
    d432:	d001      	beq.n	d438 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d434:	2001      	movs	r0, #1
    d436:	bd38      	pop	{r3, r4, r5, pc}
    d438:	2000      	movs	r0, #0
    d43a:	bd38      	pop	{r3, r4, r5, pc}

0000d43c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d43c:	b570      	push	{r4, r5, r6, lr}
    d43e:	88c6      	ldrh	r6, [r0, #6]
    d440:	8885      	ldrh	r5, [r0, #4]
    d442:	4603      	mov	r3, r0
    d444:	f100 0424 	add.w	r4, r0, #36	; 0x24
    d448:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    d44c:	4420      	add	r0, r4
    d44e:	42b5      	cmp	r5, r6
    d450:	d102      	bne.n	d458 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d452:	2000      	movs	r0, #0
    d454:	8218      	strh	r0, [r3, #16]
    d456:	bd70      	pop	{r4, r5, r6, pc}
    d458:	8804      	ldrh	r4, [r0, #0]
    d45a:	899d      	ldrh	r5, [r3, #12]
    d45c:	7f1e      	ldrb	r6, [r3, #28]
    d45e:	1b64      	subs	r4, r4, r5
    d460:	4435      	add	r5, r6
    d462:	4428      	add	r0, r5
    d464:	880d      	ldrh	r5, [r1, #0]
    d466:	b2a4      	uxth	r4, r4
    d468:	1cc0      	adds	r0, r0, #3
    d46a:	42a5      	cmp	r5, r4
    d46c:	d900      	bls.n	d470 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d46e:	800c      	strh	r4, [r1, #0]
    d470:	899c      	ldrh	r4, [r3, #12]
    d472:	b124      	cbz	r4, d47e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d474:	2400      	movs	r4, #0
    d476:	7014      	strb	r4, [r2, #0]
    d478:	8809      	ldrh	r1, [r1, #0]
    d47a:	8219      	strh	r1, [r3, #16]
    d47c:	bd70      	pop	{r4, r5, r6, pc}
    d47e:	2401      	movs	r4, #1
    d480:	e7f9      	b.n	d476 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d482 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    d482:	b508      	push	{r3, lr}
    d484:	8a81      	ldrh	r1, [r0, #20]
    d486:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d48a:	3aff      	subs	r2, #255	; 0xff
    d48c:	d008      	beq.n	d4a0 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    d48e:	7d82      	ldrb	r2, [r0, #22]
    d490:	f88d 2000 	strb.w	r2, [sp]
    d494:	9a00      	ldr	r2, [sp, #0]
    d496:	9200      	str	r2, [sp, #0]
    d498:	f89d 2000 	ldrb.w	r2, [sp]
    d49c:	b952      	cbnz	r2, d4b4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d49e:	e004      	b.n	d4aa <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    d4a0:	f44f 7162 	mov.w	r1, #904	; 0x388
    d4a4:	2014      	movs	r0, #20
    d4a6:	f7f6 fc77 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4aa:	8880      	ldrh	r0, [r0, #4]
    d4ac:	4281      	cmp	r1, r0
    d4ae:	d101      	bne.n	d4b4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d4b0:	2000      	movs	r0, #0
    d4b2:	bd08      	pop	{r3, pc}
    d4b4:	2001      	movs	r0, #1
    d4b6:	bd08      	pop	{r3, pc}

0000d4b8 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    d4b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d4bc:	8281      	strh	r1, [r0, #20]
    d4be:	2100      	movs	r1, #0
    d4c0:	7581      	strb	r1, [r0, #22]
    d4c2:	4770      	bx	lr

0000d4c4 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    d4c4:	b510      	push	{r4, lr}
    d4c6:	8a81      	ldrh	r1, [r0, #20]
    d4c8:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d4cc:	3aff      	subs	r2, #255	; 0xff
    d4ce:	d004      	beq.n	d4da <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    d4d0:	f44f 7159 	mov.w	r1, #868	; 0x364
    d4d4:	2014      	movs	r0, #20
    d4d6:	f7f6 fc5f 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4da:	88c1      	ldrh	r1, [r0, #6]
    d4dc:	8281      	strh	r1, [r0, #20]
    d4de:	89c1      	ldrh	r1, [r0, #14]
    d4e0:	b109      	cbz	r1, d4e6 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    d4e2:	2101      	movs	r1, #1
    d4e4:	e000      	b.n	d4e8 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    d4e6:	2100      	movs	r1, #0
    d4e8:	7581      	strb	r1, [r0, #22]
    d4ea:	bd10      	pop	{r4, pc}

0000d4ec <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4f0:	461d      	mov	r5, r3
    d4f2:	4616      	mov	r6, r2
    d4f4:	9f06      	ldr	r7, [sp, #24]
    d4f6:	460b      	mov	r3, r1
    d4f8:	4604      	mov	r4, r0
    d4fa:	463a      	mov	r2, r7
    d4fc:	4629      	mov	r1, r5
    d4fe:	4630      	mov	r0, r6
    d500:	f000 f84f 	bl	d5a2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d504:	4283      	cmp	r3, r0
    d506:	d201      	bcs.n	d50c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d508:	21a8      	movs	r1, #168	; 0xa8
    d50a:	e018      	b.n	d53e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d50c:	1ce0      	adds	r0, r4, #3
    d50e:	f020 0103 	bic.w	r1, r0, #3
    d512:	4620      	mov	r0, r4
    d514:	42a1      	cmp	r1, r4
    d516:	d001      	beq.n	d51c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    d518:	21a9      	movs	r1, #169	; 0xa9
    d51a:	e010      	b.n	d53e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d51c:	2224      	movs	r2, #36	; 0x24
    d51e:	2100      	movs	r1, #0
    d520:	f7ff f8bc 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d524:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d528:	82a0      	strh	r0, [r4, #20]
    d52a:	19a8      	adds	r0, r5, r6
    d52c:	1d80      	adds	r0, r0, #6
    d52e:	4378      	muls	r0, r7
    d530:	b280      	uxth	r0, r0
    d532:	7725      	strb	r5, [r4, #28]
    d534:	8060      	strh	r0, [r4, #2]
    d536:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d53a:	d903      	bls.n	d544 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    d53c:	21af      	movs	r1, #175	; 0xaf
    d53e:	2014      	movs	r0, #20
    d540:	f7f6 fc2a 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d544:	8026      	strh	r6, [r4, #0]
    d546:	2000      	movs	r0, #0
    d548:	7760      	strb	r0, [r4, #29]
    d54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d54e <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    d54e:	6181      	str	r1, [r0, #24]
    d550:	6188      	str	r0, [r1, #24]
    d552:	4770      	bx	lr

0000d554 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d558:	460b      	mov	r3, r1
    d55a:	4604      	mov	r4, r0
    d55c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d560:	8905      	ldrh	r5, [r0, #8]
    d562:	8946      	ldrh	r6, [r0, #10]
    d564:	8880      	ldrh	r0, [r0, #4]
    d566:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    d56a:	4439      	add	r1, r7
    d56c:	460f      	mov	r7, r1
    d56e:	4285      	cmp	r5, r0
    d570:	d102      	bne.n	d578 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    d572:	2000      	movs	r0, #0
    d574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d578:	b10a      	cbz	r2, d57e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    d57a:	1cc8      	adds	r0, r1, #3
    d57c:	6010      	str	r0, [r2, #0]
    d57e:	b123      	cbz	r3, d58a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    d580:	7f22      	ldrb	r2, [r4, #28]
    d582:	1cf9      	adds	r1, r7, #3
    d584:	4618      	mov	r0, r3
    d586:	f7ff f80f 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d58a:	883f      	ldrh	r7, [r7, #0]
    d58c:	f104 0108 	add.w	r1, r4, #8
    d590:	4620      	mov	r0, r4
    d592:	f7ff fd76 	bl	d082 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d596:	42b5      	cmp	r5, r6
    d598:	d101      	bne.n	d59e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    d59a:	8920      	ldrh	r0, [r4, #8]
    d59c:	8160      	strh	r0, [r4, #10]
    d59e:	4638      	mov	r0, r7
    d5a0:	e7e8      	b.n	d574 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000d5a2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d5a2:	4401      	add	r1, r0
    d5a4:	1d89      	adds	r1, r1, #6
    d5a6:	4351      	muls	r1, r2
    d5a8:	b28a      	uxth	r2, r1
    d5aa:	2100      	movs	r1, #0
    d5ac:	2845      	cmp	r0, #69	; 0x45
    d5ae:	d201      	bcs.n	d5b4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    d5b0:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    d5b4:	3224      	adds	r2, #36	; 0x24
    d5b6:	1850      	adds	r0, r2, r1
    d5b8:	b280      	uxth	r0, r0
    d5ba:	4770      	bx	lr

0000d5bc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d5c0:	4688      	mov	r8, r1
    d5c2:	88c1      	ldrh	r1, [r0, #6]
    d5c4:	4604      	mov	r4, r0
    d5c6:	8900      	ldrh	r0, [r0, #8]
    d5c8:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    d5cc:	f104 0524 	add.w	r5, r4, #36	; 0x24
    d5d0:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d5d4:	eb05 0906 	add.w	r9, r5, r6
    d5d8:	f7ff fd74 	bl	d0c4 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d5dc:	2200      	movs	r2, #0
    d5de:	b998      	cbnz	r0, d608 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d5e0:	8820      	ldrh	r0, [r4, #0]
    d5e2:	2845      	cmp	r0, #69	; 0x45
    d5e4:	d200      	bcs.n	d5e8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d5e6:	2045      	movs	r0, #69	; 0x45
    d5e8:	42b7      	cmp	r7, r6
    d5ea:	d906      	bls.n	d5fa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d5ec:	7f23      	ldrb	r3, [r4, #28]
    d5ee:	1bb9      	subs	r1, r7, r6
    d5f0:	1ac9      	subs	r1, r1, r3
    d5f2:	1f89      	subs	r1, r1, #6
    d5f4:	4281      	cmp	r1, r0
    d5f6:	da00      	bge.n	d5fa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d5f8:	4608      	mov	r0, r1
    d5fa:	89e1      	ldrh	r1, [r4, #14]
    d5fc:	b111      	cbz	r1, d604 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d5fe:	f8b9 3000 	ldrh.w	r3, [r9]
    d602:	1ac0      	subs	r0, r0, r3
    d604:	4540      	cmp	r0, r8
    d606:	da03      	bge.n	d610 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d608:	8262      	strh	r2, [r4, #18]
    d60a:	2000      	movs	r0, #0
    d60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d610:	7f20      	ldrb	r0, [r4, #28]
    d612:	4429      	add	r1, r5
    d614:	1d80      	adds	r0, r0, #6
    d616:	4430      	add	r0, r6
    d618:	4408      	add	r0, r1
    d61a:	f8a4 8012 	strh.w	r8, [r4, #18]
    d61e:	1ec0      	subs	r0, r0, #3
    d620:	e7f4      	b.n	d60c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d622 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d622:	2100      	movs	r1, #0
    d624:	81c1      	strh	r1, [r0, #14]
    d626:	8241      	strh	r1, [r0, #18]
    d628:	7581      	strb	r1, [r0, #22]
    d62a:	4770      	bx	lr

0000d62c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d62c:	b570      	push	{r4, r5, r6, lr}
    d62e:	2300      	movs	r3, #0
    d630:	2908      	cmp	r1, #8
    d632:	d204      	bcs.n	d63e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    d634:	f240 11cb 	movw	r1, #459	; 0x1cb
    d638:	2015      	movs	r0, #21
    d63a:	f7f6 fbad 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d63e:	6802      	ldr	r2, [r0, #0]
    d640:	b90a      	cbnz	r2, d646 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d642:	e01e      	b.n	d682 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d644:	4610      	mov	r0, r2
    d646:	6802      	ldr	r2, [r0, #0]
    d648:	8893      	ldrh	r3, [r2, #4]
    d64a:	428b      	cmp	r3, r1
    d64c:	d002      	beq.n	d654 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    d64e:	6813      	ldr	r3, [r2, #0]
    d650:	2b00      	cmp	r3, #0
    d652:	d1f7      	bne.n	d644 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    d654:	8894      	ldrh	r4, [r2, #4]
    d656:	4613      	mov	r3, r2
    d658:	428c      	cmp	r4, r1
    d65a:	d101      	bne.n	d660 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    d65c:	6811      	ldr	r1, [r2, #0]
    d65e:	e00d      	b.n	d67c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    d660:	f101 0508 	add.w	r5, r1, #8
    d664:	b2ae      	uxth	r6, r5
    d666:	2500      	movs	r5, #0
    d668:	42b4      	cmp	r4, r6
    d66a:	d309      	bcc.n	d680 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    d66c:	1a64      	subs	r4, r4, r1
    d66e:	4411      	add	r1, r2
    d670:	600d      	str	r5, [r1, #0]
    d672:	808c      	strh	r4, [r1, #4]
    d674:	6802      	ldr	r2, [r0, #0]
    d676:	6812      	ldr	r2, [r2, #0]
    d678:	6002      	str	r2, [r0, #0]
    d67a:	600a      	str	r2, [r1, #0]
    d67c:	6001      	str	r1, [r0, #0]
    d67e:	e000      	b.n	d682 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d680:	2300      	movs	r3, #0
    d682:	4618      	mov	r0, r3
    d684:	bd70      	pop	{r4, r5, r6, pc}

0000d686 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d686:	b510      	push	{r4, lr}
    d688:	000c      	movs	r4, r1
    d68a:	d006      	beq.n	d69a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    d68c:	2c08      	cmp	r4, #8
    d68e:	d209      	bcs.n	d6a4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    d690:	f240 1195 	movw	r1, #405	; 0x195
    d694:	2015      	movs	r0, #21
    d696:	f7f6 fb7f 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d69a:	b108      	cbz	r0, d6a0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d69c:	2100      	movs	r1, #0
    d69e:	6001      	str	r1, [r0, #0]
    d6a0:	2000      	movs	r0, #0
    d6a2:	bd10      	pop	{r4, pc}
    d6a4:	b118      	cbz	r0, d6ae <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    d6a6:	b2a1      	uxth	r1, r4
    d6a8:	6800      	ldr	r0, [r0, #0]
    d6aa:	f000 f814 	bl	d6d6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d6ae:	1d20      	adds	r0, r4, #4
    d6b0:	bd10      	pop	{r4, pc}

0000d6b2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d6b2:	2100      	movs	r1, #0
    d6b4:	6802      	ldr	r2, [r0, #0]
    d6b6:	e003      	b.n	d6c0 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d6b8:	8893      	ldrh	r3, [r2, #4]
    d6ba:	6812      	ldr	r2, [r2, #0]
    d6bc:	4419      	add	r1, r3
    d6be:	b289      	uxth	r1, r1
    d6c0:	2a00      	cmp	r2, #0
    d6c2:	d1f9      	bne.n	d6b8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d6c4:	f000 b807 	b.w	d6d6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d6c8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d6c8:	2300      	movs	r3, #0
    d6ca:	600b      	str	r3, [r1, #0]
    d6cc:	808a      	strh	r2, [r1, #4]
    d6ce:	6802      	ldr	r2, [r0, #0]
    d6d0:	600a      	str	r2, [r1, #0]
    d6d2:	6001      	str	r1, [r0, #0]
    d6d4:	4770      	bx	lr
    d6d6:	2300      	movs	r3, #0
    d6d8:	6043      	str	r3, [r0, #4]
    d6da:	1d02      	adds	r2, r0, #4
    d6dc:	8101      	strh	r1, [r0, #8]
    d6de:	6002      	str	r2, [r0, #0]
    d6e0:	4770      	bx	lr

0000d6e2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d6e2:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d6e6:	3aff      	subs	r2, #255	; 0xff
    d6e8:	d000      	beq.n	d6ec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    d6ea:	b109      	cbz	r1, d6f0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    d6ec:	2000      	movs	r0, #0
    d6ee:	4770      	bx	lr
    d6f0:	f7f6 be32 	b.w	4358 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>

0000d6f4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    d6f4:	b570      	push	{r4, r5, r6, lr}
    d6f6:	4605      	mov	r5, r0
    d6f8:	460c      	mov	r4, r1
    d6fa:	4608      	mov	r0, r1
    d6fc:	f000 f84f 	bl	d79e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    d700:	b108      	cbz	r0, d706 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    d702:	2010      	movs	r0, #16
    d704:	bd70      	pop	{r4, r5, r6, pc}
    d706:	b10d      	cbz	r5, d70c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x18>
    d708:	2007      	movs	r0, #7
    d70a:	bd70      	pop	{r4, r5, r6, pc}
    d70c:	7025      	strb	r5, [r4, #0]
    d70e:	2000      	movs	r0, #0
    d710:	8060      	strh	r0, [r4, #2]
    d712:	bd70      	pop	{r4, r5, r6, pc}
    d714:	b510      	push	{r4, lr}
    d716:	4604      	mov	r4, r0
    d718:	f7f6 fe6a 	bl	43f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    d71c:	42a0      	cmp	r0, r4
    d71e:	d901      	bls.n	d724 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x30>
    d720:	2001      	movs	r0, #1
    d722:	bd10      	pop	{r4, pc}
    d724:	2000      	movs	r0, #0
    d726:	bd10      	pop	{r4, pc}
    d728:	4770      	bx	lr

0000d72a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d72a:	b570      	push	{r4, r5, r6, lr}
    d72c:	460e      	mov	r6, r1
    d72e:	461d      	mov	r5, r3
    d730:	4611      	mov	r1, r2
    d732:	f000 f811 	bl	d758 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    d736:	4604      	mov	r4, r0
    d738:	4629      	mov	r1, r5
    d73a:	4630      	mov	r0, r6
    d73c:	f000 f803 	bl	d746 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    d740:	4420      	add	r0, r4
    d742:	1d00      	adds	r0, r0, #4
    d744:	bd70      	pop	{r4, r5, r6, pc}
    d746:	b510      	push	{r4, lr}
    d748:	460a      	mov	r2, r1
    d74a:	2101      	movs	r1, #1
    d74c:	f7ff ff29 	bl	d5a2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d750:	1cc0      	adds	r0, r0, #3
    d752:	f020 0003 	bic.w	r0, r0, #3
    d756:	bd10      	pop	{r4, pc}
    d758:	b510      	push	{r4, lr}
    d75a:	460a      	mov	r2, r1
    d75c:	2101      	movs	r1, #1
    d75e:	f7ff ff20 	bl	d5a2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d762:	1cc0      	adds	r0, r0, #3
    d764:	f020 0003 	bic.w	r0, r0, #3
    d768:	bd10      	pop	{r4, pc}
    d76a:	2800      	cmp	r0, #0
    d76c:	db09      	blt.n	d782 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    d76e:	f000 021f 	and.w	r2, r0, #31
    d772:	2101      	movs	r1, #1
    d774:	4091      	lsls	r1, r2
    d776:	0940      	lsrs	r0, r0, #5
    d778:	0080      	lsls	r0, r0, #2
    d77a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d77e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d782:	4770      	bx	lr

0000d784 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d784:	f7f6 bffa 	b.w	477c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000d788 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    d788:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d78c:	2000      	movs	r0, #0
    d78e:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d792:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d796:	2001      	movs	r0, #1
    d798:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d79c:	4770      	bx	lr

0000d79e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    d79e:	b108      	cbz	r0, d7a4 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    d7a0:	2000      	movs	r0, #0
    d7a2:	4770      	bx	lr
    d7a4:	2001      	movs	r0, #1
    d7a6:	4770      	bx	lr

0000d7a8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d7a8:	f7f7 b92e 	b.w	4a08 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d7ac <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d7ac:	f7f7 b91c 	b.w	49e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d7b0 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d7b0:	b510      	push	{r4, lr}
    d7b2:	2900      	cmp	r1, #0
    d7b4:	4604      	mov	r4, r0
    d7b6:	f04f 0106 	mov.w	r1, #6
    d7ba:	d002      	beq.n	d7c2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d7bc:	f7f6 fb7a 	bl	3eb4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d7c0:	e001      	b.n	d7c6 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d7c2:	f7f6 fb93 	bl	3eec <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d7c6:	7960      	ldrb	r0, [r4, #5]
    d7c8:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d7cc:	7160      	strb	r0, [r4, #5]
    d7ce:	bd10      	pop	{r4, pc}

0000d7d0 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d7d0:	4770      	bx	lr

0000d7d2 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d7d2:	b530      	push	{r4, r5, lr}
    d7d4:	460c      	mov	r4, r1
    d7d6:	4605      	mov	r5, r0
    d7d8:	b08d      	sub	sp, #52	; 0x34
    d7da:	f04f 0103 	mov.w	r1, #3
    d7de:	f104 0003 	add.w	r0, r4, #3
    d7e2:	b112      	cbz	r2, d7ea <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d7e4:	f7f6 fb66 	bl	3eb4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d7e8:	e001      	b.n	d7ee <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d7ea:	f7f6 fb7f 	bl	3eec <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d7ee:	7960      	ldrb	r0, [r4, #5]
    d7f0:	220d      	movs	r2, #13
    d7f2:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d7f6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d7fa:	7160      	strb	r0, [r4, #5]
    d7fc:	2100      	movs	r1, #0
    d7fe:	a804      	add	r0, sp, #16
    d800:	f7fe ff4c 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d804:	78e0      	ldrb	r0, [r4, #3]
    d806:	f88d 001f 	strb.w	r0, [sp, #31]
    d80a:	7920      	ldrb	r0, [r4, #4]
    d80c:	f88d 001e 	strb.w	r0, [sp, #30]
    d810:	7960      	ldrb	r0, [r4, #5]
    d812:	f88d 001d 	strb.w	r0, [sp, #29]
    d816:	2210      	movs	r2, #16
    d818:	4629      	mov	r1, r5
    d81a:	4668      	mov	r0, sp
    d81c:	f7fe fec4 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d820:	4668      	mov	r0, sp
    d822:	f7ff ffaf 	bl	d784 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d826:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d82a:	7020      	strb	r0, [r4, #0]
    d82c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d830:	7060      	strb	r0, [r4, #1]
    d832:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d836:	70a0      	strb	r0, [r4, #2]
    d838:	b00d      	add	sp, #52	; 0x34
    d83a:	bd30      	pop	{r4, r5, pc}

0000d83c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    d83c:	b530      	push	{r4, r5, lr}
    d83e:	b08d      	sub	sp, #52	; 0x34
    d840:	460c      	mov	r4, r1
    d842:	4605      	mov	r5, r0
    d844:	220d      	movs	r2, #13
    d846:	2100      	movs	r1, #0
    d848:	a804      	add	r0, sp, #16
    d84a:	f7fe ff27 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d84e:	78e0      	ldrb	r0, [r4, #3]
    d850:	f88d 001f 	strb.w	r0, [sp, #31]
    d854:	7920      	ldrb	r0, [r4, #4]
    d856:	f88d 001e 	strb.w	r0, [sp, #30]
    d85a:	7960      	ldrb	r0, [r4, #5]
    d85c:	f88d 001d 	strb.w	r0, [sp, #29]
    d860:	2210      	movs	r2, #16
    d862:	4629      	mov	r1, r5
    d864:	4668      	mov	r0, sp
    d866:	f7fe fe9f 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d86a:	4668      	mov	r0, sp
    d86c:	f7ff ff8a 	bl	d784 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d870:	7820      	ldrb	r0, [r4, #0]
    d872:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    d876:	4288      	cmp	r0, r1
    d878:	d10c      	bne.n	d894 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d87a:	7860      	ldrb	r0, [r4, #1]
    d87c:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    d880:	4288      	cmp	r0, r1
    d882:	d107      	bne.n	d894 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d884:	78a0      	ldrb	r0, [r4, #2]
    d886:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    d88a:	4288      	cmp	r0, r1
    d88c:	d102      	bne.n	d894 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d88e:	2001      	movs	r0, #1
    d890:	b00d      	add	sp, #52	; 0x34
    d892:	bd30      	pop	{r4, r5, pc}
    d894:	2000      	movs	r0, #0
    d896:	e7fb      	b.n	d890 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000d898 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d898:	f7f7 bc84 	b.w	51a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    d89c:	b510      	push	{r4, lr}
    d89e:	2801      	cmp	r0, #1
    d8a0:	d008      	beq.n	d8b4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    d8a2:	2802      	cmp	r0, #2
    d8a4:	d004      	beq.n	d8b0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    d8a6:	f240 319a 	movw	r1, #922	; 0x39a
    d8aa:	2006      	movs	r0, #6
    d8ac:	f7f6 fa74 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8b0:	2001      	movs	r0, #1
    d8b2:	bd10      	pop	{r4, pc}
    d8b4:	2000      	movs	r0, #0
    d8b6:	bd10      	pop	{r4, pc}
    d8b8:	2900      	cmp	r1, #0
    d8ba:	d004      	beq.n	d8c6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    d8bc:	2801      	cmp	r0, #1
    d8be:	d003      	beq.n	d8c8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d8c0:	2901      	cmp	r1, #1
    d8c2:	d001      	beq.n	d8c8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d8c4:	2002      	movs	r0, #2
    d8c6:	4770      	bx	lr
    d8c8:	2001      	movs	r0, #1
    d8ca:	4770      	bx	lr
    d8cc:	f7ff bdb6 	b.w	d43c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d8d0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d8d0:	2101      	movs	r1, #1
    d8d2:	f7f8 b87b 	b.w	59cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d8d6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d8d6:	b510      	push	{r4, lr}
    d8d8:	f001 ff4c 	bl	f774 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d8dc:	b118      	cbz	r0, d8e6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d8de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d8e2:	f7fd bc33 	b.w	b14c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d8e6:	20ff      	movs	r0, #255	; 0xff
    d8e8:	bd10      	pop	{r4, pc}

0000d8ea <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d8ea:	b510      	push	{r4, lr}
    d8ec:	f7f8 f8b6 	bl	5a5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d8f0:	2810      	cmp	r0, #16
    d8f2:	d003      	beq.n	d8fc <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d8f4:	f7f8 f882 	bl	59fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d8f8:	2810      	cmp	r0, #16
    d8fa:	d100      	bne.n	d8fe <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d8fc:	2008      	movs	r0, #8
    d8fe:	bd10      	pop	{r4, pc}

0000d900 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    d900:	b510      	push	{r4, lr}
    d902:	f7f8 f8ab 	bl	5a5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d906:	2810      	cmp	r0, #16
    d908:	d007      	beq.n	d91a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d90a:	f7f8 f877 	bl	59fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d90e:	2810      	cmp	r0, #16
    d910:	d003      	beq.n	d91a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d912:	f7f8 f8eb 	bl	5aec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    d916:	2001      	movs	r0, #1
    d918:	bd10      	pop	{r4, pc}
    d91a:	2000      	movs	r0, #0
    d91c:	bd10      	pop	{r4, pc}

0000d91e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d91e:	b510      	push	{r4, lr}
    d920:	f7f8 f89c 	bl	5a5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d924:	2810      	cmp	r0, #16
    d926:	d003      	beq.n	d930 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d928:	f7f8 f928 	bl	5b7c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    d92c:	2001      	movs	r0, #1
    d92e:	bd10      	pop	{r4, pc}
    d930:	2000      	movs	r0, #0
    d932:	bd10      	pop	{r4, pc}

0000d934 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d934:	b570      	push	{r4, r5, r6, lr}
    d936:	460e      	mov	r6, r1
    d938:	b08c      	sub	sp, #48	; 0x30
    d93a:	4614      	mov	r4, r2
    d93c:	4601      	mov	r1, r0
    d93e:	461d      	mov	r5, r3
    d940:	2210      	movs	r2, #16
    d942:	4668      	mov	r0, sp
    d944:	f000 f9a0 	bl	dc88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d948:	2210      	movs	r2, #16
    d94a:	4631      	mov	r1, r6
    d94c:	a804      	add	r0, sp, #16
    d94e:	f000 f99b 	bl	dc88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d952:	4668      	mov	r0, sp
    d954:	f7ff ff16 	bl	d784 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d958:	a908      	add	r1, sp, #32
    d95a:	f04f 0210 	mov.w	r2, #16
    d95e:	4628      	mov	r0, r5
    d960:	b11c      	cbz	r4, d96a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d962:	f000 f991 	bl	dc88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d966:	b00c      	add	sp, #48	; 0x30
    d968:	bd70      	pop	{r4, r5, r6, pc}
    d96a:	f7fe fe1d 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d96e:	e7fa      	b.n	d966 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    d970:	0781      	lsls	r1, r0, #30
    d972:	d501      	bpl.n	d978 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    d974:	2002      	movs	r0, #2
    d976:	4770      	bx	lr
    d978:	07c0      	lsls	r0, r0, #31
    d97a:	d0fc      	beq.n	d976 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    d97c:	2001      	movs	r0, #1
    d97e:	4770      	bx	lr

0000d980 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    d980:	b530      	push	{r4, r5, lr}
    d982:	7901      	ldrb	r1, [r0, #4]
    d984:	0949      	lsrs	r1, r1, #5
    d986:	d128      	bne.n	d9da <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x5a>
    d988:	2200      	movs	r2, #0
    d98a:	4611      	mov	r1, r2
    d98c:	5c44      	ldrb	r4, [r0, r1]
    d98e:	1c49      	adds	r1, r1, #1
    d990:	f004 0301 	and.w	r3, r4, #1
    d994:	0864      	lsrs	r4, r4, #1
    d996:	f004 0501 	and.w	r5, r4, #1
    d99a:	442b      	add	r3, r5
    d99c:	0864      	lsrs	r4, r4, #1
    d99e:	f004 0501 	and.w	r5, r4, #1
    d9a2:	441d      	add	r5, r3
    d9a4:	0863      	lsrs	r3, r4, #1
    d9a6:	f003 0401 	and.w	r4, r3, #1
    d9aa:	442c      	add	r4, r5
    d9ac:	085b      	lsrs	r3, r3, #1
    d9ae:	f003 0501 	and.w	r5, r3, #1
    d9b2:	442c      	add	r4, r5
    d9b4:	085b      	lsrs	r3, r3, #1
    d9b6:	f003 0501 	and.w	r5, r3, #1
    d9ba:	085b      	lsrs	r3, r3, #1
    d9bc:	442c      	add	r4, r5
    d9be:	f003 0501 	and.w	r5, r3, #1
    d9c2:	442c      	add	r4, r5
    d9c4:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    d9c8:	441a      	add	r2, r3
    d9ca:	b2c9      	uxtb	r1, r1
    d9cc:	b2d2      	uxtb	r2, r2
    d9ce:	2905      	cmp	r1, #5
    d9d0:	d3dc      	bcc.n	d98c <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xc>
    d9d2:	2a01      	cmp	r2, #1
    d9d4:	d901      	bls.n	d9da <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x5a>
    d9d6:	2001      	movs	r0, #1
    d9d8:	bd30      	pop	{r4, r5, pc}
    d9da:	2000      	movs	r0, #0
    d9dc:	bd30      	pop	{r4, r5, pc}

0000d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d9de:	b510      	push	{r4, lr}
    d9e0:	460c      	mov	r4, r1
    d9e2:	2100      	movs	r1, #0
    d9e4:	f7ff fe7d 	bl	d6e2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d9e8:	6060      	str	r0, [r4, #4]
    d9ea:	b110      	cbz	r0, d9f2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    d9ec:	2000      	movs	r0, #0
    d9ee:	7020      	strb	r0, [r4, #0]
    d9f0:	bd10      	pop	{r4, pc}
    d9f2:	2002      	movs	r0, #2
    d9f4:	bd10      	pop	{r4, pc}

0000d9f6 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d9f6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d9fa:	4348      	muls	r0, r1
    d9fc:	4770      	bx	lr

0000d9fe <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d9fe:	f240 41e2 	movw	r1, #1250	; 0x4e2
    da02:	fbb0 f0f1 	udiv	r0, r0, r1
    da06:	b280      	uxth	r0, r0
    da08:	4770      	bx	lr

0000da0a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    da0a:	b570      	push	{r4, r5, r6, lr}
    da0c:	4604      	mov	r4, r0
    da0e:	4290      	cmp	r0, r2
    da10:	d20b      	bcs.n	da2a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    da12:	1b10      	subs	r0, r2, r4
    da14:	2864      	cmp	r0, #100	; 0x64
    da16:	d200      	bcs.n	da1a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    da18:	2064      	movs	r0, #100	; 0x64
    da1a:	1825      	adds	r5, r4, r0
    da1c:	428d      	cmp	r5, r1
    da1e:	d803      	bhi.n	da28 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    da20:	2104      	movs	r1, #4
    da22:	f7f3 fccf 	bl	13c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    da26:	b108      	cbz	r0, da2c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    da28:	4620      	mov	r0, r4
    da2a:	bd70      	pop	{r4, r5, r6, pc}
    da2c:	4628      	mov	r0, r5
    da2e:	bd70      	pop	{r4, r5, r6, pc}

0000da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    da30:	b510      	push	{r4, lr}
    da32:	f1a2 030f 	sub.w	r3, r2, #15
    da36:	290c      	cmp	r1, #12
    da38:	d24f      	bcs.n	dada <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da3a:	e8df f001 	tbb	[pc, r1]
    da3e:	0806      	.short	0x0806
    da40:	1815120d 	.word	0x1815120d
    da44:	4c322f27 	.word	0x4c322f27
    da48:	3d35      	.short	0x3d35
    da4a:	b3a2      	cbz	r2, dab6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x86>
    da4c:	e045      	b.n	dada <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da4e:	2a07      	cmp	r2, #7
    da50:	d045      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da52:	2a08      	cmp	r2, #8
    da54:	d043      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da56:	e040      	b.n	dada <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da58:	2a0c      	cmp	r2, #12
    da5a:	d040      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da5c:	2a0b      	cmp	r2, #11
    da5e:	d03e      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da60:	e03b      	b.n	dada <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da62:	2a0d      	cmp	r2, #13
    da64:	d03b      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da66:	e038      	b.n	dada <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da68:	2b0c      	cmp	r3, #12
    da6a:	d938      	bls.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da6c:	e035      	b.n	dada <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da6e:	2a12      	cmp	r2, #18
    da70:	d035      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da72:	2a11      	cmp	r2, #17
    da74:	d033      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da76:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    da7a:	b120      	cbz	r0, da86 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x56>
    da7c:	2a12      	cmp	r2, #18
    da7e:	d32c      	bcc.n	dada <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da80:	2a1a      	cmp	r2, #26
    da82:	d92c      	bls.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da84:	e029      	b.n	dada <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da86:	2a16      	cmp	r2, #22
    da88:	d2fa      	bcs.n	da80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x50>
    da8a:	e026      	b.n	dada <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da8c:	2b03      	cmp	r3, #3
    da8e:	d926      	bls.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da90:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    da94:	b308      	cbz	r0, dada <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da96:	2a1b      	cmp	r2, #27
    da98:	d921      	bls.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da9a:	e01e      	b.n	dada <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da9c:	2a04      	cmp	r2, #4
    da9e:	d01e      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    daa0:	e01b      	b.n	dada <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    daa2:	2a01      	cmp	r2, #1
    daa4:	d01b      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    daa6:	e018      	b.n	dada <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    daa8:	2a1c      	cmp	r2, #28
    daaa:	d018      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    daac:	2a1d      	cmp	r2, #29
    daae:	d016      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dab0:	2a1e      	cmp	r2, #30
    dab2:	d014      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dab4:	e011      	b.n	dada <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dab6:	e012      	b.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dab8:	2a1f      	cmp	r2, #31
    daba:	d010      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dabc:	2a20      	cmp	r2, #32
    dabe:	d00e      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dac0:	2a21      	cmp	r2, #33	; 0x21
    dac2:	d00c      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dac4:	2a22      	cmp	r2, #34	; 0x22
    dac6:	d00a      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dac8:	2a23      	cmp	r2, #35	; 0x23
    daca:	d008      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dacc:	2a24      	cmp	r2, #36	; 0x24
    dace:	d006      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dad0:	2a26      	cmp	r2, #38	; 0x26
    dad2:	d004      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dad4:	e001      	b.n	dada <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dad6:	2a05      	cmp	r2, #5
    dad8:	d001      	beq.n	dade <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dada:	2000      	movs	r0, #0
    dadc:	bd10      	pop	{r4, pc}
    dade:	2001      	movs	r0, #1
    dae0:	bd10      	pop	{r4, pc}

0000dae2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    dae2:	280c      	cmp	r0, #12
    dae4:	d013      	beq.n	db0e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dae6:	280b      	cmp	r0, #11
    dae8:	d011      	beq.n	db0e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    daea:	280d      	cmp	r0, #13
    daec:	d00f      	beq.n	db0e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    daee:	281f      	cmp	r0, #31
    daf0:	d00d      	beq.n	db0e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    daf2:	2820      	cmp	r0, #32
    daf4:	d00b      	beq.n	db0e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    daf6:	2821      	cmp	r0, #33	; 0x21
    daf8:	d009      	beq.n	db0e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dafa:	2822      	cmp	r0, #34	; 0x22
    dafc:	d007      	beq.n	db0e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dafe:	2823      	cmp	r0, #35	; 0x23
    db00:	d005      	beq.n	db0e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    db02:	2824      	cmp	r0, #36	; 0x24
    db04:	d003      	beq.n	db0e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    db06:	2826      	cmp	r0, #38	; 0x26
    db08:	d001      	beq.n	db0e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    db0a:	2000      	movs	r0, #0
    db0c:	4770      	bx	lr
    db0e:	2001      	movs	r0, #1
    db10:	4770      	bx	lr

0000db12 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    db12:	f011 0f0c 	tst.w	r1, #12
    db16:	d016      	beq.n	db46 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    db18:	074a      	lsls	r2, r1, #29
    db1a:	f44f 7116 	mov.w	r1, #600	; 0x258
    db1e:	2a00      	cmp	r2, #0
    db20:	da02      	bge.n	db28 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    db22:	f04f 0210 	mov.w	r2, #16
    db26:	e001      	b.n	db2c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    db28:	f04f 0240 	mov.w	r2, #64	; 0x40
    db2c:	da01      	bge.n	db32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    db2e:	f04f 0196 	mov.w	r1, #150	; 0x96
    db32:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    db36:	eba0 0301 	sub.w	r3, r0, r1
    db3a:	4288      	cmp	r0, r1
    db3c:	d910      	bls.n	db60 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    db3e:	fb93 f0f2 	sdiv	r0, r3, r2
    db42:	b280      	uxth	r0, r0
    db44:	4770      	bx	lr
    db46:	2902      	cmp	r1, #2
    db48:	d002      	beq.n	db50 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    db4a:	2870      	cmp	r0, #112	; 0x70
    db4c:	d80a      	bhi.n	db64 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    db4e:	e007      	b.n	db60 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    db50:	283c      	cmp	r0, #60	; 0x3c
    db52:	d905      	bls.n	db60 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    db54:	383c      	subs	r0, #60	; 0x3c
    db56:	17c1      	asrs	r1, r0, #31
    db58:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    db5c:	1080      	asrs	r0, r0, #2
    db5e:	e7f0      	b.n	db42 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    db60:	2000      	movs	r0, #0
    db62:	e7ee      	b.n	db42 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    db64:	3870      	subs	r0, #112	; 0x70
    db66:	17c1      	asrs	r1, r0, #31
    db68:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    db6c:	10c0      	asrs	r0, r0, #3
    db6e:	e7e8      	b.n	db42 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000db70 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    db70:	6809      	ldr	r1, [r1, #0]
    db72:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    db76:	4770      	bx	lr

0000db78 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    db78:	2801      	cmp	r0, #1
    db7a:	d002      	beq.n	db82 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    db7c:	2802      	cmp	r0, #2
    db7e:	d000      	beq.n	db82 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    db80:	2000      	movs	r0, #0
    db82:	4770      	bx	lr

0000db84 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    db84:	b510      	push	{r4, lr}
    db86:	f640 12c4 	movw	r2, #2500	; 0x9c4
    db8a:	2901      	cmp	r1, #1
    db8c:	d006      	beq.n	db9c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    db8e:	2902      	cmp	r1, #2
    db90:	d005      	beq.n	db9e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    db92:	f240 31c6 	movw	r1, #966	; 0x3c6
    db96:	2029      	movs	r0, #41	; 0x29
    db98:	f7f6 f8fe 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db9c:	b108      	cbz	r0, dba2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    db9e:	4610      	mov	r0, r2
    dba0:	bd10      	pop	{r4, pc}
    dba2:	f240 40e2 	movw	r0, #1250	; 0x4e2
    dba6:	bd10      	pop	{r4, pc}

0000dba8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    dba8:	b530      	push	{r4, r5, lr}
    dbaa:	242a      	movs	r4, #42	; 0x2a
    dbac:	2523      	movs	r5, #35	; 0x23
    dbae:	2a16      	cmp	r2, #22
    dbb0:	d105      	bne.n	dbbe <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x16>
    dbb2:	280c      	cmp	r0, #12
    dbb4:	d007      	beq.n	dbc6 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dbb6:	280d      	cmp	r0, #13
    dbb8:	d005      	beq.n	dbc6 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dbba:	281f      	cmp	r0, #31
    dbbc:	d005      	beq.n	dbca <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    dbbe:	b171      	cbz	r1, dbde <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    dbc0:	2a16      	cmp	r2, #22
    dbc2:	d10c      	bne.n	dbde <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    dbc4:	e004      	b.n	dbd0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x28>
    dbc6:	701c      	strb	r4, [r3, #0]
    dbc8:	e000      	b.n	dbcc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x24>
    dbca:	701d      	strb	r5, [r3, #0]
    dbcc:	2001      	movs	r0, #1
    dbce:	bd30      	pop	{r4, r5, pc}
    dbd0:	7808      	ldrb	r0, [r1, #0]
    dbd2:	2801      	cmp	r0, #1
    dbd4:	d0f7      	beq.n	dbc6 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dbd6:	2800      	cmp	r0, #0
    dbd8:	d0f5      	beq.n	dbc6 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dbda:	2816      	cmp	r0, #22
    dbdc:	d0f5      	beq.n	dbca <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    dbde:	2000      	movs	r0, #0
    dbe0:	bd30      	pop	{r4, r5, pc}

0000dbe2 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    dbe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbe4:	b2cf      	uxtb	r7, r1
    dbe6:	4606      	mov	r6, r0
    dbe8:	f3c1 2407 	ubfx	r4, r1, #8, #8
    dbec:	4621      	mov	r1, r4
    dbee:	4638      	mov	r0, r7
    dbf0:	f000 f8ca 	bl	dd88 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    dbf4:	b2f5      	uxtb	r5, r6
    dbf6:	f3c6 2607 	ubfx	r6, r6, #8, #8
    dbfa:	b920      	cbnz	r0, dc06 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    dbfc:	4631      	mov	r1, r6
    dbfe:	4628      	mov	r0, r5
    dc00:	f000 f8c2 	bl	dd88 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    dc04:	b140      	cbz	r0, dc18 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    dc06:	4027      	ands	r7, r4
    dc08:	4035      	ands	r5, r6
    dc0a:	403d      	ands	r5, r7
    dc0c:	4644      	mov	r4, r8
    dc0e:	f365 0407 	bfi	r4, r5, #0, #8
    dc12:	f365 240f 	bfi	r4, r5, #8, #8
    dc16:	e006      	b.n	dc26 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    dc18:	4025      	ands	r5, r4
    dc1a:	4644      	mov	r4, r8
    dc1c:	f365 0407 	bfi	r4, r5, #0, #8
    dc20:	403e      	ands	r6, r7
    dc22:	f366 240f 	bfi	r4, r6, #8, #8
    dc26:	b2e0      	uxtb	r0, r4
    dc28:	f7ff fea2 	bl	d970 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dc2c:	f88d 0000 	strb.w	r0, [sp]
    dc30:	f3c4 2007 	ubfx	r0, r4, #8, #8
    dc34:	f7ff fe9c 	bl	d970 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dc38:	f88d 0001 	strb.w	r0, [sp, #1]
    dc3c:	f8bd 0000 	ldrh.w	r0, [sp]
    dc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dc42 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    dc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc46:	460c      	mov	r4, r1
    dc48:	4605      	mov	r5, r0
    dc4a:	68c6      	ldr	r6, [r0, #12]
    dc4c:	f7f4 f814 	bl	1c78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dc50:	b198      	cbz	r0, dc7a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    dc52:	b1bc      	cbz	r4, dc84 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dc54:	4630      	mov	r0, r6
    dc56:	68e9      	ldr	r1, [r5, #12]
    dc58:	f7f3 fd02 	bl	1660 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    dc5c:	2800      	cmp	r0, #0
    dc5e:	dd11      	ble.n	dc84 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dc60:	4420      	add	r0, r4
    dc62:	1e40      	subs	r0, r0, #1
    dc64:	fbb0 f7f4 	udiv	r7, r0, r4
    dc68:	fb07 f104 	mul.w	r1, r7, r4
    dc6c:	4630      	mov	r0, r6
    dc6e:	f7f3 fcc5 	bl	15fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    dc72:	60e8      	str	r0, [r5, #12]
    dc74:	4638      	mov	r0, r7
    dc76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc7a:	f240 214b 	movw	r1, #587	; 0x24b
    dc7e:	2029      	movs	r0, #41	; 0x29
    dc80:	f7f6 f88a 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc84:	2000      	movs	r0, #0
    dc86:	e7f6      	b.n	dc76 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000dc88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dc88:	b530      	push	{r4, r5, lr}
    dc8a:	4613      	mov	r3, r2
    dc8c:	e006      	b.n	dc9c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    dc8e:	18cc      	adds	r4, r1, r3
    dc90:	1ad5      	subs	r5, r2, r3
    dc92:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    dc96:	1e5b      	subs	r3, r3, #1
    dc98:	5544      	strb	r4, [r0, r5]
    dc9a:	b2db      	uxtb	r3, r3
    dc9c:	2b00      	cmp	r3, #0
    dc9e:	d1f6      	bne.n	dc8e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dca0:	bd30      	pop	{r4, r5, pc}

0000dca2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    dca2:	b538      	push	{r3, r4, r5, lr}
    dca4:	4605      	mov	r5, r0
    dca6:	460c      	mov	r4, r1
    dca8:	4668      	mov	r0, sp
    dcaa:	f7fd ff53 	bl	bb54 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    dcae:	b310      	cbz	r0, dcf6 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    dcb0:	f99d 0000 	ldrsb.w	r0, [sp]
    dcb4:	7260      	strb	r0, [r4, #9]
    dcb6:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    dcba:	72a1      	strb	r1, [r4, #10]
    dcbc:	f994 100b 	ldrsb.w	r1, [r4, #11]
    dcc0:	2200      	movs	r2, #0
    dcc2:	1a41      	subs	r1, r0, r1
    dcc4:	d500      	bpl.n	dcc8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    dcc6:	4249      	negs	r1, r1
    dcc8:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    dccc:	428b      	cmp	r3, r1
    dcce:	dc10      	bgt.n	dcf2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dcd0:	2bff      	cmp	r3, #255	; 0xff
    dcd2:	d00e      	beq.n	dcf2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dcd4:	7b21      	ldrb	r1, [r4, #12]
    dcd6:	1c49      	adds	r1, r1, #1
    dcd8:	b2c9      	uxtb	r1, r1
    dcda:	7321      	strb	r1, [r4, #12]
    dcdc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    dce0:	4299      	cmp	r1, r3
    dce2:	d802      	bhi.n	dcea <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    dce4:	7ae1      	ldrb	r1, [r4, #11]
    dce6:	297f      	cmp	r1, #127	; 0x7f
    dce8:	d103      	bne.n	dcf2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dcea:	72e0      	strb	r0, [r4, #11]
    dcec:	2000      	movs	r0, #0
    dcee:	7320      	strb	r0, [r4, #12]
    dcf0:	2201      	movs	r2, #1
    dcf2:	4610      	mov	r0, r2
    dcf4:	bd38      	pop	{r3, r4, r5, pc}
    dcf6:	207f      	movs	r0, #127	; 0x7f
    dcf8:	7260      	strb	r0, [r4, #9]
    dcfa:	2000      	movs	r0, #0
    dcfc:	bd38      	pop	{r3, r4, r5, pc}

0000dcfe <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    dcfe:	2300      	movs	r3, #0
    dd00:	6283      	str	r3, [r0, #40]	; 0x28
    dd02:	8602      	strh	r2, [r0, #48]	; 0x30
    dd04:	f240 2371 	movw	r3, #625	; 0x271
    dd08:	435a      	muls	r2, r3
    dd0a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    dd0e:	1e52      	subs	r2, r2, #1
    dd10:	fbb2 f1f1 	udiv	r1, r2, r1
    dd14:	62c1      	str	r1, [r0, #44]	; 0x2c
    dd16:	4770      	bx	lr

0000dd18 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    dd18:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dd1c:	4348      	muls	r0, r1
    dd1e:	4770      	bx	lr

0000dd20 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    dd20:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dd24:	fbb0 f0f1 	udiv	r0, r0, r1
    dd28:	b280      	uxth	r0, r0
    dd2a:	4770      	bx	lr

0000dd2c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    dd2c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dd30:	fb10 f001 	smulbb	r0, r0, r1
    dd34:	4770      	bx	lr

0000dd36 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    dd36:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dd3a:	fbb0 f0f1 	udiv	r0, r0, r1
    dd3e:	b2c0      	uxtb	r0, r0
    dd40:	4770      	bx	lr

0000dd42 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    dd42:	b510      	push	{r4, lr}
    dd44:	2300      	movs	r3, #0
    dd46:	461a      	mov	r2, r3
    dd48:	e003      	b.n	dd52 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    dd4a:	5c84      	ldrb	r4, [r0, r2]
    dd4c:	4323      	orrs	r3, r4
    dd4e:	1c52      	adds	r2, r2, #1
    dd50:	b2d2      	uxtb	r2, r2
    dd52:	428a      	cmp	r2, r1
    dd54:	d3f9      	bcc.n	dd4a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    dd56:	b10b      	cbz	r3, dd5c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    dd58:	2000      	movs	r0, #0
    dd5a:	bd10      	pop	{r4, pc}
    dd5c:	2001      	movs	r0, #1
    dd5e:	bd10      	pop	{r4, pc}
    dd60:	b510      	push	{r4, lr}
    dd62:	4604      	mov	r4, r0
    dd64:	f7fd f96e 	bl	b044 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    dd68:	f644 112b 	movw	r1, #18731	; 0x492b
    dd6c:	4008      	ands	r0, r1
    dd6e:	2101      	movs	r1, #1
    dd70:	7561      	strb	r1, [r4, #21]
    dd72:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    dd76:	0a00      	lsrs	r0, r0, #8
    dd78:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
    dd7c:	20fe      	movs	r0, #254	; 0xfe
    dd7e:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    dd82:	207f      	movs	r0, #127	; 0x7f
    dd84:	7260      	strb	r0, [r4, #9]
    dd86:	bd10      	pop	{r4, pc}
    dd88:	2801      	cmp	r0, #1
    dd8a:	d002      	beq.n	dd92 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x50>
    dd8c:	2802      	cmp	r0, #2
    dd8e:	d003      	beq.n	dd98 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x56>
    dd90:	e004      	b.n	dd9c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    dd92:	2901      	cmp	r1, #1
    dd94:	d004      	beq.n	dda0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    dd96:	e001      	b.n	dd9c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    dd98:	2902      	cmp	r1, #2
    dd9a:	d001      	beq.n	dda0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    dd9c:	2000      	movs	r0, #0
    dd9e:	4770      	bx	lr
    dda0:	2001      	movs	r0, #1
    dda2:	4770      	bx	lr

0000dda4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    dda4:	b510      	push	{r4, lr}
    dda6:	4604      	mov	r4, r0
    dda8:	f890 0020 	ldrb.w	r0, [r0, #32]
    ddac:	b108      	cbz	r0, ddb2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    ddae:	2825      	cmp	r0, #37	; 0x25
    ddb0:	d901      	bls.n	ddb6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    ddb2:	2012      	movs	r0, #18
    ddb4:	bd10      	pop	{r4, pc}
    ddb6:	b12a      	cbz	r2, ddc4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    ddb8:	7d60      	ldrb	r0, [r4, #21]
    ddba:	b128      	cbz	r0, ddc8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    ddbc:	2801      	cmp	r0, #1
    ddbe:	d009      	beq.n	ddd4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    ddc0:	201f      	movs	r0, #31
    ddc2:	bd10      	pop	{r4, pc}
    ddc4:	2000      	movs	r0, #0
    ddc6:	bd10      	pop	{r4, pc}
    ddc8:	4620      	mov	r0, r4
    ddca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ddce:	4611      	mov	r1, r2
    ddd0:	f7f7 bfca 	b.w	5d68 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    ddd4:	88a2      	ldrh	r2, [r4, #4]
    ddd6:	6909      	ldr	r1, [r1, #16]
    ddd8:	f104 0015 	add.w	r0, r4, #21
    dddc:	f7f7 ff70 	bl	5cc0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    dde0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    dde4:	e7ee      	b.n	ddc4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000dde6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    dde6:	b530      	push	{r4, r5, lr}
    dde8:	1c42      	adds	r2, r0, #1
    ddea:	428a      	cmp	r2, r1
    ddec:	d004      	beq.n	ddf8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    ddee:	680a      	ldr	r2, [r1, #0]
    ddf0:	f8c0 2001 	str.w	r2, [r0, #1]
    ddf4:	7909      	ldrb	r1, [r1, #4]
    ddf6:	7141      	strb	r1, [r0, #5]
    ddf8:	7941      	ldrb	r1, [r0, #5]
    ddfa:	f001 011f 	and.w	r1, r1, #31
    ddfe:	7141      	strb	r1, [r0, #5]
    de00:	2100      	movs	r1, #0
    de02:	72c1      	strb	r1, [r0, #11]
    de04:	1843      	adds	r3, r0, r1
    de06:	1c49      	adds	r1, r1, #1
    de08:	785c      	ldrb	r4, [r3, #1]
    de0a:	b2c9      	uxtb	r1, r1
    de0c:	f004 0201 	and.w	r2, r4, #1
    de10:	0864      	lsrs	r4, r4, #1
    de12:	f004 0501 	and.w	r5, r4, #1
    de16:	4415      	add	r5, r2
    de18:	0862      	lsrs	r2, r4, #1
    de1a:	f002 0401 	and.w	r4, r2, #1
    de1e:	442c      	add	r4, r5
    de20:	0852      	lsrs	r2, r2, #1
    de22:	f002 0501 	and.w	r5, r2, #1
    de26:	442c      	add	r4, r5
    de28:	0852      	lsrs	r2, r2, #1
    de2a:	f002 0501 	and.w	r5, r2, #1
    de2e:	442c      	add	r4, r5
    de30:	0852      	lsrs	r2, r2, #1
    de32:	f002 0501 	and.w	r5, r2, #1
    de36:	442c      	add	r4, r5
    de38:	0852      	lsrs	r2, r2, #1
    de3a:	f002 0501 	and.w	r5, r2, #1
    de3e:	442c      	add	r4, r5
    de40:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    de44:	719a      	strb	r2, [r3, #6]
    de46:	7ac3      	ldrb	r3, [r0, #11]
    de48:	2905      	cmp	r1, #5
    de4a:	441a      	add	r2, r3
    de4c:	72c2      	strb	r2, [r0, #11]
    de4e:	d3d9      	bcc.n	de04 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    de50:	bd30      	pop	{r4, r5, pc}

0000de52 <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>:
    de52:	68c0      	ldr	r0, [r0, #12]
    de54:	6008      	str	r0, [r1, #0]
    de56:	4770      	bx	lr

0000de58 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>:
    de58:	6842      	ldr	r2, [r0, #4]
    de5a:	600a      	str	r2, [r1, #0]
    de5c:	6880      	ldr	r0, [r0, #8]
    de5e:	6048      	str	r0, [r1, #4]
    de60:	4770      	bx	lr

0000de62 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    de62:	6842      	ldr	r2, [r0, #4]
    de64:	600a      	str	r2, [r1, #0]
    de66:	6880      	ldr	r0, [r0, #8]
    de68:	6048      	str	r0, [r1, #4]
    de6a:	4770      	bx	lr

0000de6c <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    de6c:	7800      	ldrb	r0, [r0, #0]
    de6e:	f000 0003 	and.w	r0, r0, #3
    de72:	4770      	bx	lr

0000de74 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    de74:	8880      	ldrh	r0, [r0, #4]
    de76:	4770      	bx	lr

0000de78 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    de78:	88c0      	ldrh	r0, [r0, #6]
    de7a:	4770      	bx	lr

0000de7c <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    de7c:	8900      	ldrh	r0, [r0, #8]
    de7e:	4770      	bx	lr

0000de80 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    de80:	8940      	ldrh	r0, [r0, #10]
    de82:	4770      	bx	lr

0000de84 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    de84:	7900      	ldrb	r0, [r0, #4]
    de86:	4770      	bx	lr

0000de88 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    de88:	7900      	ldrb	r0, [r0, #4]
    de8a:	4770      	bx	lr

0000de8c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    de8c:	8901      	ldrh	r1, [r0, #8]
    de8e:	291b      	cmp	r1, #27
    de90:	d30c      	bcc.n	deac <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    de92:	8941      	ldrh	r1, [r0, #10]
    de94:	f44f 72a4 	mov.w	r2, #328	; 0x148
    de98:	4291      	cmp	r1, r2
    de9a:	d307      	bcc.n	deac <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    de9c:	8881      	ldrh	r1, [r0, #4]
    de9e:	291b      	cmp	r1, #27
    dea0:	d304      	bcc.n	deac <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    dea2:	88c0      	ldrh	r0, [r0, #6]
    dea4:	4290      	cmp	r0, r2
    dea6:	d301      	bcc.n	deac <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    dea8:	2001      	movs	r0, #1
    deaa:	4770      	bx	lr
    deac:	2000      	movs	r0, #0
    deae:	4770      	bx	lr

0000deb0 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    deb0:	b510      	push	{r4, lr}
    deb2:	29fb      	cmp	r1, #251	; 0xfb
    deb4:	d904      	bls.n	dec0 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    deb6:	f44f 61af 	mov.w	r1, #1400	; 0x578
    deba:	202a      	movs	r0, #42	; 0x2a
    debc:	f7f5 ff6c 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dec0:	7041      	strb	r1, [r0, #1]
    dec2:	bd10      	pop	{r4, pc}

0000dec4 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    dec4:	7901      	ldrb	r1, [r0, #4]
    dec6:	0749      	lsls	r1, r1, #29
    dec8:	d004      	beq.n	ded4 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    deca:	7940      	ldrb	r0, [r0, #5]
    decc:	0740      	lsls	r0, r0, #29
    dece:	d001      	beq.n	ded4 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    ded0:	2001      	movs	r0, #1
    ded2:	4770      	bx	lr
    ded4:	2000      	movs	r0, #0
    ded6:	4770      	bx	lr

0000ded8 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
    ded8:	7901      	ldrb	r1, [r0, #4]
    deda:	0749      	lsls	r1, r1, #29
    dedc:	d004      	beq.n	dee8 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    dede:	7940      	ldrb	r0, [r0, #5]
    dee0:	0740      	lsls	r0, r0, #29
    dee2:	d001      	beq.n	dee8 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    dee4:	2001      	movs	r0, #1
    dee6:	4770      	bx	lr
    dee8:	2000      	movs	r0, #0
    deea:	4770      	bx	lr

0000deec <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    deec:	7900      	ldrb	r0, [r0, #4]
    deee:	4770      	bx	lr

0000def0 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    def0:	7940      	ldrb	r0, [r0, #5]
    def2:	4770      	bx	lr

0000def4 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    def4:	7101      	strb	r1, [r0, #4]
    def6:	4770      	bx	lr

0000def8 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    def8:	7141      	strb	r1, [r0, #5]
    defa:	4770      	bx	lr

0000defc <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
    defc:	680a      	ldr	r2, [r1, #0]
    defe:	6042      	str	r2, [r0, #4]
    df00:	7909      	ldrb	r1, [r1, #4]
    df02:	7201      	strb	r1, [r0, #8]
    df04:	4770      	bx	lr

0000df06 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
    df06:	72c1      	strb	r1, [r0, #11]
    df08:	0a09      	lsrs	r1, r1, #8
    df0a:	7301      	strb	r1, [r0, #12]
    df0c:	4770      	bx	lr

0000df0e <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
    df0e:	8809      	ldrh	r1, [r1, #0]
    df10:	8181      	strh	r1, [r0, #12]
    df12:	4770      	bx	lr

0000df14 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
    df14:	6809      	ldr	r1, [r1, #0]
    df16:	f8c0 1016 	str.w	r1, [r0, #22]
    df1a:	4770      	bx	lr

0000df1c <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
    df1c:	680a      	ldr	r2, [r1, #0]
    df1e:	6042      	str	r2, [r0, #4]
    df20:	6849      	ldr	r1, [r1, #4]
    df22:	6081      	str	r1, [r0, #8]
    df24:	4770      	bx	lr

0000df26 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
    df26:	680a      	ldr	r2, [r1, #0]
    df28:	f840 2f0e 	str.w	r2, [r0, #14]!
    df2c:	6849      	ldr	r1, [r1, #4]
    df2e:	6041      	str	r1, [r0, #4]
    df30:	4770      	bx	lr

0000df32 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    df32:	680a      	ldr	r2, [r1, #0]
    df34:	6042      	str	r2, [r0, #4]
    df36:	6849      	ldr	r1, [r1, #4]
    df38:	6081      	str	r1, [r0, #8]
    df3a:	4770      	bx	lr

0000df3c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    df3c:	7802      	ldrb	r2, [r0, #0]
    df3e:	f001 0103 	and.w	r1, r1, #3
    df42:	f022 0203 	bic.w	r2, r2, #3
    df46:	430a      	orrs	r2, r1
    df48:	7002      	strb	r2, [r0, #0]
    df4a:	4770      	bx	lr

0000df4c <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
    df4c:	7101      	strb	r1, [r0, #4]
    df4e:	4770      	bx	lr

0000df50 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    df50:	7101      	strb	r1, [r0, #4]
    df52:	0a09      	lsrs	r1, r1, #8
    df54:	7141      	strb	r1, [r0, #5]
    df56:	4770      	bx	lr

0000df58 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    df58:	7181      	strb	r1, [r0, #6]
    df5a:	0a09      	lsrs	r1, r1, #8
    df5c:	71c1      	strb	r1, [r0, #7]
    df5e:	4770      	bx	lr

0000df60 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    df60:	7201      	strb	r1, [r0, #8]
    df62:	0a09      	lsrs	r1, r1, #8
    df64:	7241      	strb	r1, [r0, #9]
    df66:	4770      	bx	lr

0000df68 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    df68:	7281      	strb	r1, [r0, #10]
    df6a:	0a09      	lsrs	r1, r1, #8
    df6c:	72c1      	strb	r1, [r0, #11]
    df6e:	4770      	bx	lr

0000df70 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
    df70:	7181      	strb	r1, [r0, #6]
    df72:	0a09      	lsrs	r1, r1, #8
    df74:	71c1      	strb	r1, [r0, #7]
    df76:	4770      	bx	lr

0000df78 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
    df78:	7141      	strb	r1, [r0, #5]
    df7a:	4770      	bx	lr

0000df7c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    df7c:	7841      	ldrb	r1, [r0, #1]
    df7e:	7800      	ldrb	r0, [r0, #0]
    df80:	f010 000f 	ands.w	r0, r0, #15
    df84:	d005      	beq.n	df92 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    df86:	2801      	cmp	r0, #1
    df88:	d007      	beq.n	df9a <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x1e>
    df8a:	2802      	cmp	r0, #2
    df8c:	d001      	beq.n	df92 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    df8e:	2806      	cmp	r0, #6
    df90:	d105      	bne.n	df9e <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    df92:	1f89      	subs	r1, r1, #6
    df94:	291f      	cmp	r1, #31
    df96:	d904      	bls.n	dfa2 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    df98:	e001      	b.n	df9e <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    df9a:	290c      	cmp	r1, #12
    df9c:	d001      	beq.n	dfa2 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    df9e:	2000      	movs	r0, #0
    dfa0:	4770      	bx	lr
    dfa2:	2001      	movs	r0, #1
    dfa4:	4770      	bx	lr

0000dfa6 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    dfa6:	7800      	ldrb	r0, [r0, #0]
    dfa8:	09c0      	lsrs	r0, r0, #7
    dfaa:	4770      	bx	lr

0000dfac <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
    dfac:	f850 2f03 	ldr.w	r2, [r0, #3]!
    dfb0:	600a      	str	r2, [r1, #0]
    dfb2:	8880      	ldrh	r0, [r0, #4]
    dfb4:	8088      	strh	r0, [r1, #4]
    dfb6:	4770      	bx	lr

0000dfb8 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    dfb8:	7800      	ldrb	r0, [r0, #0]
    dfba:	f3c0 1080 	ubfx	r0, r0, #6, #1
    dfbe:	4770      	bx	lr

0000dfc0 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    dfc0:	7801      	ldrb	r1, [r0, #0]
    dfc2:	f001 010f 	and.w	r1, r1, #15
    dfc6:	2904      	cmp	r1, #4
    dfc8:	d105      	bne.n	dfd6 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    dfca:	7840      	ldrb	r0, [r0, #1]
    dfcc:	1f80      	subs	r0, r0, #6
    dfce:	281f      	cmp	r0, #31
    dfd0:	d801      	bhi.n	dfd6 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    dfd2:	2001      	movs	r0, #1
    dfd4:	4770      	bx	lr
    dfd6:	2000      	movs	r0, #0
    dfd8:	4770      	bx	lr

0000dfda <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    dfda:	b510      	push	{r4, lr}
    dfdc:	7802      	ldrb	r2, [r0, #0]
    dfde:	f001 030f 	and.w	r3, r1, #15
    dfe2:	f022 020f 	bic.w	r2, r2, #15
    dfe6:	431a      	orrs	r2, r3
    dfe8:	7002      	strb	r2, [r0, #0]
    dfea:	2907      	cmp	r1, #7
    dfec:	d20c      	bcs.n	e008 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    dfee:	e8df f001 	tbb	[pc, r1]
    dff2:	0604      	.short	0x0604
    dff4:	08040604 	.word	0x08040604
    dff8:	0004      	.short	0x0004
    dffa:	2106      	movs	r1, #6
    dffc:	e002      	b.n	e004 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    dffe:	210c      	movs	r1, #12
    e000:	e000      	b.n	e004 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e002:	2122      	movs	r1, #34	; 0x22
    e004:	7041      	strb	r1, [r0, #1]
    e006:	bd10      	pop	{r4, pc}
    e008:	216e      	movs	r1, #110	; 0x6e
    e00a:	202a      	movs	r0, #42	; 0x2a
    e00c:	f7f5 fec4 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e010 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    e010:	680a      	ldr	r2, [r1, #0]
    e012:	f840 2f09 	str.w	r2, [r0, #9]!
    e016:	8889      	ldrh	r1, [r1, #4]
    e018:	8081      	strh	r1, [r0, #4]
    e01a:	4770      	bx	lr

0000e01c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    e01c:	7802      	ldrb	r2, [r0, #0]
    e01e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    e022:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e026:	7002      	strb	r2, [r0, #0]
    e028:	4770      	bx	lr

0000e02a <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    e02a:	680a      	ldr	r2, [r1, #0]
    e02c:	f840 2f03 	str.w	r2, [r0, #3]!
    e030:	8889      	ldrh	r1, [r1, #4]
    e032:	8081      	strh	r1, [r0, #4]
    e034:	4770      	bx	lr

0000e036 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    e036:	7802      	ldrb	r2, [r0, #0]
    e038:	2340      	movs	r3, #64	; 0x40
    e03a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e03e:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e042:	430a      	orrs	r2, r1
    e044:	7002      	strb	r2, [r0, #0]
    e046:	4770      	bx	lr

0000e048 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    e048:	2101      	movs	r1, #1
    e04a:	f000 b847 	b.w	e0dc <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    e04e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e052:	460e      	mov	r6, r1
    e054:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    e058:	4617      	mov	r7, r2
    e05a:	39ff      	subs	r1, #255	; 0xff
    e05c:	d014      	beq.n	e088 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x40>
    e05e:	8030      	strh	r0, [r6, #0]
    e060:	2100      	movs	r1, #0
    e062:	7171      	strb	r1, [r6, #5]
    e064:	f7f6 fa96 	bl	4594 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e068:	4604      	mov	r4, r0
    e06a:	f7ff f964 	bl	d336 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e06e:	0005      	movs	r5, r0
    e070:	d00a      	beq.n	e088 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x40>
    e072:	4620      	mov	r0, r4
    e074:	4629      	mov	r1, r5
    e076:	aa01      	add	r2, sp, #4
    e078:	f7ff f98e 	bl	d398 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e07c:	8070      	strh	r0, [r6, #2]
    e07e:	b130      	cbz	r0, e08e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x46>
    e080:	28fb      	cmp	r0, #251	; 0xfb
    e082:	d906      	bls.n	e092 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x4a>
    e084:	21c9      	movs	r1, #201	; 0xc9
    e086:	e026      	b.n	e0d6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    e088:	2000      	movs	r0, #0
    e08a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e08e:	21c8      	movs	r1, #200	; 0xc8
    e090:	e021      	b.n	e0d6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    e092:	9801      	ldr	r0, [sp, #4]
    e094:	f7ff feea 	bl	de6c <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    e098:	2801      	cmp	r0, #1
    e09a:	d003      	beq.n	e0a4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x5c>
    e09c:	2802      	cmp	r0, #2
    e09e:	d001      	beq.n	e0a4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x5c>
    e0a0:	21d8      	movs	r1, #216	; 0xd8
    e0a2:	e018      	b.n	e0d6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    e0a4:	7130      	strb	r0, [r6, #4]
    e0a6:	4629      	mov	r1, r5
    e0a8:	8873      	ldrh	r3, [r6, #2]
    e0aa:	2503      	movs	r5, #3
    e0ac:	4620      	mov	r0, r4
    e0ae:	463a      	mov	r2, r7
    e0b0:	9500      	str	r5, [sp, #0]
    e0b2:	f7ff f817 	bl	d0e4 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    e0b6:	4620      	mov	r0, r4
    e0b8:	60b7      	str	r7, [r6, #8]
    e0ba:	f7ff f8eb 	bl	d294 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e0be:	b138      	cbz	r0, e0d0 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x88>
    e0c0:	2100      	movs	r1, #0
    e0c2:	4620      	mov	r0, r4
    e0c4:	460a      	mov	r2, r1
    e0c6:	f7ff fa45 	bl	d554 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e0ca:	b118      	cbz	r0, e0d4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8c>
    e0cc:	2001      	movs	r0, #1
    e0ce:	e7dc      	b.n	e08a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x42>
    e0d0:	21e8      	movs	r1, #232	; 0xe8
    e0d2:	e000      	b.n	e0d6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    e0d4:	21ed      	movs	r1, #237	; 0xed
    e0d6:	202b      	movs	r0, #43	; 0x2b
    e0d8:	f7f5 fe5e 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0dc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e0e0:	4604      	mov	r4, r0
    e0e2:	460e      	mov	r6, r1
    e0e4:	2000      	movs	r0, #0
    e0e6:	f7f6 f83b 	bl	4160 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e0ea:	4605      	mov	r5, r0
    e0ec:	2000      	movs	r0, #0
    e0ee:	b906      	cbnz	r6, e0f2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xaa>
    e0f0:	2001      	movs	r0, #1
    e0f2:	2600      	movs	r6, #0
    e0f4:	46b0      	mov	r8, r6
    e0f6:	182f      	adds	r7, r5, r0
    e0f8:	e017      	b.n	e12a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xe2>
    e0fa:	8820      	ldrh	r0, [r4, #0]
    e0fc:	1c40      	adds	r0, r0, #1
    e0fe:	b280      	uxth	r0, r0
    e100:	8020      	strh	r0, [r4, #0]
    e102:	42b8      	cmp	r0, r7
    e104:	d302      	bcc.n	e10c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xc4>
    e106:	4640      	mov	r0, r8
    e108:	f8a4 8000 	strh.w	r8, [r4]
    e10c:	b280      	uxth	r0, r0
    e10e:	42a8      	cmp	r0, r5
    e110:	d304      	bcc.n	e11c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd4>
    e112:	42b8      	cmp	r0, r7
    e114:	d202      	bcs.n	e11c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd4>
    e116:	2000      	movs	r0, #0
    e118:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e11c:	4669      	mov	r1, sp
    e11e:	f7ff fc5e 	bl	d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e122:	2800      	cmp	r0, #0
    e124:	d0f8      	beq.n	e118 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd0>
    e126:	1c76      	adds	r6, r6, #1
    e128:	b2f6      	uxtb	r6, r6
    e12a:	42b7      	cmp	r7, r6
    e12c:	d8e5      	bhi.n	e0fa <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xb2>
    e12e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e132:	8020      	strh	r0, [r4, #0]
    e134:	2012      	movs	r0, #18
    e136:	e7ef      	b.n	e118 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd0>

0000e138 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e138:	b570      	push	{r4, r5, r6, lr}
    e13a:	8050      	strh	r0, [r2, #2]
    e13c:	890c      	ldrh	r4, [r1, #8]
    e13e:	8094      	strh	r4, [r2, #4]
    e140:	898b      	ldrh	r3, [r1, #12]
    e142:	80d3      	strh	r3, [r2, #6]
    e144:	8948      	ldrh	r0, [r1, #10]
    e146:	8110      	strh	r0, [r2, #8]
    e148:	89cd      	ldrh	r5, [r1, #14]
    e14a:	8155      	strh	r5, [r2, #10]
    e14c:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    e14e:	42ae      	cmp	r6, r5
    e150:	d108      	bne.n	e164 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e152:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    e154:	4285      	cmp	r5, r0
    e156:	d105      	bne.n	e164 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e158:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    e15a:	429d      	cmp	r5, r3
    e15c:	d102      	bne.n	e164 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e15e:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    e160:	42a3      	cmp	r3, r4
    e162:	d001      	beq.n	e168 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    e164:	2301      	movs	r3, #1
    e166:	e000      	b.n	e16a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e168:	2300      	movs	r3, #0
    e16a:	7313      	strb	r3, [r2, #12]
    e16c:	8548      	strh	r0, [r1, #42]	; 0x2a
    e16e:	8950      	ldrh	r0, [r2, #10]
    e170:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e172:	8890      	ldrh	r0, [r2, #4]
    e174:	8588      	strh	r0, [r1, #44]	; 0x2c
    e176:	88d0      	ldrh	r0, [r2, #6]
    e178:	8608      	strh	r0, [r1, #48]	; 0x30
    e17a:	2001      	movs	r0, #1
    e17c:	7010      	strb	r0, [r2, #0]
    e17e:	bd70      	pop	{r4, r5, r6, pc}

0000e180 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e180:	b510      	push	{r4, lr}
    e182:	888c      	ldrh	r4, [r1, #4]
    e184:	890a      	ldrh	r2, [r1, #8]
    e186:	884b      	ldrh	r3, [r1, #2]
    e188:	88c9      	ldrh	r1, [r1, #6]
    e18a:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e18e:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e192:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e196:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e19a:	bd10      	pop	{r4, pc}

0000e19c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e19c:	b570      	push	{r4, r5, r6, lr}
    e19e:	4615      	mov	r5, r2
    e1a0:	460c      	mov	r4, r1
    e1a2:	f000 f8c7 	bl	e334 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e1a6:	3096      	adds	r0, #150	; 0x96
    e1a8:	4428      	add	r0, r5
    e1aa:	42a0      	cmp	r0, r4
    e1ac:	d801      	bhi.n	e1b2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e1ae:	1a20      	subs	r0, r4, r0
    e1b0:	bd70      	pop	{r4, r5, r6, pc}
    e1b2:	2000      	movs	r0, #0
    e1b4:	bd70      	pop	{r4, r5, r6, pc}

0000e1b6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e1b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1ba:	4604      	mov	r4, r0
    e1bc:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e1be:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e1c0:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e1c4:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e1c8:	4285      	cmp	r5, r0
    e1ca:	d300      	bcc.n	e1ce <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e1cc:	4605      	mov	r5, r0
    e1ce:	4620      	mov	r0, r4
    e1d0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e1d4:	f000 f89e 	bl	e314 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e1d8:	4601      	mov	r1, r0
    e1da:	86e5      	strh	r5, [r4, #54]	; 0x36
    e1dc:	8761      	strh	r1, [r4, #58]	; 0x3a
    e1de:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e1e0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e1e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e1e6:	4680      	mov	r8, r0
    e1e8:	42aa      	cmp	r2, r5
    e1ea:	d200      	bcs.n	e1ee <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e1ec:	462a      	mov	r2, r5
    e1ee:	428b      	cmp	r3, r1
    e1f0:	d200      	bcs.n	e1f4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e1f2:	460b      	mov	r3, r1
    e1f4:	8202      	strh	r2, [r0, #16]
    e1f6:	f8a8 3012 	strh.w	r3, [r8, #18]
    e1fa:	42bd      	cmp	r5, r7
    e1fc:	d101      	bne.n	e202 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e1fe:	42b1      	cmp	r1, r6
    e200:	d001      	beq.n	e206 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e202:	2001      	movs	r0, #1
    e204:	e000      	b.n	e208 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e206:	2000      	movs	r0, #0
    e208:	4681      	mov	r9, r0
    e20a:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e20e:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e212:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e214:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e216:	4285      	cmp	r5, r0
    e218:	d300      	bcc.n	e21c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e21a:	4605      	mov	r5, r0
    e21c:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e220:	4620      	mov	r0, r4
    e222:	f000 f87f 	bl	e324 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e226:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e22a:	2902      	cmp	r1, #2
    e22c:	d108      	bne.n	e240 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e22e:	42af      	cmp	r7, r5
    e230:	d200      	bcs.n	e234 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e232:	463d      	mov	r5, r7
    e234:	4286      	cmp	r6, r0
    e236:	d200      	bcs.n	e23a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e238:	4630      	mov	r0, r6
    e23a:	2100      	movs	r1, #0
    e23c:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e240:	f8a8 5008 	strh.w	r5, [r8, #8]
    e244:	f8a8 000c 	strh.w	r0, [r8, #12]
    e248:	42bd      	cmp	r5, r7
    e24a:	d101      	bne.n	e250 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e24c:	42b0      	cmp	r0, r6
    e24e:	d001      	beq.n	e254 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e250:	2001      	movs	r0, #1
    e252:	e000      	b.n	e256 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e254:	2000      	movs	r0, #0
    e256:	ea40 0009 	orr.w	r0, r0, r9
    e25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e25e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e25e:	6840      	ldr	r0, [r0, #4]
    e260:	4770      	bx	lr

0000e262 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e266:	4616      	mov	r6, r2
    e268:	460f      	mov	r7, r1
    e26a:	4604      	mov	r4, r0
    e26c:	f000 f862 	bl	e334 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e270:	4605      	mov	r5, r0
    e272:	463a      	mov	r2, r7
    e274:	68e1      	ldr	r1, [r4, #12]
    e276:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e278:	f000 f847 	bl	e30a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e27c:	19a9      	adds	r1, r5, r6
    e27e:	4281      	cmp	r1, r0
    e280:	d300      	bcc.n	e284 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e282:	4608      	mov	r0, r1
    e284:	6320      	str	r0, [r4, #48]	; 0x30
    e286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e28a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e28a:	221b      	movs	r2, #27
    e28c:	8402      	strh	r2, [r0, #32]
    e28e:	8382      	strh	r2, [r0, #28]
    e290:	82c2      	strh	r2, [r0, #22]
    e292:	8282      	strh	r2, [r0, #20]
    e294:	8142      	strh	r2, [r0, #10]
    e296:	8202      	strh	r2, [r0, #16]
    e298:	8102      	strh	r2, [r0, #8]
    e29a:	8542      	strh	r2, [r0, #42]	; 0x2a
    e29c:	8582      	strh	r2, [r0, #44]	; 0x2c
    e29e:	8482      	strh	r2, [r0, #36]	; 0x24
    e2a0:	2900      	cmp	r1, #0
    e2a2:	d10a      	bne.n	e2ba <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e2a4:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e2a8:	8441      	strh	r1, [r0, #34]	; 0x22
    e2aa:	83c1      	strh	r1, [r0, #30]
    e2ac:	8341      	strh	r1, [r0, #26]
    e2ae:	8301      	strh	r1, [r0, #24]
    e2b0:	81c1      	strh	r1, [r0, #14]
    e2b2:	8241      	strh	r1, [r0, #18]
    e2b4:	8181      	strh	r1, [r0, #12]
    e2b6:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e2b8:	8601      	strh	r1, [r0, #48]	; 0x30
    e2ba:	4770      	bx	lr

0000e2bc <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e2bc:	6800      	ldr	r0, [r0, #0]
    e2be:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e2c2:	4290      	cmp	r0, r2
    e2c4:	d903      	bls.n	e2ce <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e2c6:	1a40      	subs	r0, r0, r1
    e2c8:	389c      	subs	r0, #156	; 0x9c
    e2ca:	0840      	lsrs	r0, r0, #1
    e2cc:	4770      	bx	lr
    e2ce:	2000      	movs	r0, #0
    e2d0:	4770      	bx	lr

0000e2d2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e2d2:	b510      	push	{r4, lr}
    e2d4:	9c02      	ldr	r4, [sp, #8]
    e2d6:	8281      	strh	r1, [r0, #20]
    e2d8:	82c2      	strh	r2, [r0, #22]
    e2da:	8303      	strh	r3, [r0, #24]
    e2dc:	8344      	strh	r4, [r0, #26]
    e2de:	bd10      	pop	{r4, pc}

0000e2e0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e2e0:	8050      	strh	r0, [r2, #2]
    e2e2:	8a88      	ldrh	r0, [r1, #20]
    e2e4:	8090      	strh	r0, [r2, #4]
    e2e6:	8ac8      	ldrh	r0, [r1, #22]
    e2e8:	80d0      	strh	r0, [r2, #6]
    e2ea:	8b08      	ldrh	r0, [r1, #24]
    e2ec:	8110      	strh	r0, [r2, #8]
    e2ee:	8b48      	ldrh	r0, [r1, #26]
    e2f0:	8150      	strh	r0, [r2, #10]
    e2f2:	2001      	movs	r0, #1
    e2f4:	7010      	strb	r0, [r2, #0]
    e2f6:	4770      	bx	lr
    e2f8:	2902      	cmp	r1, #2
    e2fa:	d003      	beq.n	e304 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    e2fc:	00c0      	lsls	r0, r0, #3
    e2fe:	3070      	adds	r0, #112	; 0x70
    e300:	b280      	uxth	r0, r0
    e302:	4770      	bx	lr
    e304:	0080      	lsls	r0, r0, #2
    e306:	303c      	adds	r0, #60	; 0x3c
    e308:	e7fa      	b.n	e300 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    e30a:	4288      	cmp	r0, r1
    e30c:	d300      	bcc.n	e310 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    e30e:	4608      	mov	r0, r1
    e310:	1a80      	subs	r0, r0, r2
    e312:	4770      	bx	lr
    e314:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e318:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e31c:	4281      	cmp	r1, r0
    e31e:	d200      	bcs.n	e322 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    e320:	4608      	mov	r0, r1
    e322:	4770      	bx	lr
    e324:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e328:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e32c:	4281      	cmp	r1, r0
    e32e:	d200      	bcs.n	e332 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    e330:	4608      	mov	r0, r1
    e332:	4770      	bx	lr
    e334:	2196      	movs	r1, #150	; 0x96
    e336:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e33a:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e33e:	f000 b800 	b.w	e342 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    e342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e346:	460d      	mov	r5, r1
    e348:	4606      	mov	r6, r0
    e34a:	4698      	mov	r8, r3
    e34c:	4617      	mov	r7, r2
    e34e:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e350:	4611      	mov	r1, r2
    e352:	f7ff ffd1 	bl	e2f8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e356:	4604      	mov	r4, r0
    e358:	4639      	mov	r1, r7
    e35a:	4630      	mov	r0, r6
    e35c:	f7ff ffe2 	bl	e324 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e360:	42a0      	cmp	r0, r4
    e362:	d200      	bcs.n	e366 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    e364:	4604      	mov	r4, r0
    e366:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e368:	4641      	mov	r1, r8
    e36a:	f7ff ffc5 	bl	e2f8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e36e:	4607      	mov	r7, r0
    e370:	4641      	mov	r1, r8
    e372:	4630      	mov	r0, r6
    e374:	f7ff ffce 	bl	e314 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e378:	42b8      	cmp	r0, r7
    e37a:	d300      	bcc.n	e37e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    e37c:	4638      	mov	r0, r7
    e37e:	4420      	add	r0, r4
    e380:	4428      	add	r0, r5
    e382:	1d80      	adds	r0, r0, #6
    e384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e388:	2801      	cmp	r0, #1
    e38a:	d102      	bne.n	e392 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    e38c:	7948      	ldrb	r0, [r1, #5]
    e38e:	0980      	lsrs	r0, r0, #6
    e390:	d001      	beq.n	e396 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    e392:	2000      	movs	r0, #0
    e394:	4770      	bx	lr
    e396:	2001      	movs	r0, #1
    e398:	4770      	bx	lr
    e39a:	2801      	cmp	r0, #1
    e39c:	d106      	bne.n	e3ac <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    e39e:	7948      	ldrb	r0, [r1, #5]
    e3a0:	2101      	movs	r1, #1
    e3a2:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e3a6:	d101      	bne.n	e3ac <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    e3a8:	2001      	movs	r0, #1
    e3aa:	4770      	bx	lr
    e3ac:	2000      	movs	r0, #0
    e3ae:	4770      	bx	lr
    e3b0:	b118      	cbz	r0, e3ba <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xda>
    e3b2:	2802      	cmp	r0, #2
    e3b4:	d001      	beq.n	e3ba <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xda>
    e3b6:	2001      	movs	r0, #1
    e3b8:	4770      	bx	lr
    e3ba:	2000      	movs	r0, #0
    e3bc:	4770      	bx	lr
    e3be:	2802      	cmp	r0, #2
    e3c0:	d003      	beq.n	e3ca <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xea>
    e3c2:	2803      	cmp	r0, #3
    e3c4:	d001      	beq.n	e3ca <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xea>
    e3c6:	2000      	movs	r0, #0
    e3c8:	4770      	bx	lr
    e3ca:	2001      	movs	r0, #1
    e3cc:	4770      	bx	lr

0000e3ce <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    e3ce:	f7f9 b86b 	b.w	74a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    e3d2:	b510      	push	{r4, lr}
    e3d4:	f7f8 feb6 	bl	7144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>
    e3d8:	f7f8 fa76 	bl	68c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e3dc:	f7fd f8b4 	bl	b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e3e0:	2005      	movs	r0, #5
    e3e2:	bd10      	pop	{r4, pc}
    e3e4:	b510      	push	{r4, lr}
    e3e6:	f7f8 fead 	bl	7144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>
    e3ea:	f7fd f8ad 	bl	b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e3ee:	2005      	movs	r0, #5
    e3f0:	bd10      	pop	{r4, pc}
    e3f2:	b530      	push	{r4, r5, lr}
    e3f4:	b089      	sub	sp, #36	; 0x24
    e3f6:	4605      	mov	r5, r0
    e3f8:	f7f8 fea4 	bl	7144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>
    e3fc:	7828      	ldrb	r0, [r5, #0]
    e3fe:	4669      	mov	r1, sp
    e400:	f000 040f 	and.w	r4, r0, #15
    e404:	4622      	mov	r2, r4
    e406:	4628      	mov	r0, r5
    e408:	f7f9 fa0c 	bl	7824 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e40c:	2200      	movs	r2, #0
    e40e:	4621      	mov	r1, r4
    e410:	4668      	mov	r0, sp
    e412:	f7f8 fad9 	bl	69c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13c>
    e416:	4602      	mov	r2, r0
    e418:	4621      	mov	r1, r4
    e41a:	4668      	mov	r0, sp
    e41c:	f7f8 fe10 	bl	7040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
    e420:	4604      	mov	r4, r0
    e422:	f7f8 fa51 	bl	68c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e426:	b009      	add	sp, #36	; 0x24
    e428:	4620      	mov	r0, r4
    e42a:	bd30      	pop	{r4, r5, pc}
    e42c:	f240 21c5 	movw	r1, #709	; 0x2c5
    e430:	2032      	movs	r0, #50	; 0x32
    e432:	f7f5 fcb1 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e436:	b510      	push	{r4, lr}
    e438:	f7f8 fe84 	bl	7144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>
    e43c:	f7fd f884 	bl	b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e444:	f7f9 b848 	b.w	74d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d8>
    e448:	f7f9 b82e 	b.w	74a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    e44c:	f7ff b8b6 	b.w	d5bc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>

0000e450 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>:
    e450:	b5f0      	push	{r4, r5, r6, r7, lr}
    e452:	b08b      	sub	sp, #44	; 0x2c
    e454:	4607      	mov	r7, r0
    e456:	f7f6 f8d1 	bl	45fc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e45a:	4604      	mov	r4, r0
    e45c:	f7fe ff6b 	bl	d336 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e460:	0005      	movs	r5, r0
    e462:	d00c      	beq.n	e47e <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x2e>
    e464:	4620      	mov	r0, r4
    e466:	4629      	mov	r1, r5
    e468:	466a      	mov	r2, sp
    e46a:	f7fe ff95 	bl	d398 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e46e:	4606      	mov	r6, r0
    e470:	f7f6 f8be 	bl	45f0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e474:	42b0      	cmp	r0, r6
    e476:	d005      	beq.n	e484 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x34>
    e478:	f44f 7197 	mov.w	r1, #302	; 0x12e
    e47c:	e033      	b.n	e4e6 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x96>
    e47e:	2000      	movs	r0, #0
    e480:	b00b      	add	sp, #44	; 0x2c
    e482:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e484:	a901      	add	r1, sp, #4
    e486:	9800      	ldr	r0, [sp, #0]
    e488:	f000 f8b4 	bl	e5f4 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    e48c:	1d3e      	adds	r6, r7, #4
    e48e:	4628      	mov	r0, r5
    e490:	f7fe fee5 	bl	d25e <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e494:	4605      	mov	r5, r0
    e496:	4601      	mov	r1, r0
    e498:	221c      	movs	r2, #28
    e49a:	4630      	mov	r0, r6
    e49c:	f7fe f884 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e4a0:	7aa8      	ldrb	r0, [r5, #10]
    e4a2:	f04f 0500 	mov.w	r5, #0
    e4a6:	06c1      	lsls	r1, r0, #27
    e4a8:	d50d      	bpl.n	e4c6 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    e4aa:	0740      	lsls	r0, r0, #29
    e4ac:	d40a      	bmi.n	e4c4 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x74>
    e4ae:	f89d 2014 	ldrb.w	r2, [sp, #20]
    e4b2:	f106 001c 	add.w	r0, r6, #28
    e4b6:	9904      	ldr	r1, [sp, #16]
    e4b8:	f7fe f876 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e4bc:	f89d 0014 	ldrb.w	r0, [sp, #20]
    e4c0:	7230      	strb	r0, [r6, #8]
    e4c2:	e000      	b.n	e4c6 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    e4c4:	7235      	strb	r5, [r6, #8]
    e4c6:	707d      	strb	r5, [r7, #1]
    e4c8:	2005      	movs	r0, #5
    e4ca:	7038      	strb	r0, [r7, #0]
    e4cc:	4620      	mov	r0, r4
    e4ce:	f7fe fee1 	bl	d294 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e4d2:	b130      	cbz	r0, e4e2 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x92>
    e4d4:	2100      	movs	r1, #0
    e4d6:	4620      	mov	r0, r4
    e4d8:	460a      	mov	r2, r1
    e4da:	f7ff f83b 	bl	d554 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e4de:	2001      	movs	r0, #1
    e4e0:	e7ce      	b.n	e480 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x30>
    e4e2:	f240 1171 	movw	r1, #369	; 0x171
    e4e6:	2033      	movs	r0, #51	; 0x33
    e4e8:	f7f5 fc56 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e4ec <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    e4ec:	b510      	push	{r4, lr}
    e4ee:	f7f6 f885 	bl	45fc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e4f2:	f000 f874 	bl	e5de <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    e4f6:	4604      	mov	r4, r0
    e4f8:	221c      	movs	r2, #28
    e4fa:	2100      	movs	r1, #0
    e4fc:	f7fe f8ce 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e500:	207f      	movs	r0, #127	; 0x7f
    e502:	76a0      	strb	r0, [r4, #26]
    e504:	21ff      	movs	r1, #255	; 0xff
    e506:	73a1      	strb	r1, [r4, #14]
    e508:	7061      	strb	r1, [r4, #1]
    e50a:	74e1      	strb	r1, [r4, #19]
    e50c:	7aa0      	ldrb	r0, [r4, #10]
    e50e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    e512:	3020      	adds	r0, #32
    e514:	72a0      	strb	r0, [r4, #10]
    e516:	bd10      	pop	{r4, pc}

0000e518 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>:
    e518:	f7ff bfe8 	b.w	e4ec <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>

0000e51c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    e51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e520:	461e      	mov	r6, r3
    e522:	4617      	mov	r7, r2
    e524:	4689      	mov	r9, r1
    e526:	4682      	mov	sl, r0
    e528:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e52c:	f7f6 f866 	bl	45fc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e530:	4604      	mov	r4, r0
    e532:	f7fe fe96 	bl	d262 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e536:	2801      	cmp	r0, #1
    e538:	d034      	beq.n	e5a4 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    e53a:	4620      	mov	r0, r4
    e53c:	f000 f84f 	bl	e5de <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    e540:	4604      	mov	r4, r0
    e542:	221c      	movs	r2, #28
    e544:	2100      	movs	r1, #0
    e546:	f7fe f8a9 	bl	c69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e54a:	2501      	movs	r5, #1
    e54c:	7025      	strb	r5, [r4, #0]
    e54e:	1c63      	adds	r3, r4, #1
    e550:	1ca2      	adds	r2, r4, #2
    e552:	4649      	mov	r1, r9
    e554:	4650      	mov	r0, sl
    e556:	f000 f827 	bl	e5a8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    e55a:	f884 8009 	strb.w	r8, [r4, #9]
    e55e:	7aa0      	ldrb	r0, [r4, #10]
    e560:	21ff      	movs	r1, #255	; 0xff
    e562:	f367 0000 	bfi	r0, r7, #0, #1
    e566:	f040 001a 	orr.w	r0, r0, #26
    e56a:	72a0      	strb	r0, [r4, #10]
    e56c:	7325      	strb	r5, [r4, #12]
    e56e:	2000      	movs	r0, #0
    e570:	7360      	strb	r0, [r4, #13]
    e572:	73a1      	strb	r1, [r4, #14]
    e574:	74e1      	strb	r1, [r4, #19]
    e576:	207f      	movs	r0, #127	; 0x7f
    e578:	76a0      	strb	r0, [r4, #26]
    e57a:	76e6      	strb	r6, [r4, #27]
    e57c:	f7f6 f838 	bl	45f0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e580:	4604      	mov	r4, r0
    e582:	f7f6 f83b 	bl	45fc <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e586:	2201      	movs	r2, #1
    e588:	4621      	mov	r1, r4
    e58a:	f000 f831 	bl	e5f0 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    e58e:	b120      	cbz	r0, e59a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x7e>
    e590:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e594:	2005      	movs	r0, #5
    e596:	f7f9 bb2d 	b.w	7bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    e59a:	f240 21c7 	movw	r1, #711	; 0x2c7
    e59e:	2033      	movs	r0, #51	; 0x33
    e5a0:	f7f5 fbfa 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e5a8:	b510      	push	{r4, lr}
    e5aa:	461c      	mov	r4, r3
    e5ac:	460b      	mov	r3, r1
    e5ae:	29ff      	cmp	r1, #255	; 0xff
    e5b0:	d00d      	beq.n	e5ce <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xb2>
    e5b2:	4621      	mov	r1, r4
    e5b4:	4618      	mov	r0, r3
    e5b6:	f7f7 f8bb 	bl	5730 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    e5ba:	b120      	cbz	r0, e5c6 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xaa>
    e5bc:	7820      	ldrb	r0, [r4, #0]
    e5be:	f040 0002 	orr.w	r0, r0, #2
    e5c2:	7020      	strb	r0, [r4, #0]
    e5c4:	bd10      	pop	{r4, pc}
    e5c6:	2150      	movs	r1, #80	; 0x50
    e5c8:	2033      	movs	r0, #51	; 0x33
    e5ca:	f7f5 fbe5 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5ce:	7c41      	ldrb	r1, [r0, #17]
    e5d0:	7021      	strb	r1, [r4, #0]
    e5d2:	6840      	ldr	r0, [r0, #4]
    e5d4:	6801      	ldr	r1, [r0, #0]
    e5d6:	6011      	str	r1, [r2, #0]
    e5d8:	8880      	ldrh	r0, [r0, #4]
    e5da:	8090      	strh	r0, [r2, #4]
    e5dc:	bd10      	pop	{r4, pc}
    e5de:	b51c      	push	{r2, r3, r4, lr}
    e5e0:	4669      	mov	r1, sp
    e5e2:	aa01      	add	r2, sp, #4
    e5e4:	f7fe feca 	bl	d37c <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    e5e8:	9800      	ldr	r0, [sp, #0]
    e5ea:	f7fe fe38 	bl	d25e <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e5ee:	bd1c      	pop	{r2, r3, r4, pc}
    e5f0:	f7fe bddd 	b.w	d1ae <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000e5f4 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    e5f4:	7802      	ldrb	r2, [r0, #0]
    e5f6:	f002 020f 	and.w	r2, r2, #15
    e5fa:	f7f9 b913 	b.w	7824 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e5fe:	2800      	cmp	r0, #0
    e600:	db04      	blt.n	e60c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x18>
    e602:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e606:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    e60a:	e005      	b.n	e618 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x24>
    e60c:	f000 000f 	and.w	r0, r0, #15
    e610:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e614:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
    e618:	0940      	lsrs	r0, r0, #5
    e61a:	4770      	bx	lr

0000e61c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI>:
    e61c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    e620:	4770      	bx	lr
    e622:	6940      	ldr	r0, [r0, #20]
    e624:	2800      	cmp	r0, #0
    e626:	d000      	beq.n	e62a <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xe>
    e628:	2001      	movs	r0, #1
    e62a:	4770      	bx	lr
    e62c:	b510      	push	{r4, lr}
    e62e:	2808      	cmp	r0, #8
    e630:	d00a      	beq.n	e648 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x2c>
    e632:	2804      	cmp	r0, #4
    e634:	d00a      	beq.n	e64c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x30>
    e636:	2802      	cmp	r0, #2
    e638:	d00a      	beq.n	e650 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x34>
    e63a:	2108      	movs	r1, #8
    e63c:	2801      	cmp	r0, #1
    e63e:	d009      	beq.n	e654 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x38>
    e640:	21d9      	movs	r1, #217	; 0xd9
    e642:	2005      	movs	r0, #5
    e644:	f7f5 fba8 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e648:	2140      	movs	r1, #64	; 0x40
    e64a:	e7f7      	b.n	e63c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    e64c:	2110      	movs	r1, #16
    e64e:	e7f5      	b.n	e63c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    e650:	2104      	movs	r1, #4
    e652:	e7f3      	b.n	e63c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    e654:	222a      	movs	r2, #42	; 0x2a
    e656:	2028      	movs	r0, #40	; 0x28
    e658:	fb11 0002 	smlabb	r0, r1, r2, r0
    e65c:	b280      	uxth	r0, r0
    e65e:	bd10      	pop	{r4, pc}
    e660:	2000      	movs	r0, #0
    e662:	4770      	bx	lr
    e664:	b570      	push	{r4, r5, r6, lr}
    e666:	4604      	mov	r4, r0
    e668:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    e66c:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    e670:	f000 f80c 	bl	e68c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x70>
    e674:	4605      	mov	r5, r0
    e676:	f000 f857 	bl	e728 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    e67a:	4601      	mov	r1, r0
    e67c:	462a      	mov	r2, r5
    e67e:	4620      	mov	r0, r4
    e680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e684:	f7ff bded 	b.w	e262 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e688:	f7f3 b928 	b.w	18dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e68c:	b510      	push	{r4, lr}
    e68e:	4604      	mov	r4, r0
    e690:	4608      	mov	r0, r1
    e692:	f001 f8f1 	bl	f878 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e696:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e69a:	2c02      	cmp	r4, #2
    e69c:	d00a      	beq.n	e6b4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x98>
    e69e:	f640 0234 	movw	r2, #2100	; 0x834
    e6a2:	4410      	add	r0, r2
    e6a4:	f24a 5295 	movw	r2, #42389	; 0xa595
    e6a8:	4410      	add	r0, r2
    e6aa:	fbb0 f0f1 	udiv	r0, r0, r1
    e6ae:	f500 709b 	add.w	r0, r0, #310	; 0x136
    e6b2:	bd10      	pop	{r4, pc}
    e6b4:	460a      	mov	r2, r1
    e6b6:	e7f4      	b.n	e6a2 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x86>
    e6b8:	b510      	push	{r4, lr}
    e6ba:	4604      	mov	r4, r0
    e6bc:	2000      	movs	r0, #0
    e6be:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    e6c2:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    e6c6:	f7f3 fd55 	bl	2174 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e6ca:	b140      	cbz	r0, e6de <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xc2>
    e6cc:	2020      	movs	r0, #32
    e6ce:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    e6d2:	f504 7084 	add.w	r0, r4, #264	; 0x108
    e6d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e6da:	f7fb bf33 	b.w	a544 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    e6de:	f240 5139 	movw	r1, #1337	; 0x539
    e6e2:	2035      	movs	r0, #53	; 0x35
    e6e4:	f7f5 fb58 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e6ea:	4613      	mov	r3, r2
    e6ec:	460a      	mov	r2, r1
    e6ee:	4604      	mov	r4, r0
    e6f0:	4601      	mov	r1, r0
    e6f2:	4668      	mov	r0, sp
    e6f4:	f7f9 fd40 	bl	8178 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x178>
    e6f8:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    e6fc:	4669      	mov	r1, sp
    e6fe:	f7ff ffc3 	bl	e688 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    e702:	2800      	cmp	r0, #0
    e704:	d104      	bne.n	e710 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf4>
    e706:	f640 2139 	movw	r1, #2617	; 0xa39
    e70a:	2035      	movs	r0, #53	; 0x35
    e70c:	f7f5 fb44 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e710:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    e712:	b510      	push	{r4, lr}
    e714:	245b      	movs	r4, #91	; 0x5b
    e716:	f001 f86d 	bl	f7f4 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    e71a:	b910      	cbnz	r0, e722 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x106>
    e71c:	f001 f860 	bl	f7e0 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    e720:	b100      	cbz	r0, e724 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x108>
    e722:	2462      	movs	r4, #98	; 0x62
    e724:	4620      	mov	r0, r4
    e726:	bd10      	pop	{r4, pc}
    e728:	b510      	push	{r4, lr}
    e72a:	f7ff fff2 	bl	e712 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    e72e:	3065      	adds	r0, #101	; 0x65
    e730:	b280      	uxth	r0, r0
    e732:	bd10      	pop	{r4, pc}
    e734:	b510      	push	{r4, lr}
    e736:	f7ff ffec 	bl	e712 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    e73a:	30fb      	adds	r0, #251	; 0xfb
    e73c:	b280      	uxth	r0, r0
    e73e:	bd10      	pop	{r4, pc}
    e740:	b1d0      	cbz	r0, e778 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x15c>
    e742:	2908      	cmp	r1, #8
    e744:	d011      	beq.n	e76a <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x14e>
    e746:	2904      	cmp	r1, #4
    e748:	d00b      	beq.n	e762 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x146>
    e74a:	2000      	movs	r0, #0
    e74c:	2902      	cmp	r1, #2
    e74e:	d010      	beq.n	e772 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x156>
    e750:	2108      	movs	r1, #8
    e752:	3028      	adds	r0, #40	; 0x28
    e754:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
    e758:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    e75c:	4408      	add	r0, r1
    e75e:	3098      	adds	r0, #152	; 0x98
    e760:	4770      	bx	lr
    e762:	f44f 70bf 	mov.w	r0, #382	; 0x17e
    e766:	2110      	movs	r1, #16
    e768:	e7f4      	b.n	e754 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    e76a:	f44f 70c8 	mov.w	r0, #400	; 0x190
    e76e:	2140      	movs	r1, #64	; 0x40
    e770:	e7f0      	b.n	e754 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    e772:	2104      	movs	r1, #4
    e774:	3018      	adds	r0, #24
    e776:	e7ed      	b.n	e754 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    e778:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    e77c:	4770      	bx	lr
    e77e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e782:	f001 0307 	and.w	r3, r1, #7
    e786:	7802      	ldrb	r2, [r0, #0]
    e788:	2101      	movs	r1, #1
    e78a:	4099      	lsls	r1, r3
    e78c:	438a      	bics	r2, r1
    e78e:	7002      	strb	r2, [r0, #0]
    e790:	4770      	bx	lr

0000e792 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    e792:	f7f5 be8b 	b.w	44ac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000e796 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    e796:	2000      	movs	r0, #0
    e798:	4770      	bx	lr

0000e79a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    e79a:	b538      	push	{r3, r4, r5, lr}
    e79c:	460d      	mov	r5, r1
    e79e:	4604      	mov	r4, r0
    e7a0:	e050      	b.n	e844 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa>
    e7a2:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    e7a6:	1c40      	adds	r0, r0, #1
    e7a8:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    e7ac:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    e7b0:	1c40      	adds	r0, r0, #1
    e7b2:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
    e7b6:	4620      	mov	r0, r4
    e7b8:	f000 f8e1 	bl	e97e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    e7bc:	b198      	cbz	r0, e7e6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    e7be:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    e7c2:	1c40      	adds	r0, r0, #1
    e7c4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    e7c8:	4620      	mov	r0, r4
    e7ca:	f000 f86e 	bl	e8aa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    e7ce:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    e7d2:	4288      	cmp	r0, r1
    e7d4:	d307      	bcc.n	e7e6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    e7d6:	2000      	movs	r0, #0
    e7d8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    e7dc:	2001      	movs	r0, #1
    e7de:	f884 018e 	strb.w	r0, [r4, #398]	; 0x18e
    e7e2:	f7fb ff0d 	bl	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e7e6:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    e7ea:	b120      	cbz	r0, e7f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c>
    e7ec:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
    e7f0:	1c40      	adds	r0, r0, #1
    e7f2:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
    e7f6:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    e7fa:	b120      	cbz	r0, e806 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c>
    e7fc:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
    e800:	1c40      	adds	r0, r0, #1
    e802:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    e806:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
    e80a:	f88d 0000 	strb.w	r0, [sp]
    e80e:	9800      	ldr	r0, [sp, #0]
    e810:	9000      	str	r0, [sp, #0]
    e812:	f89d 0000 	ldrb.w	r0, [sp]
    e816:	b940      	cbnz	r0, e82a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90>
    e818:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    e81c:	2300      	movs	r3, #0
    e81e:	2101      	movs	r1, #1
    e820:	f104 0078 	add.w	r0, r4, #120	; 0x78
    e824:	f7ff f904 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e828:	b120      	cbz	r0, e834 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9a>
    e82a:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	; 0xb2
    e82e:	1c40      	adds	r0, r0, #1
    e830:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
    e834:	4620      	mov	r0, r4
    e836:	f000 f847 	bl	e8c8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    e83a:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    e83e:	1c40      	adds	r0, r0, #1
    e840:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    e844:	1e6d      	subs	r5, r5, #1
    e846:	b2ad      	uxth	r5, r5
    e848:	d2ab      	bcs.n	e7a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8>
    e84a:	bd38      	pop	{r3, r4, r5, pc}

0000e84c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    e84c:	b510      	push	{r4, lr}
    e84e:	f7fa fde5 	bl	941c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    e852:	b128      	cbz	r0, e860 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    e854:	2000      	movs	r0, #0
    e856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e85a:	4601      	mov	r1, r0
    e85c:	f7fa bd8a 	b.w	9374 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    e860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e864:	f7f6 bac2 	b.w	4dec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    e868:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    e86c:	28fe      	cmp	r0, #254	; 0xfe
    e86e:	d001      	beq.n	e874 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    e870:	2001      	movs	r0, #1
    e872:	4770      	bx	lr
    e874:	2000      	movs	r0, #0
    e876:	4770      	bx	lr
    e878:	b510      	push	{r4, lr}
    e87a:	2801      	cmp	r0, #1
    e87c:	d006      	beq.n	e88c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    e87e:	2802      	cmp	r0, #2
    e880:	d004      	beq.n	e88c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    e882:	f240 2163 	movw	r1, #611	; 0x263
    e886:	2006      	movs	r0, #6
    e888:	f7f5 fa86 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e88c:	bd10      	pop	{r4, pc}
    e88e:	2801      	cmp	r0, #1
    e890:	d002      	beq.n	e898 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    e892:	2802      	cmp	r0, #2
    e894:	d105      	bne.n	e8a2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    e896:	e002      	b.n	e89e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    e898:	2901      	cmp	r1, #1
    e89a:	d004      	beq.n	e8a6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    e89c:	e001      	b.n	e8a2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    e89e:	2902      	cmp	r1, #2
    e8a0:	d001      	beq.n	e8a6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    e8a2:	2000      	movs	r0, #0
    e8a4:	4770      	bx	lr
    e8a6:	2001      	movs	r0, #1
    e8a8:	4770      	bx	lr
    e8aa:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    e8ae:	428a      	cmp	r2, r1
    e8b0:	d301      	bcc.n	e8b6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    e8b2:	1a51      	subs	r1, r2, r1
    e8b4:	e000      	b.n	e8b8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    e8b6:	2100      	movs	r1, #0
    e8b8:	8a82      	ldrh	r2, [r0, #20]
    e8ba:	1d52      	adds	r2, r2, #5
    e8bc:	428a      	cmp	r2, r1
    e8be:	d302      	bcc.n	e8c6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    e8c0:	2101      	movs	r1, #1
    e8c2:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac
    e8c6:	4770      	bx	lr
    e8c8:	b570      	push	{r4, r5, r6, lr}
    e8ca:	4604      	mov	r4, r0
    e8cc:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    e8d0:	2500      	movs	r5, #0
    e8d2:	2601      	movs	r6, #1
    e8d4:	280c      	cmp	r0, #12
    e8d6:	d02c      	beq.n	e932 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe6>
    e8d8:	280d      	cmp	r0, #13
    e8da:	d129      	bne.n	e930 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    e8dc:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    e8e0:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    e8e4:	1c40      	adds	r0, r0, #1
    e8e6:	4288      	cmp	r0, r1
    e8e8:	d122      	bne.n	e930 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    e8ea:	8820      	ldrh	r0, [r4, #0]
    e8ec:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    e8f0:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    e8f4:	f7ff f883 	bl	d9fe <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    e8f8:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    e8fc:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    e900:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    e904:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    e908:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    e90c:	f884 51c8 	strb.w	r5, [r4, #456]	; 0x1c8
    e910:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    e914:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    e918:	2102      	movs	r1, #2
    e91a:	4620      	mov	r0, r4
    e91c:	f7f7 f93c 	bl	5b98 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    e920:	f7fb fe6e 	bl	a600 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e924:	2103      	movs	r1, #3
    e926:	4620      	mov	r0, r4
    e928:	f7f9 f8fa 	bl	7b20 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    e92c:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    e930:	bd70      	pop	{r4, r5, r6, pc}
    e932:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    e936:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    e93a:	1c40      	adds	r0, r0, #1
    e93c:	4288      	cmp	r0, r1
    e93e:	d1f7      	bne.n	e930 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    e940:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    e944:	f8d0 1001 	ldr.w	r1, [r0, #1]
    e948:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    e94c:	7940      	ldrb	r0, [r0, #5]
    e94e:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    e952:	2103      	movs	r1, #3
    e954:	4620      	mov	r0, r4
    e956:	f7f7 f91f 	bl	5b98 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    e95a:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    e95e:	7800      	ldrb	r0, [r0, #0]
    e960:	b140      	cbz	r0, e974 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x128>
    e962:	2101      	movs	r1, #1
    e964:	20fe      	movs	r0, #254	; 0xfe
    e966:	f7fb fd75 	bl	a454 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    e96a:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    e96e:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    e972:	bd70      	pop	{r4, r5, r6, pc}
    e974:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    e978:	2036      	movs	r0, #54	; 0x36
    e97a:	f7f5 fa0d 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e97e:	b510      	push	{r4, lr}
    e980:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    e984:	b941      	cbnz	r1, e998 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14c>
    e986:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    e98a:	2300      	movs	r3, #0
    e98c:	2106      	movs	r1, #6
    e98e:	3078      	adds	r0, #120	; 0x78
    e990:	f7ff f84e 	bl	da30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e994:	2800      	cmp	r0, #0
    e996:	d000      	beq.n	e99a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
    e998:	2001      	movs	r0, #1
    e99a:	bd10      	pop	{r4, pc}

0000e99c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    e99c:	b510      	push	{r4, lr}
    e99e:	460c      	mov	r4, r1
    e9a0:	4601      	mov	r1, r0
    e9a2:	4610      	mov	r0, r2
    e9a4:	f7f2 fe5c 	bl	1660 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e9a8:	2800      	cmp	r0, #0
    e9aa:	da06      	bge.n	e9ba <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x1e>
    e9ac:	1a21      	subs	r1, r4, r0
    e9ae:	1e49      	subs	r1, r1, #1
    e9b0:	fbb1 f1f4 	udiv	r1, r1, r4
    e9b4:	fb01 0004 	mla	r0, r1, r4, r0
    e9b8:	bd10      	pop	{r4, pc}
    e9ba:	fb90 f1f4 	sdiv	r1, r0, r4
    e9be:	fb01 0014 	mls	r0, r1, r4, r0
    e9c2:	bd10      	pop	{r4, pc}
    e9c4:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e9c8:	f001 0107 	and.w	r1, r1, #7
    e9cc:	7800      	ldrb	r0, [r0, #0]
    e9ce:	2201      	movs	r2, #1
    e9d0:	408a      	lsls	r2, r1
    e9d2:	4010      	ands	r0, r2
    e9d4:	40c8      	lsrs	r0, r1
    e9d6:	4770      	bx	lr
    e9d8:	b118      	cbz	r0, e9e2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    e9da:	2802      	cmp	r0, #2
    e9dc:	d001      	beq.n	e9e2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    e9de:	2001      	movs	r0, #1
    e9e0:	4770      	bx	lr
    e9e2:	2000      	movs	r0, #0
    e9e4:	4770      	bx	lr

0000e9e6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    e9e6:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    e9e8:	7881      	ldrb	r1, [r0, #2]
    e9ea:	4604      	mov	r4, r0
    e9ec:	291a      	cmp	r1, #26
    e9ee:	d025      	beq.n	ea3c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    e9f0:	dc0e      	bgt.n	ea10 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    e9f2:	2916      	cmp	r1, #22
    e9f4:	d22d      	bcs.n	ea52 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e9f6:	e8df f001 	tbb	[pc, r1]
    e9fa:	2c2c      	.short	0x2c2c
    e9fc:	212c2c2c 	.word	0x212c2c2c
    ea00:	2c2c2c2c 	.word	0x2c2c2c2c
    ea04:	2c2c2c2c 	.word	0x2c2c2c2c
    ea08:	2c2c2c2c 	.word	0x2c2c2c2c
    ea0c:	2121212c 	.word	0x2121212c
    ea10:	292a      	cmp	r1, #42	; 0x2a
    ea12:	d01e      	beq.n	ea52 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ea14:	dc0b      	bgt.n	ea2e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    ea16:	f1a1 011e 	sub.w	r1, r1, #30
    ea1a:	290c      	cmp	r1, #12
    ea1c:	d219      	bcs.n	ea52 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ea1e:	e8df f001 	tbb	[pc, r1]
    ea22:	1818      	.short	0x1818
    ea24:	18181818 	.word	0x18181818
    ea28:	18181818 	.word	0x18181818
    ea2c:	0d18      	.short	0x0d18
    ea2e:	393a      	subs	r1, #58	; 0x3a
    ea30:	2904      	cmp	r1, #4
    ea32:	d20e      	bcs.n	ea52 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ea34:	e8df f001 	tbb	[pc, r1]
    ea38:	020d020d 	.word	0x020d020d
    ea3c:	8820      	ldrh	r0, [r4, #0]
    ea3e:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    ea42:	d206      	bcs.n	ea52 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ea44:	2701      	movs	r7, #1
    ea46:	4669      	mov	r1, sp
    ea48:	f7fe ffc9 	bl	d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ea4c:	b118      	cbz	r0, ea56 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ea4e:	2002      	movs	r0, #2
    ea50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ea52:	2012      	movs	r0, #18
    ea54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ea56:	9d01      	ldr	r5, [sp, #4]
    ea58:	4668      	mov	r0, sp
    ea5a:	462e      	mov	r6, r5
    ea5c:	f505 759e 	add.w	r5, r5, #316	; 0x13c
    ea60:	f206 163d 	addw	r6, r6, #317	; 0x13d
    ea64:	f000 fd5e 	bl	f524 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x45e>
    ea68:	b138      	cbz	r0, ea7a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    ea6a:	7828      	ldrb	r0, [r5, #0]
    ea6c:	f88d 0008 	strb.w	r0, [sp, #8]
    ea70:	9802      	ldr	r0, [sp, #8]
    ea72:	9002      	str	r0, [sp, #8]
    ea74:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ea78:	b108      	cbz	r0, ea7e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    ea7a:	200c      	movs	r0, #12
    ea7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ea7e:	702f      	strb	r7, [r5, #0]
    ea80:	78a0      	ldrb	r0, [r4, #2]
    ea82:	7030      	strb	r0, [r6, #0]
    ea84:	2000      	movs	r0, #0
    ea86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000ea88 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    ea88:	b510      	push	{r4, lr}
    ea8a:	4604      	mov	r4, r0
    ea8c:	7800      	ldrb	r0, [r0, #0]
    ea8e:	b118      	cbz	r0, ea98 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    ea90:	2801      	cmp	r0, #1
    ea92:	d001      	beq.n	ea98 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    ea94:	2012      	movs	r0, #18
    ea96:	bd10      	pop	{r4, pc}
    ea98:	f000 fcf8 	bl	f48c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ea9c:	b120      	cbz	r0, eaa8 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    ea9e:	f7f6 fe41 	bl	5724 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    eaa2:	b108      	cbz	r0, eaa8 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    eaa4:	200c      	movs	r0, #12
    eaa6:	bd10      	pop	{r4, pc}
    eaa8:	7820      	ldrb	r0, [r4, #0]
    eaaa:	f7ff ff95 	bl	e9d8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    eaae:	1de2      	adds	r2, r4, #7
    eab0:	f104 0317 	add.w	r3, r4, #23
    eab4:	1c61      	adds	r1, r4, #1
    eab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eaba:	f7f6 be65 	b.w	5788 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000eabe <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    eabe:	b510      	push	{r4, lr}
    eac0:	4604      	mov	r4, r0
    eac2:	f000 fde6 	bl	f692 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    eac6:	b108      	cbz	r0, eacc <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    eac8:	200c      	movs	r0, #12
    eaca:	bd10      	pop	{r4, pc}
    eacc:	7820      	ldrb	r0, [r4, #0]
    eace:	b118      	cbz	r0, ead8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ead0:	2801      	cmp	r0, #1
    ead2:	d001      	beq.n	ead8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ead4:	2012      	movs	r0, #18
    ead6:	bd10      	pop	{r4, pc}
    ead8:	f7ff ff7e 	bl	e9d8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    eadc:	1c61      	adds	r1, r4, #1
    eade:	f7f6 fef7 	bl	58d0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    eae2:	b108      	cbz	r0, eae8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    eae4:	2000      	movs	r0, #0
    eae6:	bd10      	pop	{r4, pc}
    eae8:	2007      	movs	r0, #7
    eaea:	bd10      	pop	{r4, pc}

0000eaec <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    eaec:	b510      	push	{r4, lr}
    eaee:	f000 fccd 	bl	f48c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    eaf2:	b120      	cbz	r0, eafe <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    eaf4:	f7f6 fe16 	bl	5724 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    eaf8:	b108      	cbz	r0, eafe <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    eafa:	200c      	movs	r0, #12
    eafc:	bd10      	pop	{r4, pc}
    eafe:	f7f6 fe89 	bl	5814 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    eb02:	2000      	movs	r0, #0
    eb04:	bd10      	pop	{r4, pc}

0000eb06 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    eb06:	b510      	push	{r4, lr}
    eb08:	f000 fdc3 	bl	f692 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    eb0c:	b108      	cbz	r0, eb12 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    eb0e:	200c      	movs	r0, #12
    eb10:	bd10      	pop	{r4, pc}
    eb12:	f7f6 ff05 	bl	5920 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    eb16:	2000      	movs	r0, #0
    eb18:	bd10      	pop	{r4, pc}

0000eb1a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    eb1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb1c:	4605      	mov	r5, r0
    eb1e:	f000 fad2 	bl	f0c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    eb22:	2800      	cmp	r0, #0
    eb24:	d112      	bne.n	eb4c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x32>
    eb26:	8828      	ldrh	r0, [r5, #0]
    eb28:	2100      	movs	r1, #0
    eb2a:	f7fe fdda 	bl	d6e2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eb2e:	0004      	movs	r4, r0
    eb30:	d00d      	beq.n	eb4e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    eb32:	f000 fcfa 	bl	f52a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    eb36:	b150      	cbz	r0, eb4e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    eb38:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    eb3c:	f88d 0000 	strb.w	r0, [sp]
    eb40:	9800      	ldr	r0, [sp, #0]
    eb42:	9000      	str	r0, [sp, #0]
    eb44:	f89d 0000 	ldrb.w	r0, [sp]
    eb48:	b118      	cbz	r0, eb52 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    eb4a:	203a      	movs	r0, #58	; 0x3a
    eb4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb4e:	2002      	movs	r0, #2
    eb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb52:	88a8      	ldrh	r0, [r5, #4]
    eb54:	f7fe ff4f 	bl	d9f6 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    eb58:	4606      	mov	r6, r0
    eb5a:	4601      	mov	r1, r0
    eb5c:	2008      	movs	r0, #8
    eb5e:	f7ff f8e5 	bl	dd2c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    eb62:	4601      	mov	r1, r0
    eb64:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    eb68:	4281      	cmp	r1, r0
    eb6a:	d301      	bcc.n	eb70 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x56>
    eb6c:	42b0      	cmp	r0, r6
    eb6e:	d301      	bcc.n	eb74 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x5a>
    eb70:	2012      	movs	r0, #18
    eb72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb74:	4631      	mov	r1, r6
    eb76:	2005      	movs	r0, #5
    eb78:	f7ff f8d8 	bl	dd2c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    eb7c:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
    eb80:	2000      	movs	r0, #0
    eb82:	e9c4 0653 	strd	r0, r6, [r4, #332]	; 0x14c
    eb86:	88e8      	ldrh	r0, [r5, #6]
    eb88:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    eb8c:	8928      	ldrh	r0, [r5, #8]
    eb8e:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    eb92:	f504 74a2 	add.w	r4, r4, #324	; 0x144
    eb96:	2001      	movs	r0, #1
    eb98:	7020      	strb	r0, [r4, #0]
    eb9a:	2000      	movs	r0, #0
    eb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000eb9e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    eb9e:	b510      	push	{r4, lr}
    eba0:	460b      	mov	r3, r1
    eba2:	2201      	movs	r2, #1
    eba4:	f100 0110 	add.w	r1, r0, #16
    eba8:	f7fe fec4 	bl	d934 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    ebac:	2000      	movs	r0, #0
    ebae:	bd10      	pop	{r4, pc}

0000ebb0 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    ebb0:	b510      	push	{r4, lr}
    ebb2:	2108      	movs	r1, #8
    ebb4:	f7f5 f99a 	bl	3eec <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ebb8:	2000      	movs	r0, #0
    ebba:	bd10      	pop	{r4, pc}

0000ebbc <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    ebbc:	b510      	push	{r4, lr}
    ebbe:	4604      	mov	r4, r0
    ebc0:	f000 fcaa 	bl	f518 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    ebc4:	b140      	cbz	r0, ebd8 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    ebc6:	20fb      	movs	r0, #251	; 0xfb
    ebc8:	8020      	strh	r0, [r4, #0]
    ebca:	f640 0148 	movw	r1, #2120	; 0x848
    ebce:	8061      	strh	r1, [r4, #2]
    ebd0:	80a0      	strh	r0, [r4, #4]
    ebd2:	80e1      	strh	r1, [r4, #6]
    ebd4:	2000      	movs	r0, #0
    ebd6:	bd10      	pop	{r4, pc}
    ebd8:	2001      	movs	r0, #1
    ebda:	bd10      	pop	{r4, pc}

0000ebdc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    ebdc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    ebde:	460d      	mov	r5, r1
    ebe0:	4606      	mov	r6, r0
    ebe2:	f7fc fa2f 	bl	b044 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ebe6:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ebea:	b300      	cbz	r0, ec2e <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    ebec:	8830      	ldrh	r0, [r6, #0]
    ebee:	4669      	mov	r1, sp
    ebf0:	f7fe fef5 	bl	d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ebf4:	2800      	cmp	r0, #0
    ebf6:	d119      	bne.n	ec2c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    ebf8:	9c01      	ldr	r4, [sp, #4]
    ebfa:	2700      	movs	r7, #0
    ebfc:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    ec00:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    ec04:	f000 fa94 	bl	f130 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    ec08:	70a8      	strb	r0, [r5, #2]
    ec0a:	7860      	ldrb	r0, [r4, #1]
    ec0c:	f000 fa90 	bl	f130 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    ec10:	70e8      	strb	r0, [r5, #3]
    ec12:	78a0      	ldrb	r0, [r4, #2]
    ec14:	f88d 0008 	strb.w	r0, [sp, #8]
    ec18:	9802      	ldr	r0, [sp, #8]
    ec1a:	9002      	str	r0, [sp, #8]
    ec1c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ec20:	3c6a      	subs	r4, #106	; 0x6a
    ec22:	2800      	cmp	r0, #0
    ec24:	d1ea      	bne.n	ebfc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    ec26:	8830      	ldrh	r0, [r6, #0]
    ec28:	8028      	strh	r0, [r5, #0]
    ec2a:	2000      	movs	r0, #0
    ec2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ec2e:	2001      	movs	r0, #1
    ec30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000ec32 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    ec32:	2108      	movs	r1, #8
    ec34:	7001      	strb	r1, [r0, #0]
    ec36:	2000      	movs	r0, #0
    ec38:	4770      	bx	lr

0000ec3a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    ec3a:	b510      	push	{r4, lr}
    ec3c:	4604      	mov	r4, r0
    ec3e:	20d8      	movs	r0, #216	; 0xd8
    ec40:	7020      	strb	r0, [r4, #0]
    ec42:	f000 fc4a 	bl	f4da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x414>
    ec46:	7060      	strb	r0, [r4, #1]
    ec48:	2000      	movs	r0, #0
    ec4a:	bd10      	pop	{r4, pc}

0000ec4c <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    ec4c:	2108      	movs	r1, #8
    ec4e:	7001      	strb	r1, [r0, #0]
    ec50:	2000      	movs	r0, #0
    ec52:	4770      	bx	lr

0000ec54 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    ec54:	b510      	push	{r4, lr}
    ec56:	4604      	mov	r4, r0
    ec58:	7800      	ldrb	r0, [r0, #0]
    ec5a:	b108      	cbz	r0, ec60 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    ec5c:	2801      	cmp	r0, #1
    ec5e:	d110      	bne.n	ec82 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ec60:	f000 fc14 	bl	f48c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ec64:	b120      	cbz	r0, ec70 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ec66:	f7f6 fd5d 	bl	5724 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ec6a:	b108      	cbz	r0, ec70 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ec6c:	200c      	movs	r0, #12
    ec6e:	bd10      	pop	{r4, pc}
    ec70:	7820      	ldrb	r0, [r4, #0]
    ec72:	f7ff feb1 	bl	e9d8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ec76:	1c61      	adds	r1, r4, #1
    ec78:	f7fe fe42 	bl	d900 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    ec7c:	b108      	cbz	r0, ec82 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ec7e:	2000      	movs	r0, #0
    ec80:	bd10      	pop	{r4, pc}
    ec82:	2012      	movs	r0, #18
    ec84:	bd10      	pop	{r4, pc}

0000ec86 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    ec86:	b510      	push	{r4, lr}
    ec88:	4604      	mov	r4, r0
    ec8a:	f000 fd02 	bl	f692 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    ec8e:	b108      	cbz	r0, ec94 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    ec90:	200c      	movs	r0, #12
    ec92:	bd10      	pop	{r4, pc}
    ec94:	7820      	ldrb	r0, [r4, #0]
    ec96:	b108      	cbz	r0, ec9c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    ec98:	2801      	cmp	r0, #1
    ec9a:	d107      	bne.n	ecac <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ec9c:	f7ff fe9c 	bl	e9d8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    eca0:	1c61      	adds	r1, r4, #1
    eca2:	f7fe fe3c 	bl	d91e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    eca6:	b108      	cbz	r0, ecac <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    eca8:	2000      	movs	r0, #0
    ecaa:	bd10      	pop	{r4, pc}
    ecac:	2012      	movs	r0, #18
    ecae:	bd10      	pop	{r4, pc}

0000ecb0 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    ecb0:	b510      	push	{r4, lr}
    ecb2:	4604      	mov	r4, r0
    ecb4:	f000 fbea 	bl	f48c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ecb8:	b108      	cbz	r0, ecbe <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    ecba:	200c      	movs	r0, #12
    ecbc:	bd10      	pop	{r4, pc}
    ecbe:	7820      	ldrb	r0, [r4, #0]
    ecc0:	f000 0001 	and.w	r0, r0, #1
    ecc4:	f7f6 fd28 	bl	5718 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    ecc8:	2000      	movs	r0, #0
    ecca:	bd10      	pop	{r4, pc}

0000eccc <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    eccc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ecce:	460d      	mov	r5, r1
    ecd0:	4604      	mov	r4, r0
    ecd2:	f000 fc21 	bl	f518 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    ecd6:	b130      	cbz	r0, ece6 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    ecd8:	88a2      	ldrh	r2, [r4, #4]
    ecda:	f244 2090 	movw	r0, #17040	; 0x4290
    ecde:	4282      	cmp	r2, r0
    ece0:	d903      	bls.n	ecea <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    ece2:	2012      	movs	r0, #18
    ece4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ece6:	2001      	movs	r0, #1
    ece8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ecea:	f640 0048 	movw	r0, #2120	; 0x848
    ecee:	4282      	cmp	r2, r0
    ecf0:	d300      	bcc.n	ecf4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    ecf2:	4602      	mov	r2, r0
    ecf4:	8820      	ldrh	r0, [r4, #0]
    ecf6:	f8ad 0000 	strh.w	r0, [sp]
    ecfa:	8860      	ldrh	r0, [r4, #2]
    ecfc:	f8ad 0002 	strh.w	r0, [sp, #2]
    ed00:	f8ad 2004 	strh.w	r2, [sp, #4]
    ed04:	8860      	ldrh	r0, [r4, #2]
    ed06:	f8ad 0006 	strh.w	r0, [sp, #6]
    ed0a:	f8ad 2008 	strh.w	r2, [sp, #8]
    ed0e:	8820      	ldrh	r0, [r4, #0]
    ed10:	8028      	strh	r0, [r5, #0]
    ed12:	4668      	mov	r0, sp
    ed14:	f000 fc28 	bl	f568 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    ed18:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ed1a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    ed1a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ed1c:	4604      	mov	r4, r0
    ed1e:	f7fe fe2f 	bl	d980 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    ed22:	b160      	cbz	r0, ed3e <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x24>
    ed24:	4620      	mov	r0, r4
    ed26:	f7f6 ffbd 	bl	5ca4 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    ed2a:	4669      	mov	r1, sp
    ed2c:	2000      	movs	r0, #0
    ed2e:	f7fe fce1 	bl	d6f4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    ed32:	b150      	cbz	r0, ed4a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x30>
    ed34:	f640 71f7 	movw	r1, #4087	; 0xff7
    ed38:	2039      	movs	r0, #57	; 0x39
    ed3a:	f7f5 f82d 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed3e:	2012      	movs	r0, #18
    ed40:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ed42:	9802      	ldr	r0, [sp, #8]
    ed44:	f880 412e 	strb.w	r4, [r0, #302]	; 0x12e
    ed48:	e000      	b.n	ed4c <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x32>
    ed4a:	2401      	movs	r4, #1
    ed4c:	4668      	mov	r0, sp
    ed4e:	f7f5 fa53 	bl	41f8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ed52:	2800      	cmp	r0, #0
    ed54:	d0f5      	beq.n	ed42 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    ed56:	2000      	movs	r0, #0
    ed58:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ed5a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    ed5a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ed5c:	4604      	mov	r4, r0
    ed5e:	f7fc f971 	bl	b044 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ed62:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ed66:	b1b0      	cbz	r0, ed96 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    ed68:	f10d 0007 	add.w	r0, sp, #7
    ed6c:	9000      	str	r0, [sp, #0]
    ed6e:	7922      	ldrb	r2, [r4, #4]
    ed70:	78e1      	ldrb	r1, [r4, #3]
    ed72:	78a0      	ldrb	r0, [r4, #2]
    ed74:	f10d 0306 	add.w	r3, sp, #6
    ed78:	f000 fc74 	bl	f664 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    ed7c:	2800      	cmp	r0, #0
    ed7e:	d109      	bne.n	ed94 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    ed80:	8820      	ldrh	r0, [r4, #0]
    ed82:	f8ad 0004 	strh.w	r0, [sp, #4]
    ed86:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    ed8a:	f8ad 0008 	strh.w	r0, [sp, #8]
    ed8e:	a801      	add	r0, sp, #4
    ed90:	f000 f8f8 	bl	ef84 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    ed94:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ed96:	2001      	movs	r0, #1
    ed98:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ed9a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    ed9a:	b510      	push	{r4, lr}
    ed9c:	4604      	mov	r4, r0
    ed9e:	f000 fb75 	bl	f48c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    eda2:	b120      	cbz	r0, edae <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    eda4:	f7f6 fcbe 	bl	5724 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    eda8:	b108      	cbz	r0, edae <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    edaa:	200c      	movs	r0, #12
    edac:	bd10      	pop	{r4, pc}
    edae:	7820      	ldrb	r0, [r4, #0]
    edb0:	f7ff fe12 	bl	e9d8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    edb4:	79e2      	ldrb	r2, [r4, #7]
    edb6:	1c61      	adds	r1, r4, #1
    edb8:	f7f6 fc4e 	bl	5658 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    edbc:	b108      	cbz	r0, edc2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    edbe:	2000      	movs	r0, #0
    edc0:	bd10      	pop	{r4, pc}
    edc2:	2002      	movs	r0, #2
    edc4:	bd10      	pop	{r4, pc}

0000edc6 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    edc6:	b510      	push	{r4, lr}
    edc8:	4604      	mov	r4, r0
    edca:	2001      	movs	r0, #1
    edcc:	f000 f9bb 	bl	f146 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    edd0:	b128      	cbz	r0, edde <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    edd2:	4621      	mov	r1, r4
    edd4:	2001      	movs	r0, #1
    edd6:	f7f5 fe3d 	bl	4a54 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    edda:	2000      	movs	r0, #0
    eddc:	bd10      	pop	{r4, pc}
    edde:	200c      	movs	r0, #12
    ede0:	bd10      	pop	{r4, pc}

0000ede2 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    ede2:	b510      	push	{r4, lr}
    ede4:	8800      	ldrh	r0, [r0, #0]
    ede6:	f7f6 fd2b 	bl	5840 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    edea:	b108      	cbz	r0, edf0 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    edec:	2000      	movs	r0, #0
    edee:	bd10      	pop	{r4, pc}
    edf0:	2030      	movs	r0, #48	; 0x30
    edf2:	bd10      	pop	{r4, pc}

0000edf4 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    edf4:	b51c      	push	{r2, r3, r4, lr}
    edf6:	7801      	ldrb	r1, [r0, #0]
    edf8:	f88d 1000 	strb.w	r1, [sp]
    edfc:	7840      	ldrb	r0, [r0, #1]
    edfe:	f88d 0001 	strb.w	r0, [sp, #1]
    ee02:	2000      	movs	r0, #0
    ee04:	f8ad 0002 	strh.w	r0, [sp, #2]
    ee08:	f8ad 0004 	strh.w	r0, [sp, #4]
    ee0c:	4601      	mov	r1, r0
    ee0e:	4668      	mov	r0, sp
    ee10:	f000 f9e4 	bl	f1dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x116>
    ee14:	2800      	cmp	r0, #0
    ee16:	d102      	bne.n	ee1e <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    ee18:	4668      	mov	r0, sp
    ee1a:	f000 f9c3 	bl	f1a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xde>
    ee1e:	bd1c      	pop	{r2, r3, r4, pc}

0000ee20 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    ee20:	b500      	push	{lr}
    ee22:	b087      	sub	sp, #28
    ee24:	7941      	ldrb	r1, [r0, #5]
    ee26:	f88d 1000 	strb.w	r1, [sp]
    ee2a:	7981      	ldrb	r1, [r0, #6]
    ee2c:	f88d 1001 	strb.w	r1, [sp, #1]
    ee30:	2101      	movs	r1, #1
    ee32:	f88d 1002 	strb.w	r1, [sp, #2]
    ee36:	7801      	ldrb	r1, [r0, #0]
    ee38:	f88d 1003 	strb.w	r1, [sp, #3]
    ee3c:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    ee40:	f240 2271 	movw	r2, #625	; 0x271
    ee44:	4351      	muls	r1, r2
    ee46:	9102      	str	r1, [sp, #8]
    ee48:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    ee4c:	4350      	muls	r0, r2
    ee4e:	9004      	str	r0, [sp, #16]
    ee50:	2007      	movs	r0, #7
    ee52:	f88d 0018 	strb.w	r0, [sp, #24]
    ee56:	2000      	movs	r0, #0
    ee58:	f88d 0019 	strb.w	r0, [sp, #25]
    ee5c:	9804      	ldr	r0, [sp, #16]
    ee5e:	f7fb fff7 	bl	ae50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>
    ee62:	b140      	cbz	r0, ee76 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    ee64:	9802      	ldr	r0, [sp, #8]
    ee66:	f7fb ffe7 	bl	ae38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    ee6a:	b120      	cbz	r0, ee76 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    ee6c:	4668      	mov	r0, sp
    ee6e:	f7fb fe61 	bl	ab34 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    ee72:	b007      	add	sp, #28
    ee74:	bd00      	pop	{pc}
    ee76:	2030      	movs	r0, #48	; 0x30
    ee78:	e7fb      	b.n	ee72 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000ee7a <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    ee7a:	b570      	push	{r4, r5, r6, lr}
    ee7c:	4605      	mov	r5, r0
    ee7e:	8800      	ldrh	r0, [r0, #0]
    ee80:	2100      	movs	r1, #0
    ee82:	f7fe fc2e 	bl	d6e2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ee86:	0004      	movs	r4, r0
    ee88:	d007      	beq.n	ee9a <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    ee8a:	f000 fb4e 	bl	f52a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    ee8e:	b120      	cbz	r0, ee9a <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    ee90:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
    ee94:	b118      	cbz	r0, ee9e <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    ee96:	203a      	movs	r0, #58	; 0x3a
    ee98:	bd70      	pop	{r4, r5, r6, pc}
    ee9a:	2002      	movs	r0, #2
    ee9c:	bd70      	pop	{r4, r5, r6, pc}
    ee9e:	2100      	movs	r1, #0
    eea0:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
    eea4:	f7ff fd8e 	bl	e9c4 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    eea8:	2801      	cmp	r0, #1
    eeaa:	d001      	beq.n	eeb0 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    eeac:	201a      	movs	r0, #26
    eeae:	bd70      	pop	{r4, r5, r6, pc}
    eeb0:	f8d5 1002 	ldr.w	r1, [r5, #2]
    eeb4:	f8c4 115b 	str.w	r1, [r4, #347]	; 0x15b
    eeb8:	f8d5 1006 	ldr.w	r1, [r5, #6]
    eebc:	f8c4 115f 	str.w	r1, [r4, #351]	; 0x15f
    eec0:	8969      	ldrh	r1, [r5, #10]
    eec2:	f8a4 1163 	strh.w	r1, [r4, #355]	; 0x163
    eec6:	2210      	movs	r2, #16
    eec8:	f105 010c 	add.w	r1, r5, #12
    eecc:	f204 1065 	addw	r0, r4, #357	; 0x165
    eed0:	f7fd fb6a 	bl	c5a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eed4:	2001      	movs	r0, #1
    eed6:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
    eeda:	2000      	movs	r0, #0
    eedc:	bd70      	pop	{r4, r5, r6, pc}

0000eede <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    eede:	b51c      	push	{r2, r3, r4, lr}
    eee0:	4604      	mov	r4, r0
    eee2:	f000 fb19 	bl	f518 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    eee6:	b178      	cbz	r0, ef08 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    eee8:	8820      	ldrh	r0, [r4, #0]
    eeea:	f8ad 0000 	strh.w	r0, [sp]
    eeee:	8860      	ldrh	r0, [r4, #2]
    eef0:	f8ad 0002 	strh.w	r0, [sp, #2]
    eef4:	8820      	ldrh	r0, [r4, #0]
    eef6:	f8ad 0004 	strh.w	r0, [sp, #4]
    eefa:	8860      	ldrh	r0, [r4, #2]
    eefc:	f8ad 0006 	strh.w	r0, [sp, #6]
    ef00:	4668      	mov	r0, sp
    ef02:	f7fb ffdb 	bl	aebc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>
    ef06:	bd1c      	pop	{r2, r3, r4, pc}
    ef08:	2001      	movs	r0, #1
    ef0a:	bd1c      	pop	{r2, r3, r4, pc}

0000ef0c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    ef0c:	b510      	push	{r4, lr}
    ef0e:	f7f5 fdc5 	bl	4a9c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    ef12:	2000      	movs	r0, #0
    ef14:	bd10      	pop	{r4, pc}

0000ef16 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    ef16:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef18:	460c      	mov	r4, r1
    ef1a:	4605      	mov	r5, r0
    ef1c:	f000 fafc 	bl	f518 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    ef20:	b160      	cbz	r0, ef3c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    ef22:	4669      	mov	r1, sp
    ef24:	4628      	mov	r0, r5
    ef26:	f7fe fd5a 	bl	d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef2a:	2800      	cmp	r0, #0
    ef2c:	d105      	bne.n	ef3a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    ef2e:	2101      	movs	r1, #1
    ef30:	4622      	mov	r2, r4
    ef32:	9801      	ldr	r0, [sp, #4]
    ef34:	f000 fa74 	bl	f420 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    ef38:	2000      	movs	r0, #0
    ef3a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef3c:	2001      	movs	r0, #1
    ef3e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ef40 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    ef40:	b510      	push	{r4, lr}
    ef42:	4604      	mov	r4, r0
    ef44:	2000      	movs	r0, #0
    ef46:	f000 f8fe 	bl	f146 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    ef4a:	b128      	cbz	r0, ef58 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    ef4c:	4621      	mov	r1, r4
    ef4e:	2000      	movs	r0, #0
    ef50:	f7f5 fd80 	bl	4a54 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ef54:	2000      	movs	r0, #0
    ef56:	bd10      	pop	{r4, pc}
    ef58:	200c      	movs	r0, #12
    ef5a:	bd10      	pop	{r4, pc}

0000ef5c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    ef5c:	b510      	push	{r4, lr}
    ef5e:	7800      	ldrb	r0, [r0, #0]
    ef60:	f000 0001 	and.w	r0, r0, #1
    ef64:	f7f8 fd00 	bl	7968 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>
    ef68:	2000      	movs	r0, #0
    ef6a:	bd10      	pop	{r4, pc}

0000ef6c <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    ef6c:	b510      	push	{r4, lr}
    ef6e:	4604      	mov	r4, r0
    ef70:	f000 fad2 	bl	f518 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    ef74:	b120      	cbz	r0, ef80 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    ef76:	4620      	mov	r0, r4
    ef78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef7c:	f000 baf4 	b.w	f568 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    ef80:	2001      	movs	r0, #1
    ef82:	bd10      	pop	{r4, pc}

0000ef84 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    ef84:	b510      	push	{r4, lr}
    ef86:	4604      	mov	r4, r0
    ef88:	8880      	ldrh	r0, [r0, #4]
    ef8a:	b128      	cbz	r0, ef98 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ef8c:	2801      	cmp	r0, #1
    ef8e:	d003      	beq.n	ef98 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ef90:	2802      	cmp	r0, #2
    ef92:	d001      	beq.n	ef98 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ef94:	2012      	movs	r0, #18
    ef96:	bd10      	pop	{r4, pc}
    ef98:	78e0      	ldrb	r0, [r4, #3]
    ef9a:	f000 f8e0 	bl	f15e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    ef9e:	b148      	cbz	r0, efb4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    efa0:	78a0      	ldrb	r0, [r4, #2]
    efa2:	f000 f8dc 	bl	f15e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    efa6:	b128      	cbz	r0, efb4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    efa8:	4620      	mov	r0, r4
    efaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efae:	2101      	movs	r1, #1
    efb0:	f7fb be16 	b.w	abe0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    efb4:	2011      	movs	r0, #17
    efb6:	bd10      	pop	{r4, pc}

0000efb8 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    efb8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    efba:	460c      	mov	r4, r1
    efbc:	4605      	mov	r5, r0
    efbe:	8800      	ldrh	r0, [r0, #0]
    efc0:	4669      	mov	r1, sp
    efc2:	f7fe fd0c 	bl	d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    efc6:	2800      	cmp	r0, #0
    efc8:	d106      	bne.n	efd8 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    efca:	9801      	ldr	r0, [sp, #4]
    efcc:	8829      	ldrh	r1, [r5, #0]
    efce:	8021      	strh	r1, [r4, #0]
    efd0:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
    efd4:	8060      	strh	r0, [r4, #2]
    efd6:	2000      	movs	r0, #0
    efd8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000efda <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    efda:	b510      	push	{r4, lr}
    efdc:	4604      	mov	r4, r0
    efde:	4601      	mov	r1, r0
    efe0:	2000      	movs	r0, #0
    efe2:	f7f5 fd1f 	bl	4a24 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    efe6:	b910      	cbnz	r0, efee <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    efe8:	2000      	movs	r0, #0
    efea:	6020      	str	r0, [r4, #0]
    efec:	80a0      	strh	r0, [r4, #4]
    efee:	2000      	movs	r0, #0
    eff0:	bd10      	pop	{r4, pc}

0000eff2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    eff2:	b51c      	push	{r2, r3, r4, lr}
    eff4:	8800      	ldrh	r0, [r0, #0]
    eff6:	4669      	mov	r1, sp
    eff8:	f7fe fcf1 	bl	d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    effc:	b968      	cbnz	r0, f01a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    effe:	4668      	mov	r0, sp
    f000:	f000 fa90 	bl	f524 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x45e>
    f004:	b148      	cbz	r0, f01a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f006:	9801      	ldr	r0, [sp, #4]
    f008:	2201      	movs	r2, #1
    f00a:	4601      	mov	r1, r0
    f00c:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
    f010:	3078      	adds	r0, #120	; 0x78
    f012:	f501 71ac 	add.w	r1, r1, #344	; 0x158
    f016:	b92b      	cbnz	r3, f024 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    f018:	e001      	b.n	f01e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    f01a:	2002      	movs	r0, #2
    f01c:	bd1c      	pop	{r2, r3, r4, pc}
    f01e:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
    f022:	b10b      	cbz	r3, f028 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x36>
    f024:	203a      	movs	r0, #58	; 0x3a
    f026:	bd1c      	pop	{r2, r3, r4, pc}
    f028:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    f02c:	079b      	lsls	r3, r3, #30
    f02e:	d100      	bne.n	f032 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x40>
    f030:	700a      	strb	r2, [r1, #0]
    f032:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
    f036:	2000      	movs	r0, #0
    f038:	bd1c      	pop	{r2, r3, r4, pc}

0000f03a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    f03a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f03c:	460c      	mov	r4, r1
    f03e:	4605      	mov	r5, r0
    f040:	8800      	ldrh	r0, [r0, #0]
    f042:	4669      	mov	r1, sp
    f044:	f7fe fccb 	bl	d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f048:	b108      	cbz	r0, f04e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    f04a:	2002      	movs	r0, #2
    f04c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f04e:	78a8      	ldrb	r0, [r5, #2]
    f050:	b130      	cbz	r0, f060 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    f052:	f000 fa42 	bl	f4da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x414>
    f056:	70a0      	strb	r0, [r4, #2]
    f058:	8828      	ldrh	r0, [r5, #0]
    f05a:	8020      	strh	r0, [r4, #0]
    f05c:	2000      	movs	r0, #0
    f05e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f060:	9801      	ldr	r0, [sp, #4]
    f062:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    f066:	e7f6      	b.n	f056 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000f068 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    f068:	b510      	push	{r4, lr}
    f06a:	f7fb ff63 	bl	af34 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    f06e:	2000      	movs	r0, #0
    f070:	bd10      	pop	{r4, pc}

0000f072 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    f072:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f076:	4604      	mov	r4, r0
    f078:	8840      	ldrh	r0, [r0, #2]
    f07a:	460d      	mov	r5, r1
    f07c:	b1b8      	cbz	r0, f0ae <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    f07e:	8820      	ldrh	r0, [r4, #0]
    f080:	4669      	mov	r1, sp
    f082:	f7fe fcac 	bl	d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f086:	2800      	cmp	r0, #0
    f088:	d10f      	bne.n	f0aa <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    f08a:	8820      	ldrh	r0, [r4, #0]
    f08c:	8028      	strh	r0, [r5, #0]
    f08e:	9e01      	ldr	r6, [sp, #4]
    f090:	f106 050c 	add.w	r5, r6, #12
    f094:	3678      	adds	r6, #120	; 0x78
    f096:	682f      	ldr	r7, [r5, #0]
    f098:	8862      	ldrh	r2, [r4, #2]
    f09a:	4639      	mov	r1, r7
    f09c:	4630      	mov	r0, r6
    f09e:	f7fe fe2e 	bl	dcfe <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    f0a2:	6828      	ldr	r0, [r5, #0]
    f0a4:	42b8      	cmp	r0, r7
    f0a6:	d1f6      	bne.n	f096 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    f0a8:	2000      	movs	r0, #0
    f0aa:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f0ae:	2012      	movs	r0, #18
    f0b0:	e7fb      	b.n	f0aa <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000f0b2 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    f0b2:	f7fb bdfb 	b.w	acac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000f0b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f0b6:	b510      	push	{r4, lr}
    f0b8:	2008      	movs	r0, #8
    f0ba:	f7fb ffb9 	bl	b030 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0c2:	f7f9 bd51 	b.w	8b68 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

0000f0c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    f0c6:	b510      	push	{r4, lr}
    f0c8:	4604      	mov	r4, r0
    f0ca:	2000      	movs	r0, #0
    f0cc:	8822      	ldrh	r2, [r4, #0]
    f0ce:	b086      	sub	sp, #24
    f0d0:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    f0d4:	39ff      	subs	r1, #255	; 0xff
    f0d6:	d008      	beq.n	f0ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    f0d8:	a903      	add	r1, sp, #12
    f0da:	4610      	mov	r0, r2
    f0dc:	f7fe fc7f 	bl	d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f0e0:	b110      	cbz	r0, f0e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    f0e2:	2002      	movs	r0, #2
    f0e4:	b006      	add	sp, #24
    f0e6:	bd10      	pop	{r4, pc}
    f0e8:	9804      	ldr	r0, [sp, #16]
    f0ea:	8921      	ldrh	r1, [r4, #8]
    f0ec:	89a3      	ldrh	r3, [r4, #12]
    f0ee:	8962      	ldrh	r2, [r4, #10]
    f0f0:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    f0f4:	88e3      	ldrh	r3, [r4, #6]
    f0f6:	88a2      	ldrh	r2, [r4, #4]
    f0f8:	8861      	ldrh	r1, [r4, #2]
    f0fa:	f000 f966 	bl	f3ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    f0fe:	b108      	cbz	r0, f104 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    f100:	2000      	movs	r0, #0
    f102:	e7ef      	b.n	f0e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    f104:	2030      	movs	r0, #48	; 0x30
    f106:	e7ed      	b.n	f0e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    f108:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f10c:	4288      	cmp	r0, r1
    f10e:	d303      	bcc.n	f118 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
    f110:	f640 0148 	movw	r1, #2120	; 0x848
    f114:	4288      	cmp	r0, r1
    f116:	d300      	bcc.n	f11a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
    f118:	4608      	mov	r0, r1
    f11a:	4770      	bx	lr
    f11c:	07c1      	lsls	r1, r0, #31
    f11e:	d001      	beq.n	f124 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
    f120:	2001      	movs	r0, #1
    f122:	4770      	bx	lr
    f124:	0780      	lsls	r0, r0, #30
    f126:	d501      	bpl.n	f12c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
    f128:	2002      	movs	r0, #2
    f12a:	4770      	bx	lr
    f12c:	2000      	movs	r0, #0
    f12e:	4770      	bx	lr
    f130:	b510      	push	{r4, lr}
    f132:	2801      	cmp	r0, #1
    f134:	d006      	beq.n	f144 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    f136:	2802      	cmp	r0, #2
    f138:	d004      	beq.n	f144 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    f13a:	f240 2163 	movw	r1, #611	; 0x263
    f13e:	2006      	movs	r0, #6
    f140:	f7f4 fe2a 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f144:	bd10      	pop	{r4, pc}
    f146:	b510      	push	{r4, lr}
    f148:	f000 fa03 	bl	f552 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f14c:	b128      	cbz	r0, f15a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
    f14e:	f7f7 fb95 	bl	687c <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    f152:	2801      	cmp	r0, #1
    f154:	d001      	beq.n	f15a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
    f156:	2000      	movs	r0, #0
    f158:	bd10      	pop	{r4, pc}
    f15a:	2001      	movs	r0, #1
    f15c:	bd10      	pop	{r4, pc}
    f15e:	b510      	push	{r4, lr}
    f160:	0004      	movs	r4, r0
    f162:	d005      	beq.n	f170 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    f164:	f7fb ff74 	bl	b050 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f168:	4384      	bics	r4, r0
    f16a:	d001      	beq.n	f170 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    f16c:	2000      	movs	r0, #0
    f16e:	bd10      	pop	{r4, pc}
    f170:	2001      	movs	r0, #1
    f172:	bd10      	pop	{r4, pc}
    f174:	28fb      	cmp	r0, #251	; 0xfb
    f176:	d803      	bhi.n	f180 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xba>
    f178:	f640 0048 	movw	r0, #2120	; 0x848
    f17c:	4281      	cmp	r1, r0
    f17e:	d901      	bls.n	f184 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xbe>
    f180:	2011      	movs	r0, #17
    f182:	4770      	bx	lr
    f184:	2000      	movs	r0, #0
    f186:	4770      	bx	lr
    f188:	381b      	subs	r0, #27
    f18a:	28e1      	cmp	r0, #225	; 0xe1
    f18c:	d206      	bcs.n	f19c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
    f18e:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f192:	d303      	bcc.n	f19c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
    f194:	f244 2090 	movw	r0, #17040	; 0x4290
    f198:	4281      	cmp	r1, r0
    f19a:	d901      	bls.n	f1a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xda>
    f19c:	2012      	movs	r0, #18
    f19e:	4770      	bx	lr
    f1a0:	2000      	movs	r0, #0
    f1a2:	4770      	bx	lr
    f1a4:	b510      	push	{r4, lr}
    f1a6:	4604      	mov	r4, r0
    f1a8:	7800      	ldrb	r0, [r0, #0]
    f1aa:	2801      	cmp	r0, #1
    f1ac:	d009      	beq.n	f1c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfc>
    f1ae:	f7f8 fc73 	bl	7a98 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
    f1b2:	2805      	cmp	r0, #5
    f1b4:	d003      	beq.n	f1be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf8>
    f1b6:	f7f8 fc39 	bl	7a2c <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
    f1ba:	2800      	cmp	r0, #0
    f1bc:	d000      	beq.n	f1c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfa>
    f1be:	200c      	movs	r0, #12
    f1c0:	bd10      	pop	{r4, pc}
    f1c2:	f7f7 fae9 	bl	6798 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    f1c6:	b138      	cbz	r0, f1d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x112>
    f1c8:	f7f7 f962 	bl	6490 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    f1cc:	88a1      	ldrh	r1, [r4, #4]
    f1ce:	8860      	ldrh	r0, [r4, #2]
    f1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f1d4:	f7f8 bbee 	b.w	79b4 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA>
    f1d8:	2012      	movs	r0, #18
    f1da:	bd10      	pop	{r4, pc}
    f1dc:	7802      	ldrb	r2, [r0, #0]
    f1de:	2a01      	cmp	r2, #1
    f1e0:	d001      	beq.n	f1e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x120>
    f1e2:	b1ba      	cbz	r2, f214 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f1e4:	e018      	b.n	f218 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f1e6:	7842      	ldrb	r2, [r0, #1]
    f1e8:	b13a      	cbz	r2, f1fa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
    f1ea:	2a01      	cmp	r2, #1
    f1ec:	d005      	beq.n	f1fa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
    f1ee:	2a02      	cmp	r2, #2
    f1f0:	d112      	bne.n	f218 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f1f2:	b189      	cbz	r1, f218 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f1f4:	8881      	ldrh	r1, [r0, #4]
    f1f6:	b179      	cbz	r1, f218 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f1f8:	e000      	b.n	f1fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x136>
    f1fa:	b159      	cbz	r1, f214 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f1fc:	8841      	ldrh	r1, [r0, #2]
    f1fe:	b149      	cbz	r1, f214 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f200:	8880      	ldrh	r0, [r0, #4]
    f202:	b138      	cbz	r0, f214 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f204:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f208:	0049      	lsls	r1, r1, #1
    f20a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f20e:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    f212:	d201      	bcs.n	f218 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f214:	2000      	movs	r0, #0
    f216:	4770      	bx	lr
    f218:	2012      	movs	r0, #18
    f21a:	4770      	bx	lr
    f21c:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    f220:	7a45      	ldrb	r5, [r0, #9]
    f222:	4604      	mov	r4, r0
    f224:	0768      	lsls	r0, r5, #29
    f226:	d06c      	beq.n	f302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f228:	08e8      	lsrs	r0, r5, #3
    f22a:	d16a      	bne.n	f302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f22c:	2d02      	cmp	r5, #2
    f22e:	d068      	beq.n	f302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f230:	f7fb ff0e 	bl	b050 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f234:	ea25 0000 	bic.w	r0, r5, r0
    f238:	0740      	lsls	r0, r0, #29
    f23a:	d102      	bne.n	f242 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17c>
    f23c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    f240:	b110      	cbz	r0, f248 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x182>
    f242:	2011      	movs	r0, #17
    f244:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    f248:	2d01      	cmp	r5, #1
    f24a:	d15a      	bne.n	f302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f24c:	27ff      	movs	r7, #255	; 0xff
    f24e:	2101      	movs	r1, #1
    f250:	69a0      	ldr	r0, [r4, #24]
    f252:	f7fb fe1d 	bl	ae90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
    f256:	b3e8      	cbz	r0, f2d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
    f258:	46a8      	mov	r8, r5
    f25a:	2600      	movs	r6, #0
    f25c:	4635      	mov	r5, r6
    f25e:	42bd      	cmp	r5, r7
    f260:	d02f      	beq.n	f2c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
    f262:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    f266:	6988      	ldr	r0, [r1, #24]
    f268:	68c9      	ldr	r1, [r1, #12]
    f26a:	4288      	cmp	r0, r1
    f26c:	d849      	bhi.n	f302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f26e:	4406      	add	r6, r0
    f270:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    f274:	4681      	mov	r9, r0
    f276:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
    f278:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    f27c:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    f27e:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    f282:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    f284:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    f286:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    f288:	2000      	movs	r0, #0
    f28a:	f000 f89e 	bl	f3ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    f28e:	b308      	cbz	r0, f2d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
    f290:	b1bd      	cbz	r5, f2c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
    f292:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
    f296:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
    f29a:	4281      	cmp	r1, r0
    f29c:	d131      	bne.n	f302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f29e:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
    f2a2:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
    f2a6:	4281      	cmp	r1, r0
    f2a8:	d12b      	bne.n	f302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f2aa:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
    f2ae:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
    f2b2:	4281      	cmp	r1, r0
    f2b4:	d125      	bne.n	f302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f2b6:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
    f2ba:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
    f2be:	4281      	cmp	r1, r0
    f2c0:	d11f      	bne.n	f302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f2c2:	1c6d      	adds	r5, r5, #1
    f2c4:	b2ed      	uxtb	r5, r5
    f2c6:	4545      	cmp	r5, r8
    f2c8:	d3c9      	bcc.n	f25e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x198>
    f2ca:	68e0      	ldr	r0, [r4, #12]
    f2cc:	42b0      	cmp	r0, r6
    f2ce:	d318      	bcc.n	f302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f2d0:	7820      	ldrb	r0, [r4, #0]
    f2d2:	e000      	b.n	f2d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
    f2d4:	e003      	b.n	f2de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x218>
    f2d6:	b120      	cbz	r0, f2e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21c>
    f2d8:	2801      	cmp	r0, #1
    f2da:	d112      	bne.n	f302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f2dc:	e004      	b.n	f2e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
    f2de:	2030      	movs	r0, #48	; 0x30
    f2e0:	e7b0      	b.n	f244 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f2e2:	78a0      	ldrb	r0, [r4, #2]
    f2e4:	2800      	cmp	r0, #0
    f2e6:	d1f7      	bne.n	f2d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x212>
    f2e8:	7860      	ldrb	r0, [r4, #1]
    f2ea:	b128      	cbz	r0, f2f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f2ec:	2801      	cmp	r0, #1
    f2ee:	d003      	beq.n	f2f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f2f0:	2802      	cmp	r0, #2
    f2f2:	d001      	beq.n	f2f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f2f4:	2803      	cmp	r0, #3
    f2f6:	d104      	bne.n	f302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f2f8:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    f2fc:	b108      	cbz	r0, f302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f2fe:	2807      	cmp	r0, #7
    f300:	d901      	bls.n	f306 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
    f302:	2012      	movs	r0, #18
    f304:	e79e      	b.n	f244 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f306:	2000      	movs	r0, #0
    f308:	e79c      	b.n	f244 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f30a:	b570      	push	{r4, r5, r6, lr}
    f30c:	4604      	mov	r4, r0
    f30e:	7800      	ldrb	r0, [r0, #0]
    f310:	2500      	movs	r5, #0
    f312:	2801      	cmp	r0, #1
    f314:	d004      	beq.n	f320 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f316:	b118      	cbz	r0, f320 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f318:	2802      	cmp	r0, #2
    f31a:	d001      	beq.n	f320 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f31c:	2803      	cmp	r0, #3
    f31e:	d139      	bne.n	f394 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f320:	7860      	ldrb	r0, [r4, #1]
    f322:	b128      	cbz	r0, f330 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f324:	2801      	cmp	r0, #1
    f326:	d003      	beq.n	f330 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f328:	2802      	cmp	r0, #2
    f32a:	d001      	beq.n	f330 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f32c:	2803      	cmp	r0, #3
    f32e:	d131      	bne.n	f394 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f330:	7e60      	ldrb	r0, [r4, #25]
    f332:	b948      	cbnz	r0, f348 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
    f334:	78a0      	ldrb	r0, [r4, #2]
    f336:	2801      	cmp	r0, #1
    f338:	d12c      	bne.n	f394 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f33a:	f7fb fe89 	bl	b050 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f33e:	4601      	mov	r1, r0
    f340:	78a0      	ldrb	r0, [r4, #2]
    f342:	ea30 0101 	bics.w	r1, r0, r1
    f346:	d001      	beq.n	f34c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
    f348:	2011      	movs	r0, #17
    f34a:	bd70      	pop	{r4, r5, r6, pc}
    f34c:	07c0      	lsls	r0, r0, #31
    f34e:	d006      	beq.n	f35e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
    f350:	78e0      	ldrb	r0, [r4, #3]
    f352:	2301      	movs	r3, #1
    f354:	6922      	ldr	r2, [r4, #16]
    f356:	68a1      	ldr	r1, [r4, #8]
    f358:	f000 f820 	bl	f39c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f35c:	4605      	mov	r5, r0
    f35e:	78a0      	ldrb	r0, [r4, #2]
    f360:	0780      	lsls	r0, r0, #30
    f362:	d506      	bpl.n	f372 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ac>
    f364:	78e0      	ldrb	r0, [r4, #3]
    f366:	2302      	movs	r3, #2
    f368:	6922      	ldr	r2, [r4, #16]
    f36a:	68a1      	ldr	r1, [r4, #8]
    f36c:	f000 f816 	bl	f39c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f370:	4305      	orrs	r5, r0
    f372:	78a0      	ldrb	r0, [r4, #2]
    f374:	0740      	lsls	r0, r0, #29
    f376:	d506      	bpl.n	f386 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c0>
    f378:	78e0      	ldrb	r0, [r4, #3]
    f37a:	2304      	movs	r3, #4
    f37c:	6922      	ldr	r2, [r4, #16]
    f37e:	68a1      	ldr	r1, [r4, #8]
    f380:	f000 f80c 	bl	f39c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f384:	4305      	orrs	r5, r0
    f386:	b10d      	cbz	r5, f38c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
    f388:	4628      	mov	r0, r5
    f38a:	bd70      	pop	{r4, r5, r6, pc}
    f38c:	7e20      	ldrb	r0, [r4, #24]
    f38e:	b108      	cbz	r0, f394 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f390:	2807      	cmp	r0, #7
    f392:	d901      	bls.n	f398 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
    f394:	2012      	movs	r0, #18
    f396:	bd70      	pop	{r4, r5, r6, pc}
    f398:	2000      	movs	r0, #0
    f39a:	bd70      	pop	{r4, r5, r6, pc}
    f39c:	b570      	push	{r4, r5, r6, lr}
    f39e:	4614      	mov	r4, r2
    f3a0:	460d      	mov	r5, r1
    f3a2:	b108      	cbz	r0, f3a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e2>
    f3a4:	2801      	cmp	r0, #1
    f3a6:	d10a      	bne.n	f3be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f8>
    f3a8:	4619      	mov	r1, r3
    f3aa:	4610      	mov	r0, r2
    f3ac:	f7fb fd70 	bl	ae90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
    f3b0:	b138      	cbz	r0, f3c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
    f3b2:	4628      	mov	r0, r5
    f3b4:	f7fb fd34 	bl	ae20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    f3b8:	b118      	cbz	r0, f3c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
    f3ba:	42ac      	cmp	r4, r5
    f3bc:	d903      	bls.n	f3c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
    f3be:	2012      	movs	r0, #18
    f3c0:	bd70      	pop	{r4, r5, r6, pc}
    f3c2:	2030      	movs	r0, #48	; 0x30
    f3c4:	bd70      	pop	{r4, r5, r6, pc}
    f3c6:	2000      	movs	r0, #0
    f3c8:	bd70      	pop	{r4, r5, r6, pc}
    f3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3ce:	461d      	mov	r5, r3
    f3d0:	4610      	mov	r0, r2
    f3d2:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    f3d6:	1f8b      	subs	r3, r1, #6
    f3d8:	f640 427a 	movw	r2, #3194	; 0xc7a
    f3dc:	9e08      	ldr	r6, [sp, #32]
    f3de:	4293      	cmp	r3, r2
    f3e0:	d81c      	bhi.n	f41c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f3e2:	1f83      	subs	r3, r0, #6
    f3e4:	4293      	cmp	r3, r2
    f3e6:	d819      	bhi.n	f41c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f3e8:	4281      	cmp	r1, r0
    f3ea:	d817      	bhi.n	f41c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f3ec:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    f3f0:	d214      	bcs.n	f41c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f3f2:	f1a4 010a 	sub.w	r1, r4, #10
    f3f6:	1f12      	subs	r2, r2, #4
    f3f8:	4291      	cmp	r1, r2
    f3fa:	d80f      	bhi.n	f41c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f3fc:	f7fe fafb 	bl	d9f6 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    f400:	1c6d      	adds	r5, r5, #1
    f402:	4368      	muls	r0, r5
    f404:	f240 2171 	movw	r1, #625	; 0x271
    f408:	0040      	lsls	r0, r0, #1
    f40a:	434c      	muls	r4, r1
    f40c:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    f410:	d204      	bcs.n	f41c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f412:	42b7      	cmp	r7, r6
    f414:	d802      	bhi.n	f41c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f416:	2001      	movs	r0, #1
    f418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f41c:	2000      	movs	r0, #0
    f41e:	e7fb      	b.n	f418 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x352>
    f420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f424:	4606      	mov	r6, r0
    f426:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    f42a:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    f42e:	4615      	mov	r5, r2
    f430:	302c      	adds	r0, #44	; 0x2c
    f432:	f7f8 fa9f 	bl	7974 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>
    f436:	4680      	mov	r8, r0
    f438:	2102      	movs	r1, #2
    f43a:	f7fe fb6a 	bl	db12 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f43e:	4287      	cmp	r7, r0
    f440:	d200      	bcs.n	f444 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
    f442:	4638      	mov	r0, r7
    f444:	4607      	mov	r7, r0
    f446:	2102      	movs	r1, #2
    f448:	4640      	mov	r0, r8
    f44a:	f7fe fb62 	bl	db12 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f44e:	4284      	cmp	r4, r0
    f450:	d200      	bcs.n	f454 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
    f452:	4620      	mov	r0, r4
    f454:	8831      	ldrh	r1, [r6, #0]
    f456:	8029      	strh	r1, [r5, #0]
    f458:	2f1b      	cmp	r7, #27
    f45a:	d913      	bls.n	f484 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
    f45c:	2ffb      	cmp	r7, #251	; 0xfb
    f45e:	d300      	bcc.n	f462 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
    f460:	27fb      	movs	r7, #251	; 0xfb
    f462:	806f      	strh	r7, [r5, #2]
    f464:	281b      	cmp	r0, #27
    f466:	d90f      	bls.n	f488 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c2>
    f468:	28fb      	cmp	r0, #251	; 0xfb
    f46a:	d300      	bcc.n	f46e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    f46c:	20fb      	movs	r0, #251	; 0xfb
    f46e:	80e8      	strh	r0, [r5, #6]
    f470:	4640      	mov	r0, r8
    f472:	f7ff fe49 	bl	f108 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    f476:	80a8      	strh	r0, [r5, #4]
    f478:	4640      	mov	r0, r8
    f47a:	f7ff fe45 	bl	f108 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    f47e:	8128      	strh	r0, [r5, #8]
    f480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f484:	271b      	movs	r7, #27
    f486:	e7ec      	b.n	f462 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
    f488:	201b      	movs	r0, #27
    f48a:	e7f0      	b.n	f46e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    f48c:	b510      	push	{r4, lr}
    f48e:	f000 f860 	bl	f552 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f492:	2800      	cmp	r0, #0
    f494:	d000      	beq.n	f498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d2>
    f496:	2001      	movs	r0, #1
    f498:	bd10      	pop	{r4, pc}
    f49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f49e:	7890      	ldrb	r0, [r2, #2]
    f4a0:	9e06      	ldr	r6, [sp, #24]
    f4a2:	461d      	mov	r5, r3
    f4a4:	4614      	mov	r4, r2
    f4a6:	b908      	cbnz	r0, f4ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e6>
    f4a8:	f7fb fdd2 	bl	b050 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f4ac:	78e4      	ldrb	r4, [r4, #3]
    f4ae:	4607      	mov	r7, r0
    f4b0:	b914      	cbnz	r4, f4b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3f2>
    f4b2:	f7fb fdcd 	bl	b050 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f4b6:	4604      	mov	r4, r0
    f4b8:	b16f      	cbz	r7, f4d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
    f4ba:	b164      	cbz	r4, f4d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
    f4bc:	4638      	mov	r0, r7
    f4be:	f7ff fe2d 	bl	f11c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    f4c2:	4620      	mov	r0, r4
    f4c4:	f7ff fe2a 	bl	f11c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    f4c8:	b12f      	cbz	r7, f4d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
    f4ca:	b124      	cbz	r4, f4d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
    f4cc:	702f      	strb	r7, [r5, #0]
    f4ce:	7034      	strb	r4, [r6, #0]
    f4d0:	2000      	movs	r0, #0
    f4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f4d6:	2009      	movs	r0, #9
    f4d8:	e7fb      	b.n	f4d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x40c>
    f4da:	b510      	push	{r4, lr}
    f4dc:	f7fd f808 	bl	c4f0 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    f4e0:	b928      	cbnz	r0, f4ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x428>
    f4e2:	f7fd f83b 	bl	c55c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    f4e6:	b910      	cbnz	r0, f4ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x428>
    f4e8:	f7fd f842 	bl	c570 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f4ec:	b108      	cbz	r0, f4f2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42c>
    f4ee:	2008      	movs	r0, #8
    f4f0:	bd10      	pop	{r4, pc}
    f4f2:	f7fc ffd2 	bl	c49a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    f4f6:	b940      	cbnz	r0, f50a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f4f8:	f7fc ffd9 	bl	c4ae <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    f4fc:	b928      	cbnz	r0, f50a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f4fe:	f7fc ffed 	bl	c4dc <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    f502:	b910      	cbnz	r0, f50a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f504:	f7fc fffe 	bl	c504 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f508:	b108      	cbz	r0, f50e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x448>
    f50a:	2004      	movs	r0, #4
    f50c:	bd10      	pop	{r4, pc}
    f50e:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    f512:	2039      	movs	r0, #57	; 0x39
    f514:	f7f4 fc40 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f518:	b510      	push	{r4, lr}
    f51a:	f7fb fd93 	bl	b044 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f51e:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f522:	bd10      	pop	{r4, pc}
    f524:	6840      	ldr	r0, [r0, #4]
    f526:	f000 b800 	b.w	f52a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    f52a:	b508      	push	{r3, lr}
    f52c:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    f530:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
    f534:	f88d 0000 	strb.w	r0, [sp]
    f538:	9800      	ldr	r0, [sp, #0]
    f53a:	9000      	str	r0, [sp, #0]
    f53c:	f89d 0000 	ldrb.w	r0, [sp]
    f540:	1e40      	subs	r0, r0, #1
    f542:	4208      	tst	r0, r1
    f544:	d003      	beq.n	f54e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x488>
    f546:	2904      	cmp	r1, #4
    f548:	d001      	beq.n	f54e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x488>
    f54a:	2001      	movs	r0, #1
    f54c:	bd08      	pop	{r3, pc}
    f54e:	2000      	movs	r0, #0
    f550:	bd08      	pop	{r3, pc}
    f552:	b510      	push	{r4, lr}
    f554:	f7f8 faa0 	bl	7a98 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
    f558:	2804      	cmp	r0, #4
    f55a:	d003      	beq.n	f564 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
    f55c:	2805      	cmp	r0, #5
    f55e:	d001      	beq.n	f564 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
    f560:	2000      	movs	r0, #0
    f562:	bd10      	pop	{r4, pc}
    f564:	2001      	movs	r0, #1
    f566:	bd10      	pop	{r4, pc}
    f568:	b5f0      	push	{r4, r5, r6, r7, lr}
    f56a:	b089      	sub	sp, #36	; 0x24
    f56c:	4604      	mov	r4, r0
    f56e:	8800      	ldrh	r0, [r0, #0]
    f570:	a906      	add	r1, sp, #24
    f572:	f7fe fa34 	bl	d9de <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f576:	2800      	cmp	r0, #0
    f578:	d143      	bne.n	f602 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f57a:	9807      	ldr	r0, [sp, #28]
    f57c:	2601      	movs	r6, #1
    f57e:	f890 119e 	ldrb.w	r1, [r0, #414]	; 0x19e
    f582:	f88d 1008 	strb.w	r1, [sp, #8]
    f586:	9902      	ldr	r1, [sp, #8]
    f588:	9102      	str	r1, [sp, #8]
    f58a:	f89d 1008 	ldrb.w	r1, [sp, #8]
    f58e:	f88d 100c 	strb.w	r1, [sp, #12]
    f592:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    f596:	3078      	adds	r0, #120	; 0x78
    f598:	291d      	cmp	r1, #29
    f59a:	d102      	bne.n	f5a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4dc>
    f59c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    f5a0:	b141      	cbz	r1, f5b4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ee>
    f5a2:	2100      	movs	r1, #0
    f5a4:	f88d 1004 	strb.w	r1, [sp, #4]
    f5a8:	2105      	movs	r1, #5
    f5aa:	304e      	adds	r0, #78	; 0x4e
    f5ac:	f7ff fa0a 	bl	e9c4 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    f5b0:	b110      	cbz	r0, f5b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f2>
    f5b2:	e004      	b.n	f5be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f8>
    f5b4:	2101      	movs	r1, #1
    f5b6:	e7f5      	b.n	f5a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
    f5b8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f5bc:	b300      	cbz	r0, f600 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53a>
    f5be:	8921      	ldrh	r1, [r4, #8]
    f5c0:	88e0      	ldrh	r0, [r4, #6]
    f5c2:	f7ff fde1 	bl	f188 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    f5c6:	2800      	cmp	r0, #0
    f5c8:	d11b      	bne.n	f602 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f5ca:	88a1      	ldrh	r1, [r4, #4]
    f5cc:	8860      	ldrh	r0, [r4, #2]
    f5ce:	f7ff fddb 	bl	f188 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    f5d2:	2800      	cmp	r0, #0
    f5d4:	d115      	bne.n	f602 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f5d6:	8921      	ldrh	r1, [r4, #8]
    f5d8:	88e0      	ldrh	r0, [r4, #6]
    f5da:	f7ff fdcb 	bl	f174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    f5de:	2800      	cmp	r0, #0
    f5e0:	d10f      	bne.n	f602 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f5e2:	88a1      	ldrh	r1, [r4, #4]
    f5e4:	8860      	ldrh	r0, [r4, #2]
    f5e6:	f7ff fdc5 	bl	f174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    f5ea:	0007      	movs	r7, r0
    f5ec:	d109      	bne.n	f602 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f5ee:	9807      	ldr	r0, [sp, #28]
    f5f0:	f500 7599 	add.w	r5, r0, #306	; 0x132
    f5f4:	706e      	strb	r6, [r5, #1]
    f5f6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    f5fa:	b121      	cbz	r1, f606 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x540>
    f5fc:	273a      	movs	r7, #58	; 0x3a
    f5fe:	e02d      	b.n	f65c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x596>
    f600:	201a      	movs	r0, #26
    f602:	b009      	add	sp, #36	; 0x24
    f604:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f606:	4631      	mov	r1, r6
    f608:	aa03      	add	r2, sp, #12
    f60a:	f7ff ff09 	bl	f420 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    f60e:	8861      	ldrh	r1, [r4, #2]
    f610:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    f614:	4281      	cmp	r1, r0
    f616:	d200      	bcs.n	f61a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x554>
    f618:	4608      	mov	r0, r1
    f61a:	80e8      	strh	r0, [r5, #6]
    f61c:	88a1      	ldrh	r1, [r4, #4]
    f61e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    f622:	4281      	cmp	r1, r0
    f624:	d200      	bcs.n	f628 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x562>
    f626:	4608      	mov	r0, r1
    f628:	8128      	strh	r0, [r5, #8]
    f62a:	88e2      	ldrh	r2, [r4, #6]
    f62c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    f630:	428a      	cmp	r2, r1
    f632:	d200      	bcs.n	f636 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x570>
    f634:	4611      	mov	r1, r2
    f636:	8069      	strh	r1, [r5, #2]
    f638:	8922      	ldrh	r2, [r4, #8]
    f63a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    f63e:	428a      	cmp	r2, r1
    f640:	d200      	bcs.n	f644 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x57e>
    f642:	4611      	mov	r1, r2
    f644:	f640 0248 	movw	r2, #2120	; 0x848
    f648:	80a9      	strh	r1, [r5, #4]
    f64a:	4291      	cmp	r1, r2
    f64c:	d300      	bcc.n	f650 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x58a>
    f64e:	4611      	mov	r1, r2
    f650:	80a9      	strh	r1, [r5, #4]
    f652:	4290      	cmp	r0, r2
    f654:	d200      	bcs.n	f658 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x592>
    f656:	4602      	mov	r2, r0
    f658:	812a      	strh	r2, [r5, #8]
    f65a:	702e      	strb	r6, [r5, #0]
    f65c:	2000      	movs	r0, #0
    f65e:	7068      	strb	r0, [r5, #1]
    f660:	4638      	mov	r0, r7
    f662:	e7ce      	b.n	f602 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f664:	b530      	push	{r4, r5, lr}
    f666:	f340 0400 	sbfx	r4, r0, #0, #1
    f66a:	f340 0040 	sbfx	r0, r0, #1, #1
    f66e:	1c40      	adds	r0, r0, #1
    f670:	9d03      	ldr	r5, [sp, #12]
    f672:	1c64      	adds	r4, r4, #1
    f674:	d000      	beq.n	f678 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b2>
    f676:	b119      	cbz	r1, f680 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
    f678:	b100      	cbz	r0, f67c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b6>
    f67a:	b10a      	cbz	r2, f680 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
    f67c:	b91c      	cbnz	r4, f686 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c0>
    f67e:	e001      	b.n	f684 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5be>
    f680:	2011      	movs	r0, #17
    f682:	bd30      	pop	{r4, r5, pc}
    f684:	2100      	movs	r1, #0
    f686:	7019      	strb	r1, [r3, #0]
    f688:	b900      	cbnz	r0, f68c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c6>
    f68a:	2200      	movs	r2, #0
    f68c:	702a      	strb	r2, [r5, #0]
    f68e:	2000      	movs	r0, #0
    f690:	bd30      	pop	{r4, r5, pc}
    f692:	b510      	push	{r4, lr}
    f694:	f7ff ff5d 	bl	f552 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f698:	b120      	cbz	r0, f6a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
    f69a:	f7f7 f8f7 	bl	688c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
    f69e:	b108      	cbz	r0, f6a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
    f6a0:	2001      	movs	r0, #1
    f6a2:	bd10      	pop	{r4, pc}
    f6a4:	2000      	movs	r0, #0
    f6a6:	bd10      	pop	{r4, pc}

0000f6a8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    f6a8:	6802      	ldr	r2, [r0, #0]
    f6aa:	b912      	cbnz	r2, f6b2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    f6ac:	6001      	str	r1, [r0, #0]
    f6ae:	4770      	bx	lr
    f6b0:	4602      	mov	r2, r0
    f6b2:	6850      	ldr	r0, [r2, #4]
    f6b4:	b108      	cbz	r0, f6ba <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    f6b6:	428a      	cmp	r2, r1
    f6b8:	d1fa      	bne.n	f6b0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    f6ba:	428a      	cmp	r2, r1
    f6bc:	d0f7      	beq.n	f6ae <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    f6be:	6051      	str	r1, [r2, #4]
    f6c0:	4770      	bx	lr
    f6c2:	b510      	push	{r4, lr}
    f6c4:	4604      	mov	r4, r0
    f6c6:	e002      	b.n	f6ce <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    f6c8:	6820      	ldr	r0, [r4, #0]
    f6ca:	4780      	blx	r0
    f6cc:	6864      	ldr	r4, [r4, #4]
    f6ce:	2c00      	cmp	r4, #0
    f6d0:	d1fa      	bne.n	f6c8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x20>
    f6d2:	bd10      	pop	{r4, pc}
    f6d4:	b510      	push	{r4, lr}
    f6d6:	2000      	movs	r0, #0
    f6d8:	f7f4 fd26 	bl	4128 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    f6dc:	f7f4 ff46 	bl	456c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    f6e0:	f7f5 f982 	bl	49e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    f6e4:	f7f5 fb74 	bl	4dd0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    f6e8:	2800      	cmp	r0, #0
    f6ea:	d003      	beq.n	f6f4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4c>
    f6ec:	21d0      	movs	r1, #208	; 0xd0
    f6ee:	2001      	movs	r0, #1
    f6f0:	f7f4 fb52 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6f4:	bd10      	pop	{r4, pc}
    f6f6:	b510      	push	{r4, lr}
    f6f8:	f000 f80a 	bl	f710 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    f6fc:	f7ff f84b 	bl	e796 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
    f700:	2800      	cmp	r0, #0
    f702:	d004      	beq.n	f70e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
    f704:	f240 1155 	movw	r1, #341	; 0x155
    f708:	2001      	movs	r0, #1
    f70a:	f7f4 fb45 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f70e:	bd10      	pop	{r4, pc}
    f710:	b510      	push	{r4, lr}
    f712:	f7f8 f943 	bl	799c <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>
    f716:	b120      	cbz	r0, f722 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x7a>
    f718:	f240 113b 	movw	r1, #315	; 0x13b
    f71c:	2001      	movs	r0, #1
    f71e:	f7f4 fb3b 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f722:	f7f7 f803 	bl	672c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    f726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f72a:	f7fa bf59 	b.w	a5e0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
    f72e:	0001      	.short	0x0001
    f730:	0002000b 	.word	0x0002000b
    f734:	0005000a 	.word	0x0005000a
    f738:	000a0009 	.word	0x000a0009
    f73c:	00140008 	.word	0x00140008
    f740:	001e0007 	.word	0x001e0007
    f744:	00320006 	.word	0x00320006
    f748:	004b0005 	.word	0x004b0005
    f74c:	00640004 	.word	0x00640004
    f750:	00960003 	.word	0x00960003
    f754:	00fa0002 	.word	0x00fa0002
    f758:	01f40001 	.word	0x01f40001
	...

0000f75e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    f75e:	b510      	push	{r4, lr}
    f760:	f7fc f82a 	bl	b7b8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    f764:	f000 f850 	bl	f808 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    f768:	f7fb fce6 	bl	b138 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    f76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f770:	f7fb bde4 	b.w	b33c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000f774 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    f774:	b510      	push	{r4, lr}
    f776:	24c8      	movs	r4, #200	; 0xc8
    f778:	1e64      	subs	r4, r4, #1
    f77a:	b2e4      	uxtb	r4, r4
    f77c:	f7fb fcfa 	bl	b174 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    f780:	2802      	cmp	r0, #2
    f782:	d003      	beq.n	f78c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    f784:	2801      	cmp	r0, #1
    f786:	d000      	beq.n	f78a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    f788:	2000      	movs	r0, #0
    f78a:	bd10      	pop	{r4, pc}
    f78c:	2c00      	cmp	r4, #0
    f78e:	d1f3      	bne.n	f778 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    f790:	2193      	movs	r1, #147	; 0x93
    f792:	203b      	movs	r0, #59	; 0x3b
    f794:	f7f4 fb00 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f798 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    f798:	b510      	push	{r4, lr}
    f79a:	f7f4 f997 	bl	3acc <mpsl_fem_lna_configuration_clear>
    f79e:	2800      	cmp	r0, #0
    f7a0:	d005      	beq.n	f7ae <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f7a2:	1c40      	adds	r0, r0, #1
    f7a4:	d003      	beq.n	f7ae <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f7a6:	2150      	movs	r1, #80	; 0x50
    f7a8:	2040      	movs	r0, #64	; 0x40
    f7aa:	f7f4 faf5 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7ae:	bd10      	pop	{r4, pc}

0000f7b0 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    f7b0:	b510      	push	{r4, lr}
    f7b2:	f7f4 f997 	bl	3ae4 <mpsl_fem_pa_configuration_clear>
    f7b6:	2800      	cmp	r0, #0
    f7b8:	d005      	beq.n	f7c6 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f7ba:	1c40      	adds	r0, r0, #1
    f7bc:	d003      	beq.n	f7c6 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f7be:	2149      	movs	r1, #73	; 0x49
    f7c0:	2040      	movs	r0, #64	; 0x40
    f7c2:	f7f4 fae9 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7c6:	bd10      	pop	{r4, pc}

0000f7c8 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    f7c8:	b510      	push	{r4, lr}
    f7ca:	f7f4 f979 	bl	3ac0 <mpsl_fem_disable>
    f7ce:	2800      	cmp	r0, #0
    f7d0:	d005      	beq.n	f7de <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f7d2:	1c40      	adds	r0, r0, #1
    f7d4:	d003      	beq.n	f7de <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f7d6:	2157      	movs	r1, #87	; 0x57
    f7d8:	2040      	movs	r0, #64	; 0x40
    f7da:	f7f4 fadd 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7de:	bd10      	pop	{r4, pc}

0000f7e0 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    f7e0:	b510      	push	{r4, lr}
    f7e2:	2100      	movs	r1, #0
    f7e4:	4608      	mov	r0, r1
    f7e6:	f7f4 f977 	bl	3ad8 <mpsl_fem_lna_configuration_set>
    f7ea:	b108      	cbz	r0, f7f0 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    f7ec:	2000      	movs	r0, #0
    f7ee:	bd10      	pop	{r4, pc}
    f7f0:	2001      	movs	r0, #1
    f7f2:	bd10      	pop	{r4, pc}

0000f7f4 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    f7f4:	b508      	push	{r3, lr}
    f7f6:	4668      	mov	r0, sp
    f7f8:	f7f4 f980 	bl	3afc <mpsl_fem_pa_is_configured>
    f7fc:	f89d 0000 	ldrb.w	r0, [sp]
    f800:	2800      	cmp	r0, #0
    f802:	d000      	beq.n	f806 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    f804:	2001      	movs	r0, #1
    f806:	bd08      	pop	{r3, pc}

0000f808 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    f808:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f80c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f810:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    f814:	f3bf 8f4f 	dsb	sy
    f818:	f3bf 8f6f 	isb	sy
    f81c:	f7fb be68 	b.w	b4f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    f820:	2800      	cmp	r0, #0
    f822:	db09      	blt.n	f838 <__kernel_ram_size+0x18>
    f824:	f000 021f 	and.w	r2, r0, #31
    f828:	2101      	movs	r1, #1
    f82a:	4091      	lsls	r1, r2
    f82c:	0940      	lsrs	r0, r0, #5
    f82e:	0080      	lsls	r0, r0, #2
    f830:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f834:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f838:	4770      	bx	lr
    f83a:	2800      	cmp	r0, #0
    f83c:	db0d      	blt.n	f85a <__kernel_ram_size+0x3a>
    f83e:	f000 021f 	and.w	r2, r0, #31
    f842:	2101      	movs	r1, #1
    f844:	4091      	lsls	r1, r2
    f846:	0940      	lsrs	r0, r0, #5
    f848:	0080      	lsls	r0, r0, #2
    f84a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f84e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    f852:	f3bf 8f4f 	dsb	sy
    f856:	f3bf 8f6f 	isb	sy
    f85a:	4770      	bx	lr

0000f85c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    f85c:	b510      	push	{r4, lr}
    f85e:	2801      	cmp	r0, #1
    f860:	d006      	beq.n	f870 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    f862:	2802      	cmp	r0, #2
    f864:	d006      	beq.n	f874 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    f866:	f640 3164 	movw	r1, #2916	; 0xb64
    f86a:	203e      	movs	r0, #62	; 0x3e
    f86c:	f7f4 fa94 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f870:	2028      	movs	r0, #40	; 0x28
    f872:	bd10      	pop	{r4, pc}
    f874:	2018      	movs	r0, #24
    f876:	bd10      	pop	{r4, pc}

0000f878 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    f878:	b510      	push	{r4, lr}
    f87a:	2801      	cmp	r0, #1
    f87c:	d006      	beq.n	f88c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    f87e:	2802      	cmp	r0, #2
    f880:	d007      	beq.n	f892 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    f882:	f640 3178 	movw	r1, #2936	; 0xb78
    f886:	203e      	movs	r0, #62	; 0x3e
    f888:	f7f4 fa86 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f88c:	f641 6014 	movw	r0, #7700	; 0x1e14
    f890:	bd10      	pop	{r4, pc}
    f892:	f241 1030 	movw	r0, #4400	; 0x1130
    f896:	bd10      	pop	{r4, pc}

0000f898 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    f898:	f7fc bcb0 	b.w	c1fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    f89c:	b510      	push	{r4, lr}
    f89e:	460a      	mov	r2, r1
    f8a0:	b130      	cbz	r0, f8b0 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    f8a2:	2801      	cmp	r0, #1
    f8a4:	d00b      	beq.n	f8be <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    f8a6:	f240 6127 	movw	r1, #1575	; 0x627
    f8aa:	203e      	movs	r0, #62	; 0x3e
    f8ac:	f7f4 fa74 	bl	3d98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8b4:	f102 0128 	add.w	r1, r2, #40	; 0x28
    f8b8:	4610      	mov	r0, r2
    f8ba:	f7fb bcaf 	b.w	b21c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    f8be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8c2:	f102 0129 	add.w	r1, r2, #41	; 0x29
    f8c6:	4610      	mov	r0, r2
    f8c8:	f7fb bc92 	b.w	b1f0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0000f8cc <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    f8cc:	b570      	push	{r4, r5, r6, lr}
    f8ce:	4605      	mov	r5, r0
    f8d0:	4614      	mov	r4, r2
    f8d2:	4608      	mov	r0, r1
    f8d4:	f7ff ffd0 	bl	f878 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f8d8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    f8dc:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    f8e0:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    f8e4:	4620      	mov	r0, r4
    f8e6:	f7ff ffc7 	bl	f878 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f8ea:	4428      	add	r0, r5
    f8ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f8f0:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    f8f4:	fbb0 f5f1 	udiv	r5, r0, r1
    f8f8:	4620      	mov	r0, r4
    f8fa:	f7ff ffaf 	bl	f85c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f8fe:	4428      	add	r0, r5
    f900:	1d40      	adds	r0, r0, #5
    f902:	bd70      	pop	{r4, r5, r6, pc}

0000f904 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    f904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f908:	4607      	mov	r7, r0
    f90a:	461d      	mov	r5, r3
    f90c:	460e      	mov	r6, r1
    f90e:	4614      	mov	r4, r2
    f910:	4610      	mov	r0, r2
    f912:	f7ff ffb1 	bl	f878 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f916:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    f91a:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    f91e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    f922:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f926:	2e02      	cmp	r6, #2
    f928:	d00e      	beq.n	f948 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    f92a:	f240 52dc 	movw	r2, #1500	; 0x5dc
    f92e:	4411      	add	r1, r2
    f930:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    f934:	fbb1 f6f0 	udiv	r6, r1, r0
    f938:	4620      	mov	r0, r4
    f93a:	f7ff ff8f 	bl	f85c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f93e:	4430      	add	r0, r6
    f940:	4428      	add	r0, r5
    f942:	1d40      	adds	r0, r0, #5
    f944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f948:	4602      	mov	r2, r0
    f94a:	e7f0      	b.n	f92e <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000f94c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    f94c:	b510      	push	{r4, lr}
    f94e:	4604      	mov	r4, r0
    f950:	4608      	mov	r0, r1
    f952:	f7ff ff91 	bl	f878 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f956:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f95a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f95e:	fbb0 f0f1 	udiv	r0, r0, r1
    f962:	1a20      	subs	r0, r4, r0
    f964:	1e80      	subs	r0, r0, #2
    f966:	bd10      	pop	{r4, pc}

0000f968 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    f968:	b510      	push	{r4, lr}
    f96a:	4604      	mov	r4, r0
    f96c:	4608      	mov	r0, r1
    f96e:	f7ff ff83 	bl	f878 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f972:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f976:	fbb0 f0f1 	udiv	r0, r0, r1
    f97a:	1a20      	subs	r0, r4, r0
    f97c:	bd10      	pop	{r4, pc}

0000f97e <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    f97e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f982:	2902      	cmp	r1, #2
    f984:	d008      	beq.n	f998 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    f986:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f98a:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    f98e:	fbb1 f1f2 	udiv	r1, r1, r2
    f992:	4408      	add	r0, r1
    f994:	1e80      	subs	r0, r0, #2
    f996:	4770      	bx	lr
    f998:	4611      	mov	r1, r2
    f99a:	e7f6      	b.n	f98a <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000f99c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    f99c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f9a0:	2902      	cmp	r1, #2
    f9a2:	d007      	beq.n	f9b4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    f9a4:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f9a8:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    f9ac:	fbb1 f1f2 	udiv	r1, r1, r2
    f9b0:	4408      	add	r0, r1
    f9b2:	4770      	bx	lr
    f9b4:	4611      	mov	r1, r2
    f9b6:	e7f7      	b.n	f9a8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    f9b8:	1702080c 	.word	0x1702080c
    f9bc:	0201010d 	.word	0x0201010d
    f9c0:	01010909 	.word	0x01010909
    f9c4:	18090206 	.word	0x18090206
    f9c8:	01010318 	.word	0x01010318
    f9cc:	03030909 	.word	0x03030909
    f9d0:	05          	.byte	0x05
    f9d1:	55          	.byte	0x55
    f9d2:	5555      	.short	0x5555
    f9d4:	2625      	.short	0x2625
    f9d6:	27          	.byte	0x27
    f9d7:	01          	.byte	0x01
    f9d8:	0103      	.short	0x0103
    f9da:	01          	.byte	0x01
    f9db:	01          	.byte	0x01

0000f9dc <scan_connecting_error>:
}

//Scanning error
void scan_connecting_error(struct bt_scan_device_info *device_info)
{
	printk("Connection to peer failed!\n");
    f9dc:	4801      	ldr	r0, [pc, #4]	; (f9e4 <scan_connecting_error+0x8>)
    f9de:	f00d bee9 	b.w	1d7b4 <printk>
    f9e2:	bf00      	nop
    f9e4:	00021460 	.word	0x00021460

0000f9e8 <ble_ready>:


//Callback function after enabling bluetooth
static void ble_ready(int err)
{
	printk("Bluetooth ready\n");
    f9e8:	4801      	ldr	r0, [pc, #4]	; (f9f0 <ble_ready+0x8>)
    f9ea:	f00d bee3 	b.w	1d7b4 <printk>
    f9ee:	bf00      	nop
    f9f0:	0002147c 	.word	0x0002147c

0000f9f4 <scan_filter_match>:
{
    f9f4:	b570      	push	{r4, r5, r6, lr}
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    f9f6:	6803      	ldr	r3, [r0, #0]
    f9f8:	681c      	ldr	r4, [r3, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    f9fa:	7823      	ldrb	r3, [r4, #0]
{
    f9fc:	b092      	sub	sp, #72	; 0x48
    f9fe:	4606      	mov	r6, r0
    fa00:	ad07      	add	r5, sp, #28
    fa02:	2b03      	cmp	r3, #3
    fa04:	d826      	bhi.n	fa54 <scan_filter_match+0x60>
    fa06:	e8df f003 	tbb	[pc, r3]
    fa0a:	1f02      	.short	0x1f02
    fa0c:	2321      	.short	0x2321
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    fa0e:	4914      	ldr	r1, [pc, #80]	; (fa60 <scan_filter_match+0x6c>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    fa10:	4628      	mov	r0, r5
    fa12:	f011 f840 	bl	20a96 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    fa16:	79a3      	ldrb	r3, [r4, #6]
    fa18:	9505      	str	r5, [sp, #20]
    fa1a:	7862      	ldrb	r2, [r4, #1]
    fa1c:	9204      	str	r2, [sp, #16]
    fa1e:	78a2      	ldrb	r2, [r4, #2]
    fa20:	9203      	str	r2, [sp, #12]
    fa22:	78e2      	ldrb	r2, [r4, #3]
    fa24:	9202      	str	r2, [sp, #8]
    fa26:	7922      	ldrb	r2, [r4, #4]
    fa28:	9201      	str	r2, [sp, #4]
    fa2a:	7962      	ldrb	r2, [r4, #5]
    fa2c:	9200      	str	r2, [sp, #0]
    fa2e:	211e      	movs	r1, #30
    fa30:	4a0c      	ldr	r2, [pc, #48]	; (fa64 <scan_filter_match+0x70>)
    fa32:	a80a      	add	r0, sp, #40	; 0x28
    fa34:	f00d fecb 	bl	1d7ce <snprintk>
	printk("%i\n",device_info->recv_info->rssi);
    fa38:	6833      	ldr	r3, [r6, #0]
    fa3a:	480b      	ldr	r0, [pc, #44]	; (fa68 <scan_filter_match+0x74>)
    fa3c:	f993 1005 	ldrsb.w	r1, [r3, #5]
    fa40:	f00d feb8 	bl	1d7b4 <printk>
}
    fa44:	b012      	add	sp, #72	; 0x48
    fa46:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    fa48:	4908      	ldr	r1, [pc, #32]	; (fa6c <scan_filter_match+0x78>)
    fa4a:	e7e1      	b.n	fa10 <scan_filter_match+0x1c>
		strcpy(type, "public-id");
    fa4c:	4908      	ldr	r1, [pc, #32]	; (fa70 <scan_filter_match+0x7c>)
    fa4e:	e7df      	b.n	fa10 <scan_filter_match+0x1c>
		strcpy(type, "random-id");
    fa50:	4908      	ldr	r1, [pc, #32]	; (fa74 <scan_filter_match+0x80>)
    fa52:	e7dd      	b.n	fa10 <scan_filter_match+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    fa54:	4a08      	ldr	r2, [pc, #32]	; (fa78 <scan_filter_match+0x84>)
    fa56:	210a      	movs	r1, #10
    fa58:	4628      	mov	r0, r5
    fa5a:	f00d feb8 	bl	1d7ce <snprintk>
		break;
    fa5e:	e7da      	b.n	fa16 <scan_filter_match+0x22>
    fa60:	0002148d 	.word	0x0002148d
    fa64:	000214b6 	.word	0x000214b6
    fa68:	0002154b 	.word	0x0002154b
    fa6c:	00021494 	.word	0x00021494
    fa70:	0002149b 	.word	0x0002149b
    fa74:	000214a5 	.word	0x000214a5
    fa78:	000214af 	.word	0x000214af

0000fa7c <change_instruction>:
}


//Handle instructions from the controlller
void change_instruction(uint8_t inst){
    fa7c:	b507      	push	{r0, r1, r2, lr}
    fa7e:	4603      	mov	r3, r0

	int err;
	char casename[2];
	err = snprintf(casename,2,"%c",inst);
    fa80:	2102      	movs	r1, #2
    fa82:	4a15      	ldr	r2, [pc, #84]	; (fad8 <change_instruction+0x5c>)
    fa84:	a801      	add	r0, sp, #4
    fa86:	f00d fc05 	bl	1d294 <sniprintf>

	//Start passive scanning
	if (strcmp(casename,"p") == 0){
    fa8a:	4914      	ldr	r1, [pc, #80]	; (fadc <change_instruction+0x60>)
    fa8c:	a801      	add	r0, sp, #4
    fa8e:	f7fc fbeb 	bl	c268 <strcmp>
    fa92:	b940      	cbnz	r0, faa6 <change_instruction+0x2a>
		instruction_type = 1;
    fa94:	4b12      	ldr	r3, [pc, #72]	; (fae0 <change_instruction+0x64>)
    fa96:	2201      	movs	r2, #1
		instruction_type = 3;
	}

	//Change name
	else if (strcmp(casename,"c") == 0){
		instruction_type = 4;
    fa98:	601a      	str	r2, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    fa9a:	4812      	ldr	r0, [pc, #72]	; (fae4 <change_instruction+0x68>)
    fa9c:	f00a fa90 	bl	19fc0 <z_impl_k_sem_give>
	}

	//Give access to the main thread
	k_sem_give(&instance_monitor_sem);
}
    faa0:	b003      	add	sp, #12
    faa2:	f85d fb04 	ldr.w	pc, [sp], #4
	else if (strcmp(casename,"a") == 0)
    faa6:	4910      	ldr	r1, [pc, #64]	; (fae8 <change_instruction+0x6c>)
    faa8:	a801      	add	r0, sp, #4
    faaa:	f7fc fbdd 	bl	c268 <strcmp>
    faae:	b910      	cbnz	r0, fab6 <change_instruction+0x3a>
		instruction_type = 2;
    fab0:	4b0b      	ldr	r3, [pc, #44]	; (fae0 <change_instruction+0x64>)
    fab2:	2202      	movs	r2, #2
    fab4:	e7f0      	b.n	fa98 <change_instruction+0x1c>
	else if (strcmp(casename,"s") == 0){
    fab6:	490d      	ldr	r1, [pc, #52]	; (faec <change_instruction+0x70>)
    fab8:	a801      	add	r0, sp, #4
    faba:	f7fc fbd5 	bl	c268 <strcmp>
    fabe:	b910      	cbnz	r0, fac6 <change_instruction+0x4a>
		instruction_type = 3;
    fac0:	4b07      	ldr	r3, [pc, #28]	; (fae0 <change_instruction+0x64>)
    fac2:	2203      	movs	r2, #3
    fac4:	e7e8      	b.n	fa98 <change_instruction+0x1c>
	else if (strcmp(casename,"c") == 0){
    fac6:	490a      	ldr	r1, [pc, #40]	; (faf0 <change_instruction+0x74>)
    fac8:	a801      	add	r0, sp, #4
    faca:	f7fc fbcd 	bl	c268 <strcmp>
    face:	2800      	cmp	r0, #0
    fad0:	d1e3      	bne.n	fa9a <change_instruction+0x1e>
		instruction_type = 4;
    fad2:	4b03      	ldr	r3, [pc, #12]	; (fae0 <change_instruction+0x64>)
    fad4:	2204      	movs	r2, #4
    fad6:	e7df      	b.n	fa98 <change_instruction+0x1c>
    fad8:	000214eb 	.word	0x000214eb
    fadc:	000214d9 	.word	0x000214d9
    fae0:	20001ce8 	.word	0x20001ce8
    fae4:	20000670 	.word	0x20000670
    fae8:	000214db 	.word	0x000214db
    faec:	00022506 	.word	0x00022506
    faf0:	0002181d 	.word	0x0002181d

0000faf4 <uart_cb>:
}


//Handling the UART
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
    faf4:	b430      	push	{r4, r5}
	switch (evt->type)
    faf6:	780a      	ldrb	r2, [r1, #0]
    faf8:	2a02      	cmp	r2, #2
    fafa:	d003      	beq.n	fb04 <uart_cb+0x10>
    fafc:	2a05      	cmp	r2, #5
    fafe:	d015      	beq.n	fb2c <uart_cb+0x38>
		break;

	default:
		break;
	}
}
    fb00:	bc30      	pop	{r4, r5}
    fb02:	4770      	bx	lr
		if(evt->data.rx.len<1){
    fb04:	68cb      	ldr	r3, [r1, #12]
    fb06:	2b00      	cmp	r3, #0
    fb08:	d0fa      	beq.n	fb00 <uart_cb+0xc>
		for (int i = evt->data.rx.offset; i < ((evt->data.rx.len + evt->data.rx.offset)-1); i++)
    fb0a:	688a      	ldr	r2, [r1, #8]
    fb0c:	480b      	ldr	r0, [pc, #44]	; (fb3c <uart_cb+0x48>)
    fb0e:	4413      	add	r3, r2
    fb10:	4604      	mov	r4, r0
    fb12:	3b01      	subs	r3, #1
    fb14:	4293      	cmp	r3, r2
    fb16:	d803      	bhi.n	fb20 <uart_cb+0x2c>
		change_instruction(newbuf[1]);
    fb18:	7860      	ldrb	r0, [r4, #1]
}
    fb1a:	bc30      	pop	{r4, r5}
		change_instruction(newbuf[1]);
    fb1c:	f7ff bfae 	b.w	fa7c <change_instruction>
		newbuf[i - evt->data.rx.offset] = evt->data.rx.buf[i];
    fb20:	684d      	ldr	r5, [r1, #4]
    fb22:	5cad      	ldrb	r5, [r5, r2]
    fb24:	f800 5b01 	strb.w	r5, [r0], #1
		for (int i = evt->data.rx.offset; i < ((evt->data.rx.len + evt->data.rx.offset)-1); i++)
    fb28:	3201      	adds	r2, #1
    fb2a:	e7f3      	b.n	fb14 <uart_cb+0x20>
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
    fb2c:	6883      	ldr	r3, [r0, #8]
    fb2e:	4904      	ldr	r1, [pc, #16]	; (fb40 <uart_cb+0x4c>)
    fb30:	68dc      	ldr	r4, [r3, #12]
    fb32:	220b      	movs	r2, #11
    fb34:	46a4      	mov	ip, r4
    fb36:	2364      	movs	r3, #100	; 0x64
}
    fb38:	bc30      	pop	{r4, r5}
    fb3a:	4760      	bx	ip
    fb3c:	200020b0 	.word	0x200020b0
    fb40:	200020ba 	.word	0x200020ba

0000fb44 <change_name>:
void change_name(void){
    fb44:	b510      	push	{r4, lr}
	temp = snprintf(namebuf,9,"%c%c%c%c%c%c%c%c"\
    fb46:	4c13      	ldr	r4, [pc, #76]	; (fb94 <change_name+0x50>)
    fb48:	4a13      	ldr	r2, [pc, #76]	; (fb98 <change_name+0x54>)
    fb4a:	7a63      	ldrb	r3, [r4, #9]
void change_name(void){
    fb4c:	b08c      	sub	sp, #48	; 0x30
	temp = snprintf(namebuf,9,"%c%c%c%c%c%c%c%c"\
    fb4e:	2109      	movs	r1, #9
    fb50:	9306      	str	r3, [sp, #24]
    fb52:	7a23      	ldrb	r3, [r4, #8]
    fb54:	9305      	str	r3, [sp, #20]
    fb56:	79e3      	ldrb	r3, [r4, #7]
    fb58:	9304      	str	r3, [sp, #16]
    fb5a:	79a3      	ldrb	r3, [r4, #6]
    fb5c:	9303      	str	r3, [sp, #12]
    fb5e:	7963      	ldrb	r3, [r4, #5]
    fb60:	9302      	str	r3, [sp, #8]
    fb62:	7923      	ldrb	r3, [r4, #4]
    fb64:	9301      	str	r3, [sp, #4]
    fb66:	78e3      	ldrb	r3, [r4, #3]
    fb68:	9300      	str	r3, [sp, #0]
    fb6a:	a809      	add	r0, sp, #36	; 0x24
    fb6c:	78a3      	ldrb	r3, [r4, #2]
    fb6e:	f00d fb91 	bl	1d294 <sniprintf>
	bt_scan_filter_remove_all();
    fb72:	f001 fb03 	bl	1117c <bt_scan_filter_remove_all>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_NAME, namebuf);
    fb76:	a909      	add	r1, sp, #36	; 0x24
    fb78:	2000      	movs	r0, #0
    fb7a:	f001 fab1 	bl	110e0 <bt_scan_filter_add>
	if (err) {
    fb7e:	b120      	cbz	r0, fb8a <change_name+0x46>
		printk("Scanning filters cannot be set\n");
    fb80:	4806      	ldr	r0, [pc, #24]	; (fb9c <change_name+0x58>)
    fb82:	f00d fe17 	bl	1d7b4 <printk>
}
    fb86:	b00c      	add	sp, #48	; 0x30
    fb88:	bd10      	pop	{r4, pc}
	memset(newbuf,0,10);
    fb8a:	6020      	str	r0, [r4, #0]
    fb8c:	6060      	str	r0, [r4, #4]
    fb8e:	8120      	strh	r0, [r4, #8]
    fb90:	e7f9      	b.n	fb86 <change_name+0x42>
    fb92:	bf00      	nop
    fb94:	200020b0 	.word	0x200020b0
    fb98:	000214dd 	.word	0x000214dd
    fb9c:	000214ee 	.word	0x000214ee

0000fba0 <main>:


//Main
void main(void)
{
    fba0:	b570      	push	{r4, r5, r6, lr}
    fba2:	b08a      	sub	sp, #40	; 0x28
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    fba4:	4846      	ldr	r0, [pc, #280]	; (fcc0 <main+0x120>)
    fba6:	f009 f9ef 	bl	18f88 <z_impl_device_get_binding>
	int err;

	//Initializing UART
	const struct device *uart= device_get_binding(DT_LABEL(DT_NODELABEL(uart0)));
	if (uart == NULL) 
    fbaa:	4604      	mov	r4, r0
    fbac:	b928      	cbnz	r0, fbba <main+0x1a>
	{
		printk("Could not find  %s!\n\r", DT_LABEL(DT_NODELABEL(uart0)));
    fbae:	4944      	ldr	r1, [pc, #272]	; (fcc0 <main+0x120>)
    fbb0:	4844      	ldr	r0, [pc, #272]	; (fcc4 <main+0x124>)
		return;
	}
	err = uart_callback_set(uart, uart_cb, NULL);
		if (err){
			printk("could not enable callback error %i\n",err);
    fbb2:	f00d fdff 	bl	1d7b4 <printk>
			break;
		}
		instruction_type = 0;
		
	}	
}
    fbb6:	b00a      	add	sp, #40	; 0x28
    fbb8:	bd70      	pop	{r4, r5, r6, pc}
	if (api->callback_set == NULL) {
    fbba:	6883      	ldr	r3, [r0, #8]
    fbbc:	681b      	ldr	r3, [r3, #0]
    fbbe:	b133      	cbz	r3, fbce <main+0x2e>
	return api->callback_set(dev, callback, user_data);
    fbc0:	4941      	ldr	r1, [pc, #260]	; (fcc8 <main+0x128>)
    fbc2:	2200      	movs	r2, #0
    fbc4:	4798      	blx	r3
		if (err){
    fbc6:	4601      	mov	r1, r0
    fbc8:	b120      	cbz	r0, fbd4 <main+0x34>
			printk("could not enable callback error %i\n",err);
    fbca:	4840      	ldr	r0, [pc, #256]	; (fccc <main+0x12c>)
    fbcc:	e7f1      	b.n	fbb2 <main+0x12>
		return -ENOSYS;
    fbce:	f06f 0157 	mvn.w	r1, #87	; 0x57
    fbd2:	e7fa      	b.n	fbca <main+0x2a>
	return api->rx_enable(dev, buf, len, timeout);
    fbd4:	68a3      	ldr	r3, [r4, #8]
    fbd6:	493e      	ldr	r1, [pc, #248]	; (fcd0 <main+0x130>)
    fbd8:	68dd      	ldr	r5, [r3, #12]
    fbda:	220b      	movs	r2, #11
    fbdc:	2364      	movs	r3, #100	; 0x64
    fbde:	4620      	mov	r0, r4
    fbe0:	47a8      	blx	r5
		if (err){
    fbe2:	2800      	cmp	r0, #0
    fbe4:	d1e7      	bne.n	fbb6 <main+0x16>
	err = bt_enable(ble_ready);
    fbe6:	483b      	ldr	r0, [pc, #236]	; (fcd4 <main+0x134>)
    fbe8:	f003 f9bc 	bl	12f64 <bt_enable>
	if (err) {
    fbec:	b110      	cbz	r0, fbf4 <main+0x54>
		printk("Cold not enable Bluetooth\n");
    fbee:	483a      	ldr	r0, [pc, #232]	; (fcd8 <main+0x138>)
    fbf0:	f00d fde0 	bl	1d7b4 <printk>
	printk("Bluetooth initialized\n");
    fbf4:	4839      	ldr	r0, [pc, #228]	; (fcdc <main+0x13c>)
    fbf6:	f00d fddd 	bl	1d7b4 <printk>
	struct bt_le_scan_param scan_param = {
    fbfa:	ab05      	add	r3, sp, #20
    fbfc:	2100      	movs	r1, #0
    fbfe:	2214      	movs	r2, #20
    fc00:	4618      	mov	r0, r3
    fc02:	f010 ff40 	bl	20a86 <memset>
    fc06:	2401      	movs	r4, #1
    fc08:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
    fc0c:	e9cd 4206 	strd	r4, r2, [sp, #24]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    fc10:	4a33      	ldr	r2, [pc, #204]	; (fce0 <main+0x140>)
	struct bt_scan_init_param scan_init = {
    fc12:	9002      	str	r0, [sp, #8]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    fc14:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
	struct bt_scan_init_param scan_init = {
    fc18:	2500      	movs	r5, #0
	bt_scan_init(&scan_init);
    fc1a:	a802      	add	r0, sp, #8
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    fc1c:	e9cd 2300 	strd	r2, r3, [sp]
	struct bt_scan_init_param scan_init = {
    fc20:	f88d 500c 	strb.w	r5, [sp, #12]
    fc24:	f8cd d010 	str.w	sp, [sp, #16]
	bt_scan_init(&scan_init);
    fc28:	f001 fbb4 	bl	11394 <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
    fc2c:	482d      	ldr	r0, [pc, #180]	; (fce4 <main+0x144>)
    fc2e:	f001 fa47 	bl	110c0 <bt_scan_cb_register>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_NAME, target);
    fc32:	492d      	ldr	r1, [pc, #180]	; (fce8 <main+0x148>)
    fc34:	4628      	mov	r0, r5
    fc36:	f001 fa53 	bl	110e0 <bt_scan_filter_add>
	if (err) {
    fc3a:	4601      	mov	r1, r0
    fc3c:	b1a0      	cbz	r0, fc68 <main+0xc8>
		printk("Scanning filters cannot be set\n");
    fc3e:	482b      	ldr	r0, [pc, #172]	; (fcec <main+0x14c>)
		printk("Filters cannot be turned on\n");
    fc40:	f00d fdb8 	bl	1d7b4 <printk>
		switch (instruction_type)
    fc44:	4c2a      	ldr	r4, [pc, #168]	; (fcf0 <main+0x150>)
	return z_impl_k_sem_take(sem, timeout);
    fc46:	4e2b      	ldr	r6, [pc, #172]	; (fcf4 <main+0x154>)
    fc48:	4625      	mov	r5, r4
    fc4a:	f04f 33ff 	mov.w	r3, #4294967295
    fc4e:	f04f 32ff 	mov.w	r2, #4294967295
    fc52:	4630      	mov	r0, r6
    fc54:	f00a f9f8 	bl	1a048 <z_impl_k_sem_take>
    fc58:	6823      	ldr	r3, [r4, #0]
    fc5a:	3b01      	subs	r3, #1
    fc5c:	2b03      	cmp	r3, #3
    fc5e:	d81b      	bhi.n	fc98 <main+0xf8>
    fc60:	e8df f003 	tbb	[pc, r3]
    fc64:	2b1d1409 	.word	0x2b1d1409
	err = bt_scan_filter_enable(BT_SCAN_NAME_FILTER, false);
    fc68:	4620      	mov	r0, r4
    fc6a:	f001 fab9 	bl	111e0 <bt_scan_filter_enable>
	if (err) {
    fc6e:	2800      	cmp	r0, #0
    fc70:	d0e8      	beq.n	fc44 <main+0xa4>
		printk("Filters cannot be turned on\n");
    fc72:	4821      	ldr	r0, [pc, #132]	; (fcf8 <main+0x158>)
    fc74:	e7e4      	b.n	fc40 <main+0xa0>
			err = bt_scan_start(BT_SCAN_TYPE_SCAN_PASSIVE);
    fc76:	2000      	movs	r0, #0
    fc78:	f001 fbc6 	bl	11408 <bt_scan_start>
			if (err == -EALREADY)
    fc7c:	f110 0f78 	cmn.w	r0, #120	; 0x78
			err = bt_scan_start(BT_SCAN_TYPE_SCAN_PASSIVE);
    fc80:	4601      	mov	r1, r0
			if (err == -EALREADY)
    fc82:	d105      	bne.n	fc90 <main+0xf0>
				printk("Scanning already enable \n");
    fc84:	481d      	ldr	r0, [pc, #116]	; (fcfc <main+0x15c>)
				printk("Scanning is not on");
    fc86:	f00d fd95 	bl	1d7b4 <printk>
				break;
    fc8a:	e005      	b.n	fc98 <main+0xf8>
			err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    fc8c:	2001      	movs	r0, #1
    fc8e:	e7f3      	b.n	fc78 <main+0xd8>
			else if (err) {
    fc90:	b110      	cbz	r0, fc98 <main+0xf8>
				printk("Scanning failed to start, err %d\n", err);
    fc92:	481b      	ldr	r0, [pc, #108]	; (fd00 <main+0x160>)
    fc94:	f00d fd8e 	bl	1d7b4 <printk>
		instruction_type = 0;
    fc98:	2300      	movs	r3, #0
    fc9a:	602b      	str	r3, [r5, #0]
	while (1){
    fc9c:	e7d5      	b.n	fc4a <main+0xaa>
			err = bt_scan_stop();
    fc9e:	f00d fff0 	bl	1dc82 <bt_scan_stop>
			if (err == -EALREADY) {
    fca2:	f110 0f78 	cmn.w	r0, #120	; 0x78
			err = bt_scan_stop();
    fca6:	4601      	mov	r1, r0
			if (err == -EALREADY) {
    fca8:	d101      	bne.n	fcae <main+0x10e>
				printk("Scanning is not on");
    fcaa:	4816      	ldr	r0, [pc, #88]	; (fd04 <main+0x164>)
    fcac:	e7eb      	b.n	fc86 <main+0xe6>
			else if (err){
    fcae:	b110      	cbz	r0, fcb6 <main+0x116>
				printk("Scanning failed to stop, err %d\n", err);
    fcb0:	4815      	ldr	r0, [pc, #84]	; (fd08 <main+0x168>)
    fcb2:	f00d fd7f 	bl	1d7b4 <printk>
			printk("Scanning has stopped \n");
    fcb6:	4815      	ldr	r0, [pc, #84]	; (fd0c <main+0x16c>)
    fcb8:	e7e5      	b.n	fc86 <main+0xe6>
			change_name();
    fcba:	f7ff ff43 	bl	fb44 <change_name>
			break;
    fcbe:	e7eb      	b.n	fc98 <main+0xf8>
    fcc0:	0002150e 	.word	0x0002150e
    fcc4:	00021515 	.word	0x00021515
    fcc8:	0000faf5 	.word	0x0000faf5
    fccc:	0002152b 	.word	0x0002152b
    fcd0:	200020ba 	.word	0x200020ba
    fcd4:	0000f9e9 	.word	0x0000f9e9
    fcd8:	0002154f 	.word	0x0002154f
    fcdc:	0002156a 	.word	0x0002156a
    fce0:	00280018 	.word	0x00280018
    fce4:	20000410 	.word	0x20000410
    fce8:	00021581 	.word	0x00021581
    fcec:	000214ee 	.word	0x000214ee
    fcf0:	20001ce8 	.word	0x20001ce8
    fcf4:	20000670 	.word	0x20000670
    fcf8:	00021589 	.word	0x00021589
    fcfc:	000215a6 	.word	0x000215a6
    fd00:	000215c0 	.word	0x000215c0
    fd04:	000215e2 	.word	0x000215e2
    fd08:	000215f5 	.word	0x000215f5
    fd0c:	00021616 	.word	0x00021616

0000fd10 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    fd10:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    fd12:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    fd16:	2b02      	cmp	r3, #2
{
    fd18:	b570      	push	{r4, r5, r6, lr}
    fd1a:	4604      	mov	r4, r0
    fd1c:	460e      	mov	r6, r1
	notify->result = res;
    fd1e:	6081      	str	r1, [r0, #8]
	switch (method) {
    fd20:	d010      	beq.n	fd44 <sys_notify_finalize+0x34>
    fd22:	2b03      	cmp	r3, #3
    fd24:	d004      	beq.n	fd30 <sys_notify_finalize+0x20>
    fd26:	2b01      	cmp	r3, #1
    fd28:	d10f      	bne.n	fd4a <sys_notify_finalize+0x3a>
    fd2a:	2500      	movs	r5, #0
    fd2c:	4628      	mov	r0, r5
    fd2e:	e001      	b.n	fd34 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    fd30:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    fd32:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    fd34:	2300      	movs	r3, #0
    fd36:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    fd38:	b110      	cbz	r0, fd40 <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    fd3a:	4631      	mov	r1, r6
    fd3c:	f00d f94e 	bl	1cfdc <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    fd40:	4628      	mov	r0, r5
    fd42:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
    fd44:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    fd46:	2500      	movs	r5, #0
		break;
    fd48:	e7f4      	b.n	fd34 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    fd4a:	4a06      	ldr	r2, [pc, #24]	; (fd64 <sys_notify_finalize+0x54>)
    fd4c:	4906      	ldr	r1, [pc, #24]	; (fd68 <sys_notify_finalize+0x58>)
    fd4e:	4807      	ldr	r0, [pc, #28]	; (fd6c <sys_notify_finalize+0x5c>)
    fd50:	2345      	movs	r3, #69	; 0x45
    fd52:	f00d fd2f 	bl	1d7b4 <printk>
    fd56:	4803      	ldr	r0, [pc, #12]	; (fd64 <sys_notify_finalize+0x54>)
    fd58:	2145      	movs	r1, #69	; 0x45
    fd5a:	f00d ff85 	bl	1dc68 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    fd5e:	2500      	movs	r5, #0
    fd60:	e7e7      	b.n	fd32 <sys_notify_finalize+0x22>
    fd62:	bf00      	nop
    fd64:	0002162d 	.word	0x0002162d
    fd68:	00023382 	.word	0x00023382
    fd6c:	00021650 	.word	0x00021650

0000fd70 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    fd70:	680b      	ldr	r3, [r1, #0]
    fd72:	3301      	adds	r3, #1
    fd74:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    fd76:	4b01      	ldr	r3, [pc, #4]	; (fd7c <char_out+0xc>)
    fd78:	681b      	ldr	r3, [r3, #0]
    fd7a:	4718      	bx	r3
    fd7c:	20000418 	.word	0x20000418

0000fd80 <__printk_hook_install>:
	_char_out = fn;
    fd80:	4b01      	ldr	r3, [pc, #4]	; (fd88 <__printk_hook_install+0x8>)
    fd82:	6018      	str	r0, [r3, #0]
}
    fd84:	4770      	bx	lr
    fd86:	bf00      	nop
    fd88:	20000418 	.word	0x20000418

0000fd8c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    fd8c:	b507      	push	{r0, r1, r2, lr}
    fd8e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    fd90:	2100      	movs	r1, #0
{
    fd92:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    fd94:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    fd96:	4803      	ldr	r0, [pc, #12]	; (fda4 <vprintk+0x18>)
    fd98:	a901      	add	r1, sp, #4
    fd9a:	f000 fcc7 	bl	1072c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    fd9e:	b003      	add	sp, #12
    fda0:	f85d fb04 	ldr.w	pc, [sp], #4
    fda4:	0000fd71 	.word	0x0000fd71

0000fda8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    fda8:	b530      	push	{r4, r5, lr}
    fdaa:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    fdac:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    fdb0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    fdb2:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    fdb4:	a901      	add	r1, sp, #4
    fdb6:	4805      	ldr	r0, [pc, #20]	; (fdcc <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    fdb8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    fdba:	f000 fcb7 	bl	1072c <cbvprintf>

	if (ctx.count < ctx.max) {
    fdbe:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    fdc2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    fdc4:	bfb8      	it	lt
    fdc6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    fdc8:	b005      	add	sp, #20
    fdca:	bd30      	pop	{r4, r5, pc}
    fdcc:	0001d78f 	.word	0x0001d78f

0000fdd0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    fdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fdd4:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    fdd8:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    fdda:	f019 0f08 	tst.w	r9, #8
{
    fdde:	4604      	mov	r4, r0
    fde0:	9203      	str	r2, [sp, #12]
	if (processing) {
    fde2:	d022      	beq.n	fe2a <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    fde4:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    fde6:	bf0c      	ite	eq
    fde8:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    fdec:	f049 0920 	orrne.w	r9, r9, #32
    fdf0:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    fdf4:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fdf6:	4620      	mov	r0, r4
    fdf8:	f009 fd72 	bl	198e0 <z_spin_unlock_valid>
    fdfc:	b968      	cbnz	r0, fe1a <process_event+0x4a>
    fdfe:	4a9f      	ldr	r2, [pc, #636]	; (1007c <CONFIG_PM_SRAM_SIZE+0x7c>)
    fe00:	499f      	ldr	r1, [pc, #636]	; (10080 <CONFIG_PM_SRAM_SIZE+0x80>)
    fe02:	48a0      	ldr	r0, [pc, #640]	; (10084 <CONFIG_PM_SRAM_SIZE+0x84>)
    fe04:	23ac      	movs	r3, #172	; 0xac
    fe06:	f00d fcd5 	bl	1d7b4 <printk>
    fe0a:	489f      	ldr	r0, [pc, #636]	; (10088 <CONFIG_PM_SRAM_SIZE+0x88>)
    fe0c:	4621      	mov	r1, r4
    fe0e:	f00d fcd1 	bl	1d7b4 <printk>
    fe12:	489a      	ldr	r0, [pc, #616]	; (1007c <CONFIG_PM_SRAM_SIZE+0x7c>)
    fe14:	21ac      	movs	r1, #172	; 0xac
    fe16:	f00d ff27 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    fe1a:	9b03      	ldr	r3, [sp, #12]
    fe1c:	f383 8811 	msr	BASEPRI, r3
    fe20:	f3bf 8f6f 	isb	sy
}
    fe24:	b005      	add	sp, #20
    fe26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    fe2a:	4f98      	ldr	r7, [pc, #608]	; (1008c <CONFIG_PM_SRAM_SIZE+0x8c>)
    fe2c:	f8df 8254 	ldr.w	r8, [pc, #596]	; 10084 <CONFIG_PM_SRAM_SIZE+0x84>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fe30:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    fe34:	2902      	cmp	r1, #2
    fe36:	d106      	bne.n	fe46 <process_event+0x76>
			evt = process_recheck(mgr);
    fe38:	4620      	mov	r0, r4
    fe3a:	f00d fcd5 	bl	1d7e8 <process_recheck>
		if (evt == EVT_NOP) {
    fe3e:	2800      	cmp	r0, #0
    fe40:	d0d8      	beq.n	fdf4 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    fe42:	2801      	cmp	r0, #1
    fe44:	d168      	bne.n	ff18 <process_event+0x148>
			res = mgr->last_res;
    fe46:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fe4a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    fe4c:	f1bb 0f00 	cmp.w	fp, #0
    fe50:	da0a      	bge.n	fe68 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    fe52:	2600      	movs	r6, #0
		*clients = mgr->clients;
    fe54:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fe56:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    fe5a:	e9c4 6600 	strd	r6, r6, [r4]
    fe5e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    fe62:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    fe64:	9601      	str	r6, [sp, #4]
    fe66:	e027      	b.n	feb8 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fe68:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    fe6c:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    fe6e:	2901      	cmp	r1, #1
    fe70:	d834      	bhi.n	fedc <process_event+0x10c>
	list->head = NULL;
    fe72:	2100      	movs	r1, #0
    fe74:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    fe78:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    fe7a:	6825      	ldr	r5, [r4, #0]
    fe7c:	b29b      	uxth	r3, r3
	list->tail = NULL;
    fe7e:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    fe82:	d10c      	bne.n	fe9e <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    fe84:	428d      	cmp	r5, r1
    fe86:	462a      	mov	r2, r5
    fe88:	bf38      	it	cc
    fe8a:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    fe8c:	b12a      	cbz	r2, fe9a <process_event+0xca>
				mgr->refs += 1U;
    fe8e:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fe90:	6812      	ldr	r2, [r2, #0]
    fe92:	3101      	adds	r1, #1
    fe94:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    fe96:	2a00      	cmp	r2, #0
    fe98:	d1f8      	bne.n	fe8c <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fe9a:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    fe9e:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    fea0:	4620      	mov	r0, r4
    fea2:	f00d fca1 	bl	1d7e8 <process_recheck>
    fea6:	4606      	mov	r6, r0
    fea8:	2800      	cmp	r0, #0
    feaa:	d0db      	beq.n	fe64 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    feac:	8ba3      	ldrh	r3, [r4, #28]
    feae:	f043 0320 	orr.w	r3, r3, #32
    feb2:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    feb4:	2300      	movs	r3, #0
    feb6:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    feb8:	8ba3      	ldrh	r3, [r4, #28]
    feba:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    febe:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    fec0:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    fec2:	d003      	beq.n	fecc <process_event+0xfc>
		if (do_monitors
    fec4:	68a2      	ldr	r2, [r4, #8]
    fec6:	2a00      	cmp	r2, #0
    fec8:	f040 80f0 	bne.w	100ac <CONFIG_PM_SRAM_SIZE+0xac>
		    || !sys_slist_is_empty(&clients)
    fecc:	b91d      	cbnz	r5, fed6 <process_event+0x106>
		    || (transit != NULL)) {
    fece:	9a01      	ldr	r2, [sp, #4]
    fed0:	2a00      	cmp	r2, #0
    fed2:	f000 8136 	beq.w	10142 <CONFIG_PM_SRAM_SIZE+0x142>
    fed6:	f04f 0900 	mov.w	r9, #0
    feda:	e0e9      	b.n	100b0 <CONFIG_PM_SRAM_SIZE+0xb0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    fedc:	2a04      	cmp	r2, #4
    fede:	d10e      	bne.n	fefe <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fee0:	f023 0307 	bic.w	r3, r3, #7
    fee4:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    fee6:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    fee8:	4620      	mov	r0, r4
    feea:	f00d fc7d 	bl	1d7e8 <process_recheck>
    feee:	4605      	mov	r5, r0
    fef0:	b118      	cbz	r0, fefa <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    fef2:	f042 0220 	orr.w	r2, r2, #32
    fef6:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    fef8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    fefa:	9501      	str	r5, [sp, #4]
    fefc:	e7dc      	b.n	feb8 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    fefe:	4640      	mov	r0, r8
    ff00:	4963      	ldr	r1, [pc, #396]	; (10090 <CONFIG_PM_SRAM_SIZE+0x90>)
    ff02:	f240 131b 	movw	r3, #283	; 0x11b
    ff06:	463a      	mov	r2, r7
    ff08:	f00d fc54 	bl	1d7b4 <printk>
    ff0c:	f240 111b 	movw	r1, #283	; 0x11b
    ff10:	4638      	mov	r0, r7
    ff12:	f00d fea9 	bl	1dc68 <assert_post_action>
    ff16:	e7ef      	b.n	fef8 <process_event+0x128>
		} else if (evt == EVT_START) {
    ff18:	2803      	cmp	r0, #3
    ff1a:	d135      	bne.n	ff88 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    ff1c:	f1b9 0f00 	cmp.w	r9, #0
    ff20:	d00b      	beq.n	ff3a <process_event+0x16a>
    ff22:	495c      	ldr	r1, [pc, #368]	; (10094 <CONFIG_PM_SRAM_SIZE+0x94>)
    ff24:	4640      	mov	r0, r8
    ff26:	f44f 73ab 	mov.w	r3, #342	; 0x156
    ff2a:	463a      	mov	r2, r7
    ff2c:	f00d fc42 	bl	1d7b4 <printk>
    ff30:	f44f 71ab 	mov.w	r1, #342	; 0x156
    ff34:	4638      	mov	r0, r7
    ff36:	f00d fe97 	bl	1dc68 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    ff3a:	6823      	ldr	r3, [r4, #0]
    ff3c:	b95b      	cbnz	r3, ff56 <process_event+0x186>
    ff3e:	4956      	ldr	r1, [pc, #344]	; (10098 <CONFIG_PM_SRAM_SIZE+0x98>)
    ff40:	4640      	mov	r0, r8
    ff42:	f240 1357 	movw	r3, #343	; 0x157
    ff46:	463a      	mov	r2, r7
    ff48:	f00d fc34 	bl	1d7b4 <printk>
    ff4c:	f240 1157 	movw	r1, #343	; 0x157
    ff50:	4638      	mov	r0, r7
    ff52:	f00d fe89 	bl	1dc68 <assert_post_action>
			transit = mgr->transitions->start;
    ff56:	6923      	ldr	r3, [r4, #16]
    ff58:	681b      	ldr	r3, [r3, #0]
    ff5a:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    ff5c:	b95b      	cbnz	r3, ff76 <process_event+0x1a6>
    ff5e:	494f      	ldr	r1, [pc, #316]	; (1009c <CONFIG_PM_SRAM_SIZE+0x9c>)
    ff60:	4640      	mov	r0, r8
    ff62:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    ff66:	463a      	mov	r2, r7
    ff68:	f00d fc24 	bl	1d7b4 <printk>
    ff6c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    ff70:	4638      	mov	r0, r7
    ff72:	f00d fe79 	bl	1dc68 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ff76:	8ba3      	ldrh	r3, [r4, #28]
    ff78:	f023 0307 	bic.w	r3, r3, #7
    ff7c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    ff80:	83a3      	strh	r3, [r4, #28]
}
    ff82:	2500      	movs	r5, #0
		res = 0;
    ff84:	46ab      	mov	fp, r5
}
    ff86:	e797      	b.n	feb8 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    ff88:	2804      	cmp	r0, #4
    ff8a:	d132      	bne.n	fff2 <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    ff8c:	f1b9 0f02 	cmp.w	r9, #2
    ff90:	d00b      	beq.n	ffaa <process_event+0x1da>
    ff92:	4943      	ldr	r1, [pc, #268]	; (100a0 <CONFIG_PM_SRAM_SIZE+0xa0>)
    ff94:	4640      	mov	r0, r8
    ff96:	f240 135d 	movw	r3, #349	; 0x15d
    ff9a:	463a      	mov	r2, r7
    ff9c:	f00d fc0a 	bl	1d7b4 <printk>
    ffa0:	f240 115d 	movw	r1, #349	; 0x15d
    ffa4:	4638      	mov	r0, r7
    ffa6:	f00d fe5f 	bl	1dc68 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    ffaa:	8be3      	ldrh	r3, [r4, #30]
    ffac:	b15b      	cbz	r3, ffc6 <process_event+0x1f6>
    ffae:	493d      	ldr	r1, [pc, #244]	; (100a4 <CONFIG_PM_SRAM_SIZE+0xa4>)
    ffb0:	4640      	mov	r0, r8
    ffb2:	f44f 73af 	mov.w	r3, #350	; 0x15e
    ffb6:	463a      	mov	r2, r7
    ffb8:	f00d fbfc 	bl	1d7b4 <printk>
    ffbc:	f44f 71af 	mov.w	r1, #350	; 0x15e
    ffc0:	4638      	mov	r0, r7
    ffc2:	f00d fe51 	bl	1dc68 <assert_post_action>
			transit = mgr->transitions->stop;
    ffc6:	6923      	ldr	r3, [r4, #16]
    ffc8:	685b      	ldr	r3, [r3, #4]
    ffca:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    ffcc:	b95b      	cbnz	r3, ffe6 <process_event+0x216>
    ffce:	4933      	ldr	r1, [pc, #204]	; (1009c <CONFIG_PM_SRAM_SIZE+0x9c>)
    ffd0:	4640      	mov	r0, r8
    ffd2:	f240 1361 	movw	r3, #353	; 0x161
    ffd6:	463a      	mov	r2, r7
    ffd8:	f00d fbec 	bl	1d7b4 <printk>
    ffdc:	f240 1161 	movw	r1, #353	; 0x161
    ffe0:	4638      	mov	r0, r7
    ffe2:	f00d fe41 	bl	1dc68 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ffe6:	8ba3      	ldrh	r3, [r4, #28]
    ffe8:	f023 0307 	bic.w	r3, r3, #7
    ffec:	f043 0304 	orr.w	r3, r3, #4
    fff0:	e7c6      	b.n	ff80 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    fff2:	2805      	cmp	r0, #5
    fff4:	d132      	bne.n	1005c <CONFIG_PM_SRAM_SIZE+0x5c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    fff6:	f1b9 0f01 	cmp.w	r9, #1
    fffa:	d00b      	beq.n	10014 <CONFIG_PM_SRAM_SIZE+0x14>
    fffc:	492a      	ldr	r1, [pc, #168]	; (100a8 <CONFIG_PM_SRAM_SIZE+0xa8>)
    fffe:	4640      	mov	r0, r8
   10000:	f44f 73b2 	mov.w	r3, #356	; 0x164
   10004:	463a      	mov	r2, r7
   10006:	f00d fbd5 	bl	1d7b4 <printk>
   1000a:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1000e:	4638      	mov	r0, r7
   10010:	f00d fe2a 	bl	1dc68 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10014:	6823      	ldr	r3, [r4, #0]
   10016:	b95b      	cbnz	r3, 10030 <CONFIG_PM_SRAM_SIZE+0x30>
   10018:	491f      	ldr	r1, [pc, #124]	; (10098 <CONFIG_PM_SRAM_SIZE+0x98>)
   1001a:	4640      	mov	r0, r8
   1001c:	f240 1365 	movw	r3, #357	; 0x165
   10020:	463a      	mov	r2, r7
   10022:	f00d fbc7 	bl	1d7b4 <printk>
   10026:	f240 1165 	movw	r1, #357	; 0x165
   1002a:	4638      	mov	r0, r7
   1002c:	f00d fe1c 	bl	1dc68 <assert_post_action>
			transit = mgr->transitions->reset;
   10030:	6923      	ldr	r3, [r4, #16]
   10032:	689b      	ldr	r3, [r3, #8]
   10034:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   10036:	b95b      	cbnz	r3, 10050 <CONFIG_PM_SRAM_SIZE+0x50>
   10038:	4918      	ldr	r1, [pc, #96]	; (1009c <CONFIG_PM_SRAM_SIZE+0x9c>)
   1003a:	4640      	mov	r0, r8
   1003c:	f44f 73b4 	mov.w	r3, #360	; 0x168
   10040:	463a      	mov	r2, r7
   10042:	f00d fbb7 	bl	1d7b4 <printk>
   10046:	f44f 71b4 	mov.w	r1, #360	; 0x168
   1004a:	4638      	mov	r0, r7
   1004c:	f00d fe0c 	bl	1dc68 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10050:	8ba3      	ldrh	r3, [r4, #28]
   10052:	f023 0307 	bic.w	r3, r3, #7
   10056:	f043 0305 	orr.w	r3, r3, #5
   1005a:	e791      	b.n	ff80 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
   1005c:	490c      	ldr	r1, [pc, #48]	; (10090 <CONFIG_PM_SRAM_SIZE+0x90>)
   1005e:	f240 136b 	movw	r3, #363	; 0x16b
   10062:	463a      	mov	r2, r7
   10064:	4640      	mov	r0, r8
   10066:	f00d fba5 	bl	1d7b4 <printk>
   1006a:	2500      	movs	r5, #0
   1006c:	f240 116b 	movw	r1, #363	; 0x16b
   10070:	4638      	mov	r0, r7
   10072:	f00d fdf9 	bl	1dc68 <assert_post_action>
		onoff_transition_fn transit = NULL;
   10076:	9501      	str	r5, [sp, #4]
   10078:	e784      	b.n	ff84 <process_event+0x1b4>
   1007a:	bf00      	nop
   1007c:	00021710 	.word	0x00021710
   10080:	00021736 	.word	0x00021736
   10084:	00021650 	.word	0x00021650
   10088:	0002174d 	.word	0x0002174d
   1008c:	0002166d 	.word	0x0002166d
   10090:	00023382 	.word	0x00023382
   10094:	0002168f 	.word	0x0002168f
   10098:	0002169b 	.word	0x0002169b
   1009c:	000216be 	.word	0x000216be
   100a0:	000216d5 	.word	0x000216d5
   100a4:	000216eb 	.word	0x000216eb
   100a8:	000216fa 	.word	0x000216fa
				   && !sys_slist_is_empty(&mgr->monitors);
   100ac:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   100b0:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   100b4:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
   100b8:	83a3      	strh	r3, [r4, #28]
   100ba:	4650      	mov	r0, sl
   100bc:	f009 fc10 	bl	198e0 <z_spin_unlock_valid>
   100c0:	b968      	cbnz	r0, 100de <CONFIG_PM_SRAM_SIZE+0xde>
   100c2:	4a3a      	ldr	r2, [pc, #232]	; (101ac <CONFIG_PM_SRAM_SIZE+0x1ac>)
   100c4:	493a      	ldr	r1, [pc, #232]	; (101b0 <CONFIG_PM_SRAM_SIZE+0x1b0>)
   100c6:	23ac      	movs	r3, #172	; 0xac
   100c8:	4640      	mov	r0, r8
   100ca:	f00d fb73 	bl	1d7b4 <printk>
   100ce:	4839      	ldr	r0, [pc, #228]	; (101b4 <CONFIG_PM_SRAM_SIZE+0x1b4>)
   100d0:	4651      	mov	r1, sl
   100d2:	f00d fb6f 	bl	1d7b4 <printk>
   100d6:	4835      	ldr	r0, [pc, #212]	; (101ac <CONFIG_PM_SRAM_SIZE+0x1ac>)
   100d8:	21ac      	movs	r1, #172	; 0xac
   100da:	f00d fdc5 	bl	1dc68 <assert_post_action>
   100de:	9b03      	ldr	r3, [sp, #12]
   100e0:	f383 8811 	msr	BASEPRI, r3
   100e4:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   100e8:	f1b9 0f00 	cmp.w	r9, #0
   100ec:	d138      	bne.n	10160 <CONFIG_PM_SRAM_SIZE+0x160>
	while (!sys_slist_is_empty(list)) {
   100ee:	2d00      	cmp	r5, #0
   100f0:	d14b      	bne.n	1018a <CONFIG_PM_SRAM_SIZE+0x18a>
			if (transit != NULL) {
   100f2:	9b01      	ldr	r3, [sp, #4]
   100f4:	b113      	cbz	r3, 100fc <CONFIG_PM_SRAM_SIZE+0xfc>
				transit(mgr, transition_complete);
   100f6:	4930      	ldr	r1, [pc, #192]	; (101b8 <CONFIG_PM_SRAM_SIZE+0x1b8>)
   100f8:	4620      	mov	r0, r4
   100fa:	4798      	blx	r3
	__asm__ volatile(
   100fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   10100:	f3ef 8b11 	mrs	fp, BASEPRI
   10104:	f383 8812 	msr	BASEPRI_MAX, r3
   10108:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1010c:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   1010e:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10112:	f009 fbd7 	bl	198c4 <z_spin_lock_valid>
   10116:	b968      	cbnz	r0, 10134 <CONFIG_PM_SRAM_SIZE+0x134>
   10118:	4a24      	ldr	r2, [pc, #144]	; (101ac <CONFIG_PM_SRAM_SIZE+0x1ac>)
   1011a:	4928      	ldr	r1, [pc, #160]	; (101bc <CONFIG_PM_SRAM_SIZE+0x1bc>)
   1011c:	2381      	movs	r3, #129	; 0x81
   1011e:	4640      	mov	r0, r8
   10120:	f00d fb48 	bl	1d7b4 <printk>
   10124:	4826      	ldr	r0, [pc, #152]	; (101c0 <CONFIG_PM_SRAM_SIZE+0x1c0>)
   10126:	4651      	mov	r1, sl
   10128:	f00d fb44 	bl	1d7b4 <printk>
   1012c:	481f      	ldr	r0, [pc, #124]	; (101ac <CONFIG_PM_SRAM_SIZE+0x1ac>)
   1012e:	2181      	movs	r1, #129	; 0x81
   10130:	f00d fd9a 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   10134:	4650      	mov	r0, sl
   10136:	f009 fbe3 	bl	19900 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1013a:	8ba3      	ldrh	r3, [r4, #28]
   1013c:	f023 0308 	bic.w	r3, r3, #8
   10140:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10142:	8ba3      	ldrh	r3, [r4, #28]
   10144:	06da      	lsls	r2, r3, #27
   10146:	d528      	bpl.n	1019a <CONFIG_PM_SRAM_SIZE+0x19a>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10148:	f023 0310 	bic.w	r3, r3, #16
   1014c:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   1014e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   10150:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   10154:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   10158:	2900      	cmp	r1, #0
   1015a:	f47f ae6b 	bne.w	fe34 <process_event+0x64>
out:
   1015e:	e649      	b.n	fdf4 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10160:	68a1      	ldr	r1, [r4, #8]
   10162:	2900      	cmp	r1, #0
   10164:	d0c3      	beq.n	100ee <CONFIG_PM_SRAM_SIZE+0xee>
	return node->next;
   10166:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   10168:	9a02      	ldr	r2, [sp, #8]
   1016a:	2b00      	cmp	r3, #0
   1016c:	bf38      	it	cc
   1016e:	2300      	movcc	r3, #0
   10170:	4699      	mov	r9, r3
   10172:	684b      	ldr	r3, [r1, #4]
   10174:	4620      	mov	r0, r4
   10176:	461e      	mov	r6, r3
   10178:	465b      	mov	r3, fp
   1017a:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1017c:	f1b9 0f00 	cmp.w	r9, #0
   10180:	d0b5      	beq.n	100ee <CONFIG_PM_SRAM_SIZE+0xee>
   10182:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10186:	4649      	mov	r1, r9
   10188:	e7ee      	b.n	10168 <CONFIG_PM_SRAM_SIZE+0x168>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1018a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1018c:	9a02      	ldr	r2, [sp, #8]
   1018e:	682d      	ldr	r5, [r5, #0]
   10190:	465b      	mov	r3, fp
   10192:	4620      	mov	r0, r4
   10194:	f00d fb44 	bl	1d820 <notify_one>
   10198:	e7a9      	b.n	100ee <CONFIG_PM_SRAM_SIZE+0xee>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1019a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1019e:	bf1e      	ittt	ne
   101a0:	f023 0320 	bicne.w	r3, r3, #32
   101a4:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   101a6:	2102      	movne	r1, #2
   101a8:	e7d2      	b.n	10150 <CONFIG_PM_SRAM_SIZE+0x150>
   101aa:	bf00      	nop
   101ac:	00021710 	.word	0x00021710
   101b0:	00021736 	.word	0x00021736
   101b4:	0002174d 	.word	0x0002174d
   101b8:	000101c5 	.word	0x000101c5
   101bc:	00021762 	.word	0x00021762
   101c0:	00021777 	.word	0x00021777

000101c4 <transition_complete>:
{
   101c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   101c6:	4604      	mov	r4, r0
   101c8:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   101ca:	f100 0614 	add.w	r6, r0, #20
   101ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   101d2:	f3ef 8711 	mrs	r7, BASEPRI
   101d6:	f383 8812 	msr	BASEPRI_MAX, r3
   101da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   101de:	4630      	mov	r0, r6
   101e0:	f009 fb70 	bl	198c4 <z_spin_lock_valid>
   101e4:	b968      	cbnz	r0, 10202 <transition_complete+0x3e>
   101e6:	4a0c      	ldr	r2, [pc, #48]	; (10218 <transition_complete+0x54>)
   101e8:	490c      	ldr	r1, [pc, #48]	; (1021c <transition_complete+0x58>)
   101ea:	480d      	ldr	r0, [pc, #52]	; (10220 <transition_complete+0x5c>)
   101ec:	2381      	movs	r3, #129	; 0x81
   101ee:	f00d fae1 	bl	1d7b4 <printk>
   101f2:	480c      	ldr	r0, [pc, #48]	; (10224 <transition_complete+0x60>)
   101f4:	4631      	mov	r1, r6
   101f6:	f00d fadd 	bl	1d7b4 <printk>
   101fa:	4807      	ldr	r0, [pc, #28]	; (10218 <transition_complete+0x54>)
   101fc:	2181      	movs	r1, #129	; 0x81
   101fe:	f00d fd33 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   10202:	4630      	mov	r0, r6
   10204:	f009 fb7c 	bl	19900 <z_spin_lock_set_owner>
	mgr->last_res = res;
   10208:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   1020a:	463a      	mov	r2, r7
   1020c:	4620      	mov	r0, r4
   1020e:	2101      	movs	r1, #1
}
   10210:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   10214:	f7ff bddc 	b.w	fdd0 <process_event>
   10218:	00021710 	.word	0x00021710
   1021c:	00021762 	.word	0x00021762
   10220:	00021650 	.word	0x00021650
   10224:	00021777 	.word	0x00021777

00010228 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   10228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1022c:	4604      	mov	r4, r0
   1022e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   10230:	f00d fb0c 	bl	1d84c <validate_args>

	if (rv < 0) {
   10234:	1e05      	subs	r5, r0, #0
   10236:	db5e      	blt.n	102f6 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   10238:	f104 0914 	add.w	r9, r4, #20
   1023c:	f04f 0340 	mov.w	r3, #64	; 0x40
   10240:	f3ef 8a11 	mrs	sl, BASEPRI
   10244:	f383 8812 	msr	BASEPRI_MAX, r3
   10248:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1024c:	4648      	mov	r0, r9
   1024e:	f009 fb39 	bl	198c4 <z_spin_lock_valid>
   10252:	b968      	cbnz	r0, 10270 <onoff_request+0x48>
   10254:	4a38      	ldr	r2, [pc, #224]	; (10338 <onoff_request+0x110>)
   10256:	4939      	ldr	r1, [pc, #228]	; (1033c <onoff_request+0x114>)
   10258:	4839      	ldr	r0, [pc, #228]	; (10340 <onoff_request+0x118>)
   1025a:	2381      	movs	r3, #129	; 0x81
   1025c:	f00d faaa 	bl	1d7b4 <printk>
   10260:	4838      	ldr	r0, [pc, #224]	; (10344 <onoff_request+0x11c>)
   10262:	4649      	mov	r1, r9
   10264:	f00d faa6 	bl	1d7b4 <printk>
   10268:	4833      	ldr	r0, [pc, #204]	; (10338 <onoff_request+0x110>)
   1026a:	2181      	movs	r1, #129	; 0x81
   1026c:	f00d fcfc 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   10270:	4648      	mov	r0, r9
   10272:	f009 fb45 	bl	19900 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   10276:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10278:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1027a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1027e:	428b      	cmp	r3, r1
   10280:	f002 0607 	and.w	r6, r2, #7
   10284:	d050      	beq.n	10328 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   10286:	2e02      	cmp	r6, #2
   10288:	d124      	bne.n	102d4 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1028a:	3301      	adds	r3, #1
   1028c:	83e3      	strh	r3, [r4, #30]
	rv = state;
   1028e:	4635      	mov	r5, r6
		notify = true;
   10290:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10294:	4648      	mov	r0, r9
   10296:	f009 fb23 	bl	198e0 <z_spin_unlock_valid>
   1029a:	b968      	cbnz	r0, 102b8 <onoff_request+0x90>
   1029c:	4a26      	ldr	r2, [pc, #152]	; (10338 <onoff_request+0x110>)
   1029e:	492a      	ldr	r1, [pc, #168]	; (10348 <onoff_request+0x120>)
   102a0:	4827      	ldr	r0, [pc, #156]	; (10340 <onoff_request+0x118>)
   102a2:	23ac      	movs	r3, #172	; 0xac
   102a4:	f00d fa86 	bl	1d7b4 <printk>
   102a8:	4828      	ldr	r0, [pc, #160]	; (1034c <onoff_request+0x124>)
   102aa:	4649      	mov	r1, r9
   102ac:	f00d fa82 	bl	1d7b4 <printk>
   102b0:	4821      	ldr	r0, [pc, #132]	; (10338 <onoff_request+0x110>)
   102b2:	21ac      	movs	r1, #172	; 0xac
   102b4:	f00d fcd8 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   102b8:	f38a 8811 	msr	BASEPRI, sl
   102bc:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   102c0:	f1b8 0f00 	cmp.w	r8, #0
   102c4:	d017      	beq.n	102f6 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   102c6:	2300      	movs	r3, #0
   102c8:	4632      	mov	r2, r6
   102ca:	4639      	mov	r1, r7
   102cc:	4620      	mov	r0, r4
   102ce:	f00d faa7 	bl	1d820 <notify_one>
   102d2:	e010      	b.n	102f6 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   102d4:	0793      	lsls	r3, r2, #30
   102d6:	d001      	beq.n	102dc <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   102d8:	2e06      	cmp	r6, #6
   102da:	d10f      	bne.n	102fc <onoff_request+0xd4>
	parent->next = child;
   102dc:	2300      	movs	r3, #0
   102de:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   102e0:	6863      	ldr	r3, [r4, #4]
   102e2:	b9f3      	cbnz	r3, 10322 <onoff_request+0xfa>
	list->head = node;
   102e4:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   102e8:	4635      	mov	r5, r6
   102ea:	b9fe      	cbnz	r6, 1032c <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   102ec:	4652      	mov	r2, sl
   102ee:	2102      	movs	r1, #2
   102f0:	4620      	mov	r0, r4
   102f2:	f7ff fd6d 	bl	fdd0 <process_event>
		}
	}

	return rv;
}
   102f6:	4628      	mov	r0, r5
   102f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   102fc:	2e05      	cmp	r6, #5
   102fe:	d018      	beq.n	10332 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   10300:	2e01      	cmp	r6, #1
   10302:	d00b      	beq.n	1031c <onoff_request+0xf4>
   10304:	4912      	ldr	r1, [pc, #72]	; (10350 <onoff_request+0x128>)
   10306:	480e      	ldr	r0, [pc, #56]	; (10340 <onoff_request+0x118>)
   10308:	4a12      	ldr	r2, [pc, #72]	; (10354 <onoff_request+0x12c>)
   1030a:	f240 13c9 	movw	r3, #457	; 0x1c9
   1030e:	f00d fa51 	bl	1d7b4 <printk>
   10312:	4810      	ldr	r0, [pc, #64]	; (10354 <onoff_request+0x12c>)
   10314:	f240 11c9 	movw	r1, #457	; 0x1c9
   10318:	f00d fca6 	bl	1dc68 <assert_post_action>
		rv = -EIO;
   1031c:	f06f 0504 	mvn.w	r5, #4
   10320:	e004      	b.n	1032c <onoff_request+0x104>
	parent->next = child;
   10322:	601f      	str	r7, [r3, #0]
	list->tail = node;
   10324:	6067      	str	r7, [r4, #4]
}
   10326:	e7df      	b.n	102e8 <onoff_request+0xc0>
		rv = -EAGAIN;
   10328:	f06f 050a 	mvn.w	r5, #10
   1032c:	f04f 0800 	mov.w	r8, #0
   10330:	e7b0      	b.n	10294 <onoff_request+0x6c>
		rv = -ENOTSUP;
   10332:	f06f 0585 	mvn.w	r5, #133	; 0x85
   10336:	e7f9      	b.n	1032c <onoff_request+0x104>
   10338:	00021710 	.word	0x00021710
   1033c:	00021762 	.word	0x00021762
   10340:	00021650 	.word	0x00021650
   10344:	00021777 	.word	0x00021777
   10348:	00021736 	.word	0x00021736
   1034c:	0002174d 	.word	0x0002174d
   10350:	000216fa 	.word	0x000216fa
   10354:	0002166d 	.word	0x0002166d

00010358 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   10358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   1035a:	460e      	mov	r6, r1
   1035c:	2900      	cmp	r1, #0
   1035e:	d043      	beq.n	103e8 <sys_heap_free+0x90>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   10360:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   10362:	68ab      	ldr	r3, [r5, #8]
   10364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10368:	bf2c      	ite	cs
   1036a:	2408      	movcs	r4, #8
   1036c:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1036e:	1b0c      	subs	r4, r1, r4
   10370:	1b64      	subs	r4, r4, r5
   10372:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   10374:	2201      	movs	r2, #1
   10376:	4621      	mov	r1, r4
   10378:	4628      	mov	r0, r5
   1037a:	f00d fa93 	bl	1d8a4 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   1037e:	07c3      	lsls	r3, r0, #31
   10380:	d40d      	bmi.n	1039e <sys_heap_free+0x46>
   10382:	4a1a      	ldr	r2, [pc, #104]	; (103ec <sys_heap_free+0x94>)
   10384:	491a      	ldr	r1, [pc, #104]	; (103f0 <sys_heap_free+0x98>)
   10386:	481b      	ldr	r0, [pc, #108]	; (103f4 <sys_heap_free+0x9c>)
   10388:	239a      	movs	r3, #154	; 0x9a
   1038a:	f00d fa13 	bl	1d7b4 <printk>
   1038e:	481a      	ldr	r0, [pc, #104]	; (103f8 <sys_heap_free+0xa0>)
   10390:	4631      	mov	r1, r6
   10392:	f00d fa0f 	bl	1d7b4 <printk>
   10396:	4815      	ldr	r0, [pc, #84]	; (103ec <sys_heap_free+0x94>)
   10398:	219a      	movs	r1, #154	; 0x9a
   1039a:	f00d fc65 	bl	1dc68 <assert_post_action>
	return c + chunk_size(h, c);
   1039e:	4621      	mov	r1, r4
   103a0:	4628      	mov	r0, r5
   103a2:	f00d fa95 	bl	1d8d0 <chunk_size>
   103a6:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   103a8:	4639      	mov	r1, r7
   103aa:	2200      	movs	r2, #0
   103ac:	4628      	mov	r0, r5
   103ae:	f00d fa79 	bl	1d8a4 <chunk_field>
   103b2:	1a3f      	subs	r7, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   103b4:	42bc      	cmp	r4, r7
   103b6:	d00d      	beq.n	103d4 <sys_heap_free+0x7c>
   103b8:	4a0c      	ldr	r2, [pc, #48]	; (103ec <sys_heap_free+0x94>)
   103ba:	4910      	ldr	r1, [pc, #64]	; (103fc <sys_heap_free+0xa4>)
   103bc:	480d      	ldr	r0, [pc, #52]	; (103f4 <sys_heap_free+0x9c>)
   103be:	23a2      	movs	r3, #162	; 0xa2
   103c0:	f00d f9f8 	bl	1d7b4 <printk>
   103c4:	480e      	ldr	r0, [pc, #56]	; (10400 <sys_heap_free+0xa8>)
   103c6:	4631      	mov	r1, r6
   103c8:	f00d f9f4 	bl	1d7b4 <printk>
   103cc:	4807      	ldr	r0, [pc, #28]	; (103ec <sys_heap_free+0x94>)
   103ce:	21a2      	movs	r1, #162	; 0xa2
   103d0:	f00d fc4a 	bl	1dc68 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   103d4:	4621      	mov	r1, r4
   103d6:	4628      	mov	r0, r5
   103d8:	2200      	movs	r2, #0
   103da:	f00d fa7f 	bl	1d8dc <set_chunk_used>
	free_chunk(h, c);
   103de:	4621      	mov	r1, r4
}
   103e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
   103e4:	f00d bbb5 	b.w	1db52 <free_chunk>
}
   103e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   103ea:	bf00      	nop
   103ec:	0002178f 	.word	0x0002178f
   103f0:	000217b0 	.word	0x000217b0
   103f4:	00021650 	.word	0x00021650
   103f8:	000217c1 	.word	0x000217c1
   103fc:	000217f9 	.word	0x000217f9
   10400:	0002181f 	.word	0x0002181f

00010404 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   10404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;
   10408:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1040a:	68b3      	ldr	r3, [r6, #8]
{
   1040c:	4614      	mov	r4, r2
	return big_heap(h) ? 8 : 4;
   1040e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	rew = align & -align;
   10412:	f1c1 0200 	rsb	r2, r1, #0
   10416:	ea02 0701 	and.w	r7, r2, r1
   1041a:	bf2c      	ite	cs
   1041c:	2508      	movcs	r5, #8
   1041e:	2504      	movcc	r5, #4
	if (align != rew) {
   10420:	ea31 0202 	bics.w	r2, r1, r2
   10424:	d01e      	beq.n	10464 <sys_heap_aligned_alloc+0x60>
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   10426:	42bd      	cmp	r5, r7
   10428:	bf28      	it	cs
   1042a:	463d      	movcs	r5, r7
   1042c:	46b9      	mov	r9, r7
		align -= rew;
   1042e:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   10430:	f107 3aff 	add.w	sl, r7, #4294967295
   10434:	ea1a 0f07 	tst.w	sl, r7
   10438:	d00e      	beq.n	10458 <sys_heap_aligned_alloc+0x54>
   1043a:	4936      	ldr	r1, [pc, #216]	; (10514 <sys_heap_aligned_alloc+0x110>)
   1043c:	4a36      	ldr	r2, [pc, #216]	; (10518 <sys_heap_aligned_alloc+0x114>)
   1043e:	4837      	ldr	r0, [pc, #220]	; (1051c <sys_heap_aligned_alloc+0x118>)
   10440:	f240 130d 	movw	r3, #269	; 0x10d
   10444:	f00d f9b6 	bl	1d7b4 <printk>
   10448:	4835      	ldr	r0, [pc, #212]	; (10520 <sys_heap_aligned_alloc+0x11c>)
   1044a:	f00d f9b3 	bl	1d7b4 <printk>
   1044e:	4832      	ldr	r0, [pc, #200]	; (10518 <sys_heap_aligned_alloc+0x114>)
   10450:	f240 110d 	movw	r1, #269	; 0x10d
   10454:	f00d fc08 	bl	1dc68 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   10458:	b974      	cbnz	r4, 10478 <sys_heap_aligned_alloc+0x74>
		return NULL;
   1045a:	f04f 0900 	mov.w	r9, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1045e:	4648      	mov	r0, r9
   10460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   10464:	42a9      	cmp	r1, r5
   10466:	d804      	bhi.n	10472 <sys_heap_aligned_alloc+0x6e>
			return sys_heap_alloc(heap, bytes);
   10468:	4621      	mov	r1, r4
}
   1046a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   1046e:	f00d bbb2 	b.w	1dbd6 <sys_heap_alloc>
		rew = 0;
   10472:	f04f 0900 	mov.w	r9, #0
   10476:	e7db      	b.n	10430 <sys_heap_aligned_alloc+0x2c>
	if (bytes == 0 || size_too_big(h, bytes)) {
   10478:	68b3      	ldr	r3, [r6, #8]
   1047a:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1047e:	d9ec      	bls.n	1045a <sys_heap_aligned_alloc+0x56>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   10480:	1939      	adds	r1, r7, r4
   10482:	1b49      	subs	r1, r1, r5
   10484:	4630      	mov	r0, r6
   10486:	f00d fa45 	bl	1d914 <bytes_to_chunksz>
   1048a:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1048c:	4630      	mov	r0, r6
   1048e:	f00d facb 	bl	1da28 <alloc_chunk>
	if (c0 == 0) {
   10492:	4680      	mov	r8, r0
   10494:	2800      	cmp	r0, #0
   10496:	d0e0      	beq.n	1045a <sys_heap_aligned_alloc+0x56>
	return big_heap(h) ? 8 : 4;
   10498:	68b3      	ldr	r3, [r6, #8]
   1049a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1049e:	bf2c      	ite	cs
   104a0:	2308      	movcs	r3, #8
   104a2:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   104a4:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   104a8:	441d      	add	r5, r3
   104aa:	4435      	add	r5, r6
   104ac:	4455      	add	r5, sl
   104ae:	427f      	negs	r7, r7
   104b0:	402f      	ands	r7, r5
   104b2:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   104b6:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   104b8:	eba9 0303 	sub.w	r3, r9, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   104bc:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   104be:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   104c0:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   104c4:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   104c6:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   104ca:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   104ce:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   104d2:	d208      	bcs.n	104e6 <sys_heap_aligned_alloc+0xe2>
		split_chunks(h, c0, c);
   104d4:	4601      	mov	r1, r0
   104d6:	463a      	mov	r2, r7
   104d8:	4630      	mov	r0, r6
   104da:	f00d fa4f 	bl	1d97c <split_chunks>
		free_list_add(h, c0);
   104de:	4641      	mov	r1, r8
   104e0:	4630      	mov	r0, r6
   104e2:	f00d fada 	bl	1da9a <free_list_add>
	return c + chunk_size(h, c);
   104e6:	4639      	mov	r1, r7
   104e8:	4630      	mov	r0, r6
   104ea:	f00d f9f1 	bl	1d8d0 <chunk_size>
   104ee:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   104f0:	4284      	cmp	r4, r0
   104f2:	d208      	bcs.n	10506 <sys_heap_aligned_alloc+0x102>
		split_chunks(h, c, c_end);
   104f4:	4639      	mov	r1, r7
   104f6:	4630      	mov	r0, r6
   104f8:	4622      	mov	r2, r4
   104fa:	f00d fa3f 	bl	1d97c <split_chunks>
		free_list_add(h, c_end);
   104fe:	4621      	mov	r1, r4
   10500:	4630      	mov	r0, r6
   10502:	f00d faca 	bl	1da9a <free_list_add>
	set_chunk_used(h, c, true);
   10506:	2201      	movs	r2, #1
   10508:	4639      	mov	r1, r7
   1050a:	4630      	mov	r0, r6
   1050c:	f00d f9e6 	bl	1d8dc <set_chunk_used>
	return mem;
   10510:	e7a5      	b.n	1045e <sys_heap_aligned_alloc+0x5a>
   10512:	bf00      	nop
   10514:	0002185b 	.word	0x0002185b
   10518:	0002178f 	.word	0x0002178f
   1051c:	00021650 	.word	0x00021650
   10520:	00021876 	.word	0x00021876

00010524 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   10524:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   10528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1052a:	4607      	mov	r7, r0
   1052c:	460d      	mov	r5, r1
   1052e:	4616      	mov	r6, r2
   10530:	d212      	bcs.n	10558 <sys_heap_init+0x34>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   10532:	2a04      	cmp	r2, #4
   10534:	d80e      	bhi.n	10554 <sys_heap_init+0x30>
   10536:	4944      	ldr	r1, [pc, #272]	; (10648 <sys_heap_init+0x124>)
   10538:	4a44      	ldr	r2, [pc, #272]	; (1064c <sys_heap_init+0x128>)
   1053a:	4845      	ldr	r0, [pc, #276]	; (10650 <sys_heap_init+0x12c>)
   1053c:	f44f 73c1 	mov.w	r3, #386	; 0x182
   10540:	f00d f938 	bl	1d7b4 <printk>
   10544:	4843      	ldr	r0, [pc, #268]	; (10654 <sys_heap_init+0x130>)
   10546:	f00d f935 	bl	1d7b4 <printk>
   1054a:	4840      	ldr	r0, [pc, #256]	; (1064c <sys_heap_init+0x128>)
   1054c:	f44f 71c1 	mov.w	r1, #386	; 0x182
   10550:	f00d fb8a 	bl	1dc68 <assert_post_action>
   10554:	2204      	movs	r2, #4
   10556:	e000      	b.n	1055a <sys_heap_init+0x36>
   10558:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
   1055a:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1055c:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1055e:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   10560:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   10564:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   10568:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   1056a:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1056c:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   10570:	d80e      	bhi.n	10590 <sys_heap_init+0x6c>
   10572:	4939      	ldr	r1, [pc, #228]	; (10658 <sys_heap_init+0x134>)
   10574:	4a35      	ldr	r2, [pc, #212]	; (1064c <sys_heap_init+0x128>)
   10576:	4836      	ldr	r0, [pc, #216]	; (10650 <sys_heap_init+0x12c>)
   10578:	f240 138b 	movw	r3, #395	; 0x18b
   1057c:	f00d f91a 	bl	1d7b4 <printk>
   10580:	4834      	ldr	r0, [pc, #208]	; (10654 <sys_heap_init+0x130>)
   10582:	f00d f917 	bl	1d7b4 <printk>
   10586:	4831      	ldr	r0, [pc, #196]	; (1064c <sys_heap_init+0x128>)
   10588:	f240 118b 	movw	r1, #395	; 0x18b
   1058c:	f00d fb6c 	bl	1dc68 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   10590:	2300      	movs	r3, #0
	heap->heap = h;
   10592:	603c      	str	r4, [r7, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   10594:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   10596:	60e3      	str	r3, [r4, #12]
	h->end_chunk = heap_sz;
   10598:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1059a:	4620      	mov	r0, r4
   1059c:	f00d f9c4 	bl	1d928 <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline chunksz_t min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   105a0:	2101      	movs	r1, #1
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   105a2:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   105a4:	1c47      	adds	r7, r0, #1
   105a6:	4620      	mov	r0, r4
   105a8:	f00d f9b4 	bl	1d914 <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   105ac:	351b      	adds	r5, #27
   105ae:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   105b0:	4428      	add	r0, r5
   105b2:	42b0      	cmp	r0, r6
   105b4:	d90e      	bls.n	105d4 <sys_heap_init+0xb0>
   105b6:	4929      	ldr	r1, [pc, #164]	; (1065c <sys_heap_init+0x138>)
   105b8:	4a24      	ldr	r2, [pc, #144]	; (1064c <sys_heap_init+0x128>)
   105ba:	4825      	ldr	r0, [pc, #148]	; (10650 <sys_heap_init+0x12c>)
   105bc:	f44f 73cb 	mov.w	r3, #406	; 0x196
   105c0:	f00d f8f8 	bl	1d7b4 <printk>
   105c4:	4823      	ldr	r0, [pc, #140]	; (10654 <sys_heap_init+0x130>)
   105c6:	f00d f8f5 	bl	1d7b4 <printk>
   105ca:	4820      	ldr	r0, [pc, #128]	; (1064c <sys_heap_init+0x128>)
   105cc:	f44f 71cb 	mov.w	r1, #406	; 0x196
   105d0:	f00d fb4a 	bl	1dc68 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   105d4:	2300      	movs	r3, #0
   105d6:	f104 0210 	add.w	r2, r4, #16

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   105da:	4619      	mov	r1, r3
	for (int i = 0; i < nb_buckets; i++) {
   105dc:	42bb      	cmp	r3, r7
   105de:	db2f      	blt.n	10640 <sys_heap_init+0x11c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   105e0:	462a      	mov	r2, r5
   105e2:	4620      	mov	r0, r4
   105e4:	2100      	movs	r1, #0
   105e6:	f00d f991 	bl	1d90c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   105ea:	2300      	movs	r3, #0
   105ec:	461a      	mov	r2, r3
   105ee:	4619      	mov	r1, r3
   105f0:	4620      	mov	r0, r4
   105f2:	f00d f962 	bl	1d8ba <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   105f6:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   105f8:	4620      	mov	r0, r4
   105fa:	2201      	movs	r2, #1
   105fc:	2100      	movs	r1, #0
   105fe:	f00d f96d 	bl	1d8dc <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   10602:	463a      	mov	r2, r7
   10604:	4629      	mov	r1, r5
   10606:	f00d f981 	bl	1d90c <set_chunk_size>
   1060a:	462b      	mov	r3, r5
   1060c:	4629      	mov	r1, r5
   1060e:	4620      	mov	r0, r4
   10610:	2200      	movs	r2, #0
   10612:	f00d f952 	bl	1d8ba <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   10616:	4631      	mov	r1, r6
   10618:	4620      	mov	r0, r4
   1061a:	2200      	movs	r2, #0
   1061c:	f00d f976 	bl	1d90c <set_chunk_size>
   10620:	463b      	mov	r3, r7
   10622:	4631      	mov	r1, r6
   10624:	4620      	mov	r0, r4
   10626:	2200      	movs	r2, #0
   10628:	f00d f947 	bl	1d8ba <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1062c:	4631      	mov	r1, r6
   1062e:	4620      	mov	r0, r4
   10630:	2201      	movs	r2, #1
   10632:	f00d f953 	bl	1d8dc <set_chunk_used>

	free_list_add(h, chunk0_size);
   10636:	4629      	mov	r1, r5
}
   10638:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1063c:	f00d ba2d 	b.w	1da9a <free_list_add>
		h->buckets[i].next = 0;
   10640:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   10644:	3301      	adds	r3, #1
   10646:	e7c9      	b.n	105dc <sys_heap_init+0xb8>
   10648:	00021893 	.word	0x00021893
   1064c:	0002178f 	.word	0x0002178f
   10650:	00021650 	.word	0x00021650
   10654:	000218b4 	.word	0x000218b4
   10658:	000218cd 	.word	0x000218cd
   1065c:	000218f6 	.word	0x000218f6

00010660 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   10660:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
   10662:	4e09      	ldr	r6, [pc, #36]	; (10688 <extract_decimal+0x28>)
   10664:	6801      	ldr	r1, [r0, #0]
{
   10666:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
   10668:	270a      	movs	r7, #10
	size_t val = 0;
   1066a:	2000      	movs	r0, #0
   1066c:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
   1066e:	3101      	adds	r1, #1
   10670:	7823      	ldrb	r3, [r4, #0]
   10672:	5d9d      	ldrb	r5, [r3, r6]
   10674:	076d      	lsls	r5, r5, #29
   10676:	d401      	bmi.n	1067c <extract_decimal+0x1c>
	}
	*str = sp;
   10678:	6014      	str	r4, [r2, #0]
	return val;
}
   1067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   1067c:	fb07 3300 	mla	r3, r7, r0, r3
   10680:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   10684:	e7f2      	b.n	1066c <extract_decimal+0xc>
   10686:	bf00      	nop
   10688:	000233e0 	.word	0x000233e0

0001068c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   1068c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10690:	4614      	mov	r4, r2
   10692:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   10694:	78d3      	ldrb	r3, [r2, #3]
   10696:	4a24      	ldr	r2, [pc, #144]	; (10728 <encode_uint+0x9c>)
   10698:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
   1069c:	2b6f      	cmp	r3, #111	; 0x6f
   1069e:	f00a 0203 	and.w	r2, sl, #3
{
   106a2:	4606      	mov	r6, r0
   106a4:	460f      	mov	r7, r1
   106a6:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   106a8:	d02d      	beq.n	10706 <encode_uint+0x7a>
   106aa:	d828      	bhi.n	106fe <encode_uint+0x72>
		return 16;
   106ac:	2b58      	cmp	r3, #88	; 0x58
   106ae:	bf14      	ite	ne
   106b0:	250a      	movne	r5, #10
   106b2:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   106b4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   106b8:	46aa      	mov	sl, r5
   106ba:	f04f 0b00 	mov.w	fp, #0
   106be:	4652      	mov	r2, sl
   106c0:	465b      	mov	r3, fp
   106c2:	4630      	mov	r0, r6
   106c4:	4639      	mov	r1, r7
   106c6:	f7ef fd5b 	bl	180 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   106ca:	2a09      	cmp	r2, #9
   106cc:	b2d3      	uxtb	r3, r2
   106ce:	d81f      	bhi.n	10710 <encode_uint+0x84>
   106d0:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   106d2:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   106d4:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   106d6:	bf08      	it	eq
   106d8:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   106da:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   106de:	d301      	bcc.n	106e4 <encode_uint+0x58>
   106e0:	45c8      	cmp	r8, r9
   106e2:	d812      	bhi.n	1070a <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   106e4:	7823      	ldrb	r3, [r4, #0]
   106e6:	069b      	lsls	r3, r3, #26
   106e8:	d505      	bpl.n	106f6 <encode_uint+0x6a>
		if (radix == 8) {
   106ea:	2d08      	cmp	r5, #8
   106ec:	d116      	bne.n	1071c <encode_uint+0x90>
			conv->altform_0 = true;
   106ee:	78a3      	ldrb	r3, [r4, #2]
   106f0:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   106f4:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
   106f6:	4640      	mov	r0, r8
   106f8:	b003      	add	sp, #12
   106fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   106fe:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   10702:	2b70      	cmp	r3, #112	; 0x70
   10704:	e7d3      	b.n	106ae <encode_uint+0x22>
	switch (specifier) {
   10706:	2508      	movs	r5, #8
   10708:	e7d4      	b.n	106b4 <encode_uint+0x28>
		value /= radix;
   1070a:	4606      	mov	r6, r0
   1070c:	460f      	mov	r7, r1
   1070e:	e7d6      	b.n	106be <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10710:	9a01      	ldr	r2, [sp, #4]
   10712:	2a01      	cmp	r2, #1
   10714:	bf0c      	ite	eq
   10716:	3337      	addeq	r3, #55	; 0x37
   10718:	3357      	addne	r3, #87	; 0x57
   1071a:	e7da      	b.n	106d2 <encode_uint+0x46>
		} else if (radix == 16) {
   1071c:	2d10      	cmp	r5, #16
   1071e:	d1ea      	bne.n	106f6 <encode_uint+0x6a>
			conv->altform_0c = true;
   10720:	78a3      	ldrb	r3, [r4, #2]
   10722:	f043 0310 	orr.w	r3, r3, #16
   10726:	e7e5      	b.n	106f4 <encode_uint+0x68>
   10728:	000233e0 	.word	0x000233e0

0001072c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1072c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10730:	4682      	mov	sl, r0
   10732:	b093      	sub	sp, #76	; 0x4c
   10734:	468b      	mov	fp, r1
   10736:	4691      	mov	r9, r2
   10738:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1073a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1073c:	f899 0000 	ldrb.w	r0, [r9]
   10740:	b908      	cbnz	r0, 10746 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10742:	4628      	mov	r0, r5
   10744:	e33a      	b.n	10dbc <cbvprintf+0x690>
		if (*fp != '%') {
   10746:	f109 0301 	add.w	r3, r9, #1
   1074a:	2825      	cmp	r0, #37	; 0x25
   1074c:	9302      	str	r3, [sp, #8]
   1074e:	d006      	beq.n	1075e <cbvprintf+0x32>
			OUTC('%');
   10750:	4659      	mov	r1, fp
   10752:	47d0      	blx	sl
   10754:	2800      	cmp	r0, #0
   10756:	f2c0 8331 	blt.w	10dbc <cbvprintf+0x690>
   1075a:	3501      	adds	r5, #1
			break;
   1075c:	e1f1      	b.n	10b42 <cbvprintf+0x416>
		} state = {
   1075e:	2218      	movs	r2, #24
   10760:	2100      	movs	r1, #0
   10762:	a80c      	add	r0, sp, #48	; 0x30
   10764:	f010 f98f 	bl	20a86 <memset>
	if (*sp == '%') {
   10768:	f899 3001 	ldrb.w	r3, [r9, #1]
   1076c:	2b25      	cmp	r3, #37	; 0x25
   1076e:	d059      	beq.n	10824 <cbvprintf+0xf8>
   10770:	9a02      	ldr	r2, [sp, #8]
   10772:	4616      	mov	r6, r2
		switch (*sp) {
   10774:	f812 3b01 	ldrb.w	r3, [r2], #1
   10778:	2b2b      	cmp	r3, #43	; 0x2b
   1077a:	f000 808b 	beq.w	10894 <cbvprintf+0x168>
   1077e:	d879      	bhi.n	10874 <cbvprintf+0x148>
   10780:	2b20      	cmp	r3, #32
   10782:	f000 808c 	beq.w	1089e <cbvprintf+0x172>
   10786:	2b23      	cmp	r3, #35	; 0x23
   10788:	f000 808e 	beq.w	108a8 <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
   1078c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10790:	f003 0244 	and.w	r2, r3, #68	; 0x44
   10794:	2a44      	cmp	r2, #68	; 0x44
   10796:	d103      	bne.n	107a0 <cbvprintf+0x74>
		conv->flag_zero = false;
   10798:	f36f 1386 	bfc	r3, #6, #1
   1079c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   107a0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   107a4:	9605      	str	r6, [sp, #20]
   107a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   107aa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   107ae:	7833      	ldrb	r3, [r6, #0]
   107b0:	2b2a      	cmp	r3, #42	; 0x2a
   107b2:	d17e      	bne.n	108b2 <cbvprintf+0x186>
		conv->width_star = true;
   107b4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   107b8:	f043 0301 	orr.w	r3, r3, #1
   107bc:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   107c0:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   107c2:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   107c4:	781a      	ldrb	r2, [r3, #0]
   107c6:	2a2e      	cmp	r2, #46	; 0x2e
   107c8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   107cc:	bf0c      	ite	eq
   107ce:	2101      	moveq	r1, #1
   107d0:	2100      	movne	r1, #0
   107d2:	f361 0241 	bfi	r2, r1, #1, #1
   107d6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   107da:	d10b      	bne.n	107f4 <cbvprintf+0xc8>
	++sp;
   107dc:	1c5a      	adds	r2, r3, #1
   107de:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   107e0:	785a      	ldrb	r2, [r3, #1]
   107e2:	2a2a      	cmp	r2, #42	; 0x2a
   107e4:	d17b      	bne.n	108de <cbvprintf+0x1b2>
		conv->prec_star = true;
   107e6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   107ea:	f042 0204 	orr.w	r2, r2, #4
   107ee:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   107f2:	3302      	adds	r3, #2
	switch (*sp) {
   107f4:	4619      	mov	r1, r3
   107f6:	f811 0b01 	ldrb.w	r0, [r1], #1
   107fa:	286c      	cmp	r0, #108	; 0x6c
   107fc:	f000 80b6 	beq.w	1096c <cbvprintf+0x240>
   10800:	d87d      	bhi.n	108fe <cbvprintf+0x1d2>
   10802:	2868      	cmp	r0, #104	; 0x68
   10804:	f000 8084 	beq.w	10910 <cbvprintf+0x1e4>
   10808:	286a      	cmp	r0, #106	; 0x6a
   1080a:	f000 80b9 	beq.w	10980 <cbvprintf+0x254>
   1080e:	284c      	cmp	r0, #76	; 0x4c
   10810:	f000 80bd 	beq.w	1098e <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
   10814:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   10818:	f36f 02c6 	bfc	r2, #3, #4
   1081c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   10820:	4619      	mov	r1, r3
   10822:	e080      	b.n	10926 <cbvprintf+0x1fa>
		conv->specifier = *sp++;
   10824:	f109 0202 	add.w	r2, r9, #2
   10828:	9202      	str	r2, [sp, #8]
   1082a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   1082e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   10832:	07d9      	lsls	r1, r3, #31
   10834:	f140 8149 	bpl.w	10aca <cbvprintf+0x39e>
			width = va_arg(ap, int);
   10838:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   1083c:	f1b8 0f00 	cmp.w	r8, #0
   10840:	da07      	bge.n	10852 <cbvprintf+0x126>
				conv->flag_dash = true;
   10842:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   10846:	f042 0204 	orr.w	r2, r2, #4
   1084a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
   1084e:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   10852:	075a      	lsls	r2, r3, #29
   10854:	f140 8142 	bpl.w	10adc <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
   10858:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   1085c:	2f00      	cmp	r7, #0
   1085e:	f280 8141 	bge.w	10ae4 <cbvprintf+0x3b8>
				conv->prec_present = false;
   10862:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   10866:	f36f 0341 	bfc	r3, #1, #1
   1086a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   1086e:	f04f 37ff 	mov.w	r7, #4294967295
   10872:	e137      	b.n	10ae4 <cbvprintf+0x3b8>
		switch (*sp) {
   10874:	2b2d      	cmp	r3, #45	; 0x2d
   10876:	d006      	beq.n	10886 <cbvprintf+0x15a>
   10878:	2b30      	cmp	r3, #48	; 0x30
   1087a:	d187      	bne.n	1078c <cbvprintf+0x60>
			conv->flag_zero = true;
   1087c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10884:	e003      	b.n	1088e <cbvprintf+0x162>
			conv->flag_dash = true;
   10886:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1088a:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   1088e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   10892:	e76e      	b.n	10772 <cbvprintf+0x46>
			conv->flag_plus = true;
   10894:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10898:	f043 0308 	orr.w	r3, r3, #8
   1089c:	e7f7      	b.n	1088e <cbvprintf+0x162>
			conv->flag_space = true;
   1089e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   108a2:	f043 0310 	orr.w	r3, r3, #16
   108a6:	e7f2      	b.n	1088e <cbvprintf+0x162>
			conv->flag_hash = true;
   108a8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   108ac:	f043 0320 	orr.w	r3, r3, #32
   108b0:	e7ed      	b.n	1088e <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
   108b2:	a805      	add	r0, sp, #20
   108b4:	f7ff fed4 	bl	10660 <extract_decimal>
	if (sp != wp) {
   108b8:	9b05      	ldr	r3, [sp, #20]
   108ba:	42b3      	cmp	r3, r6
   108bc:	d081      	beq.n	107c2 <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
   108be:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   108c2:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   108c4:	f3c1 0240 	ubfx	r2, r1, #1, #1
   108c8:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   108cc:	0052      	lsls	r2, r2, #1
   108ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
   108d2:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   108d6:	430a      	orrs	r2, r1
   108d8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   108dc:	e771      	b.n	107c2 <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
   108de:	a805      	add	r0, sp, #20
   108e0:	f7ff febe 	bl	10660 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   108e4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   108e8:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   108ea:	f3c3 0240 	ubfx	r2, r3, #1, #1
   108ee:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   108f2:	f360 0341 	bfi	r3, r0, #1, #1
   108f6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   108fa:	9b05      	ldr	r3, [sp, #20]
   108fc:	e77a      	b.n	107f4 <cbvprintf+0xc8>
	switch (*sp) {
   108fe:	2874      	cmp	r0, #116	; 0x74
   10900:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   10904:	d040      	beq.n	10988 <cbvprintf+0x25c>
   10906:	287a      	cmp	r0, #122	; 0x7a
   10908:	d184      	bne.n	10814 <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
   1090a:	4613      	mov	r3, r2
   1090c:	2206      	movs	r2, #6
   1090e:	e028      	b.n	10962 <cbvprintf+0x236>
		if (*++sp == 'h') {
   10910:	785a      	ldrb	r2, [r3, #1]
   10912:	2a68      	cmp	r2, #104	; 0x68
   10914:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   10918:	d121      	bne.n	1095e <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
   1091a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1091c:	f361 02c6 	bfi	r2, r1, #3, #4
   10920:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   10924:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   10926:	460b      	mov	r3, r1
   10928:	f813 2b01 	ldrb.w	r2, [r3], #1
   1092c:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
   1092e:	2a78      	cmp	r2, #120	; 0x78
   10930:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
   10934:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   10938:	f200 80bf 	bhi.w	10aba <cbvprintf+0x38e>
   1093c:	2a57      	cmp	r2, #87	; 0x57
   1093e:	d833      	bhi.n	109a8 <cbvprintf+0x27c>
   10940:	2a41      	cmp	r2, #65	; 0x41
   10942:	d003      	beq.n	1094c <cbvprintf+0x220>
   10944:	3a45      	subs	r2, #69	; 0x45
   10946:	2a02      	cmp	r2, #2
   10948:	f200 80b7 	bhi.w	10aba <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
   1094c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   10950:	2204      	movs	r2, #4
   10952:	f362 0302 	bfi	r3, r2, #0, #3
   10956:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
   1095a:	2301      	movs	r3, #1
			break;
   1095c:	e084      	b.n	10a68 <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
   1095e:	4613      	mov	r3, r2
   10960:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   10962:	f362 03c6 	bfi	r3, r2, #3, #4
   10966:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   1096a:	e7dc      	b.n	10926 <cbvprintf+0x1fa>
		if (*++sp == 'l') {
   1096c:	785a      	ldrb	r2, [r3, #1]
   1096e:	2a6c      	cmp	r2, #108	; 0x6c
   10970:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   10974:	d101      	bne.n	1097a <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
   10976:	2104      	movs	r1, #4
   10978:	e7d0      	b.n	1091c <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
   1097a:	4613      	mov	r3, r2
   1097c:	2203      	movs	r2, #3
   1097e:	e7f0      	b.n	10962 <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
   10980:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   10984:	2205      	movs	r2, #5
   10986:	e7ec      	b.n	10962 <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
   10988:	4613      	mov	r3, r2
   1098a:	2207      	movs	r2, #7
   1098c:	e7e9      	b.n	10962 <cbvprintf+0x236>
		conv->unsupported = true;
   1098e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   10992:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   10996:	f023 0302 	bic.w	r3, r3, #2
   1099a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1099e:	f043 0302 	orr.w	r3, r3, #2
   109a2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   109a6:	e7be      	b.n	10926 <cbvprintf+0x1fa>
   109a8:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   109ac:	2920      	cmp	r1, #32
   109ae:	f200 8084 	bhi.w	10aba <cbvprintf+0x38e>
   109b2:	a001      	add	r0, pc, #4	; (adr r0, 109b8 <cbvprintf+0x28c>)
   109b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   109b8:	00010a7d 	.word	0x00010a7d
   109bc:	00010abb 	.word	0x00010abb
   109c0:	00010abb 	.word	0x00010abb
   109c4:	00010abb 	.word	0x00010abb
   109c8:	00010abb 	.word	0x00010abb
   109cc:	00010abb 	.word	0x00010abb
   109d0:	00010abb 	.word	0x00010abb
   109d4:	00010abb 	.word	0x00010abb
   109d8:	00010abb 	.word	0x00010abb
   109dc:	0001094d 	.word	0x0001094d
   109e0:	00010abb 	.word	0x00010abb
   109e4:	00010a7d 	.word	0x00010a7d
   109e8:	00010a3d 	.word	0x00010a3d
   109ec:	0001094d 	.word	0x0001094d
   109f0:	0001094d 	.word	0x0001094d
   109f4:	0001094d 	.word	0x0001094d
   109f8:	00010abb 	.word	0x00010abb
   109fc:	00010a3d 	.word	0x00010a3d
   10a00:	00010abb 	.word	0x00010abb
   10a04:	00010abb 	.word	0x00010abb
   10a08:	00010abb 	.word	0x00010abb
   10a0c:	00010abb 	.word	0x00010abb
   10a10:	00010a85 	.word	0x00010a85
   10a14:	00010a7d 	.word	0x00010a7d
   10a18:	00010aa1 	.word	0x00010aa1
   10a1c:	00010abb 	.word	0x00010abb
   10a20:	00010abb 	.word	0x00010abb
   10a24:	00010aa1 	.word	0x00010aa1
   10a28:	00010abb 	.word	0x00010abb
   10a2c:	00010a7d 	.word	0x00010a7d
   10a30:	00010abb 	.word	0x00010abb
   10a34:	00010abb 	.word	0x00010abb
   10a38:	00010a7d 	.word	0x00010a7d
		conv->specifier_cat = SPECIFIER_SINT;
   10a3c:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   10a40:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   10a42:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   10a46:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10a4a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   10a4c:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
   10a50:	bf02      	ittt	eq
   10a52:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   10a56:	f041 0101 	orreq.w	r1, r1, #1
   10a5a:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   10a5e:	2a63      	cmp	r2, #99	; 0x63
   10a60:	d131      	bne.n	10ac6 <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   10a62:	3b00      	subs	r3, #0
   10a64:	bf18      	it	ne
   10a66:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   10a68:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   10a6c:	f3c2 0140 	ubfx	r1, r2, #1, #1
   10a70:	430b      	orrs	r3, r1
   10a72:	f363 0241 	bfi	r2, r3, #1, #1
   10a76:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   10a7a:	e6d8      	b.n	1082e <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
   10a7c:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   10a80:	2002      	movs	r0, #2
   10a82:	e7de      	b.n	10a42 <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
   10a84:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   10a88:	f003 0378 	and.w	r3, r3, #120	; 0x78
   10a8c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   10a90:	2103      	movs	r1, #3
   10a92:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10a96:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   10a98:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   10a9c:	4143      	adcs	r3, r0
   10a9e:	e7e3      	b.n	10a68 <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
   10aa0:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   10aa4:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   10aa6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   10aaa:	f361 0202 	bfi	r2, r1, #0, #3
   10aae:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   10ab2:	bf14      	ite	ne
   10ab4:	2301      	movne	r3, #1
   10ab6:	2300      	moveq	r3, #0
   10ab8:	e7d6      	b.n	10a68 <cbvprintf+0x33c>
		conv->invalid = true;
   10aba:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10abe:	f043 0301 	orr.w	r3, r3, #1
   10ac2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
   10ac6:	2300      	movs	r3, #0
   10ac8:	e7ce      	b.n	10a68 <cbvprintf+0x33c>
		} else if (conv->width_present) {
   10aca:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   10ace:	2a00      	cmp	r2, #0
			width = conv->width_value;
   10ad0:	bfb4      	ite	lt
   10ad2:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
   10ad6:	f04f 38ff 	movge.w	r8, #4294967295
   10ada:	e6ba      	b.n	10852 <cbvprintf+0x126>
		} else if (conv->prec_present) {
   10adc:	079f      	lsls	r7, r3, #30
   10ade:	f57f aec6 	bpl.w	1086e <cbvprintf+0x142>
			precision = conv->prec_value;
   10ae2:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
   10ae4:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
   10ae8:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   10aea:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
   10aee:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
   10af2:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   10af6:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   10af8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   10afc:	d137      	bne.n	10b6e <cbvprintf+0x442>
			switch (length_mod) {
   10afe:	1ecb      	subs	r3, r1, #3
   10b00:	2b04      	cmp	r3, #4
   10b02:	d821      	bhi.n	10b48 <cbvprintf+0x41c>
   10b04:	e8df f003 	tbb	[pc, r3]
   10b08:	20070703 	.word	0x20070703
   10b0c:	20          	.byte	0x20
   10b0d:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   10b0e:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   10b12:	17d3      	asrs	r3, r2, #31
   10b14:	e004      	b.n	10b20 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
   10b16:	3407      	adds	r4, #7
   10b18:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   10b1c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   10b20:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   10b24:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10b28:	f013 0603 	ands.w	r6, r3, #3
   10b2c:	d055      	beq.n	10bda <cbvprintf+0x4ae>
			OUTS(sp, fp);
   10b2e:	9b02      	ldr	r3, [sp, #8]
   10b30:	464a      	mov	r2, r9
   10b32:	4659      	mov	r1, fp
   10b34:	4650      	mov	r0, sl
   10b36:	f00d f881 	bl	1dc3c <outs>
   10b3a:	2800      	cmp	r0, #0
   10b3c:	f2c0 813e 	blt.w	10dbc <cbvprintf+0x690>
   10b40:	4405      	add	r5, r0
			OUTS(bps, bpe);
   10b42:	f8dd 9008 	ldr.w	r9, [sp, #8]
   10b46:	e5f9      	b.n	1073c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10b48:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   10b4c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10b4e:	ea4f 73e2 	mov.w	r3, r2, asr #31
   10b52:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   10b56:	d105      	bne.n	10b64 <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
   10b58:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   10b5c:	930c      	str	r3, [sp, #48]	; 0x30
   10b5e:	2300      	movs	r3, #0
   10b60:	930d      	str	r3, [sp, #52]	; 0x34
   10b62:	e7df      	b.n	10b24 <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
   10b64:	2902      	cmp	r1, #2
   10b66:	d1dd      	bne.n	10b24 <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
   10b68:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
   10b6c:	e7d1      	b.n	10b12 <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   10b6e:	2b02      	cmp	r3, #2
   10b70:	d123      	bne.n	10bba <cbvprintf+0x48e>
			switch (length_mod) {
   10b72:	1ecb      	subs	r3, r1, #3
   10b74:	2b04      	cmp	r3, #4
   10b76:	d813      	bhi.n	10ba0 <cbvprintf+0x474>
   10b78:	e8df f003 	tbb	[pc, r3]
   10b7c:	120a0a03 	.word	0x120a0a03
   10b80:	12          	.byte	0x12
   10b81:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   10b82:	6822      	ldr	r2, [r4, #0]
   10b84:	920c      	str	r2, [sp, #48]	; 0x30
   10b86:	2300      	movs	r3, #0
   10b88:	1d20      	adds	r0, r4, #4
   10b8a:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   10b8c:	4604      	mov	r4, r0
   10b8e:	e7c9      	b.n	10b24 <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
   10b90:	3407      	adds	r4, #7
   10b92:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   10b96:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   10b9a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   10b9e:	e7f5      	b.n	10b8c <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
   10ba0:	f854 3b04 	ldr.w	r3, [r4], #4
   10ba4:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   10ba6:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   10ba8:	f04f 0300 	mov.w	r3, #0
   10bac:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   10bae:	d0d3      	beq.n	10b58 <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
   10bb0:	2902      	cmp	r1, #2
   10bb2:	d1b7      	bne.n	10b24 <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
   10bb4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   10bb8:	e7d0      	b.n	10b5c <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   10bba:	2b04      	cmp	r3, #4
   10bbc:	d107      	bne.n	10bce <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
   10bbe:	3407      	adds	r4, #7
   10bc0:	f024 0407 	bic.w	r4, r4, #7
   10bc4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   10bc8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   10bcc:	e7aa      	b.n	10b24 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
   10bce:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   10bd0:	bf04      	itt	eq
   10bd2:	f854 3b04 	ldreq.w	r3, [r4], #4
   10bd6:	930c      	streq	r3, [sp, #48]	; 0x30
   10bd8:	e7a4      	b.n	10b24 <cbvprintf+0x3f8>
		switch (conv->specifier) {
   10bda:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   10bde:	2878      	cmp	r0, #120	; 0x78
   10be0:	d8af      	bhi.n	10b42 <cbvprintf+0x416>
   10be2:	2862      	cmp	r0, #98	; 0x62
   10be4:	d820      	bhi.n	10c28 <cbvprintf+0x4fc>
   10be6:	2825      	cmp	r0, #37	; 0x25
   10be8:	f43f adb2 	beq.w	10750 <cbvprintf+0x24>
   10bec:	2858      	cmp	r0, #88	; 0x58
   10bee:	d1a8      	bne.n	10b42 <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
   10bf0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   10bf4:	9300      	str	r3, [sp, #0]
   10bf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   10bfa:	ab06      	add	r3, sp, #24
   10bfc:	aa0e      	add	r2, sp, #56	; 0x38
   10bfe:	f7ff fd45 	bl	1068c <encode_uint>
   10c02:	4681      	mov	r9, r0
			if (precision >= 0) {
   10c04:	2f00      	cmp	r7, #0
   10c06:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   10c0a:	db0b      	blt.n	10c24 <cbvprintf+0x4f8>
				conv->flag_zero = false;
   10c0c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   10c10:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   10c14:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   10c18:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   10c1a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   10c1e:	d901      	bls.n	10c24 <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
   10c20:	1aff      	subs	r7, r7, r3
   10c22:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   10c24:	4607      	mov	r7, r0
   10c26:	e03c      	b.n	10ca2 <cbvprintf+0x576>
   10c28:	3863      	subs	r0, #99	; 0x63
   10c2a:	2815      	cmp	r0, #21
   10c2c:	d889      	bhi.n	10b42 <cbvprintf+0x416>
   10c2e:	a201      	add	r2, pc, #4	; (adr r2, 10c34 <cbvprintf+0x508>)
   10c30:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   10c34:	00010cb3 	.word	0x00010cb3
   10c38:	00010d15 	.word	0x00010d15
   10c3c:	00010b43 	.word	0x00010b43
   10c40:	00010b43 	.word	0x00010b43
   10c44:	00010b43 	.word	0x00010b43
   10c48:	00010b43 	.word	0x00010b43
   10c4c:	00010d15 	.word	0x00010d15
   10c50:	00010b43 	.word	0x00010b43
   10c54:	00010b43 	.word	0x00010b43
   10c58:	00010b43 	.word	0x00010b43
   10c5c:	00010b43 	.word	0x00010b43
   10c60:	00010d73 	.word	0x00010d73
   10c64:	00010d41 	.word	0x00010d41
   10c68:	00010d45 	.word	0x00010d45
   10c6c:	00010b43 	.word	0x00010b43
   10c70:	00010b43 	.word	0x00010b43
   10c74:	00010c8d 	.word	0x00010c8d
   10c78:	00010b43 	.word	0x00010b43
   10c7c:	00010d41 	.word	0x00010d41
   10c80:	00010b43 	.word	0x00010b43
   10c84:	00010b43 	.word	0x00010b43
   10c88:	00010d41 	.word	0x00010d41
			if (precision >= 0) {
   10c8c:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   10c8e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   10c92:	db0a      	blt.n	10caa <cbvprintf+0x57e>
				len = strnlen(bps, precision);
   10c94:	4639      	mov	r1, r7
   10c96:	4648      	mov	r0, r9
   10c98:	f00f ff17 	bl	20aca <strnlen>
			bpe = bps + len;
   10c9c:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
   10ca0:	2600      	movs	r6, #0
		if (bps == NULL) {
   10ca2:	f1b9 0f00 	cmp.w	r9, #0
   10ca6:	d10c      	bne.n	10cc2 <cbvprintf+0x596>
   10ca8:	e74b      	b.n	10b42 <cbvprintf+0x416>
				len = strlen(bps);
   10caa:	4648      	mov	r0, r9
   10cac:	f7fb fae6 	bl	c27c <strlen>
   10cb0:	e7f4      	b.n	10c9c <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   10cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10cb4:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
   10cb8:	2600      	movs	r6, #0
			bpe = buf + 1;
   10cba:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
   10cbe:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   10cc2:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   10cc6:	b106      	cbz	r6, 10cca <cbvprintf+0x59e>
			nj_len += 1U;
   10cc8:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   10cca:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   10cce:	06d0      	lsls	r0, r2, #27
   10cd0:	d569      	bpl.n	10da6 <cbvprintf+0x67a>
			nj_len += 2U;
   10cd2:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   10cd4:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   10cd6:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   10cd8:	bf48      	it	mi
   10cda:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   10cdc:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   10cde:	bf48      	it	mi
   10ce0:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   10ce2:	f1b8 0f00 	cmp.w	r8, #0
   10ce6:	dd76      	ble.n	10dd6 <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
   10ce8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   10cec:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   10cf0:	f3c2 0380 	ubfx	r3, r2, #2, #1
   10cf4:	9303      	str	r3, [sp, #12]
   10cf6:	0753      	lsls	r3, r2, #29
   10cf8:	d46d      	bmi.n	10dd6 <cbvprintf+0x6aa>
				if (conv->flag_zero) {
   10cfa:	0650      	lsls	r0, r2, #25
   10cfc:	d561      	bpl.n	10dc2 <cbvprintf+0x696>
					if (sign != 0) {
   10cfe:	b13e      	cbz	r6, 10d10 <cbvprintf+0x5e4>
						OUTC(sign);
   10d00:	4659      	mov	r1, fp
   10d02:	4630      	mov	r0, r6
   10d04:	47d0      	blx	sl
   10d06:	2800      	cmp	r0, #0
   10d08:	db58      	blt.n	10dbc <cbvprintf+0x690>
						sign = 0;
   10d0a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   10d0c:	3501      	adds	r5, #1
						sign = 0;
   10d0e:	461e      	mov	r6, r3
					pad = '0';
   10d10:	2330      	movs	r3, #48	; 0x30
   10d12:	e057      	b.n	10dc4 <cbvprintf+0x698>
			if (conv->flag_plus) {
   10d14:	071e      	lsls	r6, r3, #28
   10d16:	d411      	bmi.n	10d3c <cbvprintf+0x610>
				sign = ' ';
   10d18:	f013 0610 	ands.w	r6, r3, #16
   10d1c:	bf18      	it	ne
   10d1e:	2620      	movne	r6, #32
			sint = value->sint;
   10d20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   10d24:	2a00      	cmp	r2, #0
   10d26:	f173 0100 	sbcs.w	r1, r3, #0
   10d2a:	f6bf af61 	bge.w	10bf0 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
   10d2e:	4252      	negs	r2, r2
   10d30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10d34:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
   10d38:	262d      	movs	r6, #45	; 0x2d
   10d3a:	e759      	b.n	10bf0 <cbvprintf+0x4c4>
				sign = '+';
   10d3c:	262b      	movs	r6, #43	; 0x2b
   10d3e:	e7ef      	b.n	10d20 <cbvprintf+0x5f4>
		switch (conv->specifier) {
   10d40:	2600      	movs	r6, #0
   10d42:	e755      	b.n	10bf0 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
   10d44:	980c      	ldr	r0, [sp, #48]	; 0x30
   10d46:	b348      	cbz	r0, 10d9c <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10d48:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   10d4c:	9300      	str	r3, [sp, #0]
   10d4e:	aa0e      	add	r2, sp, #56	; 0x38
   10d50:	ab06      	add	r3, sp, #24
   10d52:	2100      	movs	r1, #0
   10d54:	f7ff fc9a 	bl	1068c <encode_uint>
				conv->altform_0c = true;
   10d58:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   10d5c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   10d60:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   10d64:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10d68:	4681      	mov	r9, r0
				conv->altform_0c = true;
   10d6a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
   10d6e:	2600      	movs	r6, #0
				goto prec_int_pad0;
   10d70:	e748      	b.n	10c04 <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
   10d72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   10d74:	2907      	cmp	r1, #7
   10d76:	f63f aee4 	bhi.w	10b42 <cbvprintf+0x416>
   10d7a:	e8df f001 	tbb	[pc, r1]
   10d7e:	040d      	.short	0x040d
   10d80:	08080d06 	.word	0x08080d06
   10d84:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   10d86:	701d      	strb	r5, [r3, #0]
		break;
   10d88:	e6db      	b.n	10b42 <cbvprintf+0x416>
		*(short *)dp = (short)count;
   10d8a:	801d      	strh	r5, [r3, #0]
		break;
   10d8c:	e6d9      	b.n	10b42 <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
   10d8e:	4628      	mov	r0, r5
   10d90:	17e9      	asrs	r1, r5, #31
   10d92:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   10d96:	e6d4      	b.n	10b42 <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   10d98:	601d      	str	r5, [r3, #0]
		break;
   10d9a:	e6d2      	b.n	10b42 <cbvprintf+0x416>
			bpe = bps + 5;
   10d9c:	4f2e      	ldr	r7, [pc, #184]	; (10e58 <cbvprintf+0x72c>)
   10d9e:	4606      	mov	r6, r0
			bps = "(nil)";
   10da0:	f1a7 0905 	sub.w	r9, r7, #5
   10da4:	e78d      	b.n	10cc2 <cbvprintf+0x596>
		} else if (conv->altform_0) {
   10da6:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   10da8:	bf48      	it	mi
   10daa:	3301      	addmi	r3, #1
   10dac:	e792      	b.n	10cd4 <cbvprintf+0x5a8>
					OUTC(pad);
   10dae:	4618      	mov	r0, r3
   10db0:	4659      	mov	r1, fp
   10db2:	9303      	str	r3, [sp, #12]
   10db4:	47d0      	blx	sl
   10db6:	2800      	cmp	r0, #0
   10db8:	9b03      	ldr	r3, [sp, #12]
   10dba:	da04      	bge.n	10dc6 <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
   10dbc:	b013      	add	sp, #76	; 0x4c
   10dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   10dc2:	2320      	movs	r3, #32
   10dc4:	4445      	add	r5, r8
   10dc6:	4642      	mov	r2, r8
				while (width-- > 0) {
   10dc8:	2a00      	cmp	r2, #0
   10dca:	eba5 0108 	sub.w	r1, r5, r8
   10dce:	f108 38ff 	add.w	r8, r8, #4294967295
   10dd2:	dcec      	bgt.n	10dae <cbvprintf+0x682>
   10dd4:	460d      	mov	r5, r1
		if (sign != 0) {
   10dd6:	b12e      	cbz	r6, 10de4 <cbvprintf+0x6b8>
			OUTC(sign);
   10dd8:	4659      	mov	r1, fp
   10dda:	4630      	mov	r0, r6
   10ddc:	47d0      	blx	sl
   10dde:	2800      	cmp	r0, #0
   10de0:	dbec      	blt.n	10dbc <cbvprintf+0x690>
   10de2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   10de4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   10de8:	06d9      	lsls	r1, r3, #27
   10dea:	d401      	bmi.n	10df0 <cbvprintf+0x6c4>
   10dec:	071a      	lsls	r2, r3, #28
   10dee:	d505      	bpl.n	10dfc <cbvprintf+0x6d0>
				OUTC('0');
   10df0:	4659      	mov	r1, fp
   10df2:	2030      	movs	r0, #48	; 0x30
   10df4:	47d0      	blx	sl
   10df6:	2800      	cmp	r0, #0
   10df8:	dbe0      	blt.n	10dbc <cbvprintf+0x690>
   10dfa:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   10dfc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   10e00:	06db      	lsls	r3, r3, #27
   10e02:	d506      	bpl.n	10e12 <cbvprintf+0x6e6>
				OUTC(conv->specifier);
   10e04:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   10e08:	4659      	mov	r1, fp
   10e0a:	47d0      	blx	sl
   10e0c:	2800      	cmp	r0, #0
   10e0e:	dbd5      	blt.n	10dbc <cbvprintf+0x690>
   10e10:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   10e12:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   10e14:	442e      	add	r6, r5
   10e16:	1b73      	subs	r3, r6, r5
   10e18:	2b00      	cmp	r3, #0
   10e1a:	dc15      	bgt.n	10e48 <cbvprintf+0x71c>
			OUTS(bps, bpe);
   10e1c:	463b      	mov	r3, r7
   10e1e:	464a      	mov	r2, r9
   10e20:	4659      	mov	r1, fp
   10e22:	4650      	mov	r0, sl
   10e24:	f00c ff0a 	bl	1dc3c <outs>
   10e28:	2800      	cmp	r0, #0
   10e2a:	dbc7      	blt.n	10dbc <cbvprintf+0x690>
   10e2c:	4405      	add	r5, r0
		while (width > 0) {
   10e2e:	44a8      	add	r8, r5
   10e30:	eba8 0305 	sub.w	r3, r8, r5
   10e34:	2b00      	cmp	r3, #0
   10e36:	f77f ae84 	ble.w	10b42 <cbvprintf+0x416>
			OUTC(' ');
   10e3a:	4659      	mov	r1, fp
   10e3c:	2020      	movs	r0, #32
   10e3e:	47d0      	blx	sl
   10e40:	2800      	cmp	r0, #0
   10e42:	dbbb      	blt.n	10dbc <cbvprintf+0x690>
   10e44:	3501      	adds	r5, #1
			--width;
   10e46:	e7f3      	b.n	10e30 <cbvprintf+0x704>
				OUTC('0');
   10e48:	4659      	mov	r1, fp
   10e4a:	2030      	movs	r0, #48	; 0x30
   10e4c:	47d0      	blx	sl
   10e4e:	2800      	cmp	r0, #0
   10e50:	dbb4      	blt.n	10dbc <cbvprintf+0x690>
   10e52:	3501      	adds	r5, #1
   10e54:	e7df      	b.n	10e16 <cbvprintf+0x6ea>
   10e56:	bf00      	nop
   10e58:	00021926 	.word	0x00021926

00010e5c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e5e:	4605      	mov	r5, r0
	__asm__ volatile(
   10e60:	f04f 0340 	mov.w	r3, #64	; 0x40
   10e64:	f3ef 8611 	mrs	r6, BASEPRI
   10e68:	f383 8812 	msr	BASEPRI_MAX, r3
   10e6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10e70:	481e      	ldr	r0, [pc, #120]	; (10eec <pm_state_notify+0x90>)
   10e72:	f008 fd27 	bl	198c4 <z_spin_lock_valid>
   10e76:	b968      	cbnz	r0, 10e94 <pm_state_notify+0x38>
   10e78:	4a1d      	ldr	r2, [pc, #116]	; (10ef0 <pm_state_notify+0x94>)
   10e7a:	491e      	ldr	r1, [pc, #120]	; (10ef4 <pm_state_notify+0x98>)
   10e7c:	481e      	ldr	r0, [pc, #120]	; (10ef8 <pm_state_notify+0x9c>)
   10e7e:	2381      	movs	r3, #129	; 0x81
   10e80:	f00c fc98 	bl	1d7b4 <printk>
   10e84:	4919      	ldr	r1, [pc, #100]	; (10eec <pm_state_notify+0x90>)
   10e86:	481d      	ldr	r0, [pc, #116]	; (10efc <pm_state_notify+0xa0>)
   10e88:	f00c fc94 	bl	1d7b4 <printk>
   10e8c:	4818      	ldr	r0, [pc, #96]	; (10ef0 <pm_state_notify+0x94>)
   10e8e:	2181      	movs	r1, #129	; 0x81
   10e90:	f00c feea 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   10e94:	4815      	ldr	r0, [pc, #84]	; (10eec <pm_state_notify+0x90>)
   10e96:	f008 fd33 	bl	19900 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10e9a:	4b19      	ldr	r3, [pc, #100]	; (10f00 <pm_state_notify+0xa4>)
   10e9c:	681c      	ldr	r4, [r3, #0]
   10e9e:	2c00      	cmp	r4, #0
   10ea0:	bf38      	it	cc
   10ea2:	2400      	movcc	r4, #0
   10ea4:	b15c      	cbz	r4, 10ebe <pm_state_notify+0x62>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   10ea6:	4f17      	ldr	r7, [pc, #92]	; (10f04 <pm_state_notify+0xa8>)
			callback = notifier->state_exit;
   10ea8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   10eac:	2d00      	cmp	r5, #0
   10eae:	bf08      	it	eq
   10eb0:	4613      	moveq	r3, r2
		if (callback) {
   10eb2:	b10b      	cbz	r3, 10eb8 <pm_state_notify+0x5c>
			callback(z_power_state.state);
   10eb4:	7838      	ldrb	r0, [r7, #0]
   10eb6:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10eb8:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10eba:	2c00      	cmp	r4, #0
   10ebc:	d1f4      	bne.n	10ea8 <pm_state_notify+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10ebe:	480b      	ldr	r0, [pc, #44]	; (10eec <pm_state_notify+0x90>)
   10ec0:	f008 fd0e 	bl	198e0 <z_spin_unlock_valid>
   10ec4:	b968      	cbnz	r0, 10ee2 <pm_state_notify+0x86>
   10ec6:	4a0a      	ldr	r2, [pc, #40]	; (10ef0 <pm_state_notify+0x94>)
   10ec8:	490f      	ldr	r1, [pc, #60]	; (10f08 <pm_state_notify+0xac>)
   10eca:	480b      	ldr	r0, [pc, #44]	; (10ef8 <pm_state_notify+0x9c>)
   10ecc:	23ac      	movs	r3, #172	; 0xac
   10ece:	f00c fc71 	bl	1d7b4 <printk>
   10ed2:	4906      	ldr	r1, [pc, #24]	; (10eec <pm_state_notify+0x90>)
   10ed4:	480d      	ldr	r0, [pc, #52]	; (10f0c <pm_state_notify+0xb0>)
   10ed6:	f00c fc6d 	bl	1d7b4 <printk>
   10eda:	4805      	ldr	r0, [pc, #20]	; (10ef0 <pm_state_notify+0x94>)
   10edc:	21ac      	movs	r1, #172	; 0xac
   10ede:	f00c fec3 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   10ee2:	f386 8811 	msr	BASEPRI, r6
   10ee6:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   10eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10eec:	20001cec 	.word	0x20001cec
   10ef0:	00021710 	.word	0x00021710
   10ef4:	00021762 	.word	0x00021762
   10ef8:	00021650 	.word	0x00021650
   10efc:	00021777 	.word	0x00021777
   10f00:	20001cf0 	.word	0x20001cf0
   10f04:	20001cf8 	.word	0x20001cf8
   10f08:	00021736 	.word	0x00021736
   10f0c:	0002174d 	.word	0x0002174d

00010f10 <pm_system_resume>:

void pm_system_resume(void)
{
   10f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   10f12:	4b0f      	ldr	r3, [pc, #60]	; (10f50 <pm_system_resume+0x40>)
   10f14:	681a      	ldr	r2, [r3, #0]
   10f16:	b9ba      	cbnz	r2, 10f48 <pm_system_resume+0x38>
		post_ops_done = 1;
   10f18:	2201      	movs	r2, #1
   10f1a:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   10f1c:	4a0d      	ldr	r2, [pc, #52]	; (10f54 <pm_system_resume+0x44>)
   10f1e:	ca07      	ldmia	r2, {r0, r1, r2}
   10f20:	ab01      	add	r3, sp, #4
   10f22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   10f26:	4a0c      	ldr	r2, [pc, #48]	; (10f58 <pm_system_resume+0x48>)
   10f28:	b14a      	cbz	r2, 10f3e <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
   10f2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   10f2e:	f00d f8a6 	bl	1e07e <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   10f32:	2000      	movs	r0, #0
	}
}
   10f34:	b005      	add	sp, #20
   10f36:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
   10f3a:	f7ff bf8f 	b.w	10e5c <pm_state_notify>
   10f3e:	f382 8811 	msr	BASEPRI, r2
   10f42:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10f46:	e7f4      	b.n	10f32 <pm_system_resume+0x22>
}
   10f48:	b005      	add	sp, #20
   10f4a:	f85d fb04 	ldr.w	pc, [sp], #4
   10f4e:	bf00      	nop
   10f50:	2000041c 	.word	0x2000041c
   10f54:	20001cf8 	.word	0x20001cf8
   10f58:	0001e07f 	.word	0x0001e07f

00010f5c <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   10f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f5e:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   10f60:	466e      	mov	r6, sp
   10f62:	4601      	mov	r1, r0
{
   10f64:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   10f66:	4630      	mov	r0, r6
   10f68:	f00c fe86 	bl	1dc78 <pm_policy_next_state>
   10f6c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10f70:	4c1f      	ldr	r4, [pc, #124]	; (10ff0 <pm_system_suspend+0x94>)
   10f72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   10f76:	7820      	ldrb	r0, [r4, #0]
   10f78:	2800      	cmp	r0, #0
   10f7a:	d037      	beq.n	10fec <pm_system_suspend+0x90>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   10f7c:	4b1d      	ldr	r3, [pc, #116]	; (10ff4 <pm_system_suspend+0x98>)
   10f7e:	2000      	movs	r0, #0
   10f80:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   10f82:	1c6b      	adds	r3, r5, #1
   10f84:	d01d      	beq.n	10fc2 <pm_system_suspend+0x66>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
   10f86:	4291      	cmp	r1, r2
   10f88:	d20c      	bcs.n	10fa4 <pm_system_suspend+0x48>
   10f8a:	491b      	ldr	r1, [pc, #108]	; (10ff8 <pm_system_suspend+0x9c>)
   10f8c:	4a1b      	ldr	r2, [pc, #108]	; (10ffc <pm_system_suspend+0xa0>)
   10f8e:	481c      	ldr	r0, [pc, #112]	; (11000 <pm_system_suspend+0xa4>)
   10f90:	23ca      	movs	r3, #202	; 0xca
   10f92:	f00c fc0f 	bl	1d7b4 <printk>
   10f96:	481b      	ldr	r0, [pc, #108]	; (11004 <pm_system_suspend+0xa8>)
   10f98:	f00c fc0c 	bl	1d7b4 <printk>
   10f9c:	4817      	ldr	r0, [pc, #92]	; (10ffc <pm_system_suspend+0xa0>)
   10f9e:	21ca      	movs	r1, #202	; 0xca
   10fa0:	f00c fe62 	bl	1dc68 <assert_post_action>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   10fa4:	68a7      	ldr	r7, [r4, #8]
   10fa6:	4818      	ldr	r0, [pc, #96]	; (11008 <pm_system_suspend+0xac>)
   10fa8:	4a18      	ldr	r2, [pc, #96]	; (1100c <pm_system_suspend+0xb0>)
   10faa:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   10fae:	2100      	movs	r1, #0
   10fb0:	2300      	movs	r3, #0
   10fb2:	fbe6 0107 	umlal	r0, r1, r6, r7
   10fb6:	f7ef f8e3 	bl	180 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   10fba:	2101      	movs	r1, #1
   10fbc:	1a28      	subs	r0, r5, r0
   10fbe:	f00b f9fb 	bl	1c3b8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10fc2:	f009 feff 	bl	1adc4 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   10fc6:	2001      	movs	r0, #1
   10fc8:	f7ff ff48 	bl	10e5c <pm_state_notify>
	pm_state_set(z_power_state);
   10fcc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   10fd0:	ab05      	add	r3, sp, #20
   10fd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   10fd6:	4a0e      	ldr	r2, [pc, #56]	; (11010 <pm_system_suspend+0xb4>)
   10fd8:	b11a      	cbz	r2, 10fe2 <pm_system_suspend+0x86>
		pm_power_state_set(info);
   10fda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   10fde:	f00d f83b 	bl	1e058 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   10fe2:	f7ff ff95 	bl	10f10 <pm_system_resume>
	k_sched_unlock();
   10fe6:	f00a fc31 	bl	1b84c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   10fea:	7820      	ldrb	r0, [r4, #0]
}
   10fec:	b009      	add	sp, #36	; 0x24
   10fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ff0:	20001cf8 	.word	0x20001cf8
   10ff4:	2000041c 	.word	0x2000041c
   10ff8:	0002199d 	.word	0x0002199d
   10ffc:	00021927 	.word	0x00021927
   11000:	00021650 	.word	0x00021650
   11004:	000219dd 	.word	0x000219dd
   11008:	000f423f 	.word	0x000f423f
   1100c:	000f4240 	.word	0x000f4240
   11010:	0001e059 	.word	0x0001e059

00011014 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
   11014:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   11016:	4d06      	ldr	r5, [pc, #24]	; (11030 <scan_default_param_set+0x1c>)
   11018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   1101a:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   1101c:	ac01      	add	r4, sp, #4
   1101e:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
   11020:	ae01      	add	r6, sp, #4
   11022:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   11024:	4c03      	ldr	r4, [pc, #12]	; (11034 <scan_default_param_set+0x20>)
   11026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11028:	682b      	ldr	r3, [r5, #0]
   1102a:	6023      	str	r3, [r4, #0]
}
   1102c:	b006      	add	sp, #24
   1102e:	bd70      	pop	{r4, r5, r6, pc}
   11030:	00020f90 	.word	0x00020f90
   11034:	20001d5c 	.word	0x20001d5c

00011038 <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
   11038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
   1103c:	7803      	ldrb	r3, [r0, #0]
   1103e:	2b09      	cmp	r3, #9
{
   11040:	4605      	mov	r5, r0
   11042:	460c      	mov	r4, r1
	switch (data->type) {
   11044:	d11c      	bne.n	11080 <adv_data_found+0x48>
	return CONFIG_BT_SCAN_NAME_CNT && bt_scan.scan_filters.name.enabled;
   11046:	4e11      	ldr	r6, [pc, #68]	; (1108c <adv_data_found+0x54>)
	if (is_name_filter_enabled()) {
   11048:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
   1104c:	b1c3      	cbz	r3, 11080 <adv_data_found+0x48>
	uint8_t counter = bt_scan.scan_filters.name.cnt;
   1104e:	f896 a040 	ldrb.w	sl, [r6, #64]	; 0x40
	uint8_t data_len = data->data_len;
   11052:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
   11056:	2700      	movs	r7, #0
   11058:	4557      	cmp	r7, sl
   1105a:	d211      	bcs.n	11080 <adv_data_found+0x48>
		if (adv_name_cmp(data->data,
   1105c:	eb06 1947 	add.w	r9, r6, r7, lsl #5
	return strncmp(target_name, data, data_len) == 0;
   11060:	6869      	ldr	r1, [r5, #4]
   11062:	4642      	mov	r2, r8
   11064:	4648      	mov	r0, r9
   11066:	f00f fd1e 	bl	20aa6 <strncmp>
		if (adv_name_cmp(data->data,
   1106a:	b960      	cbnz	r0, 11086 <adv_data_found+0x4e>
			control->filter_match_cnt++;
   1106c:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
   1106e:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
   11072:	3301      	adds	r3, #1
   11074:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
   11076:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
   11078:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
   1107c:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
   1107e:	70a3      	strb	r3, [r4, #2]
	default:
		break;
	}

	return true;
}
   11080:	2001      	movs	r0, #1
   11082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < counter; i++) {
   11086:	3701      	adds	r7, #1
   11088:	e7e6      	b.n	11058 <adv_data_found+0x20>
   1108a:	bf00      	nop
   1108c:	20001d04 	.word	0x20001d04

00011090 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   11090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11092:	4b0a      	ldr	r3, [pc, #40]	; (110bc <notify_filter_matched.constprop.0+0x2c>)
   11094:	681c      	ldr	r4, [r3, #0]
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   11096:	4605      	mov	r5, r0
   11098:	460e      	mov	r6, r1
   1109a:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1109c:	b10c      	cbz	r4, 110a2 <notify_filter_matched.constprop.0+0x12>
   1109e:	3c04      	subs	r4, #4
   110a0:	b904      	cbnz	r4, 110a4 <notify_filter_matched.constprop.0+0x14>
}
   110a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
   110a4:	6823      	ldr	r3, [r4, #0]
   110a6:	681b      	ldr	r3, [r3, #0]
   110a8:	b11b      	cbz	r3, 110b2 <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
   110aa:	463a      	mov	r2, r7
   110ac:	4631      	mov	r1, r6
   110ae:	4628      	mov	r0, r5
   110b0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   110b2:	1d23      	adds	r3, r4, #4
   110b4:	d0f5      	beq.n	110a2 <notify_filter_matched.constprop.0+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   110b6:	6864      	ldr	r4, [r4, #4]
   110b8:	e7f0      	b.n	1109c <notify_filter_matched.constprop.0+0xc>
   110ba:	bf00      	nop
   110bc:	20001d78 	.word	0x20001d78

000110c0 <bt_scan_cb_register>:
	if (!cb) {
   110c0:	b150      	cbz	r0, 110d8 <bt_scan_cb_register+0x18>
	parent->next = child;
   110c2:	2300      	movs	r3, #0
   110c4:	6043      	str	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   110c6:	4b05      	ldr	r3, [pc, #20]	; (110dc <bt_scan_cb_register+0x1c>)
   110c8:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&callback_list, &cb->node);
   110ca:	1d02      	adds	r2, r0, #4
   110cc:	b911      	cbnz	r1, 110d4 <bt_scan_cb_register+0x14>
	list->head = node;
   110ce:	e9c3 2200 	strd	r2, r2, [r3]
}
   110d2:	4770      	bx	lr
	parent->next = child;
   110d4:	600a      	str	r2, [r1, #0]
	list->tail = node;
   110d6:	605a      	str	r2, [r3, #4]
}
   110d8:	4770      	bx	lr
   110da:	bf00      	nop
   110dc:	20001d78 	.word	0x20001d78

000110e0 <bt_scan_filter_add>:
{
   110e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   110e4:	4604      	mov	r4, r0
	if (!data) {
   110e6:	460f      	mov	r7, r1
   110e8:	2900      	cmp	r1, #0
   110ea:	d040      	beq.n	1116e <bt_scan_filter_add+0x8e>
	return z_impl_k_mutex_lock(mutex, timeout);
   110ec:	4821      	ldr	r0, [pc, #132]	; (11174 <bt_scan_filter_add+0x94>)
   110ee:	f04f 32ff 	mov.w	r2, #4294967295
   110f2:	f04f 33ff 	mov.w	r3, #4294967295
   110f6:	f008 fc37 	bl	19968 <z_impl_k_mutex_lock>
	switch (type) {
   110fa:	b164      	cbz	r4, 11116 <bt_scan_filter_add+0x36>
   110fc:	3c01      	subs	r4, #1
   110fe:	2c04      	cmp	r4, #4
   11100:	bf94      	ite	ls
   11102:	f06f 050b 	mvnls.w	r5, #11
   11106:	f06f 0515 	mvnhi.w	r5, #21
	return z_impl_k_mutex_unlock(mutex);
   1110a:	481a      	ldr	r0, [pc, #104]	; (11174 <bt_scan_filter_add+0x94>)
   1110c:	f008 fd2c 	bl	19b68 <z_impl_k_mutex_unlock>
}
   11110:	4628      	mov	r0, r5
   11112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t counter = bt_scan.scan_filters.name.cnt;
   11116:	4e18      	ldr	r6, [pc, #96]	; (11178 <bt_scan_filter_add+0x98>)
   11118:	f896 9040 	ldrb.w	r9, [r6, #64]	; 0x40
	if (counter >= CONFIG_BT_SCAN_NAME_CNT) {
   1111c:	f1b9 0f01 	cmp.w	r9, #1
   11120:	d81f      	bhi.n	11162 <bt_scan_filter_add+0x82>
	name_len = strlen(name);
   11122:	4638      	mov	r0, r7
   11124:	f7fb f8aa 	bl	c27c <strlen>
	if ((name_len == 0) || (name_len > CONFIG_BT_SCAN_NAME_MAX_LEN)) {
   11128:	1e43      	subs	r3, r0, #1
   1112a:	2b1f      	cmp	r3, #31
	name_len = strlen(name);
   1112c:	4680      	mov	r8, r0
	if ((name_len == 0) || (name_len > CONFIG_BT_SCAN_NAME_MAX_LEN)) {
   1112e:	d81b      	bhi.n	11168 <bt_scan_filter_add+0x88>
		if (!strcmp(bt_scan.scan_filters.name.target_name[i], name)) {
   11130:	46b2      	mov	sl, r6
	for (size_t i = 0; i < counter; i++) {
   11132:	45a1      	cmp	r9, r4
   11134:	d80c      	bhi.n	11150 <bt_scan_filter_add+0x70>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11136:	4642      	mov	r2, r8
   11138:	4639      	mov	r1, r7
   1113a:	eb06 1049 	add.w	r0, r6, r9, lsl #5
   1113e:	f00f fc94 	bl	20a6a <memcpy>
	bt_scan.scan_filters.name.cnt++;
   11142:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
   11146:	3301      	adds	r3, #1
   11148:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
	return 0;
   1114c:	2500      	movs	r5, #0
   1114e:	e7dc      	b.n	1110a <bt_scan_filter_add+0x2a>
		if (!strcmp(bt_scan.scan_filters.name.target_name[i], name)) {
   11150:	4639      	mov	r1, r7
   11152:	4650      	mov	r0, sl
   11154:	f7fb f888 	bl	c268 <strcmp>
	for (size_t i = 0; i < counter; i++) {
   11158:	2401      	movs	r4, #1
		if (!strcmp(bt_scan.scan_filters.name.target_name[i], name)) {
   1115a:	4605      	mov	r5, r0
   1115c:	2800      	cmp	r0, #0
   1115e:	d1e8      	bne.n	11132 <bt_scan_filter_add+0x52>
   11160:	e7d3      	b.n	1110a <bt_scan_filter_add+0x2a>
		return -ENOMEM;
   11162:	f06f 050b 	mvn.w	r5, #11
   11166:	e7d0      	b.n	1110a <bt_scan_filter_add+0x2a>
		return -EINVAL;
   11168:	f06f 0515 	mvn.w	r5, #21
   1116c:	e7cd      	b.n	1110a <bt_scan_filter_add+0x2a>
		return -EINVAL;
   1116e:	f06f 0515 	mvn.w	r5, #21
   11172:	e7cd      	b.n	11110 <bt_scan_filter_add+0x30>
   11174:	2000065c 	.word	0x2000065c
   11178:	20001d04 	.word	0x20001d04

0001117c <bt_scan_filter_remove_all>:
{
   1117c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   1117e:	4c0d      	ldr	r4, [pc, #52]	; (111b4 <bt_scan_filter_remove_all+0x38>)
   11180:	f04f 32ff 	mov.w	r2, #4294967295
   11184:	f04f 33ff 	mov.w	r3, #4294967295
   11188:	4620      	mov	r0, r4
   1118a:	f008 fbed 	bl	19968 <z_impl_k_mutex_lock>
	name_filter->cnt = 0;
   1118e:	4b0a      	ldr	r3, [pc, #40]	; (111b8 <bt_scan_filter_remove_all+0x3c>)
   11190:	2200      	movs	r2, #0
   11192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	short_name_filter->cnt = 0;
   11196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	addr_filter->cnt = 0;
   1119a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	uuid_filter->cnt = 0;
   1119e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	appearance_filter->cnt = 0;
   111a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	manufacturer_data_filter->cnt = 0;
   111a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	return z_impl_k_mutex_unlock(mutex);
   111aa:	4620      	mov	r0, r4
}
   111ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   111b0:	f008 bcda 	b.w	19b68 <z_impl_k_mutex_unlock>
   111b4:	2000065c 	.word	0x2000065c
   111b8:	20001d04 	.word	0x20001d04

000111bc <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
   111bc:	4b07      	ldr	r3, [pc, #28]	; (111dc <bt_scan_filter_disable+0x20>)
   111be:	2200      	movs	r2, #0
   111c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	bt_scan.scan_filters.short_name.enabled = false;
   111c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	bt_scan.scan_filters.addr.enabled = false;
   111c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	bt_scan.scan_filters.uuid.enabled = false;
   111cc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	bt_scan.scan_filters.appearance.enabled = false;
   111d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	bt_scan.scan_filters.manufacturer_data.enabled = false;
   111d4:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
}
   111d8:	4770      	bx	lr
   111da:	bf00      	nop
   111dc:	20001d04 	.word	0x20001d04

000111e0 <bt_scan_filter_enable>:
{
   111e0:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
   111e2:	0683      	lsls	r3, r0, #26
   111e4:	d025      	beq.n	11232 <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
   111e6:	f7ff ffe9 	bl	111bc <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
   111ea:	4b13      	ldr	r3, [pc, #76]	; (11238 <bt_scan_filter_enable+0x58>)
   111ec:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
   111f0:	bf1c      	itt	ne
   111f2:	2201      	movne	r2, #1
   111f4:	f883 2045 	strbne.w	r2, [r3, #69]	; 0x45
	if (mode & BT_SCAN_NAME_FILTER) {
   111f8:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
   111fa:	bf44      	itt	mi
   111fc:	2201      	movmi	r2, #1
   111fe:	f883 2041 	strbmi.w	r2, [r3, #65]	; 0x41
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
   11202:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
   11204:	bf44      	itt	mi
   11206:	2201      	movmi	r2, #1
   11208:	f883 2043 	strbmi.w	r2, [r3, #67]	; 0x43
	if (mode & BT_SCAN_UUID_FILTER) {
   1120c:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
   1120e:	bf44      	itt	mi
   11210:	2201      	movmi	r2, #1
   11212:	f883 2049 	strbmi.w	r2, [r3, #73]	; 0x49
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
   11216:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
   11218:	bf44      	itt	mi
   1121a:	2201      	movmi	r2, #1
   1121c:	f883 204d 	strbmi.w	r2, [r3, #77]	; 0x4d
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
   11220:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
   11222:	bf44      	itt	mi
   11224:	2201      	movmi	r2, #1
   11226:	f883 204f 	strbmi.w	r2, [r3, #79]	; 0x4f
	filters->all_mode = match_all;
   1122a:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	return 0;
   1122e:	2000      	movs	r0, #0
}
   11230:	bd08      	pop	{r3, pc}
		return -EINVAL;
   11232:	f06f 0015 	mvn.w	r0, #21
   11236:	e7fb      	b.n	11230 <bt_scan_filter_enable+0x50>
   11238:	20001d04 	.word	0x20001d04

0001123c <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
   1123c:	b570      	push	{r4, r5, r6, lr}
   1123e:	b086      	sub	sp, #24
   11240:	460e      	mov	r6, r1
   11242:	4605      	mov	r5, r0
	bt_scan_stop();
   11244:	f00c fd1d 	bl	1dc82 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
   11248:	4b18      	ldr	r3, [pc, #96]	; (112ac <scan_connect_with_target.part.0+0x70>)
   1124a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1124c:	ac02      	add	r4, sp, #8
   1124e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
   11252:	ab01      	add	r3, sp, #4
   11254:	4621      	mov	r1, r4
   11256:	4a16      	ldr	r2, [pc, #88]	; (112b0 <scan_connect_with_target.part.0+0x74>)
   11258:	4630      	mov	r0, r6
   1125a:	f002 ff55 	bl	14108 <bt_conn_le_create>
	if (err) {
   1125e:	4b15      	ldr	r3, [pc, #84]	; (112b4 <scan_connect_with_target.part.0+0x78>)
   11260:	3508      	adds	r5, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11262:	681c      	ldr	r4, [r3, #0]
	if (err) {
   11264:	b168      	cbz	r0, 11282 <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11266:	b10c      	cbz	r4, 1126c <scan_connect_with_target.part.0+0x30>
   11268:	3c04      	subs	r4, #4
   1126a:	b90c      	cbnz	r4, 11270 <scan_connect_with_target.part.0+0x34>
}
   1126c:	b006      	add	sp, #24
   1126e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
   11270:	6823      	ldr	r3, [r4, #0]
   11272:	689b      	ldr	r3, [r3, #8]
   11274:	b10b      	cbz	r3, 1127a <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
   11276:	4628      	mov	r0, r5
   11278:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1127a:	1d22      	adds	r2, r4, #4
   1127c:	d0f6      	beq.n	1126c <scan_connect_with_target.part.0+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1127e:	6864      	ldr	r4, [r4, #4]
   11280:	e7f1      	b.n	11266 <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11282:	b91c      	cbnz	r4, 1128c <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
   11284:	9801      	ldr	r0, [sp, #4]
   11286:	f002 fcd5 	bl	13c34 <bt_conn_unref>
   1128a:	e7ef      	b.n	1126c <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
   1128c:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1128e:	3c04      	subs	r4, #4
   11290:	2c00      	cmp	r4, #0
   11292:	d0f7      	beq.n	11284 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
   11294:	6823      	ldr	r3, [r4, #0]
   11296:	68db      	ldr	r3, [r3, #12]
   11298:	b113      	cbz	r3, 112a0 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
   1129a:	4631      	mov	r1, r6
   1129c:	4628      	mov	r0, r5
   1129e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   112a0:	1d23      	adds	r3, r4, #4
   112a2:	d0ef      	beq.n	11284 <scan_connect_with_target.part.0+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   112a4:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   112a6:	2c00      	cmp	r4, #0
   112a8:	d1f1      	bne.n	1128e <scan_connect_with_target.part.0+0x52>
   112aa:	e7eb      	b.n	11284 <scan_connect_with_target.part.0+0x48>
   112ac:	00020fa4 	.word	0x00020fa4
   112b0:	20001d70 	.word	0x20001d70
   112b4:	20001d78 	.word	0x20001d78

000112b8 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
   112b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   112bc:	4f31      	ldr	r7, [pc, #196]	; (11384 <scan_recv+0xcc>)
{
   112be:	b094      	sub	sp, #80	; 0x50
	memset(&scan_control, 0, sizeof(scan_control));
   112c0:	2250      	movs	r2, #80	; 0x50
{
   112c2:	4605      	mov	r5, r0
   112c4:	460c      	mov	r4, r1
	memset(&scan_control, 0, sizeof(scan_control));
   112c6:	4668      	mov	r0, sp
   112c8:	2100      	movs	r1, #0
   112ca:	f00f fbdc 	bl	20a86 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   112ce:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   112d2:	f88d 2003 	strb.w	r2, [sp, #3]
	control->filter_cnt = 0;
   112d6:	2200      	movs	r2, #0
   112d8:	f88d 2000 	strb.w	r2, [sp]
	if (is_name_filter_enabled()) {
   112dc:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
   112e0:	b112      	cbz	r2, 112e8 <scan_recv+0x30>
		control->filter_cnt++;
   112e2:	2301      	movs	r3, #1
   112e4:	f88d 3000 	strb.w	r3, [sp]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
   112e8:	7a2b      	ldrb	r3, [r5, #8]
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
   112ea:	4620      	mov	r0, r4
   112ec:	f003 0301 	and.w	r3, r3, #1
   112f0:	f88d 3004 	strb.w	r3, [sp, #4]
   112f4:	f00e fd78 	bl	1fde8 <net_buf_simple_headroom>

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
   112f8:	4923      	ldr	r1, [pc, #140]	; (11388 <scan_recv+0xd0>)
	state->len = buf->len;
   112fa:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
   112fe:	4606      	mov	r6, r0
   11300:	466a      	mov	r2, sp
   11302:	4620      	mov	r0, r4
   11304:	f00d f9ca 	bl	1e69c <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
   11308:	4b20      	ldr	r3, [pc, #128]	; (1138c <scan_recv+0xd4>)
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
   1130a:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
   1130c:	f8a4 8004 	strh.w	r8, [r4, #4]
	scan_control.device_info.adv_data = ad;
   11310:	e9cd 3403 	strd	r3, r4, [sp, #12]
	if (control->all_mode &&
   11314:	f89d 3003 	ldrb.w	r3, [sp, #3]
	scan_control.device_info.recv_info = info;
   11318:	9502      	str	r5, [sp, #8]
	buf->data = buf->__buf + state->offset;
   1131a:	fa10 f686 	uxtah	r6, r0, r6
   1131e:	6026      	str	r6, [r4, #0]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
   11320:	682c      	ldr	r4, [r5, #0]
	if (control->all_mode &&
   11322:	b1ab      	cbz	r3, 11350 <scan_recv+0x98>
   11324:	f89d 2001 	ldrb.w	r2, [sp, #1]
   11328:	f89d 3000 	ldrb.w	r3, [sp]
   1132c:	429a      	cmp	r2, r3
   1132e:	d113      	bne.n	11358 <scan_recv+0xa0>
		notify_filter_matched(&control->device_info,
   11330:	f89d 2004 	ldrb.w	r2, [sp, #4]
   11334:	a905      	add	r1, sp, #20
   11336:	a802      	add	r0, sp, #8
   11338:	f7ff feaa 	bl	11090 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
   1133c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
   11340:	b11b      	cbz	r3, 1134a <scan_recv+0x92>
   11342:	4621      	mov	r1, r4
   11344:	4668      	mov	r0, sp
   11346:	f7ff ff79 	bl	1123c <scan_connect_with_target.part.0>
}
   1134a:	b014      	add	sp, #80	; 0x50
   1134c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if ((!control->all_mode) && control->filter_match) {
   11350:	f89d 3002 	ldrb.w	r3, [sp, #2]
   11354:	2b00      	cmp	r3, #0
   11356:	d1eb      	bne.n	11330 <scan_recv+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11358:	4b0d      	ldr	r3, [pc, #52]	; (11390 <scan_recv+0xd8>)
   1135a:	681c      	ldr	r4, [r3, #0]
   1135c:	2c00      	cmp	r4, #0
   1135e:	d0f4      	beq.n	1134a <scan_recv+0x92>
		notify_filter_no_match(&control->device_info,
   11360:	f89d 5004 	ldrb.w	r5, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11364:	3c04      	subs	r4, #4
   11366:	2c00      	cmp	r4, #0
   11368:	d0ef      	beq.n	1134a <scan_recv+0x92>
		if (cb->cb_addr->filter_no_match) {
   1136a:	6823      	ldr	r3, [r4, #0]
   1136c:	685b      	ldr	r3, [r3, #4]
   1136e:	b113      	cbz	r3, 11376 <scan_recv+0xbe>
			cb->cb_addr->filter_no_match(device_info, connectable);
   11370:	4629      	mov	r1, r5
   11372:	a802      	add	r0, sp, #8
   11374:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   11376:	1d23      	adds	r3, r4, #4
   11378:	d0e7      	beq.n	1134a <scan_recv+0x92>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1137a:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1137c:	2c00      	cmp	r4, #0
   1137e:	d1f1      	bne.n	11364 <scan_recv+0xac>
   11380:	e7e3      	b.n	1134a <scan_recv+0x92>
   11382:	bf00      	nop
   11384:	20001d04 	.word	0x20001d04
   11388:	00011039 	.word	0x00011039
   1138c:	20001d70 	.word	0x20001d70
   11390:	20001d78 	.word	0x20001d78

00011394 <bt_scan_init>:
{
   11394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   11396:	4c18      	ldr	r4, [pc, #96]	; (113f8 <bt_scan_init+0x64>)
{
   11398:	4605      	mov	r5, r0
	bt_le_scan_cb_register(&scan_cb);
   1139a:	4818      	ldr	r0, [pc, #96]	; (113fc <bt_scan_init+0x68>)
   1139c:	f002 fa5a 	bl	13854 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   113a0:	2254      	movs	r2, #84	; 0x54
   113a2:	2100      	movs	r1, #0
   113a4:	4620      	mov	r0, r4
   113a6:	f00f fb6e 	bl	20a86 <memset>
	if (init) {
   113aa:	4627      	mov	r7, r4
   113ac:	b1d5      	cbz	r5, 113e4 <bt_scan_init+0x50>
		bt_scan.connect_if_match = init->connect_if_match;
   113ae:	792b      	ldrb	r3, [r5, #4]
   113b0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
		if (init->scan_param) {
   113b4:	682c      	ldr	r4, [r5, #0]
   113b6:	b164      	cbz	r4, 113d2 <bt_scan_init+0x3e>
			bt_scan.scan_param = *init->scan_param;
   113b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   113ba:	f107 0658 	add.w	r6, r7, #88	; 0x58
   113be:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   113c0:	6823      	ldr	r3, [r4, #0]
   113c2:	6033      	str	r3, [r6, #0]
		if (init->conn_param) {
   113c4:	68aa      	ldr	r2, [r5, #8]
   113c6:	b13a      	cbz	r2, 113d8 <bt_scan_init+0x44>
			bt_scan.conn_param = *init->conn_param;
   113c8:	4b0d      	ldr	r3, [pc, #52]	; (11400 <bt_scan_init+0x6c>)
   113ca:	6810      	ldr	r0, [r2, #0]
   113cc:	6851      	ldr	r1, [r2, #4]
   113ce:	c303      	stmia	r3!, {r0, r1}
}
   113d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			scan_default_param_set();
   113d2:	f7ff fe1f 	bl	11014 <scan_default_param_set>
   113d6:	e7f5      	b.n	113c4 <bt_scan_init+0x30>
	bt_scan.conn_param = *conn_param;
   113d8:	490a      	ldr	r1, [pc, #40]	; (11404 <bt_scan_init+0x70>)
   113da:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   113de:	e9c7 131b 	strd	r1, r3, [r7, #108]	; 0x6c
}
   113e2:	e7f5      	b.n	113d0 <bt_scan_init+0x3c>
		scan_default_param_set();
   113e4:	f7ff fe16 	bl	11014 <scan_default_param_set>
	bt_scan.conn_param = *conn_param;
   113e8:	4a06      	ldr	r2, [pc, #24]	; (11404 <bt_scan_init+0x70>)
		bt_scan.connect_if_match = false;
   113ea:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
	bt_scan.conn_param = *conn_param;
   113ee:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   113f2:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
}
   113f6:	e7eb      	b.n	113d0 <bt_scan_init+0x3c>
   113f8:	20001d04 	.word	0x20001d04
   113fc:	20000420 	.word	0x20000420
   11400:	20001d70 	.word	0x20001d70
   11404:	00280018 	.word	0x00280018

00011408 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
   11408:	b108      	cbz	r0, 1140e <bt_scan_start+0x6>
   1140a:	2801      	cmp	r0, #1
   1140c:	d106      	bne.n	1141c <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   1140e:	4b05      	ldr	r3, [pc, #20]	; (11424 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   11410:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   11412:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   11416:	4804      	ldr	r0, [pc, #16]	; (11428 <bt_scan_start+0x20>)
   11418:	f002 b986 	b.w	13728 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   1141c:	f06f 0015 	mvn.w	r0, #21
   11420:	4770      	bx	lr
   11422:	bf00      	nop
   11424:	20001d04 	.word	0x20001d04
   11428:	20001d5c 	.word	0x20001d5c

0001142c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   1142c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   1142e:	4e26      	ldr	r6, [pc, #152]	; (114c8 <tc_aes128_set_encrypt_key+0x9c>)
{
   11430:	4607      	mov	r7, r0
   11432:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   11434:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   11436:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   11438:	ad01      	add	r5, sp, #4
   1143a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1143c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1143e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11440:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   11444:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   11448:	4638      	mov	r0, r7
   1144a:	2f00      	cmp	r7, #0
   1144c:	d038      	beq.n	114c0 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   1144e:	2c00      	cmp	r4, #0
   11450:	d038      	beq.n	114c4 <tc_aes128_set_encrypt_key+0x98>
   11452:	1f38      	subs	r0, r7, #4
   11454:	4621      	mov	r1, r4
   11456:	4602      	mov	r2, r0
   11458:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1145a:	784b      	ldrb	r3, [r1, #1]
   1145c:	780d      	ldrb	r5, [r1, #0]
   1145e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   11460:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   11464:	78cd      	ldrb	r5, [r1, #3]
   11466:	432b      	orrs	r3, r5
   11468:	788d      	ldrb	r5, [r1, #2]
   1146a:	3104      	adds	r1, #4
   1146c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   11470:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   11472:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   11476:	d1f0      	bne.n	1145a <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   11478:	4c14      	ldr	r4, [pc, #80]	; (114cc <tc_aes128_set_encrypt_key+0xa0>)
   1147a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   1147c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1147e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   11480:	d116      	bne.n	114b0 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   11482:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11486:	5ca5      	ldrb	r5, [r4, r2]
   11488:	0e1a      	lsrs	r2, r3, #24
   1148a:	5ca2      	ldrb	r2, [r4, r2]
   1148c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   11490:	f3c3 2507 	ubfx	r5, r3, #8, #8
   11494:	b2db      	uxtb	r3, r3
   11496:	5d65      	ldrb	r5, [r4, r5]
   11498:	5ce3      	ldrb	r3, [r4, r3]
   1149a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1149e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   114a2:	ad0c      	add	r5, sp, #48	; 0x30
   114a4:	f021 0303 	bic.w	r3, r1, #3
   114a8:	442b      	add	r3, r5
   114aa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   114ae:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   114b0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   114b4:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   114b6:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   114b8:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   114ba:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   114bc:	d1de      	bne.n	1147c <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   114be:	2001      	movs	r0, #1
}
   114c0:	b00d      	add	sp, #52	; 0x34
   114c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   114c4:	4620      	mov	r0, r4
   114c6:	e7fb      	b.n	114c0 <tc_aes128_set_encrypt_key+0x94>
   114c8:	00020fb4 	.word	0x00020fb4
   114cc:	00021a02 	.word	0x00021a02

000114d0 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   114d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   114d4:	4615      	mov	r5, r2
   114d6:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   114d8:	4606      	mov	r6, r0
   114da:	2800      	cmp	r0, #0
   114dc:	d058      	beq.n	11590 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   114de:	2900      	cmp	r1, #0
   114e0:	d059      	beq.n	11596 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   114e2:	2a00      	cmp	r2, #0
   114e4:	d059      	beq.n	1159a <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   114e6:	2310      	movs	r3, #16
   114e8:	460a      	mov	r2, r1
   114ea:	4668      	mov	r0, sp
   114ec:	4619      	mov	r1, r3
   114ee:	f00c fbca 	bl	1dc86 <_copy>
	add_round_key(state, s->words);
   114f2:	4629      	mov	r1, r5
   114f4:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   114f6:	4c2a      	ldr	r4, [pc, #168]	; (115a0 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   114f8:	f00c fbdd 	bl	1dcb6 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   114fc:	f105 0710 	add.w	r7, r5, #16
   11500:	46a1      	mov	r9, r4
   11502:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   11504:	46e8      	mov	r8, sp
{
   11506:	466a      	mov	r2, sp
   11508:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   1150a:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1150c:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   1150e:	5c61      	ldrb	r1, [r4, r1]
   11510:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   11514:	d1f9      	bne.n	1150a <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   11516:	4668      	mov	r0, sp
   11518:	f00c fc12 	bl	1dd40 <shift_rows>
	mult_row_column(t, s);
   1151c:	4669      	mov	r1, sp
   1151e:	a804      	add	r0, sp, #16
   11520:	f00c fc47 	bl	1ddb2 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   11524:	a901      	add	r1, sp, #4
   11526:	a805      	add	r0, sp, #20
   11528:	f00c fc43 	bl	1ddb2 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1152c:	a902      	add	r1, sp, #8
   1152e:	a806      	add	r0, sp, #24
   11530:	f00c fc3f 	bl	1ddb2 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   11534:	a903      	add	r1, sp, #12
   11536:	a807      	add	r0, sp, #28
   11538:	f00c fc3b 	bl	1ddb2 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1153c:	2310      	movs	r3, #16
   1153e:	4619      	mov	r1, r3
   11540:	eb0d 0203 	add.w	r2, sp, r3
   11544:	4668      	mov	r0, sp
   11546:	f00c fb9e 	bl	1dc86 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1154a:	4639      	mov	r1, r7
   1154c:	4668      	mov	r0, sp
   1154e:	3710      	adds	r7, #16
   11550:	f00c fbb1 	bl	1dcb6 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   11554:	42af      	cmp	r7, r5
   11556:	d1d5      	bne.n	11504 <tc_aes_encrypt+0x34>
   11558:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   1155a:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   1155e:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   11560:	f819 3003 	ldrb.w	r3, [r9, r3]
   11564:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   11568:	d1f7      	bne.n	1155a <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   1156a:	4668      	mov	r0, sp
   1156c:	f00c fbe8 	bl	1dd40 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   11570:	4629      	mov	r1, r5
   11572:	4668      	mov	r0, sp
   11574:	f00c fb9f 	bl	1dcb6 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   11578:	2310      	movs	r3, #16
   1157a:	4619      	mov	r1, r3
   1157c:	466a      	mov	r2, sp
   1157e:	4630      	mov	r0, r6
   11580:	f00c fb81 	bl	1dc86 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   11584:	4668      	mov	r0, sp
   11586:	2210      	movs	r2, #16
   11588:	4621      	mov	r1, r4
   1158a:	f00c fb89 	bl	1dca0 <_set>

	return TC_CRYPTO_SUCCESS;
   1158e:	2001      	movs	r0, #1
}
   11590:	b009      	add	sp, #36	; 0x24
   11592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   11596:	4608      	mov	r0, r1
   11598:	e7fa      	b.n	11590 <tc_aes_encrypt+0xc0>
   1159a:	4610      	mov	r0, r2
   1159c:	e7f8      	b.n	11590 <tc_aes_encrypt+0xc0>
   1159e:	bf00      	nop
   115a0:	00021a02 	.word	0x00021a02

000115a4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   115a4:	4901      	ldr	r1, [pc, #4]	; (115ac <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   115a6:	2210      	movs	r2, #16
	str	r2, [r1]
   115a8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   115aa:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   115ac:	e000ed10 	.word	0xe000ed10

000115b0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   115b0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   115b2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   115b4:	f380 8811 	msr	BASEPRI, r0
	isb
   115b8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   115bc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   115c0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   115c2:	b662      	cpsie	i
	isb
   115c4:	f3bf 8f6f 	isb	sy

	bx	lr
   115c8:	4770      	bx	lr
   115ca:	bf00      	nop

000115cc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   115cc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   115ce:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   115d0:	f381 8811 	msr	BASEPRI, r1

	wfe
   115d4:	bf20      	wfe

	msr	BASEPRI, r0
   115d6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   115da:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   115dc:	4770      	bx	lr
   115de:	bf00      	nop

000115e0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   115e0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   115e2:	2b00      	cmp	r3, #0
   115e4:	db08      	blt.n	115f8 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   115e6:	2201      	movs	r2, #1
   115e8:	f000 001f 	and.w	r0, r0, #31
   115ec:	fa02 f000 	lsl.w	r0, r2, r0
   115f0:	095b      	lsrs	r3, r3, #5
   115f2:	4a02      	ldr	r2, [pc, #8]	; (115fc <arch_irq_enable+0x1c>)
   115f4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   115f8:	4770      	bx	lr
   115fa:	bf00      	nop
   115fc:	e000e100 	.word	0xe000e100

00011600 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   11600:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   11602:	2b00      	cmp	r3, #0
   11604:	db0d      	blt.n	11622 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11606:	2201      	movs	r2, #1
   11608:	095b      	lsrs	r3, r3, #5
   1160a:	f000 001f 	and.w	r0, r0, #31
   1160e:	fa02 f000 	lsl.w	r0, r2, r0
   11612:	3320      	adds	r3, #32
   11614:	4a03      	ldr	r2, [pc, #12]	; (11624 <arch_irq_disable+0x24>)
   11616:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1161a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1161e:	f3bf 8f6f 	isb	sy
}
   11622:	4770      	bx	lr
   11624:	e000e100 	.word	0xe000e100

00011628 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   11628:	4b05      	ldr	r3, [pc, #20]	; (11640 <arch_irq_is_enabled+0x18>)
   1162a:	0942      	lsrs	r2, r0, #5
   1162c:	f000 001f 	and.w	r0, r0, #31
   11630:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11634:	2301      	movs	r3, #1
   11636:	fa03 f000 	lsl.w	r0, r3, r0
}
   1163a:	4010      	ands	r0, r2
   1163c:	4770      	bx	lr
   1163e:	bf00      	nop
   11640:	e000e100 	.word	0xe000e100

00011644 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   11644:	07d3      	lsls	r3, r2, #31
{
   11646:	b570      	push	{r4, r5, r6, lr}
   11648:	4605      	mov	r5, r0
   1164a:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1164c:	d425      	bmi.n	1169a <z_arm_irq_priority_set+0x56>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   1164e:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   11650:	2c07      	cmp	r4, #7
   11652:	d90f      	bls.n	11674 <z_arm_irq_priority_set+0x30>
   11654:	4a12      	ldr	r2, [pc, #72]	; (116a0 <z_arm_irq_priority_set+0x5c>)
   11656:	4913      	ldr	r1, [pc, #76]	; (116a4 <z_arm_irq_priority_set+0x60>)
   11658:	4813      	ldr	r0, [pc, #76]	; (116a8 <z_arm_irq_priority_set+0x64>)
   1165a:	2358      	movs	r3, #88	; 0x58
   1165c:	f00c f8aa 	bl	1d7b4 <printk>
   11660:	4812      	ldr	r0, [pc, #72]	; (116ac <z_arm_irq_priority_set+0x68>)
   11662:	4631      	mov	r1, r6
   11664:	2306      	movs	r3, #6
   11666:	462a      	mov	r2, r5
   11668:	f00c f8a4 	bl	1d7b4 <printk>
   1166c:	480c      	ldr	r0, [pc, #48]	; (116a0 <z_arm_irq_priority_set+0x5c>)
   1166e:	2158      	movs	r1, #88	; 0x58
   11670:	f00c fafa 	bl	1dc68 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   11674:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   11676:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11678:	bfac      	ite	ge
   1167a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1167e:	4b0c      	ldrlt	r3, [pc, #48]	; (116b0 <z_arm_irq_priority_set+0x6c>)
   11680:	ea4f 1444 	mov.w	r4, r4, lsl #5
   11684:	bfb8      	it	lt
   11686:	f005 050f 	andlt.w	r5, r5, #15
   1168a:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1168c:	bfaa      	itet	ge
   1168e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11692:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11694:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   11698:	bd70      	pop	{r4, r5, r6, pc}
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   1169a:	2400      	movs	r4, #0
   1169c:	e7ea      	b.n	11674 <z_arm_irq_priority_set+0x30>
   1169e:	bf00      	nop
   116a0:	00021b02 	.word	0x00021b02
   116a4:	00021b38 	.word	0x00021b38
   116a8:	00021650 	.word	0x00021650
   116ac:	00021b53 	.word	0x00021b53
   116b0:	e000ed14 	.word	0xe000ed14

000116b4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   116b4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   116b6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   116b8:	4b04      	ldr	r3, [pc, #16]	; (116cc <_arch_isr_direct_pm+0x18>)
   116ba:	6998      	ldr	r0, [r3, #24]
   116bc:	b118      	cbz	r0, 116c6 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   116be:	2200      	movs	r2, #0
   116c0:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit(idle_val);
   116c2:	f00f f859 	bl	20778 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   116c6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   116c8:	bd08      	pop	{r3, pc}
   116ca:	bf00      	nop
   116cc:	2000203c 	.word	0x2000203c

000116d0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   116d0:	bf30      	wfi
    b z_SysNmiOnReset
   116d2:	f7ff bffd 	b.w	116d0 <z_SysNmiOnReset>
   116d6:	bf00      	nop

000116d8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   116d8:	4a0b      	ldr	r2, [pc, #44]	; (11708 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   116da:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   116dc:	4b0b      	ldr	r3, [pc, #44]	; (1170c <z_arm_prep_c+0x34>)
   116de:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   116e2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   116e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   116e8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   116ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   116f0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   116f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   116f8:	f007 fcea 	bl	190d0 <z_bss_zero>
	z_data_copy();
   116fc:	f00a fc88 	bl	1c010 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   11700:	f000 fa2c 	bl	11b5c <z_arm_interrupt_init>
	z_cstart();
   11704:	f007 fcee 	bl	190e4 <z_cstart>
   11708:	00000000 	.word	0x00000000
   1170c:	e000ed00 	.word	0xe000ed00

00011710 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   11710:	4a09      	ldr	r2, [pc, #36]	; (11738 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   11712:	490a      	ldr	r1, [pc, #40]	; (1173c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   11714:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   11716:	6809      	ldr	r1, [r1, #0]
   11718:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1171a:	4909      	ldr	r1, [pc, #36]	; (11740 <arch_swap+0x30>)
	_current->arch.basepri = key;
   1171c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1171e:	684b      	ldr	r3, [r1, #4]
   11720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11724:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   11726:	2300      	movs	r3, #0
   11728:	f383 8811 	msr	BASEPRI, r3
   1172c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   11730:	6893      	ldr	r3, [r2, #8]
}
   11732:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   11734:	4770      	bx	lr
   11736:	bf00      	nop
   11738:	2000203c 	.word	0x2000203c
   1173c:	0002145c 	.word	0x0002145c
   11740:	e000ed00 	.word	0xe000ed00

00011744 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11744:	4912      	ldr	r1, [pc, #72]	; (11790 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   11746:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   11748:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1174c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1174e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   11752:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11756:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   11758:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1175c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   11760:	4f0c      	ldr	r7, [pc, #48]	; (11794 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   11762:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   11766:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   11768:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1176a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1176c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1176e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   11770:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   11772:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   11776:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   11778:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1177a:	f000 fa85 	bl	11c88 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1177e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   11782:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   11786:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1178a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1178e:	4770      	bx	lr
    ldr r1, =_kernel
   11790:	2000203c 	.word	0x2000203c
    ldr v4, =_SCS_ICSR
   11794:	e000ed04 	.word	0xe000ed04

00011798 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   11798:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1179c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1179e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   117a2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   117a6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   117a8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   117ac:	2902      	cmp	r1, #2
    beq _oops
   117ae:	d0ff      	beq.n	117b0 <_oops>

000117b0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   117b0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   117b2:	f00c fc3f 	bl	1e034 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   117b6:	bd01      	pop	{r0, pc}

000117b8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   117b8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   117bc:	9b00      	ldr	r3, [sp, #0]
   117be:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   117c2:	490a      	ldr	r1, [pc, #40]	; (117ec <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   117c4:	9b01      	ldr	r3, [sp, #4]
   117c6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   117ca:	9b02      	ldr	r3, [sp, #8]
   117cc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   117d0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   117d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   117d8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   117dc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   117e0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   117e2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   117e4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   117e6:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   117e8:	4770      	bx	lr
   117ea:	bf00      	nop
   117ec:	0001d891 	.word	0x0001d891

000117f0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   117f0:	4a0b      	ldr	r2, [pc, #44]	; (11820 <z_check_thread_stack_fail+0x30>)
{
   117f2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   117f4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   117f6:	b190      	cbz	r0, 1181e <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   117f8:	f113 0f16 	cmn.w	r3, #22
   117fc:	6e80      	ldr	r0, [r0, #104]	; 0x68
   117fe:	d005      	beq.n	1180c <z_check_thread_stack_fail+0x1c>
   11800:	f1a0 0220 	sub.w	r2, r0, #32
   11804:	429a      	cmp	r2, r3
   11806:	d806      	bhi.n	11816 <z_check_thread_stack_fail+0x26>
   11808:	4283      	cmp	r3, r0
   1180a:	d204      	bcs.n	11816 <z_check_thread_stack_fail+0x26>
   1180c:	4281      	cmp	r1, r0
   1180e:	bf2c      	ite	cs
   11810:	2100      	movcs	r1, #0
   11812:	2101      	movcc	r1, #1
   11814:	e000      	b.n	11818 <z_check_thread_stack_fail+0x28>
   11816:	2100      	movs	r1, #0
   11818:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   1181a:	bf08      	it	eq
   1181c:	2000      	moveq	r0, #0
}
   1181e:	4770      	bx	lr
   11820:	2000203c 	.word	0x2000203c

00011824 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   11824:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   11826:	4b09      	ldr	r3, [pc, #36]	; (1184c <arch_switch_to_main_thread+0x28>)
   11828:	6098      	str	r0, [r3, #8]
{
   1182a:	460d      	mov	r5, r1
   1182c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1182e:	f000 fa2b 	bl	11c88 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   11832:	4620      	mov	r0, r4
   11834:	f385 8809 	msr	PSP, r5
   11838:	2100      	movs	r1, #0
   1183a:	b663      	cpsie	if
   1183c:	f381 8811 	msr	BASEPRI, r1
   11840:	f3bf 8f6f 	isb	sy
   11844:	2200      	movs	r2, #0
   11846:	2300      	movs	r3, #0
   11848:	f00c f822 	bl	1d890 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1184c:	2000203c 	.word	0x2000203c

00011850 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   11850:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   11852:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   11854:	4a0b      	ldr	r2, [pc, #44]	; (11884 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   11856:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   11858:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1185a:	bf1e      	ittt	ne
	movne	r1, #0
   1185c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1185e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   11860:	f00e ff8a 	blne	20778 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   11864:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   11866:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1186a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1186e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   11872:	4905      	ldr	r1, [pc, #20]	; (11888 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   11874:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   11876:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   11878:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1187a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1187e:	4903      	ldr	r1, [pc, #12]	; (1188c <_isr_wrapper+0x3c>)
	bx r1
   11880:	4708      	bx	r1
   11882:	0000      	.short	0x0000
	ldr r2, =_kernel
   11884:	2000203c 	.word	0x2000203c
	ldr r1, =_sw_isr_table
   11888:	00020e00 	.word	0x00020e00
	ldr r1, =z_arm_int_exit
   1188c:	00011891 	.word	0x00011891

00011890 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   11890:	4b04      	ldr	r3, [pc, #16]	; (118a4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   11892:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   11894:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   11896:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   11898:	d003      	beq.n	118a2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1189a:	4903      	ldr	r1, [pc, #12]	; (118a8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1189c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   118a0:	600a      	str	r2, [r1, #0]

000118a2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   118a2:	4770      	bx	lr
	ldr r3, =_kernel
   118a4:	2000203c 	.word	0x2000203c
	ldr r1, =_SCS_ICSR
   118a8:	e000ed04 	.word	0xe000ed04

000118ac <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   118ac:	4b23      	ldr	r3, [pc, #140]	; (1193c <mem_manage_fault+0x90>)
{
   118ae:	b570      	push	{r4, r5, r6, lr}
   118b0:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   118b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   118b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   118b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   118b8:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   118ba:	0790      	lsls	r0, r2, #30
   118bc:	d51a      	bpl.n	118f4 <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   118be:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   118c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   118c2:	0612      	lsls	r2, r2, #24
   118c4:	d516      	bpl.n	118f4 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   118c6:	b119      	cbz	r1, 118d0 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   118c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   118ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   118ce:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   118d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   118d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   118d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   118d6:	06d6      	lsls	r6, r2, #27
   118d8:	d40f      	bmi.n	118fa <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   118da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   118dc:	0799      	lsls	r1, r3, #30
   118de:	d40c      	bmi.n	118fa <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   118e0:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   118e2:	4a16      	ldr	r2, [pc, #88]	; (1193c <mem_manage_fault+0x90>)
   118e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   118e6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   118ea:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   118ec:	2300      	movs	r3, #0
   118ee:	702b      	strb	r3, [r5, #0]

	return reason;
}
   118f0:	4620      	mov	r0, r4
   118f2:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
   118f4:	f06f 0015 	mvn.w	r0, #21
   118f8:	e7ea      	b.n	118d0 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   118fa:	4e10      	ldr	r6, [pc, #64]	; (1193c <mem_manage_fault+0x90>)
   118fc:	6873      	ldr	r3, [r6, #4]
   118fe:	051a      	lsls	r2, r3, #20
   11900:	d5ee      	bpl.n	118e0 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   11902:	4621      	mov	r1, r4
   11904:	f7ff ff74 	bl	117f0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   11908:	4604      	mov	r4, r0
   1190a:	b118      	cbz	r0, 11914 <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1190c:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   11910:	2402      	movs	r4, #2
   11912:	e7e6      	b.n	118e2 <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   11914:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   11916:	06db      	lsls	r3, r3, #27
   11918:	d5e2      	bpl.n	118e0 <mem_manage_fault+0x34>
   1191a:	4a09      	ldr	r2, [pc, #36]	; (11940 <mem_manage_fault+0x94>)
   1191c:	4909      	ldr	r1, [pc, #36]	; (11944 <mem_manage_fault+0x98>)
   1191e:	480a      	ldr	r0, [pc, #40]	; (11948 <mem_manage_fault+0x9c>)
   11920:	f240 1349 	movw	r3, #329	; 0x149
   11924:	f00b ff46 	bl	1d7b4 <printk>
   11928:	4808      	ldr	r0, [pc, #32]	; (1194c <mem_manage_fault+0xa0>)
   1192a:	f00b ff43 	bl	1d7b4 <printk>
   1192e:	4804      	ldr	r0, [pc, #16]	; (11940 <mem_manage_fault+0x94>)
   11930:	f240 1149 	movw	r1, #329	; 0x149
   11934:	f00c f998 	bl	1dc68 <assert_post_action>
   11938:	e7d3      	b.n	118e2 <mem_manage_fault+0x36>
   1193a:	bf00      	nop
   1193c:	e000ed00 	.word	0xe000ed00
   11940:	00021b93 	.word	0x00021b93
   11944:	00021bcd 	.word	0x00021bcd
   11948:	00021650 	.word	0x00021650
   1194c:	00021c17 	.word	0x00021c17

00011950 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   11950:	4b0d      	ldr	r3, [pc, #52]	; (11988 <bus_fault.isra.0+0x38>)
   11952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   11954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   11956:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11958:	0592      	lsls	r2, r2, #22
   1195a:	d508      	bpl.n	1196e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1195c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1195e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11960:	0412      	lsls	r2, r2, #16
   11962:	d504      	bpl.n	1196e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   11964:	b118      	cbz	r0, 1196e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   11966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11968:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1196c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1196e:	4b06      	ldr	r3, [pc, #24]	; (11988 <bus_fault.isra.0+0x38>)
   11970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   11972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11974:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11976:	bf58      	it	pl
   11978:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1197a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   1197c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1197e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   11982:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11984:	7008      	strb	r0, [r1, #0]

	return reason;
}
   11986:	4770      	bx	lr
   11988:	e000ed00 	.word	0xe000ed00

0001198c <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1198c:	4b07      	ldr	r3, [pc, #28]	; (119ac <usage_fault.isra.0+0x20>)
   1198e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11992:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   11994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   11996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1199a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1199c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   119a0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   119a4:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   119a6:	2000      	movs	r0, #0
   119a8:	4770      	bx	lr
   119aa:	bf00      	nop
   119ac:	e000ed00 	.word	0xe000ed00

000119b0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   119b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   119b2:	4b57      	ldr	r3, [pc, #348]	; (11b10 <z_arm_fault+0x160>)
   119b4:	685c      	ldr	r4, [r3, #4]
{
   119b6:	b08b      	sub	sp, #44	; 0x2c
   119b8:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   119ba:	f3c4 0408 	ubfx	r4, r4, #0, #9
   119be:	2600      	movs	r6, #0
   119c0:	f386 8811 	msr	BASEPRI, r6
   119c4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   119c8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   119cc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   119d0:	d108      	bne.n	119e4 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   119d2:	f002 030c 	and.w	r3, r2, #12
   119d6:	2b08      	cmp	r3, #8
   119d8:	d004      	beq.n	119e4 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   119da:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
   119dc:	bf5c      	itt	pl
   119de:	4605      	movpl	r5, r0
			*nested_exc = true;
   119e0:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   119e2:	b97d      	cbnz	r5, 11a04 <z_arm_fault+0x54>
   119e4:	4a4b      	ldr	r2, [pc, #300]	; (11b14 <z_arm_fault+0x164>)
   119e6:	494c      	ldr	r1, [pc, #304]	; (11b18 <z_arm_fault+0x168>)
   119e8:	484c      	ldr	r0, [pc, #304]	; (11b1c <z_arm_fault+0x16c>)
   119ea:	f240 33f2 	movw	r3, #1010	; 0x3f2
   119ee:	f00b fee1 	bl	1d7b4 <printk>
   119f2:	484b      	ldr	r0, [pc, #300]	; (11b20 <z_arm_fault+0x170>)
   119f4:	f00b fede 	bl	1d7b4 <printk>
   119f8:	4846      	ldr	r0, [pc, #280]	; (11b14 <z_arm_fault+0x164>)
   119fa:	f240 31f2 	movw	r1, #1010	; 0x3f2
   119fe:	f00c f933 	bl	1dc68 <assert_post_action>
   11a02:	2500      	movs	r5, #0
	*recoverable = false;
   11a04:	2300      	movs	r3, #0
   11a06:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   11a0a:	1ee3      	subs	r3, r4, #3
   11a0c:	2b03      	cmp	r3, #3
   11a0e:	d878      	bhi.n	11b02 <z_arm_fault+0x152>
   11a10:	e8df f003 	tbb	[pc, r3]
   11a14:	4f736f02 	.word	0x4f736f02
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11a18:	4b3d      	ldr	r3, [pc, #244]	; (11b10 <z_arm_fault+0x160>)
   11a1a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   11a1c:	f014 0402 	ands.w	r4, r4, #2
   11a20:	d16f      	bne.n	11b02 <z_arm_fault+0x152>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   11a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   11a24:	2a00      	cmp	r2, #0
   11a26:	db18      	blt.n	11a5a <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11a2a:	005b      	lsls	r3, r3, #1
   11a2c:	d554      	bpl.n	11ad8 <z_arm_fault+0x128>
	uint16_t fault_insn = *(ret_addr - 1);
   11a2e:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   11a30:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   11a34:	f64d 7302 	movw	r3, #57090	; 0xdf02
   11a38:	429a      	cmp	r2, r3
   11a3a:	d00d      	beq.n	11a58 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
   11a3c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   11a40:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   11a44:	781b      	ldrb	r3, [r3, #0]
   11a46:	b33b      	cbz	r3, 11a98 <z_arm_fault+0xe8>
			reason = mem_manage_fault(esf, 1, recoverable);
   11a48:	f10d 0207 	add.w	r2, sp, #7
   11a4c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   11a4e:	4628      	mov	r0, r5
   11a50:	f7ff ff2c 	bl	118ac <mem_manage_fault>
		reason = usage_fault(esf);
   11a54:	4604      	mov	r4, r0
		break;
   11a56:	e000      	b.n	11a5a <z_arm_fault+0xaa>
			reason = esf->basic.r0;
   11a58:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   11a5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11a5e:	b9cb      	cbnz	r3, 11a94 <z_arm_fault+0xe4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11a60:	aa02      	add	r2, sp, #8
   11a62:	f105 0720 	add.w	r7, r5, #32
   11a66:	6828      	ldr	r0, [r5, #0]
   11a68:	6869      	ldr	r1, [r5, #4]
   11a6a:	4613      	mov	r3, r2
   11a6c:	c303      	stmia	r3!, {r0, r1}
   11a6e:	3508      	adds	r5, #8
   11a70:	42bd      	cmp	r5, r7
   11a72:	461a      	mov	r2, r3
   11a74:	d1f7      	bne.n	11a66 <z_arm_fault+0xb6>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   11a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11a78:	2e00      	cmp	r6, #0
   11a7a:	d044      	beq.n	11b06 <z_arm_fault+0x156>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   11a7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   11a80:	b922      	cbnz	r2, 11a8c <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   11a82:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   11a86:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11a8a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   11a8c:	a902      	add	r1, sp, #8
   11a8e:	4620      	mov	r0, r4
   11a90:	f00c face 	bl	1e030 <z_arm_fatal_error>
}
   11a94:	b00b      	add	sp, #44	; 0x2c
   11a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   11a98:	4b22      	ldr	r3, [pc, #136]	; (11b24 <z_arm_fault+0x174>)
   11a9a:	781b      	ldrb	r3, [r3, #0]
   11a9c:	b12b      	cbz	r3, 11aaa <z_arm_fault+0xfa>
			reason = bus_fault(esf, 1, recoverable);
   11a9e:	f10d 0107 	add.w	r1, sp, #7
   11aa2:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   11aa4:	f7ff ff54 	bl	11950 <bus_fault.isra.0>
   11aa8:	e7d4      	b.n	11a54 <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
   11aaa:	4b1f      	ldr	r3, [pc, #124]	; (11b28 <z_arm_fault+0x178>)
   11aac:	881b      	ldrh	r3, [r3, #0]
   11aae:	b29b      	uxth	r3, r3
   11ab0:	b113      	cbz	r3, 11ab8 <z_arm_fault+0x108>
		reason = usage_fault(esf);
   11ab2:	f7ff ff6b 	bl	1198c <usage_fault.isra.0>
   11ab6:	e7cd      	b.n	11a54 <z_arm_fault+0xa4>
			__ASSERT(0,
   11ab8:	491c      	ldr	r1, [pc, #112]	; (11b2c <z_arm_fault+0x17c>)
   11aba:	4a16      	ldr	r2, [pc, #88]	; (11b14 <z_arm_fault+0x164>)
   11abc:	4817      	ldr	r0, [pc, #92]	; (11b1c <z_arm_fault+0x16c>)
   11abe:	f240 23c3 	movw	r3, #707	; 0x2c3
   11ac2:	f00b fe77 	bl	1d7b4 <printk>
   11ac6:	481a      	ldr	r0, [pc, #104]	; (11b30 <z_arm_fault+0x180>)
   11ac8:	f00b fe74 	bl	1d7b4 <printk>
   11acc:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
   11ad0:	4810      	ldr	r0, [pc, #64]	; (11b14 <z_arm_fault+0x164>)
   11ad2:	f00c f8c9 	bl	1dc68 <assert_post_action>
   11ad6:	e7c0      	b.n	11a5a <z_arm_fault+0xaa>
   11ad8:	4914      	ldr	r1, [pc, #80]	; (11b2c <z_arm_fault+0x17c>)
   11ada:	4a0e      	ldr	r2, [pc, #56]	; (11b14 <z_arm_fault+0x164>)
   11adc:	480f      	ldr	r0, [pc, #60]	; (11b1c <z_arm_fault+0x16c>)
   11ade:	f240 23c7 	movw	r3, #711	; 0x2c7
   11ae2:	f00b fe67 	bl	1d7b4 <printk>
   11ae6:	4813      	ldr	r0, [pc, #76]	; (11b34 <z_arm_fault+0x184>)
   11ae8:	f00b fe64 	bl	1d7b4 <printk>
   11aec:	f240 21c7 	movw	r1, #711	; 0x2c7
   11af0:	e7ee      	b.n	11ad0 <z_arm_fault+0x120>
		reason = mem_manage_fault(esf, 0, recoverable);
   11af2:	f10d 0207 	add.w	r2, sp, #7
   11af6:	2100      	movs	r1, #0
   11af8:	e7a9      	b.n	11a4e <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
   11afa:	f10d 0107 	add.w	r1, sp, #7
   11afe:	2000      	movs	r0, #0
   11b00:	e7d0      	b.n	11aa4 <z_arm_fault+0xf4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   11b02:	2400      	movs	r4, #0
   11b04:	e7a9      	b.n	11a5a <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11b06:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11b0a:	f023 0301 	bic.w	r3, r3, #1
   11b0e:	e7bc      	b.n	11a8a <z_arm_fault+0xda>
   11b10:	e000ed00 	.word	0xe000ed00
   11b14:	00021b93 	.word	0x00021b93
   11b18:	00021c3a 	.word	0x00021c3a
   11b1c:	00021650 	.word	0x00021650
   11b20:	00021c4d 	.word	0x00021c4d
   11b24:	e000ed29 	.word	0xe000ed29
   11b28:	e000ed2a 	.word	0xe000ed2a
   11b2c:	00023382 	.word	0x00023382
   11b30:	00021c8b 	.word	0x00021c8b
   11b34:	00021caf 	.word	0x00021caf

00011b38 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11b38:	4a02      	ldr	r2, [pc, #8]	; (11b44 <z_arm_fault_init+0xc>)
   11b3a:	6953      	ldr	r3, [r2, #20]
   11b3c:	f043 0310 	orr.w	r3, r3, #16
   11b40:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   11b42:	4770      	bx	lr
   11b44:	e000ed00 	.word	0xe000ed00

00011b48 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   11b48:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11b4c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11b50:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11b52:	4672      	mov	r2, lr
	bl z_arm_fault
   11b54:	f7ff ff2c 	bl	119b0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   11b58:	bd01      	pop	{r0, pc}
   11b5a:	bf00      	nop

00011b5c <z_arm_interrupt_init>:
   11b5c:	4804      	ldr	r0, [pc, #16]	; (11b70 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   11b5e:	2300      	movs	r3, #0
   11b60:	2140      	movs	r1, #64	; 0x40
   11b62:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11b64:	3301      	adds	r3, #1
   11b66:	2b27      	cmp	r3, #39	; 0x27
   11b68:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   11b6c:	d1f9      	bne.n	11b62 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   11b6e:	4770      	bx	lr
   11b70:	e000e100 	.word	0xe000e100

00011b74 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   11b74:	2000      	movs	r0, #0
    msr CONTROL, r0
   11b76:	f380 8814 	msr	CONTROL, r0
    isb
   11b7a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   11b7e:	f00f f8c1 	bl	20d04 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   11b82:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   11b84:	490d      	ldr	r1, [pc, #52]	; (11bbc <__start+0x48>)
    str r0, [r1]
   11b86:	6008      	str	r0, [r1, #0]
    dsb
   11b88:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11b8c:	480c      	ldr	r0, [pc, #48]	; (11bc0 <__start+0x4c>)
    msr msp, r0
   11b8e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   11b92:	f000 f829 	bl	11be8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11b96:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   11b98:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   11b9c:	4809      	ldr	r0, [pc, #36]	; (11bc4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   11b9e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   11ba2:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11ba4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11ba8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11bac:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11bae:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11bb0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11bb4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11bb8:	f7ff fd8e 	bl	116d8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   11bbc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11bc0:	20004080 	.word	0x20004080
    ldr r0, =z_interrupt_stacks
   11bc4:	20004200 	.word	0x20004200

00011bc8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   11bc8:	4a06      	ldr	r2, [pc, #24]	; (11be4 <z_arm_clear_arm_mpu_config+0x1c>)
   11bca:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   11bcc:	2300      	movs	r3, #0
	int num_regions =
   11bce:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   11bd2:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   11bd4:	428b      	cmp	r3, r1
   11bd6:	d100      	bne.n	11bda <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   11bd8:	4770      	bx	lr
  MPU->RNR = rnr;
   11bda:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   11bdc:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   11bde:	3301      	adds	r3, #1
   11be0:	e7f8      	b.n	11bd4 <z_arm_clear_arm_mpu_config+0xc>
   11be2:	bf00      	nop
   11be4:	e000ed90 	.word	0xe000ed90

00011be8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   11be8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   11bea:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   11bec:	2300      	movs	r3, #0
   11bee:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   11bf2:	f7ff ffe9 	bl	11bc8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   11bf6:	4b14      	ldr	r3, [pc, #80]	; (11c48 <z_arm_init_arch_hw_at_boot+0x60>)
   11bf8:	f04f 32ff 	mov.w	r2, #4294967295
   11bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   11c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   11c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   11c08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   11c0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   11c10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   11c14:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   11c18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11c1c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   11c20:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   11c24:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   11c28:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   11c2c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   11c30:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   11c34:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   11c38:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   11c3c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   11c3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11c42:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   11c46:	bd08      	pop	{r3, pc}
   11c48:	e000e100 	.word	0xe000e100

00011c4c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   11c4c:	4b06      	ldr	r3, [pc, #24]	; (11c68 <z_impl_k_thread_abort+0x1c>)
   11c4e:	689b      	ldr	r3, [r3, #8]
   11c50:	4283      	cmp	r3, r0
   11c52:	d107      	bne.n	11c64 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11c54:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11c58:	b123      	cbz	r3, 11c64 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11c5a:	4a04      	ldr	r2, [pc, #16]	; (11c6c <z_impl_k_thread_abort+0x20>)
   11c5c:	6853      	ldr	r3, [r2, #4]
   11c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11c62:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   11c64:	f00a b8b6 	b.w	1bdd4 <z_thread_abort>
   11c68:	2000203c 	.word	0x2000203c
   11c6c:	e000ed00 	.word	0xe000ed00

00011c70 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11c70:	4b02      	ldr	r3, [pc, #8]	; (11c7c <z_arm_configure_static_mpu_regions+0xc>)
   11c72:	4a03      	ldr	r2, [pc, #12]	; (11c80 <z_arm_configure_static_mpu_regions+0x10>)
   11c74:	4803      	ldr	r0, [pc, #12]	; (11c84 <z_arm_configure_static_mpu_regions+0x14>)
   11c76:	2101      	movs	r1, #1
   11c78:	f000 b868 	b.w	11d4c <arm_core_mpu_configure_static_mpu_regions>
   11c7c:	20010000 	.word	0x20010000
   11c80:	20000000 	.word	0x20000000
   11c84:	00021018 	.word	0x00021018

00011c88 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   11c88:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   11c8a:	4b05      	ldr	r3, [pc, #20]	; (11ca0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   11c8c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   11c8e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   11c90:	4a04      	ldr	r2, [pc, #16]	; (11ca4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   11c92:	2120      	movs	r1, #32
   11c94:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   11c98:	4618      	mov	r0, r3
   11c9a:	2101      	movs	r1, #1
   11c9c:	f000 b87e 	b.w	11d9c <arm_core_mpu_configure_dynamic_mpu_regions>
   11ca0:	20001d80 	.word	0x20001d80
   11ca4:	150b0000 	.word	0x150b0000

00011ca8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   11ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   11caa:	4f1e      	ldr	r7, [pc, #120]	; (11d24 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   11cac:	2600      	movs	r6, #0
   11cae:	428e      	cmp	r6, r1
   11cb0:	db01      	blt.n	11cb6 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   11cb2:	4610      	mov	r0, r2
   11cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   11cb6:	6844      	ldr	r4, [r0, #4]
   11cb8:	b384      	cbz	r4, 11d1c <mpu_configure_regions+0x74>
		if (do_sanity_check &&
   11cba:	b153      	cbz	r3, 11cd2 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   11cbc:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   11cc0:	ea14 0f0c 	tst.w	r4, ip
   11cc4:	d118      	bne.n	11cf8 <mpu_configure_regions+0x50>
		&&
   11cc6:	2c1f      	cmp	r4, #31
   11cc8:	d916      	bls.n	11cf8 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   11cca:	6805      	ldr	r5, [r0, #0]
		&&
   11ccc:	ea1c 0f05 	tst.w	ip, r5
   11cd0:	d112      	bne.n	11cf8 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   11cd2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   11cd4:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   11cd6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   11cda:	b2d2      	uxtb	r2, r2
   11cdc:	d90f      	bls.n	11cfe <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   11cde:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   11ce2:	d80e      	bhi.n	11d02 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   11ce4:	3c01      	subs	r4, #1
   11ce6:	fab4 f484 	clz	r4, r4
   11cea:	f1c4 041f 	rsb	r4, r4, #31
   11cee:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   11cf0:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   11cf2:	ea4c 0404 	orr.w	r4, ip, r4
   11cf6:	d906      	bls.n	11d06 <mpu_configure_regions+0x5e>
			return -EINVAL;
   11cf8:	f06f 0215 	mvn.w	r2, #21
   11cfc:	e7d9      	b.n	11cb2 <mpu_configure_regions+0xa>
		return REGION_32B;
   11cfe:	2408      	movs	r4, #8
   11d00:	e7f6      	b.n	11cf0 <mpu_configure_regions+0x48>
		return REGION_4G;
   11d02:	243e      	movs	r4, #62	; 0x3e
   11d04:	e7f4      	b.n	11cf0 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11d06:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   11d0a:	4315      	orrs	r5, r2
   11d0c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11d10:	f044 0401 	orr.w	r4, r4, #1
   11d14:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11d16:	60fd      	str	r5, [r7, #12]
		reg_index++;
   11d18:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11d1a:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
   11d1c:	3601      	adds	r6, #1
   11d1e:	300c      	adds	r0, #12
   11d20:	e7c5      	b.n	11cae <mpu_configure_regions+0x6>
   11d22:	bf00      	nop
   11d24:	e000ed90 	.word	0xe000ed90

00011d28 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11d28:	4b03      	ldr	r3, [pc, #12]	; (11d38 <arm_core_mpu_enable+0x10>)
   11d2a:	2205      	movs	r2, #5
   11d2c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   11d2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11d32:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11d36:	4770      	bx	lr
   11d38:	e000ed90 	.word	0xe000ed90

00011d3c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   11d3c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11d40:	4b01      	ldr	r3, [pc, #4]	; (11d48 <arm_core_mpu_disable+0xc>)
   11d42:	2200      	movs	r2, #0
   11d44:	605a      	str	r2, [r3, #4]
}
   11d46:	4770      	bx	lr
   11d48:	e000ed90 	.word	0xe000ed90

00011d4c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   11d4c:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11d4e:	4d0e      	ldr	r5, [pc, #56]	; (11d88 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   11d50:	2301      	movs	r3, #1
   11d52:	782a      	ldrb	r2, [r5, #0]
   11d54:	460c      	mov	r4, r1
   11d56:	f7ff ffa7 	bl	11ca8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11d5a:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   11d5c:	3016      	adds	r0, #22
   11d5e:	d111      	bne.n	11d84 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   11d60:	f240 1311 	movw	r3, #273	; 0x111
   11d64:	4a09      	ldr	r2, [pc, #36]	; (11d8c <arm_core_mpu_configure_static_mpu_regions+0x40>)
   11d66:	490a      	ldr	r1, [pc, #40]	; (11d90 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   11d68:	480a      	ldr	r0, [pc, #40]	; (11d94 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   11d6a:	f00b fd23 	bl	1d7b4 <printk>
   11d6e:	4621      	mov	r1, r4
   11d70:	4809      	ldr	r0, [pc, #36]	; (11d98 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
   11d72:	f00b fd1f 	bl	1d7b4 <printk>
			regions_num);
	}
}
   11d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   11d7a:	4804      	ldr	r0, [pc, #16]	; (11d8c <arm_core_mpu_configure_static_mpu_regions+0x40>)
   11d7c:	f240 1111 	movw	r1, #273	; 0x111
   11d80:	f00b bf72 	b.w	1dc68 <assert_post_action>
}
   11d84:	bd38      	pop	{r3, r4, r5, pc}
   11d86:	bf00      	nop
   11d88:	200020c5 	.word	0x200020c5
   11d8c:	00021cdf 	.word	0x00021cdf
   11d90:	00023382 	.word	0x00023382
   11d94:	00021650 	.word	0x00021650
   11d98:	00021d16 	.word	0x00021d16

00011d9c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   11d9c:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   11d9e:	4a12      	ldr	r2, [pc, #72]	; (11de8 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   11da0:	2300      	movs	r3, #0
   11da2:	7812      	ldrb	r2, [r2, #0]
   11da4:	460c      	mov	r4, r1
   11da6:	f7ff ff7f 	bl	11ca8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   11daa:	f110 0f16 	cmn.w	r0, #22
   11dae:	d008      	beq.n	11dc2 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
   11db0:	4b0e      	ldr	r3, [pc, #56]	; (11dec <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
   11db2:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   11db4:	2807      	cmp	r0, #7
   11db6:	dd00      	ble.n	11dba <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   11db8:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
   11dba:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   11dbc:	611a      	str	r2, [r3, #16]
   11dbe:	3001      	adds	r0, #1
   11dc0:	e7f8      	b.n	11db4 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   11dc2:	4a0b      	ldr	r2, [pc, #44]	; (11df0 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   11dc4:	490b      	ldr	r1, [pc, #44]	; (11df4 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   11dc6:	480c      	ldr	r0, [pc, #48]	; (11df8 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   11dc8:	f44f 7398 	mov.w	r3, #304	; 0x130
   11dcc:	f00b fcf2 	bl	1d7b4 <printk>
   11dd0:	4621      	mov	r1, r4
   11dd2:	480a      	ldr	r0, [pc, #40]	; (11dfc <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   11dd4:	f00b fcee 	bl	1d7b4 <printk>
}
   11dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   11ddc:	4804      	ldr	r0, [pc, #16]	; (11df0 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   11dde:	f44f 7198 	mov.w	r1, #304	; 0x130
   11de2:	f00b bf41 	b.w	1dc68 <assert_post_action>
   11de6:	bf00      	nop
   11de8:	200020c5 	.word	0x200020c5
   11dec:	e000ed90 	.word	0xe000ed90
   11df0:	00021cdf 	.word	0x00021cdf
   11df4:	00023382 	.word	0x00023382
   11df8:	00021650 	.word	0x00021650
   11dfc:	00021d42 	.word	0x00021d42

00011e00 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   11e00:	4925      	ldr	r1, [pc, #148]	; (11e98 <z_arm_mpu_init+0x98>)
{
   11e02:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   11e04:	680c      	ldr	r4, [r1, #0]
   11e06:	2c08      	cmp	r4, #8
   11e08:	d913      	bls.n	11e32 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   11e0a:	f44f 73a4 	mov.w	r3, #328	; 0x148
   11e0e:	4a23      	ldr	r2, [pc, #140]	; (11e9c <z_arm_mpu_init+0x9c>)
   11e10:	4923      	ldr	r1, [pc, #140]	; (11ea0 <z_arm_mpu_init+0xa0>)
   11e12:	4824      	ldr	r0, [pc, #144]	; (11ea4 <z_arm_mpu_init+0xa4>)
   11e14:	f00b fcce 	bl	1d7b4 <printk>
   11e18:	4823      	ldr	r0, [pc, #140]	; (11ea8 <z_arm_mpu_init+0xa8>)
   11e1a:	2208      	movs	r2, #8
   11e1c:	4621      	mov	r1, r4
   11e1e:	f00b fcc9 	bl	1d7b4 <printk>
   11e22:	481e      	ldr	r0, [pc, #120]	; (11e9c <z_arm_mpu_init+0x9c>)
   11e24:	f44f 71a4 	mov.w	r1, #328	; 0x148
   11e28:	f00b ff1e 	bl	1dc68 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   11e2c:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   11e30:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   11e32:	f7ff ff83 	bl	11d3c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11e36:	6848      	ldr	r0, [r1, #4]
   11e38:	491c      	ldr	r1, [pc, #112]	; (11eac <z_arm_mpu_init+0xac>)
   11e3a:	2200      	movs	r2, #0
   11e3c:	4294      	cmp	r4, r2
   11e3e:	f100 000c 	add.w	r0, r0, #12
   11e42:	d119      	bne.n	11e78 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
   11e44:	4b1a      	ldr	r3, [pc, #104]	; (11eb0 <z_arm_mpu_init+0xb0>)
   11e46:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   11e48:	f7ff ff6e 	bl	11d28 <arm_core_mpu_enable>
	__ASSERT(
   11e4c:	680b      	ldr	r3, [r1, #0]
   11e4e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   11e52:	2b08      	cmp	r3, #8
   11e54:	d00e      	beq.n	11e74 <z_arm_mpu_init+0x74>
   11e56:	4917      	ldr	r1, [pc, #92]	; (11eb4 <z_arm_mpu_init+0xb4>)
   11e58:	4a10      	ldr	r2, [pc, #64]	; (11e9c <z_arm_mpu_init+0x9c>)
   11e5a:	4812      	ldr	r0, [pc, #72]	; (11ea4 <z_arm_mpu_init+0xa4>)
   11e5c:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   11e60:	f00b fca8 	bl	1d7b4 <printk>
   11e64:	4814      	ldr	r0, [pc, #80]	; (11eb8 <z_arm_mpu_init+0xb8>)
   11e66:	f00b fca5 	bl	1d7b4 <printk>
   11e6a:	480c      	ldr	r0, [pc, #48]	; (11e9c <z_arm_mpu_init+0x9c>)
   11e6c:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   11e70:	f00b fefa 	bl	1dc68 <assert_post_action>
	return 0;
   11e74:	2000      	movs	r0, #0
   11e76:	e7db      	b.n	11e30 <z_arm_mpu_init+0x30>
   11e78:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11e7a:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   11e7e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   11e82:	4313      	orrs	r3, r2
   11e84:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11e88:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11e8a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   11e8e:	f043 0301 	orr.w	r3, r3, #1
   11e92:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11e94:	3201      	adds	r2, #1
   11e96:	e7d1      	b.n	11e3c <z_arm_mpu_init+0x3c>
   11e98:	00021024 	.word	0x00021024
   11e9c:	00021cdf 	.word	0x00021cdf
   11ea0:	00023382 	.word	0x00023382
   11ea4:	00021650 	.word	0x00021650
   11ea8:	00021d6f 	.word	0x00021d6f
   11eac:	e000ed90 	.word	0xe000ed90
   11eb0:	200020c5 	.word	0x200020c5
   11eb4:	00021da3 	.word	0x00021da3
   11eb8:	00021df3 	.word	0x00021df3

00011ebc <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   11ebc:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   11ebe:	4b0b      	ldr	r3, [pc, #44]	; (11eec <malloc_prepare+0x30>)
   11ec0:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   11ec4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   11ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   11ecc:	d20c      	bcs.n	11ee8 <malloc_prepare+0x2c>
   11ece:	4908      	ldr	r1, [pc, #32]	; (11ef0 <malloc_prepare+0x34>)
   11ed0:	4a08      	ldr	r2, [pc, #32]	; (11ef4 <malloc_prepare+0x38>)
   11ed2:	4809      	ldr	r0, [pc, #36]	; (11ef8 <malloc_prepare+0x3c>)
   11ed4:	2380      	movs	r3, #128	; 0x80
   11ed6:	f00b fc6d 	bl	1d7b4 <printk>
   11eda:	4808      	ldr	r0, [pc, #32]	; (11efc <malloc_prepare+0x40>)
   11edc:	f00b fc6a 	bl	1d7b4 <printk>
   11ee0:	4804      	ldr	r0, [pc, #16]	; (11ef4 <malloc_prepare+0x38>)
   11ee2:	2180      	movs	r1, #128	; 0x80
   11ee4:	f00b fec0 	bl	1dc68 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   11ee8:	2000      	movs	r0, #0
   11eea:	bd08      	pop	{r3, pc}
   11eec:	20005a61 	.word	0x20005a61
   11ef0:	00021e44 	.word	0x00021e44
   11ef4:	00021e14 	.word	0x00021e14
   11ef8:	00021650 	.word	0x00021650
   11efc:	00021e8a 	.word	0x00021e8a

00011f00 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   11f00:	4b01      	ldr	r3, [pc, #4]	; (11f08 <__stdout_hook_install+0x8>)
   11f02:	6018      	str	r0, [r3, #0]
}
   11f04:	4770      	bx	lr
   11f06:	bf00      	nop
   11f08:	2000042c 	.word	0x2000042c

00011f0c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   11f0c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   11f0e:	4c07      	ldr	r4, [pc, #28]	; (11f2c <_sbrk+0x20>)
   11f10:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   11f12:	18c2      	adds	r2, r0, r3
   11f14:	4806      	ldr	r0, [pc, #24]	; (11f30 <_sbrk+0x24>)
   11f16:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   11f1a:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
   11f1e:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
   11f20:	bf3a      	itte	cc
   11f22:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   11f24:	6022      	strcc	r2, [r4, #0]
		ret = ptr;
	} else {
		ret = (void *)-1;
   11f26:	f04f 30ff 	movcs.w	r0, #4294967295
	}

	return ret;
}
   11f2a:	bd10      	pop	{r4, pc}
   11f2c:	20001d8c 	.word	0x20001d8c
   11f30:	20005a61 	.word	0x20005a61

00011f34 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   11f34:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11f36:	4604      	mov	r4, r0
   11f38:	b958      	cbnz	r0, 11f52 <__retarget_lock_acquire_recursive+0x1e>
   11f3a:	490a      	ldr	r1, [pc, #40]	; (11f64 <__retarget_lock_acquire_recursive+0x30>)
   11f3c:	480a      	ldr	r0, [pc, #40]	; (11f68 <__retarget_lock_acquire_recursive+0x34>)
   11f3e:	4a0b      	ldr	r2, [pc, #44]	; (11f6c <__retarget_lock_acquire_recursive+0x38>)
   11f40:	f240 139f 	movw	r3, #415	; 0x19f
   11f44:	f00b fc36 	bl	1d7b4 <printk>
   11f48:	4808      	ldr	r0, [pc, #32]	; (11f6c <__retarget_lock_acquire_recursive+0x38>)
   11f4a:	f240 119f 	movw	r1, #415	; 0x19f
   11f4e:	f00b fe8b 	bl	1dc68 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   11f52:	f04f 32ff 	mov.w	r2, #4294967295
   11f56:	4620      	mov	r0, r4
   11f58:	f04f 33ff 	mov.w	r3, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   11f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11f60:	f007 bd02 	b.w	19968 <z_impl_k_mutex_lock>
   11f64:	00021f12 	.word	0x00021f12
   11f68:	00021650 	.word	0x00021650
   11f6c:	00021e14 	.word	0x00021e14

00011f70 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   11f70:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11f72:	4604      	mov	r4, r0
   11f74:	b958      	cbnz	r0, 11f8e <__retarget_lock_release_recursive+0x1e>
   11f76:	4908      	ldr	r1, [pc, #32]	; (11f98 <__retarget_lock_release_recursive+0x28>)
   11f78:	4808      	ldr	r0, [pc, #32]	; (11f9c <__retarget_lock_release_recursive+0x2c>)
   11f7a:	4a09      	ldr	r2, [pc, #36]	; (11fa0 <__retarget_lock_release_recursive+0x30>)
   11f7c:	f240 13bb 	movw	r3, #443	; 0x1bb
   11f80:	f00b fc18 	bl	1d7b4 <printk>
   11f84:	4806      	ldr	r0, [pc, #24]	; (11fa0 <__retarget_lock_release_recursive+0x30>)
   11f86:	f240 11bb 	movw	r1, #443	; 0x1bb
   11f8a:	f00b fe6d 	bl	1dc68 <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
   11f8e:	4620      	mov	r0, r4
	k_mutex_unlock((struct k_mutex *)lock);
}
   11f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11f94:	f007 bde8 	b.w	19b68 <z_impl_k_mutex_unlock>
   11f98:	00021f12 	.word	0x00021f12
   11f9c:	00021650 	.word	0x00021650
   11fa0:	00021e14 	.word	0x00021e14

00011fa4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   11fa4:	f04f 0340 	mov.w	r3, #64	; 0x40
   11fa8:	f3ef 8211 	mrs	r2, BASEPRI
   11fac:	f383 8812 	msr	BASEPRI_MAX, r3
   11fb0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   11fb4:	4906      	ldr	r1, [pc, #24]	; (11fd0 <nordicsemi_nrf52_init+0x2c>)
   11fb6:	2301      	movs	r3, #1
   11fb8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   11fbc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   11fc0:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   11fc4:	f382 8811 	msr	BASEPRI, r2
   11fc8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   11fcc:	2000      	movs	r0, #0
   11fce:	4770      	bx	lr
   11fd0:	4001e000 	.word	0x4001e000

00011fd4 <sys_arch_reboot>:
    *p_gpregret = val;
   11fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11fd8:	b2c0      	uxtb	r0, r0
   11fda:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   11fde:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11fe2:	4905      	ldr	r1, [pc, #20]	; (11ff8 <sys_arch_reboot+0x24>)
   11fe4:	4b05      	ldr	r3, [pc, #20]	; (11ffc <sys_arch_reboot+0x28>)
   11fe6:	68ca      	ldr	r2, [r1, #12]
   11fe8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11fec:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11fee:	60cb      	str	r3, [r1, #12]
   11ff0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   11ff4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11ff6:	e7fd      	b.n	11ff4 <sys_arch_reboot+0x20>
   11ff8:	e000ed00 	.word	0xe000ed00
   11ffc:	05fa0004 	.word	0x05fa0004

00012000 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12000:	b120      	cbz	r0, 1200c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   12002:	4b03      	ldr	r3, [pc, #12]	; (12010 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12004:	0180      	lsls	r0, r0, #6
   12006:	f043 0301 	orr.w	r3, r3, #1
   1200a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1200c:	4770      	bx	lr
   1200e:	bf00      	nop
   12010:	00021000 	.word	0x00021000

00012014 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   12014:	b5f0      	push	{r4, r5, r6, r7, lr}
   12016:	460b      	mov	r3, r1
	switch (src->type) {
   12018:	7801      	ldrb	r1, [r0, #0]
   1201a:	2901      	cmp	r1, #1
{
   1201c:	4602      	mov	r2, r0
	switch (src->type) {
   1201e:	d015      	beq.n	1204c <uuid_to_uuid128+0x38>
   12020:	2902      	cmp	r1, #2
   12022:	d02b      	beq.n	1207c <uuid_to_uuid128+0x68>
   12024:	b989      	cbnz	r1, 1204a <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   12026:	4c1c      	ldr	r4, [pc, #112]	; (12098 <uuid_to_uuid128+0x84>)
   12028:	461d      	mov	r5, r3
   1202a:	f104 0710 	add.w	r7, r4, #16
   1202e:	6820      	ldr	r0, [r4, #0]
   12030:	6861      	ldr	r1, [r4, #4]
   12032:	462e      	mov	r6, r5
   12034:	c603      	stmia	r6!, {r0, r1}
   12036:	3408      	adds	r4, #8
   12038:	42bc      	cmp	r4, r7
   1203a:	4635      	mov	r5, r6
   1203c:	d1f7      	bne.n	1202e <uuid_to_uuid128+0x1a>
		sys_put_le16(BT_UUID_16(src)->val,
   1203e:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
   12040:	7821      	ldrb	r1, [r4, #0]
   12042:	7031      	strb	r1, [r6, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   12044:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   12046:	0a12      	lsrs	r2, r2, #8
   12048:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1204a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
   1204c:	4c12      	ldr	r4, [pc, #72]	; (12098 <uuid_to_uuid128+0x84>)
   1204e:	461d      	mov	r5, r3
   12050:	f104 0710 	add.w	r7, r4, #16
   12054:	6820      	ldr	r0, [r4, #0]
   12056:	6861      	ldr	r1, [r4, #4]
   12058:	462e      	mov	r6, r5
   1205a:	c603      	stmia	r6!, {r0, r1}
   1205c:	3408      	adds	r4, #8
   1205e:	42bc      	cmp	r4, r7
   12060:	4635      	mov	r5, r6
   12062:	d1f7      	bne.n	12054 <uuid_to_uuid128+0x40>
		sys_put_le32(BT_UUID_32(src)->val,
   12064:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
   12066:	7821      	ldrb	r1, [r4, #0]
   12068:	7031      	strb	r1, [r6, #0]
   1206a:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
   1206e:	735a      	strb	r2, [r3, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   12070:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   12072:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   12074:	0a12      	lsrs	r2, r2, #8
   12076:	7399      	strb	r1, [r3, #14]
   12078:	741a      	strb	r2, [r3, #16]
}
   1207a:	e7e6      	b.n	1204a <uuid_to_uuid128+0x36>
   1207c:	f100 0510 	add.w	r5, r0, #16
   12080:	6810      	ldr	r0, [r2, #0]
   12082:	6851      	ldr	r1, [r2, #4]
   12084:	461c      	mov	r4, r3
   12086:	c403      	stmia	r4!, {r0, r1}
   12088:	3208      	adds	r2, #8
   1208a:	42aa      	cmp	r2, r5
   1208c:	4623      	mov	r3, r4
   1208e:	d1f7      	bne.n	12080 <uuid_to_uuid128+0x6c>
   12090:	7812      	ldrb	r2, [r2, #0]
   12092:	7022      	strb	r2, [r4, #0]
   12094:	e7d9      	b.n	1204a <uuid_to_uuid128+0x36>
   12096:	bf00      	nop
   12098:	00021f5c 	.word	0x00021f5c

0001209c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   1209c:	b570      	push	{r4, r5, r6, lr}
   1209e:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   120a0:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   120a4:	2b01      	cmp	r3, #1
{
   120a6:	4605      	mov	r5, r0
   120a8:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   120aa:	d00e      	beq.n	120ca <bt_buf_get_rx+0x2e>
   120ac:	2805      	cmp	r0, #5
   120ae:	d00c      	beq.n	120ca <bt_buf_get_rx+0x2e>
   120b0:	490d      	ldr	r1, [pc, #52]	; (120e8 <bt_buf_get_rx+0x4c>)
   120b2:	4a0e      	ldr	r2, [pc, #56]	; (120ec <bt_buf_get_rx+0x50>)
   120b4:	480e      	ldr	r0, [pc, #56]	; (120f0 <bt_buf_get_rx+0x54>)
   120b6:	2342      	movs	r3, #66	; 0x42
   120b8:	f00b fb7c 	bl	1d7b4 <printk>
   120bc:	480d      	ldr	r0, [pc, #52]	; (120f4 <bt_buf_get_rx+0x58>)
   120be:	f00b fb79 	bl	1d7b4 <printk>
   120c2:	480a      	ldr	r0, [pc, #40]	; (120ec <bt_buf_get_rx+0x50>)
   120c4:	2142      	movs	r1, #66	; 0x42
   120c6:	f00b fdcf 	bl	1dc68 <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   120ca:	4623      	mov	r3, r4
   120cc:	480a      	ldr	r0, [pc, #40]	; (120f8 <bt_buf_get_rx+0x5c>)
   120ce:	4632      	mov	r2, r6
   120d0:	f00d fe6f 	bl	1fdb2 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   120d4:	4604      	mov	r4, r0
   120d6:	b120      	cbz	r0, 120e2 <bt_buf_get_rx+0x46>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   120d8:	2100      	movs	r1, #0
   120da:	3008      	adds	r0, #8
   120dc:	f004 f974 	bl	163c8 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   120e0:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   120e2:	4620      	mov	r0, r4
   120e4:	bd70      	pop	{r4, r5, r6, pc}
   120e6:	bf00      	nop
   120e8:	00021f9c 	.word	0x00021f9c
   120ec:	00021f6d 	.word	0x00021f6d
   120f0:	00021650 	.word	0x00021650
   120f4:	00021fe1 	.word	0x00021fe1
   120f8:	20000784 	.word	0x20000784

000120fc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   120fc:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   120fe:	490b      	ldr	r1, [pc, #44]	; (1212c <bt_buf_get_cmd_complete+0x30>)
{
   12100:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   12102:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
   12106:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   12108:	b920      	cbnz	r0, 12114 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1210a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1210e:	2001      	movs	r0, #1
   12110:	f7ff bfc4 	b.w	1209c <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   12114:	f004 f9fc 	bl	16510 <net_buf_ref>
   12118:	2301      	movs	r3, #1
		buf->len = 0U;
   1211a:	2100      	movs	r1, #0
   1211c:	7503      	strb	r3, [r0, #20]
   1211e:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   12120:	4604      	mov	r4, r0
   12122:	3008      	adds	r0, #8
   12124:	f004 f950 	bl	163c8 <net_buf_simple_reserve>
}
   12128:	4620      	mov	r0, r4
   1212a:	bd10      	pop	{r4, pc}
   1212c:	200002a0 	.word	0x200002a0

00012130 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   12130:	b570      	push	{r4, r5, r6, lr}
   12132:	4604      	mov	r4, r0
	switch (evt) {
   12134:	2c0f      	cmp	r4, #15
{
   12136:	460d      	mov	r5, r1
   12138:	4610      	mov	r0, r2
   1213a:	4619      	mov	r1, r3
	switch (evt) {
   1213c:	d805      	bhi.n	1214a <bt_buf_get_evt+0x1a>
   1213e:	2c0d      	cmp	r4, #13
   12140:	d912      	bls.n	12168 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   12142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   12146:	f7ff bfd9 	b.w	120fc <bt_buf_get_cmd_complete>
	switch (evt) {
   1214a:	2c13      	cmp	r4, #19
   1214c:	d10c      	bne.n	12168 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   1214e:	480b      	ldr	r0, [pc, #44]	; (1217c <bt_buf_get_evt+0x4c>)
   12150:	f00d fe2f 	bl	1fdb2 <net_buf_alloc_fixed>
			if (buf) {
   12154:	4604      	mov	r4, r0
   12156:	b128      	cbz	r0, 12164 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   12158:	2100      	movs	r1, #0
   1215a:	3008      	adds	r0, #8
   1215c:	f004 f934 	bl	163c8 <net_buf_simple_reserve>
   12160:	2301      	movs	r3, #1
   12162:	7523      	strb	r3, [r4, #20]
}
   12164:	4620      	mov	r0, r4
   12166:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   12168:	4602      	mov	r2, r0
   1216a:	460b      	mov	r3, r1
		if (discardable) {
   1216c:	b10d      	cbz	r5, 12172 <bt_buf_get_evt+0x42>
   1216e:	4804      	ldr	r0, [pc, #16]	; (12180 <bt_buf_get_evt+0x50>)
   12170:	e7ee      	b.n	12150 <bt_buf_get_evt+0x20>
}
   12172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   12176:	2001      	movs	r0, #1
   12178:	f7ff bf90 	b.w	1209c <bt_buf_get_rx>
   1217c:	200007b0 	.word	0x200007b0
   12180:	20000700 	.word	0x20000700

00012184 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   12184:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   12186:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   12188:	781a      	ldrb	r2, [r3, #0]
   1218a:	b972      	cbnz	r2, 121aa <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1218c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   12190:	4620      	mov	r0, r4
   12192:	f001 fd79 	bl	13c88 <bt_conn_lookup_handle>
	if (!conn) {
   12196:	4605      	mov	r5, r0
   12198:	b940      	cbnz	r0, 121ac <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1219a:	4b08      	ldr	r3, [pc, #32]	; (121bc <hci_disconn_complete_prio+0x38>)
   1219c:	881a      	ldrh	r2, [r3, #0]
   1219e:	b922      	cbnz	r2, 121aa <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   121a0:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   121a4:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   121a8:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   121aa:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   121ac:	2101      	movs	r1, #1
   121ae:	f001 fd77 	bl	13ca0 <bt_conn_set_state>
	bt_conn_unref(conn);
   121b2:	4628      	mov	r0, r5
}
   121b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   121b8:	f001 bd3c 	b.w	13c34 <bt_conn_unref>
   121bc:	200020a0 	.word	0x200020a0

000121c0 <hci_le_meta_event>:
		      sizeof(struct bt_hci_evt_le_connectionless_iq_report)),
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
};

static void hci_le_meta_event(struct net_buf *buf)
{
   121c0:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   121c2:	2101      	movs	r1, #1
   121c4:	4604      	mov	r4, r0
   121c6:	3008      	adds	r0, #8
   121c8:	f004 fa6a 	bl	166a0 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   121cc:	4621      	mov	r1, r4
   121ce:	4a03      	ldr	r2, [pc, #12]	; (121dc <hci_le_meta_event+0x1c>)
   121d0:	7800      	ldrb	r0, [r0, #0]
}
   121d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   121d6:	2308      	movs	r3, #8
   121d8:	f00b bfd3 	b.w	1e182 <handle_event>
   121dc:	00021074 	.word	0x00021074

000121e0 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   121e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   121e4:	4f3b      	ldr	r7, [pc, #236]	; (122d4 <hci_rx_thread+0xf4>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   121e6:	f8df 8100 	ldr.w	r8, [pc, #256]	; 122e8 <hci_rx_thread+0x108>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   121ea:	4e3b      	ldr	r6, [pc, #236]	; (122d8 <hci_rx_thread+0xf8>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   121ec:	f04f 33ff 	mov.w	r3, #4294967295
   121f0:	f04f 32ff 	mov.w	r2, #4294967295
   121f4:	4638      	mov	r0, r7
   121f6:	f004 f8b3 	bl	16360 <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   121fa:	7d03      	ldrb	r3, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   121fc:	2b01      	cmp	r3, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   121fe:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   12200:	d039      	beq.n	12276 <hci_rx_thread+0x96>
   12202:	2b03      	cmp	r3, #3
   12204:	d120      	bne.n	12248 <hci_rx_thread+0x68>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12206:	8983      	ldrh	r3, [r0, #12]
   12208:	2b03      	cmp	r3, #3
   1220a:	d80c      	bhi.n	12226 <hci_rx_thread+0x46>
   1220c:	4933      	ldr	r1, [pc, #204]	; (122dc <hci_rx_thread+0xfc>)
   1220e:	4834      	ldr	r0, [pc, #208]	; (122e0 <hci_rx_thread+0x100>)
   12210:	f44f 73db 	mov.w	r3, #438	; 0x1b6
   12214:	4632      	mov	r2, r6
   12216:	f00b facd 	bl	1d7b4 <printk>
   1221a:	4040      	eors	r0, r0
   1221c:	f380 8811 	msr	BASEPRI, r0
   12220:	f04f 0003 	mov.w	r0, #3
   12224:	df02      	svc	2
   12226:	2104      	movs	r1, #4
   12228:	f104 0008 	add.w	r0, r4, #8
   1222c:	f004 fa38 	bl	166a0 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12230:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   12232:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   12234:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12238:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   1223a:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   1223c:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   12240:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   12242:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   12244:	d003      	beq.n	1224e <hci_rx_thread+0x6e>
	net_buf_unref(buf);
   12246:	4620      	mov	r0, r4
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   12248:	f004 f91c 	bl	16484 <net_buf_unref>
			break;
   1224c:	e010      	b.n	12270 <hci_rx_thread+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1224e:	f001 fd1b 	bl	13c88 <bt_conn_lookup_handle>
	if (!conn) {
   12252:	4605      	mov	r5, r0
   12254:	2800      	cmp	r0, #0
   12256:	d0f6      	beq.n	12246 <hci_rx_thread+0x66>
	acl(buf)->index = bt_conn_index(conn);
   12258:	f001 fdec 	bl	13e34 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   1225c:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   12260:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   12262:	4621      	mov	r1, r4
   12264:	4628      	mov	r0, r5
   12266:	f00c fab4 	bl	1e7d2 <bt_conn_recv>
	bt_conn_unref(conn);
   1226a:	4628      	mov	r0, r5
   1226c:	f001 fce2 	bl	13c34 <bt_conn_unref>
	z_impl_k_yield();
   12270:	f009 fc10 	bl	1ba94 <z_impl_k_yield>
	while (1) {
   12274:	e7ba      	b.n	121ec <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12276:	8983      	ldrh	r3, [r0, #12]
   12278:	2b01      	cmp	r3, #1
   1227a:	d80c      	bhi.n	12296 <hci_rx_thread+0xb6>
   1227c:	4917      	ldr	r1, [pc, #92]	; (122dc <hci_rx_thread+0xfc>)
   1227e:	4818      	ldr	r0, [pc, #96]	; (122e0 <hci_rx_thread+0x100>)
   12280:	f640 130d 	movw	r3, #2317	; 0x90d
   12284:	4632      	mov	r2, r6
   12286:	f00b fa95 	bl	1d7b4 <printk>
   1228a:	4040      	eors	r0, r0
   1228c:	f380 8811 	msr	BASEPRI, r0
   12290:	f04f 0003 	mov.w	r0, #3
   12294:	df02      	svc	2
   12296:	2102      	movs	r1, #2
   12298:	f104 0008 	add.w	r0, r4, #8
   1229c:	f004 fa00 	bl	166a0 <net_buf_simple_pull_mem>
   122a0:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   122a2:	7800      	ldrb	r0, [r0, #0]
   122a4:	f00b ff5b 	bl	1e15e <bt_hci_evt_get_flags>
   122a8:	0783      	lsls	r3, r0, #30
   122aa:	d40c      	bmi.n	122c6 <hci_rx_thread+0xe6>
   122ac:	490d      	ldr	r1, [pc, #52]	; (122e4 <hci_rx_thread+0x104>)
   122ae:	480c      	ldr	r0, [pc, #48]	; (122e0 <hci_rx_thread+0x100>)
   122b0:	f640 1311 	movw	r3, #2321	; 0x911
   122b4:	4632      	mov	r2, r6
   122b6:	f00b fa7d 	bl	1d7b4 <printk>
   122ba:	4040      	eors	r0, r0
   122bc:	f380 8811 	msr	BASEPRI, r0
   122c0:	f04f 0003 	mov.w	r0, #3
   122c4:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   122c6:	7828      	ldrb	r0, [r5, #0]
   122c8:	2304      	movs	r3, #4
   122ca:	4642      	mov	r2, r8
   122cc:	4621      	mov	r1, r4
   122ce:	f00b ff58 	bl	1e182 <handle_event>
   122d2:	e7b8      	b.n	12246 <hci_rx_thread+0x66>
   122d4:	200003d4 	.word	0x200003d4
   122d8:	00022001 	.word	0x00022001
   122dc:	00022035 	.word	0x00022035
   122e0:	00021650 	.word	0x00021650
   122e4:	0002204e 	.word	0x0002204e
   122e8:	000210c4 	.word	0x000210c4

000122ec <hci_cmd_done>:
{
   122ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   122ee:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   122f0:	7990      	ldrb	r0, [r2, #6]
{
   122f2:	460e      	mov	r6, r1
   122f4:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   122f6:	f003 ff25 	bl	16144 <net_buf_pool_get>
   122fa:	4b30      	ldr	r3, [pc, #192]	; (123bc <hci_cmd_done+0xd0>)
   122fc:	4283      	cmp	r3, r0
   122fe:	d15b      	bne.n	123b8 <hci_cmd_done+0xcc>
	if (cmd(buf)->opcode != opcode) {
   12300:	4620      	mov	r0, r4
   12302:	f003 ff27 	bl	16154 <net_buf_id>
   12306:	4d2e      	ldr	r5, [pc, #184]	; (123c0 <hci_cmd_done+0xd4>)
   12308:	230c      	movs	r3, #12
   1230a:	fb03 5300 	mla	r3, r3, r0, r5
   1230e:	885b      	ldrh	r3, [r3, #2]
   12310:	42bb      	cmp	r3, r7
   12312:	d151      	bne.n	123b8 <hci_cmd_done+0xcc>
	if (bt_dev.sent_cmd) {
   12314:	4f2b      	ldr	r7, [pc, #172]	; (123c4 <hci_cmd_done+0xd8>)
   12316:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   1231a:	b120      	cbz	r0, 12326 <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   1231c:	f004 f8b2 	bl	16484 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12320:	2300      	movs	r3, #0
   12322:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   12326:	4620      	mov	r0, r4
   12328:	f003 ff14 	bl	16154 <net_buf_id>
   1232c:	270c      	movs	r7, #12
   1232e:	fb07 5000 	mla	r0, r7, r0, r5
   12332:	6843      	ldr	r3, [r0, #4]
   12334:	b1e3      	cbz	r3, 12370 <hci_cmd_done+0x84>
   12336:	b9de      	cbnz	r6, 12370 <hci_cmd_done+0x84>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   12338:	4620      	mov	r0, r4
   1233a:	f003 ff0b 	bl	16154 <net_buf_id>
   1233e:	fb07 5000 	mla	r0, r7, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12342:	2201      	movs	r2, #1
   12344:	6840      	ldr	r0, [r0, #4]
   12346:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
   1234a:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   1234c:	f001 071f 	and.w	r7, r1, #31
   12350:	40ba      	lsls	r2, r7
	if (val) {
   12352:	0949      	lsrs	r1, r1, #5
   12354:	b318      	cbz	r0, 1239e <hci_cmd_done+0xb2>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12356:	f3bf 8f5b 	dmb	ish
   1235a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1235e:	e853 1f00 	ldrex	r1, [r3]
   12362:	4311      	orrs	r1, r2
   12364:	e843 1000 	strex	r0, r1, [r3]
   12368:	2800      	cmp	r0, #0
   1236a:	d1f8      	bne.n	1235e <hci_cmd_done+0x72>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1236c:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
   12370:	4620      	mov	r0, r4
   12372:	f003 feef 	bl	16154 <net_buf_id>
   12376:	270c      	movs	r7, #12
   12378:	fb07 5000 	mla	r0, r7, r0, r5
   1237c:	6883      	ldr	r3, [r0, #8]
   1237e:	b1db      	cbz	r3, 123b8 <hci_cmd_done+0xcc>
		cmd(buf)->status = status;
   12380:	4620      	mov	r0, r4
   12382:	f003 fee7 	bl	16154 <net_buf_id>
   12386:	4378      	muls	r0, r7
   12388:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   1238a:	4620      	mov	r0, r4
   1238c:	f003 fee2 	bl	16154 <net_buf_id>
   12390:	fb07 5500 	mla	r5, r7, r0, r5
   12394:	68a8      	ldr	r0, [r5, #8]
}
   12396:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   1239a:	f007 be11 	b.w	19fc0 <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1239e:	43d2      	mvns	r2, r2
   123a0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   123a4:	f3bf 8f5b 	dmb	ish
   123a8:	e853 1f00 	ldrex	r1, [r3]
   123ac:	4011      	ands	r1, r2
   123ae:	e843 1000 	strex	r0, r1, [r3]
   123b2:	2800      	cmp	r0, #0
   123b4:	d0da      	beq.n	1236c <hci_cmd_done+0x80>
   123b6:	e7f7      	b.n	123a8 <hci_cmd_done+0xbc>
   123b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   123ba:	bf00      	nop
   123bc:	20000758 	.word	0x20000758
   123c0:	20001d90 	.word	0x20001d90
   123c4:	200002a0 	.word	0x200002a0

000123c8 <hci_cmd_status>:
{
   123c8:	b538      	push	{r3, r4, r5, lr}
   123ca:	2104      	movs	r1, #4
   123cc:	4604      	mov	r4, r0
   123ce:	3008      	adds	r0, #8
   123d0:	f004 f966 	bl	166a0 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   123d4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   123d6:	7801      	ldrb	r1, [r0, #0]
   123d8:	8840      	ldrh	r0, [r0, #2]
   123da:	4622      	mov	r2, r4
   123dc:	f7ff ff86 	bl	122ec <hci_cmd_done>
	if (ncmd) {
   123e0:	b125      	cbz	r5, 123ec <hci_cmd_status+0x24>
   123e2:	4803      	ldr	r0, [pc, #12]	; (123f0 <hci_cmd_status+0x28>)
}
   123e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   123e8:	f007 bdea 	b.w	19fc0 <z_impl_k_sem_give>
   123ec:	bd38      	pop	{r3, r4, r5, pc}
   123ee:	bf00      	nop
   123f0:	200003b8 	.word	0x200003b8

000123f4 <hci_cmd_complete>:
{
   123f4:	b538      	push	{r3, r4, r5, lr}
   123f6:	2103      	movs	r1, #3
   123f8:	4604      	mov	r4, r0
   123fa:	3008      	adds	r0, #8
   123fc:	f004 f950 	bl	166a0 <net_buf_simple_pull_mem>
	status = buf->data[0];
   12400:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   12402:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   12404:	7819      	ldrb	r1, [r3, #0]
   12406:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1240a:	4622      	mov	r2, r4
   1240c:	f7ff ff6e 	bl	122ec <hci_cmd_done>
	if (ncmd) {
   12410:	b125      	cbz	r5, 1241c <hci_cmd_complete+0x28>
   12412:	4803      	ldr	r0, [pc, #12]	; (12420 <hci_cmd_complete+0x2c>)
}
   12414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12418:	f007 bdd2 	b.w	19fc0 <z_impl_k_sem_give>
   1241c:	bd38      	pop	{r3, r4, r5, pc}
   1241e:	bf00      	nop
   12420:	200003b8 	.word	0x200003b8

00012424 <bt_hci_cmd_state_set_init>:
{
   12424:	b510      	push	{r4, lr}
	state->bit = bit;
   12426:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   1242a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1242e:	720b      	strb	r3, [r1, #8]
{
   12430:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   12432:	f003 fe8f 	bl	16154 <net_buf_id>
   12436:	4b03      	ldr	r3, [pc, #12]	; (12444 <bt_hci_cmd_state_set_init+0x20>)
   12438:	220c      	movs	r2, #12
   1243a:	fb02 3000 	mla	r0, r2, r0, r3
   1243e:	6044      	str	r4, [r0, #4]
}
   12440:	bd10      	pop	{r4, pc}
   12442:	bf00      	nop
   12444:	20001d90 	.word	0x20001d90

00012448 <bt_hci_cmd_create>:
{
   12448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   1244c:	f04f 32ff 	mov.w	r2, #4294967295
   12450:	4605      	mov	r5, r0
   12452:	f04f 33ff 	mov.w	r3, #4294967295
   12456:	481b      	ldr	r0, [pc, #108]	; (124c4 <bt_hci_cmd_create+0x7c>)
   12458:	460e      	mov	r6, r1
   1245a:	f00d fcaa 	bl	1fdb2 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   1245e:	4604      	mov	r4, r0
   12460:	b948      	cbnz	r0, 12476 <bt_hci_cmd_create+0x2e>
   12462:	4919      	ldr	r1, [pc, #100]	; (124c8 <bt_hci_cmd_create+0x80>)
   12464:	4819      	ldr	r0, [pc, #100]	; (124cc <bt_hci_cmd_create+0x84>)
   12466:	4a1a      	ldr	r2, [pc, #104]	; (124d0 <bt_hci_cmd_create+0x88>)
   12468:	23e9      	movs	r3, #233	; 0xe9
   1246a:	f00b f9a3 	bl	1d7b4 <printk>
   1246e:	4818      	ldr	r0, [pc, #96]	; (124d0 <bt_hci_cmd_create+0x88>)
   12470:	21e9      	movs	r1, #233	; 0xe9
   12472:	f00b fbf9 	bl	1dc68 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   12476:	f104 0b08 	add.w	fp, r4, #8
   1247a:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1247c:	2700      	movs	r7, #0
   1247e:	4658      	mov	r0, fp
   12480:	f003 ffa2 	bl	163c8 <net_buf_simple_reserve>
   12484:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   12486:	4620      	mov	r0, r4
   12488:	f003 fe64 	bl	16154 <net_buf_id>
   1248c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 124d4 <bt_hci_cmd_create+0x8c>
   12490:	f04f 0a0c 	mov.w	sl, #12
   12494:	fb0a 8000 	mla	r0, sl, r0, r8
   12498:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   1249a:	4620      	mov	r0, r4
   1249c:	f003 fe5a 	bl	16154 <net_buf_id>
   124a0:	fb0a 8000 	mla	r0, sl, r0, r8
   124a4:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   124a6:	4620      	mov	r0, r4
   124a8:	f003 fe54 	bl	16154 <net_buf_id>
   124ac:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   124b0:	2103      	movs	r1, #3
   124b2:	6047      	str	r7, [r0, #4]
   124b4:	4658      	mov	r0, fp
   124b6:	f004 f915 	bl	166e4 <net_buf_simple_add>
	hdr->param_len = param_len;
   124ba:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   124bc:	8005      	strh	r5, [r0, #0]
}
   124be:	4620      	mov	r0, r4
   124c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124c4:	20000758 	.word	0x20000758
   124c8:	0002207c 	.word	0x0002207c
   124cc:	00021650 	.word	0x00021650
   124d0:	00022001 	.word	0x00022001
   124d4:	20001d90 	.word	0x20001d90

000124d8 <bt_hci_cmd_send_sync>:
{
   124d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   124da:	4615      	mov	r5, r2
   124dc:	b087      	sub	sp, #28
	if (!buf) {
   124de:	460c      	mov	r4, r1
   124e0:	b921      	cbnz	r1, 124ec <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   124e2:	f7ff ffb1 	bl	12448 <bt_hci_cmd_create>
		if (!buf) {
   124e6:	4604      	mov	r4, r0
   124e8:	2800      	cmp	r0, #0
   124ea:	d048      	beq.n	1257e <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   124ec:	2201      	movs	r2, #1
   124ee:	2100      	movs	r1, #0
   124f0:	4668      	mov	r0, sp
   124f2:	f00e f976 	bl	207e2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   124f6:	4620      	mov	r0, r4
   124f8:	f003 fe2c 	bl	16154 <net_buf_id>
   124fc:	4e21      	ldr	r6, [pc, #132]	; (12584 <bt_hci_cmd_send_sync+0xac>)
   124fe:	230c      	movs	r3, #12
   12500:	fb03 6000 	mla	r0, r3, r0, r6
   12504:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   12508:	4620      	mov	r0, r4
   1250a:	f004 f801 	bl	16510 <net_buf_ref>
   1250e:	4601      	mov	r1, r0
   12510:	481d      	ldr	r0, [pc, #116]	; (12588 <bt_hci_cmd_send_sync+0xb0>)
   12512:	f003 ff83 	bl	1641c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   12516:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1251a:	2300      	movs	r3, #0
   1251c:	4668      	mov	r0, sp
   1251e:	f007 fd93 	bl	1a048 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   12522:	4607      	mov	r7, r0
   12524:	b180      	cbz	r0, 12548 <bt_hci_cmd_send_sync+0x70>
   12526:	4a19      	ldr	r2, [pc, #100]	; (1258c <bt_hci_cmd_send_sync+0xb4>)
   12528:	4919      	ldr	r1, [pc, #100]	; (12590 <bt_hci_cmd_send_sync+0xb8>)
   1252a:	481a      	ldr	r0, [pc, #104]	; (12594 <bt_hci_cmd_send_sync+0xbc>)
   1252c:	f44f 7399 	mov.w	r3, #306	; 0x132
   12530:	f00b f940 	bl	1d7b4 <printk>
   12534:	4818      	ldr	r0, [pc, #96]	; (12598 <bt_hci_cmd_send_sync+0xc0>)
   12536:	4639      	mov	r1, r7
   12538:	f00b f93c 	bl	1d7b4 <printk>
   1253c:	4040      	eors	r0, r0
   1253e:	f380 8811 	msr	BASEPRI, r0
   12542:	f04f 0003 	mov.w	r0, #3
   12546:	df02      	svc	2
	status = cmd(buf)->status;
   12548:	4620      	mov	r0, r4
   1254a:	f003 fe03 	bl	16154 <net_buf_id>
   1254e:	230c      	movs	r3, #12
   12550:	4343      	muls	r3, r0
   12552:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   12554:	b156      	cbz	r6, 1256c <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   12556:	4620      	mov	r0, r4
   12558:	f003 ff94 	bl	16484 <net_buf_unref>
			return -EIO;
   1255c:	2e09      	cmp	r6, #9
   1255e:	bf0c      	ite	eq
   12560:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   12564:	f06f 0004 	mvnne.w	r0, #4
}
   12568:	b007      	add	sp, #28
   1256a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   1256c:	b115      	cbz	r5, 12574 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   1256e:	602c      	str	r4, [r5, #0]
	return 0;
   12570:	4630      	mov	r0, r6
   12572:	e7f9      	b.n	12568 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   12574:	4620      	mov	r0, r4
   12576:	f003 ff85 	bl	16484 <net_buf_unref>
	return 0;
   1257a:	4628      	mov	r0, r5
   1257c:	e7f4      	b.n	12568 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   1257e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12582:	e7f1      	b.n	12568 <bt_hci_cmd_send_sync+0x90>
   12584:	20001d90 	.word	0x20001d90
   12588:	200003f0 	.word	0x200003f0
   1258c:	00022001 	.word	0x00022001
   12590:	00022080 	.word	0x00022080
   12594:	00021650 	.word	0x00021650
   12598:	00022089 	.word	0x00022089

0001259c <hci_init>:
{
   1259c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1259e:	4d41      	ldr	r5, [pc, #260]	; (126a4 <hci_init+0x108>)
   125a0:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   125a4:	6899      	ldr	r1, [r3, #8]
   125a6:	f011 0101 	ands.w	r1, r1, #1
   125aa:	d123      	bne.n	125f4 <hci_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   125ac:	aa01      	add	r2, sp, #4
   125ae:	f640 4003 	movw	r0, #3075	; 0xc03
   125b2:	f7ff ff91 	bl	124d8 <bt_hci_cmd_send_sync>
		if (err) {
   125b6:	4604      	mov	r4, r0
   125b8:	2800      	cmp	r0, #0
   125ba:	d170      	bne.n	1269e <hci_init+0x102>
		hci_reset_complete(rsp);
   125bc:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
   125be:	689b      	ldr	r3, [r3, #8]
	if (status) {
   125c0:	781b      	ldrb	r3, [r3, #0]
   125c2:	b9a3      	cbnz	r3, 125ee <hci_init+0x52>
		bt_scan_reset();
   125c4:	f000 ff7a 	bl	134bc <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   125c8:	f3bf 8f5b 	dmb	ish
   125cc:	462b      	mov	r3, r5
   125ce:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   125d2:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   125d6:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   125da:	f3bf 8f5b 	dmb	ish
   125de:	e853 1f00 	ldrex	r1, [r3]
   125e2:	e843 2000 	strex	r0, r2, [r3]
   125e6:	2800      	cmp	r0, #0
   125e8:	d1f9      	bne.n	125de <hci_init+0x42>
   125ea:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   125ee:	9801      	ldr	r0, [sp, #4]
   125f0:	f003 ff48 	bl	16484 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   125f4:	aa01      	add	r2, sp, #4
   125f6:	2100      	movs	r1, #0
   125f8:	f241 0003 	movw	r0, #4099	; 0x1003
   125fc:	f7ff ff6c 	bl	124d8 <bt_hci_cmd_send_sync>
	if (err) {
   12600:	4604      	mov	r4, r0
   12602:	2800      	cmp	r0, #0
   12604:	d14b      	bne.n	1269e <hci_init+0x102>
	read_local_features_complete(rsp);
   12606:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   12608:	4e27      	ldr	r6, [pc, #156]	; (126a8 <hci_init+0x10c>)
   1260a:	6893      	ldr	r3, [r2, #8]
   1260c:	f853 0f01 	ldr.w	r0, [r3, #1]!
   12610:	6859      	ldr	r1, [r3, #4]
   12612:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   12614:	4610      	mov	r0, r2
   12616:	f003 ff35 	bl	16484 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1261a:	4621      	mov	r1, r4
   1261c:	aa01      	add	r2, sp, #4
   1261e:	f241 0001 	movw	r0, #4097	; 0x1001
   12622:	f7ff ff59 	bl	124d8 <bt_hci_cmd_send_sync>
	if (err) {
   12626:	4604      	mov	r4, r0
   12628:	2800      	cmp	r0, #0
   1262a:	d138      	bne.n	1269e <hci_init+0x102>
	read_local_ver_complete(rsp);
   1262c:	9801      	ldr	r0, [sp, #4]
   1262e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   12630:	785a      	ldrb	r2, [r3, #1]
   12632:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   12636:	78d9      	ldrb	r1, [r3, #3]
   12638:	789a      	ldrb	r2, [r3, #2]
   1263a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1263e:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   12642:	791a      	ldrb	r2, [r3, #4]
   12644:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   12648:	7a19      	ldrb	r1, [r3, #8]
   1264a:	79da      	ldrb	r2, [r3, #7]
   1264c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12650:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   12654:	795a      	ldrb	r2, [r3, #5]
   12656:	799b      	ldrb	r3, [r3, #6]
   12658:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1265c:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   12660:	f003 ff10 	bl	16484 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   12664:	4621      	mov	r1, r4
   12666:	aa01      	add	r2, sp, #4
   12668:	f241 0002 	movw	r0, #4098	; 0x1002
   1266c:	f7ff ff34 	bl	124d8 <bt_hci_cmd_send_sync>
	if (err) {
   12670:	4604      	mov	r4, r0
   12672:	b9a0      	cbnz	r0, 1269e <hci_init+0x102>
	read_supported_commands_complete(rsp);
   12674:	9f01      	ldr	r7, [sp, #4]
   12676:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   12678:	1c53      	adds	r3, r2, #1
   1267a:	3241      	adds	r2, #65	; 0x41
   1267c:	6818      	ldr	r0, [r3, #0]
   1267e:	6859      	ldr	r1, [r3, #4]
   12680:	4634      	mov	r4, r6
   12682:	c403      	stmia	r4!, {r0, r1}
   12684:	3308      	adds	r3, #8
   12686:	4293      	cmp	r3, r2
   12688:	4626      	mov	r6, r4
   1268a:	d1f7      	bne.n	1267c <hci_init+0xe0>
	net_buf_unref(rsp);
   1268c:	4638      	mov	r0, r7
   1268e:	f003 fef9 	bl	16484 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   12692:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   12696:	065e      	lsls	r6, r3, #25
   12698:	d408      	bmi.n	126ac <hci_init+0x110>
		return -ENODEV;
   1269a:	f06f 0412 	mvn.w	r4, #18
}
   1269e:	4620      	mov	r0, r4
   126a0:	b003      	add	sp, #12
   126a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   126a4:	200002a0 	.word	0x200002a0
   126a8:	20000310 	.word	0x20000310
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   126ac:	aa01      	add	r2, sp, #4
   126ae:	2100      	movs	r1, #0
   126b0:	f242 0003 	movw	r0, #8195	; 0x2003
   126b4:	f7ff ff10 	bl	124d8 <bt_hci_cmd_send_sync>
	if (err) {
   126b8:	4604      	mov	r4, r0
   126ba:	2800      	cmp	r0, #0
   126bc:	d1ef      	bne.n	1269e <hci_init+0x102>
	read_le_features_complete(rsp);
   126be:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   126c0:	4e95      	ldr	r6, [pc, #596]	; (12918 <hci_init+0x37c>)
   126c2:	6893      	ldr	r3, [r2, #8]
   126c4:	f853 0f01 	ldr.w	r0, [r3, #1]!
   126c8:	6859      	ldr	r1, [r3, #4]
   126ca:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   126cc:	4610      	mov	r0, r2
   126ce:	f003 fed9 	bl	16484 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   126d2:	4621      	mov	r1, r4
   126d4:	aa01      	add	r2, sp, #4
   126d6:	f242 0002 	movw	r0, #8194	; 0x2002
   126da:	f7ff fefd 	bl	124d8 <bt_hci_cmd_send_sync>
		if (err) {
   126de:	4604      	mov	r4, r0
   126e0:	2800      	cmp	r0, #0
   126e2:	d1dc      	bne.n	1269e <hci_init+0x102>
		le_read_buffer_size_complete(rsp);
   126e4:	9b01      	ldr	r3, [sp, #4]
   126e6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   126e8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   126ec:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   126f0:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   126f2:	b129      	cbz	r1, 12700 <hci_init+0x164>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   126f4:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   126f6:	4611      	mov	r1, r2
   126f8:	f106 0028 	add.w	r0, r6, #40	; 0x28
   126fc:	f00e f871 	bl	207e2 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   12700:	9801      	ldr	r0, [sp, #4]
   12702:	f003 febf 	bl	16484 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   12706:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   1270a:	f016 0620 	ands.w	r6, r6, #32
   1270e:	f000 80e7 	beq.w	128e0 <hci_init+0x344>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   12712:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   12716:	071c      	lsls	r4, r3, #28
   12718:	d511      	bpl.n	1273e <hci_init+0x1a2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1271a:	aa01      	add	r2, sp, #4
   1271c:	2100      	movs	r1, #0
   1271e:	f242 001c 	movw	r0, #8220	; 0x201c
   12722:	f7ff fed9 	bl	124d8 <bt_hci_cmd_send_sync>
		if (err) {
   12726:	4604      	mov	r4, r0
   12728:	2800      	cmp	r0, #0
   1272a:	d1b8      	bne.n	1269e <hci_init+0x102>
		le_read_supp_states_complete(rsp);
   1272c:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1272e:	6883      	ldr	r3, [r0, #8]
   12730:	f853 2f01 	ldr.w	r2, [r3, #1]!
   12734:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   12736:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   1273a:	f003 fea3 	bl	16484 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1273e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   12742:	0698      	lsls	r0, r3, #26
   12744:	d523      	bpl.n	1278e <hci_init+0x1f2>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   12746:	f10d 0102 	add.w	r1, sp, #2
   1274a:	4668      	mov	r0, sp
   1274c:	f00b fe10 	bl	1e370 <hci_le_read_max_data_len>
		if (err) {
   12750:	4604      	mov	r4, r0
   12752:	2800      	cmp	r0, #0
   12754:	d1a3      	bne.n	1269e <hci_init+0x102>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   12756:	2104      	movs	r1, #4
   12758:	f242 0024 	movw	r0, #8228	; 0x2024
   1275c:	f7ff fe74 	bl	12448 <bt_hci_cmd_create>
		if (!buf) {
   12760:	4606      	mov	r6, r0
   12762:	2800      	cmp	r0, #0
   12764:	f000 80c3 	beq.w	128ee <hci_init+0x352>
   12768:	2104      	movs	r1, #4
   1276a:	3008      	adds	r0, #8
   1276c:	f003 ffba 	bl	166e4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   12770:	f8bd 3000 	ldrh.w	r3, [sp]
   12774:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   12776:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1277a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1277c:	4622      	mov	r2, r4
   1277e:	4631      	mov	r1, r6
   12780:	f242 0024 	movw	r0, #8228	; 0x2024
   12784:	f7ff fea8 	bl	124d8 <bt_hci_cmd_send_sync>
		if (err) {
   12788:	4604      	mov	r4, r0
   1278a:	2800      	cmp	r0, #0
   1278c:	d187      	bne.n	1269e <hci_init+0x102>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1278e:	2108      	movs	r1, #8
   12790:	f242 0001 	movw	r0, #8193	; 0x2001
   12794:	f7ff fe58 	bl	12448 <bt_hci_cmd_create>
	if (!buf) {
   12798:	4604      	mov	r4, r0
   1279a:	2800      	cmp	r0, #0
   1279c:	f000 80a7 	beq.w	128ee <hci_init+0x352>
   127a0:	2108      	movs	r1, #8
   127a2:	4408      	add	r0, r1
   127a4:	f003 ff9e 	bl	166e4 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   127a8:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   127ac:	f012 0f02 	tst.w	r2, #2
   127b0:	bf14      	ite	ne
   127b2:	232f      	movne	r3, #47	; 0x2f
   127b4:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   127b6:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   127b8:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   127bc:	bf48      	it	mi
   127be:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   127c2:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   127c6:	bf18      	it	ne
   127c8:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   127cc:	2200      	movs	r2, #0
   127ce:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   127d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   127d4:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   127d6:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   127d8:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   127da:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   127dc:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   127de:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   127e0:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   127e2:	4621      	mov	r1, r4
   127e4:	f242 0001 	movw	r0, #8193	; 0x2001
   127e8:	f7ff fe76 	bl	124d8 <bt_hci_cmd_send_sync>
	if (err) {
   127ec:	4604      	mov	r4, r0
   127ee:	2800      	cmp	r0, #0
   127f0:	f47f af55 	bne.w	1269e <hci_init+0x102>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   127f4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   127f8:	069a      	lsls	r2, r3, #26
   127fa:	d41e      	bmi.n	1283a <hci_init+0x29e>
	if (bt_dev.le.acl_mtu) {
   127fc:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   12800:	b9d9      	cbnz	r1, 1283a <hci_init+0x29e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   12802:	aa01      	add	r2, sp, #4
   12804:	f241 0005 	movw	r0, #4101	; 0x1005
   12808:	f7ff fe66 	bl	124d8 <bt_hci_cmd_send_sync>
	if (err) {
   1280c:	4604      	mov	r4, r0
   1280e:	2800      	cmp	r0, #0
   12810:	f47f af45 	bne.w	1269e <hci_init+0x102>
	if (bt_dev.le.acl_mtu) {
   12814:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   12818:	b963      	cbnz	r3, 12834 <hci_init+0x298>
	read_buffer_size_complete(rsp);
   1281a:	9b01      	ldr	r3, [sp, #4]
   1281c:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1281e:	785a      	ldrb	r2, [r3, #1]
   12820:	7899      	ldrb	r1, [r3, #2]
   12822:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12826:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   1282a:	889a      	ldrh	r2, [r3, #4]
   1282c:	483b      	ldr	r0, [pc, #236]	; (1291c <hci_init+0x380>)
   1282e:	4611      	mov	r1, r2
   12830:	f00d ffd7 	bl	207e2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   12834:	9801      	ldr	r0, [sp, #4]
   12836:	f003 fe25 	bl	16484 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1283a:	2108      	movs	r1, #8
   1283c:	f640 4001 	movw	r0, #3073	; 0xc01
   12840:	f7ff fe02 	bl	12448 <bt_hci_cmd_create>
	if (!buf) {
   12844:	4604      	mov	r4, r0
   12846:	2800      	cmp	r0, #0
   12848:	d051      	beq.n	128ee <hci_init+0x352>
   1284a:	2108      	movs	r1, #8
   1284c:	4408      	add	r0, r1
   1284e:	f003 ff49 	bl	166e4 <net_buf_simple_add>
	dst[0] = val;
   12852:	2310      	movs	r3, #16
   12854:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   12856:	2388      	movs	r3, #136	; 0x88
   12858:	7043      	strb	r3, [r0, #1]
   1285a:	2302      	movs	r3, #2
	dst[0] = val;
   1285c:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   1285e:	70c3      	strb	r3, [r0, #3]
   12860:	2320      	movs	r3, #32
	dst[0] = val;
   12862:	7082      	strb	r2, [r0, #2]
   12864:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   12866:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   12868:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1286a:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1286c:	4621      	mov	r1, r4
   1286e:	f640 4001 	movw	r0, #3073	; 0xc01
   12872:	f7ff fe31 	bl	124d8 <bt_hci_cmd_send_sync>
	if (err) {
   12876:	4604      	mov	r4, r0
   12878:	2800      	cmp	r0, #0
   1287a:	f47f af10 	bne.w	1269e <hci_init+0x102>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   1287e:	4601      	mov	r1, r0
   12880:	aa01      	add	r2, sp, #4
   12882:	f64f 4001 	movw	r0, #64513	; 0xfc01
   12886:	f7ff fe27 	bl	124d8 <bt_hci_cmd_send_sync>
	if (err) {
   1288a:	4604      	mov	r4, r0
   1288c:	bb20      	cbnz	r0, 128d8 <hci_init+0x33c>
	net_buf_unref(rsp);
   1288e:	9801      	ldr	r0, [sp, #4]
   12890:	f003 fdf8 	bl	16484 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   12894:	4621      	mov	r1, r4
   12896:	aa01      	add	r2, sp, #4
   12898:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1289c:	f7ff fe1c 	bl	124d8 <bt_hci_cmd_send_sync>
	if (err) {
   128a0:	4604      	mov	r4, r0
   128a2:	b9c8      	cbnz	r0, 128d8 <hci_init+0x33c>
	rp.cmds = (void *)rsp->data;
   128a4:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   128a6:	6883      	ldr	r3, [r0, #8]
   128a8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   128ac:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
   128b0:	f003 fde8 	bl	16484 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   128b4:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   128b8:	075b      	lsls	r3, r3, #29
   128ba:	d50d      	bpl.n	128d8 <hci_init+0x33c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   128bc:	aa01      	add	r2, sp, #4
   128be:	4621      	mov	r1, r4
   128c0:	f64f 4003 	movw	r0, #64515	; 0xfc03
   128c4:	f7ff fe08 	bl	124d8 <bt_hci_cmd_send_sync>
		if (err) {
   128c8:	b930      	cbnz	r0, 128d8 <hci_init+0x33c>
		rp.feat = (void *)rsp->data;
   128ca:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   128cc:	6883      	ldr	r3, [r0, #8]
   128ce:	785b      	ldrb	r3, [r3, #1]
   128d0:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
   128d4:	f003 fdd6 	bl	16484 <net_buf_unref>
	err = bt_id_init();
   128d8:	f000 fd50 	bl	1337c <bt_id_init>
   128dc:	4604      	mov	r4, r0
	if (err) {
   128de:	e6de      	b.n	1269e <hci_init+0x102>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   128e0:	2102      	movs	r1, #2
   128e2:	f640 406d 	movw	r0, #3181	; 0xc6d
   128e6:	f7ff fdaf 	bl	12448 <bt_hci_cmd_create>
		if (!buf) {
   128ea:	4604      	mov	r4, r0
   128ec:	b910      	cbnz	r0, 128f4 <hci_init+0x358>
		return -ENOBUFS;
   128ee:	f06f 0468 	mvn.w	r4, #104	; 0x68
   128f2:	e6d4      	b.n	1269e <hci_init+0x102>
   128f4:	2102      	movs	r1, #2
   128f6:	3008      	adds	r0, #8
   128f8:	f003 fef4 	bl	166e4 <net_buf_simple_add>
		cp_le->le = 0x01;
   128fc:	2301      	movs	r3, #1
   128fe:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   12900:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   12902:	4621      	mov	r1, r4
   12904:	4632      	mov	r2, r6
   12906:	f640 406d 	movw	r0, #3181	; 0xc6d
   1290a:	f7ff fde5 	bl	124d8 <bt_hci_cmd_send_sync>
		if (err) {
   1290e:	4604      	mov	r4, r0
   12910:	2800      	cmp	r0, #0
   12912:	f43f aefe 	beq.w	12712 <hci_init+0x176>
   12916:	e6c2      	b.n	1269e <hci_init+0x102>
   12918:	20000370 	.word	0x20000370
   1291c:	200003a0 	.word	0x200003a0

00012920 <bt_le_create_conn_legacy>:
{
   12920:	b5f0      	push	{r4, r5, r6, r7, lr}
   12922:	b085      	sub	sp, #20
   12924:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   12926:	f10d 0103 	add.w	r1, sp, #3
   1292a:	2000      	movs	r0, #0
   1292c:	f000 fd06 	bl	1333c <bt_id_set_create_conn_own_addr>
	if (err) {
   12930:	4604      	mov	r4, r0
   12932:	2800      	cmp	r0, #0
   12934:	d145      	bne.n	129c2 <bt_le_create_conn_legacy+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   12936:	2119      	movs	r1, #25
   12938:	f242 000d 	movw	r0, #8205	; 0x200d
   1293c:	f7ff fd84 	bl	12448 <bt_hci_cmd_create>
	if (!buf) {
   12940:	4607      	mov	r7, r0
   12942:	2800      	cmp	r0, #0
   12944:	d040      	beq.n	129c8 <bt_le_create_conn_legacy+0xa8>
   12946:	2119      	movs	r1, #25
   12948:	3008      	adds	r0, #8
   1294a:	f003 fecb 	bl	166e4 <net_buf_simple_add>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   1294e:	2219      	movs	r2, #25
   12950:	4605      	mov	r5, r0
   12952:	4621      	mov	r1, r4
   12954:	f00e f897 	bl	20a86 <memset>
	cp->own_addr_type = own_addr_type;
   12958:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1295c:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   1295e:	f106 0190 	add.w	r1, r6, #144	; 0x90
   12962:	1d68      	adds	r0, r5, #5
   12964:	f00b fc31 	bl	1e1ca <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   12968:	4b19      	ldr	r3, [pc, #100]	; (129d0 <bt_le_create_conn_legacy+0xb0>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   1296a:	712c      	strb	r4, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   1296c:	899a      	ldrh	r2, [r3, #12]
   1296e:	802a      	strh	r2, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   12970:	89da      	ldrh	r2, [r3, #14]
   12972:	806a      	strh	r2, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   12974:	f8b6 20a8 	ldrh.w	r2, [r6, #168]	; 0xa8
   12978:	f8a5 200d 	strh.w	r2, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   1297c:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
   12980:	f8a5 200f 	strh.w	r2, [r5, #15]
	state->target = target;
   12984:	33cc      	adds	r3, #204	; 0xcc
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   12986:	f8b6 20ac 	ldrh.w	r2, [r6, #172]	; 0xac
   1298a:	f8a5 2011 	strh.w	r2, [r5, #17]
	state->target = target;
   1298e:	9301      	str	r3, [sp, #4]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   12990:	f8b6 20ae 	ldrh.w	r2, [r6, #174]	; 0xae
   12994:	f8a5 2013 	strh.w	r2, [r5, #19]
	state->bit = bit;
   12998:	230b      	movs	r3, #11
   1299a:	9302      	str	r3, [sp, #8]
	cmd(buf)->state = state;
   1299c:	4638      	mov	r0, r7
	state->val = val;
   1299e:	2301      	movs	r3, #1
   129a0:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = state;
   129a4:	f003 fbd6 	bl	16154 <net_buf_id>
   129a8:	4b0a      	ldr	r3, [pc, #40]	; (129d4 <bt_le_create_conn_legacy+0xb4>)
   129aa:	220c      	movs	r2, #12
   129ac:	fb02 3300 	mla	r3, r2, r0, r3
   129b0:	aa01      	add	r2, sp, #4
   129b2:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   129b4:	4639      	mov	r1, r7
   129b6:	4622      	mov	r2, r4
   129b8:	f242 000d 	movw	r0, #8205	; 0x200d
   129bc:	f7ff fd8c 	bl	124d8 <bt_hci_cmd_send_sync>
   129c0:	4604      	mov	r4, r0
}
   129c2:	4620      	mov	r0, r4
   129c4:	b005      	add	sp, #20
   129c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   129c8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   129cc:	e7f9      	b.n	129c2 <bt_le_create_conn_legacy+0xa2>
   129ce:	bf00      	nop
   129d0:	200002a0 	.word	0x200002a0
   129d4:	20001d90 	.word	0x20001d90

000129d8 <bt_le_create_conn_cancel>:
{
   129d8:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   129da:	2100      	movs	r1, #0
{
   129dc:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   129de:	f242 000e 	movw	r0, #8206	; 0x200e
   129e2:	f7ff fd31 	bl	12448 <bt_hci_cmd_create>
	state->target = target;
   129e6:	4b0c      	ldr	r3, [pc, #48]	; (12a18 <bt_le_create_conn_cancel+0x40>)
   129e8:	9301      	str	r3, [sp, #4]
	state->val = val;
   129ea:	2500      	movs	r5, #0
	state->bit = bit;
   129ec:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   129ee:	4604      	mov	r4, r0
	state->bit = bit;
   129f0:	9302      	str	r3, [sp, #8]
	state->val = val;
   129f2:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = state;
   129f6:	f003 fbad 	bl	16154 <net_buf_id>
   129fa:	4b08      	ldr	r3, [pc, #32]	; (12a1c <bt_le_create_conn_cancel+0x44>)
   129fc:	220c      	movs	r2, #12
   129fe:	fb02 3000 	mla	r0, r2, r0, r3
   12a02:	ab01      	add	r3, sp, #4
   12a04:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   12a06:	462a      	mov	r2, r5
   12a08:	4621      	mov	r1, r4
   12a0a:	f242 000e 	movw	r0, #8206	; 0x200e
   12a0e:	f7ff fd63 	bl	124d8 <bt_hci_cmd_send_sync>
}
   12a12:	b005      	add	sp, #20
   12a14:	bd30      	pop	{r4, r5, pc}
   12a16:	bf00      	nop
   12a18:	2000036c 	.word	0x2000036c
   12a1c:	20001d90 	.word	0x20001d90

00012a20 <bt_send>:
	return bt_dev.drv->send(buf);
   12a20:	4b02      	ldr	r3, [pc, #8]	; (12a2c <bt_send+0xc>)
   12a22:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   12a26:	691b      	ldr	r3, [r3, #16]
   12a28:	4718      	bx	r3
   12a2a:	bf00      	nop
   12a2c:	200002a0 	.word	0x200002a0

00012a30 <bt_hci_cmd_send>:
{
   12a30:	b538      	push	{r3, r4, r5, lr}
   12a32:	4605      	mov	r5, r0
	if (!buf) {
   12a34:	460c      	mov	r4, r1
   12a36:	b919      	cbnz	r1, 12a40 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   12a38:	f7ff fd06 	bl	12448 <bt_hci_cmd_create>
		if (!buf) {
   12a3c:	4604      	mov	r4, r0
   12a3e:	b198      	cbz	r0, 12a68 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   12a40:	f640 4335 	movw	r3, #3125	; 0xc35
   12a44:	429d      	cmp	r5, r3
   12a46:	d109      	bne.n	12a5c <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
   12a48:	4620      	mov	r0, r4
   12a4a:	f7ff ffe9 	bl	12a20 <bt_send>
		if (err) {
   12a4e:	4605      	mov	r5, r0
   12a50:	b110      	cbz	r0, 12a58 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   12a52:	4620      	mov	r0, r4
   12a54:	f003 fd16 	bl	16484 <net_buf_unref>
}
   12a58:	4628      	mov	r0, r5
   12a5a:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   12a5c:	4804      	ldr	r0, [pc, #16]	; (12a70 <bt_hci_cmd_send+0x40>)
   12a5e:	4621      	mov	r1, r4
   12a60:	f003 fcdc 	bl	1641c <net_buf_put>
	return 0;
   12a64:	2500      	movs	r5, #0
   12a66:	e7f7      	b.n	12a58 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   12a68:	f06f 0568 	mvn.w	r5, #104	; 0x68
   12a6c:	e7f4      	b.n	12a58 <bt_hci_cmd_send+0x28>
   12a6e:	bf00      	nop
   12a70:	200003f0 	.word	0x200003f0

00012a74 <conn_auto_initiate>:
{
   12a74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   12a76:	7a83      	ldrb	r3, [r0, #10]
   12a78:	2b07      	cmp	r3, #7
{
   12a7a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   12a7c:	d121      	bne.n	12ac2 <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12a7e:	f3bf 8f5b 	dmb	ish
   12a82:	6843      	ldr	r3, [r0, #4]
   12a84:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   12a88:	049b      	lsls	r3, r3, #18
   12a8a:	f100 0604 	add.w	r6, r0, #4
   12a8e:	d41a      	bmi.n	12ac6 <conn_auto_initiate+0x52>
   12a90:	78c3      	ldrb	r3, [r0, #3]
   12a92:	b123      	cbz	r3, 12a9e <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   12a94:	4b29      	ldr	r3, [pc, #164]	; (12b3c <conn_auto_initiate+0xc8>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   12a96:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   12a9a:	071d      	lsls	r5, r3, #28
   12a9c:	d513      	bpl.n	12ac6 <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   12a9e:	2102      	movs	r1, #2
   12aa0:	f242 0016 	movw	r0, #8214	; 0x2016
   12aa4:	f7ff fcd0 	bl	12448 <bt_hci_cmd_create>
	if (!buf) {
   12aa8:	4605      	mov	r5, r0
   12aaa:	b160      	cbz	r0, 12ac6 <conn_auto_initiate+0x52>
   12aac:	2102      	movs	r1, #2
   12aae:	3008      	adds	r0, #8
   12ab0:	f003 fe18 	bl	166e4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   12ab4:	8823      	ldrh	r3, [r4, #0]
   12ab6:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   12ab8:	4629      	mov	r1, r5
   12aba:	f242 0016 	movw	r0, #8214	; 0x2016
   12abe:	f7ff ffb7 	bl	12a30 <bt_hci_cmd_send>
}
   12ac2:	b004      	add	sp, #16
   12ac4:	bd70      	pop	{r4, r5, r6, pc}
   12ac6:	f3bf 8f5b 	dmb	ish
   12aca:	6863      	ldr	r3, [r4, #4]
   12acc:	4d1b      	ldr	r5, [pc, #108]	; (12b3c <conn_auto_initiate+0xc8>)
   12ace:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   12ad2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   12ad6:	f3c3 3100 	ubfx	r1, r3, #12, #1
   12ada:	d117      	bne.n	12b0c <conn_auto_initiate+0x98>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   12adc:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   12ae0:	07d8      	lsls	r0, r3, #31
   12ae2:	d513      	bpl.n	12b0c <conn_auto_initiate+0x98>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   12ae4:	2302      	movs	r3, #2
   12ae6:	9100      	str	r1, [sp, #0]
   12ae8:	461a      	mov	r2, r3
   12aea:	4620      	mov	r0, r4
   12aec:	f00b fcb2 	bl	1e454 <bt_le_set_phy>
		if (!err) {
   12af0:	b960      	cbnz	r0, 12b0c <conn_auto_initiate+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12af2:	f3bf 8f5b 	dmb	ish
   12af6:	e856 3f00 	ldrex	r3, [r6]
   12afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12afe:	e846 3200 	strex	r2, r3, [r6]
   12b02:	2a00      	cmp	r2, #0
   12b04:	d1f7      	bne.n	12af6 <conn_auto_initiate+0x82>
   12b06:	f3bf 8f5b 	dmb	ish
			return;
   12b0a:	e7da      	b.n	12ac2 <conn_auto_initiate+0x4e>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   12b0c:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   12b10:	069a      	lsls	r2, r3, #26
   12b12:	d5d6      	bpl.n	12ac2 <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   12b14:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   12b18:	689b      	ldr	r3, [r3, #8]
   12b1a:	079b      	lsls	r3, r3, #30
   12b1c:	d5d1      	bpl.n	12ac2 <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   12b1e:	f10d 010e 	add.w	r1, sp, #14
   12b22:	a803      	add	r0, sp, #12
   12b24:	f00b fc24 	bl	1e370 <hci_le_read_max_data_len>
			if (!err) {
   12b28:	2800      	cmp	r0, #0
   12b2a:	d1ca      	bne.n	12ac2 <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   12b2c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   12b30:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   12b34:	4620      	mov	r0, r4
   12b36:	f00b fc70 	bl	1e41a <bt_le_set_data_len>
		}
   12b3a:	e7c2      	b.n	12ac2 <conn_auto_initiate+0x4e>
   12b3c:	200002a0 	.word	0x200002a0

00012b40 <bt_hci_le_enh_conn_complete>:
{
   12b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12b44:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   12b48:	4a5e      	ldr	r2, [pc, #376]	; (12cc4 <bt_hci_le_enh_conn_complete+0x184>)
	if (evt->status) {
   12b4a:	7806      	ldrb	r6, [r0, #0]
		if (disconnected_handles[i] == handle) {
   12b4c:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   12b4e:	ea6f 5308 	mvn.w	r3, r8, lsl #20
   12b52:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   12b56:	b29b      	uxth	r3, r3
   12b58:	4299      	cmp	r1, r3
   12b5a:	f04f 0700 	mov.w	r7, #0
			disconnected_handles[i] = 0;
   12b5e:	bf08      	it	eq
   12b60:	8017      	strheq	r7, [r2, #0]
{
   12b62:	b085      	sub	sp, #20
   12b64:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12b66:	fa1f f988 	uxth.w	r9, r8
			return true;
   12b6a:	bf08      	it	eq
   12b6c:	2701      	moveq	r7, #1
	if (evt->status) {
   12b6e:	b306      	cbz	r6, 12bb2 <bt_hci_le_enh_conn_complete+0x72>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12b70:	2e02      	cmp	r6, #2
   12b72:	d11b      	bne.n	12bac <bt_hci_le_enh_conn_complete+0x6c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   12b74:	2100      	movs	r1, #0
   12b76:	2206      	movs	r2, #6
   12b78:	4608      	mov	r0, r1
   12b7a:	f001 faa3 	bl	140c4 <bt_conn_lookup_state_le>
	if (!conn) {
   12b7e:	4604      	mov	r4, r0
   12b80:	b188      	cbz	r0, 12ba6 <bt_hci_le_enh_conn_complete+0x66>
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   12b82:	7246      	strb	r6, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12b84:	2100      	movs	r1, #0
   12b86:	f001 f88b 	bl	13ca0 <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12b8a:	f3bf 8f5b 	dmb	ish
   12b8e:	6863      	ldr	r3, [r4, #4]
   12b90:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   12b94:	07db      	lsls	r3, r3, #31
   12b96:	d503      	bpl.n	12ba0 <bt_hci_le_enh_conn_complete+0x60>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   12b98:	4631      	mov	r1, r6
   12b9a:	4620      	mov	r0, r4
   12b9c:	f001 f880 	bl	13ca0 <bt_conn_set_state>
	bt_conn_unref(conn);
   12ba0:	4620      	mov	r0, r4
   12ba2:	f001 f847 	bl	13c34 <bt_conn_unref>
			bt_le_scan_update(false);
   12ba6:	2000      	movs	r0, #0
   12ba8:	f000 fc8e 	bl	134c8 <bt_le_scan_update>
}
   12bac:	b005      	add	sp, #20
   12bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12bb2:	7903      	ldrb	r3, [r0, #4]
   12bb4:	3b02      	subs	r3, #2
   12bb6:	2b01      	cmp	r3, #1
   12bb8:	f100 0404 	add.w	r4, r0, #4
   12bbc:	d82d      	bhi.n	12c1a <bt_hci_le_enh_conn_complete+0xda>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12bbe:	4621      	mov	r1, r4
   12bc0:	a802      	add	r0, sp, #8
   12bc2:	f00b fb02 	bl	1e1ca <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12bc6:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12bca:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12bce:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12bd0:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12bd4:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12bd8:	f00b fafe 	bl	1e1d8 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   12bdc:	2301      	movs	r3, #1
   12bde:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   12be2:	78e8      	ldrb	r0, [r5, #3]
   12be4:	b9a0      	cbnz	r0, 12c10 <bt_hci_le_enh_conn_complete+0xd0>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   12be6:	2206      	movs	r2, #6
   12be8:	a902      	add	r1, sp, #8
   12bea:	f001 fa6b 	bl	140c4 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12bee:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   12bf0:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12bf2:	b963      	cbnz	r3, 12c0e <bt_hci_le_enh_conn_complete+0xce>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12bf4:	f3bf 8f5b 	dmb	ish
   12bf8:	4b33      	ldr	r3, [pc, #204]	; (12cc8 <bt_hci_le_enh_conn_complete+0x188>)
   12bfa:	e853 2f00 	ldrex	r2, [r3]
   12bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   12c02:	e843 2100 	strex	r1, r2, [r3]
   12c06:	2900      	cmp	r1, #0
   12c08:	d1f7      	bne.n	12bfa <bt_hci_le_enh_conn_complete+0xba>
   12c0a:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   12c0e:	b9bc      	cbnz	r4, 12c40 <bt_hci_le_enh_conn_complete+0x100>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   12c10:	211f      	movs	r1, #31
   12c12:	4648      	mov	r0, r9
   12c14:	f00b fbc6 	bl	1e3a4 <bt_hci_disconnect>
		return;
   12c18:	e7c8      	b.n	12bac <bt_hci_le_enh_conn_complete+0x6c>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   12c1a:	78c3      	ldrb	r3, [r0, #3]
   12c1c:	2b01      	cmp	r3, #1
   12c1e:	bf04      	itt	eq
   12c20:	4b2a      	ldreq	r3, [pc, #168]	; (12ccc <bt_hci_le_enh_conn_complete+0x18c>)
   12c22:	f893 6067 	ldrbeq.w	r6, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   12c26:	4621      	mov	r1, r4
   12c28:	4630      	mov	r0, r6
   12c2a:	f00b fd6a 	bl	1e702 <bt_lookup_id_addr>
   12c2e:	4601      	mov	r1, r0
   12c30:	a802      	add	r0, sp, #8
   12c32:	f00b faca 	bl	1e1ca <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   12c36:	4621      	mov	r1, r4
   12c38:	4668      	mov	r0, sp
   12c3a:	f00b fac6 	bl	1e1ca <bt_addr_le_copy>
   12c3e:	e7d0      	b.n	12be2 <bt_hci_le_enh_conn_complete+0xa2>
	conn->handle = handle;
   12c40:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   12c42:	a902      	add	r1, sp, #8
	conn->handle = handle;
   12c44:	f820 8b90 	strh.w	r8, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   12c48:	f00b fabf 	bl	1e1ca <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   12c4c:	7e2a      	ldrb	r2, [r5, #24]
   12c4e:	7deb      	ldrb	r3, [r5, #23]
   12c50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12c54:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   12c58:	7eaa      	ldrb	r2, [r5, #26]
   12c5a:	7e6b      	ldrb	r3, [r5, #25]
   12c5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12c60:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12c64:	7f2a      	ldrb	r2, [r5, #28]
   12c66:	7eeb      	ldrb	r3, [r5, #27]
   12c68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12c6c:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   12c70:	78eb      	ldrb	r3, [r5, #3]
   12c72:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   12c74:	2200      	movs	r2, #0
   12c76:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12c78:	b96b      	cbnz	r3, 12c96 <bt_hci_le_enh_conn_complete+0x156>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   12c7a:	4669      	mov	r1, sp
   12c7c:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   12c80:	f00b faa3 	bl	1e1ca <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   12c84:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   12c86:	4b11      	ldr	r3, [pc, #68]	; (12ccc <bt_hci_le_enh_conn_complete+0x18c>)
					&bt_dev.id_addr[conn->id]);
   12c88:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   12c8c:	4419      	add	r1, r3
   12c8e:	f104 0097 	add.w	r0, r4, #151	; 0x97
   12c92:	f00b fa9a 	bl	1e1ca <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   12c96:	2107      	movs	r1, #7
   12c98:	4620      	mov	r0, r4
   12c9a:	f001 f801 	bl	13ca0 <bt_conn_set_state>
	if (is_disconnected) {
   12c9e:	b11f      	cbz	r7, 12ca8 <bt_hci_le_enh_conn_complete+0x168>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12ca0:	2101      	movs	r1, #1
   12ca2:	4620      	mov	r0, r4
   12ca4:	f000 fffc 	bl	13ca0 <bt_conn_set_state>
	bt_conn_connected(conn);
   12ca8:	4620      	mov	r0, r4
   12caa:	f00b fe1f 	bl	1e8ec <bt_conn_connected>
	conn_auto_initiate(conn);
   12cae:	4620      	mov	r0, r4
   12cb0:	f7ff fee0 	bl	12a74 <conn_auto_initiate>
	bt_conn_unref(conn);
   12cb4:	4620      	mov	r0, r4
   12cb6:	f000 ffbd 	bl	13c34 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12cba:	78e3      	ldrb	r3, [r4, #3]
   12cbc:	2b00      	cmp	r3, #0
   12cbe:	f47f af75 	bne.w	12bac <bt_hci_le_enh_conn_complete+0x6c>
   12cc2:	e770      	b.n	12ba6 <bt_hci_le_enh_conn_complete+0x66>
   12cc4:	200020a0 	.word	0x200020a0
   12cc8:	2000036c 	.word	0x2000036c
   12ccc:	200002a0 	.word	0x200002a0

00012cd0 <hci_tx_thread>:
{
   12cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   12cd4:	f8df 810c 	ldr.w	r8, [pc, #268]	; 12de4 <hci_tx_thread+0x114>
		BT_ASSERT(err == 0);
   12cd8:	f8df a120 	ldr.w	sl, [pc, #288]	; 12dfc <hci_tx_thread+0x12c>
		events[0].state = K_POLL_STATE_NOT_READY;
   12cdc:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12ce0:	483f      	ldr	r0, [pc, #252]	; (12de0 <hci_tx_thread+0x110>)
		events[0].state = K_POLL_STATE_NOT_READY;
   12ce2:	f36f 3352 	bfc	r3, #13, #6
   12ce6:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12cea:	f000 ff65 	bl	13bb8 <bt_conn_prepare_events>
   12cee:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   12cf0:	483c      	ldr	r0, [pc, #240]	; (12de4 <hci_tx_thread+0x114>)
   12cf2:	f04f 32ff 	mov.w	r2, #4294967295
   12cf6:	f04f 33ff 	mov.w	r3, #4294967295
   12cfa:	4629      	mov	r1, r5
   12cfc:	f00a f860 	bl	1cdc0 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   12d00:	b160      	cbz	r0, 12d1c <hci_tx_thread+0x4c>
   12d02:	4939      	ldr	r1, [pc, #228]	; (12de8 <hci_tx_thread+0x118>)
   12d04:	4839      	ldr	r0, [pc, #228]	; (12dec <hci_tx_thread+0x11c>)
   12d06:	f640 1389 	movw	r3, #2441	; 0x989
   12d0a:	4652      	mov	r2, sl
   12d0c:	f00a fd52 	bl	1d7b4 <printk>
   12d10:	4040      	eors	r0, r0
   12d12:	f380 8811 	msr	BASEPRI, r0
   12d16:	f04f 0003 	mov.w	r0, #3
   12d1a:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   12d1c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 12e00 <hci_tx_thread+0x130>
{
   12d20:	4e30      	ldr	r6, [pc, #192]	; (12de4 <hci_tx_thread+0x114>)
	return z_impl_k_sem_take(sem, timeout);
   12d22:	f5a9 77a8 	sub.w	r7, r9, #336	; 0x150
   12d26:	f1a9 0b38 	sub.w	fp, r9, #56	; 0x38
	for (; count; ev++, count--) {
   12d2a:	b915      	cbnz	r5, 12d32 <hci_tx_thread+0x62>
	z_impl_k_yield();
   12d2c:	f008 feb2 	bl	1ba94 <z_impl_k_yield>
	while (1) {
   12d30:	e7d4      	b.n	12cdc <hci_tx_thread+0xc>
		switch (ev->state) {
   12d32:	68f3      	ldr	r3, [r6, #12]
   12d34:	f3c3 3345 	ubfx	r3, r3, #13, #6
   12d38:	2b04      	cmp	r3, #4
   12d3a:	d147      	bne.n	12dcc <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   12d3c:	7b33      	ldrb	r3, [r6, #12]
   12d3e:	2b00      	cmp	r3, #0
   12d40:	d147      	bne.n	12dd2 <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   12d42:	2200      	movs	r2, #0
   12d44:	2300      	movs	r3, #0
   12d46:	4648      	mov	r0, r9
   12d48:	f003 fb0a 	bl	16360 <net_buf_get>
	BT_ASSERT(buf);
   12d4c:	4604      	mov	r4, r0
   12d4e:	b960      	cbnz	r0, 12d6a <hci_tx_thread+0x9a>
   12d50:	4927      	ldr	r1, [pc, #156]	; (12df0 <hci_tx_thread+0x120>)
   12d52:	4826      	ldr	r0, [pc, #152]	; (12dec <hci_tx_thread+0x11c>)
   12d54:	f44f 6312 	mov.w	r3, #2336	; 0x920
   12d58:	4652      	mov	r2, sl
   12d5a:	f00a fd2b 	bl	1d7b4 <printk>
   12d5e:	4040      	eors	r0, r0
   12d60:	f380 8811 	msr	BASEPRI, r0
   12d64:	f04f 0003 	mov.w	r0, #3
   12d68:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   12d6a:	f04f 32ff 	mov.w	r2, #4294967295
   12d6e:	f04f 33ff 	mov.w	r3, #4294967295
   12d72:	4658      	mov	r0, fp
   12d74:	f007 f968 	bl	1a048 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   12d78:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   12d7c:	b120      	cbz	r0, 12d88 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   12d7e:	f003 fb81 	bl	16484 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12d82:	2300      	movs	r3, #0
   12d84:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   12d88:	4620      	mov	r0, r4
   12d8a:	f003 fbc1 	bl	16510 <net_buf_ref>
   12d8e:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
   12d92:	4620      	mov	r0, r4
   12d94:	f7ff fe44 	bl	12a20 <bt_send>
	if (err) {
   12d98:	b1c0      	cbz	r0, 12dcc <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
   12d9a:	4816      	ldr	r0, [pc, #88]	; (12df4 <hci_tx_thread+0x124>)
   12d9c:	f007 f910 	bl	19fc0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   12da0:	4620      	mov	r0, r4
   12da2:	f003 f9d7 	bl	16154 <net_buf_id>
   12da6:	4b14      	ldr	r3, [pc, #80]	; (12df8 <hci_tx_thread+0x128>)
   12da8:	220c      	movs	r2, #12
   12daa:	fb02 3000 	mla	r0, r2, r0, r3
   12dae:	211f      	movs	r1, #31
   12db0:	8840      	ldrh	r0, [r0, #2]
   12db2:	4622      	mov	r2, r4
   12db4:	f7ff fa9a 	bl	122ec <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   12db8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   12dbc:	f003 fb62 	bl	16484 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12dc0:	2300      	movs	r3, #0
		net_buf_unref(buf);
   12dc2:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   12dc4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
   12dc8:	f003 fb5c 	bl	16484 <net_buf_unref>
	for (; count; ev++, count--) {
   12dcc:	3614      	adds	r6, #20
   12dce:	3d01      	subs	r5, #1
   12dd0:	e7ab      	b.n	12d2a <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   12dd2:	2b01      	cmp	r3, #1
   12dd4:	d1fa      	bne.n	12dcc <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
   12dd6:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   12dd8:	3838      	subs	r0, #56	; 0x38
   12dda:	f001 fb0d 	bl	143f8 <bt_conn_process_tx>
   12dde:	e7f5      	b.n	12dcc <hci_tx_thread+0xfc>
   12de0:	20000444 	.word	0x20000444
   12de4:	20000430 	.word	0x20000430
   12de8:	00022080 	.word	0x00022080
   12dec:	00021650 	.word	0x00021650
   12df0:	0002207c 	.word	0x0002207c
   12df4:	200003b8 	.word	0x200003b8
   12df8:	20001d90 	.word	0x20001d90
   12dfc:	00022001 	.word	0x00022001
   12e00:	200003f0 	.word	0x200003f0

00012e04 <hci_event_prio>:
{
   12e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12e08:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   12e0a:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   12e0e:	4630      	mov	r0, r6
   12e10:	f00c ffea 	bl	1fde8 <net_buf_simple_headroom>
	state->len = buf->len;
   12e14:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12e18:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   12e1c:	4605      	mov	r5, r0
   12e1e:	d80c      	bhi.n	12e3a <hci_event_prio+0x36>
   12e20:	4a1c      	ldr	r2, [pc, #112]	; (12e94 <hci_event_prio+0x90>)
   12e22:	491d      	ldr	r1, [pc, #116]	; (12e98 <hci_event_prio+0x94>)
   12e24:	481d      	ldr	r0, [pc, #116]	; (12e9c <hci_event_prio+0x98>)
   12e26:	f640 5315 	movw	r3, #3349	; 0xd15
   12e2a:	f00a fcc3 	bl	1d7b4 <printk>
   12e2e:	4040      	eors	r0, r0
   12e30:	f380 8811 	msr	BASEPRI, r0
   12e34:	f04f 0003 	mov.w	r0, #3
   12e38:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   12e3a:	2102      	movs	r1, #2
   12e3c:	4630      	mov	r0, r6
   12e3e:	f003 fc2f 	bl	166a0 <net_buf_simple_pull_mem>
   12e42:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12e44:	7800      	ldrb	r0, [r0, #0]
   12e46:	f00b f98a 	bl	1e15e <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   12e4a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12e4c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   12e4e:	d40c      	bmi.n	12e6a <hci_event_prio+0x66>
   12e50:	4a10      	ldr	r2, [pc, #64]	; (12e94 <hci_event_prio+0x90>)
   12e52:	4913      	ldr	r1, [pc, #76]	; (12ea0 <hci_event_prio+0x9c>)
   12e54:	4811      	ldr	r0, [pc, #68]	; (12e9c <hci_event_prio+0x98>)
   12e56:	f640 5319 	movw	r3, #3353	; 0xd19
   12e5a:	f00a fcab 	bl	1d7b4 <printk>
   12e5e:	4040      	eors	r0, r0
   12e60:	f380 8811 	msr	BASEPRI, r0
   12e64:	f04f 0003 	mov.w	r0, #3
   12e68:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   12e6a:	2305      	movs	r3, #5
   12e6c:	4a0d      	ldr	r2, [pc, #52]	; (12ea4 <hci_event_prio+0xa0>)
   12e6e:	7838      	ldrb	r0, [r7, #0]
   12e70:	4621      	mov	r1, r4
   12e72:	f00b f986 	bl	1e182 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   12e76:	07b3      	lsls	r3, r6, #30
   12e78:	d507      	bpl.n	12e8a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   12e7a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   12e7c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   12e80:	fa10 f585 	uxtah	r5, r0, r5
   12e84:	60a5      	str	r5, [r4, #8]
}
   12e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   12e8a:	4620      	mov	r0, r4
}
   12e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   12e90:	f003 baf8 	b.w	16484 <net_buf_unref>
   12e94:	00022001 	.word	0x00022001
   12e98:	00022035 	.word	0x00022035
   12e9c:	00021650 	.word	0x00021650
   12ea0:	000220a9 	.word	0x000220a9
   12ea4:	000210e4 	.word	0x000210e4

00012ea8 <bt_recv>:
{
   12ea8:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12eaa:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   12eac:	2b01      	cmp	r3, #1
{
   12eae:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   12eb0:	d007      	beq.n	12ec2 <bt_recv+0x1a>
   12eb2:	2b03      	cmp	r3, #3
   12eb4:	d113      	bne.n	12ede <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   12eb6:	480c      	ldr	r0, [pc, #48]	; (12ee8 <bt_recv+0x40>)
   12eb8:	4629      	mov	r1, r5
   12eba:	f003 faaf 	bl	1641c <net_buf_put>
		return 0;
   12ebe:	2000      	movs	r0, #0
   12ec0:	e00c      	b.n	12edc <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12ec2:	6883      	ldr	r3, [r0, #8]
   12ec4:	7818      	ldrb	r0, [r3, #0]
   12ec6:	f00b f94a 	bl	1e15e <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   12eca:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12ecc:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   12ece:	d502      	bpl.n	12ed6 <bt_recv+0x2e>
			hci_event_prio(buf);
   12ed0:	4628      	mov	r0, r5
   12ed2:	f7ff ff97 	bl	12e04 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   12ed6:	f014 0002 	ands.w	r0, r4, #2
   12eda:	d1ec      	bne.n	12eb6 <bt_recv+0xe>
}
   12edc:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   12ede:	f003 fad1 	bl	16484 <net_buf_unref>
		return -EINVAL;
   12ee2:	f06f 0015 	mvn.w	r0, #21
   12ee6:	e7f9      	b.n	12edc <bt_recv+0x34>
   12ee8:	200003d4 	.word	0x200003d4

00012eec <bt_hci_driver_register>:
	if (bt_dev.drv) {
   12eec:	4a08      	ldr	r2, [pc, #32]	; (12f10 <bt_hci_driver_register+0x24>)
{
   12eee:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   12ef0:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   12ef4:	b930      	cbnz	r0, 12f04 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   12ef6:	68d9      	ldr	r1, [r3, #12]
   12ef8:	b139      	cbz	r1, 12f0a <bt_hci_driver_register+0x1e>
   12efa:	6919      	ldr	r1, [r3, #16]
   12efc:	b129      	cbz	r1, 12f0a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   12efe:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	return 0;
   12f02:	4770      	bx	lr
		return -EALREADY;
   12f04:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12f08:	4770      	bx	lr
		return -EINVAL;
   12f0a:	f06f 0015 	mvn.w	r0, #21
}
   12f0e:	4770      	bx	lr
   12f10:	200002a0 	.word	0x200002a0

00012f14 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12f14:	4b07      	ldr	r3, [pc, #28]	; (12f34 <bt_finalize_init+0x20>)
   12f16:	f3bf 8f5b 	dmb	ish
   12f1a:	e853 2f00 	ldrex	r2, [r3]
   12f1e:	f042 0202 	orr.w	r2, r2, #2
   12f22:	e843 2100 	strex	r1, r2, [r3]
   12f26:	2900      	cmp	r1, #0
   12f28:	d1f7      	bne.n	12f1a <bt_finalize_init+0x6>
   12f2a:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   12f2e:	2000      	movs	r0, #0
   12f30:	f000 baca 	b.w	134c8 <bt_le_scan_update>
   12f34:	2000036c 	.word	0x2000036c

00012f38 <init_work>:
{
   12f38:	b510      	push	{r4, lr}
	err = hci_init();
   12f3a:	f7ff fb2f 	bl	1259c <hci_init>
	if (err) {
   12f3e:	4604      	mov	r4, r0
   12f40:	b928      	cbnz	r0, 12f4e <init_work+0x16>
		err = bt_conn_init();
   12f42:	f001 fac1 	bl	144c8 <bt_conn_init>
		if (err) {
   12f46:	4604      	mov	r4, r0
   12f48:	b908      	cbnz	r0, 12f4e <init_work+0x16>
	bt_finalize_init();
   12f4a:	f7ff ffe3 	bl	12f14 <bt_finalize_init>
	if (ready_cb) {
   12f4e:	4b04      	ldr	r3, [pc, #16]	; (12f60 <init_work+0x28>)
   12f50:	681b      	ldr	r3, [r3, #0]
   12f52:	b11b      	cbz	r3, 12f5c <init_work+0x24>
		ready_cb(err);
   12f54:	4620      	mov	r0, r4
}
   12f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   12f5a:	4718      	bx	r3
}
   12f5c:	bd10      	pop	{r4, pc}
   12f5e:	bf00      	nop
   12f60:	20001da8 	.word	0x20001da8

00012f64 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   12f64:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   12f68:	4d32      	ldr	r5, [pc, #200]	; (13034 <bt_enable+0xd0>)
   12f6a:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
{
   12f6e:	b088      	sub	sp, #32
   12f70:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   12f72:	2b00      	cmp	r3, #0
   12f74:	d058      	beq.n	13028 <bt_enable+0xc4>
   12f76:	f3bf 8f5b 	dmb	ish
   12f7a:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   12f7e:	e853 4f00 	ldrex	r4, [r3]
   12f82:	f044 0201 	orr.w	r2, r4, #1
   12f86:	e843 2100 	strex	r1, r2, [r3]
   12f8a:	2900      	cmp	r1, #0
   12f8c:	d1f7      	bne.n	12f7e <bt_enable+0x1a>
   12f8e:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   12f92:	f014 0401 	ands.w	r4, r4, #1
   12f96:	d14a      	bne.n	1302e <bt_enable+0xca>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   12f98:	4b27      	ldr	r3, [pc, #156]	; (13038 <bt_enable+0xd4>)
   12f9a:	f04f 0800 	mov.w	r8, #0
   12f9e:	601e      	str	r6, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   12fa0:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12fa4:	f06f 0308 	mvn.w	r3, #8
   12fa8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   12fac:	e9cd 8906 	strd	r8, r9, [sp, #24]
   12fb0:	e9cd 4400 	strd	r4, r4, [sp]
   12fb4:	4b21      	ldr	r3, [pc, #132]	; (1303c <bt_enable+0xd8>)
   12fb6:	4922      	ldr	r1, [pc, #136]	; (13040 <bt_enable+0xdc>)
   12fb8:	9404      	str	r4, [sp, #16]
   12fba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   12fbe:	4821      	ldr	r0, [pc, #132]	; (13044 <bt_enable+0xe0>)
   12fc0:	f006 fba2 	bl	19708 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12fc4:	4920      	ldr	r1, [pc, #128]	; (13048 <bt_enable+0xe4>)
   12fc6:	481f      	ldr	r0, [pc, #124]	; (13044 <bt_enable+0xe0>)
   12fc8:	f00d fbd1 	bl	2076e <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12fcc:	f06f 0307 	mvn.w	r3, #7
   12fd0:	e9cd 4302 	strd	r4, r3, [sp, #8]
   12fd4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   12fd8:	e9cd 4400 	strd	r4, r4, [sp]
   12fdc:	4b1b      	ldr	r3, [pc, #108]	; (1304c <bt_enable+0xe8>)
   12fde:	491c      	ldr	r1, [pc, #112]	; (13050 <bt_enable+0xec>)
   12fe0:	9404      	str	r4, [sp, #16]
   12fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12fe6:	481b      	ldr	r0, [pc, #108]	; (13054 <bt_enable+0xf0>)
   12fe8:	f006 fb8e 	bl	19708 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12fec:	491a      	ldr	r1, [pc, #104]	; (13058 <bt_enable+0xf4>)
   12fee:	4819      	ldr	r0, [pc, #100]	; (13054 <bt_enable+0xf0>)
   12ff0:	f00d fbbd 	bl	2076e <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   12ff4:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   12ff8:	68db      	ldr	r3, [r3, #12]
   12ffa:	4798      	blx	r3
	if (err) {
   12ffc:	4604      	mov	r4, r0
   12ffe:	b950      	cbnz	r0, 13016 <bt_enable+0xb2>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   13000:	b96e      	cbnz	r6, 1301e <bt_enable+0xba>
	err = hci_init();
   13002:	f7ff facb 	bl	1259c <hci_init>
	if (err) {
   13006:	4604      	mov	r4, r0
   13008:	b928      	cbnz	r0, 13016 <bt_enable+0xb2>
		err = bt_conn_init();
   1300a:	f001 fa5d 	bl	144c8 <bt_conn_init>
		if (err) {
   1300e:	4604      	mov	r4, r0
   13010:	b908      	cbnz	r0, 13016 <bt_enable+0xb2>
	bt_finalize_init();
   13012:	f7ff ff7f 	bl	12f14 <bt_finalize_init>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   13016:	4620      	mov	r0, r4
   13018:	b008      	add	sp, #32
   1301a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	k_work_submit(&bt_dev.init);
   1301e:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   13022:	f007 fb2d 	bl	1a680 <k_work_submit>
	return 0;
   13026:	e7f6      	b.n	13016 <bt_enable+0xb2>
		return -ENODEV;
   13028:	f06f 0412 	mvn.w	r4, #18
   1302c:	e7f3      	b.n	13016 <bt_enable+0xb2>
		return -EALREADY;
   1302e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   13032:	e7f0      	b.n	13016 <bt_enable+0xb2>
   13034:	200002a0 	.word	0x200002a0
   13038:	20001da8 	.word	0x20001da8
   1303c:	00012cd1 	.word	0x00012cd1
   13040:	20002e20 	.word	0x20002e20
   13044:	20001570 	.word	0x20001570
   13048:	000220c2 	.word	0x000220c2
   1304c:	000121e1 	.word	0x000121e1
   13050:	20002a00 	.word	0x20002a00
   13054:	200014f0 	.word	0x200014f0
   13058:	000220c8 	.word	0x000220c8

0001305c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1305c:	4800      	ldr	r0, [pc, #0]	; (13060 <bt_get_name+0x4>)
   1305e:	4770      	bx	lr
   13060:	000220ce 	.word	0x000220ce

00013064 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   13064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   13066:	4f0b      	ldr	r7, [pc, #44]	; (13094 <id_find+0x30>)
{
   13068:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   1306a:	2500      	movs	r5, #0
   1306c:	79fb      	ldrb	r3, [r7, #7]
   1306e:	b2ec      	uxtb	r4, r5
   13070:	42a3      	cmp	r3, r4
   13072:	d802      	bhi.n	1307a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   13074:	f06f 0401 	mvn.w	r4, #1
   13078:	e009      	b.n	1308e <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1307a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   1307e:	2207      	movs	r2, #7
   13080:	4439      	add	r1, r7
   13082:	4630      	mov	r0, r6
   13084:	f00d fce3 	bl	20a4e <memcmp>
   13088:	3501      	adds	r5, #1
   1308a:	2800      	cmp	r0, #0
   1308c:	d1ee      	bne.n	1306c <id_find+0x8>
}
   1308e:	4620      	mov	r0, r4
   13090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13092:	bf00      	nop
   13094:	200002a0 	.word	0x200002a0

00013098 <set_random_address>:
{
   13098:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1309a:	2206      	movs	r2, #6
   1309c:	4913      	ldr	r1, [pc, #76]	; (130ec <set_random_address+0x54>)
   1309e:	4605      	mov	r5, r0
   130a0:	f00d fcd5 	bl	20a4e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   130a4:	4602      	mov	r2, r0
   130a6:	b1d8      	cbz	r0, 130e0 <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   130a8:	2106      	movs	r1, #6
   130aa:	f242 0005 	movw	r0, #8197	; 0x2005
   130ae:	f7ff f9cb 	bl	12448 <bt_hci_cmd_create>
	if (!buf) {
   130b2:	4604      	mov	r4, r0
   130b4:	b1b0      	cbz	r0, 130e4 <set_random_address+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   130b6:	2206      	movs	r2, #6
   130b8:	4629      	mov	r1, r5
   130ba:	3008      	adds	r0, #8
   130bc:	f00c fea0 	bl	1fe00 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   130c0:	2200      	movs	r2, #0
   130c2:	4621      	mov	r1, r4
   130c4:	f242 0005 	movw	r0, #8197	; 0x2005
   130c8:	f7ff fa06 	bl	124d8 <bt_hci_cmd_send_sync>
	if (err) {
   130cc:	4602      	mov	r2, r0
   130ce:	b938      	cbnz	r0, 130e0 <set_random_address+0x48>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   130d0:	4629      	mov	r1, r5
   130d2:	4806      	ldr	r0, [pc, #24]	; (130ec <set_random_address+0x54>)
   130d4:	f00b fb09 	bl	1e6ea <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   130d8:	4b05      	ldr	r3, [pc, #20]	; (130f0 <set_random_address+0x58>)
   130da:	2101      	movs	r1, #1
   130dc:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
}
   130e0:	4610      	mov	r0, r2
   130e2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   130e4:	f06f 0268 	mvn.w	r2, #104	; 0x68
   130e8:	e7fa      	b.n	130e0 <set_random_address+0x48>
   130ea:	bf00      	nop
   130ec:	20000301 	.word	0x20000301
   130f0:	200002a0 	.word	0x200002a0

000130f4 <id_create.isra.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   130f4:	b530      	push	{r4, r5, lr}
   130f6:	4604      	mov	r4, r0
   130f8:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   130fa:	460d      	mov	r5, r1
   130fc:	b199      	cbz	r1, 13126 <id_create.isra.0+0x32>
   130fe:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   13100:	2207      	movs	r2, #7
   13102:	a902      	add	r1, sp, #8
   13104:	4628      	mov	r0, r5
   13106:	9302      	str	r3, [sp, #8]
   13108:	f8cd 300b 	str.w	r3, [sp, #11]
   1310c:	f00d fc9f 	bl	20a4e <memcmp>
   13110:	b148      	cbz	r0, 13126 <id_create.isra.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   13112:	4810      	ldr	r0, [pc, #64]	; (13154 <id_create.isra.0+0x60>)
   13114:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13118:	4629      	mov	r1, r5
   1311a:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1311c:	f00b faea 	bl	1e6f4 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   13120:	2000      	movs	r0, #0
}
   13122:	b005      	add	sp, #20
   13124:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   13126:	4668      	mov	r0, sp
   13128:	f00b f80b 	bl	1e142 <bt_addr_le_create_static>
			if (err) {
   1312c:	2800      	cmp	r0, #0
   1312e:	d1f8      	bne.n	13122 <id_create.isra.0+0x2e>
		} while (id_find(&new_addr) >= 0);
   13130:	4668      	mov	r0, sp
   13132:	f7ff ff97 	bl	13064 <id_find>
   13136:	2800      	cmp	r0, #0
   13138:	daf5      	bge.n	13126 <id_create.isra.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1313a:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1313e:	4c05      	ldr	r4, [pc, #20]	; (13154 <id_create.isra.0+0x60>)
   13140:	4669      	mov	r1, sp
   13142:	4420      	add	r0, r4
   13144:	f00b fad6 	bl	1e6f4 <bt_addr_le_copy>
		if (addr) {
   13148:	2d00      	cmp	r5, #0
   1314a:	d0e9      	beq.n	13120 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1314c:	4601      	mov	r1, r0
   1314e:	4628      	mov	r0, r5
   13150:	e7e4      	b.n	1311c <id_create.isra.0+0x28>
   13152:	bf00      	nop
   13154:	200002a0 	.word	0x200002a0

00013158 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   13158:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1315a:	460e      	mov	r6, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1315c:	4604      	mov	r4, r0
   1315e:	b918      	cbnz	r0, 13168 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   13160:	b1ee      	cbz	r6, 1319e <bt_id_create+0x46>
		return -EINVAL;
   13162:	f06f 0015 	mvn.w	r0, #21
   13166:	e018      	b.n	1319a <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   13168:	2300      	movs	r3, #0
   1316a:	2207      	movs	r2, #7
   1316c:	4669      	mov	r1, sp
   1316e:	9300      	str	r3, [sp, #0]
   13170:	f8cd 3003 	str.w	r3, [sp, #3]
   13174:	f00d fc6b 	bl	20a4e <memcmp>
   13178:	2800      	cmp	r0, #0
   1317a:	d0f1      	beq.n	13160 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1317c:	7823      	ldrb	r3, [r4, #0]
   1317e:	2b01      	cmp	r3, #1
   13180:	d1ef      	bne.n	13162 <bt_id_create+0xa>
   13182:	79a3      	ldrb	r3, [r4, #6]
   13184:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13188:	2bc0      	cmp	r3, #192	; 0xc0
   1318a:	d1ea      	bne.n	13162 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   1318c:	4620      	mov	r0, r4
   1318e:	f7ff ff69 	bl	13064 <id_find>
   13192:	2800      	cmp	r0, #0
   13194:	dbe4      	blt.n	13160 <bt_id_create+0x8>
			return -EALREADY;
   13196:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   1319a:	b002      	add	sp, #8
   1319c:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1319e:	4d13      	ldr	r5, [pc, #76]	; (131ec <bt_id_create+0x94>)
   131a0:	79eb      	ldrb	r3, [r5, #7]
   131a2:	2b01      	cmp	r3, #1
   131a4:	d01e      	beq.n	131e4 <bt_id_create+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   131a6:	f3bf 8f5b 	dmb	ish
   131aa:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   131ae:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   131b2:	07db      	lsls	r3, r3, #31
   131b4:	d40b      	bmi.n	131ce <bt_id_create+0x76>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   131b6:	2c00      	cmp	r4, #0
   131b8:	d0d3      	beq.n	13162 <bt_id_create+0xa>
   131ba:	2207      	movs	r2, #7
   131bc:	4669      	mov	r1, sp
   131be:	4620      	mov	r0, r4
   131c0:	9600      	str	r6, [sp, #0]
   131c2:	f8cd 6003 	str.w	r6, [sp, #3]
   131c6:	f00d fc42 	bl	20a4e <memcmp>
   131ca:	2800      	cmp	r0, #0
   131cc:	d0c9      	beq.n	13162 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   131ce:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   131d0:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
   131d2:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
   131d4:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
   131d6:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
   131d8:	f7ff ff8c 	bl	130f4 <id_create.isra.0>
	new_id = bt_dev.id_count++;
   131dc:	2800      	cmp	r0, #0
   131de:	bf08      	it	eq
   131e0:	4630      	moveq	r0, r6
   131e2:	e7da      	b.n	1319a <bt_id_create+0x42>
		return -ENOMEM;
   131e4:	f06f 000b 	mvn.w	r0, #11
   131e8:	e7d7      	b.n	1319a <bt_id_create+0x42>
   131ea:	bf00      	nop
   131ec:	200002a0 	.word	0x200002a0

000131f0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   131f0:	b570      	push	{r4, r5, r6, lr}
   131f2:	b086      	sub	sp, #24
   131f4:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   131f6:	aa01      	add	r2, sp, #4
   131f8:	2100      	movs	r1, #0
   131fa:	f241 0009 	movw	r0, #4105	; 0x1009
   131fe:	f7ff f96b 	bl	124d8 <bt_hci_cmd_send_sync>
	if (err) {
   13202:	4604      	mov	r4, r0
   13204:	b970      	cbnz	r0, 13224 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   13206:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13208:	9002      	str	r0, [sp, #8]
   1320a:	689d      	ldr	r5, [r3, #8]
   1320c:	f8ad 000c 	strh.w	r0, [sp, #12]
   13210:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   13212:	2206      	movs	r2, #6
   13214:	a902      	add	r1, sp, #8
   13216:	4628      	mov	r0, r5
   13218:	f00d fc19 	bl	20a4e <memcmp>
   1321c:	b920      	cbnz	r0, 13228 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   1321e:	9801      	ldr	r0, [sp, #4]
   13220:	f003 f930 	bl	16484 <net_buf_unref>
		return 0U;
   13224:	2000      	movs	r0, #0
   13226:	e015      	b.n	13254 <bt_id_read_public_addr+0x64>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   13228:	4b0b      	ldr	r3, [pc, #44]	; (13258 <bt_id_read_public_addr+0x68>)
   1322a:	6818      	ldr	r0, [r3, #0]
   1322c:	9004      	str	r0, [sp, #16]
   1322e:	889b      	ldrh	r3, [r3, #4]
   13230:	f8ad 3014 	strh.w	r3, [sp, #20]
   13234:	2206      	movs	r2, #6
   13236:	a904      	add	r1, sp, #16
   13238:	4628      	mov	r0, r5
   1323a:	f00d fc08 	bl	20a4e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1323e:	2800      	cmp	r0, #0
   13240:	d0ed      	beq.n	1321e <bt_id_read_public_addr+0x2e>
		return 0U;
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
   13242:	4629      	mov	r1, r5
   13244:	1c70      	adds	r0, r6, #1
   13246:	f00b fa50 	bl	1e6ea <bt_addr_copy>
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   1324a:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   1324c:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   1324e:	f003 f919 	bl	16484 <net_buf_unref>
	return 1U;
   13252:	2001      	movs	r0, #1
}
   13254:	b006      	add	sp, #24
   13256:	bd70      	pop	{r4, r5, r6, pc}
   13258:	00020fec 	.word	0x00020fec

0001325c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1325c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1325e:	4668      	mov	r0, sp
   13260:	f7ff ffc6 	bl	131f0 <bt_id_read_public_addr>
   13264:	4b04      	ldr	r3, [pc, #16]	; (13278 <bt_setup_public_id_addr+0x1c>)
   13266:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   13268:	b118      	cbz	r0, 13272 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1326a:	4669      	mov	r1, sp
   1326c:	2000      	movs	r0, #0
   1326e:	f7ff ff41 	bl	130f4 <id_create.isra.0>
}
   13272:	b003      	add	sp, #12
   13274:	f85d fb04 	ldr.w	pc, [sp], #4
   13278:	200002a0 	.word	0x200002a0

0001327c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1327c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1327e:	4b18      	ldr	r3, [pc, #96]	; (132e0 <bt_read_static_addr+0x64>)
   13280:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   13284:	f014 0401 	ands.w	r4, r4, #1
{
   13288:	4605      	mov	r5, r0
   1328a:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1328c:	d015      	beq.n	132ba <bt_read_static_addr+0x3e>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1328e:	aa01      	add	r2, sp, #4
   13290:	2100      	movs	r1, #0
   13292:	f64f 4009 	movw	r0, #64521	; 0xfc09
   13296:	f7ff f91f 	bl	124d8 <bt_hci_cmd_send_sync>
	if (err) {
   1329a:	4603      	mov	r3, r0
   1329c:	b9e8      	cbnz	r0, 132da <bt_read_static_addr+0x5e>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   1329e:	9801      	ldr	r0, [sp, #4]
   132a0:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   132a2:	7854      	ldrb	r4, [r2, #1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   132a4:	f04f 0c16 	mov.w	ip, #22
   132a8:	42b4      	cmp	r4, r6
   132aa:	bf28      	it	cs
   132ac:	4634      	movcs	r4, r6
   132ae:	eb02 070c 	add.w	r7, r2, ip
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   132b2:	42a3      	cmp	r3, r4
   132b4:	db04      	blt.n	132c0 <bt_read_static_addr+0x44>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
   132b6:	f003 f8e5 	bl	16484 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   132ba:	4620      	mov	r0, r4
   132bc:	b003      	add	sp, #12
   132be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   132c0:	1c96      	adds	r6, r2, #2
   132c2:	fb0c 5103 	mla	r1, ip, r3, r5
   132c6:	f856 eb04 	ldr.w	lr, [r6], #4
   132ca:	f841 eb04 	str.w	lr, [r1], #4
   132ce:	42be      	cmp	r6, r7
   132d0:	d1f9      	bne.n	132c6 <bt_read_static_addr+0x4a>
   132d2:	883e      	ldrh	r6, [r7, #0]
   132d4:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
   132d6:	3301      	adds	r3, #1
   132d8:	e7eb      	b.n	132b2 <bt_read_static_addr+0x36>
		return 0;
   132da:	2400      	movs	r4, #0
   132dc:	e7ed      	b.n	132ba <bt_read_static_addr+0x3e>
   132de:	bf00      	nop
   132e0:	200002a0 	.word	0x200002a0

000132e4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   132e4:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   132e6:	4d14      	ldr	r5, [pc, #80]	; (13338 <bt_setup_random_id_addr+0x54>)
   132e8:	79ec      	ldrb	r4, [r5, #7]
{
   132ea:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   132ec:	b92c      	cbnz	r4, 132fa <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   132ee:	2101      	movs	r1, #1
   132f0:	a802      	add	r0, sp, #8
   132f2:	f7ff ffc3 	bl	1327c <bt_read_static_addr>
   132f6:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   132f8:	b9b0      	cbnz	r0, 13328 <bt_setup_random_id_addr+0x44>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   132fa:	2100      	movs	r1, #0
   132fc:	4608      	mov	r0, r1
   132fe:	f7ff ff2b 	bl	13158 <bt_id_create>
   13302:	e00f      	b.n	13324 <bt_setup_random_id_addr+0x40>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13304:	ab02      	add	r3, sp, #8
   13306:	fb06 3102 	mla	r1, r6, r2, r3
   1330a:	f10d 0001 	add.w	r0, sp, #1
   1330e:	f00b f9ec 	bl	1e6ea <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   13312:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   13314:	4669      	mov	r1, sp
   13316:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   13318:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1331c:	f7ff feea 	bl	130f4 <id_create.isra.0>
				if (err) {
   13320:	3401      	adds	r4, #1
   13322:	b110      	cbz	r0, 1332a <bt_setup_random_id_addr+0x46>
}
   13324:	b008      	add	sp, #32
   13326:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13328:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1332a:	79eb      	ldrb	r3, [r5, #7]
   1332c:	b2e2      	uxtb	r2, r4
   1332e:	4293      	cmp	r3, r2
   13330:	d8e8      	bhi.n	13304 <bt_setup_random_id_addr+0x20>
			return 0;
   13332:	2000      	movs	r0, #0
   13334:	e7f6      	b.n	13324 <bt_setup_random_id_addr+0x40>
   13336:	bf00      	nop
   13338:	200002a0 	.word	0x200002a0

0001333c <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   1333c:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   1333e:	4c07      	ldr	r4, [pc, #28]	; (1335c <bt_id_set_create_conn_own_addr+0x20>)
   13340:	7823      	ldrb	r3, [r4, #0]
   13342:	2b01      	cmp	r3, #1
{
   13344:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
   13346:	d003      	beq.n	13350 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   13348:	7823      	ldrb	r3, [r4, #0]
   1334a:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   1334c:	2000      	movs	r0, #0
}
   1334e:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   13350:	1c60      	adds	r0, r4, #1
   13352:	f7ff fea1 	bl	13098 <set_random_address>
			if (err) {
   13356:	2800      	cmp	r0, #0
   13358:	d0f6      	beq.n	13348 <bt_id_set_create_conn_own_addr+0xc>
   1335a:	e7f8      	b.n	1334e <bt_id_set_create_conn_own_addr+0x12>
   1335c:	200002a0 	.word	0x200002a0

00013360 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   13360:	b510      	push	{r4, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   13362:	4b05      	ldr	r3, [pc, #20]	; (13378 <bt_id_set_scan_own_addr+0x18>)
   13364:	781b      	ldrb	r3, [r3, #0]
   13366:	700b      	strb	r3, [r1, #0]
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   13368:	2000      	movs	r0, #0
{
   1336a:	460c      	mov	r4, r1
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   1336c:	f00b f9cb 	bl	1e706 <bt_id_set_private_addr>
			if (err) {
   13370:	b908      	cbnz	r0, 13376 <bt_id_set_scan_own_addr+0x16>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   13372:	2301      	movs	r3, #1
   13374:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
   13376:	bd10      	pop	{r4, pc}
   13378:	200002a0 	.word	0x200002a0

0001337c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   1337c:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1337e:	4c0a      	ldr	r4, [pc, #40]	; (133a8 <bt_id_init+0x2c>)
   13380:	79e3      	ldrb	r3, [r4, #7]
   13382:	b10b      	cbz	r3, 13388 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   13384:	2000      	movs	r0, #0
}
   13386:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   13388:	f7ff ff68 	bl	1325c <bt_setup_public_id_addr>
		if (err) {
   1338c:	2800      	cmp	r0, #0
   1338e:	d1fa      	bne.n	13386 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   13390:	79e3      	ldrb	r3, [r4, #7]
   13392:	2b00      	cmp	r3, #0
   13394:	d1f6      	bne.n	13384 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   13396:	f7ff ffa5 	bl	132e4 <bt_setup_random_id_addr>
		if (err) {
   1339a:	2800      	cmp	r0, #0
   1339c:	d1f3      	bne.n	13386 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1339e:	1c60      	adds	r0, r4, #1
}
   133a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
   133a4:	f7ff be78 	b.w	13098 <set_random_address>
   133a8:	200002a0 	.word	0x200002a0

000133ac <atomic_get.constprop.0>:
   133ac:	4b03      	ldr	r3, [pc, #12]	; (133bc <atomic_get.constprop.0+0x10>)
   133ae:	f3bf 8f5b 	dmb	ish
   133b2:	6818      	ldr	r0, [r3, #0]
   133b4:	f3bf 8f5b 	dmb	ish
}
   133b8:	4770      	bx	lr
   133ba:	bf00      	nop
   133bc:	2000036c 	.word	0x2000036c

000133c0 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   133c0:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   133c2:	2102      	movs	r1, #2
{
   133c4:	b087      	sub	sp, #28
   133c6:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   133c8:	f242 000c 	movw	r0, #8204	; 0x200c
   133cc:	f7ff f83c 	bl	12448 <bt_hci_cmd_create>
	if (!buf) {
   133d0:	4605      	mov	r5, r0
   133d2:	b308      	cbz	r0, 13418 <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
   133d4:	2102      	movs	r1, #2
   133d6:	3008      	adds	r0, #8
   133d8:	f003 f984 	bl	166e4 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   133dc:	2c01      	cmp	r4, #1
   133de:	4602      	mov	r2, r0
   133e0:	d117      	bne.n	13412 <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   133e2:	f7ff ffe3 	bl	133ac <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   133e6:	f3c0 2000 	ubfx	r0, r0, #8, #1
   133ea:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   133ec:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   133ee:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   133f0:	425c      	negs	r4, r3
   133f2:	415c      	adcs	r4, r3
   133f4:	4a0a      	ldr	r2, [pc, #40]	; (13420 <bt_le_scan_set_enable_legacy+0x60>)
   133f6:	9400      	str	r4, [sp, #0]
   133f8:	a903      	add	r1, sp, #12
   133fa:	4628      	mov	r0, r5
   133fc:	2305      	movs	r3, #5
   133fe:	f7ff f811 	bl	12424 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   13402:	2200      	movs	r2, #0
   13404:	4629      	mov	r1, r5
   13406:	f242 000c 	movw	r0, #8204	; 0x200c
   1340a:	f7ff f865 	bl	124d8 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   1340e:	b007      	add	sp, #28
   13410:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   13412:	2300      	movs	r3, #0
   13414:	7043      	strb	r3, [r0, #1]
   13416:	e7e9      	b.n	133ec <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
   13418:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1341c:	e7f7      	b.n	1340e <bt_le_scan_set_enable_legacy+0x4e>
   1341e:	bf00      	nop
   13420:	2000036c 	.word	0x2000036c

00013424 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   13424:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13426:	2300      	movs	r3, #0
   13428:	f88d 3005 	strb.w	r3, [sp, #5]

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   1342c:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   13430:	1e43      	subs	r3, r0, #1
	set_param.scan_type = scan_type;
   13432:	f88d 0000 	strb.w	r0, [sp]
{
   13436:	4605      	mov	r5, r0
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   13438:	4258      	negs	r0, r3
	set_param.interval = sys_cpu_to_le16(interval);
   1343a:	f8ad 1001 	strh.w	r1, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1343e:	4158      	adcs	r0, r3
   13440:	f10d 0105 	add.w	r1, sp, #5
	set_param.window = sys_cpu_to_le16(window);
   13444:	f8ad 2003 	strh.w	r2, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   13448:	f7ff ff8a 	bl	13360 <bt_id_set_scan_own_addr>
	if (err) {
   1344c:	4604      	mov	r4, r0
   1344e:	bb38      	cbnz	r0, 134a0 <start_le_scan_legacy+0x7c>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   13450:	2107      	movs	r1, #7
   13452:	f242 000b 	movw	r0, #8203	; 0x200b
   13456:	f7fe fff7 	bl	12448 <bt_hci_cmd_create>
	if (!buf) {
   1345a:	4606      	mov	r6, r0
   1345c:	b348      	cbz	r0, 134b2 <start_le_scan_legacy+0x8e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1345e:	2207      	movs	r2, #7
   13460:	4669      	mov	r1, sp
   13462:	3008      	adds	r0, #8
   13464:	f00c fccc 	bl	1fe00 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   13468:	4622      	mov	r2, r4
   1346a:	4631      	mov	r1, r6
   1346c:	f242 000b 	movw	r0, #8203	; 0x200b
   13470:	f7ff f832 	bl	124d8 <bt_hci_cmd_send_sync>
	if (err) {
   13474:	4604      	mov	r4, r0
   13476:	b998      	cbnz	r0, 134a0 <start_le_scan_legacy+0x7c>
	return bt_le_scan_set_enable_legacy(enable);
   13478:	2001      	movs	r0, #1
   1347a:	f7ff ffa1 	bl	133c0 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   1347e:	4604      	mov	r4, r0
   13480:	b970      	cbnz	r0, 134a0 <start_le_scan_legacy+0x7c>
	if (val) {
   13482:	2d01      	cmp	r5, #1
   13484:	d10f      	bne.n	134a6 <start_le_scan_legacy+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13486:	f3bf 8f5b 	dmb	ish
   1348a:	4b0b      	ldr	r3, [pc, #44]	; (134b8 <start_le_scan_legacy+0x94>)
   1348c:	e853 2f00 	ldrex	r2, [r3]
   13490:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13494:	e843 2100 	strex	r1, r2, [r3]
   13498:	2900      	cmp	r1, #0
   1349a:	d1f7      	bne.n	1348c <start_le_scan_legacy+0x68>
   1349c:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   134a0:	4620      	mov	r0, r4
   134a2:	b002      	add	sp, #8
   134a4:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   134a6:	f06f 0180 	mvn.w	r1, #128	; 0x80
   134aa:	4803      	ldr	r0, [pc, #12]	; (134b8 <start_le_scan_legacy+0x94>)
   134ac:	f00b f93f 	bl	1e72e <atomic_and>
   134b0:	e7f6      	b.n	134a0 <start_le_scan_legacy+0x7c>
		return -ENOBUFS;
   134b2:	f06f 0468 	mvn.w	r4, #104	; 0x68
   134b6:	e7f3      	b.n	134a0 <start_le_scan_legacy+0x7c>
   134b8:	2000036c 	.word	0x2000036c

000134bc <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   134bc:	4b01      	ldr	r3, [pc, #4]	; (134c4 <bt_scan_reset+0x8>)
   134be:	2200      	movs	r2, #0
   134c0:	601a      	str	r2, [r3, #0]
}
   134c2:	4770      	bx	lr
   134c4:	20001db4 	.word	0x20001db4

000134c8 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   134c8:	b538      	push	{r3, r4, r5, lr}
   134ca:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   134cc:	f7ff ff6e 	bl	133ac <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   134d0:	0641      	lsls	r1, r0, #25
   134d2:	f3c0 1280 	ubfx	r2, r0, #6, #1
   134d6:	d501      	bpl.n	134dc <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
   134d8:	2000      	movs	r0, #0
   134da:	e031      	b.n	13540 <bt_le_scan_update+0x78>
   134dc:	f7ff ff66 	bl	133ac <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   134e0:	0683      	lsls	r3, r0, #26
   134e2:	d428      	bmi.n	13536 <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   134e4:	2100      	movs	r1, #0
   134e6:	2206      	movs	r2, #6
   134e8:	4608      	mov	r0, r1
   134ea:	f000 fdeb 	bl	140c4 <bt_conn_lookup_state_le>
		if (conn) {
   134ee:	4604      	mov	r4, r0
   134f0:	bb38      	cbnz	r0, 13542 <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   134f2:	2202      	movs	r2, #2
   134f4:	4601      	mov	r1, r0
   134f6:	f000 fde5 	bl	140c4 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
   134fa:	2800      	cmp	r0, #0
   134fc:	d0ec      	beq.n	134d8 <bt_le_scan_update+0x10>
   134fe:	f3bf 8f5b 	dmb	ish
   13502:	4b11      	ldr	r3, [pc, #68]	; (13548 <bt_le_scan_update+0x80>)
   13504:	e853 2f00 	ldrex	r2, [r3]
   13508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1350c:	e843 2100 	strex	r1, r2, [r3]
   13510:	2900      	cmp	r1, #0
   13512:	d1f7      	bne.n	13504 <bt_le_scan_update+0x3c>
   13514:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   13518:	f000 fb8c 	bl	13c34 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   1351c:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   1351e:	4620      	mov	r0, r4
   13520:	bf18      	it	ne
   13522:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   13524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   13528:	bf0a      	itet	eq
   1352a:	2212      	moveq	r2, #18
   1352c:	2160      	movne	r1, #96	; 0x60
   1352e:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   13532:	f7ff bf77 	b.w	13424 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   13536:	4610      	mov	r0, r2
   13538:	f7ff ff42 	bl	133c0 <bt_le_scan_set_enable_legacy>
		if (err) {
   1353c:	2800      	cmp	r0, #0
   1353e:	d0d1      	beq.n	134e4 <bt_le_scan_update+0x1c>
}
   13540:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   13542:	f000 fb77 	bl	13c34 <bt_conn_unref>
   13546:	e7c7      	b.n	134d8 <bt_le_scan_update+0x10>
   13548:	2000036c 	.word	0x2000036c

0001354c <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   1354c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   13550:	f100 0708 	add.w	r7, r0, #8
   13554:	b08d      	sub	sp, #52	; 0x34
   13556:	4604      	mov	r4, r0
   13558:	4638      	mov	r0, r7
   1355a:	f00c fc35 	bl	1fdc8 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   1355e:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 13724 <bt_hci_le_adv_report+0x1d8>
   13562:	9001      	str	r0, [sp, #4]
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   13564:	9b01      	ldr	r3, [sp, #4]
   13566:	b913      	cbnz	r3, 1356e <bt_hci_le_adv_report+0x22>

		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   13568:	b00d      	add	sp, #52	; 0x34
   1356a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
   1356e:	89a3      	ldrh	r3, [r4, #12]
   13570:	2b08      	cmp	r3, #8
   13572:	d9f9      	bls.n	13568 <bt_hci_le_adv_report+0x1c>
	return net_buf_simple_pull_mem(&buf->b, len);
   13574:	2109      	movs	r1, #9
   13576:	4638      	mov	r0, r7
   13578:	f003 f892 	bl	166a0 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
   1357c:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   13580:	237f      	movs	r3, #127	; 0x7f
   13582:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
   13586:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   1358a:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   1358c:	7a5b      	ldrb	r3, [r3, #9]
   1358e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
   13592:	23ff      	movs	r3, #255	; 0xff
   13594:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
   13598:	2300      	movs	r3, #0
   1359a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   1359e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
   135a2:	7802      	ldrb	r2, [r0, #0]
   135a4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   135a8:	2a04      	cmp	r2, #4
   135aa:	bf9c      	itt	ls
   135ac:	4b5b      	ldrls	r3, [pc, #364]	; (1371c <bt_hci_le_adv_report+0x1d0>)
   135ae:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props(evt->evt_type);
   135b0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   135b4:	4606      	mov	r6, r0
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
   135b6:	f100 0801 	add.w	r8, r0, #1
   135ba:	f7ff fef7 	bl	133ac <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   135be:	0645      	lsls	r5, r0, #25
   135c0:	d50d      	bpl.n	135de <bt_hci_le_adv_report+0x92>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   135c2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   135c6:	0758      	lsls	r0, r3, #29
   135c8:	d509      	bpl.n	135de <bt_hci_le_adv_report+0x92>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   135ca:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
   135cc:	4638      	mov	r0, r7
   135ce:	3101      	adds	r1, #1
   135d0:	f003 f846 	bl	16660 <net_buf_simple_pull>
   135d4:	9b01      	ldr	r3, [sp, #4]
   135d6:	1e58      	subs	r0, r3, #1
   135d8:	b2c3      	uxtb	r3, r0
   135da:	9301      	str	r3, [sp, #4]
   135dc:	e7c2      	b.n	13564 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   135de:	7873      	ldrb	r3, [r6, #1]
   135e0:	1e9a      	subs	r2, r3, #2
   135e2:	2a01      	cmp	r2, #1
   135e4:	d84e      	bhi.n	13684 <bt_hci_le_adv_report+0x138>
		bt_addr_le_copy(&id_addr, addr);
   135e6:	4641      	mov	r1, r8
   135e8:	a804      	add	r0, sp, #16
   135ea:	f00b f8af 	bl	1e74c <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   135ee:	f89d 3010 	ldrb.w	r3, [sp, #16]
   135f2:	3b02      	subs	r3, #2
   135f4:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
   135f8:	ab04      	add	r3, sp, #16
   135fa:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
   135fc:	f8da 3000 	ldr.w	r3, [sl]
   13600:	b1b3      	cbz	r3, 13630 <bt_hci_le_adv_report+0xe4>
	state->offset = net_buf_simple_headroom(buf);
   13602:	4638      	mov	r0, r7
   13604:	f00c fbf0 	bl	1fde8 <net_buf_simple_headroom>
	state->len = buf->len;
   13608:	89a3      	ldrh	r3, [r4, #12]
   1360a:	9302      	str	r3, [sp, #8]
	state->offset = net_buf_simple_headroom(buf);
   1360c:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
   1360e:	463b      	mov	r3, r7
   13610:	a804      	add	r0, sp, #16
   13612:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   13616:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
   1361a:	f8da 5000 	ldr.w	r5, [sl]
		buf->len = len;
   1361e:	f8a4 900c 	strh.w	r9, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
   13622:	47a8      	blx	r5
	buf->data = buf->__buf + state->offset;
   13624:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   13626:	9b02      	ldr	r3, [sp, #8]
   13628:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1362a:	fa10 f08b 	uxtah	r0, r0, fp
   1362e:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   13630:	4b3b      	ldr	r3, [pc, #236]	; (13720 <bt_hci_le_adv_report+0x1d4>)
   13632:	681b      	ldr	r3, [r3, #0]
   13634:	2b00      	cmp	r3, #0
   13636:	d036      	beq.n	136a6 <bt_hci_le_adv_report+0x15a>
   13638:	f1b3 0208 	subs.w	r2, r3, #8
   1363c:	d033      	beq.n	136a6 <bt_hci_le_adv_report+0x15a>
   1363e:	681d      	ldr	r5, [r3, #0]
   13640:	b105      	cbz	r5, 13644 <bt_hci_le_adv_report+0xf8>
   13642:	3d08      	subs	r5, #8
		if (listener->recv) {
   13644:	6813      	ldr	r3, [r2, #0]
   13646:	9203      	str	r2, [sp, #12]
   13648:	b193      	cbz	r3, 13670 <bt_hci_le_adv_report+0x124>
	state->offset = net_buf_simple_headroom(buf);
   1364a:	4638      	mov	r0, r7
   1364c:	f00c fbcc 	bl	1fde8 <net_buf_simple_headroom>
			listener->recv(info, &buf->b);
   13650:	9a03      	ldr	r2, [sp, #12]
	state->len = buf->len;
   13652:	89a3      	ldrh	r3, [r4, #12]
   13654:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
   13656:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1365a:	4683      	mov	fp, r0
			listener->recv(info, &buf->b);
   1365c:	4639      	mov	r1, r7
   1365e:	a808      	add	r0, sp, #32
	state->len = buf->len;
   13660:	9302      	str	r3, [sp, #8]
   13662:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   13664:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   13666:	9b02      	ldr	r3, [sp, #8]
   13668:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1366a:	fa10 f08b 	uxtah	r0, r0, fp
   1366e:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   13670:	b1cd      	cbz	r5, 136a6 <bt_hci_le_adv_report+0x15a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13672:	f115 0308 	adds.w	r3, r5, #8
   13676:	d002      	beq.n	1367e <bt_hci_le_adv_report+0x132>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13678:	68ab      	ldr	r3, [r5, #8]
   1367a:	b103      	cbz	r3, 1367e <bt_hci_le_adv_report+0x132>
   1367c:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
   1367e:	462a      	mov	r2, r5
   13680:	461d      	mov	r5, r3
   13682:	e7df      	b.n	13644 <bt_hci_le_adv_report+0xf8>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   13684:	2bff      	cmp	r3, #255	; 0xff
   13686:	d108      	bne.n	1369a <bt_hci_le_adv_report+0x14e>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   13688:	2300      	movs	r3, #0
   1368a:	9306      	str	r3, [sp, #24]
   1368c:	a906      	add	r1, sp, #24
   1368e:	f8cd 301b 	str.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
   13692:	a804      	add	r0, sp, #16
   13694:	f00b f85a 	bl	1e74c <bt_addr_le_copy>
   13698:	e7ae      	b.n	135f8 <bt_hci_le_adv_report+0xac>
   1369a:	4641      	mov	r1, r8
   1369c:	2000      	movs	r0, #0
   1369e:	f00b f830 	bl	1e702 <bt_lookup_id_addr>
   136a2:	4601      	mov	r1, r0
   136a4:	e7f5      	b.n	13692 <bt_hci_le_adv_report+0x146>
	check_pending_conn(&id_addr, addr, info->adv_props);
   136a6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   136aa:	f7ff fe7f 	bl	133ac <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   136ae:	0641      	lsls	r1, r0, #25
   136b0:	f3c0 1580 	ubfx	r5, r0, #6, #1
   136b4:	d489      	bmi.n	135ca <bt_hci_le_adv_report+0x7e>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   136b6:	07d2      	lsls	r2, r2, #31
   136b8:	d587      	bpl.n	135ca <bt_hci_le_adv_report+0x7e>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   136ba:	2202      	movs	r2, #2
   136bc:	a904      	add	r1, sp, #16
   136be:	4628      	mov	r0, r5
   136c0:	f000 fd00 	bl	140c4 <bt_conn_lookup_state_le>
	if (!conn) {
   136c4:	4681      	mov	r9, r0
   136c6:	2800      	cmp	r0, #0
   136c8:	f43f af7f 	beq.w	135ca <bt_hci_le_adv_report+0x7e>
   136cc:	f7ff fe6e 	bl	133ac <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   136d0:	0683      	lsls	r3, r0, #26
   136d2:	d410      	bmi.n	136f6 <bt_hci_le_adv_report+0x1aa>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
   136d4:	f109 009e 	add.w	r0, r9, #158	; 0x9e
   136d8:	4641      	mov	r1, r8
   136da:	f00b f837 	bl	1e74c <bt_addr_le_copy>
	if (bt_le_create_conn(conn)) {
   136de:	4648      	mov	r0, r9
   136e0:	f00a fe5e 	bl	1e3a0 <bt_le_create_conn>
   136e4:	b960      	cbnz	r0, 13700 <bt_hci_le_adv_report+0x1b4>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   136e6:	4648      	mov	r0, r9
   136e8:	2106      	movs	r1, #6
   136ea:	f000 fad9 	bl	13ca0 <bt_conn_set_state>
	bt_conn_unref(conn);
   136ee:	4648      	mov	r0, r9
   136f0:	f000 faa0 	bl	13c34 <bt_conn_unref>
	return;
   136f4:	e769      	b.n	135ca <bt_hci_le_adv_report+0x7e>
	return bt_le_scan_set_enable_legacy(enable);
   136f6:	4628      	mov	r0, r5
   136f8:	f7ff fe62 	bl	133c0 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   136fc:	2800      	cmp	r0, #0
   136fe:	d0e9      	beq.n	136d4 <bt_hci_le_adv_report+0x188>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   13700:	231f      	movs	r3, #31
   13702:	f889 3009 	strb.w	r3, [r9, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13706:	2100      	movs	r1, #0
   13708:	4648      	mov	r0, r9
   1370a:	f000 fac9 	bl	13ca0 <bt_conn_set_state>
	bt_conn_unref(conn);
   1370e:	4648      	mov	r0, r9
   13710:	f000 fa90 	bl	13c34 <bt_conn_unref>
	bt_le_scan_update(false);
   13714:	2000      	movs	r0, #0
   13716:	f7ff fed7 	bl	134c8 <bt_le_scan_update>
   1371a:	e756      	b.n	135ca <bt_hci_le_adv_report+0x7e>
   1371c:	000220d5 	.word	0x000220d5
   13720:	20001dac 	.word	0x20001dac
   13724:	20001db4 	.word	0x20001db4

00013728 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   13728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1372c:	4605      	mov	r5, r0
   1372e:	460f      	mov	r7, r1
   13730:	f7ff fe3c 	bl	133ac <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13734:	0780      	lsls	r0, r0, #30
   13736:	d56f      	bpl.n	13818 <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   13738:	782a      	ldrb	r2, [r5, #0]
   1373a:	2a01      	cmp	r2, #1
   1373c:	d904      	bls.n	13748 <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   1373e:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   13742:	4620      	mov	r0, r4
   13744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   13748:	686b      	ldr	r3, [r5, #4]
   1374a:	f033 030f 	bics.w	r3, r3, #15
   1374e:	d1f6      	bne.n	1373e <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   13750:	8928      	ldrh	r0, [r5, #8]
   13752:	1f03      	subs	r3, r0, #4
   13754:	b29b      	uxth	r3, r3
   13756:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   1375a:	42a3      	cmp	r3, r4
   1375c:	d8ef      	bhi.n	1373e <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   1375e:	8969      	ldrh	r1, [r5, #10]
   13760:	1f0b      	subs	r3, r1, #4
   13762:	b29b      	uxth	r3, r3
   13764:	42a3      	cmp	r3, r4
   13766:	d8ea      	bhi.n	1373e <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   13768:	4288      	cmp	r0, r1
   1376a:	d3e8      	bcc.n	1373e <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
   1376c:	b99a      	cbnz	r2, 13796 <bt_le_scan_start+0x6e>
   1376e:	f3bf 8f5b 	dmb	ish
   13772:	4e2b      	ldr	r6, [pc, #172]	; (13820 <bt_le_scan_start+0xf8>)
   13774:	e856 0f00 	ldrex	r0, [r6]
   13778:	f040 0340 	orr.w	r3, r0, #64	; 0x40
   1377c:	e846 3200 	strex	r2, r3, [r6]
   13780:	2a00      	cmp	r2, #0
   13782:	d1f7      	bne.n	13774 <bt_le_scan_start+0x4c>
   13784:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   13788:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   1378c:	46b0      	mov	r8, r6
   1378e:	d007      	beq.n	137a0 <bt_le_scan_start+0x78>
		return -EALREADY;
   13790:	f06f 0477 	mvn.w	r4, #119	; 0x77
   13794:	e7d5      	b.n	13742 <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
   13796:	f00a ffc8 	bl	1e72a <bt_id_scan_random_addr_check>
   1379a:	2800      	cmp	r0, #0
   1379c:	d1e7      	bne.n	1376e <bt_le_scan_start+0x46>
   1379e:	e7ce      	b.n	1373e <bt_le_scan_start+0x16>
   137a0:	f7ff fe04 	bl	133ac <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   137a4:	0681      	lsls	r1, r0, #26
   137a6:	d50a      	bpl.n	137be <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
   137a8:	4610      	mov	r0, r2
   137aa:	f7ff fe09 	bl	133c0 <bt_le_scan_set_enable_legacy>
		if (err) {
   137ae:	4604      	mov	r4, r0
   137b0:	b128      	cbz	r0, 137be <bt_le_scan_start+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   137b2:	f06f 0140 	mvn.w	r1, #64	; 0x40
   137b6:	4630      	mov	r0, r6
   137b8:	f00a ffb9 	bl	1e72e <atomic_and>
		return err;
   137bc:	e7c1      	b.n	13742 <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   137be:	686b      	ldr	r3, [r5, #4]
	if (val) {
   137c0:	07db      	lsls	r3, r3, #31
   137c2:	d515      	bpl.n	137f0 <bt_le_scan_start+0xc8>
   137c4:	f3bf 8f5b 	dmb	ish
   137c8:	e858 3f00 	ldrex	r3, [r8]
   137cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   137d0:	e848 3200 	strex	r2, r3, [r8]
   137d4:	2a00      	cmp	r2, #0
   137d6:	d1f7      	bne.n	137c8 <bt_le_scan_start+0xa0>
   137d8:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   137dc:	89ab      	ldrh	r3, [r5, #12]
   137de:	b16b      	cbz	r3, 137fc <bt_le_scan_start+0xd4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   137e0:	480f      	ldr	r0, [pc, #60]	; (13820 <bt_le_scan_start+0xf8>)
   137e2:	f06f 0140 	mvn.w	r1, #64	; 0x40
   137e6:	f00a ffa2 	bl	1e72e <atomic_and>
			return -ENOTSUP;
   137ea:	f06f 0485 	mvn.w	r4, #133	; 0x85
   137ee:	e7a8      	b.n	13742 <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   137f0:	f46f 7180 	mvn.w	r1, #256	; 0x100
   137f4:	480a      	ldr	r0, [pc, #40]	; (13820 <bt_le_scan_start+0xf8>)
   137f6:	f00a ff9a 	bl	1e72e <atomic_and>
   137fa:	e7ef      	b.n	137dc <bt_le_scan_start+0xb4>
		err = start_le_scan_legacy(param->type, param->interval,
   137fc:	896a      	ldrh	r2, [r5, #10]
   137fe:	8929      	ldrh	r1, [r5, #8]
   13800:	7828      	ldrb	r0, [r5, #0]
   13802:	f7ff fe0f 	bl	13424 <start_le_scan_legacy>
	if (err) {
   13806:	4604      	mov	r4, r0
   13808:	b118      	cbz	r0, 13812 <bt_le_scan_start+0xea>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1380a:	4805      	ldr	r0, [pc, #20]	; (13820 <bt_le_scan_start+0xf8>)
   1380c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   13810:	e7d2      	b.n	137b8 <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
   13812:	4b04      	ldr	r3, [pc, #16]	; (13824 <bt_le_scan_start+0xfc>)
   13814:	601f      	str	r7, [r3, #0]
	return 0;
   13816:	e794      	b.n	13742 <bt_le_scan_start+0x1a>
		return -EAGAIN;
   13818:	f06f 040a 	mvn.w	r4, #10
   1381c:	e791      	b.n	13742 <bt_le_scan_start+0x1a>
   1381e:	bf00      	nop
   13820:	2000036c 	.word	0x2000036c
   13824:	20001db4 	.word	0x20001db4

00013828 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   13828:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1382a:	4808      	ldr	r0, [pc, #32]	; (1384c <bt_le_scan_stop+0x24>)
   1382c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   13830:	f00a ff7d 	bl	1e72e <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   13834:	0643      	lsls	r3, r0, #25
   13836:	d506      	bpl.n	13846 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   13838:	4b05      	ldr	r3, [pc, #20]	; (13850 <bt_le_scan_stop+0x28>)
   1383a:	2000      	movs	r0, #0
   1383c:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   1383e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   13842:	f7ff be41 	b.w	134c8 <bt_le_scan_update>
}
   13846:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1384a:	bd08      	pop	{r3, pc}
   1384c:	2000036c 	.word	0x2000036c
   13850:	20001db4 	.word	0x20001db4

00013854 <bt_le_scan_cb_register>:
	parent->next = child;
   13854:	2300      	movs	r3, #0
   13856:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   13858:	4b05      	ldr	r3, [pc, #20]	; (13870 <bt_le_scan_cb_register+0x1c>)
   1385a:	6859      	ldr	r1, [r3, #4]

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   1385c:	f100 0208 	add.w	r2, r0, #8
   13860:	b911      	cbnz	r1, 13868 <bt_le_scan_cb_register+0x14>
	list->head = node;
   13862:	e9c3 2200 	strd	r2, r2, [r3]
}
   13866:	4770      	bx	lr
	parent->next = child;
   13868:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1386a:	605a      	str	r2, [r3, #4]
}
   1386c:	4770      	bx	lr
   1386e:	bf00      	nop
   13870:	20001dac 	.word	0x20001dac

00013874 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   13874:	2300      	movs	r3, #0
	tx->user_data = NULL;
   13876:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   1387a:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   1387c:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1387e:	4801      	ldr	r0, [pc, #4]	; (13884 <tx_free+0x10>)
   13880:	f00c bf9a 	b.w	207b8 <k_queue_append>
   13884:	200006b8 	.word	0x200006b8

00013888 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   13888:	4b19      	ldr	r3, [pc, #100]	; (138f0 <notify_connected+0x68>)
{
   1388a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   1388e:	681d      	ldr	r5, [r3, #0]
{
   13890:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   13892:	b9ed      	cbnz	r5, 138d0 <notify_connected+0x48>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13894:	4e17      	ldr	r6, [pc, #92]	; (138f4 <notify_connected+0x6c>)
   13896:	4d18      	ldr	r5, [pc, #96]	; (138f8 <notify_connected+0x70>)
   13898:	4f18      	ldr	r7, [pc, #96]	; (138fc <notify_connected+0x74>)
   1389a:	46b0      	mov	r8, r6
   1389c:	42b5      	cmp	r5, r6
   1389e:	d90e      	bls.n	138be <notify_connected+0x36>
   138a0:	4917      	ldr	r1, [pc, #92]	; (13900 <notify_connected+0x78>)
   138a2:	4818      	ldr	r0, [pc, #96]	; (13904 <notify_connected+0x7c>)
   138a4:	f240 43fd 	movw	r3, #1277	; 0x4fd
   138a8:	463a      	mov	r2, r7
   138aa:	f009 ff83 	bl	1d7b4 <printk>
   138ae:	4816      	ldr	r0, [pc, #88]	; (13908 <notify_connected+0x80>)
   138b0:	f009 ff80 	bl	1d7b4 <printk>
   138b4:	f240 41fd 	movw	r1, #1277	; 0x4fd
   138b8:	4638      	mov	r0, r7
   138ba:	f00a f9d5 	bl	1dc68 <assert_post_action>
   138be:	4545      	cmp	r5, r8
   138c0:	d30d      	bcc.n	138de <notify_connected+0x56>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   138c2:	7a63      	ldrb	r3, [r4, #9]
   138c4:	b993      	cbnz	r3, 138ec <notify_connected+0x64>
		bt_gatt_connected(conn);
   138c6:	4620      	mov	r0, r4
	}
}
   138c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_gatt_connected(conn);
   138cc:	f002 bb4e 	b.w	15f6c <bt_gatt_connected>
		if (cb->connected) {
   138d0:	682b      	ldr	r3, [r5, #0]
   138d2:	b113      	cbz	r3, 138da <notify_connected+0x52>
			cb->connected(conn, conn->err);
   138d4:	7a61      	ldrb	r1, [r4, #9]
   138d6:	4620      	mov	r0, r4
   138d8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   138da:	692d      	ldr	r5, [r5, #16]
   138dc:	e7d9      	b.n	13892 <notify_connected+0xa>
		if (cb->connected) {
   138de:	682b      	ldr	r3, [r5, #0]
   138e0:	b113      	cbz	r3, 138e8 <notify_connected+0x60>
			cb->connected(conn, conn->err);
   138e2:	7a61      	ldrb	r1, [r4, #9]
   138e4:	4620      	mov	r0, r4
   138e6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   138e8:	3514      	adds	r5, #20
   138ea:	e7d7      	b.n	1389c <notify_connected+0x14>
}
   138ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138f0:	20001db8 	.word	0x20001db8
   138f4:	00020f5c 	.word	0x00020f5c
   138f8:	00020f5c 	.word	0x00020f5c
   138fc:	000220da 	.word	0x000220da
   13900:	0002210a 	.word	0x0002210a
   13904:	00021650 	.word	0x00021650
   13908:	00022125 	.word	0x00022125

0001390c <send_frag>:
{
   1390c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   13910:	694d      	ldr	r5, [r1, #20]
{
   13912:	4604      	mov	r4, r0
   13914:	460e      	mov	r6, r1
   13916:	4691      	mov	r9, r2
   13918:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   1391a:	f04f 33ff 	mov.w	r3, #4294967295
   1391e:	4847      	ldr	r0, [pc, #284]	; (13a3c <send_frag+0x130>)
   13920:	f04f 32ff 	mov.w	r2, #4294967295
   13924:	f006 fb90 	bl	1a048 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   13928:	7aa3      	ldrb	r3, [r4, #10]
   1392a:	2b07      	cmp	r3, #7
   1392c:	d146      	bne.n	139bc <send_frag+0xb0>
	__asm__ volatile(
   1392e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13932:	f3ef 8211 	mrs	r2, BASEPRI
   13936:	f383 8812 	msr	BASEPRI_MAX, r3
   1393a:	f3bf 8f6f 	isb	sy
	if (tx) {
   1393e:	2d00      	cmp	r5, #0
   13940:	d04e      	beq.n	139e0 <send_frag+0xd4>
	parent->next = child;
   13942:	2300      	movs	r3, #0
   13944:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   13946:	69a3      	ldr	r3, [r4, #24]
   13948:	2b00      	cmp	r3, #0
   1394a:	d146      	bne.n	139da <send_frag+0xce>
	list->head = node;
   1394c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   13950:	f382 8811 	msr	BASEPRI, r2
   13954:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   13958:	2104      	movs	r1, #4
   1395a:	f106 0008 	add.w	r0, r6, #8
   1395e:	f002 fe5d 	bl	1661c <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   13962:	8823      	ldrh	r3, [r4, #0]
   13964:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   13968:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1396c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1396e:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   13972:	3b04      	subs	r3, #4
   13974:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13976:	2302      	movs	r3, #2
   13978:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   1397a:	4630      	mov	r0, r6
   1397c:	f7ff f850 	bl	12a20 <bt_send>
	if (err) {
   13980:	2800      	cmp	r0, #0
   13982:	d058      	beq.n	13a36 <send_frag+0x12a>
	__asm__ volatile(
   13984:	f04f 0340 	mov.w	r3, #64	; 0x40
   13988:	f3ef 8911 	mrs	r9, BASEPRI
   1398c:	f383 8812 	msr	BASEPRI_MAX, r3
   13990:	f3bf 8f6f 	isb	sy
		if (tx) {
   13994:	2d00      	cmp	r5, #0
   13996:	d039      	beq.n	13a0c <send_frag+0x100>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13998:	6963      	ldr	r3, [r4, #20]
   1399a:	2200      	movs	r2, #0
   1399c:	b153      	cbz	r3, 139b4 <send_frag+0xa8>
   1399e:	429d      	cmp	r5, r3
   139a0:	d131      	bne.n	13a06 <send_frag+0xfa>
Z_GENLIST_REMOVE(slist, snode)
   139a2:	682b      	ldr	r3, [r5, #0]
   139a4:	bb4a      	cbnz	r2, 139fa <send_frag+0xee>
   139a6:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   139a8:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   139aa:	4295      	cmp	r5, r2
   139ac:	d100      	bne.n	139b0 <send_frag+0xa4>
	list->tail = node;
   139ae:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   139b0:	2300      	movs	r3, #0
   139b2:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   139b4:	f389 8811 	msr	BASEPRI, r9
   139b8:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   139bc:	481f      	ldr	r0, [pc, #124]	; (13a3c <send_frag+0x130>)
   139be:	f006 faff 	bl	19fc0 <z_impl_k_sem_give>
	if (tx) {
   139c2:	b115      	cbz	r5, 139ca <send_frag+0xbe>
		tx_free(tx);
   139c4:	4628      	mov	r0, r5
   139c6:	f7ff ff55 	bl	13874 <tx_free>
	if (always_consume) {
   139ca:	b11f      	cbz	r7, 139d4 <send_frag+0xc8>
		net_buf_unref(buf);
   139cc:	4630      	mov	r0, r6
   139ce:	f002 fd59 	bl	16484 <net_buf_unref>
	return false;
   139d2:	2700      	movs	r7, #0
}
   139d4:	4638      	mov	r0, r7
   139d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   139da:	601d      	str	r5, [r3, #0]
	list->tail = node;
   139dc:	61a5      	str	r5, [r4, #24]
}
   139de:	e7b7      	b.n	13950 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   139e0:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   139e2:	b133      	cbz	r3, 139f2 <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
   139e4:	f103 080c 	add.w	r8, r3, #12
   139e8:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   139ea:	3301      	adds	r3, #1
   139ec:	f8c8 3000 	str.w	r3, [r8]
   139f0:	e7ae      	b.n	13950 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   139f2:	69e3      	ldr	r3, [r4, #28]
   139f4:	f104 081c 	add.w	r8, r4, #28
   139f8:	e7f7      	b.n	139ea <send_frag+0xde>
	parent->next = child;
   139fa:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   139fc:	69a3      	ldr	r3, [r4, #24]
   139fe:	429d      	cmp	r5, r3
	list->tail = node;
   13a00:	bf08      	it	eq
   13a02:	61a2      	streq	r2, [r4, #24]
}
   13a04:	e7d4      	b.n	139b0 <send_frag+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13a06:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13a08:	681b      	ldr	r3, [r3, #0]
   13a0a:	e7c7      	b.n	1399c <send_frag+0x90>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   13a0c:	f8d8 3000 	ldr.w	r3, [r8]
   13a10:	b95b      	cbnz	r3, 13a2a <send_frag+0x11e>
   13a12:	490b      	ldr	r1, [pc, #44]	; (13a40 <send_frag+0x134>)
   13a14:	480b      	ldr	r0, [pc, #44]	; (13a44 <send_frag+0x138>)
   13a16:	4a0c      	ldr	r2, [pc, #48]	; (13a48 <send_frag+0x13c>)
   13a18:	f240 2307 	movw	r3, #519	; 0x207
   13a1c:	f009 feca 	bl	1d7b4 <printk>
   13a20:	4809      	ldr	r0, [pc, #36]	; (13a48 <send_frag+0x13c>)
   13a22:	f240 2107 	movw	r1, #519	; 0x207
   13a26:	f00a f91f 	bl	1dc68 <assert_post_action>
			(*pending_no_cb)--;
   13a2a:	f8d8 3000 	ldr.w	r3, [r8]
   13a2e:	3b01      	subs	r3, #1
   13a30:	f8c8 3000 	str.w	r3, [r8]
   13a34:	e7be      	b.n	139b4 <send_frag+0xa8>
	return true;
   13a36:	2701      	movs	r7, #1
   13a38:	e7cc      	b.n	139d4 <send_frag+0xc8>
   13a3a:	bf00      	nop
   13a3c:	200003a0 	.word	0x200003a0
   13a40:	00022144 	.word	0x00022144
   13a44:	00021650 	.word	0x00021650
   13a48:	000220da 	.word	0x000220da

00013a4c <bt_conn_get_pkts>:
}
   13a4c:	4800      	ldr	r0, [pc, #0]	; (13a50 <bt_conn_get_pkts+0x4>)
   13a4e:	4770      	bx	lr
   13a50:	200003a0 	.word	0x200003a0

00013a54 <bt_conn_new>:
{
   13a54:	b538      	push	{r3, r4, r5, lr}
   13a56:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   13a58:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13a5a:	2501      	movs	r5, #1
   13a5c:	428b      	cmp	r3, r1
   13a5e:	d102      	bne.n	13a66 <bt_conn_new+0x12>
		return NULL;
   13a60:	2400      	movs	r4, #0
}
   13a62:	4620      	mov	r0, r4
   13a64:	bd38      	pop	{r3, r4, r5, pc}
   13a66:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   13a6a:	f3bf 8f5b 	dmb	ish
   13a6e:	e852 0f00 	ldrex	r0, [r2]
   13a72:	2800      	cmp	r0, #0
   13a74:	d104      	bne.n	13a80 <bt_conn_new+0x2c>
   13a76:	e842 5c00 	strex	ip, r5, [r2]
   13a7a:	f1bc 0f00 	cmp.w	ip, #0
   13a7e:	d1f6      	bne.n	13a6e <bt_conn_new+0x1a>
   13a80:	f3bf 8f5b 	dmb	ish
   13a84:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   13a88:	d002      	beq.n	13a90 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   13a8a:	3301      	adds	r3, #1
   13a8c:	4604      	mov	r4, r0
   13a8e:	e7e5      	b.n	13a5c <bt_conn_new+0x8>
	if (!conn) {
   13a90:	2c00      	cmp	r4, #0
   13a92:	d0e6      	beq.n	13a62 <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   13a94:	22c0      	movs	r2, #192	; 0xc0
   13a96:	2100      	movs	r1, #0
   13a98:	4620      	mov	r0, r4
   13a9a:	f00c fff4 	bl	20a86 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   13a9e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   13aa2:	4904      	ldr	r1, [pc, #16]	; (13ab4 <bt_conn_new+0x60>)
   13aa4:	f006 fe64 	bl	1a770 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   13aa8:	4903      	ldr	r1, [pc, #12]	; (13ab8 <bt_conn_new+0x64>)
   13aaa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   13aae:	f006 fd5b 	bl	1a568 <k_work_init>
	return conn;
   13ab2:	e7d6      	b.n	13a62 <bt_conn_new+0xe>
   13ab4:	0001428d 	.word	0x0001428d
   13ab8:	0001e7bb 	.word	0x0001e7bb

00013abc <conn_cleanup>:
{
   13abc:	b570      	push	{r4, r5, r6, lr}
   13abe:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   13ac0:	f100 0638 	add.w	r6, r0, #56	; 0x38
   13ac4:	2200      	movs	r2, #0
   13ac6:	2300      	movs	r3, #0
   13ac8:	4630      	mov	r0, r6
   13aca:	f002 fc49 	bl	16360 <net_buf_get>
   13ace:	4605      	mov	r5, r0
   13ad0:	bb48      	cbnz	r0, 13b26 <conn_cleanup+0x6a>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   13ad2:	6963      	ldr	r3, [r4, #20]
   13ad4:	b173      	cbz	r3, 13af4 <conn_cleanup+0x38>
   13ad6:	4918      	ldr	r1, [pc, #96]	; (13b38 <conn_cleanup+0x7c>)
   13ad8:	4a18      	ldr	r2, [pc, #96]	; (13b3c <conn_cleanup+0x80>)
   13ada:	4819      	ldr	r0, [pc, #100]	; (13b40 <conn_cleanup+0x84>)
   13adc:	f240 238a 	movw	r3, #650	; 0x28a
   13ae0:	f009 fe68 	bl	1d7b4 <printk>
   13ae4:	4817      	ldr	r0, [pc, #92]	; (13b44 <conn_cleanup+0x88>)
   13ae6:	f009 fe65 	bl	1d7b4 <printk>
   13aea:	4814      	ldr	r0, [pc, #80]	; (13b3c <conn_cleanup+0x80>)
   13aec:	f240 218a 	movw	r1, #650	; 0x28a
   13af0:	f00a f8ba 	bl	1dc68 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   13af4:	69e3      	ldr	r3, [r4, #28]
   13af6:	b15b      	cbz	r3, 13b10 <conn_cleanup+0x54>
   13af8:	4913      	ldr	r1, [pc, #76]	; (13b48 <conn_cleanup+0x8c>)
   13afa:	4811      	ldr	r0, [pc, #68]	; (13b40 <conn_cleanup+0x84>)
   13afc:	4a0f      	ldr	r2, [pc, #60]	; (13b3c <conn_cleanup+0x80>)
   13afe:	f240 238b 	movw	r3, #651	; 0x28b
   13b02:	f009 fe57 	bl	1d7b4 <printk>
   13b06:	480d      	ldr	r0, [pc, #52]	; (13b3c <conn_cleanup+0x80>)
   13b08:	f240 218b 	movw	r1, #651	; 0x28b
   13b0c:	f00a f8ac 	bl	1dc68 <assert_post_action>
	bt_conn_reset_rx_state(conn);
   13b10:	4620      	mov	r0, r4
   13b12:	f00a fe55 	bl	1e7c0 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   13b16:	f104 0060 	add.w	r0, r4, #96	; 0x60
   13b1a:	2200      	movs	r2, #0
}
   13b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   13b20:	2300      	movs	r3, #0
   13b22:	f006 bf49 	b.w	1a9b8 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   13b26:	6968      	ldr	r0, [r5, #20]
   13b28:	b108      	cbz	r0, 13b2e <conn_cleanup+0x72>
			tx_free(tx_data(buf)->tx);
   13b2a:	f7ff fea3 	bl	13874 <tx_free>
		net_buf_unref(buf);
   13b2e:	4628      	mov	r0, r5
   13b30:	f002 fca8 	bl	16484 <net_buf_unref>
   13b34:	e7c6      	b.n	13ac4 <conn_cleanup+0x8>
   13b36:	bf00      	nop
   13b38:	00022157 	.word	0x00022157
   13b3c:	000220da 	.word	0x000220da
   13b40:	00021650 	.word	0x00021650
   13b44:	0002217d 	.word	0x0002217d
   13b48:	00022192 	.word	0x00022192

00013b4c <bt_conn_send_cb>:
{
   13b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b4e:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   13b50:	7a83      	ldrb	r3, [r0, #10]
   13b52:	2b07      	cmp	r3, #7
{
   13b54:	4604      	mov	r4, r0
   13b56:	460d      	mov	r5, r1
   13b58:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   13b5a:	d114      	bne.n	13b86 <bt_conn_send_cb+0x3a>
	if (cb) {
   13b5c:	b312      	cbz	r2, 13ba4 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   13b5e:	f008 f923 	bl	1bda8 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   13b62:	4b13      	ldr	r3, [pc, #76]	; (13bb0 <bt_conn_send_cb+0x64>)
   13b64:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   13b66:	4813      	ldr	r0, [pc, #76]	; (13bb4 <bt_conn_send_cb+0x68>)
   13b68:	bf07      	ittee	eq
   13b6a:	2200      	moveq	r2, #0
   13b6c:	2300      	moveq	r3, #0
   13b6e:	f04f 32ff 	movne.w	r2, #4294967295
   13b72:	f04f 33ff 	movne.w	r3, #4294967295
   13b76:	f006 f9b7 	bl	19ee8 <z_impl_k_queue_get>
		if (!tx) {
   13b7a:	b1a8      	cbz	r0, 13ba8 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   13b7c:	7aa3      	ldrb	r3, [r4, #10]
   13b7e:	2b07      	cmp	r3, #7
   13b80:	d004      	beq.n	13b8c <bt_conn_send_cb+0x40>
			tx_free(tx);
   13b82:	f7ff fe77 	bl	13874 <tx_free>
		return -ENOTCONN;
   13b86:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   13b8a:	e00a      	b.n	13ba2 <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
   13b8c:	2300      	movs	r3, #0
		tx->user_data = user_data;
   13b8e:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   13b92:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   13b94:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   13b96:	f104 0038 	add.w	r0, r4, #56	; 0x38
   13b9a:	4629      	mov	r1, r5
   13b9c:	f002 fc3e 	bl	1641c <net_buf_put>
	return 0;
   13ba0:	2000      	movs	r0, #0
}
   13ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
   13ba4:	614a      	str	r2, [r1, #20]
   13ba6:	e7f6      	b.n	13b96 <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
   13ba8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13bac:	e7f9      	b.n	13ba2 <bt_conn_send_cb+0x56>
   13bae:	bf00      	nop
   13bb0:	20001c40 	.word	0x20001c40
   13bb4:	200006b8 	.word	0x200006b8

00013bb8 <bt_conn_prepare_events>:
{
   13bb8:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   13bba:	4b1b      	ldr	r3, [pc, #108]	; (13c28 <bt_conn_prepare_events+0x70>)
   13bbc:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   13bbe:	2101      	movs	r1, #1
{
   13bc0:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
   13bc2:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   13bc4:	f009 f8ae 	bl	1cd24 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   13bc8:	4b18      	ldr	r3, [pc, #96]	; (13c2c <bt_conn_prepare_events+0x74>)
   13bca:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
   13bce:	f00a fdc4 	bl	1e75a <atomic_get>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   13bd2:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
   13bd6:	4619      	mov	r1, r3
   13bd8:	b908      	cbnz	r0, 13bde <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
   13bda:	2001      	movs	r0, #1
}
   13bdc:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   13bde:	7a9a      	ldrb	r2, [r3, #10]
   13be0:	b99a      	cbnz	r2, 13c0a <bt_conn_prepare_events+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13be2:	f3bf 8f5b 	dmb	ish
   13be6:	1d1a      	adds	r2, r3, #4
   13be8:	e852 0f00 	ldrex	r0, [r2]
   13bec:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
   13bf0:	e842 ce00 	strex	lr, ip, [r2]
   13bf4:	f1be 0f00 	cmp.w	lr, #0
   13bf8:	d1f6      	bne.n	13be8 <bt_conn_prepare_events+0x30>
   13bfa:	f3bf 8f5b 	dmb	ish
   13bfe:	0642      	lsls	r2, r0, #25
   13c00:	d503      	bpl.n	13c0a <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   13c02:	4618      	mov	r0, r3
   13c04:	f7ff ff5a 	bl	13abc <conn_cleanup>
   13c08:	e7e7      	b.n	13bda <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   13c0a:	7a8b      	ldrb	r3, [r1, #10]
   13c0c:	2b07      	cmp	r3, #7
   13c0e:	d1e4      	bne.n	13bda <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   13c10:	4b07      	ldr	r3, [pc, #28]	; (13c30 <bt_conn_prepare_events+0x78>)
   13c12:	4628      	mov	r0, r5
   13c14:	2200      	movs	r2, #0
   13c16:	2104      	movs	r1, #4
   13c18:	f009 f884 	bl	1cd24 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   13c1c:	2301      	movs	r3, #1
   13c1e:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   13c22:	2002      	movs	r0, #2
	return ev_count;
   13c24:	e7da      	b.n	13bdc <bt_conn_prepare_events+0x24>
   13c26:	bf00      	nop
   13c28:	2000046c 	.word	0x2000046c
   13c2c:	200015f0 	.word	0x200015f0
   13c30:	20001628 	.word	0x20001628

00013c34 <bt_conn_unref>:
{
   13c34:	b508      	push	{r3, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13c36:	30c0      	adds	r0, #192	; 0xc0
   13c38:	f3bf 8f5b 	dmb	ish
   13c3c:	e850 3f00 	ldrex	r3, [r0]
   13c40:	1e5a      	subs	r2, r3, #1
   13c42:	e840 2100 	strex	r1, r2, [r0]
   13c46:	2900      	cmp	r1, #0
   13c48:	d1f8      	bne.n	13c3c <bt_conn_unref+0x8>
   13c4a:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   13c4e:	2b00      	cmp	r3, #0
   13c50:	dc10      	bgt.n	13c74 <bt_conn_unref+0x40>
   13c52:	4909      	ldr	r1, [pc, #36]	; (13c78 <bt_conn_unref+0x44>)
   13c54:	4a09      	ldr	r2, [pc, #36]	; (13c7c <bt_conn_unref+0x48>)
   13c56:	480a      	ldr	r0, [pc, #40]	; (13c80 <bt_conn_unref+0x4c>)
   13c58:	f240 4346 	movw	r3, #1094	; 0x446
   13c5c:	f009 fdaa 	bl	1d7b4 <printk>
   13c60:	4808      	ldr	r0, [pc, #32]	; (13c84 <bt_conn_unref+0x50>)
   13c62:	f009 fda7 	bl	1d7b4 <printk>
}
   13c66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(old > 0, "Conn reference counter is 0");
   13c6a:	4804      	ldr	r0, [pc, #16]	; (13c7c <bt_conn_unref+0x48>)
   13c6c:	f240 4146 	movw	r1, #1094	; 0x446
   13c70:	f009 bffa 	b.w	1dc68 <assert_post_action>
}
   13c74:	bd08      	pop	{r3, pc}
   13c76:	bf00      	nop
   13c78:	000221ab 	.word	0x000221ab
   13c7c:	000220da 	.word	0x000220da
   13c80:	00021650 	.word	0x00021650
   13c84:	000221b3 	.word	0x000221b3

00013c88 <bt_conn_lookup_handle>:
{
   13c88:	4602      	mov	r2, r0
   13c8a:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   13c8c:	2101      	movs	r1, #1
   13c8e:	4803      	ldr	r0, [pc, #12]	; (13c9c <bt_conn_lookup_handle+0x14>)
   13c90:	f00a fe0a 	bl	1e8a8 <conn_lookup_handle>
}
   13c94:	2800      	cmp	r0, #0
   13c96:	bf38      	it	cc
   13c98:	2000      	movcc	r0, #0
   13c9a:	bd08      	pop	{r3, pc}
   13c9c:	200015f0 	.word	0x200015f0

00013ca0 <bt_conn_set_state>:
{
   13ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   13ca4:	7a85      	ldrb	r5, [r0, #10]
   13ca6:	428d      	cmp	r5, r1
{
   13ca8:	4604      	mov	r4, r0
	if (conn->state == state) {
   13caa:	d03e      	beq.n	13d2a <bt_conn_set_state+0x8a>
	conn->state = state;
   13cac:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   13cae:	b155      	cbz	r5, 13cc6 <bt_conn_set_state+0x26>
   13cb0:	2d06      	cmp	r5, #6
   13cb2:	d00e      	beq.n	13cd2 <bt_conn_set_state+0x32>
	switch (conn->state) {
   13cb4:	7aa3      	ldrb	r3, [r4, #10]
   13cb6:	2b07      	cmp	r3, #7
   13cb8:	d837      	bhi.n	13d2a <bt_conn_set_state+0x8a>
   13cba:	e8df f003 	tbb	[pc, r3]
   13cbe:	1138      	.short	0x1138
   13cc0:	36363636 	.word	0x36363636
   13cc4:	2877      	.short	0x2877
		if (conn->type != BT_CONN_TYPE_ISO) {
   13cc6:	7883      	ldrb	r3, [r0, #2]
   13cc8:	2b08      	cmp	r3, #8
   13cca:	d0f3      	beq.n	13cb4 <bt_conn_set_state+0x14>
			bt_conn_ref(conn);
   13ccc:	f00a fdd1 	bl	1e872 <bt_conn_ref>
   13cd0:	e7f0      	b.n	13cb4 <bt_conn_set_state+0x14>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13cd2:	7883      	ldrb	r3, [r0, #2]
   13cd4:	2b01      	cmp	r3, #1
   13cd6:	d1ed      	bne.n	13cb4 <bt_conn_set_state+0x14>
			k_work_cancel_delayable(&conn->deferred_work);
   13cd8:	3060      	adds	r0, #96	; 0x60
   13cda:	f006 fe73 	bl	1a9c4 <k_work_cancel_delayable>
   13cde:	e7e9      	b.n	13cb4 <bt_conn_set_state+0x14>
	z_impl_k_sem_give(sem);
   13ce0:	4d51      	ldr	r5, [pc, #324]	; (13e28 <bt_conn_set_state+0x188>)
		tx->pending_no_cb = 0U;
   13ce2:	2600      	movs	r6, #0
	__asm__ volatile(
   13ce4:	f04f 0340 	mov.w	r3, #64	; 0x40
   13ce8:	f3ef 8211 	mrs	r2, BASEPRI
   13cec:	f383 8812 	msr	BASEPRI_MAX, r3
   13cf0:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   13cf4:	69e3      	ldr	r3, [r4, #28]
   13cf6:	2b00      	cmp	r3, #0
   13cf8:	d075      	beq.n	13de6 <bt_conn_set_state+0x146>
			conn->pending_no_cb--;
   13cfa:	3b01      	subs	r3, #1
   13cfc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   13cfe:	f382 8811 	msr	BASEPRI, r2
   13d02:	f3bf 8f6f 	isb	sy
   13d06:	4628      	mov	r0, r5
   13d08:	f006 f95a 	bl	19fc0 <z_impl_k_sem_give>
}
   13d0c:	e7ea      	b.n	13ce4 <bt_conn_set_state+0x44>
		if (conn->type == BT_CONN_TYPE_SCO) {
   13d0e:	78a3      	ldrb	r3, [r4, #2]
   13d10:	2b04      	cmp	r3, #4
   13d12:	d00a      	beq.n	13d2a <bt_conn_set_state+0x8a>
	z_impl_k_queue_init(queue);
   13d14:	f104 0038 	add.w	r0, r4, #56	; 0x38
   13d18:	f00c fd41 	bl	2079e <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   13d1c:	4843      	ldr	r0, [pc, #268]	; (13e2c <bt_conn_set_state+0x18c>)
   13d1e:	2100      	movs	r1, #0
   13d20:	f009 f95c 	bl	1cfdc <z_impl_k_poll_signal_raise>
	list->head = NULL;
   13d24:	2300      	movs	r3, #0
	list->tail = NULL;
   13d26:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
}
   13d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   13d2e:	78a3      	ldrb	r3, [r4, #2]
   13d30:	2b04      	cmp	r3, #4
   13d32:	d104      	bne.n	13d3e <bt_conn_set_state+0x9e>
			bt_conn_unref(conn);
   13d34:	4620      	mov	r0, r4
}
   13d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
   13d3a:	f7ff bf7b 	b.w	13c34 <bt_conn_unref>
		switch (old_state) {
   13d3e:	3d01      	subs	r5, #1
   13d40:	2d05      	cmp	r5, #5
   13d42:	d8f2      	bhi.n	13d2a <bt_conn_set_state+0x8a>
   13d44:	a301      	add	r3, pc, #4	; (adr r3, 13d4c <bt_conn_set_state+0xac>)
   13d46:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   13d4a:	bf00      	nop
   13d4c:	00013d65 	.word	0x00013d65
   13d50:	00013d9f 	.word	0x00013d9f
   13d54:	00013d35 	.word	0x00013d35
   13d58:	00013d35 	.word	0x00013d35
   13d5c:	00013d9f 	.word	0x00013d9f
   13d60:	00013d9f 	.word	0x00013d9f
			tx_notify(conn);
   13d64:	4620      	mov	r0, r4
   13d66:	f00a fd05 	bl	1e774 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   13d6a:	78a3      	ldrb	r3, [r4, #2]
   13d6c:	2b01      	cmp	r3, #1
   13d6e:	d103      	bne.n	13d78 <bt_conn_set_state+0xd8>
				k_work_cancel_delayable(&conn->deferred_work);
   13d70:	f104 0060 	add.w	r0, r4, #96	; 0x60
   13d74:	f006 fe26 	bl	1a9c4 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13d78:	f3bf 8f5b 	dmb	ish
   13d7c:	3404      	adds	r4, #4
   13d7e:	e854 3f00 	ldrex	r3, [r4]
   13d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13d86:	e844 3200 	strex	r2, r3, [r4]
   13d8a:	2a00      	cmp	r2, #0
   13d8c:	d1f7      	bne.n	13d7e <bt_conn_set_state+0xde>
   13d8e:	f3bf 8f5b 	dmb	ish
   13d92:	4826      	ldr	r0, [pc, #152]	; (13e2c <bt_conn_set_state+0x18c>)
}
   13d94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13d98:	2100      	movs	r1, #0
   13d9a:	f009 b91f 	b.w	1cfdc <z_impl_k_poll_signal_raise>
			if (conn->err) {
   13d9e:	7a63      	ldrb	r3, [r4, #9]
   13da0:	2b00      	cmp	r3, #0
   13da2:	d0c7      	beq.n	13d34 <bt_conn_set_state+0x94>
				notify_connected(conn);
   13da4:	4620      	mov	r0, r4
   13da6:	f7ff fd6f 	bl	13888 <notify_connected>
   13daa:	e7c3      	b.n	13d34 <bt_conn_set_state+0x94>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13dac:	78a3      	ldrb	r3, [r4, #2]
   13dae:	2b01      	cmp	r3, #1
   13db0:	d1bb      	bne.n	13d2a <bt_conn_set_state+0x8a>
					K_MSEC(10 * bt_dev.create_param.timeout));
   13db2:	4b1f      	ldr	r3, [pc, #124]	; (13e30 <bt_conn_set_state+0x190>)
   13db4:	8a9b      	ldrh	r3, [r3, #20]
   13db6:	210a      	movs	r1, #10
   13db8:	4359      	muls	r1, r3
		} else {
			return (t * to_hz + off) / from_hz;
   13dba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   13dbe:	f240 36e7 	movw	r6, #999	; 0x3e7
   13dc2:	2700      	movs	r7, #0
   13dc4:	fbc0 6701 	smlal	r6, r7, r0, r1
   13dc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13dcc:	2300      	movs	r3, #0
   13dce:	4630      	mov	r0, r6
   13dd0:	4639      	mov	r1, r7
   13dd2:	f7ec f9d5 	bl	180 <__aeabi_uldivmod>
   13dd6:	4602      	mov	r2, r0
   13dd8:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   13dda:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   13dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_schedule(&conn->deferred_work,
   13de2:	f006 bd6d 	b.w	1a8c0 <k_work_schedule>
Z_GENLIST_IS_EMPTY(slist)
   13de6:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   13de8:	b128      	cbz	r0, 13df6 <bt_conn_set_state+0x156>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13dea:	69a1      	ldr	r1, [r4, #24]
   13dec:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   13dee:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13df0:	4288      	cmp	r0, r1
	list->tail = node;
   13df2:	bf08      	it	eq
   13df4:	61a3      	streq	r3, [r4, #24]
   13df6:	f382 8811 	msr	BASEPRI, r2
   13dfa:	f3bf 8f6f 	isb	sy
		if (!node) {
   13dfe:	2800      	cmp	r0, #0
   13e00:	d093      	beq.n	13d2a <bt_conn_set_state+0x8a>
	__asm__ volatile(
   13e02:	f04f 0240 	mov.w	r2, #64	; 0x40
   13e06:	f3ef 8311 	mrs	r3, BASEPRI
   13e0a:	f382 8812 	msr	BASEPRI_MAX, r2
   13e0e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   13e12:	68c2      	ldr	r2, [r0, #12]
   13e14:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   13e16:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   13e18:	f383 8811 	msr	BASEPRI, r3
   13e1c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   13e20:	f7ff fd28 	bl	13874 <tx_free>
   13e24:	e76f      	b.n	13d06 <bt_conn_set_state+0x66>
   13e26:	bf00      	nop
   13e28:	200003a0 	.word	0x200003a0
   13e2c:	2000046c 	.word	0x2000046c
   13e30:	200002a0 	.word	0x200002a0

00013e34 <bt_conn_index>:
		index = conn - acl_conns;
   13e34:	4a0c      	ldr	r2, [pc, #48]	; (13e68 <bt_conn_index+0x34>)
{
   13e36:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   13e38:	1a84      	subs	r4, r0, r2
   13e3a:	10e3      	asrs	r3, r4, #3
   13e3c:	4c0b      	ldr	r4, [pc, #44]	; (13e6c <bt_conn_index+0x38>)
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   13e3e:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   13e40:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   13e44:	d00e      	beq.n	13e64 <bt_conn_index+0x30>
   13e46:	490a      	ldr	r1, [pc, #40]	; (13e70 <bt_conn_index+0x3c>)
   13e48:	4a0a      	ldr	r2, [pc, #40]	; (13e74 <bt_conn_index+0x40>)
   13e4a:	480b      	ldr	r0, [pc, #44]	; (13e78 <bt_conn_index+0x44>)
   13e4c:	f240 4364 	movw	r3, #1124	; 0x464
   13e50:	f009 fcb0 	bl	1d7b4 <printk>
   13e54:	4809      	ldr	r0, [pc, #36]	; (13e7c <bt_conn_index+0x48>)
   13e56:	f009 fcad 	bl	1d7b4 <printk>
   13e5a:	4806      	ldr	r0, [pc, #24]	; (13e74 <bt_conn_index+0x40>)
   13e5c:	f240 4164 	movw	r1, #1124	; 0x464
   13e60:	f009 ff02 	bl	1dc68 <assert_post_action>
}
   13e64:	b2e0      	uxtb	r0, r4
   13e66:	bd10      	pop	{r4, pc}
   13e68:	200015f0 	.word	0x200015f0
   13e6c:	c28f5c29 	.word	0xc28f5c29
   13e70:	000221d1 	.word	0x000221d1
   13e74:	000220da 	.word	0x000220da
   13e78:	00021650 	.word	0x00021650
   13e7c:	00022298 	.word	0x00022298

00013e80 <bt_conn_create_pdu_timeout>:
{
   13e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e82:	4604      	mov	r4, r0
   13e84:	460d      	mov	r5, r1
   13e86:	4617      	mov	r7, r2
   13e88:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   13e8a:	f00c fc6a 	bl	20762 <k_is_in_isr>
   13e8e:	b158      	cbz	r0, 13ea8 <bt_conn_create_pdu_timeout+0x28>
   13e90:	490d      	ldr	r1, [pc, #52]	; (13ec8 <bt_conn_create_pdu_timeout+0x48>)
   13e92:	480e      	ldr	r0, [pc, #56]	; (13ecc <bt_conn_create_pdu_timeout+0x4c>)
   13e94:	4a0e      	ldr	r2, [pc, #56]	; (13ed0 <bt_conn_create_pdu_timeout+0x50>)
   13e96:	f44f 6390 	mov.w	r3, #1152	; 0x480
   13e9a:	f009 fc8b 	bl	1d7b4 <printk>
   13e9e:	480c      	ldr	r0, [pc, #48]	; (13ed0 <bt_conn_create_pdu_timeout+0x50>)
   13ea0:	f44f 6190 	mov.w	r1, #1152	; 0x480
   13ea4:	f009 fee0 	bl	1dc68 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   13ea8:	480a      	ldr	r0, [pc, #40]	; (13ed4 <bt_conn_create_pdu_timeout+0x54>)
   13eaa:	463a      	mov	r2, r7
   13eac:	2c00      	cmp	r4, #0
   13eae:	bf18      	it	ne
   13eb0:	4620      	movne	r0, r4
   13eb2:	4633      	mov	r3, r6
   13eb4:	f00b ff7d 	bl	1fdb2 <net_buf_alloc_fixed>
	if (!buf) {
   13eb8:	4604      	mov	r4, r0
   13eba:	b118      	cbz	r0, 13ec4 <bt_conn_create_pdu_timeout+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
   13ebc:	1d29      	adds	r1, r5, #4
   13ebe:	3008      	adds	r0, #8
   13ec0:	f002 fa82 	bl	163c8 <net_buf_simple_reserve>
}
   13ec4:	4620      	mov	r0, r4
   13ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13ec8:	000222b2 	.word	0x000222b2
   13ecc:	00021650 	.word	0x00021650
   13ed0:	000220da 	.word	0x000220da
   13ed4:	200006d4 	.word	0x200006d4

00013ed8 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   13ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   13edc:	1d03      	adds	r3, r0, #4
{
   13ede:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13ee0:	4618      	mov	r0, r3
   13ee2:	f00a fc3a 	bl	1e75a <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   13ee6:	0582      	lsls	r2, r0, #22
   13ee8:	d519      	bpl.n	13f1e <notify_le_param_updated+0x46>
	    conn->le.interval >= conn->le.interval_min &&
   13eea:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   13eee:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
   13ef2:	4291      	cmp	r1, r2
   13ef4:	d813      	bhi.n	13f1e <notify_le_param_updated+0x46>
	    conn->le.interval >= conn->le.interval_min &&
   13ef6:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   13efa:	4291      	cmp	r1, r2
   13efc:	d30f      	bcc.n	13f1e <notify_le_param_updated+0x46>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   13efe:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
   13f02:	4291      	cmp	r1, r2
   13f04:	d10b      	bne.n	13f1e <notify_le_param_updated+0x46>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13f06:	f3bf 8f5b 	dmb	ish
   13f0a:	e853 2f00 	ldrex	r2, [r3]
   13f0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   13f12:	e843 2100 	strex	r1, r2, [r3]
   13f16:	2900      	cmp	r1, #0
   13f18:	d1f7      	bne.n	13f0a <notify_le_param_updated+0x32>
   13f1a:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   13f1e:	4b1b      	ldr	r3, [pc, #108]	; (13f8c <notify_le_param_updated+0xb4>)
   13f20:	681d      	ldr	r5, [r3, #0]
   13f22:	b9c5      	cbnz	r5, 13f56 <notify_le_param_updated+0x7e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13f24:	4e1a      	ldr	r6, [pc, #104]	; (13f90 <notify_le_param_updated+0xb8>)
   13f26:	4d1b      	ldr	r5, [pc, #108]	; (13f94 <notify_le_param_updated+0xbc>)
   13f28:	4f1b      	ldr	r7, [pc, #108]	; (13f98 <notify_le_param_updated+0xc0>)
   13f2a:	46b1      	mov	r9, r6
   13f2c:	42b5      	cmp	r5, r6
   13f2e:	d90e      	bls.n	13f4e <notify_le_param_updated+0x76>
   13f30:	491a      	ldr	r1, [pc, #104]	; (13f9c <notify_le_param_updated+0xc4>)
   13f32:	481b      	ldr	r0, [pc, #108]	; (13fa0 <notify_le_param_updated+0xc8>)
   13f34:	f240 534b 	movw	r3, #1355	; 0x54b
   13f38:	463a      	mov	r2, r7
   13f3a:	f009 fc3b 	bl	1d7b4 <printk>
   13f3e:	4819      	ldr	r0, [pc, #100]	; (13fa4 <notify_le_param_updated+0xcc>)
   13f40:	f009 fc38 	bl	1d7b4 <printk>
   13f44:	f240 514b 	movw	r1, #1355	; 0x54b
   13f48:	4638      	mov	r0, r7
   13f4a:	f009 fe8d 	bl	1dc68 <assert_post_action>
   13f4e:	454d      	cmp	r5, r9
   13f50:	d30d      	bcc.n	13f6e <notify_le_param_updated+0x96>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   13f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (cb->le_param_updated) {
   13f56:	68ee      	ldr	r6, [r5, #12]
   13f58:	b13e      	cbz	r6, 13f6a <notify_le_param_updated+0x92>
			cb->le_param_updated(conn, conn->le.interval,
   13f5a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   13f5e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   13f62:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   13f66:	4620      	mov	r0, r4
   13f68:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   13f6a:	692d      	ldr	r5, [r5, #16]
   13f6c:	e7d9      	b.n	13f22 <notify_le_param_updated+0x4a>
		if (cb->le_param_updated) {
   13f6e:	f8d5 800c 	ldr.w	r8, [r5, #12]
   13f72:	f1b8 0f00 	cmp.w	r8, #0
   13f76:	d007      	beq.n	13f88 <notify_le_param_updated+0xb0>
			cb->le_param_updated(conn, conn->le.interval,
   13f78:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   13f7c:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   13f80:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   13f84:	4620      	mov	r0, r4
   13f86:	47c0      	blx	r8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13f88:	3514      	adds	r5, #20
   13f8a:	e7cf      	b.n	13f2c <notify_le_param_updated+0x54>
   13f8c:	20001db8 	.word	0x20001db8
   13f90:	00020f5c 	.word	0x00020f5c
   13f94:	00020f5c 	.word	0x00020f5c
   13f98:	000220da 	.word	0x000220da
   13f9c:	0002210a 	.word	0x0002210a
   13fa0:	00021650 	.word	0x00021650
   13fa4:	00022125 	.word	0x00022125

00013fa8 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   13fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13fac:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   13fae:	4608      	mov	r0, r1
{
   13fb0:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   13fb2:	f00a fa12 	bl	1e3da <bt_le_conn_params_valid>
   13fb6:	4605      	mov	r5, r0
   13fb8:	b918      	cbnz	r0, 13fc2 <le_param_req+0x1a>
		return false;
   13fba:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   13fbc:	4628      	mov	r0, r5
   13fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   13fc2:	4b1d      	ldr	r3, [pc, #116]	; (14038 <le_param_req+0x90>)
   13fc4:	681e      	ldr	r6, [r3, #0]
   13fc6:	b9e6      	cbnz	r6, 14002 <le_param_req+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13fc8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1404c <le_param_req+0xa4>
   13fcc:	4e1b      	ldr	r6, [pc, #108]	; (1403c <le_param_req+0x94>)
   13fce:	f8df 9080 	ldr.w	r9, [pc, #128]	; 14050 <le_param_req+0xa8>
   13fd2:	46c2      	mov	sl, r8
   13fd4:	4546      	cmp	r6, r8
   13fd6:	d90e      	bls.n	13ff6 <le_param_req+0x4e>
   13fd8:	4919      	ldr	r1, [pc, #100]	; (14040 <le_param_req+0x98>)
   13fda:	481a      	ldr	r0, [pc, #104]	; (14044 <le_param_req+0x9c>)
   13fdc:	f240 5393 	movw	r3, #1427	; 0x593
   13fe0:	464a      	mov	r2, r9
   13fe2:	f009 fbe7 	bl	1d7b4 <printk>
   13fe6:	4818      	ldr	r0, [pc, #96]	; (14048 <le_param_req+0xa0>)
   13fe8:	f009 fbe4 	bl	1d7b4 <printk>
   13fec:	f240 5193 	movw	r1, #1427	; 0x593
   13ff0:	4648      	mov	r0, r9
   13ff2:	f009 fe39 	bl	1dc68 <assert_post_action>
   13ff6:	4556      	cmp	r6, sl
   13ff8:	d2e0      	bcs.n	13fbc <le_param_req+0x14>
		if (!cb->le_param_req) {
   13ffa:	68b3      	ldr	r3, [r6, #8]
   13ffc:	b983      	cbnz	r3, 14020 <le_param_req+0x78>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13ffe:	3614      	adds	r6, #20
   14000:	e7e8      	b.n	13fd4 <le_param_req+0x2c>
		if (!cb->le_param_req) {
   14002:	68b3      	ldr	r3, [r6, #8]
   14004:	b90b      	cbnz	r3, 1400a <le_param_req+0x62>
	for (cb = callback_list; cb; cb = cb->_next) {
   14006:	6936      	ldr	r6, [r6, #16]
   14008:	e7dd      	b.n	13fc6 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   1400a:	4621      	mov	r1, r4
   1400c:	4638      	mov	r0, r7
   1400e:	4798      	blx	r3
   14010:	2800      	cmp	r0, #0
   14012:	d0d2      	beq.n	13fba <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   14014:	4620      	mov	r0, r4
   14016:	f00a f9e0 	bl	1e3da <bt_le_conn_params_valid>
   1401a:	2800      	cmp	r0, #0
   1401c:	d1f3      	bne.n	14006 <le_param_req+0x5e>
   1401e:	e7cc      	b.n	13fba <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   14020:	4621      	mov	r1, r4
   14022:	4638      	mov	r0, r7
   14024:	4798      	blx	r3
   14026:	2800      	cmp	r0, #0
   14028:	d0c7      	beq.n	13fba <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1402a:	4620      	mov	r0, r4
   1402c:	f00a f9d5 	bl	1e3da <bt_le_conn_params_valid>
   14030:	2800      	cmp	r0, #0
   14032:	d1e4      	bne.n	13ffe <le_param_req+0x56>
   14034:	e7c1      	b.n	13fba <le_param_req+0x12>
   14036:	bf00      	nop
   14038:	20001db8 	.word	0x20001db8
   1403c:	00020f5c 	.word	0x00020f5c
   14040:	0002210a 	.word	0x0002210a
   14044:	00021650 	.word	0x00021650
   14048:	00022125 	.word	0x00022125
   1404c:	00020f5c 	.word	0x00020f5c
   14050:	000220da 	.word	0x000220da

00014054 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   14054:	b538      	push	{r3, r4, r5, lr}
   14056:	4605      	mov	r5, r0
   14058:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1405a:	4809      	ldr	r0, [pc, #36]	; (14080 <bt_conn_add_le+0x2c>)
   1405c:	2101      	movs	r1, #1
   1405e:	f7ff fcf9 	bl	13a54 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   14062:	4602      	mov	r2, r0
   14064:	b148      	cbz	r0, 1407a <bt_conn_add_le+0x26>
		return NULL;
	}

	conn->id = id;
   14066:	7205      	strb	r5, [r0, #8]
	bt_addr_le_copy(&conn->le.dst, peer);
   14068:	4621      	mov	r1, r4
   1406a:	3090      	adds	r0, #144	; 0x90
   1406c:	f00a fb7b 	bl	1e766 <bt_addr_le_copy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   14070:	2301      	movs	r3, #1
   14072:	7093      	strb	r3, [r2, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   14074:	4b03      	ldr	r3, [pc, #12]	; (14084 <bt_conn_add_le+0x30>)
   14076:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1407a:	4610      	mov	r0, r2
   1407c:	bd38      	pop	{r3, r4, r5, pc}
   1407e:	bf00      	nop
   14080:	200015f0 	.word	0x200015f0
   14084:	00280018 	.word	0x00280018

00014088 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   14088:	b570      	push	{r4, r5, r6, lr}
   1408a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1408c:	480c      	ldr	r0, [pc, #48]	; (140c0 <bt_conn_lookup_addr_le+0x38>)
{
   1408e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14090:	f00a fbef 	bl	1e872 <bt_conn_ref>

		if (!conn) {
   14094:	4604      	mov	r4, r0
   14096:	b128      	cbz	r0, 140a4 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   14098:	7883      	ldrb	r3, [r0, #2]
   1409a:	2b01      	cmp	r3, #1
   1409c:	d004      	beq.n	140a8 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   1409e:	f7ff fdc9 	bl	13c34 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   140a2:	2400      	movs	r4, #0
}
   140a4:	4620      	mov	r0, r4
   140a6:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   140a8:	4629      	mov	r1, r5
   140aa:	4632      	mov	r2, r6
   140ac:	f00a fc29 	bl	1e902 <bt_conn_is_peer_addr_le>
   140b0:	4605      	mov	r5, r0
   140b2:	2800      	cmp	r0, #0
   140b4:	d1f6      	bne.n	140a4 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   140b6:	4620      	mov	r0, r4
   140b8:	f7ff fdbc 	bl	13c34 <bt_conn_unref>
	return NULL;
   140bc:	462c      	mov	r4, r5
			continue;
   140be:	e7f1      	b.n	140a4 <bt_conn_lookup_addr_le+0x1c>
   140c0:	200015f0 	.word	0x200015f0

000140c4 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   140c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   140c6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   140c8:	480e      	ldr	r0, [pc, #56]	; (14104 <bt_conn_lookup_state_le+0x40>)
{
   140ca:	460e      	mov	r6, r1
   140cc:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   140ce:	f00a fbd0 	bl	1e872 <bt_conn_ref>

		if (!conn) {
   140d2:	4604      	mov	r4, r0
   140d4:	b1a0      	cbz	r0, 14100 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   140d6:	7883      	ldrb	r3, [r0, #2]
   140d8:	2b01      	cmp	r3, #1
   140da:	d003      	beq.n	140e4 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   140dc:	f7ff fdaa 	bl	13c34 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   140e0:	2400      	movs	r4, #0
			continue;
   140e2:	e00d      	b.n	14100 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   140e4:	b136      	cbz	r6, 140f4 <bt_conn_lookup_state_le+0x30>
   140e6:	4632      	mov	r2, r6
   140e8:	4629      	mov	r1, r5
   140ea:	f00a fc0a 	bl	1e902 <bt_conn_is_peer_addr_le>
   140ee:	b908      	cbnz	r0, 140f4 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   140f0:	4620      	mov	r0, r4
   140f2:	e7f3      	b.n	140dc <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   140f4:	7aa3      	ldrb	r3, [r4, #10]
   140f6:	42bb      	cmp	r3, r7
   140f8:	d1fa      	bne.n	140f0 <bt_conn_lookup_state_le+0x2c>
   140fa:	7a23      	ldrb	r3, [r4, #8]
   140fc:	42ab      	cmp	r3, r5
   140fe:	d1f7      	bne.n	140f0 <bt_conn_lookup_state_le+0x2c>
}
   14100:	4620      	mov	r0, r4
   14102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14104:	200015f0 	.word	0x200015f0

00014108 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   14108:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1410c:	4604      	mov	r4, r0
   1410e:	4843      	ldr	r0, [pc, #268]	; (1421c <bt_conn_le_create+0x114>)
   14110:	460e      	mov	r6, r1
   14112:	4615      	mov	r5, r2
   14114:	461f      	mov	r7, r3
   14116:	f00a fb20 	bl	1e75a <atomic_get>
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1411a:	0781      	lsls	r1, r0, #30
   1411c:	d405      	bmi.n	1412a <bt_conn_le_create+0x22>
		return -EAGAIN;
   1411e:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   14122:	4628      	mov	r0, r5
   14124:	b002      	add	sp, #8
   14126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   1412a:	4610      	mov	r0, r2
   1412c:	f00a f955 	bl	1e3da <bt_le_conn_params_valid>
   14130:	b910      	cbnz	r0, 14138 <bt_conn_le_create+0x30>
		return -EINVAL;
   14132:	f06f 0515 	mvn.w	r5, #21
   14136:	e7f4      	b.n	14122 <bt_conn_le_create+0x1a>
   14138:	4838      	ldr	r0, [pc, #224]	; (1421c <bt_conn_le_create+0x114>)
   1413a:	f00a fb0e 	bl	1e75a <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1413e:	0642      	lsls	r2, r0, #25
   14140:	d4ed      	bmi.n	1411e <bt_conn_le_create+0x16>
   14142:	4836      	ldr	r0, [pc, #216]	; (1421c <bt_conn_le_create+0x114>)
   14144:	f00a fb09 	bl	1e75a <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   14148:	0503      	lsls	r3, r0, #20
   1414a:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   1414e:	d45e      	bmi.n	1420e <bt_conn_le_create+0x106>
	if (!bt_id_scan_random_addr_check()) {
   14150:	f00a faeb 	bl	1e72a <bt_id_scan_random_addr_check>
   14154:	2800      	cmp	r0, #0
   14156:	d0ec      	beq.n	14132 <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   14158:	4621      	mov	r1, r4
   1415a:	4640      	mov	r0, r8
   1415c:	f00a fbf1 	bl	1e942 <bt_conn_exists_le>
   14160:	2800      	cmp	r0, #0
   14162:	d1e6      	bne.n	14132 <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   14164:	7823      	ldrb	r3, [r4, #0]
   14166:	3b02      	subs	r3, #2
   14168:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&dst, peer);
   1416a:	4621      	mov	r1, r4
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   1416c:	d846      	bhi.n	141fc <bt_conn_le_create+0xf4>
		bt_addr_le_copy(&dst, peer);
   1416e:	4668      	mov	r0, sp
   14170:	f00a faf9 	bl	1e766 <bt_addr_le_copy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   14174:	f89d 3000 	ldrb.w	r3, [sp]
   14178:	3b02      	subs	r3, #2
   1417a:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   1417e:	4669      	mov	r1, sp
   14180:	2000      	movs	r0, #0
   14182:	f7ff ff67 	bl	14054 <bt_conn_add_le>
	if (!conn) {
   14186:	4604      	mov	r4, r0
   14188:	2800      	cmp	r0, #0
   1418a:	d043      	beq.n	14214 <bt_conn_le_create+0x10c>
	conn->le.interval_min = param->interval_min;
   1418c:	882b      	ldrh	r3, [r5, #0]
   1418e:	f8a0 30a8 	strh.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   14192:	886b      	ldrh	r3, [r5, #2]
   14194:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
	conn->le.latency = param->latency;
   14198:	88ab      	ldrh	r3, [r5, #4]
   1419a:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
	conn->le.timeout = param->timeout;
   1419e:	88eb      	ldrh	r3, [r5, #6]
   141a0:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
	bt_dev.create_param = *param;
   141a4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   141a8:	4d1d      	ldr	r5, [pc, #116]	; (14220 <bt_conn_le_create+0x118>)
   141aa:	f105 0c08 	add.w	ip, r5, #8
   141ae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   141b2:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   141b4:	2b00      	cmp	r3, #0
   141b6:	bf08      	it	eq
   141b8:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   141bc:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   141be:	8a2b      	ldrh	r3, [r5, #16]
   141c0:	462a      	mov	r2, r5
	bt_dev.create_param.interval_coded =
   141c2:	b903      	cbnz	r3, 141c6 <bt_conn_le_create+0xbe>
   141c4:	89ab      	ldrh	r3, [r5, #12]
   141c6:	8213      	strh	r3, [r2, #16]
		(bt_dev.create_param.window_coded != 0) ?
   141c8:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
   141ca:	b903      	cbnz	r3, 141ce <bt_conn_le_create+0xc6>
   141cc:	89d3      	ldrh	r3, [r2, #14]
   141ce:	8253      	strh	r3, [r2, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   141d0:	2106      	movs	r1, #6
   141d2:	4620      	mov	r0, r4
   141d4:	f7ff fd64 	bl	13ca0 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   141d8:	4620      	mov	r0, r4
   141da:	f00a f8e1 	bl	1e3a0 <bt_le_create_conn>
	if (err) {
   141de:	4605      	mov	r5, r0
   141e0:	b198      	cbz	r0, 1420a <bt_conn_le_create+0x102>
		conn->err = 0;
   141e2:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   141e4:	4631      	mov	r1, r6
   141e6:	4620      	mov	r0, r4
		conn->err = 0;
   141e8:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   141ea:	f7ff fd59 	bl	13ca0 <bt_conn_set_state>
		bt_conn_unref(conn);
   141ee:	4620      	mov	r0, r4
   141f0:	f7ff fd20 	bl	13c34 <bt_conn_unref>
		bt_le_scan_update(false);
   141f4:	4630      	mov	r0, r6
   141f6:	f7ff f967 	bl	134c8 <bt_le_scan_update>
		return err;
   141fa:	e792      	b.n	14122 <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   141fc:	f00a fa81 	bl	1e702 <bt_lookup_id_addr>
   14200:	4601      	mov	r1, r0
   14202:	4668      	mov	r0, sp
   14204:	f00a faaf 	bl	1e766 <bt_addr_le_copy>
   14208:	e7b9      	b.n	1417e <bt_conn_le_create+0x76>
	*ret_conn = conn;
   1420a:	603c      	str	r4, [r7, #0]
	return 0;
   1420c:	e789      	b.n	14122 <bt_conn_le_create+0x1a>
		return -EALREADY;
   1420e:	f06f 0577 	mvn.w	r5, #119	; 0x77
   14212:	e786      	b.n	14122 <bt_conn_le_create+0x1a>
		return -ENOMEM;
   14214:	f06f 050b 	mvn.w	r5, #11
   14218:	e783      	b.n	14122 <bt_conn_le_create+0x1a>
   1421a:	bf00      	nop
   1421c:	2000036c 	.word	0x2000036c
   14220:	200002a0 	.word	0x200002a0

00014224 <send_conn_le_param_update>:
{
   14224:	b538      	push	{r3, r4, r5, lr}
   14226:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   14228:	4608      	mov	r0, r1
{
   1422a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1422c:	f00a f8d5 	bl	1e3da <bt_le_conn_params_valid>
   14230:	b338      	cbz	r0, 14282 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   14232:	4b15      	ldr	r3, [pc, #84]	; (14288 <send_conn_le_param_update+0x64>)
   14234:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   14238:	0799      	lsls	r1, r3, #30
   1423a:	d407      	bmi.n	1424c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1423c:	78e3      	ldrb	r3, [r4, #3]
   1423e:	b173      	cbz	r3, 1425e <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   14240:	4629      	mov	r1, r5
   14242:	4620      	mov	r0, r4
}
   14244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   14248:	f000 b9f6 	b.w	14638 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1424c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   14250:	079a      	lsls	r2, r3, #30
   14252:	d5f3      	bpl.n	1423c <send_conn_le_param_update+0x18>
   14254:	1d20      	adds	r0, r4, #4
   14256:	f00a fa80 	bl	1e75a <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1425a:	0543      	lsls	r3, r0, #21
   1425c:	d4ee      	bmi.n	1423c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1425e:	4629      	mov	r1, r5
   14260:	4620      	mov	r0, r4
   14262:	f00a fb76 	bl	1e952 <bt_conn_le_conn_update>
		if (rc == 0) {
   14266:	b958      	cbnz	r0, 14280 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   14268:	882b      	ldrh	r3, [r5, #0]
   1426a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   1426e:	886b      	ldrh	r3, [r5, #2]
   14270:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   14274:	88ab      	ldrh	r3, [r5, #4]
   14276:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1427a:	88eb      	ldrh	r3, [r5, #6]
   1427c:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   14280:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14282:	f06f 0015 	mvn.w	r0, #21
   14286:	e7fb      	b.n	14280 <send_conn_le_param_update+0x5c>
   14288:	200002a0 	.word	0x200002a0

0001428c <deferred_work>:
{
   1428c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   14290:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   14294:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   14296:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   1429a:	2b00      	cmp	r3, #0
   1429c:	d133      	bne.n	14306 <deferred_work+0x7a>
		bt_l2cap_disconnected(conn);
   1429e:	4630      	mov	r0, r6
   142a0:	f00a fbdc 	bl	1ea5c <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   142a4:	4b2f      	ldr	r3, [pc, #188]	; (14364 <deferred_work+0xd8>)
   142a6:	681d      	ldr	r5, [r3, #0]
   142a8:	b9ed      	cbnz	r5, 142e6 <deferred_work+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   142aa:	4f2f      	ldr	r7, [pc, #188]	; (14368 <deferred_work+0xdc>)
   142ac:	4d2f      	ldr	r5, [pc, #188]	; (1436c <deferred_work+0xe0>)
   142ae:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1437c <deferred_work+0xf0>
   142b2:	46b9      	mov	r9, r7
   142b4:	42bd      	cmp	r5, r7
   142b6:	d90e      	bls.n	142d6 <deferred_work+0x4a>
   142b8:	492d      	ldr	r1, [pc, #180]	; (14370 <deferred_work+0xe4>)
   142ba:	482e      	ldr	r0, [pc, #184]	; (14374 <deferred_work+0xe8>)
   142bc:	f240 5312 	movw	r3, #1298	; 0x512
   142c0:	4642      	mov	r2, r8
   142c2:	f009 fa77 	bl	1d7b4 <printk>
   142c6:	482c      	ldr	r0, [pc, #176]	; (14378 <deferred_work+0xec>)
   142c8:	f009 fa74 	bl	1d7b4 <printk>
   142cc:	f240 5112 	movw	r1, #1298	; 0x512
   142d0:	4640      	mov	r0, r8
   142d2:	f009 fcc9 	bl	1dc68 <assert_post_action>
   142d6:	454d      	cmp	r5, r9
   142d8:	d30d      	bcc.n	142f6 <deferred_work+0x6a>
		bt_conn_unref(conn);
   142da:	4630      	mov	r0, r6
   142dc:	f7ff fcaa 	bl	13c34 <bt_conn_unref>
}
   142e0:	b003      	add	sp, #12
   142e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (cb->disconnected) {
   142e6:	686b      	ldr	r3, [r5, #4]
   142e8:	b11b      	cbz	r3, 142f2 <deferred_work+0x66>
			cb->disconnected(conn, conn->err);
   142ea:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   142ee:	4630      	mov	r0, r6
   142f0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   142f2:	692d      	ldr	r5, [r5, #16]
   142f4:	e7d8      	b.n	142a8 <deferred_work+0x1c>
		if (cb->disconnected) {
   142f6:	686b      	ldr	r3, [r5, #4]
   142f8:	b11b      	cbz	r3, 14302 <deferred_work+0x76>
			cb->disconnected(conn, conn->err);
   142fa:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   142fe:	4630      	mov	r0, r6
   14300:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14302:	3514      	adds	r5, #20
   14304:	e7d6      	b.n	142b4 <deferred_work+0x28>
	if (conn->type != BT_CONN_TYPE_LE) {
   14306:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   1430a:	2b01      	cmp	r3, #1
   1430c:	d1e8      	bne.n	142e0 <deferred_work+0x54>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1430e:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   14312:	b913      	cbnz	r3, 1431a <deferred_work+0x8e>
		bt_le_create_conn_cancel();
   14314:	f7fe fb60 	bl	129d8 <bt_le_create_conn_cancel>
		return;
   14318:	e7e2      	b.n	142e0 <deferred_work+0x54>
	if (atomic_test_and_clear_bit(conn->flags,
   1431a:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
   1431e:	f3bf 8f5b 	dmb	ish
   14322:	e855 3f00 	ldrex	r3, [r5]
   14326:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   1432a:	e845 2100 	strex	r1, r2, [r5]
   1432e:	2900      	cmp	r1, #0
   14330:	d1f7      	bne.n	14322 <deferred_work+0x96>
   14332:	f3bf 8f5b 	dmb	ish
   14336:	059b      	lsls	r3, r3, #22
   14338:	d507      	bpl.n	1434a <deferred_work+0xbe>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1433a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1433c:	9300      	str	r3, [sp, #0]
		send_conn_le_param_update(conn, param);
   1433e:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   14340:	6d23      	ldr	r3, [r4, #80]	; 0x50
   14342:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   14344:	4630      	mov	r0, r6
   14346:	f7ff ff6d 	bl	14224 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1434a:	f3bf 8f5b 	dmb	ish
   1434e:	e855 3f00 	ldrex	r3, [r5]
   14352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   14356:	e845 3200 	strex	r2, r3, [r5]
   1435a:	2a00      	cmp	r2, #0
   1435c:	d1f7      	bne.n	1434e <deferred_work+0xc2>
   1435e:	f3bf 8f5b 	dmb	ish
   14362:	e7bd      	b.n	142e0 <deferred_work+0x54>
   14364:	20001db8 	.word	0x20001db8
   14368:	00020f5c 	.word	0x00020f5c
   1436c:	00020f5c 	.word	0x00020f5c
   14370:	0002210a 	.word	0x0002210a
   14374:	00021650 	.word	0x00021650
   14378:	00022125 	.word	0x00022125
   1437c:	000220da 	.word	0x000220da

00014380 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   14380:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   14382:	4801      	ldr	r0, [pc, #4]	; (14388 <bt_conn_create_frag_timeout+0x8>)
   14384:	f7ff bd7c 	b.w	13e80 <bt_conn_create_pdu_timeout>
   14388:	2000072c 	.word	0x2000072c

0001438c <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   1438c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14390:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   14392:	f04f 33ff 	mov.w	r3, #4294967295
   14396:	f04f 32ff 	mov.w	r2, #4294967295
   1439a:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   1439c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1439e:	f7ff ffef 	bl	14380 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   143a2:	7833      	ldrb	r3, [r6, #0]
   143a4:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   143a6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   143a8:	f04f 0600 	mov.w	r6, #0
   143ac:	d005      	beq.n	143ba <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   143ae:	f002 f869 	bl	16484 <net_buf_unref>
		return NULL;
   143b2:	4635      	mov	r5, r6
}
   143b4:	4628      	mov	r0, r5
   143b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   143ba:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   143bc:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   143c0:	4e0c      	ldr	r6, [pc, #48]	; (143f4 <create_frag.isra.0+0x68>)
   143c2:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   143c4:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   143c8:	f00b fd12 	bl	1fdf0 <net_buf_simple_tailroom>
   143cc:	4580      	cmp	r8, r0
   143ce:	d20c      	bcs.n	143ea <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   143d0:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   143d4:	f854 1f08 	ldr.w	r1, [r4, #8]!
   143d8:	4632      	mov	r2, r6
   143da:	4638      	mov	r0, r7
   143dc:	f00b fd10 	bl	1fe00 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   143e0:	4631      	mov	r1, r6
   143e2:	4620      	mov	r0, r4
   143e4:	f002 f93c 	bl	16660 <net_buf_simple_pull>
   143e8:	e7e4      	b.n	143b4 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   143ea:	4638      	mov	r0, r7
   143ec:	f00b fd00 	bl	1fdf0 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   143f0:	b286      	uxth	r6, r0
   143f2:	e7ef      	b.n	143d4 <create_frag.isra.0+0x48>
   143f4:	200002a0 	.word	0x200002a0

000143f8 <bt_conn_process_tx>:
{
   143f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   143fa:	7a83      	ldrb	r3, [r0, #10]
{
   143fc:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   143fe:	b993      	cbnz	r3, 14426 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14400:	f3bf 8f5b 	dmb	ish
   14404:	1d03      	adds	r3, r0, #4
   14406:	e853 2f00 	ldrex	r2, [r3]
   1440a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1440e:	e843 1400 	strex	r4, r1, [r3]
   14412:	2c00      	cmp	r4, #0
   14414:	d1f7      	bne.n	14406 <bt_conn_process_tx+0xe>
   14416:	f3bf 8f5b 	dmb	ish
   1441a:	0653      	lsls	r3, r2, #25
   1441c:	d503      	bpl.n	14426 <bt_conn_process_tx+0x2e>
}
   1441e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   14422:	f7ff bb4b 	b.w	13abc <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   14426:	2200      	movs	r2, #0
   14428:	2300      	movs	r3, #0
   1442a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1442e:	f001 ff97 	bl	16360 <net_buf_get>
	BT_ASSERT(buf);
   14432:	4604      	mov	r4, r0
   14434:	b960      	cbnz	r0, 14450 <bt_conn_process_tx+0x58>
   14436:	4a20      	ldr	r2, [pc, #128]	; (144b8 <bt_conn_process_tx+0xc0>)
   14438:	4920      	ldr	r1, [pc, #128]	; (144bc <bt_conn_process_tx+0xc4>)
   1443a:	4821      	ldr	r0, [pc, #132]	; (144c0 <bt_conn_process_tx+0xc8>)
   1443c:	f240 23df 	movw	r3, #735	; 0x2df
   14440:	f009 f9b8 	bl	1d7b4 <printk>
   14444:	4040      	eors	r0, r0
   14446:	f380 8811 	msr	BASEPRI, r0
   1444a:	f04f 0003 	mov.w	r0, #3
   1444e:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   14450:	4f1c      	ldr	r7, [pc, #112]	; (144c4 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   14452:	89a1      	ldrh	r1, [r4, #12]
   14454:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
   14458:	4291      	cmp	r1, r2
   1445a:	d807      	bhi.n	1446c <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1445c:	2300      	movs	r3, #0
   1445e:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   14460:	4621      	mov	r1, r4
   14462:	4628      	mov	r0, r5
   14464:	f7ff fa52 	bl	1390c <send_frag>
	if (!send_buf(conn, buf)) {
   14468:	b140      	cbz	r0, 1447c <bt_conn_process_tx+0x84>
}
   1446a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   1446c:	f105 060a 	add.w	r6, r5, #10
   14470:	4621      	mov	r1, r4
   14472:	4630      	mov	r0, r6
   14474:	f7ff ff8a 	bl	1438c <create_frag.isra.0>
	if (!frag) {
   14478:	4601      	mov	r1, r0
   1447a:	b920      	cbnz	r0, 14486 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   1447c:	4620      	mov	r0, r4
}
   1447e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   14482:	f001 bfff 	b.w	16484 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   14486:	2301      	movs	r3, #1
   14488:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1448a:	4628      	mov	r0, r5
   1448c:	f7ff fa3e 	bl	1390c <send_frag>
   14490:	2800      	cmp	r0, #0
   14492:	d0f3      	beq.n	1447c <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   14494:	89a2      	ldrh	r2, [r4, #12]
   14496:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
   1449a:	429a      	cmp	r2, r3
   1449c:	d802      	bhi.n	144a4 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   1449e:	2300      	movs	r3, #0
   144a0:	2203      	movs	r2, #3
   144a2:	e7dd      	b.n	14460 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   144a4:	4621      	mov	r1, r4
   144a6:	4630      	mov	r0, r6
   144a8:	f7ff ff70 	bl	1438c <create_frag.isra.0>
		if (!frag) {
   144ac:	4601      	mov	r1, r0
   144ae:	2800      	cmp	r0, #0
   144b0:	d0e4      	beq.n	1447c <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   144b2:	2301      	movs	r3, #1
   144b4:	461a      	mov	r2, r3
   144b6:	e7e8      	b.n	1448a <bt_conn_process_tx+0x92>
   144b8:	000220da 	.word	0x000220da
   144bc:	0002207c 	.word	0x0002207c
   144c0:	00021650 	.word	0x00021650
   144c4:	200002a0 	.word	0x200002a0

000144c8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   144c8:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   144ca:	4914      	ldr	r1, [pc, #80]	; (1451c <bt_conn_init+0x54>)
   144cc:	4814      	ldr	r0, [pc, #80]	; (14520 <bt_conn_init+0x58>)
   144ce:	f00c f973 	bl	207b8 <k_queue_append>
   144d2:	4914      	ldr	r1, [pc, #80]	; (14524 <bt_conn_init+0x5c>)
   144d4:	4812      	ldr	r0, [pc, #72]	; (14520 <bt_conn_init+0x58>)
   144d6:	f00c f96f 	bl	207b8 <k_queue_append>
   144da:	4913      	ldr	r1, [pc, #76]	; (14528 <bt_conn_init+0x60>)
   144dc:	4810      	ldr	r0, [pc, #64]	; (14520 <bt_conn_init+0x58>)
   144de:	f00c f96b 	bl	207b8 <k_queue_append>
	}

	bt_att_init();
   144e2:	f00a ffc9 	bl	1f478 <bt_att_init>

	err = bt_smp_init();
   144e6:	f00b fc61 	bl	1fdac <bt_smp_init>
	if (err) {
   144ea:	4605      	mov	r5, r0
   144ec:	b998      	cbnz	r0, 14516 <bt_conn_init+0x4e>
		return err;
	}

	bt_l2cap_init();
   144ee:	f00a fba7 	bl	1ec40 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   144f2:	480e      	ldr	r0, [pc, #56]	; (1452c <bt_conn_init+0x64>)
   144f4:	f00a f9bd 	bl	1e872 <bt_conn_ref>

			if (!conn) {
   144f8:	4604      	mov	r4, r0
   144fa:	b160      	cbz	r0, 14516 <bt_conn_init+0x4e>
   144fc:	3004      	adds	r0, #4
   144fe:	f00a f92c 	bl	1e75a <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   14502:	07c3      	lsls	r3, r0, #31
   14504:	d504      	bpl.n	14510 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   14506:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   14508:	2102      	movs	r1, #2
   1450a:	4620      	mov	r0, r4
   1450c:	f7ff fbc8 	bl	13ca0 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   14510:	4620      	mov	r0, r4
   14512:	f7ff fb8f 	bl	13c34 <bt_conn_unref>
		}
	}

	return 0;
}
   14516:	4628      	mov	r0, r5
   14518:	bd38      	pop	{r3, r4, r5, pc}
   1451a:	bf00      	nop
   1451c:	20001dbc 	.word	0x20001dbc
   14520:	200006b8 	.word	0x200006b8
   14524:	20001dcc 	.word	0x20001dcc
   14528:	20001ddc 	.word	0x20001ddc
   1452c:	200015f0 	.word	0x200015f0

00014530 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   14530:	4b04      	ldr	r3, [pc, #16]	; (14544 <l2cap_accept+0x14>)
   14532:	6818      	ldr	r0, [r3, #0]
   14534:	b918      	cbnz	r0, 1453e <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   14536:	4a04      	ldr	r2, [pc, #16]	; (14548 <l2cap_accept+0x18>)
   14538:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   1453a:	600b      	str	r3, [r1, #0]

		return 0;
   1453c:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   1453e:	f06f 000b 	mvn.w	r0, #11
}
   14542:	4770      	bx	lr
   14544:	200016b8 	.word	0x200016b8
   14548:	0002112c 	.word	0x0002112c

0001454c <bt_l2cap_connected>:
{
   1454c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14550:	4f32      	ldr	r7, [pc, #200]	; (1461c <bt_l2cap_connected+0xd0>)
   14552:	4e33      	ldr	r6, [pc, #204]	; (14620 <bt_l2cap_connected+0xd4>)
   14554:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 14634 <bt_l2cap_connected+0xe8>
{
   14558:	4604      	mov	r4, r0
   1455a:	46b9      	mov	r9, r7
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1455c:	42be      	cmp	r6, r7
   1455e:	d90e      	bls.n	1457e <bt_l2cap_connected+0x32>
   14560:	4930      	ldr	r1, [pc, #192]	; (14624 <bt_l2cap_connected+0xd8>)
   14562:	4831      	ldr	r0, [pc, #196]	; (14628 <bt_l2cap_connected+0xdc>)
   14564:	f240 1365 	movw	r3, #357	; 0x165
   14568:	4642      	mov	r2, r8
   1456a:	f009 f923 	bl	1d7b4 <printk>
   1456e:	482f      	ldr	r0, [pc, #188]	; (1462c <bt_l2cap_connected+0xe0>)
   14570:	f009 f920 	bl	1d7b4 <printk>
   14574:	f240 1165 	movw	r1, #357	; 0x165
   14578:	4640      	mov	r0, r8
   1457a:	f009 fb75 	bl	1dc68 <assert_post_action>
   1457e:	454e      	cmp	r6, r9
   14580:	d302      	bcc.n	14588 <bt_l2cap_connected+0x3c>
}
   14582:	b002      	add	sp, #8
   14584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
   14588:	6873      	ldr	r3, [r6, #4]
   1458a:	a901      	add	r1, sp, #4
   1458c:	4620      	mov	r0, r4
   1458e:	4798      	blx	r3
   14590:	2800      	cmp	r0, #0
   14592:	db3d      	blt.n	14610 <bt_l2cap_connected+0xc4>
		ch = BT_L2CAP_LE_CHAN(chan);
   14594:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   14596:	8833      	ldrh	r3, [r6, #0]
   14598:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   1459c:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   145a0:	4923      	ldr	r1, [pc, #140]	; (14630 <bt_l2cap_connected+0xe4>)
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   145a2:	f8d6 a008 	ldr.w	sl, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   145a6:	f105 0010 	add.w	r0, r5, #16
   145aa:	f006 f8e1 	bl	1a770 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   145ae:	f3bf 8f5b 	dmb	ish
   145b2:	f105 0368 	add.w	r3, r5, #104	; 0x68
   145b6:	2200      	movs	r2, #0
   145b8:	e853 1f00 	ldrex	r1, [r3]
   145bc:	e843 2000 	strex	r0, r2, [r3]
   145c0:	2800      	cmp	r0, #0
   145c2:	d1f9      	bne.n	145b8 <bt_l2cap_connected+0x6c>
   145c4:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   145c8:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   145ca:	6da2      	ldr	r2, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   145cc:	f105 0308 	add.w	r3, r5, #8
   145d0:	bb02      	cbnz	r2, 14614 <bt_l2cap_connected+0xc8>
	list->head = node;
   145d2:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (chan->ops->connected) {
   145d6:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   145d8:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   145da:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   145dc:	f8c5 a00c 	str.w	sl, [r5, #12]
		if (chan->ops->connected) {
   145e0:	681b      	ldr	r3, [r3, #0]
   145e2:	b103      	cbz	r3, 145e6 <bt_l2cap_connected+0x9a>
			chan->ops->connected(chan);
   145e4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   145e6:	9b01      	ldr	r3, [sp, #4]
   145e8:	f3bf 8f5b 	dmb	ish
   145ec:	3368      	adds	r3, #104	; 0x68
   145ee:	e853 2f00 	ldrex	r2, [r3]
   145f2:	f042 0201 	orr.w	r2, r2, #1
   145f6:	e843 2100 	strex	r1, r2, [r3]
   145fa:	2900      	cmp	r1, #0
   145fc:	d1f7      	bne.n	145ee <bt_l2cap_connected+0xa2>
   145fe:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   14602:	9801      	ldr	r0, [sp, #4]
   14604:	6843      	ldr	r3, [r0, #4]
   14606:	699b      	ldr	r3, [r3, #24]
   14608:	b113      	cbz	r3, 14610 <bt_l2cap_connected+0xc4>
			chan->ops->status(chan, chan->status);
   1460a:	f100 0168 	add.w	r1, r0, #104	; 0x68
   1460e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14610:	360c      	adds	r6, #12
   14612:	e7a3      	b.n	1455c <bt_l2cap_connected+0x10>
	parent->next = child;
   14614:	6013      	str	r3, [r2, #0]
	list->tail = node;
   14616:	65a3      	str	r3, [r4, #88]	; 0x58
}
   14618:	e7dd      	b.n	145d6 <bt_l2cap_connected+0x8a>
   1461a:	bf00      	nop
   1461c:	00020f5c 	.word	0x00020f5c
   14620:	00020f38 	.word	0x00020f38
   14624:	000222f2 	.word	0x000222f2
   14628:	00021650 	.word	0x00021650
   1462c:	00022125 	.word	0x00022125
   14630:	0001ea45 	.word	0x0001ea45
   14634:	000222c1 	.word	0x000222c1

00014638 <bt_l2cap_update_conn_param>:
{
   14638:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1463a:	4b17      	ldr	r3, [pc, #92]	; (14698 <bt_l2cap_update_conn_param+0x60>)
   1463c:	781a      	ldrb	r2, [r3, #0]
   1463e:	3201      	adds	r2, #1
	if (!ident) {
   14640:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   14644:	bf08      	it	eq
   14646:	2201      	moveq	r2, #1
   14648:	701a      	strb	r2, [r3, #0]
{
   1464a:	4606      	mov	r6, r0
   1464c:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1464e:	2208      	movs	r2, #8
   14650:	7819      	ldrb	r1, [r3, #0]
   14652:	2012      	movs	r0, #18
   14654:	f00a f9a9 	bl	1e9aa <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   14658:	4604      	mov	r4, r0
   1465a:	b1d0      	cbz	r0, 14692 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   1465c:	2108      	movs	r1, #8
   1465e:	4408      	add	r0, r1
   14660:	f002 f840 	bl	166e4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   14664:	882b      	ldrh	r3, [r5, #0]
   14666:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   14668:	886b      	ldrh	r3, [r5, #2]
   1466a:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1466c:	88ab      	ldrh	r3, [r5, #4]
   1466e:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   14670:	88eb      	ldrh	r3, [r5, #6]
   14672:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   14674:	2300      	movs	r3, #0
   14676:	9300      	str	r3, [sp, #0]
   14678:	4622      	mov	r2, r4
   1467a:	2105      	movs	r1, #5
   1467c:	4630      	mov	r0, r6
   1467e:	f00a fa06 	bl	1ea8e <bt_l2cap_send_cb>
	if (err) {
   14682:	4605      	mov	r5, r0
   14684:	b110      	cbz	r0, 1468c <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   14686:	4620      	mov	r0, r4
   14688:	f001 fefc 	bl	16484 <net_buf_unref>
}
   1468c:	4628      	mov	r0, r5
   1468e:	b002      	add	sp, #8
   14690:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   14692:	f06f 050b 	mvn.w	r5, #11
   14696:	e7f9      	b.n	1468c <bt_l2cap_update_conn_param+0x54>
   14698:	200020c6 	.word	0x200020c6

0001469c <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   1469c:	4b02      	ldr	r3, [pc, #8]	; (146a8 <att_cfm_sent+0xc>)
   1469e:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   146a2:	f00a bafb 	b.w	1ec9c <att_sent>
   146a6:	bf00      	nop
   146a8:	0001f181 	.word	0x0001f181

000146ac <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   146ac:	4b02      	ldr	r3, [pc, #8]	; (146b8 <att_rsp_sent+0xc>)
   146ae:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   146b2:	f00a baf3 	b.w	1ec9c <att_sent>
   146b6:	bf00      	nop
   146b8:	0001f19d 	.word	0x0001f19d

000146bc <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   146bc:	4b02      	ldr	r3, [pc, #8]	; (146c8 <att_req_sent+0xc>)
   146be:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   146c2:	f00a baeb 	b.w	1ec9c <att_sent>
   146c6:	bf00      	nop
   146c8:	0001f0c5 	.word	0x0001f0c5

000146cc <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   146cc:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   146ce:	3808      	subs	r0, #8
   146d0:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   146d2:	a901      	add	r1, sp, #4
   146d4:	4802      	ldr	r0, [pc, #8]	; (146e0 <bt_att_released+0x14>)
   146d6:	f004 ff4f 	bl	19578 <k_mem_slab_free>
}
   146da:	b003      	add	sp, #12
   146dc:	f85d fb04 	ldr.w	pc, [sp], #4
   146e0:	200005f4 	.word	0x200005f4

000146e4 <read_group_cb>:
{
   146e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   146e8:	4606      	mov	r6, r0
   146ea:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   146ec:	f04f 0800 	mov.w	r8, #0
   146f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   146f4:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   146f6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   146f8:	f88d 8008 	strb.w	r8, [sp, #8]
   146fc:	a902      	add	r1, sp, #8
{
   146fe:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14700:	f8ad 300a 	strh.w	r3, [sp, #10]
   14704:	f009 fcc6 	bl	1e094 <bt_uuid_cmp>
   14708:	b1a0      	cbz	r0, 14734 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1470a:	f642 0301 	movw	r3, #10241	; 0x2801
   1470e:	6830      	ldr	r0, [r6, #0]
   14710:	f88d 800c 	strb.w	r8, [sp, #12]
   14714:	a903      	add	r1, sp, #12
   14716:	f8ad 300e 	strh.w	r3, [sp, #14]
   1471a:	f009 fcbb 	bl	1e094 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1471e:	b148      	cbz	r0, 14734 <read_group_cb+0x50>
		if (data->group &&
   14720:	6923      	ldr	r3, [r4, #16]
   14722:	b11b      	cbz	r3, 1472c <read_group_cb+0x48>
   14724:	885a      	ldrh	r2, [r3, #2]
   14726:	42aa      	cmp	r2, r5
   14728:	d200      	bcs.n	1472c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1472a:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1472c:	2001      	movs	r0, #1
}
   1472e:	b004      	add	sp, #16
   14730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14734:	6861      	ldr	r1, [r4, #4]
   14736:	6830      	ldr	r0, [r6, #0]
   14738:	f009 fcac 	bl	1e094 <bt_uuid_cmp>
   1473c:	b110      	cbz	r0, 14744 <read_group_cb+0x60>
		data->group = NULL;
   1473e:	2300      	movs	r3, #0
   14740:	6123      	str	r3, [r4, #16]
   14742:	e7f3      	b.n	1472c <read_group_cb+0x48>
	if (data->rsp->len &&
   14744:	68e3      	ldr	r3, [r4, #12]
   14746:	68a0      	ldr	r0, [r4, #8]
   14748:	781a      	ldrb	r2, [r3, #0]
   1474a:	b13a      	cbz	r2, 1475c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1474c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   14750:	8981      	ldrh	r1, [r0, #12]
   14752:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   14754:	4293      	cmp	r3, r2
   14756:	da01      	bge.n	1475c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   14758:	2000      	movs	r0, #0
   1475a:	e7e8      	b.n	1472e <read_group_cb+0x4a>
   1475c:	2104      	movs	r1, #4
   1475e:	3008      	adds	r0, #8
   14760:	f001 ffc0 	bl	166e4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14764:	4b09      	ldr	r3, [pc, #36]	; (1478c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   14766:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14768:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1476a:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1476c:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1476e:	4631      	mov	r1, r6
   14770:	9300      	str	r3, [sp, #0]
   14772:	9401      	str	r4, [sp, #4]
   14774:	2300      	movs	r3, #0
   14776:	4638      	mov	r0, r7
   14778:	f00a fb34 	bl	1ede4 <att_chan_read>
	if (read < 0) {
   1477c:	2800      	cmp	r0, #0
   1477e:	dbeb      	blt.n	14758 <read_group_cb+0x74>
	if (!data->group) {
   14780:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   14782:	3800      	subs	r0, #0
   14784:	bf18      	it	ne
   14786:	2001      	movne	r0, #1
   14788:	e7d1      	b.n	1472e <read_group_cb+0x4a>
   1478a:	bf00      	nop
   1478c:	0001f023 	.word	0x0001f023

00014790 <read_type_cb>:
{
   14790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   14794:	f8d2 8000 	ldr.w	r8, [r2]
{
   14798:	4606      	mov	r6, r0
   1479a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1479c:	6800      	ldr	r0, [r0, #0]
   1479e:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   147a0:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   147a4:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   147a6:	f009 fc75 	bl	1e094 <bt_uuid_cmp>
   147aa:	4607      	mov	r7, r0
   147ac:	2800      	cmp	r0, #0
   147ae:	d13e      	bne.n	1482e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   147b0:	4628      	mov	r0, r5
   147b2:	2215      	movs	r2, #21
   147b4:	4631      	mov	r1, r6
   147b6:	f00b f9d3 	bl	1fb60 <bt_gatt_check_perm>
   147ba:	4605      	mov	r5, r0
   147bc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   147be:	b148      	cbz	r0, 147d4 <read_type_cb+0x44>
		if (data->rsp->len) {
   147c0:	68e3      	ldr	r3, [r4, #12]
   147c2:	781b      	ldrb	r3, [r3, #0]
   147c4:	b923      	cbnz	r3, 147d0 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   147c6:	2500      	movs	r5, #0
}
   147c8:	4628      	mov	r0, r5
   147ca:	b003      	add	sp, #12
   147cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   147d0:	7527      	strb	r7, [r4, #20]
   147d2:	e7f8      	b.n	147c6 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   147d4:	68a0      	ldr	r0, [r4, #8]
   147d6:	f001 feb5 	bl	16544 <net_buf_frag_last>
   147da:	2102      	movs	r1, #2
   147dc:	3008      	adds	r0, #8
   147de:	f001 ff81 	bl	166e4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   147e2:	4b14      	ldr	r3, [pc, #80]	; (14834 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   147e4:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   147e6:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   147e8:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   147ec:	4631      	mov	r1, r6
   147ee:	9300      	str	r3, [sp, #0]
   147f0:	9401      	str	r4, [sp, #4]
   147f2:	462b      	mov	r3, r5
   147f4:	4640      	mov	r0, r8
   147f6:	f00a faf5 	bl	1ede4 <att_chan_read>
	if (read < 0) {
   147fa:	2800      	cmp	r0, #0
   147fc:	da07      	bge.n	1480e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   147fe:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   14802:	bf26      	itte	cs
   14804:	4240      	negcs	r0, r0
   14806:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   14808:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1480a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1480c:	e7dc      	b.n	147c8 <read_type_cb+0x38>
	if (!data->item) {
   1480e:	6923      	ldr	r3, [r4, #16]
   14810:	2b00      	cmp	r3, #0
   14812:	d0d8      	beq.n	147c6 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   14814:	68a0      	ldr	r0, [r4, #8]
   14816:	f00a fa39 	bl	1ec8c <net_buf_frags_len>
   1481a:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1481e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   14820:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   14822:	7818      	ldrb	r0, [r3, #0]
   14824:	4285      	cmp	r5, r0
   14826:	bf94      	ite	ls
   14828:	2500      	movls	r5, #0
   1482a:	2501      	movhi	r5, #1
   1482c:	e7cc      	b.n	147c8 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1482e:	2501      	movs	r5, #1
   14830:	e7ca      	b.n	147c8 <read_type_cb+0x38>
   14832:	bf00      	nop
   14834:	0001eca9 	.word	0x0001eca9

00014838 <chan_send>:
{
   14838:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1483c:	688b      	ldr	r3, [r1, #8]
   1483e:	781b      	ldrb	r3, [r3, #0]
   14840:	2bd2      	cmp	r3, #210	; 0xd2
{
   14842:	4606      	mov	r6, r0
   14844:	460c      	mov	r4, r1
   14846:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   14848:	d10c      	bne.n	14864 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   1484a:	6803      	ldr	r3, [r0, #0]
   1484c:	6818      	ldr	r0, [r3, #0]
   1484e:	f00b faaa 	bl	1fda6 <bt_smp_sign>
		if (err) {
   14852:	4605      	mov	r5, r0
   14854:	b130      	cbz	r0, 14864 <chan_send+0x2c>
			net_buf_unref(buf);
   14856:	4620      	mov	r0, r4
   14858:	f001 fe14 	bl	16484 <net_buf_unref>
}
   1485c:	4628      	mov	r0, r5
   1485e:	b003      	add	sp, #12
   14860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   14864:	f104 0008 	add.w	r0, r4, #8
   14868:	f00b fabe 	bl	1fde8 <net_buf_simple_headroom>
	state->len = buf->len;
   1486c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   14870:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   14872:	b957      	cbnz	r7, 1488a <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
   14874:	68a3      	ldr	r3, [r4, #8]
   14876:	7818      	ldrb	r0, [r3, #0]
   14878:	f00a fa28 	bl	1eccc <att_op_get_type>
   1487c:	3801      	subs	r0, #1
   1487e:	b2c0      	uxtb	r0, r0
   14880:	2804      	cmp	r0, #4
   14882:	bf9c      	itt	ls
   14884:	4b13      	ldrls	r3, [pc, #76]	; (148d4 <chan_send+0x9c>)
   14886:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1488a:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   1488c:	f8c6 7150 	str.w	r7, [r6, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   14890:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   14892:	4b11      	ldr	r3, [pc, #68]	; (148d8 <chan_send+0xa0>)
   14894:	429f      	cmp	r7, r3
   14896:	d018      	beq.n	148ca <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
   14898:	4b10      	ldr	r3, [pc, #64]	; (148dc <chan_send+0xa4>)
   1489a:	429f      	cmp	r7, r3
   1489c:	d017      	beq.n	148ce <chan_send+0x96>
		return att_sent;
   1489e:	4910      	ldr	r1, [pc, #64]	; (148e0 <chan_send+0xa8>)
   148a0:	4b10      	ldr	r3, [pc, #64]	; (148e4 <chan_send+0xac>)
   148a2:	4a11      	ldr	r2, [pc, #68]	; (148e8 <chan_send+0xb0>)
   148a4:	428f      	cmp	r7, r1
   148a6:	bf18      	it	ne
   148a8:	4613      	movne	r3, r2
			       &chan->chan.chan);
   148aa:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   148ac:	9600      	str	r6, [sp, #0]
   148ae:	4622      	mov	r2, r4
   148b0:	2104      	movs	r1, #4
   148b2:	f00a f8ec 	bl	1ea8e <bt_l2cap_send_cb>
	if (err) {
   148b6:	4605      	mov	r5, r0
   148b8:	2800      	cmp	r0, #0
   148ba:	d0cf      	beq.n	1485c <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   148bc:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   148be:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   148c2:	fa10 f088 	uxtah	r0, r0, r8
   148c6:	60a0      	str	r0, [r4, #8]
}
   148c8:	e7c8      	b.n	1485c <chan_send+0x24>
		return att_rsp_sent;
   148ca:	4b08      	ldr	r3, [pc, #32]	; (148ec <chan_send+0xb4>)
   148cc:	e7ed      	b.n	148aa <chan_send+0x72>
		return att_cfm_sent;
   148ce:	4b08      	ldr	r3, [pc, #32]	; (148f0 <chan_send+0xb8>)
   148d0:	e7eb      	b.n	148aa <chan_send+0x72>
   148d2:	bf00      	nop
   148d4:	00021150 	.word	0x00021150
   148d8:	0001f19d 	.word	0x0001f19d
   148dc:	0001f181 	.word	0x0001f181
   148e0:	0001f0c5 	.word	0x0001f0c5
   148e4:	000146bd 	.word	0x000146bd
   148e8:	0001ec9d 	.word	0x0001ec9d
   148ec:	000146ad 	.word	0x000146ad
   148f0:	0001469d 	.word	0x0001469d

000148f4 <bt_att_chan_req_send>:
{
   148f4:	b538      	push	{r3, r4, r5, lr}
   148f6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   148f8:	4604      	mov	r4, r0
   148fa:	b958      	cbnz	r0, 14914 <bt_att_chan_req_send+0x20>
   148fc:	491d      	ldr	r1, [pc, #116]	; (14974 <bt_att_chan_req_send+0x80>)
   148fe:	481e      	ldr	r0, [pc, #120]	; (14978 <bt_att_chan_req_send+0x84>)
   14900:	4a1e      	ldr	r2, [pc, #120]	; (1497c <bt_att_chan_req_send+0x88>)
   14902:	f240 2332 	movw	r3, #562	; 0x232
   14906:	f008 ff55 	bl	1d7b4 <printk>
   1490a:	481c      	ldr	r0, [pc, #112]	; (1497c <bt_att_chan_req_send+0x88>)
   1490c:	f240 2132 	movw	r1, #562	; 0x232
   14910:	f009 f9aa 	bl	1dc68 <assert_post_action>
	__ASSERT_NO_MSG(req);
   14914:	b95d      	cbnz	r5, 1492e <bt_att_chan_req_send+0x3a>
   14916:	491a      	ldr	r1, [pc, #104]	; (14980 <bt_att_chan_req_send+0x8c>)
   14918:	4817      	ldr	r0, [pc, #92]	; (14978 <bt_att_chan_req_send+0x84>)
   1491a:	4a18      	ldr	r2, [pc, #96]	; (1497c <bt_att_chan_req_send+0x88>)
   1491c:	f240 2333 	movw	r3, #563	; 0x233
   14920:	f008 ff48 	bl	1d7b4 <printk>
   14924:	4815      	ldr	r0, [pc, #84]	; (1497c <bt_att_chan_req_send+0x88>)
   14926:	f240 2133 	movw	r1, #563	; 0x233
   1492a:	f009 f99d 	bl	1dc68 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   1492e:	686b      	ldr	r3, [r5, #4]
   14930:	b95b      	cbnz	r3, 1494a <bt_att_chan_req_send+0x56>
   14932:	4914      	ldr	r1, [pc, #80]	; (14984 <bt_att_chan_req_send+0x90>)
   14934:	4810      	ldr	r0, [pc, #64]	; (14978 <bt_att_chan_req_send+0x84>)
   14936:	4a11      	ldr	r2, [pc, #68]	; (1497c <bt_att_chan_req_send+0x88>)
   14938:	f44f 730d 	mov.w	r3, #564	; 0x234
   1493c:	f008 ff3a 	bl	1d7b4 <printk>
   14940:	480e      	ldr	r0, [pc, #56]	; (1497c <bt_att_chan_req_send+0x88>)
   14942:	f44f 710d 	mov.w	r1, #564	; 0x234
   14946:	f009 f98f 	bl	1dc68 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   1494a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   1494e:	b15b      	cbz	r3, 14968 <bt_att_chan_req_send+0x74>
   14950:	490d      	ldr	r1, [pc, #52]	; (14988 <bt_att_chan_req_send+0x94>)
   14952:	4809      	ldr	r0, [pc, #36]	; (14978 <bt_att_chan_req_send+0x84>)
   14954:	4a09      	ldr	r2, [pc, #36]	; (1497c <bt_att_chan_req_send+0x88>)
   14956:	f240 2335 	movw	r3, #565	; 0x235
   1495a:	f008 ff2b 	bl	1d7b4 <printk>
   1495e:	4807      	ldr	r0, [pc, #28]	; (1497c <bt_att_chan_req_send+0x88>)
   14960:	f240 2135 	movw	r1, #565	; 0x235
   14964:	f009 f980 	bl	1dc68 <assert_post_action>
	return chan_req_send(chan, req);
   14968:	4629      	mov	r1, r5
   1496a:	4620      	mov	r0, r4
}
   1496c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return chan_req_send(chan, req);
   14970:	f00a bb67 	b.w	1f042 <chan_req_send>
   14974:	00022348 	.word	0x00022348
   14978:	00021650 	.word	0x00021650
   1497c:	00022319 	.word	0x00022319
   14980:	0002235e 	.word	0x0002235e
   14984:	0002234d 	.word	0x0002234d
   14988:	00022357 	.word	0x00022357

0001498c <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1498c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1498e:	2300      	movs	r3, #0
{
   14990:	4607      	mov	r7, r0
   14992:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   14994:	481f      	ldr	r0, [pc, #124]	; (14a14 <bt_att_accept+0x88>)
   14996:	2200      	movs	r2, #0
   14998:	4669      	mov	r1, sp
   1499a:	f004 fd81 	bl	194a0 <k_mem_slab_alloc>
   1499e:	4604      	mov	r4, r0
   149a0:	b120      	cbz	r0, 149ac <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   149a2:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   149a6:	4620      	mov	r0, r4
   149a8:	b003      	add	sp, #12
   149aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   149ac:	4601      	mov	r1, r0
   149ae:	2230      	movs	r2, #48	; 0x30
   149b0:	9800      	ldr	r0, [sp, #0]
   149b2:	f00c f868 	bl	20a86 <memset>
	att->conn = conn;
   149b6:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   149b8:	4817      	ldr	r0, [pc, #92]	; (14a18 <bt_att_accept+0x8c>)
	list->tail = NULL;
   149ba:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   149bc:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   149c0:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   149c4:	2200      	movs	r2, #0
   149c6:	2300      	movs	r3, #0
   149c8:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   149ca:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   149cc:	f004 fd68 	bl	194a0 <k_mem_slab_alloc>
   149d0:	4604      	mov	r4, r0
   149d2:	2800      	cmp	r0, #0
   149d4:	d1e5      	bne.n	149a2 <bt_att_accept+0x16>
   149d6:	4601      	mov	r1, r0
   149d8:	f44f 72ac 	mov.w	r2, #344	; 0x158
   149dc:	9801      	ldr	r0, [sp, #4]
   149de:	f00c f852 	bl	20a86 <memset>
	chan->chan.chan.ops = &ops;
   149e2:	9801      	ldr	r0, [sp, #4]
   149e4:	4b0d      	ldr	r3, [pc, #52]	; (14a1c <bt_att_accept+0x90>)
   149e6:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   149e8:	f500 7080 	add.w	r0, r0, #256	; 0x100
   149ec:	f00b fed7 	bl	2079e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   149f0:	9b01      	ldr	r3, [sp, #4]
   149f2:	f3bf 8f5b 	dmb	ish
   149f6:	33f8      	adds	r3, #248	; 0xf8
   149f8:	e853 2f00 	ldrex	r2, [r3]
   149fc:	e843 4100 	strex	r1, r4, [r3]
   14a00:	2900      	cmp	r1, #0
   14a02:	d1f9      	bne.n	149f8 <bt_att_accept+0x6c>
   14a04:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   14a08:	9b01      	ldr	r3, [sp, #4]
   14a0a:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   14a0e:	6033      	str	r3, [r6, #0]
	return 0;
   14a10:	e7c9      	b.n	149a6 <bt_att_accept+0x1a>
   14a12:	bf00      	nop
   14a14:	200005d4 	.word	0x200005d4
   14a18:	200005f4 	.word	0x200005f4
   14a1c:	2000047c 	.word	0x2000047c

00014a20 <bt_att_connected>:
{
   14a20:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   14a22:	2104      	movs	r1, #4
{
   14a24:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   14a26:	6800      	ldr	r0, [r0, #0]
   14a28:	f00a f8cf 	bl	1ebca <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   14a2c:	4605      	mov	r5, r0
   14a2e:	b970      	cbnz	r0, 14a4e <bt_att_connected+0x2e>
   14a30:	491c      	ldr	r1, [pc, #112]	; (14aa4 <bt_att_connected+0x84>)
   14a32:	4a1d      	ldr	r2, [pc, #116]	; (14aa8 <bt_att_connected+0x88>)
   14a34:	481d      	ldr	r0, [pc, #116]	; (14aac <bt_att_connected+0x8c>)
   14a36:	f640 2329 	movw	r3, #2601	; 0xa29
   14a3a:	f008 febb 	bl	1d7b4 <printk>
   14a3e:	481c      	ldr	r0, [pc, #112]	; (14ab0 <bt_att_connected+0x90>)
   14a40:	f008 feb8 	bl	1d7b4 <printk>
   14a44:	4818      	ldr	r0, [pc, #96]	; (14aa8 <bt_att_connected+0x88>)
   14a46:	f640 2129 	movw	r1, #2601	; 0xa29
   14a4a:	f009 f90d 	bl	1dc68 <assert_post_action>
	struct bt_att *att = att_chan->att;
   14a4e:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   14a52:	6aab      	ldr	r3, [r5, #40]	; 0x28
	att_chan = ATT_CHAN(chan);
   14a54:	f1a4 0608 	sub.w	r6, r4, #8
	if (sys_slist_is_empty(&att->chans)) {
   14a58:	b91b      	cbnz	r3, 14a62 <bt_att_connected+0x42>
   14a5a:	f105 000c 	add.w	r0, r5, #12
   14a5e:	f00b fe9e 	bl	2079e <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   14a62:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	parent->next = child;
   14a64:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
Z_GENLIST_PREPEND(slist, snode)
   14a68:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   14a6a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
	list->head = node;
   14a6e:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   14a70:	b902      	cbnz	r2, 14a74 <bt_att_connected+0x54>
	list->tail = node;
   14a72:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14a74:	f3bf 8f5b 	dmb	ish
   14a78:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   14a7c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   14a80:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   14a82:	bf58      	it	pl
   14a84:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   14a86:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   14a88:	bf5c      	itt	pl
   14a8a:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   14a8e:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   14a92:	f00a f961 	bl	1ed58 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   14a96:	f504 708c 	add.w	r0, r4, #280	; 0x118
   14a9a:	4906      	ldr	r1, [pc, #24]	; (14ab4 <bt_att_connected+0x94>)
}
   14a9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   14aa0:	f005 be66 	b.w	1a770 <k_work_init_delayable>
   14aa4:	00022348 	.word	0x00022348
   14aa8:	00022319 	.word	0x00022319
   14aac:	00021650 	.word	0x00021650
   14ab0:	00022362 	.word	0x00022362
   14ab4:	0001f4e3 	.word	0x0001f4e3

00014ab8 <att_write_cmd>:
{
   14ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14aba:	4604      	mov	r4, r0
   14abc:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   14abe:	f101 0008 	add.w	r0, r1, #8
   14ac2:	460d      	mov	r5, r1
   14ac4:	f00b f988 	bl	1fdd8 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   14ac8:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   14aca:	68af      	ldr	r7, [r5, #8]
   14acc:	89ad      	ldrh	r5, [r5, #12]
   14ace:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   14ad0:	2100      	movs	r1, #0
   14ad2:	6818      	ldr	r0, [r3, #0]
   14ad4:	f00b f90f 	bl	1fcf6 <bt_gatt_change_aware>
   14ad8:	b328      	cbz	r0, 14b26 <att_write_cmd+0x6e>
	if (!handle) {
   14ada:	b336      	cbz	r6, 14b2a <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
   14adc:	2214      	movs	r2, #20
   14ade:	2100      	movs	r1, #0
   14ae0:	a801      	add	r0, sp, #4
   14ae2:	f00b ffd0 	bl	20a86 <memset>
	data.conn = chan->att->conn;
   14ae6:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   14ae8:	4a11      	ldr	r2, [pc, #68]	; (14b30 <att_write_cmd+0x78>)
	data.conn = chan->att->conn;
   14aea:	681b      	ldr	r3, [r3, #0]
   14aec:	9300      	str	r3, [sp, #0]
	data.req = req;
   14aee:	2300      	movs	r3, #0
   14af0:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   14af4:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   14af8:	2301      	movs	r3, #1
   14afa:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   14afe:	4631      	mov	r1, r6
   14b00:	466b      	mov	r3, sp
   14b02:	4630      	mov	r0, r6
	data.value = value;
   14b04:	9703      	str	r7, [sp, #12]
	data.len = len;
   14b06:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   14b0a:	f00a f960 	bl	1edce <bt_gatt_foreach_attr>
	if (data.err) {
   14b0e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   14b12:	b92b      	cbnz	r3, 14b20 <att_write_cmd+0x68>
	if (data.buf) {
   14b14:	9901      	ldr	r1, [sp, #4]
   14b16:	b119      	cbz	r1, 14b20 <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14b18:	4a06      	ldr	r2, [pc, #24]	; (14b34 <att_write_cmd+0x7c>)
   14b1a:	4620      	mov	r0, r4
   14b1c:	f00a fac4 	bl	1f0a8 <bt_att_chan_send_rsp>
   14b20:	2000      	movs	r0, #0
}
   14b22:	b007      	add	sp, #28
   14b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14b26:	2012      	movs	r0, #18
   14b28:	e7fb      	b.n	14b22 <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
   14b2a:	2001      	movs	r0, #1
   14b2c:	e7f9      	b.n	14b22 <att_write_cmd+0x6a>
   14b2e:	bf00      	nop
   14b30:	0001f285 	.word	0x0001f285
   14b34:	0001f19d 	.word	0x0001f19d

00014b38 <att_indicate>:
{
   14b38:	b570      	push	{r4, r5, r6, lr}
   14b3a:	4604      	mov	r4, r0
   14b3c:	f101 0008 	add.w	r0, r1, #8
   14b40:	460d      	mov	r5, r1
   14b42:	f00b f949 	bl	1fdd8 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   14b46:	6826      	ldr	r6, [r4, #0]
   14b48:	89ab      	ldrh	r3, [r5, #12]
   14b4a:	68aa      	ldr	r2, [r5, #8]
   14b4c:	4601      	mov	r1, r0
   14b4e:	6830      	ldr	r0, [r6, #0]
   14b50:	f00b f85c 	bl	1fc0c <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   14b54:	211e      	movs	r1, #30
   14b56:	2200      	movs	r2, #0
   14b58:	4620      	mov	r0, r4
   14b5a:	f00a fc28 	bl	1f3ae <bt_att_chan_create_pdu>
	if (!buf) {
   14b5e:	4601      	mov	r1, r0
   14b60:	b118      	cbz	r0, 14b6a <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   14b62:	4a03      	ldr	r2, [pc, #12]	; (14b70 <att_indicate+0x38>)
   14b64:	4620      	mov	r0, r4
   14b66:	f00a fa9f 	bl	1f0a8 <bt_att_chan_send_rsp>
}
   14b6a:	2000      	movs	r0, #0
   14b6c:	bd70      	pop	{r4, r5, r6, pc}
   14b6e:	bf00      	nop
   14b70:	0001f181 	.word	0x0001f181

00014b74 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   14b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b78:	4688      	mov	r8, r1
   14b7a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   14b7c:	2101      	movs	r1, #1
   14b7e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   14b80:	4605      	mov	r5, r0
   14b82:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   14b84:	f00a fc13 	bl	1f3ae <bt_att_chan_create_pdu>
	if (!buf) {
   14b88:	4604      	mov	r4, r0
   14b8a:	b178      	cbz	r0, 14bac <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   14b8c:	2104      	movs	r1, #4
   14b8e:	3008      	adds	r0, #8
   14b90:	f001 fda8 	bl	166e4 <net_buf_simple_add>
	rsp->request = req;
   14b94:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   14b98:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   14b9a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   14b9e:	4621      	mov	r1, r4
   14ba0:	4628      	mov	r0, r5
   14ba2:	4a03      	ldr	r2, [pc, #12]	; (14bb0 <send_err_rsp.part.0+0x3c>)
}
   14ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   14ba8:	f00a ba7e 	b.w	1f0a8 <bt_att_chan_send_rsp>
}
   14bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14bb0:	0001f19d 	.word	0x0001f19d

00014bb4 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   14bb4:	898b      	ldrh	r3, [r1, #12]
{
   14bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14bba:	4604      	mov	r4, r0
   14bbc:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   14bbe:	2b00      	cmp	r3, #0
   14bc0:	d05e      	beq.n	14c80 <bt_att_recv+0xcc>
	return net_buf_simple_pull_mem(&buf->b, len);
   14bc2:	2101      	movs	r1, #1
   14bc4:	f105 0008 	add.w	r0, r5, #8
   14bc8:	f001 fd6a 	bl	166a0 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   14bcc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   14bd0:	4607      	mov	r7, r0
   14bd2:	2b00      	cmp	r3, #0
   14bd4:	d054      	beq.n	14c80 <bt_att_recv+0xcc>
		if (hdr->code == handlers[i].op) {
   14bd6:	4a2e      	ldr	r2, [pc, #184]	; (14c90 <bt_att_recv+0xdc>)
   14bd8:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   14bda:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   14bde:	2300      	movs	r3, #0
   14be0:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   14be2:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   14be6:	4288      	cmp	r0, r1
   14be8:	d11a      	bne.n	14c20 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
   14bea:	00d9      	lsls	r1, r3, #3
   14bec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   14bf0:	f893 8002 	ldrb.w	r8, [r3, #2]
   14bf4:	f1b8 0f01 	cmp.w	r8, #1
   14bf8:	d020      	beq.n	14c3c <bt_att_recv+0x88>
		} else if (handler->type == ATT_INDICATION &&
   14bfa:	f1b8 0f05 	cmp.w	r8, #5
   14bfe:	d12d      	bne.n	14c5c <bt_att_recv+0xa8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14c00:	f3bf 8f5b 	dmb	ish
   14c04:	34f0      	adds	r4, #240	; 0xf0
   14c06:	e854 2f00 	ldrex	r2, [r4]
   14c0a:	f042 0302 	orr.w	r3, r2, #2
   14c0e:	e844 3000 	strex	r0, r3, [r4]
   14c12:	2800      	cmp	r0, #0
   14c14:	d1f7      	bne.n	14c06 <bt_att_recv+0x52>
   14c16:	f3bf 8f5b 	dmb	ish
   14c1a:	f012 0f02 	tst.w	r2, #2
   14c1e:	e01c      	b.n	14c5a <bt_att_recv+0xa6>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   14c20:	3301      	adds	r3, #1
   14c22:	2b1c      	cmp	r3, #28
   14c24:	d1dd      	bne.n	14be2 <bt_att_recv+0x2e>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   14c26:	4608      	mov	r0, r1
   14c28:	f00a f850 	bl	1eccc <att_op_get_type>
   14c2c:	b340      	cbz	r0, 14c80 <bt_att_recv+0xcc>
	if (!req) {
   14c2e:	b339      	cbz	r1, 14c80 <bt_att_recv+0xcc>
   14c30:	2306      	movs	r3, #6
   14c32:	2200      	movs	r2, #0
   14c34:	4630      	mov	r0, r6
   14c36:	f7ff ff9d 	bl	14b74 <send_err_rsp.part.0>
   14c3a:	e021      	b.n	14c80 <bt_att_recv+0xcc>
   14c3c:	34f0      	adds	r4, #240	; 0xf0
   14c3e:	f3bf 8f5b 	dmb	ish
   14c42:	e854 3f00 	ldrex	r3, [r4]
   14c46:	f043 0201 	orr.w	r2, r3, #1
   14c4a:	e844 2000 	strex	r0, r2, [r4]
   14c4e:	2800      	cmp	r0, #0
   14c50:	d1f7      	bne.n	14c42 <bt_att_recv+0x8e>
   14c52:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   14c56:	f013 0f01 	tst.w	r3, #1
   14c5a:	d111      	bne.n	14c80 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
   14c5c:	eb0c 0301 	add.w	r3, ip, r1
   14c60:	89a9      	ldrh	r1, [r5, #12]
   14c62:	785a      	ldrb	r2, [r3, #1]
   14c64:	4291      	cmp	r1, r2
   14c66:	d30e      	bcc.n	14c86 <bt_att_recv+0xd2>
		err = handler->func(att_chan, buf);
   14c68:	685b      	ldr	r3, [r3, #4]
   14c6a:	4629      	mov	r1, r5
   14c6c:	4630      	mov	r0, r6
   14c6e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   14c70:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   14c74:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   14c76:	d103      	bne.n	14c80 <bt_att_recv+0xcc>
   14c78:	b110      	cbz	r0, 14c80 <bt_att_recv+0xcc>
		send_err_rsp(att_chan, hdr->code, 0, err);
   14c7a:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   14c7c:	2900      	cmp	r1, #0
   14c7e:	d1d8      	bne.n	14c32 <bt_att_recv+0x7e>
}
   14c80:	2000      	movs	r0, #0
   14c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   14c86:	f1b8 0f01 	cmp.w	r8, #1
   14c8a:	d1f9      	bne.n	14c80 <bt_att_recv+0xcc>
		err = BT_ATT_ERR_INVALID_PDU;
   14c8c:	2304      	movs	r3, #4
   14c8e:	e7f4      	b.n	14c7a <bt_att_recv+0xc6>
   14c90:	00021164 	.word	0x00021164

00014c94 <att_write_req>:
{
   14c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14c98:	4604      	mov	r4, r0
   14c9a:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   14c9c:	f101 0008 	add.w	r0, r1, #8
   14ca0:	460d      	mov	r5, r1
   14ca2:	f00b f899 	bl	1fdd8 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   14ca6:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   14ca8:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   14cac:	89ad      	ldrh	r5, [r5, #12]
   14cae:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   14cb0:	2101      	movs	r1, #1
   14cb2:	6818      	ldr	r0, [r3, #0]
   14cb4:	f00b f81f 	bl	1fcf6 <bt_gatt_change_aware>
   14cb8:	2800      	cmp	r0, #0
   14cba:	d040      	beq.n	14d3e <att_write_req+0xaa>
	if (!handle) {
   14cbc:	2e00      	cmp	r6, #0
   14cbe:	d040      	beq.n	14d42 <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
   14cc0:	2218      	movs	r2, #24
   14cc2:	2100      	movs	r1, #0
   14cc4:	4668      	mov	r0, sp
   14cc6:	f00b fede 	bl	20a86 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   14cca:	2200      	movs	r2, #0
   14ccc:	2113      	movs	r1, #19
   14cce:	4620      	mov	r0, r4
   14cd0:	f00a fb6d 	bl	1f3ae <bt_att_chan_create_pdu>
   14cd4:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   14cd6:	b380      	cbz	r0, 14d3a <att_write_req+0xa6>
	data.conn = chan->att->conn;
   14cd8:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   14cda:	4a1b      	ldr	r2, [pc, #108]	; (14d48 <att_write_req+0xb4>)
	data.conn = chan->att->conn;
   14cdc:	681b      	ldr	r3, [r3, #0]
   14cde:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   14ce0:	2301      	movs	r3, #1
   14ce2:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   14ce6:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   14cea:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   14cec:	466b      	mov	r3, sp
   14cee:	4631      	mov	r1, r6
   14cf0:	4630      	mov	r0, r6
	data.len = len;
   14cf2:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   14cf6:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   14cfa:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   14cfe:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   14d02:	f00a f864 	bl	1edce <bt_gatt_foreach_attr>
	if (data.err) {
   14d06:	f89d 5014 	ldrb.w	r5, [sp, #20]
   14d0a:	b175      	cbz	r5, 14d2a <att_write_req+0x96>
			net_buf_unref(data.buf);
   14d0c:	9801      	ldr	r0, [sp, #4]
   14d0e:	f001 fbb9 	bl	16484 <net_buf_unref>
	if (!req) {
   14d12:	f89d 3014 	ldrb.w	r3, [sp, #20]
   14d16:	4632      	mov	r2, r6
   14d18:	4641      	mov	r1, r8
   14d1a:	4620      	mov	r0, r4
   14d1c:	f7ff ff2a 	bl	14b74 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   14d20:	463d      	mov	r5, r7
}
   14d22:	4628      	mov	r0, r5
   14d24:	b007      	add	sp, #28
   14d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   14d2a:	9901      	ldr	r1, [sp, #4]
   14d2c:	2900      	cmp	r1, #0
   14d2e:	d0f8      	beq.n	14d22 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14d30:	4a06      	ldr	r2, [pc, #24]	; (14d4c <att_write_req+0xb8>)
   14d32:	4620      	mov	r0, r4
   14d34:	f00a f9b8 	bl	1f0a8 <bt_att_chan_send_rsp>
   14d38:	e7f3      	b.n	14d22 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   14d3a:	250e      	movs	r5, #14
   14d3c:	e7f1      	b.n	14d22 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14d3e:	2512      	movs	r5, #18
   14d40:	e7ef      	b.n	14d22 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   14d42:	2501      	movs	r5, #1
   14d44:	e7ed      	b.n	14d22 <att_write_req+0x8e>
   14d46:	bf00      	nop
   14d48:	0001f285 	.word	0x0001f285
   14d4c:	0001f19d 	.word	0x0001f19d

00014d50 <att_read_group_req>:
{
   14d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   14d54:	7b0c      	ldrb	r4, [r1, #12]
   14d56:	3c04      	subs	r4, #4
   14d58:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   14d5a:	2c02      	cmp	r4, #2
{
   14d5c:	4605      	mov	r5, r0
   14d5e:	b08c      	sub	sp, #48	; 0x30
   14d60:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   14d62:	d001      	beq.n	14d68 <att_read_group_req+0x18>
   14d64:	2c10      	cmp	r4, #16
   14d66:	d16f      	bne.n	14e48 <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
   14d68:	2104      	movs	r1, #4
   14d6a:	3008      	adds	r0, #8
   14d6c:	f001 fc98 	bl	166a0 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14d70:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   14d74:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   14d76:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14d78:	1d01      	adds	r1, r0, #4
   14d7a:	4622      	mov	r2, r4
   14d7c:	4640      	mov	r0, r8
   14d7e:	f009 f9b3 	bl	1e0e8 <bt_uuid_create>
   14d82:	2800      	cmp	r0, #0
   14d84:	d062      	beq.n	14e4c <att_read_group_req+0xfc>
	if (!start || !end) {
   14d86:	2e00      	cmp	r6, #0
   14d88:	d03a      	beq.n	14e00 <att_read_group_req+0xb0>
   14d8a:	2400      	movs	r4, #0
   14d8c:	2f00      	cmp	r7, #0
   14d8e:	d036      	beq.n	14dfe <att_read_group_req+0xae>
	if (start > end) {
   14d90:	42be      	cmp	r6, r7
   14d92:	d835      	bhi.n	14e00 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   14d94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14d98:	a901      	add	r1, sp, #4
   14d9a:	4640      	mov	r0, r8
   14d9c:	f88d 4004 	strb.w	r4, [sp, #4]
   14da0:	f8ad 3006 	strh.w	r3, [sp, #6]
   14da4:	f009 f976 	bl	1e094 <bt_uuid_cmp>
   14da8:	2800      	cmp	r0, #0
   14daa:	d134      	bne.n	14e16 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   14dac:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   14dae:	2214      	movs	r2, #20
   14db0:	2100      	movs	r1, #0
   14db2:	a807      	add	r0, sp, #28
   14db4:	f00b fe67 	bl	20a86 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   14db8:	2201      	movs	r2, #1
   14dba:	2111      	movs	r1, #17
   14dbc:	4620      	mov	r0, r4
   14dbe:	f00a fb1b 	bl	1f3f8 <bt_att_create_pdu>
   14dc2:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   14dc4:	2800      	cmp	r0, #0
   14dc6:	d041      	beq.n	14e4c <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   14dc8:	2101      	movs	r1, #1
   14dca:	3008      	adds	r0, #8
	data.uuid = uuid;
   14dcc:	e9cd 5807 	strd	r5, r8, [sp, #28]
   14dd0:	f001 fc88 	bl	166e4 <net_buf_simple_add>
	data.rsp->len = 0U;
   14dd4:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   14dd8:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   14dda:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   14ddc:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   14de0:	4a1b      	ldr	r2, [pc, #108]	; (14e50 <att_read_group_req+0x100>)
	data.group = NULL;
   14de2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   14de6:	4639      	mov	r1, r7
   14de8:	4630      	mov	r0, r6
   14dea:	f009 fff0 	bl	1edce <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   14dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14df0:	781c      	ldrb	r4, [r3, #0]
   14df2:	bb1c      	cbnz	r4, 14e3c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   14df4:	9809      	ldr	r0, [sp, #36]	; 0x24
   14df6:	f001 fb45 	bl	16484 <net_buf_unref>
	if (!req) {
   14dfa:	230a      	movs	r3, #10
   14dfc:	e018      	b.n	14e30 <att_read_group_req+0xe0>
			*err = 0U;
   14dfe:	463e      	mov	r6, r7
	if (!req) {
   14e00:	2301      	movs	r3, #1
   14e02:	4632      	mov	r2, r6
   14e04:	2110      	movs	r1, #16
   14e06:	4628      	mov	r0, r5
   14e08:	f7ff feb4 	bl	14b74 <send_err_rsp.part.0>
		return 0;
   14e0c:	2400      	movs	r4, #0
}
   14e0e:	4620      	mov	r0, r4
   14e10:	b00c      	add	sp, #48	; 0x30
   14e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   14e16:	f642 0301 	movw	r3, #10241	; 0x2801
   14e1a:	a907      	add	r1, sp, #28
   14e1c:	4640      	mov	r0, r8
   14e1e:	f88d 401c 	strb.w	r4, [sp, #28]
   14e22:	f8ad 301e 	strh.w	r3, [sp, #30]
   14e26:	f009 f935 	bl	1e094 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   14e2a:	2800      	cmp	r0, #0
   14e2c:	d0be      	beq.n	14dac <att_read_group_req+0x5c>
	if (!req) {
   14e2e:	2310      	movs	r3, #16
   14e30:	4632      	mov	r2, r6
   14e32:	2110      	movs	r1, #16
   14e34:	4628      	mov	r0, r5
   14e36:	f7ff fe9d 	bl	14b74 <send_err_rsp.part.0>
		return 0;
   14e3a:	e7e8      	b.n	14e0e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14e3c:	4a05      	ldr	r2, [pc, #20]	; (14e54 <att_read_group_req+0x104>)
   14e3e:	9909      	ldr	r1, [sp, #36]	; 0x24
   14e40:	4628      	mov	r0, r5
   14e42:	f00a f931 	bl	1f0a8 <bt_att_chan_send_rsp>
	return 0;
   14e46:	e7e1      	b.n	14e0c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   14e48:	2404      	movs	r4, #4
   14e4a:	e7e0      	b.n	14e0e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   14e4c:	240e      	movs	r4, #14
   14e4e:	e7de      	b.n	14e0e <att_read_group_req+0xbe>
   14e50:	000146e5 	.word	0x000146e5
   14e54:	0001f19d 	.word	0x0001f19d

00014e58 <att_read_mult_req>:
{
   14e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   14e5c:	6886      	ldr	r6, [r0, #8]
{
   14e5e:	b085      	sub	sp, #20
   14e60:	4604      	mov	r4, r0
   14e62:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   14e64:	4630      	mov	r0, r6
   14e66:	2101      	movs	r1, #1
   14e68:	f00a ff45 	bl	1fcf6 <bt_gatt_change_aware>
   14e6c:	2800      	cmp	r0, #0
   14e6e:	d038      	beq.n	14ee2 <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   14e70:	2210      	movs	r2, #16
   14e72:	2100      	movs	r1, #0
   14e74:	4668      	mov	r0, sp
   14e76:	f00b fe06 	bl	20a86 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   14e7a:	2200      	movs	r2, #0
   14e7c:	210f      	movs	r1, #15
   14e7e:	4630      	mov	r0, r6
   14e80:	f00a faba 	bl	1f3f8 <bt_att_create_pdu>
   14e84:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   14e86:	b370      	cbz	r0, 14ee6 <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14e88:	f8df 9064 	ldr.w	r9, [pc, #100]	; 14ef0 <att_read_mult_req+0x98>
	data.chan = chan;
   14e8c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   14e8e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   14e92:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   14e96:	89ab      	ldrh	r3, [r5, #12]
   14e98:	2b01      	cmp	r3, #1
   14e9a:	d805      	bhi.n	14ea8 <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14e9c:	4a13      	ldr	r2, [pc, #76]	; (14eec <att_read_mult_req+0x94>)
   14e9e:	9902      	ldr	r1, [sp, #8]
   14ea0:	4620      	mov	r0, r4
   14ea2:	f00a f901 	bl	1f0a8 <bt_att_chan_send_rsp>
   14ea6:	e018      	b.n	14eda <att_read_mult_req+0x82>
   14ea8:	4638      	mov	r0, r7
   14eaa:	f00a ff95 	bl	1fdd8 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14eae:	466b      	mov	r3, sp
   14eb0:	464a      	mov	r2, r9
   14eb2:	4601      	mov	r1, r0
   14eb4:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   14eb6:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14eba:	f009 ff88 	bl	1edce <bt_gatt_foreach_attr>
		if (data.err) {
   14ebe:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14ec2:	2b00      	cmp	r3, #0
   14ec4:	d0e7      	beq.n	14e96 <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
   14ec6:	9802      	ldr	r0, [sp, #8]
   14ec8:	f001 fadc 	bl	16484 <net_buf_unref>
	if (!req) {
   14ecc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14ed0:	4632      	mov	r2, r6
   14ed2:	210e      	movs	r1, #14
   14ed4:	4620      	mov	r0, r4
   14ed6:	f7ff fe4d 	bl	14b74 <send_err_rsp.part.0>
	return 0;
   14eda:	2000      	movs	r0, #0
}
   14edc:	b005      	add	sp, #20
   14ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14ee2:	2012      	movs	r0, #18
   14ee4:	e7fa      	b.n	14edc <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
   14ee6:	200e      	movs	r0, #14
   14ee8:	e7f8      	b.n	14edc <att_read_mult_req+0x84>
   14eea:	bf00      	nop
   14eec:	0001f19d 	.word	0x0001f19d
   14ef0:	0001f35b 	.word	0x0001f35b

00014ef4 <att_read_rsp>:
{
   14ef4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   14ef8:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   14efc:	4605      	mov	r5, r0
   14efe:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   14f00:	4640      	mov	r0, r8
   14f02:	2101      	movs	r1, #1
{
   14f04:	4614      	mov	r4, r2
   14f06:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   14f08:	f00a fef5 	bl	1fcf6 <bt_gatt_change_aware>
   14f0c:	b390      	cbz	r0, 14f74 <att_read_rsp+0x80>
	if (!handle) {
   14f0e:	b39e      	cbz	r6, 14f78 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   14f10:	2210      	movs	r2, #16
   14f12:	2100      	movs	r1, #0
   14f14:	4668      	mov	r0, sp
   14f16:	f00b fdb6 	bl	20a86 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   14f1a:	2200      	movs	r2, #0
   14f1c:	4621      	mov	r1, r4
   14f1e:	4640      	mov	r0, r8
   14f20:	f00a fa6a 	bl	1f3f8 <bt_att_create_pdu>
   14f24:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   14f26:	b348      	cbz	r0, 14f7c <att_read_rsp+0x88>
	data.offset = offset;
   14f28:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   14f2c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   14f30:	2301      	movs	r3, #1
   14f32:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14f36:	4a12      	ldr	r2, [pc, #72]	; (14f80 <att_read_rsp+0x8c>)
	data.chan = chan;
   14f38:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14f3a:	466b      	mov	r3, sp
   14f3c:	4631      	mov	r1, r6
   14f3e:	4630      	mov	r0, r6
   14f40:	f009 ff45 	bl	1edce <bt_gatt_foreach_attr>
	if (data.err) {
   14f44:	f89d 400c 	ldrb.w	r4, [sp, #12]
   14f48:	b174      	cbz	r4, 14f68 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   14f4a:	9802      	ldr	r0, [sp, #8]
   14f4c:	f001 fa9a 	bl	16484 <net_buf_unref>
	if (!req) {
   14f50:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14f54:	4632      	mov	r2, r6
   14f56:	4639      	mov	r1, r7
   14f58:	4628      	mov	r0, r5
   14f5a:	f7ff fe0b 	bl	14b74 <send_err_rsp.part.0>
		return 0;
   14f5e:	2400      	movs	r4, #0
}
   14f60:	4620      	mov	r0, r4
   14f62:	b004      	add	sp, #16
   14f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14f68:	4a06      	ldr	r2, [pc, #24]	; (14f84 <att_read_rsp+0x90>)
   14f6a:	9902      	ldr	r1, [sp, #8]
   14f6c:	4628      	mov	r0, r5
   14f6e:	f00a f89b 	bl	1f0a8 <bt_att_chan_send_rsp>
	return 0;
   14f72:	e7f5      	b.n	14f60 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14f74:	2412      	movs	r4, #18
   14f76:	e7f3      	b.n	14f60 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   14f78:	2401      	movs	r4, #1
   14f7a:	e7f1      	b.n	14f60 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   14f7c:	240e      	movs	r4, #14
   14f7e:	e7ef      	b.n	14f60 <att_read_rsp+0x6c>
   14f80:	0001f35b 	.word	0x0001f35b
   14f84:	0001f19d 	.word	0x0001f19d

00014f88 <att_read_type_req>:
{
   14f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   14f8c:	7b0c      	ldrb	r4, [r1, #12]
   14f8e:	3c04      	subs	r4, #4
   14f90:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   14f92:	2c02      	cmp	r4, #2
{
   14f94:	4605      	mov	r5, r0
   14f96:	b08c      	sub	sp, #48	; 0x30
   14f98:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   14f9a:	d001      	beq.n	14fa0 <att_read_type_req+0x18>
   14f9c:	2c10      	cmp	r4, #16
   14f9e:	d150      	bne.n	15042 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   14fa0:	2104      	movs	r1, #4
   14fa2:	3008      	adds	r0, #8
   14fa4:	f001 fb7c 	bl	166a0 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14fa8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   14fac:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   14fae:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14fb0:	1d01      	adds	r1, r0, #4
   14fb2:	4622      	mov	r2, r4
   14fb4:	4640      	mov	r0, r8
   14fb6:	f009 f897 	bl	1e0e8 <bt_uuid_create>
   14fba:	b188      	cbz	r0, 14fe0 <att_read_type_req+0x58>
	if (!start || !end) {
   14fbc:	b19e      	cbz	r6, 14fe6 <att_read_type_req+0x5e>
   14fbe:	b18f      	cbz	r7, 14fe4 <att_read_type_req+0x5c>
	if (start > end) {
   14fc0:	42b7      	cmp	r7, r6
   14fc2:	d310      	bcc.n	14fe6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   14fc4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   14fc6:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   14fc8:	2100      	movs	r1, #0
   14fca:	eb0d 0002 	add.w	r0, sp, r2
   14fce:	f00b fd5a 	bl	20a86 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   14fd2:	2201      	movs	r2, #1
   14fd4:	2109      	movs	r1, #9
   14fd6:	4620      	mov	r0, r4
   14fd8:	f00a fa0e 	bl	1f3f8 <bt_att_create_pdu>
   14fdc:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   14fde:	b968      	cbnz	r0, 14ffc <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   14fe0:	240e      	movs	r4, #14
   14fe2:	e007      	b.n	14ff4 <att_read_type_req+0x6c>
			*err = 0U;
   14fe4:	463e      	mov	r6, r7
	if (!req) {
   14fe6:	2301      	movs	r3, #1
   14fe8:	4632      	mov	r2, r6
   14fea:	2108      	movs	r1, #8
   14fec:	4628      	mov	r0, r5
   14fee:	f7ff fdc1 	bl	14b74 <send_err_rsp.part.0>
		return 0;
   14ff2:	2400      	movs	r4, #0
}
   14ff4:	4620      	mov	r0, r4
   14ff6:	b00c      	add	sp, #48	; 0x30
   14ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   14ffc:	2101      	movs	r1, #1
   14ffe:	3008      	adds	r0, #8
	data.uuid = uuid;
   15000:	e9cd 5806 	strd	r5, r8, [sp, #24]
   15004:	f001 fb6e 	bl	166e4 <net_buf_simple_add>
	data.rsp->len = 0U;
   15008:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1500c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1500e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15010:	4a0d      	ldr	r2, [pc, #52]	; (15048 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
   15012:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15016:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15018:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1501c:	4630      	mov	r0, r6
   1501e:	ab06      	add	r3, sp, #24
   15020:	f009 fed5 	bl	1edce <bt_gatt_foreach_attr>
	if (data.err) {
   15024:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   15028:	b12c      	cbz	r4, 15036 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   1502a:	9808      	ldr	r0, [sp, #32]
   1502c:	f001 fa2a 	bl	16484 <net_buf_unref>
	if (!req) {
   15030:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   15034:	e7d8      	b.n	14fe8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15036:	4a05      	ldr	r2, [pc, #20]	; (1504c <att_read_type_req+0xc4>)
   15038:	9908      	ldr	r1, [sp, #32]
   1503a:	4628      	mov	r0, r5
   1503c:	f00a f834 	bl	1f0a8 <bt_att_chan_send_rsp>
	return 0;
   15040:	e7d8      	b.n	14ff4 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   15042:	2404      	movs	r4, #4
   15044:	e7d6      	b.n	14ff4 <att_read_type_req+0x6c>
   15046:	bf00      	nop
   15048:	00014791 	.word	0x00014791
   1504c:	0001f19d 	.word	0x0001f19d

00015050 <att_find_type_req>:
{
   15050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15054:	4688      	mov	r8, r1
   15056:	b086      	sub	sp, #24
   15058:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1505a:	2106      	movs	r1, #6
   1505c:	f108 0008 	add.w	r0, r8, #8
   15060:	f001 fb1e 	bl	166a0 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   15064:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   15066:	b317      	cbz	r7, 150ae <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   15068:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   1506c:	f1b9 0f00 	cmp.w	r9, #0
   15070:	d01c      	beq.n	150ac <att_find_type_req+0x5c>
	if (start > end) {
   15072:	454f      	cmp	r7, r9
   15074:	d81b      	bhi.n	150ae <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   15076:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   15078:	f8ad 3002 	strh.w	r3, [sp, #2]
   1507c:	2400      	movs	r4, #0
   1507e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15082:	a901      	add	r1, sp, #4
   15084:	4668      	mov	r0, sp
	value = buf->data;
   15086:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1508a:	f88d 4000 	strb.w	r4, [sp]
   1508e:	f88d 4004 	strb.w	r4, [sp, #4]
   15092:	f8ad 3006 	strh.w	r3, [sp, #6]
   15096:	f008 fffd 	bl	1e094 <bt_uuid_cmp>
   1509a:	4606      	mov	r6, r0
   1509c:	b190      	cbz	r0, 150c4 <att_find_type_req+0x74>
	if (!req) {
   1509e:	230a      	movs	r3, #10
   150a0:	463a      	mov	r2, r7
   150a2:	2106      	movs	r1, #6
   150a4:	4628      	mov	r0, r5
   150a6:	f7ff fd65 	bl	14b74 <send_err_rsp.part.0>
		return 0;
   150aa:	e007      	b.n	150bc <att_find_type_req+0x6c>
			*err = 0U;
   150ac:	464f      	mov	r7, r9
	if (!req) {
   150ae:	2301      	movs	r3, #1
   150b0:	463a      	mov	r2, r7
   150b2:	2106      	movs	r1, #6
   150b4:	4628      	mov	r0, r5
   150b6:	f7ff fd5d 	bl	14b74 <send_err_rsp.part.0>
		return 0;
   150ba:	2400      	movs	r4, #0
}
   150bc:	4620      	mov	r0, r4
   150be:	b006      	add	sp, #24
   150c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   150c4:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   150c8:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   150cc:	4601      	mov	r1, r0
   150ce:	2214      	movs	r2, #20
   150d0:	a801      	add	r0, sp, #4
   150d2:	f00b fcd8 	bl	20a86 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   150d6:	4632      	mov	r2, r6
   150d8:	2107      	movs	r1, #7
   150da:	4640      	mov	r0, r8
   150dc:	f00a f98c 	bl	1f3f8 <bt_att_create_pdu>
   150e0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   150e2:	b1e0      	cbz	r0, 1511e <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   150e4:	230a      	movs	r3, #10
   150e6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   150ea:	4a0e      	ldr	r2, [pc, #56]	; (15124 <att_find_type_req+0xd4>)
	data.value_len = value_len;
   150ec:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   150f0:	ab01      	add	r3, sp, #4
   150f2:	4649      	mov	r1, r9
   150f4:	4638      	mov	r0, r7
	data.value = value;
   150f6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   150fa:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   150fc:	f009 fe67 	bl	1edce <bt_gatt_foreach_attr>
	if (data.err) {
   15100:	f89d 4015 	ldrb.w	r4, [sp, #21]
   15104:	b12c      	cbz	r4, 15112 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   15106:	9802      	ldr	r0, [sp, #8]
   15108:	f001 f9bc 	bl	16484 <net_buf_unref>
	if (!req) {
   1510c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15110:	e7ce      	b.n	150b0 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15112:	4a05      	ldr	r2, [pc, #20]	; (15128 <att_find_type_req+0xd8>)
   15114:	9902      	ldr	r1, [sp, #8]
   15116:	4628      	mov	r0, r5
   15118:	f009 ffc6 	bl	1f0a8 <bt_att_chan_send_rsp>
	return 0;
   1511c:	e7ce      	b.n	150bc <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1511e:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   15120:	e7cc      	b.n	150bc <att_find_type_req+0x6c>
   15122:	bf00      	nop
   15124:	0001eefb 	.word	0x0001eefb
   15128:	0001f19d 	.word	0x0001f19d

0001512c <att_find_info_req>:
{
   1512c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1512e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   15130:	881e      	ldrh	r6, [r3, #0]
{
   15132:	b085      	sub	sp, #20
   15134:	4605      	mov	r5, r0
	if (!start || !end) {
   15136:	b19e      	cbz	r6, 15160 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   15138:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   1513a:	b184      	cbz	r4, 1515e <att_find_info_req+0x32>
	if (start > end) {
   1513c:	42b4      	cmp	r4, r6
   1513e:	d30f      	bcc.n	15160 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   15140:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   15142:	2210      	movs	r2, #16
   15144:	2100      	movs	r1, #0
   15146:	4668      	mov	r0, sp
   15148:	f00b fc9d 	bl	20a86 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1514c:	2200      	movs	r2, #0
   1514e:	2105      	movs	r1, #5
   15150:	4638      	mov	r0, r7
   15152:	f00a f951 	bl	1f3f8 <bt_att_create_pdu>
   15156:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   15158:	b958      	cbnz	r0, 15172 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1515a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1515c:	e007      	b.n	1516e <att_find_info_req+0x42>
			*err = 0U;
   1515e:	4626      	mov	r6, r4
	if (!req) {
   15160:	2301      	movs	r3, #1
   15162:	4632      	mov	r2, r6
   15164:	2104      	movs	r1, #4
   15166:	4628      	mov	r0, r5
   15168:	f7ff fd04 	bl	14b74 <send_err_rsp.part.0>
	return 0;
   1516c:	2000      	movs	r0, #0
}
   1516e:	b005      	add	sp, #20
   15170:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   15172:	4621      	mov	r1, r4
   15174:	4a09      	ldr	r2, [pc, #36]	; (1519c <att_find_info_req+0x70>)
	data.chan = chan;
   15176:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   15178:	466b      	mov	r3, sp
   1517a:	4630      	mov	r0, r6
   1517c:	f009 fe27 	bl	1edce <bt_gatt_foreach_attr>
	if (!data.rsp) {
   15180:	9c02      	ldr	r4, [sp, #8]
   15182:	b924      	cbnz	r4, 1518e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   15184:	9801      	ldr	r0, [sp, #4]
   15186:	f001 f97d 	bl	16484 <net_buf_unref>
	if (!req) {
   1518a:	230a      	movs	r3, #10
   1518c:	e7e9      	b.n	15162 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1518e:	4a04      	ldr	r2, [pc, #16]	; (151a0 <att_find_info_req+0x74>)
   15190:	9901      	ldr	r1, [sp, #4]
   15192:	4628      	mov	r0, r5
   15194:	f009 ff88 	bl	1f0a8 <bt_att_chan_send_rsp>
   15198:	e7e8      	b.n	1516c <att_find_info_req+0x40>
   1519a:	bf00      	nop
   1519c:	0001f0db 	.word	0x0001f0db
   151a0:	0001f19d 	.word	0x0001f19d

000151a4 <att_mtu_req>:
{
   151a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   151a6:	6803      	ldr	r3, [r0, #0]
{
   151a8:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   151aa:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   151ac:	f3bf 8f5b 	dmb	ish
   151b0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   151b4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   151b8:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   151bc:	071b      	lsls	r3, r3, #28
   151be:	d41e      	bmi.n	151fe <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
   151c0:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   151c2:	881b      	ldrh	r3, [r3, #0]
   151c4:	2b16      	cmp	r3, #22
   151c6:	d91c      	bls.n	15202 <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   151c8:	2202      	movs	r2, #2
   151ca:	2103      	movs	r1, #3
   151cc:	f00a f914 	bl	1f3f8 <bt_att_create_pdu>
	if (!pdu) {
   151d0:	4606      	mov	r6, r0
   151d2:	b1c0      	cbz	r0, 15206 <att_mtu_req+0x62>
	return net_buf_simple_add(&buf->b, len);
   151d4:	2102      	movs	r1, #2
   151d6:	3008      	adds	r0, #8
   151d8:	f001 fa84 	bl	166e4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   151dc:	2717      	movs	r7, #23
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   151de:	4a0b      	ldr	r2, [pc, #44]	; (1520c <att_mtu_req+0x68>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   151e0:	7007      	strb	r7, [r0, #0]
   151e2:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   151e4:	4631      	mov	r1, r6
   151e6:	4620      	mov	r0, r4
   151e8:	f009 ff5e 	bl	1f0a8 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   151ec:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   151ee:	f8a4 707a 	strh.w	r7, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   151f2:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   151f6:	f009 fdaf 	bl	1ed58 <att_chan_mtu_updated>
	return 0;
   151fa:	4628      	mov	r0, r5
}
   151fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   151fe:	2006      	movs	r0, #6
   15200:	e7fc      	b.n	151fc <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
   15202:	2004      	movs	r0, #4
   15204:	e7fa      	b.n	151fc <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
   15206:	200e      	movs	r0, #14
   15208:	e7f8      	b.n	151fc <att_mtu_req+0x58>
   1520a:	bf00      	nop
   1520c:	0001f19d 	.word	0x0001f19d

00015210 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   15210:	b513      	push	{r0, r1, r4, lr}
   15212:	4602      	mov	r2, r0
   15214:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   15216:	4808      	ldr	r0, [pc, #32]	; (15238 <bt_att_req_alloc+0x28>)
   15218:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   1521a:	2400      	movs	r4, #0
   1521c:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1521e:	f004 f93f 	bl	194a0 <k_mem_slab_alloc>
   15222:	4601      	mov	r1, r0
   15224:	b930      	cbnz	r0, 15234 <bt_att_req_alloc+0x24>
   15226:	9801      	ldr	r0, [sp, #4]
   15228:	2210      	movs	r2, #16
   1522a:	f00b fc2c 	bl	20a86 <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
   1522e:	9801      	ldr	r0, [sp, #4]
}
   15230:	b002      	add	sp, #8
   15232:	bd10      	pop	{r4, pc}
		return NULL;
   15234:	4620      	mov	r0, r4
   15236:	e7fb      	b.n	15230 <bt_att_req_alloc+0x20>
   15238:	20000614 	.word	0x20000614

0001523c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1523c:	b507      	push	{r0, r1, r2, lr}
   1523e:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   15240:	6880      	ldr	r0, [r0, #8]
   15242:	b120      	cbz	r0, 1524e <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   15244:	f001 f91e 	bl	16484 <net_buf_unref>
		req->buf = NULL;
   15248:	9b01      	ldr	r3, [sp, #4]
   1524a:	2200      	movs	r2, #0
   1524c:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1524e:	4803      	ldr	r0, [pc, #12]	; (1525c <bt_att_req_free+0x20>)
   15250:	a901      	add	r1, sp, #4
   15252:	f004 f991 	bl	19578 <k_mem_slab_free>
}
   15256:	b003      	add	sp, #12
   15258:	f85d fb04 	ldr.w	pc, [sp], #4
   1525c:	20000614 	.word	0x20000614

00015260 <att_handle_rsp>:
{
   15260:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   15264:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   15266:	f500 7090 	add.w	r0, r0, #288	; 0x120
{
   1526a:	4688      	mov	r8, r1
   1526c:	4691      	mov	r9, r2
   1526e:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   15270:	f005 fba8 	bl	1a9c4 <k_work_cancel_delayable>
	if (!chan->req) {
   15274:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
   15278:	2600      	movs	r6, #0
   1527a:	b1f0      	cbz	r0, 152ba <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   1527c:	4b10      	ldr	r3, [pc, #64]	; (152c0 <att_handle_rsp+0x60>)
   1527e:	4298      	cmp	r0, r3
   15280:	d112      	bne.n	152a8 <att_handle_rsp+0x48>
		chan->req = NULL;
   15282:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
	bt_att_func_t func = NULL;
   15286:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   15288:	6820      	ldr	r0, [r4, #0]
   1528a:	f009 ffcf 	bl	1f22c <att_req_send_process>
	if (func) {
   1528e:	b13d      	cbz	r5, 152a0 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   15290:	6820      	ldr	r0, [r4, #0]
   15292:	f8cd a000 	str.w	sl, [sp]
   15296:	6800      	ldr	r0, [r0, #0]
   15298:	464b      	mov	r3, r9
   1529a:	4642      	mov	r2, r8
   1529c:	4639      	mov	r1, r7
   1529e:	47a8      	blx	r5
}
   152a0:	2000      	movs	r0, #0
   152a2:	b002      	add	sp, #8
   152a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   152a8:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   152aa:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   152ac:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   152b0:	f7ff ffc4 	bl	1523c <bt_att_req_free>
	chan->req = NULL;
   152b4:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
   152b8:	e7e6      	b.n	15288 <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
   152ba:	4605      	mov	r5, r0
   152bc:	e7e4      	b.n	15288 <att_handle_rsp+0x28>
   152be:	bf00      	nop
   152c0:	20001dec 	.word	0x20001dec

000152c4 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   152c4:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   152c8:	b143      	cbz	r3, 152dc <att_error_rsp+0x18>
   152ca:	4a05      	ldr	r2, [pc, #20]	; (152e0 <att_error_rsp+0x1c>)
   152cc:	4293      	cmp	r3, r2
   152ce:	d005      	beq.n	152dc <att_error_rsp+0x18>
	err = rsp->error;
   152d0:	688b      	ldr	r3, [r1, #8]
   152d2:	78db      	ldrb	r3, [r3, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   152d4:	2200      	movs	r2, #0
   152d6:	4611      	mov	r1, r2
   152d8:	f7ff bfc2 	b.w	15260 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   152dc:	230e      	movs	r3, #14
   152de:	e7f9      	b.n	152d4 <att_error_rsp+0x10>
   152e0:	20001dec 	.word	0x20001dec

000152e4 <bt_att_disconnected>:
{
   152e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   152e6:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   152ea:	b085      	sub	sp, #20
   152ec:	4604      	mov	r4, r0
	if (!att_chan->att) {
   152ee:	b385      	cbz	r5, 15352 <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   152f0:	f500 71a6 	add.w	r1, r0, #332	; 0x14c
   152f4:	f105 0028 	add.w	r0, r5, #40	; 0x28
   152f8:	f009 fcad 	bl	1ec56 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   152fc:	f1a4 0608 	sub.w	r6, r4, #8
   15300:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
   15304:	2200      	movs	r2, #0
   15306:	2300      	movs	r3, #0
   15308:	4638      	mov	r0, r7
   1530a:	f001 f829 	bl	16360 <net_buf_get>
   1530e:	4602      	mov	r2, r0
   15310:	bb08      	cbnz	r0, 15356 <bt_att_disconnected+0x72>
	if (chan->req) {
   15312:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   15316:	b123      	cbz	r3, 15322 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   15318:	4601      	mov	r1, r0
   1531a:	230e      	movs	r3, #14
   1531c:	4630      	mov	r0, r6
   1531e:	f7ff ff9f 	bl	15260 <att_handle_rsp>
	chan->att = NULL;
   15322:	2300      	movs	r3, #0
   15324:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   15328:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1532a:	b993      	cbnz	r3, 15352 <bt_att_disconnected+0x6e>
	att_reset(att);
   1532c:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1532e:	9803      	ldr	r0, [sp, #12]
   15330:	2200      	movs	r2, #0
   15332:	2300      	movs	r3, #0
   15334:	300c      	adds	r0, #12
   15336:	f001 f813 	bl	16360 <net_buf_get>
   1533a:	b978      	cbnz	r0, 1535c <bt_att_disconnected+0x78>
	att->conn = NULL;
   1533c:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1533e:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
   15340:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   15342:	b976      	cbnz	r6, 15362 <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
   15344:	4813      	ldr	r0, [pc, #76]	; (15394 <bt_att_disconnected+0xb0>)
   15346:	a903      	add	r1, sp, #12
   15348:	f004 f916 	bl	19578 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   1534c:	6820      	ldr	r0, [r4, #0]
   1534e:	f000 fe7f 	bl	16050 <bt_gatt_disconnected>
}
   15352:	b005      	add	sp, #20
   15354:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   15356:	f001 f895 	bl	16484 <net_buf_unref>
   1535a:	e7d3      	b.n	15304 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   1535c:	f001 f892 	bl	16484 <net_buf_unref>
   15360:	e7e5      	b.n	1532e <bt_att_disconnected+0x4a>
	return node->next;
   15362:	6835      	ldr	r5, [r6, #0]
   15364:	2d00      	cmp	r5, #0
   15366:	bf38      	it	cc
   15368:	2500      	movcc	r5, #0
		if (req->func) {
   1536a:	6877      	ldr	r7, [r6, #4]
   1536c:	b137      	cbz	r7, 1537c <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1536e:	68f3      	ldr	r3, [r6, #12]
   15370:	9300      	str	r3, [sp, #0]
   15372:	2300      	movs	r3, #0
   15374:	461a      	mov	r2, r3
   15376:	210e      	movs	r1, #14
   15378:	4618      	mov	r0, r3
   1537a:	47b8      	blx	r7
		bt_att_req_free(req);
   1537c:	4630      	mov	r0, r6
   1537e:	f7ff ff5d 	bl	1523c <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   15382:	2d00      	cmp	r5, #0
   15384:	d0de      	beq.n	15344 <bt_att_disconnected+0x60>
   15386:	682b      	ldr	r3, [r5, #0]
   15388:	2b00      	cmp	r3, #0
   1538a:	bf38      	it	cc
   1538c:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1538e:	462e      	mov	r6, r5
   15390:	461d      	mov	r5, r3
   15392:	e7ea      	b.n	1536a <bt_att_disconnected+0x86>
   15394:	200005d4 	.word	0x200005d4

00015398 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   15398:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1539c:	460c      	mov	r4, r1
   1539e:	4617      	mov	r7, r2
   153a0:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   153a2:	4605      	mov	r5, r0
   153a4:	b958      	cbnz	r0, 153be <bt_att_send+0x26>
   153a6:	492f      	ldr	r1, [pc, #188]	; (15464 <bt_att_send+0xcc>)
   153a8:	482f      	ldr	r0, [pc, #188]	; (15468 <bt_att_send+0xd0>)
   153aa:	4a30      	ldr	r2, [pc, #192]	; (1546c <bt_att_send+0xd4>)
   153ac:	f640 33f2 	movw	r3, #3058	; 0xbf2
   153b0:	f008 fa00 	bl	1d7b4 <printk>
   153b4:	482d      	ldr	r0, [pc, #180]	; (1546c <bt_att_send+0xd4>)
   153b6:	f640 31f2 	movw	r1, #3058	; 0xbf2
   153ba:	f008 fc55 	bl	1dc68 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   153be:	b95c      	cbnz	r4, 153d8 <bt_att_send+0x40>
   153c0:	492b      	ldr	r1, [pc, #172]	; (15470 <bt_att_send+0xd8>)
   153c2:	4829      	ldr	r0, [pc, #164]	; (15468 <bt_att_send+0xd0>)
   153c4:	4a29      	ldr	r2, [pc, #164]	; (1546c <bt_att_send+0xd4>)
   153c6:	f640 33f3 	movw	r3, #3059	; 0xbf3
   153ca:	f008 f9f3 	bl	1d7b4 <printk>
   153ce:	4827      	ldr	r0, [pc, #156]	; (1546c <bt_att_send+0xd4>)
   153d0:	f640 31f3 	movw	r1, #3059	; 0xbf3
   153d4:	f008 fc48 	bl	1dc68 <assert_post_action>

	att = att_get(conn);
   153d8:	4628      	mov	r0, r5
   153da:	f009 feed 	bl	1f1b8 <att_get>
	if (!att) {
   153de:	4606      	mov	r6, r0
   153e0:	b938      	cbnz	r0, 153f2 <bt_att_send+0x5a>
		net_buf_unref(buf);
   153e2:	4620      	mov	r0, r4
   153e4:	f001 f84e 	bl	16484 <net_buf_unref>
		return -ENOTCONN;
   153e8:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   153ec:	b002      	add	sp, #8
   153ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   153f2:	b147      	cbz	r7, 15406 <bt_att_send+0x6e>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   153f4:	f8cd 8000 	str.w	r8, [sp]
   153f8:	463b      	mov	r3, r7
   153fa:	4622      	mov	r2, r4
   153fc:	2104      	movs	r1, #4
   153fe:	4628      	mov	r0, r5
   15400:	f009 fb45 	bl	1ea8e <bt_l2cap_send_cb>
   15404:	e7f2      	b.n	153ec <bt_att_send+0x54>
	net_buf_put(&att->tx_queue, buf);
   15406:	f100 070c 	add.w	r7, r0, #12
   1540a:	4621      	mov	r1, r4
   1540c:	4638      	mov	r0, r7
   1540e:	f001 f805 	bl	1641c <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   15412:	2200      	movs	r2, #0
   15414:	2300      	movs	r3, #0
   15416:	4638      	mov	r0, r7
   15418:	f000 ffa2 	bl	16360 <net_buf_get>
	if (!buf) {
   1541c:	4605      	mov	r5, r0
   1541e:	b908      	cbnz	r0, 15424 <bt_att_send+0x8c>
	return 0;
   15420:	2000      	movs	r0, #0
   15422:	e7e3      	b.n	153ec <bt_att_send+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15424:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   15426:	b1c3      	cbz	r3, 1545a <bt_att_send+0xc2>
   15428:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1542c:	d015      	beq.n	1545a <bt_att_send+0xc2>
   1542e:	681c      	ldr	r4, [r3, #0]
   15430:	b10c      	cbz	r4, 15436 <bt_att_send+0x9e>
   15432:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
	return chan_send(chan, buf, cb);
   15436:	2200      	movs	r2, #0
   15438:	4629      	mov	r1, r5
   1543a:	f7ff f9fd 	bl	14838 <chan_send>
		if (err >= 0) {
   1543e:	2800      	cmp	r0, #0
   15440:	daee      	bge.n	15420 <bt_att_send+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15442:	b154      	cbz	r4, 1545a <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15444:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   15448:	d004      	beq.n	15454 <bt_att_send+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1544a:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   1544e:	b10b      	cbz	r3, 15454 <bt_att_send+0xbc>
   15450:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   15454:	4620      	mov	r0, r4
   15456:	461c      	mov	r4, r3
   15458:	e7ed      	b.n	15436 <bt_att_send+0x9e>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1545a:	4629      	mov	r1, r5
   1545c:	4638      	mov	r0, r7
   1545e:	f00b f9b6 	bl	207ce <k_queue_prepend>
   15462:	e7dd      	b.n	15420 <bt_att_send+0x88>
   15464:	00022379 	.word	0x00022379
   15468:	00021650 	.word	0x00021650
   1546c:	00022319 	.word	0x00022319
   15470:	0002207c 	.word	0x0002207c

00015474 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   15474:	b538      	push	{r3, r4, r5, lr}
   15476:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   15478:	4605      	mov	r5, r0
   1547a:	b958      	cbnz	r0, 15494 <bt_att_req_send+0x20>
   1547c:	4916      	ldr	r1, [pc, #88]	; (154d8 <bt_att_req_send+0x64>)
   1547e:	4817      	ldr	r0, [pc, #92]	; (154dc <bt_att_req_send+0x68>)
   15480:	4a17      	ldr	r2, [pc, #92]	; (154e0 <bt_att_req_send+0x6c>)
   15482:	f640 430f 	movw	r3, #3087	; 0xc0f
   15486:	f008 f995 	bl	1d7b4 <printk>
   1548a:	4815      	ldr	r0, [pc, #84]	; (154e0 <bt_att_req_send+0x6c>)
   1548c:	f640 410f 	movw	r1, #3087	; 0xc0f
   15490:	f008 fbea 	bl	1dc68 <assert_post_action>
	__ASSERT_NO_MSG(req);
   15494:	b95c      	cbnz	r4, 154ae <bt_att_req_send+0x3a>
   15496:	4913      	ldr	r1, [pc, #76]	; (154e4 <bt_att_req_send+0x70>)
   15498:	4810      	ldr	r0, [pc, #64]	; (154dc <bt_att_req_send+0x68>)
   1549a:	4a11      	ldr	r2, [pc, #68]	; (154e0 <bt_att_req_send+0x6c>)
   1549c:	f44f 6341 	mov.w	r3, #3088	; 0xc10
   154a0:	f008 f988 	bl	1d7b4 <printk>
   154a4:	480e      	ldr	r0, [pc, #56]	; (154e0 <bt_att_req_send+0x6c>)
   154a6:	f44f 6141 	mov.w	r1, #3088	; 0xc10
   154aa:	f008 fbdd 	bl	1dc68 <assert_post_action>

	att = att_get(conn);
   154ae:	4628      	mov	r0, r5
   154b0:	f009 fe82 	bl	1f1b8 <att_get>
	if (!att) {
   154b4:	b160      	cbz	r0, 154d0 <bt_att_req_send+0x5c>
	parent->next = child;
   154b6:	2300      	movs	r3, #0
   154b8:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   154ba:	6883      	ldr	r3, [r0, #8]
   154bc:	b92b      	cbnz	r3, 154ca <bt_att_req_send+0x56>
	list->head = node;
   154be:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   154c2:	f009 feb3 	bl	1f22c <att_req_send_process>

	return 0;
   154c6:	2000      	movs	r0, #0
}
   154c8:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   154ca:	601c      	str	r4, [r3, #0]
	list->tail = node;
   154cc:	6084      	str	r4, [r0, #8]
}
   154ce:	e7f8      	b.n	154c2 <bt_att_req_send+0x4e>
		return -ENOTCONN;
   154d0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   154d4:	e7f8      	b.n	154c8 <bt_att_req_send+0x54>
   154d6:	bf00      	nop
   154d8:	00022379 	.word	0x00022379
   154dc:	00021650 	.word	0x00021650
   154e0:	00022319 	.word	0x00022319
   154e4:	0002235e 	.word	0x0002235e

000154e8 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   154e8:	b510      	push	{r4, lr}
   154ea:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   154ec:	b348      	cbz	r0, 15542 <bt_att_req_cancel+0x5a>
   154ee:	b341      	cbz	r1, 15542 <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
   154f0:	f009 fe62 	bl	1f1b8 <att_get>
	if (!att) {
   154f4:	b328      	cbz	r0, 15542 <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   154f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
   154f8:	b15b      	cbz	r3, 15512 <bt_att_req_cancel+0x2a>
   154fa:	f5b3 71aa 	subs.w	r1, r3, #340	; 0x154
   154fe:	d008      	beq.n	15512 <bt_att_req_cancel+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15500:	681b      	ldr	r3, [r3, #0]
   15502:	b10b      	cbz	r3, 15508 <bt_att_req_cancel+0x20>
   15504:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
	if (chan->req != req) {
   15508:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   1550c:	4294      	cmp	r4, r2
   1550e:	d005      	beq.n	1551c <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15510:	b963      	cbnz	r3, 1552c <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   15512:	4621      	mov	r1, r4
   15514:	3004      	adds	r0, #4
   15516:	f009 fb9e 	bl	1ec56 <sys_slist_find_and_remove>
   1551a:	e002      	b.n	15522 <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
   1551c:	4b09      	ldr	r3, [pc, #36]	; (15544 <bt_att_req_cancel+0x5c>)
   1551e:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc

	bt_att_req_free(req);
   15522:	4620      	mov	r0, r4
}
   15524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   15528:	f7ff be88 	b.w	1523c <bt_att_req_free>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1552c:	f513 72aa 	adds.w	r2, r3, #340	; 0x154
   15530:	d004      	beq.n	1553c <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15532:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15536:	b10a      	cbz	r2, 1553c <bt_att_req_cancel+0x54>
   15538:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
{
   1553c:	4619      	mov	r1, r3
   1553e:	4613      	mov	r3, r2
   15540:	e7e2      	b.n	15508 <bt_att_req_cancel+0x20>
}
   15542:	bd10      	pop	{r4, pc}
   15544:	20001dec 	.word	0x20001dec

00015548 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   15548:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1554a:	4d0d      	ldr	r5, [pc, #52]	; (15580 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1554c:	4604      	mov	r4, r0
   1554e:	b960      	cbnz	r0, 1556a <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   15550:	9000      	str	r0, [sp, #0]
   15552:	4669      	mov	r1, sp
   15554:	f8cd 0003 	str.w	r0, [sp, #3]
   15558:	1c68      	adds	r0, r5, #1
   1555a:	f00a f83d 	bl	1f5d8 <bt_addr_le_cmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1555e:	2800      	cmp	r0, #0
   15560:	bf08      	it	eq
   15562:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   15564:	4620      	mov	r0, r4
   15566:	b003      	add	sp, #12
   15568:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1556a:	462a      	mov	r2, r5
   1556c:	f812 1b01 	ldrb.w	r1, [r2], #1
   15570:	f009 f9c7 	bl	1e902 <bt_conn_is_peer_addr_le>
   15574:	2800      	cmp	r0, #0
	return NULL;
   15576:	bf14      	ite	ne
   15578:	462c      	movne	r4, r5
   1557a:	2400      	moveq	r4, #0
   1557c:	e7f2      	b.n	15564 <find_cf_cfg+0x1c>
   1557e:	bf00      	nop
   15580:	20001e04 	.word	0x20001e04

00015584 <find_sc_cfg>:
{
   15584:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   15586:	4c06      	ldr	r4, [pc, #24]	; (155a0 <find_sc_cfg+0x1c>)
   15588:	7823      	ldrb	r3, [r4, #0]
   1558a:	4283      	cmp	r3, r0
   1558c:	d103      	bne.n	15596 <find_sc_cfg+0x12>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1558e:	1c60      	adds	r0, r4, #1
   15590:	f00a f822 	bl	1f5d8 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   15594:	b108      	cbz	r0, 1559a <find_sc_cfg+0x16>
	return NULL;
   15596:	2000      	movs	r0, #0
}
   15598:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1559a:	4620      	mov	r0, r4
   1559c:	e7fc      	b.n	15598 <find_sc_cfg+0x14>
   1559e:	bf00      	nop
   155a0:	200020a4 	.word	0x200020a4

000155a4 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
   155a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   155a6:	4d0d      	ldr	r5, [pc, #52]	; (155dc <gatt_sub_find+0x38>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
   155a8:	4604      	mov	r4, r0
   155aa:	b960      	cbnz	r0, 155c6 <gatt_sub_find+0x22>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   155ac:	9000      	str	r0, [sp, #0]
   155ae:	4669      	mov	r1, sp
   155b0:	f8cd 0003 	str.w	r0, [sp, #3]
   155b4:	1c68      	adds	r0, r5, #1
   155b6:	f00a f80f 	bl	1f5d8 <bt_addr_le_cmp>
		struct gatt_sub *sub = &subscriptions[i];
   155ba:	2800      	cmp	r0, #0
   155bc:	bf08      	it	eq
   155be:	462c      	moveq	r4, r5
			return sub;
		}
	}

	return NULL;
}
   155c0:	4620      	mov	r0, r4
   155c2:	b003      	add	sp, #12
   155c4:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   155c6:	462a      	mov	r2, r5
   155c8:	f812 1b01 	ldrb.w	r1, [r2], #1
   155cc:	f009 f999 	bl	1e902 <bt_conn_is_peer_addr_le>
   155d0:	2800      	cmp	r0, #0
	return NULL;
   155d2:	bf14      	ite	ne
   155d4:	462c      	movne	r4, r5
   155d6:	2400      	moveq	r4, #0
   155d8:	e7f2      	b.n	155c0 <gatt_sub_find+0x1c>
   155da:	bf00      	nop
   155dc:	20001e34 	.word	0x20001e34

000155e0 <gatt_sub_free>:
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   155e0:	6883      	ldr	r3, [r0, #8]
{
   155e2:	b513      	push	{r0, r1, r4, lr}
   155e4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   155e6:	b15b      	cbz	r3, 15600 <gatt_sub_free+0x20>
   155e8:	490a      	ldr	r1, [pc, #40]	; (15614 <gatt_sub_free+0x34>)
   155ea:	480b      	ldr	r0, [pc, #44]	; (15618 <gatt_sub_free+0x38>)
   155ec:	4a0b      	ldr	r2, [pc, #44]	; (1561c <gatt_sub_free+0x3c>)
   155ee:	f640 239c 	movw	r3, #2716	; 0xa9c
   155f2:	f008 f8df 	bl	1d7b4 <printk>
   155f6:	4809      	ldr	r0, [pc, #36]	; (1561c <gatt_sub_free+0x3c>)
   155f8:	f640 219c 	movw	r1, #2716	; 0xa9c
   155fc:	f008 fb34 	bl	1dc68 <assert_post_action>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   15600:	2300      	movs	r3, #0
   15602:	4669      	mov	r1, sp
   15604:	1c60      	adds	r0, r4, #1
   15606:	9300      	str	r3, [sp, #0]
   15608:	f8cd 3003 	str.w	r3, [sp, #3]
   1560c:	f009 ffff 	bl	1f60e <bt_addr_le_copy>
}
   15610:	b002      	add	sp, #8
   15612:	bd10      	pop	{r4, pc}
   15614:	000223ae 	.word	0x000223ae
   15618:	00021650 	.word	0x00021650
   1561c:	0002237e 	.word	0x0002237e

00015620 <sc_indicate_rsp>:
{
   15620:	b510      	push	{r4, lr}
   15622:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15624:	4814      	ldr	r0, [pc, #80]	; (15678 <sc_indicate_rsp+0x58>)
   15626:	f3bf 8f5b 	dmb	ish
   1562a:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1562e:	e853 2f00 	ldrex	r2, [r3]
   15632:	f022 0202 	bic.w	r2, r2, #2
   15636:	e843 2100 	strex	r1, r2, [r3]
   1563a:	2900      	cmp	r1, #0
   1563c:	d1f7      	bne.n	1562e <sc_indicate_rsp+0xe>
   1563e:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15642:	f3bf 8f5b 	dmb	ish
   15646:	6d03      	ldr	r3, [r0, #80]	; 0x50
   15648:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1564c:	07da      	lsls	r2, r3, #31
   1564e:	d504      	bpl.n	1565a <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   15650:	2200      	movs	r2, #0
   15652:	2300      	movs	r3, #0
   15654:	3020      	adds	r0, #32
   15656:	f005 f9af 	bl	1a9b8 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   1565a:	4620      	mov	r0, r4
   1565c:	f7ff ff74 	bl	15548 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   15660:	b140      	cbz	r0, 15674 <sc_indicate_rsp+0x54>
   15662:	7a03      	ldrb	r3, [r0, #8]
   15664:	07db      	lsls	r3, r3, #31
   15666:	d505      	bpl.n	15674 <sc_indicate_rsp+0x54>
}
   15668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1566c:	2100      	movs	r1, #0
   1566e:	300c      	adds	r0, #12
   15670:	f00a b931 	b.w	1f8d6 <atomic_set_bit>
}
   15674:	bd10      	pop	{r4, pc}
   15676:	bf00      	nop
   15678:	20001810 	.word	0x20001810

0001567c <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
   1567c:	b507      	push	{r0, r1, r2, lr}
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1567e:	2312      	movs	r3, #18
{
   15680:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   15682:	2104      	movs	r1, #4
   15684:	e9cd 3100 	strd	r3, r1, [sp]
   15688:	4b03      	ldr	r3, [pc, #12]	; (15698 <gatt_write_ccc+0x1c>)
   1568a:	4904      	ldr	r1, [pc, #16]	; (1569c <gatt_write_ccc+0x20>)
   1568c:	f00a f9e0 	bl	1fa50 <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len);
}
   15690:	b003      	add	sp, #12
   15692:	f85d fb04 	ldr.w	pc, [sp], #4
   15696:	bf00      	nop
   15698:	0001f89d 	.word	0x0001f89d
   1569c:	0001f9db 	.word	0x0001f9db

000156a0 <disconnected_cb>:
{
   156a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   156a4:	4b23      	ldr	r3, [pc, #140]	; (15734 <disconnected_cb+0x94>)
{
   156a6:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   156a8:	6882      	ldr	r2, [r0, #8]
   156aa:	429a      	cmp	r2, r3
{
   156ac:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   156ae:	d102      	bne.n	156b6 <disconnected_cb+0x16>
	ccc = attr->user_data;
   156b0:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   156b2:	8963      	ldrh	r3, [r4, #10]
   156b4:	bb03      	cbnz	r3, 156f8 <disconnected_cb+0x58>
}
   156b6:	2001      	movs	r0, #1
   156b8:	b002      	add	sp, #8
   156ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   156be:	f105 0890 	add.w	r8, r5, #144	; 0x90
   156c2:	7a28      	ldrb	r0, [r5, #8]
   156c4:	4641      	mov	r1, r8
   156c6:	f008 ffe7 	bl	1e698 <bt_addr_le_is_bonded>
   156ca:	b980      	cbnz	r0, 156ee <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
   156cc:	4b1a      	ldr	r3, [pc, #104]	; (15738 <disconnected_cb+0x98>)
   156ce:	429c      	cmp	r4, r3
   156d0:	d102      	bne.n	156d8 <disconnected_cb+0x38>
					sc_clear(conn);
   156d2:	4628      	mov	r0, r5
   156d4:	f00a f827 	bl	1f726 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   156d8:	2200      	movs	r2, #0
   156da:	4669      	mov	r1, sp
   156dc:	4630      	mov	r0, r6
   156de:	9200      	str	r2, [sp, #0]
   156e0:	f8cd 2003 	str.w	r2, [sp, #3]
   156e4:	f009 ff93 	bl	1f60e <bt_addr_le_copy>
	cfg->id = 0U;
   156e8:	7022      	strb	r2, [r4, #0]
	cfg->value = 0U;
   156ea:	8122      	strh	r2, [r4, #8]
	if (!value_used) {
   156ec:	e019      	b.n	15722 <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   156ee:	4641      	mov	r1, r8
   156f0:	4630      	mov	r0, r6
   156f2:	f009 ff8c 	bl	1f60e <bt_addr_le_copy>
	if (!value_used) {
   156f6:	e014      	b.n	15722 <disconnected_cb+0x82>
		if (!cfg->value) {
   156f8:	8923      	ldrh	r3, [r4, #8]
   156fa:	b193      	cbz	r3, 15722 <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   156fc:	4626      	mov	r6, r4
   156fe:	4628      	mov	r0, r5
   15700:	f816 1b01 	ldrb.w	r1, [r6], #1
   15704:	4632      	mov	r2, r6
   15706:	f009 f8fc 	bl	1e902 <bt_conn_is_peer_addr_le>
   1570a:	2800      	cmp	r0, #0
   1570c:	d1d7      	bne.n	156be <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1570e:	7820      	ldrb	r0, [r4, #0]
   15710:	4631      	mov	r1, r6
   15712:	f7fe fcb9 	bl	14088 <bt_conn_lookup_addr_le>
			if (tmp) {
   15716:	b120      	cbz	r0, 15722 <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   15718:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   1571a:	f7fe fa8b 	bl	13c34 <bt_conn_unref>
	if (!value_used) {
   1571e:	2d07      	cmp	r5, #7
   15720:	d0c9      	beq.n	156b6 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   15722:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   15724:	2100      	movs	r1, #0
   15726:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   15728:	2b00      	cmp	r3, #0
   1572a:	d0c4      	beq.n	156b6 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1572c:	4638      	mov	r0, r7
   1572e:	4798      	blx	r3
   15730:	e7c1      	b.n	156b6 <disconnected_cb+0x16>
   15732:	bf00      	nop
   15734:	0001f66b 	.word	0x0001f66b
   15738:	200004c8 	.word	0x200004c8

0001573c <bt_gatt_init>:
{
   1573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1573e:	4b28      	ldr	r3, [pc, #160]	; (157e0 <bt_gatt_init+0xa4>)
   15740:	f3bf 8f5b 	dmb	ish
   15744:	2201      	movs	r2, #1
   15746:	e853 1f00 	ldrex	r1, [r3]
   1574a:	2900      	cmp	r1, #0
   1574c:	d103      	bne.n	15756 <bt_gatt_init+0x1a>
   1574e:	e843 2000 	strex	r0, r2, [r3]
   15752:	2800      	cmp	r0, #0
   15754:	d1f7      	bne.n	15746 <bt_gatt_init+0xa>
   15756:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1575a:	d140      	bne.n	157de <bt_gatt_init+0xa2>
   1575c:	f3bf 8f5b 	dmb	ish
   15760:	4b20      	ldr	r3, [pc, #128]	; (157e4 <bt_gatt_init+0xa8>)
   15762:	e853 1f00 	ldrex	r1, [r3]
   15766:	2900      	cmp	r1, #0
   15768:	d103      	bne.n	15772 <bt_gatt_init+0x36>
   1576a:	e843 2000 	strex	r0, r2, [r3]
   1576e:	2800      	cmp	r0, #0
   15770:	d1f7      	bne.n	15762 <bt_gatt_init+0x26>
   15772:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   15776:	d02d      	beq.n	157d4 <bt_gatt_init+0x98>
	list->head = NULL;
   15778:	4b1b      	ldr	r3, [pc, #108]	; (157e8 <bt_gatt_init+0xac>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1577a:	491c      	ldr	r1, [pc, #112]	; (157ec <bt_gatt_init+0xb0>)
   1577c:	481c      	ldr	r0, [pc, #112]	; (157f0 <bt_gatt_init+0xb4>)
   1577e:	2200      	movs	r2, #0
	list->tail = NULL;
   15780:	e9c3 2200 	strd	r2, r2, [r3]
   15784:	f004 fff4 	bl	1a770 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   15788:	2300      	movs	r3, #0
   1578a:	4819      	ldr	r0, [pc, #100]	; (157f0 <bt_gatt_init+0xb4>)
   1578c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   15790:	f005 f896 	bl	1a8c0 <k_work_schedule>
}
   15794:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   15798:	4916      	ldr	r1, [pc, #88]	; (157f4 <bt_gatt_init+0xb8>)
   1579a:	4817      	ldr	r0, [pc, #92]	; (157f8 <bt_gatt_init+0xbc>)
   1579c:	f004 bfe8 	b.w	1a770 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   157a0:	4a16      	ldr	r2, [pc, #88]	; (157fc <bt_gatt_init+0xc0>)
   157a2:	6863      	ldr	r3, [r4, #4]
   157a4:	8811      	ldrh	r1, [r2, #0]
   157a6:	440b      	add	r3, r1
   157a8:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   157aa:	3408      	adds	r4, #8
   157ac:	42ac      	cmp	r4, r5
   157ae:	d90e      	bls.n	157ce <bt_gatt_init+0x92>
   157b0:	4913      	ldr	r1, [pc, #76]	; (15800 <bt_gatt_init+0xc4>)
   157b2:	4814      	ldr	r0, [pc, #80]	; (15804 <bt_gatt_init+0xc8>)
   157b4:	f240 434e 	movw	r3, #1102	; 0x44e
   157b8:	4632      	mov	r2, r6
   157ba:	f007 fffb 	bl	1d7b4 <printk>
   157be:	4812      	ldr	r0, [pc, #72]	; (15808 <bt_gatt_init+0xcc>)
   157c0:	f007 fff8 	bl	1d7b4 <printk>
   157c4:	f240 414e 	movw	r1, #1102	; 0x44e
   157c8:	4630      	mov	r0, r6
   157ca:	f008 fa4d 	bl	1dc68 <assert_post_action>
   157ce:	42bc      	cmp	r4, r7
   157d0:	d3e6      	bcc.n	157a0 <bt_gatt_init+0x64>
   157d2:	e7d1      	b.n	15778 <bt_gatt_init+0x3c>
   157d4:	4d0d      	ldr	r5, [pc, #52]	; (1580c <bt_gatt_init+0xd0>)
   157d6:	4c0e      	ldr	r4, [pc, #56]	; (15810 <bt_gatt_init+0xd4>)
   157d8:	4e0e      	ldr	r6, [pc, #56]	; (15814 <bt_gatt_init+0xd8>)
   157da:	462f      	mov	r7, r5
   157dc:	e7e6      	b.n	157ac <bt_gatt_init+0x70>
}
   157de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   157e0:	20001e14 	.word	0x20001e14
   157e4:	20001e30 	.word	0x20001e30
   157e8:	20001dfc 	.word	0x20001dfc
   157ec:	0001fb5d 	.word	0x0001fb5d
   157f0:	200017b8 	.word	0x200017b8
   157f4:	00015bf5 	.word	0x00015bf5
   157f8:	20001830 	.word	0x20001830
   157fc:	200020a2 	.word	0x200020a2
   15800:	000223cc 	.word	0x000223cc
   15804:	00021650 	.word	0x00021650
   15808:	00022125 	.word	0x00022125
   1580c:	00020f6c 	.word	0x00020f6c
   15810:	00020f5c 	.word	0x00020f5c
   15814:	0002237e 	.word	0x0002237e

00015818 <bt_gatt_attr_get_handle>:
{
   15818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
   1581c:	4604      	mov	r4, r0
   1581e:	b910      	cbnz	r0, 15826 <bt_gatt_attr_get_handle+0xe>
		return 0;
   15820:	2000      	movs	r0, #0
}
   15822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
   15826:	8a00      	ldrh	r0, [r0, #16]
   15828:	2800      	cmp	r0, #0
   1582a:	d1fa      	bne.n	15822 <bt_gatt_attr_get_handle+0xa>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1582c:	4f1a      	ldr	r7, [pc, #104]	; (15898 <bt_gatt_attr_get_handle+0x80>)
   1582e:	4d1b      	ldr	r5, [pc, #108]	; (1589c <bt_gatt_attr_get_handle+0x84>)
   15830:	f8df 9078 	ldr.w	r9, [pc, #120]	; 158ac <bt_gatt_attr_get_handle+0x94>
	uint16_t handle = 1;
   15834:	2601      	movs	r6, #1
   15836:	46b8      	mov	r8, r7
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15838:	42bd      	cmp	r5, r7
   1583a:	d90e      	bls.n	1585a <bt_gatt_attr_get_handle+0x42>
   1583c:	4918      	ldr	r1, [pc, #96]	; (158a0 <bt_gatt_attr_get_handle+0x88>)
   1583e:	4819      	ldr	r0, [pc, #100]	; (158a4 <bt_gatt_attr_get_handle+0x8c>)
   15840:	f240 5377 	movw	r3, #1399	; 0x577
   15844:	464a      	mov	r2, r9
   15846:	f007 ffb5 	bl	1d7b4 <printk>
   1584a:	4817      	ldr	r0, [pc, #92]	; (158a8 <bt_gatt_attr_get_handle+0x90>)
   1584c:	f007 ffb2 	bl	1d7b4 <printk>
   15850:	f240 5177 	movw	r1, #1399	; 0x577
   15854:	4648      	mov	r0, r9
   15856:	f008 fa07 	bl	1dc68 <assert_post_action>
   1585a:	4545      	cmp	r5, r8
   1585c:	d2e0      	bcs.n	15820 <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
   1585e:	e9d5 ec00 	ldrd	lr, ip, [r5]
   15862:	4574      	cmp	r4, lr
   15864:	d305      	bcc.n	15872 <bt_gatt_attr_get_handle+0x5a>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   15866:	2114      	movs	r1, #20
   15868:	fb01 e30c 	mla	r3, r1, ip, lr
   1586c:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   1586e:	429c      	cmp	r4, r3
   15870:	d90f      	bls.n	15892 <bt_gatt_attr_get_handle+0x7a>
			handle += static_svc->attr_count;
   15872:	eb06 030c 	add.w	r3, r6, ip
   15876:	b298      	uxth	r0, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15878:	3508      	adds	r5, #8
   1587a:	4606      	mov	r6, r0
   1587c:	e7dc      	b.n	15838 <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
   1587e:	fb01 e302 	mla	r3, r1, r2, lr
   15882:	429c      	cmp	r4, r3
   15884:	d0cd      	beq.n	15822 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   15886:	3201      	adds	r2, #1
   15888:	18b3      	adds	r3, r6, r2
   1588a:	4562      	cmp	r2, ip
   1588c:	b298      	uxth	r0, r3
   1588e:	d1f6      	bne.n	1587e <bt_gatt_attr_get_handle+0x66>
   15890:	e7f2      	b.n	15878 <bt_gatt_attr_get_handle+0x60>
   15892:	2200      	movs	r2, #0
   15894:	e7f8      	b.n	15888 <bt_gatt_attr_get_handle+0x70>
   15896:	bf00      	nop
   15898:	00020f6c 	.word	0x00020f6c
   1589c:	00020f5c 	.word	0x00020f5c
   158a0:	000223c5 	.word	0x000223c5
   158a4:	00021650 	.word	0x00021650
   158a8:	00022125 	.word	0x00022125
   158ac:	0002237e 	.word	0x0002237e

000158b0 <bt_gatt_foreach_attr_type>:
{
   158b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158b4:	b085      	sub	sp, #20
   158b6:	4607      	mov	r7, r0
   158b8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
   158bc:	9301      	str	r3, [sp, #4]
		num_matches = UINT16_MAX;
   158be:	f64f 73ff 	movw	r3, #65535	; 0xffff
   158c2:	2d00      	cmp	r5, #0
   158c4:	bf08      	it	eq
   158c6:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   158c8:	4b2d      	ldr	r3, [pc, #180]	; (15980 <bt_gatt_foreach_attr_type+0xd0>)
{
   158ca:	9102      	str	r1, [sp, #8]
	if (start_handle <= last_static_handle) {
   158cc:	881b      	ldrh	r3, [r3, #0]
   158ce:	4283      	cmp	r3, r0
{
   158d0:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   158d2:	d24e      	bcs.n	15972 <bt_gatt_foreach_attr_type+0xc2>
}
   158d4:	b005      	add	sp, #20
   158d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   158da:	6873      	ldr	r3, [r6, #4]
   158dc:	4423      	add	r3, r4
   158de:	42bb      	cmp	r3, r7
   158e0:	d244      	bcs.n	1596c <bt_gatt_foreach_attr_type+0xbc>
				handle += static_svc->attr_count;
   158e2:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   158e4:	3608      	adds	r6, #8
   158e6:	4556      	cmp	r6, sl
   158e8:	d90e      	bls.n	15908 <bt_gatt_foreach_attr_type+0x58>
   158ea:	4926      	ldr	r1, [pc, #152]	; (15984 <bt_gatt_foreach_attr_type+0xd4>)
   158ec:	4826      	ldr	r0, [pc, #152]	; (15988 <bt_gatt_foreach_attr_type+0xd8>)
   158ee:	f240 633b 	movw	r3, #1595	; 0x63b
   158f2:	465a      	mov	r2, fp
   158f4:	f007 ff5e 	bl	1d7b4 <printk>
   158f8:	4824      	ldr	r0, [pc, #144]	; (1598c <bt_gatt_foreach_attr_type+0xdc>)
   158fa:	f007 ff5b 	bl	1d7b4 <printk>
   158fe:	f240 613b 	movw	r1, #1595	; 0x63b
   15902:	4658      	mov	r0, fp
   15904:	f008 f9b0 	bl	1dc68 <assert_post_action>
   15908:	4b21      	ldr	r3, [pc, #132]	; (15990 <bt_gatt_foreach_attr_type+0xe0>)
   1590a:	429e      	cmp	r6, r3
   1590c:	d3e5      	bcc.n	158da <bt_gatt_foreach_attr_type+0x2a>
   1590e:	e7e1      	b.n	158d4 <bt_gatt_foreach_attr_type+0x24>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   15910:	5889      	ldr	r1, [r1, r2]
   15912:	9303      	str	r3, [sp, #12]
   15914:	4640      	mov	r0, r8
   15916:	f008 fbbd 	bl	1e094 <bt_uuid_cmp>
   1591a:	9b03      	ldr	r3, [sp, #12]
   1591c:	b198      	cbz	r0, 15946 <bt_gatt_foreach_attr_type+0x96>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1591e:	3401      	adds	r4, #1
   15920:	f109 0901 	add.w	r9, r9, #1
   15924:	b2a4      	uxth	r4, r4
   15926:	6873      	ldr	r3, [r6, #4]
   15928:	454b      	cmp	r3, r9
   1592a:	d9db      	bls.n	158e4 <bt_gatt_foreach_attr_type+0x34>
	if (handle > end_handle) {
   1592c:	9b02      	ldr	r3, [sp, #8]
   1592e:	429c      	cmp	r4, r3
   15930:	d8d0      	bhi.n	158d4 <bt_gatt_foreach_attr_type+0x24>
	if (handle < start_handle) {
   15932:	42bc      	cmp	r4, r7
   15934:	d3f3      	bcc.n	1591e <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   15936:	2314      	movs	r3, #20
   15938:	6831      	ldr	r1, [r6, #0]
   1593a:	fb03 f209 	mul.w	r2, r3, r9
   1593e:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   15940:	f1b8 0f00 	cmp.w	r8, #0
   15944:	d1e4      	bne.n	15910 <bt_gatt_foreach_attr_type+0x60>
	if (attr_data && attr_data != attr->user_data) {
   15946:	9a01      	ldr	r2, [sp, #4]
   15948:	b95a      	cbnz	r2, 15962 <bt_gatt_foreach_attr_type+0xb2>
	*num_matches -= 1;
   1594a:	3d01      	subs	r5, #1
   1594c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1594e:	4618      	mov	r0, r3
   15950:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15952:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15954:	4621      	mov	r1, r4
   15956:	4798      	blx	r3
	if (!*num_matches) {
   15958:	2d00      	cmp	r5, #0
   1595a:	d0bb      	beq.n	158d4 <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1595c:	2800      	cmp	r0, #0
   1595e:	d1de      	bne.n	1591e <bt_gatt_foreach_attr_type+0x6e>
   15960:	e7b8      	b.n	158d4 <bt_gatt_foreach_attr_type+0x24>
	if (attr_data && attr_data != attr->user_data) {
   15962:	68da      	ldr	r2, [r3, #12]
   15964:	9901      	ldr	r1, [sp, #4]
   15966:	4291      	cmp	r1, r2
   15968:	d1d9      	bne.n	1591e <bt_gatt_foreach_attr_type+0x6e>
   1596a:	e7ee      	b.n	1594a <bt_gatt_foreach_attr_type+0x9a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1596c:	f04f 0900 	mov.w	r9, #0
   15970:	e7d9      	b.n	15926 <bt_gatt_foreach_attr_type+0x76>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15972:	4e08      	ldr	r6, [pc, #32]	; (15994 <bt_gatt_foreach_attr_type+0xe4>)
   15974:	f8df a018 	ldr.w	sl, [pc, #24]	; 15990 <bt_gatt_foreach_attr_type+0xe0>
   15978:	f8df b01c 	ldr.w	fp, [pc, #28]	; 15998 <bt_gatt_foreach_attr_type+0xe8>
		uint16_t handle = 1;
   1597c:	2401      	movs	r4, #1
   1597e:	e7b2      	b.n	158e6 <bt_gatt_foreach_attr_type+0x36>
   15980:	200020a2 	.word	0x200020a2
   15984:	000223c5 	.word	0x000223c5
   15988:	00021650 	.word	0x00021650
   1598c:	00022125 	.word	0x00022125
   15990:	00020f6c 	.word	0x00020f6c
   15994:	00020f5c 	.word	0x00020f5c
   15998:	0002237e 	.word	0x0002237e

0001599c <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   1599c:	b510      	push	{r4, lr}
   1599e:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   159a0:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   159a2:	aa1c      	add	r2, sp, #112	; 0x70
   159a4:	4669      	mov	r1, sp
   159a6:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   159a8:	e9cd 3300 	strd	r3, r3, [sp]
   159ac:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   159b0:	f008 fa72 	bl	1de98 <tc_cmac_setup>
   159b4:	b320      	cbz	r0, 15a00 <db_hash_gen.isra.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   159b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   159ba:	2001      	movs	r0, #1
   159bc:	4a11      	ldr	r2, [pc, #68]	; (15a04 <db_hash_gen.isra.0+0x68>)
   159be:	ab04      	add	r3, sp, #16
   159c0:	f00a f8c1 	bl	1fb46 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   159c4:	4810      	ldr	r0, [pc, #64]	; (15a08 <db_hash_gen.isra.0+0x6c>)
   159c6:	a904      	add	r1, sp, #16
   159c8:	f008 fafd 	bl	1dfc6 <tc_cmac_final>
   159cc:	b1c0      	cbz	r0, 15a00 <db_hash_gen.isra.0+0x64>
   159ce:	4b0e      	ldr	r3, [pc, #56]	; (15a08 <db_hash_gen.isra.0+0x6c>)
   159d0:	2208      	movs	r2, #8
   159d2:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   159d6:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   159d8:	780c      	ldrb	r4, [r1, #0]
   159da:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   159de:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   159e0:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   159e4:	d1f7      	bne.n	159d6 <db_hash_gen.isra.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   159e6:	f3bf 8f5b 	dmb	ish
   159ea:	4b08      	ldr	r3, [pc, #32]	; (15a0c <db_hash_gen.isra.0+0x70>)
   159ec:	e853 2f00 	ldrex	r2, [r3]
   159f0:	f042 0204 	orr.w	r2, r2, #4
   159f4:	e843 2100 	strex	r1, r2, [r3]
   159f8:	2900      	cmp	r1, #0
   159fa:	d1f7      	bne.n	159ec <db_hash_gen.isra.0+0x50>
   159fc:	f3bf 8f5b 	dmb	ish
}
   15a00:	b048      	add	sp, #288	; 0x120
   15a02:	bd10      	pop	{r4, pc}
   15a04:	0001f52d 	.word	0x0001f52d
   15a08:	200017a8 	.word	0x200017a8
   15a0c:	20001860 	.word	0x20001860

00015a10 <gatt_indicate>:
{
   15a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15a14:	4615      	mov	r5, r2
   15a16:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   15a18:	2214      	movs	r2, #20
   15a1a:	6869      	ldr	r1, [r5, #4]
{
   15a1c:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   15a1e:	f00a f89f 	bl	1fb60 <bt_gatt_check_perm>
   15a22:	2800      	cmp	r0, #0
   15a24:	d139      	bne.n	15a9a <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   15a26:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   15a2a:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   15a2c:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   15a2e:	f7ff fbef 	bl	15210 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   15a32:	3602      	adds	r6, #2
	if (!req) {
   15a34:	4604      	mov	r4, r0
   15a36:	b920      	cbnz	r0, 15a42 <gatt_indicate+0x32>
		return -ENOMEM;
   15a38:	f06f 050b 	mvn.w	r5, #11
}
   15a3c:	4628      	mov	r0, r5
   15a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   15a42:	4b17      	ldr	r3, [pc, #92]	; (15aa0 <gatt_indicate+0x90>)
   15a44:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   15a46:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   15a48:	4632      	mov	r2, r6
   15a4a:	211d      	movs	r1, #29
   15a4c:	4640      	mov	r0, r8
   15a4e:	f009 fcd3 	bl	1f3f8 <bt_att_create_pdu>
	if (!buf) {
   15a52:	4606      	mov	r6, r0
   15a54:	b918      	cbnz	r0, 15a5e <gatt_indicate+0x4e>
		bt_att_req_free(req);
   15a56:	4620      	mov	r0, r4
   15a58:	f7ff fbf0 	bl	1523c <bt_att_req_free>
   15a5c:	e7ec      	b.n	15a38 <gatt_indicate+0x28>
   15a5e:	f100 0a08 	add.w	sl, r0, #8
   15a62:	2102      	movs	r1, #2
   15a64:	4650      	mov	r0, sl
   15a66:	f000 fe3d 	bl	166e4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   15a6a:	4607      	mov	r7, r0
   15a6c:	8aa9      	ldrh	r1, [r5, #20]
   15a6e:	f827 9b02 	strh.w	r9, [r7], #2
   15a72:	4650      	mov	r0, sl
   15a74:	f000 fe36 	bl	166e4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15a78:	8aaa      	ldrh	r2, [r5, #20]
   15a7a:	6929      	ldr	r1, [r5, #16]
   15a7c:	4638      	mov	r0, r7
   15a7e:	f00a fff4 	bl	20a6a <memcpy>
	req->buf = buf;
   15a82:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   15a84:	4621      	mov	r1, r4
   15a86:	4640      	mov	r0, r8
   15a88:	f7ff fcf4 	bl	15474 <bt_att_req_send>
	if (err) {
   15a8c:	4605      	mov	r5, r0
   15a8e:	2800      	cmp	r0, #0
   15a90:	d0d4      	beq.n	15a3c <gatt_indicate+0x2c>
		bt_att_req_free(req);
   15a92:	4620      	mov	r0, r4
   15a94:	f7ff fbd2 	bl	1523c <bt_att_req_free>
   15a98:	e7d0      	b.n	15a3c <gatt_indicate+0x2c>
		return -EPERM;
   15a9a:	f04f 35ff 	mov.w	r5, #4294967295
   15a9e:	e7cd      	b.n	15a3c <gatt_indicate+0x2c>
   15aa0:	0001f4ff 	.word	0x0001f4ff

00015aa4 <bt_gatt_indicate>:
{
   15aa4:	b530      	push	{r4, r5, lr}
   15aa6:	4605      	mov	r5, r0
   15aa8:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   15aaa:	460c      	mov	r4, r1
   15aac:	b971      	cbnz	r1, 15acc <bt_gatt_indicate+0x28>
   15aae:	4949      	ldr	r1, [pc, #292]	; (15bd4 <bt_gatt_indicate+0x130>)
   15ab0:	4a49      	ldr	r2, [pc, #292]	; (15bd8 <bt_gatt_indicate+0x134>)
   15ab2:	484a      	ldr	r0, [pc, #296]	; (15bdc <bt_gatt_indicate+0x138>)
   15ab4:	f640 1338 	movw	r3, #2360	; 0x938
   15ab8:	f007 fe7c 	bl	1d7b4 <printk>
   15abc:	4848      	ldr	r0, [pc, #288]	; (15be0 <bt_gatt_indicate+0x13c>)
   15abe:	f007 fe79 	bl	1d7b4 <printk>
   15ac2:	4845      	ldr	r0, [pc, #276]	; (15bd8 <bt_gatt_indicate+0x134>)
   15ac4:	f640 1138 	movw	r1, #2360	; 0x938
   15ac8:	f008 f8ce 	bl	1dc68 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   15acc:	6863      	ldr	r3, [r4, #4]
   15ace:	b983      	cbnz	r3, 15af2 <bt_gatt_indicate+0x4e>
   15ad0:	6823      	ldr	r3, [r4, #0]
   15ad2:	b973      	cbnz	r3, 15af2 <bt_gatt_indicate+0x4e>
   15ad4:	4943      	ldr	r1, [pc, #268]	; (15be4 <bt_gatt_indicate+0x140>)
   15ad6:	4a40      	ldr	r2, [pc, #256]	; (15bd8 <bt_gatt_indicate+0x134>)
   15ad8:	4840      	ldr	r0, [pc, #256]	; (15bdc <bt_gatt_indicate+0x138>)
   15ada:	f640 1339 	movw	r3, #2361	; 0x939
   15ade:	f007 fe69 	bl	1d7b4 <printk>
   15ae2:	483f      	ldr	r0, [pc, #252]	; (15be0 <bt_gatt_indicate+0x13c>)
   15ae4:	f007 fe66 	bl	1d7b4 <printk>
   15ae8:	483b      	ldr	r0, [pc, #236]	; (15bd8 <bt_gatt_indicate+0x134>)
   15aea:	f640 1139 	movw	r1, #2361	; 0x939
   15aee:	f008 f8bb 	bl	1dc68 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15af2:	f3bf 8f5b 	dmb	ish
   15af6:	4b3c      	ldr	r3, [pc, #240]	; (15be8 <bt_gatt_indicate+0x144>)
   15af8:	681b      	ldr	r3, [r3, #0]
   15afa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15afe:	079a      	lsls	r2, r3, #30
   15b00:	d561      	bpl.n	15bc6 <bt_gatt_indicate+0x122>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   15b02:	b115      	cbz	r5, 15b0a <bt_gatt_indicate+0x66>
   15b04:	7aab      	ldrb	r3, [r5, #10]
   15b06:	2b07      	cmp	r3, #7
   15b08:	d160      	bne.n	15bcc <bt_gatt_indicate+0x128>
	data.attr = params->attr;
   15b0a:	6860      	ldr	r0, [r4, #4]
   15b0c:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   15b0e:	f7ff fe83 	bl	15818 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   15b12:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   15b14:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   15b18:	b33a      	cbz	r2, 15b6a <bt_gatt_indicate+0xc6>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15b1a:	a905      	add	r1, sp, #20
   15b1c:	9102      	str	r1, [sp, #8]
   15b1e:	4933      	ldr	r1, [pc, #204]	; (15bec <bt_gatt_indicate+0x148>)
   15b20:	9101      	str	r1, [sp, #4]
   15b22:	2101      	movs	r1, #1
	found->attr = NULL;
   15b24:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15b26:	9100      	str	r1, [sp, #0]
   15b28:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   15b2c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15b2e:	f7ff febf 	bl	158b0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   15b32:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   15b34:	b91b      	cbnz	r3, 15b3e <bt_gatt_indicate+0x9a>
			return -ENOENT;
   15b36:	f06f 0001 	mvn.w	r0, #1
}
   15b3a:	b00b      	add	sp, #44	; 0x2c
   15b3c:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   15b3e:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   15b40:	9b05      	ldr	r3, [sp, #20]
   15b42:	6818      	ldr	r0, [r3, #0]
   15b44:	2300      	movs	r3, #0
   15b46:	f88d 3010 	strb.w	r3, [sp, #16]
   15b4a:	a904      	add	r1, sp, #16
   15b4c:	f642 0303 	movw	r3, #10243	; 0x2803
   15b50:	f8ad 3012 	strh.w	r3, [sp, #18]
   15b54:	f008 fa9e 	bl	1e094 <bt_uuid_cmp>
   15b58:	b970      	cbnz	r0, 15b78 <bt_gatt_indicate+0xd4>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   15b5a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   15b5c:	68c3      	ldr	r3, [r0, #12]
   15b5e:	799b      	ldrb	r3, [r3, #6]
   15b60:	069b      	lsls	r3, r3, #26
   15b62:	d405      	bmi.n	15b70 <bt_gatt_indicate+0xcc>
			return -EINVAL;
   15b64:	f06f 0015 	mvn.w	r0, #21
   15b68:	e7e7      	b.n	15b3a <bt_gatt_indicate+0x96>
		if (!data.handle) {
   15b6a:	2800      	cmp	r0, #0
   15b6c:	d1e8      	bne.n	15b40 <bt_gatt_indicate+0x9c>
   15b6e:	e7e2      	b.n	15b36 <bt_gatt_indicate+0x92>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   15b70:	f009 ffa2 	bl	1fab8 <bt_gatt_attr_value_handle>
   15b74:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   15b78:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   15b7c:	b13d      	cbz	r5, 15b8e <bt_gatt_indicate+0xea>
		params->_ref = 1;
   15b7e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   15b80:	4601      	mov	r1, r0
		params->_ref = 1;
   15b82:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   15b84:	4622      	mov	r2, r4
   15b86:	4628      	mov	r0, r5
   15b88:	f7ff ff42 	bl	15a10 <gatt_indicate>
   15b8c:	e7d5      	b.n	15b3a <bt_gatt_indicate+0x96>
	data.err = -ENOTCONN;
   15b8e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   15b92:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   15b94:	2302      	movs	r3, #2
   15b96:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15b9a:	f642 1302 	movw	r3, #10498	; 0x2902
   15b9e:	f8ad 3012 	strh.w	r3, [sp, #18]
   15ba2:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   15ba4:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15ba6:	9302      	str	r3, [sp, #8]
   15ba8:	4b11      	ldr	r3, [pc, #68]	; (15bf0 <bt_gatt_indicate+0x14c>)
   15baa:	9301      	str	r3, [sp, #4]
   15bac:	2301      	movs	r3, #1
   15bae:	9300      	str	r3, [sp, #0]
   15bb0:	aa04      	add	r2, sp, #16
   15bb2:	462b      	mov	r3, r5
   15bb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   15bb8:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15bba:	f88d 5010 	strb.w	r5, [sp, #16]
   15bbe:	f7ff fe77 	bl	158b0 <bt_gatt_foreach_attr_type>
	return data.err;
   15bc2:	9807      	ldr	r0, [sp, #28]
   15bc4:	e7b9      	b.n	15b3a <bt_gatt_indicate+0x96>
		return -EAGAIN;
   15bc6:	f06f 000a 	mvn.w	r0, #10
   15bca:	e7b6      	b.n	15b3a <bt_gatt_indicate+0x96>
		return -ENOTCONN;
   15bcc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15bd0:	e7b3      	b.n	15b3a <bt_gatt_indicate+0x96>
   15bd2:	bf00      	nop
   15bd4:	000223f4 	.word	0x000223f4
   15bd8:	0002237e 	.word	0x0002237e
   15bdc:	00021650 	.word	0x00021650
   15be0:	000223fb 	.word	0x000223fb
   15be4:	00022411 	.word	0x00022411
   15be8:	2000036c 	.word	0x2000036c
   15bec:	0001f525 	.word	0x0001f525
   15bf0:	00015c99 	.word	0x00015c99

00015bf4 <sc_process>:
{
   15bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15bf6:	f3bf 8f5b 	dmb	ish
   15bfa:	6b03      	ldr	r3, [r0, #48]	; 0x30
   15bfc:	f3bf 8f5b 	dmb	ish
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   15c00:	079b      	lsls	r3, r3, #30
{
   15c02:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   15c04:	f100 0530 	add.w	r5, r0, #48	; 0x30
   15c08:	d50e      	bpl.n	15c28 <sc_process+0x34>
   15c0a:	491d      	ldr	r1, [pc, #116]	; (15c80 <sc_process+0x8c>)
   15c0c:	4a1d      	ldr	r2, [pc, #116]	; (15c84 <sc_process+0x90>)
   15c0e:	481e      	ldr	r0, [pc, #120]	; (15c88 <sc_process+0x94>)
   15c10:	f44f 7379 	mov.w	r3, #996	; 0x3e4
   15c14:	f007 fdce 	bl	1d7b4 <printk>
   15c18:	481c      	ldr	r0, [pc, #112]	; (15c8c <sc_process+0x98>)
   15c1a:	f007 fdcb 	bl	1d7b4 <printk>
   15c1e:	4819      	ldr	r0, [pc, #100]	; (15c84 <sc_process+0x90>)
   15c20:	f44f 7179 	mov.w	r1, #996	; 0x3e4
   15c24:	f008 f820 	bl	1dc68 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   15c28:	f854 3c08 	ldr.w	r3, [r4, #-8]
   15c2c:	9301      	str	r3, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15c2e:	f3bf 8f5b 	dmb	ish
   15c32:	e855 3f00 	ldrex	r3, [r5]
   15c36:	f023 0301 	bic.w	r3, r3, #1
   15c3a:	e845 3200 	strex	r2, r3, [r5]
   15c3e:	2a00      	cmp	r2, #0
   15c40:	d1f7      	bne.n	15c32 <sc_process+0x3e>
   15c42:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   15c46:	4b12      	ldr	r3, [pc, #72]	; (15c90 <sc_process+0x9c>)
   15c48:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   15c4c:	4b11      	ldr	r3, [pc, #68]	; (15c94 <sc_process+0xa0>)
   15c4e:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   15c52:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   15c54:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   15c56:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   15c5a:	2304      	movs	r3, #4
	sc->start = 0U;
   15c5c:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   15c60:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   15c64:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   15c68:	f1a4 0120 	sub.w	r1, r4, #32
   15c6c:	f7ff ff1a 	bl	15aa4 <bt_gatt_indicate>
   15c70:	b918      	cbnz	r0, 15c7a <sc_process+0x86>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   15c72:	2101      	movs	r1, #1
   15c74:	4628      	mov	r0, r5
   15c76:	f009 fe2e 	bl	1f8d6 <atomic_set_bit>
}
   15c7a:	b003      	add	sp, #12
   15c7c:	bd30      	pop	{r4, r5, pc}
   15c7e:	bf00      	nop
   15c80:	0002242e 	.word	0x0002242e
   15c84:	0002237e 	.word	0x0002237e
   15c88:	00021650 	.word	0x00021650
   15c8c:	0002245f 	.word	0x0002245f
   15c90:	0002126c 	.word	0x0002126c
   15c94:	00015621 	.word	0x00015621

00015c98 <notify_cb>:
{
   15c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   15c9a:	4b32      	ldr	r3, [pc, #200]	; (15d64 <notify_cb+0xcc>)
{
   15c9c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   15c9e:	6882      	ldr	r2, [r0, #8]
   15ca0:	429a      	cmp	r2, r3
{
   15ca2:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   15ca4:	d12d      	bne.n	15d02 <notify_cb+0x6a>
	ccc = attr->user_data;
   15ca6:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   15ca8:	4b2f      	ldr	r3, [pc, #188]	; (15d68 <notify_cb+0xd0>)
   15caa:	429f      	cmp	r7, r3
   15cac:	d119      	bne.n	15ce2 <notify_cb+0x4a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   15cae:	4d2f      	ldr	r5, [pc, #188]	; (15d6c <notify_cb+0xd4>)
   15cb0:	2300      	movs	r3, #0
   15cb2:	4669      	mov	r1, sp
   15cb4:	1c68      	adds	r0, r5, #1
   15cb6:	9300      	str	r3, [sp, #0]
   15cb8:	f8cd 3003 	str.w	r3, [sp, #3]
   15cbc:	f009 fc8c 	bl	1f5d8 <bt_addr_le_cmp>
   15cc0:	b178      	cbz	r0, 15ce2 <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   15cc2:	4629      	mov	r1, r5
   15cc4:	2207      	movs	r2, #7
   15cc6:	f811 0b01 	ldrb.w	r0, [r1], #1
   15cca:	f7fe f9fb 	bl	140c4 <bt_conn_lookup_state_le>
			if (!conn) {
   15cce:	b9e0      	cbnz	r0, 15d0a <notify_cb+0x72>
				sc = (struct sc_data *)data->ind_params->data;
   15cd0:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   15cd2:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   15cd4:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   15cd6:	f811 0b01 	ldrb.w	r0, [r1], #1
   15cda:	8853      	ldrh	r3, [r2, #2]
   15cdc:	8812      	ldrh	r2, [r2, #0]
   15cde:	f009 fc9d 	bl	1f61c <sc_save>
		if (cfg->value != data->type) {
   15ce2:	893a      	ldrh	r2, [r7, #8]
   15ce4:	89a3      	ldrh	r3, [r4, #12]
   15ce6:	429a      	cmp	r2, r3
   15ce8:	d10b      	bne.n	15d02 <notify_cb+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   15cea:	4639      	mov	r1, r7
   15cec:	f811 0b01 	ldrb.w	r0, [r1], #1
   15cf0:	f7fe f9ca 	bl	14088 <bt_conn_lookup_addr_le>
		if (!conn) {
   15cf4:	4605      	mov	r5, r0
   15cf6:	b120      	cbz	r0, 15d02 <notify_cb+0x6a>
		if (conn->state != BT_CONN_CONNECTED) {
   15cf8:	7a83      	ldrb	r3, [r0, #10]
   15cfa:	2b07      	cmp	r3, #7
   15cfc:	d008      	beq.n	15d10 <notify_cb+0x78>
			bt_conn_unref(conn);
   15cfe:	f7fd ff99 	bl	13c34 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   15d02:	2701      	movs	r7, #1
}
   15d04:	4638      	mov	r0, r7
   15d06:	b003      	add	sp, #12
   15d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   15d0a:	f7fd ff93 	bl	13c34 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   15d0e:	e7e8      	b.n	15ce2 <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   15d10:	697b      	ldr	r3, [r7, #20]
   15d12:	b123      	cbz	r3, 15d1e <notify_cb+0x86>
   15d14:	4631      	mov	r1, r6
   15d16:	4798      	blx	r3
   15d18:	b908      	cbnz	r0, 15d1e <notify_cb+0x86>
			bt_conn_unref(conn);
   15d1a:	4628      	mov	r0, r5
   15d1c:	e7ef      	b.n	15cfe <notify_cb+0x66>
		if (bt_gatt_check_perm(conn, attr,
   15d1e:	2214      	movs	r2, #20
   15d20:	4631      	mov	r1, r6
   15d22:	4628      	mov	r0, r5
   15d24:	f009 ff1c 	bl	1fb60 <bt_gatt_check_perm>
   15d28:	4607      	mov	r7, r0
   15d2a:	2800      	cmp	r0, #0
   15d2c:	d1e9      	bne.n	15d02 <notify_cb+0x6a>
		if (data->type == BT_GATT_CCC_INDICATE) {
   15d2e:	89a3      	ldrh	r3, [r4, #12]
   15d30:	88a1      	ldrh	r1, [r4, #4]
   15d32:	6922      	ldr	r2, [r4, #16]
   15d34:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   15d36:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   15d38:	d10f      	bne.n	15d5a <notify_cb+0xc2>
			err = gatt_indicate(conn, data->handle,
   15d3a:	f7ff fe69 	bl	15a10 <gatt_indicate>
			if (err == 0) {
   15d3e:	4606      	mov	r6, r0
   15d40:	b918      	cbnz	r0, 15d4a <notify_cb+0xb2>
				data->ind_params->_ref++;
   15d42:	6922      	ldr	r2, [r4, #16]
   15d44:	7d93      	ldrb	r3, [r2, #22]
   15d46:	3301      	adds	r3, #1
   15d48:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   15d4a:	4628      	mov	r0, r5
   15d4c:	f7fd ff72 	bl	13c34 <bt_conn_unref>
		if (err < 0) {
   15d50:	2e00      	cmp	r6, #0
   15d52:	dbd7      	blt.n	15d04 <notify_cb+0x6c>
		data->err = 0;
   15d54:	2300      	movs	r3, #0
   15d56:	60a3      	str	r3, [r4, #8]
   15d58:	e7d3      	b.n	15d02 <notify_cb+0x6a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   15d5a:	f009 ff24 	bl	1fba6 <gatt_notify>
   15d5e:	4606      	mov	r6, r0
   15d60:	e7f3      	b.n	15d4a <notify_cb+0xb2>
   15d62:	bf00      	nop
   15d64:	0001f66b 	.word	0x0001f66b
   15d68:	200004c8 	.word	0x200004c8
   15d6c:	200020a4 	.word	0x200020a4

00015d70 <update_ccc>:
{
   15d70:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   15d72:	4b26      	ldr	r3, [pc, #152]	; (15e0c <update_ccc+0x9c>)
	struct bt_conn *conn = data->conn;
   15d74:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   15d76:	6882      	ldr	r2, [r0, #8]
   15d78:	429a      	cmp	r2, r3
{
   15d7a:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   15d7c:	d142      	bne.n	15e04 <update_ccc+0x94>
	ccc = attr->user_data;
   15d7e:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   15d80:	8933      	ldrh	r3, [r6, #8]
   15d82:	2b00      	cmp	r3, #0
   15d84:	d03e      	beq.n	15e04 <update_ccc+0x94>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   15d86:	4632      	mov	r2, r6
   15d88:	4628      	mov	r0, r5
   15d8a:	f812 1b01 	ldrb.w	r1, [r2], #1
   15d8e:	f008 fdb8 	bl	1e902 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   15d92:	2800      	cmp	r0, #0
   15d94:	d036      	beq.n	15e04 <update_ccc+0x94>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   15d96:	222a      	movs	r2, #42	; 0x2a
   15d98:	4621      	mov	r1, r4
   15d9a:	4628      	mov	r0, r5
   15d9c:	f009 fee0 	bl	1fb60 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   15da0:	2803      	cmp	r0, #3
   15da2:	d02f      	beq.n	15e04 <update_ccc+0x94>
		gatt_ccc_changed(attr, ccc);
   15da4:	4631      	mov	r1, r6
   15da6:	4620      	mov	r0, r4
   15da8:	f009 fb9f 	bl	1f4ea <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   15dac:	4b18      	ldr	r3, [pc, #96]	; (15e10 <update_ccc+0xa0>)
   15dae:	429e      	cmp	r6, r3
   15db0:	d128      	bne.n	15e04 <update_ccc+0x94>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   15db2:	7a28      	ldrb	r0, [r5, #8]
   15db4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   15db8:	f7ff fbe4 	bl	15584 <find_sc_cfg>
	if (!cfg) {
   15dbc:	4604      	mov	r4, r0
   15dbe:	b308      	cbz	r0, 15e04 <update_ccc+0x94>
	if (!(cfg->data.start || cfg->data.end)) {
   15dc0:	8902      	ldrh	r2, [r0, #8]
   15dc2:	8943      	ldrh	r3, [r0, #10]
   15dc4:	ea53 0102 	orrs.w	r1, r3, r2
   15dc8:	d01c      	beq.n	15e04 <update_ccc+0x94>
	index = bt_conn_index(conn);
   15dca:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   15dcc:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   15dd0:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   15dd4:	f7fe f82e 	bl	13e34 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   15dd8:	490e      	ldr	r1, [pc, #56]	; (15e14 <update_ccc+0xa4>)
   15dda:	4a0f      	ldr	r2, [pc, #60]	; (15e18 <update_ccc+0xa8>)
   15ddc:	2318      	movs	r3, #24
   15dde:	fb03 1300 	mla	r3, r3, r0, r1
   15de2:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   15de4:	4a0d      	ldr	r2, [pc, #52]	; (15e1c <update_ccc+0xac>)
   15de6:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   15de8:	aa01      	add	r2, sp, #4
   15dea:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   15dec:	2204      	movs	r2, #4
   15dee:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   15df0:	b203      	sxth	r3, r0
   15df2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15df6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   15dfa:	4628      	mov	r0, r5
   15dfc:	f7ff fe52 	bl	15aa4 <bt_gatt_indicate>
__ssp_bos_icheck3(memset, void *, int)
   15e00:	2300      	movs	r3, #0
   15e02:	60a3      	str	r3, [r4, #8]
}
   15e04:	2001      	movs	r0, #1
   15e06:	b002      	add	sp, #8
   15e08:	bd70      	pop	{r4, r5, r6, pc}
   15e0a:	bf00      	nop
   15e0c:	0001f66b 	.word	0x0001f66b
   15e10:	200004c8 	.word	0x200004c8
   15e14:	20001e18 	.word	0x20001e18
   15e18:	0002126c 	.word	0x0002126c
   15e1c:	0001f8f3 	.word	0x0001f8f3

00015e20 <bt_gatt_unsubscribe>:
	return 0;
}

int bt_gatt_unsubscribe(struct bt_conn *conn,
			struct bt_gatt_subscribe_params *params)
{
   15e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e24:	460d      	mov	r5, r1
	struct gatt_sub *sub;
	struct bt_gatt_subscribe_params *tmp, *next;
	bool has_subscription = false, found = false;
	sys_snode_t *prev = NULL;

	__ASSERT(conn, "invalid parameters\n");
   15e26:	4607      	mov	r7, r0
   15e28:	b970      	cbnz	r0, 15e48 <bt_gatt_unsubscribe+0x28>
   15e2a:	494b      	ldr	r1, [pc, #300]	; (15f58 <bt_gatt_unsubscribe+0x138>)
   15e2c:	4a4b      	ldr	r2, [pc, #300]	; (15f5c <bt_gatt_unsubscribe+0x13c>)
   15e2e:	484c      	ldr	r0, [pc, #304]	; (15f60 <bt_gatt_unsubscribe+0x140>)
   15e30:	f241 13e3 	movw	r3, #4579	; 0x11e3
   15e34:	f007 fcbe 	bl	1d7b4 <printk>
   15e38:	484a      	ldr	r0, [pc, #296]	; (15f64 <bt_gatt_unsubscribe+0x144>)
   15e3a:	f007 fcbb 	bl	1d7b4 <printk>
   15e3e:	4847      	ldr	r0, [pc, #284]	; (15f5c <bt_gatt_unsubscribe+0x13c>)
   15e40:	f241 11e3 	movw	r1, #4579	; 0x11e3
   15e44:	f007 ff10 	bl	1dc68 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   15e48:	b975      	cbnz	r5, 15e68 <bt_gatt_unsubscribe+0x48>
   15e4a:	4947      	ldr	r1, [pc, #284]	; (15f68 <bt_gatt_unsubscribe+0x148>)
   15e4c:	4a43      	ldr	r2, [pc, #268]	; (15f5c <bt_gatt_unsubscribe+0x13c>)
   15e4e:	4844      	ldr	r0, [pc, #272]	; (15f60 <bt_gatt_unsubscribe+0x140>)
   15e50:	f241 13e4 	movw	r3, #4580	; 0x11e4
   15e54:	f007 fcae 	bl	1d7b4 <printk>
   15e58:	4842      	ldr	r0, [pc, #264]	; (15f64 <bt_gatt_unsubscribe+0x144>)
   15e5a:	f007 fcab 	bl	1d7b4 <printk>
   15e5e:	483f      	ldr	r0, [pc, #252]	; (15f5c <bt_gatt_unsubscribe+0x13c>)
   15e60:	f241 11e4 	movw	r1, #4580	; 0x11e4
   15e64:	f007 ff00 	bl	1dc68 <assert_post_action>

	if (conn->state != BT_CONN_CONNECTED) {
   15e68:	7abb      	ldrb	r3, [r7, #10]
   15e6a:	2b07      	cmp	r3, #7
   15e6c:	d170      	bne.n	15f50 <bt_gatt_unsubscribe+0x130>
		return -ENOTCONN;
	}

	sub = gatt_sub_find(conn);
   15e6e:	4638      	mov	r0, r7
   15e70:	f7ff fb98 	bl	155a4 <gatt_sub_find>
	if (!sub) {
   15e74:	4606      	mov	r6, r0
   15e76:	b918      	cbnz	r0, 15e80 <bt_gatt_unsubscribe+0x60>
		return -EINVAL;
   15e78:	f06f 0015 	mvn.w	r0, #21
	}

	params->value = 0x0000;

	return gatt_write_ccc(conn, params);
}
   15e7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15e80:	6884      	ldr	r4, [r0, #8]
   15e82:	b1f4      	cbz	r4, 15ec2 <bt_gatt_unsubscribe+0xa2>
   15e84:	f1b4 0314 	subs.w	r3, r4, #20
   15e88:	d01d      	beq.n	15ec6 <bt_gatt_unsubscribe+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15e8a:	6824      	ldr	r4, [r4, #0]
   15e8c:	b104      	cbz	r4, 15e90 <bt_gatt_unsubscribe+0x70>
   15e8e:	3c14      	subs	r4, #20
   15e90:	f04f 0800 	mov.w	r8, #0
   15e94:	46c2      	mov	sl, r8
   15e96:	46c1      	mov	r9, r8
	parent->next = child;
   15e98:	46c3      	mov	fp, r8
   15e9a:	b9b3      	cbnz	r3, 15eca <bt_gatt_unsubscribe+0xaa>
	if (!found) {
   15e9c:	f1ba 0f00 	cmp.w	sl, #0
   15ea0:	d0ea      	beq.n	15e78 <bt_gatt_unsubscribe+0x58>
	if (gatt_sub_is_empty(sub)) {
   15ea2:	68b3      	ldr	r3, [r6, #8]
   15ea4:	b913      	cbnz	r3, 15eac <bt_gatt_unsubscribe+0x8c>
		gatt_sub_free(sub);
   15ea6:	4630      	mov	r0, r6
   15ea8:	f7ff fb9a 	bl	155e0 <gatt_sub_free>
	if (has_subscription) {
   15eac:	f1b9 0f00 	cmp.w	r9, #0
   15eb0:	d046      	beq.n	15f40 <bt_gatt_unsubscribe+0x120>
		params->notify(conn, params, NULL, 0);
   15eb2:	2300      	movs	r3, #0
   15eb4:	682c      	ldr	r4, [r5, #0]
   15eb6:	461a      	mov	r2, r3
   15eb8:	4629      	mov	r1, r5
   15eba:	4638      	mov	r0, r7
   15ebc:	47a0      	blx	r4
		return 0;
   15ebe:	2000      	movs	r0, #0
   15ec0:	e7dc      	b.n	15e7c <bt_gatt_unsubscribe+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15ec2:	4623      	mov	r3, r4
   15ec4:	e7e4      	b.n	15e90 <bt_gatt_unsubscribe+0x70>
   15ec6:	461c      	mov	r4, r3
   15ec8:	e7e2      	b.n	15e90 <bt_gatt_unsubscribe+0x70>
		if (params == tmp) {
   15eca:	42ab      	cmp	r3, r5
   15ecc:	f103 0114 	add.w	r1, r3, #20
   15ed0:	d129      	bne.n	15f26 <bt_gatt_unsubscribe+0x106>
Z_GENLIST_REMOVE(slist, snode)
   15ed2:	6958      	ldr	r0, [r3, #20]
   15ed4:	f1b8 0f00 	cmp.w	r8, #0
   15ed8:	d11d      	bne.n	15f16 <bt_gatt_unsubscribe+0xf6>
   15eda:	68f2      	ldr	r2, [r6, #12]
	list->head = node;
   15edc:	60b0      	str	r0, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   15ede:	4291      	cmp	r1, r2
   15ee0:	d100      	bne.n	15ee4 <bt_gatt_unsubscribe+0xc4>
	list->tail = node;
   15ee2:	60f0      	str	r0, [r6, #12]
	parent->next = child;
   15ee4:	f8c3 b014 	str.w	fp, [r3, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15ee8:	f3bf 8f5b 	dmb	ish
   15eec:	692b      	ldr	r3, [r5, #16]
   15eee:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15ef2:	f3c3 0a80 	ubfx	sl, r3, #2, #1
			if (atomic_test_bit(params->flags,
   15ef6:	075b      	lsls	r3, r3, #29
   15ef8:	d51d      	bpl.n	15f36 <bt_gatt_unsubscribe+0x116>

void bt_gatt_cancel(struct bt_conn *conn, void *params)
{
	bt_att_req_cancel(conn, params);
   15efa:	4629      	mov	r1, r5
   15efc:	4638      	mov	r0, r7
   15efe:	f7ff faf3 	bl	154e8 <bt_att_req_cancel>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15f02:	b1dc      	cbz	r4, 15f3c <bt_gatt_unsubscribe+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15f04:	f114 0214 	adds.w	r2, r4, #20
   15f08:	d002      	beq.n	15f10 <bt_gatt_unsubscribe+0xf0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15f0a:	6962      	ldr	r2, [r4, #20]
   15f0c:	b102      	cbz	r2, 15f10 <bt_gatt_unsubscribe+0xf0>
   15f0e:	3a14      	subs	r2, #20
   15f10:	4623      	mov	r3, r4
   15f12:	4614      	mov	r4, r2
   15f14:	e7c1      	b.n	15e9a <bt_gatt_unsubscribe+0x7a>
	parent->next = child;
   15f16:	f8c8 0000 	str.w	r0, [r8]
Z_GENLIST_REMOVE(slist, snode)
   15f1a:	68f2      	ldr	r2, [r6, #12]
   15f1c:	4291      	cmp	r1, r2
	list->tail = node;
   15f1e:	bf08      	it	eq
   15f20:	f8c6 800c 	streq.w	r8, [r6, #12]
}
   15f24:	e7de      	b.n	15ee4 <bt_gatt_unsubscribe+0xc4>
		if (tmp->value_handle == params->value_handle) {
   15f26:	891a      	ldrh	r2, [r3, #8]
   15f28:	892b      	ldrh	r3, [r5, #8]
   15f2a:	4688      	mov	r8, r1
   15f2c:	429a      	cmp	r2, r3
   15f2e:	bf08      	it	eq
   15f30:	f04f 0901 	moveq.w	r9, #1
   15f34:	e7e5      	b.n	15f02 <bt_gatt_unsubscribe+0xe2>
			found = true;
   15f36:	f04f 0a01 	mov.w	sl, #1
   15f3a:	e7e2      	b.n	15f02 <bt_gatt_unsubscribe+0xe2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15f3c:	4622      	mov	r2, r4
   15f3e:	e7e7      	b.n	15f10 <bt_gatt_unsubscribe+0xf0>
	params->value = 0x0000;
   15f40:	f8a5 900c 	strh.w	r9, [r5, #12]
	return gatt_write_ccc(conn, params);
   15f44:	4629      	mov	r1, r5
   15f46:	4638      	mov	r0, r7
}
   15f48:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params);
   15f4c:	f7ff bb96 	b.w	1567c <gatt_write_ccc>
		return -ENOTCONN;
   15f50:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15f54:	e792      	b.n	15e7c <bt_gatt_unsubscribe+0x5c>
   15f56:	bf00      	nop
   15f58:	00022379 	.word	0x00022379
   15f5c:	0002237e 	.word	0x0002237e
   15f60:	00021650 	.word	0x00021650
   15f64:	000223fb 	.word	0x000223fb
   15f68:	000223f4 	.word	0x000223f4

00015f6c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   15f6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   15f6e:	4a17      	ldr	r2, [pc, #92]	; (15fcc <bt_gatt_connected+0x60>)
	data.conn = conn;
   15f70:	9000      	str	r0, [sp, #0]
{
   15f72:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   15f74:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   15f76:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   15f78:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   15f7c:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   15f80:	f009 fde1 	bl	1fb46 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   15f84:	4628      	mov	r0, r5
   15f86:	f7ff fb0d 	bl	155a4 <gatt_sub_find>
	if (!sub) {
   15f8a:	b128      	cbz	r0, 15f98 <bt_gatt_connected+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   15f8c:	6884      	ldr	r4, [r0, #8]
   15f8e:	b11c      	cbz	r4, 15f98 <bt_gatt_connected+0x2c>
   15f90:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   15f92:	f105 0690 	add.w	r6, r5, #144	; 0x90
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   15f96:	b90c      	cbnz	r4, 15f9c <bt_gatt_connected+0x30>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   15f98:	b002      	add	sp, #8
   15f9a:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   15f9c:	7a28      	ldrb	r0, [r5, #8]
   15f9e:	4631      	mov	r1, r6
   15fa0:	f008 fb7a 	bl	1e698 <bt_addr_le_is_bonded>
   15fa4:	b150      	cbz	r0, 15fbc <bt_gatt_connected+0x50>
   15fa6:	f3bf 8f5b 	dmb	ish
   15faa:	6923      	ldr	r3, [r4, #16]
   15fac:	f3bf 8f5b 	dmb	ish
   15fb0:	079b      	lsls	r3, r3, #30
   15fb2:	d403      	bmi.n	15fbc <bt_gatt_connected+0x50>
			gatt_write_ccc(conn, params);
   15fb4:	4621      	mov	r1, r4
   15fb6:	4628      	mov	r0, r5
   15fb8:	f7ff fb60 	bl	1567c <gatt_write_ccc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15fbc:	f114 0f14 	cmn.w	r4, #20
   15fc0:	d0ea      	beq.n	15f98 <bt_gatt_connected+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15fc2:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   15fc4:	2c00      	cmp	r4, #0
   15fc6:	d0e7      	beq.n	15f98 <bt_gatt_connected+0x2c>
   15fc8:	3c14      	subs	r4, #20
   15fca:	e7e4      	b.n	15f96 <bt_gatt_connected+0x2a>
   15fcc:	00015d71 	.word	0x00015d71

00015fd0 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   15fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15fd2:	4b09      	ldr	r3, [pc, #36]	; (15ff8 <bt_gatt_att_max_mtu_changed+0x28>)
   15fd4:	681c      	ldr	r4, [r3, #0]
{
   15fd6:	4605      	mov	r5, r0
   15fd8:	460e      	mov	r6, r1
   15fda:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15fdc:	b10c      	cbz	r4, 15fe2 <bt_gatt_att_max_mtu_changed+0x12>
   15fde:	3c04      	subs	r4, #4
   15fe0:	b904      	cbnz	r4, 15fe4 <bt_gatt_att_max_mtu_changed+0x14>
		if (cb->att_mtu_updated) {
			cb->att_mtu_updated(conn, tx, rx);
		}
	}
}
   15fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   15fe4:	6823      	ldr	r3, [r4, #0]
   15fe6:	b11b      	cbz	r3, 15ff0 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   15fe8:	463a      	mov	r2, r7
   15fea:	4631      	mov	r1, r6
   15fec:	4628      	mov	r0, r5
   15fee:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   15ff0:	1d23      	adds	r3, r4, #4
   15ff2:	d0f6      	beq.n	15fe2 <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15ff4:	6864      	ldr	r4, [r4, #4]
   15ff6:	e7f1      	b.n	15fdc <bt_gatt_att_max_mtu_changed+0xc>
   15ff8:	20001dfc 	.word	0x20001dfc

00015ffc <db_hash_read>:
{
   15ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16000:	4910      	ldr	r1, [pc, #64]	; (16044 <db_hash_read+0x48>)
{
   16002:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   16006:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16008:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1600c:	461d      	mov	r5, r3
   1600e:	4614      	mov	r4, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16010:	f004 fd36 	bl	1aa80 <k_work_cancel_delayable_sync>
   16014:	f3bf 8f5b 	dmb	ish
   16018:	4b0b      	ldr	r3, [pc, #44]	; (16048 <db_hash_read+0x4c>)
   1601a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1601c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   16020:	075b      	lsls	r3, r3, #29
   16022:	d401      	bmi.n	16028 <db_hash_read+0x2c>
		db_hash_gen(true);
   16024:	f7ff fcba 	bl	1599c <db_hash_gen.isra.0>
	(void)bt_gatt_change_aware(conn, true);
   16028:	2101      	movs	r1, #1
   1602a:	4630      	mov	r0, r6
   1602c:	f009 fe63 	bl	1fcf6 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   16030:	2310      	movs	r3, #16
   16032:	9306      	str	r3, [sp, #24]
   16034:	463a      	mov	r2, r7
   16036:	4629      	mov	r1, r5
   16038:	4620      	mov	r0, r4
   1603a:	4b04      	ldr	r3, [pc, #16]	; (1604c <db_hash_read+0x50>)
}
   1603c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   16040:	f009 bb92 	b.w	1f768 <bt_gatt_attr_read.constprop.0>
   16044:	200017e8 	.word	0x200017e8
   16048:	20001810 	.word	0x20001810
   1604c:	200017a8 	.word	0x200017a8

00016050 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   16050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   16054:	4a33      	ldr	r2, [pc, #204]	; (16124 <bt_gatt_disconnected+0xd4>)
   16056:	4603      	mov	r3, r0
{
   16058:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1605a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1605e:	2001      	movs	r0, #1
   16060:	f009 fd71 	bl	1fb46 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   16064:	4620      	mov	r0, r4
   16066:	f7ff fa9d 	bl	155a4 <gatt_sub_find>
	if (!sub) {
   1606a:	4606      	mov	r6, r0
   1606c:	b3a8      	cbz	r0, 160da <bt_gatt_disconnected+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1606e:	6883      	ldr	r3, [r0, #8]
   16070:	b39b      	cbz	r3, 160da <bt_gatt_disconnected+0x8a>
   16072:	f1b3 0714 	subs.w	r7, r3, #20
   16076:	d030      	beq.n	160da <bt_gatt_disconnected+0x8a>
   16078:	681d      	ldr	r5, [r3, #0]
   1607a:	b105      	cbz	r5, 1607e <bt_gatt_disconnected+0x2e>
   1607c:	3d14      	subs	r5, #20
{
   1607e:	f04f 0b00 	mov.w	fp, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   16082:	f104 0890 	add.w	r8, r4, #144	; 0x90
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   16086:	f106 0901 	add.w	r9, r6, #1
			params->value = 0U;
   1608a:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1608c:	7a20      	ldrb	r0, [r4, #8]
   1608e:	4641      	mov	r1, r8
   16090:	f008 fb02 	bl	1e698 <bt_addr_le_is_bonded>
   16094:	b988      	cbnz	r0, 160ba <bt_gatt_disconnected+0x6a>
			params->value = 0U;
   16096:	f8a7 a00c 	strh.w	sl, [r7, #12]
			gatt_sub_remove(conn, sub, prev, params);
   1609a:	463b      	mov	r3, r7
   1609c:	465a      	mov	r2, fp
   1609e:	4631      	mov	r1, r6
   160a0:	4620      	mov	r0, r4
   160a2:	f009 fc7a 	bl	1f99a <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   160a6:	b1c5      	cbz	r5, 160da <bt_gatt_disconnected+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   160a8:	f115 0114 	adds.w	r1, r5, #20
   160ac:	d002      	beq.n	160b4 <bt_gatt_disconnected+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   160ae:	6969      	ldr	r1, [r5, #20]
   160b0:	b101      	cbz	r1, 160b4 <bt_gatt_disconnected+0x64>
   160b2:	3914      	subs	r1, #20
{
   160b4:	462f      	mov	r7, r5
   160b6:	460d      	mov	r5, r1
   160b8:	e7e8      	b.n	1608c <bt_gatt_disconnected+0x3c>
   160ba:	f3bf 8f5b 	dmb	ish
   160be:	693b      	ldr	r3, [r7, #16]
   160c0:	f3bf 8f5b 	dmb	ish
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   160c4:	07db      	lsls	r3, r3, #31
   160c6:	d4e6      	bmi.n	16096 <bt_gatt_disconnected+0x46>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   160c8:	7873      	ldrb	r3, [r6, #1]
   160ca:	b11b      	cbz	r3, 160d4 <bt_gatt_disconnected+0x84>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   160cc:	4641      	mov	r1, r8
   160ce:	4648      	mov	r0, r9
   160d0:	f009 fa9d 	bl	1f60e <bt_addr_le_copy>
			prev = &params->node;
   160d4:	f107 0b14 	add.w	fp, r7, #20
   160d8:	e7e5      	b.n	160a6 <bt_gatt_disconnected+0x56>
	cfg = find_cf_cfg(conn);
   160da:	4620      	mov	r0, r4
   160dc:	f7ff fa34 	bl	15548 <find_cf_cfg>
	if (!cfg) {
   160e0:	4605      	mov	r5, r0
   160e2:	b1e0      	cbz	r0, 1611e <bt_gatt_disconnected+0xce>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   160e4:	f104 0690 	add.w	r6, r4, #144	; 0x90
   160e8:	7a20      	ldrb	r0, [r4, #8]
   160ea:	4631      	mov	r1, r6
   160ec:	f008 fad4 	bl	1e698 <bt_addr_le_is_bonded>
   160f0:	b920      	cbnz	r0, 160fc <bt_gatt_disconnected+0xac>
		clear_cf_cfg(cfg);
   160f2:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   160f4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   160f8:	f009 bbb8 	b.w	1f86c <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   160fc:	1c68      	adds	r0, r5, #1
   160fe:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16100:	350c      	adds	r5, #12
   16102:	f009 fa84 	bl	1f60e <bt_addr_le_copy>
   16106:	f3bf 8f5b 	dmb	ish
   1610a:	e855 3f00 	ldrex	r3, [r5]
   1610e:	f023 0302 	bic.w	r3, r3, #2
   16112:	e845 3200 	strex	r2, r3, [r5]
   16116:	2a00      	cmp	r2, #0
   16118:	d1f7      	bne.n	1610a <bt_gatt_disconnected+0xba>
   1611a:	f3bf 8f5b 	dmb	ish
}
   1611e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16122:	bf00      	nop
   16124:	000156a1 	.word	0x000156a1

00016128 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   16128:	4b04      	ldr	r3, [pc, #16]	; (1613c <bt_smp_accept+0x14>)
   1612a:	6818      	ldr	r0, [r3, #0]
   1612c:	b918      	cbnz	r0, 16136 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
   1612e:	4a04      	ldr	r2, [pc, #16]	; (16140 <bt_smp_accept+0x18>)
   16130:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   16132:	600b      	str	r3, [r1, #0]

		return 0;
   16134:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   16136:	f06f 000b 	mvn.w	r0, #11
}
   1613a:	4770      	bx	lr
   1613c:	20001868 	.word	0x20001868
   16140:	00021348 	.word	0x00021348

00016144 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   16144:	4b02      	ldr	r3, [pc, #8]	; (16150 <net_buf_pool_get+0xc>)
   16146:	222c      	movs	r2, #44	; 0x2c
   16148:	fb02 3000 	mla	r0, r2, r0, r3
   1614c:	4770      	bx	lr
   1614e:	bf00      	nop
   16150:	200006d4 	.word	0x200006d4

00016154 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16154:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   16156:	4a05      	ldr	r2, [pc, #20]	; (1616c <net_buf_id+0x18>)
   16158:	212c      	movs	r1, #44	; 0x2c
   1615a:	fb01 2303 	mla	r3, r1, r3, r2
   1615e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16160:	1ac0      	subs	r0, r0, r3
}
   16162:	4b03      	ldr	r3, [pc, #12]	; (16170 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   16164:	10c0      	asrs	r0, r0, #3
}
   16166:	4358      	muls	r0, r3
   16168:	4770      	bx	lr
   1616a:	bf00      	nop
   1616c:	200006d4 	.word	0x200006d4
   16170:	aaaaaaab 	.word	0xaaaaaaab

00016174 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   16174:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16176:	4a0a      	ldr	r2, [pc, #40]	; (161a0 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16178:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1617a:	242c      	movs	r4, #44	; 0x2c
   1617c:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   16180:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16184:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   16186:	6823      	ldr	r3, [r4, #0]
   16188:	429a      	cmp	r2, r3
   1618a:	bf94      	ite	ls
   1618c:	600a      	strls	r2, [r1, #0]
   1618e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   16190:	f7ff ffe0 	bl	16154 <net_buf_id>
   16194:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   16198:	fb02 3000 	mla	r0, r2, r0, r3
   1619c:	bd10      	pop	{r4, pc}
   1619e:	bf00      	nop
   161a0:	200006d4 	.word	0x200006d4

000161a4 <net_buf_reset>:
{
   161a4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   161a6:	7943      	ldrb	r3, [r0, #5]
{
   161a8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   161aa:	b14b      	cbz	r3, 161c0 <net_buf_reset+0x1c>
   161ac:	490d      	ldr	r1, [pc, #52]	; (161e4 <net_buf_reset+0x40>)
   161ae:	480e      	ldr	r0, [pc, #56]	; (161e8 <net_buf_reset+0x44>)
   161b0:	4a0e      	ldr	r2, [pc, #56]	; (161ec <net_buf_reset+0x48>)
   161b2:	234f      	movs	r3, #79	; 0x4f
   161b4:	f007 fafe 	bl	1d7b4 <printk>
   161b8:	480c      	ldr	r0, [pc, #48]	; (161ec <net_buf_reset+0x48>)
   161ba:	214f      	movs	r1, #79	; 0x4f
   161bc:	f007 fd54 	bl	1dc68 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   161c0:	6823      	ldr	r3, [r4, #0]
   161c2:	b14b      	cbz	r3, 161d8 <net_buf_reset+0x34>
   161c4:	490a      	ldr	r1, [pc, #40]	; (161f0 <net_buf_reset+0x4c>)
   161c6:	4808      	ldr	r0, [pc, #32]	; (161e8 <net_buf_reset+0x44>)
   161c8:	4a08      	ldr	r2, [pc, #32]	; (161ec <net_buf_reset+0x48>)
   161ca:	2350      	movs	r3, #80	; 0x50
   161cc:	f007 faf2 	bl	1d7b4 <printk>
   161d0:	4806      	ldr	r0, [pc, #24]	; (161ec <net_buf_reset+0x48>)
   161d2:	2150      	movs	r1, #80	; 0x50
   161d4:	f007 fd48 	bl	1dc68 <assert_post_action>
	buf->len  = 0U;
   161d8:	2300      	movs	r3, #0
   161da:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   161dc:	6923      	ldr	r3, [r4, #16]
   161de:	60a3      	str	r3, [r4, #8]
}
   161e0:	bd10      	pop	{r4, pc}
   161e2:	bf00      	nop
   161e4:	000224b8 	.word	0x000224b8
   161e8:	00021650 	.word	0x00021650
   161ec:	00022494 	.word	0x00022494
   161f0:	000224c9 	.word	0x000224c9

000161f4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   161f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   161f8:	4605      	mov	r5, r0
   161fa:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   161fc:	4610      	mov	r0, r2
   161fe:	4619      	mov	r1, r3
{
   16200:	4616      	mov	r6, r2
   16202:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   16204:	f00a fb86 	bl	20914 <sys_clock_timeout_end_calc>
   16208:	4680      	mov	r8, r0
   1620a:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   1620c:	b94d      	cbnz	r5, 16222 <net_buf_alloc_len+0x2e>
   1620e:	494d      	ldr	r1, [pc, #308]	; (16344 <net_buf_alloc_len+0x150>)
   16210:	484d      	ldr	r0, [pc, #308]	; (16348 <net_buf_alloc_len+0x154>)
   16212:	4a4e      	ldr	r2, [pc, #312]	; (1634c <net_buf_alloc_len+0x158>)
   16214:	23ed      	movs	r3, #237	; 0xed
   16216:	f007 facd 	bl	1d7b4 <printk>
   1621a:	484c      	ldr	r0, [pc, #304]	; (1634c <net_buf_alloc_len+0x158>)
   1621c:	21ed      	movs	r1, #237	; 0xed
   1621e:	f007 fd23 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   16222:	f04f 0340 	mov.w	r3, #64	; 0x40
   16226:	f3ef 8a11 	mrs	sl, BASEPRI
   1622a:	f383 8812 	msr	BASEPRI_MAX, r3
   1622e:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   16232:	8beb      	ldrh	r3, [r5, #30]
   16234:	2b00      	cmp	r3, #0
   16236:	d055      	beq.n	162e4 <net_buf_alloc_len+0xf0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   16238:	8baa      	ldrh	r2, [r5, #28]
   1623a:	429a      	cmp	r2, r3
   1623c:	d93e      	bls.n	162bc <net_buf_alloc_len+0xc8>
	return z_impl_k_queue_get(queue, timeout);
   1623e:	2200      	movs	r2, #0
   16240:	2300      	movs	r3, #0
   16242:	4628      	mov	r0, r5
   16244:	f003 fe50 	bl	19ee8 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   16248:	4604      	mov	r4, r0
   1624a:	2800      	cmp	r0, #0
   1624c:	d036      	beq.n	162bc <net_buf_alloc_len+0xc8>
	__asm__ volatile(
   1624e:	f38a 8811 	msr	BASEPRI, sl
   16252:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   16256:	f8dd a004 	ldr.w	sl, [sp, #4]
   1625a:	f1ba 0f00 	cmp.w	sl, #0
   1625e:	d06d      	beq.n	1633c <net_buf_alloc_len+0x148>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   16260:	ea56 0307 	orrs.w	r3, r6, r7
   16264:	d010      	beq.n	16288 <net_buf_alloc_len+0x94>
   16266:	1c7b      	adds	r3, r7, #1
   16268:	bf08      	it	eq
   1626a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1626e:	d00b      	beq.n	16288 <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   16270:	f006 f9be 	bl	1c5f0 <sys_clock_tick_get>
   16274:	ebb8 0600 	subs.w	r6, r8, r0
   16278:	eb69 0701 	sbc.w	r7, r9, r1
   1627c:	2e00      	cmp	r6, #0
   1627e:	f177 0300 	sbcs.w	r3, r7, #0
   16282:	bfbc      	itt	lt
   16284:	2600      	movlt	r6, #0
   16286:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16288:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1628a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 16350 <net_buf_alloc_len+0x15c>
   1628e:	f04f 092c 	mov.w	r9, #44	; 0x2c
   16292:	fb09 8303 	mla	r3, r9, r3, r8
   16296:	4632      	mov	r2, r6
   16298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1629a:	681b      	ldr	r3, [r3, #0]
   1629c:	a901      	add	r1, sp, #4
   1629e:	681d      	ldr	r5, [r3, #0]
   162a0:	4620      	mov	r0, r4
   162a2:	463b      	mov	r3, r7
   162a4:	47a8      	blx	r5
   162a6:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   162a8:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   162aa:	bb58      	cbnz	r0, 16304 <net_buf_alloc_len+0x110>
	k_lifo_put(&pool->free, buf);
   162ac:	79a0      	ldrb	r0, [r4, #6]
   162ae:	4621      	mov	r1, r4
   162b0:	fb00 8009 	mla	r0, r0, r9, r8
   162b4:	f00a fa8b 	bl	207ce <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   162b8:	462c      	mov	r4, r5
}
   162ba:	e01f      	b.n	162fc <net_buf_alloc_len+0x108>
		uninit_count = pool->uninit_count--;
   162bc:	8be8      	ldrh	r0, [r5, #30]
   162be:	1e43      	subs	r3, r0, #1
   162c0:	83eb      	strh	r3, [r5, #30]
   162c2:	f38a 8811 	msr	BASEPRI, sl
   162c6:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   162ca:	8bac      	ldrh	r4, [r5, #28]
   162cc:	1a24      	subs	r4, r4, r0
   162ce:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   162d0:	2318      	movs	r3, #24
   162d2:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   162d6:	481e      	ldr	r0, [pc, #120]	; (16350 <net_buf_alloc_len+0x15c>)
   162d8:	4b1e      	ldr	r3, [pc, #120]	; (16354 <net_buf_alloc_len+0x160>)
   162da:	1a2d      	subs	r5, r5, r0
   162dc:	10ad      	asrs	r5, r5, #2
   162de:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   162e0:	71a5      	strb	r5, [r4, #6]
		goto success;
   162e2:	e7b8      	b.n	16256 <net_buf_alloc_len+0x62>
   162e4:	f38a 8811 	msr	BASEPRI, sl
   162e8:	f3bf 8f6f 	isb	sy
   162ec:	4632      	mov	r2, r6
   162ee:	463b      	mov	r3, r7
   162f0:	4628      	mov	r0, r5
   162f2:	f003 fdf9 	bl	19ee8 <z_impl_k_queue_get>
	if (!buf) {
   162f6:	4604      	mov	r4, r0
   162f8:	2800      	cmp	r0, #0
   162fa:	d1ac      	bne.n	16256 <net_buf_alloc_len+0x62>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   162fc:	4620      	mov	r0, r4
   162fe:	b002      	add	sp, #8
   16300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
   16304:	9b01      	ldr	r3, [sp, #4]
   16306:	459a      	cmp	sl, r3
   16308:	d90e      	bls.n	16328 <net_buf_alloc_len+0x134>
   1630a:	4913      	ldr	r1, [pc, #76]	; (16358 <net_buf_alloc_len+0x164>)
   1630c:	4a0f      	ldr	r2, [pc, #60]	; (1634c <net_buf_alloc_len+0x158>)
   1630e:	480e      	ldr	r0, [pc, #56]	; (16348 <net_buf_alloc_len+0x154>)
   16310:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   16314:	f007 fa4e 	bl	1d7b4 <printk>
   16318:	4810      	ldr	r0, [pc, #64]	; (1635c <net_buf_alloc_len+0x168>)
   1631a:	f007 fa4b 	bl	1d7b4 <printk>
   1631e:	480b      	ldr	r0, [pc, #44]	; (1634c <net_buf_alloc_len+0x158>)
   16320:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   16324:	f007 fca0 	bl	1dc68 <assert_post_action>
	buf->frags = NULL;
   16328:	2300      	movs	r3, #0
   1632a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1632c:	2301      	movs	r3, #1
   1632e:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   16330:	9b01      	ldr	r3, [sp, #4]
   16332:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   16334:	4620      	mov	r0, r4
   16336:	f7ff ff35 	bl	161a4 <net_buf_reset>
	return buf;
   1633a:	e7df      	b.n	162fc <net_buf_alloc_len+0x108>
		buf->__buf = NULL;
   1633c:	f8c4 a010 	str.w	sl, [r4, #16]
   16340:	e7f2      	b.n	16328 <net_buf_alloc_len+0x134>
   16342:	bf00      	nop
   16344:	000224e3 	.word	0x000224e3
   16348:	00021650 	.word	0x00021650
   1634c:	00022494 	.word	0x00022494
   16350:	200006d4 	.word	0x200006d4
   16354:	ba2e8ba3 	.word	0xba2e8ba3
   16358:	000224e8 	.word	0x000224e8
   1635c:	000224f9 	.word	0x000224f9

00016360 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   16360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16364:	4606      	mov	r6, r0
   16366:	f003 fdbf 	bl	19ee8 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1636a:	4605      	mov	r5, r0
   1636c:	b150      	cbz	r0, 16384 <net_buf_get+0x24>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1636e:	4f13      	ldr	r7, [pc, #76]	; (163bc <net_buf_get+0x5c>)
   16370:	f8df 804c 	ldr.w	r8, [pc, #76]	; 163c0 <net_buf_get+0x60>
   16374:	f8df 904c 	ldr.w	r9, [pc, #76]	; 163c4 <net_buf_get+0x64>
   16378:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1637a:	7963      	ldrb	r3, [r4, #5]
   1637c:	f013 0301 	ands.w	r3, r3, #1
   16380:	d103      	bne.n	1638a <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   16382:	6023      	str	r3, [r4, #0]

	return buf;
}
   16384:	4628      	mov	r0, r5
   16386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1638a:	2200      	movs	r2, #0
   1638c:	2300      	movs	r3, #0
   1638e:	4630      	mov	r0, r6
   16390:	f003 fdaa 	bl	19ee8 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   16394:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   16396:	b958      	cbnz	r0, 163b0 <net_buf_get+0x50>
   16398:	4641      	mov	r1, r8
   1639a:	4648      	mov	r0, r9
   1639c:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   163a0:	463a      	mov	r2, r7
   163a2:	f007 fa07 	bl	1d7b4 <printk>
   163a6:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   163aa:	4638      	mov	r0, r7
   163ac:	f007 fc5c 	bl	1dc68 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   163b0:	7963      	ldrb	r3, [r4, #5]
   163b2:	f023 0301 	bic.w	r3, r3, #1
   163b6:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   163b8:	6824      	ldr	r4, [r4, #0]
   163ba:	e7de      	b.n	1637a <net_buf_get+0x1a>
   163bc:	00022494 	.word	0x00022494
   163c0:	000224fc 	.word	0x000224fc
   163c4:	00021650 	.word	0x00021650

000163c8 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   163c8:	b538      	push	{r3, r4, r5, lr}
   163ca:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   163cc:	4604      	mov	r4, r0
   163ce:	b958      	cbnz	r0, 163e8 <net_buf_simple_reserve+0x20>
   163d0:	490e      	ldr	r1, [pc, #56]	; (1640c <net_buf_simple_reserve+0x44>)
   163d2:	480f      	ldr	r0, [pc, #60]	; (16410 <net_buf_simple_reserve+0x48>)
   163d4:	4a0f      	ldr	r2, [pc, #60]	; (16414 <net_buf_simple_reserve+0x4c>)
   163d6:	f240 13bd 	movw	r3, #445	; 0x1bd
   163da:	f007 f9eb 	bl	1d7b4 <printk>
   163de:	480d      	ldr	r0, [pc, #52]	; (16414 <net_buf_simple_reserve+0x4c>)
   163e0:	f240 11bd 	movw	r1, #445	; 0x1bd
   163e4:	f007 fc40 	bl	1dc68 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   163e8:	88a3      	ldrh	r3, [r4, #4]
   163ea:	b15b      	cbz	r3, 16404 <net_buf_simple_reserve+0x3c>
   163ec:	490a      	ldr	r1, [pc, #40]	; (16418 <net_buf_simple_reserve+0x50>)
   163ee:	4808      	ldr	r0, [pc, #32]	; (16410 <net_buf_simple_reserve+0x48>)
   163f0:	4a08      	ldr	r2, [pc, #32]	; (16414 <net_buf_simple_reserve+0x4c>)
   163f2:	f44f 73df 	mov.w	r3, #446	; 0x1be
   163f6:	f007 f9dd 	bl	1d7b4 <printk>
   163fa:	4806      	ldr	r0, [pc, #24]	; (16414 <net_buf_simple_reserve+0x4c>)
   163fc:	f44f 71df 	mov.w	r1, #446	; 0x1be
   16400:	f007 fc32 	bl	1dc68 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   16404:	68a3      	ldr	r3, [r4, #8]
   16406:	442b      	add	r3, r5
   16408:	6023      	str	r3, [r4, #0]
}
   1640a:	bd38      	pop	{r3, r4, r5, pc}
   1640c:	0002207c 	.word	0x0002207c
   16410:	00021650 	.word	0x00021650
   16414:	00022494 	.word	0x00022494
   16418:	00022508 	.word	0x00022508

0001641c <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1641c:	b538      	push	{r3, r4, r5, lr}
   1641e:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   16420:	4605      	mov	r5, r0
   16422:	b958      	cbnz	r0, 1643c <net_buf_put+0x20>
   16424:	4913      	ldr	r1, [pc, #76]	; (16474 <net_buf_put+0x58>)
   16426:	4814      	ldr	r0, [pc, #80]	; (16478 <net_buf_put+0x5c>)
   16428:	4a14      	ldr	r2, [pc, #80]	; (1647c <net_buf_put+0x60>)
   1642a:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
   1642e:	f007 f9c1 	bl	1d7b4 <printk>
   16432:	4812      	ldr	r0, [pc, #72]	; (1647c <net_buf_put+0x60>)
   16434:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
   16438:	f007 fc16 	bl	1dc68 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1643c:	b95c      	cbnz	r4, 16456 <net_buf_put+0x3a>
   1643e:	4910      	ldr	r1, [pc, #64]	; (16480 <net_buf_put+0x64>)
   16440:	480d      	ldr	r0, [pc, #52]	; (16478 <net_buf_put+0x5c>)
   16442:	4a0e      	ldr	r2, [pc, #56]	; (1647c <net_buf_put+0x60>)
   16444:	f240 13fb 	movw	r3, #507	; 0x1fb
   16448:	f007 f9b4 	bl	1d7b4 <printk>
   1644c:	480b      	ldr	r0, [pc, #44]	; (1647c <net_buf_put+0x60>)
   1644e:	f240 11fb 	movw	r1, #507	; 0x1fb
   16452:	f007 fc09 	bl	1dc68 <assert_post_action>
{
   16456:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   16458:	6811      	ldr	r1, [r2, #0]
   1645a:	b929      	cbnz	r1, 16468 <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1645c:	4621      	mov	r1, r4
   1645e:	4628      	mov	r0, r5
}
   16460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   16464:	f003 bce2 	b.w	19e2c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   16468:	7953      	ldrb	r3, [r2, #5]
   1646a:	f043 0301 	orr.w	r3, r3, #1
   1646e:	7153      	strb	r3, [r2, #5]
   16470:	460a      	mov	r2, r1
   16472:	e7f1      	b.n	16458 <net_buf_put+0x3c>
   16474:	00022517 	.word	0x00022517
   16478:	00021650 	.word	0x00021650
   1647c:	00022494 	.word	0x00022494
   16480:	0002207c 	.word	0x0002207c

00016484 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   16484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   16488:	4605      	mov	r5, r0
   1648a:	b328      	cbz	r0, 164d8 <net_buf_unref+0x54>
   1648c:	4e1c      	ldr	r6, [pc, #112]	; (16500 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1648e:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   16490:	f04f 082c 	mov.w	r8, #44	; 0x2c
		struct net_buf *frags = buf->frags;
   16494:	462c      	mov	r4, r5
   16496:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   16498:	7923      	ldrb	r3, [r4, #4]
   1649a:	3b01      	subs	r3, #1
   1649c:	b2db      	uxtb	r3, r3
   1649e:	7123      	strb	r3, [r4, #4]
   164a0:	b9c3      	cbnz	r3, 164d4 <net_buf_unref+0x50>
		if (buf->__buf) {
   164a2:	6921      	ldr	r1, [r4, #16]
   164a4:	b159      	cbz	r1, 164be <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   164a6:	7963      	ldrb	r3, [r4, #5]
   164a8:	079b      	lsls	r3, r3, #30
   164aa:	d407      	bmi.n	164bc <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
   164ac:	79a3      	ldrb	r3, [r4, #6]
   164ae:	fb08 6303 	mla	r3, r8, r3, r6
   164b2:	4620      	mov	r0, r4
   164b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   164b6:	681b      	ldr	r3, [r3, #0]
   164b8:	689b      	ldr	r3, [r3, #8]
   164ba:	4798      	blx	r3
			buf->__buf = NULL;
   164bc:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   164be:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   164c0:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   164c2:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   164c6:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   164c8:	6a1b      	ldr	r3, [r3, #32]
   164ca:	b19b      	cbz	r3, 164f4 <net_buf_unref+0x70>
			pool->destroy(buf);
   164cc:	4620      	mov	r0, r4
   164ce:	4798      	blx	r3
	while (buf) {
   164d0:	2d00      	cmp	r5, #0
   164d2:	d1df      	bne.n	16494 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   164d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   164d8:	490a      	ldr	r1, [pc, #40]	; (16504 <net_buf_unref+0x80>)
   164da:	480b      	ldr	r0, [pc, #44]	; (16508 <net_buf_unref+0x84>)
   164dc:	4a0b      	ldr	r2, [pc, #44]	; (1650c <net_buf_unref+0x88>)
   164de:	f240 230a 	movw	r3, #522	; 0x20a
   164e2:	f007 f967 	bl	1d7b4 <printk>
}
   164e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   164ea:	4808      	ldr	r0, [pc, #32]	; (1650c <net_buf_unref+0x88>)
   164ec:	f240 210a 	movw	r1, #522	; 0x20a
   164f0:	f007 bbba 	b.w	1dc68 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   164f4:	4621      	mov	r1, r4
   164f6:	fb00 6008 	mla	r0, r0, r8, r6
   164fa:	f00a f968 	bl	207ce <k_queue_prepend>
}
   164fe:	e7e7      	b.n	164d0 <net_buf_unref+0x4c>
   16500:	200006d4 	.word	0x200006d4
   16504:	0002207c 	.word	0x0002207c
   16508:	00021650 	.word	0x00021650
   1650c:	00022494 	.word	0x00022494

00016510 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   16510:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   16512:	4604      	mov	r4, r0
   16514:	b958      	cbnz	r0, 1652e <net_buf_ref+0x1e>
   16516:	4908      	ldr	r1, [pc, #32]	; (16538 <net_buf_ref+0x28>)
   16518:	4808      	ldr	r0, [pc, #32]	; (1653c <net_buf_ref+0x2c>)
   1651a:	4a09      	ldr	r2, [pc, #36]	; (16540 <net_buf_ref+0x30>)
   1651c:	f240 2339 	movw	r3, #569	; 0x239
   16520:	f007 f948 	bl	1d7b4 <printk>
   16524:	4806      	ldr	r0, [pc, #24]	; (16540 <net_buf_ref+0x30>)
   16526:	f240 2139 	movw	r1, #569	; 0x239
   1652a:	f007 fb9d 	bl	1dc68 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1652e:	7923      	ldrb	r3, [r4, #4]
   16530:	3301      	adds	r3, #1
   16532:	7123      	strb	r3, [r4, #4]
	return buf;
}
   16534:	4620      	mov	r0, r4
   16536:	bd10      	pop	{r4, pc}
   16538:	0002207c 	.word	0x0002207c
   1653c:	00021650 	.word	0x00021650
   16540:	00022494 	.word	0x00022494

00016544 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   16544:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   16546:	4604      	mov	r4, r0
   16548:	b958      	cbnz	r0, 16562 <net_buf_frag_last+0x1e>
   1654a:	4908      	ldr	r1, [pc, #32]	; (1656c <net_buf_frag_last+0x28>)
   1654c:	4808      	ldr	r0, [pc, #32]	; (16570 <net_buf_frag_last+0x2c>)
   1654e:	4a09      	ldr	r2, [pc, #36]	; (16574 <net_buf_frag_last+0x30>)
   16550:	f240 2376 	movw	r3, #630	; 0x276
   16554:	f007 f92e 	bl	1d7b4 <printk>
   16558:	4806      	ldr	r0, [pc, #24]	; (16574 <net_buf_frag_last+0x30>)
   1655a:	f240 2176 	movw	r1, #630	; 0x276
   1655e:	f007 fb83 	bl	1dc68 <assert_post_action>

	while (buf->frags) {
   16562:	4620      	mov	r0, r4
   16564:	6824      	ldr	r4, [r4, #0]
   16566:	2c00      	cmp	r4, #0
   16568:	d1fb      	bne.n	16562 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1656a:	bd10      	pop	{r4, pc}
   1656c:	0002207c 	.word	0x0002207c
   16570:	00021650 	.word	0x00021650
   16574:	00022494 	.word	0x00022494

00016578 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   16578:	b538      	push	{r3, r4, r5, lr}
   1657a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1657c:	4604      	mov	r4, r0
   1657e:	b958      	cbnz	r0, 16598 <net_buf_frag_insert+0x20>
   16580:	4910      	ldr	r1, [pc, #64]	; (165c4 <net_buf_frag_insert+0x4c>)
   16582:	4811      	ldr	r0, [pc, #68]	; (165c8 <net_buf_frag_insert+0x50>)
   16584:	4a11      	ldr	r2, [pc, #68]	; (165cc <net_buf_frag_insert+0x54>)
   16586:	f240 2381 	movw	r3, #641	; 0x281
   1658a:	f007 f913 	bl	1d7b4 <printk>
   1658e:	480f      	ldr	r0, [pc, #60]	; (165cc <net_buf_frag_insert+0x54>)
   16590:	f240 2181 	movw	r1, #641	; 0x281
   16594:	f007 fb68 	bl	1dc68 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   16598:	b95d      	cbnz	r5, 165b2 <net_buf_frag_insert+0x3a>
   1659a:	490d      	ldr	r1, [pc, #52]	; (165d0 <net_buf_frag_insert+0x58>)
   1659c:	480a      	ldr	r0, [pc, #40]	; (165c8 <net_buf_frag_insert+0x50>)
   1659e:	4a0b      	ldr	r2, [pc, #44]	; (165cc <net_buf_frag_insert+0x54>)
   165a0:	f240 2382 	movw	r3, #642	; 0x282
   165a4:	f007 f906 	bl	1d7b4 <printk>
   165a8:	4808      	ldr	r0, [pc, #32]	; (165cc <net_buf_frag_insert+0x54>)
   165aa:	f240 2182 	movw	r1, #642	; 0x282
   165ae:	f007 fb5b 	bl	1dc68 <assert_post_action>

	if (parent->frags) {
   165b2:	6823      	ldr	r3, [r4, #0]
   165b4:	b123      	cbz	r3, 165c0 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
   165b6:	4628      	mov	r0, r5
   165b8:	f7ff ffc4 	bl	16544 <net_buf_frag_last>
   165bc:	6823      	ldr	r3, [r4, #0]
   165be:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   165c0:	6025      	str	r5, [r4, #0]
}
   165c2:	bd38      	pop	{r3, r4, r5, pc}
   165c4:	0002251c 	.word	0x0002251c
   165c8:	00021650 	.word	0x00021650
   165cc:	00022494 	.word	0x00022494
   165d0:	00022523 	.word	0x00022523

000165d4 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   165d4:	b538      	push	{r3, r4, r5, lr}
   165d6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   165d8:	460d      	mov	r5, r1
   165da:	b959      	cbnz	r1, 165f4 <net_buf_frag_add+0x20>
   165dc:	490c      	ldr	r1, [pc, #48]	; (16610 <net_buf_frag_add+0x3c>)
   165de:	480d      	ldr	r0, [pc, #52]	; (16614 <net_buf_frag_add+0x40>)
   165e0:	4a0d      	ldr	r2, [pc, #52]	; (16618 <net_buf_frag_add+0x44>)
   165e2:	f240 238d 	movw	r3, #653	; 0x28d
   165e6:	f007 f8e5 	bl	1d7b4 <printk>
   165ea:	480b      	ldr	r0, [pc, #44]	; (16618 <net_buf_frag_add+0x44>)
   165ec:	f240 218d 	movw	r1, #653	; 0x28d
   165f0:	f007 fb3a 	bl	1dc68 <assert_post_action>

	if (!head) {
   165f4:	b924      	cbnz	r4, 16600 <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
   165f6:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   165f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   165fc:	f7ff bf88 	b.w	16510 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   16600:	4620      	mov	r0, r4
   16602:	f7ff ff9f 	bl	16544 <net_buf_frag_last>
   16606:	4629      	mov	r1, r5
   16608:	f7ff ffb6 	bl	16578 <net_buf_frag_insert>
}
   1660c:	4620      	mov	r0, r4
   1660e:	bd38      	pop	{r3, r4, r5, pc}
   16610:	00022523 	.word	0x00022523
   16614:	00021650 	.word	0x00021650
   16618:	00022494 	.word	0x00022494

0001661c <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1661c:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1661e:	6882      	ldr	r2, [r0, #8]
   16620:	6803      	ldr	r3, [r0, #0]
   16622:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   16624:	4299      	cmp	r1, r3
{
   16626:	4604      	mov	r4, r0
   16628:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1662a:	d90b      	bls.n	16644 <net_buf_simple_push+0x28>
   1662c:	4909      	ldr	r1, [pc, #36]	; (16654 <net_buf_simple_push+0x38>)
   1662e:	480a      	ldr	r0, [pc, #40]	; (16658 <net_buf_simple_push+0x3c>)
   16630:	4a0a      	ldr	r2, [pc, #40]	; (1665c <net_buf_simple_push+0x40>)
   16632:	f240 4311 	movw	r3, #1041	; 0x411
   16636:	f007 f8bd 	bl	1d7b4 <printk>
   1663a:	4808      	ldr	r0, [pc, #32]	; (1665c <net_buf_simple_push+0x40>)
   1663c:	f240 4111 	movw	r1, #1041	; 0x411
   16640:	f007 fb12 	bl	1dc68 <assert_post_action>
	buf->data -= len;
   16644:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   16646:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   16648:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1664a:	440d      	add	r5, r1
	buf->data -= len;
   1664c:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1664e:	80a5      	strh	r5, [r4, #4]
}
   16650:	bd38      	pop	{r3, r4, r5, pc}
   16652:	bf00      	nop
   16654:	00022538 	.word	0x00022538
   16658:	00021650 	.word	0x00021650
   1665c:	00022494 	.word	0x00022494

00016660 <net_buf_simple_pull>:
{
   16660:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   16662:	8883      	ldrh	r3, [r0, #4]
   16664:	428b      	cmp	r3, r1
{
   16666:	4604      	mov	r4, r0
   16668:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1666a:	d20b      	bcs.n	16684 <net_buf_simple_pull+0x24>
   1666c:	4909      	ldr	r1, [pc, #36]	; (16694 <net_buf_simple_pull+0x34>)
   1666e:	480a      	ldr	r0, [pc, #40]	; (16698 <net_buf_simple_pull+0x38>)
   16670:	4a0a      	ldr	r2, [pc, #40]	; (1669c <net_buf_simple_pull+0x3c>)
   16672:	f240 4371 	movw	r3, #1137	; 0x471
   16676:	f007 f89d 	bl	1d7b4 <printk>
   1667a:	4808      	ldr	r0, [pc, #32]	; (1669c <net_buf_simple_pull+0x3c>)
   1667c:	f240 4171 	movw	r1, #1137	; 0x471
   16680:	f007 faf2 	bl	1dc68 <assert_post_action>
	buf->len -= len;
   16684:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   16686:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   16688:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1668a:	4428      	add	r0, r5
	buf->len -= len;
   1668c:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1668e:	6020      	str	r0, [r4, #0]
}
   16690:	bd38      	pop	{r3, r4, r5, pc}
   16692:	bf00      	nop
   16694:	00022528 	.word	0x00022528
   16698:	00021650 	.word	0x00021650
   1669c:	00022494 	.word	0x00022494

000166a0 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   166a0:	8883      	ldrh	r3, [r0, #4]
   166a2:	428b      	cmp	r3, r1
{
   166a4:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   166a6:	6806      	ldr	r6, [r0, #0]
{
   166a8:	4604      	mov	r4, r0
   166aa:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   166ac:	d20b      	bcs.n	166c6 <net_buf_simple_pull_mem+0x26>
   166ae:	490a      	ldr	r1, [pc, #40]	; (166d8 <net_buf_simple_pull_mem+0x38>)
   166b0:	480a      	ldr	r0, [pc, #40]	; (166dc <net_buf_simple_pull_mem+0x3c>)
   166b2:	4a0b      	ldr	r2, [pc, #44]	; (166e0 <net_buf_simple_pull_mem+0x40>)
   166b4:	f240 437d 	movw	r3, #1149	; 0x47d
   166b8:	f007 f87c 	bl	1d7b4 <printk>
   166bc:	4808      	ldr	r0, [pc, #32]	; (166e0 <net_buf_simple_pull_mem+0x40>)
   166be:	f240 417d 	movw	r1, #1149	; 0x47d
   166c2:	f007 fad1 	bl	1dc68 <assert_post_action>
	buf->len -= len;
   166c6:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   166c8:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   166ca:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   166cc:	4429      	add	r1, r5
	buf->len -= len;
   166ce:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   166d0:	6021      	str	r1, [r4, #0]
}
   166d2:	4630      	mov	r0, r6
   166d4:	bd70      	pop	{r4, r5, r6, pc}
   166d6:	bf00      	nop
   166d8:	00022528 	.word	0x00022528
   166dc:	00021650 	.word	0x00021650
   166e0:	00022494 	.word	0x00022494

000166e4 <net_buf_simple_add>:
{
   166e4:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   166e6:	6803      	ldr	r3, [r0, #0]
   166e8:	8886      	ldrh	r6, [r0, #4]
   166ea:	4604      	mov	r4, r0
   166ec:	460d      	mov	r5, r1
   166ee:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   166f0:	f009 fb7e 	bl	1fdf0 <net_buf_simple_tailroom>
   166f4:	4288      	cmp	r0, r1
   166f6:	d20b      	bcs.n	16710 <net_buf_simple_add+0x2c>
   166f8:	4908      	ldr	r1, [pc, #32]	; (1671c <net_buf_simple_add+0x38>)
   166fa:	4809      	ldr	r0, [pc, #36]	; (16720 <net_buf_simple_add+0x3c>)
   166fc:	4a09      	ldr	r2, [pc, #36]	; (16724 <net_buf_simple_add+0x40>)
   166fe:	f240 3322 	movw	r3, #802	; 0x322
   16702:	f007 f857 	bl	1d7b4 <printk>
   16706:	4807      	ldr	r0, [pc, #28]	; (16724 <net_buf_simple_add+0x40>)
   16708:	f240 3122 	movw	r1, #802	; 0x322
   1670c:	f007 faac 	bl	1dc68 <assert_post_action>
	buf->len += len;
   16710:	88a1      	ldrh	r1, [r4, #4]
   16712:	440d      	add	r5, r1
   16714:	80a5      	strh	r5, [r4, #4]
}
   16716:	4630      	mov	r0, r6
   16718:	bd70      	pop	{r4, r5, r6, pc}
   1671a:	bf00      	nop
   1671c:	0002255c 	.word	0x0002255c
   16720:	00021650 	.word	0x00021650
   16724:	00022494 	.word	0x00022494

00016728 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   16728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1672c:	4c10      	ldr	r4, [pc, #64]	; (16770 <onoff_start+0x48>)
   1672e:	1b07      	subs	r7, r0, r4
   16730:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   16734:	f04f 080c 	mov.w	r8, #12
   16738:	fb08 f807 	mul.w	r8, r8, r7
{
   1673c:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1673e:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
   16742:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   16744:	4420      	add	r0, r4
   16746:	2140      	movs	r1, #64	; 0x40
   16748:	f009 fb6f 	bl	1fe2a <set_starting_state>
	if (err < 0) {
   1674c:	1e01      	subs	r1, r0, #0
   1674e:	db09      	blt.n	16764 <onoff_start+0x3c>
	subdata->cb = cb;
   16750:	4b08      	ldr	r3, [pc, #32]	; (16774 <onoff_start+0x4c>)
   16752:	4444      	add	r4, r8
	subdata->user_data = user_data;
   16754:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   16758:	4b07      	ldr	r3, [pc, #28]	; (16778 <onoff_start+0x50>)
   1675a:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   1675e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   16762:	4718      	bx	r3
		notify(mgr, err);
   16764:	4630      	mov	r0, r6
   16766:	462b      	mov	r3, r5
}
   16768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   1676c:	4718      	bx	r3
   1676e:	bf00      	nop
   16770:	20001e54 	.word	0x20001e54
   16774:	0001fe8d 	.word	0x0001fe8d
   16778:	0002138c 	.word	0x0002138c

0001677c <get_status>:
{
   1677c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1677e:	b2cc      	uxtb	r4, r1
   16780:	2c01      	cmp	r4, #1
{
   16782:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   16784:	d909      	bls.n	1679a <get_status+0x1e>
   16786:	4909      	ldr	r1, [pc, #36]	; (167ac <get_status+0x30>)
   16788:	4809      	ldr	r0, [pc, #36]	; (167b0 <get_status+0x34>)
   1678a:	4a0a      	ldr	r2, [pc, #40]	; (167b4 <get_status+0x38>)
   1678c:	237e      	movs	r3, #126	; 0x7e
   1678e:	f007 f811 	bl	1d7b4 <printk>
   16792:	4808      	ldr	r0, [pc, #32]	; (167b4 <get_status+0x38>)
   16794:	217e      	movs	r1, #126	; 0x7e
   16796:	f007 fa67 	bl	1dc68 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1679a:	692b      	ldr	r3, [r5, #16]
   1679c:	210c      	movs	r1, #12
   1679e:	fb04 3401 	mla	r4, r4, r1, r3
   167a2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   167a4:	f000 0007 	and.w	r0, r0, #7
   167a8:	bd38      	pop	{r3, r4, r5, pc}
   167aa:	bf00      	nop
   167ac:	000225bd 	.word	0x000225bd
   167b0:	00021650 	.word	0x00021650
   167b4:	00022580 	.word	0x00022580

000167b8 <stop>:
{
   167b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   167ba:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   167bc:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   167be:	6907      	ldr	r7, [r0, #16]
{
   167c0:	4605      	mov	r5, r0
   167c2:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   167c4:	d90b      	bls.n	167de <stop+0x26>
   167c6:	4918      	ldr	r1, [pc, #96]	; (16828 <stop+0x70>)
   167c8:	4818      	ldr	r0, [pc, #96]	; (1682c <stop+0x74>)
   167ca:	4a19      	ldr	r2, [pc, #100]	; (16830 <stop+0x78>)
   167cc:	f240 1353 	movw	r3, #339	; 0x153
   167d0:	f006 fff0 	bl	1d7b4 <printk>
   167d4:	4816      	ldr	r0, [pc, #88]	; (16830 <stop+0x78>)
   167d6:	f240 1153 	movw	r1, #339	; 0x153
   167da:	f007 fa45 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   167de:	f04f 0340 	mov.w	r3, #64	; 0x40
   167e2:	f3ef 8211 	mrs	r2, BASEPRI
   167e6:	f383 8812 	msr	BASEPRI_MAX, r3
   167ea:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   167ee:	230c      	movs	r3, #12
   167f0:	fb03 7104 	mla	r1, r3, r4, r7
   167f4:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   167f6:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   167fa:	d001      	beq.n	16800 <stop+0x48>
   167fc:	428e      	cmp	r6, r1
   167fe:	d110      	bne.n	16822 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   16800:	fb03 7304 	mla	r3, r3, r4, r7
   16804:	2101      	movs	r1, #1
   16806:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
   16808:	2000      	movs	r0, #0
	__asm__ volatile(
   1680a:	f382 8811 	msr	BASEPRI, r2
   1680e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   16812:	b928      	cbnz	r0, 16820 <stop+0x68>
	get_sub_config(dev, type)->stop();
   16814:	6869      	ldr	r1, [r5, #4]
   16816:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   1681a:	6863      	ldr	r3, [r4, #4]
   1681c:	4798      	blx	r3
	return 0;
   1681e:	2000      	movs	r0, #0
}
   16820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   16822:	f04f 30ff 	mov.w	r0, #4294967295
   16826:	e7f0      	b.n	1680a <stop+0x52>
   16828:	000225bd 	.word	0x000225bd
   1682c:	00021650 	.word	0x00021650
   16830:	00022580 	.word	0x00022580

00016834 <onoff_stop>:
{
   16834:	b570      	push	{r4, r5, r6, lr}
   16836:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   16838:	4906      	ldr	r1, [pc, #24]	; (16854 <onoff_stop+0x20>)
   1683a:	1a41      	subs	r1, r0, r1
{
   1683c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1683e:	1149      	asrs	r1, r1, #5
   16840:	4805      	ldr	r0, [pc, #20]	; (16858 <onoff_stop+0x24>)
   16842:	2240      	movs	r2, #64	; 0x40
   16844:	f7ff ffb8 	bl	167b8 <stop>
	notify(mgr, res);
   16848:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1684a:	4601      	mov	r1, r0
	notify(mgr, res);
   1684c:	4620      	mov	r0, r4
}
   1684e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   16852:	4718      	bx	r3
   16854:	20001e54 	.word	0x20001e54
   16858:	00020d88 	.word	0x00020d88

0001685c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1685c:	2200      	movs	r2, #0
{
   1685e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   16860:	2101      	movs	r1, #1
{
   16862:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   16864:	4610      	mov	r0, r2
   16866:	f7fa feed 	bl	11644 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1686a:	2000      	movs	r0, #0
   1686c:	f7fa feb8 	bl	115e0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   16870:	480f      	ldr	r0, [pc, #60]	; (168b0 <clk_init+0x54>)
   16872:	f002 f933 	bl	18adc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   16876:	4b0f      	ldr	r3, [pc, #60]	; (168b4 <clk_init+0x58>)
   16878:	4298      	cmp	r0, r3
   1687a:	d115      	bne.n	168a8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1687c:	f009 ff51 	bl	20722 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   16880:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   16882:	490d      	ldr	r1, [pc, #52]	; (168b8 <clk_init+0x5c>)
   16884:	4630      	mov	r0, r6
   16886:	f006 fff0 	bl	1d86a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1688a:	2800      	cmp	r0, #0
   1688c:	db0b      	blt.n	168a6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1688e:	2501      	movs	r5, #1
   16890:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   16892:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   16894:	4908      	ldr	r1, [pc, #32]	; (168b8 <clk_init+0x5c>)
   16896:	f104 0020 	add.w	r0, r4, #32
   1689a:	f006 ffe6 	bl	1d86a <onoff_manager_init>
		if (err < 0) {
   1689e:	2800      	cmp	r0, #0
   168a0:	db01      	blt.n	168a6 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   168a2:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   168a4:	2000      	movs	r0, #0
}
   168a6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   168a8:	f06f 0004 	mvn.w	r0, #4
   168ac:	e7fb      	b.n	168a6 <clk_init+0x4a>
   168ae:	bf00      	nop
   168b0:	000168f1 	.word	0x000168f1
   168b4:	0bad0000 	.word	0x0bad0000
   168b8:	0002139c 	.word	0x0002139c

000168bc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   168bc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   168be:	230c      	movs	r3, #12
   168c0:	4809      	ldr	r0, [pc, #36]	; (168e8 <clkstarted_handle.constprop.0+0x2c>)
   168c2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   168c4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   168c6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   168c8:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   168cc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   168ce:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   168d0:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   168d2:	4418      	add	r0, r3
   168d4:	f009 fac7 	bl	1fe66 <set_on_state>
	if (callback) {
   168d8:	b12d      	cbz	r5, 168e6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   168da:	4632      	mov	r2, r6
   168dc:	462b      	mov	r3, r5
   168de:	4803      	ldr	r0, [pc, #12]	; (168ec <clkstarted_handle.constprop.0+0x30>)
}
   168e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   168e4:	4718      	bx	r3
}
   168e6:	bd70      	pop	{r4, r5, r6, pc}
   168e8:	20001e54 	.word	0x20001e54
   168ec:	00020d88 	.word	0x00020d88

000168f0 <clock_event_handler>:
	switch (event) {
   168f0:	2801      	cmp	r0, #1
{
   168f2:	b508      	push	{r3, lr}
	switch (event) {
   168f4:	d006      	beq.n	16904 <clock_event_handler+0x14>
   168f6:	2803      	cmp	r0, #3
   168f8:	d008      	beq.n	1690c <clock_event_handler+0x1c>
   168fa:	b9a8      	cbnz	r0, 16928 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   168fc:	4b10      	ldr	r3, [pc, #64]	; (16940 <clock_event_handler+0x50>)
   168fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   16900:	075b      	lsls	r3, r3, #29
   16902:	d11b      	bne.n	1693c <clock_event_handler+0x4c>
}
   16904:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   16908:	f7ff bfd8 	b.w	168bc <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1690c:	490d      	ldr	r1, [pc, #52]	; (16944 <clock_event_handler+0x54>)
   1690e:	4a0e      	ldr	r2, [pc, #56]	; (16948 <clock_event_handler+0x58>)
   16910:	480e      	ldr	r0, [pc, #56]	; (1694c <clock_event_handler+0x5c>)
   16912:	f240 2366 	movw	r3, #614	; 0x266
   16916:	f006 ff4d 	bl	1d7b4 <printk>
   1691a:	f240 2166 	movw	r1, #614	; 0x266
}
   1691e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   16922:	4809      	ldr	r0, [pc, #36]	; (16948 <clock_event_handler+0x58>)
   16924:	f007 b9a0 	b.w	1dc68 <assert_post_action>
   16928:	4906      	ldr	r1, [pc, #24]	; (16944 <clock_event_handler+0x54>)
   1692a:	4a07      	ldr	r2, [pc, #28]	; (16948 <clock_event_handler+0x58>)
   1692c:	4807      	ldr	r0, [pc, #28]	; (1694c <clock_event_handler+0x5c>)
   1692e:	f240 236a 	movw	r3, #618	; 0x26a
   16932:	f006 ff3f 	bl	1d7b4 <printk>
   16936:	f240 216a 	movw	r1, #618	; 0x26a
   1693a:	e7f0      	b.n	1691e <clock_event_handler+0x2e>
}
   1693c:	bd08      	pop	{r3, pc}
   1693e:	bf00      	nop
   16940:	20001e54 	.word	0x20001e54
   16944:	00023382 	.word	0x00023382
   16948:	00022580 	.word	0x00022580
   1694c:	00021650 	.word	0x00021650

00016950 <generic_hfclk_start>:
{
   16950:	b508      	push	{r3, lr}
	__asm__ volatile(
   16952:	f04f 0340 	mov.w	r3, #64	; 0x40
   16956:	f3ef 8111 	mrs	r1, BASEPRI
   1695a:	f383 8812 	msr	BASEPRI_MAX, r3
   1695e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   16962:	4a12      	ldr	r2, [pc, #72]	; (169ac <generic_hfclk_start+0x5c>)
   16964:	6813      	ldr	r3, [r2, #0]
   16966:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1696a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1696e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   16970:	d00c      	beq.n	1698c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   16976:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1697a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1697e:	f013 0301 	ands.w	r3, r3, #1
   16982:	d003      	beq.n	1698c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   16984:	480a      	ldr	r0, [pc, #40]	; (169b0 <generic_hfclk_start+0x60>)
   16986:	f009 fa6e 	bl	1fe66 <set_on_state>
			already_started = true;
   1698a:	2301      	movs	r3, #1
	__asm__ volatile(
   1698c:	f381 8811 	msr	BASEPRI, r1
   16990:	f3bf 8f6f 	isb	sy
	if (already_started) {
   16994:	b123      	cbz	r3, 169a0 <generic_hfclk_start+0x50>
}
   16996:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1699a:	2000      	movs	r0, #0
   1699c:	f7ff bf8e 	b.w	168bc <clkstarted_handle.constprop.0>
}
   169a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   169a4:	2001      	movs	r0, #1
   169a6:	f002 b84f 	b.w	18a48 <nrfx_clock_start>
   169aa:	bf00      	nop
   169ac:	20001eac 	.word	0x20001eac
   169b0:	20001e9c 	.word	0x20001e9c

000169b4 <lfclk_start>:
{
   169b4:	b510      	push	{r4, lr}
	if (!once) {
   169b6:	4c07      	ldr	r4, [pc, #28]	; (169d4 <lfclk_start+0x20>)
   169b8:	7823      	ldrb	r3, [r4, #0]
   169ba:	b92b      	cbnz	r3, 169c8 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   169bc:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   169c0:	f009 ffa4 	bl	2090c <z_impl_k_busy_wait>
		once = true;
   169c4:	2301      	movs	r3, #1
   169c6:	7023      	strb	r3, [r4, #0]
}
   169c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   169cc:	2000      	movs	r0, #0
   169ce:	f002 b83b 	b.w	18a48 <nrfx_clock_start>
   169d2:	bf00      	nop
   169d4:	200020c7 	.word	0x200020c7

000169d8 <generic_hfclk_stop>:
   169d8:	4b09      	ldr	r3, [pc, #36]	; (16a00 <generic_hfclk_stop+0x28>)
   169da:	f3bf 8f5b 	dmb	ish
   169de:	e853 2f00 	ldrex	r2, [r3]
   169e2:	f022 0102 	bic.w	r1, r2, #2
   169e6:	e843 1000 	strex	r0, r1, [r3]
   169ea:	2800      	cmp	r0, #0
   169ec:	d1f7      	bne.n	169de <generic_hfclk_stop+0x6>
   169ee:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   169f2:	07d3      	lsls	r3, r2, #31
   169f4:	d402      	bmi.n	169fc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   169f6:	2001      	movs	r0, #1
   169f8:	f002 b850 	b.w	18a9c <nrfx_clock_stop>
}
   169fc:	4770      	bx	lr
   169fe:	bf00      	nop
   16a00:	20001eac 	.word	0x20001eac

00016a04 <api_blocking_start>:
{
   16a04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   16a06:	2200      	movs	r2, #0
   16a08:	2301      	movs	r3, #1
   16a0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   16a0e:	ab04      	add	r3, sp, #16
   16a10:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   16a14:	4a09      	ldr	r2, [pc, #36]	; (16a3c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   16a16:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   16a1a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   16a1c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   16a20:	f009 fa43 	bl	1feaa <api_start>
	if (err < 0) {
   16a24:	2800      	cmp	r0, #0
   16a26:	db05      	blt.n	16a34 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   16a28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   16a2c:	2300      	movs	r3, #0
   16a2e:	4668      	mov	r0, sp
   16a30:	f003 fb0a 	bl	1a048 <z_impl_k_sem_take>
}
   16a34:	b007      	add	sp, #28
   16a36:	f85d fb04 	ldr.w	pc, [sp], #4
   16a3a:	bf00      	nop
   16a3c:	0001fea5 	.word	0x0001fea5

00016a40 <z_nrf_clock_control_lf_on>:
{
   16a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16a44:	4949      	ldr	r1, [pc, #292]	; (16b6c <z_nrf_clock_control_lf_on+0x12c>)
   16a46:	f3bf 8f5b 	dmb	ish
   16a4a:	4605      	mov	r5, r0
   16a4c:	2201      	movs	r2, #1
   16a4e:	e851 3f00 	ldrex	r3, [r1]
   16a52:	e841 2000 	strex	r0, r2, [r1]
   16a56:	2800      	cmp	r0, #0
   16a58:	d1f9      	bne.n	16a4e <z_nrf_clock_control_lf_on+0xe>
   16a5a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   16a5e:	b9a3      	cbnz	r3, 16a8a <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   16a60:	4943      	ldr	r1, [pc, #268]	; (16b70 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
   16a62:	4844      	ldr	r0, [pc, #272]	; (16b74 <z_nrf_clock_control_lf_on+0x134>)
   16a64:	604b      	str	r3, [r1, #4]
   16a66:	60cb      	str	r3, [r1, #12]
   16a68:	608a      	str	r2, [r1, #8]
   16a6a:	f7f9 fbdd 	bl	10228 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   16a6e:	2800      	cmp	r0, #0
   16a70:	da0b      	bge.n	16a8a <z_nrf_clock_control_lf_on+0x4a>
   16a72:	4941      	ldr	r1, [pc, #260]	; (16b78 <z_nrf_clock_control_lf_on+0x138>)
   16a74:	4841      	ldr	r0, [pc, #260]	; (16b7c <z_nrf_clock_control_lf_on+0x13c>)
   16a76:	4a42      	ldr	r2, [pc, #264]	; (16b80 <z_nrf_clock_control_lf_on+0x140>)
   16a78:	f240 2326 	movw	r3, #550	; 0x226
   16a7c:	f006 fe9a 	bl	1d7b4 <printk>
   16a80:	483f      	ldr	r0, [pc, #252]	; (16b80 <z_nrf_clock_control_lf_on+0x140>)
   16a82:	f240 2126 	movw	r1, #550	; 0x226
   16a86:	f007 f8ef 	bl	1dc68 <assert_post_action>
	switch (start_mode) {
   16a8a:	b3ad      	cbz	r5, 16af8 <z_nrf_clock_control_lf_on+0xb8>
   16a8c:	1e6b      	subs	r3, r5, #1
   16a8e:	2b01      	cmp	r3, #1
   16a90:	d856      	bhi.n	16b40 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   16a92:	2d01      	cmp	r5, #1
   16a94:	d107      	bne.n	16aa6 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   16a96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16a9a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   16a9e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   16aa2:	2b01      	cmp	r3, #1
   16aa4:	d028      	beq.n	16af8 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   16aa6:	f009 fe5c 	bl	20762 <k_is_in_isr>
   16aaa:	4604      	mov	r4, r0
   16aac:	b918      	cbnz	r0, 16ab6 <z_nrf_clock_control_lf_on+0x76>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   16aae:	4b35      	ldr	r3, [pc, #212]	; (16b84 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
   16ab0:	781b      	ldrb	r3, [r3, #0]
   16ab2:	2b00      	cmp	r3, #0
   16ab4:	d152      	bne.n	16b5c <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
   16ab6:	f04f 0340 	mov.w	r3, #64	; 0x40
   16aba:	f3ef 8611 	mrs	r6, BASEPRI
   16abe:	f383 8812 	msr	BASEPRI_MAX, r3
   16ac2:	f3bf 8f6f 	isb	sy
   16ac6:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16ac8:	4f2f      	ldr	r7, [pc, #188]	; (16b88 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16aca:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 16b90 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16ace:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 16b94 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16ad2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   16ad6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16ada:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   16ade:	03d2      	lsls	r2, r2, #15
   16ae0:	d50c      	bpl.n	16afc <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   16ae2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   16ae6:	2b01      	cmp	r3, #1
   16ae8:	d001      	beq.n	16aee <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   16aea:	2d01      	cmp	r5, #1
   16aec:	d106      	bne.n	16afc <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
   16aee:	b30c      	cbz	r4, 16b34 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
   16af0:	f386 8811 	msr	BASEPRI, r6
   16af4:	f3bf 8f6f 	isb	sy
}
   16af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   16afc:	b1ac      	cbz	r4, 16b2a <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   16afe:	4630      	mov	r0, r6
   16b00:	f7fa fd64 	bl	115cc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   16b04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   16b08:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   16b0c:	2b00      	cmp	r3, #0
   16b0e:	d1e0      	bne.n	16ad2 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16b10:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   16b12:	2900      	cmp	r1, #0
   16b14:	d0dd      	beq.n	16ad2 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16b16:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   16b18:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   16b1a:	2301      	movs	r3, #1
   16b1c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   16b20:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16b24:	f8c9 3000 	str.w	r3, [r9]
}
   16b28:	e7d3      	b.n	16ad2 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
   16b2a:	2100      	movs	r1, #0
   16b2c:	2021      	movs	r0, #33	; 0x21
   16b2e:	f005 f903 	bl	1bd38 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   16b32:	e7e7      	b.n	16b04 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
   16b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16b38:	2202      	movs	r2, #2
   16b3a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   16b3e:	e7db      	b.n	16af8 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
   16b40:	4912      	ldr	r1, [pc, #72]	; (16b8c <z_nrf_clock_control_lf_on+0x14c>)
   16b42:	480e      	ldr	r0, [pc, #56]	; (16b7c <z_nrf_clock_control_lf_on+0x13c>)
   16b44:	4a0e      	ldr	r2, [pc, #56]	; (16b80 <z_nrf_clock_control_lf_on+0x140>)
   16b46:	f44f 730e 	mov.w	r3, #568	; 0x238
   16b4a:	f006 fe33 	bl	1d7b4 <printk>
}
   16b4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   16b52:	480b      	ldr	r0, [pc, #44]	; (16b80 <z_nrf_clock_control_lf_on+0x140>)
   16b54:	f44f 710e 	mov.w	r1, #568	; 0x238
   16b58:	f007 b886 	b.w	1dc68 <assert_post_action>
    p_reg->INTENCLR = mask;
   16b5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16b60:	2202      	movs	r2, #2
   16b62:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   16b66:	4606      	mov	r6, r0
}
   16b68:	e7ae      	b.n	16ac8 <z_nrf_clock_control_lf_on+0x88>
   16b6a:	bf00      	nop
   16b6c:	20001eb0 	.word	0x20001eb0
   16b70:	20001e44 	.word	0x20001e44
   16b74:	20001e74 	.word	0x20001e74
   16b78:	000225e1 	.word	0x000225e1
   16b7c:	00021650 	.word	0x00021650
   16b80:	00022580 	.word	0x00022580
   16b84:	200029ec 	.word	0x200029ec
   16b88:	40000104 	.word	0x40000104
   16b8c:	00023382 	.word	0x00023382
   16b90:	e000e100 	.word	0xe000e100
   16b94:	40000008 	.word	0x40000008

00016b98 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   16b98:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   16b9a:	4b08      	ldr	r3, [pc, #32]	; (16bbc <uart_console_init+0x24>)
   16b9c:	4808      	ldr	r0, [pc, #32]	; (16bc0 <uart_console_init+0x28>)
   16b9e:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   16ba0:	f009 fdcd 	bl	2073e <z_device_ready>
   16ba4:	b138      	cbz	r0, 16bb6 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   16ba6:	4807      	ldr	r0, [pc, #28]	; (16bc4 <uart_console_init+0x2c>)
   16ba8:	f7fb f9aa 	bl	11f00 <__stdout_hook_install>
	__printk_hook_install(console_out);
   16bac:	4805      	ldr	r0, [pc, #20]	; (16bc4 <uart_console_init+0x2c>)
   16bae:	f7f9 f8e7 	bl	fd80 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   16bb2:	2000      	movs	r0, #0
}
   16bb4:	bd08      	pop	{r3, pc}
		return -ENODEV;
   16bb6:	f06f 0012 	mvn.w	r0, #18
   16bba:	e7fb      	b.n	16bb4 <uart_console_init+0x1c>
   16bbc:	20001eb4 	.word	0x20001eb4
   16bc0:	00020da0 	.word	0x00020da0
   16bc4:	00016bc9 	.word	0x00016bc9

00016bc8 <console_out>:
	if ('\n' == c) {
   16bc8:	280a      	cmp	r0, #10
{
   16bca:	b538      	push	{r3, r4, r5, lr}
   16bcc:	4d07      	ldr	r5, [pc, #28]	; (16bec <console_out+0x24>)
   16bce:	4604      	mov	r4, r0
	if ('\n' == c) {
   16bd0:	d104      	bne.n	16bdc <console_out+0x14>
   16bd2:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   16bd4:	6883      	ldr	r3, [r0, #8]
   16bd6:	210d      	movs	r1, #13
   16bd8:	69db      	ldr	r3, [r3, #28]
   16bda:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   16bdc:	6828      	ldr	r0, [r5, #0]
   16bde:	6883      	ldr	r3, [r0, #8]
   16be0:	b2e1      	uxtb	r1, r4
   16be2:	69db      	ldr	r3, [r3, #28]
   16be4:	4798      	blx	r3
}
   16be6:	4620      	mov	r0, r4
   16be8:	bd38      	pop	{r3, r4, r5, pc}
   16bea:	bf00      	nop
   16bec:	20001eb4 	.word	0x20001eb4

00016bf0 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   16bf0:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   16bf2:	6905      	ldr	r5, [r0, #16]
{
   16bf4:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   16bf6:	460c      	mov	r4, r1
   16bf8:	b961      	cbnz	r1, 16c14 <gpio_nrfx_manage_callback+0x24>
   16bfa:	4922      	ldr	r1, [pc, #136]	; (16c84 <gpio_nrfx_manage_callback+0x94>)
   16bfc:	4a22      	ldr	r2, [pc, #136]	; (16c88 <gpio_nrfx_manage_callback+0x98>)
   16bfe:	4823      	ldr	r0, [pc, #140]	; (16c8c <gpio_nrfx_manage_callback+0x9c>)
   16c00:	2324      	movs	r3, #36	; 0x24
   16c02:	f006 fdd7 	bl	1d7b4 <printk>
   16c06:	4822      	ldr	r0, [pc, #136]	; (16c90 <gpio_nrfx_manage_callback+0xa0>)
   16c08:	f006 fdd4 	bl	1d7b4 <printk>
   16c0c:	481e      	ldr	r0, [pc, #120]	; (16c88 <gpio_nrfx_manage_callback+0x98>)
   16c0e:	2124      	movs	r1, #36	; 0x24
   16c10:	f007 f82a 	bl	1dc68 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   16c14:	6863      	ldr	r3, [r4, #4]
   16c16:	b963      	cbnz	r3, 16c32 <gpio_nrfx_manage_callback+0x42>
   16c18:	491e      	ldr	r1, [pc, #120]	; (16c94 <gpio_nrfx_manage_callback+0xa4>)
   16c1a:	4a1b      	ldr	r2, [pc, #108]	; (16c88 <gpio_nrfx_manage_callback+0x98>)
   16c1c:	481b      	ldr	r0, [pc, #108]	; (16c8c <gpio_nrfx_manage_callback+0x9c>)
   16c1e:	2325      	movs	r3, #37	; 0x25
   16c20:	f006 fdc8 	bl	1d7b4 <printk>
   16c24:	481c      	ldr	r0, [pc, #112]	; (16c98 <gpio_nrfx_manage_callback+0xa8>)
   16c26:	f006 fdc5 	bl	1d7b4 <printk>
   16c2a:	4817      	ldr	r0, [pc, #92]	; (16c88 <gpio_nrfx_manage_callback+0x98>)
   16c2c:	2125      	movs	r1, #37	; 0x25
   16c2e:	f007 f81b 	bl	1dc68 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   16c32:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   16c34:	b15b      	cbz	r3, 16c4e <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16c36:	2200      	movs	r2, #0
   16c38:	429c      	cmp	r4, r3
   16c3a:	d113      	bne.n	16c64 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   16c3c:	6823      	ldr	r3, [r4, #0]
   16c3e:	b95a      	cbnz	r2, 16c58 <gpio_nrfx_manage_callback+0x68>
   16c40:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   16c42:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   16c44:	4294      	cmp	r4, r2
   16c46:	d100      	bne.n	16c4a <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   16c48:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   16c4a:	2300      	movs	r3, #0
   16c4c:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   16c4e:	b976      	cbnz	r6, 16c6e <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   16c50:	2000      	movs	r0, #0
				     callback, set);
}
   16c52:	bd70      	pop	{r4, r5, r6, pc}
   16c54:	460b      	mov	r3, r1
   16c56:	e7ef      	b.n	16c38 <gpio_nrfx_manage_callback+0x48>
   16c58:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   16c5a:	68ab      	ldr	r3, [r5, #8]
   16c5c:	429c      	cmp	r4, r3
	list->tail = node;
   16c5e:	bf08      	it	eq
   16c60:	60aa      	streq	r2, [r5, #8]
}
   16c62:	e7f2      	b.n	16c4a <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16c64:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16c66:	461a      	mov	r2, r3
   16c68:	2900      	cmp	r1, #0
   16c6a:	d1f3      	bne.n	16c54 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   16c6c:	b13e      	cbz	r6, 16c7e <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   16c6e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   16c70:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   16c72:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   16c74:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   16c76:	2800      	cmp	r0, #0
   16c78:	d1ea      	bne.n	16c50 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   16c7a:	60ac      	str	r4, [r5, #8]
}
   16c7c:	e7e9      	b.n	16c52 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   16c7e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   16c82:	e7e6      	b.n	16c52 <gpio_nrfx_manage_callback+0x62>
   16c84:	0002261d 	.word	0x0002261d
   16c88:	000225f0 	.word	0x000225f0
   16c8c:	00021650 	.word	0x00021650
   16c90:	00022626 	.word	0x00022626
   16c94:	00022635 	.word	0x00022635
   16c98:	00022647 	.word	0x00022647

00016c9c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16c9c:	6803      	ldr	r3, [r0, #0]
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   16c9e:	095a      	lsrs	r2, r3, #5
   16ca0:	bf0c      	ite	eq
   16ca2:	f04f 32ff 	moveq.w	r2, #4294967295
   16ca6:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   16ca8:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
   16cac:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16cb0:	07db      	lsls	r3, r3, #31
{
   16cb2:	b510      	push	{r4, lr}
   16cb4:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16cb6:	d40b      	bmi.n	16cd0 <nrf_gpio_pin_port_decode+0x34>
   16cb8:	4910      	ldr	r1, [pc, #64]	; (16cfc <nrf_gpio_pin_port_decode+0x60>)
   16cba:	4811      	ldr	r0, [pc, #68]	; (16d00 <nrf_gpio_pin_port_decode+0x64>)
   16cbc:	4a11      	ldr	r2, [pc, #68]	; (16d04 <nrf_gpio_pin_port_decode+0x68>)
   16cbe:	f44f 7305 	mov.w	r3, #532	; 0x214
   16cc2:	f006 fd77 	bl	1d7b4 <printk>
   16cc6:	480f      	ldr	r0, [pc, #60]	; (16d04 <nrf_gpio_pin_port_decode+0x68>)
   16cc8:	f44f 7105 	mov.w	r1, #532	; 0x214
   16ccc:	f006 ffcc 	bl	1dc68 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   16cd0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   16cd2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16cd6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   16cd8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16cda:	d00b      	beq.n	16cf4 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   16cdc:	490a      	ldr	r1, [pc, #40]	; (16d08 <nrf_gpio_pin_port_decode+0x6c>)
   16cde:	4808      	ldr	r0, [pc, #32]	; (16d00 <nrf_gpio_pin_port_decode+0x64>)
   16ce0:	4a08      	ldr	r2, [pc, #32]	; (16d04 <nrf_gpio_pin_port_decode+0x68>)
   16ce2:	f240 2319 	movw	r3, #537	; 0x219
   16ce6:	f006 fd65 	bl	1d7b4 <printk>
   16cea:	4806      	ldr	r0, [pc, #24]	; (16d04 <nrf_gpio_pin_port_decode+0x68>)
   16cec:	f240 2119 	movw	r1, #537	; 0x219
   16cf0:	f006 ffba 	bl	1dc68 <assert_post_action>
}
   16cf4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   16cf8:	bd10      	pop	{r4, pc}
   16cfa:	bf00      	nop
   16cfc:	00022691 	.word	0x00022691
   16d00:	00021650 	.word	0x00021650
   16d04:	0002265e 	.word	0x0002265e
   16d08:	00023382 	.word	0x00023382

00016d0c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   16d0c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   16d0e:	4b09      	ldr	r3, [pc, #36]	; (16d34 <gpio_nrfx_init+0x28>)
   16d10:	781a      	ldrb	r2, [r3, #0]
   16d12:	b96a      	cbnz	r2, 16d30 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   16d14:	2101      	movs	r1, #1
   16d16:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   16d18:	2006      	movs	r0, #6
   16d1a:	2105      	movs	r1, #5
   16d1c:	f7fa fc92 	bl	11644 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   16d20:	2006      	movs	r0, #6
   16d22:	f7fa fc5d 	bl	115e0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   16d26:	4b04      	ldr	r3, [pc, #16]	; (16d38 <gpio_nrfx_init+0x2c>)
   16d28:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   16d2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   16d30:	2000      	movs	r0, #0
   16d32:	bd08      	pop	{r3, pc}
   16d34:	200020c8 	.word	0x200020c8
   16d38:	40006000 	.word	0x40006000

00016d3c <gpio_nrfx_pin_interrupt_configure>:
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   16d3c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   16d40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   16d44:	6904      	ldr	r4, [r0, #16]
{
   16d46:	4607      	mov	r7, r0
   16d48:	460e      	mov	r6, r1
   16d4a:	4690      	mov	r8, r2
   16d4c:	4699      	mov	r9, r3
   16d4e:	f001 051f 	and.w	r5, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   16d52:	f040 80ab 	bne.w	16eac <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   16d56:	6843      	ldr	r3, [r0, #4]
   16d58:	7a1b      	ldrb	r3, [r3, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16d5a:	a801      	add	r0, sp, #4
   16d5c:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   16d60:	9301      	str	r3, [sp, #4]
   16d62:	f7ff ff9b 	bl	16c9c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   16d66:	9b01      	ldr	r3, [sp, #4]
   16d68:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   16d6c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   16d70:	07d8      	lsls	r0, r3, #31
   16d72:	f100 80bb 	bmi.w	16eec <gpio_nrfx_pin_interrupt_configure+0x1b0>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   16d76:	68e3      	ldr	r3, [r4, #12]
   16d78:	2101      	movs	r1, #1
   16d7a:	40b1      	lsls	r1, r6
   16d7c:	4319      	orrs	r1, r3
   16d7e:	6963      	ldr	r3, [r4, #20]
   16d80:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   16d82:	2101      	movs	r1, #1
   16d84:	40b1      	lsls	r1, r6
   16d86:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   16d8a:	bf0c      	ite	eq
   16d8c:	430b      	orreq	r3, r1
   16d8e:	438b      	bicne	r3, r1
   16d90:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   16d92:	69a3      	ldr	r3, [r4, #24]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   16d94:	4a57      	ldr	r2, [pc, #348]	; (16ef4 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
	struct gpio_nrfx_data *data = get_port_data(port);
   16d96:	f8d7 8010 	ldr.w	r8, [r7, #16]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   16d9a:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   16d9e:	bf0c      	ite	eq
   16da0:	430b      	orreq	r3, r1
   16da2:	438b      	bicne	r3, r1
   16da4:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   16da6:	6923      	ldr	r3, [r4, #16]
   16da8:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   16dac:	bf0c      	ite	eq
   16dae:	4319      	orreq	r1, r3
   16db0:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16db4:	687b      	ldr	r3, [r7, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   16db6:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16db8:	7a1b      	ldrb	r3, [r3, #8]
   16dba:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   16dbe:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16dc2:	2000      	movs	r0, #0
   16dc4:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16dc6:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   16dca:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   16dce:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   16dd2:	428d      	cmp	r5, r1
   16dd4:	d175      	bne.n	16ec2 <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   16dd6:	fa23 f100 	lsr.w	r1, r3, r0
   16dda:	07c9      	lsls	r1, r1, #31
   16ddc:	d571      	bpl.n	16ec2 <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   16dde:	0083      	lsls	r3, r0, #2
   16de0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16de4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   16de8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   16dec:	f021 0101 	bic.w	r1, r1, #1
   16df0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   16df4:	2301      	movs	r3, #1
   16df6:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   16df8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   16dfc:	b2c0      	uxtb	r0, r0
   16dfe:	f001 ffd9 	bl	18db4 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   16e02:	4628      	mov	r0, r5
   16e04:	2100      	movs	r1, #0
   16e06:	f009 f892 	bl	1ff2e <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   16e0a:	f8d8 000c 	ldr.w	r0, [r8, #12]
   16e0e:	40f0      	lsrs	r0, r6
   16e10:	f010 0001 	ands.w	r0, r0, #1
   16e14:	d047      	beq.n	16ea6 <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   16e16:	f8d8 0014 	ldr.w	r0, [r8, #20]
   16e1a:	40f0      	lsrs	r0, r6
   16e1c:	f010 0401 	ands.w	r4, r0, #1
   16e20:	d057      	beq.n	16ed2 <gpio_nrfx_pin_interrupt_configure+0x196>
				if (data->double_edge & BIT(pin)) {
   16e22:	f8d8 3018 	ldr.w	r3, [r8, #24]
   16e26:	40f3      	lsrs	r3, r6
   16e28:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   16e2a:	bf5f      	itttt	pl
   16e2c:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   16e30:	fa21 f606 	lsrpl.w	r6, r1, r6
   16e34:	f006 0601 	andpl.w	r6, r6, #1
   16e38:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   16e3c:	a801      	add	r0, sp, #4
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   16e3e:	bf54      	ite	pl
   16e40:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   16e42:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   16e44:	f001 ffd8 	bl	18df8 <nrfx_gpiote_channel_alloc>
   16e48:	4b2b      	ldr	r3, [pc, #172]	; (16ef8 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   16e4a:	4298      	cmp	r0, r3
   16e4c:	d13e      	bne.n	16ecc <gpio_nrfx_pin_interrupt_configure+0x190>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   16e4e:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16e52:	008b      	lsls	r3, r1, #2
   16e54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16e58:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16e5c:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16e5e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16e62:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   16e66:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   16e6a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16e6e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16e72:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
   16e76:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   16e78:	008a      	lsls	r2, r1, #2
   16e7a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16e7e:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16e82:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16e86:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16e88:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16e8c:	6010      	str	r0, [r2, #0]
   16e8e:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   16e90:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16e94:	f042 0201 	orr.w	r2, r2, #1
   16e98:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   16e9c:	4a15      	ldr	r2, [pc, #84]	; (16ef4 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   16e9e:	2301      	movs	r3, #1
   16ea0:	408b      	lsls	r3, r1
   16ea2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16ea6:	b003      	add	sp, #12
   16ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   16eac:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   16eb0:	f47f af61 	bne.w	16d76 <gpio_nrfx_pin_interrupt_configure+0x3a>
   16eb4:	2101      	movs	r1, #1
   16eb6:	fa01 f306 	lsl.w	r3, r1, r6
   16eba:	68e1      	ldr	r1, [r4, #12]
   16ebc:	ea21 0103 	bic.w	r1, r1, r3
   16ec0:	e75d      	b.n	16d7e <gpio_nrfx_pin_interrupt_configure+0x42>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16ec2:	3001      	adds	r0, #1
   16ec4:	2808      	cmp	r0, #8
   16ec6:	f47f af7e 	bne.w	16dc6 <gpio_nrfx_pin_interrupt_configure+0x8a>
   16eca:	e79a      	b.n	16e02 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   16ecc:	f06f 0012 	mvn.w	r0, #18
   16ed0:	e7e9      	b.n	16ea6 <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   16ed2:	f8d8 1010 	ldr.w	r1, [r8, #16]
   16ed6:	40f1      	lsrs	r1, r6
   16ed8:	f001 0101 	and.w	r1, r1, #1
   16edc:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   16ee0:	4628      	mov	r0, r5
   16ee2:	b2c9      	uxtb	r1, r1
   16ee4:	f009 f823 	bl	1ff2e <nrf_gpio_cfg_sense_set>
	int res = 0;
   16ee8:	4620      	mov	r0, r4
   16eea:	e7dc      	b.n	16ea6 <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   16eec:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16ef0:	e7d9      	b.n	16ea6 <gpio_nrfx_pin_interrupt_configure+0x16a>
   16ef2:	bf00      	nop
   16ef4:	40006000 	.word	0x40006000
   16ef8:	0bad0000 	.word	0x0bad0000

00016efc <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16efc:	4b2e      	ldr	r3, [pc, #184]	; (16fb8 <gpio_nrfx_config+0xbc>)
{
   16efe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16f00:	4c2e      	ldr	r4, [pc, #184]	; (16fbc <gpio_nrfx_config+0xc0>)
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   16f02:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16f04:	4013      	ands	r3, r2
   16f06:	42a3      	cmp	r3, r4
   16f08:	d045      	beq.n	16f96 <gpio_nrfx_config+0x9a>
   16f0a:	d80e      	bhi.n	16f2a <gpio_nrfx_config+0x2e>
   16f0c:	2b06      	cmp	r3, #6
   16f0e:	d044      	beq.n	16f9a <gpio_nrfx_config+0x9e>
   16f10:	d806      	bhi.n	16f20 <gpio_nrfx_config+0x24>
   16f12:	2b00      	cmp	r3, #0
   16f14:	d041      	beq.n	16f9a <gpio_nrfx_config+0x9e>
   16f16:	2b02      	cmp	r3, #2
   16f18:	d041      	beq.n	16f9e <gpio_nrfx_config+0xa2>
   16f1a:	f06f 0015 	mvn.w	r0, #21
   16f1e:	e038      	b.n	16f92 <gpio_nrfx_config+0x96>
   16f20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   16f24:	d1f9      	bne.n	16f1a <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   16f26:	2401      	movs	r4, #1
   16f28:	e009      	b.n	16f3e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16f2a:	4c25      	ldr	r4, [pc, #148]	; (16fc0 <gpio_nrfx_config+0xc4>)
   16f2c:	42a3      	cmp	r3, r4
   16f2e:	d038      	beq.n	16fa2 <gpio_nrfx_config+0xa6>
   16f30:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   16f34:	d037      	beq.n	16fa6 <gpio_nrfx_config+0xaa>
   16f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   16f3a:	d1ee      	bne.n	16f1a <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   16f3c:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   16f3e:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   16f40:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_NOPULL;
   16f44:	bf54      	ite	pl
   16f46:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   16f4a:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   16f4c:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   16f50:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   16f52:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   16f56:	d507      	bpl.n	16f68 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   16f58:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   16f5a:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   16f5e:	d524      	bpl.n	16faa <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
   16f60:	2301      	movs	r3, #1
   16f62:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   16f64:	f8cc 3508 	str.w	r3, [ip, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   16f68:	7a03      	ldrb	r3, [r0, #8]
   16f6a:	f001 011f 	and.w	r1, r1, #31
   16f6e:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16f72:	a801      	add	r0, sp, #4
   16f74:	9101      	str	r1, [sp, #4]
   16f76:	f7ff fe91 	bl	16c9c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   16f7a:	9a01      	ldr	r2, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16f7c:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   16f80:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   16f84:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16f88:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   16f8c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   16f90:	2000      	movs	r0, #0
}
   16f92:	b003      	add	sp, #12
   16f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   16f96:	2407      	movs	r4, #7
   16f98:	e7d1      	b.n	16f3e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16f9a:	461c      	mov	r4, r3
   16f9c:	e7cf      	b.n	16f3e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   16f9e:	2404      	movs	r4, #4
   16fa0:	e7cd      	b.n	16f3e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   16fa2:	2405      	movs	r4, #5
   16fa4:	e7cb      	b.n	16f3e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   16fa6:	2403      	movs	r4, #3
   16fa8:	e7c9      	b.n	16f3e <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   16faa:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   16fac:	bf42      	ittt	mi
   16fae:	2301      	movmi	r3, #1
   16fb0:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   16fb2:	f8cc 350c 	strmi.w	r3, [ip, #1292]	; 0x50c
}
   16fb6:	e7d7      	b.n	16f68 <gpio_nrfx_config+0x6c>
   16fb8:	00f00006 	.word	0x00f00006
   16fbc:	00100006 	.word	0x00100006
   16fc0:	00400002 	.word	0x00400002

00016fc4 <gpiote_event_handler>:
{
   16fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16fc8:	4d54      	ldr	r5, [pc, #336]	; (1711c <gpiote_event_handler+0x158>)
   16fca:	682f      	ldr	r7, [r5, #0]
	if (port_event) {
   16fcc:	2f00      	cmp	r7, #0
   16fce:	d062      	beq.n	17096 <gpiote_event_handler+0xd2>
	uint32_t out = data->pin_int_en;
   16fd0:	4b53      	ldr	r3, [pc, #332]	; (17120 <gpiote_event_handler+0x15c>)
	out &= ~data->trig_edge & ~data->double_edge;
   16fd2:	e9d3 2005 	ldrd	r2, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
   16fd6:	68d9      	ldr	r1, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   16fd8:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   16fda:	4302      	orrs	r2, r0
   16fdc:	ea21 0902 	bic.w	r9, r1, r2
    return p_reg->IN;
   16fe0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
	uint32_t check_pins = level_pins;
   16fe4:	464e      	mov	r6, r9
   16fe6:	f8d2 4510 	ldr.w	r4, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   16fea:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   16fec:	ea29 0404 	bic.w	r4, r9, r4
	uint32_t bit = 1U << pin;
   16ff0:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   16ff4:	f04f 0a00 	mov.w	sl, #0
	while (check_pins) {
   16ff8:	bb86      	cbnz	r6, 1705c <gpiote_event_handler+0x98>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16ffa:	602e      	str	r6, [r5, #0]
   16ffc:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   16ffe:	4849      	ldr	r0, [pc, #292]	; (17124 <gpiote_event_handler+0x160>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   17000:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   17002:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17004:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
   17006:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   1700a:	fa05 f103 	lsl.w	r1, r5, r3
   1700e:	4211      	tst	r1, r2
   17010:	d011      	beq.n	17036 <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17012:	009a      	lsls	r2, r3, #2
   17014:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17018:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   1701c:	6811      	ldr	r1, [r2, #0]
   1701e:	b151      	cbz	r1, 17036 <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17020:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   17024:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17028:	6016      	str	r6, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1702a:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1702e:	fa05 f101 	lsl.w	r1, r5, r1
   17032:	6812      	ldr	r2, [r2, #0]
   17034:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   17036:	3301      	adds	r3, #1
   17038:	2b08      	cmp	r3, #8
   1703a:	d1e4      	bne.n	17006 <gpiote_event_handler+0x42>
	if (fired_triggers[0]) {
   1703c:	bb6c      	cbnz	r4, 1709a <gpiote_event_handler+0xd6>
	if (port_event) {
   1703e:	b157      	cbz	r7, 17056 <gpiote_event_handler+0x92>
	uint32_t out = data->pin_int_en;
   17040:	4d37      	ldr	r5, [pc, #220]	; (17120 <gpiote_event_handler+0x15c>)
	out &= ~data->trig_edge & ~data->double_edge;
   17042:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
	uint32_t out = data->pin_int_en;
   17046:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   17048:	430a      	orrs	r2, r1
   1704a:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t bit = 1U << pin;
   1704e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   17050:	2700      	movs	r7, #0
	while (level_pins) {
   17052:	2c00      	cmp	r4, #0
   17054:	d150      	bne.n	170f8 <gpiote_event_handler+0x134>
}
   17056:	b003      	add	sp, #12
   17058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   1705c:	ea18 0f06 	tst.w	r8, r6
   17060:	d014      	beq.n	1708c <gpiote_event_handler+0xc8>
			if (!(level_pins & bit)) {
   17062:	ea18 0f09 	tst.w	r8, r9
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17066:	f00a 0b1f 	and.w	fp, sl, #31
			if (!(level_pins & bit)) {
   1706a:	d109      	bne.n	17080 <gpiote_event_handler+0xbc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1706c:	a801      	add	r0, sp, #4
   1706e:	f8cd b004 	str.w	fp, [sp, #4]
   17072:	f7ff fe13 	bl	16c9c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   17076:	9b01      	ldr	r3, [sp, #4]
   17078:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1707c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   17080:	2100      	movs	r1, #0
   17082:	4658      	mov	r0, fp
   17084:	f008 ff53 	bl	1ff2e <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   17088:	ea26 0608 	bic.w	r6, r6, r8
		++pin;
   1708c:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   17090:	ea4f 0848 	mov.w	r8, r8, lsl #1
   17094:	e7b0      	b.n	16ff8 <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   17096:	463c      	mov	r4, r7
   17098:	e7b1      	b.n	16ffe <gpiote_event_handler+0x3a>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1709a:	4b21      	ldr	r3, [pc, #132]	; (17120 <gpiote_event_handler+0x15c>)
   1709c:	685d      	ldr	r5, [r3, #4]
   1709e:	2d00      	cmp	r5, #0
   170a0:	d0cd      	beq.n	1703e <gpiote_event_handler+0x7a>
	return node->next;
   170a2:	682e      	ldr	r6, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   170a4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 17130 <gpiote_event_handler+0x16c>
			__ASSERT(cb->handler, "No callback handler!");
   170a8:	f8df 8088 	ldr.w	r8, [pc, #136]	; 17134 <gpiote_event_handler+0x170>
   170ac:	f8df a088 	ldr.w	sl, [pc, #136]	; 17138 <gpiote_event_handler+0x174>
   170b0:	2e00      	cmp	r6, #0
   170b2:	bf38      	it	cc
   170b4:	2600      	movcc	r6, #0
		if (cb->pin_mask & pins) {
   170b6:	68ab      	ldr	r3, [r5, #8]
   170b8:	421c      	tst	r4, r3
   170ba:	d014      	beq.n	170e6 <gpiote_event_handler+0x122>
			__ASSERT(cb->handler, "No callback handler!");
   170bc:	686b      	ldr	r3, [r5, #4]
   170be:	b963      	cbnz	r3, 170da <gpiote_event_handler+0x116>
   170c0:	4651      	mov	r1, sl
   170c2:	4819      	ldr	r0, [pc, #100]	; (17128 <gpiote_event_handler+0x164>)
   170c4:	2345      	movs	r3, #69	; 0x45
   170c6:	4642      	mov	r2, r8
   170c8:	f006 fb74 	bl	1d7b4 <printk>
   170cc:	4817      	ldr	r0, [pc, #92]	; (1712c <gpiote_event_handler+0x168>)
   170ce:	f006 fb71 	bl	1d7b4 <printk>
   170d2:	2145      	movs	r1, #69	; 0x45
   170d4:	4640      	mov	r0, r8
   170d6:	f006 fdc7 	bl	1dc68 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   170da:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   170de:	4629      	mov	r1, r5
   170e0:	4022      	ands	r2, r4
   170e2:	4648      	mov	r0, r9
   170e4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   170e6:	2e00      	cmp	r6, #0
   170e8:	d0a9      	beq.n	1703e <gpiote_event_handler+0x7a>
   170ea:	6833      	ldr	r3, [r6, #0]
   170ec:	2b00      	cmp	r3, #0
   170ee:	bf38      	it	cc
   170f0:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   170f2:	4635      	mov	r5, r6
   170f4:	461e      	mov	r6, r3
   170f6:	e7de      	b.n	170b6 <gpiote_event_handler+0xf2>
		if (level_pins & bit) {
   170f8:	4226      	tst	r6, r4
   170fa:	d00c      	beq.n	17116 <gpiote_event_handler+0x152>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   170fc:	6929      	ldr	r1, [r5, #16]
   170fe:	40f9      	lsrs	r1, r7
   17100:	f001 0101 	and.w	r1, r1, #1
   17104:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   17108:	b2c9      	uxtb	r1, r1
   1710a:	f007 001f 	and.w	r0, r7, #31
   1710e:	f008 ff0e 	bl	1ff2e <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   17112:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   17116:	3701      	adds	r7, #1
		bit <<= 1;
   17118:	0076      	lsls	r6, r6, #1
   1711a:	e79a      	b.n	17052 <gpiote_event_handler+0x8e>
   1711c:	4000617c 	.word	0x4000617c
   17120:	20001eb8 	.word	0x20001eb8
   17124:	40006000 	.word	0x40006000
   17128:	00021650 	.word	0x00021650
   1712c:	00022647 	.word	0x00022647
   17130:	00020de8 	.word	0x00020de8
   17134:	000225f0 	.word	0x000225f0
   17138:	000226b4 	.word	0x000226b4

0001713c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1713c:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1713e:	794b      	ldrb	r3, [r1, #5]
   17140:	2b01      	cmp	r3, #1
   17142:	d124      	bne.n	1718e <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   17144:	798b      	ldrb	r3, [r1, #6]
   17146:	2b03      	cmp	r3, #3
   17148:	d121      	bne.n	1718e <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1714a:	79ca      	ldrb	r2, [r1, #7]
   1714c:	b12a      	cbz	r2, 1715a <uarte_nrfx_configure+0x1e>
   1714e:	2a01      	cmp	r2, #1
   17150:	d11d      	bne.n	1718e <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   17152:	6843      	ldr	r3, [r0, #4]
   17154:	685b      	ldr	r3, [r3, #4]
   17156:	079b      	lsls	r3, r3, #30
   17158:	d019      	beq.n	1718e <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1715a:	790c      	ldrb	r4, [r1, #4]
   1715c:	b114      	cbz	r4, 17164 <uarte_nrfx_configure+0x28>
   1715e:	2c02      	cmp	r4, #2
   17160:	d115      	bne.n	1718e <uarte_nrfx_configure+0x52>
   17162:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   17164:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   17166:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   17168:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1716c:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1716e:	d062      	beq.n	17236 <uarte_nrfx_configure+0xfa>
   17170:	d82b      	bhi.n	171ca <uarte_nrfx_configure+0x8e>
   17172:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   17176:	d061      	beq.n	1723c <uarte_nrfx_configure+0x100>
   17178:	d814      	bhi.n	171a4 <uarte_nrfx_configure+0x68>
   1717a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1717e:	d05f      	beq.n	17240 <uarte_nrfx_configure+0x104>
   17180:	d808      	bhi.n	17194 <uarte_nrfx_configure+0x58>
   17182:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   17186:	d05e      	beq.n	17246 <uarte_nrfx_configure+0x10a>
   17188:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1718c:	d05e      	beq.n	1724c <uarte_nrfx_configure+0x110>
   1718e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17192:	e04f      	b.n	17234 <uarte_nrfx_configure+0xf8>
   17194:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   17198:	d05b      	beq.n	17252 <uarte_nrfx_configure+0x116>
   1719a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1719e:	d1f6      	bne.n	1718e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   171a0:	4b36      	ldr	r3, [pc, #216]	; (1727c <uarte_nrfx_configure+0x140>)
   171a2:	e03c      	b.n	1721e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   171a4:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   171a8:	d056      	beq.n	17258 <uarte_nrfx_configure+0x11c>
   171aa:	d807      	bhi.n	171bc <uarte_nrfx_configure+0x80>
   171ac:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   171b0:	d054      	beq.n	1725c <uarte_nrfx_configure+0x120>
   171b2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   171b6:	d1ea      	bne.n	1718e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   171b8:	4b31      	ldr	r3, [pc, #196]	; (17280 <uarte_nrfx_configure+0x144>)
   171ba:	e030      	b.n	1721e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   171bc:	f647 2612 	movw	r6, #31250	; 0x7a12
   171c0:	42b3      	cmp	r3, r6
   171c2:	d1e4      	bne.n	1718e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   171c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   171c8:	e029      	b.n	1721e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   171ca:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   171ce:	d047      	beq.n	17260 <uarte_nrfx_configure+0x124>
   171d0:	d813      	bhi.n	171fa <uarte_nrfx_configure+0xbe>
   171d2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   171d6:	d046      	beq.n	17266 <uarte_nrfx_configure+0x12a>
   171d8:	d809      	bhi.n	171ee <uarte_nrfx_configure+0xb2>
   171da:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   171de:	42b3      	cmp	r3, r6
   171e0:	d043      	beq.n	1726a <uarte_nrfx_configure+0x12e>
   171e2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   171e6:	d1d2      	bne.n	1718e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   171e8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   171ec:	e017      	b.n	1721e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   171ee:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   171f2:	d1cc      	bne.n	1718e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   171f4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   171f8:	e011      	b.n	1721e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   171fa:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   171fe:	d037      	beq.n	17270 <uarte_nrfx_configure+0x134>
   17200:	d808      	bhi.n	17214 <uarte_nrfx_configure+0xd8>
   17202:	4e20      	ldr	r6, [pc, #128]	; (17284 <uarte_nrfx_configure+0x148>)
   17204:	42b3      	cmp	r3, r6
   17206:	d036      	beq.n	17276 <uarte_nrfx_configure+0x13a>
   17208:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1720c:	d1bf      	bne.n	1718e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1720e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   17212:	e004      	b.n	1721e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   17214:	4e1c      	ldr	r6, [pc, #112]	; (17288 <uarte_nrfx_configure+0x14c>)
   17216:	42b3      	cmp	r3, r6
   17218:	d1b9      	bne.n	1718e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1721a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1721e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   17222:	6903      	ldr	r3, [r0, #16]
   17224:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   17226:	4322      	orrs	r2, r4
   17228:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1722a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1722e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   17232:	2000      	movs	r0, #0
}
   17234:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   17236:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1723a:	e7f0      	b.n	1721e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1723c:	4b13      	ldr	r3, [pc, #76]	; (1728c <uarte_nrfx_configure+0x150>)
   1723e:	e7ee      	b.n	1721e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   17240:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   17244:	e7eb      	b.n	1721e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = 0x00014000;
   17246:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1724a:	e7e8      	b.n	1721e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   1724c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   17250:	e7e5      	b.n	1721e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   17252:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   17256:	e7e2      	b.n	1721e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   17258:	4b0d      	ldr	r3, [pc, #52]	; (17290 <uarte_nrfx_configure+0x154>)
   1725a:	e7e0      	b.n	1721e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1725c:	4b0d      	ldr	r3, [pc, #52]	; (17294 <uarte_nrfx_configure+0x158>)
   1725e:	e7de      	b.n	1721e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   17260:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   17264:	e7db      	b.n	1721e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   17266:	4b0c      	ldr	r3, [pc, #48]	; (17298 <uarte_nrfx_configure+0x15c>)
   17268:	e7d9      	b.n	1721e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1726a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1726e:	e7d6      	b.n	1721e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   17270:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   17274:	e7d3      	b.n	1721e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   17276:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1727a:	e7d0      	b.n	1721e <uarte_nrfx_configure+0xe2>
   1727c:	0013b000 	.word	0x0013b000
   17280:	004ea000 	.word	0x004ea000
   17284:	0003d090 	.word	0x0003d090
   17288:	000f4240 	.word	0x000f4240
   1728c:	00275000 	.word	0x00275000
   17290:	0075c000 	.word	0x0075c000
   17294:	003af000 	.word	0x003af000
   17298:	013a9000 	.word	0x013a9000

0001729c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1729c:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1729e:	095a      	lsrs	r2, r3, #5
   172a0:	bf0c      	ite	eq
   172a2:	f04f 32ff 	moveq.w	r2, #4294967295
   172a6:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   172a8:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   172ac:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   172b0:	07db      	lsls	r3, r3, #31
{
   172b2:	b510      	push	{r4, lr}
   172b4:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   172b6:	d40b      	bmi.n	172d0 <nrf_gpio_pin_port_decode+0x34>
   172b8:	4910      	ldr	r1, [pc, #64]	; (172fc <nrf_gpio_pin_port_decode+0x60>)
   172ba:	4811      	ldr	r0, [pc, #68]	; (17300 <nrf_gpio_pin_port_decode+0x64>)
   172bc:	4a11      	ldr	r2, [pc, #68]	; (17304 <nrf_gpio_pin_port_decode+0x68>)
   172be:	f44f 7305 	mov.w	r3, #532	; 0x214
   172c2:	f006 fa77 	bl	1d7b4 <printk>
   172c6:	480f      	ldr	r0, [pc, #60]	; (17304 <nrf_gpio_pin_port_decode+0x68>)
   172c8:	f44f 7105 	mov.w	r1, #532	; 0x214
   172cc:	f006 fccc 	bl	1dc68 <assert_post_action>
    uint32_t pin_number = *p_pin;
   172d0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   172d2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   172d6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   172d8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   172da:	d00b      	beq.n	172f4 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   172dc:	490a      	ldr	r1, [pc, #40]	; (17308 <nrf_gpio_pin_port_decode+0x6c>)
   172de:	4808      	ldr	r0, [pc, #32]	; (17300 <nrf_gpio_pin_port_decode+0x64>)
   172e0:	4a08      	ldr	r2, [pc, #32]	; (17304 <nrf_gpio_pin_port_decode+0x68>)
   172e2:	f240 2319 	movw	r3, #537	; 0x219
   172e6:	f006 fa65 	bl	1d7b4 <printk>
   172ea:	4806      	ldr	r0, [pc, #24]	; (17304 <nrf_gpio_pin_port_decode+0x68>)
   172ec:	f240 2119 	movw	r1, #537	; 0x219
   172f0:	f006 fcba 	bl	1dc68 <assert_post_action>
}
   172f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   172f8:	bd10      	pop	{r4, pc}
   172fa:	bf00      	nop
   172fc:	00022691 	.word	0x00022691
   17300:	00021650 	.word	0x00021650
   17304:	0002265e 	.word	0x0002265e
   17308:	00023382 	.word	0x00023382

0001730c <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
   1730c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17310:	4614      	mov	r4, r2
	return config->uarte_regs;
   17312:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   17314:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return config->uarte_regs;
   17318:	6817      	ldr	r7, [r2, #0]
    return p_reg->PSEL.RXD;
   1731a:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (nrf_uarte_rx_pin_get(uarte) == NRF_UARTE_PSEL_DISCONNECTED) {
   1731e:	3201      	adds	r2, #1
{
   17320:	4605      	mov	r5, r0
   17322:	4688      	mov	r8, r1
	if (nrf_uarte_rx_pin_get(uarte) == NRF_UARTE_PSEL_DISCONNECTED) {
   17324:	d112      	bne.n	1734c <uarte_nrfx_rx_enable+0x40>
		__ASSERT(false, "TX only UARTE instance");
   17326:	4a3f      	ldr	r2, [pc, #252]	; (17424 <uarte_nrfx_rx_enable+0x118>)
   17328:	493f      	ldr	r1, [pc, #252]	; (17428 <uarte_nrfx_rx_enable+0x11c>)
   1732a:	4840      	ldr	r0, [pc, #256]	; (1742c <uarte_nrfx_rx_enable+0x120>)
   1732c:	f44f 7349 	mov.w	r3, #804	; 0x324
   17330:	f006 fa40 	bl	1d7b4 <printk>
   17334:	483e      	ldr	r0, [pc, #248]	; (17430 <uarte_nrfx_rx_enable+0x124>)
   17336:	f006 fa3d 	bl	1d7b4 <printk>
   1733a:	483a      	ldr	r0, [pc, #232]	; (17424 <uarte_nrfx_rx_enable+0x118>)
   1733c:	f44f 7149 	mov.w	r1, #804	; 0x324
   17340:	f006 fc92 	bl	1dc68 <assert_post_action>
		return -ENOTSUP;
   17344:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
}
   17348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	data->async->rx_timeout = timeout;
   1734c:	f8d9 100c 	ldr.w	r1, [r9, #12]
		MAX(timeout / RX_TIMEOUT_DIV,
   17350:	2b09      	cmp	r3, #9
	data->async->rx_timeout = timeout;
   17352:	66cb      	str	r3, [r1, #108]	; 0x6c
		MAX(timeout / RX_TIMEOUT_DIV,
   17354:	bfd2      	itee	le
   17356:	2301      	movle	r3, #1
   17358:	2205      	movgt	r2, #5
   1735a:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1735e:	670b      	str	r3, [r1, #112]	; 0x70
	data->async->rx_offset = 0;
   17360:	2300      	movs	r3, #0
	data->async->rx_buf_len = len;
   17362:	e9c1 8414 	strd	r8, r4, [r1, #80]	; 0x50
	data->async->rx_next_buf = NULL;
   17366:	e9c1 3316 	strd	r3, r3, [r1, #88]	; 0x58
	data->async->rx_next_buf_len = 0;
   1736a:	660b      	str	r3, [r1, #96]	; 0x60
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1736c:	6843      	ldr	r3, [r0, #4]
   1736e:	685b      	ldr	r3, [r3, #4]
   17370:	06da      	lsls	r2, r3, #27
   17372:	d524      	bpl.n	173be <uarte_nrfx_rx_enable+0xb2>
		if (data->async->rx_flush_cnt) {
   17374:	f891 60c1 	ldrb.w	r6, [r1, #193]	; 0xc1
   17378:	b30e      	cbz	r6, 173be <uarte_nrfx_rx_enable+0xb2>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1737a:	42a6      	cmp	r6, r4
   1737c:	bf28      	it	cs
   1737e:	4626      	movcs	r6, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   17380:	4640      	mov	r0, r8
   17382:	4632      	mov	r2, r6
   17384:	31bc      	adds	r1, #188	; 0xbc
   17386:	f009 fb70 	bl	20a6a <memcpy>
			if (!len) {
   1738a:	1ba4      	subs	r4, r4, r6
			buf += cpy_len;
   1738c:	44b0      	add	r8, r6
			if (!len) {
   1738e:	d116      	bne.n	173be <uarte_nrfx_rx_enable+0xb2>
				data->async->rx_flush_cnt -= cpy_len;
   17390:	f8d9 200c 	ldr.w	r2, [r9, #12]
   17394:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
   17398:	1b9b      	subs	r3, r3, r6
   1739a:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
				notify_uart_rx_rdy(dev, cpy_len);
   1739e:	4631      	mov	r1, r6
   173a0:	4628      	mov	r0, r5
   173a2:	f008 fdfd 	bl	1ffa0 <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
   173a6:	f8d9 100c 	ldr.w	r1, [r9, #12]
   173aa:	4628      	mov	r0, r5
   173ac:	2201      	movs	r2, #1
   173ae:	3150      	adds	r1, #80	; 0x50
   173b0:	f008 fe0f 	bl	1ffd2 <notify_rx_buf_release>
				notify_rx_disable(dev);
   173b4:	4628      	mov	r0, r5
   173b6:	f008 fe26 	bl	20006 <notify_rx_disable>
	return 0;
   173ba:	2000      	movs	r0, #0
   173bc:	e7c4      	b.n	17348 <uarte_nrfx_rx_enable+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   173be:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   173c0:	f8c7 8534 	str.w	r8, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   173c4:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   173c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   173cc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
   173d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   173d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
	data->async->rx_enabled = true;
   173d8:	f8d9 300c 	ldr.w	r3, [r9, #12]
   173dc:	2201      	movs	r2, #1
   173de:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   173e2:	686b      	ldr	r3, [r5, #4]
   173e4:	685b      	ldr	r3, [r3, #4]
   173e6:	06db      	lsls	r3, r3, #27
   173e8:	d519      	bpl.n	1741e <uarte_nrfx_rx_enable+0x112>
	__asm__ volatile(
   173ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   173ee:	f3ef 8111 	mrs	r1, BASEPRI
   173f2:	f383 8812 	msr	BASEPRI_MAX, r3
   173f6:	f3bf 8f6f 	isb	sy
	if (data->async) {
   173fa:	692b      	ldr	r3, [r5, #16]
   173fc:	68db      	ldr	r3, [r3, #12]
   173fe:	b12b      	cbz	r3, 1740c <uarte_nrfx_rx_enable+0x100>
		data->async->low_power_mask |= mask;
   17400:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   17404:	f042 0202 	orr.w	r2, r2, #2
   17408:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	return config->uarte_regs;
   1740c:	686b      	ldr	r3, [r5, #4]
   1740e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   17410:	2208      	movs	r2, #8
   17412:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   17416:	f381 8811 	msr	BASEPRI, r1
   1741a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1741e:	2301      	movs	r3, #1
   17420:	603b      	str	r3, [r7, #0]
   17422:	e7ca      	b.n	173ba <uarte_nrfx_rx_enable+0xae>
   17424:	000226c7 	.word	0x000226c7
   17428:	00023382 	.word	0x00023382
   1742c:	00021650 	.word	0x00021650
   17430:	000226fb 	.word	0x000226fb

00017434 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   17434:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17438:	2101      	movs	r1, #1
   1743a:	4606      	mov	r6, r0
   1743c:	2200      	movs	r2, #0
   1743e:	2002      	movs	r0, #2
   17440:	f7fa f900 	bl	11644 <z_arm_irq_priority_set>
   17444:	2002      	movs	r0, #2
   17446:	f7fa f8cb 	bl	115e0 <arch_irq_enable>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1744a:	6875      	ldr	r5, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1744c:	6937      	ldr	r7, [r6, #16]
	return config->uarte_regs;
   1744e:	682c      	ldr	r4, [r5, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   17450:	2300      	movs	r3, #0
   17452:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17456:	a801      	add	r0, sp, #4
   17458:	68ab      	ldr	r3, [r5, #8]
	data->dev = dev;
   1745a:	603e      	str	r6, [r7, #0]
        nrf_gpio_pin_set(pin_number);
   1745c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1745e:	f7ff ff1d 	bl	1729c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   17462:	9a01      	ldr	r2, [sp, #4]
   17464:	2301      	movs	r3, #1
   17466:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   17468:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1746c:	68ab      	ldr	r3, [r5, #8]
   1746e:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17470:	a801      	add	r0, sp, #4
   17472:	f7ff ff13 	bl	1729c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   17476:	9b01      	ldr	r3, [sp, #4]
   17478:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1747c:	2203      	movs	r2, #3
   1747e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   17482:	68eb      	ldr	r3, [r5, #12]
   17484:	1c59      	adds	r1, r3, #1
   17486:	d00c      	beq.n	174a2 <uarte_0_init+0x6e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17488:	a801      	add	r0, sp, #4
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
   1748a:	f895 8018 	ldrb.w	r8, [r5, #24]
    nrf_gpio_cfg(
   1748e:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17490:	f7ff ff04 	bl	1729c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   17494:	9b01      	ldr	r3, [sp, #4]
   17496:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1749a:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1749e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
   174a2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
   174a6:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   174aa:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   174ae:	692b      	ldr	r3, [r5, #16]
   174b0:	1c5a      	adds	r2, r3, #1
   174b2:	d00c      	beq.n	174ce <uarte_0_init+0x9a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   174b4:	a801      	add	r0, sp, #4
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
   174b6:	f895 8019 	ldrb.w	r8, [r5, #25]
    nrf_gpio_cfg(
   174ba:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   174bc:	f7ff feee 	bl	1729c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   174c0:	9b01      	ldr	r3, [sp, #4]
   174c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   174c6:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   174ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   174ce:	696b      	ldr	r3, [r5, #20]
   174d0:	1c58      	adds	r0, r3, #1
   174d2:	d013      	beq.n	174fc <uarte_0_init+0xc8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   174d4:	a801      	add	r0, sp, #4
   174d6:	9301      	str	r3, [sp, #4]
   174d8:	f7ff fee0 	bl	1729c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   174dc:	9a01      	ldr	r2, [sp, #4]
   174de:	2301      	movs	r3, #1
   174e0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   174e2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   174e6:	696b      	ldr	r3, [r5, #20]
   174e8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   174ea:	a801      	add	r0, sp, #4
   174ec:	f7ff fed6 	bl	1729c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   174f0:	9b01      	ldr	r3, [sp, #4]
   174f2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   174f6:	2203      	movs	r2, #3
   174f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
   174fc:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   17500:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.RTS = pselrts;
   17502:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   17506:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   17508:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1750c:	4630      	mov	r0, r6
   1750e:	f7ff fe15 	bl	1713c <uarte_nrfx_configure>
	if (err) {
   17512:	4681      	mov	r9, r0
   17514:	2800      	cmp	r0, #0
   17516:	d174      	bne.n	17602 <uarte_0_init+0x1ce>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   17518:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1751a:	0719      	lsls	r1, r3, #28
   1751c:	d51a      	bpl.n	17554 <uarte_0_init+0x120>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1751e:	f107 0016 	add.w	r0, r7, #22
   17522:	f001 fca1 	bl	18e68 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   17526:	4b44      	ldr	r3, [pc, #272]	; (17638 <uarte_0_init+0x204>)
   17528:	4298      	cmp	r0, r3
   1752a:	f040 8081 	bne.w	17630 <uarte_0_init+0x1fc>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1752e:	7db8      	ldrb	r0, [r7, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   17530:	00c3      	lsls	r3, r0, #3
   17532:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17536:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1753a:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1753e:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17542:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17546:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1754a:	4a3c      	ldr	r2, [pc, #240]	; (1763c <uarte_0_init+0x208>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1754c:	2301      	movs	r3, #1
   1754e:	4083      	lsls	r3, r0
   17550:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   17554:	68fb      	ldr	r3, [r7, #12]
   17556:	2b00      	cmp	r3, #0
   17558:	d057      	beq.n	1760a <uarte_0_init+0x1d6>
	return config->uarte_regs;
   1755a:	6873      	ldr	r3, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1755c:	f8d6 8010 	ldr.w	r8, [r6, #16]
	return config->uarte_regs;
   17560:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   17562:	f8d8 000c 	ldr.w	r0, [r8, #12]
    p_reg->INTENSET = mask;
   17566:	4936      	ldr	r1, [pc, #216]	; (17640 <uarte_0_init+0x20c>)
   17568:	2204      	movs	r2, #4
   1756a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   1756e:	2201      	movs	r2, #1
   17570:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
   17574:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   17578:	2108      	movs	r1, #8
   1757a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1757e:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   17582:	b1a1      	cbz	r1, 175ae <uarte_0_init+0x17a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17584:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17586:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1758a:	b91a      	cbnz	r2, 17594 <uarte_0_init+0x160>
   1758c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   17590:	2a00      	cmp	r2, #0
   17592:	d0f8      	beq.n	17586 <uarte_0_init+0x152>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17594:	2200      	movs	r2, #0
   17596:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1759a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1759e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   175a2:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   175a6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   175aa:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   175ae:	4925      	ldr	r1, [pc, #148]	; (17644 <uarte_0_init+0x210>)
   175b0:	2200      	movs	r2, #0
   175b2:	3078      	adds	r0, #120	; 0x78
   175b4:	f009 f9d7 	bl	20966 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   175b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
   175bc:	f8c3 80ac 	str.w	r8, [r3, #172]	; 0xac
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   175c0:	f8d8 000c 	ldr.w	r0, [r8, #12]
   175c4:	4920      	ldr	r1, [pc, #128]	; (17648 <uarte_0_init+0x214>)
   175c6:	2200      	movs	r2, #0
   175c8:	3018      	adds	r0, #24
   175ca:	f009 f9cc 	bl	20966 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   175ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
   175d2:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   175d6:	686b      	ldr	r3, [r5, #4]
   175d8:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   175da:	bf5c      	itt	pl
   175dc:	f44f 7280 	movpl.w	r2, #256	; 0x100
   175e0:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   175e4:	06db      	lsls	r3, r3, #27
   175e6:	bf44      	itt	mi
   175e8:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   175ec:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   175f0:	3714      	adds	r7, #20
    p_reg->TXD.MAXCNT = length;
   175f2:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   175f4:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   175f8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   175fc:	2301      	movs	r3, #1
   175fe:	60a3      	str	r3, [r4, #8]
   17600:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   17602:	4648      	mov	r0, r9
   17604:	b003      	add	sp, #12
   17606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1760a:	2208      	movs	r2, #8
   1760c:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   17610:	68ea      	ldr	r2, [r5, #12]
   17612:	3201      	adds	r2, #1
   17614:	d0df      	beq.n	175d6 <uarte_0_init+0x1a2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17616:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1761a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1761e:	f107 0315 	add.w	r3, r7, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   17622:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   17626:	2301      	movs	r3, #1
   17628:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1762c:	6023      	str	r3, [r4, #0]
}
   1762e:	e7d2      	b.n	175d6 <uarte_0_init+0x1a2>
		return -EIO;
   17630:	f06f 0904 	mvn.w	r9, #4
UART_NRF_UARTE_DEVICE(0);
   17634:	e7e5      	b.n	17602 <uarte_0_init+0x1ce>
   17636:	bf00      	nop
   17638:	0bad0000 	.word	0x0bad0000
   1763c:	4001f000 	.word	0x4001f000
   17640:	000a0210 	.word	0x000a0210
   17644:	000200bd 	.word	0x000200bd
   17648:	00020225 	.word	0x00020225

0001764c <uarte_nrfx_poll_out>:
{
   1764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1764e:	6906      	ldr	r6, [r0, #16]
{
   17650:	4604      	mov	r4, r0
   17652:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   17654:	f009 f885 	bl	20762 <k_is_in_isr>
   17658:	b910      	cbnz	r0, 17660 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1765a:	4b28      	ldr	r3, [pc, #160]	; (176fc <uarte_nrfx_poll_out+0xb0>)
	if (isr_mode) {
   1765c:	781b      	ldrb	r3, [r3, #0]
   1765e:	bb5b      	cbnz	r3, 176b8 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   17660:	f04f 0340 	mov.w	r3, #64	; 0x40
   17664:	f3ef 8111 	mrs	r1, BASEPRI
   17668:	f383 8812 	msr	BASEPRI_MAX, r3
   1766c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   17670:	4620      	mov	r0, r4
			key = irq_lock();
   17672:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
   17674:	f008 fc7d 	bl	1ff72 <is_tx_ready>
   17678:	b1c8      	cbz	r0, 176ae <uarte_nrfx_poll_out+0x62>
				if (data->async && data->async->tx_size &&
   1767a:	68f3      	ldr	r3, [r6, #12]
   1767c:	b15b      	cbz	r3, 17696 <uarte_nrfx_poll_out+0x4a>
   1767e:	68da      	ldr	r2, [r3, #12]
   17680:	b14a      	cbz	r2, 17696 <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
   17682:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
				if (data->async && data->async->tx_size &&
   17686:	2a00      	cmp	r2, #0
   17688:	da05      	bge.n	17696 <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
   1768a:	6862      	ldr	r2, [r4, #4]
   1768c:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
   1768e:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   17692:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	data->char_out = c;
   17696:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   17698:	2201      	movs	r2, #1
	data->char_out = c;
   1769a:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   1769e:	4620      	mov	r0, r4
   176a0:	f008 fde5 	bl	2026e <tx_start>
	__asm__ volatile(
   176a4:	f385 8811 	msr	BASEPRI, r5
   176a8:	f3bf 8f6f 	isb	sy
}
   176ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   176ae:	f381 8811 	msr	BASEPRI, r1
   176b2:	f3bf 8f6f 	isb	sy
}
   176b6:	e7d3      	b.n	17660 <uarte_nrfx_poll_out+0x14>
{
   176b8:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   176ba:	4620      	mov	r0, r4
   176bc:	f008 fc59 	bl	1ff72 <is_tx_ready>
   176c0:	b948      	cbnz	r0, 176d6 <uarte_nrfx_poll_out+0x8a>
   176c2:	2001      	movs	r0, #1
   176c4:	f009 f831 	bl	2072a <nrfx_busy_wait>
   176c8:	3d01      	subs	r5, #1
   176ca:	d1f6      	bne.n	176ba <uarte_nrfx_poll_out+0x6e>
   176cc:	2100      	movs	r1, #0
   176ce:	2021      	movs	r0, #33	; 0x21
   176d0:	f004 fb32 	bl	1bd38 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   176d4:	e7f0      	b.n	176b8 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   176d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   176da:	f3ef 8511 	mrs	r5, BASEPRI
   176de:	f383 8812 	msr	BASEPRI_MAX, r3
   176e2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   176e6:	4620      	mov	r0, r4
   176e8:	f008 fc43 	bl	1ff72 <is_tx_ready>
   176ec:	2800      	cmp	r0, #0
   176ee:	d1d2      	bne.n	17696 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   176f0:	f385 8811 	msr	BASEPRI, r5
   176f4:	f3bf 8f6f 	isb	sy
}
   176f8:	e7e8      	b.n	176cc <uarte_nrfx_poll_out+0x80>
   176fa:	bf00      	nop
   176fc:	200029ec 	.word	0x200029ec

00017700 <random_byte_get>:
	__asm__ volatile(
   17700:	f04f 0340 	mov.w	r3, #64	; 0x40
   17704:	f3ef 8211 	mrs	r2, BASEPRI
   17708:	f383 8812 	msr	BASEPRI_MAX, r3
   1770c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   17710:	4b08      	ldr	r3, [pc, #32]	; (17734 <random_byte_get+0x34>)
   17712:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   17714:	b159      	cbz	r1, 1772e <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   17716:	4908      	ldr	r1, [pc, #32]	; (17738 <random_byte_get+0x38>)
   17718:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1771c:	2100      	movs	r1, #0
   1771e:	6019      	str	r1, [r3, #0]
   17720:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   17722:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   17724:	f382 8811 	msr	BASEPRI, r2
   17728:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1772c:	4770      	bx	lr
	int retval = -EAGAIN;
   1772e:	f06f 000a 	mvn.w	r0, #10
   17732:	e7f7      	b.n	17724 <random_byte_get+0x24>
   17734:	4000d100 	.word	0x4000d100
   17738:	4000d000 	.word	0x4000d000

0001773c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1773c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1773e:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   17740:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   17742:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   17744:	f04f 0540 	mov.w	r5, #64	; 0x40
   17748:	f3ef 8011 	mrs	r0, BASEPRI
   1774c:	f385 8812 	msr	BASEPRI_MAX, r5
   17750:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   17754:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   17756:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1775a:	1ba4      	subs	r4, r4, r6
   1775c:	403c      	ands	r4, r7
	if (available < len) {
   1775e:	42a2      	cmp	r2, r4
		len = available;
   17760:	bf88      	it	hi
   17762:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   17764:	eb06 0c02 	add.w	ip, r6, r2
   17768:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1776c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1776e:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   17772:	f380 8811 	msr	BASEPRI, r0
   17776:	f3bf 8f6f 	isb	sy
   1777a:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1777c:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1777e:	4282      	cmp	r2, r0
   17780:	d119      	bne.n	177b6 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   17782:	4576      	cmp	r6, lr
   17784:	d10d      	bne.n	177a2 <rng_pool_get+0x66>
	__asm__ volatile(
   17786:	f04f 0540 	mov.w	r5, #64	; 0x40
   1778a:	f3ef 8211 	mrs	r2, BASEPRI
   1778e:	f385 8812 	msr	BASEPRI_MAX, r5
   17792:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   17796:	781d      	ldrb	r5, [r3, #0]
   17798:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1779a:	f382 8811 	msr	BASEPRI, r2
   1779e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   177a2:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   177a4:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   177a6:	b288      	uxth	r0, r1
	available = available - len;
   177a8:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   177aa:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   177ac:	bf22      	ittt	cs
   177ae:	4b06      	ldrcs	r3, [pc, #24]	; (177c8 <rng_pool_get+0x8c>)
   177b0:	2201      	movcs	r2, #1
   177b2:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   177b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   177b6:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   177ba:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   177bc:	f89c c005 	ldrb.w	ip, [ip, #5]
   177c0:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   177c4:	403d      	ands	r5, r7
   177c6:	e7da      	b.n	1777e <rng_pool_get+0x42>
   177c8:	4000d000 	.word	0x4000d000

000177cc <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   177cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   177d0:	4614      	mov	r4, r2
   177d2:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   177d4:	6902      	ldr	r2, [r0, #16]
   177d6:	4b2c      	ldr	r3, [pc, #176]	; (17888 <entropy_nrf5_get_entropy_isr+0xbc>)
   177d8:	429a      	cmp	r2, r3
{
   177da:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   177dc:	d00b      	beq.n	177f6 <entropy_nrf5_get_entropy_isr+0x2a>
   177de:	492b      	ldr	r1, [pc, #172]	; (1788c <entropy_nrf5_get_entropy_isr+0xc0>)
   177e0:	482b      	ldr	r0, [pc, #172]	; (17890 <entropy_nrf5_get_entropy_isr+0xc4>)
   177e2:	4a2c      	ldr	r2, [pc, #176]	; (17894 <entropy_nrf5_get_entropy_isr+0xc8>)
   177e4:	f44f 7384 	mov.w	r3, #264	; 0x108
   177e8:	f005 ffe4 	bl	1d7b4 <printk>
   177ec:	4829      	ldr	r0, [pc, #164]	; (17894 <entropy_nrf5_get_entropy_isr+0xc8>)
   177ee:	f44f 7184 	mov.w	r1, #264	; 0x108
   177f2:	f006 fa39 	bl	1dc68 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   177f6:	43eb      	mvns	r3, r5
   177f8:	f013 0501 	ands.w	r5, r3, #1
   177fc:	d006      	beq.n	1780c <entropy_nrf5_get_entropy_isr+0x40>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   177fe:	4826      	ldr	r0, [pc, #152]	; (17898 <entropy_nrf5_get_entropy_isr+0xcc>)
   17800:	4622      	mov	r2, r4
   17802:	4631      	mov	r1, r6
   17804:	f7ff ff9a 	bl	1773c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   17808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1780c:	2c00      	cmp	r4, #0
   1780e:	d033      	beq.n	17878 <entropy_nrf5_get_entropy_isr+0xac>
	__asm__ volatile(
   17810:	f04f 0340 	mov.w	r3, #64	; 0x40
   17814:	f3ef 8811 	mrs	r8, BASEPRI
   17818:	f383 8812 	msr	BASEPRI_MAX, r3
   1781c:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   17820:	200d      	movs	r0, #13
   17822:	f7f9 ff01 	bl	11628 <arch_irq_is_enabled>
   17826:	4607      	mov	r7, r0
		irq_disable(IRQN);
   17828:	200d      	movs	r0, #13
   1782a:	f7f9 fee9 	bl	11600 <arch_irq_disable>
	__asm__ volatile(
   1782e:	f388 8811 	msr	BASEPRI, r8
   17832:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17836:	4a19      	ldr	r2, [pc, #100]	; (1789c <entropy_nrf5_get_entropy_isr+0xd0>)
   17838:	6015      	str	r5, [r2, #0]
   1783a:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1783c:	4b18      	ldr	r3, [pc, #96]	; (178a0 <entropy_nrf5_get_entropy_isr+0xd4>)
   1783e:	2101      	movs	r1, #1
   17840:	6019      	str	r1, [r3, #0]
   17842:	4918      	ldr	r1, [pc, #96]	; (178a4 <entropy_nrf5_get_entropy_isr+0xd8>)
   17844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   17848:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1784c:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1784e:	4691      	mov	r9, r2
   17850:	468a      	mov	sl, r1
   17852:	4698      	mov	r8, r3
   17854:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   17858:	b183      	cbz	r3, 1787c <entropy_nrf5_get_entropy_isr+0xb0>
			byte = random_byte_get();
   1785a:	f7ff ff51 	bl	17700 <random_byte_get>
			if (byte < 0) {
   1785e:	1e03      	subs	r3, r0, #0
   17860:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   17864:	dbf6      	blt.n	17854 <entropy_nrf5_get_entropy_isr+0x88>
   17866:	3d01      	subs	r5, #1
   17868:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1786a:	5573      	strb	r3, [r6, r5]
		} while (len);
   1786c:	2d00      	cmp	r5, #0
   1786e:	d1f1      	bne.n	17854 <entropy_nrf5_get_entropy_isr+0x88>
		if (irq_enabled) {
   17870:	b117      	cbz	r7, 17878 <entropy_nrf5_get_entropy_isr+0xac>
			irq_enable(IRQN);
   17872:	200d      	movs	r0, #13
   17874:	f7f9 feb4 	bl	115e0 <arch_irq_enable>
	return cnt;
   17878:	4620      	mov	r0, r4
   1787a:	e7c5      	b.n	17808 <entropy_nrf5_get_entropy_isr+0x3c>
   1787c:	f3bf 8f4f 	dsb	sy
				__WFE();
   17880:	bf20      	wfe
				__SEV();
   17882:	bf40      	sev
				__WFE();
   17884:	bf20      	wfe
   17886:	e7e5      	b.n	17854 <entropy_nrf5_get_entropy_isr+0x88>
   17888:	20001ed4 	.word	0x20001ed4
   1788c:	00022746 	.word	0x00022746
   17890:	00021650 	.word	0x00021650
   17894:	00022714 	.word	0x00022714
   17898:	20001f04 	.word	0x20001f04
   1789c:	4000d100 	.word	0x4000d100
   178a0:	4000d000 	.word	0x4000d000
   178a4:	e000e100 	.word	0xe000e100

000178a8 <entropy_nrf5_get_entropy>:
{
   178a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   178ac:	4b1a      	ldr	r3, [pc, #104]	; (17918 <entropy_nrf5_get_entropy+0x70>)
{
   178ae:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   178b0:	6902      	ldr	r2, [r0, #16]
   178b2:	429a      	cmp	r2, r3
{
   178b4:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   178b6:	d009      	beq.n	178cc <entropy_nrf5_get_entropy+0x24>
   178b8:	4918      	ldr	r1, [pc, #96]	; (1791c <entropy_nrf5_get_entropy+0x74>)
   178ba:	4819      	ldr	r0, [pc, #100]	; (17920 <entropy_nrf5_get_entropy+0x78>)
   178bc:	4a19      	ldr	r2, [pc, #100]	; (17924 <entropy_nrf5_get_entropy+0x7c>)
   178be:	23ea      	movs	r3, #234	; 0xea
   178c0:	f005 ff78 	bl	1d7b4 <printk>
   178c4:	4817      	ldr	r0, [pc, #92]	; (17924 <entropy_nrf5_get_entropy+0x7c>)
   178c6:	21ea      	movs	r1, #234	; 0xea
   178c8:	f006 f9ce 	bl	1dc68 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   178cc:	4e12      	ldr	r6, [pc, #72]	; (17918 <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   178ce:	f106 0745 	add.w	r7, r6, #69	; 0x45
   178d2:	f106 0818 	add.w	r8, r6, #24
	while (len) {
   178d6:	b914      	cbnz	r4, 178de <entropy_nrf5_get_entropy+0x36>
}
   178d8:	4620      	mov	r0, r4
   178da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   178de:	f04f 33ff 	mov.w	r3, #4294967295
   178e2:	f04f 32ff 	mov.w	r2, #4294967295
   178e6:	4630      	mov	r0, r6
   178e8:	f002 fbae 	bl	1a048 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   178ec:	4622      	mov	r2, r4
   178ee:	4649      	mov	r1, r9
   178f0:	4638      	mov	r0, r7
   178f2:	f7ff ff23 	bl	1773c <rng_pool_get>
   178f6:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   178f8:	4630      	mov	r0, r6
   178fa:	f002 fb61 	bl	19fc0 <z_impl_k_sem_give>
		if (bytes == 0U) {
   178fe:	b93d      	cbnz	r5, 17910 <entropy_nrf5_get_entropy+0x68>
	return z_impl_k_sem_take(sem, timeout);
   17900:	f04f 32ff 	mov.w	r2, #4294967295
   17904:	f04f 33ff 	mov.w	r3, #4294967295
   17908:	4640      	mov	r0, r8
   1790a:	f002 fb9d 	bl	1a048 <z_impl_k_sem_take>
			continue;
   1790e:	e7e2      	b.n	178d6 <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   17910:	1b64      	subs	r4, r4, r5
   17912:	b2a4      	uxth	r4, r4
		buf += bytes;
   17914:	44a9      	add	r9, r5
   17916:	e7de      	b.n	178d6 <entropy_nrf5_get_entropy+0x2e>
   17918:	20001ed4 	.word	0x20001ed4
   1791c:	00022746 	.word	0x00022746
   17920:	00021650 	.word	0x00021650
   17924:	00022714 	.word	0x00022714

00017928 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   17928:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1792a:	4c20      	ldr	r4, [pc, #128]	; (179ac <entropy_nrf5_init+0x84>)
   1792c:	6903      	ldr	r3, [r0, #16]
   1792e:	42a3      	cmp	r3, r4
   17930:	d00b      	beq.n	1794a <entropy_nrf5_init+0x22>
   17932:	491f      	ldr	r1, [pc, #124]	; (179b0 <entropy_nrf5_init+0x88>)
   17934:	481f      	ldr	r0, [pc, #124]	; (179b4 <entropy_nrf5_init+0x8c>)
   17936:	4a20      	ldr	r2, [pc, #128]	; (179b8 <entropy_nrf5_init+0x90>)
   17938:	f240 1357 	movw	r3, #343	; 0x157
   1793c:	f005 ff3a 	bl	1d7b4 <printk>
   17940:	481d      	ldr	r0, [pc, #116]	; (179b8 <entropy_nrf5_init+0x90>)
   17942:	f240 1157 	movw	r1, #343	; 0x157
   17946:	f006 f98f 	bl	1dc68 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1794a:	2201      	movs	r2, #1
   1794c:	4611      	mov	r1, r2
   1794e:	4817      	ldr	r0, [pc, #92]	; (179ac <entropy_nrf5_init+0x84>)
   17950:	f008 ff47 	bl	207e2 <z_impl_k_sem_init>
   17954:	2201      	movs	r2, #1
   17956:	2100      	movs	r1, #0
   17958:	4818      	ldr	r0, [pc, #96]	; (179bc <entropy_nrf5_init+0x94>)
   1795a:	f008 ff42 	bl	207e2 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1795e:	f240 4307 	movw	r3, #1031	; 0x407
   17962:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   17966:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1796a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1796c:	230c      	movs	r3, #12
   1796e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   17972:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   17974:	4b12      	ldr	r3, [pc, #72]	; (179c0 <entropy_nrf5_init+0x98>)
   17976:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1797a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1797e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   17982:	f022 0201 	bic.w	r2, r2, #1
   17986:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1798a:	4a0e      	ldr	r2, [pc, #56]	; (179c4 <entropy_nrf5_init+0x9c>)
    p_reg->INTENSET = mask;
   1798c:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1798e:	6015      	str	r5, [r2, #0]
   17990:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   17992:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   17996:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   17998:	6019      	str	r1, [r3, #0]
   1799a:	200d      	movs	r0, #13
   1799c:	f7f9 fe52 	bl	11644 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   179a0:	200d      	movs	r0, #13
   179a2:	f7f9 fe1d 	bl	115e0 <arch_irq_enable>

	return 0;
}
   179a6:	4628      	mov	r0, r5
   179a8:	bd38      	pop	{r3, r4, r5, pc}
   179aa:	bf00      	nop
   179ac:	20001ed4 	.word	0x20001ed4
   179b0:	00022746 	.word	0x00022746
   179b4:	00021650 	.word	0x00021650
   179b8:	00022714 	.word	0x00022714
   179bc:	20001eec 	.word	0x20001eec
   179c0:	4000d000 	.word	0x4000d000
   179c4:	4000d100 	.word	0x4000d100

000179c8 <isr>:
{
   179c8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   179ca:	f7ff fe99 	bl	17700 <random_byte_get>
	if (byte < 0) {
   179ce:	2800      	cmp	r0, #0
   179d0:	db20      	blt.n	17a14 <isr+0x4c>
	uint8_t last  = rngp->last;
   179d2:	4b17      	ldr	r3, [pc, #92]	; (17a30 <isr+0x68>)
   179d4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   179d8:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   179dc:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   179e0:	1a51      	subs	r1, r2, r1
   179e2:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   179e6:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   179e8:	d10d      	bne.n	17a06 <isr+0x3e>
	uint8_t last  = rngp->last;
   179ea:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   179ee:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   179f2:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   179f6:	1a51      	subs	r1, r2, r1
   179f8:	ea34 0101 	bics.w	r1, r4, r1
   179fc:	d10b      	bne.n	17a16 <isr+0x4e>
   179fe:	4b0d      	ldr	r3, [pc, #52]	; (17a34 <isr+0x6c>)
   17a00:	2201      	movs	r2, #1
   17a02:	601a      	str	r2, [r3, #0]
}
   17a04:	e00e      	b.n	17a24 <isr+0x5c>
	rngp->buffer[last] = byte;
   17a06:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   17a08:	3201      	adds	r2, #1
   17a0a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   17a0c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   17a10:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   17a14:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   17a16:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   17a18:	3201      	adds	r2, #1
   17a1a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   17a1c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   17a20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   17a24:	4804      	ldr	r0, [pc, #16]	; (17a38 <isr+0x70>)
}
   17a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17a2a:	f002 bac9 	b.w	19fc0 <z_impl_k_sem_give>
   17a2e:	bf00      	nop
   17a30:	20001ed4 	.word	0x20001ed4
   17a34:	4000d004 	.word	0x4000d004
   17a38:	20001eec 	.word	0x20001eec

00017a3c <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
   17a3c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   17a3e:	4c06      	ldr	r4, [pc, #24]	; (17a58 <sys_clock_isr+0x1c>)
   17a40:	4906      	ldr	r1, [pc, #24]	; (17a5c <sys_clock_isr+0x20>)
   17a42:	4807      	ldr	r0, [pc, #28]	; (17a60 <sys_clock_isr+0x24>)
   17a44:	4622      	mov	r2, r4
   17a46:	2317      	movs	r3, #23
   17a48:	f005 feb4 	bl	1d7b4 <printk>
   17a4c:	4620      	mov	r0, r4
   17a4e:	2117      	movs	r1, #23
}
   17a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   17a54:	f006 b908 	b.w	1dc68 <assert_post_action>
   17a58:	0002278e 	.word	0x0002278e
   17a5c:	00023382 	.word	0x00023382
   17a60:	00021650 	.word	0x00021650

00017a64 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   17a64:	4919      	ldr	r1, [pc, #100]	; (17acc <sys_clock_timeout_handler+0x68>)
{
   17a66:	b570      	push	{r4, r5, r6, lr}
   17a68:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   17a6a:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   17a6e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   17a70:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   17a74:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   17a78:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   17a7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   17a7e:	f04f 0500 	mov.w	r5, #0
   17a82:	d20a      	bcs.n	17a9a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   17a84:	4b12      	ldr	r3, [pc, #72]	; (17ad0 <sys_clock_timeout_handler+0x6c>)
   17a86:	6819      	ldr	r1, [r3, #0]
   17a88:	060a      	lsls	r2, r1, #24
   17a8a:	0a0b      	lsrs	r3, r1, #8
   17a8c:	1992      	adds	r2, r2, r6
   17a8e:	4911      	ldr	r1, [pc, #68]	; (17ad4 <sys_clock_timeout_handler+0x70>)
   17a90:	f143 0300 	adc.w	r3, r3, #0
   17a94:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   17a98:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   17a9a:	f004 fcdd 	bl	1c458 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   17a9e:	00a3      	lsls	r3, r4, #2
   17aa0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17aa4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   17aa8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   17aac:	42b2      	cmp	r2, r6
   17aae:	d10b      	bne.n	17ac8 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   17ab0:	b91d      	cbnz	r5, 17aba <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   17ab2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   17ab6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   17aba:	4b07      	ldr	r3, [pc, #28]	; (17ad8 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17abc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   17ac0:	fa00 f404 	lsl.w	r4, r0, r4
   17ac4:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   17ac8:	bd70      	pop	{r4, r5, r6, pc}
   17aca:	bf00      	nop
   17acc:	20001a38 	.word	0x20001a38
   17ad0:	20001f30 	.word	0x20001f30
   17ad4:	20001a20 	.word	0x20001a20
   17ad8:	40011000 	.word	0x40011000

00017adc <compare_int_lock>:
{
   17adc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   17ade:	2301      	movs	r3, #1
   17ae0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17ae2:	4a11      	ldr	r2, [pc, #68]	; (17b28 <compare_int_lock+0x4c>)
   17ae4:	f3bf 8f5b 	dmb	ish
   17ae8:	43dc      	mvns	r4, r3
   17aea:	e852 1f00 	ldrex	r1, [r2]
   17aee:	ea01 0c04 	and.w	ip, r1, r4
   17af2:	e842 ce00 	strex	lr, ip, [r2]
   17af6:	f1be 0f00 	cmp.w	lr, #0
   17afa:	d1f6      	bne.n	17aea <compare_int_lock+0xe>
   17afc:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17b00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17b04:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   17b08:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17b0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   17b10:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   17b14:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   17b18:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   17b1c:	420b      	tst	r3, r1
}
   17b1e:	bf14      	ite	ne
   17b20:	2001      	movne	r0, #1
   17b22:	2000      	moveq	r0, #0
   17b24:	bd10      	pop	{r4, pc}
   17b26:	bf00      	nop
   17b28:	20001f2c 	.word	0x20001f2c

00017b2c <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   17b2c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17b2e:	4a12      	ldr	r2, [pc, #72]	; (17b78 <compare_int_unlock.part.0+0x4c>)
   17b30:	f3bf 8f5b 	dmb	ish
   17b34:	4083      	lsls	r3, r0
   17b36:	e852 1f00 	ldrex	r1, [r2]
   17b3a:	4319      	orrs	r1, r3
   17b3c:	e842 1c00 	strex	ip, r1, [r2]
   17b40:	f1bc 0f00 	cmp.w	ip, #0
   17b44:	d1f7      	bne.n	17b36 <compare_int_unlock.part.0+0xa>
   17b46:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   17b4a:	4a0c      	ldr	r2, [pc, #48]	; (17b7c <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   17b50:	4083      	lsls	r3, r0
   17b52:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17b56:	4b0a      	ldr	r3, [pc, #40]	; (17b80 <compare_int_unlock.part.0+0x54>)
   17b58:	f3bf 8f5b 	dmb	ish
   17b5c:	681b      	ldr	r3, [r3, #0]
   17b5e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   17b62:	fa23 f000 	lsr.w	r0, r3, r0
   17b66:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17b68:	bf42      	ittt	mi
   17b6a:	4b06      	ldrmi	r3, [pc, #24]	; (17b84 <compare_int_unlock.part.0+0x58>)
   17b6c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   17b70:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   17b74:	4770      	bx	lr
   17b76:	bf00      	nop
   17b78:	20001f2c 	.word	0x20001f2c
   17b7c:	40011000 	.word	0x40011000
   17b80:	20001f28 	.word	0x20001f28
   17b84:	e000e100 	.word	0xe000e100

00017b88 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   17b88:	4b0d      	ldr	r3, [pc, #52]	; (17bc0 <z_nrf_rtc_timer_read+0x38>)
   17b8a:	681b      	ldr	r3, [r3, #0]
   17b8c:	0a19      	lsrs	r1, r3, #8
   17b8e:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   17b90:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   17b94:	4b0b      	ldr	r3, [pc, #44]	; (17bc4 <z_nrf_rtc_timer_read+0x3c>)
   17b96:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   17b9a:	18c0      	adds	r0, r0, r3
   17b9c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   17ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   17ba4:	d20a      	bcs.n	17bbc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   17ba6:	4b08      	ldr	r3, [pc, #32]	; (17bc8 <z_nrf_rtc_timer_read+0x40>)
   17ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
   17bac:	4299      	cmp	r1, r3
   17bae:	bf08      	it	eq
   17bb0:	4290      	cmpeq	r0, r2
   17bb2:	d203      	bcs.n	17bbc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   17bb4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   17bb8:	f141 0100 	adc.w	r1, r1, #0
}
   17bbc:	4770      	bx	lr
   17bbe:	bf00      	nop
   17bc0:	20001f30 	.word	0x20001f30
   17bc4:	40011000 	.word	0x40011000
   17bc8:	20001a20 	.word	0x20001a20

00017bcc <compare_set>:
{
   17bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bd0:	b085      	sub	sp, #20
   17bd2:	4616      	mov	r6, r2
   17bd4:	461f      	mov	r7, r3
   17bd6:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   17bd8:	f7ff ff80 	bl	17adc <compare_int_lock>
   17bdc:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   17bde:	f7ff ffd3 	bl	17b88 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   17be2:	42b9      	cmp	r1, r7
   17be4:	bf08      	it	eq
   17be6:	42b0      	cmpeq	r0, r6
   17be8:	d27f      	bcs.n	17cea <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
   17bea:	ebb6 0800 	subs.w	r8, r6, r0
   17bee:	eb67 0901 	sbc.w	r9, r7, r1
   17bf2:	2300      	movs	r3, #0
   17bf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   17bf8:	454b      	cmp	r3, r9
   17bfa:	bf08      	it	eq
   17bfc:	4542      	cmpeq	r2, r8
   17bfe:	f0c0 8085 	bcc.w	17d0c <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   17c02:	4b44      	ldr	r3, [pc, #272]	; (17d14 <compare_set+0x148>)
   17c04:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   17c08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   17c0c:	429f      	cmp	r7, r3
   17c0e:	bf08      	it	eq
   17c10:	4296      	cmpeq	r6, r2
   17c12:	d054      	beq.n	17cbe <compare_set+0xf2>
   17c14:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17c18:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   17c1c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   17c20:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17c24:	fa0b f205 	lsl.w	r2, fp, r5
   17c28:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   17c2c:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   17c30:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17c34:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
   17c36:	4a38      	ldr	r2, [pc, #224]	; (17d18 <compare_set+0x14c>)
    return p_reg->CC[ch];
   17c38:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   17c3c:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   17c40:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   17c44:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   17c48:	461c      	mov	r4, r3
   17c4a:	4693      	mov	fp, r2
     return p_reg->COUNTER;
   17c4c:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   17c50:	eba0 000a 	sub.w	r0, r0, sl
   17c54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   17c58:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   17c5c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   17c5e:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   17c62:	d105      	bne.n	17c70 <compare_set+0xa4>
   17c64:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   17c66:	2013      	movs	r0, #19
   17c68:	f008 fe50 	bl	2090c <z_impl_k_busy_wait>
   17c6c:	4a2a      	ldr	r2, [pc, #168]	; (17d18 <compare_set+0x14c>)
   17c6e:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   17c70:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   17c72:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   17c76:	eba4 000c 	sub.w	r0, r4, ip
   17c7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   17c7e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   17c82:	bf88      	it	hi
   17c84:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   17c86:	2000      	movs	r0, #0
   17c88:	f8c8 0000 	str.w	r0, [r8]
   17c8c:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   17c90:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   17c94:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   17c98:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   17c9c:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   17ca0:	4582      	cmp	sl, r0
   17ca2:	d006      	beq.n	17cb2 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   17ca4:	1a20      	subs	r0, r4, r0
   17ca6:	3802      	subs	r0, #2
   17ca8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   17cac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   17cb0:	d819      	bhi.n	17ce6 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
   17cb2:	1ae4      	subs	r4, r4, r3
   17cb4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   17cb8:	1932      	adds	r2, r6, r4
   17cba:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   17cbe:	4c15      	ldr	r4, [pc, #84]	; (17d14 <compare_set+0x148>)
   17cc0:	0129      	lsls	r1, r5, #4
   17cc2:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   17cc6:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   17cca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
   17ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
   17cce:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
   17cd0:	6043      	str	r3, [r0, #4]
	return ret;
   17cd2:	2400      	movs	r4, #0
	if (key) {
   17cd4:	9b01      	ldr	r3, [sp, #4]
   17cd6:	b113      	cbz	r3, 17cde <compare_set+0x112>
   17cd8:	4628      	mov	r0, r5
   17cda:	f7ff ff27 	bl	17b2c <compare_int_unlock.part.0>
}
   17cde:	4620      	mov	r0, r4
   17ce0:	b005      	add	sp, #20
   17ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ce6:	4620      	mov	r0, r4
   17ce8:	e7b0      	b.n	17c4c <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   17cea:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17cec:	4a0b      	ldr	r2, [pc, #44]	; (17d1c <compare_set+0x150>)
   17cee:	f3bf 8f5b 	dmb	ish
   17cf2:	40ab      	lsls	r3, r5
   17cf4:	e852 1f00 	ldrex	r1, [r2]
   17cf8:	4319      	orrs	r1, r3
   17cfa:	e842 1000 	strex	r0, r1, [r2]
   17cfe:	2800      	cmp	r0, #0
   17d00:	d1f8      	bne.n	17cf4 <compare_set+0x128>
   17d02:	f3bf 8f5b 	dmb	ish
   17d06:	4632      	mov	r2, r6
   17d08:	463b      	mov	r3, r7
   17d0a:	e7d8      	b.n	17cbe <compare_set+0xf2>
			return -EINVAL;
   17d0c:	f06f 0415 	mvn.w	r4, #21
   17d10:	e7e0      	b.n	17cd4 <compare_set+0x108>
   17d12:	bf00      	nop
   17d14:	20001a28 	.word	0x20001a28
   17d18:	40011000 	.word	0x40011000
   17d1c:	20001f28 	.word	0x20001f28

00017d20 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   17d20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return p_reg->INTENSET & mask;
   17d24:	4c2a      	ldr	r4, [pc, #168]	; (17dd0 <rtc_nrf_isr+0xb0>)
   17d26:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   17d2a:	0799      	lsls	r1, r3, #30
   17d2c:	d509      	bpl.n	17d42 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17d2e:	4b29      	ldr	r3, [pc, #164]	; (17dd4 <rtc_nrf_isr+0xb4>)
   17d30:	681a      	ldr	r2, [r3, #0]
   17d32:	b132      	cbz	r2, 17d42 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   17d34:	2200      	movs	r2, #0
   17d36:	601a      	str	r2, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   17d38:	4a27      	ldr	r2, [pc, #156]	; (17dd8 <rtc_nrf_isr+0xb8>)
   17d3a:	681b      	ldr	r3, [r3, #0]
   17d3c:	6813      	ldr	r3, [r2, #0]
   17d3e:	3301      	adds	r3, #1
   17d40:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17d42:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   17d46:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   17d48:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   17d4c:	03d2      	lsls	r2, r2, #15
   17d4e:	d52c      	bpl.n	17daa <rtc_nrf_isr+0x8a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17d50:	f3bf 8f5b 	dmb	ish
   17d54:	4a21      	ldr	r2, [pc, #132]	; (17ddc <rtc_nrf_isr+0xbc>)
   17d56:	e852 1f00 	ldrex	r1, [r2]
   17d5a:	f021 0001 	bic.w	r0, r1, #1
   17d5e:	e842 0500 	strex	r5, r0, [r2]
   17d62:	2d00      	cmp	r5, #0
   17d64:	d1f7      	bne.n	17d56 <rtc_nrf_isr+0x36>
   17d66:	f3bf 8f5b 	dmb	ish
   17d6a:	4a1d      	ldr	r2, [pc, #116]	; (17de0 <rtc_nrf_isr+0xc0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   17d6c:	b909      	cbnz	r1, 17d72 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17d6e:	6811      	ldr	r1, [r2, #0]
		if (result) {
   17d70:	b1d9      	cbz	r1, 17daa <rtc_nrf_isr+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   17d72:	2500      	movs	r5, #0
   17d74:	6015      	str	r5, [r2, #0]
   17d76:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17d78:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   17d7c:	f7ff ff04 	bl	17b88 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17d80:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   17d84:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   17d86:	4b17      	ldr	r3, [pc, #92]	; (17de4 <rtc_nrf_isr+0xc4>)
   17d88:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   17d8c:	4549      	cmp	r1, r9
   17d8e:	bf08      	it	eq
   17d90:	4540      	cmpeq	r0, r8
   17d92:	d20f      	bcs.n	17db4 <rtc_nrf_isr+0x94>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   17d94:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17d96:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   17d9a:	b141      	cbz	r1, 17dae <rtc_nrf_isr+0x8e>
			handler(chan, expire_time, user_context);
   17d9c:	f8cd a000 	str.w	sl, [sp]
   17da0:	4642      	mov	r2, r8
   17da2:	464b      	mov	r3, r9
   17da4:	2000      	movs	r0, #0
   17da6:	4788      	blx	r1
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   17da8:	e001      	b.n	17dae <rtc_nrf_isr+0x8e>
   17daa:	f383 8810 	msr	PRIMASK, r3
		process_channel(chan);
	}
}
   17dae:	b002      	add	sp, #8
   17db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   17db4:	f04f 36ff 	mov.w	r6, #4294967295
   17db8:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
   17dbc:	e9d3 1a00 	ldrd	r1, sl, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   17dc0:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
   17dc4:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   17dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   17dca:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   17dce:	e7e2      	b.n	17d96 <rtc_nrf_isr+0x76>
   17dd0:	40011000 	.word	0x40011000
   17dd4:	40011104 	.word	0x40011104
   17dd8:	20001f30 	.word	0x20001f30
   17ddc:	20001f28 	.word	0x20001f28
   17de0:	40011140 	.word	0x40011140
   17de4:	20001a28 	.word	0x20001a28

00017de8 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   17de8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   17dea:	4b1a      	ldr	r3, [pc, #104]	; (17e54 <sys_clock_driver_init+0x6c>)
    p_reg->PRESCALER = val;
   17dec:	4d1a      	ldr	r5, [pc, #104]	; (17e58 <sys_clock_driver_init+0x70>)
   17dee:	2400      	movs	r4, #0
   17df0:	f04f 30ff 	mov.w	r0, #4294967295
   17df4:	f04f 31ff 	mov.w	r1, #4294967295
   17df8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   17dfc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   17e00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   17e04:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17e08:	4b14      	ldr	r3, [pc, #80]	; (17e5c <sys_clock_driver_init+0x74>)
   17e0a:	2602      	movs	r6, #2
   17e0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   17e10:	2101      	movs	r1, #1
   17e12:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   17e16:	2011      	movs	r0, #17
   17e18:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   17e1c:	4622      	mov	r2, r4
   17e1e:	f7f9 fc11 	bl	11644 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   17e22:	2011      	movs	r0, #17
   17e24:	f7f9 fbdc 	bl	115e0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   17e28:	4a0d      	ldr	r2, [pc, #52]	; (17e60 <sys_clock_driver_init+0x78>)
    p_reg->INTENSET = mask;
   17e2a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   17e2e:	2301      	movs	r3, #1
   17e30:	6013      	str	r3, [r2, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   17e32:	4a0c      	ldr	r2, [pc, #48]	; (17e64 <sys_clock_driver_init+0x7c>)
   17e34:	602b      	str	r3, [r5, #0]
   17e36:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   17e38:	4b0b      	ldr	r3, [pc, #44]	; (17e68 <sys_clock_driver_init+0x80>)
   17e3a:	4a0c      	ldr	r2, [pc, #48]	; (17e6c <sys_clock_driver_init+0x84>)
   17e3c:	9300      	str	r3, [sp, #0]
   17e3e:	9401      	str	r4, [sp, #4]
   17e40:	2300      	movs	r3, #0
   17e42:	4620      	mov	r0, r4
   17e44:	f7ff fec2 	bl	17bcc <compare_set>

	z_nrf_clock_control_lf_on(mode);
   17e48:	4630      	mov	r0, r6
   17e4a:	f7fe fdf9 	bl	16a40 <z_nrf_clock_control_lf_on>

	return 0;
}
   17e4e:	4620      	mov	r0, r4
   17e50:	b002      	add	sp, #8
   17e52:	bd70      	pop	{r4, r5, r6, pc}
   17e54:	20001a28 	.word	0x20001a28
   17e58:	40011000 	.word	0x40011000
   17e5c:	e000e100 	.word	0xe000e100
   17e60:	40011008 	.word	0x40011008
   17e64:	20001f2c 	.word	0x20001f2c
   17e68:	00017a65 	.word	0x00017a65
   17e6c:	007fffff 	.word	0x007fffff

00017e70 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   17e70:	4b14      	ldr	r3, [pc, #80]	; (17ec4 <sys_clock_set_timeout+0x54>)
{
   17e72:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   17e74:	f1b0 3fff 	cmp.w	r0, #4294967295
   17e78:	bf08      	it	eq
   17e7a:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   17e7c:	1e44      	subs	r4, r0, #1
   17e7e:	2c00      	cmp	r4, #0
   17e80:	dd1e      	ble.n	17ec0 <sys_clock_set_timeout+0x50>
   17e82:	429c      	cmp	r4, r3
   17e84:	bfa8      	it	ge
   17e86:	461c      	movge	r4, r3

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   17e88:	f7ff fe7e 	bl	17b88 <z_nrf_rtc_timer_read>
   17e8c:	4b0e      	ldr	r3, [pc, #56]	; (17ec8 <sys_clock_set_timeout+0x58>)
		cyc = MAX_CYCLES;
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   17e8e:	490f      	ldr	r1, [pc, #60]	; (17ecc <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   17e90:	e9d3 2300 	ldrd	r2, r3, [r3]
   17e94:	1a80      	subs	r0, r0, r2
		ticks = 0;
   17e96:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   17e9a:	bf28      	it	cs
   17e9c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   17e9e:	3001      	adds	r0, #1
   17ea0:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   17ea2:	4808      	ldr	r0, [pc, #32]	; (17ec4 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   17ea4:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   17ea6:	4284      	cmp	r4, r0
   17ea8:	bf28      	it	cs
   17eaa:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   17eac:	1912      	adds	r2, r2, r4
   17eae:	f04f 0000 	mov.w	r0, #0
   17eb2:	9001      	str	r0, [sp, #4]
   17eb4:	f143 0300 	adc.w	r3, r3, #0
   17eb8:	f7ff fe88 	bl	17bcc <compare_set>
}
   17ebc:	b002      	add	sp, #8
   17ebe:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   17ec0:	2400      	movs	r4, #0
   17ec2:	e7e1      	b.n	17e88 <sys_clock_set_timeout+0x18>
   17ec4:	007fffff 	.word	0x007fffff
   17ec8:	20001a38 	.word	0x20001a38
   17ecc:	00017a65 	.word	0x00017a65

00017ed0 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
   17ed0:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   17ed2:	f7ff fe59 	bl	17b88 <z_nrf_rtc_timer_read>
   17ed6:	4b02      	ldr	r3, [pc, #8]	; (17ee0 <sys_clock_elapsed+0x10>)
   17ed8:	681b      	ldr	r3, [r3, #0]
}
   17eda:	1ac0      	subs	r0, r0, r3
   17edc:	bd08      	pop	{r3, pc}
   17ede:	bf00      	nop
   17ee0:	20001a38 	.word	0x20001a38

00017ee4 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   17ee4:	4602      	mov	r2, r0
   17ee6:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   17ee8:	4801      	ldr	r0, [pc, #4]	; (17ef0 <multithreading_lock_acquire+0xc>)
   17eea:	f001 bd3d 	b.w	19968 <z_impl_k_mutex_lock>
   17eee:	bf00      	nop
   17ef0:	20000648 	.word	0x20000648

00017ef4 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   17ef4:	4801      	ldr	r0, [pc, #4]	; (17efc <multithreading_lock_release+0x8>)
   17ef6:	f001 be37 	b.w	19b68 <z_impl_k_mutex_unlock>
   17efa:	bf00      	nop
   17efc:	20000648 	.word	0x20000648

00017f00 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   17f00:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   17f02:	4804      	ldr	r0, [pc, #16]	; (17f14 <hci_driver_init+0x14>)
   17f04:	f7fa fff2 	bl	12eec <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   17f08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   17f0c:	4802      	ldr	r0, [pc, #8]	; (17f18 <hci_driver_init+0x18>)
   17f0e:	f7eb bef7 	b.w	3d00 <sdc_init>
   17f12:	bf00      	nop
   17f14:	00021430 	.word	0x00021430
   17f18:	000206b1 	.word	0x000206b1

00017f1c <rand_prio_low_vector_get_blocking>:
{
   17f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   17f1e:	4b16      	ldr	r3, [pc, #88]	; (17f78 <rand_prio_low_vector_get_blocking+0x5c>)
{
   17f20:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   17f22:	681e      	ldr	r6, [r3, #0]
   17f24:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   17f26:	68b7      	ldr	r7, [r6, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   17f28:	683b      	ldr	r3, [r7, #0]
   17f2a:	b963      	cbnz	r3, 17f46 <rand_prio_low_vector_get_blocking+0x2a>
   17f2c:	4913      	ldr	r1, [pc, #76]	; (17f7c <rand_prio_low_vector_get_blocking+0x60>)
   17f2e:	4a14      	ldr	r2, [pc, #80]	; (17f80 <rand_prio_low_vector_get_blocking+0x64>)
   17f30:	4814      	ldr	r0, [pc, #80]	; (17f84 <rand_prio_low_vector_get_blocking+0x68>)
   17f32:	234b      	movs	r3, #75	; 0x4b
   17f34:	f005 fc3e 	bl	1d7b4 <printk>
   17f38:	4813      	ldr	r0, [pc, #76]	; (17f88 <rand_prio_low_vector_get_blocking+0x6c>)
   17f3a:	f005 fc3b 	bl	1d7b4 <printk>
   17f3e:	4810      	ldr	r0, [pc, #64]	; (17f80 <rand_prio_low_vector_get_blocking+0x64>)
   17f40:	214b      	movs	r1, #75	; 0x4b
   17f42:	f005 fe91 	bl	1dc68 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   17f46:	683b      	ldr	r3, [r7, #0]
   17f48:	462a      	mov	r2, r5
   17f4a:	4621      	mov	r1, r4
   17f4c:	4630      	mov	r0, r6
   17f4e:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   17f50:	b180      	cbz	r0, 17f74 <rand_prio_low_vector_get_blocking+0x58>
   17f52:	490e      	ldr	r1, [pc, #56]	; (17f8c <rand_prio_low_vector_get_blocking+0x70>)
   17f54:	4a0e      	ldr	r2, [pc, #56]	; (17f90 <rand_prio_low_vector_get_blocking+0x74>)
   17f56:	480b      	ldr	r0, [pc, #44]	; (17f84 <rand_prio_low_vector_get_blocking+0x68>)
   17f58:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   17f5c:	f005 fc2a 	bl	1d7b4 <printk>
   17f60:	480c      	ldr	r0, [pc, #48]	; (17f94 <rand_prio_low_vector_get_blocking+0x78>)
   17f62:	f005 fc27 	bl	1d7b4 <printk>
}
   17f66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   17f6a:	4809      	ldr	r0, [pc, #36]	; (17f90 <rand_prio_low_vector_get_blocking+0x74>)
   17f6c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
   17f70:	f005 be7a 	b.w	1dc68 <assert_post_action>
}
   17f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17f76:	bf00      	nop
   17f78:	20001f34 	.word	0x20001f34
   17f7c:	000227f7 	.word	0x000227f7
   17f80:	000227ca 	.word	0x000227ca
   17f84:	00021650 	.word	0x00021650
   17f88:	00022817 	.word	0x00022817
   17f8c:	00022080 	.word	0x00022080
   17f90:	0002283d 	.word	0x0002283d
   17f94:	00022876 	.word	0x00022876

00017f98 <rand_prio_high_vector_get>:
{
   17f98:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   17f9a:	4b11      	ldr	r3, [pc, #68]	; (17fe0 <rand_prio_high_vector_get+0x48>)
{
   17f9c:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   17f9e:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   17fa0:	6883      	ldr	r3, [r0, #8]
   17fa2:	685d      	ldr	r5, [r3, #4]
   17fa4:	460a      	mov	r2, r1
   17fa6:	b1bd      	cbz	r5, 17fd8 <rand_prio_high_vector_get+0x40>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   17fa8:	4621      	mov	r1, r4
   17faa:	2300      	movs	r3, #0
   17fac:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   17fae:	1e04      	subs	r4, r0, #0
   17fb0:	da0e      	bge.n	17fd0 <rand_prio_high_vector_get+0x38>
   17fb2:	490c      	ldr	r1, [pc, #48]	; (17fe4 <rand_prio_high_vector_get+0x4c>)
   17fb4:	4a0c      	ldr	r2, [pc, #48]	; (17fe8 <rand_prio_high_vector_get+0x50>)
   17fb6:	480d      	ldr	r0, [pc, #52]	; (17fec <rand_prio_high_vector_get+0x54>)
   17fb8:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   17fbc:	f005 fbfa 	bl	1d7b4 <printk>
   17fc0:	480b      	ldr	r0, [pc, #44]	; (17ff0 <rand_prio_high_vector_get+0x58>)
   17fc2:	f005 fbf7 	bl	1d7b4 <printk>
   17fc6:	4808      	ldr	r0, [pc, #32]	; (17fe8 <rand_prio_high_vector_get+0x50>)
   17fc8:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
   17fcc:	f005 fe4c 	bl	1dc68 <assert_post_action>
	return ret >= 0 ? ret : 0;
   17fd0:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   17fd4:	b2c0      	uxtb	r0, r0
   17fd6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   17fd8:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17fdc:	e7e9      	b.n	17fb2 <rand_prio_high_vector_get+0x1a>
   17fde:	bf00      	nop
   17fe0:	20001f34 	.word	0x20001f34
   17fe4:	000228b0 	.word	0x000228b0
   17fe8:	0002283d 	.word	0x0002283d
   17fec:	00021650 	.word	0x00021650
   17ff0:	000228b9 	.word	0x000228b9

00017ff4 <hci_driver_open>:
{
   17ff4:	b530      	push	{r4, r5, lr}
   17ff6:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17ff8:	2200      	movs	r2, #0
   17ffa:	2300      	movs	r3, #0
   17ffc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   18000:	2300      	movs	r3, #0
   18002:	f06f 0209 	mvn.w	r2, #9
   18006:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1800a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1800e:	9300      	str	r3, [sp, #0]
   18010:	4946      	ldr	r1, [pc, #280]	; (1812c <hci_driver_open+0x138>)
   18012:	4b47      	ldr	r3, [pc, #284]	; (18130 <hci_driver_open+0x13c>)
   18014:	4847      	ldr	r0, [pc, #284]	; (18134 <hci_driver_open+0x140>)
   18016:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1801a:	f001 fb75 	bl	19708 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1801e:	4946      	ldr	r1, [pc, #280]	; (18138 <hci_driver_open+0x144>)
   18020:	4844      	ldr	r0, [pc, #272]	; (18134 <hci_driver_open+0x140>)
   18022:	f008 fba4 	bl	2076e <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   18026:	a80b      	add	r0, sp, #44	; 0x2c
   18028:	f7eb fdda 	bl	3be0 <sdc_build_revision_get>
			err = sdc_support_scan();
   1802c:	f7eb ff18 	bl	3e60 <sdc_support_scan>
			if (err) {
   18030:	b110      	cbz	r0, 18038 <hci_driver_open+0x44>
		return -err;
   18032:	2086      	movs	r0, #134	; 0x86
}
   18034:	b011      	add	sp, #68	; 0x44
   18036:	bd30      	pop	{r4, r5, pc}
		err = sdc_support_master();
   18038:	f7eb ff02 	bl	3e40 <sdc_support_master>
		if (err) {
   1803c:	2800      	cmp	r0, #0
   1803e:	d1f8      	bne.n	18032 <hci_driver_open+0x3e>
		err = sdc_support_dle();
   18040:	f7eb fede 	bl	3e00 <sdc_support_dle>
		if (err) {
   18044:	2800      	cmp	r0, #0
   18046:	d1f4      	bne.n	18032 <hci_driver_open+0x3e>
		err = sdc_support_le_2m_phy();
   18048:	f7eb feea 	bl	3e20 <sdc_support_le_2m_phy>
		if (err) {
   1804c:	4605      	mov	r5, r0
   1804e:	2800      	cmp	r0, #0
   18050:	d1ef      	bne.n	18032 <hci_driver_open+0x3e>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18052:	ac08      	add	r4, sp, #32
	cfg.master_count.count = SDC_MASTER_COUNT;
   18054:	2101      	movs	r1, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18056:	4622      	mov	r2, r4
	cfg.master_count.count = SDC_MASTER_COUNT;
   18058:	f88d 1020 	strb.w	r1, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1805c:	f7eb fdce 	bl	3bfc <sdc_cfg_set>
	if (required_memory < 0) {
   18060:	2800      	cmp	r0, #0
   18062:	dbe7      	blt.n	18034 <hci_driver_open+0x40>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18064:	4622      	mov	r2, r4
   18066:	2102      	movs	r1, #2
   18068:	4628      	mov	r0, r5
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1806a:	f88d 5020 	strb.w	r5, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1806e:	f7eb fdc5 	bl	3bfc <sdc_cfg_set>
	if (required_memory < 0) {
   18072:	2800      	cmp	r0, #0
   18074:	dbde      	blt.n	18034 <hci_driver_open+0x40>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   18076:	4b31      	ldr	r3, [pc, #196]	; (1813c <hci_driver_open+0x148>)
   18078:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1807a:	4622      	mov	r2, r4
   1807c:	2103      	movs	r1, #3
   1807e:	4628      	mov	r0, r5
   18080:	f7eb fdbc 	bl	3bfc <sdc_cfg_set>
	if (required_memory < 0) {
   18084:	2800      	cmp	r0, #0
   18086:	dbd5      	blt.n	18034 <hci_driver_open+0x40>
	cfg.event_length.event_length_us =
   18088:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1808c:	4622      	mov	r2, r4
   1808e:	2104      	movs	r1, #4
   18090:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   18092:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18094:	f7eb fdb2 	bl	3bfc <sdc_cfg_set>
	if (required_memory < 0) {
   18098:	2800      	cmp	r0, #0
   1809a:	dbcb      	blt.n	18034 <hci_driver_open+0x40>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1809c:	4622      	mov	r2, r4
   1809e:	2105      	movs	r1, #5
   180a0:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   180a2:	f88d 5020 	strb.w	r5, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   180a6:	f7eb fda9 	bl	3bfc <sdc_cfg_set>
	if (required_memory < 0) {
   180aa:	2800      	cmp	r0, #0
   180ac:	dbc2      	blt.n	18034 <hci_driver_open+0x40>
		cfg.scan_buffer_cfg.count = CONFIG_SDC_SCAN_BUFFER_COUNT;
   180ae:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   180b0:	4622      	mov	r2, r4
   180b2:	2106      	movs	r1, #6
   180b4:	4628      	mov	r0, r5
		cfg.scan_buffer_cfg.count = CONFIG_SDC_SCAN_BUFFER_COUNT;
   180b6:	f88d 3020 	strb.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   180ba:	f7eb fd9f 	bl	3bfc <sdc_cfg_set>
		if (required_memory < 0) {
   180be:	2800      	cmp	r0, #0
   180c0:	dbb8      	blt.n	18034 <hci_driver_open+0x40>
	if (required_memory > sizeof(sdc_mempool)) {
   180c2:	f240 4386 	movw	r3, #1158	; 0x486
   180c6:	4298      	cmp	r0, r3
   180c8:	dd08      	ble.n	180dc <hci_driver_open+0xe8>
		k_panic();
   180ca:	4040      	eors	r0, r0
   180cc:	f380 8811 	msr	BASEPRI, r0
   180d0:	f04f 0004 	mov.w	r0, #4
   180d4:	df02      	svc	2
		return -ENOMEM;
   180d6:	f06f 000b 	mvn.w	r0, #11
   180da:	e7ab      	b.n	18034 <hci_driver_open+0x40>
   180dc:	4818      	ldr	r0, [pc, #96]	; (18140 <hci_driver_open+0x14c>)
   180de:	f000 ff53 	bl	18f88 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   180e2:	4b18      	ldr	r3, [pc, #96]	; (18144 <hci_driver_open+0x150>)
   180e4:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   180e6:	b1e8      	cbz	r0, 18124 <hci_driver_open+0x130>
	sdc_rand_source_t rand_functions = {
   180e8:	4b17      	ldr	r3, [pc, #92]	; (18148 <hci_driver_open+0x154>)
   180ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   180ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   180f2:	4620      	mov	r0, r4
   180f4:	f7eb ff16 	bl	3f24 <sdc_rand_source_register>
	if (err) {
   180f8:	b988      	cbnz	r0, 1811e <hci_driver_open+0x12a>
	err = MULTITHREADING_LOCK_ACQUIRE();
   180fa:	f04f 30ff 	mov.w	r0, #4294967295
   180fe:	f04f 31ff 	mov.w	r1, #4294967295
   18102:	f7ff feef 	bl	17ee4 <multithreading_lock_acquire>
	if (!err) {
   18106:	4604      	mov	r4, r0
   18108:	b930      	cbnz	r0, 18118 <hci_driver_open+0x124>
		err = sdc_enable(host_signal, sdc_mempool);
   1810a:	4910      	ldr	r1, [pc, #64]	; (1814c <hci_driver_open+0x158>)
   1810c:	4810      	ldr	r0, [pc, #64]	; (18150 <hci_driver_open+0x15c>)
   1810e:	f7eb fdcf 	bl	3cb0 <sdc_enable>
   18112:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   18114:	f7ff feee 	bl	17ef4 <multithreading_lock_release>
	if (err < 0) {
   18118:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1811c:	e78a      	b.n	18034 <hci_driver_open+0x40>
		return -EINVAL;
   1811e:	f06f 0015 	mvn.w	r0, #21
   18122:	e787      	b.n	18034 <hci_driver_open+0x40>
		return -ENODEV;
   18124:	f06f 0012 	mvn.w	r0, #18
   18128:	e784      	b.n	18034 <hci_driver_open+0x40>
   1812a:	bf00      	nop
   1812c:	20003440 	.word	0x20003440
   18130:	00018155 	.word	0x00018155
   18134:	20001a40 	.word	0x20001a40
   18138:	000228fd 	.word	0x000228fd
   1813c:	02031b1b 	.word	0x02031b1b
   18140:	0002278a 	.word	0x0002278a
   18144:	20001f34 	.word	0x20001f34
   18148:	00020fe0 	.word	0x00020fe0
   1814c:	2000210f 	.word	0x2000210f
   18150:	00018235 	.word	0x00018235

00018154 <recv_thread>:
{
   18154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool received_data = false;
   18156:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   18158:	4f34      	ldr	r7, [pc, #208]	; (1822c <recv_thread+0xd8>)
		errcode = hci_internal_evt_get(p_hci_buffer);
   1815a:	4c35      	ldr	r4, [pc, #212]	; (18230 <recv_thread+0xdc>)
	bool received_evt = false;
   1815c:	462e      	mov	r6, r5
		if (!received_evt && !received_data) {
   1815e:	b93e      	cbnz	r6, 18170 <recv_thread+0x1c>
   18160:	b935      	cbnz	r5, 18170 <recv_thread+0x1c>
   18162:	f04f 32ff 	mov.w	r2, #4294967295
   18166:	f04f 33ff 	mov.w	r3, #4294967295
   1816a:	4638      	mov	r0, r7
   1816c:	f001 ff6c 	bl	1a048 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   18170:	f04f 30ff 	mov.w	r0, #4294967295
   18174:	f04f 31ff 	mov.w	r1, #4294967295
   18178:	f7ff feb4 	bl	17ee4 <multithreading_lock_acquire>
	if (!errcode) {
   1817c:	b158      	cbz	r0, 18196 <recv_thread+0x42>
		return false;
   1817e:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   18180:	f04f 30ff 	mov.w	r0, #4294967295
   18184:	f04f 31ff 	mov.w	r1, #4294967295
   18188:	f7ff feac 	bl	17ee4 <multithreading_lock_acquire>
	if (!errcode) {
   1818c:	b380      	cbz	r0, 181f0 <recv_thread+0x9c>
		return false;
   1818e:	2500      	movs	r5, #0
	z_impl_k_yield();
   18190:	f003 fc80 	bl	1ba94 <z_impl_k_yield>
}
   18194:	e7e3      	b.n	1815e <recv_thread+0xa>
		errcode = hci_internal_evt_get(p_hci_buffer);
   18196:	4826      	ldr	r0, [pc, #152]	; (18230 <recv_thread+0xdc>)
   18198:	f000 fb86 	bl	188a8 <hci_internal_evt_get>
   1819c:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1819e:	f7ff fea9 	bl	17ef4 <multithreading_lock_release>
	if (errcode) {
   181a2:	2d00      	cmp	r5, #0
   181a4:	d1eb      	bne.n	1817e <recv_thread+0x2a>
	switch (hdr->evt) {
   181a6:	7820      	ldrb	r0, [r4, #0]
   181a8:	283e      	cmp	r0, #62	; 0x3e
   181aa:	d007      	beq.n	181bc <recv_thread+0x68>
   181ac:	28ff      	cmp	r0, #255	; 0xff
   181ae:	d01c      	beq.n	181ea <recv_thread+0x96>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   181b0:	f04f 32ff 	mov.w	r2, #4294967295
   181b4:	f04f 33ff 	mov.w	r3, #4294967295
   181b8:	2100      	movs	r1, #0
   181ba:	e007      	b.n	181cc <recv_thread+0x78>
		switch (me->subevent) {
   181bc:	78a3      	ldrb	r3, [r4, #2]
   181be:	2b02      	cmp	r3, #2
   181c0:	d001      	beq.n	181c6 <recv_thread+0x72>
   181c2:	2b0d      	cmp	r3, #13
		switch (subevent) {
   181c4:	d1f4      	bne.n	181b0 <recv_thread+0x5c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   181c6:	2200      	movs	r2, #0
   181c8:	2300      	movs	r3, #0
   181ca:	2101      	movs	r1, #1
   181cc:	f7f9 ffb0 	bl	12130 <bt_buf_get_evt>
	if (!evt_buf) {
   181d0:	4605      	mov	r5, r0
   181d2:	b140      	cbz	r0, 181e6 <recv_thread+0x92>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   181d4:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   181d6:	4621      	mov	r1, r4
   181d8:	3202      	adds	r2, #2
   181da:	3008      	adds	r0, #8
   181dc:	f007 fe10 	bl	1fe00 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   181e0:	4628      	mov	r0, r5
   181e2:	f7fa fe61 	bl	12ea8 <bt_recv>
	return true;
   181e6:	2601      	movs	r6, #1
   181e8:	e7ca      	b.n	18180 <recv_thread+0x2c>
		switch (subevent) {
   181ea:	78a3      	ldrb	r3, [r4, #2]
   181ec:	2b80      	cmp	r3, #128	; 0x80
   181ee:	e7e9      	b.n	181c4 <recv_thread+0x70>
		errcode = sdc_hci_data_get(p_hci_buffer);
   181f0:	480f      	ldr	r0, [pc, #60]	; (18230 <recv_thread+0xdc>)
   181f2:	f7f4 fdef 	bl	cdd4 <sdc_hci_data_get>
   181f6:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   181f8:	f7ff fe7c 	bl	17ef4 <multithreading_lock_release>
	if (errcode) {
   181fc:	2d00      	cmp	r5, #0
   181fe:	d1c6      	bne.n	1818e <recv_thread+0x3a>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   18200:	f04f 32ff 	mov.w	r2, #4294967295
   18204:	f04f 33ff 	mov.w	r3, #4294967295
   18208:	2003      	movs	r0, #3
   1820a:	f7f9 ff47 	bl	1209c <bt_buf_get_rx>
	if (!data_buf) {
   1820e:	4605      	mov	r5, r0
   18210:	b908      	cbnz	r0, 18216 <recv_thread+0xc2>
	return true;
   18212:	2501      	movs	r5, #1
   18214:	e7bc      	b.n	18190 <recv_thread+0x3c>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   18216:	8862      	ldrh	r2, [r4, #2]
   18218:	4621      	mov	r1, r4
   1821a:	3204      	adds	r2, #4
   1821c:	3008      	adds	r0, #8
   1821e:	f007 fdef 	bl	1fe00 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   18222:	4628      	mov	r0, r5
   18224:	f7fa fe40 	bl	12ea8 <bt_recv>
   18228:	e7f3      	b.n	18212 <recv_thread+0xbe>
   1822a:	bf00      	nop
   1822c:	20000688 	.word	0x20000688
   18230:	200020c9 	.word	0x200020c9

00018234 <host_signal>:
	z_impl_k_sem_give(sem);
   18234:	4801      	ldr	r0, [pc, #4]	; (1823c <host_signal+0x8>)
   18236:	f001 bec3 	b.w	19fc0 <z_impl_k_sem_give>
   1823a:	bf00      	nop
   1823c:	20000688 	.word	0x20000688

00018240 <hci_driver_send>:
{
   18240:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   18242:	8983      	ldrh	r3, [r0, #12]
{
   18244:	4605      	mov	r5, r0
	if (!buf->len) {
   18246:	b383      	cbz	r3, 182aa <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   18248:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1824a:	b1ab      	cbz	r3, 18278 <hci_driver_send+0x38>
   1824c:	2b02      	cmp	r3, #2
   1824e:	d12c      	bne.n	182aa <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   18250:	f04f 30ff 	mov.w	r0, #4294967295
   18254:	f04f 31ff 	mov.w	r1, #4294967295
   18258:	f7ff fe44 	bl	17ee4 <multithreading_lock_acquire>
	if (!errcode) {
   1825c:	4604      	mov	r4, r0
   1825e:	b948      	cbnz	r0, 18274 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   18260:	68a8      	ldr	r0, [r5, #8]
   18262:	f7f4 fdc4 	bl	cdee <sdc_hci_data_put>
   18266:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   18268:	f7ff fe44 	bl	17ef4 <multithreading_lock_release>
		if (errcode) {
   1826c:	b1c4      	cbz	r4, 182a0 <hci_driver_send+0x60>
   1826e:	4810      	ldr	r0, [pc, #64]	; (182b0 <hci_driver_send+0x70>)
   18270:	f001 fea6 	bl	19fc0 <z_impl_k_sem_give>
}
   18274:	4620      	mov	r0, r4
   18276:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   18278:	f04f 30ff 	mov.w	r0, #4294967295
   1827c:	f04f 31ff 	mov.w	r1, #4294967295
   18280:	f7ff fe30 	bl	17ee4 <multithreading_lock_acquire>
	if (!errcode) {
   18284:	4604      	mov	r4, r0
   18286:	2800      	cmp	r0, #0
   18288:	d1f4      	bne.n	18274 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1828a:	68a8      	ldr	r0, [r5, #8]
   1828c:	f000 f840 	bl	18310 <hci_internal_cmd_put>
   18290:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   18292:	f7ff fe2f 	bl	17ef4 <multithreading_lock_release>
	if (errcode) {
   18296:	2c00      	cmp	r4, #0
   18298:	d1ec      	bne.n	18274 <hci_driver_send+0x34>
   1829a:	4805      	ldr	r0, [pc, #20]	; (182b0 <hci_driver_send+0x70>)
   1829c:	f001 fe90 	bl	19fc0 <z_impl_k_sem_give>
		net_buf_unref(buf);
   182a0:	4628      	mov	r0, r5
   182a2:	f7fe f8ef 	bl	16484 <net_buf_unref>
   182a6:	2400      	movs	r4, #0
   182a8:	e7e4      	b.n	18274 <hci_driver_send+0x34>
	switch (type) {
   182aa:	f06f 0415 	mvn.w	r4, #21
   182ae:	e7e1      	b.n	18274 <hci_driver_send+0x34>
   182b0:	20000688 	.word	0x20000688

000182b4 <rand_prio_low_vector_get>:
{
   182b4:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   182b6:	4b11      	ldr	r3, [pc, #68]	; (182fc <rand_prio_low_vector_get+0x48>)
{
   182b8:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   182ba:	6818      	ldr	r0, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
   182bc:	6883      	ldr	r3, [r0, #8]
   182be:	685d      	ldr	r5, [r3, #4]
   182c0:	460a      	mov	r2, r1
   182c2:	b1bd      	cbz	r5, 182f4 <rand_prio_low_vector_get+0x40>
	return api->get_entropy_isr(dev, buffer, length, flags);
   182c4:	4621      	mov	r1, r4
   182c6:	2300      	movs	r3, #0
   182c8:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   182ca:	1e04      	subs	r4, r0, #0
   182cc:	da0e      	bge.n	182ec <rand_prio_low_vector_get+0x38>
   182ce:	490c      	ldr	r1, [pc, #48]	; (18300 <rand_prio_low_vector_get+0x4c>)
   182d0:	4a0c      	ldr	r2, [pc, #48]	; (18304 <rand_prio_low_vector_get+0x50>)
   182d2:	480d      	ldr	r0, [pc, #52]	; (18308 <rand_prio_low_vector_get+0x54>)
   182d4:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
   182d8:	f005 fa6c 	bl	1d7b4 <printk>
   182dc:	480b      	ldr	r0, [pc, #44]	; (1830c <rand_prio_low_vector_get+0x58>)
   182de:	f005 fa69 	bl	1d7b4 <printk>
   182e2:	4808      	ldr	r0, [pc, #32]	; (18304 <rand_prio_low_vector_get+0x50>)
   182e4:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
   182e8:	f005 fcbe 	bl	1dc68 <assert_post_action>
	return ret >= 0 ? ret : 0;
   182ec:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   182f0:	b2c0      	uxtb	r0, r0
   182f2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   182f4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   182f8:	e7e9      	b.n	182ce <rand_prio_low_vector_get+0x1a>
   182fa:	bf00      	nop
   182fc:	20001f34 	.word	0x20001f34
   18300:	000228b0 	.word	0x000228b0
   18304:	0002283d 	.word	0x0002283d
   18308:	00021650 	.word	0x00021650
   1830c:	00022904 	.word	0x00022904

00018310 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   18310:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   18312:	4cd7      	ldr	r4, [pc, #860]	; (18670 <hci_internal_cmd_put+0x360>)
   18314:	7823      	ldrb	r3, [r4, #0]
   18316:	2b00      	cmp	r3, #0
   18318:	f040 82b0 	bne.w	1887c <hci_internal_cmd_put+0x56c>
	return ((uint16_t)src[1] << 8) | src[0];
   1831c:	7843      	ldrb	r3, [r0, #1]
   1831e:	7805      	ldrb	r5, [r0, #0]
   18320:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   18324:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   18328:	b22e      	sxth	r6, r5
   1832a:	ea4f 2395 	mov.w	r3, r5, lsr #10
   1832e:	d209      	bcs.n	18344 <hci_internal_cmd_put+0x34>
   18330:	b15b      	cbz	r3, 1834a <hci_internal_cmd_put+0x3a>
   18332:	3b01      	subs	r3, #1
   18334:	2b07      	cmp	r3, #7
   18336:	d808      	bhi.n	1834a <hci_internal_cmd_put+0x3a>
   18338:	e8df f003 	tbb	[pc, r3]
   1833c:	5c28070a 	.word	0x5c28070a
   18340:	d0070707 	.word	0xd0070707
   18344:	2b3f      	cmp	r3, #63	; 0x3f
   18346:	f000 81fc 	beq.w	18742 <hci_internal_cmd_put+0x432>
   1834a:	2104      	movs	r1, #4
   1834c:	2001      	movs	r0, #1
   1834e:	e233      	b.n	187b8 <hci_internal_cmd_put+0x4a8>
	switch (opcode)	{
   18350:	f240 4306 	movw	r3, #1030	; 0x406
   18354:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18356:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1835a:	d005      	beq.n	18368 <hci_internal_cmd_put+0x58>
   1835c:	f240 431d 	movw	r3, #1053	; 0x41d
   18360:	429e      	cmp	r6, r3
   18362:	d010      	beq.n	18386 <hci_internal_cmd_put+0x76>
	switch (opcode)	{
   18364:	2001      	movs	r0, #1
   18366:	e001      	b.n	1836c <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   18368:	f7f4 fe87 	bl	d07a <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1836c:	230f      	movs	r3, #15
   1836e:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   18370:	2304      	movs	r3, #4
   18372:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   18374:	2301      	movs	r3, #1
	evt_data->status = status_code;
   18376:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   18378:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1837a:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1837e:	2301      	movs	r3, #1
   18380:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   18382:	2000      	movs	r0, #0
}
   18384:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   18386:	f7f4 fe7a 	bl	d07e <sdc_hci_cmd_lc_read_remote_version_information>
   1838a:	e7ef      	b.n	1836c <hci_internal_cmd_put+0x5c>
	switch (opcode)	{
   1838c:	f640 4363 	movw	r3, #3171	; 0xc63
   18390:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18392:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   18396:	d025      	beq.n	183e4 <hci_internal_cmd_put+0xd4>
   18398:	dc0f      	bgt.n	183ba <hci_internal_cmd_put+0xaa>
   1839a:	f640 4303 	movw	r3, #3075	; 0xc03
   1839e:	429e      	cmp	r6, r3
   183a0:	d018      	beq.n	183d4 <hci_internal_cmd_put+0xc4>
   183a2:	f640 432d 	movw	r3, #3117	; 0xc2d
   183a6:	429e      	cmp	r6, r3
   183a8:	d017      	beq.n	183da <hci_internal_cmd_put+0xca>
   183aa:	f640 4301 	movw	r3, #3073	; 0xc01
   183ae:	429e      	cmp	r6, r3
   183b0:	d1d8      	bne.n	18364 <hci_internal_cmd_put+0x54>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   183b2:	f7f4 fd38 	bl	ce26 <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   183b6:	2104      	movs	r1, #4
   183b8:	e08d      	b.n	184d6 <hci_internal_cmd_put+0x1c6>
	switch (opcode)	{
   183ba:	f640 437b 	movw	r3, #3195	; 0xc7b
   183be:	429e      	cmp	r6, r3
   183c0:	d013      	beq.n	183ea <hci_internal_cmd_put+0xda>
   183c2:	f640 437c 	movw	r3, #3196	; 0xc7c
   183c6:	429e      	cmp	r6, r3
   183c8:	d1cc      	bne.n	18364 <hci_internal_cmd_put+0x54>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   183ca:	49aa      	ldr	r1, [pc, #680]	; (18674 <hci_internal_cmd_put+0x364>)
   183cc:	f7f4 fd35 	bl	ce3a <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   183d0:	2106      	movs	r1, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   183d2:	e080      	b.n	184d6 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_cb_reset();
   183d4:	f7eb fe84 	bl	40e0 <sdc_hci_cmd_cb_reset>
   183d8:	e7ed      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   183da:	49a6      	ldr	r1, [pc, #664]	; (18674 <hci_internal_cmd_put+0x364>)
   183dc:	f7f4 fd21 	bl	ce22 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   183e0:	2107      	movs	r1, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   183e2:	e078      	b.n	184d6 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   183e4:	f7f4 fd24 	bl	ce30 <sdc_hci_cmd_cb_set_event_mask_page_2>
   183e8:	e7e5      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   183ea:	49a2      	ldr	r1, [pc, #648]	; (18674 <hci_internal_cmd_put+0x364>)
   183ec:	f7f4 fd17 	bl	ce1e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   183f0:	2108      	movs	r1, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   183f2:	e070      	b.n	184d6 <hci_internal_cmd_put+0x1c6>
	switch (opcode)	{
   183f4:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   183f8:	3e01      	subs	r6, #1
   183fa:	2e08      	cmp	r6, #8
   183fc:	d8b2      	bhi.n	18364 <hci_internal_cmd_put+0x54>
   183fe:	a301      	add	r3, pc, #4	; (adr r3, 18404 <hci_internal_cmd_put+0xf4>)
   18400:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   18404:	00018429 	.word	0x00018429
   18408:	00018433 	.word	0x00018433
   1840c:	000184a7 	.word	0x000184a7
   18410:	00018365 	.word	0x00018365
   18414:	00018365 	.word	0x00018365
   18418:	00018365 	.word	0x00018365
   1841c:	00018365 	.word	0x00018365
   18420:	00018365 	.word	0x00018365
   18424:	000184cf 	.word	0x000184cf
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   18428:	4892      	ldr	r0, [pc, #584]	; (18674 <hci_internal_cmd_put+0x364>)
   1842a:	f7f4 fddf 	bl	cfec <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1842e:	210c      	movs	r1, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   18430:	e051      	b.n	184d6 <hci_internal_cmd_put+0x1c6>
	memset(cmds, 0, sizeof(*cmds));
   18432:	4890      	ldr	r0, [pc, #576]	; (18674 <hci_internal_cmd_put+0x364>)
   18434:	222e      	movs	r2, #46	; 0x2e
   18436:	2100      	movs	r1, #0
   18438:	f008 fb25 	bl	20a86 <memset>
	cmds->hci_disconnect = 1;
   1843c:	2320      	movs	r3, #32
   1843e:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   18440:	2380      	movs	r3, #128	; 0x80
   18442:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   18444:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   18448:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1844a:	2304      	movs	r3, #4
   1844c:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1844e:	2328      	movs	r3, #40	; 0x28
   18450:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   18452:	2302      	movs	r3, #2
   18454:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   18456:	2304      	movs	r3, #4
   18458:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1845a:	2317      	movs	r3, #23
   1845c:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_parameters = 1;
   18460:	f06f 0303 	mvn.w	r3, #3
   18464:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   18468:	23ff      	movs	r3, #255	; 0xff
   1846a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   1846e:	2379      	movs	r3, #121	; 0x79
   18470:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   18474:	2330      	movs	r3, #48	; 0x30
   18476:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1847a:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   1847e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   18482:	2379      	movs	r3, #121	; 0x79
   18484:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   18488:	f06f 0301 	mvn.w	r3, #1
   1848c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   18490:	2301      	movs	r3, #1
   18492:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   18496:	2380      	movs	r3, #128	; 0x80
   18498:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1849c:	2304      	movs	r3, #4
   1849e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->read_supported_vs_commands = 1;
   184a2:	2144      	movs	r1, #68	; 0x44
   184a4:	e118      	b.n	186d8 <hci_internal_cmd_put+0x3c8>
	memset(features, 0, sizeof(*features));
   184a6:	4b73      	ldr	r3, [pc, #460]	; (18674 <hci_internal_cmd_put+0x364>)
   184a8:	2000      	movs	r0, #0
   184aa:	f8c4 0007 	str.w	r0, [r4, #7]
   184ae:	6058      	str	r0, [r3, #4]
	features->bdedr_not_supported = 1;
   184b0:	7ae3      	ldrb	r3, [r4, #11]
   184b2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   184b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   184ba:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   184bc:	210c      	movs	r1, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   184be:	230e      	movs	r3, #14
   184c0:	7063      	strb	r3, [r4, #1]
	evt_data->ncmd = 1;
   184c2:	2301      	movs	r3, #1
	evt_hdr->len = param_length;
   184c4:	70a1      	strb	r1, [r4, #2]
	evt_data->ncmd = 1;
   184c6:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   184c8:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   184ca:	71a0      	strb	r0, [r4, #6]
}
   184cc:	e757      	b.n	1837e <hci_internal_cmd_put+0x6e>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   184ce:	4869      	ldr	r0, [pc, #420]	; (18674 <hci_internal_cmd_put+0x364>)
   184d0:	f7f4 fd8a 	bl	cfe8 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   184d4:	210a      	movs	r1, #10
	if (!command_generates_command_complete_event(opcode) ||
   184d6:	2801      	cmp	r0, #1
   184d8:	d1f1      	bne.n	184be <hci_internal_cmd_put+0x1ae>
   184da:	e747      	b.n	1836c <hci_internal_cmd_put+0x5c>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   184dc:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   184e0:	3e01      	subs	r6, #1
   184e2:	3003      	adds	r0, #3
	switch (opcode)	{
   184e4:	2e4d      	cmp	r6, #77	; 0x4d
   184e6:	f63f af3d 	bhi.w	18364 <hci_internal_cmd_put+0x54>
   184ea:	a301      	add	r3, pc, #4	; (adr r3, 184f0 <hci_internal_cmd_put+0x1e0>)
   184ec:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   184f0:	00018629 	.word	0x00018629
   184f4:	0001862f 	.word	0x0001862f
   184f8:	00018637 	.word	0x00018637
   184fc:	00018365 	.word	0x00018365
   18500:	00018657 	.word	0x00018657
   18504:	00018365 	.word	0x00018365
   18508:	00018365 	.word	0x00018365
   1850c:	00018365 	.word	0x00018365
   18510:	00018365 	.word	0x00018365
   18514:	00018365 	.word	0x00018365
   18518:	0001865d 	.word	0x0001865d
   1851c:	00018663 	.word	0x00018663
   18520:	00018669 	.word	0x00018669
   18524:	00018679 	.word	0x00018679
   18528:	0001867f 	.word	0x0001867f
   1852c:	00018689 	.word	0x00018689
   18530:	0001868f 	.word	0x0001868f
   18534:	00018695 	.word	0x00018695
   18538:	0001869b 	.word	0x0001869b
   1853c:	000186a1 	.word	0x000186a1
   18540:	000186a7 	.word	0x000186a7
   18544:	000186b1 	.word	0x000186b1
   18548:	000186b7 	.word	0x000186b7
   1854c:	000186c1 	.word	0x000186c1
   18550:	000186c9 	.word	0x000186c9
   18554:	00018365 	.word	0x00018365
   18558:	00018365 	.word	0x00018365
   1855c:	000186cf 	.word	0x000186cf
   18560:	00018365 	.word	0x00018365
   18564:	00018365 	.word	0x00018365
   18568:	00018365 	.word	0x00018365
   1856c:	00018365 	.word	0x00018365
   18570:	00018365 	.word	0x00018365
   18574:	000186dd 	.word	0x000186dd
   18578:	000186e5 	.word	0x000186e5
   1857c:	000186ed 	.word	0x000186ed
   18580:	00018365 	.word	0x00018365
   18584:	00018365 	.word	0x00018365
   18588:	000186f3 	.word	0x000186f3
   1858c:	000186f9 	.word	0x000186f9
   18590:	000186ff 	.word	0x000186ff
   18594:	00018705 	.word	0x00018705
   18598:	00018365 	.word	0x00018365
   1859c:	00018365 	.word	0x00018365
   185a0:	0001870d 	.word	0x0001870d
   185a4:	00018713 	.word	0x00018713
   185a8:	00018719 	.word	0x00018719
   185ac:	00018721 	.word	0x00018721
   185b0:	00018729 	.word	0x00018729
   185b4:	0001872f 	.word	0x0001872f
   185b8:	00018365 	.word	0x00018365
   185bc:	00018365 	.word	0x00018365
   185c0:	00018365 	.word	0x00018365
   185c4:	00018365 	.word	0x00018365
   185c8:	00018365 	.word	0x00018365
   185cc:	00018365 	.word	0x00018365
   185d0:	00018365 	.word	0x00018365
   185d4:	00018365 	.word	0x00018365
   185d8:	00018365 	.word	0x00018365
   185dc:	00018365 	.word	0x00018365
   185e0:	00018365 	.word	0x00018365
   185e4:	00018365 	.word	0x00018365
   185e8:	00018365 	.word	0x00018365
   185ec:	00018365 	.word	0x00018365
   185f0:	00018365 	.word	0x00018365
   185f4:	00018365 	.word	0x00018365
   185f8:	00018365 	.word	0x00018365
   185fc:	00018365 	.word	0x00018365
   18600:	00018365 	.word	0x00018365
   18604:	00018365 	.word	0x00018365
   18608:	00018365 	.word	0x00018365
   1860c:	00018365 	.word	0x00018365
   18610:	00018365 	.word	0x00018365
   18614:	00018365 	.word	0x00018365
   18618:	00018735 	.word	0x00018735
   1861c:	00018365 	.word	0x00018365
   18620:	00018365 	.word	0x00018365
   18624:	0001873d 	.word	0x0001873d
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   18628:	f7f4 fd12 	bl	d050 <sdc_hci_cmd_le_set_event_mask>
   1862c:	e6c3      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1862e:	4811      	ldr	r0, [pc, #68]	; (18674 <hci_internal_cmd_put+0x364>)
   18630:	f7f4 fcf2 	bl	d018 <sdc_hci_cmd_le_read_buffer_size>
   18634:	e6d4      	b.n	183e0 <hci_internal_cmd_put+0xd0>
	memset(features, 0, sizeof(*features));
   18636:	4b0f      	ldr	r3, [pc, #60]	; (18674 <hci_internal_cmd_put+0x364>)
   18638:	2000      	movs	r0, #0
   1863a:	f8c4 0007 	str.w	r0, [r4, #7]
   1863e:	7118      	strb	r0, [r3, #4]
	features->le_encryption = 1;
   18640:	79e3      	ldrb	r3, [r4, #7]
   18642:	f063 030a 	orn	r3, r3, #10
   18646:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   18648:	7a23      	ldrb	r3, [r4, #8]
   1864a:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1864e:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   18652:	7223      	strb	r3, [r4, #8]
   18654:	e732      	b.n	184bc <hci_internal_cmd_put+0x1ac>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   18656:	f7f4 fd06 	bl	d066 <sdc_hci_cmd_le_set_random_address>
   1865a:	e6ac      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   1865c:	f7f4 fd09 	bl	d072 <sdc_hci_cmd_le_set_scan_params>
   18660:	e6a9      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   18662:	f7f4 fd04 	bl	d06e <sdc_hci_cmd_le_set_scan_enable>
   18666:	e6a6      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   18668:	f7f4 fccc 	bl	d004 <sdc_hci_cmd_le_create_conn>
   1866c:	e67e      	b.n	1836c <hci_internal_cmd_put+0x5c>
   1866e:	bf00      	nop
   18670:	20002595 	.word	0x20002595
   18674:	2000259c 	.word	0x2000259c
		return sdc_hci_cmd_le_create_conn_cancel();
   18678:	f7f4 fcc6 	bl	d008 <sdc_hci_cmd_le_create_conn_cancel>
   1867c:	e69b      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   1867e:	4889      	ldr	r0, [pc, #548]	; (188a4 <hci_internal_cmd_put+0x594>)
   18680:	f7f4 fcda 	bl	d038 <sdc_hci_cmd_le_read_white_list_size>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   18684:	2105      	movs	r1, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   18686:	e726      	b.n	184d6 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_clear_white_list();
   18688:	f7f4 fcb8 	bl	cffc <sdc_hci_cmd_le_clear_white_list>
   1868c:	e693      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   1868e:	f7f4 fcb1 	bl	cff4 <sdc_hci_cmd_le_add_device_to_white_list>
   18692:	e690      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   18694:	f7f4 fcd4 	bl	d040 <sdc_hci_cmd_le_remove_device_from_white_list>
   18698:	e68d      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   1869a:	f7f4 fcb1 	bl	d000 <sdc_hci_cmd_le_conn_update>
   1869e:	e665      	b.n	1836c <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   186a0:	f7f4 fcdb 	bl	d05a <sdc_hci_cmd_le_set_host_channel_classification>
   186a4:	e687      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   186a6:	497f      	ldr	r1, [pc, #508]	; (188a4 <hci_internal_cmd_put+0x594>)
   186a8:	f7f4 fcb8 	bl	d01c <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   186ac:	210b      	movs	r1, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   186ae:	e712      	b.n	184d6 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   186b0:	f7f4 fcba 	bl	d028 <sdc_hci_cmd_le_read_remote_features>
   186b4:	e65a      	b.n	1836c <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   186b6:	497b      	ldr	r1, [pc, #492]	; (188a4 <hci_internal_cmd_put+0x594>)
   186b8:	f7f4 fcaa 	bl	d010 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   186bc:	2114      	movs	r1, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   186be:	e70a      	b.n	184d6 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   186c0:	4878      	ldr	r0, [pc, #480]	; (188a4 <hci_internal_cmd_put+0x594>)
   186c2:	f7f4 fca7 	bl	d014 <sdc_hci_cmd_le_rand>
   186c6:	e6b2      	b.n	1842e <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   186c8:	f7f4 fca0 	bl	d00c <sdc_hci_cmd_le_enable_encryption>
   186cc:	e64e      	b.n	1836c <hci_internal_cmd_put+0x5c>
	*buf = states1;
   186ce:	2370      	movs	r3, #112	; 0x70
   186d0:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   186d2:	2340      	movs	r3, #64	; 0x40
   186d4:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   186d6:	210c      	movs	r1, #12
	cmds->read_supported_vs_commands = 1;
   186d8:	2000      	movs	r0, #0
   186da:	e6f0      	b.n	184be <hci_internal_cmd_put+0x1ae>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   186dc:	4971      	ldr	r1, [pc, #452]	; (188a4 <hci_internal_cmd_put+0x594>)
   186de:	f7f4 fcb3 	bl	d048 <sdc_hci_cmd_le_set_data_length>
   186e2:	e675      	b.n	183d0 <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   186e4:	486f      	ldr	r0, [pc, #444]	; (188a4 <hci_internal_cmd_put+0x594>)
   186e6:	f7f4 fca3 	bl	d030 <sdc_hci_cmd_le_read_suggested_default_data_length>
   186ea:	e681      	b.n	183f0 <hci_internal_cmd_put+0xe0>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   186ec:	f7f4 fcc3 	bl	d076 <sdc_hci_cmd_le_write_suggested_default_data_length>
   186f0:	e661      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   186f2:	f7f4 fc7d 	bl	cff0 <sdc_hci_cmd_le_add_device_to_resolving_list>
   186f6:	e65e      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   186f8:	f7f4 fca0 	bl	d03c <sdc_hci_cmd_le_remove_device_from_resolving_list>
   186fc:	e65b      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_clear_resolving_list();
   186fe:	f7f4 fc7b 	bl	cff8 <sdc_hci_cmd_le_clear_resolving_list>
   18702:	e658      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   18704:	4867      	ldr	r0, [pc, #412]	; (188a4 <hci_internal_cmd_put+0x594>)
   18706:	f7f4 fc91 	bl	d02c <sdc_hci_cmd_le_read_resolving_list_size>
   1870a:	e7bb      	b.n	18684 <hci_internal_cmd_put+0x374>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1870c:	f7f4 fc9a 	bl	d044 <sdc_hci_cmd_le_set_address_resolution_enable>
   18710:	e651      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   18712:	f7f4 fcaa 	bl	d06a <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   18716:	e64e      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   18718:	4862      	ldr	r0, [pc, #392]	; (188a4 <hci_internal_cmd_put+0x594>)
   1871a:	f7f4 fc81 	bl	d020 <sdc_hci_cmd_le_read_max_data_length>
   1871e:	e686      	b.n	1842e <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   18720:	4960      	ldr	r1, [pc, #384]	; (188a4 <hci_internal_cmd_put+0x594>)
   18722:	f7f4 fc7f 	bl	d024 <sdc_hci_cmd_le_read_phy>
   18726:	e663      	b.n	183f0 <hci_internal_cmd_put+0xe0>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   18728:	f7f4 fc90 	bl	d04c <sdc_hci_cmd_le_set_default_phy>
   1872c:	e643      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1872e:	f7f4 fc96 	bl	d05e <sdc_hci_cmd_le_set_phy>
   18732:	e61b      	b.n	1836c <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   18734:	485b      	ldr	r0, [pc, #364]	; (188a4 <hci_internal_cmd_put+0x594>)
   18736:	f7f4 fc7d 	bl	d034 <sdc_hci_cmd_le_read_transmit_power>
   1873a:	e649      	b.n	183d0 <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1873c:	f7f4 fc91 	bl	d062 <sdc_hci_cmd_le_set_privacy_mode>
   18740:	e639      	b.n	183b6 <hci_internal_cmd_put+0xa6>
	switch (opcode)	{
   18742:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   18746:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18748:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1874c:	d820      	bhi.n	18790 <hci_internal_cmd_put+0x480>
   1874e:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   18752:	f43f ae07 	beq.w	18364 <hci_internal_cmd_put+0x54>
   18756:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1875a:	3b01      	subs	r3, #1
   1875c:	2b09      	cmp	r3, #9
   1875e:	f63f ae01 	bhi.w	18364 <hci_internal_cmd_put+0x54>
   18762:	a201      	add	r2, pc, #4	; (adr r2, 18768 <hci_internal_cmd_put+0x458>)
   18764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18768:	000187b1 	.word	0x000187b1
   1876c:	000187df 	.word	0x000187df
   18770:	00018365 	.word	0x00018365
   18774:	00018365 	.word	0x00018365
   18778:	00018365 	.word	0x00018365
   1877c:	0001881f 	.word	0x0001881f
   18780:	00018365 	.word	0x00018365
   18784:	00018365 	.word	0x00018365
   18788:	0001880b 	.word	0x0001880b
   1878c:	00018815 	.word	0x00018815
   18790:	f505 7340 	add.w	r3, r5, #768	; 0x300
   18794:	b29b      	uxth	r3, r3
   18796:	2b05      	cmp	r3, #5
   18798:	f63f ade4 	bhi.w	18364 <hci_internal_cmd_put+0x54>
   1879c:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   187a0:	2b05      	cmp	r3, #5
   187a2:	f63f addf 	bhi.w	18364 <hci_internal_cmd_put+0x54>
   187a6:	e8df f003 	tbb	[pc, r3]
   187aa:	413e      	.short	0x413e
   187ac:	4d4a4744 	.word	0x4d4a4744
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   187b0:	483c      	ldr	r0, [pc, #240]	; (188a4 <hci_internal_cmd_put+0x594>)
   187b2:	f7eb fca9 	bl	4108 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   187b6:	2110      	movs	r1, #16
	switch (hci_opcode) {
   187b8:	f242 0319 	movw	r3, #8217	; 0x2019
   187bc:	429e      	cmp	r6, r3
   187be:	dc51      	bgt.n	18864 <hci_internal_cmd_put+0x554>
   187c0:	f242 030c 	movw	r3, #8204	; 0x200c
   187c4:	429e      	cmp	r6, r3
   187c6:	dc40      	bgt.n	1884a <hci_internal_cmd_put+0x53a>
   187c8:	f240 4306 	movw	r3, #1030	; 0x406
   187cc:	429e      	cmp	r6, r3
   187ce:	f43f adcd 	beq.w	1836c <hci_internal_cmd_put+0x5c>
   187d2:	f240 431d 	movw	r3, #1053	; 0x41d
   187d6:	429e      	cmp	r6, r3
   187d8:	f43f adc8 	beq.w	1836c <hci_internal_cmd_put+0x5c>
   187dc:	e67b      	b.n	184d6 <hci_internal_cmd_put+0x1c6>
	memset(cmds, 0, sizeof(*cmds));
   187de:	2000      	movs	r0, #0
   187e0:	f8a4 0007 	strh.w	r0, [r4, #7]
	cmds->read_version_info = 1;
   187e4:	79e3      	ldrb	r3, [r4, #7]
   187e6:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   187ea:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   187ee:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   187f0:	7a23      	ldrb	r3, [r4, #8]
   187f2:	f023 0307 	bic.w	r3, r3, #7
   187f6:	f043 0307 	orr.w	r3, r3, #7
   187fa:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   187fc:	f242 0319 	movw	r3, #8217	; 0x2019
   18800:	429e      	cmp	r6, r3
   18802:	dd3e      	ble.n	18882 <hci_internal_cmd_put+0x572>
   18804:	f242 0332 	movw	r3, #8242	; 0x2032
   18808:	e046      	b.n	18898 <hci_internal_cmd_put+0x588>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1880a:	4826      	ldr	r0, [pc, #152]	; (188a4 <hci_internal_cmd_put+0x594>)
   1880c:	f7f4 fb9f 	bl	cf4e <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   18810:	211b      	movs	r1, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   18812:	e7d1      	b.n	187b8 <hci_internal_cmd_put+0x4a8>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   18814:	4823      	ldr	r0, [pc, #140]	; (188a4 <hci_internal_cmd_put+0x594>)
   18816:	f7f4 fb4d 	bl	ceb4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1881a:	2124      	movs	r1, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1881c:	e7cc      	b.n	187b8 <hci_internal_cmd_put+0x4a8>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1881e:	f7f4 fbe1 	bl	cfe4 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   18822:	2104      	movs	r1, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   18824:	e7c8      	b.n	187b8 <hci_internal_cmd_put+0x4a8>
	cmds->read_supported_vs_commands = 1;
   18826:	233f      	movs	r3, #63	; 0x3f
   18828:	71e3      	strb	r3, [r4, #7]
   1882a:	e63a      	b.n	184a2 <hci_internal_cmd_put+0x192>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1882c:	f7f4 fb3b 	bl	cea6 <sdc_hci_cmd_vs_llpm_mode_set>
   18830:	e5c1      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   18832:	f7f4 fb0c 	bl	ce4e <sdc_hci_cmd_vs_conn_update>
   18836:	e5be      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   18838:	f7f4 fb01 	bl	ce3e <sdc_hci_cmd_vs_conn_event_extend>
   1883c:	e5bb      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1883e:	f7f4 fb34 	bl	ceaa <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   18842:	e5b8      	b.n	183b6 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   18844:	f7f4 fb2d 	bl	cea2 <sdc_hci_cmd_vs_event_length_set>
   18848:	e5b5      	b.n	183b6 <hci_internal_cmd_put+0xa6>
   1884a:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   1884e:	3b0d      	subs	r3, #13
   18850:	2201      	movs	r2, #1
   18852:	b29b      	uxth	r3, r3
   18854:	fa02 f303 	lsl.w	r3, r2, r3
   18858:	f241 2241 	movw	r2, #4673	; 0x1241
   1885c:	4213      	tst	r3, r2
   1885e:	f43f ae3a 	beq.w	184d6 <hci_internal_cmd_put+0x1c6>
   18862:	e583      	b.n	1836c <hci_internal_cmd_put+0x5c>
	switch (hci_opcode) {
   18864:	f242 0332 	movw	r3, #8242	; 0x2032
   18868:	429e      	cmp	r6, r3
   1886a:	f43f ad7f 	beq.w	1836c <hci_internal_cmd_put+0x5c>
   1886e:	f5a5 5301 	sub.w	r3, r5, #8256	; 0x2040
   18872:	3b03      	subs	r3, #3
   18874:	2b01      	cmp	r3, #1
   18876:	f67f ad79 	bls.w	1836c <hci_internal_cmd_put+0x5c>
   1887a:	e62c      	b.n	184d6 <hci_internal_cmd_put+0x1c6>
		return -NRF_EPERM;
   1887c:	f04f 30ff 	mov.w	r0, #4294967295
   18880:	e580      	b.n	18384 <hci_internal_cmd_put+0x74>
	switch (hci_opcode) {
   18882:	f242 030c 	movw	r3, #8204	; 0x200c
   18886:	429e      	cmp	r6, r3
   18888:	dc09      	bgt.n	1889e <hci_internal_cmd_put+0x58e>
   1888a:	f240 4306 	movw	r3, #1030	; 0x406
   1888e:	429e      	cmp	r6, r3
   18890:	f43f ad6c 	beq.w	1836c <hci_internal_cmd_put+0x5c>
   18894:	f240 431d 	movw	r3, #1053	; 0x41d
   18898:	429e      	cmp	r6, r3
   1889a:	f43f ad67 	beq.w	1836c <hci_internal_cmd_put+0x5c>
   1889e:	2144      	movs	r1, #68	; 0x44
   188a0:	e60d      	b.n	184be <hci_internal_cmd_put+0x1ae>
   188a2:	bf00      	nop
   188a4:	2000259c 	.word	0x2000259c

000188a8 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   188a8:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   188aa:	4c07      	ldr	r4, [pc, #28]	; (188c8 <hci_internal_evt_get+0x20>)
   188ac:	7823      	ldrb	r3, [r4, #0]
   188ae:	b13b      	cbz	r3, 188c0 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
   188b0:	78a2      	ldrb	r2, [r4, #2]
   188b2:	1c61      	adds	r1, r4, #1
   188b4:	3202      	adds	r2, #2
   188b6:	f008 f8d8 	bl	20a6a <memcpy>
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   188ba:	2000      	movs	r0, #0
   188bc:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   188be:	bd10      	pop	{r4, pc}
   188c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   188c4:	f7f4 ba9e 	b.w	ce04 <sdc_hci_evt_get>
   188c8:	20002595 	.word	0x20002595

000188cc <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   188cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   188d0:	4e14      	ldr	r6, [pc, #80]	; (18924 <bt_rand+0x58>)
   188d2:	6833      	ldr	r3, [r6, #0]
{
   188d4:	4605      	mov	r5, r0
   188d6:	460c      	mov	r4, r1
   188d8:	4637      	mov	r7, r6
	if (unlikely(!dev)) {
   188da:	b1c3      	cbz	r3, 1890e <bt_rand+0x42>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   188dc:	683e      	ldr	r6, [r7, #0]
   188de:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   188e0:	68b7      	ldr	r7, [r6, #8]
	__ASSERT(api->get_entropy != NULL,
   188e2:	683b      	ldr	r3, [r7, #0]
   188e4:	b963      	cbnz	r3, 18900 <bt_rand+0x34>
   188e6:	4910      	ldr	r1, [pc, #64]	; (18928 <bt_rand+0x5c>)
   188e8:	4a10      	ldr	r2, [pc, #64]	; (1892c <bt_rand+0x60>)
   188ea:	4811      	ldr	r0, [pc, #68]	; (18930 <bt_rand+0x64>)
   188ec:	234b      	movs	r3, #75	; 0x4b
   188ee:	f004 ff61 	bl	1d7b4 <printk>
   188f2:	4810      	ldr	r0, [pc, #64]	; (18934 <bt_rand+0x68>)
   188f4:	f004 ff5e 	bl	1d7b4 <printk>
   188f8:	480c      	ldr	r0, [pc, #48]	; (1892c <bt_rand+0x60>)
   188fa:	214b      	movs	r1, #75	; 0x4b
   188fc:	f005 f9b4 	bl	1dc68 <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   18900:	683b      	ldr	r3, [r7, #0]
   18902:	4622      	mov	r2, r4
   18904:	4629      	mov	r1, r5
   18906:	4630      	mov	r0, r6
}
   18908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1890c:	4718      	bx	r3
   1890e:	480a      	ldr	r0, [pc, #40]	; (18938 <bt_rand+0x6c>)
   18910:	f000 fb3a 	bl	18f88 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   18914:	6030      	str	r0, [r6, #0]
		if (!dev) {
   18916:	2800      	cmp	r0, #0
   18918:	d1e0      	bne.n	188dc <bt_rand+0x10>
}
   1891a:	f06f 0012 	mvn.w	r0, #18
   1891e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18922:	bf00      	nop
   18924:	20001f38 	.word	0x20001f38
   18928:	000227f7 	.word	0x000227f7
   1892c:	000227ca 	.word	0x000227ca
   18930:	00021650 	.word	0x00021650
   18934:	00022817 	.word	0x00022817
   18938:	0002278a 	.word	0x0002278a

0001893c <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1893c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1893e:	2332      	movs	r3, #50	; 0x32
   18940:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   18944:	4a10      	ldr	r2, [pc, #64]	; (18988 <mpsl_lib_init+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   18946:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   18948:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1894a:	2119      	movs	r1, #25
   1894c:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1894e:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   18952:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   18956:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1895a:	f7ea ff65 	bl	3828 <mpsl_init>
	if (err) {
   1895e:	4604      	mov	r4, r0
   18960:	b970      	cbnz	r0, 18980 <mpsl_lib_init+0x44>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   18962:	4601      	mov	r1, r0
   18964:	462a      	mov	r2, r5
   18966:	2008      	movs	r0, #8
   18968:	f7f8 fe6c 	bl	11644 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1896c:	462a      	mov	r2, r5
   1896e:	4621      	mov	r1, r4
   18970:	200b      	movs	r0, #11
   18972:	f7f8 fe67 	bl	11644 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   18976:	462a      	mov	r2, r5
   18978:	4621      	mov	r1, r4
   1897a:	4628      	mov	r0, r5
   1897c:	f7f8 fe62 	bl	11644 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   18980:	4620      	mov	r0, r4
   18982:	b003      	add	sp, #12
   18984:	bd30      	pop	{r4, r5, pc}
   18986:	bf00      	nop
   18988:	000206bf 	.word	0x000206bf

0001898c <mpsl_low_prio_irq_handler>:
   1898c:	4801      	ldr	r0, [pc, #4]	; (18994 <mpsl_low_prio_irq_handler+0x8>)
   1898e:	f001 bb17 	b.w	19fc0 <z_impl_k_sem_give>
   18992:	bf00      	nop
   18994:	200006a0 	.word	0x200006a0

00018998 <signal_thread>:
{
   18998:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
   1899a:	4d0f      	ldr	r5, [pc, #60]	; (189d8 <signal_thread+0x40>)
		__ASSERT_NO_MSG(errcode == 0);
   1899c:	4c0f      	ldr	r4, [pc, #60]	; (189dc <signal_thread+0x44>)
   1899e:	f04f 32ff 	mov.w	r2, #4294967295
   189a2:	f04f 33ff 	mov.w	r3, #4294967295
   189a6:	4628      	mov	r0, r5
   189a8:	f001 fb4e 	bl	1a048 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   189ac:	f04f 30ff 	mov.w	r0, #4294967295
   189b0:	f04f 31ff 	mov.w	r1, #4294967295
   189b4:	f7ff fa96 	bl	17ee4 <multithreading_lock_acquire>
		__ASSERT_NO_MSG(errcode == 0);
   189b8:	b148      	cbz	r0, 189ce <signal_thread+0x36>
   189ba:	4909      	ldr	r1, [pc, #36]	; (189e0 <signal_thread+0x48>)
   189bc:	4809      	ldr	r0, [pc, #36]	; (189e4 <signal_thread+0x4c>)
   189be:	2346      	movs	r3, #70	; 0x46
   189c0:	4622      	mov	r2, r4
   189c2:	f004 fef7 	bl	1d7b4 <printk>
   189c6:	2146      	movs	r1, #70	; 0x46
   189c8:	4620      	mov	r0, r4
   189ca:	f005 f94d 	bl	1dc68 <assert_post_action>
		mpsl_low_priority_process();
   189ce:	f7f3 fd62 	bl	c496 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   189d2:	f7ff fa8f 	bl	17ef4 <multithreading_lock_release>
	while (true) {
   189d6:	e7e2      	b.n	1899e <signal_thread+0x6>
   189d8:	200006a0 	.word	0x200006a0
   189dc:	00022a11 	.word	0x00022a11
   189e0:	00022a3e 	.word	0x00022a3e
   189e4:	00021650 	.word	0x00021650

000189e8 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   189e8:	b530      	push	{r4, r5, lr}
   189ea:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   189ec:	4d0f      	ldr	r5, [pc, #60]	; (18a2c <mpsl_signal_thread_init+0x44>)
   189ee:	4910      	ldr	r1, [pc, #64]	; (18a30 <mpsl_signal_thread_init+0x48>)
   189f0:	2200      	movs	r2, #0
   189f2:	2300      	movs	r3, #0
   189f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   189f8:	2400      	movs	r4, #0
   189fa:	f06f 0309 	mvn.w	r3, #9
   189fe:	e9cd 3403 	strd	r3, r4, [sp, #12]
   18a02:	e9cd 4401 	strd	r4, r4, [sp, #4]
   18a06:	4b0b      	ldr	r3, [pc, #44]	; (18a34 <mpsl_signal_thread_init+0x4c>)
   18a08:	9400      	str	r4, [sp, #0]
   18a0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18a0e:	4628      	mov	r0, r5
   18a10:	f000 fe7a 	bl	19708 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   18a14:	4908      	ldr	r1, [pc, #32]	; (18a38 <mpsl_signal_thread_init+0x50>)
   18a16:	4628      	mov	r0, r5
   18a18:	f007 fea9 	bl	2076e <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   18a1c:	4622      	mov	r2, r4
   18a1e:	2104      	movs	r1, #4
   18a20:	2019      	movs	r0, #25
   18a22:	f7f8 fe0f 	bl	11644 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   18a26:	4620      	mov	r0, r4
   18a28:	b009      	add	sp, #36	; 0x24
   18a2a:	bd30      	pop	{r4, r5, pc}
   18a2c:	20001ac0 	.word	0x20001ac0
   18a30:	20003860 	.word	0x20003860
   18a34:	00018999 	.word	0x00018999
   18a38:	00022a4b 	.word	0x00022a4b

00018a3c <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   18a3c:	4b01      	ldr	r3, [pc, #4]	; (18a44 <mpsl_hfclk_callback+0x8>)
   18a3e:	2000      	movs	r0, #0
   18a40:	681b      	ldr	r3, [r3, #0]
   18a42:	4718      	bx	r3
   18a44:	20001f3c 	.word	0x20001f3c

00018a48 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   18a48:	b510      	push	{r4, lr}
	switch (domain) {
   18a4a:	b130      	cbz	r0, 18a5a <nrfx_clock_start+0x12>
   18a4c:	2801      	cmp	r0, #1
   18a4e:	d10a      	bne.n	18a66 <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   18a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   18a54:	480b      	ldr	r0, [pc, #44]	; (18a84 <nrfx_clock_start+0x3c>)
   18a56:	f7ea bd65 	b.w	3524 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   18a5a:	4b0b      	ldr	r3, [pc, #44]	; (18a88 <nrfx_clock_start+0x40>)
}
   18a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   18a60:	681b      	ldr	r3, [r3, #0]
   18a62:	2001      	movs	r0, #1
   18a64:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   18a66:	4909      	ldr	r1, [pc, #36]	; (18a8c <nrfx_clock_start+0x44>)
   18a68:	4a09      	ldr	r2, [pc, #36]	; (18a90 <nrfx_clock_start+0x48>)
   18a6a:	480a      	ldr	r0, [pc, #40]	; (18a94 <nrfx_clock_start+0x4c>)
   18a6c:	231c      	movs	r3, #28
   18a6e:	f004 fea1 	bl	1d7b4 <printk>
   18a72:	4809      	ldr	r0, [pc, #36]	; (18a98 <nrfx_clock_start+0x50>)
   18a74:	f004 fe9e 	bl	1d7b4 <printk>
}
   18a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Not supported");
   18a7c:	4804      	ldr	r0, [pc, #16]	; (18a90 <nrfx_clock_start+0x48>)
   18a7e:	211c      	movs	r1, #28
   18a80:	f005 b8f2 	b.w	1dc68 <assert_post_action>
   18a84:	00018a3d 	.word	0x00018a3d
   18a88:	20001f3c 	.word	0x20001f3c
   18a8c:	00023382 	.word	0x00023382
   18a90:	00022a57 	.word	0x00022a57
   18a94:	00021650 	.word	0x00021650
   18a98:	00022a94 	.word	0x00022a94

00018a9c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   18a9c:	b508      	push	{r3, lr}
	switch (domain) {
   18a9e:	b1a0      	cbz	r0, 18aca <nrfx_clock_stop+0x2e>
   18aa0:	2801      	cmp	r0, #1
   18aa2:	d103      	bne.n	18aac <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   18aa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   18aa8:	f7ea bd2e 	b.w	3508 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   18aac:	4907      	ldr	r1, [pc, #28]	; (18acc <nrfx_clock_stop+0x30>)
   18aae:	4a08      	ldr	r2, [pc, #32]	; (18ad0 <nrfx_clock_stop+0x34>)
   18ab0:	4808      	ldr	r0, [pc, #32]	; (18ad4 <nrfx_clock_stop+0x38>)
   18ab2:	232a      	movs	r3, #42	; 0x2a
   18ab4:	f004 fe7e 	bl	1d7b4 <printk>
   18ab8:	4807      	ldr	r0, [pc, #28]	; (18ad8 <nrfx_clock_stop+0x3c>)
   18aba:	f004 fe7b 	bl	1d7b4 <printk>
}
   18abe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Not supported");
   18ac2:	4803      	ldr	r0, [pc, #12]	; (18ad0 <nrfx_clock_stop+0x34>)
   18ac4:	212a      	movs	r1, #42	; 0x2a
   18ac6:	f005 b8cf 	b.w	1dc68 <assert_post_action>
}
   18aca:	bd08      	pop	{r3, pc}
   18acc:	00023382 	.word	0x00023382
   18ad0:	00022a57 	.word	0x00022a57
   18ad4:	00021650 	.word	0x00021650
   18ad8:	00022a94 	.word	0x00022a94

00018adc <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   18adc:	4b01      	ldr	r3, [pc, #4]	; (18ae4 <nrfx_clock_init+0x8>)
   18ade:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   18ae0:	4801      	ldr	r0, [pc, #4]	; (18ae8 <nrfx_clock_init+0xc>)
   18ae2:	4770      	bx	lr
   18ae4:	20001f3c 	.word	0x20001f3c
   18ae8:	0bad0000 	.word	0x0bad0000

00018aec <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   18aec:	4b04      	ldr	r3, [pc, #16]	; (18b00 <nrf52_errata_108+0x14>)
   18aee:	6818      	ldr	r0, [r3, #0]
   18af0:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18af2:	bf04      	itt	eq
   18af4:	4b03      	ldreq	r3, [pc, #12]	; (18b04 <nrf52_errata_108+0x18>)
   18af6:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   18af8:	1f83      	subs	r3, r0, #6
   18afa:	4258      	negs	r0, r3
   18afc:	4158      	adcs	r0, r3
   18afe:	4770      	bx	lr
   18b00:	10000130 	.word	0x10000130
   18b04:	f0000fe0 	.word	0xf0000fe0

00018b08 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18b08:	4b07      	ldr	r3, [pc, #28]	; (18b28 <nrf52_errata_16+0x20>)
   18b0a:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18b0c:	2b06      	cmp	r3, #6
   18b0e:	d109      	bne.n	18b24 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18b10:	4b06      	ldr	r3, [pc, #24]	; (18b2c <nrf52_errata_16+0x24>)
   18b12:	681b      	ldr	r3, [r3, #0]
   18b14:	f3c3 1303 	ubfx	r3, r3, #4, #4
   18b18:	3b03      	subs	r3, #3
   18b1a:	2b04      	cmp	r3, #4
   18b1c:	d802      	bhi.n	18b24 <nrf52_errata_16+0x1c>
   18b1e:	4a04      	ldr	r2, [pc, #16]	; (18b30 <nrf52_errata_16+0x28>)
   18b20:	5cd0      	ldrb	r0, [r2, r3]
   18b22:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   18b24:	2000      	movs	r0, #0
    #endif
}
   18b26:	4770      	bx	lr
   18b28:	f0000fe0 	.word	0xf0000fe0
   18b2c:	f0000fe8 	.word	0xf0000fe8
   18b30:	00022ab3 	.word	0x00022ab3

00018b34 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   18b34:	4a02      	ldr	r2, [pc, #8]	; (18b40 <nvmc_wait+0xc>)
   18b36:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   18b3a:	2b00      	cmp	r3, #0
   18b3c:	d0fb      	beq.n	18b36 <nvmc_wait+0x2>
}
   18b3e:	4770      	bx	lr
   18b40:	4001e000 	.word	0x4001e000

00018b44 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   18b44:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   18b46:	f7ff ffd1 	bl	18aec <nrf52_errata_108>
   18b4a:	b128      	cbz	r0, 18b58 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   18b4c:	4b81      	ldr	r3, [pc, #516]	; (18d54 <SystemInit+0x210>)
   18b4e:	4a82      	ldr	r2, [pc, #520]	; (18d58 <SystemInit+0x214>)
   18b50:	681b      	ldr	r3, [r3, #0]
   18b52:	f3c3 2304 	ubfx	r3, r3, #8, #5
   18b56:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   18b58:	f7ff ffd6 	bl	18b08 <nrf52_errata_16>
   18b5c:	b110      	cbz	r0, 18b64 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   18b5e:	4b7f      	ldr	r3, [pc, #508]	; (18d5c <SystemInit+0x218>)
   18b60:	4a7f      	ldr	r2, [pc, #508]	; (18d60 <SystemInit+0x21c>)
   18b62:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   18b64:	f7ff ffc2 	bl	18aec <nrf52_errata_108>
   18b68:	b128      	cbz	r0, 18b76 <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   18b6a:	4b7e      	ldr	r3, [pc, #504]	; (18d64 <SystemInit+0x220>)
   18b6c:	4a7e      	ldr	r2, [pc, #504]	; (18d68 <SystemInit+0x224>)
   18b6e:	681b      	ldr	r3, [r3, #0]
   18b70:	f3c3 3342 	ubfx	r3, r3, #13, #3
   18b74:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   18b76:	f7ff ffc7 	bl	18b08 <nrf52_errata_16>
   18b7a:	b120      	cbz	r0, 18b86 <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   18b7c:	4a7b      	ldr	r2, [pc, #492]	; (18d6c <SystemInit+0x228>)
   18b7e:	68d3      	ldr	r3, [r2, #12]
   18b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   18b84:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   18b86:	f7ff ffb1 	bl	18aec <nrf52_errata_108>
   18b8a:	b140      	cbz	r0, 18b9e <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   18b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18b90:	2200      	movs	r2, #0
   18b92:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   18b96:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   18b9a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   18b9e:	f7ff ffb3 	bl	18b08 <nrf52_errata_16>
   18ba2:	b110      	cbz	r0, 18baa <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   18ba4:	4b72      	ldr	r3, [pc, #456]	; (18d70 <SystemInit+0x22c>)
   18ba6:	2203      	movs	r2, #3
   18ba8:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   18baa:	f7ff ffad 	bl	18b08 <nrf52_errata_16>
   18bae:	b140      	cbz	r0, 18bc2 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   18bb0:	4b70      	ldr	r3, [pc, #448]	; (18d74 <SystemInit+0x230>)
   18bb2:	2205      	movs	r2, #5
   18bb4:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   18bb6:	2201      	movs	r2, #1
   18bb8:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   18bba:	2200      	movs	r2, #0
   18bbc:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   18bbe:	223f      	movs	r2, #63	; 0x3f
   18bc0:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   18bc2:	4b6d      	ldr	r3, [pc, #436]	; (18d78 <SystemInit+0x234>)
   18bc4:	681a      	ldr	r2, [r3, #0]
   18bc6:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18bc8:	bf0b      	itete	eq
   18bca:	4b6c      	ldreq	r3, [pc, #432]	; (18d7c <SystemInit+0x238>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   18bcc:	4b6c      	ldrne	r3, [pc, #432]	; (18d80 <SystemInit+0x23c>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18bce:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   18bd0:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18bd2:	bf02      	ittt	eq
   18bd4:	3308      	addeq	r3, #8
   18bd6:	681b      	ldreq	r3, [r3, #0]
   18bd8:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18bdc:	2a06      	cmp	r2, #6
   18bde:	d14d      	bne.n	18c7c <SystemInit+0x138>
            {
                switch(var2)
   18be0:	3b03      	subs	r3, #3
   18be2:	2b04      	cmp	r3, #4
   18be4:	d803      	bhi.n	18bee <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   18be6:	4a67      	ldr	r2, [pc, #412]	; (18d84 <SystemInit+0x240>)
   18be8:	5cd3      	ldrb	r3, [r2, r3]
   18bea:	2b00      	cmp	r3, #0
   18bec:	d046      	beq.n	18c7c <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   18bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   18bf2:	4b65      	ldr	r3, [pc, #404]	; (18d88 <SystemInit+0x244>)
   18bf4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   18bf8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   18bfc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   18c00:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   18c04:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   18c08:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   18c0c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   18c10:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   18c14:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   18c18:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   18c1c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   18c20:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   18c24:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   18c28:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   18c2c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   18c30:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   18c34:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   18c38:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   18c3c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   18c40:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   18c44:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   18c48:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   18c4c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   18c50:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   18c54:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   18c58:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   18c5c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   18c60:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   18c64:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   18c68:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   18c6c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   18c70:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   18c74:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   18c78:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   18c7c:	f7ff ff36 	bl	18aec <nrf52_errata_108>
   18c80:	b128      	cbz	r0, 18c8e <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   18c82:	4b42      	ldr	r3, [pc, #264]	; (18d8c <SystemInit+0x248>)
   18c84:	4a42      	ldr	r2, [pc, #264]	; (18d90 <SystemInit+0x24c>)
   18c86:	681b      	ldr	r3, [r3, #0]
   18c88:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   18c8c:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   18c8e:	f7ff ff2d 	bl	18aec <nrf52_errata_108>
   18c92:	b148      	cbz	r0, 18ca8 <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   18c94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18c98:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   18c9c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   18c9e:	bf44      	itt	mi
   18ca0:	f06f 0201 	mvnmi.w	r2, #1
   18ca4:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18ca8:	4b33      	ldr	r3, [pc, #204]	; (18d78 <SystemInit+0x234>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18caa:	681b      	ldr	r3, [r3, #0]
   18cac:	2b06      	cmp	r3, #6
   18cae:	d120      	bne.n	18cf2 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   18cb0:	4b33      	ldr	r3, [pc, #204]	; (18d80 <SystemInit+0x23c>)
   18cb2:	681b      	ldr	r3, [r3, #0]
   18cb4:	3b03      	subs	r3, #3
   18cb6:	2b04      	cmp	r3, #4
   18cb8:	d802      	bhi.n	18cc0 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   18cba:	4a36      	ldr	r2, [pc, #216]	; (18d94 <SystemInit+0x250>)
   18cbc:	5cd3      	ldrb	r3, [r2, r3]
   18cbe:	b143      	cbz	r3, 18cd2 <SystemInit+0x18e>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   18cc0:	4a35      	ldr	r2, [pc, #212]	; (18d98 <SystemInit+0x254>)
   18cc2:	6813      	ldr	r3, [r2, #0]
   18cc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   18cc8:	6013      	str	r3, [r2, #0]
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18cca:	4b2b      	ldr	r3, [pc, #172]	; (18d78 <SystemInit+0x234>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18ccc:	681b      	ldr	r3, [r3, #0]
   18cce:	2b06      	cmp	r3, #6
   18cd0:	d10f      	bne.n	18cf2 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   18cd2:	4b2b      	ldr	r3, [pc, #172]	; (18d80 <SystemInit+0x23c>)
   18cd4:	681b      	ldr	r3, [r3, #0]
   18cd6:	3b03      	subs	r3, #3
   18cd8:	2b04      	cmp	r3, #4
   18cda:	d802      	bhi.n	18ce2 <SystemInit+0x19e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   18cdc:	4a2f      	ldr	r2, [pc, #188]	; (18d9c <SystemInit+0x258>)
   18cde:	5cd3      	ldrb	r3, [r2, r3]
   18ce0:	b13b      	cbz	r3, 18cf2 <SystemInit+0x1ae>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   18ce2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   18ce6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   18cea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18cee:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   18cf2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   18cf6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   18cfa:	2a00      	cmp	r2, #0
   18cfc:	db03      	blt.n	18d06 <SystemInit+0x1c2>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   18cfe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   18d02:	2b00      	cmp	r3, #0
   18d04:	da22      	bge.n	18d4c <SystemInit+0x208>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   18d06:	4926      	ldr	r1, [pc, #152]	; (18da0 <SystemInit+0x25c>)
   18d08:	2301      	movs	r3, #1
   18d0a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   18d0e:	f7ff ff11 	bl	18b34 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   18d12:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   18d16:	2415      	movs	r4, #21
   18d18:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   18d1c:	f7ff ff0a 	bl	18b34 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   18d20:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   18d24:	f7ff ff06 	bl	18b34 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   18d28:	2300      	movs	r3, #0
   18d2a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   18d2e:	f7ff ff01 	bl	18b34 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   18d32:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   18d36:	491b      	ldr	r1, [pc, #108]	; (18da4 <SystemInit+0x260>)
   18d38:	4b1b      	ldr	r3, [pc, #108]	; (18da8 <SystemInit+0x264>)
   18d3a:	68ca      	ldr	r2, [r1, #12]
   18d3c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   18d40:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   18d42:	60cb      	str	r3, [r1, #12]
   18d44:	f3bf 8f4f 	dsb	sy
    __NOP();
   18d48:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   18d4a:	e7fd      	b.n	18d48 <SystemInit+0x204>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   18d4c:	4b17      	ldr	r3, [pc, #92]	; (18dac <SystemInit+0x268>)
   18d4e:	4a18      	ldr	r2, [pc, #96]	; (18db0 <SystemInit+0x26c>)
   18d50:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   18d52:	bd10      	pop	{r4, pc}
   18d54:	10000324 	.word	0x10000324
   18d58:	40013540 	.word	0x40013540
   18d5c:	4007c074 	.word	0x4007c074
   18d60:	baadf00d 	.word	0xbaadf00d
   18d64:	10000244 	.word	0x10000244
   18d68:	4000053c 	.word	0x4000053c
   18d6c:	e000edf0 	.word	0xe000edf0
   18d70:	400005a0 	.word	0x400005a0
   18d74:	40005610 	.word	0x40005610
   18d78:	10000130 	.word	0x10000130
   18d7c:	f0000fe0 	.word	0xf0000fe0
   18d80:	10000134 	.word	0x10000134
   18d84:	00022aa4 	.word	0x00022aa4
   18d88:	4000c000 	.word	0x4000c000
   18d8c:	10000258 	.word	0x10000258
   18d90:	40000ee4 	.word	0x40000ee4
   18d94:	00022aa9 	.word	0x00022aa9
   18d98:	4000173c 	.word	0x4000173c
   18d9c:	00022aae 	.word	0x00022aae
   18da0:	4001e000 	.word	0x4001e000
   18da4:	e000ed00 	.word	0xe000ed00
   18da8:	05fa0004 	.word	0x05fa0004
   18dac:	200004f8 	.word	0x200004f8
   18db0:	03d09000 	.word	0x03d09000

00018db4 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   18db4:	2301      	movs	r3, #1
   18db6:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   18dba:	f010 0fff 	tst.w	r0, #255	; 0xff
   18dbe:	d012      	beq.n	18de6 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   18dc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   18dc4:	f3ef 8111 	mrs	r1, BASEPRI
   18dc8:	f383 8812 	msr	BASEPRI_MAX, r3
   18dcc:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   18dd0:	4a06      	ldr	r2, [pc, #24]	; (18dec <nrfx_gpiote_channel_free+0x38>)
   18dd2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   18dd4:	ea23 0000 	bic.w	r0, r3, r0
   18dd8:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   18dda:	f381 8811 	msr	BASEPRI, r1
   18dde:	f3bf 8f6f 	isb	sy
   18de2:	4803      	ldr	r0, [pc, #12]	; (18df0 <nrfx_gpiote_channel_free+0x3c>)
   18de4:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   18de6:	4803      	ldr	r0, [pc, #12]	; (18df4 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18de8:	4770      	bx	lr
   18dea:	bf00      	nop
   18dec:	20001f40 	.word	0x20001f40
   18df0:	0bad0000 	.word	0x0bad0000
   18df4:	0bad0004 	.word	0x0bad0004

00018df8 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   18df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18dfc:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   18dfe:	f8df e060 	ldr.w	lr, [pc, #96]	; 18e60 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   18e02:	4816      	ldr	r0, [pc, #88]	; (18e5c <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   18e04:	f8df 805c 	ldr.w	r8, [pc, #92]	; 18e64 <nrfx_gpiote_channel_alloc+0x6c>
{
   18e08:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   18e0a:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   18e0c:	2601      	movs	r6, #1
   18e0e:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   18e10:	f04f 0140 	mov.w	r1, #64	; 0x40
   18e14:	f3ef 8c11 	mrs	ip, BASEPRI
   18e18:	f381 8812 	msr	BASEPRI_MAX, r1
   18e1c:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   18e20:	fa22 f103 	lsr.w	r1, r2, r3
   18e24:	07c9      	lsls	r1, r1, #31
   18e26:	d50a      	bpl.n	18e3e <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   18e28:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   18e2c:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   18e30:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   18e32:	bf01      	itttt	eq
   18e34:	4339      	orreq	r1, r7
   18e36:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
   18e3a:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   18e3c:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   18e3e:	f38c 8811 	msr	BASEPRI, ip
   18e42:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   18e46:	4540      	cmp	r0, r8
   18e48:	d005      	beq.n	18e56 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   18e4a:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   18e4e:	439a      	bics	r2, r3
   18e50:	f104 0401 	add.w	r4, r4, #1
   18e54:	d1db      	bne.n	18e0e <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18e5a:	bf00      	nop
   18e5c:	0bad0002 	.word	0x0bad0002
   18e60:	20001f40 	.word	0x20001f40
   18e64:	0bad0000 	.word	0x0bad0000

00018e68 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   18e68:	4b18      	ldr	r3, [pc, #96]	; (18ecc <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   18e6a:	f8df c06c 	ldr.w	ip, [pc, #108]	; 18ed8 <nrfx_ppi_channel_alloc+0x70>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   18e6e:	681b      	ldr	r3, [r3, #0]
{
   18e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   18e74:	43db      	mvns	r3, r3
{
   18e76:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   18e78:	4f15      	ldr	r7, [pc, #84]	; (18ed0 <nrfx_ppi_channel_alloc+0x68>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   18e7a:	4816      	ldr	r0, [pc, #88]	; (18ed4 <nrfx_ppi_channel_alloc+0x6c>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   18e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   18e80:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   18e82:	f04f 0e01 	mov.w	lr, #1
   18e86:	b2e6      	uxtb	r6, r4
   18e88:	b90b      	cbnz	r3, 18e8e <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   18e8e:	f04f 0240 	mov.w	r2, #64	; 0x40
   18e92:	f3ef 8811 	mrs	r8, BASEPRI
   18e96:	f382 8812 	msr	BASEPRI_MAX, r2
   18e9a:	f3bf 8f6f 	isb	sy
   18e9e:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   18ea2:	421a      	tst	r2, r3
   18ea4:	d006      	beq.n	18eb4 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   18ea6:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   18ea8:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   18eaa:	bf01      	itttt	eq
   18eac:	4311      	orreq	r1, r2
   18eae:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   18eb0:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   18eb2:	4660      	moveq	r0, ip
	__asm__ volatile(
   18eb4:	f388 8811 	msr	BASEPRI, r8
   18eb8:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   18ebc:	4560      	cmp	r0, ip
   18ebe:	f104 0401 	add.w	r4, r4, #1
   18ec2:	d0e2      	beq.n	18e8a <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   18ec4:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   18ec8:	e7dd      	b.n	18e86 <nrfx_ppi_channel_alloc+0x1e>
   18eca:	bf00      	nop
   18ecc:	00021444 	.word	0x00021444
   18ed0:	20001f90 	.word	0x20001f90
   18ed4:	0bad0002 	.word	0x0bad0002
   18ed8:	0bad0000 	.word	0x0bad0000

00018edc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   18edc:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   18ede:	4c14      	ldr	r4, [pc, #80]	; (18f30 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   18ee0:	4a14      	ldr	r2, [pc, #80]	; (18f34 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   18ee2:	4915      	ldr	r1, [pc, #84]	; (18f38 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   18ee4:	2303      	movs	r3, #3
   18ee6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   18ee8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   18eea:	4b14      	ldr	r3, [pc, #80]	; (18f3c <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   18eec:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   18eee:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   18ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   18ef4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   18ef6:	2300      	movs	r3, #0
   18ef8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   18efa:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   18efc:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   18efe:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   18f00:	4a0f      	ldr	r2, [pc, #60]	; (18f40 <_DoInit+0x64>)
   18f02:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   18f04:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   18f06:	2210      	movs	r2, #16
   18f08:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   18f0a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   18f0c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   18f0e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   18f10:	f007 fdc1 	bl	20a96 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   18f14:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   18f18:	490a      	ldr	r1, [pc, #40]	; (18f44 <_DoInit+0x68>)
   18f1a:	4620      	mov	r0, r4
   18f1c:	f007 fdbb 	bl	20a96 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   18f20:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   18f24:	2320      	movs	r3, #32
   18f26:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   18f28:	f3bf 8f5f 	dmb	sy
}
   18f2c:	bd10      	pop	{r4, pc}
   18f2e:	bf00      	nop
   18f30:	20001f94 	.word	0x20001f94
   18f34:	00022ab8 	.word	0x00022ab8
   18f38:	00022ac1 	.word	0x00022ac1
   18f3c:	200025ec 	.word	0x200025ec
   18f40:	200025dc 	.word	0x200025dc
   18f44:	00022ac5 	.word	0x00022ac5

00018f48 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18f48:	4b0e      	ldr	r3, [pc, #56]	; (18f84 <z_sys_init_run_level+0x3c>)
{
   18f4a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18f4c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   18f50:	3001      	adds	r0, #1
   18f52:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   18f56:	42a6      	cmp	r6, r4
   18f58:	d800      	bhi.n	18f5c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   18f5a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   18f5c:	e9d4 3500 	ldrd	r3, r5, [r4]
   18f60:	4628      	mov	r0, r5
   18f62:	4798      	blx	r3
		if (dev != NULL) {
   18f64:	b165      	cbz	r5, 18f80 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   18f66:	68eb      	ldr	r3, [r5, #12]
   18f68:	b130      	cbz	r0, 18f78 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   18f6a:	2800      	cmp	r0, #0
   18f6c:	bfb8      	it	lt
   18f6e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   18f70:	28ff      	cmp	r0, #255	; 0xff
   18f72:	bfa8      	it	ge
   18f74:	20ff      	movge	r0, #255	; 0xff
   18f76:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   18f78:	785a      	ldrb	r2, [r3, #1]
   18f7a:	f042 0201 	orr.w	r2, r2, #1
   18f7e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18f80:	3408      	adds	r4, #8
   18f82:	e7e8      	b.n	18f56 <z_sys_init_run_level+0xe>
   18f84:	00021448 	.word	0x00021448

00018f88 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   18f88:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   18f8a:	4605      	mov	r5, r0
   18f8c:	b910      	cbnz	r0, 18f94 <z_impl_device_get_binding+0xc>
		return NULL;
   18f8e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   18f90:	4620      	mov	r0, r4
   18f92:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   18f94:	7803      	ldrb	r3, [r0, #0]
   18f96:	2b00      	cmp	r3, #0
   18f98:	d0f9      	beq.n	18f8e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   18f9a:	4a0f      	ldr	r2, [pc, #60]	; (18fd8 <z_impl_device_get_binding+0x50>)
   18f9c:	4c0f      	ldr	r4, [pc, #60]	; (18fdc <z_impl_device_get_binding+0x54>)
   18f9e:	4616      	mov	r6, r2
   18fa0:	4294      	cmp	r4, r2
   18fa2:	d108      	bne.n	18fb6 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   18fa4:	4c0d      	ldr	r4, [pc, #52]	; (18fdc <z_impl_device_get_binding+0x54>)
   18fa6:	42b4      	cmp	r4, r6
   18fa8:	d0f1      	beq.n	18f8e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   18faa:	4620      	mov	r0, r4
   18fac:	f007 fbc7 	bl	2073e <z_device_ready>
   18fb0:	b950      	cbnz	r0, 18fc8 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   18fb2:	3418      	adds	r4, #24
   18fb4:	e7f7      	b.n	18fa6 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   18fb6:	4620      	mov	r0, r4
   18fb8:	f007 fbc1 	bl	2073e <z_device_ready>
   18fbc:	b110      	cbz	r0, 18fc4 <z_impl_device_get_binding+0x3c>
   18fbe:	6823      	ldr	r3, [r4, #0]
   18fc0:	42ab      	cmp	r3, r5
   18fc2:	d0e5      	beq.n	18f90 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   18fc4:	3418      	adds	r4, #24
   18fc6:	e7eb      	b.n	18fa0 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   18fc8:	6821      	ldr	r1, [r4, #0]
   18fca:	4628      	mov	r0, r5
   18fcc:	f7f3 f94c 	bl	c268 <strcmp>
   18fd0:	2800      	cmp	r0, #0
   18fd2:	d1ee      	bne.n	18fb2 <z_impl_device_get_binding+0x2a>
   18fd4:	e7dc      	b.n	18f90 <z_impl_device_get_binding+0x8>
   18fd6:	bf00      	nop
   18fd8:	00020e00 	.word	0x00020e00
   18fdc:	00020d88 	.word	0x00020d88

00018fe0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   18fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18fe2:	4604      	mov	r4, r0
   18fe4:	460e      	mov	r6, r1
	__asm__ volatile(
   18fe6:	f04f 0340 	mov.w	r3, #64	; 0x40
   18fea:	f3ef 8711 	mrs	r7, BASEPRI
   18fee:	f383 8812 	msr	BASEPRI_MAX, r3
   18ff2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   18ff6:	f002 fed7 	bl	1bda8 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   18ffa:	4631      	mov	r1, r6
   18ffc:	4605      	mov	r5, r0
   18ffe:	4620      	mov	r0, r4
   19000:	f007 fb52 	bl	206a8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   19004:	2c04      	cmp	r4, #4
   19006:	d10c      	bne.n	19022 <z_fatal_error+0x42>
   19008:	490a      	ldr	r1, [pc, #40]	; (19034 <z_fatal_error+0x54>)
   1900a:	4a0b      	ldr	r2, [pc, #44]	; (19038 <z_fatal_error+0x58>)
   1900c:	480b      	ldr	r0, [pc, #44]	; (1903c <z_fatal_error+0x5c>)
   1900e:	238f      	movs	r3, #143	; 0x8f
   19010:	f004 fbd0 	bl	1d7b4 <printk>
   19014:	480a      	ldr	r0, [pc, #40]	; (19040 <z_fatal_error+0x60>)
   19016:	f004 fbcd 	bl	1d7b4 <printk>
   1901a:	4807      	ldr	r0, [pc, #28]	; (19038 <z_fatal_error+0x58>)
   1901c:	218f      	movs	r1, #143	; 0x8f
   1901e:	f004 fe23 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   19022:	f387 8811 	msr	BASEPRI, r7
   19026:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1902a:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1902c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   19030:	f7f8 be0c 	b.w	11c4c <z_impl_k_thread_abort>
   19034:	00022aee 	.word	0x00022aee
   19038:	00022acc 	.word	0x00022acc
   1903c:	00021650 	.word	0x00021650
   19040:	00022b0b 	.word	0x00022b0b

00019044 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   19044:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   19046:	2300      	movs	r3, #0
{
   19048:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   1904a:	2201      	movs	r2, #1
   1904c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   19050:	220f      	movs	r2, #15
   19052:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
   19056:	4c0d      	ldr	r4, [pc, #52]	; (1908c <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   19058:	4a0d      	ldr	r2, [pc, #52]	; (19090 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   1905a:	9301      	str	r3, [sp, #4]
   1905c:	490d      	ldr	r1, [pc, #52]	; (19094 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1905e:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
   19060:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   19064:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   19068:	f44f 75b0 	mov.w	r5, #352	; 0x160
   1906c:	9300      	str	r3, [sp, #0]
   1906e:	fb05 1100 	mla	r1, r5, r0, r1
   19072:	4b09      	ldr	r3, [pc, #36]	; (19098 <init_idle_thread+0x54>)
   19074:	f44f 72a0 	mov.w	r2, #320	; 0x140
   19078:	4620      	mov	r0, r4
   1907a:	f000 fae1 	bl	19640 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1907e:	7b63      	ldrb	r3, [r4, #13]
   19080:	f023 0304 	bic.w	r3, r3, #4
   19084:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   19086:	b007      	add	sp, #28
   19088:	bd30      	pop	{r4, r5, pc}
   1908a:	bf00      	nop
   1908c:	20001b40 	.word	0x20001b40
   19090:	2000203c 	.word	0x2000203c
   19094:	200040a0 	.word	0x200040a0
   19098:	00019911 	.word	0x00019911

0001909c <bg_thread_main>:
{
   1909c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1909e:	4b0a      	ldr	r3, [pc, #40]	; (190c8 <bg_thread_main+0x2c>)
   190a0:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   190a2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   190a4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   190a6:	f7ff ff4f 	bl	18f48 <z_sys_init_run_level>
	boot_banner();
   190aa:	f004 f82f 	bl	1d10c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   190ae:	2003      	movs	r0, #3
   190b0:	f7ff ff4a 	bl	18f48 <z_sys_init_run_level>
	z_init_static_threads();
   190b4:	f000 fb76 	bl	197a4 <z_init_static_threads>
	main();
   190b8:	f7f6 fd72 	bl	fba0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   190bc:	4a03      	ldr	r2, [pc, #12]	; (190cc <bg_thread_main+0x30>)
   190be:	7b13      	ldrb	r3, [r2, #12]
   190c0:	f023 0301 	bic.w	r3, r3, #1
   190c4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   190c6:	bd08      	pop	{r3, pc}
   190c8:	200029ec 	.word	0x200029ec
   190cc:	20001bc0 	.word	0x20001bc0

000190d0 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   190d0:	4802      	ldr	r0, [pc, #8]	; (190dc <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   190d2:	4a03      	ldr	r2, [pc, #12]	; (190e0 <z_bss_zero+0x10>)
   190d4:	2100      	movs	r1, #0
   190d6:	1a12      	subs	r2, r2, r0
   190d8:	f007 bcd5 	b.w	20a86 <memset>
   190dc:	200007e0 	.word	0x200007e0
   190e0:	200029f4 	.word	0x200029f4

000190e4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   190e4:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   190e6:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 191c4 <z_cstart+0xe0>
   190ea:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   190ec:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   190f0:	4d2e      	ldr	r5, [pc, #184]	; (191ac <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   190f2:	4e2f      	ldr	r6, [pc, #188]	; (191b0 <z_cstart+0xcc>)
   190f4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   190f6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 191c8 <z_cstart+0xe4>
   190fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   190fe:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19100:	23e0      	movs	r3, #224	; 0xe0
   19102:	2400      	movs	r4, #0
   19104:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   19108:	2320      	movs	r3, #32
   1910a:	77eb      	strb	r3, [r5, #31]
   1910c:	762c      	strb	r4, [r5, #24]
   1910e:	766c      	strb	r4, [r5, #25]
   19110:	76ac      	strb	r4, [r5, #26]
   19112:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   19116:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19118:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1911c:	626b      	str	r3, [r5, #36]	; 0x24
   1911e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   19122:	f7f8 fd09 	bl	11b38 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   19126:	f7f8 fa3d 	bl	115a4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1912a:	f04f 33ff 	mov.w	r3, #4294967295
   1912e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   19130:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   19132:	f7f8 fe65 	bl	11e00 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   19136:	f7f8 fd9b 	bl	11c70 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1913a:	f240 1301 	movw	r3, #257	; 0x101
   1913e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   19142:	ab06      	add	r3, sp, #24
   19144:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   19146:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1914a:	f007 faf7 	bl	2073c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1914e:	4620      	mov	r0, r4
   19150:	f7ff fefa 	bl	18f48 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   19154:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   19156:	4d17      	ldr	r5, [pc, #92]	; (191b4 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   19158:	f7ff fef6 	bl	18f48 <z_sys_init_run_level>
	z_sched_init();
   1915c:	f002 fc8e 	bl	1ba7c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19160:	4b15      	ldr	r3, [pc, #84]	; (191b8 <z_cstart+0xd4>)
   19162:	9305      	str	r3, [sp, #20]
   19164:	2301      	movs	r3, #1
   19166:	4915      	ldr	r1, [pc, #84]	; (191bc <z_cstart+0xd8>)
   19168:	9400      	str	r4, [sp, #0]
   1916a:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1916e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19172:	464b      	mov	r3, r9
   19174:	e9cd 4401 	strd	r4, r4, [sp, #4]
   19178:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1917a:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1917c:	f000 fa60 	bl	19640 <z_setup_new_thread>
   19180:	7b6a      	ldrb	r2, [r5, #13]
   19182:	f022 0204 	bic.w	r2, r2, #4
   19186:	736a      	strb	r2, [r5, #13]
   19188:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
   1918a:	4628      	mov	r0, r5
   1918c:	f002 f876 	bl	1b27c <z_ready_thread>
		init_idle_thread(i);
   19190:	4620      	mov	r0, r4
   19192:	f7ff ff57 	bl	19044 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   19196:	4b0a      	ldr	r3, [pc, #40]	; (191c0 <z_cstart+0xdc>)
   19198:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1919a:	464a      	mov	r2, r9
   1919c:	4639      	mov	r1, r7
   1919e:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   191a0:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   191a2:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   191a6:	f7f8 fb3d 	bl	11824 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   191aa:	bf00      	nop
   191ac:	e000ed00 	.word	0xe000ed00
   191b0:	2000203c 	.word	0x2000203c
   191b4:	20001bc0 	.word	0x20001bc0
   191b8:	00022b40 	.word	0x00022b40
   191bc:	20003c80 	.word	0x20003c80
   191c0:	20001b40 	.word	0x20001b40
   191c4:	20004a20 	.word	0x20004a20
   191c8:	0001909d 	.word	0x0001909d

000191cc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   191cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   191ce:	4d0f      	ldr	r5, [pc, #60]	; (1920c <statics_init+0x40>)
   191d0:	4c0f      	ldr	r4, [pc, #60]	; (19210 <statics_init+0x44>)
   191d2:	4e10      	ldr	r6, [pc, #64]	; (19214 <statics_init+0x48>)
   191d4:	462f      	mov	r7, r5
   191d6:	42ac      	cmp	r4, r5
   191d8:	d90c      	bls.n	191f4 <statics_init+0x28>
   191da:	490f      	ldr	r1, [pc, #60]	; (19218 <statics_init+0x4c>)
   191dc:	480f      	ldr	r0, [pc, #60]	; (1921c <statics_init+0x50>)
   191de:	2318      	movs	r3, #24
   191e0:	4632      	mov	r2, r6
   191e2:	f004 fae7 	bl	1d7b4 <printk>
   191e6:	480e      	ldr	r0, [pc, #56]	; (19220 <statics_init+0x54>)
   191e8:	f004 fae4 	bl	1d7b4 <printk>
   191ec:	2118      	movs	r1, #24
   191ee:	4630      	mov	r0, r6
   191f0:	f004 fd3a 	bl	1dc68 <assert_post_action>
   191f4:	42bc      	cmp	r4, r7
   191f6:	d301      	bcc.n	191fc <statics_init+0x30>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   191f8:	2000      	movs	r0, #0
   191fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   191fc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   19200:	4620      	mov	r0, r4
   19202:	f007 faa6 	bl	20752 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   19206:	3418      	adds	r4, #24
   19208:	e7e5      	b.n	191d6 <statics_init+0xa>
   1920a:	bf00      	nop
   1920c:	20000634 	.word	0x20000634
   19210:	20000634 	.word	0x20000634
   19214:	00022b45 	.word	0x00022b45
   19218:	00022b67 	.word	0x00022b67
   1921c:	00021650 	.word	0x00021650
   19220:	00022125 	.word	0x00022125

00019224 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   19224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19228:	b087      	sub	sp, #28
   1922a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   1922e:	4606      	mov	r6, r0
   19230:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   19232:	4640      	mov	r0, r8
   19234:	4649      	mov	r1, r9
{
   19236:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   19238:	f007 fb6c 	bl	20914 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1923c:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   19240:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   19244:	f04f 0340 	mov.w	r3, #64	; 0x40
   19248:	f3ef 8511 	mrs	r5, BASEPRI
   1924c:	f383 8812 	msr	BASEPRI_MAX, r3
   19250:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19254:	4620      	mov	r0, r4
   19256:	f000 fb35 	bl	198c4 <z_spin_lock_valid>
   1925a:	b968      	cbnz	r0, 19278 <k_heap_aligned_alloc+0x54>
   1925c:	4a3f      	ldr	r2, [pc, #252]	; (1935c <k_heap_aligned_alloc+0x138>)
   1925e:	4940      	ldr	r1, [pc, #256]	; (19360 <k_heap_aligned_alloc+0x13c>)
   19260:	4840      	ldr	r0, [pc, #256]	; (19364 <k_heap_aligned_alloc+0x140>)
   19262:	2381      	movs	r3, #129	; 0x81
   19264:	f004 faa6 	bl	1d7b4 <printk>
   19268:	483f      	ldr	r0, [pc, #252]	; (19368 <k_heap_aligned_alloc+0x144>)
   1926a:	4621      	mov	r1, r4
   1926c:	f004 faa2 	bl	1d7b4 <printk>
   19270:	483a      	ldr	r0, [pc, #232]	; (1935c <k_heap_aligned_alloc+0x138>)
   19272:	2181      	movs	r1, #129	; 0x81
   19274:	f004 fcf8 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   19278:	4620      	mov	r0, r4
   1927a:	f000 fb41 	bl	19900 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1927e:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   19282:	b17b      	cbz	r3, 192a4 <k_heap_aligned_alloc+0x80>
   19284:	ea58 0309 	orrs.w	r3, r8, r9
   19288:	d00c      	beq.n	192a4 <k_heap_aligned_alloc+0x80>
   1928a:	4938      	ldr	r1, [pc, #224]	; (1936c <k_heap_aligned_alloc+0x148>)
   1928c:	4a38      	ldr	r2, [pc, #224]	; (19370 <k_heap_aligned_alloc+0x14c>)
   1928e:	4835      	ldr	r0, [pc, #212]	; (19364 <k_heap_aligned_alloc+0x140>)
   19290:	2349      	movs	r3, #73	; 0x49
   19292:	f004 fa8f 	bl	1d7b4 <printk>
   19296:	4837      	ldr	r0, [pc, #220]	; (19374 <k_heap_aligned_alloc+0x150>)
   19298:	f004 fa8c 	bl	1d7b4 <printk>
   1929c:	4834      	ldr	r0, [pc, #208]	; (19370 <k_heap_aligned_alloc+0x14c>)
   1929e:	2149      	movs	r1, #73	; 0x49
   192a0:	f004 fce2 	bl	1dc68 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   192a4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1935c <k_heap_aligned_alloc+0x138>
   192a8:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 19360 <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   192ac:	4652      	mov	r2, sl
   192ae:	4659      	mov	r1, fp
   192b0:	4630      	mov	r0, r6
   192b2:	f7f7 f8a7 	bl	10404 <sys_heap_aligned_alloc>
   192b6:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
   192b8:	f003 f99a 	bl	1c5f0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   192bc:	b1cf      	cbz	r7, 192f2 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   192be:	4620      	mov	r0, r4
   192c0:	f000 fb0e 	bl	198e0 <z_spin_unlock_valid>
   192c4:	b968      	cbnz	r0, 192e2 <k_heap_aligned_alloc+0xbe>
   192c6:	4a25      	ldr	r2, [pc, #148]	; (1935c <k_heap_aligned_alloc+0x138>)
   192c8:	492b      	ldr	r1, [pc, #172]	; (19378 <k_heap_aligned_alloc+0x154>)
   192ca:	4826      	ldr	r0, [pc, #152]	; (19364 <k_heap_aligned_alloc+0x140>)
   192cc:	23ac      	movs	r3, #172	; 0xac
   192ce:	f004 fa71 	bl	1d7b4 <printk>
   192d2:	482a      	ldr	r0, [pc, #168]	; (1937c <k_heap_aligned_alloc+0x158>)
   192d4:	4621      	mov	r1, r4
   192d6:	f004 fa6d 	bl	1d7b4 <printk>
   192da:	4820      	ldr	r0, [pc, #128]	; (1935c <k_heap_aligned_alloc+0x138>)
   192dc:	21ac      	movs	r1, #172	; 0xac
   192de:	f004 fcc3 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   192e2:	f385 8811 	msr	BASEPRI, r5
   192e6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   192ea:	4638      	mov	r0, r7
   192ec:	b007      	add	sp, #28
   192ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   192f2:	9b04      	ldr	r3, [sp, #16]
   192f4:	1a1b      	subs	r3, r3, r0
   192f6:	9302      	str	r3, [sp, #8]
   192f8:	9b05      	ldr	r3, [sp, #20]
   192fa:	eb63 0301 	sbc.w	r3, r3, r1
   192fe:	9303      	str	r3, [sp, #12]
   19300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19304:	2a01      	cmp	r2, #1
   19306:	f173 0300 	sbcs.w	r3, r3, #0
   1930a:	dbd8      	blt.n	192be <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1930c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19310:	4629      	mov	r1, r5
   19312:	e9cd 2300 	strd	r2, r3, [sp]
   19316:	4620      	mov	r0, r4
   19318:	f106 020c 	add.w	r2, r6, #12
   1931c:	f002 f960 	bl	1b5e0 <z_pend_curr>
	__asm__ volatile(
   19320:	f04f 0340 	mov.w	r3, #64	; 0x40
   19324:	f3ef 8511 	mrs	r5, BASEPRI
   19328:	f383 8812 	msr	BASEPRI_MAX, r3
   1932c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19330:	4620      	mov	r0, r4
   19332:	f000 fac7 	bl	198c4 <z_spin_lock_valid>
   19336:	b968      	cbnz	r0, 19354 <k_heap_aligned_alloc+0x130>
   19338:	480a      	ldr	r0, [pc, #40]	; (19364 <k_heap_aligned_alloc+0x140>)
   1933a:	2381      	movs	r3, #129	; 0x81
   1933c:	4642      	mov	r2, r8
   1933e:	4649      	mov	r1, r9
   19340:	f004 fa38 	bl	1d7b4 <printk>
   19344:	4808      	ldr	r0, [pc, #32]	; (19368 <k_heap_aligned_alloc+0x144>)
   19346:	4621      	mov	r1, r4
   19348:	f004 fa34 	bl	1d7b4 <printk>
   1934c:	2181      	movs	r1, #129	; 0x81
   1934e:	4640      	mov	r0, r8
   19350:	f004 fc8a 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   19354:	4620      	mov	r0, r4
   19356:	f000 fad3 	bl	19900 <z_spin_lock_set_owner>
	return k;
   1935a:	e7a7      	b.n	192ac <k_heap_aligned_alloc+0x88>
   1935c:	00021710 	.word	0x00021710
   19360:	00021762 	.word	0x00021762
   19364:	00021650 	.word	0x00021650
   19368:	00021777 	.word	0x00021777
   1936c:	00022b7d 	.word	0x00022b7d
   19370:	00022b45 	.word	0x00022b45
   19374:	000224f9 	.word	0x000224f9
   19378:	00021736 	.word	0x00021736
   1937c:	0002174d 	.word	0x0002174d

00019380 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   19380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19382:	4605      	mov	r5, r0
   19384:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   19386:	f100 0414 	add.w	r4, r0, #20
   1938a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1938e:	f3ef 8711 	mrs	r7, BASEPRI
   19392:	f383 8812 	msr	BASEPRI_MAX, r3
   19396:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1939a:	4620      	mov	r0, r4
   1939c:	f000 fa92 	bl	198c4 <z_spin_lock_valid>
   193a0:	b968      	cbnz	r0, 193be <k_heap_free+0x3e>
   193a2:	4a1b      	ldr	r2, [pc, #108]	; (19410 <k_heap_free+0x90>)
   193a4:	491b      	ldr	r1, [pc, #108]	; (19414 <k_heap_free+0x94>)
   193a6:	481c      	ldr	r0, [pc, #112]	; (19418 <k_heap_free+0x98>)
   193a8:	2381      	movs	r3, #129	; 0x81
   193aa:	f004 fa03 	bl	1d7b4 <printk>
   193ae:	481b      	ldr	r0, [pc, #108]	; (1941c <k_heap_free+0x9c>)
   193b0:	4621      	mov	r1, r4
   193b2:	f004 f9ff 	bl	1d7b4 <printk>
   193b6:	4816      	ldr	r0, [pc, #88]	; (19410 <k_heap_free+0x90>)
   193b8:	2181      	movs	r1, #129	; 0x81
   193ba:	f004 fc55 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   193be:	4620      	mov	r0, r4
   193c0:	f000 fa9e 	bl	19900 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   193c4:	4628      	mov	r0, r5
   193c6:	4631      	mov	r1, r6
   193c8:	f7f6 ffc6 	bl	10358 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   193cc:	f105 000c 	add.w	r0, r5, #12
   193d0:	f007 fa88 	bl	208e4 <z_unpend_all>
   193d4:	b128      	cbz	r0, 193e2 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   193d6:	4639      	mov	r1, r7
   193d8:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   193da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   193de:	f001 bcad 	b.w	1ad3c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   193e2:	4620      	mov	r0, r4
   193e4:	f000 fa7c 	bl	198e0 <z_spin_unlock_valid>
   193e8:	b968      	cbnz	r0, 19406 <k_heap_free+0x86>
   193ea:	4a09      	ldr	r2, [pc, #36]	; (19410 <k_heap_free+0x90>)
   193ec:	490c      	ldr	r1, [pc, #48]	; (19420 <k_heap_free+0xa0>)
   193ee:	480a      	ldr	r0, [pc, #40]	; (19418 <k_heap_free+0x98>)
   193f0:	23ac      	movs	r3, #172	; 0xac
   193f2:	f004 f9df 	bl	1d7b4 <printk>
   193f6:	480b      	ldr	r0, [pc, #44]	; (19424 <k_heap_free+0xa4>)
   193f8:	4621      	mov	r1, r4
   193fa:	f004 f9db 	bl	1d7b4 <printk>
   193fe:	4804      	ldr	r0, [pc, #16]	; (19410 <k_heap_free+0x90>)
   19400:	21ac      	movs	r1, #172	; 0xac
   19402:	f004 fc31 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   19406:	f387 8811 	msr	BASEPRI, r7
   1940a:	f3bf 8f6f 	isb	sy
}
   1940e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19410:	00021710 	.word	0x00021710
   19414:	00021762 	.word	0x00021762
   19418:	00021650 	.word	0x00021650
   1941c:	00021777 	.word	0x00021777
   19420:	00021736 	.word	0x00021736
   19424:	0002174d 	.word	0x0002174d

00019428 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   19428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1942c:	4d16      	ldr	r5, [pc, #88]	; (19488 <init_mem_slab_module+0x60>)
   1942e:	4c17      	ldr	r4, [pc, #92]	; (1948c <init_mem_slab_module+0x64>)
   19430:	4e17      	ldr	r6, [pc, #92]	; (19490 <init_mem_slab_module+0x68>)
   19432:	46a8      	mov	r8, r5
   19434:	42ac      	cmp	r4, r5
   19436:	d90c      	bls.n	19452 <init_mem_slab_module+0x2a>
   19438:	4916      	ldr	r1, [pc, #88]	; (19494 <init_mem_slab_module+0x6c>)
   1943a:	4817      	ldr	r0, [pc, #92]	; (19498 <init_mem_slab_module+0x70>)
   1943c:	233c      	movs	r3, #60	; 0x3c
   1943e:	4632      	mov	r2, r6
   19440:	f004 f9b8 	bl	1d7b4 <printk>
   19444:	4815      	ldr	r0, [pc, #84]	; (1949c <init_mem_slab_module+0x74>)
   19446:	f004 f9b5 	bl	1d7b4 <printk>
   1944a:	213c      	movs	r1, #60	; 0x3c
   1944c:	4630      	mov	r0, r6
   1944e:	f004 fc0b 	bl	1dc68 <assert_post_action>
   19452:	4544      	cmp	r4, r8
   19454:	d302      	bcc.n	1945c <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
   19456:	2000      	movs	r0, #0
	return rc;
}
   19458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1945c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   19460:	ea41 0302 	orr.w	r3, r1, r2
   19464:	f013 0303 	ands.w	r3, r3, #3
   19468:	d10b      	bne.n	19482 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   1946a:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   1946c:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1946e:	4283      	cmp	r3, r0
   19470:	d101      	bne.n	19476 <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19472:	3420      	adds	r4, #32
   19474:	e7de      	b.n	19434 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   19476:	69a7      	ldr	r7, [r4, #24]
   19478:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1947a:	3301      	adds	r3, #1
		slab->free_list = p;
   1947c:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
   1947e:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   19480:	e7f5      	b.n	1946e <init_mem_slab_module+0x46>
		return -EINVAL;
   19482:	f06f 0015 	mvn.w	r0, #21
	return rc;
   19486:	e7e7      	b.n	19458 <init_mem_slab_module+0x30>
   19488:	20000634 	.word	0x20000634
   1948c:	200005d4 	.word	0x200005d4
   19490:	00022bc2 	.word	0x00022bc2
   19494:	00022be7 	.word	0x00022be7
   19498:	00021650 	.word	0x00021650
   1949c:	00022125 	.word	0x00022125

000194a0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   194a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   194a4:	4604      	mov	r4, r0
   194a6:	460e      	mov	r6, r1
   194a8:	4690      	mov	r8, r2
   194aa:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   194ac:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   194b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   194b4:	f3ef 8711 	mrs	r7, BASEPRI
   194b8:	f383 8812 	msr	BASEPRI_MAX, r3
   194bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   194c0:	4628      	mov	r0, r5
   194c2:	f000 f9ff 	bl	198c4 <z_spin_lock_valid>
   194c6:	b968      	cbnz	r0, 194e4 <k_mem_slab_alloc+0x44>
   194c8:	4a24      	ldr	r2, [pc, #144]	; (1955c <k_mem_slab_alloc+0xbc>)
   194ca:	4925      	ldr	r1, [pc, #148]	; (19560 <k_mem_slab_alloc+0xc0>)
   194cc:	4825      	ldr	r0, [pc, #148]	; (19564 <k_mem_slab_alloc+0xc4>)
   194ce:	2381      	movs	r3, #129	; 0x81
   194d0:	f004 f970 	bl	1d7b4 <printk>
   194d4:	4824      	ldr	r0, [pc, #144]	; (19568 <k_mem_slab_alloc+0xc8>)
   194d6:	4629      	mov	r1, r5
   194d8:	f004 f96c 	bl	1d7b4 <printk>
   194dc:	481f      	ldr	r0, [pc, #124]	; (1955c <k_mem_slab_alloc+0xbc>)
   194de:	2181      	movs	r1, #129	; 0x81
   194e0:	f004 fbc2 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   194e4:	4628      	mov	r0, r5
   194e6:	f000 fa0b 	bl	19900 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   194ea:	69a3      	ldr	r3, [r4, #24]
   194ec:	b1eb      	cbz	r3, 1952a <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
   194ee:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   194f0:	681b      	ldr	r3, [r3, #0]
   194f2:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   194f4:	69e3      	ldr	r3, [r4, #28]
   194f6:	3301      	adds	r3, #1
   194f8:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   194fa:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   194fc:	4628      	mov	r0, r5
   194fe:	f000 f9ef 	bl	198e0 <z_spin_unlock_valid>
   19502:	b968      	cbnz	r0, 19520 <k_mem_slab_alloc+0x80>
   19504:	4a15      	ldr	r2, [pc, #84]	; (1955c <k_mem_slab_alloc+0xbc>)
   19506:	4919      	ldr	r1, [pc, #100]	; (1956c <k_mem_slab_alloc+0xcc>)
   19508:	4816      	ldr	r0, [pc, #88]	; (19564 <k_mem_slab_alloc+0xc4>)
   1950a:	23ac      	movs	r3, #172	; 0xac
   1950c:	f004 f952 	bl	1d7b4 <printk>
   19510:	4817      	ldr	r0, [pc, #92]	; (19570 <k_mem_slab_alloc+0xd0>)
   19512:	4629      	mov	r1, r5
   19514:	f004 f94e 	bl	1d7b4 <printk>
   19518:	4810      	ldr	r0, [pc, #64]	; (1955c <k_mem_slab_alloc+0xbc>)
   1951a:	21ac      	movs	r1, #172	; 0xac
   1951c:	f004 fba4 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   19520:	f387 8811 	msr	BASEPRI, r7
   19524:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   19528:	e013      	b.n	19552 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1952a:	ea58 0209 	orrs.w	r2, r8, r9
   1952e:	d103      	bne.n	19538 <k_mem_slab_alloc+0x98>
		*mem = NULL;
   19530:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   19532:	f06f 040b 	mvn.w	r4, #11
   19536:	e7e1      	b.n	194fc <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   19538:	4622      	mov	r2, r4
   1953a:	e9cd 8900 	strd	r8, r9, [sp]
   1953e:	4639      	mov	r1, r7
   19540:	4628      	mov	r0, r5
   19542:	f002 f84d 	bl	1b5e0 <z_pend_curr>
		if (result == 0) {
   19546:	4604      	mov	r4, r0
   19548:	b918      	cbnz	r0, 19552 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
   1954a:	4b0a      	ldr	r3, [pc, #40]	; (19574 <k_mem_slab_alloc+0xd4>)
   1954c:	689b      	ldr	r3, [r3, #8]
   1954e:	695b      	ldr	r3, [r3, #20]
   19550:	6033      	str	r3, [r6, #0]
}
   19552:	4620      	mov	r0, r4
   19554:	b003      	add	sp, #12
   19556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1955a:	bf00      	nop
   1955c:	00021710 	.word	0x00021710
   19560:	00021762 	.word	0x00021762
   19564:	00021650 	.word	0x00021650
   19568:	00021777 	.word	0x00021777
   1956c:	00021736 	.word	0x00021736
   19570:	0002174d 	.word	0x0002174d
   19574:	2000203c 	.word	0x2000203c

00019578 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   19578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1957c:	4604      	mov	r4, r0
   1957e:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   19580:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   19584:	f04f 0340 	mov.w	r3, #64	; 0x40
   19588:	f3ef 8711 	mrs	r7, BASEPRI
   1958c:	f383 8812 	msr	BASEPRI_MAX, r3
   19590:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19594:	4628      	mov	r0, r5
   19596:	f000 f995 	bl	198c4 <z_spin_lock_valid>
   1959a:	b968      	cbnz	r0, 195b8 <k_mem_slab_free+0x40>
   1959c:	4a22      	ldr	r2, [pc, #136]	; (19628 <k_mem_slab_free+0xb0>)
   1959e:	4923      	ldr	r1, [pc, #140]	; (1962c <k_mem_slab_free+0xb4>)
   195a0:	4823      	ldr	r0, [pc, #140]	; (19630 <k_mem_slab_free+0xb8>)
   195a2:	2381      	movs	r3, #129	; 0x81
   195a4:	f004 f906 	bl	1d7b4 <printk>
   195a8:	4822      	ldr	r0, [pc, #136]	; (19634 <k_mem_slab_free+0xbc>)
   195aa:	4629      	mov	r1, r5
   195ac:	f004 f902 	bl	1d7b4 <printk>
   195b0:	481d      	ldr	r0, [pc, #116]	; (19628 <k_mem_slab_free+0xb0>)
   195b2:	2181      	movs	r1, #129	; 0x81
   195b4:	f004 fb58 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   195b8:	4628      	mov	r0, r5
   195ba:	f000 f9a1 	bl	19900 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   195be:	f8d4 8018 	ldr.w	r8, [r4, #24]
   195c2:	f1b8 0f00 	cmp.w	r8, #0
   195c6:	d10f      	bne.n	195e8 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   195c8:	4620      	mov	r0, r4
   195ca:	f002 fa07 	bl	1b9dc <z_unpend_first_thread>

		if (pending_thread != NULL) {
   195ce:	b158      	cbz	r0, 195e8 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   195d0:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   195d2:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   195d4:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   195d8:	f001 fe50 	bl	1b27c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   195dc:	4639      	mov	r1, r7
   195de:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   195e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   195e4:	f001 bbaa 	b.w	1ad3c <z_reschedule>
	**(char ***) mem = slab->free_list;
   195e8:	6833      	ldr	r3, [r6, #0]
   195ea:	69a2      	ldr	r2, [r4, #24]
   195ec:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   195ee:	6833      	ldr	r3, [r6, #0]
   195f0:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   195f2:	69e3      	ldr	r3, [r4, #28]
   195f4:	3b01      	subs	r3, #1
   195f6:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   195f8:	4628      	mov	r0, r5
   195fa:	f000 f971 	bl	198e0 <z_spin_unlock_valid>
   195fe:	b968      	cbnz	r0, 1961c <k_mem_slab_free+0xa4>
   19600:	4a09      	ldr	r2, [pc, #36]	; (19628 <k_mem_slab_free+0xb0>)
   19602:	490d      	ldr	r1, [pc, #52]	; (19638 <k_mem_slab_free+0xc0>)
   19604:	480a      	ldr	r0, [pc, #40]	; (19630 <k_mem_slab_free+0xb8>)
   19606:	23ac      	movs	r3, #172	; 0xac
   19608:	f004 f8d4 	bl	1d7b4 <printk>
   1960c:	480b      	ldr	r0, [pc, #44]	; (1963c <k_mem_slab_free+0xc4>)
   1960e:	4629      	mov	r1, r5
   19610:	f004 f8d0 	bl	1d7b4 <printk>
   19614:	4804      	ldr	r0, [pc, #16]	; (19628 <k_mem_slab_free+0xb0>)
   19616:	21ac      	movs	r1, #172	; 0xac
   19618:	f004 fb26 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1961c:	f387 8811 	msr	BASEPRI, r7
   19620:	f3bf 8f6f 	isb	sy
}
   19624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19628:	00021710 	.word	0x00021710
   1962c:	00021762 	.word	0x00021762
   19630:	00021650 	.word	0x00021650
   19634:	00021777 	.word	0x00021777
   19638:	00021736 	.word	0x00021736
   1963c:	0002174d 	.word	0x0002174d

00019640 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   19640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19644:	b085      	sub	sp, #20
   19646:	4604      	mov	r4, r0
   19648:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   1964c:	f1b8 0f0f 	cmp.w	r8, #15
{
   19650:	460f      	mov	r7, r1
   19652:	4615      	mov	r5, r2
   19654:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   19656:	d132      	bne.n	196be <z_setup_new_thread+0x7e>
   19658:	4b25      	ldr	r3, [pc, #148]	; (196f0 <z_setup_new_thread+0xb0>)
   1965a:	4599      	cmp	r9, r3
   1965c:	d133      	bne.n	196c6 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1965e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   19662:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   19666:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19668:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1966a:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   1966c:	2304      	movs	r3, #4
   1966e:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19670:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   19674:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
   19678:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1967c:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
   1967e:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19682:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19684:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1968a:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
   1968c:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1968e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19690:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   19692:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19694:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   19696:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   1969a:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   1969c:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   1969e:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   196a0:	4642      	mov	r2, r8
   196a2:	4639      	mov	r1, r7
   196a4:	4620      	mov	r0, r4
   196a6:	f7f8 f887 	bl	117b8 <arch_new_thread>
	if (!_current) {
   196aa:	4b12      	ldr	r3, [pc, #72]	; (196f4 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
   196ac:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   196ae:	689b      	ldr	r3, [r3, #8]
   196b0:	b103      	cbz	r3, 196b4 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
   196b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   196b4:	6763      	str	r3, [r4, #116]	; 0x74
}
   196b6:	4640      	mov	r0, r8
   196b8:	b005      	add	sp, #20
   196ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   196be:	f108 0310 	add.w	r3, r8, #16
   196c2:	2b1e      	cmp	r3, #30
   196c4:	d9cb      	bls.n	1965e <z_setup_new_thread+0x1e>
   196c6:	4a0c      	ldr	r2, [pc, #48]	; (196f8 <z_setup_new_thread+0xb8>)
   196c8:	490c      	ldr	r1, [pc, #48]	; (196fc <z_setup_new_thread+0xbc>)
   196ca:	480d      	ldr	r0, [pc, #52]	; (19700 <z_setup_new_thread+0xc0>)
   196cc:	f240 2305 	movw	r3, #517	; 0x205
   196d0:	f004 f870 	bl	1d7b4 <printk>
   196d4:	4641      	mov	r1, r8
   196d6:	480b      	ldr	r0, [pc, #44]	; (19704 <z_setup_new_thread+0xc4>)
   196d8:	f06f 030f 	mvn.w	r3, #15
   196dc:	220e      	movs	r2, #14
   196de:	f004 f869 	bl	1d7b4 <printk>
   196e2:	4805      	ldr	r0, [pc, #20]	; (196f8 <z_setup_new_thread+0xb8>)
   196e4:	f240 2105 	movw	r1, #517	; 0x205
   196e8:	f004 fabe 	bl	1dc68 <assert_post_action>
   196ec:	e7b7      	b.n	1965e <z_setup_new_thread+0x1e>
   196ee:	bf00      	nop
   196f0:	00019911 	.word	0x00019911
   196f4:	2000203c 	.word	0x2000203c
   196f8:	00022c04 	.word	0x00022c04
   196fc:	00022c27 	.word	0x00022c27
   19700:	00021650 	.word	0x00021650
   19704:	00022ca7 	.word	0x00022ca7

00019708 <z_impl_k_thread_create>:
{
   19708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1970c:	b087      	sub	sp, #28
   1970e:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   19712:	4604      	mov	r4, r0
   19714:	460d      	mov	r5, r1
   19716:	4690      	mov	r8, r2
   19718:	4699      	mov	r9, r3
   1971a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1971e:	b173      	cbz	r3, 1973e <z_impl_k_thread_create+0x36>
   19720:	491b      	ldr	r1, [pc, #108]	; (19790 <z_impl_k_thread_create+0x88>)
   19722:	4a1c      	ldr	r2, [pc, #112]	; (19794 <z_impl_k_thread_create+0x8c>)
   19724:	481c      	ldr	r0, [pc, #112]	; (19798 <z_impl_k_thread_create+0x90>)
   19726:	f240 236e 	movw	r3, #622	; 0x26e
   1972a:	f004 f843 	bl	1d7b4 <printk>
   1972e:	481b      	ldr	r0, [pc, #108]	; (1979c <z_impl_k_thread_create+0x94>)
   19730:	f004 f840 	bl	1d7b4 <printk>
   19734:	4817      	ldr	r0, [pc, #92]	; (19794 <z_impl_k_thread_create+0x8c>)
   19736:	f240 216e 	movw	r1, #622	; 0x26e
   1973a:	f004 fa95 	bl	1dc68 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1973e:	2300      	movs	r3, #0
   19740:	9305      	str	r3, [sp, #20]
   19742:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19744:	9304      	str	r3, [sp, #16]
   19746:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19748:	9303      	str	r3, [sp, #12]
   1974a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1974c:	9302      	str	r3, [sp, #8]
   1974e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19750:	9301      	str	r3, [sp, #4]
   19752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19754:	9300      	str	r3, [sp, #0]
   19756:	4642      	mov	r2, r8
   19758:	464b      	mov	r3, r9
   1975a:	4629      	mov	r1, r5
   1975c:	4620      	mov	r0, r4
   1975e:	f7ff ff6f 	bl	19640 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   19762:	1c7b      	adds	r3, r7, #1
   19764:	bf08      	it	eq
   19766:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1976a:	d005      	beq.n	19778 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1976c:	ea56 0307 	orrs.w	r3, r6, r7
   19770:	d106      	bne.n	19780 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   19772:	4620      	mov	r0, r4
   19774:	f001 fdca 	bl	1b30c <z_sched_start>
}
   19778:	4620      	mov	r0, r4
   1977a:	b007      	add	sp, #28
   1977c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   19780:	4907      	ldr	r1, [pc, #28]	; (197a0 <z_impl_k_thread_create+0x98>)
   19782:	4632      	mov	r2, r6
   19784:	463b      	mov	r3, r7
   19786:	f104 0018 	add.w	r0, r4, #24
   1978a:	f002 fcab 	bl	1c0e4 <z_add_timeout>
   1978e:	e7f3      	b.n	19778 <z_impl_k_thread_create+0x70>
   19790:	00022cd8 	.word	0x00022cd8
   19794:	00022c04 	.word	0x00022c04
   19798:	00021650 	.word	0x00021650
   1979c:	00022cea 	.word	0x00022cea
   197a0:	0001b3b5 	.word	0x0001b3b5

000197a4 <z_init_static_threads>:
{
   197a4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   197a8:	4f3f      	ldr	r7, [pc, #252]	; (198a8 <z_init_static_threads+0x104>)
   197aa:	4d40      	ldr	r5, [pc, #256]	; (198ac <z_init_static_threads+0x108>)
   197ac:	f8df 810c 	ldr.w	r8, [pc, #268]	; 198bc <z_init_static_threads+0x118>
{
   197b0:	b086      	sub	sp, #24
   197b2:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   197b4:	42bd      	cmp	r5, r7
   197b6:	d90e      	bls.n	197d6 <z_init_static_threads+0x32>
   197b8:	493d      	ldr	r1, [pc, #244]	; (198b0 <z_init_static_threads+0x10c>)
   197ba:	483e      	ldr	r0, [pc, #248]	; (198b4 <z_init_static_threads+0x110>)
   197bc:	f240 23d5 	movw	r3, #725	; 0x2d5
   197c0:	4642      	mov	r2, r8
   197c2:	f003 fff7 	bl	1d7b4 <printk>
   197c6:	483c      	ldr	r0, [pc, #240]	; (198b8 <z_init_static_threads+0x114>)
   197c8:	f003 fff4 	bl	1d7b4 <printk>
   197cc:	f240 21d5 	movw	r1, #725	; 0x2d5
   197d0:	4640      	mov	r0, r8
   197d2:	f004 fa49 	bl	1dc68 <assert_post_action>
   197d6:	42b5      	cmp	r5, r6
   197d8:	f105 0430 	add.w	r4, r5, #48	; 0x30
   197dc:	d31f      	bcc.n	1981e <z_init_static_threads+0x7a>
	k_sched_lock();
   197de:	f001 faf1 	bl	1adc4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   197e2:	4c32      	ldr	r4, [pc, #200]	; (198ac <z_init_static_threads+0x108>)
   197e4:	4d35      	ldr	r5, [pc, #212]	; (198bc <z_init_static_threads+0x118>)
   197e6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 198b0 <z_init_static_threads+0x10c>
   197ea:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 198b4 <z_init_static_threads+0x110>
   197ee:	42b4      	cmp	r4, r6
   197f0:	d90e      	bls.n	19810 <z_init_static_threads+0x6c>
   197f2:	4641      	mov	r1, r8
   197f4:	f44f 733d 	mov.w	r3, #756	; 0x2f4
   197f8:	462a      	mov	r2, r5
   197fa:	4648      	mov	r0, r9
   197fc:	f003 ffda 	bl	1d7b4 <printk>
   19800:	482d      	ldr	r0, [pc, #180]	; (198b8 <z_init_static_threads+0x114>)
   19802:	f003 ffd7 	bl	1d7b4 <printk>
   19806:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   1980a:	4628      	mov	r0, r5
   1980c:	f004 fa2c 	bl	1dc68 <assert_post_action>
   19810:	42b4      	cmp	r4, r6
   19812:	d321      	bcc.n	19858 <z_init_static_threads+0xb4>
}
   19814:	b006      	add	sp, #24
   19816:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   1981a:	f002 b817 	b.w	1b84c <k_sched_unlock>
		z_setup_new_thread(
   1981e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19822:	9305      	str	r3, [sp, #20]
   19824:	f854 3c10 	ldr.w	r3, [r4, #-16]
   19828:	9304      	str	r3, [sp, #16]
   1982a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1982e:	9303      	str	r3, [sp, #12]
   19830:	f854 3c18 	ldr.w	r3, [r4, #-24]
   19834:	9302      	str	r3, [sp, #8]
   19836:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1983a:	9301      	str	r3, [sp, #4]
   1983c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   19840:	9300      	str	r3, [sp, #0]
   19842:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   19846:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1984a:	f7ff fef9 	bl	19640 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1984e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   19852:	655d      	str	r5, [r3, #84]	; 0x54
   19854:	4625      	mov	r5, r4
   19856:	e7ad      	b.n	197b4 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   19858:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1985a:	1c4b      	adds	r3, r1, #1
   1985c:	d014      	beq.n	19888 <z_init_static_threads+0xe4>
   1985e:	f240 32e7 	movw	r2, #999	; 0x3e7
   19862:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
   19864:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   19868:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1986c:	4693      	mov	fp, r2
   1986e:	469c      	mov	ip, r3
   19870:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19874:	459c      	cmp	ip, r3
   19876:	bf08      	it	eq
   19878:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
   1987a:	6827      	ldr	r7, [r4, #0]
   1987c:	4658      	mov	r0, fp
   1987e:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19880:	d104      	bne.n	1988c <z_init_static_threads+0xe8>
	z_sched_start(thread);
   19882:	4638      	mov	r0, r7
   19884:	f001 fd42 	bl	1b30c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   19888:	3430      	adds	r4, #48	; 0x30
   1988a:	e7b0      	b.n	197ee <z_init_static_threads+0x4a>
   1988c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19890:	2300      	movs	r3, #0
   19892:	f7e6 fc75 	bl	180 <__aeabi_uldivmod>
   19896:	4602      	mov	r2, r0
   19898:	460b      	mov	r3, r1
   1989a:	f107 0018 	add.w	r0, r7, #24
   1989e:	4908      	ldr	r1, [pc, #32]	; (198c0 <z_init_static_threads+0x11c>)
   198a0:	f002 fc20 	bl	1c0e4 <z_add_timeout>
   198a4:	e7f0      	b.n	19888 <z_init_static_threads+0xe4>
   198a6:	bf00      	nop
   198a8:	200005d4 	.word	0x200005d4
   198ac:	200005d4 	.word	0x200005d4
   198b0:	00022d0f 	.word	0x00022d0f
   198b4:	00021650 	.word	0x00021650
   198b8:	00022125 	.word	0x00022125
   198bc:	00022c04 	.word	0x00022c04
   198c0:	0001b3b5 	.word	0x0001b3b5

000198c4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   198c4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   198c6:	b138      	cbz	r0, 198d8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   198c8:	4b04      	ldr	r3, [pc, #16]	; (198dc <z_spin_lock_valid+0x18>)
   198ca:	7d1b      	ldrb	r3, [r3, #20]
   198cc:	f000 0003 	and.w	r0, r0, #3
   198d0:	1ac0      	subs	r0, r0, r3
   198d2:	bf18      	it	ne
   198d4:	2001      	movne	r0, #1
   198d6:	4770      	bx	lr
			return false;
		}
	}
	return true;
   198d8:	2001      	movs	r0, #1
}
   198da:	4770      	bx	lr
   198dc:	2000203c 	.word	0x2000203c

000198e0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   198e0:	4906      	ldr	r1, [pc, #24]	; (198fc <z_spin_unlock_valid+0x1c>)
{
   198e2:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   198e4:	688a      	ldr	r2, [r1, #8]
   198e6:	7d08      	ldrb	r0, [r1, #20]
   198e8:	6819      	ldr	r1, [r3, #0]
   198ea:	4302      	orrs	r2, r0
   198ec:	4291      	cmp	r1, r2
   198ee:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   198f2:	bf04      	itt	eq
   198f4:	6018      	streq	r0, [r3, #0]
	return true;
   198f6:	2001      	moveq	r0, #1
}
   198f8:	4770      	bx	lr
   198fa:	bf00      	nop
   198fc:	2000203c 	.word	0x2000203c

00019900 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   19900:	4a02      	ldr	r2, [pc, #8]	; (1990c <z_spin_lock_set_owner+0xc>)
   19902:	7d11      	ldrb	r1, [r2, #20]
   19904:	6893      	ldr	r3, [r2, #8]
   19906:	430b      	orrs	r3, r1
   19908:	6003      	str	r3, [r0, #0]
}
   1990a:	4770      	bx	lr
   1990c:	2000203c 	.word	0x2000203c

00019910 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   19910:	4c11      	ldr	r4, [pc, #68]	; (19958 <idle+0x48>)
   19912:	68a2      	ldr	r2, [r4, #8]
   19914:	f992 200e 	ldrsb.w	r2, [r2, #14]
   19918:	2a00      	cmp	r2, #0
{
   1991a:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1991c:	da09      	bge.n	19932 <idle+0x22>
   1991e:	490f      	ldr	r1, [pc, #60]	; (1995c <idle+0x4c>)
   19920:	480f      	ldr	r0, [pc, #60]	; (19960 <idle+0x50>)
   19922:	4a10      	ldr	r2, [pc, #64]	; (19964 <idle+0x54>)
   19924:	2346      	movs	r3, #70	; 0x46
   19926:	f003 ff45 	bl	1d7b4 <printk>
   1992a:	480e      	ldr	r0, [pc, #56]	; (19964 <idle+0x54>)
   1992c:	2146      	movs	r1, #70	; 0x46
   1992e:	f004 f99b 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   19932:	f04f 0240 	mov.w	r2, #64	; 0x40
   19936:	f3ef 8311 	mrs	r3, BASEPRI
   1993a:	f382 8812 	msr	BASEPRI_MAX, r2
   1993e:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   19942:	f002 fcf1 	bl	1c328 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   19946:	61a0      	str	r0, [r4, #24]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   19948:	f7f7 fb08 	bl	10f5c <pm_system_suspend>
   1994c:	2800      	cmp	r0, #0
   1994e:	d1f0      	bne.n	19932 <idle+0x22>
	arch_cpu_idle();
   19950:	f7f7 fe2e 	bl	115b0 <arch_cpu_idle>
}
   19954:	e7ed      	b.n	19932 <idle+0x22>
   19956:	bf00      	nop
   19958:	2000203c 	.word	0x2000203c
   1995c:	00022d5d 	.word	0x00022d5d
   19960:	00021650 	.word	0x00021650
   19964:	00022d3c 	.word	0x00022d3c

00019968 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   19968:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1996c:	4604      	mov	r4, r0
   1996e:	4616      	mov	r6, r2
   19970:	461f      	mov	r7, r3
   19972:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   19976:	b163      	cbz	r3, 19992 <z_impl_k_mutex_lock+0x2a>
   19978:	4970      	ldr	r1, [pc, #448]	; (19b3c <z_impl_k_mutex_lock+0x1d4>)
   1997a:	4a71      	ldr	r2, [pc, #452]	; (19b40 <z_impl_k_mutex_lock+0x1d8>)
   1997c:	4871      	ldr	r0, [pc, #452]	; (19b44 <z_impl_k_mutex_lock+0x1dc>)
   1997e:	2365      	movs	r3, #101	; 0x65
   19980:	f003 ff18 	bl	1d7b4 <printk>
   19984:	4870      	ldr	r0, [pc, #448]	; (19b48 <z_impl_k_mutex_lock+0x1e0>)
   19986:	f003 ff15 	bl	1d7b4 <printk>
   1998a:	486d      	ldr	r0, [pc, #436]	; (19b40 <z_impl_k_mutex_lock+0x1d8>)
   1998c:	2165      	movs	r1, #101	; 0x65
   1998e:	f004 f96b 	bl	1dc68 <assert_post_action>
   19992:	f04f 0340 	mov.w	r3, #64	; 0x40
   19996:	f3ef 8811 	mrs	r8, BASEPRI
   1999a:	f383 8812 	msr	BASEPRI_MAX, r3
   1999e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   199a2:	486a      	ldr	r0, [pc, #424]	; (19b4c <z_impl_k_mutex_lock+0x1e4>)
   199a4:	f7ff ff8e 	bl	198c4 <z_spin_lock_valid>
   199a8:	b968      	cbnz	r0, 199c6 <z_impl_k_mutex_lock+0x5e>
   199aa:	4a69      	ldr	r2, [pc, #420]	; (19b50 <z_impl_k_mutex_lock+0x1e8>)
   199ac:	4969      	ldr	r1, [pc, #420]	; (19b54 <z_impl_k_mutex_lock+0x1ec>)
   199ae:	4865      	ldr	r0, [pc, #404]	; (19b44 <z_impl_k_mutex_lock+0x1dc>)
   199b0:	2381      	movs	r3, #129	; 0x81
   199b2:	f003 feff 	bl	1d7b4 <printk>
   199b6:	4965      	ldr	r1, [pc, #404]	; (19b4c <z_impl_k_mutex_lock+0x1e4>)
   199b8:	4867      	ldr	r0, [pc, #412]	; (19b58 <z_impl_k_mutex_lock+0x1f0>)
   199ba:	f003 fefb 	bl	1d7b4 <printk>
   199be:	4864      	ldr	r0, [pc, #400]	; (19b50 <z_impl_k_mutex_lock+0x1e8>)
   199c0:	2181      	movs	r1, #129	; 0x81
   199c2:	f004 f951 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   199c6:	4861      	ldr	r0, [pc, #388]	; (19b4c <z_impl_k_mutex_lock+0x1e4>)
   199c8:	f7ff ff9a 	bl	19900 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   199cc:	68e3      	ldr	r3, [r4, #12]
   199ce:	4a63      	ldr	r2, [pc, #396]	; (19b5c <z_impl_k_mutex_lock+0x1f4>)
   199d0:	b1fb      	cbz	r3, 19a12 <z_impl_k_mutex_lock+0xaa>
   199d2:	68a0      	ldr	r0, [r4, #8]
   199d4:	6891      	ldr	r1, [r2, #8]
   199d6:	4288      	cmp	r0, r1
   199d8:	d03d      	beq.n	19a56 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   199da:	ea56 0307 	orrs.w	r3, r6, r7
   199de:	d13c      	bne.n	19a5a <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   199e0:	485a      	ldr	r0, [pc, #360]	; (19b4c <z_impl_k_mutex_lock+0x1e4>)
   199e2:	f7ff ff7d 	bl	198e0 <z_spin_unlock_valid>
   199e6:	b968      	cbnz	r0, 19a04 <z_impl_k_mutex_lock+0x9c>
   199e8:	4a59      	ldr	r2, [pc, #356]	; (19b50 <z_impl_k_mutex_lock+0x1e8>)
   199ea:	495d      	ldr	r1, [pc, #372]	; (19b60 <z_impl_k_mutex_lock+0x1f8>)
   199ec:	4855      	ldr	r0, [pc, #340]	; (19b44 <z_impl_k_mutex_lock+0x1dc>)
   199ee:	23ac      	movs	r3, #172	; 0xac
   199f0:	f003 fee0 	bl	1d7b4 <printk>
   199f4:	4955      	ldr	r1, [pc, #340]	; (19b4c <z_impl_k_mutex_lock+0x1e4>)
   199f6:	485b      	ldr	r0, [pc, #364]	; (19b64 <z_impl_k_mutex_lock+0x1fc>)
   199f8:	f003 fedc 	bl	1d7b4 <printk>
   199fc:	4854      	ldr	r0, [pc, #336]	; (19b50 <z_impl_k_mutex_lock+0x1e8>)
   199fe:	21ac      	movs	r1, #172	; 0xac
   19a00:	f004 f932 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   19a04:	f388 8811 	msr	BASEPRI, r8
   19a08:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   19a0c:	f06f 000f 	mvn.w	r0, #15
   19a10:	e01e      	b.n	19a50 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   19a12:	6891      	ldr	r1, [r2, #8]
   19a14:	f991 100e 	ldrsb.w	r1, [r1, #14]
   19a18:	484c      	ldr	r0, [pc, #304]	; (19b4c <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   19a1a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   19a1c:	3301      	adds	r3, #1
   19a1e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   19a20:	6893      	ldr	r3, [r2, #8]
   19a22:	60a3      	str	r3, [r4, #8]
   19a24:	f7ff ff5c 	bl	198e0 <z_spin_unlock_valid>
   19a28:	b968      	cbnz	r0, 19a46 <z_impl_k_mutex_lock+0xde>
   19a2a:	4a49      	ldr	r2, [pc, #292]	; (19b50 <z_impl_k_mutex_lock+0x1e8>)
   19a2c:	494c      	ldr	r1, [pc, #304]	; (19b60 <z_impl_k_mutex_lock+0x1f8>)
   19a2e:	4845      	ldr	r0, [pc, #276]	; (19b44 <z_impl_k_mutex_lock+0x1dc>)
   19a30:	23ac      	movs	r3, #172	; 0xac
   19a32:	f003 febf 	bl	1d7b4 <printk>
   19a36:	4945      	ldr	r1, [pc, #276]	; (19b4c <z_impl_k_mutex_lock+0x1e4>)
   19a38:	484a      	ldr	r0, [pc, #296]	; (19b64 <z_impl_k_mutex_lock+0x1fc>)
   19a3a:	f003 febb 	bl	1d7b4 <printk>
   19a3e:	4844      	ldr	r0, [pc, #272]	; (19b50 <z_impl_k_mutex_lock+0x1e8>)
   19a40:	21ac      	movs	r1, #172	; 0xac
   19a42:	f004 f911 	bl	1dc68 <assert_post_action>
   19a46:	f388 8811 	msr	BASEPRI, r8
   19a4a:	f3bf 8f6f 	isb	sy
		return 0;
   19a4e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   19a50:	b002      	add	sp, #8
   19a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   19a56:	6921      	ldr	r1, [r4, #16]
   19a58:	e7de      	b.n	19a18 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   19a5a:	f991 100e 	ldrsb.w	r1, [r1, #14]
   19a5e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   19a62:	4299      	cmp	r1, r3
   19a64:	bfa8      	it	ge
   19a66:	4619      	movge	r1, r3
   19a68:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   19a6c:	4291      	cmp	r1, r2
   19a6e:	bfb8      	it	lt
   19a70:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   19a72:	428b      	cmp	r3, r1
   19a74:	dd44      	ble.n	19b00 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
   19a76:	f001 fde3 	bl	1b640 <z_set_prio>
   19a7a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   19a7c:	e9cd 6700 	strd	r6, r7, [sp]
   19a80:	4832      	ldr	r0, [pc, #200]	; (19b4c <z_impl_k_mutex_lock+0x1e4>)
   19a82:	4622      	mov	r2, r4
   19a84:	4641      	mov	r1, r8
   19a86:	f001 fdab 	bl	1b5e0 <z_pend_curr>
	if (got_mutex == 0) {
   19a8a:	2800      	cmp	r0, #0
   19a8c:	d0e0      	beq.n	19a50 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   19a8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19a92:	f3ef 8611 	mrs	r6, BASEPRI
   19a96:	f383 8812 	msr	BASEPRI_MAX, r3
   19a9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19a9e:	482b      	ldr	r0, [pc, #172]	; (19b4c <z_impl_k_mutex_lock+0x1e4>)
   19aa0:	f7ff ff10 	bl	198c4 <z_spin_lock_valid>
   19aa4:	b968      	cbnz	r0, 19ac2 <z_impl_k_mutex_lock+0x15a>
   19aa6:	4a2a      	ldr	r2, [pc, #168]	; (19b50 <z_impl_k_mutex_lock+0x1e8>)
   19aa8:	492a      	ldr	r1, [pc, #168]	; (19b54 <z_impl_k_mutex_lock+0x1ec>)
   19aaa:	4826      	ldr	r0, [pc, #152]	; (19b44 <z_impl_k_mutex_lock+0x1dc>)
   19aac:	2381      	movs	r3, #129	; 0x81
   19aae:	f003 fe81 	bl	1d7b4 <printk>
   19ab2:	4926      	ldr	r1, [pc, #152]	; (19b4c <z_impl_k_mutex_lock+0x1e4>)
   19ab4:	4828      	ldr	r0, [pc, #160]	; (19b58 <z_impl_k_mutex_lock+0x1f0>)
   19ab6:	f003 fe7d 	bl	1d7b4 <printk>
   19aba:	4825      	ldr	r0, [pc, #148]	; (19b50 <z_impl_k_mutex_lock+0x1e8>)
   19abc:	2181      	movs	r1, #129	; 0x81
   19abe:	f004 f8d3 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   19ac2:	4822      	ldr	r0, [pc, #136]	; (19b4c <z_impl_k_mutex_lock+0x1e4>)
   19ac4:	f7ff ff1c 	bl	19900 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   19ac8:	6823      	ldr	r3, [r4, #0]
   19aca:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19acc:	429c      	cmp	r4, r3
   19ace:	d00a      	beq.n	19ae6 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   19ad0:	b14b      	cbz	r3, 19ae6 <z_impl_k_mutex_lock+0x17e>
   19ad2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   19ad6:	4299      	cmp	r1, r3
   19ad8:	bfa8      	it	ge
   19ada:	4619      	movge	r1, r3
   19adc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   19ae0:	4299      	cmp	r1, r3
   19ae2:	bfb8      	it	lt
   19ae4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   19ae6:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   19ae8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   19aec:	4299      	cmp	r1, r3
   19aee:	d109      	bne.n	19b04 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
   19af0:	b16d      	cbz	r5, 19b0e <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
   19af2:	4816      	ldr	r0, [pc, #88]	; (19b4c <z_impl_k_mutex_lock+0x1e4>)
   19af4:	4631      	mov	r1, r6
   19af6:	f001 f921 	bl	1ad3c <z_reschedule>
	return -EAGAIN;
   19afa:	f06f 000a 	mvn.w	r0, #10
   19afe:	e7a7      	b.n	19a50 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   19b00:	2500      	movs	r5, #0
   19b02:	e7bb      	b.n	19a7c <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
   19b04:	f001 fd9c 	bl	1b640 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   19b08:	2800      	cmp	r0, #0
   19b0a:	d1f2      	bne.n	19af2 <z_impl_k_mutex_lock+0x18a>
   19b0c:	e7f0      	b.n	19af0 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19b0e:	480f      	ldr	r0, [pc, #60]	; (19b4c <z_impl_k_mutex_lock+0x1e4>)
   19b10:	f7ff fee6 	bl	198e0 <z_spin_unlock_valid>
   19b14:	b968      	cbnz	r0, 19b32 <z_impl_k_mutex_lock+0x1ca>
   19b16:	4a0e      	ldr	r2, [pc, #56]	; (19b50 <z_impl_k_mutex_lock+0x1e8>)
   19b18:	4911      	ldr	r1, [pc, #68]	; (19b60 <z_impl_k_mutex_lock+0x1f8>)
   19b1a:	480a      	ldr	r0, [pc, #40]	; (19b44 <z_impl_k_mutex_lock+0x1dc>)
   19b1c:	23ac      	movs	r3, #172	; 0xac
   19b1e:	f003 fe49 	bl	1d7b4 <printk>
   19b22:	490a      	ldr	r1, [pc, #40]	; (19b4c <z_impl_k_mutex_lock+0x1e4>)
   19b24:	480f      	ldr	r0, [pc, #60]	; (19b64 <z_impl_k_mutex_lock+0x1fc>)
   19b26:	f003 fe45 	bl	1d7b4 <printk>
   19b2a:	4809      	ldr	r0, [pc, #36]	; (19b50 <z_impl_k_mutex_lock+0x1e8>)
   19b2c:	21ac      	movs	r1, #172	; 0xac
   19b2e:	f004 f89b 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   19b32:	f386 8811 	msr	BASEPRI, r6
   19b36:	f3bf 8f6f 	isb	sy
   19b3a:	e7de      	b.n	19afa <z_impl_k_mutex_lock+0x192>
   19b3c:	00022cd8 	.word	0x00022cd8
   19b40:	00022d85 	.word	0x00022d85
   19b44:	00021650 	.word	0x00021650
   19b48:	00022da7 	.word	0x00022da7
   19b4c:	20002064 	.word	0x20002064
   19b50:	00021710 	.word	0x00021710
   19b54:	00021762 	.word	0x00021762
   19b58:	00021777 	.word	0x00021777
   19b5c:	2000203c 	.word	0x2000203c
   19b60:	00021736 	.word	0x00021736
   19b64:	0002174d 	.word	0x0002174d

00019b68 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   19b68:	b538      	push	{r3, r4, r5, lr}
   19b6a:	4604      	mov	r4, r0
   19b6c:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   19b70:	b163      	cbz	r3, 19b8c <z_impl_k_mutex_unlock+0x24>
   19b72:	4952      	ldr	r1, [pc, #328]	; (19cbc <z_impl_k_mutex_unlock+0x154>)
   19b74:	4a52      	ldr	r2, [pc, #328]	; (19cc0 <z_impl_k_mutex_unlock+0x158>)
   19b76:	4853      	ldr	r0, [pc, #332]	; (19cc4 <z_impl_k_mutex_unlock+0x15c>)
   19b78:	23c7      	movs	r3, #199	; 0xc7
   19b7a:	f003 fe1b 	bl	1d7b4 <printk>
   19b7e:	4852      	ldr	r0, [pc, #328]	; (19cc8 <z_impl_k_mutex_unlock+0x160>)
   19b80:	f003 fe18 	bl	1d7b4 <printk>
   19b84:	484e      	ldr	r0, [pc, #312]	; (19cc0 <z_impl_k_mutex_unlock+0x158>)
   19b86:	21c7      	movs	r1, #199	; 0xc7
   19b88:	f004 f86e 	bl	1dc68 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   19b8c:	68a3      	ldr	r3, [r4, #8]
   19b8e:	2b00      	cmp	r3, #0
   19b90:	f000 808d 	beq.w	19cae <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   19b94:	4d4d      	ldr	r5, [pc, #308]	; (19ccc <z_impl_k_mutex_unlock+0x164>)
   19b96:	68aa      	ldr	r2, [r5, #8]
   19b98:	4293      	cmp	r3, r2
   19b9a:	f040 808b 	bne.w	19cb4 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   19b9e:	68e3      	ldr	r3, [r4, #12]
   19ba0:	b94b      	cbnz	r3, 19bb6 <z_impl_k_mutex_unlock+0x4e>
   19ba2:	494b      	ldr	r1, [pc, #300]	; (19cd0 <z_impl_k_mutex_unlock+0x168>)
   19ba4:	4847      	ldr	r0, [pc, #284]	; (19cc4 <z_impl_k_mutex_unlock+0x15c>)
   19ba6:	4a46      	ldr	r2, [pc, #280]	; (19cc0 <z_impl_k_mutex_unlock+0x158>)
   19ba8:	23df      	movs	r3, #223	; 0xdf
   19baa:	f003 fe03 	bl	1d7b4 <printk>
   19bae:	4844      	ldr	r0, [pc, #272]	; (19cc0 <z_impl_k_mutex_unlock+0x158>)
   19bb0:	21df      	movs	r1, #223	; 0xdf
   19bb2:	f004 f859 	bl	1dc68 <assert_post_action>
   19bb6:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   19bba:	b163      	cbz	r3, 19bd6 <z_impl_k_mutex_unlock+0x6e>
   19bbc:	493f      	ldr	r1, [pc, #252]	; (19cbc <z_impl_k_mutex_unlock+0x154>)
   19bbe:	4a45      	ldr	r2, [pc, #276]	; (19cd4 <z_impl_k_mutex_unlock+0x16c>)
   19bc0:	4840      	ldr	r0, [pc, #256]	; (19cc4 <z_impl_k_mutex_unlock+0x15c>)
   19bc2:	23fd      	movs	r3, #253	; 0xfd
   19bc4:	f003 fdf6 	bl	1d7b4 <printk>
   19bc8:	4843      	ldr	r0, [pc, #268]	; (19cd8 <z_impl_k_mutex_unlock+0x170>)
   19bca:	f003 fdf3 	bl	1d7b4 <printk>
   19bce:	4841      	ldr	r0, [pc, #260]	; (19cd4 <z_impl_k_mutex_unlock+0x16c>)
   19bd0:	21fd      	movs	r1, #253	; 0xfd
   19bd2:	f004 f849 	bl	1dc68 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   19bd6:	68ab      	ldr	r3, [r5, #8]
   19bd8:	7bdb      	ldrb	r3, [r3, #15]
   19bda:	2b01      	cmp	r3, #1
   19bdc:	d10c      	bne.n	19bf8 <z_impl_k_mutex_unlock+0x90>
   19bde:	493f      	ldr	r1, [pc, #252]	; (19cdc <z_impl_k_mutex_unlock+0x174>)
   19be0:	4a3c      	ldr	r2, [pc, #240]	; (19cd4 <z_impl_k_mutex_unlock+0x16c>)
   19be2:	4838      	ldr	r0, [pc, #224]	; (19cc4 <z_impl_k_mutex_unlock+0x15c>)
   19be4:	23fe      	movs	r3, #254	; 0xfe
   19be6:	f003 fde5 	bl	1d7b4 <printk>
   19bea:	483b      	ldr	r0, [pc, #236]	; (19cd8 <z_impl_k_mutex_unlock+0x170>)
   19bec:	f003 fde2 	bl	1d7b4 <printk>
   19bf0:	4838      	ldr	r0, [pc, #224]	; (19cd4 <z_impl_k_mutex_unlock+0x16c>)
   19bf2:	21fe      	movs	r1, #254	; 0xfe
   19bf4:	f004 f838 	bl	1dc68 <assert_post_action>

	--_current->base.sched_locked;
   19bf8:	68aa      	ldr	r2, [r5, #8]
   19bfa:	7bd3      	ldrb	r3, [r2, #15]
   19bfc:	3b01      	subs	r3, #1
   19bfe:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   19c00:	68e3      	ldr	r3, [r4, #12]
   19c02:	2b01      	cmp	r3, #1
   19c04:	d905      	bls.n	19c12 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
   19c06:	3b01      	subs	r3, #1
   19c08:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   19c0a:	f001 fe1f 	bl	1b84c <k_sched_unlock>

	return 0;
   19c0e:	2000      	movs	r0, #0
}
   19c10:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   19c12:	f04f 0340 	mov.w	r3, #64	; 0x40
   19c16:	f3ef 8511 	mrs	r5, BASEPRI
   19c1a:	f383 8812 	msr	BASEPRI_MAX, r3
   19c1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19c22:	482f      	ldr	r0, [pc, #188]	; (19ce0 <z_impl_k_mutex_unlock+0x178>)
   19c24:	f7ff fe4e 	bl	198c4 <z_spin_lock_valid>
   19c28:	b968      	cbnz	r0, 19c46 <z_impl_k_mutex_unlock+0xde>
   19c2a:	4a2e      	ldr	r2, [pc, #184]	; (19ce4 <z_impl_k_mutex_unlock+0x17c>)
   19c2c:	492e      	ldr	r1, [pc, #184]	; (19ce8 <z_impl_k_mutex_unlock+0x180>)
   19c2e:	4825      	ldr	r0, [pc, #148]	; (19cc4 <z_impl_k_mutex_unlock+0x15c>)
   19c30:	2381      	movs	r3, #129	; 0x81
   19c32:	f003 fdbf 	bl	1d7b4 <printk>
   19c36:	492a      	ldr	r1, [pc, #168]	; (19ce0 <z_impl_k_mutex_unlock+0x178>)
   19c38:	482c      	ldr	r0, [pc, #176]	; (19cec <z_impl_k_mutex_unlock+0x184>)
   19c3a:	f003 fdbb 	bl	1d7b4 <printk>
   19c3e:	4829      	ldr	r0, [pc, #164]	; (19ce4 <z_impl_k_mutex_unlock+0x17c>)
   19c40:	2181      	movs	r1, #129	; 0x81
   19c42:	f004 f811 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   19c46:	4826      	ldr	r0, [pc, #152]	; (19ce0 <z_impl_k_mutex_unlock+0x178>)
   19c48:	f7ff fe5a 	bl	19900 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   19c4c:	68a0      	ldr	r0, [r4, #8]
   19c4e:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   19c50:	f990 300e 	ldrsb.w	r3, [r0, #14]
   19c54:	4299      	cmp	r1, r3
   19c56:	d001      	beq.n	19c5c <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
   19c58:	f001 fcf2 	bl	1b640 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   19c5c:	4620      	mov	r0, r4
   19c5e:	f001 febd 	bl	1b9dc <z_unpend_first_thread>
	mutex->owner = new_owner;
   19c62:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   19c64:	b158      	cbz	r0, 19c7e <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
   19c66:	f990 200e 	ldrsb.w	r2, [r0, #14]
   19c6a:	6122      	str	r2, [r4, #16]
   19c6c:	2200      	movs	r2, #0
   19c6e:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   19c70:	f001 fb04 	bl	1b27c <z_ready_thread>
		z_reschedule(&lock, key);
   19c74:	481a      	ldr	r0, [pc, #104]	; (19ce0 <z_impl_k_mutex_unlock+0x178>)
   19c76:	4629      	mov	r1, r5
   19c78:	f001 f860 	bl	1ad3c <z_reschedule>
   19c7c:	e7c5      	b.n	19c0a <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
   19c7e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19c80:	4817      	ldr	r0, [pc, #92]	; (19ce0 <z_impl_k_mutex_unlock+0x178>)
   19c82:	f7ff fe2d 	bl	198e0 <z_spin_unlock_valid>
   19c86:	b968      	cbnz	r0, 19ca4 <z_impl_k_mutex_unlock+0x13c>
   19c88:	4a16      	ldr	r2, [pc, #88]	; (19ce4 <z_impl_k_mutex_unlock+0x17c>)
   19c8a:	4919      	ldr	r1, [pc, #100]	; (19cf0 <z_impl_k_mutex_unlock+0x188>)
   19c8c:	480d      	ldr	r0, [pc, #52]	; (19cc4 <z_impl_k_mutex_unlock+0x15c>)
   19c8e:	23ac      	movs	r3, #172	; 0xac
   19c90:	f003 fd90 	bl	1d7b4 <printk>
   19c94:	4912      	ldr	r1, [pc, #72]	; (19ce0 <z_impl_k_mutex_unlock+0x178>)
   19c96:	4817      	ldr	r0, [pc, #92]	; (19cf4 <z_impl_k_mutex_unlock+0x18c>)
   19c98:	f003 fd8c 	bl	1d7b4 <printk>
   19c9c:	4811      	ldr	r0, [pc, #68]	; (19ce4 <z_impl_k_mutex_unlock+0x17c>)
   19c9e:	21ac      	movs	r1, #172	; 0xac
   19ca0:	f003 ffe2 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   19ca4:	f385 8811 	msr	BASEPRI, r5
   19ca8:	f3bf 8f6f 	isb	sy
   19cac:	e7ad      	b.n	19c0a <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
   19cae:	f06f 0015 	mvn.w	r0, #21
   19cb2:	e7ad      	b.n	19c10 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
   19cb4:	f04f 30ff 	mov.w	r0, #4294967295
   19cb8:	e7aa      	b.n	19c10 <z_impl_k_mutex_unlock+0xa8>
   19cba:	bf00      	nop
   19cbc:	00022cd8 	.word	0x00022cd8
   19cc0:	00022d85 	.word	0x00022d85
   19cc4:	00021650 	.word	0x00021650
   19cc8:	00022da7 	.word	0x00022da7
   19ccc:	2000203c 	.word	0x2000203c
   19cd0:	00022dcc 	.word	0x00022dcc
   19cd4:	00022de3 	.word	0x00022de3
   19cd8:	000224f9 	.word	0x000224f9
   19cdc:	00022e0e 	.word	0x00022e0e
   19ce0:	20002064 	.word	0x20002064
   19ce4:	00021710 	.word	0x00021710
   19ce8:	00021762 	.word	0x00021762
   19cec:	00021777 	.word	0x00021777
   19cf0:	00021736 	.word	0x00021736
   19cf4:	0002174d 	.word	0x0002174d

00019cf8 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   19cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19cfc:	4604      	mov	r4, r0
   19cfe:	f89d a020 	ldrb.w	sl, [sp, #32]
   19d02:	460e      	mov	r6, r1
   19d04:	4690      	mov	r8, r2
   19d06:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   19d08:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   19d0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   19d10:	f3ef 8711 	mrs	r7, BASEPRI
   19d14:	f383 8812 	msr	BASEPRI_MAX, r3
   19d18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19d1c:	4628      	mov	r0, r5
   19d1e:	f7ff fdd1 	bl	198c4 <z_spin_lock_valid>
   19d22:	b968      	cbnz	r0, 19d40 <queue_insert+0x48>
   19d24:	4a3b      	ldr	r2, [pc, #236]	; (19e14 <queue_insert+0x11c>)
   19d26:	493c      	ldr	r1, [pc, #240]	; (19e18 <queue_insert+0x120>)
   19d28:	483c      	ldr	r0, [pc, #240]	; (19e1c <queue_insert+0x124>)
   19d2a:	2381      	movs	r3, #129	; 0x81
   19d2c:	f003 fd42 	bl	1d7b4 <printk>
   19d30:	483b      	ldr	r0, [pc, #236]	; (19e20 <queue_insert+0x128>)
   19d32:	4629      	mov	r1, r5
   19d34:	f003 fd3e 	bl	1d7b4 <printk>
   19d38:	4836      	ldr	r0, [pc, #216]	; (19e14 <queue_insert+0x11c>)
   19d3a:	2181      	movs	r1, #129	; 0x81
   19d3c:	f003 ff94 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   19d40:	4628      	mov	r0, r5
   19d42:	f7ff fddd 	bl	19900 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   19d46:	f1ba 0f00 	cmp.w	sl, #0
   19d4a:	d000      	beq.n	19d4e <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
   19d4c:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   19d4e:	f104 000c 	add.w	r0, r4, #12
   19d52:	f001 fe43 	bl	1b9dc <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   19d56:	b158      	cbz	r0, 19d70 <queue_insert+0x78>
   19d58:	2400      	movs	r4, #0
   19d5a:	67c4      	str	r4, [r0, #124]	; 0x7c
   19d5c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   19d60:	f001 fa8c 	bl	1b27c <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   19d64:	4628      	mov	r0, r5
   19d66:	4639      	mov	r1, r7
   19d68:	f000 ffe8 	bl	1ad3c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   19d6c:	2000      	movs	r0, #0
   19d6e:	e01e      	b.n	19dae <queue_insert+0xb6>
	if (alloc) {
   19d70:	f1b9 0f00 	cmp.w	r9, #0
   19d74:	d02d      	beq.n	19dd2 <queue_insert+0xda>
	return z_thread_aligned_alloc(0, size);
   19d76:	2108      	movs	r1, #8
   19d78:	f003 f98c 	bl	1d094 <z_thread_aligned_alloc>
		if (anode == NULL) {
   19d7c:	b9c8      	cbnz	r0, 19db2 <queue_insert+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19d7e:	4628      	mov	r0, r5
   19d80:	f7ff fdae 	bl	198e0 <z_spin_unlock_valid>
   19d84:	b968      	cbnz	r0, 19da2 <queue_insert+0xaa>
   19d86:	4a23      	ldr	r2, [pc, #140]	; (19e14 <queue_insert+0x11c>)
   19d88:	4926      	ldr	r1, [pc, #152]	; (19e24 <queue_insert+0x12c>)
   19d8a:	4824      	ldr	r0, [pc, #144]	; (19e1c <queue_insert+0x124>)
   19d8c:	23ac      	movs	r3, #172	; 0xac
   19d8e:	f003 fd11 	bl	1d7b4 <printk>
   19d92:	4825      	ldr	r0, [pc, #148]	; (19e28 <queue_insert+0x130>)
   19d94:	4629      	mov	r1, r5
   19d96:	f003 fd0d 	bl	1d7b4 <printk>
   19d9a:	481e      	ldr	r0, [pc, #120]	; (19e14 <queue_insert+0x11c>)
   19d9c:	21ac      	movs	r1, #172	; 0xac
   19d9e:	f003 ff63 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   19da2:	f387 8811 	msr	BASEPRI, r7
   19da6:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   19daa:	f06f 000b 	mvn.w	r0, #11
}
   19dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   19db2:	2301      	movs	r3, #1
		anode->data = data;
   19db4:	f8c0 8004 	str.w	r8, [r0, #4]
   19db8:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   19dba:	6803      	ldr	r3, [r0, #0]
   19dbc:	f003 0303 	and.w	r3, r3, #3
   19dc0:	b95e      	cbnz	r6, 19dda <queue_insert+0xe2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   19dc2:	6822      	ldr	r2, [r4, #0]
   19dc4:	4313      	orrs	r3, r2
   19dc6:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   19dc8:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   19dca:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   19dcc:	b973      	cbnz	r3, 19dec <queue_insert+0xf4>
	list->tail = node;
   19dce:	6060      	str	r0, [r4, #4]
}
   19dd0:	e00c      	b.n	19dec <queue_insert+0xf4>
	node->next_and_flags = flags;
   19dd2:	f8c8 9000 	str.w	r9, [r8]
}
   19dd6:	4640      	mov	r0, r8
   19dd8:	e7ef      	b.n	19dba <queue_insert+0xc2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19dda:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   19ddc:	f032 0203 	bics.w	r2, r2, #3
   19de0:	d110      	bne.n	19e04 <queue_insert+0x10c>
Z_GENLIST_APPEND(sflist, sfnode)
   19de2:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19de4:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   19de6:	b93a      	cbnz	r2, 19df8 <queue_insert+0x100>
	list->head = node;
   19de8:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   19dec:	2104      	movs	r1, #4
   19dee:	f104 0014 	add.w	r0, r4, #20
   19df2:	f006 fe16 	bl	20a22 <z_handle_obj_poll_events>
   19df6:	e7b5      	b.n	19d64 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19df8:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19dfa:	f003 0303 	and.w	r3, r3, #3
   19dfe:	4303      	orrs	r3, r0
   19e00:	6013      	str	r3, [r2, #0]
   19e02:	e7e4      	b.n	19dce <queue_insert+0xd6>
   19e04:	4313      	orrs	r3, r2
   19e06:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19e08:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19e0a:	f003 0303 	and.w	r3, r3, #3
   19e0e:	4303      	orrs	r3, r0
   19e10:	6033      	str	r3, [r6, #0]
}
   19e12:	e7eb      	b.n	19dec <queue_insert+0xf4>
   19e14:	00021710 	.word	0x00021710
   19e18:	00021762 	.word	0x00021762
   19e1c:	00021650 	.word	0x00021650
   19e20:	00021777 	.word	0x00021777
   19e24:	00021736 	.word	0x00021736
   19e28:	0002174d 	.word	0x0002174d

00019e2c <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   19e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19e30:	4605      	mov	r5, r0
   19e32:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   19e34:	460c      	mov	r4, r1
   19e36:	2900      	cmp	r1, #0
   19e38:	d04a      	beq.n	19ed0 <k_queue_append_list+0xa4>
   19e3a:	2a00      	cmp	r2, #0
   19e3c:	d048      	beq.n	19ed0 <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   19e3e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   19e42:	f04f 0340 	mov.w	r3, #64	; 0x40
   19e46:	f3ef 8911 	mrs	r9, BASEPRI
   19e4a:	f383 8812 	msr	BASEPRI_MAX, r3
   19e4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19e52:	4630      	mov	r0, r6
   19e54:	f7ff fd36 	bl	198c4 <z_spin_lock_valid>
   19e58:	b968      	cbnz	r0, 19e76 <k_queue_append_list+0x4a>
   19e5a:	4a1f      	ldr	r2, [pc, #124]	; (19ed8 <k_queue_append_list+0xac>)
   19e5c:	491f      	ldr	r1, [pc, #124]	; (19edc <k_queue_append_list+0xb0>)
   19e5e:	4820      	ldr	r0, [pc, #128]	; (19ee0 <k_queue_append_list+0xb4>)
   19e60:	2381      	movs	r3, #129	; 0x81
   19e62:	f003 fca7 	bl	1d7b4 <printk>
   19e66:	481f      	ldr	r0, [pc, #124]	; (19ee4 <k_queue_append_list+0xb8>)
   19e68:	4631      	mov	r1, r6
   19e6a:	f003 fca3 	bl	1d7b4 <printk>
   19e6e:	481a      	ldr	r0, [pc, #104]	; (19ed8 <k_queue_append_list+0xac>)
   19e70:	2181      	movs	r1, #129	; 0x81
   19e72:	f003 fef9 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   19e76:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   19e78:	f105 080c 	add.w	r8, r5, #12
   19e7c:	f7ff fd40 	bl	19900 <z_spin_lock_set_owner>
   19e80:	4640      	mov	r0, r8
   19e82:	f001 fdab 	bl	1b9dc <z_unpend_first_thread>
   19e86:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   19e8a:	b920      	cbnz	r0, 19e96 <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   19e8c:	686b      	ldr	r3, [r5, #4]
   19e8e:	b9cb      	cbnz	r3, 19ec4 <k_queue_append_list+0x98>
	list->head = node;
   19e90:	602c      	str	r4, [r5, #0]
	list->tail = node;
   19e92:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   19e94:	e00a      	b.n	19eac <k_queue_append_list+0x80>
	thread->base.swap_data = data;
   19e96:	6144      	str	r4, [r0, #20]
   19e98:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   19e9c:	f001 f9ee 	bl	1b27c <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   19ea0:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   19ea2:	4640      	mov	r0, r8
   19ea4:	f001 fd9a 	bl	1b9dc <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   19ea8:	2c00      	cmp	r4, #0
   19eaa:	d1ee      	bne.n	19e8a <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
   19eac:	2104      	movs	r1, #4
   19eae:	f105 0014 	add.w	r0, r5, #20
   19eb2:	f006 fdb6 	bl	20a22 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   19eb6:	4630      	mov	r0, r6
   19eb8:	4649      	mov	r1, r9
   19eba:	f000 ff3f 	bl	1ad3c <z_reschedule>
	return 0;
   19ebe:	2000      	movs	r0, #0
}
   19ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19ec4:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19ec6:	f001 0103 	and.w	r1, r1, #3
   19eca:	430c      	orrs	r4, r1
   19ecc:	601c      	str	r4, [r3, #0]
}
   19ece:	e7e0      	b.n	19e92 <k_queue_append_list+0x66>
		return -EINVAL;
   19ed0:	f06f 0015 	mvn.w	r0, #21
   19ed4:	e7f4      	b.n	19ec0 <k_queue_append_list+0x94>
   19ed6:	bf00      	nop
   19ed8:	00021710 	.word	0x00021710
   19edc:	00021762 	.word	0x00021762
   19ee0:	00021650 	.word	0x00021650
   19ee4:	00021777 	.word	0x00021777

00019ee8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   19ee8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   19eec:	4606      	mov	r6, r0
   19eee:	4690      	mov	r8, r2
   19ef0:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   19ef2:	f100 0508 	add.w	r5, r0, #8
   19ef6:	f04f 0340 	mov.w	r3, #64	; 0x40
   19efa:	f3ef 8711 	mrs	r7, BASEPRI
   19efe:	f383 8812 	msr	BASEPRI_MAX, r3
   19f02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19f06:	4628      	mov	r0, r5
   19f08:	f7ff fcdc 	bl	198c4 <z_spin_lock_valid>
   19f0c:	b968      	cbnz	r0, 19f2a <z_impl_k_queue_get+0x42>
   19f0e:	4a25      	ldr	r2, [pc, #148]	; (19fa4 <z_impl_k_queue_get+0xbc>)
   19f10:	4925      	ldr	r1, [pc, #148]	; (19fa8 <z_impl_k_queue_get+0xc0>)
   19f12:	4826      	ldr	r0, [pc, #152]	; (19fac <z_impl_k_queue_get+0xc4>)
   19f14:	2381      	movs	r3, #129	; 0x81
   19f16:	f003 fc4d 	bl	1d7b4 <printk>
   19f1a:	4825      	ldr	r0, [pc, #148]	; (19fb0 <z_impl_k_queue_get+0xc8>)
   19f1c:	4629      	mov	r1, r5
   19f1e:	f003 fc49 	bl	1d7b4 <printk>
   19f22:	4820      	ldr	r0, [pc, #128]	; (19fa4 <z_impl_k_queue_get+0xbc>)
   19f24:	2181      	movs	r1, #129	; 0x81
   19f26:	f003 fe9f 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   19f2a:	4628      	mov	r0, r5
   19f2c:	f7ff fce8 	bl	19900 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   19f30:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   19f32:	b334      	cbz	r4, 19f82 <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19f34:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   19f36:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19f38:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   19f3c:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   19f3e:	4620      	mov	r0, r4
	list->head = node;
   19f40:	6033      	str	r3, [r6, #0]
	list->tail = node;
   19f42:	bf08      	it	eq
   19f44:	6073      	streq	r3, [r6, #4]
   19f46:	2101      	movs	r1, #1
   19f48:	f006 fc1d 	bl	20786 <z_queue_node_peek>
   19f4c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19f4e:	4628      	mov	r0, r5
   19f50:	f7ff fcc6 	bl	198e0 <z_spin_unlock_valid>
   19f54:	b968      	cbnz	r0, 19f72 <z_impl_k_queue_get+0x8a>
   19f56:	4a13      	ldr	r2, [pc, #76]	; (19fa4 <z_impl_k_queue_get+0xbc>)
   19f58:	4916      	ldr	r1, [pc, #88]	; (19fb4 <z_impl_k_queue_get+0xcc>)
   19f5a:	4814      	ldr	r0, [pc, #80]	; (19fac <z_impl_k_queue_get+0xc4>)
   19f5c:	23ac      	movs	r3, #172	; 0xac
   19f5e:	f003 fc29 	bl	1d7b4 <printk>
   19f62:	4815      	ldr	r0, [pc, #84]	; (19fb8 <z_impl_k_queue_get+0xd0>)
   19f64:	4629      	mov	r1, r5
   19f66:	f003 fc25 	bl	1d7b4 <printk>
   19f6a:	480e      	ldr	r0, [pc, #56]	; (19fa4 <z_impl_k_queue_get+0xbc>)
   19f6c:	21ac      	movs	r1, #172	; 0xac
   19f6e:	f003 fe7b 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   19f72:	f387 8811 	msr	BASEPRI, r7
   19f76:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   19f7a:	4620      	mov	r0, r4
   19f7c:	b003      	add	sp, #12
   19f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19f82:	ea58 0309 	orrs.w	r3, r8, r9
   19f86:	d0e2      	beq.n	19f4e <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   19f88:	e9cd 8900 	strd	r8, r9, [sp]
   19f8c:	f106 020c 	add.w	r2, r6, #12
   19f90:	4639      	mov	r1, r7
   19f92:	4628      	mov	r0, r5
   19f94:	f001 fb24 	bl	1b5e0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   19f98:	2800      	cmp	r0, #0
   19f9a:	d1ee      	bne.n	19f7a <z_impl_k_queue_get+0x92>
   19f9c:	4b07      	ldr	r3, [pc, #28]	; (19fbc <z_impl_k_queue_get+0xd4>)
   19f9e:	689b      	ldr	r3, [r3, #8]
   19fa0:	695c      	ldr	r4, [r3, #20]
   19fa2:	e7ea      	b.n	19f7a <z_impl_k_queue_get+0x92>
   19fa4:	00021710 	.word	0x00021710
   19fa8:	00021762 	.word	0x00021762
   19fac:	00021650 	.word	0x00021650
   19fb0:	00021777 	.word	0x00021777
   19fb4:	00021736 	.word	0x00021736
   19fb8:	0002174d 	.word	0x0002174d
   19fbc:	2000203c 	.word	0x2000203c

00019fc0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   19fc0:	b538      	push	{r3, r4, r5, lr}
   19fc2:	4604      	mov	r4, r0
	__asm__ volatile(
   19fc4:	f04f 0340 	mov.w	r3, #64	; 0x40
   19fc8:	f3ef 8511 	mrs	r5, BASEPRI
   19fcc:	f383 8812 	msr	BASEPRI_MAX, r3
   19fd0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19fd4:	4817      	ldr	r0, [pc, #92]	; (1a034 <z_impl_k_sem_give+0x74>)
   19fd6:	f7ff fc75 	bl	198c4 <z_spin_lock_valid>
   19fda:	b968      	cbnz	r0, 19ff8 <z_impl_k_sem_give+0x38>
   19fdc:	4a16      	ldr	r2, [pc, #88]	; (1a038 <z_impl_k_sem_give+0x78>)
   19fde:	4917      	ldr	r1, [pc, #92]	; (1a03c <z_impl_k_sem_give+0x7c>)
   19fe0:	4817      	ldr	r0, [pc, #92]	; (1a040 <z_impl_k_sem_give+0x80>)
   19fe2:	2381      	movs	r3, #129	; 0x81
   19fe4:	f003 fbe6 	bl	1d7b4 <printk>
   19fe8:	4912      	ldr	r1, [pc, #72]	; (1a034 <z_impl_k_sem_give+0x74>)
   19fea:	4816      	ldr	r0, [pc, #88]	; (1a044 <z_impl_k_sem_give+0x84>)
   19fec:	f003 fbe2 	bl	1d7b4 <printk>
   19ff0:	4811      	ldr	r0, [pc, #68]	; (1a038 <z_impl_k_sem_give+0x78>)
   19ff2:	2181      	movs	r1, #129	; 0x81
   19ff4:	f003 fe38 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   19ff8:	480e      	ldr	r0, [pc, #56]	; (1a034 <z_impl_k_sem_give+0x74>)
   19ffa:	f7ff fc81 	bl	19900 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   19ffe:	4620      	mov	r0, r4
   1a000:	f001 fcec 	bl	1b9dc <z_unpend_first_thread>

	if (thread != NULL) {
   1a004:	b148      	cbz	r0, 1a01a <z_impl_k_sem_give+0x5a>
   1a006:	2200      	movs	r2, #0
   1a008:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1a00a:	f001 f937 	bl	1b27c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1a00e:	4629      	mov	r1, r5
   1a010:	4808      	ldr	r0, [pc, #32]	; (1a034 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1a012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1a016:	f000 be91 	b.w	1ad3c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1a01a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1a01e:	429a      	cmp	r2, r3
   1a020:	bf18      	it	ne
   1a022:	3301      	addne	r3, #1
   1a024:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1a026:	2102      	movs	r1, #2
   1a028:	f104 0010 	add.w	r0, r4, #16
   1a02c:	f006 fcf9 	bl	20a22 <z_handle_obj_poll_events>
}
   1a030:	e7ed      	b.n	1a00e <z_impl_k_sem_give+0x4e>
   1a032:	bf00      	nop
   1a034:	20002068 	.word	0x20002068
   1a038:	00021710 	.word	0x00021710
   1a03c:	00021762 	.word	0x00021762
   1a040:	00021650 	.word	0x00021650
   1a044:	00021777 	.word	0x00021777

0001a048 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1a048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a04a:	4604      	mov	r4, r0
   1a04c:	4616      	mov	r6, r2
   1a04e:	461f      	mov	r7, r3
   1a050:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   1a054:	b17b      	cbz	r3, 1a076 <z_impl_k_sem_take+0x2e>
   1a056:	ea56 0307 	orrs.w	r3, r6, r7
   1a05a:	d00c      	beq.n	1a076 <z_impl_k_sem_take+0x2e>
   1a05c:	4935      	ldr	r1, [pc, #212]	; (1a134 <z_impl_k_sem_take+0xec>)
   1a05e:	4a36      	ldr	r2, [pc, #216]	; (1a138 <z_impl_k_sem_take+0xf0>)
   1a060:	4836      	ldr	r0, [pc, #216]	; (1a13c <z_impl_k_sem_take+0xf4>)
   1a062:	2379      	movs	r3, #121	; 0x79
   1a064:	f003 fba6 	bl	1d7b4 <printk>
   1a068:	4835      	ldr	r0, [pc, #212]	; (1a140 <z_impl_k_sem_take+0xf8>)
   1a06a:	f003 fba3 	bl	1d7b4 <printk>
   1a06e:	4832      	ldr	r0, [pc, #200]	; (1a138 <z_impl_k_sem_take+0xf0>)
   1a070:	2179      	movs	r1, #121	; 0x79
   1a072:	f003 fdf9 	bl	1dc68 <assert_post_action>
   1a076:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a07a:	f3ef 8511 	mrs	r5, BASEPRI
   1a07e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a082:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a086:	482f      	ldr	r0, [pc, #188]	; (1a144 <z_impl_k_sem_take+0xfc>)
   1a088:	f7ff fc1c 	bl	198c4 <z_spin_lock_valid>
   1a08c:	b968      	cbnz	r0, 1a0aa <z_impl_k_sem_take+0x62>
   1a08e:	4a2e      	ldr	r2, [pc, #184]	; (1a148 <z_impl_k_sem_take+0x100>)
   1a090:	492e      	ldr	r1, [pc, #184]	; (1a14c <z_impl_k_sem_take+0x104>)
   1a092:	482a      	ldr	r0, [pc, #168]	; (1a13c <z_impl_k_sem_take+0xf4>)
   1a094:	2381      	movs	r3, #129	; 0x81
   1a096:	f003 fb8d 	bl	1d7b4 <printk>
   1a09a:	492a      	ldr	r1, [pc, #168]	; (1a144 <z_impl_k_sem_take+0xfc>)
   1a09c:	482c      	ldr	r0, [pc, #176]	; (1a150 <z_impl_k_sem_take+0x108>)
   1a09e:	f003 fb89 	bl	1d7b4 <printk>
   1a0a2:	4829      	ldr	r0, [pc, #164]	; (1a148 <z_impl_k_sem_take+0x100>)
   1a0a4:	2181      	movs	r1, #129	; 0x81
   1a0a6:	f003 fddf 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a0aa:	4826      	ldr	r0, [pc, #152]	; (1a144 <z_impl_k_sem_take+0xfc>)
   1a0ac:	f7ff fc28 	bl	19900 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1a0b0:	68a3      	ldr	r3, [r4, #8]
   1a0b2:	b1d3      	cbz	r3, 1a0ea <z_impl_k_sem_take+0xa2>
		sem->count--;
   1a0b4:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a0b6:	4823      	ldr	r0, [pc, #140]	; (1a144 <z_impl_k_sem_take+0xfc>)
   1a0b8:	60a3      	str	r3, [r4, #8]
   1a0ba:	f7ff fc11 	bl	198e0 <z_spin_unlock_valid>
   1a0be:	b968      	cbnz	r0, 1a0dc <z_impl_k_sem_take+0x94>
   1a0c0:	4a21      	ldr	r2, [pc, #132]	; (1a148 <z_impl_k_sem_take+0x100>)
   1a0c2:	4924      	ldr	r1, [pc, #144]	; (1a154 <z_impl_k_sem_take+0x10c>)
   1a0c4:	481d      	ldr	r0, [pc, #116]	; (1a13c <z_impl_k_sem_take+0xf4>)
   1a0c6:	23ac      	movs	r3, #172	; 0xac
   1a0c8:	f003 fb74 	bl	1d7b4 <printk>
   1a0cc:	491d      	ldr	r1, [pc, #116]	; (1a144 <z_impl_k_sem_take+0xfc>)
   1a0ce:	4822      	ldr	r0, [pc, #136]	; (1a158 <z_impl_k_sem_take+0x110>)
   1a0d0:	f003 fb70 	bl	1d7b4 <printk>
   1a0d4:	481c      	ldr	r0, [pc, #112]	; (1a148 <z_impl_k_sem_take+0x100>)
   1a0d6:	21ac      	movs	r1, #172	; 0xac
   1a0d8:	f003 fdc6 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1a0dc:	f385 8811 	msr	BASEPRI, r5
   1a0e0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1a0e4:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1a0e6:	b003      	add	sp, #12
   1a0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a0ea:	ea56 0307 	orrs.w	r3, r6, r7
   1a0ee:	d118      	bne.n	1a122 <z_impl_k_sem_take+0xda>
   1a0f0:	4814      	ldr	r0, [pc, #80]	; (1a144 <z_impl_k_sem_take+0xfc>)
   1a0f2:	f7ff fbf5 	bl	198e0 <z_spin_unlock_valid>
   1a0f6:	b968      	cbnz	r0, 1a114 <z_impl_k_sem_take+0xcc>
   1a0f8:	4a13      	ldr	r2, [pc, #76]	; (1a148 <z_impl_k_sem_take+0x100>)
   1a0fa:	4916      	ldr	r1, [pc, #88]	; (1a154 <z_impl_k_sem_take+0x10c>)
   1a0fc:	480f      	ldr	r0, [pc, #60]	; (1a13c <z_impl_k_sem_take+0xf4>)
   1a0fe:	23ac      	movs	r3, #172	; 0xac
   1a100:	f003 fb58 	bl	1d7b4 <printk>
   1a104:	490f      	ldr	r1, [pc, #60]	; (1a144 <z_impl_k_sem_take+0xfc>)
   1a106:	4814      	ldr	r0, [pc, #80]	; (1a158 <z_impl_k_sem_take+0x110>)
   1a108:	f003 fb54 	bl	1d7b4 <printk>
   1a10c:	480e      	ldr	r0, [pc, #56]	; (1a148 <z_impl_k_sem_take+0x100>)
   1a10e:	21ac      	movs	r1, #172	; 0xac
   1a110:	f003 fdaa 	bl	1dc68 <assert_post_action>
   1a114:	f385 8811 	msr	BASEPRI, r5
   1a118:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1a11c:	f06f 000f 	mvn.w	r0, #15
   1a120:	e7e1      	b.n	1a0e6 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1a122:	e9cd 6700 	strd	r6, r7, [sp]
   1a126:	4622      	mov	r2, r4
   1a128:	4629      	mov	r1, r5
   1a12a:	4806      	ldr	r0, [pc, #24]	; (1a144 <z_impl_k_sem_take+0xfc>)
   1a12c:	f001 fa58 	bl	1b5e0 <z_pend_curr>
	return ret;
   1a130:	e7d9      	b.n	1a0e6 <z_impl_k_sem_take+0x9e>
   1a132:	bf00      	nop
   1a134:	00022e5f 	.word	0x00022e5f
   1a138:	00022e3f 	.word	0x00022e3f
   1a13c:	00021650 	.word	0x00021650
   1a140:	000224f9 	.word	0x000224f9
   1a144:	20002068 	.word	0x20002068
   1a148:	00021710 	.word	0x00021710
   1a14c:	00021762 	.word	0x00021762
   1a150:	00021777 	.word	0x00021777
   1a154:	00021736 	.word	0x00021736
   1a158:	0002174d 	.word	0x0002174d

0001a15c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1a15c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1a15e:	4b09      	ldr	r3, [pc, #36]	; (1a184 <k_sys_work_q_init+0x28>)
   1a160:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1a162:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1a164:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1a166:	9300      	str	r3, [sp, #0]
   1a168:	4907      	ldr	r1, [pc, #28]	; (1a188 <k_sys_work_q_init+0x2c>)
   1a16a:	4808      	ldr	r0, [pc, #32]	; (1a18c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1a16c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1a170:	f04f 33ff 	mov.w	r3, #4294967295
   1a174:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1a178:	f000 fa88 	bl	1a68c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1a17c:	4620      	mov	r0, r4
   1a17e:	b004      	add	sp, #16
   1a180:	bd10      	pop	{r4, pc}
   1a182:	bf00      	nop
   1a184:	00022eac 	.word	0x00022eac
   1a188:	20004a20 	.word	0x20004a20
   1a18c:	20001c40 	.word	0x20001c40

0001a190 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a194:	4e7e      	ldr	r6, [pc, #504]	; (1a390 <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1a196:	4f7f      	ldr	r7, [pc, #508]	; (1a394 <work_queue_main+0x204>)
{
   1a198:	b085      	sub	sp, #20
   1a19a:	4604      	mov	r4, r0
	__asm__ volatile(
   1a19c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a1a0:	f3ef 8811 	mrs	r8, BASEPRI
   1a1a4:	f383 8812 	msr	BASEPRI_MAX, r3
   1a1a8:	f3bf 8f6f 	isb	sy
   1a1ac:	4630      	mov	r0, r6
   1a1ae:	f7ff fb89 	bl	198c4 <z_spin_lock_valid>
   1a1b2:	b968      	cbnz	r0, 1a1d0 <work_queue_main+0x40>
   1a1b4:	4a78      	ldr	r2, [pc, #480]	; (1a398 <work_queue_main+0x208>)
   1a1b6:	4979      	ldr	r1, [pc, #484]	; (1a39c <work_queue_main+0x20c>)
   1a1b8:	4879      	ldr	r0, [pc, #484]	; (1a3a0 <work_queue_main+0x210>)
   1a1ba:	2381      	movs	r3, #129	; 0x81
   1a1bc:	f003 fafa 	bl	1d7b4 <printk>
   1a1c0:	4878      	ldr	r0, [pc, #480]	; (1a3a4 <work_queue_main+0x214>)
   1a1c2:	4631      	mov	r1, r6
   1a1c4:	f003 faf6 	bl	1d7b4 <printk>
   1a1c8:	4873      	ldr	r0, [pc, #460]	; (1a398 <work_queue_main+0x208>)
   1a1ca:	2181      	movs	r1, #129	; 0x81
   1a1cc:	f003 fd4c 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a1d0:	4630      	mov	r0, r6
   1a1d2:	f7ff fb95 	bl	19900 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   1a1d6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   1a1da:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   1a1de:	b9ad      	cbnz	r5, 1a20c <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
   1a1e0:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   1a1e4:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   1a1e6:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   1a1ea:	f100 8092 	bmi.w	1a312 <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1a1ee:	2300      	movs	r3, #0
   1a1f0:	9302      	str	r3, [sp, #8]
   1a1f2:	f04f 32ff 	mov.w	r2, #4294967295
   1a1f6:	f04f 33ff 	mov.w	r3, #4294967295
   1a1fa:	e9cd 2300 	strd	r2, r3, [sp]
   1a1fe:	4641      	mov	r1, r8
   1a200:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1a204:	4630      	mov	r0, r6
   1a206:	f001 fef1 	bl	1bfec <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   1a20a:	e7c7      	b.n	1a19c <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a20c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   1a210:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   1a212:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a216:	428d      	cmp	r5, r1
   1a218:	d101      	bne.n	1a21e <work_queue_main+0x8e>
	list->tail = node;
   1a21a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1a21e:	f043 0302 	orr.w	r3, r3, #2
   1a222:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1a226:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   1a228:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   1a22c:	f023 0304 	bic.w	r3, r3, #4
   1a230:	f043 0301 	orr.w	r3, r3, #1
   1a234:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a236:	4630      	mov	r0, r6
   1a238:	f7ff fb52 	bl	198e0 <z_spin_unlock_valid>
   1a23c:	b968      	cbnz	r0, 1a25a <work_queue_main+0xca>
   1a23e:	4a56      	ldr	r2, [pc, #344]	; (1a398 <work_queue_main+0x208>)
   1a240:	4959      	ldr	r1, [pc, #356]	; (1a3a8 <work_queue_main+0x218>)
   1a242:	4857      	ldr	r0, [pc, #348]	; (1a3a0 <work_queue_main+0x210>)
   1a244:	23ac      	movs	r3, #172	; 0xac
   1a246:	f003 fab5 	bl	1d7b4 <printk>
   1a24a:	4858      	ldr	r0, [pc, #352]	; (1a3ac <work_queue_main+0x21c>)
   1a24c:	4631      	mov	r1, r6
   1a24e:	f003 fab1 	bl	1d7b4 <printk>
   1a252:	4851      	ldr	r0, [pc, #324]	; (1a398 <work_queue_main+0x208>)
   1a254:	21ac      	movs	r1, #172	; 0xac
   1a256:	f003 fd07 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1a25a:	f388 8811 	msr	BASEPRI, r8
   1a25e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
   1a262:	f1b9 0f00 	cmp.w	r9, #0
   1a266:	d10b      	bne.n	1a280 <work_queue_main+0xf0>
   1a268:	4951      	ldr	r1, [pc, #324]	; (1a3b0 <work_queue_main+0x220>)
   1a26a:	484d      	ldr	r0, [pc, #308]	; (1a3a0 <work_queue_main+0x210>)
   1a26c:	4a51      	ldr	r2, [pc, #324]	; (1a3b4 <work_queue_main+0x224>)
   1a26e:	f240 238a 	movw	r3, #650	; 0x28a
   1a272:	f003 fa9f 	bl	1d7b4 <printk>
   1a276:	484f      	ldr	r0, [pc, #316]	; (1a3b4 <work_queue_main+0x224>)
   1a278:	f240 218a 	movw	r1, #650	; 0x28a
   1a27c:	f003 fcf4 	bl	1dc68 <assert_post_action>
			handler(work);
   1a280:	4628      	mov	r0, r5
   1a282:	47c8      	blx	r9
	__asm__ volatile(
   1a284:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a288:	f3ef 8a11 	mrs	sl, BASEPRI
   1a28c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a290:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a294:	4630      	mov	r0, r6
   1a296:	f7ff fb15 	bl	198c4 <z_spin_lock_valid>
   1a29a:	b968      	cbnz	r0, 1a2b8 <work_queue_main+0x128>
   1a29c:	4a3e      	ldr	r2, [pc, #248]	; (1a398 <work_queue_main+0x208>)
   1a29e:	493f      	ldr	r1, [pc, #252]	; (1a39c <work_queue_main+0x20c>)
   1a2a0:	483f      	ldr	r0, [pc, #252]	; (1a3a0 <work_queue_main+0x210>)
   1a2a2:	2381      	movs	r3, #129	; 0x81
   1a2a4:	f003 fa86 	bl	1d7b4 <printk>
   1a2a8:	483e      	ldr	r0, [pc, #248]	; (1a3a4 <work_queue_main+0x214>)
   1a2aa:	4631      	mov	r1, r6
   1a2ac:	f003 fa82 	bl	1d7b4 <printk>
   1a2b0:	4839      	ldr	r0, [pc, #228]	; (1a398 <work_queue_main+0x208>)
   1a2b2:	2181      	movs	r1, #129	; 0x81
   1a2b4:	f003 fcd8 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a2b8:	4630      	mov	r0, r6
   1a2ba:	f7ff fb21 	bl	19900 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   1a2be:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a2c0:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1a2c2:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a2c6:	d42e      	bmi.n	1a326 <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
   1a2c8:	60ea      	str	r2, [r5, #12]
   1a2ca:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1a2ce:	f023 0302 	bic.w	r3, r3, #2
   1a2d2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a2d6:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   1a2d8:	f3c3 2500 	ubfx	r5, r3, #8, #1
   1a2dc:	f7ff fb00 	bl	198e0 <z_spin_unlock_valid>
   1a2e0:	b968      	cbnz	r0, 1a2fe <work_queue_main+0x16e>
   1a2e2:	4a2d      	ldr	r2, [pc, #180]	; (1a398 <work_queue_main+0x208>)
   1a2e4:	4930      	ldr	r1, [pc, #192]	; (1a3a8 <work_queue_main+0x218>)
   1a2e6:	482e      	ldr	r0, [pc, #184]	; (1a3a0 <work_queue_main+0x210>)
   1a2e8:	23ac      	movs	r3, #172	; 0xac
   1a2ea:	f003 fa63 	bl	1d7b4 <printk>
   1a2ee:	482f      	ldr	r0, [pc, #188]	; (1a3ac <work_queue_main+0x21c>)
   1a2f0:	4631      	mov	r1, r6
   1a2f2:	f003 fa5f 	bl	1d7b4 <printk>
   1a2f6:	4828      	ldr	r0, [pc, #160]	; (1a398 <work_queue_main+0x208>)
   1a2f8:	21ac      	movs	r1, #172	; 0xac
   1a2fa:	f003 fcb5 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1a2fe:	f38a 8811 	msr	BASEPRI, sl
   1a302:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   1a306:	2d00      	cmp	r5, #0
   1a308:	f47f af48 	bne.w	1a19c <work_queue_main+0xc>
	z_impl_k_yield();
   1a30c:	f001 fbc2 	bl	1ba94 <z_impl_k_yield>
}
   1a310:	e744      	b.n	1a19c <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1a312:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1a316:	2200      	movs	r2, #0
   1a318:	2101      	movs	r1, #1
   1a31a:	4628      	mov	r0, r5
   1a31c:	f001 fe0e 	bl	1bf3c <z_sched_wake>
   1a320:	2800      	cmp	r0, #0
   1a322:	d1f8      	bne.n	1a316 <work_queue_main+0x186>
   1a324:	e763      	b.n	1a1ee <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1a326:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   1a328:	f023 0303 	bic.w	r3, r3, #3
   1a32c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1a32e:	2800      	cmp	r0, #0
   1a330:	d0cb      	beq.n	1a2ca <work_queue_main+0x13a>
	return node->next;
   1a332:	6803      	ldr	r3, [r0, #0]
   1a334:	2b00      	cmp	r3, #0
   1a336:	bf38      	it	cc
   1a338:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a33a:	f04f 0900 	mov.w	r9, #0
   1a33e:	4698      	mov	r8, r3
	parent->next = child;
   1a340:	46cb      	mov	fp, r9
		if (wc->work == work) {
   1a342:	6843      	ldr	r3, [r0, #4]
   1a344:	429d      	cmp	r5, r3
   1a346:	4602      	mov	r2, r0
   1a348:	d10d      	bne.n	1a366 <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
   1a34a:	6802      	ldr	r2, [r0, #0]
   1a34c:	f1b9 0f00 	cmp.w	r9, #0
   1a350:	d115      	bne.n	1a37e <work_queue_main+0x1ee>
   1a352:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   1a354:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a356:	4283      	cmp	r3, r0
   1a358:	d100      	bne.n	1a35c <work_queue_main+0x1cc>
	list->tail = node;
   1a35a:	607a      	str	r2, [r7, #4]
	parent->next = child;
   1a35c:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   1a360:	f7ff fe2e 	bl	19fc0 <z_impl_k_sem_give>
}
   1a364:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1a366:	f1b8 0f00 	cmp.w	r8, #0
   1a36a:	d0ae      	beq.n	1a2ca <work_queue_main+0x13a>
	return node->next;
   1a36c:	f8d8 3000 	ldr.w	r3, [r8]
   1a370:	2b00      	cmp	r3, #0
   1a372:	bf38      	it	cc
   1a374:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a376:	4640      	mov	r0, r8
   1a378:	4691      	mov	r9, r2
   1a37a:	4698      	mov	r8, r3
   1a37c:	e7e1      	b.n	1a342 <work_queue_main+0x1b2>
	parent->next = child;
   1a37e:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   1a382:	687b      	ldr	r3, [r7, #4]
   1a384:	4283      	cmp	r3, r0
	list->tail = node;
   1a386:	bf08      	it	eq
   1a388:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   1a38c:	e7e6      	b.n	1a35c <work_queue_main+0x1cc>
   1a38e:	bf00      	nop
   1a390:	2000206c 	.word	0x2000206c
   1a394:	20002070 	.word	0x20002070
   1a398:	00021710 	.word	0x00021710
   1a39c:	00021762 	.word	0x00021762
   1a3a0:	00021650 	.word	0x00021650
   1a3a4:	00021777 	.word	0x00021777
   1a3a8:	00021736 	.word	0x00021736
   1a3ac:	0002174d 	.word	0x0002174d
   1a3b0:	00022ed6 	.word	0x00022ed6
   1a3b4:	00022eb5 	.word	0x00022eb5

0001a3b8 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1a3b8:	68c3      	ldr	r3, [r0, #12]
{
   1a3ba:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1a3bc:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1a3c0:	079b      	lsls	r3, r3, #30
{
   1a3c2:	4605      	mov	r5, r0
   1a3c4:	460c      	mov	r4, r1
	if (ret) {
   1a3c6:	d50d      	bpl.n	1a3e4 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a3c8:	2201      	movs	r2, #1
   1a3ca:	2100      	movs	r1, #0
   1a3cc:	f104 0008 	add.w	r0, r4, #8
   1a3d0:	f006 fa07 	bl	207e2 <z_impl_k_sem_init>
	parent->next = child;
   1a3d4:	2300      	movs	r3, #0
   1a3d6:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1a3d8:	4b05      	ldr	r3, [pc, #20]	; (1a3f0 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1a3da:	6065      	str	r5, [r4, #4]
   1a3dc:	685a      	ldr	r2, [r3, #4]
   1a3de:	b91a      	cbnz	r2, 1a3e8 <cancel_sync_locked+0x30>
	list->head = node;
   1a3e0:	e9c3 4400 	strd	r4, r4, [r3]
}
   1a3e4:	4630      	mov	r0, r6
   1a3e6:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1a3e8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1a3ea:	605c      	str	r4, [r3, #4]
}
   1a3ec:	e7fa      	b.n	1a3e4 <cancel_sync_locked+0x2c>
   1a3ee:	bf00      	nop
   1a3f0:	20002070 	.word	0x20002070

0001a3f4 <submit_to_queue_locked>:
{
   1a3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a3f6:	68c3      	ldr	r3, [r0, #12]
   1a3f8:	079a      	lsls	r2, r3, #30
{
   1a3fa:	4604      	mov	r4, r0
   1a3fc:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a3fe:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1a402:	d42b      	bmi.n	1a45c <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1a404:	075f      	lsls	r7, r3, #29
   1a406:	d42b      	bmi.n	1a460 <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
   1a408:	680a      	ldr	r2, [r1, #0]
   1a40a:	b90a      	cbnz	r2, 1a410 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1a40c:	6882      	ldr	r2, [r0, #8]
   1a40e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1a410:	07d8      	lsls	r0, r3, #31
   1a412:	d528      	bpl.n	1a466 <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
   1a414:	68a3      	ldr	r3, [r4, #8]
   1a416:	b95b      	cbnz	r3, 1a430 <submit_to_queue_locked+0x3c>
   1a418:	4924      	ldr	r1, [pc, #144]	; (1a4ac <submit_to_queue_locked+0xb8>)
   1a41a:	4825      	ldr	r0, [pc, #148]	; (1a4b0 <submit_to_queue_locked+0xbc>)
   1a41c:	4a25      	ldr	r2, [pc, #148]	; (1a4b4 <submit_to_queue_locked+0xc0>)
   1a41e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1a422:	f003 f9c7 	bl	1d7b4 <printk>
   1a426:	4823      	ldr	r0, [pc, #140]	; (1a4b4 <submit_to_queue_locked+0xc0>)
   1a428:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1a42c:	f003 fc1c 	bl	1dc68 <assert_post_action>
			*queuep = work->queue;
   1a430:	68a3      	ldr	r3, [r4, #8]
   1a432:	6033      	str	r3, [r6, #0]
			ret = 2;
   1a434:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
   1a436:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   1a438:	b38f      	cbz	r7, 1a49e <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1a43a:	4b1f      	ldr	r3, [pc, #124]	; (1a4b8 <submit_to_queue_locked+0xc4>)
   1a43c:	689b      	ldr	r3, [r3, #8]
   1a43e:	42bb      	cmp	r3, r7
   1a440:	d113      	bne.n	1a46a <submit_to_queue_locked+0x76>
   1a442:	f006 f98e 	bl	20762 <k_is_in_isr>
   1a446:	f080 0001 	eor.w	r0, r0, #1
   1a44a:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   1a44c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1a450:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1a452:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1a456:	d525      	bpl.n	1a4a4 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
   1a458:	b14a      	cbz	r2, 1a46e <submit_to_queue_locked+0x7a>
   1a45a:	b950      	cbnz	r0, 1a472 <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   1a45c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1a460:	2300      	movs	r3, #0
   1a462:	6033      	str	r3, [r6, #0]
	return ret;
   1a464:	e015      	b.n	1a492 <submit_to_queue_locked+0x9e>
		ret = 1;
   1a466:	2501      	movs	r5, #1
   1a468:	e7e5      	b.n	1a436 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1a46a:	2000      	movs	r0, #0
   1a46c:	e7ee      	b.n	1a44c <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
   1a46e:	071b      	lsls	r3, r3, #28
   1a470:	d4f4      	bmi.n	1a45c <submit_to_queue_locked+0x68>
	parent->next = child;
   1a472:	2300      	movs	r3, #0
   1a474:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1a476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1a47a:	b963      	cbnz	r3, 1a496 <submit_to_queue_locked+0xa2>
	list->head = node;
   1a47c:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1a480:	4638      	mov	r0, r7
   1a482:	f006 f9be 	bl	20802 <notify_queue_locked>
	*flagp |= BIT(bit);
   1a486:	68e3      	ldr	r3, [r4, #12]
   1a488:	f043 0304 	orr.w	r3, r3, #4
   1a48c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1a48e:	6833      	ldr	r3, [r6, #0]
   1a490:	60a3      	str	r3, [r4, #8]
}
   1a492:	4628      	mov	r0, r5
   1a494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1a496:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a498:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1a49c:	e7f0      	b.n	1a480 <submit_to_queue_locked+0x8c>
		return -EINVAL;
   1a49e:	f06f 0515 	mvn.w	r5, #21
   1a4a2:	e7dd      	b.n	1a460 <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
   1a4a4:	f06f 0512 	mvn.w	r5, #18
   1a4a8:	e7da      	b.n	1a460 <submit_to_queue_locked+0x6c>
   1a4aa:	bf00      	nop
   1a4ac:	00022eed 	.word	0x00022eed
   1a4b0:	00021650 	.word	0x00021650
   1a4b4:	00022eb5 	.word	0x00022eb5
   1a4b8:	2000203c 	.word	0x2000203c

0001a4bc <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   1a4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a4be:	4604      	mov	r4, r0
	__asm__ volatile(
   1a4c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a4c4:	f3ef 8511 	mrs	r5, BASEPRI
   1a4c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1a4cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a4d0:	481e      	ldr	r0, [pc, #120]	; (1a54c <work_timeout+0x90>)
   1a4d2:	f7ff f9f7 	bl	198c4 <z_spin_lock_valid>
   1a4d6:	b968      	cbnz	r0, 1a4f4 <work_timeout+0x38>
   1a4d8:	4a1d      	ldr	r2, [pc, #116]	; (1a550 <work_timeout+0x94>)
   1a4da:	491e      	ldr	r1, [pc, #120]	; (1a554 <work_timeout+0x98>)
   1a4dc:	481e      	ldr	r0, [pc, #120]	; (1a558 <work_timeout+0x9c>)
   1a4de:	2381      	movs	r3, #129	; 0x81
   1a4e0:	f003 f968 	bl	1d7b4 <printk>
   1a4e4:	4919      	ldr	r1, [pc, #100]	; (1a54c <work_timeout+0x90>)
   1a4e6:	481d      	ldr	r0, [pc, #116]	; (1a55c <work_timeout+0xa0>)
   1a4e8:	f003 f964 	bl	1d7b4 <printk>
   1a4ec:	4818      	ldr	r0, [pc, #96]	; (1a550 <work_timeout+0x94>)
   1a4ee:	2181      	movs	r1, #129	; 0x81
   1a4f0:	f003 fbba 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a4f4:	4815      	ldr	r0, [pc, #84]	; (1a54c <work_timeout+0x90>)
   1a4f6:	f7ff fa03 	bl	19900 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   1a4fa:	2300      	movs	r3, #0
   1a4fc:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   1a4fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   1a502:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1a506:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   1a508:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1a50c:	d506      	bpl.n	1a51c <work_timeout+0x60>
		queue = dw->queue;
   1a50e:	69a3      	ldr	r3, [r4, #24]
   1a510:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1a512:	a901      	add	r1, sp, #4
   1a514:	f1a4 0010 	sub.w	r0, r4, #16
   1a518:	f7ff ff6c 	bl	1a3f4 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a51c:	480b      	ldr	r0, [pc, #44]	; (1a54c <work_timeout+0x90>)
   1a51e:	f7ff f9df 	bl	198e0 <z_spin_unlock_valid>
   1a522:	b968      	cbnz	r0, 1a540 <work_timeout+0x84>
   1a524:	4a0a      	ldr	r2, [pc, #40]	; (1a550 <work_timeout+0x94>)
   1a526:	490e      	ldr	r1, [pc, #56]	; (1a560 <work_timeout+0xa4>)
   1a528:	480b      	ldr	r0, [pc, #44]	; (1a558 <work_timeout+0x9c>)
   1a52a:	23ac      	movs	r3, #172	; 0xac
   1a52c:	f003 f942 	bl	1d7b4 <printk>
   1a530:	4906      	ldr	r1, [pc, #24]	; (1a54c <work_timeout+0x90>)
   1a532:	480c      	ldr	r0, [pc, #48]	; (1a564 <work_timeout+0xa8>)
   1a534:	f003 f93e 	bl	1d7b4 <printk>
   1a538:	4805      	ldr	r0, [pc, #20]	; (1a550 <work_timeout+0x94>)
   1a53a:	21ac      	movs	r1, #172	; 0xac
   1a53c:	f003 fb94 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1a540:	f385 8811 	msr	BASEPRI, r5
   1a544:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   1a548:	b003      	add	sp, #12
   1a54a:	bd30      	pop	{r4, r5, pc}
   1a54c:	2000206c 	.word	0x2000206c
   1a550:	00021710 	.word	0x00021710
   1a554:	00021762 	.word	0x00021762
   1a558:	00021650 	.word	0x00021650
   1a55c:	00021777 	.word	0x00021777
   1a560:	00021736 	.word	0x00021736
   1a564:	0002174d 	.word	0x0002174d

0001a568 <k_work_init>:
{
   1a568:	b538      	push	{r3, r4, r5, lr}
   1a56a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   1a56c:	4604      	mov	r4, r0
   1a56e:	b948      	cbnz	r0, 1a584 <k_work_init+0x1c>
   1a570:	490d      	ldr	r1, [pc, #52]	; (1a5a8 <k_work_init+0x40>)
   1a572:	480e      	ldr	r0, [pc, #56]	; (1a5ac <k_work_init+0x44>)
   1a574:	4a0e      	ldr	r2, [pc, #56]	; (1a5b0 <k_work_init+0x48>)
   1a576:	2389      	movs	r3, #137	; 0x89
   1a578:	f003 f91c 	bl	1d7b4 <printk>
   1a57c:	480c      	ldr	r0, [pc, #48]	; (1a5b0 <k_work_init+0x48>)
   1a57e:	2189      	movs	r1, #137	; 0x89
   1a580:	f003 fb72 	bl	1dc68 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   1a584:	b94d      	cbnz	r5, 1a59a <k_work_init+0x32>
   1a586:	490b      	ldr	r1, [pc, #44]	; (1a5b4 <k_work_init+0x4c>)
   1a588:	4808      	ldr	r0, [pc, #32]	; (1a5ac <k_work_init+0x44>)
   1a58a:	4a09      	ldr	r2, [pc, #36]	; (1a5b0 <k_work_init+0x48>)
   1a58c:	238a      	movs	r3, #138	; 0x8a
   1a58e:	f003 f911 	bl	1d7b4 <printk>
   1a592:	4807      	ldr	r0, [pc, #28]	; (1a5b0 <k_work_init+0x48>)
   1a594:	218a      	movs	r1, #138	; 0x8a
   1a596:	f003 fb67 	bl	1dc68 <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1a59a:	2210      	movs	r2, #16
   1a59c:	2100      	movs	r1, #0
   1a59e:	4620      	mov	r0, r4
   1a5a0:	f006 fa71 	bl	20a86 <memset>
   1a5a4:	6065      	str	r5, [r4, #4]
}
   1a5a6:	bd38      	pop	{r3, r4, r5, pc}
   1a5a8:	00022f8c 	.word	0x00022f8c
   1a5ac:	00021650 	.word	0x00021650
   1a5b0:	00022eb5 	.word	0x00022eb5
   1a5b4:	00022ed6 	.word	0x00022ed6

0001a5b8 <k_work_submit_to_queue>:
{
   1a5b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   1a5ba:	460c      	mov	r4, r1
{
   1a5bc:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   1a5be:	b959      	cbnz	r1, 1a5d8 <k_work_submit_to_queue+0x20>
   1a5c0:	4926      	ldr	r1, [pc, #152]	; (1a65c <k_work_submit_to_queue+0xa4>)
   1a5c2:	4827      	ldr	r0, [pc, #156]	; (1a660 <k_work_submit_to_queue+0xa8>)
   1a5c4:	4a27      	ldr	r2, [pc, #156]	; (1a664 <k_work_submit_to_queue+0xac>)
   1a5c6:	f240 1369 	movw	r3, #361	; 0x169
   1a5ca:	f003 f8f3 	bl	1d7b4 <printk>
   1a5ce:	4825      	ldr	r0, [pc, #148]	; (1a664 <k_work_submit_to_queue+0xac>)
   1a5d0:	f240 1169 	movw	r1, #361	; 0x169
   1a5d4:	f003 fb48 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1a5d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a5dc:	f3ef 8511 	mrs	r5, BASEPRI
   1a5e0:	f383 8812 	msr	BASEPRI_MAX, r3
   1a5e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a5e8:	481f      	ldr	r0, [pc, #124]	; (1a668 <k_work_submit_to_queue+0xb0>)
   1a5ea:	f7ff f96b 	bl	198c4 <z_spin_lock_valid>
   1a5ee:	b968      	cbnz	r0, 1a60c <k_work_submit_to_queue+0x54>
   1a5f0:	4a1e      	ldr	r2, [pc, #120]	; (1a66c <k_work_submit_to_queue+0xb4>)
   1a5f2:	491f      	ldr	r1, [pc, #124]	; (1a670 <k_work_submit_to_queue+0xb8>)
   1a5f4:	481a      	ldr	r0, [pc, #104]	; (1a660 <k_work_submit_to_queue+0xa8>)
   1a5f6:	2381      	movs	r3, #129	; 0x81
   1a5f8:	f003 f8dc 	bl	1d7b4 <printk>
   1a5fc:	491a      	ldr	r1, [pc, #104]	; (1a668 <k_work_submit_to_queue+0xb0>)
   1a5fe:	481d      	ldr	r0, [pc, #116]	; (1a674 <k_work_submit_to_queue+0xbc>)
   1a600:	f003 f8d8 	bl	1d7b4 <printk>
   1a604:	4819      	ldr	r0, [pc, #100]	; (1a66c <k_work_submit_to_queue+0xb4>)
   1a606:	2181      	movs	r1, #129	; 0x81
   1a608:	f003 fb2e 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a60c:	4816      	ldr	r0, [pc, #88]	; (1a668 <k_work_submit_to_queue+0xb0>)
   1a60e:	f7ff f977 	bl	19900 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   1a612:	4620      	mov	r0, r4
   1a614:	a901      	add	r1, sp, #4
   1a616:	f7ff feed 	bl	1a3f4 <submit_to_queue_locked>
   1a61a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a61c:	4812      	ldr	r0, [pc, #72]	; (1a668 <k_work_submit_to_queue+0xb0>)
   1a61e:	f7ff f95f 	bl	198e0 <z_spin_unlock_valid>
   1a622:	b968      	cbnz	r0, 1a640 <k_work_submit_to_queue+0x88>
   1a624:	4a11      	ldr	r2, [pc, #68]	; (1a66c <k_work_submit_to_queue+0xb4>)
   1a626:	4914      	ldr	r1, [pc, #80]	; (1a678 <k_work_submit_to_queue+0xc0>)
   1a628:	480d      	ldr	r0, [pc, #52]	; (1a660 <k_work_submit_to_queue+0xa8>)
   1a62a:	23ac      	movs	r3, #172	; 0xac
   1a62c:	f003 f8c2 	bl	1d7b4 <printk>
   1a630:	490d      	ldr	r1, [pc, #52]	; (1a668 <k_work_submit_to_queue+0xb0>)
   1a632:	4812      	ldr	r0, [pc, #72]	; (1a67c <k_work_submit_to_queue+0xc4>)
   1a634:	f003 f8be 	bl	1d7b4 <printk>
   1a638:	480c      	ldr	r0, [pc, #48]	; (1a66c <k_work_submit_to_queue+0xb4>)
   1a63a:	21ac      	movs	r1, #172	; 0xac
   1a63c:	f003 fb14 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1a640:	f385 8811 	msr	BASEPRI, r5
   1a644:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1a648:	2c00      	cmp	r4, #0
   1a64a:	dd04      	ble.n	1a656 <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
   1a64c:	f001 fbb2 	bl	1bdb4 <z_impl_k_is_preempt_thread>
   1a650:	b108      	cbz	r0, 1a656 <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
   1a652:	f001 fa1f 	bl	1ba94 <z_impl_k_yield>
}
   1a656:	4620      	mov	r0, r4
   1a658:	b003      	add	sp, #12
   1a65a:	bd30      	pop	{r4, r5, pc}
   1a65c:	00022f8c 	.word	0x00022f8c
   1a660:	00021650 	.word	0x00021650
   1a664:	00022eb5 	.word	0x00022eb5
   1a668:	2000206c 	.word	0x2000206c
   1a66c:	00021710 	.word	0x00021710
   1a670:	00021762 	.word	0x00021762
   1a674:	00021777 	.word	0x00021777
   1a678:	00021736 	.word	0x00021736
   1a67c:	0002174d 	.word	0x0002174d

0001a680 <k_work_submit>:
{
   1a680:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1a682:	4801      	ldr	r0, [pc, #4]	; (1a688 <k_work_submit+0x8>)
   1a684:	f7ff bf98 	b.w	1a5b8 <k_work_submit_to_queue>
   1a688:	20001c40 	.word	0x20001c40

0001a68c <k_work_queue_start>:
{
   1a68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a690:	b088      	sub	sp, #32
   1a692:	460e      	mov	r6, r1
   1a694:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1a696:	4617      	mov	r7, r2
   1a698:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   1a69a:	4604      	mov	r4, r0
   1a69c:	b958      	cbnz	r0, 1a6b6 <k_work_queue_start+0x2a>
   1a69e:	492e      	ldr	r1, [pc, #184]	; (1a758 <k_work_queue_start+0xcc>)
   1a6a0:	482e      	ldr	r0, [pc, #184]	; (1a75c <k_work_queue_start+0xd0>)
   1a6a2:	4a2f      	ldr	r2, [pc, #188]	; (1a760 <k_work_queue_start+0xd4>)
   1a6a4:	f44f 732e 	mov.w	r3, #696	; 0x2b8
   1a6a8:	f003 f884 	bl	1d7b4 <printk>
   1a6ac:	482c      	ldr	r0, [pc, #176]	; (1a760 <k_work_queue_start+0xd4>)
   1a6ae:	f44f 712e 	mov.w	r1, #696	; 0x2b8
   1a6b2:	f003 fad9 	bl	1dc68 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   1a6b6:	b95e      	cbnz	r6, 1a6d0 <k_work_queue_start+0x44>
   1a6b8:	492a      	ldr	r1, [pc, #168]	; (1a764 <k_work_queue_start+0xd8>)
   1a6ba:	4828      	ldr	r0, [pc, #160]	; (1a75c <k_work_queue_start+0xd0>)
   1a6bc:	4a28      	ldr	r2, [pc, #160]	; (1a760 <k_work_queue_start+0xd4>)
   1a6be:	f240 23b9 	movw	r3, #697	; 0x2b9
   1a6c2:	f003 f877 	bl	1d7b4 <printk>
   1a6c6:	4826      	ldr	r0, [pc, #152]	; (1a760 <k_work_queue_start+0xd4>)
   1a6c8:	f240 21b9 	movw	r1, #697	; 0x2b9
   1a6cc:	f003 facc 	bl	1dc68 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   1a6d0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   1a6d4:	07db      	lsls	r3, r3, #31
   1a6d6:	d50b      	bpl.n	1a6f0 <k_work_queue_start+0x64>
   1a6d8:	4923      	ldr	r1, [pc, #140]	; (1a768 <k_work_queue_start+0xdc>)
   1a6da:	4820      	ldr	r0, [pc, #128]	; (1a75c <k_work_queue_start+0xd0>)
   1a6dc:	4a20      	ldr	r2, [pc, #128]	; (1a760 <k_work_queue_start+0xd4>)
   1a6de:	f240 23ba 	movw	r3, #698	; 0x2ba
   1a6e2:	f003 f867 	bl	1d7b4 <printk>
   1a6e6:	481e      	ldr	r0, [pc, #120]	; (1a760 <k_work_queue_start+0xd4>)
   1a6e8:	f240 21ba 	movw	r1, #698	; 0x2ba
   1a6ec:	f003 fabc 	bl	1dc68 <assert_post_action>
	list->head = NULL;
   1a6f0:	2300      	movs	r3, #0
	list->tail = NULL;
   1a6f2:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   1a6f6:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1a6fa:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   1a6fe:	f104 0390 	add.w	r3, r4, #144	; 0x90
   1a702:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   1a706:	b32d      	cbz	r5, 1a754 <k_work_queue_start+0xc8>
   1a708:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1a70a:	2b00      	cmp	r3, #0
   1a70c:	f240 1101 	movw	r1, #257	; 0x101
   1a710:	bf08      	it	eq
   1a712:	2101      	moveq	r1, #1
	*flagp = flags;
   1a714:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a718:	f04f 32ff 	mov.w	r2, #4294967295
   1a71c:	f04f 33ff 	mov.w	r3, #4294967295
   1a720:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a724:	2200      	movs	r2, #0
   1a726:	e9cd 8203 	strd	r8, r2, [sp, #12]
   1a72a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1a72e:	4b0f      	ldr	r3, [pc, #60]	; (1a76c <k_work_queue_start+0xe0>)
   1a730:	9400      	str	r4, [sp, #0]
   1a732:	463a      	mov	r2, r7
   1a734:	4631      	mov	r1, r6
   1a736:	4620      	mov	r0, r4
   1a738:	f7fe ffe6 	bl	19708 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1a73c:	b125      	cbz	r5, 1a748 <k_work_queue_start+0xbc>
   1a73e:	6829      	ldr	r1, [r5, #0]
   1a740:	b111      	cbz	r1, 1a748 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
   1a742:	4620      	mov	r0, r4
   1a744:	f006 f813 	bl	2076e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1a748:	4620      	mov	r0, r4
}
   1a74a:	b008      	add	sp, #32
   1a74c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a750:	f006 b810 	b.w	20774 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1a754:	2101      	movs	r1, #1
   1a756:	e7dd      	b.n	1a714 <k_work_queue_start+0x88>
   1a758:	00022f4b 	.word	0x00022f4b
   1a75c:	00021650 	.word	0x00021650
   1a760:	00022eb5 	.word	0x00022eb5
   1a764:	00022f51 	.word	0x00022f51
   1a768:	00022f57 	.word	0x00022f57
   1a76c:	0001a191 	.word	0x0001a191

0001a770 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   1a770:	b538      	push	{r3, r4, r5, lr}
   1a772:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1a774:	4604      	mov	r4, r0
   1a776:	b958      	cbnz	r0, 1a790 <k_work_init_delayable+0x20>
   1a778:	4911      	ldr	r1, [pc, #68]	; (1a7c0 <k_work_init_delayable+0x50>)
   1a77a:	4812      	ldr	r0, [pc, #72]	; (1a7c4 <k_work_init_delayable+0x54>)
   1a77c:	4a12      	ldr	r2, [pc, #72]	; (1a7c8 <k_work_init_delayable+0x58>)
   1a77e:	f44f 734c 	mov.w	r3, #816	; 0x330
   1a782:	f003 f817 	bl	1d7b4 <printk>
   1a786:	4810      	ldr	r0, [pc, #64]	; (1a7c8 <k_work_init_delayable+0x58>)
   1a788:	f44f 714c 	mov.w	r1, #816	; 0x330
   1a78c:	f003 fa6c 	bl	1dc68 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   1a790:	b95d      	cbnz	r5, 1a7aa <k_work_init_delayable+0x3a>
   1a792:	490e      	ldr	r1, [pc, #56]	; (1a7cc <k_work_init_delayable+0x5c>)
   1a794:	480b      	ldr	r0, [pc, #44]	; (1a7c4 <k_work_init_delayable+0x54>)
   1a796:	4a0c      	ldr	r2, [pc, #48]	; (1a7c8 <k_work_init_delayable+0x58>)
   1a798:	f240 3331 	movw	r3, #817	; 0x331
   1a79c:	f003 f80a 	bl	1d7b4 <printk>
   1a7a0:	4809      	ldr	r0, [pc, #36]	; (1a7c8 <k_work_init_delayable+0x58>)
   1a7a2:	f240 3131 	movw	r1, #817	; 0x331
   1a7a6:	f003 fa5f 	bl	1dc68 <assert_post_action>

	*dwork = (struct k_work_delayable){
   1a7aa:	2230      	movs	r2, #48	; 0x30
   1a7ac:	2100      	movs	r1, #0
   1a7ae:	4620      	mov	r0, r4
   1a7b0:	f006 f969 	bl	20a86 <memset>
   1a7b4:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a7b8:	6065      	str	r5, [r4, #4]
   1a7ba:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   1a7bc:	bd38      	pop	{r3, r4, r5, pc}
   1a7be:	bf00      	nop
   1a7c0:	00022f8b 	.word	0x00022f8b
   1a7c4:	00021650 	.word	0x00021650
   1a7c8:	00022eb5 	.word	0x00022eb5
   1a7cc:	00022ed6 	.word	0x00022ed6

0001a7d0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1a7d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a7d2:	4616      	mov	r6, r2
   1a7d4:	9001      	str	r0, [sp, #4]
   1a7d6:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1a7d8:	460c      	mov	r4, r1
   1a7da:	b959      	cbnz	r1, 1a7f4 <k_work_schedule_for_queue+0x24>
   1a7dc:	492e      	ldr	r1, [pc, #184]	; (1a898 <k_work_schedule_for_queue+0xc8>)
   1a7de:	482f      	ldr	r0, [pc, #188]	; (1a89c <k_work_schedule_for_queue+0xcc>)
   1a7e0:	4a2f      	ldr	r2, [pc, #188]	; (1a8a0 <k_work_schedule_for_queue+0xd0>)
   1a7e2:	f240 33a7 	movw	r3, #935	; 0x3a7
   1a7e6:	f002 ffe5 	bl	1d7b4 <printk>
   1a7ea:	482d      	ldr	r0, [pc, #180]	; (1a8a0 <k_work_schedule_for_queue+0xd0>)
   1a7ec:	f240 31a7 	movw	r1, #935	; 0x3a7
   1a7f0:	f003 fa3a 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1a7f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a7f8:	f3ef 8511 	mrs	r5, BASEPRI
   1a7fc:	f383 8812 	msr	BASEPRI_MAX, r3
   1a800:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a804:	4827      	ldr	r0, [pc, #156]	; (1a8a4 <k_work_schedule_for_queue+0xd4>)
   1a806:	f7ff f85d 	bl	198c4 <z_spin_lock_valid>
   1a80a:	b968      	cbnz	r0, 1a828 <k_work_schedule_for_queue+0x58>
   1a80c:	4a26      	ldr	r2, [pc, #152]	; (1a8a8 <k_work_schedule_for_queue+0xd8>)
   1a80e:	4927      	ldr	r1, [pc, #156]	; (1a8ac <k_work_schedule_for_queue+0xdc>)
   1a810:	4822      	ldr	r0, [pc, #136]	; (1a89c <k_work_schedule_for_queue+0xcc>)
   1a812:	2381      	movs	r3, #129	; 0x81
   1a814:	f002 ffce 	bl	1d7b4 <printk>
   1a818:	4922      	ldr	r1, [pc, #136]	; (1a8a4 <k_work_schedule_for_queue+0xd4>)
   1a81a:	4825      	ldr	r0, [pc, #148]	; (1a8b0 <k_work_schedule_for_queue+0xe0>)
   1a81c:	f002 ffca 	bl	1d7b4 <printk>
   1a820:	4821      	ldr	r0, [pc, #132]	; (1a8a8 <k_work_schedule_for_queue+0xd8>)
   1a822:	2181      	movs	r1, #129	; 0x81
   1a824:	f003 fa20 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a828:	481e      	ldr	r0, [pc, #120]	; (1a8a4 <k_work_schedule_for_queue+0xd4>)
   1a82a:	f7ff f869 	bl	19900 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   1a82e:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1a830:	f013 0f0e 	tst.w	r3, #14
   1a834:	d12e      	bne.n	1a894 <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a836:	ea56 0207 	orrs.w	r2, r6, r7
   1a83a:	d11d      	bne.n	1a878 <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
   1a83c:	4620      	mov	r0, r4
   1a83e:	a901      	add	r1, sp, #4
   1a840:	f7ff fdd8 	bl	1a3f4 <submit_to_queue_locked>
   1a844:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a846:	4817      	ldr	r0, [pc, #92]	; (1a8a4 <k_work_schedule_for_queue+0xd4>)
   1a848:	f7ff f84a 	bl	198e0 <z_spin_unlock_valid>
   1a84c:	b968      	cbnz	r0, 1a86a <k_work_schedule_for_queue+0x9a>
   1a84e:	4a16      	ldr	r2, [pc, #88]	; (1a8a8 <k_work_schedule_for_queue+0xd8>)
   1a850:	4918      	ldr	r1, [pc, #96]	; (1a8b4 <k_work_schedule_for_queue+0xe4>)
   1a852:	4812      	ldr	r0, [pc, #72]	; (1a89c <k_work_schedule_for_queue+0xcc>)
   1a854:	23ac      	movs	r3, #172	; 0xac
   1a856:	f002 ffad 	bl	1d7b4 <printk>
   1a85a:	4912      	ldr	r1, [pc, #72]	; (1a8a4 <k_work_schedule_for_queue+0xd4>)
   1a85c:	4816      	ldr	r0, [pc, #88]	; (1a8b8 <k_work_schedule_for_queue+0xe8>)
   1a85e:	f002 ffa9 	bl	1d7b4 <printk>
   1a862:	4811      	ldr	r0, [pc, #68]	; (1a8a8 <k_work_schedule_for_queue+0xd8>)
   1a864:	21ac      	movs	r1, #172	; 0xac
   1a866:	f003 f9ff 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1a86a:	f385 8811 	msr	BASEPRI, r5
   1a86e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1a872:	4620      	mov	r0, r4
   1a874:	b003      	add	sp, #12
   1a876:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1a878:	f043 0308 	orr.w	r3, r3, #8
   1a87c:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1a87e:	9b01      	ldr	r3, [sp, #4]
   1a880:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1a882:	f104 0010 	add.w	r0, r4, #16
   1a886:	490d      	ldr	r1, [pc, #52]	; (1a8bc <k_work_schedule_for_queue+0xec>)
   1a888:	4632      	mov	r2, r6
   1a88a:	463b      	mov	r3, r7
   1a88c:	f001 fc2a 	bl	1c0e4 <z_add_timeout>
	return ret;
   1a890:	2401      	movs	r4, #1
   1a892:	e7d8      	b.n	1a846 <k_work_schedule_for_queue+0x76>
	int ret = 0;
   1a894:	2400      	movs	r4, #0
   1a896:	e7d6      	b.n	1a846 <k_work_schedule_for_queue+0x76>
   1a898:	00022f8b 	.word	0x00022f8b
   1a89c:	00021650 	.word	0x00021650
   1a8a0:	00022eb5 	.word	0x00022eb5
   1a8a4:	2000206c 	.word	0x2000206c
   1a8a8:	00021710 	.word	0x00021710
   1a8ac:	00021762 	.word	0x00021762
   1a8b0:	00021777 	.word	0x00021777
   1a8b4:	00021736 	.word	0x00021736
   1a8b8:	0002174d 	.word	0x0002174d
   1a8bc:	0001a4bd 	.word	0x0001a4bd

0001a8c0 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1a8c0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1a8c2:	4801      	ldr	r0, [pc, #4]	; (1a8c8 <k_work_schedule+0x8>)
   1a8c4:	f7ff bf84 	b.w	1a7d0 <k_work_schedule_for_queue>
   1a8c8:	20001c40 	.word	0x20001c40

0001a8cc <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1a8cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a8ce:	4616      	mov	r6, r2
   1a8d0:	9001      	str	r0, [sp, #4]
   1a8d2:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1a8d4:	460c      	mov	r4, r1
   1a8d6:	b959      	cbnz	r1, 1a8f0 <k_work_reschedule_for_queue+0x24>
   1a8d8:	492d      	ldr	r1, [pc, #180]	; (1a990 <k_work_reschedule_for_queue+0xc4>)
   1a8da:	482e      	ldr	r0, [pc, #184]	; (1a994 <k_work_reschedule_for_queue+0xc8>)
   1a8dc:	4a2e      	ldr	r2, [pc, #184]	; (1a998 <k_work_reschedule_for_queue+0xcc>)
   1a8de:	f240 33cb 	movw	r3, #971	; 0x3cb
   1a8e2:	f002 ff67 	bl	1d7b4 <printk>
   1a8e6:	482c      	ldr	r0, [pc, #176]	; (1a998 <k_work_reschedule_for_queue+0xcc>)
   1a8e8:	f240 31cb 	movw	r1, #971	; 0x3cb
   1a8ec:	f003 f9bc 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1a8f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a8f4:	f3ef 8511 	mrs	r5, BASEPRI
   1a8f8:	f383 8812 	msr	BASEPRI_MAX, r3
   1a8fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a900:	4826      	ldr	r0, [pc, #152]	; (1a99c <k_work_reschedule_for_queue+0xd0>)
   1a902:	f7fe ffdf 	bl	198c4 <z_spin_lock_valid>
   1a906:	b968      	cbnz	r0, 1a924 <k_work_reschedule_for_queue+0x58>
   1a908:	4a25      	ldr	r2, [pc, #148]	; (1a9a0 <k_work_reschedule_for_queue+0xd4>)
   1a90a:	4926      	ldr	r1, [pc, #152]	; (1a9a4 <k_work_reschedule_for_queue+0xd8>)
   1a90c:	4821      	ldr	r0, [pc, #132]	; (1a994 <k_work_reschedule_for_queue+0xc8>)
   1a90e:	2381      	movs	r3, #129	; 0x81
   1a910:	f002 ff50 	bl	1d7b4 <printk>
   1a914:	4921      	ldr	r1, [pc, #132]	; (1a99c <k_work_reschedule_for_queue+0xd0>)
   1a916:	4824      	ldr	r0, [pc, #144]	; (1a9a8 <k_work_reschedule_for_queue+0xdc>)
   1a918:	f002 ff4c 	bl	1d7b4 <printk>
   1a91c:	4820      	ldr	r0, [pc, #128]	; (1a9a0 <k_work_reschedule_for_queue+0xd4>)
   1a91e:	2181      	movs	r1, #129	; 0x81
   1a920:	f003 f9a2 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a924:	481d      	ldr	r0, [pc, #116]	; (1a99c <k_work_reschedule_for_queue+0xd0>)
   1a926:	f7fe ffeb 	bl	19900 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1a92a:	4620      	mov	r0, r4
   1a92c:	f005 ff70 	bl	20810 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a930:	ea56 0307 	orrs.w	r3, r6, r7
   1a934:	d11d      	bne.n	1a972 <k_work_reschedule_for_queue+0xa6>
		return submit_to_queue_locked(work, queuep);
   1a936:	4620      	mov	r0, r4
   1a938:	a901      	add	r1, sp, #4
   1a93a:	f7ff fd5b 	bl	1a3f4 <submit_to_queue_locked>
   1a93e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a940:	4816      	ldr	r0, [pc, #88]	; (1a99c <k_work_reschedule_for_queue+0xd0>)
   1a942:	f7fe ffcd 	bl	198e0 <z_spin_unlock_valid>
   1a946:	b968      	cbnz	r0, 1a964 <k_work_reschedule_for_queue+0x98>
   1a948:	4a15      	ldr	r2, [pc, #84]	; (1a9a0 <k_work_reschedule_for_queue+0xd4>)
   1a94a:	4918      	ldr	r1, [pc, #96]	; (1a9ac <k_work_reschedule_for_queue+0xe0>)
   1a94c:	4811      	ldr	r0, [pc, #68]	; (1a994 <k_work_reschedule_for_queue+0xc8>)
   1a94e:	23ac      	movs	r3, #172	; 0xac
   1a950:	f002 ff30 	bl	1d7b4 <printk>
   1a954:	4911      	ldr	r1, [pc, #68]	; (1a99c <k_work_reschedule_for_queue+0xd0>)
   1a956:	4816      	ldr	r0, [pc, #88]	; (1a9b0 <k_work_reschedule_for_queue+0xe4>)
   1a958:	f002 ff2c 	bl	1d7b4 <printk>
   1a95c:	4810      	ldr	r0, [pc, #64]	; (1a9a0 <k_work_reschedule_for_queue+0xd4>)
   1a95e:	21ac      	movs	r1, #172	; 0xac
   1a960:	f003 f982 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1a964:	f385 8811 	msr	BASEPRI, r5
   1a968:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1a96c:	4620      	mov	r0, r4
   1a96e:	b003      	add	sp, #12
   1a970:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1a972:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1a974:	490f      	ldr	r1, [pc, #60]	; (1a9b4 <k_work_reschedule_for_queue+0xe8>)
	*flagp |= BIT(bit);
   1a976:	f043 0308 	orr.w	r3, r3, #8
   1a97a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1a97c:	9b01      	ldr	r3, [sp, #4]
   1a97e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1a980:	f104 0010 	add.w	r0, r4, #16
   1a984:	4632      	mov	r2, r6
   1a986:	463b      	mov	r3, r7
   1a988:	f001 fbac 	bl	1c0e4 <z_add_timeout>
	return ret;
   1a98c:	2401      	movs	r4, #1
   1a98e:	e7d7      	b.n	1a940 <k_work_reschedule_for_queue+0x74>
   1a990:	00022f8b 	.word	0x00022f8b
   1a994:	00021650 	.word	0x00021650
   1a998:	00022eb5 	.word	0x00022eb5
   1a99c:	2000206c 	.word	0x2000206c
   1a9a0:	00021710 	.word	0x00021710
   1a9a4:	00021762 	.word	0x00021762
   1a9a8:	00021777 	.word	0x00021777
   1a9ac:	00021736 	.word	0x00021736
   1a9b0:	0002174d 	.word	0x0002174d
   1a9b4:	0001a4bd 	.word	0x0001a4bd

0001a9b8 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1a9b8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1a9ba:	4801      	ldr	r0, [pc, #4]	; (1a9c0 <k_work_reschedule+0x8>)
   1a9bc:	f7ff bf86 	b.w	1a8cc <k_work_reschedule_for_queue>
   1a9c0:	20001c40 	.word	0x20001c40

0001a9c4 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1a9c4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   1a9c6:	4604      	mov	r4, r0
   1a9c8:	b958      	cbnz	r0, 1a9e2 <k_work_cancel_delayable+0x1e>
   1a9ca:	4924      	ldr	r1, [pc, #144]	; (1aa5c <k_work_cancel_delayable+0x98>)
   1a9cc:	4824      	ldr	r0, [pc, #144]	; (1aa60 <k_work_cancel_delayable+0x9c>)
   1a9ce:	4a25      	ldr	r2, [pc, #148]	; (1aa64 <k_work_cancel_delayable+0xa0>)
   1a9d0:	f240 33ed 	movw	r3, #1005	; 0x3ed
   1a9d4:	f002 feee 	bl	1d7b4 <printk>
   1a9d8:	4822      	ldr	r0, [pc, #136]	; (1aa64 <k_work_cancel_delayable+0xa0>)
   1a9da:	f240 31ed 	movw	r1, #1005	; 0x3ed
   1a9de:	f003 f943 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1a9e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a9e6:	f3ef 8511 	mrs	r5, BASEPRI
   1a9ea:	f383 8812 	msr	BASEPRI_MAX, r3
   1a9ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a9f2:	481d      	ldr	r0, [pc, #116]	; (1aa68 <k_work_cancel_delayable+0xa4>)
   1a9f4:	f7fe ff66 	bl	198c4 <z_spin_lock_valid>
   1a9f8:	b968      	cbnz	r0, 1aa16 <k_work_cancel_delayable+0x52>
   1a9fa:	4a1c      	ldr	r2, [pc, #112]	; (1aa6c <k_work_cancel_delayable+0xa8>)
   1a9fc:	491c      	ldr	r1, [pc, #112]	; (1aa70 <k_work_cancel_delayable+0xac>)
   1a9fe:	4818      	ldr	r0, [pc, #96]	; (1aa60 <k_work_cancel_delayable+0x9c>)
   1aa00:	2381      	movs	r3, #129	; 0x81
   1aa02:	f002 fed7 	bl	1d7b4 <printk>
   1aa06:	4918      	ldr	r1, [pc, #96]	; (1aa68 <k_work_cancel_delayable+0xa4>)
   1aa08:	481a      	ldr	r0, [pc, #104]	; (1aa74 <k_work_cancel_delayable+0xb0>)
   1aa0a:	f002 fed3 	bl	1d7b4 <printk>
   1aa0e:	4817      	ldr	r0, [pc, #92]	; (1aa6c <k_work_cancel_delayable+0xa8>)
   1aa10:	2181      	movs	r1, #129	; 0x81
   1aa12:	f003 f929 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1aa16:	4814      	ldr	r0, [pc, #80]	; (1aa68 <k_work_cancel_delayable+0xa4>)
   1aa18:	f7fe ff72 	bl	19900 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   1aa1c:	4620      	mov	r0, r4
   1aa1e:	f005 fef7 	bl	20810 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1aa22:	4620      	mov	r0, r4
   1aa24:	f005 ff02 	bl	2082c <cancel_async_locked>
   1aa28:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aa2a:	480f      	ldr	r0, [pc, #60]	; (1aa68 <k_work_cancel_delayable+0xa4>)
   1aa2c:	f7fe ff58 	bl	198e0 <z_spin_unlock_valid>
   1aa30:	b968      	cbnz	r0, 1aa4e <k_work_cancel_delayable+0x8a>
   1aa32:	4a0e      	ldr	r2, [pc, #56]	; (1aa6c <k_work_cancel_delayable+0xa8>)
   1aa34:	4910      	ldr	r1, [pc, #64]	; (1aa78 <k_work_cancel_delayable+0xb4>)
   1aa36:	480a      	ldr	r0, [pc, #40]	; (1aa60 <k_work_cancel_delayable+0x9c>)
   1aa38:	23ac      	movs	r3, #172	; 0xac
   1aa3a:	f002 febb 	bl	1d7b4 <printk>
   1aa3e:	490a      	ldr	r1, [pc, #40]	; (1aa68 <k_work_cancel_delayable+0xa4>)
   1aa40:	480e      	ldr	r0, [pc, #56]	; (1aa7c <k_work_cancel_delayable+0xb8>)
   1aa42:	f002 feb7 	bl	1d7b4 <printk>
   1aa46:	4809      	ldr	r0, [pc, #36]	; (1aa6c <k_work_cancel_delayable+0xa8>)
   1aa48:	21ac      	movs	r1, #172	; 0xac
   1aa4a:	f003 f90d 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1aa4e:	f385 8811 	msr	BASEPRI, r5
   1aa52:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1aa56:	4620      	mov	r0, r4
   1aa58:	bd38      	pop	{r3, r4, r5, pc}
   1aa5a:	bf00      	nop
   1aa5c:	00022f8b 	.word	0x00022f8b
   1aa60:	00021650 	.word	0x00021650
   1aa64:	00022eb5 	.word	0x00022eb5
   1aa68:	2000206c 	.word	0x2000206c
   1aa6c:	00021710 	.word	0x00021710
   1aa70:	00021762 	.word	0x00021762
   1aa74:	00021777 	.word	0x00021777
   1aa78:	00021736 	.word	0x00021736
   1aa7c:	0002174d 	.word	0x0002174d

0001aa80 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1aa80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa84:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1aa86:	4605      	mov	r5, r0
   1aa88:	b958      	cbnz	r0, 1aaa2 <k_work_cancel_delayable_sync+0x22>
   1aa8a:	493f      	ldr	r1, [pc, #252]	; (1ab88 <k_work_cancel_delayable_sync+0x108>)
   1aa8c:	483f      	ldr	r0, [pc, #252]	; (1ab8c <k_work_cancel_delayable_sync+0x10c>)
   1aa8e:	4a40      	ldr	r2, [pc, #256]	; (1ab90 <k_work_cancel_delayable_sync+0x110>)
   1aa90:	f240 33fe 	movw	r3, #1022	; 0x3fe
   1aa94:	f002 fe8e 	bl	1d7b4 <printk>
   1aa98:	483d      	ldr	r0, [pc, #244]	; (1ab90 <k_work_cancel_delayable_sync+0x110>)
   1aa9a:	f240 31fe 	movw	r1, #1022	; 0x3fe
   1aa9e:	f003 f8e3 	bl	1dc68 <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   1aaa2:	b95e      	cbnz	r6, 1aabc <k_work_cancel_delayable_sync+0x3c>
   1aaa4:	493b      	ldr	r1, [pc, #236]	; (1ab94 <k_work_cancel_delayable_sync+0x114>)
   1aaa6:	4839      	ldr	r0, [pc, #228]	; (1ab8c <k_work_cancel_delayable_sync+0x10c>)
   1aaa8:	4a39      	ldr	r2, [pc, #228]	; (1ab90 <k_work_cancel_delayable_sync+0x110>)
   1aaaa:	f240 33ff 	movw	r3, #1023	; 0x3ff
   1aaae:	f002 fe81 	bl	1d7b4 <printk>
   1aab2:	4837      	ldr	r0, [pc, #220]	; (1ab90 <k_work_cancel_delayable_sync+0x110>)
   1aab4:	f240 31ff 	movw	r1, #1023	; 0x3ff
   1aab8:	f003 f8d6 	bl	1dc68 <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   1aabc:	f005 fe51 	bl	20762 <k_is_in_isr>
   1aac0:	b158      	cbz	r0, 1aada <k_work_cancel_delayable_sync+0x5a>
   1aac2:	4935      	ldr	r1, [pc, #212]	; (1ab98 <k_work_cancel_delayable_sync+0x118>)
   1aac4:	4831      	ldr	r0, [pc, #196]	; (1ab8c <k_work_cancel_delayable_sync+0x10c>)
   1aac6:	4a32      	ldr	r2, [pc, #200]	; (1ab90 <k_work_cancel_delayable_sync+0x110>)
   1aac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1aacc:	f002 fe72 	bl	1d7b4 <printk>
   1aad0:	482f      	ldr	r0, [pc, #188]	; (1ab90 <k_work_cancel_delayable_sync+0x110>)
   1aad2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1aad6:	f003 f8c7 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1aada:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aade:	f3ef 8811 	mrs	r8, BASEPRI
   1aae2:	f383 8812 	msr	BASEPRI_MAX, r3
   1aae6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aaea:	482c      	ldr	r0, [pc, #176]	; (1ab9c <k_work_cancel_delayable_sync+0x11c>)
   1aaec:	f7fe feea 	bl	198c4 <z_spin_lock_valid>
   1aaf0:	b968      	cbnz	r0, 1ab0e <k_work_cancel_delayable_sync+0x8e>
   1aaf2:	4a2b      	ldr	r2, [pc, #172]	; (1aba0 <k_work_cancel_delayable_sync+0x120>)
   1aaf4:	492b      	ldr	r1, [pc, #172]	; (1aba4 <k_work_cancel_delayable_sync+0x124>)
   1aaf6:	4825      	ldr	r0, [pc, #148]	; (1ab8c <k_work_cancel_delayable_sync+0x10c>)
   1aaf8:	2381      	movs	r3, #129	; 0x81
   1aafa:	f002 fe5b 	bl	1d7b4 <printk>
   1aafe:	4927      	ldr	r1, [pc, #156]	; (1ab9c <k_work_cancel_delayable_sync+0x11c>)
   1ab00:	4829      	ldr	r0, [pc, #164]	; (1aba8 <k_work_cancel_delayable_sync+0x128>)
   1ab02:	f002 fe57 	bl	1d7b4 <printk>
   1ab06:	4826      	ldr	r0, [pc, #152]	; (1aba0 <k_work_cancel_delayable_sync+0x120>)
   1ab08:	2181      	movs	r1, #129	; 0x81
   1ab0a:	f003 f8ad 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ab0e:	4823      	ldr	r0, [pc, #140]	; (1ab9c <k_work_cancel_delayable_sync+0x11c>)
   1ab10:	f7fe fef6 	bl	19900 <z_spin_lock_set_owner>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ab14:	f3bf 8f5b 	dmb	ish
   1ab18:	68ec      	ldr	r4, [r5, #12]
   1ab1a:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   1ab1e:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1ab22:	2c00      	cmp	r4, #0
   1ab24:	bf14      	ite	ne
   1ab26:	2701      	movne	r7, #1
   1ab28:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   1ab2a:	d00a      	beq.n	1ab42 <k_work_cancel_delayable_sync+0xc2>
	(void)unschedule_locked(dwork);
   1ab2c:	4628      	mov	r0, r5
   1ab2e:	f005 fe6f 	bl	20810 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1ab32:	4628      	mov	r0, r5
   1ab34:	f005 fe7a 	bl	2082c <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1ab38:	4631      	mov	r1, r6
   1ab3a:	4628      	mov	r0, r5
   1ab3c:	f7ff fc3c 	bl	1a3b8 <cancel_sync_locked>
   1ab40:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ab42:	4816      	ldr	r0, [pc, #88]	; (1ab9c <k_work_cancel_delayable_sync+0x11c>)
   1ab44:	f7fe fecc 	bl	198e0 <z_spin_unlock_valid>
   1ab48:	b968      	cbnz	r0, 1ab66 <k_work_cancel_delayable_sync+0xe6>
   1ab4a:	4a15      	ldr	r2, [pc, #84]	; (1aba0 <k_work_cancel_delayable_sync+0x120>)
   1ab4c:	4917      	ldr	r1, [pc, #92]	; (1abac <k_work_cancel_delayable_sync+0x12c>)
   1ab4e:	480f      	ldr	r0, [pc, #60]	; (1ab8c <k_work_cancel_delayable_sync+0x10c>)
   1ab50:	23ac      	movs	r3, #172	; 0xac
   1ab52:	f002 fe2f 	bl	1d7b4 <printk>
   1ab56:	4911      	ldr	r1, [pc, #68]	; (1ab9c <k_work_cancel_delayable_sync+0x11c>)
   1ab58:	4815      	ldr	r0, [pc, #84]	; (1abb0 <k_work_cancel_delayable_sync+0x130>)
   1ab5a:	f002 fe2b 	bl	1d7b4 <printk>
   1ab5e:	4810      	ldr	r0, [pc, #64]	; (1aba0 <k_work_cancel_delayable_sync+0x120>)
   1ab60:	21ac      	movs	r1, #172	; 0xac
   1ab62:	f003 f881 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1ab66:	f388 8811 	msr	BASEPRI, r8
   1ab6a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1ab6e:	b13c      	cbz	r4, 1ab80 <k_work_cancel_delayable_sync+0x100>
	return z_impl_k_sem_take(sem, timeout);
   1ab70:	f04f 32ff 	mov.w	r2, #4294967295
   1ab74:	f04f 33ff 	mov.w	r3, #4294967295
   1ab78:	f106 0008 	add.w	r0, r6, #8
   1ab7c:	f7ff fa64 	bl	1a048 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1ab80:	4638      	mov	r0, r7
   1ab82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab86:	bf00      	nop
   1ab88:	00022f8b 	.word	0x00022f8b
   1ab8c:	00021650 	.word	0x00021650
   1ab90:	00022eb5 	.word	0x00022eb5
   1ab94:	00022f37 	.word	0x00022f37
   1ab98:	000222b2 	.word	0x000222b2
   1ab9c:	2000206c 	.word	0x2000206c
   1aba0:	00021710 	.word	0x00021710
   1aba4:	00021762 	.word	0x00021762
   1aba8:	00021777 	.word	0x00021777
   1abac:	00021736 	.word	0x00021736
   1abb0:	0002174d 	.word	0x0002174d

0001abb4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1abb4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1abb6:	4c08      	ldr	r4, [pc, #32]	; (1abd8 <z_reset_time_slice+0x24>)
   1abb8:	6823      	ldr	r3, [r4, #0]
   1abba:	b15b      	cbz	r3, 1abd4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1abbc:	f7fd f988 	bl	17ed0 <sys_clock_elapsed>
   1abc0:	4603      	mov	r3, r0
   1abc2:	6820      	ldr	r0, [r4, #0]
   1abc4:	4a05      	ldr	r2, [pc, #20]	; (1abdc <z_reset_time_slice+0x28>)
   1abc6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1abc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1abcc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1abce:	2100      	movs	r1, #0
   1abd0:	f001 bbf2 	b.w	1c3b8 <z_set_timeout_expiry>
}
   1abd4:	bd10      	pop	{r4, pc}
   1abd6:	bf00      	nop
   1abd8:	20002084 	.word	0x20002084
   1abdc:	2000203c 	.word	0x2000203c

0001abe0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1abe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1abe2:	4604      	mov	r4, r0
   1abe4:	460d      	mov	r5, r1
	__asm__ volatile(
   1abe6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1abea:	f3ef 8611 	mrs	r6, BASEPRI
   1abee:	f383 8812 	msr	BASEPRI_MAX, r3
   1abf2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1abf6:	4823      	ldr	r0, [pc, #140]	; (1ac84 <k_sched_time_slice_set+0xa4>)
   1abf8:	f7fe fe64 	bl	198c4 <z_spin_lock_valid>
   1abfc:	b968      	cbnz	r0, 1ac1a <k_sched_time_slice_set+0x3a>
   1abfe:	4a22      	ldr	r2, [pc, #136]	; (1ac88 <k_sched_time_slice_set+0xa8>)
   1ac00:	4922      	ldr	r1, [pc, #136]	; (1ac8c <k_sched_time_slice_set+0xac>)
   1ac02:	4823      	ldr	r0, [pc, #140]	; (1ac90 <k_sched_time_slice_set+0xb0>)
   1ac04:	2381      	movs	r3, #129	; 0x81
   1ac06:	f002 fdd5 	bl	1d7b4 <printk>
   1ac0a:	491e      	ldr	r1, [pc, #120]	; (1ac84 <k_sched_time_slice_set+0xa4>)
   1ac0c:	4821      	ldr	r0, [pc, #132]	; (1ac94 <k_sched_time_slice_set+0xb4>)
   1ac0e:	f002 fdd1 	bl	1d7b4 <printk>
   1ac12:	481d      	ldr	r0, [pc, #116]	; (1ac88 <k_sched_time_slice_set+0xa8>)
   1ac14:	2181      	movs	r1, #129	; 0x81
   1ac16:	f003 f827 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ac1a:	481a      	ldr	r0, [pc, #104]	; (1ac84 <k_sched_time_slice_set+0xa4>)
   1ac1c:	f7fe fe70 	bl	19900 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1ac20:	4b1d      	ldr	r3, [pc, #116]	; (1ac98 <k_sched_time_slice_set+0xb8>)
   1ac22:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1ac24:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1ac28:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ac2c:	2100      	movs	r1, #0
   1ac2e:	611a      	str	r2, [r3, #16]
   1ac30:	fbe7 0104 	umlal	r0, r1, r7, r4
   1ac34:	2300      	movs	r3, #0
   1ac36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ac3a:	f7e5 faa1 	bl	180 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1ac3e:	2c00      	cmp	r4, #0
   1ac40:	4b16      	ldr	r3, [pc, #88]	; (1ac9c <k_sched_time_slice_set+0xbc>)
   1ac42:	dc1b      	bgt.n	1ac7c <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1ac44:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1ac46:	4b16      	ldr	r3, [pc, #88]	; (1aca0 <k_sched_time_slice_set+0xc0>)
   1ac48:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1ac4a:	f7ff ffb3 	bl	1abb4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ac4e:	480d      	ldr	r0, [pc, #52]	; (1ac84 <k_sched_time_slice_set+0xa4>)
   1ac50:	f7fe fe46 	bl	198e0 <z_spin_unlock_valid>
   1ac54:	b968      	cbnz	r0, 1ac72 <k_sched_time_slice_set+0x92>
   1ac56:	4a0c      	ldr	r2, [pc, #48]	; (1ac88 <k_sched_time_slice_set+0xa8>)
   1ac58:	4912      	ldr	r1, [pc, #72]	; (1aca4 <k_sched_time_slice_set+0xc4>)
   1ac5a:	480d      	ldr	r0, [pc, #52]	; (1ac90 <k_sched_time_slice_set+0xb0>)
   1ac5c:	23ac      	movs	r3, #172	; 0xac
   1ac5e:	f002 fda9 	bl	1d7b4 <printk>
   1ac62:	4908      	ldr	r1, [pc, #32]	; (1ac84 <k_sched_time_slice_set+0xa4>)
   1ac64:	4810      	ldr	r0, [pc, #64]	; (1aca8 <k_sched_time_slice_set+0xc8>)
   1ac66:	f002 fda5 	bl	1d7b4 <printk>
   1ac6a:	4807      	ldr	r0, [pc, #28]	; (1ac88 <k_sched_time_slice_set+0xa8>)
   1ac6c:	21ac      	movs	r1, #172	; 0xac
   1ac6e:	f002 fffb 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1ac72:	f386 8811 	msr	BASEPRI, r6
   1ac76:	f3bf 8f6f 	isb	sy
	}
}
   1ac7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1ac7c:	2802      	cmp	r0, #2
   1ac7e:	bfb8      	it	lt
   1ac80:	2002      	movlt	r0, #2
   1ac82:	e7df      	b.n	1ac44 <k_sched_time_slice_set+0x64>
   1ac84:	2000207c 	.word	0x2000207c
   1ac88:	00021710 	.word	0x00021710
   1ac8c:	00021762 	.word	0x00021762
   1ac90:	00021650 	.word	0x00021650
   1ac94:	00021777 	.word	0x00021777
   1ac98:	2000203c 	.word	0x2000203c
   1ac9c:	20002084 	.word	0x20002084
   1aca0:	20002080 	.word	0x20002080
   1aca4:	00021736 	.word	0x00021736
   1aca8:	0002174d 	.word	0x0002174d

0001acac <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   1acac:	b538      	push	{r3, r4, r5, lr}
   1acae:	4604      	mov	r4, r0
	__asm__ volatile(
   1acb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1acb4:	f3ef 8511 	mrs	r5, BASEPRI
   1acb8:	f383 8812 	msr	BASEPRI_MAX, r3
   1acbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1acc0:	4817      	ldr	r0, [pc, #92]	; (1ad20 <z_unpend_thread_no_timeout+0x74>)
   1acc2:	f7fe fdff 	bl	198c4 <z_spin_lock_valid>
   1acc6:	b968      	cbnz	r0, 1ace4 <z_unpend_thread_no_timeout+0x38>
   1acc8:	4a16      	ldr	r2, [pc, #88]	; (1ad24 <z_unpend_thread_no_timeout+0x78>)
   1acca:	4917      	ldr	r1, [pc, #92]	; (1ad28 <z_unpend_thread_no_timeout+0x7c>)
   1accc:	4817      	ldr	r0, [pc, #92]	; (1ad2c <z_unpend_thread_no_timeout+0x80>)
   1acce:	2381      	movs	r3, #129	; 0x81
   1acd0:	f002 fd70 	bl	1d7b4 <printk>
   1acd4:	4912      	ldr	r1, [pc, #72]	; (1ad20 <z_unpend_thread_no_timeout+0x74>)
   1acd6:	4816      	ldr	r0, [pc, #88]	; (1ad30 <z_unpend_thread_no_timeout+0x84>)
   1acd8:	f002 fd6c 	bl	1d7b4 <printk>
   1acdc:	4811      	ldr	r0, [pc, #68]	; (1ad24 <z_unpend_thread_no_timeout+0x78>)
   1acde:	2181      	movs	r1, #129	; 0x81
   1ace0:	f002 ffc2 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ace4:	480e      	ldr	r0, [pc, #56]	; (1ad20 <z_unpend_thread_no_timeout+0x74>)
   1ace6:	f7fe fe0b 	bl	19900 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   1acea:	4620      	mov	r0, r4
   1acec:	f000 f900 	bl	1aef0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1acf0:	480b      	ldr	r0, [pc, #44]	; (1ad20 <z_unpend_thread_no_timeout+0x74>)
   1acf2:	f7fe fdf5 	bl	198e0 <z_spin_unlock_valid>
   1acf6:	b968      	cbnz	r0, 1ad14 <z_unpend_thread_no_timeout+0x68>
   1acf8:	4a0a      	ldr	r2, [pc, #40]	; (1ad24 <z_unpend_thread_no_timeout+0x78>)
   1acfa:	490e      	ldr	r1, [pc, #56]	; (1ad34 <z_unpend_thread_no_timeout+0x88>)
   1acfc:	480b      	ldr	r0, [pc, #44]	; (1ad2c <z_unpend_thread_no_timeout+0x80>)
   1acfe:	23ac      	movs	r3, #172	; 0xac
   1ad00:	f002 fd58 	bl	1d7b4 <printk>
   1ad04:	4906      	ldr	r1, [pc, #24]	; (1ad20 <z_unpend_thread_no_timeout+0x74>)
   1ad06:	480c      	ldr	r0, [pc, #48]	; (1ad38 <z_unpend_thread_no_timeout+0x8c>)
   1ad08:	f002 fd54 	bl	1d7b4 <printk>
   1ad0c:	4805      	ldr	r0, [pc, #20]	; (1ad24 <z_unpend_thread_no_timeout+0x78>)
   1ad0e:	21ac      	movs	r1, #172	; 0xac
   1ad10:	f002 ffaa 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1ad14:	f385 8811 	msr	BASEPRI, r5
   1ad18:	f3bf 8f6f 	isb	sy
	}
}
   1ad1c:	bd38      	pop	{r3, r4, r5, pc}
   1ad1e:	bf00      	nop
   1ad20:	2000207c 	.word	0x2000207c
   1ad24:	00021710 	.word	0x00021710
   1ad28:	00021762 	.word	0x00021762
   1ad2c:	00021650 	.word	0x00021650
   1ad30:	00021777 	.word	0x00021777
   1ad34:	00021736 	.word	0x00021736
   1ad38:	0002174d 	.word	0x0002174d

0001ad3c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1ad3c:	b538      	push	{r3, r4, r5, lr}
   1ad3e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1ad40:	460d      	mov	r5, r1
   1ad42:	b9e9      	cbnz	r1, 1ad80 <z_reschedule+0x44>
   1ad44:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
   1ad48:	b9d3      	cbnz	r3, 1ad80 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   1ad4a:	4b19      	ldr	r3, [pc, #100]	; (1adb0 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   1ad4c:	69da      	ldr	r2, [r3, #28]
   1ad4e:	689b      	ldr	r3, [r3, #8]
   1ad50:	429a      	cmp	r2, r3
   1ad52:	d015      	beq.n	1ad80 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ad54:	f7fe fdc4 	bl	198e0 <z_spin_unlock_valid>
   1ad58:	b968      	cbnz	r0, 1ad76 <z_reschedule+0x3a>
   1ad5a:	4a16      	ldr	r2, [pc, #88]	; (1adb4 <z_reschedule+0x78>)
   1ad5c:	4916      	ldr	r1, [pc, #88]	; (1adb8 <z_reschedule+0x7c>)
   1ad5e:	4817      	ldr	r0, [pc, #92]	; (1adbc <z_reschedule+0x80>)
   1ad60:	23c3      	movs	r3, #195	; 0xc3
   1ad62:	f002 fd27 	bl	1d7b4 <printk>
   1ad66:	4816      	ldr	r0, [pc, #88]	; (1adc0 <z_reschedule+0x84>)
   1ad68:	4621      	mov	r1, r4
   1ad6a:	f002 fd23 	bl	1d7b4 <printk>
   1ad6e:	4811      	ldr	r0, [pc, #68]	; (1adb4 <z_reschedule+0x78>)
   1ad70:	21c3      	movs	r1, #195	; 0xc3
   1ad72:	f002 ff79 	bl	1dc68 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1ad76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   1ad7a:	2000      	movs	r0, #0
   1ad7c:	f7f6 bcc8 	b.w	11710 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ad80:	4620      	mov	r0, r4
   1ad82:	f7fe fdad 	bl	198e0 <z_spin_unlock_valid>
   1ad86:	b968      	cbnz	r0, 1ada4 <z_reschedule+0x68>
   1ad88:	4a0a      	ldr	r2, [pc, #40]	; (1adb4 <z_reschedule+0x78>)
   1ad8a:	490b      	ldr	r1, [pc, #44]	; (1adb8 <z_reschedule+0x7c>)
   1ad8c:	480b      	ldr	r0, [pc, #44]	; (1adbc <z_reschedule+0x80>)
   1ad8e:	23ac      	movs	r3, #172	; 0xac
   1ad90:	f002 fd10 	bl	1d7b4 <printk>
   1ad94:	480a      	ldr	r0, [pc, #40]	; (1adc0 <z_reschedule+0x84>)
   1ad96:	4621      	mov	r1, r4
   1ad98:	f002 fd0c 	bl	1d7b4 <printk>
   1ad9c:	4805      	ldr	r0, [pc, #20]	; (1adb4 <z_reschedule+0x78>)
   1ad9e:	21ac      	movs	r1, #172	; 0xac
   1ada0:	f002 ff62 	bl	1dc68 <assert_post_action>
   1ada4:	f385 8811 	msr	BASEPRI, r5
   1ada8:	f3bf 8f6f 	isb	sy
   1adac:	bd38      	pop	{r3, r4, r5, pc}
   1adae:	bf00      	nop
   1adb0:	2000203c 	.word	0x2000203c
   1adb4:	00021710 	.word	0x00021710
   1adb8:	00021736 	.word	0x00021736
   1adbc:	00021650 	.word	0x00021650
   1adc0:	0002174d 	.word	0x0002174d

0001adc4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   1adc4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1adc6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1adca:	f3ef 8511 	mrs	r5, BASEPRI
   1adce:	f383 8812 	msr	BASEPRI_MAX, r3
   1add2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1add6:	4829      	ldr	r0, [pc, #164]	; (1ae7c <k_sched_lock+0xb8>)
   1add8:	f7fe fd74 	bl	198c4 <z_spin_lock_valid>
   1addc:	b968      	cbnz	r0, 1adfa <k_sched_lock+0x36>
   1adde:	4a28      	ldr	r2, [pc, #160]	; (1ae80 <k_sched_lock+0xbc>)
   1ade0:	4928      	ldr	r1, [pc, #160]	; (1ae84 <k_sched_lock+0xc0>)
   1ade2:	4829      	ldr	r0, [pc, #164]	; (1ae88 <k_sched_lock+0xc4>)
   1ade4:	2381      	movs	r3, #129	; 0x81
   1ade6:	f002 fce5 	bl	1d7b4 <printk>
   1adea:	4924      	ldr	r1, [pc, #144]	; (1ae7c <k_sched_lock+0xb8>)
   1adec:	4827      	ldr	r0, [pc, #156]	; (1ae8c <k_sched_lock+0xc8>)
   1adee:	f002 fce1 	bl	1d7b4 <printk>
   1adf2:	4823      	ldr	r0, [pc, #140]	; (1ae80 <k_sched_lock+0xbc>)
   1adf4:	2181      	movs	r1, #129	; 0x81
   1adf6:	f002 ff37 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1adfa:	4820      	ldr	r0, [pc, #128]	; (1ae7c <k_sched_lock+0xb8>)
   1adfc:	f7fe fd80 	bl	19900 <z_spin_lock_set_owner>
   1ae00:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1ae04:	b163      	cbz	r3, 1ae20 <k_sched_lock+0x5c>
   1ae06:	4922      	ldr	r1, [pc, #136]	; (1ae90 <k_sched_lock+0xcc>)
   1ae08:	4a22      	ldr	r2, [pc, #136]	; (1ae94 <k_sched_lock+0xd0>)
   1ae0a:	481f      	ldr	r0, [pc, #124]	; (1ae88 <k_sched_lock+0xc4>)
   1ae0c:	23fd      	movs	r3, #253	; 0xfd
   1ae0e:	f002 fcd1 	bl	1d7b4 <printk>
   1ae12:	4821      	ldr	r0, [pc, #132]	; (1ae98 <k_sched_lock+0xd4>)
   1ae14:	f002 fcce 	bl	1d7b4 <printk>
   1ae18:	481e      	ldr	r0, [pc, #120]	; (1ae94 <k_sched_lock+0xd0>)
   1ae1a:	21fd      	movs	r1, #253	; 0xfd
   1ae1c:	f002 ff24 	bl	1dc68 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   1ae20:	4c1e      	ldr	r4, [pc, #120]	; (1ae9c <k_sched_lock+0xd8>)
   1ae22:	68a2      	ldr	r2, [r4, #8]
   1ae24:	7bd2      	ldrb	r2, [r2, #15]
   1ae26:	2a01      	cmp	r2, #1
   1ae28:	d10c      	bne.n	1ae44 <k_sched_lock+0x80>
   1ae2a:	491d      	ldr	r1, [pc, #116]	; (1aea0 <k_sched_lock+0xdc>)
   1ae2c:	4a19      	ldr	r2, [pc, #100]	; (1ae94 <k_sched_lock+0xd0>)
   1ae2e:	4816      	ldr	r0, [pc, #88]	; (1ae88 <k_sched_lock+0xc4>)
   1ae30:	23fe      	movs	r3, #254	; 0xfe
   1ae32:	f002 fcbf 	bl	1d7b4 <printk>
   1ae36:	4818      	ldr	r0, [pc, #96]	; (1ae98 <k_sched_lock+0xd4>)
   1ae38:	f002 fcbc 	bl	1d7b4 <printk>
   1ae3c:	4815      	ldr	r0, [pc, #84]	; (1ae94 <k_sched_lock+0xd0>)
   1ae3e:	21fe      	movs	r1, #254	; 0xfe
   1ae40:	f002 ff12 	bl	1dc68 <assert_post_action>
	--_current->base.sched_locked;
   1ae44:	68a2      	ldr	r2, [r4, #8]
   1ae46:	7bd3      	ldrb	r3, [r2, #15]
   1ae48:	3b01      	subs	r3, #1
   1ae4a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ae4c:	480b      	ldr	r0, [pc, #44]	; (1ae7c <k_sched_lock+0xb8>)
   1ae4e:	f7fe fd47 	bl	198e0 <z_spin_unlock_valid>
   1ae52:	b968      	cbnz	r0, 1ae70 <k_sched_lock+0xac>
   1ae54:	4a0a      	ldr	r2, [pc, #40]	; (1ae80 <k_sched_lock+0xbc>)
   1ae56:	4913      	ldr	r1, [pc, #76]	; (1aea4 <k_sched_lock+0xe0>)
   1ae58:	480b      	ldr	r0, [pc, #44]	; (1ae88 <k_sched_lock+0xc4>)
   1ae5a:	23ac      	movs	r3, #172	; 0xac
   1ae5c:	f002 fcaa 	bl	1d7b4 <printk>
   1ae60:	4906      	ldr	r1, [pc, #24]	; (1ae7c <k_sched_lock+0xb8>)
   1ae62:	4811      	ldr	r0, [pc, #68]	; (1aea8 <k_sched_lock+0xe4>)
   1ae64:	f002 fca6 	bl	1d7b4 <printk>
   1ae68:	4805      	ldr	r0, [pc, #20]	; (1ae80 <k_sched_lock+0xbc>)
   1ae6a:	21ac      	movs	r1, #172	; 0xac
   1ae6c:	f002 fefc 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1ae70:	f385 8811 	msr	BASEPRI, r5
   1ae74:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1ae78:	bd38      	pop	{r3, r4, r5, pc}
   1ae7a:	bf00      	nop
   1ae7c:	2000207c 	.word	0x2000207c
   1ae80:	00021710 	.word	0x00021710
   1ae84:	00021762 	.word	0x00021762
   1ae88:	00021650 	.word	0x00021650
   1ae8c:	00021777 	.word	0x00021777
   1ae90:	00022cd8 	.word	0x00022cd8
   1ae94:	00022de3 	.word	0x00022de3
   1ae98:	000224f9 	.word	0x000224f9
   1ae9c:	2000203c 	.word	0x2000203c
   1aea0:	00022e0e 	.word	0x00022e0e
   1aea4:	00021736 	.word	0x00021736
   1aea8:	0002174d 	.word	0x0002174d

0001aeac <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1aeac:	4b0c      	ldr	r3, [pc, #48]	; (1aee0 <z_priq_dumb_remove+0x34>)
   1aeae:	4299      	cmp	r1, r3
{
   1aeb0:	b510      	push	{r4, lr}
   1aeb2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1aeb4:	d10b      	bne.n	1aece <z_priq_dumb_remove+0x22>
   1aeb6:	490b      	ldr	r1, [pc, #44]	; (1aee4 <z_priq_dumb_remove+0x38>)
   1aeb8:	480b      	ldr	r0, [pc, #44]	; (1aee8 <z_priq_dumb_remove+0x3c>)
   1aeba:	4a0c      	ldr	r2, [pc, #48]	; (1aeec <z_priq_dumb_remove+0x40>)
   1aebc:	f240 33b5 	movw	r3, #949	; 0x3b5
   1aec0:	f002 fc78 	bl	1d7b4 <printk>
   1aec4:	4809      	ldr	r0, [pc, #36]	; (1aeec <z_priq_dumb_remove+0x40>)
   1aec6:	f240 31b5 	movw	r1, #949	; 0x3b5
   1aeca:	f002 fecd 	bl	1dc68 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   1aece:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   1aed2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1aed4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1aed6:	2300      	movs	r3, #0
	node->prev = NULL;
   1aed8:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1aedc:	bd10      	pop	{r4, pc}
   1aede:	bf00      	nop
   1aee0:	20001b40 	.word	0x20001b40
   1aee4:	00022fc2 	.word	0x00022fc2
   1aee8:	00021650 	.word	0x00021650
   1aeec:	00022fa0 	.word	0x00022fa0

0001aef0 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   1aef0:	6883      	ldr	r3, [r0, #8]
{
   1aef2:	b510      	push	{r4, lr}
   1aef4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   1aef6:	b95b      	cbnz	r3, 1af10 <unpend_thread_no_timeout+0x20>
   1aef8:	490b      	ldr	r1, [pc, #44]	; (1af28 <unpend_thread_no_timeout+0x38>)
   1aefa:	480c      	ldr	r0, [pc, #48]	; (1af2c <unpend_thread_no_timeout+0x3c>)
   1aefc:	4a0c      	ldr	r2, [pc, #48]	; (1af30 <unpend_thread_no_timeout+0x40>)
   1aefe:	f240 2353 	movw	r3, #595	; 0x253
   1af02:	f002 fc57 	bl	1d7b4 <printk>
   1af06:	480a      	ldr	r0, [pc, #40]	; (1af30 <unpend_thread_no_timeout+0x40>)
   1af08:	f240 2153 	movw	r1, #595	; 0x253
   1af0c:	f002 feac 	bl	1dc68 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1af10:	68a0      	ldr	r0, [r4, #8]
   1af12:	4621      	mov	r1, r4
   1af14:	f7ff ffca 	bl	1aeac <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1af18:	7b63      	ldrb	r3, [r4, #13]
   1af1a:	f023 0302 	bic.w	r3, r3, #2
   1af1e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1af20:	2300      	movs	r3, #0
   1af22:	60a3      	str	r3, [r4, #8]
}
   1af24:	bd10      	pop	{r4, pc}
   1af26:	bf00      	nop
   1af28:	00022fe3 	.word	0x00022fe3
   1af2c:	00021650 	.word	0x00021650
   1af30:	00022fa0 	.word	0x00022fa0

0001af34 <z_unpend_thread>:
{
   1af34:	b538      	push	{r3, r4, r5, lr}
   1af36:	4604      	mov	r4, r0
	__asm__ volatile(
   1af38:	f04f 0340 	mov.w	r3, #64	; 0x40
   1af3c:	f3ef 8511 	mrs	r5, BASEPRI
   1af40:	f383 8812 	msr	BASEPRI_MAX, r3
   1af44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1af48:	4819      	ldr	r0, [pc, #100]	; (1afb0 <z_unpend_thread+0x7c>)
   1af4a:	f7fe fcbb 	bl	198c4 <z_spin_lock_valid>
   1af4e:	b968      	cbnz	r0, 1af6c <z_unpend_thread+0x38>
   1af50:	4a18      	ldr	r2, [pc, #96]	; (1afb4 <z_unpend_thread+0x80>)
   1af52:	4919      	ldr	r1, [pc, #100]	; (1afb8 <z_unpend_thread+0x84>)
   1af54:	4819      	ldr	r0, [pc, #100]	; (1afbc <z_unpend_thread+0x88>)
   1af56:	2381      	movs	r3, #129	; 0x81
   1af58:	f002 fc2c 	bl	1d7b4 <printk>
   1af5c:	4914      	ldr	r1, [pc, #80]	; (1afb0 <z_unpend_thread+0x7c>)
   1af5e:	4818      	ldr	r0, [pc, #96]	; (1afc0 <z_unpend_thread+0x8c>)
   1af60:	f002 fc28 	bl	1d7b4 <printk>
   1af64:	4813      	ldr	r0, [pc, #76]	; (1afb4 <z_unpend_thread+0x80>)
   1af66:	2181      	movs	r1, #129	; 0x81
   1af68:	f002 fe7e 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1af6c:	4810      	ldr	r0, [pc, #64]	; (1afb0 <z_unpend_thread+0x7c>)
   1af6e:	f7fe fcc7 	bl	19900 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1af72:	4620      	mov	r0, r4
   1af74:	f7ff ffbc 	bl	1aef0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1af78:	480d      	ldr	r0, [pc, #52]	; (1afb0 <z_unpend_thread+0x7c>)
   1af7a:	f7fe fcb1 	bl	198e0 <z_spin_unlock_valid>
   1af7e:	b968      	cbnz	r0, 1af9c <z_unpend_thread+0x68>
   1af80:	4a0c      	ldr	r2, [pc, #48]	; (1afb4 <z_unpend_thread+0x80>)
   1af82:	4910      	ldr	r1, [pc, #64]	; (1afc4 <z_unpend_thread+0x90>)
   1af84:	480d      	ldr	r0, [pc, #52]	; (1afbc <z_unpend_thread+0x88>)
   1af86:	23ac      	movs	r3, #172	; 0xac
   1af88:	f002 fc14 	bl	1d7b4 <printk>
   1af8c:	4908      	ldr	r1, [pc, #32]	; (1afb0 <z_unpend_thread+0x7c>)
   1af8e:	480e      	ldr	r0, [pc, #56]	; (1afc8 <z_unpend_thread+0x94>)
   1af90:	f002 fc10 	bl	1d7b4 <printk>
   1af94:	4807      	ldr	r0, [pc, #28]	; (1afb4 <z_unpend_thread+0x80>)
   1af96:	21ac      	movs	r1, #172	; 0xac
   1af98:	f002 fe66 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1af9c:	f385 8811 	msr	BASEPRI, r5
   1afa0:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1afa4:	f104 0018 	add.w	r0, r4, #24
}
   1afa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1afac:	f001 b96e 	b.w	1c28c <z_abort_timeout>
   1afb0:	2000207c 	.word	0x2000207c
   1afb4:	00021710 	.word	0x00021710
   1afb8:	00021762 	.word	0x00021762
   1afbc:	00021650 	.word	0x00021650
   1afc0:	00021777 	.word	0x00021777
   1afc4:	00021736 	.word	0x00021736
   1afc8:	0002174d 	.word	0x0002174d

0001afcc <update_cache>:
{
   1afcc:	b538      	push	{r3, r4, r5, lr}
   1afce:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1afd0:	4814      	ldr	r0, [pc, #80]	; (1b024 <update_cache+0x58>)
   1afd2:	4d15      	ldr	r5, [pc, #84]	; (1b028 <update_cache+0x5c>)
   1afd4:	f005 fc7c 	bl	208d0 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1afd8:	4604      	mov	r4, r0
   1afda:	b900      	cbnz	r0, 1afde <update_cache+0x12>
   1afdc:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   1afde:	b9ca      	cbnz	r2, 1b014 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   1afe0:	68ab      	ldr	r3, [r5, #8]
   1afe2:	b963      	cbnz	r3, 1affe <update_cache+0x32>
   1afe4:	4911      	ldr	r1, [pc, #68]	; (1b02c <update_cache+0x60>)
   1afe6:	4a12      	ldr	r2, [pc, #72]	; (1b030 <update_cache+0x64>)
   1afe8:	4812      	ldr	r0, [pc, #72]	; (1b034 <update_cache+0x68>)
   1afea:	2381      	movs	r3, #129	; 0x81
   1afec:	f002 fbe2 	bl	1d7b4 <printk>
   1aff0:	4811      	ldr	r0, [pc, #68]	; (1b038 <update_cache+0x6c>)
   1aff2:	f002 fbdf 	bl	1d7b4 <printk>
   1aff6:	480e      	ldr	r0, [pc, #56]	; (1b030 <update_cache+0x64>)
   1aff8:	2181      	movs	r1, #129	; 0x81
   1affa:	f002 fe35 	bl	1dc68 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1affe:	68ab      	ldr	r3, [r5, #8]
   1b000:	7b5a      	ldrb	r2, [r3, #13]
   1b002:	06d2      	lsls	r2, r2, #27
   1b004:	d106      	bne.n	1b014 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b006:	69a2      	ldr	r2, [r4, #24]
   1b008:	b922      	cbnz	r2, 1b014 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
   1b00a:	89da      	ldrh	r2, [r3, #14]
   1b00c:	2a7f      	cmp	r2, #127	; 0x7f
   1b00e:	d901      	bls.n	1b014 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
   1b010:	61eb      	str	r3, [r5, #28]
}
   1b012:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1b014:	68ab      	ldr	r3, [r5, #8]
   1b016:	42a3      	cmp	r3, r4
   1b018:	d001      	beq.n	1b01e <update_cache+0x52>
			z_reset_time_slice();
   1b01a:	f7ff fdcb 	bl	1abb4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1b01e:	61ec      	str	r4, [r5, #28]
}
   1b020:	e7f7      	b.n	1b012 <update_cache+0x46>
   1b022:	bf00      	nop
   1b024:	2000205c 	.word	0x2000205c
   1b028:	2000203c 	.word	0x2000203c
   1b02c:	00022ffa 	.word	0x00022ffa
   1b030:	00022fa0 	.word	0x00022fa0
   1b034:	00021650 	.word	0x00021650
   1b038:	000224f9 	.word	0x000224f9

0001b03c <move_thread_to_end_of_prio_q>:
{
   1b03c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1b03e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1b042:	7b43      	ldrb	r3, [r0, #13]
   1b044:	2a00      	cmp	r2, #0
{
   1b046:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1b048:	da06      	bge.n	1b058 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b04a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b04e:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   1b050:	4601      	mov	r1, r0
   1b052:	481f      	ldr	r0, [pc, #124]	; (1b0d0 <move_thread_to_end_of_prio_q+0x94>)
   1b054:	f7ff ff2a 	bl	1aeac <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b058:	7b63      	ldrb	r3, [r4, #13]
   1b05a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b05e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b060:	4b1c      	ldr	r3, [pc, #112]	; (1b0d4 <move_thread_to_end_of_prio_q+0x98>)
   1b062:	429c      	cmp	r4, r3
   1b064:	d109      	bne.n	1b07a <move_thread_to_end_of_prio_q+0x3e>
   1b066:	491c      	ldr	r1, [pc, #112]	; (1b0d8 <move_thread_to_end_of_prio_q+0x9c>)
   1b068:	481c      	ldr	r0, [pc, #112]	; (1b0dc <move_thread_to_end_of_prio_q+0xa0>)
   1b06a:	4a1d      	ldr	r2, [pc, #116]	; (1b0e0 <move_thread_to_end_of_prio_q+0xa4>)
   1b06c:	23b1      	movs	r3, #177	; 0xb1
   1b06e:	f002 fba1 	bl	1d7b4 <printk>
   1b072:	481b      	ldr	r0, [pc, #108]	; (1b0e0 <move_thread_to_end_of_prio_q+0xa4>)
   1b074:	21b1      	movs	r1, #177	; 0xb1
   1b076:	f002 fdf7 	bl	1dc68 <assert_post_action>
	return list->head == list;
   1b07a:	4a1a      	ldr	r2, [pc, #104]	; (1b0e4 <move_thread_to_end_of_prio_q+0xa8>)
   1b07c:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b07e:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
   1b080:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b084:	428b      	cmp	r3, r1
   1b086:	bf08      	it	eq
   1b088:	2300      	moveq	r3, #0
   1b08a:	2b00      	cmp	r3, #0
   1b08c:	bf38      	it	cc
   1b08e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b090:	b1cb      	cbz	r3, 1b0c6 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
   1b092:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1b096:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1b09a:	4286      	cmp	r6, r0
   1b09c:	d00f      	beq.n	1b0be <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
   1b09e:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b0a0:	2800      	cmp	r0, #0
   1b0a2:	dd0c      	ble.n	1b0be <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   1b0a4:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1b0a6:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1b0aa:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1b0ac:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   1b0ae:	6890      	ldr	r0, [r2, #8]
   1b0b0:	1b03      	subs	r3, r0, r4
   1b0b2:	4258      	negs	r0, r3
}
   1b0b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1b0b8:	4158      	adcs	r0, r3
   1b0ba:	f7ff bf87 	b.w	1afcc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1b0be:	42ab      	cmp	r3, r5
   1b0c0:	d001      	beq.n	1b0c6 <move_thread_to_end_of_prio_q+0x8a>
   1b0c2:	681b      	ldr	r3, [r3, #0]
   1b0c4:	e7e4      	b.n	1b090 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
   1b0c6:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   1b0ca:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1b0cc:	6254      	str	r4, [r2, #36]	; 0x24
}
   1b0ce:	e7ee      	b.n	1b0ae <move_thread_to_end_of_prio_q+0x72>
   1b0d0:	2000205c 	.word	0x2000205c
   1b0d4:	20001b40 	.word	0x20001b40
   1b0d8:	00022fc2 	.word	0x00022fc2
   1b0dc:	00021650 	.word	0x00021650
   1b0e0:	00022fa0 	.word	0x00022fa0
   1b0e4:	2000203c 	.word	0x2000203c

0001b0e8 <z_time_slice>:
{
   1b0e8:	b570      	push	{r4, r5, r6, lr}
   1b0ea:	4604      	mov	r4, r0
	__asm__ volatile(
   1b0ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b0f0:	f3ef 8511 	mrs	r5, BASEPRI
   1b0f4:	f383 8812 	msr	BASEPRI_MAX, r3
   1b0f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b0fc:	482a      	ldr	r0, [pc, #168]	; (1b1a8 <z_time_slice+0xc0>)
   1b0fe:	f7fe fbe1 	bl	198c4 <z_spin_lock_valid>
   1b102:	b968      	cbnz	r0, 1b120 <z_time_slice+0x38>
   1b104:	4a29      	ldr	r2, [pc, #164]	; (1b1ac <z_time_slice+0xc4>)
   1b106:	492a      	ldr	r1, [pc, #168]	; (1b1b0 <z_time_slice+0xc8>)
   1b108:	482a      	ldr	r0, [pc, #168]	; (1b1b4 <z_time_slice+0xcc>)
   1b10a:	2381      	movs	r3, #129	; 0x81
   1b10c:	f002 fb52 	bl	1d7b4 <printk>
   1b110:	4925      	ldr	r1, [pc, #148]	; (1b1a8 <z_time_slice+0xc0>)
   1b112:	4829      	ldr	r0, [pc, #164]	; (1b1b8 <z_time_slice+0xd0>)
   1b114:	f002 fb4e 	bl	1d7b4 <printk>
   1b118:	4824      	ldr	r0, [pc, #144]	; (1b1ac <z_time_slice+0xc4>)
   1b11a:	2181      	movs	r1, #129	; 0x81
   1b11c:	f002 fda4 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b120:	4821      	ldr	r0, [pc, #132]	; (1b1a8 <z_time_slice+0xc0>)
   1b122:	f7fe fbed 	bl	19900 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   1b126:	4b25      	ldr	r3, [pc, #148]	; (1b1bc <z_time_slice+0xd4>)
   1b128:	4a25      	ldr	r2, [pc, #148]	; (1b1c0 <z_time_slice+0xd8>)
   1b12a:	6898      	ldr	r0, [r3, #8]
   1b12c:	6811      	ldr	r1, [r2, #0]
   1b12e:	4288      	cmp	r0, r1
   1b130:	4619      	mov	r1, r3
   1b132:	d118      	bne.n	1b166 <z_time_slice+0x7e>
			z_reset_time_slice();
   1b134:	f7ff fd3e 	bl	1abb4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b138:	481b      	ldr	r0, [pc, #108]	; (1b1a8 <z_time_slice+0xc0>)
   1b13a:	f7fe fbd1 	bl	198e0 <z_spin_unlock_valid>
   1b13e:	b968      	cbnz	r0, 1b15c <z_time_slice+0x74>
   1b140:	4a1a      	ldr	r2, [pc, #104]	; (1b1ac <z_time_slice+0xc4>)
   1b142:	4920      	ldr	r1, [pc, #128]	; (1b1c4 <z_time_slice+0xdc>)
   1b144:	481b      	ldr	r0, [pc, #108]	; (1b1b4 <z_time_slice+0xcc>)
   1b146:	23ac      	movs	r3, #172	; 0xac
   1b148:	f002 fb34 	bl	1d7b4 <printk>
   1b14c:	4916      	ldr	r1, [pc, #88]	; (1b1a8 <z_time_slice+0xc0>)
   1b14e:	481e      	ldr	r0, [pc, #120]	; (1b1c8 <z_time_slice+0xe0>)
   1b150:	f002 fb30 	bl	1d7b4 <printk>
   1b154:	4815      	ldr	r0, [pc, #84]	; (1b1ac <z_time_slice+0xc4>)
   1b156:	21ac      	movs	r1, #172	; 0xac
   1b158:	f002 fd86 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1b15c:	f385 8811 	msr	BASEPRI, r5
   1b160:	f3bf 8f6f 	isb	sy
}
   1b164:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1b166:	2600      	movs	r6, #0
   1b168:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1b16a:	4a18      	ldr	r2, [pc, #96]	; (1b1cc <z_time_slice+0xe4>)
   1b16c:	6812      	ldr	r2, [r2, #0]
   1b16e:	b1ba      	cbz	r2, 1b1a0 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   1b170:	89c2      	ldrh	r2, [r0, #14]
   1b172:	2a7f      	cmp	r2, #127	; 0x7f
   1b174:	d814      	bhi.n	1b1a0 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   1b176:	7b42      	ldrb	r2, [r0, #13]
   1b178:	06d2      	lsls	r2, r2, #27
   1b17a:	d111      	bne.n	1b1a0 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1b17c:	4a14      	ldr	r2, [pc, #80]	; (1b1d0 <z_time_slice+0xe8>)
   1b17e:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1b182:	6812      	ldr	r2, [r2, #0]
   1b184:	4296      	cmp	r6, r2
   1b186:	db0b      	blt.n	1b1a0 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   1b188:	4a12      	ldr	r2, [pc, #72]	; (1b1d4 <z_time_slice+0xec>)
   1b18a:	4290      	cmp	r0, r2
   1b18c:	d008      	beq.n	1b1a0 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   1b18e:	691a      	ldr	r2, [r3, #16]
   1b190:	42a2      	cmp	r2, r4
   1b192:	dc02      	bgt.n	1b19a <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   1b194:	f7ff ff52 	bl	1b03c <move_thread_to_end_of_prio_q>
   1b198:	e7cc      	b.n	1b134 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   1b19a:	1b12      	subs	r2, r2, r4
   1b19c:	611a      	str	r2, [r3, #16]
   1b19e:	e7cb      	b.n	1b138 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   1b1a0:	2300      	movs	r3, #0
   1b1a2:	610b      	str	r3, [r1, #16]
   1b1a4:	e7c8      	b.n	1b138 <z_time_slice+0x50>
   1b1a6:	bf00      	nop
   1b1a8:	2000207c 	.word	0x2000207c
   1b1ac:	00021710 	.word	0x00021710
   1b1b0:	00021762 	.word	0x00021762
   1b1b4:	00021650 	.word	0x00021650
   1b1b8:	00021777 	.word	0x00021777
   1b1bc:	2000203c 	.word	0x2000203c
   1b1c0:	20002078 	.word	0x20002078
   1b1c4:	00021736 	.word	0x00021736
   1b1c8:	0002174d 	.word	0x0002174d
   1b1cc:	20002084 	.word	0x20002084
   1b1d0:	20002080 	.word	0x20002080
   1b1d4:	20001b40 	.word	0x20001b40

0001b1d8 <ready_thread>:
{
   1b1d8:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1b1da:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1b1de:	7b43      	ldrb	r3, [r0, #13]
   1b1e0:	2a00      	cmp	r2, #0
{
   1b1e2:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1b1e4:	db3e      	blt.n	1b264 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b1e6:	06da      	lsls	r2, r3, #27
   1b1e8:	d13c      	bne.n	1b264 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
   1b1ea:	6985      	ldr	r5, [r0, #24]
   1b1ec:	2d00      	cmp	r5, #0
   1b1ee:	d139      	bne.n	1b264 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b1f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b1f4:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b1f6:	4b1c      	ldr	r3, [pc, #112]	; (1b268 <ready_thread+0x90>)
   1b1f8:	4298      	cmp	r0, r3
   1b1fa:	d109      	bne.n	1b210 <ready_thread+0x38>
   1b1fc:	491b      	ldr	r1, [pc, #108]	; (1b26c <ready_thread+0x94>)
   1b1fe:	481c      	ldr	r0, [pc, #112]	; (1b270 <ready_thread+0x98>)
   1b200:	4a1c      	ldr	r2, [pc, #112]	; (1b274 <ready_thread+0x9c>)
   1b202:	23b1      	movs	r3, #177	; 0xb1
   1b204:	f002 fad6 	bl	1d7b4 <printk>
   1b208:	481a      	ldr	r0, [pc, #104]	; (1b274 <ready_thread+0x9c>)
   1b20a:	21b1      	movs	r1, #177	; 0xb1
   1b20c:	f002 fd2c 	bl	1dc68 <assert_post_action>
	return list->head == list;
   1b210:	4919      	ldr	r1, [pc, #100]	; (1b278 <ready_thread+0xa0>)
   1b212:	460b      	mov	r3, r1
   1b214:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b218:	4298      	cmp	r0, r3
   1b21a:	bf18      	it	ne
   1b21c:	4605      	movne	r5, r0
   1b21e:	2d00      	cmp	r5, #0
   1b220:	461a      	mov	r2, r3
   1b222:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b224:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   1b226:	bf38      	it	cc
   1b228:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b22a:	b1b3      	cbz	r3, 1b25a <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
   1b22c:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1b230:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1b234:	4286      	cmp	r6, r0
   1b236:	d00c      	beq.n	1b252 <ready_thread+0x7a>
		return b2 - b1;
   1b238:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b23a:	2800      	cmp	r0, #0
   1b23c:	dd09      	ble.n	1b252 <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
   1b23e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b240:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1b244:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b246:	605c      	str	r4, [r3, #4]
}
   1b248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   1b24c:	2000      	movs	r0, #0
   1b24e:	f7ff bebd 	b.w	1afcc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1b252:	42ab      	cmp	r3, r5
   1b254:	d001      	beq.n	1b25a <ready_thread+0x82>
   1b256:	681b      	ldr	r3, [r3, #0]
   1b258:	e7e7      	b.n	1b22a <ready_thread+0x52>
	node->prev = tail;
   1b25a:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   1b25e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1b260:	624c      	str	r4, [r1, #36]	; 0x24
}
   1b262:	e7f1      	b.n	1b248 <ready_thread+0x70>
}
   1b264:	bd70      	pop	{r4, r5, r6, pc}
   1b266:	bf00      	nop
   1b268:	20001b40 	.word	0x20001b40
   1b26c:	00022fc2 	.word	0x00022fc2
   1b270:	00021650 	.word	0x00021650
   1b274:	00022fa0 	.word	0x00022fa0
   1b278:	2000203c 	.word	0x2000203c

0001b27c <z_ready_thread>:
{
   1b27c:	b538      	push	{r3, r4, r5, lr}
   1b27e:	4604      	mov	r4, r0
	__asm__ volatile(
   1b280:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b284:	f3ef 8511 	mrs	r5, BASEPRI
   1b288:	f383 8812 	msr	BASEPRI_MAX, r3
   1b28c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b290:	4817      	ldr	r0, [pc, #92]	; (1b2f0 <z_ready_thread+0x74>)
   1b292:	f7fe fb17 	bl	198c4 <z_spin_lock_valid>
   1b296:	b968      	cbnz	r0, 1b2b4 <z_ready_thread+0x38>
   1b298:	4a16      	ldr	r2, [pc, #88]	; (1b2f4 <z_ready_thread+0x78>)
   1b29a:	4917      	ldr	r1, [pc, #92]	; (1b2f8 <z_ready_thread+0x7c>)
   1b29c:	4817      	ldr	r0, [pc, #92]	; (1b2fc <z_ready_thread+0x80>)
   1b29e:	2381      	movs	r3, #129	; 0x81
   1b2a0:	f002 fa88 	bl	1d7b4 <printk>
   1b2a4:	4912      	ldr	r1, [pc, #72]	; (1b2f0 <z_ready_thread+0x74>)
   1b2a6:	4816      	ldr	r0, [pc, #88]	; (1b300 <z_ready_thread+0x84>)
   1b2a8:	f002 fa84 	bl	1d7b4 <printk>
   1b2ac:	4811      	ldr	r0, [pc, #68]	; (1b2f4 <z_ready_thread+0x78>)
   1b2ae:	2181      	movs	r1, #129	; 0x81
   1b2b0:	f002 fcda 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b2b4:	480e      	ldr	r0, [pc, #56]	; (1b2f0 <z_ready_thread+0x74>)
   1b2b6:	f7fe fb23 	bl	19900 <z_spin_lock_set_owner>
			ready_thread(thread);
   1b2ba:	4620      	mov	r0, r4
   1b2bc:	f7ff ff8c 	bl	1b1d8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b2c0:	480b      	ldr	r0, [pc, #44]	; (1b2f0 <z_ready_thread+0x74>)
   1b2c2:	f7fe fb0d 	bl	198e0 <z_spin_unlock_valid>
   1b2c6:	b968      	cbnz	r0, 1b2e4 <z_ready_thread+0x68>
   1b2c8:	4a0a      	ldr	r2, [pc, #40]	; (1b2f4 <z_ready_thread+0x78>)
   1b2ca:	490e      	ldr	r1, [pc, #56]	; (1b304 <z_ready_thread+0x88>)
   1b2cc:	480b      	ldr	r0, [pc, #44]	; (1b2fc <z_ready_thread+0x80>)
   1b2ce:	23ac      	movs	r3, #172	; 0xac
   1b2d0:	f002 fa70 	bl	1d7b4 <printk>
   1b2d4:	4906      	ldr	r1, [pc, #24]	; (1b2f0 <z_ready_thread+0x74>)
   1b2d6:	480c      	ldr	r0, [pc, #48]	; (1b308 <z_ready_thread+0x8c>)
   1b2d8:	f002 fa6c 	bl	1d7b4 <printk>
   1b2dc:	4805      	ldr	r0, [pc, #20]	; (1b2f4 <z_ready_thread+0x78>)
   1b2de:	21ac      	movs	r1, #172	; 0xac
   1b2e0:	f002 fcc2 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1b2e4:	f385 8811 	msr	BASEPRI, r5
   1b2e8:	f3bf 8f6f 	isb	sy
}
   1b2ec:	bd38      	pop	{r3, r4, r5, pc}
   1b2ee:	bf00      	nop
   1b2f0:	2000207c 	.word	0x2000207c
   1b2f4:	00021710 	.word	0x00021710
   1b2f8:	00021762 	.word	0x00021762
   1b2fc:	00021650 	.word	0x00021650
   1b300:	00021777 	.word	0x00021777
   1b304:	00021736 	.word	0x00021736
   1b308:	0002174d 	.word	0x0002174d

0001b30c <z_sched_start>:
{
   1b30c:	b538      	push	{r3, r4, r5, lr}
   1b30e:	4604      	mov	r4, r0
	__asm__ volatile(
   1b310:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b314:	f3ef 8511 	mrs	r5, BASEPRI
   1b318:	f383 8812 	msr	BASEPRI_MAX, r3
   1b31c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b320:	481d      	ldr	r0, [pc, #116]	; (1b398 <z_sched_start+0x8c>)
   1b322:	f7fe facf 	bl	198c4 <z_spin_lock_valid>
   1b326:	b968      	cbnz	r0, 1b344 <z_sched_start+0x38>
   1b328:	4a1c      	ldr	r2, [pc, #112]	; (1b39c <z_sched_start+0x90>)
   1b32a:	491d      	ldr	r1, [pc, #116]	; (1b3a0 <z_sched_start+0x94>)
   1b32c:	481d      	ldr	r0, [pc, #116]	; (1b3a4 <z_sched_start+0x98>)
   1b32e:	2381      	movs	r3, #129	; 0x81
   1b330:	f002 fa40 	bl	1d7b4 <printk>
   1b334:	4918      	ldr	r1, [pc, #96]	; (1b398 <z_sched_start+0x8c>)
   1b336:	481c      	ldr	r0, [pc, #112]	; (1b3a8 <z_sched_start+0x9c>)
   1b338:	f002 fa3c 	bl	1d7b4 <printk>
   1b33c:	4817      	ldr	r0, [pc, #92]	; (1b39c <z_sched_start+0x90>)
   1b33e:	2181      	movs	r1, #129	; 0x81
   1b340:	f002 fc92 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b344:	4814      	ldr	r0, [pc, #80]	; (1b398 <z_sched_start+0x8c>)
   1b346:	f7fe fadb 	bl	19900 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   1b34a:	7b63      	ldrb	r3, [r4, #13]
   1b34c:	075a      	lsls	r2, r3, #29
   1b34e:	d416      	bmi.n	1b37e <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b350:	4811      	ldr	r0, [pc, #68]	; (1b398 <z_sched_start+0x8c>)
   1b352:	f7fe fac5 	bl	198e0 <z_spin_unlock_valid>
   1b356:	b968      	cbnz	r0, 1b374 <z_sched_start+0x68>
   1b358:	4a10      	ldr	r2, [pc, #64]	; (1b39c <z_sched_start+0x90>)
   1b35a:	4914      	ldr	r1, [pc, #80]	; (1b3ac <z_sched_start+0xa0>)
   1b35c:	4811      	ldr	r0, [pc, #68]	; (1b3a4 <z_sched_start+0x98>)
   1b35e:	23ac      	movs	r3, #172	; 0xac
   1b360:	f002 fa28 	bl	1d7b4 <printk>
   1b364:	490c      	ldr	r1, [pc, #48]	; (1b398 <z_sched_start+0x8c>)
   1b366:	4812      	ldr	r0, [pc, #72]	; (1b3b0 <z_sched_start+0xa4>)
   1b368:	f002 fa24 	bl	1d7b4 <printk>
   1b36c:	480b      	ldr	r0, [pc, #44]	; (1b39c <z_sched_start+0x90>)
   1b36e:	21ac      	movs	r1, #172	; 0xac
   1b370:	f002 fc7a 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1b374:	f385 8811 	msr	BASEPRI, r5
   1b378:	f3bf 8f6f 	isb	sy
}
   1b37c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b37e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   1b382:	4620      	mov	r0, r4
   1b384:	7363      	strb	r3, [r4, #13]
   1b386:	f7ff ff27 	bl	1b1d8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1b38a:	4629      	mov	r1, r5
   1b38c:	4802      	ldr	r0, [pc, #8]	; (1b398 <z_sched_start+0x8c>)
}
   1b38e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   1b392:	f7ff bcd3 	b.w	1ad3c <z_reschedule>
   1b396:	bf00      	nop
   1b398:	2000207c 	.word	0x2000207c
   1b39c:	00021710 	.word	0x00021710
   1b3a0:	00021762 	.word	0x00021762
   1b3a4:	00021650 	.word	0x00021650
   1b3a8:	00021777 	.word	0x00021777
   1b3ac:	00021736 	.word	0x00021736
   1b3b0:	0002174d 	.word	0x0002174d

0001b3b4 <z_thread_timeout>:
{
   1b3b4:	b570      	push	{r4, r5, r6, lr}
   1b3b6:	4604      	mov	r4, r0
	__asm__ volatile(
   1b3b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b3bc:	f3ef 8611 	mrs	r6, BASEPRI
   1b3c0:	f383 8812 	msr	BASEPRI_MAX, r3
   1b3c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b3c8:	4820      	ldr	r0, [pc, #128]	; (1b44c <z_thread_timeout+0x98>)
   1b3ca:	f7fe fa7b 	bl	198c4 <z_spin_lock_valid>
   1b3ce:	b968      	cbnz	r0, 1b3ec <z_thread_timeout+0x38>
   1b3d0:	4a1f      	ldr	r2, [pc, #124]	; (1b450 <z_thread_timeout+0x9c>)
   1b3d2:	4920      	ldr	r1, [pc, #128]	; (1b454 <z_thread_timeout+0xa0>)
   1b3d4:	4820      	ldr	r0, [pc, #128]	; (1b458 <z_thread_timeout+0xa4>)
   1b3d6:	2381      	movs	r3, #129	; 0x81
   1b3d8:	f002 f9ec 	bl	1d7b4 <printk>
   1b3dc:	491b      	ldr	r1, [pc, #108]	; (1b44c <z_thread_timeout+0x98>)
   1b3de:	481f      	ldr	r0, [pc, #124]	; (1b45c <z_thread_timeout+0xa8>)
   1b3e0:	f002 f9e8 	bl	1d7b4 <printk>
   1b3e4:	481a      	ldr	r0, [pc, #104]	; (1b450 <z_thread_timeout+0x9c>)
   1b3e6:	2181      	movs	r1, #129	; 0x81
   1b3e8:	f002 fc3e 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b3ec:	4817      	ldr	r0, [pc, #92]	; (1b44c <z_thread_timeout+0x98>)
   1b3ee:	f7fe fa87 	bl	19900 <z_spin_lock_set_owner>
		if (!killed) {
   1b3f2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1b3f6:	f013 0f28 	tst.w	r3, #40	; 0x28
   1b3fa:	d110      	bne.n	1b41e <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   1b3fc:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1b400:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   1b404:	b113      	cbz	r3, 1b40c <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   1b406:	4628      	mov	r0, r5
   1b408:	f7ff fd72 	bl	1aef0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1b40c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1b410:	f023 0314 	bic.w	r3, r3, #20
   1b414:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   1b418:	4628      	mov	r0, r5
   1b41a:	f7ff fedd 	bl	1b1d8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b41e:	480b      	ldr	r0, [pc, #44]	; (1b44c <z_thread_timeout+0x98>)
   1b420:	f7fe fa5e 	bl	198e0 <z_spin_unlock_valid>
   1b424:	b968      	cbnz	r0, 1b442 <z_thread_timeout+0x8e>
   1b426:	4a0a      	ldr	r2, [pc, #40]	; (1b450 <z_thread_timeout+0x9c>)
   1b428:	490d      	ldr	r1, [pc, #52]	; (1b460 <z_thread_timeout+0xac>)
   1b42a:	480b      	ldr	r0, [pc, #44]	; (1b458 <z_thread_timeout+0xa4>)
   1b42c:	23ac      	movs	r3, #172	; 0xac
   1b42e:	f002 f9c1 	bl	1d7b4 <printk>
   1b432:	4906      	ldr	r1, [pc, #24]	; (1b44c <z_thread_timeout+0x98>)
   1b434:	480b      	ldr	r0, [pc, #44]	; (1b464 <z_thread_timeout+0xb0>)
   1b436:	f002 f9bd 	bl	1d7b4 <printk>
   1b43a:	4805      	ldr	r0, [pc, #20]	; (1b450 <z_thread_timeout+0x9c>)
   1b43c:	21ac      	movs	r1, #172	; 0xac
   1b43e:	f002 fc13 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1b442:	f386 8811 	msr	BASEPRI, r6
   1b446:	f3bf 8f6f 	isb	sy
}
   1b44a:	bd70      	pop	{r4, r5, r6, pc}
   1b44c:	2000207c 	.word	0x2000207c
   1b450:	00021710 	.word	0x00021710
   1b454:	00021762 	.word	0x00021762
   1b458:	00021650 	.word	0x00021650
   1b45c:	00021777 	.word	0x00021777
   1b460:	00021736 	.word	0x00021736
   1b464:	0002174d 	.word	0x0002174d

0001b468 <unready_thread>:
{
   1b468:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1b46a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1b46e:	7b43      	ldrb	r3, [r0, #13]
   1b470:	2a00      	cmp	r2, #0
{
   1b472:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1b474:	da06      	bge.n	1b484 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b47a:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   1b47c:	4601      	mov	r1, r0
   1b47e:	4806      	ldr	r0, [pc, #24]	; (1b498 <unready_thread+0x30>)
   1b480:	f7ff fd14 	bl	1aeac <z_priq_dumb_remove>
	update_cache(thread == _current);
   1b484:	4b05      	ldr	r3, [pc, #20]	; (1b49c <unready_thread+0x34>)
   1b486:	6898      	ldr	r0, [r3, #8]
   1b488:	1b03      	subs	r3, r0, r4
   1b48a:	4258      	negs	r0, r3
}
   1b48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   1b490:	4158      	adcs	r0, r3
   1b492:	f7ff bd9b 	b.w	1afcc <update_cache>
   1b496:	bf00      	nop
   1b498:	2000205c 	.word	0x2000205c
   1b49c:	2000203c 	.word	0x2000203c

0001b4a0 <add_to_waitq_locked>:
{
   1b4a0:	b538      	push	{r3, r4, r5, lr}
   1b4a2:	4604      	mov	r4, r0
   1b4a4:	460d      	mov	r5, r1
	unready_thread(thread);
   1b4a6:	f7ff ffdf 	bl	1b468 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1b4aa:	7b63      	ldrb	r3, [r4, #13]
   1b4ac:	f043 0302 	orr.w	r3, r3, #2
   1b4b0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1b4b2:	b31d      	cbz	r5, 1b4fc <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b4b4:	4b17      	ldr	r3, [pc, #92]	; (1b514 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   1b4b6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b4b8:	429c      	cmp	r4, r3
   1b4ba:	d109      	bne.n	1b4d0 <add_to_waitq_locked+0x30>
   1b4bc:	4916      	ldr	r1, [pc, #88]	; (1b518 <add_to_waitq_locked+0x78>)
   1b4be:	4817      	ldr	r0, [pc, #92]	; (1b51c <add_to_waitq_locked+0x7c>)
   1b4c0:	4a17      	ldr	r2, [pc, #92]	; (1b520 <add_to_waitq_locked+0x80>)
   1b4c2:	23b1      	movs	r3, #177	; 0xb1
   1b4c4:	f002 f976 	bl	1d7b4 <printk>
   1b4c8:	4815      	ldr	r0, [pc, #84]	; (1b520 <add_to_waitq_locked+0x80>)
   1b4ca:	21b1      	movs	r1, #177	; 0xb1
   1b4cc:	f002 fbcc 	bl	1dc68 <assert_post_action>
	return list->head == list;
   1b4d0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b4d2:	429d      	cmp	r5, r3
   1b4d4:	bf08      	it	eq
   1b4d6:	2300      	moveq	r3, #0
   1b4d8:	2b00      	cmp	r3, #0
   1b4da:	bf38      	it	cc
   1b4dc:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b4de:	b19b      	cbz	r3, 1b508 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
   1b4e0:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1b4e4:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1b4e8:	4291      	cmp	r1, r2
   1b4ea:	d008      	beq.n	1b4fe <add_to_waitq_locked+0x5e>
		return b2 - b1;
   1b4ec:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b4ee:	2a00      	cmp	r2, #0
   1b4f0:	dd05      	ble.n	1b4fe <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
   1b4f2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b4f4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1b4f8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b4fa:	605c      	str	r4, [r3, #4]
}
   1b4fc:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1b4fe:	686a      	ldr	r2, [r5, #4]
   1b500:	4293      	cmp	r3, r2
   1b502:	d001      	beq.n	1b508 <add_to_waitq_locked+0x68>
   1b504:	681b      	ldr	r3, [r3, #0]
   1b506:	e7ea      	b.n	1b4de <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
   1b508:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1b50a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1b50e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b510:	606c      	str	r4, [r5, #4]
   1b512:	e7f3      	b.n	1b4fc <add_to_waitq_locked+0x5c>
   1b514:	20001b40 	.word	0x20001b40
   1b518:	00022fc2 	.word	0x00022fc2
   1b51c:	00021650 	.word	0x00021650
   1b520:	00022fa0 	.word	0x00022fa0

0001b524 <pend>:
{
   1b524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b528:	4604      	mov	r4, r0
   1b52a:	460d      	mov	r5, r1
   1b52c:	4616      	mov	r6, r2
   1b52e:	461f      	mov	r7, r3
	__asm__ volatile(
   1b530:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b534:	f3ef 8811 	mrs	r8, BASEPRI
   1b538:	f383 8812 	msr	BASEPRI_MAX, r3
   1b53c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b540:	481f      	ldr	r0, [pc, #124]	; (1b5c0 <pend+0x9c>)
   1b542:	f7fe f9bf 	bl	198c4 <z_spin_lock_valid>
   1b546:	b968      	cbnz	r0, 1b564 <pend+0x40>
   1b548:	4a1e      	ldr	r2, [pc, #120]	; (1b5c4 <pend+0xa0>)
   1b54a:	491f      	ldr	r1, [pc, #124]	; (1b5c8 <pend+0xa4>)
   1b54c:	481f      	ldr	r0, [pc, #124]	; (1b5cc <pend+0xa8>)
   1b54e:	2381      	movs	r3, #129	; 0x81
   1b550:	f002 f930 	bl	1d7b4 <printk>
   1b554:	491a      	ldr	r1, [pc, #104]	; (1b5c0 <pend+0x9c>)
   1b556:	481e      	ldr	r0, [pc, #120]	; (1b5d0 <pend+0xac>)
   1b558:	f002 f92c 	bl	1d7b4 <printk>
   1b55c:	4819      	ldr	r0, [pc, #100]	; (1b5c4 <pend+0xa0>)
   1b55e:	2181      	movs	r1, #129	; 0x81
   1b560:	f002 fb82 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b564:	4816      	ldr	r0, [pc, #88]	; (1b5c0 <pend+0x9c>)
   1b566:	f7fe f9cb 	bl	19900 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   1b56a:	4620      	mov	r0, r4
   1b56c:	4629      	mov	r1, r5
   1b56e:	f7ff ff97 	bl	1b4a0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b572:	4813      	ldr	r0, [pc, #76]	; (1b5c0 <pend+0x9c>)
   1b574:	f7fe f9b4 	bl	198e0 <z_spin_unlock_valid>
   1b578:	b968      	cbnz	r0, 1b596 <pend+0x72>
   1b57a:	4a12      	ldr	r2, [pc, #72]	; (1b5c4 <pend+0xa0>)
   1b57c:	4915      	ldr	r1, [pc, #84]	; (1b5d4 <pend+0xb0>)
   1b57e:	4813      	ldr	r0, [pc, #76]	; (1b5cc <pend+0xa8>)
   1b580:	23ac      	movs	r3, #172	; 0xac
   1b582:	f002 f917 	bl	1d7b4 <printk>
   1b586:	490e      	ldr	r1, [pc, #56]	; (1b5c0 <pend+0x9c>)
   1b588:	4813      	ldr	r0, [pc, #76]	; (1b5d8 <pend+0xb4>)
   1b58a:	f002 f913 	bl	1d7b4 <printk>
   1b58e:	480d      	ldr	r0, [pc, #52]	; (1b5c4 <pend+0xa0>)
   1b590:	21ac      	movs	r1, #172	; 0xac
   1b592:	f002 fb69 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1b596:	f388 8811 	msr	BASEPRI, r8
   1b59a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b59e:	1c7b      	adds	r3, r7, #1
   1b5a0:	bf08      	it	eq
   1b5a2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1b5a6:	d008      	beq.n	1b5ba <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b5a8:	4632      	mov	r2, r6
   1b5aa:	463b      	mov	r3, r7
   1b5ac:	f104 0018 	add.w	r0, r4, #24
   1b5b0:	490a      	ldr	r1, [pc, #40]	; (1b5dc <pend+0xb8>)
}
   1b5b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b5b6:	f000 bd95 	b.w	1c0e4 <z_add_timeout>
   1b5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b5be:	bf00      	nop
   1b5c0:	2000207c 	.word	0x2000207c
   1b5c4:	00021710 	.word	0x00021710
   1b5c8:	00021762 	.word	0x00021762
   1b5cc:	00021650 	.word	0x00021650
   1b5d0:	00021777 	.word	0x00021777
   1b5d4:	00021736 	.word	0x00021736
   1b5d8:	0002174d 	.word	0x0002174d
   1b5dc:	0001b3b5 	.word	0x0001b3b5

0001b5e0 <z_pend_curr>:
{
   1b5e0:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   1b5e2:	4b11      	ldr	r3, [pc, #68]	; (1b628 <z_pend_curr+0x48>)
{
   1b5e4:	4604      	mov	r4, r0
	pending_current = _current;
   1b5e6:	6898      	ldr	r0, [r3, #8]
   1b5e8:	4b10      	ldr	r3, [pc, #64]	; (1b62c <z_pend_curr+0x4c>)
{
   1b5ea:	460d      	mov	r5, r1
	pending_current = _current;
   1b5ec:	6018      	str	r0, [r3, #0]
{
   1b5ee:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1b5f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b5f4:	f7ff ff96 	bl	1b524 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b5f8:	4620      	mov	r0, r4
   1b5fa:	f7fe f971 	bl	198e0 <z_spin_unlock_valid>
   1b5fe:	b968      	cbnz	r0, 1b61c <z_pend_curr+0x3c>
   1b600:	4a0b      	ldr	r2, [pc, #44]	; (1b630 <z_pend_curr+0x50>)
   1b602:	490c      	ldr	r1, [pc, #48]	; (1b634 <z_pend_curr+0x54>)
   1b604:	480c      	ldr	r0, [pc, #48]	; (1b638 <z_pend_curr+0x58>)
   1b606:	23c3      	movs	r3, #195	; 0xc3
   1b608:	f002 f8d4 	bl	1d7b4 <printk>
   1b60c:	480b      	ldr	r0, [pc, #44]	; (1b63c <z_pend_curr+0x5c>)
   1b60e:	4621      	mov	r1, r4
   1b610:	f002 f8d0 	bl	1d7b4 <printk>
   1b614:	4806      	ldr	r0, [pc, #24]	; (1b630 <z_pend_curr+0x50>)
   1b616:	21c3      	movs	r1, #195	; 0xc3
   1b618:	f002 fb26 	bl	1dc68 <assert_post_action>
   1b61c:	4628      	mov	r0, r5
}
   1b61e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b622:	f7f6 b875 	b.w	11710 <arch_swap>
   1b626:	bf00      	nop
   1b628:	2000203c 	.word	0x2000203c
   1b62c:	20002078 	.word	0x20002078
   1b630:	00021710 	.word	0x00021710
   1b634:	00021736 	.word	0x00021736
   1b638:	00021650 	.word	0x00021650
   1b63c:	0002174d 	.word	0x0002174d

0001b640 <z_set_prio>:
{
   1b640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b642:	4604      	mov	r4, r0
   1b644:	460e      	mov	r6, r1
	__asm__ volatile(
   1b646:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b64a:	f3ef 8711 	mrs	r7, BASEPRI
   1b64e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b652:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b656:	483c      	ldr	r0, [pc, #240]	; (1b748 <z_set_prio+0x108>)
   1b658:	f7fe f934 	bl	198c4 <z_spin_lock_valid>
   1b65c:	b968      	cbnz	r0, 1b67a <z_set_prio+0x3a>
   1b65e:	4a3b      	ldr	r2, [pc, #236]	; (1b74c <z_set_prio+0x10c>)
   1b660:	493b      	ldr	r1, [pc, #236]	; (1b750 <z_set_prio+0x110>)
   1b662:	483c      	ldr	r0, [pc, #240]	; (1b754 <z_set_prio+0x114>)
   1b664:	2381      	movs	r3, #129	; 0x81
   1b666:	f002 f8a5 	bl	1d7b4 <printk>
   1b66a:	4937      	ldr	r1, [pc, #220]	; (1b748 <z_set_prio+0x108>)
   1b66c:	483a      	ldr	r0, [pc, #232]	; (1b758 <z_set_prio+0x118>)
   1b66e:	f002 f8a1 	bl	1d7b4 <printk>
   1b672:	4836      	ldr	r0, [pc, #216]	; (1b74c <z_set_prio+0x10c>)
   1b674:	2181      	movs	r1, #129	; 0x81
   1b676:	f002 faf7 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b67a:	4833      	ldr	r0, [pc, #204]	; (1b748 <z_set_prio+0x108>)
   1b67c:	f7fe f940 	bl	19900 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b680:	7b63      	ldrb	r3, [r4, #13]
   1b682:	06da      	lsls	r2, r3, #27
   1b684:	b276      	sxtb	r6, r6
   1b686:	d15c      	bne.n	1b742 <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
   1b688:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   1b68a:	2d00      	cmp	r5, #0
   1b68c:	d159      	bne.n	1b742 <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b68e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b692:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   1b694:	4831      	ldr	r0, [pc, #196]	; (1b75c <z_set_prio+0x11c>)
   1b696:	4621      	mov	r1, r4
   1b698:	f7ff fc08 	bl	1aeac <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b69c:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   1b69e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b6a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b6a4:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b6a6:	4b2e      	ldr	r3, [pc, #184]	; (1b760 <z_set_prio+0x120>)
   1b6a8:	429c      	cmp	r4, r3
   1b6aa:	d109      	bne.n	1b6c0 <z_set_prio+0x80>
   1b6ac:	492d      	ldr	r1, [pc, #180]	; (1b764 <z_set_prio+0x124>)
   1b6ae:	4829      	ldr	r0, [pc, #164]	; (1b754 <z_set_prio+0x114>)
   1b6b0:	4a2d      	ldr	r2, [pc, #180]	; (1b768 <z_set_prio+0x128>)
   1b6b2:	23b1      	movs	r3, #177	; 0xb1
   1b6b4:	f002 f87e 	bl	1d7b4 <printk>
   1b6b8:	482b      	ldr	r0, [pc, #172]	; (1b768 <z_set_prio+0x128>)
   1b6ba:	21b1      	movs	r1, #177	; 0xb1
   1b6bc:	f002 fad4 	bl	1dc68 <assert_post_action>
	return list->head == list;
   1b6c0:	492a      	ldr	r1, [pc, #168]	; (1b76c <z_set_prio+0x12c>)
   1b6c2:	460b      	mov	r3, r1
   1b6c4:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b6c8:	4298      	cmp	r0, r3
   1b6ca:	bf18      	it	ne
   1b6cc:	4605      	movne	r5, r0
   1b6ce:	2d00      	cmp	r5, #0
   1b6d0:	461a      	mov	r2, r3
   1b6d2:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b6d4:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   1b6d6:	bf38      	it	cc
   1b6d8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b6da:	b36b      	cbz	r3, 1b738 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
   1b6dc:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1b6e0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1b6e4:	4286      	cmp	r6, r0
   1b6e6:	d023      	beq.n	1b730 <z_set_prio+0xf0>
		return b2 - b1;
   1b6e8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b6ea:	2800      	cmp	r0, #0
   1b6ec:	dd20      	ble.n	1b730 <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
   1b6ee:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b6f0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1b6f4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b6f6:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1b6f8:	2001      	movs	r0, #1
   1b6fa:	f7ff fc67 	bl	1afcc <update_cache>
   1b6fe:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b700:	4811      	ldr	r0, [pc, #68]	; (1b748 <z_set_prio+0x108>)
   1b702:	f7fe f8ed 	bl	198e0 <z_spin_unlock_valid>
   1b706:	b968      	cbnz	r0, 1b724 <z_set_prio+0xe4>
   1b708:	4a10      	ldr	r2, [pc, #64]	; (1b74c <z_set_prio+0x10c>)
   1b70a:	4919      	ldr	r1, [pc, #100]	; (1b770 <z_set_prio+0x130>)
   1b70c:	4811      	ldr	r0, [pc, #68]	; (1b754 <z_set_prio+0x114>)
   1b70e:	23ac      	movs	r3, #172	; 0xac
   1b710:	f002 f850 	bl	1d7b4 <printk>
   1b714:	490c      	ldr	r1, [pc, #48]	; (1b748 <z_set_prio+0x108>)
   1b716:	4817      	ldr	r0, [pc, #92]	; (1b774 <z_set_prio+0x134>)
   1b718:	f002 f84c 	bl	1d7b4 <printk>
   1b71c:	480b      	ldr	r0, [pc, #44]	; (1b74c <z_set_prio+0x10c>)
   1b71e:	21ac      	movs	r1, #172	; 0xac
   1b720:	f002 faa2 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1b724:	f387 8811 	msr	BASEPRI, r7
   1b728:	f3bf 8f6f 	isb	sy
}
   1b72c:	4620      	mov	r0, r4
   1b72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b730:	42ab      	cmp	r3, r5
   1b732:	d001      	beq.n	1b738 <z_set_prio+0xf8>
   1b734:	681b      	ldr	r3, [r3, #0]
   1b736:	e7d0      	b.n	1b6da <z_set_prio+0x9a>
	node->prev = tail;
   1b738:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   1b73c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1b73e:	624c      	str	r4, [r1, #36]	; 0x24
}
   1b740:	e7da      	b.n	1b6f8 <z_set_prio+0xb8>
			thread->base.prio = prio;
   1b742:	73a6      	strb	r6, [r4, #14]
   1b744:	2400      	movs	r4, #0
   1b746:	e7db      	b.n	1b700 <z_set_prio+0xc0>
   1b748:	2000207c 	.word	0x2000207c
   1b74c:	00021710 	.word	0x00021710
   1b750:	00021762 	.word	0x00021762
   1b754:	00021650 	.word	0x00021650
   1b758:	00021777 	.word	0x00021777
   1b75c:	2000205c 	.word	0x2000205c
   1b760:	20001b40 	.word	0x20001b40
   1b764:	00022fc2 	.word	0x00022fc2
   1b768:	00022fa0 	.word	0x00022fa0
   1b76c:	2000203c 	.word	0x2000203c
   1b770:	00021736 	.word	0x00021736
   1b774:	0002174d 	.word	0x0002174d

0001b778 <z_impl_k_thread_suspend>:
{
   1b778:	b570      	push	{r4, r5, r6, lr}
   1b77a:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   1b77c:	3018      	adds	r0, #24
   1b77e:	f000 fd85 	bl	1c28c <z_abort_timeout>
	__asm__ volatile(
   1b782:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b786:	f3ef 8611 	mrs	r6, BASEPRI
   1b78a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b78e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b792:	4825      	ldr	r0, [pc, #148]	; (1b828 <z_impl_k_thread_suspend+0xb0>)
   1b794:	f7fe f896 	bl	198c4 <z_spin_lock_valid>
   1b798:	b968      	cbnz	r0, 1b7b6 <z_impl_k_thread_suspend+0x3e>
   1b79a:	4a24      	ldr	r2, [pc, #144]	; (1b82c <z_impl_k_thread_suspend+0xb4>)
   1b79c:	4924      	ldr	r1, [pc, #144]	; (1b830 <z_impl_k_thread_suspend+0xb8>)
   1b79e:	4825      	ldr	r0, [pc, #148]	; (1b834 <z_impl_k_thread_suspend+0xbc>)
   1b7a0:	2381      	movs	r3, #129	; 0x81
   1b7a2:	f002 f807 	bl	1d7b4 <printk>
   1b7a6:	4920      	ldr	r1, [pc, #128]	; (1b828 <z_impl_k_thread_suspend+0xb0>)
   1b7a8:	4823      	ldr	r0, [pc, #140]	; (1b838 <z_impl_k_thread_suspend+0xc0>)
   1b7aa:	f002 f803 	bl	1d7b4 <printk>
   1b7ae:	481f      	ldr	r0, [pc, #124]	; (1b82c <z_impl_k_thread_suspend+0xb4>)
   1b7b0:	2181      	movs	r1, #129	; 0x81
   1b7b2:	f002 fa59 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b7b6:	481c      	ldr	r0, [pc, #112]	; (1b828 <z_impl_k_thread_suspend+0xb0>)
   1b7b8:	f7fe f8a2 	bl	19900 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1b7bc:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1b7c0:	7b63      	ldrb	r3, [r4, #13]
   1b7c2:	2a00      	cmp	r2, #0
   1b7c4:	da06      	bge.n	1b7d4 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b7c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   1b7ca:	481c      	ldr	r0, [pc, #112]	; (1b83c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b7cc:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   1b7ce:	4621      	mov	r1, r4
   1b7d0:	f7ff fb6c 	bl	1aeac <z_priq_dumb_remove>
		update_cache(thread == _current);
   1b7d4:	4d1a      	ldr	r5, [pc, #104]	; (1b840 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b7d6:	7b63      	ldrb	r3, [r4, #13]
   1b7d8:	68a8      	ldr	r0, [r5, #8]
   1b7da:	f043 0310 	orr.w	r3, r3, #16
   1b7de:	7363      	strb	r3, [r4, #13]
   1b7e0:	1b03      	subs	r3, r0, r4
   1b7e2:	4258      	negs	r0, r3
   1b7e4:	4158      	adcs	r0, r3
   1b7e6:	f7ff fbf1 	bl	1afcc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b7ea:	480f      	ldr	r0, [pc, #60]	; (1b828 <z_impl_k_thread_suspend+0xb0>)
   1b7ec:	f7fe f878 	bl	198e0 <z_spin_unlock_valid>
   1b7f0:	b968      	cbnz	r0, 1b80e <z_impl_k_thread_suspend+0x96>
   1b7f2:	4a0e      	ldr	r2, [pc, #56]	; (1b82c <z_impl_k_thread_suspend+0xb4>)
   1b7f4:	4913      	ldr	r1, [pc, #76]	; (1b844 <z_impl_k_thread_suspend+0xcc>)
   1b7f6:	480f      	ldr	r0, [pc, #60]	; (1b834 <z_impl_k_thread_suspend+0xbc>)
   1b7f8:	23ac      	movs	r3, #172	; 0xac
   1b7fa:	f001 ffdb 	bl	1d7b4 <printk>
   1b7fe:	490a      	ldr	r1, [pc, #40]	; (1b828 <z_impl_k_thread_suspend+0xb0>)
   1b800:	4811      	ldr	r0, [pc, #68]	; (1b848 <z_impl_k_thread_suspend+0xd0>)
   1b802:	f001 ffd7 	bl	1d7b4 <printk>
   1b806:	4809      	ldr	r0, [pc, #36]	; (1b82c <z_impl_k_thread_suspend+0xb4>)
   1b808:	21ac      	movs	r1, #172	; 0xac
   1b80a:	f002 fa2d 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1b80e:	f386 8811 	msr	BASEPRI, r6
   1b812:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1b816:	68ab      	ldr	r3, [r5, #8]
   1b818:	42a3      	cmp	r3, r4
   1b81a:	d103      	bne.n	1b824 <z_impl_k_thread_suspend+0xac>
}
   1b81c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1b820:	f005 b84c 	b.w	208bc <z_reschedule_unlocked>
}
   1b824:	bd70      	pop	{r4, r5, r6, pc}
   1b826:	bf00      	nop
   1b828:	2000207c 	.word	0x2000207c
   1b82c:	00021710 	.word	0x00021710
   1b830:	00021762 	.word	0x00021762
   1b834:	00021650 	.word	0x00021650
   1b838:	00021777 	.word	0x00021777
   1b83c:	2000205c 	.word	0x2000205c
   1b840:	2000203c 	.word	0x2000203c
   1b844:	00021736 	.word	0x00021736
   1b848:	0002174d 	.word	0x0002174d

0001b84c <k_sched_unlock>:
{
   1b84c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1b84e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b852:	f3ef 8511 	mrs	r5, BASEPRI
   1b856:	f383 8812 	msr	BASEPRI_MAX, r3
   1b85a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b85e:	482d      	ldr	r0, [pc, #180]	; (1b914 <k_sched_unlock+0xc8>)
   1b860:	f7fe f830 	bl	198c4 <z_spin_lock_valid>
   1b864:	b968      	cbnz	r0, 1b882 <k_sched_unlock+0x36>
   1b866:	4a2c      	ldr	r2, [pc, #176]	; (1b918 <k_sched_unlock+0xcc>)
   1b868:	492c      	ldr	r1, [pc, #176]	; (1b91c <k_sched_unlock+0xd0>)
   1b86a:	482d      	ldr	r0, [pc, #180]	; (1b920 <k_sched_unlock+0xd4>)
   1b86c:	2381      	movs	r3, #129	; 0x81
   1b86e:	f001 ffa1 	bl	1d7b4 <printk>
   1b872:	4928      	ldr	r1, [pc, #160]	; (1b914 <k_sched_unlock+0xc8>)
   1b874:	482b      	ldr	r0, [pc, #172]	; (1b924 <k_sched_unlock+0xd8>)
   1b876:	f001 ff9d 	bl	1d7b4 <printk>
   1b87a:	4827      	ldr	r0, [pc, #156]	; (1b918 <k_sched_unlock+0xcc>)
   1b87c:	2181      	movs	r1, #129	; 0x81
   1b87e:	f002 f9f3 	bl	1dc68 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   1b882:	4c29      	ldr	r4, [pc, #164]	; (1b928 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   1b884:	4823      	ldr	r0, [pc, #140]	; (1b914 <k_sched_unlock+0xc8>)
   1b886:	f7fe f83b 	bl	19900 <z_spin_lock_set_owner>
   1b88a:	68a2      	ldr	r2, [r4, #8]
   1b88c:	7bd2      	ldrb	r2, [r2, #15]
   1b88e:	b972      	cbnz	r2, 1b8ae <k_sched_unlock+0x62>
   1b890:	4926      	ldr	r1, [pc, #152]	; (1b92c <k_sched_unlock+0xe0>)
   1b892:	4a27      	ldr	r2, [pc, #156]	; (1b930 <k_sched_unlock+0xe4>)
   1b894:	4822      	ldr	r0, [pc, #136]	; (1b920 <k_sched_unlock+0xd4>)
   1b896:	f240 3355 	movw	r3, #853	; 0x355
   1b89a:	f001 ff8b 	bl	1d7b4 <printk>
   1b89e:	4825      	ldr	r0, [pc, #148]	; (1b934 <k_sched_unlock+0xe8>)
   1b8a0:	f001 ff88 	bl	1d7b4 <printk>
   1b8a4:	4822      	ldr	r0, [pc, #136]	; (1b930 <k_sched_unlock+0xe4>)
   1b8a6:	f240 3155 	movw	r1, #853	; 0x355
   1b8aa:	f002 f9dd 	bl	1dc68 <assert_post_action>
   1b8ae:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   1b8b2:	b173      	cbz	r3, 1b8d2 <k_sched_unlock+0x86>
   1b8b4:	4920      	ldr	r1, [pc, #128]	; (1b938 <k_sched_unlock+0xec>)
   1b8b6:	4a1e      	ldr	r2, [pc, #120]	; (1b930 <k_sched_unlock+0xe4>)
   1b8b8:	4819      	ldr	r0, [pc, #100]	; (1b920 <k_sched_unlock+0xd4>)
   1b8ba:	f240 3356 	movw	r3, #854	; 0x356
   1b8be:	f001 ff79 	bl	1d7b4 <printk>
   1b8c2:	481c      	ldr	r0, [pc, #112]	; (1b934 <k_sched_unlock+0xe8>)
   1b8c4:	f001 ff76 	bl	1d7b4 <printk>
   1b8c8:	4819      	ldr	r0, [pc, #100]	; (1b930 <k_sched_unlock+0xe4>)
   1b8ca:	f240 3156 	movw	r1, #854	; 0x356
   1b8ce:	f002 f9cb 	bl	1dc68 <assert_post_action>
		++_current->base.sched_locked;
   1b8d2:	68a2      	ldr	r2, [r4, #8]
   1b8d4:	7bd3      	ldrb	r3, [r2, #15]
   1b8d6:	3301      	adds	r3, #1
		update_cache(0);
   1b8d8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1b8da:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b8dc:	f7ff fb76 	bl	1afcc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b8e0:	480c      	ldr	r0, [pc, #48]	; (1b914 <k_sched_unlock+0xc8>)
   1b8e2:	f7fd fffd 	bl	198e0 <z_spin_unlock_valid>
   1b8e6:	b968      	cbnz	r0, 1b904 <k_sched_unlock+0xb8>
   1b8e8:	4a0b      	ldr	r2, [pc, #44]	; (1b918 <k_sched_unlock+0xcc>)
   1b8ea:	4914      	ldr	r1, [pc, #80]	; (1b93c <k_sched_unlock+0xf0>)
   1b8ec:	480c      	ldr	r0, [pc, #48]	; (1b920 <k_sched_unlock+0xd4>)
   1b8ee:	23ac      	movs	r3, #172	; 0xac
   1b8f0:	f001 ff60 	bl	1d7b4 <printk>
   1b8f4:	4907      	ldr	r1, [pc, #28]	; (1b914 <k_sched_unlock+0xc8>)
   1b8f6:	4812      	ldr	r0, [pc, #72]	; (1b940 <k_sched_unlock+0xf4>)
   1b8f8:	f001 ff5c 	bl	1d7b4 <printk>
   1b8fc:	4806      	ldr	r0, [pc, #24]	; (1b918 <k_sched_unlock+0xcc>)
   1b8fe:	21ac      	movs	r1, #172	; 0xac
   1b900:	f002 f9b2 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1b904:	f385 8811 	msr	BASEPRI, r5
   1b908:	f3bf 8f6f 	isb	sy
}
   1b90c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   1b910:	f004 bfd4 	b.w	208bc <z_reschedule_unlocked>
   1b914:	2000207c 	.word	0x2000207c
   1b918:	00021710 	.word	0x00021710
   1b91c:	00021762 	.word	0x00021762
   1b920:	00021650 	.word	0x00021650
   1b924:	00021777 	.word	0x00021777
   1b928:	2000203c 	.word	0x2000203c
   1b92c:	00023021 	.word	0x00023021
   1b930:	00022fa0 	.word	0x00022fa0
   1b934:	000224f9 	.word	0x000224f9
   1b938:	00022cd8 	.word	0x00022cd8
   1b93c:	00021736 	.word	0x00021736
   1b940:	0002174d 	.word	0x0002174d

0001b944 <z_unpend1_no_timeout>:
{
   1b944:	b538      	push	{r3, r4, r5, lr}
   1b946:	4604      	mov	r4, r0
	__asm__ volatile(
   1b948:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b94c:	f3ef 8511 	mrs	r5, BASEPRI
   1b950:	f383 8812 	msr	BASEPRI_MAX, r3
   1b954:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b958:	4819      	ldr	r0, [pc, #100]	; (1b9c0 <z_unpend1_no_timeout+0x7c>)
   1b95a:	f7fd ffb3 	bl	198c4 <z_spin_lock_valid>
   1b95e:	b968      	cbnz	r0, 1b97c <z_unpend1_no_timeout+0x38>
   1b960:	4a18      	ldr	r2, [pc, #96]	; (1b9c4 <z_unpend1_no_timeout+0x80>)
   1b962:	4919      	ldr	r1, [pc, #100]	; (1b9c8 <z_unpend1_no_timeout+0x84>)
   1b964:	4819      	ldr	r0, [pc, #100]	; (1b9cc <z_unpend1_no_timeout+0x88>)
   1b966:	2381      	movs	r3, #129	; 0x81
   1b968:	f001 ff24 	bl	1d7b4 <printk>
   1b96c:	4914      	ldr	r1, [pc, #80]	; (1b9c0 <z_unpend1_no_timeout+0x7c>)
   1b96e:	4818      	ldr	r0, [pc, #96]	; (1b9d0 <z_unpend1_no_timeout+0x8c>)
   1b970:	f001 ff20 	bl	1d7b4 <printk>
   1b974:	4813      	ldr	r0, [pc, #76]	; (1b9c4 <z_unpend1_no_timeout+0x80>)
   1b976:	2181      	movs	r1, #129	; 0x81
   1b978:	f002 f976 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b97c:	4810      	ldr	r0, [pc, #64]	; (1b9c0 <z_unpend1_no_timeout+0x7c>)
   1b97e:	f7fd ffbf 	bl	19900 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   1b982:	4620      	mov	r0, r4
   1b984:	f004 ffa4 	bl	208d0 <z_priq_dumb_best>
		if (thread != NULL) {
   1b988:	4604      	mov	r4, r0
   1b98a:	b108      	cbz	r0, 1b990 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   1b98c:	f7ff fab0 	bl	1aef0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b990:	480b      	ldr	r0, [pc, #44]	; (1b9c0 <z_unpend1_no_timeout+0x7c>)
   1b992:	f7fd ffa5 	bl	198e0 <z_spin_unlock_valid>
   1b996:	b968      	cbnz	r0, 1b9b4 <z_unpend1_no_timeout+0x70>
   1b998:	4a0a      	ldr	r2, [pc, #40]	; (1b9c4 <z_unpend1_no_timeout+0x80>)
   1b99a:	490e      	ldr	r1, [pc, #56]	; (1b9d4 <z_unpend1_no_timeout+0x90>)
   1b99c:	480b      	ldr	r0, [pc, #44]	; (1b9cc <z_unpend1_no_timeout+0x88>)
   1b99e:	23ac      	movs	r3, #172	; 0xac
   1b9a0:	f001 ff08 	bl	1d7b4 <printk>
   1b9a4:	4906      	ldr	r1, [pc, #24]	; (1b9c0 <z_unpend1_no_timeout+0x7c>)
   1b9a6:	480c      	ldr	r0, [pc, #48]	; (1b9d8 <z_unpend1_no_timeout+0x94>)
   1b9a8:	f001 ff04 	bl	1d7b4 <printk>
   1b9ac:	4805      	ldr	r0, [pc, #20]	; (1b9c4 <z_unpend1_no_timeout+0x80>)
   1b9ae:	21ac      	movs	r1, #172	; 0xac
   1b9b0:	f002 f95a 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1b9b4:	f385 8811 	msr	BASEPRI, r5
   1b9b8:	f3bf 8f6f 	isb	sy
}
   1b9bc:	4620      	mov	r0, r4
   1b9be:	bd38      	pop	{r3, r4, r5, pc}
   1b9c0:	2000207c 	.word	0x2000207c
   1b9c4:	00021710 	.word	0x00021710
   1b9c8:	00021762 	.word	0x00021762
   1b9cc:	00021650 	.word	0x00021650
   1b9d0:	00021777 	.word	0x00021777
   1b9d4:	00021736 	.word	0x00021736
   1b9d8:	0002174d 	.word	0x0002174d

0001b9dc <z_unpend_first_thread>:
{
   1b9dc:	b538      	push	{r3, r4, r5, lr}
   1b9de:	4604      	mov	r4, r0
	__asm__ volatile(
   1b9e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b9e4:	f3ef 8511 	mrs	r5, BASEPRI
   1b9e8:	f383 8812 	msr	BASEPRI_MAX, r3
   1b9ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b9f0:	481b      	ldr	r0, [pc, #108]	; (1ba60 <z_unpend_first_thread+0x84>)
   1b9f2:	f7fd ff67 	bl	198c4 <z_spin_lock_valid>
   1b9f6:	b968      	cbnz	r0, 1ba14 <z_unpend_first_thread+0x38>
   1b9f8:	4a1a      	ldr	r2, [pc, #104]	; (1ba64 <z_unpend_first_thread+0x88>)
   1b9fa:	491b      	ldr	r1, [pc, #108]	; (1ba68 <z_unpend_first_thread+0x8c>)
   1b9fc:	481b      	ldr	r0, [pc, #108]	; (1ba6c <z_unpend_first_thread+0x90>)
   1b9fe:	2381      	movs	r3, #129	; 0x81
   1ba00:	f001 fed8 	bl	1d7b4 <printk>
   1ba04:	4916      	ldr	r1, [pc, #88]	; (1ba60 <z_unpend_first_thread+0x84>)
   1ba06:	481a      	ldr	r0, [pc, #104]	; (1ba70 <z_unpend_first_thread+0x94>)
   1ba08:	f001 fed4 	bl	1d7b4 <printk>
   1ba0c:	4815      	ldr	r0, [pc, #84]	; (1ba64 <z_unpend_first_thread+0x88>)
   1ba0e:	2181      	movs	r1, #129	; 0x81
   1ba10:	f002 f92a 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ba14:	4812      	ldr	r0, [pc, #72]	; (1ba60 <z_unpend_first_thread+0x84>)
   1ba16:	f7fd ff73 	bl	19900 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   1ba1a:	4620      	mov	r0, r4
   1ba1c:	f004 ff58 	bl	208d0 <z_priq_dumb_best>
		if (thread != NULL) {
   1ba20:	4604      	mov	r4, r0
   1ba22:	b128      	cbz	r0, 1ba30 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   1ba24:	f7ff fa64 	bl	1aef0 <unpend_thread_no_timeout>
   1ba28:	f104 0018 	add.w	r0, r4, #24
   1ba2c:	f000 fc2e 	bl	1c28c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ba30:	480b      	ldr	r0, [pc, #44]	; (1ba60 <z_unpend_first_thread+0x84>)
   1ba32:	f7fd ff55 	bl	198e0 <z_spin_unlock_valid>
   1ba36:	b968      	cbnz	r0, 1ba54 <z_unpend_first_thread+0x78>
   1ba38:	4a0a      	ldr	r2, [pc, #40]	; (1ba64 <z_unpend_first_thread+0x88>)
   1ba3a:	490e      	ldr	r1, [pc, #56]	; (1ba74 <z_unpend_first_thread+0x98>)
   1ba3c:	480b      	ldr	r0, [pc, #44]	; (1ba6c <z_unpend_first_thread+0x90>)
   1ba3e:	23ac      	movs	r3, #172	; 0xac
   1ba40:	f001 feb8 	bl	1d7b4 <printk>
   1ba44:	4906      	ldr	r1, [pc, #24]	; (1ba60 <z_unpend_first_thread+0x84>)
   1ba46:	480c      	ldr	r0, [pc, #48]	; (1ba78 <z_unpend_first_thread+0x9c>)
   1ba48:	f001 feb4 	bl	1d7b4 <printk>
   1ba4c:	4805      	ldr	r0, [pc, #20]	; (1ba64 <z_unpend_first_thread+0x88>)
   1ba4e:	21ac      	movs	r1, #172	; 0xac
   1ba50:	f002 f90a 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1ba54:	f385 8811 	msr	BASEPRI, r5
   1ba58:	f3bf 8f6f 	isb	sy
}
   1ba5c:	4620      	mov	r0, r4
   1ba5e:	bd38      	pop	{r3, r4, r5, pc}
   1ba60:	2000207c 	.word	0x2000207c
   1ba64:	00021710 	.word	0x00021710
   1ba68:	00021762 	.word	0x00021762
   1ba6c:	00021650 	.word	0x00021650
   1ba70:	00021777 	.word	0x00021777
   1ba74:	00021736 	.word	0x00021736
   1ba78:	0002174d 	.word	0x0002174d

0001ba7c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1ba7c:	4b04      	ldr	r3, [pc, #16]	; (1ba90 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1ba7e:	2100      	movs	r1, #0
   1ba80:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1ba84:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1ba88:	4608      	mov	r0, r1
   1ba8a:	f7ff b8a9 	b.w	1abe0 <k_sched_time_slice_set>
   1ba8e:	bf00      	nop
   1ba90:	2000203c 	.word	0x2000203c

0001ba94 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1ba94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ba96:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1ba9a:	b173      	cbz	r3, 1baba <z_impl_k_yield+0x26>
   1ba9c:	4941      	ldr	r1, [pc, #260]	; (1bba4 <z_impl_k_yield+0x110>)
   1ba9e:	4a42      	ldr	r2, [pc, #264]	; (1bba8 <z_impl_k_yield+0x114>)
   1baa0:	4842      	ldr	r0, [pc, #264]	; (1bbac <z_impl_k_yield+0x118>)
   1baa2:	f240 43a1 	movw	r3, #1185	; 0x4a1
   1baa6:	f001 fe85 	bl	1d7b4 <printk>
   1baaa:	4841      	ldr	r0, [pc, #260]	; (1bbb0 <z_impl_k_yield+0x11c>)
   1baac:	f001 fe82 	bl	1d7b4 <printk>
   1bab0:	483d      	ldr	r0, [pc, #244]	; (1bba8 <z_impl_k_yield+0x114>)
   1bab2:	f240 41a1 	movw	r1, #1185	; 0x4a1
   1bab6:	f002 f8d7 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1baba:	f04f 0340 	mov.w	r3, #64	; 0x40
   1babe:	f3ef 8611 	mrs	r6, BASEPRI
   1bac2:	f383 8812 	msr	BASEPRI_MAX, r3
   1bac6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1baca:	483a      	ldr	r0, [pc, #232]	; (1bbb4 <z_impl_k_yield+0x120>)
   1bacc:	f7fd fefa 	bl	198c4 <z_spin_lock_valid>
   1bad0:	b968      	cbnz	r0, 1baee <z_impl_k_yield+0x5a>
   1bad2:	4a39      	ldr	r2, [pc, #228]	; (1bbb8 <z_impl_k_yield+0x124>)
   1bad4:	4939      	ldr	r1, [pc, #228]	; (1bbbc <z_impl_k_yield+0x128>)
   1bad6:	4835      	ldr	r0, [pc, #212]	; (1bbac <z_impl_k_yield+0x118>)
   1bad8:	2381      	movs	r3, #129	; 0x81
   1bada:	f001 fe6b 	bl	1d7b4 <printk>
   1bade:	4935      	ldr	r1, [pc, #212]	; (1bbb4 <z_impl_k_yield+0x120>)
   1bae0:	4837      	ldr	r0, [pc, #220]	; (1bbc0 <z_impl_k_yield+0x12c>)
   1bae2:	f001 fe67 	bl	1d7b4 <printk>
   1bae6:	4834      	ldr	r0, [pc, #208]	; (1bbb8 <z_impl_k_yield+0x124>)
   1bae8:	2181      	movs	r1, #129	; 0x81
   1baea:	f002 f8bd 	bl	1dc68 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   1baee:	4d35      	ldr	r5, [pc, #212]	; (1bbc4 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
   1baf0:	4830      	ldr	r0, [pc, #192]	; (1bbb4 <z_impl_k_yield+0x120>)
   1baf2:	f7fd ff05 	bl	19900 <z_spin_lock_set_owner>
   1baf6:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1baf8:	7b4b      	ldrb	r3, [r1, #13]
   1bafa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bafe:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   1bb00:	f105 0020 	add.w	r0, r5, #32
   1bb04:	f7ff f9d2 	bl	1aeac <z_priq_dumb_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   1bb08:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1bb0a:	7b63      	ldrb	r3, [r4, #13]
   1bb0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1bb10:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1bb12:	4b2d      	ldr	r3, [pc, #180]	; (1bbc8 <z_impl_k_yield+0x134>)
   1bb14:	429c      	cmp	r4, r3
   1bb16:	d109      	bne.n	1bb2c <z_impl_k_yield+0x98>
   1bb18:	492c      	ldr	r1, [pc, #176]	; (1bbcc <z_impl_k_yield+0x138>)
   1bb1a:	4824      	ldr	r0, [pc, #144]	; (1bbac <z_impl_k_yield+0x118>)
   1bb1c:	4a22      	ldr	r2, [pc, #136]	; (1bba8 <z_impl_k_yield+0x114>)
   1bb1e:	23b1      	movs	r3, #177	; 0xb1
   1bb20:	f001 fe48 	bl	1d7b4 <printk>
   1bb24:	4820      	ldr	r0, [pc, #128]	; (1bba8 <z_impl_k_yield+0x114>)
   1bb26:	21b1      	movs	r1, #177	; 0xb1
   1bb28:	f002 f89e 	bl	1dc68 <assert_post_action>
	return list->head == list;
   1bb2c:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb2e:	4828      	ldr	r0, [pc, #160]	; (1bbd0 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bb30:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb32:	4283      	cmp	r3, r0
   1bb34:	bf08      	it	eq
   1bb36:	2300      	moveq	r3, #0
   1bb38:	2b00      	cmp	r3, #0
   1bb3a:	bf38      	it	cc
   1bb3c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bb3e:	b35b      	cbz	r3, 1bb98 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
   1bb40:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1bb44:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1bb48:	4297      	cmp	r7, r2
   1bb4a:	d021      	beq.n	1bb90 <z_impl_k_yield+0xfc>
		return b2 - b1;
   1bb4c:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1bb4e:	2a00      	cmp	r2, #0
   1bb50:	dd1e      	ble.n	1bb90 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
   1bb52:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1bb54:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1bb58:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1bb5a:	605c      	str	r4, [r3, #4]
	update_cache(1);
   1bb5c:	2001      	movs	r0, #1
   1bb5e:	f7ff fa35 	bl	1afcc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bb62:	4814      	ldr	r0, [pc, #80]	; (1bbb4 <z_impl_k_yield+0x120>)
   1bb64:	f7fd febc 	bl	198e0 <z_spin_unlock_valid>
   1bb68:	b968      	cbnz	r0, 1bb86 <z_impl_k_yield+0xf2>
   1bb6a:	4a13      	ldr	r2, [pc, #76]	; (1bbb8 <z_impl_k_yield+0x124>)
   1bb6c:	4919      	ldr	r1, [pc, #100]	; (1bbd4 <z_impl_k_yield+0x140>)
   1bb6e:	480f      	ldr	r0, [pc, #60]	; (1bbac <z_impl_k_yield+0x118>)
   1bb70:	23c3      	movs	r3, #195	; 0xc3
   1bb72:	f001 fe1f 	bl	1d7b4 <printk>
   1bb76:	490f      	ldr	r1, [pc, #60]	; (1bbb4 <z_impl_k_yield+0x120>)
   1bb78:	4817      	ldr	r0, [pc, #92]	; (1bbd8 <z_impl_k_yield+0x144>)
   1bb7a:	f001 fe1b 	bl	1d7b4 <printk>
   1bb7e:	480e      	ldr	r0, [pc, #56]	; (1bbb8 <z_impl_k_yield+0x124>)
   1bb80:	21c3      	movs	r1, #195	; 0xc3
   1bb82:	f002 f871 	bl	1dc68 <assert_post_action>
   1bb86:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   1bb88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1bb8c:	f7f5 bdc0 	b.w	11710 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1bb90:	428b      	cmp	r3, r1
   1bb92:	d001      	beq.n	1bb98 <z_impl_k_yield+0x104>
   1bb94:	681b      	ldr	r3, [r3, #0]
   1bb96:	e7d2      	b.n	1bb3e <z_impl_k_yield+0xaa>
	node->prev = tail;
   1bb98:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   1bb9c:	600c      	str	r4, [r1, #0]
	list->tail = node;
   1bb9e:	626c      	str	r4, [r5, #36]	; 0x24
}
   1bba0:	e7dc      	b.n	1bb5c <z_impl_k_yield+0xc8>
   1bba2:	bf00      	nop
   1bba4:	00022cd8 	.word	0x00022cd8
   1bba8:	00022fa0 	.word	0x00022fa0
   1bbac:	00021650 	.word	0x00021650
   1bbb0:	000224f9 	.word	0x000224f9
   1bbb4:	2000207c 	.word	0x2000207c
   1bbb8:	00021710 	.word	0x00021710
   1bbbc:	00021762 	.word	0x00021762
   1bbc0:	00021777 	.word	0x00021777
   1bbc4:	2000203c 	.word	0x2000203c
   1bbc8:	20001b40 	.word	0x20001b40
   1bbcc:	00022fc2 	.word	0x00022fc2
   1bbd0:	2000205c 	.word	0x2000205c
   1bbd4:	00021736 	.word	0x00021736
   1bbd8:	0002174d 	.word	0x0002174d

0001bbdc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1bbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bbe0:	4604      	mov	r4, r0
   1bbe2:	460d      	mov	r5, r1
   1bbe4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1bbe8:	b173      	cbz	r3, 1bc08 <z_tick_sleep+0x2c>
   1bbea:	4945      	ldr	r1, [pc, #276]	; (1bd00 <z_tick_sleep+0x124>)
   1bbec:	4a45      	ldr	r2, [pc, #276]	; (1bd04 <z_tick_sleep+0x128>)
   1bbee:	4846      	ldr	r0, [pc, #280]	; (1bd08 <z_tick_sleep+0x12c>)
   1bbf0:	f240 43be 	movw	r3, #1214	; 0x4be
   1bbf4:	f001 fdde 	bl	1d7b4 <printk>
   1bbf8:	4844      	ldr	r0, [pc, #272]	; (1bd0c <z_tick_sleep+0x130>)
   1bbfa:	f001 fddb 	bl	1d7b4 <printk>
   1bbfe:	4841      	ldr	r0, [pc, #260]	; (1bd04 <z_tick_sleep+0x128>)
   1bc00:	f240 41be 	movw	r1, #1214	; 0x4be
   1bc04:	f002 f830 	bl	1dc68 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1bc08:	ea54 0305 	orrs.w	r3, r4, r5
   1bc0c:	d104      	bne.n	1bc18 <z_tick_sleep+0x3c>
	z_impl_k_yield();
   1bc0e:	f7ff ff41 	bl	1ba94 <z_impl_k_yield>
		k_yield();
		return 0;
   1bc12:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1bc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   1bc18:	f06f 0301 	mvn.w	r3, #1
   1bc1c:	1b1e      	subs	r6, r3, r4
   1bc1e:	f04f 33ff 	mov.w	r3, #4294967295
   1bc22:	eb63 0705 	sbc.w	r7, r3, r5
   1bc26:	2e01      	cmp	r6, #1
   1bc28:	f177 0300 	sbcs.w	r3, r7, #0
   1bc2c:	da64      	bge.n	1bcf8 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1bc2e:	f004 fe69 	bl	20904 <sys_clock_tick_get_32>
   1bc32:	1906      	adds	r6, r0, r4
   1bc34:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bc38:	f3ef 8811 	mrs	r8, BASEPRI
   1bc3c:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bc44:	4832      	ldr	r0, [pc, #200]	; (1bd10 <z_tick_sleep+0x134>)
   1bc46:	f7fd fe3d 	bl	198c4 <z_spin_lock_valid>
   1bc4a:	b968      	cbnz	r0, 1bc68 <z_tick_sleep+0x8c>
   1bc4c:	4a31      	ldr	r2, [pc, #196]	; (1bd14 <z_tick_sleep+0x138>)
   1bc4e:	4932      	ldr	r1, [pc, #200]	; (1bd18 <z_tick_sleep+0x13c>)
   1bc50:	482d      	ldr	r0, [pc, #180]	; (1bd08 <z_tick_sleep+0x12c>)
   1bc52:	2381      	movs	r3, #129	; 0x81
   1bc54:	f001 fdae 	bl	1d7b4 <printk>
   1bc58:	492d      	ldr	r1, [pc, #180]	; (1bd10 <z_tick_sleep+0x134>)
   1bc5a:	4830      	ldr	r0, [pc, #192]	; (1bd1c <z_tick_sleep+0x140>)
   1bc5c:	f001 fdaa 	bl	1d7b4 <printk>
   1bc60:	482c      	ldr	r0, [pc, #176]	; (1bd14 <z_tick_sleep+0x138>)
   1bc62:	2181      	movs	r1, #129	; 0x81
   1bc64:	f002 f800 	bl	1dc68 <assert_post_action>
	pending_current = _current;
   1bc68:	4f2d      	ldr	r7, [pc, #180]	; (1bd20 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
   1bc6a:	4829      	ldr	r0, [pc, #164]	; (1bd10 <z_tick_sleep+0x134>)
   1bc6c:	f7fd fe48 	bl	19900 <z_spin_lock_set_owner>
   1bc70:	4b2c      	ldr	r3, [pc, #176]	; (1bd24 <z_tick_sleep+0x148>)
   1bc72:	68b8      	ldr	r0, [r7, #8]
   1bc74:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1bc76:	f7ff fbf7 	bl	1b468 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1bc7a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1bc7c:	492a      	ldr	r1, [pc, #168]	; (1bd28 <z_tick_sleep+0x14c>)
   1bc7e:	4622      	mov	r2, r4
   1bc80:	462b      	mov	r3, r5
   1bc82:	3018      	adds	r0, #24
   1bc84:	f000 fa2e 	bl	1c0e4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1bc88:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bc8a:	4821      	ldr	r0, [pc, #132]	; (1bd10 <z_tick_sleep+0x134>)
   1bc8c:	7b53      	ldrb	r3, [r2, #13]
   1bc8e:	f043 0310 	orr.w	r3, r3, #16
   1bc92:	7353      	strb	r3, [r2, #13]
   1bc94:	f7fd fe24 	bl	198e0 <z_spin_unlock_valid>
   1bc98:	b968      	cbnz	r0, 1bcb6 <z_tick_sleep+0xda>
   1bc9a:	4a1e      	ldr	r2, [pc, #120]	; (1bd14 <z_tick_sleep+0x138>)
   1bc9c:	4923      	ldr	r1, [pc, #140]	; (1bd2c <z_tick_sleep+0x150>)
   1bc9e:	481a      	ldr	r0, [pc, #104]	; (1bd08 <z_tick_sleep+0x12c>)
   1bca0:	23c3      	movs	r3, #195	; 0xc3
   1bca2:	f001 fd87 	bl	1d7b4 <printk>
   1bca6:	491a      	ldr	r1, [pc, #104]	; (1bd10 <z_tick_sleep+0x134>)
   1bca8:	4821      	ldr	r0, [pc, #132]	; (1bd30 <z_tick_sleep+0x154>)
   1bcaa:	f001 fd83 	bl	1d7b4 <printk>
   1bcae:	4819      	ldr	r0, [pc, #100]	; (1bd14 <z_tick_sleep+0x138>)
   1bcb0:	21c3      	movs	r1, #195	; 0xc3
   1bcb2:	f001 ffd9 	bl	1dc68 <assert_post_action>
   1bcb6:	4640      	mov	r0, r8
   1bcb8:	f7f5 fd2a 	bl	11710 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1bcbc:	68bb      	ldr	r3, [r7, #8]
   1bcbe:	7b5b      	ldrb	r3, [r3, #13]
   1bcc0:	06db      	lsls	r3, r3, #27
   1bcc2:	d50e      	bpl.n	1bce2 <z_tick_sleep+0x106>
   1bcc4:	491b      	ldr	r1, [pc, #108]	; (1bd34 <z_tick_sleep+0x158>)
   1bcc6:	4a0f      	ldr	r2, [pc, #60]	; (1bd04 <z_tick_sleep+0x128>)
   1bcc8:	480f      	ldr	r0, [pc, #60]	; (1bd08 <z_tick_sleep+0x12c>)
   1bcca:	f240 43df 	movw	r3, #1247	; 0x4df
   1bcce:	f001 fd71 	bl	1d7b4 <printk>
   1bcd2:	480e      	ldr	r0, [pc, #56]	; (1bd0c <z_tick_sleep+0x130>)
   1bcd4:	f001 fd6e 	bl	1d7b4 <printk>
   1bcd8:	480a      	ldr	r0, [pc, #40]	; (1bd04 <z_tick_sleep+0x128>)
   1bcda:	f240 41df 	movw	r1, #1247	; 0x4df
   1bcde:	f001 ffc3 	bl	1dc68 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1bce2:	f004 fe0f 	bl	20904 <sys_clock_tick_get_32>
   1bce6:	1a30      	subs	r0, r6, r0
   1bce8:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
   1bcec:	2801      	cmp	r0, #1
   1bcee:	f171 0300 	sbcs.w	r3, r1, #0
   1bcf2:	bfb8      	it	lt
   1bcf4:	2000      	movlt	r0, #0
   1bcf6:	e78d      	b.n	1bc14 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1bcf8:	f06f 0601 	mvn.w	r6, #1
   1bcfc:	1b36      	subs	r6, r6, r4
   1bcfe:	e799      	b.n	1bc34 <z_tick_sleep+0x58>
   1bd00:	00022cd8 	.word	0x00022cd8
   1bd04:	00022fa0 	.word	0x00022fa0
   1bd08:	00021650 	.word	0x00021650
   1bd0c:	000224f9 	.word	0x000224f9
   1bd10:	2000207c 	.word	0x2000207c
   1bd14:	00021710 	.word	0x00021710
   1bd18:	00021762 	.word	0x00021762
   1bd1c:	00021777 	.word	0x00021777
   1bd20:	2000203c 	.word	0x2000203c
   1bd24:	20002078 	.word	0x20002078
   1bd28:	0001b3b5 	.word	0x0001b3b5
   1bd2c:	00021736 	.word	0x00021736
   1bd30:	0002174d 	.word	0x0002174d
   1bd34:	00023052 	.word	0x00023052

0001bd38 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1bd38:	b538      	push	{r3, r4, r5, lr}
   1bd3a:	4604      	mov	r4, r0
   1bd3c:	460d      	mov	r5, r1
   1bd3e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1bd42:	b173      	cbz	r3, 1bd62 <z_impl_k_sleep+0x2a>
   1bd44:	4913      	ldr	r1, [pc, #76]	; (1bd94 <z_impl_k_sleep+0x5c>)
   1bd46:	4a14      	ldr	r2, [pc, #80]	; (1bd98 <z_impl_k_sleep+0x60>)
   1bd48:	4814      	ldr	r0, [pc, #80]	; (1bd9c <z_impl_k_sleep+0x64>)
   1bd4a:	f240 43ee 	movw	r3, #1262	; 0x4ee
   1bd4e:	f001 fd31 	bl	1d7b4 <printk>
   1bd52:	4813      	ldr	r0, [pc, #76]	; (1bda0 <z_impl_k_sleep+0x68>)
   1bd54:	f001 fd2e 	bl	1d7b4 <printk>
   1bd58:	480f      	ldr	r0, [pc, #60]	; (1bd98 <z_impl_k_sleep+0x60>)
   1bd5a:	f240 41ee 	movw	r1, #1262	; 0x4ee
   1bd5e:	f001 ff83 	bl	1dc68 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bd62:	1c6b      	adds	r3, r5, #1
   1bd64:	bf08      	it	eq
   1bd66:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1bd6a:	d106      	bne.n	1bd7a <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   1bd6c:	4b0d      	ldr	r3, [pc, #52]	; (1bda4 <z_impl_k_sleep+0x6c>)
   1bd6e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1bd70:	f7ff fd02 	bl	1b778 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1bd74:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1bd78:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   1bd7a:	4620      	mov	r0, r4
   1bd7c:	4629      	mov	r1, r5
   1bd7e:	f7ff ff2d 	bl	1bbdc <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1bd82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1bd86:	fb80 3403 	smull	r3, r4, r0, r3
   1bd8a:	0bd8      	lsrs	r0, r3, #15
   1bd8c:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   1bd90:	e7f2      	b.n	1bd78 <z_impl_k_sleep+0x40>
   1bd92:	bf00      	nop
   1bd94:	00022cd8 	.word	0x00022cd8
   1bd98:	00022fa0 	.word	0x00022fa0
   1bd9c:	00021650 	.word	0x00021650
   1bda0:	000224f9 	.word	0x000224f9
   1bda4:	2000203c 	.word	0x2000203c

0001bda8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1bda8:	4b01      	ldr	r3, [pc, #4]	; (1bdb0 <z_impl_z_current_get+0x8>)
   1bdaa:	6898      	ldr	r0, [r3, #8]
   1bdac:	4770      	bx	lr
   1bdae:	bf00      	nop
   1bdb0:	2000203c 	.word	0x2000203c

0001bdb4 <z_impl_k_is_preempt_thread>:
   1bdb4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1bdb8:	b93b      	cbnz	r3, 1bdca <z_impl_k_is_preempt_thread+0x16>
   1bdba:	4b05      	ldr	r3, [pc, #20]	; (1bdd0 <z_impl_k_is_preempt_thread+0x1c>)
   1bdbc:	689b      	ldr	r3, [r3, #8]
   1bdbe:	89d8      	ldrh	r0, [r3, #14]
   1bdc0:	287f      	cmp	r0, #127	; 0x7f
   1bdc2:	bf8c      	ite	hi
   1bdc4:	2000      	movhi	r0, #0
   1bdc6:	2001      	movls	r0, #1
   1bdc8:	4770      	bx	lr
   1bdca:	2000      	movs	r0, #0
}
   1bdcc:	4770      	bx	lr
   1bdce:	bf00      	nop
   1bdd0:	2000203c 	.word	0x2000203c

0001bdd4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1bdd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bdd8:	4604      	mov	r4, r0
   1bdda:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bdde:	f3ef 8611 	mrs	r6, BASEPRI
   1bde2:	f383 8812 	msr	BASEPRI_MAX, r3
   1bde6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bdea:	4848      	ldr	r0, [pc, #288]	; (1bf0c <z_thread_abort+0x138>)
   1bdec:	f7fd fd6a 	bl	198c4 <z_spin_lock_valid>
   1bdf0:	b968      	cbnz	r0, 1be0e <z_thread_abort+0x3a>
   1bdf2:	4a47      	ldr	r2, [pc, #284]	; (1bf10 <z_thread_abort+0x13c>)
   1bdf4:	4947      	ldr	r1, [pc, #284]	; (1bf14 <z_thread_abort+0x140>)
   1bdf6:	4848      	ldr	r0, [pc, #288]	; (1bf18 <z_thread_abort+0x144>)
   1bdf8:	2381      	movs	r3, #129	; 0x81
   1bdfa:	f001 fcdb 	bl	1d7b4 <printk>
   1bdfe:	4943      	ldr	r1, [pc, #268]	; (1bf0c <z_thread_abort+0x138>)
   1be00:	4846      	ldr	r0, [pc, #280]	; (1bf1c <z_thread_abort+0x148>)
   1be02:	f001 fcd7 	bl	1d7b4 <printk>
   1be06:	4842      	ldr	r0, [pc, #264]	; (1bf10 <z_thread_abort+0x13c>)
   1be08:	2181      	movs	r1, #129	; 0x81
   1be0a:	f001 ff2d 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1be0e:	483f      	ldr	r0, [pc, #252]	; (1bf0c <z_thread_abort+0x138>)
   1be10:	f7fd fd76 	bl	19900 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1be14:	7b63      	ldrb	r3, [r4, #13]
   1be16:	071a      	lsls	r2, r3, #28
   1be18:	d517      	bpl.n	1be4a <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1be1a:	483c      	ldr	r0, [pc, #240]	; (1bf0c <z_thread_abort+0x138>)
   1be1c:	f7fd fd60 	bl	198e0 <z_spin_unlock_valid>
   1be20:	b968      	cbnz	r0, 1be3e <z_thread_abort+0x6a>
   1be22:	4a3b      	ldr	r2, [pc, #236]	; (1bf10 <z_thread_abort+0x13c>)
   1be24:	493e      	ldr	r1, [pc, #248]	; (1bf20 <z_thread_abort+0x14c>)
   1be26:	483c      	ldr	r0, [pc, #240]	; (1bf18 <z_thread_abort+0x144>)
   1be28:	23ac      	movs	r3, #172	; 0xac
   1be2a:	f001 fcc3 	bl	1d7b4 <printk>
   1be2e:	4937      	ldr	r1, [pc, #220]	; (1bf0c <z_thread_abort+0x138>)
   1be30:	483c      	ldr	r0, [pc, #240]	; (1bf24 <z_thread_abort+0x150>)
   1be32:	f001 fcbf 	bl	1d7b4 <printk>
   1be36:	4836      	ldr	r0, [pc, #216]	; (1bf10 <z_thread_abort+0x13c>)
   1be38:	21ac      	movs	r1, #172	; 0xac
   1be3a:	f001 ff15 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1be3e:	f386 8811 	msr	BASEPRI, r6
   1be42:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1be46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1be4a:	f023 0220 	bic.w	r2, r3, #32
   1be4e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1be52:	09d2      	lsrs	r2, r2, #7
   1be54:	d142      	bne.n	1bedc <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1be56:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   1be58:	68a3      	ldr	r3, [r4, #8]
   1be5a:	b113      	cbz	r3, 1be62 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   1be5c:	4620      	mov	r0, r4
   1be5e:	f7ff f847 	bl	1aef0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1be62:	f104 0018 	add.w	r0, r4, #24
   1be66:	f000 fa11 	bl	1c28c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1be6a:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1be6e:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1be72:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1be74:	42bd      	cmp	r5, r7
   1be76:	d001      	beq.n	1be7c <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1be78:	2d00      	cmp	r5, #0
   1be7a:	d139      	bne.n	1bef0 <z_thread_abort+0x11c>
		update_cache(1);
   1be7c:	2001      	movs	r0, #1
   1be7e:	f7ff f8a5 	bl	1afcc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1be82:	4b29      	ldr	r3, [pc, #164]	; (1bf28 <z_thread_abort+0x154>)
   1be84:	689b      	ldr	r3, [r3, #8]
   1be86:	42a3      	cmp	r3, r4
   1be88:	d1c7      	bne.n	1be1a <z_thread_abort+0x46>
   1be8a:	f3ef 8305 	mrs	r3, IPSR
   1be8e:	2b00      	cmp	r3, #0
   1be90:	d1c3      	bne.n	1be1a <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1be92:	481e      	ldr	r0, [pc, #120]	; (1bf0c <z_thread_abort+0x138>)
   1be94:	f7fd fd24 	bl	198e0 <z_spin_unlock_valid>
   1be98:	b968      	cbnz	r0, 1beb6 <z_thread_abort+0xe2>
   1be9a:	4a1d      	ldr	r2, [pc, #116]	; (1bf10 <z_thread_abort+0x13c>)
   1be9c:	4920      	ldr	r1, [pc, #128]	; (1bf20 <z_thread_abort+0x14c>)
   1be9e:	481e      	ldr	r0, [pc, #120]	; (1bf18 <z_thread_abort+0x144>)
   1bea0:	23c3      	movs	r3, #195	; 0xc3
   1bea2:	f001 fc87 	bl	1d7b4 <printk>
   1bea6:	4919      	ldr	r1, [pc, #100]	; (1bf0c <z_thread_abort+0x138>)
   1bea8:	481e      	ldr	r0, [pc, #120]	; (1bf24 <z_thread_abort+0x150>)
   1beaa:	f001 fc83 	bl	1d7b4 <printk>
   1beae:	4818      	ldr	r0, [pc, #96]	; (1bf10 <z_thread_abort+0x13c>)
   1beb0:	21c3      	movs	r1, #195	; 0xc3
   1beb2:	f001 fed9 	bl	1dc68 <assert_post_action>
   1beb6:	4630      	mov	r0, r6
   1beb8:	f7f5 fc2a 	bl	11710 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   1bebc:	4a1b      	ldr	r2, [pc, #108]	; (1bf2c <z_thread_abort+0x158>)
   1bebe:	491c      	ldr	r1, [pc, #112]	; (1bf30 <z_thread_abort+0x15c>)
   1bec0:	4815      	ldr	r0, [pc, #84]	; (1bf18 <z_thread_abort+0x144>)
   1bec2:	f240 6309 	movw	r3, #1545	; 0x609
   1bec6:	f001 fc75 	bl	1d7b4 <printk>
   1beca:	481a      	ldr	r0, [pc, #104]	; (1bf34 <z_thread_abort+0x160>)
   1becc:	f001 fc72 	bl	1d7b4 <printk>
   1bed0:	4816      	ldr	r0, [pc, #88]	; (1bf2c <z_thread_abort+0x158>)
   1bed2:	f240 6109 	movw	r1, #1545	; 0x609
   1bed6:	f001 fec7 	bl	1dc68 <assert_post_action>
   1beda:	e79e      	b.n	1be1a <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bedc:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1bee0:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
   1bee4:	4814      	ldr	r0, [pc, #80]	; (1bf38 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bee6:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   1bee8:	4621      	mov	r1, r4
   1beea:	f7fe ffdf 	bl	1aeac <z_priq_dumb_remove>
}
   1beee:	e7b3      	b.n	1be58 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   1bef0:	4628      	mov	r0, r5
   1bef2:	f7fe fffd 	bl	1aef0 <unpend_thread_no_timeout>
   1bef6:	f105 0018 	add.w	r0, r5, #24
   1befa:	f000 f9c7 	bl	1c28c <z_abort_timeout>
   1befe:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1bf02:	4628      	mov	r0, r5
   1bf04:	f7ff f968 	bl	1b1d8 <ready_thread>
   1bf08:	e7b3      	b.n	1be72 <z_thread_abort+0x9e>
   1bf0a:	bf00      	nop
   1bf0c:	2000207c 	.word	0x2000207c
   1bf10:	00021710 	.word	0x00021710
   1bf14:	00021762 	.word	0x00021762
   1bf18:	00021650 	.word	0x00021650
   1bf1c:	00021777 	.word	0x00021777
   1bf20:	00021736 	.word	0x00021736
   1bf24:	0002174d 	.word	0x0002174d
   1bf28:	2000203c 	.word	0x2000203c
   1bf2c:	00022fa0 	.word	0x00022fa0
   1bf30:	00023382 	.word	0x00023382
   1bf34:	00023092 	.word	0x00023092
   1bf38:	2000205c 	.word	0x2000205c

0001bf3c <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   1bf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bf3e:	4604      	mov	r4, r0
   1bf40:	460e      	mov	r6, r1
   1bf42:	4615      	mov	r5, r2
	__asm__ volatile(
   1bf44:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bf48:	f3ef 8711 	mrs	r7, BASEPRI
   1bf4c:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bf54:	481e      	ldr	r0, [pc, #120]	; (1bfd0 <z_sched_wake+0x94>)
   1bf56:	f7fd fcb5 	bl	198c4 <z_spin_lock_valid>
   1bf5a:	b968      	cbnz	r0, 1bf78 <z_sched_wake+0x3c>
   1bf5c:	4a1d      	ldr	r2, [pc, #116]	; (1bfd4 <z_sched_wake+0x98>)
   1bf5e:	491e      	ldr	r1, [pc, #120]	; (1bfd8 <z_sched_wake+0x9c>)
   1bf60:	481e      	ldr	r0, [pc, #120]	; (1bfdc <z_sched_wake+0xa0>)
   1bf62:	2381      	movs	r3, #129	; 0x81
   1bf64:	f001 fc26 	bl	1d7b4 <printk>
   1bf68:	4919      	ldr	r1, [pc, #100]	; (1bfd0 <z_sched_wake+0x94>)
   1bf6a:	481d      	ldr	r0, [pc, #116]	; (1bfe0 <z_sched_wake+0xa4>)
   1bf6c:	f001 fc22 	bl	1d7b4 <printk>
   1bf70:	4818      	ldr	r0, [pc, #96]	; (1bfd4 <z_sched_wake+0x98>)
   1bf72:	2181      	movs	r1, #129	; 0x81
   1bf74:	f001 fe78 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bf78:	4815      	ldr	r0, [pc, #84]	; (1bfd0 <z_sched_wake+0x94>)
   1bf7a:	f7fd fcc1 	bl	19900 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   1bf7e:	4620      	mov	r0, r4
   1bf80:	f004 fca6 	bl	208d0 <z_priq_dumb_best>

		if (thread != NULL) {
   1bf84:	4604      	mov	r4, r0
   1bf86:	b158      	cbz	r0, 1bfa0 <z_sched_wake+0x64>
   1bf88:	67c6      	str	r6, [r0, #124]	; 0x7c
   1bf8a:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   1bf8c:	f7fe ffb0 	bl	1aef0 <unpend_thread_no_timeout>
   1bf90:	f104 0018 	add.w	r0, r4, #24
   1bf94:	f000 f97a 	bl	1c28c <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   1bf98:	4620      	mov	r0, r4
   1bf9a:	f7ff f91d 	bl	1b1d8 <ready_thread>
			ret = true;
   1bf9e:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bfa0:	480b      	ldr	r0, [pc, #44]	; (1bfd0 <z_sched_wake+0x94>)
   1bfa2:	f7fd fc9d 	bl	198e0 <z_spin_unlock_valid>
   1bfa6:	b968      	cbnz	r0, 1bfc4 <z_sched_wake+0x88>
   1bfa8:	4a0a      	ldr	r2, [pc, #40]	; (1bfd4 <z_sched_wake+0x98>)
   1bfaa:	490e      	ldr	r1, [pc, #56]	; (1bfe4 <z_sched_wake+0xa8>)
   1bfac:	480b      	ldr	r0, [pc, #44]	; (1bfdc <z_sched_wake+0xa0>)
   1bfae:	23ac      	movs	r3, #172	; 0xac
   1bfb0:	f001 fc00 	bl	1d7b4 <printk>
   1bfb4:	4906      	ldr	r1, [pc, #24]	; (1bfd0 <z_sched_wake+0x94>)
   1bfb6:	480c      	ldr	r0, [pc, #48]	; (1bfe8 <z_sched_wake+0xac>)
   1bfb8:	f001 fbfc 	bl	1d7b4 <printk>
   1bfbc:	4805      	ldr	r0, [pc, #20]	; (1bfd4 <z_sched_wake+0x98>)
   1bfbe:	21ac      	movs	r1, #172	; 0xac
   1bfc0:	f001 fe52 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1bfc4:	f387 8811 	msr	BASEPRI, r7
   1bfc8:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1bfcc:	4620      	mov	r0, r4
   1bfce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bfd0:	2000207c 	.word	0x2000207c
   1bfd4:	00021710 	.word	0x00021710
   1bfd8:	00021762 	.word	0x00021762
   1bfdc:	00021650 	.word	0x00021650
   1bfe0:	00021777 	.word	0x00021777
   1bfe4:	00021736 	.word	0x00021736
   1bfe8:	0002174d 	.word	0x0002174d

0001bfec <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1bfec:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1bfee:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1bff2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1bff4:	e9cd 6700 	strd	r6, r7, [sp]
   1bff8:	f7ff faf2 	bl	1b5e0 <z_pend_curr>

	if (data != NULL) {
   1bffc:	b11c      	cbz	r4, 1c006 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1bffe:	4b03      	ldr	r3, [pc, #12]	; (1c00c <z_sched_wait+0x20>)
   1c000:	689b      	ldr	r3, [r3, #8]
   1c002:	695b      	ldr	r3, [r3, #20]
   1c004:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1c006:	b002      	add	sp, #8
   1c008:	bdd0      	pop	{r4, r6, r7, pc}
   1c00a:	bf00      	nop
   1c00c:	2000203c 	.word	0x2000203c

0001c010 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1c010:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c012:	4806      	ldr	r0, [pc, #24]	; (1c02c <z_data_copy+0x1c>)
   1c014:	4a06      	ldr	r2, [pc, #24]	; (1c030 <z_data_copy+0x20>)
   1c016:	4907      	ldr	r1, [pc, #28]	; (1c034 <z_data_copy+0x24>)
   1c018:	1a12      	subs	r2, r2, r0
   1c01a:	f004 fd26 	bl	20a6a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1c01e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1c022:	4a05      	ldr	r2, [pc, #20]	; (1c038 <z_data_copy+0x28>)
   1c024:	4905      	ldr	r1, [pc, #20]	; (1c03c <z_data_copy+0x2c>)
   1c026:	4806      	ldr	r0, [pc, #24]	; (1c040 <z_data_copy+0x30>)
   1c028:	f004 bd1f 	b.w	20a6a <memcpy>
   1c02c:	20000000 	.word	0x20000000
   1c030:	200007dc 	.word	0x200007dc
   1c034:	00023514 	.word	0x00023514
   1c038:	00000000 	.word	0x00000000
   1c03c:	00023514 	.word	0x00023514
   1c040:	20000000 	.word	0x20000000

0001c044 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1c044:	4b03      	ldr	r3, [pc, #12]	; (1c054 <elapsed+0x10>)
   1c046:	681b      	ldr	r3, [r3, #0]
   1c048:	b90b      	cbnz	r3, 1c04e <elapsed+0xa>
   1c04a:	f7fb bf41 	b.w	17ed0 <sys_clock_elapsed>
}
   1c04e:	2000      	movs	r0, #0
   1c050:	4770      	bx	lr
   1c052:	bf00      	nop
   1c054:	20002088 	.word	0x20002088

0001c058 <next_timeout>:

static int32_t next_timeout(void)
{
   1c058:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1c05a:	4b13      	ldr	r3, [pc, #76]	; (1c0a8 <next_timeout+0x50>)
   1c05c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c05e:	429c      	cmp	r4, r3
   1c060:	bf08      	it	eq
   1c062:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1c064:	f7ff ffee 	bl	1c044 <elapsed>
   1c068:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1c06a:	b1bc      	cbz	r4, 1c09c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1c06c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1c070:	1b40      	subs	r0, r0, r5
   1c072:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1c076:	2801      	cmp	r0, #1
   1c078:	f171 0300 	sbcs.w	r3, r1, #0
   1c07c:	db11      	blt.n	1c0a2 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1c07e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1c082:	2300      	movs	r3, #0
   1c084:	4282      	cmp	r2, r0
   1c086:	eb73 0401 	sbcs.w	r4, r3, r1
   1c08a:	da00      	bge.n	1c08e <next_timeout+0x36>
   1c08c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1c08e:	4b07      	ldr	r3, [pc, #28]	; (1c0ac <next_timeout+0x54>)
   1c090:	691b      	ldr	r3, [r3, #16]
   1c092:	b113      	cbz	r3, 1c09a <next_timeout+0x42>
   1c094:	4298      	cmp	r0, r3
   1c096:	bfa8      	it	ge
   1c098:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1c09a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1c09c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1c0a0:	e7f5      	b.n	1c08e <next_timeout+0x36>
   1c0a2:	2000      	movs	r0, #0
   1c0a4:	e7f3      	b.n	1c08e <next_timeout+0x36>
   1c0a6:	bf00      	nop
   1c0a8:	200004fc 	.word	0x200004fc
   1c0ac:	2000203c 	.word	0x2000203c

0001c0b0 <remove_timeout>:
{
   1c0b0:	b530      	push	{r4, r5, lr}
   1c0b2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c0b4:	b168      	cbz	r0, 1c0d2 <remove_timeout+0x22>
   1c0b6:	4a0a      	ldr	r2, [pc, #40]	; (1c0e0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1c0b8:	6852      	ldr	r2, [r2, #4]
   1c0ba:	4290      	cmp	r0, r2
   1c0bc:	d009      	beq.n	1c0d2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1c0be:	b143      	cbz	r3, 1c0d2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1c0c0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1c0c4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1c0c8:	1912      	adds	r2, r2, r4
   1c0ca:	eb45 0101 	adc.w	r1, r5, r1
   1c0ce:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   1c0d2:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   1c0d4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c0d6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c0d8:	2300      	movs	r3, #0
	node->prev = NULL;
   1c0da:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c0de:	bd30      	pop	{r4, r5, pc}
   1c0e0:	200004fc 	.word	0x200004fc

0001c0e4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1c0e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0e8:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c0ea:	1c6b      	adds	r3, r5, #1
   1c0ec:	bf08      	it	eq
   1c0ee:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1c0f2:	4682      	mov	sl, r0
   1c0f4:	468b      	mov	fp, r1
   1c0f6:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c0f8:	f000 80aa 	beq.w	1c250 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1c0fc:	6803      	ldr	r3, [r0, #0]
   1c0fe:	b163      	cbz	r3, 1c11a <z_add_timeout+0x36>
   1c100:	4955      	ldr	r1, [pc, #340]	; (1c258 <z_add_timeout+0x174>)
   1c102:	4a56      	ldr	r2, [pc, #344]	; (1c25c <z_add_timeout+0x178>)
   1c104:	4856      	ldr	r0, [pc, #344]	; (1c260 <z_add_timeout+0x17c>)
   1c106:	235d      	movs	r3, #93	; 0x5d
   1c108:	f001 fb54 	bl	1d7b4 <printk>
   1c10c:	4855      	ldr	r0, [pc, #340]	; (1c264 <z_add_timeout+0x180>)
   1c10e:	f001 fb51 	bl	1d7b4 <printk>
   1c112:	4852      	ldr	r0, [pc, #328]	; (1c25c <z_add_timeout+0x178>)
   1c114:	215d      	movs	r1, #93	; 0x5d
   1c116:	f001 fda7 	bl	1dc68 <assert_post_action>
	to->fn = fn;
   1c11a:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   1c11e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c122:	f3ef 8b11 	mrs	fp, BASEPRI
   1c126:	f383 8812 	msr	BASEPRI_MAX, r3
   1c12a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c12e:	484e      	ldr	r0, [pc, #312]	; (1c268 <z_add_timeout+0x184>)
   1c130:	f7fd fbc8 	bl	198c4 <z_spin_lock_valid>
   1c134:	b968      	cbnz	r0, 1c152 <z_add_timeout+0x6e>
   1c136:	4a4d      	ldr	r2, [pc, #308]	; (1c26c <z_add_timeout+0x188>)
   1c138:	494d      	ldr	r1, [pc, #308]	; (1c270 <z_add_timeout+0x18c>)
   1c13a:	4849      	ldr	r0, [pc, #292]	; (1c260 <z_add_timeout+0x17c>)
   1c13c:	2381      	movs	r3, #129	; 0x81
   1c13e:	f001 fb39 	bl	1d7b4 <printk>
   1c142:	4949      	ldr	r1, [pc, #292]	; (1c268 <z_add_timeout+0x184>)
   1c144:	484b      	ldr	r0, [pc, #300]	; (1c274 <z_add_timeout+0x190>)
   1c146:	f001 fb35 	bl	1d7b4 <printk>
   1c14a:	4848      	ldr	r0, [pc, #288]	; (1c26c <z_add_timeout+0x188>)
   1c14c:	2181      	movs	r1, #129	; 0x81
   1c14e:	f001 fd8b 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c152:	4845      	ldr	r0, [pc, #276]	; (1c268 <z_add_timeout+0x184>)
   1c154:	f7fd fbd4 	bl	19900 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1c158:	f06f 0301 	mvn.w	r3, #1
   1c15c:	ebb3 0804 	subs.w	r8, r3, r4
   1c160:	f04f 32ff 	mov.w	r2, #4294967295
   1c164:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1c168:	f1b8 0f00 	cmp.w	r8, #0
   1c16c:	f179 0100 	sbcs.w	r1, r9, #0
   1c170:	db1c      	blt.n	1c1ac <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1c172:	4841      	ldr	r0, [pc, #260]	; (1c278 <z_add_timeout+0x194>)
   1c174:	e9d0 1000 	ldrd	r1, r0, [r0]
   1c178:	1a5b      	subs	r3, r3, r1
   1c17a:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   1c17e:	1b1e      	subs	r6, r3, r4
   1c180:	eb62 0705 	sbc.w	r7, r2, r5
   1c184:	2e01      	cmp	r6, #1
   1c186:	f177 0300 	sbcs.w	r3, r7, #0
   1c18a:	bfbc      	itt	lt
   1c18c:	2601      	movlt	r6, #1
   1c18e:	2700      	movlt	r7, #0
   1c190:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   1c194:	4a39      	ldr	r2, [pc, #228]	; (1c27c <z_add_timeout+0x198>)
   1c196:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c19a:	4293      	cmp	r3, r2
   1c19c:	d11d      	bne.n	1c1da <z_add_timeout+0xf6>
	node->prev = tail;
   1c19e:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   1c1a2:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   1c1a6:	f8c2 a004 	str.w	sl, [r2, #4]
}
   1c1aa:	e02c      	b.n	1c206 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1c1ac:	f7ff ff4a 	bl	1c044 <elapsed>
   1c1b0:	1c63      	adds	r3, r4, #1
   1c1b2:	9300      	str	r3, [sp, #0]
   1c1b4:	f145 0300 	adc.w	r3, r5, #0
   1c1b8:	9301      	str	r3, [sp, #4]
   1c1ba:	e9dd 2300 	ldrd	r2, r3, [sp]
   1c1be:	1812      	adds	r2, r2, r0
   1c1c0:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   1c1c4:	e9ca 2304 	strd	r2, r3, [sl, #16]
   1c1c8:	e7e4      	b.n	1c194 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1c1ca:	1be0      	subs	r0, r4, r7
   1c1cc:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   1c1d0:	42b3      	cmp	r3, r6
   1c1d2:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1c1d6:	d0e2      	beq.n	1c19e <z_add_timeout+0xba>
   1c1d8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1c1da:	2b00      	cmp	r3, #0
   1c1dc:	d0df      	beq.n	1c19e <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   1c1de:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   1c1e2:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1c1e6:	42bc      	cmp	r4, r7
   1c1e8:	eb75 0108 	sbcs.w	r1, r5, r8
   1c1ec:	daed      	bge.n	1c1ca <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
   1c1ee:	1b38      	subs	r0, r7, r4
   1c1f0:	eb68 0105 	sbc.w	r1, r8, r5
   1c1f4:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1c1f8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1c1fa:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   1c1fe:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1c202:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   1c206:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c208:	4293      	cmp	r3, r2
   1c20a:	d00b      	beq.n	1c224 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1c20c:	459a      	cmp	sl, r3
   1c20e:	d109      	bne.n	1c224 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1c210:	f7ff ff22 	bl	1c058 <next_timeout>

			if (next_time == 0 ||
   1c214:	b118      	cbz	r0, 1c21e <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
   1c216:	4b1a      	ldr	r3, [pc, #104]	; (1c280 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
   1c218:	691b      	ldr	r3, [r3, #16]
   1c21a:	4283      	cmp	r3, r0
   1c21c:	d002      	beq.n	1c224 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
   1c21e:	2100      	movs	r1, #0
   1c220:	f7fb fe26 	bl	17e70 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c224:	4810      	ldr	r0, [pc, #64]	; (1c268 <z_add_timeout+0x184>)
   1c226:	f7fd fb5b 	bl	198e0 <z_spin_unlock_valid>
   1c22a:	b968      	cbnz	r0, 1c248 <z_add_timeout+0x164>
   1c22c:	4a0f      	ldr	r2, [pc, #60]	; (1c26c <z_add_timeout+0x188>)
   1c22e:	4915      	ldr	r1, [pc, #84]	; (1c284 <z_add_timeout+0x1a0>)
   1c230:	480b      	ldr	r0, [pc, #44]	; (1c260 <z_add_timeout+0x17c>)
   1c232:	23ac      	movs	r3, #172	; 0xac
   1c234:	f001 fabe 	bl	1d7b4 <printk>
   1c238:	490b      	ldr	r1, [pc, #44]	; (1c268 <z_add_timeout+0x184>)
   1c23a:	4813      	ldr	r0, [pc, #76]	; (1c288 <z_add_timeout+0x1a4>)
   1c23c:	f001 faba 	bl	1d7b4 <printk>
   1c240:	480a      	ldr	r0, [pc, #40]	; (1c26c <z_add_timeout+0x188>)
   1c242:	21ac      	movs	r1, #172	; 0xac
   1c244:	f001 fd10 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1c248:	f38b 8811 	msr	BASEPRI, fp
   1c24c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1c250:	b003      	add	sp, #12
   1c252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c256:	bf00      	nop
   1c258:	000230d8 	.word	0x000230d8
   1c25c:	000230b4 	.word	0x000230b4
   1c260:	00021650 	.word	0x00021650
   1c264:	000224f9 	.word	0x000224f9
   1c268:	2000208c 	.word	0x2000208c
   1c26c:	00021710 	.word	0x00021710
   1c270:	00021762 	.word	0x00021762
   1c274:	00021777 	.word	0x00021777
   1c278:	20001ce0 	.word	0x20001ce0
   1c27c:	200004fc 	.word	0x200004fc
   1c280:	2000203c 	.word	0x2000203c
   1c284:	00021736 	.word	0x00021736
   1c288:	0002174d 	.word	0x0002174d

0001c28c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   1c28c:	b538      	push	{r3, r4, r5, lr}
   1c28e:	4604      	mov	r4, r0
	__asm__ volatile(
   1c290:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c294:	f3ef 8511 	mrs	r5, BASEPRI
   1c298:	f383 8812 	msr	BASEPRI_MAX, r3
   1c29c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c2a0:	481a      	ldr	r0, [pc, #104]	; (1c30c <z_abort_timeout+0x80>)
   1c2a2:	f7fd fb0f 	bl	198c4 <z_spin_lock_valid>
   1c2a6:	b968      	cbnz	r0, 1c2c4 <z_abort_timeout+0x38>
   1c2a8:	4a19      	ldr	r2, [pc, #100]	; (1c310 <z_abort_timeout+0x84>)
   1c2aa:	491a      	ldr	r1, [pc, #104]	; (1c314 <z_abort_timeout+0x88>)
   1c2ac:	481a      	ldr	r0, [pc, #104]	; (1c318 <z_abort_timeout+0x8c>)
   1c2ae:	2381      	movs	r3, #129	; 0x81
   1c2b0:	f001 fa80 	bl	1d7b4 <printk>
   1c2b4:	4915      	ldr	r1, [pc, #84]	; (1c30c <z_abort_timeout+0x80>)
   1c2b6:	4819      	ldr	r0, [pc, #100]	; (1c31c <z_abort_timeout+0x90>)
   1c2b8:	f001 fa7c 	bl	1d7b4 <printk>
   1c2bc:	4814      	ldr	r0, [pc, #80]	; (1c310 <z_abort_timeout+0x84>)
   1c2be:	2181      	movs	r1, #129	; 0x81
   1c2c0:	f001 fcd2 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c2c4:	4811      	ldr	r0, [pc, #68]	; (1c30c <z_abort_timeout+0x80>)
   1c2c6:	f7fd fb1b 	bl	19900 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   1c2ca:	6823      	ldr	r3, [r4, #0]
   1c2cc:	b1db      	cbz	r3, 1c306 <z_abort_timeout+0x7a>
			remove_timeout(to);
   1c2ce:	4620      	mov	r0, r4
   1c2d0:	f7ff feee 	bl	1c0b0 <remove_timeout>
			ret = 0;
   1c2d4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c2d6:	480d      	ldr	r0, [pc, #52]	; (1c30c <z_abort_timeout+0x80>)
   1c2d8:	f7fd fb02 	bl	198e0 <z_spin_unlock_valid>
   1c2dc:	b968      	cbnz	r0, 1c2fa <z_abort_timeout+0x6e>
   1c2de:	4a0c      	ldr	r2, [pc, #48]	; (1c310 <z_abort_timeout+0x84>)
   1c2e0:	490f      	ldr	r1, [pc, #60]	; (1c320 <z_abort_timeout+0x94>)
   1c2e2:	480d      	ldr	r0, [pc, #52]	; (1c318 <z_abort_timeout+0x8c>)
   1c2e4:	23ac      	movs	r3, #172	; 0xac
   1c2e6:	f001 fa65 	bl	1d7b4 <printk>
   1c2ea:	4908      	ldr	r1, [pc, #32]	; (1c30c <z_abort_timeout+0x80>)
   1c2ec:	480d      	ldr	r0, [pc, #52]	; (1c324 <z_abort_timeout+0x98>)
   1c2ee:	f001 fa61 	bl	1d7b4 <printk>
   1c2f2:	4807      	ldr	r0, [pc, #28]	; (1c310 <z_abort_timeout+0x84>)
   1c2f4:	21ac      	movs	r1, #172	; 0xac
   1c2f6:	f001 fcb7 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1c2fa:	f385 8811 	msr	BASEPRI, r5
   1c2fe:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1c302:	4620      	mov	r0, r4
   1c304:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   1c306:	f06f 0415 	mvn.w	r4, #21
   1c30a:	e7e4      	b.n	1c2d6 <z_abort_timeout+0x4a>
   1c30c:	2000208c 	.word	0x2000208c
   1c310:	00021710 	.word	0x00021710
   1c314:	00021762 	.word	0x00021762
   1c318:	00021650 	.word	0x00021650
   1c31c:	00021777 	.word	0x00021777
   1c320:	00021736 	.word	0x00021736
   1c324:	0002174d 	.word	0x0002174d

0001c328 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   1c328:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1c32a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c32e:	f3ef 8511 	mrs	r5, BASEPRI
   1c332:	f383 8812 	msr	BASEPRI_MAX, r3
   1c336:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c33a:	4818      	ldr	r0, [pc, #96]	; (1c39c <z_get_next_timeout_expiry+0x74>)
   1c33c:	f7fd fac2 	bl	198c4 <z_spin_lock_valid>
   1c340:	b968      	cbnz	r0, 1c35e <z_get_next_timeout_expiry+0x36>
   1c342:	4a17      	ldr	r2, [pc, #92]	; (1c3a0 <z_get_next_timeout_expiry+0x78>)
   1c344:	4917      	ldr	r1, [pc, #92]	; (1c3a4 <z_get_next_timeout_expiry+0x7c>)
   1c346:	4818      	ldr	r0, [pc, #96]	; (1c3a8 <z_get_next_timeout_expiry+0x80>)
   1c348:	2381      	movs	r3, #129	; 0x81
   1c34a:	f001 fa33 	bl	1d7b4 <printk>
   1c34e:	4913      	ldr	r1, [pc, #76]	; (1c39c <z_get_next_timeout_expiry+0x74>)
   1c350:	4816      	ldr	r0, [pc, #88]	; (1c3ac <z_get_next_timeout_expiry+0x84>)
   1c352:	f001 fa2f 	bl	1d7b4 <printk>
   1c356:	4812      	ldr	r0, [pc, #72]	; (1c3a0 <z_get_next_timeout_expiry+0x78>)
   1c358:	2181      	movs	r1, #129	; 0x81
   1c35a:	f001 fc85 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c35e:	480f      	ldr	r0, [pc, #60]	; (1c39c <z_get_next_timeout_expiry+0x74>)
   1c360:	f7fd face 	bl	19900 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1c364:	f7ff fe78 	bl	1c058 <next_timeout>
   1c368:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c36a:	480c      	ldr	r0, [pc, #48]	; (1c39c <z_get_next_timeout_expiry+0x74>)
   1c36c:	f7fd fab8 	bl	198e0 <z_spin_unlock_valid>
   1c370:	b968      	cbnz	r0, 1c38e <z_get_next_timeout_expiry+0x66>
   1c372:	4a0b      	ldr	r2, [pc, #44]	; (1c3a0 <z_get_next_timeout_expiry+0x78>)
   1c374:	490e      	ldr	r1, [pc, #56]	; (1c3b0 <z_get_next_timeout_expiry+0x88>)
   1c376:	480c      	ldr	r0, [pc, #48]	; (1c3a8 <z_get_next_timeout_expiry+0x80>)
   1c378:	23ac      	movs	r3, #172	; 0xac
   1c37a:	f001 fa1b 	bl	1d7b4 <printk>
   1c37e:	4907      	ldr	r1, [pc, #28]	; (1c39c <z_get_next_timeout_expiry+0x74>)
   1c380:	480c      	ldr	r0, [pc, #48]	; (1c3b4 <z_get_next_timeout_expiry+0x8c>)
   1c382:	f001 fa17 	bl	1d7b4 <printk>
   1c386:	4806      	ldr	r0, [pc, #24]	; (1c3a0 <z_get_next_timeout_expiry+0x78>)
   1c388:	21ac      	movs	r1, #172	; 0xac
   1c38a:	f001 fc6d 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1c38e:	f385 8811 	msr	BASEPRI, r5
   1c392:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1c396:	4620      	mov	r0, r4
   1c398:	bd38      	pop	{r3, r4, r5, pc}
   1c39a:	bf00      	nop
   1c39c:	2000208c 	.word	0x2000208c
   1c3a0:	00021710 	.word	0x00021710
   1c3a4:	00021762 	.word	0x00021762
   1c3a8:	00021650 	.word	0x00021650
   1c3ac:	00021777 	.word	0x00021777
   1c3b0:	00021736 	.word	0x00021736
   1c3b4:	0002174d 	.word	0x0002174d

0001c3b8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   1c3b8:	b570      	push	{r4, r5, r6, lr}
   1c3ba:	4604      	mov	r4, r0
   1c3bc:	460d      	mov	r5, r1
	__asm__ volatile(
   1c3be:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c3c2:	f3ef 8611 	mrs	r6, BASEPRI
   1c3c6:	f383 8812 	msr	BASEPRI_MAX, r3
   1c3ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c3ce:	481b      	ldr	r0, [pc, #108]	; (1c43c <z_set_timeout_expiry+0x84>)
   1c3d0:	f7fd fa78 	bl	198c4 <z_spin_lock_valid>
   1c3d4:	b968      	cbnz	r0, 1c3f2 <z_set_timeout_expiry+0x3a>
   1c3d6:	4a1a      	ldr	r2, [pc, #104]	; (1c440 <z_set_timeout_expiry+0x88>)
   1c3d8:	491a      	ldr	r1, [pc, #104]	; (1c444 <z_set_timeout_expiry+0x8c>)
   1c3da:	481b      	ldr	r0, [pc, #108]	; (1c448 <z_set_timeout_expiry+0x90>)
   1c3dc:	2381      	movs	r3, #129	; 0x81
   1c3de:	f001 f9e9 	bl	1d7b4 <printk>
   1c3e2:	4916      	ldr	r1, [pc, #88]	; (1c43c <z_set_timeout_expiry+0x84>)
   1c3e4:	4819      	ldr	r0, [pc, #100]	; (1c44c <z_set_timeout_expiry+0x94>)
   1c3e6:	f001 f9e5 	bl	1d7b4 <printk>
   1c3ea:	4815      	ldr	r0, [pc, #84]	; (1c440 <z_set_timeout_expiry+0x88>)
   1c3ec:	2181      	movs	r1, #129	; 0x81
   1c3ee:	f001 fc3b 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c3f2:	4812      	ldr	r0, [pc, #72]	; (1c43c <z_set_timeout_expiry+0x84>)
   1c3f4:	f7fd fa84 	bl	19900 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   1c3f8:	f7ff fe2e 	bl	1c058 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1c3fc:	2801      	cmp	r0, #1
   1c3fe:	dd05      	ble.n	1c40c <z_set_timeout_expiry+0x54>
   1c400:	42a0      	cmp	r0, r4
   1c402:	db03      	blt.n	1c40c <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1c404:	4629      	mov	r1, r5
   1c406:	4620      	mov	r0, r4
   1c408:	f7fb fd32 	bl	17e70 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c40c:	480b      	ldr	r0, [pc, #44]	; (1c43c <z_set_timeout_expiry+0x84>)
   1c40e:	f7fd fa67 	bl	198e0 <z_spin_unlock_valid>
   1c412:	b968      	cbnz	r0, 1c430 <z_set_timeout_expiry+0x78>
   1c414:	4a0a      	ldr	r2, [pc, #40]	; (1c440 <z_set_timeout_expiry+0x88>)
   1c416:	490e      	ldr	r1, [pc, #56]	; (1c450 <z_set_timeout_expiry+0x98>)
   1c418:	480b      	ldr	r0, [pc, #44]	; (1c448 <z_set_timeout_expiry+0x90>)
   1c41a:	23ac      	movs	r3, #172	; 0xac
   1c41c:	f001 f9ca 	bl	1d7b4 <printk>
   1c420:	4906      	ldr	r1, [pc, #24]	; (1c43c <z_set_timeout_expiry+0x84>)
   1c422:	480c      	ldr	r0, [pc, #48]	; (1c454 <z_set_timeout_expiry+0x9c>)
   1c424:	f001 f9c6 	bl	1d7b4 <printk>
   1c428:	4805      	ldr	r0, [pc, #20]	; (1c440 <z_set_timeout_expiry+0x88>)
   1c42a:	21ac      	movs	r1, #172	; 0xac
   1c42c:	f001 fc1c 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1c430:	f386 8811 	msr	BASEPRI, r6
   1c434:	f3bf 8f6f 	isb	sy
		}
	}
}
   1c438:	bd70      	pop	{r4, r5, r6, pc}
   1c43a:	bf00      	nop
   1c43c:	2000208c 	.word	0x2000208c
   1c440:	00021710 	.word	0x00021710
   1c444:	00021762 	.word	0x00021762
   1c448:	00021650 	.word	0x00021650
   1c44c:	00021777 	.word	0x00021777
   1c450:	00021736 	.word	0x00021736
   1c454:	0002174d 	.word	0x0002174d

0001c458 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   1c458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c45c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1c45e:	f7fe fe43 	bl	1b0e8 <z_time_slice>
	__asm__ volatile(
   1c462:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c466:	f3ef 8711 	mrs	r7, BASEPRI
   1c46a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c46e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c472:	4855      	ldr	r0, [pc, #340]	; (1c5c8 <sys_clock_announce+0x170>)
   1c474:	f7fd fa26 	bl	198c4 <z_spin_lock_valid>
   1c478:	b968      	cbnz	r0, 1c496 <sys_clock_announce+0x3e>
   1c47a:	4a54      	ldr	r2, [pc, #336]	; (1c5cc <sys_clock_announce+0x174>)
   1c47c:	4954      	ldr	r1, [pc, #336]	; (1c5d0 <sys_clock_announce+0x178>)
   1c47e:	4855      	ldr	r0, [pc, #340]	; (1c5d4 <sys_clock_announce+0x17c>)
   1c480:	2381      	movs	r3, #129	; 0x81
   1c482:	f001 f997 	bl	1d7b4 <printk>
   1c486:	4950      	ldr	r1, [pc, #320]	; (1c5c8 <sys_clock_announce+0x170>)
   1c488:	4853      	ldr	r0, [pc, #332]	; (1c5d8 <sys_clock_announce+0x180>)
   1c48a:	f001 f993 	bl	1d7b4 <printk>
   1c48e:	484f      	ldr	r0, [pc, #316]	; (1c5cc <sys_clock_announce+0x174>)
   1c490:	2181      	movs	r1, #129	; 0x81
   1c492:	f001 fbe9 	bl	1dc68 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1c496:	4d51      	ldr	r5, [pc, #324]	; (1c5dc <sys_clock_announce+0x184>)
   1c498:	4e51      	ldr	r6, [pc, #324]	; (1c5e0 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
   1c49a:	484b      	ldr	r0, [pc, #300]	; (1c5c8 <sys_clock_announce+0x170>)
	return list->head == list;
   1c49c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 1c5ec <sys_clock_announce+0x194>
   1c4a0:	f7fd fa2e 	bl	19900 <z_spin_lock_set_owner>
   1c4a4:	46b3      	mov	fp, r6
   1c4a6:	602c      	str	r4, [r5, #0]
   1c4a8:	e9d6 2300 	ldrd	r2, r3, [r6]
   1c4ac:	f8d5 c000 	ldr.w	ip, [r5]
   1c4b0:	f8da 4000 	ldr.w	r4, [sl]
   1c4b4:	e9cd 2300 	strd	r2, r3, [sp]
   1c4b8:	4662      	mov	r2, ip
   1c4ba:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c4bc:	4554      	cmp	r4, sl
   1c4be:	46e0      	mov	r8, ip
   1c4c0:	4699      	mov	r9, r3
   1c4c2:	d00c      	beq.n	1c4de <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c4c4:	b15c      	cbz	r4, 1c4de <sys_clock_announce+0x86>
   1c4c6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1c4ca:	458c      	cmp	ip, r1
   1c4cc:	eb79 0302 	sbcs.w	r3, r9, r2
   1c4d0:	da2e      	bge.n	1c530 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1c4d2:	ebb1 000c 	subs.w	r0, r1, ip
   1c4d6:	eb62 0109 	sbc.w	r1, r2, r9
   1c4da:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   1c4de:	9a00      	ldr	r2, [sp, #0]
   1c4e0:	9901      	ldr	r1, [sp, #4]
   1c4e2:	eb18 0202 	adds.w	r2, r8, r2
   1c4e6:	464b      	mov	r3, r9
   1c4e8:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
   1c4ec:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1c4ee:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   1c4f2:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1c4f4:	f7ff fdb0 	bl	1c058 <next_timeout>
   1c4f8:	4621      	mov	r1, r4
   1c4fa:	f7fb fcb9 	bl	17e70 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c4fe:	4832      	ldr	r0, [pc, #200]	; (1c5c8 <sys_clock_announce+0x170>)
   1c500:	f7fd f9ee 	bl	198e0 <z_spin_unlock_valid>
   1c504:	b968      	cbnz	r0, 1c522 <sys_clock_announce+0xca>
   1c506:	4a31      	ldr	r2, [pc, #196]	; (1c5cc <sys_clock_announce+0x174>)
   1c508:	4936      	ldr	r1, [pc, #216]	; (1c5e4 <sys_clock_announce+0x18c>)
   1c50a:	4832      	ldr	r0, [pc, #200]	; (1c5d4 <sys_clock_announce+0x17c>)
   1c50c:	23ac      	movs	r3, #172	; 0xac
   1c50e:	f001 f951 	bl	1d7b4 <printk>
   1c512:	492d      	ldr	r1, [pc, #180]	; (1c5c8 <sys_clock_announce+0x170>)
   1c514:	4834      	ldr	r0, [pc, #208]	; (1c5e8 <sys_clock_announce+0x190>)
   1c516:	f001 f94d 	bl	1d7b4 <printk>
   1c51a:	482c      	ldr	r0, [pc, #176]	; (1c5cc <sys_clock_announce+0x174>)
   1c51c:	21ac      	movs	r1, #172	; 0xac
   1c51e:	f001 fba3 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1c522:	f387 8811 	msr	BASEPRI, r7
   1c526:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1c52a:	b003      	add	sp, #12
   1c52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1c530:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
   1c534:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   1c538:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
   1c53c:	f04f 0200 	mov.w	r2, #0
   1c540:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1c544:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   1c548:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   1c54a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1c54e:	4620      	mov	r0, r4
		curr_tick += dt;
   1c550:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   1c554:	f7ff fdac 	bl	1c0b0 <remove_timeout>
   1c558:	481b      	ldr	r0, [pc, #108]	; (1c5c8 <sys_clock_announce+0x170>)
   1c55a:	f7fd f9c1 	bl	198e0 <z_spin_unlock_valid>
   1c55e:	b968      	cbnz	r0, 1c57c <sys_clock_announce+0x124>
   1c560:	4a1a      	ldr	r2, [pc, #104]	; (1c5cc <sys_clock_announce+0x174>)
   1c562:	4920      	ldr	r1, [pc, #128]	; (1c5e4 <sys_clock_announce+0x18c>)
   1c564:	481b      	ldr	r0, [pc, #108]	; (1c5d4 <sys_clock_announce+0x17c>)
   1c566:	23ac      	movs	r3, #172	; 0xac
   1c568:	f001 f924 	bl	1d7b4 <printk>
   1c56c:	4916      	ldr	r1, [pc, #88]	; (1c5c8 <sys_clock_announce+0x170>)
   1c56e:	481e      	ldr	r0, [pc, #120]	; (1c5e8 <sys_clock_announce+0x190>)
   1c570:	f001 f920 	bl	1d7b4 <printk>
   1c574:	4815      	ldr	r0, [pc, #84]	; (1c5cc <sys_clock_announce+0x174>)
   1c576:	21ac      	movs	r1, #172	; 0xac
   1c578:	f001 fb76 	bl	1dc68 <assert_post_action>
   1c57c:	f387 8811 	msr	BASEPRI, r7
   1c580:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1c584:	68a3      	ldr	r3, [r4, #8]
   1c586:	4620      	mov	r0, r4
   1c588:	4798      	blx	r3
	__asm__ volatile(
   1c58a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c58e:	f3ef 8711 	mrs	r7, BASEPRI
   1c592:	f383 8812 	msr	BASEPRI_MAX, r3
   1c596:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c59a:	480b      	ldr	r0, [pc, #44]	; (1c5c8 <sys_clock_announce+0x170>)
   1c59c:	f7fd f992 	bl	198c4 <z_spin_lock_valid>
   1c5a0:	b968      	cbnz	r0, 1c5be <sys_clock_announce+0x166>
   1c5a2:	4a0a      	ldr	r2, [pc, #40]	; (1c5cc <sys_clock_announce+0x174>)
   1c5a4:	490a      	ldr	r1, [pc, #40]	; (1c5d0 <sys_clock_announce+0x178>)
   1c5a6:	480b      	ldr	r0, [pc, #44]	; (1c5d4 <sys_clock_announce+0x17c>)
   1c5a8:	2381      	movs	r3, #129	; 0x81
   1c5aa:	f001 f903 	bl	1d7b4 <printk>
   1c5ae:	4906      	ldr	r1, [pc, #24]	; (1c5c8 <sys_clock_announce+0x170>)
   1c5b0:	4809      	ldr	r0, [pc, #36]	; (1c5d8 <sys_clock_announce+0x180>)
   1c5b2:	f001 f8ff 	bl	1d7b4 <printk>
   1c5b6:	4805      	ldr	r0, [pc, #20]	; (1c5cc <sys_clock_announce+0x174>)
   1c5b8:	2181      	movs	r1, #129	; 0x81
   1c5ba:	f001 fb55 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c5be:	4802      	ldr	r0, [pc, #8]	; (1c5c8 <sys_clock_announce+0x170>)
   1c5c0:	f7fd f99e 	bl	19900 <z_spin_lock_set_owner>
	return k;
   1c5c4:	e770      	b.n	1c4a8 <sys_clock_announce+0x50>
   1c5c6:	bf00      	nop
   1c5c8:	2000208c 	.word	0x2000208c
   1c5cc:	00021710 	.word	0x00021710
   1c5d0:	00021762 	.word	0x00021762
   1c5d4:	00021650 	.word	0x00021650
   1c5d8:	00021777 	.word	0x00021777
   1c5dc:	20002088 	.word	0x20002088
   1c5e0:	20001ce0 	.word	0x20001ce0
   1c5e4:	00021736 	.word	0x00021736
   1c5e8:	0002174d 	.word	0x0002174d
   1c5ec:	200004fc 	.word	0x200004fc

0001c5f0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1c5f0:	b570      	push	{r4, r5, r6, lr}
   1c5f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c5f6:	f3ef 8611 	mrs	r6, BASEPRI
   1c5fa:	f383 8812 	msr	BASEPRI_MAX, r3
   1c5fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c602:	481b      	ldr	r0, [pc, #108]	; (1c670 <sys_clock_tick_get+0x80>)
   1c604:	f7fd f95e 	bl	198c4 <z_spin_lock_valid>
   1c608:	b968      	cbnz	r0, 1c626 <sys_clock_tick_get+0x36>
   1c60a:	4a1a      	ldr	r2, [pc, #104]	; (1c674 <sys_clock_tick_get+0x84>)
   1c60c:	491a      	ldr	r1, [pc, #104]	; (1c678 <sys_clock_tick_get+0x88>)
   1c60e:	481b      	ldr	r0, [pc, #108]	; (1c67c <sys_clock_tick_get+0x8c>)
   1c610:	2381      	movs	r3, #129	; 0x81
   1c612:	f001 f8cf 	bl	1d7b4 <printk>
   1c616:	4916      	ldr	r1, [pc, #88]	; (1c670 <sys_clock_tick_get+0x80>)
   1c618:	4819      	ldr	r0, [pc, #100]	; (1c680 <sys_clock_tick_get+0x90>)
   1c61a:	f001 f8cb 	bl	1d7b4 <printk>
   1c61e:	4815      	ldr	r0, [pc, #84]	; (1c674 <sys_clock_tick_get+0x84>)
   1c620:	2181      	movs	r1, #129	; 0x81
   1c622:	f001 fb21 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c626:	4812      	ldr	r0, [pc, #72]	; (1c670 <sys_clock_tick_get+0x80>)
   1c628:	f7fd f96a 	bl	19900 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1c62c:	f7fb fc50 	bl	17ed0 <sys_clock_elapsed>
   1c630:	4b14      	ldr	r3, [pc, #80]	; (1c684 <sys_clock_tick_get+0x94>)
   1c632:	e9d3 4500 	ldrd	r4, r5, [r3]
   1c636:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c638:	480d      	ldr	r0, [pc, #52]	; (1c670 <sys_clock_tick_get+0x80>)
   1c63a:	f145 0500 	adc.w	r5, r5, #0
   1c63e:	f7fd f94f 	bl	198e0 <z_spin_unlock_valid>
   1c642:	b968      	cbnz	r0, 1c660 <sys_clock_tick_get+0x70>
   1c644:	4a0b      	ldr	r2, [pc, #44]	; (1c674 <sys_clock_tick_get+0x84>)
   1c646:	4910      	ldr	r1, [pc, #64]	; (1c688 <sys_clock_tick_get+0x98>)
   1c648:	480c      	ldr	r0, [pc, #48]	; (1c67c <sys_clock_tick_get+0x8c>)
   1c64a:	23ac      	movs	r3, #172	; 0xac
   1c64c:	f001 f8b2 	bl	1d7b4 <printk>
   1c650:	4907      	ldr	r1, [pc, #28]	; (1c670 <sys_clock_tick_get+0x80>)
   1c652:	480e      	ldr	r0, [pc, #56]	; (1c68c <sys_clock_tick_get+0x9c>)
   1c654:	f001 f8ae 	bl	1d7b4 <printk>
   1c658:	4806      	ldr	r0, [pc, #24]	; (1c674 <sys_clock_tick_get+0x84>)
   1c65a:	21ac      	movs	r1, #172	; 0xac
   1c65c:	f001 fb04 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1c660:	f386 8811 	msr	BASEPRI, r6
   1c664:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1c668:	4620      	mov	r0, r4
   1c66a:	4629      	mov	r1, r5
   1c66c:	bd70      	pop	{r4, r5, r6, pc}
   1c66e:	bf00      	nop
   1c670:	2000208c 	.word	0x2000208c
   1c674:	00021710 	.word	0x00021710
   1c678:	00021762 	.word	0x00021762
   1c67c:	00021650 	.word	0x00021650
   1c680:	00021777 	.word	0x00021777
   1c684:	20001ce0 	.word	0x20001ce0
   1c688:	00021736 	.word	0x00021736
   1c68c:	0002174d 	.word	0x0002174d

0001c690 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1c690:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1c694:	4604      	mov	r4, r0
	__asm__ volatile(
   1c696:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c69a:	f3ef 8611 	mrs	r6, BASEPRI
   1c69e:	f383 8812 	msr	BASEPRI_MAX, r3
   1c6a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c6a6:	4834      	ldr	r0, [pc, #208]	; (1c778 <z_timer_expiration_handler+0xe8>)
   1c6a8:	f7fd f90c 	bl	198c4 <z_spin_lock_valid>
   1c6ac:	b968      	cbnz	r0, 1c6ca <z_timer_expiration_handler+0x3a>
   1c6ae:	4a33      	ldr	r2, [pc, #204]	; (1c77c <z_timer_expiration_handler+0xec>)
   1c6b0:	4933      	ldr	r1, [pc, #204]	; (1c780 <z_timer_expiration_handler+0xf0>)
   1c6b2:	4834      	ldr	r0, [pc, #208]	; (1c784 <z_timer_expiration_handler+0xf4>)
   1c6b4:	2381      	movs	r3, #129	; 0x81
   1c6b6:	f001 f87d 	bl	1d7b4 <printk>
   1c6ba:	492f      	ldr	r1, [pc, #188]	; (1c778 <z_timer_expiration_handler+0xe8>)
   1c6bc:	4832      	ldr	r0, [pc, #200]	; (1c788 <z_timer_expiration_handler+0xf8>)
   1c6be:	f001 f879 	bl	1d7b4 <printk>
   1c6c2:	482e      	ldr	r0, [pc, #184]	; (1c77c <z_timer_expiration_handler+0xec>)
   1c6c4:	2181      	movs	r1, #129	; 0x81
   1c6c6:	f001 facf 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c6ca:	482b      	ldr	r0, [pc, #172]	; (1c778 <z_timer_expiration_handler+0xe8>)
   1c6cc:	f7fd f918 	bl	19900 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1c6d0:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   1c6d4:	f112 0801 	adds.w	r8, r2, #1
   1c6d8:	f143 0900 	adc.w	r9, r3, #0
   1c6dc:	f1b9 0f00 	cmp.w	r9, #0
   1c6e0:	bf08      	it	eq
   1c6e2:	f1b8 0f02 	cmpeq.w	r8, #2
   1c6e6:	d303      	bcc.n	1c6f0 <z_timer_expiration_handler+0x60>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c6e8:	4928      	ldr	r1, [pc, #160]	; (1c78c <z_timer_expiration_handler+0xfc>)
   1c6ea:	4620      	mov	r0, r4
   1c6ec:	f7ff fcfa 	bl	1c0e4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1c6f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c6f2:	3301      	adds	r3, #1
   1c6f4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1c6f6:	6a23      	ldr	r3, [r4, #32]
   1c6f8:	b10b      	cbz	r3, 1c6fe <z_timer_expiration_handler+0x6e>
		timer->expiry_fn(timer);
   1c6fa:	4620      	mov	r0, r4
   1c6fc:	4798      	blx	r3
	return list->head == list;
   1c6fe:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c702:	42a5      	cmp	r5, r4
   1c704:	d000      	beq.n	1c708 <z_timer_expiration_handler+0x78>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1c706:	b9bd      	cbnz	r5, 1c738 <z_timer_expiration_handler+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c708:	481b      	ldr	r0, [pc, #108]	; (1c778 <z_timer_expiration_handler+0xe8>)
   1c70a:	f7fd f8e9 	bl	198e0 <z_spin_unlock_valid>
   1c70e:	b968      	cbnz	r0, 1c72c <z_timer_expiration_handler+0x9c>
   1c710:	4a1a      	ldr	r2, [pc, #104]	; (1c77c <z_timer_expiration_handler+0xec>)
   1c712:	491f      	ldr	r1, [pc, #124]	; (1c790 <z_timer_expiration_handler+0x100>)
   1c714:	481b      	ldr	r0, [pc, #108]	; (1c784 <z_timer_expiration_handler+0xf4>)
   1c716:	23ac      	movs	r3, #172	; 0xac
   1c718:	f001 f84c 	bl	1d7b4 <printk>
   1c71c:	4916      	ldr	r1, [pc, #88]	; (1c778 <z_timer_expiration_handler+0xe8>)
   1c71e:	481d      	ldr	r0, [pc, #116]	; (1c794 <z_timer_expiration_handler+0x104>)
   1c720:	f001 f848 	bl	1d7b4 <printk>
   1c724:	4815      	ldr	r0, [pc, #84]	; (1c77c <z_timer_expiration_handler+0xec>)
   1c726:	21ac      	movs	r1, #172	; 0xac
   1c728:	f001 fa9e 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1c72c:	f386 8811 	msr	BASEPRI, r6
   1c730:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1c734:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	z_unpend_thread_no_timeout(thread);
   1c738:	4628      	mov	r0, r5
   1c73a:	f7fe fab7 	bl	1acac <z_unpend_thread_no_timeout>
   1c73e:	2300      	movs	r3, #0
   1c740:	480d      	ldr	r0, [pc, #52]	; (1c778 <z_timer_expiration_handler+0xe8>)
   1c742:	67eb      	str	r3, [r5, #124]	; 0x7c
   1c744:	f7fd f8cc 	bl	198e0 <z_spin_unlock_valid>
   1c748:	b968      	cbnz	r0, 1c766 <z_timer_expiration_handler+0xd6>
   1c74a:	4a0c      	ldr	r2, [pc, #48]	; (1c77c <z_timer_expiration_handler+0xec>)
   1c74c:	4910      	ldr	r1, [pc, #64]	; (1c790 <z_timer_expiration_handler+0x100>)
   1c74e:	480d      	ldr	r0, [pc, #52]	; (1c784 <z_timer_expiration_handler+0xf4>)
   1c750:	23ac      	movs	r3, #172	; 0xac
   1c752:	f001 f82f 	bl	1d7b4 <printk>
   1c756:	4908      	ldr	r1, [pc, #32]	; (1c778 <z_timer_expiration_handler+0xe8>)
   1c758:	480e      	ldr	r0, [pc, #56]	; (1c794 <z_timer_expiration_handler+0x104>)
   1c75a:	f001 f82b 	bl	1d7b4 <printk>
   1c75e:	4807      	ldr	r0, [pc, #28]	; (1c77c <z_timer_expiration_handler+0xec>)
   1c760:	21ac      	movs	r1, #172	; 0xac
   1c762:	f001 fa81 	bl	1dc68 <assert_post_action>
   1c766:	f386 8811 	msr	BASEPRI, r6
   1c76a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1c76e:	4628      	mov	r0, r5
}
   1c770:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
	z_ready_thread(thread);
   1c774:	f7fe bd82 	b.w	1b27c <z_ready_thread>
   1c778:	20002090 	.word	0x20002090
   1c77c:	00021710 	.word	0x00021710
   1c780:	00021762 	.word	0x00021762
   1c784:	00021650 	.word	0x00021650
   1c788:	00021777 	.word	0x00021777
   1c78c:	0001c691 	.word	0x0001c691
   1c790:	00021736 	.word	0x00021736
   1c794:	0002174d 	.word	0x0002174d

0001c798 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1c798:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1c79c:	4619      	mov	r1, r3
   1c79e:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c7a0:	1c4c      	adds	r4, r1, #1
{
   1c7a2:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c7a4:	bf08      	it	eq
   1c7a6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1c7aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1c7ae:	4680      	mov	r8, r0
   1c7b0:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c7b2:	d04c      	beq.n	1c84e <z_impl_k_timer_start+0xb6>
   1c7b4:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1c7b6:	1c6b      	adds	r3, r5, #1
   1c7b8:	bf08      	it	eq
   1c7ba:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1c7be:	4614      	mov	r4, r2
   1c7c0:	d019      	beq.n	1c7f6 <z_impl_k_timer_start+0x5e>
   1c7c2:	ea54 0305 	orrs.w	r3, r4, r5
   1c7c6:	d016      	beq.n	1c7f6 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   1c7c8:	f06f 0301 	mvn.w	r3, #1
   1c7cc:	ebb3 0a02 	subs.w	sl, r3, r2
   1c7d0:	f04f 33ff 	mov.w	r3, #4294967295
   1c7d4:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1c7d8:	f1ba 0f00 	cmp.w	sl, #0
   1c7dc:	f17b 0300 	sbcs.w	r3, fp, #0
   1c7e0:	da09      	bge.n	1c7f6 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   1c7e2:	f112 34ff 	adds.w	r4, r2, #4294967295
   1c7e6:	f145 35ff 	adc.w	r5, r5, #4294967295
   1c7ea:	2c01      	cmp	r4, #1
   1c7ec:	f175 0300 	sbcs.w	r3, r5, #0
   1c7f0:	bfbc      	itt	lt
   1c7f2:	2401      	movlt	r4, #1
   1c7f4:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1c7f6:	f06f 0301 	mvn.w	r3, #1
   1c7fa:	1a1b      	subs	r3, r3, r0
   1c7fc:	9300      	str	r3, [sp, #0]
   1c7fe:	f04f 33ff 	mov.w	r3, #4294967295
   1c802:	eb63 0301 	sbc.w	r3, r3, r1
   1c806:	9301      	str	r3, [sp, #4]
   1c808:	e9dd 2300 	ldrd	r2, r3, [sp]
   1c80c:	2a00      	cmp	r2, #0
   1c80e:	f173 0300 	sbcs.w	r3, r3, #0
   1c812:	da0c      	bge.n	1c82e <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1c814:	f110 38ff 	adds.w	r8, r0, #4294967295
   1c818:	f141 39ff 	adc.w	r9, r1, #4294967295
   1c81c:	f1b8 0f00 	cmp.w	r8, #0
   1c820:	f179 0300 	sbcs.w	r3, r9, #0
   1c824:	bfbc      	itt	lt
   1c826:	f04f 0800 	movlt.w	r8, #0
   1c82a:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1c82e:	4630      	mov	r0, r6
   1c830:	f7ff fd2c 	bl	1c28c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1c834:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c836:	4907      	ldr	r1, [pc, #28]	; (1c854 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   1c838:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c83a:	4642      	mov	r2, r8
   1c83c:	464b      	mov	r3, r9
   1c83e:	4630      	mov	r0, r6
	timer->period = period;
   1c840:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1c844:	b002      	add	sp, #8
   1c846:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c84a:	f7ff bc4b 	b.w	1c0e4 <z_add_timeout>
}
   1c84e:	b002      	add	sp, #8
   1c850:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1c854:	0001c691 	.word	0x0001c691

0001c858 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   1c858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c85c:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   1c85e:	4d53      	ldr	r5, [pc, #332]	; (1c9ac <clear_event_registrations+0x154>)
   1c860:	f8df 918c 	ldr.w	r9, [pc, #396]	; 1c9f0 <clear_event_registrations+0x198>
   1c864:	4e52      	ldr	r6, [pc, #328]	; (1c9b0 <clear_event_registrations+0x158>)
{
   1c866:	4680      	mov	r8, r0
   1c868:	4617      	mov	r7, r2
	while (num_events--) {
   1c86a:	fb04 0401 	mla	r4, r4, r1, r0
   1c86e:	45a0      	cmp	r8, r4
   1c870:	d101      	bne.n	1c876 <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   1c872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   1c876:	2300      	movs	r3, #0
   1c878:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1c87c:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1c880:	f003 031f 	and.w	r3, r3, #31
   1c884:	2b08      	cmp	r3, #8
   1c886:	d84f      	bhi.n	1c928 <clear_event_registrations+0xd0>
   1c888:	e8df f003 	tbb	[pc, r3]
   1c88c:	4e05305b 	.word	0x4e05305b
   1c890:	4e4e4e21 	.word	0x4e4e4e21
   1c894:	3f          	.byte	0x3f
   1c895:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1c896:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c89a:	b963      	cbnz	r3, 1c8b6 <clear_event_registrations+0x5e>
   1c89c:	4945      	ldr	r1, [pc, #276]	; (1c9b4 <clear_event_registrations+0x15c>)
   1c89e:	23a9      	movs	r3, #169	; 0xa9
   1c8a0:	462a      	mov	r2, r5
   1c8a2:	4630      	mov	r0, r6
   1c8a4:	f000 ff86 	bl	1d7b4 <printk>
   1c8a8:	4843      	ldr	r0, [pc, #268]	; (1c9b8 <clear_event_registrations+0x160>)
   1c8aa:	f000 ff83 	bl	1d7b4 <printk>
   1c8ae:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1c8b0:	4628      	mov	r0, r5
   1c8b2:	f001 f9d9 	bl	1dc68 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1c8b6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1c8ba:	2b00      	cmp	r3, #0
   1c8bc:	d041      	beq.n	1c942 <clear_event_registrations+0xea>
	sys_dnode_t *const prev = node->prev;
   1c8be:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   1c8c2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c8c4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c8c6:	2300      	movs	r3, #0
	node->prev = NULL;
   1c8c8:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   1c8cc:	e039      	b.n	1c942 <clear_event_registrations+0xea>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1c8ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c8d2:	2b00      	cmp	r3, #0
   1c8d4:	d1ef      	bne.n	1c8b6 <clear_event_registrations+0x5e>
   1c8d6:	4939      	ldr	r1, [pc, #228]	; (1c9bc <clear_event_registrations+0x164>)
   1c8d8:	23ad      	movs	r3, #173	; 0xad
   1c8da:	462a      	mov	r2, r5
   1c8dc:	4630      	mov	r0, r6
   1c8de:	f000 ff69 	bl	1d7b4 <printk>
   1c8e2:	4837      	ldr	r0, [pc, #220]	; (1c9c0 <clear_event_registrations+0x168>)
   1c8e4:	f000 ff66 	bl	1d7b4 <printk>
   1c8e8:	21ad      	movs	r1, #173	; 0xad
   1c8ea:	e7e1      	b.n	1c8b0 <clear_event_registrations+0x58>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c8ec:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c8f0:	2b00      	cmp	r3, #0
   1c8f2:	d1e0      	bne.n	1c8b6 <clear_event_registrations+0x5e>
   1c8f4:	4933      	ldr	r1, [pc, #204]	; (1c9c4 <clear_event_registrations+0x16c>)
   1c8f6:	23b1      	movs	r3, #177	; 0xb1
   1c8f8:	462a      	mov	r2, r5
   1c8fa:	4630      	mov	r0, r6
   1c8fc:	f000 ff5a 	bl	1d7b4 <printk>
   1c900:	4831      	ldr	r0, [pc, #196]	; (1c9c8 <clear_event_registrations+0x170>)
   1c902:	f000 ff57 	bl	1d7b4 <printk>
   1c906:	21b1      	movs	r1, #177	; 0xb1
   1c908:	e7d2      	b.n	1c8b0 <clear_event_registrations+0x58>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1c90a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c90e:	2b00      	cmp	r3, #0
   1c910:	d1d1      	bne.n	1c8b6 <clear_event_registrations+0x5e>
   1c912:	492e      	ldr	r1, [pc, #184]	; (1c9cc <clear_event_registrations+0x174>)
   1c914:	23b5      	movs	r3, #181	; 0xb5
   1c916:	462a      	mov	r2, r5
   1c918:	4630      	mov	r0, r6
   1c91a:	f000 ff4b 	bl	1d7b4 <printk>
   1c91e:	482c      	ldr	r0, [pc, #176]	; (1c9d0 <clear_event_registrations+0x178>)
   1c920:	f000 ff48 	bl	1d7b4 <printk>
   1c924:	21b5      	movs	r1, #181	; 0xb5
   1c926:	e7c3      	b.n	1c8b0 <clear_event_registrations+0x58>
		__ASSERT(false, "invalid event type\n");
   1c928:	4649      	mov	r1, r9
   1c92a:	23bc      	movs	r3, #188	; 0xbc
   1c92c:	462a      	mov	r2, r5
   1c92e:	4630      	mov	r0, r6
   1c930:	f000 ff40 	bl	1d7b4 <printk>
   1c934:	4827      	ldr	r0, [pc, #156]	; (1c9d4 <clear_event_registrations+0x17c>)
   1c936:	f000 ff3d 	bl	1d7b4 <printk>
   1c93a:	21bc      	movs	r1, #188	; 0xbc
   1c93c:	4628      	mov	r0, r5
   1c93e:	f001 f993 	bl	1dc68 <assert_post_action>
   1c942:	4825      	ldr	r0, [pc, #148]	; (1c9d8 <clear_event_registrations+0x180>)
   1c944:	f7fc ffcc 	bl	198e0 <z_spin_unlock_valid>
   1c948:	b968      	cbnz	r0, 1c966 <clear_event_registrations+0x10e>
   1c94a:	4a24      	ldr	r2, [pc, #144]	; (1c9dc <clear_event_registrations+0x184>)
   1c94c:	4924      	ldr	r1, [pc, #144]	; (1c9e0 <clear_event_registrations+0x188>)
   1c94e:	23ac      	movs	r3, #172	; 0xac
   1c950:	4630      	mov	r0, r6
   1c952:	f000 ff2f 	bl	1d7b4 <printk>
   1c956:	4920      	ldr	r1, [pc, #128]	; (1c9d8 <clear_event_registrations+0x180>)
   1c958:	4822      	ldr	r0, [pc, #136]	; (1c9e4 <clear_event_registrations+0x18c>)
   1c95a:	f000 ff2b 	bl	1d7b4 <printk>
   1c95e:	481f      	ldr	r0, [pc, #124]	; (1c9dc <clear_event_registrations+0x184>)
   1c960:	21ac      	movs	r1, #172	; 0xac
   1c962:	f001 f981 	bl	1dc68 <assert_post_action>
   1c966:	f387 8811 	msr	BASEPRI, r7
   1c96a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c96e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c972:	f3ef 8711 	mrs	r7, BASEPRI
   1c976:	f383 8812 	msr	BASEPRI_MAX, r3
   1c97a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c97e:	4816      	ldr	r0, [pc, #88]	; (1c9d8 <clear_event_registrations+0x180>)
   1c980:	f7fc ffa0 	bl	198c4 <z_spin_lock_valid>
   1c984:	b968      	cbnz	r0, 1c9a2 <clear_event_registrations+0x14a>
   1c986:	4a15      	ldr	r2, [pc, #84]	; (1c9dc <clear_event_registrations+0x184>)
   1c988:	4917      	ldr	r1, [pc, #92]	; (1c9e8 <clear_event_registrations+0x190>)
   1c98a:	2381      	movs	r3, #129	; 0x81
   1c98c:	4630      	mov	r0, r6
   1c98e:	f000 ff11 	bl	1d7b4 <printk>
   1c992:	4911      	ldr	r1, [pc, #68]	; (1c9d8 <clear_event_registrations+0x180>)
   1c994:	4815      	ldr	r0, [pc, #84]	; (1c9ec <clear_event_registrations+0x194>)
   1c996:	f000 ff0d 	bl	1d7b4 <printk>
   1c99a:	4810      	ldr	r0, [pc, #64]	; (1c9dc <clear_event_registrations+0x184>)
   1c99c:	2181      	movs	r1, #129	; 0x81
   1c99e:	f001 f963 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c9a2:	480d      	ldr	r0, [pc, #52]	; (1c9d8 <clear_event_registrations+0x180>)
   1c9a4:	f7fc ffac 	bl	19900 <z_spin_lock_set_owner>
	return k;
   1c9a8:	3c14      	subs	r4, #20
   1c9aa:	e760      	b.n	1c86e <clear_event_registrations+0x16>
   1c9ac:	000230f8 	.word	0x000230f8
   1c9b0:	00021650 	.word	0x00021650
   1c9b4:	00023119 	.word	0x00023119
   1c9b8:	00023133 	.word	0x00023133
   1c9bc:	00023148 	.word	0x00023148
   1c9c0:	00023164 	.word	0x00023164
   1c9c4:	00023175 	.word	0x00023175
   1c9c8:	00023192 	.word	0x00023192
   1c9cc:	000231a9 	.word	0x000231a9
   1c9d0:	000231c4 	.word	0x000231c4
   1c9d4:	000231dd 	.word	0x000231dd
   1c9d8:	20002094 	.word	0x20002094
   1c9dc:	00021710 	.word	0x00021710
   1c9e0:	00021736 	.word	0x00021736
   1c9e4:	0002174d 	.word	0x0002174d
   1c9e8:	00021762 	.word	0x00021762
   1c9ec:	00021777 	.word	0x00021777
   1c9f0:	00023382 	.word	0x00023382

0001c9f4 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   1c9f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   1c9f8:	2700      	movs	r7, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c9fa:	4e7c      	ldr	r6, [pc, #496]	; (1cbec <register_events+0x1f8>)
   1c9fc:	f8df 8230 	ldr.w	r8, [pc, #560]	; 1cc30 <register_events+0x23c>
   1ca00:	f8df a230 	ldr.w	sl, [pc, #560]	; 1cc34 <register_events+0x240>
{
   1ca04:	9100      	str	r1, [sp, #0]
   1ca06:	4615      	mov	r5, r2
   1ca08:	9301      	str	r3, [sp, #4]
   1ca0a:	4604      	mov	r4, r0
	int events_registered = 0;
   1ca0c:	46b9      	mov	r9, r7
	for (int ii = 0; ii < num_events; ii++) {
   1ca0e:	9b00      	ldr	r3, [sp, #0]
   1ca10:	429f      	cmp	r7, r3
   1ca12:	db03      	blt.n	1ca1c <register_events+0x28>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   1ca14:	4648      	mov	r0, r9
   1ca16:	b003      	add	sp, #12
   1ca18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca20:	f3ef 8b11 	mrs	fp, BASEPRI
   1ca24:	f383 8812 	msr	BASEPRI_MAX, r3
   1ca28:	f3bf 8f6f 	isb	sy
   1ca2c:	4630      	mov	r0, r6
   1ca2e:	f7fc ff49 	bl	198c4 <z_spin_lock_valid>
   1ca32:	b968      	cbnz	r0, 1ca50 <register_events+0x5c>
   1ca34:	486e      	ldr	r0, [pc, #440]	; (1cbf0 <register_events+0x1fc>)
   1ca36:	2381      	movs	r3, #129	; 0x81
   1ca38:	4642      	mov	r2, r8
   1ca3a:	4651      	mov	r1, sl
   1ca3c:	f000 feba 	bl	1d7b4 <printk>
   1ca40:	486c      	ldr	r0, [pc, #432]	; (1cbf4 <register_events+0x200>)
   1ca42:	4631      	mov	r1, r6
   1ca44:	f000 feb6 	bl	1d7b4 <printk>
   1ca48:	2181      	movs	r1, #129	; 0x81
   1ca4a:	4640      	mov	r0, r8
   1ca4c:	f001 f90c 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ca50:	4630      	mov	r0, r6
   1ca52:	f7fc ff55 	bl	19900 <z_spin_lock_set_owner>
	switch (event->type) {
   1ca56:	7b63      	ldrb	r3, [r4, #13]
   1ca58:	f003 031f 	and.w	r3, r3, #31
   1ca5c:	2b08      	cmp	r3, #8
   1ca5e:	d84f      	bhi.n	1cb00 <register_events+0x10c>
   1ca60:	e8df f003 	tbb	[pc, r3]
   1ca64:	4e054230 	.word	0x4e054230
   1ca68:	4e4e4e2c 	.word	0x4e4e4e2c
   1ca6c:	48          	.byte	0x48
   1ca6d:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1ca6e:	6923      	ldr	r3, [r4, #16]
   1ca70:	689b      	ldr	r3, [r3, #8]
   1ca72:	b33b      	cbz	r3, 1cac4 <register_events+0xd0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1ca74:	2302      	movs	r3, #2
	event->state |= state;
   1ca76:	68e2      	ldr	r2, [r4, #12]
   1ca78:	f3c2 3045 	ubfx	r0, r2, #13, #6
   1ca7c:	4303      	orrs	r3, r0
	event->poller = NULL;
   1ca7e:	2100      	movs	r1, #0
	event->state |= state;
   1ca80:	f363 3252 	bfi	r2, r3, #13, #6
	event->poller = NULL;
   1ca84:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   1ca86:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1ca88:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ca8a:	4630      	mov	r0, r6
   1ca8c:	f7fc ff28 	bl	198e0 <z_spin_unlock_valid>
   1ca90:	b968      	cbnz	r0, 1caae <register_events+0xba>
   1ca92:	4959      	ldr	r1, [pc, #356]	; (1cbf8 <register_events+0x204>)
   1ca94:	4856      	ldr	r0, [pc, #344]	; (1cbf0 <register_events+0x1fc>)
   1ca96:	23ac      	movs	r3, #172	; 0xac
   1ca98:	4642      	mov	r2, r8
   1ca9a:	f000 fe8b 	bl	1d7b4 <printk>
   1ca9e:	4857      	ldr	r0, [pc, #348]	; (1cbfc <register_events+0x208>)
   1caa0:	4631      	mov	r1, r6
   1caa2:	f000 fe87 	bl	1d7b4 <printk>
   1caa6:	21ac      	movs	r1, #172	; 0xac
   1caa8:	4640      	mov	r0, r8
   1caaa:	f001 f8dd 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1caae:	f38b 8811 	msr	BASEPRI, fp
   1cab2:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1cab6:	3701      	adds	r7, #1
   1cab8:	3414      	adds	r4, #20
   1caba:	e7a8      	b.n	1ca0e <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   1cabc:	6923      	ldr	r3, [r4, #16]
   1cabe:	681b      	ldr	r3, [r3, #0]
   1cac0:	2b00      	cmp	r3, #0
   1cac2:	d12e      	bne.n	1cb22 <register_events+0x12e>
		} else if (!just_check && poller->is_polling) {
   1cac4:	9b01      	ldr	r3, [sp, #4]
   1cac6:	2b00      	cmp	r3, #0
   1cac8:	d1df      	bne.n	1ca8a <register_events+0x96>
   1caca:	782b      	ldrb	r3, [r5, #0]
   1cacc:	2b00      	cmp	r3, #0
   1cace:	d0dc      	beq.n	1ca8a <register_events+0x96>
	switch (event->type) {
   1cad0:	7b63      	ldrb	r3, [r4, #13]
   1cad2:	f003 031f 	and.w	r3, r3, #31
   1cad6:	2b08      	cmp	r3, #8
   1cad8:	d879      	bhi.n	1cbce <register_events+0x1da>
   1cada:	e8df f003 	tbb	[pc, r3]
   1cade:	5139      	.short	0x5139
   1cae0:	783d7824 	.word	0x783d7824
   1cae4:	7878      	.short	0x7878
   1cae6:	64          	.byte	0x64
   1cae7:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1cae8:	6923      	ldr	r3, [r4, #16]
   1caea:	689b      	ldr	r3, [r3, #8]
   1caec:	2b00      	cmp	r3, #0
   1caee:	d0e9      	beq.n	1cac4 <register_events+0xd0>
			*state = K_POLL_STATE_SIGNALED;
   1caf0:	2301      	movs	r3, #1
   1caf2:	e7c0      	b.n	1ca76 <register_events+0x82>
		if (event->msgq->used_msgs > 0) {
   1caf4:	6923      	ldr	r3, [r4, #16]
   1caf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1caf8:	2b00      	cmp	r3, #0
   1cafa:	d0e3      	beq.n	1cac4 <register_events+0xd0>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1cafc:	2310      	movs	r3, #16
   1cafe:	e7ba      	b.n	1ca76 <register_events+0x82>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1cb00:	4a3f      	ldr	r2, [pc, #252]	; (1cc00 <register_events+0x20c>)
   1cb02:	4940      	ldr	r1, [pc, #256]	; (1cc04 <register_events+0x210>)
   1cb04:	483a      	ldr	r0, [pc, #232]	; (1cbf0 <register_events+0x1fc>)
   1cb06:	235c      	movs	r3, #92	; 0x5c
   1cb08:	f000 fe54 	bl	1d7b4 <printk>
   1cb0c:	7b61      	ldrb	r1, [r4, #13]
   1cb0e:	483e      	ldr	r0, [pc, #248]	; (1cc08 <register_events+0x214>)
   1cb10:	f001 011f 	and.w	r1, r1, #31
   1cb14:	f000 fe4e 	bl	1d7b4 <printk>
   1cb18:	4839      	ldr	r0, [pc, #228]	; (1cc00 <register_events+0x20c>)
   1cb1a:	215c      	movs	r1, #92	; 0x5c
   1cb1c:	f001 f8a4 	bl	1dc68 <assert_post_action>
		break;
   1cb20:	e7d0      	b.n	1cac4 <register_events+0xd0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1cb22:	2304      	movs	r3, #4
   1cb24:	e7a7      	b.n	1ca76 <register_events+0x82>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1cb26:	6923      	ldr	r3, [r4, #16]
   1cb28:	b963      	cbnz	r3, 1cb44 <register_events+0x150>
   1cb2a:	4938      	ldr	r1, [pc, #224]	; (1cc0c <register_events+0x218>)
   1cb2c:	4a34      	ldr	r2, [pc, #208]	; (1cc00 <register_events+0x20c>)
   1cb2e:	4830      	ldr	r0, [pc, #192]	; (1cbf0 <register_events+0x1fc>)
   1cb30:	2386      	movs	r3, #134	; 0x86
   1cb32:	f000 fe3f 	bl	1d7b4 <printk>
   1cb36:	4836      	ldr	r0, [pc, #216]	; (1cc10 <register_events+0x21c>)
   1cb38:	f000 fe3c 	bl	1d7b4 <printk>
   1cb3c:	4830      	ldr	r0, [pc, #192]	; (1cc00 <register_events+0x20c>)
   1cb3e:	2186      	movs	r1, #134	; 0x86
   1cb40:	f001 f892 	bl	1dc68 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   1cb44:	6920      	ldr	r0, [r4, #16]
   1cb46:	462a      	mov	r2, r5
   1cb48:	4621      	mov	r1, r4
   1cb4a:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   1cb4c:	f003 ff34 	bl	209b8 <add_event>
	event->poller = poller;
   1cb50:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   1cb52:	f109 0901 	add.w	r9, r9, #1
   1cb56:	e798      	b.n	1ca8a <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1cb58:	6923      	ldr	r3, [r4, #16]
   1cb5a:	b963      	cbnz	r3, 1cb76 <register_events+0x182>
   1cb5c:	492d      	ldr	r1, [pc, #180]	; (1cc14 <register_events+0x220>)
   1cb5e:	4a28      	ldr	r2, [pc, #160]	; (1cc00 <register_events+0x20c>)
   1cb60:	4823      	ldr	r0, [pc, #140]	; (1cbf0 <register_events+0x1fc>)
   1cb62:	238a      	movs	r3, #138	; 0x8a
   1cb64:	f000 fe26 	bl	1d7b4 <printk>
   1cb68:	482b      	ldr	r0, [pc, #172]	; (1cc18 <register_events+0x224>)
   1cb6a:	f000 fe23 	bl	1d7b4 <printk>
   1cb6e:	4824      	ldr	r0, [pc, #144]	; (1cc00 <register_events+0x20c>)
   1cb70:	218a      	movs	r1, #138	; 0x8a
   1cb72:	f001 f879 	bl	1dc68 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   1cb76:	6920      	ldr	r0, [r4, #16]
   1cb78:	462a      	mov	r2, r5
   1cb7a:	4621      	mov	r1, r4
   1cb7c:	3014      	adds	r0, #20
   1cb7e:	e7e5      	b.n	1cb4c <register_events+0x158>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1cb80:	6923      	ldr	r3, [r4, #16]
   1cb82:	b963      	cbnz	r3, 1cb9e <register_events+0x1aa>
   1cb84:	4925      	ldr	r1, [pc, #148]	; (1cc1c <register_events+0x228>)
   1cb86:	4a1e      	ldr	r2, [pc, #120]	; (1cc00 <register_events+0x20c>)
   1cb88:	4819      	ldr	r0, [pc, #100]	; (1cbf0 <register_events+0x1fc>)
   1cb8a:	238e      	movs	r3, #142	; 0x8e
   1cb8c:	f000 fe12 	bl	1d7b4 <printk>
   1cb90:	4823      	ldr	r0, [pc, #140]	; (1cc20 <register_events+0x22c>)
   1cb92:	f000 fe0f 	bl	1d7b4 <printk>
   1cb96:	481a      	ldr	r0, [pc, #104]	; (1cc00 <register_events+0x20c>)
   1cb98:	218e      	movs	r1, #142	; 0x8e
   1cb9a:	f001 f865 	bl	1dc68 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   1cb9e:	6920      	ldr	r0, [r4, #16]
   1cba0:	462a      	mov	r2, r5
   1cba2:	4621      	mov	r1, r4
   1cba4:	e7d2      	b.n	1cb4c <register_events+0x158>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1cba6:	6923      	ldr	r3, [r4, #16]
   1cba8:	b963      	cbnz	r3, 1cbc4 <register_events+0x1d0>
   1cbaa:	491e      	ldr	r1, [pc, #120]	; (1cc24 <register_events+0x230>)
   1cbac:	4a14      	ldr	r2, [pc, #80]	; (1cc00 <register_events+0x20c>)
   1cbae:	4810      	ldr	r0, [pc, #64]	; (1cbf0 <register_events+0x1fc>)
   1cbb0:	2392      	movs	r3, #146	; 0x92
   1cbb2:	f000 fdff 	bl	1d7b4 <printk>
   1cbb6:	481c      	ldr	r0, [pc, #112]	; (1cc28 <register_events+0x234>)
   1cbb8:	f000 fdfc 	bl	1d7b4 <printk>
   1cbbc:	4810      	ldr	r0, [pc, #64]	; (1cc00 <register_events+0x20c>)
   1cbbe:	2192      	movs	r1, #146	; 0x92
   1cbc0:	f001 f852 	bl	1dc68 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   1cbc4:	6920      	ldr	r0, [r4, #16]
   1cbc6:	462a      	mov	r2, r5
   1cbc8:	4621      	mov	r1, r4
   1cbca:	3028      	adds	r0, #40	; 0x28
   1cbcc:	e7be      	b.n	1cb4c <register_events+0x158>
		__ASSERT(false, "invalid event type\n");
   1cbce:	4a0c      	ldr	r2, [pc, #48]	; (1cc00 <register_events+0x20c>)
   1cbd0:	490c      	ldr	r1, [pc, #48]	; (1cc04 <register_events+0x210>)
   1cbd2:	4807      	ldr	r0, [pc, #28]	; (1cbf0 <register_events+0x1fc>)
   1cbd4:	2399      	movs	r3, #153	; 0x99
   1cbd6:	f000 fded 	bl	1d7b4 <printk>
   1cbda:	4814      	ldr	r0, [pc, #80]	; (1cc2c <register_events+0x238>)
   1cbdc:	f000 fdea 	bl	1d7b4 <printk>
   1cbe0:	4807      	ldr	r0, [pc, #28]	; (1cc00 <register_events+0x20c>)
   1cbe2:	2199      	movs	r1, #153	; 0x99
   1cbe4:	f001 f840 	bl	1dc68 <assert_post_action>
		break;
   1cbe8:	e7b2      	b.n	1cb50 <register_events+0x15c>
   1cbea:	bf00      	nop
   1cbec:	20002094 	.word	0x20002094
   1cbf0:	00021650 	.word	0x00021650
   1cbf4:	00021777 	.word	0x00021777
   1cbf8:	00021736 	.word	0x00021736
   1cbfc:	0002174d 	.word	0x0002174d
   1cc00:	000230f8 	.word	0x000230f8
   1cc04:	00023382 	.word	0x00023382
   1cc08:	000231f3 	.word	0x000231f3
   1cc0c:	00023119 	.word	0x00023119
   1cc10:	00023133 	.word	0x00023133
   1cc14:	00023148 	.word	0x00023148
   1cc18:	00023164 	.word	0x00023164
   1cc1c:	00023175 	.word	0x00023175
   1cc20:	00023192 	.word	0x00023192
   1cc24:	000231a9 	.word	0x000231a9
   1cc28:	000231c4 	.word	0x000231c4
   1cc2c:	000231dd 	.word	0x000231dd
   1cc30:	00021710 	.word	0x00021710
   1cc34:	00021762 	.word	0x00021762

0001cc38 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   1cc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1cc3c:	6884      	ldr	r4, [r0, #8]
{
   1cc3e:	4605      	mov	r5, r0
   1cc40:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
   1cc42:	b1d4      	cbz	r4, 1cc7a <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
   1cc44:	7863      	ldrb	r3, [r4, #1]
   1cc46:	2b01      	cmp	r3, #1
   1cc48:	d14b      	bne.n	1cce2 <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   1cc4a:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
   1cc4e:	d10e      	bne.n	1cc6e <signal_poll_event+0x36>
   1cc50:	4a30      	ldr	r2, [pc, #192]	; (1cd14 <signal_poll_event+0xdc>)
   1cc52:	4931      	ldr	r1, [pc, #196]	; (1cd18 <signal_poll_event+0xe0>)
   1cc54:	4831      	ldr	r0, [pc, #196]	; (1cd1c <signal_poll_event+0xe4>)
   1cc56:	23f9      	movs	r3, #249	; 0xf9
   1cc58:	f000 fdac 	bl	1d7b4 <printk>
   1cc5c:	4830      	ldr	r0, [pc, #192]	; (1cd20 <signal_poll_event+0xe8>)
   1cc5e:	f000 fda9 	bl	1d7b4 <printk>
   1cc62:	482c      	ldr	r0, [pc, #176]	; (1cd14 <signal_poll_event+0xdc>)
   1cc64:	21f9      	movs	r1, #249	; 0xf9
   1cc66:	f000 ffff 	bl	1dc68 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   1cc6a:	7b7b      	ldrb	r3, [r7, #13]
   1cc6c:	deff      	udf	#255	; 0xff
   1cc6e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1cc72:	f013 0302 	ands.w	r3, r3, #2
   1cc76:	d10a      	bne.n	1cc8e <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
   1cc78:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1cc7a:	68eb      	ldr	r3, [r5, #12]
   1cc7c:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1cc80:	430e      	orrs	r6, r1
	event->poller = NULL;
   1cc82:	2000      	movs	r0, #0
	event->state |= state;
   1cc84:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1cc88:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1cc8a:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1cc8c:	e00d      	b.n	1ccaa <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
   1cc8e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1cc92:	f04f 31ff 	mov.w	r1, #4294967295
   1cc96:	f06f 0001 	mvn.w	r0, #1
   1cc9a:	428b      	cmp	r3, r1
   1cc9c:	bf08      	it	eq
   1cc9e:	4282      	cmpeq	r2, r0
   1cca0:	d105      	bne.n	1ccae <signal_poll_event+0x76>
		poller->is_polling = false;
   1cca2:	2300      	movs	r3, #0
   1cca4:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1cca6:	f06f 000a 	mvn.w	r0, #10
}
   1ccaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   1ccae:	4638      	mov	r0, r7
   1ccb0:	f7fe f940 	bl	1af34 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1ccb4:	2e08      	cmp	r6, #8
   1ccb6:	bf0c      	ite	eq
   1ccb8:	f06f 0303 	mvneq.w	r3, #3
   1ccbc:	2300      	movne	r3, #0
   1ccbe:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ccc0:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1ccc4:	06db      	lsls	r3, r3, #27
   1ccc6:	d104      	bne.n	1ccd2 <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
   1ccc8:	f854 8c48 	ldr.w	r8, [r4, #-72]
   1cccc:	f1b8 0f00 	cmp.w	r8, #0
   1ccd0:	d001      	beq.n	1ccd6 <signal_poll_event+0x9e>
		poller->is_polling = false;
   1ccd2:	2300      	movs	r3, #0
   1ccd4:	e7d0      	b.n	1cc78 <signal_poll_event+0x40>
	z_ready_thread(thread);
   1ccd6:	4638      	mov	r0, r7
   1ccd8:	f7fe fad0 	bl	1b27c <z_ready_thread>
		poller->is_polling = false;
   1ccdc:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1cce0:	e7cb      	b.n	1cc7a <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
   1cce2:	2b02      	cmp	r3, #2
   1cce4:	d1f5      	bne.n	1ccd2 <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1cce6:	7823      	ldrb	r3, [r4, #0]
   1cce8:	2b00      	cmp	r3, #0
   1ccea:	d0c6      	beq.n	1cc7a <signal_poll_event+0x42>
   1ccec:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1ccf0:	b177      	cbz	r7, 1cd10 <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   1ccf2:	f1a4 0914 	sub.w	r9, r4, #20
   1ccf6:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
   1ccfa:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1ccfe:	f7ff fac5 	bl	1c28c <z_abort_timeout>
		twork->poll_result = 0;
   1cd02:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1cd06:	4649      	mov	r1, r9
   1cd08:	4638      	mov	r0, r7
   1cd0a:	f7fd fc55 	bl	1a5b8 <k_work_submit_to_queue>
   1cd0e:	e7e5      	b.n	1ccdc <signal_poll_event+0xa4>
		poller->is_polling = false;
   1cd10:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1cd12:	e7b2      	b.n	1cc7a <signal_poll_event+0x42>
   1cd14:	000230f8 	.word	0x000230f8
   1cd18:	00023210 	.word	0x00023210
   1cd1c:	00021650 	.word	0x00021650
   1cd20:	00023226 	.word	0x00023226

0001cd24 <k_poll_event_init>:
{
   1cd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd26:	4605      	mov	r5, r0
   1cd28:	460f      	mov	r7, r1
   1cd2a:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1cd2c:	4614      	mov	r4, r2
   1cd2e:	b162      	cbz	r2, 1cd4a <k_poll_event_init+0x26>
   1cd30:	491b      	ldr	r1, [pc, #108]	; (1cda0 <k_poll_event_init+0x7c>)
   1cd32:	4a1c      	ldr	r2, [pc, #112]	; (1cda4 <k_poll_event_init+0x80>)
   1cd34:	481c      	ldr	r0, [pc, #112]	; (1cda8 <k_poll_event_init+0x84>)
   1cd36:	232d      	movs	r3, #45	; 0x2d
   1cd38:	f000 fd3c 	bl	1d7b4 <printk>
   1cd3c:	481b      	ldr	r0, [pc, #108]	; (1cdac <k_poll_event_init+0x88>)
   1cd3e:	f000 fd39 	bl	1d7b4 <printk>
   1cd42:	4818      	ldr	r0, [pc, #96]	; (1cda4 <k_poll_event_init+0x80>)
   1cd44:	212d      	movs	r1, #45	; 0x2d
   1cd46:	f000 ff8f 	bl	1dc68 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1cd4a:	2f1f      	cmp	r7, #31
   1cd4c:	d90c      	bls.n	1cd68 <k_poll_event_init+0x44>
   1cd4e:	4918      	ldr	r1, [pc, #96]	; (1cdb0 <k_poll_event_init+0x8c>)
   1cd50:	4a14      	ldr	r2, [pc, #80]	; (1cda4 <k_poll_event_init+0x80>)
   1cd52:	4815      	ldr	r0, [pc, #84]	; (1cda8 <k_poll_event_init+0x84>)
   1cd54:	232f      	movs	r3, #47	; 0x2f
   1cd56:	f000 fd2d 	bl	1d7b4 <printk>
   1cd5a:	4816      	ldr	r0, [pc, #88]	; (1cdb4 <k_poll_event_init+0x90>)
   1cd5c:	f000 fd2a 	bl	1d7b4 <printk>
   1cd60:	4810      	ldr	r0, [pc, #64]	; (1cda4 <k_poll_event_init+0x80>)
   1cd62:	212f      	movs	r1, #47	; 0x2f
   1cd64:	f000 ff80 	bl	1dc68 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   1cd68:	b966      	cbnz	r6, 1cd84 <k_poll_event_init+0x60>
   1cd6a:	4913      	ldr	r1, [pc, #76]	; (1cdb8 <k_poll_event_init+0x94>)
   1cd6c:	4a0d      	ldr	r2, [pc, #52]	; (1cda4 <k_poll_event_init+0x80>)
   1cd6e:	480e      	ldr	r0, [pc, #56]	; (1cda8 <k_poll_event_init+0x84>)
   1cd70:	2330      	movs	r3, #48	; 0x30
   1cd72:	f000 fd1f 	bl	1d7b4 <printk>
   1cd76:	4811      	ldr	r0, [pc, #68]	; (1cdbc <k_poll_event_init+0x98>)
   1cd78:	f000 fd1c 	bl	1d7b4 <printk>
   1cd7c:	4809      	ldr	r0, [pc, #36]	; (1cda4 <k_poll_event_init+0x80>)
   1cd7e:	2130      	movs	r1, #48	; 0x30
   1cd80:	f000 ff72 	bl	1dc68 <assert_post_action>
	event->poller = NULL;
   1cd84:	2300      	movs	r3, #0
	event->type = type;
   1cd86:	04e4      	lsls	r4, r4, #19
   1cd88:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   1cd8a:	60ab      	str	r3, [r5, #8]
	event->type = type;
   1cd8c:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
   1cd90:	7b2b      	ldrb	r3, [r5, #12]
   1cd92:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   1cd96:	433c      	orrs	r4, r7
   1cd98:	431c      	orrs	r4, r3
	event->obj = obj;
   1cd9a:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   1cd9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cda0:	00023245 	.word	0x00023245
   1cda4:	000230f8 	.word	0x000230f8
   1cda8:	00021650 	.word	0x00021650
   1cdac:	00023265 	.word	0x00023265
   1cdb0:	0002328b 	.word	0x0002328b
   1cdb4:	000232af 	.word	0x000232af
   1cdb8:	000232bf 	.word	0x000232bf
   1cdbc:	000232d2 	.word	0x000232d2

0001cdc0 <z_impl_k_poll>:
{
   1cdc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1cdc4:	461f      	mov	r7, r3
	struct z_poller *poller = &_current->poller;
   1cdc6:	4b75      	ldr	r3, [pc, #468]	; (1cf9c <z_impl_k_poll+0x1dc>)
   1cdc8:	689d      	ldr	r5, [r3, #8]
	poller->is_polling = true;
   1cdca:	2301      	movs	r3, #1
{
   1cdcc:	4604      	mov	r4, r0
   1cdce:	4688      	mov	r8, r1
   1cdd0:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   1cdd2:	f105 0960 	add.w	r9, r5, #96	; 0x60
	poller->is_polling = true;
   1cdd6:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   1cdda:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
   1cdde:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1cde2:	b173      	cbz	r3, 1ce02 <z_impl_k_poll+0x42>
   1cde4:	496e      	ldr	r1, [pc, #440]	; (1cfa0 <z_impl_k_poll+0x1e0>)
   1cde6:	4a6f      	ldr	r2, [pc, #444]	; (1cfa4 <z_impl_k_poll+0x1e4>)
   1cde8:	486f      	ldr	r0, [pc, #444]	; (1cfa8 <z_impl_k_poll+0x1e8>)
   1cdea:	f44f 738d 	mov.w	r3, #282	; 0x11a
   1cdee:	f000 fce1 	bl	1d7b4 <printk>
   1cdf2:	486e      	ldr	r0, [pc, #440]	; (1cfac <z_impl_k_poll+0x1ec>)
   1cdf4:	f000 fcde 	bl	1d7b4 <printk>
   1cdf8:	486a      	ldr	r0, [pc, #424]	; (1cfa4 <z_impl_k_poll+0x1e4>)
   1cdfa:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1cdfe:	f000 ff33 	bl	1dc68 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   1ce02:	b974      	cbnz	r4, 1ce22 <z_impl_k_poll+0x62>
   1ce04:	496a      	ldr	r1, [pc, #424]	; (1cfb0 <z_impl_k_poll+0x1f0>)
   1ce06:	4a67      	ldr	r2, [pc, #412]	; (1cfa4 <z_impl_k_poll+0x1e4>)
   1ce08:	4867      	ldr	r0, [pc, #412]	; (1cfa8 <z_impl_k_poll+0x1e8>)
   1ce0a:	f240 131b 	movw	r3, #283	; 0x11b
   1ce0e:	f000 fcd1 	bl	1d7b4 <printk>
   1ce12:	4868      	ldr	r0, [pc, #416]	; (1cfb4 <z_impl_k_poll+0x1f4>)
   1ce14:	f000 fcce 	bl	1d7b4 <printk>
   1ce18:	4862      	ldr	r0, [pc, #392]	; (1cfa4 <z_impl_k_poll+0x1e4>)
   1ce1a:	f240 111b 	movw	r1, #283	; 0x11b
   1ce1e:	f000 ff23 	bl	1dc68 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1ce22:	f1b8 0f00 	cmp.w	r8, #0
   1ce26:	da0e      	bge.n	1ce46 <z_impl_k_poll+0x86>
   1ce28:	4963      	ldr	r1, [pc, #396]	; (1cfb8 <z_impl_k_poll+0x1f8>)
   1ce2a:	4a5e      	ldr	r2, [pc, #376]	; (1cfa4 <z_impl_k_poll+0x1e4>)
   1ce2c:	485e      	ldr	r0, [pc, #376]	; (1cfa8 <z_impl_k_poll+0x1e8>)
   1ce2e:	f44f 738e 	mov.w	r3, #284	; 0x11c
   1ce32:	f000 fcbf 	bl	1d7b4 <printk>
   1ce36:	4861      	ldr	r0, [pc, #388]	; (1cfbc <z_impl_k_poll+0x1fc>)
   1ce38:	f000 fcbc 	bl	1d7b4 <printk>
   1ce3c:	4859      	ldr	r0, [pc, #356]	; (1cfa4 <z_impl_k_poll+0x1e4>)
   1ce3e:	f44f 718e 	mov.w	r1, #284	; 0x11c
   1ce42:	f000 ff11 	bl	1dc68 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   1ce46:	ea56 0307 	orrs.w	r3, r6, r7
   1ce4a:	bf0c      	ite	eq
   1ce4c:	2301      	moveq	r3, #1
   1ce4e:	2300      	movne	r3, #0
   1ce50:	4641      	mov	r1, r8
   1ce52:	464a      	mov	r2, r9
   1ce54:	4620      	mov	r0, r4
   1ce56:	f7ff fdcd 	bl	1c9f4 <register_events>
   1ce5a:	4680      	mov	r8, r0
	__asm__ volatile(
   1ce5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce60:	f3ef 8911 	mrs	r9, BASEPRI
   1ce64:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ce6c:	4854      	ldr	r0, [pc, #336]	; (1cfc0 <z_impl_k_poll+0x200>)
   1ce6e:	f7fc fd29 	bl	198c4 <z_spin_lock_valid>
   1ce72:	b968      	cbnz	r0, 1ce90 <z_impl_k_poll+0xd0>
   1ce74:	4a53      	ldr	r2, [pc, #332]	; (1cfc4 <z_impl_k_poll+0x204>)
   1ce76:	4954      	ldr	r1, [pc, #336]	; (1cfc8 <z_impl_k_poll+0x208>)
   1ce78:	484b      	ldr	r0, [pc, #300]	; (1cfa8 <z_impl_k_poll+0x1e8>)
   1ce7a:	2381      	movs	r3, #129	; 0x81
   1ce7c:	f000 fc9a 	bl	1d7b4 <printk>
   1ce80:	494f      	ldr	r1, [pc, #316]	; (1cfc0 <z_impl_k_poll+0x200>)
   1ce82:	4852      	ldr	r0, [pc, #328]	; (1cfcc <z_impl_k_poll+0x20c>)
   1ce84:	f000 fc96 	bl	1d7b4 <printk>
   1ce88:	484e      	ldr	r0, [pc, #312]	; (1cfc4 <z_impl_k_poll+0x204>)
   1ce8a:	2181      	movs	r1, #129	; 0x81
   1ce8c:	f000 feec 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ce90:	484b      	ldr	r0, [pc, #300]	; (1cfc0 <z_impl_k_poll+0x200>)
   1ce92:	f7fc fd35 	bl	19900 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   1ce96:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   1ce9a:	b9fb      	cbnz	r3, 1cedc <z_impl_k_poll+0x11c>
		clear_event_registrations(events, events_registered, key);
   1ce9c:	4620      	mov	r0, r4
   1ce9e:	464a      	mov	r2, r9
   1cea0:	4641      	mov	r1, r8
   1cea2:	f7ff fcd9 	bl	1c858 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cea6:	4846      	ldr	r0, [pc, #280]	; (1cfc0 <z_impl_k_poll+0x200>)
   1cea8:	f7fc fd1a 	bl	198e0 <z_spin_unlock_valid>
   1ceac:	b968      	cbnz	r0, 1ceca <z_impl_k_poll+0x10a>
   1ceae:	4a45      	ldr	r2, [pc, #276]	; (1cfc4 <z_impl_k_poll+0x204>)
   1ceb0:	4947      	ldr	r1, [pc, #284]	; (1cfd0 <z_impl_k_poll+0x210>)
   1ceb2:	483d      	ldr	r0, [pc, #244]	; (1cfa8 <z_impl_k_poll+0x1e8>)
   1ceb4:	23ac      	movs	r3, #172	; 0xac
   1ceb6:	f000 fc7d 	bl	1d7b4 <printk>
   1ceba:	4941      	ldr	r1, [pc, #260]	; (1cfc0 <z_impl_k_poll+0x200>)
   1cebc:	4845      	ldr	r0, [pc, #276]	; (1cfd4 <z_impl_k_poll+0x214>)
   1cebe:	f000 fc79 	bl	1d7b4 <printk>
   1cec2:	4840      	ldr	r0, [pc, #256]	; (1cfc4 <z_impl_k_poll+0x204>)
   1cec4:	21ac      	movs	r1, #172	; 0xac
   1cec6:	f000 fecf 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1ceca:	f389 8811 	msr	BASEPRI, r9
   1cece:	f3bf 8f6f 	isb	sy
		return 0;
   1ced2:	2500      	movs	r5, #0
}
   1ced4:	4628      	mov	r0, r5
   1ced6:	b003      	add	sp, #12
   1ced8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   1cedc:	2300      	movs	r3, #0
   1cede:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1cee2:	ea56 0307 	orrs.w	r3, r6, r7
   1cee6:	d118      	bne.n	1cf1a <z_impl_k_poll+0x15a>
   1cee8:	4835      	ldr	r0, [pc, #212]	; (1cfc0 <z_impl_k_poll+0x200>)
   1ceea:	f7fc fcf9 	bl	198e0 <z_spin_unlock_valid>
   1ceee:	b968      	cbnz	r0, 1cf0c <z_impl_k_poll+0x14c>
   1cef0:	4a34      	ldr	r2, [pc, #208]	; (1cfc4 <z_impl_k_poll+0x204>)
   1cef2:	4937      	ldr	r1, [pc, #220]	; (1cfd0 <z_impl_k_poll+0x210>)
   1cef4:	482c      	ldr	r0, [pc, #176]	; (1cfa8 <z_impl_k_poll+0x1e8>)
   1cef6:	23ac      	movs	r3, #172	; 0xac
   1cef8:	f000 fc5c 	bl	1d7b4 <printk>
   1cefc:	4930      	ldr	r1, [pc, #192]	; (1cfc0 <z_impl_k_poll+0x200>)
   1cefe:	4835      	ldr	r0, [pc, #212]	; (1cfd4 <z_impl_k_poll+0x214>)
   1cf00:	f000 fc58 	bl	1d7b4 <printk>
   1cf04:	482f      	ldr	r0, [pc, #188]	; (1cfc4 <z_impl_k_poll+0x204>)
   1cf06:	21ac      	movs	r1, #172	; 0xac
   1cf08:	f000 feae 	bl	1dc68 <assert_post_action>
   1cf0c:	f389 8811 	msr	BASEPRI, r9
   1cf10:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1cf14:	f06f 050a 	mvn.w	r5, #10
   1cf18:	e7dc      	b.n	1ced4 <z_impl_k_poll+0x114>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1cf1a:	e9cd 6700 	strd	r6, r7, [sp]
   1cf1e:	4a2e      	ldr	r2, [pc, #184]	; (1cfd8 <z_impl_k_poll+0x218>)
   1cf20:	4827      	ldr	r0, [pc, #156]	; (1cfc0 <z_impl_k_poll+0x200>)
   1cf22:	4649      	mov	r1, r9
   1cf24:	f7fe fb5c 	bl	1b5e0 <z_pend_curr>
   1cf28:	4605      	mov	r5, r0
	__asm__ volatile(
   1cf2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cf2e:	f3ef 8611 	mrs	r6, BASEPRI
   1cf32:	f383 8812 	msr	BASEPRI_MAX, r3
   1cf36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cf3a:	4821      	ldr	r0, [pc, #132]	; (1cfc0 <z_impl_k_poll+0x200>)
   1cf3c:	f7fc fcc2 	bl	198c4 <z_spin_lock_valid>
   1cf40:	b968      	cbnz	r0, 1cf5e <z_impl_k_poll+0x19e>
   1cf42:	4a20      	ldr	r2, [pc, #128]	; (1cfc4 <z_impl_k_poll+0x204>)
   1cf44:	4920      	ldr	r1, [pc, #128]	; (1cfc8 <z_impl_k_poll+0x208>)
   1cf46:	4818      	ldr	r0, [pc, #96]	; (1cfa8 <z_impl_k_poll+0x1e8>)
   1cf48:	2381      	movs	r3, #129	; 0x81
   1cf4a:	f000 fc33 	bl	1d7b4 <printk>
   1cf4e:	491c      	ldr	r1, [pc, #112]	; (1cfc0 <z_impl_k_poll+0x200>)
   1cf50:	481e      	ldr	r0, [pc, #120]	; (1cfcc <z_impl_k_poll+0x20c>)
   1cf52:	f000 fc2f 	bl	1d7b4 <printk>
   1cf56:	481b      	ldr	r0, [pc, #108]	; (1cfc4 <z_impl_k_poll+0x204>)
   1cf58:	2181      	movs	r1, #129	; 0x81
   1cf5a:	f000 fe85 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cf5e:	4818      	ldr	r0, [pc, #96]	; (1cfc0 <z_impl_k_poll+0x200>)
   1cf60:	f7fc fcce 	bl	19900 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1cf64:	4620      	mov	r0, r4
   1cf66:	4632      	mov	r2, r6
   1cf68:	4641      	mov	r1, r8
   1cf6a:	f7ff fc75 	bl	1c858 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cf6e:	4814      	ldr	r0, [pc, #80]	; (1cfc0 <z_impl_k_poll+0x200>)
   1cf70:	f7fc fcb6 	bl	198e0 <z_spin_unlock_valid>
   1cf74:	b968      	cbnz	r0, 1cf92 <z_impl_k_poll+0x1d2>
   1cf76:	4a13      	ldr	r2, [pc, #76]	; (1cfc4 <z_impl_k_poll+0x204>)
   1cf78:	4915      	ldr	r1, [pc, #84]	; (1cfd0 <z_impl_k_poll+0x210>)
   1cf7a:	480b      	ldr	r0, [pc, #44]	; (1cfa8 <z_impl_k_poll+0x1e8>)
   1cf7c:	23ac      	movs	r3, #172	; 0xac
   1cf7e:	f000 fc19 	bl	1d7b4 <printk>
   1cf82:	490f      	ldr	r1, [pc, #60]	; (1cfc0 <z_impl_k_poll+0x200>)
   1cf84:	4813      	ldr	r0, [pc, #76]	; (1cfd4 <z_impl_k_poll+0x214>)
   1cf86:	f000 fc15 	bl	1d7b4 <printk>
   1cf8a:	480e      	ldr	r0, [pc, #56]	; (1cfc4 <z_impl_k_poll+0x204>)
   1cf8c:	21ac      	movs	r1, #172	; 0xac
   1cf8e:	f000 fe6b 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1cf92:	f386 8811 	msr	BASEPRI, r6
   1cf96:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1cf9a:	e79b      	b.n	1ced4 <z_impl_k_poll+0x114>
   1cf9c:	2000203c 	.word	0x2000203c
   1cfa0:	00022cd8 	.word	0x00022cd8
   1cfa4:	000230f8 	.word	0x000230f8
   1cfa8:	00021650 	.word	0x00021650
   1cfac:	000224f9 	.word	0x000224f9
   1cfb0:	000232ec 	.word	0x000232ec
   1cfb4:	00023302 	.word	0x00023302
   1cfb8:	00023311 	.word	0x00023311
   1cfbc:	00023321 	.word	0x00023321
   1cfc0:	20002094 	.word	0x20002094
   1cfc4:	00021710 	.word	0x00021710
   1cfc8:	00021762 	.word	0x00021762
   1cfcc:	00021777 	.word	0x00021777
   1cfd0:	00021736 	.word	0x00021736
   1cfd4:	0002174d 	.word	0x0002174d
   1cfd8:	20000504 	.word	0x20000504

0001cfdc <z_impl_k_poll_signal_raise>:
{
   1cfdc:	b570      	push	{r4, r5, r6, lr}
   1cfde:	4604      	mov	r4, r0
   1cfe0:	460d      	mov	r5, r1
	__asm__ volatile(
   1cfe2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cfe6:	f3ef 8611 	mrs	r6, BASEPRI
   1cfea:	f383 8812 	msr	BASEPRI_MAX, r3
   1cfee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cff2:	4821      	ldr	r0, [pc, #132]	; (1d078 <z_impl_k_poll_signal_raise+0x9c>)
   1cff4:	f7fc fc66 	bl	198c4 <z_spin_lock_valid>
   1cff8:	b968      	cbnz	r0, 1d016 <z_impl_k_poll_signal_raise+0x3a>
   1cffa:	4a20      	ldr	r2, [pc, #128]	; (1d07c <z_impl_k_poll_signal_raise+0xa0>)
   1cffc:	4920      	ldr	r1, [pc, #128]	; (1d080 <z_impl_k_poll_signal_raise+0xa4>)
   1cffe:	4821      	ldr	r0, [pc, #132]	; (1d084 <z_impl_k_poll_signal_raise+0xa8>)
   1d000:	2381      	movs	r3, #129	; 0x81
   1d002:	f000 fbd7 	bl	1d7b4 <printk>
   1d006:	491c      	ldr	r1, [pc, #112]	; (1d078 <z_impl_k_poll_signal_raise+0x9c>)
   1d008:	481f      	ldr	r0, [pc, #124]	; (1d088 <z_impl_k_poll_signal_raise+0xac>)
   1d00a:	f000 fbd3 	bl	1d7b4 <printk>
   1d00e:	481b      	ldr	r0, [pc, #108]	; (1d07c <z_impl_k_poll_signal_raise+0xa0>)
   1d010:	2181      	movs	r1, #129	; 0x81
   1d012:	f000 fe29 	bl	1dc68 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d016:	4818      	ldr	r0, [pc, #96]	; (1d078 <z_impl_k_poll_signal_raise+0x9c>)
   1d018:	f7fc fc72 	bl	19900 <z_spin_lock_set_owner>
	return list->head == list;
   1d01c:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   1d01e:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   1d020:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1d022:	4284      	cmp	r4, r0
   1d024:	60a1      	str	r1, [r4, #8]
   1d026:	d117      	bne.n	1d058 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d028:	4813      	ldr	r0, [pc, #76]	; (1d078 <z_impl_k_poll_signal_raise+0x9c>)
   1d02a:	f7fc fc59 	bl	198e0 <z_spin_unlock_valid>
   1d02e:	b968      	cbnz	r0, 1d04c <z_impl_k_poll_signal_raise+0x70>
   1d030:	4a12      	ldr	r2, [pc, #72]	; (1d07c <z_impl_k_poll_signal_raise+0xa0>)
   1d032:	4916      	ldr	r1, [pc, #88]	; (1d08c <z_impl_k_poll_signal_raise+0xb0>)
   1d034:	4813      	ldr	r0, [pc, #76]	; (1d084 <z_impl_k_poll_signal_raise+0xa8>)
   1d036:	23ac      	movs	r3, #172	; 0xac
   1d038:	f000 fbbc 	bl	1d7b4 <printk>
   1d03c:	490e      	ldr	r1, [pc, #56]	; (1d078 <z_impl_k_poll_signal_raise+0x9c>)
   1d03e:	4814      	ldr	r0, [pc, #80]	; (1d090 <z_impl_k_poll_signal_raise+0xb4>)
   1d040:	f000 fbb8 	bl	1d7b4 <printk>
   1d044:	480d      	ldr	r0, [pc, #52]	; (1d07c <z_impl_k_poll_signal_raise+0xa0>)
   1d046:	21ac      	movs	r1, #172	; 0xac
   1d048:	f000 fe0e 	bl	1dc68 <assert_post_action>
	__asm__ volatile(
   1d04c:	f386 8811 	msr	BASEPRI, r6
   1d050:	f3bf 8f6f 	isb	sy
		return 0;
   1d054:	2400      	movs	r4, #0
   1d056:	e00d      	b.n	1d074 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
   1d058:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1d05c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d05e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d060:	2300      	movs	r3, #0
	node->prev = NULL;
   1d062:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d066:	f7ff fde7 	bl	1cc38 <signal_poll_event>
	z_reschedule(&lock, key);
   1d06a:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d06c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1d06e:	4802      	ldr	r0, [pc, #8]	; (1d078 <z_impl_k_poll_signal_raise+0x9c>)
   1d070:	f7fd fe64 	bl	1ad3c <z_reschedule>
}
   1d074:	4620      	mov	r0, r4
   1d076:	bd70      	pop	{r4, r5, r6, pc}
   1d078:	20002094 	.word	0x20002094
   1d07c:	00021710 	.word	0x00021710
   1d080:	00021762 	.word	0x00021762
   1d084:	00021650 	.word	0x00021650
   1d088:	00021777 	.word	0x00021777
   1d08c:	00021736 	.word	0x00021736
   1d090:	0002174d 	.word	0x0002174d

0001d094 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1d094:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d096:	4606      	mov	r6, r0
   1d098:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1d09a:	f003 fb62 	bl	20762 <k_is_in_isr>
   1d09e:	b980      	cbnz	r0, 1d0c2 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1d0a0:	4b15      	ldr	r3, [pc, #84]	; (1d0f8 <z_thread_aligned_alloc+0x64>)
   1d0a2:	689b      	ldr	r3, [r3, #8]
   1d0a4:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1d0a6:	b31c      	cbz	r4, 1d0f0 <z_thread_aligned_alloc+0x5c>
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   1d0a8:	2204      	movs	r2, #4
   1d0aa:	18aa      	adds	r2, r5, r2
   1d0ac:	d209      	bcs.n	1d0c2 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1d0ae:	2000      	movs	r0, #0
   1d0b0:	2100      	movs	r1, #0
   1d0b2:	e9cd 0100 	strd	r0, r1, [sp]
   1d0b6:	f046 0104 	orr.w	r1, r6, #4
   1d0ba:	4620      	mov	r0, r4
   1d0bc:	f7fc f8b2 	bl	19224 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1d0c0:	b908      	cbnz	r0, 1d0c6 <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1d0c2:	2400      	movs	r4, #0
	}

	return ret;
   1d0c4:	e014      	b.n	1d0f0 <z_thread_aligned_alloc+0x5c>
	*heap_ref = heap;
   1d0c6:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1d0c8:	1d04      	adds	r4, r0, #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   1d0ca:	b18e      	cbz	r6, 1d0f0 <z_thread_aligned_alloc+0x5c>
   1d0cc:	1e73      	subs	r3, r6, #1
   1d0ce:	421c      	tst	r4, r3
   1d0d0:	d00e      	beq.n	1d0f0 <z_thread_aligned_alloc+0x5c>
   1d0d2:	4a0a      	ldr	r2, [pc, #40]	; (1d0fc <z_thread_aligned_alloc+0x68>)
   1d0d4:	490a      	ldr	r1, [pc, #40]	; (1d100 <z_thread_aligned_alloc+0x6c>)
   1d0d6:	480b      	ldr	r0, [pc, #44]	; (1d104 <z_thread_aligned_alloc+0x70>)
   1d0d8:	2325      	movs	r3, #37	; 0x25
   1d0da:	f000 fb6b 	bl	1d7b4 <printk>
   1d0de:	480a      	ldr	r0, [pc, #40]	; (1d108 <z_thread_aligned_alloc+0x74>)
   1d0e0:	4621      	mov	r1, r4
   1d0e2:	4632      	mov	r2, r6
   1d0e4:	f000 fb66 	bl	1d7b4 <printk>
   1d0e8:	4804      	ldr	r0, [pc, #16]	; (1d0fc <z_thread_aligned_alloc+0x68>)
   1d0ea:	2125      	movs	r1, #37	; 0x25
   1d0ec:	f000 fdbc 	bl	1dc68 <assert_post_action>
}
   1d0f0:	4620      	mov	r0, r4
   1d0f2:	b002      	add	sp, #8
   1d0f4:	bd70      	pop	{r4, r5, r6, pc}
   1d0f6:	bf00      	nop
   1d0f8:	2000203c 	.word	0x2000203c
   1d0fc:	0002332e 	.word	0x0002332e
   1d100:	00023352 	.word	0x00023352
   1d104:	00021650 	.word	0x00021650
   1d108:	00023384 	.word	0x00023384

0001d10c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1d10c:	4a02      	ldr	r2, [pc, #8]	; (1d118 <boot_banner+0xc>)
   1d10e:	4903      	ldr	r1, [pc, #12]	; (1d11c <boot_banner+0x10>)
   1d110:	4803      	ldr	r0, [pc, #12]	; (1d120 <boot_banner+0x14>)
   1d112:	f000 bb4f 	b.w	1d7b4 <printk>
   1d116:	bf00      	nop
   1d118:	000224fb 	.word	0x000224fb
   1d11c:	000233ac 	.word	0x000233ac
   1d120:	000233b8 	.word	0x000233b8

0001d124 <_free_r>:
   1d124:	b538      	push	{r3, r4, r5, lr}
   1d126:	4605      	mov	r5, r0
   1d128:	2900      	cmp	r1, #0
   1d12a:	d045      	beq.n	1d1b8 <_free_r+0x94>
   1d12c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1d130:	1f0c      	subs	r4, r1, #4
   1d132:	2b00      	cmp	r3, #0
   1d134:	bfb8      	it	lt
   1d136:	18e4      	addlt	r4, r4, r3
   1d138:	f000 f8e0 	bl	1d2fc <__malloc_lock>
   1d13c:	4a1f      	ldr	r2, [pc, #124]	; (1d1bc <_free_r+0x98>)
   1d13e:	6813      	ldr	r3, [r2, #0]
   1d140:	4610      	mov	r0, r2
   1d142:	b933      	cbnz	r3, 1d152 <_free_r+0x2e>
   1d144:	6063      	str	r3, [r4, #4]
   1d146:	6014      	str	r4, [r2, #0]
   1d148:	4628      	mov	r0, r5
   1d14a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d14e:	f000 b8db 	b.w	1d308 <__malloc_unlock>
   1d152:	42a3      	cmp	r3, r4
   1d154:	d90b      	bls.n	1d16e <_free_r+0x4a>
   1d156:	6821      	ldr	r1, [r4, #0]
   1d158:	1862      	adds	r2, r4, r1
   1d15a:	4293      	cmp	r3, r2
   1d15c:	bf04      	itt	eq
   1d15e:	681a      	ldreq	r2, [r3, #0]
   1d160:	685b      	ldreq	r3, [r3, #4]
   1d162:	6063      	str	r3, [r4, #4]
   1d164:	bf04      	itt	eq
   1d166:	1852      	addeq	r2, r2, r1
   1d168:	6022      	streq	r2, [r4, #0]
   1d16a:	6004      	str	r4, [r0, #0]
   1d16c:	e7ec      	b.n	1d148 <_free_r+0x24>
   1d16e:	461a      	mov	r2, r3
   1d170:	685b      	ldr	r3, [r3, #4]
   1d172:	b10b      	cbz	r3, 1d178 <_free_r+0x54>
   1d174:	42a3      	cmp	r3, r4
   1d176:	d9fa      	bls.n	1d16e <_free_r+0x4a>
   1d178:	6811      	ldr	r1, [r2, #0]
   1d17a:	1850      	adds	r0, r2, r1
   1d17c:	42a0      	cmp	r0, r4
   1d17e:	d10b      	bne.n	1d198 <_free_r+0x74>
   1d180:	6820      	ldr	r0, [r4, #0]
   1d182:	4401      	add	r1, r0
   1d184:	1850      	adds	r0, r2, r1
   1d186:	4283      	cmp	r3, r0
   1d188:	6011      	str	r1, [r2, #0]
   1d18a:	d1dd      	bne.n	1d148 <_free_r+0x24>
   1d18c:	6818      	ldr	r0, [r3, #0]
   1d18e:	685b      	ldr	r3, [r3, #4]
   1d190:	6053      	str	r3, [r2, #4]
   1d192:	4401      	add	r1, r0
   1d194:	6011      	str	r1, [r2, #0]
   1d196:	e7d7      	b.n	1d148 <_free_r+0x24>
   1d198:	d902      	bls.n	1d1a0 <_free_r+0x7c>
   1d19a:	230c      	movs	r3, #12
   1d19c:	602b      	str	r3, [r5, #0]
   1d19e:	e7d3      	b.n	1d148 <_free_r+0x24>
   1d1a0:	6820      	ldr	r0, [r4, #0]
   1d1a2:	1821      	adds	r1, r4, r0
   1d1a4:	428b      	cmp	r3, r1
   1d1a6:	bf04      	itt	eq
   1d1a8:	6819      	ldreq	r1, [r3, #0]
   1d1aa:	685b      	ldreq	r3, [r3, #4]
   1d1ac:	6063      	str	r3, [r4, #4]
   1d1ae:	bf04      	itt	eq
   1d1b0:	1809      	addeq	r1, r1, r0
   1d1b2:	6021      	streq	r1, [r4, #0]
   1d1b4:	6054      	str	r4, [r2, #4]
   1d1b6:	e7c7      	b.n	1d148 <_free_r+0x24>
   1d1b8:	bd38      	pop	{r3, r4, r5, pc}
   1d1ba:	bf00      	nop
   1d1bc:	20002098 	.word	0x20002098

0001d1c0 <_malloc_r>:
   1d1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d1c2:	1ccd      	adds	r5, r1, #3
   1d1c4:	f025 0503 	bic.w	r5, r5, #3
   1d1c8:	3508      	adds	r5, #8
   1d1ca:	2d0c      	cmp	r5, #12
   1d1cc:	bf38      	it	cc
   1d1ce:	250c      	movcc	r5, #12
   1d1d0:	2d00      	cmp	r5, #0
   1d1d2:	4606      	mov	r6, r0
   1d1d4:	db01      	blt.n	1d1da <_malloc_r+0x1a>
   1d1d6:	42a9      	cmp	r1, r5
   1d1d8:	d903      	bls.n	1d1e2 <_malloc_r+0x22>
   1d1da:	230c      	movs	r3, #12
   1d1dc:	6033      	str	r3, [r6, #0]
   1d1de:	2000      	movs	r0, #0
   1d1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d1e2:	f000 f88b 	bl	1d2fc <__malloc_lock>
   1d1e6:	4921      	ldr	r1, [pc, #132]	; (1d26c <_malloc_r+0xac>)
   1d1e8:	680a      	ldr	r2, [r1, #0]
   1d1ea:	4614      	mov	r4, r2
   1d1ec:	b99c      	cbnz	r4, 1d216 <_malloc_r+0x56>
   1d1ee:	4f20      	ldr	r7, [pc, #128]	; (1d270 <_malloc_r+0xb0>)
   1d1f0:	683b      	ldr	r3, [r7, #0]
   1d1f2:	b923      	cbnz	r3, 1d1fe <_malloc_r+0x3e>
   1d1f4:	4621      	mov	r1, r4
   1d1f6:	4630      	mov	r0, r6
   1d1f8:	f000 f83c 	bl	1d274 <_sbrk_r>
   1d1fc:	6038      	str	r0, [r7, #0]
   1d1fe:	4629      	mov	r1, r5
   1d200:	4630      	mov	r0, r6
   1d202:	f000 f837 	bl	1d274 <_sbrk_r>
   1d206:	1c43      	adds	r3, r0, #1
   1d208:	d123      	bne.n	1d252 <_malloc_r+0x92>
   1d20a:	230c      	movs	r3, #12
   1d20c:	6033      	str	r3, [r6, #0]
   1d20e:	4630      	mov	r0, r6
   1d210:	f000 f87a 	bl	1d308 <__malloc_unlock>
   1d214:	e7e3      	b.n	1d1de <_malloc_r+0x1e>
   1d216:	6823      	ldr	r3, [r4, #0]
   1d218:	1b5b      	subs	r3, r3, r5
   1d21a:	d417      	bmi.n	1d24c <_malloc_r+0x8c>
   1d21c:	2b0b      	cmp	r3, #11
   1d21e:	d903      	bls.n	1d228 <_malloc_r+0x68>
   1d220:	6023      	str	r3, [r4, #0]
   1d222:	441c      	add	r4, r3
   1d224:	6025      	str	r5, [r4, #0]
   1d226:	e004      	b.n	1d232 <_malloc_r+0x72>
   1d228:	6863      	ldr	r3, [r4, #4]
   1d22a:	42a2      	cmp	r2, r4
   1d22c:	bf0c      	ite	eq
   1d22e:	600b      	streq	r3, [r1, #0]
   1d230:	6053      	strne	r3, [r2, #4]
   1d232:	4630      	mov	r0, r6
   1d234:	f000 f868 	bl	1d308 <__malloc_unlock>
   1d238:	f104 000b 	add.w	r0, r4, #11
   1d23c:	1d23      	adds	r3, r4, #4
   1d23e:	f020 0007 	bic.w	r0, r0, #7
   1d242:	1ac2      	subs	r2, r0, r3
   1d244:	d0cc      	beq.n	1d1e0 <_malloc_r+0x20>
   1d246:	1a1b      	subs	r3, r3, r0
   1d248:	50a3      	str	r3, [r4, r2]
   1d24a:	e7c9      	b.n	1d1e0 <_malloc_r+0x20>
   1d24c:	4622      	mov	r2, r4
   1d24e:	6864      	ldr	r4, [r4, #4]
   1d250:	e7cc      	b.n	1d1ec <_malloc_r+0x2c>
   1d252:	1cc4      	adds	r4, r0, #3
   1d254:	f024 0403 	bic.w	r4, r4, #3
   1d258:	42a0      	cmp	r0, r4
   1d25a:	d0e3      	beq.n	1d224 <_malloc_r+0x64>
   1d25c:	1a21      	subs	r1, r4, r0
   1d25e:	4630      	mov	r0, r6
   1d260:	f000 f808 	bl	1d274 <_sbrk_r>
   1d264:	3001      	adds	r0, #1
   1d266:	d1dd      	bne.n	1d224 <_malloc_r+0x64>
   1d268:	e7cf      	b.n	1d20a <_malloc_r+0x4a>
   1d26a:	bf00      	nop
   1d26c:	20002098 	.word	0x20002098
   1d270:	2000209c 	.word	0x2000209c

0001d274 <_sbrk_r>:
   1d274:	b538      	push	{r3, r4, r5, lr}
   1d276:	4d06      	ldr	r5, [pc, #24]	; (1d290 <_sbrk_r+0x1c>)
   1d278:	2300      	movs	r3, #0
   1d27a:	4604      	mov	r4, r0
   1d27c:	4608      	mov	r0, r1
   1d27e:	602b      	str	r3, [r5, #0]
   1d280:	f7f4 fe44 	bl	11f0c <_sbrk>
   1d284:	1c43      	adds	r3, r0, #1
   1d286:	d102      	bne.n	1d28e <_sbrk_r+0x1a>
   1d288:	682b      	ldr	r3, [r5, #0]
   1d28a:	b103      	cbz	r3, 1d28e <_sbrk_r+0x1a>
   1d28c:	6023      	str	r3, [r4, #0]
   1d28e:	bd38      	pop	{r3, r4, r5, pc}
   1d290:	200029f0 	.word	0x200029f0

0001d294 <sniprintf>:
   1d294:	b40c      	push	{r2, r3}
   1d296:	b530      	push	{r4, r5, lr}
   1d298:	4b17      	ldr	r3, [pc, #92]	; (1d2f8 <sniprintf+0x64>)
   1d29a:	1e0c      	subs	r4, r1, #0
   1d29c:	681d      	ldr	r5, [r3, #0]
   1d29e:	b09d      	sub	sp, #116	; 0x74
   1d2a0:	da08      	bge.n	1d2b4 <sniprintf+0x20>
   1d2a2:	238b      	movs	r3, #139	; 0x8b
   1d2a4:	602b      	str	r3, [r5, #0]
   1d2a6:	f04f 30ff 	mov.w	r0, #4294967295
   1d2aa:	b01d      	add	sp, #116	; 0x74
   1d2ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1d2b0:	b002      	add	sp, #8
   1d2b2:	4770      	bx	lr
   1d2b4:	f44f 7302 	mov.w	r3, #520	; 0x208
   1d2b8:	f8ad 3014 	strh.w	r3, [sp, #20]
   1d2bc:	bf14      	ite	ne
   1d2be:	f104 33ff 	addne.w	r3, r4, #4294967295
   1d2c2:	4623      	moveq	r3, r4
   1d2c4:	9304      	str	r3, [sp, #16]
   1d2c6:	9307      	str	r3, [sp, #28]
   1d2c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d2cc:	9002      	str	r0, [sp, #8]
   1d2ce:	9006      	str	r0, [sp, #24]
   1d2d0:	f8ad 3016 	strh.w	r3, [sp, #22]
   1d2d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1d2d6:	ab21      	add	r3, sp, #132	; 0x84
   1d2d8:	a902      	add	r1, sp, #8
   1d2da:	4628      	mov	r0, r5
   1d2dc:	9301      	str	r3, [sp, #4]
   1d2de:	f000 f819 	bl	1d314 <_svfiprintf_r>
   1d2e2:	1c43      	adds	r3, r0, #1
   1d2e4:	bfbc      	itt	lt
   1d2e6:	238b      	movlt	r3, #139	; 0x8b
   1d2e8:	602b      	strlt	r3, [r5, #0]
   1d2ea:	2c00      	cmp	r4, #0
   1d2ec:	d0dd      	beq.n	1d2aa <sniprintf+0x16>
   1d2ee:	9b02      	ldr	r3, [sp, #8]
   1d2f0:	2200      	movs	r2, #0
   1d2f2:	701a      	strb	r2, [r3, #0]
   1d2f4:	e7d9      	b.n	1d2aa <sniprintf+0x16>
   1d2f6:	bf00      	nop
   1d2f8:	2000050c 	.word	0x2000050c

0001d2fc <__malloc_lock>:
   1d2fc:	4801      	ldr	r0, [pc, #4]	; (1d304 <__malloc_lock+0x8>)
   1d2fe:	f7f4 be19 	b.w	11f34 <__retarget_lock_acquire_recursive>
   1d302:	bf00      	nop
   1d304:	20000634 	.word	0x20000634

0001d308 <__malloc_unlock>:
   1d308:	4801      	ldr	r0, [pc, #4]	; (1d310 <__malloc_unlock+0x8>)
   1d30a:	f7f4 be31 	b.w	11f70 <__retarget_lock_release_recursive>
   1d30e:	bf00      	nop
   1d310:	20000634 	.word	0x20000634

0001d314 <_svfiprintf_r>:
   1d314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d318:	4698      	mov	r8, r3
   1d31a:	898b      	ldrh	r3, [r1, #12]
   1d31c:	061b      	lsls	r3, r3, #24
   1d31e:	b09d      	sub	sp, #116	; 0x74
   1d320:	4607      	mov	r7, r0
   1d322:	460d      	mov	r5, r1
   1d324:	4614      	mov	r4, r2
   1d326:	d50e      	bpl.n	1d346 <_svfiprintf_r+0x32>
   1d328:	690b      	ldr	r3, [r1, #16]
   1d32a:	b963      	cbnz	r3, 1d346 <_svfiprintf_r+0x32>
   1d32c:	2140      	movs	r1, #64	; 0x40
   1d32e:	f7ff ff47 	bl	1d1c0 <_malloc_r>
   1d332:	6028      	str	r0, [r5, #0]
   1d334:	6128      	str	r0, [r5, #16]
   1d336:	b920      	cbnz	r0, 1d342 <_svfiprintf_r+0x2e>
   1d338:	230c      	movs	r3, #12
   1d33a:	603b      	str	r3, [r7, #0]
   1d33c:	f04f 30ff 	mov.w	r0, #4294967295
   1d340:	e0d1      	b.n	1d4e6 <_svfiprintf_r+0x1d2>
   1d342:	2340      	movs	r3, #64	; 0x40
   1d344:	616b      	str	r3, [r5, #20]
   1d346:	2300      	movs	r3, #0
   1d348:	9309      	str	r3, [sp, #36]	; 0x24
   1d34a:	2320      	movs	r3, #32
   1d34c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1d350:	f8cd 800c 	str.w	r8, [sp, #12]
   1d354:	2330      	movs	r3, #48	; 0x30
   1d356:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 1d500 <_svfiprintf_r+0x1ec>
   1d35a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1d35e:	f04f 0901 	mov.w	r9, #1
   1d362:	4623      	mov	r3, r4
   1d364:	469a      	mov	sl, r3
   1d366:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d36a:	b10a      	cbz	r2, 1d370 <_svfiprintf_r+0x5c>
   1d36c:	2a25      	cmp	r2, #37	; 0x25
   1d36e:	d1f9      	bne.n	1d364 <_svfiprintf_r+0x50>
   1d370:	ebba 0b04 	subs.w	fp, sl, r4
   1d374:	d00b      	beq.n	1d38e <_svfiprintf_r+0x7a>
   1d376:	465b      	mov	r3, fp
   1d378:	4622      	mov	r2, r4
   1d37a:	4629      	mov	r1, r5
   1d37c:	4638      	mov	r0, r7
   1d37e:	f003 fbb1 	bl	20ae4 <__ssputs_r>
   1d382:	3001      	adds	r0, #1
   1d384:	f000 80aa 	beq.w	1d4dc <_svfiprintf_r+0x1c8>
   1d388:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d38a:	445a      	add	r2, fp
   1d38c:	9209      	str	r2, [sp, #36]	; 0x24
   1d38e:	f89a 3000 	ldrb.w	r3, [sl]
   1d392:	2b00      	cmp	r3, #0
   1d394:	f000 80a2 	beq.w	1d4dc <_svfiprintf_r+0x1c8>
   1d398:	2300      	movs	r3, #0
   1d39a:	f04f 32ff 	mov.w	r2, #4294967295
   1d39e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1d3a2:	f10a 0a01 	add.w	sl, sl, #1
   1d3a6:	9304      	str	r3, [sp, #16]
   1d3a8:	9307      	str	r3, [sp, #28]
   1d3aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1d3ae:	931a      	str	r3, [sp, #104]	; 0x68
   1d3b0:	4654      	mov	r4, sl
   1d3b2:	2205      	movs	r2, #5
   1d3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
   1d3b8:	4851      	ldr	r0, [pc, #324]	; (1d500 <_svfiprintf_r+0x1ec>)
   1d3ba:	f7e2 fe91 	bl	e0 <memchr>
   1d3be:	9a04      	ldr	r2, [sp, #16]
   1d3c0:	b9d8      	cbnz	r0, 1d3fa <_svfiprintf_r+0xe6>
   1d3c2:	06d0      	lsls	r0, r2, #27
   1d3c4:	bf44      	itt	mi
   1d3c6:	2320      	movmi	r3, #32
   1d3c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1d3cc:	0711      	lsls	r1, r2, #28
   1d3ce:	bf44      	itt	mi
   1d3d0:	232b      	movmi	r3, #43	; 0x2b
   1d3d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1d3d6:	f89a 3000 	ldrb.w	r3, [sl]
   1d3da:	2b2a      	cmp	r3, #42	; 0x2a
   1d3dc:	d015      	beq.n	1d40a <_svfiprintf_r+0xf6>
   1d3de:	9a07      	ldr	r2, [sp, #28]
   1d3e0:	4654      	mov	r4, sl
   1d3e2:	2000      	movs	r0, #0
   1d3e4:	f04f 0c0a 	mov.w	ip, #10
   1d3e8:	4621      	mov	r1, r4
   1d3ea:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d3ee:	3b30      	subs	r3, #48	; 0x30
   1d3f0:	2b09      	cmp	r3, #9
   1d3f2:	d94e      	bls.n	1d492 <_svfiprintf_r+0x17e>
   1d3f4:	b1b0      	cbz	r0, 1d424 <_svfiprintf_r+0x110>
   1d3f6:	9207      	str	r2, [sp, #28]
   1d3f8:	e014      	b.n	1d424 <_svfiprintf_r+0x110>
   1d3fa:	eba0 0308 	sub.w	r3, r0, r8
   1d3fe:	fa09 f303 	lsl.w	r3, r9, r3
   1d402:	4313      	orrs	r3, r2
   1d404:	9304      	str	r3, [sp, #16]
   1d406:	46a2      	mov	sl, r4
   1d408:	e7d2      	b.n	1d3b0 <_svfiprintf_r+0x9c>
   1d40a:	9b03      	ldr	r3, [sp, #12]
   1d40c:	1d19      	adds	r1, r3, #4
   1d40e:	681b      	ldr	r3, [r3, #0]
   1d410:	9103      	str	r1, [sp, #12]
   1d412:	2b00      	cmp	r3, #0
   1d414:	bfbb      	ittet	lt
   1d416:	425b      	neglt	r3, r3
   1d418:	f042 0202 	orrlt.w	r2, r2, #2
   1d41c:	9307      	strge	r3, [sp, #28]
   1d41e:	9307      	strlt	r3, [sp, #28]
   1d420:	bfb8      	it	lt
   1d422:	9204      	strlt	r2, [sp, #16]
   1d424:	7823      	ldrb	r3, [r4, #0]
   1d426:	2b2e      	cmp	r3, #46	; 0x2e
   1d428:	d10c      	bne.n	1d444 <_svfiprintf_r+0x130>
   1d42a:	7863      	ldrb	r3, [r4, #1]
   1d42c:	2b2a      	cmp	r3, #42	; 0x2a
   1d42e:	d135      	bne.n	1d49c <_svfiprintf_r+0x188>
   1d430:	9b03      	ldr	r3, [sp, #12]
   1d432:	1d1a      	adds	r2, r3, #4
   1d434:	681b      	ldr	r3, [r3, #0]
   1d436:	9203      	str	r2, [sp, #12]
   1d438:	2b00      	cmp	r3, #0
   1d43a:	bfb8      	it	lt
   1d43c:	f04f 33ff 	movlt.w	r3, #4294967295
   1d440:	3402      	adds	r4, #2
   1d442:	9305      	str	r3, [sp, #20]
   1d444:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1d510 <_svfiprintf_r+0x1fc>
   1d448:	7821      	ldrb	r1, [r4, #0]
   1d44a:	2203      	movs	r2, #3
   1d44c:	4650      	mov	r0, sl
   1d44e:	f7e2 fe47 	bl	e0 <memchr>
   1d452:	b140      	cbz	r0, 1d466 <_svfiprintf_r+0x152>
   1d454:	2340      	movs	r3, #64	; 0x40
   1d456:	eba0 000a 	sub.w	r0, r0, sl
   1d45a:	fa03 f000 	lsl.w	r0, r3, r0
   1d45e:	9b04      	ldr	r3, [sp, #16]
   1d460:	4303      	orrs	r3, r0
   1d462:	3401      	adds	r4, #1
   1d464:	9304      	str	r3, [sp, #16]
   1d466:	f814 1b01 	ldrb.w	r1, [r4], #1
   1d46a:	4826      	ldr	r0, [pc, #152]	; (1d504 <_svfiprintf_r+0x1f0>)
   1d46c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1d470:	2206      	movs	r2, #6
   1d472:	f7e2 fe35 	bl	e0 <memchr>
   1d476:	2800      	cmp	r0, #0
   1d478:	d038      	beq.n	1d4ec <_svfiprintf_r+0x1d8>
   1d47a:	4b23      	ldr	r3, [pc, #140]	; (1d508 <_svfiprintf_r+0x1f4>)
   1d47c:	bb1b      	cbnz	r3, 1d4c6 <_svfiprintf_r+0x1b2>
   1d47e:	9b03      	ldr	r3, [sp, #12]
   1d480:	3307      	adds	r3, #7
   1d482:	f023 0307 	bic.w	r3, r3, #7
   1d486:	3308      	adds	r3, #8
   1d488:	9303      	str	r3, [sp, #12]
   1d48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d48c:	4433      	add	r3, r6
   1d48e:	9309      	str	r3, [sp, #36]	; 0x24
   1d490:	e767      	b.n	1d362 <_svfiprintf_r+0x4e>
   1d492:	fb0c 3202 	mla	r2, ip, r2, r3
   1d496:	460c      	mov	r4, r1
   1d498:	2001      	movs	r0, #1
   1d49a:	e7a5      	b.n	1d3e8 <_svfiprintf_r+0xd4>
   1d49c:	2300      	movs	r3, #0
   1d49e:	3401      	adds	r4, #1
   1d4a0:	9305      	str	r3, [sp, #20]
   1d4a2:	4619      	mov	r1, r3
   1d4a4:	f04f 0c0a 	mov.w	ip, #10
   1d4a8:	4620      	mov	r0, r4
   1d4aa:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d4ae:	3a30      	subs	r2, #48	; 0x30
   1d4b0:	2a09      	cmp	r2, #9
   1d4b2:	d903      	bls.n	1d4bc <_svfiprintf_r+0x1a8>
   1d4b4:	2b00      	cmp	r3, #0
   1d4b6:	d0c5      	beq.n	1d444 <_svfiprintf_r+0x130>
   1d4b8:	9105      	str	r1, [sp, #20]
   1d4ba:	e7c3      	b.n	1d444 <_svfiprintf_r+0x130>
   1d4bc:	fb0c 2101 	mla	r1, ip, r1, r2
   1d4c0:	4604      	mov	r4, r0
   1d4c2:	2301      	movs	r3, #1
   1d4c4:	e7f0      	b.n	1d4a8 <_svfiprintf_r+0x194>
   1d4c6:	ab03      	add	r3, sp, #12
   1d4c8:	9300      	str	r3, [sp, #0]
   1d4ca:	462a      	mov	r2, r5
   1d4cc:	4b0f      	ldr	r3, [pc, #60]	; (1d50c <_svfiprintf_r+0x1f8>)
   1d4ce:	a904      	add	r1, sp, #16
   1d4d0:	4638      	mov	r0, r7
   1d4d2:	f3af 8000 	nop.w
   1d4d6:	1c42      	adds	r2, r0, #1
   1d4d8:	4606      	mov	r6, r0
   1d4da:	d1d6      	bne.n	1d48a <_svfiprintf_r+0x176>
   1d4dc:	89ab      	ldrh	r3, [r5, #12]
   1d4de:	065b      	lsls	r3, r3, #25
   1d4e0:	f53f af2c 	bmi.w	1d33c <_svfiprintf_r+0x28>
   1d4e4:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d4e6:	b01d      	add	sp, #116	; 0x74
   1d4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4ec:	ab03      	add	r3, sp, #12
   1d4ee:	9300      	str	r3, [sp, #0]
   1d4f0:	462a      	mov	r2, r5
   1d4f2:	4b06      	ldr	r3, [pc, #24]	; (1d50c <_svfiprintf_r+0x1f8>)
   1d4f4:	a904      	add	r1, sp, #16
   1d4f6:	4638      	mov	r0, r7
   1d4f8:	f000 f80c 	bl	1d514 <_printf_i>
   1d4fc:	e7eb      	b.n	1d4d6 <_svfiprintf_r+0x1c2>
   1d4fe:	bf00      	nop
   1d500:	000234e0 	.word	0x000234e0
   1d504:	000234ea 	.word	0x000234ea
   1d508:	00000000 	.word	0x00000000
   1d50c:	00020ae5 	.word	0x00020ae5
   1d510:	000234e6 	.word	0x000234e6

0001d514 <_printf_i>:
   1d514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1d518:	460c      	mov	r4, r1
   1d51a:	4691      	mov	r9, r2
   1d51c:	7e27      	ldrb	r7, [r4, #24]
   1d51e:	990c      	ldr	r1, [sp, #48]	; 0x30
   1d520:	2f78      	cmp	r7, #120	; 0x78
   1d522:	4680      	mov	r8, r0
   1d524:	469a      	mov	sl, r3
   1d526:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1d52a:	d807      	bhi.n	1d53c <_printf_i+0x28>
   1d52c:	2f62      	cmp	r7, #98	; 0x62
   1d52e:	d80a      	bhi.n	1d546 <_printf_i+0x32>
   1d530:	2f00      	cmp	r7, #0
   1d532:	f000 80d8 	beq.w	1d6e6 <_printf_i+0x1d2>
   1d536:	2f58      	cmp	r7, #88	; 0x58
   1d538:	f000 80a3 	beq.w	1d682 <_printf_i+0x16e>
   1d53c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1d540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   1d544:	e03a      	b.n	1d5bc <_printf_i+0xa8>
   1d546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1d54a:	2b15      	cmp	r3, #21
   1d54c:	d8f6      	bhi.n	1d53c <_printf_i+0x28>
   1d54e:	a001      	add	r0, pc, #4	; (adr r0, 1d554 <_printf_i+0x40>)
   1d550:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1d554:	0001d5ad 	.word	0x0001d5ad
   1d558:	0001d5c1 	.word	0x0001d5c1
   1d55c:	0001d53d 	.word	0x0001d53d
   1d560:	0001d53d 	.word	0x0001d53d
   1d564:	0001d53d 	.word	0x0001d53d
   1d568:	0001d53d 	.word	0x0001d53d
   1d56c:	0001d5c1 	.word	0x0001d5c1
   1d570:	0001d53d 	.word	0x0001d53d
   1d574:	0001d53d 	.word	0x0001d53d
   1d578:	0001d53d 	.word	0x0001d53d
   1d57c:	0001d53d 	.word	0x0001d53d
   1d580:	0001d6cd 	.word	0x0001d6cd
   1d584:	0001d5f1 	.word	0x0001d5f1
   1d588:	0001d6af 	.word	0x0001d6af
   1d58c:	0001d53d 	.word	0x0001d53d
   1d590:	0001d53d 	.word	0x0001d53d
   1d594:	0001d6ef 	.word	0x0001d6ef
   1d598:	0001d53d 	.word	0x0001d53d
   1d59c:	0001d5f1 	.word	0x0001d5f1
   1d5a0:	0001d53d 	.word	0x0001d53d
   1d5a4:	0001d53d 	.word	0x0001d53d
   1d5a8:	0001d6b7 	.word	0x0001d6b7
   1d5ac:	680b      	ldr	r3, [r1, #0]
   1d5ae:	1d1a      	adds	r2, r3, #4
   1d5b0:	681b      	ldr	r3, [r3, #0]
   1d5b2:	600a      	str	r2, [r1, #0]
   1d5b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1d5b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1d5bc:	2301      	movs	r3, #1
   1d5be:	e0a3      	b.n	1d708 <_printf_i+0x1f4>
   1d5c0:	6825      	ldr	r5, [r4, #0]
   1d5c2:	6808      	ldr	r0, [r1, #0]
   1d5c4:	062e      	lsls	r6, r5, #24
   1d5c6:	f100 0304 	add.w	r3, r0, #4
   1d5ca:	d50a      	bpl.n	1d5e2 <_printf_i+0xce>
   1d5cc:	6805      	ldr	r5, [r0, #0]
   1d5ce:	600b      	str	r3, [r1, #0]
   1d5d0:	2d00      	cmp	r5, #0
   1d5d2:	da03      	bge.n	1d5dc <_printf_i+0xc8>
   1d5d4:	232d      	movs	r3, #45	; 0x2d
   1d5d6:	426d      	negs	r5, r5
   1d5d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1d5dc:	485e      	ldr	r0, [pc, #376]	; (1d758 <_printf_i+0x244>)
   1d5de:	230a      	movs	r3, #10
   1d5e0:	e019      	b.n	1d616 <_printf_i+0x102>
   1d5e2:	f015 0f40 	tst.w	r5, #64	; 0x40
   1d5e6:	6805      	ldr	r5, [r0, #0]
   1d5e8:	600b      	str	r3, [r1, #0]
   1d5ea:	bf18      	it	ne
   1d5ec:	b22d      	sxthne	r5, r5
   1d5ee:	e7ef      	b.n	1d5d0 <_printf_i+0xbc>
   1d5f0:	680b      	ldr	r3, [r1, #0]
   1d5f2:	6825      	ldr	r5, [r4, #0]
   1d5f4:	1d18      	adds	r0, r3, #4
   1d5f6:	6008      	str	r0, [r1, #0]
   1d5f8:	0628      	lsls	r0, r5, #24
   1d5fa:	d501      	bpl.n	1d600 <_printf_i+0xec>
   1d5fc:	681d      	ldr	r5, [r3, #0]
   1d5fe:	e002      	b.n	1d606 <_printf_i+0xf2>
   1d600:	0669      	lsls	r1, r5, #25
   1d602:	d5fb      	bpl.n	1d5fc <_printf_i+0xe8>
   1d604:	881d      	ldrh	r5, [r3, #0]
   1d606:	4854      	ldr	r0, [pc, #336]	; (1d758 <_printf_i+0x244>)
   1d608:	2f6f      	cmp	r7, #111	; 0x6f
   1d60a:	bf0c      	ite	eq
   1d60c:	2308      	moveq	r3, #8
   1d60e:	230a      	movne	r3, #10
   1d610:	2100      	movs	r1, #0
   1d612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1d616:	6866      	ldr	r6, [r4, #4]
   1d618:	60a6      	str	r6, [r4, #8]
   1d61a:	2e00      	cmp	r6, #0
   1d61c:	bfa2      	ittt	ge
   1d61e:	6821      	ldrge	r1, [r4, #0]
   1d620:	f021 0104 	bicge.w	r1, r1, #4
   1d624:	6021      	strge	r1, [r4, #0]
   1d626:	b90d      	cbnz	r5, 1d62c <_printf_i+0x118>
   1d628:	2e00      	cmp	r6, #0
   1d62a:	d04d      	beq.n	1d6c8 <_printf_i+0x1b4>
   1d62c:	4616      	mov	r6, r2
   1d62e:	fbb5 f1f3 	udiv	r1, r5, r3
   1d632:	fb03 5711 	mls	r7, r3, r1, r5
   1d636:	5dc7      	ldrb	r7, [r0, r7]
   1d638:	f806 7d01 	strb.w	r7, [r6, #-1]!
   1d63c:	462f      	mov	r7, r5
   1d63e:	42bb      	cmp	r3, r7
   1d640:	460d      	mov	r5, r1
   1d642:	d9f4      	bls.n	1d62e <_printf_i+0x11a>
   1d644:	2b08      	cmp	r3, #8
   1d646:	d10b      	bne.n	1d660 <_printf_i+0x14c>
   1d648:	6823      	ldr	r3, [r4, #0]
   1d64a:	07df      	lsls	r7, r3, #31
   1d64c:	d508      	bpl.n	1d660 <_printf_i+0x14c>
   1d64e:	6923      	ldr	r3, [r4, #16]
   1d650:	6861      	ldr	r1, [r4, #4]
   1d652:	4299      	cmp	r1, r3
   1d654:	bfde      	ittt	le
   1d656:	2330      	movle	r3, #48	; 0x30
   1d658:	f806 3c01 	strble.w	r3, [r6, #-1]
   1d65c:	f106 36ff 	addle.w	r6, r6, #4294967295
   1d660:	1b92      	subs	r2, r2, r6
   1d662:	6122      	str	r2, [r4, #16]
   1d664:	f8cd a000 	str.w	sl, [sp]
   1d668:	464b      	mov	r3, r9
   1d66a:	aa03      	add	r2, sp, #12
   1d66c:	4621      	mov	r1, r4
   1d66e:	4640      	mov	r0, r8
   1d670:	f003 fa93 	bl	20b9a <_printf_common>
   1d674:	3001      	adds	r0, #1
   1d676:	d14c      	bne.n	1d712 <_printf_i+0x1fe>
   1d678:	f04f 30ff 	mov.w	r0, #4294967295
   1d67c:	b004      	add	sp, #16
   1d67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d682:	4835      	ldr	r0, [pc, #212]	; (1d758 <_printf_i+0x244>)
   1d684:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   1d688:	6823      	ldr	r3, [r4, #0]
   1d68a:	680e      	ldr	r6, [r1, #0]
   1d68c:	061f      	lsls	r7, r3, #24
   1d68e:	f856 5b04 	ldr.w	r5, [r6], #4
   1d692:	600e      	str	r6, [r1, #0]
   1d694:	d514      	bpl.n	1d6c0 <_printf_i+0x1ac>
   1d696:	07d9      	lsls	r1, r3, #31
   1d698:	bf44      	itt	mi
   1d69a:	f043 0320 	orrmi.w	r3, r3, #32
   1d69e:	6023      	strmi	r3, [r4, #0]
   1d6a0:	b91d      	cbnz	r5, 1d6aa <_printf_i+0x196>
   1d6a2:	6823      	ldr	r3, [r4, #0]
   1d6a4:	f023 0320 	bic.w	r3, r3, #32
   1d6a8:	6023      	str	r3, [r4, #0]
   1d6aa:	2310      	movs	r3, #16
   1d6ac:	e7b0      	b.n	1d610 <_printf_i+0xfc>
   1d6ae:	6823      	ldr	r3, [r4, #0]
   1d6b0:	f043 0320 	orr.w	r3, r3, #32
   1d6b4:	6023      	str	r3, [r4, #0]
   1d6b6:	2378      	movs	r3, #120	; 0x78
   1d6b8:	4828      	ldr	r0, [pc, #160]	; (1d75c <_printf_i+0x248>)
   1d6ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   1d6be:	e7e3      	b.n	1d688 <_printf_i+0x174>
   1d6c0:	065e      	lsls	r6, r3, #25
   1d6c2:	bf48      	it	mi
   1d6c4:	b2ad      	uxthmi	r5, r5
   1d6c6:	e7e6      	b.n	1d696 <_printf_i+0x182>
   1d6c8:	4616      	mov	r6, r2
   1d6ca:	e7bb      	b.n	1d644 <_printf_i+0x130>
   1d6cc:	680b      	ldr	r3, [r1, #0]
   1d6ce:	6826      	ldr	r6, [r4, #0]
   1d6d0:	6960      	ldr	r0, [r4, #20]
   1d6d2:	1d1d      	adds	r5, r3, #4
   1d6d4:	600d      	str	r5, [r1, #0]
   1d6d6:	0635      	lsls	r5, r6, #24
   1d6d8:	681b      	ldr	r3, [r3, #0]
   1d6da:	d501      	bpl.n	1d6e0 <_printf_i+0x1cc>
   1d6dc:	6018      	str	r0, [r3, #0]
   1d6de:	e002      	b.n	1d6e6 <_printf_i+0x1d2>
   1d6e0:	0671      	lsls	r1, r6, #25
   1d6e2:	d5fb      	bpl.n	1d6dc <_printf_i+0x1c8>
   1d6e4:	8018      	strh	r0, [r3, #0]
   1d6e6:	2300      	movs	r3, #0
   1d6e8:	6123      	str	r3, [r4, #16]
   1d6ea:	4616      	mov	r6, r2
   1d6ec:	e7ba      	b.n	1d664 <_printf_i+0x150>
   1d6ee:	680b      	ldr	r3, [r1, #0]
   1d6f0:	1d1a      	adds	r2, r3, #4
   1d6f2:	600a      	str	r2, [r1, #0]
   1d6f4:	681e      	ldr	r6, [r3, #0]
   1d6f6:	6862      	ldr	r2, [r4, #4]
   1d6f8:	2100      	movs	r1, #0
   1d6fa:	4630      	mov	r0, r6
   1d6fc:	f7e2 fcf0 	bl	e0 <memchr>
   1d700:	b108      	cbz	r0, 1d706 <_printf_i+0x1f2>
   1d702:	1b80      	subs	r0, r0, r6
   1d704:	6060      	str	r0, [r4, #4]
   1d706:	6863      	ldr	r3, [r4, #4]
   1d708:	6123      	str	r3, [r4, #16]
   1d70a:	2300      	movs	r3, #0
   1d70c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1d710:	e7a8      	b.n	1d664 <_printf_i+0x150>
   1d712:	6923      	ldr	r3, [r4, #16]
   1d714:	4632      	mov	r2, r6
   1d716:	4649      	mov	r1, r9
   1d718:	4640      	mov	r0, r8
   1d71a:	47d0      	blx	sl
   1d71c:	3001      	adds	r0, #1
   1d71e:	d0ab      	beq.n	1d678 <_printf_i+0x164>
   1d720:	6823      	ldr	r3, [r4, #0]
   1d722:	079b      	lsls	r3, r3, #30
   1d724:	d413      	bmi.n	1d74e <_printf_i+0x23a>
   1d726:	68e0      	ldr	r0, [r4, #12]
   1d728:	9b03      	ldr	r3, [sp, #12]
   1d72a:	4298      	cmp	r0, r3
   1d72c:	bfb8      	it	lt
   1d72e:	4618      	movlt	r0, r3
   1d730:	e7a4      	b.n	1d67c <_printf_i+0x168>
   1d732:	2301      	movs	r3, #1
   1d734:	4632      	mov	r2, r6
   1d736:	4649      	mov	r1, r9
   1d738:	4640      	mov	r0, r8
   1d73a:	47d0      	blx	sl
   1d73c:	3001      	adds	r0, #1
   1d73e:	d09b      	beq.n	1d678 <_printf_i+0x164>
   1d740:	3501      	adds	r5, #1
   1d742:	68e3      	ldr	r3, [r4, #12]
   1d744:	9903      	ldr	r1, [sp, #12]
   1d746:	1a5b      	subs	r3, r3, r1
   1d748:	42ab      	cmp	r3, r5
   1d74a:	dcf2      	bgt.n	1d732 <_printf_i+0x21e>
   1d74c:	e7eb      	b.n	1d726 <_printf_i+0x212>
   1d74e:	2500      	movs	r5, #0
   1d750:	f104 0619 	add.w	r6, r4, #25
   1d754:	e7f5      	b.n	1d742 <_printf_i+0x22e>
   1d756:	bf00      	nop
   1d758:	000234f1 	.word	0x000234f1
   1d75c:	00023502 	.word	0x00023502

0001d760 <scan_filter_no_match>:
}
   1d760:	4770      	bx	lr

0001d762 <sys_notify_validate>:
	if (notify == NULL) {
   1d762:	4603      	mov	r3, r0
   1d764:	b140      	cbz	r0, 1d778 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1d766:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1d768:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1d76c:	2a02      	cmp	r2, #2
   1d76e:	d006      	beq.n	1d77e <sys_notify_validate+0x1c>
   1d770:	2a03      	cmp	r2, #3
   1d772:	d004      	beq.n	1d77e <sys_notify_validate+0x1c>
   1d774:	2a01      	cmp	r2, #1
   1d776:	d005      	beq.n	1d784 <sys_notify_validate+0x22>
		return -EINVAL;
   1d778:	f06f 0015 	mvn.w	r0, #21
}
   1d77c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1d77e:	681a      	ldr	r2, [r3, #0]
   1d780:	2a00      	cmp	r2, #0
   1d782:	d0f9      	beq.n	1d778 <sys_notify_validate+0x16>
		notify->result = 0;
   1d784:	2000      	movs	r0, #0
   1d786:	6098      	str	r0, [r3, #8]
   1d788:	4770      	bx	lr

0001d78a <arch_printk_char_out>:
}
   1d78a:	2000      	movs	r0, #0
   1d78c:	4770      	bx	lr

0001d78e <str_out>:
{
   1d78e:	b530      	push	{r4, r5, lr}
   1d790:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1d792:	680c      	ldr	r4, [r1, #0]
   1d794:	1c55      	adds	r5, r2, #1
   1d796:	b114      	cbz	r4, 1d79e <str_out+0x10>
   1d798:	684b      	ldr	r3, [r1, #4]
   1d79a:	4293      	cmp	r3, r2
   1d79c:	dc01      	bgt.n	1d7a2 <str_out+0x14>
		ctx->count++;
   1d79e:	608d      	str	r5, [r1, #8]
}
   1d7a0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1d7a2:	3b01      	subs	r3, #1
   1d7a4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1d7a6:	bf08      	it	eq
   1d7a8:	2200      	moveq	r2, #0
   1d7aa:	608d      	str	r5, [r1, #8]
   1d7ac:	bf0c      	ite	eq
   1d7ae:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1d7b0:	54a0      	strbne	r0, [r4, r2]
   1d7b2:	e7f5      	b.n	1d7a0 <str_out+0x12>

0001d7b4 <printk>:
{
   1d7b4:	b40f      	push	{r0, r1, r2, r3}
   1d7b6:	b507      	push	{r0, r1, r2, lr}
   1d7b8:	a904      	add	r1, sp, #16
   1d7ba:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1d7be:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1d7c0:	f7f2 fae4 	bl	fd8c <vprintk>
}
   1d7c4:	b003      	add	sp, #12
   1d7c6:	f85d eb04 	ldr.w	lr, [sp], #4
   1d7ca:	b004      	add	sp, #16
   1d7cc:	4770      	bx	lr

0001d7ce <snprintk>:
{
   1d7ce:	b40c      	push	{r2, r3}
   1d7d0:	b507      	push	{r0, r1, r2, lr}
   1d7d2:	ab04      	add	r3, sp, #16
   1d7d4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1d7d8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1d7da:	f7f2 fae5 	bl	fda8 <vsnprintk>
}
   1d7de:	b003      	add	sp, #12
   1d7e0:	f85d eb04 	ldr.w	lr, [sp], #4
   1d7e4:	b002      	add	sp, #8
   1d7e6:	4770      	bx	lr

0001d7e8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1d7e8:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1d7ea:	f013 0307 	ands.w	r3, r3, #7
   1d7ee:	d105      	bne.n	1d7fc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1d7f0:	6803      	ldr	r3, [r0, #0]
   1d7f2:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1d7f4:	bf0c      	ite	eq
   1d7f6:	2000      	moveq	r0, #0
   1d7f8:	2003      	movne	r0, #3
   1d7fa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1d7fc:	2b02      	cmp	r3, #2
   1d7fe:	d105      	bne.n	1d80c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1d800:	8bc3      	ldrh	r3, [r0, #30]
   1d802:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1d804:	bf14      	ite	ne
   1d806:	2000      	movne	r0, #0
   1d808:	2004      	moveq	r0, #4
   1d80a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1d80c:	2b01      	cmp	r3, #1
   1d80e:	d105      	bne.n	1d81c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1d810:	6803      	ldr	r3, [r0, #0]
   1d812:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1d814:	bf0c      	ite	eq
   1d816:	2000      	moveq	r0, #0
   1d818:	2005      	movne	r0, #5
   1d81a:	4770      	bx	lr
	int evt = EVT_NOP;
   1d81c:	2000      	movs	r0, #0
}
   1d81e:	4770      	bx	lr

0001d820 <notify_one>:
{
   1d820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d824:	460d      	mov	r5, r1
   1d826:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1d828:	4619      	mov	r1, r3
   1d82a:	1d28      	adds	r0, r5, #4
{
   1d82c:	4690      	mov	r8, r2
   1d82e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1d830:	f7f2 fa6e 	bl	fd10 <sys_notify_finalize>
	if (cb) {
   1d834:	4604      	mov	r4, r0
   1d836:	b138      	cbz	r0, 1d848 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1d838:	4633      	mov	r3, r6
   1d83a:	4642      	mov	r2, r8
   1d83c:	4629      	mov	r1, r5
   1d83e:	4638      	mov	r0, r7
   1d840:	46a4      	mov	ip, r4
}
   1d842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1d846:	4760      	bx	ip
}
   1d848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d84c <validate_args>:
{
   1d84c:	b510      	push	{r4, lr}
   1d84e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1d850:	b140      	cbz	r0, 1d864 <validate_args+0x18>
   1d852:	b139      	cbz	r1, 1d864 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1d854:	1d08      	adds	r0, r1, #4
   1d856:	f7ff ff84 	bl	1d762 <sys_notify_validate>
	if ((rv == 0)
   1d85a:	b928      	cbnz	r0, 1d868 <validate_args+0x1c>
	    && ((cli->notify.flags
   1d85c:	68a3      	ldr	r3, [r4, #8]
   1d85e:	f033 0303 	bics.w	r3, r3, #3
   1d862:	d001      	beq.n	1d868 <validate_args+0x1c>
		rv = -EINVAL;
   1d864:	f06f 0015 	mvn.w	r0, #21
}
   1d868:	bd10      	pop	{r4, pc}

0001d86a <onoff_manager_init>:
{
   1d86a:	b538      	push	{r3, r4, r5, lr}
   1d86c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1d86e:	4605      	mov	r5, r0
   1d870:	b158      	cbz	r0, 1d88a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1d872:	b151      	cbz	r1, 1d88a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1d874:	680b      	ldr	r3, [r1, #0]
   1d876:	b143      	cbz	r3, 1d88a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1d878:	684b      	ldr	r3, [r1, #4]
   1d87a:	b133      	cbz	r3, 1d88a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1d87c:	2220      	movs	r2, #32
   1d87e:	2100      	movs	r1, #0
   1d880:	f003 f901 	bl	20a86 <memset>
   1d884:	612c      	str	r4, [r5, #16]
	return 0;
   1d886:	2000      	movs	r0, #0
}
   1d888:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1d88a:	f06f 0015 	mvn.w	r0, #21
   1d88e:	e7fb      	b.n	1d888 <onoff_manager_init+0x1e>

0001d890 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1d890:	4604      	mov	r4, r0
   1d892:	b508      	push	{r3, lr}
   1d894:	4608      	mov	r0, r1
   1d896:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1d898:	461a      	mov	r2, r3
   1d89a:	47a0      	blx	r4
	return z_impl_z_current_get();
   1d89c:	f7fe fa84 	bl	1bda8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1d8a0:	f7f4 f9d4 	bl	11c4c <z_impl_k_thread_abort>

0001d8a4 <chunk_field>:
	if (big_heap(h)) {
   1d8a4:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1d8a6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1d8aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1d8ae:	bf2c      	ite	cs
   1d8b0:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   1d8b4:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   1d8b8:	4770      	bx	lr

0001d8ba <chunk_set>:
	void *cmem = &buf[c];
   1d8ba:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1d8be:	6880      	ldr	r0, [r0, #8]
   1d8c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   1d8c4:	bf2c      	ite	cs
   1d8c6:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1d8ca:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   1d8ce:	4770      	bx	lr

0001d8d0 <chunk_size>:
{
   1d8d0:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1d8d2:	2201      	movs	r2, #1
   1d8d4:	f7ff ffe6 	bl	1d8a4 <chunk_field>
}
   1d8d8:	0840      	lsrs	r0, r0, #1
   1d8da:	bd08      	pop	{r3, pc}

0001d8dc <set_chunk_used>:
	if (big_heap(h)) {
   1d8dc:	6883      	ldr	r3, [r0, #8]
   1d8de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1d8e2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1d8e6:	d308      	bcc.n	1d8fa <set_chunk_used+0x1e>
		if (used) {
   1d8e8:	684b      	ldr	r3, [r1, #4]
   1d8ea:	b11a      	cbz	r2, 1d8f4 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1d8ec:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1d8f0:	604b      	str	r3, [r1, #4]
   1d8f2:	4770      	bx	lr
   1d8f4:	f023 0301 	bic.w	r3, r3, #1
   1d8f8:	e7fa      	b.n	1d8f0 <set_chunk_used+0x14>
		if (used) {
   1d8fa:	884b      	ldrh	r3, [r1, #2]
   1d8fc:	b11a      	cbz	r2, 1d906 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1d8fe:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1d902:	804b      	strh	r3, [r1, #2]
}
   1d904:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1d906:	f023 0301 	bic.w	r3, r3, #1
   1d90a:	e7fa      	b.n	1d902 <set_chunk_used+0x26>

0001d90c <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1d90c:	0053      	lsls	r3, r2, #1
   1d90e:	2201      	movs	r2, #1
   1d910:	f7ff bfd3 	b.w	1d8ba <chunk_set>

0001d914 <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   1d914:	6883      	ldr	r3, [r0, #8]
   1d916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d91a:	bf2c      	ite	cs
   1d91c:	2008      	movcs	r0, #8
   1d91e:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d920:	3107      	adds	r1, #7
   1d922:	4408      	add	r0, r1
}
   1d924:	08c0      	lsrs	r0, r0, #3
   1d926:	4770      	bx	lr

0001d928 <bucket_idx>:
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
   1d928:	460a      	mov	r2, r1
   1d92a:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   1d92c:	2101      	movs	r1, #1
   1d92e:	f7ff fff1 	bl	1d914 <bytes_to_chunksz>
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1d932:	3201      	adds	r2, #1
   1d934:	1a12      	subs	r2, r2, r0
	return 31 - __builtin_clz(usable_sz);
   1d936:	fab2 f082 	clz	r0, r2
}
   1d93a:	f1c0 001f 	rsb	r0, r0, #31
   1d93e:	bd08      	pop	{r3, pc}

0001d940 <merge_chunks>:
{
   1d940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d944:	4616      	mov	r6, r2
   1d946:	4604      	mov	r4, r0
   1d948:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1d94a:	f7ff ffc1 	bl	1d8d0 <chunk_size>
   1d94e:	4631      	mov	r1, r6
   1d950:	4605      	mov	r5, r0
   1d952:	4620      	mov	r0, r4
   1d954:	f7ff ffbc 	bl	1d8d0 <chunk_size>
   1d958:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1d95a:	462a      	mov	r2, r5
   1d95c:	4639      	mov	r1, r7
   1d95e:	4620      	mov	r0, r4
   1d960:	f7ff ffd4 	bl	1d90c <set_chunk_size>
	return c + chunk_size(h, c);
   1d964:	4631      	mov	r1, r6
   1d966:	4620      	mov	r0, r4
   1d968:	f7ff ffb2 	bl	1d8d0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d96c:	462b      	mov	r3, r5
   1d96e:	1831      	adds	r1, r6, r0
   1d970:	2200      	movs	r2, #0
   1d972:	4620      	mov	r0, r4
}
   1d974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d978:	f7ff bf9f 	b.w	1d8ba <chunk_set>

0001d97c <split_chunks>:
{
   1d97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d980:	4614      	mov	r4, r2
   1d982:	4605      	mov	r5, r0
   1d984:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1d986:	f7ff ffa3 	bl	1d8d0 <chunk_size>
	chunksz_t lsz = rc - lc;
   1d98a:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   1d98e:	1b37      	subs	r7, r6, r4
   1d990:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1d992:	4642      	mov	r2, r8
   1d994:	4631      	mov	r1, r6
   1d996:	4628      	mov	r0, r5
   1d998:	f7ff ffb8 	bl	1d90c <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1d99c:	463a      	mov	r2, r7
   1d99e:	4621      	mov	r1, r4
   1d9a0:	4628      	mov	r0, r5
   1d9a2:	f7ff ffb3 	bl	1d90c <set_chunk_size>
   1d9a6:	4643      	mov	r3, r8
   1d9a8:	2200      	movs	r2, #0
   1d9aa:	4621      	mov	r1, r4
   1d9ac:	4628      	mov	r0, r5
   1d9ae:	f7ff ff84 	bl	1d8ba <chunk_set>
	return c + chunk_size(h, c);
   1d9b2:	4621      	mov	r1, r4
   1d9b4:	4628      	mov	r0, r5
   1d9b6:	f7ff ff8b 	bl	1d8d0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d9ba:	463b      	mov	r3, r7
   1d9bc:	1821      	adds	r1, r4, r0
   1d9be:	2200      	movs	r2, #0
   1d9c0:	4628      	mov	r0, r5
}
   1d9c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d9c6:	f7ff bf78 	b.w	1d8ba <chunk_set>

0001d9ca <free_list_remove_bidx>:
{
   1d9ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d9ce:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1d9d0:	2203      	movs	r2, #3
   1d9d2:	460e      	mov	r6, r1
   1d9d4:	4604      	mov	r4, r0
   1d9d6:	f7ff ff65 	bl	1d8a4 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1d9da:	4286      	cmp	r6, r0
   1d9dc:	4605      	mov	r5, r0
   1d9de:	f107 0804 	add.w	r8, r7, #4
   1d9e2:	d10b      	bne.n	1d9fc <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1d9e4:	2301      	movs	r3, #1
   1d9e6:	fa03 f707 	lsl.w	r7, r3, r7
   1d9ea:	68e3      	ldr	r3, [r4, #12]
   1d9ec:	ea23 0307 	bic.w	r3, r3, r7
   1d9f0:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1d9f2:	2300      	movs	r3, #0
   1d9f4:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1d9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1d9fc:	4631      	mov	r1, r6
   1d9fe:	2202      	movs	r2, #2
   1da00:	4620      	mov	r0, r4
   1da02:	f7ff ff4f 	bl	1d8a4 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1da06:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1da08:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1da0a:	4601      	mov	r1, r0
		b->next = second;
   1da0c:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1da10:	4620      	mov	r0, r4
   1da12:	2203      	movs	r2, #3
   1da14:	f7ff ff51 	bl	1d8ba <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1da18:	4633      	mov	r3, r6
   1da1a:	4629      	mov	r1, r5
   1da1c:	4620      	mov	r0, r4
   1da1e:	2202      	movs	r2, #2
}
   1da20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1da24:	f7ff bf49 	b.w	1d8ba <chunk_set>

0001da28 <alloc_chunk>:
{
   1da28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1da2c:	4605      	mov	r5, r0
   1da2e:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1da30:	f7ff ff7a 	bl	1d928 <bucket_idx>
   1da34:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   1da38:	4606      	mov	r6, r0
	if (b->next) {
   1da3a:	f8da 9010 	ldr.w	r9, [sl, #16]
   1da3e:	f1b9 0f00 	cmp.w	r9, #0
   1da42:	d01b      	beq.n	1da7c <alloc_chunk+0x54>
   1da44:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1da46:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1da4a:	4628      	mov	r0, r5
   1da4c:	4621      	mov	r1, r4
   1da4e:	f7ff ff3f 	bl	1d8d0 <chunk_size>
   1da52:	4540      	cmp	r0, r8
   1da54:	d307      	bcc.n	1da66 <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   1da56:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
   1da58:	4621      	mov	r1, r4
   1da5a:	4628      	mov	r0, r5
   1da5c:	f7ff ffb5 	bl	1d9ca <free_list_remove_bidx>
}
   1da60:	4620      	mov	r0, r4
   1da62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   1da66:	2203      	movs	r2, #3
   1da68:	4621      	mov	r1, r4
   1da6a:	4628      	mov	r0, r5
   1da6c:	f7ff ff1a 	bl	1d8a4 <chunk_field>
		} while (--i && b->next != first);
   1da70:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1da72:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1da76:	d001      	beq.n	1da7c <alloc_chunk+0x54>
   1da78:	4581      	cmp	r9, r0
   1da7a:	d1e4      	bne.n	1da46 <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1da7c:	68e9      	ldr	r1, [r5, #12]
   1da7e:	3601      	adds	r6, #1
   1da80:	f04f 34ff 	mov.w	r4, #4294967295
   1da84:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   1da86:	400c      	ands	r4, r1
   1da88:	d0ea      	beq.n	1da60 <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   1da8a:	fa94 f2a4 	rbit	r2, r4
   1da8e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1da92:	1d13      	adds	r3, r2, #4
   1da94:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   1da98:	e7de      	b.n	1da58 <alloc_chunk+0x30>

0001da9a <free_list_add>:
{
   1da9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da9e:	4604      	mov	r4, r0
   1daa0:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1daa2:	f7ff ff15 	bl	1d8d0 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1daa6:	68a3      	ldr	r3, [r4, #8]
   1daa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1daac:	4601      	mov	r1, r0
   1daae:	d301      	bcc.n	1dab4 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1dab0:	2801      	cmp	r0, #1
   1dab2:	d035      	beq.n	1db20 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1dab4:	4620      	mov	r0, r4
   1dab6:	f7ff ff37 	bl	1d928 <bucket_idx>
	if (b->next == 0U) {
   1daba:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1dabe:	6916      	ldr	r6, [r2, #16]
   1dac0:	b99e      	cbnz	r6, 1daea <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1dac2:	2301      	movs	r3, #1
   1dac4:	fa03 f000 	lsl.w	r0, r3, r0
   1dac8:	68e3      	ldr	r3, [r4, #12]
   1daca:	4303      	orrs	r3, r0
   1dacc:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1dace:	4629      	mov	r1, r5
		b->next = c;
   1dad0:	6115      	str	r5, [r2, #16]
   1dad2:	462b      	mov	r3, r5
   1dad4:	2202      	movs	r2, #2
   1dad6:	4620      	mov	r0, r4
   1dad8:	f7ff feef 	bl	1d8ba <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1dadc:	2203      	movs	r2, #3
   1dade:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1dae0:	4620      	mov	r0, r4
}
   1dae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1dae6:	f7ff bee8 	b.w	1d8ba <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1daea:	2202      	movs	r2, #2
   1daec:	4631      	mov	r1, r6
   1daee:	4620      	mov	r0, r4
   1daf0:	f7ff fed8 	bl	1d8a4 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1daf4:	2202      	movs	r2, #2
   1daf6:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1daf8:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1dafa:	4629      	mov	r1, r5
   1dafc:	4620      	mov	r0, r4
   1dafe:	f7ff fedc 	bl	1d8ba <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1db02:	4633      	mov	r3, r6
   1db04:	2203      	movs	r2, #3
   1db06:	4629      	mov	r1, r5
   1db08:	4620      	mov	r0, r4
   1db0a:	f7ff fed6 	bl	1d8ba <chunk_set>
   1db0e:	2203      	movs	r2, #3
   1db10:	4639      	mov	r1, r7
   1db12:	462b      	mov	r3, r5
   1db14:	4620      	mov	r0, r4
   1db16:	f7ff fed0 	bl	1d8ba <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1db1a:	2202      	movs	r2, #2
   1db1c:	4631      	mov	r1, r6
   1db1e:	e7df      	b.n	1dae0 <free_list_add+0x46>
   1db20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001db24 <free_list_remove>:
{
   1db24:	b538      	push	{r3, r4, r5, lr}
   1db26:	4604      	mov	r4, r0
   1db28:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1db2a:	f7ff fed1 	bl	1d8d0 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1db2e:	68a3      	ldr	r3, [r4, #8]
   1db30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1db34:	4601      	mov	r1, r0
   1db36:	d301      	bcc.n	1db3c <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1db38:	2801      	cmp	r0, #1
   1db3a:	d009      	beq.n	1db50 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1db3c:	4620      	mov	r0, r4
   1db3e:	f7ff fef3 	bl	1d928 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1db42:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1db44:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1db46:	4620      	mov	r0, r4
}
   1db48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1db4c:	f7ff bf3d 	b.w	1d9ca <free_list_remove_bidx>
}
   1db50:	bd38      	pop	{r3, r4, r5, pc}

0001db52 <free_chunk>:
{
   1db52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db54:	460c      	mov	r4, r1
   1db56:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1db58:	f7ff feba 	bl	1d8d0 <chunk_size>
   1db5c:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1db5e:	2201      	movs	r2, #1
   1db60:	4631      	mov	r1, r6
   1db62:	4628      	mov	r0, r5
   1db64:	f7ff fe9e 	bl	1d8a4 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1db68:	07c3      	lsls	r3, r0, #31
   1db6a:	d40c      	bmi.n	1db86 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1db6c:	4631      	mov	r1, r6
   1db6e:	4628      	mov	r0, r5
   1db70:	f7ff ffd8 	bl	1db24 <free_list_remove>
	return c + chunk_size(h, c);
   1db74:	4621      	mov	r1, r4
   1db76:	4628      	mov	r0, r5
   1db78:	f7ff feaa 	bl	1d8d0 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1db7c:	4621      	mov	r1, r4
   1db7e:	1822      	adds	r2, r4, r0
   1db80:	4628      	mov	r0, r5
   1db82:	f7ff fedd 	bl	1d940 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1db86:	2200      	movs	r2, #0
   1db88:	4621      	mov	r1, r4
   1db8a:	4628      	mov	r0, r5
   1db8c:	f7ff fe8a 	bl	1d8a4 <chunk_field>
   1db90:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1db92:	2201      	movs	r2, #1
   1db94:	4639      	mov	r1, r7
   1db96:	4628      	mov	r0, r5
   1db98:	f7ff fe84 	bl	1d8a4 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1db9c:	f010 0601 	ands.w	r6, r0, #1
   1dba0:	d113      	bne.n	1dbca <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1dba2:	4639      	mov	r1, r7
   1dba4:	4628      	mov	r0, r5
   1dba6:	f7ff ffbd 	bl	1db24 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1dbaa:	4621      	mov	r1, r4
   1dbac:	4632      	mov	r2, r6
   1dbae:	4628      	mov	r0, r5
   1dbb0:	f7ff fe78 	bl	1d8a4 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1dbb4:	4622      	mov	r2, r4
   1dbb6:	1a21      	subs	r1, r4, r0
   1dbb8:	4628      	mov	r0, r5
   1dbba:	f7ff fec1 	bl	1d940 <merge_chunks>
   1dbbe:	4621      	mov	r1, r4
   1dbc0:	4632      	mov	r2, r6
   1dbc2:	4628      	mov	r0, r5
   1dbc4:	f7ff fe6e 	bl	1d8a4 <chunk_field>
   1dbc8:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1dbca:	4621      	mov	r1, r4
   1dbcc:	4628      	mov	r0, r5
}
   1dbce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1dbd2:	f7ff bf62 	b.w	1da9a <free_list_add>

0001dbd6 <sys_heap_alloc>:
{
   1dbd6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1dbd8:	6804      	ldr	r4, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1dbda:	b909      	cbnz	r1, 1dbe0 <sys_heap_alloc+0xa>
		return NULL;
   1dbdc:	2000      	movs	r0, #0
}
   1dbde:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1dbe0:	68a2      	ldr	r2, [r4, #8]
   1dbe2:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   1dbe6:	d9f9      	bls.n	1dbdc <sys_heap_alloc+0x6>
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   1dbe8:	4620      	mov	r0, r4
   1dbea:	f7ff fe93 	bl	1d914 <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1dbee:	4601      	mov	r1, r0
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   1dbf0:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1dbf2:	4620      	mov	r0, r4
   1dbf4:	f7ff ff18 	bl	1da28 <alloc_chunk>
	if (c == 0U) {
   1dbf8:	4605      	mov	r5, r0
   1dbfa:	2800      	cmp	r0, #0
   1dbfc:	d0ee      	beq.n	1dbdc <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1dbfe:	4601      	mov	r1, r0
   1dc00:	4620      	mov	r0, r4
   1dc02:	f7ff fe65 	bl	1d8d0 <chunk_size>
   1dc06:	42b0      	cmp	r0, r6
   1dc08:	d909      	bls.n	1dc1e <sys_heap_alloc+0x48>
		split_chunks(h, c, c + chunk_sz);
   1dc0a:	442e      	add	r6, r5
   1dc0c:	4629      	mov	r1, r5
   1dc0e:	4620      	mov	r0, r4
   1dc10:	4632      	mov	r2, r6
   1dc12:	f7ff feb3 	bl	1d97c <split_chunks>
		free_list_add(h, c + chunk_sz);
   1dc16:	4631      	mov	r1, r6
   1dc18:	4620      	mov	r0, r4
   1dc1a:	f7ff ff3e 	bl	1da9a <free_list_add>
	set_chunk_used(h, c, true);
   1dc1e:	4620      	mov	r0, r4
   1dc20:	2201      	movs	r2, #1
   1dc22:	4629      	mov	r1, r5
   1dc24:	f7ff fe5a 	bl	1d8dc <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1dc28:	68a3      	ldr	r3, [r4, #8]
   1dc2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1dc2e:	bf2c      	ite	cs
   1dc30:	2008      	movcs	r0, #8
   1dc32:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1dc34:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   1dc38:	4420      	add	r0, r4
	return chunk_mem(h, c);
   1dc3a:	e7d0      	b.n	1dbde <sys_heap_alloc+0x8>

0001dc3c <outs>:
{
   1dc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc40:	4607      	mov	r7, r0
   1dc42:	4688      	mov	r8, r1
   1dc44:	4615      	mov	r5, r2
   1dc46:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1dc48:	4614      	mov	r4, r2
   1dc4a:	42b4      	cmp	r4, r6
   1dc4c:	eba4 0005 	sub.w	r0, r4, r5
   1dc50:	d302      	bcc.n	1dc58 <outs+0x1c>
   1dc52:	b93e      	cbnz	r6, 1dc64 <outs+0x28>
   1dc54:	7823      	ldrb	r3, [r4, #0]
   1dc56:	b12b      	cbz	r3, 1dc64 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1dc58:	f814 0b01 	ldrb.w	r0, [r4], #1
   1dc5c:	4641      	mov	r1, r8
   1dc5e:	47b8      	blx	r7
		if (rc < 0) {
   1dc60:	2800      	cmp	r0, #0
   1dc62:	daf2      	bge.n	1dc4a <outs+0xe>
}
   1dc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dc68 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1dc68:	4040      	eors	r0, r0
   1dc6a:	f380 8811 	msr	BASEPRI, r0
   1dc6e:	f04f 0004 	mov.w	r0, #4
   1dc72:	df02      	svc	2
}
   1dc74:	4770      	bx	lr

0001dc76 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1dc76:	4770      	bx	lr

0001dc78 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1dc78:	2200      	movs	r2, #0
   1dc7a:	e9c0 2200 	strd	r2, r2, [r0]
   1dc7e:	6082      	str	r2, [r0, #8]
}
   1dc80:	4770      	bx	lr

0001dc82 <bt_scan_stop>:
	return bt_le_scan_stop();
   1dc82:	f7f5 bdd1 	b.w	13828 <bt_le_scan_stop>

0001dc86 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1dc86:	b538      	push	{r3, r4, r5, lr}
   1dc88:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1dc8a:	42ab      	cmp	r3, r5
{
   1dc8c:	4611      	mov	r1, r2
   1dc8e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1dc90:	d804      	bhi.n	1dc9c <_copy+0x16>
   1dc92:	461a      	mov	r2, r3
   1dc94:	f002 fee9 	bl	20a6a <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1dc98:	4620      	mov	r0, r4
   1dc9a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1dc9c:	2400      	movs	r4, #0
   1dc9e:	e7fb      	b.n	1dc98 <_copy+0x12>

0001dca0 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   1dca0:	f002 bef1 	b.w	20a86 <memset>

0001dca4 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1dca4:	09c3      	lsrs	r3, r0, #7
   1dca6:	005a      	lsls	r2, r3, #1
   1dca8:	4413      	add	r3, r2
   1dcaa:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1dcae:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1dcb2:	b2c0      	uxtb	r0, r0
   1dcb4:	4770      	bx	lr

0001dcb6 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1dcb6:	78cb      	ldrb	r3, [r1, #3]
   1dcb8:	7802      	ldrb	r2, [r0, #0]
   1dcba:	4053      	eors	r3, r2
   1dcbc:	7003      	strb	r3, [r0, #0]
   1dcbe:	884b      	ldrh	r3, [r1, #2]
   1dcc0:	7842      	ldrb	r2, [r0, #1]
   1dcc2:	4053      	eors	r3, r2
   1dcc4:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1dcc6:	680a      	ldr	r2, [r1, #0]
   1dcc8:	7883      	ldrb	r3, [r0, #2]
   1dcca:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1dcce:	7083      	strb	r3, [r0, #2]
   1dcd0:	680a      	ldr	r2, [r1, #0]
   1dcd2:	78c3      	ldrb	r3, [r0, #3]
   1dcd4:	4053      	eors	r3, r2
   1dcd6:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1dcd8:	79cb      	ldrb	r3, [r1, #7]
   1dcda:	7902      	ldrb	r2, [r0, #4]
   1dcdc:	4053      	eors	r3, r2
   1dcde:	7103      	strb	r3, [r0, #4]
   1dce0:	88cb      	ldrh	r3, [r1, #6]
   1dce2:	7942      	ldrb	r2, [r0, #5]
   1dce4:	4053      	eors	r3, r2
   1dce6:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1dce8:	684a      	ldr	r2, [r1, #4]
   1dcea:	7983      	ldrb	r3, [r0, #6]
   1dcec:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1dcf0:	7183      	strb	r3, [r0, #6]
   1dcf2:	684a      	ldr	r2, [r1, #4]
   1dcf4:	79c3      	ldrb	r3, [r0, #7]
   1dcf6:	4053      	eors	r3, r2
   1dcf8:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1dcfa:	7acb      	ldrb	r3, [r1, #11]
   1dcfc:	7a02      	ldrb	r2, [r0, #8]
   1dcfe:	4053      	eors	r3, r2
   1dd00:	7203      	strb	r3, [r0, #8]
   1dd02:	7a42      	ldrb	r2, [r0, #9]
   1dd04:	894b      	ldrh	r3, [r1, #10]
   1dd06:	4053      	eors	r3, r2
   1dd08:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1dd0a:	688a      	ldr	r2, [r1, #8]
   1dd0c:	7a83      	ldrb	r3, [r0, #10]
   1dd0e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1dd12:	7283      	strb	r3, [r0, #10]
   1dd14:	688a      	ldr	r2, [r1, #8]
   1dd16:	7ac3      	ldrb	r3, [r0, #11]
   1dd18:	4053      	eors	r3, r2
   1dd1a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1dd1c:	7bcb      	ldrb	r3, [r1, #15]
   1dd1e:	7b02      	ldrb	r2, [r0, #12]
   1dd20:	4053      	eors	r3, r2
   1dd22:	7303      	strb	r3, [r0, #12]
   1dd24:	89cb      	ldrh	r3, [r1, #14]
   1dd26:	7b42      	ldrb	r2, [r0, #13]
   1dd28:	4053      	eors	r3, r2
   1dd2a:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1dd2c:	68ca      	ldr	r2, [r1, #12]
   1dd2e:	7b83      	ldrb	r3, [r0, #14]
   1dd30:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1dd34:	7383      	strb	r3, [r0, #14]
   1dd36:	68ca      	ldr	r2, [r1, #12]
   1dd38:	7bc3      	ldrb	r3, [r0, #15]
   1dd3a:	4053      	eors	r3, r2
   1dd3c:	73c3      	strb	r3, [r0, #15]
}
   1dd3e:	4770      	bx	lr

0001dd40 <shift_rows>:
{
   1dd40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1dd42:	7802      	ldrb	r2, [r0, #0]
   1dd44:	f88d 2000 	strb.w	r2, [sp]
   1dd48:	7942      	ldrb	r2, [r0, #5]
   1dd4a:	f88d 2001 	strb.w	r2, [sp, #1]
   1dd4e:	7a82      	ldrb	r2, [r0, #10]
   1dd50:	f88d 2002 	strb.w	r2, [sp, #2]
   1dd54:	7bc2      	ldrb	r2, [r0, #15]
   1dd56:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1dd5a:	7902      	ldrb	r2, [r0, #4]
   1dd5c:	f88d 2004 	strb.w	r2, [sp, #4]
   1dd60:	7a42      	ldrb	r2, [r0, #9]
   1dd62:	f88d 2005 	strb.w	r2, [sp, #5]
   1dd66:	7b82      	ldrb	r2, [r0, #14]
   1dd68:	f88d 2006 	strb.w	r2, [sp, #6]
   1dd6c:	78c2      	ldrb	r2, [r0, #3]
   1dd6e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1dd72:	7a02      	ldrb	r2, [r0, #8]
   1dd74:	f88d 2008 	strb.w	r2, [sp, #8]
   1dd78:	7b42      	ldrb	r2, [r0, #13]
   1dd7a:	f88d 2009 	strb.w	r2, [sp, #9]
   1dd7e:	7882      	ldrb	r2, [r0, #2]
   1dd80:	f88d 200a 	strb.w	r2, [sp, #10]
   1dd84:	79c2      	ldrb	r2, [r0, #7]
   1dd86:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1dd8a:	7b02      	ldrb	r2, [r0, #12]
   1dd8c:	f88d 200c 	strb.w	r2, [sp, #12]
   1dd90:	7842      	ldrb	r2, [r0, #1]
   1dd92:	7ac3      	ldrb	r3, [r0, #11]
   1dd94:	f88d 200d 	strb.w	r2, [sp, #13]
   1dd98:	7982      	ldrb	r2, [r0, #6]
   1dd9a:	f88d 200e 	strb.w	r2, [sp, #14]
   1dd9e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1dda2:	2310      	movs	r3, #16
   1dda4:	466a      	mov	r2, sp
   1dda6:	4619      	mov	r1, r3
   1dda8:	f7ff ff6d 	bl	1dc86 <_copy>
}
   1ddac:	b005      	add	sp, #20
   1ddae:	f85d fb04 	ldr.w	pc, [sp], #4

0001ddb2 <mult_row_column>:
{
   1ddb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ddb4:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1ddb6:	7808      	ldrb	r0, [r1, #0]
{
   1ddb8:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1ddba:	f7ff ff73 	bl	1dca4 <_double_byte>
   1ddbe:	4605      	mov	r5, r0
   1ddc0:	7860      	ldrb	r0, [r4, #1]
   1ddc2:	f7ff ff6f 	bl	1dca4 <_double_byte>
   1ddc6:	78a2      	ldrb	r2, [r4, #2]
   1ddc8:	7863      	ldrb	r3, [r4, #1]
   1ddca:	4053      	eors	r3, r2
   1ddcc:	78e2      	ldrb	r2, [r4, #3]
   1ddce:	4053      	eors	r3, r2
   1ddd0:	405d      	eors	r5, r3
   1ddd2:	4045      	eors	r5, r0
   1ddd4:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1ddd6:	7860      	ldrb	r0, [r4, #1]
   1ddd8:	7827      	ldrb	r7, [r4, #0]
   1ddda:	f7ff ff63 	bl	1dca4 <_double_byte>
   1ddde:	4605      	mov	r5, r0
   1dde0:	78a0      	ldrb	r0, [r4, #2]
   1dde2:	f7ff ff5f 	bl	1dca4 <_double_byte>
   1dde6:	78a3      	ldrb	r3, [r4, #2]
   1dde8:	405f      	eors	r7, r3
   1ddea:	78e3      	ldrb	r3, [r4, #3]
   1ddec:	405f      	eors	r7, r3
   1ddee:	407d      	eors	r5, r7
   1ddf0:	4045      	eors	r5, r0
   1ddf2:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1ddf4:	78a0      	ldrb	r0, [r4, #2]
   1ddf6:	7865      	ldrb	r5, [r4, #1]
   1ddf8:	7827      	ldrb	r7, [r4, #0]
   1ddfa:	f7ff ff53 	bl	1dca4 <_double_byte>
   1ddfe:	406f      	eors	r7, r5
   1de00:	4605      	mov	r5, r0
   1de02:	78e0      	ldrb	r0, [r4, #3]
   1de04:	f7ff ff4e 	bl	1dca4 <_double_byte>
   1de08:	78e3      	ldrb	r3, [r4, #3]
   1de0a:	405f      	eors	r7, r3
   1de0c:	407d      	eors	r5, r7
   1de0e:	4045      	eors	r5, r0
   1de10:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1de12:	7820      	ldrb	r0, [r4, #0]
   1de14:	f7ff ff46 	bl	1dca4 <_double_byte>
   1de18:	7863      	ldrb	r3, [r4, #1]
   1de1a:	7825      	ldrb	r5, [r4, #0]
   1de1c:	405d      	eors	r5, r3
   1de1e:	78a3      	ldrb	r3, [r4, #2]
   1de20:	405d      	eors	r5, r3
   1de22:	4045      	eors	r5, r0
   1de24:	78e0      	ldrb	r0, [r4, #3]
   1de26:	f7ff ff3d 	bl	1dca4 <_double_byte>
   1de2a:	b2ed      	uxtb	r5, r5
   1de2c:	4045      	eors	r5, r0
   1de2e:	70f5      	strb	r5, [r6, #3]
}
   1de30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001de32 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1de32:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1de34:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1de36:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1de38:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1de3c:	2b00      	cmp	r3, #0
   1de3e:	bfb4      	ite	lt
   1de40:	2387      	movlt	r3, #135	; 0x87
   1de42:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1de44:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1de48:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1de4c:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1de4e:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1de52:	d002      	beq.n	1de5a <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1de54:	7813      	ldrb	r3, [r2, #0]
   1de56:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1de58:	e7f4      	b.n	1de44 <gf_double+0x12>
	}
}
   1de5a:	bd10      	pop	{r4, pc}

0001de5c <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1de5c:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1de5e:	b120      	cbz	r0, 1de6a <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1de60:	2258      	movs	r2, #88	; 0x58
   1de62:	2100      	movs	r1, #0
   1de64:	f7ff ff1c 	bl	1dca0 <_set>
   1de68:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1de6a:	bd08      	pop	{r3, pc}

0001de6c <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1de6c:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1de6e:	4604      	mov	r4, r0
   1de70:	b188      	cbz	r0, 1de96 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1de72:	2210      	movs	r2, #16
   1de74:	2100      	movs	r1, #0
   1de76:	f7ff ff13 	bl	1dca0 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1de7a:	2210      	movs	r2, #16
   1de7c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1de80:	2100      	movs	r1, #0
   1de82:	f7ff ff0d 	bl	1dca0 <_set>
	s->leftover_offset = 0;
   1de86:	2300      	movs	r3, #0
   1de88:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1de8a:	2200      	movs	r2, #0
   1de8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1de90:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1de94:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1de96:	bd10      	pop	{r4, pc}

0001de98 <tc_cmac_setup>:
{
   1de98:	b570      	push	{r4, r5, r6, lr}
   1de9a:	460d      	mov	r5, r1
   1de9c:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1de9e:	4604      	mov	r4, r0
   1dea0:	b310      	cbz	r0, 1dee8 <tc_cmac_setup+0x50>
   1dea2:	b311      	cbz	r1, 1deea <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1dea4:	2258      	movs	r2, #88	; 0x58
   1dea6:	2100      	movs	r1, #0
   1dea8:	f7ff fefa 	bl	1dca0 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1deac:	4629      	mov	r1, r5
	s->sched = sched;
   1deae:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1deb0:	4630      	mov	r0, r6
   1deb2:	f7f3 fabb 	bl	1142c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1deb6:	2210      	movs	r2, #16
   1deb8:	2100      	movs	r1, #0
   1deba:	4620      	mov	r0, r4
   1debc:	f7ff fef0 	bl	1dca0 <_set>
	gf_double (s->K1, s->iv);
   1dec0:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1dec4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dec6:	4621      	mov	r1, r4
   1dec8:	4620      	mov	r0, r4
   1deca:	f7f3 fb01 	bl	114d0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1dece:	4621      	mov	r1, r4
   1ded0:	4628      	mov	r0, r5
   1ded2:	f7ff ffae 	bl	1de32 <gf_double>
	gf_double (s->K2, s->K1);
   1ded6:	4629      	mov	r1, r5
   1ded8:	f104 0020 	add.w	r0, r4, #32
   1dedc:	f7ff ffa9 	bl	1de32 <gf_double>
	tc_cmac_init(s);
   1dee0:	4620      	mov	r0, r4
   1dee2:	f7ff ffc3 	bl	1de6c <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1dee6:	2001      	movs	r0, #1
}
   1dee8:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1deea:	4608      	mov	r0, r1
   1deec:	e7fc      	b.n	1dee8 <tc_cmac_setup+0x50>

0001deee <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1deee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1def2:	460d      	mov	r5, r1
   1def4:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1def6:	4604      	mov	r4, r0
   1def8:	2800      	cmp	r0, #0
   1defa:	d062      	beq.n	1dfc2 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1defc:	b912      	cbnz	r2, 1df04 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1defe:	2001      	movs	r0, #1
}
   1df00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1df04:	2900      	cmp	r1, #0
   1df06:	d05c      	beq.n	1dfc2 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1df08:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1df0c:	ea50 0301 	orrs.w	r3, r0, r1
   1df10:	d057      	beq.n	1dfc2 <tc_cmac_update+0xd4>
	s->countdown--;
   1df12:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   1df16:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1df1a:	f141 33ff 	adc.w	r3, r1, #4294967295
   1df1e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1df22:	f1b8 0f00 	cmp.w	r8, #0
   1df26:	d02a      	beq.n	1df7e <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1df28:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1df2c:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1df30:	42be      	cmp	r6, r7
   1df32:	4420      	add	r0, r4
   1df34:	d208      	bcs.n	1df48 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1df36:	462a      	mov	r2, r5
   1df38:	4633      	mov	r3, r6
   1df3a:	4631      	mov	r1, r6
   1df3c:	f7ff fea3 	bl	1dc86 <_copy>
			s->leftover_offset += data_length;
   1df40:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1df42:	4432      	add	r2, r6
   1df44:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1df46:	e7da      	b.n	1defe <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1df48:	463b      	mov	r3, r7
   1df4a:	462a      	mov	r2, r5
   1df4c:	4639      	mov	r1, r7
   1df4e:	f7ff fe9a 	bl	1dc86 <_copy>
		data_length -= remaining_space;
   1df52:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1df54:	2300      	movs	r3, #0
   1df56:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1df58:	4446      	add	r6, r8
		data += remaining_space;
   1df5a:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1df5c:	1e63      	subs	r3, r4, #1
   1df5e:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1df62:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1df66:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1df6a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1df6c:	ea82 0200 	eor.w	r2, r2, r0
   1df70:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1df72:	d1f6      	bne.n	1df62 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1df74:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1df76:	4621      	mov	r1, r4
   1df78:	4620      	mov	r0, r4
   1df7a:	f7f3 faa9 	bl	114d0 <tc_aes_encrypt>
   1df7e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1df82:	2e10      	cmp	r6, #16
   1df84:	d80a      	bhi.n	1df9c <tc_cmac_update+0xae>
	if (data_length > 0) {
   1df86:	2e00      	cmp	r6, #0
   1df88:	d0b9      	beq.n	1defe <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1df8a:	4633      	mov	r3, r6
   1df8c:	462a      	mov	r2, r5
   1df8e:	4631      	mov	r1, r6
   1df90:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1df94:	f7ff fe77 	bl	1dc86 <_copy>
		s->leftover_offset = data_length;
   1df98:	6466      	str	r6, [r4, #68]	; 0x44
   1df9a:	e7b0      	b.n	1defe <tc_cmac_update+0x10>
   1df9c:	1e63      	subs	r3, r4, #1
   1df9e:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1dfa0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dfa4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dfa8:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1dfaa:	ea82 0200 	eor.w	r2, r2, r0
   1dfae:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dfb0:	d1f6      	bne.n	1dfa0 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1dfb2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dfb4:	4621      	mov	r1, r4
   1dfb6:	4620      	mov	r0, r4
   1dfb8:	f7f3 fa8a 	bl	114d0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1dfbc:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1dfbe:	3e10      	subs	r6, #16
   1dfc0:	e7df      	b.n	1df82 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1dfc2:	2000      	movs	r0, #0
   1dfc4:	e79c      	b.n	1df00 <tc_cmac_update+0x12>

0001dfc6 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1dfc6:	b570      	push	{r4, r5, r6, lr}
   1dfc8:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1dfca:	4605      	mov	r5, r0
   1dfcc:	b1e8      	cbz	r0, 1e00a <tc_cmac_final+0x44>
   1dfce:	b369      	cbz	r1, 1e02c <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1dfd0:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1dfd2:	2a10      	cmp	r2, #16
   1dfd4:	d11a      	bne.n	1e00c <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1dfd6:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dfd8:	1e63      	subs	r3, r4, #1
   1dfda:	3901      	subs	r1, #1
   1dfdc:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1dfe0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dfe4:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1dfe8:	4072      	eors	r2, r6
   1dfea:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dfee:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1dff0:	ea82 0206 	eor.w	r2, r2, r6
   1dff4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dff6:	d1f3      	bne.n	1dfe0 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1dff8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dffa:	4621      	mov	r1, r4
   1dffc:	4628      	mov	r0, r5
   1dffe:	f7f3 fa67 	bl	114d0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1e002:	4620      	mov	r0, r4
   1e004:	f7ff ff2a 	bl	1de5c <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1e008:	2001      	movs	r0, #1
}
   1e00a:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1e00c:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1e010:	2100      	movs	r1, #0
   1e012:	f1c2 0210 	rsb	r2, r2, #16
   1e016:	4420      	add	r0, r4
   1e018:	f7ff fe42 	bl	1dca0 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1e01c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1e01e:	4423      	add	r3, r4
   1e020:	2280      	movs	r2, #128	; 0x80
   1e022:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1e026:	f104 0120 	add.w	r1, r4, #32
   1e02a:	e7d5      	b.n	1dfd8 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1e02c:	4608      	mov	r0, r1
   1e02e:	e7ec      	b.n	1e00a <tc_cmac_final+0x44>

0001e030 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1e030:	f7fa bfd6 	b.w	18fe0 <z_fatal_error>

0001e034 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1e034:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1e036:	6800      	ldr	r0, [r0, #0]
   1e038:	f7fa bfd2 	b.w	18fe0 <z_fatal_error>

0001e03c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1e03c:	2100      	movs	r1, #0
   1e03e:	2001      	movs	r0, #1
   1e040:	f7ff bff6 	b.w	1e030 <z_arm_fatal_error>

0001e044 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1e044:	b508      	push	{r3, lr}
	handler();
   1e046:	f7f3 fb43 	bl	116d0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1e04a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1e04e:	f7f3 bc1f 	b.w	11890 <z_arm_exc_exit>

0001e052 <_stdout_hook_default>:
}
   1e052:	f04f 30ff 	mov.w	r0, #4294967295
   1e056:	4770      	bx	lr

0001e058 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1e058:	b084      	sub	sp, #16
   1e05a:	ab04      	add	r3, sp, #16
   1e05c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1e060:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1e064:	2b06      	cmp	r3, #6
   1e066:	d108      	bne.n	1e07a <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1e068:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e06c:	2201      	movs	r2, #1
   1e06e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1e072:	f3bf 8f4f 	dsb	sy
        __WFE();
   1e076:	bf20      	wfe
    while (true)
   1e078:	e7fd      	b.n	1e076 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1e07a:	b004      	add	sp, #16
   1e07c:	4770      	bx	lr

0001e07e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1e07e:	b084      	sub	sp, #16
   1e080:	ab04      	add	r3, sp, #16
   1e082:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1e086:	2300      	movs	r3, #0
   1e088:	f383 8811 	msr	BASEPRI, r3
   1e08c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1e090:	b004      	add	sp, #16
   1e092:	4770      	bx	lr

0001e094 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1e094:	b510      	push	{r4, lr}
   1e096:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1e098:	7801      	ldrb	r1, [r0, #0]
   1e09a:	7822      	ldrb	r2, [r4, #0]
   1e09c:	428a      	cmp	r2, r1
{
   1e09e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1e0a0:	d00e      	beq.n	1e0c0 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1e0a2:	4669      	mov	r1, sp
   1e0a4:	f7f3 ffb6 	bl	12014 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1e0a8:	a905      	add	r1, sp, #20
   1e0aa:	4620      	mov	r0, r4
   1e0ac:	f7f3 ffb2 	bl	12014 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1e0b0:	2210      	movs	r2, #16
   1e0b2:	f10d 0115 	add.w	r1, sp, #21
   1e0b6:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1e0ba:	f002 fcc8 	bl	20a4e <memcmp>
   1e0be:	e007      	b.n	1e0d0 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   1e0c0:	2a01      	cmp	r2, #1
   1e0c2:	d007      	beq.n	1e0d4 <bt_uuid_cmp+0x40>
   1e0c4:	2a02      	cmp	r2, #2
   1e0c6:	d008      	beq.n	1e0da <bt_uuid_cmp+0x46>
   1e0c8:	b95a      	cbnz	r2, 1e0e2 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1e0ca:	8840      	ldrh	r0, [r0, #2]
   1e0cc:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1e0ce:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   1e0d0:	b00a      	add	sp, #40	; 0x28
   1e0d2:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1e0d4:	6840      	ldr	r0, [r0, #4]
   1e0d6:	6863      	ldr	r3, [r4, #4]
   1e0d8:	e7f9      	b.n	1e0ce <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1e0da:	2210      	movs	r2, #16
   1e0dc:	1c61      	adds	r1, r4, #1
   1e0de:	3001      	adds	r0, #1
   1e0e0:	e7eb      	b.n	1e0ba <bt_uuid_cmp+0x26>
	switch (u1->type) {
   1e0e2:	f06f 0015 	mvn.w	r0, #21
   1e0e6:	e7f3      	b.n	1e0d0 <bt_uuid_cmp+0x3c>

0001e0e8 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1e0e8:	2a04      	cmp	r2, #4
{
   1e0ea:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   1e0ec:	d00d      	beq.n	1e10a <bt_uuid_create+0x22>
   1e0ee:	2a10      	cmp	r2, #16
   1e0f0:	d019      	beq.n	1e126 <bt_uuid_create+0x3e>
   1e0f2:	2a02      	cmp	r2, #2
   1e0f4:	f04f 0300 	mov.w	r3, #0
   1e0f8:	d121      	bne.n	1e13e <bt_uuid_create+0x56>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1e0fa:	7003      	strb	r3, [r0, #0]
   1e0fc:	784a      	ldrb	r2, [r1, #1]
   1e0fe:	780b      	ldrb	r3, [r1, #0]
   1e100:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1e104:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1e106:	2001      	movs	r0, #1
}
   1e108:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1e10a:	2301      	movs	r3, #1
   1e10c:	7003      	strb	r3, [r0, #0]
   1e10e:	788a      	ldrb	r2, [r1, #2]
   1e110:	78cc      	ldrb	r4, [r1, #3]
   1e112:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1e114:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1e118:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1e11a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1e11e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1e122:	6042      	str	r2, [r0, #4]
		break;
   1e124:	e7ef      	b.n	1e106 <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   1e126:	2302      	movs	r3, #2
   1e128:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e12c:	f101 0310 	add.w	r3, r1, #16
   1e130:	f851 2b04 	ldr.w	r2, [r1], #4
   1e134:	f840 2b04 	str.w	r2, [r0], #4
   1e138:	4299      	cmp	r1, r3
   1e13a:	d1f9      	bne.n	1e130 <bt_uuid_create+0x48>
   1e13c:	e7e3      	b.n	1e106 <bt_uuid_create+0x1e>
	switch (data_len) {
   1e13e:	4618      	mov	r0, r3
   1e140:	e7e2      	b.n	1e108 <bt_uuid_create+0x20>

0001e142 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1e142:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1e144:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1e146:	2106      	movs	r1, #6
{
   1e148:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1e14a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1e14e:	f7fa fbbd 	bl	188cc <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1e152:	b918      	cbnz	r0, 1e15c <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1e154:	79a3      	ldrb	r3, [r4, #6]
   1e156:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1e15a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1e15c:	bd10      	pop	{r4, pc}

0001e15e <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1e15e:	280f      	cmp	r0, #15
   1e160:	d806      	bhi.n	1e170 <bt_hci_evt_get_flags+0x12>
   1e162:	280d      	cmp	r0, #13
   1e164:	d80b      	bhi.n	1e17e <bt_hci_evt_get_flags+0x20>
   1e166:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1e168:	bf14      	ite	ne
   1e16a:	2002      	movne	r0, #2
   1e16c:	2003      	moveq	r0, #3
   1e16e:	4770      	bx	lr
	switch (evt) {
   1e170:	2813      	cmp	r0, #19
   1e172:	d004      	beq.n	1e17e <bt_hci_evt_get_flags+0x20>
   1e174:	281a      	cmp	r0, #26
   1e176:	bf14      	ite	ne
   1e178:	2002      	movne	r0, #2
   1e17a:	2001      	moveq	r0, #1
   1e17c:	4770      	bx	lr
   1e17e:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1e180:	4770      	bx	lr

0001e182 <handle_event>:
{
   1e182:	b410      	push	{r4}
   1e184:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1e188:	4604      	mov	r4, r0
   1e18a:	4608      	mov	r0, r1
		if (handler->event != event) {
   1e18c:	7811      	ldrb	r1, [r2, #0]
   1e18e:	42a1      	cmp	r1, r4
   1e190:	d004      	beq.n	1e19c <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   1e192:	3208      	adds	r2, #8
   1e194:	429a      	cmp	r2, r3
   1e196:	d1f9      	bne.n	1e18c <handle_event+0xa>
}
   1e198:	bc10      	pop	{r4}
   1e19a:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   1e19c:	8981      	ldrh	r1, [r0, #12]
   1e19e:	7853      	ldrb	r3, [r2, #1]
   1e1a0:	4299      	cmp	r1, r3
   1e1a2:	d3f9      	bcc.n	1e198 <handle_event+0x16>
		handler->handler(buf);
   1e1a4:	6853      	ldr	r3, [r2, #4]
}
   1e1a6:	bc10      	pop	{r4}
		handler->handler(buf);
   1e1a8:	4718      	bx	r3

0001e1aa <hci_data_buf_overflow>:
}
   1e1aa:	4770      	bx	lr

0001e1ac <le_data_len_change>:
{
   1e1ac:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1e1ae:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1e1b0:	8818      	ldrh	r0, [r3, #0]
   1e1b2:	f7f5 fd69 	bl	13c88 <bt_conn_lookup_handle>
	if (!conn) {
   1e1b6:	b118      	cbz	r0, 1e1c0 <le_data_len_change+0x14>
}
   1e1b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1e1bc:	f7f5 bd3a 	b.w	13c34 <bt_conn_unref>
}
   1e1c0:	bd08      	pop	{r3, pc}

0001e1c2 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   1e1c2:	2101      	movs	r1, #1
   1e1c4:	3008      	adds	r0, #8
   1e1c6:	f7f8 ba6b 	b.w	166a0 <net_buf_simple_pull_mem>

0001e1ca <bt_addr_le_copy>:
   1e1ca:	680b      	ldr	r3, [r1, #0]
   1e1cc:	6003      	str	r3, [r0, #0]
   1e1ce:	888b      	ldrh	r3, [r1, #4]
   1e1d0:	8083      	strh	r3, [r0, #4]
   1e1d2:	798b      	ldrb	r3, [r1, #6]
   1e1d4:	7183      	strb	r3, [r0, #6]
}
   1e1d6:	4770      	bx	lr

0001e1d8 <bt_addr_copy>:
   1e1d8:	680b      	ldr	r3, [r1, #0]
   1e1da:	6003      	str	r3, [r0, #0]
   1e1dc:	888b      	ldrh	r3, [r1, #4]
   1e1de:	8083      	strh	r3, [r0, #4]
}
   1e1e0:	4770      	bx	lr

0001e1e2 <hci_vendor_event>:
   1e1e2:	4770      	bx	lr

0001e1e4 <hci_num_completed_packets>:
{
   1e1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   1e1e8:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1e1ea:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   1e1ec:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   1e1ee:	783b      	ldrb	r3, [r7, #0]
   1e1f0:	429d      	cmp	r5, r3
   1e1f2:	db01      	blt.n	1e1f8 <hci_num_completed_packets+0x14>
}
   1e1f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1e1f8:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   1e1fc:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1e200:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1e204:	f7f5 fd40 	bl	13c88 <bt_conn_lookup_handle>
		if (!conn) {
   1e208:	4604      	mov	r4, r0
   1e20a:	b350      	cbz	r0, 1e262 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   1e20c:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   1e210:	b326      	cbz	r6, 1e25c <hci_num_completed_packets+0x78>
	__asm__ volatile(
   1e212:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e216:	f3ef 8211 	mrs	r2, BASEPRI
   1e21a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e21e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1e222:	69e3      	ldr	r3, [r4, #28]
   1e224:	b16b      	cbz	r3, 1e242 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   1e226:	3b01      	subs	r3, #1
   1e228:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1e22a:	f382 8811 	msr	BASEPRI, r2
   1e22e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1e232:	4620      	mov	r0, r4
   1e234:	f7f5 fc0a 	bl	13a4c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   1e238:	3e01      	subs	r6, #1
   1e23a:	f7fb fec1 	bl	19fc0 <z_impl_k_sem_give>
   1e23e:	b2b6      	uxth	r6, r6
   1e240:	e7e6      	b.n	1e210 <hci_num_completed_packets+0x2c>
Z_GENLIST_IS_EMPTY(slist)
   1e242:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1e244:	b12b      	cbz	r3, 1e252 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e246:	69a1      	ldr	r1, [r4, #24]
   1e248:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   1e24a:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e24c:	428b      	cmp	r3, r1
	list->tail = node;
   1e24e:	bf08      	it	eq
   1e250:	61a0      	streq	r0, [r4, #24]
   1e252:	f382 8811 	msr	BASEPRI, r2
   1e256:	f3bf 8f6f 	isb	sy
			if (!node) {
   1e25a:	b923      	cbnz	r3, 1e266 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   1e25c:	4620      	mov	r0, r4
   1e25e:	f7f5 fce9 	bl	13c34 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   1e262:	3501      	adds	r5, #1
   1e264:	e7c3      	b.n	1e1ee <hci_num_completed_packets+0xa>
	__asm__ volatile(
   1e266:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e26a:	f3ef 8111 	mrs	r1, BASEPRI
   1e26e:	f382 8812 	msr	BASEPRI_MAX, r2
   1e272:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1e276:	68da      	ldr	r2, [r3, #12]
   1e278:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   1e27a:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   1e27e:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   1e280:	f8c3 800c 	str.w	r8, [r3, #12]
   1e284:	b94a      	cbnz	r2, 1e29a <hci_num_completed_packets+0xb6>
	list->head = node;
   1e286:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1e28a:	f381 8811 	msr	BASEPRI, r1
   1e28e:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1e292:	4648      	mov	r0, r9
   1e294:	f7fc f9f4 	bl	1a680 <k_work_submit>
   1e298:	e7cb      	b.n	1e232 <hci_num_completed_packets+0x4e>
	parent->next = child;
   1e29a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1e29c:	6263      	str	r3, [r4, #36]	; 0x24
}
   1e29e:	e7f4      	b.n	1e28a <hci_num_completed_packets+0xa6>

0001e2a0 <hci_disconn_complete>:
{
   1e2a0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1e2a2:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1e2a4:	7835      	ldrb	r5, [r6, #0]
   1e2a6:	bb0d      	cbnz	r5, 1e2ec <hci_disconn_complete+0x4c>
	conn = bt_conn_lookup_handle(handle);
   1e2a8:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   1e2ac:	f7f5 fcec 	bl	13c88 <bt_conn_lookup_handle>
	if (!conn) {
   1e2b0:	4604      	mov	r4, r0
   1e2b2:	b1d8      	cbz	r0, 1e2ec <hci_disconn_complete+0x4c>
	conn->err = evt->reason;
   1e2b4:	78f3      	ldrb	r3, [r6, #3]
   1e2b6:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1e2b8:	4629      	mov	r1, r5
   1e2ba:	f7f5 fcf1 	bl	13ca0 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   1e2be:	78a3      	ldrb	r3, [r4, #2]
   1e2c0:	2b01      	cmp	r3, #1
   1e2c2:	d004      	beq.n	1e2ce <hci_disconn_complete+0x2e>
	bt_conn_unref(conn);
   1e2c4:	4620      	mov	r0, r4
}
   1e2c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1e2ca:	f7f5 bcb3 	b.w	13c34 <bt_conn_unref>
   1e2ce:	f3bf 8f5b 	dmb	ish
   1e2d2:	6863      	ldr	r3, [r4, #4]
   1e2d4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   1e2d8:	07db      	lsls	r3, r3, #31
   1e2da:	d5f3      	bpl.n	1e2c4 <hci_disconn_complete+0x24>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1e2dc:	4620      	mov	r0, r4
   1e2de:	2102      	movs	r1, #2
   1e2e0:	f7f5 fcde 	bl	13ca0 <bt_conn_set_state>
		bt_le_scan_update(false);
   1e2e4:	4628      	mov	r0, r5
   1e2e6:	f7f5 f8ef 	bl	134c8 <bt_le_scan_update>
   1e2ea:	e7eb      	b.n	1e2c4 <hci_disconn_complete+0x24>
}
   1e2ec:	bd70      	pop	{r4, r5, r6, pc}

0001e2ee <le_conn_update_complete>:
{
   1e2ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1e2f0:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1e2f2:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1e2f6:	f7f5 fcc7 	bl	13c88 <bt_conn_lookup_handle>
	if (!conn) {
   1e2fa:	4604      	mov	r4, r0
   1e2fc:	b1c0      	cbz	r0, 1e330 <le_conn_update_complete+0x42>
	if (!evt->status) {
   1e2fe:	782b      	ldrb	r3, [r5, #0]
   1e300:	b9c3      	cbnz	r3, 1e334 <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1e302:	792a      	ldrb	r2, [r5, #4]
   1e304:	78eb      	ldrb	r3, [r5, #3]
   1e306:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e30a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1e30e:	79aa      	ldrb	r2, [r5, #6]
   1e310:	796b      	ldrb	r3, [r5, #5]
   1e312:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e316:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1e31a:	79eb      	ldrb	r3, [r5, #7]
   1e31c:	7a2a      	ldrb	r2, [r5, #8]
   1e31e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e322:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   1e326:	f7f5 fdd7 	bl	13ed8 <notify_le_param_updated>
	bt_conn_unref(conn);
   1e32a:	4620      	mov	r0, r4
   1e32c:	f7f5 fc82 	bl	13c34 <bt_conn_unref>
}
   1e330:	b003      	add	sp, #12
   1e332:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1e334:	2b1a      	cmp	r3, #26
   1e336:	d1f8      	bne.n	1e32a <le_conn_update_complete+0x3c>
   1e338:	78c3      	ldrb	r3, [r0, #3]
   1e33a:	2b01      	cmp	r3, #1
   1e33c:	d1f5      	bne.n	1e32a <le_conn_update_complete+0x3c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e33e:	f3bf 8f5b 	dmb	ish
   1e342:	1d03      	adds	r3, r0, #4
   1e344:	e853 2f00 	ldrex	r2, [r3]
   1e348:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   1e34c:	e843 1500 	strex	r5, r1, [r3]
   1e350:	2d00      	cmp	r5, #0
   1e352:	d1f7      	bne.n	1e344 <le_conn_update_complete+0x56>
   1e354:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1e358:	0553      	lsls	r3, r2, #21
   1e35a:	d4e6      	bmi.n	1e32a <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   1e35c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1e360:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   1e362:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   1e364:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   1e368:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1e36a:	f7f6 f965 	bl	14638 <bt_l2cap_update_conn_param>
   1e36e:	e7dc      	b.n	1e32a <le_conn_update_complete+0x3c>

0001e370 <hci_le_read_max_data_len>:
{
   1e370:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e372:	4606      	mov	r6, r0
   1e374:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1e376:	aa01      	add	r2, sp, #4
   1e378:	2100      	movs	r1, #0
   1e37a:	f242 002f 	movw	r0, #8239	; 0x202f
   1e37e:	f7f4 f8ab 	bl	124d8 <bt_hci_cmd_send_sync>
	if (err) {
   1e382:	4604      	mov	r4, r0
   1e384:	b948      	cbnz	r0, 1e39a <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   1e386:	9801      	ldr	r0, [sp, #4]
   1e388:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1e38a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1e38e:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1e390:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1e394:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1e396:	f7f8 f875 	bl	16484 <net_buf_unref>
}
   1e39a:	4620      	mov	r0, r4
   1e39c:	b002      	add	sp, #8
   1e39e:	bd70      	pop	{r4, r5, r6, pc}

0001e3a0 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1e3a0:	f7f4 babe 	b.w	12920 <bt_le_create_conn_legacy>

0001e3a4 <bt_hci_disconnect>:
{
   1e3a4:	b570      	push	{r4, r5, r6, lr}
   1e3a6:	4606      	mov	r6, r0
   1e3a8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1e3aa:	f240 4006 	movw	r0, #1030	; 0x406
   1e3ae:	2103      	movs	r1, #3
   1e3b0:	f7f4 f84a 	bl	12448 <bt_hci_cmd_create>
	if (!buf) {
   1e3b4:	4604      	mov	r4, r0
   1e3b6:	b168      	cbz	r0, 1e3d4 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1e3b8:	2103      	movs	r1, #3
   1e3ba:	3008      	adds	r0, #8
   1e3bc:	f7f8 f992 	bl	166e4 <net_buf_simple_add>
	disconn->reason = reason;
   1e3c0:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1e3c2:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e3c4:	4621      	mov	r1, r4
   1e3c6:	2200      	movs	r2, #0
}
   1e3c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e3cc:	f240 4006 	movw	r0, #1030	; 0x406
   1e3d0:	f7f4 b882 	b.w	124d8 <bt_hci_cmd_send_sync>
}
   1e3d4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e3d8:	bd70      	pop	{r4, r5, r6, pc}

0001e3da <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1e3da:	8802      	ldrh	r2, [r0, #0]
   1e3dc:	8843      	ldrh	r3, [r0, #2]
   1e3de:	429a      	cmp	r2, r3
{
   1e3e0:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1e3e2:	d818      	bhi.n	1e416 <bt_le_conn_params_valid+0x3c>
   1e3e4:	2a05      	cmp	r2, #5
   1e3e6:	d916      	bls.n	1e416 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1e3e8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1e3ec:	d813      	bhi.n	1e416 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1e3ee:	8884      	ldrh	r4, [r0, #4]
   1e3f0:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1e3f4:	d20f      	bcs.n	1e416 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e3f6:	88c1      	ldrh	r1, [r0, #6]
   1e3f8:	f1a1 020a 	sub.w	r2, r1, #10
   1e3fc:	b292      	uxth	r2, r2
   1e3fe:	f640 4076 	movw	r0, #3190	; 0xc76
   1e402:	4282      	cmp	r2, r0
   1e404:	d807      	bhi.n	1e416 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   1e406:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e40a:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1e40e:	bf34      	ite	cc
   1e410:	2001      	movcc	r0, #1
   1e412:	2000      	movcs	r0, #0
}
   1e414:	bd10      	pop	{r4, pc}
		return false;
   1e416:	2000      	movs	r0, #0
   1e418:	e7fc      	b.n	1e414 <bt_le_conn_params_valid+0x3a>

0001e41a <bt_le_set_data_len>:
{
   1e41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e41c:	4607      	mov	r7, r0
   1e41e:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e420:	f242 0022 	movw	r0, #8226	; 0x2022
   1e424:	2106      	movs	r1, #6
{
   1e426:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e428:	f7f4 f80e 	bl	12448 <bt_hci_cmd_create>
	if (!buf) {
   1e42c:	4604      	mov	r4, r0
   1e42e:	b170      	cbz	r0, 1e44e <bt_le_set_data_len+0x34>
   1e430:	2106      	movs	r1, #6
   1e432:	3008      	adds	r0, #8
   1e434:	f7f8 f956 	bl	166e4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e438:	883b      	ldrh	r3, [r7, #0]
   1e43a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1e43c:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1e43e:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e440:	4621      	mov	r1, r4
   1e442:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1e446:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e44a:	f7f4 baf1 	b.w	12a30 <bt_hci_cmd_send>
}
   1e44e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e454 <bt_le_set_phy>:
{
   1e454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e458:	4680      	mov	r8, r0
   1e45a:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e45c:	f242 0032 	movw	r0, #8242	; 0x2032
   1e460:	2107      	movs	r1, #7
{
   1e462:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1e466:	4616      	mov	r6, r2
   1e468:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e46a:	f7f3 ffed 	bl	12448 <bt_hci_cmd_create>
	if (!buf) {
   1e46e:	4604      	mov	r4, r0
   1e470:	b190      	cbz	r0, 1e498 <bt_le_set_phy+0x44>
   1e472:	2107      	movs	r1, #7
   1e474:	3008      	adds	r0, #8
   1e476:	f7f8 f935 	bl	166e4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e47a:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1e47e:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1e480:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1e482:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e484:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1e486:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e48a:	4621      	mov	r1, r4
   1e48c:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1e490:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e494:	f7f4 bacc 	b.w	12a30 <bt_hci_cmd_send>
}
   1e498:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e49c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e4a0 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1e4a0:	6880      	ldr	r0, [r0, #8]
   1e4a2:	f7f4 bb4d 	b.w	12b40 <bt_hci_le_enh_conn_complete>

0001e4a6 <le_legacy_conn_complete>:
{
   1e4a6:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1e4a8:	6881      	ldr	r1, [r0, #8]
{
   1e4aa:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   1e4ac:	780b      	ldrb	r3, [r1, #0]
   1e4ae:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1e4b2:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1e4b6:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1e4ba:	78cb      	ldrb	r3, [r1, #3]
   1e4bc:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1e4c0:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1e4c4:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1e4c8:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1e4cc:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1e4d0:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1e4d4:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1e4d8:	7c4b      	ldrb	r3, [r1, #17]
   1e4da:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1e4de:	a803      	add	r0, sp, #12
   1e4e0:	3104      	adds	r1, #4
   1e4e2:	f7ff fe72 	bl	1e1ca <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1e4e6:	2200      	movs	r2, #0
   1e4e8:	4669      	mov	r1, sp
   1e4ea:	f10d 0013 	add.w	r0, sp, #19
   1e4ee:	9200      	str	r2, [sp, #0]
   1e4f0:	f8ad 2004 	strh.w	r2, [sp, #4]
   1e4f4:	f7ff fe70 	bl	1e1d8 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1e4f8:	4669      	mov	r1, sp
   1e4fa:	f10d 0019 	add.w	r0, sp, #25
   1e4fe:	9200      	str	r2, [sp, #0]
   1e500:	f8ad 2004 	strh.w	r2, [sp, #4]
   1e504:	f7ff fe68 	bl	1e1d8 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   1e508:	a802      	add	r0, sp, #8
   1e50a:	f7f4 fb19 	bl	12b40 <bt_hci_le_enh_conn_complete>
}
   1e50e:	b00b      	add	sp, #44	; 0x2c
   1e510:	f85d fb04 	ldr.w	pc, [sp], #4

0001e514 <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1e514:	6883      	ldr	r3, [r0, #8]
{
   1e516:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_handle(handle);
   1e518:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1e51c:	f7f5 fbb4 	bl	13c88 <bt_conn_lookup_handle>
	if (!conn) {
   1e520:	4604      	mov	r4, r0
   1e522:	b310      	cbz	r0, 1e56a <le_phy_update_complete+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e524:	f3bf 8f5b 	dmb	ish
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1e528:	1d03      	adds	r3, r0, #4
   1e52a:	e853 2f00 	ldrex	r2, [r3]
   1e52e:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   1e532:	e843 1c00 	strex	ip, r1, [r3]
   1e536:	f1bc 0f00 	cmp.w	ip, #0
   1e53a:	d1f6      	bne.n	1e52a <le_phy_update_complete+0x16>
   1e53c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1e540:	0612      	lsls	r2, r2, #24
   1e542:	d50d      	bpl.n	1e560 <le_phy_update_complete+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e544:	f3bf 8f5b 	dmb	ish
   1e548:	e853 2f00 	ldrex	r2, [r3]
   1e54c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   1e550:	e843 2100 	strex	r1, r2, [r3]
   1e554:	2900      	cmp	r1, #0
   1e556:	d1f7      	bne.n	1e548 <le_phy_update_complete+0x34>
   1e558:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   1e55c:	f7f4 fa8a 	bl	12a74 <conn_auto_initiate>
	bt_conn_unref(conn);
   1e560:	4620      	mov	r0, r4
}
   1e562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1e566:	f7f5 bb65 	b.w	13c34 <bt_conn_unref>
}
   1e56a:	bd10      	pop	{r4, pc}

0001e56c <le_remote_feat_complete>:
{
   1e56c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1e56e:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1e570:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1e574:	f7f5 fb88 	bl	13c88 <bt_conn_lookup_handle>
	if (!conn) {
   1e578:	4604      	mov	r4, r0
   1e57a:	b1e8      	cbz	r0, 1e5b8 <le_remote_feat_complete+0x4c>
	if (!evt->status) {
   1e57c:	782b      	ldrb	r3, [r5, #0]
   1e57e:	b933      	cbnz	r3, 1e58e <le_remote_feat_complete+0x22>
   1e580:	f855 3f03 	ldr.w	r3, [r5, #3]!
   1e584:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
   1e588:	686b      	ldr	r3, [r5, #4]
   1e58a:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
   1e58e:	1d23      	adds	r3, r4, #4
   1e590:	f3bf 8f5b 	dmb	ish
   1e594:	e853 2f00 	ldrex	r2, [r3]
   1e598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1e59c:	e843 2100 	strex	r1, r2, [r3]
   1e5a0:	2900      	cmp	r1, #0
   1e5a2:	d1f7      	bne.n	1e594 <le_remote_feat_complete+0x28>
   1e5a4:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   1e5a8:	4620      	mov	r0, r4
   1e5aa:	f7f4 fa63 	bl	12a74 <conn_auto_initiate>
	bt_conn_unref(conn);
   1e5ae:	4620      	mov	r0, r4
}
   1e5b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1e5b4:	f7f5 bb3e 	b.w	13c34 <bt_conn_unref>
}
   1e5b8:	bd38      	pop	{r3, r4, r5, pc}

0001e5ba <le_conn_param_neg_reply>:
{
   1e5ba:	b570      	push	{r4, r5, r6, lr}
   1e5bc:	4606      	mov	r6, r0
   1e5be:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1e5c0:	f242 0021 	movw	r0, #8225	; 0x2021
   1e5c4:	2103      	movs	r1, #3
   1e5c6:	f7f3 ff3f 	bl	12448 <bt_hci_cmd_create>
	if (!buf) {
   1e5ca:	4604      	mov	r4, r0
   1e5cc:	b160      	cbz	r0, 1e5e8 <le_conn_param_neg_reply+0x2e>
   1e5ce:	2103      	movs	r1, #3
   1e5d0:	3008      	adds	r0, #8
   1e5d2:	f7f8 f887 	bl	166e4 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1e5d6:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1e5d8:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1e5da:	4621      	mov	r1, r4
   1e5dc:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1e5e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1e5e4:	f7f4 ba24 	b.w	12a30 <bt_hci_cmd_send>
}
   1e5e8:	bd70      	pop	{r4, r5, r6, pc}

0001e5ea <le_conn_param_req>:
{
   1e5ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1e5ec:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1e5ee:	78d9      	ldrb	r1, [r3, #3]
   1e5f0:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1e5f2:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1e5f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e5f8:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1e5fc:	7959      	ldrb	r1, [r3, #5]
   1e5fe:	791a      	ldrb	r2, [r3, #4]
   1e600:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e604:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1e608:	799a      	ldrb	r2, [r3, #6]
   1e60a:	79d9      	ldrb	r1, [r3, #7]
   1e60c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e610:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1e614:	7a1a      	ldrb	r2, [r3, #8]
   1e616:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1e618:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1e61a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1e61e:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1e620:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1e624:	f7f5 fb30 	bl	13c88 <bt_conn_lookup_handle>
	if (!conn) {
   1e628:	4606      	mov	r6, r0
   1e62a:	b928      	cbnz	r0, 1e638 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1e62c:	2102      	movs	r1, #2
   1e62e:	4620      	mov	r0, r4
   1e630:	f7ff ffc3 	bl	1e5ba <le_conn_param_neg_reply>
}
   1e634:	b003      	add	sp, #12
   1e636:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1e638:	4669      	mov	r1, sp
   1e63a:	f7f5 fcb5 	bl	13fa8 <le_param_req>
   1e63e:	b938      	cbnz	r0, 1e650 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1e640:	211e      	movs	r1, #30
   1e642:	4620      	mov	r0, r4
   1e644:	f7ff ffb9 	bl	1e5ba <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1e648:	4630      	mov	r0, r6
   1e64a:	f7f5 faf3 	bl	13c34 <bt_conn_unref>
   1e64e:	e7f1      	b.n	1e634 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1e650:	210e      	movs	r1, #14
   1e652:	f242 0020 	movw	r0, #8224	; 0x2020
   1e656:	f7f3 fef7 	bl	12448 <bt_hci_cmd_create>
	if (!buf) {
   1e65a:	4605      	mov	r5, r0
   1e65c:	2800      	cmp	r0, #0
   1e65e:	d0f3      	beq.n	1e648 <le_conn_param_req+0x5e>
   1e660:	210e      	movs	r1, #14
   1e662:	3008      	adds	r0, #8
   1e664:	f7f8 f83e 	bl	166e4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1e668:	220e      	movs	r2, #14
   1e66a:	4604      	mov	r4, r0
   1e66c:	2100      	movs	r1, #0
   1e66e:	f002 fa0a 	bl	20a86 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1e672:	f8bd 3000 	ldrh.w	r3, [sp]
   1e676:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1e678:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1e67c:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1e67e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1e682:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1e684:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1e688:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1e68a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1e68c:	4629      	mov	r1, r5
   1e68e:	f242 0020 	movw	r0, #8224	; 0x2020
   1e692:	f7f4 f9cd 	bl	12a30 <bt_hci_cmd_send>
   1e696:	e7d7      	b.n	1e648 <le_conn_param_req+0x5e>

0001e698 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1e698:	2000      	movs	r0, #0
   1e69a:	4770      	bx	lr

0001e69c <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   1e69c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e69e:	4604      	mov	r4, r0
   1e6a0:	460e      	mov	r6, r1
   1e6a2:	4617      	mov	r7, r2
	while (ad->len > 1) {
   1e6a4:	88a3      	ldrh	r3, [r4, #4]
   1e6a6:	2b01      	cmp	r3, #1
   1e6a8:	d801      	bhi.n	1e6ae <bt_data_parse+0x12>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   1e6aa:	b003      	add	sp, #12
   1e6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
   1e6ae:	4620      	mov	r0, r4
   1e6b0:	f001 fb8a 	bl	1fdc8 <net_buf_simple_pull_u8>
		if (len == 0U) {
   1e6b4:	4605      	mov	r5, r0
   1e6b6:	2800      	cmp	r0, #0
   1e6b8:	d0f7      	beq.n	1e6aa <bt_data_parse+0xe>
		if (len > ad->len) {
   1e6ba:	88a2      	ldrh	r2, [r4, #4]
   1e6bc:	b283      	uxth	r3, r0
   1e6be:	429a      	cmp	r2, r3
   1e6c0:	d3f3      	bcc.n	1e6aa <bt_data_parse+0xe>
		data.type = net_buf_simple_pull_u8(ad);
   1e6c2:	4620      	mov	r0, r4
   1e6c4:	f001 fb80 	bl	1fdc8 <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   1e6c8:	3d01      	subs	r5, #1
		data.data = ad->data;
   1e6ca:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   1e6cc:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
   1e6d0:	4639      	mov	r1, r7
   1e6d2:	4668      	mov	r0, sp
		data.data_len = len - 1;
   1e6d4:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   1e6d8:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   1e6da:	47b0      	blx	r6
   1e6dc:	2800      	cmp	r0, #0
   1e6de:	d0e4      	beq.n	1e6aa <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
   1e6e0:	4629      	mov	r1, r5
   1e6e2:	4620      	mov	r0, r4
   1e6e4:	f7f7 ffbc 	bl	16660 <net_buf_simple_pull>
   1e6e8:	e7dc      	b.n	1e6a4 <bt_data_parse+0x8>

0001e6ea <bt_addr_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e6ea:	680b      	ldr	r3, [r1, #0]
   1e6ec:	6003      	str	r3, [r0, #0]
   1e6ee:	888b      	ldrh	r3, [r1, #4]
   1e6f0:	8083      	strh	r3, [r0, #4]
   1e6f2:	4770      	bx	lr

0001e6f4 <bt_addr_le_copy>:
   1e6f4:	680b      	ldr	r3, [r1, #0]
   1e6f6:	6003      	str	r3, [r0, #0]
   1e6f8:	888b      	ldrh	r3, [r1, #4]
   1e6fa:	8083      	strh	r3, [r0, #4]
   1e6fc:	798b      	ldrb	r3, [r1, #6]
   1e6fe:	7183      	strb	r3, [r0, #6]
}
   1e700:	4770      	bx	lr

0001e702 <bt_lookup_id_addr>:
}
   1e702:	4608      	mov	r0, r1
   1e704:	4770      	bx	lr

0001e706 <bt_id_set_private_addr>:
{
   1e706:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1e708:	2106      	movs	r1, #6
   1e70a:	4668      	mov	r0, sp
   1e70c:	f7fa f8de 	bl	188cc <bt_rand>
	if (err) {
   1e710:	b940      	cbnz	r0, 1e724 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1e712:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1e716:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1e718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e71c:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1e720:	f7f4 fcba 	bl	13098 <set_random_address>
}
   1e724:	b003      	add	sp, #12
   1e726:	f85d fb04 	ldr.w	pc, [sp], #4

0001e72a <bt_id_scan_random_addr_check>:
}
   1e72a:	2001      	movs	r0, #1
   1e72c:	4770      	bx	lr

0001e72e <atomic_and>:
{
   1e72e:	4603      	mov	r3, r0
}
   1e730:	f3bf 8f5b 	dmb	ish
   1e734:	e853 0f00 	ldrex	r0, [r3]
   1e738:	ea00 0201 	and.w	r2, r0, r1
   1e73c:	e843 2c00 	strex	ip, r2, [r3]
   1e740:	f1bc 0f00 	cmp.w	ip, #0
   1e744:	d1f6      	bne.n	1e734 <atomic_and+0x6>
   1e746:	f3bf 8f5b 	dmb	ish
   1e74a:	4770      	bx	lr

0001e74c <bt_addr_le_copy>:
   1e74c:	680b      	ldr	r3, [r1, #0]
   1e74e:	6003      	str	r3, [r0, #0]
   1e750:	888b      	ldrh	r3, [r1, #4]
   1e752:	8083      	strh	r3, [r0, #4]
   1e754:	798b      	ldrb	r3, [r1, #6]
   1e756:	7183      	strb	r3, [r0, #6]
   1e758:	4770      	bx	lr

0001e75a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e75a:	f3bf 8f5b 	dmb	ish
   1e75e:	6800      	ldr	r0, [r0, #0]
   1e760:	f3bf 8f5b 	dmb	ish
}
   1e764:	4770      	bx	lr

0001e766 <bt_addr_le_copy>:
   1e766:	680b      	ldr	r3, [r1, #0]
   1e768:	6003      	str	r3, [r0, #0]
   1e76a:	888b      	ldrh	r3, [r1, #4]
   1e76c:	8083      	strh	r3, [r0, #4]
   1e76e:	798b      	ldrb	r3, [r1, #6]
   1e770:	7183      	strb	r3, [r0, #6]
   1e772:	4770      	bx	lr

0001e774 <tx_notify>:
{
   1e774:	b570      	push	{r4, r5, r6, lr}
   1e776:	4604      	mov	r4, r0
	__asm__ volatile(
   1e778:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e77c:	f3ef 8311 	mrs	r3, BASEPRI
   1e780:	f382 8812 	msr	BASEPRI_MAX, r2
   1e784:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1e788:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1e78a:	b920      	cbnz	r0, 1e796 <tx_notify+0x22>
	__asm__ volatile(
   1e78c:	f383 8811 	msr	BASEPRI, r3
   1e790:	f3bf 8f6f 	isb	sy
}
   1e794:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e796:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1e798:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1e79a:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e79c:	4288      	cmp	r0, r1
	list->tail = node;
   1e79e:	bf08      	it	eq
   1e7a0:	6262      	streq	r2, [r4, #36]	; 0x24
   1e7a2:	f383 8811 	msr	BASEPRI, r3
   1e7a6:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1e7aa:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1e7ae:	f7f5 f861 	bl	13874 <tx_free>
		cb(conn, user_data);
   1e7b2:	4631      	mov	r1, r6
   1e7b4:	4620      	mov	r0, r4
   1e7b6:	47a8      	blx	r5
	while (1) {
   1e7b8:	e7de      	b.n	1e778 <tx_notify+0x4>

0001e7ba <tx_complete_work>:
	tx_notify(conn);
   1e7ba:	3828      	subs	r0, #40	; 0x28
   1e7bc:	f7ff bfda 	b.w	1e774 <tx_notify>

0001e7c0 <bt_conn_reset_rx_state>:
{
   1e7c0:	b510      	push	{r4, lr}
   1e7c2:	4604      	mov	r4, r0
	if (!conn->rx) {
   1e7c4:	6900      	ldr	r0, [r0, #16]
   1e7c6:	b118      	cbz	r0, 1e7d0 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1e7c8:	f7f7 fe5c 	bl	16484 <net_buf_unref>
	conn->rx = NULL;
   1e7cc:	2300      	movs	r3, #0
   1e7ce:	6123      	str	r3, [r4, #16]
}
   1e7d0:	bd10      	pop	{r4, pc}

0001e7d2 <bt_conn_recv>:
{
   1e7d2:	b570      	push	{r4, r5, r6, lr}
   1e7d4:	4616      	mov	r6, r2
   1e7d6:	4604      	mov	r4, r0
   1e7d8:	460d      	mov	r5, r1
	tx_notify(conn);
   1e7da:	f7ff ffcb 	bl	1e774 <tx_notify>
	switch (flags) {
   1e7de:	2e01      	cmp	r6, #1
   1e7e0:	d01a      	beq.n	1e818 <bt_conn_recv+0x46>
   1e7e2:	2e02      	cmp	r6, #2
   1e7e4:	d11a      	bne.n	1e81c <bt_conn_recv+0x4a>
		if (conn->rx) {
   1e7e6:	6923      	ldr	r3, [r4, #16]
   1e7e8:	b113      	cbz	r3, 1e7f0 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1e7ea:	4620      	mov	r0, r4
   1e7ec:	f7ff ffe8 	bl	1e7c0 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1e7f0:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1e7f2:	6921      	ldr	r1, [r4, #16]
   1e7f4:	898a      	ldrh	r2, [r1, #12]
   1e7f6:	2a01      	cmp	r2, #1
   1e7f8:	d93a      	bls.n	1e870 <bt_conn_recv+0x9e>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1e7fa:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1e7fc:	7845      	ldrb	r5, [r0, #1]
   1e7fe:	7803      	ldrb	r3, [r0, #0]
   1e800:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1e804:	3304      	adds	r3, #4
   1e806:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1e808:	429a      	cmp	r2, r3
   1e80a:	d331      	bcc.n	1e870 <bt_conn_recv+0x9e>
	if (conn->rx->len > acl_total_len) {
   1e80c:	d928      	bls.n	1e860 <bt_conn_recv+0x8e>
		bt_conn_reset_rx_state(conn);
   1e80e:	4620      	mov	r0, r4
}
   1e810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1e814:	f7ff bfd4 	b.w	1e7c0 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1e818:	6920      	ldr	r0, [r4, #16]
   1e81a:	b918      	cbnz	r0, 1e824 <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   1e81c:	4620      	mov	r0, r4
   1e81e:	f7ff ffcf 	bl	1e7c0 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1e822:	e001      	b.n	1e828 <bt_conn_recv+0x56>
		if (!buf->len) {
   1e824:	89ae      	ldrh	r6, [r5, #12]
   1e826:	b926      	cbnz	r6, 1e832 <bt_conn_recv+0x60>
			net_buf_unref(buf);
   1e828:	4628      	mov	r0, r5
}
   1e82a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1e82e:	f7f7 be29 	b.w	16484 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   1e832:	3008      	adds	r0, #8
   1e834:	f001 fadc 	bl	1fdf0 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1e838:	4286      	cmp	r6, r0
   1e83a:	d907      	bls.n	1e84c <bt_conn_recv+0x7a>
			bt_l2cap_recv(conn, conn->rx, false);
   1e83c:	6921      	ldr	r1, [r4, #16]
   1e83e:	2200      	movs	r2, #0
   1e840:	4620      	mov	r0, r4
   1e842:	f000 f9e2 	bl	1ec0a <bt_l2cap_recv>
			conn->rx = NULL;
   1e846:	2300      	movs	r3, #0
   1e848:	6123      	str	r3, [r4, #16]
   1e84a:	e7ed      	b.n	1e828 <bt_conn_recv+0x56>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e84c:	6920      	ldr	r0, [r4, #16]
   1e84e:	89aa      	ldrh	r2, [r5, #12]
   1e850:	68a9      	ldr	r1, [r5, #8]
   1e852:	3008      	adds	r0, #8
   1e854:	f001 fad4 	bl	1fe00 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1e858:	4628      	mov	r0, r5
   1e85a:	f7f7 fe13 	bl	16484 <net_buf_unref>
		break;
   1e85e:	e7c8      	b.n	1e7f2 <bt_conn_recv+0x20>
	conn->rx = NULL;
   1e860:	2300      	movs	r3, #0
   1e862:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1e864:	4620      	mov	r0, r4
   1e866:	2201      	movs	r2, #1
}
   1e868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   1e86c:	f000 b9cd 	b.w	1ec0a <bt_l2cap_recv>
}
   1e870:	bd70      	pop	{r4, r5, r6, pc}

0001e872 <bt_conn_ref>:
{
   1e872:	b510      	push	{r4, lr}
   1e874:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   1e876:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   1e87a:	4610      	mov	r0, r2
   1e87c:	f7ff ff6d 	bl	1e75a <atomic_get>
		if (!old) {
   1e880:	b180      	cbz	r0, 1e8a4 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e882:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1e886:	1c41      	adds	r1, r0, #1
   1e888:	e852 4f00 	ldrex	r4, [r2]
   1e88c:	4284      	cmp	r4, r0
   1e88e:	d104      	bne.n	1e89a <bt_conn_ref+0x28>
   1e890:	e842 1c00 	strex	ip, r1, [r2]
   1e894:	f1bc 0f00 	cmp.w	ip, #0
   1e898:	d1f6      	bne.n	1e888 <bt_conn_ref+0x16>
   1e89a:	f3bf 8f5b 	dmb	ish
   1e89e:	d1ec      	bne.n	1e87a <bt_conn_ref+0x8>
}
   1e8a0:	4618      	mov	r0, r3
   1e8a2:	bd10      	pop	{r4, pc}
			return NULL;
   1e8a4:	4603      	mov	r3, r0
   1e8a6:	e7fb      	b.n	1e8a0 <bt_conn_ref+0x2e>

0001e8a8 <conn_lookup_handle>:
{
   1e8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e8ac:	4607      	mov	r7, r0
   1e8ae:	460e      	mov	r6, r1
   1e8b0:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1e8b2:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e8b4:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   1e8b8:	42b4      	cmp	r4, r6
   1e8ba:	d103      	bne.n	1e8c4 <conn_lookup_handle+0x1c>
	return NULL;
   1e8bc:	2300      	movs	r3, #0
}
   1e8be:	4618      	mov	r0, r3
   1e8c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e8c4:	fb09 7004 	mla	r0, r9, r4, r7
   1e8c8:	f7ff ffd3 	bl	1e872 <bt_conn_ref>
   1e8cc:	4603      	mov	r3, r0
		if (!conn) {
   1e8ce:	b158      	cbz	r0, 1e8e8 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1e8d0:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1e8d2:	2d01      	cmp	r5, #1
   1e8d4:	d002      	beq.n	1e8dc <conn_lookup_handle+0x34>
   1e8d6:	3d07      	subs	r5, #7
   1e8d8:	2d01      	cmp	r5, #1
   1e8da:	d803      	bhi.n	1e8e4 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1e8dc:	881a      	ldrh	r2, [r3, #0]
   1e8de:	4542      	cmp	r2, r8
   1e8e0:	d0ed      	beq.n	1e8be <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1e8e2:	4618      	mov	r0, r3
   1e8e4:	f7f5 f9a6 	bl	13c34 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1e8e8:	3401      	adds	r4, #1
   1e8ea:	e7e5      	b.n	1e8b8 <conn_lookup_handle+0x10>

0001e8ec <bt_conn_connected>:
{
   1e8ec:	b510      	push	{r4, lr}
   1e8ee:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1e8f0:	f7f5 fe2c 	bl	1454c <bt_l2cap_connected>
	notify_connected(conn);
   1e8f4:	4620      	mov	r0, r4
}
   1e8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1e8fa:	f7f4 bfc5 	b.w	13888 <notify_connected>

0001e8fe <bt_conn_get_security>:
}
   1e8fe:	2001      	movs	r0, #1
   1e900:	4770      	bx	lr

0001e902 <bt_conn_is_peer_addr_le>:
{
   1e902:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1e904:	7a03      	ldrb	r3, [r0, #8]
   1e906:	428b      	cmp	r3, r1
{
   1e908:	4604      	mov	r4, r0
   1e90a:	4615      	mov	r5, r2
	if (id != conn->id) {
   1e90c:	d115      	bne.n	1e93a <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1e90e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1e912:	2207      	movs	r2, #7
   1e914:	4628      	mov	r0, r5
   1e916:	f002 f89a 	bl	20a4e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1e91a:	b180      	cbz	r0, 1e93e <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1e91c:	78e3      	ldrb	r3, [r4, #3]
   1e91e:	2207      	movs	r2, #7
   1e920:	b943      	cbnz	r3, 1e934 <bt_conn_is_peer_addr_le+0x32>
   1e922:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   1e926:	4628      	mov	r0, r5
   1e928:	f002 f891 	bl	20a4e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1e92c:	fab0 f080 	clz	r0, r0
   1e930:	0940      	lsrs	r0, r0, #5
}
   1e932:	bd38      	pop	{r3, r4, r5, pc}
   1e934:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1e938:	e7f5      	b.n	1e926 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1e93a:	2000      	movs	r0, #0
   1e93c:	e7f9      	b.n	1e932 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1e93e:	2001      	movs	r0, #1
   1e940:	e7f7      	b.n	1e932 <bt_conn_is_peer_addr_le+0x30>

0001e942 <bt_conn_exists_le>:
{
   1e942:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1e944:	f7f5 fba0 	bl	14088 <bt_conn_lookup_addr_le>
	if (conn) {
   1e948:	b110      	cbz	r0, 1e950 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   1e94a:	f7f5 f973 	bl	13c34 <bt_conn_unref>
		return true;
   1e94e:	2001      	movs	r0, #1
}
   1e950:	bd08      	pop	{r3, pc}

0001e952 <bt_conn_le_conn_update>:
{
   1e952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e954:	4607      	mov	r7, r0
   1e956:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1e958:	f242 0013 	movw	r0, #8211	; 0x2013
   1e95c:	210e      	movs	r1, #14
   1e95e:	f7f3 fd73 	bl	12448 <bt_hci_cmd_create>
	if (!buf) {
   1e962:	4606      	mov	r6, r0
   1e964:	b1d0      	cbz	r0, 1e99c <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1e966:	210e      	movs	r1, #14
   1e968:	3008      	adds	r0, #8
   1e96a:	f7f7 febb 	bl	166e4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1e96e:	220e      	movs	r2, #14
   1e970:	4604      	mov	r4, r0
   1e972:	2100      	movs	r1, #0
   1e974:	f002 f887 	bl	20a86 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1e978:	883b      	ldrh	r3, [r7, #0]
   1e97a:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1e97c:	882b      	ldrh	r3, [r5, #0]
   1e97e:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1e980:	886b      	ldrh	r3, [r5, #2]
   1e982:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1e984:	88ab      	ldrh	r3, [r5, #4]
   1e986:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1e988:	88eb      	ldrh	r3, [r5, #6]
   1e98a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e98c:	4631      	mov	r1, r6
   1e98e:	2200      	movs	r2, #0
}
   1e990:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e994:	f242 0013 	movw	r0, #8211	; 0x2013
   1e998:	f7f3 bd9e 	b.w	124d8 <bt_hci_cmd_send_sync>
}
   1e99c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e9a2 <l2cap_connected>:
}
   1e9a2:	4770      	bx	lr

0001e9a4 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1e9a4:	3010      	adds	r0, #16
   1e9a6:	f7fc b80d 	b.w	1a9c4 <k_work_cancel_delayable>

0001e9aa <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1e9aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e9ac:	4607      	mov	r7, r0
   1e9ae:	460e      	mov	r6, r1
   1e9b0:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1e9b2:	2300      	movs	r3, #0
   1e9b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e9b8:	2104      	movs	r1, #4
   1e9ba:	2000      	movs	r0, #0
   1e9bc:	f7f5 fa60 	bl	13e80 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1e9c0:	4604      	mov	r4, r0
   1e9c2:	b130      	cbz	r0, 1e9d2 <l2cap_create_le_sig_pdu.isra.0+0x28>
   1e9c4:	2104      	movs	r1, #4
   1e9c6:	3008      	adds	r0, #8
   1e9c8:	f7f7 fe8c 	bl	166e4 <net_buf_simple_add>
	hdr->code = code;
   1e9cc:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1e9ce:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1e9d0:	8045      	strh	r5, [r0, #2]
}
   1e9d2:	4620      	mov	r0, r4
   1e9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e9d6 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e9d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   1e9d8:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e9da:	b17b      	cbz	r3, 1e9fc <bt_l2cap_chan_remove+0x26>
   1e9dc:	3b08      	subs	r3, #8
   1e9de:	2200      	movs	r2, #0
   1e9e0:	b163      	cbz	r3, 1e9fc <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1e9e2:	428b      	cmp	r3, r1
   1e9e4:	f103 0408 	add.w	r4, r3, #8
   1e9e8:	d10f      	bne.n	1ea0a <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1e9ea:	688b      	ldr	r3, [r1, #8]
   1e9ec:	b93a      	cbnz	r2, 1e9fe <bt_l2cap_chan_remove+0x28>
   1e9ee:	6d82      	ldr	r2, [r0, #88]	; 0x58
	list->head = node;
   1e9f0:	6543      	str	r3, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1e9f2:	4294      	cmp	r4, r2
   1e9f4:	d100      	bne.n	1e9f8 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1e9f6:	6583      	str	r3, [r0, #88]	; 0x58
	parent->next = child;
   1e9f8:	2300      	movs	r3, #0
   1e9fa:	608b      	str	r3, [r1, #8]
}
   1e9fc:	bd10      	pop	{r4, pc}
   1e9fe:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ea00:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1ea02:	429c      	cmp	r4, r3
	list->tail = node;
   1ea04:	bf08      	it	eq
   1ea06:	6582      	streq	r2, [r0, #88]	; 0x58
}
   1ea08:	e7f6      	b.n	1e9f8 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ea0a:	2c00      	cmp	r4, #0
   1ea0c:	d0f6      	beq.n	1e9fc <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ea0e:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ea10:	2b00      	cmp	r3, #0
   1ea12:	d0f3      	beq.n	1e9fc <bt_l2cap_chan_remove+0x26>
   1ea14:	3b08      	subs	r3, #8
   1ea16:	4622      	mov	r2, r4
   1ea18:	e7e2      	b.n	1e9e0 <bt_l2cap_chan_remove+0xa>

0001ea1a <bt_l2cap_chan_del>:
{
   1ea1a:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1ea1c:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1ea20:	4604      	mov	r4, r0
	if (!chan->conn) {
   1ea22:	b123      	cbz	r3, 1ea2e <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1ea24:	686b      	ldr	r3, [r5, #4]
   1ea26:	b103      	cbz	r3, 1ea2a <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1ea28:	4798      	blx	r3
	chan->conn = NULL;
   1ea2a:	2300      	movs	r3, #0
   1ea2c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1ea2e:	68e3      	ldr	r3, [r4, #12]
   1ea30:	b10b      	cbz	r3, 1ea36 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1ea32:	4620      	mov	r0, r4
   1ea34:	4798      	blx	r3
	if (ops->released) {
   1ea36:	69eb      	ldr	r3, [r5, #28]
   1ea38:	b11b      	cbz	r3, 1ea42 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1ea3a:	4620      	mov	r0, r4
}
   1ea3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1ea40:	4718      	bx	r3
}
   1ea42:	bd70      	pop	{r4, r5, r6, pc}

0001ea44 <l2cap_rtx_timeout>:
{
   1ea44:	b508      	push	{r3, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   1ea46:	f1a0 0110 	sub.w	r1, r0, #16
   1ea4a:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1ea4e:	f7ff ffc2 	bl	1e9d6 <bt_l2cap_chan_remove>
}
   1ea52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_l2cap_chan_del(&chan->chan);
   1ea56:	4608      	mov	r0, r1
   1ea58:	f7ff bfdf 	b.w	1ea1a <bt_l2cap_chan_del>

0001ea5c <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ea5c:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   1ea5e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ea60:	b18b      	cbz	r3, 1ea86 <bt_l2cap_disconnected+0x2a>
   1ea62:	f1b3 0008 	subs.w	r0, r3, #8
   1ea66:	d00e      	beq.n	1ea86 <bt_l2cap_disconnected+0x2a>
   1ea68:	681c      	ldr	r4, [r3, #0]
   1ea6a:	b104      	cbz	r4, 1ea6e <bt_l2cap_disconnected+0x12>
   1ea6c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1ea6e:	f7ff ffd4 	bl	1ea1a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ea72:	b144      	cbz	r4, 1ea86 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ea74:	f114 0308 	adds.w	r3, r4, #8
   1ea78:	d002      	beq.n	1ea80 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ea7a:	68a3      	ldr	r3, [r4, #8]
   1ea7c:	b103      	cbz	r3, 1ea80 <bt_l2cap_disconnected+0x24>
   1ea7e:	3b08      	subs	r3, #8
{
   1ea80:	4620      	mov	r0, r4
   1ea82:	461c      	mov	r4, r3
   1ea84:	e7f3      	b.n	1ea6e <bt_l2cap_disconnected+0x12>
}
   1ea86:	bd10      	pop	{r4, pc}

0001ea88 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1ea88:	3104      	adds	r1, #4
   1ea8a:	f7f5 b9f9 	b.w	13e80 <bt_conn_create_pdu_timeout>

0001ea8e <bt_l2cap_send_cb>:
{
   1ea8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea92:	4614      	mov	r4, r2
   1ea94:	4605      	mov	r5, r0
   1ea96:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1ea98:	f102 0008 	add.w	r0, r2, #8
   1ea9c:	2104      	movs	r1, #4
   1ea9e:	461e      	mov	r6, r3
   1eaa0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1eaa4:	f7f7 fdba 	bl	1661c <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1eaa8:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1eaaa:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1eaac:	3a04      	subs	r2, #4
   1eaae:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1eab0:	4643      	mov	r3, r8
   1eab2:	4632      	mov	r2, r6
   1eab4:	4621      	mov	r1, r4
   1eab6:	4628      	mov	r0, r5
}
   1eab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1eabc:	f7f5 b846 	b.w	13b4c <bt_conn_send_cb>

0001eac0 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1eac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1eac2:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1eac4:	2202      	movs	r2, #2
   1eac6:	2001      	movs	r0, #1
   1eac8:	f7ff ff6f 	bl	1e9aa <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1eacc:	4604      	mov	r4, r0
   1eace:	b198      	cbz	r0, 1eaf8 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   1ead0:	2102      	movs	r1, #2
   1ead2:	3008      	adds	r0, #8
   1ead4:	f7f7 fe06 	bl	166e4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1ead8:	2300      	movs	r3, #0
   1eada:	7003      	strb	r3, [r0, #0]
   1eadc:	7043      	strb	r3, [r0, #1]
   1eade:	4622      	mov	r2, r4
   1eae0:	9300      	str	r3, [sp, #0]
   1eae2:	2105      	movs	r1, #5
   1eae4:	4628      	mov	r0, r5
   1eae6:	f7ff ffd2 	bl	1ea8e <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1eaea:	b128      	cbz	r0, 1eaf8 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   1eaec:	4620      	mov	r0, r4
}
   1eaee:	b003      	add	sp, #12
   1eaf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1eaf4:	f7f7 bcc6 	b.w	16484 <net_buf_unref>
}
   1eaf8:	b003      	add	sp, #12
   1eafa:	bd30      	pop	{r4, r5, pc}

0001eafc <l2cap_recv>:
{
   1eafc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1eafe:	898b      	ldrh	r3, [r1, #12]
   1eb00:	2b03      	cmp	r3, #3
{
   1eb02:	b085      	sub	sp, #20
   1eb04:	4605      	mov	r5, r0
   1eb06:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1eb08:	d911      	bls.n	1eb2e <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   1eb0a:	2104      	movs	r1, #4
   1eb0c:	f104 0008 	add.w	r0, r4, #8
   1eb10:	f7f7 fdc6 	bl	166a0 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1eb14:	89a3      	ldrh	r3, [r4, #12]
   1eb16:	8842      	ldrh	r2, [r0, #2]
   1eb18:	429a      	cmp	r2, r3
   1eb1a:	d108      	bne.n	1eb2e <l2cap_recv+0x32>
	if (!hdr->ident) {
   1eb1c:	7841      	ldrb	r1, [r0, #1]
   1eb1e:	b131      	cbz	r1, 1eb2e <l2cap_recv+0x32>
	switch (hdr->code) {
   1eb20:	7803      	ldrb	r3, [r0, #0]
   1eb22:	2b12      	cmp	r3, #18
   1eb24:	d006      	beq.n	1eb34 <l2cap_recv+0x38>
   1eb26:	2b13      	cmp	r3, #19
   1eb28:	d001      	beq.n	1eb2e <l2cap_recv+0x32>
   1eb2a:	2b01      	cmp	r3, #1
   1eb2c:	d14b      	bne.n	1ebc6 <l2cap_recv+0xca>
}
   1eb2e:	2000      	movs	r0, #0
   1eb30:	b005      	add	sp, #20
   1eb32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
   1eb34:	2a07      	cmp	r2, #7
   1eb36:	d9fa      	bls.n	1eb2e <l2cap_recv+0x32>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   1eb38:	682d      	ldr	r5, [r5, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   1eb3a:	78ef      	ldrb	r7, [r5, #3]
   1eb3c:	b11f      	cbz	r7, 1eb46 <l2cap_recv+0x4a>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1eb3e:	4628      	mov	r0, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   1eb40:	f7ff ffbe 	bl	1eac0 <l2cap_send_reject.constprop.0>
		break;
   1eb44:	e7f3      	b.n	1eb2e <l2cap_recv+0x32>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1eb46:	68a2      	ldr	r2, [r4, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1eb48:	7850      	ldrb	r0, [r2, #1]
   1eb4a:	7813      	ldrb	r3, [r2, #0]
   1eb4c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1eb50:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   1eb54:	78d0      	ldrb	r0, [r2, #3]
   1eb56:	7893      	ldrb	r3, [r2, #2]
   1eb58:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1eb5c:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   1eb60:	7950      	ldrb	r0, [r2, #5]
   1eb62:	7913      	ldrb	r3, [r2, #4]
   1eb64:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1eb68:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1eb6c:	7993      	ldrb	r3, [r2, #6]
   1eb6e:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1eb70:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   1eb72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1eb76:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   1eb78:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1eb7c:	f7ff ff15 	bl	1e9aa <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1eb80:	4604      	mov	r4, r0
   1eb82:	2800      	cmp	r0, #0
   1eb84:	d0d3      	beq.n	1eb2e <l2cap_recv+0x32>
	accepted = le_param_req(conn, &param);
   1eb86:	a902      	add	r1, sp, #8
   1eb88:	4628      	mov	r0, r5
   1eb8a:	f7f5 fa0d 	bl	13fa8 <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   1eb8e:	2102      	movs	r1, #2
   1eb90:	4606      	mov	r6, r0
   1eb92:	f104 0008 	add.w	r0, r4, #8
   1eb96:	f7f7 fda5 	bl	166e4 <net_buf_simple_add>
	if (accepted) {
   1eb9a:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1eb9e:	b2db      	uxtb	r3, r3
   1eba0:	8003      	strh	r3, [r0, #0]
   1eba2:	4622      	mov	r2, r4
   1eba4:	9700      	str	r7, [sp, #0]
   1eba6:	463b      	mov	r3, r7
   1eba8:	2105      	movs	r1, #5
   1ebaa:	4628      	mov	r0, r5
   1ebac:	f7ff ff6f 	bl	1ea8e <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1ebb0:	b110      	cbz	r0, 1ebb8 <l2cap_recv+0xbc>
		net_buf_unref(buf);
   1ebb2:	4620      	mov	r0, r4
   1ebb4:	f7f7 fc66 	bl	16484 <net_buf_unref>
	if (accepted) {
   1ebb8:	2e00      	cmp	r6, #0
   1ebba:	d0b8      	beq.n	1eb2e <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
   1ebbc:	a902      	add	r1, sp, #8
   1ebbe:	4628      	mov	r0, r5
   1ebc0:	f7ff fec7 	bl	1e952 <bt_conn_le_conn_update>
   1ebc4:	e7b3      	b.n	1eb2e <l2cap_recv+0x32>
		l2cap_send_reject(chan->conn, hdr->ident,
   1ebc6:	6828      	ldr	r0, [r5, #0]
   1ebc8:	e7ba      	b.n	1eb40 <l2cap_recv+0x44>

0001ebca <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ebca:	6d40      	ldr	r0, [r0, #84]	; 0x54
   1ebcc:	b160      	cbz	r0, 1ebe8 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1ebce:	3808      	subs	r0, #8
   1ebd0:	b900      	cbnz	r0, 1ebd4 <bt_l2cap_le_lookup_tx_cid+0xa>
   1ebd2:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1ebd4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   1ebd8:	428b      	cmp	r3, r1
   1ebda:	d005      	beq.n	1ebe8 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ebdc:	f110 0308 	adds.w	r3, r0, #8
   1ebe0:	d001      	beq.n	1ebe6 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ebe2:	6880      	ldr	r0, [r0, #8]
   1ebe4:	e7f2      	b.n	1ebcc <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1ebe6:	4618      	mov	r0, r3
}
   1ebe8:	4770      	bx	lr

0001ebea <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ebea:	6d40      	ldr	r0, [r0, #84]	; 0x54
   1ebec:	b160      	cbz	r0, 1ec08 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1ebee:	3808      	subs	r0, #8
   1ebf0:	b900      	cbnz	r0, 1ebf4 <bt_l2cap_le_lookup_rx_cid+0xa>
   1ebf2:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1ebf4:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   1ebf8:	428b      	cmp	r3, r1
   1ebfa:	d005      	beq.n	1ec08 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ebfc:	f110 0308 	adds.w	r3, r0, #8
   1ec00:	d001      	beq.n	1ec06 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ec02:	6880      	ldr	r0, [r0, #8]
   1ec04:	e7f2      	b.n	1ebec <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1ec06:	4618      	mov	r0, r3
}
   1ec08:	4770      	bx	lr

0001ec0a <bt_l2cap_recv>:
{
   1ec0a:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1ec0c:	898b      	ldrh	r3, [r1, #12]
   1ec0e:	2b03      	cmp	r3, #3
{
   1ec10:	4605      	mov	r5, r0
   1ec12:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1ec14:	d804      	bhi.n	1ec20 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1ec16:	4620      	mov	r0, r4
}
   1ec18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1ec1c:	f7f7 bc32 	b.w	16484 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1ec20:	2104      	movs	r1, #4
   1ec22:	f104 0008 	add.w	r0, r4, #8
   1ec26:	f7f7 fd3b 	bl	166a0 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1ec2a:	8841      	ldrh	r1, [r0, #2]
   1ec2c:	4628      	mov	r0, r5
   1ec2e:	f7ff ffdc 	bl	1ebea <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1ec32:	2800      	cmp	r0, #0
   1ec34:	d0ef      	beq.n	1ec16 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1ec36:	6843      	ldr	r3, [r0, #4]
   1ec38:	4621      	mov	r1, r4
   1ec3a:	691b      	ldr	r3, [r3, #16]
   1ec3c:	4798      	blx	r3
   1ec3e:	e7ea      	b.n	1ec16 <bt_l2cap_recv+0xc>

0001ec40 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1ec40:	4770      	bx	lr

0001ec42 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1ec42:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   1ec44:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1ec46:	b128      	cbz	r0, 1ec54 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ec48:	6859      	ldr	r1, [r3, #4]
   1ec4a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1ec4c:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ec4e:	4288      	cmp	r0, r1
	list->tail = node;
   1ec50:	bf08      	it	eq
   1ec52:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1ec54:	4770      	bx	lr

0001ec56 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ec56:	4603      	mov	r3, r0
   1ec58:	6800      	ldr	r0, [r0, #0]
   1ec5a:	2200      	movs	r2, #0
   1ec5c:	b900      	cbnz	r0, 1ec60 <sys_slist_find_and_remove+0xa>
   1ec5e:	4770      	bx	lr
   1ec60:	4288      	cmp	r0, r1
   1ec62:	d110      	bne.n	1ec86 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   1ec64:	6808      	ldr	r0, [r1, #0]
   1ec66:	b942      	cbnz	r2, 1ec7a <sys_slist_find_and_remove+0x24>
   1ec68:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1ec6a:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ec6c:	4291      	cmp	r1, r2
   1ec6e:	d100      	bne.n	1ec72 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1ec70:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1ec72:	2300      	movs	r3, #0
   1ec74:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ec76:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   1ec78:	4770      	bx	lr
	parent->next = child;
   1ec7a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ec7c:	6858      	ldr	r0, [r3, #4]
   1ec7e:	4281      	cmp	r1, r0
	list->tail = node;
   1ec80:	bf08      	it	eq
   1ec82:	605a      	streq	r2, [r3, #4]
}
   1ec84:	e7f5      	b.n	1ec72 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ec86:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ec88:	6800      	ldr	r0, [r0, #0]
   1ec8a:	e7e7      	b.n	1ec5c <sys_slist_find_and_remove+0x6>

0001ec8c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1ec8c:	4603      	mov	r3, r0
	size_t bytes = 0;
   1ec8e:	2000      	movs	r0, #0

	while (buf) {
   1ec90:	b903      	cbnz	r3, 1ec94 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1ec92:	4770      	bx	lr
		bytes += buf->len;
   1ec94:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1ec96:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1ec98:	4410      	add	r0, r2
		buf = buf->frags;
   1ec9a:	e7f9      	b.n	1ec90 <net_buf_frags_len+0x4>

0001ec9c <att_sent>:
	if (chan->ops->sent) {
   1ec9c:	684b      	ldr	r3, [r1, #4]
   1ec9e:	695b      	ldr	r3, [r3, #20]
{
   1eca0:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1eca2:	b103      	cbz	r3, 1eca6 <att_sent+0xa>
		chan->ops->sent(chan);
   1eca4:	4718      	bx	r3
}
   1eca6:	4770      	bx	lr

0001eca8 <attr_read_type_cb>:
{
   1eca8:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1ecaa:	68d4      	ldr	r4, [r2, #12]
   1ecac:	7823      	ldrb	r3, [r4, #0]
   1ecae:	3102      	adds	r1, #2
   1ecb0:	b913      	cbnz	r3, 1ecb8 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1ecb2:	7021      	strb	r1, [r4, #0]
	return true;
   1ecb4:	2001      	movs	r0, #1
   1ecb6:	e006      	b.n	1ecc6 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1ecb8:	428b      	cmp	r3, r1
   1ecba:	d0fb      	beq.n	1ecb4 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1ecbc:	8983      	ldrh	r3, [r0, #12]
   1ecbe:	3b02      	subs	r3, #2
   1ecc0:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1ecc2:	2000      	movs	r0, #0
   1ecc4:	6110      	str	r0, [r2, #16]
}
   1ecc6:	bd10      	pop	{r4, pc}

0001ecc8 <att_prepare_write_req>:
}
   1ecc8:	2006      	movs	r0, #6
   1ecca:	4770      	bx	lr

0001eccc <att_op_get_type>:
	switch (op) {
   1eccc:	281e      	cmp	r0, #30
   1ecce:	d816      	bhi.n	1ecfe <att_op_get_type+0x32>
   1ecd0:	b308      	cbz	r0, 1ed16 <att_op_get_type+0x4a>
   1ecd2:	1e43      	subs	r3, r0, #1
   1ecd4:	2b1d      	cmp	r3, #29
   1ecd6:	d81e      	bhi.n	1ed16 <att_op_get_type+0x4a>
   1ecd8:	e8df f003 	tbb	[pc, r3]
   1ecdc:	23172317 	.word	0x23172317
   1ece0:	23172317 	.word	0x23172317
   1ece4:	23172317 	.word	0x23172317
   1ece8:	23172317 	.word	0x23172317
   1ecec:	1d172317 	.word	0x1d172317
   1ecf0:	2317231d 	.word	0x2317231d
   1ecf4:	1d191d17 	.word	0x1d191d17
   1ecf8:	0f1b      	.short	0x0f1b
   1ecfa:	2004      	movs	r0, #4
   1ecfc:	4770      	bx	lr
   1ecfe:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1ed02:	2b52      	cmp	r3, #82	; 0x52
   1ed04:	d107      	bne.n	1ed16 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1ed06:	2000      	movs	r0, #0
}
   1ed08:	4770      	bx	lr
		return ATT_RESPONSE;
   1ed0a:	2002      	movs	r0, #2
   1ed0c:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1ed0e:	2003      	movs	r0, #3
   1ed10:	4770      	bx	lr
		return ATT_INDICATION;
   1ed12:	2005      	movs	r0, #5
   1ed14:	4770      	bx	lr
		return ATT_COMMAND;
   1ed16:	f010 0f40 	tst.w	r0, #64	; 0x40
   1ed1a:	bf0c      	ite	eq
   1ed1c:	2006      	moveq	r0, #6
   1ed1e:	2000      	movne	r0, #0
   1ed20:	4770      	bx	lr
		return ATT_REQUEST;
   1ed22:	2001      	movs	r0, #1
   1ed24:	4770      	bx	lr

0001ed26 <att_notify_mult>:
{
   1ed26:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1ed28:	6803      	ldr	r3, [r0, #0]
   1ed2a:	898a      	ldrh	r2, [r1, #12]
   1ed2c:	6818      	ldr	r0, [r3, #0]
   1ed2e:	6889      	ldr	r1, [r1, #8]
   1ed30:	f000 ff97 	bl	1fc62 <bt_gatt_mult_notification>
}
   1ed34:	2000      	movs	r0, #0
   1ed36:	bd08      	pop	{r3, pc}

0001ed38 <att_notify>:
{
   1ed38:	b538      	push	{r3, r4, r5, lr}
   1ed3a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1ed3c:	f101 0008 	add.w	r0, r1, #8
   1ed40:	460c      	mov	r4, r1
   1ed42:	f001 f849 	bl	1fdd8 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1ed46:	682d      	ldr	r5, [r5, #0]
   1ed48:	89a3      	ldrh	r3, [r4, #12]
   1ed4a:	68a2      	ldr	r2, [r4, #8]
   1ed4c:	4601      	mov	r1, r0
   1ed4e:	6828      	ldr	r0, [r5, #0]
   1ed50:	f000 ff5c 	bl	1fc0c <bt_gatt_notification>
}
   1ed54:	2000      	movs	r0, #0
   1ed56:	bd38      	pop	{r3, r4, r5, pc}

0001ed58 <att_chan_mtu_updated>:
{
   1ed58:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1ed5a:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ed5c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   1ed5e:	b30a      	cbz	r2, 1eda4 <att_chan_mtu_updated+0x4c>
   1ed60:	f5b2 74aa 	subs.w	r4, r2, #340	; 0x154
   1ed64:	d01d      	beq.n	1eda2 <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ed66:	6813      	ldr	r3, [r2, #0]
   1ed68:	b10b      	cbz	r3, 1ed6e <att_chan_mtu_updated+0x16>
   1ed6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   1ed6e:	2200      	movs	r2, #0
   1ed70:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   1ed72:	42a0      	cmp	r0, r4
   1ed74:	d009      	beq.n	1ed8a <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1ed76:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1ed7a:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1ed7e:	42a9      	cmp	r1, r5
   1ed80:	bf38      	it	cc
   1ed82:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1ed84:	42a2      	cmp	r2, r4
   1ed86:	bf38      	it	cc
   1ed88:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ed8a:	b163      	cbz	r3, 1eda6 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ed8c:	f513 75aa 	adds.w	r5, r3, #340	; 0x154
   1ed90:	d004      	beq.n	1ed9c <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ed92:	f8d3 5154 	ldr.w	r5, [r3, #340]	; 0x154
   1ed96:	b10d      	cbz	r5, 1ed9c <att_chan_mtu_updated+0x44>
   1ed98:	f5a5 75aa 	sub.w	r5, r5, #340	; 0x154
{
   1ed9c:	461c      	mov	r4, r3
   1ed9e:	462b      	mov	r3, r5
   1eda0:	e7e7      	b.n	1ed72 <att_chan_mtu_updated+0x1a>
   1eda2:	4622      	mov	r2, r4
   1eda4:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1eda6:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   1edaa:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   1edae:	428b      	cmp	r3, r1
   1edb0:	d801      	bhi.n	1edb6 <att_chan_mtu_updated+0x5e>
   1edb2:	4290      	cmp	r0, r2
   1edb4:	d909      	bls.n	1edca <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1edb6:	4282      	cmp	r2, r0
   1edb8:	bf38      	it	cc
   1edba:	4602      	movcc	r2, r0
   1edbc:	4299      	cmp	r1, r3
   1edbe:	6830      	ldr	r0, [r6, #0]
   1edc0:	bf38      	it	cc
   1edc2:	4619      	movcc	r1, r3
}
   1edc4:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1edc6:	f7f7 b903 	b.w	15fd0 <bt_gatt_att_max_mtu_changed>
}
   1edca:	bc70      	pop	{r4, r5, r6}
   1edcc:	4770      	bx	lr

0001edce <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1edce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1edd0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1edd4:	2300      	movs	r3, #0
   1edd6:	9300      	str	r3, [sp, #0]
   1edd8:	461a      	mov	r2, r3
   1edda:	f7f6 fd69 	bl	158b0 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1edde:	b005      	add	sp, #20
   1ede0:	f85d fb04 	ldr.w	pc, [sp], #4

0001ede4 <att_chan_read>:
{
   1ede4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ede8:	4680      	mov	r8, r0
   1edea:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1edec:	4610      	mov	r0, r2
{
   1edee:	4699      	mov	r9, r3
   1edf0:	468b      	mov	fp, r1
   1edf2:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1edf4:	f7ff ff4a 	bl	1ec8c <net_buf_frags_len>
   1edf8:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   1edfc:	4283      	cmp	r3, r0
   1edfe:	d97a      	bls.n	1eef6 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1ee00:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1ee04:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1ee06:	4630      	mov	r0, r6
   1ee08:	f7f7 fb9c 	bl	16544 <net_buf_frag_last>
	size_t len, total = 0;
   1ee0c:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1ee10:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1ee12:	4630      	mov	r0, r6
   1ee14:	f7ff ff3a 	bl	1ec8c <net_buf_frags_len>
   1ee18:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   1ee1c:	f105 0708 	add.w	r7, r5, #8
   1ee20:	1a24      	subs	r4, r4, r0
   1ee22:	4638      	mov	r0, r7
   1ee24:	f000 ffe4 	bl	1fdf0 <net_buf_simple_tailroom>
   1ee28:	4284      	cmp	r4, r0
   1ee2a:	d211      	bcs.n	1ee50 <att_chan_read+0x6c>
   1ee2c:	4630      	mov	r0, r6
   1ee2e:	f7ff ff2d 	bl	1ec8c <net_buf_frags_len>
   1ee32:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1ee36:	1a24      	subs	r4, r4, r0
		if (!len) {
   1ee38:	bb34      	cbnz	r4, 1ee88 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1ee3a:	79b0      	ldrb	r0, [r6, #6]
   1ee3c:	f7f7 f982 	bl	16144 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1ee40:	2200      	movs	r2, #0
   1ee42:	2300      	movs	r3, #0
   1ee44:	f000 ffb5 	bl	1fdb2 <net_buf_alloc_fixed>
			if (!frag) {
   1ee48:	4605      	mov	r5, r0
   1ee4a:	b930      	cbnz	r0, 1ee5a <att_chan_read+0x76>
	return total;
   1ee4c:	4657      	mov	r7, sl
   1ee4e:	e02c      	b.n	1eeaa <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1ee50:	4638      	mov	r0, r7
   1ee52:	f000 ffcd 	bl	1fdf0 <net_buf_simple_tailroom>
   1ee56:	4604      	mov	r4, r0
   1ee58:	e7ee      	b.n	1ee38 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1ee5a:	4601      	mov	r1, r0
   1ee5c:	4630      	mov	r0, r6
   1ee5e:	f7f7 fbb9 	bl	165d4 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1ee62:	4630      	mov	r0, r6
   1ee64:	f7ff ff12 	bl	1ec8c <net_buf_frags_len>
   1ee68:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1ee6c:	f105 0708 	add.w	r7, r5, #8
   1ee70:	1a24      	subs	r4, r4, r0
   1ee72:	4638      	mov	r0, r7
   1ee74:	f000 ffbc 	bl	1fdf0 <net_buf_simple_tailroom>
   1ee78:	4284      	cmp	r4, r0
   1ee7a:	d21a      	bcs.n	1eeb2 <att_chan_read+0xce>
   1ee7c:	4630      	mov	r0, r6
   1ee7e:	f7ff ff05 	bl	1ec8c <net_buf_frags_len>
   1ee82:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1ee86:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1ee88:	68a9      	ldr	r1, [r5, #8]
   1ee8a:	89aa      	ldrh	r2, [r5, #12]
   1ee8c:	f8db 7004 	ldr.w	r7, [fp, #4]
   1ee90:	9803      	ldr	r0, [sp, #12]
   1ee92:	f8cd 9000 	str.w	r9, [sp]
   1ee96:	440a      	add	r2, r1
   1ee98:	b2a3      	uxth	r3, r4
   1ee9a:	4659      	mov	r1, fp
   1ee9c:	47b8      	blx	r7
		if (read < 0) {
   1ee9e:	1e07      	subs	r7, r0, #0
   1eea0:	da0c      	bge.n	1eebc <att_chan_read+0xd8>
				return total;
   1eea2:	f1ba 0f00 	cmp.w	sl, #0
   1eea6:	bf18      	it	ne
   1eea8:	4657      	movne	r7, sl
}
   1eeaa:	4638      	mov	r0, r7
   1eeac:	b005      	add	sp, #20
   1eeae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eeb2:	4638      	mov	r0, r7
   1eeb4:	f000 ff9c 	bl	1fdf0 <net_buf_simple_tailroom>
   1eeb8:	4604      	mov	r4, r0
   1eeba:	e7e5      	b.n	1ee88 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1eebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1eebe:	b993      	cbnz	r3, 1eee6 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1eec0:	4639      	mov	r1, r7
   1eec2:	f105 0008 	add.w	r0, r5, #8
   1eec6:	f7f7 fc0d 	bl	166e4 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1eeca:	4630      	mov	r0, r6
   1eecc:	f7ff fede 	bl	1ec8c <net_buf_frags_len>
   1eed0:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   1eed4:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1eed6:	4283      	cmp	r3, r0
		total += read;
   1eed8:	44ba      	add	sl, r7
		offset += read;
   1eeda:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1eede:	d9b5      	bls.n	1ee4c <att_chan_read+0x68>
   1eee0:	42a7      	cmp	r7, r4
   1eee2:	d096      	beq.n	1ee12 <att_chan_read+0x2e>
   1eee4:	e7b2      	b.n	1ee4c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1eee6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1eee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1eeea:	4639      	mov	r1, r7
   1eeec:	4628      	mov	r0, r5
   1eeee:	4798      	blx	r3
   1eef0:	2800      	cmp	r0, #0
   1eef2:	d1e5      	bne.n	1eec0 <att_chan_read+0xdc>
   1eef4:	e7aa      	b.n	1ee4c <att_chan_read+0x68>
		return 0;
   1eef6:	2700      	movs	r7, #0
   1eef8:	e7d7      	b.n	1eeaa <att_chan_read+0xc6>

0001eefa <find_type_cb>:
{
   1eefa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1eefe:	f8d2 9000 	ldr.w	r9, [r2]
{
   1ef02:	b091      	sub	sp, #68	; 0x44
   1ef04:	4607      	mov	r7, r0
   1ef06:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ef08:	2500      	movs	r5, #0
   1ef0a:	f642 0301 	movw	r3, #10241	; 0x2801
   1ef0e:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1ef10:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ef14:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1ef18:	a90b      	add	r1, sp, #44	; 0x2c
{
   1ef1a:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ef1c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1ef20:	f7ff f8b8 	bl	1e094 <bt_uuid_cmp>
   1ef24:	2800      	cmp	r0, #0
   1ef26:	d079      	beq.n	1f01c <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1ef28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ef2c:	6838      	ldr	r0, [r7, #0]
   1ef2e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1ef32:	a90b      	add	r1, sp, #44	; 0x2c
   1ef34:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1ef38:	f7ff f8ac 	bl	1e094 <bt_uuid_cmp>
   1ef3c:	b138      	cbz	r0, 1ef4e <find_type_cb+0x54>
		if (data->group &&
   1ef3e:	68a3      	ldr	r3, [r4, #8]
   1ef40:	b11b      	cbz	r3, 1ef4a <find_type_cb+0x50>
   1ef42:	885a      	ldrh	r2, [r3, #2]
   1ef44:	42b2      	cmp	r2, r6
   1ef46:	d200      	bcs.n	1ef4a <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1ef48:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1ef4a:	2001      	movs	r0, #1
   1ef4c:	e009      	b.n	1ef62 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1ef4e:	6861      	ldr	r1, [r4, #4]
   1ef50:	4608      	mov	r0, r1
   1ef52:	f7ff fe9b 	bl	1ec8c <net_buf_frags_len>
   1ef56:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   1ef5a:	1a1b      	subs	r3, r3, r0
   1ef5c:	2b03      	cmp	r3, #3
   1ef5e:	d803      	bhi.n	1ef68 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1ef60:	2000      	movs	r0, #0
}
   1ef62:	b011      	add	sp, #68	; 0x44
   1ef64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1ef68:	4608      	mov	r0, r1
   1ef6a:	f7f7 faeb 	bl	16544 <net_buf_frag_last>
   1ef6e:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1ef70:	6860      	ldr	r0, [r4, #4]
   1ef72:	f7ff fe8b 	bl	1ec8c <net_buf_frags_len>
   1ef76:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   1ef7a:	f105 0b08 	add.w	fp, r5, #8
   1ef7e:	ebaa 0a00 	sub.w	sl, sl, r0
   1ef82:	4658      	mov	r0, fp
   1ef84:	f000 ff34 	bl	1fdf0 <net_buf_simple_tailroom>
   1ef88:	4582      	cmp	sl, r0
   1ef8a:	d23f      	bcs.n	1f00c <find_type_cb+0x112>
   1ef8c:	6860      	ldr	r0, [r4, #4]
   1ef8e:	f7ff fe7d 	bl	1ec8c <net_buf_frags_len>
   1ef92:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   1ef96:	1a18      	subs	r0, r3, r0
	if (!len) {
   1ef98:	b970      	cbnz	r0, 1efb8 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1ef9a:	6863      	ldr	r3, [r4, #4]
   1ef9c:	7998      	ldrb	r0, [r3, #6]
   1ef9e:	f7f7 f8d1 	bl	16144 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1efa2:	2200      	movs	r2, #0
   1efa4:	2300      	movs	r3, #0
   1efa6:	f000 ff04 	bl	1fdb2 <net_buf_alloc_fixed>
		if (!frag) {
   1efaa:	4605      	mov	r5, r0
   1efac:	2800      	cmp	r0, #0
   1efae:	d0d7      	beq.n	1ef60 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1efb0:	4601      	mov	r1, r0
   1efb2:	6860      	ldr	r0, [r4, #4]
   1efb4:	f7f7 fb0e 	bl	165d4 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1efb8:	2300      	movs	r3, #0
   1efba:	9300      	str	r3, [sp, #0]
   1efbc:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1efc0:	4639      	mov	r1, r7
   1efc2:	2310      	movs	r3, #16
   1efc4:	aa02      	add	r2, sp, #8
   1efc6:	4640      	mov	r0, r8
   1efc8:	47c8      	blx	r9
	if (read < 0) {
   1efca:	1e07      	subs	r7, r0, #0
   1efcc:	db26      	blt.n	1f01c <find_type_cb+0x122>
	if (read != data->value_len) {
   1efce:	7c22      	ldrb	r2, [r4, #16]
   1efd0:	68e0      	ldr	r0, [r4, #12]
   1efd2:	42ba      	cmp	r2, r7
   1efd4:	d01e      	beq.n	1f014 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1efd6:	4601      	mov	r1, r0
   1efd8:	a80b      	add	r0, sp, #44	; 0x2c
   1efda:	f7ff f885 	bl	1e0e8 <bt_uuid_create>
   1efde:	b1e8      	cbz	r0, 1f01c <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1efe0:	b2fa      	uxtb	r2, r7
   1efe2:	a902      	add	r1, sp, #8
   1efe4:	a806      	add	r0, sp, #24
   1efe6:	f7ff f87f 	bl	1e0e8 <bt_uuid_create>
   1efea:	b1b8      	cbz	r0, 1f01c <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1efec:	a906      	add	r1, sp, #24
   1efee:	a80b      	add	r0, sp, #44	; 0x2c
   1eff0:	f7ff f850 	bl	1e094 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1eff4:	b990      	cbnz	r0, 1f01c <find_type_cb+0x122>
	data->err = 0x00;
   1eff6:	2300      	movs	r3, #0
   1eff8:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1effa:	2104      	movs	r1, #4
   1effc:	f105 0008 	add.w	r0, r5, #8
   1f000:	f7f7 fb70 	bl	166e4 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1f004:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1f006:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1f008:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1f00a:	e79e      	b.n	1ef4a <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1f00c:	4658      	mov	r0, fp
   1f00e:	f000 feef 	bl	1fdf0 <net_buf_simple_tailroom>
   1f012:	e7c1      	b.n	1ef98 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   1f014:	a902      	add	r1, sp, #8
   1f016:	f001 fd1a 	bl	20a4e <memcmp>
   1f01a:	e7eb      	b.n	1eff4 <find_type_cb+0xfa>
	data->group = NULL;
   1f01c:	2300      	movs	r3, #0
   1f01e:	60a3      	str	r3, [r4, #8]
   1f020:	e793      	b.n	1ef4a <find_type_cb+0x50>

0001f022 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1f022:	68d0      	ldr	r0, [r2, #12]
   1f024:	7803      	ldrb	r3, [r0, #0]
   1f026:	3104      	adds	r1, #4
   1f028:	b913      	cbnz	r3, 1f030 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1f02a:	7001      	strb	r1, [r0, #0]
	return true;
   1f02c:	2001      	movs	r0, #1
}
   1f02e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1f030:	428b      	cmp	r3, r1
   1f032:	d0fb      	beq.n	1f02c <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1f034:	6891      	ldr	r1, [r2, #8]
   1f036:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1f038:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1f03a:	3b04      	subs	r3, #4
   1f03c:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1f03e:	6110      	str	r0, [r2, #16]
		return false;
   1f040:	4770      	bx	lr

0001f042 <chan_req_send>:
{
   1f042:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1f044:	688e      	ldr	r6, [r1, #8]
{
   1f046:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1f048:	4630      	mov	r0, r6
{
   1f04a:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1f04c:	f7ff fe1e 	bl	1ec8c <net_buf_frags_len>
   1f050:	f8b5 308a 	ldrh.w	r3, [r5, #138]	; 0x8a
   1f054:	4283      	cmp	r3, r0
   1f056:	d30a      	bcc.n	1f06e <chan_req_send+0x2c>
	req->buf = NULL;
   1f058:	2200      	movs	r2, #0
	chan->req = req;
   1f05a:	f8c5 10fc 	str.w	r1, [r5, #252]	; 0xfc
	err = chan_send(chan, buf, NULL);
   1f05e:	4628      	mov	r0, r5
	req->buf = NULL;
   1f060:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   1f062:	4631      	mov	r1, r6
   1f064:	f7f5 fbe8 	bl	14838 <chan_send>
	if (err) {
   1f068:	b100      	cbz	r0, 1f06c <chan_req_send+0x2a>
		req->buf = buf;
   1f06a:	60a6      	str	r6, [r4, #8]
}
   1f06c:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1f06e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1f072:	e7fb      	b.n	1f06c <chan_req_send+0x2a>

0001f074 <process_queue>:
{
   1f074:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1f076:	2200      	movs	r2, #0
{
   1f078:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1f07a:	2300      	movs	r3, #0
   1f07c:	4608      	mov	r0, r1
{
   1f07e:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1f080:	f7f7 f96e 	bl	16360 <net_buf_get>
	if (buf) {
   1f084:	4605      	mov	r5, r0
   1f086:	b160      	cbz	r0, 1f0a2 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1f088:	4601      	mov	r1, r0
   1f08a:	2200      	movs	r2, #0
   1f08c:	4620      	mov	r0, r4
   1f08e:	f7f5 fbd3 	bl	14838 <chan_send>
		if (err) {
   1f092:	4604      	mov	r4, r0
   1f094:	b118      	cbz	r0, 1f09e <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1f096:	4629      	mov	r1, r5
   1f098:	4630      	mov	r0, r6
   1f09a:	f001 fb98 	bl	207ce <k_queue_prepend>
}
   1f09e:	4620      	mov	r0, r4
   1f0a0:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1f0a2:	f06f 0401 	mvn.w	r4, #1
   1f0a6:	e7fa      	b.n	1f09e <process_queue+0x2a>

0001f0a8 <bt_att_chan_send_rsp>:
{
   1f0a8:	b538      	push	{r3, r4, r5, lr}
   1f0aa:	4604      	mov	r4, r0
   1f0ac:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   1f0ae:	f7f5 fbc3 	bl	14838 <chan_send>
	if (err) {
   1f0b2:	b130      	cbz	r0, 1f0c2 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1f0b4:	4629      	mov	r1, r5
   1f0b6:	f504 7080 	add.w	r0, r4, #256	; 0x100
}
   1f0ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1f0be:	f7f7 b9ad 	b.w	1641c <net_buf_put>
}
   1f0c2:	bd38      	pop	{r3, r4, r5, pc}

0001f0c4 <chan_req_sent>:
	if (chan->req) {
   1f0c4:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   1f0c8:	b133      	cbz	r3, 1f0d8 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1f0ca:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f0ce:	2300      	movs	r3, #0
   1f0d0:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1f0d4:	f7fb bc70 	b.w	1a9b8 <k_work_reschedule>
}
   1f0d8:	4770      	bx	lr

0001f0da <find_info_cb>:
{
   1f0da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1f0dc:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1f0de:	6816      	ldr	r6, [r2, #0]
{
   1f0e0:	4605      	mov	r5, r0
   1f0e2:	460f      	mov	r7, r1
   1f0e4:	4614      	mov	r4, r2
	if (!data->rsp) {
   1f0e6:	b963      	cbnz	r3, 1f102 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1f0e8:	6850      	ldr	r0, [r2, #4]
   1f0ea:	2101      	movs	r1, #1
   1f0ec:	3008      	adds	r0, #8
   1f0ee:	f7f7 faf9 	bl	166e4 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1f0f2:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1f0f4:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1f0f6:	781b      	ldrb	r3, [r3, #0]
   1f0f8:	2b00      	cmp	r3, #0
   1f0fa:	bf0c      	ite	eq
   1f0fc:	2301      	moveq	r3, #1
   1f0fe:	2302      	movne	r3, #2
   1f100:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1f102:	68a3      	ldr	r3, [r4, #8]
   1f104:	781b      	ldrb	r3, [r3, #0]
   1f106:	2b01      	cmp	r3, #1
   1f108:	d003      	beq.n	1f112 <find_info_cb+0x38>
   1f10a:	2b02      	cmp	r3, #2
   1f10c:	d019      	beq.n	1f142 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1f10e:	2000      	movs	r0, #0
   1f110:	e016      	b.n	1f140 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1f112:	682b      	ldr	r3, [r5, #0]
   1f114:	781b      	ldrb	r3, [r3, #0]
   1f116:	2b00      	cmp	r3, #0
   1f118:	d1f9      	bne.n	1f10e <find_info_cb+0x34>
   1f11a:	6860      	ldr	r0, [r4, #4]
   1f11c:	2104      	movs	r1, #4
   1f11e:	3008      	adds	r0, #8
   1f120:	f7f7 fae0 	bl	166e4 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1f124:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1f126:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1f128:	885b      	ldrh	r3, [r3, #2]
   1f12a:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1f12c:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1f12e:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1f130:	899b      	ldrh	r3, [r3, #12]
   1f132:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   1f136:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1f138:	2804      	cmp	r0, #4
   1f13a:	bf94      	ite	ls
   1f13c:	2000      	movls	r0, #0
   1f13e:	2001      	movhi	r0, #1
}
   1f140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1f142:	682b      	ldr	r3, [r5, #0]
   1f144:	781b      	ldrb	r3, [r3, #0]
   1f146:	2b02      	cmp	r3, #2
   1f148:	d1e1      	bne.n	1f10e <find_info_cb+0x34>
   1f14a:	6860      	ldr	r0, [r4, #4]
   1f14c:	2112      	movs	r1, #18
   1f14e:	3008      	adds	r0, #8
   1f150:	f7f7 fac8 	bl	166e4 <net_buf_simple_add>
   1f154:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f156:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1f158:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1f15a:	f823 7b02 	strh.w	r7, [r3], #2
   1f15e:	1c51      	adds	r1, r2, #1
   1f160:	3211      	adds	r2, #17
   1f162:	f851 0b04 	ldr.w	r0, [r1], #4
   1f166:	f843 0b04 	str.w	r0, [r3], #4
   1f16a:	4291      	cmp	r1, r2
   1f16c:	d1f9      	bne.n	1f162 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   1f16e:	6863      	ldr	r3, [r4, #4]
   1f170:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   1f174:	899b      	ldrh	r3, [r3, #12]
   1f176:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1f178:	2812      	cmp	r0, #18
   1f17a:	e7de      	b.n	1f13a <find_info_cb+0x60>

0001f17c <att_exec_write_req>:
   1f17c:	2006      	movs	r0, #6
   1f17e:	4770      	bx	lr

0001f180 <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f180:	30f8      	adds	r0, #248	; 0xf8
   1f182:	f3bf 8f5b 	dmb	ish
   1f186:	e850 3f00 	ldrex	r3, [r0]
   1f18a:	f023 0302 	bic.w	r3, r3, #2
   1f18e:	e840 3200 	strex	r2, r3, [r0]
   1f192:	2a00      	cmp	r2, #0
   1f194:	d1f7      	bne.n	1f186 <chan_cfm_sent+0x6>
   1f196:	f3bf 8f5b 	dmb	ish
}
   1f19a:	4770      	bx	lr

0001f19c <chan_rsp_sent>:
   1f19c:	30f8      	adds	r0, #248	; 0xf8
   1f19e:	f3bf 8f5b 	dmb	ish
   1f1a2:	e850 3f00 	ldrex	r3, [r0]
   1f1a6:	f023 0301 	bic.w	r3, r3, #1
   1f1aa:	e840 3200 	strex	r2, r3, [r0]
   1f1ae:	2a00      	cmp	r2, #0
   1f1b0:	d1f7      	bne.n	1f1a2 <chan_rsp_sent+0x6>
   1f1b2:	f3bf 8f5b 	dmb	ish
}
   1f1b6:	4770      	bx	lr

0001f1b8 <att_get>:
{
   1f1b8:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1f1ba:	7a83      	ldrb	r3, [r0, #10]
   1f1bc:	2b07      	cmp	r3, #7
   1f1be:	d001      	beq.n	1f1c4 <att_get+0xc>
		return NULL;
   1f1c0:	2000      	movs	r0, #0
}
   1f1c2:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1f1c4:	2104      	movs	r1, #4
   1f1c6:	f7ff fd10 	bl	1ebea <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1f1ca:	2800      	cmp	r0, #0
   1f1cc:	d0f8      	beq.n	1f1c0 <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f1ce:	f3bf 8f5b 	dmb	ish
   1f1d2:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   1f1d6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1f1da:	075b      	lsls	r3, r3, #29
   1f1dc:	d4f0      	bmi.n	1f1c0 <att_get+0x8>
	return att_chan->att;
   1f1de:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1f1e2:	e7ee      	b.n	1f1c2 <att_get+0xa>

0001f1e4 <bt_att_status>:
{
   1f1e4:	b538      	push	{r3, r4, r5, lr}
   1f1e6:	f3bf 8f5b 	dmb	ish
   1f1ea:	680b      	ldr	r3, [r1, #0]
   1f1ec:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1f1f0:	07db      	lsls	r3, r3, #31
{
   1f1f2:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1f1f4:	d519      	bpl.n	1f22a <bt_att_status+0x46>
	if (!chan->att) {
   1f1f6:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1f1fa:	b1b0      	cbz	r0, 1f22a <bt_att_status+0x46>
	if (chan->req) {
   1f1fc:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   1f200:	b99b      	cbnz	r3, 1f22a <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1f202:	3004      	adds	r0, #4
   1f204:	f7ff fd1d 	bl	1ec42 <sys_slist_get>
	if (!node) {
   1f208:	4604      	mov	r4, r0
   1f20a:	b170      	cbz	r0, 1f22a <bt_att_status+0x46>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f20c:	4601      	mov	r1, r0
   1f20e:	f1a5 0008 	sub.w	r0, r5, #8
   1f212:	f7f5 fb6f 	bl	148f4 <bt_att_chan_req_send>
   1f216:	2800      	cmp	r0, #0
   1f218:	da07      	bge.n	1f22a <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1f21a:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   1f21e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1f220:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f222:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1f224:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f226:	b902      	cbnz	r2, 1f22a <bt_att_status+0x46>
	list->tail = node;
   1f228:	609c      	str	r4, [r3, #8]
}
   1f22a:	bd38      	pop	{r3, r4, r5, pc}

0001f22c <att_req_send_process>:
{
   1f22c:	b570      	push	{r4, r5, r6, lr}
   1f22e:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1f230:	3004      	adds	r0, #4
   1f232:	f7ff fd06 	bl	1ec42 <sys_slist_get>
	if (!node) {
   1f236:	4606      	mov	r6, r0
   1f238:	b1c0      	cbz	r0, 1f26c <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f23a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1f23c:	b153      	cbz	r3, 1f254 <att_req_send_process+0x28>
   1f23e:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1f242:	d007      	beq.n	1f254 <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f244:	681c      	ldr	r4, [r3, #0]
   1f246:	b10c      	cbz	r4, 1f24c <att_req_send_process+0x20>
   1f248:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
		if (!chan->req) {
   1f24c:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   1f250:	b13b      	cbz	r3, 1f262 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f252:	b964      	cbnz	r4, 1f26e <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   1f254:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1f256:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f258:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1f25a:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f25c:	b933      	cbnz	r3, 1f26c <att_req_send_process+0x40>
	list->tail = node;
   1f25e:	60ae      	str	r6, [r5, #8]
}
   1f260:	e004      	b.n	1f26c <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f262:	4631      	mov	r1, r6
   1f264:	f7f5 fb46 	bl	148f4 <bt_att_chan_req_send>
   1f268:	2800      	cmp	r0, #0
   1f26a:	dbf2      	blt.n	1f252 <att_req_send_process+0x26>
}
   1f26c:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f26e:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   1f272:	d004      	beq.n	1f27e <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f274:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f278:	b10b      	cbz	r3, 1f27e <att_req_send_process+0x52>
   1f27a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   1f27e:	4620      	mov	r0, r4
   1f280:	461c      	mov	r4, r3
   1f282:	e7e3      	b.n	1f24c <att_req_send_process+0x20>

0001f284 <write_cb>:
{
   1f284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f286:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1f288:	4601      	mov	r1, r0
{
   1f28a:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1f28c:	222a      	movs	r2, #42	; 0x2a
   1f28e:	6820      	ldr	r0, [r4, #0]
   1f290:	f000 fc66 	bl	1fb60 <bt_gatt_check_perm>
   1f294:	4605      	mov	r5, r0
   1f296:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1f298:	bb00      	cbnz	r0, 1f2dc <write_cb+0x58>
	if (!data->req) {
   1f29a:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1f29c:	68b7      	ldr	r7, [r6, #8]
   1f29e:	68e2      	ldr	r2, [r4, #12]
   1f2a0:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   1f2a2:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1f2a4:	bf14      	ite	ne
   1f2a6:	2300      	movne	r3, #0
   1f2a8:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1f2aa:	9301      	str	r3, [sp, #4]
   1f2ac:	8a63      	ldrh	r3, [r4, #18]
   1f2ae:	9300      	str	r3, [sp, #0]
   1f2b0:	4631      	mov	r1, r6
   1f2b2:	8a23      	ldrh	r3, [r4, #16]
   1f2b4:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1f2b6:	1e03      	subs	r3, r0, #0
   1f2b8:	db05      	blt.n	1f2c6 <write_cb+0x42>
   1f2ba:	8a22      	ldrh	r2, [r4, #16]
   1f2bc:	4293      	cmp	r3, r2
   1f2be:	d10b      	bne.n	1f2d8 <write_cb+0x54>
	data->err = 0U;
   1f2c0:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1f2c2:	2501      	movs	r5, #1
   1f2c4:	e005      	b.n	1f2d2 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1f2c6:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1f2ca:	d305      	bcc.n	1f2d8 <write_cb+0x54>
		return -err;
   1f2cc:	425b      	negs	r3, r3
   1f2ce:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1f2d0:	7523      	strb	r3, [r4, #20]
}
   1f2d2:	4628      	mov	r0, r5
   1f2d4:	b003      	add	sp, #12
   1f2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1f2d8:	230e      	movs	r3, #14
   1f2da:	e7f9      	b.n	1f2d0 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1f2dc:	2500      	movs	r5, #0
   1f2de:	e7f8      	b.n	1f2d2 <write_cb+0x4e>

0001f2e0 <bt_att_sent>:
{
   1f2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1f2e2:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
	struct bt_att *att = chan->att;
   1f2e6:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   1f2ea:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1f2ec:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1f2f0:	b10b      	cbz	r3, 1f2f6 <bt_att_sent+0x16>
		chan->sent(chan);
   1f2f2:	4638      	mov	r0, r7
   1f2f4:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f2f6:	f3bf 8f5b 	dmb	ish
   1f2fa:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   1f2fe:	e853 2f00 	ldrex	r2, [r3]
   1f302:	f022 0210 	bic.w	r2, r2, #16
   1f306:	e843 2100 	strex	r1, r2, [r3]
   1f30a:	2900      	cmp	r1, #0
   1f30c:	d1f7      	bne.n	1f2fe <bt_att_sent+0x1e>
   1f30e:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1f312:	b30c      	cbz	r4, 1f358 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1f314:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   1f318:	b98b      	cbnz	r3, 1f33e <bt_att_sent+0x5e>
   1f31a:	6863      	ldr	r3, [r4, #4]
   1f31c:	b17b      	cbz	r3, 1f33e <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f31e:	1d20      	adds	r0, r4, #4
   1f320:	f7ff fc8f 	bl	1ec42 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f324:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f326:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f328:	4638      	mov	r0, r7
   1f32a:	f7ff fe8a 	bl	1f042 <chan_req_send>
   1f32e:	2800      	cmp	r0, #0
   1f330:	da12      	bge.n	1f358 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   1f332:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1f334:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f336:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1f338:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f33a:	b903      	cbnz	r3, 1f33e <bt_att_sent+0x5e>
	list->tail = node;
   1f33c:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1f33e:	f105 01f8 	add.w	r1, r5, #248	; 0xf8
   1f342:	4638      	mov	r0, r7
   1f344:	f7ff fe96 	bl	1f074 <process_queue>
	if (!err) {
   1f348:	b130      	cbz	r0, 1f358 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   1f34a:	f104 010c 	add.w	r1, r4, #12
   1f34e:	4638      	mov	r0, r7
}
   1f350:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1f354:	f7ff be8e 	b.w	1f074 <process_queue>
}
   1f358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f35a <read_cb>:
{
   1f35a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1f35e:	f8d2 8000 	ldr.w	r8, [r2]
{
   1f362:	4606      	mov	r6, r0
	data->err = 0x00;
   1f364:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1f366:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1f36a:	7317      	strb	r7, [r2, #12]
{
   1f36c:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1f36e:	4631      	mov	r1, r6
   1f370:	2215      	movs	r2, #21
   1f372:	f000 fbf5 	bl	1fb60 <bt_gatt_check_perm>
   1f376:	4604      	mov	r4, r0
   1f378:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1f37a:	b9a0      	cbnz	r0, 1f3a6 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1f37c:	e9cd 0000 	strd	r0, r0, [sp]
   1f380:	88ab      	ldrh	r3, [r5, #4]
   1f382:	68aa      	ldr	r2, [r5, #8]
   1f384:	4631      	mov	r1, r6
   1f386:	4640      	mov	r0, r8
   1f388:	f7ff fd2c 	bl	1ede4 <att_chan_read>
	if (ret < 0) {
   1f38c:	1e03      	subs	r3, r0, #0
   1f38e:	da0c      	bge.n	1f3aa <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1f390:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1f394:	bf26      	itte	cs
   1f396:	425b      	negcs	r3, r3
   1f398:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1f39a:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1f39c:	732b      	strb	r3, [r5, #12]
}
   1f39e:	4620      	mov	r0, r4
   1f3a0:	b002      	add	sp, #8
   1f3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1f3a6:	463c      	mov	r4, r7
   1f3a8:	e7f9      	b.n	1f39e <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1f3aa:	2401      	movs	r4, #1
   1f3ac:	e7f7      	b.n	1f39e <read_cb+0x44>

0001f3ae <bt_att_chan_create_pdu>:
{
   1f3ae:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1f3b0:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   1f3b4:	3201      	adds	r2, #1
   1f3b6:	429a      	cmp	r2, r3
{
   1f3b8:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1f3ba:	d81b      	bhi.n	1f3f4 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   1f3bc:	4608      	mov	r0, r1
   1f3be:	f7ff fc85 	bl	1eccc <att_op_get_type>
   1f3c2:	2802      	cmp	r0, #2
   1f3c4:	d001      	beq.n	1f3ca <bt_att_chan_create_pdu+0x1c>
   1f3c6:	2804      	cmp	r0, #4
   1f3c8:	d10f      	bne.n	1f3ea <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1f3ca:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f3ce:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1f3d0:	2100      	movs	r1, #0
   1f3d2:	4608      	mov	r0, r1
   1f3d4:	f7ff fb58 	bl	1ea88 <bt_l2cap_create_pdu_timeout>
   1f3d8:	4604      	mov	r4, r0
	if (!buf) {
   1f3da:	b120      	cbz	r0, 1f3e6 <bt_att_chan_create_pdu+0x38>
   1f3dc:	2101      	movs	r1, #1
   1f3de:	3008      	adds	r0, #8
   1f3e0:	f7f7 f980 	bl	166e4 <net_buf_simple_add>
	hdr->code = op;
   1f3e4:	7005      	strb	r5, [r0, #0]
}
   1f3e6:	4620      	mov	r0, r4
   1f3e8:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   1f3ea:	f04f 32ff 	mov.w	r2, #4294967295
   1f3ee:	f04f 33ff 	mov.w	r3, #4294967295
   1f3f2:	e7ed      	b.n	1f3d0 <bt_att_chan_create_pdu+0x22>
		return NULL;
   1f3f4:	2400      	movs	r4, #0
   1f3f6:	e7f6      	b.n	1f3e6 <bt_att_chan_create_pdu+0x38>

0001f3f8 <bt_att_create_pdu>:
{
   1f3f8:	b570      	push	{r4, r5, r6, lr}
   1f3fa:	460e      	mov	r6, r1
   1f3fc:	4615      	mov	r5, r2
	att = att_get(conn);
   1f3fe:	f7ff fedb 	bl	1f1b8 <att_get>
	if (!att) {
   1f402:	b170      	cbz	r0, 1f422 <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f404:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1f406:	b163      	cbz	r3, 1f422 <bt_att_create_pdu+0x2a>
   1f408:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1f40c:	d009      	beq.n	1f422 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f40e:	681b      	ldr	r3, [r3, #0]
   1f410:	b10b      	cbz	r3, 1f416 <bt_att_create_pdu+0x1e>
   1f412:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1f416:	1c6a      	adds	r2, r5, #1
   1f418:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   1f41c:	428a      	cmp	r2, r1
   1f41e:	d902      	bls.n	1f426 <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f420:	b93b      	cbnz	r3, 1f432 <bt_att_create_pdu+0x3a>
}
   1f422:	2000      	movs	r0, #0
   1f424:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1f426:	462a      	mov	r2, r5
   1f428:	4631      	mov	r1, r6
}
   1f42a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1f42e:	f7ff bfbe 	b.w	1f3ae <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f432:	f513 74aa 	adds.w	r4, r3, #340	; 0x154
   1f436:	d004      	beq.n	1f442 <bt_att_create_pdu+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f438:	f8d3 4154 	ldr.w	r4, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f43c:	b10c      	cbz	r4, 1f442 <bt_att_create_pdu+0x4a>
   1f43e:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
{
   1f442:	4618      	mov	r0, r3
   1f444:	4623      	mov	r3, r4
   1f446:	e7e7      	b.n	1f418 <bt_att_create_pdu+0x20>

0001f448 <att_read_blob_req>:
{
   1f448:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1f44a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1f44c:	8813      	ldrh	r3, [r2, #0]
   1f44e:	8852      	ldrh	r2, [r2, #2]
   1f450:	9200      	str	r2, [sp, #0]
   1f452:	210c      	movs	r1, #12
   1f454:	220d      	movs	r2, #13
   1f456:	f7f5 fd4d 	bl	14ef4 <att_read_rsp>
}
   1f45a:	b003      	add	sp, #12
   1f45c:	f85d fb04 	ldr.w	pc, [sp], #4

0001f460 <att_read_req>:
{
   1f460:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1f462:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1f464:	2200      	movs	r2, #0
   1f466:	881b      	ldrh	r3, [r3, #0]
   1f468:	9200      	str	r2, [sp, #0]
   1f46a:	210a      	movs	r1, #10
   1f46c:	220b      	movs	r2, #11
   1f46e:	f7f5 fd41 	bl	14ef4 <att_read_rsp>
}
   1f472:	b003      	add	sp, #12
   1f474:	f85d fb04 	ldr.w	pc, [sp], #4

0001f478 <bt_att_init>:
	bt_gatt_init();
   1f478:	f7f6 b960 	b.w	1573c <bt_gatt_init>

0001f47c <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1f47c:	898a      	ldrh	r2, [r1, #12]
   1f47e:	6889      	ldr	r1, [r1, #8]
   1f480:	2300      	movs	r3, #0
   1f482:	f7f5 beed 	b.w	15260 <att_handle_rsp>

0001f486 <att_handle_find_type_rsp>:
   1f486:	f7ff bff9 	b.w	1f47c <att_handle_find_info_rsp>

0001f48a <att_handle_read_type_rsp>:
   1f48a:	f7ff bff7 	b.w	1f47c <att_handle_find_info_rsp>

0001f48e <att_handle_read_rsp>:
   1f48e:	f7ff bff5 	b.w	1f47c <att_handle_find_info_rsp>

0001f492 <att_handle_read_blob_rsp>:
   1f492:	f7ff bff3 	b.w	1f47c <att_handle_find_info_rsp>

0001f496 <att_handle_read_mult_rsp>:
   1f496:	f7ff bff1 	b.w	1f47c <att_handle_find_info_rsp>

0001f49a <att_handle_read_group_rsp>:
   1f49a:	f7ff bfef 	b.w	1f47c <att_handle_find_info_rsp>

0001f49e <att_handle_write_rsp>:
   1f49e:	f7ff bfed 	b.w	1f47c <att_handle_find_info_rsp>

0001f4a2 <att_handle_prepare_write_rsp>:
   1f4a2:	f7ff bfeb 	b.w	1f47c <att_handle_find_info_rsp>

0001f4a6 <att_handle_exec_write_rsp>:
   1f4a6:	f7ff bfe9 	b.w	1f47c <att_handle_find_info_rsp>

0001f4aa <att_confirm>:
   1f4aa:	f7ff bfe7 	b.w	1f47c <att_handle_find_info_rsp>

0001f4ae <att_mtu_rsp>:
{
   1f4ae:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   1f4b0:	688e      	ldr	r6, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1f4b2:	8833      	ldrh	r3, [r6, #0]
   1f4b4:	2b16      	cmp	r3, #22
{
   1f4b6:	4604      	mov	r4, r0
   1f4b8:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1f4ba:	d806      	bhi.n	1f4ca <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1f4bc:	2200      	movs	r2, #0
   1f4be:	2304      	movs	r3, #4
   1f4c0:	4611      	mov	r1, r2
}
   1f4c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1f4c6:	f7f5 becb 	b.w	15260 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1f4ca:	2317      	movs	r3, #23
   1f4cc:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1f4d0:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   1f4d4:	f7ff fc40 	bl	1ed58 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1f4d8:	89aa      	ldrh	r2, [r5, #12]
   1f4da:	2300      	movs	r3, #0
   1f4dc:	4631      	mov	r1, r6
   1f4de:	4620      	mov	r0, r4
   1f4e0:	e7ef      	b.n	1f4c2 <att_mtu_rsp+0x14>

0001f4e2 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   1f4e2:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
   1f4e6:	f7f5 befd 	b.w	152e4 <bt_att_disconnected>

0001f4ea <gatt_ccc_changed>:
{
   1f4ea:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1f4ec:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1f4ee:	895a      	ldrh	r2, [r3, #10]
   1f4f0:	428a      	cmp	r2, r1
   1f4f2:	d003      	beq.n	1f4fc <gatt_ccc_changed+0x12>
		ccc->value = value;
   1f4f4:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1f4f6:	68db      	ldr	r3, [r3, #12]
   1f4f8:	b103      	cbz	r3, 1f4fc <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1f4fa:	4718      	bx	r3
}
   1f4fc:	4770      	bx	lr

0001f4fe <gatt_indicate_rsp>:
{
   1f4fe:	b510      	push	{r4, lr}
   1f500:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1f502:	68a3      	ldr	r3, [r4, #8]
{
   1f504:	460a      	mov	r2, r1
	if (params->func) {
   1f506:	b10b      	cbz	r3, 1f50c <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1f508:	4621      	mov	r1, r4
   1f50a:	4798      	blx	r3
	params->_ref--;
   1f50c:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1f50e:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1f510:	3b01      	subs	r3, #1
   1f512:	b2db      	uxtb	r3, r3
   1f514:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1f516:	b122      	cbz	r2, 1f522 <gatt_indicate_rsp+0x24>
   1f518:	b91b      	cbnz	r3, 1f522 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1f51a:	4620      	mov	r0, r4
}
   1f51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1f520:	4710      	bx	r2
}
   1f522:	bd10      	pop	{r4, pc}

0001f524 <match_uuid>:
	data->attr = attr;
   1f524:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1f526:	8091      	strh	r1, [r2, #4]
}
   1f528:	2000      	movs	r0, #0
   1f52a:	4770      	bx	lr

0001f52c <gen_hash_m>:
{
   1f52c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f52e:	6807      	ldr	r7, [r0, #0]
   1f530:	783d      	ldrb	r5, [r7, #0]
{
   1f532:	b089      	sub	sp, #36	; 0x24
   1f534:	4606      	mov	r6, r0
   1f536:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f538:	b10d      	cbz	r5, 1f53e <gen_hash_m+0x12>
	switch (u16->val) {
   1f53a:	2501      	movs	r5, #1
   1f53c:	e014      	b.n	1f568 <gen_hash_m+0x3c>
   1f53e:	887b      	ldrh	r3, [r7, #2]
   1f540:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1f544:	d004      	beq.n	1f550 <gen_hash_m+0x24>
   1f546:	d812      	bhi.n	1f56e <gen_hash_m+0x42>
   1f548:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1f54c:	2b03      	cmp	r3, #3
   1f54e:	d8f4      	bhi.n	1f53a <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1f550:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f554:	2202      	movs	r2, #2
   1f556:	f10d 010e 	add.w	r1, sp, #14
   1f55a:	4620      	mov	r0, r4
   1f55c:	f7fe fcc7 	bl	1deee <tc_cmac_update>
   1f560:	b9e0      	cbnz	r0, 1f59c <gen_hash_m+0x70>
			state->err = -EINVAL;
   1f562:	f06f 0315 	mvn.w	r3, #21
   1f566:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1f568:	4628      	mov	r0, r5
   1f56a:	b009      	add	sp, #36	; 0x24
   1f56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1f56e:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1f572:	33ff      	adds	r3, #255	; 0xff
   1f574:	b29b      	uxth	r3, r3
   1f576:	2b04      	cmp	r3, #4
   1f578:	d8df      	bhi.n	1f53a <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1f57a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f57e:	2202      	movs	r2, #2
   1f580:	f10d 010e 	add.w	r1, sp, #14
   1f584:	4620      	mov	r0, r4
   1f586:	f7fe fcb2 	bl	1deee <tc_cmac_update>
   1f58a:	2800      	cmp	r0, #0
   1f58c:	d0e9      	beq.n	1f562 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1f58e:	887b      	ldrh	r3, [r7, #2]
   1f590:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f594:	2202      	movs	r2, #2
   1f596:	f10d 010e 	add.w	r1, sp, #14
   1f59a:	e017      	b.n	1f5cc <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1f59c:	887b      	ldrh	r3, [r7, #2]
   1f59e:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f5a2:	2202      	movs	r2, #2
   1f5a4:	f10d 010e 	add.w	r1, sp, #14
   1f5a8:	4620      	mov	r0, r4
   1f5aa:	f7fe fca0 	bl	1deee <tc_cmac_update>
   1f5ae:	2800      	cmp	r0, #0
   1f5b0:	d0d7      	beq.n	1f562 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1f5b2:	2000      	movs	r0, #0
   1f5b4:	2310      	movs	r3, #16
   1f5b6:	eb0d 0203 	add.w	r2, sp, r3
   1f5ba:	6877      	ldr	r7, [r6, #4]
   1f5bc:	9000      	str	r0, [sp, #0]
   1f5be:	4631      	mov	r1, r6
   1f5c0:	47b8      	blx	r7
		if (len < 0) {
   1f5c2:	1e02      	subs	r2, r0, #0
   1f5c4:	da01      	bge.n	1f5ca <gen_hash_m+0x9e>
			state->err = len;
   1f5c6:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1f5c8:	e7ce      	b.n	1f568 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1f5ca:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f5cc:	4620      	mov	r0, r4
   1f5ce:	f7fe fc8e 	bl	1deee <tc_cmac_update>
   1f5d2:	2800      	cmp	r0, #0
   1f5d4:	d1b1      	bne.n	1f53a <gen_hash_m+0xe>
   1f5d6:	e7c4      	b.n	1f562 <gen_hash_m+0x36>

0001f5d8 <bt_addr_le_cmp>:
   1f5d8:	2207      	movs	r2, #7
   1f5da:	f001 ba38 	b.w	20a4e <memcmp>

0001f5de <find_ccc_cfg>:
{
   1f5de:	b513      	push	{r0, r1, r4, lr}
   1f5e0:	1c4a      	adds	r2, r1, #1
   1f5e2:	460c      	mov	r4, r1
		if (conn) {
   1f5e4:	b140      	cbz	r0, 1f5f8 <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1f5e6:	7809      	ldrb	r1, [r1, #0]
   1f5e8:	f7ff f98b 	bl	1e902 <bt_conn_is_peer_addr_le>
   1f5ec:	2800      	cmp	r0, #0
	return NULL;
   1f5ee:	bf08      	it	eq
   1f5f0:	2400      	moveq	r4, #0
}
   1f5f2:	4620      	mov	r0, r4
   1f5f4:	b002      	add	sp, #8
   1f5f6:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1f5f8:	9000      	str	r0, [sp, #0]
   1f5fa:	4669      	mov	r1, sp
   1f5fc:	f8cd 0003 	str.w	r0, [sp, #3]
   1f600:	4610      	mov	r0, r2
   1f602:	f7ff ffe9 	bl	1f5d8 <bt_addr_le_cmp>
   1f606:	2800      	cmp	r0, #0
	return NULL;
   1f608:	bf18      	it	ne
   1f60a:	2400      	movne	r4, #0
   1f60c:	e7f1      	b.n	1f5f2 <find_ccc_cfg+0x14>

0001f60e <bt_addr_le_copy>:
   1f60e:	680b      	ldr	r3, [r1, #0]
   1f610:	6003      	str	r3, [r0, #0]
   1f612:	888b      	ldrh	r3, [r1, #4]
   1f614:	8083      	strh	r3, [r0, #4]
   1f616:	798b      	ldrb	r3, [r1, #6]
   1f618:	7183      	strb	r3, [r0, #6]
}
   1f61a:	4770      	bx	lr

0001f61c <sc_save>:
{
   1f61c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f620:	4680      	mov	r8, r0
   1f622:	460f      	mov	r7, r1
   1f624:	4616      	mov	r6, r2
   1f626:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1f628:	f7f5 ffac 	bl	15584 <find_sc_cfg>
	if (!cfg) {
   1f62c:	4604      	mov	r4, r0
   1f62e:	b960      	cbnz	r0, 1f64a <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1f630:	4669      	mov	r1, sp
   1f632:	9000      	str	r0, [sp, #0]
   1f634:	f8cd 0003 	str.w	r0, [sp, #3]
   1f638:	f7f5 ffa4 	bl	15584 <find_sc_cfg>
		if (!cfg) {
   1f63c:	4604      	mov	r4, r0
   1f63e:	b178      	cbz	r0, 1f660 <sc_save+0x44>
		cfg->id = id;
   1f640:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1f644:	4639      	mov	r1, r7
   1f646:	f7ff ffe2 	bl	1f60e <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1f64a:	8922      	ldrh	r2, [r4, #8]
   1f64c:	8963      	ldrh	r3, [r4, #10]
   1f64e:	b91a      	cbnz	r2, 1f658 <sc_save+0x3c>
   1f650:	b923      	cbnz	r3, 1f65c <sc_save+0x40>
		cfg->data.start = start;
   1f652:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1f654:	8165      	strh	r5, [r4, #10]
   1f656:	e003      	b.n	1f660 <sc_save+0x44>
	if (new_start >= *start && new_end <= *end) {
   1f658:	4296      	cmp	r6, r2
   1f65a:	d304      	bcc.n	1f666 <sc_save+0x4a>
   1f65c:	429d      	cmp	r5, r3
   1f65e:	d8f9      	bhi.n	1f654 <sc_save+0x38>
}
   1f660:	b002      	add	sp, #8
   1f662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   1f666:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1f668:	e7f8      	b.n	1f65c <sc_save+0x40>

0001f66a <bt_gatt_attr_write_ccc>:
{
   1f66a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f66e:	461f      	mov	r7, r3
   1f670:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1f674:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1f678:	4606      	mov	r6, r0
   1f67a:	4688      	mov	r8, r1
	if (offset) {
   1f67c:	2b00      	cmp	r3, #0
   1f67e:	d144      	bne.n	1f70a <bt_gatt_attr_write_ccc+0xa0>
	if (!len || len > sizeof(uint16_t)) {
   1f680:	1e7b      	subs	r3, r7, #1
   1f682:	2b01      	cmp	r3, #1
   1f684:	d844      	bhi.n	1f710 <bt_gatt_attr_write_ccc+0xa6>
	if (len < sizeof(uint16_t)) {
   1f686:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1f688:	7815      	ldrb	r5, [r2, #0]
   1f68a:	bf18      	it	ne
   1f68c:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1f68e:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1f690:	bf0c      	ite	eq
   1f692:	b2ad      	uxtheq	r5, r5
   1f694:	ea45 2502 	orrne.w	r5, r5, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1f698:	f7ff ffa1 	bl	1f5de <find_ccc_cfg>
	if (!cfg) {
   1f69c:	4604      	mov	r4, r0
   1f69e:	b980      	cbnz	r0, 1f6c2 <bt_gatt_attr_write_ccc+0x58>
		if (!value) {
   1f6a0:	b91d      	cbnz	r5, 1f6aa <bt_gatt_attr_write_ccc+0x40>
			return len;
   1f6a2:	4638      	mov	r0, r7
}
   1f6a4:	b003      	add	sp, #12
   1f6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1f6aa:	4649      	mov	r1, r9
   1f6ac:	f7ff ff97 	bl	1f5de <find_ccc_cfg>
		if (!cfg) {
   1f6b0:	4604      	mov	r4, r0
   1f6b2:	b380      	cbz	r0, 1f716 <bt_gatt_attr_write_ccc+0xac>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1f6b4:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1f6b8:	3001      	adds	r0, #1
   1f6ba:	f7ff ffa8 	bl	1f60e <bt_addr_le_copy>
		cfg->id = conn->id;
   1f6be:	7a33      	ldrb	r3, [r6, #8]
   1f6c0:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1f6c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1f6c6:	b9a3      	cbnz	r3, 1f6f2 <bt_gatt_attr_write_ccc+0x88>
	if (cfg->value != ccc->value) {
   1f6c8:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1f6cc:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1f6ce:	42ab      	cmp	r3, r5
   1f6d0:	d003      	beq.n	1f6da <bt_gatt_attr_write_ccc+0x70>
		gatt_ccc_changed(attr, ccc);
   1f6d2:	4649      	mov	r1, r9
   1f6d4:	4640      	mov	r0, r8
   1f6d6:	f7ff ff08 	bl	1f4ea <gatt_ccc_changed>
	if (!value) {
   1f6da:	2d00      	cmp	r5, #0
   1f6dc:	d1e1      	bne.n	1f6a2 <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f6de:	4669      	mov	r1, sp
   1f6e0:	1c60      	adds	r0, r4, #1
   1f6e2:	9500      	str	r5, [sp, #0]
   1f6e4:	f8cd 5003 	str.w	r5, [sp, #3]
   1f6e8:	f7ff ff91 	bl	1f60e <bt_addr_le_copy>
	cfg->id = 0U;
   1f6ec:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1f6ee:	8125      	strh	r5, [r4, #8]
}
   1f6f0:	e7d7      	b.n	1f6a2 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1f6f2:	462a      	mov	r2, r5
   1f6f4:	4641      	mov	r1, r8
   1f6f6:	4630      	mov	r0, r6
   1f6f8:	4798      	blx	r3
		if (write < 0) {
   1f6fa:	2800      	cmp	r0, #0
   1f6fc:	dbd2      	blt.n	1f6a4 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1f6fe:	3801      	subs	r0, #1
   1f700:	2801      	cmp	r0, #1
   1f702:	d9e1      	bls.n	1f6c8 <bt_gatt_attr_write_ccc+0x5e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1f704:	f06f 000d 	mvn.w	r0, #13
   1f708:	e7cc      	b.n	1f6a4 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f70a:	f06f 0006 	mvn.w	r0, #6
   1f70e:	e7c9      	b.n	1f6a4 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1f710:	f06f 000c 	mvn.w	r0, #12
   1f714:	e7c6      	b.n	1f6a4 <bt_gatt_attr_write_ccc+0x3a>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1f716:	f06f 0010 	mvn.w	r0, #16
   1f71a:	e7c3      	b.n	1f6a4 <bt_gatt_attr_write_ccc+0x3a>

0001f71c <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   1f71c:	2300      	movs	r3, #0
   1f71e:	6003      	str	r3, [r0, #0]
   1f720:	6043      	str	r3, [r0, #4]
   1f722:	6083      	str	r3, [r0, #8]
}
   1f724:	4770      	bx	lr

0001f726 <sc_clear>:
{
   1f726:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f728:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   1f72c:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f72e:	4629      	mov	r1, r5
   1f730:	7a00      	ldrb	r0, [r0, #8]
   1f732:	f7fe ffb1 	bl	1e698 <bt_addr_le_is_bonded>
   1f736:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1f738:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1f73a:	f7f5 ff23 	bl	15584 <find_sc_cfg>
		if (cfg) {
   1f73e:	b118      	cbz	r0, 1f748 <sc_clear+0x22>
}
   1f740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   1f744:	f7ff bfea 	b.w	1f71c <clear_sc_cfg>
}
   1f748:	bd38      	pop	{r3, r4, r5, pc}

0001f74a <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1f74a:	2a02      	cmp	r2, #2
{
   1f74c:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1f74e:	d108      	bne.n	1f762 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1f750:	2300      	movs	r3, #0
   1f752:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1f756:	461a      	mov	r2, r3
   1f758:	7a00      	ldrb	r0, [r0, #8]
   1f75a:	f7ff ff5f 	bl	1f61c <sc_save>
}
   1f75e:	2002      	movs	r0, #2
   1f760:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1f762:	f7ff ffe0 	bl	1f726 <sc_clear>
   1f766:	e7fa      	b.n	1f75e <sc_ccc_cfg_write+0x14>

0001f768 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   1f768:	b538      	push	{r3, r4, r5, lr}
   1f76a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   1f76e:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   1f770:	460c      	mov	r4, r1
   1f772:	4611      	mov	r1, r2
	if (offset > value_len) {
   1f774:	d30a      	bcc.n	1f78c <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   1f776:	1aad      	subs	r5, r5, r2
   1f778:	42a5      	cmp	r5, r4
   1f77a:	bfa8      	it	ge
   1f77c:	4625      	movge	r5, r4
   1f77e:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f780:	462a      	mov	r2, r5
   1f782:	4419      	add	r1, r3
   1f784:	f001 f971 	bl	20a6a <memcpy>
}
   1f788:	4628      	mov	r0, r5
   1f78a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f78c:	f06f 0506 	mvn.w	r5, #6
   1f790:	e7fa      	b.n	1f788 <bt_gatt_attr_read.constprop.0+0x20>

0001f792 <bt_gatt_attr_read_ccc>:
{
   1f792:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1f794:	68c9      	ldr	r1, [r1, #12]
{
   1f796:	b085      	sub	sp, #20
   1f798:	4614      	mov	r4, r2
   1f79a:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   1f79c:	f7ff ff1f 	bl	1f5de <find_ccc_cfg>
	if (cfg) {
   1f7a0:	b100      	cbz	r0, 1f7a4 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   1f7a2:	8900      	ldrh	r0, [r0, #8]
   1f7a4:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1f7a8:	2302      	movs	r3, #2
   1f7aa:	9300      	str	r3, [sp, #0]
   1f7ac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1f7b0:	f10d 030e 	add.w	r3, sp, #14
   1f7b4:	4629      	mov	r1, r5
   1f7b6:	4620      	mov	r0, r4
   1f7b8:	f7ff ffd6 	bl	1f768 <bt_gatt_attr_read.constprop.0>
}
   1f7bc:	b005      	add	sp, #20
   1f7be:	bd30      	pop	{r4, r5, pc}

0001f7c0 <bt_gatt_attr_read_service>:
{
   1f7c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1f7c2:	460c      	mov	r4, r1
   1f7c4:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   1f7c6:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   1f7c8:	781c      	ldrb	r4, [r3, #0]
{
   1f7ca:	4610      	mov	r0, r2
   1f7cc:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1f7d0:	b954      	cbnz	r4, 1f7e8 <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1f7d2:	885b      	ldrh	r3, [r3, #2]
   1f7d4:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1f7d8:	2302      	movs	r3, #2
   1f7da:	9300      	str	r3, [sp, #0]
   1f7dc:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1f7e0:	f7ff ffc2 	bl	1f768 <bt_gatt_attr_read.constprop.0>
}
   1f7e4:	b004      	add	sp, #16
   1f7e6:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1f7e8:	2410      	movs	r4, #16
   1f7ea:	9400      	str	r4, [sp, #0]
   1f7ec:	3301      	adds	r3, #1
   1f7ee:	e7f7      	b.n	1f7e0 <bt_gatt_attr_read_service+0x20>

0001f7f0 <cf_read>:
{
   1f7f0:	b530      	push	{r4, r5, lr}
   1f7f2:	b085      	sub	sp, #20
   1f7f4:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   1f7f6:	2300      	movs	r3, #0
{
   1f7f8:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   1f7fa:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   1f7fe:	f7f5 fea3 	bl	15548 <find_cf_cfg>
	if (cfg) {
   1f802:	b110      	cbz	r0, 1f80a <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   1f804:	7a03      	ldrb	r3, [r0, #8]
   1f806:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1f80a:	2301      	movs	r3, #1
   1f80c:	9300      	str	r3, [sp, #0]
   1f80e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1f812:	ab03      	add	r3, sp, #12
   1f814:	4629      	mov	r1, r5
   1f816:	4620      	mov	r0, r4
   1f818:	f7ff ffa6 	bl	1f768 <bt_gatt_attr_read.constprop.0>
}
   1f81c:	b005      	add	sp, #20
   1f81e:	bd30      	pop	{r4, r5, pc}

0001f820 <read_name>:
{
   1f820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f824:	4614      	mov	r4, r2
   1f826:	461d      	mov	r5, r3
   1f828:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   1f82c:	f7f3 fc16 	bl	1305c <bt_get_name>
   1f830:	4606      	mov	r6, r0
				 strlen(name));
   1f832:	f7ec fd23 	bl	c27c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1f836:	b280      	uxth	r0, r0
   1f838:	9006      	str	r0, [sp, #24]
   1f83a:	4633      	mov	r3, r6
   1f83c:	463a      	mov	r2, r7
   1f83e:	4629      	mov	r1, r5
   1f840:	4620      	mov	r0, r4
}
   1f842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1f846:	f7ff bf8f 	b.w	1f768 <bt_gatt_attr_read.constprop.0>

0001f84a <read_appearance>:
{
   1f84a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1f84c:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1f84e:	2300      	movs	r3, #0
   1f850:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1f854:	2302      	movs	r3, #2
   1f856:	9300      	str	r3, [sp, #0]
{
   1f858:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1f85a:	f10d 030e 	add.w	r3, sp, #14
   1f85e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1f862:	f7ff ff81 	bl	1f768 <bt_gatt_attr_read.constprop.0>
}
   1f866:	b005      	add	sp, #20
   1f868:	f85d fb04 	ldr.w	pc, [sp], #4

0001f86c <clear_cf_cfg>:
{
   1f86c:	b513      	push	{r0, r1, r4, lr}
   1f86e:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f870:	2400      	movs	r4, #0
   1f872:	4669      	mov	r1, sp
   1f874:	3001      	adds	r0, #1
   1f876:	9400      	str	r4, [sp, #0]
   1f878:	f8cd 4003 	str.w	r4, [sp, #3]
   1f87c:	f7ff fec7 	bl	1f60e <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   1f880:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f882:	320c      	adds	r2, #12
   1f884:	f3bf 8f5b 	dmb	ish
   1f888:	e852 3f00 	ldrex	r3, [r2]
   1f88c:	e842 4100 	strex	r1, r4, [r2]
   1f890:	2900      	cmp	r1, #0
   1f892:	d1f9      	bne.n	1f888 <clear_cf_cfg+0x1c>
   1f894:	f3bf 8f5b 	dmb	ish
}
   1f898:	b002      	add	sp, #8
   1f89a:	bd10      	pop	{r4, pc}

0001f89c <gatt_write_ccc_buf>:
{
   1f89c:	b538      	push	{r3, r4, r5, lr}
   1f89e:	f100 0508 	add.w	r5, r0, #8
   1f8a2:	2102      	movs	r1, #2
   1f8a4:	4628      	mov	r0, r5
   1f8a6:	4614      	mov	r4, r2
   1f8a8:	f7f6 ff1c 	bl	166e4 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   1f8ac:	8963      	ldrh	r3, [r4, #10]
	net_buf_simple_add_le16(&buf->b, val);
   1f8ae:	89a1      	ldrh	r1, [r4, #12]
   1f8b0:	8003      	strh	r3, [r0, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f8b2:	3410      	adds	r4, #16
   1f8b4:	4628      	mov	r0, r5
   1f8b6:	f000 faaf 	bl	1fe18 <net_buf_simple_add_le16>
   1f8ba:	f3bf 8f5b 	dmb	ish
   1f8be:	e854 3f00 	ldrex	r3, [r4]
   1f8c2:	f043 0304 	orr.w	r3, r3, #4
   1f8c6:	e844 3200 	strex	r2, r3, [r4]
   1f8ca:	2a00      	cmp	r2, #0
   1f8cc:	d1f7      	bne.n	1f8be <gatt_write_ccc_buf+0x22>
   1f8ce:	f3bf 8f5b 	dmb	ish
}
   1f8d2:	2000      	movs	r0, #0
   1f8d4:	bd38      	pop	{r3, r4, r5, pc}

0001f8d6 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f8d6:	2301      	movs	r3, #1
   1f8d8:	408b      	lsls	r3, r1
   1f8da:	f3bf 8f5b 	dmb	ish
   1f8de:	e850 2f00 	ldrex	r2, [r0]
   1f8e2:	431a      	orrs	r2, r3
   1f8e4:	e840 2100 	strex	r1, r2, [r0]
   1f8e8:	2900      	cmp	r1, #0
   1f8ea:	d1f8      	bne.n	1f8de <atomic_set_bit+0x8>
   1f8ec:	f3bf 8f5b 	dmb	ish
}
   1f8f0:	4770      	bx	lr

0001f8f2 <sc_restore_rsp>:
{
   1f8f2:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1f8f4:	f7f5 fe28 	bl	15548 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1f8f8:	b140      	cbz	r0, 1f90c <sc_restore_rsp+0x1a>
   1f8fa:	7a03      	ldrb	r3, [r0, #8]
   1f8fc:	07db      	lsls	r3, r3, #31
   1f8fe:	d505      	bpl.n	1f90c <sc_restore_rsp+0x1a>
}
   1f900:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1f904:	2100      	movs	r1, #0
   1f906:	300c      	adds	r0, #12
   1f908:	f7ff bfe5 	b.w	1f8d6 <atomic_set_bit>
}
   1f90c:	bd08      	pop	{r3, pc}

0001f90e <cf_write>:
{
   1f90e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f912:	4698      	mov	r8, r3
   1f914:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1f918:	2b01      	cmp	r3, #1
{
   1f91a:	4606      	mov	r6, r0
   1f91c:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1f91e:	d830      	bhi.n	1f982 <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   1f920:	4443      	add	r3, r8
   1f922:	2b01      	cmp	r3, #1
   1f924:	4645      	mov	r5, r8
   1f926:	dc2f      	bgt.n	1f988 <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   1f928:	f7f5 fe0e 	bl	15548 <find_cf_cfg>
	if (!cfg) {
   1f92c:	4604      	mov	r4, r0
   1f92e:	b918      	cbnz	r0, 1f938 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1f930:	f7f5 fe0a 	bl	15548 <find_cf_cfg>
	if (!cfg) {
   1f934:	4604      	mov	r4, r0
   1f936:	b350      	cbz	r0, 1f98e <cf_write+0x80>
{
   1f938:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1f93a:	f1b8 0f00 	cmp.w	r8, #0
   1f93e:	d10e      	bne.n	1f95e <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1f940:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1f944:	1c60      	adds	r0, r4, #1
   1f946:	f7ff fe62 	bl	1f60e <bt_addr_le_copy>
	cfg->id = conn->id;
   1f94a:	4620      	mov	r0, r4
   1f94c:	7a33      	ldrb	r3, [r6, #8]
   1f94e:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1f952:	2100      	movs	r1, #0
   1f954:	f7ff ffbf 	bl	1f8d6 <atomic_set_bit>
}
   1f958:	4628      	mov	r0, r5
   1f95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1f95e:	7a20      	ldrb	r0, [r4, #8]
   1f960:	fa20 f301 	lsr.w	r3, r0, r1
   1f964:	07da      	lsls	r2, r3, #31
   1f966:	d503      	bpl.n	1f970 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   1f968:	783b      	ldrb	r3, [r7, #0]
   1f96a:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1f96c:	07db      	lsls	r3, r3, #31
   1f96e:	d511      	bpl.n	1f994 <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1f970:	3101      	adds	r1, #1
   1f972:	2903      	cmp	r1, #3
   1f974:	d1e1      	bne.n	1f93a <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1f976:	783b      	ldrb	r3, [r7, #0]
   1f978:	f003 0307 	and.w	r3, r3, #7
   1f97c:	4318      	orrs	r0, r3
   1f97e:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1f980:	e7de      	b.n	1f940 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f982:	f06f 0506 	mvn.w	r5, #6
   1f986:	e7e7      	b.n	1f958 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1f988:	f06f 050c 	mvn.w	r5, #12
   1f98c:	e7e4      	b.n	1f958 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1f98e:	f06f 0510 	mvn.w	r5, #16
   1f992:	e7e1      	b.n	1f958 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1f994:	f06f 0512 	mvn.w	r5, #18
   1f998:	e7de      	b.n	1f958 <cf_write+0x4a>

0001f99a <gatt_sub_remove>:
{
   1f99a:	b538      	push	{r3, r4, r5, lr}
   1f99c:	460c      	mov	r4, r1
	if (params) {
   1f99e:	4619      	mov	r1, r3
   1f9a0:	b16b      	cbz	r3, 1f9be <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1f9a2:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   1f9a6:	695b      	ldr	r3, [r3, #20]
   1f9a8:	b982      	cbnz	r2, 1f9cc <gatt_sub_remove+0x32>
   1f9aa:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   1f9ac:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1f9ae:	4295      	cmp	r5, r2
   1f9b0:	d100      	bne.n	1f9b4 <gatt_sub_remove+0x1a>
	list->tail = node;
   1f9b2:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1f9b4:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1f9b6:	680d      	ldr	r5, [r1, #0]
   1f9b8:	614b      	str	r3, [r1, #20]
   1f9ba:	461a      	mov	r2, r3
   1f9bc:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   1f9be:	68a3      	ldr	r3, [r4, #8]
   1f9c0:	b953      	cbnz	r3, 1f9d8 <gatt_sub_remove+0x3e>
		gatt_sub_free(sub);
   1f9c2:	4620      	mov	r0, r4
}
   1f9c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gatt_sub_free(sub);
   1f9c8:	f7f5 be0a 	b.w	155e0 <gatt_sub_free>
   1f9cc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f9ce:	68e3      	ldr	r3, [r4, #12]
   1f9d0:	429d      	cmp	r5, r3
	list->tail = node;
   1f9d2:	bf08      	it	eq
   1f9d4:	60e2      	streq	r2, [r4, #12]
}
   1f9d6:	e7ed      	b.n	1f9b4 <gatt_sub_remove+0x1a>
}
   1f9d8:	bd38      	pop	{r3, r4, r5, pc}

0001f9da <gatt_write_ccc_rsp>:
{
   1f9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f9de:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f9e0:	f3bf 8f5b 	dmb	ish
   1f9e4:	4606      	mov	r6, r0
   1f9e6:	460d      	mov	r5, r1
   1f9e8:	f104 0310 	add.w	r3, r4, #16
   1f9ec:	e853 2f00 	ldrex	r2, [r3]
   1f9f0:	f022 0204 	bic.w	r2, r2, #4
   1f9f4:	e843 2100 	strex	r1, r2, [r3]
   1f9f8:	2900      	cmp	r1, #0
   1f9fa:	d1f7      	bne.n	1f9ec <gatt_write_ccc_rsp+0x12>
   1f9fc:	f3bf 8f5b 	dmb	ish
	if (err) {
   1fa00:	b1dd      	cbz	r5, 1fa3a <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   1fa02:	f7f5 fdcf 	bl	155a4 <gatt_sub_find>
		if (!sub) {
   1fa06:	4601      	mov	r1, r0
   1fa08:	b300      	cbz	r0, 1fa4c <gatt_write_ccc_rsp+0x72>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   1fa0a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fa0c:	b143      	cbz	r3, 1fa20 <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fa0e:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1fa10:	f104 0014 	add.w	r0, r4, #20
   1fa14:	4283      	cmp	r3, r0
   1fa16:	d10b      	bne.n	1fa30 <gatt_write_ccc_rsp+0x56>
				gatt_sub_remove(conn, sub, tmp, params);
   1fa18:	4623      	mov	r3, r4
   1fa1a:	4630      	mov	r0, r6
   1fa1c:	f7ff ffbd 	bl	1f99a <gatt_sub_remove>
	if (params->write) {
   1fa20:	6863      	ldr	r3, [r4, #4]
   1fa22:	b19b      	cbz	r3, 1fa4c <gatt_write_ccc_rsp+0x72>
		params->write(conn, err, NULL);
   1fa24:	4629      	mov	r1, r5
   1fa26:	4630      	mov	r0, r6
   1fa28:	2200      	movs	r2, #0
}
   1fa2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1fa2e:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fa30:	2a00      	cmp	r2, #0
   1fa32:	d0f5      	beq.n	1fa20 <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fa34:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fa36:	6812      	ldr	r2, [r2, #0]
   1fa38:	e7ec      	b.n	1fa14 <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   1fa3a:	89a3      	ldrh	r3, [r4, #12]
   1fa3c:	2b00      	cmp	r3, #0
   1fa3e:	d1ef      	bne.n	1fa20 <gatt_write_ccc_rsp+0x46>
		params->notify(conn, params, NULL, 0);
   1fa40:	6827      	ldr	r7, [r4, #0]
   1fa42:	462b      	mov	r3, r5
   1fa44:	462a      	mov	r2, r5
   1fa46:	4621      	mov	r1, r4
   1fa48:	47b8      	blx	r7
   1fa4a:	e7e9      	b.n	1fa20 <gatt_write_ccc_rsp+0x46>
}
   1fa4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fa50 <gatt_req_send>:
{
   1fa50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fa54:	4606      	mov	r6, r0
   1fa56:	4688      	mov	r8, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1fa58:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1fa5c:	2100      	movs	r1, #0
{
   1fa5e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1fa62:	4614      	mov	r4, r2
   1fa64:	461f      	mov	r7, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1fa66:	f7f5 fbd3 	bl	15210 <bt_att_req_alloc>
	if (!req) {
   1fa6a:	4605      	mov	r5, r0
   1fa6c:	b920      	cbnz	r0, 1fa78 <gatt_req_send+0x28>
		return -ENOMEM;
   1fa6e:	f06f 040b 	mvn.w	r4, #11
}
   1fa72:	4620      	mov	r0, r4
   1fa74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	req->func = func;
   1fa78:	f8c0 8004 	str.w	r8, [r0, #4]
	req->user_data = params;
   1fa7c:	60c4      	str	r4, [r0, #12]
	buf = bt_att_create_pdu(conn, op, len);
   1fa7e:	f89d 1020 	ldrb.w	r1, [sp, #32]
   1fa82:	464a      	mov	r2, r9
   1fa84:	4630      	mov	r0, r6
   1fa86:	f7ff fcb7 	bl	1f3f8 <bt_att_create_pdu>
	if (!buf) {
   1fa8a:	b918      	cbnz	r0, 1fa94 <gatt_req_send+0x44>
		bt_att_req_free(req);
   1fa8c:	4628      	mov	r0, r5
   1fa8e:	f7f5 fbd5 	bl	1523c <bt_att_req_free>
   1fa92:	e7ec      	b.n	1fa6e <gatt_req_send+0x1e>
	err = encode(buf, len, params);
   1fa94:	4622      	mov	r2, r4
	req->buf = buf;
   1fa96:	60a8      	str	r0, [r5, #8]
	err = encode(buf, len, params);
   1fa98:	4649      	mov	r1, r9
   1fa9a:	47b8      	blx	r7
	if (err) {
   1fa9c:	4604      	mov	r4, r0
   1fa9e:	b118      	cbz	r0, 1faa8 <gatt_req_send+0x58>
		bt_att_req_free(req);
   1faa0:	4628      	mov	r0, r5
   1faa2:	f7f5 fbcb 	bl	1523c <bt_att_req_free>
   1faa6:	e7e4      	b.n	1fa72 <gatt_req_send+0x22>
	err = bt_att_req_send(conn, req);
   1faa8:	4629      	mov	r1, r5
   1faaa:	4630      	mov	r0, r6
   1faac:	f7f5 fce2 	bl	15474 <bt_att_req_send>
	if (err) {
   1fab0:	4604      	mov	r4, r0
   1fab2:	2800      	cmp	r0, #0
   1fab4:	d0dd      	beq.n	1fa72 <gatt_req_send+0x22>
   1fab6:	e7f3      	b.n	1faa0 <gatt_req_send+0x50>

0001fab8 <bt_gatt_attr_value_handle>:
{
   1fab8:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1faba:	4604      	mov	r4, r0
   1fabc:	b910      	cbnz	r0, 1fac4 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1fabe:	2000      	movs	r0, #0
}
   1fac0:	b002      	add	sp, #8
   1fac2:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1fac4:	2300      	movs	r3, #0
   1fac6:	f88d 3004 	strb.w	r3, [sp, #4]
   1faca:	6800      	ldr	r0, [r0, #0]
   1facc:	f642 0303 	movw	r3, #10243	; 0x2803
   1fad0:	a901      	add	r1, sp, #4
   1fad2:	f8ad 3006 	strh.w	r3, [sp, #6]
   1fad6:	f7fe fadd 	bl	1e094 <bt_uuid_cmp>
   1fada:	2800      	cmp	r0, #0
   1fadc:	d1ef      	bne.n	1fabe <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1fade:	68e3      	ldr	r3, [r4, #12]
   1fae0:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1fae2:	2800      	cmp	r0, #0
   1fae4:	d1ec      	bne.n	1fac0 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1fae6:	4620      	mov	r0, r4
   1fae8:	f7f5 fe96 	bl	15818 <bt_gatt_attr_get_handle>
   1faec:	3001      	adds	r0, #1
   1faee:	b280      	uxth	r0, r0
	return handle;
   1faf0:	e7e6      	b.n	1fac0 <bt_gatt_attr_value_handle+0x8>

0001faf2 <bt_gatt_attr_read_chrc>:
{
   1faf2:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1faf4:	68ce      	ldr	r6, [r1, #12]
{
   1faf6:	b088      	sub	sp, #32
   1faf8:	4608      	mov	r0, r1
   1fafa:	461d      	mov	r5, r3
	pdu.properties = chrc->properties;
   1fafc:	79b3      	ldrb	r3, [r6, #6]
   1fafe:	f88d 300c 	strb.w	r3, [sp, #12]
{
   1fb02:	4614      	mov	r4, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1fb04:	f7ff ffd8 	bl	1fab8 <bt_gatt_attr_value_handle>
   1fb08:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1fb0c:	6830      	ldr	r0, [r6, #0]
   1fb0e:	7803      	ldrb	r3, [r0, #0]
   1fb10:	b96b      	cbnz	r3, 1fb2e <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1fb12:	8843      	ldrh	r3, [r0, #2]
   1fb14:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   1fb18:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1fb1a:	9300      	str	r3, [sp, #0]
   1fb1c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   1fb20:	ab03      	add	r3, sp, #12
   1fb22:	4629      	mov	r1, r5
   1fb24:	4620      	mov	r0, r4
   1fb26:	f7ff fe1f 	bl	1f768 <bt_gatt_attr_read.constprop.0>
}
   1fb2a:	b008      	add	sp, #32
   1fb2c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1fb2e:	1c43      	adds	r3, r0, #1
   1fb30:	f10d 020f 	add.w	r2, sp, #15
   1fb34:	3011      	adds	r0, #17
   1fb36:	f853 1b04 	ldr.w	r1, [r3], #4
   1fb3a:	f842 1b04 	str.w	r1, [r2], #4
   1fb3e:	4283      	cmp	r3, r0
   1fb40:	d1f9      	bne.n	1fb36 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   1fb42:	2313      	movs	r3, #19
   1fb44:	e7e9      	b.n	1fb1a <bt_gatt_attr_read_chrc+0x28>

0001fb46 <bt_gatt_foreach_attr>:
{
   1fb46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1fb48:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1fb4c:	2300      	movs	r3, #0
   1fb4e:	9300      	str	r3, [sp, #0]
   1fb50:	461a      	mov	r2, r3
   1fb52:	f7f5 fead 	bl	158b0 <bt_gatt_foreach_attr_type>
}
   1fb56:	b005      	add	sp, #20
   1fb58:	f85d fb04 	ldr.w	pc, [sp], #4

0001fb5c <db_hash_process>:
	db_hash_gen(true);
   1fb5c:	f7f5 bf1e 	b.w	1599c <db_hash_gen.isra.0>

0001fb60 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1fb60:	07d3      	lsls	r3, r2, #31
{
   1fb62:	b510      	push	{r4, lr}
   1fb64:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1fb66:	d504      	bpl.n	1fb72 <bt_gatt_check_perm+0x12>
   1fb68:	f014 0f15 	tst.w	r4, #21
   1fb6c:	d017      	beq.n	1fb9e <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1fb6e:	684b      	ldr	r3, [r1, #4]
   1fb70:	b1ab      	cbz	r3, 1fb9e <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1fb72:	0793      	lsls	r3, r2, #30
   1fb74:	d504      	bpl.n	1fb80 <bt_gatt_check_perm+0x20>
   1fb76:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1fb7a:	d012      	beq.n	1fba2 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1fb7c:	688b      	ldr	r3, [r1, #8]
   1fb7e:	b183      	cbz	r3, 1fba2 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1fb80:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1fb82:	f014 0f30 	tst.w	r4, #48	; 0x30
   1fb86:	d104      	bne.n	1fb92 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1fb88:	f014 000c 	ands.w	r0, r4, #12
   1fb8c:	bf18      	it	ne
   1fb8e:	200f      	movne	r0, #15
}
   1fb90:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1fb92:	f7fe feb4 	bl	1e8fe <bt_conn_get_security>
   1fb96:	2802      	cmp	r0, #2
   1fb98:	d8f6      	bhi.n	1fb88 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1fb9a:	2005      	movs	r0, #5
   1fb9c:	e7f8      	b.n	1fb90 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1fb9e:	2002      	movs	r0, #2
   1fba0:	e7f6      	b.n	1fb90 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1fba2:	2003      	movs	r0, #3
   1fba4:	e7f4      	b.n	1fb90 <bt_gatt_check_perm+0x30>

0001fba6 <gatt_notify>:
{
   1fba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fbaa:	4614      	mov	r4, r2
   1fbac:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1fbae:	2214      	movs	r2, #20
   1fbb0:	6861      	ldr	r1, [r4, #4]
{
   1fbb2:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1fbb4:	f7ff ffd4 	bl	1fb60 <bt_gatt_check_perm>
   1fbb8:	bb08      	cbnz	r0, 1fbfe <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   1fbba:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1fbbc:	211b      	movs	r1, #27
   1fbbe:	3202      	adds	r2, #2
   1fbc0:	4638      	mov	r0, r7
   1fbc2:	f7ff fc19 	bl	1f3f8 <bt_att_create_pdu>
	if (!buf) {
   1fbc6:	4605      	mov	r5, r0
   1fbc8:	b1e8      	cbz	r0, 1fc06 <gatt_notify+0x60>
	return net_buf_simple_add(&buf->b, len);
   1fbca:	f100 0908 	add.w	r9, r0, #8
   1fbce:	2102      	movs	r1, #2
   1fbd0:	4648      	mov	r0, r9
   1fbd2:	f7f6 fd87 	bl	166e4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1fbd6:	4606      	mov	r6, r0
   1fbd8:	89a1      	ldrh	r1, [r4, #12]
   1fbda:	f826 8b02 	strh.w	r8, [r6], #2
   1fbde:	4648      	mov	r0, r9
   1fbe0:	f7f6 fd80 	bl	166e4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1fbe4:	89a2      	ldrh	r2, [r4, #12]
   1fbe6:	68a1      	ldr	r1, [r4, #8]
   1fbe8:	4630      	mov	r0, r6
   1fbea:	f000 ff3e 	bl	20a6a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1fbee:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1fbf2:	4629      	mov	r1, r5
   1fbf4:	4638      	mov	r0, r7
}
   1fbf6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1fbfa:	f7f5 bbcd 	b.w	15398 <bt_att_send>
		return -EPERM;
   1fbfe:	f04f 30ff 	mov.w	r0, #4294967295
}
   1fc02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   1fc06:	f06f 000b 	mvn.w	r0, #11
   1fc0a:	e7fa      	b.n	1fc02 <gatt_notify+0x5c>

0001fc0c <bt_gatt_notification>:
{
   1fc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fc10:	4607      	mov	r7, r0
   1fc12:	4688      	mov	r8, r1
   1fc14:	4691      	mov	r9, r2
   1fc16:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1fc18:	f7f5 fcc4 	bl	155a4 <gatt_sub_find>
	if (!sub) {
   1fc1c:	b1f8      	cbz	r0, 1fc5e <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1fc1e:	6883      	ldr	r3, [r0, #8]
   1fc20:	b1eb      	cbz	r3, 1fc5e <bt_gatt_notification+0x52>
   1fc22:	f1b3 0614 	subs.w	r6, r3, #20
   1fc26:	d01a      	beq.n	1fc5e <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fc28:	681c      	ldr	r4, [r3, #0]
   1fc2a:	b104      	cbz	r4, 1fc2e <bt_gatt_notification+0x22>
   1fc2c:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1fc2e:	8933      	ldrh	r3, [r6, #8]
   1fc30:	4543      	cmp	r3, r8
   1fc32:	d10a      	bne.n	1fc4a <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1fc34:	6835      	ldr	r5, [r6, #0]
   1fc36:	4653      	mov	r3, sl
   1fc38:	464a      	mov	r2, r9
   1fc3a:	4631      	mov	r1, r6
   1fc3c:	4638      	mov	r0, r7
   1fc3e:	47a8      	blx	r5
   1fc40:	b918      	cbnz	r0, 1fc4a <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1fc42:	4631      	mov	r1, r6
   1fc44:	4638      	mov	r0, r7
   1fc46:	f7f6 f8eb 	bl	15e20 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1fc4a:	b144      	cbz	r4, 1fc5e <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fc4c:	f114 0514 	adds.w	r5, r4, #20
   1fc50:	d002      	beq.n	1fc58 <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fc52:	6965      	ldr	r5, [r4, #20]
   1fc54:	b105      	cbz	r5, 1fc58 <bt_gatt_notification+0x4c>
   1fc56:	3d14      	subs	r5, #20
{
   1fc58:	4626      	mov	r6, r4
   1fc5a:	462c      	mov	r4, r5
   1fc5c:	e7e7      	b.n	1fc2e <bt_gatt_notification+0x22>
}
   1fc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001fc62 <bt_gatt_mult_notification>:
{
   1fc62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc66:	b085      	sub	sp, #20
   1fc68:	4681      	mov	r9, r0
   1fc6a:	460c      	mov	r4, r1
   1fc6c:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   1fc6e:	f7f5 fc99 	bl	155a4 <gatt_sub_find>
	if (!sub) {
   1fc72:	4607      	mov	r7, r0
   1fc74:	b140      	cbz	r0, 1fc88 <bt_gatt_mult_notification+0x26>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1fc76:	462a      	mov	r2, r5
   1fc78:	4621      	mov	r1, r4
   1fc7a:	a801      	add	r0, sp, #4
   1fc7c:	f000 f89e 	bl	1fdbc <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1fc80:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1fc84:	2b04      	cmp	r3, #4
   1fc86:	d802      	bhi.n	1fc8e <bt_gatt_mult_notification+0x2c>
}
   1fc88:	b005      	add	sp, #20
   1fc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1fc8e:	2104      	movs	r1, #4
   1fc90:	eb0d 0001 	add.w	r0, sp, r1
   1fc94:	f7f6 fd04 	bl	166a0 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   1fc98:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   1fc9c:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		if (len > buf.len) {
   1fca0:	455b      	cmp	r3, fp
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1fca2:	4605      	mov	r5, r0
		if (len > buf.len) {
   1fca4:	d3f0      	bcc.n	1fc88 <bt_gatt_mult_notification+0x26>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1fca6:	68bb      	ldr	r3, [r7, #8]
   1fca8:	b303      	cbz	r3, 1fcec <bt_gatt_mult_notification+0x8a>
   1fcaa:	f1b3 0614 	subs.w	r6, r3, #20
   1fcae:	d01d      	beq.n	1fcec <bt_gatt_mult_notification+0x8a>
   1fcb0:	681c      	ldr	r4, [r3, #0]
   1fcb2:	b104      	cbz	r4, 1fcb6 <bt_gatt_mult_notification+0x54>
   1fcb4:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   1fcb6:	46a8      	mov	r8, r5
   1fcb8:	f838 ab04 	ldrh.w	sl, [r8], #4
			if (handle != params->value_handle) {
   1fcbc:	8933      	ldrh	r3, [r6, #8]
   1fcbe:	4553      	cmp	r3, sl
   1fcc0:	d10a      	bne.n	1fcd8 <bt_gatt_mult_notification+0x76>
			if (params->notify(conn, params, nfy->value, len) ==
   1fcc2:	6835      	ldr	r5, [r6, #0]
   1fcc4:	465b      	mov	r3, fp
   1fcc6:	4642      	mov	r2, r8
   1fcc8:	4631      	mov	r1, r6
   1fcca:	4648      	mov	r0, r9
   1fccc:	47a8      	blx	r5
   1fcce:	b918      	cbnz	r0, 1fcd8 <bt_gatt_mult_notification+0x76>
				bt_gatt_unsubscribe(conn, params);
   1fcd0:	4631      	mov	r1, r6
   1fcd2:	4648      	mov	r0, r9
   1fcd4:	f7f6 f8a4 	bl	15e20 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1fcd8:	b144      	cbz	r4, 1fcec <bt_gatt_mult_notification+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fcda:	f114 0214 	adds.w	r2, r4, #20
   1fcde:	d002      	beq.n	1fce6 <bt_gatt_mult_notification+0x84>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fce0:	6962      	ldr	r2, [r4, #20]
   1fce2:	b102      	cbz	r2, 1fce6 <bt_gatt_mult_notification+0x84>
   1fce4:	3a14      	subs	r2, #20
{
   1fce6:	4626      	mov	r6, r4
   1fce8:	4614      	mov	r4, r2
   1fcea:	e7e7      	b.n	1fcbc <bt_gatt_mult_notification+0x5a>
		net_buf_simple_pull_mem(&buf, len);
   1fcec:	4659      	mov	r1, fp
   1fcee:	a801      	add	r0, sp, #4
   1fcf0:	f7f6 fcd6 	bl	166a0 <net_buf_simple_pull_mem>
   1fcf4:	e7c4      	b.n	1fc80 <bt_gatt_mult_notification+0x1e>

0001fcf6 <bt_gatt_change_aware>:
{
   1fcf6:	b510      	push	{r4, lr}
   1fcf8:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1fcfa:	f7f5 fc25 	bl	15548 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1fcfe:	4603      	mov	r3, r0
   1fd00:	b910      	cbnz	r0, 1fd08 <bt_gatt_change_aware+0x12>
		return true;
   1fd02:	2401      	movs	r4, #1
}
   1fd04:	4620      	mov	r0, r4
   1fd06:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1fd08:	7a02      	ldrb	r2, [r0, #8]
   1fd0a:	07d2      	lsls	r2, r2, #31
   1fd0c:	d5f9      	bpl.n	1fd02 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fd0e:	f3bf 8f5b 	dmb	ish
   1fd12:	68d9      	ldr	r1, [r3, #12]
   1fd14:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1fd18:	f011 0101 	ands.w	r1, r1, #1
   1fd1c:	f100 000c 	add.w	r0, r0, #12
   1fd20:	d1ef      	bne.n	1fd02 <bt_gatt_change_aware+0xc>
	if (!req) {
   1fd22:	2c00      	cmp	r4, #0
   1fd24:	d0ee      	beq.n	1fd04 <bt_gatt_change_aware+0xe>
   1fd26:	f3bf 8f5b 	dmb	ish
   1fd2a:	68db      	ldr	r3, [r3, #12]
   1fd2c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1fd30:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1fd34:	079b      	lsls	r3, r3, #30
   1fd36:	d50e      	bpl.n	1fd56 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fd38:	f3bf 8f5b 	dmb	ish
   1fd3c:	e850 3f00 	ldrex	r3, [r0]
   1fd40:	f023 0302 	bic.w	r3, r3, #2
   1fd44:	e840 3200 	strex	r2, r3, [r0]
   1fd48:	2a00      	cmp	r2, #0
   1fd4a:	d1f7      	bne.n	1fd3c <bt_gatt_change_aware+0x46>
   1fd4c:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1fd50:	f7ff fdc1 	bl	1f8d6 <atomic_set_bit>
	return false;
   1fd54:	e7d6      	b.n	1fd04 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1fd56:	2101      	movs	r1, #1
   1fd58:	e7fa      	b.n	1fd50 <bt_gatt_change_aware+0x5a>

0001fd5a <bt_smp_recv>:
{
   1fd5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1fd5c:	2100      	movs	r1, #0
   1fd5e:	f04f 32ff 	mov.w	r2, #4294967295
   1fd62:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1fd66:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1fd68:	4608      	mov	r0, r1
   1fd6a:	f7fe fe8d 	bl	1ea88 <bt_l2cap_create_pdu_timeout>
   1fd6e:	f100 0608 	add.w	r6, r0, #8
   1fd72:	4604      	mov	r4, r0
   1fd74:	2101      	movs	r1, #1
   1fd76:	4630      	mov	r0, r6
   1fd78:	f7f6 fcb4 	bl	166e4 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1fd7c:	2505      	movs	r5, #5
   1fd7e:	7005      	strb	r5, [r0, #0]
   1fd80:	2101      	movs	r1, #1
   1fd82:	4630      	mov	r0, r6
   1fd84:	f7f6 fcae 	bl	166e4 <net_buf_simple_add>
   1fd88:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1fd8a:	7005      	strb	r5, [r0, #0]
   1fd8c:	4622      	mov	r2, r4
   1fd8e:	9300      	str	r3, [sp, #0]
   1fd90:	2106      	movs	r1, #6
   1fd92:	4638      	mov	r0, r7
   1fd94:	f7fe fe7b 	bl	1ea8e <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1fd98:	b110      	cbz	r0, 1fda0 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1fd9a:	4620      	mov	r0, r4
   1fd9c:	f7f6 fb72 	bl	16484 <net_buf_unref>
}
   1fda0:	2000      	movs	r0, #0
   1fda2:	b003      	add	sp, #12
   1fda4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fda6 <bt_smp_sign>:
   1fda6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1fdaa:	4770      	bx	lr

0001fdac <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1fdac:	2000      	movs	r0, #0
   1fdae:	4770      	bx	lr

0001fdb0 <fixed_data_unref>:
}
   1fdb0:	4770      	bx	lr

0001fdb2 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fdb2:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1fdb4:	6849      	ldr	r1, [r1, #4]
   1fdb6:	6809      	ldr	r1, [r1, #0]
   1fdb8:	f7f6 ba1c 	b.w	161f4 <net_buf_alloc_len>

0001fdbc <net_buf_simple_init_with_data>:
	buf->size  = size;
   1fdbc:	b292      	uxth	r2, r2
	buf->__buf = data;
   1fdbe:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1fdc0:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1fdc2:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1fdc4:	8082      	strh	r2, [r0, #4]
}
   1fdc6:	4770      	bx	lr

0001fdc8 <net_buf_simple_pull_u8>:
{
   1fdc8:	b510      	push	{r4, lr}
	val = buf->data[0];
   1fdca:	6803      	ldr	r3, [r0, #0]
   1fdcc:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1fdce:	2101      	movs	r1, #1
   1fdd0:	f7f6 fc46 	bl	16660 <net_buf_simple_pull>
}
   1fdd4:	4620      	mov	r0, r4
   1fdd6:	bd10      	pop	{r4, pc}

0001fdd8 <net_buf_simple_pull_le16>:
{
   1fdd8:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1fdda:	6803      	ldr	r3, [r0, #0]
   1fddc:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1fdde:	2102      	movs	r1, #2
   1fde0:	f7f6 fc3e 	bl	16660 <net_buf_simple_pull>
}
   1fde4:	4620      	mov	r0, r4
   1fde6:	bd10      	pop	{r4, pc}

0001fde8 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1fde8:	6802      	ldr	r2, [r0, #0]
   1fdea:	6880      	ldr	r0, [r0, #8]
}
   1fdec:	1a10      	subs	r0, r2, r0
   1fdee:	4770      	bx	lr

0001fdf0 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1fdf0:	8883      	ldrh	r3, [r0, #4]
   1fdf2:	88c2      	ldrh	r2, [r0, #6]
   1fdf4:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1fdf6:	6803      	ldr	r3, [r0, #0]
   1fdf8:	6880      	ldr	r0, [r0, #8]
   1fdfa:	1a18      	subs	r0, r3, r0
}
   1fdfc:	1a10      	subs	r0, r2, r0
   1fdfe:	4770      	bx	lr

0001fe00 <net_buf_simple_add_mem>:
{
   1fe00:	b538      	push	{r3, r4, r5, lr}
   1fe02:	460d      	mov	r5, r1
   1fe04:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1fe06:	4611      	mov	r1, r2
   1fe08:	f7f6 fc6c 	bl	166e4 <net_buf_simple_add>
   1fe0c:	4622      	mov	r2, r4
   1fe0e:	4629      	mov	r1, r5
}
   1fe10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1fe14:	f000 be29 	b.w	20a6a <memcpy>

0001fe18 <net_buf_simple_add_le16>:
{
   1fe18:	b510      	push	{r4, lr}
   1fe1a:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   1fe1c:	2102      	movs	r1, #2
   1fe1e:	f7f6 fc61 	bl	166e4 <net_buf_simple_add>
	dst[0] = val;
   1fe22:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1fe24:	0a24      	lsrs	r4, r4, #8
   1fe26:	7044      	strb	r4, [r0, #1]
}
   1fe28:	bd10      	pop	{r4, pc}

0001fe2a <set_starting_state>:
{
   1fe2a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fe2c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fe30:	f3ef 8211 	mrs	r2, BASEPRI
   1fe34:	f383 8812 	msr	BASEPRI_MAX, r3
   1fe38:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1fe3c:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1fe3e:	f003 0407 	and.w	r4, r3, #7
   1fe42:	2c01      	cmp	r4, #1
   1fe44:	d106      	bne.n	1fe54 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1fe46:	6001      	str	r1, [r0, #0]
	int err = 0;
   1fe48:	2000      	movs	r0, #0
	__asm__ volatile(
   1fe4a:	f382 8811 	msr	BASEPRI, r2
   1fe4e:	f3bf 8f6f 	isb	sy
}
   1fe52:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1fe54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1fe58:	428b      	cmp	r3, r1
		err = -EALREADY;
   1fe5a:	bf14      	ite	ne
   1fe5c:	f04f 30ff 	movne.w	r0, #4294967295
   1fe60:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1fe64:	e7f1      	b.n	1fe4a <set_starting_state+0x20>

0001fe66 <set_on_state>:
	__asm__ volatile(
   1fe66:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fe6a:	f3ef 8211 	mrs	r2, BASEPRI
   1fe6e:	f383 8812 	msr	BASEPRI_MAX, r3
   1fe72:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1fe76:	6803      	ldr	r3, [r0, #0]
   1fe78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1fe7c:	f043 0302 	orr.w	r3, r3, #2
   1fe80:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1fe82:	f382 8811 	msr	BASEPRI, r2
   1fe86:	f3bf 8f6f 	isb	sy
}
   1fe8a:	4770      	bx	lr

0001fe8c <onoff_started_callback>:
	return &data->mgr[type];
   1fe8c:	6900      	ldr	r0, [r0, #16]
   1fe8e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1fe90:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1fe94:	2100      	movs	r1, #0
   1fe96:	4710      	bx	r2

0001fe98 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1fe98:	2000      	movs	r0, #0
   1fe9a:	f7f8 bdff 	b.w	18a9c <nrfx_clock_stop>

0001fe9e <api_stop>:
	return stop(dev, subsys, CTX_API);
   1fe9e:	2280      	movs	r2, #128	; 0x80
   1fea0:	f7f6 bc8a 	b.w	167b8 <stop>

0001fea4 <blocking_start_callback>:
{
   1fea4:	4610      	mov	r0, r2
   1fea6:	f7fa b88b 	b.w	19fc0 <z_impl_k_sem_give>

0001feaa <api_start>:
{
   1feaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1feae:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   1feb0:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1feb2:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   1feb4:	436f      	muls	r7, r5
{
   1feb6:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1feb8:	f107 0048 	add.w	r0, r7, #72	; 0x48
   1febc:	2180      	movs	r1, #128	; 0x80
   1febe:	4420      	add	r0, r4
{
   1fec0:	4690      	mov	r8, r2
   1fec2:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   1fec4:	f7ff ffb1 	bl	1fe2a <set_starting_state>
	if (err < 0) {
   1fec8:	2800      	cmp	r0, #0
   1feca:	db07      	blt.n	1fedc <api_start+0x32>
	subdata->cb = cb;
   1fecc:	443c      	add	r4, r7
	subdata->user_data = user_data;
   1fece:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   1fed2:	6873      	ldr	r3, [r6, #4]
   1fed4:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   1fed8:	4798      	blx	r3
	return 0;
   1feda:	2000      	movs	r0, #0
}
   1fedc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001fee0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fee0:	6843      	ldr	r3, [r0, #4]
   1fee2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1fee4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1fee8:	600b      	str	r3, [r1, #0]
}
   1feea:	2000      	movs	r0, #0
   1feec:	4770      	bx	lr

0001feee <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1feee:	6843      	ldr	r3, [r0, #4]
   1fef0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1fef2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1fef6:	4042      	eors	r2, r0
   1fef8:	400a      	ands	r2, r1
   1fefa:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1fefc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1ff00:	2000      	movs	r0, #0
   1ff02:	4770      	bx	lr

0001ff04 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ff04:	6843      	ldr	r3, [r0, #4]
   1ff06:	685b      	ldr	r3, [r3, #4]
}
   1ff08:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1ff0a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1ff0e:	4770      	bx	lr

0001ff10 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ff10:	6843      	ldr	r3, [r0, #4]
   1ff12:	685b      	ldr	r3, [r3, #4]
}
   1ff14:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1ff16:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1ff1a:	4770      	bx	lr

0001ff1c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ff1c:	6843      	ldr	r3, [r0, #4]
   1ff1e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1ff20:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1ff24:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1ff26:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1ff2a:	2000      	movs	r0, #0
   1ff2c:	4770      	bx	lr

0001ff2e <nrf_gpio_cfg_sense_set>:
{
   1ff2e:	b513      	push	{r0, r1, r4, lr}
   1ff30:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ff32:	a801      	add	r0, sp, #4
{
   1ff34:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ff36:	f7f6 feb1 	bl	16c9c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1ff3a:	9b01      	ldr	r3, [sp, #4]
   1ff3c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1ff40:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1ff44:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1ff48:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   1ff4c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1ff50:	b002      	add	sp, #8
   1ff52:	bd10      	pop	{r4, pc}

0001ff54 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1ff54:	6902      	ldr	r2, [r0, #16]
{
   1ff56:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1ff58:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1ff5c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1ff60:	2000      	movs	r0, #0
   1ff62:	4770      	bx	lr

0001ff64 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1ff64:	6843      	ldr	r3, [r0, #4]
   1ff66:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1ff68:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1ff6c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1ff70:	4770      	bx	lr

0001ff72 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1ff72:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1ff74:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ff76:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1ff7a:	b940      	cbnz	r0, 1ff8e <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1ff7c:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1ff7e:	0712      	lsls	r2, r2, #28
   1ff80:	d406      	bmi.n	1ff90 <is_tx_ready+0x1e>
   1ff82:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1ff86:	3800      	subs	r0, #0
   1ff88:	bf18      	it	ne
   1ff8a:	2001      	movne	r0, #1
   1ff8c:	4770      	bx	lr
   1ff8e:	2001      	movs	r0, #1
}
   1ff90:	4770      	bx	lr

0001ff92 <user_callback>:
	if (data->async->user_callback) {
   1ff92:	6903      	ldr	r3, [r0, #16]
   1ff94:	68da      	ldr	r2, [r3, #12]
   1ff96:	6813      	ldr	r3, [r2, #0]
   1ff98:	b10b      	cbz	r3, 1ff9e <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   1ff9a:	6852      	ldr	r2, [r2, #4]
   1ff9c:	4718      	bx	r3
}
   1ff9e:	4770      	bx	lr

0001ffa0 <notify_uart_rx_rdy>:
{
   1ffa0:	b570      	push	{r4, r5, r6, lr}
   1ffa2:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1ffa4:	6906      	ldr	r6, [r0, #16]
{
   1ffa6:	4604      	mov	r4, r0
   1ffa8:	460d      	mov	r5, r1
	struct uart_event evt = {
   1ffaa:	2214      	movs	r2, #20
   1ffac:	2100      	movs	r1, #0
   1ffae:	a801      	add	r0, sp, #4
   1ffb0:	f000 fd69 	bl	20a86 <memset>
   1ffb4:	2302      	movs	r3, #2
   1ffb6:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   1ffba:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   1ffbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1ffbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1ffc0:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   1ffc2:	a901      	add	r1, sp, #4
   1ffc4:	4620      	mov	r0, r4
	struct uart_event evt = {
   1ffc6:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
   1ffca:	f7ff ffe2 	bl	1ff92 <user_callback>
}
   1ffce:	b006      	add	sp, #24
   1ffd0:	bd70      	pop	{r4, r5, r6, pc}

0001ffd2 <notify_rx_buf_release>:
{
   1ffd2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*buf) {
   1ffd4:	680f      	ldr	r7, [r1, #0]
{
   1ffd6:	b087      	sub	sp, #28
   1ffd8:	4606      	mov	r6, r0
   1ffda:	460c      	mov	r4, r1
   1ffdc:	4615      	mov	r5, r2
	if (*buf) {
   1ffde:	b187      	cbz	r7, 20002 <notify_rx_buf_release+0x30>
		struct uart_event evt = {
   1ffe0:	2100      	movs	r1, #0
   1ffe2:	2214      	movs	r2, #20
   1ffe4:	a801      	add	r0, sp, #4
   1ffe6:	f000 fd4e 	bl	20a86 <memset>
   1ffea:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   1ffec:	eb0d 0103 	add.w	r1, sp, r3
   1fff0:	4630      	mov	r0, r6
		struct uart_event evt = {
   1fff2:	f88d 3004 	strb.w	r3, [sp, #4]
   1fff6:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
   1fff8:	f7ff ffcb 	bl	1ff92 <user_callback>
		if (clear) {
   1fffc:	b10d      	cbz	r5, 20002 <notify_rx_buf_release+0x30>
			*buf = NULL;
   1fffe:	2300      	movs	r3, #0
   20000:	6023      	str	r3, [r4, #0]
}
   20002:	b007      	add	sp, #28
   20004:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020006 <notify_rx_disable>:
{
   20006:	b510      	push	{r4, lr}
   20008:	b086      	sub	sp, #24
   2000a:	4604      	mov	r4, r0
	struct uart_event evt = {
   2000c:	2214      	movs	r2, #20
   2000e:	2100      	movs	r1, #0
   20010:	a801      	add	r0, sp, #4
   20012:	f000 fd38 	bl	20a86 <memset>
   20016:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   20018:	a901      	add	r1, sp, #4
   2001a:	4620      	mov	r0, r4
	struct uart_event evt = {
   2001c:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   20020:	f7ff ffb7 	bl	1ff92 <user_callback>
}
   20024:	b006      	add	sp, #24
   20026:	bd10      	pop	{r4, pc}

00020028 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   20028:	6843      	ldr	r3, [r0, #4]
{
   2002a:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   2002c:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2002e:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
   20030:	f04f 0040 	mov.w	r0, #64	; 0x40
   20034:	f3ef 8511 	mrs	r5, BASEPRI
   20038:	f380 8812 	msr	BASEPRI_MAX, r0
   2003c:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   20040:	68e4      	ldr	r4, [r4, #12]
   20042:	6d20      	ldr	r0, [r4, #80]	; 0x50
   20044:	b190      	cbz	r0, 2006c <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   20046:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   20048:	b998      	cbnz	r0, 20072 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   2004a:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2004e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   20052:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   20056:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2005a:	f042 0220 	orr.w	r2, r2, #32
   2005e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   20062:	f385 8811 	msr	BASEPRI, r5
   20066:	f3bf 8f6f 	isb	sy
}
   2006a:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   2006c:	f06f 000c 	mvn.w	r0, #12
   20070:	e7f7      	b.n	20062 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   20072:	f06f 000f 	mvn.w	r0, #15
   20076:	e7f4      	b.n	20062 <uarte_nrfx_rx_buf_rsp+0x3a>

00020078 <uarte_nrfx_callback_set>:
	if (!data->async) {
   20078:	6903      	ldr	r3, [r0, #16]
   2007a:	68db      	ldr	r3, [r3, #12]
   2007c:	b11b      	cbz	r3, 20086 <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
   2007e:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
   20082:	2000      	movs	r0, #0
   20084:	4770      	bx	lr
		return -ENOTSUP;
   20086:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2008a:	4770      	bx	lr

0002008c <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2008c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2008e:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   20090:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   20092:	681b      	ldr	r3, [r3, #0]
{
   20094:	b510      	push	{r4, lr}
	if (data->async) {
   20096:	b958      	cbnz	r0, 200b0 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20098:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2009c:	b15c      	cbz	r4, 200b6 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   2009e:	7d52      	ldrb	r2, [r2, #21]
   200a0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   200a2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   200a6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   200aa:	2201      	movs	r2, #1
   200ac:	601a      	str	r2, [r3, #0]
}
   200ae:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   200b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   200b4:	e7fb      	b.n	200ae <uarte_nrfx_poll_in+0x22>
		return -1;
   200b6:	f04f 30ff 	mov.w	r0, #4294967295
   200ba:	e7f8      	b.n	200ae <uarte_nrfx_poll_in+0x22>

000200bc <rx_timeout>:
{
   200bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_timer_user_data_get(timer);
   200be:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   200c0:	68f3      	ldr	r3, [r6, #12]
   200c2:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   200c6:	f002 07ff 	and.w	r7, r2, #255	; 0xff
   200ca:	bb32      	cbnz	r2, 2011a <rx_timeout+0x5e>
	const struct device *dev = data->dev;
   200cc:	6835      	ldr	r5, [r6, #0]
	return config->uarte_regs;
   200ce:	686a      	ldr	r2, [r5, #4]
   200d0:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENCLR = mask;
   200d2:	2110      	movs	r1, #16
   200d4:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   200d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
	if (read != data->async->rx_total_byte_cnt) {
   200dc:	6e59      	ldr	r1, [r3, #100]	; 0x64
   200de:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   200e0:	bf1e      	ittt	ne
   200e2:	665a      	strne	r2, [r3, #100]	; 0x64
		data->async->rx_timeout_left = data->async->rx_timeout;
   200e4:	6eda      	ldrne	r2, [r3, #108]	; 0x6c
   200e6:	675a      	strne	r2, [r3, #116]	; 0x74
		    - data->async->rx_total_user_byte_cnt;
   200e8:	e9d3 4219 	ldrd	r4, r2, [r3, #100]	; 0x64
	if (!hw_rx_counting_enabled(data) &&
   200ec:	1aa4      	subs	r4, r4, r2
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   200ee:	bf48      	it	mi
   200f0:	f8c3 20b0 	strmi.w	r2, [r3, #176]	; 0xb0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   200f4:	e9d3 1215 	ldrd	r1, r2, [r3, #84]	; 0x54
		len = 0;
   200f8:	bf48      	it	mi
   200fa:	2400      	movmi	r4, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   200fc:	18a0      	adds	r0, r4, r2
   200fe:	4288      	cmp	r0, r1
   20100:	d90c      	bls.n	2011c <rx_timeout+0x60>
		len = data->async->rx_buf_len - data->async->rx_offset;
   20102:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
   20104:	2c00      	cmp	r4, #0
   20106:	dd03      	ble.n	20110 <rx_timeout+0x54>
		clipped = true;
   20108:	2701      	movs	r7, #1
   2010a:	e00d      	b.n	20128 <rx_timeout+0x6c>
			data->async->rx_timeout_left -=
   2010c:	1a52      	subs	r2, r2, r1
   2010e:	675a      	str	r2, [r3, #116]	; 0x74
	return config->uarte_regs;
   20110:	686b      	ldr	r3, [r5, #4]
   20112:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   20114:	2210      	movs	r2, #16
   20116:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2011a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
   2011c:	2c00      	cmp	r4, #0
   2011e:	d0f7      	beq.n	20110 <rx_timeout+0x54>
				< data->async->rx_timeout_slab)) {
   20120:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
		if (clipped ||
   20124:	428a      	cmp	r2, r1
   20126:	daf1      	bge.n	2010c <rx_timeout+0x50>
			notify_uart_rx_rdy(dev, len);
   20128:	4621      	mov	r1, r4
   2012a:	4628      	mov	r0, r5
   2012c:	f7ff ff38 	bl	1ffa0 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   20130:	68f0      	ldr	r0, [r6, #12]
   20132:	6d83      	ldr	r3, [r0, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   20134:	6e81      	ldr	r1, [r0, #104]	; 0x68
			data->async->rx_offset += len;
   20136:	4423      	add	r3, r4
			data->async->rx_total_user_byte_cnt += len;
   20138:	4421      	add	r1, r4
			data->async->rx_offset += len;
   2013a:	6583      	str	r3, [r0, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   2013c:	6681      	str	r1, [r0, #104]	; 0x68
		if (clipped) {
   2013e:	2f00      	cmp	r7, #0
   20140:	d0e6      	beq.n	20110 <rx_timeout+0x54>
	z_impl_k_timer_stop(timer);
   20142:	3078      	adds	r0, #120	; 0x78
   20144:	f000 fc1b 	bl	2097e <z_impl_k_timer_stop>
}
   20148:	e7e2      	b.n	20110 <rx_timeout+0x54>

0002014a <rx_flush>:
	return config->uarte_regs;
   2014a:	6843      	ldr	r3, [r0, #4]
{
   2014c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   2014e:	681c      	ldr	r4, [r3, #0]
{
   20150:	4615      	mov	r5, r2
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   20152:	f8d4 653c 	ldr.w	r6, [r4, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
   20156:	460b      	mov	r3, r1
   20158:	bb31      	cbnz	r1, 201a8 <rx_flush+0x5e>
   2015a:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
   2015c:	466a      	mov	r2, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2015e:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20162:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   20164:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20168:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
   2016c:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20170:	2101      	movs	r1, #1
   20172:	62e1      	str	r1, [r4, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20174:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   20178:	2900      	cmp	r1, #0
   2017a:	d0fb      	beq.n	20174 <rx_flush+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2017c:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
   20180:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   20184:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
	if (!buf) {
   20188:	b913      	cbnz	r3, 20190 <rx_flush+0x46>
			return rx_amount;
   2018a:	b2c0      	uxtb	r0, r0
}
   2018c:	b002      	add	sp, #8
   2018e:	bd70      	pop	{r4, r5, r6, pc}
	if (rx_amount != prev_rx_amount) {
   20190:	4286      	cmp	r6, r0
   20192:	d1fa      	bne.n	2018a <rx_flush+0x40>
   20194:	441d      	add	r5, r3
	for (int i = 0; i < flush_len; i++) {
   20196:	429d      	cmp	r5, r3
   20198:	d101      	bne.n	2019e <rx_flush+0x54>
	return 0;
   2019a:	2000      	movs	r0, #0
   2019c:	e7f6      	b.n	2018c <rx_flush+0x42>
		if (buf[i] != dirty) {
   2019e:	f813 2b01 	ldrb.w	r2, [r3], #1
   201a2:	2a00      	cmp	r2, #0
   201a4:	d0f7      	beq.n	20196 <rx_flush+0x4c>
   201a6:	e7f0      	b.n	2018a <rx_flush+0x40>
__ssp_bos_icheck3(memset, void *, int)
   201a8:	4618      	mov	r0, r3
   201aa:	2100      	movs	r1, #0
   201ac:	f000 fc6b 	bl	20a86 <memset>
   201b0:	4603      	mov	r3, r0
   201b2:	4602      	mov	r2, r0
   201b4:	e7d3      	b.n	2015e <rx_flush+0x14>

000201b6 <async_uart_release>:
{
   201b6:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   201b8:	6903      	ldr	r3, [r0, #16]
{
   201ba:	4604      	mov	r4, r0
	__asm__ volatile(
   201bc:	f04f 0240 	mov.w	r2, #64	; 0x40
   201c0:	f3ef 8611 	mrs	r6, BASEPRI
   201c4:	f382 8812 	msr	BASEPRI_MAX, r2
   201c8:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   201cc:	68dd      	ldr	r5, [r3, #12]
   201ce:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   201d2:	ea23 0301 	bic.w	r3, r3, r1
   201d6:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	if (!data->async->low_power_mask) {
   201da:	b96b      	cbnz	r3, 201f8 <async_uart_release+0x42>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   201dc:	2902      	cmp	r1, #2
   201de:	d106      	bne.n	201ee <async_uart_release+0x38>
				rx_flush(dev, data->async->rx_flush_buffer,
   201e0:	2205      	movs	r2, #5
   201e2:	f105 01bc 	add.w	r1, r5, #188	; 0xbc
   201e6:	f7ff ffb0 	bl	2014a <rx_flush>
			data->async->rx_flush_cnt =
   201ea:	f885 00c1 	strb.w	r0, [r5, #193]	; 0xc1
	return config->uarte_regs;
   201ee:	6863      	ldr	r3, [r4, #4]
   201f0:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   201f2:	2200      	movs	r2, #0
   201f4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   201f8:	f386 8811 	msr	BASEPRI, r6
   201fc:	f3bf 8f6f 	isb	sy
}
   20200:	bd70      	pop	{r4, r5, r6, pc}

00020202 <uarte_nrfx_tx_abort>:
	return config->uarte_regs;
   20202:	6843      	ldr	r3, [r0, #4]
{
   20204:	b510      	push	{r4, lr}
	return config->uarte_regs;
   20206:	681c      	ldr	r4, [r3, #0]
	if (data->async->tx_buf == NULL) {
   20208:	6903      	ldr	r3, [r0, #16]
   2020a:	68d8      	ldr	r0, [r3, #12]
   2020c:	6883      	ldr	r3, [r0, #8]
   2020e:	b133      	cbz	r3, 2021e <uarte_nrfx_tx_abort+0x1c>
	z_impl_k_timer_stop(timer);
   20210:	3018      	adds	r0, #24
   20212:	f000 fbb4 	bl	2097e <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20216:	2301      	movs	r3, #1
   20218:	60e3      	str	r3, [r4, #12]
	return 0;
   2021a:	2000      	movs	r0, #0
}
   2021c:	bd10      	pop	{r4, pc}
		return -EFAULT;
   2021e:	f06f 000d 	mvn.w	r0, #13
   20222:	e7fb      	b.n	2021c <uarte_nrfx_tx_abort+0x1a>

00020224 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   20224:	6b43      	ldr	r3, [r0, #52]	; 0x34
   20226:	6818      	ldr	r0, [r3, #0]
   20228:	f7ff bfeb 	b.w	20202 <uarte_nrfx_tx_abort>

0002022c <uarte_nrfx_rx_disable>:
{
   2022c:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2022e:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   20230:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   20232:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
   20234:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   20236:	6d03      	ldr	r3, [r0, #80]	; 0x50
   20238:	b1b3      	cbz	r3, 20268 <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   2023a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   2023c:	b153      	cbz	r3, 20254 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2023e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   20242:	f023 0320 	bic.w	r3, r3, #32
   20246:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2024a:	2300      	movs	r3, #0
   2024c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   20250:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   20254:	3078      	adds	r0, #120	; 0x78
   20256:	f000 fb92 	bl	2097e <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2025a:	68eb      	ldr	r3, [r5, #12]
   2025c:	2000      	movs	r0, #0
   2025e:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20262:	2301      	movs	r3, #1
   20264:	6063      	str	r3, [r4, #4]
}
   20266:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   20268:	f06f 000d 	mvn.w	r0, #13
   2026c:	e7fb      	b.n	20266 <uarte_nrfx_rx_disable+0x3a>

0002026e <tx_start>:
{
   2026e:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   20270:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   20272:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   20274:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   20278:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2027c:	2200      	movs	r2, #0
   2027e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   20282:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   20286:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2028a:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2028e:	6862      	ldr	r2, [r4, #4]
   20290:	06d2      	lsls	r2, r2, #27
   20292:	d50f      	bpl.n	202b4 <tx_start+0x46>
	if (data->async) {
   20294:	6902      	ldr	r2, [r0, #16]
   20296:	68d2      	ldr	r2, [r2, #12]
   20298:	b12a      	cbz	r2, 202a6 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2029a:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
   2029e:	f041 0101 	orr.w	r1, r1, #1
   202a2:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   202a6:	2208      	movs	r2, #8
   202a8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   202ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   202b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   202b4:	2201      	movs	r2, #1
   202b6:	609a      	str	r2, [r3, #8]
}
   202b8:	bd10      	pop	{r4, pc}

000202ba <uarte_nrfx_tx>:
{
   202ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   202be:	461c      	mov	r4, r3
	return config->uarte_regs;
   202c0:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   202c2:	6906      	ldr	r6, [r0, #16]
{
   202c4:	4617      	mov	r7, r2
	return config->uarte_regs;
   202c6:	681a      	ldr	r2, [r3, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   202c8:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (!nrfx_is_in_ram(buf)) {
   202cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   202d0:	4605      	mov	r5, r0
	if (!nrfx_is_in_ram(buf)) {
   202d2:	d14e      	bne.n	20372 <uarte_nrfx_tx+0xb8>
	__asm__ volatile(
   202d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   202d8:	f3ef 8811 	mrs	r8, BASEPRI
   202dc:	f383 8812 	msr	BASEPRI_MAX, r3
   202e0:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   202e4:	68f3      	ldr	r3, [r6, #12]
   202e6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   202ea:	f1bc 0f00 	cmp.w	ip, #0
   202ee:	d008      	beq.n	20302 <uarte_nrfx_tx+0x48>
	__asm__ volatile(
   202f0:	f388 8811 	msr	BASEPRI, r8
   202f4:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   202f8:	f06f 000f 	mvn.w	r0, #15
}
   202fc:	b002      	add	sp, #8
   202fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->async->tx_size = len;
   20302:	60df      	str	r7, [r3, #12]
    p_reg->INTENSET = mask;
   20304:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   20308:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	if (!is_tx_ready(dev)) {
   2030c:	f7ff fe31 	bl	1ff72 <is_tx_ready>
   20310:	68f3      	ldr	r3, [r6, #12]
   20312:	bb20      	cbnz	r0, 2035e <uarte_nrfx_tx+0xa4>
		data->async->pend_tx_buf = (uint8_t *)buf;
   20314:	6119      	str	r1, [r3, #16]
   20316:	f388 8811 	msr	BASEPRI, r8
   2031a:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   2031e:	7af3      	ldrb	r3, [r6, #11]
   20320:	2b01      	cmp	r3, #1
   20322:	d11a      	bne.n	2035a <uarte_nrfx_tx+0xa0>
	    && timeout != SYS_FOREVER_MS) {
   20324:	1c63      	adds	r3, r4, #1
   20326:	d018      	beq.n	2035a <uarte_nrfx_tx+0xa0>
		k_timer_start(&data->async->tx_timeout_timer, K_MSEC(timeout),
   20328:	68f5      	ldr	r5, [r6, #12]
   2032a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2032e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   20332:	f240 30e7 	movw	r0, #999	; 0x3e7
   20336:	2100      	movs	r1, #0
   20338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2033c:	2300      	movs	r3, #0
   2033e:	fbc6 0104 	smlal	r0, r1, r6, r4
   20342:	f7df ff1d 	bl	180 <__aeabi_uldivmod>
   20346:	3518      	adds	r5, #24
   20348:	4602      	mov	r2, r0
   2034a:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   2034c:	2000      	movs	r0, #0
   2034e:	2100      	movs	r1, #0
   20350:	e9cd 0100 	strd	r0, r1, [sp]
   20354:	4628      	mov	r0, r5
   20356:	f7fc fa1f 	bl	1c798 <z_impl_k_timer_start>
	return 0;
   2035a:	2000      	movs	r0, #0
   2035c:	e7ce      	b.n	202fc <uarte_nrfx_tx+0x42>
		data->async->tx_amount = -1;
   2035e:	f04f 32ff 	mov.w	r2, #4294967295
   20362:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		data->async->tx_buf = buf;
   20366:	6099      	str	r1, [r3, #8]
		tx_start(dev, buf, len);
   20368:	463a      	mov	r2, r7
   2036a:	4628      	mov	r0, r5
   2036c:	f7ff ff7f 	bl	2026e <tx_start>
   20370:	e7d1      	b.n	20316 <uarte_nrfx_tx+0x5c>
		return -ENOTSUP;
   20372:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20376:	e7c1      	b.n	202fc <uarte_nrfx_tx+0x42>

00020378 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
   20378:	6843      	ldr	r3, [r0, #4]
{
   2037a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return config->uarte_regs;
   2037e:	681d      	ldr	r5, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20380:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
   20384:	b089      	sub	sp, #36	; 0x24
   20386:	4604      	mov	r4, r0
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   20388:	b171      	cbz	r1, 203a8 <uarte_nrfx_isr_async+0x30>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2038a:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2038c:	2200      	movs	r2, #0
   2038e:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   20392:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   20396:	68da      	ldr	r2, [r3, #12]
   20398:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   2039c:	3301      	adds	r3, #1
   2039e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
}
   203a2:	b009      	add	sp, #36	; 0x24
   203a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   203a8:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   203ac:	b313      	cbz	r3, 203f4 <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   203ae:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   203b2:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   203b6:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   203ba:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
   203be:	2214      	movs	r2, #20
   203c0:	a803      	add	r0, sp, #12
   203c2:	f000 fb60 	bl	20a86 <memset>
   203c6:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   203c8:	07f0      	lsls	r0, r6, #31
	struct uart_event evt = {
   203ca:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   203ce:	f100 80f6 	bmi.w	205be <uarte_nrfx_isr_async+0x246>
   203d2:	07b1      	lsls	r1, r6, #30
   203d4:	f100 80f5 	bmi.w	205c2 <uarte_nrfx_isr_async+0x24a>
   203d8:	0772      	lsls	r2, r6, #29
   203da:	f100 80f4 	bmi.w	205c6 <uarte_nrfx_isr_async+0x24e>
   203de:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   203e2:	4620      	mov	r0, r4
   203e4:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   203e6:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   203ea:	f7ff fdd2 	bl	1ff92 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   203ee:	4620      	mov	r0, r4
   203f0:	f7ff ff1c 	bl	2022c <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   203f4:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   203f8:	b37b      	cbz	r3, 2045a <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
   203fa:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   203fe:	06db      	lsls	r3, r3, #27
   20400:	d52b      	bpl.n	2045a <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20402:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   20406:	6927      	ldr	r7, [r4, #16]
   20408:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   2040c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   20410:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
   20412:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
   20414:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
   20416:	2301      	movs	r3, #1
   20418:	f880 30c4 	strb.w	r3, [r0, #196]	; 0xc4
	z_impl_k_timer_stop(timer);
   2041c:	3078      	adds	r0, #120	; 0x78
   2041e:	f000 faae 	bl	2097e <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   20422:	68fa      	ldr	r2, [r7, #12]
    return p_reg->RXD.AMOUNT;
   20424:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
   20428:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
	int rx_len = rx_amount - data->async->rx_offset;
   2042c:	6d90      	ldr	r0, [r2, #88]	; 0x58
	data->async->rx_flush_cnt = 0;
   2042e:	f882 80c1 	strb.w	r8, [r2, #193]	; 0xc1
	int rx_len = rx_amount - data->async->rx_offset;
   20432:	1a1b      	subs	r3, r3, r0
   20434:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   20436:	6e90      	ldr	r0, [r2, #104]	; 0x68
   20438:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2043c:	4408      	add	r0, r1
	if (rx_len > 0) {
   2043e:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   20440:	6690      	str	r0, [r2, #104]	; 0x68
	if (rx_len > 0) {
   20442:	dd02      	ble.n	2044a <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
   20444:	4620      	mov	r0, r4
   20446:	f7ff fdab 	bl	1ffa0 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   2044a:	68f9      	ldr	r1, [r7, #12]
   2044c:	f891 30c2 	ldrb.w	r3, [r1, #194]	; 0xc2
   20450:	2b00      	cmp	r3, #0
   20452:	f040 80ba 	bne.w	205ca <uarte_nrfx_isr_async+0x252>
		data->async->is_in_irq = false;
   20456:	f881 30c4 	strb.w	r3, [r1, #196]	; 0xc4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2045a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   2045e:	b38b      	cbz	r3, 204c4 <uarte_nrfx_isr_async+0x14c>
   20460:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
   20464:	bb71      	cbnz	r1, 204c4 <uarte_nrfx_isr_async+0x14c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20466:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2046a:	6926      	ldr	r6, [r4, #16]
   2046c:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uart_event evt = {
   20470:	2214      	movs	r2, #20
   20472:	a803      	add	r0, sp, #12
   20474:	f000 fb07 	bl	20a86 <memset>
   20478:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   2047a:	a903      	add	r1, sp, #12
   2047c:	4620      	mov	r0, r4
	struct uart_event evt = {
   2047e:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   20482:	f7ff fd86 	bl	1ff92 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_MS) {
   20486:	68f6      	ldr	r6, [r6, #12]
   20488:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   2048a:	1c5f      	adds	r7, r3, #1
   2048c:	d01a      	beq.n	204c4 <uarte_nrfx_isr_async+0x14c>
		data->async->rx_timeout_left = data->async->rx_timeout;
   2048e:	6773      	str	r3, [r6, #116]	; 0x74
			      K_MSEC(data->async->rx_timeout_slab),
   20490:	6f33      	ldr	r3, [r6, #112]	; 0x70
   20492:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   20496:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2049a:	f240 38e7 	movw	r8, #999	; 0x3e7
   2049e:	f04f 0900 	mov.w	r9, #0
   204a2:	fbc0 8901 	smlal	r8, r9, r0, r1
   204a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   204aa:	2300      	movs	r3, #0
   204ac:	4640      	mov	r0, r8
   204ae:	4649      	mov	r1, r9
   204b0:	f7df fe66 	bl	180 <__aeabi_uldivmod>
   204b4:	4602      	mov	r2, r0
   204b6:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   204b8:	e9cd 0100 	strd	r0, r1, [sp]
   204bc:	f106 0078 	add.w	r0, r6, #120	; 0x78
   204c0:	f7fc f96a 	bl	1c798 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   204c4:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   204c8:	b333      	cbz	r3, 20518 <uarte_nrfx_isr_async+0x1a0>
   204ca:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
   204ce:	bb1b      	cbnz	r3, 20518 <uarte_nrfx_isr_async+0x1a0>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   204d0:	6926      	ldr	r6, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   204d2:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
   204d6:	68f1      	ldr	r1, [r6, #12]
   204d8:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   204dc:	2201      	movs	r2, #1
   204de:	3150      	adds	r1, #80	; 0x50
   204e0:	4620      	mov	r0, r4
   204e2:	f7ff fd76 	bl	1ffd2 <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
   204e6:	68f1      	ldr	r1, [r6, #12]
   204e8:	2201      	movs	r2, #1
   204ea:	315c      	adds	r1, #92	; 0x5c
   204ec:	4620      	mov	r0, r4
   204ee:	f7ff fd70 	bl	1ffd2 <notify_rx_buf_release>
	if (!data->async->rx_enabled) {
   204f2:	68f3      	ldr	r3, [r6, #12]
   204f4:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   204f8:	b91a      	cbnz	r2, 20502 <uarte_nrfx_isr_async+0x18a>
		(void)rx_flush(dev, NULL, 0);
   204fa:	4611      	mov	r1, r2
   204fc:	4620      	mov	r0, r4
   204fe:	f7ff fe24 	bl	2014a <rx_flush>
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   20502:	6863      	ldr	r3, [r4, #4]
   20504:	685b      	ldr	r3, [r3, #4]
   20506:	06d8      	lsls	r0, r3, #27
   20508:	d503      	bpl.n	20512 <uarte_nrfx_isr_async+0x19a>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   2050a:	2102      	movs	r1, #2
   2050c:	4620      	mov	r0, r4
   2050e:	f7ff fe52 	bl	201b6 <async_uart_release>
	notify_rx_disable(dev);
   20512:	4620      	mov	r0, r4
   20514:	f7ff fd77 	bl	20006 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20518:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   2051c:	b1db      	cbz	r3, 20556 <uarte_nrfx_isr_async+0x1de>
    return p_reg->INTENSET & mask;
   2051e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   20522:	05d9      	lsls	r1, r3, #23
   20524:	d517      	bpl.n	20556 <uarte_nrfx_isr_async+0x1de>
	return config->uarte_regs;
   20526:	6863      	ldr	r3, [r4, #4]
   20528:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2052a:	f04f 0140 	mov.w	r1, #64	; 0x40
   2052e:	f3ef 8211 	mrs	r2, BASEPRI
   20532:	f381 8812 	msr	BASEPRI_MAX, r1
   20536:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2053a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2053e:	b131      	cbz	r1, 2054e <uarte_nrfx_isr_async+0x1d6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20540:	2100      	movs	r1, #0
   20542:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   20546:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2054a:	2101      	movs	r1, #1
   2054c:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2054e:	f382 8811 	msr	BASEPRI, r2
   20552:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20556:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   2055a:	2b00      	cmp	r3, #0
   2055c:	f43f af21 	beq.w	203a2 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   20560:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   20564:	025a      	lsls	r2, r3, #9
   20566:	f57f af1c 	bpl.w	203a2 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2056a:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2056c:	6926      	ldr	r6, [r4, #16]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2056e:	e9d3 7300 	ldrd	r7, r3, [r3]
   20572:	06db      	lsls	r3, r3, #27
   20574:	d457      	bmi.n	20626 <uarte_nrfx_isr_async+0x2ae>
	if (!data->async->tx_buf) {
   20576:	68f0      	ldr	r0, [r6, #12]
   20578:	6882      	ldr	r2, [r0, #8]
   2057a:	2a00      	cmp	r2, #0
   2057c:	d160      	bne.n	20640 <uarte_nrfx_isr_async+0x2c8>
		if (data->async->pend_tx_buf) {
   2057e:	6903      	ldr	r3, [r0, #16]
   20580:	2b00      	cmp	r3, #0
   20582:	f43f af0e 	beq.w	203a2 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   20586:	f04f 0340 	mov.w	r3, #64	; 0x40
   2058a:	f3ef 8511 	mrs	r5, BASEPRI
   2058e:	f383 8812 	msr	BASEPRI_MAX, r3
   20592:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20596:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
			if (nrf_uarte_event_check(uarte,
   2059a:	b15b      	cbz	r3, 205b4 <uarte_nrfx_isr_async+0x23c>
				data->async->tx_buf = data->async->pend_tx_buf;
   2059c:	68f3      	ldr	r3, [r6, #12]
   2059e:	6919      	ldr	r1, [r3, #16]
				data->async->pend_tx_buf = NULL;
   205a0:	611a      	str	r2, [r3, #16]
				data->async->tx_amount = -1;
   205a2:	f04f 32ff 	mov.w	r2, #4294967295
   205a6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				tx_start(dev, data->async->tx_buf,
   205aa:	68da      	ldr	r2, [r3, #12]
				data->async->tx_buf = data->async->pend_tx_buf;
   205ac:	6099      	str	r1, [r3, #8]
				tx_start(dev, data->async->tx_buf,
   205ae:	4620      	mov	r0, r4
   205b0:	f7ff fe5d 	bl	2026e <tx_start>
	__asm__ volatile(
   205b4:	f385 8811 	msr	BASEPRI, r5
   205b8:	f3bf 8f6f 	isb	sy
}
   205bc:	e6f1      	b.n	203a2 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   205be:	2601      	movs	r6, #1
   205c0:	e70f      	b.n	203e2 <uarte_nrfx_isr_async+0x6a>
   205c2:	2602      	movs	r6, #2
   205c4:	e70d      	b.n	203e2 <uarte_nrfx_isr_async+0x6a>
   205c6:	2604      	movs	r6, #4
   205c8:	e70b      	b.n	203e2 <uarte_nrfx_isr_async+0x6a>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
   205ca:	2200      	movs	r2, #0
   205cc:	3150      	adds	r1, #80	; 0x50
   205ce:	4620      	mov	r0, r4
   205d0:	f7ff fcff 	bl	1ffd2 <notify_rx_buf_release>
	__asm__ volatile(
   205d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   205d8:	f3ef 8111 	mrs	r1, BASEPRI
   205dc:	f383 8812 	msr	BASEPRI_MAX, r3
   205e0:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   205e4:	68fb      	ldr	r3, [r7, #12]
   205e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   205e8:	b1d2      	cbz	r2, 20620 <uarte_nrfx_isr_async+0x2a8>
		data->async->rx_buf = data->async->rx_next_buf;
   205ea:	651a      	str	r2, [r3, #80]	; 0x50
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   205ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   205ee:	655a      	str	r2, [r3, #84]	; 0x54
		data->async->rx_next_buf = NULL;
   205f0:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
   205f2:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
		data->async->rx_offset = 0;
   205f6:	659a      	str	r2, [r3, #88]	; 0x58
   205f8:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   205fc:	b90b      	cbnz	r3, 20602 <uarte_nrfx_isr_async+0x28a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   205fe:	2301      	movs	r3, #1
   20600:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
   20602:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
   20606:	f023 0320 	bic.w	r3, r3, #32
   2060a:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
   2060e:	f381 8811 	msr	BASEPRI, r1
   20612:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   20616:	68fb      	ldr	r3, [r7, #12]
   20618:	2200      	movs	r2, #0
   2061a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
   2061e:	e71c      	b.n	2045a <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20620:	2301      	movs	r3, #1
   20622:	6073      	str	r3, [r6, #4]
}
   20624:	e7f3      	b.n	2060e <uarte_nrfx_isr_async+0x296>
    p_reg->INTENCLR = mask;
   20626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2062a:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   2062e:	2101      	movs	r1, #1
   20630:	4620      	mov	r0, r4
   20632:	f7ff fdc0 	bl	201b6 <async_uart_release>
		if (!data->async->tx_size) {
   20636:	68f3      	ldr	r3, [r6, #12]
   20638:	68db      	ldr	r3, [r3, #12]
   2063a:	2b00      	cmp	r3, #0
   2063c:	d19b      	bne.n	20576 <uarte_nrfx_isr_async+0x1fe>
   2063e:	e6b0      	b.n	203a2 <uarte_nrfx_isr_async+0x2a>
	z_impl_k_timer_stop(timer);
   20640:	3018      	adds	r0, #24
   20642:	f000 f99c 	bl	2097e <z_impl_k_timer_stop>
	__asm__ volatile(
   20646:	f04f 0340 	mov.w	r3, #64	; 0x40
   2064a:	f3ef 8211 	mrs	r2, BASEPRI
   2064e:	f383 8812 	msr	BASEPRI_MAX, r3
   20652:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   20656:	68f3      	ldr	r3, [r6, #12]
   20658:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   2065c:	2900      	cmp	r1, #0
   2065e:	bfac      	ite	ge
   20660:	f8d3 50b4 	ldrge.w	r5, [r3, #180]	; 0xb4
    return p_reg->TXD.AMOUNT;
   20664:	f8d7 554c 	ldrlt.w	r5, [r7, #1356]	; 0x54c
	__asm__ volatile(
   20668:	f382 8811 	msr	BASEPRI, r2
   2066c:	f3bf 8f6f 	isb	sy
	struct uart_event evt = {
   20670:	2214      	movs	r2, #20
   20672:	2100      	movs	r1, #0
   20674:	a803      	add	r0, sp, #12
   20676:	f000 fa06 	bl	20a86 <memset>
		.data.tx.buf = data->async->tx_buf,
   2067a:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   2067c:	689a      	ldr	r2, [r3, #8]
   2067e:	e9cd 2504 	strd	r2, r5, [sp, #16]
	if (amount == data->async->tx_size) {
   20682:	68da      	ldr	r2, [r3, #12]
   20684:	1aad      	subs	r5, r5, r2
   20686:	bf18      	it	ne
   20688:	2501      	movne	r5, #1
    p_reg->INTENCLR = mask;
   2068a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2068e:	f88d 500c 	strb.w	r5, [sp, #12]
   20692:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   20696:	2200      	movs	r2, #0
   20698:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
   2069a:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
   2069c:	a903      	add	r1, sp, #12
   2069e:	4620      	mov	r0, r4
   206a0:	f7ff fc77 	bl	1ff92 <user_callback>
   206a4:	e67d      	b.n	203a2 <uarte_nrfx_isr_async+0x2a>

000206a6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   206a6:	4770      	bx	lr

000206a8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   206a8:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   206aa:	2000      	movs	r0, #0
   206ac:	f7f1 fc92 	bl	11fd4 <sys_arch_reboot>

000206b0 <sdc_assertion_handler>:
	k_oops();
   206b0:	4040      	eors	r0, r0
   206b2:	f380 8811 	msr	BASEPRI, r0
   206b6:	f04f 0003 	mov.w	r0, #3
   206ba:	df02      	svc	2
}
   206bc:	4770      	bx	lr

000206be <m_assert_handler>:
	k_oops();
   206be:	4040      	eors	r0, r0
   206c0:	f380 8811 	msr	BASEPRI, r0
   206c4:	f04f 0003 	mov.w	r0, #3
   206c8:	df02      	svc	2
}
   206ca:	4770      	bx	lr

000206cc <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   206cc:	4668      	mov	r0, sp
   206ce:	f020 0107 	bic.w	r1, r0, #7
   206d2:	468d      	mov	sp, r1
   206d4:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   206d6:	f7e2 f921 	bl	291c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   206da:	f7f0 ffeb 	bl	116b4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   206de:	f7f1 f8d7 	bl	11890 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   206e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   206e6:	4685      	mov	sp, r0
   206e8:	4770      	bx	lr

000206ea <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   206ea:	4668      	mov	r0, sp
   206ec:	f020 0107 	bic.w	r1, r0, #7
   206f0:	468d      	mov	sp, r1
   206f2:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   206f4:	f7e2 f894 	bl	2820 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   206f8:	f7f0 ffdc 	bl	116b4 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   206fc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   20700:	4685      	mov	sp, r0
   20702:	4770      	bx	lr

00020704 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   20704:	4668      	mov	r0, sp
   20706:	f020 0107 	bic.w	r1, r0, #7
   2070a:	468d      	mov	sp, r1
   2070c:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2070e:	f7eb fdea 	bl	c2e6 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   20712:	f7f0 ffcf 	bl	116b4 <_arch_isr_direct_pm>
   20716:	f7f1 f8bb 	bl	11890 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2071a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2071e:	4685      	mov	sp, r0
   20720:	4770      	bx	lr

00020722 <nrfx_clock_enable>:
}
   20722:	4770      	bx	lr

00020724 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   20724:	f7e2 bd0e 	b.w	3144 <MPSL_IRQ_CLOCK_Handler>

00020728 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   20728:	4700      	bx	r0

0002072a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2072a:	f000 b8ef 	b.w	2090c <z_impl_k_busy_wait>

0002072e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2072e:	f7f8 bbd5 	b.w	18edc <_DoInit>

00020732 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   20732:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   20734:	f7ff fffb 	bl	2072e <SEGGER_RTT_Init>

	return 0;
}
   20738:	2000      	movs	r0, #0
   2073a:	bd08      	pop	{r3, pc}

0002073c <z_device_state_init>:
}
   2073c:	4770      	bx	lr

0002073e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2073e:	b138      	cbz	r0, 20750 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   20740:	68c3      	ldr	r3, [r0, #12]
   20742:	8818      	ldrh	r0, [r3, #0]
   20744:	f3c0 0008 	ubfx	r0, r0, #0, #9
   20748:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2074c:	4258      	negs	r0, r3
   2074e:	4158      	adcs	r0, r3
}
   20750:	4770      	bx	lr

00020752 <k_heap_init>:
{
   20752:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   20754:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   20758:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2075c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2075e:	f7ef bee1 	b.w	10524 <sys_heap_init>

00020762 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   20762:	f3ef 8005 	mrs	r0, IPSR
}
   20766:	3800      	subs	r0, #0
   20768:	bf18      	it	ne
   2076a:	2001      	movne	r0, #1
   2076c:	4770      	bx	lr

0002076e <z_impl_k_thread_name_set>:
}
   2076e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   20772:	4770      	bx	lr

00020774 <z_impl_k_thread_start>:
	z_sched_start(thread);
   20774:	f7fa bdca 	b.w	1b30c <z_sched_start>

00020778 <z_pm_save_idle_exit>:
{
   20778:	b508      	push	{r3, lr}
	pm_system_resume();
   2077a:	f7f0 fbc9 	bl	10f10 <pm_system_resume>
}
   2077e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   20782:	f7ff bf90 	b.w	206a6 <sys_clock_idle_exit>

00020786 <z_queue_node_peek>:
{
   20786:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   20788:	4604      	mov	r4, r0
   2078a:	b130      	cbz	r0, 2079a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2078c:	6802      	ldr	r2, [r0, #0]
   2078e:	0793      	lsls	r3, r2, #30
   20790:	d003      	beq.n	2079a <z_queue_node_peek+0x14>
		ret = anode->data;
   20792:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   20794:	b109      	cbz	r1, 2079a <z_queue_node_peek+0x14>
			k_free(anode);
   20796:	f000 f952 	bl	20a3e <k_free>
}
   2079a:	4620      	mov	r0, r4
   2079c:	bd10      	pop	{r4, pc}

0002079e <z_impl_k_queue_init>:
	list->head = NULL;
   2079e:	2300      	movs	r3, #0
	list->tail = NULL;
   207a0:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   207a4:	6083      	str	r3, [r0, #8]
   207a6:	f100 030c 	add.w	r3, r0, #12
   207aa:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   207ae:	f100 0314 	add.w	r3, r0, #20
   207b2:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   207b6:	4770      	bx	lr

000207b8 <k_queue_append>:
{
   207b8:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   207ba:	2301      	movs	r3, #1
   207bc:	9300      	str	r3, [sp, #0]
   207be:	2300      	movs	r3, #0
{
   207c0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   207c2:	4619      	mov	r1, r3
   207c4:	f7f9 fa98 	bl	19cf8 <queue_insert>
}
   207c8:	b003      	add	sp, #12
   207ca:	f85d fb04 	ldr.w	pc, [sp], #4

000207ce <k_queue_prepend>:
{
   207ce:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   207d0:	2300      	movs	r3, #0
{
   207d2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   207d4:	9300      	str	r3, [sp, #0]
   207d6:	4619      	mov	r1, r3
   207d8:	f7f9 fa8e 	bl	19cf8 <queue_insert>
}
   207dc:	b003      	add	sp, #12
   207de:	f85d fb04 	ldr.w	pc, [sp], #4

000207e2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   207e2:	b15a      	cbz	r2, 207fc <z_impl_k_sem_init+0x1a>
   207e4:	428a      	cmp	r2, r1
   207e6:	d309      	bcc.n	207fc <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   207e8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   207ec:	e9c0 1202 	strd	r1, r2, [r0, #8]
   207f0:	e9c0 0000 	strd	r0, r0, [r0]
   207f4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   207f8:	2000      	movs	r0, #0
   207fa:	4770      	bx	lr
		return -EINVAL;
   207fc:	f06f 0015 	mvn.w	r0, #21
}
   20800:	4770      	bx	lr

00020802 <notify_queue_locked>:
	if (queue != NULL) {
   20802:	b120      	cbz	r0, 2080e <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   20804:	2200      	movs	r2, #0
   20806:	4611      	mov	r1, r2
   20808:	3088      	adds	r0, #136	; 0x88
   2080a:	f7fb bb97 	b.w	1bf3c <z_sched_wake>
}
   2080e:	4770      	bx	lr

00020810 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   20810:	68c3      	ldr	r3, [r0, #12]
{
   20812:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   20814:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   20818:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2081c:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   2081e:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   20820:	d502      	bpl.n	20828 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   20822:	3010      	adds	r0, #16
   20824:	f7fb fd32 	bl	1c28c <z_abort_timeout>
}
   20828:	4620      	mov	r0, r4
   2082a:	bd10      	pop	{r4, pc}

0002082c <cancel_async_locked>:
{
   2082c:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2082e:	68c0      	ldr	r0, [r0, #12]
{
   20830:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20832:	0784      	lsls	r4, r0, #30
   20834:	f3c0 0140 	ubfx	r1, r0, #1, #1
   20838:	d416      	bmi.n	20868 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   2083a:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2083e:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   20840:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   20842:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   20844:	d510      	bpl.n	20868 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20846:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   2084a:	b168      	cbz	r0, 20868 <cancel_async_locked+0x3c>
   2084c:	4283      	cmp	r3, r0
   2084e:	d11d      	bne.n	2088c <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   20850:	6818      	ldr	r0, [r3, #0]
   20852:	b999      	cbnz	r1, 2087c <cancel_async_locked+0x50>
   20854:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   20858:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2085c:	428b      	cmp	r3, r1
   2085e:	d101      	bne.n	20864 <cancel_async_locked+0x38>
	list->tail = node;
   20860:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   20864:	2200      	movs	r2, #0
   20866:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   20868:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   2086a:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   2086e:	bf1e      	ittt	ne
   20870:	f042 0202 	orrne.w	r2, r2, #2
   20874:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   20876:	f002 000f 	andne.w	r0, r2, #15
}
   2087a:	bd10      	pop	{r4, pc}
   2087c:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2087e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   20882:	4283      	cmp	r3, r0
	list->tail = node;
   20884:	bf08      	it	eq
   20886:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   2088a:	e7eb      	b.n	20864 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2088c:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2088e:	6800      	ldr	r0, [r0, #0]
   20890:	e7db      	b.n	2084a <cancel_async_locked+0x1e>

00020892 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   20892:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   20896:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2089a:	4283      	cmp	r3, r0
		return b2 - b1;
   2089c:	bf14      	ite	ne
   2089e:	1ac0      	subne	r0, r0, r3
	return 0;
   208a0:	2000      	moveq	r0, #0
}
   208a2:	4770      	bx	lr

000208a4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   208a4:	4603      	mov	r3, r0
   208a6:	b920      	cbnz	r0, 208b2 <z_reschedule_irqlock+0xe>
   208a8:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   208ac:	b90a      	cbnz	r2, 208b2 <z_reschedule_irqlock+0xe>
   208ae:	f7f0 bf2f 	b.w	11710 <arch_swap>
   208b2:	f383 8811 	msr	BASEPRI, r3
   208b6:	f3bf 8f6f 	isb	sy
}
   208ba:	4770      	bx	lr

000208bc <z_reschedule_unlocked>:
	__asm__ volatile(
   208bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   208c0:	f3ef 8011 	mrs	r0, BASEPRI
   208c4:	f383 8812 	msr	BASEPRI_MAX, r3
   208c8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   208cc:	f7ff bfea 	b.w	208a4 <z_reschedule_irqlock>

000208d0 <z_priq_dumb_best>:
{
   208d0:	4603      	mov	r3, r0
	return list->head == list;
   208d2:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   208d4:	4283      	cmp	r3, r0
   208d6:	d003      	beq.n	208e0 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   208d8:	2800      	cmp	r0, #0
   208da:	bf38      	it	cc
   208dc:	2000      	movcc	r0, #0
   208de:	4770      	bx	lr
	struct k_thread *thread = NULL;
   208e0:	2000      	movs	r0, #0
}
   208e2:	4770      	bx	lr

000208e4 <z_unpend_all>:
{
   208e4:	b538      	push	{r3, r4, r5, lr}
   208e6:	4605      	mov	r5, r0
	int need_sched = 0;
   208e8:	2000      	movs	r0, #0
	return list->head == list;
   208ea:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   208ec:	42a5      	cmp	r5, r4
   208ee:	d000      	beq.n	208f2 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   208f0:	b904      	cbnz	r4, 208f4 <z_unpend_all+0x10>
}
   208f2:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   208f4:	4620      	mov	r0, r4
   208f6:	f7fa fb1d 	bl	1af34 <z_unpend_thread>
		z_ready_thread(thread);
   208fa:	4620      	mov	r0, r4
   208fc:	f7fa fcbe 	bl	1b27c <z_ready_thread>
		need_sched = 1;
   20900:	2001      	movs	r0, #1
   20902:	e7f2      	b.n	208ea <z_unpend_all+0x6>

00020904 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   20904:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   20906:	f7fb fe73 	bl	1c5f0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2090a:	bd08      	pop	{r3, pc}

0002090c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2090c:	b108      	cbz	r0, 20912 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2090e:	f7f1 bb77 	b.w	12000 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   20912:	4770      	bx	lr

00020914 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   20914:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20916:	1c4b      	adds	r3, r1, #1
   20918:	bf08      	it	eq
   2091a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2091e:	4604      	mov	r4, r0
   20920:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20922:	d013      	beq.n	2094c <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20924:	ea54 0105 	orrs.w	r1, r4, r5
   20928:	d103      	bne.n	20932 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2092a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2092e:	f7fb be5f 	b.w	1c5f0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   20932:	f06f 0101 	mvn.w	r1, #1
   20936:	1a0a      	subs	r2, r1, r0
   20938:	f04f 31ff 	mov.w	r1, #4294967295
   2093c:	eb61 0305 	sbc.w	r3, r1, r5
   20940:	2a00      	cmp	r2, #0
   20942:	f173 0100 	sbcs.w	r1, r3, #0
   20946:	db02      	blt.n	2094e <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   20948:	4610      	mov	r0, r2
   2094a:	4619      	mov	r1, r3
}
   2094c:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   2094e:	f7fb fe4f 	bl	1c5f0 <sys_clock_tick_get>
   20952:	2c01      	cmp	r4, #1
   20954:	f175 0300 	sbcs.w	r3, r5, #0
   20958:	bfbc      	itt	lt
   2095a:	2401      	movlt	r4, #1
   2095c:	2500      	movlt	r5, #0
   2095e:	1820      	adds	r0, r4, r0
   20960:	eb45 0101 	adc.w	r1, r5, r1
   20964:	e7f2      	b.n	2094c <sys_clock_timeout_end_calc+0x38>

00020966 <k_timer_init>:
	timer->status = 0U;
   20966:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   20968:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2096c:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   20970:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   20974:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   20978:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2097a:	6343      	str	r3, [r0, #52]	; 0x34
}
   2097c:	4770      	bx	lr

0002097e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2097e:	b510      	push	{r4, lr}
   20980:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   20982:	f7fb fc83 	bl	1c28c <z_abort_timeout>

	if (inactive) {
   20986:	b9b0      	cbnz	r0, 209b6 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   20988:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2098a:	b10b      	cbz	r3, 20990 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2098c:	4620      	mov	r0, r4
   2098e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   20990:	f104 0018 	add.w	r0, r4, #24
   20994:	f7fa ffd6 	bl	1b944 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   20998:	b168      	cbz	r0, 209b6 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2099a:	f7fa fc6f 	bl	1b27c <z_ready_thread>
   2099e:	f04f 0340 	mov.w	r3, #64	; 0x40
   209a2:	f3ef 8011 	mrs	r0, BASEPRI
   209a6:	f383 8812 	msr	BASEPRI_MAX, r3
   209aa:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   209ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   209b2:	f7ff bf77 	b.w	208a4 <z_reschedule_irqlock>
   209b6:	bd10      	pop	{r4, pc}

000209b8 <add_event>:
{
   209b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   209ba:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   209bc:	e9d0 2300 	ldrd	r2, r3, [r0]
   209c0:	4290      	cmp	r0, r2
   209c2:	4604      	mov	r4, r0
   209c4:	460d      	mov	r5, r1
   209c6:	d105      	bne.n	209d4 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   209c8:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   209ca:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   209ce:	601d      	str	r5, [r3, #0]
	list->tail = node;
   209d0:	6065      	str	r5, [r4, #4]
}
   209d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   209d4:	2b00      	cmp	r3, #0
   209d6:	d0f7      	beq.n	209c8 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   209d8:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   209da:	b100      	cbz	r0, 209de <add_event+0x26>
   209dc:	3860      	subs	r0, #96	; 0x60
   209de:	b107      	cbz	r7, 209e2 <add_event+0x2a>
   209e0:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   209e2:	4639      	mov	r1, r7
   209e4:	f7ff ff55 	bl	20892 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   209e8:	2800      	cmp	r0, #0
   209ea:	dced      	bgt.n	209c8 <add_event+0x10>
	return list->head == list;
   209ec:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   209ee:	42b4      	cmp	r4, r6
   209f0:	d0ea      	beq.n	209c8 <add_event+0x10>
   209f2:	2e00      	cmp	r6, #0
   209f4:	bf38      	it	cc
   209f6:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   209f8:	2e00      	cmp	r6, #0
   209fa:	d0e5      	beq.n	209c8 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   209fc:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   209fe:	b101      	cbz	r1, 20a02 <add_event+0x4a>
   20a00:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   20a02:	4638      	mov	r0, r7
   20a04:	f7ff ff45 	bl	20892 <z_sched_prio_cmp>
   20a08:	2800      	cmp	r0, #0
   20a0a:	dd05      	ble.n	20a18 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   20a0c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   20a0e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   20a12:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   20a14:	6075      	str	r5, [r6, #4]
			return;
   20a16:	e7dc      	b.n	209d2 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   20a18:	6863      	ldr	r3, [r4, #4]
   20a1a:	42b3      	cmp	r3, r6
   20a1c:	d0d4      	beq.n	209c8 <add_event+0x10>
   20a1e:	6836      	ldr	r6, [r6, #0]
   20a20:	e7ea      	b.n	209f8 <add_event+0x40>

00020a22 <z_handle_obj_poll_events>:
{
   20a22:	4603      	mov	r3, r0
	return list->head == list;
   20a24:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   20a26:	4283      	cmp	r3, r0
   20a28:	d008      	beq.n	20a3c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   20a2a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   20a2e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20a30:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20a32:	2300      	movs	r3, #0
	node->prev = NULL;
   20a34:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   20a38:	f7fc b8fe 	b.w	1cc38 <signal_poll_event>
}
   20a3c:	4770      	bx	lr

00020a3e <k_free>:
	if (ptr != NULL) {
   20a3e:	b120      	cbz	r0, 20a4a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   20a40:	1f01      	subs	r1, r0, #4
   20a42:	f850 0c04 	ldr.w	r0, [r0, #-4]
   20a46:	f7f8 bc9b 	b.w	19380 <k_heap_free>
}
   20a4a:	4770      	bx	lr

00020a4c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   20a4c:	4770      	bx	lr

00020a4e <memcmp>:
   20a4e:	b530      	push	{r4, r5, lr}
   20a50:	3901      	subs	r1, #1
   20a52:	2400      	movs	r4, #0
   20a54:	42a2      	cmp	r2, r4
   20a56:	d101      	bne.n	20a5c <memcmp+0xe>
   20a58:	2000      	movs	r0, #0
   20a5a:	e005      	b.n	20a68 <memcmp+0x1a>
   20a5c:	5d03      	ldrb	r3, [r0, r4]
   20a5e:	3401      	adds	r4, #1
   20a60:	5d0d      	ldrb	r5, [r1, r4]
   20a62:	42ab      	cmp	r3, r5
   20a64:	d0f6      	beq.n	20a54 <memcmp+0x6>
   20a66:	1b58      	subs	r0, r3, r5
   20a68:	bd30      	pop	{r4, r5, pc}

00020a6a <memcpy>:
   20a6a:	440a      	add	r2, r1
   20a6c:	4291      	cmp	r1, r2
   20a6e:	f100 33ff 	add.w	r3, r0, #4294967295
   20a72:	d100      	bne.n	20a76 <memcpy+0xc>
   20a74:	4770      	bx	lr
   20a76:	b510      	push	{r4, lr}
   20a78:	f811 4b01 	ldrb.w	r4, [r1], #1
   20a7c:	f803 4f01 	strb.w	r4, [r3, #1]!
   20a80:	4291      	cmp	r1, r2
   20a82:	d1f9      	bne.n	20a78 <memcpy+0xe>
   20a84:	bd10      	pop	{r4, pc}

00020a86 <memset>:
   20a86:	4402      	add	r2, r0
   20a88:	4603      	mov	r3, r0
   20a8a:	4293      	cmp	r3, r2
   20a8c:	d100      	bne.n	20a90 <memset+0xa>
   20a8e:	4770      	bx	lr
   20a90:	f803 1b01 	strb.w	r1, [r3], #1
   20a94:	e7f9      	b.n	20a8a <memset+0x4>

00020a96 <strcpy>:
   20a96:	4603      	mov	r3, r0
   20a98:	f811 2b01 	ldrb.w	r2, [r1], #1
   20a9c:	f803 2b01 	strb.w	r2, [r3], #1
   20aa0:	2a00      	cmp	r2, #0
   20aa2:	d1f9      	bne.n	20a98 <strcpy+0x2>
   20aa4:	4770      	bx	lr

00020aa6 <strncmp>:
   20aa6:	b510      	push	{r4, lr}
   20aa8:	b16a      	cbz	r2, 20ac6 <strncmp+0x20>
   20aaa:	3901      	subs	r1, #1
   20aac:	1884      	adds	r4, r0, r2
   20aae:	f810 3b01 	ldrb.w	r3, [r0], #1
   20ab2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   20ab6:	4293      	cmp	r3, r2
   20ab8:	d103      	bne.n	20ac2 <strncmp+0x1c>
   20aba:	42a0      	cmp	r0, r4
   20abc:	d001      	beq.n	20ac2 <strncmp+0x1c>
   20abe:	2b00      	cmp	r3, #0
   20ac0:	d1f5      	bne.n	20aae <strncmp+0x8>
   20ac2:	1a98      	subs	r0, r3, r2
   20ac4:	bd10      	pop	{r4, pc}
   20ac6:	4610      	mov	r0, r2
   20ac8:	e7fc      	b.n	20ac4 <strncmp+0x1e>

00020aca <strnlen>:
   20aca:	b510      	push	{r4, lr}
   20acc:	4602      	mov	r2, r0
   20ace:	4401      	add	r1, r0
   20ad0:	428a      	cmp	r2, r1
   20ad2:	4613      	mov	r3, r2
   20ad4:	d101      	bne.n	20ada <strnlen+0x10>
   20ad6:	1a18      	subs	r0, r3, r0
   20ad8:	bd10      	pop	{r4, pc}
   20ada:	781c      	ldrb	r4, [r3, #0]
   20adc:	3201      	adds	r2, #1
   20ade:	2c00      	cmp	r4, #0
   20ae0:	d1f6      	bne.n	20ad0 <strnlen+0x6>
   20ae2:	e7f8      	b.n	20ad6 <strnlen+0xc>

00020ae4 <__ssputs_r>:
   20ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20ae8:	688e      	ldr	r6, [r1, #8]
   20aea:	429e      	cmp	r6, r3
   20aec:	4682      	mov	sl, r0
   20aee:	460c      	mov	r4, r1
   20af0:	4690      	mov	r8, r2
   20af2:	461f      	mov	r7, r3
   20af4:	d838      	bhi.n	20b68 <__ssputs_r+0x84>
   20af6:	898a      	ldrh	r2, [r1, #12]
   20af8:	f412 6f90 	tst.w	r2, #1152	; 0x480
   20afc:	d032      	beq.n	20b64 <__ssputs_r+0x80>
   20afe:	6825      	ldr	r5, [r4, #0]
   20b00:	6909      	ldr	r1, [r1, #16]
   20b02:	eba5 0901 	sub.w	r9, r5, r1
   20b06:	6965      	ldr	r5, [r4, #20]
   20b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   20b0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   20b10:	3301      	adds	r3, #1
   20b12:	444b      	add	r3, r9
   20b14:	106d      	asrs	r5, r5, #1
   20b16:	429d      	cmp	r5, r3
   20b18:	bf38      	it	cc
   20b1a:	461d      	movcc	r5, r3
   20b1c:	0553      	lsls	r3, r2, #21
   20b1e:	d531      	bpl.n	20b84 <__ssputs_r+0xa0>
   20b20:	4629      	mov	r1, r5
   20b22:	f7fc fb4d 	bl	1d1c0 <_malloc_r>
   20b26:	4606      	mov	r6, r0
   20b28:	b950      	cbnz	r0, 20b40 <__ssputs_r+0x5c>
   20b2a:	230c      	movs	r3, #12
   20b2c:	f8ca 3000 	str.w	r3, [sl]
   20b30:	89a3      	ldrh	r3, [r4, #12]
   20b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20b36:	81a3      	strh	r3, [r4, #12]
   20b38:	f04f 30ff 	mov.w	r0, #4294967295
   20b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20b40:	6921      	ldr	r1, [r4, #16]
   20b42:	464a      	mov	r2, r9
   20b44:	f7ff ff91 	bl	20a6a <memcpy>
   20b48:	89a3      	ldrh	r3, [r4, #12]
   20b4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   20b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   20b52:	81a3      	strh	r3, [r4, #12]
   20b54:	6126      	str	r6, [r4, #16]
   20b56:	6165      	str	r5, [r4, #20]
   20b58:	444e      	add	r6, r9
   20b5a:	eba5 0509 	sub.w	r5, r5, r9
   20b5e:	6026      	str	r6, [r4, #0]
   20b60:	60a5      	str	r5, [r4, #8]
   20b62:	463e      	mov	r6, r7
   20b64:	42be      	cmp	r6, r7
   20b66:	d900      	bls.n	20b6a <__ssputs_r+0x86>
   20b68:	463e      	mov	r6, r7
   20b6a:	4632      	mov	r2, r6
   20b6c:	6820      	ldr	r0, [r4, #0]
   20b6e:	4641      	mov	r1, r8
   20b70:	f000 f880 	bl	20c74 <memmove>
   20b74:	68a3      	ldr	r3, [r4, #8]
   20b76:	6822      	ldr	r2, [r4, #0]
   20b78:	1b9b      	subs	r3, r3, r6
   20b7a:	4432      	add	r2, r6
   20b7c:	60a3      	str	r3, [r4, #8]
   20b7e:	6022      	str	r2, [r4, #0]
   20b80:	2000      	movs	r0, #0
   20b82:	e7db      	b.n	20b3c <__ssputs_r+0x58>
   20b84:	462a      	mov	r2, r5
   20b86:	f000 f88f 	bl	20ca8 <_realloc_r>
   20b8a:	4606      	mov	r6, r0
   20b8c:	2800      	cmp	r0, #0
   20b8e:	d1e1      	bne.n	20b54 <__ssputs_r+0x70>
   20b90:	6921      	ldr	r1, [r4, #16]
   20b92:	4650      	mov	r0, sl
   20b94:	f7fc fac6 	bl	1d124 <_free_r>
   20b98:	e7c7      	b.n	20b2a <__ssputs_r+0x46>

00020b9a <_printf_common>:
   20b9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20b9e:	4616      	mov	r6, r2
   20ba0:	4699      	mov	r9, r3
   20ba2:	688a      	ldr	r2, [r1, #8]
   20ba4:	690b      	ldr	r3, [r1, #16]
   20ba6:	f8dd 8020 	ldr.w	r8, [sp, #32]
   20baa:	4293      	cmp	r3, r2
   20bac:	bfb8      	it	lt
   20bae:	4613      	movlt	r3, r2
   20bb0:	6033      	str	r3, [r6, #0]
   20bb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   20bb6:	4607      	mov	r7, r0
   20bb8:	460c      	mov	r4, r1
   20bba:	b10a      	cbz	r2, 20bc0 <_printf_common+0x26>
   20bbc:	3301      	adds	r3, #1
   20bbe:	6033      	str	r3, [r6, #0]
   20bc0:	6823      	ldr	r3, [r4, #0]
   20bc2:	0699      	lsls	r1, r3, #26
   20bc4:	bf42      	ittt	mi
   20bc6:	6833      	ldrmi	r3, [r6, #0]
   20bc8:	3302      	addmi	r3, #2
   20bca:	6033      	strmi	r3, [r6, #0]
   20bcc:	6825      	ldr	r5, [r4, #0]
   20bce:	f015 0506 	ands.w	r5, r5, #6
   20bd2:	d106      	bne.n	20be2 <_printf_common+0x48>
   20bd4:	f104 0a19 	add.w	sl, r4, #25
   20bd8:	68e3      	ldr	r3, [r4, #12]
   20bda:	6832      	ldr	r2, [r6, #0]
   20bdc:	1a9b      	subs	r3, r3, r2
   20bde:	42ab      	cmp	r3, r5
   20be0:	dc26      	bgt.n	20c30 <_printf_common+0x96>
   20be2:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   20be6:	1e13      	subs	r3, r2, #0
   20be8:	6822      	ldr	r2, [r4, #0]
   20bea:	bf18      	it	ne
   20bec:	2301      	movne	r3, #1
   20bee:	0692      	lsls	r2, r2, #26
   20bf0:	d42b      	bmi.n	20c4a <_printf_common+0xb0>
   20bf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
   20bf6:	4649      	mov	r1, r9
   20bf8:	4638      	mov	r0, r7
   20bfa:	47c0      	blx	r8
   20bfc:	3001      	adds	r0, #1
   20bfe:	d01e      	beq.n	20c3e <_printf_common+0xa4>
   20c00:	6823      	ldr	r3, [r4, #0]
   20c02:	68e5      	ldr	r5, [r4, #12]
   20c04:	6832      	ldr	r2, [r6, #0]
   20c06:	f003 0306 	and.w	r3, r3, #6
   20c0a:	2b04      	cmp	r3, #4
   20c0c:	bf08      	it	eq
   20c0e:	1aad      	subeq	r5, r5, r2
   20c10:	68a3      	ldr	r3, [r4, #8]
   20c12:	6922      	ldr	r2, [r4, #16]
   20c14:	bf0c      	ite	eq
   20c16:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   20c1a:	2500      	movne	r5, #0
   20c1c:	4293      	cmp	r3, r2
   20c1e:	bfc4      	itt	gt
   20c20:	1a9b      	subgt	r3, r3, r2
   20c22:	18ed      	addgt	r5, r5, r3
   20c24:	2600      	movs	r6, #0
   20c26:	341a      	adds	r4, #26
   20c28:	42b5      	cmp	r5, r6
   20c2a:	d11a      	bne.n	20c62 <_printf_common+0xc8>
   20c2c:	2000      	movs	r0, #0
   20c2e:	e008      	b.n	20c42 <_printf_common+0xa8>
   20c30:	2301      	movs	r3, #1
   20c32:	4652      	mov	r2, sl
   20c34:	4649      	mov	r1, r9
   20c36:	4638      	mov	r0, r7
   20c38:	47c0      	blx	r8
   20c3a:	3001      	adds	r0, #1
   20c3c:	d103      	bne.n	20c46 <_printf_common+0xac>
   20c3e:	f04f 30ff 	mov.w	r0, #4294967295
   20c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20c46:	3501      	adds	r5, #1
   20c48:	e7c6      	b.n	20bd8 <_printf_common+0x3e>
   20c4a:	18e1      	adds	r1, r4, r3
   20c4c:	1c5a      	adds	r2, r3, #1
   20c4e:	2030      	movs	r0, #48	; 0x30
   20c50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   20c54:	4422      	add	r2, r4
   20c56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   20c5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   20c5e:	3302      	adds	r3, #2
   20c60:	e7c7      	b.n	20bf2 <_printf_common+0x58>
   20c62:	2301      	movs	r3, #1
   20c64:	4622      	mov	r2, r4
   20c66:	4649      	mov	r1, r9
   20c68:	4638      	mov	r0, r7
   20c6a:	47c0      	blx	r8
   20c6c:	3001      	adds	r0, #1
   20c6e:	d0e6      	beq.n	20c3e <_printf_common+0xa4>
   20c70:	3601      	adds	r6, #1
   20c72:	e7d9      	b.n	20c28 <_printf_common+0x8e>

00020c74 <memmove>:
   20c74:	4288      	cmp	r0, r1
   20c76:	b510      	push	{r4, lr}
   20c78:	eb01 0402 	add.w	r4, r1, r2
   20c7c:	d902      	bls.n	20c84 <memmove+0x10>
   20c7e:	4284      	cmp	r4, r0
   20c80:	4623      	mov	r3, r4
   20c82:	d807      	bhi.n	20c94 <memmove+0x20>
   20c84:	1e43      	subs	r3, r0, #1
   20c86:	42a1      	cmp	r1, r4
   20c88:	d008      	beq.n	20c9c <memmove+0x28>
   20c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
   20c8e:	f803 2f01 	strb.w	r2, [r3, #1]!
   20c92:	e7f8      	b.n	20c86 <memmove+0x12>
   20c94:	4402      	add	r2, r0
   20c96:	4601      	mov	r1, r0
   20c98:	428a      	cmp	r2, r1
   20c9a:	d100      	bne.n	20c9e <memmove+0x2a>
   20c9c:	bd10      	pop	{r4, pc}
   20c9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   20ca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   20ca6:	e7f7      	b.n	20c98 <memmove+0x24>

00020ca8 <_realloc_r>:
   20ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20caa:	4607      	mov	r7, r0
   20cac:	4614      	mov	r4, r2
   20cae:	460e      	mov	r6, r1
   20cb0:	b921      	cbnz	r1, 20cbc <_realloc_r+0x14>
   20cb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20cb6:	4611      	mov	r1, r2
   20cb8:	f7fc ba82 	b.w	1d1c0 <_malloc_r>
   20cbc:	b922      	cbnz	r2, 20cc8 <_realloc_r+0x20>
   20cbe:	f7fc fa31 	bl	1d124 <_free_r>
   20cc2:	4625      	mov	r5, r4
   20cc4:	4628      	mov	r0, r5
   20cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20cc8:	f000 f814 	bl	20cf4 <_malloc_usable_size_r>
   20ccc:	42a0      	cmp	r0, r4
   20cce:	d20f      	bcs.n	20cf0 <_realloc_r+0x48>
   20cd0:	4621      	mov	r1, r4
   20cd2:	4638      	mov	r0, r7
   20cd4:	f7fc fa74 	bl	1d1c0 <_malloc_r>
   20cd8:	4605      	mov	r5, r0
   20cda:	2800      	cmp	r0, #0
   20cdc:	d0f2      	beq.n	20cc4 <_realloc_r+0x1c>
   20cde:	4631      	mov	r1, r6
   20ce0:	4622      	mov	r2, r4
   20ce2:	f7ff fec2 	bl	20a6a <memcpy>
   20ce6:	4631      	mov	r1, r6
   20ce8:	4638      	mov	r0, r7
   20cea:	f7fc fa1b 	bl	1d124 <_free_r>
   20cee:	e7e9      	b.n	20cc4 <_realloc_r+0x1c>
   20cf0:	4635      	mov	r5, r6
   20cf2:	e7e7      	b.n	20cc4 <_realloc_r+0x1c>

00020cf4 <_malloc_usable_size_r>:
   20cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   20cf8:	1f18      	subs	r0, r3, #4
   20cfa:	2b00      	cmp	r3, #0
   20cfc:	bfbc      	itt	lt
   20cfe:	580b      	ldrlt	r3, [r1, r0]
   20d00:	18c0      	addlt	r0, r0, r3
   20d02:	4770      	bx	lr

00020d04 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   20d04:	f7f7 bf1e 	b.w	18b44 <SystemInit>
